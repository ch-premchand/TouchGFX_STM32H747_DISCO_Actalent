
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00027934  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003d24  08027bd8  08027bd8  00028bd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 00002be4  0802b8fc  0802b8fc  0002c8fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001fc  0802e4e0  0802e4e0  0002f4e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 004d1d54  90000000  90000000  00031000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 000000c4  904d1d54  904d1d54  00502d54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  0802e6dc  0802e6dc  00502e18  2**0
                  CONTENTS
  8 .ARM          00000008  0802e6dc  0802e6dc  0002f6dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  0802e6e4  0802e6e4  00502e18  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000020  0802e6e4  0802e6e4  0002f6e4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  0802e704  0802e704  0002f704  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000016c  24000000  0802e70c  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000180  0802e878  00030180  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000280  0802e978  00030280  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          000267c0  24000380  0802ea78  00030380  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  24026b40  0802ea78  00030b40  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  00502e18  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00503000  2**2
                  ALLOC
 19 .debug_info   000f6401  00000000  00000000  00502e46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00018ff7  00000000  00000000  005f9247  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00004240  00000000  00000000  00612240  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004afe  00000000  00000000  00616480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00055066  00000000  00000000  0061af7e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0007a43e  00000000  00000000  0066ffe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001eedc1  00000000  00000000  006ea422  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  008d91e3  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000ba60  00000000  00000000  008d92a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 0002a6d3  00000000  00000000  008e4d08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000099  00000000  00000000  0090f3db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000380 	.word	0x24000380
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08027bbc 	.word	0x08027bbc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000384 	.word	0x24000384
 80002dc:	08027bbc 	.word	0x08027bbc

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80009f8:	4901      	ldr	r1, [pc, #4]	@ (8000a00 <vApplicationIdleHook+0x8>)
 80009fa:	2000      	movs	r0, #0
 80009fc:	f00e bc7a 	b.w	800f2f4 <vTaskSetApplicationTaskTag>
 8000a00:	08002471 	.word	0x08002471

08000a04 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a04:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000a06:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a08:	224c      	movs	r2, #76	@ 0x4c
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	a809      	add	r0, sp, #36	@ 0x24
 8000a0e:	f026 f94d 	bl	8026cac <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a12:	2220      	movs	r2, #32
 8000a14:	2100      	movs	r1, #0
 8000a16:	a801      	add	r0, sp, #4
 8000a18:	f026 f948 	bl	8026cac <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a1c:	2004      	movs	r0, #4
 8000a1e:	f009 ff23 	bl	800a868 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a22:	2300      	movs	r3, #0
 8000a24:	9300      	str	r3, [sp, #0]
 8000a26:	4b26      	ldr	r3, [pc, #152]	@ (8000ac0 <SystemClock_Config+0xbc>)
 8000a28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a2a:	f022 0201 	bic.w	r2, r2, #1
 8000a2e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a32:	f003 0301 	and.w	r3, r3, #1
 8000a36:	9300      	str	r3, [sp, #0]
 8000a38:	4b22      	ldr	r3, [pc, #136]	@ (8000ac4 <SystemClock_Config+0xc0>)
 8000a3a:	699a      	ldr	r2, [r3, #24]
 8000a3c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a40:	619a      	str	r2, [r3, #24]
 8000a42:	699a      	ldr	r2, [r3, #24]
 8000a44:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a48:	9200      	str	r2, [sp, #0]
 8000a4a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a4c:	699a      	ldr	r2, [r3, #24]
 8000a4e:	0491      	lsls	r1, r2, #18
 8000a50:	d5fc      	bpl.n	8000a4c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a52:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a56:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a5a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a5c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a5e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a60:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a62:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a64:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a68:	2301      	movs	r3, #1
 8000a6a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a6e:	23a0      	movs	r3, #160	@ 0xa0
 8000a70:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a74:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a76:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a7a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a7e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a82:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a84:	f00a f9f0 	bl	800ae68 <HAL_RCC_OscConfig>
 8000a88:	b108      	cbz	r0, 8000a8e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a8a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a8c:	e7fe      	b.n	8000a8c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a8e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a90:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a92:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a9a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a9e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000aa0:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000aa4:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000aa8:	f00a fd7a 	bl	800b5a0 <HAL_RCC_ClockConfig>
 8000aac:	4601      	mov	r1, r0
 8000aae:	b108      	cbz	r0, 8000ab4 <SystemClock_Config+0xb0>
 8000ab0:	b672      	cpsid	i
  while (1)
 8000ab2:	e7fe      	b.n	8000ab2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000ab4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000ab8:	f00a fc82 	bl	800b3c0 <HAL_RCC_MCOConfig>
}
 8000abc:	b01d      	add	sp, #116	@ 0x74
 8000abe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ac0:	58000400 	.word	0x58000400
 8000ac4:	58024800 	.word	0x58024800

08000ac8 <main>:
{
 8000ac8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000acc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ace:	2210      	movs	r2, #16
 8000ad0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ad6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ad8:	f026 f8e8 	bl	8026cac <memset>
  HAL_MPU_Disable();
 8000adc:	f006 fe7c 	bl	80077d8 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ae0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000ae4:	4bbe      	ldr	r3, [pc, #760]	@ (8000de0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ae8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000aec:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000aee:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af2:	f006 fe8f 	bl	8007814 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000af6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000afa:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000afe:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b02:	f006 fe87 	bl	8007814 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b06:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b08:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000b0a:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000b0e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b12:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b16:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000b18:	2318      	movs	r3, #24
 8000b1a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b1e:	f006 fe79 	bl	8007814 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b22:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b24:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b26:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b2a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b2e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b30:	2312      	movs	r3, #18
 8000b32:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b36:	2300      	movs	r3, #0
 8000b38:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b3c:	f006 fe6a 	bl	8007814 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b40:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b44:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b46:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b4a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b4c:	2311      	movs	r3, #17
 8000b4e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b52:	f006 fe5f 	bl	8007814 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b56:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b58:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b5a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b5e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000b62:	4ba0      	ldr	r3, [pc, #640]	@ (8000de4 <main+0x31c>)
 8000b64:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b66:	230e      	movs	r3, #14
 8000b68:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b6c:	f006 fe52 	bl	8007814 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b70:	4628      	mov	r0, r5
 8000b72:	f006 fe3f 	bl	80077f4 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b76:	4b9c      	ldr	r3, [pc, #624]	@ (8000de8 <main+0x320>)
 8000b78:	695a      	ldr	r2, [r3, #20]
 8000b7a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000b7e:	d111      	bne.n	8000ba4 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b80:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b84:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b88:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b94:	695a      	ldr	r2, [r3, #20]
 8000b96:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b9a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b9c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000ba0:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000ba4:	4a90      	ldr	r2, [pc, #576]	@ (8000de8 <main+0x320>)
 8000ba6:	6953      	ldr	r3, [r2, #20]
 8000ba8:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000bac:	d123      	bne.n	8000bf6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000bae:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000bb2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000bb6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bba:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bbe:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bc2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bc6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bcc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bce:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bd2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bd4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000bd8:	d2f9      	bcs.n	8000bce <main+0x106>
    } while(sets-- != 0U);
 8000bda:	3b20      	subs	r3, #32
 8000bdc:	f113 0f20 	cmn.w	r3, #32
 8000be0:	d1f2      	bne.n	8000bc8 <main+0x100>
 8000be2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000be6:	6953      	ldr	r3, [r2, #20]
 8000be8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bec:	6153      	str	r3, [r2, #20]
 8000bee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000bf2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000bf6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bfa:	4d7c      	ldr	r5, [pc, #496]	@ (8000dec <main+0x324>)
 8000bfc:	682c      	ldr	r4, [r5, #0]
 8000bfe:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000c02:	f000 8337 	beq.w	8001274 <main+0x7ac>
 8000c06:	3b01      	subs	r3, #1
 8000c08:	d2f8      	bcs.n	8000bfc <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000c0a:	b672      	cpsid	i
  while (1)
 8000c0c:	e7fe      	b.n	8000c0c <main+0x144>
 8000c0e:	b672      	cpsid	i
 8000c10:	e7fe      	b.n	8000c10 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c12:	4877      	ldr	r0, [pc, #476]	@ (8000df0 <main+0x328>)
 8000c14:	4a77      	ldr	r2, [pc, #476]	@ (8000df4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c16:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c18:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000c1a:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c1e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c22:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c26:	f009 ff3f 	bl	800aaa8 <HAL_QSPI_Init>
 8000c2a:	b108      	cbz	r0, 8000c30 <main+0x168>
 8000c2c:	b672      	cpsid	i
  while (1)
 8000c2e:	e7fe      	b.n	8000c2e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c30:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c34:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c36:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c3a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c3e:	f006 f8ab 	bl	8006d98 <BSP_QSPI_Init>
 8000c42:	b108      	cbz	r0, 8000c48 <main+0x180>
 8000c44:	b672      	cpsid	i
  while (1)
 8000c46:	e7fe      	b.n	8000c46 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c48:	f006 f852 	bl	8006cf0 <BSP_QSPI_EnableMemoryMappedMode>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	b108      	cbz	r0, 8000c54 <main+0x18c>
 8000c50:	b672      	cpsid	i
  while (1)
 8000c52:	e7fe      	b.n	8000c52 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000c54:	4868      	ldr	r0, [pc, #416]	@ (8000df8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c56:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c5a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000e04 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000c5e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c62:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c66:	f007 f899 	bl	8007d9c <HAL_DMA2D_Init>
 8000c6a:	4604      	mov	r4, r0
 8000c6c:	b108      	cbz	r0, 8000c72 <main+0x1aa>
 8000c6e:	b672      	cpsid	i
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000c72:	4602      	mov	r2, r0
 8000c74:	4649      	mov	r1, r9
 8000c76:	4861      	ldr	r0, [pc, #388]	@ (8000dfc <main+0x334>)
 8000c78:	f007 ff72 	bl	8008b60 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000c7c:	2014      	movs	r0, #20
 8000c7e:	f006 fd2f 	bl	80076e0 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000c82:	462a      	mov	r2, r5
 8000c84:	4649      	mov	r1, r9
 8000c86:	485d      	ldr	r0, [pc, #372]	@ (8000dfc <main+0x334>)
 8000c88:	f007 ff6a 	bl	8008b60 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000c8c:	200a      	movs	r0, #10
 8000c8e:	f006 fd27 	bl	80076e0 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c92:	2224      	movs	r2, #36	@ 0x24
 8000c94:	4621      	mov	r1, r4
 8000c96:	a817      	add	r0, sp, #92	@ 0x5c
 8000c98:	f026 f808 	bl	8026cac <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c9c:	2218      	movs	r2, #24
 8000c9e:	4621      	mov	r1, r4
 8000ca0:	a811      	add	r0, sp, #68	@ 0x44
 8000ca2:	f026 f803 	bl	8026cac <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000ca6:	2234      	movs	r2, #52	@ 0x34
 8000ca8:	4621      	mov	r1, r4
 8000caa:	a82d      	add	r0, sp, #180	@ 0xb4
 8000cac:	f025 fffe 	bl	8026cac <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000cb0:	4621      	mov	r1, r4
 8000cb2:	222c      	movs	r2, #44	@ 0x2c
 8000cb4:	a820      	add	r0, sp, #128	@ 0x80
 8000cb6:	f025 fff9 	bl	8026cac <memset>
  hdsi.Instance = DSI;
 8000cba:	4e51      	ldr	r6, [pc, #324]	@ (8000e00 <main+0x338>)
 8000cbc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cc0:	a90e      	add	r1, sp, #56	@ 0x38
 8000cc2:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cc4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cc6:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 8000cca:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000ccc:	e9c6 8502 	strd	r8, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000cd0:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cd4:	f007 f9ae 	bl	8008034 <HAL_DSI_Init>
 8000cd8:	b108      	cbz	r0, 8000cde <main+0x216>
 8000cda:	b672      	cpsid	i
  while (1)
 8000cdc:	e7fe      	b.n	8000cdc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000cde:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000ce2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000ce6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000cea:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000cee:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000cf0:	a917      	add	r1, sp, #92	@ 0x5c
 8000cf2:	4630      	mov	r0, r6
 8000cf4:	f007 fc0a 	bl	800850c <HAL_DSI_ConfigHostTimeouts>
 8000cf8:	b108      	cbz	r0, 8000cfe <main+0x236>
 8000cfa:	b672      	cpsid	i
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cfe:	2321      	movs	r3, #33	@ 0x21
 8000d00:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d02:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d04:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d06:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d0a:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000d0c:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d10:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d12:	e9cd 7313 	strd	r7, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d16:	f007 fbbc 	bl	8008492 <HAL_DSI_ConfigPhyTimer>
 8000d1a:	b108      	cbz	r0, 8000d20 <main+0x258>
 8000d1c:	b672      	cpsid	i
  while (1)
 8000d1e:	e7fe      	b.n	8000d1e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d20:	2104      	movs	r1, #4
 8000d22:	4837      	ldr	r0, [pc, #220]	@ (8000e00 <main+0x338>)
 8000d24:	f007 fba4 	bl	8008470 <HAL_DSI_ConfigFlowControl>
 8000d28:	b108      	cbz	r0, 8000d2e <main+0x266>
 8000d2a:	b672      	cpsid	i
  while (1)
 8000d2c:	e7fe      	b.n	8000d2c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d2e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d32:	4833      	ldr	r0, [pc, #204]	@ (8000e00 <main+0x338>)
 8000d34:	f007 fd73 	bl	800881e <HAL_DSI_SetLowPowerRXFilter>
 8000d38:	4601      	mov	r1, r0
 8000d3a:	b108      	cbz	r0, 8000d40 <main+0x278>
 8000d3c:	b672      	cpsid	i
  while (1)
 8000d3e:	e7fe      	b.n	8000d3e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d40:	482f      	ldr	r0, [pc, #188]	@ (8000e00 <main+0x338>)
 8000d42:	f007 f915 	bl	8007f70 <HAL_DSI_ConfigErrorMonitor>
 8000d46:	b108      	cbz	r0, 8000d4c <main+0x284>
 8000d48:	b672      	cpsid	i
  while (1)
 8000d4a:	e7fe      	b.n	8000d4a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d4c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d50:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d54:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d58:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d5c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d60:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d64:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d68:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d6c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d70:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d74:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d78:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d80:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d84:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d88:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d8c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d90:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d92:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d96:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d9a:	4819      	ldr	r0, [pc, #100]	@ (8000e00 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d9c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000da0:	f007 fb32 	bl	8008408 <HAL_DSI_ConfigCommand>
 8000da4:	b108      	cbz	r0, 8000daa <main+0x2e2>
 8000da6:	b672      	cpsid	i
  while (1)
 8000da8:	e7fe      	b.n	8000da8 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000daa:	2305      	movs	r3, #5
 8000dac:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000db0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000db2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000db4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000db6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000db8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000dbc:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dbe:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000dc2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000dc4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dc8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000dcc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dd0:	480b      	ldr	r0, [pc, #44]	@ (8000e00 <main+0x338>)
 8000dd2:	f007 faa7 	bl	8008324 <HAL_DSI_ConfigAdaptedCommandMode>
 8000dd6:	4601      	mov	r1, r0
 8000dd8:	b1b0      	cbz	r0, 8000e08 <main+0x340>
 8000dda:	b672      	cpsid	i
  while (1)
 8000ddc:	e7fe      	b.n	8000ddc <main+0x314>
 8000dde:	bf00      	nop
 8000de0:	0300001b 	.word	0x0300001b
 8000de4:	10040000 	.word	0x10040000
 8000de8:	e000ed00 	.word	0xe000ed00
 8000dec:	58024400 	.word	0x58024400
 8000df0:	2400049c 	.word	0x2400049c
 8000df4:	52005000 	.word	0x52005000
 8000df8:	240006dc 	.word	0x240006dc
 8000dfc:	58021800 	.word	0x58021800
 8000e00:	240006c0 	.word	0x240006c0
 8000e04:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000e08:	4875      	ldr	r0, [pc, #468]	@ (8000fe0 <main+0x518>)
 8000e0a:	f007 fa7a 	bl	8008302 <HAL_DSI_SetGenericVCID>
 8000e0e:	4604      	mov	r4, r0
 8000e10:	b108      	cbz	r0, 8000e16 <main+0x34e>
 8000e12:	b672      	cpsid	i
  while (1)
 8000e14:	e7fe      	b.n	8000e14 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e16:	2234      	movs	r2, #52	@ 0x34
 8000e18:	4601      	mov	r1, r0
 8000e1a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000e1c:	4d71      	ldr	r5, [pc, #452]	@ (8000fe4 <main+0x51c>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e1e:	f025 ff45 	bl	8026cac <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e22:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 8001030 <main+0x568>
 8000e26:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000e2a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000e2e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e32:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000e34:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000e36:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e3a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e3e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e42:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e46:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000e4a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e4e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000e52:	f240 1893 	movw	r8, #403	@ 0x193
 8000e56:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000e5a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000e5e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e62:	f009 f9e9 	bl	800a238 <HAL_LTDC_Init>
 8000e66:	4602      	mov	r2, r0
 8000e68:	b108      	cbz	r0, 8000e6e <main+0x3a6>
 8000e6a:	b672      	cpsid	i
  while (1)
 8000e6c:	e7fe      	b.n	8000e6c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000e6e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e70:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000e74:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000e78:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000e7a:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000e7e:	f88d 00b2 	strb.w	r0, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000e82:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000e84:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e88:	2107      	movs	r1, #7
 8000e8a:	e9cd 4127 	strd	r4, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e8e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000e92:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.ImageWidth = 400;
 8000e96:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e9a:	4628      	mov	r0, r5
 8000e9c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e9e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000ea2:	f009 fa7e 	bl	800a3a2 <HAL_LTDC_ConfigLayer>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	b108      	cbz	r0, 8000eae <main+0x3e6>
 8000eaa:	b672      	cpsid	i
  while (1)
 8000eac:	e7fe      	b.n	8000eac <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000eae:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000eb0:	484b      	ldr	r0, [pc, #300]	@ (8000fe0 <main+0x518>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000eb2:	6993      	ldr	r3, [r2, #24]
 8000eb4:	f023 0301 	bic.w	r3, r3, #1
 8000eb8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000eba:	f007 fb8d 	bl	80085d8 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000ebe:	494a      	ldr	r1, [pc, #296]	@ (8000fe8 <main+0x520>)
  IOCtx.GetTick     = BSP_GetTick;
 8000ec0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fec <main+0x524>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ec2:	484b      	ldr	r0, [pc, #300]	@ (8000ff0 <main+0x528>)
  IOCtx.GetTick     = BSP_GetTick;
 8000ec4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000ec6:	4b4b      	ldr	r3, [pc, #300]	@ (8000ff4 <main+0x52c>)
  IOCtx.Address     = 0;
 8000ec8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000eca:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000ecc:	4b4a      	ldr	r3, [pc, #296]	@ (8000ff8 <main+0x530>)
 8000ece:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ed0:	f005 fd06 	bl	80068e0 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000ed4:	4632      	mov	r2, r6
 8000ed6:	4621      	mov	r1, r4
 8000ed8:	4845      	ldr	r0, [pc, #276]	@ (8000ff0 <main+0x528>)
 8000eda:	f005 f971 	bl	80061c0 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000ede:	2328      	movs	r3, #40	@ 0x28
 8000ee0:	2215      	movs	r2, #21
 8000ee2:	4621      	mov	r1, r4
 8000ee4:	483e      	ldr	r0, [pc, #248]	@ (8000fe0 <main+0x518>)
 8000ee6:	9400      	str	r4, [sp, #0]
 8000ee8:	f007 fba9 	bl	800863e <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000eec:	a92d      	add	r1, sp, #180	@ 0xb4
 8000eee:	483c      	ldr	r0, [pc, #240]	@ (8000fe0 <main+0x518>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000ef0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000ef2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000ef6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000efa:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000efe:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000f02:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f06:	f007 fa7f 	bl	8008408 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000f0a:	4622      	mov	r2, r4
 8000f0c:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f10:	4628      	mov	r0, r5
 8000f12:	f009 fa73 	bl	800a3fc <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f16:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000f18:	4838      	ldr	r0, [pc, #224]	@ (8000ffc <main+0x534>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000f1a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f1c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000f1e:	f043 0301 	orr.w	r3, r3, #1
 8000f22:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f24:	4b36      	ldr	r3, [pc, #216]	@ (8001000 <main+0x538>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f26:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000f28:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f2a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f2e:	f006 fc9d 	bl	800786c <HAL_CRC_Init>
 8000f32:	b108      	cbz	r0, 8000f38 <main+0x470>
 8000f34:	b672      	cpsid	i
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000f38:	4832      	ldr	r0, [pc, #200]	@ (8001004 <main+0x53c>)
 8000f3a:	4b33      	ldr	r3, [pc, #204]	@ (8001008 <main+0x540>)
 8000f3c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f3e:	f008 fb69 	bl	8009614 <HAL_JPEG_Init>
 8000f42:	b108      	cbz	r0, 8000f48 <main+0x480>
 8000f44:	b672      	cpsid	i
  while (1)
 8000f46:	e7fe      	b.n	8000f46 <main+0x47e>
  huart1.Instance = USART1;
 8000f48:	4c30      	ldr	r4, [pc, #192]	@ (800100c <main+0x544>)
  huart1.Init.BaudRate = 115200;
 8000f4a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f4e:	4830      	ldr	r0, [pc, #192]	@ (8001010 <main+0x548>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f50:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000f52:	e9c4 0300 	strd	r0, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f56:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f58:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f5a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f5e:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f60:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f64:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f68:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f6c:	f00c faff 	bl	800d56e <HAL_UART_Init>
 8000f70:	4601      	mov	r1, r0
 8000f72:	b108      	cbz	r0, 8000f78 <main+0x4b0>
 8000f74:	b672      	cpsid	i
  while (1)
 8000f76:	e7fe      	b.n	8000f76 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f78:	4620      	mov	r0, r4
 8000f7a:	f00c fb69 	bl	800d650 <HAL_UARTEx_SetTxFifoThreshold>
 8000f7e:	4601      	mov	r1, r0
 8000f80:	b108      	cbz	r0, 8000f86 <main+0x4be>
 8000f82:	b672      	cpsid	i
  while (1)
 8000f84:	e7fe      	b.n	8000f84 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f86:	4620      	mov	r0, r4
 8000f88:	f00c fb82 	bl	800d690 <HAL_UARTEx_SetRxFifoThreshold>
 8000f8c:	b108      	cbz	r0, 8000f92 <main+0x4ca>
 8000f8e:	b672      	cpsid	i
  while (1)
 8000f90:	e7fe      	b.n	8000f90 <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f92:	4620      	mov	r0, r4
 8000f94:	f00c fb41 	bl	800d61a <HAL_UARTEx_DisableFifoMode>
 8000f98:	4605      	mov	r5, r0
 8000f9a:	b108      	cbz	r0, 8000fa0 <main+0x4d8>
 8000f9c:	b672      	cpsid	i
  while (1)
 8000f9e:	e7fe      	b.n	8000f9e <main+0x4d6>
  MX_TouchGFX_Init();
 8000fa0:	f000 fe12 	bl	8001bc8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000fa4:	f000 fe0f 	bl	8001bc6 <MX_TouchGFX_PreOSInit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Hell", strlen("Hell"), HAL_MAX_DELAY);
 8000fa8:	f04f 33ff 	mov.w	r3, #4294967295
 8000fac:	2204      	movs	r2, #4
 8000fae:	4919      	ldr	r1, [pc, #100]	@ (8001014 <main+0x54c>)
 8000fb0:	4620      	mov	r0, r4
 8000fb2:	f00c fa2c 	bl	800d40e <HAL_UART_Transmit>
  (void)BSP_I2C4_Init();
 8000fb6:	f005 fcfb 	bl	80069b0 <BSP_I2C4_Init>
  osKernelInitialize();
 8000fba:	f00c fc2f 	bl	800d81c <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fbe:	4a16      	ldr	r2, [pc, #88]	@ (8001018 <main+0x550>)
 8000fc0:	4629      	mov	r1, r5
 8000fc2:	4816      	ldr	r0, [pc, #88]	@ (800101c <main+0x554>)
 8000fc4:	f00c fc56 	bl	800d874 <osThreadNew>
 8000fc8:	4b15      	ldr	r3, [pc, #84]	@ (8001020 <main+0x558>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fca:	4a16      	ldr	r2, [pc, #88]	@ (8001024 <main+0x55c>)
 8000fcc:	4629      	mov	r1, r5
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fce:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fd0:	4815      	ldr	r0, [pc, #84]	@ (8001028 <main+0x560>)
 8000fd2:	f00c fc4f 	bl	800d874 <osThreadNew>
 8000fd6:	4b15      	ldr	r3, [pc, #84]	@ (800102c <main+0x564>)
 8000fd8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000fda:	f00c fc31 	bl	800d840 <osKernelStart>
  while (1)
 8000fde:	e7fe      	b.n	8000fde <main+0x516>
 8000fe0:	240006c0 	.word	0x240006c0
 8000fe4:	240004e8 	.word	0x240004e8
 8000fe8:	2400039c 	.word	0x2400039c
 8000fec:	08006cc1 	.word	0x08006cc1
 8000ff0:	240003ac 	.word	0x240003ac
 8000ff4:	08002171 	.word	0x08002171
 8000ff8:	080021a9 	.word	0x080021a9
 8000ffc:	24000744 	.word	0x24000744
 8001000:	58024c00 	.word	0x58024c00
 8001004:	24000668 	.word	0x24000668
 8001008:	52003000 	.word	0x52003000
 800100c:	24000408 	.word	0x24000408
 8001010:	40011000 	.word	0x40011000
 8001014:	08027c18 	.word	0x08027c18
 8001018:	08027c58 	.word	0x08027c58
 800101c:	08001bd7 	.word	0x08001bd7
 8001020:	240003d0 	.word	0x240003d0
 8001024:	08027c34 	.word	0x08027c34
 8001028:	08003d1d 	.word	0x08003d1d
 800102c:	240003cc 	.word	0x240003cc
 8001030:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001034:	2214      	movs	r2, #20
 8001036:	2100      	movs	r1, #0
 8001038:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800103a:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103c:	f025 fe36 	bl	8026cac <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001040:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001044:	2200      	movs	r2, #0
 8001046:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800104e:	489a      	ldr	r0, [pc, #616]	@ (80012b8 <main+0x7f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001050:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001054:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001058:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800105c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001060:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001064:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001068:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800106c:	9304      	str	r3, [sp, #16]
 800106e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001070:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001074:	f043 0302 	orr.w	r3, r3, #2
 8001078:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800107c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001080:	f003 0302 	and.w	r3, r3, #2
 8001084:	9305      	str	r3, [sp, #20]
 8001086:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001088:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800108c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001090:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001094:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001098:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800109c:	9306      	str	r3, [sp, #24]
 800109e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80010a0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010a4:	f043 0310 	orr.w	r3, r3, #16
 80010a8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010ac:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	9307      	str	r3, [sp, #28]
 80010b6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010b8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010bc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010c8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010cc:	9308      	str	r3, [sp, #32]
 80010ce:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010d4:	f043 0304 	orr.w	r3, r3, #4
 80010d8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010dc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80010e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010e8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010ec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010f0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010f4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010f8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010fc:	930a      	str	r3, [sp, #40]	@ 0x28
 80010fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001100:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001104:	f043 0308 	orr.w	r3, r3, #8
 8001108:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800110c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001110:	f003 0308 	and.w	r3, r3, #8
 8001114:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001118:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800111c:	f043 0301 	orr.w	r3, r3, #1
 8001120:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001124:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001128:	f003 0301 	and.w	r3, r3, #1
 800112c:	930c      	str	r3, [sp, #48]	@ 0x30
 800112e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001130:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001134:	f043 0320 	orr.w	r3, r3, #32
 8001138:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800113c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001140:	f003 0320 	and.w	r3, r3, #32
 8001144:	930d      	str	r3, [sp, #52]	@ 0x34
 8001146:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001148:	f007 fd0a 	bl	8008b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800114c:	2200      	movs	r2, #0
 800114e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001152:	485a      	ldr	r0, [pc, #360]	@ (80012bc <main+0x7f4>)
 8001154:	f007 fd04 	bl	8008b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001158:	2200      	movs	r2, #0
 800115a:	2108      	movs	r1, #8
 800115c:	4858      	ldr	r0, [pc, #352]	@ (80012c0 <main+0x7f8>)
 800115e:	f007 fcff 	bl	8008b60 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001162:	2200      	movs	r2, #0
 8001164:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001168:	4856      	ldr	r0, [pc, #344]	@ (80012c4 <main+0x7fc>)
 800116a:	f007 fcf9 	bl	8008b60 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116e:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001172:	a92d      	add	r1, sp, #180	@ 0xb4
 8001174:	4850      	ldr	r0, [pc, #320]	@ (80012b8 <main+0x7f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001176:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117a:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800117e:	f007 fb65 	bl	800884c <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001182:	a92d      	add	r1, sp, #180	@ 0xb4
 8001184:	4850      	ldr	r0, [pc, #320]	@ (80012c8 <main+0x800>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001186:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001188:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800118c:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001190:	f007 fb5c 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001194:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001198:	a92d      	add	r1, sp, #180	@ 0xb4
 800119a:	4848      	ldr	r0, [pc, #288]	@ (80012bc <main+0x7f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011a0:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 80011a4:	f007 fb52 	bl	800884c <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011a8:	a92d      	add	r1, sp, #180	@ 0xb4
 80011aa:	4845      	ldr	r0, [pc, #276]	@ (80012c0 <main+0x7f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011b4:	f007 fb4a 	bl	800884c <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011b8:	a92d      	add	r1, sp, #180	@ 0xb4
 80011ba:	4842      	ldr	r0, [pc, #264]	@ (80012c4 <main+0x7fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011bc:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011c0:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011c4:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011c8:	f007 fb40 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011cc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80011d0:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	a92d      	add	r1, sp, #180	@ 0xb4
 80011d4:	483d      	ldr	r0, [pc, #244]	@ (80012cc <main+0x804>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011d6:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011da:	e9cd 232d 	strd	r2, r3, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011de:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011e2:	f007 fb33 	bl	800884c <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011e6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011ea:	4632      	mov	r2, r6
 80011ec:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011ee:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011f0:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011f2:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80011f6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011fa:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011fc:	402b      	ands	r3, r5
 80011fe:	9303      	str	r3, [sp, #12]
 8001200:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 8001202:	f006 fa97 	bl	8007734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 8001206:	207a      	movs	r0, #122	@ 0x7a
 8001208:	f006 fac6 	bl	8007798 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 800120c:	4a30      	ldr	r2, [pc, #192]	@ (80012d0 <main+0x808>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800120e:	4831      	ldr	r0, [pc, #196]	@ (80012d4 <main+0x80c>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001210:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001214:	6813      	ldr	r3, [r2, #0]
 8001216:	f023 0301 	bic.w	r3, r3, #1
 800121a:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800121c:	4b2e      	ldr	r3, [pc, #184]	@ (80012d8 <main+0x810>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800121e:	6286      	str	r6, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001220:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001224:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001228:	2320      	movs	r3, #32
 800122a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800122e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001232:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001236:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800123a:	e9c0 1308 	strd	r1, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800123e:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001240:	a92d      	add	r1, sp, #180	@ 0xb4
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001242:	e9c0 5802 	strd	r5, r8, [r0, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001246:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 800124a:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  SdramTiming.RCDDelay = 2;
 800124e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001252:	f00b fa9f 	bl	800c794 <HAL_SDRAM_Init>
 8001256:	4606      	mov	r6, r0
 8001258:	2800      	cmp	r0, #0
 800125a:	f47f acd8 	bne.w	8000c0e <main+0x146>
  BSP_SDRAM_DeInit(0);
 800125e:	f005 ff55 	bl	800710c <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001262:	4630      	mov	r0, r6
 8001264:	f005 ffa0 	bl	80071a8 <BSP_SDRAM_Init>
 8001268:	4603      	mov	r3, r0
 800126a:	2800      	cmp	r0, #0
 800126c:	f43f acd1 	beq.w	8000c12 <main+0x14a>
 8001270:	b672      	cpsid	i
  while (1)
 8001272:	e7fe      	b.n	8001272 <main+0x7aa>
  HAL_Init();
 8001274:	f006 f9f4 	bl	8007660 <HAL_Init>
  SystemClock_Config();
 8001278:	f7ff fbc4 	bl	8000a04 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800127c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001280:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001282:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001286:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800128a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800128e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001292:	9302      	str	r3, [sp, #8]
 8001294:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001296:	f007 fc71 	bl	8008b7c <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800129a:	4621      	mov	r1, r4
 800129c:	4620      	mov	r0, r4
 800129e:	f007 fc7b 	bl	8008b98 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80012a2:	4c0e      	ldr	r4, [pc, #56]	@ (80012dc <main+0x814>)
timeout = 0xFFFF;
 80012a4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 80012a8:	6822      	ldr	r2, [r4, #0]
 80012aa:	0412      	lsls	r2, r2, #16
 80012ac:	f53f aec2 	bmi.w	8001034 <main+0x56c>
 80012b0:	3b01      	subs	r3, #1
 80012b2:	d2f9      	bcs.n	80012a8 <main+0x7e0>
 80012b4:	b672      	cpsid	i
  while (1)
 80012b6:	e7fe      	b.n	80012b6 <main+0x7ee>
 80012b8:	58022400 	.word	0x58022400
 80012bc:	58022000 	.word	0x58022000
 80012c0:	58021800 	.word	0x58021800
 80012c4:	58021400 	.word	0x58021400
 80012c8:	58020000 	.word	0x58020000
 80012cc:	58020c00 	.word	0x58020c00
 80012d0:	52004000 	.word	0x52004000
 80012d4:	240003d4 	.word	0x240003d4
 80012d8:	52004140 	.word	0x52004140
 80012dc:	58024400 	.word	0x58024400

080012e0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80012e0:	6802      	ldr	r2, [r0, #0]
 80012e2:	4b03      	ldr	r3, [pc, #12]	@ (80012f0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012e4:	429a      	cmp	r2, r3
 80012e6:	d101      	bne.n	80012ec <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012e8:	f006 b9e8 	b.w	80076bc <HAL_IncTick>
}
 80012ec:	4770      	bx	lr
 80012ee:	bf00      	nop
 80012f0:	40001000 	.word	0x40001000

080012f4 <Error_Handler>:
 80012f4:	b672      	cpsid	i
  while (1)
 80012f6:	e7fe      	b.n	80012f6 <Error_Handler+0x2>

080012f8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001324 <HAL_MspInit+0x2c>)
{
 80012fa:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fc:	210f      	movs	r1, #15
 80012fe:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001302:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 8001306:	f042 0202 	orr.w	r2, r2, #2
 800130a:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001310:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001314:	f003 0302 	and.w	r3, r3, #2
 8001318:	9301      	str	r3, [sp, #4]
 800131a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800131c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800131e:	f006 ba09 	b.w	8007734 <HAL_NVIC_SetPriority>
 8001322:	bf00      	nop
 8001324:	58024400 	.word	0x58024400

08001328 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001328:	6802      	ldr	r2, [r0, #0]
{
 800132a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800132c:	4b09      	ldr	r3, [pc, #36]	@ (8001354 <HAL_CRC_MspInit+0x2c>)
 800132e:	429a      	cmp	r2, r3
 8001330:	d10d      	bne.n	800134e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001332:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001336:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800133a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800133e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001342:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001346:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800134a:	9301      	str	r3, [sp, #4]
 800134c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800134e:	b002      	add	sp, #8
 8001350:	4770      	bx	lr
 8001352:	bf00      	nop
 8001354:	58024c00 	.word	0x58024c00

08001358 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <HAL_DMA2D_MspInit+0x40>)
{
 800135a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800135c:	6802      	ldr	r2, [r0, #0]
 800135e:	429a      	cmp	r2, r3
 8001360:	d117      	bne.n	8001392 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001364:	2107      	movs	r1, #7
 8001366:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001368:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800136c:	f042 0210 	orr.w	r2, r2, #16
 8001370:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001374:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001376:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800137a:	f003 0310 	and.w	r3, r3, #16
 800137e:	9301      	str	r3, [sp, #4]
 8001380:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001382:	f006 f9d7 	bl	8007734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001386:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001388:	b003      	add	sp, #12
 800138a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800138e:	f006 ba03 	b.w	8007798 <HAL_NVIC_EnableIRQ>
}
 8001392:	b003      	add	sp, #12
 8001394:	f85d fb04 	ldr.w	pc, [sp], #4
 8001398:	52001000 	.word	0x52001000
 800139c:	58024400 	.word	0x58024400

080013a0 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 80013a0:	b510      	push	{r4, lr}
 80013a2:	b0ba      	sub	sp, #232	@ 0xe8
 80013a4:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013a6:	2214      	movs	r2, #20
 80013a8:	2100      	movs	r1, #0
 80013aa:	a803      	add	r0, sp, #12
 80013ac:	f025 fc7e 	bl	8026cac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013b0:	22c8      	movs	r2, #200	@ 0xc8
 80013b2:	2100      	movs	r1, #0
 80013b4:	a808      	add	r0, sp, #32
 80013b6:	f025 fc79 	bl	8026cac <memset>
  if(hdsi->Instance==DSI)
 80013ba:	6823      	ldr	r3, [r4, #0]
 80013bc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013c0:	d138      	bne.n	8001434 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013c2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013c6:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013c8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013ca:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013ce:	f00a fb6d 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 80013d2:	b108      	cbz	r0, 80013d8 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80013d4:	f7ff ff8e 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013d8:	4b17      	ldr	r3, [pc, #92]	@ (8001438 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013da:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013dc:	a903      	add	r1, sp, #12
 80013de:	4817      	ldr	r0, [pc, #92]	@ (800143c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80013e0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013e4:	f042 0210 	orr.w	r2, r2, #16
 80013e8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80013ec:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013f0:	f002 0210 	and.w	r2, r2, #16
 80013f4:	9201      	str	r2, [sp, #4]
 80013f6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013f8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8001400:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001404:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8001406:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800140a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800140e:	9302      	str	r3, [sp, #8]
 8001410:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001412:	2302      	movs	r3, #2
 8001414:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001418:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800141a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800141e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001420:	f007 fa14 	bl	800884c <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001424:	207b      	movs	r0, #123	@ 0x7b
 8001426:	4622      	mov	r2, r4
 8001428:	2107      	movs	r1, #7
 800142a:	f006 f983 	bl	8007734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800142e:	207b      	movs	r0, #123	@ 0x7b
 8001430:	f006 f9b2 	bl	8007798 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001434:	b03a      	add	sp, #232	@ 0xe8
 8001436:	bd10      	pop	{r4, pc}
 8001438:	58024400 	.word	0x58024400
 800143c:	58022400 	.word	0x58022400

08001440 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001440:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001442:	4b3c      	ldr	r3, [pc, #240]	@ (8001534 <HAL_JPEG_MspInit+0xf4>)
{
 8001444:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001446:	6802      	ldr	r2, [r0, #0]
 8001448:	429a      	cmp	r2, r3
 800144a:	d170      	bne.n	800152e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800144c:	4b3a      	ldr	r3, [pc, #232]	@ (8001538 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800144e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001450:	4c3a      	ldr	r4, [pc, #232]	@ (800153c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001452:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001456:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800145a:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001548 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800145e:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001460:	f042 0220 	orr.w	r2, r2, #32
 8001464:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001468:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800146a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800146e:	f003 0320 	and.w	r3, r3, #32
 8001472:	9301      	str	r3, [sp, #4]
 8001474:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001476:	2311      	movs	r3, #17
 8001478:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800147c:	2300      	movs	r3, #0
 800147e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001482:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001486:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001488:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800148a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800148e:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001492:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001496:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800149a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800149e:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 80014a2:	f009 f816 	bl	800a4d2 <HAL_MDMA_Init>
 80014a6:	b108      	cbz	r0, 80014ac <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 80014a8:	f7ff ff24 	bl	80012f4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 80014ac:	2200      	movs	r2, #0
 80014ae:	4823      	ldr	r0, [pc, #140]	@ (800153c <HAL_JPEG_MspInit+0xfc>)
 80014b0:	4611      	mov	r1, r2
 80014b2:	f009 f89c 	bl	800a5ee <HAL_MDMA_ConfigPostRequestMask>
 80014b6:	b108      	cbz	r0, 80014bc <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80014b8:	f7ff ff1c 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014bc:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014be:	2313      	movs	r3, #19
 80014c0:	4a1f      	ldr	r2, [pc, #124]	@ (8001540 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014c2:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014c4:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014c6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80014ca:	4c1e      	ldr	r4, [pc, #120]	@ (8001544 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014cc:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80014d0:	2300      	movs	r3, #0
 80014d2:	22c0      	movs	r2, #192	@ 0xc0
 80014d4:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014d8:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014da:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014dc:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014e0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80014e4:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014e8:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80014ec:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014f0:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014f2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80014f6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014fa:	f008 ffea 	bl	800a4d2 <HAL_MDMA_Init>
 80014fe:	b108      	cbz	r0, 8001504 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 8001500:	f7ff fef8 	bl	80012f4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 8001504:	2200      	movs	r2, #0
 8001506:	480f      	ldr	r0, [pc, #60]	@ (8001544 <HAL_JPEG_MspInit+0x104>)
 8001508:	4611      	mov	r1, r2
 800150a:	f009 f870 	bl	800a5ee <HAL_MDMA_ConfigPostRequestMask>
 800150e:	b108      	cbz	r0, 8001514 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001510:	f7ff fef0 	bl	80012f4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001514:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001516:	2200      	movs	r2, #0
 8001518:	2105      	movs	r1, #5
 800151a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800151c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800151e:	f006 f909 	bl	8007734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001522:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001524:	b003      	add	sp, #12
 8001526:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800152a:	f006 b935 	b.w	8007798 <HAL_NVIC_EnableIRQ>
}
 800152e:	b003      	add	sp, #12
 8001530:	bd30      	pop	{r4, r5, pc}
 8001532:	bf00      	nop
 8001534:	52003000 	.word	0x52003000
 8001538:	58024400 	.word	0x58024400
 800153c:	240005fc 	.word	0x240005fc
 8001540:	520001c0 	.word	0x520001c0
 8001544:	24000590 	.word	0x24000590
 8001548:	52000200 	.word	0x52000200

0800154c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800154c:	b510      	push	{r4, lr}
 800154e:	b0b4      	sub	sp, #208	@ 0xd0
 8001550:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001552:	22c8      	movs	r2, #200	@ 0xc8
 8001554:	2100      	movs	r1, #0
 8001556:	a802      	add	r0, sp, #8
 8001558:	f025 fba8 	bl	8026cac <memset>
  if(hltdc->Instance==LTDC)
 800155c:	6822      	ldr	r2, [r4, #0]
 800155e:	4b18      	ldr	r3, [pc, #96]	@ (80015c0 <HAL_LTDC_MspInit+0x74>)
 8001560:	429a      	cmp	r2, r3
 8001562:	d12b      	bne.n	80015bc <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001564:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001568:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800156a:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800156c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800156e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001572:	23a1      	movs	r3, #161	@ 0xa1
 8001574:	2205      	movs	r2, #5
 8001576:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800157a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800157c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001580:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001584:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001588:	f00a fa90 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 800158c:	b108      	cbz	r0, 8001592 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800158e:	f7ff feb1 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001592:	4b0c      	ldr	r3, [pc, #48]	@ (80015c4 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001594:	2058      	movs	r0, #88	@ 0x58
 8001596:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001598:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800159c:	f042 0208 	orr.w	r2, r2, #8
 80015a0:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80015a4:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 80015a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80015aa:	f003 0308 	and.w	r3, r3, #8
 80015ae:	9301      	str	r3, [sp, #4]
 80015b0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80015b2:	f006 f8bf 	bl	8007734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015b6:	2058      	movs	r0, #88	@ 0x58
 80015b8:	f006 f8ee 	bl	8007798 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015bc:	b034      	add	sp, #208	@ 0xd0
 80015be:	bd10      	pop	{r4, pc}
 80015c0:	50001000 	.word	0x50001000
 80015c4:	58024400 	.word	0x58024400

080015c8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ca:	b0bf      	sub	sp, #252	@ 0xfc
 80015cc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	2214      	movs	r2, #20
 80015d0:	2100      	movs	r1, #0
 80015d2:	a807      	add	r0, sp, #28
 80015d4:	f025 fb6a 	bl	8026cac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015d8:	22c8      	movs	r2, #200	@ 0xc8
 80015da:	2100      	movs	r1, #0
 80015dc:	a80c      	add	r0, sp, #48	@ 0x30
 80015de:	f025 fb65 	bl	8026cac <memset>
  if(hqspi->Instance==QUADSPI)
 80015e2:	6822      	ldr	r2, [r4, #0]
 80015e4:	4b53      	ldr	r3, [pc, #332]	@ (8001734 <HAL_QSPI_MspInit+0x16c>)
 80015e6:	429a      	cmp	r2, r3
 80015e8:	f040 80a1 	bne.w	800172e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015ec:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015f0:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f2:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015f4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015f8:	f00a fa58 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 80015fc:	b108      	cbz	r0, 8001602 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80015fe:	f7ff fe79 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001602:	4b4d      	ldr	r3, [pc, #308]	@ (8001738 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001604:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001606:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001608:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 800160a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800160e:	a907      	add	r1, sp, #28
 8001610:	484a      	ldr	r0, [pc, #296]	@ (800173c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001612:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001614:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001618:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800161c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001620:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001624:	9201      	str	r2, [sp, #4]
 8001626:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001628:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800162c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001630:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001634:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001638:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800163c:	9202      	str	r2, [sp, #8]
 800163e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001640:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001644:	f042 0220 	orr.w	r2, r2, #32
 8001648:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800164c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001650:	f002 0220 	and.w	r2, r2, #32
 8001654:	9203      	str	r2, [sp, #12]
 8001656:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001658:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800165c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001660:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001664:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001668:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800166c:	9204      	str	r2, [sp, #16]
 800166e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001670:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001674:	f042 0202 	orr.w	r2, r2, #2
 8001678:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800167c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001680:	f002 0202 	and.w	r2, r2, #2
 8001684:	9205      	str	r2, [sp, #20]
 8001686:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001688:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800168c:	f042 0208 	orr.w	r2, r2, #8
 8001690:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001694:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001698:	f003 0308 	and.w	r3, r3, #8
 800169c:	9306      	str	r3, [sp, #24]
 800169e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a0:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 80016a4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ac:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016ae:	f007 f8cd 	bl	800884c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016b2:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b4:	a907      	add	r1, sp, #28
 80016b6:	4821      	ldr	r0, [pc, #132]	@ (800173c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016b8:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ba:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016be:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016c2:	f007 f8c3 	bl	800884c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016c6:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c8:	a907      	add	r1, sp, #28
 80016ca:	481d      	ldr	r0, [pc, #116]	@ (8001740 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016cc:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016ce:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016d6:	f007 f8b9 	bl	800884c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016da:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016de:	a907      	add	r1, sp, #28
 80016e0:	4817      	ldr	r0, [pc, #92]	@ (8001740 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016e2:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ec:	f007 f8ae 	bl	800884c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016f0:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f2:	a907      	add	r1, sp, #28
 80016f4:	4813      	ldr	r0, [pc, #76]	@ (8001744 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016f6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016f8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016fc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001700:	f007 f8a4 	bl	800884c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001704:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001706:	a907      	add	r1, sp, #28
 8001708:	480f      	ldr	r0, [pc, #60]	@ (8001748 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800170a:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170c:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001710:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001714:	f007 f89a 	bl	800884c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001718:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171c:	a907      	add	r1, sp, #28
 800171e:	480b      	ldr	r0, [pc, #44]	@ (800174c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001720:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001722:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001726:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800172a:	f007 f88f 	bl	800884c <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800172e:	b03f      	add	sp, #252	@ 0xfc
 8001730:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001732:	bf00      	nop
 8001734:	52005000 	.word	0x52005000
 8001738:	58024400 	.word	0x58024400
 800173c:	58021800 	.word	0x58021800
 8001740:	58021400 	.word	0x58021400
 8001744:	58021c00 	.word	0x58021c00
 8001748:	58020400 	.word	0x58020400
 800174c:	58020c00 	.word	0x58020c00

08001750 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001750:	b510      	push	{r4, lr}
 8001752:	b0ba      	sub	sp, #232	@ 0xe8
 8001754:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001756:	2214      	movs	r2, #20
 8001758:	2100      	movs	r1, #0
 800175a:	a803      	add	r0, sp, #12
 800175c:	f025 faa6 	bl	8026cac <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001760:	22c8      	movs	r2, #200	@ 0xc8
 8001762:	2100      	movs	r1, #0
 8001764:	a808      	add	r0, sp, #32
 8001766:	f025 faa1 	bl	8026cac <memset>
  if(huart->Instance==USART1)
 800176a:	6822      	ldr	r2, [r4, #0]
 800176c:	4b1e      	ldr	r3, [pc, #120]	@ (80017e8 <HAL_UART_MspInit+0x98>)
 800176e:	429a      	cmp	r2, r3
 8001770:	d138      	bne.n	80017e4 <HAL_UART_MspInit+0x94>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001772:	2201      	movs	r2, #1
 8001774:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001776:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001778:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800177c:	f00a f996 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8001780:	b108      	cbz	r0, 8001786 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001782:	f7ff fdb7 	bl	80012f4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001786:	4b19      	ldr	r3, [pc, #100]	@ (80017ec <HAL_UART_MspInit+0x9c>)
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001788:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800178a:	a903      	add	r1, sp, #12
 800178c:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800178e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001792:	f042 0210 	orr.w	r2, r2, #16
 8001796:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800179a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800179e:	f002 0210 	and.w	r2, r2, #16
 80017a2:	9201      	str	r2, [sp, #4]
 80017a4:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80017aa:	f042 0201 	orr.w	r2, r2, #1
 80017ae:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017ba:	f003 0301 	and.w	r3, r3, #1
 80017be:	9302      	str	r3, [sp, #8]
 80017c0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c2:	2302      	movs	r3, #2
 80017c4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c8:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ca:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017ce:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017d0:	f007 f83c 	bl	800884c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017d4:	2025      	movs	r0, #37	@ 0x25
 80017d6:	4622      	mov	r2, r4
 80017d8:	2105      	movs	r1, #5
 80017da:	f005 ffab 	bl	8007734 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017de:	2025      	movs	r0, #37	@ 0x25
 80017e0:	f005 ffda 	bl	8007798 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017e4:	b03a      	add	sp, #232	@ 0xe8
 80017e6:	bd10      	pop	{r4, pc}
 80017e8:	40011000 	.word	0x40011000
 80017ec:	58024400 	.word	0x58024400
 80017f0:	58020000 	.word	0x58020000

080017f4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017f6:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017f8:	2100      	movs	r1, #0
 80017fa:	2214      	movs	r2, #20
 80017fc:	a801      	add	r0, sp, #4
 80017fe:	f025 fa55 	bl	8026cac <memset>
  if (FMC_Initialized) {
 8001802:	4b3f      	ldr	r3, [pc, #252]	@ (8001900 <HAL_SDRAM_MspInit+0x10c>)
 8001804:	6819      	ldr	r1, [r3, #0]
 8001806:	2900      	cmp	r1, #0
 8001808:	d177      	bne.n	80018fa <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 800180a:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800180c:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 800180e:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001810:	22c0      	movs	r2, #192	@ 0xc0
 8001812:	f025 fa4b 	bl	8026cac <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001816:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800181a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800181c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800181e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001822:	f00a f943 	bl	800baac <HAL_RCCEx_PeriphCLKConfig>
 8001826:	b108      	cbz	r0, 800182c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001828:	f7ff fd64 	bl	80012f4 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800182c:	4b35      	ldr	r3, [pc, #212]	@ (8001904 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800182e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001830:	2600      	movs	r6, #0
 8001832:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001834:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001838:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800183a:	a901      	add	r1, sp, #4
 800183c:	4832      	ldr	r0, [pc, #200]	@ (8001908 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800183e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001842:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001846:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800184a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800184c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001850:	9300      	str	r3, [sp, #0]
 8001852:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001854:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001858:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001860:	f006 fff4 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001864:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001866:	a901      	add	r1, sp, #4
 8001868:	4828      	ldr	r0, [pc, #160]	@ (800190c <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800186a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800186c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001870:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001874:	f006 ffea 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001878:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187c:	a901      	add	r1, sp, #4
 800187e:	4824      	ldr	r0, [pc, #144]	@ (8001910 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001880:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001882:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001886:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800188a:	f006 ffdf 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800188e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001892:	a901      	add	r1, sp, #4
 8001894:	481f      	ldr	r0, [pc, #124]	@ (8001914 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001896:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001898:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800189c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80018a0:	f006 ffd4 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 80018a4:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a8:	a901      	add	r1, sp, #4
 80018aa:	481b      	ldr	r0, [pc, #108]	@ (8001918 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ac:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ae:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018b6:	f006 ffc9 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80018ba:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018be:	a901      	add	r1, sp, #4
 80018c0:	4816      	ldr	r0, [pc, #88]	@ (800191c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018c4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018c8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018cc:	f006 ffbe 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80018d0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d4:	a901      	add	r1, sp, #4
 80018d6:	4812      	ldr	r0, [pc, #72]	@ (8001920 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018d8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018da:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018de:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018e2:	f006 ffb3 	bl	800884c <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018e6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e8:	a901      	add	r1, sp, #4
 80018ea:	480e      	ldr	r0, [pc, #56]	@ (8001924 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018ec:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ee:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018f2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018f6:	f006 ffa9 	bl	800884c <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018fa:	b039      	add	sp, #228	@ 0xe4
 80018fc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018fe:	bf00      	nop
 8001900:	2400076c 	.word	0x2400076c
 8001904:	58024400 	.word	0x58024400
 8001908:	58022000 	.word	0x58022000
 800190c:	58020400 	.word	0x58020400
 8001910:	58021000 	.word	0x58021000
 8001914:	58021c00 	.word	0x58021c00
 8001918:	58021800 	.word	0x58021800
 800191c:	58020c00 	.word	0x58020c00
 8001920:	58021400 	.word	0x58021400
 8001924:	58020800 	.word	0x58020800

08001928 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001928:	4b1a      	ldr	r3, [pc, #104]	@ (8001994 <HAL_SDRAM_MspDeInit+0x6c>)
 800192a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800192c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800192e:	bb82      	cbnz	r2, 8001992 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001930:	4a19      	ldr	r2, [pc, #100]	@ (8001998 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001932:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001934:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001938:	4818      	ldr	r0, [pc, #96]	@ (800199c <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800193a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800193c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001940:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001944:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001948:	f007 f868 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800194c:	2160      	movs	r1, #96	@ 0x60
 800194e:	4814      	ldr	r0, [pc, #80]	@ (80019a0 <HAL_SDRAM_MspDeInit+0x78>)
 8001950:	f007 f864 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001954:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001958:	4812      	ldr	r0, [pc, #72]	@ (80019a4 <HAL_SDRAM_MspDeInit+0x7c>)
 800195a:	f007 f85f 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800195e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001962:	4811      	ldr	r0, [pc, #68]	@ (80019a8 <HAL_SDRAM_MspDeInit+0x80>)
 8001964:	f007 f85a 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001968:	f248 1133 	movw	r1, #33075	@ 0x8133
 800196c:	480f      	ldr	r0, [pc, #60]	@ (80019ac <HAL_SDRAM_MspDeInit+0x84>)
 800196e:	f007 f855 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001972:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001976:	480e      	ldr	r0, [pc, #56]	@ (80019b0 <HAL_SDRAM_MspDeInit+0x88>)
 8001978:	f007 f850 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800197c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001980:	480c      	ldr	r0, [pc, #48]	@ (80019b4 <HAL_SDRAM_MspDeInit+0x8c>)
 8001982:	f007 f84b 	bl	8008a1c <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001986:	4621      	mov	r1, r4
 8001988:	480b      	ldr	r0, [pc, #44]	@ (80019b8 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800198a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800198e:	f007 b845 	b.w	8008a1c <HAL_GPIO_DeInit>
}
 8001992:	bd10      	pop	{r4, pc}
 8001994:	24000768 	.word	0x24000768
 8001998:	58024400 	.word	0x58024400
 800199c:	58022000 	.word	0x58022000
 80019a0:	58020400 	.word	0x58020400
 80019a4:	58021000 	.word	0x58021000
 80019a8:	58021c00 	.word	0x58021c00
 80019ac:	58021800 	.word	0x58021800
 80019b0:	58020c00 	.word	0x58020c00
 80019b4:	58021400 	.word	0x58021400
 80019b8:	58020800 	.word	0x58020800

080019bc <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019bc:	280f      	cmp	r0, #15
{
 80019be:	b510      	push	{r4, lr}
 80019c0:	4604      	mov	r4, r0
 80019c2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019c4:	d902      	bls.n	80019cc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80019c6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80019c8:	b00a      	add	sp, #40	@ 0x28
 80019ca:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80019cc:	4601      	mov	r1, r0
 80019ce:	2200      	movs	r2, #0
 80019d0:	2036      	movs	r0, #54	@ 0x36
 80019d2:	f005 feaf 	bl	8007734 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019d6:	2036      	movs	r0, #54	@ 0x36
 80019d8:	f005 fede 	bl	8007798 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80019dc:	4b18      	ldr	r3, [pc, #96]	@ (8001a40 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019de:	4669      	mov	r1, sp
 80019e0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80019e2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019e4:	4b17      	ldr	r3, [pc, #92]	@ (8001a44 <HAL_InitTick+0x88>)
 80019e6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019ea:	f042 0210 	orr.w	r2, r2, #16
 80019ee:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80019f2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019f6:	f003 0310 	and.w	r3, r3, #16
 80019fa:	9301      	str	r3, [sp, #4]
 80019fc:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019fe:	f009 ff3b 	bl	800b878 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001a02:	9b07      	ldr	r3, [sp, #28]
 8001a04:	b9c3      	cbnz	r3, 8001a38 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001a06:	f009 ff13 	bl	800b830 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001a0a:	4c0f      	ldr	r4, [pc, #60]	@ (8001a48 <HAL_InitTick+0x8c>)
 8001a0c:	4b0f      	ldr	r3, [pc, #60]	@ (8001a4c <HAL_InitTick+0x90>)
 8001a0e:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a10:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001a14:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <HAL_InitTick+0x94>)
 8001a18:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a1c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001a1e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a20:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a22:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001a24:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a26:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a28:	f00b f8a8 	bl	800cb7c <HAL_TIM_Base_Init>
 8001a2c:	2800      	cmp	r0, #0
 8001a2e:	d1ca      	bne.n	80019c6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a30:	4620      	mov	r0, r4
 8001a32:	f00a ff57 	bl	800c8e4 <HAL_TIM_Base_Start_IT>
 8001a36:	e7c7      	b.n	80019c8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a38:	f009 fefa 	bl	800b830 <HAL_RCC_GetPCLK1Freq>
 8001a3c:	0040      	lsls	r0, r0, #1
 8001a3e:	e7e4      	b.n	8001a0a <HAL_InitTick+0x4e>
 8001a40:	240000a4 	.word	0x240000a4
 8001a44:	58024400 	.word	0x58024400
 8001a48:	24000770 	.word	0x24000770
 8001a4c:	40001000 	.word	0x40001000
 8001a50:	000f4240 	.word	0x000f4240

08001a54 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a54:	e7fe      	b.n	8001a54 <NMI_Handler>

08001a56 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a56:	e7fe      	b.n	8001a56 <HardFault_Handler>

08001a58 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a58:	e7fe      	b.n	8001a58 <MemManage_Handler>

08001a5a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a5a:	e7fe      	b.n	8001a5a <BusFault_Handler>

08001a5c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a5c:	e7fe      	b.n	8001a5c <UsageFault_Handler>

08001a5e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a5e:	4770      	bx	lr

08001a60 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a60:	4801      	ldr	r0, [pc, #4]	@ (8001a68 <USART1_IRQHandler+0x8>)
 8001a62:	f00b b8f7 	b.w	800cc54 <HAL_UART_IRQHandler>
 8001a66:	bf00      	nop
 8001a68:	24000408 	.word	0x24000408

08001a6c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a6c:	4801      	ldr	r0, [pc, #4]	@ (8001a74 <TIM6_DAC_IRQHandler+0x8>)
 8001a6e:	f00a bf7b 	b.w	800c968 <HAL_TIM_IRQHandler>
 8001a72:	bf00      	nop
 8001a74:	24000770 	.word	0x24000770

08001a78 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a78:	4801      	ldr	r0, [pc, #4]	@ (8001a80 <LTDC_IRQHandler+0x8>)
 8001a7a:	f008 bc35 	b.w	800a2e8 <HAL_LTDC_IRQHandler>
 8001a7e:	bf00      	nop
 8001a80:	240004e8 	.word	0x240004e8

08001a84 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a84:	4801      	ldr	r0, [pc, #4]	@ (8001a8c <DMA2D_IRQHandler+0x8>)
 8001a86:	f006 b9c8 	b.w	8007e1a <HAL_DMA2D_IRQHandler>
 8001a8a:	bf00      	nop
 8001a8c:	240006dc 	.word	0x240006dc

08001a90 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001a90:	4801      	ldr	r0, [pc, #4]	@ (8001a98 <JPEG_IRQHandler+0x8>)
 8001a92:	f008 baf7 	b.w	800a084 <HAL_JPEG_IRQHandler>
 8001a96:	bf00      	nop
 8001a98:	24000668 	.word	0x24000668

08001a9c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a9c:	4804      	ldr	r0, [pc, #16]	@ (8001ab0 <MDMA_IRQHandler+0x14>)
{
 8001a9e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001aa0:	f008 fe2a 	bl	800a6f8 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001aa4:	4803      	ldr	r0, [pc, #12]	@ (8001ab4 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001aa6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001aaa:	f008 be25 	b.w	800a6f8 <HAL_MDMA_IRQHandler>
 8001aae:	bf00      	nop
 8001ab0:	24000590 	.word	0x24000590
 8001ab4:	240005fc 	.word	0x240005fc

08001ab8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001ab8:	4801      	ldr	r0, [pc, #4]	@ (8001ac0 <DSI_IRQHandler+0x8>)
 8001aba:	f006 bbb0 	b.w	800821e <HAL_DSI_IRQHandler>
 8001abe:	bf00      	nop
 8001ac0:	240006c0 	.word	0x240006c0

08001ac4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ac4:	2001      	movs	r0, #1
 8001ac6:	4770      	bx	lr

08001ac8 <_kill>:

int _kill(int pid, int sig)
{
 8001ac8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aca:	f025 fa07 	bl	8026edc <__errno>
 8001ace:	2316      	movs	r3, #22
 8001ad0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ad6:	bd08      	pop	{r3, pc}

08001ad8 <_exit>:

void _exit (int status)
{
 8001ad8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001ada:	f025 f9ff 	bl	8026edc <__errno>
 8001ade:	2316      	movs	r3, #22
 8001ae0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ae2:	e7fe      	b.n	8001ae2 <_exit+0xa>

08001ae4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ae4:	b570      	push	{r4, r5, r6, lr}
 8001ae6:	460d      	mov	r5, r1
 8001ae8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aea:	460e      	mov	r6, r1
 8001aec:	1b73      	subs	r3, r6, r5
 8001aee:	429c      	cmp	r4, r3
 8001af0:	dc01      	bgt.n	8001af6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001af2:	4620      	mov	r0, r4
 8001af4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001af6:	f3af 8000 	nop.w
 8001afa:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afe:	e7f5      	b.n	8001aec <_read+0x8>

08001b00 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001b00:	b570      	push	{r4, r5, r6, lr}
 8001b02:	460d      	mov	r5, r1
 8001b04:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b06:	460e      	mov	r6, r1
 8001b08:	1b73      	subs	r3, r6, r5
 8001b0a:	429c      	cmp	r4, r3
 8001b0c:	dc01      	bgt.n	8001b12 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001b0e:	4620      	mov	r0, r4
 8001b10:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b12:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001b16:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b1a:	e7f5      	b.n	8001b08 <_write+0x8>

08001b1c <_close>:

int _close(int file)
{
	return -1;
}
 8001b1c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b20:	4770      	bx	lr

08001b22 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001b26:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001b28:	604b      	str	r3, [r1, #4]
}
 8001b2a:	4770      	bx	lr

08001b2c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b2c:	2001      	movs	r0, #1
 8001b2e:	4770      	bx	lr

08001b30 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b30:	2000      	movs	r0, #0
 8001b32:	4770      	bx	lr

08001b34 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b34:	4a0b      	ldr	r2, [pc, #44]	@ (8001b64 <_sbrk+0x30>)
{
 8001b36:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b38:	6811      	ldr	r1, [r2, #0]
{
 8001b3a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b3c:	b909      	cbnz	r1, 8001b42 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b3e:	490a      	ldr	r1, [pc, #40]	@ (8001b68 <_sbrk+0x34>)
 8001b40:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b42:	6810      	ldr	r0, [r2, #0]
 8001b44:	4909      	ldr	r1, [pc, #36]	@ (8001b6c <_sbrk+0x38>)
 8001b46:	4c0a      	ldr	r4, [pc, #40]	@ (8001b70 <_sbrk+0x3c>)
 8001b48:	4403      	add	r3, r0
 8001b4a:	1b09      	subs	r1, r1, r4
 8001b4c:	428b      	cmp	r3, r1
 8001b4e:	d906      	bls.n	8001b5e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b50:	f025 f9c4 	bl	8026edc <__errno>
 8001b54:	230c      	movs	r3, #12
 8001b56:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b58:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b5c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b5e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b60:	e7fc      	b.n	8001b5c <_sbrk+0x28>
 8001b62:	bf00      	nop
 8001b64:	240007bc 	.word	0x240007bc
 8001b68:	24026b40 	.word	0x24026b40
 8001b6c:	24080000 	.word	0x24080000
 8001b70:	00001000 	.word	0x00001000

08001b74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b74:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b78:	f005 fd02 	bl	8007580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b7c:	480c      	ldr	r0, [pc, #48]	@ (8001bb0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b7e:	490d      	ldr	r1, [pc, #52]	@ (8001bb4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b80:	4a0d      	ldr	r2, [pc, #52]	@ (8001bb8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b82:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b84:	e002      	b.n	8001b8c <LoopCopyDataInit>

08001b86 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b86:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b88:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b8a:	3304      	adds	r3, #4

08001b8c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b8c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b8e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b90:	d3f9      	bcc.n	8001b86 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b92:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b94:	4c0a      	ldr	r4, [pc, #40]	@ (8001bc0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b96:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b98:	e001      	b.n	8001b9e <LoopFillZerobss>

08001b9a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b9a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b9c:	3204      	adds	r2, #4

08001b9e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b9e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001ba0:	d3fb      	bcc.n	8001b9a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001ba2:	f025 f9a1 	bl	8026ee8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001ba6:	f7fe ff8f 	bl	8000ac8 <main>
  bx  lr
 8001baa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001bac:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001bb0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001bb4:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 8001bb8:	0802e70c 	.word	0x0802e70c
  ldr r2, =_sbss
 8001bbc:	24000380 	.word	0x24000380
  ldr r4, =_ebss
 8001bc0:	24026b40 	.word	0x24026b40

08001bc4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bc4:	e7fe      	b.n	8001bc4 <ADC3_IRQHandler>

08001bc6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001bc6:	4770      	bx	lr

08001bc8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001bc8:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001bca:	f001 fd1d 	bl	8003608 <touchgfx_components_init>
    touchgfx_init();
}
 8001bce:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001bd2:	f001 bca1 	b.w	8003518 <touchgfx_init>

08001bd6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001bd6:	f001 bd19 	b.w	800360c <touchgfx_taskEntry>

08001bda <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001bda:	6840      	ldr	r0, [r0, #4]
    }
 8001bdc:	4770      	bx	lr

08001bde <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001bde:	6041      	str	r1, [r0, #4]
    }
 8001be0:	4770      	bx	lr

08001be2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001be2:	1a52      	subs	r2, r2, r1
 8001be4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001be8:	fbb2 f0f3 	udiv	r0, r2, r3
 8001bec:	4770      	bx	lr
	...

08001bf0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001bf0:	4b02      	ldr	r3, [pc, #8]	@ (8001bfc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001bf2:	68c0      	ldr	r0, [r0, #12]
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001bf8:	4358      	muls	r0, r3
 8001bfa:	4770      	bx	lr
 8001bfc:	240007c0 	.word	0x240007c0

08001c00 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001c00:	4770      	bx	lr
	...

08001c04 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001c04:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c06:	4a1e      	ldr	r2, [pc, #120]	@ (8001c80 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001c08:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001c0c:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001c0e:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c12:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c16:	f043 0301 	orr.w	r3, r3, #1
 8001c1a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c1e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c22:	f003 0301 	and.w	r3, r3, #1
 8001c26:	9301      	str	r3, [sp, #4]
 8001c28:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001c2a:	4b16      	ldr	r3, [pc, #88]	@ (8001c84 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c2c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c2e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001c30:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c32:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c34:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001c36:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001c38:	2101      	movs	r1, #1
 8001c3a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001c3c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c3e:	2210      	movs	r2, #16
 8001c40:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c44:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c48:	fab2 f282 	clz	r2, r2
 8001c4c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001c4e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c88 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001c50:	5cd3      	ldrb	r3, [r2, r3]
 8001c52:	b983      	cbnz	r3, 8001c76 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001c54:	f009 fdca 	bl	800b7ec <HAL_RCC_GetHCLKFreq>
 8001c58:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001c5a:	f009 fbff 	bl	800b45c <HAL_RCC_GetSysClockFreq>
 8001c5e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001c62:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001c64:	4807      	ldr	r0, [pc, #28]	@ (8001c84 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c66:	f00a ff89 	bl	800cb7c <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001c6a:	4806      	ldr	r0, [pc, #24]	@ (8001c84 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001c6c:	b003      	add	sp, #12
 8001c6e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001c72:	f00a bdfd 	b.w	800c870 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001c76:	f009 fddb 	bl	800b830 <HAL_RCC_GetPCLK1Freq>
 8001c7a:	0044      	lsls	r4, r0, #1
 8001c7c:	e7ed      	b.n	8001c5a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001c7e:	bf00      	nop
 8001c80:	58024400 	.word	0x58024400
 8001c84:	240007c0 	.word	0x240007c0
 8001c88:	0802a8c8 	.word	0x0802a8c8

08001c8c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001c8c:	b510      	push	{r4, lr}
 8001c8e:	4604      	mov	r4, r0
 8001c90:	2110      	movs	r1, #16
 8001c92:	f024 f9bf 	bl	8026014 <_ZdlPvj>
 8001c96:	4620      	mov	r0, r4
 8001c98:	bd10      	pop	{r4, pc}

08001c9a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001c9a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001c9c:	6803      	ldr	r3, [r0, #0]
{
 8001c9e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001ca0:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001ca2:	b131      	cbz	r1, 8001cb2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001ca4:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001ca6:	4798      	blx	r3
 8001ca8:	6863      	ldr	r3, [r4, #4]
 8001caa:	1b5b      	subs	r3, r3, r5
 8001cac:	4403      	add	r3, r0
 8001cae:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001cb0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001cb2:	4798      	blx	r3
 8001cb4:	60a0      	str	r0, [r4, #8]
}
 8001cb6:	e7fb      	b.n	8001cb0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001cb8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001cb8:	4770      	bx	lr
	...

08001cbc <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001cbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001cbe:	4b0a      	ldr	r3, [pc, #40]	@ (8001ce8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001cc0:	460f      	mov	r7, r1
 8001cc2:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001cc4:	781d      	ldrb	r5, [r3, #0]
 8001cc6:	b915      	cbnz	r5, 8001cce <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001cc8:	2500      	movs	r5, #0
}
 8001cca:	4628      	mov	r0, r5
 8001ccc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001cce:	4c07      	ldr	r4, [pc, #28]	@ (8001cec <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001cd0:	2000      	movs	r0, #0
 8001cd2:	4621      	mov	r1, r4
 8001cd4:	f005 fbf8 	bl	80074c8 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001cd8:	6823      	ldr	r3, [r4, #0]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d0f4      	beq.n	8001cc8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001cde:	6863      	ldr	r3, [r4, #4]
 8001ce0:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001ce2:	68a3      	ldr	r3, [r4, #8]
 8001ce4:	6033      	str	r3, [r6, #0]
            return true;
 8001ce6:	e7f0      	b.n	8001cca <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001ce8:	2400081c 	.word	0x2400081c
 8001cec:	2400080c 	.word	0x2400080c

08001cf0 <_ZN20STM32TouchControllerD0Ev>:
 8001cf0:	b510      	push	{r4, lr}
 8001cf2:	4604      	mov	r4, r0
 8001cf4:	2104      	movs	r1, #4
 8001cf6:	f024 f98d 	bl	8026014 <_ZdlPvj>
 8001cfa:	4620      	mov	r0, r4
 8001cfc:	bd10      	pop	{r4, pc}
	...

08001d00 <_ZN20STM32TouchController4initEv>:
{
 8001d00:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001d02:	4b0e      	ldr	r3, [pc, #56]	@ (8001d3c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001d04:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001d08:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001d0a:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001d0c:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d10:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001d14:	230c      	movs	r3, #12
 8001d16:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001d1a:	f005 fb45 	bl	80073a8 <BSP_TS_Init>
 8001d1e:	4b08      	ldr	r3, [pc, #32]	@ (8001d40 <_ZN20STM32TouchController4initEv+0x40>)
 8001d20:	b910      	cbnz	r0, 8001d28 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001d22:	2201      	movs	r2, #1
 8001d24:	701a      	strb	r2, [r3, #0]
}
 8001d26:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d1fb      	bne.n	8001d26 <_ZN20STM32TouchController4initEv+0x26>
 8001d2e:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <_ZN20STM32TouchController4initEv+0x44>)
 8001d30:	212e      	movs	r1, #46	@ 0x2e
 8001d32:	4a05      	ldr	r2, [pc, #20]	@ (8001d48 <_ZN20STM32TouchController4initEv+0x48>)
 8001d34:	4805      	ldr	r0, [pc, #20]	@ (8001d4c <_ZN20STM32TouchController4initEv+0x4c>)
 8001d36:	f024 fce3 	bl	8026700 <__assert_func>
 8001d3a:	bf00      	nop
 8001d3c:	24000818 	.word	0x24000818
 8001d40:	2400081c 	.word	0x2400081c
 8001d44:	08027ca4 	.word	0x08027ca4
 8001d48:	08027cb7 	.word	0x08027cb7
 8001d4c:	08027ce1 	.word	0x08027ce1

08001d50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001d50:	2803      	cmp	r0, #3
 8001d52:	d825      	bhi.n	8001da0 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001d54:	e8df f000 	tbb	[pc, r0]
 8001d58:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001d5c:	4b11      	ldr	r3, [pc, #68]	@ (8001da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d5e:	2108      	movs	r1, #8
 8001d60:	681a      	ldr	r2, [r3, #0]
 8001d62:	fab2 f282 	clz	r2, r2
 8001d66:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d68:	480f      	ldr	r0, [pc, #60]	@ (8001da8 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d6a:	f006 bef9 	b.w	8008b60 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d6e:	4b0d      	ldr	r3, [pc, #52]	@ (8001da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d74:	685a      	ldr	r2, [r3, #4]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	0952      	lsrs	r2, r2, #5
 8001d7c:	e7f4      	b.n	8001d68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001d7e:	4b09      	ldr	r3, [pc, #36]	@ (8001da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d80:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d84:	689a      	ldr	r2, [r3, #8]
 8001d86:	fab2 f282 	clz	r2, r2
 8001d8a:	0952      	lsrs	r2, r2, #5
 8001d8c:	e7ec      	b.n	8001d68 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d8e:	4b05      	ldr	r3, [pc, #20]	@ (8001da4 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d90:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d94:	4805      	ldr	r0, [pc, #20]	@ (8001dac <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001d96:	68da      	ldr	r2, [r3, #12]
 8001d98:	fab2 f282 	clz	r2, r2
 8001d9c:	0952      	lsrs	r2, r2, #5
 8001d9e:	e7e4      	b.n	8001d6a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001da0:	4770      	bx	lr
 8001da2:	bf00      	nop
 8001da4:	24000820 	.word	0x24000820
 8001da8:	58022400 	.word	0x58022400
 8001dac:	58021400 	.word	0x58021400

08001db0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001db0:	2803      	cmp	r0, #3
 8001db2:	d825      	bhi.n	8001e00 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001db4:	e8df f000 	tbb	[pc, r0]
 8001db8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001dbc:	4b11      	ldr	r3, [pc, #68]	@ (8001e04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dbe:	2108      	movs	r1, #8
 8001dc0:	681a      	ldr	r2, [r3, #0]
 8001dc2:	3a00      	subs	r2, #0
 8001dc4:	bf18      	it	ne
 8001dc6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001dc8:	480f      	ldr	r0, [pc, #60]	@ (8001e08 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001dca:	f006 bec9 	b.w	8008b60 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001dce:	4b0d      	ldr	r3, [pc, #52]	@ (8001e04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dd0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dd4:	685a      	ldr	r2, [r3, #4]
 8001dd6:	3a00      	subs	r2, #0
 8001dd8:	bf18      	it	ne
 8001dda:	2201      	movne	r2, #1
 8001ddc:	e7f4      	b.n	8001dc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001dde:	4b09      	ldr	r3, [pc, #36]	@ (8001e04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001de0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001de4:	689a      	ldr	r2, [r3, #8]
 8001de6:	3a00      	subs	r2, #0
 8001de8:	bf18      	it	ne
 8001dea:	2201      	movne	r2, #1
 8001dec:	e7ec      	b.n	8001dc8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001dee:	4b05      	ldr	r3, [pc, #20]	@ (8001e04 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001df0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001df4:	4805      	ldr	r0, [pc, #20]	@ (8001e0c <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001df6:	68da      	ldr	r2, [r3, #12]
 8001df8:	3a00      	subs	r2, #0
 8001dfa:	bf18      	it	ne
 8001dfc:	2201      	movne	r2, #1
 8001dfe:	e7e4      	b.n	8001dca <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e00:	4770      	bx	lr
 8001e02:	bf00      	nop
 8001e04:	24000820 	.word	0x24000820
 8001e08:	58022400 	.word	0x58022400
 8001e0c:	58021400 	.word	0x58021400

08001e10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e10:	2803      	cmp	r0, #3
 8001e12:	d811      	bhi.n	8001e38 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001e14:	e8df f000 	tbb	[pc, r0]
 8001e18:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e1c:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e1e:	4807      	ldr	r0, [pc, #28]	@ (8001e3c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e20:	f006 bea3 	b.w	8008b6a <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e24:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e28:	e7f9      	b.n	8001e1e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e2a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e2e:	e7f6      	b.n	8001e1e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e34:	4802      	ldr	r0, [pc, #8]	@ (8001e40 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001e36:	e7f3      	b.n	8001e20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e38:	4770      	bx	lr
 8001e3a:	bf00      	nop
 8001e3c:	58022400 	.word	0x58022400
 8001e40:	58021400 	.word	0x58021400

08001e44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001e44:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001e46:	2803      	cmp	r0, #3
 8001e48:	d815      	bhi.n	8001e76 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001e4a:	e8df f000 	tbb	[pc, r0]
 8001e4e:	0a02      	.short	0x0a02
 8001e50:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e52:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e54:	4809      	ldr	r0, [pc, #36]	@ (8001e7c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e56:	f006 fe7d 	bl	8008b54 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001e5a:	1e43      	subs	r3, r0, #1
 8001e5c:	4258      	negs	r0, r3
 8001e5e:	4158      	adcs	r0, r3
 8001e60:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e62:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e66:	e7f5      	b.n	8001e54 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e68:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e6c:	e7f2      	b.n	8001e54 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e6e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e72:	4803      	ldr	r0, [pc, #12]	@ (8001e80 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001e74:	e7ef      	b.n	8001e56 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001e76:	2000      	movs	r0, #0
 8001e78:	e7ef      	b.n	8001e5a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001e7a:	bf00      	nop
 8001e7c:	58022400 	.word	0x58022400
 8001e80:	58021400 	.word	0x58021400

08001e84 <_ZN8touchgfx4GPIO4initEv>:
{
 8001e84:	b570      	push	{r4, r5, r6, lr}
 8001e86:	4d08      	ldr	r5, [pc, #32]	@ (8001ea8 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001e88:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001e8a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001e8c:	b2e0      	uxtb	r0, r4
 8001e8e:	f7ff ffd9 	bl	8001e44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001e92:	b118      	cbz	r0, 8001e9c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001e94:	682b      	ldr	r3, [r5, #0]
 8001e96:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001e98:	bf18      	it	ne
 8001e9a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001e9c:	3401      	adds	r4, #1
 8001e9e:	3504      	adds	r5, #4
 8001ea0:	2c05      	cmp	r4, #5
 8001ea2:	d1f3      	bne.n	8001e8c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001ea4:	bd70      	pop	{r4, r5, r6, pc}
 8001ea6:	bf00      	nop
 8001ea8:	24000820 	.word	0x24000820

08001eac <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001eac:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001eae:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001eb2:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001eb6:	4770      	bx	lr

08001eb8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001eb8:	2000      	movs	r0, #0
 8001eba:	4770      	bx	lr

08001ebc <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001ebc:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001ebe:	3900      	subs	r1, #0
 8001ec0:	4b02      	ldr	r3, [pc, #8]	@ (8001ecc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001ec2:	bf18      	it	ne
 8001ec4:	2101      	movne	r1, #1
 8001ec6:	7019      	strb	r1, [r3, #0]
    }
 8001ec8:	4770      	bx	lr
 8001eca:	bf00      	nop
 8001ecc:	24025e1f 	.word	0x24025e1f

08001ed0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ed0:	2000      	movs	r0, #0
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ed4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ed6:	b10b      	cbz	r3, 8001edc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ed8:	4608      	mov	r0, r1
 8001eda:	4718      	bx	r3
        }
    }
 8001edc:	4770      	bx	lr

08001ede <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ede:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ee2:	4770      	bx	lr

08001ee4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001ee4:	6840      	ldr	r0, [r0, #4]
 8001ee6:	6803      	ldr	r3, [r0, #0]
 8001ee8:	699b      	ldr	r3, [r3, #24]
 8001eea:	4718      	bx	r3

08001eec <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001eec:	4b01      	ldr	r3, [pc, #4]	@ (8001ef4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001eee:	6818      	ldr	r0, [r3, #0]
 8001ef0:	4770      	bx	lr
 8001ef2:	bf00      	nop
 8001ef4:	24000844 	.word	0x24000844

08001ef8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ef8:	4770      	bx	lr

08001efa <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001efa:	f001 bc84 	b.w	8003806 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001efe <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001efe:	f001 bc13 	b.w	8003728 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001f02 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001f02:	f001 bde5 	b.w	8003ad0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001f06 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001f06:	f001 bdd7 	b.w	8003ab8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001f0c <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001f0c:	b510      	push	{r4, lr}
 8001f0e:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001f10:	f001 fd9a 	bl	8003a48 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001f14:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001f18:	b113      	cbz	r3, 8001f20 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001f1a:	4b02      	ldr	r3, [pc, #8]	@ (8001f24 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
    }
}
 8001f20:	bd10      	pop	{r4, pc}
 8001f22:	bf00      	nop
 8001f24:	2400000c 	.word	0x2400000c

08001f28 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f28:	f001 bc06 	b.w	8003738 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001f2c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001f2c:	b510      	push	{r4, lr}
 8001f2e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001f30:	f00e fe94 	bl	8010c5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001f34:	6823      	ldr	r3, [r4, #0]
 8001f36:	4620      	mov	r0, r4
 8001f38:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001f3c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001f40:	4718      	bx	r3

08001f42 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001f42:	b510      	push	{r4, lr}
 8001f44:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001f46:	f00e fa1f 	bl	8010388 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001f4a:	6860      	ldr	r0, [r4, #4]
 8001f4c:	6803      	ldr	r3, [r0, #0]
    }
 8001f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	4718      	bx	r3

08001f56 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001f56:	f00e b8ed 	b.w	8010134 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001f5a <_ZN11TouchGFXHALD0Ev>:
 8001f5a:	b510      	push	{r4, lr}
 8001f5c:	4604      	mov	r4, r0
 8001f5e:	217c      	movs	r1, #124	@ 0x7c
 8001f60:	f024 f858 	bl	8026014 <_ZdlPvj>
 8001f64:	4620      	mov	r0, r4
 8001f66:	bd10      	pop	{r4, pc}

08001f68 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001f68:	4b02      	ldr	r3, [pc, #8]	@ (8001f74 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001f6e:	f00e b91d 	b.w	80101ac <_ZN8touchgfx3HAL10beginFrameEv>
 8001f72:	bf00      	nop
 8001f74:	2400000c 	.word	0x2400000c

08001f78 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001f78:	b538      	push	{r3, r4, r5, lr}
 8001f7a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001f7c:	4d06      	ldr	r5, [pc, #24]	@ (8001f98 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001f7e:	f001 fc03 	bl	8003788 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001f82:	2300      	movs	r3, #0
    mcuInstr.init();
 8001f84:	4628      	mov	r0, r5
 8001f86:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001f8a:	f7ff fe3b 	bl	8001c04 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001f8e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f90:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f92:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001f96:	bd38      	pop	{r3, r4, r5, pc}
 8001f98:	24000834 	.word	0x24000834

08001f9c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001f9c:	6803      	ldr	r3, [r0, #0]
{
 8001f9e:	4604      	mov	r4, r0
 8001fa0:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001fa2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001fa6:	4798      	blx	r3
    enableInterrupts();
 8001fa8:	6823      	ldr	r3, [r4, #0]
 8001faa:	4620      	mov	r0, r4
 8001fac:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001fae:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001fb0:	f000 ff5c 	bl	8002e6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001fb4:	6823      	ldr	r3, [r4, #0]
 8001fb6:	4620      	mov	r0, r4
 8001fb8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fba:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001fbc:	2100      	movs	r1, #0
 8001fbe:	2329      	movs	r3, #41	@ 0x29
 8001fc0:	2215      	movs	r2, #21
 8001fc2:	4805      	ldr	r0, [pc, #20]	@ (8001fd8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001fc4:	9100      	str	r1, [sp, #0]
 8001fc6:	f006 fb3a 	bl	800863e <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001fca:	f000 ff4f 	bl	8002e6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001fce:	6823      	ldr	r3, [r4, #0]
 8001fd0:	4620      	mov	r0, r4
 8001fd2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fd4:	4798      	blx	r3
    for (;;)
 8001fd6:	e7f8      	b.n	8001fca <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001fd8:	240006c0 	.word	0x240006c0

08001fdc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001fdc:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	@ (8002018 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001fe2:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001fe4:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001fe8:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001fea:	428c      	cmp	r4, r1
 8001fec:	d009      	beq.n	8002002 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001fee:	b93a      	cbnz	r2, 8002000 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ff0:	490a      	ldr	r1, [pc, #40]	@ (800201c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ff2:	4a0b      	ldr	r2, [pc, #44]	@ (8002020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001ff4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ff6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001ff8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001ffa:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ffc:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001ffe:	701a      	strb	r2, [r3, #0]
        }
    }
 8002000:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8002002:	2a00      	cmp	r2, #0
 8002004:	d0fc      	beq.n	8002000 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8002006:	4a06      	ldr	r2, [pc, #24]	@ (8002020 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8002008:	4904      	ldr	r1, [pc, #16]	@ (800201c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800200a:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 800200c:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 800200e:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002010:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002012:	2200      	movs	r2, #0
 8002014:	e7f3      	b.n	8001ffe <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002016:	bf00      	nop
 8002018:	24025e18 	.word	0x24025e18
 800201c:	24025e16 	.word	0x24025e16
 8002020:	24025e14 	.word	0x24025e14

08002024 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002024:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002026:	4b09      	ldr	r3, [pc, #36]	@ (800204c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002028:	881b      	ldrh	r3, [r3, #0]
 800202a:	428b      	cmp	r3, r1
 800202c:	d803      	bhi.n	8002036 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800202e:	4b08      	ldr	r3, [pc, #32]	@ (8002050 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002030:	881b      	ldrh	r3, [r3, #0]
 8002032:	4293      	cmp	r3, r2
 8002034:	d905      	bls.n	8002042 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002038:	219e      	movs	r1, #158	@ 0x9e
 800203a:	4a07      	ldr	r2, [pc, #28]	@ (8002058 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800203c:	4807      	ldr	r0, [pc, #28]	@ (800205c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800203e:	f024 fb5f 	bl	8026700 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002042:	4b07      	ldr	r3, [pc, #28]	@ (8002060 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002044:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002046:	4b07      	ldr	r3, [pc, #28]	@ (8002064 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002048:	801a      	strh	r2, [r3, #0]
    }
 800204a:	bd08      	pop	{r3, pc}
 800204c:	24025e14 	.word	0x24025e14
 8002050:	24025e16 	.word	0x24025e16
 8002054:	08027d74 	.word	0x08027d74
 8002058:	08027dd7 	.word	0x08027dd7
 800205c:	08027e1a 	.word	0x08027e1a
 8002060:	24025e1a 	.word	0x24025e1a
 8002064:	24025e1c 	.word	0x24025e1c

08002068 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002068:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800206a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800206e:	b118      	cbz	r0, 8002078 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002070:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002072:	6803      	ldr	r3, [r0, #0]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	4718      	bx	r3
    }
 8002078:	4770      	bx	lr
	...

0800207c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800207c:	b570      	push	{r4, r5, r6, lr}
 800207e:	460d      	mov	r5, r1
 8002080:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002084:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002086:	b935      	cbnz	r5, 8002096 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002088:	4b0a      	ldr	r3, [pc, #40]	@ (80020b4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800208a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800208e:	4a0a      	ldr	r2, [pc, #40]	@ (80020b8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002090:	480a      	ldr	r0, [pc, #40]	@ (80020bc <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002092:	f024 fb35 	bl	8026700 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002096:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800209a:	3a00      	subs	r2, #0
 800209c:	4b08      	ldr	r3, [pc, #32]	@ (80020c0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800209e:	bf18      	it	ne
 80020a0:	2201      	movne	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 80020a4:	6803      	ldr	r3, [r0, #0]
}
 80020a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80020aa:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ae:	4718      	bx	r3
 80020b0:	24000844 	.word	0x24000844
 80020b4:	08027e6d 	.word	0x08027e6d
 80020b8:	08027ea5 	.word	0x08027ea5
 80020bc:	08027e1a 	.word	0x08027e1a
 80020c0:	24025e1e 	.word	0x24025e1e

080020c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 80020c4:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80020c8:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80020ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80020ce:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80020d0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80020d4:	4a1d      	ldr	r2, [pc, #116]	@ (800214c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80020d6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80020d8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80020dc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80020de:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80020e0:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80020e4:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80020e6:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80020ea:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020ec:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80020ee:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80020f2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020f6:	4a16      	ldr	r2, [pc, #88]	@ (8002150 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020f8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80020fc:	3520      	adds	r5, #32
          buttonController(0),
 80020fe:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 8002102:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 8002106:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 800210a:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 800210e:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002112:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8002116:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800211a:	6782      	str	r2, [r0, #120]	@ 0x78
 800211c:	b2ad      	uxth	r5, r5
        instance = this;
 800211e:	4a0d      	ldr	r2, [pc, #52]	@ (8002154 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002120:	42b5      	cmp	r5, r6
        instance = this;
 8002122:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002124:	4a0c      	ldr	r2, [pc, #48]	@ (8002158 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8002126:	8015      	strh	r5, [r2, #0]
 8002128:	4a0c      	ldr	r2, [pc, #48]	@ (800215c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800212a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800212c:	bf28      	it	cs
 800212e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002130:	4a0b      	ldr	r2, [pc, #44]	@ (8002160 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002132:	bf38      	it	cc
 8002134:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002136:	8016      	strh	r6, [r2, #0]
 8002138:	4a0a      	ldr	r2, [pc, #40]	@ (8002164 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800213a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800213e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002140:	4a09      	ldr	r2, [pc, #36]	@ (8002168 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002142:	7013      	strb	r3, [r2, #0]
 8002144:	4b09      	ldr	r3, [pc, #36]	@ (800216c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002146:	6003      	str	r3, [r0, #0]
}
 8002148:	bd70      	pop	{r4, r5, r6, pc}
 800214a:	bf00      	nop
 800214c:	01000001 	.word	0x01000001
 8002150:	01010000 	.word	0x01010000
 8002154:	24025e20 	.word	0x24025e20
 8002158:	24025e14 	.word	0x24025e14
 800215c:	24025e1a 	.word	0x24025e1a
 8002160:	24025e16 	.word	0x24025e16
 8002164:	24025e1c 	.word	0x24025e1c
 8002168:	24025e18 	.word	0x24025e18
 800216c:	08027efc 	.word	0x08027efc

08002170 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002170:	2b01      	cmp	r3, #1
    {
 8002172:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002174:	d80e      	bhi.n	8002194 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002176:	5cd3      	ldrb	r3, [r2, r3]
 8002178:	2215      	movs	r2, #21
 800217a:	9300      	str	r3, [sp, #0]
 800217c:	460b      	mov	r3, r1
 800217e:	4601      	mov	r1, r0
 8002180:	4808      	ldr	r0, [pc, #32]	@ (80021a4 <DSI_IO_Write+0x34>)
 8002182:	f006 fa5c 	bl	800863e <HAL_DSI_ShortWrite>
 8002186:	b118      	cbz	r0, 8002190 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002188:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800218c:	b002      	add	sp, #8
 800218e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002190:	2000      	movs	r0, #0
 8002192:	e7fb      	b.n	800218c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002194:	e9cd 1200 	strd	r1, r2, [sp]
 8002198:	4601      	mov	r1, r0
 800219a:	2239      	movs	r2, #57	@ 0x39
 800219c:	4801      	ldr	r0, [pc, #4]	@ (80021a4 <DSI_IO_Write+0x34>)
 800219e:	f006 fa5f 	bl	8008660 <HAL_DSI_LongWrite>
 80021a2:	e7f0      	b.n	8002186 <DSI_IO_Write+0x16>
 80021a4:	240006c0 	.word	0x240006c0

080021a8 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 80021a8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 80021aa:	e9cd 1201 	strd	r1, r2, [sp, #4]
 80021ae:	2106      	movs	r1, #6
 80021b0:	9100      	str	r1, [sp, #0]
 80021b2:	4601      	mov	r1, r0
 80021b4:	4805      	ldr	r0, [pc, #20]	@ (80021cc <DSI_IO_Read+0x24>)
 80021b6:	f006 fab3 	bl	8008720 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80021ba:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80021bc:	bf14      	ite	ne
 80021be:	f06f 0007 	mvnne.w	r0, #7
 80021c2:	2000      	moveq	r0, #0
 80021c4:	b005      	add	sp, #20
 80021c6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ca:	bf00      	nop
 80021cc:	240006c0 	.word	0x240006c0

080021d0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80021d0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80021d2:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021d6:	4c0b      	ldr	r4, [pc, #44]	@ (8002204 <LCD_ReqTear+0x34>)
 80021d8:	2239      	movs	r2, #57	@ 0x39
 80021da:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80021dc:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021e0:	ab03      	add	r3, sp, #12
 80021e2:	4620      	mov	r0, r4
 80021e4:	9301      	str	r3, [sp, #4]
 80021e6:	2344      	movs	r3, #68	@ 0x44
 80021e8:	9300      	str	r3, [sp, #0]
 80021ea:	2302      	movs	r3, #2
 80021ec:	f006 fa38 	bl	8008660 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80021f0:	2100      	movs	r1, #0
 80021f2:	2335      	movs	r3, #53	@ 0x35
 80021f4:	2215      	movs	r2, #21
 80021f6:	4620      	mov	r0, r4
 80021f8:	9100      	str	r1, [sp, #0]
 80021fa:	f006 fa20 	bl	800863e <HAL_DSI_ShortWrite>
    }
 80021fe:	b004      	add	sp, #16
 8002200:	bd10      	pop	{r4, pc}
 8002202:	bf00      	nop
 8002204:	240006c0 	.word	0x240006c0

08002208 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 8002208:	b508      	push	{r3, lr}
    LCD_ReqTear();
 800220a:	f7ff ffe1 	bl	80021d0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 800220e:	4b0c      	ldr	r3, [pc, #48]	@ (8002240 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002210:	2202      	movs	r2, #2
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002218:	2201      	movs	r2, #1
 800221a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800221e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002222:	f042 0201 	orr.w	r2, r2, #1
 8002226:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800222a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800222e:	f042 0202 	orr.w	r2, r2, #2
 8002232:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002236:	2203      	movs	r2, #3
 8002238:	4b02      	ldr	r3, [pc, #8]	@ (8002244 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800223a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800223c:	bd08      	pop	{r3, pc}
 800223e:	bf00      	nop
 8002240:	240006c0 	.word	0x240006c0
 8002244:	50001000 	.word	0x50001000

08002248 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002248:	4b07      	ldr	r3, [pc, #28]	@ (8002268 <LCD_ReqEnable+0x20>)
    {
 800224a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 800224c:	7819      	ldrb	r1, [r3, #0]
 800224e:	b939      	cbnz	r1, 8002260 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002250:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002252:	4806      	ldr	r0, [pc, #24]	@ (800226c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002254:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002256:	2329      	movs	r3, #41	@ 0x29
 8002258:	2215      	movs	r2, #21
 800225a:	9100      	str	r1, [sp, #0]
 800225c:	f006 f9ef 	bl	800863e <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002260:	b003      	add	sp, #12
 8002262:	f85d fb04 	ldr.w	pc, [sp], #4
 8002266:	bf00      	nop
 8002268:	24000830 	.word	0x24000830
 800226c:	240006c0 	.word	0x240006c0

08002270 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002270:	4b06      	ldr	r3, [pc, #24]	@ (800228c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002272:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002274:	9301      	str	r3, [sp, #4]
 8002276:	232a      	movs	r3, #42	@ 0x2a
 8002278:	2239      	movs	r2, #57	@ 0x39
 800227a:	2100      	movs	r1, #0
 800227c:	9300      	str	r3, [sp, #0]
 800227e:	2304      	movs	r3, #4
 8002280:	4803      	ldr	r0, [pc, #12]	@ (8002290 <LCD_SetUpdateRegionLeft+0x20>)
 8002282:	f006 f9ed 	bl	8008660 <HAL_DSI_LongWrite>
    }
 8002286:	b003      	add	sp, #12
 8002288:	f85d fb04 	ldr.w	pc, [sp], #4
 800228c:	24000008 	.word	0x24000008
 8002290:	240006c0 	.word	0x240006c0

08002294 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002294:	4b06      	ldr	r3, [pc, #24]	@ (80022b0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002296:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002298:	9301      	str	r3, [sp, #4]
 800229a:	232a      	movs	r3, #42	@ 0x2a
 800229c:	2239      	movs	r2, #57	@ 0x39
 800229e:	2100      	movs	r1, #0
 80022a0:	9300      	str	r3, [sp, #0]
 80022a2:	2304      	movs	r3, #4
 80022a4:	4803      	ldr	r0, [pc, #12]	@ (80022b4 <LCD_SetUpdateRegionRight+0x20>)
 80022a6:	f006 f9db 	bl	8008660 <HAL_DSI_LongWrite>
    }
 80022aa:	b003      	add	sp, #12
 80022ac:	f85d fb04 	ldr.w	pc, [sp], #4
 80022b0:	24000004 	.word	0x24000004
 80022b4:	240006c0 	.word	0x240006c0

080022b8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80022b8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80022ba:	4d14      	ldr	r5, [pc, #80]	@ (800230c <HAL_DSI_TearingEffectCallback+0x54>)
 80022bc:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80022be:	2000      	movs	r0, #0
 80022c0:	f7ff fd46 	bl	8001d50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80022c4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80022c6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80022ca:	3301      	adds	r3, #1
 80022cc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80022d0:	f000 fdc0 	bl	8002e54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80022d4:	4b0e      	ldr	r3, [pc, #56]	@ (8002310 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80022d6:	682a      	ldr	r2, [r5, #0]
 80022d8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80022e0:	b173      	cbz	r3, 8002300 <HAL_DSI_TearingEffectCallback+0x48>
 80022e2:	4d0c      	ldr	r5, [pc, #48]	@ (8002314 <HAL_DSI_TearingEffectCallback+0x5c>)
 80022e4:	782b      	ldrb	r3, [r5, #0]
 80022e6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022ea:	b94b      	cbnz	r3, 8002300 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80022ec:	4b0a      	ldr	r3, [pc, #40]	@ (8002318 <HAL_DSI_TearingEffectCallback+0x60>)
 80022ee:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80022f0:	f7ff ffbe 	bl	8002270 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80022f4:	4620      	mov	r0, r4
 80022f6:	f006 f992 	bl	800861e <HAL_DSI_Refresh>
            displayRefreshing = true;
 80022fa:	2301      	movs	r3, #1
 80022fc:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80022fe:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002300:	2000      	movs	r0, #0
    }
 8002302:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 8002306:	f7ff bd53 	b.w	8001db0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800230a:	bf00      	nop
 800230c:	24025e20 	.word	0x24025e20
 8002310:	2400000c 	.word	0x2400000c
 8002314:	2400084c 	.word	0x2400084c
 8002318:	24000848 	.word	0x24000848

0800231c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 800231c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002320:	4e48      	ldr	r6, [pc, #288]	@ (8002444 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8002322:	b085      	sub	sp, #20
 8002324:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002326:	7833      	ldrb	r3, [r6, #0]
 8002328:	2b00      	cmp	r3, #0
 800232a:	f000 8088 	beq.w	800243e <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 800232e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002468 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002332:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800246c <HAL_DSI_EndOfRefreshCallback+0x150>
 8002336:	f8d9 5000 	ldr.w	r5, [r9]
 800233a:	4f43      	ldr	r7, [pc, #268]	@ (8002448 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 800233c:	2d00      	cmp	r5, #0
 800233e:	d13e      	bne.n	80023be <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002340:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002342:	4e42      	ldr	r6, [pc, #264]	@ (800244c <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002344:	f005 f9cc 	bl	80076e0 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002348:	6823      	ldr	r3, [r4, #0]
 800234a:	9500      	str	r5, [sp, #0]
 800234c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002350:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002352:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002356:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800235a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800235e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002362:	f002 0208 	and.w	r2, r2, #8
 8002366:	9200      	str	r2, [sp, #0]
 8002368:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800236a:	f8d8 2000 	ldr.w	r2, [r8]
 800236e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002372:	4837      	ldr	r0, [pc, #220]	@ (8002450 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002374:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002376:	4e37      	ldr	r6, [pc, #220]	@ (8002454 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002378:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800237a:	4837      	ldr	r0, [pc, #220]	@ (8002458 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 800237c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002380:	4836      	ldr	r0, [pc, #216]	@ (800245c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002382:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002386:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002388:	f041 0101 	orr.w	r1, r1, #1
 800238c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800238e:	9501      	str	r5, [sp, #4]
 8002390:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002394:	f042 0208 	orr.w	r2, r2, #8
 8002398:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800239c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80023a0:	f003 0308 	and.w	r3, r3, #8
 80023a4:	9301      	str	r3, [sp, #4]
 80023a6:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 80023a8:	f7ff ff74 	bl	8002294 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 80023ac:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 80023ae:	4620      	mov	r0, r4
                updateRegion = 1;
 80023b0:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80023b4:	b005      	add	sp, #20
 80023b6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80023ba:	f006 b930 	b.w	800861e <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023be:	6803      	ldr	r3, [r0, #0]
 80023c0:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023c2:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023c4:	9502      	str	r5, [sp, #8]
 80023c6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023ca:	4c25      	ldr	r4, [pc, #148]	@ (8002460 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023cc:	f022 0208 	bic.w	r2, r2, #8
 80023d0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80023d4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023d8:	f002 0208 	and.w	r2, r2, #8
 80023dc:	9202      	str	r2, [sp, #8]
 80023de:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023e0:	f8d8 2000 	ldr.w	r2, [r8]
 80023e4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023e8:	4819      	ldr	r0, [pc, #100]	@ (8002450 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80023ea:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80023ec:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80023f0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80023f2:	4819      	ldr	r0, [pc, #100]	@ (8002458 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80023f4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80023f8:	4818      	ldr	r0, [pc, #96]	@ (800245c <HAL_DSI_EndOfRefreshCallback+0x140>)
 80023fa:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80023fe:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002400:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002402:	f041 0101 	orr.w	r1, r1, #1
 8002406:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 8002408:	9503      	str	r5, [sp, #12]
 800240a:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800240e:	f042 0208 	orr.w	r2, r2, #8
 8002412:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002416:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800241a:	f003 0308 	and.w	r3, r3, #8
 800241e:	9303      	str	r3, [sp, #12]
 8002420:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002422:	f7ff fcc5 	bl	8001db0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002426:	f7ff ff0f 	bl	8002248 <LCD_ReqEnable>
        return instance;
 800242a:	4b0e      	ldr	r3, [pc, #56]	@ (8002464 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 800242c:	7035      	strb	r5, [r6, #0]
 800242e:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002430:	b128      	cbz	r0, 800243e <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002432:	6803      	ldr	r3, [r0, #0]
 8002434:	6a1b      	ldr	r3, [r3, #32]
    }
 8002436:	b005      	add	sp, #20
 8002438:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800243c:	4718      	bx	r3
 800243e:	b005      	add	sp, #20
 8002440:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002444:	2400084c 	.word	0x2400084c
 8002448:	24000844 	.word	0x24000844
 800244c:	01b201e2 	.word	0x01b201e2
 8002450:	50001000 	.word	0x50001000
 8002454:	019201e3 	.word	0x019201e3
 8002458:	01920003 	.word	0x01920003
 800245c:	09c004b3 	.word	0x09c004b3
 8002460:	019201e2 	.word	0x019201e2
 8002464:	24025e20 	.word	0x24025e20
 8002468:	24000848 	.word	0x24000848
 800246c:	240004e8 	.word	0x240004e8

08002470 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002470:	4601      	mov	r1, r0
 8002472:	b508      	push	{r3, lr}
        return instance;
 8002474:	4b03      	ldr	r3, [pc, #12]	@ (8002484 <IdleTaskHook+0x14>)
 8002476:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002478:	b101      	cbz	r1, 800247c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800247a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800247c:	f00e fc08 	bl	8010c90 <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002480:	2001      	movs	r0, #1
 8002482:	bd08      	pop	{r3, pc}
 8002484:	24025e20 	.word	0x24025e20

08002488 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800248a:	2200      	movs	r2, #0
 800248c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	4a02      	ldr	r2, [pc, #8]	@ (800249c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002492:	601a      	str	r2, [r3, #0]

}
 8002494:	4770      	bx	lr
 8002496:	bf00      	nop
 8002498:	24000834 	.word	0x24000834
 800249c:	08027c84 	.word	0x08027c84

080024a0 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 80024a0:	6940      	ldr	r0, [r0, #20]
 80024a2:	4770      	bx	lr

080024a4 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 80024a4:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 80024a8:	4770      	bx	lr

080024aa <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 80024aa:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80024ac:	b923      	cbnz	r3, 80024b8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 80024ae:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80024b0:	3800      	subs	r0, #0
 80024b2:	bf18      	it	ne
 80024b4:	2001      	movne	r0, #1
 80024b6:	4770      	bx	lr
 80024b8:	2001      	movs	r0, #1
}
 80024ba:	4770      	bx	lr

080024bc <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80024bc:	6880      	ldr	r0, [r0, #8]
 80024be:	4770      	bx	lr

080024c0 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80024c0:	4770      	bx	lr

080024c2 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80024c2:	3004      	adds	r0, #4
{
 80024c4:	b510      	push	{r4, lr}
 80024c6:	460c      	mov	r4, r1
    *data = videoInfo;
 80024c8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80024ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80024ce:	bd10      	pop	{r4, pc}

080024d0 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80024d0:	4770      	bx	lr
	...

080024d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80024d4:	b508      	push	{r3, lr}
    assert(0);
 80024d6:	4a03      	ldr	r2, [pc, #12]	@ (80024e4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80024d8:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80024dc:	4b02      	ldr	r3, [pc, #8]	@ (80024e8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80024de:	4803      	ldr	r0, [pc, #12]	@ (80024ec <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80024e0:	f024 f90e 	bl	8026700 <__assert_func>
 80024e4:	08027fcc 	.word	0x08027fcc
 80024e8:	08029dcf 	.word	0x08029dcf
 80024ec:	08028027 	.word	0x08028027

080024f0 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80024f0:	b510      	push	{r4, lr}
 80024f2:	4604      	mov	r4, r0
 80024f4:	2148      	movs	r1, #72	@ 0x48
 80024f6:	f023 fd8d 	bl	8026014 <_ZdlPvj>
 80024fa:	4620      	mov	r0, r4
 80024fc:	bd10      	pop	{r4, pc}
	...

08002500 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002500:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 8002502:	4b0e      	ldr	r3, [pc, #56]	@ (800253c <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002504:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 8002506:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 8002508:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800250a:	6003      	str	r3, [r0, #0]
 800250c:	63c2      	str	r2, [r0, #60]	@ 0x3c
 800250e:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002512:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002516:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800251a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800251e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002522:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002526:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800252a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800252e:	2001      	movs	r0, #1
 8002530:	f00b fa5e 	bl	800d9f0 <osSemaphoreNew>
 8002534:	4b02      	ldr	r3, [pc, #8]	@ (8002540 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002536:	6018      	str	r0, [r3, #0]
}
 8002538:	4620      	mov	r0, r4
 800253a:	bd10      	pop	{r4, pc}
 800253c:	08028284 	.word	0x08028284
 8002540:	2400086c 	.word	0x2400086c

08002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002544:	b410      	push	{r4}
 8002546:	460c      	mov	r4, r1
 8002548:	4611      	mov	r1, r2
 800254a:	461a      	mov	r2, r3
    if (reader != 0)
 800254c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800254e:	b13b      	cbz	r3, 8002560 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002550:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002552:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002554:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002556:	4420      	add	r0, r4
}
 8002558:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800255c:	f024 bbbb 	b.w	8026cd6 <strncmp>
        src = (const char*)movieData + offset;
 8002560:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002562:	e7f8      	b.n	8002556 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002564 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002564:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002566:	b510      	push	{r4, lr}
    if (reader != 0)
 8002568:	b173      	cbz	r3, 8002588 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800256a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800256c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800256e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002570:	1853      	adds	r3, r2, r1
 8002572:	5c52      	ldrb	r2, [r2, r1]
 8002574:	7898      	ldrb	r0, [r3, #2]
 8002576:	785c      	ldrb	r4, [r3, #1]
 8002578:	0400      	lsls	r0, r0, #16
 800257a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800257e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002580:	78db      	ldrb	r3, [r3, #3]
 8002582:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002586:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002588:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800258a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800258c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800258e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002590:	7898      	ldrb	r0, [r3, #2]
 8002592:	0400      	lsls	r0, r0, #16
 8002594:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002598:	e7f1      	b.n	800257e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800259a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800259a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800259c:	b143      	cbz	r3, 80025b0 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800259e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 80025a0:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 80025a2:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 80025a4:	185a      	adds	r2, r3, r1
 80025a6:	5c58      	ldrb	r0, [r3, r1]
 80025a8:	7852      	ldrb	r2, [r2, #1]
 80025aa:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 80025ae:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80025b0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80025b2:	185a      	adds	r2, r3, r1
        val |= d[0];
 80025b4:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80025b6:	7853      	ldrb	r3, [r2, #1]
 80025b8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80025bc:	4770      	bx	lr
	...

080025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80025c0:	b570      	push	{r4, r5, r6, lr}
 80025c2:	4604      	mov	r4, r0
    if (reader != 0)
 80025c4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80025c6:	460d      	mov	r5, r1
 80025c8:	4616      	mov	r6, r2
    if (reader != 0)
 80025ca:	b1d8      	cbz	r0, 8002604 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80025cc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d208      	bcs.n	80025e4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025d2:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80025d4:	4a0d      	ldr	r2, [pc, #52]	@ (800260c <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80025d6:	219e      	movs	r1, #158	@ 0x9e
 80025d8:	480d      	ldr	r0, [pc, #52]	@ (8002610 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025da:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80025de:	4b0d      	ldr	r3, [pc, #52]	@ (8002614 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80025e0:	f024 f88e 	bl	8026700 <__assert_func>
        reader->seek(offset);
 80025e4:	6803      	ldr	r3, [r0, #0]
 80025e6:	68db      	ldr	r3, [r3, #12]
 80025e8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80025ea:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025ec:	4632      	mov	r2, r6
 80025ee:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025f0:	6803      	ldr	r3, [r0, #0]
 80025f2:	691b      	ldr	r3, [r3, #16]
 80025f4:	4798      	blx	r3
 80025f6:	b910      	cbnz	r0, 80025fe <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80025f8:	230d      	movs	r3, #13
 80025fa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80025fe:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 8002600:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 8002602:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 8002604:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 8002606:	4408      	add	r0, r1
 8002608:	e7fb      	b.n	8002602 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 800260a:	bf00      	nop
 800260c:	080280bf 	.word	0x080280bf
 8002610:	08028027 	.word	0x08028027
 8002614:	080280ac 	.word	0x080280ac

08002618 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002618:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800261c:	6943      	ldr	r3, [r0, #20]
{
 800261e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002620:	b92b      	cbnz	r3, 800262e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002622:	4b22      	ldr	r3, [pc, #136]	@ (80026ac <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002624:	21e4      	movs	r1, #228	@ 0xe4
 8002626:	4a22      	ldr	r2, [pc, #136]	@ (80026b0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002628:	4822      	ldr	r0, [pc, #136]	@ (80026b4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800262a:	f024 f869 	bl	8026700 <__assert_func>
    readData(currentMovieOffset, 8);
 800262e:	2208      	movs	r2, #8
 8002630:	6981      	ldr	r1, [r0, #24]
 8002632:	f7ff ffc5 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002636:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002638:	f243 0630 	movw	r6, #12336	@ 0x3030
 800263c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002640:	3104      	adds	r1, #4
 8002642:	4620      	mov	r0, r4
 8002644:	f7ff ff8e 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002648:	69a3      	ldr	r3, [r4, #24]
 800264a:	4418      	add	r0, r3
 800264c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800264e:	f100 0208 	add.w	r2, r0, #8
 8002652:	429a      	cmp	r2, r3
 8002654:	d306      	bcc.n	8002664 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002656:	2301      	movs	r3, #1
    return false;
 8002658:	2000      	movs	r0, #0
    frameNumber = 1;
 800265a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 800265c:	6a23      	ldr	r3, [r4, #32]
 800265e:	61a3      	str	r3, [r4, #24]
}
 8002660:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002664:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002666:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800266a:	2208      	movs	r2, #8
 800266c:	4620      	mov	r0, r4
        frameNumber++;
 800266e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002670:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002674:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002676:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002678:	f7ff ffa2 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800267c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002680:	4620      	mov	r0, r4
 8002682:	4649      	mov	r1, r9
 8002684:	f7ff ff89 	bl	800259a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002688:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800268c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800268e:	4620      	mov	r0, r4
 8002690:	f7ff ff83 	bl	800259a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002694:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002698:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800269a:	4620      	mov	r0, r4
 800269c:	f7ff ff62 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 80026a0:	45b0      	cmp	r8, r6
 80026a2:	d1d1      	bne.n	8002648 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 80026a4:	42bd      	cmp	r5, r7
 80026a6:	d1cf      	bne.n	8002648 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 80026a8:	2001      	movs	r0, #1
 80026aa:	e7d9      	b.n	8002660 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 80026ac:	08028101 	.word	0x08028101
 80026b0:	0802814a 	.word	0x0802814a
 80026b4:	08028027 	.word	0x08028027

080026b8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80026b8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80026ba:	6803      	ldr	r3, [r0, #0]
 80026bc:	bf38      	it	cc
 80026be:	2101      	movcc	r1, #1
 80026c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80026c2:	b570      	push	{r4, r5, r6, lr}
 80026c4:	460d      	mov	r5, r1
 80026c6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80026c8:	4798      	blx	r3
 80026ca:	42a8      	cmp	r0, r5
 80026cc:	d204      	bcs.n	80026d8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80026ce:	6823      	ldr	r3, [r4, #0]
 80026d0:	4620      	mov	r0, r4
 80026d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d4:	4798      	blx	r3
 80026d6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026d8:	1e6b      	subs	r3, r5, #1
 80026da:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026dc:	2210      	movs	r2, #16
 80026de:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026e0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026e4:	f106 0108 	add.w	r1, r6, #8
 80026e8:	f7ff ff6a 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026ec:	f106 0110 	add.w	r1, r6, #16
 80026f0:	4620      	mov	r0, r4
 80026f2:	f7ff ff37 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026f6:	6a23      	ldr	r3, [r4, #32]
 80026f8:	3b04      	subs	r3, #4
 80026fa:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80026fc:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 8002700:	bd70      	pop	{r4, r5, r6, pc}
	...

08002704 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 8002704:	2100      	movs	r1, #0
    readData(0, 72);
 8002706:	2248      	movs	r2, #72	@ 0x48
{
 8002708:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800270c:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 800270e:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002710:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002714:	f7ff ff54 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002718:	69a6      	ldr	r6, [r4, #24]
 800271a:	2304      	movs	r3, #4
 800271c:	4a63      	ldr	r2, [pc, #396]	@ (80028ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800271e:	4631      	mov	r1, r6
 8002720:	4620      	mov	r0, r4
 8002722:	f7ff ff0f 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002726:	b148      	cbz	r0, 800273c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002728:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800272a:	4a61      	ldr	r2, [pc, #388]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800272c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 8002730:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002734:	4b5f      	ldr	r3, [pc, #380]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002736:	4860      	ldr	r0, [pc, #384]	@ (80028b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002738:	f023 ffe2 	bl	8026700 <__assert_func>
    currentMovieOffset += 8;
 800273c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002740:	2304      	movs	r3, #4
 8002742:	4a5e      	ldr	r2, [pc, #376]	@ (80028bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002744:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002746:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002748:	f7ff fefc 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800274c:	b138      	cbz	r0, 800275e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800274e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002750:	4a57      	ldr	r2, [pc, #348]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002752:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002756:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800275a:	4b59      	ldr	r3, [pc, #356]	@ (80028c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800275c:	e7eb      	b.n	8002736 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800275e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002762:	2304      	movs	r3, #4
 8002764:	4a57      	ldr	r2, [pc, #348]	@ (80028c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002766:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002768:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800276a:	f7ff feeb 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800276e:	4607      	mov	r7, r0
 8002770:	b138      	cbz	r0, 8002782 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002772:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002774:	4a4e      	ldr	r2, [pc, #312]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002776:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800277a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800277e:	4b52      	ldr	r3, [pc, #328]	@ (80028c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002780:	e7d9      	b.n	8002736 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002782:	f106 0110 	add.w	r1, r6, #16
 8002786:	4620      	mov	r0, r4
 8002788:	f7ff feec 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800278c:	4605      	mov	r5, r0
 800278e:	b920      	cbnz	r0, 800279a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002790:	4b4e      	ldr	r3, [pc, #312]	@ (80028cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002792:	f240 1141 	movw	r1, #321	@ 0x141
 8002796:	4a46      	ldr	r2, [pc, #280]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002798:	e7cd      	b.n	8002736 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800279a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800279e:	2304      	movs	r3, #4
 80027a0:	4a4b      	ldr	r2, [pc, #300]	@ (80028d0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 80027a2:	4620      	mov	r0, r4
 80027a4:	4641      	mov	r1, r8
 80027a6:	f7ff fecd 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027aa:	2800      	cmp	r0, #0
 80027ac:	d049      	beq.n	8002842 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 80027ae:	2306      	movs	r3, #6
 80027b0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80027b4:	2304      	movs	r3, #4
 80027b6:	4a47      	ldr	r2, [pc, #284]	@ (80028d4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80027b8:	f106 0118 	add.w	r1, r6, #24
 80027bc:	4620      	mov	r0, r4
 80027be:	f7ff fec1 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027c2:	2800      	cmp	r0, #0
 80027c4:	d03f      	beq.n	8002846 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80027c6:	2307      	movs	r3, #7
 80027c8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80027cc:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027ce:	4f42      	ldr	r7, [pc, #264]	@ (80028d8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80027d0:	220c      	movs	r2, #12
 80027d2:	4620      	mov	r0, r4
 80027d4:	4629      	mov	r1, r5
 80027d6:	f7ff fef3 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027da:	f105 0608 	add.w	r6, r5, #8
 80027de:	2304      	movs	r3, #4
 80027e0:	463a      	mov	r2, r7
 80027e2:	4620      	mov	r0, r4
 80027e4:	4631      	mov	r1, r6
 80027e6:	f7ff fead 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027ea:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80027ee:	2800      	cmp	r0, #0
 80027f0:	d048      	beq.n	8002884 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d148      	bne.n	8002888 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027f6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027f8:	42ab      	cmp	r3, r5
 80027fa:	d849      	bhi.n	8002890 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80027fc:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002800:	3504      	adds	r5, #4
 8002802:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 8002804:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002806:	4629      	mov	r1, r5
 8002808:	f7ff feac 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
 800280c:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 800280e:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002810:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002812:	4620      	mov	r0, r4
 8002814:	f7ff fea6 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002818:	4406      	add	r6, r0
    readData(listOffset, 4);
 800281a:	2204      	movs	r2, #4
 800281c:	4620      	mov	r0, r4
 800281e:	4631      	mov	r1, r6
 8002820:	f7ff fece 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002824:	2304      	movs	r3, #4
 8002826:	4a2d      	ldr	r2, [pc, #180]	@ (80028dc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002828:	4631      	mov	r1, r6
 800282a:	4620      	mov	r0, r4
 800282c:	f7ff fe8a 	bl	8002544 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002830:	2800      	cmp	r0, #0
 8002832:	d138      	bne.n	80028a6 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002834:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002836:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002838:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800283a:	69a3      	ldr	r3, [r4, #24]
 800283c:	6223      	str	r3, [r4, #32]
}
 800283e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002842:	2701      	movs	r7, #1
 8002844:	e7b6      	b.n	80027b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002846:	2f00      	cmp	r7, #0
 8002848:	d0c0      	beq.n	80027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800284a:	f106 0120 	add.w	r1, r6, #32
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff fe88 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002854:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002858:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800285c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002860:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002862:	4620      	mov	r0, r4
 8002864:	f7ff fe7e 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002868:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800286c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800286e:	4620      	mov	r0, r4
 8002870:	f7ff fe78 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002874:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002878:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800287a:	4620      	mov	r0, r4
 800287c:	f7ff fe72 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002880:	6120      	str	r0, [r4, #16]
 8002882:	e7a3      	b.n	80027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002884:	2b00      	cmp	r3, #0
 8002886:	d0b9      	beq.n	80027fc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002888:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800288a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800288e:	e7d6      	b.n	800283e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002890:	1d29      	adds	r1, r5, #4
 8002892:	4620      	mov	r0, r4
 8002894:	f7ff fe66 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002898:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800289a:	220c      	movs	r2, #12
 800289c:	4620      	mov	r0, r4
 800289e:	4629      	mov	r1, r5
 80028a0:	f7ff fe8e 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 80028a4:	e799      	b.n	80027da <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 80028a6:	230b      	movs	r3, #11
 80028a8:	e7ef      	b.n	800288a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 80028aa:	bf00      	nop
 80028ac:	0802817d 	.word	0x0802817d
 80028b0:	0802819b 	.word	0x0802819b
 80028b4:	08028182 	.word	0x08028182
 80028b8:	08028027 	.word	0x08028027
 80028bc:	080281c8 	.word	0x080281c8
 80028c0:	080281cd 	.word	0x080281cd
 80028c4:	080281e5 	.word	0x080281e5
 80028c8:	080281ea 	.word	0x080281ea
 80028cc:	08028200 	.word	0x08028200
 80028d0:	0802820c 	.word	0x0802820c
 80028d4:	08028211 	.word	0x08028211
 80028d8:	08028216 	.word	0x08028216
 80028dc:	0802821b 	.word	0x0802821b

080028e0 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028e0:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80028e4:	2200      	movs	r2, #0
 80028e6:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80028e8:	f7ff bf0c 	b.w	8002704 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080028ec <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028ec:	b510      	push	{r4, lr}
    movieData = 0;
 80028ee:	2300      	movs	r3, #0
{
 80028f0:	4604      	mov	r4, r0
 80028f2:	4608      	mov	r0, r1
    movieData = 0;
 80028f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80028f6:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028f8:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80028fa:	689b      	ldr	r3, [r3, #8]
 80028fc:	4798      	blx	r3
 80028fe:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 8002900:	4620      	mov	r0, r4
}
 8002902:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 8002906:	f7ff befd 	b.w	8002704 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

0800290c <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 800290c:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 800290e:	4c14      	ldr	r4, [pc, #80]	@ (8002960 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002910:	4d14      	ldr	r5, [pc, #80]	@ (8002964 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8002912:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002914:	2400      	movs	r4, #0
 8002916:	4b14      	ldr	r3, [pc, #80]	@ (8002968 <JPEG_Decode_DMA+0x5c>)
 8002918:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800291a:	4b14      	ldr	r3, [pc, #80]	@ (800296c <JPEG_Decode_DMA+0x60>)
 800291c:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800291e:	4b14      	ldr	r3, [pc, #80]	@ (8002970 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002920:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002922:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002924:	4b13      	ldr	r3, [pc, #76]	@ (8002974 <JPEG_Decode_DMA+0x68>)
 8002926:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002928:	4b13      	ldr	r3, [pc, #76]	@ (8002978 <JPEG_Decode_DMA+0x6c>)
 800292a:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 800292c:	4b13      	ldr	r3, [pc, #76]	@ (800297c <JPEG_Decode_DMA+0x70>)
 800292e:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002930:	4b13      	ldr	r3, [pc, #76]	@ (8002980 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002932:	682a      	ldr	r2, [r5, #0]
 8002934:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002938:	701c      	strb	r4, [r3, #0]
 800293a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800293c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002940:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002944:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002948:	4a0e      	ldr	r2, [pc, #56]	@ (8002984 <JPEG_Decode_DMA+0x78>)
 800294a:	68d2      	ldr	r2, [r2, #12]
 800294c:	436a      	muls	r2, r5
 800294e:	9200      	str	r2, [sp, #0]
 8002950:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002954:	685b      	ldr	r3, [r3, #4]
 8002956:	f007 f80b 	bl	8009970 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800295a:	4620      	mov	r0, r4
 800295c:	b003      	add	sp, #12
 800295e:	bd30      	pop	{r4, r5, pc}
 8002960:	24009e98 	.word	0x24009e98
 8002964:	24009e74 	.word	0x24009e74
 8002968:	24009e84 	.word	0x24009e84
 800296c:	24000868 	.word	0x24000868
 8002970:	24009e94 	.word	0x24009e94
 8002974:	24009e8c 	.word	0x24009e8c
 8002978:	24009e90 	.word	0x24009e90
 800297c:	24000870 	.word	0x24000870
 8002980:	24000010 	.word	0x24000010
 8002984:	24000850 	.word	0x24000850

08002988 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002988:	684b      	ldr	r3, [r1, #4]
 800298a:	2b01      	cmp	r3, #1
 800298c:	d115      	bne.n	80029ba <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800298e:	68cb      	ldr	r3, [r1, #12]
 8002990:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002992:	bf1e      	ittt	ne
 8002994:	f023 030f 	bicne.w	r3, r3, #15
 8002998:	3310      	addne	r3, #16
 800299a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800299c:	688b      	ldr	r3, [r1, #8]
 800299e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 80029a0:	bf1e      	ittt	ne
 80029a2:	f023 030f 	bicne.w	r3, r3, #15
 80029a6:	3310      	addne	r3, #16
 80029a8:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80029aa:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80029ac:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 80029ae:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80029b0:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80029b2:	4353      	muls	r3, r2
 80029b4:	4a0e      	ldr	r2, [pc, #56]	@ (80029f0 <HAL_JPEG_InfoReadyCallback+0x68>)
 80029b6:	6013      	str	r3, [r2, #0]
 80029b8:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80029ba:	2b02      	cmp	r3, #2
 80029bc:	d10e      	bne.n	80029dc <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80029be:	68cb      	ldr	r3, [r1, #12]
 80029c0:	071a      	lsls	r2, r3, #28
 80029c2:	d003      	beq.n	80029cc <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80029c4:	f023 030f 	bic.w	r3, r3, #15
 80029c8:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029ca:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80029cc:	688b      	ldr	r3, [r1, #8]
 80029ce:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80029d0:	bf1e      	ittt	ne
 80029d2:	f023 0307 	bicne.w	r3, r3, #7
 80029d6:	3308      	addne	r3, #8
 80029d8:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80029da:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d1fc      	bne.n	80029da <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80029e0:	68cb      	ldr	r3, [r1, #12]
 80029e2:	0758      	lsls	r0, r3, #29
 80029e4:	d0f2      	beq.n	80029cc <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029e6:	f023 0307 	bic.w	r3, r3, #7
 80029ea:	3308      	adds	r3, #8
 80029ec:	e7ed      	b.n	80029ca <HAL_JPEG_InfoReadyCallback+0x42>
 80029ee:	bf00      	nop
 80029f0:	24009e7c 	.word	0x24009e7c

080029f4 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80029f4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a24 <HAL_JPEG_GetDataCallback+0x30>)
 80029f6:	6813      	ldr	r3, [r2, #0]
 80029f8:	440b      	add	r3, r1
    {
 80029fa:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80029fc:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80029fe:	4a0a      	ldr	r2, [pc, #40]	@ (8002a28 <HAL_JPEG_GetDataCallback+0x34>)
 8002a00:	6812      	ldr	r2, [r2, #0]
 8002a02:	4293      	cmp	r3, r2
 8002a04:	d20c      	bcs.n	8002a20 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a06:	4c09      	ldr	r4, [pc, #36]	@ (8002a2c <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002a08:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a0a:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a0c:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a10:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a12:	bf28      	it	cs
 8002a14:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a18:	6021      	str	r1, [r4, #0]
        }
    }
 8002a1a:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a1c:	f007 b80a 	b.w	8009a34 <HAL_JPEG_ConfigInputBuffer>
    }
 8002a20:	bc30      	pop	{r4, r5}
 8002a22:	4770      	bx	lr
 8002a24:	24009e94 	.word	0x24009e94
 8002a28:	24009e90 	.word	0x24009e90
 8002a2c:	24009e8c 	.word	0x24009e8c

08002a30 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002a30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a32:	4c20      	ldr	r4, [pc, #128]	@ (8002ab4 <HAL_JPEG_DataReadyCallback+0x84>)
 8002a34:	2101      	movs	r1, #1
 8002a36:	4d20      	ldr	r5, [pc, #128]	@ (8002ab8 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002a38:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a3a:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a3c:	4f1f      	ldr	r7, [pc, #124]	@ (8002abc <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a3e:	011b      	lsls	r3, r3, #4
 8002a40:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002a42:	6823      	ldr	r3, [r4, #0]
 8002a44:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002a48:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002a4a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ac0 <HAL_JPEG_DataReadyCallback+0x90>)
 8002a4c:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002a4e:	6822      	ldr	r2, [r4, #0]
 8002a50:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002a54:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a56:	681a      	ldr	r2, [r3, #0]
 8002a58:	68f9      	ldr	r1, [r7, #12]
 8002a5a:	440a      	add	r2, r1
 8002a5c:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	3301      	adds	r3, #1
 8002a62:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002a64:	6823      	ldr	r3, [r4, #0]
 8002a66:	2b01      	cmp	r3, #1
 8002a68:	d901      	bls.n	8002a6e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002a6e:	6823      	ldr	r3, [r4, #0]
 8002a70:	011b      	lsls	r3, r3, #4
 8002a72:	5ceb      	ldrb	r3, [r5, r3]
 8002a74:	b133      	cbz	r3, 8002a84 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a76:	2102      	movs	r1, #2
 8002a78:	4630      	mov	r0, r6
 8002a7a:	f006 ffad 	bl	80099d8 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002a7e:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_JPEG_DataReadyCallback+0x94>)
 8002a80:	2201      	movs	r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a84:	6822      	ldr	r2, [r4, #0]
 8002a86:	4630      	mov	r0, r6
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002a8e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a92:	6869      	ldr	r1, [r5, #4]
 8002a94:	435a      	muls	r2, r3
 8002a96:	f006 ffd0 	bl	8009a3a <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002a9a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac8 <HAL_JPEG_DataReadyCallback+0x98>)
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	7a1a      	ldrb	r2, [r3, #8]
 8002aa0:	b93a      	cbnz	r2, 8002ab2 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002aa2:	7a9b      	ldrb	r3, [r3, #10]
 8002aa4:	b92b      	cbnz	r3, 8002ab2 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002aa6:	4b09      	ldr	r3, [pc, #36]	@ (8002acc <HAL_JPEG_DataReadyCallback+0x9c>)
 8002aa8:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002aaa:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002aae:	f00b b815 	b.w	800dadc <osSemaphoreRelease>
    }
 8002ab2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002ab4:	24009e74 	.word	0x24009e74
 8002ab8:	24000010 	.word	0x24000010
 8002abc:	24000850 	.word	0x24000850
 8002ac0:	24000870 	.word	0x24000870
 8002ac4:	24009e84 	.word	0x24009e84
 8002ac8:	24009e78 	.word	0x24009e78
 8002acc:	2400086c 	.word	0x2400086c

08002ad0 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002ad0:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002ad2:	e7fe      	b.n	8002ad2 <HAL_JPEG_ErrorCallback+0x2>

08002ad4 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002ad4:	4b01      	ldr	r3, [pc, #4]	@ (8002adc <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002ad6:	2201      	movs	r2, #1
 8002ad8:	601a      	str	r2, [r3, #0]
    }
 8002ada:	4770      	bx	lr
 8002adc:	24009e88 	.word	0x24009e88

08002ae0 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002ae0:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ae2:	4d16      	ldr	r5, [pc, #88]	@ (8002b3c <JPEG_OutputHandler+0x5c>)
{
 8002ae4:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ae6:	682b      	ldr	r3, [r5, #0]
 8002ae8:	b113      	cbz	r3, 8002af0 <JPEG_OutputHandler+0x10>
 8002aea:	4b15      	ldr	r3, [pc, #84]	@ (8002b40 <JPEG_OutputHandler+0x60>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	bb1b      	cbnz	r3, 8002b38 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002af0:	4b14      	ldr	r3, [pc, #80]	@ (8002b44 <JPEG_OutputHandler+0x64>)
 8002af2:	6818      	ldr	r0, [r3, #0]
 8002af4:	7a03      	ldrb	r3, [r0, #8]
 8002af6:	b963      	cbnz	r3, 8002b12 <JPEG_OutputHandler+0x32>
 8002af8:	4b13      	ldr	r3, [pc, #76]	@ (8002b48 <JPEG_OutputHandler+0x68>)
 8002afa:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <JPEG_OutputHandler+0x6c>)
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	011b      	lsls	r3, r3, #4
 8002b00:	5cd3      	ldrb	r3, [r2, r3]
 8002b02:	2b01      	cmp	r3, #1
 8002b04:	d105      	bne.n	8002b12 <JPEG_OutputHandler+0x32>
 8002b06:	4b0e      	ldr	r3, [pc, #56]	@ (8002b40 <JPEG_OutputHandler+0x60>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	b913      	cbnz	r3, 8002b12 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002b0c:	6803      	ldr	r3, [r0, #0]
 8002b0e:	691b      	ldr	r3, [r3, #16]
 8002b10:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002b12:	4a0f      	ldr	r2, [pc, #60]	@ (8002b50 <JPEG_OutputHandler+0x70>)
 8002b14:	6813      	ldr	r3, [r2, #0]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d10c      	bne.n	8002b34 <JPEG_OutputHandler+0x54>
 8002b1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b54 <JPEG_OutputHandler+0x74>)
 8002b1c:	490b      	ldr	r1, [pc, #44]	@ (8002b4c <JPEG_OutputHandler+0x6c>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	011b      	lsls	r3, r3, #4
 8002b22:	5ccb      	ldrb	r3, [r1, r3]
 8002b24:	b933      	cbnz	r3, 8002b34 <JPEG_OutputHandler+0x54>
 8002b26:	682b      	ldr	r3, [r5, #0]
 8002b28:	b923      	cbnz	r3, 8002b34 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b2a:	2102      	movs	r1, #2
 8002b2c:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002b2e:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b30:	f007 f9b1 	bl	8009e96 <HAL_JPEG_Resume>
        return 1;
 8002b34:	2002      	movs	r0, #2
    }

    return 2;
}
 8002b36:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002b38:	2001      	movs	r0, #1
 8002b3a:	e7fc      	b.n	8002b36 <JPEG_OutputHandler+0x56>
 8002b3c:	24009e88 	.word	0x24009e88
 8002b40:	24000864 	.word	0x24000864
 8002b44:	24009e78 	.word	0x24009e78
 8002b48:	24000868 	.word	0x24000868
 8002b4c:	24000010 	.word	0x24000010
 8002b50:	24009e84 	.word	0x24009e84
 8002b54:	24009e74 	.word	0x24009e74

08002b58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002b58:	b570      	push	{r4, r5, r6, lr}
 8002b5a:	4605      	mov	r5, r0
    if (length == 0)
 8002b5c:	2a00      	cmp	r2, #0
 8002b5e:	d035      	beq.n	8002bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d033      	beq.n	8002bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002b64:	481a      	ldr	r0, [pc, #104]	@ (8002bd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002b66:	2403      	movs	r4, #3
 8002b68:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b6a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002b6c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b6e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b72:	bf18      	it	ne
 8002b74:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b78:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b7a:	bf18      	it	ne
 8002b7c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b7e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002b80:	0924      	lsrs	r4, r4, #4
 8002b82:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002b84:	692c      	ldr	r4, [r5, #16]
 8002b86:	f014 040f 	ands.w	r4, r4, #15
 8002b8a:	bf18      	it	ne
 8002b8c:	f1c4 0410 	rsbne	r4, r4, #16
 8002b90:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002b92:	4810      	ldr	r0, [pc, #64]	@ (8002bd4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002b94:	f7ff feba 	bl	800290c <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b98:	4c0f      	ldr	r4, [pc, #60]	@ (8002bd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002b9a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002b9c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bdc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b9e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bd4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002ba0:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ba2:	4628      	mov	r0, r5
 8002ba4:	f7ff ff9c 	bl	8002ae0 <JPEG_OutputHandler>
 8002ba8:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002baa:	6823      	ldr	r3, [r4, #0]
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d105      	bne.n	8002bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002bb0:	4b0b      	ldr	r3, [pc, #44]	@ (8002be0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002bb2:	f04f 31ff 	mov.w	r1, #4294967295
 8002bb6:	6818      	ldr	r0, [r3, #0]
 8002bb8:	f00a ff64 	bl	800da84 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002bbc:	6823      	ldr	r3, [r4, #0]
 8002bbe:	2b01      	cmp	r3, #1
 8002bc0:	d1ef      	bne.n	8002ba2 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	4a07      	ldr	r2, [pc, #28]	@ (8002be4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002bc6:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002bc8:	4a07      	ldr	r2, [pc, #28]	@ (8002be8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002bca:	6013      	str	r3, [r2, #0]
}
 8002bcc:	bd70      	pop	{r4, r5, r6, pc}
 8002bce:	bf00      	nop
 8002bd0:	24000850 	.word	0x24000850
 8002bd4:	24000668 	.word	0x24000668
 8002bd8:	24009e80 	.word	0x24009e80
 8002bdc:	24009e78 	.word	0x24009e78
 8002be0:	2400086c 	.word	0x2400086c
 8002be4:	24009e88 	.word	0x24009e88
 8002be8:	24000864 	.word	0x24000864

08002bec <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002bec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002bf0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bf2:	6943      	ldr	r3, [r0, #20]
{
 8002bf4:	b085      	sub	sp, #20
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	460f      	mov	r7, r1
 8002bfa:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bfc:	b92b      	cbnz	r3, 8002c0a <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002bfe:	4b29      	ldr	r3, [pc, #164]	@ (8002ca4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002c00:	21b0      	movs	r1, #176	@ 0xb0
 8002c02:	4a29      	ldr	r2, [pc, #164]	@ (8002ca8 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002c04:	4829      	ldr	r0, [pc, #164]	@ (8002cac <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002c06:	f023 fd7b 	bl	8026700 <__assert_func>
    readData(currentMovieOffset, 8);
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	6981      	ldr	r1, [r0, #24]
 8002c0e:	f7ff fcd7 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c12:	69a6      	ldr	r6, [r4, #24]
 8002c14:	4620      	mov	r0, r4
 8002c16:	4631      	mov	r1, r6
 8002c18:	f7ff fcbf 	bl	800259a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c1c:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c1e:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c20:	4620      	mov	r0, r4
 8002c22:	f7ff fcba 	bl	800259a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c26:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c28:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c2a:	4620      	mov	r0, r4
 8002c2c:	f7ff fc9a 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002c30:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c34:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c36:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c38:	1842      	adds	r2, r0, r1
 8002c3a:	429a      	cmp	r2, r3
 8002c3c:	d226      	bcs.n	8002c8c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002c3e:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002c42:	459b      	cmp	fp, r3
 8002c44:	d117      	bne.n	8002c76 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c46:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002c4a:	459a      	cmp	sl, r3
 8002c4c:	d113      	bne.n	8002c76 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c4e:	b190      	cbz	r0, 8002c76 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c50:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002c52:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c54:	4620      	mov	r0, r4
 8002c56:	f7ff fcb3 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c5a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c5c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c5e:	462a      	mov	r2, r5
 8002c60:	4620      	mov	r0, r4
 8002c62:	f8cd 8000 	str.w	r8, [sp]
 8002c66:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002c6a:	463b      	mov	r3, r7
 8002c6c:	f7ff ff74 	bl	8002b58 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002c70:	6963      	ldr	r3, [r4, #20]
 8002c72:	3301      	adds	r3, #1
 8002c74:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002c76:	69a3      	ldr	r3, [r4, #24]
 8002c78:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002c7a:	b905      	cbnz	r5, 8002c7e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002c7c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c7e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c80:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c82:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c86:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c88:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c8a:	d109      	bne.n	8002ca0 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002c8c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002c8e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002c90:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002c92:	6a23      	ldr	r3, [r4, #32]
 8002c94:	61a3      	str	r3, [r4, #24]
}
 8002c96:	f080 0001 	eor.w	r0, r0, #1
 8002c9a:	b005      	add	sp, #20
 8002c9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002ca0:	2000      	movs	r0, #0
 8002ca2:	e7f8      	b.n	8002c96 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002ca4:	08028101 	.word	0x08028101
 8002ca8:	08028220 	.word	0x08028220
 8002cac:	08028027 	.word	0x08028027

08002cb0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002cb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002cb2:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002cb4:	6981      	ldr	r1, [r0, #24]
{
 8002cb6:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002cb8:	2208      	movs	r2, #8
 8002cba:	f7ff fc81 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cbe:	69a7      	ldr	r7, [r4, #24]
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	1d39      	adds	r1, r7, #4
 8002cc4:	f7ff fc4e 	bl	8002564 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002cc8:	f107 0108 	add.w	r1, r7, #8
 8002ccc:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cce:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002cd0:	4620      	mov	r0, r4
 8002cd2:	f7ff fc75 	bl	80025c0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002cd6:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002cd8:	b16e      	cbz	r6, 8002cf6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002cda:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cdc:	4c07      	ldr	r4, [pc, #28]	@ (8002cfc <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002cde:	4d08      	ldr	r5, [pc, #32]	@ (8002d00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002ce0:	4633      	mov	r3, r6
 8002ce2:	4807      	ldr	r0, [pc, #28]	@ (8002d00 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002ce4:	f7ff fe12 	bl	800290c <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ce8:	4628      	mov	r0, r5
 8002cea:	f7ff fef9 	bl	8002ae0 <JPEG_OutputHandler>
 8002cee:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002cf0:	6823      	ldr	r3, [r4, #0]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d0f8      	beq.n	8002ce8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002cf6:	2001      	movs	r0, #1
 8002cf8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cfa:	bf00      	nop
 8002cfc:	24009e80 	.word	0x24009e80
 8002d00:	24000668 	.word	0x24000668

08002d04 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d04:	4a1b      	ldr	r2, [pc, #108]	@ (8002d74 <DMA2D_CopyBuffer+0x70>)
 8002d06:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002d0a:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d0c:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002d10:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d12:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d14:	4e18      	ldr	r6, [pc, #96]	@ (8002d78 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d16:	4f19      	ldr	r7, [pc, #100]	@ (8002d7c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d18:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002d1c:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d20:	434d      	muls	r5, r1
 8002d22:	6911      	ldr	r1, [r2, #16]
 8002d24:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d28:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d2a:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d2c:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d2e:	683f      	ldr	r7, [r7, #0]
 8002d30:	68d3      	ldr	r3, [r2, #12]
 8002d32:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d34:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d36:	45bc      	cmp	ip, r7
 8002d38:	d317      	bcc.n	8002d6a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d3a:	6892      	ldr	r2, [r2, #8]
 8002d3c:	f1c2 0210 	rsb	r2, r2, #16
 8002d40:	430a      	orrs	r2, r1
 8002d42:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d44:	4a0e      	ldr	r2, [pc, #56]	@ (8002d80 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d46:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d4a:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d4c:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d78 <DMA2D_CopyBuffer+0x74>)
 8002d50:	4421      	add	r1, r4
 8002d52:	4429      	add	r1, r5
 8002d54:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d56:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002d58:	2300      	movs	r3, #0
 8002d5a:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002d5c:	4b09      	ldr	r3, [pc, #36]	@ (8002d84 <DMA2D_CopyBuffer+0x80>)
 8002d5e:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002d60:	6843      	ldr	r3, [r0, #4]
 8002d62:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d64:	4b08      	ldr	r3, [pc, #32]	@ (8002d88 <DMA2D_CopyBuffer+0x84>)
 8002d66:	6013      	str	r3, [r2, #0]
}
 8002d68:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d6a:	f041 0110 	orr.w	r1, r1, #16
 8002d6e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002d70:	e7e8      	b.n	8002d44 <DMA2D_CopyBuffer+0x40>
 8002d72:	bf00      	nop
 8002d74:	24000850 	.word	0x24000850
 8002d78:	52001000 	.word	0x52001000
 8002d7c:	24009e7c 	.word	0x24009e7c
 8002d80:	24009e98 	.word	0x24009e98
 8002d84:	ff09000b 	.word	0xff09000b
 8002d88:	00012301 	.word	0x00012301

08002d8c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002d8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dc0 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002d8e:	2200      	movs	r2, #0
 8002d90:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002d92:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002d94:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002d96:	3101      	adds	r1, #1
 8002d98:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002d9a:	6819      	ldr	r1, [r3, #0]
 8002d9c:	2901      	cmp	r1, #1
 8002d9e:	d900      	bls.n	8002da2 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002da0:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002da2:	4b08      	ldr	r3, [pc, #32]	@ (8002dc4 <DMA2D_ExternalJobCompleted+0x38>)
 8002da4:	4a08      	ldr	r2, [pc, #32]	@ (8002dc8 <DMA2D_ExternalJobCompleted+0x3c>)
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68d2      	ldr	r2, [r2, #12]
 8002daa:	1a9b      	subs	r3, r3, r2
 8002dac:	68c2      	ldr	r2, [r0, #12]
 8002dae:	429a      	cmp	r2, r3
 8002db0:	d302      	bcc.n	8002db8 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002db2:	4b06      	ldr	r3, [pc, #24]	@ (8002dcc <DMA2D_ExternalJobCompleted+0x40>)
 8002db4:	2201      	movs	r2, #1
 8002db6:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002db8:	4b05      	ldr	r3, [pc, #20]	@ (8002dd0 <DMA2D_ExternalJobCompleted+0x44>)
 8002dba:	6818      	ldr	r0, [r3, #0]
 8002dbc:	f00a be8e 	b.w	800dadc <osSemaphoreRelease>
 8002dc0:	24000868 	.word	0x24000868
 8002dc4:	24009e7c 	.word	0x24009e7c
 8002dc8:	24000850 	.word	0x24000850
 8002dcc:	24000864 	.word	0x24000864
 8002dd0:	2400086c 	.word	0x2400086c

08002dd4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dd4:	2101      	movs	r1, #1
 8002dd6:	2200      	movs	r2, #0
{
 8002dd8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dda:	4608      	mov	r0, r1
 8002ddc:	f00a fe08 	bl	800d9f0 <osSemaphoreNew>
 8002de0:	4b0a      	ldr	r3, [pc, #40]	@ (8002e0c <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002de2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002de4:	b928      	cbnz	r0, 8002df2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002de6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e10 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002de8:	2128      	movs	r1, #40	@ 0x28
 8002dea:	4a0a      	ldr	r2, [pc, #40]	@ (8002e14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002dec:	480a      	ldr	r0, [pc, #40]	@ (8002e18 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002dee:	f023 fc87 	bl	8026700 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002df2:	2200      	movs	r2, #0
 8002df4:	2104      	movs	r1, #4
 8002df6:	2001      	movs	r0, #1
 8002df8:	f00a fe99 	bl	800db2e <osMessageQueueNew>
 8002dfc:	4b07      	ldr	r3, [pc, #28]	@ (8002e1c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002dfe:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002e00:	b918      	cbnz	r0, 8002e0a <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002e02:	4b07      	ldr	r3, [pc, #28]	@ (8002e20 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002e04:	212c      	movs	r1, #44	@ 0x2c
 8002e06:	4a03      	ldr	r2, [pc, #12]	@ (8002e14 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002e08:	e7f0      	b.n	8002dec <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002e0a:	bd08      	pop	{r3, pc}
 8002e0c:	24009ea0 	.word	0x24009ea0
 8002e10:	080282c0 	.word	0x080282c0
 8002e14:	08028309 	.word	0x08028309
 8002e18:	08028338 	.word	0x08028338
 8002e1c:	24009e9c 	.word	0x24009e9c
 8002e20:	080283b3 	.word	0x080283b3

08002e24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002e24:	4b02      	ldr	r3, [pc, #8]	@ (8002e30 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002e26:	f04f 31ff 	mov.w	r1, #4294967295
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	f00a be2a 	b.w	800da84 <osSemaphoreAcquire>
 8002e30:	24009ea0 	.word	0x24009ea0

08002e34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002e34:	4b01      	ldr	r3, [pc, #4]	@ (8002e3c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002e36:	6818      	ldr	r0, [r3, #0]
 8002e38:	f00a be50 	b.w	800dadc <osSemaphoreRelease>
 8002e3c:	24009ea0 	.word	0x24009ea0

08002e40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002e40:	4b02      	ldr	r3, [pc, #8]	@ (8002e4c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002e42:	2100      	movs	r1, #0
 8002e44:	6818      	ldr	r0, [r3, #0]
 8002e46:	f00a be1d 	b.w	800da84 <osSemaphoreAcquire>
 8002e4a:	bf00      	nop
 8002e4c:	24009ea0 	.word	0x24009ea0

08002e50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002e50:	f7ff bff0 	b.w	8002e34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002e54 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002e54:	2300      	movs	r3, #0
 8002e56:	4803      	ldr	r0, [pc, #12]	@ (8002e64 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002e58:	4903      	ldr	r1, [pc, #12]	@ (8002e68 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002e5a:	461a      	mov	r2, r3
 8002e5c:	6800      	ldr	r0, [r0, #0]
 8002e5e:	f00a bea1 	b.w	800dba4 <osMessageQueuePut>
 8002e62:	bf00      	nop
 8002e64:	24009e9c 	.word	0x24009e9c
 8002e68:	24000030 	.word	0x24000030

08002e6c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002e6c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002e6e:	2300      	movs	r3, #0
 8002e70:	4c07      	ldr	r4, [pc, #28]	@ (8002e90 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002e72:	a901      	add	r1, sp, #4
 8002e74:	461a      	mov	r2, r3
 8002e76:	6820      	ldr	r0, [r4, #0]
 8002e78:	f00a fec5 	bl	800dc06 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002e7c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e80:	2200      	movs	r2, #0
 8002e82:	a901      	add	r1, sp, #4
 8002e84:	6820      	ldr	r0, [r4, #0]
 8002e86:	f00a febe 	bl	800dc06 <osMessageQueueGet>
}
 8002e8a:	b002      	add	sp, #8
 8002e8c:	bd10      	pop	{r4, pc}
 8002e8e:	bf00      	nop
 8002e90:	24009e9c 	.word	0x24009e9c

08002e94 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002e94:	6803      	ldr	r3, [r0, #0]
 8002e96:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e98:	4718      	bx	r3

08002e9a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002e9a:	2001      	movs	r0, #1
 8002e9c:	4770      	bx	lr

08002e9e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002e9e:	e7fe      	b.n	8002e9e <DMA2D_XferErrorCallback>

08002ea0 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002ea0:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002ea4:	4770      	bx	lr
	...

08002ea8 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002eac:	f04f 31ff 	mov.w	r1, #4294967295
 8002eb0:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002eb4:	f00a fd5a 	bl	800d96c <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002eb8:	6860      	ldr	r0, [r4, #4]
 8002eba:	6803      	ldr	r3, [r0, #0]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4798      	blx	r3
 8002ec0:	b978      	cbnz	r0, 8002ee2 <_ZN8STM32DMA5startEv+0x3a>
 8002ec2:	7a63      	ldrb	r3, [r4, #9]
 8002ec4:	b16b      	cbz	r3, 8002ee2 <_ZN8STM32DMA5startEv+0x3a>
 8002ec6:	7a23      	ldrb	r3, [r4, #8]
 8002ec8:	b95b      	cbnz	r3, 8002ee2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002eca:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002ece:	4620      	mov	r0, r4
 8002ed0:	6823      	ldr	r3, [r4, #0]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002ed6:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002ede:	f00a bd68 	b.w	800d9b2 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002ee2:	490b      	ldr	r1, [pc, #44]	@ (8002f10 <_ZN8STM32DMA5startEv+0x68>)
 8002ee4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f14 <_ZN8STM32DMA5startEv+0x6c>)
 8002ee6:	680b      	ldr	r3, [r1, #0]
 8002ee8:	011b      	lsls	r3, r3, #4
 8002eea:	5cd3      	ldrb	r3, [r2, r3]
 8002eec:	2b01      	cmp	r3, #1
 8002eee:	d1f2      	bne.n	8002ed6 <_ZN8STM32DMA5startEv+0x2e>
 8002ef0:	7a20      	ldrb	r0, [r4, #8]
 8002ef2:	2800      	cmp	r0, #0
 8002ef4:	d1ef      	bne.n	8002ed6 <_ZN8STM32DMA5startEv+0x2e>
 8002ef6:	7aa0      	ldrb	r0, [r4, #10]
 8002ef8:	2800      	cmp	r0, #0
 8002efa:	d1ec      	bne.n	8002ed6 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002efc:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002efe:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f02:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002f06:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002f08:	f7ff fefc 	bl	8002d04 <DMA2D_CopyBuffer>
    }
 8002f0c:	e7e3      	b.n	8002ed6 <_ZN8STM32DMA5startEv+0x2e>
 8002f0e:	bf00      	nop
 8002f10:	24000868 	.word	0x24000868
 8002f14:	24000010 	.word	0x24000010

08002f18 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002f18:	4b05      	ldr	r3, [pc, #20]	@ (8002f30 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f1a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f1e:	6003      	str	r3, [r0, #0]
 8002f20:	4b04      	ldr	r3, [pc, #16]	@ (8002f34 <_ZN8STM32DMAD1Ev+0x1c>)
 8002f22:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002f26:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f2a:	f3bf 8f6f 	isb	sy
}
 8002f2e:	4770      	bx	lr
 8002f30:	08028580 	.word	0x08028580
 8002f34:	e000e100 	.word	0xe000e100

08002f38 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002f38:	b510      	push	{r4, lr}
 8002f3a:	4604      	mov	r4, r0
}
 8002f3c:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002f40:	f7ff ffea 	bl	8002f18 <_ZN8STM32DMAD1Ev>
 8002f44:	4620      	mov	r0, r4
 8002f46:	f023 f865 	bl	8026014 <_ZdlPvj>
 8002f4a:	4620      	mov	r0, r4
 8002f4c:	bd10      	pop	{r4, pc}
	...

08002f50 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f50:	4b10      	ldr	r3, [pc, #64]	@ (8002f94 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002f52:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f54:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f58:	f042 0210 	orr.w	r2, r2, #16
 8002f5c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002f60:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f64:	f002 0210 	and.w	r2, r2, #16
 8002f68:	9201      	str	r2, [sp, #4]
 8002f6a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002f6c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f6e:	f042 0210 	orr.w	r2, r2, #16
 8002f72:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002f74:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f76:	f022 0210 	bic.w	r2, r2, #16
 8002f7a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002f7c:	4b06      	ldr	r3, [pc, #24]	@ (8002f98 <_ZN8STM32DMA10initializeEv+0x48>)
 8002f7e:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002f80:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002f82:	4a07      	ldr	r2, [pc, #28]	@ (8002fa0 <_ZN8STM32DMA10initializeEv+0x50>)
 8002f84:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f86:	4b07      	ldr	r3, [pc, #28]	@ (8002fa4 <_ZN8STM32DMA10initializeEv+0x54>)
 8002f88:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f8c:	609a      	str	r2, [r3, #8]
}
 8002f8e:	b002      	add	sp, #8
 8002f90:	4770      	bx	lr
 8002f92:	bf00      	nop
 8002f94:	58024400 	.word	0x58024400
 8002f98:	240006dc 	.word	0x240006dc
 8002f9c:	080031ed 	.word	0x080031ed
 8002fa0:	08002e9f 	.word	0x08002e9f
 8002fa4:	e000e100 	.word	0xe000e100

08002fa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002fa8:	b508      	push	{r3, lr}
    switch (format)
 8002faa:	280a      	cmp	r0, #10
 8002fac:	d809      	bhi.n	8002fc2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002fae:	e8df f000 	tbb	[pc, r0]
 8002fb2:	1006      	.short	0x1006
 8002fb4:	0808080e 	.word	0x0808080e
 8002fb8:	10101008 	.word	0x10101008
 8002fbc:	10          	.byte	0x10
 8002fbd:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002fbe:	2002      	movs	r0, #2
}
 8002fc0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002fc2:	4b05      	ldr	r3, [pc, #20]	@ (8002fd8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002fc4:	2191      	movs	r1, #145	@ 0x91
 8002fc6:	4a05      	ldr	r2, [pc, #20]	@ (8002fdc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002fc8:	4805      	ldr	r0, [pc, #20]	@ (8002fe0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002fca:	f023 fb99 	bl	8026700 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002fce:	2000      	movs	r0, #0
 8002fd0:	e7f6      	b.n	8002fc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002fd2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002fd4:	e7f4      	b.n	8002fc0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002fd6:	bf00      	nop
 8002fd8:	080283f5 	.word	0x080283f5
 8002fdc:	08028410 	.word	0x08028410
 8002fe0:	0802845b 	.word	0x0802845b

08002fe4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002fe4:	b538      	push	{r3, r4, r5, lr}
 8002fe6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fe8:	7f88      	ldrb	r0, [r1, #30]
 8002fea:	f7ff ffdd 	bl	8002fa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fee:	4b12      	ldr	r3, [pc, #72]	@ (8003038 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ff0:	8aa5      	ldrh	r5, [r4, #20]
 8002ff2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002ff4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ff6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ffa:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002ffc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ffe:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003000:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003002:	1b52      	subs	r2, r2, r5
 8003004:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8003006:	6825      	ldr	r5, [r4, #0]
 8003008:	2d08      	cmp	r5, #8
 800300a:	d10e      	bne.n	800302a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800300c:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 800300e:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003010:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003012:	4a0a      	ldr	r2, [pc, #40]	@ (800303c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003014:	7f20      	ldrb	r0, [r4, #28]
 8003016:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800301a:	61da      	str	r2, [r3, #28]
        return color;
 800301c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800301e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003020:	4a07      	ldr	r2, [pc, #28]	@ (8003040 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003022:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003024:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003026:	601a      	str	r2, [r3, #0]
    }
}
 8003028:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800302a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800302c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800302e:	611a      	str	r2, [r3, #16]
 8003030:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003032:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003034:	4a03      	ldr	r2, [pc, #12]	@ (8003044 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8003036:	e7f6      	b.n	8003026 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003038:	52001000 	.word	0x52001000
 800303c:	00010009 	.word	0x00010009
 8003040:	00022301 	.word	0x00022301
 8003044:	00032301 	.word	0x00032301

08003048 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003048:	b508      	push	{r3, lr}
    switch (format)
 800304a:	280b      	cmp	r0, #11
 800304c:	d80b      	bhi.n	8003066 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800304e:	e8df f000 	tbb	[pc, r0]
 8003052:	1206      	.short	0x1206
 8003054:	0a0a0a10 	.word	0x0a0a0a10
 8003058:	0808080a 	.word	0x0808080a
 800305c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800305e:	2002      	movs	r0, #2
}
 8003060:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003062:	2005      	movs	r0, #5
        break;
 8003064:	e7fc      	b.n	8003060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8003066:	4b05      	ldr	r3, [pc, #20]	@ (800307c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003068:	2170      	movs	r1, #112	@ 0x70
 800306a:	4a05      	ldr	r2, [pc, #20]	@ (8003080 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800306c:	4805      	ldr	r0, [pc, #20]	@ (8003084 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800306e:	f023 fb47 	bl	8026700 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003072:	2000      	movs	r0, #0
 8003074:	e7f4      	b.n	8003060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003076:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003078:	e7f2      	b.n	8003060 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800307a:	bf00      	nop
 800307c:	080283f5 	.word	0x080283f5
 8003080:	080284d4 	.word	0x080284d4
 8003084:	0802845b 	.word	0x0802845b

08003088 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003088:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800308c:	7f4f      	ldrb	r7, [r1, #29]
{
 800308e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003090:	4638      	mov	r0, r7
 8003092:	f7ff ffd9 	bl	8003048 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003096:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800309a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800309c:	4628      	mov	r0, r5
 800309e:	f7ff ffd3 	bl	8003048 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 80030a2:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80030a4:	4628      	mov	r0, r5
 80030a6:	f7ff ff7f 	bl	8002fa8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030aa:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 80030ae:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030b2:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030b6:	4b45      	ldr	r3, [pc, #276]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80030b8:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030ba:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030bc:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030be:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030c0:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030c2:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030c6:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030c8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030cc:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030d0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030d6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030d8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80030da:	f8d9 4000 	ldr.w	r4, [r9]
 80030de:	f899 201c 	ldrb.w	r2, [r9, #28]
 80030e2:	2c80      	cmp	r4, #128	@ 0x80
 80030e4:	d022      	beq.n	800312c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80030e6:	d80f      	bhi.n	8003108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80030e8:	2c20      	cmp	r4, #32
 80030ea:	d066      	beq.n	80031ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030ec:	2c40      	cmp	r4, #64	@ 0x40
 80030ee:	d064      	beq.n	80031ba <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030f0:	2c04      	cmp	r4, #4
 80030f2:	d05c      	beq.n	80031ae <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030f4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80030f8:	4b34      	ldr	r3, [pc, #208]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030fa:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030fc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003100:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 8003102:	d060      	beq.n	80031c6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003104:	4a32      	ldr	r2, [pc, #200]	@ (80031d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 8003106:	e03f      	b.n	8003188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 8003108:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 800310c:	d004      	beq.n	8003118 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 800310e:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003112:	d1ef      	bne.n	80030f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003114:	482f      	ldr	r0, [pc, #188]	@ (80031d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8003116:	e000      	b.n	800311a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003118:	482f      	ldr	r0, [pc, #188]	@ (80031d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800311a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800311e:	61da      	str	r2, [r3, #28]
 8003120:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003124:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003126:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003128:	6159      	str	r1, [r3, #20]
 800312a:	e02c      	b.n	8003186 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800312c:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003130:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003134:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003138:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800313a:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800313c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800313e:	1d21      	adds	r1, r4, #4
 8003140:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003142:	7821      	ldrb	r1, [r4, #0]
 8003144:	b141      	cbz	r1, 8003158 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003146:	2901      	cmp	r1, #1
 8003148:	d021      	beq.n	800318e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800314a:	4b24      	ldr	r3, [pc, #144]	@ (80031dc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800314c:	f240 110b 	movw	r1, #267	@ 0x10b
 8003150:	4a23      	ldr	r2, [pc, #140]	@ (80031e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003152:	4824      	ldr	r0, [pc, #144]	@ (80031e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003154:	f023 fad4 	bl	8026700 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003158:	69da      	ldr	r2, [r3, #28]
 800315a:	8861      	ldrh	r1, [r4, #2]
 800315c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003160:	3901      	subs	r1, #1
 8003162:	f022 0210 	bic.w	r2, r2, #16
 8003166:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800316a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800316c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800316e:	4b17      	ldr	r3, [pc, #92]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003170:	69d9      	ldr	r1, [r3, #28]
 8003172:	f041 0120 	orr.w	r1, r1, #32
 8003176:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003178:	69d9      	ldr	r1, [r3, #28]
 800317a:	0689      	lsls	r1, r1, #26
 800317c:	d4fc      	bmi.n	8003178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800317e:	2110      	movs	r1, #16
 8003180:	6099      	str	r1, [r3, #8]
            if (blend)
 8003182:	2a00      	cmp	r2, #0
 8003184:	d0be      	beq.n	8003104 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003186:	4a18      	ldr	r2, [pc, #96]	@ (80031e8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003188:	601a      	str	r2, [r3, #0]
}
 800318a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800318e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003190:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003192:	8860      	ldrh	r0, [r4, #2]
 8003194:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003198:	bf18      	it	ne
 800319a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800319c:	3801      	subs	r0, #1
 800319e:	f021 0110 	bic.w	r1, r1, #16
 80031a2:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 80031a6:	f041 0110 	orr.w	r1, r1, #16
 80031aa:	61d9      	str	r1, [r3, #28]
                break;
 80031ac:	e7df      	b.n	800316e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031ae:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031b2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031b6:	61da      	str	r2, [r3, #28]
 80031b8:	e7b5      	b.n	8003126 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80031ba:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031be:	4b03      	ldr	r3, [pc, #12]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031c0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031c4:	e7f7      	b.n	80031b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80031c6:	f242 3201 	movw	r2, #8961	@ 0x2301
 80031ca:	e7dd      	b.n	8003188 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80031cc:	52001000 	.word	0x52001000
 80031d0:	00012301 	.word	0x00012301
 80031d4:	00020009 	.word	0x00020009
 80031d8:	0002000a 	.word	0x0002000a
 80031dc:	0802851e 	.word	0x0802851e
 80031e0:	08028538 	.word	0x08028538
 80031e4:	0802845b 	.word	0x0802845b
 80031e8:	00022301 	.word	0x00022301

080031ec <DMA2D_XferCpltCallback>:
 80031ec:	4b02      	ldr	r3, [pc, #8]	@ (80031f8 <DMA2D_XferCpltCallback+0xc>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80031f2:	6803      	ldr	r3, [r0, #0]
 80031f4:	695b      	ldr	r3, [r3, #20]
 80031f6:	4718      	bx	r3
 80031f8:	24025e20 	.word	0x24025e20

080031fc <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80031fc:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 8003200:	b510      	push	{r4, lr}
 8003202:	4604      	mov	r4, r0
        if (!started_by_external_job)
 8003204:	b9d3      	cbnz	r3, 800323c <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 8003206:	6803      	ldr	r3, [r0, #0]
 8003208:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800320a:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 800320c:	4919      	ldr	r1, [pc, #100]	@ (8003274 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800320e:	4a1a      	ldr	r2, [pc, #104]	@ (8003278 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003210:	680b      	ldr	r3, [r1, #0]
 8003212:	011b      	lsls	r3, r3, #4
 8003214:	5cd3      	ldrb	r3, [r2, r3]
 8003216:	2b01      	cmp	r3, #1
 8003218:	d12a      	bne.n	8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800321a:	4818      	ldr	r0, [pc, #96]	@ (800327c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 800321c:	6800      	ldr	r0, [r0, #0]
 800321e:	bb38      	cbnz	r0, 8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003220:	7a20      	ldrb	r0, [r4, #8]
 8003222:	bb28      	cbnz	r0, 8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003224:	7aa0      	ldrb	r0, [r4, #10]
 8003226:	bb18      	cbnz	r0, 8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003228:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800322a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 800322e:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003230:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003238:	f7ff bd64 	b.w	8002d04 <DMA2D_CopyBuffer>
        if (isRunning)
 800323c:	7a03      	ldrb	r3, [r0, #8]
 800323e:	b143      	cbz	r3, 8003252 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003240:	2300      	movs	r3, #0
 8003242:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003244:	4b0b      	ldr	r3, [pc, #44]	@ (8003274 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003246:	6818      	ldr	r0, [r3, #0]
 8003248:	4b0b      	ldr	r3, [pc, #44]	@ (8003278 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800324a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800324e:	f7ff fd9d 	bl	8002d8c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003252:	6860      	ldr	r0, [r4, #4]
 8003254:	6803      	ldr	r3, [r0, #0]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4798      	blx	r3
 800325a:	b948      	cbnz	r0, 8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800325c:	7a63      	ldrb	r3, [r4, #9]
 800325e:	b13b      	cbz	r3, 8003270 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003260:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003262:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003266:	4620      	mov	r0, r4
 8003268:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800326a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800326e:	4718      	bx	r3
    }
 8003270:	bd10      	pop	{r4, pc}
 8003272:	bf00      	nop
 8003274:	24000868 	.word	0x24000868
 8003278:	24000010 	.word	0x24000010
 800327c:	24000864 	.word	0x24000864

08003280 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003280:	b570      	push	{r4, r5, r6, lr}
 8003282:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003284:	4b0e      	ldr	r3, [pc, #56]	@ (80032c0 <_ZN8STM32DMAC1Ev+0x40>)
 8003286:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003288:	2600      	movs	r6, #0
 800328a:	4625      	mov	r5, r4
 800328c:	2260      	movs	r2, #96	@ 0x60
 800328e:	6060      	str	r0, [r4, #4]
 8003290:	7226      	strb	r6, [r4, #8]
 8003292:	7266      	strb	r6, [r4, #9]
 8003294:	f845 3b20 	str.w	r3, [r5], #32
 8003298:	4629      	mov	r1, r5
 800329a:	f00d fe3d 	bl	8010f18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800329e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 80032a2:	60ee      	str	r6, [r5, #12]
 80032a4:	3524      	adds	r5, #36	@ 0x24
 80032a6:	429d      	cmp	r5, r3
 80032a8:	d1fb      	bne.n	80032a2 <_ZN8STM32DMAC1Ev+0x22>
 80032aa:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 80032ae:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80032b0:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80032b4:	f00a fb25 	bl	800d902 <osMutexNew>
 80032b8:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80032bc:	4620      	mov	r0, r4
 80032be:	bd70      	pop	{r4, r5, r6, pc}
 80032c0:	08028580 	.word	0x08028580

080032c4 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032c4:	4b03      	ldr	r3, [pc, #12]	@ (80032d4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	07d2      	lsls	r2, r2, #31
 80032ca:	d4fc      	bmi.n	80032c6 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032cc:	2223      	movs	r2, #35	@ 0x23
 80032ce:	609a      	str	r2, [r3, #8]
}
 80032d0:	4770      	bx	lr
 80032d2:	bf00      	nop
 80032d4:	52001000 	.word	0x52001000

080032d8 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032d8:	4a0b      	ldr	r2, [pc, #44]	@ (8003308 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80032da:	6953      	ldr	r3, [r2, #20]
 80032dc:	03db      	lsls	r3, r3, #15
 80032de:	d511      	bpl.n	8003304 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80032e0:	2900      	cmp	r1, #0
 80032e2:	dd0f      	ble.n	8003304 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80032e4:	f000 031f 	and.w	r3, r0, #31
 80032e8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80032ea:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80032ee:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80032f0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80032f4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80032f6:	1a0b      	subs	r3, r1, r0
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	dcf9      	bgt.n	80032f0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80032fc:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003300:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 8003304:	4770      	bx	lr
 8003306:	bf00      	nop
 8003308:	e000ed00 	.word	0xe000ed00

0800330c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 800330c:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800330e:	4c10      	ldr	r4, [pc, #64]	@ (8003350 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003310:	6825      	ldr	r5, [r4, #0]
 8003312:	07ed      	lsls	r5, r5, #31
 8003314:	d4fc      	bmi.n	8003310 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003316:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003318:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800331a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800331c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800331e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003322:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003326:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003328:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800332a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 800332c:	d00c      	beq.n	8003348 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800332e:	4909      	ldr	r1, [pc, #36]	@ (8003354 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003330:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003334:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003336:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800333a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800333c:	4b06      	ldr	r3, [pc, #24]	@ (8003358 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800333e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003340:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003342:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003344:	6023      	str	r3, [r4, #0]
    }
}
 8003346:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003348:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800334a:	4b04      	ldr	r3, [pc, #16]	@ (800335c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 800334c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800334e:	e7f9      	b.n	8003344 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003350:	52001000 	.word	0x52001000
 8003354:	00010009 	.word	0x00010009
 8003358:	00020001 	.word	0x00020001
 800335c:	00030001 	.word	0x00030001

08003360 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003360:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003362:	4c0e      	ldr	r4, [pc, #56]	@ (800339c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003364:	6825      	ldr	r5, [r4, #0]
 8003366:	07ed      	lsls	r5, r5, #31
 8003368:	d4fc      	bmi.n	8003364 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800336a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800336c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800336e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003370:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003372:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003376:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800337a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800337c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800337e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003380:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003382:	d007      	beq.n	8003394 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003384:	4a06      	ldr	r2, [pc, #24]	@ (80033a0 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003386:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800338a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800338c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800338e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003390:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003392:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003394:	4b03      	ldr	r3, [pc, #12]	@ (80033a4 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003396:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003398:	6025      	str	r5, [r4, #0]
}
 800339a:	e7fa      	b.n	8003392 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 800339c:	52001000 	.word	0x52001000
 80033a0:	00020001 	.word	0x00020001
 80033a4:	ff020001 	.word	0xff020001

080033a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 80033a8:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80033aa:	4c0b      	ldr	r4, [pc, #44]	@ (80033d8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 80033ac:	6825      	ldr	r5, [r4, #0]
 80033ae:	07ed      	lsls	r5, r5, #31
 80033b0:	d4fc      	bmi.n	80033ac <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033b2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033b4:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033b6:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033b8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033ba:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033bc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033c0:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033c2:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033c4:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033c6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80033c8:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ca:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033cc:	4b03      	ldr	r3, [pc, #12]	@ (80033dc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033ce:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80033d0:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033d2:	6023      	str	r3, [r4, #0]
}
 80033d4:	bd30      	pop	{r4, r5, pc}
 80033d6:	bf00      	nop
 80033d8:	52001000 	.word	0x52001000
 80033dc:	00020001 	.word	0x00020001

080033e0 <_ZN8touchgfx9TypedTextD1Ev>:
    }

    /** Finalizes an instance of the TypedText class. */
    virtual ~TypedText()
    {
    }
 80033e0:	4770      	bx	lr

080033e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80033e2:	2001      	movs	r0, #1
 80033e4:	4770      	bx	lr

080033e6 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80033e6:	200c      	movs	r0, #12
 80033e8:	4770      	bx	lr

080033ea <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80033ea:	230c      	movs	r3, #12
 80033ec:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033f0:	3008      	adds	r0, #8
 80033f2:	4770      	bx	lr

080033f4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80033f4:	230c      	movs	r3, #12
 80033f6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033fa:	3008      	adds	r0, #8
 80033fc:	4770      	bx	lr

080033fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80033fe:	2001      	movs	r0, #1
 8003400:	4770      	bx	lr

08003402 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003402:	f640 20e4 	movw	r0, #2788	@ 0xae4
 8003406:	4770      	bx	lr

08003408 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003408:	f640 23e4 	movw	r3, #2788	@ 0xae4
 800340c:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003410:	3008      	adds	r0, #8
 8003412:	4770      	bx	lr

08003414 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003414:	f640 23e4 	movw	r3, #2788	@ 0xae4
 8003418:	fb03 0001 	mla	r0, r3, r1, r0
    }
 800341c:	3008      	adds	r0, #8
 800341e:	4770      	bx	lr

08003420 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003420:	2001      	movs	r0, #1
 8003422:	4770      	bx	lr

08003424 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 8003424:	2010      	movs	r0, #16
 8003426:	4770      	bx	lr

08003428 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003428:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800342c:	3008      	adds	r0, #8
 800342e:	4770      	bx	lr

08003430 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003430:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003434:	3008      	adds	r0, #8
 8003436:	4770      	bx	lr

08003438 <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003438:	b510      	push	{r4, lr}
 800343a:	4604      	mov	r4, r0
    }
 800343c:	2108      	movs	r1, #8
 800343e:	f022 fde9 	bl	8026014 <_ZdlPvj>
 8003442:	4620      	mov	r0, r4
 8003444:	bd10      	pop	{r4, pc}

08003446 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoUPIScreenScreenNoTransition();
 8003446:	4608      	mov	r0, r1
 8003448:	f000 be3e 	b.w	80040c8 <_ZN23FrontendApplicationBase31gotoUPIScreenScreenNoTransitionEv>

0800344c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 800344c:	4b03      	ldr	r3, [pc, #12]	@ (800345c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800344e:	b510      	push	{r4, lr}
 8003450:	4604      	mov	r4, r0
 8003452:	6003      	str	r3, [r0, #0]
 8003454:	f00c fbc7 	bl	800fbe6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003458:	4620      	mov	r0, r4
 800345a:	bd10      	pop	{r4, pc}
 800345c:	08028638 	.word	0x08028638

08003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003460:	b510      	push	{r4, lr}
 8003462:	4604      	mov	r4, r0
 8003464:	f7ff fff2 	bl	800344c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003468:	2114      	movs	r1, #20
 800346a:	4620      	mov	r0, r4
 800346c:	f022 fdd2 	bl	8026014 <_ZdlPvj>
 8003470:	4620      	mov	r0, r4
 8003472:	bd10      	pop	{r4, pc}

08003474 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003474:	4b03      	ldr	r3, [pc, #12]	@ (8003484 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003476:	b510      	push	{r4, lr}
 8003478:	4604      	mov	r4, r0
 800347a:	6003      	str	r3, [r0, #0]
 800347c:	f00c fbb3 	bl	800fbe6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003480:	4620      	mov	r0, r4
 8003482:	bd10      	pop	{r4, pc}
 8003484:	08028604 	.word	0x08028604

08003488 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003488:	b510      	push	{r4, lr}
 800348a:	4604      	mov	r4, r0
 800348c:	f7ff fff2 	bl	8003474 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003490:	f640 21ec 	movw	r1, #2796	@ 0xaec
 8003494:	4620      	mov	r0, r4
 8003496:	f022 fdbd 	bl	8026014 <_ZdlPvj>
 800349a:	4620      	mov	r0, r4
 800349c:	bd10      	pop	{r4, pc}
	...

080034a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 80034a0:	4b03      	ldr	r3, [pc, #12]	@ (80034b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 80034a2:	b510      	push	{r4, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	6003      	str	r3, [r0, #0]
 80034a8:	f00c fb9d 	bl	800fbe6 <_ZN8touchgfx17AbstractPartitionD1Ev>
 80034ac:	4620      	mov	r0, r4
 80034ae:	bd10      	pop	{r4, pc}
 80034b0:	080285d0 	.word	0x080285d0

080034b4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 80034b4:	b510      	push	{r4, lr}
 80034b6:	4604      	mov	r4, r0
 80034b8:	f7ff fff2 	bl	80034a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034bc:	2118      	movs	r1, #24
 80034be:	4620      	mov	r0, r4
 80034c0:	f022 fda8 	bl	8026014 <_ZdlPvj>
 80034c4:	4620      	mov	r0, r4
 80034c6:	bd10      	pop	{r4, pc}

080034c8 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80034c8:	4b08      	ldr	r3, [pc, #32]	@ (80034ec <_ZN12FrontendHeapD1Ev+0x24>)
 80034ca:	b510      	push	{r4, lr}
 80034cc:	4604      	mov	r4, r0
 80034ce:	6003      	str	r3, [r0, #0]
 80034d0:	f600 3018 	addw	r0, r0, #2840	@ 0xb18
 80034d4:	f7ff ffba 	bl	800344c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034d8:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80034dc:	f7ff ffca 	bl	8003474 <_ZN8touchgfx9PartitionINS_4meta8TypeListI13UPIScreenViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034e0:	f104 0014 	add.w	r0, r4, #20
 80034e4:	f7ff ffdc 	bl	80034a0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034e8:	4620      	mov	r0, r4
 80034ea:	bd10      	pop	{r4, pc}
 80034ec:	0802866c 	.word	0x0802866c

080034f0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034f0:	b508      	push	{r3, lr}
 80034f2:	4802      	ldr	r0, [pc, #8]	@ (80034fc <__tcf_0+0xc>)
 80034f4:	f7ff ffe8 	bl	80034c8 <_ZN12FrontendHeapD1Ev>
 80034f8:	bd08      	pop	{r3, pc}
 80034fa:	bf00      	nop
 80034fc:	2400ad5c 	.word	0x2400ad5c

08003500 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 8003500:	b510      	push	{r4, lr}
 8003502:	4604      	mov	r4, r0
 8003504:	f7ff ffe0 	bl	80034c8 <_ZN12FrontendHeapD1Ev>
 8003508:	f640 418c 	movw	r1, #3212	@ 0xc8c
 800350c:	4620      	mov	r0, r4
 800350e:	f022 fd81 	bl	8026014 <_ZdlPvj>
 8003512:	4620      	mov	r0, r4
 8003514:	bd10      	pop	{r4, pc}
	...

08003518 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 8003518:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 800351c:	f000 fc52 	bl	8003dc4 <_ZN14BitmapDatabase11getInstanceEv>
 8003520:	2400      	movs	r4, #0
 8003522:	4605      	mov	r5, r0
 8003524:	f000 fc52 	bl	8003dcc <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003528:	4623      	mov	r3, r4
 800352a:	4601      	mov	r1, r0
 800352c:	4622      	mov	r2, r4
 800352e:	4628      	mov	r0, r5
 8003530:	9400      	str	r4, [sp, #0]
 8003532:	f016 fff7 	bl	801a524 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 8003536:	4b27      	ldr	r3, [pc, #156]	@ (80035d4 <touchgfx_init+0xbc>)
 8003538:	4a27      	ldr	r2, [pc, #156]	@ (80035d8 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 800353a:	4620      	mov	r0, r4
        static FrontendHeap instance;
 800353c:	4d27      	ldr	r5, [pc, #156]	@ (80035dc <touchgfx_init+0xc4>)
 800353e:	601a      	str	r2, [r3, #0]
 8003540:	f000 ff66 	bl	8004410 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 8003544:	4b26      	ldr	r3, [pc, #152]	@ (80035e0 <touchgfx_init+0xc8>)
 8003546:	4a27      	ldr	r2, [pc, #156]	@ (80035e4 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003548:	4827      	ldr	r0, [pc, #156]	@ (80035e8 <touchgfx_init+0xd0>)
 800354a:	609a      	str	r2, [r3, #8]
 800354c:	f016 fe8c 	bl	801a268 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003550:	682b      	ldr	r3, [r5, #0]
 8003552:	f3bf 8f5b 	dmb	ish
 8003556:	07db      	lsls	r3, r3, #31
 8003558:	d435      	bmi.n	80035c6 <touchgfx_init+0xae>
 800355a:	4628      	mov	r0, r5
 800355c:	f022 fd5c 	bl	8026018 <__cxa_guard_acquire>
 8003560:	b388      	cbz	r0, 80035c6 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003562:	4c22      	ldr	r4, [pc, #136]	@ (80035ec <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003564:	4b22      	ldr	r3, [pc, #136]	@ (80035f0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003566:	f504 6633 	add.w	r6, r4, #2864	@ 0xb30
        : presenterStorage(pres),
 800356a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800356e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003572:	f604 3718 	addw	r7, r4, #2840	@ 0xb18
 8003576:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003578:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800357a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800357e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003580:	6126      	str	r6, [r4, #16]
 8003582:	f00c fb31 	bl	800fbe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003586:	4b1b      	ldr	r3, [pc, #108]	@ (80035f4 <touchgfx_init+0xdc>)
 8003588:	4640      	mov	r0, r8
 800358a:	6163      	str	r3, [r4, #20]
 800358c:	f00c fb2c 	bl	800fbe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003590:	4b19      	ldr	r3, [pc, #100]	@ (80035f8 <touchgfx_init+0xe0>)
 8003592:	4638      	mov	r0, r7
 8003594:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003596:	f00c fb27 	bl	800fbe8 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800359a:	4b18      	ldr	r3, [pc, #96]	@ (80035fc <touchgfx_init+0xe4>)
 800359c:	f604 302c 	addw	r0, r4, #2860	@ 0xb2c
 80035a0:	f8c4 3b18 	str.w	r3, [r4, #2840]	@ 0xb18
 80035a4:	f002 f8fc 	bl	80057a0 <_ZN5ModelC1Ev>
 80035a8:	4622      	mov	r2, r4
 80035aa:	f604 312c 	addw	r1, r4, #2860	@ 0xb2c
 80035ae:	4630      	mov	r0, r6
 80035b0:	f002 f8ec 	bl	800578c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 80035b4:	4630      	mov	r0, r6
 80035b6:	f000 fd87 	bl	80040c8 <_ZN23FrontendApplicationBase31gotoUPIScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 80035ba:	4811      	ldr	r0, [pc, #68]	@ (8003600 <touchgfx_init+0xe8>)
 80035bc:	f023 f8be 	bl	802673c <atexit>
 80035c0:	4628      	mov	r0, r5
 80035c2:	f022 fd35 	bl	8026030 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 80035c6:	480f      	ldr	r0, [pc, #60]	@ (8003604 <touchgfx_init+0xec>)
}
 80035c8:	b002      	add	sp, #8
 80035ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80035ce:	f7fe bcd3 	b.w	8001f78 <_ZN11TouchGFXHAL10initializeEv>
 80035d2:	bf00      	nop
 80035d4:	24025e84 	.word	0x24025e84
 80035d8:	24009f20 	.word	0x24009f20
 80035dc:	2400ad58 	.word	0x2400ad58
 80035e0:	24009f40 	.word	0x24009f40
 80035e4:	24009f24 	.word	0x24009f24
 80035e8:	24000034 	.word	0x24000034
 80035ec:	2400ad5c 	.word	0x2400ad5c
 80035f0:	0802866c 	.word	0x0802866c
 80035f4:	080285d0 	.word	0x080285d0
 80035f8:	08028604 	.word	0x08028604
 80035fc:	08028638 	.word	0x08028638
 8003600:	080034f1 	.word	0x080034f1
 8003604:	24009ea4 	.word	0x24009ea4

08003608 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 8003608:	4770      	bx	lr
	...

0800360c <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 800360c:	4801      	ldr	r0, [pc, #4]	@ (8003614 <touchgfx_taskEntry+0x8>)
 800360e:	f7fe bcc5 	b.w	8001f9c <_ZN11TouchGFXHAL9taskEntryEv>
 8003612:	bf00      	nop
 8003614:	24009ea4 	.word	0x24009ea4

08003618 <_GLOBAL__sub_I_touchgfx_init>:
}
 8003618:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 800361a:	4c0e      	ldr	r4, [pc, #56]	@ (8003654 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 800361c:	4b0e      	ldr	r3, [pc, #56]	@ (8003658 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 800361e:	4e0f      	ldr	r6, [pc, #60]	@ (800365c <_GLOBAL__sub_I_touchgfx_init+0x44>)
 8003620:	4620      	mov	r0, r4
static LCD24bpp display;
 8003622:	4d0f      	ldr	r5, [pc, #60]	@ (8003660 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 8003624:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 8003626:	f7ff fe2b 	bl	8003280 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 800362a:	4628      	mov	r0, r5
 800362c:	f01a fe1c 	bl	801e268 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003630:	480c      	ldr	r0, [pc, #48]	@ (8003664 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 8003632:	f014 fc19 	bl	8017e68 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 8003636:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800363a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800363e:	4621      	mov	r1, r4
 8003640:	4809      	ldr	r0, [pc, #36]	@ (8003668 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 8003642:	e9cd 3200 	strd	r3, r2, [sp]
 8003646:	4633      	mov	r3, r6
 8003648:	462a      	mov	r2, r5
 800364a:	f7fe fd3b 	bl	80020c4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 800364e:	b002      	add	sp, #8
 8003650:	bd70      	pop	{r4, r5, r6, pc}
 8003652:	bf00      	nop
 8003654:	24009fac 	.word	0x24009fac
 8003658:	08027d64 	.word	0x08027d64
 800365c:	2400ad54 	.word	0x2400ad54
 8003660:	24009f40 	.word	0x24009f40
 8003664:	24009f24 	.word	0x24009f24
 8003668:	24009ea4 	.word	0x24009ea4

0800366c <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 800366c:	4801      	ldr	r0, [pc, #4]	@ (8003674 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 800366e:	f7ff bc53 	b.w	8002f18 <_ZN8STM32DMAD1Ev>
 8003672:	bf00      	nop
 8003674:	24009fac 	.word	0x24009fac

08003678 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003678:	2000      	movs	r0, #0
 800367a:	4770      	bx	lr

0800367c <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 800367c:	8081      	strh	r1, [r0, #4]
    }
 800367e:	4770      	bx	lr

08003680 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003680:	80c1      	strh	r1, [r0, #6]
    }
 8003682:	4770      	bx	lr

08003684 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003684:	8101      	strh	r1, [r0, #8]
    }
 8003686:	4770      	bx	lr

08003688 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003688:	8141      	strh	r1, [r0, #10]
    }
 800368a:	4770      	bx	lr

0800368c <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 800368c:	4770      	bx	lr

0800368e <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 800368e:	4770      	bx	lr

08003690 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003690:	4770      	bx	lr

08003692 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003692:	4770      	bx	lr

08003694 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003694:	4770      	bx	lr

08003696 <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 8003696:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003698:	88c4      	ldrh	r4, [r0, #6]
 800369a:	6803      	ldr	r3, [r0, #0]
 800369c:	1b12      	subs	r2, r2, r4
 800369e:	8884      	ldrh	r4, [r0, #4]
 80036a0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036a2:	1b09      	subs	r1, r1, r4
 80036a4:	b212      	sxth	r2, r2
    }
 80036a6:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 80036aa:	b209      	sxth	r1, r1
 80036ac:	4718      	bx	r3

080036ae <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 80036ae:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80036b2:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 80036b4:	f04f 33ff 	mov.w	r3, #4294967295
 80036b8:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 80036ba:	6813      	ldr	r3, [r2, #0]
 80036bc:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 80036be:	6010      	str	r0, [r2, #0]
    }
 80036c0:	4770      	bx	lr

080036c2 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 80036c2:	2000      	movs	r0, #0
 80036c4:	4770      	bx	lr

080036c6 <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 80036c6:	888b      	ldrh	r3, [r1, #4]
 80036c8:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80036ca:	2001      	movs	r0, #1
 80036cc:	4770      	bx	lr

080036ce <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80036ce:	4770      	bx	lr

080036d0 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80036d0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80036d4:	4770      	bx	lr

080036d6 <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80036d6:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80036da:	4770      	bx	lr

080036dc <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036dc:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80036de:	b510      	push	{r4, lr}
        return rect.width;
 80036e0:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80036e4:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80036e8:	8002      	strh	r2, [r0, #0]
 80036ea:	8042      	strh	r2, [r0, #2]
 80036ec:	8084      	strh	r4, [r0, #4]
 80036ee:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80036f0:	bd10      	pop	{r4, pc}

080036f2 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80036f2:	2200      	movs	r2, #0
 80036f4:	8002      	strh	r2, [r0, #0]
 80036f6:	8042      	strh	r2, [r0, #2]
 80036f8:	8082      	strh	r2, [r0, #4]
 80036fa:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80036fc:	4770      	bx	lr

080036fe <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80036fe:	7701      	strb	r1, [r0, #28]
    }
 8003700:	4770      	bx	lr

08003702 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 8003702:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 8003706:	4770      	bx	lr

08003708 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 8003708:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 800370c:	4770      	bx	lr

0800370e <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 800370e:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 8003712:	4770      	bx	lr

08003714 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 8003714:	2001      	movs	r0, #1
 8003716:	4770      	bx	lr

08003718 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 8003718:	3098      	adds	r0, #152	@ 0x98
 800371a:	4770      	bx	lr

0800371c <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 800371c:	308c      	adds	r0, #140	@ 0x8c
 800371e:	4770      	bx	lr

08003720 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 8003720:	3084      	adds	r0, #132	@ 0x84
 8003722:	4770      	bx	lr

08003724 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 8003724:	4770      	bx	lr
	...

08003728 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003728:	4b02      	ldr	r3, [pc, #8]	@ (8003734 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 800372a:	2290      	movs	r2, #144	@ 0x90
 800372c:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	e000e100 	.word	0xe000e100

08003738 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003738:	4770      	bx	lr

0800373a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 800373a:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 800373c:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003740:	4770      	bx	lr

08003742 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003742:	4770      	bx	lr

08003744 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003744:	4770      	bx	lr

08003746 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 8003746:	4770      	bx	lr

08003748 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003748:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 800374c:	4611      	mov	r1, r2
 800374e:	6840      	ldr	r0, [r0, #4]
 8003750:	6803      	ldr	r3, [r0, #0]
 8003752:	68db      	ldr	r3, [r3, #12]
 8003754:	4718      	bx	r3

08003756 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 8003756:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 800375a:	4770      	bx	lr

0800375c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800375c:	b510      	push	{r4, lr}
 800375e:	4604      	mov	r4, r0
 8003760:	2148      	movs	r1, #72	@ 0x48
 8003762:	f022 fc57 	bl	8026014 <_ZdlPvj>
 8003766:	4620      	mov	r0, r4
 8003768:	bd10      	pop	{r4, pc}

0800376a <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800376a:	b510      	push	{r4, lr}
 800376c:	4604      	mov	r4, r0
 800376e:	212c      	movs	r1, #44	@ 0x2c
 8003770:	f022 fc50 	bl	8026014 <_ZdlPvj>
 8003774:	4620      	mov	r0, r4
 8003776:	bd10      	pop	{r4, pc}

08003778 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003778:	b510      	push	{r4, lr}
 800377a:	4604      	mov	r4, r0
 800377c:	21bc      	movs	r1, #188	@ 0xbc
 800377e:	f022 fc49 	bl	8026014 <_ZdlPvj>
 8003782:	4620      	mov	r0, r4
 8003784:	bd10      	pop	{r4, pc}
	...

08003788 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003788:	b538      	push	{r3, r4, r5, lr}
 800378a:	4604      	mov	r4, r0
    HAL::initialize();
 800378c:	f00c fd27 	bl	80101de <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003790:	6823      	ldr	r3, [r4, #0]
 8003792:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003794:	f013 fa3a 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 8003798:	4601      	mov	r1, r0
 800379a:	4620      	mov	r0, r4
 800379c:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 800379e:	6823      	ldr	r3, [r4, #0]
 80037a0:	4908      	ldr	r1, [pc, #32]	@ (80037c4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 80037a2:	4620      	mov	r0, r4
 80037a4:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 80037a8:	2300      	movs	r3, #0
 80037aa:	461a      	mov	r2, r3
 80037ac:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 80037ae:	6863      	ldr	r3, [r4, #4]
 80037b0:	4a05      	ldr	r2, [pc, #20]	@ (80037c8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 80037b2:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 80037b4:	4b05      	ldr	r3, [pc, #20]	@ (80037cc <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 80037b6:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 80037b8:	4a05      	ldr	r2, [pc, #20]	@ (80037d0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 80037ba:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 80037bc:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 80037be:	4a05      	ldr	r2, [pc, #20]	@ (80037d4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 80037c0:	635a      	str	r2, [r3, #52]	@ 0x34
}
 80037c2:	bd38      	pop	{r3, r4, r5, pc}
 80037c4:	d0119400 	.word	0xd0119400
 80037c8:	2400baf0 	.word	0x2400baf0
 80037cc:	2400baa8 	.word	0x2400baa8
 80037d0:	d0000000 	.word	0xd0000000
 80037d4:	00119400 	.word	0x00119400

080037d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80037d8:	b538      	push	{r3, r4, r5, lr}
 80037da:	4604      	mov	r4, r0
 80037dc:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80037de:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80037e0:	f04f 31ff 	mov.w	r1, #4294967295
 80037e4:	f00a f8c2 	bl	800d96c <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80037e8:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037ea:	f00a f8e2 	bl	800d9b2 <osMutexRelease>
        streams[handle].isActive = false;
 80037ee:	2324      	movs	r3, #36	@ 0x24
 80037f0:	fb03 4505 	mla	r5, r3, r5, r4
 80037f4:	2300      	movs	r3, #0
 80037f6:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80037fa:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80037fe:	b90b      	cbnz	r3, 8003804 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 8003800:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8003802:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 8003804:	bd38      	pop	{r3, r4, r5, pc}

08003806 <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 8003806:	f00c bc9b 	b.w	8010140 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

0800380a <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 800380a:	f00c bdfc 	b.w	8010406 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

0800380e <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 800380e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003812:	b112      	cbz	r2, 800381a <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 8003814:	6803      	ldr	r3, [r0, #0]
 8003816:	695b      	ldr	r3, [r3, #20]
 8003818:	4718      	bx	r3
    }
 800381a:	4770      	bx	lr

0800381c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 800381c:	4a12      	ldr	r2, [pc, #72]	@ (8003868 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 800381e:	6953      	ldr	r3, [r2, #20]
 8003820:	03db      	lsls	r3, r3, #15
{
 8003822:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 8003824:	d51e      	bpl.n	8003864 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8003826:	2300      	movs	r3, #0
 8003828:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 800382c:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003830:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003834:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003838:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800383c:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003840:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003842:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003846:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003848:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 800384c:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800384e:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 8003852:	d2f9      	bcs.n	8003848 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 8003854:	3b20      	subs	r3, #32
 8003856:	f113 0f20 	cmn.w	r3, #32
 800385a:	d1f2      	bne.n	8003842 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 800385c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003860:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003864:	bd70      	pop	{r4, r5, r6, pc}
 8003866:	bf00      	nop
 8003868:	e000ed00 	.word	0xe000ed00

0800386c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 800386c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800386e:	b131      	cbz	r1, 800387e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003870:	4b04      	ldr	r3, [pc, #16]	@ (8003884 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003872:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 8003876:	4a04      	ldr	r2, [pc, #16]	@ (8003888 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003878:	4804      	ldr	r0, [pc, #16]	@ (800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800387a:	f022 ff41 	bl	8026700 <__assert_func>
    }
 800387e:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003882:	bd08      	pop	{r3, pc}
 8003884:	08028678 	.word	0x08028678
 8003888:	0802868c 	.word	0x0802868c
 800388c:	08028816 	.word	0x08028816

08003890 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003890:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003892:	b131      	cbz	r1, 80038a2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003894:	4b06      	ldr	r3, [pc, #24]	@ (80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 8003896:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800389a:	4a06      	ldr	r2, [pc, #24]	@ (80038b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 800389c:	4806      	ldr	r0, [pc, #24]	@ (80038b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 800389e:	f022 ff2f 	bl	8026700 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 80038a2:	6840      	ldr	r0, [r0, #4]
 80038a4:	4611      	mov	r1, r2
 80038a6:	6803      	ldr	r3, [r0, #0]
    }
 80038a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 80038ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038ae:	4718      	bx	r3
 80038b0:	08028678 	.word	0x08028678
 80038b4:	08028860 	.word	0x08028860
 80038b8:	08028816 	.word	0x08028816

080038bc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 80038bc:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 80038be:	b129      	cbz	r1, 80038cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 80038c0:	4b03      	ldr	r3, [pc, #12]	@ (80038d0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 80038c2:	2179      	movs	r1, #121	@ 0x79
 80038c4:	4a03      	ldr	r2, [pc, #12]	@ (80038d4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 80038c6:	4804      	ldr	r0, [pc, #16]	@ (80038d8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80038c8:	f022 ff1a 	bl	8026700 <__assert_func>
    }
 80038cc:	68c0      	ldr	r0, [r0, #12]
 80038ce:	bd08      	pop	{r3, pc}
 80038d0:	08028678 	.word	0x08028678
 80038d4:	08028a0e 	.word	0x08028a0e
 80038d8:	08028816 	.word	0x08028816

080038dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80038dc:	b510      	push	{r4, lr}
 80038de:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80038e0:	b129      	cbz	r1, 80038ee <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80038e2:	4b19      	ldr	r3, [pc, #100]	@ (8003948 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80038e4:	21a2      	movs	r1, #162	@ 0xa2
 80038e6:	4a19      	ldr	r2, [pc, #100]	@ (800394c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80038e8:	4819      	ldr	r0, [pc, #100]	@ (8003950 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80038ea:	f022 ff09 	bl	8026700 <__assert_func>
        switch (cmd)
 80038ee:	2a05      	cmp	r2, #5
 80038f0:	d815      	bhi.n	800391e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80038f2:	e8df f002 	tbb	[pc, r2]
 80038f6:	1103      	.short	0x1103
 80038f8:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80038fc:	6840      	ldr	r0, [r0, #4]
 80038fe:	6803      	ldr	r3, [r0, #0]
 8003900:	691b      	ldr	r3, [r3, #16]
 8003902:	4798      	blx	r3
 8003904:	b158      	cbz	r0, 800391e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 8003906:	2301      	movs	r3, #1
 8003908:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 800390c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 8003910:	2300      	movs	r3, #0
            stream.tickCount = 0;
 8003912:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 8003916:	e002      	b.n	800391e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 8003918:	2300      	movs	r3, #0
 800391a:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 800391e:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 8003920:	6203      	str	r3, [r0, #32]
 8003922:	e7f5      	b.n	8003910 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 8003924:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 8003926:	2301      	movs	r3, #1
 8003928:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 800392c:	e7f0      	b.n	8003910 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 800392e:	2300      	movs	r3, #0
 8003930:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 8003934:	2301      	movs	r3, #1
 8003936:	6203      	str	r3, [r0, #32]
            break;
 8003938:	e7f1      	b.n	800391e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 800393a:	3b00      	subs	r3, #0
 800393c:	bf18      	it	ne
 800393e:	2301      	movne	r3, #1
 8003940:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 8003944:	e7eb      	b.n	800391e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003946:	bf00      	nop
 8003948:	08028678 	.word	0x08028678
 800394c:	08028bc3 	.word	0x08028bc3
 8003950:	08028816 	.word	0x08028816

08003954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 8003954:	b510      	push	{r4, lr}
 8003956:	460c      	mov	r4, r1
 8003958:	4611      	mov	r1, r2
 800395a:	461a      	mov	r2, r3
        assert(handle < no_streams);
 800395c:	b12c      	cbz	r4, 800396a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 800395e:	4b06      	ldr	r3, [pc, #24]	@ (8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003960:	2190      	movs	r1, #144	@ 0x90
 8003962:	4a06      	ldr	r2, [pc, #24]	@ (800397c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003964:	4806      	ldr	r0, [pc, #24]	@ (8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003966:	f022 fecb 	bl	8026700 <__assert_func>
        stream.frameNumber = 0;
 800396a:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 800396c:	6840      	ldr	r0, [r0, #4]
 800396e:	6803      	ldr	r3, [r0, #0]
    }
 8003970:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	4718      	bx	r3
 8003978:	08028678 	.word	0x08028678
 800397c:	08028d97 	.word	0x08028d97
 8003980:	08028816 	.word	0x08028816

08003984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003984:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003986:	b129      	cbz	r1, 8003994 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003988:	4b05      	ldr	r3, [pc, #20]	@ (80039a0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 800398a:	2182      	movs	r1, #130	@ 0x82
 800398c:	4a05      	ldr	r2, [pc, #20]	@ (80039a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 800398e:	4806      	ldr	r0, [pc, #24]	@ (80039a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003990:	f022 feb6 	bl	8026700 <__assert_func>
        stream.tickCount = 0;
 8003994:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003998:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 800399c:	bd08      	pop	{r3, pc}
 800399e:	bf00      	nop
 80039a0:	08028678 	.word	0x08028678
 80039a4:	08028f72 	.word	0x08028f72
 80039a8:	08028816 	.word	0x08028816

080039ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 80039ac:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 80039b0:	b510      	push	{r4, lr}
 80039b2:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 80039b4:	b153      	cbz	r3, 80039cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 80039b6:	f04f 31ff 	mov.w	r1, #4294967295
 80039ba:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80039bc:	f009 ffd6 	bl	800d96c <osMutexAcquire>
            firstDrawThisFrame = false;
 80039c0:	2300      	movs	r3, #0
 80039c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 80039c6:	2301      	movs	r3, #1
 80039c8:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80039cc:	bd10      	pop	{r4, pc}

080039ce <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80039ce:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80039d2:	b11a      	cbz	r2, 80039dc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80039d4:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80039d8:	b102      	cbz	r2, 80039dc <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80039da:	6018      	str	r0, [r3, #0]
        }
    }
 80039dc:	4770      	bx	lr
	...

080039e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80039e0:	b510      	push	{r4, lr}
 80039e2:	4604      	mov	r4, r0
 80039e4:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80039e6:	b129      	cbz	r1, 80039f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80039e8:	4b13      	ldr	r3, [pc, #76]	@ (8003a38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80039ea:	21d0      	movs	r1, #208	@ 0xd0
 80039ec:	4a13      	ldr	r2, [pc, #76]	@ (8003a3c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80039ee:	4814      	ldr	r0, [pc, #80]	@ (8003a40 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80039f0:	f022 fe86 	bl	8026700 <__assert_func>
        if (stream.isPlaying)
 80039f4:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80039f8:	b133      	cbz	r3, 8003a08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80039fa:	4b12      	ldr	r3, [pc, #72]	@ (8003a44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003a02:	6963      	ldr	r3, [r4, #20]
 8003a04:	4413      	add	r3, r2
 8003a06:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003a08:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003a0c:	b90b      	cbnz	r3, 8003a12 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003a0e:	2001      	movs	r0, #1
    }
 8003a10:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003a12:	68a3      	ldr	r3, [r4, #8]
 8003a14:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003a16:	6803      	ldr	r3, [r0, #0]
 8003a18:	695b      	ldr	r3, [r3, #20]
 8003a1a:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003a1c:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a1e:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003a22:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003a26:	2800      	cmp	r0, #0
 8003a28:	d1f1      	bne.n	8003a0e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003a2a:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1ee      	bne.n	8003a10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003a32:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003a36:	e7eb      	b.n	8003a10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003a38:	08028678 	.word	0x08028678
 8003a3c:	0802912e 	.word	0x0802912e
 8003a40:	08028816 	.word	0x08028816
 8003a44:	24025e20 	.word	0x24025e20

08003a48 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003a48:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003a4a:	4c1a      	ldr	r4, [pc, #104]	@ (8003ab4 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003a4c:	4605      	mov	r5, r0
    HAL::endFrame();
 8003a4e:	f00c fbb9 	bl	80101c4 <_ZN8touchgfx3HAL8endFrameEv>
 8003a52:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a56:	b913      	cbnz	r3, 8003a5e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003a58:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003a5c:	b1ab      	cbz	r3, 8003a8a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003a5e:	69e1      	ldr	r1, [r4, #28]
 8003a60:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003a64:	4353      	muls	r3, r2
 8003a66:	6922      	ldr	r2, [r4, #16]
 8003a68:	434a      	muls	r2, r1
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d30d      	bcc.n	8003a8a <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003a6e:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003a72:	b138      	cbz	r0, 8003a84 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003a74:	1a9b      	subs	r3, r3, r2
 8003a76:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003a7a:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003a7c:	bf98      	it	ls
 8003a7e:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003a82:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003a84:	2301      	movs	r3, #1
 8003a86:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003a8a:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003a8c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003a8e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003a92:	f00a f823 	bl	800dadc <osSemaphoreRelease>
        if (uiHasMutex)
 8003a96:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003a9a:	b12b      	cbz	r3, 8003aa8 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003a9c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a9e:	f009 ff88 	bl	800d9b2 <osMutexRelease>
            uiHasMutex = false;
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003aa8:	6868      	ldr	r0, [r5, #4]
 8003aaa:	6803      	ldr	r3, [r0, #0]
}
 8003aac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003ab0:	691b      	ldr	r3, [r3, #16]
 8003ab2:	4718      	bx	r3
 8003ab4:	2400baa8 	.word	0x2400baa8

08003ab8 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ab8:	4b04      	ldr	r3, [pc, #16]	@ (8003acc <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003aba:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003abe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003ac2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003ac6:	f3bf 8f6f 	isb	sy
}
 8003aca:	4770      	bx	lr
 8003acc:	e000e100 	.word	0xe000e100

08003ad0 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003ad0:	4b02      	ldr	r3, [pc, #8]	@ (8003adc <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003ad2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003ad6:	609a      	str	r2, [r3, #8]
}
 8003ad8:	4770      	bx	lr
 8003ada:	bf00      	nop
 8003adc:	e000e100 	.word	0xe000e100

08003ae0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003ae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ae2:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003ae4:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003ae8:	b9d8      	cbnz	r0, 8003b22 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003aea:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003aee:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003af0:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003af2:	60d8      	str	r0, [r3, #12]
 8003af4:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003af6:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003afa:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003afc:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003b00:	6158      	str	r0, [r3, #20]
 8003b02:	6198      	str	r0, [r3, #24]
 8003b04:	61d8      	str	r0, [r3, #28]
 8003b06:	6218      	str	r0, [r3, #32]
 8003b08:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003b0a:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003b0c:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b10:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003b14:	443c      	add	r4, r7
 8003b16:	42a2      	cmp	r2, r4
 8003b18:	d90a      	bls.n	8003b30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b1a:	4b0b      	ldr	r3, [pc, #44]	@ (8003b48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003b1c:	2152      	movs	r1, #82	@ 0x52
 8003b1e:	4a0b      	ldr	r2, [pc, #44]	@ (8003b4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003b20:	e003      	b.n	8003b2a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003b22:	4b0b      	ldr	r3, [pc, #44]	@ (8003b50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003b24:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003b28:	4a0a      	ldr	r2, [pc, #40]	@ (8003b54 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b2a:	480b      	ldr	r0, [pc, #44]	@ (8003b58 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003b2c:	f022 fde8 	bl	8026700 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003b30:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003b32:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003b34:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003b38:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003b3c:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003b3e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003b42:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003b44:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003b46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b48:	08029486 	.word	0x08029486
 8003b4c:	080294c1 	.word	0x080294c1
 8003b50:	080292cf 	.word	0x080292cf
 8003b54:	080292ff 	.word	0x080292ff
 8003b58:	08028816 	.word	0x08028816

08003b5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003b5c:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003b5e:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b60:	4e12      	ldr	r6, [pc, #72]	@ (8003bac <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003b62:	4604      	mov	r4, r0
 8003b64:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003b66:	4b12      	ldr	r3, [pc, #72]	@ (8003bb0 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003b68:	6003      	str	r3, [r0, #0]
 8003b6a:	6833      	ldr	r3, [r6, #0]
 8003b6c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b70:	b10a      	cbz	r2, 8003b76 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003b72:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b74:	b900      	cbnz	r0, 8003b78 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003b76:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003b78:	6803      	ldr	r3, [r0, #0]
 8003b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b7c:	4798      	blx	r3
 8003b7e:	1e43      	subs	r3, r0, #1
 8003b80:	425d      	negs	r5, r3
 8003b82:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003b84:	6833      	ldr	r3, [r6, #0]
 8003b86:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003b88:	b130      	cbz	r0, 8003b98 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003b8a:	6803      	ldr	r3, [r0, #0]
 8003b8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b8e:	4798      	blx	r3
 8003b90:	2801      	cmp	r0, #1
 8003b92:	bf08      	it	eq
 8003b94:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003b98:	b92d      	cbnz	r5, 8003ba6 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003b9a:	4b06      	ldr	r3, [pc, #24]	@ (8003bb4 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003b9c:	2127      	movs	r1, #39	@ 0x27
 8003b9e:	4a06      	ldr	r2, [pc, #24]	@ (8003bb8 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003ba0:	4806      	ldr	r0, [pc, #24]	@ (8003bbc <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003ba2:	f022 fdad 	bl	8026700 <__assert_func>
    }
 8003ba6:	4620      	mov	r0, r4
 8003ba8:	bd70      	pop	{r4, r5, r6, pc}
 8003baa:	bf00      	nop
 8003bac:	24025e20 	.word	0x24025e20
 8003bb0:	08029774 	.word	0x08029774
 8003bb4:	08029664 	.word	0x08029664
 8003bb8:	080296c2 	.word	0x080296c2
 8003bbc:	080296fb 	.word	0x080296fb

08003bc0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003bc0:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003bc2:	4e24      	ldr	r6, [pc, #144]	@ (8003c54 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003bc4:	6835      	ldr	r5, [r6, #0]
 8003bc6:	f3bf 8f5b 	dmb	ish
 8003bca:	f015 0501 	ands.w	r5, r5, #1
 8003bce:	d13f      	bne.n	8003c50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003bd0:	4630      	mov	r0, r6
 8003bd2:	f022 fa21 	bl	8026018 <__cxa_guard_acquire>
 8003bd6:	2800      	cmp	r0, #0
 8003bd8:	d03a      	beq.n	8003c50 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003bda:	4c1f      	ldr	r4, [pc, #124]	@ (8003c58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003bdc:	4b1f      	ldr	r3, [pc, #124]	@ (8003c5c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003bde:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003be2:	6125      	str	r5, [r4, #16]
 8003be4:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003be6:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003be8:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003bea:	e9c4 3500 	strd	r3, r5, [r4]
 8003bee:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003bf2:	f014 fb98 	bl	8018326 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003bf6:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bfa:	f00e fd13 	bl	8012624 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003bfe:	4b18      	ldr	r3, [pc, #96]	@ (8003c60 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003c00:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003c02:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003c04:	4b17      	ldr	r3, [pc, #92]	@ (8003c64 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003c06:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003c0a:	f7ff ffa7 	bl	8003b5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003c0e:	4b16      	ldr	r3, [pc, #88]	@ (8003c68 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003c10:	4816      	ldr	r0, [pc, #88]	@ (8003c6c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003c12:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003c16:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003c18:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003c1c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003c20:	2364      	movs	r3, #100	@ 0x64
 8003c22:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003c26:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003c2a:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003c2e:	2300      	movs	r3, #0
 8003c30:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003c34:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003c38:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003c3c:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003c40:	4b0b      	ldr	r3, [pc, #44]	@ (8003c70 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003c42:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003c46:	f022 fd79 	bl	802673c <atexit>
 8003c4a:	4630      	mov	r0, r6
 8003c4c:	f022 f9f0 	bl	8026030 <__cxa_guard_release>
}
 8003c50:	4801      	ldr	r0, [pc, #4]	@ (8003c58 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003c52:	bd70      	pop	{r4, r5, r6, pc}
 8003c54:	2400b9e8 	.word	0x2400b9e8
 8003c58:	2400b9ec 	.word	0x2400b9ec
 8003c5c:	0802ac80 	.word	0x0802ac80
 8003c60:	08029794 	.word	0x08029794
 8003c64:	0802980c 	.word	0x0802980c
 8003c68:	0802accc 	.word	0x0802accc
 8003c6c:	08003725 	.word	0x08003725
 8003c70:	0802ad04 	.word	0x0802ad04

08003c74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003c74:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c78:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003c7a:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c7c:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003c80:	f04f 31ff 	mov.w	r1, #4294967295
 8003c84:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003c86:	f009 fefd 	bl	800da84 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003c8a:	f04f 31ff 	mov.w	r1, #4294967295
 8003c8e:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c90:	f009 fe6c 	bl	800d96c <osMutexAcquire>
                if (stream.doDecode)
 8003c94:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003c98:	b343      	cbz	r3, 8003cec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003c9a:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003c9c:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003ca0:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003ca2:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003ca6:	f1b8 0f00 	cmp.w	r8, #0
 8003caa:	d023      	beq.n	8003cf4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cae:	4641      	mov	r1, r8
 8003cb0:	4628      	mov	r0, r5
 8003cb2:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003cb8:	682b      	ldr	r3, [r5, #0]
 8003cba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003cbe:	9700      	str	r7, [sp, #0]
 8003cc0:	4628      	mov	r0, r5
 8003cc2:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003cc6:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003cca:	68a1      	ldr	r1, [r4, #8]
 8003ccc:	47c0      	blx	r8
                    stream.frameCount++;
 8003cce:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003cd0:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003cd4:	3301      	adds	r3, #1
 8003cd6:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003cd8:	b1f0      	cbz	r0, 8003d18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003cda:	682b      	ldr	r3, [r5, #0]
 8003cdc:	4628      	mov	r0, r5
 8003cde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ce0:	4798      	blx	r3
 8003ce2:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003ce4:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003ce6:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003ce8:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003cec:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003cee:	f009 fe60 	bl	800d9b2 <osMutexRelease>
        while (1)
 8003cf2:	e7c5      	b.n	8003c80 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003cf4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cf6:	2a00      	cmp	r2, #0
 8003cf8:	d0de      	beq.n	8003cb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003cfa:	4628      	mov	r0, r5
 8003cfc:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003d00:	4798      	blx	r3
 8003d02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003d04:	4401      	add	r1, r0
 8003d06:	4628      	mov	r0, r5
 8003d08:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003d0a:	6923      	ldr	r3, [r4, #16]
 8003d0c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003d0e:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003d12:	4413      	add	r3, r2
 8003d14:	6123      	str	r3, [r4, #16]
 8003d16:	e7cf      	b.n	8003cb8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003d18:	2001      	movs	r0, #1
 8003d1a:	e7e3      	b.n	8003ce4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003d1c <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003d1c:	4801      	ldr	r0, [pc, #4]	@ (8003d24 <videoTaskFunc+0x8>)
{
 8003d1e:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003d20:	f7ff ffa8 	bl	8003c74 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003d24:	2400baa8 	.word	0x2400baa8

08003d28 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003d28:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003d2a:	4814      	ldr	r0, [pc, #80]	@ (8003d7c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d2c:	2500      	movs	r5, #0
 8003d2e:	f7fe fbe7 	bl	8002500 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d32:	4c13      	ldr	r4, [pc, #76]	@ (8003d80 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003d34:	4b13      	ldr	r3, [pc, #76]	@ (8003d84 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d36:	462a      	mov	r2, r5
 8003d38:	4629      	mov	r1, r5
 8003d3a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d3c:	6023      	str	r3, [r4, #0]
 8003d3e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d42:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d44:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d46:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d48:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003d4c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d50:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d54:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003d58:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d5c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003d60:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003d64:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d68:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d6c:	f009 fe40 	bl	800d9f0 <osSemaphoreNew>
 8003d70:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003d72:	4628      	mov	r0, r5
 8003d74:	f009 fdc5 	bl	800d902 <osMutexNew>
 8003d78:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003d7a:	bd38      	pop	{r3, r4, r5, pc}
 8003d7c:	2400baf0 	.word	0x2400baf0
 8003d80:	2400baa8 	.word	0x2400baa8
 8003d84:	08029858 	.word	0x08029858

08003d88 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId MODE = 0;     // verdana_20_4bpp
    static const touchgfx::FontId KEYBOARD = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d88:	4770      	bx	lr

08003d8a <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d8a:	b508      	push	{r3, lr}
    switch (typography)
 8003d8c:	2905      	cmp	r1, #5
 8003d8e:	d810      	bhi.n	8003db2 <_ZN23ApplicationFontProvider7getFontEt+0x28>
 8003d90:	e8df f001 	tbb	[pc, r1]
 8003d94:	0b07030b 	.word	0x0b07030b
 8003d98:	0b0b      	.short	0x0b0b
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d9a:	f000 fb85 	bl	80044a8 <_ZN17TypedTextDatabase8getFontsEv>
 8003d9e:	6840      	ldr	r0, [r0, #4]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8003da0:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003da2:	f000 fb81 	bl	80044a8 <_ZN17TypedTextDatabase8getFontsEv>
 8003da6:	6880      	ldr	r0, [r0, #8]
 8003da8:	e7fa      	b.n	8003da0 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003daa:	f000 fb7d 	bl	80044a8 <_ZN17TypedTextDatabase8getFontsEv>
 8003dae:	6800      	ldr	r0, [r0, #0]
 8003db0:	e7f6      	b.n	8003da0 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 8003db2:	2000      	movs	r0, #0
 8003db4:	e7f4      	b.n	8003da0 <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003db6 <_ZN23ApplicationFontProviderD0Ev>:
 8003db6:	b510      	push	{r4, lr}
 8003db8:	4604      	mov	r4, r0
 8003dba:	2104      	movs	r1, #4
 8003dbc:	f022 f92a 	bl	8026014 <_ZdlPvj>
 8003dc0:	4620      	mov	r0, r4
 8003dc2:	bd10      	pop	{r4, pc}

08003dc4 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003dc4:	4800      	ldr	r0, [pc, #0]	@ (8003dc8 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003dc6:	4770      	bx	lr
 8003dc8:	080298a8 	.word	0x080298a8

08003dcc <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003dcc:	200e      	movs	r0, #14
 8003dce:	4770      	bx	lr

08003dd0 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003dd0:	b513      	push	{r0, r1, r4, lr}
 8003dd2:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003dd4:	b151      	cbz	r1, 8003dec <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dd6:	6803      	ldr	r3, [r0, #0]
 8003dd8:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003dda:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003ddc:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003de0:	689c      	ldr	r4, [r3, #8]
 8003de2:	f10d 0303 	add.w	r3, sp, #3
 8003de6:	47a0      	blx	r4
        return glyph;
    }
 8003de8:	b002      	add	sp, #8
 8003dea:	bd10      	pop	{r4, pc}
            return 0;
 8003dec:	4608      	mov	r0, r1
 8003dee:	e7fb      	b.n	8003de8 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003df0 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003df0:	89c0      	ldrh	r0, [r0, #14]
 8003df2:	4770      	bx	lr

08003df4 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003df4:	8a00      	ldrh	r0, [r0, #16]
 8003df6:	4770      	bx	lr

08003df8 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003df8:	88c0      	ldrh	r0, [r0, #6]
 8003dfa:	4770      	bx	lr

08003dfc <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003dfc:	8880      	ldrh	r0, [r0, #4]
 8003dfe:	4770      	bx	lr

08003e00 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003e00:	7a80      	ldrb	r0, [r0, #10]
    }
 8003e02:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003e06:	4770      	bx	lr

08003e08 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003e08:	7a80      	ldrb	r0, [r0, #10]
    }
 8003e0a:	09c0      	lsrs	r0, r0, #7
 8003e0c:	4770      	bx	lr

08003e0e <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003e0e:	2000      	movs	r0, #0
 8003e10:	4770      	bx	lr
	...

08003e14 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003e14:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003e1c <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003e18:	4770      	bx	lr
 8003e1a:	bf00      	nop
 8003e1c:	00000000 	.word	0x00000000

08003e20 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003e20:	4770      	bx	lr

08003e22 <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003e22:	4770      	bx	lr

08003e24 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003e24:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003e28:	6808      	ldr	r0, [r1, #0]
 8003e2a:	6849      	ldr	r1, [r1, #4]
 8003e2c:	c303      	stmia	r3!, {r0, r1}
    }
 8003e2e:	4770      	bx	lr

08003e30 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003e30:	4770      	bx	lr

08003e32 <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003e32:	4770      	bx	lr

08003e34 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003e34:	6041      	str	r1, [r0, #4]
    }
 8003e36:	4770      	bx	lr

08003e38 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003e38:	4770      	bx	lr
	...

08003e3c <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e3c:	4b06      	ldr	r3, [pc, #24]	@ (8003e58 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003e3e:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003e42:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003e46:	2300      	movs	r3, #0
 8003e48:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// UPIScreen

void FrontendApplicationBase::gotoUPIScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoUPIScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003e4c:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003e50:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoUPIScreenScreenNoTransition();
    }
 8003e54:	4770      	bx	lr
 8003e56:	bf00      	nop
 8003e58:	08003efd 	.word	0x08003efd

08003e5c <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003e5c:	2301      	movs	r3, #1
 8003e5e:	7203      	strb	r3, [r0, #8]
    }
 8003e60:	4770      	bx	lr

08003e62 <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003e62:	4770      	bx	lr

08003e64 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003e64:	4770      	bx	lr

08003e66 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003e66:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003e68:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003e6a:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003e6c:	68c2      	ldr	r2, [r0, #12]
 8003e6e:	689b      	ldr	r3, [r3, #8]
 8003e70:	1054      	asrs	r4, r2, #1
 8003e72:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003e76:	07d2      	lsls	r2, r2, #31
 8003e78:	bf48      	it	mi
 8003e7a:	590a      	ldrmi	r2, [r1, r4]
    }
 8003e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003e80:	bf48      	it	mi
 8003e82:	58d3      	ldrmi	r3, [r2, r3]
 8003e84:	4718      	bx	r3

08003e86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003e86:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003e88:	6840      	ldr	r0, [r0, #4]
 8003e8a:	b130      	cbz	r0, 8003e9a <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003e8c:	689a      	ldr	r2, [r3, #8]
 8003e8e:	b91a      	cbnz	r2, 8003e98 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003e90:	68d8      	ldr	r0, [r3, #12]
 8003e92:	f000 0001 	and.w	r0, r0, #1
 8003e96:	4770      	bx	lr
 8003e98:	2001      	movs	r0, #1
    }
 8003e9a:	4770      	bx	lr

08003e9c <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e9c:	b510      	push	{r4, lr}
 8003e9e:	4604      	mov	r4, r0
 8003ea0:	210c      	movs	r1, #12
 8003ea2:	f022 f8b7 	bl	8026014 <_ZdlPvj>
 8003ea6:	4620      	mov	r0, r4
 8003ea8:	bd10      	pop	{r4, pc}

08003eaa <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003eaa:	b510      	push	{r4, lr}
 8003eac:	4604      	mov	r4, r0
 8003eae:	2110      	movs	r1, #16
 8003eb0:	f022 f8b0 	bl	8026014 <_ZdlPvj>
 8003eb4:	4620      	mov	r0, r4
 8003eb6:	bd10      	pop	{r4, pc}

08003eb8 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003eb8:	b510      	push	{r4, lr}
 8003eba:	4604      	mov	r4, r0
 8003ebc:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003ec0:	f022 f8a8 	bl	8026014 <_ZdlPvj>
 8003ec4:	4620      	mov	r0, r4
 8003ec6:	bd10      	pop	{r4, pc}

08003ec8 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003ec8:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003eca:	f012 fe9f 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 8003ece:	6803      	ldr	r3, [r0, #0]
    }
 8003ed0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ed4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ed6:	4718      	bx	r3

08003ed8 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ed8:	b510      	push	{r4, lr}
 8003eda:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003edc:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003ee0:	b158      	cbz	r0, 8003efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003ee2:	6803      	ldr	r3, [r0, #0]
 8003ee4:	68db      	ldr	r3, [r3, #12]
 8003ee6:	4798      	blx	r3
 8003ee8:	b138      	cbz	r0, 8003efa <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003eea:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003eee:	6803      	ldr	r3, [r0, #0]
 8003ef0:	689b      	ldr	r3, [r3, #8]
 8003ef2:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003efa:	bd10      	pop	{r4, pc}

08003efc <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoUPIScreenScreenNoTransitionImpl()
{
 8003efc:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<UPIScreenView, UPIScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003f00:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003f04:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003f06:	68b0      	ldr	r0, [r6, #8]
 8003f08:	6803      	ldr	r3, [r0, #0]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4798      	blx	r3
 8003f0e:	f640 23e3 	movw	r3, #2787	@ 0xae3
 8003f12:	4298      	cmp	r0, r3
 8003f14:	d805      	bhi.n	8003f22 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x26>
 8003f16:	4b44      	ldr	r3, [pc, #272]	@ (8004028 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x12c>)
 8003f18:	21a3      	movs	r1, #163	@ 0xa3
 8003f1a:	4a44      	ldr	r2, [pc, #272]	@ (800402c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x130>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f1c:	4844      	ldr	r0, [pc, #272]	@ (8004030 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x134>)
 8003f1e:	f022 fbef 	bl	8026700 <__assert_func>
 8003f22:	6870      	ldr	r0, [r6, #4]
 8003f24:	6803      	ldr	r3, [r0, #0]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	4798      	blx	r3
 8003f2a:	280f      	cmp	r0, #15
 8003f2c:	d803      	bhi.n	8003f36 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x3a>
 8003f2e:	4b41      	ldr	r3, [pc, #260]	@ (8004034 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x138>)
 8003f30:	21a4      	movs	r1, #164	@ 0xa4
 8003f32:	4a3e      	ldr	r2, [pc, #248]	@ (800402c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x130>)
 8003f34:	e7f2      	b.n	8003f1c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x20>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f36:	68f0      	ldr	r0, [r6, #12]
 8003f38:	6803      	ldr	r3, [r0, #0]
 8003f3a:	6a1b      	ldr	r3, [r3, #32]
 8003f3c:	4798      	blx	r3
 8003f3e:	280b      	cmp	r0, #11
 8003f40:	d803      	bhi.n	8003f4a <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x4e>
 8003f42:	4b3d      	ldr	r3, [pc, #244]	@ (8004038 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x13c>)
 8003f44:	21a5      	movs	r1, #165	@ 0xa5
 8003f46:	4a39      	ldr	r2, [pc, #228]	@ (800402c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x130>)
 8003f48:	e7e8      	b.n	8003f1c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x20>
    if (*currentTrans)
 8003f4a:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004040 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x144>
    Application::getInstance()->clearAllTimerWidgets();
 8003f4e:	f012 fe5d 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f52:	3004      	adds	r0, #4
 8003f54:	f012 fe7f 	bl	8016c56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f58:	f8d9 0000 	ldr.w	r0, [r9]
 8003f5c:	b110      	cbz	r0, 8003f64 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x68>
        (*currentTrans)->tearDown();
 8003f5e:	6803      	ldr	r3, [r0, #0]
 8003f60:	68db      	ldr	r3, [r3, #12]
 8003f62:	4798      	blx	r3
    if (*currentTrans)
 8003f64:	f8d9 0000 	ldr.w	r0, [r9]
 8003f68:	b110      	cbz	r0, 8003f70 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x74>
        (*currentTrans)->~Transition();
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	4798      	blx	r3
    if (*currentScreen)
 8003f70:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004044 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x148>
 8003f74:	f8d8 0000 	ldr.w	r0, [r8]
 8003f78:	b110      	cbz	r0, 8003f80 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x84>
        (*currentScreen)->tearDownScreen();
 8003f7a:	6803      	ldr	r3, [r0, #0]
 8003f7c:	695b      	ldr	r3, [r3, #20]
 8003f7e:	4798      	blx	r3
    if (*currentPresenter)
 8003f80:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f84:	b110      	cbz	r0, 8003f8c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x90>
        (*currentPresenter)->deactivate();
 8003f86:	6803      	ldr	r3, [r0, #0]
 8003f88:	685b      	ldr	r3, [r3, #4]
 8003f8a:	4798      	blx	r3
    if (*currentScreen)
 8003f8c:	f8d8 0000 	ldr.w	r0, [r8]
 8003f90:	b110      	cbz	r0, 8003f98 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x9c>
        (*currentScreen)->~Screen();
 8003f92:	6803      	ldr	r3, [r0, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4798      	blx	r3
    if (*currentPresenter)
 8003f98:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f9c:	b110      	cbz	r0, 8003fa4 <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0xa8>
        (*currentPresenter)->~Presenter();
 8003f9e:	6803      	ldr	r3, [r0, #0]
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003fa4:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003fa6:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003fa8:	f04f 0b00 	mov.w	fp, #0
 8003fac:	6803      	ldr	r3, [r0, #0]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	4798      	blx	r3
 8003fb2:	4b22      	ldr	r3, [pc, #136]	@ (800403c <_ZN23FrontendApplicationBase35gotoUPIScreenScreenNoTransitionImplEv+0x140>)
 8003fb4:	4604      	mov	r4, r0
 8003fb6:	f8c0 b004 	str.w	fp, [r0, #4]
 8003fba:	f880 b008 	strb.w	fp, [r0, #8]
 8003fbe:	4659      	mov	r1, fp
 8003fc0:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003fc2:	68b0      	ldr	r0, [r6, #8]
 8003fc4:	6803      	ldr	r3, [r0, #0]
 8003fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc8:	4798      	blx	r3
 8003fca:	4605      	mov	r5, r0
 8003fcc:	f001 fcd0 	bl	8005970 <_ZN13UPIScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fd0:	6870      	ldr	r0, [r6, #4]
 8003fd2:	4659      	mov	r1, fp
 8003fd4:	6803      	ldr	r3, [r0, #0]
 8003fd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fd8:	4798      	blx	r3
 8003fda:	4606      	mov	r6, r0
 8003fdc:	4629      	mov	r1, r5
 8003fde:	f001 fbf1 	bl	80057c4 <_ZN18UPIScreenPresenterC1ER13UPIScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fe2:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fe4:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fe8:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fea:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fee:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003ff2:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003ff6:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003ff8:	f8c6 a008 	str.w	sl, [r6, #8]
 8003ffc:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003ffe:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8004000:	4798      	blx	r3
    newPresenter->activate();
 8004002:	6833      	ldr	r3, [r6, #0]
 8004004:	4630      	mov	r0, r6
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 800400a:	4621      	mov	r1, r4
 800400c:	4628      	mov	r0, r5
 800400e:	f014 fe05 	bl	8018c1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8004012:	6823      	ldr	r3, [r4, #0]
 8004014:	4620      	mov	r0, r4
 8004016:	691b      	ldr	r3, [r3, #16]
 8004018:	4798      	blx	r3
    newTransition->invalidate();
 800401a:	6823      	ldr	r3, [r4, #0]
 800401c:	4620      	mov	r0, r4
 800401e:	695b      	ldr	r3, [r3, #20]
}
 8004020:	b001      	add	sp, #4
 8004022:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004026:	4718      	bx	r3
 8004028:	080299d0 	.word	0x080299d0
 800402c:	08029a5e 	.word	0x08029a5e
 8004030:	08029b34 	.word	0x08029b34
 8004034:	08029b89 	.word	0x08029b89
 8004038:	08029c2c 	.word	0x08029c2c
 800403c:	08029d44 	.word	0x08029d44
 8004040:	24025e68 	.word	0x24025e68
 8004044:	24025e64 	.word	0x24025e64

08004048 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004048:	4b04      	ldr	r3, [pc, #16]	@ (800405c <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004050:	b10a      	cbz	r2, 8004056 <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004052:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004054:	b900      	cbnz	r0, 8004058 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 8004056:	6898      	ldr	r0, [r3, #8]
    }
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	24025e20 	.word	0x24025e20

08004060 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004060:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004062:	4617      	mov	r7, r2
 8004064:	4604      	mov	r4, r0
 8004066:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 8004068:	f012 fe96 	bl	8016d98 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 800406c:	4b12      	ldr	r3, [pc, #72]	@ (80040b8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 800406e:	2500      	movs	r5, #0
        instance = this;
 8004070:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004072:	4629      	mov	r1, r5
      model(m)
 8004074:	4b11      	ldr	r3, [pc, #68]	@ (80040bc <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004076:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 8004078:	4b11      	ldr	r3, [pc, #68]	@ (80040c0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800407a:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 800407e:	4b11      	ldr	r3, [pc, #68]	@ (80040c4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004080:	6818      	ldr	r0, [r3, #0]
 8004082:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004086:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 8004088:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 800408c:	689b      	ldr	r3, [r3, #8]
      model(m)
 800408e:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004092:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004094:	4628      	mov	r0, r5
 8004096:	f000 f9bb 	bl	8004410 <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800409a:	f7ff ffd5 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 800409e:	f01b f9e4 	bl	801f46a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 80040a2:	f7ff ffd1 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80040a6:	f01b fa57 	bl	801f558 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 80040aa:	f7ff ffcd 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80040ae:	f01b fa5f 	bl	801f570 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 80040b2:	4620      	mov	r0, r4
 80040b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80040b6:	bf00      	nop
 80040b8:	24025e74 	.word	0x24025e74
 80040bc:	08029cf0 	.word	0x08029cf0
 80040c0:	08029cd8 	.word	0x08029cd8
 80040c4:	24025e20 	.word	0x24025e20

080040c8 <_ZN23FrontendApplicationBase31gotoUPIScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80040c8:	4b06      	ldr	r3, [pc, #24]	@ (80040e4 <_ZN23FrontendApplicationBase31gotoUPIScreenScreenNoTransitionEv+0x1c>)
 80040ca:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040ce:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040d2:	2300      	movs	r3, #0
 80040d4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040d8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040dc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040e0:	4770      	bx	lr
 80040e2:	bf00      	nop
 80040e4:	08003efd 	.word	0x08003efd

080040e8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80040e8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80040ea:	4770      	bx	lr

080040ec <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80040ec:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80040ee:	4770      	bx	lr

080040f0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80040f0:	4770      	bx	lr

080040f2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80040f2:	888b      	ldrh	r3, [r1, #4]
 80040f4:	69c0      	ldr	r0, [r0, #28]
 80040f6:	0adb      	lsrs	r3, r3, #11
 80040f8:	680a      	ldr	r2, [r1, #0]
 80040fa:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80040fe:	4410      	add	r0, r2
 8004100:	4770      	bx	lr

08004102 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 8004102:	b510      	push	{r4, lr}
 8004104:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 8004106:	b1ba      	cbz	r2, 8004138 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 8004108:	7b10      	ldrb	r0, [r2, #12]
 800410a:	b168      	cbz	r0, 8004128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 800410c:	7b53      	ldrb	r3, [r2, #13]
 800410e:	7ad2      	ldrb	r2, [r2, #11]
 8004110:	021b      	lsls	r3, r3, #8
 8004112:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 8004116:	431a      	orrs	r2, r3
 8004118:	6a23      	ldr	r3, [r4, #32]
 800411a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 800411e:	881a      	ldrh	r2, [r3, #0]
 8004120:	428a      	cmp	r2, r1
 8004122:	d102      	bne.n	800412a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004124:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004128:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800412a:	d805      	bhi.n	8004138 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800412c:	3801      	subs	r0, #1
 800412e:	3304      	adds	r3, #4
 8004130:	b280      	uxth	r0, r0
 8004132:	2800      	cmp	r0, #0
 8004134:	d1f3      	bne.n	800411e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004136:	e7f7      	b.n	8004128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004138:	2000      	movs	r0, #0
 800413a:	e7f5      	b.n	8004128 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800413c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800413c:	b510      	push	{r4, lr}
 800413e:	4604      	mov	r4, r0
 8004140:	212c      	movs	r1, #44	@ 0x2c
 8004142:	f021 ff67 	bl	8026014 <_ZdlPvj>
 8004146:	4620      	mov	r0, r4
 8004148:	bd10      	pop	{r4, pc}
	...

0800414c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800414c:	b530      	push	{r4, r5, lr}
 800414e:	b08b      	sub	sp, #44	@ 0x2c
 8004150:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004152:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8004156:	9508      	str	r5, [sp, #32]
 8004158:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800415c:	9507      	str	r5, [sp, #28]
 800415e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004162:	9506      	str	r5, [sp, #24]
 8004164:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004168:	9505      	str	r5, [sp, #20]
 800416a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800416e:	9504      	str	r5, [sp, #16]
 8004170:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004174:	9503      	str	r5, [sp, #12]
 8004176:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800417a:	9502      	str	r5, [sp, #8]
 800417c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004180:	9501      	str	r5, [sp, #4]
 8004182:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8004186:	9500      	str	r5, [sp, #0]
 8004188:	f014 f98a 	bl	80184a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800418c:	4b06      	ldr	r3, [pc, #24]	@ (80041a8 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800418e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004190:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8004192:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004194:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8004196:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004198:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800419a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800419c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800419e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80041a0:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 80041a2:	b00b      	add	sp, #44	@ 0x2c
 80041a4:	bd30      	pop	{r4, r5, pc}
 80041a6:	bf00      	nop
 80041a8:	08029d68 	.word	0x08029d68

080041ac <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 80041ac:	4770      	bx	lr

080041ae <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 80041ae:	4770      	bx	lr

080041b0 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 80041b0:	4770      	bx	lr

080041b2 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 80041b2:	4770      	bx	lr

080041b4 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 80041b4:	4770      	bx	lr

080041b6 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041b6:	4770      	bx	lr

080041b8 <_Z23getFont_verdana_10_4bppv>:
{
 80041b8:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041ba:	4d16      	ldr	r5, [pc, #88]	@ (8004214 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80041bc:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041be:	682c      	ldr	r4, [r5, #0]
 80041c0:	f3bf 8f5b 	dmb	ish
 80041c4:	f014 0401 	ands.w	r4, r4, #1
 80041c8:	d120      	bne.n	800420c <_Z23getFont_verdana_10_4bppv+0x54>
 80041ca:	4628      	mov	r0, r5
 80041cc:	f021 ff24 	bl	8026018 <__cxa_guard_acquire>
 80041d0:	b1e0      	cbz	r0, 800420c <_Z23getFont_verdana_10_4bppv+0x54>
 80041d2:	233f      	movs	r3, #63	@ 0x3f
 80041d4:	2201      	movs	r2, #1
 80041d6:	4910      	ldr	r1, [pc, #64]	@ (8004218 <_Z23getFont_verdana_10_4bppv+0x60>)
 80041d8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041da:	4b10      	ldr	r3, [pc, #64]	@ (800421c <_Z23getFont_verdana_10_4bppv+0x64>)
 80041dc:	4810      	ldr	r0, [pc, #64]	@ (8004220 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041de:	9308      	str	r3, [sp, #32]
 80041e0:	4b10      	ldr	r3, [pc, #64]	@ (8004224 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80041e2:	940a      	str	r4, [sp, #40]	@ 0x28
 80041e4:	9405      	str	r4, [sp, #20]
 80041e6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80041ea:	2304      	movs	r3, #4
 80041ec:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041f0:	230a      	movs	r3, #10
 80041f2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80041f6:	9300      	str	r3, [sp, #0]
 80041f8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041fc:	f7ff ffa6 	bl	800414c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004200:	4809      	ldr	r0, [pc, #36]	@ (8004228 <_Z23getFont_verdana_10_4bppv+0x70>)
 8004202:	f022 fa9b 	bl	802673c <atexit>
 8004206:	4628      	mov	r0, r5
 8004208:	f021 ff12 	bl	8026030 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 800420c:	4804      	ldr	r0, [pc, #16]	@ (8004220 <_Z23getFont_verdana_10_4bppv+0x68>)
 800420e:	b00f      	add	sp, #60	@ 0x3c
 8004210:	bd30      	pop	{r4, r5, pc}
 8004212:	bf00      	nop
 8004214:	2400bb38 	.word	0x2400bb38
 8004218:	0802de78 	.word	0x0802de78
 800421c:	0802e4e0 	.word	0x0802e4e0
 8004220:	2400bb3c 	.word	0x2400bb3c
 8004224:	0802e6c0 	.word	0x0802e6c0
 8004228:	080041b7 	.word	0x080041b7

0800422c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800422c:	4770      	bx	lr
	...

08004230 <_Z23getFont_verdana_20_4bppv>:
{
 8004230:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004232:	4d17      	ldr	r5, [pc, #92]	@ (8004290 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8004234:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004236:	682c      	ldr	r4, [r5, #0]
 8004238:	f3bf 8f5b 	dmb	ish
 800423c:	f014 0401 	ands.w	r4, r4, #1
 8004240:	d122      	bne.n	8004288 <_Z23getFont_verdana_20_4bppv+0x58>
 8004242:	4628      	mov	r0, r5
 8004244:	f021 fee8 	bl	8026018 <__cxa_guard_acquire>
 8004248:	b1f0      	cbz	r0, 8004288 <_Z23getFont_verdana_20_4bppv+0x58>
 800424a:	233f      	movs	r3, #63	@ 0x3f
 800424c:	226e      	movs	r2, #110	@ 0x6e
 800424e:	4911      	ldr	r1, [pc, #68]	@ (8004294 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004250:	9309      	str	r3, [sp, #36]	@ 0x24
 8004252:	4b11      	ldr	r3, [pc, #68]	@ (8004298 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004254:	4811      	ldr	r0, [pc, #68]	@ (800429c <_Z23getFont_verdana_20_4bppv+0x6c>)
 8004256:	9308      	str	r3, [sp, #32]
 8004258:	4b11      	ldr	r3, [pc, #68]	@ (80042a0 <_Z23getFont_verdana_20_4bppv+0x70>)
 800425a:	940a      	str	r4, [sp, #40]	@ 0x28
 800425c:	9307      	str	r3, [sp, #28]
 800425e:	2301      	movs	r3, #1
 8004260:	9401      	str	r4, [sp, #4]
 8004262:	9304      	str	r3, [sp, #16]
 8004264:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8004268:	2304      	movs	r3, #4
 800426a:	e9cd 4302 	strd	r4, r3, [sp, #8]
 800426e:	2314      	movs	r3, #20
 8004270:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004274:	9300      	str	r3, [sp, #0]
 8004276:	2318      	movs	r3, #24
 8004278:	f7ff ff68 	bl	800414c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 800427c:	4809      	ldr	r0, [pc, #36]	@ (80042a4 <_Z23getFont_verdana_20_4bppv+0x74>)
 800427e:	f022 fa5d 	bl	802673c <atexit>
 8004282:	4628      	mov	r0, r5
 8004284:	f021 fed4 	bl	8026030 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004288:	4804      	ldr	r0, [pc, #16]	@ (800429c <_Z23getFont_verdana_20_4bppv+0x6c>)
 800428a:	b00f      	add	sp, #60	@ 0x3c
 800428c:	bd30      	pop	{r4, r5, pc}
 800428e:	bf00      	nop
 8004290:	2400bb68 	.word	0x2400bb68
 8004294:	0802de88 	.word	0x0802de88
 8004298:	0802e4e4 	.word	0x0802e4e4
 800429c:	2400bb6c 	.word	0x2400bb6c
 80042a0:	0802e6c4 	.word	0x0802e6c4
 80042a4:	0800422d 	.word	0x0800422d

080042a8 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042a8:	4770      	bx	lr
	...

080042ac <_Z23getFont_verdana_40_4bppv>:
{
 80042ac:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042ae:	4d17      	ldr	r5, [pc, #92]	@ (800430c <_Z23getFont_verdana_40_4bppv+0x60>)
{
 80042b0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 6, 41, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 80042b2:	682c      	ldr	r4, [r5, #0]
 80042b4:	f3bf 8f5b 	dmb	ish
 80042b8:	f014 0401 	ands.w	r4, r4, #1
 80042bc:	d122      	bne.n	8004304 <_Z23getFont_verdana_40_4bppv+0x58>
 80042be:	4628      	mov	r0, r5
 80042c0:	f021 feaa 	bl	8026018 <__cxa_guard_acquire>
 80042c4:	b1f0      	cbz	r0, 8004304 <_Z23getFont_verdana_40_4bppv+0x58>
 80042c6:	233f      	movs	r3, #63	@ 0x3f
 80042c8:	2201      	movs	r2, #1
 80042ca:	4911      	ldr	r1, [pc, #68]	@ (8004310 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80042ce:	4b11      	ldr	r3, [pc, #68]	@ (8004314 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042d0:	4811      	ldr	r0, [pc, #68]	@ (8004318 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042d2:	9308      	str	r3, [sp, #32]
 80042d4:	4b11      	ldr	r3, [pc, #68]	@ (800431c <_Z23getFont_verdana_40_4bppv+0x70>)
 80042d6:	940a      	str	r4, [sp, #40]	@ 0x28
 80042d8:	9405      	str	r4, [sp, #20]
 80042da:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80042de:	2304      	movs	r3, #4
 80042e0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80042e4:	2328      	movs	r3, #40	@ 0x28
 80042e6:	2206      	movs	r2, #6
 80042e8:	9300      	str	r3, [sp, #0]
 80042ea:	2329      	movs	r3, #41	@ 0x29
 80042ec:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80042f0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042f4:	f7ff ff2a 	bl	800414c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042f8:	4809      	ldr	r0, [pc, #36]	@ (8004320 <_Z23getFont_verdana_40_4bppv+0x74>)
 80042fa:	f022 fa1f 	bl	802673c <atexit>
 80042fe:	4628      	mov	r0, r5
 8004300:	f021 fe96 	bl	8026030 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 8004304:	4804      	ldr	r0, [pc, #16]	@ (8004318 <_Z23getFont_verdana_40_4bppv+0x6c>)
 8004306:	b00f      	add	sp, #60	@ 0x3c
 8004308:	bd30      	pop	{r4, r5, pc}
 800430a:	bf00      	nop
 800430c:	2400bb98 	.word	0x2400bb98
 8004310:	0802e48c 	.word	0x0802e48c
 8004314:	0802e6bc 	.word	0x0802e6bc
 8004318:	2400bb9c 	.word	0x2400bb9c
 800431c:	0802e6d8 	.word	0x0802e6d8
 8004320:	080042a9 	.word	0x080042a9

08004324 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004324:	2000      	movs	r0, #0
 8004326:	4770      	bx	lr

08004328 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004328:	2000      	movs	r0, #0
 800432a:	4770      	bx	lr

0800432c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800432c:	b40e      	push	{r1, r2, r3}
 800432e:	b503      	push	{r0, r1, lr}
 8004330:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004332:	2100      	movs	r1, #0
{
 8004334:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004338:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800433a:	f013 fbb5 	bl	8017aa8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800433e:	b002      	add	sp, #8
 8004340:	f85d eb04 	ldr.w	lr, [sp], #4
 8004344:	b003      	add	sp, #12
 8004346:	4770      	bx	lr

08004348 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004348:	b40c      	push	{r2, r3}
 800434a:	b507      	push	{r0, r1, r2, lr}
 800434c:	ab04      	add	r3, sp, #16
 800434e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004352:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004354:	f013 fba8 	bl	8017aa8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004358:	b003      	add	sp, #12
 800435a:	f85d eb04 	ldr.w	lr, [sp], #4
 800435e:	b002      	add	sp, #8
 8004360:	4770      	bx	lr
	...

08004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004364:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004366:	b510      	push	{r4, lr}
 8004368:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800436a:	b373      	cbz	r3, 80043ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800436c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800436e:	b92b      	cbnz	r3, 800437c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004370:	4b18      	ldr	r3, [pc, #96]	@ (80043d4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004372:	21c5      	movs	r1, #197	@ 0xc5
 8004374:	4a18      	ldr	r2, [pc, #96]	@ (80043d8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004376:	4819      	ldr	r0, [pc, #100]	@ (80043dc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004378:	f022 f9c2 	bl	8026700 <__assert_func>
            return buffer[pos];
 800437c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800437e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004382:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004384:	b30b      	cbz	r3, 80043ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004386:	f015 f9a7 	bl	80196d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800438a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800438c:	2b01      	cmp	r3, #1
 800438e:	d803      	bhi.n	8004398 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004390:	4b13      	ldr	r3, [pc, #76]	@ (80043e0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004392:	21cb      	movs	r1, #203	@ 0xcb
 8004394:	4a13      	ldr	r2, [pc, #76]	@ (80043e4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004396:	e7ee      	b.n	8004376 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004398:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800439a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800439e:	1c53      	adds	r3, r2, #1
 80043a0:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 80043a2:	2b09      	cmp	r3, #9
 80043a4:	4619      	mov	r1, r3
 80043a6:	bf88      	it	hi
 80043a8:	f1a3 010a 	subhi.w	r1, r3, #10
 80043ac:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 80043b0:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 80043b2:	4281      	cmp	r1, r0
 80043b4:	d109      	bne.n	80043ca <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 80043b6:	2b0a      	cmp	r3, #10
 80043b8:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 80043bc:	bf28      	it	cs
 80043be:	2300      	movcs	r3, #0
            return buffer[pos];
 80043c0:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80043c2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043c6:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80043c8:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80043ca:	4620      	mov	r0, r4
}
 80043cc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80043d0:	f015 b884 	b.w	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 80043d4:	08029dc8 	.word	0x08029dc8
 80043d8:	08029dd1 	.word	0x08029dd1
 80043dc:	08029e7c 	.word	0x08029e7c
 80043e0:	08029ed4 	.word	0x08029ed4
 80043e4:	08029ee2 	.word	0x08029ee2

080043e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80043e8:	f015 b841 	b.w	801946e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>:
}

void touchgfx::LCD::drawString(touchgfx::Rect widgetArea, const touchgfx::Rect& invalidatedArea, const touchgfx::LCD::StringVisuals& stringVisuals, const touchgfx::Unicode::UnicodeChar* format, ...)
{
 80043ec:	b510      	push	{r4, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	ac02      	add	r4, sp, #8
 80043f2:	e884 0006 	stmia.w	r4, {r1, r2}
 80043f6:	461a      	mov	r2, r3
    va_list pArg;
    va_start(pArg, format);
 80043f8:	ab0a      	add	r3, sp, #40	@ 0x28
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80043fa:	4621      	mov	r1, r4
    va_start(pArg, format);
 80043fc:	9305      	str	r3, [sp, #20]
    drawStringLTR(widgetArea, invalidatedArea, stringVisuals, format, pArg);
 80043fe:	9301      	str	r3, [sp, #4]
 8004400:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004402:	9300      	str	r3, [sp, #0]
 8004404:	9b08      	ldr	r3, [sp, #32]
 8004406:	f011 ffa5 	bl	8016354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>
    va_end(pArg);
}
 800440a:	b006      	add	sp, #24
 800440c:	bd10      	pop	{r4, pc}
	...

08004410 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 8004410:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 8004412:	bb18      	cbnz	r0, 800445c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 8004414:	4b12      	ldr	r3, [pc, #72]	@ (8004460 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 8004416:	4813      	ldr	r0, [pc, #76]	@ (8004464 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 8004418:	681c      	ldr	r4, [r3, #0]
 800441a:	4913      	ldr	r1, [pc, #76]	@ (8004468 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 800441c:	b1b4      	cbz	r4, 800444c <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 800441e:	6822      	ldr	r2, [r4, #0]
 8004420:	4422      	add	r2, r4
 8004422:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 8004424:	6862      	ldr	r2, [r4, #4]
 8004426:	4422      	add	r2, r4
 8004428:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 800442a:	68a2      	ldr	r2, [r4, #8]
 800442c:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 800442e:	4b0f      	ldr	r3, [pc, #60]	@ (800446c <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 8004430:	2200      	movs	r2, #0
 8004432:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 8004434:	f000 f838 	bl	80044a8 <_ZN17TypedTextDatabase8getFontsEv>
 8004438:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 800443a:	f000 f833 	bl	80044a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 800443e:	4b0c      	ldr	r3, [pc, #48]	@ (8004470 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 8004440:	601c      	str	r4, [r3, #0]
        fonts = f;
 8004442:	4b0c      	ldr	r3, [pc, #48]	@ (8004474 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004444:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004446:	4b0c      	ldr	r3, [pc, #48]	@ (8004478 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004448:	8018      	strh	r0, [r3, #0]
    }
}
 800444a:	e007      	b.n	800445c <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 800444c:	4b0b      	ldr	r3, [pc, #44]	@ (800447c <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800444e:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004450:	4b0b      	ldr	r3, [pc, #44]	@ (8004480 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004452:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004454:	4b0b      	ldr	r3, [pc, #44]	@ (8004484 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004456:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004458:	2c00      	cmp	r4, #0
 800445a:	d1e8      	bne.n	800442e <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 800445c:	bd38      	pop	{r3, r4, r5, pc}
 800445e:	bf00      	nop
 8004460:	2400bbd4 	.word	0x2400bbd4
 8004464:	2400bbcc 	.word	0x2400bbcc
 8004468:	2400bbc8 	.word	0x2400bbc8
 800446c:	2400bbd0 	.word	0x2400bbd0
 8004470:	24025e78 	.word	0x24025e78
 8004474:	24025e80 	.word	0x24025e80
 8004478:	24025e7c 	.word	0x24025e7c
 800447c:	904d1d84 	.word	0x904d1d84
 8004480:	904d1d54 	.word	0x904d1d54
 8004484:	904d1dfc 	.word	0x904d1dfc

08004488 <_ZNK8touchgfx5Texts7getTextEt>:
    languagesArray[id] = (const TranslationHeader*)translation;
}

const touchgfx::Unicode::UnicodeChar* touchgfx::Texts::getText(TypedTextId id) const
{
    return &currentLanguagePtr[currentLanguageIndices[id]];
 8004488:	4b04      	ldr	r3, [pc, #16]	@ (800449c <_ZNK8touchgfx5Texts7getTextEt+0x14>)
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8004490:	4b03      	ldr	r3, [pc, #12]	@ (80044a0 <_ZNK8touchgfx5Texts7getTextEt+0x18>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	eb03 0040 	add.w	r0, r3, r0, lsl #1
 8004498:	4770      	bx	lr
 800449a:	bf00      	nop
 800449c:	2400bbc8 	.word	0x2400bbc8
 80044a0:	2400bbcc 	.word	0x2400bbcc

080044a4 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 80044a4:	200c      	movs	r0, #12
 80044a6:	4770      	bx	lr

080044a8 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 80044a8:	4800      	ldr	r0, [pc, #0]	@ (80044ac <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 80044aa:	4770      	bx	lr
 80044ac:	2400bbd8 	.word	0x2400bbd8

080044b0 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 80044b0:	b510      	push	{r4, lr}
};
 80044b2:	4c05      	ldr	r4, [pc, #20]	@ (80044c8 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 80044b4:	f7ff febc 	bl	8004230 <_Z23getFont_verdana_20_4bppv>
};
 80044b8:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 80044ba:	f7ff fef7 	bl	80042ac <_Z23getFont_verdana_40_4bppv>
};
 80044be:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 80044c0:	f7ff fe7a 	bl	80041b8 <_Z23getFont_verdana_10_4bppv>
};
 80044c4:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 80044c6:	bd10      	pop	{r4, pc}
 80044c8:	2400bbd8 	.word	0x2400bbd8

080044cc <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80044cc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80044ce:	4770      	bx	lr

080044d0 <_ZN8touchgfx8TextArea8setWidthEs>:
    TextArea()
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
    {
    }

    virtual void setWidth(int16_t width)
 80044d0:	b530      	push	{r4, r5, lr}
 80044d2:	b085      	sub	sp, #20
    {
        Widget::setWidth(width);
        boundingArea = calculateBoundingArea();
 80044d4:	6803      	ldr	r3, [r0, #0]
    virtual void setWidth(int16_t width)
 80044d6:	4604      	mov	r4, r0
        rect.width = width;
 80044d8:	8101      	strh	r1, [r0, #8]
        boundingArea = calculateBoundingArea();
 80044da:	466d      	mov	r5, sp
 80044dc:	4601      	mov	r1, r0
 80044de:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80044e2:	343c      	adds	r4, #60	@ 0x3c
 80044e4:	4628      	mov	r0, r5
 80044e6:	4798      	blx	r3
 80044e8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80044ec:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 80044f0:	b005      	add	sp, #20
 80044f2:	bd30      	pop	{r4, r5, pc}

080044f4 <_ZN8touchgfx8TextArea9setHeightEs>:

    virtual void setHeight(int16_t height)
 80044f4:	b530      	push	{r4, r5, lr}
 80044f6:	b085      	sub	sp, #20
    {
        Widget::setHeight(height);
        boundingArea = calculateBoundingArea();
 80044f8:	6803      	ldr	r3, [r0, #0]
    virtual void setHeight(int16_t height)
 80044fa:	4604      	mov	r4, r0
        rect.height = height;
 80044fc:	8141      	strh	r1, [r0, #10]
        boundingArea = calculateBoundingArea();
 80044fe:	466d      	mov	r5, sp
 8004500:	4601      	mov	r1, r0
 8004502:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004506:	343c      	adds	r4, #60	@ 0x3c
 8004508:	4628      	mov	r0, r5
 800450a:	4798      	blx	r3
 800450c:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8004510:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    }
 8004514:	b005      	add	sp, #20
 8004516:	bd30      	pop	{r4, r5, pc}

08004518 <_ZNK8touchgfx8TextArea12getSolidRectEv>:
 8004518:	2200      	movs	r2, #0
 800451a:	8002      	strh	r2, [r0, #0]
 800451c:	8042      	strh	r2, [r0, #2]
 800451e:	8082      	strh	r2, [r0, #4]
 8004520:	80c2      	strh	r2, [r0, #6]

    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 8004522:	4770      	bx	lr

08004524 <_ZN8touchgfx8TextArea8setAlphaEh>:
    /**
     * @copydoc Image::setAlpha
     */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004524:	f880 1036 	strb.w	r1, [r0, #54]	@ 0x36
    }
 8004528:	4770      	bx	lr

0800452a <_ZN8touchgfx8TextArea13setXBaselineYEss>:
     *
     * @note setTypedText() must be called prior to setting the baseline.
     */
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
    {
        setX(x);
 800452a:	6803      	ldr	r3, [r0, #0]
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 800452c:	b570      	push	{r4, r5, r6, lr}
 800452e:	4604      	mov	r4, r0
        setX(x);
 8004530:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    virtual void setXBaselineY(int16_t x, int16_t baselineY)
 8004532:	4615      	mov	r5, r2
        setX(x);
 8004534:	4798      	blx	r3
        setBaselineY(baselineY);
 8004536:	6823      	ldr	r3, [r4, #0]
 8004538:	4620      	mov	r0, r4
 800453a:	4629      	mov	r1, r5
 800453c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
    }
 800453e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setBaselineY(baselineY);
 8004542:	4718      	bx	r3

08004544 <_ZNK8touchgfx8TextArea12getWildcard2Ev>:
     * @see TextAreaWithOneWildcard, TextAreaWithTwoWildcards
     */
    virtual const Unicode::UnicodeChar* getWildcard2() const
    {
        return 0;
    }
 8004544:	2000      	movs	r0, #0
 8004546:	4770      	bx	lr

08004548 <_ZNK8touchgfx23TextAreaWithOneWildcard12getWildcard1Ev>:
    }

    virtual const Unicode::UnicodeChar* getWildcard1() const
    {
        return wc1;
    }
 8004548:	6c80      	ldr	r0, [r0, #72]	@ 0x48
 800454a:	4770      	bx	lr

0800454c <_ZN17UPIScreenViewBase10UpiClickedEv>:
     * Virtual Action Handlers
     */
    virtual void UpiClicked()
    {
        // Override and implement this function in UPIScreen
    }
 800454c:	4770      	bx	lr

0800454e <_ZN17UPIScreenViewBase13AmountClickedEv>:
    virtual void AmountClicked()
    {
        // Override and implement this function in UPIScreen
    }
 800454e:	4770      	bx	lr

08004550 <_ZN17UPIScreenViewBase15GenerateClickedEv>:
    virtual void GenerateClicked()
    {
        // Override and implement this function in UPIScreen
    }
 8004550:	4770      	bx	lr

08004552 <_ZN17UPIScreenViewBase9OkClickedEv>:
    virtual void OkClicked()
    {
        // Override and implement this function in UPIScreen
    }
 8004552:	4770      	bx	lr

08004554 <_ZN17UPIScreenViewBase11ExitClickedEv>:
    virtual void ExitClicked()
    {
        // Override and implement this function in UPIScreen
    }
 8004554:	4770      	bx	lr

08004556 <_ZN17UPIScreenViewBaseD1Ev>:
}

UPIScreenViewBase::~UPIScreenViewBase()
{

}
 8004556:	4770      	bx	lr

08004558 <_ZN17UPIScreenViewBase11setupScreenEv>:

void UPIScreenViewBase::setupScreen()
{

}
 8004558:	4770      	bx	lr

0800455a <_ZN17UPIScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE>:

void UPIScreenViewBase::flexButtonCallbackHandler(const touchgfx::AbstractButtonContainer& src)
{
    if (&src == &UPIFlexButton)
 800455a:	f500 63b6 	add.w	r3, r0, #1456	@ 0x5b0
 800455e:	4299      	cmp	r1, r3
{
 8004560:	b570      	push	{r4, r5, r6, lr}
 8004562:	4604      	mov	r4, r0
 8004564:	460d      	mov	r5, r1
    if (&src == &UPIFlexButton)
 8004566:	d102      	bne.n	800456e <_ZN17UPIScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x14>
    {
        //Interaction1
        //When UPIFlexButton clicked call virtual function
        //Call UpiClicked
        UpiClicked();
 8004568:	6803      	ldr	r3, [r0, #0]
 800456a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800456c:	4798      	blx	r3
    }
    if (&src == &AmountFlexButton)
 800456e:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8004572:	429d      	cmp	r5, r3
 8004574:	d103      	bne.n	800457e <_ZN17UPIScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x24>
    {
        //Interaction2
        //When AmountFlexButton clicked call virtual function
        //Call AmountClicked
        AmountClicked();
 8004576:	6823      	ldr	r3, [r4, #0]
 8004578:	4620      	mov	r0, r4
 800457a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800457c:	4798      	blx	r3
    }
    if (&src == &flexButtonOK)
 800457e:	f504 63dd 	add.w	r3, r4, #1768	@ 0x6e8
 8004582:	429d      	cmp	r5, r3
 8004584:	d103      	bne.n	800458e <_ZN17UPIScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x34>
    {
        //Interaction4
        //When flexButtonOK clicked call virtual function
        //Call OkClicked
        OkClicked();
 8004586:	6823      	ldr	r3, [r4, #0]
 8004588:	4620      	mov	r0, r4
 800458a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800458c:	4798      	blx	r3
    }
    if (&src == &flexButtonExit)
 800458e:	f504 63f6 	add.w	r3, r4, #1968	@ 0x7b0
 8004592:	429d      	cmp	r5, r3
 8004594:	d105      	bne.n	80045a2 <_ZN17UPIScreenViewBase25flexButtonCallbackHandlerERKN8touchgfx23AbstractButtonContainerE+0x48>
    {
        //Interaction5
        //When flexButtonExit clicked call virtual function
        //Call ExitClicked
        ExitClicked();
 8004596:	6823      	ldr	r3, [r4, #0]
 8004598:	4620      	mov	r0, r4
 800459a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
}
 800459c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        ExitClicked();
 80045a0:	4718      	bx	r3
}
 80045a2:	bd70      	pop	{r4, r5, r6, pc}

080045a4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED1Ev>:
 * @tparam T Generic type parameter. Typically a AbstractButtonContainer subclass.
 *
 * @see AbstractButtonContainer, BoxWithBorder
 */
template <class T>
class BoxWithBorderButtonStyle : public T
 80045a4:	4770      	bx	lr

080045a6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>:
     *
     * @see setPressed
     */
    bool getPressed() const
    {
        return pressed;
 80045a6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
    colortype borderDown;    ///< The border down

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
    {
        borderBox.setColor(T::getPressed() ? down : up);
 80045aa:	b14b      	cbz	r3, 80045c0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x1a>
 80045ac:	f100 026c 	add.w	r2, r0, #108	@ 0x6c
 80045b0:	6812      	ldr	r2, [r2, #0]
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80045b2:	65c2      	str	r2, [r0, #92]	@ 0x5c
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80045b4:	b13b      	cbz	r3, 80045c6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x20>
 80045b6:	f100 0374 	add.w	r3, r0, #116	@ 0x74
 80045ba:	681b      	ldr	r3, [r3, #0]
     *
     * @see setColor, getBorderColor, Color::getColorFromRGB
     */
    void setBorderColor(colortype colorBorder)
    {
        borderColor = colorBorder;
 80045bc:	6603      	str	r3, [r0, #96]	@ 0x60
        T::handlePressedUpdated();
    }
 80045be:	4770      	bx	lr
        borderBox.setColor(T::getPressed() ? down : up);
 80045c0:	f100 0268 	add.w	r2, r0, #104	@ 0x68
 80045c4:	e7f4      	b.n	80045b0 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0xa>
        borderBox.setBorderColor(T::getPressed() ? borderDown : borderUp);
 80045c6:	f100 0370 	add.w	r3, r0, #112	@ 0x70
 80045ca:	e7f6      	b.n	80045ba <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv+0x14>

080045cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>:
    TextArea text;           ///< The text
    colortype colorReleased; ///< The color released
    colortype colorPressed;  ///< The color pressed

    /** @copydoc AbstractButtonContainer::handlePressedUpdated() */
    virtual void handlePressedUpdated()
 80045cc:	b508      	push	{r3, lr}
    {
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80045ce:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80045d2:	b13b      	cbz	r3, 80045e4 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0x18>
 80045d4:	f100 03c4 	add.w	r3, r0, #196	@ 0xc4
 80045d8:	681b      	ldr	r3, [r3, #0]
        color = newColor;
 80045da:	f8c0 30a8 	str.w	r3, [r0, #168]	@ 0xa8
        T::handlePressedUpdated();
 80045de:	f7ff ffe2 	bl	80045a6 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE20handlePressedUpdatedEv>
    }
 80045e2:	bd08      	pop	{r3, pc}
        text.setColor(T::getPressed() ? colorPressed : colorReleased);
 80045e4:	f100 03c0 	add.w	r3, r0, #192	@ 0xc0
 80045e8:	e7f6      	b.n	80045d8 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv+0xc>

080045ea <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 80045ea:	4770      	bx	lr

080045ec <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvED1Ev>:
 80045ec:	4770      	bx	lr

080045ee <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED1Ev>:
class TextButtonStyle : public T
 80045ee:	4770      	bx	lr

080045f0 <_ZN8touchgfx23TextAreaWithOneWildcardD1Ev>:
class TextAreaWithOneWildcard : public TextAreaWithWildcardBase
 80045f0:	4770      	bx	lr

080045f2 <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvE7executeES4_>:
    virtual void execute(T1 t1)
 80045f2:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 80045f4:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 80045f6:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 80045f8:	68c2      	ldr	r2, [r0, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	1055      	asrs	r5, r2, #1
 80045fe:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004602:	07d2      	lsls	r2, r2, #31
 8004604:	bf48      	it	mi
 8004606:	5962      	ldrmi	r2, [r4, r5]
    }
 8004608:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800460a:	bf48      	it	mi
 800460c:	58d3      	ldrmi	r3, [r2, r3]
 800460e:	4718      	bx	r3

08004610 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv>:
    virtual bool isValid() const
 8004610:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004612:	6840      	ldr	r0, [r0, #4]
 8004614:	b130      	cbz	r0, 8004624 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x14>
 8004616:	689a      	ldr	r2, [r3, #8]
 8004618:	b91a      	cbnz	r2, 8004622 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvE7isValidEv+0x12>
 800461a:	68d8      	ldr	r0, [r3, #12]
 800461c:	f000 0001 	and.w	r0, r0, #1
 8004620:	4770      	bx	lr
 8004622:	2001      	movs	r0, #1
    }
 8004624:	4770      	bx	lr

08004626 <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvE7executeES4_>:
    virtual void execute(T1 t1)
 8004626:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 8004628:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800462a:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800462c:	68c2      	ldr	r2, [r0, #12]
 800462e:	689b      	ldr	r3, [r3, #8]
 8004630:	1055      	asrs	r5, r2, #1
 8004632:	eb04 0062 	add.w	r0, r4, r2, asr #1
 8004636:	07d2      	lsls	r2, r2, #31
 8004638:	bf48      	it	mi
 800463a:	5962      	ldrmi	r2, [r4, r5]
    }
 800463c:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 800463e:	bf48      	it	mi
 8004640:	58d3      	ldrmi	r3, [r2, r3]
 8004642:	4718      	bx	r3

08004644 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv>:
    virtual bool isValid() const
 8004644:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 8004646:	6840      	ldr	r0, [r0, #4]
 8004648:	b130      	cbz	r0, 8004658 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x14>
 800464a:	689a      	ldr	r2, [r3, #8]
 800464c:	b91a      	cbnz	r2, 8004656 <_ZNK8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvE7isValidEv+0x12>
 800464e:	68d8      	ldr	r0, [r3, #12]
 8004650:	f000 0001 	and.w	r0, r0, #1
 8004654:	4770      	bx	lr
 8004656:	2001      	movs	r0, #1
    }
 8004658:	4770      	bx	lr

0800465a <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE18handleAlphaUpdatedEv>:
    }

    /** @copydoc Image::getAlpha() */
    uint8_t getAlpha() const
    {
        return alpha;
 800465a:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
        alpha = newAlpha;
 800465e:	f880 30ae 	strb.w	r3, [r0, #174]	@ 0xae
    /**
     * @copydoc Image::setAlpha
     */
    void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8004662:	f880 305a 	strb.w	r3, [r0, #90]	@ 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        text.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004666:	4770      	bx	lr

08004668 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE18handleAlphaUpdatedEv>:
 8004668:	f890 302d 	ldrb.w	r3, [r0, #45]	@ 0x2d
 800466c:	f880 305a 	strb.w	r3, [r0, #90]	@ 0x5a
    /** @copydoc AbstractButtonContainer::handleAlphaUpdated() */
    virtual void handleAlphaUpdated()
    {
        borderBox.setAlpha(T::getAlpha());
        T::handleAlphaUpdated();
    }
 8004670:	4770      	bx	lr

08004672 <_ZN8touchgfx23TextAreaWithOneWildcardD0Ev>:
 8004672:	b510      	push	{r4, lr}
 8004674:	4604      	mov	r4, r0
 8004676:	214c      	movs	r1, #76	@ 0x4c
 8004678:	f021 fccc 	bl	8026014 <_ZdlPvj>
 800467c:	4620      	mov	r0, r4
 800467e:	bd10      	pop	{r4, pc}

08004680 <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_23AbstractButtonContainerEvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8004680:	b510      	push	{r4, lr}
 8004682:	4604      	mov	r4, r0
 8004684:	2110      	movs	r1, #16
 8004686:	f021 fcc5 	bl	8026014 <_ZdlPvj>
 800468a:	4620      	mov	r0, r4
 800468c:	bd10      	pop	{r4, pc}

0800468e <_ZN8touchgfx8CallbackI17UPIScreenViewBaseRKNS_14AbstractButtonEvvED0Ev>:
 800468e:	b510      	push	{r4, lr}
 8004690:	4604      	mov	r4, r0
 8004692:	2110      	movs	r1, #16
 8004694:	f021 fcbe 	bl	8026014 <_ZdlPvj>
 8004698:	4620      	mov	r0, r4
 800469a:	bd10      	pop	{r4, pc}

0800469c <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEED0Ev>:
class BoxWithBorderButtonStyle : public T
 800469c:	b510      	push	{r4, lr}
 800469e:	4604      	mov	r4, r0
 80046a0:	2178      	movs	r1, #120	@ 0x78
 80046a2:	f021 fcb7 	bl	8026014 <_ZdlPvj>
 80046a6:	4620      	mov	r0, r4
 80046a8:	bd10      	pop	{r4, pc}

080046aa <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEED0Ev>:
class TextButtonStyle : public T
 80046aa:	b510      	push	{r4, lr}
 80046ac:	4604      	mov	r4, r0
 80046ae:	21c8      	movs	r1, #200	@ 0xc8
 80046b0:	f021 fcb0 	bl	8026014 <_ZdlPvj>
 80046b4:	4620      	mov	r0, r4
 80046b6:	bd10      	pop	{r4, pc}

080046b8 <_ZN17UPIScreenViewBaseD0Ev>:
UPIScreenViewBase::~UPIScreenViewBase()
 80046b8:	b510      	push	{r4, lr}
 80046ba:	4604      	mov	r4, r0
}
 80046bc:	f44f 610f 	mov.w	r1, #2288	@ 0x8f0
 80046c0:	f021 fca8 	bl	8026014 <_ZdlPvj>
 80046c4:	4620      	mov	r0, r4
 80046c6:	bd10      	pop	{r4, pc}

080046c8 <_ZNK8touchgfx24TextAreaWithWildcardBase17invalidateContentEv>:
    virtual void invalidateContent() const
 80046c8:	b508      	push	{r3, lr}
        Widget::invalidateContent();
 80046ca:	f7ff f8a0 	bl	800380e <_ZNK8touchgfx8Drawable17invalidateContentEv>
    }
 80046ce:	bd08      	pop	{r3, pc}

080046d0 <_ZN8touchgfx23AbstractButtonContainer13executeActionEv>:
    /**
     * Executes the previously set action.
     *
     * @see setAction
     */
    virtual void executeAction()
 80046d0:	b510      	push	{r4, lr}
 80046d2:	4604      	mov	r4, r0
    {
        if (action && action->isValid())
 80046d4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 80046d6:	b150      	cbz	r0, 80046ee <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
 80046d8:	6803      	ldr	r3, [r0, #0]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	4798      	blx	r3
 80046de:	b130      	cbz	r0, 80046ee <_ZN8touchgfx23AbstractButtonContainer13executeActionEv+0x1e>
        {
            action->execute(*this);
 80046e0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80046e2:	4621      	mov	r1, r4
 80046e4:	6803      	ldr	r3, [r0, #0]
        }
    }
 80046e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
            action->execute(*this);
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	4718      	bx	r3
    }
 80046ee:	bd10      	pop	{r4, pc}

080046f0 <_ZN17UPIScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE>:

void UPIScreenViewBase::buttonCallbackHandler(const touchgfx::AbstractButton& src)
{
    if (&src == &GenerateButton)
 80046f0:	f500 62d4 	add.w	r2, r0, #1696	@ 0x6a0
 80046f4:	428a      	cmp	r2, r1
 80046f6:	d102      	bne.n	80046fe <_ZN17UPIScreenViewBase21buttonCallbackHandlerERKN8touchgfx14AbstractButtonE+0xe>
    {
        //Interaction3
        //When GenerateButton clicked call virtual function
        //Call GenerateClicked
        GenerateClicked();
 80046f8:	6803      	ldr	r3, [r0, #0]
 80046fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046fc:	4718      	bx	r3
    }
}
 80046fe:	4770      	bx	lr

08004700 <_ZN8touchgfx8TextArea12setBaselineYEs>:
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004700:	6803      	ldr	r3, [r0, #0]
    virtual void setBaselineY(int16_t baselineY)
 8004702:	b570      	push	{r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 8004704:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
    virtual void setBaselineY(int16_t baselineY)
 8004706:	4604      	mov	r4, r0
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004708:	4b11      	ldr	r3, [pc, #68]	@ (8004750 <_ZN8touchgfx8TextArea12setBaselineYEs+0x50>)
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800470a:	b28d      	uxth	r5, r1
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	b92b      	cbnz	r3, 800471c <_ZN8touchgfx8TextArea12setBaselineYEs+0x1c>
 8004710:	4b10      	ldr	r3, [pc, #64]	@ (8004754 <_ZN8touchgfx8TextArea12setBaselineYEs+0x54>)
 8004712:	216c      	movs	r1, #108	@ 0x6c
 8004714:	4a10      	ldr	r2, [pc, #64]	@ (8004758 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004716:	4811      	ldr	r0, [pc, #68]	@ (800475c <_ZN8touchgfx8TextArea12setBaselineYEs+0x5c>)
 8004718:	f021 fff2 	bl	8026700 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 800471c:	4910      	ldr	r1, [pc, #64]	@ (8004760 <_ZN8touchgfx8TextArea12setBaselineYEs+0x60>)
 800471e:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004720:	8809      	ldrh	r1, [r1, #0]
 8004722:	4291      	cmp	r1, r2
 8004724:	d803      	bhi.n	800472e <_ZN8touchgfx8TextArea12setBaselineYEs+0x2e>
 8004726:	4b0f      	ldr	r3, [pc, #60]	@ (8004764 <_ZN8touchgfx8TextArea12setBaselineYEs+0x64>)
 8004728:	216d      	movs	r1, #109	@ 0x6d
 800472a:	4a0b      	ldr	r2, [pc, #44]	@ (8004758 <_ZN8touchgfx8TextArea12setBaselineYEs+0x58>)
 800472c:	e7f3      	b.n	8004716 <_ZN8touchgfx8TextArea12setBaselineYEs+0x16>
        return fonts[typedTexts[typedTextId].fontIdx];
 800472e:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 8004732:	4b0d      	ldr	r3, [pc, #52]	@ (8004768 <_ZN8touchgfx8TextArea12setBaselineYEs+0x68>)
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 800473a:	6803      	ldr	r3, [r0, #0]
 800473c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800473e:	4798      	blx	r3
 8004740:	1a29      	subs	r1, r5, r0
 8004742:	4633      	mov	r3, r6
 8004744:	4620      	mov	r0, r4
 8004746:	b209      	sxth	r1, r1
    }
 8004748:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(baselineY - getTypedText().getFont()->getBaseline());
 800474c:	4718      	bx	r3
 800474e:	bf00      	nop
 8004750:	24025e78 	.word	0x24025e78
 8004754:	08029fb4 	.word	0x08029fb4
 8004758:	08029ff6 	.word	0x08029ff6
 800475c:	0802a031 	.word	0x0802a031
 8004760:	24025e7c 	.word	0x24025e7c
 8004764:	0802a086 	.word	0x0802a086
 8004768:	24025e80 	.word	0x24025e80

0800476c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE>:
     *
     * @return The click type of this event.
     */
    ClickEventType getType() const
    {
        return clickEventType;
 800476c:	790b      	ldrb	r3, [r1, #4]
     *
     * @param  event The click event.
     *
     * @see setAction, setPressed, getPressed
     */
    virtual void handleClickEvent(const ClickEvent& event)
 800476e:	b570      	push	{r4, r5, r6, lr}
 8004770:	4604      	mov	r4, r0
 8004772:	460d      	mov	r5, r1
        return pressed;
 8004774:	f890 602c 	ldrb.w	r6, [r0, #44]	@ 0x2c
    {
        bool wasPressed = getPressed();
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 8004778:	b90b      	cbnz	r3, 800477e <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x12>
 800477a:	b116      	cbz	r6, 8004782 <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x16>
        }
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
        {
            executeAction();
        }
    }
 800477c:	bd70      	pop	{r4, r5, r6, pc}
        if ((newPressedValue && !wasPressed) || (!newPressedValue && wasPressed))
 800477e:	2e00      	cmp	r6, #0
 8004780:	d0fc      	beq.n	800477c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
        bool newPressedValue = (event.getType() == ClickEvent::PRESSED);
 8004782:	fab3 f383 	clz	r3, r3
        handlePressedUpdated();
 8004786:	4620      	mov	r0, r4
 8004788:	095b      	lsrs	r3, r3, #5
 800478a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
 800478e:	6823      	ldr	r3, [r4, #0]
 8004790:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8004794:	4798      	blx	r3
            invalidate();
 8004796:	6823      	ldr	r3, [r4, #0]
 8004798:	4620      	mov	r0, r4
 800479a:	695b      	ldr	r3, [r3, #20]
 800479c:	4798      	blx	r3
        if (wasPressed && (event.getType() == ClickEvent::RELEASED))
 800479e:	2e00      	cmp	r6, #0
 80047a0:	d0ec      	beq.n	800477c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
 80047a2:	792b      	ldrb	r3, [r5, #4]
 80047a4:	2b01      	cmp	r3, #1
 80047a6:	d1e9      	bne.n	800477c <_ZN8touchgfx18ClickButtonTrigger16handleClickEventERKNS_10ClickEventE+0x10>
            executeAction();
 80047a8:	6823      	ldr	r3, [r4, #0]
 80047aa:	4620      	mov	r0, r4
 80047ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
    }
 80047b0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
            executeAction();
 80047b4:	4718      	bx	r3

080047b6 <_ZNK8touchgfx24TextAreaWithWildcardBase21calculateBoundingAreaEv>:

        /**
         * Initializes a new instance of the BoundingArea class which is invalid by default.
         */
        BoundingArea()
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80047b6:	2200      	movs	r2, #0
 80047b8:	f04f 31ff 	mov.w	r1, #4294967295
              text(0)
 80047bc:	6082      	str	r2, [r0, #8]
            : rect(Rect(0, 0, -1, -1)), // Negative width and height means invalid rectangle
 80047be:	e9c0 2100 	strd	r2, r1, [r0]
    }
 80047c2:	4770      	bx	lr

080047c4 <_ZN8touchgfx8Drawable5setXYEss>:
        setX(x);
 80047c4:	6803      	ldr	r3, [r0, #0]
    void setXY(int16_t x, int16_t y)
 80047c6:	b570      	push	{r4, r5, r6, lr}
 80047c8:	4604      	mov	r4, r0
        setX(x);
 80047ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
    void setXY(int16_t x, int16_t y)
 80047cc:	4615      	mov	r5, r2
        setX(x);
 80047ce:	4798      	blx	r3
        setY(y);
 80047d0:	6823      	ldr	r3, [r4, #0]
 80047d2:	4620      	mov	r0, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
    }
 80047d8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setY(y);
 80047dc:	4718      	bx	r3

080047de <_ZN8touchgfx8Drawable14setWidthHeightEss>:
        setWidth(width);
 80047de:	6803      	ldr	r3, [r0, #0]
    void setWidthHeight(int16_t width, int16_t height)
 80047e0:	b570      	push	{r4, r5, r6, lr}
 80047e2:	4604      	mov	r4, r0
        setWidth(width);
 80047e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
    void setWidthHeight(int16_t width, int16_t height)
 80047e6:	4615      	mov	r5, r2
        setWidth(width);
 80047e8:	4798      	blx	r3
        setHeight(height);
 80047ea:	6823      	ldr	r3, [r4, #0]
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    }
 80047f2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
        setHeight(height);
 80047f6:	4718      	bx	r3

080047f8 <_ZN8touchgfx8Drawable11setPositionEssss>:
    void setPosition(int16_t x, int16_t y, int16_t width, int16_t height)
 80047f8:	b538      	push	{r3, r4, r5, lr}
 80047fa:	4604      	mov	r4, r0
 80047fc:	461d      	mov	r5, r3
        setXY(x, y);
 80047fe:	f7ff ffe1 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
        setWidthHeight(width, height);
 8004802:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8004806:	4629      	mov	r1, r5
 8004808:	4620      	mov	r0, r4
 800480a:	f7ff ffe8 	bl	80047de <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 800480e:	bd38      	pop	{r3, r4, r5, pc}

08004810 <_ZN8touchgfx6WidgetC1Ev>:
 8004810:	2200      	movs	r2, #0
 8004812:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8004816:	e9c0 2203 	strd	r2, r2, [r0, #12]
          nextSibling(0),
 800481a:	e9c0 2205 	strd	r2, r2, [r0, #20]
          cachedAbsX(0),
 800481e:	e9c0 2207 	strd	r2, r2, [r0, #28]
          touchable(false),
 8004822:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004826:	8482      	strh	r2, [r0, #36]	@ 0x24
class Widget : public Drawable
 8004828:	4a01      	ldr	r2, [pc, #4]	@ (8004830 <_ZN8touchgfx6WidgetC1Ev+0x20>)
 800482a:	6002      	str	r2, [r0, #0]
 800482c:	4770      	bx	lr
 800482e:	bf00      	nop
 8004830:	0802a130 	.word	0x0802a130

08004834 <_ZN8touchgfx3BoxC1Ev>:
    Box()
 8004834:	b510      	push	{r4, lr}
 8004836:	4604      	mov	r4, r0
        : Widget(), alpha(255), color(0)
 8004838:	2226      	movs	r2, #38	@ 0x26
 800483a:	2100      	movs	r1, #0
 800483c:	f022 fa36 	bl	8026cac <memset>
 8004840:	4620      	mov	r0, r4
 8004842:	f7ff ffe5 	bl	8004810 <_ZN8touchgfx6WidgetC1Ev>
 8004846:	4b04      	ldr	r3, [pc, #16]	@ (8004858 <_ZN8touchgfx3BoxC1Ev+0x24>)
    }
 8004848:	4620      	mov	r0, r4
        : Widget(), alpha(255), color(0)
 800484a:	6023      	str	r3, [r4, #0]
 800484c:	23ff      	movs	r3, #255	@ 0xff
 800484e:	f884 3026 	strb.w	r3, [r4, #38]	@ 0x26
        : color(col)
 8004852:	2300      	movs	r3, #0
 8004854:	62a3      	str	r3, [r4, #40]	@ 0x28
    }
 8004856:	bd10      	pop	{r4, pc}
 8004858:	0802aea0 	.word	0x0802aea0

0800485c <_ZN8touchgfx8TextAreaC1Ev>:
    TextArea()
 800485c:	b510      	push	{r4, lr}
 800485e:	4604      	mov	r4, r0
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004860:	2226      	movs	r2, #38	@ 0x26
 8004862:	2100      	movs	r1, #0
 8004864:	f022 fa22 	bl	8026cac <memset>
 8004868:	4620      	mov	r0, r4
 800486a:	f7ff ffd1 	bl	8004810 <_ZN8touchgfx6WidgetC1Ev>
 800486e:	4b0a      	ldr	r3, [pc, #40]	@ (8004898 <_ZN8touchgfx8TextAreaC1Ev+0x3c>)
 8004870:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
    }
 8004874:	4620      	mov	r0, r4
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 8004876:	6023      	str	r3, [r4, #0]
        : typedTextId(id)
 8004878:	4b08      	ldr	r3, [pc, #32]	@ (800489c <_ZN8touchgfx8TextAreaC1Ev+0x40>)
 800487a:	62a3      	str	r3, [r4, #40]	@ 0x28
 800487c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004880:	85a3      	strh	r3, [r4, #44]	@ 0x2c
 8004882:	2300      	movs	r3, #0
 8004884:	e9c4 320c 	strd	r3, r2, [r4, #48]	@ 0x30
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004888:	f04f 32ff 	mov.w	r2, #4294967295
 800488c:	8723      	strh	r3, [r4, #56]	@ 0x38
 800488e:	63e3      	str	r3, [r4, #60]	@ 0x3c
              text(0)
 8004890:	e9c4 2310 	strd	r2, r3, [r4, #64]	@ 0x40
    }
 8004894:	bd10      	pop	{r4, pc}
 8004896:	bf00      	nop
 8004898:	0802ae10 	.word	0x0802ae10
 800489c:	080299c8 	.word	0x080299c8

080048a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>:
     * change you may need to reposition the label text by calling this function to keep the
     * text horizontally centered.
     *
     * @note The user code must call invalidate() in order to update the button on the display.
     */
    void updateTextPosition()
 80048a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        return typedTextId < numberOfTypedTexts;
 80048a2:	4b19      	ldr	r3, [pc, #100]	@ (8004908 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x68>)
 80048a4:	4606      	mov	r6, r0
 80048a6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
    {
        if (typedText.hasValidId())
 80048a8:	881b      	ldrh	r3, [r3, #0]
 80048aa:	428b      	cmp	r3, r1
 80048ac:	d92a      	bls.n	8004904 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x64>
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 80048ae:	4b17      	ldr	r3, [pc, #92]	@ (800490c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x6c>)
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	b92b      	cbnz	r3, 80048c0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x20>
 80048b4:	4b16      	ldr	r3, [pc, #88]	@ (8004910 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x70>)
 80048b6:	216c      	movs	r1, #108	@ 0x6c
 80048b8:	4a16      	ldr	r2, [pc, #88]	@ (8004914 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x74>)
 80048ba:	4817      	ldr	r0, [pc, #92]	@ (8004918 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x78>)
 80048bc:	f021 ff20 	bl	8026700 <__assert_func>
        return fonts[typedTexts[typedTextId].fontIdx];
 80048c0:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 80048c4:	4b15      	ldr	r3, [pc, #84]	@ (800491c <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x7c>)
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
        return texts->getText(typedTextId);
 80048cc:	4b14      	ldr	r3, [pc, #80]	@ (8004920 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x80>)
 80048ce:	6818      	ldr	r0, [r3, #0]
 80048d0:	f7ff fdda 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
        {
            const Font* f = typedText.getFont();
            const Unicode::UnicodeChar* s = typedText.getText();
            textHeightIncludingSpacing = f->getHeight() * f->getNumberOfLines(s) + f->getSpacingAbove(s);
 80048d4:	682b      	ldr	r3, [r5, #0]
 80048d6:	4607      	mov	r7, r0
 80048d8:	4628      	mov	r0, r5
 80048da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048dc:	4798      	blx	r3
 80048de:	682b      	ldr	r3, [r5, #0]
 80048e0:	4604      	mov	r4, r0
 80048e2:	4639      	mov	r1, r7
 80048e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80048e6:	4628      	mov	r0, r5
 80048e8:	4798      	blx	r3
 80048ea:	fb14 f400 	smulbb	r4, r4, r0
 80048ee:	682b      	ldr	r3, [r5, #0]
 80048f0:	4639      	mov	r1, r7
 80048f2:	b2a4      	uxth	r4, r4
 80048f4:	4628      	mov	r0, r5
 80048f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80048f8:	4798      	blx	r3
 80048fa:	1823      	adds	r3, r4, r0
 80048fc:	b21b      	sxth	r3, r3
 80048fe:	f8a6 3046 	strh.w	r3, [r6, #70]	@ 0x46
        }
        else
        {
            textHeightIncludingSpacing = 0;
        }
    }
 8004902:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004904:	2300      	movs	r3, #0
 8004906:	e7fa      	b.n	80048fe <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv+0x5e>
 8004908:	24025e7c 	.word	0x24025e7c
 800490c:	24025e78 	.word	0x24025e78
 8004910:	08029fb4 	.word	0x08029fb4
 8004914:	08029ff6 	.word	0x08029ff6
 8004918:	0802a031 	.word	0x0802a031
 800491c:	24025e80 	.word	0x24025e80
 8004920:	24025e84 	.word	0x24025e84

08004924 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>:
        : pressed(false), alpha(255), action(0)
 8004924:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
    BoxWithBorderButtonStyle()
 8004928:	b570      	push	{r4, r5, r6, lr}
 800492a:	8583      	strh	r3, [r0, #44]	@ 0x2c
        touchable = touch;
 800492c:	f240 1301 	movw	r3, #257	@ 0x101
          firstChild(0)
 8004930:	2500      	movs	r5, #0
        : T(), up(), down()
 8004932:	4606      	mov	r6, r0
 8004934:	8483      	strh	r3, [r0, #36]	@ 0x24
    BoxWithBorderButtonStyle()
 8004936:	4604      	mov	r4, r0
        : T(), up(), down()
 8004938:	4b11      	ldr	r3, [pc, #68]	@ (8004980 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x5c>)
 800493a:	6285      	str	r5, [r0, #40]	@ 0x28
 800493c:	6305      	str	r5, [r0, #48]	@ 0x30
        : x(0), y(0), width(0), height(0)
 800493e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8004942:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 8004946:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 800494a:	e9c0 5507 	strd	r5, r5, [r0, #28]
 800494e:	f846 3b34 	str.w	r3, [r6], #52
        : Box(), borderColor(0), borderSize(0)
 8004952:	4630      	mov	r0, r6
 8004954:	f7ff ff6e 	bl	8004834 <_ZN8touchgfx3BoxC1Ev>
 8004958:	4b0a      	ldr	r3, [pc, #40]	@ (8004984 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev+0x60>)
        borderBox.setXY(0, 0);
 800495a:	462a      	mov	r2, r5
 800495c:	4629      	mov	r1, r5
 800495e:	4630      	mov	r0, r6
 8004960:	6363      	str	r3, [r4, #52]	@ 0x34
        : color(col)
 8004962:	6625      	str	r5, [r4, #96]	@ 0x60
 8004964:	f8a4 5064 	strh.w	r5, [r4, #100]	@ 0x64
        : color(0)
 8004968:	e9c4 551a 	strd	r5, r5, [r4, #104]	@ 0x68
 800496c:	e9c4 551c 	strd	r5, r5, [r4, #112]	@ 0x70
 8004970:	f7ff ff28 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
        T::add(borderBox);
 8004974:	4620      	mov	r0, r4
 8004976:	4631      	mov	r1, r6
 8004978:	f00b f948 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 800497c:	4620      	mov	r0, r4
 800497e:	bd70      	pop	{r4, r5, r6, pc}
 8004980:	0802a228 	.word	0x0802a228
 8004984:	0802af08 	.word	0x0802af08

08004988 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>:
    TextButtonStyle()
 8004988:	b538      	push	{r3, r4, r5, lr}
 800498a:	4604      	mov	r4, r0
        : T()
 800498c:	f7ff ffca 	bl	8004924 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8004990:	4b07      	ldr	r3, [pc, #28]	@ (80049b0 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev+0x28>)
 8004992:	4625      	mov	r5, r4
 8004994:	f845 3b78 	str.w	r3, [r5], #120
 8004998:	4628      	mov	r0, r5
 800499a:	f7ff ff5f 	bl	800485c <_ZN8touchgfx8TextAreaC1Ev>
 800499e:	2300      	movs	r3, #0
        T::add(text);
 80049a0:	4620      	mov	r0, r4
 80049a2:	4629      	mov	r1, r5
 80049a4:	e9c4 3330 	strd	r3, r3, [r4, #192]	@ 0xc0
 80049a8:	f00b f930 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    }
 80049ac:	4620      	mov	r0, r4
 80049ae:	bd38      	pop	{r3, r4, r5, pc}
 80049b0:	0802a2c4 	.word	0x0802a2c4

080049b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>:
    void setBoxWithBorderColors(const colortype colorReleased, const colortype colorPressed, const colortype borderColorReleased, const colortype borderColorPressed)
 80049b4:	b410      	push	{r4}
        borderUp = borderColorReleased;
 80049b6:	6703      	str	r3, [r0, #112]	@ 0x70
        borderDown = borderColorPressed;
 80049b8:	9b01      	ldr	r3, [sp, #4]
    }
 80049ba:	f85d 4b04 	ldr.w	r4, [sp], #4
        borderDown = borderColorPressed;
 80049be:	6743      	str	r3, [r0, #116]	@ 0x74
        handlePressedUpdated();
 80049c0:	6803      	ldr	r3, [r0, #0]
        down = colorPressed;
 80049c2:	e9c0 121a 	strd	r1, r2, [r0, #104]	@ 0x68
        handlePressedUpdated();
 80049c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80049ca:	4718      	bx	r3

080049cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>:
    void setText(TypedText t)
 80049cc:	b538      	push	{r3, r4, r5, lr}
        text.setTypedText(t);
 80049ce:	f100 0578 	add.w	r5, r0, #120	@ 0x78
    void setText(TypedText t)
 80049d2:	4604      	mov	r4, r0
        text.setTypedText(t);
 80049d4:	4628      	mov	r0, r5
 80049d6:	f00e fbd1 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        setWidthHeight(drawable.getWidth(), drawable.getHeight());
 80049da:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80049de:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80049e2:	4628      	mov	r0, r5
 80049e4:	f7ff fefb 	bl	80047de <_ZN8touchgfx8Drawable14setWidthHeightEss>
    }
 80049e8:	bd38      	pop	{r3, r4, r5, pc}
	...

080049ec <_ZN17UPIScreenViewBaseC1Ev>:
UPIScreenViewBase::UPIScreenViewBase() :
 80049ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80049f0:	4604      	mov	r4, r0
 80049f2:	b095      	sub	sp, #84	@ 0x54
        : presenter(0)
 80049f4:	2500      	movs	r5, #0
 80049f6:	f013 ff65 	bl	80188c4 <_ZN8touchgfx6ScreenC1Ev>
    buttonCallback(this, &UPIScreenViewBase::buttonCallbackHandler)
 80049fa:	46a2      	mov	sl, r4
 80049fc:	4bcc      	ldr	r3, [pc, #816]	@ (8004d30 <_ZN17UPIScreenViewBaseC1Ev+0x344>)
 80049fe:	f104 096c 	add.w	r9, r4, #108	@ 0x6c
     * array.
     *
     * @param  id (Optional) The unique bitmap identifier.
     */
    Bitmap(const BitmapId id = BITMAP_INVALID)
        : bitmapId(id)
 8004a02:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8004a06:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8004a08:	f504 7672 	add.w	r6, r4, #968	@ 0x3c8
 8004a0c:	f84a 3b40 	str.w	r3, [sl], #64
 8004a10:	4650      	mov	r0, sl
 8004a12:	f7ff ff0f 	bl	8004834 <_ZN8touchgfx3BoxC1Ev>
     * @param   bmp (Optional) The bitmap to display.
     *
     * @see setBitmap
     */
    Image(const Bitmap& bmp = Bitmap())
        : Widget(), bitmap(bmp), alpha(255)
 8004a16:	2226      	movs	r2, #38	@ 0x26
 8004a18:	4629      	mov	r1, r5
 8004a1a:	4648      	mov	r0, r9
 8004a1c:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8004a20:	f022 f944 	bl	8026cac <memset>
 8004a24:	4648      	mov	r0, r9
 8004a26:	f504 6b84 	add.w	fp, r4, #1056	@ 0x420
 8004a2a:	f7ff fef1 	bl	8004810 <_ZN8touchgfx6WidgetC1Ev>
 8004a2e:	4bc1      	ldr	r3, [pc, #772]	@ (8004d34 <_ZN17UPIScreenViewBaseC1Ev+0x348>)
    {
        Image::setBitmap(bmp);
 8004a30:	a912      	add	r1, sp, #72	@ 0x48
 8004a32:	4648      	mov	r0, r9
        : Widget(), bitmap(bmp), alpha(255)
 8004a34:	66e3      	str	r3, [r4, #108]	@ 0x6c
 8004a36:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8004a3a:	f884 7094 	strb.w	r7, [r4, #148]	@ 0x94
 8004a3e:	f8a4 3092 	strh.w	r3, [r4, #146]	@ 0x92
        Image::setBitmap(bmp);
 8004a42:	f00e fdbf 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004a46:	4630      	mov	r0, r6
 8004a48:	f00f f97c 	bl	8013d44 <_ZN8touchgfx6QRCodeC1Ev>
 8004a4c:	4658      	mov	r0, fp
 8004a4e:	f7ff fef1 	bl	8004834 <_ZN8touchgfx3BoxC1Ev>
 8004a52:	f8df 830c 	ldr.w	r8, [pc, #780]	@ 8004d60 <_ZN17UPIScreenViewBaseC1Ev+0x374>
 8004a56:	f204 4354 	addw	r3, r4, #1108	@ 0x454
        : color(col)
 8004a5a:	f8c4 544c 	str.w	r5, [r4, #1100]	@ 0x44c
 8004a5e:	f8c4 8420 	str.w	r8, [r4, #1056]	@ 0x420
 8004a62:	4618      	mov	r0, r3
 8004a64:	f8a4 5450 	strh.w	r5, [r4, #1104]	@ 0x450
 8004a68:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004a6a:	f7ff fee3 	bl	8004834 <_ZN8touchgfx3BoxC1Ev>
 8004a6e:	f8c4 8454 	str.w	r8, [r4, #1108]	@ 0x454
 8004a72:	f504 6891 	add.w	r8, r4, #1160	@ 0x488
 8004a76:	f8c4 5480 	str.w	r5, [r4, #1152]	@ 0x480
 8004a7a:	4640      	mov	r0, r8
 8004a7c:	f8a4 5484 	strh.w	r5, [r4, #1156]	@ 0x484
 8004a80:	f7ff feec 	bl	800485c <_ZN8touchgfx8TextAreaC1Ev>
 8004a84:	f504 639a 	add.w	r3, r4, #1232	@ 0x4d0
 8004a88:	4618      	mov	r0, r3
 8004a8a:	9304      	str	r3, [sp, #16]
 8004a8c:	f7ff fee6 	bl	800485c <_ZN8touchgfx8TextAreaC1Ev>
 8004a90:	f504 63a3 	add.w	r3, r4, #1304	@ 0x518
        : TextArea()
 8004a94:	4618      	mov	r0, r3
 8004a96:	9305      	str	r3, [sp, #20]
 8004a98:	f7ff fee0 	bl	800485c <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004a9c:	4ba6      	ldr	r3, [pc, #664]	@ (8004d38 <_ZN17UPIScreenViewBaseC1Ev+0x34c>)
 8004a9e:	f8c4 5560 	str.w	r5, [r4, #1376]	@ 0x560
 8004aa2:	f8c4 3518 	str.w	r3, [r4, #1304]	@ 0x518
 8004aa6:	f204 5364 	addw	r3, r4, #1380	@ 0x564
        : TextArea()
 8004aaa:	4618      	mov	r0, r3
 8004aac:	9306      	str	r3, [sp, #24]
 8004aae:	f7ff fed5 	bl	800485c <_ZN8touchgfx8TextAreaC1Ev>
        : TextAreaWithWildcardBase(), wc1(0)
 8004ab2:	4ba1      	ldr	r3, [pc, #644]	@ (8004d38 <_ZN17UPIScreenViewBaseC1Ev+0x34c>)
 8004ab4:	f8c4 55ac 	str.w	r5, [r4, #1452]	@ 0x5ac
 8004ab8:	f8c4 3564 	str.w	r3, [r4, #1380]	@ 0x564
 8004abc:	f504 63b6 	add.w	r3, r4, #1456	@ 0x5b0
 8004ac0:	4618      	mov	r0, r3
 8004ac2:	9307      	str	r3, [sp, #28]
 8004ac4:	f7ff ff2e 	bl	8004924 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8004ac8:	f504 63c5 	add.w	r3, r4, #1576	@ 0x628
 8004acc:	4618      	mov	r0, r3
 8004ace:	9308      	str	r3, [sp, #32]
 8004ad0:	f7ff ff28 	bl	8004924 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEC1Ev>
 8004ad4:	f504 63d4 	add.w	r3, r4, #1696	@ 0x6a0
 8004ad8:	4618      	mov	r0, r3
 8004ada:	9309      	str	r3, [sp, #36]	@ 0x24
 8004adc:	f00e feaa 	bl	8013834 <_ZN8touchgfx15ButtonWithLabelC1Ev>
 8004ae0:	f504 63dd 	add.w	r3, r4, #1768	@ 0x6e8
 8004ae4:	4618      	mov	r0, r3
 8004ae6:	9302      	str	r3, [sp, #8]
 8004ae8:	f7ff ff4e 	bl	8004988 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8004aec:	f504 63f6 	add.w	r3, r4, #1968	@ 0x7b0
 8004af0:	4618      	mov	r0, r3
 8004af2:	9303      	str	r3, [sp, #12]
 8004af4:	f7ff ff48 	bl	8004988 <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEEC1Ev>
 8004af8:	f604 0378 	addw	r3, r4, #2168	@ 0x878
 8004afc:	a912      	add	r1, sp, #72	@ 0x48
 8004afe:	f8ad 7048 	strh.w	r7, [sp, #72]	@ 0x48
 8004b02:	4618      	mov	r0, r3
 8004b04:	930a      	str	r3, [sp, #40]	@ 0x28
 8004b06:	f00d fdf5 	bl	80126f4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>
        : pobject(pObject), pmemfun(pmemfun_1)
 8004b0a:	4b8c      	ldr	r3, [pc, #560]	@ (8004d3c <_ZN17UPIScreenViewBaseC1Ev+0x350>)
    __background.setPosition(0, 0, 800, 480);
 8004b0c:	462a      	mov	r2, r5
 8004b0e:	4650      	mov	r0, sl
 8004b10:	f8c4 38d0 	str.w	r3, [r4, #2256]	@ 0x8d0
 8004b14:	4629      	mov	r1, r5
 8004b16:	4b8a      	ldr	r3, [pc, #552]	@ (8004d40 <_ZN17UPIScreenViewBaseC1Ev+0x354>)
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 8004b18:	1d27      	adds	r7, r4, #4
 8004b1a:	f8c4 48d4 	str.w	r4, [r4, #2260]	@ 0x8d4
 8004b1e:	f8c4 38d8 	str.w	r3, [r4, #2264]	@ 0x8d8
 8004b22:	4b88      	ldr	r3, [pc, #544]	@ (8004d44 <_ZN17UPIScreenViewBaseC1Ev+0x358>)
 8004b24:	f8c4 58dc 	str.w	r5, [r4, #2268]	@ 0x8dc
 8004b28:	f8c4 38e0 	str.w	r3, [r4, #2272]	@ 0x8e0
 8004b2c:	4b86      	ldr	r3, [pc, #536]	@ (8004d48 <_ZN17UPIScreenViewBaseC1Ev+0x35c>)
 8004b2e:	f8c4 48e4 	str.w	r4, [r4, #2276]	@ 0x8e4
 8004b32:	f8c4 38e8 	str.w	r3, [r4, #2280]	@ 0x8e8
 8004b36:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004b3a:	f8c4 58ec 	str.w	r5, [r4, #2284]	@ 0x8ec
 8004b3e:	9300      	str	r3, [sp, #0]
 8004b40:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8004b44:	f7ff fe58 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004b48:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8004b4c:	4651      	mov	r1, sl
 8004b4e:	4638      	mov	r0, r7
 8004b50:	66a3      	str	r3, [r4, #104]	@ 0x68
    UPIIDBox.setPosition(400, 144, 335, 50);
 8004b52:	f04f 0a32 	mov.w	sl, #50	@ 0x32
 8004b56:	f00b f859 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    Background.setXY(0, 0);
 8004b5a:	462a      	mov	r2, r5
 8004b5c:	4648      	mov	r0, r9
 8004b5e:	4629      	mov	r1, r5
 8004b60:	f7ff fe30 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
    Background.setBitmap(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_BACKGROUNDS_800X480_LINES_ID));
 8004b64:	4648      	mov	r0, r9
 8004b66:	a912      	add	r1, sp, #72	@ 0x48
 8004b68:	f8ad 5048 	strh.w	r5, [sp, #72]	@ 0x48
 8004b6c:	f00e fd2a 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8004b70:	4649      	mov	r1, r9
 8004b72:	4638      	mov	r0, r7
     *
     * @param version The QRCode version to use.
     */
    void setQRCodeVersion(uint8_t version)
    {
        qrCodeVersion = version;
 8004b74:	f04f 090a 	mov.w	r9, #10
 8004b78:	f00b f848 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    qrCode.setXY(111, 174);
 8004b7c:	22ae      	movs	r2, #174	@ 0xae
 8004b7e:	216f      	movs	r1, #111	@ 0x6f
 8004b80:	4630      	mov	r0, r6
 8004b82:	f7ff fe1f 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
    qrCode.setBuffers(qrBuffer_qrCode, qrScratchBuffer_qrCode);
 8004b86:	f104 0398 	add.w	r3, r4, #152	@ 0x98
        sizeOfQRCodeSymbol = version * 4 + 17;
        updateWidthAndHeight();
 8004b8a:	4630      	mov	r0, r6
     */
    void setBuffers(uint8_t* qrBuffer, uint8_t* tempBuffer)
    {
        qrCodeData = qrBuffer;
        qrTempBuffer = tempBuffer;
        qrCodeData[0] = 0;
 8004b8c:	f884 5098 	strb.w	r5, [r4, #152]	@ 0x98
        qrCodeData = qrBuffer;
 8004b90:	f8c4 33f0 	str.w	r3, [r4, #1008]	@ 0x3f0
 8004b94:	f504 730c 	add.w	r3, r4, #560	@ 0x230
        qrCodeVersion = version;
 8004b98:	f884 93f8 	strb.w	r9, [r4, #1016]	@ 0x3f8
        qrTempBuffer = tempBuffer;
 8004b9c:	f8c4 33f4 	str.w	r3, [r4, #1012]	@ 0x3f4
        sizeOfQRCodeSymbol = version * 4 + 17;
 8004ba0:	2339      	movs	r3, #57	@ 0x39
 8004ba2:	f8c4 33fc 	str.w	r3, [r4, #1020]	@ 0x3fc
        updateWidthAndHeight();
 8004ba6:	f00f f928 	bl	8013dfa <_ZN8touchgfx6QRCode20updateWidthAndHeightEv>
        scale = newScale;
 8004baa:	2303      	movs	r3, #3
        updateWidthAndHeight();
 8004bac:	4630      	mov	r0, r6
        scale = newScale;
 8004bae:	f8c4 3400 	str.w	r3, [r4, #1024]	@ 0x400
        updateWidthAndHeight();
 8004bb2:	f00f f922 	bl	8013dfa <_ZN8touchgfx6QRCode20updateWidthAndHeightEv>
        eccLevel = level;
 8004bb6:	f04f 0301 	mov.w	r3, #1
    qrCode.convertStringToQRCode("SUPPORT.TOUCHGFX.COM");
 8004bba:	4964      	ldr	r1, [pc, #400]	@ (8004d4c <_ZN17UPIScreenViewBaseC1Ev+0x360>)
 8004bbc:	4630      	mov	r0, r6
 8004bbe:	f884 3404 	strb.w	r3, [r4, #1028]	@ 0x404
 8004bc2:	f00f f8fd 	bl	8013dc0 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc>
 8004bc6:	4631      	mov	r1, r6
 8004bc8:	4638      	mov	r0, r7
     *
     * @see getBorderSize
     */
    void setBorderSize(uint16_t size)
    {
        borderSize = size;
 8004bca:	f04f 0605 	mov.w	r6, #5
 8004bce:	f00b f81d 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    UPIIDBox.setPosition(400, 144, 335, 50);
 8004bd2:	2290      	movs	r2, #144	@ 0x90
 8004bd4:	4658      	mov	r0, fp
 8004bd6:	f240 134f 	movw	r3, #335	@ 0x14f
 8004bda:	f44f 71c8 	mov.w	r1, #400	@ 0x190
 8004bde:	f8cd a000 	str.w	sl, [sp]
 8004be2:	f7ff fe09 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004be6:	f04f 33ff 	mov.w	r3, #4294967295
 8004bea:	4659      	mov	r1, fp
 8004bec:	4638      	mov	r0, r7
 8004bee:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
        borderColor = colorBorder;
 8004bf2:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        borderSize = size;
 8004bf6:	f8a4 6450 	strh.w	r6, [r4, #1104]	@ 0x450
        borderColor = colorBorder;
 8004bfa:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
 8004bfe:	f00b f805 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    AmountBox.setPosition(466, 259, 201, 50);
 8004c02:	f240 1203 	movw	r2, #259	@ 0x103
 8004c06:	23c9      	movs	r3, #201	@ 0xc9
 8004c08:	f44f 71e9 	mov.w	r1, #466	@ 0x1d2
 8004c0c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8004c0e:	f8cd a000 	str.w	sl, [sp]
 8004c12:	f7ff fdf1 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004c16:	f04f 33ff 	mov.w	r3, #4294967295
 8004c1a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8004c1c:	4638      	mov	r0, r7
 8004c1e:	f8c4 347c 	str.w	r3, [r4, #1148]	@ 0x47c
 8004c22:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        borderSize = size;
 8004c26:	f8a4 6484 	strh.w	r6, [r4, #1156]	@ 0x484
        boundingArea = calculateBoundingArea();
 8004c2a:	ae0c      	add	r6, sp, #48	@ 0x30
        borderColor = colorBorder;
 8004c2c:	f8c4 3480 	str.w	r3, [r4, #1152]	@ 0x480
 8004c30:	f00a ffec 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    UPIIdCaption.setXY(501, 95);
 8004c34:	225f      	movs	r2, #95	@ 0x5f
 8004c36:	4640      	mov	r0, r8
 8004c38:	f240 11f5 	movw	r1, #501	@ 0x1f5
 8004c3c:	f7ff fdc2 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004c40:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004c44:	4641      	mov	r1, r8
 8004c46:	4630      	mov	r0, r6
        color = newColor;
 8004c48:	f8c4 34b8 	str.w	r3, [r4, #1208]	@ 0x4b8
        linespace = space;
 8004c4c:	f8a4 54bc 	strh.w	r5, [r4, #1212]	@ 0x4bc
        boundingArea = calculateBoundingArea();
 8004c50:	f00d fffa 	bl	8012c48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004c54:	f204 43c4 	addw	r3, r4, #1220	@ 0x4c4
        : typedTextId(id)
 8004c58:	f8df b108 	ldr.w	fp, [pc, #264]	@ 8004d64 <_ZN17UPIScreenViewBaseC1Ev+0x378>
 8004c5c:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004c60:	e883 0007 	stmia.w	r3, {r0, r1, r2}
 8004c64:	230b      	movs	r3, #11
    UPIIdCaption.setTypedText(touchgfx::TypedText(T___SINGLEUSE_PELB));
 8004c66:	4640      	mov	r0, r8
 8004c68:	a912      	add	r1, sp, #72	@ 0x48
 8004c6a:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004c6e:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8004c72:	f00e fa83 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004c76:	4641      	mov	r1, r8
 8004c78:	4638      	mov	r0, r7
 8004c7a:	f00a ffc7 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    AmountCaption.setXY(361, 272);
 8004c7e:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004c82:	f240 1169 	movw	r1, #361	@ 0x169
 8004c86:	9804      	ldr	r0, [sp, #16]
 8004c88:	f7ff fd9c 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
        color = newColor;
 8004c8c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004c90:	9904      	ldr	r1, [sp, #16]
 8004c92:	4630      	mov	r0, r6
        color = newColor;
 8004c94:	f8c4 3500 	str.w	r3, [r4, #1280]	@ 0x500
        linespace = space;
 8004c98:	f8a4 5504 	strh.w	r5, [r4, #1284]	@ 0x504
        boundingArea = calculateBoundingArea();
 8004c9c:	f00d ffd4 	bl	8012c48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>
 8004ca0:	f204 530c 	addw	r3, r4, #1292	@ 0x50c
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004ca4:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 8004d68 <_ZN17UPIScreenViewBaseC1Ev+0x37c>
 8004ca8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004cac:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    AmountCaption.setTypedText(touchgfx::TypedText(T___SINGLEUSE_ID1V));
 8004cb0:	a912      	add	r1, sp, #72	@ 0x48
 8004cb2:	9804      	ldr	r0, [sp, #16]
        : typedTextId(id)
 8004cb4:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004cb8:	f8ad 904c 	strh.w	r9, [sp, #76]	@ 0x4c
 8004cbc:	f00e fa5e 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004cc0:	9904      	ldr	r1, [sp, #16]
 8004cc2:	4638      	mov	r0, r7
 8004cc4:	f00a ffa2 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaUpi.setPosition(419, 155, 302, 26);
 8004cc8:	231a      	movs	r3, #26
 8004cca:	229b      	movs	r2, #155	@ 0x9b
 8004ccc:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8004cd0:	9805      	ldr	r0, [sp, #20]
 8004cd2:	9300      	str	r3, [sp, #0]
 8004cd4:	f44f 7397 	mov.w	r3, #302	@ 0x12e
 8004cd8:	f7ff fd8e 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004cdc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004ce0:	9905      	ldr	r1, [sp, #20]
 8004ce2:	4630      	mov	r0, r6
        color = newColor;
 8004ce4:	f8c4 3548 	str.w	r3, [r4, #1352]	@ 0x548
        boundingArea = calculateBoundingArea();
 8004ce8:	f8d4 3518 	ldr.w	r3, [r4, #1304]	@ 0x518
        linespace = space;
 8004cec:	f8a4 554c 	strh.w	r5, [r4, #1356]	@ 0x54c
        boundingArea = calculateBoundingArea();
 8004cf0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8004cf4:	4798      	blx	r3
 8004cf6:	f204 5354 	addw	r3, r4, #1364	@ 0x554
 8004cfa:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004cfe:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    Unicode::snprintf(textAreaUpiBuffer, TEXTAREAUPI_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_JCFU).getText());
 8004d02:	f604 03a4 	addw	r3, r4, #2212	@ 0x8a4
 8004d06:	9304      	str	r3, [sp, #16]
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004d08:	f8d8 3000 	ldr.w	r3, [r8]
 8004d0c:	b92b      	cbnz	r3, 8004d1a <_ZN17UPIScreenViewBaseC1Ev+0x32e>
 8004d0e:	4b10      	ldr	r3, [pc, #64]	@ (8004d50 <_ZN17UPIScreenViewBaseC1Ev+0x364>)
 8004d10:	2160      	movs	r1, #96	@ 0x60
 8004d12:	4a10      	ldr	r2, [pc, #64]	@ (8004d54 <_ZN17UPIScreenViewBaseC1Ev+0x368>)
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004d14:	4810      	ldr	r0, [pc, #64]	@ (8004d58 <_ZN17UPIScreenViewBaseC1Ev+0x36c>)
 8004d16:	f021 fcf3 	bl	8026700 <__assert_func>
        return typedTextId < numberOfTypedTexts;
 8004d1a:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8004d6c <_ZN17UPIScreenViewBaseC1Ev+0x380>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004d1e:	f8b9 3000 	ldrh.w	r3, [r9]
 8004d22:	2b06      	cmp	r3, #6
 8004d24:	d824      	bhi.n	8004d70 <_ZN17UPIScreenViewBaseC1Ev+0x384>
 8004d26:	4b0d      	ldr	r3, [pc, #52]	@ (8004d5c <_ZN17UPIScreenViewBaseC1Ev+0x370>)
 8004d28:	2161      	movs	r1, #97	@ 0x61
 8004d2a:	4a0a      	ldr	r2, [pc, #40]	@ (8004d54 <_ZN17UPIScreenViewBaseC1Ev+0x368>)
 8004d2c:	e7f2      	b.n	8004d14 <_ZN17UPIScreenViewBaseC1Ev+0x328>
 8004d2e:	bf00      	nop
 8004d30:	0802a390 	.word	0x0802a390
 8004d34:	0802af70 	.word	0x0802af70
 8004d38:	0802a198 	.word	0x0802a198
 8004d3c:	0802a360 	.word	0x0802a360
 8004d40:	0800455b 	.word	0x0800455b
 8004d44:	0802a378 	.word	0x0802a378
 8004d48:	080046f1 	.word	0x080046f1
 8004d4c:	0802a0c4 	.word	0x0802a0c4
 8004d50:	08029fb4 	.word	0x08029fb4
 8004d54:	0802a0d9 	.word	0x0802a0d9
 8004d58:	0802a031 	.word	0x0802a031
 8004d5c:	0802a086 	.word	0x0802a086
 8004d60:	0802af08 	.word	0x0802af08
 8004d64:	080299c8 	.word	0x080299c8
 8004d68:	24025e78 	.word	0x24025e78
 8004d6c:	24025e7c 	.word	0x24025e7c
        return texts->getText(typedTextId);
 8004d70:	4bbc      	ldr	r3, [pc, #752]	@ (8005064 <_ZN17UPIScreenViewBaseC1Ev+0x678>)
 8004d72:	2106      	movs	r1, #6
 8004d74:	6818      	ldr	r0, [r3, #0]
 8004d76:	f7ff fb87 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8004d7a:	4abb      	ldr	r2, [pc, #748]	@ (8005068 <_ZN17UPIScreenViewBaseC1Ev+0x67c>)
 8004d7c:	4603      	mov	r3, r0
 8004d7e:	210f      	movs	r1, #15
 8004d80:	9804      	ldr	r0, [sp, #16]
 8004d82:	f015 fa63 	bl	801a24c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        wc1 = value;
 8004d86:	9a04      	ldr	r2, [sp, #16]
        : typedTextId(id)
 8004d88:	2309      	movs	r3, #9
    textAreaUpi.setTypedText(touchgfx::TypedText(T___SINGLEUSE_9V4H));
 8004d8a:	a912      	add	r1, sp, #72	@ 0x48
 8004d8c:	f8c4 2560 	str.w	r2, [r4, #1376]	@ 0x560
 8004d90:	9805      	ldr	r0, [sp, #20]
 8004d92:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8004d96:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004d9a:	f00e f9ef 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004d9e:	9905      	ldr	r1, [sp, #20]
 8004da0:	4638      	mov	r0, r7
 8004da2:	f00a ff33 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    textAreaAmount.setPosition(475, 272, 181, 24);
 8004da6:	2318      	movs	r3, #24
 8004da8:	f44f 7288 	mov.w	r2, #272	@ 0x110
 8004dac:	f240 11db 	movw	r1, #475	@ 0x1db
 8004db0:	9806      	ldr	r0, [sp, #24]
 8004db2:	9300      	str	r3, [sp, #0]
 8004db4:	23b5      	movs	r3, #181	@ 0xb5
 8004db6:	f7ff fd1f 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
        color = newColor;
 8004dba:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
        boundingArea = calculateBoundingArea();
 8004dbe:	f8d4 3564 	ldr.w	r3, [r4, #1380]	@ 0x564
 8004dc2:	4630      	mov	r0, r6
 8004dc4:	9906      	ldr	r1, [sp, #24]
 8004dc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
        color = newColor;
 8004dca:	f8c4 2594 	str.w	r2, [r4, #1428]	@ 0x594
        linespace = space;
 8004dce:	f8a4 5598 	strh.w	r5, [r4, #1432]	@ 0x598
        boundingArea = calculateBoundingArea();
 8004dd2:	4798      	blx	r3
 8004dd4:	f504 63b4 	add.w	r3, r4, #1440	@ 0x5a0
 8004dd8:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
 8004ddc:	e883 0007 	stmia.w	r3, {r0, r1, r2}
        assert(typedTexts != 0 && "TypedText database has not been initialized.");
 8004de0:	f8d8 3000 	ldr.w	r3, [r8]
    Unicode::snprintf(textAreaAmountBuffer, TEXTAREAAMOUNT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IELG).getText());
 8004de4:	f604 06c2 	addw	r6, r4, #2242	@ 0x8c2
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d090      	beq.n	8004d0e <_ZN17UPIScreenViewBaseC1Ev+0x322>
        assert(hasValidId() && "typedTextId larger than numberOfTypedTexts.");
 8004dec:	f8b9 3000 	ldrh.w	r3, [r9]
 8004df0:	2b07      	cmp	r3, #7
 8004df2:	d998      	bls.n	8004d26 <_ZN17UPIScreenViewBaseC1Ev+0x33a>
        return texts->getText(typedTextId);
 8004df4:	4b9b      	ldr	r3, [pc, #620]	@ (8005064 <_ZN17UPIScreenViewBaseC1Ev+0x678>)
 8004df6:	2107      	movs	r1, #7
 8004df8:	f8df 9284 	ldr.w	r9, [pc, #644]	@ 8005080 <_ZN17UPIScreenViewBaseC1Ev+0x694>
    UPIFlexButton.setAction(flexButtonCallback);
 8004dfc:	f504 680d 	add.w	r8, r4, #2256	@ 0x8d0
 8004e00:	6818      	ldr	r0, [r3, #0]
 8004e02:	f7ff fb41 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
    Unicode::snprintf(textAreaAmountBuffer, TEXTAREAAMOUNT_SIZE, "%s", touchgfx::TypedText(T___SINGLEUSE_IELG).getText());
 8004e06:	4a98      	ldr	r2, [pc, #608]	@ (8005068 <_ZN17UPIScreenViewBaseC1Ev+0x67c>)
 8004e08:	4603      	mov	r3, r0
 8004e0a:	2106      	movs	r1, #6
 8004e0c:	4630      	mov	r0, r6
 8004e0e:	f015 fa1d 	bl	801a24c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>
        : typedTextId(id)
 8004e12:	2308      	movs	r3, #8
    textAreaAmount.setTypedText(touchgfx::TypedText(T___SINGLEUSE_WEF2));
 8004e14:	a912      	add	r1, sp, #72	@ 0x48
 8004e16:	9806      	ldr	r0, [sp, #24]
 8004e18:	f8c4 65ac 	str.w	r6, [r4, #1452]	@ 0x5ac
        borderSize = size;
 8004e1c:	f04f 0605 	mov.w	r6, #5
 8004e20:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8004e24:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004e28:	f00e f9a8 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 8004e2c:	9906      	ldr	r1, [sp, #24]
 8004e2e:	4638      	mov	r0, r7
 8004e30:	f00a feec 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        borderBox.setPosition(x, y, width, height);
 8004e34:	462a      	mov	r2, r5
 8004e36:	4629      	mov	r1, r5
 8004e38:	f204 50e4 	addw	r0, r4, #1508	@ 0x5e4
 8004e3c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8004e40:	f8cd a000 	str.w	sl, [sp]
 8004e44:	f7ff fcd8 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004e48:	f8a4 6614 	strh.w	r6, [r4, #1556]	@ 0x614
    UPIFlexButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8004e4c:	4a87      	ldr	r2, [pc, #540]	@ (800506c <_ZN17UPIScreenViewBaseC1Ev+0x680>)
 8004e4e:	4988      	ldr	r1, [pc, #544]	@ (8005070 <_ZN17UPIScreenViewBaseC1Ev+0x684>)
 8004e50:	9807      	ldr	r0, [sp, #28]
 8004e52:	4b88      	ldr	r3, [pc, #544]	@ (8005074 <_ZN17UPIScreenViewBaseC1Ev+0x688>)
 8004e54:	f8cd 9000 	str.w	r9, [sp]
 8004e58:	f7ff fdac 	bl	80049b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
        handleAlphaUpdated();
 8004e5c:	f8d4 35b0 	ldr.w	r3, [r4, #1456]	@ 0x5b0
 8004e60:	9807      	ldr	r0, [sp, #28]
        alpha = newAlpha;
 8004e62:	f884 55dd 	strb.w	r5, [r4, #1501]	@ 0x5dd
        handleAlphaUpdated();
 8004e66:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004e6a:	4798      	blx	r3
    UPIFlexButton.setPosition(405, 144, 330, 50);
 8004e6c:	f44f 73a5 	mov.w	r3, #330	@ 0x14a
 8004e70:	2290      	movs	r2, #144	@ 0x90
 8004e72:	9807      	ldr	r0, [sp, #28]
        action = &callback;
 8004e74:	f8c4 85e0 	str.w	r8, [r4, #1504]	@ 0x5e0
 8004e78:	f240 1195 	movw	r1, #405	@ 0x195
 8004e7c:	f8cd a000 	str.w	sl, [sp]
 8004e80:	f7ff fcba 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004e84:	9907      	ldr	r1, [sp, #28]
 8004e86:	4638      	mov	r0, r7
 8004e88:	f00a fec0 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004e8c:	462a      	mov	r2, r5
 8004e8e:	4629      	mov	r1, r5
 8004e90:	f204 605c 	addw	r0, r4, #1628	@ 0x65c
 8004e94:	23c7      	movs	r3, #199	@ 0xc7
 8004e96:	f8cd a000 	str.w	sl, [sp]
 8004e9a:	f7ff fcad 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004e9e:	f8a4 668c 	strh.w	r6, [r4, #1676]	@ 0x68c
    AmountFlexButton.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8004ea2:	4a72      	ldr	r2, [pc, #456]	@ (800506c <_ZN17UPIScreenViewBaseC1Ev+0x680>)
 8004ea4:	4972      	ldr	r1, [pc, #456]	@ (8005070 <_ZN17UPIScreenViewBaseC1Ev+0x684>)
 8004ea6:	9808      	ldr	r0, [sp, #32]
 8004ea8:	4b72      	ldr	r3, [pc, #456]	@ (8005074 <_ZN17UPIScreenViewBaseC1Ev+0x688>)
 8004eaa:	f8cd 9000 	str.w	r9, [sp]
 8004eae:	f7ff fd81 	bl	80049b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
        handleAlphaUpdated();
 8004eb2:	f8d4 3628 	ldr.w	r3, [r4, #1576]	@ 0x628
 8004eb6:	9808      	ldr	r0, [sp, #32]
        alpha = newAlpha;
 8004eb8:	f884 5655 	strb.w	r5, [r4, #1621]	@ 0x655
        handleAlphaUpdated();
 8004ebc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ec0:	4798      	blx	r3
    AmountFlexButton.setPosition(468, 259, 199, 50);
 8004ec2:	23c7      	movs	r3, #199	@ 0xc7
 8004ec4:	f240 1203 	movw	r2, #259	@ 0x103
 8004ec8:	9808      	ldr	r0, [sp, #32]
        action = &callback;
 8004eca:	f8c4 8658 	str.w	r8, [r4, #1624]	@ 0x658
 8004ece:	f44f 71ea 	mov.w	r1, #468	@ 0x1d4
 8004ed2:	f8cd a000 	str.w	sl, [sp]
 8004ed6:	f7ff fc8f 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004eda:	9908      	ldr	r1, [sp, #32]
 8004edc:	4638      	mov	r0, r7
 8004ede:	f00a fe95 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    GenerateButton.setXY(76, 364);
 8004ee2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ee4:	f44f 72b6 	mov.w	r2, #364	@ 0x16c
 8004ee8:	214c      	movs	r1, #76	@ 0x4c
 8004eea:	f7ff fc6b 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 8004eee:	f04f 0301 	mov.w	r3, #1
    GenerateButton.setBitmaps(touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_NORMAL_ID), touchgfx::Bitmap(BITMAP_ALTERNATE_THEME_IMAGES_WIDGETS_BUTTON_REGULAR_HEIGHT_50_MEDIUM_ROUNDED_PRESSED_ID));
 8004ef2:	aa12      	add	r2, sp, #72	@ 0x48
 8004ef4:	a911      	add	r1, sp, #68	@ 0x44
 8004ef6:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 8004efa:	2302      	movs	r3, #2
 8004efc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004efe:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8004f02:	f00e f998 	bl	8013236 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>
        updateTextPosition();
 8004f06:	9809      	ldr	r0, [sp, #36]	@ 0x24
class TypedText
 8004f08:	f8a4 66d8 	strh.w	r6, [r4, #1752]	@ 0x6d8
 8004f0c:	2628      	movs	r6, #40	@ 0x28
 8004f0e:	f7ff fcc7 	bl	80048a0 <_ZN8touchgfx15ButtonWithLabel18updateTextPositionEv>
        color = col;
 8004f12:	f04f 33ff 	mov.w	r3, #4294967295
 8004f16:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004f18:	4638      	mov	r0, r7
 8004f1a:	f8c4 36dc 	str.w	r3, [r4, #1756]	@ 0x6dc
        colorPressed = col;
 8004f1e:	f8c4 36e0 	str.w	r3, [r4, #1760]	@ 0x6e0
    GenerateButton.setAction(buttonCallback);
 8004f22:	f504 630e 	add.w	r3, r4, #2272	@ 0x8e0
     *
     * @see GenericCallback, handleClickEvent, ClickEvent
     */
    void setAction(GenericCallback<const AbstractButton&>& callback)
    {
        action = &callback;
 8004f26:	f8c4 36c8 	str.w	r3, [r4, #1736]	@ 0x6c8
 8004f2a:	f00a fe6f 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004f2e:	4653      	mov	r3, sl
 8004f30:	462a      	mov	r2, r5
 8004f32:	4629      	mov	r1, r5
 8004f34:	f204 701c 	addw	r0, r4, #1820	@ 0x71c
 8004f38:	9600      	str	r6, [sp, #0]
 8004f3a:	f7ff fc5d 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004f3e:	f04f 0305 	mov.w	r3, #5
    flexButtonOK.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8004f42:	9802      	ldr	r0, [sp, #8]
 8004f44:	f8a4 374c 	strh.w	r3, [r4, #1868]	@ 0x74c
 8004f48:	4a48      	ldr	r2, [pc, #288]	@ (800506c <_ZN17UPIScreenViewBaseC1Ev+0x680>)
 8004f4a:	4b4a      	ldr	r3, [pc, #296]	@ (8005074 <_ZN17UPIScreenViewBaseC1Ev+0x688>)
 8004f4c:	4948      	ldr	r1, [pc, #288]	@ (8005070 <_ZN17UPIScreenViewBaseC1Ev+0x684>)
 8004f4e:	f8cd 9000 	str.w	r9, [sp]
 8004f52:	f7ff fd2f 	bl	80049b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
    flexButtonOK.setText(TypedText(T___SINGLEUSE_2PVJ));
 8004f56:	aa12      	add	r2, sp, #72	@ 0x48
        : typedTextId(id)
 8004f58:	2304      	movs	r3, #4
 8004f5a:	9802      	ldr	r0, [sp, #8]
 8004f5c:	4611      	mov	r1, r2
 8004f5e:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004f62:	f8ad 304c 	strh.w	r3, [sp, #76]	@ 0x4c
 8004f66:	f7ff fd31 	bl	80049cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
        text.setPosition(x, y, width, height);
 8004f6a:	4629      	mov	r1, r5
 8004f6c:	4653      	mov	r3, sl
 8004f6e:	f504 60ec 	add.w	r0, r4, #1888	@ 0x760
 8004f72:	2206      	movs	r2, #6
 8004f74:	9600      	str	r6, [sp, #0]
 8004f76:	f7ff fc3f 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
        colorReleased = newColorReleased;
 8004f7a:	4b3f      	ldr	r3, [pc, #252]	@ (8005078 <_ZN17UPIScreenViewBaseC1Ev+0x68c>)
        colorPressed = newColorPressed;
 8004f7c:	4a3f      	ldr	r2, [pc, #252]	@ (800507c <_ZN17UPIScreenViewBaseC1Ev+0x690>)
        handlePressedUpdated();
 8004f7e:	9802      	ldr	r0, [sp, #8]
        colorReleased = newColorReleased;
 8004f80:	f8c4 37a8 	str.w	r3, [r4, #1960]	@ 0x7a8
        colorPressed = newColorPressed;
 8004f84:	f8c4 27ac 	str.w	r2, [r4, #1964]	@ 0x7ac
        handlePressedUpdated();
 8004f88:	f7ff fb20 	bl	80045cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>
    flexButtonOK.setPosition(750, 440, 50, 40);
 8004f8c:	4653      	mov	r3, sl
 8004f8e:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8004f92:	9802      	ldr	r0, [sp, #8]
        visible = vis;
 8004f94:	f884 570d 	strb.w	r5, [r4, #1805]	@ 0x70d
 8004f98:	f240 21ee 	movw	r1, #750	@ 0x2ee
 8004f9c:	f8c4 8718 	str.w	r8, [r4, #1816]	@ 0x718
 8004fa0:	9600      	str	r6, [sp, #0]
 8004fa2:	f7ff fc29 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004fa6:	9902      	ldr	r1, [sp, #8]
 8004fa8:	4638      	mov	r0, r7
 8004faa:	f00a fe2f 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8004fae:	4653      	mov	r3, sl
 8004fb0:	462a      	mov	r2, r5
 8004fb2:	4629      	mov	r1, r5
 8004fb4:	f204 70e4 	addw	r0, r4, #2020	@ 0x7e4
 8004fb8:	9600      	str	r6, [sp, #0]
 8004fba:	f7ff fc1d 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8004fbe:	f04f 0105 	mov.w	r1, #5
    flexButtonExit.setBoxWithBorderColors(touchgfx::Color::getColorFromRGB(0, 102, 153), touchgfx::Color::getColorFromRGB(0, 153, 204), touchgfx::Color::getColorFromRGB(0, 51, 102), touchgfx::Color::getColorFromRGB(51, 102, 153));
 8004fc2:	4b2c      	ldr	r3, [pc, #176]	@ (8005074 <_ZN17UPIScreenViewBaseC1Ev+0x688>)
 8004fc4:	f8a4 1814 	strh.w	r1, [r4, #2068]	@ 0x814
 8004fc8:	4a28      	ldr	r2, [pc, #160]	@ (800506c <_ZN17UPIScreenViewBaseC1Ev+0x680>)
 8004fca:	9803      	ldr	r0, [sp, #12]
 8004fcc:	4928      	ldr	r1, [pc, #160]	@ (8005070 <_ZN17UPIScreenViewBaseC1Ev+0x684>)
 8004fce:	f8cd 9000 	str.w	r9, [sp]
 8004fd2:	f7ff fcef 	bl	80049b4 <_ZN8touchgfx24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEE22setBoxWithBorderColorsENS_9colortypeES3_S3_S3_>
 8004fd6:	f04f 0103 	mov.w	r1, #3
    flexButtonExit.setText(TypedText(T___SINGLEUSE_U6WY));
 8004fda:	9803      	ldr	r0, [sp, #12]
 8004fdc:	f8ad 104c 	strh.w	r1, [sp, #76]	@ 0x4c
 8004fe0:	a912      	add	r1, sp, #72	@ 0x48
 8004fe2:	f8cd b048 	str.w	fp, [sp, #72]	@ 0x48
 8004fe6:	f7ff fcf1 	bl	80049cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE7setTextENS_9TypedTextE>
        text.setPosition(x, y, width, height);
 8004fea:	4629      	mov	r1, r5
 8004fec:	4653      	mov	r3, sl
 8004fee:	f604 0028 	addw	r0, r4, #2088	@ 0x828
 8004ff2:	2206      	movs	r2, #6
 8004ff4:	9600      	str	r6, [sp, #0]
 8004ff6:	f7ff fbff 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
        colorReleased = newColorReleased;
 8004ffa:	4b1f      	ldr	r3, [pc, #124]	@ (8005078 <_ZN17UPIScreenViewBaseC1Ev+0x68c>)
        colorPressed = newColorPressed;
 8004ffc:	4a1f      	ldr	r2, [pc, #124]	@ (800507c <_ZN17UPIScreenViewBaseC1Ev+0x690>)
        handlePressedUpdated();
 8004ffe:	9803      	ldr	r0, [sp, #12]
        colorReleased = newColorReleased;
 8005000:	f8c4 3870 	str.w	r3, [r4, #2160]	@ 0x870
        colorPressed = newColorPressed;
 8005004:	f8c4 2874 	str.w	r2, [r4, #2164]	@ 0x874
        handlePressedUpdated();
 8005008:	f7ff fae0 	bl	80045cc <_ZN8touchgfx15TextButtonStyleINS_24BoxWithBorderButtonStyleINS_18ClickButtonTriggerEEEE20handlePressedUpdatedEv>
    flexButtonExit.setPosition(0, 440, 50, 40);
 800500c:	4653      	mov	r3, sl
 800500e:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8005012:	4629      	mov	r1, r5
 8005014:	9803      	ldr	r0, [sp, #12]
 8005016:	f884 57d5 	strb.w	r5, [r4, #2005]	@ 0x7d5
 800501a:	f8c4 87e0 	str.w	r8, [r4, #2016]	@ 0x7e0
 800501e:	9600      	str	r6, [sp, #0]
 8005020:	f7ff fbea 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
 8005024:	9903      	ldr	r1, [sp, #12]
 8005026:	4638      	mov	r0, r7
 8005028:	f00a fdf0 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 800502c:	230d      	movs	r3, #13
    scalableImage1.setBitmap(touchgfx::Bitmap(BITMAP_UPIICON_ID));
 800502e:	a912      	add	r1, sp, #72	@ 0x48
 8005030:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005032:	f8ad 3048 	strh.w	r3, [sp, #72]	@ 0x48
 8005036:	f00e fac5 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
    scalableImage1.setPosition(15, 20, 346, 135);
 800503a:	2387      	movs	r3, #135	@ 0x87
 800503c:	2214      	movs	r2, #20
 800503e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005040:	210f      	movs	r1, #15
 8005042:	9300      	str	r3, [sp, #0]
 8005044:	f44f 73ad 	mov.w	r3, #346	@ 0x15a
 8005048:	f7ff fbd6 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    scalableImage1.setScalingAlgorithm(touchgfx::ScalableImage::NEAREST_NEIGHBOR);
 800504c:	4629      	mov	r1, r5
 800504e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8005050:	f00d fb0b 	bl	801266a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>
 8005054:	4638      	mov	r0, r7
 8005056:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8005058:	f00a fdd8 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 800505c:	4620      	mov	r0, r4
 800505e:	b015      	add	sp, #84	@ 0x54
 8005060:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005064:	24025e84 	.word	0x24025e84
 8005068:	0802a124 	.word	0x0802a124
 800506c:	ff0099cc 	.word	0xff0099cc
 8005070:	ff006699 	.word	0xff006699
 8005074:	ff003366 	.word	0xff003366
 8005078:	ffb4d1b5 	.word	0xffb4d1b5
 800507c:	ff0a0a0a 	.word	0xff0a0a0a
 8005080:	ff336699 	.word	0xff336699

08005084 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8005084:	b510      	push	{r4, lr}
    pointArray = 0;
 8005086:	2400      	movs	r4, #0
 8005088:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800508a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 800508c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800508e:	601c      	str	r4, [r3, #0]
}
 8005090:	bd10      	pop	{r4, pc}

08005092 <_ZN14CustomKeyboardD1Ev>:
 */
class CustomKeyboard : public Container
{
public:
    CustomKeyboard();
    virtual ~CustomKeyboard() { }
 8005092:	4770      	bx	lr

08005094 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED1Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005094:	4770      	bx	lr

08005096 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED1Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005096:	4770      	bx	lr

08005098 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvE7executeEt>:
    virtual void execute(T1 t1)
 8005098:	b430      	push	{r4, r5}
        (pobject->*pmemfun)(t1);
 800509a:	6844      	ldr	r4, [r0, #4]
    virtual void execute(T1 t1)
 800509c:	4603      	mov	r3, r0
        (pobject->*pmemfun)(t1);
 800509e:	68c2      	ldr	r2, [r0, #12]
 80050a0:	689b      	ldr	r3, [r3, #8]
 80050a2:	1055      	asrs	r5, r2, #1
 80050a4:	eb04 0062 	add.w	r0, r4, r2, asr #1
 80050a8:	07d2      	lsls	r2, r2, #31
 80050aa:	bf48      	it	mi
 80050ac:	5962      	ldrmi	r2, [r4, r5]
    }
 80050ae:	bc30      	pop	{r4, r5}
        (pobject->*pmemfun)(t1);
 80050b0:	bf48      	it	mi
 80050b2:	58d3      	ldrmi	r3, [r2, r3]
 80050b4:	4718      	bx	r3

080050b6 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv>:
    virtual bool isValid() const
 80050b6:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80050b8:	6840      	ldr	r0, [r0, #4]
 80050ba:	b130      	cbz	r0, 80050ca <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x14>
 80050bc:	689a      	ldr	r2, [r3, #8]
 80050be:	b91a      	cbnz	r2, 80050c8 <_ZNK8touchgfx8CallbackI14CustomKeyboardtvvE7isValidEv+0x12>
 80050c0:	68d8      	ldr	r0, [r3, #12]
 80050c2:	f000 0001 	and.w	r0, r0, #1
 80050c6:	4770      	bx	lr
 80050c8:	2001      	movs	r0, #1
    }
 80050ca:	4770      	bx	lr

080050cc <_ZN8touchgfx8CallbackI14CustomKeyboardvvvE7executeEv>:
    virtual void execute()
 80050cc:	b410      	push	{r4}
        (pobject->*pmemfun)();
 80050ce:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 80050d0:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 80050d2:	68c2      	ldr	r2, [r0, #12]
 80050d4:	689b      	ldr	r3, [r3, #8]
 80050d6:	1054      	asrs	r4, r2, #1
 80050d8:	eb01 0062 	add.w	r0, r1, r2, asr #1
 80050dc:	07d2      	lsls	r2, r2, #31
 80050de:	bf48      	it	mi
 80050e0:	590a      	ldrmi	r2, [r1, r4]
    }
 80050e2:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 80050e6:	bf48      	it	mi
 80050e8:	58d3      	ldrmi	r3, [r2, r3]
 80050ea:	4718      	bx	r3

080050ec <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv>:
    virtual bool isValid() const
 80050ec:	4603      	mov	r3, r0
        return (pobject != 0) && (pmemfun != 0);
 80050ee:	6840      	ldr	r0, [r0, #4]
 80050f0:	b130      	cbz	r0, 8005100 <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x14>
 80050f2:	689a      	ldr	r2, [r3, #8]
 80050f4:	b91a      	cbnz	r2, 80050fe <_ZNK8touchgfx8CallbackI14CustomKeyboardvvvE7isValidEv+0x12>
 80050f6:	68d8      	ldr	r0, [r3, #12]
 80050f8:	f000 0001 	and.w	r0, r0, #1
 80050fc:	4770      	bx	lr
 80050fe:	2001      	movs	r0, #1
    }
 8005100:	4770      	bx	lr

08005102 <_ZN8touchgfx8CallbackI14CustomKeyboardvvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8005102:	b510      	push	{r4, lr}
 8005104:	4604      	mov	r4, r0
 8005106:	2110      	movs	r1, #16
 8005108:	f020 ff84 	bl	8026014 <_ZdlPvj>
 800510c:	4620      	mov	r0, r4
 800510e:	bd10      	pop	{r4, pc}

08005110 <_ZN8touchgfx8CallbackI14CustomKeyboardtvvED0Ev>:
struct Callback<dest_type, T1, void, void> : public GenericCallback<T1>
 8005110:	b510      	push	{r4, lr}
 8005112:	4604      	mov	r4, r0
 8005114:	2110      	movs	r1, #16
 8005116:	f020 ff7d 	bl	8026014 <_ZdlPvj>
 800511a:	4620      	mov	r0, r4
 800511c:	bd10      	pop	{r4, pc}

0800511e <_ZN14CustomKeyboardD0Ev>:
 800511e:	b510      	push	{r4, lr}
 8005120:	4604      	mov	r4, r0
 8005122:	f44f 71ee 	mov.w	r1, #476	@ 0x1dc
 8005126:	f020 ff75 	bl	8026014 <_ZdlPvj>
 800512a:	4620      	mov	r0, r4
 800512c:	bd10      	pop	{r4, pc}
	...

08005130 <_ZN14CustomKeyboard17setKeyMappingListEv>:
    add(keyboard);
    add(modeBtnTextArea);
}

void CustomKeyboard::setKeyMappingList()
{
 8005130:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005132:	4604      	mov	r4, r0
 8005134:	4b13      	ldr	r3, [pc, #76]	@ (8005184 <_ZN14CustomKeyboard17setKeyMappingListEv+0x54>)
    if (alphaKeys)
    {
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8005136:	f500 70a8 	add.w	r0, r0, #336	@ 0x150
    if (alphaKeys)
 800513a:	f894 21d8 	ldrb.w	r2, [r4, #472]	@ 0x1d8
        if (uppercaseKeys)
        {
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 800513e:	f104 052c 	add.w	r5, r4, #44	@ 0x2c
 8005142:	9300      	str	r3, [sp, #0]
    if (alphaKeys)
 8005144:	b18a      	cbz	r2, 800516a <_ZN14CustomKeyboard17setKeyMappingListEv+0x3a>
 8005146:	2302      	movs	r3, #2
        modeBtnTextArea.setTypedText(TypedText(T_ALPHAMODE));
 8005148:	4669      	mov	r1, sp
 800514a:	f8ad 3004 	strh.w	r3, [sp, #4]
 800514e:	f00e f815 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 8005152:	f894 31d9 	ldrb.w	r3, [r4, #473]	@ 0x1d9
 8005156:	b133      	cbz	r3, 8005166 <_ZN14CustomKeyboard17setKeyMappingListEv+0x36>
            keyboard.setKeymappingList(&keyMappingListAlphaUpper);
 8005158:	490b      	ldr	r1, [pc, #44]	@ (8005188 <_ZN14CustomKeyboard17setKeyMappingListEv+0x58>)
        {
            keyboard.setKeymappingList(&keyMappingListNumUpper);
        }
        else
        {
            keyboard.setKeymappingList(&keyMappingListNumLower);
 800515a:	4628      	mov	r0, r5
        }
    }
}
 800515c:	b003      	add	sp, #12
 800515e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8005162:	f00f b9e9 	b.w	8014538 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>
            keyboard.setKeymappingList(&keyMappingListAlphaLower);
 8005166:	4909      	ldr	r1, [pc, #36]	@ (800518c <_ZN14CustomKeyboard17setKeyMappingListEv+0x5c>)
 8005168:	e7f7      	b.n	800515a <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 800516a:	2301      	movs	r3, #1
        modeBtnTextArea.setTypedText(TypedText(T_NUMMODE));
 800516c:	4669      	mov	r1, sp
 800516e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005172:	f00e f803 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
        if (uppercaseKeys)
 8005176:	f894 31d9 	ldrb.w	r3, [r4, #473]	@ 0x1d9
 800517a:	b10b      	cbz	r3, 8005180 <_ZN14CustomKeyboard17setKeyMappingListEv+0x50>
            keyboard.setKeymappingList(&keyMappingListNumUpper);
 800517c:	4904      	ldr	r1, [pc, #16]	@ (8005190 <_ZN14CustomKeyboard17setKeyMappingListEv+0x60>)
 800517e:	e7ec      	b.n	800515a <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
            keyboard.setKeymappingList(&keyMappingListNumLower);
 8005180:	4904      	ldr	r1, [pc, #16]	@ (8005194 <_ZN14CustomKeyboard17setKeyMappingListEv+0x64>)
 8005182:	e7ea      	b.n	800515a <_ZN14CustomKeyboard17setKeyMappingListEv+0x2a>
 8005184:	080299c8 	.word	0x080299c8
 8005188:	0802a594 	.word	0x0802a594
 800518c:	0802a614 	.word	0x0802a614
 8005190:	0802a494 	.word	0x0802a494
 8005194:	0802a514 	.word	0x0802a514

08005198 <_ZN14CustomKeyboard23backspacePressedHandlerEv>:

void CustomKeyboard::backspacePressedHandler()
{
 8005198:	b538      	push	{r3, r4, r5, lr}
     *
     * @see setBufferPosition
     */
    uint16_t getBufferPosition()
    {
        return bufferPosition;
 800519a:	f8b0 5062 	ldrh.w	r5, [r0, #98]	@ 0x62
 800519e:	4604      	mov	r4, r0
    uint16_t pos = keyboard.getBufferPosition();
    if (pos > 0)
 80051a0:	b1ad      	cbz	r5, 80051ce <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x36>
    {
        //Delete the previous entry in the buffer and decrement the position.
        buffer[pos - 1] = 0;
 80051a2:	f105 0387 	add.w	r3, r5, #135	@ 0x87
 80051a6:	2200      	movs	r2, #0
        keyboard.setBufferPosition(pos - 1);
 80051a8:	1e69      	subs	r1, r5, #1
        buffer[pos - 1] = 0;
 80051aa:	eb00 0343 	add.w	r3, r0, r3, lsl #1
        keyboard.setBufferPosition(pos - 1);
 80051ae:	302c      	adds	r0, #44	@ 0x2c
 80051b0:	b289      	uxth	r1, r1
        buffer[pos - 1] = 0;
 80051b2:	809a      	strh	r2, [r3, #4]
        keyboard.setBufferPosition(pos - 1);
 80051b4:	f00f f9bc 	bl	8014530 <_ZN8touchgfx8Keyboard17setBufferPositionEt>

        //Change keymappings if we have reached the first position.
        if (1 == pos)
 80051b8:	2d01      	cmp	r5, #1
 80051ba:	d108      	bne.n	80051ce <_ZN14CustomKeyboard23backspacePressedHandlerEv+0x36>
        {
            firstCharacterEntry = true;
            uppercaseKeys = true;
            setKeyMappingList();
 80051bc:	4620      	mov	r0, r4
            firstCharacterEntry = true;
 80051be:	f884 51da 	strb.w	r5, [r4, #474]	@ 0x1da
            uppercaseKeys = true;
 80051c2:	f884 51d9 	strb.w	r5, [r4, #473]	@ 0x1d9
        }
    }
}
 80051c6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            setKeyMappingList();
 80051ca:	f7ff bfb1 	b.w	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>
}
 80051ce:	bd38      	pop	{r3, r4, r5, pc}

080051d0 <_ZN14CustomKeyboard22capslockPressedHandlerEv>:

void CustomKeyboard::capslockPressedHandler()
{
    uppercaseKeys = !uppercaseKeys;
 80051d0:	f890 21d9 	ldrb.w	r2, [r0, #473]	@ 0x1d9
 80051d4:	f082 0201 	eor.w	r2, r2, #1
 80051d8:	f880 21d9 	strb.w	r2, [r0, #473]	@ 0x1d9
    setKeyMappingList();
 80051dc:	f7ff bfa8 	b.w	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>

080051e0 <_ZN14CustomKeyboard18modePressedHandlerEv>:
{
    alphaKeys = !alphaKeys;

    // if we have changed back to alpha and still has no chars in the buffer,
    // we show upper case letters.
    if (firstCharacterEntry && alphaKeys)
 80051e0:	f890 21da 	ldrb.w	r2, [r0, #474]	@ 0x1da
    alphaKeys = !alphaKeys;
 80051e4:	f890 11d8 	ldrb.w	r1, [r0, #472]	@ 0x1d8
    {
        uppercaseKeys = true;
 80051e8:	2a00      	cmp	r2, #0
    alphaKeys = !alphaKeys;
 80051ea:	f081 0101 	eor.w	r1, r1, #1
        uppercaseKeys = true;
 80051ee:	bf18      	it	ne
 80051f0:	460a      	movne	r2, r1
    alphaKeys = !alphaKeys;
 80051f2:	f880 11d8 	strb.w	r1, [r0, #472]	@ 0x1d8
    if (firstCharacterEntry && alphaKeys)
 80051f6:	f880 21d9 	strb.w	r2, [r0, #473]	@ 0x1d9
    }
    else
    {
        uppercaseKeys = false;
    }
    setKeyMappingList();
 80051fa:	f7ff bf99 	b.w	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>

080051fe <_ZN14CustomKeyboard17keyPressedhandlerEt>:
}

void CustomKeyboard::keyPressedhandler(Unicode::UnicodeChar keyChar)
{
    // After the first keypress, the keyboard will shift to lowercase.
    if (firstCharacterEntry && keyChar != 0)
 80051fe:	f890 21da 	ldrb.w	r2, [r0, #474]	@ 0x1da
 8005202:	b13a      	cbz	r2, 8005214 <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
 8005204:	b131      	cbz	r1, 8005214 <_ZN14CustomKeyboard17keyPressedhandlerEt+0x16>
    {
        firstCharacterEntry = false;
 8005206:	2200      	movs	r2, #0
 8005208:	f880 21da 	strb.w	r2, [r0, #474]	@ 0x1da
        uppercaseKeys = false;
 800520c:	f880 21d9 	strb.w	r2, [r0, #473]	@ 0x1d9
        setKeyMappingList();
 8005210:	f7ff bf8e 	b.w	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>
    }
}
 8005214:	4770      	bx	lr

08005216 <_ZN14CustomKeyboard11clearBufferEv>:
{
	return keyboard.getBuffer();
}

void CustomKeyboard::clearBuffer ()
{
 8005216:	b510      	push	{r4, lr}
 8005218:	4604      	mov	r4, r0
	memset(buffer, 0, BUFFER_SIZE+1);
 800521a:	221f      	movs	r2, #31
 800521c:	2100      	movs	r1, #0
 800521e:	f500 708a 	add.w	r0, r0, #276	@ 0x114
 8005222:	f021 fd43 	bl	8026cac <memset>
	keyboard.setBufferPosition(0);
 8005226:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800522a:	2100      	movs	r1, #0
 800522c:	f00f f980 	bl	8014530 <_ZN8touchgfx8Keyboard17setBufferPositionEt>
    firstCharacterEntry = true;
 8005230:	2301      	movs	r3, #1
    uppercaseKeys = true;
    setKeyMappingList();
 8005232:	4620      	mov	r0, r4
    firstCharacterEntry = true;
 8005234:	f884 31da 	strb.w	r3, [r4, #474]	@ 0x1da
    uppercaseKeys = true;
 8005238:	f884 31d9 	strb.w	r3, [r4, #473]	@ 0x1d9
 800523c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    setKeyMappingList();
 8005240:	f7ff bf76 	b.w	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>

08005244 <_ZN14CustomKeyboardC1Ev>:
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005244:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
    firstCharacterEntry(false)
 8005248:	4b4c      	ldr	r3, [pc, #304]	@ (800537c <_ZN14CustomKeyboardC1Ev+0x138>)
        : x(0), y(0), width(0), height(0)
 800524a:	2500      	movs	r5, #0
 800524c:	4606      	mov	r6, r0
          touchable(false),
 800524e:	f44f 7780 	mov.w	r7, #256	@ 0x100
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005252:	4604      	mov	r4, r0
 8005254:	6285      	str	r5, [r0, #40]	@ 0x28
 8005256:	8487      	strh	r7, [r0, #36]	@ 0x24
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005258:	f04f 39ff 	mov.w	r9, #4294967295
    modeBtnTextArea(),
 800525c:	f504 78a8 	add.w	r8, r4, #336	@ 0x150
        : x(0), y(0), width(0), height(0)
 8005260:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8005264:	e9c0 5503 	strd	r5, r5, [r0, #12]
          nextSibling(0),
 8005268:	e9c0 5505 	strd	r5, r5, [r0, #20]
          cachedAbsX(0),
 800526c:	e9c0 5507 	strd	r5, r5, [r0, #28]
    firstCharacterEntry(false)
 8005270:	f846 3b2c 	str.w	r3, [r6], #44
CustomKeyboard::CustomKeyboard() : keyboard(),
 8005274:	4630      	mov	r0, r6
 8005276:	f00e fe8d 	bl	8013f94 <_ZN8touchgfx8KeyboardC1Ev>
        : Widget(), typedText(TYPED_TEXT_INVALID), color(0), linespace(0), alpha(255), indentation(0), rotation(TEXT_ROTATE_0), wideTextAction(WIDE_TEXT_NONE), boundingArea()
 800527a:	4b41      	ldr	r3, [pc, #260]	@ (8005380 <_ZN14CustomKeyboardC1Ev+0x13c>)
        : pobject(pObject), pmemfun(pmemfun_0)
 800527c:	4a41      	ldr	r2, [pc, #260]	@ (8005384 <_ZN14CustomKeyboardC1Ev+0x140>)
    keyboard.setLayout(&layout);
 800527e:	4630      	mov	r0, r6
 8005280:	f8c4 3150 	str.w	r3, [r4, #336]	@ 0x150
 8005284:	4b40      	ldr	r3, [pc, #256]	@ (8005388 <_ZN14CustomKeyboardC1Ev+0x144>)
    layout.callbackAreaArray[0].callback = &capslockPressed;
 8005286:	4941      	ldr	r1, [pc, #260]	@ (800538c <_ZN14CustomKeyboardC1Ev+0x148>)
 8005288:	f8c4 3178 	str.w	r3, [r4, #376]	@ 0x178
 800528c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
          touchable(false),
 8005290:	f8a4 7174 	strh.w	r7, [r4, #372]	@ 0x174
    alphaKeys(true),
 8005294:	2701      	movs	r7, #1
 8005296:	f8a4 317c 	strh.w	r3, [r4, #380]	@ 0x17c
 800529a:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
        : color(col)
 800529e:	f8c4 5180 	str.w	r5, [r4, #384]	@ 0x180
 80052a2:	f8c4 3184 	str.w	r3, [r4, #388]	@ 0x184
 80052a6:	4b3a      	ldr	r3, [pc, #232]	@ (8005390 <_ZN14CustomKeyboardC1Ev+0x14c>)
 80052a8:	f8a4 5188 	strh.w	r5, [r4, #392]	@ 0x188
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80052ac:	f8c4 518c 	str.w	r5, [r4, #396]	@ 0x18c
 80052b0:	e9c4 3466 	strd	r3, r4, [r4, #408]	@ 0x198
 80052b4:	e9c4 346a 	strd	r3, r4, [r4, #424]	@ 0x1a8
 80052b8:	e9c4 346e 	strd	r3, r4, [r4, #440]	@ 0x1b8
 80052bc:	4b35      	ldr	r3, [pc, #212]	@ (8005394 <_ZN14CustomKeyboardC1Ev+0x150>)
 80052be:	e9c4 3570 	strd	r3, r5, [r4, #448]	@ 0x1c0
        : pobject(pObject), pmemfun(pmemfun_1)
 80052c2:	4b35      	ldr	r3, [pc, #212]	@ (8005398 <_ZN14CustomKeyboardC1Ev+0x154>)
        : pobject(pObject), pmemfun(pmemfun_0)
 80052c4:	e9c4 2568 	strd	r2, r5, [r4, #416]	@ 0x1a0
        : pobject(pObject), pmemfun(pmemfun_1)
 80052c8:	e9c4 3472 	strd	r3, r4, [r4, #456]	@ 0x1c8
        : pobject(pObject), pmemfun(pmemfun_0)
 80052cc:	4a33      	ldr	r2, [pc, #204]	@ (800539c <_ZN14CustomKeyboardC1Ev+0x158>)
        : pobject(pObject), pmemfun(pmemfun_1)
 80052ce:	4b34      	ldr	r3, [pc, #208]	@ (80053a0 <_ZN14CustomKeyboardC1Ev+0x15c>)
        : pobject(pObject), pmemfun(pmemfun_0)
 80052d0:	e9c4 256c 	strd	r2, r5, [r4, #432]	@ 0x1b0
        : x(0), y(0), width(0), height(0)
 80052d4:	e9c4 5555 	strd	r5, r5, [r4, #340]	@ 0x154
    layout.callbackAreaArray[0].callback = &capslockPressed;
 80052d8:	f504 72cc 	add.w	r2, r4, #408	@ 0x198
 80052dc:	e9c4 5557 	strd	r5, r5, [r4, #348]	@ 0x15c
          nextSibling(0),
 80052e0:	e9c4 5559 	strd	r5, r5, [r4, #356]	@ 0x164
          cachedAbsX(0),
 80052e4:	e9c4 555b 	strd	r5, r5, [r4, #364]	@ 0x16c
              text(0)
 80052e8:	e9c4 9564 	strd	r9, r5, [r4, #400]	@ 0x190
        : pobject(pObject), pmemfun(pmemfun_1)
 80052ec:	e9c4 3574 	strd	r3, r5, [r4, #464]	@ 0x1d0
 80052f0:	68cb      	ldr	r3, [r1, #12]
    alphaKeys(true),
 80052f2:	f8a4 71d8 	strh.w	r7, [r4, #472]	@ 0x1d8
    firstCharacterEntry(false)
 80052f6:	f884 51da 	strb.w	r5, [r4, #474]	@ 0x1da
    layout.callbackAreaArray[0].callback = &capslockPressed;
 80052fa:	609a      	str	r2, [r3, #8]
    layout.callbackAreaArray[1].callback = &backspacePressed;
 80052fc:	f504 72d4 	add.w	r2, r4, #424	@ 0x1a8
 8005300:	619a      	str	r2, [r3, #24]
    layout.callbackAreaArray[2].callback = &modePressed;
 8005302:	f504 72dc 	add.w	r2, r4, #440	@ 0x1b8
 8005306:	629a      	str	r2, [r3, #40]	@ 0x28
    keyboard.setLayout(&layout);
 8005308:	f00e febd 	bl	8014086 <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>
    keyboard.setKeyListener(keyPressed);
 800530c:	f504 73e4 	add.w	r3, r4, #456	@ 0x1c8
    keyboard.setPosition(0, 0, 320, 240);
 8005310:	462a      	mov	r2, r5
 8005312:	4629      	mov	r1, r5
     *
     * @note Backspace, shift and mode keys report a 0 as value.
     */
    void setKeyListener(GenericCallback<Unicode::UnicodeChar>& callback)
    {
        keyListener = &callback;
 8005314:	65a3      	str	r3, [r4, #88]	@ 0x58
 8005316:	23f0      	movs	r3, #240	@ 0xf0
 8005318:	4630      	mov	r0, r6
 800531a:	9300      	str	r3, [sp, #0]
 800531c:	f44f 73a0 	mov.w	r3, #320	@ 0x140
 8005320:	f7ff fa6a 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    keyboard.setTextIndentation();
 8005324:	4630      	mov	r0, r6
 8005326:	f00e fedf 	bl	80140e8 <_ZN8touchgfx8Keyboard18setTextIndentationEv>
    memset(buffer, 0, sizeof(buffer));
 800532a:	f504 738a 	add.w	r3, r4, #276	@ 0x114
 800532e:	4629      	mov	r1, r5
 8005330:	223c      	movs	r2, #60	@ 0x3c
 8005332:	4618      	mov	r0, r3
 8005334:	f021 fcba 	bl	8026cac <memset>
    keyboard.setBuffer(buffer, BUFFER_SIZE);
 8005338:	221e      	movs	r2, #30
 800533a:	4601      	mov	r1, r0
 800533c:	4630      	mov	r0, r6
 800533e:	f00e fe97 	bl	8014070 <_ZN8touchgfx8Keyboard9setBufferEPtt>
    modeBtnTextArea.setPosition(5, 196, 56, 40);
 8005342:	2328      	movs	r3, #40	@ 0x28
 8005344:	22c4      	movs	r2, #196	@ 0xc4
 8005346:	2105      	movs	r1, #5
 8005348:	4640      	mov	r0, r8
    uppercaseKeys = true;
 800534a:	f884 71d9 	strb.w	r7, [r4, #473]	@ 0x1d9
    firstCharacterEntry = true;
 800534e:	f884 71da 	strb.w	r7, [r4, #474]	@ 0x1da
    modeBtnTextArea.setPosition(5, 196, 56, 40);
 8005352:	9300      	str	r3, [sp, #0]
 8005354:	2338      	movs	r3, #56	@ 0x38
 8005356:	f7ff fa4f 	bl	80047f8 <_ZN8touchgfx8Drawable11setPositionEssss>
    setKeyMappingList();
 800535a:	4620      	mov	r0, r4
        color = newColor;
 800535c:	f8c4 9180 	str.w	r9, [r4, #384]	@ 0x180
 8005360:	f7ff fee6 	bl	8005130 <_ZN14CustomKeyboard17setKeyMappingListEv>
    add(keyboard);
 8005364:	4631      	mov	r1, r6
 8005366:	4620      	mov	r0, r4
 8005368:	f00a fc50 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
    add(modeBtnTextArea);
 800536c:	4620      	mov	r0, r4
 800536e:	4641      	mov	r1, r8
 8005370:	f00a fc4c 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 8005374:	4620      	mov	r0, r4
 8005376:	b003      	add	sp, #12
 8005378:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800537c:	0802a408 	.word	0x0802a408
 8005380:	0802ae10 	.word	0x0802ae10
 8005384:	080051d1 	.word	0x080051d1
 8005388:	080299c8 	.word	0x080299c8
 800538c:	24000038 	.word	0x24000038
 8005390:	0802a3d8 	.word	0x0802a3d8
 8005394:	080051e1 	.word	0x080051e1
 8005398:	0802a3f0 	.word	0x0802a3f0
 800539c:	08005199 	.word	0x08005199
 80053a0:	080051ff 	.word	0x080051ff

080053a4 <_ZN14CustomKeyboard9getBufferEv>:
}
 80053a4:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 80053a6:	4770      	bx	lr

080053a8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 80053a8:	4be5      	ldr	r3, [pc, #916]	@ (8005740 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x398>)
 80053aa:	2201      	movs	r2, #1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80053ac:	201a      	movs	r0, #26
 80053ae:	2109      	movs	r1, #9
 80053b0:	f04f 0c5b 	mov.w	ip, #91	@ 0x5b
 80053b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053b8:	2502      	movs	r5, #2
 80053ba:	243d      	movs	r4, #61	@ 0x3d
 80053bc:	f04f 0b07 	mov.w	fp, #7
 80053c0:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 80053c4:	731d      	strb	r5, [r3, #12]
 80053c6:	2503      	movs	r5, #3
 80053c8:	2693      	movs	r6, #147	@ 0x93
 80053ca:	f04f 0a23 	mov.w	sl, #35	@ 0x23
 80053ce:	761d      	strb	r5, [r3, #24]
 80053d0:	2504      	movs	r5, #4
 80053d2:	2777      	movs	r7, #119	@ 0x77
 80053d4:	701a      	strb	r2, [r3, #0]
 80053d6:	f883 5024 	strb.w	r5, [r3, #36]	@ 0x24
 80053da:	2505      	movs	r5, #5
 80053dc:	2228      	movs	r2, #40	@ 0x28
 80053de:	f8a3 b002 	strh.w	fp, [r3, #2]
 80053e2:	f883 5030 	strb.w	r5, [r3, #48]	@ 0x30
 80053e6:	2506      	movs	r5, #6
 80053e8:	809c      	strh	r4, [r3, #4]
 80053ea:	f04f 08cb 	mov.w	r8, #203	@ 0xcb
 80053ee:	f883 503c 	strb.w	r5, [r3, #60]	@ 0x3c
 80053f2:	f04f 05af 	mov.w	r5, #175	@ 0xaf
 80053f6:	80d8      	strh	r0, [r3, #6]
 80053f8:	f240 1903 	movw	r9, #259	@ 0x103
 80053fc:	811a      	strh	r2, [r3, #8]
 80053fe:	8159      	strh	r1, [r3, #10]
 8005400:	f8a3 a00e 	strh.w	sl, [r3, #14]
 8005404:	821c      	strh	r4, [r3, #16]
 8005406:	8258      	strh	r0, [r3, #18]
 8005408:	829a      	strh	r2, [r3, #20]
 800540a:	82d9      	strh	r1, [r3, #22]
 800540c:	f8a3 e01a 	strh.w	lr, [r3, #26]
 8005410:	839c      	strh	r4, [r3, #28]
 8005412:	83d8      	strh	r0, [r3, #30]
 8005414:	841a      	strh	r2, [r3, #32]
 8005416:	8459      	strh	r1, [r3, #34]	@ 0x22
 8005418:	f8a3 c026 	strh.w	ip, [r3, #38]	@ 0x26
 800541c:	851c      	strh	r4, [r3, #40]	@ 0x28
 800541e:	8558      	strh	r0, [r3, #42]	@ 0x2a
 8005420:	859a      	strh	r2, [r3, #44]	@ 0x2c
 8005422:	85d9      	strh	r1, [r3, #46]	@ 0x2e
 8005424:	869c      	strh	r4, [r3, #52]	@ 0x34
 8005426:	86d8      	strh	r0, [r3, #54]	@ 0x36
 8005428:	871a      	strh	r2, [r3, #56]	@ 0x38
 800542a:	8759      	strh	r1, [r3, #58]	@ 0x3a
 800542c:	865f      	strh	r7, [r3, #50]	@ 0x32
 800542e:	87de      	strh	r6, [r3, #62]	@ 0x3e
 8005430:	f8a3 504a 	strh.w	r5, [r3, #74]	@ 0x4a
 8005434:	f04f 0508 	mov.w	r5, #8
 8005438:	f8a3 8056 	strh.w	r8, [r3, #86]	@ 0x56
 800543c:	f04f 08e7 	mov.w	r8, #231	@ 0xe7
 8005440:	f883 5054 	strb.w	r5, [r3, #84]	@ 0x54
 8005444:	f04f 050a 	mov.w	r5, #10
 8005448:	f8a3 4040 	strh.w	r4, [r3, #64]	@ 0x40
 800544c:	f883 506c 	strb.w	r5, [r3, #108]	@ 0x6c
 8005450:	f04f 050b 	mov.w	r5, #11
 8005454:	f8a3 0042 	strh.w	r0, [r3, #66]	@ 0x42
 8005458:	f883 5078 	strb.w	r5, [r3, #120]	@ 0x78
 800545c:	f240 151f 	movw	r5, #287	@ 0x11f
 8005460:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 8005464:	f8a3 1046 	strh.w	r1, [r3, #70]	@ 0x46
 8005468:	f883 b048 	strb.w	fp, [r3, #72]	@ 0x48
 800546c:	f8a3 404c 	strh.w	r4, [r3, #76]	@ 0x4c
 8005470:	f8a3 004e 	strh.w	r0, [r3, #78]	@ 0x4e
 8005474:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 8005478:	f8a3 1052 	strh.w	r1, [r3, #82]	@ 0x52
 800547c:	f8a3 4058 	strh.w	r4, [r3, #88]	@ 0x58
 8005480:	f8a3 005a 	strh.w	r0, [r3, #90]	@ 0x5a
 8005484:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 8005488:	f8a3 105e 	strh.w	r1, [r3, #94]	@ 0x5e
 800548c:	f883 1060 	strb.w	r1, [r3, #96]	@ 0x60
 8005490:	f8a3 4064 	strh.w	r4, [r3, #100]	@ 0x64
 8005494:	f8a3 0066 	strh.w	r0, [r3, #102]	@ 0x66
 8005498:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 800549c:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
 80054a0:	f8a3 906e 	strh.w	r9, [r3, #110]	@ 0x6e
 80054a4:	f8a3 4070 	strh.w	r4, [r3, #112]	@ 0x70
 80054a8:	f8a3 0072 	strh.w	r0, [r3, #114]	@ 0x72
 80054ac:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 80054b0:	f8a3 1076 	strh.w	r1, [r3, #118]	@ 0x76
 80054b4:	f8a3 507a 	strh.w	r5, [r3, #122]	@ 0x7a
 80054b8:	f8a3 407c 	strh.w	r4, [r3, #124]	@ 0x7c
 80054bc:	f04f 040c 	mov.w	r4, #12
 80054c0:	f8a3 007e 	strh.w	r0, [r3, #126]	@ 0x7e
 80054c4:	f8a3 8062 	strh.w	r8, [r3, #98]	@ 0x62
 80054c8:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 80054cc:	f8a3 b086 	strh.w	fp, [r3, #134]	@ 0x86
 80054d0:	f04f 0b0d 	mov.w	fp, #13
 80054d4:	f8a3 a092 	strh.w	sl, [r3, #146]	@ 0x92
 80054d8:	f04f 0a0e 	mov.w	sl, #14
 80054dc:	f883 b090 	strb.w	fp, [r3, #144]	@ 0x90
 80054e0:	f04f 0b10 	mov.w	fp, #16
 80054e4:	f883 4084 	strb.w	r4, [r3, #132]	@ 0x84
 80054e8:	2469      	movs	r4, #105	@ 0x69
 80054ea:	f883 b0b4 	strb.w	fp, [r3, #180]	@ 0xb4
 80054ee:	f04f 0b11 	mov.w	fp, #17
 80054f2:	f883 a09c 	strb.w	sl, [r3, #156]	@ 0x9c
 80054f6:	f04f 0a0f 	mov.w	sl, #15
 80054fa:	f883 b0c0 	strb.w	fp, [r3, #192]	@ 0xc0
 80054fe:	f04f 0b12 	mov.w	fp, #18
 8005502:	f8a3 1082 	strh.w	r1, [r3, #130]	@ 0x82
 8005506:	f8a3 4088 	strh.w	r4, [r3, #136]	@ 0x88
 800550a:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
 800550e:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
 8005512:	f8a3 108e 	strh.w	r1, [r3, #142]	@ 0x8e
 8005516:	f8a3 4094 	strh.w	r4, [r3, #148]	@ 0x94
 800551a:	f8a3 0096 	strh.w	r0, [r3, #150]	@ 0x96
 800551e:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
 8005522:	f8a3 109a 	strh.w	r1, [r3, #154]	@ 0x9a
 8005526:	f8a3 e09e 	strh.w	lr, [r3, #158]	@ 0x9e
 800552a:	f8a3 40a0 	strh.w	r4, [r3, #160]	@ 0xa0
 800552e:	f8a3 00a2 	strh.w	r0, [r3, #162]	@ 0xa2
 8005532:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 8005536:	f8a3 10a6 	strh.w	r1, [r3, #166]	@ 0xa6
 800553a:	f8a3 c0aa 	strh.w	ip, [r3, #170]	@ 0xaa
 800553e:	f8a3 40ac 	strh.w	r4, [r3, #172]	@ 0xac
 8005542:	f8a3 00ae 	strh.w	r0, [r3, #174]	@ 0xae
 8005546:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 800554a:	f8a3 10b2 	strh.w	r1, [r3, #178]	@ 0xb2
 800554e:	f8a3 40b8 	strh.w	r4, [r3, #184]	@ 0xb8
 8005552:	f8a3 00ba 	strh.w	r0, [r3, #186]	@ 0xba
 8005556:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
 800555a:	f8a3 10be 	strh.w	r1, [r3, #190]	@ 0xbe
 800555e:	f883 a0a8 	strb.w	sl, [r3, #168]	@ 0xa8
 8005562:	f8a3 70b6 	strh.w	r7, [r3, #182]	@ 0xb6
 8005566:	f8a3 60c2 	strh.w	r6, [r3, #194]	@ 0xc2
 800556a:	f883 b0cc 	strb.w	fp, [r3, #204]	@ 0xcc
 800556e:	f04f 0baf 	mov.w	fp, #175	@ 0xaf
 8005572:	f8a3 40c4 	strh.w	r4, [r3, #196]	@ 0xc4
 8005576:	f8a3 b0ce 	strh.w	fp, [r3, #206]	@ 0xce
 800557a:	f04f 0b13 	mov.w	fp, #19
 800557e:	f8a3 40d0 	strh.w	r4, [r3, #208]	@ 0xd0
 8005582:	f883 b0d8 	strb.w	fp, [r3, #216]	@ 0xd8
 8005586:	f04f 0bcb 	mov.w	fp, #203	@ 0xcb
 800558a:	f8a3 40dc 	strh.w	r4, [r3, #220]	@ 0xdc
 800558e:	f8a3 b0da 	strh.w	fp, [r3, #218]	@ 0xda
 8005592:	f04f 0b14 	mov.w	fp, #20
 8005596:	f8a3 40e8 	strh.w	r4, [r3, #232]	@ 0xe8
 800559a:	f883 b0e4 	strb.w	fp, [r3, #228]	@ 0xe4
 800559e:	f04f 0b15 	mov.w	fp, #21
 80055a2:	f8a3 90f2 	strh.w	r9, [r3, #242]	@ 0xf2
 80055a6:	f04f 0916 	mov.w	r9, #22
 80055aa:	f8a3 40f4 	strh.w	r4, [r3, #244]	@ 0xf4
 80055ae:	f8a3 50fe 	strh.w	r5, [r3, #254]	@ 0xfe
 80055b2:	f04f 05af 	mov.w	r5, #175	@ 0xaf
 80055b6:	f8a3 4100 	strh.w	r4, [r3, #256]	@ 0x100
 80055ba:	2417      	movs	r4, #23
 80055bc:	f8a3 00c6 	strh.w	r0, [r3, #198]	@ 0xc6
 80055c0:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
 80055c4:	f8a3 10ca 	strh.w	r1, [r3, #202]	@ 0xca
 80055c8:	f8a3 00d2 	strh.w	r0, [r3, #210]	@ 0xd2
 80055cc:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 80055d0:	f8a3 10d6 	strh.w	r1, [r3, #214]	@ 0xd6
 80055d4:	f8a3 00de 	strh.w	r0, [r3, #222]	@ 0xde
 80055d8:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
 80055dc:	f8a3 10e2 	strh.w	r1, [r3, #226]	@ 0xe2
 80055e0:	f8a3 00ea 	strh.w	r0, [r3, #234]	@ 0xea
 80055e4:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
 80055e8:	f8a3 10ee 	strh.w	r1, [r3, #238]	@ 0xee
 80055ec:	f883 b0f0 	strb.w	fp, [r3, #240]	@ 0xf0
 80055f0:	f04f 0bcb 	mov.w	fp, #203	@ 0xcb
 80055f4:	f8a3 00f6 	strh.w	r0, [r3, #246]	@ 0xf6
 80055f8:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 80055fc:	f8a3 10fa 	strh.w	r1, [r3, #250]	@ 0xfa
 8005600:	f8a3 0102 	strh.w	r0, [r3, #258]	@ 0x102
 8005604:	f8a3 80e6 	strh.w	r8, [r3, #230]	@ 0xe6
 8005608:	f883 90fc 	strb.w	r9, [r3, #252]	@ 0xfc
 800560c:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
 8005610:	f883 4108 	strb.w	r4, [r3, #264]	@ 0x108
 8005614:	2495      	movs	r4, #149	@ 0x95
 8005616:	f8a3 e10a 	strh.w	lr, [r3, #266]	@ 0x10a
 800561a:	f04f 0e18 	mov.w	lr, #24
 800561e:	f8a3 c116 	strh.w	ip, [r3, #278]	@ 0x116
 8005622:	f04f 0c19 	mov.w	ip, #25
 8005626:	f8a3 612e 	strh.w	r6, [r3, #302]	@ 0x12e
 800562a:	261b      	movs	r6, #27
 800562c:	f8a3 513a 	strh.w	r5, [r3, #314]	@ 0x13a
 8005630:	251c      	movs	r5, #28
 8005632:	f8a3 1106 	strh.w	r1, [r3, #262]	@ 0x106
 8005636:	f8a3 410c 	strh.w	r4, [r3, #268]	@ 0x10c
 800563a:	f8a3 010e 	strh.w	r0, [r3, #270]	@ 0x10e
 800563e:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
 8005642:	f8a3 1112 	strh.w	r1, [r3, #274]	@ 0x112
 8005646:	f8a3 4118 	strh.w	r4, [r3, #280]	@ 0x118
 800564a:	f8a3 011a 	strh.w	r0, [r3, #282]	@ 0x11a
 800564e:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
 8005652:	f8a3 111e 	strh.w	r1, [r3, #286]	@ 0x11e
 8005656:	f8a3 4124 	strh.w	r4, [r3, #292]	@ 0x124
 800565a:	f8a3 0126 	strh.w	r0, [r3, #294]	@ 0x126
 800565e:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
 8005662:	f8a3 112a 	strh.w	r1, [r3, #298]	@ 0x12a
 8005666:	f883 012c 	strb.w	r0, [r3, #300]	@ 0x12c
 800566a:	f8a3 4130 	strh.w	r4, [r3, #304]	@ 0x130
 800566e:	f8a3 0132 	strh.w	r0, [r3, #306]	@ 0x132
 8005672:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
 8005676:	f8a3 1136 	strh.w	r1, [r3, #310]	@ 0x136
 800567a:	f8a3 413c 	strh.w	r4, [r3, #316]	@ 0x13c
 800567e:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 8005682:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
 8005686:	f8a3 1142 	strh.w	r1, [r3, #322]	@ 0x142
 800568a:	f883 5144 	strb.w	r5, [r3, #324]	@ 0x144
 800568e:	251d      	movs	r5, #29
 8005690:	f883 e114 	strb.w	lr, [r3, #276]	@ 0x114
 8005694:	f883 c120 	strb.w	ip, [r3, #288]	@ 0x120
 8005698:	f8a3 7122 	strh.w	r7, [r3, #290]	@ 0x122
 800569c:	f883 6138 	strb.w	r6, [r3, #312]	@ 0x138
 80056a0:	f8a3 b146 	strh.w	fp, [r3, #326]	@ 0x146
 80056a4:	f8a3 114e 	strh.w	r1, [r3, #334]	@ 0x14e
 80056a8:	f8a3 115a 	strh.w	r1, [r3, #346]	@ 0x15a
 80056ac:	211e      	movs	r1, #30
 80056ae:	f8a3 4148 	strh.w	r4, [r3, #328]	@ 0x148
 80056b2:	f883 115c 	strb.w	r1, [r3, #348]	@ 0x15c
 80056b6:	213e      	movs	r1, #62	@ 0x3e
 80056b8:	f8a3 014a 	strh.w	r0, [r3, #330]	@ 0x14a
 80056bc:	f8a3 115e 	strh.w	r1, [r3, #350]	@ 0x15e
 80056c0:	21c1      	movs	r1, #193	@ 0xc1
 80056c2:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
 80056c6:	f8a3 1160 	strh.w	r1, [r3, #352]	@ 0x160
 80056ca:	21fc      	movs	r1, #252	@ 0xfc
 80056cc:	f8a3 4154 	strh.w	r4, [r3, #340]	@ 0x154
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 80056d0:	f04f 040b 	mov.w	r4, #11
 80056d4:	f8a3 1162 	strh.w	r1, [r3, #354]	@ 0x162
};
 80056d8:	f04f 010c 	mov.w	r1, #12
 80056dc:	f8a3 0156 	strh.w	r0, [r3, #342]	@ 0x156
 80056e0:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
 80056e4:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
 80056e8:	f8a3 1166 	strh.w	r1, [r3, #358]	@ 0x166
 80056ec:	f883 5150 	strb.w	r5, [r3, #336]	@ 0x150
 80056f0:	f8a3 8152 	strh.w	r8, [r3, #338]	@ 0x152
 80056f4:	4b13      	ldr	r3, [pc, #76]	@ (8005744 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x39c>)
 80056f6:	4814      	ldr	r0, [pc, #80]	@ (8005748 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a0>)
};
 80056f8:	819c      	strh	r4, [r3, #12]
 80056fa:	4c14      	ldr	r4, [pc, #80]	@ (800574c <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a4>)
 80056fc:	4914      	ldr	r1, [pc, #80]	@ (8005750 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a8>)
 80056fe:	e9c3 4004 	strd	r4, r0, [r3, #16]
 8005702:	f04f 0408 	mov.w	r4, #8
 8005706:	839c      	strh	r4, [r3, #28]
 8005708:	4c12      	ldr	r4, [pc, #72]	@ (8005754 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3ac>)
 800570a:	e9c3 1000 	strd	r1, r0, [r3]
 800570e:	e9c3 4008 	strd	r4, r0, [r3, #32]
 8005712:	2100      	movs	r1, #0
 8005714:	f04f 000a 	mov.w	r0, #10
 8005718:	6199      	str	r1, [r3, #24]
 800571a:	8598      	strh	r0, [r3, #44]	@ 0x2c
 800571c:	6099      	str	r1, [r3, #8]
 800571e:	6299      	str	r1, [r3, #40]	@ 0x28
 8005720:	4b0d      	ldr	r3, [pc, #52]	@ (8005758 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b0>)
 8005722:	480e      	ldr	r0, [pc, #56]	@ (800575c <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b4>)
 8005724:	831a      	strh	r2, [r3, #24]
 8005726:	4a0e      	ldr	r2, [pc, #56]	@ (8005760 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b8>)
 8005728:	f8a3 a012 	strh.w	sl, [r3, #18]
 800572c:	61da      	str	r2, [r3, #28]
        : color(col)
 800572e:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8005732:	6158      	str	r0, [r3, #20]
 8005734:	8419      	strh	r1, [r3, #32]
        : color(col)
 8005736:	625a      	str	r2, [r3, #36]	@ 0x24
 8005738:	62d9      	str	r1, [r3, #44]	@ 0x2c
 800573a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800573e:	bf00      	nop
 8005740:	2400bc14 	.word	0x2400bc14
 8005744:	2400bbe4 	.word	0x2400bbe4
 8005748:	00280038 	.word	0x00280038
 800574c:	00950102 	.word	0x00950102
 8005750:	00950005 	.word	0x00950005
 8005754:	00c10005 	.word	0x00c10005
 8005758:	24000038 	.word	0x24000038
 800575c:	0134000a 	.word	0x0134000a
 8005760:	080299c8 	.word	0x080299c8

08005764 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 8005764:	4770      	bx	lr

08005766 <_ZN19FrontendApplicationD0Ev>:
 8005766:	b510      	push	{r4, lr}
 8005768:	4604      	mov	r4, r0
 800576a:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 800576e:	f020 fc51 	bl	8026014 <_ZdlPvj>
 8005772:	4620      	mov	r0, r4
 8005774:	bd10      	pop	{r4, pc}

08005776 <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 8005776:	b510      	push	{r4, lr}
 8005778:	4604      	mov	r4, r0
    {
        model.tick();
 800577a:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 800577e:	f000 f812 	bl	80057a6 <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 8005782:	4620      	mov	r0, r4
    }
 8005784:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8005788:	f011 bac2 	b.w	8016d10 <_ZN8touchgfx11Application15handleTickEventEv>

0800578c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 800578c:	b510      	push	{r4, lr}
 800578e:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8005790:	f7fe fc66 	bl	8004060 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 8005794:	4b01      	ldr	r3, [pc, #4]	@ (800579c <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 8005796:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8005798:	6023      	str	r3, [r4, #0]
}
 800579a:	bd10      	pop	{r4, pc}
 800579c:	0802a69c 	.word	0x0802a69c

080057a0 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80057a0:	2200      	movs	r2, #0
 80057a2:	6002      	str	r2, [r0, #0]
{

}
 80057a4:	4770      	bx	lr

080057a6 <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80057a6:	4770      	bx	lr

080057a8 <_ZN18UPIScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~UPIScreenPresenter() {}
 80057a8:	4770      	bx	lr

080057aa <_ZThn4_N18UPIScreenPresenterD1Ev>:
 80057aa:	3804      	subs	r0, #4
 80057ac:	4770      	bx	lr

080057ae <_ZN18UPIScreenPresenter10deactivateEv>:
}

void UPIScreenPresenter::activate()
{

}
 80057ae:	4770      	bx	lr

080057b0 <_ZN18UPIScreenPresenterD0Ev>:
 80057b0:	b510      	push	{r4, lr}
 80057b2:	4604      	mov	r4, r0
 80057b4:	2110      	movs	r1, #16
 80057b6:	f020 fc2d 	bl	8026014 <_ZdlPvj>
 80057ba:	4620      	mov	r0, r4
 80057bc:	bd10      	pop	{r4, pc}

080057be <_ZThn4_N18UPIScreenPresenterD0Ev>:
 80057be:	f1a0 0004 	sub.w	r0, r0, #4
 80057c2:	e7f5      	b.n	80057b0 <_ZN18UPIScreenPresenterD0Ev>

080057c4 <_ZN18UPIScreenPresenterC1ER13UPIScreenView>:
    ModelListener() : model(0) {}
 80057c4:	2200      	movs	r2, #0
    : view(v)
 80057c6:	60c1      	str	r1, [r0, #12]
 80057c8:	6082      	str	r2, [r0, #8]
 80057ca:	4a02      	ldr	r2, [pc, #8]	@ (80057d4 <_ZN18UPIScreenPresenterC1ER13UPIScreenView+0x10>)
 80057cc:	6002      	str	r2, [r0, #0]
 80057ce:	3218      	adds	r2, #24
 80057d0:	6042      	str	r2, [r0, #4]
}
 80057d2:	4770      	bx	lr
 80057d4:	0802a6f0 	.word	0x0802a6f0

080057d8 <_ZN13UPIScreenView14tearDownScreenEv>:
}

void UPIScreenView::tearDownScreen()
{
    UPIScreenViewBase::tearDownScreen();
}
 80057d8:	4770      	bx	lr

080057da <_ZN13UPIScreenView10UpiClickedEv>:

void UPIScreenView::UpiClicked(){
 80057da:	b538      	push	{r3, r4, r5, lr}
        visible = vis;
 80057dc:	2501      	movs	r5, #1
 80057de:	4604      	mov	r4, r0
	keyboard.setVisible(true);
	keyboard.invalidate();
 80057e0:	f500 600f 	add.w	r0, r0, #2288	@ 0x8f0
 80057e4:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 80057e8:	f012 fa89 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonOK.setVisible(true);
	flexButtonOK.invalidate();
 80057ec:	f504 60dd 	add.w	r0, r4, #1768	@ 0x6e8
 80057f0:	f884 570d 	strb.w	r5, [r4, #1805]	@ 0x70d
 80057f4:	f012 fa83 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonExit.setVisible(true);
	flexButtonExit.invalidate();
 80057f8:	f504 60f6 	add.w	r0, r4, #1968	@ 0x7b0
 80057fc:	f884 57d5 	strb.w	r5, [r4, #2005]	@ 0x7d5
 8005800:	f012 fa7d 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	upimod=1;
 8005804:	f8a4 5acc 	strh.w	r5, [r4, #2764]	@ 0xacc
	amtmod=0;
}
 8005808:	bd38      	pop	{r3, r4, r5, pc}

0800580a <_ZN13UPIScreenView13AmountClickedEv>:

void UPIScreenView::AmountClicked(){
 800580a:	b538      	push	{r3, r4, r5, lr}
 800580c:	2501      	movs	r5, #1
 800580e:	4604      	mov	r4, r0
	keyboard.setVisible(true);
	keyboard.invalidate();
 8005810:	f500 600f 	add.w	r0, r0, #2288	@ 0x8f0
 8005814:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 8005818:	f012 fa71 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonOK.setVisible(true);
	flexButtonOK.invalidate();
 800581c:	f504 60dd 	add.w	r0, r4, #1768	@ 0x6e8
 8005820:	f884 570d 	strb.w	r5, [r4, #1805]	@ 0x70d
 8005824:	f012 fa6b 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonExit.setVisible(true);
	flexButtonExit.invalidate();
 8005828:	f504 60f6 	add.w	r0, r4, #1968	@ 0x7b0
 800582c:	f884 57d5 	strb.w	r5, [r4, #2005]	@ 0x7d5
 8005830:	f012 fa65 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	upimod=0;
 8005834:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005838:	f8a4 3acc 	strh.w	r3, [r4, #2764]	@ 0xacc
	amtmod=1;
}
 800583c:	bd38      	pop	{r3, r4, r5, pc}

0800583e <_ZN13UPIScreenView11ExitClickedEv>:

void UPIScreenView::ExitClicked(){
 800583e:	b538      	push	{r3, r4, r5, lr}
 8005840:	2500      	movs	r5, #0
 8005842:	4604      	mov	r4, r0
	keyboard.setVisible(false);
	keyboard.invalidate();
 8005844:	f500 600f 	add.w	r0, r0, #2288	@ 0x8f0
 8005848:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 800584c:	f012 fa57 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonOK.setVisible(false);
	flexButtonOK.invalidate();
 8005850:	f504 60dd 	add.w	r0, r4, #1768	@ 0x6e8
 8005854:	f884 570d 	strb.w	r5, [r4, #1805]	@ 0x70d
 8005858:	f012 fa51 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonExit.setVisible(false);
	flexButtonExit.invalidate();
 800585c:	f504 60f6 	add.w	r0, r4, #1968	@ 0x7b0
 8005860:	f884 57d5 	strb.w	r5, [r4, #2005]	@ 0x7d5
 8005864:	f012 fa4b 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	upimod=amtmod=0;
 8005868:	f8a4 5acc 	strh.w	r5, [r4, #2764]	@ 0xacc
}
 800586c:	bd38      	pop	{r3, r4, r5, pc}
	...

08005870 <_ZN13UPIScreenView15GenerateClickedEv>:

void UPIScreenView::GenerateClicked(){
 8005870:	b510      	push	{r4, lr}
 8005872:	f600 03a4 	addw	r3, r0, #2212	@ 0x8a4
 8005876:	b09a      	sub	sp, #104	@ 0x68
 8005878:	4604      	mov	r4, r0
 800587a:	f600 22cd 	addw	r2, r0, #2765	@ 0xacd
	char res_buff[100];
	int i=0;
	do
	{
		upibuf[i] = (char) textAreaUpiBuffer[i];
 800587e:	8819      	ldrh	r1, [r3, #0]
 8005880:	f802 1f01 	strb.w	r1, [r2, #1]!
		i++;
	}while (textAreaUpiBuffer[i]!=0);
 8005884:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 8005888:	2900      	cmp	r1, #0
 800588a:	d1f8      	bne.n	800587e <_ZN13UPIScreenView15GenerateClickedEv+0xe>
 800588c:	f604 03c2 	addw	r3, r4, #2242	@ 0x8c2
 8005890:	f604 22dc 	addw	r2, r4, #2780	@ 0xadc
	i=0;
	do
	{
		amtbuf[i] = (char) textAreaAmountBuffer[i];
 8005894:	8819      	ldrh	r1, [r3, #0]
 8005896:	f802 1f01 	strb.w	r1, [r2, #1]!
		i++;
	}while (textAreaAmountBuffer[i]!=0);
 800589a:	f833 1f02 	ldrh.w	r1, [r3, #2]!
 800589e:	2900      	cmp	r1, #0
 80058a0:	d1f8      	bne.n	8005894 <_ZN13UPIScreenView15GenerateClickedEv+0x24>

	sprintf(res_buff, "upi://pay?pa=%s&am=%s&cu=INR", upibuf, amtbuf);
 80058a2:	f604 23dd 	addw	r3, r4, #2781	@ 0xadd
 80058a6:	f604 22ce 	addw	r2, r4, #2766	@ 0xace

	 //touchgfx_printf(res_buff);
	//qrCode.convertStringToQRCode("upi://pay?pa=868912222@axl&am=100&cu=INR");
	qrCode.convertStringToQRCode(res_buff);
 80058aa:	f504 7472 	add.w	r4, r4, #968	@ 0x3c8
	sprintf(res_buff, "upi://pay?pa=%s&am=%s&cu=INR", upibuf, amtbuf);
 80058ae:	4906      	ldr	r1, [pc, #24]	@ (80058c8 <_ZN13UPIScreenView15GenerateClickedEv+0x58>)
 80058b0:	a801      	add	r0, sp, #4
 80058b2:	f021 f8e9 	bl	8026a88 <siprintf>
	qrCode.convertStringToQRCode(res_buff);
 80058b6:	a901      	add	r1, sp, #4
 80058b8:	4620      	mov	r0, r4
 80058ba:	f00e fa81 	bl	8013dc0 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc>
	qrCode.invalidate();
 80058be:	4620      	mov	r0, r4
 80058c0:	f012 fa1d 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>

}
 80058c4:	b01a      	add	sp, #104	@ 0x68
 80058c6:	bd10      	pop	{r4, pc}
 80058c8:	0802a710 	.word	0x0802a710

080058cc <_ZN13UPIScreenView9OkClickedEv>:

void UPIScreenView::OkClicked(){
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	2600      	movs	r6, #0
	keyboard.setVisible(false);
	keyboard.invalidate();
 80058d0:	f500 650f 	add.w	r5, r0, #2288	@ 0x8f0
void UPIScreenView::OkClicked(){
 80058d4:	4604      	mov	r4, r0
 80058d6:	f880 6915 	strb.w	r6, [r0, #2325]	@ 0x915
	keyboard.invalidate();
 80058da:	4628      	mov	r0, r5
 80058dc:	f012 fa0f 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonOK.setVisible(false);
	flexButtonOK.invalidate();
 80058e0:	f504 60dd 	add.w	r0, r4, #1768	@ 0x6e8
 80058e4:	f884 670d 	strb.w	r6, [r4, #1805]	@ 0x70d
 80058e8:	f012 fa09 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	flexButtonExit.setVisible(false);
	flexButtonExit.invalidate();
 80058ec:	f504 60f6 	add.w	r0, r4, #1968	@ 0x7b0
 80058f0:	f884 67d5 	strb.w	r6, [r4, #2005]	@ 0x7d5
 80058f4:	f012 fa03 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	if(upimod){
 80058f8:	f894 3acc 	ldrb.w	r3, [r4, #2764]	@ 0xacc
 80058fc:	b163      	cbz	r3, 8005918 <_ZN13UPIScreenView9OkClickedEv+0x4c>
		Unicode::strncpy(textAreaUpiBuffer,keyboard.getBuffer(), TEXTAREAUPI_SIZE);
 80058fe:	4628      	mov	r0, r5
 8005900:	f7ff fd50 	bl	80053a4 <_ZN14CustomKeyboard9getBufferEv>
 8005904:	220f      	movs	r2, #15
 8005906:	4601      	mov	r1, r0
 8005908:	f604 00a4 	addw	r0, r4, #2212	@ 0x8a4
 800590c:	f014 f92d 	bl	8019b6a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
		textAreaUpi.invalidate();
 8005910:	f504 60a3 	add.w	r0, r4, #1304	@ 0x518
 8005914:	f012 f9f3 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
	}
	if(amtmod){
 8005918:	f894 3acd 	ldrb.w	r3, [r4, #2765]	@ 0xacd
 800591c:	b163      	cbz	r3, 8005938 <_ZN13UPIScreenView9OkClickedEv+0x6c>
			Unicode::strncpy(textAreaAmountBuffer,keyboard.getBuffer(), TEXTAREAAMOUNT_SIZE);
 800591e:	4628      	mov	r0, r5
 8005920:	f7ff fd40 	bl	80053a4 <_ZN14CustomKeyboard9getBufferEv>
 8005924:	2206      	movs	r2, #6
 8005926:	4601      	mov	r1, r0
 8005928:	f604 00c2 	addw	r0, r4, #2242	@ 0x8c2
 800592c:	f014 f91d 	bl	8019b6a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>
			textAreaAmount.invalidate();
 8005930:	f204 5064 	addw	r0, r4, #1380	@ 0x564
 8005934:	f012 f9e3 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
		}

	keyboard.clearBuffer();
 8005938:	4628      	mov	r0, r5

}
 800593a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	keyboard.clearBuffer();
 800593e:	f7ff bc6a 	b.w	8005216 <_ZN14CustomKeyboard11clearBufferEv>
	...

08005944 <_ZN13UPIScreenViewD1Ev>:

class UPIScreenView : public UPIScreenViewBase
{
public:
    UPIScreenView();
    virtual ~UPIScreenView() {}
 8005944:	4b03      	ldr	r3, [pc, #12]	@ (8005954 <_ZN13UPIScreenViewD1Ev+0x10>)
 8005946:	b510      	push	{r4, lr}
 8005948:	4604      	mov	r4, r0
 800594a:	6003      	str	r3, [r0, #0]
 800594c:	f7fe fe03 	bl	8004556 <_ZN17UPIScreenViewBaseD1Ev>
 8005950:	4620      	mov	r0, r4
 8005952:	bd10      	pop	{r4, pc}
 8005954:	0802a738 	.word	0x0802a738

08005958 <_ZN13UPIScreenViewD0Ev>:
 8005958:	b510      	push	{r4, lr}
 800595a:	4604      	mov	r4, r0
 800595c:	f7ff fff2 	bl	8005944 <_ZN13UPIScreenViewD1Ev>
 8005960:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8005964:	4620      	mov	r0, r4
 8005966:	f020 fb55 	bl	8026014 <_ZdlPvj>
 800596a:	4620      	mov	r0, r4
 800596c:	bd10      	pop	{r4, pc}
	...

08005970 <_ZN13UPIScreenViewC1Ev>:
UPIScreenView::UPIScreenView()
 8005970:	b538      	push	{r3, r4, r5, lr}
 8005972:	4604      	mov	r4, r0
 8005974:	f7ff f83a 	bl	80049ec <_ZN17UPIScreenViewBaseC1Ev>
 8005978:	4b11      	ldr	r3, [pc, #68]	@ (80059c0 <_ZN13UPIScreenViewC1Ev+0x50>)
 800597a:	f504 650f 	add.w	r5, r4, #2288	@ 0x8f0
 800597e:	6023      	str	r3, [r4, #0]
 8005980:	4628      	mov	r0, r5
 8005982:	f7ff fc5f 	bl	8005244 <_ZN14CustomKeyboardC1Ev>
        rect.x = x;
 8005986:	4a0f      	ldr	r2, [pc, #60]	@ (80059c4 <_ZN13UPIScreenViewC1Ev+0x54>)
        setX(x);
 8005988:	f8d4 38f0 	ldr.w	r3, [r4, #2288]	@ 0x8f0
        setWidth(width);
 800598c:	4628      	mov	r0, r5
        rect.x = x;
 800598e:	f8c4 28f4 	str.w	r2, [r4, #2292]	@ 0x8f4
        setWidth(width);
 8005992:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 8005996:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005998:	4798      	blx	r3
        setHeight(height);
 800599a:	f8d4 38f0 	ldr.w	r3, [r4, #2288]	@ 0x8f0
 800599e:	4628      	mov	r0, r5
 80059a0:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 80059a4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059a6:	4798      	blx	r3
 80059a8:	4629      	mov	r1, r5
 80059aa:	1d20      	adds	r0, r4, #4
 80059ac:	f00a f92e 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
        visible = vis;
 80059b0:	2300      	movs	r3, #0
	keyboard.invalidate();
 80059b2:	4628      	mov	r0, r5
 80059b4:	f884 3915 	strb.w	r3, [r4, #2325]	@ 0x915
 80059b8:	f012 f9a1 	bl	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>
}
 80059bc:	4620      	mov	r0, r4
 80059be:	bd38      	pop	{r3, r4, r5, pc}
 80059c0:	0802a738 	.word	0x0802a738
 80059c4:	00100050 	.word	0x00100050

080059c8 <_ZN13UPIScreenView11setupScreenEv>:
    UPIScreenViewBase::setupScreen();
 80059c8:	f7fe bdc6 	b.w	8004558 <_ZN17UPIScreenViewBase11setupScreenEv>

080059cc <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80059cc:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80059ce:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80059d2:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80059d4:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80059d6:	2302      	movs	r3, #2
 80059d8:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80059da:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80059de:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80059e2:	4770      	bx	lr

080059e4 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80059e4:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80059e8:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80059ea:	bf04      	itt	eq
 80059ec:	2300      	moveq	r3, #0
 80059ee:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80059f2:	2000      	movs	r0, #0
 80059f4:	4770      	bx	lr

080059f6 <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80059f6:	2000      	movs	r0, #0
 80059f8:	4770      	bx	lr

080059fa <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80059fa:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059fc:	6904      	ldr	r4, [r0, #16]
 80059fe:	8900      	ldrh	r0, [r0, #8]
 8005a00:	46a4      	mov	ip, r4
}
 8005a02:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005a06:	4760      	bx	ip

08005a08 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 8005a08:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a0a:	68c4      	ldr	r4, [r0, #12]
 8005a0c:	8900      	ldrh	r0, [r0, #8]
 8005a0e:	46a4      	mov	ip, r4
}
 8005a10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a14:	4760      	bx	ip

08005a16 <FT6X06_GestureConfig>:
{
 8005a16:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005a18:	f100 0518 	add.w	r5, r0, #24
{
 8005a1c:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 8005a1e:	7809      	ldrb	r1, [r1, #0]
 8005a20:	4628      	mov	r0, r5
 8005a22:	f000 f911 	bl	8005c48 <ft6x06_radian_value>
 8005a26:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8005a28:	7931      	ldrb	r1, [r6, #4]
 8005a2a:	4628      	mov	r0, r5
 8005a2c:	f000 f918 	bl	8005c60 <ft6x06_offset_left_right>
 8005a30:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 8005a32:	7a31      	ldrb	r1, [r6, #8]
 8005a34:	4628      	mov	r0, r5
 8005a36:	f000 f91f 	bl	8005c78 <ft6x06_offset_up_down>
 8005a3a:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8005a3c:	7b31      	ldrb	r1, [r6, #12]
 8005a3e:	4628      	mov	r0, r5
 8005a40:	f000 f926 	bl	8005c90 <ft6x06_disatnce_left_right>
 8005a44:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 8005a46:	7c31      	ldrb	r1, [r6, #16]
 8005a48:	4628      	mov	r0, r5
 8005a4a:	f000 f92d 	bl	8005ca8 <ft6x06_distance_up_down>
 8005a4e:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8005a50:	7d31      	ldrb	r1, [r6, #20]
 8005a52:	4628      	mov	r0, r5
 8005a54:	f000 f934 	bl	8005cc0 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8005a58:	42c4      	cmn	r4, r0
}
 8005a5a:	bf14      	ite	ne
 8005a5c:	f04f 30ff 	movne.w	r0, #4294967295
 8005a60:	2000      	moveq	r0, #0
 8005a62:	bd70      	pop	{r4, r5, r6, pc}

08005a64 <FT6X06_ReadID>:
{
 8005a64:	b513      	push	{r0, r1, r4, lr}
 8005a66:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8005a68:	3018      	adds	r0, #24
 8005a6a:	f10d 0107 	add.w	r1, sp, #7
 8005a6e:	f000 f93f 	bl	8005cf0 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8005a72:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8005a76:	6023      	str	r3, [r4, #0]
}
 8005a78:	b002      	add	sp, #8
 8005a7a:	bd10      	pop	{r4, pc}

08005a7c <FT6X06_GetState>:
{
 8005a7c:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005a7e:	f100 0518 	add.w	r5, r0, #24
{
 8005a82:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005a84:	a901      	add	r1, sp, #4
 8005a86:	4628      	mov	r0, r5
 8005a88:	f000 f8d1 	bl	8005c2e <ft6x06_td_status>
 8005a8c:	bb08      	cbnz	r0, 8005ad2 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005a8e:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005a92:	2b02      	cmp	r3, #2
 8005a94:	bf98      	it	ls
 8005a96:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005a98:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005a9a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005a9c:	2103      	movs	r1, #3
 8005a9e:	4628      	mov	r0, r5
 8005aa0:	eb0d 0203 	add.w	r2, sp, r3
 8005aa4:	f000 f8b0 	bl	8005c08 <ft6x06_read_reg>
 8005aa8:	b9b0      	cbnz	r0, 8005ad8 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005aaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8005aae:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8005ab2:	021b      	lsls	r3, r3, #8
 8005ab4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005ab8:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005aba:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005abe:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005ac0:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005ac4:	021b      	lsls	r3, r3, #8
 8005ac6:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005aca:	4313      	orrs	r3, r2
 8005acc:	60a3      	str	r3, [r4, #8]
}
 8005ace:	b003      	add	sp, #12
 8005ad0:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005ad2:	f04f 30ff 	mov.w	r0, #4294967295
 8005ad6:	e7df      	b.n	8005a98 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8005ad8:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005adc:	e7f7      	b.n	8005ace <FT6X06_GetState+0x52>

08005ade <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8005ade:	3018      	adds	r0, #24
 8005ae0:	f000 b8a0 	b.w	8005c24 <ft6x06_gest_id>

08005ae4 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8005ae4:	2101      	movs	r1, #1
 8005ae6:	3018      	adds	r0, #24
 8005ae8:	f000 b8f6 	b.w	8005cd8 <ft6x06_g_mode>

08005aec <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8005aec:	2100      	movs	r1, #0
 8005aee:	3018      	adds	r0, #24
 8005af0:	f000 b8f2 	b.w	8005cd8 <ft6x06_g_mode>

08005af4 <FT6X06_Init>:
{
 8005af4:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8005af6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8005afa:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8005afc:	b96b      	cbnz	r3, 8005b1a <FT6X06_Init+0x26>
    pObj->IO.Init();
 8005afe:	6803      	ldr	r3, [r0, #0]
 8005b00:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8005b02:	4620      	mov	r0, r4
 8005b04:	f7ff fff2 	bl	8005aec <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8005b08:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8005b0a:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8005b0e:	bf18      	it	ne
 8005b10:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8005b12:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8005b16:	4240      	negs	r0, r0
}
 8005b18:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8005b1a:	2000      	movs	r0, #0
  return ret;
 8005b1c:	e7fc      	b.n	8005b18 <FT6X06_Init+0x24>

08005b1e <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8005b1e:	2000      	movs	r0, #0
 8005b20:	4770      	bx	lr

08005b22 <FT6X06_GetMultiTouchState>:
{
 8005b22:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005b24:	f100 0518 	add.w	r5, r0, #24
{
 8005b28:	b085      	sub	sp, #20
 8005b2a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8005b2c:	4628      	mov	r0, r5
 8005b2e:	a901      	add	r1, sp, #4
 8005b30:	f000 f87d 	bl	8005c2e <ft6x06_td_status>
 8005b34:	2800      	cmp	r0, #0
 8005b36:	d145      	bne.n	8005bc4 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8005b38:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8005b3c:	2b02      	cmp	r3, #2
 8005b3e:	bf98      	it	ls
 8005b40:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8005b42:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8005b44:	230c      	movs	r3, #12
 8005b46:	aa01      	add	r2, sp, #4
 8005b48:	2103      	movs	r1, #3
 8005b4a:	4628      	mov	r0, r5
 8005b4c:	f000 f85c 	bl	8005c08 <ft6x06_read_reg>
 8005b50:	2800      	cmp	r0, #0
 8005b52:	d13a      	bne.n	8005bca <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005b54:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8005b58:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8005b5c:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005b5e:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005b60:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8005b64:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005b66:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005b68:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005b6c:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8005b70:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005b72:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8005b76:	021b      	lsls	r3, r3, #8
 8005b78:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005b7c:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005b7e:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8005b82:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8005b84:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8005b88:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8005b8a:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8005b8e:	091b      	lsrs	r3, r3, #4
 8005b90:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005b92:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005b94:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005b96:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8005b9a:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005b9c:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005b9e:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8005ba2:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8005ba4:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8005bae:	430b      	orrs	r3, r1
 8005bb0:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8005bb2:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8005bb6:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8005bb8:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8005bbc:	091b      	lsrs	r3, r3, #4
 8005bbe:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8005bc0:	b005      	add	sp, #20
 8005bc2:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8005bc4:	f04f 30ff 	mov.w	r0, #4294967295
 8005bc8:	e7bb      	b.n	8005b42 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8005bca:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8005bce:	e7f7      	b.n	8005bc0 <FT6X06_GetMultiTouchState+0x9e>

08005bd0 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8005bd0:	b190      	cbz	r0, 8005bf8 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8005bd2:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8005bd4:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8005bd6:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8005bd8:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8005bda:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8005bdc:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005bde:	68ca      	ldr	r2, [r1, #12]
 8005be0:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8005be2:	690a      	ldr	r2, [r1, #16]
 8005be4:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8005be6:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8005be8:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8005bea:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8005bec:	4a04      	ldr	r2, [pc, #16]	@ (8005c00 <FT6X06_RegisterBusIO+0x30>)
 8005bee:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8005bf0:	4a04      	ldr	r2, [pc, #16]	@ (8005c04 <FT6X06_RegisterBusIO+0x34>)
 8005bf2:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8005bf4:	b103      	cbz	r3, 8005bf8 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8005bf6:	4718      	bx	r3
}
 8005bf8:	f04f 30ff 	mov.w	r0, #4294967295
 8005bfc:	4770      	bx	lr
 8005bfe:	bf00      	nop
 8005c00:	080059fb 	.word	0x080059fb
 8005c04:	08005a09 	.word	0x08005a09

08005c08 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8005c08:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005c0a:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8005c0e:	46a4      	mov	ip, r4
}
 8005c10:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005c14:	4760      	bx	ip

08005c16 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8005c16:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005c18:	6804      	ldr	r4, [r0, #0]
 8005c1a:	6880      	ldr	r0, [r0, #8]
 8005c1c:	46a4      	mov	ip, r4
}
 8005c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8005c22:	4760      	bx	ip

08005c24 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005c24:	2301      	movs	r3, #1
{
 8005c26:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8005c28:	4619      	mov	r1, r3
 8005c2a:	f7ff bfed 	b.w	8005c08 <ft6x06_read_reg>

08005c2e <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005c2e:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005c30:	460a      	mov	r2, r1
{
 8005c32:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8005c34:	2301      	movs	r3, #1
 8005c36:	2102      	movs	r1, #2
 8005c38:	f7ff ffe6 	bl	8005c08 <ft6x06_read_reg>
  
  if(ret == 0)
 8005c3c:	b918      	cbnz	r0, 8005c46 <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8005c3e:	7823      	ldrb	r3, [r4, #0]
 8005c40:	f003 030f 	and.w	r3, r3, #15
 8005c44:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8005c46:	bd10      	pop	{r4, pc}

08005c48 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005c48:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005c4a:	2301      	movs	r3, #1
{
 8005c4c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8005c50:	f10d 0207 	add.w	r2, sp, #7
 8005c54:	2191      	movs	r1, #145	@ 0x91
 8005c56:	f7ff ffde 	bl	8005c16 <ft6x06_write_reg>
}
 8005c5a:	b003      	add	sp, #12
 8005c5c:	f85d fb04 	ldr.w	pc, [sp], #4

08005c60 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005c60:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005c62:	2301      	movs	r3, #1
{
 8005c64:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8005c68:	f10d 0207 	add.w	r2, sp, #7
 8005c6c:	2192      	movs	r1, #146	@ 0x92
 8005c6e:	f7ff ffd2 	bl	8005c16 <ft6x06_write_reg>
}
 8005c72:	b003      	add	sp, #12
 8005c74:	f85d fb04 	ldr.w	pc, [sp], #4

08005c78 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005c78:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005c7a:	2301      	movs	r3, #1
{
 8005c7c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8005c80:	f10d 0207 	add.w	r2, sp, #7
 8005c84:	2193      	movs	r1, #147	@ 0x93
 8005c86:	f7ff ffc6 	bl	8005c16 <ft6x06_write_reg>
}
 8005c8a:	b003      	add	sp, #12
 8005c8c:	f85d fb04 	ldr.w	pc, [sp], #4

08005c90 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005c90:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005c92:	2301      	movs	r3, #1
{
 8005c94:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8005c98:	f10d 0207 	add.w	r2, sp, #7
 8005c9c:	2194      	movs	r1, #148	@ 0x94
 8005c9e:	f7ff ffba 	bl	8005c16 <ft6x06_write_reg>
}
 8005ca2:	b003      	add	sp, #12
 8005ca4:	f85d fb04 	ldr.w	pc, [sp], #4

08005ca8 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005ca8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005caa:	2301      	movs	r3, #1
{
 8005cac:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8005cb0:	f10d 0207 	add.w	r2, sp, #7
 8005cb4:	2195      	movs	r1, #149	@ 0x95
 8005cb6:	f7ff ffae 	bl	8005c16 <ft6x06_write_reg>
}
 8005cba:	b003      	add	sp, #12
 8005cbc:	f85d fb04 	ldr.w	pc, [sp], #4

08005cc0 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005cc0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005cc2:	2301      	movs	r3, #1
{
 8005cc4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8005cc8:	f10d 0207 	add.w	r2, sp, #7
 8005ccc:	2196      	movs	r1, #150	@ 0x96
 8005cce:	f7ff ffa2 	bl	8005c16 <ft6x06_write_reg>
}
 8005cd2:	b003      	add	sp, #12
 8005cd4:	f85d fb04 	ldr.w	pc, [sp], #4

08005cd8 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8005cd8:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005cda:	2301      	movs	r3, #1
{
 8005cdc:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8005ce0:	f10d 0207 	add.w	r2, sp, #7
 8005ce4:	21a4      	movs	r1, #164	@ 0xa4
 8005ce6:	f7ff ff96 	bl	8005c16 <ft6x06_write_reg>
}
 8005cea:	b003      	add	sp, #12
 8005cec:	f85d fb04 	ldr.w	pc, [sp], #4

08005cf0 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8005cf0:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8005cf2:	2301      	movs	r3, #1
 8005cf4:	21a8      	movs	r1, #168	@ 0xa8
 8005cf6:	f7ff bf87 	b.w	8005c08 <ft6x06_read_reg>
	...

08005cfc <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005cfc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8005cfe:	2201      	movs	r2, #1
 8005d00:	4b07      	ldr	r3, [pc, #28]	@ (8005d20 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8005d02:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8005d06:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8005d08:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005d0a:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8005d0c:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005d0e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d12:	f006 fd75 	bl	800c800 <HAL_SDRAM_SendCommand>
 8005d16:	3800      	subs	r0, #0
 8005d18:	bf18      	it	ne
 8005d1a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005d1c:	4240      	negs	r0, r0
 8005d1e:	bd08      	pop	{r3, pc}
 8005d20:	2400bd7c 	.word	0x2400bd7c

08005d24 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8005d24:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8005d26:	2202      	movs	r2, #2
 8005d28:	4b08      	ldr	r3, [pc, #32]	@ (8005d4c <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8005d2a:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8005d2e:	2101      	movs	r1, #1
 8005d30:	2200      	movs	r2, #0
 8005d32:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005d36:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	f006 fd60 	bl	800c800 <HAL_SDRAM_SendCommand>
 8005d40:	3800      	subs	r0, #0
 8005d42:	bf18      	it	ne
 8005d44:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005d46:	4240      	negs	r0, r0
 8005d48:	bd08      	pop	{r3, pc}
 8005d4a:	bf00      	nop
 8005d4c:	2400bd7c 	.word	0x2400bd7c

08005d50 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8005d50:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005d52:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8005d56:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005d58:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8005d5a:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005d5c:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8005d5e:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8005d60:	6991      	ldr	r1, [r2, #24]
 8005d62:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005d64:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8005d66:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8005d68:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005d6a:	4907      	ldr	r1, [pc, #28]	@ (8005d88 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8005d6c:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8005d6e:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8005d70:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8005d72:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005d76:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005d7a:	f006 fd41 	bl	800c800 <HAL_SDRAM_SendCommand>
 8005d7e:	3800      	subs	r0, #0
 8005d80:	bf18      	it	ne
 8005d82:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005d84:	4240      	negs	r0, r0
 8005d86:	bd10      	pop	{r4, pc}
 8005d88:	2400bd7c 	.word	0x2400bd7c

08005d8c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8005d8c:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8005d8e:	4b08      	ldr	r3, [pc, #32]	@ (8005db0 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8005d90:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8005d94:	2108      	movs	r1, #8
 8005d96:	2200      	movs	r2, #0
 8005d98:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8005d9c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8005da0:	4619      	mov	r1, r3
 8005da2:	f006 fd2d 	bl	800c800 <HAL_SDRAM_SendCommand>
 8005da6:	3800      	subs	r0, #0
 8005da8:	bf18      	it	ne
 8005daa:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005dac:	4240      	negs	r0, r0
 8005dae:	bd08      	pop	{r3, pc}
 8005db0:	2400bd7c 	.word	0x2400bd7c

08005db4 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8005db4:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8005db6:	f006 fd42 	bl	800c83e <HAL_SDRAM_ProgramRefreshRate>
 8005dba:	3800      	subs	r0, #0
 8005dbc:	bf18      	it	ne
 8005dbe:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8005dc0:	4240      	negs	r0, r0
 8005dc2:	bd08      	pop	{r3, pc}

08005dc4 <IS42S32800J_Init>:
{
 8005dc4:	b570      	push	{r4, r5, r6, lr}
 8005dc6:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005dc8:	6809      	ldr	r1, [r1, #0]
{
 8005dca:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005dcc:	f7ff ff96 	bl	8005cfc <IS42S32800J_ClockEnable>
 8005dd0:	b110      	cbz	r0, 8005dd8 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8005dd2:	f04f 30ff 	mov.w	r0, #4294967295
}
 8005dd6:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8005dd8:	f001 fc7c 	bl	80076d4 <HAL_GetTick>
 8005ddc:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8005dde:	f001 fc79 	bl	80076d4 <HAL_GetTick>
 8005de2:	4286      	cmp	r6, r0
 8005de4:	d0fb      	beq.n	8005dde <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8005de6:	6821      	ldr	r1, [r4, #0]
 8005de8:	4628      	mov	r0, r5
 8005dea:	f7ff ff9b 	bl	8005d24 <IS42S32800J_Precharge>
 8005dee:	2800      	cmp	r0, #0
 8005df0:	d1ef      	bne.n	8005dd2 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8005df2:	4628      	mov	r0, r5
 8005df4:	e9d4 1200 	ldrd	r1, r2, [r4]
 8005df8:	f7ff ffc8 	bl	8005d8c <IS42S32800J_RefreshMode>
 8005dfc:	2800      	cmp	r0, #0
 8005dfe:	d1e8      	bne.n	8005dd2 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8005e00:	4621      	mov	r1, r4
 8005e02:	4628      	mov	r0, r5
 8005e04:	f7ff ffa4 	bl	8005d50 <IS42S32800J_ModeRegConfig>
 8005e08:	2800      	cmp	r0, #0
 8005e0a:	d1e2      	bne.n	8005dd2 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8005e0c:	68a1      	ldr	r1, [r4, #8]
 8005e0e:	4628      	mov	r0, r5
 8005e10:	f7ff ffd0 	bl	8005db4 <IS42S32800J_RefreshRate>
 8005e14:	3800      	subs	r0, #0
 8005e16:	bf18      	it	ne
 8005e18:	2001      	movne	r0, #1
 8005e1a:	4240      	negs	r0, r0
  return ret;
 8005e1c:	e7db      	b.n	8005dd6 <IS42S32800J_Init+0x12>

08005e1e <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005e1e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8005e22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005e26:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8005e2a:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8005e2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8005e32:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8005e36:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8005e3a:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8005e3c:	2000      	movs	r0, #0
 8005e3e:	4770      	bx	lr

08005e40 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005e40:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005e42:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8005e46:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005e48:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005e4c:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005e4e:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005e50:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8005e52:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8005e54:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005e56:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8005e58:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e5a:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005e5c:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8005e5e:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005e60:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8005e62:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e64:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005e66:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005e6a:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8005e6e:	2310      	movs	r3, #16
 8005e70:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8005e72:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8005e76:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8005e78:	f240 1301 	movw	r3, #257	@ 0x101
 8005e7c:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e7e:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005e82:	f004 ff5e 	bl	800ad42 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8005e86:	2800      	cmp	r0, #0

}
 8005e88:	bf14      	ite	ne
 8005e8a:	f06f 0004 	mvnne.w	r0, #4
 8005e8e:	2000      	moveq	r0, #0
 8005e90:	b015      	add	sp, #84	@ 0x54
 8005e92:	f85d fb04 	ldr.w	pc, [sp], #4

08005e96 <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005e96:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005e98:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8005e9c:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005e9e:	bf08      	it	eq
 8005ea0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005ea4:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005ea6:	bf18      	it	ne
 8005ea8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005eac:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005eae:	a906      	add	r1, sp, #24
{
 8005eb0:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005eb2:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8005eb4:	2306      	movs	r3, #6
 8005eb6:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005eb8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005eba:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8005ebe:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8005ec0:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005ec2:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005ec4:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ec8:	f004 fe3a 	bl	800ab40 <HAL_QSPI_Command>
 8005ecc:	bb20      	cbnz	r0, 8005f18 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005ece:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8005ed2:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005ed4:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005ed6:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8005eda:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005edc:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8005ede:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8005ee2:	f04f 0310 	mov.w	r3, #16
 8005ee6:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005eea:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005eee:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8005ef0:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005ef4:	bf14      	ite	ne
 8005ef6:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8005efa:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005efe:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8005f00:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f02:	f241 3388 	movw	r3, #5000	@ 0x1388
 8005f06:	f004 ff1c 	bl	800ad42 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8005f0a:	2800      	cmp	r0, #0
 8005f0c:	bf14      	ite	ne
 8005f0e:	f06f 0004 	mvnne.w	r0, #4
 8005f12:	2000      	moveq	r0, #0
}
 8005f14:	b015      	add	sp, #84	@ 0x54
 8005f16:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8005f18:	f06f 0001 	mvn.w	r0, #1
 8005f1c:	e7fa      	b.n	8005f14 <MT25TL01G_WriteEnable+0x7e>

08005f1e <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f1e:	2903      	cmp	r1, #3
{
 8005f20:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f22:	bf08      	it	eq
 8005f24:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8005f28:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f2a:	bf18      	it	ne
 8005f2c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8005f30:	4604      	mov	r4, r0
 8005f32:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005f34:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8005f36:	23b7      	movs	r3, #183	@ 0xb7
 8005f38:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005f3a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005f3c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005f40:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005f42:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005f44:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005f46:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8005f4a:	f7ff ffa4 	bl	8005e96 <MT25TL01G_WriteEnable>
 8005f4e:	b118      	cbz	r0, 8005f58 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8005f50:	f06f 0001 	mvn.w	r0, #1
}
 8005f54:	b00f      	add	sp, #60	@ 0x3c
 8005f56:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005f5c:	4669      	mov	r1, sp
 8005f5e:	4620      	mov	r0, r4
 8005f60:	f004 fdee 	bl	800ab40 <HAL_QSPI_Command>
 8005f64:	2800      	cmp	r0, #0
 8005f66:	d1f3      	bne.n	8005f50 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8005f68:	4629      	mov	r1, r5
 8005f6a:	4620      	mov	r0, r4
 8005f6c:	f7ff ff68 	bl	8005e40 <MT25TL01G_AutoPollingMemReady>
 8005f70:	2800      	cmp	r0, #0
 8005f72:	d0ef      	beq.n	8005f54 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8005f74:	e7ec      	b.n	8005f50 <MT25TL01G_Enter4BytesAddressMode+0x32>

08005f76 <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005f76:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f78:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8005f7c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f7e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005f82:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005f84:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f86:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8005f88:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005f8a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005f8c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005f90:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005f92:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005f94:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005f96:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005f9a:	f004 fdd1 	bl	800ab40 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005f9e:	2800      	cmp	r0, #0
}
 8005fa0:	bf14      	ite	ne
 8005fa2:	f06f 0001 	mvnne.w	r0, #1
 8005fa6:	2000      	moveq	r0, #0
 8005fa8:	b00f      	add	sp, #60	@ 0x3c
 8005faa:	f85d fb04 	ldr.w	pc, [sp], #4

08005fae <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8005fae:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005fb0:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8005fb4:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fb6:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005fba:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005fbc:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fbe:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8005fc0:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8005fc2:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005fc4:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005fc8:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005fca:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005fcc:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005fce:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fd2:	f004 fdb5 	bl	800ab40 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8005fd6:	2800      	cmp	r0, #0
}
 8005fd8:	bf14      	ite	ne
 8005fda:	f06f 0001 	mvnne.w	r0, #1
 8005fde:	2000      	moveq	r0, #0
 8005fe0:	b00f      	add	sp, #60	@ 0x3c
 8005fe2:	f85d fb04 	ldr.w	pc, [sp], #4

08005fe6 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8005fe6:	b500      	push	{lr}
 8005fe8:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005fea:	2903      	cmp	r1, #3
 8005fec:	d80e      	bhi.n	800600c <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8005fee:	e8df f001 	tbb	[pc, r1]
 8005ff2:	2902      	.short	0x2902
 8005ff4:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005ff6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005ffa:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8005ffc:	230e      	movs	r3, #14
 8005ffe:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006000:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006004:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8006006:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800600a:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800600c:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800600e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8006012:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006016:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8006018:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800601a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800601e:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006020:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8006022:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006026:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006028:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800602a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800602c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8006030:	f004 fed8 	bl	800ade4 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8006034:	2800      	cmp	r0, #0
}
 8006036:	bf14      	ite	ne
 8006038:	f06f 0005 	mvnne.w	r0, #5
 800603c:	2000      	moveq	r0, #0
 800603e:	b011      	add	sp, #68	@ 0x44
 8006040:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8006044:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006048:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800604a:	233d      	movs	r3, #61	@ 0x3d
 800604c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800604e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006052:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8006054:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8006058:	e7d7      	b.n	800600a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800605a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800605e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8006060:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8006062:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8006064:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8006068:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800606a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800606e:	e7cc      	b.n	800600a <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8006070:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006074:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8006076:	23ed      	movs	r3, #237	@ 0xed
 8006078:	e7f3      	b.n	8006062 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800607a <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800607a:	b500      	push	{lr}
 800607c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 800607e:	2903      	cmp	r1, #3
 8006080:	d80e      	bhi.n	80060a0 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8006082:	e8df f001 	tbb	[pc, r1]
 8006086:	2502      	.short	0x2502
 8006088:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800608a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800608e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8006090:	230c      	movs	r3, #12
 8006092:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8006094:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006098:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800609a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800609e:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80060a0:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80060a2:	466a      	mov	r2, sp
 80060a4:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80060a6:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80060a8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80060ac:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80060ae:	2300      	movs	r3, #0
 80060b0:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80060b2:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80060b4:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80060b8:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80060bc:	f004 fe92 	bl	800ade4 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 80060c0:	2800      	cmp	r0, #0
}
 80060c2:	bf14      	ite	ne
 80060c4:	f06f 0005 	mvnne.w	r0, #5
 80060c8:	2000      	moveq	r0, #0
 80060ca:	b011      	add	sp, #68	@ 0x44
 80060cc:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80060d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060d4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80060d6:	23bc      	movs	r3, #188	@ 0xbc
 80060d8:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 80060da:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80060de:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80060e0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80060e4:	e7db      	b.n	800609e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80060e6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80060ea:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80060ec:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80060ee:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80060f0:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80060f4:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80060f6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80060fa:	e7d0      	b.n	800609e <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80060fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006100:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8006102:	23eb      	movs	r3, #235	@ 0xeb
 8006104:	e7f3      	b.n	80060ee <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08006106 <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006106:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006108:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800610c:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800610e:	bf18      	it	ne
 8006110:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006114:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006116:	bf08      	it	eq
 8006118:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800611c:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800611e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8006120:	2366      	movs	r3, #102	@ 0x66
 8006122:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006124:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006126:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800612a:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800612c:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800612e:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006130:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006134:	f004 fd04 	bl	800ab40 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8006138:	2800      	cmp	r0, #0
}
 800613a:	bf14      	ite	ne
 800613c:	f06f 0001 	mvnne.w	r0, #1
 8006140:	2000      	moveq	r0, #0
 8006142:	b00f      	add	sp, #60	@ 0x3c
 8006144:	f85d fb04 	ldr.w	pc, [sp], #4

08006148 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006148:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800614a:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 800614e:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006150:	bf18      	it	ne
 8006152:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8006156:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006158:	bf08      	it	eq
 800615a:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800615e:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8006160:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8006162:	2399      	movs	r3, #153	@ 0x99
 8006164:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8006166:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006168:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 800616c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 800616e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006170:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8006172:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006176:	f004 fce3 	bl	800ab40 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800617a:	2800      	cmp	r0, #0
}
 800617c:	bf14      	ite	ne
 800617e:	f06f 0001 	mvnne.w	r0, #1
 8006182:	2000      	moveq	r0, #0
 8006184:	b00f      	add	sp, #60	@ 0x3c
 8006186:	f85d fb04 	ldr.w	pc, [sp], #4

0800618a <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800618a:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800618c:	6884      	ldr	r4, [r0, #8]
 800618e:	8800      	ldrh	r0, [r0, #0]
 8006190:	46a4      	mov	ip, r4
}
 8006192:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8006196:	4760      	bx	ip

08006198 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8006198:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800619a:	6844      	ldr	r4, [r0, #4]
 800619c:	8800      	ldrh	r0, [r0, #0]
 800619e:	46a4      	mov	ip, r4
}
 80061a0:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80061a4:	4760      	bx	ip

080061a6 <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80061a6:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 80061a8:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 80061aa:	4604      	mov	r4, r0
 80061ac:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 80061ae:	4798      	blx	r3
 80061b0:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80061b2:	68e3      	ldr	r3, [r4, #12]
 80061b4:	4798      	blx	r3
 80061b6:	1b83      	subs	r3, r0, r6
 80061b8:	42ab      	cmp	r3, r5
 80061ba:	d3fa      	bcc.n	80061b2 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 80061bc:	bd70      	pop	{r4, r5, r6, pc}
	...

080061c0 <OTM8009A_Init>:
{
 80061c0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061c4:	2300      	movs	r3, #0
 80061c6:	f100 0510 	add.w	r5, r0, #16
{
 80061ca:	4607      	mov	r7, r0
 80061cc:	460e      	mov	r6, r1
 80061ce:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061d0:	4619      	mov	r1, r3
 80061d2:	4ade      	ldr	r2, [pc, #888]	@ (800654c <OTM8009A_Init+0x38c>)
 80061d4:	4628      	mov	r0, r5
 80061d6:	f000 fb99 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80061da:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80061dc:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80061de:	4adc      	ldr	r2, [pc, #880]	@ (8006550 <OTM8009A_Init+0x390>)
 80061e0:	21ff      	movs	r1, #255	@ 0xff
 80061e2:	4628      	mov	r0, r5
 80061e4:	f000 fb92 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 80061ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061ec:	4ad9      	ldr	r2, [pc, #868]	@ (8006554 <OTM8009A_Init+0x394>)
 80061ee:	4619      	mov	r1, r3
 80061f0:	4628      	mov	r0, r5
 80061f2:	f000 fb8b 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80061f6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80061f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80061fa:	4ad7      	ldr	r2, [pc, #860]	@ (8006558 <OTM8009A_Init+0x398>)
 80061fc:	21ff      	movs	r1, #255	@ 0xff
 80061fe:	4628      	mov	r0, r5
 8006200:	f000 fb84 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006204:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8006206:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006208:	4ad2      	ldr	r2, [pc, #840]	@ (8006554 <OTM8009A_Init+0x394>)
 800620a:	4619      	mov	r1, r3
 800620c:	4628      	mov	r0, r5
 800620e:	f000 fb7d 	bl	800690c <otm8009a_write_reg>
 8006212:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006214:	2300      	movs	r3, #0
 8006216:	4ad1      	ldr	r2, [pc, #836]	@ (800655c <OTM8009A_Init+0x39c>)
 8006218:	21c4      	movs	r1, #196	@ 0xc4
 800621a:	4628      	mov	r0, r5
 800621c:	f000 fb76 	bl	800690c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8006220:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8006222:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8006224:	4638      	mov	r0, r7
 8006226:	f7ff ffbe 	bl	80061a6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 800622a:	2300      	movs	r3, #0
 800622c:	4acc      	ldr	r2, [pc, #816]	@ (8006560 <OTM8009A_Init+0x3a0>)
 800622e:	4628      	mov	r0, r5
 8006230:	4619      	mov	r1, r3
 8006232:	f000 fb6b 	bl	800690c <otm8009a_write_reg>
 8006236:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006238:	2300      	movs	r3, #0
 800623a:	4aca      	ldr	r2, [pc, #808]	@ (8006564 <OTM8009A_Init+0x3a4>)
 800623c:	21c4      	movs	r1, #196	@ 0xc4
 800623e:	4628      	mov	r0, r5
 8006240:	f000 fb64 	bl	800690c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8006244:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8006246:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8006248:	4638      	mov	r0, r7
 800624a:	f7ff ffac 	bl	80061a6 <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800624e:	2300      	movs	r3, #0
 8006250:	4ac5      	ldr	r2, [pc, #788]	@ (8006568 <OTM8009A_Init+0x3a8>)
 8006252:	4628      	mov	r0, r5
 8006254:	4619      	mov	r1, r3
 8006256:	f000 fb59 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800625a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 800625c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800625e:	4ac3      	ldr	r2, [pc, #780]	@ (800656c <OTM8009A_Init+0x3ac>)
 8006260:	21c5      	movs	r1, #197	@ 0xc5
 8006262:	4628      	mov	r0, r5
 8006264:	f000 fb52 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006268:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800626a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800626c:	4ac0      	ldr	r2, [pc, #768]	@ (8006570 <OTM8009A_Init+0x3b0>)
 800626e:	4619      	mov	r1, r3
 8006270:	4628      	mov	r0, r5
 8006272:	f000 fb4b 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006276:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8006278:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800627a:	4abe      	ldr	r2, [pc, #760]	@ (8006574 <OTM8009A_Init+0x3b4>)
 800627c:	21c5      	movs	r1, #197	@ 0xc5
 800627e:	4628      	mov	r0, r5
 8006280:	f000 fb44 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006284:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006286:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006288:	4abb      	ldr	r2, [pc, #748]	@ (8006578 <OTM8009A_Init+0x3b8>)
 800628a:	4619      	mov	r1, r3
 800628c:	4628      	mov	r0, r5
 800628e:	f000 fb3d 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006292:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8006294:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8006296:	4ab9      	ldr	r2, [pc, #740]	@ (800657c <OTM8009A_Init+0x3bc>)
 8006298:	21c0      	movs	r1, #192	@ 0xc0
 800629a:	4628      	mov	r0, r5
 800629c:	f000 fb36 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80062a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80062a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80062a4:	4aa9      	ldr	r2, [pc, #676]	@ (800654c <OTM8009A_Init+0x38c>)
 80062a6:	4619      	mov	r1, r3
 80062a8:	4628      	mov	r0, r5
 80062aa:	f000 fb2f 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80062ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80062b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80062b2:	4ab3      	ldr	r2, [pc, #716]	@ (8006580 <OTM8009A_Init+0x3c0>)
 80062b4:	21d9      	movs	r1, #217	@ 0xd9
 80062b6:	4628      	mov	r0, r5
 80062b8:	f000 fb28 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80062bc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80062be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80062c0:	4ab0      	ldr	r2, [pc, #704]	@ (8006584 <OTM8009A_Init+0x3c4>)
 80062c2:	4619      	mov	r1, r3
 80062c4:	4628      	mov	r0, r5
 80062c6:	f000 fb21 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80062ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80062cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80062ce:	4aae      	ldr	r2, [pc, #696]	@ (8006588 <OTM8009A_Init+0x3c8>)
 80062d0:	21c1      	movs	r1, #193	@ 0xc1
 80062d2:	4628      	mov	r0, r5
 80062d4:	f000 fb1a 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80062d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80062da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80062dc:	4aab      	ldr	r2, [pc, #684]	@ (800658c <OTM8009A_Init+0x3cc>)
 80062de:	4619      	mov	r1, r3
 80062e0:	4628      	mov	r0, r5
 80062e2:	f000 fb13 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80062e6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 80062e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80062ea:	4aa9      	ldr	r2, [pc, #676]	@ (8006590 <OTM8009A_Init+0x3d0>)
 80062ec:	21c5      	movs	r1, #197	@ 0xc5
 80062ee:	4628      	mov	r0, r5
 80062f0:	f000 fb0c 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80062f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 80062f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80062f8:	4aa6      	ldr	r2, [pc, #664]	@ (8006594 <OTM8009A_Init+0x3d4>)
 80062fa:	4619      	mov	r1, r3
 80062fc:	4628      	mov	r0, r5
 80062fe:	f000 fb05 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006302:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8006304:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006306:	4a9b      	ldr	r2, [pc, #620]	@ (8006574 <OTM8009A_Init+0x3b4>)
 8006308:	21c5      	movs	r1, #197	@ 0xc5
 800630a:	4628      	mov	r0, r5
 800630c:	f000 fafe 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006310:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8006312:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006314:	4a8d      	ldr	r2, [pc, #564]	@ (800654c <OTM8009A_Init+0x38c>)
 8006316:	4619      	mov	r1, r3
 8006318:	4628      	mov	r0, r5
 800631a:	f000 faf7 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800631e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006320:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8006322:	4a9d      	ldr	r2, [pc, #628]	@ (8006598 <OTM8009A_Init+0x3d8>)
 8006324:	21d8      	movs	r1, #216	@ 0xd8
 8006326:	4628      	mov	r0, r5
 8006328:	f000 faf0 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800632c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800632e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8006330:	4a9a      	ldr	r2, [pc, #616]	@ (800659c <OTM8009A_Init+0x3dc>)
 8006332:	4619      	mov	r1, r3
 8006334:	4628      	mov	r0, r5
 8006336:	f000 fae9 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800633a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 800633c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800633e:	4a98      	ldr	r2, [pc, #608]	@ (80065a0 <OTM8009A_Init+0x3e0>)
 8006340:	21c5      	movs	r1, #197	@ 0xc5
 8006342:	4628      	mov	r0, r5
 8006344:	f000 fae2 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006348:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 800634a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 800634c:	4a95      	ldr	r2, [pc, #596]	@ (80065a4 <OTM8009A_Init+0x3e4>)
 800634e:	4619      	mov	r1, r3
 8006350:	4628      	mov	r0, r5
 8006352:	f000 fadb 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006356:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8006358:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800635a:	4a93      	ldr	r2, [pc, #588]	@ (80065a8 <OTM8009A_Init+0x3e8>)
 800635c:	21c0      	movs	r1, #192	@ 0xc0
 800635e:	4628      	mov	r0, r5
 8006360:	f000 fad4 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006364:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8006366:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006368:	4a90      	ldr	r2, [pc, #576]	@ (80065ac <OTM8009A_Init+0x3ec>)
 800636a:	4619      	mov	r1, r3
 800636c:	4628      	mov	r0, r5
 800636e:	f000 facd 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006372:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8006374:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006376:	4a8e      	ldr	r2, [pc, #568]	@ (80065b0 <OTM8009A_Init+0x3f0>)
 8006378:	21c5      	movs	r1, #197	@ 0xc5
 800637a:	4628      	mov	r0, r5
 800637c:	f000 fac6 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006380:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8006382:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006384:	4a8b      	ldr	r2, [pc, #556]	@ (80065b4 <OTM8009A_Init+0x3f4>)
 8006386:	4619      	mov	r1, r3
 8006388:	4628      	mov	r0, r5
 800638a:	f000 fabf 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800638e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8006390:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8006392:	4a89      	ldr	r2, [pc, #548]	@ (80065b8 <OTM8009A_Init+0x3f8>)
 8006394:	21c4      	movs	r1, #196	@ 0xc4
 8006396:	4628      	mov	r0, r5
 8006398:	f000 fab8 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 800639c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 800639e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80063a0:	4a78      	ldr	r2, [pc, #480]	@ (8006584 <OTM8009A_Init+0x3c4>)
 80063a2:	4619      	mov	r1, r3
 80063a4:	4628      	mov	r0, r5
 80063a6:	f000 fab1 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80063aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80063ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80063ae:	4a83      	ldr	r2, [pc, #524]	@ (80065bc <OTM8009A_Init+0x3fc>)
 80063b0:	21c1      	movs	r1, #193	@ 0xc1
 80063b2:	4628      	mov	r0, r5
 80063b4:	f000 faaa 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80063b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80063ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80063bc:	4a80      	ldr	r2, [pc, #512]	@ (80065c0 <OTM8009A_Init+0x400>)
 80063be:	4619      	mov	r1, r3
 80063c0:	4628      	mov	r0, r5
 80063c2:	f000 faa3 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80063c6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 80063c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80063ca:	4a7e      	ldr	r2, [pc, #504]	@ (80065c4 <OTM8009A_Init+0x404>)
 80063cc:	21b3      	movs	r1, #179	@ 0xb3
 80063ce:	4628      	mov	r0, r5
 80063d0:	f000 fa9c 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 80063d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063d8:	4a5e      	ldr	r2, [pc, #376]	@ (8006554 <OTM8009A_Init+0x394>)
 80063da:	4619      	mov	r1, r3
 80063dc:	4628      	mov	r0, r5
 80063de:	f000 fa95 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80063e2:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80063e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80063e6:	4a78      	ldr	r2, [pc, #480]	@ (80065c8 <OTM8009A_Init+0x408>)
 80063e8:	21ce      	movs	r1, #206	@ 0xce
 80063ea:	4628      	mov	r0, r5
 80063ec:	f000 fa8e 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80063f0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 80063f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80063f4:	4a75      	ldr	r2, [pc, #468]	@ (80065cc <OTM8009A_Init+0x40c>)
 80063f6:	4619      	mov	r1, r3
 80063f8:	4628      	mov	r0, r5
 80063fa:	f000 fa87 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80063fe:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006400:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8006402:	4a73      	ldr	r2, [pc, #460]	@ (80065d0 <OTM8009A_Init+0x410>)
 8006404:	21ce      	movs	r1, #206	@ 0xce
 8006406:	4628      	mov	r0, r5
 8006408:	f000 fa80 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800640c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 800640e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006410:	4a70      	ldr	r2, [pc, #448]	@ (80065d4 <OTM8009A_Init+0x414>)
 8006412:	4619      	mov	r1, r3
 8006414:	4628      	mov	r0, r5
 8006416:	f000 fa79 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800641a:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800641c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800641e:	4a6e      	ldr	r2, [pc, #440]	@ (80065d8 <OTM8009A_Init+0x418>)
 8006420:	21ce      	movs	r1, #206	@ 0xce
 8006422:	4628      	mov	r0, r5
 8006424:	f000 fa72 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006428:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 800642a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800642c:	4a6b      	ldr	r2, [pc, #428]	@ (80065dc <OTM8009A_Init+0x41c>)
 800642e:	4619      	mov	r1, r3
 8006430:	4628      	mov	r0, r5
 8006432:	f000 fa6b 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006436:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006438:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800643a:	4a69      	ldr	r2, [pc, #420]	@ (80065e0 <OTM8009A_Init+0x420>)
 800643c:	21cf      	movs	r1, #207	@ 0xcf
 800643e:	4628      	mov	r0, r5
 8006440:	f000 fa64 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006444:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8006446:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006448:	4a66      	ldr	r2, [pc, #408]	@ (80065e4 <OTM8009A_Init+0x424>)
 800644a:	4619      	mov	r1, r3
 800644c:	4628      	mov	r0, r5
 800644e:	f000 fa5d 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006452:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8006454:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006456:	4a64      	ldr	r2, [pc, #400]	@ (80065e8 <OTM8009A_Init+0x428>)
 8006458:	21cf      	movs	r1, #207	@ 0xcf
 800645a:	4628      	mov	r0, r5
 800645c:	f000 fa56 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006460:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8006462:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006464:	4a3b      	ldr	r2, [pc, #236]	@ (8006554 <OTM8009A_Init+0x394>)
 8006466:	4619      	mov	r1, r3
 8006468:	4628      	mov	r0, r5
 800646a:	f000 fa4f 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800646e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006470:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8006472:	4a5e      	ldr	r2, [pc, #376]	@ (80065ec <OTM8009A_Init+0x42c>)
 8006474:	21cb      	movs	r1, #203	@ 0xcb
 8006476:	4628      	mov	r0, r5
 8006478:	f000 fa48 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800647c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800647e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8006480:	4a5b      	ldr	r2, [pc, #364]	@ (80065f0 <OTM8009A_Init+0x430>)
 8006482:	4619      	mov	r1, r3
 8006484:	4628      	mov	r0, r5
 8006486:	f000 fa41 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800648a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800648c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800648e:	4a59      	ldr	r2, [pc, #356]	@ (80065f4 <OTM8009A_Init+0x434>)
 8006490:	21cb      	movs	r1, #203	@ 0xcb
 8006492:	4628      	mov	r0, r5
 8006494:	f000 fa3a 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006498:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800649a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800649c:	4a4b      	ldr	r2, [pc, #300]	@ (80065cc <OTM8009A_Init+0x40c>)
 800649e:	4619      	mov	r1, r3
 80064a0:	4628      	mov	r0, r5
 80064a2:	f000 fa33 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80064a6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80064a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80064aa:	4a53      	ldr	r2, [pc, #332]	@ (80065f8 <OTM8009A_Init+0x438>)
 80064ac:	21cb      	movs	r1, #203	@ 0xcb
 80064ae:	4628      	mov	r0, r5
 80064b0:	f000 fa2c 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80064b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80064b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80064b8:	4a46      	ldr	r2, [pc, #280]	@ (80065d4 <OTM8009A_Init+0x414>)
 80064ba:	4619      	mov	r1, r3
 80064bc:	4628      	mov	r0, r5
 80064be:	f000 fa25 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80064c2:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80064c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80064c6:	4a4d      	ldr	r2, [pc, #308]	@ (80065fc <OTM8009A_Init+0x43c>)
 80064c8:	21cb      	movs	r1, #203	@ 0xcb
 80064ca:	4628      	mov	r0, r5
 80064cc:	f000 fa1e 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80064d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80064d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80064d4:	4a41      	ldr	r2, [pc, #260]	@ (80065dc <OTM8009A_Init+0x41c>)
 80064d6:	4619      	mov	r1, r3
 80064d8:	4628      	mov	r0, r5
 80064da:	f000 fa17 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80064de:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80064e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80064e2:	4a47      	ldr	r2, [pc, #284]	@ (8006600 <OTM8009A_Init+0x440>)
 80064e4:	21cb      	movs	r1, #203	@ 0xcb
 80064e6:	4628      	mov	r0, r5
 80064e8:	f000 fa10 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80064ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80064ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80064f0:	4a3c      	ldr	r2, [pc, #240]	@ (80065e4 <OTM8009A_Init+0x424>)
 80064f2:	4619      	mov	r1, r3
 80064f4:	4628      	mov	r0, r5
 80064f6:	f000 fa09 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80064fa:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80064fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80064fe:	4a41      	ldr	r2, [pc, #260]	@ (8006604 <OTM8009A_Init+0x444>)
 8006500:	21cb      	movs	r1, #203	@ 0xcb
 8006502:	4628      	mov	r0, r5
 8006504:	f000 fa02 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006508:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800650a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800650c:	4a3e      	ldr	r2, [pc, #248]	@ (8006608 <OTM8009A_Init+0x448>)
 800650e:	4619      	mov	r1, r3
 8006510:	4628      	mov	r0, r5
 8006512:	f000 f9fb 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006516:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8006518:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 800651a:	4a3c      	ldr	r2, [pc, #240]	@ (800660c <OTM8009A_Init+0x44c>)
 800651c:	21cb      	movs	r1, #203	@ 0xcb
 800651e:	4628      	mov	r0, r5
 8006520:	f000 f9f4 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006524:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8006526:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006528:	4a39      	ldr	r2, [pc, #228]	@ (8006610 <OTM8009A_Init+0x450>)
 800652a:	4619      	mov	r1, r3
 800652c:	4628      	mov	r0, r5
 800652e:	f000 f9ed 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006532:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8006534:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006536:	4a37      	ldr	r2, [pc, #220]	@ (8006614 <OTM8009A_Init+0x454>)
 8006538:	21cb      	movs	r1, #203	@ 0xcb
 800653a:	4628      	mov	r0, r5
 800653c:	f000 f9e6 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006540:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8006542:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8006544:	4a03      	ldr	r2, [pc, #12]	@ (8006554 <OTM8009A_Init+0x394>)
 8006546:	4619      	mov	r1, r3
 8006548:	4628      	mov	r0, r5
 800654a:	e065      	b.n	8006618 <OTM8009A_Init+0x458>
 800654c:	0802a885 	.word	0x0802a885
 8006550:	0802a881 	.word	0x0802a881
 8006554:	0802a886 	.word	0x0802a886
 8006558:	0802a87f 	.word	0x0802a87f
 800655c:	0802a887 	.word	0x0802a887
 8006560:	0802a888 	.word	0x0802a888
 8006564:	0802a889 	.word	0x0802a889
 8006568:	0802a88a 	.word	0x0802a88a
 800656c:	0802a88b 	.word	0x0802a88b
 8006570:	0802a88c 	.word	0x0802a88c
 8006574:	0802a88d 	.word	0x0802a88d
 8006578:	0802a88e 	.word	0x0802a88e
 800657c:	0802a88f 	.word	0x0802a88f
 8006580:	0802a890 	.word	0x0802a890
 8006584:	0802a893 	.word	0x0802a893
 8006588:	0802a894 	.word	0x0802a894
 800658c:	0802a895 	.word	0x0802a895
 8006590:	0802a896 	.word	0x0802a896
 8006594:	0802a897 	.word	0x0802a897
 8006598:	0802a87d 	.word	0x0802a87d
 800659c:	0802a898 	.word	0x0802a898
 80065a0:	0802a899 	.word	0x0802a899
 80065a4:	0802a89a 	.word	0x0802a89a
 80065a8:	0802a89b 	.word	0x0802a89b
 80065ac:	0802a89c 	.word	0x0802a89c
 80065b0:	0802a89d 	.word	0x0802a89d
 80065b4:	0802a891 	.word	0x0802a891
 80065b8:	0802a89e 	.word	0x0802a89e
 80065bc:	0802a89f 	.word	0x0802a89f
 80065c0:	0802a8a0 	.word	0x0802a8a0
 80065c4:	0802a87b 	.word	0x0802a87b
 80065c8:	0802a875 	.word	0x0802a875
 80065cc:	0802a8a1 	.word	0x0802a8a1
 80065d0:	0802a867 	.word	0x0802a867
 80065d4:	0802a8a2 	.word	0x0802a8a2
 80065d8:	0802a859 	.word	0x0802a859
 80065dc:	0802a8a3 	.word	0x0802a8a3
 80065e0:	0802a84f 	.word	0x0802a84f
 80065e4:	0802a8a4 	.word	0x0802a8a4
 80065e8:	0802a8b1 	.word	0x0802a8b1
 80065ec:	0802a845 	.word	0x0802a845
 80065f0:	0802a8a5 	.word	0x0802a8a5
 80065f4:	0802a836 	.word	0x0802a836
 80065f8:	0802a827 	.word	0x0802a827
 80065fc:	0802a81d 	.word	0x0802a81d
 8006600:	0802a80e 	.word	0x0802a80e
 8006604:	0802a7ff 	.word	0x0802a7ff
 8006608:	0802a8a6 	.word	0x0802a8a6
 800660c:	0802a7f5 	.word	0x0802a7f5
 8006610:	0802a8a7 	.word	0x0802a8a7
 8006614:	0802a7eb 	.word	0x0802a7eb
 8006618:	f000 f978 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800661c:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800661e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8006620:	4a8e      	ldr	r2, [pc, #568]	@ (800685c <OTM8009A_Init+0x69c>)
 8006622:	21cc      	movs	r1, #204	@ 0xcc
 8006624:	4628      	mov	r0, r5
 8006626:	f000 f971 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800662a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 800662c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800662e:	4a8c      	ldr	r2, [pc, #560]	@ (8006860 <OTM8009A_Init+0x6a0>)
 8006630:	4619      	mov	r1, r3
 8006632:	4628      	mov	r0, r5
 8006634:	f000 f96a 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006638:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800663a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 800663c:	4a89      	ldr	r2, [pc, #548]	@ (8006864 <OTM8009A_Init+0x6a4>)
 800663e:	21cc      	movs	r1, #204	@ 0xcc
 8006640:	4628      	mov	r0, r5
 8006642:	f000 f963 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006646:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8006648:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800664a:	4a87      	ldr	r2, [pc, #540]	@ (8006868 <OTM8009A_Init+0x6a8>)
 800664c:	4619      	mov	r1, r3
 800664e:	4628      	mov	r0, r5
 8006650:	f000 f95c 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006654:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8006656:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006658:	4a84      	ldr	r2, [pc, #528]	@ (800686c <OTM8009A_Init+0x6ac>)
 800665a:	21cc      	movs	r1, #204	@ 0xcc
 800665c:	4628      	mov	r0, r5
 800665e:	f000 f955 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006662:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8006664:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006666:	4a82      	ldr	r2, [pc, #520]	@ (8006870 <OTM8009A_Init+0x6b0>)
 8006668:	4619      	mov	r1, r3
 800666a:	4628      	mov	r0, r5
 800666c:	f000 f94e 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006670:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8006672:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006674:	4a7f      	ldr	r2, [pc, #508]	@ (8006874 <OTM8009A_Init+0x6b4>)
 8006676:	21cc      	movs	r1, #204	@ 0xcc
 8006678:	4628      	mov	r0, r5
 800667a:	f000 f947 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800667e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8006680:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8006682:	4a7d      	ldr	r2, [pc, #500]	@ (8006878 <OTM8009A_Init+0x6b8>)
 8006684:	4619      	mov	r1, r3
 8006686:	4628      	mov	r0, r5
 8006688:	f000 f940 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800668c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800668e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8006690:	4a7a      	ldr	r2, [pc, #488]	@ (800687c <OTM8009A_Init+0x6bc>)
 8006692:	21cc      	movs	r1, #204	@ 0xcc
 8006694:	4628      	mov	r0, r5
 8006696:	f000 f939 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800669a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 800669c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800669e:	4a78      	ldr	r2, [pc, #480]	@ (8006880 <OTM8009A_Init+0x6c0>)
 80066a0:	4619      	mov	r1, r3
 80066a2:	4628      	mov	r0, r5
 80066a4:	f000 f932 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80066a8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80066aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80066ac:	4a75      	ldr	r2, [pc, #468]	@ (8006884 <OTM8009A_Init+0x6c4>)
 80066ae:	21cc      	movs	r1, #204	@ 0xcc
 80066b0:	4628      	mov	r0, r5
 80066b2:	f000 f92b 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066b6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 80066b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066ba:	4a73      	ldr	r2, [pc, #460]	@ (8006888 <OTM8009A_Init+0x6c8>)
 80066bc:	4619      	mov	r1, r3
 80066be:	4628      	mov	r0, r5
 80066c0:	f000 f924 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80066c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80066c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80066c8:	4a70      	ldr	r2, [pc, #448]	@ (800688c <OTM8009A_Init+0x6cc>)
 80066ca:	21c5      	movs	r1, #197	@ 0xc5
 80066cc:	4628      	mov	r0, r5
 80066ce:	f000 f91d 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80066d2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80066d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80066d6:	4a6e      	ldr	r2, [pc, #440]	@ (8006890 <OTM8009A_Init+0x6d0>)
 80066d8:	4619      	mov	r1, r3
 80066da:	4628      	mov	r0, r5
 80066dc:	f000 f916 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80066e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80066e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80066e4:	4a6b      	ldr	r2, [pc, #428]	@ (8006894 <OTM8009A_Init+0x6d4>)
 80066e6:	21f5      	movs	r1, #245	@ 0xf5
 80066e8:	4628      	mov	r0, r5
 80066ea:	f000 f90f 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80066ee:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80066f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80066f2:	4a69      	ldr	r2, [pc, #420]	@ (8006898 <OTM8009A_Init+0x6d8>)
 80066f4:	4619      	mov	r1, r3
 80066f6:	4628      	mov	r0, r5
 80066f8:	f000 f908 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80066fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80066fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8006700:	4a66      	ldr	r2, [pc, #408]	@ (800689c <OTM8009A_Init+0x6dc>)
 8006702:	21c6      	movs	r1, #198	@ 0xc6
 8006704:	4628      	mov	r0, r5
 8006706:	f000 f901 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800670a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 800670c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800670e:	4a64      	ldr	r2, [pc, #400]	@ (80068a0 <OTM8009A_Init+0x6e0>)
 8006710:	4619      	mov	r1, r3
 8006712:	4628      	mov	r0, r5
 8006714:	f000 f8fa 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006718:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800671a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 800671c:	4a61      	ldr	r2, [pc, #388]	@ (80068a4 <OTM8009A_Init+0x6e4>)
 800671e:	21ff      	movs	r1, #255	@ 0xff
 8006720:	4628      	mov	r0, r5
 8006722:	f000 f8f3 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006726:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8006728:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800672a:	4a5d      	ldr	r2, [pc, #372]	@ (80068a0 <OTM8009A_Init+0x6e0>)
 800672c:	4619      	mov	r1, r3
 800672e:	4628      	mov	r0, r5
 8006730:	f000 f8ec 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006734:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006736:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006738:	4a59      	ldr	r2, [pc, #356]	@ (80068a0 <OTM8009A_Init+0x6e0>)
 800673a:	4619      	mov	r1, r3
 800673c:	4628      	mov	r0, r5
 800673e:	f000 f8e5 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006742:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006744:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006746:	4a58      	ldr	r2, [pc, #352]	@ (80068a8 <OTM8009A_Init+0x6e8>)
 8006748:	21e1      	movs	r1, #225	@ 0xe1
 800674a:	4628      	mov	r0, r5
 800674c:	f000 f8de 	bl	800690c <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006750:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8006752:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006754:	4a52      	ldr	r2, [pc, #328]	@ (80068a0 <OTM8009A_Init+0x6e0>)
 8006756:	4619      	mov	r1, r3
 8006758:	4628      	mov	r0, r5
 800675a:	f000 f8d7 	bl	800690c <otm8009a_write_reg>
 800675e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8006760:	2310      	movs	r3, #16
 8006762:	4a52      	ldr	r2, [pc, #328]	@ (80068ac <OTM8009A_Init+0x6ec>)
 8006764:	21e2      	movs	r1, #226	@ 0xe2
 8006766:	4628      	mov	r0, r5
 8006768:	f000 f8d0 	bl	800690c <otm8009a_write_reg>
 800676c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800676e:	2300      	movs	r3, #0
 8006770:	4a4f      	ldr	r2, [pc, #316]	@ (80068b0 <OTM8009A_Init+0x6f0>)
 8006772:	2111      	movs	r1, #17
 8006774:	4628      	mov	r0, r5
 8006776:	f000 f8c9 	bl	800690c <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800677a:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 800677c:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 800677e:	4638      	mov	r0, r7
 8006780:	f7ff fd11 	bl	80061a6 <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8006784:	4f4b      	ldr	r7, [pc, #300]	@ (80068b4 <OTM8009A_Init+0x6f4>)
 8006786:	2e00      	cmp	r6, #0
 8006788:	d061      	beq.n	800684e <OTM8009A_Init+0x68e>
 800678a:	2e02      	cmp	r6, #2
 800678c:	d107      	bne.n	800679e <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800678e:	2300      	movs	r3, #0
 8006790:	4a49      	ldr	r2, [pc, #292]	@ (80068b8 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8006792:	213a      	movs	r1, #58	@ 0x3a
 8006794:	4628      	mov	r0, r5
 8006796:	f000 f8b9 	bl	800690c <otm8009a_write_reg>
 800679a:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 800679c:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800679e:	f1b8 0f01 	cmp.w	r8, #1
 80067a2:	d157      	bne.n	8006854 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80067a4:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80067a6:	f10d 0207 	add.w	r2, sp, #7
 80067aa:	2136      	movs	r1, #54	@ 0x36
 80067ac:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 80067ae:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 80067b2:	2300      	movs	r3, #0
 80067b4:	f000 f8aa 	bl	800690c <otm8009a_write_reg>
 80067b8:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80067ba:	2304      	movs	r3, #4
 80067bc:	4a3f      	ldr	r2, [pc, #252]	@ (80068bc <OTM8009A_Init+0x6fc>)
 80067be:	212a      	movs	r1, #42	@ 0x2a
 80067c0:	4628      	mov	r0, r5
 80067c2:	f000 f8a3 	bl	800690c <otm8009a_write_reg>
 80067c6:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80067c8:	2304      	movs	r3, #4
 80067ca:	4a3d      	ldr	r2, [pc, #244]	@ (80068c0 <OTM8009A_Init+0x700>)
 80067cc:	212b      	movs	r1, #43	@ 0x2b
 80067ce:	4628      	mov	r0, r5
 80067d0:	f000 f89c 	bl	800690c <otm8009a_write_reg>
 80067d4:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80067d6:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80067da:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80067dc:	2300      	movs	r3, #0
 80067de:	4a39      	ldr	r2, [pc, #228]	@ (80068c4 <OTM8009A_Init+0x704>)
 80067e0:	2151      	movs	r1, #81	@ 0x51
 80067e2:	4628      	mov	r0, r5
 80067e4:	f000 f892 	bl	800690c <otm8009a_write_reg>
 80067e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80067ea:	4633      	mov	r3, r6
 80067ec:	4a36      	ldr	r2, [pc, #216]	@ (80068c8 <OTM8009A_Init+0x708>)
 80067ee:	2153      	movs	r1, #83	@ 0x53
 80067f0:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80067f2:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80067f4:	f000 f88a 	bl	800690c <otm8009a_write_reg>
 80067f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80067fa:	4633      	mov	r3, r6
 80067fc:	4a33      	ldr	r2, [pc, #204]	@ (80068cc <OTM8009A_Init+0x70c>)
 80067fe:	2155      	movs	r1, #85	@ 0x55
 8006800:	4628      	mov	r0, r5
 8006802:	f000 f883 	bl	800690c <otm8009a_write_reg>
 8006806:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8006808:	4633      	mov	r3, r6
 800680a:	4a31      	ldr	r2, [pc, #196]	@ (80068d0 <OTM8009A_Init+0x710>)
 800680c:	215e      	movs	r1, #94	@ 0x5e
 800680e:	4628      	mov	r0, r5
 8006810:	f000 f87c 	bl	800690c <otm8009a_write_reg>
 8006814:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8006816:	4633      	mov	r3, r6
 8006818:	4a2e      	ldr	r2, [pc, #184]	@ (80068d4 <OTM8009A_Init+0x714>)
 800681a:	2129      	movs	r1, #41	@ 0x29
 800681c:	4628      	mov	r0, r5
 800681e:	f000 f875 	bl	800690c <otm8009a_write_reg>
 8006822:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8006824:	4633      	mov	r3, r6
 8006826:	4631      	mov	r1, r6
 8006828:	4a1d      	ldr	r2, [pc, #116]	@ (80068a0 <OTM8009A_Init+0x6e0>)
 800682a:	4628      	mov	r0, r5
 800682c:	f000 f86e 	bl	800690c <otm8009a_write_reg>
 8006830:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8006832:	4633      	mov	r3, r6
 8006834:	4a28      	ldr	r2, [pc, #160]	@ (80068d8 <OTM8009A_Init+0x718>)
 8006836:	212c      	movs	r1, #44	@ 0x2c
 8006838:	4628      	mov	r0, r5
 800683a:	f000 f867 	bl	800690c <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 800683e:	42c4      	cmn	r4, r0
}
 8006840:	bf14      	ite	ne
 8006842:	f04f 30ff 	movne.w	r0, #4294967295
 8006846:	4630      	moveq	r0, r6
 8006848:	b002      	add	sp, #8
 800684a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800684e:	4633      	mov	r3, r6
 8006850:	4a22      	ldr	r2, [pc, #136]	@ (80068dc <OTM8009A_Init+0x71c>)
 8006852:	e79e      	b.n	8006792 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8006854:	2300      	movs	r3, #0
 8006856:	603b      	str	r3, [r7, #0]
 8006858:	e7bf      	b.n	80067da <OTM8009A_Init+0x61a>
 800685a:	bf00      	nop
 800685c:	0802a7e1 	.word	0x0802a7e1
 8006860:	0802a8a5 	.word	0x0802a8a5
 8006864:	0802a7d2 	.word	0x0802a7d2
 8006868:	0802a8a1 	.word	0x0802a8a1
 800686c:	0802a7c3 	.word	0x0802a7c3
 8006870:	0802a8a2 	.word	0x0802a8a2
 8006874:	0802a7b9 	.word	0x0802a7b9
 8006878:	0802a8a3 	.word	0x0802a8a3
 800687c:	0802a7aa 	.word	0x0802a7aa
 8006880:	0802a8a4 	.word	0x0802a8a4
 8006884:	0802a79b 	.word	0x0802a79b
 8006888:	0802a891 	.word	0x0802a891
 800688c:	0802a8b2 	.word	0x0802a8b2
 8006890:	0802a8b3 	.word	0x0802a8b3
 8006894:	0802a8b4 	.word	0x0802a8b4
 8006898:	0802a8b5 	.word	0x0802a8b5
 800689c:	0802a8b6 	.word	0x0802a8b6
 80068a0:	0802a885 	.word	0x0802a885
 80068a4:	0802a798 	.word	0x0802a798
 80068a8:	0802a788 	.word	0x0802a788
 80068ac:	0802a778 	.word	0x0802a778
 80068b0:	0802a8a8 	.word	0x0802a8a8
 80068b4:	2400bd8c 	.word	0x2400bd8c
 80068b8:	0802a8a9 	.word	0x0802a8a9
 80068bc:	0802a8bb 	.word	0x0802a8bb
 80068c0:	0802a8b7 	.word	0x0802a8b7
 80068c4:	0802a8ab 	.word	0x0802a8ab
 80068c8:	0802a8ac 	.word	0x0802a8ac
 80068cc:	0802a8ad 	.word	0x0802a8ad
 80068d0:	0802a8ae 	.word	0x0802a8ae
 80068d4:	0802a8af 	.word	0x0802a8af
 80068d8:	0802a8b0 	.word	0x0802a8b0
 80068dc:	0802a8aa 	.word	0x0802a8aa

080068e0 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80068e0:	b160      	cbz	r0, 80068fc <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80068e2:	684b      	ldr	r3, [r1, #4]
 80068e4:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80068e6:	688b      	ldr	r3, [r1, #8]
 80068e8:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80068ea:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80068ec:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80068ee:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80068f0:	4b04      	ldr	r3, [pc, #16]	@ (8006904 <OTM8009A_RegisterBusIO+0x24>)
 80068f2:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80068f4:	4b04      	ldr	r3, [pc, #16]	@ (8006908 <OTM8009A_RegisterBusIO+0x28>)
 80068f6:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80068f8:	2000      	movs	r0, #0
 80068fa:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80068fc:	f04f 30ff 	mov.w	r0, #4294967295
}
 8006900:	4770      	bx	lr
 8006902:	bf00      	nop
 8006904:	0800618b 	.word	0x0800618b
 8006908:	08006199 	.word	0x08006199

0800690c <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 800690c:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 800690e:	6804      	ldr	r4, [r0, #0]
 8006910:	6880      	ldr	r0, [r0, #8]
 8006912:	46a4      	mov	ip, r4
}
 8006914:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8006918:	4760      	bx	ip
	...

0800691c <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 800691c:	4a10      	ldr	r2, [pc, #64]	@ (8006960 <BSP_I2C4_DeInit+0x44>)
{
 800691e:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 8006920:	6813      	ldr	r3, [r2, #0]
 8006922:	3b01      	subs	r3, #1
 8006924:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006926:	b10b      	cbz	r3, 800692c <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8006928:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 800692a:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800692c:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8006930:	480c      	ldr	r0, [pc, #48]	@ (8006964 <BSP_I2C4_DeInit+0x48>)
 8006932:	f002 f873 	bl	8008a1c <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 8006936:	480b      	ldr	r0, [pc, #44]	@ (8006964 <BSP_I2C4_DeInit+0x48>)
 8006938:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800693c:	f002 f86e 	bl	8008a1c <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8006940:	4a09      	ldr	r2, [pc, #36]	@ (8006968 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006942:	480a      	ldr	r0, [pc, #40]	@ (800696c <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 8006944:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8006948:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800694c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006950:	f002 fab4 	bl	8008ebc <HAL_I2C_DeInit>
 8006954:	2800      	cmp	r0, #0
 8006956:	d0e7      	beq.n	8006928 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8006958:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800695c:	e7e5      	b.n	800692a <BSP_I2C4_DeInit+0xe>
 800695e:	bf00      	nop
 8006960:	2400c7f0 	.word	0x2400c7f0
 8006964:	58020c00 	.word	0x58020c00
 8006968:	58024400 	.word	0x58024400
 800696c:	2400bd98 	.word	0x2400bd98

08006970 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8006970:	2300      	movs	r3, #0
 8006972:	2201      	movs	r2, #1
{
 8006974:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 8006976:	6041      	str	r1, [r0, #4]
{
 8006978:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800697a:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800697c:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8006980:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8006984:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8006988:	f002 fa42 	bl	8008e10 <HAL_I2C_Init>
 800698c:	4601      	mov	r1, r0
 800698e:	b108      	cbz	r0, 8006994 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8006990:	2001      	movs	r0, #1
}
 8006992:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8006994:	4620      	mov	r0, r4
 8006996:	f002 fc68 	bl	800926a <HAL_I2CEx_ConfigAnalogFilter>
 800699a:	4601      	mov	r1, r0
 800699c:	2800      	cmp	r0, #0
 800699e:	d1f7      	bne.n	8006990 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 80069a0:	4620      	mov	r0, r4
 80069a2:	f002 fc88 	bl	80092b6 <HAL_I2CEx_ConfigDigitalFilter>
 80069a6:	3800      	subs	r0, #0
 80069a8:	bf18      	it	ne
 80069aa:	2001      	movne	r0, #1
 80069ac:	e7f1      	b.n	8006992 <MX_I2C4_Init+0x22>
	...

080069b0 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 80069b0:	4ba1      	ldr	r3, [pc, #644]	@ (8006c38 <BSP_I2C4_Init+0x288>)
 80069b2:	48a2      	ldr	r0, [pc, #648]	@ (8006c3c <BSP_I2C4_Init+0x28c>)
{
 80069b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 80069b8:	6003      	str	r3, [r0, #0]
{
 80069ba:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 80069bc:	4ba0      	ldr	r3, [pc, #640]	@ (8006c40 <BSP_I2C4_Init+0x290>)
 80069be:	681c      	ldr	r4, [r3, #0]
 80069c0:	b11c      	cbz	r4, 80069ca <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 80069c2:	2000      	movs	r0, #0
}
 80069c4:	b013      	add	sp, #76	@ 0x4c
 80069c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80069ca:	2201      	movs	r2, #1
 80069cc:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80069ce:	f002 fc47 	bl	8009260 <HAL_I2C_GetState>
 80069d2:	2800      	cmp	r0, #0
 80069d4:	d1f5      	bne.n	80069c2 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80069d6:	4d9b      	ldr	r5, [pc, #620]	@ (8006c44 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80069d8:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80069dc:	2702      	movs	r7, #2
 80069de:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80069e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80069e4:	a90d      	add	r1, sp, #52	@ 0x34
 80069e6:	4898      	ldr	r0, [pc, #608]	@ (8006c48 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80069e8:	f043 0308 	orr.w	r3, r3, #8
 80069ec:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80069f0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80069f4:	f003 0308 	and.w	r3, r3, #8
 80069f8:	930a      	str	r3, [sp, #40]	@ 0x28
 80069fa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80069fc:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8006a00:	f043 0308 	orr.w	r3, r3, #8
 8006a04:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8006a08:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006a0c:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8006a0e:	f003 0308 	and.w	r3, r3, #8
 8006a12:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006a14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006a16:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8006a1a:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006a1e:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8006a22:	f001 ff13 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8006a26:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006a2a:	a90d      	add	r1, sp, #52	@ 0x34
 8006a2c:	4886      	ldr	r0, [pc, #536]	@ (8006c48 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8006a2e:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8006a30:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8006a34:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8006a38:	f001 ff08 	bl	800884c <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8006a3c:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006a40:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a44:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8006a48:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8006a4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006a50:	930c      	str	r3, [sp, #48]	@ 0x30
 8006a52:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 8006a54:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006a58:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006a5c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8006a60:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8006a64:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006a68:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006a6c:	f004 fef2 	bl	800b854 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8006a70:	2800      	cmp	r0, #0
 8006a72:	d06f      	beq.n	8006b54 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006a74:	4b75      	ldr	r3, [pc, #468]	@ (8006c4c <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8006a76:	4622      	mov	r2, r4
 8006a78:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8006a7a:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006a7e:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006a82:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8006c54 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8006a86:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8006a8a:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8006a8e:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8006a92:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8006a94:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8006a98:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8006a9c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8006aa0:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8006aa4:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006aa6:	4b6a      	ldr	r3, [pc, #424]	@ (8006c50 <BSP_I2C4_Init+0x2a0>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
{
 8006aaa:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006aac:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8006ab0:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8006ab4:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8006ab8:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8006abc:	d35d      	bcc.n	8006b7a <BSP_I2C4_Init+0x1ca>
 8006abe:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006ac0:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8006ac2:	9d00      	ldr	r5, [sp, #0]
 8006ac4:	42bd      	cmp	r5, r7
 8006ac6:	d852      	bhi.n	8006b6e <BSP_I2C4_Init+0x1be>
 8006ac8:	42be      	cmp	r6, r7
 8006aca:	d350      	bcc.n	8006b6e <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8006acc:	4591      	cmp	r9, r2
 8006ace:	d04e      	beq.n	8006b6e <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006ad0:	2514      	movs	r5, #20
 8006ad2:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8006ad6:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8006ad8:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006ada:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006ade:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8006ae0:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8006ae4:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8006ae8:	d93e      	bls.n	8006b68 <BSP_I2C4_Init+0x1b8>
 8006aea:	4a59      	ldr	r2, [pc, #356]	@ (8006c50 <BSP_I2C4_Init+0x2a0>)
 8006aec:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006aee:	4b58      	ldr	r3, [pc, #352]	@ (8006c50 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006af0:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8006af4:	f04f 32ff 	mov.w	r2, #4294967295
 8006af8:	4956      	ldr	r1, [pc, #344]	@ (8006c54 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006afa:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006afc:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006afe:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006b00:	0043      	lsls	r3, r0, #1
 8006b02:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8006b06:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8006b0a:	f10b 0b01 	add.w	fp, fp, #1
 8006b0e:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8006b12:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8006b16:	9508      	str	r5, [sp, #32]
 8006b18:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006b1a:	9b05      	ldr	r3, [sp, #20]
 8006b1c:	429f      	cmp	r7, r3
 8006b1e:	d138      	bne.n	8006b92 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8006b20:	9b01      	ldr	r3, [sp, #4]
 8006b22:	2b7f      	cmp	r3, #127	@ 0x7f
 8006b24:	d816      	bhi.n	8006b54 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006b26:	2114      	movs	r1, #20
 8006b28:	9a01      	ldr	r2, [sp, #4]
 8006b2a:	4b4a      	ldr	r3, [pc, #296]	@ (8006c54 <BSP_I2C4_Init+0x2a4>)
 8006b2c:	434a      	muls	r2, r1
 8006b2e:	1899      	adds	r1, r3, r2
 8006b30:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8006b32:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006b34:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8006b38:	684b      	ldr	r3, [r1, #4]
 8006b3a:	051b      	lsls	r3, r3, #20
 8006b3c:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006b40:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8006b42:	688b      	ldr	r3, [r1, #8]
 8006b44:	041b      	lsls	r3, r3, #16
 8006b46:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006b4a:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8006b4c:	68cb      	ldr	r3, [r1, #12]
 8006b4e:	021b      	lsls	r3, r3, #8
 8006b50:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8006b52:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006b54:	4621      	mov	r1, r4
 8006b56:	4839      	ldr	r0, [pc, #228]	@ (8006c3c <BSP_I2C4_Init+0x28c>)
 8006b58:	f7ff ff0a 	bl	8006970 <MX_I2C4_Init>
 8006b5c:	2800      	cmp	r0, #0
 8006b5e:	f43f af30 	beq.w	80069c2 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8006b62:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8006b66:	e72d      	b.n	80069c4 <BSP_I2C4_Init+0x14>
 8006b68:	4691      	mov	r9, r2
 8006b6a:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8006b6e:	f10e 0e01 	add.w	lr, lr, #1
 8006b72:	440f      	add	r7, r1
 8006b74:	f1be 0f10 	cmp.w	lr, #16
 8006b78:	d1a3      	bne.n	8006ac2 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8006b7a:	f1bc 0f10 	cmp.w	ip, #16
 8006b7e:	4488      	add	r8, r1
 8006b80:	d196      	bne.n	8006ab0 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8006b82:	3201      	adds	r2, #1
 8006b84:	4401      	add	r1, r0
 8006b86:	2a10      	cmp	r2, #16
 8006b88:	d18f      	bne.n	8006aaa <BSP_I2C4_Init+0xfa>
 8006b8a:	f1ba 0f00 	cmp.w	sl, #0
 8006b8e:	d1ac      	bne.n	8006aea <BSP_I2C4_Init+0x13a>
 8006b90:	e7ad      	b.n	8006aee <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006b92:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006b94:	f04f 0c00 	mov.w	ip, #0
 8006b98:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006b9a:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006b9e:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8006ba0:	441d      	add	r5, r3
 8006ba2:	441e      	add	r6, r3
 8006ba4:	9503      	str	r5, [sp, #12]
 8006ba6:	ebab 0503 	sub.w	r5, fp, r3
 8006baa:	9607      	str	r6, [sp, #28]
 8006bac:	006d      	lsls	r5, r5, #1
 8006bae:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8006bb0:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006bb2:	f240 5214 	movw	r2, #1300	@ 0x514
 8006bb6:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006bba:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006bbe:	4295      	cmp	r5, r2
 8006bc0:	d92f      	bls.n	8006c22 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8006bc2:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006bc6:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8006bca:	d22a      	bcs.n	8006c22 <BSP_I2C4_Init+0x272>
 8006bcc:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006bce:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8006bd2:	f8dd 9000 	ldr.w	r9, [sp]
 8006bd6:	442e      	add	r6, r5
 8006bd8:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006bdc:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8006be0:	f240 4212 	movw	r2, #1042	@ 0x412
 8006be4:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8006be8:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8006bec:	4592      	cmp	sl, r2
 8006bee:	d811      	bhi.n	8006c14 <BSP_I2C4_Init+0x264>
 8006bf0:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8006bf4:	d30e      	bcc.n	8006c14 <BSP_I2C4_Init+0x264>
 8006bf6:	4580      	cmp	r8, r0
 8006bf8:	d90c      	bls.n	8006c14 <BSP_I2C4_Init+0x264>
              error = -error;
 8006bfa:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8006bfe:	bf28      	it	cs
 8006c00:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8006c02:	9a02      	ldr	r2, [sp, #8]
 8006c04:	4592      	cmp	sl, r2
 8006c06:	d205      	bcs.n	8006c14 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8006c08:	9a04      	ldr	r2, [sp, #16]
 8006c0a:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8006c0c:	9a06      	ldr	r2, [sp, #24]
 8006c0e:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8006c12:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8006c14:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8006c18:	4498      	add	r8, r3
 8006c1a:	441e      	add	r6, r3
 8006c1c:	eba9 0903 	sub.w	r9, r9, r3
 8006c20:	d1dc      	bne.n	8006bdc <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8006c22:	9a00      	ldr	r2, [sp, #0]
 8006c24:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8006c28:	441d      	add	r5, r3
 8006c2a:	eba2 0203 	sub.w	r2, r2, r3
 8006c2e:	9200      	str	r2, [sp, #0]
 8006c30:	d1bf      	bne.n	8006bb2 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8006c32:	3701      	adds	r7, #1
 8006c34:	3114      	adds	r1, #20
 8006c36:	e770      	b.n	8006b1a <BSP_I2C4_Init+0x16a>
 8006c38:	58001c00 	.word	0x58001c00
 8006c3c:	2400bd98 	.word	0x2400bd98
 8006c40:	2400c7f0 	.word	0x2400c7f0
 8006c44:	58024400 	.word	0x58024400
 8006c48:	58020c00 	.word	0x58020c00
 8006c4c:	3b9aca00 	.word	0x3b9aca00
 8006c50:	2400bdec 	.word	0x2400bdec
 8006c54:	2400bdf0 	.word	0x2400bdf0

08006c58 <BSP_I2C4_WriteReg>:
{
 8006c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006c5a:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006c5e:	9200      	str	r2, [sp, #0]
 8006c60:	460a      	mov	r2, r1
 8006c62:	4601      	mov	r1, r0
 8006c64:	4808      	ldr	r0, [pc, #32]	@ (8006c88 <BSP_I2C4_WriteReg+0x30>)
 8006c66:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	f002 f940 	bl	8008ef0 <HAL_I2C_Mem_Write>
 8006c70:	b140      	cbz	r0, 8006c84 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006c72:	4805      	ldr	r0, [pc, #20]	@ (8006c88 <BSP_I2C4_WriteReg+0x30>)
 8006c74:	f002 faf7 	bl	8009266 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006c78:	2804      	cmp	r0, #4
 8006c7a:	bf14      	ite	ne
 8006c7c:	f06f 0003 	mvnne.w	r0, #3
 8006c80:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006c84:	b004      	add	sp, #16
 8006c86:	bd10      	pop	{r4, pc}
 8006c88:	2400bd98 	.word	0x2400bd98

08006c8c <BSP_I2C4_ReadReg>:
{
 8006c8c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8006c8e:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8006c92:	9200      	str	r2, [sp, #0]
 8006c94:	460a      	mov	r2, r1
 8006c96:	4601      	mov	r1, r0
 8006c98:	4808      	ldr	r0, [pc, #32]	@ (8006cbc <BSP_I2C4_ReadReg+0x30>)
 8006c9a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006c9e:	2301      	movs	r3, #1
 8006ca0:	f002 fa00 	bl	80090a4 <HAL_I2C_Mem_Read>
 8006ca4:	b140      	cbz	r0, 8006cb8 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8006ca6:	4805      	ldr	r0, [pc, #20]	@ (8006cbc <BSP_I2C4_ReadReg+0x30>)
 8006ca8:	f002 fadd 	bl	8009266 <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8006cac:	2804      	cmp	r0, #4
 8006cae:	bf14      	ite	ne
 8006cb0:	f06f 0003 	mvnne.w	r0, #3
 8006cb4:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8006cb8:	b004      	add	sp, #16
 8006cba:	bd10      	pop	{r4, pc}
 8006cbc:	2400bd98 	.word	0x2400bd98

08006cc0 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8006cc0:	f000 bd08 	b.w	80076d4 <HAL_GetTick>

08006cc4 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8006cc4:	4a09      	ldr	r2, [pc, #36]	@ (8006cec <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006cc6:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8006cca:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8006ccc:	684a      	ldr	r2, [r1, #4]
 8006cce:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8006cd4:	688a      	ldr	r2, [r1, #8]
 8006cd6:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8006cd8:	680a      	ldr	r2, [r1, #0]
 8006cda:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8006cdc:	2200      	movs	r2, #0
 8006cde:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8006ce2:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8006ce4:	68ca      	ldr	r2, [r1, #12]
 8006ce6:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8006ce8:	f003 bede 	b.w	800aaa8 <HAL_QSPI_Init>
 8006cec:	52005000 	.word	0x52005000

08006cf0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8006cf0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006cf2:	b988      	cbnz	r0, 8006d18 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006cf4:	4c0a      	ldr	r4, [pc, #40]	@ (8006d20 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8006cf6:	480b      	ldr	r0, [pc, #44]	@ (8006d24 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006cf8:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006cfa:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8006cfc:	b94b      	cbnz	r3, 8006d12 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006cfe:	f7ff f9bc 	bl	800607a <MT25TL01G_EnableMemoryMappedModeSTR>
 8006d02:	b110      	cbz	r0, 8006d0a <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d04:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8006d08:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006d0a:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8006d0c:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8006d0e:	7023      	strb	r3, [r4, #0]
 8006d10:	e7fa      	b.n	8006d08 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006d12:	f7ff f968 	bl	8005fe6 <MT25TL01G_EnableMemoryMappedModeDTR>
 8006d16:	e7f4      	b.n	8006d02 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8006d18:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006d1c:	e7f4      	b.n	8006d08 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8006d1e:	bf00      	nop
 8006d20:	2400c7f4 	.word	0x2400c7f4
 8006d24:	2400049c 	.word	0x2400049c

08006d28 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8006d28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d2a:	460c      	mov	r4, r1
 8006d2c:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006d2e:	bb30      	cbnz	r0, 8006d7e <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8006d30:	4d17      	ldr	r5, [pc, #92]	@ (8006d90 <BSP_QSPI_ConfigFlash+0x68>)
 8006d32:	782b      	ldrb	r3, [r5, #0]
 8006d34:	2b02      	cmp	r3, #2
 8006d36:	d025      	beq.n	8006d84 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006d38:	fab2 f382 	clz	r3, r2
 8006d3c:	4e15      	ldr	r6, [pc, #84]	@ (8006d94 <BSP_QSPI_ConfigFlash+0x6c>)
 8006d3e:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006d40:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006d42:	011b      	lsls	r3, r3, #4
 8006d44:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8006d46:	f003 feaf 	bl	800aaa8 <HAL_QSPI_Init>
 8006d4a:	b9f0      	cbnz	r0, 8006d8a <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8006d4c:	786b      	ldrb	r3, [r5, #1]
 8006d4e:	2b03      	cmp	r3, #3
 8006d50:	d10f      	bne.n	8006d72 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8006d52:	2c03      	cmp	r4, #3
 8006d54:	d105      	bne.n	8006d62 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006d56:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006d58:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8006d5a:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8006d5c:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8006d5e:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8006d60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8006d62:	4630      	mov	r0, r6
 8006d64:	f7ff f923 	bl	8005fae <MT25TL01G_ExitQPIMode>
 8006d68:	2800      	cmp	r0, #0
 8006d6a:	d0f4      	beq.n	8006d56 <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8006d6c:	f06f 0004 	mvn.w	r0, #4
 8006d70:	e7f6      	b.n	8006d60 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8006d72:	2c03      	cmp	r4, #3
 8006d74:	d1ef      	bne.n	8006d56 <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8006d76:	4630      	mov	r0, r6
 8006d78:	f7ff f8fd 	bl	8005f76 <MT25TL01G_EnterQPIMode>
 8006d7c:	e7f4      	b.n	8006d68 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8006d7e:	f06f 0001 	mvn.w	r0, #1
 8006d82:	e7ed      	b.n	8006d60 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8006d84:	f06f 0019 	mvn.w	r0, #25
 8006d88:	e7ea      	b.n	8006d60 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006d8a:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8006d8e:	e7e7      	b.n	8006d60 <BSP_QSPI_ConfigFlash+0x38>
 8006d90:	2400c7f4 	.word	0x2400c7f4
 8006d94:	2400049c 	.word	0x2400049c

08006d98 <BSP_QSPI_Init>:
{
 8006d98:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d9c:	460c      	mov	r4, r1
 8006d9e:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8006da0:	2800      	cmp	r0, #0
 8006da2:	f040 81ac 	bne.w	80070fe <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8006da6:	4d03      	ldr	r5, [pc, #12]	@ (8006db4 <BSP_QSPI_Init+0x1c>)
 8006da8:	782f      	ldrb	r7, [r5, #0]
 8006daa:	b12f      	cbz	r7, 8006db8 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8006dac:	2000      	movs	r0, #0
}
 8006dae:	b024      	add	sp, #144	@ 0x90
 8006db0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006db4:	2400c7f4 	.word	0x2400c7f4
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8006db8:	4bc3      	ldr	r3, [pc, #780]	@ (80070c8 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006dba:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006dbe:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006dc0:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8006dc2:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006dc6:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006dca:	48c0      	ldr	r0, [pc, #768]	@ (80070cc <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006dcc:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8006dd0:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dd4:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006dd8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006ddc:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8006de0:	9201      	str	r2, [sp, #4]
 8006de2:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8006de4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006de6:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8006dea:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8006dec:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8006dee:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8006df2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8006df4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006df8:	f042 0202 	orr.w	r2, r2, #2
 8006dfc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e00:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e04:	f002 0202 	and.w	r2, r2, #2
 8006e08:	9202      	str	r2, [sp, #8]
 8006e0a:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8006e0c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e10:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e14:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e18:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e1c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006e20:	9203      	str	r2, [sp, #12]
 8006e22:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8006e24:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e28:	f042 0208 	orr.w	r2, r2, #8
 8006e2c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e30:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e34:	f002 0208 	and.w	r2, r2, #8
 8006e38:	9204      	str	r2, [sp, #16]
 8006e3a:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8006e3c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e40:	f042 0220 	orr.w	r2, r2, #32
 8006e44:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e48:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e4c:	f002 0220 	and.w	r2, r2, #32
 8006e50:	9205      	str	r2, [sp, #20]
 8006e52:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8006e54:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e58:	f042 0220 	orr.w	r2, r2, #32
 8006e5c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e60:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e64:	f002 0220 	and.w	r2, r2, #32
 8006e68:	9206      	str	r2, [sp, #24]
 8006e6a:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8006e6c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e70:	f042 0220 	orr.w	r2, r2, #32
 8006e74:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e78:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e7c:	f002 0220 	and.w	r2, r2, #32
 8006e80:	9207      	str	r2, [sp, #28]
 8006e82:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8006e84:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e88:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006e8c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006e90:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006e94:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006e98:	9208      	str	r2, [sp, #32]
 8006e9a:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8006e9c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ea0:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ea4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ea8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006eac:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006eb0:	9209      	str	r2, [sp, #36]	@ 0x24
 8006eb2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8006eb4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006eb8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006ebc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ec0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ec4:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006ec8:	920a      	str	r2, [sp, #40]	@ 0x28
 8006eca:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8006ecc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ed0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ed4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ed8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006edc:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8006ee0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8006ee2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8006ee4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006ee8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006eec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006ef0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ef4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ef8:	930c      	str	r3, [sp, #48]	@ 0x30
 8006efa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8006efc:	2302      	movs	r3, #2
 8006efe:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8006f02:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f04:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006f06:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8006f0a:	f001 fc9f 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006f0e:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006f10:	a916      	add	r1, sp, #88	@ 0x58
 8006f12:	486f      	ldr	r0, [pc, #444]	@ (80070d0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006f14:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8006f16:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006f1a:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8006f1e:	f001 fc95 	bl	800884c <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006f22:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006f26:	a916      	add	r1, sp, #88	@ 0x58
 8006f28:	486a      	ldr	r0, [pc, #424]	@ (80070d4 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8006f2a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8006f2c:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f2e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8006f30:	f001 fc8c 	bl	800884c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006f34:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8006f36:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006f3a:	4867      	ldr	r0, [pc, #412]	@ (80070d8 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006f3c:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f40:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8006f42:	f001 fc83 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006f46:	a916      	add	r1, sp, #88	@ 0x58
 8006f48:	4864      	ldr	r0, [pc, #400]	@ (80070dc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8006f4a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8006f4e:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8006f52:	f001 fc7b 	bl	800884c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006f56:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006f58:	a916      	add	r1, sp, #88	@ 0x58
 8006f5a:	485f      	ldr	r0, [pc, #380]	@ (80070d8 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8006f5c:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f5e:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8006f60:	f001 fc74 	bl	800884c <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006f64:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006f66:	a916      	add	r1, sp, #88	@ 0x58
 8006f68:	485c      	ldr	r0, [pc, #368]	@ (80070dc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8006f6a:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8006f6c:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8006f6e:	f001 fc6d 	bl	800884c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006f72:	a916      	add	r1, sp, #88	@ 0x58
 8006f74:	4856      	ldr	r0, [pc, #344]	@ (80070d0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8006f76:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8006f7a:	f001 fc67 	bl	800884c <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006f7e:	a916      	add	r1, sp, #88	@ 0x58
 8006f80:	4856      	ldr	r0, [pc, #344]	@ (80070dc <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8006f82:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8006f86:	f001 fc61 	bl	800884c <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006f8a:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006f8e:	a916      	add	r1, sp, #88	@ 0x58
 8006f90:	484f      	ldr	r0, [pc, #316]	@ (80070d0 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8006f92:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8006f94:	f001 fc5a 	bl	800884c <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8006f98:	463a      	mov	r2, r7
 8006f9a:	210f      	movs	r1, #15
 8006f9c:	205c      	movs	r0, #92	@ 0x5c
 8006f9e:	f000 fbc9 	bl	8007734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8006fa2:	205c      	movs	r0, #92	@ 0x5c
 8006fa4:	f000 fbf8 	bl	8007798 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8006fa8:	a811      	add	r0, sp, #68	@ 0x44
 8006faa:	f7fe ff38 	bl	8005e1e <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006fae:	7863      	ldrb	r3, [r4, #1]
 8006fb0:	4a4b      	ldr	r2, [pc, #300]	@ (80070e0 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8006fb2:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8006fb6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8006fba:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8006fbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8006fbe:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006fc2:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8006fc6:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006fca:	a90d      	add	r1, sp, #52	@ 0x34
 8006fcc:	4845      	ldr	r0, [pc, #276]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006fce:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006fd0:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006fd2:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8006fd4:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8006fd6:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8006fd8:	f7ff fe74 	bl	8006cc4 <MX_QSPI_Init>
 8006fdc:	2800      	cmp	r0, #0
 8006fde:	f040 8091 	bne.w	8007104 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006fe2:	2103      	movs	r1, #3
 8006fe4:	483f      	ldr	r0, [pc, #252]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8006fe6:	f7ff f88e 	bl	8006106 <MT25TL01G_ResetEnable>
 8006fea:	2800      	cmp	r0, #0
 8006fec:	f040 8084 	bne.w	80070f8 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8006ff0:	2103      	movs	r1, #3
 8006ff2:	483c      	ldr	r0, [pc, #240]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8006ff4:	f7ff f8a8 	bl	8006148 <MT25TL01G_ResetMemory>
 8006ff8:	2800      	cmp	r0, #0
 8006ffa:	d17d      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006ffc:	7869      	ldrb	r1, [r5, #1]
 8006ffe:	4839      	ldr	r0, [pc, #228]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8007000:	f7fe ff1e 	bl	8005e40 <MT25TL01G_AutoPollingMemReady>
 8007004:	4601      	mov	r1, r0
 8007006:	2800      	cmp	r0, #0
 8007008:	d176      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 800700a:	4836      	ldr	r0, [pc, #216]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 800700c:	f7ff f87b 	bl	8006106 <MT25TL01G_ResetEnable>
 8007010:	4601      	mov	r1, r0
 8007012:	2800      	cmp	r0, #0
 8007014:	d170      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8007016:	4833      	ldr	r0, [pc, #204]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8007018:	f7ff f896 	bl	8006148 <MT25TL01G_ResetMemory>
 800701c:	4601      	mov	r1, r0
 800701e:	2800      	cmp	r0, #0
 8007020:	d16a      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8007022:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8007024:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007026:	482f      	ldr	r0, [pc, #188]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8007028:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 800702a:	f7fe ff09 	bl	8005e40 <MT25TL01G_AutoPollingMemReady>
 800702e:	2800      	cmp	r0, #0
 8007030:	d162      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007032:	7869      	ldrb	r1, [r5, #1]
 8007034:	482b      	ldr	r0, [pc, #172]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8007036:	f7fe ff72 	bl	8005f1e <MT25TL01G_Enter4BytesAddressMode>
 800703a:	2800      	cmp	r0, #0
 800703c:	d15c      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800703e:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8007042:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8007046:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007048:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 800704c:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 800704e:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007050:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8007052:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8007054:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8007058:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 800705a:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800705c:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8007060:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8007064:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007068:	481e      	ldr	r0, [pc, #120]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 800706a:	f003 fd69 	bl	800ab40 <HAL_QSPI_Command>
 800706e:	2800      	cmp	r0, #0
 8007070:	d142      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007072:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007076:	f10d 0102 	add.w	r1, sp, #2
 800707a:	481a      	ldr	r0, [pc, #104]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 800707c:	f003 fe01 	bl	800ac82 <HAL_QSPI_Receive>
 8007080:	2800      	cmp	r0, #0
 8007082:	d139      	bne.n	80070f8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8007084:	7869      	ldrb	r1, [r5, #1]
 8007086:	4817      	ldr	r0, [pc, #92]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 8007088:	f7fe ff05 	bl	8005e96 <MT25TL01G_WriteEnable>
 800708c:	bba0      	cbnz	r0, 80070f8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800708e:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8007090:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007094:	a916      	add	r1, sp, #88	@ 0x58
 8007096:	4813      	ldr	r0, [pc, #76]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8007098:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800709a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800709e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80070a2:	051b      	lsls	r3, r3, #20
 80070a4:	0d1b      	lsrs	r3, r3, #20
 80070a6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80070aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80070ae:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070b2:	f003 fd45 	bl	800ab40 <HAL_QSPI_Command>
 80070b6:	b9f8      	cbnz	r0, 80070f8 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80070b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80070bc:	f10d 0102 	add.w	r1, sp, #2
 80070c0:	4808      	ldr	r0, [pc, #32]	@ (80070e4 <BSP_QSPI_Init+0x34c>)
 80070c2:	f003 fd82 	bl	800abca <HAL_QSPI_Transmit>
 80070c6:	e00f      	b.n	80070e8 <BSP_QSPI_Init+0x350>
 80070c8:	58024400 	.word	0x58024400
 80070cc:	58020400 	.word	0x58020400
 80070d0:	58021800 	.word	0x58021800
 80070d4:	58020c00 	.word	0x58020c00
 80070d8:	58021c00 	.word	0x58021c00
 80070dc:	58021400 	.word	0x58021400
 80070e0:	0802a8c0 	.word	0x0802a8c0
 80070e4:	2400049c 	.word	0x2400049c
 80070e8:	b930      	cbnz	r0, 80070f8 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 80070ea:	7862      	ldrb	r2, [r4, #1]
 80070ec:	7821      	ldrb	r1, [r4, #0]
 80070ee:	f7ff fe1b 	bl	8006d28 <BSP_QSPI_ConfigFlash>
 80070f2:	2800      	cmp	r0, #0
 80070f4:	f43f ae5a 	beq.w	8006dac <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80070f8:	f06f 0004 	mvn.w	r0, #4
 80070fc:	e657      	b.n	8006dae <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 80070fe:	f06f 0001 	mvn.w	r0, #1
 8007102:	e654      	b.n	8006dae <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8007104:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8007108:	e651      	b.n	8006dae <BSP_QSPI_Init+0x16>
 800710a:	bf00      	nop

0800710c <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 800710c:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 800710e:	4604      	mov	r4, r0
 8007110:	b970      	cbnz	r0, 8007130 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8007112:	4b09      	ldr	r3, [pc, #36]	@ (8007138 <BSP_SDRAM_DeInit+0x2c>)
 8007114:	4809      	ldr	r0, [pc, #36]	@ (800713c <BSP_SDRAM_DeInit+0x30>)
 8007116:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8007118:	f005 fb64 	bl	800c7e4 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 800711c:	207a      	movs	r0, #122	@ 0x7a
 800711e:	f000 fb49 	bl	80077b4 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8007122:	4807      	ldr	r0, [pc, #28]	@ (8007140 <BSP_SDRAM_DeInit+0x34>)
 8007124:	4b07      	ldr	r3, [pc, #28]	@ (8007144 <BSP_SDRAM_DeInit+0x38>)
 8007126:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8007128:	f003 fa42 	bl	800a5b0 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 800712c:	4620      	mov	r0, r4
}
 800712e:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8007130:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007134:	e7fb      	b.n	800712e <BSP_SDRAM_DeInit+0x22>
 8007136:	bf00      	nop
 8007138:	52004140 	.word	0x52004140
 800713c:	2400c8f8 	.word	0x2400c8f8
 8007140:	2400c800 	.word	0x2400c800
 8007144:	52000040 	.word	0x52000040

08007148 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8007148:	2201      	movs	r2, #1
 800714a:	4915      	ldr	r1, [pc, #84]	@ (80071a0 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800714c:	4b15      	ldr	r3, [pc, #84]	@ (80071a4 <MX_SDRAM_Init+0x5c>)
{
 800714e:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8007150:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8007154:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8007156:	2104      	movs	r1, #4
 8007158:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 800715a:	2440      	movs	r4, #64	@ 0x40
{
 800715c:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 800715e:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8007162:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8007166:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800716a:	2200      	movs	r2, #0
 800716c:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8007170:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8007174:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8007178:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800717a:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 800717c:	2207      	movs	r2, #7
 800717e:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8007180:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007184:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8007186:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8007188:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 800718c:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8007190:	f005 fb00 	bl	800c794 <HAL_SDRAM_Init>
}
 8007194:	3800      	subs	r0, #0
 8007196:	bf18      	it	ne
 8007198:	2001      	movne	r0, #1
 800719a:	b008      	add	sp, #32
 800719c:	bd10      	pop	{r4, pc}
 800719e:	bf00      	nop
 80071a0:	52004140 	.word	0x52004140
 80071a4:	2400c8f8 	.word	0x2400c8f8

080071a8 <BSP_SDRAM_Init>:
{
 80071a8:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 80071aa:	4605      	mov	r5, r0
{
 80071ac:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 80071ae:	2800      	cmp	r0, #0
 80071b0:	f040 80dd 	bne.w	800736e <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 80071b4:	4b71      	ldr	r3, [pc, #452]	@ (800737c <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 80071b6:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80071b8:	a909      	add	r1, sp, #36	@ 0x24
 80071ba:	4871      	ldr	r0, [pc, #452]	@ (8007380 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80071bc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80071c0:	4c70      	ldr	r4, [pc, #448]	@ (8007384 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80071c2:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80071c6:	4e70      	ldr	r6, [pc, #448]	@ (8007388 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 80071c8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80071cc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80071d0:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 80071d4:	9201      	str	r2, [sp, #4]
 80071d6:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 80071d8:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80071dc:	f042 0201 	orr.w	r2, r2, #1
 80071e0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80071e4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80071e8:	f002 0201 	and.w	r2, r2, #1
 80071ec:	9202      	str	r2, [sp, #8]
 80071ee:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80071f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80071f4:	f042 0208 	orr.w	r2, r2, #8
 80071f8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80071fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007200:	f002 0208 	and.w	r2, r2, #8
 8007204:	9203      	str	r2, [sp, #12]
 8007206:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8007208:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800720c:	f042 0210 	orr.w	r2, r2, #16
 8007210:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007214:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007218:	f002 0210 	and.w	r2, r2, #16
 800721c:	9204      	str	r2, [sp, #16]
 800721e:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8007220:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007224:	f042 0220 	orr.w	r2, r2, #32
 8007228:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800722c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007230:	f002 0220 	and.w	r2, r2, #32
 8007234:	9205      	str	r2, [sp, #20]
 8007236:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8007238:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800723c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007240:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8007244:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007248:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800724c:	9206      	str	r2, [sp, #24]
 800724e:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8007250:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007254:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007258:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800725c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8007260:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8007264:	9207      	str	r2, [sp, #28]
 8007266:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007268:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800726c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007270:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007274:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8007276:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800727a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800727e:	9308      	str	r3, [sp, #32]
 8007280:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8007282:	2301      	movs	r3, #1
 8007284:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8007288:	230c      	movs	r3, #12
 800728a:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 800728e:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8007292:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8007294:	f001 fada 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8007298:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800729c:	a909      	add	r1, sp, #36	@ 0x24
 800729e:	483b      	ldr	r0, [pc, #236]	@ (800738c <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 80072a0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 80072a2:	f001 fad3 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80072a6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80072aa:	a909      	add	r1, sp, #36	@ 0x24
 80072ac:	4838      	ldr	r0, [pc, #224]	@ (8007390 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 80072ae:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 80072b0:	f001 facc 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80072b4:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80072b8:	a909      	add	r1, sp, #36	@ 0x24
 80072ba:	4836      	ldr	r0, [pc, #216]	@ (8007394 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 80072bc:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 80072be:	f001 fac5 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80072c2:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80072c6:	a909      	add	r1, sp, #36	@ 0x24
 80072c8:	4833      	ldr	r0, [pc, #204]	@ (8007398 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 80072ca:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 80072cc:	f001 fabe 	bl	800884c <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80072d0:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80072d4:	a909      	add	r1, sp, #36	@ 0x24
 80072d6:	4831      	ldr	r0, [pc, #196]	@ (800739c <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 80072d8:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 80072da:	f001 fab7 	bl	800884c <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80072de:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 80072e2:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80072e6:	f240 2002 	movw	r0, #514	@ 0x202
 80072ea:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 80072ee:	6334      	str	r4, [r6, #48]	@ 0x30
 80072f0:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80072f2:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80072f6:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80072fa:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80072fc:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80072fe:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8007300:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8007302:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8007306:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 800730a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 800730e:	4b24      	ldr	r3, [pc, #144]	@ (80073a0 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8007310:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8007312:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8007314:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8007318:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 800731c:	f003 f948 	bl	800a5b0 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8007320:	4620      	mov	r0, r4
 8007322:	f003 f8d6 	bl	800a4d2 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8007326:	462a      	mov	r2, r5
 8007328:	210f      	movs	r1, #15
 800732a:	207a      	movs	r0, #122	@ 0x7a
 800732c:	f000 fa02 	bl	8007734 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8007330:	207a      	movs	r0, #122	@ 0x7a
 8007332:	f000 fa31 	bl	8007798 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8007336:	4630      	mov	r0, r6
 8007338:	f7ff ff06 	bl	8007148 <MX_SDRAM_Init>
 800733c:	b9d0      	cbnz	r0, 8007374 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 800733e:	4919      	ldr	r1, [pc, #100]	@ (80073a4 <BSP_SDRAM_Init+0x1fc>)
 8007340:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8007342:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8007346:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 800734a:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 800734c:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8007350:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8007352:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8007356:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800735a:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 800735c:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 800735e:	f7fe fd31 	bl	8005dc4 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8007362:	2800      	cmp	r0, #0
 8007364:	bf18      	it	ne
 8007366:	f06f 0004 	mvnne.w	r0, #4
}
 800736a:	b00f      	add	sp, #60	@ 0x3c
 800736c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 800736e:	f06f 0001 	mvn.w	r0, #1
 8007372:	e7fa      	b.n	800736a <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8007374:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8007378:	e7f7      	b.n	800736a <BSP_SDRAM_Init+0x1c2>
 800737a:	bf00      	nop
 800737c:	58024400 	.word	0x58024400
 8007380:	58020c00 	.word	0x58020c00
 8007384:	2400c86c 	.word	0x2400c86c
 8007388:	2400c8f8 	.word	0x2400c8f8
 800738c:	58021000 	.word	0x58021000
 8007390:	58021400 	.word	0x58021400
 8007394:	58021800 	.word	0x58021800
 8007398:	58021c00 	.word	0x58021c00
 800739c:	58022000 	.word	0x58022000
 80073a0:	52000040 	.word	0x52000040
 80073a4:	2400c8d8 	.word	0x2400c8d8

080073a8 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 80073a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80073ac:	460c      	mov	r4, r1
 80073ae:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80073b0:	4606      	mov	r6, r0
 80073b2:	2800      	cmp	r0, #0
 80073b4:	d15c      	bne.n	8007470 <BSP_TS_Init+0xc8>
 80073b6:	680b      	ldr	r3, [r1, #0]
 80073b8:	1e5a      	subs	r2, r3, #1
 80073ba:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 80073be:	d257      	bcs.n	8007470 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80073c0:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80073c2:	1e51      	subs	r1, r2, #1
 80073c4:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 80073c8:	d252      	bcs.n	8007470 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80073ca:	4293      	cmp	r3, r2
 80073cc:	bf28      	it	cs
 80073ce:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80073d0:	68e2      	ldr	r2, [r4, #12]
 80073d2:	429a      	cmp	r2, r3
 80073d4:	d84c      	bhi.n	8007470 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80073d6:	2370      	movs	r3, #112	@ 0x70
 80073d8:	2254      	movs	r2, #84	@ 0x54
 80073da:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80073de:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80074b4 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 80073e2:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 80073e6:	4b2e      	ldr	r3, [pc, #184]	@ (80074a0 <BSP_TS_Init+0xf8>)
 80073e8:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80073ea:	4b2e      	ldr	r3, [pc, #184]	@ (80074a4 <BSP_TS_Init+0xfc>)
 80073ec:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 80073ee:	4b2e      	ldr	r3, [pc, #184]	@ (80074a8 <BSP_TS_Init+0x100>)
 80073f0:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 80073f2:	4b2e      	ldr	r3, [pc, #184]	@ (80074ac <BSP_TS_Init+0x104>)
 80073f4:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 80073f6:	4b2e      	ldr	r3, [pc, #184]	@ (80074b0 <BSP_TS_Init+0x108>)
 80073f8:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80073fa:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80073fe:	a906      	add	r1, sp, #24
 8007400:	482c      	ldr	r0, [pc, #176]	@ (80074b4 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8007402:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8007406:	f7fe fbe3 	bl	8005bd0 <FT6X06_RegisterBusIO>
 800740a:	b9c0      	cbnz	r0, 800743e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 800740c:	4669      	mov	r1, sp
 800740e:	4829      	ldr	r0, [pc, #164]	@ (80074b4 <BSP_TS_Init+0x10c>)
 8007410:	f7fe fb28 	bl	8005a64 <FT6X06_ReadID>
 8007414:	b998      	cbnz	r0, 800743e <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8007416:	9b00      	ldr	r3, [sp, #0]
 8007418:	2b11      	cmp	r3, #17
 800741a:	d110      	bne.n	800743e <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 800741c:	a903      	add	r1, sp, #12
 800741e:	4825      	ldr	r0, [pc, #148]	@ (80074b4 <BSP_TS_Init+0x10c>)
 8007420:	f7fe fad4 	bl	80059cc <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8007424:	4f24      	ldr	r7, [pc, #144]	@ (80074b8 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8007426:	4b25      	ldr	r3, [pc, #148]	@ (80074bc <BSP_TS_Init+0x114>)
 8007428:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 80074c4 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800742c:	4821      	ldr	r0, [pc, #132]	@ (80074b4 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 800742e:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 8007432:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	4798      	blx	r3
 800743a:	4605      	mov	r5, r0
 800743c:	b1d8      	cbz	r0, 8007476 <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 800743e:	b116      	cbz	r6, 8007446 <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8007440:	f04f 35ff 	mov.w	r5, #4294967295
 8007444:	e010      	b.n	8007468 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 8007446:	2601      	movs	r6, #1
 8007448:	e7d7      	b.n	80073fa <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800744a:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800744c:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 800744e:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007450:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007452:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8007454:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007456:	68e3      	ldr	r3, [r4, #12]
 8007458:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800745a:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800745c:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800745e:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007460:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8007462:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8007464:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8007468:	4628      	mov	r0, r5
 800746a:	b00c      	add	sp, #48	@ 0x30
 800746c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8007470:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8007474:	e7f8      	b.n	8007468 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8007476:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8007478:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800747a:	4e11      	ldr	r6, [pc, #68]	@ (80074c0 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800747c:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800747e:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8007480:	6863      	ldr	r3, [r4, #4]
 8007482:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8007484:	68a3      	ldr	r3, [r4, #8]
 8007486:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8007488:	68e3      	ldr	r3, [r4, #12]
 800748a:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800748c:	f8d8 3000 	ldr.w	r3, [r8]
 8007490:	69db      	ldr	r3, [r3, #28]
 8007492:	4798      	blx	r3
 8007494:	2800      	cmp	r0, #0
 8007496:	dad8      	bge.n	800744a <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8007498:	f06f 0504 	mvn.w	r5, #4
 800749c:	e7e4      	b.n	8007468 <BSP_TS_Init+0xc0>
 800749e:	bf00      	nop
 80074a0:	080069b1 	.word	0x080069b1
 80074a4:	0800691d 	.word	0x0800691d
 80074a8:	08006c8d 	.word	0x08006c8d
 80074ac:	08006c59 	.word	0x08006c59
 80074b0:	08006cc1 	.word	0x08006cc1
 80074b4:	2400c92c 	.word	0x2400c92c
 80074b8:	2400c954 	.word	0x2400c954
 80074bc:	24000068 	.word	0x24000068
 80074c0:	2400c958 	.word	0x2400c958
 80074c4:	2400c980 	.word	0x2400c980

080074c8 <BSP_TS_GetState>:
{
 80074c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80074ca:	460c      	mov	r4, r1
 80074cc:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 80074ce:	2800      	cmp	r0, #0
 80074d0:	d14d      	bne.n	800756e <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80074d2:	4b28      	ldr	r3, [pc, #160]	@ (8007574 <BSP_TS_GetState+0xac>)
 80074d4:	a901      	add	r1, sp, #4
 80074d6:	4a28      	ldr	r2, [pc, #160]	@ (8007578 <BSP_TS_GetState+0xb0>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	6810      	ldr	r0, [r2, #0]
 80074dc:	691b      	ldr	r3, [r3, #16]
 80074de:	4798      	blx	r3
 80074e0:	2800      	cmp	r0, #0
 80074e2:	db41      	blt.n	8007568 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80074e4:	4925      	ldr	r1, [pc, #148]	@ (800757c <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 80074e6:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80074e8:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80074ea:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 80074ec:	2e00      	cmp	r6, #0
 80074ee:	d037      	beq.n	8007560 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80074f0:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80074f2:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80074f6:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 80074fa:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80074fe:	bf1e      	ittt	ne
 8007500:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 8007502:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 8007504:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8007506:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 800750a:	bf1c      	itt	ne
 800750c:	f10e 3cff 	addne.w	ip, lr, #4294967295
 8007510:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 8007514:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8007518:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 800751a:	bf44      	itt	mi
 800751c:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 8007520:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007522:	680f      	ldr	r7, [r1, #0]
 8007524:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007526:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8007528:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800752a:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800752c:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 800752e:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8007532:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8007536:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8007538:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800753a:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800753c:	bf8c      	ite	hi
 800753e:	eba2 0c05 	subhi.w	ip, r2, r5
 8007542:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8007546:	4283      	cmp	r3, r0
 8007548:	bf8c      	ite	hi
 800754a:	1a1e      	subhi	r6, r3, r0
 800754c:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 800754e:	4567      	cmp	r7, ip
 8007550:	d301      	bcc.n	8007556 <BSP_TS_GetState+0x8e>
 8007552:	42b7      	cmp	r7, r6
 8007554:	d205      	bcs.n	8007562 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 8007556:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8007558:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 800755a:	2000      	movs	r0, #0
}
 800755c:	b005      	add	sp, #20
 800755e:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8007560:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8007562:	e9c4 5001 	strd	r5, r0, [r4, #4]
 8007566:	e7f8      	b.n	800755a <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8007568:	f06f 0004 	mvn.w	r0, #4
 800756c:	e7f6      	b.n	800755c <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 800756e:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8007572:	e7f3      	b.n	800755c <BSP_TS_GetState+0x94>
 8007574:	2400c980 	.word	0x2400c980
 8007578:	2400c954 	.word	0x2400c954
 800757c:	2400c958 	.word	0x2400c958

08007580 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8007580:	4b2d      	ldr	r3, [pc, #180]	@ (8007638 <SystemInit+0xb8>)
 8007582:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 8007586:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800758a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 800758e:	691a      	ldr	r2, [r3, #16]
 8007590:	f042 0210 	orr.w	r2, r2, #16
 8007594:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8007596:	4a29      	ldr	r2, [pc, #164]	@ (800763c <SystemInit+0xbc>)
 8007598:	6813      	ldr	r3, [r2, #0]
 800759a:	f003 030f 	and.w	r3, r3, #15
 800759e:	2b06      	cmp	r3, #6
 80075a0:	d805      	bhi.n	80075ae <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80075a2:	6813      	ldr	r3, [r2, #0]
 80075a4:	f023 030f 	bic.w	r3, r3, #15
 80075a8:	f043 0307 	orr.w	r3, r3, #7
 80075ac:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80075ae:	4b24      	ldr	r3, [pc, #144]	@ (8007640 <SystemInit+0xc0>)
 80075b0:	681a      	ldr	r2, [r3, #0]
 80075b2:	f042 0201 	orr.w	r2, r2, #1
 80075b6:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80075b8:	2200      	movs	r2, #0
 80075ba:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80075bc:	4a21      	ldr	r2, [pc, #132]	@ (8007644 <SystemInit+0xc4>)
 80075be:	6819      	ldr	r1, [r3, #0]
 80075c0:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80075c2:	491e      	ldr	r1, [pc, #120]	@ (800763c <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 80075c4:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80075c6:	680a      	ldr	r2, [r1, #0]
 80075c8:	0712      	lsls	r2, r2, #28
 80075ca:	d505      	bpl.n	80075d8 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80075cc:	680a      	ldr	r2, [r1, #0]
 80075ce:	f022 020f 	bic.w	r2, r2, #15
 80075d2:	f042 0207 	orr.w	r2, r2, #7
 80075d6:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80075d8:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80075da:	491b      	ldr	r1, [pc, #108]	@ (8007648 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80075dc:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80075de:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80075e0:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80075e2:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80075e4:	4919      	ldr	r1, [pc, #100]	@ (800764c <SystemInit+0xcc>)
 80075e6:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80075e8:	4919      	ldr	r1, [pc, #100]	@ (8007650 <SystemInit+0xd0>)
 80075ea:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80075ec:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80075ee:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80075f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80075f2:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80075f4:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80075f6:	6819      	ldr	r1, [r3, #0]
 80075f8:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80075fc:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80075fe:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8007600:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8007604:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 8007608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800760c:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8007610:	4b10      	ldr	r3, [pc, #64]	@ (8007654 <SystemInit+0xd4>)
 8007612:	681b      	ldr	r3, [r3, #0]
 8007614:	0c1b      	lsrs	r3, r3, #16
 8007616:	041b      	lsls	r3, r3, #16
 8007618:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800761c:	d203      	bcs.n	8007626 <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 800761e:	4b0e      	ldr	r3, [pc, #56]	@ (8007658 <SystemInit+0xd8>)
 8007620:	2201      	movs	r2, #1
 8007622:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8007626:	4b0d      	ldr	r3, [pc, #52]	@ (800765c <SystemInit+0xdc>)
 8007628:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800762c:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800762e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8007632:	4b01      	ldr	r3, [pc, #4]	@ (8007638 <SystemInit+0xb8>)
 8007634:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 8007636:	4770      	bx	lr
 8007638:	e000ed00 	.word	0xe000ed00
 800763c:	52002000 	.word	0x52002000
 8007640:	58024400 	.word	0x58024400
 8007644:	eaf6ed7f 	.word	0xeaf6ed7f
 8007648:	02020200 	.word	0x02020200
 800764c:	01ff0000 	.word	0x01ff0000
 8007650:	01010280 	.word	0x01010280
 8007654:	5c001000 	.word	0x5c001000
 8007658:	51008000 	.word	0x51008000
 800765c:	52004000 	.word	0x52004000

08007660 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007660:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007662:	2003      	movs	r0, #3
 8007664:	f000 f854 	bl	8007710 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007668:	f003 fef8 	bl	800b45c <HAL_RCC_GetSysClockFreq>
 800766c:	490f      	ldr	r1, [pc, #60]	@ (80076ac <HAL_Init+0x4c>)
 800766e:	4a10      	ldr	r2, [pc, #64]	@ (80076b0 <HAL_Init+0x50>)
 8007670:	698b      	ldr	r3, [r1, #24]
 8007672:	f3c3 2303 	ubfx	r3, r3, #8, #4
 8007676:	5cd3      	ldrb	r3, [r2, r3]
 8007678:	f003 031f 	and.w	r3, r3, #31
 800767c:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800767e:	698b      	ldr	r3, [r1, #24]
 8007680:	f003 030f 	and.w	r3, r3, #15
 8007684:	5cd3      	ldrb	r3, [r2, r3]
 8007686:	4a0b      	ldr	r2, [pc, #44]	@ (80076b4 <HAL_Init+0x54>)
 8007688:	f003 031f 	and.w	r3, r3, #31
 800768c:	fa20 f303 	lsr.w	r3, r0, r3
 8007690:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007692:	4b09      	ldr	r3, [pc, #36]	@ (80076b8 <HAL_Init+0x58>)
 8007694:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007696:	2000      	movs	r0, #0
 8007698:	f7fa f990 	bl	80019bc <HAL_InitTick>
 800769c:	4604      	mov	r4, r0
 800769e:	b918      	cbnz	r0, 80076a8 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80076a0:	f7f9 fe2a 	bl	80012f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 80076a4:	4620      	mov	r0, r4
 80076a6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80076a8:	2401      	movs	r4, #1
 80076aa:	e7fb      	b.n	80076a4 <HAL_Init+0x44>
 80076ac:	58024400 	.word	0x58024400
 80076b0:	0802a8c8 	.word	0x0802a8c8
 80076b4:	24000098 	.word	0x24000098
 80076b8:	2400009c 	.word	0x2400009c

080076bc <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 80076bc:	4a03      	ldr	r2, [pc, #12]	@ (80076cc <HAL_IncTick+0x10>)
 80076be:	4b04      	ldr	r3, [pc, #16]	@ (80076d0 <HAL_IncTick+0x14>)
 80076c0:	6811      	ldr	r1, [r2, #0]
 80076c2:	781b      	ldrb	r3, [r3, #0]
 80076c4:	440b      	add	r3, r1
 80076c6:	6013      	str	r3, [r2, #0]
}
 80076c8:	4770      	bx	lr
 80076ca:	bf00      	nop
 80076cc:	2400c984 	.word	0x2400c984
 80076d0:	240000a0 	.word	0x240000a0

080076d4 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80076d4:	4b01      	ldr	r3, [pc, #4]	@ (80076dc <HAL_GetTick+0x8>)
 80076d6:	6818      	ldr	r0, [r3, #0]
}
 80076d8:	4770      	bx	lr
 80076da:	bf00      	nop
 80076dc:	2400c984 	.word	0x2400c984

080076e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80076e4:	f7ff fff6 	bl	80076d4 <HAL_GetTick>
 80076e8:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80076ea:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80076ec:	bf1e      	ittt	ne
 80076ee:	4b04      	ldrne	r3, [pc, #16]	@ (8007700 <HAL_Delay+0x20>)
 80076f0:	781b      	ldrbne	r3, [r3, #0]
 80076f2:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80076f4:	f7ff ffee 	bl	80076d4 <HAL_GetTick>
 80076f8:	1b43      	subs	r3, r0, r5
 80076fa:	42a3      	cmp	r3, r4
 80076fc:	d3fa      	bcc.n	80076f4 <HAL_Delay+0x14>
  {
  }
}
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	240000a0 	.word	0x240000a0

08007704 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 8007704:	4b01      	ldr	r3, [pc, #4]	@ (800770c <HAL_GetREVID+0x8>)
 8007706:	6818      	ldr	r0, [r3, #0]
}
 8007708:	0c00      	lsrs	r0, r0, #16
 800770a:	4770      	bx	lr
 800770c:	5c001000 	.word	0x5c001000

08007710 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007710:	4907      	ldr	r1, [pc, #28]	@ (8007730 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007712:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007714:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007716:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800771a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800771e:	0412      	lsls	r2, r2, #16
 8007720:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007722:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007724:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8007728:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 800772c:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 800772e:	4770      	bx	lr
 8007730:	e000ed00 	.word	0xe000ed00

08007734 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007734:	4b16      	ldr	r3, [pc, #88]	@ (8007790 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007736:	b530      	push	{r4, r5, lr}
 8007738:	68dc      	ldr	r4, [r3, #12]
 800773a:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800773e:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007742:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007744:	2b04      	cmp	r3, #4
 8007746:	bf28      	it	cs
 8007748:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800774a:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800774c:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007750:	bf8c      	ite	hi
 8007752:	3c03      	subhi	r4, #3
 8007754:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007756:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 800775a:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800775c:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007760:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007764:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007768:	fa03 f304 	lsl.w	r3, r3, r4
 800776c:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007770:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8007774:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 8007776:	db06      	blt.n	8007786 <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007778:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 800777c:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8007780:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8007784:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007786:	f000 000f 	and.w	r0, r0, #15
 800778a:	4a02      	ldr	r2, [pc, #8]	@ (8007794 <HAL_NVIC_SetPriority+0x60>)
 800778c:	5413      	strb	r3, [r2, r0]
 800778e:	e7f9      	b.n	8007784 <HAL_NVIC_SetPriority+0x50>
 8007790:	e000ed00 	.word	0xe000ed00
 8007794:	e000ed14 	.word	0xe000ed14

08007798 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8007798:	2800      	cmp	r0, #0
 800779a:	db07      	blt.n	80077ac <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800779c:	2301      	movs	r3, #1
 800779e:	0941      	lsrs	r1, r0, #5
 80077a0:	f000 001f 	and.w	r0, r0, #31
 80077a4:	4a02      	ldr	r2, [pc, #8]	@ (80077b0 <HAL_NVIC_EnableIRQ+0x18>)
 80077a6:	4083      	lsls	r3, r0
 80077a8:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 80077ac:	4770      	bx	lr
 80077ae:	bf00      	nop
 80077b0:	e000e100 	.word	0xe000e100

080077b4 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 80077b4:	2800      	cmp	r0, #0
 80077b6:	db0c      	blt.n	80077d2 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80077b8:	0943      	lsrs	r3, r0, #5
 80077ba:	2201      	movs	r2, #1
 80077bc:	f000 001f 	and.w	r0, r0, #31
 80077c0:	4904      	ldr	r1, [pc, #16]	@ (80077d4 <HAL_NVIC_DisableIRQ+0x20>)
 80077c2:	3320      	adds	r3, #32
 80077c4:	4082      	lsls	r2, r0
 80077c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80077ca:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80077ce:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80077d2:	4770      	bx	lr
 80077d4:	e000e100 	.word	0xe000e100

080077d8 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80077d8:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80077dc:	4b04      	ldr	r3, [pc, #16]	@ (80077f0 <HAL_MPU_Disable+0x18>)
 80077de:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80077e0:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80077e4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80077e6:	2200      	movs	r2, #0
 80077e8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	e000ed00 	.word	0xe000ed00

080077f4 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80077f4:	4b06      	ldr	r3, [pc, #24]	@ (8007810 <HAL_MPU_Enable+0x1c>)
 80077f6:	f040 0001 	orr.w	r0, r0, #1
 80077fa:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80077fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007800:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8007804:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 8007806:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 800780a:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800780e:	4770      	bx	lr
 8007810:	e000ed00 	.word	0xe000ed00

08007814 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8007814:	7843      	ldrb	r3, [r0, #1]
 8007816:	4a14      	ldr	r2, [pc, #80]	@ (8007868 <HAL_MPU_ConfigRegion+0x54>)
 8007818:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 800781c:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 8007820:	f023 0301 	bic.w	r3, r3, #1
 8007824:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8007828:	6843      	ldr	r3, [r0, #4]
 800782a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800782e:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007830:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8007832:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007834:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8007838:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800783a:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 800783c:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800783e:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8007842:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007844:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8007848:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800784a:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800784e:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007850:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8007854:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8007856:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 800785a:	7a01      	ldrb	r1, [r0, #8]
 800785c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8007860:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8007864:	4770      	bx	lr
 8007866:	bf00      	nop
 8007868:	e000ed00 	.word	0xe000ed00

0800786c <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 800786c:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 800786e:	4604      	mov	r4, r0
 8007870:	b908      	cbnz	r0, 8007876 <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8007872:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8007874:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 8007876:	7f43      	ldrb	r3, [r0, #29]
 8007878:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800787c:	b913      	cbnz	r3, 8007884 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 800787e:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8007880:	f7f9 fd52 	bl	8001328 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8007884:	2302      	movs	r3, #2
 8007886:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8007888:	7923      	ldrb	r3, [r4, #4]
 800788a:	b9e3      	cbnz	r3, 80078c6 <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 800788c:	6823      	ldr	r3, [r4, #0]
 800788e:	4a13      	ldr	r2, [pc, #76]	@ (80078dc <HAL_CRC_Init+0x70>)
 8007890:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8007892:	689a      	ldr	r2, [r3, #8]
 8007894:	f022 0218 	bic.w	r2, r2, #24
 8007898:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800789a:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 800789c:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800789e:	b9d2      	cbnz	r2, 80078d6 <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 80078a0:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80078a4:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 80078a6:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80078a8:	689a      	ldr	r2, [r3, #8]
 80078aa:	6961      	ldr	r1, [r4, #20]
 80078ac:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80078b0:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80078b2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 80078b4:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 80078b6:	689a      	ldr	r2, [r3, #8]
 80078b8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80078bc:	430a      	orrs	r2, r1
 80078be:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 80078c0:	2301      	movs	r3, #1
 80078c2:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 80078c4:	e7d6      	b.n	8007874 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80078c6:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80078ca:	4620      	mov	r0, r4
 80078cc:	f000 f808 	bl	80078e0 <HAL_CRCEx_Polynomial_Set>
 80078d0:	2800      	cmp	r0, #0
 80078d2:	d0e2      	beq.n	800789a <HAL_CRC_Init+0x2e>
 80078d4:	e7cd      	b.n	8007872 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80078d6:	6922      	ldr	r2, [r4, #16]
 80078d8:	e7e4      	b.n	80078a4 <HAL_CRC_Init+0x38>
 80078da:	bf00      	nop
 80078dc:	04c11db7 	.word	0x04c11db7

080078e0 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80078e0:	07cb      	lsls	r3, r1, #31
{
 80078e2:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80078e4:	d50d      	bpl.n	8007902 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80078e6:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80078e8:	3b01      	subs	r3, #1
 80078ea:	d31d      	bcc.n	8007928 <HAL_CRCEx_Polynomial_Set+0x48>
 80078ec:	fa21 f403 	lsr.w	r4, r1, r3
 80078f0:	07e4      	lsls	r4, r4, #31
 80078f2:	d5f9      	bpl.n	80078e8 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80078f4:	2a10      	cmp	r2, #16
 80078f6:	d013      	beq.n	8007920 <HAL_CRCEx_Polynomial_Set+0x40>
 80078f8:	2a10      	cmp	r2, #16
 80078fa:	d804      	bhi.n	8007906 <HAL_CRCEx_Polynomial_Set+0x26>
 80078fc:	b13a      	cbz	r2, 800790e <HAL_CRCEx_Polynomial_Set+0x2e>
 80078fe:	2a08      	cmp	r2, #8
 8007900:	d010      	beq.n	8007924 <HAL_CRCEx_Polynomial_Set+0x44>
 8007902:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 8007904:	e00b      	b.n	800791e <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 8007906:	2a18      	cmp	r2, #24
 8007908:	d1fb      	bne.n	8007902 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 800790a:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 800790c:	d8f9      	bhi.n	8007902 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 800790e:	6800      	ldr	r0, [r0, #0]
 8007910:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8007912:	6883      	ldr	r3, [r0, #8]
 8007914:	f023 0318 	bic.w	r3, r3, #24
 8007918:	4313      	orrs	r3, r2
 800791a:	6083      	str	r3, [r0, #8]
 800791c:	2000      	movs	r0, #0
}
 800791e:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 8007920:	2b07      	cmp	r3, #7
 8007922:	e7f3      	b.n	800790c <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 8007924:	2b0f      	cmp	r3, #15
 8007926:	e7f1      	b.n	800790c <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8007928:	2a10      	cmp	r2, #16
 800792a:	d1e5      	bne.n	80078f8 <HAL_CRCEx_Polynomial_Set+0x18>
 800792c:	e7e9      	b.n	8007902 <HAL_CRCEx_Polynomial_Set+0x22>
	...

08007930 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007932:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8007934:	f7ff fece 	bl	80076d4 <HAL_GetTick>
 8007938:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800793a:	b145      	cbz	r5, 800794e <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800793c:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8007940:	2b02      	cmp	r3, #2
 8007942:	d006      	beq.n	8007952 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007944:	2380      	movs	r3, #128	@ 0x80
 8007946:	656b      	str	r3, [r5, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007948:	2300      	movs	r3, #0
 800794a:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 800794e:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8007950:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007952:	682c      	ldr	r4, [r5, #0]
 8007954:	4ea9      	ldr	r6, [pc, #676]	@ (8007bfc <HAL_DMA_Abort+0x2cc>)
 8007956:	42b4      	cmp	r4, r6
 8007958:	d04a      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 800795a:	4ba9      	ldr	r3, [pc, #676]	@ (8007c00 <HAL_DMA_Abort+0x2d0>)
 800795c:	429c      	cmp	r4, r3
 800795e:	d047      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007960:	3318      	adds	r3, #24
 8007962:	429c      	cmp	r4, r3
 8007964:	d044      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007966:	3318      	adds	r3, #24
 8007968:	429c      	cmp	r4, r3
 800796a:	d041      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 800796c:	3318      	adds	r3, #24
 800796e:	429c      	cmp	r4, r3
 8007970:	d03e      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007972:	3318      	adds	r3, #24
 8007974:	429c      	cmp	r4, r3
 8007976:	d03b      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007978:	3318      	adds	r3, #24
 800797a:	429c      	cmp	r4, r3
 800797c:	d038      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 800797e:	3318      	adds	r3, #24
 8007980:	429c      	cmp	r4, r3
 8007982:	d035      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007984:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007988:	429c      	cmp	r4, r3
 800798a:	d031      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 800798c:	3318      	adds	r3, #24
 800798e:	429c      	cmp	r4, r3
 8007990:	d02e      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007992:	3318      	adds	r3, #24
 8007994:	429c      	cmp	r4, r3
 8007996:	d02b      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 8007998:	3318      	adds	r3, #24
 800799a:	429c      	cmp	r4, r3
 800799c:	d028      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 800799e:	3318      	adds	r3, #24
 80079a0:	429c      	cmp	r4, r3
 80079a2:	d025      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 80079a4:	3318      	adds	r3, #24
 80079a6:	429c      	cmp	r4, r3
 80079a8:	d022      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 80079aa:	3318      	adds	r3, #24
 80079ac:	429c      	cmp	r4, r3
 80079ae:	d01f      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
 80079b0:	3318      	adds	r3, #24
 80079b2:	429c      	cmp	r4, r3
 80079b4:	d01c      	beq.n	80079f0 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80079b6:	6823      	ldr	r3, [r4, #0]
 80079b8:	f023 030e 	bic.w	r3, r3, #14
 80079bc:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079be:	4b91      	ldr	r3, [pc, #580]	@ (8007c04 <HAL_DMA_Abort+0x2d4>)
 80079c0:	429c      	cmp	r4, r3
 80079c2:	d01f      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079c4:	3314      	adds	r3, #20
 80079c6:	429c      	cmp	r4, r3
 80079c8:	d01c      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079ca:	3314      	adds	r3, #20
 80079cc:	429c      	cmp	r4, r3
 80079ce:	d019      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079d0:	3314      	adds	r3, #20
 80079d2:	429c      	cmp	r4, r3
 80079d4:	d016      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079d6:	3314      	adds	r3, #20
 80079d8:	429c      	cmp	r4, r3
 80079da:	d013      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079dc:	3314      	adds	r3, #20
 80079de:	429c      	cmp	r4, r3
 80079e0:	d010      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079e2:	3314      	adds	r3, #20
 80079e4:	429c      	cmp	r4, r3
 80079e6:	d00d      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 80079e8:	3314      	adds	r3, #20
 80079ea:	429c      	cmp	r4, r3
 80079ec:	d112      	bne.n	8007a14 <HAL_DMA_Abort+0xe4>
 80079ee:	e009      	b.n	8007a04 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80079f0:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80079f2:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80079f4:	f023 031e 	bic.w	r3, r3, #30
 80079f8:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80079fa:	6963      	ldr	r3, [r4, #20]
 80079fc:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007a00:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007a02:	d176      	bne.n	8007af2 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a04:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 8007a06:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007a08:	6813      	ldr	r3, [r2, #0]
 8007a0a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007a0e:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 8007a10:	f040 80ab 	bne.w	8007b6a <HAL_DMA_Abort+0x23a>
 8007a14:	6823      	ldr	r3, [r4, #0]
 8007a16:	f023 0301 	bic.w	r3, r3, #1
 8007a1a:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8007a1c:	6823      	ldr	r3, [r4, #0]
 8007a1e:	07db      	lsls	r3, r3, #31
 8007a20:	f100 80cd 	bmi.w	8007bbe <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a24:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a26:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a28:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a2a:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007a2c:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007a30:	f000 80d1 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a34:	4972      	ldr	r1, [pc, #456]	@ (8007c00 <HAL_DMA_Abort+0x2d0>)
 8007a36:	428b      	cmp	r3, r1
 8007a38:	f000 80cd 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a3c:	3118      	adds	r1, #24
 8007a3e:	428b      	cmp	r3, r1
 8007a40:	f000 80c9 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a44:	3118      	adds	r1, #24
 8007a46:	428b      	cmp	r3, r1
 8007a48:	f000 80c5 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a4c:	3118      	adds	r1, #24
 8007a4e:	428b      	cmp	r3, r1
 8007a50:	f000 80c1 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a54:	3118      	adds	r1, #24
 8007a56:	428b      	cmp	r3, r1
 8007a58:	f000 80bd 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a5c:	3118      	adds	r1, #24
 8007a5e:	428b      	cmp	r3, r1
 8007a60:	f000 80b9 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a64:	3118      	adds	r1, #24
 8007a66:	428b      	cmp	r3, r1
 8007a68:	f000 80b5 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a6c:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8007a70:	428b      	cmp	r3, r1
 8007a72:	f000 80b0 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a76:	3118      	adds	r1, #24
 8007a78:	428b      	cmp	r3, r1
 8007a7a:	f000 80ac 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a7e:	3118      	adds	r1, #24
 8007a80:	428b      	cmp	r3, r1
 8007a82:	f000 80a8 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a86:	3118      	adds	r1, #24
 8007a88:	428b      	cmp	r3, r1
 8007a8a:	f000 80a4 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a8e:	3118      	adds	r1, #24
 8007a90:	428b      	cmp	r3, r1
 8007a92:	f000 80a0 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a96:	3118      	adds	r1, #24
 8007a98:	428b      	cmp	r3, r1
 8007a9a:	f000 809c 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007a9e:	3118      	adds	r1, #24
 8007aa0:	428b      	cmp	r3, r1
 8007aa2:	f000 8098 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
 8007aa6:	3118      	adds	r1, #24
 8007aa8:	428b      	cmp	r3, r1
 8007aaa:	f000 8094 	beq.w	8007bd6 <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007aae:	2101      	movs	r1, #1
 8007ab0:	fa01 f202 	lsl.w	r2, r1, r2
 8007ab4:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007ab6:	4a53      	ldr	r2, [pc, #332]	@ (8007c04 <HAL_DMA_Abort+0x2d4>)
 8007ab8:	4293      	cmp	r3, r2
 8007aba:	f000 8092 	beq.w	8007be2 <HAL_DMA_Abort+0x2b2>
 8007abe:	3214      	adds	r2, #20
 8007ac0:	4293      	cmp	r3, r2
 8007ac2:	f000 808e 	beq.w	8007be2 <HAL_DMA_Abort+0x2b2>
 8007ac6:	3214      	adds	r2, #20
 8007ac8:	4293      	cmp	r3, r2
 8007aca:	f000 808a 	beq.w	8007be2 <HAL_DMA_Abort+0x2b2>
 8007ace:	3214      	adds	r2, #20
 8007ad0:	4293      	cmp	r3, r2
 8007ad2:	f000 8086 	beq.w	8007be2 <HAL_DMA_Abort+0x2b2>
 8007ad6:	3214      	adds	r2, #20
 8007ad8:	4293      	cmp	r3, r2
 8007ada:	f000 8082 	beq.w	8007be2 <HAL_DMA_Abort+0x2b2>
 8007ade:	3214      	adds	r2, #20
 8007ae0:	4293      	cmp	r3, r2
 8007ae2:	d07e      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007ae4:	3214      	adds	r2, #20
 8007ae6:	4293      	cmp	r3, r2
 8007ae8:	d07b      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007aea:	3214      	adds	r2, #20
 8007aec:	4293      	cmp	r3, r2
 8007aee:	d17e      	bne.n	8007bee <HAL_DMA_Abort+0x2be>
 8007af0:	e077      	b.n	8007be2 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007af2:	4b43      	ldr	r3, [pc, #268]	@ (8007c00 <HAL_DMA_Abort+0x2d0>)
 8007af4:	429c      	cmp	r4, r3
 8007af6:	d085      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 8007af8:	3318      	adds	r3, #24
 8007afa:	429c      	cmp	r4, r3
 8007afc:	d082      	beq.n	8007a04 <HAL_DMA_Abort+0xd4>
 8007afe:	3318      	adds	r3, #24
 8007b00:	429c      	cmp	r4, r3
 8007b02:	f43f af7f 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b06:	3318      	adds	r3, #24
 8007b08:	429c      	cmp	r4, r3
 8007b0a:	f43f af7b 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b0e:	3318      	adds	r3, #24
 8007b10:	429c      	cmp	r4, r3
 8007b12:	f43f af77 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b16:	3318      	adds	r3, #24
 8007b18:	429c      	cmp	r4, r3
 8007b1a:	f43f af73 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b1e:	3318      	adds	r3, #24
 8007b20:	429c      	cmp	r4, r3
 8007b22:	f43f af6f 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b26:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007b2a:	429c      	cmp	r4, r3
 8007b2c:	f43f af6a 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b30:	3318      	adds	r3, #24
 8007b32:	429c      	cmp	r4, r3
 8007b34:	f43f af66 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b38:	3318      	adds	r3, #24
 8007b3a:	429c      	cmp	r4, r3
 8007b3c:	f43f af62 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b40:	3318      	adds	r3, #24
 8007b42:	429c      	cmp	r4, r3
 8007b44:	f43f af5e 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b48:	3318      	adds	r3, #24
 8007b4a:	429c      	cmp	r4, r3
 8007b4c:	f43f af5a 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b50:	3318      	adds	r3, #24
 8007b52:	429c      	cmp	r4, r3
 8007b54:	f43f af56 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b58:	3318      	adds	r3, #24
 8007b5a:	429c      	cmp	r4, r3
 8007b5c:	f43f af52 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b60:	3318      	adds	r3, #24
 8007b62:	429c      	cmp	r4, r3
 8007b64:	f43f af4e 	beq.w	8007a04 <HAL_DMA_Abort+0xd4>
 8007b68:	e729      	b.n	80079be <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8007b6a:	4b25      	ldr	r3, [pc, #148]	@ (8007c00 <HAL_DMA_Abort+0x2d0>)
 8007b6c:	429c      	cmp	r4, r3
 8007b6e:	f43f af51 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b72:	3318      	adds	r3, #24
 8007b74:	429c      	cmp	r4, r3
 8007b76:	f43f af4d 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b7a:	3318      	adds	r3, #24
 8007b7c:	429c      	cmp	r4, r3
 8007b7e:	f43f af49 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b82:	3318      	adds	r3, #24
 8007b84:	429c      	cmp	r4, r3
 8007b86:	f43f af45 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b8a:	3318      	adds	r3, #24
 8007b8c:	429c      	cmp	r4, r3
 8007b8e:	f43f af41 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b92:	3318      	adds	r3, #24
 8007b94:	429c      	cmp	r4, r3
 8007b96:	f43f af3d 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007b9a:	3318      	adds	r3, #24
 8007b9c:	429c      	cmp	r4, r3
 8007b9e:	f43f af39 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007ba2:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8007ba6:	429c      	cmp	r4, r3
 8007ba8:	f43f af34 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007bac:	3318      	adds	r3, #24
 8007bae:	429c      	cmp	r4, r3
 8007bb0:	f43f af30 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007bb4:	3318      	adds	r3, #24
 8007bb6:	429c      	cmp	r4, r3
 8007bb8:	f43f af2c 	beq.w	8007a14 <HAL_DMA_Abort+0xe4>
 8007bbc:	e72a      	b.n	8007a14 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007bbe:	f7ff fd89 	bl	80076d4 <HAL_GetTick>
 8007bc2:	1bc0      	subs	r0, r0, r7
 8007bc4:	2805      	cmp	r0, #5
 8007bc6:	f67f af29 	bls.w	8007a1c <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007bca:	2320      	movs	r3, #32
 8007bcc:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8007bce:	2303      	movs	r3, #3
 8007bd0:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8007bd4:	e6b8      	b.n	8007948 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bd6:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007bd8:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8007bda:	fa01 f202 	lsl.w	r2, r1, r2
 8007bde:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007be0:	d112      	bne.n	8007c08 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007be2:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8007be6:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8007be8:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8007bea:	2b00      	cmp	r3, #0
 8007bec:	d13b      	bne.n	8007c66 <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8007bee:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8007bf0:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8007bf2:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8007bf6:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8007bfa:	e6a9      	b.n	8007950 <HAL_DMA_Abort+0x20>
 8007bfc:	40020010 	.word	0x40020010
 8007c00:	40020028 	.word	0x40020028
 8007c04:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007c08:	4a1b      	ldr	r2, [pc, #108]	@ (8007c78 <HAL_DMA_Abort+0x348>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d0e9      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c0e:	3218      	adds	r2, #24
 8007c10:	4293      	cmp	r3, r2
 8007c12:	d0e6      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c14:	3218      	adds	r2, #24
 8007c16:	4293      	cmp	r3, r2
 8007c18:	d0e3      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c1a:	3218      	adds	r2, #24
 8007c1c:	4293      	cmp	r3, r2
 8007c1e:	d0e0      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c20:	3218      	adds	r2, #24
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d0dd      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c26:	3218      	adds	r2, #24
 8007c28:	4293      	cmp	r3, r2
 8007c2a:	d0da      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c2c:	3218      	adds	r2, #24
 8007c2e:	4293      	cmp	r3, r2
 8007c30:	d0d7      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c32:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007c36:	4293      	cmp	r3, r2
 8007c38:	d0d3      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c3a:	3218      	adds	r2, #24
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d0d0      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c40:	3218      	adds	r2, #24
 8007c42:	4293      	cmp	r3, r2
 8007c44:	d0cd      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c46:	3218      	adds	r2, #24
 8007c48:	4293      	cmp	r3, r2
 8007c4a:	d0ca      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c4c:	3218      	adds	r2, #24
 8007c4e:	4293      	cmp	r3, r2
 8007c50:	d0c7      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c52:	3218      	adds	r2, #24
 8007c54:	4293      	cmp	r3, r2
 8007c56:	d0c4      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c58:	3218      	adds	r2, #24
 8007c5a:	4293      	cmp	r3, r2
 8007c5c:	d0c1      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c5e:	3218      	adds	r2, #24
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d0be      	beq.n	8007be2 <HAL_DMA_Abort+0x2b2>
 8007c64:	e727      	b.n	8007ab6 <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007c66:	681a      	ldr	r2, [r3, #0]
 8007c68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007c6c:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007c6e:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8007c72:	605a      	str	r2, [r3, #4]
 8007c74:	e7bb      	b.n	8007bee <HAL_DMA_Abort+0x2be>
 8007c76:	bf00      	nop
 8007c78:	40020028 	.word	0x40020028

08007c7c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007c7c:	b508      	push	{r3, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8007c7e:	b128      	cbz	r0, 8007c8c <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007c80:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8007c84:	2b02      	cmp	r3, #2
 8007c86:	d003      	beq.n	8007c90 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007c88:	2380      	movs	r3, #128	@ 0x80
 8007c8a:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8007c8c:	2001      	movs	r0, #1
 8007c8e:	e05d      	b.n	8007d4c <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8007c90:	6803      	ldr	r3, [r0, #0]
 8007c92:	4a3f      	ldr	r2, [pc, #252]	@ (8007d90 <HAL_DMA_Abort_IT+0x114>)
 8007c94:	4293      	cmp	r3, r2
 8007c96:	d051      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007c98:	3218      	adds	r2, #24
 8007c9a:	4293      	cmp	r3, r2
 8007c9c:	d04e      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007c9e:	3218      	adds	r2, #24
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d04b      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007ca4:	3218      	adds	r2, #24
 8007ca6:	4293      	cmp	r3, r2
 8007ca8:	d048      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007caa:	3218      	adds	r2, #24
 8007cac:	4293      	cmp	r3, r2
 8007cae:	d045      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cb0:	3218      	adds	r2, #24
 8007cb2:	4293      	cmp	r3, r2
 8007cb4:	d042      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cb6:	3218      	adds	r2, #24
 8007cb8:	4293      	cmp	r3, r2
 8007cba:	d03f      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cbc:	3218      	adds	r2, #24
 8007cbe:	4293      	cmp	r3, r2
 8007cc0:	d03c      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cc2:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8007cc6:	4293      	cmp	r3, r2
 8007cc8:	d038      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cca:	3218      	adds	r2, #24
 8007ccc:	4293      	cmp	r3, r2
 8007cce:	d035      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cd0:	3218      	adds	r2, #24
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d032      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cd6:	3218      	adds	r2, #24
 8007cd8:	4293      	cmp	r3, r2
 8007cda:	d02f      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cdc:	3218      	adds	r2, #24
 8007cde:	4293      	cmp	r3, r2
 8007ce0:	d02c      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007ce2:	3218      	adds	r2, #24
 8007ce4:	4293      	cmp	r3, r2
 8007ce6:	d029      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007ce8:	3218      	adds	r2, #24
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d026      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
 8007cee:	3218      	adds	r2, #24
 8007cf0:	4293      	cmp	r3, r2
 8007cf2:	d023      	beq.n	8007d3c <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8007cf4:	681a      	ldr	r2, [r3, #0]
 8007cf6:	f022 020e 	bic.w	r2, r2, #14
 8007cfa:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8007cfc:	681a      	ldr	r2, [r3, #0]
 8007cfe:	f022 0201 	bic.w	r2, r2, #1
 8007d02:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d04:	4a23      	ldr	r2, [pc, #140]	@ (8007d94 <HAL_DMA_Abort_IT+0x118>)
 8007d06:	4293      	cmp	r3, r2
 8007d08:	d121      	bne.n	8007d4e <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8007d0a:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8007d0c:	6813      	ldr	r3, [r2, #0]
 8007d0e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007d12:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8007d14:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8007d18:	f003 021f 	and.w	r2, r3, #31
 8007d1c:	2301      	movs	r3, #1
 8007d1e:	4093      	lsls	r3, r2
 8007d20:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8007d22:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 8007d26:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8007d28:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8007d2a:	b32b      	cbz	r3, 8007d78 <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8007d2c:	681a      	ldr	r2, [r3, #0]
 8007d2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007d32:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8007d34:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8007d38:	605a      	str	r2, [r3, #4]
 8007d3a:	e01d      	b.n	8007d78 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8007d3c:	2204      	movs	r2, #4
 8007d3e:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	f022 0201 	bic.w	r2, r2, #1
 8007d48:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8007d4a:	2000      	movs	r0, #0
}
 8007d4c:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8007d4e:	4a12      	ldr	r2, [pc, #72]	@ (8007d98 <HAL_DMA_Abort_IT+0x11c>)
 8007d50:	4293      	cmp	r3, r2
 8007d52:	d0da      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d54:	3214      	adds	r2, #20
 8007d56:	4293      	cmp	r3, r2
 8007d58:	d0d7      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d5a:	3214      	adds	r2, #20
 8007d5c:	4293      	cmp	r3, r2
 8007d5e:	d0d4      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d60:	3214      	adds	r2, #20
 8007d62:	4293      	cmp	r3, r2
 8007d64:	d0d1      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d66:	3214      	adds	r2, #20
 8007d68:	4293      	cmp	r3, r2
 8007d6a:	d0ce      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d6c:	3214      	adds	r2, #20
 8007d6e:	4293      	cmp	r3, r2
 8007d70:	d0cb      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
 8007d72:	3214      	adds	r2, #20
 8007d74:	4293      	cmp	r3, r2
 8007d76:	d0c8      	beq.n	8007d0a <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8007d78:	2301      	movs	r3, #1
 8007d7a:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8007d7e:	2300      	movs	r3, #0
 8007d80:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8007d84:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d0df      	beq.n	8007d4a <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8007d8a:	4798      	blx	r3
 8007d8c:	e7dd      	b.n	8007d4a <HAL_DMA_Abort_IT+0xce>
 8007d8e:	bf00      	nop
 8007d90:	40020010 	.word	0x40020010
 8007d94:	58025408 	.word	0x58025408
 8007d98:	5802541c 	.word	0x5802541c

08007d9c <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8007d9c:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8007d9e:	4604      	mov	r4, r0
 8007da0:	2800      	cmp	r0, #0
 8007da2:	d036      	beq.n	8007e12 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8007da4:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8007da8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007dac:	b91b      	cbnz	r3, 8007db6 <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8007dae:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8007db2:	f7f9 fad1 	bl	8001358 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007db6:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007db8:	69e0      	ldr	r0, [r4, #28]
 8007dba:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8007dbc:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007dc0:	6823      	ldr	r3, [r4, #0]
 8007dc2:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007dc4:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8007dc6:	6819      	ldr	r1, [r3, #0]
 8007dc8:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8007dcc:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8007dd0:	430a      	orrs	r2, r1
 8007dd2:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007dd4:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007dd6:	68a2      	ldr	r2, [r4, #8]
 8007dd8:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8007ddc:	4302      	orrs	r2, r0
 8007dde:	f021 0101 	bic.w	r1, r1, #1
 8007de2:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007de4:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8007de6:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8007de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007dea:	0c12      	lsrs	r2, r2, #16
 8007dec:	0412      	lsls	r2, r2, #16
 8007dee:	430a      	orrs	r2, r1
 8007df0:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007df2:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8007df4:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8007df8:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8007dfc:	0552      	lsls	r2, r2, #21
 8007dfe:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007e02:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8007e04:	430a      	orrs	r2, r1
 8007e06:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007e08:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8007e0a:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8007e0c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8007e10:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007e12:	2001      	movs	r0, #1
 8007e14:	e7fc      	b.n	8007e10 <HAL_DMA2D_Init+0x74>

08007e16 <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8007e16:	4770      	bx	lr

08007e18 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8007e18:	4770      	bx	lr

08007e1a <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007e1a:	6803      	ldr	r3, [r0, #0]
{
 8007e1c:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8007e1e:	685e      	ldr	r6, [r3, #4]
{
 8007e20:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8007e22:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8007e24:	07f2      	lsls	r2, r6, #31
 8007e26:	d514      	bpl.n	8007e52 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8007e28:	05e9      	lsls	r1, r5, #23
 8007e2a:	d512      	bpl.n	8007e52 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8007e2c:	681a      	ldr	r2, [r3, #0]
 8007e2e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8007e32:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8007e34:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8007e36:	f042 0201 	orr.w	r2, r2, #1
 8007e3a:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8007e3c:	2201      	movs	r2, #1
 8007e3e:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e40:	2304      	movs	r3, #4
 8007e42:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007e46:	2300      	movs	r3, #0
 8007e48:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007e4c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8007e4e:	b103      	cbz	r3, 8007e52 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8007e50:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8007e52:	06b2      	lsls	r2, r6, #26
 8007e54:	d516      	bpl.n	8007e84 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8007e56:	04ab      	lsls	r3, r5, #18
 8007e58:	d514      	bpl.n	8007e84 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8007e5a:	6823      	ldr	r3, [r4, #0]
 8007e5c:	681a      	ldr	r2, [r3, #0]
 8007e5e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007e62:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8007e64:	2220      	movs	r2, #32
 8007e66:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8007e68:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e6a:	f043 0302 	orr.w	r3, r3, #2
 8007e6e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007e70:	2304      	movs	r3, #4
 8007e72:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007e76:	2300      	movs	r3, #0
 8007e78:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007e7c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007e7e:	b10b      	cbz	r3, 8007e84 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8007e80:	4620      	mov	r0, r4
 8007e82:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8007e84:	0730      	lsls	r0, r6, #28
 8007e86:	d516      	bpl.n	8007eb6 <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8007e88:	0529      	lsls	r1, r5, #20
 8007e8a:	d514      	bpl.n	8007eb6 <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8007e8c:	6823      	ldr	r3, [r4, #0]
 8007e8e:	681a      	ldr	r2, [r3, #0]
 8007e90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e94:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8007e96:	2208      	movs	r2, #8
 8007e98:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8007e9a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007e9c:	f043 0304 	orr.w	r3, r3, #4
 8007ea0:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8007ea2:	2304      	movs	r3, #4
 8007ea4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007ea8:	2300      	movs	r3, #0
 8007eaa:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8007eae:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007eb0:	b10b      	cbz	r3, 8007eb6 <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8007eb2:	4620      	mov	r0, r4
 8007eb4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8007eb6:	0772      	lsls	r2, r6, #29
 8007eb8:	d50b      	bpl.n	8007ed2 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8007eba:	056b      	lsls	r3, r5, #21
 8007ebc:	d509      	bpl.n	8007ed2 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ebe:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ec0:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8007ec2:	681a      	ldr	r2, [r3, #0]
 8007ec4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007ec8:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8007eca:	2204      	movs	r2, #4
 8007ecc:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8007ece:	f7ff ffa2 	bl	8007e16 <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8007ed2:	07b0      	lsls	r0, r6, #30
 8007ed4:	d514      	bpl.n	8007f00 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8007ed6:	05a9      	lsls	r1, r5, #22
 8007ed8:	d512      	bpl.n	8007f00 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8007eda:	6823      	ldr	r3, [r4, #0]
 8007edc:	681a      	ldr	r2, [r3, #0]
 8007ede:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8007ee2:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8007ee4:	2202      	movs	r2, #2
 8007ee6:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007ee8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007eea:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007eec:	2301      	movs	r3, #1
 8007eee:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007ef2:	2300      	movs	r3, #0
 8007ef4:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8007ef8:	6a23      	ldr	r3, [r4, #32]
 8007efa:	b10b      	cbz	r3, 8007f00 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8007efc:	4620      	mov	r0, r4
 8007efe:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8007f00:	06f2      	lsls	r2, r6, #27
 8007f02:	d513      	bpl.n	8007f2c <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8007f04:	04eb      	lsls	r3, r5, #19
 8007f06:	d511      	bpl.n	8007f2c <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007f08:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007f0a:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8007f0c:	681a      	ldr	r2, [r3, #0]
 8007f0e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007f12:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8007f14:	2210      	movs	r2, #16
 8007f16:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8007f18:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007f1a:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8007f1c:	2301      	movs	r3, #1
 8007f1e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8007f22:	2300      	movs	r3, #0
 8007f24:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8007f28:	f7ff ff76 	bl	8007e18 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8007f2c:	bd70      	pop	{r4, r5, r6, pc}

08007f2e <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8007f2e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f32:	4607      	mov	r7, r0
 8007f34:	460d      	mov	r5, r1
 8007f36:	4614      	mov	r4, r2
 8007f38:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8007f3a:	f7ff fbcb 	bl	80076d4 <HAL_GetTick>
 8007f3e:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007f40:	683b      	ldr	r3, [r7, #0]
 8007f42:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8007f44:	07d2      	lsls	r2, r2, #31
 8007f46:	d50a      	bpl.n	8007f5e <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007f48:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8007f4c:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8007f4e:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8007f50:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8007f54:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8007f58:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007f5e:	f7ff fbb9 	bl	80076d4 <HAL_GetTick>
 8007f62:	eba0 0008 	sub.w	r0, r0, r8
 8007f66:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007f6a:	d9e9      	bls.n	8007f40 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8007f6c:	2003      	movs	r0, #3
 8007f6e:	e7f4      	b.n	8007f5a <DSI_ShortWrite.constprop.0+0x2c>

08007f70 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007f70:	7c03      	ldrb	r3, [r0, #16]
{
 8007f72:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8007f74:	2b01      	cmp	r3, #1
 8007f76:	d05b      	beq.n	8008030 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8007f78:	6803      	ldr	r3, [r0, #0]
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8007f80:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007f84:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8007f86:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8007f88:	d507      	bpl.n	8007f9a <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8007f8a:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007f8e:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8007f92:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8007f96:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8007f9a:	0788      	lsls	r0, r1, #30
 8007f9c:	d505      	bpl.n	8007faa <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8007f9e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8007fa2:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8007fa6:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8007faa:	0748      	lsls	r0, r1, #29
 8007fac:	d505      	bpl.n	8007fba <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8007fae:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007fb2:	f040 0001 	orr.w	r0, r0, #1
 8007fb6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8007fba:	0708      	lsls	r0, r1, #28
 8007fbc:	d505      	bpl.n	8007fca <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8007fbe:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007fc2:	f040 0002 	orr.w	r0, r0, #2
 8007fc6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8007fca:	06c8      	lsls	r0, r1, #27
 8007fcc:	d505      	bpl.n	8007fda <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8007fce:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007fd2:	f040 000c 	orr.w	r0, r0, #12
 8007fd6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8007fda:	0688      	lsls	r0, r1, #26
 8007fdc:	d505      	bpl.n	8007fea <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8007fde:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007fe2:	f040 0010 	orr.w	r0, r0, #16
 8007fe6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8007fea:	0648      	lsls	r0, r1, #25
 8007fec:	d505      	bpl.n	8007ffa <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8007fee:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8007ff2:	f040 0020 	orr.w	r0, r0, #32
 8007ff6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8007ffa:	0608      	lsls	r0, r1, #24
 8007ffc:	d505      	bpl.n	800800a <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8007ffe:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008002:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8008006:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 800800a:	05c8      	lsls	r0, r1, #23
 800800c:	d505      	bpl.n	800801a <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 800800e:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8008012:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8008016:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 800801a:	0589      	lsls	r1, r1, #22
 800801c:	d505      	bpl.n	800802a <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 800801e:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8008022:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8008026:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 800802a:	2000      	movs	r0, #0
 800802c:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 800802e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008030:	2002      	movs	r0, #2
}
 8008032:	4770      	bx	lr

08008034 <HAL_DSI_Init>:
{
 8008034:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8008036:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8008038:	4604      	mov	r4, r0
 800803a:	2800      	cmp	r0, #0
 800803c:	f000 80ea 	beq.w	8008214 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8008040:	7c43      	ldrb	r3, [r0, #17]
 8008042:	b90b      	cbnz	r3, 8008048 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8008044:	f7f9 f9ac 	bl	80013a0 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8008048:	2303      	movs	r3, #3
 800804a:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 800804c:	2300      	movs	r3, #0
 800804e:	9300      	str	r3, [sp, #0]
 8008050:	6823      	ldr	r3, [r4, #0]
 8008052:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8008056:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800805a:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800805e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8008062:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8008066:	9300      	str	r3, [sp, #0]
 8008068:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800806a:	f7ff fb33 	bl	80076d4 <HAL_GetTick>
 800806e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8008070:	6822      	ldr	r2, [r4, #0]
 8008072:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8008076:	04d9      	lsls	r1, r3, #19
 8008078:	d56e      	bpl.n	8008158 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800807a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800807e:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8008082:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8008086:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800808a:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800808e:	e9d5 0300 	ldrd	r0, r3, [r5]
 8008092:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8008094:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8008098:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800809a:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 800809e:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 80080a0:	430b      	orrs	r3, r1
 80080a2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 80080a6:	2300      	movs	r3, #0
 80080a8:	9301      	str	r3, [sp, #4]
 80080aa:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80080ae:	f043 0301 	orr.w	r3, r3, #1
 80080b2:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 80080b6:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 80080ba:	f003 0301 	and.w	r3, r3, #1
 80080be:	9301      	str	r3, [sp, #4]
 80080c0:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 80080c2:	f7ff fb0d 	bl	80076e0 <HAL_Delay>
  tickstart = HAL_GetTick();
 80080c6:	f7ff fb05 	bl	80076d4 <HAL_GetTick>
 80080ca:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 80080cc:	6823      	ldr	r3, [r4, #0]
 80080ce:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80080d2:	05d2      	lsls	r2, r2, #23
 80080d4:	d548      	bpl.n	8008168 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 80080d6:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80080d8:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 80080da:	9202      	str	r2, [sp, #8]
 80080dc:	685a      	ldr	r2, [r3, #4]
 80080de:	f042 0201 	orr.w	r2, r2, #1
 80080e2:	605a      	str	r2, [r3, #4]
 80080e4:	685a      	ldr	r2, [r3, #4]
 80080e6:	f002 0201 	and.w	r2, r2, #1
 80080ea:	9202      	str	r2, [sp, #8]
 80080ec:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 80080ee:	689a      	ldr	r2, [r3, #8]
 80080f0:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80080f4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80080f6:	689a      	ldr	r2, [r3, #8]
 80080f8:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80080fa:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80080fc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80080fe:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8008102:	f042 0202 	orr.w	r2, r2, #2
 8008106:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800810a:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800810e:	f042 0204 	orr.w	r2, r2, #4
 8008112:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8008116:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800811a:	f022 0203 	bic.w	r2, r2, #3
 800811e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8008122:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8008126:	430a      	orrs	r2, r1
 8008128:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 800812c:	f7ff fad2 	bl	80076d4 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008130:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8008132:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8008134:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8008138:	079b      	lsls	r3, r3, #30
 800813a:	d025      	beq.n	8008188 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800813c:	6823      	ldr	r3, [r4, #0]
 800813e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8008142:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8008146:	2b94      	cmp	r3, #148	@ 0x94
 8008148:	d025      	beq.n	8008196 <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800814a:	f7ff fac3 	bl	80076d4 <HAL_GetTick>
 800814e:	1b80      	subs	r0, r0, r6
 8008150:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008154:	d9f2      	bls.n	800813c <HAL_DSI_Init+0x108>
 8008156:	e014      	b.n	8008182 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008158:	f7ff fabc 	bl	80076d4 <HAL_GetTick>
 800815c:	1b80      	subs	r0, r0, r6
 800815e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008162:	d985      	bls.n	8008070 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8008164:	2003      	movs	r0, #3
 8008166:	e053      	b.n	8008210 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008168:	f7ff fab4 	bl	80076d4 <HAL_GetTick>
 800816c:	1b80      	subs	r0, r0, r6
 800816e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008172:	d9ab      	bls.n	80080cc <HAL_DSI_Init+0x98>
 8008174:	e7f6      	b.n	8008164 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8008176:	f7ff faad 	bl	80076d4 <HAL_GetTick>
 800817a:	1b80      	subs	r0, r0, r6
 800817c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8008180:	d902      	bls.n	8008188 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8008182:	2300      	movs	r3, #0
 8008184:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8008186:	e7ed      	b.n	8008164 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800818e:	f003 0314 	and.w	r3, r3, #20
 8008192:	2b14      	cmp	r3, #20
 8008194:	d1ef      	bne.n	8008176 <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8008196:	686b      	ldr	r3, [r5, #4]
 8008198:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800819c:	4a1e      	ldr	r2, [pc, #120]	@ (8008218 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 800819e:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 80081a0:	2b01      	cmp	r3, #1
 80081a2:	bf38      	it	cc
 80081a4:	2301      	movcc	r3, #1
 80081a6:	435a      	muls	r2, r3
 80081a8:	68ab      	ldr	r3, [r5, #8]
 80081aa:	f003 0303 	and.w	r3, r3, #3
 80081ae:	409a      	lsls	r2, r3
 80081b0:	682b      	ldr	r3, [r5, #0]
 80081b2:	434b      	muls	r3, r1
 80081b4:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 80081b8:	6823      	ldr	r3, [r4, #0]
 80081ba:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80081be:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 80081c2:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80081c6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 80081ca:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80081cc:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 80081ce:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 80081d2:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 80081d6:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 80081da:	9003      	str	r0, [sp, #12]
 80081dc:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 80081de:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 80081e0:	f022 0201 	bic.w	r2, r2, #1
 80081e4:	605a      	str	r2, [r3, #4]
 80081e6:	685a      	ldr	r2, [r3, #4]
 80081e8:	f002 0201 	and.w	r2, r2, #1
 80081ec:	9203      	str	r2, [sp, #12]
 80081ee:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 80081f0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80081f4:	f022 0203 	bic.w	r2, r2, #3
 80081f8:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80081fc:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8008200:	430a      	orrs	r2, r1
 8008202:	f042 0201 	orr.w	r2, r2, #1
 8008206:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 800820a:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800820c:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 800820e:	7463      	strb	r3, [r4, #17]
}
 8008210:	b004      	add	sp, #16
 8008212:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8008214:	2001      	movs	r0, #1
 8008216:	e7fb      	b.n	8008210 <HAL_DSI_Init+0x1dc>
 8008218:	003d0900 	.word	0x003d0900

0800821c <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 800821c:	4770      	bx	lr

0800821e <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800821e:	6803      	ldr	r3, [r0, #0]
 8008220:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008224:	07d1      	lsls	r1, r2, #31
{
 8008226:	b510      	push	{r4, lr}
 8008228:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 800822a:	d508      	bpl.n	800823e <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 800822c:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8008230:	07d2      	lsls	r2, r2, #31
 8008232:	d504      	bpl.n	800823e <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8008234:	2201      	movs	r2, #1
 8008236:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 800823a:	f7fa f83d 	bl	80022b8 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 800823e:	6823      	ldr	r3, [r4, #0]
 8008240:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8008244:	0791      	lsls	r1, r2, #30
 8008246:	d509      	bpl.n	800825c <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8008248:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800824c:	0792      	lsls	r2, r2, #30
 800824e:	d505      	bpl.n	800825c <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008250:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008252:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8008254:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8008258:	f7fa f860 	bl	800231c <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 800825c:	69a3      	ldr	r3, [r4, #24]
 800825e:	2b00      	cmp	r3, #0
 8008260:	d04e      	beq.n	8008300 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8008262:	6821      	ldr	r1, [r4, #0]
 8008264:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8008268:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 800826c:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 800826e:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8008272:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8008276:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8008278:	b291      	uxth	r1, r2
 800827a:	b119      	cbz	r1, 8008284 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 800827c:	6961      	ldr	r1, [r4, #20]
 800827e:	f041 0101 	orr.w	r1, r1, #1
 8008282:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8008284:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8008288:	d003      	beq.n	8008292 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800828a:	6962      	ldr	r2, [r4, #20]
 800828c:	f042 0202 	orr.w	r2, r2, #2
 8008290:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8008292:	07d8      	lsls	r0, r3, #31
 8008294:	d503      	bpl.n	800829e <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8008296:	6962      	ldr	r2, [r4, #20]
 8008298:	f042 0204 	orr.w	r2, r2, #4
 800829c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 800829e:	0799      	lsls	r1, r3, #30
 80082a0:	d503      	bpl.n	80082aa <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 80082a2:	6962      	ldr	r2, [r4, #20]
 80082a4:	f042 0208 	orr.w	r2, r2, #8
 80082a8:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 80082aa:	f013 0f0c 	tst.w	r3, #12
 80082ae:	d003      	beq.n	80082b8 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 80082b0:	6962      	ldr	r2, [r4, #20]
 80082b2:	f042 0210 	orr.w	r2, r2, #16
 80082b6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 80082b8:	06da      	lsls	r2, r3, #27
 80082ba:	d503      	bpl.n	80082c4 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 80082bc:	6962      	ldr	r2, [r4, #20]
 80082be:	f042 0220 	orr.w	r2, r2, #32
 80082c2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 80082c4:	0698      	lsls	r0, r3, #26
 80082c6:	d503      	bpl.n	80082d0 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 80082c8:	6962      	ldr	r2, [r4, #20]
 80082ca:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80082ce:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 80082d0:	0659      	lsls	r1, r3, #25
 80082d2:	d503      	bpl.n	80082dc <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 80082d4:	6962      	ldr	r2, [r4, #20]
 80082d6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80082da:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 80082dc:	061a      	lsls	r2, r3, #24
 80082de:	d503      	bpl.n	80082e8 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 80082e0:	6962      	ldr	r2, [r4, #20]
 80082e2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80082e6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 80082e8:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 80082ec:	d003      	beq.n	80082f6 <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 80082ee:	6963      	ldr	r3, [r4, #20]
 80082f0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80082f4:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 80082f6:	6963      	ldr	r3, [r4, #20]
 80082f8:	b113      	cbz	r3, 8008300 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 80082fa:	4620      	mov	r0, r4
 80082fc:	f7ff ff8e 	bl	800821c <HAL_DSI_ErrorCallback>
}
 8008300:	bd10      	pop	{r4, pc}

08008302 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008302:	7c02      	ldrb	r2, [r0, #16]
{
 8008304:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008306:	2a01      	cmp	r2, #1
 8008308:	d00a      	beq.n	8008320 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 800830a:	6802      	ldr	r2, [r0, #0]
 800830c:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 800830e:	f020 0003 	bic.w	r0, r0, #3
 8008312:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8008314:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8008316:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008318:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 800831a:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 800831c:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800831e:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008320:	2002      	movs	r0, #2
}
 8008322:	4770      	bx	lr

08008324 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8008324:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008326:	7c03      	ldrb	r3, [r0, #16]
{
 8008328:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800832a:	2b01      	cmp	r3, #1
 800832c:	d069      	beq.n	8008402 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 800832e:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8008330:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8008332:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008334:	f042 0201 	orr.w	r2, r2, #1
 8008338:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800833a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800833e:	f022 0201 	bic.w	r2, r2, #1
 8008342:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8008346:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800834a:	f042 0201 	orr.w	r2, r2, #1
 800834e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8008352:	68da      	ldr	r2, [r3, #12]
 8008354:	f022 0203 	bic.w	r2, r2, #3
 8008358:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 800835a:	68da      	ldr	r2, [r3, #12]
 800835c:	4302      	orrs	r2, r0
 800835e:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8008360:	695a      	ldr	r2, [r3, #20]
 8008362:	f022 0207 	bic.w	r2, r2, #7
 8008366:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008368:	6958      	ldr	r0, [r3, #20]
 800836a:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 800836e:	432a      	orrs	r2, r5
 8008370:	694d      	ldr	r5, [r1, #20]
 8008372:	432a      	orrs	r2, r5
 8008374:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008376:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8008378:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800837a:	691a      	ldr	r2, [r3, #16]
 800837c:	f022 020f 	bic.w	r2, r2, #15
 8008380:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8008382:	691a      	ldr	r2, [r3, #16]
 8008384:	4302      	orrs	r2, r0
 8008386:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8008388:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800838c:	f022 020e 	bic.w	r2, r2, #14
 8008390:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8008394:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8008398:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800839c:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 800839e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 80083a2:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80083a4:	0c12      	lsrs	r2, r2, #16
 80083a6:	0412      	lsls	r2, r2, #16
 80083a8:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 80083aa:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80083ac:	4302      	orrs	r2, r0
 80083ae:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 80083b0:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80083b4:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 80083b8:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80083bc:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 80083c0:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 80083c4:	432a      	orrs	r2, r5
 80083c6:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80083c8:	432a      	orrs	r2, r5
 80083ca:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80083cc:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80083ce:	432a      	orrs	r2, r5
 80083d0:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80083d2:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 80083d4:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 80083d8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80083da:	f022 0201 	bic.w	r2, r2, #1
 80083de:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 80083e0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80083e2:	430a      	orrs	r2, r1
 80083e4:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 80083e6:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80083ea:	f042 0201 	orr.w	r2, r2, #1
 80083ee:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 80083f2:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80083f6:	f042 0202 	orr.w	r2, r2, #2
 80083fa:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80083fe:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008400:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008402:	2002      	movs	r0, #2
 8008404:	e7fc      	b.n	8008400 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08008408 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8008408:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800840a:	7c03      	ldrb	r3, [r0, #16]
{
 800840c:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 800840e:	2b01      	cmp	r3, #1
 8008410:	d029      	beq.n	8008466 <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8008412:	6800      	ldr	r0, [r0, #0]
 8008414:	4b15      	ldr	r3, [pc, #84]	@ (800846c <HAL_DSI_ConfigCommand+0x64>)
 8008416:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8008418:	4023      	ands	r3, r4
 800841a:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800841c:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 800841e:	e9d1 3500 	ldrd	r3, r5, [r1]
 8008422:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8008424:	688d      	ldr	r5, [r1, #8]
 8008426:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8008428:	68cd      	ldr	r5, [r1, #12]
 800842a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 800842c:	690d      	ldr	r5, [r1, #16]
 800842e:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8008430:	694d      	ldr	r5, [r1, #20]
 8008432:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 8008434:	698d      	ldr	r5, [r1, #24]
 8008436:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8008438:	69cd      	ldr	r5, [r1, #28]
 800843a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 800843c:	6a0d      	ldr	r5, [r1, #32]
 800843e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8008440:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008442:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 8008444:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8008446:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8008448:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800844a:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 800844c:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 800844e:	4323      	orrs	r3, r4
 8008450:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 8008452:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8008454:	f023 0302 	bic.w	r3, r3, #2
 8008458:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 800845a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800845c:	430b      	orrs	r3, r1
 800845e:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008460:	2000      	movs	r0, #0
 8008462:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8008464:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008466:	2002      	movs	r0, #2
 8008468:	e7fc      	b.n	8008464 <HAL_DSI_ConfigCommand+0x5c>
 800846a:	bf00      	nop
 800846c:	fef080ff 	.word	0xfef080ff

08008470 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008470:	7c02      	ldrb	r2, [r0, #16]
{
 8008472:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008474:	2a01      	cmp	r2, #1
 8008476:	d00a      	beq.n	800848e <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8008478:	6802      	ldr	r2, [r0, #0]
 800847a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800847c:	f020 001f 	bic.w	r0, r0, #31
 8008480:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8008482:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8008484:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008486:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8008488:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800848a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800848c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800848e:	2002      	movs	r0, #2
}
 8008490:	4770      	bx	lr

08008492 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8008492:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8008494:	7c03      	ldrb	r3, [r0, #16]
{
 8008496:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008498:	2b01      	cmp	r3, #1
 800849a:	d034      	beq.n	8008506 <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 800849c:	e9d1 0300 	ldrd	r0, r3, [r1]
 80084a0:	4298      	cmp	r0, r3
 80084a2:	bf38      	it	cc
 80084a4:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 80084a6:	6823      	ldr	r3, [r4, #0]
 80084a8:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80084ac:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 80084b0:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 80084b4:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 80084b8:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80084bc:	4302      	orrs	r2, r0
 80084be:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 80084c2:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 80084c6:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80084ca:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80084ce:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80084d2:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80084d6:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80084d8:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80084dc:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80084de:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80084e0:	432a      	orrs	r2, r5
 80084e2:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80084e4:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80084e6:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80084ea:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80084ee:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80084f2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80084f6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80084fa:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80084fe:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 8008502:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8008504:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8008506:	2002      	movs	r0, #2
 8008508:	e7fc      	b.n	8008504 <HAL_DSI_ConfigPhyTimer+0x72>
	...

0800850c <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 800850c:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 800850e:	7c03      	ldrb	r3, [r0, #16]
{
 8008510:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008512:	2b01      	cmp	r3, #1
 8008514:	d05b      	beq.n	80085ce <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 8008516:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008518:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800851a:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800851c:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 800851e:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8008522:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8008524:	689a      	ldr	r2, [r3, #8]
 8008526:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800852a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 800852c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 800852e:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008530:	b292      	uxth	r2, r2
 8008532:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8008534:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8008536:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800853a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 800853c:	4a25      	ldr	r2, [pc, #148]	@ (80085d4 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 800853e:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008540:	4010      	ands	r0, r2
 8008542:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8008544:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8008546:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008548:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800854a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 800854c:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800854e:	4010      	ands	r0, r2
 8008550:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008552:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8008554:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008556:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8008558:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 800855a:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800855e:	4010      	ands	r0, r2
 8008560:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8008564:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8008568:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800856a:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800856c:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8008570:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008574:	4010      	ands	r0, r2
 8008576:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800857a:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800857e:	4328      	orrs	r0, r5
 8008580:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8008584:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008588:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 800858c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8008590:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8008594:	698d      	ldr	r5, [r1, #24]
 8008596:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8008598:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800859a:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 800859c:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 80085a0:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80085a4:	4010      	ands	r0, r2
 80085a6:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 80085aa:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 80085ae:	4328      	orrs	r0, r5
 80085b0:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80085b4:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 80085b8:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80085ba:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 80085bc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 80085c0:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 80085c4:	430a      	orrs	r2, r1
 80085c6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80085ca:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80085cc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80085ce:	2002      	movs	r0, #2
 80085d0:	e7fc      	b.n	80085cc <HAL_DSI_ConfigHostTimeouts+0xc0>
 80085d2:	bf00      	nop
 80085d4:	ffff0000 	.word	0xffff0000

080085d8 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80085d8:	7c03      	ldrb	r3, [r0, #16]
{
 80085da:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80085dc:	2b01      	cmp	r3, #1
 80085de:	d01c      	beq.n	800861a <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80085e0:	6802      	ldr	r2, [r0, #0]
 80085e2:	2300      	movs	r3, #0
 80085e4:	9300      	str	r3, [sp, #0]
 80085e6:	6851      	ldr	r1, [r2, #4]
 80085e8:	f041 0101 	orr.w	r1, r1, #1
 80085ec:	6051      	str	r1, [r2, #4]
 80085ee:	6851      	ldr	r1, [r2, #4]
 80085f0:	f001 0101 	and.w	r1, r1, #1
 80085f4:	9100      	str	r1, [sp, #0]
 80085f6:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80085f8:	9301      	str	r3, [sp, #4]
 80085fa:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80085fe:	f041 0108 	orr.w	r1, r1, #8
 8008602:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 8008606:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800860a:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 800860c:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800860e:	f002 0208 	and.w	r2, r2, #8
 8008612:	9201      	str	r2, [sp, #4]
 8008614:	9a01      	ldr	r2, [sp, #4]
}
 8008616:	b002      	add	sp, #8
 8008618:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800861a:	2002      	movs	r0, #2
 800861c:	e7fb      	b.n	8008616 <HAL_DSI_Start+0x3e>

0800861e <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800861e:	7c02      	ldrb	r2, [r0, #16]
{
 8008620:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008622:	2a01      	cmp	r2, #1
 8008624:	d009      	beq.n	800863a <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8008626:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008628:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 800862a:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 800862e:	f042 0204 	orr.w	r2, r2, #4
 8008632:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 8008636:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008638:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800863a:	2002      	movs	r0, #2
}
 800863c:	4770      	bx	lr

0800863e <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800863e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008640:	7c05      	ldrb	r5, [r0, #16]
{
 8008642:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8008644:	2d01      	cmp	r5, #1
 8008646:	d009      	beq.n	800865c <HAL_DSI_ShortWrite+0x1e>
 8008648:	2501      	movs	r5, #1
 800864a:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800864c:	9d06      	ldr	r5, [sp, #24]
 800864e:	9500      	str	r5, [sp, #0]
 8008650:	f7ff fc6d 	bl	8007f2e <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8008654:	2300      	movs	r3, #0
 8008656:	7423      	strb	r3, [r4, #16]

  return status;
}
 8008658:	b003      	add	sp, #12
 800865a:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800865c:	2002      	movs	r0, #2
 800865e:	e7fb      	b.n	8008658 <HAL_DSI_ShortWrite+0x1a>

08008660 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8008660:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008664:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008666:	7c03      	ldrb	r3, [r0, #16]
{
 8008668:	4606      	mov	r6, r0
 800866a:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 800866c:	2b01      	cmp	r3, #1
{
 800866e:	4615      	mov	r5, r2
 8008670:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8008674:	d052      	beq.n	800871c <HAL_DSI_LongWrite+0xbc>
 8008676:	2301      	movs	r3, #1
 8008678:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800867a:	f7ff f82b 	bl	80076d4 <HAL_GetTick>
 800867e:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8008680:	6832      	ldr	r2, [r6, #0]
 8008682:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8008684:	f013 0a01 	ands.w	sl, r3, #1
 8008688:	d019      	beq.n	80086be <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800868a:	2c03      	cmp	r4, #3
 800868c:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 800868e:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8008692:	bf28      	it	cs
 8008694:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 8008696:	4283      	cmp	r3, r0
 8008698:	d11d      	bne.n	80086d6 <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800869a:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 800869c:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 800869e:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 80086a2:	bb10      	cbnz	r0, 80086ea <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 80086a4:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80086a6:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 80086aa:	0223      	lsls	r3, r4, #8
 80086ac:	0224      	lsls	r4, r4, #8
 80086ae:	b29b      	uxth	r3, r3
 80086b0:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 80086b4:	431d      	orrs	r5, r3
 80086b6:	4325      	orrs	r5, r4
 80086b8:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80086ba:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 80086bc:	e009      	b.n	80086d2 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80086be:	f7ff f809 	bl	80076d4 <HAL_GetTick>
 80086c2:	eba0 000b 	sub.w	r0, r0, fp
 80086c6:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80086ca:	d9d9      	bls.n	8008680 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80086cc:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80086ce:	f886 a010 	strb.w	sl, [r6, #16]
}
 80086d2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80086d6:	f818 1003 	ldrb.w	r1, [r8, r3]
 80086da:	3301      	adds	r3, #1
 80086dc:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80086e0:	fa01 f10c 	lsl.w	r1, r1, ip
 80086e4:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80086e8:	e7d5      	b.n	8008696 <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80086ea:	2804      	cmp	r0, #4
    fifoword = 0U;
 80086ec:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80086f0:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 80086f2:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80086f4:	bf28      	it	cs
 80086f6:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80086fa:	f813 8001 	ldrb.w	r8, [r3, r1]
 80086fe:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 8008702:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 8008704:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 8008708:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800870a:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 800870e:	d1f4      	bne.n	80086fa <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 8008710:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 8008714:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 8008716:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 800871a:	e7c2      	b.n	80086a2 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 800871c:	2002      	movs	r0, #2
 800871e:	e7d8      	b.n	80086d2 <HAL_DSI_LongWrite+0x72>

08008720 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 8008720:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008724:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 8008726:	7c03      	ldrb	r3, [r0, #16]
{
 8008728:	4605      	mov	r5, r0
 800872a:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 800872c:	2b01      	cmp	r3, #1
{
 800872e:	4617      	mov	r7, r2
 8008730:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8008734:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8008738:	d06f      	beq.n	800881a <HAL_DSI_Read+0xfa>
 800873a:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800873c:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 800873e:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8008740:	d90d      	bls.n	800875e <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 8008742:	f3c6 2307 	ubfx	r3, r6, #8, #8
 8008746:	2237      	movs	r2, #55	@ 0x37
 8008748:	9300      	str	r3, [sp, #0]
 800874a:	b2f3      	uxtb	r3, r6
 800874c:	f7ff fbef 	bl	8007f2e <DSI_ShortWrite.constprop.0>
 8008750:	b128      	cbz	r0, 800875e <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 8008752:	2300      	movs	r3, #0

      return HAL_ERROR;
 8008754:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 8008756:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8008758:	b003      	add	sp, #12
 800875a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800875e:	f1b9 0f06 	cmp.w	r9, #6
 8008762:	d10f      	bne.n	8008784 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008764:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 8008766:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8008768:	021b      	lsls	r3, r3, #8
 800876a:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 800876e:	f043 0306 	orr.w	r3, r3, #6
 8008772:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8008774:	f7fe ffae 	bl	80076d4 <HAL_GetTick>
 8008778:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800877a:	2e00      	cmp	r6, #0
 800877c:	dc27      	bgt.n	80087ce <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 800877e:	2000      	movs	r0, #0
 8008780:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8008782:	e7e9      	b.n	8008758 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8008784:	f1b9 0f04 	cmp.w	r9, #4
 8008788:	d105      	bne.n	8008796 <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800878a:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800878c:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800878e:	f044 0404 	orr.w	r4, r4, #4
 8008792:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8008794:	e7ee      	b.n	8008774 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 8008796:	f1b9 0f14 	cmp.w	r9, #20
 800879a:	d108      	bne.n	80087ae <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800879c:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80087a0:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 80087a2:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80087a4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80087a8:	f044 0414 	orr.w	r4, r4, #20
 80087ac:	e7f1      	b.n	8008792 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 80087ae:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 80087b2:	d1ce      	bne.n	8008752 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80087b4:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80087b8:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80087ba:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80087bc:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 80087c0:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 80087c4:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80087c8:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80087cc:	e7e1      	b.n	8008792 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80087ce:	682a      	ldr	r2, [r5, #0]
 80087d0:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80087d2:	f013 0310 	ands.w	r3, r3, #16
 80087d6:	d10d      	bne.n	80087f4 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80087d8:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80087da:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80087dc:	4632      	mov	r2, r6
 80087de:	bf28      	it	cs
 80087e0:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80087e2:	00d9      	lsls	r1, r3, #3
 80087e4:	fa20 f101 	lsr.w	r1, r0, r1
 80087e8:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80087ea:	3301      	adds	r3, #1
 80087ec:	429a      	cmp	r2, r3
 80087ee:	d1f8      	bne.n	80087e2 <HAL_DSI_Read+0xc2>
        pdata++;
 80087f0:	4417      	add	r7, r2
        datasize--;
 80087f2:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80087f4:	f7fe ff6e 	bl	80076d4 <HAL_GetTick>
 80087f8:	1b00      	subs	r0, r0, r4
 80087fa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80087fe:	d903      	bls.n	8008808 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 8008800:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 8008802:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8008804:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 8008806:	e7a7      	b.n	8008758 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 8008808:	682b      	ldr	r3, [r5, #0]
 800880a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 800880c:	0652      	lsls	r2, r2, #25
 800880e:	d4b4      	bmi.n	800877a <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 8008810:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8008814:	069b      	lsls	r3, r3, #26
 8008816:	d49c      	bmi.n	8008752 <HAL_DSI_Read+0x32>
 8008818:	e7af      	b.n	800877a <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 800881a:	2002      	movs	r0, #2
 800881c:	e79c      	b.n	8008758 <HAL_DSI_Read+0x38>

0800881e <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800881e:	7c02      	ldrb	r2, [r0, #16]
{
 8008820:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8008822:	2a01      	cmp	r2, #1
 8008824:	d00f      	beq.n	8008846 <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 8008826:	6802      	ldr	r2, [r0, #0]
 8008828:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 800882c:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8008830:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8008834:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8008838:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800883c:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800883e:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 8008842:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8008844:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8008846:	2002      	movs	r0, #2
}
 8008848:	4770      	bx	lr
	...

0800884c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800884c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008850:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008852:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 8008a18 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8008856:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800885a:	680a      	ldr	r2, [r1, #0]
 800885c:	fa32 f503 	lsrs.w	r5, r2, r3
 8008860:	d102      	bne.n	8008868 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8008862:	b003      	add	sp, #12
 8008864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8008868:	2501      	movs	r5, #1
 800886a:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 800886e:	ea18 0202 	ands.w	r2, r8, r2
 8008872:	f000 80bb 	beq.w	80089ec <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008876:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008878:	2703      	movs	r7, #3
 800887a:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800887e:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008882:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8008886:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008888:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800888c:	2f01      	cmp	r7, #1
 800888e:	d834      	bhi.n	80088fa <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8008890:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008892:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 8008896:	68cf      	ldr	r7, [r1, #12]
 8008898:	fa07 f70e 	lsl.w	r7, r7, lr
 800889c:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 80088a0:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 80088a2:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80088a4:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80088a8:	f3c6 1700 	ubfx	r7, r6, #4, #1
 80088ac:	409f      	lsls	r7, r3
 80088ae:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 80088b2:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 80088b4:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088b6:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80088b8:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80088bc:	688f      	ldr	r7, [r1, #8]
 80088be:	fa07 f70e 	lsl.w	r7, r7, lr
 80088c2:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 80088c6:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80088c8:	d119      	bne.n	80088fe <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80088ca:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088ce:	f003 0a07 	and.w	sl, r3, #7
 80088d2:	f04f 0b0f 	mov.w	fp, #15
 80088d6:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80088da:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80088de:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80088e2:	fa0b fb0a 	lsl.w	fp, fp, sl
 80088e6:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80088ea:	690f      	ldr	r7, [r1, #16]
 80088ec:	fa07 f70a 	lsl.w	r7, r7, sl
 80088f0:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80088f4:	f8c8 7020 	str.w	r7, [r8, #32]
 80088f8:	e001      	b.n	80088fe <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80088fa:	2d03      	cmp	r5, #3
 80088fc:	d1da      	bne.n	80088b4 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80088fe:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8008900:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008904:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8008908:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800890c:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 8008910:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8008912:	d06b      	beq.n	80089ec <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008914:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 8008918:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800891c:	f003 0c03 	and.w	ip, r3, #3
 8008920:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008924:	f045 0502 	orr.w	r5, r5, #2
 8008928:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800892c:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008930:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 8008934:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8008938:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800893c:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008940:	f005 0502 	and.w	r5, r5, #2
 8008944:	9501      	str	r5, [sp, #4]
 8008946:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8008948:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800894a:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800894e:	4d31      	ldr	r5, [pc, #196]	@ (8008a14 <HAL_GPIO_Init+0x1c8>)
 8008950:	42a8      	cmp	r0, r5
 8008952:	d04d      	beq.n	80089f0 <HAL_GPIO_Init+0x1a4>
 8008954:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008958:	42a8      	cmp	r0, r5
 800895a:	d04b      	beq.n	80089f4 <HAL_GPIO_Init+0x1a8>
 800895c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008960:	42a8      	cmp	r0, r5
 8008962:	d049      	beq.n	80089f8 <HAL_GPIO_Init+0x1ac>
 8008964:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008968:	42a8      	cmp	r0, r5
 800896a:	d047      	beq.n	80089fc <HAL_GPIO_Init+0x1b0>
 800896c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008970:	42a8      	cmp	r0, r5
 8008972:	d045      	beq.n	8008a00 <HAL_GPIO_Init+0x1b4>
 8008974:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008978:	42a8      	cmp	r0, r5
 800897a:	d043      	beq.n	8008a04 <HAL_GPIO_Init+0x1b8>
 800897c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008980:	42a8      	cmp	r0, r5
 8008982:	d041      	beq.n	8008a08 <HAL_GPIO_Init+0x1bc>
 8008984:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008988:	42a8      	cmp	r0, r5
 800898a:	d03f      	beq.n	8008a0c <HAL_GPIO_Init+0x1c0>
 800898c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008990:	42a8      	cmp	r0, r5
 8008992:	d03d      	beq.n	8008a10 <HAL_GPIO_Init+0x1c4>
 8008994:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008998:	42a8      	cmp	r0, r5
 800899a:	bf14      	ite	ne
 800899c:	250a      	movne	r5, #10
 800899e:	2509      	moveq	r5, #9
 80089a0:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80089a4:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089a8:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 80089ac:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 80089ae:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 80089b2:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 80089b4:	bf0c      	ite	eq
 80089b6:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80089b8:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80089ba:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 80089be:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 80089c0:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 80089c2:	bf0c      	ite	eq
 80089c4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80089c6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80089c8:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80089cc:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80089ce:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80089d2:	bf0c      	ite	eq
 80089d4:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80089d6:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80089d8:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80089da:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80089de:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80089e2:	bf54      	ite	pl
 80089e4:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80089e6:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80089e8:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80089ec:	3301      	adds	r3, #1
 80089ee:	e734      	b.n	800885a <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80089f0:	2500      	movs	r5, #0
 80089f2:	e7d5      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 80089f4:	2501      	movs	r5, #1
 80089f6:	e7d3      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 80089f8:	2502      	movs	r5, #2
 80089fa:	e7d1      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 80089fc:	2503      	movs	r5, #3
 80089fe:	e7cf      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a00:	2504      	movs	r5, #4
 8008a02:	e7cd      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a04:	2505      	movs	r5, #5
 8008a06:	e7cb      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a08:	2506      	movs	r5, #6
 8008a0a:	e7c9      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a0c:	2507      	movs	r5, #7
 8008a0e:	e7c7      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a10:	2508      	movs	r5, #8
 8008a12:	e7c5      	b.n	80089a0 <HAL_GPIO_Init+0x154>
 8008a14:	58020000 	.word	0x58020000
 8008a18:	58024400 	.word	0x58024400

08008a1c <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8008a1c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8008a20:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008a22:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008a26:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008a2a:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008a2e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 8008a32:	fa31 f302 	lsrs.w	r3, r1, r2
 8008a36:	d101      	bne.n	8008a3c <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8008a38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8008a3c:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8008a40:	ea1c 0601 	ands.w	r6, ip, r1
 8008a44:	d070      	beq.n	8008b28 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008a46:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008a4a:	f002 0703 	and.w	r7, r2, #3
 8008a4e:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 8008a52:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 8008a54:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8008a58:	fa08 f907 	lsl.w	r9, r8, r7
 8008a5c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8008a60:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008a64:	4b3a      	ldr	r3, [pc, #232]	@ (8008b50 <HAL_GPIO_DeInit+0x134>)
 8008a66:	4298      	cmp	r0, r3
 8008a68:	d060      	beq.n	8008b2c <HAL_GPIO_DeInit+0x110>
 8008a6a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a6e:	4298      	cmp	r0, r3
 8008a70:	d05e      	beq.n	8008b30 <HAL_GPIO_DeInit+0x114>
 8008a72:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a76:	4298      	cmp	r0, r3
 8008a78:	d05c      	beq.n	8008b34 <HAL_GPIO_DeInit+0x118>
 8008a7a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a7e:	4298      	cmp	r0, r3
 8008a80:	d05a      	beq.n	8008b38 <HAL_GPIO_DeInit+0x11c>
 8008a82:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a86:	4298      	cmp	r0, r3
 8008a88:	d058      	beq.n	8008b3c <HAL_GPIO_DeInit+0x120>
 8008a8a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a8e:	4298      	cmp	r0, r3
 8008a90:	d056      	beq.n	8008b40 <HAL_GPIO_DeInit+0x124>
 8008a92:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a96:	4298      	cmp	r0, r3
 8008a98:	d054      	beq.n	8008b44 <HAL_GPIO_DeInit+0x128>
 8008a9a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008a9e:	4298      	cmp	r0, r3
 8008aa0:	d052      	beq.n	8008b48 <HAL_GPIO_DeInit+0x12c>
 8008aa2:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aa6:	4298      	cmp	r0, r3
 8008aa8:	d050      	beq.n	8008b4c <HAL_GPIO_DeInit+0x130>
 8008aaa:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8008aae:	4298      	cmp	r0, r3
 8008ab0:	bf0c      	ite	eq
 8008ab2:	2309      	moveq	r3, #9
 8008ab4:	230a      	movne	r3, #10
 8008ab6:	40bb      	lsls	r3, r7
 8008ab8:	4573      	cmp	r3, lr
 8008aba:	d117      	bne.n	8008aec <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8008abc:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8008ac0:	ea23 0306 	bic.w	r3, r3, r6
 8008ac4:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8008ac8:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8008acc:	ea23 0306 	bic.w	r3, r3, r6
 8008ad0:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8008ad4:	6863      	ldr	r3, [r4, #4]
 8008ad6:	ea23 0306 	bic.w	r3, r3, r6
 8008ada:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8008adc:	6823      	ldr	r3, [r4, #0]
 8008ade:	ea23 0306 	bic.w	r3, r3, r6
 8008ae2:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8008ae4:	68ab      	ldr	r3, [r5, #8]
 8008ae6:	ea23 0309 	bic.w	r3, r3, r9
 8008aea:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008aec:	0053      	lsls	r3, r2, #1
 8008aee:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008af0:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8008af2:	fa0b f303 	lsl.w	r3, fp, r3
 8008af6:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008afa:	431d      	orrs	r5, r3
 8008afc:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8008afe:	f002 0507 	and.w	r5, r2, #7
 8008b02:	6a37      	ldr	r7, [r6, #32]
 8008b04:	00ad      	lsls	r5, r5, #2
 8008b06:	fa08 f505 	lsl.w	r5, r8, r5
 8008b0a:	ea27 0705 	bic.w	r7, r7, r5
 8008b0e:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8008b10:	68c5      	ldr	r5, [r0, #12]
 8008b12:	ea25 0503 	bic.w	r5, r5, r3
 8008b16:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8008b18:	6845      	ldr	r5, [r0, #4]
 8008b1a:	ea25 050c 	bic.w	r5, r5, ip
 8008b1e:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8008b20:	6885      	ldr	r5, [r0, #8]
 8008b22:	ea25 0303 	bic.w	r3, r5, r3
 8008b26:	6083      	str	r3, [r0, #8]
    position++;
 8008b28:	3201      	adds	r2, #1
 8008b2a:	e782      	b.n	8008a32 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8008b2c:	2300      	movs	r3, #0
 8008b2e:	e7c2      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b30:	2301      	movs	r3, #1
 8008b32:	e7c0      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b34:	2302      	movs	r3, #2
 8008b36:	e7be      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b38:	2303      	movs	r3, #3
 8008b3a:	e7bc      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b3c:	2304      	movs	r3, #4
 8008b3e:	e7ba      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b40:	2305      	movs	r3, #5
 8008b42:	e7b8      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b44:	2306      	movs	r3, #6
 8008b46:	e7b6      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b48:	2307      	movs	r3, #7
 8008b4a:	e7b4      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b4c:	2308      	movs	r3, #8
 8008b4e:	e7b2      	b.n	8008ab6 <HAL_GPIO_DeInit+0x9a>
 8008b50:	58020000 	.word	0x58020000

08008b54 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8008b54:	6903      	ldr	r3, [r0, #16]
 8008b56:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8008b58:	bf14      	ite	ne
 8008b5a:	2001      	movne	r0, #1
 8008b5c:	2000      	moveq	r0, #0
 8008b5e:	4770      	bx	lr

08008b60 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8008b60:	b10a      	cbz	r2, 8008b66 <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b62:	6181      	str	r1, [r0, #24]
  }
}
 8008b64:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8008b66:	0409      	lsls	r1, r1, #16
 8008b68:	e7fb      	b.n	8008b62 <HAL_GPIO_WritePin+0x2>

08008b6a <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008b6a:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8008b6c:	ea01 0203 	and.w	r2, r1, r3
 8008b70:	ea21 0103 	bic.w	r1, r1, r3
 8008b74:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8008b78:	6181      	str	r1, [r0, #24]
}
 8008b7a:	4770      	bx	lr

08008b7c <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8008b7c:	4b04      	ldr	r3, [pc, #16]	@ (8008b90 <HAL_HSEM_FastTake+0x14>)
 8008b7e:	3020      	adds	r0, #32
 8008b80:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8008b84:	4b03      	ldr	r3, [pc, #12]	@ (8008b94 <HAL_HSEM_FastTake+0x18>)
 8008b86:	1ac0      	subs	r0, r0, r3
 8008b88:	bf18      	it	ne
 8008b8a:	2001      	movne	r0, #1
 8008b8c:	4770      	bx	lr
 8008b8e:	bf00      	nop
 8008b90:	58026400 	.word	0x58026400
 8008b94:	80000300 	.word	0x80000300

08008b98 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8008b98:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8008b9c:	4b01      	ldr	r3, [pc, #4]	@ (8008ba4 <HAL_HSEM_Release+0xc>)
 8008b9e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8008ba2:	4770      	bx	lr
 8008ba4:	58026400 	.word	0x58026400

08008ba8 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8008ba8:	6803      	ldr	r3, [r0, #0]
 8008baa:	699a      	ldr	r2, [r3, #24]
 8008bac:	0791      	lsls	r1, r2, #30
 8008bae:	d501      	bpl.n	8008bb4 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8008bb0:	2200      	movs	r2, #0
 8008bb2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008bb4:	699a      	ldr	r2, [r3, #24]
 8008bb6:	07d2      	lsls	r2, r2, #31
 8008bb8:	d403      	bmi.n	8008bc2 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008bba:	699a      	ldr	r2, [r3, #24]
 8008bbc:	f042 0201 	orr.w	r2, r2, #1
 8008bc0:	619a      	str	r2, [r3, #24]
  }
}
 8008bc2:	4770      	bx	lr

08008bc4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008bc4:	b530      	push	{r4, r5, lr}
 8008bc6:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bc8:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bcc:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bce:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bd0:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bd2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bd6:	4a05      	ldr	r2, [pc, #20]	@ (8008bec <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bd8:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8008bda:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008bde:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8008be2:	ea20 0002 	bic.w	r0, r0, r2
 8008be6:	4303      	orrs	r3, r0
 8008be8:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008bea:	bd30      	pop	{r4, r5, pc}
 8008bec:	03ff63ff 	.word	0x03ff63ff

08008bf0 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bf0:	6803      	ldr	r3, [r0, #0]
{
 8008bf2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8008bf6:	699c      	ldr	r4, [r3, #24]
{
 8008bf8:	4605      	mov	r5, r0
 8008bfa:	460f      	mov	r7, r1
 8008bfc:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8008bfe:	f014 0410 	ands.w	r4, r4, #16
 8008c02:	d06f      	beq.n	8008ce4 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8008c04:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c06:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8008c08:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008c0a:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8008c0c:	682b      	ldr	r3, [r5, #0]
 8008c0e:	699a      	ldr	r2, [r3, #24]
 8008c10:	0690      	lsls	r0, r2, #26
 8008c12:	d461      	bmi.n	8008cd8 <I2C_IsErrorOccurred+0xe8>
 8008c14:	f1b8 0f00 	cmp.w	r8, #0
 8008c18:	d035      	beq.n	8008c86 <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8008c1a:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8008c1e:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8008c20:	682e      	ldr	r6, [r5, #0]
 8008c22:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8008c24:	05d9      	lsls	r1, r3, #23
 8008c26:	d505      	bpl.n	8008c34 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c28:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8008c2c:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8008c30:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8008c32:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8008c34:	055a      	lsls	r2, r3, #21
 8008c36:	d505      	bpl.n	8008c44 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c38:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8008c3c:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8008c40:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8008c42:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8008c44:	059b      	lsls	r3, r3, #22
 8008c46:	d54f      	bpl.n	8008ce8 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c48:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8008c4c:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8008c50:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8008c52:	4628      	mov	r0, r5
 8008c54:	f7ff ffa8 	bl	8008ba8 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8008c58:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8008c5a:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8008c5c:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8008c60:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8008c64:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8008c68:	f023 0301 	bic.w	r3, r3, #1
 8008c6c:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8008c6e:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8008c70:	4323      	orrs	r3, r4
 8008c72:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8008c74:	2320      	movs	r3, #32
 8008c76:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8008c7a:	2300      	movs	r3, #0
 8008c7c:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8008c80:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8008c84:	e032      	b.n	8008cec <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8008c86:	1c7a      	adds	r2, r7, #1
 8008c88:	d0c1      	beq.n	8008c0e <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8008c8a:	f7fe fd23 	bl	80076d4 <HAL_GetTick>
 8008c8e:	1b80      	subs	r0, r0, r6
 8008c90:	42b8      	cmp	r0, r7
 8008c92:	d801      	bhi.n	8008c98 <I2C_IsErrorOccurred+0xa8>
 8008c94:	2f00      	cmp	r7, #0
 8008c96:	d1b9      	bne.n	8008c0c <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8008c98:	682b      	ldr	r3, [r5, #0]
 8008c9a:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8008c9c:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ca0:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8008ca2:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8008ca4:	0400      	lsls	r0, r0, #16
 8008ca6:	d50a      	bpl.n	8008cbe <I2C_IsErrorOccurred+0xce>
 8008ca8:	0449      	lsls	r1, r1, #17
 8008caa:	d408      	bmi.n	8008cbe <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8008cac:	2a20      	cmp	r2, #32
 8008cae:	d006      	beq.n	8008cbe <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8008cb0:	685a      	ldr	r2, [r3, #4]
 8008cb2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008cb6:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8008cb8:	f7fe fd0c 	bl	80076d4 <HAL_GetTick>
 8008cbc:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008cbe:	682b      	ldr	r3, [r5, #0]
 8008cc0:	699b      	ldr	r3, [r3, #24]
 8008cc2:	069b      	lsls	r3, r3, #26
 8008cc4:	d4a2      	bmi.n	8008c0c <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8008cc6:	f7fe fd05 	bl	80076d4 <HAL_GetTick>
 8008cca:	1b80      	subs	r0, r0, r6
 8008ccc:	2819      	cmp	r0, #25
 8008cce:	d9f6      	bls.n	8008cbe <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8008cd0:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8008cd2:	f04f 0801 	mov.w	r8, #1
 8008cd6:	e799      	b.n	8008c0c <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8008cd8:	f1b8 0f00 	cmp.w	r8, #0
 8008cdc:	d19d      	bne.n	8008c1a <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008cde:	2220      	movs	r2, #32
 8008ce0:	61da      	str	r2, [r3, #28]
 8008ce2:	e79a      	b.n	8008c1a <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8008ce4:	4620      	mov	r0, r4
 8008ce6:	e79b      	b.n	8008c20 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8008ce8:	2800      	cmp	r0, #0
 8008cea:	d1b2      	bne.n	8008c52 <I2C_IsErrorOccurred+0x62>
}
 8008cec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008cf0 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8008cf0:	b570      	push	{r4, r5, r6, lr}
 8008cf2:	4604      	mov	r4, r0
 8008cf4:	460d      	mov	r5, r1
 8008cf6:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8008cf8:	6823      	ldr	r3, [r4, #0]
 8008cfa:	699b      	ldr	r3, [r3, #24]
 8008cfc:	079b      	lsls	r3, r3, #30
 8008cfe:	d501      	bpl.n	8008d04 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8008d00:	2000      	movs	r0, #0
 8008d02:	e01f      	b.n	8008d44 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d04:	4632      	mov	r2, r6
 8008d06:	4629      	mov	r1, r5
 8008d08:	4620      	mov	r0, r4
 8008d0a:	f7ff ff71 	bl	8008bf0 <I2C_IsErrorOccurred>
 8008d0e:	b9c0      	cbnz	r0, 8008d42 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8008d10:	1c6a      	adds	r2, r5, #1
 8008d12:	d0f1      	beq.n	8008cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d14:	f7fe fcde 	bl	80076d4 <HAL_GetTick>
 8008d18:	1b80      	subs	r0, r0, r6
 8008d1a:	42a8      	cmp	r0, r5
 8008d1c:	d801      	bhi.n	8008d22 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8008d1e:	2d00      	cmp	r5, #0
 8008d20:	d1ea      	bne.n	8008cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8008d22:	6823      	ldr	r3, [r4, #0]
 8008d24:	699b      	ldr	r3, [r3, #24]
 8008d26:	f013 0302 	ands.w	r3, r3, #2
 8008d2a:	d1e5      	bne.n	8008cf8 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d2c:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8008d2e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d32:	f042 0220 	orr.w	r2, r2, #32
 8008d36:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008d38:	2220      	movs	r2, #32
 8008d3a:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008d3e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008d42:	2001      	movs	r0, #1
}
 8008d44:	bd70      	pop	{r4, r5, r6, pc}

08008d46 <I2C_WaitOnFlagUntilTimeout>:
{
 8008d46:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d4a:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8008d4e:	4604      	mov	r4, r0
 8008d50:	460f      	mov	r7, r1
 8008d52:	4616      	mov	r6, r2
 8008d54:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8008d56:	6823      	ldr	r3, [r4, #0]
 8008d58:	699b      	ldr	r3, [r3, #24]
 8008d5a:	ea37 0303 	bics.w	r3, r7, r3
 8008d5e:	bf0c      	ite	eq
 8008d60:	2301      	moveq	r3, #1
 8008d62:	2300      	movne	r3, #0
 8008d64:	42b3      	cmp	r3, r6
 8008d66:	d001      	beq.n	8008d6c <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8008d68:	2000      	movs	r0, #0
 8008d6a:	e025      	b.n	8008db8 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008d6c:	4642      	mov	r2, r8
 8008d6e:	4629      	mov	r1, r5
 8008d70:	4620      	mov	r0, r4
 8008d72:	f7ff ff3d 	bl	8008bf0 <I2C_IsErrorOccurred>
 8008d76:	b9f0      	cbnz	r0, 8008db6 <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8008d78:	1c6b      	adds	r3, r5, #1
 8008d7a:	d0ec      	beq.n	8008d56 <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d7c:	f7fe fcaa 	bl	80076d4 <HAL_GetTick>
 8008d80:	eba0 0008 	sub.w	r0, r0, r8
 8008d84:	42a8      	cmp	r0, r5
 8008d86:	d801      	bhi.n	8008d8c <I2C_WaitOnFlagUntilTimeout+0x46>
 8008d88:	2d00      	cmp	r5, #0
 8008d8a:	d1e4      	bne.n	8008d56 <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8008d8c:	6823      	ldr	r3, [r4, #0]
 8008d8e:	699b      	ldr	r3, [r3, #24]
 8008d90:	ea37 0303 	bics.w	r3, r7, r3
 8008d94:	bf0c      	ite	eq
 8008d96:	2301      	moveq	r3, #1
 8008d98:	2300      	movne	r3, #0
 8008d9a:	42b3      	cmp	r3, r6
 8008d9c:	d1db      	bne.n	8008d56 <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008d9e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8008da0:	f043 0320 	orr.w	r3, r3, #32
 8008da4:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8008da6:	2320      	movs	r3, #32
 8008da8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8008dac:	2300      	movs	r3, #0
 8008dae:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8008db2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008db6:	2001      	movs	r0, #1
}
 8008db8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008dbc <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8008dbc:	b570      	push	{r4, r5, r6, lr}
 8008dbe:	4604      	mov	r4, r0
 8008dc0:	460d      	mov	r5, r1
 8008dc2:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8008dc4:	6823      	ldr	r3, [r4, #0]
 8008dc6:	699b      	ldr	r3, [r3, #24]
 8008dc8:	069b      	lsls	r3, r3, #26
 8008dca:	d501      	bpl.n	8008dd0 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8008dcc:	2000      	movs	r0, #0
 8008dce:	e01d      	b.n	8008e0c <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8008dd0:	4632      	mov	r2, r6
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	f7ff ff0b 	bl	8008bf0 <I2C_IsErrorOccurred>
 8008dda:	b9b0      	cbnz	r0, 8008e0a <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008ddc:	f7fe fc7a 	bl	80076d4 <HAL_GetTick>
 8008de0:	1b80      	subs	r0, r0, r6
 8008de2:	42a8      	cmp	r0, r5
 8008de4:	d801      	bhi.n	8008dea <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8008de6:	2d00      	cmp	r5, #0
 8008de8:	d1ec      	bne.n	8008dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8008dea:	6823      	ldr	r3, [r4, #0]
 8008dec:	699b      	ldr	r3, [r3, #24]
 8008dee:	f013 0320 	ands.w	r3, r3, #32
 8008df2:	d1e7      	bne.n	8008dc4 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008df4:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8008df6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8008dfa:	f042 0220 	orr.w	r2, r2, #32
 8008dfe:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8008e00:	2220      	movs	r2, #32
 8008e02:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8008e06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8008e0a:	2001      	movs	r0, #1
}
 8008e0c:	bd70      	pop	{r4, r5, r6, pc}

08008e0e <HAL_I2C_MspInit>:
}
 8008e0e:	4770      	bx	lr

08008e10 <HAL_I2C_Init>:
{
 8008e10:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008e12:	4604      	mov	r4, r0
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d04e      	beq.n	8008eb6 <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8008e18:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8008e1c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008e20:	b91b      	cbnz	r3, 8008e2a <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8008e22:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8008e26:	f7ff fff2 	bl	8008e0e <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008e2a:	2324      	movs	r3, #36	@ 0x24
 8008e2c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	681a      	ldr	r2, [r3, #0]
 8008e34:	f022 0201 	bic.w	r2, r2, #1
 8008e38:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8008e3a:	6862      	ldr	r2, [r4, #4]
 8008e3c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8008e40:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8008e42:	689a      	ldr	r2, [r3, #8]
 8008e44:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e48:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e4a:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8008e4e:	2901      	cmp	r1, #1
 8008e50:	d106      	bne.n	8008e60 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8008e52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e56:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e58:	685a      	ldr	r2, [r3, #4]
 8008e5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8008e5e:	e007      	b.n	8008e70 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e60:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e64:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8008e66:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8008e68:	d1f6      	bne.n	8008e58 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e6a:	685a      	ldr	r2, [r3, #4]
 8008e6c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8008e70:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008e72:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8008e74:	685a      	ldr	r2, [r3, #4]
 8008e76:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8008e7a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008e7e:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8008e80:	68da      	ldr	r2, [r3, #12]
 8008e82:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8008e86:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e88:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8008e8c:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8008e8e:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8008e90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8008e94:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8008e96:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8008e9a:	430a      	orrs	r2, r1
 8008e9c:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8008e9e:	681a      	ldr	r2, [r3, #0]
 8008ea0:	f042 0201 	orr.w	r2, r2, #1
 8008ea4:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8008ea6:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ea8:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8008eaa:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008eae:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008eb0:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008eb4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7fc      	b.n	8008eb4 <HAL_I2C_Init+0xa4>

08008eba <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8008eba:	4770      	bx	lr

08008ebc <HAL_I2C_DeInit>:
{
 8008ebc:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8008ebe:	4604      	mov	r4, r0
 8008ec0:	b198      	cbz	r0, 8008eea <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8008ec2:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8008ec4:	2324      	movs	r3, #36	@ 0x24
 8008ec6:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8008eca:	6813      	ldr	r3, [r2, #0]
 8008ecc:	f023 0301 	bic.w	r3, r3, #1
 8008ed0:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8008ed2:	f7ff fff2 	bl	8008eba <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008ed6:	2000      	movs	r0, #0
 8008ed8:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8008eda:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8008ede:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8008ee2:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8008ee4:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8008ee8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8008eea:	2001      	movs	r0, #1
 8008eec:	e7fc      	b.n	8008ee8 <HAL_I2C_DeInit+0x2c>
	...

08008ef0 <HAL_I2C_Mem_Write>:
{
 8008ef0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ef4:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008ef6:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008efa:	4604      	mov	r4, r0
 8008efc:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008efe:	2b20      	cmp	r3, #32
{
 8008f00:	4616      	mov	r6, r2
 8008f02:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8008f06:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008f0a:	f040 80c6 	bne.w	800909a <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8008f0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008f10:	b113      	cbz	r3, 8008f18 <HAL_I2C_Mem_Write+0x28>
 8008f12:	f1ba 0f00 	cmp.w	sl, #0
 8008f16:	d106      	bne.n	8008f26 <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008f18:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008f1c:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008f1e:	2001      	movs	r0, #1
}
 8008f20:	b003      	add	sp, #12
 8008f22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8008f26:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008f2a:	2b01      	cmp	r3, #1
 8008f2c:	f000 80b5 	beq.w	800909a <HAL_I2C_Mem_Write+0x1aa>
 8008f30:	f04f 0b01 	mov.w	fp, #1
 8008f34:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008f38:	f7fe fbcc 	bl	80076d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f3c:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8008f3e:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008f40:	9000      	str	r0, [sp, #0]
 8008f42:	465a      	mov	r2, fp
 8008f44:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8008f48:	4620      	mov	r0, r4
 8008f4a:	f7ff fefc 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 8008f4e:	2800      	cmp	r0, #0
 8008f50:	d1e5      	bne.n	8008f1e <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f52:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8008f54:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f56:	fa5f f289 	uxtb.w	r2, r9
 8008f5a:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8008f5c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8008f60:	2340      	movs	r3, #64	@ 0x40
 8008f62:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8008f66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8008f68:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f6a:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8008f6c:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f6e:	4b4c      	ldr	r3, [pc, #304]	@ (80090a0 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8008f70:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8008f74:	9300      	str	r3, [sp, #0]
 8008f76:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8008f7a:	f7ff fe23 	bl	8008bc4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008f7e:	462a      	mov	r2, r5
 8008f80:	4641      	mov	r1, r8
 8008f82:	4620      	mov	r0, r4
 8008f84:	f7ff feb4 	bl	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008f88:	bb18      	cbnz	r0, 8008fd2 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f8a:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f8e:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8008f90:	d115      	bne.n	8008fbe <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f92:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008f94:	2200      	movs	r2, #0
 8008f96:	2180      	movs	r1, #128	@ 0x80
 8008f98:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008f9a:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8008f9c:	4643      	mov	r3, r8
 8008f9e:	9500      	str	r5, [sp, #0]
 8008fa0:	f7ff fed1 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 8008fa4:	b9a8      	cbnz	r0, 8008fd2 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8008fa6:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2bff      	cmp	r3, #255	@ 0xff
 8008fac:	d815      	bhi.n	8008fda <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008fae:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fb0:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8008fb4:	b292      	uxth	r2, r2
 8008fb6:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fb8:	b2d2      	uxtb	r2, r2
 8008fba:	9000      	str	r0, [sp, #0]
 8008fbc:	e012      	b.n	8008fe4 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fbe:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fc0:	4641      	mov	r1, r8
 8008fc2:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008fc4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008fc6:	462a      	mov	r2, r5
 8008fc8:	f7ff fe92 	bl	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008fcc:	b908      	cbnz	r0, 8008fd2 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008fce:	6823      	ldr	r3, [r4, #0]
 8008fd0:	e7df      	b.n	8008f92 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8008fd2:	2300      	movs	r3, #0
 8008fd4:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008fd8:	e7a1      	b.n	8008f1e <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fda:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fdc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008fe0:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8008fe2:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8008fe4:	4639      	mov	r1, r7
 8008fe6:	4620      	mov	r0, r4
 8008fe8:	f7ff fdec 	bl	8008bc4 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8008fec:	462a      	mov	r2, r5
 8008fee:	4641      	mov	r1, r8
 8008ff0:	4620      	mov	r0, r4
 8008ff2:	f7ff fe7d 	bl	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8008ff6:	2800      	cmp	r0, #0
 8008ff8:	d191      	bne.n	8008f1e <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8008ffa:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008ffc:	6822      	ldr	r2, [r4, #0]
 8008ffe:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009002:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8009004:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8009006:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009008:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 800900a:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800900c:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 800900e:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8009010:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8009012:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009014:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8009016:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8009018:	b29b      	uxth	r3, r3
 800901a:	b1b3      	cbz	r3, 800904a <HAL_I2C_Mem_Write+0x15a>
 800901c:	b9aa      	cbnz	r2, 800904a <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800901e:	4643      	mov	r3, r8
 8009020:	2180      	movs	r1, #128	@ 0x80
 8009022:	4620      	mov	r0, r4
 8009024:	9500      	str	r5, [sp, #0]
 8009026:	f7ff fe8e 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 800902a:	2800      	cmp	r0, #0
 800902c:	f47f af77 	bne.w	8008f1e <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009030:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009032:	b29b      	uxth	r3, r3
 8009034:	2bff      	cmp	r3, #255	@ 0xff
 8009036:	d928      	bls.n	800908a <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8009038:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800903a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800903e:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009040:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009042:	4639      	mov	r1, r7
 8009044:	4620      	mov	r0, r4
 8009046:	f7ff fdbd 	bl	8008bc4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 800904a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800904c:	b29b      	uxth	r3, r3
 800904e:	2b00      	cmp	r3, #0
 8009050:	d1cc      	bne.n	8008fec <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8009052:	462a      	mov	r2, r5
 8009054:	4641      	mov	r1, r8
 8009056:	4620      	mov	r0, r4
 8009058:	f7ff feb0 	bl	8008dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 800905c:	2800      	cmp	r0, #0
 800905e:	f47f af5e 	bne.w	8008f1e <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8009062:	6823      	ldr	r3, [r4, #0]
 8009064:	2120      	movs	r1, #32
 8009066:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009068:	685a      	ldr	r2, [r3, #4]
 800906a:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 800906e:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8009072:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009076:	f022 0201 	bic.w	r2, r2, #1
 800907a:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 800907c:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8009080:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8009084:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009088:	e74a      	b.n	8008f20 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800908a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800908c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8009090:	b292      	uxth	r2, r2
 8009092:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009094:	b2d2      	uxtb	r2, r2
 8009096:	9000      	str	r0, [sp, #0]
 8009098:	e7d3      	b.n	8009042 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800909a:	2002      	movs	r0, #2
 800909c:	e740      	b.n	8008f20 <HAL_I2C_Mem_Write+0x30>
 800909e:	bf00      	nop
 80090a0:	80002000 	.word	0x80002000

080090a4 <HAL_I2C_Mem_Read>:
{
 80090a4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090a8:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090aa:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 80090ae:	4604      	mov	r4, r0
 80090b0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090b2:	2b20      	cmp	r3, #32
{
 80090b4:	4616      	mov	r6, r2
 80090b6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 80090ba:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 80090be:	f040 80c9 	bne.w	8009254 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 80090c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090c4:	b113      	cbz	r3, 80090cc <HAL_I2C_Mem_Read+0x28>
 80090c6:	f1ba 0f00 	cmp.w	sl, #0
 80090ca:	d106      	bne.n	80090da <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 80090cc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80090d0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 80090d2:	2001      	movs	r0, #1
}
 80090d4:	b003      	add	sp, #12
 80090d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 80090da:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 80090de:	2b01      	cmp	r3, #1
 80090e0:	f000 80b8 	beq.w	8009254 <HAL_I2C_Mem_Read+0x1b0>
 80090e4:	f04f 0b01 	mov.w	fp, #1
 80090e8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 80090ec:	f7fe faf2 	bl	80076d4 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090f0:	2319      	movs	r3, #25
 80090f2:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 80090f4:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 80090f6:	465a      	mov	r2, fp
 80090f8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80090fc:	4620      	mov	r0, r4
 80090fe:	f7ff fe22 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 8009102:	4603      	mov	r3, r0
 8009104:	2800      	cmp	r0, #0
 8009106:	d1e4      	bne.n	80090d2 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8009108:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 800910a:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800910c:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800910e:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8009112:	2240      	movs	r2, #64	@ 0x40
 8009114:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8009118:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800911a:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800911c:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 800911e:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009120:	4a4d      	ldr	r2, [pc, #308]	@ (8009258 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8009122:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8009126:	9200      	str	r2, [sp, #0]
 8009128:	fa5f f289 	uxtb.w	r2, r9
 800912c:	f7ff fd4a 	bl	8008bc4 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009130:	462a      	mov	r2, r5
 8009132:	4641      	mov	r1, r8
 8009134:	4620      	mov	r0, r4
 8009136:	f7ff fddb 	bl	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 800913a:	bb20      	cbnz	r0, 8009186 <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800913c:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009140:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8009142:	d116      	bne.n	8009172 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009144:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8009146:	2200      	movs	r2, #0
 8009148:	2140      	movs	r1, #64	@ 0x40
 800914a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800914c:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800914e:	4643      	mov	r3, r8
 8009150:	9500      	str	r5, [sp, #0]
 8009152:	f7ff fdf8 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 8009156:	b9b0      	cbnz	r0, 8009186 <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8009158:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800915a:	b29b      	uxth	r3, r3
 800915c:	2bff      	cmp	r3, #255	@ 0xff
 800915e:	4b3f      	ldr	r3, [pc, #252]	@ (800925c <HAL_I2C_Mem_Read+0x1b8>)
 8009160:	d815      	bhi.n	800918e <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8009162:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8009164:	b292      	uxth	r2, r2
 8009166:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009168:	b2d2      	uxtb	r2, r2
 800916a:	9300      	str	r3, [sp, #0]
 800916c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8009170:	e012      	b.n	8009198 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009172:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8009174:	4641      	mov	r1, r8
 8009176:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8009178:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800917a:	462a      	mov	r2, r5
 800917c:	f7ff fdb8 	bl	8008cf0 <I2C_WaitOnTXISFlagUntilTimeout>
 8009180:	b908      	cbnz	r0, 8009186 <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8009182:	6823      	ldr	r3, [r4, #0]
 8009184:	e7de      	b.n	8009144 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8009186:	2300      	movs	r3, #0
 8009188:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800918c:	e7a1      	b.n	80090d2 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800918e:	22ff      	movs	r2, #255	@ 0xff
 8009190:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8009192:	9300      	str	r3, [sp, #0]
 8009194:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009198:	4639      	mov	r1, r7
 800919a:	4620      	mov	r0, r4
 800919c:	f7ff fd12 	bl	8008bc4 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 80091a0:	4643      	mov	r3, r8
 80091a2:	2200      	movs	r2, #0
 80091a4:	2104      	movs	r1, #4
 80091a6:	4620      	mov	r0, r4
 80091a8:	9500      	str	r5, [sp, #0]
 80091aa:	f7ff fdcc 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 80091ae:	2800      	cmp	r0, #0
 80091b0:	d18f      	bne.n	80090d2 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80091b2:	6823      	ldr	r3, [r4, #0]
 80091b4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80091b6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80091b8:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 80091ba:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 80091bc:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 80091be:	3301      	adds	r3, #1
      hi2c->XferSize--;
 80091c0:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 80091c2:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 80091c4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 80091c6:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 80091c8:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 80091ca:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 80091cc:	b29b      	uxth	r3, r3
 80091ce:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80091d0:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80091d2:	b29b      	uxth	r3, r3
 80091d4:	b1b3      	cbz	r3, 8009204 <HAL_I2C_Mem_Read+0x160>
 80091d6:	b9aa      	cbnz	r2, 8009204 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80091d8:	4643      	mov	r3, r8
 80091da:	2180      	movs	r1, #128	@ 0x80
 80091dc:	4620      	mov	r0, r4
 80091de:	9500      	str	r5, [sp, #0]
 80091e0:	f7ff fdb1 	bl	8008d46 <I2C_WaitOnFlagUntilTimeout>
 80091e4:	2800      	cmp	r0, #0
 80091e6:	f47f af74 	bne.w	80090d2 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80091ea:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80091ec:	b29b      	uxth	r3, r3
 80091ee:	2bff      	cmp	r3, #255	@ 0xff
 80091f0:	d928      	bls.n	8009244 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091f2:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80091f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80091f8:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80091fa:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80091fc:	4639      	mov	r1, r7
 80091fe:	4620      	mov	r0, r4
 8009200:	f7ff fce0 	bl	8008bc4 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8009204:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8009206:	b29b      	uxth	r3, r3
 8009208:	2b00      	cmp	r3, #0
 800920a:	d1c9      	bne.n	80091a0 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800920c:	462a      	mov	r2, r5
 800920e:	4641      	mov	r1, r8
 8009210:	4620      	mov	r0, r4
 8009212:	f7ff fdd3 	bl	8008dbc <I2C_WaitOnSTOPFlagUntilTimeout>
 8009216:	2800      	cmp	r0, #0
 8009218:	f47f af5b 	bne.w	80090d2 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800921c:	6823      	ldr	r3, [r4, #0]
 800921e:	2120      	movs	r1, #32
 8009220:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8009222:	685a      	ldr	r2, [r3, #4]
 8009224:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8009228:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 800922c:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8009230:	f022 0201 	bic.w	r2, r2, #1
 8009234:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8009236:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800923a:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800923e:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8009242:	e747      	b.n	80090d4 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8009244:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8009246:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 800924a:	b292      	uxth	r2, r2
 800924c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800924e:	b2d2      	uxtb	r2, r2
 8009250:	9000      	str	r0, [sp, #0]
 8009252:	e7d3      	b.n	80091fc <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8009254:	2002      	movs	r0, #2
 8009256:	e73d      	b.n	80090d4 <HAL_I2C_Mem_Read+0x30>
 8009258:	80002000 	.word	0x80002000
 800925c:	80002400 	.word	0x80002400

08009260 <HAL_I2C_GetState>:
  return hi2c->State;
 8009260:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8009264:	4770      	bx	lr

08009266 <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8009266:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8009268:	4770      	bx	lr

0800926a <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800926a:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800926c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8009270:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8009272:	2a20      	cmp	r2, #32
 8009274:	b2d4      	uxtb	r4, r2
 8009276:	d11c      	bne.n	80092b2 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8009278:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800927c:	2a01      	cmp	r2, #1
 800927e:	d018      	beq.n	80092b2 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8009280:	2224      	movs	r2, #36	@ 0x24
 8009282:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8009286:	6802      	ldr	r2, [r0, #0]
 8009288:	6810      	ldr	r0, [r2, #0]
 800928a:	f020 0001 	bic.w	r0, r0, #1
 800928e:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8009290:	6810      	ldr	r0, [r2, #0]
 8009292:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8009296:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8009298:	6810      	ldr	r0, [r2, #0]
 800929a:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800929c:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 800929e:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80092a0:	6811      	ldr	r1, [r2, #0]
 80092a2:	f041 0101 	orr.w	r1, r1, #1
 80092a6:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80092a8:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80092ac:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80092b0:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80092b2:	2002      	movs	r0, #2
 80092b4:	e7fc      	b.n	80092b0 <HAL_I2CEx_ConfigAnalogFilter+0x46>

080092b6 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80092b6:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80092b8:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 80092bc:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 80092be:	2a20      	cmp	r2, #32
 80092c0:	b2d4      	uxtb	r4, r2
 80092c2:	d11b      	bne.n	80092fc <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80092c4:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 80092c8:	2a01      	cmp	r2, #1
 80092ca:	d017      	beq.n	80092fc <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 80092cc:	2224      	movs	r2, #36	@ 0x24
 80092ce:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80092d2:	6802      	ldr	r2, [r0, #0]
 80092d4:	6810      	ldr	r0, [r2, #0]
 80092d6:	f020 0001 	bic.w	r0, r0, #1
 80092da:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80092dc:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80092de:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80092e2:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80092e6:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 80092e8:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 80092ea:	6811      	ldr	r1, [r2, #0]
 80092ec:	f041 0101 	orr.w	r1, r1, #1
 80092f0:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 80092f2:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80092f6:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 80092fa:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80092fc:	2002      	movs	r0, #2
 80092fe:	e7fc      	b.n	80092fa <HAL_I2CEx_ConfigDigitalFilter+0x44>

08009300 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8009300:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8009302:	2401      	movs	r4, #1
 8009304:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8009306:	2500      	movs	r5, #0
 8009308:	194e      	adds	r6, r1, r5
 800930a:	443d      	add	r5, r7
 800930c:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 800930e:	42be      	cmp	r6, r7
 8009310:	d112      	bne.n	8009338 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8009312:	2c10      	cmp	r4, #16
 8009314:	d108      	bne.n	8009328 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8009316:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009318:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 800931a:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 800931c:	601d      	str	r5, [r3, #0]
  p = 0;
 800931e:	4623      	mov	r3, r4
  si = Huffsize[0];
 8009320:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8009322:	5cc8      	ldrb	r0, [r1, r3]
 8009324:	b9d8      	cbnz	r0, 800935e <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8009326:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8009328:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 800932a:	3401      	adds	r4, #1
 800932c:	19ee      	adds	r6, r5, r7
 800932e:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8009332:	d9e9      	bls.n	8009308 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8009334:	2001      	movs	r0, #1
 8009336:	e7f6      	b.n	8009326 <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8009338:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 800933c:	e7e7      	b.n	800930e <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 800933e:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8009342:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8009344:	5cc8      	ldrb	r0, [r1, r3]
 8009346:	19dc      	adds	r4, r3, r7
 8009348:	42a8      	cmp	r0, r5
 800934a:	d0f8      	beq.n	800933e <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 800934c:	2d1f      	cmp	r5, #31
 800934e:	d8f1      	bhi.n	8009334 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8009350:	fa06 f005 	lsl.w	r0, r6, r5
 8009354:	42a0      	cmp	r0, r4
 8009356:	d9ed      	bls.n	8009334 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8009358:	0064      	lsls	r4, r4, #1
    si++;
 800935a:	3501      	adds	r5, #1
 800935c:	e7e1      	b.n	8009322 <JPEG_Bits_To_SizeCodes+0x22>
 800935e:	1ae7      	subs	r7, r4, r3
 8009360:	e7f0      	b.n	8009344 <JPEG_Bits_To_SizeCodes+0x44>

08009362 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8009362:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009364:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8009368:	460d      	mov	r5, r1
 800936a:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 800936c:	ab01      	add	r3, sp, #4
 800936e:	aa43      	add	r2, sp, #268	@ 0x10c
 8009370:	a902      	add	r1, sp, #8
 8009372:	f7ff ffc5 	bl	8009300 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009376:	b938      	cbnz	r0, 8009388 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8009378:	9e01      	ldr	r6, [sp, #4]
 800937a:	460b      	mov	r3, r1
 800937c:	f104 010f 	add.w	r1, r4, #15
 8009380:	360f      	adds	r6, #15
 8009382:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8009384:	42a1      	cmp	r1, r4
 8009386:	d102      	bne.n	800938e <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8009388:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 800938c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 800938e:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8009392:	2e0b      	cmp	r6, #11
 8009394:	d80a      	bhi.n	80093ac <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8009396:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800939a:	f852 cb04 	ldr.w	ip, [r2], #4
 800939e:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80093a2:	f813 7b01 	ldrb.w	r7, [r3], #1
 80093a6:	3f01      	subs	r7, #1
 80093a8:	55af      	strb	r7, [r5, r6]
      k++;
 80093aa:	e7eb      	b.n	8009384 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 80093ac:	2001      	movs	r0, #1
 80093ae:	e7eb      	b.n	8009388 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

080093b0 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 80093b0:	4603      	mov	r3, r0
 80093b2:	4608      	mov	r0, r1
 80093b4:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80093b6:	681c      	ldr	r4, [r3, #0]
{
 80093b8:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 80093ba:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 80093be:	429a      	cmp	r2, r3
 80093c0:	d125      	bne.n	800940e <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80093c2:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 80093c6:	a901      	add	r1, sp, #4
 80093c8:	f7ff ffcb 	bl	8009362 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 80093cc:	b9e8      	cbnz	r0, 800940a <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 80093ce:	aa01      	add	r2, sp, #4
 80093d0:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 80093d4:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 80093d8:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 80093da:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 80093dc:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093de:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 80093e0:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093e2:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 80093e6:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093e8:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093ea:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093ee:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 80093f2:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 80093f4:	7b13      	ldrb	r3, [r2, #12]
 80093f6:	021b      	lsls	r3, r3, #8
 80093f8:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80093fc:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80093fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009402:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8009406:	42b4      	cmp	r4, r6
 8009408:	d1e9      	bne.n	80093de <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800940a:	b011      	add	sp, #68	@ 0x44
 800940c:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 800940e:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8009412:	429a      	cmp	r2, r3
 8009414:	d102      	bne.n	800941c <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8009416:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 800941a:	e7d4      	b.n	80093c6 <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 800941c:	2001      	movs	r0, #1
 800941e:	e7f4      	b.n	800940a <JPEG_Set_HuffDC_Mem+0x5a>

08009420 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8009420:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8009424:	6804      	ldr	r4, [r0, #0]
{
 8009426:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 800942a:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 800942c:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8009430:	429a      	cmp	r2, r3
 8009432:	d149      	bne.n	80094c8 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8009434:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8009438:	466b      	mov	r3, sp
 800943a:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 800943e:	a901      	add	r1, sp, #4
 8009440:	4630      	mov	r0, r6
 8009442:	f7ff ff5d 	bl	8009300 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8009446:	2800      	cmp	r0, #0
 8009448:	d13a      	bne.n	80094c0 <JPEG_Set_HuffAC_Mem+0xa0>
 800944a:	9b00      	ldr	r3, [sp, #0]
 800944c:	460d      	mov	r5, r1
 800944e:	f106 0c0f 	add.w	ip, r6, #15
 8009452:	4617      	mov	r7, r2
 8009454:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 8009456:	f04f 0e0a 	mov.w	lr, #10
 800945a:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800945c:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 800945e:	4561      	cmp	r1, ip
 8009460:	d139      	bne.n	80094d6 <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8009462:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8009466:	a942      	add	r1, sp, #264	@ 0x108
 8009468:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 800946c:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 800946e:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8009470:	6063      	str	r3, [r4, #4]
 8009472:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8009474:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8009478:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 800947c:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 800947e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8009482:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8009484:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8009488:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800948a:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800948e:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009490:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8009494:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8009496:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800949a:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800949c:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800949e:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80094a2:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 80094a6:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 80094a8:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 80094ac:	021b      	lsls	r3, r3, #8
 80094ae:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80094b2:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80094b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80094b8:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80094bc:	42b4      	cmp	r4, r6
 80094be:	d1e7      	bne.n	8009490 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80094c0:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 80094c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80094c8:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80094cc:	429a      	cmp	r2, r3
 80094ce:	d10f      	bne.n	80094f0 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80094d0:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80094d4:	e7b0      	b.n	8009438 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80094d6:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80094da:	b15b      	cbz	r3, 80094f4 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80094dc:	2bf0      	cmp	r3, #240	@ 0xf0
 80094de:	d015      	beq.n	800950c <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80094e0:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80094e2:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80094e6:	3b01      	subs	r3, #1
 80094e8:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80094ec:	2ba1      	cmp	r3, #161	@ 0xa1
 80094ee:	d902      	bls.n	80094f6 <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80094f0:	2001      	movs	r0, #1
 80094f2:	e7e5      	b.n	80094c0 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80094f4:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80094f6:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80094fa:	f857 8b04 	ldr.w	r8, [r7], #4
 80094fe:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8009502:	f815 2b01 	ldrb.w	r2, [r5], #1
 8009506:	3a01      	subs	r2, #1
 8009508:	54f2      	strb	r2, [r6, r3]
      k++;
 800950a:	e7a8      	b.n	800945e <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 800950c:	23a1      	movs	r3, #161	@ 0xa1
 800950e:	e7f2      	b.n	80094f6 <JPEG_Set_HuffAC_Mem+0xd6>

08009510 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 8009510:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009512:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8009516:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009518:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 800951a:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800951c:	f002 0203 	and.w	r2, r2, #3
 8009520:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	bf0c      	ite	eq
 8009526:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 800952a:	f022 0208 	bicne.w	r2, r2, #8
 800952e:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009530:	681a      	ldr	r2, [r3, #0]
 8009532:	f022 0201 	bic.w	r2, r2, #1
 8009536:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009538:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800953a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800953e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8009540:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009542:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009546:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009548:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800954a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800954e:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009550:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009552:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009556:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8009558:	681a      	ldr	r2, [r3, #0]
 800955a:	f042 0201 	orr.w	r2, r2, #1
 800955e:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009560:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009562:	f002 020c 	and.w	r2, r2, #12
 8009566:	2a08      	cmp	r2, #8
 8009568:	d104      	bne.n	8009574 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800956a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800956c:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009570:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8009572:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009574:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8009576:	f002 020c 	and.w	r2, r2, #12
 800957a:	2a0c      	cmp	r2, #12
 800957c:	d1f9      	bne.n	8009572 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800957e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009580:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009584:	e7f4      	b.n	8009570 <JPEG_Init_Process+0x60>
	...

08009588 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8009588:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800958a:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 800958c:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800958e:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009590:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009592:	42aa      	cmp	r2, r5
 8009594:	d313      	bcc.n	80095be <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009596:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8009598:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800959a:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800959c:	428b      	cmp	r3, r1
 800959e:	d30e      	bcc.n	80095be <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 80095a0:	4f18      	ldr	r7, [pc, #96]	@ (8009604 <JPEG_DMA_StartProcess+0x7c>)
 80095a2:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 80095a4:	4f18      	ldr	r7, [pc, #96]	@ (8009608 <JPEG_DMA_StartProcess+0x80>)
 80095a6:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80095a8:	4e18      	ldr	r6, [pc, #96]	@ (800960c <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 80095aa:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 80095ac:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 80095ae:	4e18      	ldr	r6, [pc, #96]	@ (8009610 <JPEG_DMA_StartProcess+0x88>)
 80095b0:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 80095b2:	b105      	cbz	r5, 80095b6 <JPEG_DMA_StartProcess+0x2e>
 80095b4:	b931      	cbnz	r1, 80095c4 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 80095b6:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80095b8:	f043 0304 	orr.w	r3, r3, #4
 80095bc:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 80095be:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 80095c0:	b003      	add	sp, #12
 80095c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80095c4:	fbb2 f6f5 	udiv	r6, r2, r5
 80095c8:	fb05 2516 	mls	r5, r5, r6, r2
 80095cc:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80095ce:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80095d0:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80095d2:	fbb3 f2f1 	udiv	r2, r3, r1
 80095d6:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80095da:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80095dc:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80095de:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80095e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80095e2:	9500      	str	r5, [sp, #0]
 80095e4:	69e2      	ldr	r2, [r4, #28]
 80095e6:	f001 f82a 	bl	800a63e <HAL_MDMA_Start_IT>
 80095ea:	2800      	cmp	r0, #0
 80095ec:	d1e3      	bne.n	80095b6 <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80095ee:	6822      	ldr	r2, [r4, #0]
 80095f0:	9500      	str	r5, [sp, #0]
 80095f2:	3240      	adds	r2, #64	@ 0x40
 80095f4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80095f6:	69a1      	ldr	r1, [r4, #24]
 80095f8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80095fa:	f001 f820 	bl	800a63e <HAL_MDMA_Start_IT>
 80095fe:	2800      	cmp	r0, #0
 8009600:	d0de      	beq.n	80095c0 <JPEG_DMA_StartProcess+0x38>
 8009602:	e7d8      	b.n	80095b6 <JPEG_DMA_StartProcess+0x2e>
 8009604:	08009b4b 	.word	0x08009b4b
 8009608:	08009a43 	.word	0x08009a43
 800960c:	0800a009 	.word	0x0800a009
 8009610:	08009ffb 	.word	0x08009ffb

08009614 <HAL_JPEG_Init>:
{
 8009614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 8009616:	4605      	mov	r5, r0
 8009618:	2800      	cmp	r0, #0
 800961a:	f000 80f2 	beq.w	8009802 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 800961e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 8009622:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8009626:	b91b      	cbnz	r3, 8009630 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8009628:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 800962c:	f7f7 ff08 	bl	8001440 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8009630:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 8009632:	2302      	movs	r3, #2
 8009634:	4a86      	ldr	r2, [pc, #536]	@ (8009850 <HAL_JPEG_Init+0x23c>)
 8009636:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 800963a:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 800963e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009640:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 8009644:	f043 0301 	orr.w	r3, r3, #1
 8009648:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800964a:	6823      	ldr	r3, [r4, #0]
 800964c:	f023 0301 	bic.w	r3, r3, #1
 8009650:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009652:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009654:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009658:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 800965a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800965c:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8009660:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8009662:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009664:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8009668:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800966a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800966c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009670:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8009672:	4b78      	ldr	r3, [pc, #480]	@ (8009854 <HAL_JPEG_Init+0x240>)
 8009674:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 8009676:	4b78      	ldr	r3, [pc, #480]	@ (8009858 <HAL_JPEG_Init+0x244>)
 8009678:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800967a:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 800967c:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009680:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8009682:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009684:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8009686:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009688:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 800968c:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 800968e:	4333      	orrs	r3, r6
 8009690:	7c56      	ldrb	r6, [r2, #17]
 8009692:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8009696:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800969a:	4281      	cmp	r1, r0
 800969c:	d1f0      	bne.n	8009680 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800969e:	4b6f      	ldr	r3, [pc, #444]	@ (800985c <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80096a0:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 80096a4:	4a6e      	ldr	r2, [pc, #440]	@ (8009860 <HAL_JPEG_Init+0x24c>)
 80096a6:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80096aa:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 80096ae:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 80096b2:	4610      	mov	r0, r2
 80096b4:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80096b6:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 80096ba:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 80096be:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80096c2:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 80096c4:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80096c6:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80096ca:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80096cc:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80096d0:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80096d4:	ea43 030c 	orr.w	r3, r3, ip
 80096d8:	f890 c011 	ldrb.w	ip, [r0, #17]
 80096dc:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80096e0:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80096e4:	42be      	cmp	r6, r7
 80096e6:	d1ec      	bne.n	80096c2 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80096e8:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80096ec:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 80096f0:	0c1b      	lsrs	r3, r3, #16
 80096f2:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80096f4:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 80096f8:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 80096fc:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 8009700:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 8009704:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8009706:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 800970a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800970c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 8009710:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 8009714:	4333      	orrs	r3, r6
 8009716:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 800971a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800971e:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 8009722:	4281      	cmp	r1, r0
 8009724:	d1ec      	bne.n	8009700 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 8009726:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 800972a:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 800972e:	4a4d      	ldr	r2, [pc, #308]	@ (8009864 <HAL_JPEG_Init+0x250>)
 8009730:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 8009734:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 8009736:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 800973a:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 800973e:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8009742:	4013      	ands	r3, r2
  *address = value;
 8009744:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8009748:	2301      	movs	r3, #1
 800974a:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 800974e:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 8009752:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 8009756:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 800975a:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800975e:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8009760:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8009764:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8009768:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800976c:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 800976e:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8009772:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 8009776:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800977a:	4b3b      	ldr	r3, [pc, #236]	@ (8009868 <HAL_JPEG_Init+0x254>)
 800977c:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8009780:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8009784:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8009788:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 800978c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 800978e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8009792:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 8009796:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800979a:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 800979c:	4a33      	ldr	r2, [pc, #204]	@ (800986c <HAL_JPEG_Init+0x258>)
 800979e:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 80097a2:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 80097a6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80097aa:	4b31      	ldr	r3, [pc, #196]	@ (8009870 <HAL_JPEG_Init+0x25c>)
 80097ac:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 80097b0:	4b30      	ldr	r3, [pc, #192]	@ (8009874 <HAL_JPEG_Init+0x260>)
 80097b2:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 80097b6:	4b30      	ldr	r3, [pc, #192]	@ (8009878 <HAL_JPEG_Init+0x264>)
 80097b8:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 80097bc:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 80097c0:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 80097c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 80097c6:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80097ca:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80097ce:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80097d0:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80097d4:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80097d6:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80097da:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80097de:	4333      	orrs	r3, r6
 80097e0:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80097e4:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80097e8:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80097ec:	4281      	cmp	r1, r0
 80097ee:	d1ec      	bne.n	80097ca <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80097f0:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80097f4:	491a      	ldr	r1, [pc, #104]	@ (8009860 <HAL_JPEG_Init+0x24c>)
 80097f6:	4628      	mov	r0, r5
 80097f8:	f7ff fe12 	bl	8009420 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80097fc:	b118      	cbz	r0, 8009806 <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80097fe:	2301      	movs	r3, #1
 8009800:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 8009802:	2001      	movs	r0, #1
}
 8009804:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 8009806:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 800980a:	4918      	ldr	r1, [pc, #96]	@ (800986c <HAL_JPEG_Init+0x258>)
 800980c:	4628      	mov	r0, r5
 800980e:	f7ff fe07 	bl	8009420 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 8009812:	2800      	cmp	r0, #0
 8009814:	d1f3      	bne.n	80097fe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 8009816:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 800981a:	490d      	ldr	r1, [pc, #52]	@ (8009850 <HAL_JPEG_Init+0x23c>)
 800981c:	4628      	mov	r0, r5
 800981e:	f7ff fdc7 	bl	80093b0 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 8009822:	2800      	cmp	r0, #0
 8009824:	d1eb      	bne.n	80097fe <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 8009826:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 800982a:	4914      	ldr	r1, [pc, #80]	@ (800987c <HAL_JPEG_Init+0x268>)
 800982c:	4628      	mov	r0, r5
 800982e:	f7ff fdbf 	bl	80093b0 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 8009832:	2800      	cmp	r0, #0
 8009834:	d1e3      	bne.n	80097fe <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 8009836:	6863      	ldr	r3, [r4, #4]
 8009838:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800983c:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 800983e:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8009840:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 8009842:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009844:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8009848:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 800984a:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 800984c:	e7da      	b.n	8009804 <HAL_JPEG_Init+0x1f0>
 800984e:	bf00      	nop
 8009850:	0802ab18 	.word	0x0802ab18
 8009854:	0802a918 	.word	0x0802a918
 8009858:	0802a8d8 	.word	0x0802a8d8
 800985c:	0b0a0908 	.word	0x0b0a0908
 8009860:	0802aa4a 	.word	0x0802aa4a
 8009864:	ffff0000 	.word	0xffff0000
 8009868:	09080706 	.word	0x09080706
 800986c:	0802a998 	.word	0x0802a998
 8009870:	01000404 	.word	0x01000404
 8009874:	05070403 	.word	0x05070403
 8009878:	04040201 	.word	0x04040201
 800987c:	0802aafc 	.word	0x0802aafc

08009880 <HAL_JPEG_GetInfo>:
{
 8009880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8009884:	2800      	cmp	r0, #0
 8009886:	d06f      	beq.n	8009968 <HAL_JPEG_GetInfo+0xe8>
 8009888:	2900      	cmp	r1, #0
 800988a:	d06d      	beq.n	8009968 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 800988c:	6804      	ldr	r4, [r0, #0]
 800988e:	6863      	ldr	r3, [r4, #4]
 8009890:	f003 0303 	and.w	r3, r3, #3
 8009894:	2b02      	cmp	r3, #2
 8009896:	d047      	beq.n	8009928 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8009898:	6863      	ldr	r3, [r4, #4]
 800989a:	f013 0303 	ands.w	r3, r3, #3
 800989e:	d005      	beq.n	80098ac <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 80098a0:	6863      	ldr	r3, [r4, #4]
 80098a2:	f003 0303 	and.w	r3, r3, #3
 80098a6:	2b03      	cmp	r3, #3
 80098a8:	d15e      	bne.n	8009968 <HAL_JPEG_GetInfo+0xe8>
 80098aa:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80098ac:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 80098ae:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80098b0:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80098b4:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80098b6:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 80098b8:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 80098ba:	68e2      	ldr	r2, [r4, #12]
 80098bc:	ea4f 4212 	mov.w	r2, r2, lsr #16
 80098c0:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 80098c2:	d13c      	bne.n	800993e <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80098c4:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80098c6:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80098c8:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80098cc:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80098ce:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80098d0:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80098d2:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80098d6:	d129      	bne.n	800992c <HAL_JPEG_GetInfo+0xac>
 80098d8:	4313      	orrs	r3, r2
 80098da:	f013 0f0f 	tst.w	r3, #15
 80098de:	bf0c      	ite	eq
 80098e0:	2301      	moveq	r3, #1
 80098e2:	2300      	movne	r3, #0
 80098e4:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80098e6:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80098e8:	2300      	movs	r3, #0
 80098ea:	3450      	adds	r4, #80	@ 0x50
 80098ec:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 800996c <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80098f0:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80098f2:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80098f6:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 80098fa:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80098fe:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 8009902:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 8009904:	fa29 f206 	lsr.w	r2, r9, r6
 8009908:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 800990a:	2a01      	cmp	r2, #1
 800990c:	d119      	bne.n	8009942 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 800990e:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 8009910:	3608      	adds	r6, #8
 8009912:	3701      	adds	r7, #1
 8009914:	2e20      	cmp	r6, #32
 8009916:	d1f5      	bne.n	8009904 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 8009918:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 800991a:	2d40      	cmp	r5, #64	@ 0x40
 800991c:	d1ed      	bne.n	80098fa <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 800991e:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 8009920:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 8009922:	610b      	str	r3, [r1, #16]
}
 8009924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009928:	2310      	movs	r3, #16
 800992a:	e7bf      	b.n	80098ac <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800992c:	2d03      	cmp	r5, #3
 800992e:	d106      	bne.n	800993e <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8009930:	4313      	orrs	r3, r2
 8009932:	f013 0f0f 	tst.w	r3, #15
 8009936:	bf0c      	ite	eq
 8009938:	2301      	moveq	r3, #1
 800993a:	2300      	movne	r3, #0
 800993c:	e7d3      	b.n	80098e6 <HAL_JPEG_GetInfo+0x66>
 800993e:	2300      	movs	r3, #0
 8009940:	e7d1      	b.n	80098e6 <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8009942:	fb0e fb02 	mul.w	fp, lr, r2
 8009946:	f897 a000 	ldrb.w	sl, [r7]
 800994a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800994c:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8009950:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 8009954:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 8009956:	bf8b      	itete	hi
 8009958:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 800995c:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8009960:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8009962:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 8009966:	e7d3      	b.n	8009910 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8009968:	2001      	movs	r0, #1
 800996a:	e7db      	b.n	8009924 <HAL_JPEG_GetInfo+0xa4>
 800996c:	0802a958 	.word	0x0802a958

08009970 <HAL_JPEG_Decode_DMA>:
{
 8009970:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8009972:	4604      	mov	r4, r0
 8009974:	b348      	cbz	r0, 80099ca <HAL_JPEG_Decode_DMA+0x5a>
 8009976:	b341      	cbz	r1, 80099ca <HAL_JPEG_Decode_DMA+0x5a>
 8009978:	b33b      	cbz	r3, 80099ca <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800997a:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 800997e:	2d01      	cmp	r5, #1
 8009980:	d028      	beq.n	80099d4 <HAL_JPEG_Decode_DMA+0x64>
 8009982:	2501      	movs	r5, #1
 8009984:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8009988:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 800998c:	2d01      	cmp	r5, #1
 800998e:	d11e      	bne.n	80099ce <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009990:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8009992:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8009994:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8009998:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800999a:	f025 050f 	bic.w	r5, r5, #15
 800999e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80099a0:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 80099a2:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 80099a6:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 80099aa:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 80099ac:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 80099ae:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 80099b0:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 80099b2:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 80099b4:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 80099b6:	f7ff fdab 	bl	8009510 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 80099ba:	f7ff fde5 	bl	8009588 <JPEG_DMA_StartProcess>
 80099be:	b128      	cbz	r0, 80099cc <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80099c0:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 80099c2:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 80099c6:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80099ca:	2001      	movs	r0, #1
}
 80099cc:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80099ce:	2300      	movs	r3, #0
 80099d0:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80099d4:	2002      	movs	r0, #2
 80099d6:	e7f9      	b.n	80099cc <HAL_JPEG_Decode_DMA+0x5c>

080099d8 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80099d8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80099da:	f003 030c 	and.w	r3, r3, #12
 80099de:	2b0c      	cmp	r3, #12
 80099e0:	d10d      	bne.n	80099fe <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80099e2:	07cb      	lsls	r3, r1, #31
 80099e4:	d503      	bpl.n	80099ee <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80099e6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80099e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80099ec:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80099ee:	0789      	lsls	r1, r1, #30
 80099f0:	d503      	bpl.n	80099fa <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80099f2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80099f4:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80099f8:	6543      	str	r3, [r0, #84]	@ 0x54
}
 80099fa:	2000      	movs	r0, #0
 80099fc:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80099fe:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009a00:	f003 030c 	and.w	r3, r3, #12
 8009a04:	2b08      	cmp	r3, #8
 8009a06:	d1f8      	bne.n	80099fa <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009a08:	f011 0301 	ands.w	r3, r1, #1
 8009a0c:	d004      	beq.n	8009a18 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 8009a0e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009a10:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009a14:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009a16:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009a18:	078a      	lsls	r2, r1, #30
 8009a1a:	d505      	bpl.n	8009a28 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009a1c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009a1e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8009a22:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009a26:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8009a28:	6801      	ldr	r1, [r0, #0]
 8009a2a:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009a2c:	ea22 0303 	bic.w	r3, r2, r3
 8009a30:	630b      	str	r3, [r1, #48]	@ 0x30
 8009a32:	e7e2      	b.n	80099fa <HAL_JPEG_Pause+0x22>

08009a34 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 8009a34:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 8009a36:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8009a38:	4770      	bx	lr

08009a3a <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8009a3a:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8009a3c:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8009a3e:	4770      	bx	lr

08009a40 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8009a40:	4770      	bx	lr

08009a42 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009a42:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 8009a44:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009a46:	6803      	ldr	r3, [r0, #0]
 8009a48:	681a      	ldr	r2, [r3, #0]
 8009a4a:	f022 0201 	bic.w	r2, r2, #1
 8009a4e:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009a50:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009a52:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009a56:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8009a58:	2301      	movs	r3, #1
 8009a5a:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009a5e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8009a60:	f043 0304 	orr.w	r3, r3, #4
 8009a64:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8009a66:	f7f9 f833 	bl	8002ad0 <HAL_JPEG_ErrorCallback>
}
 8009a6a:	bd08      	pop	{r3, pc}

08009a6c <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009a6c:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8009a6e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a70:	4604      	mov	r4, r0
 8009a72:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8009a74:	b922      	cbnz	r2, 8009a80 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8009a76:	2101      	movs	r1, #1
 8009a78:	f7ff ffae 	bl	80099d8 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8009a7c:	2200      	movs	r2, #0
 8009a7e:	e004      	b.n	8009a8a <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009a80:	6a03      	ldr	r3, [r0, #32]
 8009a82:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009a84:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8009a86:	d924      	bls.n	8009ad2 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8009a88:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8009a8a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009a8c:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8009a90:	d11e      	bne.n	8009ad0 <JPEG_ReadInputData+0x64>
 8009a92:	b1ea      	cbz	r2, 8009ad0 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8009a94:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8009a98:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8009a9a:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8009a9e:	d827      	bhi.n	8009af0 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009aa0:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8009aa2:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009aa4:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009aa6:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009aa8:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8009aaa:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009aac:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009aae:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009ab2:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009ab6:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009ab8:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009abc:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009ac0:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009ac4:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8009ac6:	6a22      	ldr	r2, [r4, #32]
 8009ac8:	f102 0204 	add.w	r2, r2, #4
 8009acc:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8009ace:	d1e8      	bne.n	8009aa2 <JPEG_ReadInputData+0x36>
}
 8009ad0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8009ad2:	429a      	cmp	r2, r3
 8009ad4:	d1d2      	bne.n	8009a7c <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009ad6:	6a01      	ldr	r1, [r0, #32]
 8009ad8:	f7f8 ff8c 	bl	80029f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8009adc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ade:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8009ae0:	bf84      	itt	hi
 8009ae2:	f023 0303 	bichi.w	r3, r3, #3
 8009ae6:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009ae8:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8009aea:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8009aec:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8009aee:	e7cc      	b.n	8009a8a <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8009af0:	2a03      	cmp	r2, #3
 8009af2:	d918      	bls.n	8009b26 <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009af4:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8009af6:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009af8:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009afa:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009afc:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8009afe:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009b00:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009b02:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009b06:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8009b0a:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8009b0c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8009b10:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8009b14:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8009b18:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8009b1a:	6a22      	ldr	r2, [r4, #32]
 8009b1c:	f102 0204 	add.w	r2, r2, #4
 8009b20:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8009b22:	d1e8      	bne.n	8009af6 <JPEG_ReadInputData+0x8a>
 8009b24:	e7d4      	b.n	8009ad0 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8009b26:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009b28:	6a25      	ldr	r5, [r4, #32]
 8009b2a:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8009b2c:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009b2e:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8009b30:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8009b32:	fa05 f506 	lsl.w	r5, r5, r6
 8009b36:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8009b3a:	6a25      	ldr	r5, [r4, #32]
 8009b3c:	f105 0501 	add.w	r5, r5, #1
 8009b40:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8009b42:	d1f1      	bne.n	8009b28 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8009b44:	6822      	ldr	r2, [r4, #0]
 8009b46:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8009b48:	e7c2      	b.n	8009ad0 <JPEG_ReadInputData+0x64>

08009b4a <JPEG_MDMAInCpltCallback>:
{
 8009b4a:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009b4c:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009b4e:	6822      	ldr	r2, [r4, #0]
 8009b50:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009b52:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8009b56:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8009b58:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009b5a:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8009b5e:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8009b62:	041b      	lsls	r3, r3, #16
 8009b64:	0c1b      	lsrs	r3, r3, #16
 8009b66:	2b0c      	cmp	r3, #12
 8009b68:	d11a      	bne.n	8009ba0 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009b6a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009b6c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009b6e:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009b70:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009b72:	695a      	ldr	r2, [r3, #20]
 8009b74:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009b76:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8009b7a:	1a9b      	subs	r3, r3, r2
 8009b7c:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8009b7e:	6a21      	ldr	r1, [r4, #32]
 8009b80:	f7f8 ff38 	bl	80029f4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8009b84:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009b86:	42ab      	cmp	r3, r5
 8009b88:	d327      	bcc.n	8009bda <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8009b8a:	b95d      	cbnz	r5, 8009ba4 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009b8c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8009b8e:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009b90:	f043 0304 	orr.w	r3, r3, #4
 8009b94:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009b96:	2306      	movs	r3, #6
 8009b98:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8009b9c:	f7f8 ff98 	bl	8002ad0 <HAL_JPEG_ErrorCallback>
}
 8009ba0:	b003      	add	sp, #12
 8009ba2:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8009ba4:	fbb3 f2f5 	udiv	r2, r3, r5
 8009ba8:	fb05 3212 	mls	r2, r5, r2, r3
 8009bac:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8009bae:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8009bb0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009bb2:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8009bb4:	04db      	lsls	r3, r3, #19
 8009bb6:	d40a      	bmi.n	8009bce <JPEG_MDMAInCpltCallback+0x84>
 8009bb8:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009bba:	b143      	cbz	r3, 8009bce <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009bbc:	2101      	movs	r1, #1
 8009bbe:	3240      	adds	r2, #64	@ 0x40
 8009bc0:	9100      	str	r1, [sp, #0]
 8009bc2:	69a1      	ldr	r1, [r4, #24]
 8009bc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8009bc6:	f000 fd3a 	bl	800a63e <HAL_MDMA_Start_IT>
 8009bca:	2800      	cmp	r0, #0
 8009bcc:	d1de      	bne.n	8009b8c <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8009bce:	6822      	ldr	r2, [r4, #0]
 8009bd0:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009bd2:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009bd6:	6313      	str	r3, [r2, #48]	@ 0x30
 8009bd8:	e7e2      	b.n	8009ba0 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8009bda:	2b00      	cmp	r3, #0
 8009bdc:	d0e8      	beq.n	8009bb0 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8009bde:	079a      	lsls	r2, r3, #30
 8009be0:	d0e6      	beq.n	8009bb0 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8009be2:	f023 0303 	bic.w	r3, r3, #3
 8009be6:	3304      	adds	r3, #4
 8009be8:	e7e1      	b.n	8009bae <JPEG_MDMAInCpltCallback+0x64>

08009bea <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009bea:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8009bec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009bee:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8009bf2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8009bf4:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d32a      	bcc.n	8009c50 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8009bfa:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009bfc:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8009bfe:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009c00:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8009c02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8009c04:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009c06:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8009c08:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009c0a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c0c:	69e0      	ldr	r0, [r4, #28]
 8009c0e:	4428      	add	r0, r5
 8009c10:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8009c14:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009c16:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c18:	69e0      	ldr	r0, [r4, #28]
 8009c1a:	4428      	add	r0, r5
 8009c1c:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009c20:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009c24:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009c26:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c28:	69e0      	ldr	r0, [r4, #28]
 8009c2a:	4428      	add	r0, r5
 8009c2c:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8009c2e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c30:	f103 0304 	add.w	r3, r3, #4
 8009c34:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8009c36:	d1e1      	bne.n	8009bfc <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009c38:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c3a:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009c3c:	429a      	cmp	r2, r3
 8009c3e:	d106      	bne.n	8009c4e <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009c40:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009c42:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009c44:	4620      	mov	r0, r4
 8009c46:	f7f8 fef3 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009c4a:	2300      	movs	r3, #0
 8009c4c:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009c4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8009c50:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009c52:	4293      	cmp	r3, r2
 8009c54:	d9fb      	bls.n	8009c4e <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009c56:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009c58:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8009c5a:	1a9b      	subs	r3, r3, r2
 8009c5c:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8009c5e:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009c60:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8009c62:	d105      	bne.n	8009c70 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8009c64:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8009c66:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c68:	429f      	cmp	r7, r3
 8009c6a:	d119      	bne.n	8009ca0 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009c6c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009c6e:	e7e9      	b.n	8009c44 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8009c70:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8009c72:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8009c74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8009c76:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c78:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8009c7a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c7c:	69e1      	ldr	r1, [r4, #28]
 8009c7e:	4429      	add	r1, r5
 8009c80:	0a1d      	lsrs	r5, r3, #8
 8009c82:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009c84:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c86:	69e1      	ldr	r1, [r4, #28]
 8009c88:	4429      	add	r1, r5
 8009c8a:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009c8c:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8009c8e:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8009c90:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8009c92:	69e1      	ldr	r1, [r4, #28]
 8009c94:	4429      	add	r1, r5
 8009c96:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8009c98:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8009c9e:	e7de      	b.n	8009c5e <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009ca0:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009ca2:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8009ca4:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8009ca6:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8009ca8:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8009caa:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009cac:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8009cae:	d114      	bne.n	8009cda <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009cb0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	f7f8 febc 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009cb8:	2300      	movs	r3, #0
 8009cba:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8009cbc:	1d2b      	adds	r3, r5, #4
 8009cbe:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8009cc0:	2b03      	cmp	r3, #3
 8009cc2:	d8c4      	bhi.n	8009c4e <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009cc4:	00da      	lsls	r2, r3, #3
 8009cc6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009cc8:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8009cca:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8009ccc:	fa26 f202 	lsr.w	r2, r6, r2
 8009cd0:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8009cd2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009cd4:	3201      	adds	r2, #1
 8009cd6:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8009cd8:	e7f2      	b.n	8009cc0 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009cda:	f002 0303 	and.w	r3, r2, #3
 8009cde:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009ce2:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8009ce4:	00db      	lsls	r3, r3, #3
 8009ce6:	fa26 f303 	lsr.w	r3, r6, r3
 8009cea:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8009cee:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009cf0:	3301      	adds	r3, #1
 8009cf2:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8009cf4:	e7d9      	b.n	8009caa <JPEG_StoreOutputData+0xc0>

08009cf6 <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009cf6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009cf8:	f003 0303 	and.w	r3, r3, #3
 8009cfc:	2b02      	cmp	r3, #2
{
 8009cfe:	b510      	push	{r4, lr}
 8009d00:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009d02:	d114      	bne.n	8009d2e <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8009d04:	6803      	ldr	r3, [r0, #0]
 8009d06:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009d08:	065b      	lsls	r3, r3, #25
 8009d0a:	d510      	bpl.n	8009d2e <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009d0c:	1d01      	adds	r1, r0, #4
 8009d0e:	f7ff fdb7 	bl	8009880 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8009d12:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009d14:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8009d16:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009d18:	f7f8 fe36 	bl	8002988 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d20:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8009d24:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8009d26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d28:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009d2c:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8009d2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009d30:	04d9      	lsls	r1, r3, #19
 8009d32:	d407      	bmi.n	8009d44 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8009d34:	6823      	ldr	r3, [r4, #0]
 8009d36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d38:	0792      	lsls	r2, r2, #30
 8009d3a:	d544      	bpl.n	8009dc6 <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009d3c:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8009d3e:	4620      	mov	r0, r4
 8009d40:	f7ff fe94 	bl	8009a6c <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009d44:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009d46:	0499      	lsls	r1, r3, #18
 8009d48:	d407      	bmi.n	8009d5a <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8009d4a:	6823      	ldr	r3, [r4, #0]
 8009d4c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d4e:	0712      	lsls	r2, r2, #28
 8009d50:	d53e      	bpl.n	8009dd0 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8009d52:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8009d54:	4620      	mov	r0, r4
 8009d56:	f7ff ff48 	bl	8009bea <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8009d5a:	6823      	ldr	r3, [r4, #0]
 8009d5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009d5e:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8009d62:	2a20      	cmp	r2, #32
 8009d64:	d13c      	bne.n	8009de0 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009d66:	681a      	ldr	r2, [r3, #0]
 8009d68:	f022 0201 	bic.w	r2, r2, #1
 8009d6c:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009d6e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009d70:	f002 020c 	and.w	r2, r2, #12
 8009d74:	2a08      	cmp	r2, #8
 8009d76:	d103      	bne.n	8009d80 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8009d78:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d7a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8009d7e:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8009d80:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009d82:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8009d86:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8009d88:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009d8a:	b133      	cbz	r3, 8009d9a <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009d8c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009d8e:	4620      	mov	r0, r4
 8009d90:	69e1      	ldr	r1, [r4, #28]
 8009d92:	f7f8 fe4d 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009d96:	2300      	movs	r3, #0
 8009d98:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009d9a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009d9c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009d9e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009da0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009da4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009da8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009daa:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009dac:	f04f 0200 	mov.w	r2, #0
 8009db0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009db4:	f04f 0201 	mov.w	r2, #1
 8009db8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009dbc:	d10d      	bne.n	8009dda <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009dbe:	f7f8 fe89 	bl	8002ad4 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8009dc2:	2001      	movs	r0, #1
}
 8009dc4:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8009dc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dc8:	0758      	lsls	r0, r3, #29
 8009dca:	d5bb      	bpl.n	8009d44 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8009dcc:	2101      	movs	r1, #1
 8009dce:	e7b6      	b.n	8009d3e <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009dd2:	06db      	lsls	r3, r3, #27
 8009dd4:	d5c1      	bpl.n	8009d5a <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8009dd6:	2101      	movs	r1, #1
 8009dd8:	e7bc      	b.n	8009d54 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009dda:	f7ff fe31 	bl	8009a40 <HAL_JPEG_EncodeCpltCallback>
 8009dde:	e7f0      	b.n	8009dc2 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8009de0:	2000      	movs	r0, #0
 8009de2:	e7ef      	b.n	8009dc4 <JPEG_Process+0xce>

08009de4 <JPEG_DMA_PollResidualData>:
{
 8009de4:	b570      	push	{r4, r5, r6, lr}
 8009de6:	4604      	mov	r4, r0
 8009de8:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009dea:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009dec:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009dee:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8009df2:	d122      	bne.n	8009e3a <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8009df4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009df6:	06d0      	lsls	r0, r2, #27
 8009df8:	d51f      	bpl.n	8009e3a <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8009dfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8009dfc:	69e1      	ldr	r1, [r4, #28]
 8009dfe:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e00:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8009e02:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009e04:	69e2      	ldr	r2, [r4, #28]
 8009e06:	440a      	add	r2, r1
 8009e08:	0a19      	lsrs	r1, r3, #8
 8009e0a:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009e0c:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009e0e:	69e2      	ldr	r2, [r4, #28]
 8009e10:	440a      	add	r2, r1
 8009e12:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009e14:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8009e16:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8009e18:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009e1a:	69e2      	ldr	r2, [r4, #28]
 8009e1c:	440a      	add	r2, r1
 8009e1e:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8009e20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e22:	3304      	adds	r3, #4
 8009e24:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009e26:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009e28:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e2a:	429a      	cmp	r2, r3
 8009e2c:	d105      	bne.n	8009e3a <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e2e:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e30:	4620      	mov	r0, r4
 8009e32:	69e1      	ldr	r1, [r4, #28]
 8009e34:	f7f8 fdfc 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8009e38:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8009e3a:	3e01      	subs	r6, #1
 8009e3c:	d1d5      	bne.n	8009dea <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009e3e:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8009e40:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8009e42:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8009e44:	06c9      	lsls	r1, r1, #27
 8009e46:	d501      	bpl.n	8009e4c <JPEG_DMA_PollResidualData+0x68>
 8009e48:	0492      	lsls	r2, r2, #18
 8009e4a:	d420      	bmi.n	8009e8e <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009e4c:	681a      	ldr	r2, [r3, #0]
 8009e4e:	f022 0201 	bic.w	r2, r2, #1
 8009e52:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8009e54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009e56:	b133      	cbz	r3, 8009e66 <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009e58:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009e5a:	4620      	mov	r0, r4
 8009e5c:	69e1      	ldr	r1, [r4, #28]
 8009e5e:	f7f8 fde7 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009e62:	2300      	movs	r3, #0
 8009e64:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8009e66:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009e68:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009e6a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009e6c:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009e70:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009e74:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009e76:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009e78:	f04f 0200 	mov.w	r2, #0
 8009e7c:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009e80:	f04f 0201 	mov.w	r2, #1
 8009e84:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009e88:	d102      	bne.n	8009e90 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009e8a:	f7f8 fe23 	bl	8002ad4 <HAL_JPEG_DecodeCpltCallback>
}
 8009e8e:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009e90:	f7ff fdd6 	bl	8009a40 <HAL_JPEG_EncodeCpltCallback>
}
 8009e94:	e7fb      	b.n	8009e8e <JPEG_DMA_PollResidualData+0xaa>

08009e96 <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009e96:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009e98:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8009e9c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8009ea2:	d014      	beq.n	8009ece <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009ea4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ea6:	f003 030c 	and.w	r3, r3, #12
 8009eaa:	2b0c      	cmp	r3, #12
 8009eac:	d146      	bne.n	8009f3c <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009eae:	07cb      	lsls	r3, r1, #31
 8009eb0:	d520      	bpl.n	8009ef4 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009eb2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009eb4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009eb8:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8009eba:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8009ebc:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8009ebe:	b941      	cbnz	r1, 8009ed2 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009ec0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009ec2:	f043 0304 	orr.w	r3, r3, #4
 8009ec6:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8009ec8:	2306      	movs	r3, #6
 8009eca:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8009ece:	2001      	movs	r0, #1
 8009ed0:	e01d      	b.n	8009f0e <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8009ed2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009ed4:	fbb3 f2f1 	udiv	r2, r3, r1
 8009ed8:	fb01 3212 	mls	r2, r1, r2, r3
 8009edc:	1a9b      	subs	r3, r3, r2
 8009ede:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8009ee0:	b143      	cbz	r3, 8009ef4 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8009ee2:	6822      	ldr	r2, [r4, #0]
 8009ee4:	2101      	movs	r1, #1
 8009ee6:	3240      	adds	r2, #64	@ 0x40
 8009ee8:	9100      	str	r1, [sp, #0]
 8009eea:	69a1      	ldr	r1, [r4, #24]
 8009eec:	f000 fba7 	bl	800a63e <HAL_MDMA_Start_IT>
 8009ef0:	2800      	cmp	r0, #0
 8009ef2:	d1e5      	bne.n	8009ec0 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009ef4:	07a8      	lsls	r0, r5, #30
 8009ef6:	d509      	bpl.n	8009f0c <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009ef8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009efa:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8009efe:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009f00:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009f02:	0419      	lsls	r1, r3, #16
 8009f04:	d505      	bpl.n	8009f12 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8009f06:	4620      	mov	r0, r4
 8009f08:	f7ff ff6c 	bl	8009de4 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8009f0c:	2000      	movs	r0, #0
}
 8009f0e:	b003      	add	sp, #12
 8009f10:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8009f12:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8009f14:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8009f16:	2900      	cmp	r1, #0
 8009f18:	d0d2      	beq.n	8009ec0 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009f1a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009f1c:	fbb3 f2f1 	udiv	r2, r3, r1
 8009f20:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009f24:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009f26:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009f28:	2201      	movs	r2, #1
 8009f2a:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8009f2c:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8009f2e:	9200      	str	r2, [sp, #0]
 8009f30:	69e2      	ldr	r2, [r4, #28]
 8009f32:	f000 fb84 	bl	800a63e <HAL_MDMA_Start_IT>
 8009f36:	2800      	cmp	r0, #0
 8009f38:	d0e8      	beq.n	8009f0c <HAL_JPEG_Resume+0x76>
 8009f3a:	e7c1      	b.n	8009ec0 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009f3c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009f3e:	f003 030c 	and.w	r3, r3, #12
 8009f42:	2b08      	cmp	r3, #8
 8009f44:	d1e2      	bne.n	8009f0c <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8009f46:	f011 0301 	ands.w	r3, r1, #1
 8009f4a:	d004      	beq.n	8009f56 <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8009f4c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009f4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009f52:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8009f54:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8009f56:	07aa      	lsls	r2, r5, #30
 8009f58:	d505      	bpl.n	8009f66 <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009f5a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8009f5c:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8009f60:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009f64:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8009f66:	6821      	ldr	r1, [r4, #0]
 8009f68:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8009f6a:	4313      	orrs	r3, r2
 8009f6c:	630b      	str	r3, [r1, #48]	@ 0x30
 8009f6e:	e7cd      	b.n	8009f0c <HAL_JPEG_Resume+0x76>

08009f70 <JPEG_DMA_EndProcess>:
{
 8009f70:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009f72:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8009f74:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8009f76:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	695b      	ldr	r3, [r3, #20]
 8009f7c:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8009f80:	1ad3      	subs	r3, r2, r3
 8009f82:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8009f84:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d105      	bne.n	8009f96 <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009f8a:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8009f8c:	69c1      	ldr	r1, [r0, #28]
 8009f8e:	f7f8 fd4f 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8009f92:	2300      	movs	r3, #0
 8009f94:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8009f96:	6823      	ldr	r3, [r4, #0]
 8009f98:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8009f9a:	f015 0510 	ands.w	r5, r5, #16
 8009f9e:	d124      	bne.n	8009fea <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8009fa0:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009fa2:	b12b      	cbz	r3, 8009fb0 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8009fa4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8009fa6:	4620      	mov	r0, r4
 8009fa8:	69e1      	ldr	r1, [r4, #28]
 8009faa:	f7f8 fd41 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8009fae:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009fb0:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009fb2:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009fb4:	6813      	ldr	r3, [r2, #0]
 8009fb6:	f023 0301 	bic.w	r3, r3, #1
 8009fba:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8009fbc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fbe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fc0:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fc4:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fc8:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8009fca:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8009fcc:	f04f 0200 	mov.w	r2, #0
 8009fd0:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8009fd4:	f04f 0201 	mov.w	r2, #1
 8009fd8:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009fdc:	d102      	bne.n	8009fe4 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8009fde:	f7f8 fd79 	bl	8002ad4 <HAL_JPEG_DecodeCpltCallback>
}
 8009fe2:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8009fe4:	f7ff fd2c 	bl	8009a40 <HAL_JPEG_EncodeCpltCallback>
 8009fe8:	e7fb      	b.n	8009fe2 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8009fea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009fec:	049b      	lsls	r3, r3, #18
 8009fee:	d4f8      	bmi.n	8009fe2 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8009ff0:	4620      	mov	r0, r4
}
 8009ff2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8009ff6:	f7ff bef5 	b.w	8009de4 <JPEG_DMA_PollResidualData>

08009ffa <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8009ffa:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8009ffc:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009ffe:	041b      	lsls	r3, r3, #16
 800a000:	d501      	bpl.n	800a006 <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 800a002:	f7ff bfb5 	b.w	8009f70 <JPEG_DMA_EndProcess>
}
 800a006:	4770      	bx	lr

0800a008 <JPEG_MDMAOutCpltCallback>:
{
 800a008:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800a00a:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a00c:	6823      	ldr	r3, [r4, #0]
 800a00e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a010:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a014:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 800a016:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a018:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 800a01c:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 800a020:	0412      	lsls	r2, r2, #16
 800a022:	0c12      	lsrs	r2, r2, #16
 800a024:	2a0c      	cmp	r2, #12
 800a026:	d125      	bne.n	800a074 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 800a028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a02a:	069a      	lsls	r2, r3, #26
 800a02c:	d424      	bmi.n	800a078 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a02e:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a030:	4620      	mov	r0, r4
 800a032:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800a034:	695a      	ldr	r2, [r3, #20]
 800a036:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a038:	f3c2 0210 	ubfx	r2, r2, #0, #17
 800a03c:	1a9b      	subs	r3, r3, r2
 800a03e:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800a040:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800a042:	f7f8 fcf5 	bl	8002a30 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800a046:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a048:	049b      	lsls	r3, r3, #18
 800a04a:	d415      	bmi.n	800a078 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800a04c:	6821      	ldr	r1, [r4, #0]
 800a04e:	2301      	movs	r3, #1
 800a050:	3144      	adds	r1, #68	@ 0x44
 800a052:	9300      	str	r3, [sp, #0]
 800a054:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a056:	69e2      	ldr	r2, [r4, #28]
 800a058:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a05a:	f000 faf0 	bl	800a63e <HAL_MDMA_Start_IT>
 800a05e:	b158      	cbz	r0, 800a078 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a060:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 800a062:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800a064:	f043 0304 	orr.w	r3, r3, #4
 800a068:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800a06a:	2306      	movs	r3, #6
 800a06c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 800a070:	f7f8 fd2e 	bl	8002ad0 <HAL_JPEG_ErrorCallback>
}
 800a074:	b002      	add	sp, #8
 800a076:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800a078:	6822      	ldr	r2, [r4, #0]
 800a07a:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800a07c:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 800a080:	6313      	str	r3, [r2, #48]	@ 0x30
 800a082:	e7f7      	b.n	800a074 <JPEG_MDMAOutCpltCallback+0x6c>

0800a084 <HAL_JPEG_IRQHandler>:
{
 800a084:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800a086:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800a08a:	4604      	mov	r4, r0
  switch (hjpeg->State)
 800a08c:	3b03      	subs	r3, #3
 800a08e:	2b01      	cmp	r3, #1
 800a090:	d850      	bhi.n	800a134 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 800a092:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a094:	f003 030c 	and.w	r3, r3, #12
 800a098:	2b08      	cmp	r3, #8
 800a09a:	d103      	bne.n	800a0a4 <HAL_JPEG_IRQHandler+0x20>
}
 800a09c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 800a0a0:	f7ff be29 	b.w	8009cf6 <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800a0a4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0a6:	f003 030c 	and.w	r3, r3, #12
 800a0aa:	2b0c      	cmp	r3, #12
 800a0ac:	d142      	bne.n	800a134 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 800a0ae:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800a0b0:	f003 0303 	and.w	r3, r3, #3
 800a0b4:	2b02      	cmp	r3, #2
 800a0b6:	d114      	bne.n	800a0e2 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800a0b8:	6803      	ldr	r3, [r0, #0]
 800a0ba:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800a0bc:	0659      	lsls	r1, r3, #25
 800a0be:	d510      	bpl.n	800a0e2 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 800a0c0:	1d01      	adds	r1, r0, #4
 800a0c2:	f7ff fbdd 	bl	8009880 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800a0c6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a0c8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800a0ca:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800a0cc:	f7f8 fc5c 	bl	8002988 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 800a0d0:	6823      	ldr	r3, [r4, #0]
 800a0d2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0d4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800a0d8:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800a0da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a0dc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800a0e0:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 800a0e2:	6823      	ldr	r3, [r4, #0]
 800a0e4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a0e6:	0692      	lsls	r2, r2, #26
 800a0e8:	d524      	bpl.n	800a134 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a0ea:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a0ec:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800a0ee:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800a0f2:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800a0f4:	681a      	ldr	r2, [r3, #0]
 800a0f6:	f022 0201 	bic.w	r2, r2, #1
 800a0fa:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800a0fc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800a0fe:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800a102:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800a104:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a106:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800a10a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 800a10c:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a110:	2b02      	cmp	r3, #2
 800a112:	d101      	bne.n	800a118 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 800a114:	f000 fadc 	bl	800a6d0 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 800a118:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 800a11a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a11e:	2b02      	cmp	r3, #2
 800a120:	d103      	bne.n	800a12a <HAL_JPEG_IRQHandler+0xa6>
}
 800a122:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 800a126:	f000 bad3 	b.w	800a6d0 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 800a12a:	4620      	mov	r0, r4
}
 800a12c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 800a130:	f7ff bf1e 	b.w	8009f70 <JPEG_DMA_EndProcess>
}
 800a134:	bd10      	pop	{r4, pc}

0800a136 <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a136:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a138:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a13a:	3284      	adds	r2, #132	@ 0x84
 800a13c:	1883      	adds	r3, r0, r2
{
 800a13e:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a140:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a142:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a144:	684c      	ldr	r4, [r1, #4]
 800a146:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a14a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a14e:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800a150:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800a152:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800a154:	f106 0c01 	add.w	ip, r6, #1
 800a158:	68c5      	ldr	r5, [r0, #12]
 800a15a:	f3c5 450b 	ubfx	r5, r5, #16, #12
 800a15e:	4465      	add	r5, ip
 800a160:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800a164:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800a166:	68c7      	ldr	r7, [r0, #12]
 800a168:	68cd      	ldr	r5, [r1, #12]
 800a16a:	f3c7 070a 	ubfx	r7, r7, #0, #11
 800a16e:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800a170:	689d      	ldr	r5, [r3, #8]
 800a172:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800a176:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a178:	688d      	ldr	r5, [r1, #8]
 800a17a:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 800a17e:	3501      	adds	r5, #1
 800a180:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 800a184:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a186:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a18a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800a18e:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800a190:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800a192:	691d      	ldr	r5, [r3, #16]
 800a194:	f025 0507 	bic.w	r5, r5, #7
 800a198:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800a19a:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a19e:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 800a1a2:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800a1a6:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a1aa:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800a1ae:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800a1b2:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800a1b6:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800a1b8:	695d      	ldr	r5, [r3, #20]
 800a1ba:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 800a1be:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800a1c0:	694d      	ldr	r5, [r1, #20]
 800a1c2:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800a1c4:	69dd      	ldr	r5, [r3, #28]
 800a1c6:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800a1ca:	f025 0507 	bic.w	r5, r5, #7
 800a1ce:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800a1d0:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 800a1d4:	433d      	orrs	r5, r7
 800a1d6:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800a1d8:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800a1da:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a1dc:	f1bc 0f00 	cmp.w	ip, #0
 800a1e0:	d024      	beq.n	800a22c <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a1e2:	f1bc 0f01 	cmp.w	ip, #1
 800a1e6:	d023      	beq.n	800a230 <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a1e8:	f1ac 0502 	sub.w	r5, ip, #2
 800a1ec:	2d02      	cmp	r5, #2
 800a1ee:	d921      	bls.n	800a234 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 800a1f0:	f1bc 0f07 	cmp.w	ip, #7
 800a1f4:	bf14      	ite	ne
 800a1f6:	2501      	movne	r5, #1
 800a1f8:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a1fa:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a1fc:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a1fe:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a202:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800a204:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800a206:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800a208:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a20a:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800a20c:	436f      	muls	r7, r5
 800a20e:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 800a212:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800a214:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 800a216:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 800a21a:	f024 0407 	bic.w	r4, r4, #7
 800a21e:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800a220:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800a222:	5883      	ldr	r3, [r0, r2]
 800a224:	f043 0301 	orr.w	r3, r3, #1
 800a228:	5083      	str	r3, [r0, r2]
}
 800a22a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 800a22c:	2504      	movs	r5, #4
 800a22e:	e7e4      	b.n	800a1fa <LTDC_SetConfig+0xc4>
    tmp = 3U;
 800a230:	2503      	movs	r5, #3
 800a232:	e7e2      	b.n	800a1fa <LTDC_SetConfig+0xc4>
    tmp = 2U;
 800a234:	2502      	movs	r5, #2
 800a236:	e7e0      	b.n	800a1fa <LTDC_SetConfig+0xc4>

0800a238 <HAL_LTDC_Init>:
{
 800a238:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 800a23a:	4604      	mov	r4, r0
 800a23c:	2800      	cmp	r0, #0
 800a23e:	d04e      	beq.n	800a2de <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800a240:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 800a244:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800a248:	b91b      	cbnz	r3, 800a252 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 800a24a:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 800a24e:	f7f7 f97d 	bl	800154c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a252:	2302      	movs	r3, #2
 800a254:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800a258:	6823      	ldr	r3, [r4, #0]
 800a25a:	699a      	ldr	r2, [r3, #24]
 800a25c:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800a260:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a262:	6999      	ldr	r1, [r3, #24]
 800a264:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800a268:	4302      	orrs	r2, r0
 800a26a:	68e0      	ldr	r0, [r4, #12]
 800a26c:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800a26e:	6920      	ldr	r0, [r4, #16]
 800a270:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800a272:	430a      	orrs	r2, r1
 800a274:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800a276:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800a27a:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a27e:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800a280:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 800a284:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a288:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800a28a:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 800a28e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a292:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800a294:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800a298:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a29c:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a29e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800a2a0:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a2a4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800a2a8:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800a2ac:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a2ae:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 800a2b0:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 800a2b4:	432a      	orrs	r2, r5
 800a2b6:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a2ba:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800a2bc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800a2c0:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800a2c2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2c4:	f042 0206 	orr.w	r2, r2, #6
 800a2c8:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800a2ca:	699a      	ldr	r2, [r3, #24]
 800a2cc:	f042 0201 	orr.w	r2, r2, #1
 800a2d0:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 800a2d2:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800a2d4:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800a2d8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 800a2dc:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800a2de:	2001      	movs	r0, #1
 800a2e0:	e7fc      	b.n	800a2dc <HAL_LTDC_Init+0xa4>

0800a2e2 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 800a2e2:	4770      	bx	lr

0800a2e4 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 800a2e4:	4770      	bx	lr

0800a2e6 <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800a2e6:	4770      	bx	lr

0800a2e8 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a2e8:	6803      	ldr	r3, [r0, #0]
{
 800a2ea:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800a2ec:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 800a2ee:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 800a2f0:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 800a2f2:	0772      	lsls	r2, r6, #29
 800a2f4:	d514      	bpl.n	800a320 <HAL_LTDC_IRQHandler+0x38>
 800a2f6:	0769      	lsls	r1, r5, #29
 800a2f8:	d512      	bpl.n	800a320 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800a2fa:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a2fc:	f022 0204 	bic.w	r2, r2, #4
 800a300:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 800a302:	2204      	movs	r2, #4
 800a304:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 800a306:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 800a30a:	f043 0301 	orr.w	r3, r3, #1
 800a30e:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 800a312:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a314:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a318:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a31c:	f7ff ffe1 	bl	800a2e2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 800a320:	07b2      	lsls	r2, r6, #30
 800a322:	d516      	bpl.n	800a352 <HAL_LTDC_IRQHandler+0x6a>
 800a324:	07ab      	lsls	r3, r5, #30
 800a326:	d514      	bpl.n	800a352 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a328:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 800a32a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 800a32c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a32e:	f022 0202 	bic.w	r2, r2, #2
 800a332:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 800a334:	2202      	movs	r2, #2
 800a336:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 800a338:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 800a33c:	4313      	orrs	r3, r2
 800a33e:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 800a342:	2304      	movs	r3, #4
 800a344:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a348:	2300      	movs	r3, #0
 800a34a:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 800a34e:	f7ff ffc8 	bl	800a2e2 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 800a352:	07f0      	lsls	r0, r6, #31
 800a354:	d510      	bpl.n	800a378 <HAL_LTDC_IRQHandler+0x90>
 800a356:	07e9      	lsls	r1, r5, #31
 800a358:	d50e      	bpl.n	800a378 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a35a:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 800a35c:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 800a35e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a360:	f022 0201 	bic.w	r2, r2, #1
 800a364:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800a366:	2201      	movs	r2, #1
 800a368:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800a36a:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 800a36c:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a370:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 800a374:	f7ff ffb6 	bl	800a2e4 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800a378:	0732      	lsls	r2, r6, #28
 800a37a:	d511      	bpl.n	800a3a0 <HAL_LTDC_IRQHandler+0xb8>
 800a37c:	072b      	lsls	r3, r5, #28
 800a37e:	d50f      	bpl.n	800a3a0 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a380:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a382:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 800a384:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800a386:	f022 0208 	bic.w	r2, r2, #8
 800a38a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 800a38c:	2208      	movs	r2, #8
 800a38e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 800a390:	2301      	movs	r3, #1
 800a392:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800a396:	2300      	movs	r3, #0
 800a398:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 800a39c:	f7ff ffa3 	bl	800a2e6 <HAL_LTDC_ReloadEventCallback>
}
 800a3a0:	bd70      	pop	{r4, r5, r6, pc}

0800a3a2 <HAL_LTDC_ConfigLayer>:
{
 800a3a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800a3a6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800a3aa:	4606      	mov	r6, r0
 800a3ac:	460f      	mov	r7, r1
 800a3ae:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 800a3b0:	2b01      	cmp	r3, #1
 800a3b2:	f04f 0002 	mov.w	r0, #2
 800a3b6:	d01f      	beq.n	800a3f8 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3b8:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800a3ba:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3be:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a3c0:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3c4:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800a3c8:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3cc:	3438      	adds	r4, #56	@ 0x38
 800a3ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3d6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800a3d8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800a3da:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a3dc:	4630      	mov	r0, r6
 800a3de:	4662      	mov	r2, ip
 800a3e0:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800a3e2:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800a3e4:	f7ff fea7 	bl	800a136 <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a3e8:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800a3ea:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800a3ec:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 800a3f0:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a3f4:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800a3f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800a3fc <HAL_LTDC_SetPitch>:
{
 800a3fc:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 800a3fe:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 800a402:	2b01      	cmp	r3, #1
 800a404:	f04f 0302 	mov.w	r3, #2
 800a408:	d02c      	beq.n	800a464 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a40a:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800a40c:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 800a410:	fb04 0402 	mla	r4, r4, r2, r0
 800a414:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800a416:	b33c      	cbz	r4, 800a468 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800a418:	2c01      	cmp	r4, #1
 800a41a:	d027      	beq.n	800a46c <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800a41c:	1ea5      	subs	r5, r4, #2
 800a41e:	429d      	cmp	r5, r3
 800a420:	d902      	bls.n	800a428 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 800a422:	2c07      	cmp	r4, #7
 800a424:	bf18      	it	ne
 800a426:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a428:	01d2      	lsls	r2, r2, #7
 800a42a:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 800a42c:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 800a42e:	3284      	adds	r2, #132	@ 0x84
 800a430:	4422      	add	r2, r4
 800a432:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800a434:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 800a438:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 800a43c:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a43e:	4c0c      	ldr	r4, [pc, #48]	@ (800a470 <HAL_LTDC_SetPitch+0x74>)
 800a440:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800a442:	f045 0501 	orr.w	r5, r5, #1
 800a446:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 800a448:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 800a44a:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 800a44e:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 800a450:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800a452:	f043 0301 	orr.w	r3, r3, #1
 800a456:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 800a458:	2301      	movs	r3, #1
 800a45a:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 800a45e:	2300      	movs	r3, #0
 800a460:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800a464:	4618      	mov	r0, r3
 800a466:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800a468:	2304      	movs	r3, #4
 800a46a:	e7dd      	b.n	800a428 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 800a46c:	2303      	movs	r3, #3
 800a46e:	e7db      	b.n	800a428 <HAL_LTDC_SetPitch+0x2c>
 800a470:	50001000 	.word	0x50001000

0800a474 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800a474:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a476:	6804      	ldr	r4, [r0, #0]
 800a478:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a47c:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800a480:	6965      	ldr	r5, [r4, #20]
 800a482:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800a486:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800a48a:	ea45 0503 	orr.w	r5, r5, r3
 800a48e:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 800a490:	9d03      	ldr	r5, [sp, #12]
 800a492:	6963      	ldr	r3, [r4, #20]
 800a494:	f105 35ff 	add.w	r5, r5, #4294967295
 800a498:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a49c:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 800a4a0:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800a4a2:	f04f 031f 	mov.w	r3, #31
 800a4a6:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800a4a8:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800a4aa:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 800a4ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a4ae:	bf0c      	ite	eq
 800a4b0:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a4b4:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800a4b8:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800a4bc:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 800a4be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a4c0:	bf0c      	ite	eq
 800a4c2:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800a4c6:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800a4ca:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 800a4cc:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 800a4ce:	6263      	str	r3, [r4, #36]	@ 0x24
}
 800a4d0:	bd30      	pop	{r4, r5, pc}

0800a4d2 <HAL_MDMA_Init>:
{
 800a4d2:	b538      	push	{r3, r4, r5, lr}
 800a4d4:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800a4d6:	f7fd f8fd 	bl	80076d4 <HAL_GetTick>
 800a4da:	4605      	mov	r5, r0
  if(hmdma == NULL)
 800a4dc:	2c00      	cmp	r4, #0
 800a4de:	d061      	beq.n	800a5a4 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 800a4e0:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 800a4e2:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 800a4e4:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800a4e8:	2302      	movs	r3, #2
 800a4ea:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 800a4ee:	68d3      	ldr	r3, [r2, #12]
 800a4f0:	f023 0301 	bic.w	r3, r3, #1
 800a4f4:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a4f6:	6823      	ldr	r3, [r4, #0]
 800a4f8:	68da      	ldr	r2, [r3, #12]
 800a4fa:	07d2      	lsls	r2, r2, #31
 800a4fc:	d448      	bmi.n	800a590 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800a4fe:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 800a502:	430a      	orrs	r2, r1
 800a504:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800a506:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 800a50a:	430a      	orrs	r2, r1
 800a50c:	69e1      	ldr	r1, [r4, #28]
 800a50e:	430a      	orrs	r2, r1
 800a510:	6a21      	ldr	r1, [r4, #32]
 800a512:	430a      	orrs	r2, r1
 800a514:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800a516:	430a      	orrs	r2, r1
 800a518:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a51a:	430a      	orrs	r2, r1
 800a51c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800a51e:	430a      	orrs	r2, r1
 800a520:	68a1      	ldr	r1, [r4, #8]
 800a522:	430a      	orrs	r2, r1
 800a524:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 800a526:	3901      	subs	r1, #1
 800a528:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a52c:	6861      	ldr	r1, [r4, #4]
 800a52e:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800a532:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a534:	d103      	bne.n	800a53e <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800a536:	691a      	ldr	r2, [r3, #16]
 800a538:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800a53c:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800a53e:	2200      	movs	r2, #0
 800a540:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800a542:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a544:	2a00      	cmp	r2, #0
 800a546:	da04      	bge.n	800a552 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a548:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800a54a:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800a54c:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 800a550:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800a552:	b292      	uxth	r2, r2
 800a554:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800a556:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a558:	2a00      	cmp	r2, #0
 800a55a:	da25      	bge.n	800a5a8 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a55c:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800a55e:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800a560:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800a564:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a566:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a568:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a56c:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a570:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800a572:	f04f 0200 	mov.w	r2, #0
 800a576:	d019      	beq.n	800a5ac <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800a578:	b2c9      	uxtb	r1, r1
 800a57a:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800a57c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 800a57e:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a580:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800a582:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800a584:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800a586:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800a58a:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 800a58e:	e00a      	b.n	800a5a6 <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800a590:	f7fd f8a0 	bl	80076d4 <HAL_GetTick>
 800a594:	1b40      	subs	r0, r0, r5
 800a596:	2805      	cmp	r0, #5
 800a598:	d9ad      	bls.n	800a4f6 <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800a59a:	2340      	movs	r3, #64	@ 0x40
 800a59c:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a59e:	2303      	movs	r3, #3
 800a5a0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800a5a4:	2001      	movs	r0, #1
}
 800a5a6:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800a5a8:	6a18      	ldr	r0, [r3, #32]
 800a5aa:	e7dd      	b.n	800a568 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 800a5ac:	629a      	str	r2, [r3, #40]	@ 0x28
 800a5ae:	e7e5      	b.n	800a57c <HAL_MDMA_Init+0xaa>

0800a5b0 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 800a5b0:	b1d8      	cbz	r0, 800a5ea <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800a5b2:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a5b4:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800a5b6:	68d3      	ldr	r3, [r2, #12]
 800a5b8:	f023 0301 	bic.w	r3, r3, #1
 800a5bc:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 800a5be:	2300      	movs	r3, #0
 800a5c0:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800a5c2:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800a5c4:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800a5c6:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800a5c8:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800a5ca:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 800a5cc:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800a5ce:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800a5d0:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800a5d2:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800a5d4:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a5d6:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800a5d8:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800a5da:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 800a5de:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 800a5e2:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	4770      	bx	lr
    return HAL_ERROR;
 800a5ea:	2001      	movs	r0, #1
}
 800a5ec:	4770      	bx	lr

0800a5ee <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 800a5ee:	4603      	mov	r3, r0
{
 800a5f0:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 800a5f2:	b300      	cbz	r0, 800a636 <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 800a5f4:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800a5f8:	2801      	cmp	r0, #1
 800a5fa:	d01e      	beq.n	800a63a <HAL_MDMA_ConfigPostRequestMask+0x4c>
 800a5fc:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a5fe:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 800a602:	42a5      	cmp	r5, r4
 800a604:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 800a606:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a60a:	d112      	bne.n	800a632 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 800a60c:	681c      	ldr	r4, [r3, #0]
 800a60e:	6925      	ldr	r5, [r4, #16]
 800a610:	006d      	lsls	r5, r5, #1
 800a612:	d407      	bmi.n	800a624 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 800a614:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 800a616:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a618:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 800a61a:	b939      	cbnz	r1, 800a62c <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a61c:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 800a620:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 800a622:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 800a624:	2200      	movs	r2, #0
 800a626:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800a62a:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 800a62c:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 800a630:	e7f6      	b.n	800a620 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800a632:	4620      	mov	r0, r4
 800a634:	e7f6      	b.n	800a624 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800a636:	2001      	movs	r0, #1
 800a638:	e7f7      	b.n	800a62a <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 800a63a:	2002      	movs	r0, #2
 800a63c:	e7f5      	b.n	800a62a <HAL_MDMA_ConfigPostRequestMask+0x3c>

0800a63e <HAL_MDMA_Start_IT>:
{
 800a63e:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 800a640:	4604      	mov	r4, r0
 800a642:	2800      	cmp	r0, #0
 800a644:	d042      	beq.n	800a6cc <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800a646:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 800a64a:	2d01      	cmp	r5, #1
 800a64c:	d03c      	beq.n	800a6c8 <HAL_MDMA_Start_IT+0x8a>
 800a64e:	2501      	movs	r5, #1
 800a650:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800a654:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 800a658:	2d01      	cmp	r5, #1
 800a65a:	f04f 0500 	mov.w	r5, #0
 800a65e:	d131      	bne.n	800a6c4 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 800a660:	2602      	movs	r6, #2
 800a662:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800a666:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800a668:	6805      	ldr	r5, [r0, #0]
 800a66a:	68ee      	ldr	r6, [r5, #12]
 800a66c:	f026 0601 	bic.w	r6, r6, #1
 800a670:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800a672:	9e06      	ldr	r6, [sp, #24]
 800a674:	9600      	str	r6, [sp, #0]
 800a676:	f7ff fefd 	bl	800a474 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800a67a:	68eb      	ldr	r3, [r5, #12]
 800a67c:	f043 0306 	orr.w	r3, r3, #6
 800a680:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800a682:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800a684:	b11b      	cbz	r3, 800a68e <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800a686:	68eb      	ldr	r3, [r5, #12]
 800a688:	f043 0310 	orr.w	r3, r3, #16
 800a68c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a68e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a690:	b11b      	cbz	r3, 800a69a <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800a692:	68eb      	ldr	r3, [r5, #12]
 800a694:	f043 0308 	orr.w	r3, r3, #8
 800a698:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800a69a:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a69c:	b11b      	cbz	r3, 800a6a6 <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 800a69e:	68eb      	ldr	r3, [r5, #12]
 800a6a0:	f043 0320 	orr.w	r3, r3, #32
 800a6a4:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800a6a6:	68eb      	ldr	r3, [r5, #12]
 800a6a8:	f043 0301 	orr.w	r3, r3, #1
 800a6ac:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800a6ae:	6863      	ldr	r3, [r4, #4]
 800a6b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800a6b4:	d103      	bne.n	800a6be <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800a6b6:	68eb      	ldr	r3, [r5, #12]
 800a6b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a6bc:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 800a6be:	2000      	movs	r0, #0
}
 800a6c0:	b002      	add	sp, #8
 800a6c2:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800a6c4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800a6c8:	2002      	movs	r0, #2
 800a6ca:	e7f9      	b.n	800a6c0 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 800a6cc:	2001      	movs	r0, #1
 800a6ce:	e7f7      	b.n	800a6c0 <HAL_MDMA_Start_IT+0x82>

0800a6d0 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 800a6d0:	b128      	cbz	r0, 800a6de <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 800a6d2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800a6d6:	2b02      	cmp	r3, #2
 800a6d8:	d003      	beq.n	800a6e2 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800a6da:	2380      	movs	r3, #128	@ 0x80
 800a6dc:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 800a6de:	2001      	movs	r0, #1
 800a6e0:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 800a6e2:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a6e4:	2304      	movs	r3, #4
 800a6e6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800a6ea:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 800a6ec:	68d3      	ldr	r3, [r2, #12]
 800a6ee:	f023 0301 	bic.w	r3, r3, #1
 800a6f2:	60d3      	str	r3, [r2, #12]
}
 800a6f4:	4770      	bx	lr
	...

0800a6f8 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800a6f8:	2300      	movs	r3, #0
{
 800a6fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 800a6fc:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a6fe:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 800a702:	4b58      	ldr	r3, [pc, #352]	@ (800a864 <HAL_MDMA_IRQHandler+0x16c>)
{
 800a704:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a706:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 800a708:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a70a:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a70c:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800a70e:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 800a712:	3a40      	subs	r2, #64	@ 0x40
 800a714:	f3c2 1284 	ubfx	r2, r2, #6, #5
 800a718:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800a71c:	4202      	tst	r2, r0
 800a71e:	f000 809e 	beq.w	800a85e <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800a722:	681a      	ldr	r2, [r3, #0]
 800a724:	07d1      	lsls	r1, r2, #31
 800a726:	d529      	bpl.n	800a77c <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800a728:	68da      	ldr	r2, [r3, #12]
 800a72a:	0792      	lsls	r2, r2, #30
 800a72c:	d526      	bpl.n	800a77c <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800a72e:	68da      	ldr	r2, [r3, #12]
 800a730:	f022 0202 	bic.w	r2, r2, #2
 800a734:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800a736:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a738:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 800a73a:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800a73c:	bf54      	ite	pl
 800a73e:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800a742:	f041 0102 	orrmi.w	r1, r1, #2
 800a746:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800a748:	0591      	lsls	r1, r2, #22
 800a74a:	d503      	bpl.n	800a754 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800a74c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a74e:	f041 0104 	orr.w	r1, r1, #4
 800a752:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800a754:	05d0      	lsls	r0, r2, #23
 800a756:	d503      	bpl.n	800a760 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800a758:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a75a:	f041 0108 	orr.w	r1, r1, #8
 800a75e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800a760:	0551      	lsls	r1, r2, #21
 800a762:	d503      	bpl.n	800a76c <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800a764:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800a766:	f041 0110 	orr.w	r1, r1, #16
 800a76a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800a76c:	0512      	lsls	r2, r2, #20
 800a76e:	d503      	bpl.n	800a778 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800a770:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800a772:	f042 0220 	orr.w	r2, r2, #32
 800a776:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800a778:	2201      	movs	r2, #1
 800a77a:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800a77c:	681a      	ldr	r2, [r3, #0]
 800a77e:	06d0      	lsls	r0, r2, #27
 800a780:	d508      	bpl.n	800a794 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800a782:	68da      	ldr	r2, [r3, #12]
 800a784:	0691      	lsls	r1, r2, #26
 800a786:	d505      	bpl.n	800a794 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800a788:	2210      	movs	r2, #16
 800a78a:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 800a78c:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 800a78e:	b10b      	cbz	r3, 800a794 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 800a790:	4620      	mov	r0, r4
 800a792:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800a794:	6823      	ldr	r3, [r4, #0]
 800a796:	681a      	ldr	r2, [r3, #0]
 800a798:	0712      	lsls	r2, r2, #28
 800a79a:	d508      	bpl.n	800a7ae <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800a79c:	68da      	ldr	r2, [r3, #12]
 800a79e:	06d0      	lsls	r0, r2, #27
 800a7a0:	d505      	bpl.n	800a7ae <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800a7a2:	2208      	movs	r2, #8
 800a7a4:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800a7a6:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800a7a8:	b10b      	cbz	r3, 800a7ae <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800a7aa:	4620      	mov	r0, r4
 800a7ac:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800a7ae:	6823      	ldr	r3, [r4, #0]
 800a7b0:	681a      	ldr	r2, [r3, #0]
 800a7b2:	0751      	lsls	r1, r2, #29
 800a7b4:	d508      	bpl.n	800a7c8 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800a7b6:	68da      	ldr	r2, [r3, #12]
 800a7b8:	0712      	lsls	r2, r2, #28
 800a7ba:	d505      	bpl.n	800a7c8 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800a7bc:	2204      	movs	r2, #4
 800a7be:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800a7c0:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800a7c2:	b10b      	cbz	r3, 800a7c8 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800a7c4:	4620      	mov	r0, r4
 800a7c6:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800a7c8:	6823      	ldr	r3, [r4, #0]
 800a7ca:	681a      	ldr	r2, [r3, #0]
 800a7cc:	0790      	lsls	r0, r2, #30
 800a7ce:	d524      	bpl.n	800a81a <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800a7d0:	68da      	ldr	r2, [r3, #12]
 800a7d2:	0751      	lsls	r1, r2, #29
 800a7d4:	d521      	bpl.n	800a81a <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800a7d6:	68da      	ldr	r2, [r3, #12]
 800a7d8:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800a7dc:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800a7de:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 800a7e2:	2a04      	cmp	r2, #4
 800a7e4:	f04f 0200 	mov.w	r2, #0
 800a7e8:	d10c      	bne.n	800a804 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800a7ea:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 800a7ec:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 800a7f0:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 800a7f4:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800a7f6:	2b00      	cmp	r3, #0
 800a7f8:	d031      	beq.n	800a85e <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800a7fa:	4620      	mov	r0, r4
}
 800a7fc:	b003      	add	sp, #12
 800a7fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 800a802:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800a804:	2102      	movs	r1, #2
 800a806:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 800a808:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 800a80a:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 800a80e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 800a812:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a814:	b10b      	cbz	r3, 800a81a <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 800a816:	4620      	mov	r0, r4
 800a818:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800a81a:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 800a81c:	b1fb      	cbz	r3, 800a85e <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 800a81e:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 800a822:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800a826:	2304      	movs	r3, #4
 800a828:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 800a82c:	6823      	ldr	r3, [r4, #0]
 800a82e:	68da      	ldr	r2, [r3, #12]
 800a830:	f022 0201 	bic.w	r2, r2, #1
 800a834:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800a836:	9a01      	ldr	r2, [sp, #4]
 800a838:	3201      	adds	r2, #1
 800a83a:	42aa      	cmp	r2, r5
 800a83c:	9201      	str	r2, [sp, #4]
 800a83e:	d802      	bhi.n	800a846 <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800a840:	68da      	ldr	r2, [r3, #12]
 800a842:	07d2      	lsls	r2, r2, #31
 800a844:	d4f7      	bmi.n	800a836 <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800a846:	2200      	movs	r2, #0
 800a848:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800a84c:	68db      	ldr	r3, [r3, #12]
 800a84e:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800a850:	bf4c      	ite	mi
 800a852:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800a854:	2301      	movpl	r3, #1
 800a856:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 800a85a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800a85c:	e7cb      	b.n	800a7f6 <HAL_MDMA_IRQHandler+0xfe>
}
 800a85e:	b003      	add	sp, #12
 800a860:	bd30      	pop	{r4, r5, pc}
 800a862:	bf00      	nop
 800a864:	2400009c 	.word	0x2400009c

0800a868 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800a868:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a86a:	4d1c      	ldr	r5, [pc, #112]	@ (800a8dc <HAL_PWREx_ConfigSupply+0x74>)
{
 800a86c:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800a86e:	68eb      	ldr	r3, [r5, #12]
 800a870:	f003 0307 	and.w	r3, r3, #7
 800a874:	2b06      	cmp	r3, #6
 800a876:	d006      	beq.n	800a886 <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800a878:	68e8      	ldr	r0, [r5, #12]
 800a87a:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 800a87e:	1b00      	subs	r0, r0, r4
 800a880:	bf18      	it	ne
 800a882:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800a884:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800a886:	68eb      	ldr	r3, [r5, #12]
 800a888:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800a88c:	4303      	orrs	r3, r0
 800a88e:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 800a890:	f7fc ff20 	bl	80076d4 <HAL_GetTick>
 800a894:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800a896:	686b      	ldr	r3, [r5, #4]
 800a898:	049a      	lsls	r2, r3, #18
 800a89a:	d508      	bpl.n	800a8ae <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 800a89c:	f1a4 031d 	sub.w	r3, r4, #29
 800a8a0:	2b01      	cmp	r3, #1
 800a8a2:	d90c      	bls.n	800a8be <HAL_PWREx_ConfigSupply+0x56>
 800a8a4:	3c2d      	subs	r4, #45	@ 0x2d
 800a8a6:	2c01      	cmp	r4, #1
 800a8a8:	d909      	bls.n	800a8be <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800a8aa:	2000      	movs	r0, #0
 800a8ac:	e7ea      	b.n	800a884 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a8ae:	f7fc ff11 	bl	80076d4 <HAL_GetTick>
 800a8b2:	1b80      	subs	r0, r0, r6
 800a8b4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a8b8:	d9ed      	bls.n	800a896 <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800a8ba:	2001      	movs	r0, #1
 800a8bc:	e7e2      	b.n	800a884 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 800a8be:	f7fc ff09 	bl	80076d4 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a8c2:	4d06      	ldr	r5, [pc, #24]	@ (800a8dc <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800a8c4:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800a8c6:	68eb      	ldr	r3, [r5, #12]
 800a8c8:	03db      	lsls	r3, r3, #15
 800a8ca:	d4ee      	bmi.n	800a8aa <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 800a8cc:	f7fc ff02 	bl	80076d4 <HAL_GetTick>
 800a8d0:	1b00      	subs	r0, r0, r4
 800a8d2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800a8d6:	d9f6      	bls.n	800a8c6 <HAL_PWREx_ConfigSupply+0x5e>
 800a8d8:	e7ef      	b.n	800a8ba <HAL_PWREx_ConfigSupply+0x52>
 800a8da:	bf00      	nop
 800a8dc:	58024800 	.word	0x58024800

0800a8e0 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 800a8e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 800a8e4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800a8e6:	b135      	cbz	r5, 800a8f6 <QSPI_Config+0x16>
 800a8e8:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 800a8ec:	d003      	beq.n	800a8f6 <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a8ee:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 800a8f0:	6804      	ldr	r4, [r0, #0]
 800a8f2:	3b01      	subs	r3, #1
 800a8f4:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a8f6:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a8fa:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800a8fe:	f1ba 0f00 	cmp.w	sl, #0
 800a902:	d04c      	beq.n	800a99e <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a904:	694c      	ldr	r4, [r1, #20]
 800a906:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 800a90a:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a90c:	680b      	ldr	r3, [r1, #0]
 800a90e:	04a4      	lsls	r4, r4, #18
 800a910:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 800a914:	ea4a 0a02 	orr.w	sl, sl, r2
 800a918:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a91c:	f1b8 0f00 	cmp.w	r8, #0
 800a920:	d026      	beq.n	800a970 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a922:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a924:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a928:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a92a:	ea4a 0508 	orr.w	r5, sl, r8
 800a92e:	b19f      	cbz	r7, 800a958 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a930:	433b      	orrs	r3, r7
 800a932:	4303      	orrs	r3, r0
 800a934:	68c8      	ldr	r0, [r1, #12]
 800a936:	ea43 030e 	orr.w	r3, r3, lr
 800a93a:	ea43 030c 	orr.w	r3, r3, ip
 800a93e:	ea43 0309 	orr.w	r3, r3, r9
 800a942:	4303      	orrs	r3, r0
 800a944:	4323      	orrs	r3, r4
 800a946:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a948:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a94c:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a94e:	d001      	beq.n	800a954 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a950:	684b      	ldr	r3, [r1, #4]
 800a952:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a958:	4303      	orrs	r3, r0
 800a95a:	ea43 030e 	orr.w	r3, r3, lr
 800a95e:	ea43 030c 	orr.w	r3, r3, ip
 800a962:	ea43 0309 	orr.w	r3, r3, r9
 800a966:	4323      	orrs	r3, r4
 800a968:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a96a:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a96c:	61b7      	str	r7, [r6, #24]
 800a96e:	e7f1      	b.n	800a954 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a970:	b15f      	cbz	r7, 800a98a <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a972:	433b      	orrs	r3, r7
 800a974:	4303      	orrs	r3, r0
 800a976:	68c8      	ldr	r0, [r1, #12]
 800a978:	ea43 030e 	orr.w	r3, r3, lr
 800a97c:	ea43 030c 	orr.w	r3, r3, ip
 800a980:	4303      	orrs	r3, r0
 800a982:	4323      	orrs	r3, r4
 800a984:	ea43 030a 	orr.w	r3, r3, sl
 800a988:	e7de      	b.n	800a948 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a98a:	4303      	orrs	r3, r0
 800a98c:	ea43 030e 	orr.w	r3, r3, lr
 800a990:	ea43 050c 	orr.w	r5, r3, ip
 800a994:	ea45 0304 	orr.w	r3, r5, r4
 800a998:	ea43 030a 	orr.w	r3, r3, sl
 800a99c:	e7e5      	b.n	800a96a <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 800a99e:	f1b8 0f00 	cmp.w	r8, #0
 800a9a2:	d02d      	beq.n	800aa00 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a9a4:	688b      	ldr	r3, [r1, #8]
 800a9a6:	ea45 0508 	orr.w	r5, r5, r8
 800a9aa:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9ac:	694e      	ldr	r6, [r1, #20]
 800a9ae:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800a9b0:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9b2:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9b6:	04b6      	lsls	r6, r6, #18
 800a9b8:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9ba:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800a9be:	b1a7      	cbz	r7, 800a9ea <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9c0:	433b      	orrs	r3, r7
 800a9c2:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a9c4:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9c8:	ea43 0309 	orr.w	r3, r3, r9
 800a9cc:	ea43 030e 	orr.w	r3, r3, lr
 800a9d0:	ea43 030c 	orr.w	r3, r3, ip
 800a9d4:	ea43 0300 	orr.w	r3, r3, r0
 800a9d8:	ea43 0306 	orr.w	r3, r3, r6
 800a9dc:	ea43 0305 	orr.w	r3, r3, r5
 800a9e0:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800a9e2:	d0b7      	beq.n	800a954 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800a9e4:	684b      	ldr	r3, [r1, #4]
 800a9e6:	61a3      	str	r3, [r4, #24]
 800a9e8:	e7b4      	b.n	800a954 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800a9ea:	ea43 0209 	orr.w	r2, r3, r9
 800a9ee:	ea42 020e 	orr.w	r2, r2, lr
 800a9f2:	ea42 020c 	orr.w	r2, r2, ip
 800a9f6:	4332      	orrs	r2, r6
 800a9f8:	432a      	orrs	r2, r5
 800a9fa:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 800a9fc:	61a7      	str	r7, [r4, #24]
 800a9fe:	e7a9      	b.n	800a954 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800aa00:	b1d7      	cbz	r7, 800aa38 <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aa02:	ea45 0307 	orr.w	r3, r5, r7
 800aa06:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 800aa08:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800aa0a:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aa0e:	ea43 0302 	orr.w	r3, r3, r2
 800aa12:	ea43 0304 	orr.w	r3, r3, r4
 800aa16:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 800aa18:	ea43 0304 	orr.w	r3, r3, r4
 800aa1c:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 800aa1e:	ea43 0304 	orr.w	r3, r3, r4
 800aa22:	68cc      	ldr	r4, [r1, #12]
 800aa24:	ea43 0304 	orr.w	r3, r3, r4
 800aa28:	694c      	ldr	r4, [r1, #20]
 800aa2a:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 800aa2e:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800aa30:	d090      	beq.n	800a954 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800aa32:	684b      	ldr	r3, [r1, #4]
 800aa34:	6183      	str	r3, [r0, #24]
 800aa36:	e78d      	b.n	800a954 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 800aa38:	2d00      	cmp	r5, #0
 800aa3a:	d08b      	beq.n	800a954 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800aa3c:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 800aa3e:	6800      	ldr	r0, [r0, #0]
 800aa40:	432b      	orrs	r3, r5
 800aa42:	431a      	orrs	r2, r3
 800aa44:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800aa46:	431a      	orrs	r2, r3
 800aa48:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 800aa4a:	431a      	orrs	r2, r3
 800aa4c:	694b      	ldr	r3, [r1, #20]
 800aa4e:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800aa52:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800aa54:	6187      	str	r7, [r0, #24]
}
 800aa56:	e77d      	b.n	800a954 <QSPI_Config+0x74>

0800aa58 <QSPI_WaitFlagStateUntilTimeout>:
{
 800aa58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa5c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 800aa60:	4604      	mov	r4, r0
 800aa62:	460e      	mov	r6, r1
 800aa64:	4615      	mov	r5, r2
 800aa66:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 800aa68:	6822      	ldr	r2, [r4, #0]
 800aa6a:	6893      	ldr	r3, [r2, #8]
 800aa6c:	4233      	tst	r3, r6
 800aa6e:	bf14      	ite	ne
 800aa70:	2301      	movne	r3, #1
 800aa72:	2300      	moveq	r3, #0
 800aa74:	42ab      	cmp	r3, r5
 800aa76:	d101      	bne.n	800aa7c <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 800aa78:	2000      	movs	r0, #0
 800aa7a:	e012      	b.n	800aaa2 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 800aa7c:	f1b8 3fff 	cmp.w	r8, #4294967295
 800aa80:	d0f3      	beq.n	800aa6a <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800aa82:	f7fc fe27 	bl	80076d4 <HAL_GetTick>
 800aa86:	1bc0      	subs	r0, r0, r7
 800aa88:	4540      	cmp	r0, r8
 800aa8a:	d802      	bhi.n	800aa92 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 800aa8c:	f1b8 0f00 	cmp.w	r8, #0
 800aa90:	d1ea      	bne.n	800aa68 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aa92:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aa94:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800aa96:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800aa9a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800aa9c:	f043 0301 	orr.w	r3, r3, #1
 800aaa0:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800aaa2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0800aaa8 <HAL_QSPI_Init>:
{
 800aaa8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800aaaa:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800aaac:	f7fc fe12 	bl	80076d4 <HAL_GetTick>
 800aab0:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800aab2:	2c00      	cmp	r4, #0
 800aab4:	d03f      	beq.n	800ab36 <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800aab6:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800aaba:	b92b      	cbnz	r3, 800aac8 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 800aabc:	4620      	mov	r0, r4
 800aabe:	f7f6 fd83 	bl	80015c8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800aac2:	f241 3388 	movw	r3, #5000	@ 0x1388
 800aac6:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aac8:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aaca:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aacc:	68a3      	ldr	r3, [r4, #8]
 800aace:	680a      	ldr	r2, [r1, #0]
 800aad0:	3b01      	subs	r3, #1
 800aad2:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 800aad6:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aada:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 800aadc:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800aade:	2200      	movs	r2, #0
 800aae0:	9300      	str	r3, [sp, #0]
 800aae2:	2120      	movs	r1, #32
 800aae4:	462b      	mov	r3, r5
 800aae6:	f7ff ffb7 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 800aaea:	bb10      	cbnz	r0, 800ab32 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 800aaec:	6822      	ldr	r2, [r4, #0]
 800aaee:	69e5      	ldr	r5, [r4, #28]
 800aaf0:	68e3      	ldr	r3, [r4, #12]
 800aaf2:	6811      	ldr	r1, [r2, #0]
 800aaf4:	432b      	orrs	r3, r5
 800aaf6:	6a25      	ldr	r5, [r4, #32]
 800aaf8:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 800aafc:	432b      	orrs	r3, r5
 800aafe:	6865      	ldr	r5, [r4, #4]
 800ab00:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 800ab04:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 800ab08:	430b      	orrs	r3, r1
 800ab0a:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 800ab0c:	6855      	ldr	r5, [r2, #4]
 800ab0e:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 800ab12:	430b      	orrs	r3, r1
 800ab14:	6921      	ldr	r1, [r4, #16]
 800ab16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800ab1a:	4908      	ldr	r1, [pc, #32]	@ (800ab3c <HAL_QSPI_Init+0x94>)
 800ab1c:	4029      	ands	r1, r5
 800ab1e:	430b      	orrs	r3, r1
 800ab20:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 800ab22:	6813      	ldr	r3, [r2, #0]
 800ab24:	f043 0301 	orr.w	r3, r3, #1
 800ab28:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab2a:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab2c:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 800ab2e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800ab32:	b003      	add	sp, #12
 800ab34:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800ab36:	2001      	movs	r0, #1
 800ab38:	e7fb      	b.n	800ab32 <HAL_QSPI_Init+0x8a>
 800ab3a:	bf00      	nop
 800ab3c:	ffe0f8fe 	.word	0xffe0f8fe

0800ab40 <HAL_QSPI_Command>:
{
 800ab40:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800ab44:	4604      	mov	r4, r0
 800ab46:	468a      	mov	sl, r1
 800ab48:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 800ab4a:	f7fc fdc3 	bl	80076d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ab4e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ab52:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800ab54:	2b01      	cmp	r3, #1
 800ab56:	d036      	beq.n	800abc6 <HAL_QSPI_Command+0x86>
 800ab58:	2301      	movs	r3, #1
 800ab5a:	2602      	movs	r6, #2
 800ab5c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ab60:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ab64:	2b01      	cmp	r3, #1
 800ab66:	fa5f f983 	uxtb.w	r9, r3
 800ab6a:	d128      	bne.n	800abbe <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab6c:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ab6e:	4603      	mov	r3, r0
 800ab70:	2120      	movs	r1, #32
 800ab72:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ab74:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800ab76:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ab7a:	f8cd 8000 	str.w	r8, [sp]
 800ab7e:	f7ff ff6b 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ab82:	4605      	mov	r5, r0
 800ab84:	b9a0      	cbnz	r0, 800abb0 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ab86:	4602      	mov	r2, r0
 800ab88:	4651      	mov	r1, sl
 800ab8a:	4620      	mov	r0, r4
 800ab8c:	f7ff fea8 	bl	800a8e0 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 800ab90:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800ab94:	b953      	cbnz	r3, 800abac <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ab96:	463b      	mov	r3, r7
 800ab98:	464a      	mov	r2, r9
 800ab9a:	4631      	mov	r1, r6
 800ab9c:	4620      	mov	r0, r4
 800ab9e:	f8cd 8000 	str.w	r8, [sp]
 800aba2:	f7ff ff59 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800aba6:	b960      	cbnz	r0, 800abc2 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800aba8:	6823      	ldr	r3, [r4, #0]
 800abaa:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800abac:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800abb0:	2300      	movs	r3, #0
 800abb2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800abb6:	4628      	mov	r0, r5
 800abb8:	b002      	add	sp, #8
 800abba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 800abbe:	4635      	mov	r5, r6
 800abc0:	e7f6      	b.n	800abb0 <HAL_QSPI_Command+0x70>
 800abc2:	4605      	mov	r5, r0
 800abc4:	e7f4      	b.n	800abb0 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800abc6:	2502      	movs	r5, #2
 800abc8:	e7f5      	b.n	800abb6 <HAL_QSPI_Command+0x76>

0800abca <HAL_QSPI_Transmit>:
{
 800abca:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800abce:	4604      	mov	r4, r0
 800abd0:	4688      	mov	r8, r1
 800abd2:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 800abd4:	f7fc fd7e 	bl	80076d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800abd8:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800abdc:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 800abde:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 800abe0:	2b01      	cmp	r3, #1
 800abe2:	d04c      	beq.n	800ac7e <HAL_QSPI_Transmit+0xb4>
 800abe4:	2301      	movs	r3, #1
 800abe6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800abea:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800abee:	2b01      	cmp	r3, #1
 800abf0:	b2d8      	uxtb	r0, r3
 800abf2:	d142      	bne.n	800ac7a <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800abf4:	2300      	movs	r3, #0
 800abf6:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800abf8:	f1b8 0f00 	cmp.w	r8, #0
 800abfc:	d038      	beq.n	800ac70 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 800abfe:	2312      	movs	r3, #18
 800ac00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac04:	692b      	ldr	r3, [r5, #16]
 800ac06:	3301      	adds	r3, #1
 800ac08:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac0a:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 800ac0c:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800ac10:	3301      	adds	r3, #1
 800ac12:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800ac14:	696b      	ldr	r3, [r5, #20]
 800ac16:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800ac1a:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 800ac1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac1e:	b99b      	cbnz	r3, 800ac48 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ac20:	4633      	mov	r3, r6
 800ac22:	2201      	movs	r2, #1
 800ac24:	2102      	movs	r1, #2
 800ac26:	4620      	mov	r0, r4
 800ac28:	9700      	str	r7, [sp, #0]
 800ac2a:	f7ff ff15 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800ac2e:	b910      	cbnz	r0, 800ac36 <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800ac30:	6823      	ldr	r3, [r4, #0]
 800ac32:	2202      	movs	r2, #2
 800ac34:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800ac36:	2301      	movs	r3, #1
 800ac38:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800ac3c:	2300      	movs	r3, #0
 800ac3e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ac42:	b002      	add	sp, #8
 800ac44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 800ac48:	4633      	mov	r3, r6
 800ac4a:	2201      	movs	r2, #1
 800ac4c:	2104      	movs	r1, #4
 800ac4e:	4620      	mov	r0, r4
 800ac50:	9700      	str	r7, [sp, #0]
 800ac52:	f7ff ff01 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800ac56:	2800      	cmp	r0, #0
 800ac58:	d1ed      	bne.n	800ac36 <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 800ac5a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ac5c:	781b      	ldrb	r3, [r3, #0]
 800ac5e:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800ac62:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800ac64:	3301      	adds	r3, #1
 800ac66:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 800ac68:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ac6a:	3b01      	subs	r3, #1
 800ac6c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800ac6e:	e7d5      	b.n	800ac1c <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ac70:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ac72:	f043 0308 	orr.w	r3, r3, #8
 800ac76:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ac78:	e7e0      	b.n	800ac3c <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 800ac7a:	2002      	movs	r0, #2
 800ac7c:	e7de      	b.n	800ac3c <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 800ac7e:	2002      	movs	r0, #2
 800ac80:	e7df      	b.n	800ac42 <HAL_QSPI_Transmit+0x78>

0800ac82 <HAL_QSPI_Receive>:
{
 800ac82:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800ac86:	4604      	mov	r4, r0
 800ac88:	4617      	mov	r7, r2
 800ac8a:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 800ac8c:	f7fc fd22 	bl	80076d4 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ac90:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800ac92:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800ac94:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800ac96:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 800ac9a:	2b01      	cmp	r3, #1
 800ac9c:	d04f      	beq.n	800ad3e <HAL_QSPI_Receive+0xbc>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800aca4:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800aca8:	2b01      	cmp	r3, #1
 800acaa:	b2d8      	uxtb	r0, r3
 800acac:	d145      	bne.n	800ad3a <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800acae:	2300      	movs	r3, #0
 800acb0:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800acb2:	f1b8 0f00 	cmp.w	r8, #0
 800acb6:	d03b      	beq.n	800ad30 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 800acb8:	2322      	movs	r3, #34	@ 0x22
 800acba:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 800acbe:	692b      	ldr	r3, [r5, #16]
 800acc0:	3301      	adds	r3, #1
 800acc2:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800acc4:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800acc6:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800acca:	3301      	adds	r3, #1
 800accc:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 800acce:	6969      	ldr	r1, [r5, #20]
 800acd0:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 800acd4:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 800acd8:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 800acda:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 800acdc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800acde:	b99b      	cbnz	r3, 800ad08 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800ace0:	4633      	mov	r3, r6
 800ace2:	2201      	movs	r2, #1
 800ace4:	2102      	movs	r1, #2
 800ace6:	4620      	mov	r0, r4
 800ace8:	9700      	str	r7, [sp, #0]
 800acea:	f7ff feb5 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 800acee:	b910      	cbnz	r0, 800acf6 <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 800acf0:	6823      	ldr	r3, [r4, #0]
 800acf2:	2202      	movs	r2, #2
 800acf4:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800acf6:	2301      	movs	r3, #1
 800acf8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800acfc:	2300      	movs	r3, #0
 800acfe:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ad02:	b002      	add	sp, #8
 800ad04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 800ad08:	4633      	mov	r3, r6
 800ad0a:	2201      	movs	r2, #1
 800ad0c:	2106      	movs	r1, #6
 800ad0e:	4620      	mov	r0, r4
 800ad10:	9700      	str	r7, [sp, #0]
 800ad12:	f7ff fea1 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 800ad16:	2800      	cmp	r0, #0
 800ad18:	d1ed      	bne.n	800acf6 <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 800ad1a:	f895 2020 	ldrb.w	r2, [r5, #32]
 800ad1e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ad20:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 800ad22:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ad24:	3301      	adds	r3, #1
 800ad26:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 800ad28:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ad2a:	3b01      	subs	r3, #1
 800ad2c:	63a3      	str	r3, [r4, #56]	@ 0x38
 800ad2e:	e7d5      	b.n	800acdc <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 800ad30:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ad32:	f043 0308 	orr.w	r3, r3, #8
 800ad36:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 800ad38:	e7e0      	b.n	800acfc <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 800ad3a:	2002      	movs	r0, #2
 800ad3c:	e7de      	b.n	800acfc <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 800ad3e:	2002      	movs	r0, #2
 800ad40:	e7df      	b.n	800ad02 <HAL_QSPI_Receive+0x80>

0800ad42 <HAL_QSPI_AutoPolling>:
{
 800ad42:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ad46:	4604      	mov	r4, r0
 800ad48:	461f      	mov	r7, r3
 800ad4a:	4689      	mov	r9, r1
 800ad4c:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 800ad4e:	f7fc fcc1 	bl	80076d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800ad52:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800ad56:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 800ad58:	2b01      	cmp	r3, #1
 800ad5a:	d041      	beq.n	800ade0 <HAL_QSPI_AutoPolling+0x9e>
 800ad5c:	2301      	movs	r3, #1
 800ad5e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ad62:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800ad66:	2b01      	cmp	r3, #1
 800ad68:	fa5f f883 	uxtb.w	r8, r3
 800ad6c:	d136      	bne.n	800addc <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ad6e:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad70:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad72:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ad74:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800ad76:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800ad7a:	4603      	mov	r3, r0
 800ad7c:	9700      	str	r7, [sp, #0]
 800ad7e:	4620      	mov	r0, r4
 800ad80:	f7ff fe6a 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ad84:	bb20      	cbnz	r0, 800add0 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ad86:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ad88:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ad8a:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ad8c:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800ad8e:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 800ad90:	686b      	ldr	r3, [r5, #4]
 800ad92:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800ad94:	68ab      	ldr	r3, [r5, #8]
 800ad96:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ad98:	6813      	ldr	r3, [r2, #0]
 800ad9a:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ad9e:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ada0:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800ada2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800ada6:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800ada8:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 800adac:	68eb      	ldr	r3, [r5, #12]
 800adae:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800adb2:	f7ff fd95 	bl	800a8e0 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800adb6:	4633      	mov	r3, r6
 800adb8:	4642      	mov	r2, r8
 800adba:	2108      	movs	r1, #8
 800adbc:	4620      	mov	r0, r4
 800adbe:	9700      	str	r7, [sp, #0]
 800adc0:	f7ff fe4a 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800adc4:	b920      	cbnz	r0, 800add0 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800adc6:	6823      	ldr	r3, [r4, #0]
 800adc8:	2208      	movs	r2, #8
 800adca:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 800adcc:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 800add0:	2300      	movs	r3, #0
 800add2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800add6:	b003      	add	sp, #12
 800add8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 800addc:	2002      	movs	r0, #2
 800adde:	e7f7      	b.n	800add0 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 800ade0:	2002      	movs	r0, #2
 800ade2:	e7f8      	b.n	800add6 <HAL_QSPI_AutoPolling+0x94>

0800ade4 <HAL_QSPI_MemoryMapped>:
{
 800ade4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ade6:	4604      	mov	r4, r0
 800ade8:	4616      	mov	r6, r2
 800adea:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 800adec:	f7fc fc72 	bl	80076d4 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800adf0:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800adf4:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 800adf6:	2a01      	cmp	r2, #1
 800adf8:	d033      	beq.n	800ae62 <HAL_QSPI_MemoryMapped+0x7e>
 800adfa:	2201      	movs	r2, #1
 800adfc:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800ae00:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 800ae04:	2a01      	cmp	r2, #1
 800ae06:	d12a      	bne.n	800ae5e <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae08:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ae0a:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ae0c:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800ae0e:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 800ae10:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800ae14:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800ae16:	9100      	str	r1, [sp, #0]
 800ae18:	2120      	movs	r1, #32
 800ae1a:	f7ff fe1d 	bl	800aa58 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800ae1e:	4605      	mov	r5, r0
 800ae20:	b9b8      	cbnz	r0, 800ae52 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ae22:	6823      	ldr	r3, [r4, #0]
 800ae24:	6872      	ldr	r2, [r6, #4]
 800ae26:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ae28:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 800ae2a:	f020 0008 	bic.w	r0, r0, #8
 800ae2e:	ea40 0002 	orr.w	r0, r0, r2
 800ae32:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 800ae34:	d107      	bne.n	800ae46 <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 800ae36:	6832      	ldr	r2, [r6, #0]
 800ae38:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 800ae3a:	2210      	movs	r2, #16
 800ae3c:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 800ae3e:	681a      	ldr	r2, [r3, #0]
 800ae40:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 800ae44:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 800ae46:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 800ae4a:	4639      	mov	r1, r7
 800ae4c:	4620      	mov	r0, r4
 800ae4e:	f7ff fd47 	bl	800a8e0 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 800ae52:	2300      	movs	r3, #0
 800ae54:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800ae58:	4628      	mov	r0, r5
 800ae5a:	b003      	add	sp, #12
 800ae5c:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 800ae5e:	2502      	movs	r5, #2
 800ae60:	e7f7      	b.n	800ae52 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 800ae62:	2502      	movs	r5, #2
 800ae64:	e7f8      	b.n	800ae58 <HAL_QSPI_MemoryMapped+0x74>
	...

0800ae68 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800ae68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800ae6a:	4604      	mov	r4, r0
 800ae6c:	2800      	cmp	r0, #0
 800ae6e:	d074      	beq.n	800af5a <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800ae70:	6803      	ldr	r3, [r0, #0]
 800ae72:	07d8      	lsls	r0, r3, #31
 800ae74:	d45e      	bmi.n	800af34 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800ae76:	6823      	ldr	r3, [r4, #0]
 800ae78:	0799      	lsls	r1, r3, #30
 800ae7a:	f100 80ad 	bmi.w	800afd8 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800ae7e:	6823      	ldr	r3, [r4, #0]
 800ae80:	06da      	lsls	r2, r3, #27
 800ae82:	d527      	bpl.n	800aed4 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae84:	4a9c      	ldr	r2, [pc, #624]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800ae86:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800ae88:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800ae8a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800ae8e:	2b08      	cmp	r3, #8
 800ae90:	d007      	beq.n	800aea2 <HAL_RCC_OscConfig+0x3a>
 800ae92:	2b18      	cmp	r3, #24
 800ae94:	f040 8103 	bne.w	800b09e <HAL_RCC_OscConfig+0x236>
 800ae98:	f001 0303 	and.w	r3, r1, #3
 800ae9c:	2b01      	cmp	r3, #1
 800ae9e:	f040 80fe 	bne.w	800b09e <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800aea2:	6813      	ldr	r3, [r2, #0]
 800aea4:	05db      	lsls	r3, r3, #23
 800aea6:	d502      	bpl.n	800aeae <HAL_RCC_OscConfig+0x46>
 800aea8:	69e3      	ldr	r3, [r4, #28]
 800aeaa:	2b80      	cmp	r3, #128	@ 0x80
 800aeac:	d155      	bne.n	800af5a <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800aeae:	f7fc fc29 	bl	8007704 <HAL_GetREVID>
 800aeb2:	f241 0303 	movw	r3, #4099	@ 0x1003
 800aeb6:	6a21      	ldr	r1, [r4, #32]
 800aeb8:	4298      	cmp	r0, r3
 800aeba:	4b8f      	ldr	r3, [pc, #572]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800aebc:	f200 80e8 	bhi.w	800b090 <HAL_RCC_OscConfig+0x228>
 800aec0:	685a      	ldr	r2, [r3, #4]
 800aec2:	2920      	cmp	r1, #32
 800aec4:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 800aec8:	bf0c      	ite	eq
 800aeca:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 800aece:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 800aed2:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800aed4:	6823      	ldr	r3, [r4, #0]
 800aed6:	0719      	lsls	r1, r3, #28
 800aed8:	f100 8123 	bmi.w	800b122 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800aedc:	6823      	ldr	r3, [r4, #0]
 800aede:	069a      	lsls	r2, r3, #26
 800aee0:	f100 8144 	bmi.w	800b16c <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800aee4:	6823      	ldr	r3, [r4, #0]
 800aee6:	075d      	lsls	r5, r3, #29
 800aee8:	d51e      	bpl.n	800af28 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800aeea:	4d84      	ldr	r5, [pc, #528]	@ (800b0fc <HAL_RCC_OscConfig+0x294>)
 800aeec:	682b      	ldr	r3, [r5, #0]
 800aeee:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aef2:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800aef4:	f7fc fbee 	bl	80076d4 <HAL_GetTick>
 800aef8:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aefa:	682b      	ldr	r3, [r5, #0]
 800aefc:	05da      	lsls	r2, r3, #23
 800aefe:	f140 815a 	bpl.w	800b1b6 <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800af02:	68a3      	ldr	r3, [r4, #8]
 800af04:	4d7c      	ldr	r5, [pc, #496]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800af06:	2b01      	cmp	r3, #1
 800af08:	f040 815c 	bne.w	800b1c4 <HAL_RCC_OscConfig+0x35c>
 800af0c:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800af0e:	f043 0301 	orr.w	r3, r3, #1
 800af12:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af14:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 800af18:	f7fc fbdc 	bl	80076d4 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af1c:	4e76      	ldr	r6, [pc, #472]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 800af1e:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af20:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 800af22:	079b      	lsls	r3, r3, #30
 800af24:	f140 8174 	bpl.w	800b210 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800af28:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800af2a:	2900      	cmp	r1, #0
 800af2c:	f040 8177 	bne.w	800b21e <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 800af30:	2000      	movs	r0, #0
 800af32:	e02b      	b.n	800af8c <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af34:	4a70      	ldr	r2, [pc, #448]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800af36:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800af38:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800af3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800af3e:	2b10      	cmp	r3, #16
 800af40:	d005      	beq.n	800af4e <HAL_RCC_OscConfig+0xe6>
 800af42:	2b18      	cmp	r3, #24
 800af44:	d10b      	bne.n	800af5e <HAL_RCC_OscConfig+0xf6>
 800af46:	f001 0303 	and.w	r3, r1, #3
 800af4a:	2b02      	cmp	r3, #2
 800af4c:	d107      	bne.n	800af5e <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800af4e:	6813      	ldr	r3, [r2, #0]
 800af50:	039a      	lsls	r2, r3, #14
 800af52:	d590      	bpl.n	800ae76 <HAL_RCC_OscConfig+0xe>
 800af54:	6863      	ldr	r3, [r4, #4]
 800af56:	2b00      	cmp	r3, #0
 800af58:	d18d      	bne.n	800ae76 <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 800af5a:	2001      	movs	r0, #1
 800af5c:	e016      	b.n	800af8c <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af5e:	6863      	ldr	r3, [r4, #4]
 800af60:	4d65      	ldr	r5, [pc, #404]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800af62:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800af66:	d112      	bne.n	800af8e <HAL_RCC_OscConfig+0x126>
 800af68:	682b      	ldr	r3, [r5, #0]
 800af6a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800af6e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800af70:	f7fc fbb0 	bl	80076d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af74:	4e60      	ldr	r6, [pc, #384]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 800af76:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800af78:	6833      	ldr	r3, [r6, #0]
 800af7a:	039b      	lsls	r3, r3, #14
 800af7c:	f53f af7b 	bmi.w	800ae76 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800af80:	f7fc fba8 	bl	80076d4 <HAL_GetTick>
 800af84:	1b40      	subs	r0, r0, r5
 800af86:	2864      	cmp	r0, #100	@ 0x64
 800af88:	d9f6      	bls.n	800af78 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 800af8a:	2003      	movs	r0, #3
}
 800af8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800af8e:	b9a3      	cbnz	r3, 800afba <HAL_RCC_OscConfig+0x152>
 800af90:	682b      	ldr	r3, [r5, #0]
 800af92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800af96:	602b      	str	r3, [r5, #0]
 800af98:	682b      	ldr	r3, [r5, #0]
 800af9a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800af9e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800afa0:	f7fc fb98 	bl	80076d4 <HAL_GetTick>
 800afa4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800afa6:	682b      	ldr	r3, [r5, #0]
 800afa8:	039f      	lsls	r7, r3, #14
 800afaa:	f57f af64 	bpl.w	800ae76 <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800afae:	f7fc fb91 	bl	80076d4 <HAL_GetTick>
 800afb2:	1b80      	subs	r0, r0, r6
 800afb4:	2864      	cmp	r0, #100	@ 0x64
 800afb6:	d9f6      	bls.n	800afa6 <HAL_RCC_OscConfig+0x13e>
 800afb8:	e7e7      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800afba:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800afbe:	682b      	ldr	r3, [r5, #0]
 800afc0:	d103      	bne.n	800afca <HAL_RCC_OscConfig+0x162>
 800afc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800afc6:	602b      	str	r3, [r5, #0]
 800afc8:	e7ce      	b.n	800af68 <HAL_RCC_OscConfig+0x100>
 800afca:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800afce:	602b      	str	r3, [r5, #0]
 800afd0:	682b      	ldr	r3, [r5, #0]
 800afd2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800afd6:	e7ca      	b.n	800af6e <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800afd8:	4947      	ldr	r1, [pc, #284]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800afda:	68e2      	ldr	r2, [r4, #12]
 800afdc:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800afde:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800afe0:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 800afe4:	d003      	beq.n	800afee <HAL_RCC_OscConfig+0x186>
 800afe6:	2b18      	cmp	r3, #24
 800afe8:	d12a      	bne.n	800b040 <HAL_RCC_OscConfig+0x1d8>
 800afea:	0780      	lsls	r0, r0, #30
 800afec:	d128      	bne.n	800b040 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800afee:	680b      	ldr	r3, [r1, #0]
 800aff0:	075b      	lsls	r3, r3, #29
 800aff2:	d501      	bpl.n	800aff8 <HAL_RCC_OscConfig+0x190>
 800aff4:	2a00      	cmp	r2, #0
 800aff6:	d0b0      	beq.n	800af5a <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800aff8:	4d3f      	ldr	r5, [pc, #252]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800affa:	682b      	ldr	r3, [r5, #0]
 800affc:	f023 0319 	bic.w	r3, r3, #25
 800b000:	4313      	orrs	r3, r2
 800b002:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b004:	f7fc fb66 	bl	80076d4 <HAL_GetTick>
 800b008:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b00a:	682b      	ldr	r3, [r5, #0]
 800b00c:	075f      	lsls	r7, r3, #29
 800b00e:	d511      	bpl.n	800b034 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b010:	f7fc fb78 	bl	8007704 <HAL_GetREVID>
 800b014:	f241 0303 	movw	r3, #4099	@ 0x1003
 800b018:	6922      	ldr	r2, [r4, #16]
 800b01a:	4298      	cmp	r0, r3
 800b01c:	686b      	ldr	r3, [r5, #4]
 800b01e:	d822      	bhi.n	800b066 <HAL_RCC_OscConfig+0x1fe>
 800b020:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b024:	2a40      	cmp	r2, #64	@ 0x40
 800b026:	bf0c      	ite	eq
 800b028:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 800b02c:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 800b030:	606b      	str	r3, [r5, #4]
 800b032:	e724      	b.n	800ae7e <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b034:	f7fc fb4e 	bl	80076d4 <HAL_GetTick>
 800b038:	1b80      	subs	r0, r0, r6
 800b03a:	2802      	cmp	r0, #2
 800b03c:	d9e5      	bls.n	800b00a <HAL_RCC_OscConfig+0x1a2>
 800b03e:	e7a4      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b040:	4d2d      	ldr	r5, [pc, #180]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b042:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800b044:	b1a2      	cbz	r2, 800b070 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800b046:	f023 0319 	bic.w	r3, r3, #25
 800b04a:	4313      	orrs	r3, r2
 800b04c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b04e:	f7fc fb41 	bl	80076d4 <HAL_GetTick>
 800b052:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b054:	682b      	ldr	r3, [r5, #0]
 800b056:	0758      	lsls	r0, r3, #29
 800b058:	d4da      	bmi.n	800b010 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b05a:	f7fc fb3b 	bl	80076d4 <HAL_GetTick>
 800b05e:	1b80      	subs	r0, r0, r6
 800b060:	2802      	cmp	r0, #2
 800b062:	d9f7      	bls.n	800b054 <HAL_RCC_OscConfig+0x1ec>
 800b064:	e791      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800b066:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800b06a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b06e:	e7df      	b.n	800b030 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800b070:	f023 0301 	bic.w	r3, r3, #1
 800b074:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b076:	f7fc fb2d 	bl	80076d4 <HAL_GetTick>
 800b07a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800b07c:	682b      	ldr	r3, [r5, #0]
 800b07e:	0759      	lsls	r1, r3, #29
 800b080:	f57f aefd 	bpl.w	800ae7e <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800b084:	f7fc fb26 	bl	80076d4 <HAL_GetTick>
 800b088:	1b80      	subs	r0, r0, r6
 800b08a:	2802      	cmp	r0, #2
 800b08c:	d9f6      	bls.n	800b07c <HAL_RCC_OscConfig+0x214>
 800b08e:	e77c      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b090:	68da      	ldr	r2, [r3, #12]
 800b092:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800b096:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800b09a:	60da      	str	r2, [r3, #12]
 800b09c:	e71a      	b.n	800aed4 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800b09e:	69e3      	ldr	r3, [r4, #28]
 800b0a0:	4d15      	ldr	r5, [pc, #84]	@ (800b0f8 <HAL_RCC_OscConfig+0x290>)
 800b0a2:	b36b      	cbz	r3, 800b100 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800b0a4:	682b      	ldr	r3, [r5, #0]
 800b0a6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b0aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b0ac:	f7fc fb12 	bl	80076d4 <HAL_GetTick>
 800b0b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b0b2:	682b      	ldr	r3, [r5, #0]
 800b0b4:	05df      	lsls	r7, r3, #23
 800b0b6:	d511      	bpl.n	800b0dc <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0b8:	f7fc fb24 	bl	8007704 <HAL_GetREVID>
 800b0bc:	f241 0303 	movw	r3, #4099	@ 0x1003
 800b0c0:	6a22      	ldr	r2, [r4, #32]
 800b0c2:	4298      	cmp	r0, r3
 800b0c4:	d810      	bhi.n	800b0e8 <HAL_RCC_OscConfig+0x280>
 800b0c6:	686b      	ldr	r3, [r5, #4]
 800b0c8:	2a20      	cmp	r2, #32
 800b0ca:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800b0ce:	bf0c      	ite	eq
 800b0d0:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800b0d4:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800b0d8:	606b      	str	r3, [r5, #4]
 800b0da:	e6fb      	b.n	800aed4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b0dc:	f7fc fafa 	bl	80076d4 <HAL_GetTick>
 800b0e0:	1b80      	subs	r0, r0, r6
 800b0e2:	2802      	cmp	r0, #2
 800b0e4:	d9e5      	bls.n	800b0b2 <HAL_RCC_OscConfig+0x24a>
 800b0e6:	e750      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800b0e8:	68eb      	ldr	r3, [r5, #12]
 800b0ea:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800b0ee:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800b0f2:	60eb      	str	r3, [r5, #12]
 800b0f4:	e6ee      	b.n	800aed4 <HAL_RCC_OscConfig+0x6c>
 800b0f6:	bf00      	nop
 800b0f8:	58024400 	.word	0x58024400
 800b0fc:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800b100:	682b      	ldr	r3, [r5, #0]
 800b102:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b106:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b108:	f7fc fae4 	bl	80076d4 <HAL_GetTick>
 800b10c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800b10e:	682b      	ldr	r3, [r5, #0]
 800b110:	05d8      	lsls	r0, r3, #23
 800b112:	f57f aedf 	bpl.w	800aed4 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800b116:	f7fc fadd 	bl	80076d4 <HAL_GetTick>
 800b11a:	1b80      	subs	r0, r0, r6
 800b11c:	2802      	cmp	r0, #2
 800b11e:	d9f6      	bls.n	800b10e <HAL_RCC_OscConfig+0x2a6>
 800b120:	e733      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800b122:	6963      	ldr	r3, [r4, #20]
 800b124:	4da5      	ldr	r5, [pc, #660]	@ (800b3bc <HAL_RCC_OscConfig+0x554>)
 800b126:	b183      	cbz	r3, 800b14a <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800b128:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b12a:	f043 0301 	orr.w	r3, r3, #1
 800b12e:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b130:	f7fc fad0 	bl	80076d4 <HAL_GetTick>
 800b134:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800b136:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b138:	079b      	lsls	r3, r3, #30
 800b13a:	f53f aecf 	bmi.w	800aedc <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b13e:	f7fc fac9 	bl	80076d4 <HAL_GetTick>
 800b142:	1b80      	subs	r0, r0, r6
 800b144:	2802      	cmp	r0, #2
 800b146:	d9f6      	bls.n	800b136 <HAL_RCC_OscConfig+0x2ce>
 800b148:	e71f      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800b14a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b14c:	f023 0301 	bic.w	r3, r3, #1
 800b150:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800b152:	f7fc fabf 	bl	80076d4 <HAL_GetTick>
 800b156:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800b158:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800b15a:	079f      	lsls	r7, r3, #30
 800b15c:	f57f aebe 	bpl.w	800aedc <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800b160:	f7fc fab8 	bl	80076d4 <HAL_GetTick>
 800b164:	1b80      	subs	r0, r0, r6
 800b166:	2802      	cmp	r0, #2
 800b168:	d9f6      	bls.n	800b158 <HAL_RCC_OscConfig+0x2f0>
 800b16a:	e70e      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800b16c:	69a3      	ldr	r3, [r4, #24]
 800b16e:	4d93      	ldr	r5, [pc, #588]	@ (800b3bc <HAL_RCC_OscConfig+0x554>)
 800b170:	b183      	cbz	r3, 800b194 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800b172:	682b      	ldr	r3, [r5, #0]
 800b174:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800b178:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b17a:	f7fc faab 	bl	80076d4 <HAL_GetTick>
 800b17e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800b180:	682b      	ldr	r3, [r5, #0]
 800b182:	0498      	lsls	r0, r3, #18
 800b184:	f53f aeae 	bmi.w	800aee4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b188:	f7fc faa4 	bl	80076d4 <HAL_GetTick>
 800b18c:	1b80      	subs	r0, r0, r6
 800b18e:	2802      	cmp	r0, #2
 800b190:	d9f6      	bls.n	800b180 <HAL_RCC_OscConfig+0x318>
 800b192:	e6fa      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800b194:	682b      	ldr	r3, [r5, #0]
 800b196:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b19a:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800b19c:	f7fc fa9a 	bl	80076d4 <HAL_GetTick>
 800b1a0:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800b1a2:	682b      	ldr	r3, [r5, #0]
 800b1a4:	0499      	lsls	r1, r3, #18
 800b1a6:	f57f ae9d 	bpl.w	800aee4 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800b1aa:	f7fc fa93 	bl	80076d4 <HAL_GetTick>
 800b1ae:	1b80      	subs	r0, r0, r6
 800b1b0:	2802      	cmp	r0, #2
 800b1b2:	d9f6      	bls.n	800b1a2 <HAL_RCC_OscConfig+0x33a>
 800b1b4:	e6e9      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800b1b6:	f7fc fa8d 	bl	80076d4 <HAL_GetTick>
 800b1ba:	1b80      	subs	r0, r0, r6
 800b1bc:	2864      	cmp	r0, #100	@ 0x64
 800b1be:	f67f ae9c 	bls.w	800aefa <HAL_RCC_OscConfig+0x92>
 800b1c2:	e6e2      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1c4:	b9b3      	cbnz	r3, 800b1f4 <HAL_RCC_OscConfig+0x38c>
 800b1c6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1c8:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1cc:	f023 0301 	bic.w	r3, r3, #1
 800b1d0:	672b      	str	r3, [r5, #112]	@ 0x70
 800b1d2:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b1d4:	f023 0304 	bic.w	r3, r3, #4
 800b1d8:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800b1da:	f7fc fa7b 	bl	80076d4 <HAL_GetTick>
 800b1de:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800b1e0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b1e2:	0798      	lsls	r0, r3, #30
 800b1e4:	f57f aea0 	bpl.w	800af28 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b1e8:	f7fc fa74 	bl	80076d4 <HAL_GetTick>
 800b1ec:	1b80      	subs	r0, r0, r6
 800b1ee:	42b8      	cmp	r0, r7
 800b1f0:	d9f6      	bls.n	800b1e0 <HAL_RCC_OscConfig+0x378>
 800b1f2:	e6ca      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800b1f4:	2b05      	cmp	r3, #5
 800b1f6:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b1f8:	d103      	bne.n	800b202 <HAL_RCC_OscConfig+0x39a>
 800b1fa:	f043 0304 	orr.w	r3, r3, #4
 800b1fe:	672b      	str	r3, [r5, #112]	@ 0x70
 800b200:	e684      	b.n	800af0c <HAL_RCC_OscConfig+0xa4>
 800b202:	f023 0301 	bic.w	r3, r3, #1
 800b206:	672b      	str	r3, [r5, #112]	@ 0x70
 800b208:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800b20a:	f023 0304 	bic.w	r3, r3, #4
 800b20e:	e680      	b.n	800af12 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800b210:	f7fc fa60 	bl	80076d4 <HAL_GetTick>
 800b214:	1b40      	subs	r0, r0, r5
 800b216:	42b8      	cmp	r0, r7
 800b218:	f67f ae82 	bls.w	800af20 <HAL_RCC_OscConfig+0xb8>
 800b21c:	e6b5      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800b21e:	4d67      	ldr	r5, [pc, #412]	@ (800b3bc <HAL_RCC_OscConfig+0x554>)
 800b220:	692b      	ldr	r3, [r5, #16]
 800b222:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b226:	2b18      	cmp	r3, #24
 800b228:	d07a      	beq.n	800b320 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800b22a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b22c:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800b22e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800b232:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800b234:	d167      	bne.n	800b306 <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800b236:	f7fc fa4d 	bl	80076d4 <HAL_GetTick>
 800b23a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b23c:	682b      	ldr	r3, [r5, #0]
 800b23e:	0199      	lsls	r1, r3, #6
 800b240:	d45b      	bmi.n	800b2fa <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800b242:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800b244:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800b246:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800b24a:	f023 0303 	bic.w	r3, r3, #3
 800b24e:	4313      	orrs	r3, r2
 800b250:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800b252:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800b256:	62ab      	str	r3, [r5, #40]	@ 0x28
 800b258:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800b25a:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b25c:	3b01      	subs	r3, #1
 800b25e:	3a01      	subs	r2, #1
 800b260:	025b      	lsls	r3, r3, #9
 800b262:	0412      	lsls	r2, r2, #16
 800b264:	b29b      	uxth	r3, r3
 800b266:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b26a:	4313      	orrs	r3, r2
 800b26c:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b26e:	3a01      	subs	r2, #1
 800b270:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b274:	4313      	orrs	r3, r2
 800b276:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b278:	3a01      	subs	r2, #1
 800b27a:	0612      	lsls	r2, r2, #24
 800b27c:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b280:	4313      	orrs	r3, r2
 800b282:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800b284:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b286:	f023 0301 	bic.w	r3, r3, #1
 800b28a:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b28c:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b28e:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b290:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b294:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b298:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b29c:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800b29e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2a0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800b2a2:	f023 030c 	bic.w	r3, r3, #12
 800b2a6:	4313      	orrs	r3, r2
 800b2a8:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800b2aa:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2ac:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800b2ae:	f023 0302 	bic.w	r3, r3, #2
 800b2b2:	4313      	orrs	r3, r2
 800b2b4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800b2b6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2b8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800b2bc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b2be:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b2c4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800b2c6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2c8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800b2cc:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800b2ce:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b2d0:	f043 0301 	orr.w	r3, r3, #1
 800b2d4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800b2d6:	682b      	ldr	r3, [r5, #0]
 800b2d8:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800b2dc:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800b2de:	f7fc f9f9 	bl	80076d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2e2:	4d36      	ldr	r5, [pc, #216]	@ (800b3bc <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800b2e4:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b2e6:	682b      	ldr	r3, [r5, #0]
 800b2e8:	019a      	lsls	r2, r3, #6
 800b2ea:	f53f ae21 	bmi.w	800af30 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2ee:	f7fc f9f1 	bl	80076d4 <HAL_GetTick>
 800b2f2:	1b00      	subs	r0, r0, r4
 800b2f4:	2802      	cmp	r0, #2
 800b2f6:	d9f6      	bls.n	800b2e6 <HAL_RCC_OscConfig+0x47e>
 800b2f8:	e647      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b2fa:	f7fc f9eb 	bl	80076d4 <HAL_GetTick>
 800b2fe:	1b80      	subs	r0, r0, r6
 800b300:	2802      	cmp	r0, #2
 800b302:	d99b      	bls.n	800b23c <HAL_RCC_OscConfig+0x3d4>
 800b304:	e641      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800b306:	f7fc f9e5 	bl	80076d4 <HAL_GetTick>
 800b30a:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	019b      	lsls	r3, r3, #6
 800b310:	f57f ae0e 	bpl.w	800af30 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800b314:	f7fc f9de 	bl	80076d4 <HAL_GetTick>
 800b318:	1b00      	subs	r0, r0, r4
 800b31a:	2802      	cmp	r0, #2
 800b31c:	d9f6      	bls.n	800b30c <HAL_RCC_OscConfig+0x4a4>
 800b31e:	e634      	b.n	800af8a <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b320:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800b322:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800b324:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b326:	f43f ae18 	beq.w	800af5a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b32a:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800b32e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800b330:	4281      	cmp	r1, r0
 800b332:	f47f ae12 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b336:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800b33a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800b33c:	428a      	cmp	r2, r1
 800b33e:	f47f ae0c 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b342:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800b344:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800b348:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800b34a:	4291      	cmp	r1, r2
 800b34c:	f47f ae05 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b350:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800b352:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800b356:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800b358:	4291      	cmp	r1, r2
 800b35a:	f47f adfe 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b35e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800b360:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800b364:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800b366:	4291      	cmp	r1, r2
 800b368:	f47f adf7 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800b36c:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800b36e:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b372:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800b374:	4293      	cmp	r3, r2
 800b376:	f47f adf0 	bne.w	800af5a <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b37a:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b37c:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800b37e:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800b382:	429a      	cmp	r2, r3
 800b384:	f43f add4 	beq.w	800af30 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800b388:	4d0c      	ldr	r5, [pc, #48]	@ (800b3bc <HAL_RCC_OscConfig+0x554>)
 800b38a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b38c:	f023 0301 	bic.w	r3, r3, #1
 800b390:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800b392:	f7fc f99f 	bl	80076d4 <HAL_GetTick>
 800b396:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800b398:	f7fc f99c 	bl	80076d4 <HAL_GetTick>
 800b39c:	42b0      	cmp	r0, r6
 800b39e:	d0fb      	beq.n	800b398 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800b3a0:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800b3a2:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800b3a4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b3a8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b3ac:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b3b0:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800b3b2:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800b3b4:	f043 0301 	orr.w	r3, r3, #1
 800b3b8:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800b3ba:	e5b9      	b.n	800af30 <HAL_RCC_OscConfig+0xc8>
 800b3bc:	58024400 	.word	0x58024400

0800b3c0 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800b3c0:	b570      	push	{r4, r5, r6, lr}
 800b3c2:	4c23      	ldr	r4, [pc, #140]	@ (800b450 <HAL_RCC_MCOConfig+0x90>)
 800b3c4:	b088      	sub	sp, #32
 800b3c6:	460e      	mov	r6, r1
 800b3c8:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800b3ca:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800b3ce:	b9f8      	cbnz	r0, 800b410 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800b3d0:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3d4:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b3d8:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800b3da:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b3de:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b3e2:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800b3e4:	f003 0301 	and.w	r3, r3, #1
 800b3e8:	9301      	str	r3, [sp, #4]
 800b3ea:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b3ec:	2302      	movs	r3, #2
 800b3ee:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b3f2:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b3f4:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800b3f8:	4816      	ldr	r0, [pc, #88]	@ (800b454 <HAL_RCC_MCOConfig+0x94>)
 800b3fa:	f7fd fa27 	bl	800884c <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800b3fe:	6923      	ldr	r3, [r4, #16]
 800b400:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800b404:	ea43 0106 	orr.w	r1, r3, r6
 800b408:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b40a:	6121      	str	r1, [r4, #16]
  }
}
 800b40c:	b008      	add	sp, #32
 800b40e:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800b410:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b414:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b418:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b41a:	480f      	ldr	r0, [pc, #60]	@ (800b458 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800b41c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800b420:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800b424:	f003 0304 	and.w	r3, r3, #4
 800b428:	9302      	str	r3, [sp, #8]
 800b42a:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b42c:	2302      	movs	r3, #2
 800b42e:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b432:	2300      	movs	r3, #0
 800b434:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b438:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800b43a:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800b43c:	f7fd fa06 	bl	800884c <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800b440:	6923      	ldr	r3, [r4, #16]
 800b442:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800b446:	ea43 0106 	orr.w	r1, r3, r6
 800b44a:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800b44e:	e7dc      	b.n	800b40a <HAL_RCC_MCOConfig+0x4a>
 800b450:	58024400 	.word	0x58024400
 800b454:	58020000 	.word	0x58020000
 800b458:	58020800 	.word	0x58020800

0800b45c <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b45c:	4b49      	ldr	r3, [pc, #292]	@ (800b584 <HAL_RCC_GetSysClockFreq+0x128>)
 800b45e:	691a      	ldr	r2, [r3, #16]
 800b460:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800b464:	2a10      	cmp	r2, #16
{
 800b466:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b468:	f000 8088 	beq.w	800b57c <HAL_RCC_GetSysClockFreq+0x120>
 800b46c:	2a18      	cmp	r2, #24
 800b46e:	d00c      	beq.n	800b48a <HAL_RCC_GetSysClockFreq+0x2e>
 800b470:	2a00      	cmp	r2, #0
 800b472:	f040 8085 	bne.w	800b580 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b476:	681a      	ldr	r2, [r3, #0]
 800b478:	4843      	ldr	r0, [pc, #268]	@ (800b588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b47a:	f012 0f20 	tst.w	r2, #32
 800b47e:	d003      	beq.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800b486:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800b488:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b48a:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b48c:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b48e:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800b490:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800b494:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b498:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800b49a:	d0f5      	beq.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b49c:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800b4a0:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4a4:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4a8:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800b4ac:	4362      	muls	r2, r4
 800b4ae:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800b4b2:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800b4b8:	ee06 2a90 	vmov	s13, r2
 800b4bc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800b4c0:	d04e      	beq.n	800b560 <HAL_RCC_GetSysClockFreq+0x104>
 800b4c2:	2902      	cmp	r1, #2
 800b4c4:	d03e      	beq.n	800b544 <HAL_RCC_GetSysClockFreq+0xe8>
 800b4c6:	2900      	cmp	r1, #0
 800b4c8:	d14a      	bne.n	800b560 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4ca:	681a      	ldr	r2, [r3, #0]
 800b4cc:	0692      	lsls	r2, r2, #26
 800b4ce:	d527      	bpl.n	800b520 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4d0:	6819      	ldr	r1, [r3, #0]
 800b4d2:	4a2d      	ldr	r2, [pc, #180]	@ (800b588 <HAL_RCC_GetSysClockFreq+0x12c>)
 800b4d4:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4da:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b4dc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b4e0:	ee07 2a90 	vmov	s15, r2
 800b4e4:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b4e8:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b4ec:	ee07 3a10 	vmov	s14, r3
 800b4f0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b4f4:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b4f8:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b4fc:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800b500:	4b20      	ldr	r3, [pc, #128]	@ (800b584 <HAL_RCC_GetSysClockFreq+0x128>)
 800b502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b504:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b508:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800b50a:	ee07 3a10 	vmov	s14, r3
 800b50e:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800b512:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b516:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b51a:	ee17 0a90 	vmov	r0, s15
 800b51e:	e7b3      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b520:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b522:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b526:	ee07 3a90 	vmov	s15, r3
 800b52a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b52e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b532:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b536:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800b58c <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b53a:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800b53e:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800b542:	e7dd      	b.n	800b500 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b546:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b54a:	ee07 3a90 	vmov	s15, r3
 800b54e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b552:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b556:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b55a:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800b590 <HAL_RCC_GetSysClockFreq+0x134>
 800b55e:	e7ec      	b.n	800b53a <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800b560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b562:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b566:	ee07 3a90 	vmov	s15, r3
 800b56a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b56e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b572:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b576:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800b594 <HAL_RCC_GetSysClockFreq+0x138>
 800b57a:	e7de      	b.n	800b53a <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800b57c:	4806      	ldr	r0, [pc, #24]	@ (800b598 <HAL_RCC_GetSysClockFreq+0x13c>)
 800b57e:	e783      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800b580:	4806      	ldr	r0, [pc, #24]	@ (800b59c <HAL_RCC_GetSysClockFreq+0x140>)
 800b582:	e781      	b.n	800b488 <HAL_RCC_GetSysClockFreq+0x2c>
 800b584:	58024400 	.word	0x58024400
 800b588:	03d09000 	.word	0x03d09000
 800b58c:	4c742400 	.word	0x4c742400
 800b590:	4bbebc20 	.word	0x4bbebc20
 800b594:	4a742400 	.word	0x4a742400
 800b598:	017d7840 	.word	0x017d7840
 800b59c:	003d0900 	.word	0x003d0900

0800b5a0 <HAL_RCC_ClockConfig>:
{
 800b5a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b5a4:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800b5a6:	4604      	mov	r4, r0
 800b5a8:	b910      	cbnz	r0, 800b5b0 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800b5aa:	2001      	movs	r0, #1
}
 800b5ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800b5b0:	4a88      	ldr	r2, [pc, #544]	@ (800b7d4 <HAL_RCC_ClockConfig+0x234>)
 800b5b2:	6813      	ldr	r3, [r2, #0]
 800b5b4:	f003 030f 	and.w	r3, r3, #15
 800b5b8:	428b      	cmp	r3, r1
 800b5ba:	f0c0 8093 	bcc.w	800b6e4 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b5be:	6823      	ldr	r3, [r4, #0]
 800b5c0:	075f      	lsls	r7, r3, #29
 800b5c2:	f100 809b 	bmi.w	800b6fc <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b5c6:	071e      	lsls	r6, r3, #28
 800b5c8:	d50b      	bpl.n	800b5e2 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b5ca:	4983      	ldr	r1, [pc, #524]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b5cc:	6960      	ldr	r0, [r4, #20]
 800b5ce:	69ca      	ldr	r2, [r1, #28]
 800b5d0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b5d4:	4290      	cmp	r0, r2
 800b5d6:	d904      	bls.n	800b5e2 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b5d8:	69ca      	ldr	r2, [r1, #28]
 800b5da:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b5de:	4302      	orrs	r2, r0
 800b5e0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b5e2:	06d8      	lsls	r0, r3, #27
 800b5e4:	d50b      	bpl.n	800b5fe <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b5e6:	497c      	ldr	r1, [pc, #496]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b5e8:	69a0      	ldr	r0, [r4, #24]
 800b5ea:	69ca      	ldr	r2, [r1, #28]
 800b5ec:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b5f0:	4290      	cmp	r0, r2
 800b5f2:	d904      	bls.n	800b5fe <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b5f4:	69ca      	ldr	r2, [r1, #28]
 800b5f6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b5fa:	4302      	orrs	r2, r0
 800b5fc:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b5fe:	0699      	lsls	r1, r3, #26
 800b600:	d50b      	bpl.n	800b61a <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b602:	4975      	ldr	r1, [pc, #468]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b604:	69e0      	ldr	r0, [r4, #28]
 800b606:	6a0a      	ldr	r2, [r1, #32]
 800b608:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b60c:	4290      	cmp	r0, r2
 800b60e:	d904      	bls.n	800b61a <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b610:	6a0a      	ldr	r2, [r1, #32]
 800b612:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b616:	4302      	orrs	r2, r0
 800b618:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b61a:	079a      	lsls	r2, r3, #30
 800b61c:	d50b      	bpl.n	800b636 <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b61e:	496e      	ldr	r1, [pc, #440]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b620:	68e0      	ldr	r0, [r4, #12]
 800b622:	698a      	ldr	r2, [r1, #24]
 800b624:	f002 020f 	and.w	r2, r2, #15
 800b628:	4290      	cmp	r0, r2
 800b62a:	d904      	bls.n	800b636 <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b62c:	698a      	ldr	r2, [r1, #24]
 800b62e:	f022 020f 	bic.w	r2, r2, #15
 800b632:	4302      	orrs	r2, r0
 800b634:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800b636:	07df      	lsls	r7, r3, #31
 800b638:	d46e      	bmi.n	800b718 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800b63a:	6823      	ldr	r3, [r4, #0]
 800b63c:	079e      	lsls	r6, r3, #30
 800b63e:	f100 80a1 	bmi.w	800b784 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800b642:	4964      	ldr	r1, [pc, #400]	@ (800b7d4 <HAL_RCC_ClockConfig+0x234>)
 800b644:	680a      	ldr	r2, [r1, #0]
 800b646:	f002 020f 	and.w	r2, r2, #15
 800b64a:	42aa      	cmp	r2, r5
 800b64c:	f200 80a8 	bhi.w	800b7a0 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800b650:	0758      	lsls	r0, r3, #29
 800b652:	f100 80b1 	bmi.w	800b7b8 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800b656:	0719      	lsls	r1, r3, #28
 800b658:	d50b      	bpl.n	800b672 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800b65a:	495f      	ldr	r1, [pc, #380]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b65c:	6960      	ldr	r0, [r4, #20]
 800b65e:	69ca      	ldr	r2, [r1, #28]
 800b660:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b664:	4290      	cmp	r0, r2
 800b666:	d204      	bcs.n	800b672 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800b668:	69ca      	ldr	r2, [r1, #28]
 800b66a:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b66e:	4302      	orrs	r2, r0
 800b670:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800b672:	06da      	lsls	r2, r3, #27
 800b674:	d50b      	bpl.n	800b68e <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800b676:	4958      	ldr	r1, [pc, #352]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b678:	69a0      	ldr	r0, [r4, #24]
 800b67a:	69ca      	ldr	r2, [r1, #28]
 800b67c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b680:	4290      	cmp	r0, r2
 800b682:	d204      	bcs.n	800b68e <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800b684:	69ca      	ldr	r2, [r1, #28]
 800b686:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800b68a:	4302      	orrs	r2, r0
 800b68c:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800b68e:	069b      	lsls	r3, r3, #26
 800b690:	d50b      	bpl.n	800b6aa <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800b692:	4a51      	ldr	r2, [pc, #324]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b694:	69e1      	ldr	r1, [r4, #28]
 800b696:	6a13      	ldr	r3, [r2, #32]
 800b698:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b69c:	4299      	cmp	r1, r3
 800b69e:	d204      	bcs.n	800b6aa <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800b6a0:	6a13      	ldr	r3, [r2, #32]
 800b6a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800b6a6:	430b      	orrs	r3, r1
 800b6a8:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800b6aa:	f7ff fed7 	bl	800b45c <HAL_RCC_GetSysClockFreq>
 800b6ae:	494a      	ldr	r1, [pc, #296]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b6b0:	4a4a      	ldr	r2, [pc, #296]	@ (800b7dc <HAL_RCC_ClockConfig+0x23c>)
 800b6b2:	698b      	ldr	r3, [r1, #24]
 800b6b4:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800b6b8:	5cd3      	ldrb	r3, [r2, r3]
 800b6ba:	f003 031f 	and.w	r3, r3, #31
 800b6be:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b6c0:	698b      	ldr	r3, [r1, #24]
 800b6c2:	f003 030f 	and.w	r3, r3, #15
 800b6c6:	5cd3      	ldrb	r3, [r2, r3]
 800b6c8:	4a45      	ldr	r2, [pc, #276]	@ (800b7e0 <HAL_RCC_ClockConfig+0x240>)
 800b6ca:	f003 031f 	and.w	r3, r3, #31
 800b6ce:	fa20 f303 	lsr.w	r3, r0, r3
 800b6d2:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800b6d4:	4b43      	ldr	r3, [pc, #268]	@ (800b7e4 <HAL_RCC_ClockConfig+0x244>)
 800b6d6:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800b6d8:	4b43      	ldr	r3, [pc, #268]	@ (800b7e8 <HAL_RCC_ClockConfig+0x248>)
}
 800b6da:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800b6de:	6818      	ldr	r0, [r3, #0]
 800b6e0:	f7f6 b96c 	b.w	80019bc <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b6e4:	6813      	ldr	r3, [r2, #0]
 800b6e6:	f023 030f 	bic.w	r3, r3, #15
 800b6ea:	430b      	orrs	r3, r1
 800b6ec:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b6ee:	6813      	ldr	r3, [r2, #0]
 800b6f0:	f003 030f 	and.w	r3, r3, #15
 800b6f4:	428b      	cmp	r3, r1
 800b6f6:	f47f af58 	bne.w	800b5aa <HAL_RCC_ClockConfig+0xa>
 800b6fa:	e760      	b.n	800b5be <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b6fc:	4936      	ldr	r1, [pc, #216]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b6fe:	6920      	ldr	r0, [r4, #16]
 800b700:	698a      	ldr	r2, [r1, #24]
 800b702:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b706:	4290      	cmp	r0, r2
 800b708:	f67f af5d 	bls.w	800b5c6 <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b70c:	698a      	ldr	r2, [r1, #24]
 800b70e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b712:	4302      	orrs	r2, r0
 800b714:	618a      	str	r2, [r1, #24]
 800b716:	e756      	b.n	800b5c6 <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800b718:	4b2f      	ldr	r3, [pc, #188]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b71a:	68a1      	ldr	r1, [r4, #8]
 800b71c:	699a      	ldr	r2, [r3, #24]
 800b71e:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800b722:	430a      	orrs	r2, r1
 800b724:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b726:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b728:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800b72a:	2902      	cmp	r1, #2
 800b72c:	d11d      	bne.n	800b76a <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800b72e:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b732:	f43f af3a 	beq.w	800b5aa <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b736:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b738:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b73c:	4f26      	ldr	r7, [pc, #152]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800b73e:	f022 0207 	bic.w	r2, r2, #7
 800b742:	430a      	orrs	r2, r1
 800b744:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800b746:	f7fb ffc5 	bl	80076d4 <HAL_GetTick>
 800b74a:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800b74c:	693b      	ldr	r3, [r7, #16]
 800b74e:	6862      	ldr	r2, [r4, #4]
 800b750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800b754:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800b758:	f43f af6f 	beq.w	800b63a <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800b75c:	f7fb ffba 	bl	80076d4 <HAL_GetTick>
 800b760:	1b80      	subs	r0, r0, r6
 800b762:	4540      	cmp	r0, r8
 800b764:	d9f2      	bls.n	800b74c <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800b766:	2003      	movs	r0, #3
 800b768:	e720      	b.n	800b5ac <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800b76a:	2903      	cmp	r1, #3
 800b76c:	d102      	bne.n	800b774 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800b76e:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800b772:	e7de      	b.n	800b732 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800b774:	2901      	cmp	r1, #1
 800b776:	d102      	bne.n	800b77e <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800b778:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800b77c:	e7d9      	b.n	800b732 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800b77e:	f012 0f04 	tst.w	r2, #4
 800b782:	e7d6      	b.n	800b732 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800b784:	4914      	ldr	r1, [pc, #80]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b786:	68e0      	ldr	r0, [r4, #12]
 800b788:	698a      	ldr	r2, [r1, #24]
 800b78a:	f002 020f 	and.w	r2, r2, #15
 800b78e:	4290      	cmp	r0, r2
 800b790:	f4bf af57 	bcs.w	800b642 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800b794:	698a      	ldr	r2, [r1, #24]
 800b796:	f022 020f 	bic.w	r2, r2, #15
 800b79a:	4302      	orrs	r2, r0
 800b79c:	618a      	str	r2, [r1, #24]
 800b79e:	e750      	b.n	800b642 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800b7a0:	680a      	ldr	r2, [r1, #0]
 800b7a2:	f022 020f 	bic.w	r2, r2, #15
 800b7a6:	432a      	orrs	r2, r5
 800b7a8:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800b7aa:	680a      	ldr	r2, [r1, #0]
 800b7ac:	f002 020f 	and.w	r2, r2, #15
 800b7b0:	42aa      	cmp	r2, r5
 800b7b2:	f47f aefa 	bne.w	800b5aa <HAL_RCC_ClockConfig+0xa>
 800b7b6:	e74b      	b.n	800b650 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800b7b8:	4907      	ldr	r1, [pc, #28]	@ (800b7d8 <HAL_RCC_ClockConfig+0x238>)
 800b7ba:	6920      	ldr	r0, [r4, #16]
 800b7bc:	698a      	ldr	r2, [r1, #24]
 800b7be:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b7c2:	4290      	cmp	r0, r2
 800b7c4:	f4bf af47 	bcs.w	800b656 <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800b7c8:	698a      	ldr	r2, [r1, #24]
 800b7ca:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800b7ce:	4302      	orrs	r2, r0
 800b7d0:	618a      	str	r2, [r1, #24]
 800b7d2:	e740      	b.n	800b656 <HAL_RCC_ClockConfig+0xb6>
 800b7d4:	52002000 	.word	0x52002000
 800b7d8:	58024400 	.word	0x58024400
 800b7dc:	0802a8c8 	.word	0x0802a8c8
 800b7e0:	24000098 	.word	0x24000098
 800b7e4:	2400009c 	.word	0x2400009c
 800b7e8:	240000a4 	.word	0x240000a4

0800b7ec <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800b7ec:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7ee:	f7ff fe35 	bl	800b45c <HAL_RCC_GetSysClockFreq>
 800b7f2:	4a0b      	ldr	r2, [pc, #44]	@ (800b820 <HAL_RCC_GetHCLKFreq+0x34>)
 800b7f4:	490b      	ldr	r1, [pc, #44]	@ (800b824 <HAL_RCC_GetHCLKFreq+0x38>)
 800b7f6:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7f8:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b7fa:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b7fe:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800b802:	5ccb      	ldrb	r3, [r1, r3]
 800b804:	f003 031f 	and.w	r3, r3, #31
 800b808:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800b80c:	5c88      	ldrb	r0, [r1, r2]
 800b80e:	4a06      	ldr	r2, [pc, #24]	@ (800b828 <HAL_RCC_GetHCLKFreq+0x3c>)
 800b810:	f000 001f 	and.w	r0, r0, #31
 800b814:	fa23 f000 	lsr.w	r0, r3, r0
 800b818:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800b81a:	4a04      	ldr	r2, [pc, #16]	@ (800b82c <HAL_RCC_GetHCLKFreq+0x40>)
 800b81c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800b81e:	bd08      	pop	{r3, pc}
 800b820:	58024400 	.word	0x58024400
 800b824:	0802a8c8 	.word	0x0802a8c8
 800b828:	24000098 	.word	0x24000098
 800b82c:	2400009c 	.word	0x2400009c

0800b830 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800b830:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800b832:	f7ff ffdb 	bl	800b7ec <HAL_RCC_GetHCLKFreq>
 800b836:	4b05      	ldr	r3, [pc, #20]	@ (800b84c <HAL_RCC_GetPCLK1Freq+0x1c>)
 800b838:	4a05      	ldr	r2, [pc, #20]	@ (800b850 <HAL_RCC_GetPCLK1Freq+0x20>)
 800b83a:	69db      	ldr	r3, [r3, #28]
 800b83c:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b840:	5cd3      	ldrb	r3, [r2, r3]
 800b842:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800b846:	40d8      	lsrs	r0, r3
 800b848:	bd08      	pop	{r3, pc}
 800b84a:	bf00      	nop
 800b84c:	58024400 	.word	0x58024400
 800b850:	0802a8c8 	.word	0x0802a8c8

0800b854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800b854:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800b856:	f7ff ffc9 	bl	800b7ec <HAL_RCC_GetHCLKFreq>
 800b85a:	4b05      	ldr	r3, [pc, #20]	@ (800b870 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800b85c:	4a05      	ldr	r2, [pc, #20]	@ (800b874 <HAL_RCC_GetPCLK2Freq+0x20>)
 800b85e:	69db      	ldr	r3, [r3, #28]
 800b860:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800b864:	5cd3      	ldrb	r3, [r2, r3]
 800b866:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800b86a:	40d8      	lsrs	r0, r3
 800b86c:	bd08      	pop	{r3, pc}
 800b86e:	bf00      	nop
 800b870:	58024400 	.word	0x58024400
 800b874:	0802a8c8 	.word	0x0802a8c8

0800b878 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800b878:	233f      	movs	r3, #63	@ 0x3f
 800b87a:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800b87c:	4b11      	ldr	r3, [pc, #68]	@ (800b8c4 <HAL_RCC_GetClockConfig+0x4c>)
 800b87e:	691a      	ldr	r2, [r3, #16]
 800b880:	f002 0207 	and.w	r2, r2, #7
 800b884:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800b886:	699a      	ldr	r2, [r3, #24]
 800b888:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800b88c:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800b88e:	699a      	ldr	r2, [r3, #24]
 800b890:	f002 020f 	and.w	r2, r2, #15
 800b894:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800b896:	699a      	ldr	r2, [r3, #24]
 800b898:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b89c:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800b89e:	69da      	ldr	r2, [r3, #28]
 800b8a0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800b8a4:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800b8a6:	69da      	ldr	r2, [r3, #28]
 800b8a8:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800b8ac:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800b8ae:	6a1b      	ldr	r3, [r3, #32]
 800b8b0:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800b8b4:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800b8b6:	4b04      	ldr	r3, [pc, #16]	@ (800b8c8 <HAL_RCC_GetClockConfig+0x50>)
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	f003 030f 	and.w	r3, r3, #15
 800b8be:	600b      	str	r3, [r1, #0]
}
 800b8c0:	4770      	bx	lr
 800b8c2:	bf00      	nop
 800b8c4:	58024400 	.word	0x58024400
 800b8c8:	52002000 	.word	0x52002000

0800b8cc <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800b8cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8ce:	4c3a      	ldr	r4, [pc, #232]	@ (800b9b8 <RCCEx_PLL2_Config+0xec>)
{
 800b8d0:	4606      	mov	r6, r0
 800b8d2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b8d4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b8d6:	f003 0303 	and.w	r3, r3, #3
 800b8da:	2b03      	cmp	r3, #3
 800b8dc:	d069      	beq.n	800b9b2 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800b8de:	6823      	ldr	r3, [r4, #0]
 800b8e0:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800b8e4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b8e6:	f7fb fef5 	bl	80076d4 <HAL_GetTick>
 800b8ea:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800b8ec:	6823      	ldr	r3, [r4, #0]
 800b8ee:	011a      	lsls	r2, r3, #4
 800b8f0:	d44b      	bmi.n	800b98a <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800b8f2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b8f4:	6832      	ldr	r2, [r6, #0]
 800b8f6:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800b8fa:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800b8fe:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b900:	68b3      	ldr	r3, [r6, #8]
 800b902:	68f2      	ldr	r2, [r6, #12]
 800b904:	3b01      	subs	r3, #1
 800b906:	3a01      	subs	r2, #1
 800b908:	025b      	lsls	r3, r3, #9
 800b90a:	0412      	lsls	r2, r2, #16
 800b90c:	b29b      	uxth	r3, r3
 800b90e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800b912:	4313      	orrs	r3, r2
 800b914:	6872      	ldr	r2, [r6, #4]
 800b916:	3a01      	subs	r2, #1
 800b918:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800b91c:	4313      	orrs	r3, r2
 800b91e:	6932      	ldr	r2, [r6, #16]
 800b920:	3a01      	subs	r2, #1
 800b922:	0612      	lsls	r2, r2, #24
 800b924:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800b928:	4313      	orrs	r3, r2
 800b92a:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800b92c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b92e:	6972      	ldr	r2, [r6, #20]
 800b930:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800b934:	4313      	orrs	r3, r2
 800b936:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800b938:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b93a:	69b2      	ldr	r2, [r6, #24]
 800b93c:	f023 0320 	bic.w	r3, r3, #32
 800b940:	4313      	orrs	r3, r2
 800b942:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800b944:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b946:	f023 0310 	bic.w	r3, r3, #16
 800b94a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800b94c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800b94e:	69f2      	ldr	r2, [r6, #28]
 800b950:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800b954:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800b958:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800b95c:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800b95e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800b960:	f043 0310 	orr.w	r3, r3, #16
 800b964:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b966:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800b968:	b9b5      	cbnz	r5, 800b998 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800b96a:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b96e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800b970:	4c11      	ldr	r4, [pc, #68]	@ (800b9b8 <RCCEx_PLL2_Config+0xec>)
 800b972:	6823      	ldr	r3, [r4, #0]
 800b974:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800b978:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b97a:	f7fb feab 	bl	80076d4 <HAL_GetTick>
 800b97e:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800b980:	6823      	ldr	r3, [r4, #0]
 800b982:	011b      	lsls	r3, r3, #4
 800b984:	d50f      	bpl.n	800b9a6 <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800b986:	2000      	movs	r0, #0
 800b988:	e005      	b.n	800b996 <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b98a:	f7fb fea3 	bl	80076d4 <HAL_GetTick>
 800b98e:	1bc0      	subs	r0, r0, r7
 800b990:	2802      	cmp	r0, #2
 800b992:	d9ab      	bls.n	800b8ec <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800b994:	2003      	movs	r0, #3
}
 800b996:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800b998:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800b99a:	bf0c      	ite	eq
 800b99c:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800b9a0:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800b9a4:	e7e3      	b.n	800b96e <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800b9a6:	f7fb fe95 	bl	80076d4 <HAL_GetTick>
 800b9aa:	1b40      	subs	r0, r0, r5
 800b9ac:	2802      	cmp	r0, #2
 800b9ae:	d9e7      	bls.n	800b980 <RCCEx_PLL2_Config+0xb4>
 800b9b0:	e7f0      	b.n	800b994 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800b9b2:	2001      	movs	r0, #1
 800b9b4:	e7ef      	b.n	800b996 <RCCEx_PLL2_Config+0xca>
 800b9b6:	bf00      	nop
 800b9b8:	58024400 	.word	0x58024400

0800b9bc <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800b9bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9be:	4c3a      	ldr	r4, [pc, #232]	@ (800baa8 <RCCEx_PLL3_Config+0xec>)
{
 800b9c0:	4606      	mov	r6, r0
 800b9c2:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800b9c4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b9c6:	f003 0303 	and.w	r3, r3, #3
 800b9ca:	2b03      	cmp	r3, #3
 800b9cc:	d069      	beq.n	800baa2 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800b9ce:	6823      	ldr	r3, [r4, #0]
 800b9d0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800b9d4:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800b9d6:	f7fb fe7d 	bl	80076d4 <HAL_GetTick>
 800b9da:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	009a      	lsls	r2, r3, #2
 800b9e0:	d44b      	bmi.n	800ba7a <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800b9e2:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800b9e4:	6832      	ldr	r2, [r6, #0]
 800b9e6:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800b9ea:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800b9ee:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b9f0:	68b3      	ldr	r3, [r6, #8]
 800b9f2:	68f2      	ldr	r2, [r6, #12]
 800b9f4:	3b01      	subs	r3, #1
 800b9f6:	3a01      	subs	r2, #1
 800b9f8:	025b      	lsls	r3, r3, #9
 800b9fa:	0412      	lsls	r2, r2, #16
 800b9fc:	b29b      	uxth	r3, r3
 800b9fe:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800ba02:	4313      	orrs	r3, r2
 800ba04:	6872      	ldr	r2, [r6, #4]
 800ba06:	3a01      	subs	r2, #1
 800ba08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800ba0c:	4313      	orrs	r3, r2
 800ba0e:	6932      	ldr	r2, [r6, #16]
 800ba10:	3a01      	subs	r2, #1
 800ba12:	0612      	lsls	r2, r2, #24
 800ba14:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800ba18:	4313      	orrs	r3, r2
 800ba1a:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800ba1c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba1e:	6972      	ldr	r2, [r6, #20]
 800ba20:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800ba24:	4313      	orrs	r3, r2
 800ba26:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800ba28:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba2a:	69b2      	ldr	r2, [r6, #24]
 800ba2c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800ba30:	4313      	orrs	r3, r2
 800ba32:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800ba34:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba36:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ba3a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800ba3c:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ba3e:	69f2      	ldr	r2, [r6, #28]
 800ba40:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800ba44:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800ba48:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800ba4c:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800ba4e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ba50:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ba54:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba56:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800ba58:	b9b5      	cbnz	r5, 800ba88 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800ba5a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba5e:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800ba60:	4c11      	ldr	r4, [pc, #68]	@ (800baa8 <RCCEx_PLL3_Config+0xec>)
 800ba62:	6823      	ldr	r3, [r4, #0]
 800ba64:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800ba68:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800ba6a:	f7fb fe33 	bl	80076d4 <HAL_GetTick>
 800ba6e:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800ba70:	6823      	ldr	r3, [r4, #0]
 800ba72:	009b      	lsls	r3, r3, #2
 800ba74:	d50f      	bpl.n	800ba96 <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800ba76:	2000      	movs	r0, #0
 800ba78:	e005      	b.n	800ba86 <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba7a:	f7fb fe2b 	bl	80076d4 <HAL_GetTick>
 800ba7e:	1bc0      	subs	r0, r0, r7
 800ba80:	2802      	cmp	r0, #2
 800ba82:	d9ab      	bls.n	800b9dc <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800ba84:	2003      	movs	r0, #3
}
 800ba86:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800ba88:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800ba8a:	bf0c      	ite	eq
 800ba8c:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800ba90:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800ba94:	e7e3      	b.n	800ba5e <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800ba96:	f7fb fe1d 	bl	80076d4 <HAL_GetTick>
 800ba9a:	1b40      	subs	r0, r0, r5
 800ba9c:	2802      	cmp	r0, #2
 800ba9e:	d9e7      	bls.n	800ba70 <RCCEx_PLL3_Config+0xb4>
 800baa0:	e7f0      	b.n	800ba84 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800baa2:	2001      	movs	r0, #1
 800baa4:	e7ef      	b.n	800ba86 <RCCEx_PLL3_Config+0xca>
 800baa6:	bf00      	nop
 800baa8:	58024400 	.word	0x58024400

0800baac <HAL_RCCEx_PeriphCLKConfig>:
{
 800baac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bab0:	6803      	ldr	r3, [r0, #0]
{
 800bab2:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800bab4:	011c      	lsls	r4, r3, #4
 800bab6:	d51e      	bpl.n	800baf6 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bab8:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800baba:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800babe:	d02a      	beq.n	800bb16 <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800bac0:	d80f      	bhi.n	800bae2 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800bac2:	b1d3      	cbz	r3, 800bafa <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800bac4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800bac8:	d01d      	beq.n	800bb06 <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800baca:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800bacc:	682b      	ldr	r3, [r5, #0]
 800bace:	05d8      	lsls	r0, r3, #23
 800bad0:	d54f      	bpl.n	800bb72 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bad2:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800bad4:	2b04      	cmp	r3, #4
 800bad6:	d84b      	bhi.n	800bb70 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800bad8:	e8df f003 	tbb	[pc, r3]
 800badc:	27443d22 	.word	0x27443d22
 800bae0:	27          	.byte	0x27
 800bae1:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bae2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800bae6:	d1f0      	bne.n	800baca <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800bae8:	4a86      	ldr	r2, [pc, #536]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800baea:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800baec:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800baee:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800baf2:	430b      	orrs	r3, r1
 800baf4:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800baf6:	2600      	movs	r6, #0
 800baf8:	e7e8      	b.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bafa:	4a82      	ldr	r2, [pc, #520]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bafc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bafe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb02:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bb04:	e7f0      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bb06:	2102      	movs	r1, #2
 800bb08:	3008      	adds	r0, #8
 800bb0a:	f7ff fedf 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb0e:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800bb10:	2800      	cmp	r0, #0
 800bb12:	d1db      	bne.n	800bacc <HAL_RCCEx_PeriphCLKConfig+0x20>
 800bb14:	e7e8      	b.n	800bae8 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800bb16:	2102      	movs	r1, #2
 800bb18:	3028      	adds	r0, #40	@ 0x28
 800bb1a:	f7ff ff4f 	bl	800b9bc <RCCEx_PLL3_Config>
 800bb1e:	e7f6      	b.n	800bb0e <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bb20:	4a78      	ldr	r2, [pc, #480]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bb22:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bb24:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bb28:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800bb2a:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800bb2c:	bb1c      	cbnz	r4, 800bb76 <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800bb2e:	4a75      	ldr	r2, [pc, #468]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bb30:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800bb32:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bb34:	f023 0307 	bic.w	r3, r3, #7
 800bb38:	430b      	orrs	r3, r1
 800bb3a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800bb3c:	682b      	ldr	r3, [r5, #0]
 800bb3e:	0599      	lsls	r1, r3, #22
 800bb40:	d528      	bpl.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb42:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800bb44:	2b80      	cmp	r3, #128	@ 0x80
 800bb46:	d043      	beq.n	800bbd0 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800bb48:	d817      	bhi.n	800bb7a <HAL_RCCEx_PeriphCLKConfig+0xce>
 800bb4a:	b3a3      	cbz	r3, 800bbb6 <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800bb4c:	2b40      	cmp	r3, #64	@ 0x40
 800bb4e:	d038      	beq.n	800bbc2 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800bb50:	2601      	movs	r6, #1
 800bb52:	4634      	mov	r4, r6
 800bb54:	e01e      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bb56:	2100      	movs	r1, #0
 800bb58:	f105 0008 	add.w	r0, r5, #8
 800bb5c:	f7ff feb6 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb60:	4604      	mov	r4, r0
        break;
 800bb62:	e7e3      	b.n	800bb2c <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bb64:	2100      	movs	r1, #0
 800bb66:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bb6a:	f7ff ff27 	bl	800b9bc <RCCEx_PLL3_Config>
 800bb6e:	e7f7      	b.n	800bb60 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800bb70:	2601      	movs	r6, #1
 800bb72:	4634      	mov	r4, r6
 800bb74:	e7e2      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x90>
 800bb76:	4626      	mov	r6, r4
 800bb78:	e7e0      	b.n	800bb3c <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800bb7a:	2bc0      	cmp	r3, #192	@ 0xc0
 800bb7c:	d002      	beq.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800bb7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bb82:	d1e5      	bne.n	800bb50 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800bb84:	bb54      	cbnz	r4, 800bbdc <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800bb86:	4a5f      	ldr	r2, [pc, #380]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bb88:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800bb8a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bb8c:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800bb90:	430b      	orrs	r3, r1
 800bb92:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800bb94:	682b      	ldr	r3, [r5, #0]
 800bb96:	055a      	lsls	r2, r3, #21
 800bb98:	d531      	bpl.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bb9a:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800bb9e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800bba2:	d049      	beq.n	800bc38 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800bba4:	d81c      	bhi.n	800bbe0 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d039      	beq.n	800bc1e <HAL_RCCEx_PeriphCLKConfig+0x172>
 800bbaa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800bbae:	d03c      	beq.n	800bc2a <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800bbb0:	2601      	movs	r6, #1
 800bbb2:	4634      	mov	r4, r6
 800bbb4:	e023      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bbb6:	4a53      	ldr	r2, [pc, #332]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bbb8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bbba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bbbe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bbc0:	e7e0      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bbc2:	2100      	movs	r1, #0
 800bbc4:	f105 0008 	add.w	r0, r5, #8
 800bbc8:	f7ff fe80 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbcc:	4604      	mov	r4, r0
        break;
 800bbce:	e7d9      	b.n	800bb84 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bbd0:	2100      	movs	r1, #0
 800bbd2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bbd6:	f7ff fef1 	bl	800b9bc <RCCEx_PLL3_Config>
 800bbda:	e7f7      	b.n	800bbcc <HAL_RCCEx_PeriphCLKConfig+0x120>
 800bbdc:	4626      	mov	r6, r4
 800bbde:	e7d9      	b.n	800bb94 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800bbe0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800bbe4:	d002      	beq.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x140>
 800bbe6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800bbea:	d1e1      	bne.n	800bbb0 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800bbec:	bb54      	cbnz	r4, 800bc44 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800bbee:	4a45      	ldr	r2, [pc, #276]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bbf0:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800bbf4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bbf6:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800bbfa:	430b      	orrs	r3, r1
 800bbfc:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800bbfe:	682b      	ldr	r3, [r5, #0]
 800bc00:	051b      	lsls	r3, r3, #20
 800bc02:	d530      	bpl.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bc04:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800bc08:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800bc0c:	d045      	beq.n	800bc9a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800bc0e:	d81b      	bhi.n	800bc48 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800bc10:	b3b3      	cbz	r3, 800bc80 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800bc12:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800bc16:	d039      	beq.n	800bc8c <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800bc18:	2601      	movs	r6, #1
 800bc1a:	4634      	mov	r4, r6
 800bc1c:	e023      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc1e:	4a39      	ldr	r2, [pc, #228]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bc20:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bc22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc26:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bc28:	e7e0      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc2a:	2100      	movs	r1, #0
 800bc2c:	f105 0008 	add.w	r0, r5, #8
 800bc30:	f7ff fe4c 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc34:	4604      	mov	r4, r0
        break;
 800bc36:	e7d9      	b.n	800bbec <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc38:	2100      	movs	r1, #0
 800bc3a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bc3e:	f7ff febd 	bl	800b9bc <RCCEx_PLL3_Config>
 800bc42:	e7f7      	b.n	800bc34 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800bc44:	4626      	mov	r6, r4
 800bc46:	e7da      	b.n	800bbfe <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800bc48:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800bc4c:	d002      	beq.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800bc4e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800bc52:	d1e1      	bne.n	800bc18 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800bc54:	bb3c      	cbnz	r4, 800bca6 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800bc56:	4a2b      	ldr	r2, [pc, #172]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bc58:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800bc5c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bc5e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800bc62:	430b      	orrs	r3, r1
 800bc64:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800bc66:	682b      	ldr	r3, [r5, #0]
 800bc68:	019f      	lsls	r7, r3, #6
 800bc6a:	d528      	bpl.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800bc6c:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800bc6e:	2b20      	cmp	r3, #32
 800bc70:	d03e      	beq.n	800bcf0 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800bc72:	d81a      	bhi.n	800bcaa <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800bc74:	b1db      	cbz	r3, 800bcae <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bc76:	2b10      	cmp	r3, #16
 800bc78:	d034      	beq.n	800bce4 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800bc7a:	2601      	movs	r6, #1
 800bc7c:	4634      	mov	r4, r6
 800bc7e:	e01e      	b.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bc80:	4a20      	ldr	r2, [pc, #128]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bc82:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bc84:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bc88:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bc8a:	e7e3      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bc8c:	2100      	movs	r1, #0
 800bc8e:	f105 0008 	add.w	r0, r5, #8
 800bc92:	f7ff fe1b 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc96:	4604      	mov	r4, r0
        break;
 800bc98:	e7dc      	b.n	800bc54 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bc9a:	2100      	movs	r1, #0
 800bc9c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800bca0:	f7ff fe8c 	bl	800b9bc <RCCEx_PLL3_Config>
 800bca4:	e7f7      	b.n	800bc96 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800bca6:	4626      	mov	r6, r4
 800bca8:	e7dd      	b.n	800bc66 <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800bcaa:	2b30      	cmp	r3, #48	@ 0x30
 800bcac:	d1e5      	bne.n	800bc7a <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800bcae:	bb34      	cbnz	r4, 800bcfe <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800bcb0:	4a14      	ldr	r2, [pc, #80]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bcb2:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800bcb4:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bcb6:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800bcba:	430b      	orrs	r3, r1
 800bcbc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800bcbe:	682b      	ldr	r3, [r5, #0]
 800bcc0:	04d8      	lsls	r0, r3, #19
 800bcc2:	d530      	bpl.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800bcc4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800bcc6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800bcca:	f000 8097 	beq.w	800bdfc <HAL_RCCEx_PeriphCLKConfig+0x350>
 800bcce:	d81b      	bhi.n	800bd08 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800bcd0:	2b00      	cmp	r3, #0
 800bcd2:	f000 8086 	beq.w	800bde2 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800bcd6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800bcda:	f000 8088 	beq.w	800bdee <HAL_RCCEx_PeriphCLKConfig+0x342>
 800bcde:	2601      	movs	r6, #1
 800bce0:	4634      	mov	r4, r6
 800bce2:	e020      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bce4:	4a07      	ldr	r2, [pc, #28]	@ (800bd04 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800bce6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bce8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bcec:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bcee:	e7de      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bcf0:	2102      	movs	r1, #2
 800bcf2:	f105 0008 	add.w	r0, r5, #8
 800bcf6:	f7ff fde9 	bl	800b8cc <RCCEx_PLL2_Config>
 800bcfa:	4604      	mov	r4, r0
        break;
 800bcfc:	e7d7      	b.n	800bcae <HAL_RCCEx_PeriphCLKConfig+0x202>
 800bcfe:	4626      	mov	r6, r4
 800bd00:	e7dd      	b.n	800bcbe <HAL_RCCEx_PeriphCLKConfig+0x212>
 800bd02:	bf00      	nop
 800bd04:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800bd08:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800bd0c:	d002      	beq.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800bd0e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800bd12:	d1e4      	bne.n	800bcde <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800bd14:	2c00      	cmp	r4, #0
 800bd16:	d177      	bne.n	800be08 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800bd18:	4a9e      	ldr	r2, [pc, #632]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bd1a:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800bd1c:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bd1e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800bd22:	430b      	orrs	r3, r1
 800bd24:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800bd26:	682b      	ldr	r3, [r5, #0]
 800bd28:	0499      	lsls	r1, r3, #18
 800bd2a:	d50c      	bpl.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800bd2c:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800bd2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800bd32:	f000 8083 	beq.w	800be3c <HAL_RCCEx_PeriphCLKConfig+0x390>
 800bd36:	d869      	bhi.n	800be0c <HAL_RCCEx_PeriphCLKConfig+0x360>
 800bd38:	2b00      	cmp	r3, #0
 800bd3a:	d06f      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x370>
 800bd3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bd40:	d075      	beq.n	800be2e <HAL_RCCEx_PeriphCLKConfig+0x382>
 800bd42:	2601      	movs	r6, #1
 800bd44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800bd46:	682b      	ldr	r3, [r5, #0]
 800bd48:	045a      	lsls	r2, r3, #17
 800bd4a:	d50e      	bpl.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800bd4c:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800bd50:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bd54:	f000 8093 	beq.w	800be7e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800bd58:	d878      	bhi.n	800be4c <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800bd5a:	2b00      	cmp	r3, #0
 800bd5c:	d07e      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800bd5e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bd62:	f000 8085 	beq.w	800be70 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800bd66:	2601      	movs	r6, #1
 800bd68:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800bd6a:	682b      	ldr	r3, [r5, #0]
 800bd6c:	015b      	lsls	r3, r3, #5
 800bd6e:	d515      	bpl.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800bd70:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800bd72:	b14b      	cbz	r3, 800bd88 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800bd74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800bd78:	f040 8089 	bne.w	800be8e <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bd7c:	2101      	movs	r1, #1
 800bd7e:	f105 0008 	add.w	r0, r5, #8
 800bd82:	f7ff fda3 	bl	800b8cc <RCCEx_PLL2_Config>
 800bd86:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800bd88:	2c00      	cmp	r4, #0
 800bd8a:	f040 8083 	bne.w	800be94 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800bd8e:	4a81      	ldr	r2, [pc, #516]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bd90:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800bd92:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bd94:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800bd98:	430b      	orrs	r3, r1
 800bd9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800bd9c:	682b      	ldr	r3, [r5, #0]
 800bd9e:	041f      	lsls	r7, r3, #16
 800bda0:	d511      	bpl.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800bda2:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800bda4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800bda8:	d076      	beq.n	800be98 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800bdaa:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800bdae:	d079      	beq.n	800bea4 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800bdb0:	2b00      	cmp	r3, #0
 800bdb2:	d17e      	bne.n	800beb2 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800bdb4:	2c00      	cmp	r4, #0
 800bdb6:	d17f      	bne.n	800beb8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800bdb8:	4a76      	ldr	r2, [pc, #472]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bdba:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800bdbc:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800bdbe:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800bdc2:	430b      	orrs	r3, r1
 800bdc4:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800bdc6:	682b      	ldr	r3, [r5, #0]
 800bdc8:	01d8      	lsls	r0, r3, #7
 800bdca:	f140 8085 	bpl.w	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800bdce:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800bdd0:	2b03      	cmp	r3, #3
 800bdd2:	f200 80e5 	bhi.w	800bfa0 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800bdd6:	e8df f013 	tbh	[pc, r3, lsl #1]
 800bdda:	0076      	.short	0x0076
 800bddc:	00d50071 	.word	0x00d50071
 800bde0:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bde2:	4a6c      	ldr	r2, [pc, #432]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bde4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bde6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bdea:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bdec:	e792      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800bdee:	2100      	movs	r1, #0
 800bdf0:	f105 0008 	add.w	r0, r5, #8
 800bdf4:	f7ff fd6a 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdf8:	4604      	mov	r4, r0
        break;
 800bdfa:	e78b      	b.n	800bd14 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800bdfc:	2100      	movs	r1, #0
 800bdfe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be02:	f7ff fddb 	bl	800b9bc <RCCEx_PLL3_Config>
 800be06:	e7f7      	b.n	800bdf8 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800be08:	4626      	mov	r6, r4
 800be0a:	e78c      	b.n	800bd26 <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800be0c:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800be10:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800be14:	d002      	beq.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x370>
 800be16:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800be1a:	d192      	bne.n	800bd42 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800be1c:	b9a4      	cbnz	r4, 800be48 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800be1e:	4a5d      	ldr	r2, [pc, #372]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800be20:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800be22:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800be24:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800be28:	430b      	orrs	r3, r1
 800be2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800be2c:	e78b      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be2e:	2101      	movs	r1, #1
 800be30:	f105 0008 	add.w	r0, r5, #8
 800be34:	f7ff fd4a 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be38:	4604      	mov	r4, r0
        break;
 800be3a:	e7ef      	b.n	800be1c <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be3c:	2101      	movs	r1, #1
 800be3e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be42:	f7ff fdbb 	bl	800b9bc <RCCEx_PLL3_Config>
 800be46:	e7f7      	b.n	800be38 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800be48:	4626      	mov	r6, r4
 800be4a:	e77c      	b.n	800bd46 <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800be4c:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800be50:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800be54:	d002      	beq.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800be56:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800be5a:	d184      	bne.n	800bd66 <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800be5c:	b9ac      	cbnz	r4, 800be8a <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800be5e:	4a4d      	ldr	r2, [pc, #308]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800be60:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800be64:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800be66:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800be6a:	430b      	orrs	r3, r1
 800be6c:	6593      	str	r3, [r2, #88]	@ 0x58
 800be6e:	e77c      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800be70:	2101      	movs	r1, #1
 800be72:	f105 0008 	add.w	r0, r5, #8
 800be76:	f7ff fd29 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be7a:	4604      	mov	r4, r0
        break;
 800be7c:	e7ee      	b.n	800be5c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800be7e:	2101      	movs	r1, #1
 800be80:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800be84:	f7ff fd9a 	bl	800b9bc <RCCEx_PLL3_Config>
 800be88:	e7f7      	b.n	800be7a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800be8a:	4626      	mov	r6, r4
 800be8c:	e76d      	b.n	800bd6a <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800be8e:	2601      	movs	r6, #1
 800be90:	4634      	mov	r4, r6
 800be92:	e783      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800be94:	4626      	mov	r6, r4
 800be96:	e781      	b.n	800bd9c <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800be98:	4a3e      	ldr	r2, [pc, #248]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800be9a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800be9c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bea0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800bea2:	e787      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800bea4:	2101      	movs	r1, #1
 800bea6:	f105 0008 	add.w	r0, r5, #8
 800beaa:	f7ff fd0f 	bl	800b8cc <RCCEx_PLL2_Config>
 800beae:	4604      	mov	r4, r0
        break;
 800beb0:	e780      	b.n	800bdb4 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800beb2:	2601      	movs	r6, #1
 800beb4:	4634      	mov	r4, r6
 800beb6:	e786      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800beb8:	4626      	mov	r6, r4
 800beba:	e784      	b.n	800bdc6 <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800bebc:	4a35      	ldr	r2, [pc, #212]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bebe:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800bec0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec4:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800bec6:	2c00      	cmp	r4, #0
 800bec8:	d16d      	bne.n	800bfa6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800beca:	4a32      	ldr	r2, [pc, #200]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800becc:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800bece:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800bed0:	f023 0303 	bic.w	r3, r3, #3
 800bed4:	430b      	orrs	r3, r1
 800bed6:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800bed8:	682b      	ldr	r3, [r5, #0]
 800beda:	0259      	lsls	r1, r3, #9
 800bedc:	d539      	bpl.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800bede:	4f2e      	ldr	r7, [pc, #184]	@ (800bf98 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800bee0:	683b      	ldr	r3, [r7, #0]
 800bee2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800bee6:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800bee8:	f7fb fbf4 	bl	80076d4 <HAL_GetTick>
 800beec:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800beee:	683b      	ldr	r3, [r7, #0]
 800bef0:	05da      	lsls	r2, r3, #23
 800bef2:	d55a      	bpl.n	800bfaa <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800bef4:	2c00      	cmp	r4, #0
 800bef6:	d176      	bne.n	800bfe6 <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800bef8:	4b26      	ldr	r3, [pc, #152]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800befa:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800befe:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800bf00:	4042      	eors	r2, r0
 800bf02:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800bf06:	d00b      	beq.n	800bf20 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf08:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf0a:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800bf0c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800bf10:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800bf14:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800bf16:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800bf18:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800bf1c:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800bf1e:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800bf20:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800bf24:	d04a      	beq.n	800bfbc <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bf26:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800bf2a:	491a      	ldr	r1, [pc, #104]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bf2c:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800bf30:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800bf34:	d153      	bne.n	800bfde <HAL_RCCEx_PeriphCLKConfig+0x532>
 800bf36:	6908      	ldr	r0, [r1, #16]
 800bf38:	4a18      	ldr	r2, [pc, #96]	@ (800bf9c <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800bf3a:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800bf3e:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800bf42:	4302      	orrs	r2, r0
 800bf44:	610a      	str	r2, [r1, #16]
 800bf46:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800bf4a:	4a12      	ldr	r2, [pc, #72]	@ (800bf94 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800bf4c:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800bf4e:	430b      	orrs	r3, r1
 800bf50:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800bf52:	682b      	ldr	r3, [r5, #0]
 800bf54:	07d8      	lsls	r0, r3, #31
 800bf56:	d50a      	bpl.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bf58:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800bf5c:	2b10      	cmp	r3, #16
 800bf5e:	d05b      	beq.n	800c018 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800bf60:	d843      	bhi.n	800bfea <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800bf62:	2b00      	cmp	r3, #0
 800bf64:	d047      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800bf66:	2b08      	cmp	r3, #8
 800bf68:	d04f      	beq.n	800c00a <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800bf6a:	2601      	movs	r6, #1
 800bf6c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800bf6e:	682b      	ldr	r3, [r5, #0]
 800bf70:	0799      	lsls	r1, r3, #30
 800bf72:	d567      	bpl.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800bf74:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800bf76:	2b05      	cmp	r3, #5
 800bf78:	d87a      	bhi.n	800c070 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800bf7a:	e8df f003 	tbb	[pc, r3]
 800bf7e:	555b      	.short	0x555b
 800bf80:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800bf84:	2102      	movs	r1, #2
 800bf86:	f105 0008 	add.w	r0, r5, #8
 800bf8a:	f7ff fc9f 	bl	800b8cc <RCCEx_PLL2_Config>
 800bf8e:	4604      	mov	r4, r0
        break;
 800bf90:	e799      	b.n	800bec6 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800bf92:	bf00      	nop
 800bf94:	58024400 	.word	0x58024400
 800bf98:	58024800 	.word	0x58024800
 800bf9c:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800bfa0:	2601      	movs	r6, #1
 800bfa2:	4634      	mov	r4, r6
 800bfa4:	e798      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800bfa6:	4626      	mov	r6, r4
 800bfa8:	e796      	b.n	800bed8 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800bfaa:	f7fb fb93 	bl	80076d4 <HAL_GetTick>
 800bfae:	eba0 0008 	sub.w	r0, r0, r8
 800bfb2:	2864      	cmp	r0, #100	@ 0x64
 800bfb4:	d99b      	bls.n	800beee <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800bfb6:	2603      	movs	r6, #3
 800bfb8:	4634      	mov	r4, r6
 800bfba:	e7ca      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800bfbc:	f7fb fb8a 	bl	80076d4 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfc0:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800c07c <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800bfc4:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfc6:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800bfca:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800bfce:	079b      	lsls	r3, r3, #30
 800bfd0:	d4a9      	bmi.n	800bf26 <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800bfd2:	f7fb fb7f 	bl	80076d4 <HAL_GetTick>
 800bfd6:	1bc0      	subs	r0, r0, r7
 800bfd8:	4548      	cmp	r0, r9
 800bfda:	d9f6      	bls.n	800bfca <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800bfdc:	e7eb      	b.n	800bfb6 <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800bfde:	690a      	ldr	r2, [r1, #16]
 800bfe0:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800bfe4:	e7ae      	b.n	800bf44 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800bfe6:	4626      	mov	r6, r4
 800bfe8:	e7b3      	b.n	800bf52 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800bfea:	f023 0208 	bic.w	r2, r3, #8
 800bfee:	2a20      	cmp	r2, #32
 800bff0:	d001      	beq.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800bff2:	2b18      	cmp	r3, #24
 800bff4:	d1b9      	bne.n	800bf6a <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800bff6:	b9ac      	cbnz	r4, 800c024 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800bff8:	4a20      	ldr	r2, [pc, #128]	@ (800c07c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800bffa:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800bffe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c000:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800c004:	430b      	orrs	r3, r1
 800c006:	6553      	str	r3, [r2, #84]	@ 0x54
 800c008:	e7b1      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c00a:	2101      	movs	r1, #1
 800c00c:	f105 0008 	add.w	r0, r5, #8
 800c010:	f7ff fc5c 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c014:	4604      	mov	r4, r0
        break;
 800c016:	e7ee      	b.n	800bff6 <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c018:	2101      	movs	r1, #1
 800c01a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c01e:	f7ff fccd 	bl	800b9bc <RCCEx_PLL3_Config>
 800c022:	e7f7      	b.n	800c014 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800c024:	4626      	mov	r6, r4
 800c026:	e7a2      	b.n	800bf6e <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c028:	2101      	movs	r1, #1
 800c02a:	f105 0008 	add.w	r0, r5, #8
 800c02e:	f7ff fc4d 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c032:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c034:	b9fc      	cbnz	r4, 800c076 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800c036:	4a11      	ldr	r2, [pc, #68]	@ (800c07c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800c038:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800c03a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c03c:	f023 0307 	bic.w	r3, r3, #7
 800c040:	430b      	orrs	r3, r1
 800c042:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800c044:	682b      	ldr	r3, [r5, #0]
 800c046:	075a      	lsls	r2, r3, #29
 800c048:	d52b      	bpl.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c04a:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800c04e:	2b05      	cmp	r3, #5
 800c050:	f200 816e 	bhi.w	800c330 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800c054:	e8df f013 	tbh	[pc, r3, lsl #1]
 800c058:	0014001a 	.word	0x0014001a
 800c05c:	001a0166 	.word	0x001a0166
 800c060:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c064:	2101      	movs	r1, #1
 800c066:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c06a:	f7ff fca7 	bl	800b9bc <RCCEx_PLL3_Config>
 800c06e:	e7e0      	b.n	800c032 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800c070:	2601      	movs	r6, #1
 800c072:	4634      	mov	r4, r6
 800c074:	e7e6      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800c076:	4626      	mov	r6, r4
 800c078:	e7e4      	b.n	800c044 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800c07a:	bf00      	nop
 800c07c:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c080:	2101      	movs	r1, #1
 800c082:	f105 0008 	add.w	r0, r5, #8
 800c086:	f7ff fc21 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c08a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c08c:	2c00      	cmp	r4, #0
 800c08e:	f040 8152 	bne.w	800c336 <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800c092:	4aaa      	ldr	r2, [pc, #680]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c094:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800c098:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c09a:	f023 0307 	bic.w	r3, r3, #7
 800c09e:	430b      	orrs	r3, r1
 800c0a0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800c0a2:	682b      	ldr	r3, [r5, #0]
 800c0a4:	069b      	lsls	r3, r3, #26
 800c0a6:	d510      	bpl.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c0a8:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800c0ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800c0b0:	f000 8160 	beq.w	800c374 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800c0b4:	f200 8144 	bhi.w	800c340 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	f000 814a 	beq.w	800c352 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800c0be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800c0c2:	f000 8150 	beq.w	800c366 <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800c0c6:	2601      	movs	r6, #1
 800c0c8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800c0ca:	682b      	ldr	r3, [r5, #0]
 800c0cc:	065f      	lsls	r7, r3, #25
 800c0ce:	d510      	bpl.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c0d0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800c0d4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800c0d8:	f000 816e 	beq.w	800c3b8 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800c0dc:	f200 8152 	bhi.w	800c384 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800c0e0:	2b00      	cmp	r3, #0
 800c0e2:	f000 8158 	beq.w	800c396 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c0e6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800c0ea:	f000 815e 	beq.w	800c3aa <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800c0ee:	2601      	movs	r6, #1
 800c0f0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800c0f2:	682b      	ldr	r3, [r5, #0]
 800c0f4:	0618      	lsls	r0, r3, #24
 800c0f6:	d510      	bpl.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c0f8:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800c0fc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800c100:	f000 817c 	beq.w	800c3fc <HAL_RCCEx_PeriphCLKConfig+0x950>
 800c104:	f200 8160 	bhi.w	800c3c8 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800c108:	2b00      	cmp	r3, #0
 800c10a:	f000 8166 	beq.w	800c3da <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c10e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c112:	f000 816c 	beq.w	800c3ee <HAL_RCCEx_PeriphCLKConfig+0x942>
 800c116:	2601      	movs	r6, #1
 800c118:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800c11a:	682b      	ldr	r3, [r5, #0]
 800c11c:	0719      	lsls	r1, r3, #28
 800c11e:	d514      	bpl.n	800c14a <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800c120:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800c124:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800c128:	d107      	bne.n	800c13a <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c12a:	2102      	movs	r1, #2
 800c12c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c130:	f7ff fc44 	bl	800b9bc <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800c134:	2800      	cmp	r0, #0
 800c136:	bf18      	it	ne
 800c138:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800c13a:	4a80      	ldr	r2, [pc, #512]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c13c:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800c140:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c142:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800c146:	430b      	orrs	r3, r1
 800c148:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800c14a:	682b      	ldr	r3, [r5, #0]
 800c14c:	06da      	lsls	r2, r3, #27
 800c14e:	d514      	bpl.n	800c17a <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800c150:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800c154:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800c158:	d107      	bne.n	800c16a <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c15a:	2102      	movs	r1, #2
 800c15c:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c160:	f7ff fc2c 	bl	800b9bc <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800c164:	2800      	cmp	r0, #0
 800c166:	bf18      	it	ne
 800c168:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800c16a:	4a74      	ldr	r2, [pc, #464]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c16c:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800c170:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c172:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800c176:	430b      	orrs	r3, r1
 800c178:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800c17a:	682b      	ldr	r3, [r5, #0]
 800c17c:	031b      	lsls	r3, r3, #12
 800c17e:	d51b      	bpl.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800c180:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800c184:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800c188:	f000 8140 	beq.w	800c40c <HAL_RCCEx_PeriphCLKConfig+0x960>
 800c18c:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800c190:	d007      	beq.n	800c1a2 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800c192:	2900      	cmp	r1, #0
 800c194:	f040 8140 	bne.w	800c418 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c198:	f105 0008 	add.w	r0, r5, #8
 800c19c:	f7ff fb96 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c1a0:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800c1a2:	2c00      	cmp	r4, #0
 800c1a4:	f040 813b 	bne.w	800c41e <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800c1a8:	4a64      	ldr	r2, [pc, #400]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c1aa:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800c1ae:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c1b0:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800c1b4:	430b      	orrs	r3, r1
 800c1b6:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800c1b8:	682b      	ldr	r3, [r5, #0]
 800c1ba:	035f      	lsls	r7, r3, #13
 800c1bc:	d50f      	bpl.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800c1be:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800c1c2:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800c1c6:	f000 813b 	beq.w	800c440 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800c1ca:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800c1ce:	f000 812d 	beq.w	800c42c <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c1d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c1d6:	f000 8124 	beq.w	800c422 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800c1da:	2601      	movs	r6, #1
 800c1dc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800c1de:	682b      	ldr	r3, [r5, #0]
 800c1e0:	03d8      	lsls	r0, r3, #15
 800c1e2:	d509      	bpl.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800c1e4:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800c1e6:	2b00      	cmp	r3, #0
 800c1e8:	f000 8133 	beq.w	800c452 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800c1ec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c1f0:	f000 813d 	beq.w	800c46e <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800c1f4:	2601      	movs	r6, #1
 800c1f6:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800c1f8:	682b      	ldr	r3, [r5, #0]
 800c1fa:	0099      	lsls	r1, r3, #2
 800c1fc:	d507      	bpl.n	800c20e <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800c1fe:	2102      	movs	r1, #2
 800c200:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c204:	f7ff fbda 	bl	800b9bc <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800c208:	2800      	cmp	r0, #0
 800c20a:	bf18      	it	ne
 800c20c:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800c20e:	e9d5 3100 	ldrd	r3, r1, [r5]
 800c212:	039a      	lsls	r2, r3, #14
 800c214:	f140 8143 	bpl.w	800c49e <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800c218:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800c21c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800c220:	f000 813f 	beq.w	800c4a2 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800c224:	f200 812c 	bhi.w	800c480 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800c228:	2800      	cmp	r0, #0
 800c22a:	f000 812f 	beq.w	800c48c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800c22e:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800c230:	02df      	lsls	r7, r3, #11
 800c232:	d506      	bpl.n	800c242 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800c234:	4841      	ldr	r0, [pc, #260]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c236:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800c238:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800c23a:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800c23e:	4332      	orrs	r2, r6
 800c240:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800c242:	00de      	lsls	r6, r3, #3
 800c244:	d507      	bpl.n	800c256 <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800c246:	483d      	ldr	r0, [pc, #244]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c248:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800c24c:	6902      	ldr	r2, [r0, #16]
 800c24e:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800c252:	4332      	orrs	r2, r6
 800c254:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800c256:	0298      	lsls	r0, r3, #10
 800c258:	d506      	bpl.n	800c268 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800c25a:	4838      	ldr	r0, [pc, #224]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c25c:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800c25e:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800c260:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800c264:	4332      	orrs	r2, r6
 800c266:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800c268:	005a      	lsls	r2, r3, #1
 800c26a:	d509      	bpl.n	800c280 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800c26c:	4a33      	ldr	r2, [pc, #204]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c26e:	6910      	ldr	r0, [r2, #16]
 800c270:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800c274:	6110      	str	r0, [r2, #16]
 800c276:	6910      	ldr	r0, [r2, #16]
 800c278:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800c27c:	4330      	orrs	r0, r6
 800c27e:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800c280:	2b00      	cmp	r3, #0
 800c282:	da06      	bge.n	800c292 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800c284:	482d      	ldr	r0, [pc, #180]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c286:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800c288:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800c28a:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800c28e:	4332      	orrs	r2, r6
 800c290:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800c292:	021f      	lsls	r7, r3, #8
 800c294:	d507      	bpl.n	800c2a6 <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800c296:	4a29      	ldr	r2, [pc, #164]	@ (800c33c <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800c298:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800c29c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c29e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800c2a2:	4303      	orrs	r3, r0
 800c2a4:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800c2a6:	07ce      	lsls	r6, r1, #31
 800c2a8:	d506      	bpl.n	800c2b8 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c2aa:	2100      	movs	r1, #0
 800c2ac:	f105 0008 	add.w	r0, r5, #8
 800c2b0:	f7ff fb0c 	bl	800b8cc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c2b4:	4607      	mov	r7, r0
 800c2b6:	b900      	cbnz	r0, 800c2ba <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800c2b8:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800c2ba:	686b      	ldr	r3, [r5, #4]
 800c2bc:	079c      	lsls	r4, r3, #30
 800c2be:	d506      	bpl.n	800c2ce <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800c2c0:	2101      	movs	r1, #1
 800c2c2:	f105 0008 	add.w	r0, r5, #8
 800c2c6:	f7ff fb01 	bl	800b8cc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c2ca:	4606      	mov	r6, r0
 800c2cc:	b900      	cbnz	r0, 800c2d0 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800c2ce:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800c2d0:	686b      	ldr	r3, [r5, #4]
 800c2d2:	0758      	lsls	r0, r3, #29
 800c2d4:	d506      	bpl.n	800c2e4 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c2d6:	2102      	movs	r1, #2
 800c2d8:	f105 0008 	add.w	r0, r5, #8
 800c2dc:	f7ff faf6 	bl	800b8cc <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800c2e0:	4604      	mov	r4, r0
 800c2e2:	b900      	cbnz	r0, 800c2e6 <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800c2e4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800c2e6:	686b      	ldr	r3, [r5, #4]
 800c2e8:	0719      	lsls	r1, r3, #28
 800c2ea:	d506      	bpl.n	800c2fa <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800c2ec:	2100      	movs	r1, #0
 800c2ee:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c2f2:	f7ff fb63 	bl	800b9bc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c2f6:	4606      	mov	r6, r0
 800c2f8:	b900      	cbnz	r0, 800c2fc <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800c2fa:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800c2fc:	686b      	ldr	r3, [r5, #4]
 800c2fe:	06da      	lsls	r2, r3, #27
 800c300:	d506      	bpl.n	800c310 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c302:	2101      	movs	r1, #1
 800c304:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c308:	f7ff fb58 	bl	800b9bc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c30c:	4604      	mov	r4, r0
 800c30e:	b900      	cbnz	r0, 800c312 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800c310:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800c312:	686b      	ldr	r3, [r5, #4]
 800c314:	069b      	lsls	r3, r3, #26
 800c316:	f100 80ca 	bmi.w	800c4ae <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800c31a:	1e20      	subs	r0, r4, #0
 800c31c:	bf18      	it	ne
 800c31e:	2001      	movne	r0, #1
}
 800c320:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c324:	2101      	movs	r1, #1
 800c326:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c32a:	f7ff fb47 	bl	800b9bc <RCCEx_PLL3_Config>
 800c32e:	e6ac      	b.n	800c08a <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800c330:	2601      	movs	r6, #1
 800c332:	4634      	mov	r4, r6
 800c334:	e6b5      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c336:	4626      	mov	r6, r4
 800c338:	e6b3      	b.n	800c0a2 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800c33a:	bf00      	nop
 800c33c:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800c340:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800c344:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800c348:	d003      	beq.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800c34a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800c34e:	f47f aeba 	bne.w	800c0c6 <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800c352:	b9ac      	cbnz	r4, 800c380 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800c354:	4a5b      	ldr	r2, [pc, #364]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c356:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800c35a:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c35c:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800c360:	430b      	orrs	r3, r1
 800c362:	6553      	str	r3, [r2, #84]	@ 0x54
 800c364:	e6b1      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c366:	2100      	movs	r1, #0
 800c368:	f105 0008 	add.w	r0, r5, #8
 800c36c:	f7ff faae 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c370:	4604      	mov	r4, r0
        break;
 800c372:	e7ee      	b.n	800c352 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c374:	2102      	movs	r1, #2
 800c376:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c37a:	f7ff fb1f 	bl	800b9bc <RCCEx_PLL3_Config>
 800c37e:	e7f7      	b.n	800c370 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800c380:	4626      	mov	r6, r4
 800c382:	e6a2      	b.n	800c0ca <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800c384:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800c388:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800c38c:	d003      	beq.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800c38e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800c392:	f47f aeac 	bne.w	800c0ee <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800c396:	b9ac      	cbnz	r4, 800c3c4 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800c398:	4a4a      	ldr	r2, [pc, #296]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c39a:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800c39e:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c3a0:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800c3a4:	430b      	orrs	r3, r1
 800c3a6:	6593      	str	r3, [r2, #88]	@ 0x58
 800c3a8:	e6a3      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3aa:	2100      	movs	r1, #0
 800c3ac:	f105 0008 	add.w	r0, r5, #8
 800c3b0:	f7ff fa8c 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3b4:	4604      	mov	r4, r0
        break;
 800c3b6:	e7ee      	b.n	800c396 <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3b8:	2102      	movs	r1, #2
 800c3ba:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c3be:	f7ff fafd 	bl	800b9bc <RCCEx_PLL3_Config>
 800c3c2:	e7f7      	b.n	800c3b4 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800c3c4:	4626      	mov	r6, r4
 800c3c6:	e694      	b.n	800c0f2 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800c3c8:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800c3cc:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800c3d0:	d003      	beq.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800c3d2:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800c3d6:	f47f ae9e 	bne.w	800c116 <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800c3da:	b9ac      	cbnz	r4, 800c408 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800c3dc:	4a39      	ldr	r2, [pc, #228]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c3de:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800c3e2:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c3e4:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800c3e8:	430b      	orrs	r3, r1
 800c3ea:	6593      	str	r3, [r2, #88]	@ 0x58
 800c3ec:	e695      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800c3ee:	2100      	movs	r1, #0
 800c3f0:	f105 0008 	add.w	r0, r5, #8
 800c3f4:	f7ff fa6a 	bl	800b8cc <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3f8:	4604      	mov	r4, r0
        break;
 800c3fa:	e7ee      	b.n	800c3da <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c3fc:	2102      	movs	r1, #2
 800c3fe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c402:	f7ff fadb 	bl	800b9bc <RCCEx_PLL3_Config>
 800c406:	e7f7      	b.n	800c3f8 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800c408:	4626      	mov	r6, r4
 800c40a:	e686      	b.n	800c11a <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c40c:	2102      	movs	r1, #2
 800c40e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c412:	f7ff fad3 	bl	800b9bc <RCCEx_PLL3_Config>
 800c416:	e6c3      	b.n	800c1a0 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800c418:	2601      	movs	r6, #1
 800c41a:	4634      	mov	r4, r6
 800c41c:	e6cc      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800c41e:	4626      	mov	r6, r4
 800c420:	e6ca      	b.n	800c1b8 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c422:	4a28      	ldr	r2, [pc, #160]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c424:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c426:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c42a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c42c:	b97c      	cbnz	r4, 800c44e <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800c42e:	4a25      	ldr	r2, [pc, #148]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c430:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800c434:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800c436:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800c43a:	430b      	orrs	r3, r1
 800c43c:	6553      	str	r3, [r2, #84]	@ 0x54
 800c43e:	e6ce      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800c440:	2101      	movs	r1, #1
 800c442:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c446:	f7ff fab9 	bl	800b9bc <RCCEx_PLL3_Config>
 800c44a:	4604      	mov	r4, r0
        break;
 800c44c:	e7ee      	b.n	800c42c <HAL_RCCEx_PeriphCLKConfig+0x980>
 800c44e:	4626      	mov	r6, r4
 800c450:	e6c5      	b.n	800c1de <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c452:	4a1c      	ldr	r2, [pc, #112]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c454:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800c456:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c45a:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800c45c:	b974      	cbnz	r4, 800c47c <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800c45e:	4a19      	ldr	r2, [pc, #100]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c460:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800c462:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800c464:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800c468:	430b      	orrs	r3, r1
 800c46a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800c46c:	e6c4      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800c46e:	2102      	movs	r1, #2
 800c470:	f105 0008 	add.w	r0, r5, #8
 800c474:	f7ff fa2a 	bl	800b8cc <RCCEx_PLL2_Config>
 800c478:	4604      	mov	r4, r0
        break;
 800c47a:	e7ef      	b.n	800c45c <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800c47c:	4626      	mov	r6, r4
 800c47e:	e6bb      	b.n	800c1f8 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800c480:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800c484:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800c488:	f47f aed1 	bne.w	800c22e <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800c48c:	2c00      	cmp	r4, #0
 800c48e:	f47f aecf 	bne.w	800c230 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800c492:	4c0c      	ldr	r4, [pc, #48]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c494:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800c496:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800c49a:	4302      	orrs	r2, r0
 800c49c:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800c49e:	4634      	mov	r4, r6
 800c4a0:	e6c6      	b.n	800c230 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c4a2:	4f08      	ldr	r7, [pc, #32]	@ (800c4c4 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800c4a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c4a6:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800c4aa:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800c4ac:	e7ee      	b.n	800c48c <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800c4ae:	2102      	movs	r1, #2
 800c4b0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800c4b4:	f7ff fa82 	bl	800b9bc <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	f43f af2e 	beq.w	800c31a <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800c4be:	2001      	movs	r0, #1
 800c4c0:	e72e      	b.n	800c320 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800c4c2:	bf00      	nop
 800c4c4:	58024400 	.word	0x58024400

0800c4c8 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800c4c8:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800c4ca:	f7ff f98f 	bl	800b7ec <HAL_RCC_GetHCLKFreq>
 800c4ce:	4b05      	ldr	r3, [pc, #20]	@ (800c4e4 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800c4d0:	4a05      	ldr	r2, [pc, #20]	@ (800c4e8 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800c4d2:	6a1b      	ldr	r3, [r3, #32]
 800c4d4:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800c4d8:	5cd3      	ldrb	r3, [r2, r3]
 800c4da:	f003 031f 	and.w	r3, r3, #31
}
 800c4de:	40d8      	lsrs	r0, r3
 800c4e0:	bd08      	pop	{r3, pc}
 800c4e2:	bf00      	nop
 800c4e4:	58024400 	.word	0x58024400
 800c4e8:	0802a8c8 	.word	0x0802a8c8

0800c4ec <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4ec:	494f      	ldr	r1, [pc, #316]	@ (800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800c4ee:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c4f0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c4f2:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c4f4:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800c4f6:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800c4fa:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c4fe:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800c500:	f000 8090 	beq.w	800c624 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c504:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c508:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800c50c:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c510:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c514:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800c518:	4353      	muls	r3, r2
    switch (pllsource)
 800c51a:	2c01      	cmp	r4, #1
 800c51c:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c520:	ee06 3a90 	vmov	s13, r3
 800c524:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c528:	d06e      	beq.n	800c608 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800c52a:	2c02      	cmp	r4, #2
 800c52c:	d05e      	beq.n	800c5ec <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800c52e:	2c00      	cmp	r4, #0
 800c530:	d16a      	bne.n	800c608 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c532:	680b      	ldr	r3, [r1, #0]
 800c534:	069b      	lsls	r3, r3, #26
 800c536:	d547      	bpl.n	800c5c8 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c538:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c53a:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c53c:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c540:	4a3b      	ldr	r2, [pc, #236]	@ (800c630 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c542:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c546:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c548:	ee07 2a90 	vmov	s15, r2
 800c54c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c550:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c554:	ee07 3a10 	vmov	s14, r3
 800c558:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c55c:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c560:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c564:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800c568:	4a30      	ldr	r2, [pc, #192]	@ (800c62c <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800c56a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c56c:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c570:	ee07 3a10 	vmov	s14, r3
 800c574:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c578:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c57c:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c580:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c584:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800c588:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c58a:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c58e:	ee07 3a10 	vmov	s14, r3
 800c592:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c596:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c59a:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c59e:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c5a2:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800c5a6:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800c5a8:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c5ac:	ee06 3a90 	vmov	s13, r3
 800c5b0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c5b4:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c5b8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c5bc:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c5c0:	ee17 3a90 	vmov	r3, s15
 800c5c4:	6083      	str	r3, [r0, #8]
}
 800c5c6:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5c8:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c5ca:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c634 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800c5ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5d2:	ee07 3a90 	vmov	s15, r3
 800c5d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c5de:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5e2:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c5e6:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c5ea:	e7bd      	b.n	800c568 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c5ec:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c5ee:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c638 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800c5f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c5f6:	ee07 3a90 	vmov	s15, r3
 800c5fa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c602:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c606:	e7ec      	b.n	800c5e2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800c608:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800c60a:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c63c <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800c60e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c612:	ee07 3a90 	vmov	s15, r3
 800c616:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c61a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c61e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c622:	e7de      	b.n	800c5e2 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800c624:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800c628:	e7cc      	b.n	800c5c4 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800c62a:	bf00      	nop
 800c62c:	58024400 	.word	0x58024400
 800c630:	03d09000 	.word	0x03d09000
 800c634:	4c742400 	.word	0x4c742400
 800c638:	4bbebc20 	.word	0x4bbebc20
 800c63c:	4a742400 	.word	0x4a742400

0800c640 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c640:	494f      	ldr	r1, [pc, #316]	@ (800c780 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800c642:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c644:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c646:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c648:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800c64a:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800c64e:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c652:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800c654:	f000 8090 	beq.w	800c778 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c658:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c65c:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800c660:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c664:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c668:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800c66c:	4353      	muls	r3, r2
    switch (pllsource)
 800c66e:	2c01      	cmp	r4, #1
 800c670:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c674:	ee06 3a90 	vmov	s13, r3
 800c678:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800c67c:	d06e      	beq.n	800c75c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800c67e:	2c02      	cmp	r4, #2
 800c680:	d05e      	beq.n	800c740 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800c682:	2c00      	cmp	r4, #0
 800c684:	d16a      	bne.n	800c75c <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c686:	680b      	ldr	r3, [r1, #0]
 800c688:	069b      	lsls	r3, r3, #26
 800c68a:	d547      	bpl.n	800c71c <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c68c:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c68e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c690:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800c694:	4a3b      	ldr	r2, [pc, #236]	@ (800c784 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c696:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c69a:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c69c:	ee07 2a90 	vmov	s15, r2
 800c6a0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800c6a4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800c6a8:	ee07 3a10 	vmov	s14, r3
 800c6ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6b0:	ee37 7a26 	vadd.f32	s14, s14, s13
 800c6b4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6b8:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800c6bc:	4a30      	ldr	r2, [pc, #192]	@ (800c780 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800c6be:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c6c0:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800c6c4:	ee07 3a10 	vmov	s14, r3
 800c6c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6cc:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6d0:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6d4:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c6d8:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800c6dc:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c6de:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800c6e2:	ee07 3a10 	vmov	s14, r3
 800c6e6:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800c6ea:	ee37 7a06 	vadd.f32	s14, s14, s12
 800c6ee:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800c6f2:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800c6f6:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800c6fa:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800c6fc:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800c700:	ee06 3a90 	vmov	s13, r3
 800c704:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800c708:	ee76 6a86 	vadd.f32	s13, s13, s12
 800c70c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800c710:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800c714:	ee17 3a90 	vmov	r3, s15
 800c718:	6083      	str	r3, [r0, #8]
}
 800c71a:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c71c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c71e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800c788 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800c722:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c726:	ee07 3a90 	vmov	s15, r3
 800c72a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c72e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c732:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c736:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800c73a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800c73e:	e7bd      	b.n	800c6bc <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c740:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c742:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800c78c <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800c746:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c74a:	ee07 3a90 	vmov	s15, r3
 800c74e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c752:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c756:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c75a:	e7ec      	b.n	800c736 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800c75c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800c75e:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800c790 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800c762:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c766:	ee07 3a90 	vmov	s15, r3
 800c76a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800c76e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c772:	ee77 7a86 	vadd.f32	s15, s15, s12
 800c776:	e7de      	b.n	800c736 <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800c778:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800c77c:	e7cc      	b.n	800c718 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800c77e:	bf00      	nop
 800c780:	58024400 	.word	0x58024400
 800c784:	03d09000 	.word	0x03d09000
 800c788:	4c742400 	.word	0x4c742400
 800c78c:	4bbebc20 	.word	0x4bbebc20
 800c790:	4a742400 	.word	0x4a742400

0800c794 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800c794:	b538      	push	{r3, r4, r5, lr}
 800c796:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800c798:	4604      	mov	r4, r0
 800c79a:	b1f0      	cbz	r0, 800c7da <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800c79c:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800c7a0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800c7a4:	b91b      	cbnz	r3, 800c7ae <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800c7a6:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800c7aa:	f7f5 f823 	bl	80017f4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7ae:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c7b0:	1d21      	adds	r1, r4, #4
 800c7b2:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c7b4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800c7b8:	f000 ff8a 	bl	800d6d0 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800c7bc:	6862      	ldr	r2, [r4, #4]
 800c7be:	4629      	mov	r1, r5
 800c7c0:	6820      	ldr	r0, [r4, #0]
 800c7c2:	f000 ffbd 	bl	800d740 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800c7c6:	4a06      	ldr	r2, [pc, #24]	@ (800c7e0 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800c7c8:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800c7ca:	6813      	ldr	r3, [r2, #0]
 800c7cc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800c7d0:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800c7d2:	2301      	movs	r3, #1
 800c7d4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800c7d8:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c7da:	2001      	movs	r0, #1
 800c7dc:	e7fc      	b.n	800c7d8 <HAL_SDRAM_Init+0x44>
 800c7de:	bf00      	nop
 800c7e0:	52004000 	.word	0x52004000

0800c7e4 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800c7e8:	f7f5 f89e 	bl	8001928 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800c7ec:	e9d4 0100 	ldrd	r0, r1, [r4]
 800c7f0:	f000 ffdc 	bl	800d7ac <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800c7f4:	2000      	movs	r0, #0
 800c7f6:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800c7fa:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800c7fe:	bd10      	pop	{r4, pc}

0800c800 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800c800:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c802:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c806:	4605      	mov	r5, r0
 800c808:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800c80a:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800c80c:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800c80e:	d010      	beq.n	800c832 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800c810:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800c814:	2c01      	cmp	r4, #1
 800c816:	d110      	bne.n	800c83a <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c818:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c81a:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c81c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800c820:	f000 ffd3 	bl	800d7ca <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800c824:	6833      	ldr	r3, [r6, #0]
 800c826:	2b02      	cmp	r3, #2
 800c828:	d104      	bne.n	800c834 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800c82a:	2305      	movs	r3, #5
 800c82c:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c830:	2000      	movs	r0, #0
}
 800c832:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800c834:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800c838:	e7fa      	b.n	800c830 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800c83a:	2001      	movs	r0, #1
 800c83c:	e7f9      	b.n	800c832 <HAL_SDRAM_SendCommand+0x32>

0800c83e <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800c83e:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c840:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800c844:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800c846:	2b02      	cmp	r3, #2
 800c848:	b2d8      	uxtb	r0, r3
 800c84a:	d00d      	beq.n	800c868 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800c84c:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800c850:	2b01      	cmp	r3, #1
 800c852:	b2dd      	uxtb	r5, r3
 800c854:	d109      	bne.n	800c86a <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c856:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c858:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800c85a:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800c85e:	f000 ffc6 	bl	800d7ee <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800c862:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800c864:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800c868:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800c86a:	2001      	movs	r0, #1
 800c86c:	e7fc      	b.n	800c868 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800c86e <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800c86e:	4770      	bx	lr

0800c870 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c870:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c874:	2b01      	cmp	r3, #1
 800c876:	d12f      	bne.n	800c8d8 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c878:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c87a:	4a18      	ldr	r2, [pc, #96]	@ (800c8dc <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800c87c:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c880:	6803      	ldr	r3, [r0, #0]
 800c882:	4293      	cmp	r3, r2
 800c884:	d01a      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c886:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c88a:	d017      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c88c:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c890:	4293      	cmp	r3, r2
 800c892:	d013      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c894:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c898:	4293      	cmp	r3, r2
 800c89a:	d00f      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c89c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c8a0:	4293      	cmp	r3, r2
 800c8a2:	d00b      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c8a4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c8a8:	4293      	cmp	r3, r2
 800c8aa:	d007      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c8ac:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c8b0:	4293      	cmp	r3, r2
 800c8b2:	d003      	beq.n	800c8bc <HAL_TIM_Base_Start+0x4c>
 800c8b4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c8b8:	4293      	cmp	r3, r2
 800c8ba:	d107      	bne.n	800c8cc <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c8bc:	6899      	ldr	r1, [r3, #8]
 800c8be:	4a08      	ldr	r2, [pc, #32]	@ (800c8e0 <HAL_TIM_Base_Start+0x70>)
 800c8c0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c8c2:	2a06      	cmp	r2, #6
 800c8c4:	d006      	beq.n	800c8d4 <HAL_TIM_Base_Start+0x64>
 800c8c6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c8ca:	d003      	beq.n	800c8d4 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800c8cc:	681a      	ldr	r2, [r3, #0]
 800c8ce:	f042 0201 	orr.w	r2, r2, #1
 800c8d2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c8d4:	2000      	movs	r0, #0
 800c8d6:	4770      	bx	lr
    return HAL_ERROR;
 800c8d8:	2001      	movs	r0, #1
}
 800c8da:	4770      	bx	lr
 800c8dc:	40010000 	.word	0x40010000
 800c8e0:	00010007 	.word	0x00010007

0800c8e4 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800c8e4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800c8e8:	2b01      	cmp	r3, #1
 800c8ea:	d133      	bne.n	800c954 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c8ec:	2302      	movs	r3, #2
 800c8ee:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800c8f2:	6803      	ldr	r3, [r0, #0]
 800c8f4:	68da      	ldr	r2, [r3, #12]
 800c8f6:	f042 0201 	orr.w	r2, r2, #1
 800c8fa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c8fc:	4a16      	ldr	r2, [pc, #88]	@ (800c958 <HAL_TIM_Base_Start_IT+0x74>)
 800c8fe:	4293      	cmp	r3, r2
 800c900:	d01a      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c902:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800c906:	d017      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c908:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800c90c:	4293      	cmp	r3, r2
 800c90e:	d013      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c910:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c914:	4293      	cmp	r3, r2
 800c916:	d00f      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c918:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800c91c:	4293      	cmp	r3, r2
 800c91e:	d00b      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c920:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800c924:	4293      	cmp	r3, r2
 800c926:	d007      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c928:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800c92c:	4293      	cmp	r3, r2
 800c92e:	d003      	beq.n	800c938 <HAL_TIM_Base_Start_IT+0x54>
 800c930:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800c934:	4293      	cmp	r3, r2
 800c936:	d107      	bne.n	800c948 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800c938:	6899      	ldr	r1, [r3, #8]
 800c93a:	4a08      	ldr	r2, [pc, #32]	@ (800c95c <HAL_TIM_Base_Start_IT+0x78>)
 800c93c:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c93e:	2a06      	cmp	r2, #6
 800c940:	d006      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x6c>
 800c942:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800c946:	d003      	beq.n	800c950 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800c948:	681a      	ldr	r2, [r3, #0]
 800c94a:	f042 0201 	orr.w	r2, r2, #1
 800c94e:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800c950:	2000      	movs	r0, #0
 800c952:	4770      	bx	lr
    return HAL_ERROR;
 800c954:	2001      	movs	r0, #1
}
 800c956:	4770      	bx	lr
 800c958:	40010000 	.word	0x40010000
 800c95c:	00010007 	.word	0x00010007

0800c960 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800c960:	4770      	bx	lr

0800c962 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800c962:	4770      	bx	lr

0800c964 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800c964:	4770      	bx	lr

0800c966 <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800c966:	4770      	bx	lr

0800c968 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800c968:	6803      	ldr	r3, [r0, #0]
{
 800c96a:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800c96c:	68dd      	ldr	r5, [r3, #12]
{
 800c96e:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800c970:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c972:	07b2      	lsls	r2, r6, #30
 800c974:	d50d      	bpl.n	800c992 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c976:	07a9      	lsls	r1, r5, #30
 800c978:	d50b      	bpl.n	800c992 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c97a:	f06f 0202 	mvn.w	r2, #2
 800c97e:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c980:	2201      	movs	r2, #1
 800c982:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c984:	699b      	ldr	r3, [r3, #24]
 800c986:	079a      	lsls	r2, r3, #30
 800c988:	d075      	beq.n	800ca76 <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800c98a:	f7ff ffea 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c98e:	2300      	movs	r3, #0
 800c990:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c992:	0773      	lsls	r3, r6, #29
 800c994:	d510      	bpl.n	800c9b8 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c996:	0768      	lsls	r0, r5, #29
 800c998:	d50e      	bpl.n	800c9b8 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c99a:	6823      	ldr	r3, [r4, #0]
 800c99c:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800c9a0:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c9a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c9a4:	2202      	movs	r2, #2
 800c9a6:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c9a8:	699b      	ldr	r3, [r3, #24]
 800c9aa:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c9ae:	d068      	beq.n	800ca82 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9b0:	f7ff ffd7 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9b4:	2300      	movs	r3, #0
 800c9b6:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c9b8:	0731      	lsls	r1, r6, #28
 800c9ba:	d50f      	bpl.n	800c9dc <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c9bc:	072a      	lsls	r2, r5, #28
 800c9be:	d50d      	bpl.n	800c9dc <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9c0:	6823      	ldr	r3, [r4, #0]
 800c9c2:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800c9c6:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c9c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c9ca:	2204      	movs	r2, #4
 800c9cc:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c9ce:	69db      	ldr	r3, [r3, #28]
 800c9d0:	079b      	lsls	r3, r3, #30
 800c9d2:	d05c      	beq.n	800ca8e <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9d4:	f7ff ffc5 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9d8:	2300      	movs	r3, #0
 800c9da:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c9dc:	06f1      	lsls	r1, r6, #27
 800c9de:	d510      	bpl.n	800ca02 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c9e0:	06ea      	lsls	r2, r5, #27
 800c9e2:	d50e      	bpl.n	800ca02 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c9e4:	6823      	ldr	r3, [r4, #0]
 800c9e6:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800c9ea:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c9ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c9ee:	2208      	movs	r2, #8
 800c9f0:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c9f2:	69db      	ldr	r3, [r3, #28]
 800c9f4:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800c9f8:	d04f      	beq.n	800ca9a <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800c9fa:	f7ff ffb2 	bl	800c962 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c9fe:	2300      	movs	r3, #0
 800ca00:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800ca02:	07f3      	lsls	r3, r6, #31
 800ca04:	d508      	bpl.n	800ca18 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800ca06:	07e8      	lsls	r0, r5, #31
 800ca08:	d506      	bpl.n	800ca18 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca0a:	6823      	ldr	r3, [r4, #0]
 800ca0c:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca10:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800ca12:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800ca14:	f7f4 fc64 	bl	80012e0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800ca18:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800ca1c:	d008      	beq.n	800ca30 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca1e:	0629      	lsls	r1, r5, #24
 800ca20:	d506      	bpl.n	800ca30 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ca22:	6823      	ldr	r3, [r4, #0]
 800ca24:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800ca28:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800ca2a:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800ca2c:	f000 f8d7 	bl	800cbde <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800ca30:	05f2      	lsls	r2, r6, #23
 800ca32:	d508      	bpl.n	800ca46 <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800ca34:	062b      	lsls	r3, r5, #24
 800ca36:	d506      	bpl.n	800ca46 <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca38:	6823      	ldr	r3, [r4, #0]
 800ca3a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800ca3e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800ca40:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800ca42:	f000 f8cd 	bl	800cbe0 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800ca46:	0670      	lsls	r0, r6, #25
 800ca48:	d508      	bpl.n	800ca5c <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800ca4a:	0669      	lsls	r1, r5, #25
 800ca4c:	d506      	bpl.n	800ca5c <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca4e:	6823      	ldr	r3, [r4, #0]
 800ca50:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800ca54:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800ca56:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800ca58:	f7ff ff85 	bl	800c966 <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ca5c:	06b2      	lsls	r2, r6, #26
 800ca5e:	d522      	bpl.n	800caa6 <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ca60:	06ab      	lsls	r3, r5, #26
 800ca62:	d520      	bpl.n	800caa6 <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca64:	6823      	ldr	r3, [r4, #0]
 800ca66:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ca6a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ca6c:	611a      	str	r2, [r3, #16]
}
 800ca6e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ca72:	f000 b8b3 	b.w	800cbdc <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca76:	f7ff ff73 	bl	800c960 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff ff72 	bl	800c964 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca80:	e785      	b.n	800c98e <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca82:	f7ff ff6d 	bl	800c960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca86:	4620      	mov	r0, r4
 800ca88:	f7ff ff6c 	bl	800c964 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca8c:	e792      	b.n	800c9b4 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca8e:	f7ff ff67 	bl	800c960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca92:	4620      	mov	r0, r4
 800ca94:	f7ff ff66 	bl	800c964 <HAL_TIM_PWM_PulseFinishedCallback>
 800ca98:	e79e      	b.n	800c9d8 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ca9a:	f7ff ff61 	bl	800c960 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ca9e:	4620      	mov	r0, r4
 800caa0:	f7ff ff60 	bl	800c964 <HAL_TIM_PWM_PulseFinishedCallback>
 800caa4:	e7ab      	b.n	800c9fe <HAL_TIM_IRQHandler+0x96>
}
 800caa6:	bd70      	pop	{r4, r5, r6, pc}

0800caa8 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caa8:	4a32      	ldr	r2, [pc, #200]	@ (800cb74 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800caaa:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800caac:	4290      	cmp	r0, r2
 800caae:	d012      	beq.n	800cad6 <TIM_Base_SetConfig+0x2e>
 800cab0:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800cab4:	d00f      	beq.n	800cad6 <TIM_Base_SetConfig+0x2e>
 800cab6:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800caba:	4290      	cmp	r0, r2
 800cabc:	d00b      	beq.n	800cad6 <TIM_Base_SetConfig+0x2e>
 800cabe:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cac2:	4290      	cmp	r0, r2
 800cac4:	d007      	beq.n	800cad6 <TIM_Base_SetConfig+0x2e>
 800cac6:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800caca:	4290      	cmp	r0, r2
 800cacc:	d003      	beq.n	800cad6 <TIM_Base_SetConfig+0x2e>
 800cace:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800cad2:	4290      	cmp	r0, r2
 800cad4:	d119      	bne.n	800cb0a <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800cad6:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800cad8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800cadc:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800cade:	4a25      	ldr	r2, [pc, #148]	@ (800cb74 <TIM_Base_SetConfig+0xcc>)
 800cae0:	4290      	cmp	r0, r2
 800cae2:	d01d      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cae4:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800cae8:	d01a      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800caea:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800caee:	4290      	cmp	r0, r2
 800caf0:	d016      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800caf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800caf6:	4290      	cmp	r0, r2
 800caf8:	d012      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cafa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cafe:	4290      	cmp	r0, r2
 800cb00:	d00e      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cb02:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800cb06:	4290      	cmp	r0, r2
 800cb08:	d00a      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cb0a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb78 <TIM_Base_SetConfig+0xd0>)
 800cb0c:	4290      	cmp	r0, r2
 800cb0e:	d007      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cb10:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb14:	4290      	cmp	r0, r2
 800cb16:	d003      	beq.n	800cb20 <TIM_Base_SetConfig+0x78>
 800cb18:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb1c:	4290      	cmp	r0, r2
 800cb1e:	d103      	bne.n	800cb28 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800cb20:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800cb24:	68ca      	ldr	r2, [r1, #12]
 800cb26:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800cb28:	694a      	ldr	r2, [r1, #20]
 800cb2a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800cb2e:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800cb30:	688a      	ldr	r2, [r1, #8]
 800cb32:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800cb34:	680a      	ldr	r2, [r1, #0]
 800cb36:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800cb38:	4a0e      	ldr	r2, [pc, #56]	@ (800cb74 <TIM_Base_SetConfig+0xcc>)
 800cb3a:	4290      	cmp	r0, r2
 800cb3c:	d00f      	beq.n	800cb5e <TIM_Base_SetConfig+0xb6>
 800cb3e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb42:	4290      	cmp	r0, r2
 800cb44:	d00b      	beq.n	800cb5e <TIM_Base_SetConfig+0xb6>
 800cb46:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800cb4a:	4290      	cmp	r0, r2
 800cb4c:	d007      	beq.n	800cb5e <TIM_Base_SetConfig+0xb6>
 800cb4e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb52:	4290      	cmp	r0, r2
 800cb54:	d003      	beq.n	800cb5e <TIM_Base_SetConfig+0xb6>
 800cb56:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800cb5a:	4290      	cmp	r0, r2
 800cb5c:	d101      	bne.n	800cb62 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800cb5e:	690a      	ldr	r2, [r1, #16]
 800cb60:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800cb62:	6802      	ldr	r2, [r0, #0]
 800cb64:	f042 0204 	orr.w	r2, r2, #4
 800cb68:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800cb6a:	2201      	movs	r2, #1
 800cb6c:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800cb6e:	6003      	str	r3, [r0, #0]
}
 800cb70:	4770      	bx	lr
 800cb72:	bf00      	nop
 800cb74:	40010000 	.word	0x40010000
 800cb78:	40014000 	.word	0x40014000

0800cb7c <HAL_TIM_Base_Init>:
{
 800cb7c:	b510      	push	{r4, lr}
  if (htim == NULL)
 800cb7e:	4604      	mov	r4, r0
 800cb80:	b350      	cbz	r0, 800cbd8 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800cb82:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800cb86:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800cb8a:	b91b      	cbnz	r3, 800cb94 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800cb8c:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800cb90:	f7ff fe6d 	bl	800c86e <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800cb94:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb96:	6820      	ldr	r0, [r4, #0]
 800cb98:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800cb9a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800cb9e:	f7ff ff83 	bl	800caa8 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cba2:	2301      	movs	r3, #1
  return HAL_OK;
 800cba4:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800cba6:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbaa:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800cbae:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800cbb2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800cbb6:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800cbba:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800cbbe:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800cbc2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800cbc6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800cbca:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800cbce:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800cbd2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800cbd6:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800cbd8:	2001      	movs	r0, #1
 800cbda:	e7fc      	b.n	800cbd6 <HAL_TIM_Base_Init+0x5a>

0800cbdc <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800cbdc:	4770      	bx	lr

0800cbde <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800cbde:	4770      	bx	lr

0800cbe0 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800cbe0:	4770      	bx	lr
	...

0800cbe4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800cbe4:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800cbe6:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe8:	e852 3f00 	ldrex	r3, [r2]
 800cbec:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cbf0:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800cbf4:	6802      	ldr	r2, [r0, #0]
 800cbf6:	2900      	cmp	r1, #0
 800cbf8:	d1f5      	bne.n	800cbe6 <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cbfa:	4c0f      	ldr	r4, [pc, #60]	@ (800cc38 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbfc:	f102 0308 	add.w	r3, r2, #8
 800cc00:	e853 3f00 	ldrex	r3, [r3]
 800cc04:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc06:	f102 0c08 	add.w	ip, r2, #8
 800cc0a:	e84c 3100 	strex	r1, r3, [ip]
 800cc0e:	2900      	cmp	r1, #0
 800cc10:	d1f4      	bne.n	800cbfc <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc12:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800cc14:	2b01      	cmp	r3, #1
 800cc16:	d107      	bne.n	800cc28 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cc18:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cc1c:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc20:	e842 3100 	strex	r1, r3, [r2]
 800cc24:	2900      	cmp	r1, #0
 800cc26:	d1f7      	bne.n	800cc18 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800cc28:	2320      	movs	r3, #32
 800cc2a:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cc2e:	2300      	movs	r3, #0
 800cc30:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800cc32:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800cc34:	bd10      	pop	{r4, pc}
 800cc36:	bf00      	nop
 800cc38:	effffffe 	.word	0xeffffffe

0800cc3c <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800cc3c:	4770      	bx	lr

0800cc3e <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800cc3e:	4770      	bx	lr

0800cc40 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800cc40:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800cc42:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800cc44:	2300      	movs	r3, #0
 800cc46:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800cc4a:	f7ff fff8 	bl	800cc3e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cc4e:	bd08      	pop	{r3, pc}

0800cc50 <HAL_UARTEx_RxEventCallback>:
}
 800cc50:	4770      	bx	lr
	...

0800cc54 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc54:	6803      	ldr	r3, [r0, #0]
{
 800cc56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800cc5a:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 800cc5c:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800cc60:	681a      	ldr	r2, [r3, #0]
{
 800cc62:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800cc64:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800cc66:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800cc68:	d110      	bne.n	800cc8c <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cc6a:	068e      	lsls	r6, r1, #26
 800cc6c:	f140 8097 	bpl.w	800cd9e <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cc70:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cc74:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 800cc78:	433e      	orrs	r6, r7
 800cc7a:	f000 8090 	beq.w	800cd9e <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 800cc7e:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800cc80:	2b00      	cmp	r3, #0
 800cc82:	f000 8085 	beq.w	800cd90 <HAL_UART_IRQHandler+0x13c>
}
 800cc86:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc8a:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc8c:	4ea6      	ldr	r6, [pc, #664]	@ (800cf28 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc8e:	48a7      	ldr	r0, [pc, #668]	@ (800cf2c <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800cc90:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800cc92:	4010      	ands	r0, r2
 800cc94:	4330      	orrs	r0, r6
 800cc96:	f000 8082 	beq.w	800cd9e <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800cc9a:	07cf      	lsls	r7, r1, #31
 800cc9c:	d509      	bpl.n	800ccb2 <HAL_UART_IRQHandler+0x5e>
 800cc9e:	05d0      	lsls	r0, r2, #23
 800cca0:	d507      	bpl.n	800ccb2 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800cca2:	2001      	movs	r0, #1
 800cca4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800cca6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ccaa:	f040 0001 	orr.w	r0, r0, #1
 800ccae:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccb2:	078f      	lsls	r7, r1, #30
 800ccb4:	d509      	bpl.n	800ccca <HAL_UART_IRQHandler+0x76>
 800ccb6:	07e8      	lsls	r0, r5, #31
 800ccb8:	d507      	bpl.n	800ccca <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800ccba:	2002      	movs	r0, #2
 800ccbc:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800ccbe:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ccc2:	f040 0004 	orr.w	r0, r0, #4
 800ccc6:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ccca:	074f      	lsls	r7, r1, #29
 800cccc:	d509      	bpl.n	800cce2 <HAL_UART_IRQHandler+0x8e>
 800ccce:	07e8      	lsls	r0, r5, #31
 800ccd0:	d507      	bpl.n	800cce2 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800ccd2:	2004      	movs	r0, #4
 800ccd4:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800ccd6:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ccda:	f040 0002 	orr.w	r0, r0, #2
 800ccde:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cce2:	070f      	lsls	r7, r1, #28
 800cce4:	d50b      	bpl.n	800ccfe <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800cce6:	f002 0020 	and.w	r0, r2, #32
 800ccea:	4330      	orrs	r0, r6
 800ccec:	d007      	beq.n	800ccfe <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ccee:	2008      	movs	r0, #8
 800ccf0:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800ccf2:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800ccf6:	f040 0008 	orr.w	r0, r0, #8
 800ccfa:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800ccfe:	050e      	lsls	r6, r1, #20
 800cd00:	d50a      	bpl.n	800cd18 <HAL_UART_IRQHandler+0xc4>
 800cd02:	0150      	lsls	r0, r2, #5
 800cd04:	d508      	bpl.n	800cd18 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cd06:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800cd0a:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cd0c:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800cd10:	f043 0320 	orr.w	r3, r3, #32
 800cd14:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cd18:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d037      	beq.n	800cd90 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800cd20:	068b      	lsls	r3, r1, #26
 800cd22:	d509      	bpl.n	800cd38 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800cd24:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800cd28:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800cd2c:	432a      	orrs	r2, r5
 800cd2e:	d003      	beq.n	800cd38 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 800cd30:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800cd32:	b10b      	cbz	r3, 800cd38 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800cd34:	4620      	mov	r0, r4
 800cd36:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd38:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800cd3a:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800cd3c:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd40:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cd42:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cd46:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800cd4a:	ea53 0502 	orrs.w	r5, r3, r2
 800cd4e:	d021      	beq.n	800cd94 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 800cd50:	f7ff ff48 	bl	800cbe4 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cd54:	68b3      	ldr	r3, [r6, #8]
 800cd56:	065f      	lsls	r7, r3, #25
 800cd58:	d517      	bpl.n	800cd8a <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd5a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd5c:	f102 0308 	add.w	r3, r2, #8
 800cd60:	e853 3f00 	ldrex	r3, [r3]
 800cd64:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd68:	3208      	adds	r2, #8
 800cd6a:	e842 3100 	strex	r1, r3, [r2]
 800cd6e:	2900      	cmp	r1, #0
 800cd70:	d1f3      	bne.n	800cd5a <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800cd72:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800cd76:	b140      	cbz	r0, 800cd8a <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cd78:	4b6d      	ldr	r3, [pc, #436]	@ (800cf30 <HAL_UART_IRQHandler+0x2dc>)
 800cd7a:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cd7c:	f7fa ff7e 	bl	8007c7c <HAL_DMA_Abort_IT>
 800cd80:	b130      	cbz	r0, 800cd90 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cd82:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800cd86:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800cd88:	e77d      	b.n	800cc86 <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 800cd8a:	4620      	mov	r0, r4
 800cd8c:	f7ff ff57 	bl	800cc3e <HAL_UART_ErrorCallback>
}
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800cd94:	f7ff ff53 	bl	800cc3e <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cd98:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 800cd9c:	e7f8      	b.n	800cd90 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cd9e:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800cda0:	2801      	cmp	r0, #1
 800cda2:	f040 80b5 	bne.w	800cf10 <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cda6:	06ce      	lsls	r6, r1, #27
 800cda8:	f140 80b2 	bpl.w	800cf10 <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cdac:	06d0      	lsls	r0, r2, #27
 800cdae:	f140 80af 	bpl.w	800cf10 <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdb2:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800cdb4:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cdb8:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cdba:	689a      	ldr	r2, [r3, #8]
 800cdbc:	0652      	lsls	r2, r2, #25
 800cdbe:	d577      	bpl.n	800ceb0 <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800cdc0:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800cdc4:	495b      	ldr	r1, [pc, #364]	@ (800cf34 <HAL_UART_IRQHandler+0x2e0>)
 800cdc6:	682a      	ldr	r2, [r5, #0]
 800cdc8:	428a      	cmp	r2, r1
 800cdca:	d01e      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdcc:	3118      	adds	r1, #24
 800cdce:	428a      	cmp	r2, r1
 800cdd0:	d01b      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdd2:	3118      	adds	r1, #24
 800cdd4:	428a      	cmp	r2, r1
 800cdd6:	d018      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdd8:	3118      	adds	r1, #24
 800cdda:	428a      	cmp	r2, r1
 800cddc:	d015      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdde:	3118      	adds	r1, #24
 800cde0:	428a      	cmp	r2, r1
 800cde2:	d012      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cde4:	3118      	adds	r1, #24
 800cde6:	428a      	cmp	r2, r1
 800cde8:	d00f      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdea:	3118      	adds	r1, #24
 800cdec:	428a      	cmp	r2, r1
 800cdee:	d00c      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdf0:	3118      	adds	r1, #24
 800cdf2:	428a      	cmp	r2, r1
 800cdf4:	d009      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdf6:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800cdfa:	428a      	cmp	r2, r1
 800cdfc:	d005      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800cdfe:	3118      	adds	r1, #24
 800ce00:	428a      	cmp	r2, r1
 800ce02:	d002      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800ce04:	3118      	adds	r1, #24
 800ce06:	428a      	cmp	r2, r1
 800ce08:	d0ff      	beq.n	800ce0a <HAL_UART_IRQHandler+0x1b6>
 800ce0a:	6851      	ldr	r1, [r2, #4]
 800ce0c:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800ce0e:	2900      	cmp	r1, #0
 800ce10:	d043      	beq.n	800ce9a <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ce12:	4281      	cmp	r1, r0
 800ce14:	d241      	bcs.n	800ce9a <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce16:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800ce18:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ce1c:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800ce20:	d02f      	beq.n	800ce82 <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce22:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ce26:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce2a:	e843 2100 	strex	r1, r2, [r3]
 800ce2e:	2900      	cmp	r1, #0
 800ce30:	d1f7      	bne.n	800ce22 <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce32:	f103 0208 	add.w	r2, r3, #8
 800ce36:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce3a:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce3e:	f103 0008 	add.w	r0, r3, #8
 800ce42:	e840 2100 	strex	r1, r2, [r0]
 800ce46:	2900      	cmp	r1, #0
 800ce48:	d1f3      	bne.n	800ce32 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce4a:	f103 0208 	add.w	r2, r3, #8
 800ce4e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ce52:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce56:	f103 0008 	add.w	r0, r3, #8
 800ce5a:	e840 2100 	strex	r1, r2, [r0]
 800ce5e:	2900      	cmp	r1, #0
 800ce60:	d1f3      	bne.n	800ce4a <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800ce62:	2220      	movs	r2, #32
 800ce64:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce68:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce6a:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ce6e:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce72:	e843 2100 	strex	r1, r2, [r3]
 800ce76:	2900      	cmp	r1, #0
 800ce78:	d1f7      	bne.n	800ce6a <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ce7a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800ce7e:	f7fa fd57 	bl	8007930 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce82:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce84:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce88:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce8a:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ce8e:	1ac9      	subs	r1, r1, r3
 800ce90:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ce92:	4620      	mov	r0, r4
 800ce94:	f7ff fedc 	bl	800cc50 <HAL_UARTEx_RxEventCallback>
 800ce98:	e77a      	b.n	800cd90 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ce9a:	4281      	cmp	r1, r0
 800ce9c:	f47f af78 	bne.w	800cd90 <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800cea0:	69eb      	ldr	r3, [r5, #28]
 800cea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cea6:	f47f af73 	bne.w	800cd90 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ceaa:	2302      	movs	r3, #2
 800ceac:	6723      	str	r3, [r4, #112]	@ 0x70
 800ceae:	e7f0      	b.n	800ce92 <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ceb0:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800ceb4:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ceb8:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800ceba:	b289      	uxth	r1, r1
 800cebc:	2900      	cmp	r1, #0
 800cebe:	f43f af67 	beq.w	800cd90 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800cec2:	1a80      	subs	r0, r0, r2
 800cec4:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 800cec6:	2900      	cmp	r1, #0
 800cec8:	f43f af62 	beq.w	800cd90 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cecc:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800ced0:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ced4:	e843 2000 	strex	r0, r2, [r3]
 800ced8:	2800      	cmp	r0, #0
 800ceda:	d1f7      	bne.n	800cecc <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800cedc:	4d16      	ldr	r5, [pc, #88]	@ (800cf38 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	f103 0208 	add.w	r2, r3, #8
 800cee2:	e852 2f00 	ldrex	r2, [r2]
 800cee6:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cee8:	f103 0608 	add.w	r6, r3, #8
 800ceec:	e846 2000 	strex	r0, r2, [r6]
 800cef0:	2800      	cmp	r0, #0
 800cef2:	d1f4      	bne.n	800cede <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 800cef4:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800cef6:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800cef8:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cefc:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cefe:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cf02:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf06:	e843 2000 	strex	r0, r2, [r3]
 800cf0a:	2800      	cmp	r0, #0
 800cf0c:	d1f7      	bne.n	800cefe <HAL_UART_IRQHandler+0x2aa>
 800cf0e:	e7cc      	b.n	800ceaa <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800cf10:	02cf      	lsls	r7, r1, #11
 800cf12:	d513      	bpl.n	800cf3c <HAL_UART_IRQHandler+0x2e8>
 800cf14:	026e      	lsls	r6, r5, #9
 800cf16:	d511      	bpl.n	800cf3c <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf18:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800cf1c:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800cf1e:	621a      	str	r2, [r3, #32]
}
 800cf20:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800cf24:	f000 bb76 	b.w	800d614 <HAL_UARTEx_WakeupCallback>
 800cf28:	10000001 	.word	0x10000001
 800cf2c:	04000120 	.word	0x04000120
 800cf30:	0800cc41 	.word	0x0800cc41
 800cf34:	40020010 	.word	0x40020010
 800cf38:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800cf3c:	0608      	lsls	r0, r1, #24
 800cf3e:	d50b      	bpl.n	800cf58 <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800cf40:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800cf44:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 800cf48:	4328      	orrs	r0, r5
 800cf4a:	d005      	beq.n	800cf58 <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 800cf4c:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800cf4e:	2b00      	cmp	r3, #0
 800cf50:	f43f af1e 	beq.w	800cd90 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800cf54:	4620      	mov	r0, r4
 800cf56:	e696      	b.n	800cc86 <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf58:	064f      	lsls	r7, r1, #25
 800cf5a:	d511      	bpl.n	800cf80 <HAL_UART_IRQHandler+0x32c>
 800cf5c:	0656      	lsls	r6, r2, #25
 800cf5e:	d50f      	bpl.n	800cf80 <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cf60:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800cf64:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cf68:	e843 2100 	strex	r1, r2, [r3]
 800cf6c:	2900      	cmp	r1, #0
 800cf6e:	d1f7      	bne.n	800cf60 <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800cf70:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800cf72:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800cf74:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 800cf76:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 800cf7a:	f7ff fe5f 	bl	800cc3c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800cf7e:	e707      	b.n	800cd90 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800cf80:	020d      	lsls	r5, r1, #8
 800cf82:	d506      	bpl.n	800cf92 <HAL_UART_IRQHandler+0x33e>
 800cf84:	0050      	lsls	r0, r2, #1
 800cf86:	d504      	bpl.n	800cf92 <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf88:	4620      	mov	r0, r4
}
 800cf8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800cf8e:	f000 bb43 	b.w	800d618 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800cf92:	01cb      	lsls	r3, r1, #7
 800cf94:	f57f aefc 	bpl.w	800cd90 <HAL_UART_IRQHandler+0x13c>
 800cf98:	2a00      	cmp	r2, #0
 800cf9a:	f6bf aef9 	bge.w	800cd90 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cf9e:	4620      	mov	r0, r4
}
 800cfa0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800cfa4:	f000 bb37 	b.w	800d616 <HAL_UARTEx_RxFifoFullCallback>

0800cfa8 <UART_SetConfig>:
{
 800cfa8:	b530      	push	{r4, r5, lr}
 800cfaa:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800cfac:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfae:	69c0      	ldr	r0, [r0, #28]
{
 800cfb0:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfb2:	6921      	ldr	r1, [r4, #16]
 800cfb4:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfb6:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfb8:	430a      	orrs	r2, r1
 800cfba:	6961      	ldr	r1, [r4, #20]
 800cfbc:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfbe:	499c      	ldr	r1, [pc, #624]	@ (800d230 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfc0:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfc2:	4029      	ands	r1, r5
 800cfc4:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfc6:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cfc8:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfca:	685a      	ldr	r2, [r3, #4]
 800cfcc:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800cfd0:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800cfd2:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800cfd4:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800cfd6:	4a97      	ldr	r2, [pc, #604]	@ (800d234 <UART_SetConfig+0x28c>)
 800cfd8:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800cfda:	bf1c      	itt	ne
 800cfdc:	6a22      	ldrne	r2, [r4, #32]
 800cfde:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfe0:	689a      	ldr	r2, [r3, #8]
 800cfe2:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800cfe6:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800cfea:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cfec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800cfee:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800cff0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800cff2:	f022 020f 	bic.w	r2, r2, #15
 800cff6:	430a      	orrs	r2, r1
 800cff8:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800cffa:	4a8f      	ldr	r2, [pc, #572]	@ (800d238 <UART_SetConfig+0x290>)
 800cffc:	4293      	cmp	r3, r2
 800cffe:	d128      	bne.n	800d052 <UART_SetConfig+0xaa>
 800d000:	4b8e      	ldr	r3, [pc, #568]	@ (800d23c <UART_SetConfig+0x294>)
 800d002:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d004:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d008:	2b18      	cmp	r3, #24
 800d00a:	f000 812f 	beq.w	800d26c <UART_SetConfig+0x2c4>
 800d00e:	d814      	bhi.n	800d03a <UART_SetConfig+0x92>
 800d010:	2b08      	cmp	r3, #8
 800d012:	f000 8154 	beq.w	800d2be <UART_SetConfig+0x316>
 800d016:	2b10      	cmp	r3, #16
 800d018:	f000 8102 	beq.w	800d220 <UART_SetConfig+0x278>
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	f000 80f9 	beq.w	800d214 <UART_SetConfig+0x26c>
 800d022:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d024:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d028:	f040 80b4 	bne.w	800d194 <UART_SetConfig+0x1ec>
    switch (clocksource)
 800d02c:	2b08      	cmp	r3, #8
 800d02e:	d846      	bhi.n	800d0be <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d030:	4668      	mov	r0, sp
 800d032:	f7ff fa5b 	bl	800c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d036:	9801      	ldr	r0, [sp, #4]
        break;
 800d038:	e0e9      	b.n	800d20e <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d03a:	2b20      	cmp	r3, #32
 800d03c:	f000 80dd 	beq.w	800d1fa <UART_SetConfig+0x252>
 800d040:	2b28      	cmp	r3, #40	@ 0x28
 800d042:	d1ee      	bne.n	800d022 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d044:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d048:	f000 811d 	beq.w	800d286 <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 800d04c:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d050:	e0be      	b.n	800d1d0 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d052:	4a7b      	ldr	r2, [pc, #492]	@ (800d240 <UART_SetConfig+0x298>)
 800d054:	4293      	cmp	r3, r2
 800d056:	d115      	bne.n	800d084 <UART_SetConfig+0xdc>
 800d058:	4b78      	ldr	r3, [pc, #480]	@ (800d23c <UART_SetConfig+0x294>)
 800d05a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d05c:	f003 0307 	and.w	r3, r3, #7
 800d060:	2b05      	cmp	r3, #5
 800d062:	d82c      	bhi.n	800d0be <UART_SetConfig+0x116>
 800d064:	a201      	add	r2, pc, #4	@ (adr r2, 800d06c <UART_SetConfig+0xc4>)
 800d066:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d06a:	bf00      	nop
 800d06c:	0800d205 	.word	0x0800d205
 800d070:	0800d191 	.word	0x0800d191
 800d074:	0800d221 	.word	0x0800d221
 800d078:	0800d26d 	.word	0x0800d26d
 800d07c:	0800d1fb 	.word	0x0800d1fb
 800d080:	0800d045 	.word	0x0800d045
 800d084:	4a6f      	ldr	r2, [pc, #444]	@ (800d244 <UART_SetConfig+0x29c>)
 800d086:	4293      	cmp	r3, r2
 800d088:	d0e6      	beq.n	800d058 <UART_SetConfig+0xb0>
 800d08a:	4a6f      	ldr	r2, [pc, #444]	@ (800d248 <UART_SetConfig+0x2a0>)
 800d08c:	4293      	cmp	r3, r2
 800d08e:	d0e3      	beq.n	800d058 <UART_SetConfig+0xb0>
 800d090:	4a6e      	ldr	r2, [pc, #440]	@ (800d24c <UART_SetConfig+0x2a4>)
 800d092:	4293      	cmp	r3, r2
 800d094:	d0e0      	beq.n	800d058 <UART_SetConfig+0xb0>
 800d096:	4a6e      	ldr	r2, [pc, #440]	@ (800d250 <UART_SetConfig+0x2a8>)
 800d098:	4293      	cmp	r3, r2
 800d09a:	d118      	bne.n	800d0ce <UART_SetConfig+0x126>
 800d09c:	4b67      	ldr	r3, [pc, #412]	@ (800d23c <UART_SetConfig+0x294>)
 800d09e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d0a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800d0a4:	2b18      	cmp	r3, #24
 800d0a6:	f000 80e1 	beq.w	800d26c <UART_SetConfig+0x2c4>
 800d0aa:	d80a      	bhi.n	800d0c2 <UART_SetConfig+0x11a>
 800d0ac:	2b08      	cmp	r3, #8
 800d0ae:	f000 8106 	beq.w	800d2be <UART_SetConfig+0x316>
 800d0b2:	2b10      	cmp	r3, #16
 800d0b4:	f000 80b4 	beq.w	800d220 <UART_SetConfig+0x278>
 800d0b8:	2b00      	cmp	r3, #0
 800d0ba:	f000 80ab 	beq.w	800d214 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 800d0be:	2001      	movs	r0, #1
 800d0c0:	e049      	b.n	800d156 <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d0c2:	2b20      	cmp	r3, #32
 800d0c4:	f000 8099 	beq.w	800d1fa <UART_SetConfig+0x252>
 800d0c8:	2b28      	cmp	r3, #40	@ 0x28
 800d0ca:	d0bb      	beq.n	800d044 <UART_SetConfig+0x9c>
 800d0cc:	e7f7      	b.n	800d0be <UART_SetConfig+0x116>
 800d0ce:	4a61      	ldr	r2, [pc, #388]	@ (800d254 <UART_SetConfig+0x2ac>)
 800d0d0:	4293      	cmp	r3, r2
 800d0d2:	d0c1      	beq.n	800d058 <UART_SetConfig+0xb0>
 800d0d4:	4a60      	ldr	r2, [pc, #384]	@ (800d258 <UART_SetConfig+0x2b0>)
 800d0d6:	4293      	cmp	r3, r2
 800d0d8:	d0be      	beq.n	800d058 <UART_SetConfig+0xb0>
 800d0da:	4a56      	ldr	r2, [pc, #344]	@ (800d234 <UART_SetConfig+0x28c>)
 800d0dc:	4293      	cmp	r3, r2
 800d0de:	d1ee      	bne.n	800d0be <UART_SetConfig+0x116>
 800d0e0:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800d0e4:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800d0e6:	f003 0307 	and.w	r3, r3, #7
 800d0ea:	2b05      	cmp	r3, #5
 800d0ec:	d8e7      	bhi.n	800d0be <UART_SetConfig+0x116>
 800d0ee:	e8df f003 	tbb	[pc, r3]
 800d0f2:	2b49      	.short	0x2b49
 800d0f4:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 800d0f8:	4858      	ldr	r0, [pc, #352]	@ (800d25c <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d0fa:	4b59      	ldr	r3, [pc, #356]	@ (800d260 <UART_SetConfig+0x2b8>)
 800d0fc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d0fe:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d100:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d104:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800d108:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800d10c:	4299      	cmp	r1, r3
 800d10e:	d8d6      	bhi.n	800d0be <UART_SetConfig+0x116>
 800d110:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800d114:	d8d3      	bhi.n	800d0be <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d116:	2300      	movs	r3, #0
 800d118:	4619      	mov	r1, r3
 800d11a:	f7f3 faf5 	bl	8000708 <__aeabi_uldivmod>
 800d11e:	462a      	mov	r2, r5
 800d120:	0209      	lsls	r1, r1, #8
 800d122:	086b      	lsrs	r3, r5, #1
 800d124:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800d128:	0200      	lsls	r0, r0, #8
 800d12a:	18c0      	adds	r0, r0, r3
 800d12c:	f04f 0300 	mov.w	r3, #0
 800d130:	f141 0100 	adc.w	r1, r1, #0
 800d134:	f7f3 fae8 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800d138:	4b4a      	ldr	r3, [pc, #296]	@ (800d264 <UART_SetConfig+0x2bc>)
 800d13a:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800d13e:	429a      	cmp	r2, r3
 800d140:	d8bd      	bhi.n	800d0be <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 800d142:	6823      	ldr	r3, [r4, #0]
 800d144:	60d8      	str	r0, [r3, #12]
 800d146:	e005      	b.n	800d154 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d148:	4668      	mov	r0, sp
 800d14a:	f7ff f9cf 	bl	800c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d14e:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800d150:	2800      	cmp	r0, #0
 800d152:	d1d2      	bne.n	800d0fa <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800d154:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800d156:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800d15a:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800d15c:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800d15e:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800d162:	b007      	add	sp, #28
 800d164:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d166:	a803      	add	r0, sp, #12
 800d168:	f7ff fa6a 	bl	800c640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d16c:	9804      	ldr	r0, [sp, #16]
        break;
 800d16e:	e7ef      	b.n	800d150 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d170:	6813      	ldr	r3, [r2, #0]
 800d172:	483d      	ldr	r0, [pc, #244]	@ (800d268 <UART_SetConfig+0x2c0>)
 800d174:	f013 0f20 	tst.w	r3, #32
 800d178:	d0bf      	beq.n	800d0fa <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d17a:	6813      	ldr	r3, [r2, #0]
 800d17c:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d180:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800d182:	e7ba      	b.n	800d0fa <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800d184:	f7ff f9a0 	bl	800c4c8 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800d188:	e7e2      	b.n	800d150 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d18a:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800d18e:	e7b4      	b.n	800d0fa <UART_SetConfig+0x152>
 800d190:	2304      	movs	r3, #4
 800d192:	e747      	b.n	800d024 <UART_SetConfig+0x7c>
    switch (clocksource)
 800d194:	2b08      	cmp	r3, #8
 800d196:	d892      	bhi.n	800d0be <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800d198:	4668      	mov	r0, sp
 800d19a:	f7ff f9a7 	bl	800c4ec <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800d19e:	9801      	ldr	r0, [sp, #4]
        break;
 800d1a0:	e001      	b.n	800d1a6 <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d1a2:	f7fe fb45 	bl	800b830 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d1a6:	2800      	cmp	r0, #0
 800d1a8:	d0d4      	beq.n	800d154 <UART_SetConfig+0x1ac>
 800d1aa:	e011      	b.n	800d1d0 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d1ac:	f7fe fb52 	bl	800b854 <HAL_RCC_GetPCLK2Freq>
        break;
 800d1b0:	e7f9      	b.n	800d1a6 <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d1b2:	a803      	add	r0, sp, #12
 800d1b4:	f7ff fa44 	bl	800c640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d1b8:	9804      	ldr	r0, [sp, #16]
        break;
 800d1ba:	e7f4      	b.n	800d1a6 <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d1bc:	4b1f      	ldr	r3, [pc, #124]	@ (800d23c <UART_SetConfig+0x294>)
 800d1be:	482a      	ldr	r0, [pc, #168]	@ (800d268 <UART_SetConfig+0x2c0>)
 800d1c0:	681a      	ldr	r2, [r3, #0]
 800d1c2:	f012 0f20 	tst.w	r2, #32
 800d1c6:	d003      	beq.n	800d1d0 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d1c8:	681b      	ldr	r3, [r3, #0]
 800d1ca:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d1ce:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d1d0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d1d2:	4b23      	ldr	r3, [pc, #140]	@ (800d260 <UART_SetConfig+0x2b8>)
 800d1d4:	6862      	ldr	r2, [r4, #4]
 800d1d6:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800d1da:	fbb0 f3f3 	udiv	r3, r0, r3
 800d1de:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800d1e2:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d1e6:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800d1ea:	f1a3 0110 	sub.w	r1, r3, #16
 800d1ee:	4291      	cmp	r1, r2
 800d1f0:	f63f af65 	bhi.w	800d0be <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d1f4:	6822      	ldr	r2, [r4, #0]
 800d1f6:	60d3      	str	r3, [r2, #12]
 800d1f8:	e7ac      	b.n	800d154 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d1fa:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d1fe:	4817      	ldr	r0, [pc, #92]	@ (800d25c <UART_SetConfig+0x2b4>)
 800d200:	d1e6      	bne.n	800d1d0 <UART_SetConfig+0x228>
 800d202:	e040      	b.n	800d286 <UART_SetConfig+0x2de>
 800d204:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d208:	d1cb      	bne.n	800d1a2 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800d20a:	f7fe fb11 	bl	800b830 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800d20e:	2800      	cmp	r0, #0
 800d210:	d0a0      	beq.n	800d154 <UART_SetConfig+0x1ac>
 800d212:	e038      	b.n	800d286 <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d214:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d218:	d1c8      	bne.n	800d1ac <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800d21a:	f7fe fb1b 	bl	800b854 <HAL_RCC_GetPCLK2Freq>
        break;
 800d21e:	e7f6      	b.n	800d20e <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d220:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d224:	d1c5      	bne.n	800d1b2 <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800d226:	a803      	add	r0, sp, #12
 800d228:	f7ff fa0a 	bl	800c640 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800d22c:	9804      	ldr	r0, [sp, #16]
        break;
 800d22e:	e7ee      	b.n	800d20e <UART_SetConfig+0x266>
 800d230:	cfff69f3 	.word	0xcfff69f3
 800d234:	58000c00 	.word	0x58000c00
 800d238:	40011000 	.word	0x40011000
 800d23c:	58024400 	.word	0x58024400
 800d240:	40004400 	.word	0x40004400
 800d244:	40004800 	.word	0x40004800
 800d248:	40004c00 	.word	0x40004c00
 800d24c:	40005000 	.word	0x40005000
 800d250:	40011400 	.word	0x40011400
 800d254:	40007800 	.word	0x40007800
 800d258:	40007c00 	.word	0x40007c00
 800d25c:	003d0900 	.word	0x003d0900
 800d260:	0802ab34 	.word	0x0802ab34
 800d264:	000ffcff 	.word	0x000ffcff
 800d268:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d26c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d270:	d1a4      	bne.n	800d1bc <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800d272:	4b15      	ldr	r3, [pc, #84]	@ (800d2c8 <UART_SetConfig+0x320>)
 800d274:	4815      	ldr	r0, [pc, #84]	@ (800d2cc <UART_SetConfig+0x324>)
 800d276:	681a      	ldr	r2, [r3, #0]
 800d278:	f012 0f20 	tst.w	r2, #32
 800d27c:	d003      	beq.n	800d286 <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800d27e:	681b      	ldr	r3, [r3, #0]
 800d280:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800d284:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d286:	4b12      	ldr	r3, [pc, #72]	@ (800d2d0 <UART_SetConfig+0x328>)
 800d288:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800d28a:	6861      	ldr	r1, [r4, #4]
 800d28c:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800d290:	084b      	lsrs	r3, r1, #1
 800d292:	fbb0 f2f2 	udiv	r2, r0, r2
 800d296:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d29a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800d29e:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d2a2:	f1a3 0110 	sub.w	r1, r3, #16
 800d2a6:	4291      	cmp	r1, r2
 800d2a8:	f63f af09 	bhi.w	800d0be <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2ac:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d2b0:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800d2b4:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d2b6:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800d2b8:	4313      	orrs	r3, r2
 800d2ba:	60cb      	str	r3, [r1, #12]
 800d2bc:	e74a      	b.n	800d154 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d2be:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800d2c2:	f47f af69 	bne.w	800d198 <UART_SetConfig+0x1f0>
 800d2c6:	e6b3      	b.n	800d030 <UART_SetConfig+0x88>
 800d2c8:	58024400 	.word	0x58024400
 800d2cc:	03d09000 	.word	0x03d09000
 800d2d0:	0802ab34 	.word	0x0802ab34

0800d2d4 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2d4:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800d2d6:	071a      	lsls	r2, r3, #28
{
 800d2d8:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d2da:	d506      	bpl.n	800d2ea <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d2dc:	6801      	ldr	r1, [r0, #0]
 800d2de:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800d2e0:	684a      	ldr	r2, [r1, #4]
 800d2e2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d2e6:	4322      	orrs	r2, r4
 800d2e8:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d2ea:	07dc      	lsls	r4, r3, #31
 800d2ec:	d506      	bpl.n	800d2fc <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d2ee:	6801      	ldr	r1, [r0, #0]
 800d2f0:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800d2f2:	684a      	ldr	r2, [r1, #4]
 800d2f4:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800d2f8:	4322      	orrs	r2, r4
 800d2fa:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d2fc:	0799      	lsls	r1, r3, #30
 800d2fe:	d506      	bpl.n	800d30e <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d300:	6801      	ldr	r1, [r0, #0]
 800d302:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800d304:	684a      	ldr	r2, [r1, #4]
 800d306:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d30a:	4322      	orrs	r2, r4
 800d30c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d30e:	075a      	lsls	r2, r3, #29
 800d310:	d506      	bpl.n	800d320 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d312:	6801      	ldr	r1, [r0, #0]
 800d314:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800d316:	684a      	ldr	r2, [r1, #4]
 800d318:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800d31c:	4322      	orrs	r2, r4
 800d31e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d320:	06dc      	lsls	r4, r3, #27
 800d322:	d506      	bpl.n	800d332 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d324:	6801      	ldr	r1, [r0, #0]
 800d326:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800d328:	688a      	ldr	r2, [r1, #8]
 800d32a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d32e:	4322      	orrs	r2, r4
 800d330:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d332:	0699      	lsls	r1, r3, #26
 800d334:	d506      	bpl.n	800d344 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d336:	6801      	ldr	r1, [r0, #0]
 800d338:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800d33a:	688a      	ldr	r2, [r1, #8]
 800d33c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d340:	4322      	orrs	r2, r4
 800d342:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d344:	065a      	lsls	r2, r3, #25
 800d346:	d510      	bpl.n	800d36a <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d348:	6801      	ldr	r1, [r0, #0]
 800d34a:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800d34c:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d34e:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d352:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800d356:	ea42 0204 	orr.w	r2, r2, r4
 800d35a:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d35c:	d105      	bne.n	800d36a <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d35e:	684a      	ldr	r2, [r1, #4]
 800d360:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800d362:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800d366:	4322      	orrs	r2, r4
 800d368:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d36a:	061b      	lsls	r3, r3, #24
 800d36c:	d506      	bpl.n	800d37c <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d36e:	6802      	ldr	r2, [r0, #0]
 800d370:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800d372:	6853      	ldr	r3, [r2, #4]
 800d374:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800d378:	430b      	orrs	r3, r1
 800d37a:	6053      	str	r3, [r2, #4]
}
 800d37c:	bd10      	pop	{r4, pc}

0800d37e <UART_WaitOnFlagUntilTimeout>:
{
 800d37e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d382:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d386:	4604      	mov	r4, r0
 800d388:	460d      	mov	r5, r1
 800d38a:	4617      	mov	r7, r2
 800d38c:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d38e:	6822      	ldr	r2, [r4, #0]
 800d390:	69d3      	ldr	r3, [r2, #28]
 800d392:	ea35 0303 	bics.w	r3, r5, r3
 800d396:	bf0c      	ite	eq
 800d398:	2301      	moveq	r3, #1
 800d39a:	2300      	movne	r3, #0
 800d39c:	42bb      	cmp	r3, r7
 800d39e:	d001      	beq.n	800d3a4 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800d3a0:	2000      	movs	r0, #0
 800d3a2:	e022      	b.n	800d3ea <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800d3a4:	f1b9 3fff 	cmp.w	r9, #4294967295
 800d3a8:	d0f2      	beq.n	800d390 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d3aa:	f7fa f993 	bl	80076d4 <HAL_GetTick>
 800d3ae:	eba0 0008 	sub.w	r0, r0, r8
 800d3b2:	4548      	cmp	r0, r9
 800d3b4:	d829      	bhi.n	800d40a <UART_WaitOnFlagUntilTimeout+0x8c>
 800d3b6:	f1b9 0f00 	cmp.w	r9, #0
 800d3ba:	d026      	beq.n	800d40a <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d3bc:	6821      	ldr	r1, [r4, #0]
 800d3be:	680b      	ldr	r3, [r1, #0]
 800d3c0:	075a      	lsls	r2, r3, #29
 800d3c2:	d5e4      	bpl.n	800d38e <UART_WaitOnFlagUntilTimeout+0x10>
 800d3c4:	2d80      	cmp	r5, #128	@ 0x80
 800d3c6:	d0e2      	beq.n	800d38e <UART_WaitOnFlagUntilTimeout+0x10>
 800d3c8:	2d40      	cmp	r5, #64	@ 0x40
 800d3ca:	d0e0      	beq.n	800d38e <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d3cc:	69ce      	ldr	r6, [r1, #28]
 800d3ce:	f016 0608 	ands.w	r6, r6, #8
 800d3d2:	d00c      	beq.n	800d3ee <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3d4:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800d3d6:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d3d8:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800d3da:	f7ff fc03 	bl	800cbe4 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800d3de:	2300      	movs	r3, #0
          return HAL_ERROR;
 800d3e0:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d3e2:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800d3e6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800d3ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d3ee:	69cb      	ldr	r3, [r1, #28]
 800d3f0:	051b      	lsls	r3, r3, #20
 800d3f2:	d5cc      	bpl.n	800d38e <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800d3f8:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d3fa:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800d3fc:	f7ff fbf2 	bl	800cbe4 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d400:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800d402:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d406:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800d40a:	2003      	movs	r0, #3
 800d40c:	e7ed      	b.n	800d3ea <UART_WaitOnFlagUntilTimeout+0x6c>

0800d40e <HAL_UART_Transmit>:
{
 800d40e:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d412:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800d414:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800d418:	4604      	mov	r4, r0
 800d41a:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800d41c:	2b20      	cmp	r3, #32
{
 800d41e:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800d420:	d146      	bne.n	800d4b0 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800d422:	2900      	cmp	r1, #0
 800d424:	d046      	beq.n	800d4b4 <HAL_UART_Transmit+0xa6>
 800d426:	2a00      	cmp	r2, #0
 800d428:	d044      	beq.n	800d4b4 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d42a:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d42c:	2500      	movs	r5, #0
 800d42e:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800d432:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800d436:	f7fa f94d 	bl	80076d4 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d43a:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800d43c:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800d43e:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d442:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800d446:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d44a:	d103      	bne.n	800d454 <HAL_UART_Transmit+0x46>
 800d44c:	6923      	ldr	r3, [r4, #16]
 800d44e:	b90b      	cbnz	r3, 800d454 <HAL_UART_Transmit+0x46>
 800d450:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800d452:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800d454:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d458:	464b      	mov	r3, r9
 800d45a:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800d45e:	b292      	uxth	r2, r2
 800d460:	b942      	cbnz	r2, 800d474 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800d462:	2140      	movs	r1, #64	@ 0x40
 800d464:	4620      	mov	r0, r4
 800d466:	f7ff ff8a 	bl	800d37e <UART_WaitOnFlagUntilTimeout>
 800d46a:	2320      	movs	r3, #32
 800d46c:	b948      	cbnz	r0, 800d482 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800d46e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800d472:	e009      	b.n	800d488 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800d474:	2200      	movs	r2, #0
 800d476:	2180      	movs	r1, #128	@ 0x80
 800d478:	4620      	mov	r0, r4
 800d47a:	f7ff ff80 	bl	800d37e <UART_WaitOnFlagUntilTimeout>
 800d47e:	b130      	cbz	r0, 800d48e <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800d480:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800d482:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800d484:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800d488:	b003      	add	sp, #12
 800d48a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d48e:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800d490:	b95e      	cbnz	r6, 800d4aa <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800d492:	f835 3b02 	ldrh.w	r3, [r5], #2
 800d496:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d49a:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800d49c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800d4a0:	3a01      	subs	r2, #1
 800d4a2:	b292      	uxth	r2, r2
 800d4a4:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 800d4a8:	e7d4      	b.n	800d454 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800d4aa:	f816 3b01 	ldrb.w	r3, [r6], #1
 800d4ae:	e7f4      	b.n	800d49a <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800d4b0:	2002      	movs	r0, #2
 800d4b2:	e7e9      	b.n	800d488 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800d4b4:	2001      	movs	r0, #1
 800d4b6:	e7e7      	b.n	800d488 <HAL_UART_Transmit+0x7a>

0800d4b8 <UART_CheckIdleState>:
{
 800d4b8:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4ba:	2600      	movs	r6, #0
{
 800d4bc:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d4be:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800d4c2:	f7fa f907 	bl	80076d4 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4c6:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800d4c8:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	071a      	lsls	r2, r3, #28
 800d4ce:	d51c      	bpl.n	800d50a <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d4d0:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d4d4:	4632      	mov	r2, r6
 800d4d6:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800d4da:	9300      	str	r3, [sp, #0]
 800d4dc:	4603      	mov	r3, r0
 800d4de:	4620      	mov	r0, r4
 800d4e0:	f7ff ff4d 	bl	800d37e <UART_WaitOnFlagUntilTimeout>
 800d4e4:	b188      	cbz	r0, 800d50a <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800d4e6:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4e8:	e852 3f00 	ldrex	r3, [r2]
 800d4ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4f0:	e842 3100 	strex	r1, r3, [r2]
 800d4f4:	2900      	cmp	r1, #0
 800d4f6:	d1f6      	bne.n	800d4e6 <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800d4f8:	2320      	movs	r3, #32
 800d4fa:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800d4fe:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800d500:	2300      	movs	r3, #0
 800d502:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800d506:	b002      	add	sp, #8
 800d508:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800d50a:	6823      	ldr	r3, [r4, #0]
 800d50c:	681b      	ldr	r3, [r3, #0]
 800d50e:	075b      	lsls	r3, r3, #29
 800d510:	d524      	bpl.n	800d55c <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d512:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800d516:	2200      	movs	r2, #0
 800d518:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800d51c:	4620      	mov	r0, r4
 800d51e:	9300      	str	r3, [sp, #0]
 800d520:	462b      	mov	r3, r5
 800d522:	f7ff ff2c 	bl	800d37e <UART_WaitOnFlagUntilTimeout>
 800d526:	b1c8      	cbz	r0, 800d55c <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800d528:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d52a:	e852 3f00 	ldrex	r3, [r2]
 800d52e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d532:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800d536:	6822      	ldr	r2, [r4, #0]
 800d538:	2900      	cmp	r1, #0
 800d53a:	d1f5      	bne.n	800d528 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d53c:	f102 0308 	add.w	r3, r2, #8
 800d540:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d544:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d548:	f102 0008 	add.w	r0, r2, #8
 800d54c:	e840 3100 	strex	r1, r3, [r0]
 800d550:	2900      	cmp	r1, #0
 800d552:	d1f3      	bne.n	800d53c <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800d554:	2320      	movs	r3, #32
 800d556:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800d55a:	e7d0      	b.n	800d4fe <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800d55c:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d55e:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800d560:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800d564:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d568:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d56a:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800d56c:	e7c8      	b.n	800d500 <UART_CheckIdleState+0x48>

0800d56e <HAL_UART_Init>:
{
 800d56e:	b510      	push	{r4, lr}
  if (huart == NULL)
 800d570:	4604      	mov	r4, r0
 800d572:	b350      	cbz	r0, 800d5ca <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800d574:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800d578:	b91b      	cbnz	r3, 800d582 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800d57a:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800d57e:	f7f4 f8e7 	bl	8001750 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800d582:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800d584:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d586:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800d58a:	6813      	ldr	r3, [r2, #0]
 800d58c:	f023 0301 	bic.w	r3, r3, #1
 800d590:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800d592:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800d594:	b113      	cbz	r3, 800d59c <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800d596:	4620      	mov	r0, r4
 800d598:	f7ff fe9c 	bl	800d2d4 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800d59c:	4620      	mov	r0, r4
 800d59e:	f7ff fd03 	bl	800cfa8 <UART_SetConfig>
 800d5a2:	2801      	cmp	r0, #1
 800d5a4:	d011      	beq.n	800d5ca <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5a6:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800d5a8:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800d5aa:	685a      	ldr	r2, [r3, #4]
 800d5ac:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800d5b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800d5b2:	689a      	ldr	r2, [r3, #8]
 800d5b4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800d5b8:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800d5ba:	681a      	ldr	r2, [r3, #0]
 800d5bc:	f042 0201 	orr.w	r2, r2, #1
}
 800d5c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800d5c4:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800d5c6:	f7ff bf77 	b.w	800d4b8 <UART_CheckIdleState>
}
 800d5ca:	2001      	movs	r0, #1
 800d5cc:	bd10      	pop	{r4, pc}
	...

0800d5d0 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5d0:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800d5d2:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800d5d4:	b92b      	cbnz	r3, 800d5e2 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800d5d6:	2301      	movs	r3, #1
 800d5d8:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800d5dc:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800d5e0:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5e2:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5e4:	4d09      	ldr	r5, [pc, #36]	@ (800d60c <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800d5e6:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5e8:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5ea:	4c09      	ldr	r4, [pc, #36]	@ (800d610 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d5ec:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800d5f0:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5f2:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800d5f4:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800d5f6:	011b      	lsls	r3, r3, #4
 800d5f8:	fbb3 f3f1 	udiv	r3, r3, r1
 800d5fc:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d600:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800d602:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800d604:	011b      	lsls	r3, r3, #4
 800d606:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800d60a:	e7e7      	b.n	800d5dc <UARTEx_SetNbDataToProcess+0xc>
 800d60c:	0802ab54 	.word	0x0802ab54
 800d610:	0802ab4c 	.word	0x0802ab4c

0800d614 <HAL_UARTEx_WakeupCallback>:
}
 800d614:	4770      	bx	lr

0800d616 <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800d616:	4770      	bx	lr

0800d618 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800d618:	4770      	bx	lr

0800d61a <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800d61a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800d61e:	2b01      	cmp	r3, #1
 800d620:	d014      	beq.n	800d64c <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d622:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d624:	2324      	movs	r3, #36	@ 0x24
 800d626:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d62a:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800d62c:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800d62e:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800d632:	f023 0301 	bic.w	r3, r3, #1
 800d636:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800d638:	2300      	movs	r3, #0
 800d63a:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d63c:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d63e:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800d640:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800d644:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800d648:	4618      	mov	r0, r3
 800d64a:	4770      	bx	lr
  __HAL_LOCK(huart);
 800d64c:	2002      	movs	r0, #2
}
 800d64e:	4770      	bx	lr

0800d650 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800d650:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800d652:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800d656:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800d658:	2b01      	cmp	r3, #1
 800d65a:	d017      	beq.n	800d68c <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d65c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d65e:	2324      	movs	r3, #36	@ 0x24
 800d660:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d664:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800d666:	682b      	ldr	r3, [r5, #0]
 800d668:	f023 0301 	bic.w	r3, r3, #1
 800d66c:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800d66e:	68ab      	ldr	r3, [r5, #8]
 800d670:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800d674:	4319      	orrs	r1, r3
 800d676:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d678:	f7ff ffaa 	bl	800d5d0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800d67c:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d67e:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d680:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800d684:	2000      	movs	r0, #0
 800d686:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800d68a:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800d68c:	2002      	movs	r0, #2
 800d68e:	e7fc      	b.n	800d68a <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800d690 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800d690:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800d692:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800d696:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800d698:	2b01      	cmp	r3, #1
 800d69a:	d017      	beq.n	800d6cc <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d69c:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800d69e:	2324      	movs	r3, #36	@ 0x24
 800d6a0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800d6a4:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800d6a6:	682b      	ldr	r3, [r5, #0]
 800d6a8:	f023 0301 	bic.w	r3, r3, #1
 800d6ac:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800d6ae:	68ab      	ldr	r3, [r5, #8]
 800d6b0:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800d6b4:	4319      	orrs	r1, r3
 800d6b6:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800d6b8:	f7ff ff8a 	bl	800d5d0 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800d6bc:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800d6be:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800d6c0:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800d6c4:	2000      	movs	r0, #0
 800d6c6:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800d6ca:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800d6cc:	2002      	movs	r0, #2
 800d6ce:	e7fc      	b.n	800d6ca <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800d6d0 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800d6d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d6d4:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800d6d8:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800d6dc:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800d6e0:	ea43 0308 	orr.w	r3, r3, r8
 800d6e4:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800d6e8:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800d6ec:	6809      	ldr	r1, [r1, #0]
 800d6ee:	b991      	cbnz	r1, 800d716 <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d6f0:	ea43 030e 	orr.w	r3, r3, lr
 800d6f4:	6801      	ldr	r1, [r0, #0]
 800d6f6:	4313      	orrs	r3, r2
 800d6f8:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800d6fc:	ea43 030c 	orr.w	r3, r3, ip
 800d700:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800d704:	433b      	orrs	r3, r7
 800d706:	4333      	orrs	r3, r6
 800d708:	432b      	orrs	r3, r5
 800d70a:	4323      	orrs	r3, r4
 800d70c:	430b      	orrs	r3, r1
 800d70e:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800d710:	2000      	movs	r0, #0
 800d712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800d716:	6801      	ldr	r1, [r0, #0]
 800d718:	ea43 030e 	orr.w	r3, r3, lr
 800d71c:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800d720:	430b      	orrs	r3, r1
 800d722:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800d724:	ea42 030c 	orr.w	r3, r2, ip
 800d728:	6841      	ldr	r1, [r0, #4]
 800d72a:	433b      	orrs	r3, r7
 800d72c:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800d730:	4333      	orrs	r3, r6
 800d732:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800d736:	432b      	orrs	r3, r5
 800d738:	4323      	orrs	r3, r4
 800d73a:	4313      	orrs	r3, r2
 800d73c:	6043      	str	r3, [r0, #4]
 800d73e:	e7e7      	b.n	800d710 <FMC_SDRAM_Init+0x40>

0800d740 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d740:	68cb      	ldr	r3, [r1, #12]
 800d742:	f103 3cff 	add.w	ip, r3, #4294967295
 800d746:	694b      	ldr	r3, [r1, #20]
{
 800d748:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d74a:	3b01      	subs	r3, #1
 800d74c:	680f      	ldr	r7, [r1, #0]
 800d74e:	684c      	ldr	r4, [r1, #4]
 800d750:	688e      	ldr	r6, [r1, #8]
 800d752:	051b      	lsls	r3, r3, #20
 800d754:	690d      	ldr	r5, [r1, #16]
 800d756:	3c01      	subs	r4, #1
 800d758:	6989      	ldr	r1, [r1, #24]
 800d75a:	3e01      	subs	r6, #1
 800d75c:	3d01      	subs	r5, #1
 800d75e:	3f01      	subs	r7, #1
 800d760:	3901      	subs	r1, #1
 800d762:	0124      	lsls	r4, r4, #4
 800d764:	0236      	lsls	r6, r6, #8
 800d766:	042d      	lsls	r5, r5, #16
 800d768:	0609      	lsls	r1, r1, #24
 800d76a:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800d76e:	b95a      	cbnz	r2, 800d788 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d770:	433b      	orrs	r3, r7
 800d772:	6882      	ldr	r2, [r0, #8]
 800d774:	4323      	orrs	r3, r4
 800d776:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800d77a:	4333      	orrs	r3, r6
 800d77c:	432b      	orrs	r3, r5
 800d77e:	430b      	orrs	r3, r1
 800d780:	4313      	orrs	r3, r2
 800d782:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800d784:	2000      	movs	r0, #0
 800d786:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d788:	6882      	ldr	r2, [r0, #8]
 800d78a:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800d78e:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800d792:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d794:	ea44 0306 	orr.w	r3, r4, r6
 800d798:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800d79a:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800d79c:	68c2      	ldr	r2, [r0, #12]
 800d79e:	432b      	orrs	r3, r5
 800d7a0:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800d7a4:	430b      	orrs	r3, r1
 800d7a6:	4313      	orrs	r3, r2
 800d7a8:	60c3      	str	r3, [r0, #12]
 800d7aa:	e7eb      	b.n	800d784 <FMC_SDRAM_Timing_Init+0x44>

0800d7ac <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800d7b2:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800d7b6:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800d7ba:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800d7bc:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800d7c0:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800d7c2:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800d7c4:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800d7c6:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800d7c8:	4770      	bx	lr

0800d7ca <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d7ca:	6902      	ldr	r2, [r0, #16]
{
 800d7cc:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800d7ce:	e9d1 3400 	ldrd	r3, r4, [r1]
 800d7d2:	0d92      	lsrs	r2, r2, #22
 800d7d4:	4323      	orrs	r3, r4
 800d7d6:	68cc      	ldr	r4, [r1, #12]
 800d7d8:	0592      	lsls	r2, r2, #22
 800d7da:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800d7de:	4313      	orrs	r3, r2
 800d7e0:	688a      	ldr	r2, [r1, #8]
 800d7e2:	3a01      	subs	r2, #1
 800d7e4:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800d7e8:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800d7ea:	2000      	movs	r0, #0
 800d7ec:	bd10      	pop	{r4, pc}

0800d7ee <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800d7ee:	6943      	ldr	r3, [r0, #20]
 800d7f0:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800d7f4:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800d7f8:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800d7fc:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800d7fe:	2000      	movs	r0, #0
 800d800:	4770      	bx	lr

0800d802 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800d802:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800d804:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d808:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800d80a:	f001 fef9 	bl	800f600 <xTaskGetSchedulerState>
 800d80e:	2801      	cmp	r0, #1
 800d810:	d003      	beq.n	800d81a <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800d812:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800d816:	f000 bc45 	b.w	800e0a4 <xPortSysTickHandler>
}
 800d81a:	bd08      	pop	{r3, pc}

0800d81c <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d81c:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800d820:	b92b      	cbnz	r3, 800d82e <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800d822:	4b06      	ldr	r3, [pc, #24]	@ (800d83c <osKernelInitialize+0x20>)
 800d824:	6818      	ldr	r0, [r3, #0]
 800d826:	b928      	cbnz	r0, 800d834 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800d828:	2201      	movs	r2, #1
 800d82a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800d82c:	4770      	bx	lr
    stat = osErrorISR;
 800d82e:	f06f 0005 	mvn.w	r0, #5
 800d832:	4770      	bx	lr
    } else {
      stat = osError;
 800d834:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800d838:	4770      	bx	lr
 800d83a:	bf00      	nop
 800d83c:	2400d0e0 	.word	0x2400d0e0

0800d840 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800d840:	b510      	push	{r4, lr}
 800d842:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800d846:	b95c      	cbnz	r4, 800d860 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800d848:	4b08      	ldr	r3, [pc, #32]	@ (800d86c <osKernelStart+0x2c>)
 800d84a:	681a      	ldr	r2, [r3, #0]
 800d84c:	2a01      	cmp	r2, #1
 800d84e:	d10a      	bne.n	800d866 <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800d850:	4a07      	ldr	r2, [pc, #28]	@ (800d870 <osKernelStart+0x30>)
 800d852:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800d854:	2202      	movs	r2, #2
 800d856:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800d858:	f001 fd68 	bl	800f32c <vTaskStartScheduler>
      stat = osOK;
 800d85c:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800d85e:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800d860:	f06f 0005 	mvn.w	r0, #5
 800d864:	e7fb      	b.n	800d85e <osKernelStart+0x1e>
      stat = osError;
 800d866:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800d86a:	e7f8      	b.n	800d85e <osKernelStart+0x1e>
 800d86c:	2400d0e0 	.word	0x2400d0e0
 800d870:	e000ed00 	.word	0xe000ed00

0800d874 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d874:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d876:	4614      	mov	r4, r2
 800d878:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800d87a:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800d87c:	460b      	mov	r3, r1
  hTask = NULL;
 800d87e:	9205      	str	r2, [sp, #20]
 800d880:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800d884:	b9ca      	cbnz	r2, 800d8ba <osThreadNew+0x46>
 800d886:	b1c0      	cbz	r0, 800d8ba <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800d888:	b36c      	cbz	r4, 800d8e6 <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800d88a:	69a5      	ldr	r5, [r4, #24]
 800d88c:	2d00      	cmp	r5, #0
 800d88e:	bf08      	it	eq
 800d890:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800d892:	1e69      	subs	r1, r5, #1
 800d894:	46ac      	mov	ip, r5
 800d896:	2937      	cmp	r1, #55	@ 0x37
 800d898:	d82a      	bhi.n	800d8f0 <osThreadNew+0x7c>
 800d89a:	6861      	ldr	r1, [r4, #4]
 800d89c:	07c9      	lsls	r1, r1, #31
 800d89e:	d427      	bmi.n	800d8f0 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800d8a0:	6966      	ldr	r6, [r4, #20]
 800d8a2:	b16e      	cbz	r6, 800d8c0 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800d8a4:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800d8a6:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8a8:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800d8ac:	b157      	cbz	r7, 800d8c4 <osThreadNew+0x50>
 800d8ae:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800d8b2:	d902      	bls.n	800d8ba <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8b4:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800d8b6:	b104      	cbz	r4, 800d8ba <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800d8b8:	b9e6      	cbnz	r6, 800d8f4 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d8ba:	9805      	ldr	r0, [sp, #20]
}
 800d8bc:	b007      	add	sp, #28
 800d8be:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800d8c0:	2280      	movs	r2, #128	@ 0x80
 800d8c2:	e7f0      	b.n	800d8a6 <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800d8c4:	f1be 0f00 	cmp.w	lr, #0
 800d8c8:	d1f7      	bne.n	800d8ba <osThreadNew+0x46>
      if (mem == 0) {
 800d8ca:	6924      	ldr	r4, [r4, #16]
 800d8cc:	2c00      	cmp	r4, #0
 800d8ce:	d1f4      	bne.n	800d8ba <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d8d0:	ac05      	add	r4, sp, #20
 800d8d2:	b292      	uxth	r2, r2
 800d8d4:	e9cd c400 	strd	ip, r4, [sp]
 800d8d8:	f001 fbc6 	bl	800f068 <xTaskCreate>
 800d8dc:	2801      	cmp	r0, #1
            hTask = NULL;
 800d8de:	bf1c      	itt	ne
 800d8e0:	2300      	movne	r3, #0
 800d8e2:	9305      	strne	r3, [sp, #20]
 800d8e4:	e7e9      	b.n	800d8ba <osThreadNew+0x46>
    name = NULL;
 800d8e6:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800d8e8:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800d8ec:	2280      	movs	r2, #128	@ 0x80
 800d8ee:	e7ef      	b.n	800d8d0 <osThreadNew+0x5c>
        return (NULL);
 800d8f0:	4610      	mov	r0, r2
 800d8f2:	e7e3      	b.n	800d8bc <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800d8f4:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800d8f8:	9500      	str	r5, [sp, #0]
 800d8fa:	f001 fb7d 	bl	800eff8 <xTaskCreateStatic>
 800d8fe:	9005      	str	r0, [sp, #20]
 800d900:	e7db      	b.n	800d8ba <osThreadNew+0x46>

0800d902 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800d902:	b570      	push	{r4, r5, r6, lr}
 800d904:	4605      	mov	r5, r0
 800d906:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800d90a:	b116      	cbz	r6, 800d912 <osMutexNew+0x10>
  hMutex = NULL;
 800d90c:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800d90e:	4620      	mov	r0, r4
 800d910:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800d912:	b110      	cbz	r0, 800d91a <osMutexNew+0x18>
      type = attr->attr_bits;
 800d914:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800d916:	0733      	lsls	r3, r6, #28
 800d918:	d4f8      	bmi.n	800d90c <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800d91a:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800d91e:	b17d      	cbz	r5, 800d940 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800d920:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800d924:	b151      	cbz	r1, 800d93c <osMutexNew+0x3a>
 800d926:	2b4f      	cmp	r3, #79	@ 0x4f
 800d928:	d9f0      	bls.n	800d90c <osMutexNew+0xa>
          if (rmtx != 0U) {
 800d92a:	b1de      	cbz	r6, 800d964 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800d92c:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d92e:	f000 fec2 	bl	800e6b6 <xQueueCreateMutexStatic>
 800d932:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800d934:	2800      	cmp	r0, #0
 800d936:	d0e9      	beq.n	800d90c <osMutexNew+0xa>
          name = attr->name;
 800d938:	682d      	ldr	r5, [r5, #0]
 800d93a:	e00a      	b.n	800d952 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800d93c:	2b00      	cmp	r3, #0
 800d93e:	d1e5      	bne.n	800d90c <osMutexNew+0xa>
            if (rmtx != 0U) {
 800d940:	b196      	cbz	r6, 800d968 <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800d942:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800d944:	f000 feeb 	bl	800e71e <xQueueCreateMutex>
 800d948:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800d94a:	2800      	cmp	r0, #0
 800d94c:	d0de      	beq.n	800d90c <osMutexNew+0xa>
        if (attr != NULL) {
 800d94e:	2d00      	cmp	r5, #0
 800d950:	d1f2      	bne.n	800d938 <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800d952:	4629      	mov	r1, r5
 800d954:	4620      	mov	r0, r4
 800d956:	f001 f977 	bl	800ec48 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800d95a:	2e00      	cmp	r6, #0
 800d95c:	d0d7      	beq.n	800d90e <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800d95e:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800d962:	e7d4      	b.n	800d90e <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800d964:	2001      	movs	r0, #1
 800d966:	e7e2      	b.n	800d92e <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800d968:	2001      	movs	r0, #1
 800d96a:	e7eb      	b.n	800d944 <osMutexNew+0x42>

0800d96c <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800d96c:	b538      	push	{r3, r4, r5, lr}
 800d96e:	4603      	mov	r3, r0
 800d970:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d972:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800d976:	f003 0201 	and.w	r2, r3, #1
 800d97a:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800d97e:	b995      	cbnz	r5, 800d9a6 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800d980:	2b01      	cmp	r3, #1
 800d982:	d913      	bls.n	800d9ac <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800d984:	b162      	cbz	r2, 800d9a0 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800d986:	f001 f8f0 	bl	800eb6a <xQueueTakeMutexRecursive>
 800d98a:	2801      	cmp	r0, #1
 800d98c:	d101      	bne.n	800d992 <osMutexAcquire+0x26>
  stat = osOK;
 800d98e:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800d990:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800d992:	2c00      	cmp	r4, #0
 800d994:	bf14      	ite	ne
 800d996:	f06f 0001 	mvnne.w	r0, #1
 800d99a:	f06f 0002 	mvneq.w	r0, #2
 800d99e:	e7f7      	b.n	800d990 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800d9a0:	f001 f826 	bl	800e9f0 <xQueueSemaphoreTake>
 800d9a4:	e7f1      	b.n	800d98a <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800d9a6:	f06f 0005 	mvn.w	r0, #5
 800d9aa:	e7f1      	b.n	800d990 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800d9ac:	f06f 0003 	mvn.w	r0, #3
 800d9b0:	e7ee      	b.n	800d990 <osMutexAcquire+0x24>

0800d9b2 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d9b2:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800d9b4:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800d9b8:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800d9ba:	f002 0301 	and.w	r3, r2, #1
 800d9be:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800d9c2:	b979      	cbnz	r1, 800d9e4 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800d9c4:	2a01      	cmp	r2, #1
 800d9c6:	d910      	bls.n	800d9ea <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800d9c8:	b13b      	cbz	r3, 800d9da <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800d9ca:	f000 fe89 	bl	800e6e0 <xQueueGiveMutexRecursive>
 800d9ce:	2801      	cmp	r0, #1
  stat = osOK;
 800d9d0:	bf0c      	ite	eq
 800d9d2:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800d9d4:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800d9d8:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800d9da:	461a      	mov	r2, r3
 800d9dc:	4619      	mov	r1, r3
 800d9de:	f000 fdb8 	bl	800e552 <xQueueGenericSend>
 800d9e2:	e7f4      	b.n	800d9ce <osMutexRelease+0x1c>
    stat = osErrorISR;
 800d9e4:	f06f 0005 	mvn.w	r0, #5
 800d9e8:	e7f6      	b.n	800d9d8 <osMutexRelease+0x26>
    stat = osErrorParameter;
 800d9ea:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800d9ee:	e7f3      	b.n	800d9d8 <osMutexRelease+0x26>

0800d9f0 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800d9f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d9f2:	4604      	mov	r4, r0
 800d9f4:	460e      	mov	r6, r1
 800d9f6:	4615      	mov	r5, r2
 800d9f8:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800d9fc:	b942      	cbnz	r2, 800da10 <osSemaphoreNew+0x20>
 800d9fe:	b138      	cbz	r0, 800da10 <osSemaphoreNew+0x20>
 800da00:	4288      	cmp	r0, r1
 800da02:	d305      	bcc.n	800da10 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800da04:	b155      	cbz	r5, 800da1c <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800da06:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800da0a:	b12b      	cbz	r3, 800da18 <osSemaphoreNew+0x28>
 800da0c:	2f4f      	cmp	r7, #79	@ 0x4f
 800da0e:	d822      	bhi.n	800da56 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800da10:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800da12:	4620      	mov	r0, r4
 800da14:	b003      	add	sp, #12
 800da16:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800da18:	2f00      	cmp	r7, #0
 800da1a:	d1f9      	bne.n	800da10 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800da1c:	2c01      	cmp	r4, #1
 800da1e:	d00c      	beq.n	800da3a <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800da20:	4620      	mov	r0, r4
 800da22:	4631      	mov	r1, r6
 800da24:	f000 fd77 	bl	800e516 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800da28:	4604      	mov	r4, r0
 800da2a:	2800      	cmp	r0, #0
 800da2c:	d0f0      	beq.n	800da10 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800da2e:	b985      	cbnz	r5, 800da52 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800da30:	4629      	mov	r1, r5
 800da32:	4620      	mov	r0, r4
 800da34:	f001 f908 	bl	800ec48 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800da38:	e7eb      	b.n	800da12 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800da3a:	2203      	movs	r2, #3
 800da3c:	2100      	movs	r1, #0
 800da3e:	2001      	movs	r0, #1
 800da40:	f000 fd20 	bl	800e484 <xQueueGenericCreate>
 800da44:	e00e      	b.n	800da64 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800da46:	461a      	mov	r2, r3
 800da48:	f000 fd43 	bl	800e4d2 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800da4c:	4604      	mov	r4, r0
 800da4e:	2800      	cmp	r0, #0
 800da50:	d0de      	beq.n	800da10 <osSemaphoreNew+0x20>
          name = attr->name;
 800da52:	682d      	ldr	r5, [r5, #0]
 800da54:	e7ec      	b.n	800da30 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800da56:	2801      	cmp	r0, #1
 800da58:	d1f5      	bne.n	800da46 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800da5a:	2103      	movs	r1, #3
 800da5c:	9100      	str	r1, [sp, #0]
 800da5e:	4611      	mov	r1, r2
 800da60:	f000 fcc2 	bl	800e3e8 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800da64:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800da66:	2800      	cmp	r0, #0
 800da68:	d0d2      	beq.n	800da10 <osSemaphoreNew+0x20>
 800da6a:	2e00      	cmp	r6, #0
 800da6c:	d0df      	beq.n	800da2e <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800da6e:	2300      	movs	r3, #0
 800da70:	461a      	mov	r2, r3
 800da72:	4619      	mov	r1, r3
 800da74:	f000 fd6d 	bl	800e552 <xQueueGenericSend>
 800da78:	2801      	cmp	r0, #1
 800da7a:	d0d8      	beq.n	800da2e <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800da7c:	4620      	mov	r0, r4
 800da7e:	f001 f90d 	bl	800ec9c <vQueueDelete>
      if (hSemaphore != NULL) {
 800da82:	e7c5      	b.n	800da10 <osSemaphoreNew+0x20>

0800da84 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800da84:	b513      	push	{r0, r1, r4, lr}
 800da86:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800da88:	b328      	cbz	r0, 800dad6 <osSemaphoreAcquire+0x52>
 800da8a:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800da8e:	b1cb      	cbz	r3, 800dac4 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800da90:	bb09      	cbnz	r1, 800dad6 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800da92:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800da94:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800da96:	f001 f889 	bl	800ebac <xQueueReceiveFromISR>
 800da9a:	2801      	cmp	r0, #1
 800da9c:	d003      	beq.n	800daa6 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800da9e:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800daa2:	b002      	add	sp, #8
 800daa4:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800daa6:	9b01      	ldr	r3, [sp, #4]
 800daa8:	b90b      	cbnz	r3, 800daae <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800daaa:	2000      	movs	r0, #0
 800daac:	e7f9      	b.n	800daa2 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800daae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dab2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dab6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800daba:	f3bf 8f4f 	dsb	sy
 800dabe:	f3bf 8f6f 	isb	sy
 800dac2:	e7f2      	b.n	800daaa <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800dac4:	f000 ff94 	bl	800e9f0 <xQueueSemaphoreTake>
 800dac8:	2801      	cmp	r0, #1
 800daca:	d0ee      	beq.n	800daaa <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800dacc:	2c00      	cmp	r4, #0
 800dace:	d0e6      	beq.n	800da9e <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800dad0:	f06f 0001 	mvn.w	r0, #1
 800dad4:	e7e5      	b.n	800daa2 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800dad6:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800dada:	e7e2      	b.n	800daa2 <osSemaphoreAcquire+0x1e>

0800dadc <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800dadc:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800dade:	b318      	cbz	r0, 800db28 <osSemaphoreRelease+0x4c>
 800dae0:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800dae4:	b1cb      	cbz	r3, 800db1a <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800dae6:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800dae8:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800daea:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800daec:	f000 fe91 	bl	800e812 <xQueueGiveFromISR>
 800daf0:	2801      	cmp	r0, #1
 800daf2:	d004      	beq.n	800dafe <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800daf4:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800daf8:	b003      	add	sp, #12
 800dafa:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800dafe:	9b01      	ldr	r3, [sp, #4]
 800db00:	b14b      	cbz	r3, 800db16 <osSemaphoreRelease+0x3a>
 800db02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800db06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800db0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800db0e:	f3bf 8f4f 	dsb	sy
 800db12:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800db16:	2000      	movs	r0, #0
 800db18:	e7ee      	b.n	800daf8 <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800db1a:	461a      	mov	r2, r3
 800db1c:	4619      	mov	r1, r3
 800db1e:	f000 fd18 	bl	800e552 <xQueueGenericSend>
 800db22:	2801      	cmp	r0, #1
 800db24:	d0f7      	beq.n	800db16 <osSemaphoreRelease+0x3a>
 800db26:	e7e5      	b.n	800daf4 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800db28:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800db2c:	e7e4      	b.n	800daf8 <osSemaphoreRelease+0x1c>

0800db2e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800db2e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800db30:	4605      	mov	r5, r0
 800db32:	460e      	mov	r6, r1
 800db34:	4614      	mov	r4, r2
 800db36:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db3a:	b11f      	cbz	r7, 800db44 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800db3c:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800db3e:	4628      	mov	r0, r5
 800db40:	b003      	add	sp, #12
 800db42:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800db44:	2800      	cmp	r0, #0
 800db46:	d0f9      	beq.n	800db3c <osMessageQueueNew+0xe>
 800db48:	2900      	cmp	r1, #0
 800db4a:	d0f7      	beq.n	800db3c <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800db4c:	b1da      	cbz	r2, 800db86 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db4e:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800db52:	b183      	cbz	r3, 800db76 <osMessageQueueNew+0x48>
 800db54:	2a4f      	cmp	r2, #79	@ 0x4f
 800db56:	d9f1      	bls.n	800db3c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db58:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800db5a:	2a00      	cmp	r2, #0
 800db5c:	d0ee      	beq.n	800db3c <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800db5e:	434d      	muls	r5, r1
 800db60:	6966      	ldr	r6, [r4, #20]
 800db62:	42ae      	cmp	r6, r5
 800db64:	d3ea      	bcc.n	800db3c <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800db66:	9700      	str	r7, [sp, #0]
 800db68:	f000 fc3e 	bl	800e3e8 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800db6c:	4605      	mov	r5, r0
 800db6e:	2800      	cmp	r0, #0
 800db70:	d0e4      	beq.n	800db3c <osMessageQueueNew+0xe>
        name = attr->name;
 800db72:	6824      	ldr	r4, [r4, #0]
 800db74:	e011      	b.n	800db9a <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800db76:	2a00      	cmp	r2, #0
 800db78:	d1e0      	bne.n	800db3c <osMessageQueueNew+0xe>
 800db7a:	6923      	ldr	r3, [r4, #16]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d1dd      	bne.n	800db3c <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800db80:	6963      	ldr	r3, [r4, #20]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d1da      	bne.n	800db3c <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800db86:	4628      	mov	r0, r5
 800db88:	2200      	movs	r2, #0
 800db8a:	4631      	mov	r1, r6
 800db8c:	f000 fc7a 	bl	800e484 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800db90:	4605      	mov	r5, r0
 800db92:	2800      	cmp	r0, #0
 800db94:	d0d2      	beq.n	800db3c <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800db96:	2c00      	cmp	r4, #0
 800db98:	d1eb      	bne.n	800db72 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800db9a:	4621      	mov	r1, r4
 800db9c:	4628      	mov	r0, r5
 800db9e:	f001 f853 	bl	800ec48 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800dba2:	e7cc      	b.n	800db3e <osMessageQueueNew+0x10>

0800dba4 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800dba4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800dba6:	461c      	mov	r4, r3
 800dba8:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800dbac:	b1de      	cbz	r6, 800dbe6 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dbae:	b338      	cbz	r0, 800dc00 <osMessageQueuePut+0x5c>
 800dbb0:	b331      	cbz	r1, 800dc00 <osMessageQueuePut+0x5c>
 800dbb2:	bb2b      	cbnz	r3, 800dc00 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dbb4:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800dbb6:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800dbb8:	f000 fdce 	bl	800e758 <xQueueGenericSendFromISR>
 800dbbc:	2801      	cmp	r0, #1
 800dbbe:	d003      	beq.n	800dbc8 <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800dbc0:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800dbc4:	b002      	add	sp, #8
 800dbc6:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800dbc8:	9b01      	ldr	r3, [sp, #4]
 800dbca:	b90b      	cbnz	r3, 800dbd0 <osMessageQueuePut+0x2c>
  stat = osOK;
 800dbcc:	2000      	movs	r0, #0
 800dbce:	e7f9      	b.n	800dbc4 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800dbd0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dbd4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dbd8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dbdc:	f3bf 8f4f 	dsb	sy
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	e7f2      	b.n	800dbcc <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dbe6:	b158      	cbz	r0, 800dc00 <osMessageQueuePut+0x5c>
 800dbe8:	b151      	cbz	r1, 800dc00 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dbea:	4633      	mov	r3, r6
 800dbec:	4622      	mov	r2, r4
 800dbee:	f000 fcb0 	bl	800e552 <xQueueGenericSend>
 800dbf2:	2801      	cmp	r0, #1
 800dbf4:	d0ea      	beq.n	800dbcc <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800dbf6:	2c00      	cmp	r4, #0
 800dbf8:	d0e2      	beq.n	800dbc0 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800dbfa:	f06f 0001 	mvn.w	r0, #1
 800dbfe:	e7e1      	b.n	800dbc4 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800dc00:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800dc04:	e7de      	b.n	800dbc4 <osMessageQueuePut+0x20>

0800dc06 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800dc06:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800dc08:	461c      	mov	r4, r3
 800dc0a:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800dc0e:	b1db      	cbz	r3, 800dc48 <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800dc10:	b330      	cbz	r0, 800dc60 <osMessageQueueGet+0x5a>
 800dc12:	b329      	cbz	r1, 800dc60 <osMessageQueueGet+0x5a>
 800dc14:	bb24      	cbnz	r4, 800dc60 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dc16:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800dc18:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800dc1a:	f000 ffc7 	bl	800ebac <xQueueReceiveFromISR>
 800dc1e:	2801      	cmp	r0, #1
 800dc20:	d003      	beq.n	800dc2a <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800dc22:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800dc26:	b003      	add	sp, #12
 800dc28:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800dc2a:	9b01      	ldr	r3, [sp, #4]
 800dc2c:	b90b      	cbnz	r3, 800dc32 <osMessageQueueGet+0x2c>
  stat = osOK;
 800dc2e:	2000      	movs	r0, #0
 800dc30:	e7f9      	b.n	800dc26 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800dc32:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dc36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dc3a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dc3e:	f3bf 8f4f 	dsb	sy
 800dc42:	f3bf 8f6f 	isb	sy
 800dc46:	e7f2      	b.n	800dc2e <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800dc48:	b150      	cbz	r0, 800dc60 <osMessageQueueGet+0x5a>
 800dc4a:	b149      	cbz	r1, 800dc60 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800dc4c:	4622      	mov	r2, r4
 800dc4e:	f000 fe31 	bl	800e8b4 <xQueueReceive>
 800dc52:	2801      	cmp	r0, #1
 800dc54:	d0eb      	beq.n	800dc2e <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800dc56:	2c00      	cmp	r4, #0
 800dc58:	d0e3      	beq.n	800dc22 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800dc5a:	f06f 0001 	mvn.w	r0, #1
 800dc5e:	e7e2      	b.n	800dc26 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800dc60:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800dc64:	e7df      	b.n	800dc26 <osMessageQueueGet+0x20>
	...

0800dc68 <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800dc68:	4b03      	ldr	r3, [pc, #12]	@ (800dc78 <vApplicationGetIdleTaskMemory+0x10>)
 800dc6a:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800dc6c:	4b03      	ldr	r3, [pc, #12]	@ (800dc7c <vApplicationGetIdleTaskMemory+0x14>)
 800dc6e:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800dc70:	2380      	movs	r3, #128	@ 0x80
 800dc72:	6013      	str	r3, [r2, #0]
}
 800dc74:	4770      	bx	lr
 800dc76:	bf00      	nop
 800dc78:	2400d034 	.word	0x2400d034
 800dc7c:	2400ce34 	.word	0x2400ce34

0800dc80 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800dc80:	4b03      	ldr	r3, [pc, #12]	@ (800dc90 <vApplicationGetTimerTaskMemory+0x10>)
 800dc82:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800dc84:	4b03      	ldr	r3, [pc, #12]	@ (800dc94 <vApplicationGetTimerTaskMemory+0x14>)
 800dc86:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800dc88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800dc8c:	6013      	str	r3, [r2, #0]
}
 800dc8e:	4770      	bx	lr
 800dc90:	2400cd88 	.word	0x2400cd88
 800dc94:	2400c988 	.word	0x2400c988

0800dc98 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc98:	4b10      	ldr	r3, [pc, #64]	@ (800dcdc <prvInsertBlockIntoFreeList+0x44>)
{
 800dc9a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dc9c:	461a      	mov	r2, r3
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	4283      	cmp	r3, r0
 800dca2:	d3fb      	bcc.n	800dc9c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800dca4:	6854      	ldr	r4, [r2, #4]
 800dca6:	1911      	adds	r1, r2, r4
 800dca8:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800dcaa:	bf01      	itttt	eq
 800dcac:	6841      	ldreq	r1, [r0, #4]
 800dcae:	4610      	moveq	r0, r2
 800dcb0:	1909      	addeq	r1, r1, r4
 800dcb2:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800dcb4:	6844      	ldr	r4, [r0, #4]
 800dcb6:	1901      	adds	r1, r0, r4
 800dcb8:	428b      	cmp	r3, r1
 800dcba:	d10c      	bne.n	800dcd6 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800dcbc:	4908      	ldr	r1, [pc, #32]	@ (800dce0 <prvInsertBlockIntoFreeList+0x48>)
 800dcbe:	6809      	ldr	r1, [r1, #0]
 800dcc0:	428b      	cmp	r3, r1
 800dcc2:	d003      	beq.n	800dccc <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800dcc4:	6859      	ldr	r1, [r3, #4]
 800dcc6:	4421      	add	r1, r4
 800dcc8:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800dcca:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800dccc:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800dcce:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800dcd0:	bf18      	it	ne
 800dcd2:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800dcd4:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800dcd6:	4619      	mov	r1, r3
 800dcd8:	e7f8      	b.n	800dccc <prvInsertBlockIntoFreeList+0x34>
 800dcda:	bf00      	nop
 800dcdc:	2400d0fc 	.word	0x2400d0fc
 800dce0:	2400d0f8 	.word	0x2400d0f8

0800dce4 <pvPortMalloc>:
{
 800dce4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dce8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800dcea:	f001 f9eb 	bl	800f0c4 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800dcee:	4940      	ldr	r1, [pc, #256]	@ (800ddf0 <pvPortMalloc+0x10c>)
 800dcf0:	4d40      	ldr	r5, [pc, #256]	@ (800ddf4 <pvPortMalloc+0x110>)
 800dcf2:	680b      	ldr	r3, [r1, #0]
 800dcf4:	b9f3      	cbnz	r3, 800dd34 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800dcf6:	4a40      	ldr	r2, [pc, #256]	@ (800ddf8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800dcf8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800dcfa:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dcfc:	4e3f      	ldr	r6, [pc, #252]	@ (800ddfc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800dcfe:	bf1b      	ittet	ne
 800dd00:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd02:	4b3f      	ldrne	r3, [pc, #252]	@ (800de00 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800dd04:	4b3f      	ldreq	r3, [pc, #252]	@ (800de04 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd06:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800dd0a:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800dd0c:	bf18      	it	ne
 800dd0e:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800dd10:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800dd12:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800dd14:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800dd16:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800dd1a:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800dd1e:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800dd20:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800dd22:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd26:	4b38      	ldr	r3, [pc, #224]	@ (800de08 <pvPortMalloc+0x124>)
 800dd28:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800dd2a:	4b38      	ldr	r3, [pc, #224]	@ (800de0c <pvPortMalloc+0x128>)
 800dd2c:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800dd2e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800dd32:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800dd34:	682e      	ldr	r6, [r5, #0]
 800dd36:	4226      	tst	r6, r4
 800dd38:	d155      	bne.n	800dde6 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800dd3a:	2c00      	cmp	r4, #0
 800dd3c:	d046      	beq.n	800ddcc <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800dd3e:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800dd42:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800dd44:	bf1c      	itt	ne
 800dd46:	f023 0307 	bicne.w	r3, r3, #7
 800dd4a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d04a      	beq.n	800dde6 <pvPortMalloc+0x102>
 800dd50:	4f2e      	ldr	r7, [pc, #184]	@ (800de0c <pvPortMalloc+0x128>)
 800dd52:	683c      	ldr	r4, [r7, #0]
 800dd54:	429c      	cmp	r4, r3
 800dd56:	d346      	bcc.n	800dde6 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800dd58:	4a28      	ldr	r2, [pc, #160]	@ (800ddfc <pvPortMalloc+0x118>)
 800dd5a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dd5c:	6868      	ldr	r0, [r5, #4]
 800dd5e:	4298      	cmp	r0, r3
 800dd60:	d204      	bcs.n	800dd6c <pvPortMalloc+0x88>
 800dd62:	f8d5 c000 	ldr.w	ip, [r5]
 800dd66:	f1bc 0f00 	cmp.w	ip, #0
 800dd6a:	d115      	bne.n	800dd98 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800dd6c:	6809      	ldr	r1, [r1, #0]
 800dd6e:	42a9      	cmp	r1, r5
 800dd70:	d039      	beq.n	800dde6 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd72:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dd74:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dd78:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dd7a:	1ac2      	subs	r2, r0, r3
 800dd7c:	2a10      	cmp	r2, #16
 800dd7e:	d912      	bls.n	800dda6 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800dd80:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800dd82:	0741      	lsls	r1, r0, #29
 800dd84:	d00b      	beq.n	800dd9e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800dd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dd8a:	f383 8811 	msr	BASEPRI, r3
 800dd8e:	f3bf 8f6f 	isb	sy
 800dd92:	f3bf 8f4f 	dsb	sy
 800dd96:	e7fe      	b.n	800dd96 <pvPortMalloc+0xb2>
 800dd98:	462a      	mov	r2, r5
 800dd9a:	4665      	mov	r5, ip
 800dd9c:	e7de      	b.n	800dd5c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800dd9e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800dda0:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800dda2:	f7ff ff79 	bl	800dc98 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800dda6:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800dda8:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddaa:	4917      	ldr	r1, [pc, #92]	@ (800de08 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ddac:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ddae:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddb0:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800ddb2:	4a17      	ldr	r2, [pc, #92]	@ (800de10 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ddb4:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800ddb6:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800ddb8:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ddba:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800ddbc:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800ddc0:	bf38      	it	cc
 800ddc2:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ddc4:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800ddc8:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800ddca:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800ddcc:	f001 fa1e 	bl	800f20c <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800ddd0:	0763      	lsls	r3, r4, #29
 800ddd2:	d00a      	beq.n	800ddea <pvPortMalloc+0x106>
 800ddd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ddd8:	f383 8811 	msr	BASEPRI, r3
 800dddc:	f3bf 8f6f 	isb	sy
 800dde0:	f3bf 8f4f 	dsb	sy
 800dde4:	e7fe      	b.n	800dde4 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800dde6:	2400      	movs	r4, #0
 800dde8:	e7f0      	b.n	800ddcc <pvPortMalloc+0xe8>
}
 800ddea:	4620      	mov	r0, r4
 800ddec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ddf0:	2400d0f8 	.word	0x2400d0f8
 800ddf4:	2400d0e4 	.word	0x2400d0e4
 800ddf8:	2400d104 	.word	0x2400d104
 800ddfc:	2400d0fc 	.word	0x2400d0fc
 800de00:	240257a4 	.word	0x240257a4
 800de04:	000186a0 	.word	0x000186a0
 800de08:	2400d0f0 	.word	0x2400d0f0
 800de0c:	2400d0f4 	.word	0x2400d0f4
 800de10:	2400d0ec 	.word	0x2400d0ec

0800de14 <vPortFree>:
{
 800de14:	b510      	push	{r4, lr}
	if( pv != NULL )
 800de16:	4604      	mov	r4, r0
 800de18:	b390      	cbz	r0, 800de80 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800de1a:	4a1a      	ldr	r2, [pc, #104]	@ (800de84 <vPortFree+0x70>)
 800de1c:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800de20:	6812      	ldr	r2, [r2, #0]
 800de22:	4213      	tst	r3, r2
 800de24:	d108      	bne.n	800de38 <vPortFree+0x24>
 800de26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de2a:	f383 8811 	msr	BASEPRI, r3
 800de2e:	f3bf 8f6f 	isb	sy
 800de32:	f3bf 8f4f 	dsb	sy
 800de36:	e7fe      	b.n	800de36 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800de38:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800de3c:	b141      	cbz	r1, 800de50 <vPortFree+0x3c>
 800de3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de42:	f383 8811 	msr	BASEPRI, r3
 800de46:	f3bf 8f6f 	isb	sy
 800de4a:	f3bf 8f4f 	dsb	sy
 800de4e:	e7fe      	b.n	800de4e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800de50:	ea23 0302 	bic.w	r3, r3, r2
 800de54:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800de58:	f001 f934 	bl	800f0c4 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de5c:	4a0a      	ldr	r2, [pc, #40]	@ (800de88 <vPortFree+0x74>)
 800de5e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de62:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800de66:	6811      	ldr	r1, [r2, #0]
 800de68:	440b      	add	r3, r1
 800de6a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800de6c:	f7ff ff14 	bl	800dc98 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800de70:	4a06      	ldr	r2, [pc, #24]	@ (800de8c <vPortFree+0x78>)
 800de72:	6813      	ldr	r3, [r2, #0]
 800de74:	3301      	adds	r3, #1
}
 800de76:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800de7a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800de7c:	f001 b9c6 	b.w	800f20c <xTaskResumeAll>
}
 800de80:	bd10      	pop	{r4, pc}
 800de82:	bf00      	nop
 800de84:	2400d0e4 	.word	0x2400d0e4
 800de88:	2400d0f4 	.word	0x2400d0f4
 800de8c:	2400d0e8 	.word	0x2400d0e8

0800de90 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de90:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800de94:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de98:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de9a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800de9c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800dea0:	2300      	movs	r3, #0
 800dea2:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800dea4:	4770      	bx	lr

0800dea6 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800dea6:	2300      	movs	r3, #0
 800dea8:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800deaa:	4770      	bx	lr

0800deac <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800deac:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800deae:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800deb0:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800deb2:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800deb4:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800deb6:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800deb8:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800deba:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800debc:	3301      	adds	r3, #1
 800debe:	6003      	str	r3, [r0, #0]
}
 800dec0:	4770      	bx	lr

0800dec2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800dec2:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800dec4:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800dec6:	1c63      	adds	r3, r4, #1
 800dec8:	d10a      	bne.n	800dee0 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800deca:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800decc:	685a      	ldr	r2, [r3, #4]
 800dece:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ded0:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ded2:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ded4:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ded6:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ded8:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800deda:	3301      	adds	r3, #1
 800dedc:	6003      	str	r3, [r0, #0]
}
 800dede:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800dee0:	f100 0208 	add.w	r2, r0, #8
 800dee4:	4613      	mov	r3, r2
 800dee6:	6852      	ldr	r2, [r2, #4]
 800dee8:	6815      	ldr	r5, [r2, #0]
 800deea:	42a5      	cmp	r5, r4
 800deec:	d9fa      	bls.n	800dee4 <vListInsert+0x22>
 800deee:	e7ed      	b.n	800decc <vListInsert+0xa>

0800def0 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800def0:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800def2:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800def6:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800def8:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800defa:	6859      	ldr	r1, [r3, #4]
 800defc:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800defe:	bf08      	it	eq
 800df00:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800df02:	2200      	movs	r2, #0
 800df04:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800df06:	681a      	ldr	r2, [r3, #0]
 800df08:	3a01      	subs	r2, #1
 800df0a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800df0c:	6818      	ldr	r0, [r3, #0]
}
 800df0e:	4770      	bx	lr

0800df10 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800df10:	4808      	ldr	r0, [pc, #32]	@ (800df34 <prvPortStartFirstTask+0x24>)
 800df12:	6800      	ldr	r0, [r0, #0]
 800df14:	6800      	ldr	r0, [r0, #0]
 800df16:	f380 8808 	msr	MSP, r0
 800df1a:	f04f 0000 	mov.w	r0, #0
 800df1e:	f380 8814 	msr	CONTROL, r0
 800df22:	b662      	cpsie	i
 800df24:	b661      	cpsie	f
 800df26:	f3bf 8f4f 	dsb	sy
 800df2a:	f3bf 8f6f 	isb	sy
 800df2e:	df00      	svc	0
 800df30:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800df32:	0000      	.short	0x0000
 800df34:	e000ed08 	.word	0xe000ed08

0800df38 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800df38:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800df48 <vPortEnableVFP+0x10>
 800df3c:	6801      	ldr	r1, [r0, #0]
 800df3e:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800df42:	6001      	str	r1, [r0, #0]
 800df44:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800df46:	0000      	.short	0x0000
 800df48:	e000ed88 	.word	0xe000ed88

0800df4c <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800df4c:	2300      	movs	r3, #0
{
 800df4e:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800df50:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800df52:	4b0d      	ldr	r3, [pc, #52]	@ (800df88 <prvTaskExitError+0x3c>)
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	3301      	adds	r3, #1
 800df58:	d008      	beq.n	800df6c <prvTaskExitError+0x20>
 800df5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df5e:	f383 8811 	msr	BASEPRI, r3
 800df62:	f3bf 8f6f 	isb	sy
 800df66:	f3bf 8f4f 	dsb	sy
 800df6a:	e7fe      	b.n	800df6a <prvTaskExitError+0x1e>
 800df6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800df70:	f383 8811 	msr	BASEPRI, r3
 800df74:	f3bf 8f6f 	isb	sy
 800df78:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800df7c:	9b01      	ldr	r3, [sp, #4]
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d0fc      	beq.n	800df7c <prvTaskExitError+0x30>
}
 800df82:	b002      	add	sp, #8
 800df84:	4770      	bx	lr
 800df86:	bf00      	nop
 800df88:	240000a8 	.word	0x240000a8

0800df8c <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df8c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df90:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800df94:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800df98:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800df9a:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800df9c:	4b03      	ldr	r3, [pc, #12]	@ (800dfac <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800df9e:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800dfa0:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800dfa2:	f06f 0302 	mvn.w	r3, #2
 800dfa6:	6203      	str	r3, [r0, #32]
}
 800dfa8:	4770      	bx	lr
 800dfaa:	bf00      	nop
 800dfac:	0800df4d 	.word	0x0800df4d

0800dfb0 <SVC_Handler>:
	__asm volatile (
 800dfb0:	4b07      	ldr	r3, [pc, #28]	@ (800dfd0 <pxCurrentTCBConst2>)
 800dfb2:	6819      	ldr	r1, [r3, #0]
 800dfb4:	6808      	ldr	r0, [r1, #0]
 800dfb6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dfba:	f380 8809 	msr	PSP, r0
 800dfbe:	f3bf 8f6f 	isb	sy
 800dfc2:	f04f 0000 	mov.w	r0, #0
 800dfc6:	f380 8811 	msr	BASEPRI, r0
 800dfca:	4770      	bx	lr
 800dfcc:	f3af 8000 	nop.w

0800dfd0 <pxCurrentTCBConst2>:
 800dfd0:	24025ce4 	.word	0x24025ce4

0800dfd4 <vPortEnterCritical>:
 800dfd4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfd8:	f383 8811 	msr	BASEPRI, r3
 800dfdc:	f3bf 8f6f 	isb	sy
 800dfe0:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800dfe4:	4a0a      	ldr	r2, [pc, #40]	@ (800e010 <vPortEnterCritical+0x3c>)
 800dfe6:	6813      	ldr	r3, [r2, #0]
 800dfe8:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800dfea:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800dfec:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800dfee:	d10e      	bne.n	800e00e <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dff0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dff4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800dff8:	b2db      	uxtb	r3, r3
 800dffa:	b143      	cbz	r3, 800e00e <vPortEnterCritical+0x3a>
 800dffc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e000:	f383 8811 	msr	BASEPRI, r3
 800e004:	f3bf 8f6f 	isb	sy
 800e008:	f3bf 8f4f 	dsb	sy
 800e00c:	e7fe      	b.n	800e00c <vPortEnterCritical+0x38>
}
 800e00e:	4770      	bx	lr
 800e010:	240000a8 	.word	0x240000a8

0800e014 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800e014:	4a08      	ldr	r2, [pc, #32]	@ (800e038 <vPortExitCritical+0x24>)
 800e016:	6813      	ldr	r3, [r2, #0]
 800e018:	b943      	cbnz	r3, 800e02c <vPortExitCritical+0x18>
 800e01a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e01e:	f383 8811 	msr	BASEPRI, r3
 800e022:	f3bf 8f6f 	isb	sy
 800e026:	f3bf 8f4f 	dsb	sy
 800e02a:	e7fe      	b.n	800e02a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800e02c:	3b01      	subs	r3, #1
 800e02e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800e030:	b90b      	cbnz	r3, 800e036 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800e032:	f383 8811 	msr	BASEPRI, r3
}
 800e036:	4770      	bx	lr
 800e038:	240000a8 	.word	0x240000a8
 800e03c:	00000000 	.word	0x00000000

0800e040 <PendSV_Handler>:
	__asm volatile
 800e040:	f3ef 8009 	mrs	r0, PSP
 800e044:	f3bf 8f6f 	isb	sy
 800e048:	4b15      	ldr	r3, [pc, #84]	@ (800e0a0 <pxCurrentTCBConst>)
 800e04a:	681a      	ldr	r2, [r3, #0]
 800e04c:	f01e 0f10 	tst.w	lr, #16
 800e050:	bf08      	it	eq
 800e052:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800e056:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e05a:	6010      	str	r0, [r2, #0]
 800e05c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800e060:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800e064:	f380 8811 	msr	BASEPRI, r0
 800e068:	f3bf 8f4f 	dsb	sy
 800e06c:	f3bf 8f6f 	isb	sy
 800e070:	f001 f9b0 	bl	800f3d4 <vTaskSwitchContext>
 800e074:	f04f 0000 	mov.w	r0, #0
 800e078:	f380 8811 	msr	BASEPRI, r0
 800e07c:	bc09      	pop	{r0, r3}
 800e07e:	6819      	ldr	r1, [r3, #0]
 800e080:	6808      	ldr	r0, [r1, #0]
 800e082:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e086:	f01e 0f10 	tst.w	lr, #16
 800e08a:	bf08      	it	eq
 800e08c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800e090:	f380 8809 	msr	PSP, r0
 800e094:	f3bf 8f6f 	isb	sy
 800e098:	4770      	bx	lr
 800e09a:	bf00      	nop
 800e09c:	f3af 8000 	nop.w

0800e0a0 <pxCurrentTCBConst>:
 800e0a0:	24025ce4 	.word	0x24025ce4

0800e0a4 <xPortSysTickHandler>:
{
 800e0a4:	b508      	push	{r3, lr}
	__asm volatile
 800e0a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0aa:	f383 8811 	msr	BASEPRI, r3
 800e0ae:	f3bf 8f6f 	isb	sy
 800e0b2:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800e0b6:	f001 f813 	bl	800f0e0 <xTaskIncrementTick>
 800e0ba:	b128      	cbz	r0, 800e0c8 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800e0bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e0c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e0c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800e0c8:	2300      	movs	r3, #0
 800e0ca:	f383 8811 	msr	BASEPRI, r3
}
 800e0ce:	bd08      	pop	{r3, pc}

0800e0d0 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0d0:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800e0d4:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0d6:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800e0da:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800e0dc:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800e0de:	4b04      	ldr	r3, [pc, #16]	@ (800e0f0 <vPortSetupTimerInterrupt+0x20>)
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	fbb3 f3f1 	udiv	r3, r3, r1
 800e0e6:	3b01      	subs	r3, #1
 800e0e8:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800e0ea:	2307      	movs	r3, #7
 800e0ec:	6113      	str	r3, [r2, #16]
}
 800e0ee:	4770      	bx	lr
 800e0f0:	2400009c 	.word	0x2400009c

0800e0f4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800e0f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800e0fa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800e0fe:	4a38      	ldr	r2, [pc, #224]	@ (800e1e0 <xPortStartScheduler+0xec>)
 800e100:	4291      	cmp	r1, r2
 800e102:	d108      	bne.n	800e116 <xPortStartScheduler+0x22>
	__asm volatile
 800e104:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e108:	f383 8811 	msr	BASEPRI, r3
 800e10c:	f3bf 8f6f 	isb	sy
 800e110:	f3bf 8f4f 	dsb	sy
 800e114:	e7fe      	b.n	800e114 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800e116:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800e11a:	4b32      	ldr	r3, [pc, #200]	@ (800e1e4 <xPortStartScheduler+0xf0>)
 800e11c:	429a      	cmp	r2, r3
 800e11e:	d108      	bne.n	800e132 <xPortStartScheduler+0x3e>
 800e120:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e124:	f383 8811 	msr	BASEPRI, r3
 800e128:	f3bf 8f6f 	isb	sy
 800e12c:	f3bf 8f4f 	dsb	sy
 800e130:	e7fe      	b.n	800e130 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800e132:	4b2d      	ldr	r3, [pc, #180]	@ (800e1e8 <xPortStartScheduler+0xf4>)
 800e134:	781a      	ldrb	r2, [r3, #0]
 800e136:	b2d2      	uxtb	r2, r2
 800e138:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800e13a:	22ff      	movs	r2, #255	@ 0xff
 800e13c:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e13e:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e140:	4a2a      	ldr	r2, [pc, #168]	@ (800e1ec <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800e142:	b2db      	uxtb	r3, r3
 800e144:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800e148:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e14c:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800e150:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800e152:	2307      	movs	r3, #7
 800e154:	4a26      	ldr	r2, [pc, #152]	@ (800e1f0 <xPortStartScheduler+0xfc>)
 800e156:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e158:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800e15c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800e15e:	0609      	lsls	r1, r1, #24
 800e160:	d40a      	bmi.n	800e178 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800e162:	2b03      	cmp	r3, #3
 800e164:	d011      	beq.n	800e18a <xPortStartScheduler+0x96>
 800e166:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e16a:	f383 8811 	msr	BASEPRI, r3
 800e16e:	f3bf 8f6f 	isb	sy
 800e172:	f3bf 8f4f 	dsb	sy
 800e176:	e7fe      	b.n	800e176 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800e178:	3b01      	subs	r3, #1
 800e17a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800e17c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800e180:	005b      	lsls	r3, r3, #1
 800e182:	b2db      	uxtb	r3, r3
 800e184:	f88d 3003 	strb.w	r3, [sp, #3]
 800e188:	e7e6      	b.n	800e158 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e18a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e18e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800e192:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800e194:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800e196:	9b01      	ldr	r3, [sp, #4]
 800e198:	4a13      	ldr	r2, [pc, #76]	@ (800e1e8 <xPortStartScheduler+0xf4>)
 800e19a:	b2db      	uxtb	r3, r3
 800e19c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800e19e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e1a2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800e1a6:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800e1aa:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800e1ae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800e1b2:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800e1b6:	f7ff ff8b 	bl	800e0d0 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800e1ba:	4b0e      	ldr	r3, [pc, #56]	@ (800e1f4 <xPortStartScheduler+0x100>)
 800e1bc:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800e1be:	f7ff febb 	bl	800df38 <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800e1c2:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800e1c6:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800e1ca:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800e1ce:	f7ff fe9f 	bl	800df10 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800e1d2:	f001 f8ff 	bl	800f3d4 <vTaskSwitchContext>
}
 800e1d6:	4628      	mov	r0, r5
	prvTaskExitError();
 800e1d8:	f7ff feb8 	bl	800df4c <prvTaskExitError>
}
 800e1dc:	b003      	add	sp, #12
 800e1de:	bd30      	pop	{r4, r5, pc}
 800e1e0:	410fc271 	.word	0x410fc271
 800e1e4:	410fc270 	.word	0x410fc270
 800e1e8:	e000e400 	.word	0xe000e400
 800e1ec:	240257a8 	.word	0x240257a8
 800e1f0:	240257a4 	.word	0x240257a4
 800e1f4:	240000a8 	.word	0x240000a8

0800e1f8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800e1f8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800e1fc:	2b0f      	cmp	r3, #15
 800e1fe:	d90e      	bls.n	800e21e <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800e200:	4a11      	ldr	r2, [pc, #68]	@ (800e248 <vPortValidateInterruptPriority+0x50>)
 800e202:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800e204:	4a11      	ldr	r2, [pc, #68]	@ (800e24c <vPortValidateInterruptPriority+0x54>)
 800e206:	7812      	ldrb	r2, [r2, #0]
 800e208:	429a      	cmp	r2, r3
 800e20a:	d908      	bls.n	800e21e <vPortValidateInterruptPriority+0x26>
 800e20c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e210:	f383 8811 	msr	BASEPRI, r3
 800e214:	f3bf 8f6f 	isb	sy
 800e218:	f3bf 8f4f 	dsb	sy
 800e21c:	e7fe      	b.n	800e21c <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800e21e:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e222:	4a0b      	ldr	r2, [pc, #44]	@ (800e250 <vPortValidateInterruptPriority+0x58>)
 800e224:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800e228:	6812      	ldr	r2, [r2, #0]
 800e22a:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800e22e:	4293      	cmp	r3, r2
 800e230:	d908      	bls.n	800e244 <vPortValidateInterruptPriority+0x4c>
 800e232:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e236:	f383 8811 	msr	BASEPRI, r3
 800e23a:	f3bf 8f6f 	isb	sy
 800e23e:	f3bf 8f4f 	dsb	sy
 800e242:	e7fe      	b.n	800e242 <vPortValidateInterruptPriority+0x4a>
	}
 800e244:	4770      	bx	lr
 800e246:	bf00      	nop
 800e248:	e000e3f0 	.word	0xe000e3f0
 800e24c:	240257a8 	.word	0x240257a8
 800e250:	240257a4 	.word	0x240257a4

0800e254 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800e254:	b510      	push	{r4, lr}
 800e256:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e258:	f7ff febc 	bl	800dfd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800e25c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e25e:	f7ff fed9 	bl	800e014 <vPortExitCritical>

	return xReturn;
}
 800e262:	fab4 f084 	clz	r0, r4
 800e266:	0940      	lsrs	r0, r0, #5
 800e268:	bd10      	pop	{r4, pc}

0800e26a <prvCopyDataToQueue>:
{
 800e26a:	b570      	push	{r4, r5, r6, lr}
 800e26c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e26e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800e270:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e272:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800e274:	b942      	cbnz	r2, 800e288 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800e276:	6806      	ldr	r6, [r0, #0]
 800e278:	b99e      	cbnz	r6, 800e2a2 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800e27a:	6880      	ldr	r0, [r0, #8]
 800e27c:	f001 fa0e 	bl	800f69c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800e280:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e282:	3501      	adds	r5, #1
 800e284:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800e286:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800e288:	b96e      	cbnz	r6, 800e2a6 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e28a:	6840      	ldr	r0, [r0, #4]
 800e28c:	f018 fe53 	bl	8026f36 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e290:	6863      	ldr	r3, [r4, #4]
 800e292:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e294:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e296:	68a2      	ldr	r2, [r4, #8]
 800e298:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e29a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800e29c:	bf24      	itt	cs
 800e29e:	6823      	ldrcs	r3, [r4, #0]
 800e2a0:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800e2a2:	2000      	movs	r0, #0
 800e2a4:	e7ed      	b.n	800e282 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800e2a6:	68c0      	ldr	r0, [r0, #12]
 800e2a8:	f018 fe45 	bl	8026f36 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2ac:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800e2ae:	68e3      	ldr	r3, [r4, #12]
 800e2b0:	4251      	negs	r1, r2
 800e2b2:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800e2b4:	6822      	ldr	r2, [r4, #0]
 800e2b6:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800e2b8:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800e2ba:	bf3e      	ittt	cc
 800e2bc:	68a3      	ldrcc	r3, [r4, #8]
 800e2be:	185b      	addcc	r3, r3, r1
 800e2c0:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800e2c2:	2e02      	cmp	r6, #2
 800e2c4:	d1ed      	bne.n	800e2a2 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e2c6:	b10d      	cbz	r5, 800e2cc <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800e2c8:	3d01      	subs	r5, #1
 800e2ca:	e7ea      	b.n	800e2a2 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800e2cc:	4628      	mov	r0, r5
 800e2ce:	e7d8      	b.n	800e282 <prvCopyDataToQueue+0x18>

0800e2d0 <prvCopyDataFromQueue>:
{
 800e2d0:	4603      	mov	r3, r0
 800e2d2:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800e2d6:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800e2d8:	b162      	cbz	r2, 800e2f4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2da:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2dc:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2de:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800e2e0:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800e2e2:	60dc      	str	r4, [r3, #12]
}
 800e2e4:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800e2e8:	bf24      	itt	cs
 800e2ea:	6819      	ldrcs	r1, [r3, #0]
 800e2ec:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800e2ee:	68d9      	ldr	r1, [r3, #12]
 800e2f0:	f018 be21 	b.w	8026f36 <memcpy>
}
 800e2f4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e2f8:	4770      	bx	lr

0800e2fa <prvUnlockQueue>:
{
 800e2fa:	b570      	push	{r4, r5, r6, lr}
 800e2fc:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800e2fe:	f7ff fe69 	bl	800dfd4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800e302:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e306:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800e30a:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800e30c:	2d00      	cmp	r5, #0
 800e30e:	dc14      	bgt.n	800e33a <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800e310:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e312:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800e316:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800e31a:	f7ff fe7b 	bl	800e014 <vPortExitCritical>
	taskENTER_CRITICAL();
 800e31e:	f7ff fe59 	bl	800dfd4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800e322:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800e326:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800e328:	2d00      	cmp	r5, #0
 800e32a:	dc12      	bgt.n	800e352 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800e32c:	23ff      	movs	r3, #255	@ 0xff
 800e32e:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800e332:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800e336:	f7ff be6d 	b.w	800e014 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e33a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d0e7      	beq.n	800e310 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e340:	4630      	mov	r0, r6
 800e342:	f001 f8c7 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e346:	b108      	cbz	r0, 800e34c <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800e348:	f001 f94e 	bl	800f5e8 <vTaskMissedYield>
			--cTxLock;
 800e34c:	3d01      	subs	r5, #1
 800e34e:	b26d      	sxtb	r5, r5
 800e350:	e7dc      	b.n	800e30c <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e352:	6923      	ldr	r3, [r4, #16]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d0e9      	beq.n	800e32c <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e358:	4630      	mov	r0, r6
 800e35a:	f001 f8bb 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e35e:	b108      	cbz	r0, 800e364 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800e360:	f001 f942 	bl	800f5e8 <vTaskMissedYield>
				--cRxLock;
 800e364:	3d01      	subs	r5, #1
 800e366:	b26d      	sxtb	r5, r5
 800e368:	e7de      	b.n	800e328 <prvUnlockQueue+0x2e>

0800e36a <xQueueGenericReset>:
{
 800e36a:	b538      	push	{r3, r4, r5, lr}
 800e36c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e36e:	4604      	mov	r4, r0
 800e370:	b940      	cbnz	r0, 800e384 <xQueueGenericReset+0x1a>
 800e372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e376:	f383 8811 	msr	BASEPRI, r3
 800e37a:	f3bf 8f6f 	isb	sy
 800e37e:	f3bf 8f4f 	dsb	sy
 800e382:	e7fe      	b.n	800e382 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800e384:	f7ff fe26 	bl	800dfd4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e388:	6822      	ldr	r2, [r4, #0]
 800e38a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800e38e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e390:	434b      	muls	r3, r1
 800e392:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e394:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e396:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e398:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e39a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800e39c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e39e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800e3a0:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800e3a2:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800e3a6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800e3aa:	b9a5      	cbnz	r5, 800e3d6 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e3ac:	6923      	ldr	r3, [r4, #16]
 800e3ae:	b173      	cbz	r3, 800e3ce <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e3b0:	f104 0010 	add.w	r0, r4, #16
 800e3b4:	f001 f88e 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e3b8:	b148      	cbz	r0, 800e3ce <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800e3ba:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e3be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e3c2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e3c6:	f3bf 8f4f 	dsb	sy
 800e3ca:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800e3ce:	f7ff fe21 	bl	800e014 <vPortExitCritical>
}
 800e3d2:	2001      	movs	r0, #1
 800e3d4:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800e3d6:	f104 0010 	add.w	r0, r4, #16
 800e3da:	f7ff fd59 	bl	800de90 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800e3de:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e3e2:	f7ff fd55 	bl	800de90 <vListInitialise>
 800e3e6:	e7f2      	b.n	800e3ce <xQueueGenericReset+0x64>

0800e3e8 <xQueueGenericCreateStatic>:
	{
 800e3e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e3ea:	460d      	mov	r5, r1
 800e3ec:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e3ee:	b940      	cbnz	r0, 800e402 <xQueueGenericCreateStatic+0x1a>
 800e3f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3f4:	f383 8811 	msr	BASEPRI, r3
 800e3f8:	f3bf 8f6f 	isb	sy
 800e3fc:	f3bf 8f4f 	dsb	sy
 800e400:	e7fe      	b.n	800e400 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800e402:	b943      	cbnz	r3, 800e416 <xQueueGenericCreateStatic+0x2e>
 800e404:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e408:	f383 8811 	msr	BASEPRI, r3
 800e40c:	f3bf 8f6f 	isb	sy
 800e410:	f3bf 8f4f 	dsb	sy
 800e414:	e7fe      	b.n	800e414 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800e416:	b14a      	cbz	r2, 800e42c <xQueueGenericCreateStatic+0x44>
 800e418:	b991      	cbnz	r1, 800e440 <xQueueGenericCreateStatic+0x58>
 800e41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	e7fe      	b.n	800e42a <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800e42c:	b141      	cbz	r1, 800e440 <xQueueGenericCreateStatic+0x58>
 800e42e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e432:	f383 8811 	msr	BASEPRI, r3
 800e436:	f3bf 8f6f 	isb	sy
 800e43a:	f3bf 8f4f 	dsb	sy
 800e43e:	e7fe      	b.n	800e43e <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800e440:	2350      	movs	r3, #80	@ 0x50
 800e442:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800e444:	9b01      	ldr	r3, [sp, #4]
 800e446:	2b50      	cmp	r3, #80	@ 0x50
 800e448:	d008      	beq.n	800e45c <xQueueGenericCreateStatic+0x74>
 800e44a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e44e:	f383 8811 	msr	BASEPRI, r3
 800e452:	f3bf 8f6f 	isb	sy
 800e456:	f3bf 8f4f 	dsb	sy
 800e45a:	e7fe      	b.n	800e45a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e45c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e45e:	2d00      	cmp	r5, #0
 800e460:	bf08      	it	eq
 800e462:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800e464:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800e466:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e46a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800e46c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e470:	4620      	mov	r0, r4
 800e472:	f7ff ff7a 	bl	800e36a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e476:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800e47a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800e47c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800e480:	b003      	add	sp, #12
 800e482:	bd30      	pop	{r4, r5, pc}

0800e484 <xQueueGenericCreate>:
	{
 800e484:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e486:	460d      	mov	r5, r1
 800e488:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800e48a:	4606      	mov	r6, r0
 800e48c:	b940      	cbnz	r0, 800e4a0 <xQueueGenericCreate+0x1c>
 800e48e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e492:	f383 8811 	msr	BASEPRI, r3
 800e496:	f3bf 8f6f 	isb	sy
 800e49a:	f3bf 8f4f 	dsb	sy
 800e49e:	e7fe      	b.n	800e49e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e4a0:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e4a2:	3050      	adds	r0, #80	@ 0x50
 800e4a4:	f7ff fc1e 	bl	800dce4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800e4a8:	4604      	mov	r4, r0
 800e4aa:	b170      	cbz	r0, 800e4ca <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e4ac:	2300      	movs	r3, #0
 800e4ae:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800e4b2:	b165      	cbz	r5, 800e4ce <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800e4b4:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4b8:	2101      	movs	r1, #1
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800e4be:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e4c2:	f7ff ff52 	bl	800e36a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800e4c6:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800e4ca:	4620      	mov	r0, r4
 800e4cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e4ce:	4603      	mov	r3, r0
 800e4d0:	e7f2      	b.n	800e4b8 <xQueueGenericCreate+0x34>

0800e4d2 <xQueueCreateCountingSemaphoreStatic>:
	{
 800e4d2:	b513      	push	{r0, r1, r4, lr}
 800e4d4:	4613      	mov	r3, r2
 800e4d6:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e4d8:	b940      	cbnz	r0, 800e4ec <xQueueCreateCountingSemaphoreStatic+0x1a>
 800e4da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4de:	f383 8811 	msr	BASEPRI, r3
 800e4e2:	f3bf 8f6f 	isb	sy
 800e4e6:	f3bf 8f4f 	dsb	sy
 800e4ea:	e7fe      	b.n	800e4ea <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e4ec:	4288      	cmp	r0, r1
 800e4ee:	d208      	bcs.n	800e502 <xQueueCreateCountingSemaphoreStatic+0x30>
 800e4f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e4f4:	f383 8811 	msr	BASEPRI, r3
 800e4f8:	f3bf 8f6f 	isb	sy
 800e4fc:	f3bf 8f4f 	dsb	sy
 800e500:	e7fe      	b.n	800e500 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e502:	2202      	movs	r2, #2
 800e504:	9200      	str	r2, [sp, #0]
 800e506:	2200      	movs	r2, #0
 800e508:	4611      	mov	r1, r2
 800e50a:	f7ff ff6d 	bl	800e3e8 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800e50e:	b100      	cbz	r0, 800e512 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e510:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800e512:	b002      	add	sp, #8
 800e514:	bd10      	pop	{r4, pc}

0800e516 <xQueueCreateCountingSemaphore>:
	{
 800e516:	b510      	push	{r4, lr}
 800e518:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800e51a:	b940      	cbnz	r0, 800e52e <xQueueCreateCountingSemaphore+0x18>
 800e51c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e520:	f383 8811 	msr	BASEPRI, r3
 800e524:	f3bf 8f6f 	isb	sy
 800e528:	f3bf 8f4f 	dsb	sy
 800e52c:	e7fe      	b.n	800e52c <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800e52e:	4288      	cmp	r0, r1
 800e530:	d208      	bcs.n	800e544 <xQueueCreateCountingSemaphore+0x2e>
 800e532:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e536:	f383 8811 	msr	BASEPRI, r3
 800e53a:	f3bf 8f6f 	isb	sy
 800e53e:	f3bf 8f4f 	dsb	sy
 800e542:	e7fe      	b.n	800e542 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800e544:	2202      	movs	r2, #2
 800e546:	2100      	movs	r1, #0
 800e548:	f7ff ff9c 	bl	800e484 <xQueueGenericCreate>
		if( xHandle != NULL )
 800e54c:	b100      	cbz	r0, 800e550 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800e54e:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800e550:	bd10      	pop	{r4, pc}

0800e552 <xQueueGenericSend>:
{
 800e552:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e556:	460f      	mov	r7, r1
 800e558:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800e55a:	4604      	mov	r4, r0
{
 800e55c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800e55e:	b940      	cbnz	r0, 800e572 <xQueueGenericSend+0x20>
 800e560:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e564:	f383 8811 	msr	BASEPRI, r3
 800e568:	f3bf 8f6f 	isb	sy
 800e56c:	f3bf 8f4f 	dsb	sy
 800e570:	e7fe      	b.n	800e570 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e572:	b951      	cbnz	r1, 800e58a <xQueueGenericSend+0x38>
 800e574:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e576:	b143      	cbz	r3, 800e58a <xQueueGenericSend+0x38>
 800e578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e57c:	f383 8811 	msr	BASEPRI, r3
 800e580:	f3bf 8f6f 	isb	sy
 800e584:	f3bf 8f4f 	dsb	sy
 800e588:	e7fe      	b.n	800e588 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e58a:	2e02      	cmp	r6, #2
 800e58c:	d10b      	bne.n	800e5a6 <xQueueGenericSend+0x54>
 800e58e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e590:	2b01      	cmp	r3, #1
 800e592:	d008      	beq.n	800e5a6 <xQueueGenericSend+0x54>
 800e594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e598:	f383 8811 	msr	BASEPRI, r3
 800e59c:	f3bf 8f6f 	isb	sy
 800e5a0:	f3bf 8f4f 	dsb	sy
 800e5a4:	e7fe      	b.n	800e5a4 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5a6:	f001 f82b 	bl	800f600 <xTaskGetSchedulerState>
 800e5aa:	4605      	mov	r5, r0
 800e5ac:	b330      	cbz	r0, 800e5fc <xQueueGenericSend+0xaa>
 800e5ae:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e5b0:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800e5b4:	f7ff fd0e 	bl	800dfd4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e5b8:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e5ba:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e5bc:	429a      	cmp	r2, r3
 800e5be:	d301      	bcc.n	800e5c4 <xQueueGenericSend+0x72>
 800e5c0:	2e02      	cmp	r6, #2
 800e5c2:	d127      	bne.n	800e614 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e5c4:	4632      	mov	r2, r6
 800e5c6:	4639      	mov	r1, r7
 800e5c8:	4620      	mov	r0, r4
 800e5ca:	f7ff fe4e 	bl	800e26a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e5ce:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e5d0:	b11b      	cbz	r3, 800e5da <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e5d2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e5d6:	f000 ff7d 	bl	800f4d4 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800e5da:	b148      	cbz	r0, 800e5f0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800e5dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e5e0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e5e4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e5e8:	f3bf 8f4f 	dsb	sy
 800e5ec:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e5f0:	f7ff fd10 	bl	800e014 <vPortExitCritical>
				return pdPASS;
 800e5f4:	2001      	movs	r0, #1
}
 800e5f6:	b004      	add	sp, #16
 800e5f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e5fc:	9b01      	ldr	r3, [sp, #4]
 800e5fe:	2b00      	cmp	r3, #0
 800e600:	d0d6      	beq.n	800e5b0 <xQueueGenericSend+0x5e>
 800e602:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e606:	f383 8811 	msr	BASEPRI, r3
 800e60a:	f3bf 8f6f 	isb	sy
 800e60e:	f3bf 8f4f 	dsb	sy
 800e612:	e7fe      	b.n	800e612 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e614:	9b01      	ldr	r3, [sp, #4]
 800e616:	b91b      	cbnz	r3, 800e620 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800e618:	f7ff fcfc 	bl	800e014 <vPortExitCritical>
					return errQUEUE_FULL;
 800e61c:	2000      	movs	r0, #0
 800e61e:	e7ea      	b.n	800e5f6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800e620:	b915      	cbnz	r5, 800e628 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e622:	a802      	add	r0, sp, #8
 800e624:	f000 ff98 	bl	800f558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e628:	f7ff fcf4 	bl	800e014 <vPortExitCritical>
		vTaskSuspendAll();
 800e62c:	f000 fd4a 	bl	800f0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e630:	f7ff fcd0 	bl	800dfd4 <vPortEnterCritical>
 800e634:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e638:	2bff      	cmp	r3, #255	@ 0xff
 800e63a:	d101      	bne.n	800e640 <xQueueGenericSend+0xee>
 800e63c:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800e640:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e644:	2bff      	cmp	r3, #255	@ 0xff
 800e646:	d101      	bne.n	800e64c <xQueueGenericSend+0xfa>
 800e648:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800e64c:	f7ff fce2 	bl	800e014 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e650:	a901      	add	r1, sp, #4
 800e652:	a802      	add	r0, sp, #8
 800e654:	f000 ff8c 	bl	800f570 <xTaskCheckForTimeOut>
 800e658:	bb38      	cbnz	r0, 800e6aa <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800e65a:	f7ff fcbb 	bl	800dfd4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800e65e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e660:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e662:	429a      	cmp	r2, r3
 800e664:	d10e      	bne.n	800e684 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800e666:	f7ff fcd5 	bl	800e014 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800e66a:	9901      	ldr	r1, [sp, #4]
 800e66c:	f104 0010 	add.w	r0, r4, #16
 800e670:	f000 fef8 	bl	800f464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e674:	4620      	mov	r0, r4
 800e676:	f7ff fe40 	bl	800e2fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e67a:	f000 fdc7 	bl	800f20c <xTaskResumeAll>
 800e67e:	b148      	cbz	r0, 800e694 <xQueueGenericSend+0x142>
 800e680:	2501      	movs	r5, #1
 800e682:	e797      	b.n	800e5b4 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800e684:	f7ff fcc6 	bl	800e014 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800e688:	4620      	mov	r0, r4
 800e68a:	f7ff fe36 	bl	800e2fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e68e:	f000 fdbd 	bl	800f20c <xTaskResumeAll>
 800e692:	e7f5      	b.n	800e680 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800e694:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e698:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e69c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e6a0:	f3bf 8f4f 	dsb	sy
 800e6a4:	f3bf 8f6f 	isb	sy
 800e6a8:	e7ea      	b.n	800e680 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800e6aa:	4620      	mov	r0, r4
 800e6ac:	f7ff fe25 	bl	800e2fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e6b0:	f000 fdac 	bl	800f20c <xTaskResumeAll>
			return errQUEUE_FULL;
 800e6b4:	e7b2      	b.n	800e61c <xQueueGenericSend+0xca>

0800e6b6 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e6b6:	2200      	movs	r2, #0
	{
 800e6b8:	460b      	mov	r3, r1
 800e6ba:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800e6bc:	4611      	mov	r1, r2
 800e6be:	9000      	str	r0, [sp, #0]
 800e6c0:	2001      	movs	r0, #1
 800e6c2:	f7ff fe91 	bl	800e3e8 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800e6c6:	4604      	mov	r4, r0
 800e6c8:	b138      	cbz	r0, 800e6da <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e6ca:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e6cc:	461a      	mov	r2, r3
 800e6ce:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e6d0:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e6d2:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e6d4:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e6d6:	f7ff ff3c 	bl	800e552 <xQueueGenericSend>
	}
 800e6da:	4620      	mov	r0, r4
 800e6dc:	b002      	add	sp, #8
 800e6de:	bd10      	pop	{r4, pc}

0800e6e0 <xQueueGiveMutexRecursive>:
	{
 800e6e0:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800e6e2:	4604      	mov	r4, r0
 800e6e4:	b940      	cbnz	r0, 800e6f8 <xQueueGiveMutexRecursive+0x18>
 800e6e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6ea:	f383 8811 	msr	BASEPRI, r3
 800e6ee:	f3bf 8f6f 	isb	sy
 800e6f2:	f3bf 8f4f 	dsb	sy
 800e6f6:	e7fe      	b.n	800e6f6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800e6f8:	6885      	ldr	r5, [r0, #8]
 800e6fa:	f000 ff7b 	bl	800f5f4 <xTaskGetCurrentTaskHandle>
 800e6fe:	4285      	cmp	r5, r0
 800e700:	d10b      	bne.n	800e71a <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800e702:	68e3      	ldr	r3, [r4, #12]
 800e704:	3b01      	subs	r3, #1
 800e706:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800e708:	b10b      	cbz	r3, 800e70e <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800e70a:	2001      	movs	r0, #1
	}
 800e70c:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800e70e:	461a      	mov	r2, r3
 800e710:	4619      	mov	r1, r3
 800e712:	4620      	mov	r0, r4
 800e714:	f7ff ff1d 	bl	800e552 <xQueueGenericSend>
 800e718:	e7f7      	b.n	800e70a <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800e71a:	2000      	movs	r0, #0
		return xReturn;
 800e71c:	e7f6      	b.n	800e70c <xQueueGiveMutexRecursive+0x2c>

0800e71e <xQueueCreateMutex>:
	{
 800e71e:	b570      	push	{r4, r5, r6, lr}
 800e720:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800e722:	2050      	movs	r0, #80	@ 0x50
 800e724:	f7ff fade 	bl	800dce4 <pvPortMalloc>
 800e728:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800e72a:	b198      	cbz	r0, 800e754 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e72c:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800e72e:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800e730:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800e732:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800e736:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800e73a:	f7ff fe16 	bl	800e36a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e73e:	462b      	mov	r3, r5
 800e740:	462a      	mov	r2, r5
 800e742:	4629      	mov	r1, r5
 800e744:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800e746:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800e74a:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800e74c:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800e74e:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800e750:	f7ff feff 	bl	800e552 <xQueueGenericSend>
	}
 800e754:	4620      	mov	r0, r4
 800e756:	bd70      	pop	{r4, r5, r6, pc}

0800e758 <xQueueGenericSendFromISR>:
{
 800e758:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e75c:	4689      	mov	r9, r1
 800e75e:	4617      	mov	r7, r2
 800e760:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800e762:	4604      	mov	r4, r0
 800e764:	b940      	cbnz	r0, 800e778 <xQueueGenericSendFromISR+0x20>
 800e766:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e76a:	f383 8811 	msr	BASEPRI, r3
 800e76e:	f3bf 8f6f 	isb	sy
 800e772:	f3bf 8f4f 	dsb	sy
 800e776:	e7fe      	b.n	800e776 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e778:	b951      	cbnz	r1, 800e790 <xQueueGenericSendFromISR+0x38>
 800e77a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e77c:	b143      	cbz	r3, 800e790 <xQueueGenericSendFromISR+0x38>
 800e77e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e782:	f383 8811 	msr	BASEPRI, r3
 800e786:	f3bf 8f6f 	isb	sy
 800e78a:	f3bf 8f4f 	dsb	sy
 800e78e:	e7fe      	b.n	800e78e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800e790:	2e02      	cmp	r6, #2
 800e792:	d10b      	bne.n	800e7ac <xQueueGenericSendFromISR+0x54>
 800e794:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e796:	2b01      	cmp	r3, #1
 800e798:	d008      	beq.n	800e7ac <xQueueGenericSendFromISR+0x54>
 800e79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e79e:	f383 8811 	msr	BASEPRI, r3
 800e7a2:	f3bf 8f6f 	isb	sy
 800e7a6:	f3bf 8f4f 	dsb	sy
 800e7aa:	e7fe      	b.n	800e7aa <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e7ac:	f7ff fd24 	bl	800e1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e7b0:	f3ef 8811 	mrs	r8, BASEPRI
 800e7b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e7b8:	f383 8811 	msr	BASEPRI, r3
 800e7bc:	f3bf 8f6f 	isb	sy
 800e7c0:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800e7c4:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800e7c6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e7c8:	429a      	cmp	r2, r3
 800e7ca:	d301      	bcc.n	800e7d0 <xQueueGenericSendFromISR+0x78>
 800e7cc:	2e02      	cmp	r6, #2
 800e7ce:	d11e      	bne.n	800e80e <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7d0:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7d4:	4632      	mov	r2, r6
 800e7d6:	4649      	mov	r1, r9
 800e7d8:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800e7da:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e7dc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800e7de:	f7ff fd44 	bl	800e26a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800e7e2:	1c6b      	adds	r3, r5, #1
 800e7e4:	d10e      	bne.n	800e804 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e7e6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e7e8:	b13b      	cbz	r3, 800e7fa <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e7ea:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e7ee:	f000 fe71 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e7f2:	b110      	cbz	r0, 800e7fa <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800e7f4:	b10f      	cbz	r7, 800e7fa <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e7f6:	2301      	movs	r3, #1
 800e7f8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800e7fa:	2001      	movs	r0, #1
	__asm volatile
 800e7fc:	f388 8811 	msr	BASEPRI, r8
}
 800e800:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e804:	3501      	adds	r5, #1
 800e806:	b26d      	sxtb	r5, r5
 800e808:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800e80c:	e7f5      	b.n	800e7fa <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800e80e:	2000      	movs	r0, #0
 800e810:	e7f4      	b.n	800e7fc <xQueueGenericSendFromISR+0xa4>

0800e812 <xQueueGiveFromISR>:
{
 800e812:	b570      	push	{r4, r5, r6, lr}
 800e814:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800e816:	4604      	mov	r4, r0
 800e818:	b940      	cbnz	r0, 800e82c <xQueueGiveFromISR+0x1a>
	__asm volatile
 800e81a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e81e:	f383 8811 	msr	BASEPRI, r3
 800e822:	f3bf 8f6f 	isb	sy
 800e826:	f3bf 8f4f 	dsb	sy
 800e82a:	e7fe      	b.n	800e82a <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800e82c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e82e:	b143      	cbz	r3, 800e842 <xQueueGiveFromISR+0x30>
 800e830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e834:	f383 8811 	msr	BASEPRI, r3
 800e838:	f3bf 8f6f 	isb	sy
 800e83c:	f3bf 8f4f 	dsb	sy
 800e840:	e7fe      	b.n	800e840 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800e842:	6803      	ldr	r3, [r0, #0]
 800e844:	b953      	cbnz	r3, 800e85c <xQueueGiveFromISR+0x4a>
 800e846:	6883      	ldr	r3, [r0, #8]
 800e848:	b143      	cbz	r3, 800e85c <xQueueGiveFromISR+0x4a>
 800e84a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e84e:	f383 8811 	msr	BASEPRI, r3
 800e852:	f3bf 8f6f 	isb	sy
 800e856:	f3bf 8f4f 	dsb	sy
 800e85a:	e7fe      	b.n	800e85a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800e85c:	f7ff fccc 	bl	800e1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800e860:	f3ef 8611 	mrs	r6, BASEPRI
 800e864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e874:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800e876:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e878:	4293      	cmp	r3, r2
 800e87a:	d919      	bls.n	800e8b0 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800e87c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e880:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800e882:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800e884:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800e886:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800e888:	d10d      	bne.n	800e8a6 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800e88a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800e88c:	b13b      	cbz	r3, 800e89e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800e88e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e892:	f000 fe1f 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e896:	b110      	cbz	r0, 800e89e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800e898:	b10d      	cbz	r5, 800e89e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800e89a:	2301      	movs	r3, #1
 800e89c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800e89e:	2001      	movs	r0, #1
	__asm volatile
 800e8a0:	f386 8811 	msr	BASEPRI, r6
}
 800e8a4:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800e8a6:	3301      	adds	r3, #1
 800e8a8:	b25b      	sxtb	r3, r3
 800e8aa:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800e8ae:	e7f6      	b.n	800e89e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e7f5      	b.n	800e8a0 <xQueueGiveFromISR+0x8e>

0800e8b4 <xQueueReceive>:
{
 800e8b4:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800e8b8:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800e8ba:	4604      	mov	r4, r0
{
 800e8bc:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e8be:	b940      	cbnz	r0, 800e8d2 <xQueueReceive+0x1e>
	__asm volatile
 800e8c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8c4:	f383 8811 	msr	BASEPRI, r3
 800e8c8:	f3bf 8f6f 	isb	sy
 800e8cc:	f3bf 8f4f 	dsb	sy
 800e8d0:	e7fe      	b.n	800e8d0 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800e8d2:	b951      	cbnz	r1, 800e8ea <xQueueReceive+0x36>
 800e8d4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800e8d6:	b143      	cbz	r3, 800e8ea <xQueueReceive+0x36>
 800e8d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e8dc:	f383 8811 	msr	BASEPRI, r3
 800e8e0:	f3bf 8f6f 	isb	sy
 800e8e4:	f3bf 8f4f 	dsb	sy
 800e8e8:	e7fe      	b.n	800e8e8 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e8ea:	f000 fe89 	bl	800f600 <xTaskGetSchedulerState>
 800e8ee:	4605      	mov	r5, r0
 800e8f0:	b318      	cbz	r0, 800e93a <xQueueReceive+0x86>
 800e8f2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800e8f4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800e8f8:	f7ff fb6c 	bl	800dfd4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800e8fc:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800e8fe:	b347      	cbz	r7, 800e952 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e900:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800e902:	4631      	mov	r1, r6
 800e904:	4620      	mov	r0, r4
 800e906:	f7ff fce3 	bl	800e2d0 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800e90a:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800e90c:	6923      	ldr	r3, [r4, #16]
 800e90e:	b173      	cbz	r3, 800e92e <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800e910:	f104 0010 	add.w	r0, r4, #16
 800e914:	f000 fdde 	bl	800f4d4 <xTaskRemoveFromEventList>
 800e918:	b148      	cbz	r0, 800e92e <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800e91a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e91e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e922:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e926:	f3bf 8f4f 	dsb	sy
 800e92a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800e92e:	f7ff fb71 	bl	800e014 <vPortExitCritical>
				return pdPASS;
 800e932:	2001      	movs	r0, #1
}
 800e934:	b004      	add	sp, #16
 800e936:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800e93a:	9b01      	ldr	r3, [sp, #4]
 800e93c:	2b00      	cmp	r3, #0
 800e93e:	d0d9      	beq.n	800e8f4 <xQueueReceive+0x40>
 800e940:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e944:	f383 8811 	msr	BASEPRI, r3
 800e948:	f3bf 8f6f 	isb	sy
 800e94c:	f3bf 8f4f 	dsb	sy
 800e950:	e7fe      	b.n	800e950 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800e952:	9b01      	ldr	r3, [sp, #4]
 800e954:	b91b      	cbnz	r3, 800e95e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800e956:	f7ff fb5d 	bl	800e014 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800e95a:	2000      	movs	r0, #0
 800e95c:	e7ea      	b.n	800e934 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800e95e:	b915      	cbnz	r5, 800e966 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800e960:	a802      	add	r0, sp, #8
 800e962:	f000 fdf9 	bl	800f558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800e966:	f7ff fb55 	bl	800e014 <vPortExitCritical>
		vTaskSuspendAll();
 800e96a:	f000 fbab 	bl	800f0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800e96e:	f7ff fb31 	bl	800dfd4 <vPortEnterCritical>
 800e972:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800e976:	2bff      	cmp	r3, #255	@ 0xff
 800e978:	d101      	bne.n	800e97e <xQueueReceive+0xca>
 800e97a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800e97e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800e982:	2bff      	cmp	r3, #255	@ 0xff
 800e984:	d101      	bne.n	800e98a <xQueueReceive+0xd6>
 800e986:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800e98a:	f7ff fb43 	bl	800e014 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800e98e:	a901      	add	r1, sp, #4
 800e990:	a802      	add	r0, sp, #8
 800e992:	f000 fded 	bl	800f570 <xTaskCheckForTimeOut>
 800e996:	bb00      	cbnz	r0, 800e9da <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e998:	4620      	mov	r0, r4
 800e99a:	f7ff fc5b 	bl	800e254 <prvIsQueueEmpty>
 800e99e:	b1b0      	cbz	r0, 800e9ce <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800e9a0:	9901      	ldr	r1, [sp, #4]
 800e9a2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800e9a6:	f000 fd5d 	bl	800f464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800e9aa:	4620      	mov	r0, r4
 800e9ac:	f7ff fca5 	bl	800e2fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800e9b0:	f000 fc2c 	bl	800f20c <xTaskResumeAll>
 800e9b4:	b948      	cbnz	r0, 800e9ca <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800e9b6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e9ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e9be:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e9c2:	f3bf 8f4f 	dsb	sy
 800e9c6:	f3bf 8f6f 	isb	sy
 800e9ca:	2501      	movs	r5, #1
 800e9cc:	e794      	b.n	800e8f8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800e9ce:	4620      	mov	r0, r4
 800e9d0:	f7ff fc93 	bl	800e2fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800e9d4:	f000 fc1a 	bl	800f20c <xTaskResumeAll>
 800e9d8:	e7f7      	b.n	800e9ca <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800e9da:	4620      	mov	r0, r4
 800e9dc:	f7ff fc8d 	bl	800e2fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800e9e0:	f000 fc14 	bl	800f20c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800e9e4:	4620      	mov	r0, r4
 800e9e6:	f7ff fc35 	bl	800e254 <prvIsQueueEmpty>
 800e9ea:	2800      	cmp	r0, #0
 800e9ec:	d0ed      	beq.n	800e9ca <xQueueReceive+0x116>
 800e9ee:	e7b4      	b.n	800e95a <xQueueReceive+0xa6>

0800e9f0 <xQueueSemaphoreTake>:
{
 800e9f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9f2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800e9f4:	4604      	mov	r4, r0
{
 800e9f6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800e9f8:	b940      	cbnz	r0, 800ea0c <xQueueSemaphoreTake+0x1c>
 800e9fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9fe:	f383 8811 	msr	BASEPRI, r3
 800ea02:	f3bf 8f6f 	isb	sy
 800ea06:	f3bf 8f4f 	dsb	sy
 800ea0a:	e7fe      	b.n	800ea0a <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800ea0c:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800ea0e:	b145      	cbz	r5, 800ea22 <xQueueSemaphoreTake+0x32>
 800ea10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea14:	f383 8811 	msr	BASEPRI, r3
 800ea18:	f3bf 8f6f 	isb	sy
 800ea1c:	f3bf 8f4f 	dsb	sy
 800ea20:	e7fe      	b.n	800ea20 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea22:	f000 fded 	bl	800f600 <xTaskGetSchedulerState>
 800ea26:	4606      	mov	r6, r0
 800ea28:	b320      	cbz	r0, 800ea74 <xQueueSemaphoreTake+0x84>
 800ea2a:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800ea2c:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800ea2e:	f7ff fad1 	bl	800dfd4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800ea32:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800ea34:	b353      	cbz	r3, 800ea8c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800ea36:	3b01      	subs	r3, #1
 800ea38:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800ea3a:	6823      	ldr	r3, [r4, #0]
 800ea3c:	b913      	cbnz	r3, 800ea44 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800ea3e:	f000 febd 	bl	800f7bc <pvTaskIncrementMutexHeldCount>
 800ea42:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ea44:	6923      	ldr	r3, [r4, #16]
 800ea46:	b173      	cbz	r3, 800ea66 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ea48:	f104 0010 	add.w	r0, r4, #16
 800ea4c:	f000 fd42 	bl	800f4d4 <xTaskRemoveFromEventList>
 800ea50:	b148      	cbz	r0, 800ea66 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800ea52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ea5e:	f3bf 8f4f 	dsb	sy
 800ea62:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800ea66:	f7ff fad5 	bl	800e014 <vPortExitCritical>
				return pdPASS;
 800ea6a:	2001      	movs	r0, #1
}
 800ea6c:	b005      	add	sp, #20
 800ea6e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ea70:	4635      	mov	r5, r6
 800ea72:	e7db      	b.n	800ea2c <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ea74:	9b01      	ldr	r3, [sp, #4]
 800ea76:	2b00      	cmp	r3, #0
 800ea78:	d0fa      	beq.n	800ea70 <xQueueSemaphoreTake+0x80>
 800ea7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea7e:	f383 8811 	msr	BASEPRI, r3
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	f3bf 8f4f 	dsb	sy
 800ea8a:	e7fe      	b.n	800ea8a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800ea8c:	9b01      	ldr	r3, [sp, #4]
 800ea8e:	b953      	cbnz	r3, 800eaa6 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800ea90:	2d00      	cmp	r5, #0
 800ea92:	d066      	beq.n	800eb62 <xQueueSemaphoreTake+0x172>
 800ea94:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ea98:	f383 8811 	msr	BASEPRI, r3
 800ea9c:	f3bf 8f6f 	isb	sy
 800eaa0:	f3bf 8f4f 	dsb	sy
 800eaa4:	e7fe      	b.n	800eaa4 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800eaa6:	b916      	cbnz	r6, 800eaae <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800eaa8:	a802      	add	r0, sp, #8
 800eaaa:	f000 fd55 	bl	800f558 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800eaae:	f7ff fab1 	bl	800e014 <vPortExitCritical>
		vTaskSuspendAll();
 800eab2:	f000 fb07 	bl	800f0c4 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800eab6:	f7ff fa8d 	bl	800dfd4 <vPortEnterCritical>
 800eaba:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800eabe:	2bff      	cmp	r3, #255	@ 0xff
 800eac0:	d101      	bne.n	800eac6 <xQueueSemaphoreTake+0xd6>
 800eac2:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800eac6:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800eaca:	2bff      	cmp	r3, #255	@ 0xff
 800eacc:	d101      	bne.n	800ead2 <xQueueSemaphoreTake+0xe2>
 800eace:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800ead2:	f7ff fa9f 	bl	800e014 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800ead6:	a901      	add	r1, sp, #4
 800ead8:	a802      	add	r0, sp, #8
 800eada:	f000 fd49 	bl	800f570 <xTaskCheckForTimeOut>
 800eade:	bb50      	cbnz	r0, 800eb36 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eae0:	4620      	mov	r0, r4
 800eae2:	f7ff fbb7 	bl	800e254 <prvIsQueueEmpty>
 800eae6:	b300      	cbz	r0, 800eb2a <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800eae8:	6823      	ldr	r3, [r4, #0]
 800eaea:	b93b      	cbnz	r3, 800eafc <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800eaec:	f7ff fa72 	bl	800dfd4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800eaf0:	68a0      	ldr	r0, [r4, #8]
 800eaf2:	f000 fd95 	bl	800f620 <xTaskPriorityInherit>
 800eaf6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800eaf8:	f7ff fa8c 	bl	800e014 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800eafc:	9901      	ldr	r1, [sp, #4]
 800eafe:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800eb02:	f000 fcaf 	bl	800f464 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800eb06:	4620      	mov	r0, r4
 800eb08:	f7ff fbf7 	bl	800e2fa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800eb0c:	f000 fb7e 	bl	800f20c <xTaskResumeAll>
 800eb10:	b948      	cbnz	r0, 800eb26 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800eb12:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eb16:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eb1a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eb1e:	f3bf 8f4f 	dsb	sy
 800eb22:	f3bf 8f6f 	isb	sy
 800eb26:	2601      	movs	r6, #1
 800eb28:	e781      	b.n	800ea2e <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f7ff fbe5 	bl	800e2fa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800eb30:	f000 fb6c 	bl	800f20c <xTaskResumeAll>
 800eb34:	e7f7      	b.n	800eb26 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800eb36:	4620      	mov	r0, r4
 800eb38:	f7ff fbdf 	bl	800e2fa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800eb3c:	f000 fb66 	bl	800f20c <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800eb40:	4620      	mov	r0, r4
 800eb42:	f7ff fb87 	bl	800e254 <prvIsQueueEmpty>
 800eb46:	2800      	cmp	r0, #0
 800eb48:	d0ed      	beq.n	800eb26 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800eb4a:	b165      	cbz	r5, 800eb66 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800eb4c:	f7ff fa42 	bl	800dfd4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800eb50:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800eb52:	b119      	cbz	r1, 800eb5c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800eb54:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800eb56:	6819      	ldr	r1, [r3, #0]
 800eb58:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800eb5c:	68a0      	ldr	r0, [r4, #8]
 800eb5e:	f000 fddf 	bl	800f720 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800eb62:	f7ff fa57 	bl	800e014 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800eb66:	2000      	movs	r0, #0
 800eb68:	e780      	b.n	800ea6c <xQueueSemaphoreTake+0x7c>

0800eb6a <xQueueTakeMutexRecursive>:
	{
 800eb6a:	b570      	push	{r4, r5, r6, lr}
 800eb6c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800eb6e:	4604      	mov	r4, r0
 800eb70:	b940      	cbnz	r0, 800eb84 <xQueueTakeMutexRecursive+0x1a>
 800eb72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb76:	f383 8811 	msr	BASEPRI, r3
 800eb7a:	f3bf 8f6f 	isb	sy
 800eb7e:	f3bf 8f4f 	dsb	sy
 800eb82:	e7fe      	b.n	800eb82 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800eb84:	6886      	ldr	r6, [r0, #8]
 800eb86:	f000 fd35 	bl	800f5f4 <xTaskGetCurrentTaskHandle>
 800eb8a:	4286      	cmp	r6, r0
 800eb8c:	d104      	bne.n	800eb98 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb8e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800eb90:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eb92:	3301      	adds	r3, #1
 800eb94:	60e3      	str	r3, [r4, #12]
	}
 800eb96:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800eb98:	4629      	mov	r1, r5
 800eb9a:	4620      	mov	r0, r4
 800eb9c:	f7ff ff28 	bl	800e9f0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800eba0:	2800      	cmp	r0, #0
 800eba2:	d0f8      	beq.n	800eb96 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800eba4:	68e3      	ldr	r3, [r4, #12]
 800eba6:	3301      	adds	r3, #1
 800eba8:	60e3      	str	r3, [r4, #12]
 800ebaa:	e7f4      	b.n	800eb96 <xQueueTakeMutexRecursive+0x2c>

0800ebac <xQueueReceiveFromISR>:
{
 800ebac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ebb0:	4689      	mov	r9, r1
 800ebb2:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800ebb4:	4604      	mov	r4, r0
 800ebb6:	b940      	cbnz	r0, 800ebca <xQueueReceiveFromISR+0x1e>
 800ebb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebbc:	f383 8811 	msr	BASEPRI, r3
 800ebc0:	f3bf 8f6f 	isb	sy
 800ebc4:	f3bf 8f4f 	dsb	sy
 800ebc8:	e7fe      	b.n	800ebc8 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ebca:	b951      	cbnz	r1, 800ebe2 <xQueueReceiveFromISR+0x36>
 800ebcc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ebce:	b143      	cbz	r3, 800ebe2 <xQueueReceiveFromISR+0x36>
 800ebd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebd4:	f383 8811 	msr	BASEPRI, r3
 800ebd8:	f3bf 8f6f 	isb	sy
 800ebdc:	f3bf 8f4f 	dsb	sy
 800ebe0:	e7fe      	b.n	800ebe0 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ebe2:	f7ff fb09 	bl	800e1f8 <vPortValidateInterruptPriority>
	__asm volatile
 800ebe6:	f3ef 8711 	mrs	r7, BASEPRI
 800ebea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ebee:	f383 8811 	msr	BASEPRI, r3
 800ebf2:	f3bf 8f6f 	isb	sy
 800ebf6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ebfa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ebfc:	b30d      	cbz	r5, 800ec42 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800ebfe:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec02:	4649      	mov	r1, r9
 800ec04:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec06:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800ec08:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800ec0a:	f7ff fb61 	bl	800e2d0 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800ec0e:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800ec10:	1c73      	adds	r3, r6, #1
 800ec12:	d111      	bne.n	800ec38 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ec14:	6923      	ldr	r3, [r4, #16]
 800ec16:	b153      	cbz	r3, 800ec2e <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ec18:	f104 0010 	add.w	r0, r4, #16
 800ec1c:	f000 fc5a 	bl	800f4d4 <xTaskRemoveFromEventList>
 800ec20:	b128      	cbz	r0, 800ec2e <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800ec22:	f1b8 0f00 	cmp.w	r8, #0
 800ec26:	d002      	beq.n	800ec2e <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800ec28:	2301      	movs	r3, #1
 800ec2a:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800ec2e:	2001      	movs	r0, #1
	__asm volatile
 800ec30:	f387 8811 	msr	BASEPRI, r7
}
 800ec34:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800ec38:	3601      	adds	r6, #1
 800ec3a:	b276      	sxtb	r6, r6
 800ec3c:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800ec40:	e7f5      	b.n	800ec2e <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800ec42:	4628      	mov	r0, r5
 800ec44:	e7f4      	b.n	800ec30 <xQueueReceiveFromISR+0x84>
	...

0800ec48 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec48:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec4a:	4a07      	ldr	r2, [pc, #28]	@ (800ec68 <vQueueAddToRegistry+0x20>)
	{
 800ec4c:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ec4e:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800ec52:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800ec56:	b91d      	cbnz	r5, 800ec60 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ec58:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ec5c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ec5e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec60:	3301      	adds	r3, #1
 800ec62:	2b08      	cmp	r3, #8
 800ec64:	d1f3      	bne.n	800ec4e <vQueueAddToRegistry+0x6>
 800ec66:	e7fa      	b.n	800ec5e <vQueueAddToRegistry+0x16>
 800ec68:	240257ac 	.word	0x240257ac

0800ec6c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec6c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ec6e:	4a09      	ldr	r2, [pc, #36]	@ (800ec94 <vQueueUnregisterQueue+0x28>)
	{
 800ec70:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800ec72:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800ec76:	00dc      	lsls	r4, r3, #3
 800ec78:	4281      	cmp	r1, r0
 800ec7a:	d106      	bne.n	800ec8a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800ec7c:	4a06      	ldr	r2, [pc, #24]	@ (800ec98 <vQueueUnregisterQueue+0x2c>)
 800ec7e:	2100      	movs	r1, #0
 800ec80:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800ec84:	4422      	add	r2, r4
 800ec86:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800ec88:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ec8a:	3301      	adds	r3, #1
 800ec8c:	2b08      	cmp	r3, #8
 800ec8e:	d1f0      	bne.n	800ec72 <vQueueUnregisterQueue+0x6>
 800ec90:	e7fa      	b.n	800ec88 <vQueueUnregisterQueue+0x1c>
 800ec92:	bf00      	nop
 800ec94:	240257b0 	.word	0x240257b0
 800ec98:	240257ac 	.word	0x240257ac

0800ec9c <vQueueDelete>:
{
 800ec9c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800ec9e:	b940      	cbnz	r0, 800ecb2 <vQueueDelete+0x16>
	__asm volatile
 800eca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eca4:	f383 8811 	msr	BASEPRI, r3
 800eca8:	f3bf 8f6f 	isb	sy
 800ecac:	f3bf 8f4f 	dsb	sy
 800ecb0:	e7fe      	b.n	800ecb0 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800ecb2:	f7ff ffdb 	bl	800ec6c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800ecb6:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800ecba:	b91b      	cbnz	r3, 800ecc4 <vQueueDelete+0x28>
}
 800ecbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800ecc0:	f7ff b8a8 	b.w	800de14 <vPortFree>
}
 800ecc4:	bd10      	pop	{r4, pc}

0800ecc6 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ecc6:	b570      	push	{r4, r5, r6, lr}
 800ecc8:	4604      	mov	r4, r0
 800ecca:	460d      	mov	r5, r1
 800eccc:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ecce:	f7ff f981 	bl	800dfd4 <vPortEnterCritical>
 800ecd2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800ecd6:	2bff      	cmp	r3, #255	@ 0xff
 800ecd8:	d102      	bne.n	800ece0 <vQueueWaitForMessageRestricted+0x1a>
 800ecda:	2300      	movs	r3, #0
 800ecdc:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800ece0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800ece4:	2bff      	cmp	r3, #255	@ 0xff
 800ece6:	d102      	bne.n	800ecee <vQueueWaitForMessageRestricted+0x28>
 800ece8:	2300      	movs	r3, #0
 800ecea:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800ecee:	f7ff f991 	bl	800e014 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ecf2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800ecf4:	b92b      	cbnz	r3, 800ed02 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ecf6:	4632      	mov	r2, r6
 800ecf8:	4629      	mov	r1, r5
 800ecfa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ecfe:	f000 fbcb 	bl	800f498 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ed02:	4620      	mov	r0, r4
	}
 800ed04:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800ed08:	f7ff baf7 	b.w	800e2fa <prvUnlockQueue>

0800ed0c <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800ed0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ed10:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800ed12:	f7ff f95f 	bl	800dfd4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800ed16:	4b2f      	ldr	r3, [pc, #188]	@ (800edd4 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800ed18:	4e2f      	ldr	r6, [pc, #188]	@ (800edd8 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800ed1a:	681a      	ldr	r2, [r3, #0]
 800ed1c:	4f2f      	ldr	r7, [pc, #188]	@ (800eddc <prvAddNewTaskToReadyList+0xd0>)
 800ed1e:	3201      	adds	r2, #1
 800ed20:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800ed22:	6835      	ldr	r5, [r6, #0]
 800ed24:	2d00      	cmp	r5, #0
 800ed26:	d14a      	bne.n	800edbe <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800ed28:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800ed2a:	681b      	ldr	r3, [r3, #0]
 800ed2c:	2b01      	cmp	r3, #1
 800ed2e:	d11f      	bne.n	800ed70 <prvAddNewTaskToReadyList+0x64>
 800ed30:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed32:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800ed34:	4640      	mov	r0, r8
 800ed36:	f7ff f8ab 	bl	800de90 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800ed3a:	f108 0814 	add.w	r8, r8, #20
 800ed3e:	2d38      	cmp	r5, #56	@ 0x38
 800ed40:	d1f7      	bne.n	800ed32 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800ed42:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800ee04 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800ed46:	4d26      	ldr	r5, [pc, #152]	@ (800ede0 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800ed48:	4640      	mov	r0, r8
 800ed4a:	f7ff f8a1 	bl	800de90 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800ed4e:	4628      	mov	r0, r5
 800ed50:	f7ff f89e 	bl	800de90 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800ed54:	4823      	ldr	r0, [pc, #140]	@ (800ede4 <prvAddNewTaskToReadyList+0xd8>)
 800ed56:	f7ff f89b 	bl	800de90 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800ed5a:	4823      	ldr	r0, [pc, #140]	@ (800ede8 <prvAddNewTaskToReadyList+0xdc>)
 800ed5c:	f7ff f898 	bl	800de90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800ed60:	4822      	ldr	r0, [pc, #136]	@ (800edec <prvAddNewTaskToReadyList+0xe0>)
 800ed62:	f7ff f895 	bl	800de90 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800ed66:	4b22      	ldr	r3, [pc, #136]	@ (800edf0 <prvAddNewTaskToReadyList+0xe4>)
 800ed68:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800ed6c:	4b21      	ldr	r3, [pc, #132]	@ (800edf4 <prvAddNewTaskToReadyList+0xe8>)
 800ed6e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800ed70:	4a21      	ldr	r2, [pc, #132]	@ (800edf8 <prvAddNewTaskToReadyList+0xec>)
 800ed72:	6813      	ldr	r3, [r2, #0]
 800ed74:	3301      	adds	r3, #1
 800ed76:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800ed78:	4a20      	ldr	r2, [pc, #128]	@ (800edfc <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ed7a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800ed7c:	6811      	ldr	r1, [r2, #0]
 800ed7e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800ed80:	428b      	cmp	r3, r1
 800ed82:	d900      	bls.n	800ed86 <prvAddNewTaskToReadyList+0x7a>
 800ed84:	6013      	str	r3, [r2, #0]
 800ed86:	2014      	movs	r0, #20
 800ed88:	1d21      	adds	r1, r4, #4
 800ed8a:	fb00 7003 	mla	r0, r0, r3, r7
 800ed8e:	f7ff f88d 	bl	800deac <vListInsertEnd>
	taskEXIT_CRITICAL();
 800ed92:	f7ff f93f 	bl	800e014 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800ed96:	4b1a      	ldr	r3, [pc, #104]	@ (800ee00 <prvAddNewTaskToReadyList+0xf4>)
 800ed98:	681b      	ldr	r3, [r3, #0]
 800ed9a:	b173      	cbz	r3, 800edba <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800ed9c:	6833      	ldr	r3, [r6, #0]
 800ed9e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800eda0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800eda2:	429a      	cmp	r2, r3
 800eda4:	d209      	bcs.n	800edba <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800eda6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800edaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800edae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800edb2:	f3bf 8f4f 	dsb	sy
 800edb6:	f3bf 8f6f 	isb	sy
}
 800edba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800edbe:	4b10      	ldr	r3, [pc, #64]	@ (800ee00 <prvAddNewTaskToReadyList+0xf4>)
 800edc0:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edc2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800edc4:	2a00      	cmp	r2, #0
 800edc6:	d1d3      	bne.n	800ed70 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800edc8:	6832      	ldr	r2, [r6, #0]
 800edca:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800edcc:	429a      	cmp	r2, r3
 800edce:	d8cf      	bhi.n	800ed70 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800edd0:	6034      	str	r4, [r6, #0]
 800edd2:	e7cd      	b.n	800ed70 <prvAddNewTaskToReadyList+0x64>
 800edd4:	24025810 	.word	0x24025810
 800edd8:	24025ce4 	.word	0x24025ce4
 800eddc:	24025884 	.word	0x24025884
 800ede0:	2402585c 	.word	0x2402585c
 800ede4:	24025840 	.word	0x24025840
 800ede8:	2402582c 	.word	0x2402582c
 800edec:	24025814 	.word	0x24025814
 800edf0:	24025858 	.word	0x24025858
 800edf4:	24025854 	.word	0x24025854
 800edf8:	240257f4 	.word	0x240257f4
 800edfc:	24025808 	.word	0x24025808
 800ee00:	24025804 	.word	0x24025804
 800ee04:	24025870 	.word	0x24025870

0800ee08 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ee08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ee0a:	4b15      	ldr	r3, [pc, #84]	@ (800ee60 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800ee0c:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee0e:	4d15      	ldr	r5, [pc, #84]	@ (800ee64 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800ee10:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800ee12:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ee14:	6828      	ldr	r0, [r5, #0]
 800ee16:	3004      	adds	r0, #4
 800ee18:	f7ff f86a 	bl	800def0 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ee1c:	1c73      	adds	r3, r6, #1
 800ee1e:	d107      	bne.n	800ee30 <prvAddCurrentTaskToDelayedList+0x28>
 800ee20:	b137      	cbz	r7, 800ee30 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee22:	6829      	ldr	r1, [r5, #0]
 800ee24:	4810      	ldr	r0, [pc, #64]	@ (800ee68 <prvAddCurrentTaskToDelayedList+0x60>)
 800ee26:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ee28:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee2c:	f7ff b83e 	b.w	800deac <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800ee30:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800ee32:	682b      	ldr	r3, [r5, #0]
 800ee34:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800ee36:	d307      	bcc.n	800ee48 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee38:	4b0c      	ldr	r3, [pc, #48]	@ (800ee6c <prvAddCurrentTaskToDelayedList+0x64>)
 800ee3a:	6818      	ldr	r0, [r3, #0]
 800ee3c:	6829      	ldr	r1, [r5, #0]
}
 800ee3e:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee42:	3104      	adds	r1, #4
 800ee44:	f7ff b83d 	b.w	800dec2 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ee48:	4b09      	ldr	r3, [pc, #36]	@ (800ee70 <prvAddCurrentTaskToDelayedList+0x68>)
 800ee4a:	6818      	ldr	r0, [r3, #0]
 800ee4c:	6829      	ldr	r1, [r5, #0]
 800ee4e:	3104      	adds	r1, #4
 800ee50:	f7ff f837 	bl	800dec2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800ee54:	4b07      	ldr	r3, [pc, #28]	@ (800ee74 <prvAddCurrentTaskToDelayedList+0x6c>)
 800ee56:	681a      	ldr	r2, [r3, #0]
 800ee58:	42a2      	cmp	r2, r4
 800ee5a:	d900      	bls.n	800ee5e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800ee5c:	601c      	str	r4, [r3, #0]
}
 800ee5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee60:	2402580c 	.word	0x2402580c
 800ee64:	24025ce4 	.word	0x24025ce4
 800ee68:	24025814 	.word	0x24025814
 800ee6c:	24025854 	.word	0x24025854
 800ee70:	24025858 	.word	0x24025858
 800ee74:	240257f0 	.word	0x240257f0

0800ee78 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ee78:	4a06      	ldr	r2, [pc, #24]	@ (800ee94 <prvResetNextTaskUnblockTime+0x1c>)
 800ee7a:	6813      	ldr	r3, [r2, #0]
 800ee7c:	6819      	ldr	r1, [r3, #0]
 800ee7e:	4b06      	ldr	r3, [pc, #24]	@ (800ee98 <prvResetNextTaskUnblockTime+0x20>)
 800ee80:	b919      	cbnz	r1, 800ee8a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800ee82:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee86:	601a      	str	r2, [r3, #0]
}
 800ee88:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ee8a:	6812      	ldr	r2, [r2, #0]
 800ee8c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ee8e:	68d2      	ldr	r2, [r2, #12]
 800ee90:	6852      	ldr	r2, [r2, #4]
 800ee92:	e7f8      	b.n	800ee86 <prvResetNextTaskUnblockTime+0xe>
 800ee94:	24025858 	.word	0x24025858
 800ee98:	240257f0 	.word	0x240257f0

0800ee9c <prvDeleteTCB>:
	{
 800ee9c:	b510      	push	{r4, lr}
 800ee9e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800eea0:	3058      	adds	r0, #88	@ 0x58
 800eea2:	f017 ff6b 	bl	8026d7c <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800eea6:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800eeaa:	b93b      	cbnz	r3, 800eebc <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800eeac:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800eeae:	f7fe ffb1 	bl	800de14 <vPortFree>
				vPortFree( pxTCB );
 800eeb2:	4620      	mov	r0, r4
	}
 800eeb4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800eeb8:	f7fe bfac 	b.w	800de14 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800eebc:	2b01      	cmp	r3, #1
 800eebe:	d0f8      	beq.n	800eeb2 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800eec0:	2b02      	cmp	r3, #2
 800eec2:	d008      	beq.n	800eed6 <prvDeleteTCB+0x3a>
 800eec4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eec8:	f383 8811 	msr	BASEPRI, r3
 800eecc:	f3bf 8f6f 	isb	sy
 800eed0:	f3bf 8f4f 	dsb	sy
 800eed4:	e7fe      	b.n	800eed4 <prvDeleteTCB+0x38>
	}
 800eed6:	bd10      	pop	{r4, pc}

0800eed8 <prvIdleTask>:
{
 800eed8:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eeda:	4c14      	ldr	r4, [pc, #80]	@ (800ef2c <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eedc:	4f14      	ldr	r7, [pc, #80]	@ (800ef30 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800eede:	4d15      	ldr	r5, [pc, #84]	@ (800ef34 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800eee0:	6823      	ldr	r3, [r4, #0]
 800eee2:	b983      	cbnz	r3, 800ef06 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800eee4:	4b14      	ldr	r3, [pc, #80]	@ (800ef38 <prvIdleTask+0x60>)
 800eee6:	681b      	ldr	r3, [r3, #0]
 800eee8:	2b01      	cmp	r3, #1
 800eeea:	d909      	bls.n	800ef00 <prvIdleTask+0x28>
				taskYIELD();
 800eeec:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800eef0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800eef4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800eef8:	f3bf 8f4f 	dsb	sy
 800eefc:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800ef00:	f7f1 fd7a 	bl	80009f8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800ef04:	e7eb      	b.n	800eede <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800ef06:	f7ff f865 	bl	800dfd4 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef0a:	68fb      	ldr	r3, [r7, #12]
 800ef0c:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ef0e:	1d30      	adds	r0, r6, #4
 800ef10:	f7fe ffee 	bl	800def0 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800ef14:	682b      	ldr	r3, [r5, #0]
 800ef16:	3b01      	subs	r3, #1
 800ef18:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800ef1a:	6823      	ldr	r3, [r4, #0]
 800ef1c:	3b01      	subs	r3, #1
 800ef1e:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ef20:	f7ff f878 	bl	800e014 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800ef24:	4630      	mov	r0, r6
 800ef26:	f7ff ffb9 	bl	800ee9c <prvDeleteTCB>
 800ef2a:	e7d9      	b.n	800eee0 <prvIdleTask+0x8>
 800ef2c:	24025828 	.word	0x24025828
 800ef30:	2402582c 	.word	0x2402582c
 800ef34:	24025810 	.word	0x24025810
 800ef38:	24025884 	.word	0x24025884

0800ef3c <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ef3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef40:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ef42:	4607      	mov	r7, r0
 800ef44:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef46:	21a5      	movs	r1, #165	@ 0xa5
 800ef48:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ef4a:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef4c:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800ef4e:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800ef52:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800ef54:	f017 feaa 	bl	8026cac <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800ef58:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800ef5a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800ef5c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800ef60:	2d00      	cmp	r5, #0
 800ef62:	d043      	beq.n	800efec <prvInitialiseNewTask.constprop.0+0xb0>
 800ef64:	1e6b      	subs	r3, r5, #1
 800ef66:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800ef6a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ef6c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800ef70:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800ef74:	b109      	cbz	r1, 800ef7a <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ef76:	42ab      	cmp	r3, r5
 800ef78:	d1f8      	bne.n	800ef6c <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef80:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800ef82:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef86:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef88:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800ef8a:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ef8e:	bf28      	it	cs
 800ef90:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800ef92:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800ef94:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ef96:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ef9a:	f7fe ff84 	bl	800dea6 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ef9e:	f104 0018 	add.w	r0, r4, #24
 800efa2:	f7fe ff80 	bl	800dea6 <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efa6:	224c      	movs	r2, #76	@ 0x4c
 800efa8:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800efaa:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efae:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800efb2:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800efb4:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800efb6:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800efb8:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800efbc:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efc0:	f017 fe74 	bl	8026cac <memset>
 800efc4:	4b0b      	ldr	r3, [pc, #44]	@ (800eff4 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efc6:	4639      	mov	r1, r7
 800efc8:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efca:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800efce:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800efd0:	33d0      	adds	r3, #208	@ 0xd0
 800efd2:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efd4:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800efd6:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800efd8:	f7fe ffd8 	bl	800df8c <pxPortInitialiseStack>
 800efdc:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800efde:	f1b9 0f00 	cmp.w	r9, #0
 800efe2:	d001      	beq.n	800efe8 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800efe4:	f8c9 4000 	str.w	r4, [r9]
}
 800efe8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800efec:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800eff0:	e7c6      	b.n	800ef80 <prvInitialiseNewTask.constprop.0+0x44>
 800eff2:	bf00      	nop
 800eff4:	24026864 	.word	0x24026864

0800eff8 <xTaskCreateStatic>:
	{
 800eff8:	b570      	push	{r4, r5, r6, lr}
 800effa:	b086      	sub	sp, #24
 800effc:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800f000:	b945      	cbnz	r5, 800f014 <xTaskCreateStatic+0x1c>
 800f002:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f006:	f383 8811 	msr	BASEPRI, r3
 800f00a:	f3bf 8f6f 	isb	sy
 800f00e:	f3bf 8f4f 	dsb	sy
 800f012:	e7fe      	b.n	800f012 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800f014:	b944      	cbnz	r4, 800f028 <xTaskCreateStatic+0x30>
 800f016:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f01a:	f383 8811 	msr	BASEPRI, r3
 800f01e:	f3bf 8f6f 	isb	sy
 800f022:	f3bf 8f4f 	dsb	sy
 800f026:	e7fe      	b.n	800f026 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800f028:	26ac      	movs	r6, #172	@ 0xac
 800f02a:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800f02c:	9e05      	ldr	r6, [sp, #20]
 800f02e:	2eac      	cmp	r6, #172	@ 0xac
 800f030:	d008      	beq.n	800f044 <xTaskCreateStatic+0x4c>
 800f032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f036:	f383 8811 	msr	BASEPRI, r3
 800f03a:	f3bf 8f6f 	isb	sy
 800f03e:	f3bf 8f4f 	dsb	sy
 800f042:	e7fe      	b.n	800f042 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800f044:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f046:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800f048:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800f04a:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800f04e:	ad04      	add	r5, sp, #16
 800f050:	9402      	str	r4, [sp, #8]
 800f052:	9501      	str	r5, [sp, #4]
 800f054:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800f056:	9500      	str	r5, [sp, #0]
 800f058:	f7ff ff70 	bl	800ef3c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f05c:	4620      	mov	r0, r4
 800f05e:	f7ff fe55 	bl	800ed0c <prvAddNewTaskToReadyList>
	}
 800f062:	9804      	ldr	r0, [sp, #16]
 800f064:	b006      	add	sp, #24
 800f066:	bd70      	pop	{r4, r5, r6, pc}

0800f068 <xTaskCreate>:
	{
 800f068:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f06c:	4607      	mov	r7, r0
 800f06e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f070:	0090      	lsls	r0, r2, #2
	{
 800f072:	4688      	mov	r8, r1
 800f074:	4616      	mov	r6, r2
 800f076:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800f078:	f7fe fe34 	bl	800dce4 <pvPortMalloc>
			if( pxStack != NULL )
 800f07c:	4605      	mov	r5, r0
 800f07e:	b920      	cbnz	r0, 800f08a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800f080:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800f084:	b005      	add	sp, #20
 800f086:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800f08a:	20ac      	movs	r0, #172	@ 0xac
 800f08c:	f7fe fe2a 	bl	800dce4 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800f090:	4604      	mov	r4, r0
 800f092:	b198      	cbz	r0, 800f0bc <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f094:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800f096:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f098:	4632      	mov	r2, r6
 800f09a:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800f09c:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800f0a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800f0a2:	9002      	str	r0, [sp, #8]
 800f0a4:	4638      	mov	r0, r7
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800f0aa:	9300      	str	r3, [sp, #0]
 800f0ac:	464b      	mov	r3, r9
 800f0ae:	f7ff ff45 	bl	800ef3c <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800f0b2:	4620      	mov	r0, r4
 800f0b4:	f7ff fe2a 	bl	800ed0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800f0b8:	2001      	movs	r0, #1
 800f0ba:	e7e3      	b.n	800f084 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800f0bc:	4628      	mov	r0, r5
 800f0be:	f7fe fea9 	bl	800de14 <vPortFree>
		if( pxNewTCB != NULL )
 800f0c2:	e7dd      	b.n	800f080 <xTaskCreate+0x18>

0800f0c4 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800f0c4:	4a02      	ldr	r2, [pc, #8]	@ (800f0d0 <vTaskSuspendAll+0xc>)
 800f0c6:	6813      	ldr	r3, [r2, #0]
 800f0c8:	3301      	adds	r3, #1
 800f0ca:	6013      	str	r3, [r2, #0]
}
 800f0cc:	4770      	bx	lr
 800f0ce:	bf00      	nop
 800f0d0:	240257ec 	.word	0x240257ec

0800f0d4 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800f0d4:	4b01      	ldr	r3, [pc, #4]	@ (800f0dc <xTaskGetTickCount+0x8>)
 800f0d6:	6818      	ldr	r0, [r3, #0]
}
 800f0d8:	4770      	bx	lr
 800f0da:	bf00      	nop
 800f0dc:	2402580c 	.word	0x2402580c

0800f0e0 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0e0:	4b3f      	ldr	r3, [pc, #252]	@ (800f1e0 <xTaskIncrementTick+0x100>)
 800f0e2:	681b      	ldr	r3, [r3, #0]
{
 800f0e4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f0e8:	2b00      	cmp	r3, #0
 800f0ea:	d172      	bne.n	800f1d2 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800f0ec:	4b3d      	ldr	r3, [pc, #244]	@ (800f1e4 <xTaskIncrementTick+0x104>)
 800f0ee:	681c      	ldr	r4, [r3, #0]
 800f0f0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800f0f2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800f0f4:	b9bc      	cbnz	r4, 800f126 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800f0f6:	4b3c      	ldr	r3, [pc, #240]	@ (800f1e8 <xTaskIncrementTick+0x108>)
 800f0f8:	681a      	ldr	r2, [r3, #0]
 800f0fa:	6812      	ldr	r2, [r2, #0]
 800f0fc:	b142      	cbz	r2, 800f110 <xTaskIncrementTick+0x30>
 800f0fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f102:	f383 8811 	msr	BASEPRI, r3
 800f106:	f3bf 8f6f 	isb	sy
 800f10a:	f3bf 8f4f 	dsb	sy
 800f10e:	e7fe      	b.n	800f10e <xTaskIncrementTick+0x2e>
 800f110:	4a36      	ldr	r2, [pc, #216]	@ (800f1ec <xTaskIncrementTick+0x10c>)
 800f112:	6819      	ldr	r1, [r3, #0]
 800f114:	6810      	ldr	r0, [r2, #0]
 800f116:	6018      	str	r0, [r3, #0]
 800f118:	6011      	str	r1, [r2, #0]
 800f11a:	4a35      	ldr	r2, [pc, #212]	@ (800f1f0 <xTaskIncrementTick+0x110>)
 800f11c:	6813      	ldr	r3, [r2, #0]
 800f11e:	3301      	adds	r3, #1
 800f120:	6013      	str	r3, [r2, #0]
 800f122:	f7ff fea9 	bl	800ee78 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f126:	4d33      	ldr	r5, [pc, #204]	@ (800f1f4 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800f128:	f04f 0b00 	mov.w	fp, #0
 800f12c:	4e32      	ldr	r6, [pc, #200]	@ (800f1f8 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800f12e:	682b      	ldr	r3, [r5, #0]
 800f130:	4f32      	ldr	r7, [pc, #200]	@ (800f1fc <xTaskIncrementTick+0x11c>)
 800f132:	429c      	cmp	r4, r3
 800f134:	d212      	bcs.n	800f15c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800f136:	683a      	ldr	r2, [r7, #0]
 800f138:	2114      	movs	r1, #20
 800f13a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f13c:	434a      	muls	r2, r1
 800f13e:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800f140:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800f142:	4a2f      	ldr	r2, [pc, #188]	@ (800f200 <xTaskIncrementTick+0x120>)
 800f144:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800f146:	bf28      	it	cs
 800f148:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800f14c:	2a00      	cmp	r2, #0
 800f14e:	bf18      	it	ne
 800f150:	f04f 0b01 	movne.w	fp, #1
}
 800f154:	4658      	mov	r0, fp
 800f156:	b003      	add	sp, #12
 800f158:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f15c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800f1e8 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800f160:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800f208 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800f164:	f8d9 2000 	ldr.w	r2, [r9]
 800f168:	6812      	ldr	r2, [r2, #0]
 800f16a:	b91a      	cbnz	r2, 800f174 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f16c:	f04f 32ff 	mov.w	r2, #4294967295
 800f170:	602a      	str	r2, [r5, #0]
					break;
 800f172:	e7e0      	b.n	800f136 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f174:	f8d9 2000 	ldr.w	r2, [r9]
 800f178:	68d2      	ldr	r2, [r2, #12]
 800f17a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800f17e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800f182:	428c      	cmp	r4, r1
 800f184:	d201      	bcs.n	800f18a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800f186:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800f188:	e7d5      	b.n	800f136 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f18a:	f108 0304 	add.w	r3, r8, #4
 800f18e:	4618      	mov	r0, r3
 800f190:	9301      	str	r3, [sp, #4]
 800f192:	f7fe fead 	bl	800def0 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800f196:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800f19a:	b119      	cbz	r1, 800f1a4 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f19c:	f108 0018 	add.w	r0, r8, #24
 800f1a0:	f7fe fea6 	bl	800def0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f1a4:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800f1a8:	f8da 1000 	ldr.w	r1, [sl]
 800f1ac:	4288      	cmp	r0, r1
 800f1ae:	d901      	bls.n	800f1b4 <xTaskIncrementTick+0xd4>
 800f1b0:	f8ca 0000 	str.w	r0, [sl]
 800f1b4:	2314      	movs	r3, #20
 800f1b6:	9901      	ldr	r1, [sp, #4]
 800f1b8:	fb03 6000 	mla	r0, r3, r0, r6
 800f1bc:	f7fe fe76 	bl	800deac <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f1c0:	6838      	ldr	r0, [r7, #0]
 800f1c2:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800f1c6:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800f1c8:	4291      	cmp	r1, r2
 800f1ca:	bf28      	it	cs
 800f1cc:	f04f 0b01 	movcs.w	fp, #1
 800f1d0:	e7c8      	b.n	800f164 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800f1d2:	4a0c      	ldr	r2, [pc, #48]	@ (800f204 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800f1d4:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800f1d8:	6813      	ldr	r3, [r2, #0]
 800f1da:	3301      	adds	r3, #1
 800f1dc:	6013      	str	r3, [r2, #0]
 800f1de:	e7b9      	b.n	800f154 <xTaskIncrementTick+0x74>
 800f1e0:	240257ec 	.word	0x240257ec
 800f1e4:	2402580c 	.word	0x2402580c
 800f1e8:	24025858 	.word	0x24025858
 800f1ec:	24025854 	.word	0x24025854
 800f1f0:	240257f8 	.word	0x240257f8
 800f1f4:	240257f0 	.word	0x240257f0
 800f1f8:	24025884 	.word	0x24025884
 800f1fc:	24025ce4 	.word	0x24025ce4
 800f200:	240257fc 	.word	0x240257fc
 800f204:	24025800 	.word	0x24025800
 800f208:	24025808 	.word	0x24025808

0800f20c <xTaskResumeAll>:
{
 800f20c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800f210:	4c30      	ldr	r4, [pc, #192]	@ (800f2d4 <xTaskResumeAll+0xc8>)
 800f212:	6823      	ldr	r3, [r4, #0]
 800f214:	b943      	cbnz	r3, 800f228 <xTaskResumeAll+0x1c>
 800f216:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f21a:	f383 8811 	msr	BASEPRI, r3
 800f21e:	f3bf 8f6f 	isb	sy
 800f222:	f3bf 8f4f 	dsb	sy
 800f226:	e7fe      	b.n	800f226 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800f228:	f7fe fed4 	bl	800dfd4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800f22c:	6823      	ldr	r3, [r4, #0]
 800f22e:	3b01      	subs	r3, #1
 800f230:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f232:	6824      	ldr	r4, [r4, #0]
 800f234:	b12c      	cbz	r4, 800f242 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800f236:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f238:	f7fe feec 	bl	800e014 <vPortExitCritical>
}
 800f23c:	4620      	mov	r0, r4
 800f23e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800f242:	4b25      	ldr	r3, [pc, #148]	@ (800f2d8 <xTaskResumeAll+0xcc>)
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	2b00      	cmp	r3, #0
 800f248:	d0f5      	beq.n	800f236 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f24a:	4d24      	ldr	r5, [pc, #144]	@ (800f2dc <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800f24c:	4e24      	ldr	r6, [pc, #144]	@ (800f2e0 <xTaskResumeAll+0xd4>)
 800f24e:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800f2f0 <xTaskResumeAll+0xe4>
 800f252:	e01d      	b.n	800f290 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f254:	68eb      	ldr	r3, [r5, #12]
 800f256:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f258:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800f25a:	f104 0018 	add.w	r0, r4, #24
 800f25e:	f7fe fe47 	bl	800def0 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800f262:	4638      	mov	r0, r7
 800f264:	f7fe fe44 	bl	800def0 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800f268:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f26a:	6832      	ldr	r2, [r6, #0]
 800f26c:	4293      	cmp	r3, r2
 800f26e:	d900      	bls.n	800f272 <xTaskResumeAll+0x66>
 800f270:	6033      	str	r3, [r6, #0]
 800f272:	2014      	movs	r0, #20
 800f274:	4639      	mov	r1, r7
 800f276:	fb00 8003 	mla	r0, r0, r3, r8
 800f27a:	f7fe fe17 	bl	800deac <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800f27e:	4b19      	ldr	r3, [pc, #100]	@ (800f2e4 <xTaskResumeAll+0xd8>)
 800f280:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f286:	429a      	cmp	r2, r3
 800f288:	d302      	bcc.n	800f290 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800f28a:	4b17      	ldr	r3, [pc, #92]	@ (800f2e8 <xTaskResumeAll+0xdc>)
 800f28c:	2201      	movs	r2, #1
 800f28e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800f290:	682b      	ldr	r3, [r5, #0]
 800f292:	2b00      	cmp	r3, #0
 800f294:	d1de      	bne.n	800f254 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800f296:	b10c      	cbz	r4, 800f29c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800f298:	f7ff fdee 	bl	800ee78 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800f29c:	4d13      	ldr	r5, [pc, #76]	@ (800f2ec <xTaskResumeAll+0xe0>)
 800f29e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800f2a0:	b144      	cbz	r4, 800f2b4 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800f2a2:	4e11      	ldr	r6, [pc, #68]	@ (800f2e8 <xTaskResumeAll+0xdc>)
 800f2a4:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800f2a6:	f7ff ff1b 	bl	800f0e0 <xTaskIncrementTick>
 800f2aa:	b100      	cbz	r0, 800f2ae <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800f2ac:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800f2ae:	3c01      	subs	r4, #1
 800f2b0:	d1f9      	bne.n	800f2a6 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800f2b2:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800f2b4:	4b0c      	ldr	r3, [pc, #48]	@ (800f2e8 <xTaskResumeAll+0xdc>)
 800f2b6:	681b      	ldr	r3, [r3, #0]
 800f2b8:	2b00      	cmp	r3, #0
 800f2ba:	d0bc      	beq.n	800f236 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800f2bc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800f2c0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800f2c4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800f2c8:	f3bf 8f4f 	dsb	sy
 800f2cc:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800f2d0:	2401      	movs	r4, #1
 800f2d2:	e7b1      	b.n	800f238 <xTaskResumeAll+0x2c>
 800f2d4:	240257ec 	.word	0x240257ec
 800f2d8:	24025810 	.word	0x24025810
 800f2dc:	24025840 	.word	0x24025840
 800f2e0:	24025808 	.word	0x24025808
 800f2e4:	24025ce4 	.word	0x24025ce4
 800f2e8:	240257fc 	.word	0x240257fc
 800f2ec:	24025800 	.word	0x24025800
 800f2f0:	24025884 	.word	0x24025884

0800f2f4 <vTaskSetApplicationTaskTag>:
	{
 800f2f4:	b538      	push	{r3, r4, r5, lr}
 800f2f6:	460d      	mov	r5, r1
		if( xTask == NULL )
 800f2f8:	4604      	mov	r4, r0
 800f2fa:	b908      	cbnz	r0, 800f300 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800f2fc:	4b04      	ldr	r3, [pc, #16]	@ (800f310 <vTaskSetApplicationTaskTag+0x1c>)
 800f2fe:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800f300:	f7fe fe68 	bl	800dfd4 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800f304:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800f306:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800f30a:	f7fe be83 	b.w	800e014 <vPortExitCritical>
 800f30e:	bf00      	nop
 800f310:	24025ce4 	.word	0x24025ce4

0800f314 <xTaskCallApplicationTaskHook>:
	{
 800f314:	4603      	mov	r3, r0
 800f316:	4608      	mov	r0, r1
		if( xTask == NULL )
 800f318:	b90b      	cbnz	r3, 800f31e <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800f31a:	4b03      	ldr	r3, [pc, #12]	@ (800f328 <xTaskCallApplicationTaskHook+0x14>)
 800f31c:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800f31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f320:	b103      	cbz	r3, 800f324 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800f322:	4718      	bx	r3
	}
 800f324:	4618      	mov	r0, r3
 800f326:	4770      	bx	lr
 800f328:	24025ce4 	.word	0x24025ce4

0800f32c <vTaskStartScheduler>:
{
 800f32c:	b510      	push	{r4, lr}
 800f32e:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800f330:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f332:	aa07      	add	r2, sp, #28
 800f334:	a906      	add	r1, sp, #24
 800f336:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800f338:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800f33c:	f7fe fc94 	bl	800dc68 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800f340:	9b05      	ldr	r3, [sp, #20]
 800f342:	9a07      	ldr	r2, [sp, #28]
 800f344:	9302      	str	r3, [sp, #8]
 800f346:	9b06      	ldr	r3, [sp, #24]
 800f348:	491b      	ldr	r1, [pc, #108]	@ (800f3b8 <vTaskStartScheduler+0x8c>)
 800f34a:	481c      	ldr	r0, [pc, #112]	@ (800f3bc <vTaskStartScheduler+0x90>)
 800f34c:	e9cd 4300 	strd	r4, r3, [sp]
 800f350:	4623      	mov	r3, r4
 800f352:	f7ff fe51 	bl	800eff8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800f356:	b360      	cbz	r0, 800f3b2 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800f358:	f000 fa8e 	bl	800f878 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800f35c:	2801      	cmp	r0, #1
 800f35e:	d11d      	bne.n	800f39c <vTaskStartScheduler+0x70>
 800f360:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f364:	f383 8811 	msr	BASEPRI, r3
 800f368:	f3bf 8f6f 	isb	sy
 800f36c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f370:	4a13      	ldr	r2, [pc, #76]	@ (800f3c0 <vTaskStartScheduler+0x94>)
 800f372:	4914      	ldr	r1, [pc, #80]	@ (800f3c4 <vTaskStartScheduler+0x98>)
 800f374:	6813      	ldr	r3, [r2, #0]
 800f376:	3358      	adds	r3, #88	@ 0x58
 800f378:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800f37a:	f04f 31ff 	mov.w	r1, #4294967295
 800f37e:	4b12      	ldr	r3, [pc, #72]	@ (800f3c8 <vTaskStartScheduler+0x9c>)
 800f380:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800f382:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800f384:	4b11      	ldr	r3, [pc, #68]	@ (800f3cc <vTaskStartScheduler+0xa0>)
 800f386:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800f388:	4b11      	ldr	r3, [pc, #68]	@ (800f3d0 <vTaskStartScheduler+0xa4>)
 800f38a:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800f38c:	6810      	ldr	r0, [r2, #0]
 800f38e:	f7ff ffc1 	bl	800f314 <xTaskCallApplicationTaskHook>
}
 800f392:	b008      	add	sp, #32
 800f394:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800f398:	f7fe beac 	b.w	800e0f4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800f39c:	3001      	adds	r0, #1
 800f39e:	d108      	bne.n	800f3b2 <vTaskStartScheduler+0x86>
 800f3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f3a4:	f383 8811 	msr	BASEPRI, r3
 800f3a8:	f3bf 8f6f 	isb	sy
 800f3ac:	f3bf 8f4f 	dsb	sy
 800f3b0:	e7fe      	b.n	800f3b0 <vTaskStartScheduler+0x84>
}
 800f3b2:	b008      	add	sp, #32
 800f3b4:	bd10      	pop	{r4, pc}
 800f3b6:	bf00      	nop
 800f3b8:	0802ab5c 	.word	0x0802ab5c
 800f3bc:	0800eed9 	.word	0x0800eed9
 800f3c0:	24025ce4 	.word	0x24025ce4
 800f3c4:	24000118 	.word	0x24000118
 800f3c8:	240257f0 	.word	0x240257f0
 800f3cc:	24025804 	.word	0x24025804
 800f3d0:	2402580c 	.word	0x2402580c

0800f3d4 <vTaskSwitchContext>:
{
 800f3d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800f3d6:	4b1d      	ldr	r3, [pc, #116]	@ (800f44c <vTaskSwitchContext+0x78>)
 800f3d8:	681a      	ldr	r2, [r3, #0]
 800f3da:	4b1d      	ldr	r3, [pc, #116]	@ (800f450 <vTaskSwitchContext+0x7c>)
 800f3dc:	b112      	cbz	r2, 800f3e4 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800f3de:	2201      	movs	r2, #1
 800f3e0:	601a      	str	r2, [r3, #0]
}
 800f3e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800f3e4:	4c1b      	ldr	r4, [pc, #108]	@ (800f454 <vTaskSwitchContext+0x80>)
 800f3e6:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3e8:	4e1b      	ldr	r6, [pc, #108]	@ (800f458 <vTaskSwitchContext+0x84>)
 800f3ea:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800f3ec:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800f3ee:	6820      	ldr	r0, [r4, #0]
 800f3f0:	f7ff ff90 	bl	800f314 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f3f4:	6832      	ldr	r2, [r6, #0]
 800f3f6:	4919      	ldr	r1, [pc, #100]	@ (800f45c <vTaskSwitchContext+0x88>)
 800f3f8:	fb07 f302 	mul.w	r3, r7, r2
 800f3fc:	58cd      	ldr	r5, [r1, r3]
 800f3fe:	18c8      	adds	r0, r1, r3
 800f400:	b1c5      	cbz	r5, 800f434 <vTaskSwitchContext+0x60>
 800f402:	6845      	ldr	r5, [r0, #4]
 800f404:	3308      	adds	r3, #8
 800f406:	686d      	ldr	r5, [r5, #4]
 800f408:	440b      	add	r3, r1
 800f40a:	429d      	cmp	r5, r3
 800f40c:	6045      	str	r5, [r0, #4]
 800f40e:	bf04      	itt	eq
 800f410:	686b      	ldreq	r3, [r5, #4]
 800f412:	6043      	streq	r3, [r0, #4]
 800f414:	2314      	movs	r3, #20
 800f416:	fb03 1102 	mla	r1, r3, r2, r1
 800f41a:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800f41c:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f41e:	68db      	ldr	r3, [r3, #12]
 800f420:	6023      	str	r3, [r4, #0]
 800f422:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800f424:	6820      	ldr	r0, [r4, #0]
 800f426:	f7ff ff75 	bl	800f314 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800f42a:	6823      	ldr	r3, [r4, #0]
 800f42c:	4a0c      	ldr	r2, [pc, #48]	@ (800f460 <vTaskSwitchContext+0x8c>)
 800f42e:	3358      	adds	r3, #88	@ 0x58
 800f430:	6013      	str	r3, [r2, #0]
}
 800f432:	e7d6      	b.n	800f3e2 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f434:	b942      	cbnz	r2, 800f448 <vTaskSwitchContext+0x74>
 800f436:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f43a:	f383 8811 	msr	BASEPRI, r3
 800f43e:	f3bf 8f6f 	isb	sy
 800f442:	f3bf 8f4f 	dsb	sy
 800f446:	e7fe      	b.n	800f446 <vTaskSwitchContext+0x72>
 800f448:	3a01      	subs	r2, #1
 800f44a:	e7d5      	b.n	800f3f8 <vTaskSwitchContext+0x24>
 800f44c:	240257ec 	.word	0x240257ec
 800f450:	240257fc 	.word	0x240257fc
 800f454:	24025ce4 	.word	0x24025ce4
 800f458:	24025808 	.word	0x24025808
 800f45c:	24025884 	.word	0x24025884
 800f460:	24000118 	.word	0x24000118

0800f464 <vTaskPlaceOnEventList>:
{
 800f464:	b510      	push	{r4, lr}
 800f466:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800f468:	b940      	cbnz	r0, 800f47c <vTaskPlaceOnEventList+0x18>
 800f46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f46e:	f383 8811 	msr	BASEPRI, r3
 800f472:	f3bf 8f6f 	isb	sy
 800f476:	f3bf 8f4f 	dsb	sy
 800f47a:	e7fe      	b.n	800f47a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <vTaskPlaceOnEventList+0x30>)
 800f47e:	6819      	ldr	r1, [r3, #0]
 800f480:	3118      	adds	r1, #24
 800f482:	f7fe fd1e 	bl	800dec2 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f486:	4620      	mov	r0, r4
 800f488:	2101      	movs	r1, #1
}
 800f48a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800f48e:	f7ff bcbb 	b.w	800ee08 <prvAddCurrentTaskToDelayedList>
 800f492:	bf00      	nop
 800f494:	24025ce4 	.word	0x24025ce4

0800f498 <vTaskPlaceOnEventListRestricted>:
	{
 800f498:	b538      	push	{r3, r4, r5, lr}
 800f49a:	460d      	mov	r5, r1
 800f49c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800f49e:	b940      	cbnz	r0, 800f4b2 <vTaskPlaceOnEventListRestricted+0x1a>
 800f4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4a4:	f383 8811 	msr	BASEPRI, r3
 800f4a8:	f3bf 8f6f 	isb	sy
 800f4ac:	f3bf 8f4f 	dsb	sy
 800f4b0:	e7fe      	b.n	800f4b0 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800f4b2:	4b07      	ldr	r3, [pc, #28]	@ (800f4d0 <vTaskPlaceOnEventListRestricted+0x38>)
 800f4b4:	6819      	ldr	r1, [r3, #0]
 800f4b6:	3118      	adds	r1, #24
 800f4b8:	f7fe fcf8 	bl	800deac <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800f4bc:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f4be:	4621      	mov	r1, r4
 800f4c0:	bf0c      	ite	eq
 800f4c2:	4628      	moveq	r0, r5
 800f4c4:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800f4c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800f4cc:	f7ff bc9c 	b.w	800ee08 <prvAddCurrentTaskToDelayedList>
 800f4d0:	24025ce4 	.word	0x24025ce4

0800f4d4 <xTaskRemoveFromEventList>:
{
 800f4d4:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f4d6:	68c3      	ldr	r3, [r0, #12]
 800f4d8:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800f4da:	b944      	cbnz	r4, 800f4ee <xTaskRemoveFromEventList+0x1a>
 800f4dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f4e0:	f383 8811 	msr	BASEPRI, r3
 800f4e4:	f3bf 8f6f 	isb	sy
 800f4e8:	f3bf 8f4f 	dsb	sy
 800f4ec:	e7fe      	b.n	800f4ec <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800f4ee:	f104 0518 	add.w	r5, r4, #24
 800f4f2:	4628      	mov	r0, r5
 800f4f4:	f7fe fcfc 	bl	800def0 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f4f8:	4b11      	ldr	r3, [pc, #68]	@ (800f540 <xTaskRemoveFromEventList+0x6c>)
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	b9d3      	cbnz	r3, 800f534 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800f4fe:	1d25      	adds	r5, r4, #4
 800f500:	4628      	mov	r0, r5
 800f502:	f7fe fcf5 	bl	800def0 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800f506:	4a0f      	ldr	r2, [pc, #60]	@ (800f544 <xTaskRemoveFromEventList+0x70>)
 800f508:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f50a:	6811      	ldr	r1, [r2, #0]
 800f50c:	428b      	cmp	r3, r1
 800f50e:	d900      	bls.n	800f512 <xTaskRemoveFromEventList+0x3e>
 800f510:	6013      	str	r3, [r2, #0]
 800f512:	2014      	movs	r0, #20
 800f514:	4a0c      	ldr	r2, [pc, #48]	@ (800f548 <xTaskRemoveFromEventList+0x74>)
 800f516:	4629      	mov	r1, r5
 800f518:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f51c:	f7fe fcc6 	bl	800deac <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800f520:	4b0a      	ldr	r3, [pc, #40]	@ (800f54c <xTaskRemoveFromEventList+0x78>)
 800f522:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800f524:	681b      	ldr	r3, [r3, #0]
 800f526:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f528:	429a      	cmp	r2, r3
 800f52a:	d906      	bls.n	800f53a <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800f52c:	2001      	movs	r0, #1
 800f52e:	4b08      	ldr	r3, [pc, #32]	@ (800f550 <xTaskRemoveFromEventList+0x7c>)
 800f530:	6018      	str	r0, [r3, #0]
}
 800f532:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800f534:	4629      	mov	r1, r5
 800f536:	4807      	ldr	r0, [pc, #28]	@ (800f554 <xTaskRemoveFromEventList+0x80>)
 800f538:	e7f0      	b.n	800f51c <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800f53a:	2000      	movs	r0, #0
	return xReturn;
 800f53c:	e7f9      	b.n	800f532 <xTaskRemoveFromEventList+0x5e>
 800f53e:	bf00      	nop
 800f540:	240257ec 	.word	0x240257ec
 800f544:	24025808 	.word	0x24025808
 800f548:	24025884 	.word	0x24025884
 800f54c:	24025ce4 	.word	0x24025ce4
 800f550:	240257fc 	.word	0x240257fc
 800f554:	24025840 	.word	0x24025840

0800f558 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800f558:	4b03      	ldr	r3, [pc, #12]	@ (800f568 <vTaskInternalSetTimeOutState+0x10>)
 800f55a:	681b      	ldr	r3, [r3, #0]
 800f55c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800f55e:	4b03      	ldr	r3, [pc, #12]	@ (800f56c <vTaskInternalSetTimeOutState+0x14>)
 800f560:	681b      	ldr	r3, [r3, #0]
 800f562:	6043      	str	r3, [r0, #4]
}
 800f564:	4770      	bx	lr
 800f566:	bf00      	nop
 800f568:	240257f8 	.word	0x240257f8
 800f56c:	2402580c 	.word	0x2402580c

0800f570 <xTaskCheckForTimeOut>:
{
 800f570:	b570      	push	{r4, r5, r6, lr}
 800f572:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800f574:	4605      	mov	r5, r0
 800f576:	b940      	cbnz	r0, 800f58a <xTaskCheckForTimeOut+0x1a>
 800f578:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f57c:	f383 8811 	msr	BASEPRI, r3
 800f580:	f3bf 8f6f 	isb	sy
 800f584:	f3bf 8f4f 	dsb	sy
 800f588:	e7fe      	b.n	800f588 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800f58a:	b941      	cbnz	r1, 800f59e <xTaskCheckForTimeOut+0x2e>
 800f58c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f590:	f383 8811 	msr	BASEPRI, r3
 800f594:	f3bf 8f6f 	isb	sy
 800f598:	f3bf 8f4f 	dsb	sy
 800f59c:	e7fe      	b.n	800f59c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800f59e:	f7fe fd19 	bl	800dfd4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800f5a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f5e0 <xTaskCheckForTimeOut+0x70>)
 800f5a4:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800f5a6:	6823      	ldr	r3, [r4, #0]
 800f5a8:	1c5a      	adds	r2, r3, #1
 800f5aa:	d010      	beq.n	800f5ce <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5ac:	480d      	ldr	r0, [pc, #52]	@ (800f5e4 <xTaskCheckForTimeOut+0x74>)
 800f5ae:	682e      	ldr	r6, [r5, #0]
 800f5b0:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5b2:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800f5b4:	4286      	cmp	r6, r0
 800f5b6:	d001      	beq.n	800f5bc <xTaskCheckForTimeOut+0x4c>
 800f5b8:	428a      	cmp	r2, r1
 800f5ba:	d90f      	bls.n	800f5dc <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800f5bc:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800f5be:	4283      	cmp	r3, r0
 800f5c0:	d90a      	bls.n	800f5d8 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800f5c2:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5c4:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800f5c6:	4413      	add	r3, r2
 800f5c8:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800f5ca:	f7ff ffc5 	bl	800f558 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800f5ce:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800f5d0:	f7fe fd20 	bl	800e014 <vPortExitCritical>
}
 800f5d4:	4620      	mov	r0, r4
 800f5d6:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800f5d8:	2300      	movs	r3, #0
 800f5da:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800f5dc:	2401      	movs	r4, #1
 800f5de:	e7f7      	b.n	800f5d0 <xTaskCheckForTimeOut+0x60>
 800f5e0:	2402580c 	.word	0x2402580c
 800f5e4:	240257f8 	.word	0x240257f8

0800f5e8 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800f5e8:	4b01      	ldr	r3, [pc, #4]	@ (800f5f0 <vTaskMissedYield+0x8>)
 800f5ea:	2201      	movs	r2, #1
 800f5ec:	601a      	str	r2, [r3, #0]
}
 800f5ee:	4770      	bx	lr
 800f5f0:	240257fc 	.word	0x240257fc

0800f5f4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800f5f4:	4b01      	ldr	r3, [pc, #4]	@ (800f5fc <xTaskGetCurrentTaskHandle+0x8>)
 800f5f6:	6818      	ldr	r0, [r3, #0]
	}
 800f5f8:	4770      	bx	lr
 800f5fa:	bf00      	nop
 800f5fc:	24025ce4 	.word	0x24025ce4

0800f600 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800f600:	4b05      	ldr	r3, [pc, #20]	@ (800f618 <xTaskGetSchedulerState+0x18>)
 800f602:	681b      	ldr	r3, [r3, #0]
 800f604:	b133      	cbz	r3, 800f614 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800f606:	4b05      	ldr	r3, [pc, #20]	@ (800f61c <xTaskGetSchedulerState+0x1c>)
 800f608:	6818      	ldr	r0, [r3, #0]
 800f60a:	fab0 f080 	clz	r0, r0
 800f60e:	0940      	lsrs	r0, r0, #5
 800f610:	0040      	lsls	r0, r0, #1
 800f612:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800f614:	2001      	movs	r0, #1
	}
 800f616:	4770      	bx	lr
 800f618:	24025804 	.word	0x24025804
 800f61c:	240257ec 	.word	0x240257ec

0800f620 <xTaskPriorityInherit>:
	{
 800f620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800f622:	4604      	mov	r4, r0
 800f624:	b338      	cbz	r0, 800f676 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800f626:	4d1a      	ldr	r5, [pc, #104]	@ (800f690 <xTaskPriorityInherit+0x70>)
 800f628:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f62a:	682a      	ldr	r2, [r5, #0]
 800f62c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f62e:	4293      	cmp	r3, r2
 800f630:	d226      	bcs.n	800f680 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f632:	6982      	ldr	r2, [r0, #24]
 800f634:	2a00      	cmp	r2, #0
 800f636:	db04      	blt.n	800f642 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f638:	682a      	ldr	r2, [r5, #0]
 800f63a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800f63c:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800f640:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800f642:	2214      	movs	r2, #20
 800f644:	4e13      	ldr	r6, [pc, #76]	@ (800f694 <xTaskPriorityInherit+0x74>)
 800f646:	fb02 6303 	mla	r3, r2, r3, r6
 800f64a:	6962      	ldr	r2, [r4, #20]
 800f64c:	429a      	cmp	r2, r3
 800f64e:	d113      	bne.n	800f678 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f650:	1d27      	adds	r7, r4, #4
 800f652:	4638      	mov	r0, r7
 800f654:	f7fe fc4c 	bl	800def0 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f658:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f65a:	4a0f      	ldr	r2, [pc, #60]	@ (800f698 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f65c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f65e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f660:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800f662:	428b      	cmp	r3, r1
 800f664:	d900      	bls.n	800f668 <xTaskPriorityInherit+0x48>
 800f666:	6013      	str	r3, [r2, #0]
 800f668:	2014      	movs	r0, #20
 800f66a:	4639      	mov	r1, r7
 800f66c:	fb00 6003 	mla	r0, r0, r3, r6
 800f670:	f7fe fc1c 	bl	800deac <vListInsertEnd>
				xReturn = pdTRUE;
 800f674:	2001      	movs	r0, #1
	}
 800f676:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800f678:	682b      	ldr	r3, [r5, #0]
 800f67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f67c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800f67e:	e7f9      	b.n	800f674 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800f680:	682b      	ldr	r3, [r5, #0]
 800f682:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800f684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f686:	4298      	cmp	r0, r3
 800f688:	bf2c      	ite	cs
 800f68a:	2000      	movcs	r0, #0
 800f68c:	2001      	movcc	r0, #1
 800f68e:	e7f2      	b.n	800f676 <xTaskPriorityInherit+0x56>
 800f690:	24025ce4 	.word	0x24025ce4
 800f694:	24025884 	.word	0x24025884
 800f698:	24025808 	.word	0x24025808

0800f69c <xTaskPriorityDisinherit>:
	{
 800f69c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800f69e:	b908      	cbnz	r0, 800f6a4 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800f6a0:	2000      	movs	r0, #0
	}
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800f6a4:	4b1b      	ldr	r3, [pc, #108]	@ (800f714 <xTaskPriorityDisinherit+0x78>)
 800f6a6:	681c      	ldr	r4, [r3, #0]
 800f6a8:	4284      	cmp	r4, r0
 800f6aa:	d008      	beq.n	800f6be <xTaskPriorityDisinherit+0x22>
 800f6ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6b0:	f383 8811 	msr	BASEPRI, r3
 800f6b4:	f3bf 8f6f 	isb	sy
 800f6b8:	f3bf 8f4f 	dsb	sy
 800f6bc:	e7fe      	b.n	800f6bc <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800f6be:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800f6c0:	b943      	cbnz	r3, 800f6d4 <xTaskPriorityDisinherit+0x38>
 800f6c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f6c6:	f383 8811 	msr	BASEPRI, r3
 800f6ca:	f3bf 8f6f 	isb	sy
 800f6ce:	f3bf 8f4f 	dsb	sy
 800f6d2:	e7fe      	b.n	800f6d2 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6d4:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800f6d6:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6d8:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800f6da:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800f6dc:	4291      	cmp	r1, r2
 800f6de:	d0df      	beq.n	800f6a0 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800f6e0:	2b00      	cmp	r3, #0
 800f6e2:	d1dd      	bne.n	800f6a0 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f6e4:	1d25      	adds	r5, r4, #4
 800f6e6:	4628      	mov	r0, r5
 800f6e8:	f7fe fc02 	bl	800def0 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6ec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6ee:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800f6f2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f6f4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800f6f6:	4a08      	ldr	r2, [pc, #32]	@ (800f718 <xTaskPriorityDisinherit+0x7c>)
 800f6f8:	6811      	ldr	r1, [r2, #0]
 800f6fa:	428b      	cmp	r3, r1
 800f6fc:	d900      	bls.n	800f700 <xTaskPriorityDisinherit+0x64>
 800f6fe:	6013      	str	r3, [r2, #0]
 800f700:	4a06      	ldr	r2, [pc, #24]	@ (800f71c <xTaskPriorityDisinherit+0x80>)
 800f702:	2014      	movs	r0, #20
 800f704:	4629      	mov	r1, r5
 800f706:	fb00 2003 	mla	r0, r0, r3, r2
 800f70a:	f7fe fbcf 	bl	800deac <vListInsertEnd>
					xReturn = pdTRUE;
 800f70e:	2001      	movs	r0, #1
		return xReturn;
 800f710:	e7c7      	b.n	800f6a2 <xTaskPriorityDisinherit+0x6>
 800f712:	bf00      	nop
 800f714:	24025ce4 	.word	0x24025ce4
 800f718:	24025808 	.word	0x24025808
 800f71c:	24025884 	.word	0x24025884

0800f720 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800f720:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800f722:	4604      	mov	r4, r0
 800f724:	2800      	cmp	r0, #0
 800f726:	d042      	beq.n	800f7ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800f728:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800f72a:	b942      	cbnz	r2, 800f73e <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800f72c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f730:	f383 8811 	msr	BASEPRI, r3
 800f734:	f3bf 8f6f 	isb	sy
 800f738:	f3bf 8f4f 	dsb	sy
 800f73c:	e7fe      	b.n	800f73c <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800f73e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800f740:	4299      	cmp	r1, r3
 800f742:	bf38      	it	cc
 800f744:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800f746:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800f748:	428b      	cmp	r3, r1
 800f74a:	d030      	beq.n	800f7ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800f74c:	2a01      	cmp	r2, #1
 800f74e:	d12e      	bne.n	800f7ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800f750:	4a17      	ldr	r2, [pc, #92]	@ (800f7b0 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800f752:	6812      	ldr	r2, [r2, #0]
 800f754:	4282      	cmp	r2, r0
 800f756:	d108      	bne.n	800f76a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800f758:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f75c:	f383 8811 	msr	BASEPRI, r3
 800f760:	f3bf 8f6f 	isb	sy
 800f764:	f3bf 8f4f 	dsb	sy
 800f768:	e7fe      	b.n	800f768 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f76a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f76c:	4d11      	ldr	r5, [pc, #68]	@ (800f7b4 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800f76e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f770:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800f774:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f776:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f77a:	bfa8      	it	ge
 800f77c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f780:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f782:	bfa8      	it	ge
 800f784:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800f786:	429a      	cmp	r2, r3
 800f788:	d111      	bne.n	800f7ae <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800f78a:	1d06      	adds	r6, r0, #4
 800f78c:	4630      	mov	r0, r6
 800f78e:	f7fe fbaf 	bl	800def0 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800f792:	4a09      	ldr	r2, [pc, #36]	@ (800f7b8 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800f794:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800f796:	6811      	ldr	r1, [r2, #0]
 800f798:	428b      	cmp	r3, r1
 800f79a:	d900      	bls.n	800f79e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800f79c:	6013      	str	r3, [r2, #0]
 800f79e:	2014      	movs	r0, #20
 800f7a0:	4631      	mov	r1, r6
 800f7a2:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800f7a6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800f7aa:	f7fe bb7f 	b.w	800deac <vListInsertEnd>
	}
 800f7ae:	bd70      	pop	{r4, r5, r6, pc}
 800f7b0:	24025ce4 	.word	0x24025ce4
 800f7b4:	24025884 	.word	0x24025884
 800f7b8:	24025808 	.word	0x24025808

0800f7bc <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800f7bc:	4b04      	ldr	r3, [pc, #16]	@ (800f7d0 <pvTaskIncrementMutexHeldCount+0x14>)
 800f7be:	681a      	ldr	r2, [r3, #0]
 800f7c0:	b11a      	cbz	r2, 800f7ca <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800f7c2:	6819      	ldr	r1, [r3, #0]
 800f7c4:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800f7c6:	3201      	adds	r2, #1
 800f7c8:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800f7ca:	6818      	ldr	r0, [r3, #0]
	}
 800f7cc:	4770      	bx	lr
 800f7ce:	bf00      	nop
 800f7d0:	24025ce4 	.word	0x24025ce4

0800f7d4 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800f7d4:	4291      	cmp	r1, r2
{
 800f7d6:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800f7d8:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f7da:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800f7dc:	d80a      	bhi.n	800f7f4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f7de:	1ad2      	subs	r2, r2, r3
 800f7e0:	6983      	ldr	r3, [r0, #24]
 800f7e2:	429a      	cmp	r2, r3
 800f7e4:	d20d      	bcs.n	800f802 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800f7e6:	1d01      	adds	r1, r0, #4
 800f7e8:	4b07      	ldr	r3, [pc, #28]	@ (800f808 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7ea:	6818      	ldr	r0, [r3, #0]
 800f7ec:	f7fe fb69 	bl	800dec2 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800f7f0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800f7f2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800f7f4:	429a      	cmp	r2, r3
 800f7f6:	d201      	bcs.n	800f7fc <prvInsertTimerInActiveList+0x28>
 800f7f8:	4299      	cmp	r1, r3
 800f7fa:	d202      	bcs.n	800f802 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f7fc:	1d01      	adds	r1, r0, #4
 800f7fe:	4b03      	ldr	r3, [pc, #12]	@ (800f80c <prvInsertTimerInActiveList+0x38>)
 800f800:	e7f3      	b.n	800f7ea <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800f802:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800f804:	e7f5      	b.n	800f7f2 <prvInsertTimerInActiveList+0x1e>
 800f806:	bf00      	nop
 800f808:	24025de4 	.word	0x24025de4
 800f80c:	24025de8 	.word	0x24025de8

0800f810 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800f810:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800f812:	4c11      	ldr	r4, [pc, #68]	@ (800f858 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800f814:	f7fe fbde 	bl	800dfd4 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800f818:	6825      	ldr	r5, [r4, #0]
 800f81a:	b9bd      	cbnz	r5, 800f84c <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800f81c:	4f0f      	ldr	r7, [pc, #60]	@ (800f85c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800f81e:	4e10      	ldr	r6, [pc, #64]	@ (800f860 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800f820:	4638      	mov	r0, r7
 800f822:	f7fe fb35 	bl	800de90 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f826:	4630      	mov	r0, r6
 800f828:	f7fe fb32 	bl	800de90 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f82c:	4b0d      	ldr	r3, [pc, #52]	@ (800f864 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f82e:	4a0e      	ldr	r2, [pc, #56]	@ (800f868 <prvCheckForValidListAndQueue+0x58>)
 800f830:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800f832:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f834:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800f836:	4b0d      	ldr	r3, [pc, #52]	@ (800f86c <prvCheckForValidListAndQueue+0x5c>)
 800f838:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f83a:	4b0d      	ldr	r3, [pc, #52]	@ (800f870 <prvCheckForValidListAndQueue+0x60>)
 800f83c:	9500      	str	r5, [sp, #0]
 800f83e:	f7fe fdd3 	bl	800e3e8 <xQueueGenericCreateStatic>
 800f842:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f844:	b110      	cbz	r0, 800f84c <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f846:	490b      	ldr	r1, [pc, #44]	@ (800f874 <prvCheckForValidListAndQueue+0x64>)
 800f848:	f7ff f9fe 	bl	800ec48 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800f84c:	b003      	add	sp, #12
 800f84e:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800f852:	f7fe bbdf 	b.w	800e014 <vPortExitCritical>
 800f856:	bf00      	nop
 800f858:	24025de0 	.word	0x24025de0
 800f85c:	24025e00 	.word	0x24025e00
 800f860:	24025dec 	.word	0x24025dec
 800f864:	24025de8 	.word	0x24025de8
 800f868:	24025d38 	.word	0x24025d38
 800f86c:	24025de4 	.word	0x24025de4
 800f870:	24025ce8 	.word	0x24025ce8
 800f874:	0802ab61 	.word	0x0802ab61

0800f878 <xTimerCreateTimerTask>:
{
 800f878:	b510      	push	{r4, lr}
 800f87a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800f87c:	f7ff ffc8 	bl	800f810 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800f880:	4b12      	ldr	r3, [pc, #72]	@ (800f8cc <xTimerCreateTimerTask+0x54>)
 800f882:	681b      	ldr	r3, [r3, #0]
 800f884:	b1b3      	cbz	r3, 800f8b4 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800f886:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f888:	aa07      	add	r2, sp, #28
 800f88a:	a906      	add	r1, sp, #24
 800f88c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800f88e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800f892:	f7fe f9f5 	bl	800dc80 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800f896:	9b05      	ldr	r3, [sp, #20]
 800f898:	9a07      	ldr	r2, [sp, #28]
 800f89a:	9302      	str	r3, [sp, #8]
 800f89c:	9b06      	ldr	r3, [sp, #24]
 800f89e:	490c      	ldr	r1, [pc, #48]	@ (800f8d0 <xTimerCreateTimerTask+0x58>)
 800f8a0:	9301      	str	r3, [sp, #4]
 800f8a2:	2302      	movs	r3, #2
 800f8a4:	480b      	ldr	r0, [pc, #44]	@ (800f8d4 <xTimerCreateTimerTask+0x5c>)
 800f8a6:	9300      	str	r3, [sp, #0]
 800f8a8:	4623      	mov	r3, r4
 800f8aa:	f7ff fba5 	bl	800eff8 <xTaskCreateStatic>
 800f8ae:	4b0a      	ldr	r3, [pc, #40]	@ (800f8d8 <xTimerCreateTimerTask+0x60>)
 800f8b0:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800f8b2:	b940      	cbnz	r0, 800f8c6 <xTimerCreateTimerTask+0x4e>
 800f8b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8b8:	f383 8811 	msr	BASEPRI, r3
 800f8bc:	f3bf 8f6f 	isb	sy
 800f8c0:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800f8c4:	e7fe      	b.n	800f8c4 <xTimerCreateTimerTask+0x4c>
}
 800f8c6:	2001      	movs	r0, #1
 800f8c8:	b008      	add	sp, #32
 800f8ca:	bd10      	pop	{r4, pc}
 800f8cc:	24025de0 	.word	0x24025de0
 800f8d0:	0802ab66 	.word	0x0802ab66
 800f8d4:	0800f9d5 	.word	0x0800f9d5
 800f8d8:	24025ddc 	.word	0x24025ddc

0800f8dc <xTimerGenericCommand>:
{
 800f8dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f8de:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800f8e0:	4604      	mov	r4, r0
{
 800f8e2:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800f8e4:	b940      	cbnz	r0, 800f8f8 <xTimerGenericCommand+0x1c>
 800f8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f8ea:	f383 8811 	msr	BASEPRI, r3
 800f8ee:	f3bf 8f6f 	isb	sy
 800f8f2:	f3bf 8f4f 	dsb	sy
 800f8f6:	e7fe      	b.n	800f8f6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800f8f8:	4d0c      	ldr	r5, [pc, #48]	@ (800f92c <xTimerGenericCommand+0x50>)
 800f8fa:	6828      	ldr	r0, [r5, #0]
 800f8fc:	b178      	cbz	r0, 800f91e <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f8fe:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800f900:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800f902:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800f906:	dc0c      	bgt.n	800f922 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f908:	f7ff fe7a 	bl	800f600 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f90c:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800f90e:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f910:	4669      	mov	r1, sp
 800f912:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800f914:	bf0c      	ite	eq
 800f916:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800f918:	461a      	movne	r2, r3
 800f91a:	f7fe fe1a 	bl	800e552 <xQueueGenericSend>
}
 800f91e:	b004      	add	sp, #16
 800f920:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800f922:	2300      	movs	r3, #0
 800f924:	4669      	mov	r1, sp
 800f926:	f7fe ff17 	bl	800e758 <xQueueGenericSendFromISR>
 800f92a:	e7f8      	b.n	800f91e <xTimerGenericCommand+0x42>
 800f92c:	24025de0 	.word	0x24025de0

0800f930 <prvSampleTimeNow>:
{
 800f930:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800f934:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800f9d0 <prvSampleTimeNow+0xa0>
{
 800f938:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800f93a:	f7ff fbcb 	bl	800f0d4 <xTaskGetTickCount>
 800f93e:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800f940:	f8d8 3000 	ldr.w	r3, [r8]
 800f944:	4283      	cmp	r3, r0
 800f946:	d909      	bls.n	800f95c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800f948:	4f1f      	ldr	r7, [pc, #124]	@ (800f9c8 <prvSampleTimeNow+0x98>)
 800f94a:	683b      	ldr	r3, [r7, #0]
 800f94c:	681a      	ldr	r2, [r3, #0]
 800f94e:	b96a      	cbnz	r2, 800f96c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800f950:	4a1e      	ldr	r2, [pc, #120]	@ (800f9cc <prvSampleTimeNow+0x9c>)
 800f952:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800f954:	6013      	str	r3, [r2, #0]
 800f956:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800f958:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800f95a:	e000      	b.n	800f95e <prvSampleTimeNow+0x2e>
 800f95c:	2300      	movs	r3, #0
}
 800f95e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800f960:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800f962:	f8c8 5000 	str.w	r5, [r8]
}
 800f966:	b002      	add	sp, #8
 800f968:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f96c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800f96e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f970:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800f974:	f104 0a04 	add.w	sl, r4, #4
 800f978:	4650      	mov	r0, sl
 800f97a:	f7fe fab9 	bl	800def0 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800f97e:	6a23      	ldr	r3, [r4, #32]
 800f980:	4620      	mov	r0, r4
 800f982:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800f984:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800f988:	075b      	lsls	r3, r3, #29
 800f98a:	d5de      	bpl.n	800f94a <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800f98c:	69a3      	ldr	r3, [r4, #24]
 800f98e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800f990:	4599      	cmp	r9, r3
 800f992:	d206      	bcs.n	800f9a2 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f994:	4651      	mov	r1, sl
 800f996:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800f998:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800f99a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800f99c:	f7fe fa91 	bl	800dec2 <vListInsert>
 800f9a0:	e7d3      	b.n	800f94a <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800f9a2:	2300      	movs	r3, #0
 800f9a4:	464a      	mov	r2, r9
 800f9a6:	4620      	mov	r0, r4
 800f9a8:	4619      	mov	r1, r3
 800f9aa:	9300      	str	r3, [sp, #0]
 800f9ac:	f7ff ff96 	bl	800f8dc <xTimerGenericCommand>
				configASSERT( xResult );
 800f9b0:	2800      	cmp	r0, #0
 800f9b2:	d1ca      	bne.n	800f94a <prvSampleTimeNow+0x1a>
 800f9b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800f9b8:	f383 8811 	msr	BASEPRI, r3
 800f9bc:	f3bf 8f6f 	isb	sy
 800f9c0:	f3bf 8f4f 	dsb	sy
 800f9c4:	e7fe      	b.n	800f9c4 <prvSampleTimeNow+0x94>
 800f9c6:	bf00      	nop
 800f9c8:	24025de8 	.word	0x24025de8
 800f9cc:	24025de4 	.word	0x24025de4
 800f9d0:	24025dd8 	.word	0x24025dd8

0800f9d4 <prvTimerTask>:
{
 800f9d4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9d8:	4d6e      	ldr	r5, [pc, #440]	@ (800fb94 <prvTimerTask+0x1c0>)
{
 800f9da:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800f9dc:	4e6e      	ldr	r6, [pc, #440]	@ (800fb98 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9de:	682b      	ldr	r3, [r5, #0]
 800f9e0:	f8d3 8000 	ldr.w	r8, [r3]
 800f9e4:	f1b8 0f00 	cmp.w	r8, #0
 800f9e8:	d035      	beq.n	800fa56 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9ea:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800f9ec:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800f9ee:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800f9f2:	f7ff fb67 	bl	800f0c4 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9f6:	a804      	add	r0, sp, #16
 800f9f8:	f7ff ff9a 	bl	800f930 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800f9fc:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800f9fe:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d169      	bne.n	800fad8 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800fa04:	2c00      	cmp	r4, #0
 800fa06:	d14c      	bne.n	800faa2 <prvTimerTask+0xce>
 800fa08:	4540      	cmp	r0, r8
 800fa0a:	d350      	bcc.n	800faae <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800fa0c:	f7ff fbfe 	bl	800f20c <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800fa10:	682b      	ldr	r3, [r5, #0]
 800fa12:	68db      	ldr	r3, [r3, #12]
 800fa14:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800fa16:	1d38      	adds	r0, r7, #4
 800fa18:	f7fe fa6a 	bl	800def0 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fa1c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800fa20:	0758      	lsls	r0, r3, #29
 800fa22:	d51a      	bpl.n	800fa5a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800fa24:	69b9      	ldr	r1, [r7, #24]
 800fa26:	4643      	mov	r3, r8
 800fa28:	464a      	mov	r2, r9
 800fa2a:	4638      	mov	r0, r7
 800fa2c:	4441      	add	r1, r8
 800fa2e:	f7ff fed1 	bl	800f7d4 <prvInsertTimerInActiveList>
 800fa32:	b1b0      	cbz	r0, 800fa62 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800fa34:	4623      	mov	r3, r4
 800fa36:	4642      	mov	r2, r8
 800fa38:	4621      	mov	r1, r4
 800fa3a:	4638      	mov	r0, r7
 800fa3c:	9400      	str	r4, [sp, #0]
 800fa3e:	f7ff ff4d 	bl	800f8dc <xTimerGenericCommand>
			configASSERT( xResult );
 800fa42:	b970      	cbnz	r0, 800fa62 <prvTimerTask+0x8e>
 800fa44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fa48:	f383 8811 	msr	BASEPRI, r3
 800fa4c:	f3bf 8f6f 	isb	sy
 800fa50:	f3bf 8f4f 	dsb	sy
 800fa54:	e7fe      	b.n	800fa54 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800fa56:	2401      	movs	r4, #1
 800fa58:	e7cb      	b.n	800f9f2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fa5a:	f023 0301 	bic.w	r3, r3, #1
 800fa5e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fa62:	6a3b      	ldr	r3, [r7, #32]
 800fa64:	4638      	mov	r0, r7
 800fa66:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800fa68:	2200      	movs	r2, #0
 800fa6a:	a904      	add	r1, sp, #16
 800fa6c:	6830      	ldr	r0, [r6, #0]
 800fa6e:	f7fe ff21 	bl	800e8b4 <xQueueReceive>
 800fa72:	2800      	cmp	r0, #0
 800fa74:	d0b3      	beq.n	800f9de <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fa76:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fa78:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	db2f      	blt.n	800fade <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800fa7e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800fa80:	6963      	ldr	r3, [r4, #20]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d132      	bne.n	800faec <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa86:	a803      	add	r0, sp, #12
 800fa88:	f7ff ff52 	bl	800f930 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800fa8c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800fa8e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800fa90:	2b09      	cmp	r3, #9
 800fa92:	d8e9      	bhi.n	800fa68 <prvTimerTask+0x94>
 800fa94:	e8df f003 	tbb	[pc, r3]
 800fa98:	572e2e2e 	.word	0x572e2e2e
 800fa9c:	2e2e765e 	.word	0x2e2e765e
 800faa0:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800faa2:	4b3e      	ldr	r3, [pc, #248]	@ (800fb9c <prvTimerTask+0x1c8>)
 800faa4:	681b      	ldr	r3, [r3, #0]
 800faa6:	681c      	ldr	r4, [r3, #0]
 800faa8:	fab4 f484 	clz	r4, r4
 800faac:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800faae:	4622      	mov	r2, r4
 800fab0:	eba8 0109 	sub.w	r1, r8, r9
 800fab4:	6830      	ldr	r0, [r6, #0]
 800fab6:	f7ff f906 	bl	800ecc6 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800faba:	f7ff fba7 	bl	800f20c <xTaskResumeAll>
 800fabe:	2800      	cmp	r0, #0
 800fac0:	d1d2      	bne.n	800fa68 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800fac2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800fac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800faca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800face:	f3bf 8f4f 	dsb	sy
 800fad2:	f3bf 8f6f 	isb	sy
 800fad6:	e7c7      	b.n	800fa68 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800fad8:	f7ff fb98 	bl	800f20c <xTaskResumeAll>
}
 800fadc:	e7c4      	b.n	800fa68 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800fade:	9b05      	ldr	r3, [sp, #20]
 800fae0:	9907      	ldr	r1, [sp, #28]
 800fae2:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800fae4:	9b04      	ldr	r3, [sp, #16]
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	dbbe      	blt.n	800fa68 <prvTimerTask+0x94>
 800faea:	e7c8      	b.n	800fa7e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800faec:	1d20      	adds	r0, r4, #4
 800faee:	f7fe f9ff 	bl	800def0 <uxListRemove>
 800faf2:	e7c8      	b.n	800fa86 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800faf4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800faf8:	4620      	mov	r0, r4
 800fafa:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fafc:	f043 0301 	orr.w	r3, r3, #1
 800fb00:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800fb04:	9b05      	ldr	r3, [sp, #20]
 800fb06:	4419      	add	r1, r3
 800fb08:	f7ff fe64 	bl	800f7d4 <prvInsertTimerInActiveList>
 800fb0c:	2800      	cmp	r0, #0
 800fb0e:	d0ab      	beq.n	800fa68 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800fb10:	6a23      	ldr	r3, [r4, #32]
 800fb12:	4620      	mov	r0, r4
 800fb14:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800fb16:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fb1a:	0759      	lsls	r1, r3, #29
 800fb1c:	d5a4      	bpl.n	800fa68 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800fb1e:	69a2      	ldr	r2, [r4, #24]
 800fb20:	2300      	movs	r3, #0
 800fb22:	9905      	ldr	r1, [sp, #20]
 800fb24:	4620      	mov	r0, r4
 800fb26:	9300      	str	r3, [sp, #0]
 800fb28:	440a      	add	r2, r1
 800fb2a:	4619      	mov	r1, r3
 800fb2c:	f7ff fed6 	bl	800f8dc <xTimerGenericCommand>
							configASSERT( xResult );
 800fb30:	2800      	cmp	r0, #0
 800fb32:	d199      	bne.n	800fa68 <prvTimerTask+0x94>
 800fb34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb38:	f383 8811 	msr	BASEPRI, r3
 800fb3c:	f3bf 8f6f 	isb	sy
 800fb40:	f3bf 8f4f 	dsb	sy
 800fb44:	e7fe      	b.n	800fb44 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb46:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800fb4a:	f023 0301 	bic.w	r3, r3, #1
 800fb4e:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800fb52:	e789      	b.n	800fa68 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800fb54:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fb58:	f043 0301 	orr.w	r3, r3, #1
 800fb5c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800fb60:	9905      	ldr	r1, [sp, #20]
 800fb62:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800fb64:	b941      	cbnz	r1, 800fb78 <prvTimerTask+0x1a4>
 800fb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800fb6a:	f383 8811 	msr	BASEPRI, r3
 800fb6e:	f3bf 8f6f 	isb	sy
 800fb72:	f3bf 8f4f 	dsb	sy
 800fb76:	e7fe      	b.n	800fb76 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800fb78:	4603      	mov	r3, r0
 800fb7a:	4401      	add	r1, r0
 800fb7c:	4620      	mov	r0, r4
 800fb7e:	f7ff fe29 	bl	800f7d4 <prvInsertTimerInActiveList>
					break;
 800fb82:	e771      	b.n	800fa68 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800fb84:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800fb88:	079a      	lsls	r2, r3, #30
 800fb8a:	d4de      	bmi.n	800fb4a <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	f7fe f941 	bl	800de14 <vPortFree>
 800fb92:	e769      	b.n	800fa68 <prvTimerTask+0x94>
 800fb94:	24025de8 	.word	0x24025de8
 800fb98:	24025de0 	.word	0x24025de0
 800fb9c:	24025de4 	.word	0x24025de4

0800fba0 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800fba0:	8880      	ldrh	r0, [r0, #4]
 800fba2:	4770      	bx	lr

0800fba4 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800fba4:	b570      	push	{r4, r5, r6, lr}
 800fba6:	6803      	ldr	r3, [r0, #0]
 800fba8:	460c      	mov	r4, r1
 800fbaa:	2100      	movs	r1, #0
 800fbac:	4605      	mov	r5, r0
 800fbae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbb0:	4798      	blx	r3
 800fbb2:	4606      	mov	r6, r0
 800fbb4:	682b      	ldr	r3, [r5, #0]
 800fbb6:	4628      	mov	r0, r5
 800fbb8:	1ba4      	subs	r4, r4, r6
 800fbba:	6a1b      	ldr	r3, [r3, #32]
 800fbbc:	b2a4      	uxth	r4, r4
 800fbbe:	4798      	blx	r3
 800fbc0:	fbb4 f0f0 	udiv	r0, r4, r0
 800fbc4:	bd70      	pop	{r4, r5, r6, pc}

0800fbc6 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	8083      	strh	r3, [r0, #4]
 800fbca:	4770      	bx	lr

0800fbcc <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800fbcc:	b510      	push	{r4, lr}
 800fbce:	6803      	ldr	r3, [r0, #0]
 800fbd0:	4604      	mov	r4, r0
 800fbd2:	8881      	ldrh	r1, [r0, #4]
 800fbd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbd6:	4798      	blx	r3
 800fbd8:	88a3      	ldrh	r3, [r4, #4]
 800fbda:	3301      	adds	r3, #1
 800fbdc:	80a3      	strh	r3, [r4, #4]
 800fbde:	bd10      	pop	{r4, pc}

0800fbe0 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800fbe0:	6803      	ldr	r3, [r0, #0]
 800fbe2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbe4:	4718      	bx	r3

0800fbe6 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800fbe6:	4770      	bx	lr

0800fbe8 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800fbe8:	4a02      	ldr	r2, [pc, #8]	@ (800fbf4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800fbea:	6002      	str	r2, [r0, #0]
 800fbec:	2200      	movs	r2, #0
 800fbee:	8082      	strh	r2, [r0, #4]
 800fbf0:	4770      	bx	lr
 800fbf2:	bf00      	nop
 800fbf4:	0802ab78 	.word	0x0802ab78

0800fbf8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800fbf8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fbfa:	2000      	movs	r0, #0
 800fbfc:	b12b      	cbz	r3, 800fc0a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fbfe:	b920      	cbnz	r0, 800fc0a <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800fc00:	1a5a      	subs	r2, r3, r1
 800fc02:	699b      	ldr	r3, [r3, #24]
 800fc04:	4250      	negs	r0, r2
 800fc06:	4150      	adcs	r0, r2
 800fc08:	e7f8      	b.n	800fbfc <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800fc0a:	4770      	bx	lr

0800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800fc0c:	2300      	movs	r3, #0
 800fc0e:	6148      	str	r0, [r1, #20]
 800fc10:	618b      	str	r3, [r1, #24]
 800fc12:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc14:	b913      	cbnz	r3, 800fc1c <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800fc16:	6281      	str	r1, [r0, #40]	@ 0x28
 800fc18:	4770      	bx	lr
 800fc1a:	4613      	mov	r3, r2
 800fc1c:	699a      	ldr	r2, [r3, #24]
 800fc1e:	2a00      	cmp	r2, #0
 800fc20:	d1fb      	bne.n	800fc1a <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800fc22:	6199      	str	r1, [r3, #24]
 800fc24:	4770      	bx	lr

0800fc26 <_ZN8touchgfx9Container9removeAllEv>:
 800fc26:	2200      	movs	r2, #0
 800fc28:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc2a:	b123      	cbz	r3, 800fc36 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800fc2c:	6999      	ldr	r1, [r3, #24]
 800fc2e:	6281      	str	r1, [r0, #40]	@ 0x28
 800fc30:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800fc34:	e7f8      	b.n	800fc28 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800fc36:	4770      	bx	lr

0800fc38 <_ZN8touchgfx9Container6unlinkEv>:
 800fc38:	2300      	movs	r3, #0
 800fc3a:	6283      	str	r3, [r0, #40]	@ 0x28
 800fc3c:	4770      	bx	lr

0800fc3e <_ZNK8touchgfx9Container12getSolidRectEv>:
 800fc3e:	2200      	movs	r2, #0
 800fc40:	8002      	strh	r2, [r0, #0]
 800fc42:	8042      	strh	r2, [r0, #2]
 800fc44:	8082      	strh	r2, [r0, #4]
 800fc46:	80c2      	strh	r2, [r0, #6]
 800fc48:	4770      	bx	lr

0800fc4a <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800fc4a:	b570      	push	{r4, r5, r6, lr}
 800fc4c:	460d      	mov	r5, r1
 800fc4e:	4616      	mov	r6, r2
 800fc50:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fc52:	b13c      	cbz	r4, 800fc64 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800fc54:	6823      	ldr	r3, [r4, #0]
 800fc56:	4620      	mov	r0, r4
 800fc58:	4632      	mov	r2, r6
 800fc5a:	4629      	mov	r1, r5
 800fc5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc5e:	4798      	blx	r3
 800fc60:	69a4      	ldr	r4, [r4, #24]
 800fc62:	e7f6      	b.n	800fc52 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800fc64:	bd70      	pop	{r4, r5, r6, pc}

0800fc66 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800fc66:	b538      	push	{r3, r4, r5, lr}
 800fc68:	460d      	mov	r5, r1
 800fc6a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fc6c:	b134      	cbz	r4, 800fc7c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800fc6e:	682b      	ldr	r3, [r5, #0]
 800fc70:	4621      	mov	r1, r4
 800fc72:	4628      	mov	r0, r5
 800fc74:	689b      	ldr	r3, [r3, #8]
 800fc76:	4798      	blx	r3
 800fc78:	69a4      	ldr	r4, [r4, #24]
 800fc7a:	e7f7      	b.n	800fc6c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800fc7c:	bd38      	pop	{r3, r4, r5, pc}

0800fc7e <_ZN8touchgfx9ContainerD1Ev>:
 800fc7e:	4770      	bx	lr

0800fc80 <_ZN8touchgfx9ContainerD0Ev>:
 800fc80:	b510      	push	{r4, lr}
 800fc82:	4604      	mov	r4, r0
 800fc84:	212c      	movs	r1, #44	@ 0x2c
 800fc86:	f016 f9c5 	bl	8026014 <_ZdlPvj>
 800fc8a:	4620      	mov	r0, r4
 800fc8c:	bd10      	pop	{r4, pc}

0800fc8e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800fc8e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fc90:	b19b      	cbz	r3, 800fcba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fc92:	428b      	cmp	r3, r1
 800fc94:	d109      	bne.n	800fcaa <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800fc96:	699a      	ldr	r2, [r3, #24]
 800fc98:	2100      	movs	r1, #0
 800fc9a:	6159      	str	r1, [r3, #20]
 800fc9c:	6282      	str	r2, [r0, #40]	@ 0x28
 800fc9e:	b902      	cbnz	r2, 800fca2 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800fca0:	4770      	bx	lr
 800fca2:	6199      	str	r1, [r3, #24]
 800fca4:	4770      	bx	lr
 800fca6:	4613      	mov	r3, r2
 800fca8:	b13a      	cbz	r2, 800fcba <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800fcaa:	699a      	ldr	r2, [r3, #24]
 800fcac:	428a      	cmp	r2, r1
 800fcae:	d1fa      	bne.n	800fca6 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800fcb0:	698a      	ldr	r2, [r1, #24]
 800fcb2:	619a      	str	r2, [r3, #24]
 800fcb4:	2300      	movs	r3, #0
 800fcb6:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800fcba:	4770      	bx	lr

0800fcbc <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800fcbc:	b410      	push	{r4}
 800fcbe:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800fcc0:	4604      	mov	r4, r0
 800fcc2:	b92b      	cbnz	r3, 800fcd0 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800fcc4:	6803      	ldr	r3, [r0, #0]
 800fcc6:	4611      	mov	r1, r2
 800fcc8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fccc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800fcce:	4718      	bx	r3
 800fcd0:	b941      	cbnz	r1, 800fce4 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800fcd2:	6193      	str	r3, [r2, #24]
 800fcd4:	6282      	str	r2, [r0, #40]	@ 0x28
 800fcd6:	6154      	str	r4, [r2, #20]
 800fcd8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800fcdc:	4770      	bx	lr
 800fcde:	4603      	mov	r3, r0
 800fce0:	2800      	cmp	r0, #0
 800fce2:	d0f9      	beq.n	800fcd8 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800fce4:	4299      	cmp	r1, r3
 800fce6:	6998      	ldr	r0, [r3, #24]
 800fce8:	d1f9      	bne.n	800fcde <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800fcea:	6190      	str	r0, [r2, #24]
 800fcec:	618a      	str	r2, [r1, #24]
 800fcee:	e7f2      	b.n	800fcd6 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800fcf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800fcf0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fcf4:	461f      	mov	r7, r3
 800fcf6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800fcfa:	460d      	mov	r5, r1
 800fcfc:	4616      	mov	r6, r2
 800fcfe:	b103      	cbz	r3, 800fd02 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800fd00:	6038      	str	r0, [r7, #0]
 800fd02:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800fd04:	b314      	cbz	r4, 800fd4c <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800fd06:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800fd0a:	b1eb      	cbz	r3, 800fd48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd0c:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800fd10:	428d      	cmp	r5, r1
 800fd12:	db19      	blt.n	800fd48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd14:	b289      	uxth	r1, r1
 800fd16:	8923      	ldrh	r3, [r4, #8]
 800fd18:	440b      	add	r3, r1
 800fd1a:	b21b      	sxth	r3, r3
 800fd1c:	429d      	cmp	r5, r3
 800fd1e:	da13      	bge.n	800fd48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd20:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800fd24:	4296      	cmp	r6, r2
 800fd26:	db0f      	blt.n	800fd48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd28:	b292      	uxth	r2, r2
 800fd2a:	8963      	ldrh	r3, [r4, #10]
 800fd2c:	4413      	add	r3, r2
 800fd2e:	b21b      	sxth	r3, r3
 800fd30:	429e      	cmp	r6, r3
 800fd32:	da09      	bge.n	800fd48 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800fd34:	6823      	ldr	r3, [r4, #0]
 800fd36:	1ab2      	subs	r2, r6, r2
 800fd38:	1a69      	subs	r1, r5, r1
 800fd3a:	4620      	mov	r0, r4
 800fd3c:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800fd40:	b212      	sxth	r2, r2
 800fd42:	463b      	mov	r3, r7
 800fd44:	b209      	sxth	r1, r1
 800fd46:	47c0      	blx	r8
 800fd48:	69a4      	ldr	r4, [r4, #24]
 800fd4a:	e7db      	b.n	800fd04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800fd4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800fd50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800fd50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd54:	4c6d      	ldr	r4, [pc, #436]	@ (800ff0c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800fd56:	b0a1      	sub	sp, #132	@ 0x84
 800fd58:	4606      	mov	r6, r0
 800fd5a:	6824      	ldr	r4, [r4, #0]
 800fd5c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800fd5e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800fd62:	2400      	movs	r4, #0
 800fd64:	9303      	str	r3, [sp, #12]
 800fd66:	802c      	strh	r4, [r5, #0]
 800fd68:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800fd6a:	802c      	strh	r4, [r5, #0]
 800fd6c:	601c      	str	r4, [r3, #0]
 800fd6e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800fd72:	f7ff ffbd 	bl	800fcf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fd76:	f1b9 0f03 	cmp.w	r9, #3
 800fd7a:	f340 80c1 	ble.w	800ff00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800fd7e:	4631      	mov	r1, r6
 800fd80:	a80c      	add	r0, sp, #48	@ 0x30
 800fd82:	f008 f857 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fd86:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800fd8a:	9306      	str	r3, [sp, #24]
 800fd8c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800fd90:	9307      	str	r3, [sp, #28]
 800fd92:	9b03      	ldr	r3, [sp, #12]
 800fd94:	f8d3 a000 	ldr.w	sl, [r3]
 800fd98:	f1ba 0f00 	cmp.w	sl, #0
 800fd9c:	f000 80b3 	beq.w	800ff06 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800fda0:	4651      	mov	r1, sl
 800fda2:	a810      	add	r0, sp, #64	@ 0x40
 800fda4:	f008 f846 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fda8:	2002      	movs	r0, #2
 800fdaa:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800fdae:	9b01      	ldr	r3, [sp, #4]
 800fdb0:	9a06      	ldr	r2, [sp, #24]
 800fdb2:	fb91 f1f0 	sdiv	r1, r1, r0
 800fdb6:	189d      	adds	r5, r3, r2
 800fdb8:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800fdbc:	9a07      	ldr	r2, [sp, #28]
 800fdbe:	4419      	add	r1, r3
 800fdc0:	9b02      	ldr	r3, [sp, #8]
 800fdc2:	4413      	add	r3, r2
 800fdc4:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800fdc8:	1a6d      	subs	r5, r5, r1
 800fdca:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800fdce:	fb92 f2f0 	sdiv	r2, r2, r0
 800fdd2:	440a      	add	r2, r1
 800fdd4:	1a9b      	subs	r3, r3, r2
 800fdd6:	435b      	muls	r3, r3
 800fdd8:	fb05 3505 	mla	r5, r5, r5, r3
 800fddc:	4f4c      	ldr	r7, [pc, #304]	@ (800ff10 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800fdde:	ac10      	add	r4, sp, #64	@ 0x40
 800fde0:	f1b9 0f0c 	cmp.w	r9, #12
 800fde4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fde6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fde8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fdea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdec:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800fdee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800fdf0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800fdf4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800fdf8:	f04f 0303 	mov.w	r3, #3
 800fdfc:	bfd8      	it	le
 800fdfe:	f109 32ff 	addle.w	r2, r9, #4294967295
 800fe02:	f04f 0400 	mov.w	r4, #0
 800fe06:	f8cd 9000 	str.w	r9, [sp]
 800fe0a:	bfcc      	ite	gt
 800fe0c:	4698      	movgt	r8, r3
 800fe0e:	fb92 f8f3 	sdivle	r8, r2, r3
 800fe12:	1c63      	adds	r3, r4, #1
 800fe14:	aa10      	add	r2, sp, #64	@ 0x40
 800fe16:	f004 0401 	and.w	r4, r4, #1
 800fe1a:	f04f 0b00 	mov.w	fp, #0
 800fe1e:	9308      	str	r3, [sp, #32]
 800fe20:	9b00      	ldr	r3, [sp, #0]
 800fe22:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800fe26:	fb93 f3f8 	sdiv	r3, r3, r8
 800fe2a:	3404      	adds	r4, #4
 800fe2c:	b29b      	uxth	r3, r3
 800fe2e:	9304      	str	r3, [sp, #16]
 800fe30:	9a04      	ldr	r2, [sp, #16]
 800fe32:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800fe36:	fb13 f302 	smulbb	r3, r3, r2
 800fe3a:	9a01      	ldr	r2, [sp, #4]
 800fe3c:	b29b      	uxth	r3, r3
 800fe3e:	1899      	adds	r1, r3, r2
 800fe40:	9305      	str	r3, [sp, #20]
 800fe42:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800fe46:	b209      	sxth	r1, r1
 800fe48:	4299      	cmp	r1, r3
 800fe4a:	db4d      	blt.n	800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe4c:	8932      	ldrh	r2, [r6, #8]
 800fe4e:	4413      	add	r3, r2
 800fe50:	b21b      	sxth	r3, r3
 800fe52:	4299      	cmp	r1, r3
 800fe54:	da48      	bge.n	800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe56:	9b04      	ldr	r3, [sp, #16]
 800fe58:	6827      	ldr	r7, [r4, #0]
 800fe5a:	fb17 f703 	smulbb	r7, r7, r3
 800fe5e:	9b02      	ldr	r3, [sp, #8]
 800fe60:	b2bf      	uxth	r7, r7
 800fe62:	18fa      	adds	r2, r7, r3
 800fe64:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800fe68:	b212      	sxth	r2, r2
 800fe6a:	429a      	cmp	r2, r3
 800fe6c:	db3c      	blt.n	800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe6e:	8970      	ldrh	r0, [r6, #10]
 800fe70:	4403      	add	r3, r0
 800fe72:	b21b      	sxth	r3, r3
 800fe74:	429a      	cmp	r2, r3
 800fe76:	da37      	bge.n	800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe78:	2300      	movs	r3, #0
 800fe7a:	4630      	mov	r0, r6
 800fe7c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800fe7e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800fe80:	f7ff ff36 	bl	800fcf0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800fe84:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800fe86:	b37a      	cbz	r2, 800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe88:	4552      	cmp	r2, sl
 800fe8a:	d02d      	beq.n	800fee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800fe8c:	4611      	mov	r1, r2
 800fe8e:	a80e      	add	r0, sp, #56	@ 0x38
 800fe90:	9209      	str	r2, [sp, #36]	@ 0x24
 800fe92:	f007 ffcf 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800fe96:	f04f 0e02 	mov.w	lr, #2
 800fe9a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800fe9e:	9a06      	ldr	r2, [sp, #24]
 800fea0:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800fea4:	9b01      	ldr	r3, [sp, #4]
 800fea6:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800feaa:	4413      	add	r3, r2
 800feac:	9a07      	ldr	r2, [sp, #28]
 800feae:	fb91 f1fe 	sdiv	r1, r1, lr
 800feb2:	fb9c fcfe 	sdiv	ip, ip, lr
 800feb6:	4401      	add	r1, r0
 800feb8:	1a58      	subs	r0, r3, r1
 800feba:	9b02      	ldr	r3, [sp, #8]
 800febc:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800fec0:	4413      	add	r3, r2
 800fec2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800fec4:	448c      	add	ip, r1
 800fec6:	eba3 030c 	sub.w	r3, r3, ip
 800feca:	435b      	muls	r3, r3
 800fecc:	fb00 3300 	mla	r3, r0, r0, r3
 800fed0:	42ab      	cmp	r3, r5
 800fed2:	d208      	bcs.n	800fee6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800fed4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800fed6:	461d      	mov	r5, r3
 800fed8:	9803      	ldr	r0, [sp, #12]
 800feda:	6001      	str	r1, [r0, #0]
 800fedc:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800fede:	9805      	ldr	r0, [sp, #20]
 800fee0:	8008      	strh	r0, [r1, #0]
 800fee2:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800fee4:	800f      	strh	r7, [r1, #0]
 800fee6:	4692      	mov	sl, r2
 800fee8:	f10b 0b01 	add.w	fp, fp, #1
 800feec:	3408      	adds	r4, #8
 800feee:	f1bb 0f04 	cmp.w	fp, #4
 800fef2:	d19d      	bne.n	800fe30 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800fef4:	9b00      	ldr	r3, [sp, #0]
 800fef6:	9c08      	ldr	r4, [sp, #32]
 800fef8:	444b      	add	r3, r9
 800fefa:	4544      	cmp	r4, r8
 800fefc:	9300      	str	r3, [sp, #0]
 800fefe:	d188      	bne.n	800fe12 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800ff00:	b021      	add	sp, #132	@ 0x84
 800ff02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ff06:	f04f 35ff 	mov.w	r5, #4294967295
 800ff0a:	e767      	b.n	800fddc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800ff0c:	24025e20 	.word	0x24025e20
 800ff10:	08027bd8 	.word	0x08027bd8

0800ff14 <_ZN8touchgfx4RectaNERKS0_>:
 800ff14:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ff18:	f9b1 7000 	ldrsh.w	r7, [r1]
 800ff1c:	888c      	ldrh	r4, [r1, #4]
 800ff1e:	f9b0 9000 	ldrsh.w	r9, [r0]
 800ff22:	443c      	add	r4, r7
 800ff24:	b2a4      	uxth	r4, r4
 800ff26:	fa0f f884 	sxth.w	r8, r4
 800ff2a:	45c1      	cmp	r9, r8
 800ff2c:	da2f      	bge.n	800ff8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff2e:	8882      	ldrh	r2, [r0, #4]
 800ff30:	444a      	add	r2, r9
 800ff32:	b292      	uxth	r2, r2
 800ff34:	fa0f fe82 	sxth.w	lr, r2
 800ff38:	4577      	cmp	r7, lr
 800ff3a:	da28      	bge.n	800ff8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff3c:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800ff40:	88cb      	ldrh	r3, [r1, #6]
 800ff42:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800ff46:	442b      	add	r3, r5
 800ff48:	b21b      	sxth	r3, r3
 800ff4a:	429e      	cmp	r6, r3
 800ff4c:	da1f      	bge.n	800ff8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff4e:	88c3      	ldrh	r3, [r0, #6]
 800ff50:	4433      	add	r3, r6
 800ff52:	b29b      	uxth	r3, r3
 800ff54:	fa0f fc83 	sxth.w	ip, r3
 800ff58:	4565      	cmp	r5, ip
 800ff5a:	da18      	bge.n	800ff8e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ff5c:	454f      	cmp	r7, r9
 800ff5e:	bfb8      	it	lt
 800ff60:	464f      	movlt	r7, r9
 800ff62:	42b5      	cmp	r5, r6
 800ff64:	bfb8      	it	lt
 800ff66:	4635      	movlt	r5, r6
 800ff68:	45f0      	cmp	r8, lr
 800ff6a:	bfd8      	it	le
 800ff6c:	4622      	movle	r2, r4
 800ff6e:	1bd2      	subs	r2, r2, r7
 800ff70:	8082      	strh	r2, [r0, #4]
 800ff72:	884a      	ldrh	r2, [r1, #2]
 800ff74:	88c9      	ldrh	r1, [r1, #6]
 800ff76:	8007      	strh	r7, [r0, #0]
 800ff78:	440a      	add	r2, r1
 800ff7a:	8045      	strh	r5, [r0, #2]
 800ff7c:	b292      	uxth	r2, r2
 800ff7e:	b211      	sxth	r1, r2
 800ff80:	458c      	cmp	ip, r1
 800ff82:	bfa8      	it	ge
 800ff84:	4613      	movge	r3, r2
 800ff86:	1b5b      	subs	r3, r3, r5
 800ff88:	80c3      	strh	r3, [r0, #6]
 800ff8a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ff8e:	2300      	movs	r3, #0
 800ff90:	8003      	strh	r3, [r0, #0]
 800ff92:	8043      	strh	r3, [r0, #2]
 800ff94:	8083      	strh	r3, [r0, #4]
 800ff96:	80c3      	strh	r3, [r0, #6]
 800ff98:	e7f7      	b.n	800ff8a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ff9a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ff9e:	2b00      	cmp	r3, #0
 800ffa0:	dd06      	ble.n	800ffb0 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ffa2:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ffa6:	2800      	cmp	r0, #0
 800ffa8:	bfcc      	ite	gt
 800ffaa:	2000      	movgt	r0, #0
 800ffac:	2001      	movle	r0, #1
 800ffae:	4770      	bx	lr
 800ffb0:	2001      	movs	r0, #1
 800ffb2:	4770      	bx	lr

0800ffb4 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ffb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffb8:	2300      	movs	r3, #0
 800ffba:	4604      	mov	r4, r0
 800ffbc:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ffbe:	8003      	strh	r3, [r0, #0]
 800ffc0:	8043      	strh	r3, [r0, #2]
 800ffc2:	8083      	strh	r3, [r0, #4]
 800ffc4:	80c3      	strh	r3, [r0, #6]
 800ffc6:	2d00      	cmp	r5, #0
 800ffc8:	d040      	beq.n	801004c <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ffca:	1d28      	adds	r0, r5, #4
 800ffcc:	f7ff ffe5 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffd0:	b988      	cbnz	r0, 800fff6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ffd2:	4620      	mov	r0, r4
 800ffd4:	f7ff ffe1 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ffd8:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ffdc:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ffe0:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ffe4:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ffe8:	b138      	cbz	r0, 800fffa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ffea:	8022      	strh	r2, [r4, #0]
 800ffec:	8063      	strh	r3, [r4, #2]
 800ffee:	f8a4 e004 	strh.w	lr, [r4, #4]
 800fff2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800fff6:	69ad      	ldr	r5, [r5, #24]
 800fff8:	e7e5      	b.n	800ffc6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800fffa:	f9b4 0000 	ldrsh.w	r0, [r4]
 800fffe:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8010002:	4290      	cmp	r0, r2
 8010004:	4607      	mov	r7, r0
 8010006:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 801000a:	460e      	mov	r6, r1
 801000c:	bfa8      	it	ge
 801000e:	4617      	movge	r7, r2
 8010010:	4299      	cmp	r1, r3
 8010012:	4472      	add	r2, lr
 8010014:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 8010018:	bfa8      	it	ge
 801001a:	461e      	movge	r6, r3
 801001c:	4440      	add	r0, r8
 801001e:	4471      	add	r1, lr
 8010020:	4463      	add	r3, ip
 8010022:	b200      	sxth	r0, r0
 8010024:	8027      	strh	r7, [r4, #0]
 8010026:	b212      	sxth	r2, r2
 8010028:	8066      	strh	r6, [r4, #2]
 801002a:	b209      	sxth	r1, r1
 801002c:	b21b      	sxth	r3, r3
 801002e:	4290      	cmp	r0, r2
 8010030:	bfac      	ite	ge
 8010032:	ebc7 0200 	rsbge	r2, r7, r0
 8010036:	ebc7 0202 	rsblt	r2, r7, r2
 801003a:	4299      	cmp	r1, r3
 801003c:	bfac      	ite	ge
 801003e:	ebc6 0301 	rsbge	r3, r6, r1
 8010042:	ebc6 0303 	rsblt	r3, r6, r3
 8010046:	80a2      	strh	r2, [r4, #4]
 8010048:	80e3      	strh	r3, [r4, #6]
 801004a:	e7d4      	b.n	800fff6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 801004c:	4620      	mov	r0, r4
 801004e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010052 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 8010052:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8010056:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 801005a:	b383      	cbz	r3, 80100be <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 801005c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 801005e:	b374      	cbz	r4, 80100be <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 8010060:	f9b1 5000 	ldrsh.w	r5, [r1]
 8010064:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 8010068:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 801006c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 8010070:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 8010074:	b303      	cbz	r3, 80100b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010076:	4668      	mov	r0, sp
 8010078:	1d21      	adds	r1, r4, #4
 801007a:	f8ad 5000 	strh.w	r5, [sp]
 801007e:	f8ad 6002 	strh.w	r6, [sp, #2]
 8010082:	f8ad 7004 	strh.w	r7, [sp, #4]
 8010086:	f8ad 8006 	strh.w	r8, [sp, #6]
 801008a:	f7ff ff43 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 801008e:	4668      	mov	r0, sp
 8010090:	f7ff ff83 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8010094:	b980      	cbnz	r0, 80100b8 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 8010096:	f8bd 3000 	ldrh.w	r3, [sp]
 801009a:	4669      	mov	r1, sp
 801009c:	88a2      	ldrh	r2, [r4, #4]
 801009e:	4620      	mov	r0, r4
 80100a0:	1a9b      	subs	r3, r3, r2
 80100a2:	88e2      	ldrh	r2, [r4, #6]
 80100a4:	f8ad 3000 	strh.w	r3, [sp]
 80100a8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80100ac:	1a9b      	subs	r3, r3, r2
 80100ae:	f8ad 3002 	strh.w	r3, [sp, #2]
 80100b2:	6823      	ldr	r3, [r4, #0]
 80100b4:	689b      	ldr	r3, [r3, #8]
 80100b6:	4798      	blx	r3
 80100b8:	69a4      	ldr	r4, [r4, #24]
 80100ba:	2c00      	cmp	r4, #0
 80100bc:	d1d8      	bne.n	8010070 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 80100be:	b002      	add	sp, #8
 80100c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080100c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 80100c4:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80100c6:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 80100ca:	460d      	mov	r5, r1
 80100cc:	4616      	mov	r6, r2
 80100ce:	b323      	cbz	r3, 801011a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80100d0:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 80100d2:	b314      	cbz	r4, 801011a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 80100d4:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 80100d8:	b1eb      	cbz	r3, 8010116 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80100da:	6828      	ldr	r0, [r5, #0]
 80100dc:	466b      	mov	r3, sp
 80100de:	6869      	ldr	r1, [r5, #4]
 80100e0:	c303      	stmia	r3!, {r0, r1}
 80100e2:	4668      	mov	r0, sp
 80100e4:	1d21      	adds	r1, r4, #4
 80100e6:	f7ff ff15 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 80100ea:	4668      	mov	r0, sp
 80100ec:	f7ff ff55 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80100f0:	b988      	cbnz	r0, 8010116 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 80100f2:	f8bd 3000 	ldrh.w	r3, [sp]
 80100f6:	4669      	mov	r1, sp
 80100f8:	88a2      	ldrh	r2, [r4, #4]
 80100fa:	4620      	mov	r0, r4
 80100fc:	1a9b      	subs	r3, r3, r2
 80100fe:	88e2      	ldrh	r2, [r4, #6]
 8010100:	f8ad 3000 	strh.w	r3, [sp]
 8010104:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010108:	1a9b      	subs	r3, r3, r2
 801010a:	4632      	mov	r2, r6
 801010c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8010110:	6823      	ldr	r3, [r4, #0]
 8010112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010114:	4798      	blx	r3
 8010116:	69a4      	ldr	r4, [r4, #24]
 8010118:	e7db      	b.n	80100d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 801011a:	b002      	add	sp, #8
 801011c:	bd70      	pop	{r4, r5, r6, pc}

0801011e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 801011e:	6803      	ldr	r3, [r0, #0]
 8010120:	b513      	push	{r0, r1, r4, lr}
 8010122:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 8010126:	2300      	movs	r3, #0
 8010128:	e9cd 3300 	strd	r3, r3, [sp]
 801012c:	466b      	mov	r3, sp
 801012e:	47a0      	blx	r4
 8010130:	b002      	add	sp, #8
 8010132:	bd10      	pop	{r4, pc}

08010134 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 8010134:	2301      	movs	r3, #1
 8010136:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 801013a:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801013e:	4770      	bx	lr

08010140 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 8010140:	2301      	movs	r3, #1
 8010142:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 8010146:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 801014a:	4770      	bx	lr

0801014c <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 801014c:	6843      	ldr	r3, [r0, #4]
 801014e:	2201      	movs	r2, #1
 8010150:	725a      	strb	r2, [r3, #9]
 8010152:	6840      	ldr	r0, [r0, #4]
 8010154:	6803      	ldr	r3, [r0, #0]
 8010156:	691b      	ldr	r3, [r3, #16]
 8010158:	4718      	bx	r3

0801015a <_ZN8touchgfx3HAL8flushDMAEv>:
 801015a:	6840      	ldr	r0, [r0, #4]
 801015c:	6803      	ldr	r3, [r0, #0]
 801015e:	689b      	ldr	r3, [r3, #8]
 8010160:	4718      	bx	r3

08010162 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 8010162:	b530      	push	{r4, r5, lr}
 8010164:	b08b      	sub	sp, #44	@ 0x2c
 8010166:	6804      	ldr	r4, [r0, #0]
 8010168:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 801016c:	9509      	str	r5, [sp, #36]	@ 0x24
 801016e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8010172:	9508      	str	r5, [sp, #32]
 8010174:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8010178:	9507      	str	r5, [sp, #28]
 801017a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 801017e:	9506      	str	r5, [sp, #24]
 8010180:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8010184:	9505      	str	r5, [sp, #20]
 8010186:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 801018a:	9504      	str	r5, [sp, #16]
 801018c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 8010190:	9503      	str	r5, [sp, #12]
 8010192:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 8010196:	9502      	str	r5, [sp, #8]
 8010198:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801019c:	e9cd 3500 	strd	r3, r5, [sp]
 80101a0:	4613      	mov	r3, r2
 80101a2:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 80101a4:	2200      	movs	r2, #0
 80101a6:	47a0      	blx	r4
 80101a8:	b00b      	add	sp, #44	@ 0x2c
 80101aa:	bd30      	pop	{r4, r5, pc}

080101ac <_ZN8touchgfx3HAL10beginFrameEv>:
 80101ac:	4b04      	ldr	r3, [pc, #16]	@ (80101c0 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 80101ae:	781b      	ldrb	r3, [r3, #0]
 80101b0:	b123      	cbz	r3, 80101bc <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 80101b2:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 80101b6:	f080 0001 	eor.w	r0, r0, #1
 80101ba:	4770      	bx	lr
 80101bc:	2001      	movs	r0, #1
 80101be:	4770      	bx	lr
 80101c0:	24025e1e 	.word	0x24025e1e

080101c4 <_ZN8touchgfx3HAL8endFrameEv>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	4604      	mov	r4, r0
 80101c8:	6840      	ldr	r0, [r0, #4]
 80101ca:	6803      	ldr	r3, [r0, #0]
 80101cc:	689b      	ldr	r3, [r3, #8]
 80101ce:	4798      	blx	r3
 80101d0:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 80101d4:	b113      	cbz	r3, 80101dc <_ZN8touchgfx3HAL8endFrameEv+0x18>
 80101d6:	2301      	movs	r3, #1
 80101d8:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 80101dc:	bd10      	pop	{r4, pc}

080101de <_ZN8touchgfx3HAL10initializeEv>:
 80101de:	b510      	push	{r4, lr}
 80101e0:	4604      	mov	r4, r0
 80101e2:	f7f2 fdf7 	bl	8002dd4 <_ZN8touchgfx10OSWrappers10initializeEv>
 80101e6:	f7f1 fe4d 	bl	8001e84 <_ZN8touchgfx4GPIO4initEv>
 80101ea:	6860      	ldr	r0, [r4, #4]
 80101ec:	6803      	ldr	r3, [r0, #0]
 80101ee:	68db      	ldr	r3, [r3, #12]
 80101f0:	4798      	blx	r3
 80101f2:	68e0      	ldr	r0, [r4, #12]
 80101f4:	6803      	ldr	r3, [r0, #0]
 80101f6:	689b      	ldr	r3, [r3, #8]
 80101f8:	4798      	blx	r3
 80101fa:	6823      	ldr	r3, [r4, #0]
 80101fc:	4620      	mov	r0, r4
 80101fe:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010200:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010204:	4718      	bx	r3
	...

08010208 <_ZN8touchgfx3HAL4tickEv>:
 8010208:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801020a:	6803      	ldr	r3, [r0, #0]
 801020c:	4604      	mov	r4, r0
 801020e:	4d5b      	ldr	r5, [pc, #364]	@ (801037c <_ZN8touchgfx3HAL4tickEv+0x174>)
 8010210:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010214:	4798      	blx	r3
 8010216:	2800      	cmp	r0, #0
 8010218:	f000 8095 	beq.w	8010346 <_ZN8touchgfx3HAL4tickEv+0x13e>
 801021c:	2001      	movs	r0, #1
 801021e:	2600      	movs	r6, #0
 8010220:	f7f1 fd96 	bl	8001d50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010224:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 8010228:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 801022c:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 8010230:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 8010234:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 8010238:	b133      	cbz	r3, 8010248 <_ZN8touchgfx3HAL4tickEv+0x40>
 801023a:	6823      	ldr	r3, [r4, #0]
 801023c:	4620      	mov	r0, r4
 801023e:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 8010242:	4798      	blx	r3
 8010244:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010248:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 801024c:	2601      	movs	r6, #1
 801024e:	6862      	ldr	r2, [r4, #4]
 8010250:	f083 0301 	eor.w	r3, r3, #1
 8010254:	702e      	strb	r6, [r5, #0]
 8010256:	7253      	strb	r3, [r2, #9]
 8010258:	f006 fcd8 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 801025c:	6803      	ldr	r3, [r0, #0]
 801025e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010260:	4798      	blx	r3
 8010262:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010266:	b90b      	cbnz	r3, 801026c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010268:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 801026c:	f006 fcce 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 8010270:	6803      	ldr	r3, [r0, #0]
 8010272:	695b      	ldr	r3, [r3, #20]
 8010274:	4798      	blx	r3
 8010276:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 8010278:	6803      	ldr	r3, [r0, #0]
 801027a:	691b      	ldr	r3, [r3, #16]
 801027c:	4798      	blx	r3
 801027e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 8010282:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 8010286:	3b01      	subs	r3, #1
 8010288:	b2db      	uxtb	r3, r3
 801028a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 801028e:	b10a      	cbz	r2, 8010294 <_ZN8touchgfx3HAL4tickEv+0x8c>
 8010290:	2b00      	cmp	r3, #0
 8010292:	d1eb      	bne.n	801026c <_ZN8touchgfx3HAL4tickEv+0x64>
 8010294:	4a3a      	ldr	r2, [pc, #232]	@ (8010380 <_ZN8touchgfx3HAL4tickEv+0x178>)
 8010296:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 801029a:	7813      	ldrb	r3, [r2, #0]
 801029c:	3301      	adds	r3, #1
 801029e:	b25b      	sxtb	r3, r3
 80102a0:	4299      	cmp	r1, r3
 80102a2:	7013      	strb	r3, [r2, #0]
 80102a4:	dc10      	bgt.n	80102c8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 80102a6:	2300      	movs	r3, #0
 80102a8:	68e0      	ldr	r0, [r4, #12]
 80102aa:	a902      	add	r1, sp, #8
 80102ac:	7013      	strb	r3, [r2, #0]
 80102ae:	aa03      	add	r2, sp, #12
 80102b0:	6803      	ldr	r3, [r0, #0]
 80102b2:	68db      	ldr	r3, [r3, #12]
 80102b4:	4798      	blx	r3
 80102b6:	6823      	ldr	r3, [r4, #0]
 80102b8:	2800      	cmp	r0, #0
 80102ba:	d050      	beq.n	801035e <_ZN8touchgfx3HAL4tickEv+0x156>
 80102bc:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80102c0:	4620      	mov	r0, r4
 80102c2:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 80102c6:	4798      	blx	r3
 80102c8:	2300      	movs	r3, #0
 80102ca:	6960      	ldr	r0, [r4, #20]
 80102cc:	f88d 3007 	strb.w	r3, [sp, #7]
 80102d0:	b158      	cbz	r0, 80102ea <_ZN8touchgfx3HAL4tickEv+0xe2>
 80102d2:	6803      	ldr	r3, [r0, #0]
 80102d4:	f10d 0107 	add.w	r1, sp, #7
 80102d8:	68db      	ldr	r3, [r3, #12]
 80102da:	4798      	blx	r3
 80102dc:	b128      	cbz	r0, 80102ea <_ZN8touchgfx3HAL4tickEv+0xe2>
 80102de:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 80102e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
 80102e4:	6803      	ldr	r3, [r0, #0]
 80102e6:	68db      	ldr	r3, [r3, #12]
 80102e8:	4798      	blx	r3
 80102ea:	f104 001c 	add.w	r0, r4, #28
 80102ee:	f014 f92b 	bl	8024548 <_ZN8touchgfx8Gestures4tickEv>
 80102f2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 80102f6:	b30b      	cbz	r3, 801033c <_ZN8touchgfx3HAL4tickEv+0x134>
 80102f8:	6920      	ldr	r0, [r4, #16]
 80102fa:	6803      	ldr	r3, [r0, #0]
 80102fc:	691b      	ldr	r3, [r3, #16]
 80102fe:	4798      	blx	r3
 8010300:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 8010302:	4606      	mov	r6, r0
 8010304:	b903      	cbnz	r3, 8010308 <_ZN8touchgfx3HAL4tickEv+0x100>
 8010306:	6760      	str	r0, [r4, #116]	@ 0x74
 8010308:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801030a:	4a1e      	ldr	r2, [pc, #120]	@ (8010384 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 801030c:	1af3      	subs	r3, r6, r3
 801030e:	4293      	cmp	r3, r2
 8010310:	d914      	bls.n	801033c <_ZN8touchgfx3HAL4tickEv+0x134>
 8010312:	6920      	ldr	r0, [r4, #16]
 8010314:	6803      	ldr	r3, [r0, #0]
 8010316:	699b      	ldr	r3, [r3, #24]
 8010318:	4798      	blx	r3
 801031a:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 801031c:	2264      	movs	r2, #100	@ 0x64
 801031e:	1af3      	subs	r3, r6, r3
 8010320:	fbb3 f3f2 	udiv	r3, r3, r2
 8010324:	fbb0 f0f3 	udiv	r0, r0, r3
 8010328:	2800      	cmp	r0, #0
 801032a:	dc1d      	bgt.n	8010368 <_ZN8touchgfx3HAL4tickEv+0x160>
 801032c:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 8010330:	6920      	ldr	r0, [r4, #16]
 8010332:	2100      	movs	r1, #0
 8010334:	6803      	ldr	r3, [r0, #0]
 8010336:	69db      	ldr	r3, [r3, #28]
 8010338:	4798      	blx	r3
 801033a:	6766      	str	r6, [r4, #116]	@ 0x74
 801033c:	f006 fc66 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 8010340:	6803      	ldr	r3, [r0, #0]
 8010342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010344:	4798      	blx	r3
 8010346:	6823      	ldr	r3, [r4, #0]
 8010348:	4620      	mov	r0, r4
 801034a:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801034e:	4798      	blx	r3
 8010350:	2001      	movs	r0, #1
 8010352:	f7f1 fd2d 	bl	8001db0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010356:	2300      	movs	r3, #0
 8010358:	702b      	strb	r3, [r5, #0]
 801035a:	b004      	add	sp, #16
 801035c:	bd70      	pop	{r4, r5, r6, pc}
 801035e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8010362:	4620      	mov	r0, r4
 8010364:	4798      	blx	r3
 8010366:	e7af      	b.n	80102c8 <_ZN8touchgfx3HAL4tickEv+0xc0>
 8010368:	2863      	cmp	r0, #99	@ 0x63
 801036a:	bfcb      	itete	gt
 801036c:	2300      	movgt	r3, #0
 801036e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 8010372:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 8010376:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 801037a:	e7d9      	b.n	8010330 <_ZN8touchgfx3HAL4tickEv+0x128>
 801037c:	24025e24 	.word	0x24025e24
 8010380:	24025e25 	.word	0x24025e25
 8010384:	05f5e100 	.word	0x05f5e100

08010388 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 8010388:	b510      	push	{r4, lr}
 801038a:	4604      	mov	r4, r0
 801038c:	f7f2 fd52 	bl	8002e34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 8010390:	2200      	movs	r2, #0
 8010392:	6863      	ldr	r3, [r4, #4]
 8010394:	729a      	strb	r2, [r3, #10]
 8010396:	bd10      	pop	{r4, pc}

08010398 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 8010398:	65c1      	str	r1, [r0, #92]	@ 0x5c
 801039a:	301c      	adds	r0, #28
 801039c:	f014 b8d2 	b.w	8024544 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

080103a0 <_ZN8touchgfx3HAL5touchEll>:
 80103a0:	b530      	push	{r4, r5, lr}
 80103a2:	b087      	sub	sp, #28
 80103a4:	4604      	mov	r4, r0
 80103a6:	a804      	add	r0, sp, #16
 80103a8:	e9cd 1204 	strd	r1, r2, [sp, #16]
 80103ac:	f006 fa1c 	bl	80167e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 80103b0:	9b04      	ldr	r3, [sp, #16]
 80103b2:	a906      	add	r1, sp, #24
 80103b4:	a803      	add	r0, sp, #12
 80103b6:	f8ad 300c 	strh.w	r3, [sp, #12]
 80103ba:	9b05      	ldr	r3, [sp, #20]
 80103bc:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 80103c0:	f006 fa64 	bl	801688c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 80103c4:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 80103c8:	f104 001c 	add.w	r0, r4, #28
 80103cc:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 80103d0:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 80103d4:	b189      	cbz	r1, 80103fa <_ZN8touchgfx3HAL5touchEll+0x5a>
 80103d6:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 80103da:	9300      	str	r3, [sp, #0]
 80103dc:	4613      	mov	r3, r2
 80103de:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 80103e2:	462a      	mov	r2, r5
 80103e4:	f014 f8be 	bl	8024564 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 80103e8:	b128      	cbz	r0, 80103f6 <_ZN8touchgfx3HAL5touchEll+0x56>
 80103ea:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 80103ee:	6623      	str	r3, [r4, #96]	@ 0x60
 80103f0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80103f4:	6663      	str	r3, [r4, #100]	@ 0x64
 80103f6:	b007      	add	sp, #28
 80103f8:	bd30      	pop	{r4, r5, pc}
 80103fa:	f014 f8f3 	bl	80245e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80103fe:	2301      	movs	r3, #1
 8010400:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 8010404:	e7f1      	b.n	80103ea <_ZN8touchgfx3HAL5touchEll+0x4a>

08010406 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 8010406:	b510      	push	{r4, lr}
 8010408:	2b00      	cmp	r3, #0
 801040a:	d046      	beq.n	801049a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801040c:	ea81 0002 	eor.w	r0, r1, r2
 8010410:	07c4      	lsls	r4, r0, #31
 8010412:	d508      	bpl.n	8010426 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 8010414:	440b      	add	r3, r1
 8010416:	3a01      	subs	r2, #1
 8010418:	428b      	cmp	r3, r1
 801041a:	d93e      	bls.n	801049a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 801041c:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010420:	f801 0b01 	strb.w	r0, [r1], #1
 8010424:	e7f8      	b.n	8010418 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 8010426:	07d0      	lsls	r0, r2, #31
 8010428:	bf42      	ittt	mi
 801042a:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 801042e:	f103 33ff 	addmi.w	r3, r3, #4294967295
 8010432:	f801 0b01 	strbmi.w	r0, [r1], #1
 8010436:	2b01      	cmp	r3, #1
 8010438:	d911      	bls.n	801045e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801043a:	ea81 0402 	eor.w	r4, r1, r2
 801043e:	4610      	mov	r0, r2
 8010440:	07a4      	lsls	r4, r4, #30
 8010442:	d022      	beq.n	801048a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 8010444:	f023 0401 	bic.w	r4, r3, #1
 8010448:	440c      	add	r4, r1
 801044a:	428c      	cmp	r4, r1
 801044c:	4602      	mov	r2, r0
 801044e:	d904      	bls.n	801045a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 8010450:	8812      	ldrh	r2, [r2, #0]
 8010452:	3002      	adds	r0, #2
 8010454:	f821 2b02 	strh.w	r2, [r1], #2
 8010458:	e7f7      	b.n	801044a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 801045a:	f003 0301 	and.w	r3, r3, #1
 801045e:	f023 0003 	bic.w	r0, r3, #3
 8010462:	4408      	add	r0, r1
 8010464:	4288      	cmp	r0, r1
 8010466:	4614      	mov	r4, r2
 8010468:	d904      	bls.n	8010474 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 801046a:	6824      	ldr	r4, [r4, #0]
 801046c:	3204      	adds	r2, #4
 801046e:	f841 4b04 	str.w	r4, [r1], #4
 8010472:	e7f7      	b.n	8010464 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 8010474:	f003 0303 	and.w	r3, r3, #3
 8010478:	3a01      	subs	r2, #1
 801047a:	440b      	add	r3, r1
 801047c:	428b      	cmp	r3, r1
 801047e:	d90c      	bls.n	801049a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 8010480:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 8010484:	f801 0b01 	strb.w	r0, [r1], #1
 8010488:	e7f8      	b.n	801047c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 801048a:	0790      	lsls	r0, r2, #30
 801048c:	d0e7      	beq.n	801045e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801048e:	f832 0b02 	ldrh.w	r0, [r2], #2
 8010492:	3b02      	subs	r3, #2
 8010494:	f821 0b02 	strh.w	r0, [r1], #2
 8010498:	e7e1      	b.n	801045e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 801049a:	2001      	movs	r0, #1
 801049c:	bd10      	pop	{r4, pc}

0801049e <_ZN8touchgfx3HAL7noTouchEv>:
 801049e:	b510      	push	{r4, lr}
 80104a0:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 80104a4:	4604      	mov	r4, r0
 80104a6:	b153      	cbz	r3, 80104be <_ZN8touchgfx3HAL7noTouchEv+0x20>
 80104a8:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 80104ac:	2101      	movs	r1, #1
 80104ae:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 80104b2:	301c      	adds	r0, #28
 80104b4:	f014 f896 	bl	80245e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 80104b8:	2300      	movs	r3, #0
 80104ba:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 80104be:	bd10      	pop	{r4, pc}

080104c0 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 80104c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80104c4:	b085      	sub	sp, #20
 80104c6:	4604      	mov	r4, r0
 80104c8:	2000      	movs	r0, #0
 80104ca:	4699      	mov	r9, r3
 80104cc:	ad04      	add	r5, sp, #16
 80104ce:	460f      	mov	r7, r1
 80104d0:	4690      	mov	r8, r2
 80104d2:	f845 0d04 	str.w	r0, [r5, #-4]!
 80104d6:	69a0      	ldr	r0, [r4, #24]
 80104d8:	6806      	ldr	r6, [r0, #0]
 80104da:	9501      	str	r5, [sp, #4]
 80104dc:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 80104e0:	9500      	str	r5, [sp, #0]
 80104e2:	6835      	ldr	r5, [r6, #0]
 80104e4:	47a8      	blx	r5
 80104e6:	4d10      	ldr	r5, [pc, #64]	@ (8010528 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 80104e8:	4606      	mov	r6, r0
 80104ea:	f8a5 9000 	strh.w	r9, [r5]
 80104ee:	f7f3 fdab 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80104f2:	6803      	ldr	r3, [r0, #0]
 80104f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80104f6:	4798      	blx	r3
 80104f8:	b128      	cbz	r0, 8010506 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 80104fa:	2801      	cmp	r0, #1
 80104fc:	d00b      	beq.n	8010516 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 80104fe:	4630      	mov	r0, r6
 8010500:	b005      	add	sp, #20
 8010502:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8010506:	882b      	ldrh	r3, [r5, #0]
 8010508:	fb08 7203 	mla	r2, r8, r3, r7
 801050c:	9b03      	ldr	r3, [sp, #12]
 801050e:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 8010512:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8010514:	e7f3      	b.n	80104fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010516:	882a      	ldrh	r2, [r5, #0]
 8010518:	9b03      	ldr	r3, [sp, #12]
 801051a:	fb08 7202 	mla	r2, r8, r2, r7
 801051e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8010522:	1a9a      	subs	r2, r3, r2
 8010524:	63e2      	str	r2, [r4, #60]	@ 0x3c
 8010526:	e7ea      	b.n	80104fe <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 8010528:	24025e1a 	.word	0x24025e1a

0801052c <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 801052c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801052e:	b08b      	sub	sp, #44	@ 0x2c
 8010530:	4617      	mov	r7, r2
 8010532:	4604      	mov	r4, r0
 8010534:	460e      	mov	r6, r1
 8010536:	461d      	mov	r5, r3
 8010538:	f7f3 fd86 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 801053c:	6803      	ldr	r3, [r0, #0]
 801053e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010540:	4798      	blx	r3
 8010542:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8010546:	9007      	str	r0, [sp, #28]
 8010548:	4631      	mov	r1, r6
 801054a:	6822      	ldr	r2, [r4, #0]
 801054c:	e9cd 0308 	strd	r0, r3, [sp, #32]
 8010550:	4b0c      	ldr	r3, [pc, #48]	@ (8010584 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 8010552:	4620      	mov	r0, r4
 8010554:	881b      	ldrh	r3, [r3, #0]
 8010556:	9306      	str	r3, [sp, #24]
 8010558:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801055c:	9305      	str	r3, [sp, #20]
 801055e:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 8010562:	9304      	str	r3, [sp, #16]
 8010564:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010568:	9303      	str	r3, [sp, #12]
 801056a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801056e:	9302      	str	r3, [sp, #8]
 8010570:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010574:	e9cd 5300 	strd	r5, r3, [sp]
 8010578:	463b      	mov	r3, r7
 801057a:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 801057c:	2200      	movs	r2, #0
 801057e:	47a8      	blx	r5
 8010580:	b00b      	add	sp, #44	@ 0x2c
 8010582:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010584:	24025e1a 	.word	0x24025e1a

08010588 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 8010588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801058c:	4698      	mov	r8, r3
 801058e:	6803      	ldr	r3, [r0, #0]
 8010590:	b08b      	sub	sp, #44	@ 0x2c
 8010592:	4617      	mov	r7, r2
 8010594:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 8010596:	460e      	mov	r6, r1
 8010598:	4b13      	ldr	r3, [pc, #76]	@ (80105e8 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 801059a:	4604      	mov	r4, r0
 801059c:	f8b3 9000 	ldrh.w	r9, [r3]
 80105a0:	f7f3 fd52 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80105a4:	6803      	ldr	r3, [r0, #0]
 80105a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80105a8:	4798      	blx	r3
 80105aa:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 80105ae:	2200      	movs	r2, #0
 80105b0:	4631      	mov	r1, r6
 80105b2:	e9cd 0308 	strd	r0, r3, [sp, #32]
 80105b6:	2302      	movs	r3, #2
 80105b8:	4620      	mov	r0, r4
 80105ba:	e9cd 9306 	strd	r9, r3, [sp, #24]
 80105be:	2301      	movs	r3, #1
 80105c0:	9305      	str	r3, [sp, #20]
 80105c2:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80105c6:	9304      	str	r3, [sp, #16]
 80105c8:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 80105cc:	9303      	str	r3, [sp, #12]
 80105ce:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80105d2:	9302      	str	r3, [sp, #8]
 80105d4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80105d8:	e9cd 8300 	strd	r8, r3, [sp]
 80105dc:	463b      	mov	r3, r7
 80105de:	47a8      	blx	r5
 80105e0:	b00b      	add	sp, #44	@ 0x2c
 80105e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80105e6:	bf00      	nop
 80105e8:	24025e1a 	.word	0x24025e1a

080105ec <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 80105ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80105f0:	4698      	mov	r8, r3
 80105f2:	6803      	ldr	r3, [r0, #0]
 80105f4:	b087      	sub	sp, #28
 80105f6:	460e      	mov	r6, r1
 80105f8:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 80105fa:	4617      	mov	r7, r2
 80105fc:	4b0f      	ldr	r3, [pc, #60]	@ (801063c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 80105fe:	4604      	mov	r4, r0
 8010600:	f8b3 9000 	ldrh.w	r9, [r3]
 8010604:	f7f3 fd20 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8010608:	6803      	ldr	r3, [r0, #0]
 801060a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801060c:	4798      	blx	r3
 801060e:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 8010612:	463a      	mov	r2, r7
 8010614:	4631      	mov	r1, r6
 8010616:	f8cd 900c 	str.w	r9, [sp, #12]
 801061a:	e9cd 0304 	strd	r0, r3, [sp, #16]
 801061e:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 8010622:	4620      	mov	r0, r4
 8010624:	9302      	str	r3, [sp, #8]
 8010626:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 801062a:	9301      	str	r3, [sp, #4]
 801062c:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8010630:	9300      	str	r3, [sp, #0]
 8010632:	4643      	mov	r3, r8
 8010634:	47a8      	blx	r5
 8010636:	b007      	add	sp, #28
 8010638:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801063c:	24025e1a 	.word	0x24025e1a

08010640 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 8010640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010644:	4604      	mov	r4, r0
 8010646:	b08f      	sub	sp, #60	@ 0x3c
 8010648:	4610      	mov	r0, r2
 801064a:	460d      	mov	r5, r1
 801064c:	4691      	mov	r9, r2
 801064e:	461e      	mov	r6, r3
 8010650:	f009 fe2c 	bl	801a2ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 8010654:	2800      	cmp	r0, #0
 8010656:	f000 809d 	beq.w	8010794 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 801065a:	6823      	ldr	r3, [r4, #0]
 801065c:	4620      	mov	r0, r4
 801065e:	f8df b198 	ldr.w	fp, [pc, #408]	@ 80107f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 8010662:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 8010666:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010668:	4798      	blx	r3
 801066a:	6823      	ldr	r3, [r4, #0]
 801066c:	4620      	mov	r0, r4
 801066e:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 80107fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 8010672:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010674:	4798      	blx	r3
 8010676:	f8bb 3000 	ldrh.w	r3, [fp]
 801067a:	4f5c      	ldr	r7, [pc, #368]	@ (80107ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801067c:	9301      	str	r3, [sp, #4]
 801067e:	f8ba 3000 	ldrh.w	r3, [sl]
 8010682:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 8010686:	4640      	mov	r0, r8
 8010688:	9302      	str	r3, [sp, #8]
 801068a:	883b      	ldrh	r3, [r7, #0]
 801068c:	9303      	str	r3, [sp, #12]
 801068e:	4b58      	ldr	r3, [pc, #352]	@ (80107f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010690:	881a      	ldrh	r2, [r3, #0]
 8010692:	9305      	str	r3, [sp, #20]
 8010694:	9204      	str	r2, [sp, #16]
 8010696:	f009 ff59 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801069a:	8038      	strh	r0, [r7, #0]
 801069c:	4640      	mov	r0, r8
 801069e:	f009 ff89 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80106a2:	9b05      	ldr	r3, [sp, #20]
 80106a4:	b280      	uxth	r0, r0
 80106a6:	8018      	strh	r0, [r3, #0]
 80106a8:	4b52      	ldr	r3, [pc, #328]	@ (80107f4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 80106aa:	781b      	ldrb	r3, [r3, #0]
 80106ac:	2b00      	cmp	r3, #0
 80106ae:	d174      	bne.n	801079a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 80106b0:	883b      	ldrh	r3, [r7, #0]
 80106b2:	f8aa 0000 	strh.w	r0, [sl]
 80106b6:	f8ab 3000 	strh.w	r3, [fp]
 80106ba:	4648      	mov	r0, r9
 80106bc:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 80106c0:	f009 fdf4 	bl	801a2ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 80106c4:	2200      	movs	r2, #0
 80106c6:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 80106ca:	4611      	mov	r1, r2
 80106cc:	4628      	mov	r0, r5
 80106ce:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 80106d2:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 80106d6:	f7f4 f875 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 80106da:	2301      	movs	r3, #1
 80106dc:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 80106e0:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 80106e4:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80106e8:	2b00      	cmp	r3, #0
 80106ea:	dd5c      	ble.n	80107a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80106ec:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 80106f0:	2b00      	cmp	r3, #0
 80106f2:	dd58      	ble.n	80107a6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 80106f4:	462a      	mov	r2, r5
 80106f6:	ab0a      	add	r3, sp, #40	@ 0x28
 80106f8:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80106fc:	6851      	ldr	r1, [r2, #4]
 80106fe:	c303      	stmia	r3!, {r0, r1}
 8010700:	4631      	mov	r1, r6
 8010702:	a80a      	add	r0, sp, #40	@ 0x28
 8010704:	f7ff fc06 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8010708:	4b38      	ldr	r3, [pc, #224]	@ (80107ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801070a:	2100      	movs	r1, #0
 801070c:	f9b3 2000 	ldrsh.w	r2, [r3]
 8010710:	4b37      	ldr	r3, [pc, #220]	@ (80107f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 8010712:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8010716:	aa0a      	add	r2, sp, #40	@ 0x28
 8010718:	f9b3 3000 	ldrsh.w	r3, [r3]
 801071c:	910c      	str	r1, [sp, #48]	@ 0x30
 801071e:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8010722:	ab08      	add	r3, sp, #32
 8010724:	e892 0003 	ldmia.w	r2, {r0, r1}
 8010728:	e883 0003 	stmia.w	r3, {r0, r1}
 801072c:	4618      	mov	r0, r3
 801072e:	a90c      	add	r1, sp, #48	@ 0x30
 8010730:	f7ff fbf0 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8010734:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8010736:	2b00      	cmp	r3, #0
 8010738:	d13c      	bne.n	80107b4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 801073a:	2000      	movs	r0, #0
 801073c:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 8010740:	2600      	movs	r6, #0
 8010742:	696b      	ldr	r3, [r5, #20]
 8010744:	a908      	add	r1, sp, #32
 8010746:	682a      	ldr	r2, [r5, #0]
 8010748:	4628      	mov	r0, r5
 801074a:	9305      	str	r3, [sp, #20]
 801074c:	616e      	str	r6, [r5, #20]
 801074e:	6892      	ldr	r2, [r2, #8]
 8010750:	4790      	blx	r2
 8010752:	9b05      	ldr	r3, [sp, #20]
 8010754:	4652      	mov	r2, sl
 8010756:	4649      	mov	r1, r9
 8010758:	616b      	str	r3, [r5, #20]
 801075a:	4628      	mov	r0, r5
 801075c:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 8010760:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 8010764:	f7f4 f82e 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 8010768:	9a01      	ldr	r2, [sp, #4]
 801076a:	4b23      	ldr	r3, [pc, #140]	@ (80107f8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 801076c:	4620      	mov	r0, r4
 801076e:	801a      	strh	r2, [r3, #0]
 8010770:	9a02      	ldr	r2, [sp, #8]
 8010772:	4b22      	ldr	r3, [pc, #136]	@ (80107fc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 8010774:	801a      	strh	r2, [r3, #0]
 8010776:	9a03      	ldr	r2, [sp, #12]
 8010778:	4b1c      	ldr	r3, [pc, #112]	@ (80107ec <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 801077a:	801a      	strh	r2, [r3, #0]
 801077c:	4b1c      	ldr	r3, [pc, #112]	@ (80107f0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 801077e:	9a04      	ldr	r2, [sp, #16]
 8010780:	801a      	strh	r2, [r3, #0]
 8010782:	6823      	ldr	r3, [r4, #0]
 8010784:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 8010788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801078a:	4798      	blx	r3
 801078c:	6823      	ldr	r3, [r4, #0]
 801078e:	4620      	mov	r0, r4
 8010790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010792:	4798      	blx	r3
 8010794:	b00f      	add	sp, #60	@ 0x3c
 8010796:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801079a:	883b      	ldrh	r3, [r7, #0]
 801079c:	f8ab 0000 	strh.w	r0, [fp]
 80107a0:	f8aa 3000 	strh.w	r3, [sl]
 80107a4:	e789      	b.n	80106ba <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 80107a6:	462a      	mov	r2, r5
 80107a8:	ab0a      	add	r3, sp, #40	@ 0x28
 80107aa:	f852 0f04 	ldr.w	r0, [r2, #4]!
 80107ae:	6851      	ldr	r1, [r2, #4]
 80107b0:	c303      	stmia	r3!, {r0, r1}
 80107b2:	e7a9      	b.n	8010708 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 80107b4:	a807      	add	r0, sp, #28
 80107b6:	f00a f83f 	bl	801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80107ba:	4606      	mov	r6, r0
 80107bc:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 80107be:	6803      	ldr	r3, [r0, #0]
 80107c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107c2:	4798      	blx	r3
 80107c4:	4286      	cmp	r6, r0
 80107c6:	d1b8      	bne.n	801073a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 80107c8:	f7f3 fc3e 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80107cc:	6803      	ldr	r3, [r0, #0]
 80107ce:	4606      	mov	r6, r0
 80107d0:	a807      	add	r0, sp, #28
 80107d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80107d4:	9305      	str	r3, [sp, #20]
 80107d6:	f00a f82f 	bl	801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80107da:	9b05      	ldr	r3, [sp, #20]
 80107dc:	4601      	mov	r1, r0
 80107de:	4630      	mov	r0, r6
 80107e0:	4798      	blx	r3
 80107e2:	f080 0001 	eor.w	r0, r0, #1
 80107e6:	b2c0      	uxtb	r0, r0
 80107e8:	e7a8      	b.n	801073c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 80107ea:	bf00      	nop
 80107ec:	24025e14 	.word	0x24025e14
 80107f0:	24025e16 	.word	0x24025e16
 80107f4:	24025e18 	.word	0x24025e18
 80107f8:	24025e1a 	.word	0x24025e1a
 80107fc:	24025e1c 	.word	0x24025e1c

08010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 8010800:	4b07      	ldr	r3, [pc, #28]	@ (8010820 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 8010802:	b510      	push	{r4, lr}
 8010804:	781b      	ldrb	r3, [r3, #0]
 8010806:	4604      	mov	r4, r0
 8010808:	b13b      	cbz	r3, 801081a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 801080a:	6803      	ldr	r3, [r0, #0]
 801080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801080e:	4798      	blx	r3
 8010810:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8010812:	4283      	cmp	r3, r0
 8010814:	d101      	bne.n	801081a <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 8010816:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8010818:	bd10      	pop	{r4, pc}
 801081a:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 801081c:	e7fc      	b.n	8010818 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 801081e:	bf00      	nop
 8010820:	24025e1e 	.word	0x24025e1e

08010824 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 8010824:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010828:	461d      	mov	r5, r3
 801082a:	b08a      	sub	sp, #40	@ 0x28
 801082c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8010830:	4690      	mov	r8, r2
 8010832:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 8010836:	2400      	movs	r4, #0
 8010838:	4607      	mov	r7, r0
 801083a:	fb06 8505 	mla	r5, r6, r5, r8
 801083e:	9404      	str	r4, [sp, #16]
 8010840:	f88d 4020 	strb.w	r4, [sp, #32]
 8010844:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010848:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 801084c:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010850:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010854:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010858:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 801085c:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010860:	f7ff ffce 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010864:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 8010868:	6878      	ldr	r0, [r7, #4]
 801086a:	f8ad 601e 	strh.w	r6, [sp, #30]
 801086e:	a901      	add	r1, sp, #4
 8010870:	9505      	str	r5, [sp, #20]
 8010872:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010876:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 801087a:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 801087e:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 8010882:	6803      	ldr	r3, [r0, #0]
 8010884:	685b      	ldr	r3, [r3, #4]
 8010886:	4798      	blx	r3
 8010888:	b00a      	add	sp, #40	@ 0x28
 801088a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801088e <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 801088e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8010892:	b08b      	sub	sp, #44	@ 0x2c
 8010894:	2400      	movs	r4, #0
 8010896:	4691      	mov	r9, r2
 8010898:	461d      	mov	r5, r3
 801089a:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 801089e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80108a2:	4688      	mov	r8, r1
 80108a4:	4607      	mov	r7, r0
 80108a6:	9404      	str	r4, [sp, #16]
 80108a8:	fb06 9505 	mla	r5, r6, r5, r9
 80108ac:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80108b0:	f7ff ffa6 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80108b4:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 80108b8:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 80108bc:	6878      	ldr	r0, [r7, #4]
 80108be:	f8ad 3018 	strh.w	r3, [sp, #24]
 80108c2:	a901      	add	r1, sp, #4
 80108c4:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 80108c8:	9505      	str	r5, [sp, #20]
 80108ca:	f8ad 301a 	strh.w	r3, [sp, #26]
 80108ce:	f8ad 401c 	strh.w	r4, [sp, #28]
 80108d2:	f8ad 601e 	strh.w	r6, [sp, #30]
 80108d6:	f8cd 8010 	str.w	r8, [sp, #16]
 80108da:	f8ad 4020 	strh.w	r4, [sp, #32]
 80108de:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80108e2:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 80108e6:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 80108ea:	6803      	ldr	r3, [r0, #0]
 80108ec:	685b      	ldr	r3, [r3, #4]
 80108ee:	4798      	blx	r3
 80108f0:	b00b      	add	sp, #44	@ 0x2c
 80108f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

080108f8 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 80108f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80108fc:	b08a      	sub	sp, #40	@ 0x28
 80108fe:	4698      	mov	r8, r3
 8010900:	2300      	movs	r3, #0
 8010902:	4606      	mov	r6, r0
 8010904:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8010908:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801090c:	2d0b      	cmp	r5, #11
 801090e:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 8010912:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 8010916:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 801091a:	9304      	str	r3, [sp, #16]
 801091c:	d137      	bne.n	801098e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 801091e:	2380      	movs	r3, #128	@ 0x80
 8010920:	f88d 0020 	strb.w	r0, [sp, #32]
 8010924:	4630      	mov	r0, r6
 8010926:	9203      	str	r2, [sp, #12]
 8010928:	e9cd 3101 	strd	r3, r1, [sp, #4]
 801092c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010930:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010934:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010938:	f8ad 301a 	strh.w	r3, [sp, #26]
 801093c:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 8010940:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010944:	f7ff ff5c 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010948:	2c0b      	cmp	r4, #11
 801094a:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 801094e:	f8ad 701e 	strh.w	r7, [sp, #30]
 8010952:	bf94      	ite	ls
 8010954:	4b19      	ldrls	r3, [pc, #100]	@ (80109bc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 8010956:	2100      	movhi	r1, #0
 8010958:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 801095c:	bf98      	it	ls
 801095e:	5d19      	ldrbls	r1, [r3, r4]
 8010960:	fb02 8307 	mla	r3, r2, r7, r8
 8010964:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 8010968:	10c9      	asrs	r1, r1, #3
 801096a:	fb01 0003 	mla	r0, r1, r3, r0
 801096e:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 8010972:	a901      	add	r1, sp, #4
 8010974:	9005      	str	r0, [sp, #20]
 8010976:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 801097a:	2300      	movs	r3, #0
 801097c:	6870      	ldr	r0, [r6, #4]
 801097e:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010982:	6803      	ldr	r3, [r0, #0]
 8010984:	685b      	ldr	r3, [r3, #4]
 8010986:	4798      	blx	r3
 8010988:	b00a      	add	sp, #40	@ 0x28
 801098a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801098e:	2d02      	cmp	r5, #2
 8010990:	d109      	bne.n	80109a6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 8010992:	28ff      	cmp	r0, #255	@ 0xff
 8010994:	d105      	bne.n	80109a2 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 8010996:	f1bc 0f00 	cmp.w	ip, #0
 801099a:	bf14      	ite	ne
 801099c:	2340      	movne	r3, #64	@ 0x40
 801099e:	2320      	moveq	r3, #32
 80109a0:	e7be      	b.n	8010920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80109a2:	2340      	movs	r3, #64	@ 0x40
 80109a4:	e7bc      	b.n	8010920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80109a6:	28ff      	cmp	r0, #255	@ 0xff
 80109a8:	d105      	bne.n	80109b6 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 80109aa:	f1bc 0f00 	cmp.w	ip, #0
 80109ae:	bf14      	ite	ne
 80109b0:	2304      	movne	r3, #4
 80109b2:	2301      	moveq	r3, #1
 80109b4:	e7b4      	b.n	8010920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80109b6:	2304      	movs	r3, #4
 80109b8:	e7b2      	b.n	8010920 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 80109ba:	bf00      	nop
 80109bc:	0802ac34 	.word	0x0802ac34

080109c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 80109c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80109c4:	b08b      	sub	sp, #44	@ 0x2c
 80109c6:	461d      	mov	r5, r3
 80109c8:	2400      	movs	r4, #0
 80109ca:	4688      	mov	r8, r1
 80109cc:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 80109d0:	4693      	mov	fp, r2
 80109d2:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 80109d6:	4607      	mov	r7, r0
 80109d8:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80109dc:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 80109e0:	9404      	str	r4, [sp, #16]
 80109e2:	bf14      	ite	ne
 80109e4:	2308      	movne	r3, #8
 80109e6:	2302      	moveq	r3, #2
 80109e8:	fb05 b50a 	mla	r5, r5, sl, fp
 80109ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80109f0:	f7ff ff06 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 80109f4:	2e0b      	cmp	r6, #11
 80109f6:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80109fa:	a901      	add	r1, sp, #4
 80109fc:	bf98      	it	ls
 80109fe:	4b13      	ldrls	r3, [pc, #76]	@ (8010a4c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 8010a00:	f8ad a01e 	strh.w	sl, [sp, #30]
 8010a04:	bf98      	it	ls
 8010a06:	5d9c      	ldrbls	r4, [r3, r6]
 8010a08:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 8010a0c:	10e4      	asrs	r4, r4, #3
 8010a0e:	f8cd 8010 	str.w	r8, [sp, #16]
 8010a12:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010a16:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010a1a:	fb04 0405 	mla	r4, r4, r5, r0
 8010a1e:	6878      	ldr	r0, [r7, #4]
 8010a20:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010a24:	2300      	movs	r3, #0
 8010a26:	9405      	str	r4, [sp, #20]
 8010a28:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010a2c:	f88d 9020 	strb.w	r9, [sp, #32]
 8010a30:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 8010a34:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 8010a38:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 8010a3c:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 8010a40:	6803      	ldr	r3, [r0, #0]
 8010a42:	685b      	ldr	r3, [r3, #4]
 8010a44:	4798      	blx	r3
 8010a46:	b00b      	add	sp, #44	@ 0x2c
 8010a48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010a4c:	0802ac34 	.word	0x0802ac34

08010a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 8010a50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010a54:	461e      	mov	r6, r3
 8010a56:	4b0a      	ldr	r3, [pc, #40]	@ (8010a80 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 8010a58:	460f      	mov	r7, r1
 8010a5a:	4690      	mov	r8, r2
 8010a5c:	881d      	ldrh	r5, [r3, #0]
 8010a5e:	f7f3 faf3 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8010a62:	6803      	ldr	r3, [r0, #0]
 8010a64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010a66:	4798      	blx	r3
 8010a68:	280b      	cmp	r0, #11
 8010a6a:	bf96      	itet	ls
 8010a6c:	4b05      	ldrls	r3, [pc, #20]	@ (8010a84 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 8010a6e:	2400      	movhi	r4, #0
 8010a70:	5c1c      	ldrbls	r4, [r3, r0]
 8010a72:	fb08 7005 	mla	r0, r8, r5, r7
 8010a76:	10e4      	asrs	r4, r4, #3
 8010a78:	fb04 6000 	mla	r0, r4, r0, r6
 8010a7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010a80:	24025e1a 	.word	0x24025e1a
 8010a84:	0802ac34 	.word	0x0802ac34

08010a88 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 8010a88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010a8a:	b08b      	sub	sp, #44	@ 0x2c
 8010a8c:	461f      	mov	r7, r3
 8010a8e:	4604      	mov	r4, r0
 8010a90:	4616      	mov	r6, r2
 8010a92:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 8010a96:	2500      	movs	r5, #0
 8010a98:	e9cd 3101 	strd	r3, r1, [sp, #4]
 8010a9c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 8010aa0:	9504      	str	r5, [sp, #16]
 8010aa2:	f8ad 3018 	strh.w	r3, [sp, #24]
 8010aa6:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 8010aaa:	f8ad 301a 	strh.w	r3, [sp, #26]
 8010aae:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 8010ab2:	f8ad 301c 	strh.w	r3, [sp, #28]
 8010ab6:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8010aba:	f88d 3020 	strb.w	r3, [sp, #32]
 8010abe:	f7ff fe9f 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010ac2:	463a      	mov	r2, r7
 8010ac4:	4631      	mov	r1, r6
 8010ac6:	4603      	mov	r3, r0
 8010ac8:	4620      	mov	r0, r4
 8010aca:	f7ff ffc1 	bl	8010a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010ace:	4b0e      	ldr	r3, [pc, #56]	@ (8010b08 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 8010ad0:	9005      	str	r0, [sp, #20]
 8010ad2:	881b      	ldrh	r3, [r3, #0]
 8010ad4:	f8ad 301e 	strh.w	r3, [sp, #30]
 8010ad8:	f7f3 fab6 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8010adc:	6803      	ldr	r3, [r0, #0]
 8010ade:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010ae0:	4798      	blx	r3
 8010ae2:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8010ae4:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 8010ae8:	a901      	add	r1, sp, #4
 8010aea:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8010aee:	9304      	str	r3, [sp, #16]
 8010af0:	6860      	ldr	r0, [r4, #4]
 8010af2:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 8010af6:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 8010afa:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 8010afe:	6803      	ldr	r3, [r0, #0]
 8010b00:	685b      	ldr	r3, [r3, #4]
 8010b02:	4798      	blx	r3
 8010b04:	b00b      	add	sp, #44	@ 0x2c
 8010b06:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b08:	24025e1a 	.word	0x24025e1a

08010b0c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 8010b0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010b0e:	b08d      	sub	sp, #52	@ 0x34
 8010b10:	2501      	movs	r5, #1
 8010b12:	4604      	mov	r4, r0
 8010b14:	466b      	mov	r3, sp
 8010b16:	9503      	str	r5, [sp, #12]
 8010b18:	e883 0006 	stmia.w	r3, {r1, r2}
 8010b1c:	2300      	movs	r3, #0
 8010b1e:	f8bd 6000 	ldrh.w	r6, [sp]
 8010b22:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 8010b26:	9306      	str	r3, [sp, #24]
 8010b28:	6803      	ldr	r3, [r0, #0]
 8010b2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010b2c:	4798      	blx	r3
 8010b2e:	463a      	mov	r2, r7
 8010b30:	4631      	mov	r1, r6
 8010b32:	4603      	mov	r3, r0
 8010b34:	4620      	mov	r0, r4
 8010b36:	f7ff ff8b 	bl	8010a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010b3a:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8010b3c:	9004      	str	r0, [sp, #16]
 8010b3e:	9307      	str	r3, [sp, #28]
 8010b40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010b44:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010b48:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010b4c:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010b50:	4b0e      	ldr	r3, [pc, #56]	@ (8010b8c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 8010b52:	881b      	ldrh	r3, [r3, #0]
 8010b54:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010b58:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010b5c:	f7f3 fa74 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8010b60:	6803      	ldr	r3, [r0, #0]
 8010b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010b64:	4798      	blx	r3
 8010b66:	23ff      	movs	r3, #255	@ 0xff
 8010b68:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010b6c:	a903      	add	r1, sp, #12
 8010b6e:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010b72:	6860      	ldr	r0, [r4, #4]
 8010b74:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010b78:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010b7c:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010b80:	6803      	ldr	r3, [r0, #0]
 8010b82:	685b      	ldr	r3, [r3, #4]
 8010b84:	4798      	blx	r3
 8010b86:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8010b88:	b00d      	add	sp, #52	@ 0x34
 8010b8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010b8c:	24025e1a 	.word	0x24025e1a

08010b90 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 8010b90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010b94:	b08c      	sub	sp, #48	@ 0x30
 8010b96:	461e      	mov	r6, r3
 8010b98:	2300      	movs	r3, #0
 8010b9a:	4604      	mov	r4, r0
 8010b9c:	466d      	mov	r5, sp
 8010b9e:	9306      	str	r3, [sp, #24]
 8010ba0:	6803      	ldr	r3, [r0, #0]
 8010ba2:	e885 0006 	stmia.w	r5, {r1, r2}
 8010ba6:	2501      	movs	r5, #1
 8010ba8:	f8bd 7000 	ldrh.w	r7, [sp]
 8010bac:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 8010bb0:	9503      	str	r5, [sp, #12]
 8010bb2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010bb4:	4798      	blx	r3
 8010bb6:	4642      	mov	r2, r8
 8010bb8:	4639      	mov	r1, r7
 8010bba:	4603      	mov	r3, r0
 8010bbc:	4620      	mov	r0, r4
 8010bbe:	f7ff ff47 	bl	8010a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010bc2:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8010bc6:	9004      	str	r0, [sp, #16]
 8010bc8:	f8ad 3020 	strh.w	r3, [sp, #32]
 8010bcc:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 8010bd0:	9607      	str	r6, [sp, #28]
 8010bd2:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8010bd6:	4b10      	ldr	r3, [pc, #64]	@ (8010c18 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 8010bd8:	881b      	ldrh	r3, [r3, #0]
 8010bda:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 8010bde:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8010be0:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 8010be4:	f7f3 fa30 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8010be8:	6803      	ldr	r3, [r0, #0]
 8010bea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010bec:	4798      	blx	r3
 8010bee:	23ff      	movs	r3, #255	@ 0xff
 8010bf0:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 8010bf4:	a903      	add	r1, sp, #12
 8010bf6:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 8010bfa:	6860      	ldr	r0, [r4, #4]
 8010bfc:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 8010c00:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 8010c04:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 8010c08:	6803      	ldr	r3, [r0, #0]
 8010c0a:	685b      	ldr	r3, [r3, #4]
 8010c0c:	4798      	blx	r3
 8010c0e:	4630      	mov	r0, r6
 8010c10:	b00c      	add	sp, #48	@ 0x30
 8010c12:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010c16:	bf00      	nop
 8010c18:	24025e1a 	.word	0x24025e1a

08010c1c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 8010c1c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8010c1e:	b085      	sub	sp, #20
 8010c20:	4605      	mov	r5, r0
 8010c22:	ac02      	add	r4, sp, #8
 8010c24:	e884 0006 	stmia.w	r4, {r1, r2}
 8010c28:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 8010c2c:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 8010c30:	f7ff fde6 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c34:	4631      	mov	r1, r6
 8010c36:	4603      	mov	r3, r0
 8010c38:	463a      	mov	r2, r7
 8010c3a:	4628      	mov	r0, r5
 8010c3c:	f7ff ff08 	bl	8010a50 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 8010c40:	4a05      	ldr	r2, [pc, #20]	@ (8010c58 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 8010c42:	682b      	ldr	r3, [r5, #0]
 8010c44:	8812      	ldrh	r2, [r2, #0]
 8010c46:	9200      	str	r2, [sp, #0]
 8010c48:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 8010c4a:	4603      	mov	r3, r0
 8010c4c:	4628      	mov	r0, r5
 8010c4e:	e894 0006 	ldmia.w	r4, {r1, r2}
 8010c52:	47b0      	blx	r6
 8010c54:	b005      	add	sp, #20
 8010c56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8010c58:	24025e1a 	.word	0x24025e1a

08010c5c <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 8010c5c:	b570      	push	{r4, r5, r6, lr}
 8010c5e:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 8010c62:	4604      	mov	r4, r0
 8010c64:	b19b      	cbz	r3, 8010c8e <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 8010c66:	2002      	movs	r0, #2
 8010c68:	f7f1 f8d2 	bl	8001e10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 8010c6c:	2300      	movs	r3, #0
 8010c6e:	4620      	mov	r0, r4
 8010c70:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 8010c74:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 8010c78:	6823      	ldr	r3, [r4, #0]
 8010c7a:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 8010c7e:	f7ff fdbf 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010c82:	4601      	mov	r1, r0
 8010c84:	4620      	mov	r0, r4
 8010c86:	462b      	mov	r3, r5
 8010c88:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010c8c:	4718      	bx	r3
 8010c8e:	bd70      	pop	{r4, r5, r6, pc}

08010c90 <_ZN8touchgfx3HAL12setMCUActiveEb>:
 8010c90:	b570      	push	{r4, r5, r6, lr}
 8010c92:	4605      	mov	r5, r0
 8010c94:	460c      	mov	r4, r1
 8010c96:	2003      	movs	r0, #3
 8010c98:	b149      	cbz	r1, 8010cae <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 8010c9a:	f7f1 f859 	bl	8001d50 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 8010c9e:	6928      	ldr	r0, [r5, #16]
 8010ca0:	b168      	cbz	r0, 8010cbe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010ca2:	6803      	ldr	r3, [r0, #0]
 8010ca4:	2101      	movs	r1, #1
 8010ca6:	695b      	ldr	r3, [r3, #20]
 8010ca8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010cac:	4718      	bx	r3
 8010cae:	f7f1 f87f 	bl	8001db0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 8010cb2:	6928      	ldr	r0, [r5, #16]
 8010cb4:	b118      	cbz	r0, 8010cbe <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 8010cb6:	6803      	ldr	r3, [r0, #0]
 8010cb8:	4621      	mov	r1, r4
 8010cba:	695b      	ldr	r3, [r3, #20]
 8010cbc:	e7f4      	b.n	8010ca8 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 8010cbe:	bd70      	pop	{r4, r5, r6, pc}

08010cc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 8010cc0:	b538      	push	{r3, r4, r5, lr}
 8010cc2:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 8010cc6:	4604      	mov	r4, r0
 8010cc8:	460d      	mov	r5, r1
 8010cca:	428b      	cmp	r3, r1
 8010ccc:	d006      	beq.n	8010cdc <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 8010cce:	6803      	ldr	r3, [r0, #0]
 8010cd0:	b929      	cbnz	r1, 8010cde <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 8010cd2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 8010cd6:	4798      	blx	r3
 8010cd8:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 8010cdc:	bd38      	pop	{r3, r4, r5, pc}
 8010cde:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 8010ce2:	e7f8      	b.n	8010cd6 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

08010ce4 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 8010ce4:	4b0d      	ldr	r3, [pc, #52]	@ (8010d1c <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 8010ce6:	b510      	push	{r4, lr}
 8010ce8:	781b      	ldrb	r3, [r3, #0]
 8010cea:	4604      	mov	r4, r0
 8010cec:	b95b      	cbnz	r3, 8010d06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010cee:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 8010cf2:	2b02      	cmp	r3, #2
 8010cf4:	d007      	beq.n	8010d06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010cf6:	6840      	ldr	r0, [r0, #4]
 8010cf8:	f000 f91a 	bl	8010f30 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 8010cfc:	b118      	cbz	r0, 8010d06 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 8010cfe:	6862      	ldr	r2, [r4, #4]
 8010d00:	7a53      	ldrb	r3, [r2, #9]
 8010d02:	2b00      	cmp	r3, #0
 8010d04:	d0fc      	beq.n	8010d00 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 8010d06:	f7f2 f88d 	bl	8002e24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010d0a:	4620      	mov	r0, r4
 8010d0c:	2100      	movs	r1, #0
 8010d0e:	f7ff ffd7 	bl	8010cc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010d12:	4620      	mov	r0, r4
 8010d14:	f7ff fd74 	bl	8010800 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 8010d18:	bd10      	pop	{r4, pc}
 8010d1a:	bf00      	nop
 8010d1c:	24025e1e 	.word	0x24025e1e

08010d20 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 8010d20:	b570      	push	{r4, r5, r6, lr}
 8010d22:	4604      	mov	r4, r0
 8010d24:	6803      	ldr	r3, [r0, #0]
 8010d26:	b919      	cbnz	r1, 8010d30 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 8010d28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010d2e:	4718      	bx	r3
 8010d30:	2200      	movs	r2, #0
 8010d32:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 8010d36:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 8010d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010d3c:	4798      	blx	r3
 8010d3e:	6863      	ldr	r3, [r4, #4]
 8010d40:	2101      	movs	r1, #1
 8010d42:	4605      	mov	r5, r0
 8010d44:	4620      	mov	r0, r4
 8010d46:	7299      	strb	r1, [r3, #10]
 8010d48:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 8010d4c:	f7ff ffb8 	bl	8010cc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010d50:	4628      	mov	r0, r5
 8010d52:	bd70      	pop	{r4, r5, r6, pc}

08010d54 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 8010d54:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 8010d58:	1a13      	subs	r3, r2, r0
 8010d5a:	4258      	negs	r0, r3
 8010d5c:	4158      	adcs	r0, r3
 8010d5e:	4770      	bx	lr

08010d60 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 8010d60:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 8010d64:	1a9b      	subs	r3, r3, r2
 8010d66:	2b00      	cmp	r3, #0
 8010d68:	bfdc      	itt	le
 8010d6a:	6882      	ldrle	r2, [r0, #8]
 8010d6c:	189b      	addle	r3, r3, r2
 8010d6e:	2b01      	cmp	r3, #1
 8010d70:	bfcc      	ite	gt
 8010d72:	2000      	movgt	r0, #0
 8010d74:	2001      	movle	r0, #1
 8010d76:	4770      	bx	lr

08010d78 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 8010d78:	6902      	ldr	r2, [r0, #16]
 8010d7a:	6843      	ldr	r3, [r0, #4]
 8010d7c:	2024      	movs	r0, #36	@ 0x24
 8010d7e:	fb00 3002 	mla	r0, r0, r2, r3
 8010d82:	4770      	bx	lr

08010d84 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 8010d84:	6803      	ldr	r3, [r0, #0]
 8010d86:	691b      	ldr	r3, [r3, #16]
 8010d88:	4718      	bx	r3

08010d8a <_ZN8touchgfx13DMA_Interface7executeEv>:
 8010d8a:	2301      	movs	r3, #1
 8010d8c:	b570      	push	{r4, r5, r6, lr}
 8010d8e:	7203      	strb	r3, [r0, #8]
 8010d90:	4604      	mov	r4, r0
 8010d92:	6840      	ldr	r0, [r0, #4]
 8010d94:	6803      	ldr	r3, [r0, #0]
 8010d96:	699b      	ldr	r3, [r3, #24]
 8010d98:	4798      	blx	r3
 8010d9a:	6803      	ldr	r3, [r0, #0]
 8010d9c:	4605      	mov	r5, r0
 8010d9e:	2b40      	cmp	r3, #64	@ 0x40
 8010da0:	d00c      	beq.n	8010dbc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010da2:	d810      	bhi.n	8010dc6 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 8010da4:	2b04      	cmp	r3, #4
 8010da6:	d01d      	beq.n	8010de4 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 8010da8:	d804      	bhi.n	8010db4 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 8010daa:	2b01      	cmp	r3, #1
 8010dac:	d006      	beq.n	8010dbc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010dae:	2b02      	cmp	r3, #2
 8010db0:	d02c      	beq.n	8010e0c <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 8010db2:	bd70      	pop	{r4, r5, r6, pc}
 8010db4:	2b08      	cmp	r3, #8
 8010db6:	d01d      	beq.n	8010df4 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 8010db8:	2b20      	cmp	r3, #32
 8010dba:	d1fa      	bne.n	8010db2 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 8010dbc:	6823      	ldr	r3, [r4, #0]
 8010dbe:	4620      	mov	r0, r4
 8010dc0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010dc2:	4798      	blx	r3
 8010dc4:	e013      	b.n	8010dee <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 8010dc6:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8010dca:	d0f7      	beq.n	8010dbc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010dcc:	d804      	bhi.n	8010dd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 8010dce:	2b80      	cmp	r3, #128	@ 0x80
 8010dd0:	d0f4      	beq.n	8010dbc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010dd2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010dd6:	e7f0      	b.n	8010dba <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 8010dd8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8010ddc:	d0ee      	beq.n	8010dbc <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 8010dde:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8010de2:	e7e5      	b.n	8010db0 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 8010de4:	6823      	ldr	r3, [r4, #0]
 8010de6:	7f01      	ldrb	r1, [r0, #28]
 8010de8:	4620      	mov	r0, r4
 8010dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dec:	4798      	blx	r3
 8010dee:	6823      	ldr	r3, [r4, #0]
 8010df0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8010df2:	e006      	b.n	8010e02 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 8010df4:	6823      	ldr	r3, [r4, #0]
 8010df6:	7f01      	ldrb	r1, [r0, #28]
 8010df8:	4620      	mov	r0, r4
 8010dfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010dfc:	4798      	blx	r3
 8010dfe:	6823      	ldr	r3, [r4, #0]
 8010e00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8010e02:	4629      	mov	r1, r5
 8010e04:	4620      	mov	r0, r4
 8010e06:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010e0a:	4718      	bx	r3
 8010e0c:	6823      	ldr	r3, [r4, #0]
 8010e0e:	4620      	mov	r0, r4
 8010e10:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010e12:	4798      	blx	r3
 8010e14:	e7f3      	b.n	8010dfe <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

08010e16 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 8010e16:	4770      	bx	lr

08010e18 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 8010e18:	4770      	bx	lr

08010e1a <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 8010e1a:	4770      	bx	lr

08010e1c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 8010e1c:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 8010e20:	b510      	push	{r4, lr}
 8010e22:	1ad2      	subs	r2, r2, r3
 8010e24:	2a00      	cmp	r2, #0
 8010e26:	bfdc      	itt	le
 8010e28:	6884      	ldrle	r4, [r0, #8]
 8010e2a:	1912      	addle	r2, r2, r4
 8010e2c:	2a01      	cmp	r2, #1
 8010e2e:	dd16      	ble.n	8010e5e <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 8010e30:	6842      	ldr	r2, [r0, #4]
 8010e32:	2424      	movs	r4, #36	@ 0x24
 8010e34:	fb04 2303 	mla	r3, r4, r3, r2
 8010e38:	f101 0220 	add.w	r2, r1, #32
 8010e3c:	f851 4b04 	ldr.w	r4, [r1], #4
 8010e40:	4291      	cmp	r1, r2
 8010e42:	f843 4b04 	str.w	r4, [r3], #4
 8010e46:	d1f9      	bne.n	8010e3c <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 8010e48:	780a      	ldrb	r2, [r1, #0]
 8010e4a:	701a      	strb	r2, [r3, #0]
 8010e4c:	68c3      	ldr	r3, [r0, #12]
 8010e4e:	6882      	ldr	r2, [r0, #8]
 8010e50:	f3bf 8f5b 	dmb	ish
 8010e54:	3301      	adds	r3, #1
 8010e56:	429a      	cmp	r2, r3
 8010e58:	bfd8      	it	le
 8010e5a:	1a9b      	suble	r3, r3, r2
 8010e5c:	60c3      	str	r3, [r0, #12]
 8010e5e:	bd10      	pop	{r4, pc}

08010e60 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 8010e60:	6903      	ldr	r3, [r0, #16]
 8010e62:	6882      	ldr	r2, [r0, #8]
 8010e64:	f3bf 8f5b 	dmb	ish
 8010e68:	3301      	adds	r3, #1
 8010e6a:	429a      	cmp	r2, r3
 8010e6c:	bfd8      	it	le
 8010e6e:	1a9b      	suble	r3, r3, r2
 8010e70:	6103      	str	r3, [r0, #16]
 8010e72:	4770      	bx	lr

08010e74 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 8010e74:	b570      	push	{r4, r5, r6, lr}
 8010e76:	4604      	mov	r4, r0
 8010e78:	460e      	mov	r6, r1
 8010e7a:	6860      	ldr	r0, [r4, #4]
 8010e7c:	6803      	ldr	r3, [r0, #0]
 8010e7e:	685b      	ldr	r3, [r3, #4]
 8010e80:	4798      	blx	r3
 8010e82:	2800      	cmp	r0, #0
 8010e84:	d1f9      	bne.n	8010e7a <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 8010e86:	4d0d      	ldr	r5, [pc, #52]	@ (8010ebc <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 8010e88:	6828      	ldr	r0, [r5, #0]
 8010e8a:	6803      	ldr	r3, [r0, #0]
 8010e8c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8010e8e:	4798      	blx	r3
 8010e90:	f7f1 ffd6 	bl	8002e40 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 8010e94:	6828      	ldr	r0, [r5, #0]
 8010e96:	2101      	movs	r1, #1
 8010e98:	f7ff ff12 	bl	8010cc0 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 8010e9c:	6860      	ldr	r0, [r4, #4]
 8010e9e:	4631      	mov	r1, r6
 8010ea0:	6803      	ldr	r3, [r0, #0]
 8010ea2:	689b      	ldr	r3, [r3, #8]
 8010ea4:	4798      	blx	r3
 8010ea6:	6823      	ldr	r3, [r4, #0]
 8010ea8:	4620      	mov	r0, r4
 8010eaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010eac:	4798      	blx	r3
 8010eae:	6828      	ldr	r0, [r5, #0]
 8010eb0:	6803      	ldr	r3, [r0, #0]
 8010eb2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010eb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010eb8:	4718      	bx	r3
 8010eba:	bf00      	nop
 8010ebc:	24025e20 	.word	0x24025e20

08010ec0 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 8010ec0:	b508      	push	{r3, lr}
 8010ec2:	f7f1 ffaf 	bl	8002e24 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 8010ec6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 8010eca:	f7f1 bfb3 	b.w	8002e34 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08010ece <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 8010ece:	b510      	push	{r4, lr}
 8010ed0:	4604      	mov	r4, r0
 8010ed2:	2114      	movs	r1, #20
 8010ed4:	f015 f89e 	bl	8026014 <_ZdlPvj>
 8010ed8:	4620      	mov	r0, r4
 8010eda:	bd10      	pop	{r4, pc}

08010edc <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 8010edc:	b570      	push	{r4, r5, r6, lr}
 8010ede:	4604      	mov	r4, r0
 8010ee0:	6840      	ldr	r0, [r0, #4]
 8010ee2:	6803      	ldr	r3, [r0, #0]
 8010ee4:	681b      	ldr	r3, [r3, #0]
 8010ee6:	4798      	blx	r3
 8010ee8:	4605      	mov	r5, r0
 8010eea:	b930      	cbnz	r0, 8010efa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010eec:	7a23      	ldrb	r3, [r4, #8]
 8010eee:	b123      	cbz	r3, 8010efa <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 8010ef0:	6860      	ldr	r0, [r4, #4]
 8010ef2:	6803      	ldr	r3, [r0, #0]
 8010ef4:	695b      	ldr	r3, [r3, #20]
 8010ef6:	4798      	blx	r3
 8010ef8:	7225      	strb	r5, [r4, #8]
 8010efa:	6860      	ldr	r0, [r4, #4]
 8010efc:	6803      	ldr	r3, [r0, #0]
 8010efe:	681b      	ldr	r3, [r3, #0]
 8010f00:	4798      	blx	r3
 8010f02:	b928      	cbnz	r0, 8010f10 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 8010f04:	6823      	ldr	r3, [r4, #0]
 8010f06:	4620      	mov	r0, r4
 8010f08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8010f0a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f0e:	4718      	bx	r3
 8010f10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8010f14:	f7f1 bf9c 	b.w	8002e50 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

08010f18 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 8010f18:	b510      	push	{r4, lr}
 8010f1a:	6082      	str	r2, [r0, #8]
 8010f1c:	2200      	movs	r2, #0
 8010f1e:	4c03      	ldr	r4, [pc, #12]	@ (8010f2c <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 8010f20:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8010f24:	e9c0 4100 	strd	r4, r1, [r0]
 8010f28:	bd10      	pop	{r4, pc}
 8010f2a:	bf00      	nop
 8010f2c:	0802ac48 	.word	0x0802ac48

08010f30 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 8010f30:	6840      	ldr	r0, [r0, #4]
 8010f32:	6803      	ldr	r3, [r0, #0]
 8010f34:	681b      	ldr	r3, [r3, #0]
 8010f36:	4718      	bx	r3

08010f38 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 8010f38:	2300      	movs	r3, #0
 8010f3a:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8010f3c:	8503      	strh	r3, [r0, #40]	@ 0x28
 8010f3e:	8543      	strh	r3, [r0, #42]	@ 0x2a
 8010f40:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8010f42:	6980      	ldr	r0, [r0, #24]
 8010f44:	b110      	cbz	r0, 8010f4c <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 8010f46:	6803      	ldr	r3, [r0, #0]
 8010f48:	691b      	ldr	r3, [r3, #16]
 8010f4a:	4718      	bx	r3
 8010f4c:	4770      	bx	lr

08010f4e <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 8010f4e:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 8010f52:	4770      	bx	lr

08010f54 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 8010f54:	b538      	push	{r3, r4, r5, lr}
 8010f56:	0e0b      	lsrs	r3, r1, #24
 8010f58:	4604      	mov	r4, r0
 8010f5a:	460d      	mov	r5, r1
 8010f5c:	7783      	strb	r3, [r0, #30]
 8010f5e:	6803      	ldr	r3, [r0, #0]
 8010f60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8010f62:	4798      	blx	r3
 8010f64:	6803      	ldr	r3, [r0, #0]
 8010f66:	4629      	mov	r1, r5
 8010f68:	689b      	ldr	r3, [r3, #8]
 8010f6a:	4798      	blx	r3
 8010f6c:	6823      	ldr	r3, [r4, #0]
 8010f6e:	4620      	mov	r0, r4
 8010f70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8010f72:	4798      	blx	r3
 8010f74:	61a0      	str	r0, [r4, #24]
 8010f76:	bd38      	pop	{r3, r4, r5, pc}

08010f78 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 8010f78:	7741      	strb	r1, [r0, #29]
 8010f7a:	4770      	bx	lr

08010f7c <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 8010f7c:	b530      	push	{r4, r5, lr}
 8010f7e:	460d      	mov	r5, r1
 8010f80:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 8010f84:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f86:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f88:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8010f8a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8010f8c:	682b      	ldr	r3, [r5, #0]
 8010f8e:	6023      	str	r3, [r4, #0]
 8010f90:	bd30      	pop	{r4, r5, pc}

08010f92 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 8010f92:	b538      	push	{r3, r4, r5, lr}
 8010f94:	4604      	mov	r4, r0
 8010f96:	1d03      	adds	r3, r0, #4
 8010f98:	6808      	ldr	r0, [r1, #0]
 8010f9a:	2500      	movs	r5, #0
 8010f9c:	6849      	ldr	r1, [r1, #4]
 8010f9e:	c303      	stmia	r3!, {r0, r1}
 8010fa0:	6813      	ldr	r3, [r2, #0]
 8010fa2:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8010fa6:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 8010faa:	6853      	ldr	r3, [r2, #4]
 8010fac:	61a5      	str	r5, [r4, #24]
 8010fae:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 8010fb2:	f007 f9ab 	bl	801830c <_ZN8touchgfx9Matrix3x35resetEv>
 8010fb6:	23ff      	movs	r3, #255	@ 0xff
 8010fb8:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 8010fbc:	7763      	strb	r3, [r4, #29]
 8010fbe:	77a3      	strb	r3, [r4, #30]
 8010fc0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8010fc4:	6323      	str	r3, [r4, #48]	@ 0x30
 8010fc6:	2301      	movs	r3, #1
 8010fc8:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 8010fcc:	bd38      	pop	{r3, r4, r5, pc}
	...

08010fd0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 8010fd0:	ee70 7a41 	vsub.f32	s15, s0, s2
 8010fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010fd8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010fdc:	4605      	mov	r5, r0
 8010fde:	ed2d 8b0a 	vpush	{d8-d12}
 8010fe2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010fe6:	b086      	sub	sp, #24
 8010fe8:	eeb0 ba40 	vmov.f32	s22, s0
 8010fec:	6802      	ldr	r2, [r0, #0]
 8010fee:	eef0 ba60 	vmov.f32	s23, s1
 8010ff2:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 8010ff6:	eef0 aa41 	vmov.f32	s21, s2
 8010ffa:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8010ffc:	eeb0 aa61 	vmov.f32	s20, s3
 8011000:	eeb0 ca42 	vmov.f32	s24, s4
 8011004:	eef0 ca62 	vmov.f32	s25, s5
 8011008:	d112      	bne.n	8011030 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 801100a:	ee70 7ae1 	vsub.f32	s15, s1, s3
 801100e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8011012:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011016:	d10b      	bne.n	8011030 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 8011018:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 801101c:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 801101e:	3901      	subs	r1, #1
 8011020:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 8011024:	b006      	add	sp, #24
 8011026:	ecbd 8b0a 	vpop	{d8-d12}
 801102a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801102e:	4710      	bx	r2
 8011030:	23ff      	movs	r3, #255	@ 0xff
 8011032:	4628      	mov	r0, r5
 8011034:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8011038:	77ab      	strb	r3, [r5, #30]
 801103a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801103c:	4798      	blx	r3
 801103e:	eeb0 0a4b 	vmov.f32	s0, s22
 8011042:	eef0 0a6b 	vmov.f32	s1, s23
 8011046:	4604      	mov	r4, r0
 8011048:	4640      	mov	r0, r8
 801104a:	f007 fa0e 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801104e:	eef0 8a40 	vmov.f32	s17, s0
 8011052:	ed8d 0a00 	vstr	s0, [sp]
 8011056:	eeb0 0a6a 	vmov.f32	s0, s21
 801105a:	eef0 9a60 	vmov.f32	s19, s1
 801105e:	edcd 0a01 	vstr	s1, [sp, #4]
 8011062:	4640      	mov	r0, r8
 8011064:	eef0 0a4a 	vmov.f32	s1, s20
 8011068:	f007 f9ff 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801106c:	eef4 8a40 	vcmp.f32	s17, s0
 8011070:	eeb0 8a40 	vmov.f32	s16, s0
 8011074:	ed8d 0a02 	vstr	s0, [sp, #8]
 8011078:	eeb0 9a60 	vmov.f32	s18, s1
 801107c:	edcd 0a03 	vstr	s1, [sp, #12]
 8011080:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011084:	eef4 9a60 	vcmp.f32	s19, s1
 8011088:	bf0c      	ite	eq
 801108a:	2301      	moveq	r3, #1
 801108c:	2300      	movne	r3, #0
 801108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011092:	eef4 8a40 	vcmp.f32	s17, s0
 8011096:	7463      	strb	r3, [r4, #17]
 8011098:	bf0c      	ite	eq
 801109a:	2301      	moveq	r3, #1
 801109c:	2300      	movne	r3, #0
 801109e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110a2:	74a3      	strb	r3, [r4, #18]
 80110a4:	d024      	beq.n	80110f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80110a6:	eef4 9a60 	vcmp.f32	s19, s1
 80110aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ae:	d01f      	beq.n	80110f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 80110b0:	ee3a aa6b 	vsub.f32	s20, s20, s23
 80110b4:	4640      	mov	r0, r8
 80110b6:	ee7a aacb 	vsub.f32	s21, s21, s22
 80110ba:	eeb0 0a4b 	vmov.f32	s0, s22
 80110be:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 80110c2:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 80110c6:	eef0 0a6b 	vmov.f32	s1, s23
 80110ca:	eea7 0acc 	vfms.f32	s0, s15, s24
 80110ce:	eeec 0a87 	vfma.f32	s1, s25, s14
 80110d2:	f007 f9ca 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80110d6:	ed8d 0a04 	vstr	s0, [sp, #16]
 80110da:	ee30 0a68 	vsub.f32	s0, s0, s17
 80110de:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80110e2:	edcd 0a05 	vstr	s1, [sp, #20]
 80110e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110ea:	d121      	bne.n	8011130 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80110ec:	2301      	movs	r3, #1
 80110ee:	74a3      	strb	r3, [r4, #18]
 80110f0:	7c63      	ldrb	r3, [r4, #17]
 80110f2:	2b00      	cmp	r3, #0
 80110f4:	d051      	beq.n	801119a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80110f6:	ee39 7a69 	vsub.f32	s14, s18, s19
 80110fa:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80111f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80110fe:	eef4 9ac9 	vcmpe.f32	s19, s18
 8011102:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8011106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801110a:	edc4 7a08 	vstr	s15, [r4, #32]
 801110e:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 8011112:	ee17 3a90 	vmov	r3, s15
 8011116:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 801111a:	b21a      	sxth	r2, r3
 801111c:	ee17 3a90 	vmov	r3, s15
 8011120:	bf48      	it	mi
 8011122:	8122      	strhmi	r2, [r4, #8]
 8011124:	b21b      	sxth	r3, r3
 8011126:	bf56      	itet	pl
 8011128:	80e2      	strhpl	r2, [r4, #6]
 801112a:	80e3      	strhmi	r3, [r4, #6]
 801112c:	8123      	strhpl	r3, [r4, #8]
 801112e:	e02c      	b.n	801118a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011130:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8011134:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8011138:	eef5 7a40 	vcmp.f32	s15, #0.0
 801113c:	edc4 7a05 	vstr	s15, [r4, #20]
 8011140:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011144:	d102      	bne.n	801114c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8011146:	2301      	movs	r3, #1
 8011148:	7463      	strb	r3, [r4, #17]
 801114a:	e7d1      	b.n	80110f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801114c:	eeb0 7a69 	vmov.f32	s14, s19
 8011150:	ee39 9a69 	vsub.f32	s18, s18, s19
 8011154:	ee38 8a68 	vsub.f32	s16, s16, s17
 8011158:	eea8 7ae7 	vfms.f32	s14, s17, s15
 801115c:	ed84 7a06 	vstr	s14, [r4, #24]
 8011160:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8011164:	ee38 8a47 	vsub.f32	s16, s16, s14
 8011168:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80111f4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 801116c:	eec7 7a08 	vdiv.f32	s15, s14, s16
 8011170:	ed84 8a07 	vstr	s16, [r4, #28]
 8011174:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8011178:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801117c:	edc4 7a08 	vstr	s15, [r4, #32]
 8011180:	d503      	bpl.n	801118a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 8011182:	eeb1 8a48 	vneg.f32	s16, s16
 8011186:	ed84 8a07 	vstr	s16, [r4, #28]
 801118a:	60e7      	str	r7, [r4, #12]
 801118c:	7426      	strb	r6, [r4, #16]
 801118e:	61ac      	str	r4, [r5, #24]
 8011190:	b006      	add	sp, #24
 8011192:	ecbd 8b0a 	vpop	{d8-d12}
 8011196:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801119a:	7ca3      	ldrb	r3, [r4, #18]
 801119c:	2b00      	cmp	r3, #0
 801119e:	d0f4      	beq.n	801118a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80111a0:	ee38 7a68 	vsub.f32	s14, s16, s17
 80111a4:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80111f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80111a8:	eef4 8ac8 	vcmpe.f32	s17, s16
 80111ac:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80111b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b4:	edc4 7a08 	vstr	s15, [r4, #32]
 80111b8:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 80111bc:	ee17 3a90 	vmov	r3, s15
 80111c0:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 80111c4:	b21a      	sxth	r2, r3
 80111c6:	ee17 3a90 	vmov	r3, s15
 80111ca:	bf48      	it	mi
 80111cc:	8122      	strhmi	r2, [r4, #8]
 80111ce:	b21b      	sxth	r3, r3
 80111d0:	bf56      	itet	pl
 80111d2:	80e2      	strhpl	r2, [r4, #6]
 80111d4:	80e3      	strhmi	r3, [r4, #6]
 80111d6:	8123      	strhpl	r3, [r4, #8]
 80111d8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80111dc:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80111e0:	1a9b      	subs	r3, r3, r2
 80111e2:	ee07 3a90 	vmov	s15, r3
 80111e6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80111ea:	edc4 7a07 	vstr	s15, [r4, #28]
 80111ee:	e7cc      	b.n	801118a <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80111f0:	447ffffe 	.word	0x447ffffe
 80111f4:	44800000 	.word	0x44800000

080111f8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80111f8:	b510      	push	{r4, lr}
 80111fa:	ed2d 8b02 	vpush	{d8}
 80111fe:	eef0 8a62 	vmov.f32	s17, s5
 8011202:	2100      	movs	r1, #0
 8011204:	4604      	mov	r4, r0
 8011206:	eeb0 8a42 	vmov.f32	s16, s4
 801120a:	f014 fc75 	bl	8025af8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801120e:	eef0 7a68 	vmov.f32	s15, s17
 8011212:	6823      	ldr	r3, [r4, #0]
 8011214:	4620      	mov	r0, r4
 8011216:	689b      	ldr	r3, [r3, #8]
 8011218:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801121c:	ee17 2a90 	vmov	r2, s15
 8011220:	eef0 7a48 	vmov.f32	s15, s16
 8011224:	ecbd 8b02 	vpop	{d8}
 8011228:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801122c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8011230:	ee17 1a90 	vmov	r1, s15
 8011234:	4718      	bx	r3

08011236 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8011236:	b510      	push	{r4, lr}
 8011238:	ed2d 8b02 	vpush	{d8}
 801123c:	eef0 8a63 	vmov.f32	s17, s7
 8011240:	2100      	movs	r1, #0
 8011242:	4604      	mov	r4, r0
 8011244:	eeb0 8a43 	vmov.f32	s16, s6
 8011248:	f014 fd18 	bl	8025c7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 801124c:	eef0 7a68 	vmov.f32	s15, s17
 8011250:	6823      	ldr	r3, [r4, #0]
 8011252:	4620      	mov	r0, r4
 8011254:	689b      	ldr	r3, [r3, #8]
 8011256:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801125a:	ee17 2a90 	vmov	r2, s15
 801125e:	eef0 7a48 	vmov.f32	s15, s16
 8011262:	ecbd 8b02 	vpop	{d8}
 8011266:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801126a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801126e:	ee17 1a90 	vmov	r1, s15
 8011272:	4718      	bx	r3

08011274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8011274:	b513      	push	{r0, r1, r4, lr}
 8011276:	4604      	mov	r4, r0
 8011278:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 801127a:	f007 f8f6 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801127e:	eef0 7a60 	vmov.f32	s15, s1
 8011282:	4620      	mov	r0, r4
 8011284:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011288:	ee17 2a90 	vmov	r2, s15
 801128c:	eef0 7a40 	vmov.f32	s15, s0
 8011290:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011294:	ee17 1a90 	vmov	r1, s15
 8011298:	b002      	add	sp, #8
 801129a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801129e:	f014 bb85 	b.w	80259ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

080112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 80112a2:	b513      	push	{r0, r1, r4, lr}
 80112a4:	4604      	mov	r4, r0
 80112a6:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 80112a8:	f007 f8df 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80112ac:	eef0 7a60 	vmov.f32	s15, s1
 80112b0:	4620      	mov	r0, r4
 80112b2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80112b6:	ee17 2a90 	vmov	r2, s15
 80112ba:	eef0 7a40 	vmov.f32	s15, s0
 80112be:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80112c2:	ee17 1a90 	vmov	r1, s15
 80112c6:	b002      	add	sp, #8
 80112c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80112cc:	f014 bbbb 	b.w	8025a46 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

080112d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 80112d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80112d2:	2400      	movs	r4, #0
 80112d4:	9f07      	ldr	r7, [sp, #28]
 80112d6:	f04f 0e01 	mov.w	lr, #1
 80112da:	4626      	mov	r6, r4
 80112dc:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80112e0:	4463      	add	r3, ip
 80112e2:	4563      	cmp	r3, ip
 80112e4:	d02d      	beq.n	8011342 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80112e6:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80112ea:	2d06      	cmp	r5, #6
 80112ec:	d8f9      	bhi.n	80112e2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80112ee:	fa0e f505 	lsl.w	r5, lr, r5
 80112f2:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80112f6:	d10d      	bne.n	8011314 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80112f8:	f015 0f10 	tst.w	r5, #16
 80112fc:	d117      	bne.n	801132e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80112fe:	072d      	lsls	r5, r5, #28
 8011300:	d5ef      	bpl.n	80112e2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011302:	3801      	subs	r0, #1
 8011304:	b91e      	cbnz	r6, 801130e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 8011306:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 801130a:	682d      	ldr	r5, [r5, #0]
 801130c:	600d      	str	r5, [r1, #0]
 801130e:	b96c      	cbnz	r4, 801132c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011310:	2601      	movs	r6, #1
 8011312:	e7e6      	b.n	80112e2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011314:	b926      	cbnz	r6, 8011320 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 8011316:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 801131a:	f853 3c08 	ldr.w	r3, [r3, #-8]
 801131e:	600b      	str	r3, [r1, #0]
 8011320:	b924      	cbnz	r4, 801132c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8011322:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 8011326:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801132a:	6013      	str	r3, [r2, #0]
 801132c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801132e:	3801      	subs	r0, #1
 8011330:	b91c      	cbnz	r4, 801133a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 8011332:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8011336:	6824      	ldr	r4, [r4, #0]
 8011338:	6014      	str	r4, [r2, #0]
 801133a:	2e00      	cmp	r6, #0
 801133c:	d1f6      	bne.n	801132c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801133e:	2401      	movs	r4, #1
 8011340:	e7cf      	b.n	80112e2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 8011342:	b90e      	cbnz	r6, 8011348 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8011344:	2300      	movs	r3, #0
 8011346:	600b      	str	r3, [r1, #0]
 8011348:	2c00      	cmp	r4, #0
 801134a:	d1ef      	bne.n	801132c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801134c:	2300      	movs	r3, #0
 801134e:	e7ec      	b.n	801132a <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

08011350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 8011350:	b538      	push	{r3, r4, r5, lr}
 8011352:	ed2d 8b0a 	vpush	{d8-d12}
 8011356:	eef0 ba40 	vmov.f32	s23, s0
 801135a:	4604      	mov	r4, r0
 801135c:	eeb0 ca60 	vmov.f32	s24, s1
 8011360:	460d      	mov	r5, r1
 8011362:	eef0 aa41 	vmov.f32	s21, s2
 8011366:	eeb0 ba61 	vmov.f32	s22, s3
 801136a:	eeb0 9a42 	vmov.f32	s18, s4
 801136e:	eef0 9a62 	vmov.f32	s19, s5
 8011372:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8011376:	ee7b 8a29 	vadd.f32	s17, s22, s19
 801137a:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801137e:	ee68 8a8a 	vmul.f32	s17, s17, s20
 8011382:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8011386:	ee3c 0a68 	vsub.f32	s0, s24, s17
 801138a:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801138e:	ee20 0a00 	vmul.f32	s0, s0, s0
 8011392:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8011396:	f014 fe67 	bl	8026068 <sqrtf>
 801139a:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801139e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80113a2:	d12e      	bne.n	8011402 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 80113a4:	ee79 7a6a 	vsub.f32	s15, s18, s21
 80113a8:	ee39 7acb 	vsub.f32	s14, s19, s22
 80113ac:	eeb0 8a6a 	vmov.f32	s16, s21
 80113b0:	eef0 8a4b 	vmov.f32	s17, s22
 80113b4:	eea7 8a8a 	vfma.f32	s16, s15, s20
 80113b8:	eee7 8a0a 	vfma.f32	s17, s14, s20
 80113bc:	eea7 8a0a 	vfma.f32	s16, s14, s20
 80113c0:	eee7 8aca 	vfms.f32	s17, s15, s20
 80113c4:	2d02      	cmp	r5, #2
 80113c6:	dc2f      	bgt.n	8011428 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 80113c8:	3501      	adds	r5, #1
 80113ca:	eef0 1a4b 	vmov.f32	s3, s22
 80113ce:	eeb0 1a6a 	vmov.f32	s2, s21
 80113d2:	4620      	mov	r0, r4
 80113d4:	4629      	mov	r1, r5
 80113d6:	eef0 2a68 	vmov.f32	s5, s17
 80113da:	eeb0 2a48 	vmov.f32	s4, s16
 80113de:	eef0 0a4c 	vmov.f32	s1, s24
 80113e2:	eeb0 0a6b 	vmov.f32	s0, s23
 80113e6:	f7ff ffb3 	bl	8011350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80113ea:	eef0 0a68 	vmov.f32	s1, s17
 80113ee:	eeb0 0a48 	vmov.f32	s0, s16
 80113f2:	4620      	mov	r0, r4
 80113f4:	f7ff ff55 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80113f8:	eeb0 ba68 	vmov.f32	s22, s17
 80113fc:	eef0 aa48 	vmov.f32	s21, s16
 8011400:	e7b9      	b.n	8011376 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 8011402:	ee38 8a6b 	vsub.f32	s16, s16, s23
 8011406:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801140a:	ee78 8acc 	vsub.f32	s17, s17, s24
 801140e:	ee28 7a27 	vmul.f32	s14, s16, s15
 8011412:	ee68 7aa7 	vmul.f32	s15, s17, s15
 8011416:	ee87 8a00 	vdiv.f32	s16, s14, s0
 801141a:	eec7 8a80 	vdiv.f32	s17, s15, s0
 801141e:	ee3b 8a88 	vadd.f32	s16, s23, s16
 8011422:	ee7c 8a28 	vadd.f32	s17, s24, s17
 8011426:	e7cd      	b.n	80113c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 8011428:	eef0 0a68 	vmov.f32	s1, s17
 801142c:	4620      	mov	r0, r4
 801142e:	eeb0 0a48 	vmov.f32	s0, s16
 8011432:	f7ff ff36 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011436:	ecbd 8b0a 	vpop	{d8-d12}
 801143a:	bd38      	pop	{r3, r4, r5, pc}

0801143c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 801143c:	b510      	push	{r4, lr}
 801143e:	ed2d 8b0a 	vpush	{d8-d12}
 8011442:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8011446:	4604      	mov	r4, r0
 8011448:	eeb0 ca40 	vmov.f32	s24, s0
 801144c:	2b02      	cmp	r3, #2
 801144e:	eeb0 9a60 	vmov.f32	s18, s1
 8011452:	eef0 9a41 	vmov.f32	s19, s2
 8011456:	eef0 8a61 	vmov.f32	s17, s3
 801145a:	eeb0 ba42 	vmov.f32	s22, s4
 801145e:	eef0 ba62 	vmov.f32	s23, s5
 8011462:	eeb0 aa43 	vmov.f32	s20, s6
 8011466:	eef0 aa63 	vmov.f32	s21, s7
 801146a:	eeb0 8a44 	vmov.f32	s16, s8
 801146e:	eef0 ca64 	vmov.f32	s25, s9
 8011472:	d12c      	bne.n	80114ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8011474:	eef0 0a62 	vmov.f32	s1, s5
 8011478:	eeb0 0a42 	vmov.f32	s0, s4
 801147c:	f7ff ff11 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011480:	ee79 9acb 	vsub.f32	s19, s19, s22
 8011484:	ee7a caec 	vsub.f32	s25, s21, s25
 8011488:	ee78 8aeb 	vsub.f32	s17, s17, s23
 801148c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8011490:	ee69 9aac 	vmul.f32	s19, s19, s25
 8011494:	ee28 8a88 	vmul.f32	s16, s17, s16
 8011498:	eef4 9ac8 	vcmpe.f32	s19, s16
 801149c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114a0:	db0f      	blt.n	80114c2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 80114a2:	2101      	movs	r1, #1
 80114a4:	eef0 2a6a 	vmov.f32	s5, s21
 80114a8:	eeb0 2a4a 	vmov.f32	s4, s20
 80114ac:	4620      	mov	r0, r4
 80114ae:	eef0 1a6b 	vmov.f32	s3, s23
 80114b2:	eeb0 1a4b 	vmov.f32	s2, s22
 80114b6:	eef0 0a49 	vmov.f32	s1, s18
 80114ba:	eeb0 0a4c 	vmov.f32	s0, s24
 80114be:	f7ff ff47 	bl	8011350 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80114c2:	eef0 0a6a 	vmov.f32	s1, s21
 80114c6:	4620      	mov	r0, r4
 80114c8:	eeb0 0a4a 	vmov.f32	s0, s20
 80114cc:	e035      	b.n	801153a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 80114ce:	2b01      	cmp	r3, #1
 80114d0:	d138      	bne.n	8011544 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80114d2:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80114d6:	ee33 6a48 	vsub.f32	s12, s6, s16
 80114da:	ee71 7a42 	vsub.f32	s15, s2, s4
 80114de:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80114e2:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80114e6:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80114ea:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80114ee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80114f2:	d027      	beq.n	8011544 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80114f4:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80114f8:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80114fc:	eea4 8a83 	vfma.f32	s16, s9, s6
 8011500:	eee1 8a22 	vfma.f32	s17, s2, s5
 8011504:	ee68 7a67 	vnmul.f32	s15, s16, s15
 8011508:	ee28 8a44 	vnmul.f32	s16, s16, s8
 801150c:	eee6 7a28 	vfma.f32	s15, s12, s17
 8011510:	eea6 8aa8 	vfma.f32	s16, s13, s17
 8011514:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8011518:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 801151c:	eec8 0a07 	vdiv.f32	s1, s16, s14
 8011520:	ee3c ca40 	vsub.f32	s24, s24, s0
 8011524:	ee39 9a60 	vsub.f32	s18, s18, s1
 8011528:	ee29 9a09 	vmul.f32	s18, s18, s18
 801152c:	eeac 9a0c 	vfma.f32	s18, s24, s24
 8011530:	eef4 7ac9 	vcmpe.f32	s15, s18
 8011534:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011538:	db04      	blt.n	8011544 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801153a:	f7ff feb2 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801153e:	ecbd 8b0a 	vpop	{d8-d12}
 8011542:	bd10      	pop	{r4, pc}
 8011544:	eef0 0a6b 	vmov.f32	s1, s23
 8011548:	4620      	mov	r0, r4
 801154a:	eeb0 0a4b 	vmov.f32	s0, s22
 801154e:	f7ff fea8 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011552:	e7b6      	b.n	80114c2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08011554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8011554:	b510      	push	{r4, lr}
 8011556:	ed2d 8b0c 	vpush	{d8-d13}
 801155a:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801155e:	4604      	mov	r4, r0
 8011560:	eeb0 9a40 	vmov.f32	s18, s0
 8011564:	eef0 9a60 	vmov.f32	s19, s1
 8011568:	eef0 aa41 	vmov.f32	s21, s2
 801156c:	eeb0 ba61 	vmov.f32	s22, s3
 8011570:	b933      	cbnz	r3, 8011580 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 8011572:	f7ff fe96 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011576:	eef0 0a4b 	vmov.f32	s1, s22
 801157a:	eeb0 0a6a 	vmov.f32	s0, s21
 801157e:	e015      	b.n	80115ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 8011580:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8011584:	2b02      	cmp	r3, #2
 8011586:	ee71 8a40 	vsub.f32	s17, s2, s0
 801158a:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801158e:	ee68 8aa7 	vmul.f32	s17, s17, s15
 8011592:	ee28 8a27 	vmul.f32	s16, s16, s15
 8011596:	d10f      	bne.n	80115b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8011598:	ee70 0ae8 	vsub.f32	s1, s1, s17
 801159c:	ee30 0a08 	vadd.f32	s0, s0, s16
 80115a0:	f7ff fe7f 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80115a4:	ee7b 0a68 	vsub.f32	s1, s22, s17
 80115a8:	ee3a 0a88 	vadd.f32	s0, s21, s16
 80115ac:	4620      	mov	r0, r4
 80115ae:	f7ff fe78 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80115b2:	ecbd 8b0c 	vpop	{d8-d13}
 80115b6:	bd10      	pop	{r4, pc}
 80115b8:	f7ff fe73 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80115bc:	eef0 0a69 	vmov.f32	s1, s19
 80115c0:	eeb0 0a49 	vmov.f32	s0, s18
 80115c4:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80116f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 80115c8:	eeb1 aa68 	vneg.f32	s20, s17
 80115cc:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80116f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 80115d0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80115d4:	4620      	mov	r0, r4
 80115d6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80115da:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80116fc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80115de:	eddf ca48 	vldr	s25, [pc, #288]	@ 8011700 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80115e2:	ed9f da48 	vldr	s26, [pc, #288]	@ 8011704 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80115e6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80115ea:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80115ee:	f7ff fe58 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80115f2:	eef0 0a69 	vmov.f32	s1, s19
 80115f6:	eeb0 0a49 	vmov.f32	s0, s18
 80115fa:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8011708 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80115fe:	4620      	mov	r0, r4
 8011600:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011604:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011608:	eeea 0a0c 	vfma.f32	s1, s20, s24
 801160c:	eea8 0a0c 	vfma.f32	s0, s16, s24
 8011610:	f7ff fe47 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011614:	eef0 0a69 	vmov.f32	s1, s19
 8011618:	eeb0 0a49 	vmov.f32	s0, s18
 801161c:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 801170c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 8011620:	4620      	mov	r0, r4
 8011622:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011626:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801162a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 801162e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 8011632:	f7ff fe36 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011636:	eef0 0a69 	vmov.f32	s1, s19
 801163a:	eeb0 0a49 	vmov.f32	s0, s18
 801163e:	eddf 7a34 	vldr	s15, [pc, #208]	@ 8011710 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 8011642:	4620      	mov	r0, r4
 8011644:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011648:	eea8 0aa7 	vfma.f32	s0, s17, s15
 801164c:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8011650:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8011654:	f7ff fe25 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011658:	ee79 0a88 	vadd.f32	s1, s19, s16
 801165c:	ee39 0a28 	vadd.f32	s0, s18, s17
 8011660:	4620      	mov	r0, r4
 8011662:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8011666:	ee30 0a08 	vadd.f32	s0, s0, s16
 801166a:	f7ff fe1a 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801166e:	eef0 0a69 	vmov.f32	s1, s19
 8011672:	eeb0 0a49 	vmov.f32	s0, s18
 8011676:	eddf 7a27 	vldr	s15, [pc, #156]	@ 8011714 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 801167a:	4620      	mov	r0, r4
 801167c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8011680:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8011684:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8011688:	eea8 0a0d 	vfma.f32	s0, s16, s26
 801168c:	f7ff fe09 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8011690:	eef0 0a69 	vmov.f32	s1, s19
 8011694:	eeb0 0a49 	vmov.f32	s0, s18
 8011698:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 8011718 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 801169c:	4620      	mov	r0, r4
 801169e:	eee8 0a27 	vfma.f32	s1, s16, s15
 80116a2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80116a6:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80116aa:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80116ae:	f7ff fdf8 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80116b2:	eef0 0a69 	vmov.f32	s1, s19
 80116b6:	eeb0 0a49 	vmov.f32	s0, s18
 80116ba:	eddf 7a18 	vldr	s15, [pc, #96]	@ 801171c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 80116be:	4620      	mov	r0, r4
 80116c0:	eee8 0a27 	vfma.f32	s1, s16, s15
 80116c4:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80116c8:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80116cc:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80116d0:	f7ff fde7 	bl	80112a2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80116d4:	eef0 0a69 	vmov.f32	s1, s19
 80116d8:	eeb0 0a49 	vmov.f32	s0, s18
 80116dc:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8011720 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80116e0:	4620      	mov	r0, r4
 80116e2:	eee8 0a27 	vfma.f32	s1, s16, s15
 80116e6:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80116ea:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80116ee:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80116f2:	e73e      	b.n	8011572 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80116f4:	3d23d70a 	.word	0x3d23d70a
 80116f8:	3e8f5c29 	.word	0x3e8f5c29
 80116fc:	3f19999a 	.word	0x3f19999a
 8011700:	3f4ccccd 	.word	0x3f4ccccd
 8011704:	3f75c28f 	.word	0x3f75c28f
 8011708:	3e4ccccd 	.word	0x3e4ccccd
 801170c:	3ecccccd 	.word	0x3ecccccd
 8011710:	3f3851ec 	.word	0x3f3851ec
 8011714:	3fa3d70a 	.word	0x3fa3d70a
 8011718:	3fcccccd 	.word	0x3fcccccd
 801171c:	3fe66666 	.word	0x3fe66666
 8011720:	3ffae148 	.word	0x3ffae148

08011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 8011724:	b570      	push	{r4, r5, r6, lr}
 8011726:	ed2d 8b06 	vpush	{d8-d10}
 801172a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801172e:	eef0 aa40 	vmov.f32	s21, s0
 8011732:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8011736:	4604      	mov	r4, r0
 8011738:	ee30 8ac8 	vsub.f32	s16, s1, s16
 801173c:	ee30 9a49 	vsub.f32	s18, s0, s18
 8011740:	eeb0 aa60 	vmov.f32	s20, s1
 8011744:	ee28 0a08 	vmul.f32	s0, s16, s16
 8011748:	eea9 0a09 	vfma.f32	s0, s18, s18
 801174c:	f014 fc8c 	bl	8026068 <sqrtf>
 8011750:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8011754:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011758:	dd36      	ble.n	80117c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 801175a:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801175e:	2600      	movs	r6, #0
 8011760:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8011764:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8011768:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 801176c:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 8011770:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8011774:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8011778:	ee89 8a26 	vdiv.f32	s16, s18, s13
 801177c:	ee70 9a28 	vadd.f32	s19, s0, s17
 8011780:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8011784:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8011788:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801178c:	b1fd      	cbz	r5, 80117ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801178e:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 8011792:	eef0 0a49 	vmov.f32	s1, s18
 8011796:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 801179a:	eeb0 0a69 	vmov.f32	s0, s19
 801179e:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 80117a2:	4620      	mov	r0, r4
 80117a4:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 80117a8:	f7ff fd64 	bl	8011274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 80117ac:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 80117b0:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 80117b4:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 80117b8:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 80117bc:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 80117c0:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 80117c4:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 80117c8:	ecbd 8b06 	vpop	{d8-d10}
 80117cc:	bd70      	pop	{r4, r5, r6, pc}
 80117ce:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 80117d2:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80117d6:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80117da:	b16b      	cbz	r3, 80117f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80117dc:	eef0 1a49 	vmov.f32	s3, s18
 80117e0:	4620      	mov	r0, r4
 80117e2:	eeb0 1a69 	vmov.f32	s2, s19
 80117e6:	eef0 0a62 	vmov.f32	s1, s5
 80117ea:	eeb0 0a42 	vmov.f32	s0, s4
 80117ee:	f7ff feb1 	bl	8011554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80117f2:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80117f6:	e7db      	b.n	80117b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80117f8:	eef0 4a48 	vmov.f32	s9, s16
 80117fc:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 8011800:	eeb0 4a68 	vmov.f32	s8, s17
 8011804:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 8011808:	eef0 3a49 	vmov.f32	s7, s18
 801180c:	4620      	mov	r0, r4
 801180e:	eeb0 3a69 	vmov.f32	s6, s19
 8011812:	f7ff fe13 	bl	801143c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 8011816:	e7cb      	b.n	80117b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

08011818 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 8011818:	ee07 2a90 	vmov	s15, r2
 801181c:	ee07 1a10 	vmov	s14, r1
 8011820:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8011824:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8011838 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 8011828:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 801182c:	ee60 0aa7 	vmul.f32	s1, s1, s15
 8011830:	ee20 0a27 	vmul.f32	s0, s0, s15
 8011834:	f7ff bf76 	b.w	8011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011838:	3d000000 	.word	0x3d000000

0801183c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 801183c:	b538      	push	{r3, r4, r5, lr}
 801183e:	ed2d 8b02 	vpush	{d8}
 8011842:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8011846:	4604      	mov	r4, r0
 8011848:	b31d      	cbz	r5, 8011892 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 801184a:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801184e:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 8011852:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8011856:	ee78 8a67 	vsub.f32	s17, s16, s15
 801185a:	ee38 8a27 	vadd.f32	s16, s16, s15
 801185e:	eef0 0a68 	vmov.f32	s1, s17
 8011862:	f7ff fd07 	bl	8011274 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8011866:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801186a:	eef0 1a48 	vmov.f32	s3, s16
 801186e:	4620      	mov	r0, r4
 8011870:	eeb0 0a41 	vmov.f32	s0, s2
 8011874:	eef0 0a68 	vmov.f32	s1, s17
 8011878:	f7ff fe6c 	bl	8011554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801187c:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8011880:	eef0 1a68 	vmov.f32	s3, s17
 8011884:	4620      	mov	r0, r4
 8011886:	eef0 0a48 	vmov.f32	s1, s16
 801188a:	eeb0 0a41 	vmov.f32	s0, s2
 801188e:	f7ff fe61 	bl	8011554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8011892:	4628      	mov	r0, r5
 8011894:	ecbd 8b02 	vpop	{d8}
 8011898:	bd38      	pop	{r3, r4, r5, pc}

0801189a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 801189a:	b510      	push	{r4, lr}
 801189c:	ed2d 8b02 	vpush	{d8}
 80118a0:	4604      	mov	r4, r0
 80118a2:	eeb0 8a40 	vmov.f32	s16, s0
 80118a6:	eef0 8a60 	vmov.f32	s17, s1
 80118aa:	f7ff ffc7 	bl	801183c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 80118ae:	b9d0      	cbnz	r0, 80118e6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 80118b0:	4620      	mov	r0, r4
 80118b2:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 80118b6:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 80118ba:	eef0 0a68 	vmov.f32	s1, s17
 80118be:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 80118c2:	eeb0 0a48 	vmov.f32	s0, s16
 80118c6:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 80118ca:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80118ce:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80118d2:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80118d6:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80118da:	f7ff fdaf 	bl	801143c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80118de:	2001      	movs	r0, #1
 80118e0:	ecbd 8b02 	vpop	{d8}
 80118e4:	bd10      	pop	{r4, pc}
 80118e6:	2000      	movs	r0, #0
 80118e8:	e7fa      	b.n	80118e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080118ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80118ea:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80118ee:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80118f2:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80118f6:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80118fa:	f7ff be2b 	b.w	8011554 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

08011900 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 8011900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011904:	b089      	sub	sp, #36	@ 0x24
 8011906:	461c      	mov	r4, r3
 8011908:	4682      	mov	sl, r0
 801190a:	4615      	mov	r5, r2
 801190c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 8011910:	f10d 0820 	add.w	r8, sp, #32
 8011914:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8011916:	9304      	str	r3, [sp, #16]
 8011918:	2300      	movs	r3, #0
 801191a:	9105      	str	r1, [sp, #20]
 801191c:	9306      	str	r3, [sp, #24]
 801191e:	f848 3d04 	str.w	r3, [r8, #-4]!
 8011922:	9b04      	ldr	r3, [sp, #16]
 8011924:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 8011928:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 801192c:	9b05      	ldr	r3, [sp, #20]
 801192e:	429d      	cmp	r5, r3
 8011930:	d96d      	bls.n	8011a0e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 8011932:	3d01      	subs	r5, #1
 8011934:	f819 3005 	ldrb.w	r3, [r9, r5]
 8011938:	2b06      	cmp	r3, #6
 801193a:	d8f7      	bhi.n	801192c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 801193c:	a201      	add	r2, pc, #4	@ (adr r2, 8011944 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801193e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011942:	bf00      	nop
 8011944:	08011963 	.word	0x08011963
 8011948:	0801192d 	.word	0x0801192d
 801194c:	08011961 	.word	0x08011961
 8011950:	08011985 	.word	0x08011985
 8011954:	08011985 	.word	0x08011985
 8011958:	08011989 	.word	0x08011989
 801195c:	080119c9 	.word	0x080119c9
 8011960:	3c02      	subs	r4, #2
 8011962:	4650      	mov	r0, sl
 8011964:	9400      	str	r4, [sp, #0]
 8011966:	462b      	mov	r3, r5
 8011968:	4642      	mov	r2, r8
 801196a:	a906      	add	r1, sp, #24
 801196c:	e9cd 9701 	strd	r9, r7, [sp, #4]
 8011970:	f7ff fcae 	bl	80112d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8011974:	eddd 0a07 	vldr	s1, [sp, #28]
 8011978:	ed9d 0a06 	vldr	s0, [sp, #24]
 801197c:	4630      	mov	r0, r6
 801197e:	f7ff fed1 	bl	8011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011982:	e7d3      	b.n	801192c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8011984:	3c01      	subs	r4, #1
 8011986:	e7ec      	b.n	8011962 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8011988:	f1a4 0b04 	sub.w	fp, r4, #4
 801198c:	3c02      	subs	r4, #2
 801198e:	4650      	mov	r0, sl
 8011990:	462b      	mov	r3, r5
 8011992:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8011996:	f8cd b000 	str.w	fp, [sp]
 801199a:	4642      	mov	r2, r8
 801199c:	a906      	add	r1, sp, #24
 801199e:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80119a2:	f7ff fc95 	bl	80112d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80119a6:	eddd 2a07 	vldr	s5, [sp, #28]
 80119aa:	ed9d 2a06 	vldr	s4, [sp, #24]
 80119ae:	4630      	mov	r0, r6
 80119b0:	ed54 1a01 	vldr	s3, [r4, #-4]
 80119b4:	ed14 1a02 	vldr	s2, [r4, #-8]
 80119b8:	edd4 0a01 	vldr	s1, [r4, #4]
 80119bc:	ed94 0a00 	vldr	s0, [r4]
 80119c0:	f7ff fc1a 	bl	80111f8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 80119c4:	465c      	mov	r4, fp
 80119c6:	e7b1      	b.n	801192c <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 80119c8:	f1a4 0b06 	sub.w	fp, r4, #6
 80119cc:	3c02      	subs	r4, #2
 80119ce:	4650      	mov	r0, sl
 80119d0:	462b      	mov	r3, r5
 80119d2:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80119d6:	f8cd b000 	str.w	fp, [sp]
 80119da:	4642      	mov	r2, r8
 80119dc:	a906      	add	r1, sp, #24
 80119de:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80119e2:	f7ff fc75 	bl	80112d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80119e6:	eddd 3a07 	vldr	s7, [sp, #28]
 80119ea:	ed9d 3a06 	vldr	s6, [sp, #24]
 80119ee:	4630      	mov	r0, r6
 80119f0:	ed54 2a03 	vldr	s5, [r4, #-12]
 80119f4:	ed14 2a04 	vldr	s4, [r4, #-16]
 80119f8:	ed54 1a01 	vldr	s3, [r4, #-4]
 80119fc:	ed14 1a02 	vldr	s2, [r4, #-8]
 8011a00:	edd4 0a01 	vldr	s1, [r4, #4]
 8011a04:	ed94 0a00 	vldr	s0, [r4]
 8011a08:	f7ff fc15 	bl	8011236 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011a0c:	e7da      	b.n	80119c4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 8011a0e:	9b04      	ldr	r3, [sp, #16]
 8011a10:	b113      	cbz	r3, 8011a18 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 8011a12:	4630      	mov	r0, r6
 8011a14:	f7ff ff69 	bl	80118ea <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 8011a18:	b009      	add	sp, #36	@ 0x24
 8011a1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a1e:	bf00      	nop

08011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 8011a20:	eef0 7a60 	vmov.f32	s15, s1
 8011a24:	6803      	ldr	r3, [r0, #0]
 8011a26:	689b      	ldr	r3, [r3, #8]
 8011a28:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011a2c:	ee17 2a90 	vmov	r2, s15
 8011a30:	eef0 7a40 	vmov.f32	s15, s0
 8011a34:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011a38:	ee17 1a90 	vmov	r1, s15
 8011a3c:	4718      	bx	r3
	...

08011a40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8011a40:	4b04      	ldr	r3, [pc, #16]	@ (8011a54 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8011a42:	b510      	push	{r4, lr}
 8011a44:	4604      	mov	r4, r0
 8011a46:	f840 3b14 	str.w	r3, [r0], #20
 8011a4a:	f002 fd7a 	bl	8014542 <_ZN8touchgfx7OutlineD1Ev>
 8011a4e:	4620      	mov	r0, r4
 8011a50:	bd10      	pop	{r4, pc}
 8011a52:	bf00      	nop
 8011a54:	0802b700 	.word	0x0802b700

08011a58 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8011a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a5c:	ed2d 8b04 	vpush	{d8-d9}
 8011a60:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8011a64:	b0b5      	sub	sp, #212	@ 0xd4
 8011a66:	4605      	mov	r5, r0
 8011a68:	468b      	mov	fp, r1
 8011a6a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011a6e:	9206      	str	r2, [sp, #24]
 8011a70:	461e      	mov	r6, r3
 8011a72:	2400      	movs	r4, #0
 8011a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011a78:	f240 814f 	bls.w	8011d1a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8011a7c:	23ff      	movs	r3, #255	@ 0xff
 8011a7e:	1d02      	adds	r2, r0, #4
 8011a80:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8011d20 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8011a84:	f04f 0800 	mov.w	r8, #0
 8011a88:	9300      	str	r3, [sp, #0]
 8011a8a:	af08      	add	r7, sp, #32
 8011a8c:	6981      	ldr	r1, [r0, #24]
 8011a8e:	a808      	add	r0, sp, #32
 8011a90:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8011a92:	eef0 9a49 	vmov.f32	s19, s18
 8011a96:	f013 fe3d 	bl	8025714 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8011a9a:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8011a9e:	4ba1      	ldr	r3, [pc, #644]	@ (8011d24 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8011aa0:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8011aa4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8011aa8:	2201      	movs	r2, #1
 8011aaa:	9308      	str	r3, [sp, #32]
 8011aac:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8011ab0:	edd5 6a08 	vldr	s13, [r5, #32]
 8011ab4:	eeb0 8a49 	vmov.f32	s16, s18
 8011ab8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011abc:	9325      	str	r3, [sp, #148]	@ 0x94
 8011abe:	f04f 0300 	mov.w	r3, #0
 8011ac2:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8011ac6:	7f6a      	ldrb	r2, [r5, #29]
 8011ac8:	eef0 8a49 	vmov.f32	s17, s18
 8011acc:	bf48      	it	mi
 8011ace:	eef1 7a67 	vnegmi.f32	s15, s15
 8011ad2:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8011ad6:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8011ada:	46c1      	mov	r9, r8
 8011adc:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8011ae0:	f04f 0a01 	mov.w	sl, #1
 8011ae4:	ee67 7a87 	vmul.f32	s15, s15, s14
 8011ae8:	7fab      	ldrb	r3, [r5, #30]
 8011aea:	942a      	str	r4, [sp, #168]	@ 0xa8
 8011aec:	435a      	muls	r2, r3
 8011aee:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8011af2:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8011af6:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8011afa:	1c53      	adds	r3, r2, #1
 8011afc:	942b      	str	r4, [sp, #172]	@ 0xac
 8011afe:	942c      	str	r4, [sp, #176]	@ 0xb0
 8011b00:	ee27 7a26 	vmul.f32	s14, s14, s13
 8011b04:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8011b08:	942d      	str	r4, [sp, #180]	@ 0xb4
 8011b0a:	942e      	str	r4, [sp, #184]	@ 0xb8
 8011b0c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8011b10:	ee67 7a27 	vmul.f32	s15, s14, s15
 8011b14:	942f      	str	r4, [sp, #188]	@ 0xbc
 8011b16:	9430      	str	r4, [sp, #192]	@ 0xc0
 8011b18:	9431      	str	r4, [sp, #196]	@ 0xc4
 8011b1a:	9432      	str	r4, [sp, #200]	@ 0xc8
 8011b1c:	9433      	str	r4, [sp, #204]	@ 0xcc
 8011b1e:	4644      	mov	r4, r8
 8011b20:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8011b24:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8011b28:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8011b2c:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8011b30:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8011b34:	9b06      	ldr	r3, [sp, #24]
 8011b36:	454b      	cmp	r3, r9
 8011b38:	f000 80cc 	beq.w	8011cd4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8011b3c:	f109 0301 	add.w	r3, r9, #1
 8011b40:	9305      	str	r3, [sp, #20]
 8011b42:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8011b46:	2b06      	cmp	r3, #6
 8011b48:	d839      	bhi.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011b4a:	e8df f003 	tbb	[pc, r3]
 8011b4e:	3b04      	.short	0x3b04
 8011b50:	817c6f60 	.word	0x817c6f60
 8011b54:	a0          	.byte	0xa0
 8011b55:	00          	.byte	0x00
 8011b56:	45c1      	cmp	r9, r8
 8011b58:	d92b      	bls.n	8011bb2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8011b5a:	eef0 0a49 	vmov.f32	s1, s18
 8011b5e:	4638      	mov	r0, r7
 8011b60:	eeb0 0a69 	vmov.f32	s0, s19
 8011b64:	f7ff fdde 	bl	8011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011b68:	4638      	mov	r0, r7
 8011b6a:	f7ff fe67 	bl	801183c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011b6e:	4681      	mov	r9, r0
 8011b70:	b9f8      	cbnz	r0, 8011bb2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8011b72:	eef0 0a49 	vmov.f32	s1, s18
 8011b76:	4638      	mov	r0, r7
 8011b78:	eeb0 0a69 	vmov.f32	s0, s19
 8011b7c:	f7ff fe8d 	bl	801189a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8011b80:	4628      	mov	r0, r5
 8011b82:	4623      	mov	r3, r4
 8011b84:	9a05      	ldr	r2, [sp, #20]
 8011b86:	4641      	mov	r1, r8
 8011b88:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8011b8c:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8011b90:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8011b94:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8011b98:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8011b9c:	e9cd b600 	strd	fp, r6, [sp]
 8011ba0:	f7ff feae 	bl	8011900 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011ba4:	eef0 0a49 	vmov.f32	s1, s18
 8011ba8:	eeb0 0a69 	vmov.f32	s0, s19
 8011bac:	4638      	mov	r0, r7
 8011bae:	f7ff fe74 	bl	801189a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8011bb2:	eeb0 8a49 	vmov.f32	s16, s18
 8011bb6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011bba:	eef0 8a69 	vmov.f32	s17, s19
 8011bbe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8011bc2:	e7b7      	b.n	8011b34 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8011bc4:	45c1      	cmp	r9, r8
 8011bc6:	d90d      	bls.n	8011be4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011bc8:	4638      	mov	r0, r7
 8011bca:	f7ff fe37 	bl	801183c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011bce:	b948      	cbnz	r0, 8011be4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8011bd0:	4623      	mov	r3, r4
 8011bd2:	464a      	mov	r2, r9
 8011bd4:	4641      	mov	r1, r8
 8011bd6:	4628      	mov	r0, r5
 8011bd8:	e9cd a702 	strd	sl, r7, [sp, #8]
 8011bdc:	e9cd b600 	strd	fp, r6, [sp]
 8011be0:	f7ff fe8e 	bl	8011900 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011be4:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011be8:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8011bec:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8011bf0:	3402      	adds	r4, #2
 8011bf2:	edd3 8a00 	vldr	s17, [r3]
 8011bf6:	46c8      	mov	r8, r9
 8011bf8:	ed93 8a01 	vldr	s16, [r3, #4]
 8011bfc:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8011c00:	eef0 9a68 	vmov.f32	s19, s17
 8011c04:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8011c08:	eeb0 9a48 	vmov.f32	s18, s16
 8011c0c:	e7d7      	b.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011c0e:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011c12:	4638      	mov	r0, r7
 8011c14:	3402      	adds	r4, #2
 8011c16:	edd3 8a00 	vldr	s17, [r3]
 8011c1a:	ed93 8a01 	vldr	s16, [r3, #4]
 8011c1e:	eeb0 0a68 	vmov.f32	s0, s17
 8011c22:	eef0 0a48 	vmov.f32	s1, s16
 8011c26:	f7ff fd7d 	bl	8011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011c2a:	e7c8      	b.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011c2c:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011c30:	edd3 8a00 	vldr	s17, [r3]
 8011c34:	eef0 0a48 	vmov.f32	s1, s16
 8011c38:	4638      	mov	r0, r7
 8011c3a:	eeb0 0a68 	vmov.f32	s0, s17
 8011c3e:	3401      	adds	r4, #1
 8011c40:	f7ff fd70 	bl	8011724 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8011c44:	e7bb      	b.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011c46:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8011c4a:	ed93 8a00 	vldr	s16, [r3]
 8011c4e:	e7f1      	b.n	8011c34 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8011c50:	00a3      	lsls	r3, r4, #2
 8011c52:	eef0 0a48 	vmov.f32	s1, s16
 8011c56:	eeb0 0a68 	vmov.f32	s0, s17
 8011c5a:	4638      	mov	r0, r7
 8011c5c:	f103 0208 	add.w	r2, r3, #8
 8011c60:	f103 090c 	add.w	r9, r3, #12
 8011c64:	4433      	add	r3, r6
 8011c66:	3404      	adds	r4, #4
 8011c68:	4432      	add	r2, r6
 8011c6a:	44b1      	add	r9, r6
 8011c6c:	edd3 1a01 	vldr	s3, [r3, #4]
 8011c70:	ed92 2a00 	vldr	s4, [r2]
 8011c74:	edd9 2a00 	vldr	s5, [r9]
 8011c78:	ed93 1a00 	vldr	s2, [r3]
 8011c7c:	9207      	str	r2, [sp, #28]
 8011c7e:	f7ff fabb 	bl	80111f8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8011c82:	9a07      	ldr	r2, [sp, #28]
 8011c84:	ed99 8a00 	vldr	s16, [r9]
 8011c88:	edd2 8a00 	vldr	s17, [r2]
 8011c8c:	e797      	b.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011c8e:	00a3      	lsls	r3, r4, #2
 8011c90:	eef0 0a48 	vmov.f32	s1, s16
 8011c94:	eeb0 0a68 	vmov.f32	s0, s17
 8011c98:	4638      	mov	r0, r7
 8011c9a:	f103 0210 	add.w	r2, r3, #16
 8011c9e:	f103 0914 	add.w	r9, r3, #20
 8011ca2:	4433      	add	r3, r6
 8011ca4:	3406      	adds	r4, #6
 8011ca6:	4432      	add	r2, r6
 8011ca8:	44b1      	add	r9, r6
 8011caa:	edd3 2a03 	vldr	s5, [r3, #12]
 8011cae:	ed92 3a00 	vldr	s6, [r2]
 8011cb2:	edd9 3a00 	vldr	s7, [r9]
 8011cb6:	ed93 2a02 	vldr	s4, [r3, #8]
 8011cba:	edd3 1a01 	vldr	s3, [r3, #4]
 8011cbe:	ed93 1a00 	vldr	s2, [r3]
 8011cc2:	9207      	str	r2, [sp, #28]
 8011cc4:	f7ff fab7 	bl	8011236 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011cc8:	9a07      	ldr	r2, [sp, #28]
 8011cca:	ed99 8a00 	vldr	s16, [r9]
 8011cce:	edd2 8a00 	vldr	s17, [r2]
 8011cd2:	e774      	b.n	8011bbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8011cd4:	9b06      	ldr	r3, [sp, #24]
 8011cd6:	af08      	add	r7, sp, #32
 8011cd8:	4543      	cmp	r3, r8
 8011cda:	d90f      	bls.n	8011cfc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8011cdc:	4638      	mov	r0, r7
 8011cde:	f7ff fdad 	bl	801183c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8011ce2:	b958      	cbnz	r0, 8011cfc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8011ce4:	2301      	movs	r3, #1
 8011ce6:	9703      	str	r7, [sp, #12]
 8011ce8:	f8cd b000 	str.w	fp, [sp]
 8011cec:	4641      	mov	r1, r8
 8011cee:	9a06      	ldr	r2, [sp, #24]
 8011cf0:	4628      	mov	r0, r5
 8011cf2:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8011cf6:	4623      	mov	r3, r4
 8011cf8:	f7ff fe02 	bl	8011900 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8011cfc:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8011d00:	4638      	mov	r0, r7
 8011d02:	f013 fd9b 	bl	802583c <_ZN8touchgfx6Canvas6renderEh>
 8011d06:	4604      	mov	r4, r0
 8011d08:	4638      	mov	r0, r7
 8011d0a:	f7ff fe99 	bl	8011a40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8011d0e:	4620      	mov	r0, r4
 8011d10:	b035      	add	sp, #212	@ 0xd4
 8011d12:	ecbd 8b04 	vpop	{d8-d9}
 8011d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011d1a:	2401      	movs	r4, #1
 8011d1c:	e7f7      	b.n	8011d0e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8011d1e:	bf00      	nop
 8011d20:	00000000 	.word	0x00000000
 8011d24:	0802ac6c 	.word	0x0802ac6c

08011d28 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8011d28:	b510      	push	{r4, lr}
 8011d2a:	4604      	mov	r4, r0
 8011d2c:	f7ff fe88 	bl	8011a40 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8011d30:	21b0      	movs	r1, #176	@ 0xb0
 8011d32:	4620      	mov	r0, r4
 8011d34:	f014 f96e 	bl	8026014 <_ZdlPvj>
 8011d38:	4620      	mov	r0, r4
 8011d3a:	bd10      	pop	{r4, pc}

08011d3c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8011d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011d40:	4698      	mov	r8, r3
 8011d42:	23ff      	movs	r3, #255	@ 0xff
 8011d44:	4607      	mov	r7, r0
 8011d46:	4689      	mov	r9, r1
 8011d48:	4692      	mov	sl, r2
 8011d4a:	1d02      	adds	r2, r0, #4
 8011d4c:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8011d50:	2400      	movs	r4, #0
 8011d52:	44ca      	add	sl, r9
 8011d54:	ed2d 8b06 	vpush	{d8-d10}
 8011d58:	b0aa      	sub	sp, #168	@ 0xa8
 8011d5a:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8011f60 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8011d5e:	9300      	str	r3, [sp, #0]
 8011d60:	eef0 8a48 	vmov.f32	s17, s16
 8011d64:	6981      	ldr	r1, [r0, #24]
 8011d66:	a80d      	add	r0, sp, #52	@ 0x34
 8011d68:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8011d6a:	f013 fcd3 	bl	8025714 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8011d6e:	7f3b      	ldrb	r3, [r7, #28]
 8011d70:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8011f60 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8011d74:	4628      	mov	r0, r5
 8011d76:	1e5a      	subs	r2, r3, #1
 8011d78:	eeb0 0a60 	vmov.f32	s0, s1
 8011d7c:	4253      	negs	r3, r2
 8011d7e:	4153      	adcs	r3, r2
 8011d80:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8011d84:	f006 fb71 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011d88:	eeb0 9a40 	vmov.f32	s18, s0
 8011d8c:	eef0 9a60 	vmov.f32	s19, s1
 8011d90:	45ca      	cmp	sl, r9
 8011d92:	f000 80cd 	beq.w	8011f30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8011d96:	f819 3b01 	ldrb.w	r3, [r9], #1
 8011d9a:	2b06      	cmp	r3, #6
 8011d9c:	d8f8      	bhi.n	8011d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011d9e:	e8df f003 	tbb	[pc, r3]
 8011da2:	0804      	.short	0x0804
 8011da4:	58533f2a 	.word	0x58533f2a
 8011da8:	8a          	.byte	0x8a
 8011da9:	00          	.byte	0x00
 8011daa:	a80d      	add	r0, sp, #52	@ 0x34
 8011dac:	f013 fd24 	bl	80257f8 <_ZN8touchgfx6Canvas5closeEv>
 8011db0:	e7ee      	b.n	8011d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011db2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011db6:	4628      	mov	r0, r5
 8011db8:	ed93 8a01 	vldr	s16, [r3, #4]
 8011dbc:	edd3 8a00 	vldr	s17, [r3]
 8011dc0:	eef0 0a48 	vmov.f32	s1, s16
 8011dc4:	eeb0 0a68 	vmov.f32	s0, s17
 8011dc8:	f006 fb4f 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011dcc:	a80d      	add	r0, sp, #52	@ 0x34
 8011dce:	eef0 7a60 	vmov.f32	s15, s1
 8011dd2:	eeb0 9a40 	vmov.f32	s18, s0
 8011dd6:	eef0 9a60 	vmov.f32	s19, s1
 8011dda:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011dde:	ee17 2a90 	vmov	r2, s15
 8011de2:	eef0 7a40 	vmov.f32	s15, s0
 8011de6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8011dea:	ee17 1a90 	vmov	r1, s15
 8011dee:	f013 fddd 	bl	80259ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8011df2:	3402      	adds	r4, #2
 8011df4:	e7cc      	b.n	8011d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011df6:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011dfa:	4628      	mov	r0, r5
 8011dfc:	edd3 8a00 	vldr	s17, [r3]
 8011e00:	ed93 8a01 	vldr	s16, [r3, #4]
 8011e04:	eeb0 0a68 	vmov.f32	s0, s17
 8011e08:	eef0 0a48 	vmov.f32	s1, s16
 8011e0c:	f006 fb2d 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e10:	a80d      	add	r0, sp, #52	@ 0x34
 8011e12:	eeb0 9a40 	vmov.f32	s18, s0
 8011e16:	eef0 9a60 	vmov.f32	s19, s1
 8011e1a:	f7ff fe01 	bl	8011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8011e1e:	e7e8      	b.n	8011df2 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8011e20:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011e24:	edd3 8a00 	vldr	s17, [r3]
 8011e28:	eef0 0a48 	vmov.f32	s1, s16
 8011e2c:	4628      	mov	r0, r5
 8011e2e:	eeb0 0a68 	vmov.f32	s0, s17
 8011e32:	3401      	adds	r4, #1
 8011e34:	f006 fb19 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e38:	a80d      	add	r0, sp, #52	@ 0x34
 8011e3a:	eef0 9a60 	vmov.f32	s19, s1
 8011e3e:	eeb0 9a40 	vmov.f32	s18, s0
 8011e42:	f7ff fded 	bl	8011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8011e46:	e7a3      	b.n	8011d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011e48:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8011e4c:	ed93 8a00 	vldr	s16, [r3]
 8011e50:	e7ea      	b.n	8011e28 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8011e52:	1ca3      	adds	r3, r4, #2
 8011e54:	4628      	mov	r0, r5
 8011e56:	3404      	adds	r4, #4
 8011e58:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8011e5c:	ed53 0a01 	vldr	s1, [r3, #-4]
 8011e60:	ed13 0a02 	vldr	s0, [r3, #-8]
 8011e64:	edd3 8a00 	vldr	s17, [r3]
 8011e68:	ed93 8a01 	vldr	s16, [r3, #4]
 8011e6c:	f006 fafd 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e70:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8011e74:	eeb0 0a68 	vmov.f32	s0, s17
 8011e78:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8011e7c:	eef0 0a48 	vmov.f32	s1, s16
 8011e80:	4628      	mov	r0, r5
 8011e82:	f006 faf2 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011e86:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8011e8a:	eef0 2a60 	vmov.f32	s5, s1
 8011e8e:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8011e92:	eeb0 2a40 	vmov.f32	s4, s0
 8011e96:	a80d      	add	r0, sp, #52	@ 0x34
 8011e98:	eeb0 aa40 	vmov.f32	s20, s0
 8011e9c:	eef0 aa60 	vmov.f32	s21, s1
 8011ea0:	eeb0 0a49 	vmov.f32	s0, s18
 8011ea4:	eef0 0a69 	vmov.f32	s1, s19
 8011ea8:	f7ff f9a6 	bl	80111f8 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8011eac:	eef0 9a6a 	vmov.f32	s19, s21
 8011eb0:	eeb0 9a4a 	vmov.f32	s18, s20
 8011eb4:	e76c      	b.n	8011d90 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8011eb6:	1d26      	adds	r6, r4, #4
 8011eb8:	4628      	mov	r0, r5
 8011eba:	3406      	adds	r4, #6
 8011ebc:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8011ec0:	ed56 0a03 	vldr	s1, [r6, #-12]
 8011ec4:	ed16 0a04 	vldr	s0, [r6, #-16]
 8011ec8:	edd6 8a00 	vldr	s17, [r6]
 8011ecc:	ed96 8a01 	vldr	s16, [r6, #4]
 8011ed0:	f006 facb 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011ed4:	ed8d 0a07 	vstr	s0, [sp, #28]
 8011ed8:	4628      	mov	r0, r5
 8011eda:	ed16 0a02 	vldr	s0, [r6, #-8]
 8011ede:	edcd 0a08 	vstr	s1, [sp, #32]
 8011ee2:	ed56 0a01 	vldr	s1, [r6, #-4]
 8011ee6:	f006 fac0 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011eea:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8011eee:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8011ef2:	eeb0 0a68 	vmov.f32	s0, s17
 8011ef6:	eef0 0a48 	vmov.f32	s1, s16
 8011efa:	4628      	mov	r0, r5
 8011efc:	f006 fab5 	bl	801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8011f00:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8011f04:	eeb0 3a40 	vmov.f32	s6, s0
 8011f08:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8011f0c:	eef0 3a60 	vmov.f32	s7, s1
 8011f10:	eddd 1a08 	vldr	s3, [sp, #32]
 8011f14:	eeb0 aa40 	vmov.f32	s20, s0
 8011f18:	ed9d 1a07 	vldr	s2, [sp, #28]
 8011f1c:	eef0 aa60 	vmov.f32	s21, s1
 8011f20:	a80d      	add	r0, sp, #52	@ 0x34
 8011f22:	eef0 0a69 	vmov.f32	s1, s19
 8011f26:	eeb0 0a49 	vmov.f32	s0, s18
 8011f2a:	f7ff f984 	bl	8011236 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8011f2e:	e7bd      	b.n	8011eac <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8011f30:	7f7b      	ldrb	r3, [r7, #29]
 8011f32:	a80d      	add	r0, sp, #52	@ 0x34
 8011f34:	7fb9      	ldrb	r1, [r7, #30]
 8011f36:	4359      	muls	r1, r3
 8011f38:	1c4b      	adds	r3, r1, #1
 8011f3a:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8011f3e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8011f42:	f013 fc7b 	bl	802583c <_ZN8touchgfx6Canvas6renderEh>
 8011f46:	4b07      	ldr	r3, [pc, #28]	@ (8011f64 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8011f48:	4604      	mov	r4, r0
 8011f4a:	a812      	add	r0, sp, #72	@ 0x48
 8011f4c:	930d      	str	r3, [sp, #52]	@ 0x34
 8011f4e:	f002 faf8 	bl	8014542 <_ZN8touchgfx7OutlineD1Ev>
 8011f52:	4620      	mov	r0, r4
 8011f54:	b02a      	add	sp, #168	@ 0xa8
 8011f56:	ecbd 8b06 	vpop	{d8-d10}
 8011f5a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011f5e:	bf00      	nop
 8011f60:	00000000 	.word	0x00000000
 8011f64:	0802b700 	.word	0x0802b700

08011f68 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8011f68:	b410      	push	{r4}
 8011f6a:	7f04      	ldrb	r4, [r0, #28]
 8011f6c:	b11c      	cbz	r4, 8011f76 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8011f6e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f72:	f7ff bee3 	b.w	8011d3c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8011f76:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011f7a:	f7ff bd6d 	b.w	8011a58 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08011f7e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8011f7e:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8011f82:	4691      	mov	r9, r2
 8011f84:	4602      	mov	r2, r0
 8011f86:	4606      	mov	r6, r0
 8011f88:	4688      	mov	r8, r1
 8011f8a:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8011f8e:	469a      	mov	sl, r3
 8011f90:	ab02      	add	r3, sp, #8
 8011f92:	af02      	add	r7, sp, #8
 8011f94:	6851      	ldr	r1, [r2, #4]
 8011f96:	c303      	stmia	r3!, {r0, r1}
 8011f98:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8011f9c:	2b00      	cmp	r3, #0
 8011f9e:	dd2f      	ble.n	8012000 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8011fa0:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8011fa4:	2c00      	cmp	r4, #0
 8011fa6:	dd2b      	ble.n	8012000 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8011fa8:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011fac:	441c      	add	r4, r3
 8011fae:	b2a4      	uxth	r4, r4
 8011fb0:	b225      	sxth	r5, r4
 8011fb2:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8011fb6:	42ab      	cmp	r3, r5
 8011fb8:	da22      	bge.n	8012000 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8011fba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011fbc:	464a      	mov	r2, r9
 8011fbe:	9701      	str	r7, [sp, #4]
 8011fc0:	4641      	mov	r1, r8
 8011fc2:	9300      	str	r3, [sp, #0]
 8011fc4:	4630      	mov	r0, r6
 8011fc6:	4653      	mov	r3, sl
 8011fc8:	f7ff ffce 	bl	8011f68 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8011fcc:	b940      	cbnz	r0, 8011fe0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8011fce:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8011fd2:	2b01      	cmp	r3, #1
 8011fd4:	d004      	beq.n	8011fe0 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8011fd6:	3301      	adds	r3, #1
 8011fd8:	105b      	asrs	r3, r3, #1
 8011fda:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011fde:	e7ec      	b.n	8011fba <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8011fe0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8011fe4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8011fe8:	4413      	add	r3, r2
 8011fea:	b29b      	uxth	r3, r3
 8011fec:	441a      	add	r2, r3
 8011fee:	f8ad 300a 	strh.w	r3, [sp, #10]
 8011ff2:	b212      	sxth	r2, r2
 8011ff4:	4295      	cmp	r5, r2
 8011ff6:	dadc      	bge.n	8011fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8011ff8:	1ae3      	subs	r3, r4, r3
 8011ffa:	f8ad 300e 	strh.w	r3, [sp, #14]
 8011ffe:	e7d8      	b.n	8011fb2 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8012000:	b004      	add	sp, #16
 8012002:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08012006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012006:	0c0b      	lsrs	r3, r1, #16
 8012008:	60c1      	str	r1, [r0, #12]
 801200a:	7481      	strb	r1, [r0, #18]
 801200c:	7403      	strb	r3, [r0, #16]
 801200e:	0a0b      	lsrs	r3, r1, #8
 8012010:	7443      	strb	r3, [r0, #17]
 8012012:	4770      	bx	lr

08012014 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8012014:	f1a0 0008 	sub.w	r0, r0, #8
 8012018:	e7f5      	b.n	8012006 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

0801201c <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 801201c:	b508      	push	{r3, lr}
 801201e:	4b05      	ldr	r3, [pc, #20]	@ (8012034 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8012020:	6818      	ldr	r0, [r3, #0]
 8012022:	6803      	ldr	r3, [r0, #0]
 8012024:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8012028:	4798      	blx	r3
 801202a:	1e43      	subs	r3, r0, #1
 801202c:	4258      	negs	r0, r3
 801202e:	4158      	adcs	r0, r3
 8012030:	bd08      	pop	{r3, pc}
 8012032:	bf00      	nop
 8012034:	24025e20 	.word	0x24025e20

08012038 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8012038:	4770      	bx	lr

0801203a <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 801203a:	3808      	subs	r0, #8
 801203c:	4770      	bx	lr

0801203e <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801203e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012042:	b410      	push	{r4}
 8012044:	188c      	adds	r4, r1, r2
 8012046:	f89d 300c 	ldrb.w	r3, [sp, #12]
 801204a:	68c2      	ldr	r2, [r0, #12]
 801204c:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 8012050:	4620      	mov	r0, r4
 8012052:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012056:	f7f1 b959 	b.w	800330c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

0801205a <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 801205a:	f7f1 b933 	b.w	80032c4 <_ZN8touchgfx5paint8tearDownEv>

0801205e <_ZN8touchgfx13PainterRGB888D0Ev>:
 801205e:	b510      	push	{r4, lr}
 8012060:	4604      	mov	r4, r0
 8012062:	2114      	movs	r1, #20
 8012064:	f013 ffd6 	bl	8026014 <_ZdlPvj>
 8012068:	4620      	mov	r0, r4
 801206a:	bd10      	pop	{r4, pc}

0801206c <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 801206c:	f1a0 0008 	sub.w	r0, r0, #8
 8012070:	e7f5      	b.n	801205e <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08012074 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8012074:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012078:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801207c:	4411      	add	r1, r2
 801207e:	7c42      	ldrb	r2, [r0, #17]
 8012080:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8012084:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8012088:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 801208c:	2a00      	cmp	r2, #0
 801208e:	f000 8084 	beq.w	801219a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8012092:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8012096:	ed90 7a08 	vldr	s14, [r0, #32]
 801209a:	42a2      	cmp	r2, r4
 801209c:	68c3      	ldr	r3, [r0, #12]
 801209e:	db20      	blt.n	80120e2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 80120a0:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80120a4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80120a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120ac:	bfc8      	it	gt
 80120ae:	2200      	movgt	r2, #0
 80120b0:	589a      	ldr	r2, [r3, r2]
 80120b2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80120b6:	7c03      	ldrb	r3, [r0, #16]
 80120b8:	fa5f fc82 	uxtb.w	ip, r2
 80120bc:	f3c2 2707 	ubfx	r7, r2, #8, #8
 80120c0:	f3c2 4407 	ubfx	r4, r2, #16, #8
 80120c4:	440e      	add	r6, r1
 80120c6:	b36b      	cbz	r3, 8012124 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80120c8:	2dff      	cmp	r5, #255	@ 0xff
 80120ca:	d12b      	bne.n	8012124 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 80120cc:	42b1      	cmp	r1, r6
 80120ce:	f080 8204 	bcs.w	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80120d2:	f881 c000 	strb.w	ip, [r1]
 80120d6:	3103      	adds	r1, #3
 80120d8:	f801 7c02 	strb.w	r7, [r1, #-2]
 80120dc:	f801 4c01 	strb.w	r4, [r1, #-1]
 80120e0:	e7f4      	b.n	80120cc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80120e2:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80120e6:	42a7      	cmp	r7, r4
 80120e8:	dc08      	bgt.n	80120fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80120ea:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80120ee:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80120f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80120f6:	bfd8      	it	le
 80120f8:	2200      	movle	r2, #0
 80120fa:	e7d9      	b.n	80120b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80120fc:	1aa2      	subs	r2, r4, r2
 80120fe:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8012102:	ee07 2a90 	vmov	s15, r2
 8012106:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801210a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801210e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8012112:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8012116:	ee17 2a90 	vmov	r2, s15
 801211a:	bfd8      	it	le
 801211c:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 8012120:	0092      	lsls	r2, r2, #2
 8012122:	e7c5      	b.n	80120b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 8012124:	0e12      	lsrs	r2, r2, #24
 8012126:	4355      	muls	r5, r2
 8012128:	1c6a      	adds	r2, r5, #1
 801212a:	eb02 2525 	add.w	r5, r2, r5, asr #8
 801212e:	122d      	asrs	r5, r5, #8
 8012130:	43e8      	mvns	r0, r5
 8012132:	b2ad      	uxth	r5, r5
 8012134:	fb1c fc05 	smulbb	ip, ip, r5
 8012138:	b2c0      	uxtb	r0, r0
 801213a:	fb17 f705 	smulbb	r7, r7, r5
 801213e:	fb14 f505 	smulbb	r5, r4, r5
 8012142:	fa1f fc8c 	uxth.w	ip, ip
 8012146:	b2bf      	uxth	r7, r7
 8012148:	b2ad      	uxth	r5, r5
 801214a:	428e      	cmp	r6, r1
 801214c:	f101 0303 	add.w	r3, r1, #3
 8012150:	f240 81c3 	bls.w	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012154:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8012158:	fb02 c200 	mla	r2, r2, r0, ip
 801215c:	b292      	uxth	r2, r2
 801215e:	1c51      	adds	r1, r2, #1
 8012160:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012164:	1212      	asrs	r2, r2, #8
 8012166:	f803 2c03 	strb.w	r2, [r3, #-3]
 801216a:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801216e:	fb02 7200 	mla	r2, r2, r0, r7
 8012172:	b292      	uxth	r2, r2
 8012174:	1c51      	adds	r1, r2, #1
 8012176:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801217a:	1212      	asrs	r2, r2, #8
 801217c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8012180:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8012184:	fb02 5200 	mla	r2, r2, r0, r5
 8012188:	b292      	uxth	r2, r2
 801218a:	1c51      	adds	r1, r2, #1
 801218c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8012190:	4619      	mov	r1, r3
 8012192:	1212      	asrs	r2, r2, #8
 8012194:	f803 2c01 	strb.w	r2, [r3, #-1]
 8012198:	e7d7      	b.n	801214a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801219a:	7c82      	ldrb	r2, [r0, #18]
 801219c:	2a00      	cmp	r2, #0
 801219e:	d047      	beq.n	8012230 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 80121a0:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 80121a4:	ee07 2a10 	vmov	s14, r2
 80121a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80121ac:	ee07 3a90 	vmov	s15, r3
 80121b0:	461a      	mov	r2, r3
 80121b2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80121b6:	eef4 6ac7 	vcmpe.f32	s13, s14
 80121ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121be:	f200 808e 	bhi.w	80122de <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 80121c2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80121c6:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80121ca:	68c7      	ldr	r7, [r0, #12]
 80121cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80121d0:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80121d4:	ee06 6a90 	vmov	s13, r6
 80121d8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80121dc:	eef4 7ae6 	vcmpe.f32	s15, s13
 80121e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80121e4:	bf4a      	itet	mi
 80121e6:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80121ea:	4634      	movpl	r4, r6
 80121ec:	ee17 4a90 	vmovmi	r4, s15
 80121f0:	edd0 7a08 	vldr	s15, [r0, #32]
 80121f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80121f8:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80121fc:	448e      	add	lr, r1
 80121fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012202:	bfc8      	it	gt
 8012204:	2200      	movgt	r2, #0
 8012206:	58bf      	ldr	r7, [r7, r2]
 8012208:	7c02      	ldrb	r2, [r0, #16]
 801220a:	fa5f f987 	uxtb.w	r9, r7
 801220e:	f3c7 2807 	ubfx	r8, r7, #8, #8
 8012212:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 8012216:	b31a      	cbz	r2, 8012260 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 8012218:	2dff      	cmp	r5, #255	@ 0xff
 801221a:	d121      	bne.n	8012260 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 801221c:	4571      	cmp	r1, lr
 801221e:	d25d      	bcs.n	80122dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012220:	f881 9000 	strb.w	r9, [r1]
 8012224:	3103      	adds	r1, #3
 8012226:	f801 8c02 	strb.w	r8, [r1, #-2]
 801222a:	f801 cc01 	strb.w	ip, [r1, #-1]
 801222e:	e7f5      	b.n	801221c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 8012230:	ee07 4a90 	vmov	s15, r4
 8012234:	ed90 7a06 	vldr	s14, [r0, #24]
 8012238:	edd0 6a05 	vldr	s13, [r0, #20]
 801223c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8012240:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8012244:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012248:	edd0 7a08 	vldr	s15, [r0, #32]
 801224c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012250:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012254:	bf44      	itt	mi
 8012256:	edd0 7a07 	vldrmi	s15, [r0, #28]
 801225a:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801225e:	e7a5      	b.n	80121ac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8012260:	0e3f      	lsrs	r7, r7, #24
 8012262:	436f      	muls	r7, r5
 8012264:	1c7a      	adds	r2, r7, #1
 8012266:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801226a:	1212      	asrs	r2, r2, #8
 801226c:	ea6f 0a02 	mvn.w	sl, r2
 8012270:	b292      	uxth	r2, r2
 8012272:	fb19 f902 	smulbb	r9, r9, r2
 8012276:	fa5f fa8a 	uxtb.w	sl, sl
 801227a:	fb18 f802 	smulbb	r8, r8, r2
 801227e:	fb1c fc02 	smulbb	ip, ip, r2
 8012282:	fa1f f989 	uxth.w	r9, r9
 8012286:	fa1f f888 	uxth.w	r8, r8
 801228a:	fa1f fc8c 	uxth.w	ip, ip
 801228e:	458e      	cmp	lr, r1
 8012290:	f101 0203 	add.w	r2, r1, #3
 8012294:	d922      	bls.n	80122dc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8012296:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801229a:	fb01 910a 	mla	r1, r1, sl, r9
 801229e:	b289      	uxth	r1, r1
 80122a0:	1c4f      	adds	r7, r1, #1
 80122a2:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80122a6:	1209      	asrs	r1, r1, #8
 80122a8:	f802 1c03 	strb.w	r1, [r2, #-3]
 80122ac:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80122b0:	fb01 810a 	mla	r1, r1, sl, r8
 80122b4:	b289      	uxth	r1, r1
 80122b6:	1c4f      	adds	r7, r1, #1
 80122b8:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80122bc:	1209      	asrs	r1, r1, #8
 80122be:	f802 1c02 	strb.w	r1, [r2, #-2]
 80122c2:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80122c6:	fb01 c10a 	mla	r1, r1, sl, ip
 80122ca:	b289      	uxth	r1, r1
 80122cc:	1c4f      	adds	r7, r1, #1
 80122ce:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80122d2:	1209      	asrs	r1, r1, #8
 80122d4:	f802 1c01 	strb.w	r1, [r2, #-1]
 80122d8:	4611      	mov	r1, r2
 80122da:	e7d8      	b.n	801228e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80122dc:	191a      	adds	r2, r3, r4
 80122de:	4433      	add	r3, r6
 80122e0:	b21b      	sxth	r3, r3
 80122e2:	4293      	cmp	r3, r2
 80122e4:	f340 80f9 	ble.w	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80122e8:	edd0 7a07 	vldr	s15, [r0, #28]
 80122ec:	ee06 2a90 	vmov	s13, r2
 80122f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80122f4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80122f8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80122fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012300:	f340 80b0 	ble.w	8012464 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 8012304:	ee06 3a10 	vmov	s12, r3
 8012308:	ee36 7ac7 	vsub.f32	s14, s13, s14
 801230c:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80124e0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 8012310:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 8012314:	eef4 7ac6 	vcmpe.f32	s15, s12
 8012318:	ed90 6a08 	vldr	s12, [r0, #32]
 801231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012320:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8012324:	bfd6      	itet	le
 8012326:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 801232a:	469c      	movgt	ip, r3
 801232c:	ee17 ca90 	vmovle	ip, s15
 8012330:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012334:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80124e4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8012338:	ebac 0202 	sub.w	r2, ip, r2
 801233c:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 8012340:	eee6 7a07 	vfma.f32	s15, s12, s14
 8012344:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8012348:	188c      	adds	r4, r1, r2
 801234a:	7c02      	ldrb	r2, [r0, #16]
 801234c:	b1d2      	cbz	r2, 8012384 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801234e:	2dff      	cmp	r5, #255	@ 0xff
 8012350:	d118      	bne.n	8012384 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 8012352:	42a1      	cmp	r1, r4
 8012354:	d261      	bcs.n	801241a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8012356:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801235a:	68c6      	ldr	r6, [r0, #12]
 801235c:	3103      	adds	r1, #3
 801235e:	ee17 7a10 	vmov	r7, s14
 8012362:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8012366:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801236a:	f801 6c03 	strb.w	r6, [r1, #-3]
 801236e:	7856      	ldrb	r6, [r2, #1]
 8012370:	f801 6c02 	strb.w	r6, [r1, #-2]
 8012374:	7892      	ldrb	r2, [r2, #2]
 8012376:	f801 2c01 	strb.w	r2, [r1, #-1]
 801237a:	ed90 7a08 	vldr	s14, [r0, #32]
 801237e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012382:	e7e6      	b.n	8012352 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8012384:	68c2      	ldr	r2, [r0, #12]
 8012386:	428c      	cmp	r4, r1
 8012388:	f101 0e03 	add.w	lr, r1, #3
 801238c:	d945      	bls.n	801241a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801238e:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8012392:	ee17 9a10 	vmov	r9, s14
 8012396:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801239a:	f898 7003 	ldrb.w	r7, [r8, #3]
 801239e:	fb07 f605 	mul.w	r6, r7, r5
 80123a2:	1c77      	adds	r7, r6, #1
 80123a4:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 80123a8:	123f      	asrs	r7, r7, #8
 80123aa:	b2b9      	uxth	r1, r7
 80123ac:	43ff      	mvns	r7, r7
 80123ae:	b2fe      	uxtb	r6, r7
 80123b0:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 80123b4:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 80123b8:	fb19 f906 	smulbb	r9, r9, r6
 80123bc:	fb07 9701 	mla	r7, r7, r1, r9
 80123c0:	b2bf      	uxth	r7, r7
 80123c2:	f107 0901 	add.w	r9, r7, #1
 80123c6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80123ca:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 80123ce:	fb19 f906 	smulbb	r9, r9, r6
 80123d2:	123f      	asrs	r7, r7, #8
 80123d4:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80123d8:	f898 7001 	ldrb.w	r7, [r8, #1]
 80123dc:	fb07 9701 	mla	r7, r7, r1, r9
 80123e0:	b2bf      	uxth	r7, r7
 80123e2:	f107 0901 	add.w	r9, r7, #1
 80123e6:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80123ea:	123f      	asrs	r7, r7, #8
 80123ec:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80123f0:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80123f4:	f898 8002 	ldrb.w	r8, [r8, #2]
 80123f8:	fb17 f606 	smulbb	r6, r7, r6
 80123fc:	fb08 6601 	mla	r6, r8, r1, r6
 8012400:	b2b6      	uxth	r6, r6
 8012402:	1c71      	adds	r1, r6, #1
 8012404:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 8012408:	4671      	mov	r1, lr
 801240a:	1236      	asrs	r6, r6, #8
 801240c:	f80e 6c01 	strb.w	r6, [lr, #-1]
 8012410:	ed90 7a08 	vldr	s14, [r0, #32]
 8012414:	ee77 7a87 	vadd.f32	s15, s15, s14
 8012418:	e7b5      	b.n	8012386 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 801241a:	4563      	cmp	r3, ip
 801241c:	dd5d      	ble.n	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801241e:	edd0 7a08 	vldr	s15, [r0, #32]
 8012422:	eba3 030c 	sub.w	r3, r3, ip
 8012426:	68c4      	ldr	r4, [r0, #12]
 8012428:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801242c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8012430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8012434:	7c00      	ldrb	r0, [r0, #16]
 8012436:	440b      	add	r3, r1
 8012438:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801243c:	bfd8      	it	le
 801243e:	2200      	movle	r2, #0
 8012440:	58a2      	ldr	r2, [r4, r2]
 8012442:	b2d4      	uxtb	r4, r2
 8012444:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8012448:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801244c:	b160      	cbz	r0, 8012468 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801244e:	2dff      	cmp	r5, #255	@ 0xff
 8012450:	d10a      	bne.n	8012468 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 8012452:	4299      	cmp	r1, r3
 8012454:	d241      	bcs.n	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012456:	700c      	strb	r4, [r1, #0]
 8012458:	3103      	adds	r1, #3
 801245a:	f801 cc02 	strb.w	ip, [r1, #-2]
 801245e:	f801 7c01 	strb.w	r7, [r1, #-1]
 8012462:	e7f6      	b.n	8012452 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8012464:	4694      	mov	ip, r2
 8012466:	e7da      	b.n	801241e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8012468:	0e12      	lsrs	r2, r2, #24
 801246a:	436a      	muls	r2, r5
 801246c:	1c55      	adds	r5, r2, #1
 801246e:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8012472:	122d      	asrs	r5, r5, #8
 8012474:	43ee      	mvns	r6, r5
 8012476:	b2ad      	uxth	r5, r5
 8012478:	fb14 f405 	smulbb	r4, r4, r5
 801247c:	b2f6      	uxtb	r6, r6
 801247e:	fb1c f005 	smulbb	r0, ip, r5
 8012482:	fb17 f505 	smulbb	r5, r7, r5
 8012486:	b2a4      	uxth	r4, r4
 8012488:	b280      	uxth	r0, r0
 801248a:	b2ad      	uxth	r5, r5
 801248c:	428b      	cmp	r3, r1
 801248e:	f101 0203 	add.w	r2, r1, #3
 8012492:	d922      	bls.n	80124da <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8012494:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8012498:	fb01 4106 	mla	r1, r1, r6, r4
 801249c:	b289      	uxth	r1, r1
 801249e:	1c4f      	adds	r7, r1, #1
 80124a0:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80124a4:	1209      	asrs	r1, r1, #8
 80124a6:	f802 1c03 	strb.w	r1, [r2, #-3]
 80124aa:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 80124ae:	fb01 0106 	mla	r1, r1, r6, r0
 80124b2:	b289      	uxth	r1, r1
 80124b4:	1c4f      	adds	r7, r1, #1
 80124b6:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80124ba:	1209      	asrs	r1, r1, #8
 80124bc:	f802 1c02 	strb.w	r1, [r2, #-2]
 80124c0:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 80124c4:	fb01 5106 	mla	r1, r1, r6, r5
 80124c8:	b289      	uxth	r1, r1
 80124ca:	1c4f      	adds	r7, r1, #1
 80124cc:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 80124d0:	1209      	asrs	r1, r1, #8
 80124d2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80124d6:	4611      	mov	r1, r2
 80124d8:	e7d8      	b.n	801248c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80124da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80124de:	bf00      	nop
 80124e0:	447ffffe 	.word	0x447ffffe
 80124e4:	00000000 	.word	0x00000000

080124e8 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80124e8:	4770      	bx	lr

080124ea <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80124ea:	4770      	bx	lr

080124ec <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80124ec:	b510      	push	{r4, lr}
 80124ee:	4604      	mov	r4, r0
 80124f0:	2124      	movs	r1, #36	@ 0x24
 80124f2:	f013 fd8f 	bl	8026014 <_ZdlPvj>
 80124f6:	4620      	mov	r0, r4
 80124f8:	bd10      	pop	{r4, pc}
	...

080124fc <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80124fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80124fe:	6803      	ldr	r3, [r0, #0]
 8012500:	460d      	mov	r5, r1
 8012502:	4604      	mov	r4, r0
 8012504:	4601      	mov	r1, r0
 8012506:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8012508:	a802      	add	r0, sp, #8
 801250a:	4798      	blx	r3
 801250c:	6828      	ldr	r0, [r5, #0]
 801250e:	6869      	ldr	r1, [r5, #4]
 8012510:	466b      	mov	r3, sp
 8012512:	c303      	stmia	r3!, {r0, r1}
 8012514:	4668      	mov	r0, sp
 8012516:	4619      	mov	r1, r3
 8012518:	f7fd fcfc 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 801251c:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 801251e:	b188      	cbz	r0, 8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012520:	6803      	ldr	r3, [r0, #0]
 8012522:	1d21      	adds	r1, r4, #4
 8012524:	68db      	ldr	r3, [r3, #12]
 8012526:	4798      	blx	r3
 8012528:	b160      	cbz	r0, 8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801252a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801252e:	2b00      	cmp	r3, #0
 8012530:	dd08      	ble.n	8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8012532:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8012536:	2d00      	cmp	r5, #0
 8012538:	dd04      	ble.n	8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801253a:	4a2b      	ldr	r2, [pc, #172]	@ (80125e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 801253c:	7812      	ldrb	r2, [r2, #0]
 801253e:	b11a      	cbz	r2, 8012548 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 8012540:	2a01      	cmp	r2, #1
 8012542:	d029      	beq.n	8012598 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8012544:	b004      	add	sp, #16
 8012546:	bd70      	pop	{r4, r5, r6, pc}
 8012548:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801254c:	441d      	add	r5, r3
 801254e:	b2ad      	uxth	r5, r5
 8012550:	b22e      	sxth	r6, r5
 8012552:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8012556:	42b3      	cmp	r3, r6
 8012558:	daf4      	bge.n	8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801255a:	6823      	ldr	r3, [r4, #0]
 801255c:	4669      	mov	r1, sp
 801255e:	4620      	mov	r0, r4
 8012560:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012562:	4798      	blx	r3
 8012564:	b940      	cbnz	r0, 8012578 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8012566:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801256a:	2b01      	cmp	r3, #1
 801256c:	d004      	beq.n	8012578 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801256e:	3301      	adds	r3, #1
 8012570:	105b      	asrs	r3, r3, #1
 8012572:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012576:	e7f0      	b.n	801255a <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8012578:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 801257c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8012580:	4413      	add	r3, r2
 8012582:	b29b      	uxth	r3, r3
 8012584:	441a      	add	r2, r3
 8012586:	f8ad 3002 	strh.w	r3, [sp, #2]
 801258a:	b212      	sxth	r2, r2
 801258c:	4296      	cmp	r6, r2
 801258e:	dae0      	bge.n	8012552 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012590:	1aeb      	subs	r3, r5, r3
 8012592:	f8ad 3006 	strh.w	r3, [sp, #6]
 8012596:	e7dc      	b.n	8012552 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8012598:	f8bd 5000 	ldrh.w	r5, [sp]
 801259c:	441d      	add	r5, r3
 801259e:	b2ad      	uxth	r5, r5
 80125a0:	b22e      	sxth	r6, r5
 80125a2:	f9bd 3000 	ldrsh.w	r3, [sp]
 80125a6:	42b3      	cmp	r3, r6
 80125a8:	dacc      	bge.n	8012544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80125aa:	6823      	ldr	r3, [r4, #0]
 80125ac:	4669      	mov	r1, sp
 80125ae:	4620      	mov	r0, r4
 80125b0:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80125b2:	4798      	blx	r3
 80125b4:	b940      	cbnz	r0, 80125c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80125b6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80125ba:	2b01      	cmp	r3, #1
 80125bc:	d004      	beq.n	80125c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 80125be:	3301      	adds	r3, #1
 80125c0:	105b      	asrs	r3, r3, #1
 80125c2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80125c6:	e7f0      	b.n	80125aa <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 80125c8:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 80125cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80125d0:	4413      	add	r3, r2
 80125d2:	b29b      	uxth	r3, r3
 80125d4:	441a      	add	r2, r3
 80125d6:	f8ad 3000 	strh.w	r3, [sp]
 80125da:	b212      	sxth	r2, r2
 80125dc:	4296      	cmp	r6, r2
 80125de:	dae0      	bge.n	80125a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80125e0:	1aeb      	subs	r3, r5, r3
 80125e2:	f8ad 3004 	strh.w	r3, [sp, #4]
 80125e6:	e7dc      	b.n	80125a2 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80125e8:	24025e18 	.word	0x24025e18

080125ec <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80125ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80125ee:	6803      	ldr	r3, [r0, #0]
 80125f0:	4604      	mov	r4, r0
 80125f2:	4601      	mov	r1, r0
 80125f4:	4668      	mov	r0, sp
 80125f6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80125f8:	4798      	blx	r3
 80125fa:	2100      	movs	r1, #0
 80125fc:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8012600:	4668      	mov	r0, sp
 8012602:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012606:	9102      	str	r1, [sp, #8]
 8012608:	a902      	add	r1, sp, #8
 801260a:	f8ad 200c 	strh.w	r2, [sp, #12]
 801260e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8012612:	f7fd fc7f 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8012616:	6823      	ldr	r3, [r4, #0]
 8012618:	4669      	mov	r1, sp
 801261a:	4620      	mov	r0, r4
 801261c:	691b      	ldr	r3, [r3, #16]
 801261e:	4798      	blx	r3
 8012620:	b004      	add	sp, #16
 8012622:	bd10      	pop	{r4, pc}

08012624 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 8012624:	2101      	movs	r1, #1
 8012626:	2200      	movs	r2, #0
 8012628:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 801262c:	490a      	ldr	r1, [pc, #40]	@ (8012658 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 801262e:	8082      	strh	r2, [r0, #4]
 8012630:	6001      	str	r1, [r0, #0]
 8012632:	21ff      	movs	r1, #255	@ 0xff
 8012634:	80c2      	strh	r2, [r0, #6]
 8012636:	8102      	strh	r2, [r0, #8]
 8012638:	8142      	strh	r2, [r0, #10]
 801263a:	8182      	strh	r2, [r0, #12]
 801263c:	81c2      	strh	r2, [r0, #14]
 801263e:	8202      	strh	r2, [r0, #16]
 8012640:	8242      	strh	r2, [r0, #18]
 8012642:	61c2      	str	r2, [r0, #28]
 8012644:	8402      	strh	r2, [r0, #32]
 8012646:	8442      	strh	r2, [r0, #34]	@ 0x22
 8012648:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 801264c:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 8012650:	6282      	str	r2, [r0, #40]	@ 0x28
 8012652:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8012656:	4770      	bx	lr
 8012658:	0802ad24 	.word	0x0802ad24

0801265c <_ZNK8touchgfx5Image17invalidateContentEv>:
 801265c:	b508      	push	{r3, lr}
 801265e:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8012662:	b10b      	cbz	r3, 8012668 <_ZNK8touchgfx5Image17invalidateContentEv+0xc>
 8012664:	f7f1 f8d3 	bl	800380e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8012668:	bd08      	pop	{r3, pc}

0801266a <_ZN8touchgfx13ScalableImage19setScalingAlgorithmENS0_16ScalingAlgorithmE>:
 801266a:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 801266e:	4770      	bx	lr

08012670 <_ZN8touchgfx13ScalableImage19getScalingAlgorithmEv>:
 8012670:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8012674:	4770      	bx	lr

08012676 <_ZN8touchgfx13ScalableImageD1Ev>:
 8012676:	4770      	bx	lr

08012678 <_ZN8touchgfx13ScalableImageD0Ev>:
 8012678:	b510      	push	{r4, lr}
 801267a:	4604      	mov	r4, r0
 801267c:	212c      	movs	r1, #44	@ 0x2c
 801267e:	f013 fcc9 	bl	8026014 <_ZdlPvj>
 8012682:	4620      	mov	r0, r4
 8012684:	bd10      	pop	{r4, pc}

08012686 <_ZNK8touchgfx13ScalableImage12getSolidRectEv>:
 8012686:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012688:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801268c:	b085      	sub	sp, #20
 801268e:	4604      	mov	r4, r0
 8012690:	460d      	mov	r5, r1
 8012692:	2bff      	cmp	r3, #255	@ 0xff
 8012694:	d128      	bne.n	80126e8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 8012696:	f101 0626 	add.w	r6, r1, #38	@ 0x26
 801269a:	4668      	mov	r0, sp
 801269c:	4631      	mov	r1, r6
 801269e:	f007 ffbd 	bl	801a61c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80126a2:	f9bd 7004 	ldrsh.w	r7, [sp, #4]
 80126a6:	4630      	mov	r0, r6
 80126a8:	f007 ff50 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80126ac:	4287      	cmp	r7, r0
 80126ae:	d11b      	bne.n	80126e8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80126b0:	f9bd 7006 	ldrsh.w	r7, [sp, #6]
 80126b4:	4630      	mov	r0, r6
 80126b6:	f007 ff7d 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80126ba:	4287      	cmp	r7, r0
 80126bc:	d114      	bne.n	80126e8 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x62>
 80126be:	f9b5 300a 	ldrsh.w	r3, [r5, #10]
 80126c2:	2100      	movs	r1, #0
 80126c4:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 80126c8:	f8ad 300e 	strh.w	r3, [sp, #14]
 80126cc:	466b      	mov	r3, sp
 80126ce:	9102      	str	r1, [sp, #8]
 80126d0:	f8ad 200c 	strh.w	r2, [sp, #12]
 80126d4:	cb03      	ldmia	r3!, {r0, r1}
 80126d6:	6020      	str	r0, [r4, #0]
 80126d8:	4620      	mov	r0, r4
 80126da:	6061      	str	r1, [r4, #4]
 80126dc:	4619      	mov	r1, r3
 80126de:	f7fd fc19 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 80126e2:	4620      	mov	r0, r4
 80126e4:	b005      	add	sp, #20
 80126e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80126e8:	2300      	movs	r3, #0
 80126ea:	8023      	strh	r3, [r4, #0]
 80126ec:	8063      	strh	r3, [r4, #2]
 80126ee:	80a3      	strh	r3, [r4, #4]
 80126f0:	80e3      	strh	r3, [r4, #6]
 80126f2:	e7f6      	b.n	80126e2 <_ZNK8touchgfx13ScalableImage12getSolidRectEv+0x5c>

080126f4 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE>:
 80126f4:	b538      	push	{r3, r4, r5, lr}
 80126f6:	2300      	movs	r3, #0
 80126f8:	2501      	movs	r5, #1
 80126fa:	4604      	mov	r4, r0
 80126fc:	8083      	strh	r3, [r0, #4]
 80126fe:	80c3      	strh	r3, [r0, #6]
 8012700:	8103      	strh	r3, [r0, #8]
 8012702:	8143      	strh	r3, [r0, #10]
 8012704:	8183      	strh	r3, [r0, #12]
 8012706:	81c3      	strh	r3, [r0, #14]
 8012708:	8203      	strh	r3, [r0, #16]
 801270a:	8243      	strh	r3, [r0, #18]
 801270c:	61c3      	str	r3, [r0, #28]
 801270e:	8403      	strh	r3, [r0, #32]
 8012710:	8443      	strh	r3, [r0, #34]	@ 0x22
 8012712:	f880 3024 	strb.w	r3, [r0, #36]	@ 0x24
 8012716:	f880 5025 	strb.w	r5, [r0, #37]	@ 0x25
 801271a:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801271e:	4b07      	ldr	r3, [pc, #28]	@ (801273c <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x48>)
 8012720:	6003      	str	r3, [r0, #0]
 8012722:	880b      	ldrh	r3, [r1, #0]
 8012724:	84c3      	strh	r3, [r0, #38]	@ 0x26
 8012726:	23ff      	movs	r3, #255	@ 0xff
 8012728:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 801272c:	f000 ff4a 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8012730:	4b03      	ldr	r3, [pc, #12]	@ (8012740 <_ZN8touchgfx13ScalableImageC1ERKNS_6BitmapE+0x4c>)
 8012732:	f884 5029 	strb.w	r5, [r4, #41]	@ 0x29
 8012736:	4620      	mov	r0, r4
 8012738:	6023      	str	r3, [r4, #0]
 801273a:	bd38      	pop	{r3, r4, r5, pc}
 801273c:	0802af70 	.word	0x0802af70
 8012740:	0802ad9c 	.word	0x0802ad9c

08012744 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>:
 8012744:	4603      	mov	r3, r0
 8012746:	3026      	adds	r0, #38	@ 0x26
 8012748:	f893 3029 	ldrb.w	r3, [r3, #41]	@ 0x29
 801274c:	b90b      	cbnz	r3, 8012752 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv+0xe>
 801274e:	f005 bf39 	b.w	80185c4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>
 8012752:	f005 bf47 	b.w	80185e4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>
	...

08012758 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>:
 8012758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801275c:	4604      	mov	r4, r0
 801275e:	b0b3      	sub	sp, #204	@ 0xcc
 8012760:	469b      	mov	fp, r3
 8012762:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8012766:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 801276a:	2500      	movs	r5, #0
 801276c:	f8ad 0048 	strh.w	r0, [sp, #72]	@ 0x48
 8012770:	f8ad 304a 	strh.w	r3, [sp, #74]	@ 0x4a
 8012774:	ab11      	add	r3, sp, #68	@ 0x44
 8012776:	9206      	str	r2, [sp, #24]
 8012778:	4618      	mov	r0, r3
 801277a:	9511      	str	r5, [sp, #68]	@ 0x44
 801277c:	9307      	str	r3, [sp, #28]
 801277e:	ad13      	add	r5, sp, #76	@ 0x4c
 8012780:	e9dd a93c 	ldrd	sl, r9, [sp, #240]	@ 0xf0
 8012784:	e9dd 873e 	ldrd	r8, r7, [sp, #248]	@ 0xf8
 8012788:	f7fd fbc4 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 801278c:	9b07      	ldr	r3, [sp, #28]
 801278e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8012792:	e885 0003 	stmia.w	r5, {r0, r1}
 8012796:	6821      	ldr	r1, [r4, #0]
 8012798:	4620      	mov	r0, r4
 801279a:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 801279c:	4629      	mov	r1, r5
 801279e:	47b0      	blx	r6
 80127a0:	4621      	mov	r1, r4
 80127a2:	a815      	add	r0, sp, #84	@ 0x54
 80127a4:	1d26      	adds	r6, r4, #4
 80127a6:	f005 fb45 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80127aa:	a815      	add	r0, sp, #84	@ 0x54
 80127ac:	f004 f89c 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80127b0:	9b07      	ldr	r3, [sp, #28]
 80127b2:	4631      	mov	r1, r6
 80127b4:	4618      	mov	r0, r3
 80127b6:	f004 f8db 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80127ba:	4628      	mov	r0, r5
 80127bc:	f104 0526 	add.w	r5, r4, #38	@ 0x26
 80127c0:	f004 f892 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80127c4:	4628      	mov	r0, r5
 80127c6:	f007 ffb3 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 80127ca:	9007      	str	r0, [sp, #28]
 80127cc:	2800      	cmp	r0, #0
 80127ce:	f000 80ce 	beq.w	801296e <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x216>
 80127d2:	f8db 200c 	ldr.w	r2, [fp, #12]
 80127d6:	a809      	add	r0, sp, #36	@ 0x24
 80127d8:	f8db 1000 	ldr.w	r1, [fp]
 80127dc:	920c      	str	r2, [sp, #48]	@ 0x30
 80127de:	f8da 2000 	ldr.w	r2, [sl]
 80127e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80127e4:	920d      	str	r2, [sp, #52]	@ 0x34
 80127e6:	f8da 2004 	ldr.w	r2, [sl, #4]
 80127ea:	f8db 1004 	ldr.w	r1, [fp, #4]
 80127ee:	920e      	str	r2, [sp, #56]	@ 0x38
 80127f0:	f8da 2008 	ldr.w	r2, [sl, #8]
 80127f4:	910a      	str	r1, [sp, #40]	@ 0x28
 80127f6:	920f      	str	r2, [sp, #60]	@ 0x3c
 80127f8:	f8db 1008 	ldr.w	r1, [fp, #8]
 80127fc:	f8da 200c 	ldr.w	r2, [sl, #12]
 8012800:	910b      	str	r1, [sp, #44]	@ 0x2c
 8012802:	a90d      	add	r1, sp, #52	@ 0x34
 8012804:	9210      	str	r2, [sp, #64]	@ 0x40
 8012806:	4632      	mov	r2, r6
 8012808:	f004 f896 	bl	8016938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801280c:	4632      	mov	r2, r6
 801280e:	a90e      	add	r1, sp, #56	@ 0x38
 8012810:	a80a      	add	r0, sp, #40	@ 0x28
 8012812:	f004 f891 	bl	8016938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012816:	4632      	mov	r2, r6
 8012818:	a90f      	add	r1, sp, #60	@ 0x3c
 801281a:	a80b      	add	r0, sp, #44	@ 0x2c
 801281c:	f004 f88c 	bl	8016938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 8012820:	4632      	mov	r2, r6
 8012822:	a910      	add	r1, sp, #64	@ 0x40
 8012824:	a80c      	add	r0, sp, #48	@ 0x30
 8012826:	f004 f887 	bl	8016938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>
 801282a:	eddd 7a0d 	vldr	s15, [sp, #52]	@ 0x34
 801282e:	ed97 3a00 	vldr	s6, [r7]
 8012832:	eef0 6a67 	vmov.f32	s13, s15
 8012836:	eddd 7a0a 	vldr	s15, [sp, #40]	@ 0x28
 801283a:	edd7 4a01 	vldr	s9, [r7, #4]
 801283e:	eeb0 7a67 	vmov.f32	s14, s15
 8012842:	eddd 7a0e 	vldr	s15, [sp, #56]	@ 0x38
 8012846:	eefe 6ace 	vcvt.s32.f32	s13, s13, #4
 801284a:	ed99 2a00 	vldr	s4, [r9]
 801284e:	eeb0 6a67 	vmov.f32	s12, s15
 8012852:	eddd 7a0b 	vldr	s15, [sp, #44]	@ 0x2c
 8012856:	eebe 7ace 	vcvt.s32.f32	s14, s14, #4
 801285a:	edd8 2a00 	vldr	s5, [r8]
 801285e:	edd9 3a01 	vldr	s7, [r9, #4]
 8012862:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012866:	ed98 4a01 	vldr	s8, [r8, #4]
 801286a:	ed99 5a02 	vldr	s10, [r9, #8]
 801286e:	edd8 5a02 	vldr	s11, [r8, #8]
 8012872:	ee16 6a10 	vmov	r6, s12
 8012876:	eeb0 6a67 	vmov.f32	s12, s15
 801287a:	eddd 7a0f 	vldr	s15, [sp, #60]	@ 0x3c
 801287e:	f8d9 e00c 	ldr.w	lr, [r9, #12]
 8012882:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 8012886:	f8d8 c00c 	ldr.w	ip, [r8, #12]
 801288a:	edcd 6a1f 	vstr	s13, [sp, #124]	@ 0x7c
 801288e:	ed8d 2a20 	vstr	s4, [sp, #128]	@ 0x80
 8012892:	ee16 0a10 	vmov	r0, s12
 8012896:	eeb0 6a67 	vmov.f32	s12, s15
 801289a:	eddd 7a0c 	vldr	s15, [sp, #48]	@ 0x30
 801289e:	edcd 2a21 	vstr	s5, [sp, #132]	@ 0x84
 80128a2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80128a6:	ed8d 3a22 	vstr	s6, [sp, #136]	@ 0x88
 80128aa:	ed8d 7a23 	vstr	s14, [sp, #140]	@ 0x8c
 80128ae:	edcd 3a25 	vstr	s7, [sp, #148]	@ 0x94
 80128b2:	ee16 1a10 	vmov	r1, s12
 80128b6:	eeb0 6a67 	vmov.f32	s12, s15
 80128ba:	eddd 7a10 	vldr	s15, [sp, #64]	@ 0x40
 80128be:	ed8d 4a26 	vstr	s8, [sp, #152]	@ 0x98
 80128c2:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80128c6:	edcd 4a27 	vstr	s9, [sp, #156]	@ 0x9c
 80128ca:	f8d7 a008 	ldr.w	sl, [r7, #8]
 80128ce:	eefe 7ace 	vcvt.s32.f32	s15, s15, #4
 80128d2:	68ff      	ldr	r7, [r7, #12]
 80128d4:	ee16 2a10 	vmov	r2, s12
 80128d8:	ed9d 6a09 	vldr	s12, [sp, #36]	@ 0x24
 80128dc:	9624      	str	r6, [sp, #144]	@ 0x90
 80128de:	eebe 6ace 	vcvt.s32.f32	s12, s12, #4
 80128e2:	e9cd 0128 	strd	r0, r1, [sp, #160]	@ 0xa0
 80128e6:	ed8d 6a1e 	vstr	s12, [sp, #120]	@ 0x78
 80128ea:	4628      	mov	r0, r5
 80128ec:	ed8d 5a2a 	vstr	s10, [sp, #168]	@ 0xa8
 80128f0:	9b06      	ldr	r3, [sp, #24]
 80128f2:	922d      	str	r2, [sp, #180]	@ 0xb4
 80128f4:	4a1f      	ldr	r2, [pc, #124]	@ (8012974 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x21c>)
 80128f6:	9317      	str	r3, [sp, #92]	@ 0x5c
 80128f8:	8812      	ldrh	r2, [r2, #0]
 80128fa:	9b07      	ldr	r3, [sp, #28]
 80128fc:	9218      	str	r2, [sp, #96]	@ 0x60
 80128fe:	9319      	str	r3, [sp, #100]	@ 0x64
 8012900:	edcd 5a2b 	vstr	s11, [sp, #172]	@ 0xac
 8012904:	edcd 7a2e 	vstr	s15, [sp, #184]	@ 0xb8
 8012908:	f8cd e0bc 	str.w	lr, [sp, #188]	@ 0xbc
 801290c:	f8cd c0c0 	str.w	ip, [sp, #192]	@ 0xc0
 8012910:	f8cd a0b0 	str.w	sl, [sp, #176]	@ 0xb0
 8012914:	9731      	str	r7, [sp, #196]	@ 0xc4
 8012916:	f007 ff3b 	bl	801a790 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801291a:	901a      	str	r0, [sp, #104]	@ 0x68
 801291c:	4628      	mov	r0, r5
 801291e:	f007 fe15 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012922:	901b      	str	r0, [sp, #108]	@ 0x6c
 8012924:	4628      	mov	r0, r5
 8012926:	f007 fe45 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801292a:	901c      	str	r0, [sp, #112]	@ 0x70
 801292c:	4628      	mov	r0, r5
 801292e:	f007 fe0d 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 8012932:	4b11      	ldr	r3, [pc, #68]	@ (8012978 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x220>)
 8012934:	901d      	str	r0, [sp, #116]	@ 0x74
 8012936:	681b      	ldr	r3, [r3, #0]
 8012938:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801293c:	b10a      	cbz	r2, 8012942 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ea>
 801293e:	6cdd      	ldr	r5, [r3, #76]	@ 0x4c
 8012940:	b905      	cbnz	r5, 8012944 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_+0x1ec>
 8012942:	689d      	ldr	r5, [r3, #8]
 8012944:	682b      	ldr	r3, [r5, #0]
 8012946:	4620      	mov	r0, r4
 8012948:	6c1e      	ldr	r6, [r3, #64]	@ 0x40
 801294a:	f7ff fefb 	bl	8012744 <_ZNK8touchgfx13ScalableImage19lookupRenderVariantEv>
 801294e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8012952:	aa1e      	add	r2, sp, #120	@ 0x78
 8012954:	a917      	add	r1, sp, #92	@ 0x5c
 8012956:	9304      	str	r3, [sp, #16]
 8012958:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 801295c:	e9cd 0302 	strd	r0, r3, [sp, #8]
 8012960:	ab13      	add	r3, sp, #76	@ 0x4c
 8012962:	4628      	mov	r0, r5
 8012964:	9301      	str	r3, [sp, #4]
 8012966:	ab15      	add	r3, sp, #84	@ 0x54
 8012968:	9300      	str	r3, [sp, #0]
 801296a:	ab19      	add	r3, sp, #100	@ 0x64
 801296c:	47b0      	blx	r6
 801296e:	b033      	add	sp, #204	@ 0xcc
 8012970:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012974:	24025e1a 	.word	0x24025e1a
 8012978:	24025e20 	.word	0x24025e20

0801297c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE>:
 801297c:	b570      	push	{r4, r5, r6, lr}
 801297e:	ed2d 8b04 	vpush	{d8-d9}
 8012982:	f890 3028 	ldrb.w	r3, [r0, #40]	@ 0x28
 8012986:	b098      	sub	sp, #96	@ 0x60
 8012988:	4604      	mov	r4, r0
 801298a:	460e      	mov	r6, r1
 801298c:	2b00      	cmp	r3, #0
 801298e:	d065      	beq.n	8012a5c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe0>
 8012990:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012994:	f100 0526 	add.w	r5, r0, #38	@ 0x26
 8012998:	ed9f 8a37 	vldr	s16, [pc, #220]	@ 8012a78 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xfc>
 801299c:	ee09 3a10 	vmov	s18, r3
 80129a0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 80129a4:	4628      	mov	r0, r5
 80129a6:	ee08 3a90 	vmov	s17, r3
 80129aa:	4b34      	ldr	r3, [pc, #208]	@ (8012a7c <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x100>)
 80129ac:	eeb8 9ac9 	vcvt.f32.s32	s18, s18
 80129b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80129b2:	eef8 8ae8 	vcvt.f32.s32	s17, s17
 80129b6:	930d      	str	r3, [sp, #52]	@ 0x34
 80129b8:	930e      	str	r3, [sp, #56]	@ 0x38
 80129ba:	ee39 9a08 	vadd.f32	s18, s18, s16
 80129be:	930f      	str	r3, [sp, #60]	@ 0x3c
 80129c0:	f007 fdc4 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80129c4:	ee07 0a90 	vmov	s15, r0
 80129c8:	4628      	mov	r0, r5
 80129ca:	ee78 8a88 	vadd.f32	s17, s17, s16
 80129ce:	eef8 9ae7 	vcvt.f32.s32	s19, s15
 80129d2:	f007 fdef 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80129d6:	4b2a      	ldr	r3, [pc, #168]	@ (8012a80 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x104>)
 80129d8:	ee07 0a90 	vmov	s15, r0
 80129dc:	781b      	ldrb	r3, [r3, #0]
 80129de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80129e2:	eef0 7a48 	vmov.f32	s15, s16
 80129e6:	2b01      	cmp	r3, #1
 80129e8:	d13c      	bne.n	8012a64 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0xe8>
 80129ea:	eef0 6a69 	vmov.f32	s13, s19
 80129ee:	ee19 3a90 	vmov	r3, s19
 80129f2:	eeb0 6a47 	vmov.f32	s12, s14
 80129f6:	eef0 5a47 	vmov.f32	s11, s14
 80129fa:	eef0 9a48 	vmov.f32	s19, s16
 80129fe:	eeb0 7a48 	vmov.f32	s14, s16
 8012a02:	9314      	str	r3, [sp, #80]	@ 0x50
 8012a04:	ab14      	add	r3, sp, #80	@ 0x50
 8012a06:	2200      	movs	r2, #0
 8012a08:	4631      	mov	r1, r6
 8012a0a:	9303      	str	r3, [sp, #12]
 8012a0c:	ab10      	add	r3, sp, #64	@ 0x40
 8012a0e:	4620      	mov	r0, r4
 8012a10:	edcd 7a04 	vstr	s15, [sp, #16]
 8012a14:	9302      	str	r3, [sp, #8]
 8012a16:	ab0c      	add	r3, sp, #48	@ 0x30
 8012a18:	ed8d 9a05 	vstr	s18, [sp, #20]
 8012a1c:	9301      	str	r3, [sp, #4]
 8012a1e:	ab08      	add	r3, sp, #32
 8012a20:	ed8d 9a06 	vstr	s18, [sp, #24]
 8012a24:	9300      	str	r3, [sp, #0]
 8012a26:	ab04      	add	r3, sp, #16
 8012a28:	edcd 7a07 	vstr	s15, [sp, #28]
 8012a2c:	edcd 7a08 	vstr	s15, [sp, #32]
 8012a30:	edcd 7a09 	vstr	s15, [sp, #36]	@ 0x24
 8012a34:	edcd 8a0a 	vstr	s17, [sp, #40]	@ 0x28
 8012a38:	edcd 8a0b 	vstr	s17, [sp, #44]	@ 0x2c
 8012a3c:	edcd 7a10 	vstr	s15, [sp, #64]	@ 0x40
 8012a40:	edcd 9a11 	vstr	s19, [sp, #68]	@ 0x44
 8012a44:	edcd 5a12 	vstr	s11, [sp, #72]	@ 0x48
 8012a48:	ed8d 6a13 	vstr	s12, [sp, #76]	@ 0x4c
 8012a4c:	edcd 7a15 	vstr	s15, [sp, #84]	@ 0x54
 8012a50:	ed8d 7a16 	vstr	s14, [sp, #88]	@ 0x58
 8012a54:	edcd 6a17 	vstr	s13, [sp, #92]	@ 0x5c
 8012a58:	f7ff fe7e 	bl	8012758 <_ZNK8touchgfx13ScalableImage8drawQuadERKNS_4RectEPtPKfS6_S6_S6_S6_>
 8012a5c:	b018      	add	sp, #96	@ 0x60
 8012a5e:	ecbd 8b04 	vpop	{d8-d9}
 8012a62:	bd70      	pop	{r4, r5, r6, pc}
 8012a64:	eef0 6a47 	vmov.f32	s13, s14
 8012a68:	ee18 3a10 	vmov	r3, s16
 8012a6c:	eef0 5a69 	vmov.f32	s11, s19
 8012a70:	eeb0 6a48 	vmov.f32	s12, s16
 8012a74:	e7c5      	b.n	8012a02 <_ZNK8touchgfx13ScalableImage4drawERKNS_4RectE+0x86>
 8012a76:	bf00      	nop
 8012a78:	00000000 	.word	0x00000000
 8012a7c:	42c80000 	.word	0x42c80000
 8012a80:	24025e18 	.word	0x24025e18

08012a84 <_ZNK8touchgfx8TextArea12getWildcard1Ev>:
 8012a84:	2000      	movs	r0, #0
 8012a86:	4770      	bx	lr

08012a88 <_ZNK8touchgfx8TextArea12getAlignmentEv>:
 8012a88:	4b07      	ldr	r3, [pc, #28]	@ (8012aa8 <_ZNK8touchgfx8TextArea12getAlignmentEv+0x20>)
 8012a8a:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	4293      	cmp	r3, r2
 8012a90:	bf81      	itttt	hi
 8012a92:	4b06      	ldrhi	r3, [pc, #24]	@ (8012aac <_ZNK8touchgfx8TextArea12getAlignmentEv+0x24>)
 8012a94:	681b      	ldrhi	r3, [r3, #0]
 8012a96:	eb03 0342 	addhi.w	r3, r3, r2, lsl #1
 8012a9a:	7858      	ldrbhi	r0, [r3, #1]
 8012a9c:	bf8c      	ite	hi
 8012a9e:	f000 0003 	andhi.w	r0, r0, #3
 8012aa2:	2000      	movls	r0, #0
 8012aa4:	4770      	bx	lr
 8012aa6:	bf00      	nop
 8012aa8:	24025e7c 	.word	0x24025e7c
 8012aac:	24025e78 	.word	0x24025e78

08012ab0 <_ZN8touchgfx8TextAreaD1Ev>:
 8012ab0:	4770      	bx	lr
	...

08012ab4 <_ZNK8touchgfx8TextArea13getTextHeightEv>:
 8012ab4:	4b11      	ldr	r3, [pc, #68]	@ (8012afc <_ZNK8touchgfx8TextArea13getTextHeightEv+0x48>)
 8012ab6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8012aba:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8012abc:	4604      	mov	r4, r0
 8012abe:	881b      	ldrh	r3, [r3, #0]
 8012ac0:	428b      	cmp	r3, r1
 8012ac2:	d918      	bls.n	8012af6 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x42>
 8012ac4:	6803      	ldr	r3, [r0, #0]
 8012ac6:	6f9d      	ldr	r5, [r3, #120]	@ 0x78
 8012ac8:	4b0d      	ldr	r3, [pc, #52]	@ (8012b00 <_ZNK8touchgfx8TextArea13getTextHeightEv+0x4c>)
 8012aca:	6818      	ldr	r0, [r3, #0]
 8012acc:	f7f1 fcdc 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8012ad0:	6823      	ldr	r3, [r4, #0]
 8012ad2:	4606      	mov	r6, r0
 8012ad4:	4620      	mov	r0, r4
 8012ad6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012ad8:	4798      	blx	r3
 8012ada:	6823      	ldr	r3, [r4, #0]
 8012adc:	4607      	mov	r7, r0
 8012ade:	4620      	mov	r0, r4
 8012ae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012ae4:	4798      	blx	r3
 8012ae6:	463a      	mov	r2, r7
 8012ae8:	4603      	mov	r3, r0
 8012aea:	4631      	mov	r1, r6
 8012aec:	4620      	mov	r0, r4
 8012aee:	46ac      	mov	ip, r5
 8012af0:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8012af4:	4760      	bx	ip
 8012af6:	2000      	movs	r0, #0
 8012af8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8012afc:	24025e7c 	.word	0x24025e7c
 8012b00:	24025e84 	.word	0x24025e84

08012b04 <_ZNK8touchgfx8TextArea12getTextWidthEv>:
 8012b04:	4b18      	ldr	r3, [pc, #96]	@ (8012b68 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x64>)
 8012b06:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8012b0a:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8012b0c:	4604      	mov	r4, r0
 8012b0e:	881b      	ldrh	r3, [r3, #0]
 8012b10:	428b      	cmp	r3, r1
 8012b12:	d926      	bls.n	8012b62 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x5e>
 8012b14:	4b15      	ldr	r3, [pc, #84]	@ (8012b6c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x68>)
 8012b16:	681b      	ldr	r3, [r3, #0]
 8012b18:	eb03 0241 	add.w	r2, r3, r1, lsl #1
 8012b1c:	f813 0011 	ldrb.w	r0, [r3, r1, lsl #1]
 8012b20:	4b13      	ldr	r3, [pc, #76]	@ (8012b70 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x6c>)
 8012b22:	7855      	ldrb	r5, [r2, #1]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f3c5 0581 	ubfx	r5, r5, #2, #2
 8012b2a:	f853 6020 	ldr.w	r6, [r3, r0, lsl #2]
 8012b2e:	6833      	ldr	r3, [r6, #0]
 8012b30:	69df      	ldr	r7, [r3, #28]
 8012b32:	4b10      	ldr	r3, [pc, #64]	@ (8012b74 <_ZNK8touchgfx8TextArea12getTextWidthEv+0x70>)
 8012b34:	6818      	ldr	r0, [r3, #0]
 8012b36:	f7f1 fca7 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8012b3a:	6823      	ldr	r3, [r4, #0]
 8012b3c:	4680      	mov	r8, r0
 8012b3e:	4620      	mov	r0, r4
 8012b40:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012b42:	4798      	blx	r3
 8012b44:	6823      	ldr	r3, [r4, #0]
 8012b46:	4681      	mov	r9, r0
 8012b48:	4620      	mov	r0, r4
 8012b4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012b4e:	4798      	blx	r3
 8012b50:	464b      	mov	r3, r9
 8012b52:	9000      	str	r0, [sp, #0]
 8012b54:	4642      	mov	r2, r8
 8012b56:	4629      	mov	r1, r5
 8012b58:	4630      	mov	r0, r6
 8012b5a:	47b8      	blx	r7
 8012b5c:	b003      	add	sp, #12
 8012b5e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8012b62:	2000      	movs	r0, #0
 8012b64:	e7fa      	b.n	8012b5c <_ZNK8touchgfx8TextArea12getTextWidthEv+0x58>
 8012b66:	bf00      	nop
 8012b68:	24025e7c 	.word	0x24025e7c
 8012b6c:	24025e78 	.word	0x24025e78
 8012b70:	24025e80 	.word	0x24025e80
 8012b74:	24025e84 	.word	0x24025e84

08012b78 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz>:
 8012b78:	b40e      	push	{r1, r2, r3}
 8012b7a:	4b30      	ldr	r3, [pc, #192]	@ (8012c3c <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc4>)
 8012b7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012b80:	881a      	ldrh	r2, [r3, #0]
 8012b82:	b09d      	sub	sp, #116	@ 0x74
 8012b84:	8d83      	ldrh	r3, [r0, #44]	@ 0x2c
 8012b86:	4604      	mov	r4, r0
 8012b88:	429a      	cmp	r2, r3
 8012b8a:	d954      	bls.n	8012c36 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xbe>
 8012b8c:	aa26      	add	r2, sp, #152	@ 0x98
 8012b8e:	f8df 90b0 	ldr.w	r9, [pc, #176]	@ 8012c40 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xc8>
 8012b92:	f8df 80b0 	ldr.w	r8, [pc, #176]	@ 8012c44 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xcc>
 8012b96:	9202      	str	r2, [sp, #8]
 8012b98:	f8d9 2000 	ldr.w	r2, [r9]
 8012b9c:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 8012ba0:	f8d8 3000 	ldr.w	r3, [r8]
 8012ba4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012ba8:	682b      	ldr	r3, [r5, #0]
 8012baa:	4628      	mov	r0, r5
 8012bac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012bae:	4798      	blx	r3
 8012bb0:	4606      	mov	r6, r0
 8012bb2:	b207      	sxth	r7, r0
 8012bb4:	a803      	add	r0, sp, #12
 8012bb6:	f006 f837 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8012bba:	682b      	ldr	r3, [r5, #0]
 8012bbc:	4628      	mov	r0, r5
 8012bbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012bc0:	4798      	blx	r3
 8012bc2:	682b      	ldr	r3, [r5, #0]
 8012bc4:	4682      	mov	sl, r0
 8012bc6:	4628      	mov	r0, r5
 8012bc8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012bca:	4798      	blx	r3
 8012bcc:	4653      	mov	r3, sl
 8012bce:	9000      	str	r0, [sp, #0]
 8012bd0:	a803      	add	r0, sp, #12
 8012bd2:	9a02      	ldr	r2, [sp, #8]
 8012bd4:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8012bd6:	f006 f882 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8012bda:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8012bdc:	f8d9 3000 	ldr.w	r3, [r9]
 8012be0:	f894 c037 	ldrb.w	ip, [r4, #55]	@ 0x37
 8012be4:	8925      	ldrh	r5, [r4, #8]
 8012be6:	eb03 0142 	add.w	r1, r3, r2, lsl #1
 8012bea:	f813 0012 	ldrb.w	r0, [r3, r2, lsl #1]
 8012bee:	eba5 050c 	sub.w	r5, r5, ip
 8012bf2:	784a      	ldrb	r2, [r1, #1]
 8012bf4:	f8d8 3000 	ldr.w	r3, [r8]
 8012bf8:	b22d      	sxth	r5, r5
 8012bfa:	f894 1039 	ldrb.w	r1, [r4, #57]	@ 0x39
 8012bfe:	f3c2 0281 	ubfx	r2, r2, #2, #2
 8012c02:	9500      	str	r5, [sp, #0]
 8012c04:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8012c08:	a803      	add	r0, sp, #12
 8012c0a:	f003 fb73 	bl	80162f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>
 8012c0e:	f9b4 2034 	ldrsh.w	r2, [r4, #52]	@ 0x34
 8012c12:	b203      	sxth	r3, r0
 8012c14:	18b9      	adds	r1, r7, r2
 8012c16:	2900      	cmp	r1, #0
 8012c18:	dd0b      	ble.n	8012c32 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xba>
 8012c1a:	3b01      	subs	r3, #1
 8012c1c:	fb13 f302 	smulbb	r3, r3, r2
 8012c20:	fb16 3300 	smlabb	r3, r6, r0, r3
 8012c24:	b21f      	sxth	r7, r3
 8012c26:	4638      	mov	r0, r7
 8012c28:	b01d      	add	sp, #116	@ 0x74
 8012c2a:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012c2e:	b003      	add	sp, #12
 8012c30:	4770      	bx	lr
 8012c32:	2b00      	cmp	r3, #0
 8012c34:	dcf7      	bgt.n	8012c26 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012c36:	2700      	movs	r7, #0
 8012c38:	e7f5      	b.n	8012c26 <_ZNK8touchgfx8TextArea19calculateTextHeightEPKtz+0xae>
 8012c3a:	bf00      	nop
 8012c3c:	24025e7c 	.word	0x24025e7c
 8012c40:	24025e78 	.word	0x24025e78
 8012c44:	24025e80 	.word	0x24025e80

08012c48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv>:
 8012c48:	4bbd      	ldr	r3, [pc, #756]	@ (8012f40 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2f8>)
 8012c4a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012c4e:	460c      	mov	r4, r1
 8012c50:	881b      	ldrh	r3, [r3, #0]
 8012c52:	8d89      	ldrh	r1, [r1, #44]	@ 0x2c
 8012c54:	b0a9      	sub	sp, #164	@ 0xa4
 8012c56:	4680      	mov	r8, r0
 8012c58:	428b      	cmp	r3, r1
 8012c5a:	d809      	bhi.n	8012c70 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x28>
 8012c5c:	2300      	movs	r3, #0
 8012c5e:	f04f 32ff 	mov.w	r2, #4294967295
 8012c62:	6083      	str	r3, [r0, #8]
 8012c64:	e9c0 3200 	strd	r3, r2, [r0]
 8012c68:	4640      	mov	r0, r8
 8012c6a:	b029      	add	sp, #164	@ 0xa4
 8012c6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012c70:	4eb4      	ldr	r6, [pc, #720]	@ (8012f44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>)
 8012c72:	6833      	ldr	r3, [r6, #0]
 8012c74:	f813 2011 	ldrb.w	r2, [r3, r1, lsl #1]
 8012c78:	4bb3      	ldr	r3, [pc, #716]	@ (8012f48 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x300>)
 8012c7a:	681b      	ldr	r3, [r3, #0]
 8012c7c:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8012c80:	4bb2      	ldr	r3, [pc, #712]	@ (8012f4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8012c82:	6818      	ldr	r0, [r3, #0]
 8012c84:	f7f1 fc00 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8012c88:	682b      	ldr	r3, [r5, #0]
 8012c8a:	4681      	mov	r9, r0
 8012c8c:	4628      	mov	r0, r5
 8012c8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c90:	4798      	blx	r3
 8012c92:	8ea7      	ldrh	r7, [r4, #52]	@ 0x34
 8012c94:	b203      	sxth	r3, r0
 8012c96:	4682      	mov	sl, r0
 8012c98:	4407      	add	r7, r0
 8012c9a:	a80f      	add	r0, sp, #60	@ 0x3c
 8012c9c:	9304      	str	r3, [sp, #16]
 8012c9e:	b2bb      	uxth	r3, r7
 8012ca0:	9303      	str	r3, [sp, #12]
 8012ca2:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 8012ca6:	2b00      	cmp	r3, #0
 8012ca8:	f040 80a5 	bne.w	8012df6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x1ae>
 8012cac:	f005 ffbc 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8012cb0:	682b      	ldr	r3, [r5, #0]
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012cb6:	4798      	blx	r3
 8012cb8:	682b      	ldr	r3, [r5, #0]
 8012cba:	4606      	mov	r6, r0
 8012cbc:	4628      	mov	r0, r5
 8012cbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012cc0:	4798      	blx	r3
 8012cc2:	6823      	ldr	r3, [r4, #0]
 8012cc4:	4607      	mov	r7, r0
 8012cc6:	4620      	mov	r0, r4
 8012cc8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012cca:	4798      	blx	r3
 8012ccc:	6823      	ldr	r3, [r4, #0]
 8012cce:	4683      	mov	fp, r0
 8012cd0:	4620      	mov	r0, r4
 8012cd2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8012cd6:	4798      	blx	r3
 8012cd8:	463b      	mov	r3, r7
 8012cda:	4649      	mov	r1, r9
 8012cdc:	4632      	mov	r2, r6
 8012cde:	2600      	movs	r6, #0
 8012ce0:	e9cd b000 	strd	fp, r0, [sp]
 8012ce4:	a80f      	add	r0, sp, #60	@ 0x3c
 8012ce6:	4637      	mov	r7, r6
 8012ce8:	f006 f80e 	bl	8018d08 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012cec:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012cf0:	f8df b250 	ldr.w	fp, [pc, #592]	@ 8012f44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2fc>
 8012cf4:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8012cf8:	bf0c      	ite	eq
 8012cfa:	f9b4 900a 	ldrsheq.w	r9, [r4, #10]
 8012cfe:	f9b4 9008 	ldrshne.w	r9, [r4, #8]
 8012d02:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8012d04:	4629      	mov	r1, r5
 8012d06:	f8db 3000 	ldr.w	r3, [fp]
 8012d0a:	a80f      	add	r0, sp, #60	@ 0x3c
 8012d0c:	3701      	adds	r7, #1
 8012d0e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 8012d12:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 8012d16:	b2bf      	uxth	r7, r7
 8012d18:	785b      	ldrb	r3, [r3, #1]
 8012d1a:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8012d1e:	f002 fff0 	bl	8015d02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 8012d22:	9b03      	ldr	r3, [sp, #12]
 8012d24:	4286      	cmp	r6, r0
 8012d26:	eba9 0903 	sub.w	r9, r9, r3
 8012d2a:	bfb8      	it	lt
 8012d2c:	4606      	movlt	r6, r0
 8012d2e:	a80f      	add	r0, sp, #60	@ 0x3c
 8012d30:	fa0f f989 	sxth.w	r9, r9
 8012d34:	b236      	sxth	r6, r6
 8012d36:	f005 ff9e 	bl	8018c76 <_ZN8touchgfx12TextProvider11endOfStringEv>
 8012d3a:	b918      	cbnz	r0, 8012d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8012d3c:	7a2b      	ldrb	r3, [r5, #8]
 8012d3e:	444b      	add	r3, r9
 8012d40:	2b00      	cmp	r3, #0
 8012d42:	dcde      	bgt.n	8012d02 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xba>
 8012d44:	9b03      	ldr	r3, [sp, #12]
 8012d46:	4620      	mov	r0, r4
 8012d48:	9a04      	ldr	r2, [sp, #16]
 8012d4a:	fb13 f707 	smulbb	r7, r3, r7
 8012d4e:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8012d50:	f895 9009 	ldrb.w	r9, [r5, #9]
 8012d54:	1aff      	subs	r7, r7, r3
 8012d56:	b2bf      	uxth	r7, r7
 8012d58:	b23b      	sxth	r3, r7
 8012d5a:	429a      	cmp	r2, r3
 8012d5c:	bfa8      	it	ge
 8012d5e:	4657      	movge	r7, sl
 8012d60:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012d64:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8012d68:	6823      	ldr	r3, [r4, #0]
 8012d6a:	444f      	add	r7, r9
 8012d6c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8012d6e:	bf08      	it	eq
 8012d70:	f9b4 a008 	ldrsheq.w	sl, [r4, #8]
 8012d74:	fa1f f987 	uxth.w	r9, r7
 8012d78:	bf18      	it	ne
 8012d7a:	f9b4 a00a 	ldrshne.w	sl, [r4, #10]
 8012d7e:	4798      	blx	r3
 8012d80:	2801      	cmp	r0, #1
 8012d82:	fa0f f789 	sxth.w	r7, r9
 8012d86:	b2b3      	uxth	r3, r6
 8012d88:	f000 80e2 	beq.w	8012f50 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x308>
 8012d8c:	2802      	cmp	r0, #2
 8012d8e:	f894 6037 	ldrb.w	r6, [r4, #55]	@ 0x37
 8012d92:	f000 80e3 	beq.w	8012f5c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x314>
 8012d96:	7aea      	ldrb	r2, [r5, #11]
 8012d98:	b236      	sxth	r6, r6
 8012d9a:	7b2d      	ldrb	r5, [r5, #12]
 8012d9c:	1ab6      	subs	r6, r6, r2
 8012d9e:	442a      	add	r2, r5
 8012da0:	fa1f fa86 	uxth.w	sl, r6
 8012da4:	4413      	add	r3, r2
 8012da6:	f894 2038 	ldrb.w	r2, [r4, #56]	@ 0x38
 8012daa:	fa0f fb8a 	sxth.w	fp, sl
 8012dae:	b29b      	uxth	r3, r3
 8012db0:	2a02      	cmp	r2, #2
 8012db2:	b21e      	sxth	r6, r3
 8012db4:	f000 80d6 	beq.w	8012f64 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x31c>
 8012db8:	2a03      	cmp	r2, #3
 8012dba:	f000 80de 	beq.w	8012f7a <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x332>
 8012dbe:	2a01      	cmp	r2, #1
 8012dc0:	f040 80e6 	bne.w	8012f90 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x348>
 8012dc4:	8925      	ldrh	r5, [r4, #8]
 8012dc6:	4633      	mov	r3, r6
 8012dc8:	463e      	mov	r6, r7
 8012dca:	eba5 0909 	sub.w	r9, r5, r9
 8012dce:	461f      	mov	r7, r3
 8012dd0:	465d      	mov	r5, fp
 8012dd2:	fa0f fb89 	sxth.w	fp, r9
 8012dd6:	4b5d      	ldr	r3, [pc, #372]	@ (8012f4c <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x304>)
 8012dd8:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8012dda:	6818      	ldr	r0, [r3, #0]
 8012ddc:	f7f1 fb54 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8012de0:	f8a8 b000 	strh.w	fp, [r8]
 8012de4:	f8a8 5002 	strh.w	r5, [r8, #2]
 8012de8:	f8a8 6004 	strh.w	r6, [r8, #4]
 8012dec:	f8a8 7006 	strh.w	r7, [r8, #6]
 8012df0:	f8c8 0008 	str.w	r0, [r8, #8]
 8012df4:	e738      	b.n	8012c68 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x20>
 8012df6:	f005 ff17 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8012dfa:	682b      	ldr	r3, [r5, #0]
 8012dfc:	4628      	mov	r0, r5
 8012dfe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012e00:	4798      	blx	r3
 8012e02:	682b      	ldr	r3, [r5, #0]
 8012e04:	4607      	mov	r7, r0
 8012e06:	4628      	mov	r0, r5
 8012e08:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012e0a:	4798      	blx	r3
 8012e0c:	6823      	ldr	r3, [r4, #0]
 8012e0e:	4683      	mov	fp, r0
 8012e10:	4620      	mov	r0, r4
 8012e12:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8012e14:	4798      	blx	r3
 8012e16:	6822      	ldr	r2, [r4, #0]
 8012e18:	9005      	str	r0, [sp, #20]
 8012e1a:	4620      	mov	r0, r4
 8012e1c:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8012e20:	4790      	blx	r2
 8012e22:	9b05      	ldr	r3, [sp, #20]
 8012e24:	463a      	mov	r2, r7
 8012e26:	4649      	mov	r1, r9
 8012e28:	9001      	str	r0, [sp, #4]
 8012e2a:	a80f      	add	r0, sp, #60	@ 0x3c
 8012e2c:	9300      	str	r3, [sp, #0]
 8012e2e:	465b      	mov	r3, fp
 8012e30:	f005 ff6a 	bl	8018d08 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>
 8012e34:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8012e38:	f9b4 9008 	ldrsh.w	r9, [r4, #8]
 8012e3c:	af0f      	add	r7, sp, #60	@ 0x3c
 8012e3e:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8012e42:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 8012e46:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 8012e48:	bf0a      	itet	eq
 8012e4a:	464a      	moveq	r2, r9
 8012e4c:	461a      	movne	r2, r3
 8012e4e:	4699      	moveq	r9, r3
 8012e50:	f894 3037 	ldrb.w	r3, [r4, #55]	@ 0x37
 8012e54:	f894 0039 	ldrb.w	r0, [r4, #57]	@ 0x39
 8012e58:	1ad2      	subs	r2, r2, r3
 8012e5a:	6833      	ldr	r3, [r6, #0]
 8012e5c:	f9b4 6034 	ldrsh.w	r6, [r4, #52]	@ 0x34
 8012e60:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8012e64:	7859      	ldrb	r1, [r3, #1]
 8012e66:	2300      	movs	r3, #0
 8012e68:	9707      	str	r7, [sp, #28]
 8012e6a:	f3c1 0181 	ubfx	r1, r1, #2, #2
 8012e6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012e72:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 8012e76:	f88d 1020 	strb.w	r1, [sp, #32]
 8012e7a:	9509      	str	r5, [sp, #36]	@ 0x24
 8012e7c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012e80:	f8ad 902a 	strh.w	r9, [sp, #42]	@ 0x2a
 8012e84:	f8ad 602c 	strh.w	r6, [sp, #44]	@ 0x2c
 8012e88:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012e8c:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8012e90:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8012e94:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8012e98:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8012e9c:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012ea0:	f88d 303a 	strb.w	r3, [sp, #58]	@ 0x3a
 8012ea4:	b350      	cbz	r0, 8012efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012ea6:	682b      	ldr	r3, [r5, #0]
 8012ea8:	4628      	mov	r0, r5
 8012eaa:	695b      	ldr	r3, [r3, #20]
 8012eac:	4798      	blx	r3
 8012eae:	4607      	mov	r7, r0
 8012eb0:	b320      	cbz	r0, 8012efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012eb4:	4639      	mov	r1, r7
 8012eb6:	6803      	ldr	r3, [r0, #0]
 8012eb8:	68db      	ldr	r3, [r3, #12]
 8012eba:	4798      	blx	r3
 8012ebc:	4606      	mov	r6, r0
 8012ebe:	b1e8      	cbz	r0, 8012efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012ec0:	7b43      	ldrb	r3, [r0, #13]
 8012ec2:	7a82      	ldrb	r2, [r0, #10]
 8012ec4:	005b      	lsls	r3, r3, #1
 8012ec6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012eca:	4313      	orrs	r3, r2
 8012ecc:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 8012ed0:	f89d 3021 	ldrb.w	r3, [sp, #33]	@ 0x21
 8012ed4:	2b06      	cmp	r3, #6
 8012ed6:	d111      	bne.n	8012efc <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b4>
 8012ed8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012eda:	4632      	mov	r2, r6
 8012edc:	4639      	mov	r1, r7
 8012ede:	6803      	ldr	r3, [r0, #0]
 8012ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ee2:	4798      	blx	r3
 8012ee4:	7b73      	ldrb	r3, [r6, #13]
 8012ee6:	005b      	lsls	r3, r3, #1
 8012ee8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8012eec:	7ab3      	ldrb	r3, [r6, #10]
 8012eee:	4313      	orrs	r3, r2
 8012ef0:	4418      	add	r0, r3
 8012ef2:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8012ef6:	4418      	add	r0, r3
 8012ef8:	f8ad 0038 	strh.w	r0, [sp, #56]	@ 0x38
 8012efc:	2600      	movs	r6, #0
 8012efe:	4637      	mov	r7, r6
 8012f00:	a806      	add	r0, sp, #24
 8012f02:	3701      	adds	r7, #1
 8012f04:	f003 f8f3 	bl	80160ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8012f08:	f8bd 0036 	ldrh.w	r0, [sp, #54]	@ 0x36
 8012f0c:	9b03      	ldr	r3, [sp, #12]
 8012f0e:	b2bf      	uxth	r7, r7
 8012f10:	4286      	cmp	r6, r0
 8012f12:	eba9 0903 	sub.w	r9, r9, r3
 8012f16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8012f1a:	bfb8      	it	lt
 8012f1c:	4606      	movlt	r6, r0
 8012f1e:	fa0f f989 	sxth.w	r9, r9
 8012f22:	b236      	sxth	r6, r6
 8012f24:	2b00      	cmp	r3, #0
 8012f26:	f43f af0d 	beq.w	8012d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8012f2a:	f89d 303a 	ldrb.w	r3, [sp, #58]	@ 0x3a
 8012f2e:	2b00      	cmp	r3, #0
 8012f30:	f47f af08 	bne.w	8012d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8012f34:	7a2b      	ldrb	r3, [r5, #8]
 8012f36:	444b      	add	r3, r9
 8012f38:	2b00      	cmp	r3, #0
 8012f3a:	dce1      	bgt.n	8012f00 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x2b8>
 8012f3c:	e702      	b.n	8012d44 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0xfc>
 8012f3e:	bf00      	nop
 8012f40:	24025e7c 	.word	0x24025e7c
 8012f44:	24025e78 	.word	0x24025e78
 8012f48:	24025e80 	.word	0x24025e80
 8012f4c:	24025e84 	.word	0x24025e84
 8012f50:	ebaa 0606 	sub.w	r6, sl, r6
 8012f54:	2002      	movs	r0, #2
 8012f56:	fb96 f6f0 	sdiv	r6, r6, r0
 8012f5a:	e71c      	b.n	8012d96 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8012f5c:	441e      	add	r6, r3
 8012f5e:	ebaa 0606 	sub.w	r6, sl, r6
 8012f62:	e718      	b.n	8012d96 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x14e>
 8012f64:	8925      	ldrh	r5, [r4, #8]
 8012f66:	1aed      	subs	r5, r5, r3
 8012f68:	eba5 050a 	sub.w	r5, r5, sl
 8012f6c:	fa0f fb85 	sxth.w	fp, r5
 8012f70:	8965      	ldrh	r5, [r4, #10]
 8012f72:	eba5 0509 	sub.w	r5, r5, r9
 8012f76:	b22d      	sxth	r5, r5
 8012f78:	e72d      	b.n	8012dd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8012f7a:	8965      	ldrh	r5, [r4, #10]
 8012f7c:	f04f 0b00 	mov.w	fp, #0
 8012f80:	1aed      	subs	r5, r5, r3
 8012f82:	4633      	mov	r3, r6
 8012f84:	463e      	mov	r6, r7
 8012f86:	eba5 050a 	sub.w	r5, r5, sl
 8012f8a:	461f      	mov	r7, r3
 8012f8c:	b22d      	sxth	r5, r5
 8012f8e:	e722      	b.n	8012dd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>
 8012f90:	2500      	movs	r5, #0
 8012f92:	e720      	b.n	8012dd6 <_ZNK8touchgfx8TextArea21calculateBoundingAreaEv+0x18e>

08012f94 <_ZN8touchgfx8TextAreaD0Ev>:
 8012f94:	b510      	push	{r4, lr}
 8012f96:	4604      	mov	r4, r0
 8012f98:	2148      	movs	r1, #72	@ 0x48
 8012f9a:	f013 f83b 	bl	8026014 <_ZdlPvj>
 8012f9e:	4620      	mov	r0, r4
 8012fa0:	bd10      	pop	{r4, pc}
	...

08012fa4 <_ZNK8touchgfx8TextArea17invalidateContentEv>:
 8012fa4:	b513      	push	{r0, r1, r4, lr}
 8012fa6:	f890 3036 	ldrb.w	r3, [r0, #54]	@ 0x36
 8012faa:	4604      	mov	r4, r0
 8012fac:	b1fb      	cbz	r3, 8012fee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012fae:	4b16      	ldr	r3, [pc, #88]	@ (8013008 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x64>)
 8012fb0:	8d81      	ldrh	r1, [r0, #44]	@ 0x2c
 8012fb2:	881b      	ldrh	r3, [r3, #0]
 8012fb4:	428b      	cmp	r3, r1
 8012fb6:	d91a      	bls.n	8012fee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012fb8:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 8012fbc:	2b00      	cmp	r3, #0
 8012fbe:	dd16      	ble.n	8012fee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012fc0:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	dd12      	ble.n	8012fee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8012fc8:	4b10      	ldr	r3, [pc, #64]	@ (801300c <_ZNK8touchgfx8TextArea17invalidateContentEv+0x68>)
 8012fca:	6818      	ldr	r0, [r3, #0]
 8012fcc:	f7f1 fa5c 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8012fd0:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8012fd4:	6822      	ldr	r2, [r4, #0]
 8012fd6:	2b00      	cmp	r3, #0
 8012fd8:	db06      	blt.n	8012fe8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8012fda:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8012fde:	2b00      	cmp	r3, #0
 8012fe0:	db02      	blt.n	8012fe8 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x44>
 8012fe2:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8012fe4:	4298      	cmp	r0, r3
 8012fe6:	d004      	beq.n	8012ff2 <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4e>
 8012fe8:	6953      	ldr	r3, [r2, #20]
 8012fea:	4620      	mov	r0, r4
 8012fec:	4798      	blx	r3
 8012fee:	b002      	add	sp, #8
 8012ff0:	bd10      	pop	{r4, pc}
 8012ff2:	f104 013c 	add.w	r1, r4, #60	@ 0x3c
 8012ff6:	466b      	mov	r3, sp
 8012ff8:	6912      	ldr	r2, [r2, #16]
 8012ffa:	c903      	ldmia	r1, {r0, r1}
 8012ffc:	e883 0003 	stmia.w	r3, {r0, r1}
 8013000:	4619      	mov	r1, r3
 8013002:	4620      	mov	r0, r4
 8013004:	4790      	blx	r2
 8013006:	e7f2      	b.n	8012fee <_ZNK8touchgfx8TextArea17invalidateContentEv+0x4a>
 8013008:	24025e7c 	.word	0x24025e7c
 801300c:	24025e84 	.word	0x24025e84

08013010 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE>:
 8013010:	4b45      	ldr	r3, [pc, #276]	@ (8013128 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x118>)
 8013012:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013016:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013018:	b08e      	sub	sp, #56	@ 0x38
 801301a:	881b      	ldrh	r3, [r3, #0]
 801301c:	4604      	mov	r4, r0
 801301e:	4293      	cmp	r3, r2
 8013020:	d97e      	bls.n	8013120 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013022:	6808      	ldr	r0, [r1, #0]
 8013024:	ab05      	add	r3, sp, #20
 8013026:	6849      	ldr	r1, [r1, #4]
 8013028:	4d40      	ldr	r5, [pc, #256]	@ (801312c <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x11c>)
 801302a:	c303      	stmia	r3!, {r0, r1}
 801302c:	4611      	mov	r1, r2
 801302e:	6828      	ldr	r0, [r5, #0]
 8013030:	f7f1 fa2a 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8013034:	f9b4 3042 	ldrsh.w	r3, [r4, #66]	@ 0x42
 8013038:	2b00      	cmp	r3, #0
 801303a:	db11      	blt.n	8013060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801303c:	f9b4 3040 	ldrsh.w	r3, [r4, #64]	@ 0x40
 8013040:	2b00      	cmp	r3, #0
 8013042:	db0d      	blt.n	8013060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 8013044:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8013046:	4298      	cmp	r0, r3
 8013048:	d10a      	bne.n	8013060 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x50>
 801304a:	f104 023c 	add.w	r2, r4, #60	@ 0x3c
 801304e:	ab09      	add	r3, sp, #36	@ 0x24
 8013050:	e892 0003 	ldmia.w	r2, {r0, r1}
 8013054:	e883 0003 	stmia.w	r3, {r0, r1}
 8013058:	4619      	mov	r1, r3
 801305a:	a805      	add	r0, sp, #20
 801305c:	f7fc ff5a 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8013060:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013064:	2b00      	cmp	r3, #0
 8013066:	dd5b      	ble.n	8013120 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013068:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 801306c:	2b00      	cmp	r3, #0
 801306e:	dd57      	ble.n	8013120 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013070:	4f2f      	ldr	r7, [pc, #188]	@ (8013130 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x120>)
 8013072:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013074:	683b      	ldr	r3, [r7, #0]
 8013076:	f813 2012 	ldrb.w	r2, [r3, r2, lsl #1]
 801307a:	4b2e      	ldr	r3, [pc, #184]	@ (8013134 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x124>)
 801307c:	681b      	ldr	r3, [r3, #0]
 801307e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8013082:	2e00      	cmp	r6, #0
 8013084:	d04c      	beq.n	8013120 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x110>
 8013086:	6823      	ldr	r3, [r4, #0]
 8013088:	4620      	mov	r0, r4
 801308a:	f894 8036 	ldrb.w	r8, [r4, #54]	@ 0x36
 801308e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013090:	4798      	blx	r3
 8013092:	8da2      	ldrh	r2, [r4, #44]	@ 0x2c
 8013094:	683b      	ldr	r3, [r7, #0]
 8013096:	f9b4 c034 	ldrsh.w	ip, [r4, #52]	@ 0x34
 801309a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801309e:	f894 e038 	ldrb.w	lr, [r4, #56]	@ 0x38
 80130a2:	f894 2039 	ldrb.w	r2, [r4, #57]	@ 0x39
 80130a6:	785b      	ldrb	r3, [r3, #1]
 80130a8:	f894 7037 	ldrb.w	r7, [r4, #55]	@ 0x37
 80130ac:	f3c3 0381 	ubfx	r3, r3, #2, #2
 80130b0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80130b2:	9609      	str	r6, [sp, #36]	@ 0x24
 80130b4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80130b8:	4b1f      	ldr	r3, [pc, #124]	@ (8013138 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0x128>)
 80130ba:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	f88d e02a 	strb.w	lr, [sp, #42]	@ 0x2a
 80130c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80130c6:	f8ad c030 	strh.w	ip, [sp, #48]	@ 0x30
 80130ca:	f88d 8032 	strb.w	r8, [sp, #50]	@ 0x32
 80130ce:	f88d 7033 	strb.w	r7, [sp, #51]	@ 0x33
 80130d2:	f88d 2034 	strb.w	r2, [sp, #52]	@ 0x34
 80130d6:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80130da:	b10a      	cbz	r2, 80130e0 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd0>
 80130dc:	6cde      	ldr	r6, [r3, #76]	@ 0x4c
 80130de:	b906      	cbnz	r6, 80130e2 <_ZNK8touchgfx8TextArea4drawERKNS_4RectE+0xd2>
 80130e0:	689e      	ldr	r6, [r3, #8]
 80130e2:	af07      	add	r7, sp, #28
 80130e4:	4621      	mov	r1, r4
 80130e6:	4638      	mov	r0, r7
 80130e8:	f004 fea4 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80130ec:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 80130ee:	6828      	ldr	r0, [r5, #0]
 80130f0:	f7f1 f9ca 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 80130f4:	6823      	ldr	r3, [r4, #0]
 80130f6:	4605      	mov	r5, r0
 80130f8:	4620      	mov	r0, r4
 80130fa:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80130fc:	4798      	blx	r3
 80130fe:	6823      	ldr	r3, [r4, #0]
 8013100:	4680      	mov	r8, r0
 8013102:	4620      	mov	r0, r4
 8013104:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013108:	4798      	blx	r3
 801310a:	ab09      	add	r3, sp, #36	@ 0x24
 801310c:	9501      	str	r5, [sp, #4]
 801310e:	9300      	str	r3, [sp, #0]
 8013110:	ab05      	add	r3, sp, #20
 8013112:	e9cd 8002 	strd	r8, r0, [sp, #8]
 8013116:	4630      	mov	r0, r6
 8013118:	e897 0006 	ldmia.w	r7, {r1, r2}
 801311c:	f7f1 f966 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 8013120:	b00e      	add	sp, #56	@ 0x38
 8013122:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8013126:	bf00      	nop
 8013128:	24025e7c 	.word	0x24025e7c
 801312c:	24025e84 	.word	0x24025e84
 8013130:	24025e78 	.word	0x24025e78
 8013134:	24025e80 	.word	0x24025e80
 8013138:	24025e20 	.word	0x24025e20

0801313c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>:
 801313c:	b538      	push	{r3, r4, r5, lr}
 801313e:	4b0e      	ldr	r3, [pc, #56]	@ (8013178 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x3c>)
 8013140:	4604      	mov	r4, r0
 8013142:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 8013144:	881b      	ldrh	r3, [r3, #0]
 8013146:	429a      	cmp	r2, r3
 8013148:	d214      	bcs.n	8013174 <_ZN8touchgfx8TextArea19resizeToCurrentTextEv+0x38>
 801314a:	6803      	ldr	r3, [r0, #0]
 801314c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801314e:	4798      	blx	r3
 8013150:	6823      	ldr	r3, [r4, #0]
 8013152:	4605      	mov	r5, r0
 8013154:	4620      	mov	r0, r4
 8013156:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013158:	4798      	blx	r3
 801315a:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 801315e:	b22d      	sxth	r5, r5
 8013160:	4601      	mov	r1, r0
 8013162:	f013 0ffd 	tst.w	r3, #253	@ 0xfd
 8013166:	bf06      	itte	eq
 8013168:	4602      	moveq	r2, r0
 801316a:	4629      	moveq	r1, r5
 801316c:	462a      	movne	r2, r5
 801316e:	4620      	mov	r0, r4
 8013170:	f7f1 fb35 	bl	80047de <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8013174:	bd38      	pop	{r3, r4, r5, pc}
 8013176:	bf00      	nop
 8013178:	24025e7c 	.word	0x24025e7c

0801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>:
 801317c:	b530      	push	{r4, r5, lr}
 801317e:	888b      	ldrh	r3, [r1, #4]
 8013180:	b085      	sub	sp, #20
 8013182:	4604      	mov	r4, r0
 8013184:	8583      	strh	r3, [r0, #44]	@ 0x2c
 8013186:	f9b0 3008 	ldrsh.w	r3, [r0, #8]
 801318a:	b923      	cbnz	r3, 8013196 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 801318c:	f9b0 300a 	ldrsh.w	r3, [r0, #10]
 8013190:	b90b      	cbnz	r3, 8013196 <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE+0x1a>
 8013192:	f7ff ffd3 	bl	801313c <_ZN8touchgfx8TextArea19resizeToCurrentTextEv>
 8013196:	6823      	ldr	r3, [r4, #0]
 8013198:	466d      	mov	r5, sp
 801319a:	4621      	mov	r1, r4
 801319c:	343c      	adds	r4, #60	@ 0x3c
 801319e:	4628      	mov	r0, r5
 80131a0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80131a4:	4798      	blx	r3
 80131a6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80131aa:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 80131ae:	b005      	add	sp, #20
 80131b0:	bd30      	pop	{r4, r5, pc}

080131b2 <_ZNK8touchgfx3Box12getSolidRectEv>:
 80131b2:	2300      	movs	r3, #0
 80131b4:	8083      	strh	r3, [r0, #4]
 80131b6:	80c3      	strh	r3, [r0, #6]
 80131b8:	8003      	strh	r3, [r0, #0]
 80131ba:	8043      	strh	r3, [r0, #2]
 80131bc:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 80131c0:	2bff      	cmp	r3, #255	@ 0xff
 80131c2:	bf01      	itttt	eq
 80131c4:	890b      	ldrheq	r3, [r1, #8]
 80131c6:	8083      	strheq	r3, [r0, #4]
 80131c8:	894b      	ldrheq	r3, [r1, #10]
 80131ca:	80c3      	strheq	r3, [r0, #6]
 80131cc:	4770      	bx	lr
	...

080131d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 80131d0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80131d2:	4604      	mov	r4, r0
 80131d4:	466b      	mov	r3, sp
 80131d6:	6808      	ldr	r0, [r1, #0]
 80131d8:	6849      	ldr	r1, [r1, #4]
 80131da:	c303      	stmia	r3!, {r0, r1}
 80131dc:	6823      	ldr	r3, [r4, #0]
 80131de:	4669      	mov	r1, sp
 80131e0:	4620      	mov	r0, r4
 80131e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131e4:	4798      	blx	r3
 80131e6:	4b08      	ldr	r3, [pc, #32]	@ (8013208 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 80131e8:	681b      	ldr	r3, [r3, #0]
 80131ea:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80131ee:	b10a      	cbz	r2, 80131f4 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 80131f0:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80131f2:	b900      	cbnz	r0, 80131f6 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 80131f4:	6898      	ldr	r0, [r3, #8]
 80131f6:	6803      	ldr	r3, [r0, #0]
 80131f8:	4669      	mov	r1, sp
 80131fa:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 80131fc:	6a1d      	ldr	r5, [r3, #32]
 80131fe:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8013202:	47a8      	blx	r5
 8013204:	b003      	add	sp, #12
 8013206:	bd30      	pop	{r4, r5, pc}
 8013208:	24025e20 	.word	0x24025e20

0801320c <_ZN8touchgfx3BoxD1Ev>:
 801320c:	4770      	bx	lr

0801320e <_ZN8touchgfx3BoxD0Ev>:
 801320e:	b510      	push	{r4, lr}
 8013210:	4604      	mov	r4, r0
 8013212:	212c      	movs	r1, #44	@ 0x2c
 8013214:	f012 fefe 	bl	8026014 <_ZdlPvj>
 8013218:	4620      	mov	r0, r4
 801321a:	bd10      	pop	{r4, pc}

0801321c <_ZNK8touchgfx3Box17invalidateContentEv>:
 801321c:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8013220:	b12a      	cbz	r2, 801322e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013222:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8013226:	b112      	cbz	r2, 801322e <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8013228:	6803      	ldr	r3, [r0, #0]
 801322a:	695b      	ldr	r3, [r3, #20]
 801322c:	4718      	bx	r3
 801322e:	4770      	bx	lr

08013230 <_ZNK8touchgfx14AbstractButton15getPressedStateEv>:
 8013230:	f890 002c 	ldrb.w	r0, [r0, #44]	@ 0x2c
 8013234:	4770      	bx	lr

08013236 <_ZN8touchgfx6Button10setBitmapsERKNS_6BitmapES3_>:
 8013236:	b570      	push	{r4, r5, r6, lr}
 8013238:	880b      	ldrh	r3, [r1, #0]
 801323a:	4605      	mov	r5, r0
 801323c:	4604      	mov	r4, r0
 801323e:	85c3      	strh	r3, [r0, #46]	@ 0x2e
 8013240:	8813      	ldrh	r3, [r2, #0]
 8013242:	f825 3f30 	strh.w	r3, [r5, #48]!
 8013246:	4628      	mov	r0, r5
 8013248:	f007 f980 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801324c:	4606      	mov	r6, r0
 801324e:	4628      	mov	r0, r5
 8013250:	f007 f9b0 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013254:	6823      	ldr	r3, [r4, #0]
 8013256:	4605      	mov	r5, r0
 8013258:	4631      	mov	r1, r6
 801325a:	4620      	mov	r0, r4
 801325c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801325e:	4798      	blx	r3
 8013260:	6823      	ldr	r3, [r4, #0]
 8013262:	4629      	mov	r1, r5
 8013264:	4620      	mov	r0, r4
 8013266:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013268:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801326c:	4718      	bx	r3

0801326e <_ZN8touchgfx14AbstractButton13executeActionEv>:
 801326e:	b510      	push	{r4, lr}
 8013270:	4604      	mov	r4, r0
 8013272:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 8013274:	b150      	cbz	r0, 801328c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 8013276:	6803      	ldr	r3, [r0, #0]
 8013278:	68db      	ldr	r3, [r3, #12]
 801327a:	4798      	blx	r3
 801327c:	b130      	cbz	r0, 801328c <_ZN8touchgfx14AbstractButton13executeActionEv+0x1e>
 801327e:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8013280:	4621      	mov	r1, r4
 8013282:	6803      	ldr	r3, [r0, #0]
 8013284:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013288:	689b      	ldr	r3, [r3, #8]
 801328a:	4718      	bx	r3
 801328c:	bd10      	pop	{r4, pc}

0801328e <_ZNK8touchgfx6Button12getSolidRectEv>:
 801328e:	b510      	push	{r4, lr}
 8013290:	f891 3032 	ldrb.w	r3, [r1, #50]	@ 0x32
 8013294:	4604      	mov	r4, r0
 8013296:	2bff      	cmp	r3, #255	@ 0xff
 8013298:	d006      	beq.n	80132a8 <_ZNK8touchgfx6Button12getSolidRectEv+0x1a>
 801329a:	2300      	movs	r3, #0
 801329c:	8003      	strh	r3, [r0, #0]
 801329e:	8043      	strh	r3, [r0, #2]
 80132a0:	8083      	strh	r3, [r0, #4]
 80132a2:	80c3      	strh	r3, [r0, #6]
 80132a4:	4620      	mov	r0, r4
 80132a6:	bd10      	pop	{r4, pc}
 80132a8:	f891 302c 	ldrb.w	r3, [r1, #44]	@ 0x2c
 80132ac:	b11b      	cbz	r3, 80132b6 <_ZNK8touchgfx6Button12getSolidRectEv+0x28>
 80132ae:	3130      	adds	r1, #48	@ 0x30
 80132b0:	f007 f9b4 	bl	801a61c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 80132b4:	e7f6      	b.n	80132a4 <_ZNK8touchgfx6Button12getSolidRectEv+0x16>
 80132b6:	312e      	adds	r1, #46	@ 0x2e
 80132b8:	e7fa      	b.n	80132b0 <_ZNK8touchgfx6Button12getSolidRectEv+0x22>
	...

080132bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>:
 80132bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80132c0:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 80132c4:	b08a      	sub	sp, #40	@ 0x28
 80132c6:	4604      	mov	r4, r0
 80132c8:	4688      	mov	r8, r1
 80132ca:	2b00      	cmp	r3, #0
 80132cc:	d066      	beq.n	801339c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe0>
 80132ce:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80132d0:	a805      	add	r0, sp, #20
 80132d2:	f8ad 3014 	strh.w	r3, [sp, #20]
 80132d6:	f007 f939 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80132da:	4607      	mov	r7, r0
 80132dc:	a805      	add	r0, sp, #20
 80132de:	f007 f969 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80132e2:	f9b8 6000 	ldrsh.w	r6, [r8]
 80132e6:	f8b8 2004 	ldrh.w	r2, [r8, #4]
 80132ea:	2300      	movs	r3, #0
 80132ec:	4432      	add	r2, r6
 80132ee:	9306      	str	r3, [sp, #24]
 80132f0:	b292      	uxth	r2, r2
 80132f2:	fa0f fc82 	sxth.w	ip, r2
 80132f6:	459c      	cmp	ip, r3
 80132f8:	dd52      	ble.n	80133a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80132fa:	42b7      	cmp	r7, r6
 80132fc:	dd50      	ble.n	80133a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 80132fe:	f9b8 5002 	ldrsh.w	r5, [r8, #2]
 8013302:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013306:	442b      	add	r3, r5
 8013308:	b29b      	uxth	r3, r3
 801330a:	b219      	sxth	r1, r3
 801330c:	2900      	cmp	r1, #0
 801330e:	dd47      	ble.n	80133a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013310:	42a8      	cmp	r0, r5
 8013312:	dd45      	ble.n	80133a0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xe4>
 8013314:	4567      	cmp	r7, ip
 8013316:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
 801331a:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
 801331e:	bfb8      	it	lt
 8013320:	b2ba      	uxthlt	r2, r7
 8013322:	4288      	cmp	r0, r1
 8013324:	f8ad 6018 	strh.w	r6, [sp, #24]
 8013328:	bfb8      	it	lt
 801332a:	b283      	uxthlt	r3, r0
 801332c:	1b92      	subs	r2, r2, r6
 801332e:	f8ad 501a 	strh.w	r5, [sp, #26]
 8013332:	1b5b      	subs	r3, r3, r5
 8013334:	f8ad 201c 	strh.w	r2, [sp, #28]
 8013338:	f8ad 301e 	strh.w	r3, [sp, #30]
 801333c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013340:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013344:	429a      	cmp	r2, r3
 8013346:	d026      	beq.n	8013396 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013348:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801334c:	2b00      	cmp	r3, #0
 801334e:	dd22      	ble.n	8013396 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013350:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013354:	2b00      	cmp	r3, #0
 8013356:	dd1e      	ble.n	8013396 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xda>
 8013358:	2300      	movs	r3, #0
 801335a:	a908      	add	r1, sp, #32
 801335c:	4620      	mov	r0, r4
 801335e:	e9cd 3308 	strd	r3, r3, [sp, #32]
 8013362:	6823      	ldr	r3, [r4, #0]
 8013364:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013366:	4798      	blx	r3
 8013368:	4b0f      	ldr	r3, [pc, #60]	@ (80133a8 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xec>)
 801336a:	681b      	ldr	r3, [r3, #0]
 801336c:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8013370:	b10a      	cbz	r2, 8013376 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xba>
 8013372:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013374:	b900      	cbnz	r0, 8013378 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0xbc>
 8013376:	6898      	ldr	r0, [r3, #8]
 8013378:	2501      	movs	r5, #1
 801337a:	6801      	ldr	r1, [r0, #0]
 801337c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8013380:	9502      	str	r5, [sp, #8]
 8013382:	f894 4032 	ldrb.w	r4, [r4, #50]	@ 0x32
 8013386:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801338a:	9401      	str	r4, [sp, #4]
 801338c:	ac06      	add	r4, sp, #24
 801338e:	9400      	str	r4, [sp, #0]
 8013390:	688c      	ldr	r4, [r1, #8]
 8013392:	a905      	add	r1, sp, #20
 8013394:	47a0      	blx	r4
 8013396:	b00a      	add	sp, #40	@ 0x28
 8013398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801339c:	8dc3      	ldrh	r3, [r0, #46]	@ 0x2e
 801339e:	e797      	b.n	80132d0 <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x14>
 80133a0:	2300      	movs	r3, #0
 80133a2:	9307      	str	r3, [sp, #28]
 80133a4:	e7ca      	b.n	801333c <_ZNK8touchgfx6Button4drawERKNS_4RectE+0x80>
 80133a6:	bf00      	nop
 80133a8:	24025e20 	.word	0x24025e20

080133ac <_ZNK8touchgfx6Button17invalidateContentEv>:
 80133ac:	f890 2032 	ldrb.w	r2, [r0, #50]	@ 0x32
 80133b0:	b12a      	cbz	r2, 80133be <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80133b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80133b6:	b112      	cbz	r2, 80133be <_ZNK8touchgfx6Button17invalidateContentEv+0x12>
 80133b8:	6803      	ldr	r3, [r0, #0]
 80133ba:	695b      	ldr	r3, [r3, #20]
 80133bc:	4718      	bx	r3
 80133be:	4770      	bx	lr

080133c0 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE>:
 80133c0:	4b30      	ldr	r3, [pc, #192]	@ (8013484 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc4>)
 80133c2:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80133c6:	8d82      	ldrh	r2, [r0, #44]	@ 0x2c
 80133c8:	b08d      	sub	sp, #52	@ 0x34
 80133ca:	881b      	ldrh	r3, [r3, #0]
 80133cc:	4604      	mov	r4, r0
 80133ce:	460f      	mov	r7, r1
 80133d0:	4293      	cmp	r3, r2
 80133d2:	d954      	bls.n	801347e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80133d4:	4b2c      	ldr	r3, [pc, #176]	@ (8013488 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xc8>)
 80133d6:	6819      	ldr	r1, [r3, #0]
 80133d8:	eb01 0342 	add.w	r3, r1, r2, lsl #1
 80133dc:	f811 1012 	ldrb.w	r1, [r1, r2, lsl #1]
 80133e0:	4a2a      	ldr	r2, [pc, #168]	@ (801348c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xcc>)
 80133e2:	6812      	ldr	r2, [r2, #0]
 80133e4:	f852 1021 	ldr.w	r1, [r2, r1, lsl #2]
 80133e8:	2900      	cmp	r1, #0
 80133ea:	d048      	beq.n	801347e <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xbe>
 80133ec:	785a      	ldrb	r2, [r3, #1]
 80133ee:	f894 3039 	ldrb.w	r3, [r4, #57]	@ 0x39
 80133f2:	f3c2 0801 	ubfx	r8, r2, #0, #2
 80133f6:	f3c2 0281 	ubfx	r2, r2, #2, #2
 80133fa:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80133fe:	4b24      	ldr	r3, [pc, #144]	@ (8013490 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd0>)
 8013400:	f88d 2021 	strb.w	r2, [sp, #33]	@ 0x21
 8013404:	681a      	ldr	r2, [r3, #0]
 8013406:	f890 5036 	ldrb.w	r5, [r0, #54]	@ 0x36
 801340a:	f9b0 c034 	ldrsh.w	ip, [r0, #52]	@ 0x34
 801340e:	f890 e038 	ldrb.w	lr, [r0, #56]	@ 0x38
 8013412:	6b26      	ldr	r6, [r4, #48]	@ 0x30
 8013414:	f890 0037 	ldrb.w	r0, [r0, #55]	@ 0x37
 8013418:	f892 3058 	ldrb.w	r3, [r2, #88]	@ 0x58
 801341c:	9107      	str	r1, [sp, #28]
 801341e:	f88d 8020 	strb.w	r8, [sp, #32]
 8013422:	f88d e022 	strb.w	lr, [sp, #34]	@ 0x22
 8013426:	9609      	str	r6, [sp, #36]	@ 0x24
 8013428:	f8ad c028 	strh.w	ip, [sp, #40]	@ 0x28
 801342c:	f88d 502a 	strb.w	r5, [sp, #42]	@ 0x2a
 8013430:	f88d 002b 	strb.w	r0, [sp, #43]	@ 0x2b
 8013434:	b10b      	cbz	r3, 801343a <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7a>
 8013436:	6cd5      	ldr	r5, [r2, #76]	@ 0x4c
 8013438:	b905      	cbnz	r5, 801343c <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0x7c>
 801343a:	6895      	ldr	r5, [r2, #8]
 801343c:	ae05      	add	r6, sp, #20
 801343e:	4621      	mov	r1, r4
 8013440:	4630      	mov	r0, r6
 8013442:	f004 fcf7 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013446:	4b13      	ldr	r3, [pc, #76]	@ (8013494 <_ZNK8touchgfx24TextAreaWithWildcardBase4drawERKNS_4RectE+0xd4>)
 8013448:	8da1      	ldrh	r1, [r4, #44]	@ 0x2c
 801344a:	6818      	ldr	r0, [r3, #0]
 801344c:	f7f1 f81c 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 8013450:	6823      	ldr	r3, [r4, #0]
 8013452:	4680      	mov	r8, r0
 8013454:	4620      	mov	r0, r4
 8013456:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013458:	4798      	blx	r3
 801345a:	6823      	ldr	r3, [r4, #0]
 801345c:	4681      	mov	r9, r0
 801345e:	4620      	mov	r0, r4
 8013460:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013464:	4798      	blx	r3
 8013466:	ab07      	add	r3, sp, #28
 8013468:	f8cd 8004 	str.w	r8, [sp, #4]
 801346c:	9300      	str	r3, [sp, #0]
 801346e:	463b      	mov	r3, r7
 8013470:	e9cd 9002 	strd	r9, r0, [sp, #8]
 8013474:	4628      	mov	r0, r5
 8013476:	e896 0006 	ldmia.w	r6, {r1, r2}
 801347a:	f7f0 ffb7 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 801347e:	b00d      	add	sp, #52	@ 0x34
 8013480:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8013484:	24025e7c 	.word	0x24025e7c
 8013488:	24025e78 	.word	0x24025e78
 801348c:	24025e80 	.word	0x24025e80
 8013490:	24025e20 	.word	0x24025e20
 8013494:	24025e84 	.word	0x24025e84

08013498 <_ZN8touchgfx13BoxWithBorderD1Ev>:
 8013498:	4770      	bx	lr

0801349a <_ZN8touchgfx13BoxWithBorderD0Ev>:
 801349a:	b510      	push	{r4, lr}
 801349c:	4604      	mov	r4, r0
 801349e:	2134      	movs	r1, #52	@ 0x34
 80134a0:	f012 fdb8 	bl	8026014 <_ZdlPvj>
 80134a4:	4620      	mov	r0, r4
 80134a6:	bd10      	pop	{r4, pc}

080134a8 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE>:
 80134a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80134ac:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80134ae:	4604      	mov	r4, r0
 80134b0:	460e      	mov	r6, r1
 80134b2:	b08e      	sub	sp, #56	@ 0x38
 80134b4:	b218      	sxth	r0, r3
 80134b6:	8921      	ldrh	r1, [r4, #8]
 80134b8:	005b      	lsls	r3, r3, #1
 80134ba:	8962      	ldrh	r2, [r4, #10]
 80134bc:	f8ad 0000 	strh.w	r0, [sp]
 80134c0:	b29b      	uxth	r3, r3
 80134c2:	f8ad 0002 	strh.w	r0, [sp, #2]
 80134c6:	1ac9      	subs	r1, r1, r3
 80134c8:	1ad3      	subs	r3, r2, r3
 80134ca:	b209      	sxth	r1, r1
 80134cc:	b21b      	sxth	r3, r3
 80134ce:	2900      	cmp	r1, #0
 80134d0:	f8ad 1004 	strh.w	r1, [sp, #4]
 80134d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80134d8:	dd5e      	ble.n	8013598 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80134da:	2b00      	cmp	r3, #0
 80134dc:	dd5c      	ble.n	8013598 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xf0>
 80134de:	6830      	ldr	r0, [r6, #0]
 80134e0:	ab02      	add	r3, sp, #8
 80134e2:	6871      	ldr	r1, [r6, #4]
 80134e4:	c303      	stmia	r3!, {r0, r1}
 80134e6:	4669      	mov	r1, sp
 80134e8:	a802      	add	r0, sp, #8
 80134ea:	f7fc fd13 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 80134ee:	4620      	mov	r0, r4
 80134f0:	a902      	add	r1, sp, #8
 80134f2:	f7ff fe6d 	bl	80131d0 <_ZNK8touchgfx3Box4drawERKNS_4RectE>
 80134f6:	8e20      	ldrh	r0, [r4, #48]	@ 0x30
 80134f8:	2800      	cmp	r0, #0
 80134fa:	d05f      	beq.n	80135bc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 80134fc:	8963      	ldrh	r3, [r4, #10]
 80134fe:	b202      	sxth	r2, r0
 8013500:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013504:	2500      	movs	r5, #0
 8013506:	1a1f      	subs	r7, r3, r0
 8013508:	eba3 0340 	sub.w	r3, r3, r0, lsl #1
 801350c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8013510:	b21b      	sxth	r3, r3
 8013512:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013516:	f8ad 1024 	strh.w	r1, [sp, #36]	@ 0x24
 801351a:	af04      	add	r7, sp, #16
 801351c:	1a09      	subs	r1, r1, r0
 801351e:	9506      	str	r5, [sp, #24]
 8013520:	f8ad 201e 	strh.w	r2, [sp, #30]
 8013524:	f8ad 5020 	strh.w	r5, [sp, #32]
 8013528:	f8ad 2026 	strh.w	r2, [sp, #38]	@ 0x26
 801352c:	f8ad 5028 	strh.w	r5, [sp, #40]	@ 0x28
 8013530:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013534:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8013538:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 801353c:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 8013540:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8013544:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8013548:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801354c:	ab06      	add	r3, sp, #24
 801354e:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013552:	e893 0003 	ldmia.w	r3, {r0, r1}
 8013556:	e887 0003 	stmia.w	r7, {r0, r1}
 801355a:	4631      	mov	r1, r6
 801355c:	4638      	mov	r0, r7
 801355e:	f7fc fcd9 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8013562:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8013566:	2b00      	cmp	r3, #0
 8013568:	dd12      	ble.n	8013590 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 801356a:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801356e:	2b00      	cmp	r3, #0
 8013570:	dd0e      	ble.n	8013590 <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xe8>
 8013572:	6823      	ldr	r3, [r4, #0]
 8013574:	4639      	mov	r1, r7
 8013576:	4620      	mov	r0, r4
 8013578:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801357a:	4798      	blx	r3
 801357c:	f7f0 fd64 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8013580:	6803      	ldr	r3, [r0, #0]
 8013582:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8013584:	4639      	mov	r1, r7
 8013586:	f8d3 8020 	ldr.w	r8, [r3, #32]
 801358a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801358e:	47c0      	blx	r8
 8013590:	3501      	adds	r5, #1
 8013592:	2d04      	cmp	r5, #4
 8013594:	d1da      	bne.n	801354c <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0xa4>
 8013596:	e011      	b.n	80135bc <_ZNK8touchgfx13BoxWithBorder4drawERKNS_4RectE+0x114>
 8013598:	6830      	ldr	r0, [r6, #0]
 801359a:	ab06      	add	r3, sp, #24
 801359c:	6871      	ldr	r1, [r6, #4]
 801359e:	c303      	stmia	r3!, {r0, r1}
 80135a0:	6823      	ldr	r3, [r4, #0]
 80135a2:	a906      	add	r1, sp, #24
 80135a4:	4620      	mov	r0, r4
 80135a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80135a8:	4798      	blx	r3
 80135aa:	f7f0 fd4d 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 80135ae:	6803      	ldr	r3, [r0, #0]
 80135b0:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 80135b2:	a906      	add	r1, sp, #24
 80135b4:	6a1d      	ldr	r5, [r3, #32]
 80135b6:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 80135ba:	47a8      	blx	r5
 80135bc:	b00e      	add	sp, #56	@ 0x38
 80135be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080135c2 <_ZN8touchgfx5ImageD1Ev>:
 80135c2:	4770      	bx	lr

080135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>:
 80135c4:	b570      	push	{r4, r5, r6, lr}
 80135c6:	880b      	ldrh	r3, [r1, #0]
 80135c8:	460d      	mov	r5, r1
 80135ca:	4604      	mov	r4, r0
 80135cc:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80135ce:	4608      	mov	r0, r1
 80135d0:	f006 ffbc 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80135d4:	4606      	mov	r6, r0
 80135d6:	4628      	mov	r0, r5
 80135d8:	f006 ffec 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80135dc:	6823      	ldr	r3, [r4, #0]
 80135de:	4605      	mov	r5, r0
 80135e0:	4631      	mov	r1, r6
 80135e2:	4620      	mov	r0, r4
 80135e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80135e6:	4798      	blx	r3
 80135e8:	6823      	ldr	r3, [r4, #0]
 80135ea:	4629      	mov	r1, r5
 80135ec:	4620      	mov	r0, r4
 80135ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80135f0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80135f4:	4718      	bx	r3

080135f6 <_ZN8touchgfx5ImageD0Ev>:
 80135f6:	b510      	push	{r4, lr}
 80135f8:	4604      	mov	r4, r0
 80135fa:	212c      	movs	r1, #44	@ 0x2c
 80135fc:	f012 fd0a 	bl	8026014 <_ZdlPvj>
 8013600:	4620      	mov	r0, r4
 8013602:	bd10      	pop	{r4, pc}

08013604 <_ZNK8touchgfx5Image12getSolidRectEv>:
 8013604:	b510      	push	{r4, lr}
 8013606:	f891 3028 	ldrb.w	r3, [r1, #40]	@ 0x28
 801360a:	4604      	mov	r4, r0
 801360c:	2bff      	cmp	r3, #255	@ 0xff
 801360e:	d006      	beq.n	801361e <_ZNK8touchgfx5Image12getSolidRectEv+0x1a>
 8013610:	2300      	movs	r3, #0
 8013612:	8003      	strh	r3, [r0, #0]
 8013614:	8043      	strh	r3, [r0, #2]
 8013616:	8083      	strh	r3, [r0, #4]
 8013618:	80c3      	strh	r3, [r0, #6]
 801361a:	4620      	mov	r0, r4
 801361c:	bd10      	pop	{r4, pc}
 801361e:	3126      	adds	r1, #38	@ 0x26
 8013620:	f006 fffc 	bl	801a61c <_ZNK8touchgfx6Bitmap12getSolidRectEv>
 8013624:	e7f9      	b.n	801361a <_ZNK8touchgfx5Image12getSolidRectEv+0x16>
	...

08013628 <_ZNK8touchgfx5Image4drawERKNS_4RectE>:
 8013628:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801362c:	4604      	mov	r4, r0
 801362e:	b088      	sub	sp, #32
 8013630:	2500      	movs	r5, #0
 8013632:	460f      	mov	r7, r1
 8013634:	f854 3b26 	ldr.w	r3, [r4], #38
 8013638:	a904      	add	r1, sp, #16
 801363a:	4606      	mov	r6, r0
 801363c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801363e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8013642:	4798      	blx	r3
 8013644:	4620      	mov	r0, r4
 8013646:	f006 ff81 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801364a:	4680      	mov	r8, r0
 801364c:	4620      	mov	r0, r4
 801364e:	f006 ffb1 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8013652:	9506      	str	r5, [sp, #24]
 8013654:	ad06      	add	r5, sp, #24
 8013656:	f8ad 001e 	strh.w	r0, [sp, #30]
 801365a:	4639      	mov	r1, r7
 801365c:	f8ad 801c 	strh.w	r8, [sp, #28]
 8013660:	4628      	mov	r0, r5
 8013662:	f7fc fc57 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8013666:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801366a:	2b00      	cmp	r3, #0
 801366c:	dd19      	ble.n	80136a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 801366e:	f9bd 301e 	ldrsh.w	r3, [sp, #30]
 8013672:	2b00      	cmp	r3, #0
 8013674:	dd15      	ble.n	80136a2 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x7a>
 8013676:	4b0c      	ldr	r3, [pc, #48]	@ (80136a8 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x80>)
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801367e:	b10a      	cbz	r2, 8013684 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5c>
 8013680:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8013682:	b900      	cbnz	r0, 8013686 <_ZNK8touchgfx5Image4drawERKNS_4RectE+0x5e>
 8013684:	6898      	ldr	r0, [r3, #8]
 8013686:	2701      	movs	r7, #1
 8013688:	6801      	ldr	r1, [r0, #0]
 801368a:	f9bd 3012 	ldrsh.w	r3, [sp, #18]
 801368e:	9702      	str	r7, [sp, #8]
 8013690:	f896 6028 	ldrb.w	r6, [r6, #40]	@ 0x28
 8013694:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 8013698:	e9cd 5600 	strd	r5, r6, [sp]
 801369c:	688d      	ldr	r5, [r1, #8]
 801369e:	4621      	mov	r1, r4
 80136a0:	47a8      	blx	r5
 80136a2:	b008      	add	sp, #32
 80136a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80136a8:	24025e20 	.word	0x24025e20

080136ac <_ZN8touchgfx15ButtonWithLabelD1Ev>:
 80136ac:	4770      	bx	lr

080136ae <_ZN8touchgfx15ButtonWithLabelD0Ev>:
 80136ae:	b510      	push	{r4, lr}
 80136b0:	4604      	mov	r4, r0
 80136b2:	2148      	movs	r1, #72	@ 0x48
 80136b4:	f012 fcae 	bl	8026014 <_ZdlPvj>
 80136b8:	4620      	mov	r0, r4
 80136ba:	bd10      	pop	{r4, pc}

080136bc <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE>:
 80136bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80136c0:	b08d      	sub	sp, #52	@ 0x34
 80136c2:	4604      	mov	r4, r0
 80136c4:	460f      	mov	r7, r1
 80136c6:	f7ff fdf9 	bl	80132bc <_ZNK8touchgfx6Button4drawERKNS_4RectE>
 80136ca:	4a55      	ldr	r2, [pc, #340]	@ (8013820 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x164>)
 80136cc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80136ce:	8812      	ldrh	r2, [r2, #0]
 80136d0:	429a      	cmp	r2, r3
 80136d2:	f240 8082 	bls.w	80137da <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 80136d6:	4d53      	ldr	r5, [pc, #332]	@ (8013824 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x168>)
 80136d8:	682a      	ldr	r2, [r5, #0]
 80136da:	f812 2013 	ldrb.w	r2, [r2, r3, lsl #1]
 80136de:	4b52      	ldr	r3, [pc, #328]	@ (8013828 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x16c>)
 80136e0:	681b      	ldr	r3, [r3, #0]
 80136e2:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80136e6:	2200      	movs	r2, #0
 80136e8:	f9b4 3046 	ldrsh.w	r3, [r4, #70]	@ 0x46
 80136ec:	e9cd 2203 	strd	r2, r2, [sp, #12]
 80136f0:	f894 2044 	ldrb.w	r2, [r4, #68]	@ 0x44
 80136f4:	2a03      	cmp	r2, #3
 80136f6:	d811      	bhi.n	801371c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 80136f8:	e8df f002 	tbb	[pc, r2]
 80136fc:	89727902 	.word	0x89727902
 8013700:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 8013704:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 8013708:	1ad2      	subs	r2, r2, r3
 801370a:	2002      	movs	r0, #2
 801370c:	f8ad 1010 	strh.w	r1, [sp, #16]
 8013710:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013714:	fb92 f2f0 	sdiv	r2, r2, r0
 8013718:	f8ad 200e 	strh.w	r2, [sp, #14]
 801371c:	f10d 080c 	add.w	r8, sp, #12
 8013720:	f10d 0914 	add.w	r9, sp, #20
 8013724:	e898 0003 	ldmia.w	r8, {r0, r1}
 8013728:	e889 0003 	stmia.w	r9, {r0, r1}
 801372c:	4639      	mov	r1, r7
 801372e:	4648      	mov	r0, r9
 8013730:	f7fc fbf0 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8013734:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8013738:	2b00      	cmp	r3, #0
 801373a:	dd4e      	ble.n	80137da <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 801373c:	f9bd 301a 	ldrsh.w	r3, [sp, #26]
 8013740:	2b00      	cmp	r3, #0
 8013742:	dd4a      	ble.n	80137da <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x11e>
 8013744:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8013748:	4641      	mov	r1, r8
 801374a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801374e:	4620      	mov	r0, r4
 8013750:	1a9b      	subs	r3, r3, r2
 8013752:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8013756:	f8ad 3014 	strh.w	r3, [sp, #20]
 801375a:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801375e:	1a9b      	subs	r3, r3, r2
 8013760:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013764:	6823      	ldr	r3, [r4, #0]
 8013766:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013768:	4798      	blx	r3
 801376a:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 801376e:	2b00      	cmp	r3, #0
 8013770:	d053      	beq.n	801381a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x15e>
 8013772:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8013774:	8f21      	ldrh	r1, [r4, #56]	@ 0x38
 8013776:	682b      	ldr	r3, [r5, #0]
 8013778:	f894 0032 	ldrb.w	r0, [r4, #50]	@ 0x32
 801377c:	eb03 0341 	add.w	r3, r3, r1, lsl #1
 8013780:	f894 4044 	ldrb.w	r4, [r4, #68]	@ 0x44
 8013784:	785b      	ldrb	r3, [r3, #1]
 8013786:	9209      	str	r2, [sp, #36]	@ 0x24
 8013788:	f3c3 0501 	ubfx	r5, r3, #0, #2
 801378c:	f3c3 0381 	ubfx	r3, r3, #2, #2
 8013790:	9607      	str	r6, [sp, #28]
 8013792:	f88d 3021 	strb.w	r3, [sp, #33]	@ 0x21
 8013796:	2300      	movs	r3, #0
 8013798:	f88d 5020 	strb.w	r5, [sp, #32]
 801379c:	f8ad 3028 	strh.w	r3, [sp, #40]	@ 0x28
 80137a0:	f88d 302b 	strb.w	r3, [sp, #43]	@ 0x2b
 80137a4:	f88d 302c 	strb.w	r3, [sp, #44]	@ 0x2c
 80137a8:	4b20      	ldr	r3, [pc, #128]	@ (801382c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x170>)
 80137aa:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 80137b4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80137b8:	b10a      	cbz	r2, 80137be <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x102>
 80137ba:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
 80137bc:	b904      	cbnz	r4, 80137c0 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x104>
 80137be:	689c      	ldr	r4, [r3, #8]
 80137c0:	4b1b      	ldr	r3, [pc, #108]	@ (8013830 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x174>)
 80137c2:	6818      	ldr	r0, [r3, #0]
 80137c4:	f7f0 fe60 	bl	8004488 <_ZNK8touchgfx5Texts7getTextEt>
 80137c8:	ab07      	add	r3, sp, #28
 80137ca:	9001      	str	r0, [sp, #4]
 80137cc:	4620      	mov	r0, r4
 80137ce:	9300      	str	r3, [sp, #0]
 80137d0:	464b      	mov	r3, r9
 80137d2:	e898 0006 	ldmia.w	r8, {r1, r2}
 80137d6:	f7f0 fe09 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80137da:	b00d      	add	sp, #52	@ 0x34
 80137dc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80137e0:	f9b4 200a 	ldrsh.w	r2, [r4, #10]
 80137e4:	f9b4 1008 	ldrsh.w	r1, [r4, #8]
 80137e8:	1ad2      	subs	r2, r2, r3
 80137ea:	3201      	adds	r2, #1
 80137ec:	e78d      	b.n	801370a <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x4e>
 80137ee:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80137f2:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 80137f6:	1ad2      	subs	r2, r2, r3
 80137f8:	3201      	adds	r2, #1
 80137fa:	2002      	movs	r0, #2
 80137fc:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013800:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013804:	fb92 f2f0 	sdiv	r2, r2, r0
 8013808:	f8ad 200c 	strh.w	r2, [sp, #12]
 801380c:	e786      	b.n	801371c <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x60>
 801380e:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 8013812:	f9b4 100a 	ldrsh.w	r1, [r4, #10]
 8013816:	1ad2      	subs	r2, r2, r3
 8013818:	e7ef      	b.n	80137fa <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0x13e>
 801381a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 801381c:	e7aa      	b.n	8013774 <_ZNK8touchgfx15ButtonWithLabel4drawERKNS_4RectE+0xb8>
 801381e:	bf00      	nop
 8013820:	24025e7c 	.word	0x24025e7c
 8013824:	24025e78 	.word	0x24025e78
 8013828:	24025e80 	.word	0x24025e80
 801382c:	24025e20 	.word	0x24025e20
 8013830:	24025e84 	.word	0x24025e84

08013834 <_ZN8touchgfx15ButtonWithLabelC1Ev>:
 8013834:	2101      	movs	r1, #1
 8013836:	2200      	movs	r2, #0
 8013838:	b510      	push	{r4, lr}
 801383a:	4c13      	ldr	r4, [pc, #76]	@ (8013888 <_ZN8touchgfx15ButtonWithLabelC1Ev+0x54>)
 801383c:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013840:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
 8013844:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013848:	6004      	str	r4, [r0, #0]
 801384a:	4c10      	ldr	r4, [pc, #64]	@ (801388c <_ZN8touchgfx15ButtonWithLabelC1Ev+0x58>)
 801384c:	8082      	strh	r2, [r0, #4]
 801384e:	80c2      	strh	r2, [r0, #6]
 8013850:	8102      	strh	r2, [r0, #8]
 8013852:	8142      	strh	r2, [r0, #10]
 8013854:	8182      	strh	r2, [r0, #12]
 8013856:	81c2      	strh	r2, [r0, #14]
 8013858:	8202      	strh	r2, [r0, #16]
 801385a:	8242      	strh	r2, [r0, #18]
 801385c:	61c2      	str	r2, [r0, #28]
 801385e:	8402      	strh	r2, [r0, #32]
 8013860:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013862:	6282      	str	r2, [r0, #40]	@ 0x28
 8013864:	f880 202c 	strb.w	r2, [r0, #44]	@ 0x2c
 8013868:	85c1      	strh	r1, [r0, #46]	@ 0x2e
 801386a:	8601      	strh	r1, [r0, #48]	@ 0x30
 801386c:	f880 1032 	strb.w	r1, [r0, #50]	@ 0x32
 8013870:	6344      	str	r4, [r0, #52]	@ 0x34
 8013872:	8701      	strh	r1, [r0, #56]	@ 0x38
 8013874:	f880 2044 	strb.w	r2, [r0, #68]	@ 0x44
 8013878:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 801387c:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013880:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 8013884:	bd10      	pop	{r4, pc}
 8013886:	bf00      	nop
 8013888:	0802afdc 	.word	0x0802afdc
 801388c:	080299c8 	.word	0x080299c8

08013890 <_ZNK8touchgfx6QRCode13drawBitRGB565EPhbi>:
 8013890:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8013894:	b12a      	cbz	r2, 80138a2 <_ZNK8touchgfx6QRCode13drawBitRGB565EPhbi+0x12>
 8013896:	8fc2      	ldrh	r2, [r0, #62]	@ 0x3e
 8013898:	4299      	cmp	r1, r3
 801389a:	d205      	bcs.n	80138a8 <_ZNK8touchgfx6QRCode13drawBitRGB565EPhbi+0x18>
 801389c:	f821 2b02 	strh.w	r2, [r1], #2
 80138a0:	e7fa      	b.n	8013898 <_ZNK8touchgfx6QRCode13drawBitRGB565EPhbi+0x8>
 80138a2:	f8b0 2040 	ldrh.w	r2, [r0, #64]	@ 0x40
 80138a6:	e7f7      	b.n	8013898 <_ZNK8touchgfx6QRCode13drawBitRGB565EPhbi+0x8>
 80138a8:	4608      	mov	r0, r1
 80138aa:	4770      	bx	lr

080138ac <_ZNK8touchgfx6QRCode18drawBitRGB565BlendEPhbi>:
 80138ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80138b0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80138b4:	2a00      	cmp	r2, #0
 80138b6:	d03e      	beq.n	8013936 <_ZNK8touchgfx6QRCode18drawBitRGB565BlendEPhbi+0x8a>
 80138b8:	f8b0 c042 	ldrh.w	ip, [r0, #66]	@ 0x42
 80138bc:	f8b0 7046 	ldrh.w	r7, [r0, #70]	@ 0x46
 80138c0:	f8b0 604a 	ldrh.w	r6, [r0, #74]	@ 0x4a
 80138c4:	4299      	cmp	r1, r3
 80138c6:	d23d      	bcs.n	8013944 <_ZNK8touchgfx6QRCode18drawBitRGB565BlendEPhbi+0x98>
 80138c8:	f8b1 8000 	ldrh.w	r8, [r1]
 80138cc:	f890 5055 	ldrb.w	r5, [r0, #85]	@ 0x55
 80138d0:	ea4f 2e28 	mov.w	lr, r8, asr #8
 80138d4:	ea4f 02e8 	mov.w	r2, r8, asr #3
 80138d8:	f00e 0ef8 	and.w	lr, lr, #248	@ 0xf8
 80138dc:	ea4f 08c8 	mov.w	r8, r8, lsl #3
 80138e0:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 80138e4:	ea4e 1e5e 	orr.w	lr, lr, lr, lsr #5
 80138e8:	fa5f f888 	uxtb.w	r8, r8
 80138ec:	fb0e ce05 	mla	lr, lr, r5, ip
 80138f0:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 80138f4:	ea48 1858 	orr.w	r8, r8, r8, lsr #5
 80138f8:	fa1f f48e 	uxth.w	r4, lr
 80138fc:	fb02 7205 	mla	r2, r2, r5, r7
 8013900:	fb08 6505 	mla	r5, r8, r5, r6
 8013904:	f104 0e01 	add.w	lr, r4, #1
 8013908:	b292      	uxth	r2, r2
 801390a:	b2ad      	uxth	r5, r5
 801390c:	eb0e 2414 	add.w	r4, lr, r4, lsr #8
 8013910:	f404 4e78 	and.w	lr, r4, #63488	@ 0xf800
 8013914:	1c6c      	adds	r4, r5, #1
 8013916:	eb04 2415 	add.w	r4, r4, r5, lsr #8
 801391a:	1c55      	adds	r5, r2, #1
 801391c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 8013920:	f3c4 24c4 	ubfx	r4, r4, #11, #5
 8013924:	0952      	lsrs	r2, r2, #5
 8013926:	ea44 040e 	orr.w	r4, r4, lr
 801392a:	f402 62fc 	and.w	r2, r2, #2016	@ 0x7e0
 801392e:	4322      	orrs	r2, r4
 8013930:	f821 2b02 	strh.w	r2, [r1], #2
 8013934:	e7c6      	b.n	80138c4 <_ZNK8touchgfx6QRCode18drawBitRGB565BlendEPhbi+0x18>
 8013936:	f8b0 c044 	ldrh.w	ip, [r0, #68]	@ 0x44
 801393a:	f8b0 7048 	ldrh.w	r7, [r0, #72]	@ 0x48
 801393e:	f8b0 604c 	ldrh.w	r6, [r0, #76]	@ 0x4c
 8013942:	e7bf      	b.n	80138c4 <_ZNK8touchgfx6QRCode18drawBitRGB565BlendEPhbi+0x18>
 8013944:	4608      	mov	r0, r1
 8013946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801394a <_ZNK8touchgfx6QRCode13drawBitRGB888EPhbi>:
 801394a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801394e:	b510      	push	{r4, lr}
 8013950:	440b      	add	r3, r1
 8013952:	b172      	cbz	r2, 8013972 <_ZNK8touchgfx6QRCode13drawBitRGB888EPhbi+0x28>
 8013954:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
 8013958:	f890 404f 	ldrb.w	r4, [r0, #79]	@ 0x4f
 801395c:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8013960:	4299      	cmp	r1, r3
 8013962:	d20d      	bcs.n	8013980 <_ZNK8touchgfx6QRCode13drawBitRGB888EPhbi+0x36>
 8013964:	7008      	strb	r0, [r1, #0]
 8013966:	3103      	adds	r1, #3
 8013968:	f801 4c02 	strb.w	r4, [r1, #-2]
 801396c:	f801 2c01 	strb.w	r2, [r1, #-1]
 8013970:	e7f6      	b.n	8013960 <_ZNK8touchgfx6QRCode13drawBitRGB888EPhbi+0x16>
 8013972:	f890 2051 	ldrb.w	r2, [r0, #81]	@ 0x51
 8013976:	f890 4052 	ldrb.w	r4, [r0, #82]	@ 0x52
 801397a:	f890 0053 	ldrb.w	r0, [r0, #83]	@ 0x53
 801397e:	e7ef      	b.n	8013960 <_ZNK8touchgfx6QRCode13drawBitRGB888EPhbi+0x16>
 8013980:	4608      	mov	r0, r1
 8013982:	bd10      	pop	{r4, pc}

08013984 <_ZNK8touchgfx6QRCode18drawBitRGB888BlendEPhbi>:
 8013984:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8013988:	b5f0      	push	{r4, r5, r6, r7, lr}
 801398a:	440b      	add	r3, r1
 801398c:	4604      	mov	r4, r0
 801398e:	b39a      	cbz	r2, 80139f8 <_ZNK8touchgfx6QRCode18drawBitRGB888BlendEPhbi+0x74>
 8013990:	f8b0 5042 	ldrh.w	r5, [r0, #66]	@ 0x42
 8013994:	f8b0 6046 	ldrh.w	r6, [r0, #70]	@ 0x46
 8013998:	f8b0 704a 	ldrh.w	r7, [r0, #74]	@ 0x4a
 801399c:	4608      	mov	r0, r1
 801399e:	4283      	cmp	r3, r0
 80139a0:	f100 0203 	add.w	r2, r0, #3
 80139a4:	d92f      	bls.n	8013a06 <_ZNK8touchgfx6QRCode18drawBitRGB888BlendEPhbi+0x82>
 80139a6:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
 80139aa:	f812 0c03 	ldrb.w	r0, [r2, #-3]
 80139ae:	fb00 7101 	mla	r1, r0, r1, r7
 80139b2:	b289      	uxth	r1, r1
 80139b4:	1c48      	adds	r0, r1, #1
 80139b6:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80139ba:	f812 0c02 	ldrb.w	r0, [r2, #-2]
 80139be:	1209      	asrs	r1, r1, #8
 80139c0:	f802 1c03 	strb.w	r1, [r2, #-3]
 80139c4:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
 80139c8:	fb00 6101 	mla	r1, r0, r1, r6
 80139cc:	b289      	uxth	r1, r1
 80139ce:	1c48      	adds	r0, r1, #1
 80139d0:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80139d4:	f812 0c01 	ldrb.w	r0, [r2, #-1]
 80139d8:	1209      	asrs	r1, r1, #8
 80139da:	f802 1c02 	strb.w	r1, [r2, #-2]
 80139de:	f894 1055 	ldrb.w	r1, [r4, #85]	@ 0x55
 80139e2:	fb00 5101 	mla	r1, r0, r1, r5
 80139e6:	b289      	uxth	r1, r1
 80139e8:	1c48      	adds	r0, r1, #1
 80139ea:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 80139ee:	4610      	mov	r0, r2
 80139f0:	1209      	asrs	r1, r1, #8
 80139f2:	f802 1c01 	strb.w	r1, [r2, #-1]
 80139f6:	e7d2      	b.n	801399e <_ZNK8touchgfx6QRCode18drawBitRGB888BlendEPhbi+0x1a>
 80139f8:	f8b0 5044 	ldrh.w	r5, [r0, #68]	@ 0x44
 80139fc:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
 8013a00:	f8b0 704c 	ldrh.w	r7, [r0, #76]	@ 0x4c
 8013a04:	e7ca      	b.n	801399c <_ZNK8touchgfx6QRCode18drawBitRGB888BlendEPhbi+0x18>
 8013a06:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013a08 <_ZNK8touchgfx6QRCode15drawBitARGB8888EPhbi>:
 8013a08:	b530      	push	{r4, r5, lr}
 8013a0a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013a0e:	b18a      	cbz	r2, 8013a34 <_ZNK8touchgfx6QRCode15drawBitARGB8888EPhbi+0x2c>
 8013a10:	f890 204e 	ldrb.w	r2, [r0, #78]	@ 0x4e
 8013a14:	f890 404f 	ldrb.w	r4, [r0, #79]	@ 0x4f
 8013a18:	f890 0050 	ldrb.w	r0, [r0, #80]	@ 0x50
 8013a1c:	25ff      	movs	r5, #255	@ 0xff
 8013a1e:	4299      	cmp	r1, r3
 8013a20:	d20f      	bcs.n	8013a42 <_ZNK8touchgfx6QRCode15drawBitARGB8888EPhbi+0x3a>
 8013a22:	7008      	strb	r0, [r1, #0]
 8013a24:	3104      	adds	r1, #4
 8013a26:	f801 4c03 	strb.w	r4, [r1, #-3]
 8013a2a:	f801 2c02 	strb.w	r2, [r1, #-2]
 8013a2e:	f801 5c01 	strb.w	r5, [r1, #-1]
 8013a32:	e7f4      	b.n	8013a1e <_ZNK8touchgfx6QRCode15drawBitARGB8888EPhbi+0x16>
 8013a34:	f890 2051 	ldrb.w	r2, [r0, #81]	@ 0x51
 8013a38:	f890 4052 	ldrb.w	r4, [r0, #82]	@ 0x52
 8013a3c:	f890 0053 	ldrb.w	r0, [r0, #83]	@ 0x53
 8013a40:	e7ec      	b.n	8013a1c <_ZNK8touchgfx6QRCode15drawBitARGB8888EPhbi+0x14>
 8013a42:	4608      	mov	r0, r1
 8013a44:	bd30      	pop	{r4, r5, pc}

08013a46 <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi>:
 8013a46:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8013a4a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8013a4e:	b1f2      	cbz	r2, 8013a8e <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x48>
 8013a50:	f8b0 c042 	ldrh.w	ip, [r0, #66]	@ 0x42
 8013a54:	f8b0 6046 	ldrh.w	r6, [r0, #70]	@ 0x46
 8013a58:	f8b0 704a 	ldrh.w	r7, [r0, #74]	@ 0x4a
 8013a5c:	4299      	cmp	r1, r3
 8013a5e:	d257      	bcs.n	8013b10 <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0xca>
 8013a60:	f851 4b04 	ldr.w	r4, [r1], #4
 8013a64:	ea5f 6814 	movs.w	r8, r4, lsr #24
 8013a68:	d123      	bne.n	8013ab2 <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x6c>
 8013a6a:	b1ba      	cbz	r2, 8013a9c <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x56>
 8013a6c:	f890 4050 	ldrb.w	r4, [r0, #80]	@ 0x50
 8013a70:	f801 4c04 	strb.w	r4, [r1, #-4]
 8013a74:	f890 404f 	ldrb.w	r4, [r0, #79]	@ 0x4f
 8013a78:	f801 4c03 	strb.w	r4, [r1, #-3]
 8013a7c:	f890 404e 	ldrb.w	r4, [r0, #78]	@ 0x4e
 8013a80:	f801 4c02 	strb.w	r4, [r1, #-2]
 8013a84:	f890 4054 	ldrb.w	r4, [r0, #84]	@ 0x54
 8013a88:	f801 4c01 	strb.w	r4, [r1, #-1]
 8013a8c:	e7e6      	b.n	8013a5c <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x16>
 8013a8e:	f8b0 c044 	ldrh.w	ip, [r0, #68]	@ 0x44
 8013a92:	f8b0 6048 	ldrh.w	r6, [r0, #72]	@ 0x48
 8013a96:	f8b0 704c 	ldrh.w	r7, [r0, #76]	@ 0x4c
 8013a9a:	e7df      	b.n	8013a5c <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x16>
 8013a9c:	f890 4053 	ldrb.w	r4, [r0, #83]	@ 0x53
 8013aa0:	f801 4c04 	strb.w	r4, [r1, #-4]
 8013aa4:	f890 4052 	ldrb.w	r4, [r0, #82]	@ 0x52
 8013aa8:	f801 4c03 	strb.w	r4, [r1, #-3]
 8013aac:	f890 4051 	ldrb.w	r4, [r0, #81]	@ 0x51
 8013ab0:	e7e6      	b.n	8013a80 <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x3a>
 8013ab2:	f890 e054 	ldrb.w	lr, [r0, #84]	@ 0x54
 8013ab6:	fb0e f908 	mul.w	r9, lr, r8
 8013aba:	44c6      	add	lr, r8
 8013abc:	f109 0501 	add.w	r5, r9, #1
 8013ac0:	eb05 2529 	add.w	r5, r5, r9, asr #8
 8013ac4:	122d      	asrs	r5, r5, #8
 8013ac6:	eba8 0805 	sub.w	r8, r8, r5
 8013aca:	ebae 0e05 	sub.w	lr, lr, r5
 8013ace:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8013ad2:	fa5f fe8e 	uxtb.w	lr, lr
 8013ad6:	fb08 c505 	mla	r5, r8, r5, ip
 8013ada:	fbb5 f5fe 	udiv	r5, r5, lr
 8013ade:	042d      	lsls	r5, r5, #16
 8013ae0:	f405 097f 	and.w	r9, r5, #16711680	@ 0xff0000
 8013ae4:	b2e5      	uxtb	r5, r4
 8013ae6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8013aea:	fb08 7505 	mla	r5, r8, r5, r7
 8013aee:	fb08 6404 	mla	r4, r8, r4, r6
 8013af2:	fbb5 f5fe 	udiv	r5, r5, lr
 8013af6:	fbb4 f4fe 	udiv	r4, r4, lr
 8013afa:	b2ed      	uxtb	r5, r5
 8013afc:	0224      	lsls	r4, r4, #8
 8013afe:	ea45 650e 	orr.w	r5, r5, lr, lsl #24
 8013b02:	b2a4      	uxth	r4, r4
 8013b04:	ea49 0505 	orr.w	r5, r9, r5
 8013b08:	432c      	orrs	r4, r5
 8013b0a:	f841 4c04 	str.w	r4, [r1, #-4]
 8013b0e:	e7a5      	b.n	8013a5c <_ZNK8touchgfx6QRCode20drawBitARGB8888BlendEPhbi+0x16>
 8013b10:	4608      	mov	r0, r1
 8013b12:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

08013b16 <_ZN8touchgfx6QRCodeD1Ev>:
 8013b16:	4770      	bx	lr

08013b18 <_ZN8touchgfx6QRCodeD0Ev>:
 8013b18:	b510      	push	{r4, lr}
 8013b1a:	4604      	mov	r4, r0
 8013b1c:	2158      	movs	r1, #88	@ 0x58
 8013b1e:	f012 fa79 	bl	8026014 <_ZdlPvj>
 8013b22:	4620      	mov	r0, r4
 8013b24:	bd10      	pop	{r4, pc}

08013b26 <_ZNK8touchgfx6QRCode12getSolidRectEv>:
 8013b26:	f891 3054 	ldrb.w	r3, [r1, #84]	@ 0x54
 8013b2a:	2bff      	cmp	r3, #255	@ 0xff
 8013b2c:	b510      	push	{r4, lr}
 8013b2e:	d10d      	bne.n	8013b4c <_ZNK8touchgfx6QRCode12getSolidRectEv+0x26>
 8013b30:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8013b32:	b15b      	cbz	r3, 8013b4c <_ZNK8touchgfx6QRCode12getSolidRectEv+0x26>
 8013b34:	781b      	ldrb	r3, [r3, #0]
 8013b36:	b14b      	cbz	r3, 8013b4c <_ZNK8touchgfx6QRCode12getSolidRectEv+0x26>
 8013b38:	2300      	movs	r3, #0
 8013b3a:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
 8013b3e:	f9b1 200a 	ldrsh.w	r2, [r1, #10]
 8013b42:	8003      	strh	r3, [r0, #0]
 8013b44:	8043      	strh	r3, [r0, #2]
 8013b46:	8084      	strh	r4, [r0, #4]
 8013b48:	80c2      	strh	r2, [r0, #6]
 8013b4a:	bd10      	pop	{r4, pc}
 8013b4c:	2300      	movs	r3, #0
 8013b4e:	8003      	strh	r3, [r0, #0]
 8013b50:	8043      	strh	r3, [r0, #2]
 8013b52:	8083      	strh	r3, [r0, #4]
 8013b54:	80c3      	strh	r3, [r0, #6]
 8013b56:	e7f8      	b.n	8013b4a <_ZNK8touchgfx6QRCode12getSolidRectEv+0x24>

08013b58 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE>:
 8013b58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013b5c:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013b5e:	b087      	sub	sp, #28
 8013b60:	4604      	mov	r4, r0
 8013b62:	460e      	mov	r6, r1
 8013b64:	781b      	ldrb	r3, [r3, #0]
 8013b66:	3b15      	subs	r3, #21
 8013b68:	2b9c      	cmp	r3, #156	@ 0x9c
 8013b6a:	f200 80d5 	bhi.w	8013d18 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1c0>
 8013b6e:	f890 3054 	ldrb.w	r3, [r0, #84]	@ 0x54
 8013b72:	2b00      	cmp	r3, #0
 8013b74:	f000 80d0 	beq.w	8013d18 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1c0>
 8013b78:	6808      	ldr	r0, [r1, #0]
 8013b7a:	ab02      	add	r3, sp, #8
 8013b7c:	6849      	ldr	r1, [r1, #4]
 8013b7e:	f10d 0808 	add.w	r8, sp, #8
 8013b82:	c303      	stmia	r3!, {r0, r1}
 8013b84:	6823      	ldr	r3, [r4, #0]
 8013b86:	4641      	mov	r1, r8
 8013b88:	4620      	mov	r0, r4
 8013b8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013b8c:	4798      	blx	r3
 8013b8e:	f7f0 fa5b 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8013b92:	6803      	ldr	r3, [r0, #0]
 8013b94:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013b96:	4798      	blx	r3
 8013b98:	2818      	cmp	r0, #24
 8013b9a:	d067      	beq.n	8013c6c <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x114>
 8013b9c:	2820      	cmp	r0, #32
 8013b9e:	d06a      	beq.n	8013c76 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x11e>
 8013ba0:	2810      	cmp	r0, #16
 8013ba2:	f040 80b9 	bne.w	8013d18 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1c0>
 8013ba6:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8013baa:	4d5d      	ldr	r5, [pc, #372]	@ (8013d20 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1c8>)
 8013bac:	4b5d      	ldr	r3, [pc, #372]	@ (8013d24 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1cc>)
 8013bae:	2aff      	cmp	r2, #255	@ 0xff
 8013bb0:	bf08      	it	eq
 8013bb2:	461d      	moveq	r5, r3
 8013bb4:	10c7      	asrs	r7, r0, #3
 8013bb6:	f7f0 fa47 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8013bba:	6803      	ldr	r3, [r0, #0]
 8013bbc:	f8df a180 	ldr.w	sl, [pc, #384]	@ 8013d40 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1e8>
 8013bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013bc2:	4798      	blx	r3
 8013bc4:	4b58      	ldr	r3, [pc, #352]	@ (8013d28 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1d0>)
 8013bc6:	9000      	str	r0, [sp, #0]
 8013bc8:	6818      	ldr	r0, [r3, #0]
 8013bca:	6803      	ldr	r3, [r0, #0]
 8013bcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013bce:	4798      	blx	r3
 8013bd0:	4b56      	ldr	r3, [pc, #344]	@ (8013d2c <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1d4>)
 8013bd2:	4681      	mov	r9, r0
 8013bd4:	781b      	ldrb	r3, [r3, #0]
 8013bd6:	2b01      	cmp	r3, #1
 8013bd8:	d157      	bne.n	8013c8a <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x132>
 8013bda:	ab04      	add	r3, sp, #16
 8013bdc:	e898 0003 	ldmia.w	r8, {r0, r1}
 8013be0:	e883 0003 	stmia.w	r3, {r0, r1}
 8013be4:	4618      	mov	r0, r3
 8013be6:	f002 fe7f 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8013bea:	f8ba 3000 	ldrh.w	r3, [sl]
 8013bee:	f9bd 8012 	ldrsh.w	r8, [sp, #18]
 8013bf2:	f04f 0a00 	mov.w	sl, #0
 8013bf6:	f9bd 0010 	ldrsh.w	r0, [sp, #16]
 8013bfa:	fb03 0808 	mla	r8, r3, r8, r0
 8013bfe:	fb07 9808 	mla	r8, r7, r8, r9
 8013c02:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8013c06:	4553      	cmp	r3, sl
 8013c08:	f340 8081 	ble.w	8013d0e <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1b6>
 8013c0c:	8832      	ldrh	r2, [r6, #0]
 8013c0e:	4641      	mov	r1, r8
 8013c10:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8013c14:	4413      	add	r3, r2
 8013c16:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013c18:	f9b6 b006 	ldrsh.w	fp, [r6, #6]
 8013c1c:	b21b      	sxth	r3, r3
 8013c1e:	44cb      	add	fp, r9
 8013c20:	3b01      	subs	r3, #1
 8013c22:	eba3 030a 	sub.w	r3, r3, sl
 8013c26:	fb93 f3f2 	sdiv	r3, r3, r2
 8013c2a:	9301      	str	r3, [sp, #4]
 8013c2c:	45d9      	cmp	r9, fp
 8013c2e:	da27      	bge.n	8013c80 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x128>
 8013c30:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8013c32:	9801      	ldr	r0, [sp, #4]
 8013c34:	fb99 f3f7 	sdiv	r3, r9, r7
 8013c38:	fb07 9213 	mls	r2, r7, r3, r9
 8013c3c:	1abf      	subs	r7, r7, r2
 8013c3e:	ebab 0209 	sub.w	r2, fp, r9
 8013c42:	4297      	cmp	r7, r2
 8013c44:	bfa8      	it	ge
 8013c46:	4617      	movge	r7, r2
 8013c48:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8013c4a:	fb02 0303 	mla	r3, r2, r3, r0
 8013c4e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013c50:	4620      	mov	r0, r4
 8013c52:	44b9      	add	r9, r7
 8013c54:	eb02 02e3 	add.w	r2, r2, r3, asr #3
 8013c58:	f003 0307 	and.w	r3, r3, #7
 8013c5c:	7852      	ldrb	r2, [r2, #1]
 8013c5e:	411a      	asrs	r2, r3
 8013c60:	463b      	mov	r3, r7
 8013c62:	f002 0201 	and.w	r2, r2, #1
 8013c66:	47a8      	blx	r5
 8013c68:	4601      	mov	r1, r0
 8013c6a:	e7df      	b.n	8013c2c <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0xd4>
 8013c6c:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8013c70:	4d2f      	ldr	r5, [pc, #188]	@ (8013d30 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1d8>)
 8013c72:	4b30      	ldr	r3, [pc, #192]	@ (8013d34 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1dc>)
 8013c74:	e79b      	b.n	8013bae <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x56>
 8013c76:	f894 2054 	ldrb.w	r2, [r4, #84]	@ 0x54
 8013c7a:	4d2f      	ldr	r5, [pc, #188]	@ (8013d38 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1e0>)
 8013c7c:	4b2f      	ldr	r3, [pc, #188]	@ (8013d3c <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1e4>)
 8013c7e:	e796      	b.n	8013bae <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x56>
 8013c80:	9b00      	ldr	r3, [sp, #0]
 8013c82:	f10a 0a01 	add.w	sl, sl, #1
 8013c86:	4498      	add	r8, r3
 8013c88:	e7bb      	b.n	8013c02 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0xaa>
 8013c8a:	f8ba 3000 	ldrh.w	r3, [sl]
 8013c8e:	f04f 0a00 	mov.w	sl, #0
 8013c92:	f9bd 800a 	ldrsh.w	r8, [sp, #10]
 8013c96:	f9bd 0008 	ldrsh.w	r0, [sp, #8]
 8013c9a:	fb03 0808 	mla	r8, r3, r8, r0
 8013c9e:	fb07 9808 	mla	r8, r7, r8, r9
 8013ca2:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8013ca6:	4553      	cmp	r3, sl
 8013ca8:	dd31      	ble.n	8013d0e <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1b6>
 8013caa:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013cae:	4641      	mov	r1, r8
 8013cb0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8013cb2:	4453      	add	r3, sl
 8013cb4:	f9b6 9000 	ldrsh.w	r9, [r6]
 8013cb8:	f9b6 b004 	ldrsh.w	fp, [r6, #4]
 8013cbc:	fb93 f3f2 	sdiv	r3, r3, r2
 8013cc0:	44cb      	add	fp, r9
 8013cc2:	9301      	str	r3, [sp, #4]
 8013cc4:	45d9      	cmp	r9, fp
 8013cc6:	da1d      	bge.n	8013d04 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1ac>
 8013cc8:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
 8013cca:	9801      	ldr	r0, [sp, #4]
 8013ccc:	fb99 f2f7 	sdiv	r2, r9, r7
 8013cd0:	fb07 9312 	mls	r3, r7, r2, r9
 8013cd4:	1aff      	subs	r7, r7, r3
 8013cd6:	ebab 0309 	sub.w	r3, fp, r9
 8013cda:	429f      	cmp	r7, r3
 8013cdc:	bfa8      	it	ge
 8013cde:	461f      	movge	r7, r3
 8013ce0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8013ce2:	fb03 2300 	mla	r3, r3, r0, r2
 8013ce6:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8013ce8:	4620      	mov	r0, r4
 8013cea:	44b9      	add	r9, r7
 8013cec:	eb02 02e3 	add.w	r2, r2, r3, asr #3
 8013cf0:	f003 0307 	and.w	r3, r3, #7
 8013cf4:	7852      	ldrb	r2, [r2, #1]
 8013cf6:	411a      	asrs	r2, r3
 8013cf8:	463b      	mov	r3, r7
 8013cfa:	f002 0201 	and.w	r2, r2, #1
 8013cfe:	47a8      	blx	r5
 8013d00:	4601      	mov	r1, r0
 8013d02:	e7df      	b.n	8013cc4 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x16c>
 8013d04:	9b00      	ldr	r3, [sp, #0]
 8013d06:	f10a 0a01 	add.w	sl, sl, #1
 8013d0a:	4498      	add	r8, r3
 8013d0c:	e7c9      	b.n	8013ca2 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x14a>
 8013d0e:	4b06      	ldr	r3, [pc, #24]	@ (8013d28 <_ZNK8touchgfx6QRCode4drawERKNS_4RectE+0x1d0>)
 8013d10:	6818      	ldr	r0, [r3, #0]
 8013d12:	6803      	ldr	r3, [r0, #0]
 8013d14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013d16:	4798      	blx	r3
 8013d18:	b007      	add	sp, #28
 8013d1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013d1e:	bf00      	nop
 8013d20:	080138ad 	.word	0x080138ad
 8013d24:	08013891 	.word	0x08013891
 8013d28:	24025e20 	.word	0x24025e20
 8013d2c:	24025e18 	.word	0x24025e18
 8013d30:	08013985 	.word	0x08013985
 8013d34:	0801394b 	.word	0x0801394b
 8013d38:	08013a47 	.word	0x08013a47
 8013d3c:	08013a09 	.word	0x08013a09
 8013d40:	24025e1a 	.word	0x24025e1a

08013d44 <_ZN8touchgfx6QRCodeC1Ev>:
 8013d44:	2200      	movs	r2, #0
 8013d46:	2101      	movs	r1, #1
 8013d48:	b510      	push	{r4, lr}
 8013d4a:	4c1c      	ldr	r4, [pc, #112]	@ (8013dbc <_ZN8touchgfx6QRCodeC1Ev+0x78>)
 8013d4c:	8082      	strh	r2, [r0, #4]
 8013d4e:	80c2      	strh	r2, [r0, #6]
 8013d50:	8102      	strh	r2, [r0, #8]
 8013d52:	8142      	strh	r2, [r0, #10]
 8013d54:	8182      	strh	r2, [r0, #12]
 8013d56:	81c2      	strh	r2, [r0, #14]
 8013d58:	8202      	strh	r2, [r0, #16]
 8013d5a:	8242      	strh	r2, [r0, #18]
 8013d5c:	61c2      	str	r2, [r0, #28]
 8013d5e:	8402      	strh	r2, [r0, #32]
 8013d60:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013d62:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8013d66:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 8013d6a:	6004      	str	r4, [r0, #0]
 8013d6c:	f64f 6401 	movw	r4, #65025	@ 0xfe01
 8013d70:	f880 1030 	strb.w	r1, [r0, #48]	@ 0x30
 8013d74:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
 8013d78:	87c2      	strh	r2, [r0, #62]	@ 0x3e
 8013d7a:	f8a0 2042 	strh.w	r2, [r0, #66]	@ 0x42
 8013d7e:	f8a0 2046 	strh.w	r2, [r0, #70]	@ 0x46
 8013d82:	f8a0 204a 	strh.w	r2, [r0, #74]	@ 0x4a
 8013d86:	f8a0 204e 	strh.w	r2, [r0, #78]	@ 0x4e
 8013d8a:	f8a0 4044 	strh.w	r4, [r0, #68]	@ 0x44
 8013d8e:	f8a0 4048 	strh.w	r4, [r0, #72]	@ 0x48
 8013d92:	f8a0 404c 	strh.w	r4, [r0, #76]	@ 0x4c
 8013d96:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
 8013d9a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013d9e:	f64f 71ff 	movw	r1, #65535	@ 0xffff
 8013da2:	e9c0 220a 	strd	r2, r2, [r0, #40]	@ 0x28
 8013da6:	f44f 427f 	mov.w	r2, #65280	@ 0xff00
 8013daa:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8013dae:	f8a0 2050 	strh.w	r2, [r0, #80]	@ 0x50
 8013db2:	f8a0 1052 	strh.w	r1, [r0, #82]	@ 0x52
 8013db6:	f880 1054 	strb.w	r1, [r0, #84]	@ 0x54
 8013dba:	bd10      	pop	{r4, pc}
 8013dbc:	0802b050 	.word	0x0802b050

08013dc0 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc>:
 8013dc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8013dc2:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8013dc4:	460c      	mov	r4, r1
 8013dc6:	b1b3      	cbz	r3, 8013df6 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc+0x36>
 8013dc8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8013dca:	b1a3      	cbz	r3, 8013df6 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc+0x36>
 8013dcc:	2200      	movs	r2, #0
 8013dce:	f04f 31ff 	mov.w	r1, #4294967295
 8013dd2:	f04f 0c01 	mov.w	ip, #1
 8013dd6:	701a      	strb	r2, [r3, #0]
 8013dd8:	f890 2030 	ldrb.w	r2, [r0, #48]	@ 0x30
 8013ddc:	f890 303c 	ldrb.w	r3, [r0, #60]	@ 0x3c
 8013de0:	e9cd 1c02 	strd	r1, ip, [sp, #8]
 8013de4:	e9cd 2200 	strd	r2, r2, [sp]
 8013de8:	e9d0 210a 	ldrd	r2, r1, [r0, #40]	@ 0x28
 8013dec:	4620      	mov	r0, r4
 8013dee:	f011 fb39 	bl	8025464 <qrcodegen_encodeText>
 8013df2:	b004      	add	sp, #16
 8013df4:	bd10      	pop	{r4, pc}
 8013df6:	4618      	mov	r0, r3
 8013df8:	e7fb      	b.n	8013df2 <_ZN8touchgfx6QRCode21convertStringToQRCodeEPKc+0x32>

08013dfa <_ZN8touchgfx6QRCode20updateWidthAndHeightEv>:
 8013dfa:	b510      	push	{r4, lr}
 8013dfc:	e9d0 130d 	ldrd	r1, r3, [r0, #52]	@ 0x34
 8013e00:	4604      	mov	r4, r0
 8013e02:	fb11 f103 	smulbb	r1, r1, r3
 8013e06:	6803      	ldr	r3, [r0, #0]
 8013e08:	b209      	sxth	r1, r1
 8013e0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e0c:	4798      	blx	r3
 8013e0e:	4620      	mov	r0, r4
 8013e10:	e9d4 130d 	ldrd	r1, r3, [r4, #52]	@ 0x34
 8013e14:	fb11 f103 	smulbb	r1, r1, r3
 8013e18:	6823      	ldr	r3, [r4, #0]
 8013e1a:	b209      	sxth	r1, r1
 8013e1c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8013e22:	4718      	bx	r3

08013e24 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013e24:	2000      	movs	r0, #0
 8013e26:	4770      	bx	lr

08013e28 <_ZN8touchgfx8KeyboardD1Ev>:
 8013e28:	4770      	bx	lr

08013e2a <_ZN8touchgfx10ClickEventD1Ev>:
 8013e2a:	4770      	bx	lr

08013e2c <_ZN8touchgfx8Keyboard14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 8013e2c:	b538      	push	{r3, r4, r5, lr}
 8013e2e:	4604      	mov	r4, r0
 8013e30:	4615      	mov	r5, r2
 8013e32:	f7fc f947 	bl	80100c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8013e36:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8013e3a:	81a3      	strh	r3, [r4, #12]
 8013e3c:	f04f 33ff 	mov.w	r3, #4294967295
 8013e40:	6223      	str	r3, [r4, #32]
 8013e42:	682b      	ldr	r3, [r5, #0]
 8013e44:	61e3      	str	r3, [r4, #28]
 8013e46:	602c      	str	r4, [r5, #0]
 8013e48:	bd38      	pop	{r3, r4, r5, pc}

08013e4a <_ZN8touchgfx10ClickEventD0Ev>:
 8013e4a:	b510      	push	{r4, lr}
 8013e4c:	4604      	mov	r4, r0
 8013e4e:	210c      	movs	r1, #12
 8013e50:	f012 f8e0 	bl	8026014 <_ZdlPvj>
 8013e54:	4620      	mov	r0, r4
 8013e56:	bd10      	pop	{r4, pc}

08013e58 <_ZN8touchgfx8KeyboardD0Ev>:
 8013e58:	b510      	push	{r4, lr}
 8013e5a:	4604      	mov	r4, r0
 8013e5c:	21e8      	movs	r1, #232	@ 0xe8
 8013e5e:	f012 f8d9 	bl	8026014 <_ZdlPvj>
 8013e62:	4620      	mov	r0, r4
 8013e64:	bd10      	pop	{r4, pc}

08013e66 <_ZNK8touchgfx4Rect9intersectEss>:
 8013e66:	b510      	push	{r4, lr}
 8013e68:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013e6c:	428b      	cmp	r3, r1
 8013e6e:	dc10      	bgt.n	8013e92 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013e70:	8884      	ldrh	r4, [r0, #4]
 8013e72:	4423      	add	r3, r4
 8013e74:	b21b      	sxth	r3, r3
 8013e76:	4299      	cmp	r1, r3
 8013e78:	da0b      	bge.n	8013e92 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013e7a:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	dc07      	bgt.n	8013e92 <_ZNK8touchgfx4Rect9intersectEss+0x2c>
 8013e82:	88c0      	ldrh	r0, [r0, #6]
 8013e84:	4418      	add	r0, r3
 8013e86:	b200      	sxth	r0, r0
 8013e88:	4282      	cmp	r2, r0
 8013e8a:	bfac      	ite	ge
 8013e8c:	2000      	movge	r0, #0
 8013e8e:	2001      	movlt	r0, #1
 8013e90:	bd10      	pop	{r4, pc}
 8013e92:	2000      	movs	r0, #0
 8013e94:	e7fc      	b.n	8013e90 <_ZNK8touchgfx4Rect9intersectEss+0x2a>
	...

08013e98 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE>:
 8013e98:	b530      	push	{r4, r5, lr}
 8013e9a:	f890 30dd 	ldrb.w	r3, [r0, #221]	@ 0xdd
 8013e9e:	b085      	sub	sp, #20
 8013ea0:	4604      	mov	r4, r0
 8013ea2:	460d      	mov	r5, r1
 8013ea4:	b1f3      	cbz	r3, 8013ee4 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013ea6:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013eaa:	30bc      	adds	r0, #188	@ 0xbc
 8013eac:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 8013eb0:	f7ff ffd9 	bl	8013e66 <_ZNK8touchgfx4Rect9intersectEss>
 8013eb4:	b9b0      	cbnz	r0, 8013ee4 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013eb6:	f894 30e4 	ldrb.w	r3, [r4, #228]	@ 0xe4
 8013eba:	b99b      	cbnz	r3, 8013ee4 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x4c>
 8013ebc:	480a      	ldr	r0, [pc, #40]	@ (8013ee8 <_ZN8touchgfx8Keyboard15handleDragEventERKNS_9DragEventE+0x50>)
 8013ebe:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013ec2:	f9b5 2008 	ldrsh.w	r2, [r5, #8]
 8013ec6:	9001      	str	r0, [sp, #4]
 8013ec8:	2002      	movs	r0, #2
 8013eca:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013ece:	6823      	ldr	r3, [r4, #0]
 8013ed0:	f88d 0008 	strb.w	r0, [sp, #8]
 8013ed4:	4620      	mov	r0, r4
 8013ed6:	f8ad 100a 	strh.w	r1, [sp, #10]
 8013eda:	a901      	add	r1, sp, #4
 8013edc:	f8ad 200c 	strh.w	r2, [sp, #12]
 8013ee0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ee2:	4798      	blx	r3
 8013ee4:	b005      	add	sp, #20
 8013ee6:	bd30      	pop	{r4, r5, pc}
 8013ee8:	0802b0b8 	.word	0x0802b0b8

08013eec <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8013eec:	b510      	push	{r4, lr}
 8013eee:	f9b1 4000 	ldrsh.w	r4, [r1]
 8013ef2:	888a      	ldrh	r2, [r1, #4]
 8013ef4:	f9b0 3000 	ldrsh.w	r3, [r0]
 8013ef8:	4422      	add	r2, r4
 8013efa:	b212      	sxth	r2, r2
 8013efc:	4293      	cmp	r3, r2
 8013efe:	da15      	bge.n	8013f2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f00:	8882      	ldrh	r2, [r0, #4]
 8013f02:	4413      	add	r3, r2
 8013f04:	b21b      	sxth	r3, r3
 8013f06:	429c      	cmp	r4, r3
 8013f08:	da10      	bge.n	8013f2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f0a:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8013f0e:	88c9      	ldrh	r1, [r1, #6]
 8013f10:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8013f14:	4419      	add	r1, r3
 8013f16:	b209      	sxth	r1, r1
 8013f18:	428a      	cmp	r2, r1
 8013f1a:	da07      	bge.n	8013f2c <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8013f1c:	88c0      	ldrh	r0, [r0, #6]
 8013f1e:	4410      	add	r0, r2
 8013f20:	b200      	sxth	r0, r0
 8013f22:	4283      	cmp	r3, r0
 8013f24:	bfac      	ite	ge
 8013f26:	2000      	movge	r0, #0
 8013f28:	2001      	movlt	r0, #1
 8013f2a:	bd10      	pop	{r4, pc}
 8013f2c:	2000      	movs	r0, #0
 8013f2e:	e7fc      	b.n	8013f2a <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08013f30 <_ZN8touchgfx8DrawableC1Ev>:
 8013f30:	4a0a      	ldr	r2, [pc, #40]	@ (8013f5c <_ZN8touchgfx8DrawableC1Ev+0x2c>)
 8013f32:	6002      	str	r2, [r0, #0]
 8013f34:	2200      	movs	r2, #0
 8013f36:	8082      	strh	r2, [r0, #4]
 8013f38:	80c2      	strh	r2, [r0, #6]
 8013f3a:	8102      	strh	r2, [r0, #8]
 8013f3c:	8142      	strh	r2, [r0, #10]
 8013f3e:	8182      	strh	r2, [r0, #12]
 8013f40:	81c2      	strh	r2, [r0, #14]
 8013f42:	8202      	strh	r2, [r0, #16]
 8013f44:	8242      	strh	r2, [r0, #18]
 8013f46:	61c2      	str	r2, [r0, #28]
 8013f48:	8402      	strh	r2, [r0, #32]
 8013f4a:	8442      	strh	r2, [r0, #34]	@ 0x22
 8013f4c:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8013f50:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8013f54:	2201      	movs	r2, #1
 8013f56:	f880 2025 	strb.w	r2, [r0, #37]	@ 0x25
 8013f5a:	4770      	bx	lr
 8013f5c:	0802b1c0 	.word	0x0802b1c0

08013f60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>:
 8013f60:	b538      	push	{r3, r4, r5, lr}
 8013f62:	4604      	mov	r4, r0
 8013f64:	460d      	mov	r5, r1
 8013f66:	2226      	movs	r2, #38	@ 0x26
 8013f68:	2100      	movs	r1, #0
 8013f6a:	f012 fe9f 	bl	8026cac <memset>
 8013f6e:	4620      	mov	r0, r4
 8013f70:	f7ff ffde 	bl	8013f30 <_ZN8touchgfx8DrawableC1Ev>
 8013f74:	4b06      	ldr	r3, [pc, #24]	@ (8013f90 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE+0x30>)
 8013f76:	4620      	mov	r0, r4
 8013f78:	4629      	mov	r1, r5
 8013f7a:	6023      	str	r3, [r4, #0]
 8013f7c:	882b      	ldrh	r3, [r5, #0]
 8013f7e:	84e3      	strh	r3, [r4, #38]	@ 0x26
 8013f80:	23ff      	movs	r3, #255	@ 0xff
 8013f82:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 8013f86:	f7ff fb1d 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 8013f8a:	4620      	mov	r0, r4
 8013f8c:	bd38      	pop	{r3, r4, r5, pc}
 8013f8e:	bf00      	nop
 8013f90:	0802af70 	.word	0x0802af70

08013f94 <_ZN8touchgfx8KeyboardC1Ev>:
 8013f94:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8013f98:	4604      	mov	r4, r0
 8013f9a:	2500      	movs	r5, #0
 8013f9c:	f7ff ffc8 	bl	8013f30 <_ZN8touchgfx8DrawableC1Ev>
 8013fa0:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013fa4:	4b2f      	ldr	r3, [pc, #188]	@ (8014064 <_ZN8touchgfx8KeyboardC1Ev+0xd0>)
 8013fa6:	f104 0938 	add.w	r9, r4, #56	@ 0x38
 8013faa:	af02      	add	r7, sp, #8
 8013fac:	f104 0864 	add.w	r8, r4, #100	@ 0x64
 8013fb0:	6023      	str	r3, [r4, #0]
 8013fb2:	4648      	mov	r0, r9
 8013fb4:	f827 6d04 	strh.w	r6, [r7, #-4]!
 8013fb8:	4639      	mov	r1, r7
 8013fba:	f104 0ab8 	add.w	sl, r4, #184	@ 0xb8
 8013fbe:	e9c4 550a 	strd	r5, r5, [r4, #40]	@ 0x28
 8013fc2:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
 8013fc6:	f7ff ffcb 	bl	8013f60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8013fca:	2226      	movs	r2, #38	@ 0x26
 8013fcc:	4629      	mov	r1, r5
 8013fce:	4640      	mov	r0, r8
 8013fd0:	f012 fe6c 	bl	8026cac <memset>
 8013fd4:	4640      	mov	r0, r8
 8013fd6:	f7ff ffab 	bl	8013f30 <_ZN8touchgfx8DrawableC1Ev>
 8013fda:	4b23      	ldr	r3, [pc, #140]	@ (8014068 <_ZN8touchgfx8KeyboardC1Ev+0xd4>)
 8013fdc:	4639      	mov	r1, r7
 8013fde:	f8a4 6090 	strh.w	r6, [r4, #144]	@ 0x90
 8013fe2:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
 8013fe6:	f44f 037f 	mov.w	r3, #16711680	@ 0xff0000
 8013fea:	f8c4 5094 	str.w	r5, [r4, #148]	@ 0x94
 8013fee:	4650      	mov	r0, sl
 8013ff0:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8013ff4:	4b1d      	ldr	r3, [pc, #116]	@ (801406c <_ZN8touchgfx8KeyboardC1Ev+0xd8>)
 8013ff6:	f884 509c 	strb.w	r5, [r4, #156]	@ 0x9c
 8013ffa:	6663      	str	r3, [r4, #100]	@ 0x64
 8013ffc:	f884 509d 	strb.w	r5, [r4, #157]	@ 0x9d
 8014000:	f8a4 50a0 	strh.w	r5, [r4, #160]	@ 0xa0
 8014004:	f8a4 50a2 	strh.w	r5, [r4, #162]	@ 0xa2
 8014008:	f8a4 60a4 	strh.w	r6, [r4, #164]	@ 0xa4
 801400c:	f8a4 60a6 	strh.w	r6, [r4, #166]	@ 0xa6
 8014010:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
 8014014:	f8c4 50b4 	str.w	r5, [r4, #180]	@ 0xb4
 8014018:	f8ad 6004 	strh.w	r6, [sp, #4]
 801401c:	e9c4 552b 	strd	r5, r5, [r4, #172]	@ 0xac
 8014020:	f7ff ff9e 	bl	8013f60 <_ZN8touchgfx5ImageC1ERKNS_6BitmapE>
 8014024:	2301      	movs	r3, #1
 8014026:	462a      	mov	r2, r5
 8014028:	4629      	mov	r1, r5
 801402a:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 801402e:	4648      	mov	r0, r9
 8014030:	f884 50e4 	strb.w	r5, [r4, #228]	@ 0xe4
 8014034:	f7f0 fbc6 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 8014038:	4649      	mov	r1, r9
 801403a:	4620      	mov	r0, r4
 801403c:	f7fb fde6 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 8014040:	4651      	mov	r1, sl
 8014042:	4620      	mov	r0, r4
 8014044:	f884 50dd 	strb.w	r5, [r4, #221]	@ 0xdd
 8014048:	f7fb fde0 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801404c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8014050:	4620      	mov	r0, r4
 8014052:	4641      	mov	r1, r8
 8014054:	f8c4 3094 	str.w	r3, [r4, #148]	@ 0x94
 8014058:	f7fb fdd8 	bl	800fc0c <_ZN8touchgfx9Container3addERNS_8DrawableE>
 801405c:	4620      	mov	r0, r4
 801405e:	b002      	add	sp, #8
 8014060:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014064:	0802b0cc 	.word	0x0802b0cc
 8014068:	080299c8 	.word	0x080299c8
 801406c:	0802a198 	.word	0x0802a198

08014070 <_ZN8touchgfx8Keyboard9setBufferEPtt>:
 8014070:	b510      	push	{r4, lr}
 8014072:	4604      	mov	r4, r0
 8014074:	6301      	str	r1, [r0, #48]	@ 0x30
 8014076:	8682      	strh	r2, [r0, #52]	@ 0x34
 8014078:	f8c0 10ac 	str.w	r1, [r0, #172]	@ 0xac
 801407c:	4608      	mov	r0, r1
 801407e:	f005 fd67 	bl	8019b50 <_ZN8touchgfx7Unicode6strlenEPKt>
 8014082:	86e0      	strh	r0, [r4, #54]	@ 0x36
 8014084:	bd10      	pop	{r4, pc}

08014086 <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE>:
 8014086:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801408a:	4605      	mov	r5, r0
 801408c:	460c      	mov	r4, r1
 801408e:	f8c5 10b0 	str.w	r1, [r5, #176]	@ 0xb0
 8014092:	b309      	cbz	r1, 80140d8 <_ZN8touchgfx8Keyboard9setLayoutEPKNS0_6LayoutE+0x52>
 8014094:	460f      	mov	r7, r1
 8014096:	a902      	add	r1, sp, #8
 8014098:	f105 0664 	add.w	r6, r5, #100	@ 0x64
 801409c:	3038      	adds	r0, #56	@ 0x38
 801409e:	f837 3b1c 	ldrh.w	r3, [r7], #28
 80140a2:	f821 3d04 	strh.w	r3, [r1, #-4]!
 80140a6:	f7ff fa8d 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 80140aa:	4639      	mov	r1, r7
 80140ac:	4630      	mov	r0, r6
 80140ae:	f7ff f865 	bl	801317c <_ZN8touchgfx8TextArea12setTypedTextERKNS_9TypedTextE>
 80140b2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80140b4:	4630      	mov	r0, r6
 80140b6:	f8c5 3094 	str.w	r3, [r5, #148]	@ 0x94
 80140ba:	f9b4 7016 	ldrsh.w	r7, [r4, #22]
 80140be:	f9b4 8018 	ldrsh.w	r8, [r4, #24]
 80140c2:	f9b4 2014 	ldrsh.w	r2, [r4, #20]
 80140c6:	f9b4 1012 	ldrsh.w	r1, [r4, #18]
 80140ca:	f7f0 fb7b 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 80140ce:	4642      	mov	r2, r8
 80140d0:	4639      	mov	r1, r7
 80140d2:	4630      	mov	r0, r6
 80140d4:	f7f0 fb83 	bl	80047de <_ZN8touchgfx8Drawable14setWidthHeightEss>
 80140d8:	682b      	ldr	r3, [r5, #0]
 80140da:	4628      	mov	r0, r5
 80140dc:	695b      	ldr	r3, [r3, #20]
 80140de:	4798      	blx	r3
 80140e0:	b002      	add	sp, #8
 80140e2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080140e8 <_ZN8touchgfx8Keyboard18setTextIndentationEv>:
 80140e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80140ec:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 80140f0:	4604      	mov	r4, r0
 80140f2:	b343      	cbz	r3, 8014146 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x5e>
 80140f4:	4a15      	ldr	r2, [pc, #84]	@ (801414c <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x64>)
 80140f6:	f100 0764 	add.w	r7, r0, #100	@ 0x64
 80140fa:	8c19      	ldrh	r1, [r3, #32]
 80140fc:	6812      	ldr	r2, [r2, #0]
 80140fe:	4638      	mov	r0, r7
 8014100:	8add      	ldrh	r5, [r3, #22]
 8014102:	f812 1011 	ldrb.w	r1, [r2, r1, lsl #1]
 8014106:	4a12      	ldr	r2, [pc, #72]	@ (8014150 <_ZN8touchgfx8Keyboard18setTextIndentationEv+0x68>)
 8014108:	f9b3 8018 	ldrsh.w	r8, [r3, #24]
 801410c:	6812      	ldr	r2, [r2, #0]
 801410e:	f852 2021 	ldr.w	r2, [r2, r1, lsl #2]
 8014112:	8a59      	ldrh	r1, [r3, #18]
 8014114:	7ad6      	ldrb	r6, [r2, #11]
 8014116:	b2b2      	uxth	r2, r6
 8014118:	eb05 0542 	add.w	r5, r5, r2, lsl #1
 801411c:	1a89      	subs	r1, r1, r2
 801411e:	f9b3 2014 	ldrsh.w	r2, [r3, #20]
 8014122:	b22d      	sxth	r5, r5
 8014124:	b209      	sxth	r1, r1
 8014126:	f7f0 fb4d 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 801412a:	4642      	mov	r2, r8
 801412c:	4629      	mov	r1, r5
 801412e:	4638      	mov	r0, r7
 8014130:	f7f0 fb55 	bl	80047de <_ZN8touchgfx8Drawable14setWidthHeightEss>
 8014134:	2300      	movs	r3, #0
 8014136:	f04f 32ff 	mov.w	r2, #4294967295
 801413a:	f884 609b 	strb.w	r6, [r4, #155]	@ 0x9b
 801413e:	f8c4 30a8 	str.w	r3, [r4, #168]	@ 0xa8
 8014142:	e9c4 3228 	strd	r3, r2, [r4, #160]	@ 0xa0
 8014146:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801414a:	bf00      	nop
 801414c:	24025e78 	.word	0x24025e78
 8014150:	24025e80 	.word	0x24025e80

08014154 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>:
 8014154:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014158:	4690      	mov	r8, r2
 801415a:	f8d1 70b0 	ldr.w	r7, [r1, #176]	@ 0xb0
 801415e:	2200      	movs	r2, #0
 8014160:	4606      	mov	r6, r0
 8014162:	4699      	mov	r9, r3
 8014164:	8042      	strh	r2, [r0, #2]
 8014166:	8082      	strh	r2, [r0, #4]
 8014168:	80c2      	strh	r2, [r0, #6]
 801416a:	8102      	strh	r2, [r0, #8]
 801416c:	7002      	strb	r2, [r0, #0]
 801416e:	b1c7      	cbz	r7, 80141a2 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8014170:	f897 a008 	ldrb.w	sl, [r7, #8]
 8014174:	4615      	mov	r5, r2
 8014176:	f04f 0b0c 	mov.w	fp, #12
 801417a:	b2eb      	uxtb	r3, r5
 801417c:	459a      	cmp	sl, r3
 801417e:	d910      	bls.n	80141a2 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x4e>
 8014180:	687c      	ldr	r4, [r7, #4]
 8014182:	464a      	mov	r2, r9
 8014184:	4641      	mov	r1, r8
 8014186:	fb0b 4405 	mla	r4, fp, r5, r4
 801418a:	3501      	adds	r5, #1
 801418c:	1ca0      	adds	r0, r4, #2
 801418e:	f7ff fe6a 	bl	8013e66 <_ZNK8touchgfx4Rect9intersectEss>
 8014192:	2800      	cmp	r0, #0
 8014194:	d0f1      	beq.n	801417a <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss+0x26>
 8014196:	6823      	ldr	r3, [r4, #0]
 8014198:	6033      	str	r3, [r6, #0]
 801419a:	6863      	ldr	r3, [r4, #4]
 801419c:	6073      	str	r3, [r6, #4]
 801419e:	68a3      	ldr	r3, [r4, #8]
 80141a0:	60b3      	str	r3, [r6, #8]
 80141a2:	4630      	mov	r0, r6
 80141a4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

080141a8 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>:
 80141a8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80141ac:	2500      	movs	r5, #0
 80141ae:	f8d1 70b0 	ldr.w	r7, [r1, #176]	@ 0xb0
 80141b2:	4606      	mov	r6, r0
 80141b4:	4690      	mov	r8, r2
 80141b6:	4699      	mov	r9, r3
 80141b8:	6085      	str	r5, [r0, #8]
 80141ba:	e9c0 5500 	strd	r5, r5, [r0]
 80141be:	b307      	cbz	r7, 8014202 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 80141c0:	f897 a010 	ldrb.w	sl, [r7, #16]
 80141c4:	b2eb      	uxtb	r3, r5
 80141c6:	459a      	cmp	sl, r3
 80141c8:	d91b      	bls.n	8014202 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x5a>
 80141ca:	68fc      	ldr	r4, [r7, #12]
 80141cc:	464a      	mov	r2, r9
 80141ce:	4641      	mov	r1, r8
 80141d0:	eb04 1405 	add.w	r4, r4, r5, lsl #4
 80141d4:	3501      	adds	r5, #1
 80141d6:	4620      	mov	r0, r4
 80141d8:	f7ff fe45 	bl	8013e66 <_ZNK8touchgfx4Rect9intersectEss>
 80141dc:	2800      	cmp	r0, #0
 80141de:	d0f1      	beq.n	80141c4 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x1c>
 80141e0:	4623      	mov	r3, r4
 80141e2:	4632      	mov	r2, r6
 80141e4:	f104 0508 	add.w	r5, r4, #8
 80141e8:	6818      	ldr	r0, [r3, #0]
 80141ea:	3308      	adds	r3, #8
 80141ec:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80141f0:	4614      	mov	r4, r2
 80141f2:	42ab      	cmp	r3, r5
 80141f4:	c403      	stmia	r4!, {r0, r1}
 80141f6:	4622      	mov	r2, r4
 80141f8:	d1f6      	bne.n	80141e8 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss+0x40>
 80141fa:	6818      	ldr	r0, [r3, #0]
 80141fc:	6020      	str	r0, [r4, #0]
 80141fe:	889b      	ldrh	r3, [r3, #4]
 8014200:	80a3      	strh	r3, [r4, #4]
 8014202:	4630      	mov	r0, r6
 8014204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08014208 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>:
 8014208:	b570      	push	{r4, r5, r6, lr}
 801420a:	f8d0 00b4 	ldr.w	r0, [r0, #180]	@ 0xb4
 801420e:	b160      	cbz	r0, 801422a <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>
 8014210:	7906      	ldrb	r6, [r0, #4]
 8014212:	2300      	movs	r3, #0
 8014214:	b2da      	uxtb	r2, r3
 8014216:	4296      	cmp	r6, r2
 8014218:	d908      	bls.n	801422c <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x24>
 801421a:	009a      	lsls	r2, r3, #2
 801421c:	6804      	ldr	r4, [r0, #0]
 801421e:	3301      	adds	r3, #1
 8014220:	18a5      	adds	r5, r4, r2
 8014222:	5ca2      	ldrb	r2, [r4, r2]
 8014224:	428a      	cmp	r2, r1
 8014226:	d1f5      	bne.n	8014214 <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0xc>
 8014228:	8868      	ldrh	r0, [r5, #2]
 801422a:	bd70      	pop	{r4, r5, r6, pc}
 801422c:	2000      	movs	r0, #0
 801422e:	e7fc      	b.n	801422a <_ZNK8touchgfx8Keyboard13getCharForKeyEh+0x22>

08014230 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE>:
 8014230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014234:	f8d0 30b0 	ldr.w	r3, [r0, #176]	@ 0xb0
 8014238:	b08d      	sub	sp, #52	@ 0x34
 801423a:	4605      	mov	r5, r0
 801423c:	460e      	mov	r6, r1
 801423e:	2b00      	cmp	r3, #0
 8014240:	f000 80c4 	beq.w	80143cc <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8014244:	8d18      	ldrh	r0, [r3, #40]	@ 0x28
 8014246:	f006 f815 	bl	801a274 <_ZN8touchgfx11FontManager7getFontEt>
 801424a:	2800      	cmp	r0, #0
 801424c:	f000 80be 	beq.w	80143cc <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 8014250:	f44f 027f 	mov.w	r2, #16711680	@ 0xff0000
 8014254:	2400      	movs	r4, #0
 8014256:	9007      	str	r0, [sp, #28]
 8014258:	920a      	str	r2, [sp, #40]	@ 0x28
 801425a:	2201      	movs	r2, #1
 801425c:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 8014260:	f88d 2020 	strb.w	r2, [sp, #32]
 8014264:	f8d5 20b0 	ldr.w	r2, [r5, #176]	@ 0xb0
 8014268:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 801426c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801426e:	f88d 402c 	strb.w	r4, [sp, #44]	@ 0x2c
 8014272:	9209      	str	r2, [sp, #36]	@ 0x24
 8014274:	9402      	str	r4, [sp, #8]
 8014276:	6803      	ldr	r3, [r0, #0]
 8014278:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801427a:	4798      	blx	r3
 801427c:	4607      	mov	r7, r0
 801427e:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 8014282:	fa5f f884 	uxtb.w	r8, r4
 8014286:	7a1a      	ldrb	r2, [r3, #8]
 8014288:	4542      	cmp	r2, r8
 801428a:	f240 809f 	bls.w	80143cc <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x19c>
 801428e:	220c      	movs	r2, #12
 8014290:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8014294:	4631      	mov	r1, r6
 8014296:	fb02 f808 	mul.w	r8, r2, r8
 801429a:	eb09 0a08 	add.w	sl, r9, r8
 801429e:	f10a 0a02 	add.w	sl, sl, #2
 80142a2:	4650      	mov	r0, sl
 80142a4:	f7ff fe22 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 80142a8:	2800      	cmp	r0, #0
 80142aa:	f000 808a 	beq.w	80143c2 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 80142ae:	f819 1008 	ldrb.w	r1, [r9, r8]
 80142b2:	4628      	mov	r0, r5
 80142b4:	f7ff ffa8 	bl	8014208 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 80142b8:	4681      	mov	r9, r0
 80142ba:	2800      	cmp	r0, #0
 80142bc:	f000 8081 	beq.w	80143c2 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x192>
 80142c0:	f8da 0000 	ldr.w	r0, [sl]
 80142c4:	ab03      	add	r3, sp, #12
 80142c6:	f8da 1004 	ldr.w	r1, [sl, #4]
 80142ca:	c303      	stmia	r3!, {r0, r1}
 80142cc:	f9bd 2012 	ldrsh.w	r2, [sp, #18]
 80142d0:	2102      	movs	r1, #2
 80142d2:	f8bd 800e 	ldrh.w	r8, [sp, #14]
 80142d6:	1bd3      	subs	r3, r2, r7
 80142d8:	fb93 f3f1 	sdiv	r3, r3, r1
 80142dc:	b29b      	uxth	r3, r3
 80142de:	4498      	add	r8, r3
 80142e0:	1ad3      	subs	r3, r2, r3
 80142e2:	fa1f f888 	uxth.w	r8, r8
 80142e6:	f8ad 3012 	strh.w	r3, [sp, #18]
 80142ea:	ab05      	add	r3, sp, #20
 80142ec:	f8da 1004 	ldr.w	r1, [sl, #4]
 80142f0:	f8ad 800e 	strh.w	r8, [sp, #14]
 80142f4:	f8da 0000 	ldr.w	r0, [sl]
 80142f8:	c303      	stmia	r3!, {r0, r1}
 80142fa:	4631      	mov	r1, r6
 80142fc:	a805      	add	r0, sp, #20
 80142fe:	f7ff fdf5 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014302:	2800      	cmp	r0, #0
 8014304:	d05f      	beq.n	80143c6 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x196>
 8014306:	f9bd 0014 	ldrsh.w	r0, [sp, #20]
 801430a:	f9b6 2000 	ldrsh.w	r2, [r6]
 801430e:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8014312:	4686      	mov	lr, r0
 8014314:	4290      	cmp	r0, r2
 8014316:	f9bd 1016 	ldrsh.w	r1, [sp, #22]
 801431a:	4450      	add	r0, sl
 801431c:	f8b6 a004 	ldrh.w	sl, [r6, #4]
 8014320:	bfb8      	it	lt
 8014322:	4696      	movlt	lr, r2
 8014324:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8014328:	4452      	add	r2, sl
 801432a:	b280      	uxth	r0, r0
 801432c:	4299      	cmp	r1, r3
 801432e:	468c      	mov	ip, r1
 8014330:	b292      	uxth	r2, r2
 8014332:	f8ad e014 	strh.w	lr, [sp, #20]
 8014336:	fa0f fb80 	sxth.w	fp, r0
 801433a:	bfb8      	it	lt
 801433c:	469c      	movlt	ip, r3
 801433e:	fa0f fa82 	sxth.w	sl, r2
 8014342:	f8ad c016 	strh.w	ip, [sp, #22]
 8014346:	45d3      	cmp	fp, sl
 8014348:	bfb8      	it	lt
 801434a:	4602      	movlt	r2, r0
 801434c:	eba2 020e 	sub.w	r2, r2, lr
 8014350:	f8ad 2018 	strh.w	r2, [sp, #24]
 8014354:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8014358:	4411      	add	r1, r2
 801435a:	88f2      	ldrh	r2, [r6, #6]
 801435c:	4413      	add	r3, r2
 801435e:	b289      	uxth	r1, r1
 8014360:	b29b      	uxth	r3, r3
 8014362:	b208      	sxth	r0, r1
 8014364:	b21a      	sxth	r2, r3
 8014366:	4290      	cmp	r0, r2
 8014368:	bfb8      	it	lt
 801436a:	460b      	movlt	r3, r1
 801436c:	eba3 030c 	sub.w	r3, r3, ip
 8014370:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014374:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8014378:	4628      	mov	r0, r5
 801437a:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 801437e:	f8ad 9008 	strh.w	r9, [sp, #8]
 8014382:	1a9b      	subs	r3, r3, r2
 8014384:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014388:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 801438c:	eba3 0808 	sub.w	r8, r3, r8
 8014390:	682b      	ldr	r3, [r5, #0]
 8014392:	f8ad 8016 	strh.w	r8, [sp, #22]
 8014396:	f10d 080c 	add.w	r8, sp, #12
 801439a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801439c:	4641      	mov	r1, r8
 801439e:	4798      	blx	r3
 80143a0:	4b0c      	ldr	r3, [pc, #48]	@ (80143d4 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x1a4>)
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 80143a8:	b10a      	cbz	r2, 80143ae <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x17e>
 80143aa:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 80143ac:	b900      	cbnz	r0, 80143b0 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x180>
 80143ae:	6898      	ldr	r0, [r3, #8]
 80143b0:	ab02      	add	r3, sp, #8
 80143b2:	9301      	str	r3, [sp, #4]
 80143b4:	ab07      	add	r3, sp, #28
 80143b6:	9300      	str	r3, [sp, #0]
 80143b8:	ab05      	add	r3, sp, #20
 80143ba:	e898 0006 	ldmia.w	r8, {r1, r2}
 80143be:	f7f0 f815 	bl	80043ec <_ZN8touchgfx3LCD10drawStringENS_4RectERKS1_RKNS0_13StringVisualsEPKtz>
 80143c2:	3401      	adds	r4, #1
 80143c4:	e75b      	b.n	801427e <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x4e>
 80143c6:	e9cd 0005 	strd	r0, r0, [sp, #20]
 80143ca:	e7d3      	b.n	8014374 <_ZNK8touchgfx8Keyboard4drawERKNS_4RectE+0x144>
 80143cc:	b00d      	add	sp, #52	@ 0x34
 80143ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80143d2:	bf00      	nop
 80143d4:	24025e20 	.word	0x24025e20

080143d8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE>:
 80143d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80143dc:	790d      	ldrb	r5, [r1, #4]
 80143de:	b08b      	sub	sp, #44	@ 0x2c
 80143e0:	4604      	mov	r4, r0
 80143e2:	2d01      	cmp	r5, #1
 80143e4:	d108      	bne.n	80143f8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 80143e6:	f890 30e4 	ldrb.w	r3, [r0, #228]	@ 0xe4
 80143ea:	b12b      	cbz	r3, 80143f8 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x20>
 80143ec:	2300      	movs	r3, #0
 80143ee:	f884 30e4 	strb.w	r3, [r4, #228]	@ 0xe4
 80143f2:	b00b      	add	sp, #44	@ 0x2c
 80143f4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80143f8:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 80143fc:	2700      	movs	r7, #0
 80143fe:	f9b1 9008 	ldrsh.w	r9, [r1, #8]
 8014402:	a806      	add	r0, sp, #24
 8014404:	4642      	mov	r2, r8
 8014406:	4621      	mov	r1, r4
 8014408:	464b      	mov	r3, r9
 801440a:	e9cd 7701 	strd	r7, r7, [sp, #4]
 801440e:	f7ff fecb 	bl	80141a8 <_ZNK8touchgfx8Keyboard29getCallbackAreaForCoordinatesEss>
 8014412:	9e08      	ldr	r6, [sp, #32]
 8014414:	2e00      	cmp	r6, #0
 8014416:	d049      	beq.n	80144ac <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xd4>
 8014418:	2d00      	cmp	r5, #0
 801441a:	d133      	bne.n	8014484 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xac>
 801441c:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 8014420:	f9bd 1018 	ldrsh.w	r1, [sp, #24]
 8014424:	f9bd 201a 	ldrsh.w	r2, [sp, #26]
 8014428:	4630      	mov	r0, r6
 801442a:	f7f0 f9cb 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 801442e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	@ 0x24
 8014432:	a90a      	add	r1, sp, #40	@ 0x28
 8014434:	f821 3d1c 	strh.w	r3, [r1, #-28]!
 8014438:	4630      	mov	r0, r6
 801443a:	f7ff f8c3 	bl	80135c4 <_ZN8touchgfx5Image9setBitmapERKNS_6BitmapE>
 801443e:	2301      	movs	r3, #1
 8014440:	4622      	mov	r2, r4
 8014442:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8014446:	ab01      	add	r3, sp, #4
 8014448:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 801444c:	6851      	ldr	r1, [r2, #4]
 801444e:	c303      	stmia	r3!, {r0, r1}
 8014450:	6823      	ldr	r3, [r4, #0]
 8014452:	a901      	add	r1, sp, #4
 8014454:	4620      	mov	r0, r4
 8014456:	691b      	ldr	r3, [r3, #16]
 8014458:	4798      	blx	r3
 801445a:	1e6b      	subs	r3, r5, #1
 801445c:	2b01      	cmp	r3, #1
 801445e:	d8c8      	bhi.n	80143f2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8014460:	4622      	mov	r2, r4
 8014462:	ab01      	add	r3, sp, #4
 8014464:	f852 0fbc 	ldr.w	r0, [r2, #188]!
 8014468:	6851      	ldr	r1, [r2, #4]
 801446a:	c303      	stmia	r3!, {r0, r1}
 801446c:	2300      	movs	r3, #0
 801446e:	a901      	add	r1, sp, #4
 8014470:	4620      	mov	r0, r4
 8014472:	f884 30dd 	strb.w	r3, [r4, #221]	@ 0xdd
 8014476:	6823      	ldr	r3, [r4, #0]
 8014478:	691b      	ldr	r3, [r3, #16]
 801447a:	4798      	blx	r3
 801447c:	2d02      	cmp	r5, #2
 801447e:	d1b8      	bne.n	80143f2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x1a>
 8014480:	2301      	movs	r3, #1
 8014482:	e7b4      	b.n	80143ee <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x16>
 8014484:	2d01      	cmp	r5, #1
 8014486:	d1e8      	bne.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014488:	6833      	ldr	r3, [r6, #0]
 801448a:	4630      	mov	r0, r6
 801448c:	68db      	ldr	r3, [r3, #12]
 801448e:	4798      	blx	r3
 8014490:	2800      	cmp	r0, #0
 8014492:	d0e5      	beq.n	8014460 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 8014494:	6833      	ldr	r3, [r6, #0]
 8014496:	4630      	mov	r0, r6
 8014498:	689b      	ldr	r3, [r3, #8]
 801449a:	4798      	blx	r3
 801449c:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801449e:	2800      	cmp	r0, #0
 80144a0:	d0de      	beq.n	8014460 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x88>
 80144a2:	6803      	ldr	r3, [r0, #0]
 80144a4:	4639      	mov	r1, r7
 80144a6:	689b      	ldr	r3, [r3, #8]
 80144a8:	4798      	blx	r3
 80144aa:	e7d6      	b.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144ac:	4621      	mov	r1, r4
 80144ae:	464b      	mov	r3, r9
 80144b0:	4642      	mov	r2, r8
 80144b2:	a803      	add	r0, sp, #12
 80144b4:	f7ff fe4e 	bl	8014154 <_ZNK8touchgfx8Keyboard20getKeyForCoordinatesEss>
 80144b8:	f89d 100c 	ldrb.w	r1, [sp, #12]
 80144bc:	b985      	cbnz	r5, 80144e0 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x108>
 80144be:	2900      	cmp	r1, #0
 80144c0:	d0cb      	beq.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144c2:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
 80144c6:	f9bd 100e 	ldrsh.w	r1, [sp, #14]
 80144ca:	f9bd 2010 	ldrsh.w	r2, [sp, #16]
 80144ce:	4630      	mov	r0, r6
 80144d0:	f7f0 f978 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 80144d4:	f8bd 3016 	ldrh.w	r3, [sp, #22]
 80144d8:	a90a      	add	r1, sp, #40	@ 0x28
 80144da:	f821 3d28 	strh.w	r3, [r1, #-40]!
 80144de:	e7ab      	b.n	8014438 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x60>
 80144e0:	2d01      	cmp	r5, #1
 80144e2:	d1ba      	bne.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144e4:	2900      	cmp	r1, #0
 80144e6:	d0b8      	beq.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144e8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80144ea:	2b00      	cmp	r3, #0
 80144ec:	d0b5      	beq.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144ee:	4620      	mov	r0, r4
 80144f0:	f7ff fe8a 	bl	8014208 <_ZNK8touchgfx8Keyboard13getCharForKeyEh>
 80144f4:	4607      	mov	r7, r0
 80144f6:	2800      	cmp	r0, #0
 80144f8:	d0af      	beq.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 80144fa:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 80144fc:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80144fe:	3b01      	subs	r3, #1
 8014500:	429a      	cmp	r2, r3
 8014502:	daaa      	bge.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>
 8014504:	f104 0864 	add.w	r8, r4, #100	@ 0x64
 8014508:	4640      	mov	r0, r8
 801450a:	f7ef f980 	bl	800380e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 801450e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014510:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8014512:	4640      	mov	r0, r8
 8014514:	1c59      	adds	r1, r3, #1
 8014516:	86e1      	strh	r1, [r4, #54]	@ 0x36
 8014518:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801451c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 801451e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8014520:	f823 6012 	strh.w	r6, [r3, r2, lsl #1]
 8014524:	f7ef f973 	bl	800380e <_ZNK8touchgfx8Drawable17invalidateContentEv>
 8014528:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 801452a:	2800      	cmp	r0, #0
 801452c:	d1b9      	bne.n	80144a2 <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0xca>
 801452e:	e794      	b.n	801445a <_ZN8touchgfx8Keyboard16handleClickEventERKNS_10ClickEventE+0x82>

08014530 <_ZN8touchgfx8Keyboard17setBufferPositionEt>:
 8014530:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014532:	3064      	adds	r0, #100	@ 0x64
 8014534:	f003 bbe3 	b.w	8017cfe <_ZNK8touchgfx8Drawable10invalidateEv>

08014538 <_ZN8touchgfx8Keyboard17setKeymappingListEPKNS0_14KeyMappingListE>:
 8014538:	6803      	ldr	r3, [r0, #0]
 801453a:	f8c0 10b4 	str.w	r1, [r0, #180]	@ 0xb4
 801453e:	695b      	ldr	r3, [r3, #20]
 8014540:	4718      	bx	r3

08014542 <_ZN8touchgfx7OutlineD1Ev>:
 8014542:	4770      	bx	lr

08014544 <_ZN8touchgfx7OutlineD0Ev>:
 8014544:	b510      	push	{r4, lr}
 8014546:	4604      	mov	r4, r0
 8014548:	2130      	movs	r1, #48	@ 0x30
 801454a:	f011 fd63 	bl	8026014 <_ZdlPvj>
 801454e:	4620      	mov	r0, r4
 8014550:	bd10      	pop	{r4, pc}

08014552 <_ZN8touchgfx7Outline5resetEv>:
 8014552:	b510      	push	{r4, lr}
 8014554:	4604      	mov	r4, r0
 8014556:	f000 fe71 	bl	801523c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 801455a:	60e0      	str	r0, [r4, #12]
 801455c:	f000 fe74 	bl	8015248 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 8014560:	68e3      	ldr	r3, [r4, #12]
 8014562:	08c0      	lsrs	r0, r0, #3
 8014564:	2200      	movs	r2, #0
 8014566:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 801456a:	6123      	str	r3, [r4, #16]
 801456c:	3801      	subs	r0, #1
 801456e:	60a2      	str	r2, [r4, #8]
 8014570:	6060      	str	r0, [r4, #4]
 8014572:	8019      	strh	r1, [r3, #0]
 8014574:	8059      	strh	r1, [r3, #2]
 8014576:	809a      	strh	r2, [r3, #4]
 8014578:	80da      	strh	r2, [r3, #6]
 801457a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801457c:	f023 0301 	bic.w	r3, r3, #1
 8014580:	f043 0302 	orr.w	r3, r3, #2
 8014584:	6263      	str	r3, [r4, #36]	@ 0x24
 8014586:	bd10      	pop	{r4, pc}

08014588 <_ZN8touchgfx7OutlineC1Ev>:
 8014588:	4b0a      	ldr	r3, [pc, #40]	@ (80145b4 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 801458a:	b510      	push	{r4, lr}
 801458c:	6003      	str	r3, [r0, #0]
 801458e:	2300      	movs	r3, #0
 8014590:	4604      	mov	r4, r0
 8014592:	6243      	str	r3, [r0, #36]	@ 0x24
 8014594:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8014598:	e9c0 3303 	strd	r3, r3, [r0, #12]
 801459c:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80145a0:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80145a4:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80145a8:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80145ac:	f7ff ffd1 	bl	8014552 <_ZN8touchgfx7Outline5resetEv>
 80145b0:	4620      	mov	r0, r4
 80145b2:	bd10      	pop	{r4, pc}
 80145b4:	0802b15c 	.word	0x0802b15c

080145b8 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80145b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80145bc:	b093      	sub	sp, #76	@ 0x4c
 80145be:	1156      	asrs	r6, r2, #5
 80145c0:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80145c2:	9305      	str	r3, [sp, #20]
 80145c4:	1153      	asrs	r3, r2, #5
 80145c6:	f004 051f 	and.w	r5, r4, #31
 80145ca:	9303      	str	r3, [sp, #12]
 80145cc:	1163      	asrs	r3, r4, #5
 80145ce:	9504      	str	r5, [sp, #16]
 80145d0:	1165      	asrs	r5, r4, #5
 80145d2:	9306      	str	r3, [sp, #24]
 80145d4:	f002 031f 	and.w	r3, r2, #31
 80145d8:	42ae      	cmp	r6, r5
 80145da:	f040 80f4 	bne.w	80147c6 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 80145de:	9c04      	ldr	r4, [sp, #16]
 80145e0:	9a05      	ldr	r2, [sp, #20]
 80145e2:	42a3      	cmp	r3, r4
 80145e4:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80145e8:	6902      	ldr	r2, [r0, #16]
 80145ea:	d125      	bne.n	8014638 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80145ec:	f9b2 3000 	ldrsh.w	r3, [r2]
 80145f0:	459e      	cmp	lr, r3
 80145f2:	d103      	bne.n	80145fc <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80145f4:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80145f8:	429e      	cmp	r6, r3
 80145fa:	d035      	beq.n	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80145fc:	88d1      	ldrh	r1, [r2, #6]
 80145fe:	8893      	ldrh	r3, [r2, #4]
 8014600:	430b      	orrs	r3, r1
 8014602:	d010      	beq.n	8014626 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014604:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8014608:	2b00      	cmp	r3, #0
 801460a:	db0c      	blt.n	8014626 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801460c:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801460e:	428b      	cmp	r3, r1
 8014610:	da09      	bge.n	8014626 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8014612:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014616:	428b      	cmp	r3, r1
 8014618:	f103 0301 	add.w	r3, r3, #1
 801461c:	bf38      	it	cc
 801461e:	3208      	addcc	r2, #8
 8014620:	6083      	str	r3, [r0, #8]
 8014622:	bf38      	it	cc
 8014624:	6102      	strcc	r2, [r0, #16]
 8014626:	6903      	ldr	r3, [r0, #16]
 8014628:	9a03      	ldr	r2, [sp, #12]
 801462a:	f8a3 e000 	strh.w	lr, [r3]
 801462e:	805a      	strh	r2, [r3, #2]
 8014630:	2200      	movs	r2, #0
 8014632:	809a      	strh	r2, [r3, #4]
 8014634:	80da      	strh	r2, [r3, #6]
 8014636:	e017      	b.n	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014638:	9c05      	ldr	r4, [sp, #20]
 801463a:	114e      	asrs	r6, r1, #5
 801463c:	f001 0c1f 	and.w	ip, r1, #31
 8014640:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8014644:	f004 041f 	and.w	r4, r4, #31
 8014648:	4576      	cmp	r6, lr
 801464a:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801464e:	9402      	str	r4, [sp, #8]
 8014650:	9c04      	ldr	r4, [sp, #16]
 8014652:	eba4 0403 	sub.w	r4, r4, r3
 8014656:	d10a      	bne.n	801466e <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8014658:	9b02      	ldr	r3, [sp, #8]
 801465a:	44a0      	add	r8, r4
 801465c:	449c      	add	ip, r3
 801465e:	f8a2 8004 	strh.w	r8, [r2, #4]
 8014662:	fb04 a40c 	mla	r4, r4, ip, sl
 8014666:	80d4      	strh	r4, [r2, #6]
 8014668:	b013      	add	sp, #76	@ 0x4c
 801466a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801466e:	9d05      	ldr	r5, [sp, #20]
 8014670:	1a69      	subs	r1, r5, r1
 8014672:	bf51      	iteee	pl
 8014674:	f1cc 0520 	rsbpl	r5, ip, #32
 8014678:	fb04 f40c 	mulmi.w	r4, r4, ip
 801467c:	4249      	negmi	r1, r1
 801467e:	2500      	movmi	r5, #0
 8014680:	bf5d      	ittte	pl
 8014682:	436c      	mulpl	r4, r5
 8014684:	2520      	movpl	r5, #32
 8014686:	f04f 0901 	movpl.w	r9, #1
 801468a:	f04f 39ff 	movmi.w	r9, #4294967295
 801468e:	9501      	str	r5, [sp, #4]
 8014690:	9f01      	ldr	r7, [sp, #4]
 8014692:	444e      	add	r6, r9
 8014694:	fb94 f5f1 	sdiv	r5, r4, r1
 8014698:	fb01 4415 	mls	r4, r1, r5, r4
 801469c:	44bc      	add	ip, r7
 801469e:	2c00      	cmp	r4, #0
 80146a0:	bfbc      	itt	lt
 80146a2:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80146a6:	1864      	addlt	r4, r4, r1
 80146a8:	44a8      	add	r8, r5
 80146aa:	fb05 ac0c 	mla	ip, r5, ip, sl
 80146ae:	f8a2 8004 	strh.w	r8, [r2, #4]
 80146b2:	f8a2 c006 	strh.w	ip, [r2, #6]
 80146b6:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80146ba:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80146be:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80146c2:	ea58 0202 	orrs.w	r2, r8, r2
 80146c6:	d011      	beq.n	80146ec <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80146c8:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 80146cc:	f1b8 0f00 	cmp.w	r8, #0
 80146d0:	db0c      	blt.n	80146ec <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80146d2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 80146d4:	4590      	cmp	r8, r2
 80146d6:	da09      	bge.n	80146ec <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 80146d8:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 80146dc:	4590      	cmp	r8, r2
 80146de:	bf3c      	itt	cc
 80146e0:	f10c 0208 	addcc.w	r2, ip, #8
 80146e4:	6102      	strcc	r2, [r0, #16]
 80146e6:	f108 0201 	add.w	r2, r8, #1
 80146ea:	6082      	str	r2, [r0, #8]
 80146ec:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80146f0:	2700      	movs	r7, #0
 80146f2:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80146f6:	45b6      	cmp	lr, r6
 80146f8:	f8ac 6000 	strh.w	r6, [ip]
 80146fc:	442b      	add	r3, r5
 80146fe:	f8ac 2002 	strh.w	r2, [ip, #2]
 8014702:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014706:	f8ac 7006 	strh.w	r7, [ip, #6]
 801470a:	d04b      	beq.n	80147a4 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 801470c:	9f04      	ldr	r7, [sp, #16]
 801470e:	1a64      	subs	r4, r4, r1
 8014710:	f04f 0a00 	mov.w	sl, #0
 8014714:	1aff      	subs	r7, r7, r3
 8014716:	443d      	add	r5, r7
 8014718:	016d      	lsls	r5, r5, #5
 801471a:	fb95 f8f1 	sdiv	r8, r5, r1
 801471e:	fb01 5518 	mls	r5, r1, r8, r5
 8014722:	2d00      	cmp	r5, #0
 8014724:	bfbc      	itt	lt
 8014726:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801472a:	186d      	addlt	r5, r5, r1
 801472c:	f108 0701 	add.w	r7, r8, #1
 8014730:	9703      	str	r7, [sp, #12]
 8014732:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014736:	1964      	adds	r4, r4, r5
 8014738:	444e      	add	r6, r9
 801473a:	bf54      	ite	pl
 801473c:	9f03      	ldrpl	r7, [sp, #12]
 801473e:	4647      	movmi	r7, r8
 8014740:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014744:	bf58      	it	pl
 8014746:	1a64      	subpl	r4, r4, r1
 8014748:	443b      	add	r3, r7
 801474a:	44bb      	add	fp, r7
 801474c:	f8ac b004 	strh.w	fp, [ip, #4]
 8014750:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014754:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014758:	f8ac b006 	strh.w	fp, [ip, #6]
 801475c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014760:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014764:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014768:	ea5b 0707 	orrs.w	r7, fp, r7
 801476c:	d011      	beq.n	8014792 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801476e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014772:	f1bb 0f00 	cmp.w	fp, #0
 8014776:	db0c      	blt.n	8014792 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8014778:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801477a:	45bb      	cmp	fp, r7
 801477c:	da09      	bge.n	8014792 <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801477e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014782:	45bb      	cmp	fp, r7
 8014784:	bf3c      	itt	cc
 8014786:	f10c 0708 	addcc.w	r7, ip, #8
 801478a:	6107      	strcc	r7, [r0, #16]
 801478c:	f10b 0701 	add.w	r7, fp, #1
 8014790:	6087      	str	r7, [r0, #8]
 8014792:	6907      	ldr	r7, [r0, #16]
 8014794:	45b6      	cmp	lr, r6
 8014796:	803e      	strh	r6, [r7, #0]
 8014798:	807a      	strh	r2, [r7, #2]
 801479a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801479e:	f8a7 a006 	strh.w	sl, [r7, #6]
 80147a2:	d1c6      	bne.n	8014732 <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80147a4:	9a04      	ldr	r2, [sp, #16]
 80147a6:	1ad3      	subs	r3, r2, r3
 80147a8:	6902      	ldr	r2, [r0, #16]
 80147aa:	8891      	ldrh	r1, [r2, #4]
 80147ac:	88d6      	ldrh	r6, [r2, #6]
 80147ae:	4419      	add	r1, r3
 80147b0:	8091      	strh	r1, [r2, #4]
 80147b2:	9902      	ldr	r1, [sp, #8]
 80147b4:	f101 0c20 	add.w	ip, r1, #32
 80147b8:	9901      	ldr	r1, [sp, #4]
 80147ba:	ebac 0c01 	sub.w	ip, ip, r1
 80147be:	fb03 630c 	mla	r3, r3, ip, r6
 80147c2:	80d3      	strh	r3, [r2, #6]
 80147c4:	e750      	b.n	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80147c6:	9d05      	ldr	r5, [sp, #20]
 80147c8:	1aa2      	subs	r2, r4, r2
 80147ca:	eba5 0501 	sub.w	r5, r5, r1
 80147ce:	9202      	str	r2, [sp, #8]
 80147d0:	9508      	str	r5, [sp, #32]
 80147d2:	f140 8128 	bpl.w	8014a26 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 80147d6:	9a03      	ldr	r2, [sp, #12]
 80147d8:	2a00      	cmp	r2, #0
 80147da:	f6ff af45 	blt.w	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80147de:	9a02      	ldr	r2, [sp, #8]
 80147e0:	f04f 34ff 	mov.w	r4, #4294967295
 80147e4:	4252      	negs	r2, r2
 80147e6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80147e8:	2400      	movs	r4, #0
 80147ea:	9202      	str	r2, [sp, #8]
 80147ec:	9a06      	ldr	r2, [sp, #24]
 80147ee:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80147f2:	9206      	str	r2, [sp, #24]
 80147f4:	462a      	mov	r2, r5
 80147f6:	435a      	muls	r2, r3
 80147f8:	9401      	str	r4, [sp, #4]
 80147fa:	9c02      	ldr	r4, [sp, #8]
 80147fc:	9d02      	ldr	r5, [sp, #8]
 80147fe:	fb92 f4f4 	sdiv	r4, r2, r4
 8014802:	fb05 2214 	mls	r2, r5, r4, r2
 8014806:	2a00      	cmp	r2, #0
 8014808:	9207      	str	r2, [sp, #28]
 801480a:	bfbc      	itt	lt
 801480c:	1952      	addlt	r2, r2, r5
 801480e:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014812:	6905      	ldr	r5, [r0, #16]
 8014814:	bfb8      	it	lt
 8014816:	9207      	strlt	r2, [sp, #28]
 8014818:	eb04 0901 	add.w	r9, r4, r1
 801481c:	9a01      	ldr	r2, [sp, #4]
 801481e:	ea4f 1669 	mov.w	r6, r9, asr #5
 8014822:	429a      	cmp	r2, r3
 8014824:	f040 8111 	bne.w	8014a4a <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8014828:	f9b5 3000 	ldrsh.w	r3, [r5]
 801482c:	429e      	cmp	r6, r3
 801482e:	d104      	bne.n	801483a <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8014830:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8014834:	9a03      	ldr	r2, [sp, #12]
 8014836:	429a      	cmp	r2, r3
 8014838:	d01b      	beq.n	8014872 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 801483a:	88ea      	ldrh	r2, [r5, #6]
 801483c:	88ab      	ldrh	r3, [r5, #4]
 801483e:	4313      	orrs	r3, r2
 8014840:	d010      	beq.n	8014864 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014842:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8014846:	2a00      	cmp	r2, #0
 8014848:	db0c      	blt.n	8014864 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 801484a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801484c:	429a      	cmp	r2, r3
 801484e:	da09      	bge.n	8014864 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8014850:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8014854:	429a      	cmp	r2, r3
 8014856:	f102 0201 	add.w	r2, r2, #1
 801485a:	bf38      	it	cc
 801485c:	3508      	addcc	r5, #8
 801485e:	6082      	str	r2, [r0, #8]
 8014860:	bf38      	it	cc
 8014862:	6105      	strcc	r5, [r0, #16]
 8014864:	6903      	ldr	r3, [r0, #16]
 8014866:	9a03      	ldr	r2, [sp, #12]
 8014868:	801e      	strh	r6, [r3, #0]
 801486a:	805a      	strh	r2, [r3, #2]
 801486c:	2200      	movs	r2, #0
 801486e:	809a      	strh	r2, [r3, #4]
 8014870:	80da      	strh	r2, [r3, #6]
 8014872:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8014874:	9a03      	ldr	r2, [sp, #12]
 8014876:	6901      	ldr	r1, [r0, #16]
 8014878:	441a      	add	r2, r3
 801487a:	f9b1 3000 	ldrsh.w	r3, [r1]
 801487e:	42b3      	cmp	r3, r6
 8014880:	d103      	bne.n	801488a <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8014882:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8014886:	429a      	cmp	r2, r3
 8014888:	d01a      	beq.n	80148c0 <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 801488a:	88cc      	ldrh	r4, [r1, #6]
 801488c:	888b      	ldrh	r3, [r1, #4]
 801488e:	4323      	orrs	r3, r4
 8014890:	d010      	beq.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8014892:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8014896:	2c00      	cmp	r4, #0
 8014898:	db0c      	blt.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 801489a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801489c:	429c      	cmp	r4, r3
 801489e:	da09      	bge.n	80148b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 80148a0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80148a4:	429c      	cmp	r4, r3
 80148a6:	f104 0401 	add.w	r4, r4, #1
 80148aa:	bf38      	it	cc
 80148ac:	3108      	addcc	r1, #8
 80148ae:	6084      	str	r4, [r0, #8]
 80148b0:	bf38      	it	cc
 80148b2:	6101      	strcc	r1, [r0, #16]
 80148b4:	6903      	ldr	r3, [r0, #16]
 80148b6:	2100      	movs	r1, #0
 80148b8:	801e      	strh	r6, [r3, #0]
 80148ba:	805a      	strh	r2, [r3, #2]
 80148bc:	8099      	strh	r1, [r3, #4]
 80148be:	80d9      	strh	r1, [r3, #6]
 80148c0:	9b06      	ldr	r3, [sp, #24]
 80148c2:	4293      	cmp	r3, r2
 80148c4:	f000 8082 	beq.w	80149cc <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 80148c8:	9b08      	ldr	r3, [sp, #32]
 80148ca:	9902      	ldr	r1, [sp, #8]
 80148cc:	015b      	lsls	r3, r3, #5
 80148ce:	9c02      	ldr	r4, [sp, #8]
 80148d0:	fb93 f1f1 	sdiv	r1, r3, r1
 80148d4:	fb04 3311 	mls	r3, r4, r1, r3
 80148d8:	9103      	str	r1, [sp, #12]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	9308      	str	r3, [sp, #32]
 80148de:	da04      	bge.n	80148ea <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 80148e0:	1e4b      	subs	r3, r1, #1
 80148e2:	9303      	str	r3, [sp, #12]
 80148e4:	9b08      	ldr	r3, [sp, #32]
 80148e6:	4423      	add	r3, r4
 80148e8:	9308      	str	r3, [sp, #32]
 80148ea:	9b07      	ldr	r3, [sp, #28]
 80148ec:	464f      	mov	r7, r9
 80148ee:	9902      	ldr	r1, [sp, #8]
 80148f0:	2600      	movs	r6, #0
 80148f2:	1a5b      	subs	r3, r3, r1
 80148f4:	9307      	str	r3, [sp, #28]
 80148f6:	9b01      	ldr	r3, [sp, #4]
 80148f8:	f1c3 0320 	rsb	r3, r3, #32
 80148fc:	930e      	str	r3, [sp, #56]	@ 0x38
 80148fe:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8014900:	9b01      	ldr	r3, [sp, #4]
 8014902:	1a5b      	subs	r3, r3, r1
 8014904:	930a      	str	r3, [sp, #40]	@ 0x28
 8014906:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 801490a:	185b      	adds	r3, r3, r1
 801490c:	bf58      	it	pl
 801490e:	9902      	ldrpl	r1, [sp, #8]
 8014910:	9307      	str	r3, [sp, #28]
 8014912:	bf57      	itett	pl
 8014914:	1a5b      	subpl	r3, r3, r1
 8014916:	9903      	ldrmi	r1, [sp, #12]
 8014918:	9307      	strpl	r3, [sp, #28]
 801491a:	9b03      	ldrpl	r3, [sp, #12]
 801491c:	bf58      	it	pl
 801491e:	1c59      	addpl	r1, r3, #1
 8014920:	2a00      	cmp	r2, #0
 8014922:	4489      	add	r9, r1
 8014924:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8014928:	db2e      	blt.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 801492a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801492c:	4293      	cmp	r3, r2
 801492e:	dd2b      	ble.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014930:	9c01      	ldr	r4, [sp, #4]
 8014932:	6905      	ldr	r5, [r0, #16]
 8014934:	46a0      	mov	r8, r4
 8014936:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8014938:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 801493c:	45a0      	cmp	r8, r4
 801493e:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8014942:	f040 814c 	bne.w	8014bde <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8014946:	f9b5 1000 	ldrsh.w	r1, [r5]
 801494a:	4551      	cmp	r1, sl
 801494c:	d103      	bne.n	8014956 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 801494e:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014952:	4291      	cmp	r1, r2
 8014954:	d018      	beq.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014956:	ea5c 010e 	orrs.w	r1, ip, lr
 801495a:	d00f      	beq.n	801497c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 801495c:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8014960:	2900      	cmp	r1, #0
 8014962:	db0b      	blt.n	801497c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014964:	428b      	cmp	r3, r1
 8014966:	dd09      	ble.n	801497c <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8014968:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 801496c:	4299      	cmp	r1, r3
 801496e:	f101 0101 	add.w	r1, r1, #1
 8014972:	bf38      	it	cc
 8014974:	3508      	addcc	r5, #8
 8014976:	6081      	str	r1, [r0, #8]
 8014978:	bf38      	it	cc
 801497a:	6105      	strcc	r5, [r0, #16]
 801497c:	6903      	ldr	r3, [r0, #16]
 801497e:	f8a3 a000 	strh.w	sl, [r3]
 8014982:	805a      	strh	r2, [r3, #2]
 8014984:	809e      	strh	r6, [r3, #4]
 8014986:	80de      	strh	r6, [r3, #6]
 8014988:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801498a:	6901      	ldr	r1, [r0, #16]
 801498c:	441a      	add	r2, r3
 801498e:	88cc      	ldrh	r4, [r1, #6]
 8014990:	888b      	ldrh	r3, [r1, #4]
 8014992:	4323      	orrs	r3, r4
 8014994:	d010      	beq.n	80149b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8014996:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 801499a:	2c00      	cmp	r4, #0
 801499c:	db0c      	blt.n	80149b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 801499e:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80149a0:	429c      	cmp	r4, r3
 80149a2:	da09      	bge.n	80149b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 80149a4:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80149a8:	429c      	cmp	r4, r3
 80149aa:	f104 0401 	add.w	r4, r4, #1
 80149ae:	bf38      	it	cc
 80149b0:	3108      	addcc	r1, #8
 80149b2:	6084      	str	r4, [r0, #8]
 80149b4:	bf38      	it	cc
 80149b6:	6101      	strcc	r1, [r0, #16]
 80149b8:	6903      	ldr	r3, [r0, #16]
 80149ba:	464f      	mov	r7, r9
 80149bc:	f8a3 a000 	strh.w	sl, [r3]
 80149c0:	805a      	strh	r2, [r3, #2]
 80149c2:	809e      	strh	r6, [r3, #4]
 80149c4:	80de      	strh	r6, [r3, #6]
 80149c6:	9b06      	ldr	r3, [sp, #24]
 80149c8:	4293      	cmp	r3, r2
 80149ca:	d19c      	bne.n	8014906 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 80149cc:	9b01      	ldr	r3, [sp, #4]
 80149ce:	6907      	ldr	r7, [r0, #16]
 80149d0:	f1c3 0620 	rsb	r6, r3, #32
 80149d4:	9b05      	ldr	r3, [sp, #20]
 80149d6:	ea4f 1e63 	mov.w	lr, r3, asr #5
 80149da:	9b04      	ldr	r3, [sp, #16]
 80149dc:	429e      	cmp	r6, r3
 80149de:	f040 81c7 	bne.w	8014d70 <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 80149e2:	f9b7 3000 	ldrsh.w	r3, [r7]
 80149e6:	459e      	cmp	lr, r3
 80149e8:	d104      	bne.n	80149f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 80149ea:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80149ee:	429a      	cmp	r2, r3
 80149f0:	f43f ae3a 	beq.w	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80149f4:	88f9      	ldrh	r1, [r7, #6]
 80149f6:	88bb      	ldrh	r3, [r7, #4]
 80149f8:	430b      	orrs	r3, r1
 80149fa:	d010      	beq.n	8014a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 80149fc:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8014a00:	2b00      	cmp	r3, #0
 8014a02:	db0c      	blt.n	8014a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014a04:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8014a06:	428b      	cmp	r3, r1
 8014a08:	da09      	bge.n	8014a1e <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8014a0a:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8014a0e:	428b      	cmp	r3, r1
 8014a10:	f103 0301 	add.w	r3, r3, #1
 8014a14:	bf38      	it	cc
 8014a16:	3708      	addcc	r7, #8
 8014a18:	6083      	str	r3, [r0, #8]
 8014a1a:	bf38      	it	cc
 8014a1c:	6107      	strcc	r7, [r0, #16]
 8014a1e:	6903      	ldr	r3, [r0, #16]
 8014a20:	f8a3 e000 	strh.w	lr, [r3]
 8014a24:	e603      	b.n	801462e <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8014a26:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8014a28:	9c03      	ldr	r4, [sp, #12]
 8014a2a:	42a2      	cmp	r2, r4
 8014a2c:	f6ff ae1c 	blt.w	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014a30:	9c06      	ldr	r4, [sp, #24]
 8014a32:	42a2      	cmp	r2, r4
 8014a34:	9c08      	ldr	r4, [sp, #32]
 8014a36:	bfbc      	itt	lt
 8014a38:	3201      	addlt	r2, #1
 8014a3a:	9206      	strlt	r2, [sp, #24]
 8014a3c:	f1c3 0220 	rsb	r2, r3, #32
 8014a40:	4362      	muls	r2, r4
 8014a42:	2401      	movs	r4, #1
 8014a44:	940b      	str	r4, [sp, #44]	@ 0x2c
 8014a46:	2420      	movs	r4, #32
 8014a48:	e6d6      	b.n	80147f8 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8014a4a:	ea4f 1861 	mov.w	r8, r1, asr #5
 8014a4e:	f009 021f 	and.w	r2, r9, #31
 8014a52:	f001 011f 	and.w	r1, r1, #31
 8014a56:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8014a5a:	920c      	str	r2, [sp, #48]	@ 0x30
 8014a5c:	45b0      	cmp	r8, r6
 8014a5e:	9a01      	ldr	r2, [sp, #4]
 8014a60:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8014a64:	eba2 0203 	sub.w	r2, r2, r3
 8014a68:	d108      	bne.n	8014a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8014a6a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014a6c:	4496      	add	lr, r2
 8014a6e:	4419      	add	r1, r3
 8014a70:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014a74:	fb02 a101 	mla	r1, r2, r1, sl
 8014a78:	80e9      	strh	r1, [r5, #6]
 8014a7a:	e6fa      	b.n	8014872 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014a7c:	2c00      	cmp	r4, #0
 8014a7e:	f2c0 80a7 	blt.w	8014bd0 <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8014a82:	2701      	movs	r7, #1
 8014a84:	f1c1 0c20 	rsb	ip, r1, #32
 8014a88:	970a      	str	r7, [sp, #40]	@ 0x28
 8014a8a:	2720      	movs	r7, #32
 8014a8c:	fb02 f20c 	mul.w	r2, r2, ip
 8014a90:	9709      	str	r7, [sp, #36]	@ 0x24
 8014a92:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8014a94:	fb92 fcf4 	sdiv	ip, r2, r4
 8014a98:	fb04 221c 	mls	r2, r4, ip, r2
 8014a9c:	4439      	add	r1, r7
 8014a9e:	2a00      	cmp	r2, #0
 8014aa0:	bfbc      	itt	lt
 8014aa2:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8014aa6:	1912      	addlt	r2, r2, r4
 8014aa8:	fb0c a101 	mla	r1, ip, r1, sl
 8014aac:	44e6      	add	lr, ip
 8014aae:	80e9      	strh	r1, [r5, #6]
 8014ab0:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8014ab2:	f8a5 e004 	strh.w	lr, [r5, #4]
 8014ab6:	eb08 0501 	add.w	r5, r8, r1
 8014aba:	6901      	ldr	r1, [r0, #16]
 8014abc:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8014ac0:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8014ac4:	ea58 070e 	orrs.w	r7, r8, lr
 8014ac8:	d010      	beq.n	8014aec <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014aca:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8014ace:	f1be 0f00 	cmp.w	lr, #0
 8014ad2:	db0b      	blt.n	8014aec <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014ad4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014ad6:	45be      	cmp	lr, r7
 8014ad8:	da08      	bge.n	8014aec <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8014ada:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014ade:	45be      	cmp	lr, r7
 8014ae0:	bf3c      	itt	cc
 8014ae2:	3108      	addcc	r1, #8
 8014ae4:	6101      	strcc	r1, [r0, #16]
 8014ae6:	f10e 0101 	add.w	r1, lr, #1
 8014aea:	6081      	str	r1, [r0, #8]
 8014aec:	6901      	ldr	r1, [r0, #16]
 8014aee:	f04f 0e00 	mov.w	lr, #0
 8014af2:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8014af6:	42ae      	cmp	r6, r5
 8014af8:	800d      	strh	r5, [r1, #0]
 8014afa:	4463      	add	r3, ip
 8014afc:	f8a1 8002 	strh.w	r8, [r1, #2]
 8014b00:	f8a1 e004 	strh.w	lr, [r1, #4]
 8014b04:	f8a1 e006 	strh.w	lr, [r1, #6]
 8014b08:	d053      	beq.n	8014bb2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8014b0a:	9901      	ldr	r1, [sp, #4]
 8014b0c:	1b12      	subs	r2, r2, r4
 8014b0e:	1ac9      	subs	r1, r1, r3
 8014b10:	4461      	add	r1, ip
 8014b12:	0149      	lsls	r1, r1, #5
 8014b14:	fb91 fef4 	sdiv	lr, r1, r4
 8014b18:	fb04 111e 	mls	r1, r4, lr, r1
 8014b1c:	2900      	cmp	r1, #0
 8014b1e:	bfbc      	itt	lt
 8014b20:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8014b24:	1909      	addlt	r1, r1, r4
 8014b26:	f10e 0701 	add.w	r7, lr, #1
 8014b2a:	970d      	str	r7, [sp, #52]	@ 0x34
 8014b2c:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8014b30:	1852      	adds	r2, r2, r1
 8014b32:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8014b34:	bf54      	ite	pl
 8014b36:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8014b3a:	46f4      	movmi	ip, lr
 8014b3c:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8014b40:	bf58      	it	pl
 8014b42:	1b12      	subpl	r2, r2, r4
 8014b44:	4463      	add	r3, ip
 8014b46:	443d      	add	r5, r7
 8014b48:	44e3      	add	fp, ip
 8014b4a:	f8aa b004 	strh.w	fp, [sl, #4]
 8014b4e:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8014b52:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8014b56:	f8aa b006 	strh.w	fp, [sl, #6]
 8014b5a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014b5e:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014b62:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8014b66:	ea5b 070a 	orrs.w	r7, fp, sl
 8014b6a:	d014      	beq.n	8014b96 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014b6c:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8014b70:	f1ba 0f00 	cmp.w	sl, #0
 8014b74:	db0f      	blt.n	8014b96 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014b76:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014b78:	45ba      	cmp	sl, r7
 8014b7a:	da0c      	bge.n	8014b96 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8014b7c:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8014b80:	45ba      	cmp	sl, r7
 8014b82:	f10a 0a01 	add.w	sl, sl, #1
 8014b86:	bf38      	it	cc
 8014b88:	f10c 0c08 	addcc.w	ip, ip, #8
 8014b8c:	f8c0 a008 	str.w	sl, [r0, #8]
 8014b90:	bf38      	it	cc
 8014b92:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8014b96:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014b9a:	f04f 0700 	mov.w	r7, #0
 8014b9e:	42ae      	cmp	r6, r5
 8014ba0:	f8ac 5000 	strh.w	r5, [ip]
 8014ba4:	f8ac 8002 	strh.w	r8, [ip, #2]
 8014ba8:	f8ac 7004 	strh.w	r7, [ip, #4]
 8014bac:	f8ac 7006 	strh.w	r7, [ip, #6]
 8014bb0:	d1bc      	bne.n	8014b2c <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8014bb2:	6904      	ldr	r4, [r0, #16]
 8014bb4:	9a01      	ldr	r2, [sp, #4]
 8014bb6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014bb8:	1ad3      	subs	r3, r2, r3
 8014bba:	88a2      	ldrh	r2, [r4, #4]
 8014bbc:	3120      	adds	r1, #32
 8014bbe:	441a      	add	r2, r3
 8014bc0:	80a2      	strh	r2, [r4, #4]
 8014bc2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014bc4:	1a89      	subs	r1, r1, r2
 8014bc6:	88e2      	ldrh	r2, [r4, #6]
 8014bc8:	fb03 2301 	mla	r3, r3, r1, r2
 8014bcc:	80e3      	strh	r3, [r4, #6]
 8014bce:	e650      	b.n	8014872 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8014bd0:	f04f 37ff 	mov.w	r7, #4294967295
 8014bd4:	434a      	muls	r2, r1
 8014bd6:	4264      	negs	r4, r4
 8014bd8:	970a      	str	r7, [sp, #40]	@ 0x28
 8014bda:	2700      	movs	r7, #0
 8014bdc:	e758      	b.n	8014a90 <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8014bde:	ea4f 1867 	mov.w	r8, r7, asr #5
 8014be2:	f009 031f 	and.w	r3, r9, #31
 8014be6:	f007 071f 	and.w	r7, r7, #31
 8014bea:	fa1f fc8c 	uxth.w	ip, ip
 8014bee:	45d0      	cmp	r8, sl
 8014bf0:	930f      	str	r3, [sp, #60]	@ 0x3c
 8014bf2:	fa1f fe8e 	uxth.w	lr, lr
 8014bf6:	d10a      	bne.n	8014c0e <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8014bf8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014bfa:	449c      	add	ip, r3
 8014bfc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8014bfe:	441f      	add	r7, r3
 8014c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014c02:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014c06:	fb03 e707 	mla	r7, r3, r7, lr
 8014c0a:	80ef      	strh	r7, [r5, #6]
 8014c0c:	e6bc      	b.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014c0e:	2900      	cmp	r1, #0
 8014c10:	f2c0 80a6 	blt.w	8014d60 <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8014c14:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8014c16:	f1c7 0320 	rsb	r3, r7, #32
 8014c1a:	4363      	muls	r3, r4
 8014c1c:	2401      	movs	r4, #1
 8014c1e:	940d      	str	r4, [sp, #52]	@ 0x34
 8014c20:	2420      	movs	r4, #32
 8014c22:	940c      	str	r4, [sp, #48]	@ 0x30
 8014c24:	fb93 f4f1 	sdiv	r4, r3, r1
 8014c28:	fb01 3b14 	mls	fp, r1, r4, r3
 8014c2c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8014c2e:	f1bb 0f00 	cmp.w	fp, #0
 8014c32:	441f      	add	r7, r3
 8014c34:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8014c36:	bfbc      	itt	lt
 8014c38:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8014c3c:	448b      	addlt	fp, r1
 8014c3e:	fb04 e707 	mla	r7, r4, r7, lr
 8014c42:	44a4      	add	ip, r4
 8014c44:	80ef      	strh	r7, [r5, #6]
 8014c46:	f8a5 c004 	strh.w	ip, [r5, #4]
 8014c4a:	eb08 0503 	add.w	r5, r8, r3
 8014c4e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014c52:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8014c56:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014c5a:	ea5e 0307 	orrs.w	r3, lr, r7
 8014c5e:	d011      	beq.n	8014c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014c60:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8014c64:	f1be 0f00 	cmp.w	lr, #0
 8014c68:	db0c      	blt.n	8014c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014c6a:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014c6c:	45be      	cmp	lr, r7
 8014c6e:	da09      	bge.n	8014c84 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8014c70:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8014c74:	45be      	cmp	lr, r7
 8014c76:	bf3c      	itt	cc
 8014c78:	f10c 0708 	addcc.w	r7, ip, #8
 8014c7c:	6107      	strcc	r7, [r0, #16]
 8014c7e:	f10e 0701 	add.w	r7, lr, #1
 8014c82:	6087      	str	r7, [r0, #8]
 8014c84:	6907      	ldr	r7, [r0, #16]
 8014c86:	b213      	sxth	r3, r2
 8014c88:	4555      	cmp	r5, sl
 8014c8a:	9310      	str	r3, [sp, #64]	@ 0x40
 8014c8c:	807b      	strh	r3, [r7, #2]
 8014c8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8014c90:	803d      	strh	r5, [r7, #0]
 8014c92:	80be      	strh	r6, [r7, #4]
 8014c94:	eb04 0c03 	add.w	ip, r4, r3
 8014c98:	80fe      	strh	r6, [r7, #6]
 8014c9a:	d050      	beq.n	8014d3e <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8014c9c:	9b01      	ldr	r3, [sp, #4]
 8014c9e:	eba3 070c 	sub.w	r7, r3, ip
 8014ca2:	ebab 0301 	sub.w	r3, fp, r1
 8014ca6:	443c      	add	r4, r7
 8014ca8:	9309      	str	r3, [sp, #36]	@ 0x24
 8014caa:	0164      	lsls	r4, r4, #5
 8014cac:	fb94 f8f1 	sdiv	r8, r4, r1
 8014cb0:	fb01 4418 	mls	r4, r1, r8, r4
 8014cb4:	2c00      	cmp	r4, #0
 8014cb6:	bfbc      	itt	lt
 8014cb8:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014cbc:	1864      	addlt	r4, r4, r1
 8014cbe:	f108 0701 	add.w	r7, r8, #1
 8014cc2:	9711      	str	r7, [sp, #68]	@ 0x44
 8014cc4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014cc6:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014cca:	191b      	adds	r3, r3, r4
 8014ccc:	f8be b004 	ldrh.w	fp, [lr, #4]
 8014cd0:	bf54      	ite	pl
 8014cd2:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8014cd4:	4647      	movmi	r7, r8
 8014cd6:	9309      	str	r3, [sp, #36]	@ 0x24
 8014cd8:	bf58      	it	pl
 8014cda:	1a5b      	subpl	r3, r3, r1
 8014cdc:	44bb      	add	fp, r7
 8014cde:	44bc      	add	ip, r7
 8014ce0:	bf58      	it	pl
 8014ce2:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8014ce4:	f8ae b004 	strh.w	fp, [lr, #4]
 8014ce8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014cec:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014cf0:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8014cf2:	f8ae b006 	strh.w	fp, [lr, #6]
 8014cf6:	443d      	add	r5, r7
 8014cf8:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8014cfc:	f8be b006 	ldrh.w	fp, [lr, #6]
 8014d00:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8014d04:	ea5b 0307 	orrs.w	r3, fp, r7
 8014d08:	d011      	beq.n	8014d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014d0a:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8014d0e:	f1bb 0f00 	cmp.w	fp, #0
 8014d12:	db0c      	blt.n	8014d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014d14:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014d16:	45bb      	cmp	fp, r7
 8014d18:	da09      	bge.n	8014d2e <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8014d1a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014d1e:	45bb      	cmp	fp, r7
 8014d20:	bf3c      	itt	cc
 8014d22:	f10e 0708 	addcc.w	r7, lr, #8
 8014d26:	6107      	strcc	r7, [r0, #16]
 8014d28:	f10b 0701 	add.w	r7, fp, #1
 8014d2c:	6087      	str	r7, [r0, #8]
 8014d2e:	6907      	ldr	r7, [r0, #16]
 8014d30:	4555      	cmp	r5, sl
 8014d32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8014d34:	803d      	strh	r5, [r7, #0]
 8014d36:	807b      	strh	r3, [r7, #2]
 8014d38:	80be      	strh	r6, [r7, #4]
 8014d3a:	80fe      	strh	r6, [r7, #6]
 8014d3c:	d1c2      	bne.n	8014cc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8014d3e:	9b01      	ldr	r3, [sp, #4]
 8014d40:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8014d42:	eba3 0c0c 	sub.w	ip, r3, ip
 8014d46:	6903      	ldr	r3, [r0, #16]
 8014d48:	3720      	adds	r7, #32
 8014d4a:	8899      	ldrh	r1, [r3, #4]
 8014d4c:	4461      	add	r1, ip
 8014d4e:	8099      	strh	r1, [r3, #4]
 8014d50:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8014d52:	1a7f      	subs	r7, r7, r1
 8014d54:	88d9      	ldrh	r1, [r3, #6]
 8014d56:	fb0c 1c07 	mla	ip, ip, r7, r1
 8014d5a:	f8a3 c006 	strh.w	ip, [r3, #6]
 8014d5e:	e613      	b.n	8014988 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8014d60:	f04f 34ff 	mov.w	r4, #4294967295
 8014d64:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8014d66:	4249      	negs	r1, r1
 8014d68:	940d      	str	r4, [sp, #52]	@ 0x34
 8014d6a:	2400      	movs	r4, #0
 8014d6c:	437b      	muls	r3, r7
 8014d6e:	e758      	b.n	8014c22 <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8014d70:	9905      	ldr	r1, [sp, #20]
 8014d72:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8014d76:	f009 0c1f 	and.w	ip, r9, #31
 8014d7a:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8014d7e:	f001 011f 	and.w	r1, r1, #31
 8014d82:	45f3      	cmp	fp, lr
 8014d84:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8014d88:	9102      	str	r1, [sp, #8]
 8014d8a:	9904      	ldr	r1, [sp, #16]
 8014d8c:	eba1 0406 	sub.w	r4, r1, r6
 8014d90:	d108      	bne.n	8014da4 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8014d92:	9b02      	ldr	r3, [sp, #8]
 8014d94:	44a0      	add	r8, r4
 8014d96:	449c      	add	ip, r3
 8014d98:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014d9c:	fb04 a40c 	mla	r4, r4, ip, sl
 8014da0:	80fc      	strh	r4, [r7, #6]
 8014da2:	e461      	b.n	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8014da4:	9905      	ldr	r1, [sp, #20]
 8014da6:	ebb1 0109 	subs.w	r1, r1, r9
 8014daa:	bf51      	iteee	pl
 8014dac:	f1cc 0520 	rsbpl	r5, ip, #32
 8014db0:	fb04 f40c 	mulmi.w	r4, r4, ip
 8014db4:	4249      	negmi	r1, r1
 8014db6:	2500      	movmi	r5, #0
 8014db8:	bf5d      	ittte	pl
 8014dba:	436c      	mulpl	r4, r5
 8014dbc:	2520      	movpl	r5, #32
 8014dbe:	f04f 0901 	movpl.w	r9, #1
 8014dc2:	f04f 39ff 	movmi.w	r9, #4294967295
 8014dc6:	9501      	str	r5, [sp, #4]
 8014dc8:	9b01      	ldr	r3, [sp, #4]
 8014dca:	fb94 f5f1 	sdiv	r5, r4, r1
 8014dce:	fb01 4415 	mls	r4, r1, r5, r4
 8014dd2:	449c      	add	ip, r3
 8014dd4:	eb0b 0309 	add.w	r3, fp, r9
 8014dd8:	2c00      	cmp	r4, #0
 8014dda:	bfbc      	itt	lt
 8014ddc:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8014de0:	1864      	addlt	r4, r4, r1
 8014de2:	44a8      	add	r8, r5
 8014de4:	fb05 ac0c 	mla	ip, r5, ip, sl
 8014de8:	f8a7 8004 	strh.w	r8, [r7, #4]
 8014dec:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014df0:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014df4:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8014df8:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014dfc:	ea58 0707 	orrs.w	r7, r8, r7
 8014e00:	d011      	beq.n	8014e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014e02:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8014e06:	f1b8 0f00 	cmp.w	r8, #0
 8014e0a:	db0c      	blt.n	8014e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014e0c:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014e0e:	45b8      	cmp	r8, r7
 8014e10:	da09      	bge.n	8014e26 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8014e12:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8014e16:	45b8      	cmp	r8, r7
 8014e18:	bf3c      	itt	cc
 8014e1a:	f10c 0708 	addcc.w	r7, ip, #8
 8014e1e:	6107      	strcc	r7, [r0, #16]
 8014e20:	f108 0701 	add.w	r7, r8, #1
 8014e24:	6087      	str	r7, [r0, #8]
 8014e26:	6907      	ldr	r7, [r0, #16]
 8014e28:	f04f 0c00 	mov.w	ip, #0
 8014e2c:	b212      	sxth	r2, r2
 8014e2e:	459e      	cmp	lr, r3
 8014e30:	803b      	strh	r3, [r7, #0]
 8014e32:	442e      	add	r6, r5
 8014e34:	807a      	strh	r2, [r7, #2]
 8014e36:	f8a7 c004 	strh.w	ip, [r7, #4]
 8014e3a:	f8a7 c006 	strh.w	ip, [r7, #6]
 8014e3e:	d04b      	beq.n	8014ed8 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8014e40:	9f04      	ldr	r7, [sp, #16]
 8014e42:	1a64      	subs	r4, r4, r1
 8014e44:	f04f 0a00 	mov.w	sl, #0
 8014e48:	1bbf      	subs	r7, r7, r6
 8014e4a:	443d      	add	r5, r7
 8014e4c:	016d      	lsls	r5, r5, #5
 8014e4e:	fb95 f8f1 	sdiv	r8, r5, r1
 8014e52:	fb01 5518 	mls	r5, r1, r8, r5
 8014e56:	4565      	cmp	r5, ip
 8014e58:	bfbc      	itt	lt
 8014e5a:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8014e5e:	186d      	addlt	r5, r5, r1
 8014e60:	f108 0701 	add.w	r7, r8, #1
 8014e64:	9703      	str	r7, [sp, #12]
 8014e66:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014e6a:	1964      	adds	r4, r4, r5
 8014e6c:	444b      	add	r3, r9
 8014e6e:	bf54      	ite	pl
 8014e70:	9f03      	ldrpl	r7, [sp, #12]
 8014e72:	4647      	movmi	r7, r8
 8014e74:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8014e78:	bf58      	it	pl
 8014e7a:	1a64      	subpl	r4, r4, r1
 8014e7c:	443e      	add	r6, r7
 8014e7e:	44bb      	add	fp, r7
 8014e80:	f8ac b004 	strh.w	fp, [ip, #4]
 8014e84:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014e88:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8014e8c:	f8ac b006 	strh.w	fp, [ip, #6]
 8014e90:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8014e94:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8014e98:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8014e9c:	ea5b 0707 	orrs.w	r7, fp, r7
 8014ea0:	d011      	beq.n	8014ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014ea2:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8014ea6:	f1bb 0f00 	cmp.w	fp, #0
 8014eaa:	db0c      	blt.n	8014ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014eac:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8014eae:	45bb      	cmp	fp, r7
 8014eb0:	da09      	bge.n	8014ec6 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8014eb2:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8014eb6:	45bb      	cmp	fp, r7
 8014eb8:	bf3c      	itt	cc
 8014eba:	f10c 0708 	addcc.w	r7, ip, #8
 8014ebe:	6107      	strcc	r7, [r0, #16]
 8014ec0:	f10b 0701 	add.w	r7, fp, #1
 8014ec4:	6087      	str	r7, [r0, #8]
 8014ec6:	6907      	ldr	r7, [r0, #16]
 8014ec8:	459e      	cmp	lr, r3
 8014eca:	803b      	strh	r3, [r7, #0]
 8014ecc:	807a      	strh	r2, [r7, #2]
 8014ece:	f8a7 a004 	strh.w	sl, [r7, #4]
 8014ed2:	f8a7 a006 	strh.w	sl, [r7, #6]
 8014ed6:	d1c6      	bne.n	8014e66 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8014ed8:	9b04      	ldr	r3, [sp, #16]
 8014eda:	1b9e      	subs	r6, r3, r6
 8014edc:	6903      	ldr	r3, [r0, #16]
 8014ede:	889a      	ldrh	r2, [r3, #4]
 8014ee0:	4432      	add	r2, r6
 8014ee2:	809a      	strh	r2, [r3, #4]
 8014ee4:	9a02      	ldr	r2, [sp, #8]
 8014ee6:	f102 0c20 	add.w	ip, r2, #32
 8014eea:	9a01      	ldr	r2, [sp, #4]
 8014eec:	ebac 0c02 	sub.w	ip, ip, r2
 8014ef0:	88da      	ldrh	r2, [r3, #6]
 8014ef2:	fb06 260c 	mla	r6, r6, ip, r2
 8014ef6:	80de      	strh	r6, [r3, #6]
 8014ef8:	f7ff bbb6 	b.w	8014668 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08014efc <_ZN8touchgfx7Outline6lineToEii>:
 8014efc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014efe:	079b      	lsls	r3, r3, #30
 8014f00:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014f02:	460e      	mov	r6, r1
 8014f04:	4615      	mov	r5, r2
 8014f06:	d511      	bpl.n	8014f2c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014f08:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8014f0c:	ea86 0701 	eor.w	r7, r6, r1
 8014f10:	ea85 0302 	eor.w	r3, r5, r2
 8014f14:	433b      	orrs	r3, r7
 8014f16:	d009      	beq.n	8014f2c <_ZN8touchgfx7Outline6lineToEii+0x30>
 8014f18:	4633      	mov	r3, r6
 8014f1a:	9500      	str	r5, [sp, #0]
 8014f1c:	f7ff fb4c 	bl	80145b8 <_ZN8touchgfx7Outline10renderLineEiiii>
 8014f20:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014f22:	f043 0301 	orr.w	r3, r3, #1
 8014f26:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8014f2a:	6243      	str	r3, [r0, #36]	@ 0x24
 8014f2c:	b003      	add	sp, #12
 8014f2e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014f30 <_ZN8touchgfx7Outline6moveToEii>:
 8014f30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014f32:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8014f34:	4615      	mov	r5, r2
 8014f36:	4604      	mov	r4, r0
 8014f38:	460e      	mov	r6, r1
 8014f3a:	079a      	lsls	r2, r3, #30
 8014f3c:	d401      	bmi.n	8014f42 <_ZN8touchgfx7Outline6moveToEii+0x12>
 8014f3e:	f7ff fb08 	bl	8014552 <_ZN8touchgfx7Outline5resetEv>
 8014f42:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8014f44:	07db      	lsls	r3, r3, #31
 8014f46:	d504      	bpl.n	8014f52 <_ZN8touchgfx7Outline6moveToEii+0x22>
 8014f48:	4620      	mov	r0, r4
 8014f4a:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8014f4e:	f7ff ffd5 	bl	8014efc <_ZN8touchgfx7Outline6lineToEii>
 8014f52:	6923      	ldr	r3, [r4, #16]
 8014f54:	1170      	asrs	r0, r6, #5
 8014f56:	1169      	asrs	r1, r5, #5
 8014f58:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014f5c:	4290      	cmp	r0, r2
 8014f5e:	d103      	bne.n	8014f68 <_ZN8touchgfx7Outline6moveToEii+0x38>
 8014f60:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014f64:	4291      	cmp	r1, r2
 8014f66:	d01a      	beq.n	8014f9e <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8014f68:	88df      	ldrh	r7, [r3, #6]
 8014f6a:	889a      	ldrh	r2, [r3, #4]
 8014f6c:	433a      	orrs	r2, r7
 8014f6e:	d010      	beq.n	8014f92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014f70:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8014f74:	2a00      	cmp	r2, #0
 8014f76:	db0c      	blt.n	8014f92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014f78:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8014f7a:	42ba      	cmp	r2, r7
 8014f7c:	da09      	bge.n	8014f92 <_ZN8touchgfx7Outline6moveToEii+0x62>
 8014f7e:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 8014f82:	42ba      	cmp	r2, r7
 8014f84:	f102 0201 	add.w	r2, r2, #1
 8014f88:	bf38      	it	cc
 8014f8a:	3308      	addcc	r3, #8
 8014f8c:	60a2      	str	r2, [r4, #8]
 8014f8e:	bf38      	it	cc
 8014f90:	6123      	strcc	r3, [r4, #16]
 8014f92:	6923      	ldr	r3, [r4, #16]
 8014f94:	2200      	movs	r2, #0
 8014f96:	8018      	strh	r0, [r3, #0]
 8014f98:	8059      	strh	r1, [r3, #2]
 8014f9a:	809a      	strh	r2, [r3, #4]
 8014f9c:	80da      	strh	r2, [r3, #6]
 8014f9e:	6166      	str	r6, [r4, #20]
 8014fa0:	6225      	str	r5, [r4, #32]
 8014fa2:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8014fa6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08014fa8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8014fa8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014fac:	b0d0      	sub	sp, #320	@ 0x140
 8014fae:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 8014fb2:	466c      	mov	r4, sp
 8014fb4:	4627      	mov	r7, r4
 8014fb6:	1a0d      	subs	r5, r1, r0
 8014fb8:	f100 0308 	add.w	r3, r0, #8
 8014fbc:	2d48      	cmp	r5, #72	@ 0x48
 8014fbe:	f340 80d5 	ble.w	801516c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 8014fc2:	112d      	asrs	r5, r5, #4
 8014fc4:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8014fc8:	f9b0 9000 	ldrsh.w	r9, [r0]
 8014fcc:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 8014fd0:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8014fd4:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8014fd8:	6816      	ldr	r6, [r2, #0]
 8014fda:	6006      	str	r6, [r0, #0]
 8014fdc:	6856      	ldr	r6, [r2, #4]
 8014fde:	6046      	str	r6, [r0, #4]
 8014fe0:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8014fe4:	f8a2 8002 	strh.w	r8, [r2, #2]
 8014fe8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8014fec:	f8a2 c006 	strh.w	ip, [r2, #6]
 8014ff0:	f1a1 0208 	sub.w	r2, r1, #8
 8014ff4:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8014ff8:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8014ffc:	4565      	cmp	r5, ip
 8014ffe:	db06      	blt.n	801500e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 8015000:	d119      	bne.n	8015036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 8015002:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8015006:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 801500a:	42ae      	cmp	r6, r5
 801500c:	dd13      	ble.n	8015036 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801500e:	460e      	mov	r6, r1
 8015010:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8015014:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8015018:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801501c:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 8015020:	601d      	str	r5, [r3, #0]
 8015022:	6875      	ldr	r5, [r6, #4]
 8015024:	605d      	str	r5, [r3, #4]
 8015026:	f821 9c08 	strh.w	r9, [r1, #-8]
 801502a:	f821 cc06 	strh.w	ip, [r1, #-6]
 801502e:	f821 8c04 	strh.w	r8, [r1, #-4]
 8015032:	f821 ec02 	strh.w	lr, [r1, #-2]
 8015036:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 801503a:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801503e:	42ae      	cmp	r6, r5
 8015040:	db06      	blt.n	8015050 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 8015042:	d116      	bne.n	8015072 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015044:	f9b0 c000 	ldrsh.w	ip, [r0]
 8015048:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 801504c:	45ac      	cmp	ip, r5
 801504e:	da10      	bge.n	8015072 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8015050:	681d      	ldr	r5, [r3, #0]
 8015052:	f9b0 8000 	ldrsh.w	r8, [r0]
 8015056:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 801505a:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801505e:	6005      	str	r5, [r0, #0]
 8015060:	685d      	ldr	r5, [r3, #4]
 8015062:	f8a0 8008 	strh.w	r8, [r0, #8]
 8015066:	6045      	str	r5, [r0, #4]
 8015068:	8146      	strh	r6, [r0, #10]
 801506a:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801506e:	f8a0 c00e 	strh.w	ip, [r0, #14]
 8015072:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8015076:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 801507a:	4565      	cmp	r5, ip
 801507c:	db06      	blt.n	801508c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801507e:	d119      	bne.n	80150b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015080:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8015084:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015088:	42ae      	cmp	r6, r5
 801508a:	da13      	bge.n	80150b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801508c:	460e      	mov	r6, r1
 801508e:	f9b0 9000 	ldrsh.w	r9, [r0]
 8015092:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8015096:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 801509a:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801509e:	6005      	str	r5, [r0, #0]
 80150a0:	6875      	ldr	r5, [r6, #4]
 80150a2:	6045      	str	r5, [r0, #4]
 80150a4:	f821 9c08 	strh.w	r9, [r1, #-8]
 80150a8:	f821 cc06 	strh.w	ip, [r1, #-6]
 80150ac:	f821 8c04 	strh.w	r8, [r1, #-4]
 80150b0:	f821 ec02 	strh.w	lr, [r1, #-2]
 80150b4:	3308      	adds	r3, #8
 80150b6:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80150ba:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80150be:	45e6      	cmp	lr, ip
 80150c0:	dbf8      	blt.n	80150b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80150c2:	d105      	bne.n	80150d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80150c4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80150c8:	f9b0 5000 	ldrsh.w	r5, [r0]
 80150cc:	42ae      	cmp	r6, r5
 80150ce:	dbf1      	blt.n	80150b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80150d0:	4615      	mov	r5, r2
 80150d2:	3a08      	subs	r2, #8
 80150d4:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 80150d8:	45b4      	cmp	ip, r6
 80150da:	dbf9      	blt.n	80150d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80150dc:	d105      	bne.n	80150ea <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 80150de:	f9b0 8000 	ldrsh.w	r8, [r0]
 80150e2:	f9b2 6000 	ldrsh.w	r6, [r2]
 80150e6:	45b0      	cmp	r8, r6
 80150e8:	dbf2      	blt.n	80150d0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80150ea:	4293      	cmp	r3, r2
 80150ec:	f1a5 0608 	sub.w	r6, r5, #8
 80150f0:	d816      	bhi.n	8015120 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80150f2:	f8d6 c000 	ldr.w	ip, [r6]
 80150f6:	f9b3 a000 	ldrsh.w	sl, [r3]
 80150fa:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80150fe:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 8015102:	f8c3 c000 	str.w	ip, [r3]
 8015106:	f8d6 c004 	ldr.w	ip, [r6, #4]
 801510a:	f8c3 c004 	str.w	ip, [r3, #4]
 801510e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015112:	f825 ec06 	strh.w	lr, [r5, #-6]
 8015116:	f825 9c04 	strh.w	r9, [r5, #-4]
 801511a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801511e:	e7c9      	b.n	80150b4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8015120:	f8d6 e000 	ldr.w	lr, [r6]
 8015124:	f9b0 a000 	ldrsh.w	sl, [r0]
 8015128:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 801512c:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 8015130:	f8c0 e000 	str.w	lr, [r0]
 8015134:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8015138:	1a16      	subs	r6, r2, r0
 801513a:	f8c0 e004 	str.w	lr, [r0, #4]
 801513e:	f825 ac08 	strh.w	sl, [r5, #-8]
 8015142:	f825 cc06 	strh.w	ip, [r5, #-6]
 8015146:	f825 9c04 	strh.w	r9, [r5, #-4]
 801514a:	f825 8c02 	strh.w	r8, [r5, #-2]
 801514e:	1acd      	subs	r5, r1, r3
 8015150:	10ed      	asrs	r5, r5, #3
 8015152:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8015156:	bfb5      	itete	lt
 8015158:	e9c4 0200 	strdlt	r0, r2, [r4]
 801515c:	e9c4 3100 	strdge	r3, r1, [r4]
 8015160:	460a      	movlt	r2, r1
 8015162:	4603      	movge	r3, r0
 8015164:	3408      	adds	r4, #8
 8015166:	4618      	mov	r0, r3
 8015168:	4611      	mov	r1, r2
 801516a:	e724      	b.n	8014fb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 801516c:	4299      	cmp	r1, r3
 801516e:	d927      	bls.n	80151c0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 8015170:	f1a3 0210 	sub.w	r2, r3, #16
 8015174:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8015178:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 801517c:	45ac      	cmp	ip, r5
 801517e:	db06      	blt.n	801518e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 8015180:	d11c      	bne.n	80151bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 8015182:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8015186:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 801518a:	42ae      	cmp	r6, r5
 801518c:	da16      	bge.n	80151bc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801518e:	4615      	mov	r5, r2
 8015190:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8015194:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8015198:	3a08      	subs	r2, #8
 801519a:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801519e:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80151a2:	6196      	str	r6, [r2, #24]
 80151a4:	42a8      	cmp	r0, r5
 80151a6:	686e      	ldr	r6, [r5, #4]
 80151a8:	f8a2 9010 	strh.w	r9, [r2, #16]
 80151ac:	61d6      	str	r6, [r2, #28]
 80151ae:	f8a2 c012 	strh.w	ip, [r2, #18]
 80151b2:	f8a2 8014 	strh.w	r8, [r2, #20]
 80151b6:	f8a2 e016 	strh.w	lr, [r2, #22]
 80151ba:	d1db      	bne.n	8015174 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80151bc:	3308      	adds	r3, #8
 80151be:	e7d5      	b.n	801516c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80151c0:	42bc      	cmp	r4, r7
 80151c2:	d903      	bls.n	80151cc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 80151c4:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 80151c8:	3c08      	subs	r4, #8
 80151ca:	e6f4      	b.n	8014fb6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80151cc:	b050      	add	sp, #320	@ 0x140
 80151ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080151d2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 80151d2:	b510      	push	{r4, lr}
 80151d4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80151d6:	4604      	mov	r4, r0
 80151d8:	07da      	lsls	r2, r3, #31
 80151da:	d507      	bpl.n	80151ec <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 80151dc:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 80151e0:	f7ff fe8c 	bl	8014efc <_ZN8touchgfx7Outline6lineToEii>
 80151e4:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80151e6:	f023 0301 	bic.w	r3, r3, #1
 80151ea:	6243      	str	r3, [r0, #36]	@ 0x24
 80151ec:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80151ee:	079b      	lsls	r3, r3, #30
 80151f0:	d521      	bpl.n	8015236 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80151f2:	6923      	ldr	r3, [r4, #16]
 80151f4:	88d9      	ldrh	r1, [r3, #6]
 80151f6:	889a      	ldrh	r2, [r3, #4]
 80151f8:	430a      	orrs	r2, r1
 80151fa:	d010      	beq.n	801521e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80151fc:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015200:	2a00      	cmp	r2, #0
 8015202:	db0c      	blt.n	801521e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8015204:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8015206:	428a      	cmp	r2, r1
 8015208:	da09      	bge.n	801521e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 801520a:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801520e:	4291      	cmp	r1, r2
 8015210:	f102 0201 	add.w	r2, r2, #1
 8015214:	bf88      	it	hi
 8015216:	3308      	addhi	r3, #8
 8015218:	60a2      	str	r2, [r4, #8]
 801521a:	bf88      	it	hi
 801521c:	6123      	strhi	r3, [r4, #16]
 801521e:	68a1      	ldr	r1, [r4, #8]
 8015220:	b129      	cbz	r1, 801522e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015222:	6863      	ldr	r3, [r4, #4]
 8015224:	4299      	cmp	r1, r3
 8015226:	d802      	bhi.n	801522e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8015228:	68e0      	ldr	r0, [r4, #12]
 801522a:	f7ff febd 	bl	8014fa8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801522e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8015230:	f023 0302 	bic.w	r3, r3, #2
 8015234:	6263      	str	r3, [r4, #36]	@ 0x24
 8015236:	68e0      	ldr	r0, [r4, #12]
 8015238:	bd10      	pop	{r4, pc}
	...

0801523c <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 801523c:	4b01      	ldr	r3, [pc, #4]	@ (8015244 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801523e:	6818      	ldr	r0, [r3, #0]
 8015240:	4770      	bx	lr
 8015242:	bf00      	nop
 8015244:	24025e28 	.word	0x24025e28

08015248 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8015248:	4b01      	ldr	r3, [pc, #4]	@ (8015250 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 801524a:	6818      	ldr	r0, [r3, #0]
 801524c:	4770      	bx	lr
 801524e:	bf00      	nop
 8015250:	24025e2c 	.word	0x24025e2c

08015254 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8015254:	b510      	push	{r4, lr}
 8015256:	6803      	ldr	r3, [r0, #0]
 8015258:	460c      	mov	r4, r1
 801525a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801525c:	4798      	blx	r3
 801525e:	1b03      	subs	r3, r0, r4
 8015260:	4258      	negs	r0, r3
 8015262:	4158      	adcs	r0, r3
 8015264:	bd10      	pop	{r4, pc}
	...

08015268 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8015268:	4b01      	ldr	r3, [pc, #4]	@ (8015270 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 801526a:	6019      	str	r1, [r3, #0]
 801526c:	4770      	bx	lr
 801526e:	bf00      	nop
 8015270:	24025e30 	.word	0x24025e30

08015274 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8015274:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015278:	4696      	mov	lr, r2
 801527a:	b097      	sub	sp, #92	@ 0x5c
 801527c:	4605      	mov	r5, r0
 801527e:	4614      	mov	r4, r2
 8015280:	460e      	mov	r6, r1
 8015282:	461f      	mov	r7, r3
 8015284:	f10d 0c1c 	add.w	ip, sp, #28
 8015288:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 801528c:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 8015290:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8015294:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015298:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801529c:	f8de 3000 	ldr.w	r3, [lr]
 80152a0:	f104 0e14 	add.w	lr, r4, #20
 80152a4:	f8cc 3000 	str.w	r3, [ip]
 80152a8:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80152ac:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152b0:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152b4:	f8de 3000 	ldr.w	r3, [lr]
 80152b8:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80152bc:	f8cc 3000 	str.w	r3, [ip]
 80152c0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80152c4:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152c8:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80152cc:	f8de 3000 	ldr.w	r3, [lr]
 80152d0:	4631      	mov	r1, r6
 80152d2:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80152d4:	4628      	mov	r0, r5
 80152d6:	f8cc 3000 	str.w	r3, [ip]
 80152da:	682b      	ldr	r3, [r5, #0]
 80152dc:	9201      	str	r2, [sp, #4]
 80152de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80152e0:	f8cd 8008 	str.w	r8, [sp, #8]
 80152e4:	9200      	str	r2, [sp, #0]
 80152e6:	aa07      	add	r2, sp, #28
 80152e8:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80152ec:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80152f0:	463b      	mov	r3, r7
 80152f2:	47d8      	blx	fp
 80152f4:	46a6      	mov	lr, r4
 80152f6:	f10d 0c1c 	add.w	ip, sp, #28
 80152fa:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80152fe:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8015302:	f8de 3000 	ldr.w	r3, [lr]
 8015306:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 801530a:	343c      	adds	r4, #60	@ 0x3c
 801530c:	f8cc 3000 	str.w	r3, [ip]
 8015310:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8015314:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8015318:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801531c:	f8de 3000 	ldr.w	r3, [lr]
 8015320:	f8cc 3000 	str.w	r3, [ip]
 8015324:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8015328:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 801532a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801532e:	6823      	ldr	r3, [r4, #0]
 8015330:	4631      	mov	r1, r6
 8015332:	4628      	mov	r0, r5
 8015334:	f8cc 3000 	str.w	r3, [ip]
 8015338:	682b      	ldr	r3, [r5, #0]
 801533a:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801533e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8015340:	f8cd 8008 	str.w	r8, [sp, #8]
 8015344:	9201      	str	r2, [sp, #4]
 8015346:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8015348:	9200      	str	r2, [sp, #0]
 801534a:	aa07      	add	r2, sp, #28
 801534c:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801534e:	463b      	mov	r3, r7
 8015350:	47a0      	blx	r4
 8015352:	b017      	add	sp, #92	@ 0x5c
 8015354:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015358 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8015358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801535c:	b08d      	sub	sp, #52	@ 0x34
 801535e:	4688      	mov	r8, r1
 8015360:	f8d3 c000 	ldr.w	ip, [r3]
 8015364:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8015366:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 801536a:	680f      	ldr	r7, [r1, #0]
 801536c:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 8015370:	eba7 070c 	sub.w	r7, r7, ip
 8015374:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8015378:	edd3 6a07 	vldr	s13, [r3, #28]
 801537c:	42bc      	cmp	r4, r7
 801537e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8015380:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8015384:	bfa8      	it	ge
 8015386:	463c      	movge	r4, r7
 8015388:	f9b1 9000 	ldrsh.w	r9, [r1]
 801538c:	f9ba 1000 	ldrsh.w	r1, [sl]
 8015390:	ee07 4a90 	vmov	s15, r4
 8015394:	eb09 0e0c 	add.w	lr, r9, ip
 8015398:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 801539c:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80153a0:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80153a4:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80153a8:	4571      	cmp	r1, lr
 80153aa:	ee25 4a04 	vmul.f32	s8, s10, s8
 80153ae:	ee65 4a24 	vmul.f32	s9, s10, s9
 80153b2:	ee25 5a27 	vmul.f32	s10, s10, s15
 80153b6:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80153ba:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80153be:	ee32 1a05 	vadd.f32	s2, s4, s10
 80153c2:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80153c6:	ee36 0a84 	vadd.f32	s0, s13, s8
 80153ca:	ee61 1a87 	vmul.f32	s3, s3, s14
 80153ce:	ee22 2a07 	vmul.f32	s4, s4, s14
 80153d2:	f340 808c 	ble.w	80154ee <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 80153d6:	eba1 060e 	sub.w	r6, r1, lr
 80153da:	fb96 f5f4 	sdiv	r5, r6, r4
 80153de:	ee07 5a10 	vmov	s14, r5
 80153e2:	2d00      	cmp	r5, #0
 80153e4:	fb04 6615 	mls	r6, r4, r5, r6
 80153e8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80153ec:	eea7 0a04 	vfma.f32	s0, s14, s8
 80153f0:	eee7 0a24 	vfma.f32	s1, s14, s9
 80153f4:	eea7 1a05 	vfma.f32	s2, s14, s10
 80153f8:	dd12      	ble.n	8015420 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80153fa:	ee70 6a44 	vsub.f32	s13, s0, s8
 80153fe:	ee70 1ae4 	vsub.f32	s3, s1, s9
 8015402:	ee31 2a45 	vsub.f32	s4, s2, s10
 8015406:	eef5 6a40 	vcmp.f32	s13, #0.0
 801540a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801540e:	bf14      	ite	ne
 8015410:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8015414:	eeb0 7a67 	vmoveq.f32	s14, s15
 8015418:	ee61 1a87 	vmul.f32	s3, s3, s14
 801541c:	ee22 2a07 	vmul.f32	s4, s4, s14
 8015420:	fb05 f204 	mul.w	r2, r5, r4
 8015424:	1abf      	subs	r7, r7, r2
 8015426:	4494      	add	ip, r2
 8015428:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 801542c:	4411      	add	r1, r2
 801542e:	eb09 020c 	add.w	r2, r9, ip
 8015432:	b209      	sxth	r1, r1
 8015434:	443a      	add	r2, r7
 8015436:	428a      	cmp	r2, r1
 8015438:	bfc4      	itt	gt
 801543a:	eba1 0209 	subgt.w	r2, r1, r9
 801543e:	eba2 070c 	subgt.w	r7, r2, ip
 8015442:	2f00      	cmp	r7, #0
 8015444:	dd50      	ble.n	80154e8 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8015446:	fb97 f1f4 	sdiv	r1, r7, r4
 801544a:	fb04 7211 	mls	r2, r4, r1, r7
 801544e:	b90a      	cbnz	r2, 8015454 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 8015450:	3901      	subs	r1, #1
 8015452:	4622      	mov	r2, r4
 8015454:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8015458:	6840      	ldr	r0, [r0, #4]
 801545a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801545e:	44b6      	add	lr, r6
 8015460:	f8d0 a000 	ldr.w	sl, [r0]
 8015464:	2900      	cmp	r1, #0
 8015466:	bfcc      	ite	gt
 8015468:	46a1      	movgt	r9, r4
 801546a:	4691      	movle	r9, r2
 801546c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801546e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8015470:	fb04 e505 	mla	r5, r4, r5, lr
 8015474:	eef0 6a42 	vmov.f32	s13, s4
 8015478:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801547c:	9008      	str	r0, [sp, #32]
 801547e:	eeb0 7a61 	vmov.f32	s14, s3
 8015482:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8015484:	695b      	ldr	r3, [r3, #20]
 8015486:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801548a:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801548e:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 8015492:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8015494:	445b      	add	r3, fp
 8015496:	9307      	str	r3, [sp, #28]
 8015498:	ee16 3a90 	vmov	r3, s13
 801549c:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80154a0:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80154a4:	ee21 3a23 	vmul.f32	s6, s2, s7
 80154a8:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80154ac:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80154b0:	ee17 7a90 	vmov	r7, s15
 80154b4:	ee73 7a42 	vsub.f32	s15, s6, s4
 80154b8:	fb97 f7f4 	sdiv	r7, r7, r4
 80154bc:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80154c0:	ee17 ca90 	vmov	ip, s15
 80154c4:	fb9c fcf4 	sdiv	ip, ip, r4
 80154c8:	fb0c 3306 	mla	r3, ip, r6, r3
 80154cc:	9302      	str	r3, [sp, #8]
 80154ce:	ee17 3a10 	vmov	r3, s14
 80154d2:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 80154d6:	fb07 3706 	mla	r7, r7, r6, r3
 80154da:	eba9 0306 	sub.w	r3, r9, r6
 80154de:	e9cd 4700 	strd	r4, r7, [sp]
 80154e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80154e6:	47a0      	blx	r4
 80154e8:	b00d      	add	sp, #52	@ 0x34
 80154ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80154ee:	2500      	movs	r5, #0
 80154f0:	462e      	mov	r6, r5
 80154f2:	e799      	b.n	8015428 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080154f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80154f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80154f8:	b0db      	sub	sp, #364	@ 0x16c
 80154fa:	461d      	mov	r5, r3
 80154fc:	4614      	mov	r4, r2
 80154fe:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 8015502:	910f      	str	r1, [sp, #60]	@ 0x3c
 8015504:	4629      	mov	r1, r5
 8015506:	930a      	str	r3, [sp, #40]	@ 0x28
 8015508:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 801550c:	9009      	str	r0, [sp, #36]	@ 0x24
 801550e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8015510:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8015514:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8015518:	9310      	str	r3, [sp, #64]	@ 0x40
 801551a:	6803      	ldr	r3, [r0, #0]
 801551c:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801551e:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 8015522:	47b8      	blx	r7
 8015524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015526:	6058      	str	r0, [r3, #4]
 8015528:	2800      	cmp	r0, #0
 801552a:	f000 83a1 	beq.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801552e:	682b      	ldr	r3, [r5, #0]
 8015530:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8015534:	ed94 7a02 	vldr	s14, [r4, #8]
 8015538:	9314      	str	r3, [sp, #80]	@ 0x50
 801553a:	686b      	ldr	r3, [r5, #4]
 801553c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8015540:	9315      	str	r3, [sp, #84]	@ 0x54
 8015542:	4bc1      	ldr	r3, [pc, #772]	@ (8015848 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8015544:	7819      	ldrb	r1, [r3, #0]
 8015546:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 801554a:	2900      	cmp	r1, #0
 801554c:	bf16      	itet	ne
 801554e:	4619      	movne	r1, r3
 8015550:	4611      	moveq	r1, r2
 8015552:	4613      	movne	r3, r2
 8015554:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015558:	9116      	str	r1, [sp, #88]	@ 0x58
 801555a:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801555e:	f240 8387 	bls.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015562:	ed94 7a07 	vldr	s14, [r4, #28]
 8015566:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801556e:	f240 837f 	bls.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015572:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8015576:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801557a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801557e:	f240 8377 	bls.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015582:	6822      	ldr	r2, [r4, #0]
 8015584:	4bb1      	ldr	r3, [pc, #708]	@ (801584c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8015586:	429a      	cmp	r2, r3
 8015588:	f2c0 8372 	blt.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801558c:	49b0      	ldr	r1, [pc, #704]	@ (8015850 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801558e:	6963      	ldr	r3, [r4, #20]
 8015590:	428a      	cmp	r2, r1
 8015592:	f300 836d 	bgt.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015596:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 801559a:	48ae      	ldr	r0, [pc, #696]	@ (8015854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 801559c:	33ff      	adds	r3, #255	@ 0xff
 801559e:	4283      	cmp	r3, r0
 80155a0:	f200 8366 	bhi.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155a4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80155a6:	4dac      	ldr	r5, [pc, #688]	@ (8015858 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80155a8:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80155ac:	33ff      	adds	r3, #255	@ 0xff
 80155ae:	42ab      	cmp	r3, r5
 80155b0:	f200 835e 	bhi.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155b4:	6862      	ldr	r2, [r4, #4]
 80155b6:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80155ba:	33ff      	adds	r3, #255	@ 0xff
 80155bc:	4283      	cmp	r3, r0
 80155be:	f200 8357 	bhi.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155c2:	69a1      	ldr	r1, [r4, #24]
 80155c4:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 80155c8:	33ff      	adds	r3, #255	@ 0xff
 80155ca:	4283      	cmp	r3, r0
 80155cc:	f200 8350 	bhi.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80155d2:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 80155d6:	30ff      	adds	r0, #255	@ 0xff
 80155d8:	42a8      	cmp	r0, r5
 80155da:	f200 8349 	bhi.w	8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80155de:	428a      	cmp	r2, r1
 80155e0:	f280 8110 	bge.w	8015804 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80155e4:	429a      	cmp	r2, r3
 80155e6:	f300 8119 	bgt.w	801581c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80155ea:	4299      	cmp	r1, r3
 80155ec:	f280 811d 	bge.w	801582a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80155f0:	2502      	movs	r5, #2
 80155f2:	2701      	movs	r7, #1
 80155f4:	46a9      	mov	r9, r5
 80155f6:	46b8      	mov	r8, r7
 80155f8:	f04f 0a00 	mov.w	sl, #0
 80155fc:	4621      	mov	r1, r4
 80155fe:	a849      	add	r0, sp, #292	@ 0x124
 8015600:	f004 f88a 	bl	8019718 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8015604:	4622      	mov	r2, r4
 8015606:	4653      	mov	r3, sl
 8015608:	a949      	add	r1, sp, #292	@ 0x124
 801560a:	f8cd 9000 	str.w	r9, [sp]
 801560e:	a819      	add	r0, sp, #100	@ 0x64
 8015610:	f004 f9b2 	bl	8019978 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015614:	4622      	mov	r2, r4
 8015616:	4653      	mov	r3, sl
 8015618:	a949      	add	r1, sp, #292	@ 0x124
 801561a:	f8cd 8000 	str.w	r8, [sp]
 801561e:	a829      	add	r0, sp, #164	@ 0xa4
 8015620:	f004 f9aa 	bl	8019978 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015624:	4643      	mov	r3, r8
 8015626:	4622      	mov	r2, r4
 8015628:	a949      	add	r1, sp, #292	@ 0x124
 801562a:	f8cd 9000 	str.w	r9, [sp]
 801562e:	a839      	add	r0, sp, #228	@ 0xe4
 8015630:	f004 f9a2 	bl	8019978 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8015634:	42af      	cmp	r7, r5
 8015636:	af12      	add	r7, sp, #72	@ 0x48
 8015638:	bfb7      	itett	lt
 801563a:	2300      	movlt	r3, #0
 801563c:	2301      	movge	r3, #1
 801563e:	ad29      	addlt	r5, sp, #164	@ 0xa4
 8015640:	ac19      	addlt	r4, sp, #100	@ 0x64
 8015642:	bfb1      	iteee	lt
 8015644:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8015646:	ad19      	addge	r5, sp, #100	@ 0x64
 8015648:	930e      	strge	r3, [sp, #56]	@ 0x38
 801564a:	ac29      	addge	r4, sp, #164	@ 0xa4
 801564c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801564e:	e893 0003 	ldmia.w	r3, {r0, r1}
 8015652:	e887 0003 	stmia.w	r7, {r0, r1}
 8015656:	b928      	cbnz	r0, 8015664 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8015658:	4b80      	ldr	r3, [pc, #512]	@ (801585c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 801565a:	6818      	ldr	r0, [r3, #0]
 801565c:	6803      	ldr	r3, [r0, #0]
 801565e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015660:	4798      	blx	r3
 8015662:	6038      	str	r0, [r7, #0]
 8015664:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015666:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801566a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801566e:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 8015670:	930c      	str	r3, [sp, #48]	@ 0x30
 8015672:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015674:	6963      	ldr	r3, [r4, #20]
 8015676:	440b      	add	r3, r1
 8015678:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 801567c:	4408      	add	r0, r1
 801567e:	b200      	sxth	r0, r0
 8015680:	4283      	cmp	r3, r0
 8015682:	900d      	str	r0, [sp, #52]	@ 0x34
 8015684:	f280 80dd 	bge.w	8015842 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8015688:	428b      	cmp	r3, r1
 801568a:	da08      	bge.n	801569e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801568c:	2a00      	cmp	r2, #0
 801568e:	dd06      	ble.n	801569e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015690:	1acb      	subs	r3, r1, r3
 8015692:	429a      	cmp	r2, r3
 8015694:	f2c0 80e4 	blt.w	8015860 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8015698:	2b00      	cmp	r3, #0
 801569a:	f300 80e2 	bgt.w	8015862 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801569e:	6967      	ldr	r7, [r4, #20]
 80156a0:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80156a4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80156a6:	443b      	add	r3, r7
 80156a8:	461f      	mov	r7, r3
 80156aa:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80156ac:	1bdf      	subs	r7, r3, r7
 80156ae:	4297      	cmp	r7, r2
 80156b0:	bfa8      	it	ge
 80156b2:	4617      	movge	r7, r2
 80156b4:	2f00      	cmp	r7, #0
 80156b6:	f340 8166 	ble.w	8015986 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80156ba:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80156bc:	6829      	ldr	r1, [r5, #0]
 80156be:	f9b3 2000 	ldrsh.w	r2, [r3]
 80156c2:	f9bb 3000 	ldrsh.w	r3, [fp]
 80156c6:	4411      	add	r1, r2
 80156c8:	6820      	ldr	r0, [r4, #0]
 80156ca:	4299      	cmp	r1, r3
 80156cc:	dd1a      	ble.n	8015704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80156ce:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 80156d2:	4402      	add	r2, r0
 80156d4:	440b      	add	r3, r1
 80156d6:	b21b      	sxth	r3, r3
 80156d8:	429a      	cmp	r2, r3
 80156da:	dc13      	bgt.n	8015704 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 80156dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80156de:	a912      	add	r1, sp, #72	@ 0x48
 80156e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80156e2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80156e4:	681b      	ldr	r3, [r3, #0]
 80156e6:	9206      	str	r2, [sp, #24]
 80156e8:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80156ea:	9500      	str	r5, [sp, #0]
 80156ec:	9205      	str	r2, [sp, #20]
 80156ee:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80156f0:	e9cd b203 	strd	fp, r2, [sp, #12]
 80156f4:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80156f6:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80156fa:	aa49      	add	r2, sp, #292	@ 0x124
 80156fc:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015700:	4623      	mov	r3, r4
 8015702:	47c8      	blx	r9
 8015704:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015708:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 801570c:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015710:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015714:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015718:	68a1      	ldr	r1, [r4, #8]
 801571a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801571e:	ed94 6a08 	vldr	s12, [r4, #32]
 8015722:	edd4 6a07 	vldr	s13, [r4, #28]
 8015726:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 801572a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801572e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015732:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015736:	edc4 6a07 	vstr	s13, [r4, #28]
 801573a:	441a      	add	r2, r3
 801573c:	6963      	ldr	r3, [r4, #20]
 801573e:	3301      	adds	r3, #1
 8015740:	6022      	str	r2, [r4, #0]
 8015742:	6163      	str	r3, [r4, #20]
 8015744:	69a3      	ldr	r3, [r4, #24]
 8015746:	3b01      	subs	r3, #1
 8015748:	61a3      	str	r3, [r4, #24]
 801574a:	6923      	ldr	r3, [r4, #16]
 801574c:	440b      	add	r3, r1
 801574e:	68e1      	ldr	r1, [r4, #12]
 8015750:	428b      	cmp	r3, r1
 8015752:	6123      	str	r3, [r4, #16]
 8015754:	db15      	blt.n	8015782 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8015756:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 801575a:	3201      	adds	r2, #1
 801575c:	1a5b      	subs	r3, r3, r1
 801575e:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015762:	6022      	str	r2, [r4, #0]
 8015764:	6123      	str	r3, [r4, #16]
 8015766:	edc4 6a07 	vstr	s13, [r4, #28]
 801576a:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801576e:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015772:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015776:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 801577a:	ee77 7a27 	vadd.f32	s15, s14, s15
 801577e:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015782:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015786:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 801578a:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801578e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015792:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015796:	68a9      	ldr	r1, [r5, #8]
 8015798:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801579c:	ed95 6a08 	vldr	s12, [r5, #32]
 80157a0:	edd5 6a07 	vldr	s13, [r5, #28]
 80157a4:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80157a8:	ee76 6a86 	vadd.f32	s13, s13, s12
 80157ac:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80157b0:	e9d5 2300 	ldrd	r2, r3, [r5]
 80157b4:	edc5 6a07 	vstr	s13, [r5, #28]
 80157b8:	441a      	add	r2, r3
 80157ba:	696b      	ldr	r3, [r5, #20]
 80157bc:	3301      	adds	r3, #1
 80157be:	602a      	str	r2, [r5, #0]
 80157c0:	616b      	str	r3, [r5, #20]
 80157c2:	69ab      	ldr	r3, [r5, #24]
 80157c4:	3b01      	subs	r3, #1
 80157c6:	61ab      	str	r3, [r5, #24]
 80157c8:	692b      	ldr	r3, [r5, #16]
 80157ca:	440b      	add	r3, r1
 80157cc:	68e9      	ldr	r1, [r5, #12]
 80157ce:	428b      	cmp	r3, r1
 80157d0:	612b      	str	r3, [r5, #16]
 80157d2:	db15      	blt.n	8015800 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 80157d4:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 80157d8:	3201      	adds	r2, #1
 80157da:	1a5b      	subs	r3, r3, r1
 80157dc:	ee76 6a26 	vadd.f32	s13, s12, s13
 80157e0:	602a      	str	r2, [r5, #0]
 80157e2:	612b      	str	r3, [r5, #16]
 80157e4:	edc5 6a07 	vstr	s13, [r5, #28]
 80157e8:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80157ec:	ee36 7a87 	vadd.f32	s14, s13, s14
 80157f0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80157f4:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80157f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80157fc:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015800:	3f01      	subs	r7, #1
 8015802:	e757      	b.n	80156b4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8015804:	4299      	cmp	r1, r3
 8015806:	dc13      	bgt.n	8015830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8015808:	429a      	cmp	r2, r3
 801580a:	da14      	bge.n	8015836 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 801580c:	2502      	movs	r5, #2
 801580e:	2703      	movs	r7, #3
 8015810:	f04f 0800 	mov.w	r8, #0
 8015814:	46a9      	mov	r9, r5
 8015816:	f04f 0a01 	mov.w	sl, #1
 801581a:	e6ef      	b.n	80155fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801581c:	2501      	movs	r5, #1
 801581e:	2700      	movs	r7, #0
 8015820:	46a9      	mov	r9, r5
 8015822:	46b8      	mov	r8, r7
 8015824:	f04f 0a02 	mov.w	sl, #2
 8015828:	e6e8      	b.n	80155fc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 801582a:	2501      	movs	r5, #1
 801582c:	2702      	movs	r7, #2
 801582e:	e6e1      	b.n	80155f4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8015830:	2500      	movs	r5, #0
 8015832:	2701      	movs	r7, #1
 8015834:	e7f4      	b.n	8015820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8015836:	2702      	movs	r7, #2
 8015838:	2503      	movs	r5, #3
 801583a:	f04f 0900 	mov.w	r9, #0
 801583e:	46b8      	mov	r8, r7
 8015840:	e7e9      	b.n	8015816 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8015842:	4613      	mov	r3, r2
 8015844:	e728      	b.n	8015698 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8015846:	bf00      	nop
 8015848:	24025e18 	.word	0x24025e18
 801584c:	fffd8f01 	.word	0xfffd8f01
 8015850:	00027100 	.word	0x00027100
 8015854:	0004e1ff 	.word	0x0004e1ff
 8015858:	0004e1fe 	.word	0x0004e1fe
 801585c:	24025e20 	.word	0x24025e20
 8015860:	4613      	mov	r3, r2
 8015862:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8015864:	469e      	mov	lr, r3
 8015866:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8015868:	469c      	mov	ip, r3
 801586a:	9111      	str	r1, [sp, #68]	@ 0x44
 801586c:	f04f 0900 	mov.w	r9, #0
 8015870:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8015874:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8015878:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 801587c:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8015880:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8015884:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8015888:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 801588c:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8015890:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8015894:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8015898:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 801589c:	f1bc 0f00 	cmp.w	ip, #0
 80158a0:	d147      	bne.n	8015932 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 80158a2:	eb03 0c07 	add.w	ip, r3, r7
 80158a6:	1ad7      	subs	r7, r2, r3
 80158a8:	f1b9 0f00 	cmp.w	r9, #0
 80158ac:	d009      	beq.n	80158c2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 80158ae:	9029      	str	r0, [sp, #164]	@ 0xa4
 80158b0:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 80158b4:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 80158b8:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 80158bc:	912d      	str	r1, [sp, #180]	@ 0xb4
 80158be:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 80158c2:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 80158c4:	f04f 0800 	mov.w	r8, #0
 80158c8:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 80158cc:	9111      	str	r1, [sp, #68]	@ 0x44
 80158ce:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 80158d2:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 80158d6:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 80158da:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 80158de:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 80158e2:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 80158e6:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 80158ea:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 80158ee:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 80158f2:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 80158f6:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 80158fa:	f1be 0f00 	cmp.w	lr, #0
 80158fe:	d031      	beq.n	8015964 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8015900:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015902:	4450      	add	r0, sl
 8015904:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015908:	4431      	add	r1, r6
 801590a:	ee37 7a04 	vadd.f32	s14, s14, s8
 801590e:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015912:	4549      	cmp	r1, r9
 8015914:	db08      	blt.n	8015928 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8015916:	ee77 7a85 	vadd.f32	s15, s15, s10
 801591a:	3001      	adds	r0, #1
 801591c:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015920:	eba1 0109 	sub.w	r1, r1, r9
 8015924:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015928:	f10e 3eff 	add.w	lr, lr, #4294967295
 801592c:	f04f 0801 	mov.w	r8, #1
 8015930:	e7e3      	b.n	80158fa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8015932:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015934:	4450      	add	r0, sl
 8015936:	ee37 7a24 	vadd.f32	s14, s14, s9
 801593a:	4431      	add	r1, r6
 801593c:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015940:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015944:	4541      	cmp	r1, r8
 8015946:	db08      	blt.n	801595a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8015948:	ee76 6a85 	vadd.f32	s13, s13, s10
 801594c:	3001      	adds	r0, #1
 801594e:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015952:	eba1 0108 	sub.w	r1, r1, r8
 8015956:	ee77 7a86 	vadd.f32	s15, s15, s12
 801595a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801595e:	f04f 0901 	mov.w	r9, #1
 8015962:	e79b      	b.n	801589c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8015964:	449c      	add	ip, r3
 8015966:	1aff      	subs	r7, r7, r3
 8015968:	f1b8 0f00 	cmp.w	r8, #0
 801596c:	d009      	beq.n	8015982 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 801596e:	9019      	str	r0, [sp, #100]	@ 0x64
 8015970:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015974:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015978:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 801597c:	911d      	str	r1, [sp, #116]	@ 0x74
 801597e:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015982:	1ad2      	subs	r2, r2, r3
 8015984:	e68b      	b.n	801569e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8015986:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015988:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 801598a:	2b00      	cmp	r3, #0
 801598c:	f000 80d1 	beq.w	8015b32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8015990:	ad19      	add	r5, sp, #100	@ 0x64
 8015992:	ac39      	add	r4, sp, #228	@ 0xe4
 8015994:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8015996:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 801599a:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801599e:	930c      	str	r3, [sp, #48]	@ 0x30
 80159a0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80159a2:	6963      	ldr	r3, [r4, #20]
 80159a4:	440b      	add	r3, r1
 80159a6:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80159aa:	4408      	add	r0, r1
 80159ac:	b200      	sxth	r0, r0
 80159ae:	4283      	cmp	r3, r0
 80159b0:	900d      	str	r0, [sp, #52]	@ 0x34
 80159b2:	f280 80c1 	bge.w	8015b38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 80159b6:	428b      	cmp	r3, r1
 80159b8:	da08      	bge.n	80159cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80159ba:	2a00      	cmp	r2, #0
 80159bc:	dd06      	ble.n	80159cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 80159be:	1acb      	subs	r3, r1, r3
 80159c0:	429a      	cmp	r2, r3
 80159c2:	f2c0 80bb 	blt.w	8015b3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	f300 80b9 	bgt.w	8015b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 80159cc:	6967      	ldr	r7, [r4, #20]
 80159ce:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80159d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80159d4:	443b      	add	r3, r7
 80159d6:	461f      	mov	r7, r3
 80159d8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80159da:	1bdf      	subs	r7, r3, r7
 80159dc:	4297      	cmp	r7, r2
 80159de:	bfa8      	it	ge
 80159e0:	4617      	movge	r7, r2
 80159e2:	2f00      	cmp	r7, #0
 80159e4:	f340 813c 	ble.w	8015c60 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 80159e8:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80159ea:	6829      	ldr	r1, [r5, #0]
 80159ec:	f9b3 2000 	ldrsh.w	r2, [r3]
 80159f0:	f9bb 3000 	ldrsh.w	r3, [fp]
 80159f4:	4411      	add	r1, r2
 80159f6:	6820      	ldr	r0, [r4, #0]
 80159f8:	4299      	cmp	r1, r3
 80159fa:	dd1a      	ble.n	8015a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 80159fc:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8015a00:	4402      	add	r2, r0
 8015a02:	440b      	add	r3, r1
 8015a04:	b21b      	sxth	r3, r3
 8015a06:	429a      	cmp	r2, r3
 8015a08:	dc13      	bgt.n	8015a32 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8015a0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015a0c:	a912      	add	r1, sp, #72	@ 0x48
 8015a0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8015a10:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8015a12:	681b      	ldr	r3, [r3, #0]
 8015a14:	9206      	str	r2, [sp, #24]
 8015a16:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8015a18:	9500      	str	r5, [sp, #0]
 8015a1a:	9205      	str	r2, [sp, #20]
 8015a1c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8015a1e:	e9cd b203 	strd	fp, r2, [sp, #12]
 8015a22:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8015a24:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8015a28:	aa49      	add	r2, sp, #292	@ 0x124
 8015a2a:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8015a2e:	4623      	mov	r3, r4
 8015a30:	47c8      	blx	r9
 8015a32:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8015a36:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8015a3a:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8015a3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015a42:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8015a46:	68a1      	ldr	r1, [r4, #8]
 8015a48:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015a4c:	ed94 6a08 	vldr	s12, [r4, #32]
 8015a50:	edd4 6a07 	vldr	s13, [r4, #28]
 8015a54:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015a58:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015a5c:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015a60:	e9d4 2300 	ldrd	r2, r3, [r4]
 8015a64:	edc4 6a07 	vstr	s13, [r4, #28]
 8015a68:	441a      	add	r2, r3
 8015a6a:	6963      	ldr	r3, [r4, #20]
 8015a6c:	3301      	adds	r3, #1
 8015a6e:	6022      	str	r2, [r4, #0]
 8015a70:	6163      	str	r3, [r4, #20]
 8015a72:	69a3      	ldr	r3, [r4, #24]
 8015a74:	3b01      	subs	r3, #1
 8015a76:	61a3      	str	r3, [r4, #24]
 8015a78:	6923      	ldr	r3, [r4, #16]
 8015a7a:	440b      	add	r3, r1
 8015a7c:	68e1      	ldr	r1, [r4, #12]
 8015a7e:	428b      	cmp	r3, r1
 8015a80:	6123      	str	r3, [r4, #16]
 8015a82:	db15      	blt.n	8015ab0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8015a84:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8015a88:	3201      	adds	r2, #1
 8015a8a:	1a5b      	subs	r3, r3, r1
 8015a8c:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015a90:	6022      	str	r2, [r4, #0]
 8015a92:	6123      	str	r3, [r4, #16]
 8015a94:	edc4 6a07 	vstr	s13, [r4, #28]
 8015a98:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8015a9c:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015aa0:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8015aa4:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8015aa8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015aac:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8015ab0:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8015ab4:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8015ab8:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8015abc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8015ac0:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8015ac4:	68a9      	ldr	r1, [r5, #8]
 8015ac6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8015aca:	ed95 6a08 	vldr	s12, [r5, #32]
 8015ace:	edd5 6a07 	vldr	s13, [r5, #28]
 8015ad2:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015ad6:	ee76 6a86 	vadd.f32	s13, s13, s12
 8015ada:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015ade:	e9d5 2300 	ldrd	r2, r3, [r5]
 8015ae2:	edc5 6a07 	vstr	s13, [r5, #28]
 8015ae6:	441a      	add	r2, r3
 8015ae8:	696b      	ldr	r3, [r5, #20]
 8015aea:	3301      	adds	r3, #1
 8015aec:	602a      	str	r2, [r5, #0]
 8015aee:	616b      	str	r3, [r5, #20]
 8015af0:	69ab      	ldr	r3, [r5, #24]
 8015af2:	3b01      	subs	r3, #1
 8015af4:	61ab      	str	r3, [r5, #24]
 8015af6:	692b      	ldr	r3, [r5, #16]
 8015af8:	440b      	add	r3, r1
 8015afa:	68e9      	ldr	r1, [r5, #12]
 8015afc:	428b      	cmp	r3, r1
 8015afe:	612b      	str	r3, [r5, #16]
 8015b00:	db15      	blt.n	8015b2e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8015b02:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8015b06:	3201      	adds	r2, #1
 8015b08:	1a5b      	subs	r3, r3, r1
 8015b0a:	ee76 6a26 	vadd.f32	s13, s12, s13
 8015b0e:	602a      	str	r2, [r5, #0]
 8015b10:	612b      	str	r3, [r5, #16]
 8015b12:	edc5 6a07 	vstr	s13, [r5, #28]
 8015b16:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8015b1a:	ee36 7a87 	vadd.f32	s14, s13, s14
 8015b1e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8015b22:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8015b26:	ee77 7a27 	vadd.f32	s15, s14, s15
 8015b2a:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8015b2e:	3f01      	subs	r7, #1
 8015b30:	e757      	b.n	80159e2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8015b32:	ad39      	add	r5, sp, #228	@ 0xe4
 8015b34:	ac19      	add	r4, sp, #100	@ 0x64
 8015b36:	e72d      	b.n	8015994 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8015b38:	4613      	mov	r3, r2
 8015b3a:	e744      	b.n	80159c6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8015b3c:	4613      	mov	r3, r2
 8015b3e:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8015b40:	469e      	mov	lr, r3
 8015b42:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8015b46:	461f      	mov	r7, r3
 8015b48:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8015b4c:	f04f 0900 	mov.w	r9, #0
 8015b50:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8015b54:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8015b58:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8015b5c:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8015b60:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8015b64:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8015b66:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8015b6a:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8015b6e:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8015b72:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8015b76:	960e      	str	r6, [sp, #56]	@ 0x38
 8015b78:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8015b7c:	2f00      	cmp	r7, #0
 8015b7e:	d146      	bne.n	8015c0e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8015b80:	449c      	add	ip, r3
 8015b82:	1ad7      	subs	r7, r2, r3
 8015b84:	f1b9 0f00 	cmp.w	r9, #0
 8015b88:	d009      	beq.n	8015b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8015b8a:	9039      	str	r0, [sp, #228]	@ 0xe4
 8015b8c:	913d      	str	r1, [sp, #244]	@ 0xf4
 8015b8e:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8015b92:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8015b96:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8015b9a:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8015b9e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8015ba0:	f04f 0800 	mov.w	r8, #0
 8015ba4:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8015ba8:	910e      	str	r1, [sp, #56]	@ 0x38
 8015baa:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8015bae:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8015bb2:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8015bb6:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8015bba:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8015bbe:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8015bc2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8015bc6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8015bca:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8015bce:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8015bd2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8015bd6:	f1be 0f00 	cmp.w	lr, #0
 8015bda:	d030      	beq.n	8015c3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8015bdc:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015bde:	4450      	add	r0, sl
 8015be0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8015be4:	4431      	add	r1, r6
 8015be6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8015bea:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8015bee:	4549      	cmp	r1, r9
 8015bf0:	db08      	blt.n	8015c04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8015bf2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8015bf6:	3001      	adds	r0, #1
 8015bf8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8015bfc:	eba1 0109 	sub.w	r1, r1, r9
 8015c00:	ee37 7a06 	vadd.f32	s14, s14, s12
 8015c04:	f10e 3eff 	add.w	lr, lr, #4294967295
 8015c08:	f04f 0801 	mov.w	r8, #1
 8015c0c:	e7e3      	b.n	8015bd6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8015c0e:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8015c10:	4450      	add	r0, sl
 8015c12:	ee37 7a24 	vadd.f32	s14, s14, s9
 8015c16:	4431      	add	r1, r6
 8015c18:	ee77 7a84 	vadd.f32	s15, s15, s8
 8015c1c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8015c20:	4541      	cmp	r1, r8
 8015c22:	db08      	blt.n	8015c36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8015c24:	ee76 6a85 	vadd.f32	s13, s13, s10
 8015c28:	3001      	adds	r0, #1
 8015c2a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8015c2e:	eba1 0108 	sub.w	r1, r1, r8
 8015c32:	ee77 7a86 	vadd.f32	s15, s15, s12
 8015c36:	3f01      	subs	r7, #1
 8015c38:	f04f 0901 	mov.w	r9, #1
 8015c3c:	e79e      	b.n	8015b7c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8015c3e:	449c      	add	ip, r3
 8015c40:	1aff      	subs	r7, r7, r3
 8015c42:	f1b8 0f00 	cmp.w	r8, #0
 8015c46:	d009      	beq.n	8015c5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8015c48:	9019      	str	r0, [sp, #100]	@ 0x64
 8015c4a:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8015c4e:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8015c52:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8015c56:	911d      	str	r1, [sp, #116]	@ 0x74
 8015c58:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8015c5c:	1ad2      	subs	r2, r2, r3
 8015c5e:	e6b5      	b.n	80159cc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8015c60:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8015c62:	681b      	ldr	r3, [r3, #0]
 8015c64:	b923      	cbnz	r3, 8015c70 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8015c66:	4b04      	ldr	r3, [pc, #16]	@ (8015c78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8015c68:	6818      	ldr	r0, [r3, #0]
 8015c6a:	6803      	ldr	r3, [r0, #0]
 8015c6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015c6e:	4798      	blx	r3
 8015c70:	b05b      	add	sp, #364	@ 0x16c
 8015c72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015c76:	bf00      	nop
 8015c78:	24025e20 	.word	0x24025e20

08015c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>:
 8015c7c:	b570      	push	{r4, r5, r6, lr}
 8015c7e:	4604      	mov	r4, r0
 8015c80:	2500      	movs	r5, #0
 8015c82:	9805      	ldr	r0, [sp, #20]
 8015c84:	f89d 601c 	ldrb.w	r6, [sp, #28]
 8015c88:	6061      	str	r1, [r4, #4]
 8015c8a:	8263      	strh	r3, [r4, #18]
 8015c8c:	f89d 1010 	ldrb.w	r1, [sp, #16]
 8015c90:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8015c94:	8025      	strh	r5, [r4, #0]
 8015c96:	7221      	strb	r1, [r4, #8]
 8015c98:	7266      	strb	r6, [r4, #9]
 8015c9a:	60e0      	str	r0, [r4, #12]
 8015c9c:	8222      	strh	r2, [r4, #16]
 8015c9e:	82a3      	strh	r3, [r4, #20]
 8015ca0:	82e5      	strh	r5, [r4, #22]
 8015ca2:	8325      	strh	r5, [r4, #24]
 8015ca4:	8365      	strh	r5, [r4, #26]
 8015ca6:	83a5      	strh	r5, [r4, #28]
 8015ca8:	83e5      	strh	r5, [r4, #30]
 8015caa:	8425      	strh	r5, [r4, #32]
 8015cac:	f884 5022 	strb.w	r5, [r4, #34]	@ 0x22
 8015cb0:	b32e      	cbz	r6, 8015cfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015cb2:	6803      	ldr	r3, [r0, #0]
 8015cb4:	695b      	ldr	r3, [r3, #20]
 8015cb6:	4798      	blx	r3
 8015cb8:	4606      	mov	r6, r0
 8015cba:	b300      	cbz	r0, 8015cfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015cbc:	68e0      	ldr	r0, [r4, #12]
 8015cbe:	4631      	mov	r1, r6
 8015cc0:	6803      	ldr	r3, [r0, #0]
 8015cc2:	68db      	ldr	r3, [r3, #12]
 8015cc4:	4798      	blx	r3
 8015cc6:	4605      	mov	r5, r0
 8015cc8:	b1c8      	cbz	r0, 8015cfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015cca:	7b43      	ldrb	r3, [r0, #13]
 8015ccc:	7a82      	ldrb	r2, [r0, #10]
 8015cce:	005b      	lsls	r3, r3, #1
 8015cd0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015cd4:	4313      	orrs	r3, r2
 8015cd6:	8423      	strh	r3, [r4, #32]
 8015cd8:	7a63      	ldrb	r3, [r4, #9]
 8015cda:	2b06      	cmp	r3, #6
 8015cdc:	d10f      	bne.n	8015cfe <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE+0x82>
 8015cde:	68e0      	ldr	r0, [r4, #12]
 8015ce0:	462a      	mov	r2, r5
 8015ce2:	4631      	mov	r1, r6
 8015ce4:	6803      	ldr	r3, [r0, #0]
 8015ce6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015ce8:	4798      	blx	r3
 8015cea:	7b6b      	ldrb	r3, [r5, #13]
 8015cec:	005b      	lsls	r3, r3, #1
 8015cee:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015cf2:	7aab      	ldrb	r3, [r5, #10]
 8015cf4:	4313      	orrs	r3, r2
 8015cf6:	4418      	add	r0, r3
 8015cf8:	8c23      	ldrh	r3, [r4, #32]
 8015cfa:	4418      	add	r0, r3
 8015cfc:	8420      	strh	r0, [r4, #32]
 8015cfe:	4620      	mov	r0, r4
 8015d00:	bd70      	pop	{r4, r5, r6, pc}

08015d02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>:
 8015d02:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d06:	2400      	movs	r4, #0
 8015d08:	b085      	sub	sp, #20
 8015d0a:	4681      	mov	r9, r0
 8015d0c:	4688      	mov	r8, r1
 8015d0e:	4692      	mov	sl, r2
 8015d10:	469b      	mov	fp, r3
 8015d12:	4627      	mov	r7, r4
 8015d14:	4625      	mov	r5, r4
 8015d16:	4626      	mov	r6, r4
 8015d18:	4554      	cmp	r4, sl
 8015d1a:	da2a      	bge.n	8015d72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015d1c:	2300      	movs	r3, #0
 8015d1e:	9303      	str	r3, [sp, #12]
 8015d20:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015d24:	429d      	cmp	r5, r3
 8015d26:	d004      	beq.n	8015d32 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x30>
 8015d28:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015d2c:	429d      	cmp	r5, r3
 8015d2e:	bf18      	it	ne
 8015d30:	462f      	movne	r7, r5
 8015d32:	ab03      	add	r3, sp, #12
 8015d34:	4642      	mov	r2, r8
 8015d36:	4659      	mov	r1, fp
 8015d38:	4648      	mov	r0, r9
 8015d3a:	f003 fb03 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8015d3e:	4605      	mov	r5, r0
 8015d40:	b1b8      	cbz	r0, 8015d72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015d42:	280a      	cmp	r0, #10
 8015d44:	d015      	beq.n	8015d72 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x70>
 8015d46:	9a03      	ldr	r2, [sp, #12]
 8015d48:	b18a      	cbz	r2, 8015d6e <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x6c>
 8015d4a:	7b50      	ldrb	r0, [r2, #13]
 8015d4c:	4639      	mov	r1, r7
 8015d4e:	7a93      	ldrb	r3, [r2, #10]
 8015d50:	0040      	lsls	r0, r0, #1
 8015d52:	8895      	ldrh	r5, [r2, #4]
 8015d54:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8015d58:	4303      	orrs	r3, r0
 8015d5a:	4640      	mov	r0, r8
 8015d5c:	9301      	str	r3, [sp, #4]
 8015d5e:	f8d8 3000 	ldr.w	r3, [r8]
 8015d62:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015d64:	4798      	blx	r3
 8015d66:	9b01      	ldr	r3, [sp, #4]
 8015d68:	4418      	add	r0, r3
 8015d6a:	4406      	add	r6, r0
 8015d6c:	b2b6      	uxth	r6, r6
 8015d6e:	3401      	adds	r4, #1
 8015d70:	e7d2      	b.n	8015d18 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih+0x16>
 8015d72:	4630      	mov	r0, r6
 8015d74:	b005      	add	sp, #20
 8015d76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015d7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>:
 8015d7a:	2a02      	cmp	r2, #2
 8015d7c:	b530      	push	{r4, r5, lr}
 8015d7e:	d011      	beq.n	8015da4 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x2a>
 8015d80:	2a03      	cmp	r2, #3
 8015d82:	d01c      	beq.n	8015dbe <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x44>
 8015d84:	2a01      	cmp	r2, #1
 8015d86:	d10c      	bne.n	8015da2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015d88:	888b      	ldrh	r3, [r1, #4]
 8015d8a:	8801      	ldrh	r1, [r0, #0]
 8015d8c:	f9b0 2004 	ldrsh.w	r2, [r0, #4]
 8015d90:	1a5b      	subs	r3, r3, r1
 8015d92:	8844      	ldrh	r4, [r0, #2]
 8015d94:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 8015d98:	1a9b      	subs	r3, r3, r2
 8015d9a:	8004      	strh	r4, [r0, #0]
 8015d9c:	8081      	strh	r1, [r0, #4]
 8015d9e:	8043      	strh	r3, [r0, #2]
 8015da0:	80c2      	strh	r2, [r0, #6]
 8015da2:	bd30      	pop	{r4, r5, pc}
 8015da4:	88cb      	ldrh	r3, [r1, #6]
 8015da6:	8842      	ldrh	r2, [r0, #2]
 8015da8:	1a9b      	subs	r3, r3, r2
 8015daa:	88c2      	ldrh	r2, [r0, #6]
 8015dac:	1a9b      	subs	r3, r3, r2
 8015dae:	888a      	ldrh	r2, [r1, #4]
 8015db0:	8801      	ldrh	r1, [r0, #0]
 8015db2:	8043      	strh	r3, [r0, #2]
 8015db4:	1a52      	subs	r2, r2, r1
 8015db6:	8881      	ldrh	r1, [r0, #4]
 8015db8:	1a52      	subs	r2, r2, r1
 8015dba:	8002      	strh	r2, [r0, #0]
 8015dbc:	e7f1      	b.n	8015da2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>
 8015dbe:	88cb      	ldrh	r3, [r1, #6]
 8015dc0:	8841      	ldrh	r1, [r0, #2]
 8015dc2:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8015dc6:	1a5b      	subs	r3, r3, r1
 8015dc8:	f9b0 5000 	ldrsh.w	r5, [r0]
 8015dcc:	f9b0 4004 	ldrsh.w	r4, [r0, #4]
 8015dd0:	1a9b      	subs	r3, r3, r2
 8015dd2:	8045      	strh	r5, [r0, #2]
 8015dd4:	8082      	strh	r2, [r0, #4]
 8015dd6:	8003      	strh	r3, [r0, #0]
 8015dd8:	80c4      	strh	r4, [r0, #6]
 8015dda:	e7e2      	b.n	8015da2 <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE+0x28>

08015ddc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>:
 8015ddc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015de0:	b09f      	sub	sp, #124	@ 0x7c
 8015de2:	920f      	str	r2, [sp, #60]	@ 0x3c
 8015de4:	9312      	str	r3, [sp, #72]	@ 0x48
 8015de6:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015de8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015dea:	8812      	ldrh	r2, [r2, #0]
 8015dec:	889b      	ldrh	r3, [r3, #4]
 8015dee:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8015df0:	4413      	add	r3, r2
 8015df2:	900e      	str	r0, [sp, #56]	@ 0x38
 8015df4:	6828      	ldr	r0, [r5, #0]
 8015df6:	b21b      	sxth	r3, r3
 8015df8:	9117      	str	r1, [sp, #92]	@ 0x5c
 8015dfa:	f89d b0ac 	ldrb.w	fp, [sp, #172]	@ 0xac
 8015dfe:	9311      	str	r3, [sp, #68]	@ 0x44
 8015e00:	6803      	ldr	r3, [r0, #0]
 8015e02:	f89d 40b8 	ldrb.w	r4, [sp, #184]	@ 0xb8
 8015e06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015e08:	4798      	blx	r3
 8015e0a:	682b      	ldr	r3, [r5, #0]
 8015e0c:	9013      	str	r0, [sp, #76]	@ 0x4c
 8015e0e:	7b1a      	ldrb	r2, [r3, #12]
 8015e10:	7adb      	ldrb	r3, [r3, #11]
 8015e12:	9215      	str	r2, [sp, #84]	@ 0x54
 8015e14:	9316      	str	r3, [sp, #88]	@ 0x58
 8015e16:	f9bd 60a0 	ldrsh.w	r6, [sp, #160]	@ 0xa0
 8015e1a:	2c00      	cmp	r4, #0
 8015e1c:	d067      	beq.n	8015eee <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x112>
 8015e1e:	7c2b      	ldrb	r3, [r5, #16]
 8015e20:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8015e22:	2b06      	cmp	r3, #6
 8015e24:	bf14      	ite	ne
 8015e26:	2301      	movne	r3, #1
 8015e28:	2302      	moveq	r3, #2
 8015e2a:	4413      	add	r3, r2
 8015e2c:	f04f 0900 	mov.w	r9, #0
 8015e30:	9310      	str	r3, [sp, #64]	@ 0x40
 8015e32:	464c      	mov	r4, r9
 8015e34:	f8cd 9034 	str.w	r9, [sp, #52]	@ 0x34
 8015e38:	f8cd 9030 	str.w	r9, [sp, #48]	@ 0x30
 8015e3c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e40:	4293      	cmp	r3, r2
 8015e42:	f280 808b 	bge.w	8015f5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015e46:	2300      	movs	r3, #0
 8015e48:	e9cd 331c 	strd	r3, r3, [sp, #112]	@ 0x70
 8015e4c:	f88d 306f 	strb.w	r3, [sp, #111]	@ 0x6f
 8015e50:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015e54:	429c      	cmp	r4, r3
 8015e56:	d006      	beq.n	8015e66 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x8a>
 8015e58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015e5a:	f242 020b 	movw	r2, #8203	@ 0x200b
 8015e5e:	4294      	cmp	r4, r2
 8015e60:	bf18      	it	ne
 8015e62:	4623      	movne	r3, r4
 8015e64:	930c      	str	r3, [sp, #48]	@ 0x30
 8015e66:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8015e68:	992d      	ldr	r1, [sp, #180]	@ 0xb4
 8015e6a:	682a      	ldr	r2, [r5, #0]
 8015e6c:	428b      	cmp	r3, r1
 8015e6e:	db40      	blt.n	8015ef2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x116>
 8015e70:	6813      	ldr	r3, [r2, #0]
 8015e72:	4610      	mov	r0, r2
 8015e74:	695b      	ldr	r3, [r3, #20]
 8015e76:	4798      	blx	r3
 8015e78:	4604      	mov	r4, r0
 8015e7a:	6828      	ldr	r0, [r5, #0]
 8015e7c:	aa1d      	add	r2, sp, #116	@ 0x74
 8015e7e:	4621      	mov	r1, r4
 8015e80:	6803      	ldr	r3, [r0, #0]
 8015e82:	689f      	ldr	r7, [r3, #8]
 8015e84:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015e88:	47b8      	blx	r7
 8015e8a:	901c      	str	r0, [sp, #112]	@ 0x70
 8015e8c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015e90:	429c      	cmp	r4, r3
 8015e92:	f000 80eb 	beq.w	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015e96:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015e9a:	429c      	cmp	r4, r3
 8015e9c:	f000 80e6 	beq.w	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015ea0:	2c00      	cmp	r4, #0
 8015ea2:	f000 810d 	beq.w	80160c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015ea6:	2c0a      	cmp	r4, #10
 8015ea8:	d05e      	beq.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 8015eaa:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015eac:	b36a      	cbz	r2, 8015f0a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x12e>
 8015eae:	8894      	ldrh	r4, [r2, #4]
 8015eb0:	f1bb 0f00 	cmp.w	fp, #0
 8015eb4:	d03a      	beq.n	8015f2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x150>
 8015eb6:	f892 900d 	ldrb.w	r9, [r2, #13]
 8015eba:	f1bb 0f01 	cmp.w	fp, #1
 8015ebe:	ea4f 0949 	mov.w	r9, r9, lsl #1
 8015ec2:	f409 7380 	and.w	r3, r9, #256	@ 0x100
 8015ec6:	f892 900a 	ldrb.w	r9, [r2, #10]
 8015eca:	ea49 0903 	orr.w	r9, r9, r3
 8015ece:	d133      	bne.n	8015f38 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x15c>
 8015ed0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015ed2:	eba6 0609 	sub.w	r6, r6, r9
 8015ed6:	2b00      	cmp	r3, #0
 8015ed8:	d14d      	bne.n	8015f76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015eda:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8015edc:	eb09 0306 	add.w	r3, r9, r6
 8015ee0:	4413      	add	r3, r2
 8015ee2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8015ee4:	f9b2 2000 	ldrsh.w	r2, [r2]
 8015ee8:	4293      	cmp	r3, r2
 8015eea:	da4e      	bge.n	8015f8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015eec:	e036      	b.n	8015f5c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x180>
 8015eee:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8015ef0:	e79c      	b.n	8015e2c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x50>
 8015ef2:	f10d 036f 	add.w	r3, sp, #111	@ 0x6f
 8015ef6:	4659      	mov	r1, fp
 8015ef8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8015efa:	9301      	str	r3, [sp, #4]
 8015efc:	ab1d      	add	r3, sp, #116	@ 0x74
 8015efe:	9300      	str	r3, [sp, #0]
 8015f00:	ab1c      	add	r3, sp, #112	@ 0x70
 8015f02:	f003 fa68 	bl	80193d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>
 8015f06:	4604      	mov	r4, r0
 8015f08:	e7c0      	b.n	8015e8c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xb0>
 8015f0a:	6828      	ldr	r0, [r5, #0]
 8015f0c:	6803      	ldr	r3, [r0, #0]
 8015f0e:	691b      	ldr	r3, [r3, #16]
 8015f10:	4798      	blx	r3
 8015f12:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8015f16:	4298      	cmp	r0, r3
 8015f18:	f000 80a8 	beq.w	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015f1c:	f242 030b 	movw	r3, #8203	@ 0x200b
 8015f20:	4298      	cmp	r0, r3
 8015f22:	f000 80a3 	beq.w	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015f26:	f1bb 0f00 	cmp.w	fp, #0
 8015f2a:	d100      	bne.n	8015f2e <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x152>
 8015f2c:	444e      	add	r6, r9
 8015f2e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015f30:	2a00      	cmp	r2, #0
 8015f32:	d1c0      	bne.n	8015eb6 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xda>
 8015f34:	4691      	mov	r9, r2
 8015f36:	e099      	b.n	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015f38:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	f000 80c2 	beq.w	80160c4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e8>
 8015f40:	f1bb 0f00 	cmp.w	fp, #0
 8015f44:	d117      	bne.n	8015f76 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x19a>
 8015f46:	6828      	ldr	r0, [r5, #0]
 8015f48:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f4a:	6803      	ldr	r3, [r0, #0]
 8015f4c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f4e:	4798      	blx	r3
 8015f50:	4406      	add	r6, r0
 8015f52:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8015f54:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8015f56:	1af3      	subs	r3, r6, r3
 8015f58:	4293      	cmp	r3, r2
 8015f5a:	dd16      	ble.n	8015f8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>
 8015f5c:	2c00      	cmp	r4, #0
 8015f5e:	f000 80af 	beq.w	80160c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 8015f62:	2c0a      	cmp	r4, #10
 8015f64:	f040 809d 	bne.w	80160a2 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c6>
 8015f68:	240a      	movs	r4, #10
 8015f6a:	fab4 f084 	clz	r0, r4
 8015f6e:	0940      	lsrs	r0, r0, #5
 8015f70:	b01f      	add	sp, #124	@ 0x7c
 8015f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015f76:	6828      	ldr	r0, [r5, #0]
 8015f78:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8015f7a:	6803      	ldr	r3, [r0, #0]
 8015f7c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015f7e:	4798      	blx	r3
 8015f80:	f1bb 0f01 	cmp.w	fp, #1
 8015f84:	eba6 0600 	sub.w	r6, r6, r0
 8015f88:	d0a7      	beq.n	8015eda <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0xfe>
 8015f8a:	981c      	ldr	r0, [sp, #112]	@ 0x70
 8015f8c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8015f8e:	f990 1009 	ldrsb.w	r1, [r0, #9]
 8015f92:	f9b3 8000 	ldrsh.w	r8, [r3]
 8015f96:	7b43      	ldrb	r3, [r0, #13]
 8015f98:	4431      	add	r1, r6
 8015f9a:	015b      	lsls	r3, r3, #5
 8015f9c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015fa0:	7983      	ldrb	r3, [r0, #6]
 8015fa2:	4313      	orrs	r3, r2
 8015fa4:	440b      	add	r3, r1
 8015fa6:	4543      	cmp	r3, r8
 8015fa8:	db60      	blt.n	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015faa:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8015fac:	4299      	cmp	r1, r3
 8015fae:	da5d      	bge.n	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 8015fb0:	6828      	ldr	r0, [r5, #0]
 8015fb2:	45b0      	cmp	r8, r6
 8015fb4:	6803      	ldr	r3, [r0, #0]
 8015fb6:	bfcc      	ite	gt
 8015fb8:	eba8 0806 	subgt.w	r8, r8, r6
 8015fbc:	f04f 0800 	movle.w	r8, #0
 8015fc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015fc2:	bfc8      	it	gt
 8015fc4:	fa1f f888 	uxthgt.w	r8, r8
 8015fc8:	4798      	blx	r3
 8015fca:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8015fcc:	7b53      	ldrb	r3, [r2, #13]
 8015fce:	00d9      	lsls	r1, r3, #3
 8015fd0:	f401 7780 	and.w	r7, r1, #256	@ 0x100
 8015fd4:	7a11      	ldrb	r1, [r2, #8]
 8015fd6:	4339      	orrs	r1, r7
 8015fd8:	065f      	lsls	r7, r3, #25
 8015fda:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015fdc:	bf48      	it	mi
 8015fde:	f5a1 7100 	submi.w	r1, r1, #512	@ 0x200
 8015fe2:	4407      	add	r7, r0
 8015fe4:	bf48      	it	mi
 8015fe6:	b209      	sxthmi	r1, r1
 8015fe8:	1a7f      	subs	r7, r7, r1
 8015fea:	9929      	ldr	r1, [sp, #164]	@ 0xa4
 8015fec:	b2bf      	uxth	r7, r7
 8015fee:	f9b1 1002 	ldrsh.w	r1, [r1, #2]
 8015ff2:	fa0f fa87 	sxth.w	sl, r7
 8015ff6:	4551      	cmp	r1, sl
 8015ff8:	dd3c      	ble.n	8016074 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x298>
 8015ffa:	011b      	lsls	r3, r3, #4
 8015ffc:	79d0      	ldrb	r0, [r2, #7]
 8015ffe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016002:	4303      	orrs	r3, r0
 8016004:	449a      	add	sl, r3
 8016006:	4551      	cmp	r1, sl
 8016008:	dc30      	bgt.n	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 801600a:	1bcf      	subs	r7, r1, r7
 801600c:	468a      	mov	sl, r1
 801600e:	b23f      	sxth	r7, r7
 8016010:	9219      	str	r2, [sp, #100]	@ 0x64
 8016012:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8016014:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8016016:	6828      	ldr	r0, [r5, #0]
 8016018:	2a00      	cmp	r2, #0
 801601a:	d12d      	bne.n	8016078 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x29c>
 801601c:	9318      	str	r3, [sp, #96]	@ 0x60
 801601e:	b2bf      	uxth	r7, r7
 8016020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016022:	6819      	ldr	r1, [r3, #0]
 8016024:	6ccb      	ldr	r3, [r1, #76]	@ 0x4c
 8016026:	6801      	ldr	r1, [r0, #0]
 8016028:	9314      	str	r3, [sp, #80]	@ 0x50
 801602a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 801602c:	4788      	blx	r1
 801602e:	79a9      	ldrb	r1, [r5, #6]
 8016030:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8016032:	910b      	str	r1, [sp, #44]	@ 0x2c
 8016034:	7ba9      	ldrb	r1, [r5, #14]
 8016036:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8016038:	910a      	str	r1, [sp, #40]	@ 0x28
 801603a:	f89d 106f 	ldrb.w	r1, [sp, #111]	@ 0x6f
 801603e:	9109      	str	r1, [sp, #36]	@ 0x24
 8016040:	68a9      	ldr	r1, [r5, #8]
 8016042:	9306      	str	r3, [sp, #24]
 8016044:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8016046:	9205      	str	r2, [sp, #20]
 8016048:	9304      	str	r3, [sp, #16]
 801604a:	f8cd a004 	str.w	sl, [sp, #4]
 801604e:	e9cd 8702 	strd	r8, r7, [sp, #8]
 8016052:	44b0      	add	r8, r6
 8016054:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 8016056:	fa0f f388 	sxth.w	r3, r8
 801605a:	9300      	str	r3, [sp, #0]
 801605c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801605e:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8016062:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8016064:	681a      	ldr	r2, [r3, #0]
 8016066:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8016068:	685b      	ldr	r3, [r3, #4]
 801606a:	47b8      	blx	r7
 801606c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801606e:	3301      	adds	r3, #1
 8016070:	930d      	str	r3, [sp, #52]	@ 0x34
 8016072:	e6e3      	b.n	8015e3c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x60>
 8016074:	2700      	movs	r7, #0
 8016076:	e7cb      	b.n	8016010 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x234>
 8016078:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801607a:	f8d2 c008 	ldr.w	ip, [r2, #8]
 801607e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016080:	f8dc 1000 	ldr.w	r1, [ip]
 8016084:	e9cd 6204 	strd	r6, r2, [sp, #16]
 8016088:	79aa      	ldrb	r2, [r5, #6]
 801608a:	9203      	str	r2, [sp, #12]
 801608c:	7baa      	ldrb	r2, [r5, #14]
 801608e:	9202      	str	r2, [sp, #8]
 8016090:	68aa      	ldr	r2, [r5, #8]
 8016092:	e9cd 0200 	strd	r0, r2, [sp]
 8016096:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8016098:	4660      	mov	r0, ip
 801609a:	688f      	ldr	r7, [r1, #8]
 801609c:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801609e:	47b8      	blx	r7
 80160a0:	e7e4      	b.n	801606c <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x290>
 80160a2:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 80160a4:	3501      	adds	r5, #1
 80160a6:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 80160a8:	429d      	cmp	r5, r3
 80160aa:	f6bf af5e 	bge.w	8015f6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80160ae:	4659      	mov	r1, fp
 80160b0:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 80160b2:	f7ee f957 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80160b6:	4604      	mov	r4, r0
 80160b8:	b110      	cbz	r0, 80160c0 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2e4>
 80160ba:	280a      	cmp	r0, #10
 80160bc:	d1f2      	bne.n	80160a4 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x2c8>
 80160be:	e753      	b.n	8015f68 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18c>
 80160c0:	2400      	movs	r4, #0
 80160c2:	e752      	b.n	8015f6a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x18e>
 80160c4:	f1bb 0f00 	cmp.w	fp, #0
 80160c8:	f43f af43 	beq.w	8015f52 <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x176>
 80160cc:	e75d      	b.n	8015f8a <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib+0x1ae>

080160ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>:
 80160ce:	b530      	push	{r4, r5, lr}
 80160d0:	8ac4      	ldrh	r4, [r0, #22]
 80160d2:	8b45      	ldrh	r5, [r0, #26]
 80160d4:	8343      	strh	r3, [r0, #26]
 80160d6:	442c      	add	r4, r5
 80160d8:	1ae4      	subs	r4, r4, r3
 80160da:	8b83      	ldrh	r3, [r0, #28]
 80160dc:	82c4      	strh	r4, [r0, #22]
 80160de:	8b04      	ldrh	r4, [r0, #24]
 80160e0:	4422      	add	r2, r4
 80160e2:	440c      	add	r4, r1
 80160e4:	1a59      	subs	r1, r3, r1
 80160e6:	83c2      	strh	r2, [r0, #30]
 80160e8:	8304      	strh	r4, [r0, #24]
 80160ea:	8381      	strh	r1, [r0, #28]
 80160ec:	bd30      	pop	{r4, r5, pc}

080160ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>:
 80160ee:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160f2:	4604      	mov	r4, r0
 80160f4:	8a47      	ldrh	r7, [r0, #18]
 80160f6:	68c0      	ldr	r0, [r0, #12]
 80160f8:	b085      	sub	sp, #20
 80160fa:	6803      	ldr	r3, [r0, #0]
 80160fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80160fe:	4798      	blx	r3
 8016100:	f9b4 6014 	ldrsh.w	r6, [r4, #20]
 8016104:	7a63      	ldrb	r3, [r4, #9]
 8016106:	eb06 0640 	add.w	r6, r6, r0, lsl #1
 801610a:	3b01      	subs	r3, #1
 801610c:	42b7      	cmp	r7, r6
 801610e:	bfac      	ite	ge
 8016110:	f04f 0900 	movge.w	r9, #0
 8016114:	f04f 0901 	movlt.w	r9, #1
 8016118:	2b05      	cmp	r3, #5
 801611a:	d804      	bhi.n	8016126 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x38>
 801611c:	e8df f003 	tbb	[pc, r3]
 8016120:	470f0854 	.word	0x470f0854
 8016124:	4c4c      	.short	0x4c4c
 8016126:	2500      	movs	r5, #0
 8016128:	46a9      	mov	r9, r5
 801612a:	462e      	mov	r6, r5
 801612c:	462f      	mov	r7, r5
 801612e:	e00e      	b.n	801614e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 8016130:	42b7      	cmp	r7, r6
 8016132:	f04f 0500 	mov.w	r5, #0
 8016136:	bfb4      	ite	lt
 8016138:	2600      	movlt	r6, #0
 801613a:	2601      	movge	r6, #1
 801613c:	e7f6      	b.n	801612c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 801613e:	42b7      	cmp	r7, r6
 8016140:	464d      	mov	r5, r9
 8016142:	f04f 0900 	mov.w	r9, #0
 8016146:	bfb4      	ite	lt
 8016148:	2600      	movlt	r6, #0
 801614a:	2601      	movge	r6, #1
 801614c:	464f      	mov	r7, r9
 801614e:	f04f 0800 	mov.w	r8, #0
 8016152:	f8a4 8016 	strh.w	r8, [r4, #22]
 8016156:	f8a4 8018 	strh.w	r8, [r4, #24]
 801615a:	f8cd 8004 	str.w	r8, [sp, #4]
 801615e:	2300      	movs	r3, #0
 8016160:	9303      	str	r3, [sp, #12]
 8016162:	8823      	ldrh	r3, [r4, #0]
 8016164:	2b20      	cmp	r3, #32
 8016166:	d033      	beq.n	80161d0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xe2>
 8016168:	f242 010b 	movw	r1, #8203	@ 0x200b
 801616c:	1a5a      	subs	r2, r3, r1
 801616e:	f1d2 0a00 	rsbs	sl, r2, #0
 8016172:	eb4a 0a02 	adc.w	sl, sl, r2
 8016176:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 801617a:	4293      	cmp	r3, r2
 801617c:	d008      	beq.n	8016190 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 801617e:	428b      	cmp	r3, r1
 8016180:	9a01      	ldr	r2, [sp, #4]
 8016182:	bf0e      	itee	eq
 8016184:	f04f 0a01 	moveq.w	sl, #1
 8016188:	461a      	movne	r2, r3
 801618a:	f04f 0a00 	movne.w	sl, #0
 801618e:	9201      	str	r2, [sp, #4]
 8016190:	ab03      	add	r3, sp, #12
 8016192:	68e2      	ldr	r2, [r4, #12]
 8016194:	7a21      	ldrb	r1, [r4, #8]
 8016196:	6860      	ldr	r0, [r4, #4]
 8016198:	f003 f8d4 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 801619c:	8020      	strh	r0, [r4, #0]
 801619e:	b9d8      	cbnz	r0, 80161d8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xea>
 80161a0:	8ba2      	ldrh	r2, [r4, #28]
 80161a2:	2300      	movs	r3, #0
 80161a4:	4611      	mov	r1, r2
 80161a6:	4620      	mov	r0, r4
 80161a8:	f7ff ff91 	bl	80160ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80161ac:	e06e      	b.n	801628c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80161ae:	2500      	movs	r5, #0
 80161b0:	2701      	movs	r7, #1
 80161b2:	46a9      	mov	r9, r5
 80161b4:	462e      	mov	r6, r5
 80161b6:	e7ca      	b.n	801614e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80161b8:	42b7      	cmp	r7, r6
 80161ba:	f04f 0500 	mov.w	r5, #0
 80161be:	bfb4      	ite	lt
 80161c0:	2700      	movlt	r7, #0
 80161c2:	2701      	movge	r7, #1
 80161c4:	462e      	mov	r6, r5
 80161c6:	e7c2      	b.n	801614e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x60>
 80161c8:	2500      	movs	r5, #0
 80161ca:	2601      	movs	r6, #1
 80161cc:	46a9      	mov	r9, r5
 80161ce:	e7ad      	b.n	801612c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x3e>
 80161d0:	9301      	str	r3, [sp, #4]
 80161d2:	f04f 0a01 	mov.w	sl, #1
 80161d6:	e7db      	b.n	8016190 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xa2>
 80161d8:	8b63      	ldrh	r3, [r4, #26]
 80161da:	280a      	cmp	r0, #10
 80161dc:	f103 0301 	add.w	r3, r3, #1
 80161e0:	8363      	strh	r3, [r4, #26]
 80161e2:	d0dd      	beq.n	80161a0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb2>
 80161e4:	9a03      	ldr	r2, [sp, #12]
 80161e6:	bb62      	cbnz	r2, 8016242 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x154>
 80161e8:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80161ec:	4298      	cmp	r0, r3
 80161ee:	d003      	beq.n	80161f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 80161f0:	f242 030b 	movw	r3, #8203	@ 0x200b
 80161f4:	4298      	cmp	r0, r3
 80161f6:	d1b2      	bne.n	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80161f8:	8823      	ldrh	r3, [r4, #0]
 80161fa:	8ba1      	ldrh	r1, [r4, #28]
 80161fc:	2b20      	cmp	r3, #32
 80161fe:	d003      	beq.n	8016208 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x11a>
 8016200:	f242 000b 	movw	r0, #8203	@ 0x200b
 8016204:	4283      	cmp	r3, r0
 8016206:	d131      	bne.n	801626c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x17e>
 8016208:	f1ba 0f00 	cmp.w	sl, #0
 801620c:	bf0a      	itet	eq
 801620e:	4688      	moveq	r8, r1
 8016210:	4650      	movne	r0, sl
 8016212:	2001      	moveq	r0, #1
 8016214:	440a      	add	r2, r1
 8016216:	8b23      	ldrh	r3, [r4, #24]
 8016218:	f8b4 c010 	ldrh.w	ip, [r4, #16]
 801621c:	b292      	uxth	r2, r2
 801621e:	83a2      	strh	r2, [r4, #28]
 8016220:	4413      	add	r3, r2
 8016222:	f1b9 0f00 	cmp.w	r9, #0
 8016226:	d102      	bne.n	801622e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x140>
 8016228:	2d00      	cmp	r5, #0
 801622a:	d042      	beq.n	80162b2 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1c4>
 801622c:	b300      	cbz	r0, 8016270 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x182>
 801622e:	8c21      	ldrh	r1, [r4, #32]
 8016230:	4419      	add	r1, r3
 8016232:	458c      	cmp	ip, r1
 8016234:	da37      	bge.n	80162a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 8016236:	8ae1      	ldrh	r1, [r4, #22]
 8016238:	2900      	cmp	r1, #0
 801623a:	d034      	beq.n	80162a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1b8>
 801623c:	4563      	cmp	r3, ip
 801623e:	dd8e      	ble.n	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016240:	e01d      	b.n	801627e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x190>
 8016242:	8893      	ldrh	r3, [r2, #4]
 8016244:	9901      	ldr	r1, [sp, #4]
 8016246:	8023      	strh	r3, [r4, #0]
 8016248:	f892 b00d 	ldrb.w	fp, [r2, #13]
 801624c:	ea4f 0b4b 	mov.w	fp, fp, lsl #1
 8016250:	f40b 7080 	and.w	r0, fp, #256	@ 0x100
 8016254:	f892 b00a 	ldrb.w	fp, [r2, #10]
 8016258:	ea4b 0b00 	orr.w	fp, fp, r0
 801625c:	68e0      	ldr	r0, [r4, #12]
 801625e:	6803      	ldr	r3, [r0, #0]
 8016260:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016262:	4798      	blx	r3
 8016264:	eb0b 0200 	add.w	r2, fp, r0
 8016268:	b292      	uxth	r2, r2
 801626a:	e7c5      	b.n	80161f8 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x10a>
 801626c:	2000      	movs	r0, #0
 801626e:	e7d1      	b.n	8016214 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x126>
 8016270:	4563      	cmp	r3, ip
 8016272:	f77f af74 	ble.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 8016276:	8ae3      	ldrh	r3, [r4, #22]
 8016278:	2b00      	cmp	r3, #0
 801627a:	f43f af70 	beq.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 801627e:	2301      	movs	r3, #1
 8016280:	8c22      	ldrh	r2, [r4, #32]
 8016282:	f884 3022 	strb.w	r3, [r4, #34]	@ 0x22
 8016286:	8be3      	ldrh	r3, [r4, #30]
 8016288:	4413      	add	r3, r2
 801628a:	83e3      	strh	r3, [r4, #30]
 801628c:	68e0      	ldr	r0, [r4, #12]
 801628e:	6803      	ldr	r3, [r0, #0]
 8016290:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016292:	4798      	blx	r3
 8016294:	f9b4 3014 	ldrsh.w	r3, [r4, #20]
 8016298:	4418      	add	r0, r3
 801629a:	8a63      	ldrh	r3, [r4, #18]
 801629c:	1a18      	subs	r0, r3, r0
 801629e:	8260      	strh	r0, [r4, #18]
 80162a0:	b005      	add	sp, #20
 80162a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80162a6:	2300      	movs	r3, #0
 80162a8:	4611      	mov	r1, r2
 80162aa:	4620      	mov	r0, r4
 80162ac:	f7ff ff0f 	bl	80160ce <_ZN8touchgfx3LCD22WideTextInternalStruct7addWordEttt>
 80162b0:	e755      	b.n	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162b2:	4563      	cmp	r3, ip
 80162b4:	dd14      	ble.n	80162e0 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1f2>
 80162b6:	b117      	cbz	r7, 80162be <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1d0>
 80162b8:	2301      	movs	r3, #1
 80162ba:	460a      	mov	r2, r1
 80162bc:	e772      	b.n	80161a4 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb6>
 80162be:	2e00      	cmp	r6, #0
 80162c0:	f43f af4d 	beq.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162c4:	2800      	cmp	r0, #0
 80162c6:	f47f af4a 	bne.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162ca:	f1ba 0f00 	cmp.w	sl, #0
 80162ce:	d002      	beq.n	80162d6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1e8>
 80162d0:	2301      	movs	r3, #1
 80162d2:	4642      	mov	r2, r8
 80162d4:	e767      	b.n	80161a6 <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0xb8>
 80162d6:	8ae3      	ldrh	r3, [r4, #22]
 80162d8:	2b00      	cmp	r3, #0
 80162da:	f43f af40 	beq.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162de:	e7d5      	b.n	801628c <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x19e>
 80162e0:	2800      	cmp	r0, #0
 80162e2:	f47f af3c 	bne.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162e6:	f1ba 0f00 	cmp.w	sl, #0
 80162ea:	f43f af38 	beq.w	801615e <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x70>
 80162ee:	2301      	movs	r3, #1
 80162f0:	4642      	mov	r2, r8
 80162f2:	e7da      	b.n	80162aa <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv+0x1bc>

080162f4 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs>:
 80162f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80162f6:	4605      	mov	r5, r0
 80162f8:	b08f      	sub	sp, #60	@ 0x3c
 80162fa:	4617      	mov	r7, r2
 80162fc:	461c      	mov	r4, r3
 80162fe:	460e      	mov	r6, r1
 8016300:	b1d1      	cbz	r1, 8016338 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x44>
 8016302:	681b      	ldr	r3, [r3, #0]
 8016304:	4620      	mov	r0, r4
 8016306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016308:	4798      	blx	r3
 801630a:	4240      	negs	r0, r0
 801630c:	9603      	str	r6, [sp, #12]
 801630e:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8016312:	b200      	sxth	r0, r0
 8016314:	9700      	str	r7, [sp, #0]
 8016316:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 801631a:	4629      	mov	r1, r5
 801631c:	e9cd 4001 	strd	r4, r0, [sp, #4]
 8016320:	2401      	movs	r4, #1
 8016322:	a805      	add	r0, sp, #20
 8016324:	f7ff fcaa 	bl	8015c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 8016328:	a805      	add	r0, sp, #20
 801632a:	f7ff fee0 	bl	80160ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 801632e:	f8bd 3014 	ldrh.w	r3, [sp, #20]
 8016332:	b163      	cbz	r3, 801634e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x5a>
 8016334:	3401      	adds	r4, #1
 8016336:	e7f7      	b.n	8016328 <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x34>
 8016338:	2401      	movs	r4, #1
 801633a:	f003 f8cf 	bl	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801633e:	280a      	cmp	r0, #10
 8016340:	4628      	mov	r0, r5
 8016342:	bf08      	it	eq
 8016344:	3401      	addeq	r4, #1
 8016346:	f003 f8c9 	bl	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801634a:	2800      	cmp	r0, #0
 801634c:	d1f7      	bne.n	801633e <_ZN8touchgfx3LCD11getNumLinesERNS_12TextProviderENS_14WideTextActionEhPKNS_4FontEs+0x4a>
 801634e:	b2a0      	uxth	r0, r4
 8016350:	b00f      	add	sp, #60	@ 0x3c
 8016352:	bdf0      	pop	{r4, r5, r6, r7, pc}

08016354 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list>:
 8016354:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016358:	b0e3      	sub	sp, #396	@ 0x18c
 801635a:	461c      	mov	r4, r3
 801635c:	4683      	mov	fp, r0
 801635e:	4688      	mov	r8, r1
 8016360:	9b6c      	ldr	r3, [sp, #432]	@ 0x1b0
 8016362:	2b00      	cmp	r3, #0
 8016364:	f000 8112 	beq.w	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016368:	6823      	ldr	r3, [r4, #0]
 801636a:	2b00      	cmp	r3, #0
 801636c:	f000 810e 	beq.w	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016370:	7ba3      	ldrb	r3, [r4, #14]
 8016372:	2b00      	cmp	r3, #0
 8016374:	f000 810a 	beq.w	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016378:	ad0a      	add	r5, sp, #40	@ 0x28
 801637a:	6810      	ldr	r0, [r2, #0]
 801637c:	6851      	ldr	r1, [r2, #4]
 801637e:	462b      	mov	r3, r5
 8016380:	f9b8 2004 	ldrsh.w	r2, [r8, #4]
 8016384:	c303      	stmia	r3!, {r0, r1}
 8016386:	2100      	movs	r1, #0
 8016388:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 801638c:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 8016390:	4628      	mov	r0, r5
 8016392:	910c      	str	r1, [sp, #48]	@ 0x30
 8016394:	a90c      	add	r1, sp, #48	@ 0x30
 8016396:	79a2      	ldrb	r2, [r4, #6]
 8016398:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801639c:	f7ff fced 	bl	8015d7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80163a0:	a90c      	add	r1, sp, #48	@ 0x30
 80163a2:	79a2      	ldrb	r2, [r4, #6]
 80163a4:	4608      	mov	r0, r1
 80163a6:	f7ff fce8 	bl	8015d7a <_ZN8touchgfx3LCD10rotateRectERNS_4RectERKS1_NS_12TextRotationE>
 80163aa:	a817      	add	r0, sp, #92	@ 0x5c
 80163ac:	f002 fc3c 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 80163b0:	6820      	ldr	r0, [r4, #0]
 80163b2:	6803      	ldr	r3, [r0, #0]
 80163b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163b6:	4798      	blx	r3
 80163b8:	4606      	mov	r6, r0
 80163ba:	6820      	ldr	r0, [r4, #0]
 80163bc:	6803      	ldr	r3, [r0, #0]
 80163be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80163c0:	4798      	blx	r3
 80163c2:	4633      	mov	r3, r6
 80163c4:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 80163c6:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 80163c8:	9000      	str	r0, [sp, #0]
 80163ca:	a817      	add	r0, sp, #92	@ 0x5c
 80163cc:	f002 fc87 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80163d0:	6820      	ldr	r0, [r4, #0]
 80163d2:	f894 a004 	ldrb.w	sl, [r4, #4]
 80163d6:	6803      	ldr	r3, [r0, #0]
 80163d8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80163da:	4798      	blx	r3
 80163dc:	f9b4 600c 	ldrsh.w	r6, [r4, #12]
 80163e0:	6823      	ldr	r3, [r4, #0]
 80163e2:	4607      	mov	r7, r0
 80163e4:	4406      	add	r6, r0
 80163e6:	a830      	add	r0, sp, #192	@ 0xc0
 80163e8:	f893 9009 	ldrb.w	r9, [r3, #9]
 80163ec:	f002 fc1c 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 80163f0:	7c23      	ldrb	r3, [r4, #16]
 80163f2:	b17b      	cbz	r3, 8016414 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xc0>
 80163f4:	6820      	ldr	r0, [r4, #0]
 80163f6:	6803      	ldr	r3, [r0, #0]
 80163f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80163fa:	4798      	blx	r3
 80163fc:	9009      	str	r0, [sp, #36]	@ 0x24
 80163fe:	6820      	ldr	r0, [r4, #0]
 8016400:	6802      	ldr	r2, [r0, #0]
 8016402:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8016404:	4790      	blx	r2
 8016406:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8016408:	9000      	str	r0, [sp, #0]
 801640a:	a830      	add	r0, sp, #192	@ 0xc0
 801640c:	9a6d      	ldr	r2, [sp, #436]	@ 0x1b4
 801640e:	996c      	ldr	r1, [sp, #432]	@ 0x1b0
 8016410:	f002 fc65 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8016414:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8016418:	a80e      	add	r0, sp, #56	@ 0x38
 801641a:	7be2      	ldrb	r2, [r4, #15]
 801641c:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 8016420:	1a8a      	subs	r2, r1, r2
 8016422:	7c21      	ldrb	r1, [r4, #16]
 8016424:	9103      	str	r1, [sp, #12]
 8016426:	b292      	uxth	r2, r2
 8016428:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801642c:	9102      	str	r1, [sp, #8]
 801642e:	6821      	ldr	r1, [r4, #0]
 8016430:	9101      	str	r1, [sp, #4]
 8016432:	7961      	ldrb	r1, [r4, #5]
 8016434:	9100      	str	r1, [sp, #0]
 8016436:	a930      	add	r1, sp, #192	@ 0xc0
 8016438:	f7ff fc20 	bl	8015c7c <_ZN8touchgfx3LCD22WideTextInternalStructC1ERNS_12TextProviderEtthPKNS_4FontEsNS_14WideTextActionE>
 801643c:	2e00      	cmp	r6, #0
 801643e:	dc5b      	bgt.n	80164f8 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1a4>
 8016440:	af17      	add	r7, sp, #92	@ 0x5c
 8016442:	f04f 0900 	mov.w	r9, #0
 8016446:	7c23      	ldrb	r3, [r4, #16]
 8016448:	2b00      	cmp	r3, #0
 801644a:	f000 80b1 	beq.w	80165b0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x25c>
 801644e:	a80e      	add	r0, sp, #56	@ 0x38
 8016450:	f7ff fe4d 	bl	80160ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016454:	f1ba 0f00 	cmp.w	sl, #0
 8016458:	f000 80a5 	beq.w	80165a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 801645c:	7c23      	ldrb	r3, [r4, #16]
 801645e:	2264      	movs	r2, #100	@ 0x64
 8016460:	4639      	mov	r1, r7
 8016462:	a849      	add	r0, sp, #292	@ 0x124
 8016464:	9309      	str	r3, [sp, #36]	@ 0x24
 8016466:	f010 fd66 	bl	8026f36 <memcpy>
 801646a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801646c:	2b00      	cmp	r3, #0
 801646e:	f000 80a7 	beq.w	80165c0 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x26c>
 8016472:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8016476:	7922      	ldrb	r2, [r4, #4]
 8016478:	2a01      	cmp	r2, #1
 801647a:	f040 808a 	bne.w	8016592 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x23e>
 801647e:	f9bd 0034 	ldrsh.w	r0, [sp, #52]	@ 0x34
 8016482:	1ac0      	subs	r0, r0, r3
 8016484:	2302      	movs	r3, #2
 8016486:	fb90 f0f3 	sdiv	r0, r0, r3
 801648a:	b200      	sxth	r0, r0
 801648c:	7c23      	ldrb	r3, [r4, #16]
 801648e:	2b00      	cmp	r3, #0
 8016490:	f000 808b 	beq.w	80165aa <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x256>
 8016494:	f8bd 204e 	ldrh.w	r2, [sp, #78]	@ 0x4e
 8016498:	f89d 105a 	ldrb.w	r1, [sp, #90]	@ 0x5a
 801649c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 80164a0:	e9cd 2105 	strd	r2, r1, [sp, #20]
 80164a4:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80164a8:	2100      	movs	r1, #0
 80164aa:	4410      	add	r0, r2
 80164ac:	4642      	mov	r2, r8
 80164ae:	b200      	sxth	r0, r0
 80164b0:	e9cd 9703 	strd	r9, r7, [sp, #12]
 80164b4:	9000      	str	r0, [sp, #0]
 80164b6:	4658      	mov	r0, fp
 80164b8:	e9cd 5401 	strd	r5, r4, [sp, #4]
 80164bc:	f7ff fc8e 	bl	8015ddc <_ZN8touchgfx3LCD18drawStringInternalEPtPKNS_4RectEssRS3_PKNS0_13StringVisualsEhRNS_12TextProviderEib>
 80164c0:	2800      	cmp	r0, #0
 80164c2:	d163      	bne.n	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80164c4:	b2b2      	uxth	r2, r6
 80164c6:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80164ca:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80164ce:	4413      	add	r3, r2
 80164d0:	1a8a      	subs	r2, r1, r2
 80164d2:	b21b      	sxth	r3, r3
 80164d4:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 80164d8:	f89d 205a 	ldrb.w	r2, [sp, #90]	@ 0x5a
 80164dc:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80164e0:	2a00      	cmp	r2, #0
 80164e2:	d153      	bne.n	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80164e4:	6822      	ldr	r2, [r4, #0]
 80164e6:	8869      	ldrh	r1, [r5, #2]
 80164e8:	7a12      	ldrb	r2, [r2, #8]
 80164ea:	1a9b      	subs	r3, r3, r2
 80164ec:	88ea      	ldrh	r2, [r5, #6]
 80164ee:	440a      	add	r2, r1
 80164f0:	b212      	sxth	r2, r2
 80164f2:	4293      	cmp	r3, r2
 80164f4:	dda7      	ble.n	8016446 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xf2>
 80164f6:	e049      	b.n	801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 80164f8:	7c23      	ldrb	r3, [r4, #16]
 80164fa:	444f      	add	r7, r9
 80164fc:	b1c3      	cbz	r3, 8016530 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1dc>
 80164fe:	f64f 79ff 	movw	r9, #65535	@ 0xffff
 8016502:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016506:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801650a:	443b      	add	r3, r7
 801650c:	4293      	cmp	r3, r2
 801650e:	da97      	bge.n	8016440 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016510:	a80e      	add	r0, sp, #56	@ 0x38
 8016512:	f7ff fdec 	bl	80160ee <_ZN8touchgfx3LCD22WideTextInternalStruct23scanStringLengthForLineEv>
 8016516:	f8bd 304e 	ldrh.w	r3, [sp, #78]	@ 0x4e
 801651a:	3b01      	subs	r3, #1
 801651c:	b29b      	uxth	r3, r3
 801651e:	454b      	cmp	r3, r9
 8016520:	9309      	str	r3, [sp, #36]	@ 0x24
 8016522:	d021      	beq.n	8016568 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x214>
 8016524:	7961      	ldrb	r1, [r4, #5]
 8016526:	a817      	add	r0, sp, #92	@ 0x5c
 8016528:	f7ed ff1c 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801652c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801652e:	e7f4      	b.n	801651a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1c6>
 8016530:	fa1f f986 	uxth.w	r9, r6
 8016534:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8016538:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 801653c:	443b      	add	r3, r7
 801653e:	4293      	cmp	r3, r2
 8016540:	f6bf af7e 	bge.w	8016440 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0xec>
 8016544:	a817      	add	r0, sp, #92	@ 0x5c
 8016546:	f002 ffc9 	bl	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 801654a:	b1f8      	cbz	r0, 801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 801654c:	280a      	cmp	r0, #10
 801654e:	d1f1      	bne.n	8016534 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016550:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 8016554:	444b      	add	r3, r9
 8016556:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801655a:	f8bd 3036 	ldrh.w	r3, [sp, #54]	@ 0x36
 801655e:	eba3 0309 	sub.w	r3, r3, r9
 8016562:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 8016566:	e7e5      	b.n	8016534 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1e0>
 8016568:	b2b3      	uxth	r3, r6
 801656a:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801656e:	441a      	add	r2, r3
 8016570:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8016574:	f8bd 2036 	ldrh.w	r2, [sp, #54]	@ 0x36
 8016578:	1ad3      	subs	r3, r2, r3
 801657a:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 801657e:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8016582:	b11b      	cbz	r3, 801658c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x238>
 8016584:	f89d 305a 	ldrb.w	r3, [sp, #90]	@ 0x5a
 8016588:	2b00      	cmp	r3, #0
 801658a:	d0ba      	beq.n	8016502 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x1ae>
 801658c:	b063      	add	sp, #396	@ 0x18c
 801658e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016592:	2a02      	cmp	r2, #2
 8016594:	d105      	bne.n	80165a2 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x24e>
 8016596:	7be2      	ldrb	r2, [r4, #15]
 8016598:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 801659c:	1a80      	subs	r0, r0, r2
 801659e:	1ac0      	subs	r0, r0, r3
 80165a0:	e773      	b.n	801648a <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x136>
 80165a2:	2000      	movs	r0, #0
 80165a4:	e772      	b.n	801648c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80165a6:	7be0      	ldrb	r0, [r4, #15]
 80165a8:	e770      	b.n	801648c <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x138>
 80165aa:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80165ae:	e773      	b.n	8016498 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x144>
 80165b0:	f1ba 0f00 	cmp.w	sl, #0
 80165b4:	d0f7      	beq.n	80165a6 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x252>
 80165b6:	2264      	movs	r2, #100	@ 0x64
 80165b8:	4639      	mov	r1, r7
 80165ba:	a849      	add	r0, sp, #292	@ 0x124
 80165bc:	f010 fcbb 	bl	8026f36 <memcpy>
 80165c0:	2300      	movs	r3, #0
 80165c2:	f647 72ff 	movw	r2, #32767	@ 0x7fff
 80165c6:	6821      	ldr	r1, [r4, #0]
 80165c8:	a849      	add	r0, sp, #292	@ 0x124
 80165ca:	f7ff fb9a 	bl	8015d02 <_ZN8touchgfx3LCD11stringWidthERNS_12TextProviderERKNS_4FontEih>
 80165ce:	b203      	sxth	r3, r0
 80165d0:	e751      	b.n	8016476 <_ZN8touchgfx3LCD13drawStringLTRERKNS_4RectES3_RKNS0_13StringVisualsEPKtSt9__va_list+0x122>

080165d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 80165d2:	2b03      	cmp	r3, #3
 80165d4:	d818      	bhi.n	8016608 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 80165d6:	e8df f003 	tbb	[pc, r3]
 80165da:	0602      	.short	0x0602
 80165dc:	130d      	.short	0x130d
 80165de:	f9b0 2000 	ldrsh.w	r2, [r0]
 80165e2:	1850      	adds	r0, r2, r1
 80165e4:	4770      	bx	lr
 80165e6:	8803      	ldrh	r3, [r0, #0]
 80165e8:	8880      	ldrh	r0, [r0, #4]
 80165ea:	4418      	add	r0, r3
 80165ec:	b200      	sxth	r0, r0
 80165ee:	1a80      	subs	r0, r0, r2
 80165f0:	3801      	subs	r0, #1
 80165f2:	4770      	bx	lr
 80165f4:	8803      	ldrh	r3, [r0, #0]
 80165f6:	8880      	ldrh	r0, [r0, #4]
 80165f8:	4418      	add	r0, r3
 80165fa:	b200      	sxth	r0, r0
 80165fc:	1a40      	subs	r0, r0, r1
 80165fe:	e7f7      	b.n	80165f0 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8016600:	f9b0 0000 	ldrsh.w	r0, [r0]
 8016604:	4410      	add	r0, r2
 8016606:	4770      	bx	lr
 8016608:	2000      	movs	r0, #0
 801660a:	4770      	bx	lr

0801660c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 801660c:	2b03      	cmp	r3, #3
 801660e:	d817      	bhi.n	8016640 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8016610:	e8df f003 	tbb	[pc, r3]
 8016614:	10090602 	.word	0x10090602
 8016618:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 801661c:	1850      	adds	r0, r2, r1
 801661e:	4770      	bx	lr
 8016620:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8016624:	e7fa      	b.n	801661c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8016626:	8843      	ldrh	r3, [r0, #2]
 8016628:	88c0      	ldrh	r0, [r0, #6]
 801662a:	4418      	add	r0, r3
 801662c:	b200      	sxth	r0, r0
 801662e:	1a80      	subs	r0, r0, r2
 8016630:	3801      	subs	r0, #1
 8016632:	4770      	bx	lr
 8016634:	8843      	ldrh	r3, [r0, #2]
 8016636:	88c0      	ldrh	r0, [r0, #6]
 8016638:	4418      	add	r0, r3
 801663a:	b200      	sxth	r0, r0
 801663c:	1a40      	subs	r0, r0, r1
 801663e:	e7f7      	b.n	8016630 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8016640:	2000      	movs	r0, #0
 8016642:	4770      	bx	lr

08016644 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8016644:	4b01      	ldr	r3, [pc, #4]	@ (801664c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8016646:	2200      	movs	r2, #0
 8016648:	601a      	str	r2, [r3, #0]
 801664a:	4770      	bx	lr
 801664c:	24025e30 	.word	0x24025e30

08016650 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8016650:	4603      	mov	r3, r0
 8016652:	b1c8      	cbz	r0, 8016688 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8016654:	0c02      	lsrs	r2, r0, #16
 8016656:	0412      	lsls	r2, r2, #16
 8016658:	b9a2      	cbnz	r2, 8016684 <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 801665a:	0403      	lsls	r3, r0, #16
 801665c:	2010      	movs	r0, #16
 801665e:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8016662:	bf04      	itt	eq
 8016664:	021b      	lsleq	r3, r3, #8
 8016666:	3008      	addeq	r0, #8
 8016668:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 801666c:	bf04      	itt	eq
 801666e:	011b      	lsleq	r3, r3, #4
 8016670:	3004      	addeq	r0, #4
 8016672:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8016676:	bf04      	itt	eq
 8016678:	009b      	lsleq	r3, r3, #2
 801667a:	3002      	addeq	r0, #2
 801667c:	2b00      	cmp	r3, #0
 801667e:	db04      	blt.n	801668a <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8016680:	3001      	adds	r0, #1
 8016682:	4770      	bx	lr
 8016684:	2000      	movs	r0, #0
 8016686:	e7ea      	b.n	801665e <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8016688:	2020      	movs	r0, #32
 801668a:	4770      	bx	lr

0801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 801668c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016690:	b087      	sub	sp, #28
 8016692:	460d      	mov	r5, r1
 8016694:	4616      	mov	r6, r2
 8016696:	4698      	mov	r8, r3
 8016698:	4601      	mov	r1, r0
 801669a:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 801669e:	b120      	cbz	r0, 80166aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80166a0:	b11a      	cbz	r2, 80166aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80166a2:	2d1f      	cmp	r5, #31
 80166a4:	d801      	bhi.n	80166aa <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 80166a6:	2b1f      	cmp	r3, #31
 80166a8:	d904      	bls.n	80166b4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 80166aa:	2000      	movs	r0, #0
 80166ac:	6038      	str	r0, [r7, #0]
 80166ae:	b007      	add	sp, #28
 80166b0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80166b4:	b97d      	cbnz	r5, 80166d6 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 80166b6:	b143      	cbz	r3, 80166ca <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 80166b8:	4602      	mov	r2, r0
 80166ba:	462b      	mov	r3, r5
 80166bc:	4641      	mov	r1, r8
 80166be:	4630      	mov	r0, r6
 80166c0:	e9cd 4700 	strd	r4, r7, [sp]
 80166c4:	f7ff ffe2 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80166c8:	e7f1      	b.n	80166ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80166ca:	f04f 33ff 	mov.w	r3, #4294967295
 80166ce:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 80166d2:	603b      	str	r3, [r7, #0]
 80166d4:	e7eb      	b.n	80166ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80166d6:	fa32 fa05 	lsrs.w	sl, r2, r5
 80166da:	d106      	bne.n	80166ea <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 80166dc:	4346      	muls	r6, r0
 80166de:	fbb6 f0f4 	udiv	r0, r6, r4
 80166e2:	fb04 6610 	mls	r6, r4, r0, r6
 80166e6:	603e      	str	r6, [r7, #0]
 80166e8:	e7e1      	b.n	80166ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 80166ea:	2201      	movs	r2, #1
 80166ec:	fa00 fb05 	lsl.w	fp, r0, r5
 80166f0:	40aa      	lsls	r2, r5
 80166f2:	fbbb f9f4 	udiv	r9, fp, r4
 80166f6:	3a01      	subs	r2, #1
 80166f8:	fb0a f309 	mul.w	r3, sl, r9
 80166fc:	fb04 b919 	mls	r9, r4, r9, fp
 8016700:	4016      	ands	r6, r2
 8016702:	9303      	str	r3, [sp, #12]
 8016704:	4630      	mov	r0, r6
 8016706:	f7ff ffa3 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801670a:	462b      	mov	r3, r5
 801670c:	460a      	mov	r2, r1
 801670e:	4601      	mov	r1, r0
 8016710:	4630      	mov	r0, r6
 8016712:	e9cd 4700 	strd	r4, r7, [sp]
 8016716:	f7ff ffb9 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801671a:	4606      	mov	r6, r0
 801671c:	4648      	mov	r0, r9
 801671e:	eb05 0108 	add.w	r1, r5, r8
 8016722:	f7ff ff95 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016726:	ab05      	add	r3, sp, #20
 8016728:	464a      	mov	r2, r9
 801672a:	e9cd 4300 	strd	r4, r3, [sp]
 801672e:	4603      	mov	r3, r0
 8016730:	4650      	mov	r0, sl
 8016732:	f7ff ffab 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8016736:	6839      	ldr	r1, [r7, #0]
 8016738:	9a05      	ldr	r2, [sp, #20]
 801673a:	9b03      	ldr	r3, [sp, #12]
 801673c:	4411      	add	r1, r2
 801673e:	fbb1 f2f4 	udiv	r2, r1, r4
 8016742:	18d3      	adds	r3, r2, r3
 8016744:	fb04 1412 	mls	r4, r4, r2, r1
 8016748:	441e      	add	r6, r3
 801674a:	603c      	str	r4, [r7, #0]
 801674c:	4430      	add	r0, r6
 801674e:	e7ae      	b.n	80166ae <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08016750 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8016750:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8016754:	b085      	sub	sp, #20
 8016756:	f1b0 0900 	subs.w	r9, r0, #0
 801675a:	461d      	mov	r5, r3
 801675c:	4617      	mov	r7, r2
 801675e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8016760:	bfbb      	ittet	lt
 8016762:	f1c9 0900 	rsblt	r9, r9, #0
 8016766:	f04f 36ff 	movlt.w	r6, #4294967295
 801676a:	2601      	movge	r6, #1
 801676c:	6823      	ldrlt	r3, [r4, #0]
 801676e:	bfbc      	itt	lt
 8016770:	425b      	neglt	r3, r3
 8016772:	6023      	strlt	r3, [r4, #0]
 8016774:	2a00      	cmp	r2, #0
 8016776:	da04      	bge.n	8016782 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8016778:	6823      	ldr	r3, [r4, #0]
 801677a:	4257      	negs	r7, r2
 801677c:	4276      	negs	r6, r6
 801677e:	425b      	negs	r3, r3
 8016780:	6023      	str	r3, [r4, #0]
 8016782:	2d00      	cmp	r5, #0
 8016784:	4638      	mov	r0, r7
 8016786:	bfba      	itte	lt
 8016788:	426d      	neglt	r5, r5
 801678a:	f04f 38ff 	movlt.w	r8, #4294967295
 801678e:	f04f 0801 	movge.w	r8, #1
 8016792:	f7ff ff5d 	bl	8016650 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8016796:	ab03      	add	r3, sp, #12
 8016798:	463a      	mov	r2, r7
 801679a:	e9cd 5300 	strd	r5, r3, [sp]
 801679e:	4603      	mov	r3, r0
 80167a0:	4648      	mov	r0, r9
 80167a2:	f7ff ff73 	bl	801668c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 80167a6:	6823      	ldr	r3, [r4, #0]
 80167a8:	9a03      	ldr	r2, [sp, #12]
 80167aa:	4546      	cmp	r6, r8
 80167ac:	441a      	add	r2, r3
 80167ae:	fb92 f3f5 	sdiv	r3, r2, r5
 80167b2:	4418      	add	r0, r3
 80167b4:	fb05 2313 	mls	r3, r5, r3, r2
 80167b8:	bf18      	it	ne
 80167ba:	4240      	negne	r0, r0
 80167bc:	1c72      	adds	r2, r6, #1
 80167be:	6023      	str	r3, [r4, #0]
 80167c0:	d105      	bne.n	80167ce <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	f1c3 0200 	rsb	r2, r3, #0
 80167c8:	db0b      	blt.n	80167e2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80167ca:	6022      	str	r2, [r4, #0]
 80167cc:	e006      	b.n	80167dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167ce:	2e01      	cmp	r6, #1
 80167d0:	d104      	bne.n	80167dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167d2:	2b00      	cmp	r3, #0
 80167d4:	da02      	bge.n	80167dc <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80167d6:	442b      	add	r3, r5
 80167d8:	3801      	subs	r0, #1
 80167da:	6023      	str	r3, [r4, #0]
 80167dc:	b005      	add	sp, #20
 80167de:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80167e2:	3801      	subs	r0, #1
 80167e4:	1b52      	subs	r2, r2, r5
 80167e6:	e7f0      	b.n	80167ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080167e8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80167e8:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80167ec:	4c1c      	ldr	r4, [pc, #112]	@ (8016860 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80167ee:	4605      	mov	r5, r0
 80167f0:	6807      	ldr	r7, [r0, #0]
 80167f2:	69a3      	ldr	r3, [r4, #24]
 80167f4:	b92b      	cbnz	r3, 8016802 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80167f6:	6840      	ldr	r0, [r0, #4]
 80167f8:	e9c5 7000 	strd	r7, r0, [r5]
 80167fc:	b004      	add	sp, #16
 80167fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8016802:	f04f 0802 	mov.w	r8, #2
 8016806:	68a2      	ldr	r2, [r4, #8]
 8016808:	ae04      	add	r6, sp, #16
 801680a:	6820      	ldr	r0, [r4, #0]
 801680c:	fb93 f1f8 	sdiv	r1, r3, r8
 8016810:	440a      	add	r2, r1
 8016812:	69e1      	ldr	r1, [r4, #28]
 8016814:	f846 2d04 	str.w	r2, [r6, #-4]!
 8016818:	463a      	mov	r2, r7
 801681a:	9600      	str	r6, [sp, #0]
 801681c:	f7ff ff98 	bl	8016750 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016820:	69a3      	ldr	r3, [r4, #24]
 8016822:	4607      	mov	r7, r0
 8016824:	686a      	ldr	r2, [r5, #4]
 8016826:	6a21      	ldr	r1, [r4, #32]
 8016828:	9600      	str	r6, [sp, #0]
 801682a:	6860      	ldr	r0, [r4, #4]
 801682c:	f7ff ff90 	bl	8016750 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8016830:	69a3      	ldr	r3, [r4, #24]
 8016832:	6962      	ldr	r2, [r4, #20]
 8016834:	4407      	add	r7, r0
 8016836:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8016838:	9600      	str	r6, [sp, #0]
 801683a:	68e0      	ldr	r0, [r4, #12]
 801683c:	fb93 f8f8 	sdiv	r8, r3, r8
 8016840:	4442      	add	r2, r8
 8016842:	9203      	str	r2, [sp, #12]
 8016844:	682a      	ldr	r2, [r5, #0]
 8016846:	f7ff ff83 	bl	8016750 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801684a:	4680      	mov	r8, r0
 801684c:	9600      	str	r6, [sp, #0]
 801684e:	69a3      	ldr	r3, [r4, #24]
 8016850:	686a      	ldr	r2, [r5, #4]
 8016852:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 8016854:	6920      	ldr	r0, [r4, #16]
 8016856:	f7ff ff7b 	bl	8016750 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 801685a:	4440      	add	r0, r8
 801685c:	e7cc      	b.n	80167f8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 801685e:	bf00      	nop
 8016860:	24025e34 	.word	0x24025e34

08016864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 8016864:	4b07      	ldr	r3, [pc, #28]	@ (8016884 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 8016866:	781b      	ldrb	r3, [r3, #0]
 8016868:	2b01      	cmp	r3, #1
 801686a:	d109      	bne.n	8016880 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 801686c:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016870:	f9b0 2000 	ldrsh.w	r2, [r0]
 8016874:	8003      	strh	r3, [r0, #0]
 8016876:	4b04      	ldr	r3, [pc, #16]	@ (8016888 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8016878:	881b      	ldrh	r3, [r3, #0]
 801687a:	3b01      	subs	r3, #1
 801687c:	1a9b      	subs	r3, r3, r2
 801687e:	800b      	strh	r3, [r1, #0]
 8016880:	4770      	bx	lr
 8016882:	bf00      	nop
 8016884:	24025e18 	.word	0x24025e18
 8016888:	24025e14 	.word	0x24025e14

0801688c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 801688c:	4b07      	ldr	r3, [pc, #28]	@ (80168ac <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 801688e:	b510      	push	{r4, lr}
 8016890:	781b      	ldrb	r3, [r3, #0]
 8016892:	2b01      	cmp	r3, #1
 8016894:	d108      	bne.n	80168a8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 8016896:	4b06      	ldr	r3, [pc, #24]	@ (80168b0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8016898:	880c      	ldrh	r4, [r1, #0]
 801689a:	881b      	ldrh	r3, [r3, #0]
 801689c:	f9b0 2000 	ldrsh.w	r2, [r0]
 80168a0:	3b01      	subs	r3, #1
 80168a2:	1b1b      	subs	r3, r3, r4
 80168a4:	8003      	strh	r3, [r0, #0]
 80168a6:	800a      	strh	r2, [r1, #0]
 80168a8:	bd10      	pop	{r4, pc}
 80168aa:	bf00      	nop
 80168ac:	24025e18 	.word	0x24025e18
 80168b0:	24025e14 	.word	0x24025e14

080168b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 80168b4:	4b0a      	ldr	r3, [pc, #40]	@ (80168e0 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 80168b6:	b510      	push	{r4, lr}
 80168b8:	781b      	ldrb	r3, [r3, #0]
 80168ba:	2b01      	cmp	r3, #1
 80168bc:	d10e      	bne.n	80168dc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80168be:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80168c2:	8843      	ldrh	r3, [r0, #2]
 80168c4:	f9b0 4000 	ldrsh.w	r4, [r0]
 80168c8:	18ca      	adds	r2, r1, r3
 80168ca:	4b06      	ldr	r3, [pc, #24]	@ (80168e4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80168cc:	8044      	strh	r4, [r0, #2]
 80168ce:	881b      	ldrh	r3, [r3, #0]
 80168d0:	1a9b      	subs	r3, r3, r2
 80168d2:	8003      	strh	r3, [r0, #0]
 80168d4:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80168d8:	8081      	strh	r1, [r0, #4]
 80168da:	80c3      	strh	r3, [r0, #6]
 80168dc:	bd10      	pop	{r4, pc}
 80168de:	bf00      	nop
 80168e0:	24025e18 	.word	0x24025e18
 80168e4:	24025e14 	.word	0x24025e14

080168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80168e8:	4b08      	ldr	r3, [pc, #32]	@ (801690c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80168ea:	781b      	ldrb	r3, [r3, #0]
 80168ec:	2b01      	cmp	r3, #1
 80168ee:	d10c      	bne.n	801690a <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80168f0:	8803      	ldrh	r3, [r0, #0]
 80168f2:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80168f6:	8842      	ldrh	r2, [r0, #2]
 80168f8:	8002      	strh	r2, [r0, #0]
 80168fa:	185a      	adds	r2, r3, r1
 80168fc:	4b04      	ldr	r3, [pc, #16]	@ (8016910 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80168fe:	881b      	ldrh	r3, [r3, #0]
 8016900:	1a9b      	subs	r3, r3, r2
 8016902:	8043      	strh	r3, [r0, #2]
 8016904:	88c3      	ldrh	r3, [r0, #6]
 8016906:	80c1      	strh	r1, [r0, #6]
 8016908:	8083      	strh	r3, [r0, #4]
 801690a:	4770      	bx	lr
 801690c:	24025e18 	.word	0x24025e18
 8016910:	24025e14 	.word	0x24025e14

08016914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 8016914:	4b07      	ldr	r3, [pc, #28]	@ (8016934 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 8016916:	b510      	push	{r4, lr}
 8016918:	781b      	ldrb	r3, [r3, #0]
 801691a:	2b01      	cmp	r3, #1
 801691c:	d108      	bne.n	8016930 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 801691e:	f9b1 3000 	ldrsh.w	r3, [r1]
 8016922:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016926:	8003      	strh	r3, [r0, #0]
 8016928:	8893      	ldrh	r3, [r2, #4]
 801692a:	3b01      	subs	r3, #1
 801692c:	1b1b      	subs	r3, r3, r4
 801692e:	800b      	strh	r3, [r1, #0]
 8016930:	bd10      	pop	{r4, pc}
 8016932:	bf00      	nop
 8016934:	24025e18 	.word	0x24025e18

08016938 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE>:
 8016938:	4b0b      	ldr	r3, [pc, #44]	@ (8016968 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x30>)
 801693a:	781b      	ldrb	r3, [r3, #0]
 801693c:	2b01      	cmp	r3, #1
 801693e:	d111      	bne.n	8016964 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x2c>
 8016940:	680b      	ldr	r3, [r1, #0]
 8016942:	ed90 7a00 	vldr	s14, [r0]
 8016946:	6003      	str	r3, [r0, #0]
 8016948:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801694c:	eddf 6a07 	vldr	s13, [pc, #28]	@ 801696c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERfS1_RKNS_4RectE+0x34>
 8016950:	ee07 3a90 	vmov	s15, r3
 8016954:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016958:	ee77 7ae6 	vsub.f32	s15, s15, s13
 801695c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8016960:	edc1 7a00 	vstr	s15, [r1]
 8016964:	4770      	bx	lr
 8016966:	bf00      	nop
 8016968:	24025e18 	.word	0x24025e18
 801696c:	38d1b717 	.word	0x38d1b717

08016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8016970:	4b0a      	ldr	r3, [pc, #40]	@ (801699c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8016972:	460a      	mov	r2, r1
 8016974:	b510      	push	{r4, lr}
 8016976:	781b      	ldrb	r3, [r3, #0]
 8016978:	2b01      	cmp	r3, #1
 801697a:	d10d      	bne.n	8016998 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801697c:	8881      	ldrh	r1, [r0, #4]
 801697e:	8803      	ldrh	r3, [r0, #0]
 8016980:	440b      	add	r3, r1
 8016982:	4601      	mov	r1, r0
 8016984:	3b01      	subs	r3, #1
 8016986:	f821 3b02 	strh.w	r3, [r1], #2
 801698a:	f7ff ffc3 	bl	8016914 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801698e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016992:	88c2      	ldrh	r2, [r0, #6]
 8016994:	80c3      	strh	r3, [r0, #6]
 8016996:	8082      	strh	r2, [r0, #4]
 8016998:	bd10      	pop	{r4, pc}
 801699a:	bf00      	nop
 801699c:	24025e18 	.word	0x24025e18

080169a0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80169a0:	4b06      	ldr	r3, [pc, #24]	@ (80169bc <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80169a2:	2100      	movs	r1, #0
 80169a4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169a8:	4b05      	ldr	r3, [pc, #20]	@ (80169c0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80169aa:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80169ae:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169b2:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80169b6:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80169ba:	4770      	bx	lr
 80169bc:	24025e14 	.word	0x24025e14
 80169c0:	24025e16 	.word	0x24025e16

080169c4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80169c4:	4b03      	ldr	r3, [pc, #12]	@ (80169d4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80169c6:	6818      	ldr	r0, [r3, #0]
 80169c8:	b110      	cbz	r0, 80169d0 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80169ca:	6803      	ldr	r3, [r0, #0]
 80169cc:	699b      	ldr	r3, [r3, #24]
 80169ce:	4718      	bx	r3
 80169d0:	4770      	bx	lr
 80169d2:	bf00      	nop
 80169d4:	24025e64 	.word	0x24025e64

080169d8 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 80169d8:	4770      	bx	lr
	...

080169dc <_ZN8touchgfx11Application4drawEv>:
 80169dc:	4b09      	ldr	r3, [pc, #36]	@ (8016a04 <_ZN8touchgfx11Application4drawEv+0x28>)
 80169de:	b507      	push	{r0, r1, r2, lr}
 80169e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 80169e4:	2100      	movs	r1, #0
 80169e6:	4b08      	ldr	r3, [pc, #32]	@ (8016a08 <_ZN8touchgfx11Application4drawEv+0x2c>)
 80169e8:	9100      	str	r1, [sp, #0]
 80169ea:	4669      	mov	r1, sp
 80169ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 80169f0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80169f4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80169f8:	6803      	ldr	r3, [r0, #0]
 80169fa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80169fc:	4798      	blx	r3
 80169fe:	b003      	add	sp, #12
 8016a00:	f85d fb04 	ldr.w	pc, [sp], #4
 8016a04:	24025e14 	.word	0x24025e14
 8016a08:	24025e16 	.word	0x24025e16

08016a0c <_ZN8touchgfx11Application10invalidateEv>:
 8016a0c:	4b09      	ldr	r3, [pc, #36]	@ (8016a34 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 8016a0e:	b082      	sub	sp, #8
 8016a10:	2100      	movs	r1, #0
 8016a12:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016a16:	4b08      	ldr	r3, [pc, #32]	@ (8016a38 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8016a18:	f8ad 2004 	strh.w	r2, [sp, #4]
 8016a1c:	aa02      	add	r2, sp, #8
 8016a1e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8016a22:	9100      	str	r1, [sp, #0]
 8016a24:	f8ad 3006 	strh.w	r3, [sp, #6]
 8016a28:	6803      	ldr	r3, [r0, #0]
 8016a2a:	e912 0006 	ldmdb	r2, {r1, r2}
 8016a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016a30:	b002      	add	sp, #8
 8016a32:	4718      	bx	r3
 8016a34:	24025e14 	.word	0x24025e14
 8016a38:	24025e16 	.word	0x24025e16

08016a3c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 8016a3c:	4b03      	ldr	r3, [pc, #12]	@ (8016a4c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 8016a3e:	6818      	ldr	r0, [r3, #0]
 8016a40:	b110      	cbz	r0, 8016a48 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8016a42:	6803      	ldr	r3, [r0, #0]
 8016a44:	69db      	ldr	r3, [r3, #28]
 8016a46:	4718      	bx	r3
 8016a48:	4770      	bx	lr
 8016a4a:	bf00      	nop
 8016a4c:	24025e64 	.word	0x24025e64

08016a50 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8016a50:	4b03      	ldr	r3, [pc, #12]	@ (8016a60 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8016a52:	6818      	ldr	r0, [r3, #0]
 8016a54:	b110      	cbz	r0, 8016a5c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8016a56:	6803      	ldr	r3, [r0, #0]
 8016a58:	6a1b      	ldr	r3, [r3, #32]
 8016a5a:	4718      	bx	r3
 8016a5c:	4770      	bx	lr
 8016a5e:	bf00      	nop
 8016a60:	24025e64 	.word	0x24025e64

08016a64 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8016a64:	2300      	movs	r3, #0
 8016a66:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 8016a6a:	4770      	bx	lr

08016a6c <_ZN8touchgfx11Application14handleKeyEventEh>:
 8016a6c:	4b03      	ldr	r3, [pc, #12]	@ (8016a7c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 8016a6e:	6818      	ldr	r0, [r3, #0]
 8016a70:	b110      	cbz	r0, 8016a78 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8016a72:	6803      	ldr	r3, [r0, #0]
 8016a74:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016a76:	4718      	bx	r3
 8016a78:	4770      	bx	lr
 8016a7a:	bf00      	nop
 8016a7c:	24025e64 	.word	0x24025e64

08016a80 <_ZN8touchgfx11ApplicationD1Ev>:
 8016a80:	4770      	bx	lr

08016a82 <_ZN8touchgfx11ApplicationD0Ev>:
 8016a82:	b510      	push	{r4, lr}
 8016a84:	4604      	mov	r4, r0
 8016a86:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 8016a8a:	f00f fac3 	bl	8026014 <_ZdlPvj>
 8016a8e:	4620      	mov	r0, r4
 8016a90:	bd10      	pop	{r4, pc}

08016a92 <_ZN8touchgfx4Rect10restrictToEss>:
 8016a92:	f9b0 3000 	ldrsh.w	r3, [r0]
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	b510      	push	{r4, lr}
 8016a9a:	da04      	bge.n	8016aa6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8016a9c:	8884      	ldrh	r4, [r0, #4]
 8016a9e:	4423      	add	r3, r4
 8016aa0:	8083      	strh	r3, [r0, #4]
 8016aa2:	2300      	movs	r3, #0
 8016aa4:	8003      	strh	r3, [r0, #0]
 8016aa6:	f9b0 4000 	ldrsh.w	r4, [r0]
 8016aaa:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8016aae:	1b09      	subs	r1, r1, r4
 8016ab0:	428b      	cmp	r3, r1
 8016ab2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8016ab6:	bfc8      	it	gt
 8016ab8:	8081      	strhgt	r1, [r0, #4]
 8016aba:	2b00      	cmp	r3, #0
 8016abc:	da04      	bge.n	8016ac8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 8016abe:	88c1      	ldrh	r1, [r0, #6]
 8016ac0:	440b      	add	r3, r1
 8016ac2:	80c3      	strh	r3, [r0, #6]
 8016ac4:	2300      	movs	r3, #0
 8016ac6:	8043      	strh	r3, [r0, #2]
 8016ac8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8016acc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8016ad0:	1a52      	subs	r2, r2, r1
 8016ad2:	4293      	cmp	r3, r2
 8016ad4:	bfc8      	it	gt
 8016ad6:	80c2      	strhgt	r2, [r0, #6]
 8016ad8:	bd10      	pop	{r4, pc}
	...

08016adc <_ZN8touchgfx11Application4drawERNS_4RectE>:
 8016adc:	4b10      	ldr	r3, [pc, #64]	@ (8016b20 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 8016ade:	b510      	push	{r4, lr}
 8016ae0:	460c      	mov	r4, r1
 8016ae2:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016ae6:	4b0f      	ldr	r3, [pc, #60]	@ (8016b24 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8016ae8:	4620      	mov	r0, r4
 8016aea:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016aee:	f7ff ffd0 	bl	8016a92 <_ZN8touchgfx4Rect10restrictToEss>
 8016af2:	4b0d      	ldr	r3, [pc, #52]	@ (8016b28 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8016af4:	6818      	ldr	r0, [r3, #0]
 8016af6:	b190      	cbz	r0, 8016b1e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8016af8:	6803      	ldr	r3, [r0, #0]
 8016afa:	4621      	mov	r1, r4
 8016afc:	689b      	ldr	r3, [r3, #8]
 8016afe:	4798      	blx	r3
 8016b00:	4b0a      	ldr	r3, [pc, #40]	@ (8016b2c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8016b02:	6818      	ldr	r0, [r3, #0]
 8016b04:	b118      	cbz	r0, 8016b0e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8016b06:	6803      	ldr	r3, [r0, #0]
 8016b08:	4621      	mov	r1, r4
 8016b0a:	689b      	ldr	r3, [r3, #8]
 8016b0c:	4798      	blx	r3
 8016b0e:	4b08      	ldr	r3, [pc, #32]	@ (8016b30 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8016b10:	4621      	mov	r1, r4
 8016b12:	6818      	ldr	r0, [r3, #0]
 8016b14:	6803      	ldr	r3, [r0, #0]
 8016b16:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016b1a:	69db      	ldr	r3, [r3, #28]
 8016b1c:	4718      	bx	r3
 8016b1e:	bd10      	pop	{r4, pc}
 8016b20:	24025e16 	.word	0x24025e16
 8016b24:	24025e14 	.word	0x24025e14
 8016b28:	24025e64 	.word	0x24025e64
 8016b2c:	24025e60 	.word	0x24025e60
 8016b30:	24025e20 	.word	0x24025e20

08016b34 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8016b34:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b36:	4606      	mov	r6, r0
 8016b38:	4608      	mov	r0, r1
 8016b3a:	460f      	mov	r7, r1
 8016b3c:	f7f9 fa2d 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b40:	b9e8      	cbnz	r0, 8016b7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016b42:	f9b7 5000 	ldrsh.w	r5, [r7]
 8016b46:	f9b6 4000 	ldrsh.w	r4, [r6]
 8016b4a:	42a5      	cmp	r5, r4
 8016b4c:	db17      	blt.n	8016b7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016b4e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8016b52:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8016b56:	429a      	cmp	r2, r3
 8016b58:	db11      	blt.n	8016b7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016b5a:	88b9      	ldrh	r1, [r7, #4]
 8016b5c:	440d      	add	r5, r1
 8016b5e:	88b1      	ldrh	r1, [r6, #4]
 8016b60:	440c      	add	r4, r1
 8016b62:	b22d      	sxth	r5, r5
 8016b64:	b224      	sxth	r4, r4
 8016b66:	42a5      	cmp	r5, r4
 8016b68:	dc09      	bgt.n	8016b7e <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8016b6a:	88f8      	ldrh	r0, [r7, #6]
 8016b6c:	4410      	add	r0, r2
 8016b6e:	88f2      	ldrh	r2, [r6, #6]
 8016b70:	4413      	add	r3, r2
 8016b72:	b200      	sxth	r0, r0
 8016b74:	b21b      	sxth	r3, r3
 8016b76:	4298      	cmp	r0, r3
 8016b78:	bfcc      	ite	gt
 8016b7a:	2000      	movgt	r0, #0
 8016b7c:	2001      	movle	r0, #1
 8016b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8016b80:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016b82:	4604      	mov	r4, r0
 8016b84:	4608      	mov	r0, r1
 8016b86:	460d      	mov	r5, r1
 8016b88:	f7f9 fa07 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b8c:	b978      	cbnz	r0, 8016bae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8016b8e:	4620      	mov	r0, r4
 8016b90:	f7f9 fa03 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016b94:	f9b5 6000 	ldrsh.w	r6, [r5]
 8016b98:	b150      	cbz	r0, 8016bb0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 8016b9a:	8026      	strh	r6, [r4, #0]
 8016b9c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8016ba0:	8063      	strh	r3, [r4, #2]
 8016ba2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 8016ba6:	80a3      	strh	r3, [r4, #4]
 8016ba8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 8016bac:	80e3      	strh	r3, [r4, #6]
 8016bae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016bb0:	f9b4 1000 	ldrsh.w	r1, [r4]
 8016bb4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8016bb8:	42b1      	cmp	r1, r6
 8016bba:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 8016bbe:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 8016bc2:	460f      	mov	r7, r1
 8016bc4:	88ed      	ldrh	r5, [r5, #6]
 8016bc6:	bfa8      	it	ge
 8016bc8:	4637      	movge	r7, r6
 8016bca:	4293      	cmp	r3, r2
 8016bcc:	4618      	mov	r0, r3
 8016bce:	4466      	add	r6, ip
 8016bd0:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8016bd4:	bfa8      	it	ge
 8016bd6:	4610      	movge	r0, r2
 8016bd8:	442a      	add	r2, r5
 8016bda:	88e5      	ldrh	r5, [r4, #6]
 8016bdc:	4461      	add	r1, ip
 8016bde:	b236      	sxth	r6, r6
 8016be0:	8027      	strh	r7, [r4, #0]
 8016be2:	442b      	add	r3, r5
 8016be4:	b209      	sxth	r1, r1
 8016be6:	b212      	sxth	r2, r2
 8016be8:	8060      	strh	r0, [r4, #2]
 8016bea:	b21b      	sxth	r3, r3
 8016bec:	428e      	cmp	r6, r1
 8016bee:	bfac      	ite	ge
 8016bf0:	ebc7 0106 	rsbge	r1, r7, r6
 8016bf4:	ebc7 0101 	rsblt	r1, r7, r1
 8016bf8:	429a      	cmp	r2, r3
 8016bfa:	bfac      	ite	ge
 8016bfc:	ebc0 0202 	rsbge	r2, r0, r2
 8016c00:	ebc0 0203 	rsblt	r2, r0, r3
 8016c04:	80a1      	strh	r1, [r4, #4]
 8016c06:	80e2      	strh	r2, [r4, #6]
 8016c08:	e7d1      	b.n	8016bae <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08016c0c <_ZN8touchgfx11Application11getInstanceEv>:
 8016c0c:	4b01      	ldr	r3, [pc, #4]	@ (8016c14 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8016c0e:	6818      	ldr	r0, [r3, #0]
 8016c10:	4770      	bx	lr
 8016c12:	bf00      	nop
 8016c14:	24025e74 	.word	0x24025e74

08016c18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8016c18:	2300      	movs	r3, #0
 8016c1a:	b510      	push	{r4, lr}
 8016c1c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8016c20:	4604      	mov	r4, r0
 8016c22:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016c26:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016c2a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016c2e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8016c32:	429a      	cmp	r2, r3
 8016c34:	d90e      	bls.n	8016c54 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8016c36:	18e2      	adds	r2, r4, r3
 8016c38:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8016c3c:	b122      	cbz	r2, 8016c48 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8016c3e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8016c42:	6803      	ldr	r3, [r0, #0]
 8016c44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8016c46:	4798      	blx	r3
 8016c48:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8016c4c:	3301      	adds	r3, #1
 8016c4e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8016c52:	e7ea      	b.n	8016c2a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8016c54:	bd10      	pop	{r4, pc}

08016c56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8016c56:	2300      	movs	r3, #0
 8016c58:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8016c5c:	30a4      	adds	r0, #164	@ 0xa4
 8016c5e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8016c62:	f802 3b01 	strb.w	r3, [r2], #1
 8016c66:	4282      	cmp	r2, r0
 8016c68:	d1fb      	bne.n	8016c62 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 8016c6a:	4770      	bx	lr

08016c6c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8016c6c:	b570      	push	{r4, r5, r6, lr}
 8016c6e:	4c0b      	ldr	r4, [pc, #44]	@ (8016c9c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8016c70:	4605      	mov	r5, r0
 8016c72:	460e      	mov	r6, r1
 8016c74:	6820      	ldr	r0, [r4, #0]
 8016c76:	b110      	cbz	r0, 8016c7e <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 8016c78:	6803      	ldr	r3, [r0, #0]
 8016c7a:	695b      	ldr	r3, [r3, #20]
 8016c7c:	4798      	blx	r3
 8016c7e:	1d28      	adds	r0, r5, #4
 8016c80:	f7ff ffe9 	bl	8016c56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016c84:	6026      	str	r6, [r4, #0]
 8016c86:	6833      	ldr	r3, [r6, #0]
 8016c88:	4630      	mov	r0, r6
 8016c8a:	68db      	ldr	r3, [r3, #12]
 8016c8c:	4798      	blx	r3
 8016c8e:	682b      	ldr	r3, [r5, #0]
 8016c90:	4628      	mov	r0, r5
 8016c92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016c94:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016c98:	4718      	bx	r3
 8016c9a:	bf00      	nop
 8016c9c:	24025e64 	.word	0x24025e64

08016ca0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8016ca0:	2300      	movs	r3, #0
 8016ca2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 8016ca6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 8016caa:	461a      	mov	r2, r3
 8016cac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016cae:	461c      	mov	r4, r3
 8016cb0:	461d      	mov	r5, r3
 8016cb2:	459c      	cmp	ip, r3
 8016cb4:	dd1a      	ble.n	8016cec <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 8016cb6:	18c6      	adds	r6, r0, r3
 8016cb8:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 8016cbc:	b16e      	cbz	r6, 8016cda <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 8016cbe:	429a      	cmp	r2, r3
 8016cc0:	d008      	beq.n	8016cd4 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 8016cc2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 8016cc6:	fa1f fe82 	uxth.w	lr, r2
 8016cca:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 8016cce:	1887      	adds	r7, r0, r2
 8016cd0:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8016cd4:	3201      	adds	r2, #1
 8016cd6:	3301      	adds	r3, #1
 8016cd8:	e7eb      	b.n	8016cb2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 8016cda:	4299      	cmp	r1, r3
 8016cdc:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8016ce0:	bfa8      	it	ge
 8016ce2:	3501      	addge	r5, #1
 8016ce4:	429e      	cmp	r6, r3
 8016ce6:	bfc8      	it	gt
 8016ce8:	3401      	addgt	r4, #1
 8016cea:	e7f4      	b.n	8016cd6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 8016cec:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8016cf0:	1b49      	subs	r1, r1, r5
 8016cf2:	1b1b      	subs	r3, r3, r4
 8016cf4:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8016cf8:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 8016cfc:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8016d00:	4293      	cmp	r3, r2
 8016d02:	dd03      	ble.n	8016d0c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8016d04:	3b01      	subs	r3, #1
 8016d06:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 8016d0a:	e7f7      	b.n	8016cfc <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8016d0c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08016d10 <_ZN8touchgfx11Application15handleTickEventEv>:
 8016d10:	b570      	push	{r4, r5, r6, lr}
 8016d12:	4d16      	ldr	r5, [pc, #88]	@ (8016d6c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8016d14:	4604      	mov	r4, r0
 8016d16:	6828      	ldr	r0, [r5, #0]
 8016d18:	b140      	cbz	r0, 8016d2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016d1a:	7a03      	ldrb	r3, [r0, #8]
 8016d1c:	b933      	cbnz	r3, 8016d2c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8016d1e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016d22:	6803      	ldr	r3, [r0, #0]
 8016d24:	689b      	ldr	r3, [r3, #8]
 8016d26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8016d2a:	4718      	bx	r3
 8016d2c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8016d30:	4e0f      	ldr	r6, [pc, #60]	@ (8016d70 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8016d32:	b973      	cbnz	r3, 8016d52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016d34:	b168      	cbz	r0, 8016d52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016d36:	7a03      	ldrb	r3, [r0, #8]
 8016d38:	b15b      	cbz	r3, 8016d52 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8016d3a:	6830      	ldr	r0, [r6, #0]
 8016d3c:	b110      	cbz	r0, 8016d44 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8016d3e:	6803      	ldr	r3, [r0, #0]
 8016d40:	691b      	ldr	r3, [r3, #16]
 8016d42:	4798      	blx	r3
 8016d44:	6828      	ldr	r0, [r5, #0]
 8016d46:	6803      	ldr	r3, [r0, #0]
 8016d48:	68db      	ldr	r3, [r3, #12]
 8016d4a:	4798      	blx	r3
 8016d4c:	2301      	movs	r3, #1
 8016d4e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8016d52:	3404      	adds	r4, #4
 8016d54:	4620      	mov	r0, r4
 8016d56:	f7ff ff5f 	bl	8016c18 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 8016d5a:	4620      	mov	r0, r4
 8016d5c:	f7ff ffa0 	bl	8016ca0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8016d60:	6830      	ldr	r0, [r6, #0]
 8016d62:	b110      	cbz	r0, 8016d6a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8016d64:	6803      	ldr	r3, [r0, #0]
 8016d66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016d68:	e7dd      	b.n	8016d26 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 8016d6a:	bd70      	pop	{r4, r5, r6, pc}
 8016d6c:	24025e68 	.word	0x24025e68
 8016d70:	24025e64 	.word	0x24025e64

08016d74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8016d74:	4603      	mov	r3, r0
 8016d76:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 8016d7a:	2200      	movs	r2, #0
 8016d7c:	801a      	strh	r2, [r3, #0]
 8016d7e:	3308      	adds	r3, #8
 8016d80:	f823 2c06 	strh.w	r2, [r3, #-6]
 8016d84:	f823 2c04 	strh.w	r2, [r3, #-4]
 8016d88:	f823 2c02 	strh.w	r2, [r3, #-2]
 8016d8c:	428b      	cmp	r3, r1
 8016d8e:	d1f5      	bne.n	8016d7c <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8016d90:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8016d94:	4770      	bx	lr
	...

08016d98 <_ZN8touchgfx11ApplicationC1Ev>:
 8016d98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8016d9a:	4b1d      	ldr	r3, [pc, #116]	@ (8016e10 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8016d9c:	4606      	mov	r6, r0
 8016d9e:	4604      	mov	r4, r0
 8016da0:	2500      	movs	r5, #0
 8016da2:	f846 3b04 	str.w	r3, [r6], #4
 8016da6:	22a8      	movs	r2, #168	@ 0xa8
 8016da8:	2100      	movs	r1, #0
 8016daa:	4630      	mov	r0, r6
 8016dac:	f00f ff7e 	bl	8026cac <memset>
 8016db0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 8016db4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8016db8:	4f16      	ldr	r7, [pc, #88]	@ (8016e14 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 8016dba:	f7ff ffdb 	bl	8016d74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016dbe:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8016dc2:	f7ff ffd7 	bl	8016d74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8016dc6:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 8016dca:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 8016dce:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8016dd2:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8016dd6:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 8016dda:	490f      	ldr	r1, [pc, #60]	@ (8016e18 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 8016ddc:	480f      	ldr	r0, [pc, #60]	@ (8016e1c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 8016dde:	f00d fb3f 	bl	8024460 <CRC_Lock>
 8016de2:	4b0f      	ldr	r3, [pc, #60]	@ (8016e20 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8016de4:	b158      	cbz	r0, 8016dfe <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8016de6:	801d      	strh	r5, [r3, #0]
 8016de8:	2300      	movs	r3, #0
 8016dea:	4a0e      	ldr	r2, [pc, #56]	@ (8016e24 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 8016dec:	4630      	mov	r0, r6
 8016dee:	6013      	str	r3, [r2, #0]
 8016df0:	4a0d      	ldr	r2, [pc, #52]	@ (8016e28 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8016df2:	603b      	str	r3, [r7, #0]
 8016df4:	6013      	str	r3, [r2, #0]
 8016df6:	f7ff ff2e 	bl	8016c56 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8016dfa:	4620      	mov	r0, r4
 8016dfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8016dfe:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8016e02:	2002      	movs	r0, #2
 8016e04:	801a      	strh	r2, [r3, #0]
 8016e06:	6038      	str	r0, [r7, #0]
 8016e08:	f001 fd94 	bl	8018934 <_ZN8touchgfx6Screen4drawEv>
 8016e0c:	e7ec      	b.n	8016de8 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8016e0e:	bf00      	nop
 8016e10:	0802b16c 	.word	0x0802b16c
 8016e14:	24025e64 	.word	0x24025e64
 8016e18:	b5e8b5cd 	.word	0xb5e8b5cd
 8016e1c:	f407a5c2 	.word	0xf407a5c2
 8016e20:	240000ac 	.word	0x240000ac
 8016e24:	24025e74 	.word	0x24025e74
 8016e28:	24025e68 	.word	0x24025e68

08016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8016e2c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8016e30:	3b01      	subs	r3, #1
 8016e32:	b29b      	uxth	r3, r3
 8016e34:	428b      	cmp	r3, r1
 8016e36:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 8016e3a:	b510      	push	{r4, lr}
 8016e3c:	d908      	bls.n	8016e50 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8016e3e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8016e42:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8016e46:	681a      	ldr	r2, [r3, #0]
 8016e48:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8016e4c:	685a      	ldr	r2, [r3, #4]
 8016e4e:	6062      	str	r2, [r4, #4]
 8016e50:	bd10      	pop	{r4, pc}
	...

08016e54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8016e54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016e58:	b08f      	sub	sp, #60	@ 0x3c
 8016e5a:	4b8f      	ldr	r3, [pc, #572]	@ (8017098 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8016e5c:	4683      	mov	fp, r0
 8016e5e:	ac0a      	add	r4, sp, #40	@ 0x28
 8016e60:	e884 0006 	stmia.w	r4, {r1, r2}
 8016e64:	f9b3 2000 	ldrsh.w	r2, [r3]
 8016e68:	4620      	mov	r0, r4
 8016e6a:	4b8c      	ldr	r3, [pc, #560]	@ (801709c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8016e6c:	f9b3 1000 	ldrsh.w	r1, [r3]
 8016e70:	f7ff fe0f 	bl	8016a92 <_ZN8touchgfx4Rect10restrictToEss>
 8016e74:	4620      	mov	r0, r4
 8016e76:	f7f9 f890 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016e7a:	2800      	cmp	r0, #0
 8016e7c:	d16a      	bne.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016e7e:	9403      	str	r4, [sp, #12]
 8016e80:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8016e84:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8016e88:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8016e8c:	9301      	str	r3, [sp, #4]
 8016e8e:	35a4      	adds	r5, #164	@ 0xa4
 8016e90:	b15c      	cbz	r4, 8016eaa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8016e92:	4629      	mov	r1, r5
 8016e94:	9803      	ldr	r0, [sp, #12]
 8016e96:	f7ff fe4d 	bl	8016b34 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016e9a:	3c01      	subs	r4, #1
 8016e9c:	b118      	cbz	r0, 8016ea6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8016e9e:	b2a1      	uxth	r1, r4
 8016ea0:	9801      	ldr	r0, [sp, #4]
 8016ea2:	f7ff ffc3 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8016ea6:	3d08      	subs	r5, #8
 8016ea8:	e7f2      	b.n	8016e90 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 8016eaa:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 8016eae:	f10a 33ff 	add.w	r3, sl, #4294967295
 8016eb2:	f8cd a010 	str.w	sl, [sp, #16]
 8016eb6:	9302      	str	r3, [sp, #8]
 8016eb8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 8016ebc:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 8016ec0:	9306      	str	r3, [sp, #24]
 8016ec2:	445c      	add	r4, fp
 8016ec4:	2500      	movs	r5, #0
 8016ec6:	4626      	mov	r6, r4
 8016ec8:	f8cd a014 	str.w	sl, [sp, #20]
 8016ecc:	462f      	mov	r7, r5
 8016ece:	9b05      	ldr	r3, [sp, #20]
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d073      	beq.n	8016fbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8016ed4:	9903      	ldr	r1, [sp, #12]
 8016ed6:	4630      	mov	r0, r6
 8016ed8:	f7fd f808 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8016edc:	b350      	cbz	r0, 8016f34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016ede:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8016ee2:	f9b6 c000 	ldrsh.w	ip, [r6]
 8016ee6:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 8016eea:	45e6      	cmp	lr, ip
 8016eec:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8016ef0:	db33      	blt.n	8016f5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016ef2:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8016ef6:	88b3      	ldrh	r3, [r6, #4]
 8016ef8:	4472      	add	r2, lr
 8016efa:	4463      	add	r3, ip
 8016efc:	b212      	sxth	r2, r2
 8016efe:	b21b      	sxth	r3, r3
 8016f00:	429a      	cmp	r2, r3
 8016f02:	dc2a      	bgt.n	8016f5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8016f04:	fa1f f289 	uxth.w	r2, r9
 8016f08:	88f3      	ldrh	r3, [r6, #6]
 8016f0a:	45c8      	cmp	r8, r9
 8016f0c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8016f10:	4413      	add	r3, r2
 8016f12:	fa1f fc88 	uxth.w	ip, r8
 8016f16:	b29b      	uxth	r3, r3
 8016f18:	fa0f fe83 	sxth.w	lr, r3
 8016f1c:	db0f      	blt.n	8016f3e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8016f1e:	eba3 030c 	sub.w	r3, r3, ip
 8016f22:	1ac9      	subs	r1, r1, r3
 8016f24:	b209      	sxth	r1, r1
 8016f26:	2900      	cmp	r1, #0
 8016f28:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8016f2c:	dd12      	ble.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f2e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8016f32:	4605      	mov	r5, r0
 8016f34:	9b05      	ldr	r3, [sp, #20]
 8016f36:	3e08      	subs	r6, #8
 8016f38:	3b01      	subs	r3, #1
 8016f3a:	9305      	str	r3, [sp, #20]
 8016f3c:	e7c7      	b.n	8016ece <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8016f3e:	4461      	add	r1, ip
 8016f40:	b209      	sxth	r1, r1
 8016f42:	4571      	cmp	r1, lr
 8016f44:	dc38      	bgt.n	8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016f46:	eba2 020c 	sub.w	r2, r2, ip
 8016f4a:	b212      	sxth	r2, r2
 8016f4c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8016f50:	2a00      	cmp	r2, #0
 8016f52:	dcee      	bgt.n	8016f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016f54:	b00f      	add	sp, #60	@ 0x3c
 8016f56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f5a:	45c8      	cmp	r8, r9
 8016f5c:	db2c      	blt.n	8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016f5e:	88f3      	ldrh	r3, [r6, #6]
 8016f60:	4499      	add	r9, r3
 8016f62:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8016f66:	4498      	add	r8, r3
 8016f68:	fa0f f989 	sxth.w	r9, r9
 8016f6c:	fa0f f888 	sxth.w	r8, r8
 8016f70:	45c1      	cmp	r9, r8
 8016f72:	db21      	blt.n	8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016f74:	fa1f f28c 	uxth.w	r2, ip
 8016f78:	88b3      	ldrh	r3, [r6, #4]
 8016f7a:	45e6      	cmp	lr, ip
 8016f7c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8016f80:	4413      	add	r3, r2
 8016f82:	fa1f f88e 	uxth.w	r8, lr
 8016f86:	b29b      	uxth	r3, r3
 8016f88:	fa0f f983 	sxth.w	r9, r3
 8016f8c:	db0a      	blt.n	8016fa4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8016f8e:	eba3 0308 	sub.w	r3, r3, r8
 8016f92:	1ac9      	subs	r1, r1, r3
 8016f94:	b209      	sxth	r1, r1
 8016f96:	2900      	cmp	r1, #0
 8016f98:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8016f9c:	ddda      	ble.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8016f9e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8016fa2:	e7c6      	b.n	8016f32 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8016fa4:	4441      	add	r1, r8
 8016fa6:	b209      	sxth	r1, r1
 8016fa8:	4549      	cmp	r1, r9
 8016faa:	dc05      	bgt.n	8016fb8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8016fac:	eba2 0208 	sub.w	r2, r2, r8
 8016fb0:	b212      	sxth	r2, r2
 8016fb2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 8016fb6:	e7cb      	b.n	8016f50 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 8016fb8:	4607      	mov	r7, r0
 8016fba:	e7bb      	b.n	8016f34 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 8016fbc:	2d00      	cmp	r5, #0
 8016fbe:	d181      	bne.n	8016ec4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 8016fc0:	2f00      	cmp	r7, #0
 8016fc2:	f000 81dd 	beq.w	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 8016fc6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 8016fca:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 8016fce:	b2b3      	uxth	r3, r6
 8016fd0:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8016fd4:	9305      	str	r3, [sp, #20]
 8016fd6:	9a05      	ldr	r2, [sp, #20]
 8016fd8:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8016fdc:	4413      	add	r3, r2
 8016fde:	b2ba      	uxth	r2, r7
 8016fe0:	4492      	add	sl, r2
 8016fe2:	b29b      	uxth	r3, r3
 8016fe4:	fa1f fa8a 	uxth.w	sl, sl
 8016fe8:	fa0f f883 	sxth.w	r8, r3
 8016fec:	fa0f f98a 	sxth.w	r9, sl
 8016ff0:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8016ff4:	9b04      	ldr	r3, [sp, #16]
 8016ff6:	2b00      	cmp	r3, #0
 8016ff8:	d052      	beq.n	80170a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 8016ffa:	9903      	ldr	r1, [sp, #12]
 8016ffc:	4620      	mov	r0, r4
 8016ffe:	f7fc ff75 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 8017002:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8017006:	b1c0      	cbz	r0, 801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017008:	f9b4 e000 	ldrsh.w	lr, [r4]
 801700c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8017010:	4576      	cmp	r6, lr
 8017012:	dc22      	bgt.n	801705a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017014:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8017018:	44f4      	add	ip, lr
 801701a:	fa0f fc8c 	sxth.w	ip, ip
 801701e:	45e0      	cmp	r8, ip
 8017020:	db1b      	blt.n	801705a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8017022:	428f      	cmp	r7, r1
 8017024:	fa1f fc81 	uxth.w	ip, r1
 8017028:	88e1      	ldrh	r1, [r4, #6]
 801702a:	dc0d      	bgt.n	8017048 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801702c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8017030:	f8a4 9002 	strh.w	r9, [r4, #2]
 8017034:	eba1 010c 	sub.w	r1, r1, ip
 8017038:	80e1      	strh	r1, [r4, #6]
 801703a:	4628      	mov	r0, r5
 801703c:	9904      	ldr	r1, [sp, #16]
 801703e:	3c08      	subs	r4, #8
 8017040:	4605      	mov	r5, r0
 8017042:	3901      	subs	r1, #1
 8017044:	9104      	str	r1, [sp, #16]
 8017046:	e7d3      	b.n	8016ff0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8017048:	4461      	add	r1, ip
 801704a:	b209      	sxth	r1, r1
 801704c:	4549      	cmp	r1, r9
 801704e:	dcf5      	bgt.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8017050:	eba2 0c0c 	sub.w	ip, r2, ip
 8017054:	f8a4 c006 	strh.w	ip, [r4, #6]
 8017058:	e7ef      	b.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801705a:	428f      	cmp	r7, r1
 801705c:	dcee      	bgt.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801705e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8017062:	4461      	add	r1, ip
 8017064:	b209      	sxth	r1, r1
 8017066:	4589      	cmp	r9, r1
 8017068:	dbe8      	blt.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801706a:	4576      	cmp	r6, lr
 801706c:	fa1f fc8e 	uxth.w	ip, lr
 8017070:	88a1      	ldrh	r1, [r4, #4]
 8017072:	dc07      	bgt.n	8017084 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8017074:	eba3 0c0c 	sub.w	ip, r3, ip
 8017078:	f8a4 8000 	strh.w	r8, [r4]
 801707c:	eba1 010c 	sub.w	r1, r1, ip
 8017080:	80a1      	strh	r1, [r4, #4]
 8017082:	e7da      	b.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017084:	4461      	add	r1, ip
 8017086:	b209      	sxth	r1, r1
 8017088:	4588      	cmp	r8, r1
 801708a:	dbd7      	blt.n	801703c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801708c:	9905      	ldr	r1, [sp, #20]
 801708e:	eba1 0c0c 	sub.w	ip, r1, ip
 8017092:	f8a4 c004 	strh.w	ip, [r4, #4]
 8017096:	e7d0      	b.n	801703a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8017098:	24025e16 	.word	0x24025e16
 801709c:	24025e14 	.word	0x24025e14
 80170a0:	2d00      	cmp	r5, #0
 80170a2:	f000 816d 	beq.w	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80170a6:	9b06      	ldr	r3, [sp, #24]
 80170a8:	445b      	add	r3, fp
 80170aa:	461c      	mov	r4, r3
 80170ac:	9b02      	ldr	r3, [sp, #8]
 80170ae:	3301      	adds	r3, #1
 80170b0:	f000 8166 	beq.w	8017380 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80170b4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80170b8:	9803      	ldr	r0, [sp, #12]
 80170ba:	4629      	mov	r1, r5
 80170bc:	f7ff fd3a 	bl	8016b34 <_ZNK8touchgfx4Rect8includesERKS0_>
 80170c0:	b120      	cbz	r0, 80170cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80170c2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80170c6:	9801      	ldr	r0, [sp, #4]
 80170c8:	f7ff feb0 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80170cc:	9903      	ldr	r1, [sp, #12]
 80170ce:	4628      	mov	r0, r5
 80170d0:	f7fc ff0c 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 80170d4:	2800      	cmp	r0, #0
 80170d6:	f000 809c 	beq.w	8017212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80170da:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80170de:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80170e2:	fa1f f189 	uxth.w	r1, r9
 80170e6:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80170ea:	9309      	str	r3, [sp, #36]	@ 0x24
 80170ec:	eb01 0c03 	add.w	ip, r1, r3
 80170f0:	b283      	uxth	r3, r0
 80170f2:	4548      	cmp	r0, r9
 80170f4:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80170f8:	fa1f fa8c 	uxth.w	sl, ip
 80170fc:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8017100:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8017104:	eb03 050c 	add.w	r5, r3, ip
 8017108:	b2ad      	uxth	r5, r5
 801710a:	9505      	str	r5, [sp, #20]
 801710c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8017110:	9504      	str	r5, [sp, #16]
 8017112:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8017116:	f340 8099 	ble.w	801724c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801711a:	1a5b      	subs	r3, r3, r1
 801711c:	4596      	cmp	lr, r2
 801711e:	fa0f f08a 	sxth.w	r0, sl
 8017122:	b29b      	uxth	r3, r3
 8017124:	b21e      	sxth	r6, r3
 8017126:	dd2e      	ble.n	8017186 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8017128:	9f02      	ldr	r7, [sp, #8]
 801712a:	fa1f fe8e 	uxth.w	lr, lr
 801712e:	b292      	uxth	r2, r2
 8017130:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8017134:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8017138:	9f04      	ldr	r7, [sp, #16]
 801713a:	ebae 0102 	sub.w	r1, lr, r2
 801713e:	44a6      	add	lr, r4
 8017140:	1a3f      	subs	r7, r7, r0
 8017142:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8017146:	b289      	uxth	r1, r1
 8017148:	4402      	add	r2, r0
 801714a:	fa0f fe8e 	sxth.w	lr, lr
 801714e:	b20d      	sxth	r5, r1
 8017150:	b212      	sxth	r2, r2
 8017152:	436f      	muls	r7, r5
 8017154:	ebae 0202 	sub.w	r2, lr, r2
 8017158:	4372      	muls	r2, r6
 801715a:	4297      	cmp	r7, r2
 801715c:	db09      	blt.n	8017172 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801715e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8017162:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8017166:	449c      	add	ip, r3
 8017168:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801716c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8017170:	e686      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017172:	4421      	add	r1, r4
 8017174:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8017178:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 801717c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017180:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8017184:	e67c      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017186:	9f04      	ldr	r7, [sp, #16]
 8017188:	42b8      	cmp	r0, r7
 801718a:	da27      	bge.n	80171dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 801718c:	9902      	ldr	r1, [sp, #8]
 801718e:	1a3f      	subs	r7, r7, r0
 8017190:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8017194:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8017198:	eb05 010e 	add.w	r1, r5, lr
 801719c:	fa1f f881 	uxth.w	r8, r1
 80171a0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80171a4:	4411      	add	r1, r2
 80171a6:	fa0f f988 	sxth.w	r9, r8
 80171aa:	eba2 020e 	sub.w	r2, r2, lr
 80171ae:	eba1 0108 	sub.w	r1, r1, r8
 80171b2:	4372      	muls	r2, r6
 80171b4:	b289      	uxth	r1, r1
 80171b6:	fa0f f881 	sxth.w	r8, r1
 80171ba:	fb08 f707 	mul.w	r7, r8, r7
 80171be:	42ba      	cmp	r2, r7
 80171c0:	dc06      	bgt.n	80171d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80171c2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80171c6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80171ca:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80171ce:	e7ca      	b.n	8017166 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 80171d0:	4429      	add	r1, r5
 80171d2:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 80171d6:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80171da:	e651      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80171dc:	9805      	ldr	r0, [sp, #20]
 80171de:	2d06      	cmp	r5, #6
 80171e0:	ebaa 0000 	sub.w	r0, sl, r0
 80171e4:	b280      	uxth	r0, r0
 80171e6:	fa0f fe80 	sxth.w	lr, r0
 80171ea:	d817      	bhi.n	801721c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 80171ec:	9b04      	ldr	r3, [sp, #16]
 80171ee:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 80171f2:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 80171f6:	1c6b      	adds	r3, r5, #1
 80171f8:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 80171fc:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8017200:	9b01      	ldr	r3, [sp, #4]
 8017202:	9801      	ldr	r0, [sp, #4]
 8017204:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017208:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 801720c:	805a      	strh	r2, [r3, #2]
 801720e:	809e      	strh	r6, [r3, #4]
 8017210:	80d9      	strh	r1, [r3, #6]
 8017212:	9b02      	ldr	r3, [sp, #8]
 8017214:	3c08      	subs	r4, #8
 8017216:	3b01      	subs	r3, #1
 8017218:	9302      	str	r3, [sp, #8]
 801721a:	e747      	b.n	80170ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 801721c:	9a02      	ldr	r2, [sp, #8]
 801721e:	45b6      	cmp	lr, r6
 8017220:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8017224:	db0d      	blt.n	8017242 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8017226:	449c      	add	ip, r3
 8017228:	445a      	add	r2, fp
 801722a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 801722e:	fa1f fc8c 	uxth.w	ip, ip
 8017232:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8017236:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 801723a:	448c      	add	ip, r1
 801723c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8017240:	e61e      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017242:	445a      	add	r2, fp
 8017244:	4484      	add	ip, r0
 8017246:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 801724a:	e78f      	b.n	801716c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 801724c:	fa1f f18e 	uxth.w	r1, lr
 8017250:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8017254:	b293      	uxth	r3, r2
 8017256:	4596      	cmp	lr, r2
 8017258:	eb01 0806 	add.w	r8, r1, r6
 801725c:	9306      	str	r3, [sp, #24]
 801725e:	fa1f f888 	uxth.w	r8, r8
 8017262:	9f06      	ldr	r7, [sp, #24]
 8017264:	fa0f f388 	sxth.w	r3, r8
 8017268:	9307      	str	r3, [sp, #28]
 801726a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 801726e:	443b      	add	r3, r7
 8017270:	b29b      	uxth	r3, r3
 8017272:	9308      	str	r3, [sp, #32]
 8017274:	da24      	bge.n	80172c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8017276:	9905      	ldr	r1, [sp, #20]
 8017278:	eba3 0308 	sub.w	r3, r3, r8
 801727c:	eba2 020e 	sub.w	r2, r2, lr
 8017280:	eba9 0000 	sub.w	r0, r9, r0
 8017284:	ebaa 0401 	sub.w	r4, sl, r1
 8017288:	b29b      	uxth	r3, r3
 801728a:	b2a4      	uxth	r4, r4
 801728c:	b219      	sxth	r1, r3
 801728e:	b225      	sxth	r5, r4
 8017290:	4348      	muls	r0, r1
 8017292:	436a      	muls	r2, r5
 8017294:	4282      	cmp	r2, r0
 8017296:	9a02      	ldr	r2, [sp, #8]
 8017298:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 801729c:	445a      	add	r2, fp
 801729e:	dc06      	bgt.n	80172ae <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 80172a0:	9b07      	ldr	r3, [sp, #28]
 80172a2:	44a4      	add	ip, r4
 80172a4:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 80172a8:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 80172ac:	e75e      	b.n	801716c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 80172ae:	9904      	ldr	r1, [sp, #16]
 80172b0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 80172b4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 80172b8:	4433      	add	r3, r6
 80172ba:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 80172be:	e5df      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80172c0:	9f06      	ldr	r7, [sp, #24]
 80172c2:	9b04      	ldr	r3, [sp, #16]
 80172c4:	1bc9      	subs	r1, r1, r7
 80172c6:	fa0f f78a 	sxth.w	r7, sl
 80172ca:	b289      	uxth	r1, r1
 80172cc:	429f      	cmp	r7, r3
 80172ce:	fa0f fe81 	sxth.w	lr, r1
 80172d2:	dd23      	ble.n	801731c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 80172d4:	9a05      	ldr	r2, [sp, #20]
 80172d6:	eba9 0000 	sub.w	r0, r9, r0
 80172da:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80172de:	ebaa 0202 	sub.w	r2, sl, r2
 80172e2:	9d07      	ldr	r5, [sp, #28]
 80172e4:	fb0e f000 	mul.w	r0, lr, r0
 80172e8:	b292      	uxth	r2, r2
 80172ea:	eba5 0a03 	sub.w	sl, r5, r3
 80172ee:	9b02      	ldr	r3, [sp, #8]
 80172f0:	b214      	sxth	r4, r2
 80172f2:	00db      	lsls	r3, r3, #3
 80172f4:	fb04 fa0a 	mul.w	sl, r4, sl
 80172f8:	445b      	add	r3, fp
 80172fa:	4550      	cmp	r0, sl
 80172fc:	db03      	blt.n	8017306 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 80172fe:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8017302:	4494      	add	ip, r2
 8017304:	e732      	b.n	801716c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8017306:	9a04      	ldr	r2, [sp, #16]
 8017308:	4431      	add	r1, r6
 801730a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 801730e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8017312:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8017316:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 801731a:	e75c      	b.n	80171d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 801731c:	9b08      	ldr	r3, [sp, #32]
 801731e:	2d06      	cmp	r5, #6
 8017320:	eba3 0308 	sub.w	r3, r3, r8
 8017324:	b29b      	uxth	r3, r3
 8017326:	b218      	sxth	r0, r3
 8017328:	d813      	bhi.n	8017352 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 801732a:	9b07      	ldr	r3, [sp, #28]
 801732c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8017330:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8017334:	1c6b      	adds	r3, r5, #1
 8017336:	9901      	ldr	r1, [sp, #4]
 8017338:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 801733c:	9b01      	ldr	r3, [sp, #4]
 801733e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8017342:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8017346:	805a      	strh	r2, [r3, #2]
 8017348:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801734a:	f8a3 e006 	strh.w	lr, [r3, #6]
 801734e:	809a      	strh	r2, [r3, #4]
 8017350:	e75f      	b.n	8017212 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8017352:	9c02      	ldr	r4, [sp, #8]
 8017354:	4570      	cmp	r0, lr
 8017356:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 801735a:	db0d      	blt.n	8017378 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 801735c:	4431      	add	r1, r6
 801735e:	9b06      	ldr	r3, [sp, #24]
 8017360:	445c      	add	r4, fp
 8017362:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8017366:	b289      	uxth	r1, r1
 8017368:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 801736c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8017370:	4419      	add	r1, r3
 8017372:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8017376:	e583      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017378:	445c      	add	r4, fp
 801737a:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 801737e:	e79b      	b.n	80172b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8017380:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8017384:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8017388:	1e65      	subs	r5, r4, #1
 801738a:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 801738e:	b2ad      	uxth	r5, r5
 8017390:	42b5      	cmp	r5, r6
 8017392:	d044      	beq.n	801741e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8017394:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8017398:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 801739c:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 80173a0:	4282      	cmp	r2, r0
 80173a2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 80173a6:	d11f      	bne.n	80173e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80173a8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 80173ac:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 80173b0:	459c      	cmp	ip, r3
 80173b2:	d119      	bne.n	80173e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 80173b4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 80173b8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80173bc:	19d8      	adds	r0, r3, r7
 80173be:	b200      	sxth	r0, r0
 80173c0:	4288      	cmp	r0, r1
 80173c2:	d109      	bne.n	80173d8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 80173c4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 80173c8:	4413      	add	r3, r2
 80173ca:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 80173ce:	4629      	mov	r1, r5
 80173d0:	9801      	ldr	r0, [sp, #4]
 80173d2:	f7ff fd2b 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80173d6:	e003      	b.n	80173e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80173d8:	4411      	add	r1, r2
 80173da:	b209      	sxth	r1, r1
 80173dc:	42b9      	cmp	r1, r7
 80173de:	d0f3      	beq.n	80173c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 80173e0:	3d01      	subs	r5, #1
 80173e2:	3c08      	subs	r4, #8
 80173e4:	b2ad      	uxth	r5, r5
 80173e6:	e7d3      	b.n	8017390 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 80173e8:	42b9      	cmp	r1, r7
 80173ea:	d1f9      	bne.n	80173e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80173ec:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 80173f0:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80173f4:	4299      	cmp	r1, r3
 80173f6:	d1f3      	bne.n	80173e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 80173f8:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 80173fc:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8017400:	181f      	adds	r7, r3, r0
 8017402:	b23f      	sxth	r7, r7
 8017404:	42ba      	cmp	r2, r7
 8017406:	d105      	bne.n	8017414 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8017408:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 801740c:	440b      	add	r3, r1
 801740e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8017412:	e7dc      	b.n	80173ce <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8017414:	440a      	add	r2, r1
 8017416:	b212      	sxth	r2, r2
 8017418:	4290      	cmp	r0, r2
 801741a:	d1e1      	bne.n	80173e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 801741c:	e7f6      	b.n	801740c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 801741e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8017422:	2e07      	cmp	r6, #7
 8017424:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8017428:	d812      	bhi.n	8017450 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 801742a:	1c75      	adds	r5, r6, #1
 801742c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8017430:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8017434:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8017438:	9d01      	ldr	r5, [sp, #4]
 801743a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801743e:	442c      	add	r4, r5
 8017440:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8017444:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8017448:	8061      	strh	r1, [r4, #2]
 801744a:	80a2      	strh	r2, [r4, #4]
 801744c:	80e3      	strh	r3, [r4, #6]
 801744e:	e581      	b.n	8016f54 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8017450:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8017454:	3e01      	subs	r6, #1
 8017456:	445c      	add	r4, fp
 8017458:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 801745c:	f04f 37ff 	mov.w	r7, #4294967295
 8017460:	2500      	movs	r5, #0
 8017462:	9305      	str	r3, [sp, #20]
 8017464:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8017468:	1e72      	subs	r2, r6, #1
 801746a:	9302      	str	r3, [sp, #8]
 801746c:	4691      	mov	r9, r2
 801746e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8017472:	9304      	str	r3, [sp, #16]
 8017474:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8017478:	f1b9 3fff 	cmp.w	r9, #4294967295
 801747c:	6818      	ldr	r0, [r3, #0]
 801747e:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8017482:	9207      	str	r2, [sp, #28]
 8017484:	bf16      	itet	ne
 8017486:	9905      	ldrne	r1, [sp, #20]
 8017488:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 801748c:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8017490:	9306      	str	r3, [sp, #24]
 8017492:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8017496:	f8be 8004 	ldrh.w	r8, [lr, #4]
 801749a:	fb18 f801 	smulbb	r8, r8, r1
 801749e:	6859      	ldr	r1, [r3, #4]
 80174a0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80174a4:	4671      	mov	r1, lr
 80174a6:	a80c      	add	r0, sp, #48	@ 0x30
 80174a8:	f7ff fb6a 	bl	8016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80174ac:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 80174b0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 80174b4:	f04f 0c08 	mov.w	ip, #8
 80174b8:	9b04      	ldr	r3, [sp, #16]
 80174ba:	9a02      	ldr	r2, [sp, #8]
 80174bc:	fb10 f001 	smulbb	r0, r0, r1
 80174c0:	fb02 8803 	mla	r8, r2, r3, r8
 80174c4:	eba0 0108 	sub.w	r1, r0, r8
 80174c8:	fb90 f0fc 	sdiv	r0, r0, ip
 80174cc:	4288      	cmp	r0, r1
 80174ce:	dc20      	bgt.n	8017512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80174d0:	4551      	cmp	r1, sl
 80174d2:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 80174d6:	da03      	bge.n	80174e0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 80174d8:	b1d9      	cbz	r1, 8017512 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 80174da:	468a      	mov	sl, r1
 80174dc:	464f      	mov	r7, r9
 80174de:	4635      	mov	r5, r6
 80174e0:	f109 39ff 	add.w	r9, r9, #4294967295
 80174e4:	f119 0f02 	cmn.w	r9, #2
 80174e8:	d1c6      	bne.n	8017478 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 80174ea:	4616      	mov	r6, r2
 80174ec:	3201      	adds	r2, #1
 80174ee:	f1a4 0408 	sub.w	r4, r4, #8
 80174f2:	d1b7      	bne.n	8017464 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 80174f4:	9b01      	ldr	r3, [sp, #4]
 80174f6:	b2ac      	uxth	r4, r5
 80174f8:	00ed      	lsls	r5, r5, #3
 80174fa:	1958      	adds	r0, r3, r5
 80174fc:	1c7b      	adds	r3, r7, #1
 80174fe:	d10b      	bne.n	8017518 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8017500:	4601      	mov	r1, r0
 8017502:	9803      	ldr	r0, [sp, #12]
 8017504:	f7ff fb3c 	bl	8016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017508:	4621      	mov	r1, r4
 801750a:	9801      	ldr	r0, [sp, #4]
 801750c:	f7ff fc8e 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017510:	e4b6      	b.n	8016e80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8017512:	464f      	mov	r7, r9
 8017514:	4635      	mov	r5, r6
 8017516:	e7ed      	b.n	80174f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8017518:	9b01      	ldr	r3, [sp, #4]
 801751a:	00ff      	lsls	r7, r7, #3
 801751c:	445d      	add	r5, fp
 801751e:	19d9      	adds	r1, r3, r7
 8017520:	445f      	add	r7, fp
 8017522:	f7ff fb2d 	bl	8016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8017526:	9b03      	ldr	r3, [sp, #12]
 8017528:	cb03      	ldmia	r3!, {r0, r1}
 801752a:	9b03      	ldr	r3, [sp, #12]
 801752c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8017530:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8017534:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8017538:	6869      	ldr	r1, [r5, #4]
 801753a:	c303      	stmia	r3!, {r0, r1}
 801753c:	e7e4      	b.n	8017508 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 801753e:	bf00      	nop

08017540 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8017540:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017544:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8017548:	b09b      	sub	sp, #108	@ 0x6c
 801754a:	4604      	mov	r4, r0
 801754c:	4630      	mov	r0, r6
 801754e:	f7f8 fd24 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017552:	4605      	mov	r5, r0
 8017554:	b948      	cbnz	r0, 801756a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8017556:	6823      	ldr	r3, [r4, #0]
 8017558:	4620      	mov	r0, r4
 801755a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801755c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8017560:	4798      	blx	r3
 8017562:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8017566:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 801756a:	4bc5      	ldr	r3, [pc, #788]	@ (8017880 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 801756c:	681b      	ldr	r3, [r3, #0]
 801756e:	2b00      	cmp	r3, #0
 8017570:	d03f      	beq.n	80175f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017572:	4dc4      	ldr	r5, [pc, #784]	@ (8017884 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8017574:	4628      	mov	r0, r5
 8017576:	f7f8 fd10 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801757a:	4606      	mov	r6, r0
 801757c:	2800      	cmp	r0, #0
 801757e:	d138      	bne.n	80175f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8017580:	4628      	mov	r0, r5
 8017582:	f7ff f997 	bl	80168b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017586:	6823      	ldr	r3, [r4, #0]
 8017588:	6829      	ldr	r1, [r5, #0]
 801758a:	4620      	mov	r0, r4
 801758c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801758e:	686a      	ldr	r2, [r5, #4]
 8017590:	4798      	blx	r3
 8017592:	802e      	strh	r6, [r5, #0]
 8017594:	806e      	strh	r6, [r5, #2]
 8017596:	80ae      	strh	r6, [r5, #4]
 8017598:	80ee      	strh	r6, [r5, #6]
 801759a:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 801759e:	4dba      	ldr	r5, [pc, #744]	@ (8017888 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 80175a0:	4640      	mov	r0, r8
 80175a2:	f7ff fbe7 	bl	8016d74 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80175a6:	882e      	ldrh	r6, [r5, #0]
 80175a8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 80175ac:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80175b0:	4633      	mov	r3, r6
 80175b2:	42bb      	cmp	r3, r7
 80175b4:	d224      	bcs.n	8017600 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 80175b6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 80175ba:	2907      	cmp	r1, #7
 80175bc:	d816      	bhi.n	80175ec <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 80175be:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 80175c2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 80175c6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 80175ca:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 80175ce:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 80175d2:	1c4a      	adds	r2, r1, #1
 80175d4:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 80175d8:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 80175dc:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 80175e0:	f8a2 a002 	strh.w	sl, [r2, #2]
 80175e4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80175e8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80175ec:	3301      	adds	r3, #1
 80175ee:	b29b      	uxth	r3, r3
 80175f0:	e7df      	b.n	80175b2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 80175f2:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80175f6:	2b00      	cmp	r3, #0
 80175f8:	d1cf      	bne.n	801759a <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 80175fa:	b01b      	add	sp, #108	@ 0x6c
 80175fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017600:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8017604:	42b3      	cmp	r3, r6
 8017606:	d90c      	bls.n	8017622 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8017608:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 801760c:	6822      	ldr	r2, [r4, #0]
 801760e:	3601      	adds	r6, #1
 8017610:	4620      	mov	r0, r4
 8017612:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8017614:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8017618:	b2b6      	uxth	r6, r6
 801761a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 801761e:	47b8      	blx	r7
 8017620:	e7ee      	b.n	8017600 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8017622:	4a9a      	ldr	r2, [pc, #616]	@ (801788c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8017624:	6813      	ldr	r3, [r2, #0]
 8017626:	4691      	mov	r9, r2
 8017628:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 801762c:	2b01      	cmp	r3, #1
 801762e:	f040 80e0 	bne.w	80177f2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8017632:	8829      	ldrh	r1, [r5, #0]
 8017634:	2600      	movs	r6, #0
 8017636:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 801763a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 801763e:	33ae      	adds	r3, #174	@ 0xae
 8017640:	428f      	cmp	r7, r1
 8017642:	f103 0308 	add.w	r3, r3, #8
 8017646:	dd0a      	ble.n	801765e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8017648:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 801764c:	3101      	adds	r1, #1
 801764e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8017652:	4402      	add	r2, r0
 8017654:	b212      	sxth	r2, r2
 8017656:	4296      	cmp	r6, r2
 8017658:	bfb8      	it	lt
 801765a:	4616      	movlt	r6, r2
 801765c:	e7f0      	b.n	8017640 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 801765e:	4b8c      	ldr	r3, [pc, #560]	@ (8017890 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8017660:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 801788c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8017664:	881b      	ldrh	r3, [r3, #0]
 8017666:	2b0f      	cmp	r3, #15
 8017668:	bf8c      	ite	hi
 801766a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 801766e:	f04f 0b01 	movls.w	fp, #1
 8017672:	2300      	movs	r3, #0
 8017674:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8017678:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 801767c:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8017680:	4b82      	ldr	r3, [pc, #520]	@ (801788c <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8017682:	4438      	add	r0, r7
 8017684:	b207      	sxth	r7, r0
 8017686:	6818      	ldr	r0, [r3, #0]
 8017688:	42b7      	cmp	r7, r6
 801768a:	6803      	ldr	r3, [r0, #0]
 801768c:	f280 8083 	bge.w	8017796 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8017690:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8017694:	4798      	blx	r3
 8017696:	eb07 030b 	add.w	r3, r7, fp
 801769a:	4298      	cmp	r0, r3
 801769c:	da07      	bge.n	80176ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 801769e:	42b0      	cmp	r0, r6
 80176a0:	da05      	bge.n	80176ae <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 80176a2:	4287      	cmp	r7, r0
 80176a4:	dd6c      	ble.n	8017780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80176a6:	2f00      	cmp	r7, #0
 80176a8:	dd6a      	ble.n	8017780 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 80176aa:	4630      	mov	r0, r6
 80176ac:	e004      	b.n	80176b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 80176ae:	4287      	cmp	r7, r0
 80176b0:	dcfb      	bgt.n	80176aa <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 80176b2:	42b0      	cmp	r0, r6
 80176b4:	bfa8      	it	ge
 80176b6:	4630      	movge	r0, r6
 80176b8:	4b76      	ldr	r3, [pc, #472]	@ (8017894 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 80176ba:	1bc0      	subs	r0, r0, r7
 80176bc:	2200      	movs	r2, #0
 80176be:	f8ad 7016 	strh.w	r7, [sp, #22]
 80176c2:	f9b3 3000 	ldrsh.w	r3, [r3]
 80176c6:	882f      	ldrh	r7, [r5, #0]
 80176c8:	f8ad 2014 	strh.w	r2, [sp, #20]
 80176cc:	f8ad 3018 	strh.w	r3, [sp, #24]
 80176d0:	f8ad 001a 	strh.w	r0, [sp, #26]
 80176d4:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 80176d8:	42bb      	cmp	r3, r7
 80176da:	d9cd      	bls.n	8017678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 80176dc:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 80176e0:	ab07      	add	r3, sp, #28
 80176e2:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80176e6:	6851      	ldr	r1, [r2, #4]
 80176e8:	c303      	stmia	r3!, {r0, r1}
 80176ea:	a905      	add	r1, sp, #20
 80176ec:	a807      	add	r0, sp, #28
 80176ee:	f7fc fbfd 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 80176f2:	2800      	cmp	r0, #0
 80176f4:	d04c      	beq.n	8017790 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 80176f6:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 80176fa:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 80176fe:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8017702:	4686      	mov	lr, r0
 8017704:	4290      	cmp	r0, r2
 8017706:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 801770a:	4450      	add	r0, sl
 801770c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8017710:	bfb8      	it	lt
 8017712:	4696      	movlt	lr, r2
 8017714:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8017718:	4452      	add	r2, sl
 801771a:	b280      	uxth	r0, r0
 801771c:	4299      	cmp	r1, r3
 801771e:	468c      	mov	ip, r1
 8017720:	b292      	uxth	r2, r2
 8017722:	9302      	str	r3, [sp, #8]
 8017724:	bfb8      	it	lt
 8017726:	469c      	movlt	ip, r3
 8017728:	b203      	sxth	r3, r0
 801772a:	fa0f fa82 	sxth.w	sl, r2
 801772e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8017732:	f8ad c01e 	strh.w	ip, [sp, #30]
 8017736:	4553      	cmp	r3, sl
 8017738:	bfb8      	it	lt
 801773a:	4602      	movlt	r2, r0
 801773c:	9b02      	ldr	r3, [sp, #8]
 801773e:	eba2 020e 	sub.w	r2, r2, lr
 8017742:	f8ad 2020 	strh.w	r2, [sp, #32]
 8017746:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801774a:	4411      	add	r1, r2
 801774c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8017750:	4413      	add	r3, r2
 8017752:	b289      	uxth	r1, r1
 8017754:	b29b      	uxth	r3, r3
 8017756:	b208      	sxth	r0, r1
 8017758:	b21a      	sxth	r2, r3
 801775a:	4290      	cmp	r0, r2
 801775c:	bfb8      	it	lt
 801775e:	460b      	movlt	r3, r1
 8017760:	eba3 030c 	sub.w	r3, r3, ip
 8017764:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017768:	a807      	add	r0, sp, #28
 801776a:	f7f8 fc16 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801776e:	b920      	cbnz	r0, 801777a <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8017770:	6823      	ldr	r3, [r4, #0]
 8017772:	a907      	add	r1, sp, #28
 8017774:	4620      	mov	r0, r4
 8017776:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017778:	4798      	blx	r3
 801777a:	3701      	adds	r7, #1
 801777c:	b2bf      	uxth	r7, r7
 801777e:	e7a9      	b.n	80176d4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8017780:	f8d9 0000 	ldr.w	r0, [r9]
 8017784:	2101      	movs	r1, #1
 8017786:	6803      	ldr	r3, [r0, #0]
 8017788:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801778c:	4798      	blx	r3
 801778e:	e773      	b.n	8017678 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8017790:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8017794:	e7e8      	b.n	8017768 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8017796:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017798:	4798      	blx	r3
 801779a:	4b3f      	ldr	r3, [pc, #252]	@ (8017898 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 801779c:	781b      	ldrb	r3, [r3, #0]
 801779e:	2b00      	cmp	r3, #0
 80177a0:	f43f af2b 	beq.w	80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80177a4:	2300      	movs	r3, #0
 80177a6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80177aa:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80177ae:	882b      	ldrh	r3, [r5, #0]
 80177b0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80177b4:	42ab      	cmp	r3, r5
 80177b6:	f4bf af20 	bcs.w	80175fa <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80177ba:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80177be:	2907      	cmp	r1, #7
 80177c0:	d814      	bhi.n	80177ec <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80177c2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80177c6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80177ca:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80177ce:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80177d2:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80177d6:	1c4a      	adds	r2, r1, #1
 80177d8:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80177dc:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80177e0:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80177e4:	f8a2 c002 	strh.w	ip, [r2, #2]
 80177e8:	8097      	strh	r7, [r2, #4]
 80177ea:	80d6      	strh	r6, [r2, #6]
 80177ec:	3301      	adds	r3, #1
 80177ee:	b29b      	uxth	r3, r3
 80177f0:	e7e0      	b.n	80177b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80177f2:	2b02      	cmp	r3, #2
 80177f4:	f040 8133 	bne.w	8017a5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80177f8:	4b28      	ldr	r3, [pc, #160]	@ (801789c <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80177fa:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80177fe:	781b      	ldrb	r3, [r3, #0]
 8017800:	2b01      	cmp	r3, #1
 8017802:	f000 8098 	beq.w	8017936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8017806:	882a      	ldrh	r2, [r5, #0]
 8017808:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801780c:	3201      	adds	r2, #1
 801780e:	b292      	uxth	r2, r2
 8017810:	2900      	cmp	r1, #0
 8017812:	d0c2      	beq.n	801779a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017814:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8017818:	4694      	mov	ip, r2
 801781a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801781e:	f04f 0900 	mov.w	r9, #0
 8017822:	441e      	add	r6, r3
 8017824:	b236      	sxth	r6, r6
 8017826:	fa1f f38c 	uxth.w	r3, ip
 801782a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801782e:	4299      	cmp	r1, r3
 8017830:	f240 80be 	bls.w	80179b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8017834:	4427      	add	r7, r4
 8017836:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801783a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801783e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8017842:	4283      	cmp	r3, r0
 8017844:	f340 80a0 	ble.w	8017988 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8017848:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801784c:	46e1      	mov	r9, ip
 801784e:	4406      	add	r6, r0
 8017850:	b236      	sxth	r6, r6
 8017852:	429e      	cmp	r6, r3
 8017854:	bfa8      	it	ge
 8017856:	461e      	movge	r6, r3
 8017858:	f10c 0c01 	add.w	ip, ip, #1
 801785c:	e7e3      	b.n	8017826 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801785e:	d10a      	bne.n	8017876 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8017860:	4562      	cmp	r2, ip
 8017862:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8017866:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801786a:	bfb8      	it	lt
 801786c:	4662      	movlt	r2, ip
 801786e:	4288      	cmp	r0, r1
 8017870:	bfb8      	it	lt
 8017872:	461f      	movlt	r7, r3
 8017874:	e086      	b.n	8017984 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8017876:	428a      	cmp	r2, r1
 8017878:	bfb8      	it	lt
 801787a:	460a      	movlt	r2, r1
 801787c:	e082      	b.n	8017984 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801787e:	bf00      	nop
 8017880:	24025e60 	.word	0x24025e60
 8017884:	24025e6c 	.word	0x24025e6c
 8017888:	240000ac 	.word	0x240000ac
 801788c:	24025e20 	.word	0x24025e20
 8017890:	24025e16 	.word	0x24025e16
 8017894:	24025e14 	.word	0x24025e14
 8017898:	24025e1e 	.word	0x24025e1e
 801789c:	24025e18 	.word	0x24025e18
 80178a0:	19a1      	adds	r1, r4, r6
 80178a2:	ab07      	add	r3, sp, #28
 80178a4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80178a8:	6849      	ldr	r1, [r1, #4]
 80178aa:	c303      	stmia	r3!, {r0, r1}
 80178ac:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80178b0:	a807      	add	r0, sp, #28
 80178b2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80178b6:	2b13      	cmp	r3, #19
 80178b8:	440b      	add	r3, r1
 80178ba:	bfd8      	it	le
 80178bc:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80178c0:	1a9b      	subs	r3, r3, r2
 80178c2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80178c6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80178ca:	f7ff f80d 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80178ce:	a807      	add	r0, sp, #28
 80178d0:	f7f8 fb63 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80178d4:	bb78      	cbnz	r0, 8017936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80178d6:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80178da:	4426      	add	r6, r4
 80178dc:	f8d9 0000 	ldr.w	r0, [r9]
 80178e0:	f1bc 0f14 	cmp.w	ip, #20
 80178e4:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80178e8:	f8d0 e000 	ldr.w	lr, [r0]
 80178ec:	bfa8      	it	ge
 80178ee:	f04f 0c14 	movge.w	ip, #20
 80178f2:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80178f6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80178fa:	fa1f fc8c 	uxth.w	ip, ip
 80178fe:	f8cd c000 	str.w	ip, [sp]
 8017902:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8017906:	47d8      	blx	fp
 8017908:	4683      	mov	fp, r0
 801790a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801790e:	a807      	add	r0, sp, #28
 8017910:	f7fe ffd0 	bl	80168b4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8017914:	6823      	ldr	r3, [r4, #0]
 8017916:	4620      	mov	r0, r4
 8017918:	a907      	add	r1, sp, #28
 801791a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801791c:	4798      	blx	r3
 801791e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017922:	eba0 000b 	sub.w	r0, r0, fp
 8017926:	b200      	sxth	r0, r0
 8017928:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801792c:	b918      	cbnz	r0, 8017936 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801792e:	b2b9      	uxth	r1, r7
 8017930:	4650      	mov	r0, sl
 8017932:	f7ff fa7b 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017936:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801793a:	f1bb 0f00 	cmp.w	fp, #0
 801793e:	f43f af2c 	beq.w	801779a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017942:	882b      	ldrh	r3, [r5, #0]
 8017944:	2700      	movs	r7, #0
 8017946:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801794a:	3301      	adds	r3, #1
 801794c:	b29b      	uxth	r3, r3
 801794e:	b299      	uxth	r1, r3
 8017950:	00fe      	lsls	r6, r7, #3
 8017952:	458b      	cmp	fp, r1
 8017954:	d9a4      	bls.n	80178a0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8017956:	4426      	add	r6, r4
 8017958:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801795c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8017960:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8017964:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8017968:	4408      	add	r0, r1
 801796a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801796e:	4461      	add	r1, ip
 8017970:	b200      	sxth	r0, r0
 8017972:	b209      	sxth	r1, r1
 8017974:	4288      	cmp	r0, r1
 8017976:	f6bf af72 	bge.w	801785e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801797a:	4584      	cmp	ip, r0
 801797c:	4662      	mov	r2, ip
 801797e:	461f      	mov	r7, r3
 8017980:	bfb8      	it	lt
 8017982:	4602      	movlt	r2, r0
 8017984:	3301      	adds	r3, #1
 8017986:	e7e2      	b.n	801794e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 8017988:	d10e      	bne.n	80179a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801798a:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 801798e:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8017992:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 8017996:	4473      	add	r3, lr
 8017998:	b21b      	sxth	r3, r3
 801799a:	429e      	cmp	r6, r3
 801799c:	bfa8      	it	ge
 801799e:	461e      	movge	r6, r3
 80179a0:	4287      	cmp	r7, r0
 80179a2:	bfb8      	it	lt
 80179a4:	46e1      	movlt	r9, ip
 80179a6:	e757      	b.n	8017858 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80179a8:	4286      	cmp	r6, r0
 80179aa:	bfa8      	it	ge
 80179ac:	4606      	movge	r6, r0
 80179ae:	e753      	b.n	8017858 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80179b0:	eb0a 0007 	add.w	r0, sl, r7
 80179b4:	4427      	add	r7, r4
 80179b6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80179ba:	f1bb 0f13 	cmp.w	fp, #19
 80179be:	bfdc      	itt	le
 80179c0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80179c4:	445e      	addle	r6, fp
 80179c6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80179ca:	bfd8      	it	le
 80179cc:	b236      	sxthle	r6, r6
 80179ce:	f7f8 fae4 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 80179d2:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80179d6:	2800      	cmp	r0, #0
 80179d8:	f47f af1a 	bne.w	8017810 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80179dc:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80179e0:	fa1f fb8b 	uxth.w	fp, fp
 80179e4:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80179e8:	1ab6      	subs	r6, r6, r2
 80179ea:	4829      	ldr	r0, [pc, #164]	@ (8017a90 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80179ec:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80179f0:	2e14      	cmp	r6, #20
 80179f2:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80179f6:	6800      	ldr	r0, [r0, #0]
 80179f8:	bfa8      	it	ge
 80179fa:	2614      	movge	r6, #20
 80179fc:	f8ad 101c 	strh.w	r1, [sp, #28]
 8017a00:	f8ad 201e 	strh.w	r2, [sp, #30]
 8017a04:	b289      	uxth	r1, r1
 8017a06:	f8ad 3020 	strh.w	r3, [sp, #32]
 8017a0a:	b2b6      	uxth	r6, r6
 8017a0c:	f8d0 c000 	ldr.w	ip, [r0]
 8017a10:	b292      	uxth	r2, r2
 8017a12:	455e      	cmp	r6, fp
 8017a14:	bf94      	ite	ls
 8017a16:	9600      	strls	r6, [sp, #0]
 8017a18:	f8cd b000 	strhi.w	fp, [sp]
 8017a1c:	b29b      	uxth	r3, r3
 8017a1e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8017a22:	47b0      	blx	r6
 8017a24:	6823      	ldr	r3, [r4, #0]
 8017a26:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8017a2a:	a907      	add	r1, sp, #28
 8017a2c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a2e:	4620      	mov	r0, r4
 8017a30:	4798      	blx	r3
 8017a32:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8017a36:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017a3a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8017a3e:	1a5b      	subs	r3, r3, r1
 8017a40:	440a      	add	r2, r1
 8017a42:	b21b      	sxth	r3, r3
 8017a44:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8017a48:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8017a4c:	2b00      	cmp	r3, #0
 8017a4e:	f47f aeda 	bne.w	8017806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017a52:	fa1f f189 	uxth.w	r1, r9
 8017a56:	4650      	mov	r0, sl
 8017a58:	f7ff f9e8 	bl	8016e2c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8017a5c:	e6d3      	b.n	8017806 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8017a5e:	882e      	ldrh	r6, [r5, #0]
 8017a60:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8017a64:	42b3      	cmp	r3, r6
 8017a66:	f67f ae98 	bls.w	801779a <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8017a6a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8017a6e:	ab07      	add	r3, sp, #28
 8017a70:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8017a74:	6851      	ldr	r1, [r2, #4]
 8017a76:	c303      	stmia	r3!, {r0, r1}
 8017a78:	a807      	add	r0, sp, #28
 8017a7a:	f7f8 fa8e 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 8017a7e:	b920      	cbnz	r0, 8017a8a <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8017a80:	6823      	ldr	r3, [r4, #0]
 8017a82:	a907      	add	r1, sp, #28
 8017a84:	4620      	mov	r0, r4
 8017a86:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017a88:	4798      	blx	r3
 8017a8a:	3601      	adds	r6, #1
 8017a8c:	b2b6      	uxth	r6, r6
 8017a8e:	e7e7      	b.n	8017a60 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8017a90:	24025e20 	.word	0x24025e20

08017a94 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8017a94:	4b03      	ldr	r3, [pc, #12]	@ (8017aa4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 8017a96:	2200      	movs	r2, #0
 8017a98:	801a      	strh	r2, [r3, #0]
 8017a9a:	805a      	strh	r2, [r3, #2]
 8017a9c:	809a      	strh	r2, [r3, #4]
 8017a9e:	80da      	strh	r2, [r3, #6]
 8017aa0:	4770      	bx	lr
 8017aa2:	bf00      	nop
 8017aa4:	24025e6c 	.word	0x24025e6c

08017aa8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 8017aa8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017aac:	b09d      	sub	sp, #116	@ 0x74
 8017aae:	4606      	mov	r6, r0
 8017ab0:	4614      	mov	r4, r2
 8017ab2:	468a      	mov	sl, r1
 8017ab4:	a803      	add	r0, sp, #12
 8017ab6:	461d      	mov	r5, r3
 8017ab8:	f001 f8b6 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8017abc:	6833      	ldr	r3, [r6, #0]
 8017abe:	4630      	mov	r0, r6
 8017ac0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 8017ac4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017ac6:	4798      	blx	r3
 8017ac8:	6833      	ldr	r3, [r6, #0]
 8017aca:	4607      	mov	r7, r0
 8017acc:	4630      	mov	r0, r6
 8017ace:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017ad0:	4798      	blx	r3
 8017ad2:	462a      	mov	r2, r5
 8017ad4:	2500      	movs	r5, #0
 8017ad6:	4621      	mov	r1, r4
 8017ad8:	9000      	str	r0, [sp, #0]
 8017ada:	463b      	mov	r3, r7
 8017adc:	462c      	mov	r4, r5
 8017ade:	46a9      	mov	r9, r5
 8017ae0:	46a8      	mov	r8, r5
 8017ae2:	a803      	add	r0, sp, #12
 8017ae4:	f001 f8fb 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ae8:	2300      	movs	r3, #0
 8017aea:	9302      	str	r3, [sp, #8]
 8017aec:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8017af0:	429c      	cmp	r4, r3
 8017af2:	d002      	beq.n	8017afa <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8017af4:	455c      	cmp	r4, fp
 8017af6:	bf18      	it	ne
 8017af8:	4625      	movne	r5, r4
 8017afa:	ab02      	add	r3, sp, #8
 8017afc:	4632      	mov	r2, r6
 8017afe:	4651      	mov	r1, sl
 8017b00:	a803      	add	r0, sp, #12
 8017b02:	f001 fc1f 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017b06:	4604      	mov	r4, r0
 8017b08:	b108      	cbz	r0, 8017b0e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 8017b0a:	280a      	cmp	r0, #10
 8017b0c:	d10a      	bne.n	8017b24 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8017b0e:	45c1      	cmp	r9, r8
 8017b10:	bf38      	it	cc
 8017b12:	46c1      	movcc	r9, r8
 8017b14:	f04f 0800 	mov.w	r8, #0
 8017b18:	2c00      	cmp	r4, #0
 8017b1a:	d1e5      	bne.n	8017ae8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b1c:	4648      	mov	r0, r9
 8017b1e:	b01d      	add	sp, #116	@ 0x74
 8017b20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017b24:	9a02      	ldr	r2, [sp, #8]
 8017b26:	2a00      	cmp	r2, #0
 8017b28:	d0de      	beq.n	8017ae8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8017b2a:	7b57      	ldrb	r7, [r2, #13]
 8017b2c:	4629      	mov	r1, r5
 8017b2e:	6833      	ldr	r3, [r6, #0]
 8017b30:	007f      	lsls	r7, r7, #1
 8017b32:	8894      	ldrh	r4, [r2, #4]
 8017b34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8017b36:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 8017b3a:	7a97      	ldrb	r7, [r2, #10]
 8017b3c:	4307      	orrs	r7, r0
 8017b3e:	4630      	mov	r0, r6
 8017b40:	4798      	blx	r3
 8017b42:	4438      	add	r0, r7
 8017b44:	4480      	add	r8, r0
 8017b46:	fa1f f888 	uxth.w	r8, r8
 8017b4a:	e7e5      	b.n	8017b18 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08017b4c <_ZNK8touchgfx4Font12getCharWidthEt>:
 8017b4c:	b508      	push	{r3, lr}
 8017b4e:	6803      	ldr	r3, [r0, #0]
 8017b50:	68db      	ldr	r3, [r3, #12]
 8017b52:	4798      	blx	r3
 8017b54:	b128      	cbz	r0, 8017b62 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8017b56:	7b43      	ldrb	r3, [r0, #13]
 8017b58:	7a80      	ldrb	r0, [r0, #10]
 8017b5a:	005b      	lsls	r3, r3, #1
 8017b5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017b60:	4318      	orrs	r0, r3
 8017b62:	bd08      	pop	{r3, pc}

08017b64 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8017b64:	b40e      	push	{r1, r2, r3}
 8017b66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017b68:	b09e      	sub	sp, #120	@ 0x78
 8017b6a:	4605      	mov	r5, r0
 8017b6c:	ab23      	add	r3, sp, #140	@ 0x8c
 8017b6e:	a805      	add	r0, sp, #20
 8017b70:	f853 4b04 	ldr.w	r4, [r3], #4
 8017b74:	9303      	str	r3, [sp, #12]
 8017b76:	f001 f857 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8017b7a:	682b      	ldr	r3, [r5, #0]
 8017b7c:	4628      	mov	r0, r5
 8017b7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017b80:	4798      	blx	r3
 8017b82:	682b      	ldr	r3, [r5, #0]
 8017b84:	4606      	mov	r6, r0
 8017b86:	4628      	mov	r0, r5
 8017b88:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017b8a:	4798      	blx	r3
 8017b8c:	4633      	mov	r3, r6
 8017b8e:	4621      	mov	r1, r4
 8017b90:	ae1e      	add	r6, sp, #120	@ 0x78
 8017b92:	2400      	movs	r4, #0
 8017b94:	9000      	str	r0, [sp, #0]
 8017b96:	9a03      	ldr	r2, [sp, #12]
 8017b98:	a805      	add	r0, sp, #20
 8017b9a:	f001 f8a0 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017b9e:	f846 4d68 	str.w	r4, [r6, #-104]!
 8017ba2:	462a      	mov	r2, r5
 8017ba4:	4633      	mov	r3, r6
 8017ba6:	4621      	mov	r1, r4
 8017ba8:	a805      	add	r0, sp, #20
 8017baa:	f001 fbcb 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017bae:	b300      	cbz	r0, 8017bf2 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 8017bb0:	280a      	cmp	r0, #10
 8017bb2:	d01a      	beq.n	8017bea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017bb4:	9f04      	ldr	r7, [sp, #16]
 8017bb6:	b1c7      	cbz	r7, 8017bea <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 8017bb8:	7b78      	ldrb	r0, [r7, #13]
 8017bba:	7a3b      	ldrb	r3, [r7, #8]
 8017bbc:	00c1      	lsls	r1, r0, #3
 8017bbe:	88ea      	ldrh	r2, [r5, #6]
 8017bc0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8017bc4:	4319      	orrs	r1, r3
 8017bc6:	0643      	lsls	r3, r0, #25
 8017bc8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 8017bcc:	bf48      	it	mi
 8017bce:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8017bd2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8017bd6:	bf48      	it	mi
 8017bd8:	b219      	sxthmi	r1, r3
 8017bda:	79fb      	ldrb	r3, [r7, #7]
 8017bdc:	4303      	orrs	r3, r0
 8017bde:	4413      	add	r3, r2
 8017be0:	1a5b      	subs	r3, r3, r1
 8017be2:	b21b      	sxth	r3, r3
 8017be4:	429c      	cmp	r4, r3
 8017be6:	bfb8      	it	lt
 8017be8:	461c      	movlt	r4, r3
 8017bea:	4633      	mov	r3, r6
 8017bec:	462a      	mov	r2, r5
 8017bee:	2100      	movs	r1, #0
 8017bf0:	e7da      	b.n	8017ba8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8017bf2:	b2a0      	uxth	r0, r4
 8017bf4:	b01e      	add	sp, #120	@ 0x78
 8017bf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017bfa:	b003      	add	sp, #12
 8017bfc:	4770      	bx	lr

08017bfe <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 8017bfe:	7a43      	ldrb	r3, [r0, #9]
 8017c00:	8880      	ldrh	r0, [r0, #4]
 8017c02:	4418      	add	r0, r3
 8017c04:	b280      	uxth	r0, r0
 8017c06:	4770      	bx	lr

08017c08 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8017c08:	6803      	ldr	r3, [r0, #0]
 8017c0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017c0c:	4718      	bx	r3

08017c0e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8017c0e:	b40e      	push	{r1, r2, r3}
 8017c10:	b570      	push	{r4, r5, r6, lr}
 8017c12:	b09d      	sub	sp, #116	@ 0x74
 8017c14:	4604      	mov	r4, r0
 8017c16:	ab21      	add	r3, sp, #132	@ 0x84
 8017c18:	a803      	add	r0, sp, #12
 8017c1a:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c1e:	9302      	str	r3, [sp, #8]
 8017c20:	f001 f802 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8017c24:	6823      	ldr	r3, [r4, #0]
 8017c26:	4620      	mov	r0, r4
 8017c28:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c2a:	4798      	blx	r3
 8017c2c:	6823      	ldr	r3, [r4, #0]
 8017c2e:	4606      	mov	r6, r0
 8017c30:	4620      	mov	r0, r4
 8017c32:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c34:	2401      	movs	r4, #1
 8017c36:	4798      	blx	r3
 8017c38:	4633      	mov	r3, r6
 8017c3a:	9000      	str	r0, [sp, #0]
 8017c3c:	4629      	mov	r1, r5
 8017c3e:	9a02      	ldr	r2, [sp, #8]
 8017c40:	a803      	add	r0, sp, #12
 8017c42:	f001 f84c 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017c46:	a803      	add	r0, sp, #12
 8017c48:	f001 fc48 	bl	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c4c:	b2a3      	uxth	r3, r4
 8017c4e:	b138      	cbz	r0, 8017c60 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8017c50:	280a      	cmp	r0, #10
 8017c52:	a803      	add	r0, sp, #12
 8017c54:	bf04      	itt	eq
 8017c56:	3301      	addeq	r3, #1
 8017c58:	b21c      	sxtheq	r4, r3
 8017c5a:	f001 fc3f 	bl	80194dc <_ZN8touchgfx12TextProvider11getNextCharEv>
 8017c5e:	e7f5      	b.n	8017c4c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8017c60:	4618      	mov	r0, r3
 8017c62:	b01d      	add	sp, #116	@ 0x74
 8017c64:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017c68:	b003      	add	sp, #12
 8017c6a:	4770      	bx	lr

08017c6c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8017c6c:	b40e      	push	{r1, r2, r3}
 8017c6e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017c70:	b09e      	sub	sp, #120	@ 0x78
 8017c72:	4604      	mov	r4, r0
 8017c74:	ab23      	add	r3, sp, #140	@ 0x8c
 8017c76:	a805      	add	r0, sp, #20
 8017c78:	f853 5b04 	ldr.w	r5, [r3], #4
 8017c7c:	9303      	str	r3, [sp, #12]
 8017c7e:	f000 ffd3 	bl	8018c28 <_ZN8touchgfx12TextProviderC1Ev>
 8017c82:	6823      	ldr	r3, [r4, #0]
 8017c84:	4620      	mov	r0, r4
 8017c86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8017c88:	4798      	blx	r3
 8017c8a:	6823      	ldr	r3, [r4, #0]
 8017c8c:	4606      	mov	r6, r0
 8017c8e:	4620      	mov	r0, r4
 8017c90:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8017c92:	4798      	blx	r3
 8017c94:	4633      	mov	r3, r6
 8017c96:	4629      	mov	r1, r5
 8017c98:	9000      	str	r0, [sp, #0]
 8017c9a:	9a03      	ldr	r2, [sp, #12]
 8017c9c:	a805      	add	r0, sp, #20
 8017c9e:	f001 f81e 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8017ca2:	ad1e      	add	r5, sp, #120	@ 0x78
 8017ca4:	2100      	movs	r1, #0
 8017ca6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 8017caa:	4622      	mov	r2, r4
 8017cac:	a805      	add	r0, sp, #20
 8017cae:	f845 1d68 	str.w	r1, [r5, #-104]!
 8017cb2:	462b      	mov	r3, r5
 8017cb4:	f001 fb46 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cb8:	b1d8      	cbz	r0, 8017cf2 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 8017cba:	280a      	cmp	r0, #10
 8017cbc:	d012      	beq.n	8017ce4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017cbe:	9804      	ldr	r0, [sp, #16]
 8017cc0:	b180      	cbz	r0, 8017ce4 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 8017cc2:	7b47      	ldrb	r7, [r0, #13]
 8017cc4:	88e2      	ldrh	r2, [r4, #6]
 8017cc6:	00fb      	lsls	r3, r7, #3
 8017cc8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8017ccc:	7a03      	ldrb	r3, [r0, #8]
 8017cce:	430b      	orrs	r3, r1
 8017cd0:	0679      	lsls	r1, r7, #25
 8017cd2:	bf44      	itt	mi
 8017cd4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8017cd8:	b21b      	sxthmi	r3, r3
 8017cda:	1ad3      	subs	r3, r2, r3
 8017cdc:	b21b      	sxth	r3, r3
 8017cde:	429e      	cmp	r6, r3
 8017ce0:	bfa8      	it	ge
 8017ce2:	461e      	movge	r6, r3
 8017ce4:	462b      	mov	r3, r5
 8017ce6:	4622      	mov	r2, r4
 8017ce8:	2100      	movs	r1, #0
 8017cea:	a805      	add	r0, sp, #20
 8017cec:	f001 fb2a 	bl	8019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8017cf0:	e7e2      	b.n	8017cb8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8017cf2:	4630      	mov	r0, r6
 8017cf4:	b01e      	add	sp, #120	@ 0x78
 8017cf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 8017cfa:	b003      	add	sp, #12
 8017cfc:	4770      	bx	lr

08017cfe <_ZNK8touchgfx8Drawable10invalidateEv>:
 8017cfe:	b513      	push	{r0, r1, r4, lr}
 8017d00:	6803      	ldr	r3, [r0, #0]
 8017d02:	2400      	movs	r4, #0
 8017d04:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8017d08:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017d0c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8017d10:	4669      	mov	r1, sp
 8017d12:	691b      	ldr	r3, [r3, #16]
 8017d14:	9400      	str	r4, [sp, #0]
 8017d16:	f8ad 2006 	strh.w	r2, [sp, #6]
 8017d1a:	4798      	blx	r3
 8017d1c:	b002      	add	sp, #8
 8017d1e:	bd10      	pop	{r4, pc}

08017d20 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8017d20:	b538      	push	{r3, r4, r5, lr}
 8017d22:	680b      	ldr	r3, [r1, #0]
 8017d24:	460c      	mov	r4, r1
 8017d26:	4605      	mov	r5, r0
 8017d28:	68db      	ldr	r3, [r3, #12]
 8017d2a:	4798      	blx	r3
 8017d2c:	6823      	ldr	r3, [r4, #0]
 8017d2e:	4620      	mov	r0, r4
 8017d30:	4629      	mov	r1, r5
 8017d32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d34:	4798      	blx	r3
 8017d36:	4628      	mov	r0, r5
 8017d38:	bd38      	pop	{r3, r4, r5, pc}

08017d3a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 8017d3a:	b410      	push	{r4}
 8017d3c:	880a      	ldrh	r2, [r1, #0]
 8017d3e:	8884      	ldrh	r4, [r0, #4]
 8017d40:	4422      	add	r2, r4
 8017d42:	800a      	strh	r2, [r1, #0]
 8017d44:	884a      	ldrh	r2, [r1, #2]
 8017d46:	88c4      	ldrh	r4, [r0, #6]
 8017d48:	4422      	add	r2, r4
 8017d4a:	804a      	strh	r2, [r1, #2]
 8017d4c:	6940      	ldr	r0, [r0, #20]
 8017d4e:	b120      	cbz	r0, 8017d5a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8017d50:	6803      	ldr	r3, [r0, #0]
 8017d52:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017d58:	4718      	bx	r3
 8017d5a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8017d5e:	4770      	bx	lr

08017d60 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8017d60:	b570      	push	{r4, r5, r6, lr}
 8017d62:	8882      	ldrh	r2, [r0, #4]
 8017d64:	460c      	mov	r4, r1
 8017d66:	880b      	ldrh	r3, [r1, #0]
 8017d68:	4605      	mov	r5, r0
 8017d6a:	4413      	add	r3, r2
 8017d6c:	800b      	strh	r3, [r1, #0]
 8017d6e:	884b      	ldrh	r3, [r1, #2]
 8017d70:	88c2      	ldrh	r2, [r0, #6]
 8017d72:	4413      	add	r3, r2
 8017d74:	804b      	strh	r3, [r1, #2]
 8017d76:	1d01      	adds	r1, r0, #4
 8017d78:	4620      	mov	r0, r4
 8017d7a:	f7f8 f8cb 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8017d7e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017d82:	2b00      	cmp	r3, #0
 8017d84:	dd0b      	ble.n	8017d9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d86:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	dd07      	ble.n	8017d9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d8e:	6968      	ldr	r0, [r5, #20]
 8017d90:	b128      	cbz	r0, 8017d9e <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8017d92:	6803      	ldr	r3, [r0, #0]
 8017d94:	4621      	mov	r1, r4
 8017d96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d98:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017d9c:	4718      	bx	r3
 8017d9e:	bd70      	pop	{r4, r5, r6, pc}

08017da0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8017da0:	b570      	push	{r4, r5, r6, lr}
 8017da2:	8882      	ldrh	r2, [r0, #4]
 8017da4:	460c      	mov	r4, r1
 8017da6:	880b      	ldrh	r3, [r1, #0]
 8017da8:	4605      	mov	r5, r0
 8017daa:	4413      	add	r3, r2
 8017dac:	800b      	strh	r3, [r1, #0]
 8017dae:	884b      	ldrh	r3, [r1, #2]
 8017db0:	88c2      	ldrh	r2, [r0, #6]
 8017db2:	4413      	add	r3, r2
 8017db4:	804b      	strh	r3, [r1, #2]
 8017db6:	1d01      	adds	r1, r0, #4
 8017db8:	4620      	mov	r0, r4
 8017dba:	f7f8 f8ab 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8017dbe:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	dd19      	ble.n	8017dfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017dc6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	dd15      	ble.n	8017dfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017dce:	6968      	ldr	r0, [r5, #20]
 8017dd0:	b128      	cbz	r0, 8017dde <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8017dd2:	6803      	ldr	r3, [r0, #0]
 8017dd4:	4621      	mov	r1, r4
 8017dd6:	691b      	ldr	r3, [r3, #16]
 8017dd8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017ddc:	4718      	bx	r3
 8017dde:	4b07      	ldr	r3, [pc, #28]	@ (8017dfc <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8017de0:	681b      	ldr	r3, [r3, #0]
 8017de2:	3304      	adds	r3, #4
 8017de4:	429d      	cmp	r5, r3
 8017de6:	d108      	bne.n	8017dfa <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8017de8:	f7fe ff10 	bl	8016c0c <_ZN8touchgfx11Application11getInstanceEv>
 8017dec:	6803      	ldr	r3, [r0, #0]
 8017dee:	6821      	ldr	r1, [r4, #0]
 8017df0:	6862      	ldr	r2, [r4, #4]
 8017df2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017df4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017df8:	4718      	bx	r3
 8017dfa:	bd70      	pop	{r4, r5, r6, pc}
 8017dfc:	24025e64 	.word	0x24025e64

08017e00 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8017e00:	b570      	push	{r4, r5, r6, lr}
 8017e02:	4604      	mov	r4, r0
 8017e04:	4616      	mov	r6, r2
 8017e06:	460d      	mov	r5, r1
 8017e08:	b901      	cbnz	r1, 8017e0c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 8017e0a:	b192      	cbz	r2, 8017e32 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8017e0c:	6823      	ldr	r3, [r4, #0]
 8017e0e:	4620      	mov	r0, r4
 8017e10:	699b      	ldr	r3, [r3, #24]
 8017e12:	4798      	blx	r3
 8017e14:	88e2      	ldrh	r2, [r4, #6]
 8017e16:	88a1      	ldrh	r1, [r4, #4]
 8017e18:	4620      	mov	r0, r4
 8017e1a:	4432      	add	r2, r6
 8017e1c:	4429      	add	r1, r5
 8017e1e:	b212      	sxth	r2, r2
 8017e20:	b209      	sxth	r1, r1
 8017e22:	f7ec fccf 	bl	80047c4 <_ZN8touchgfx8Drawable5setXYEss>
 8017e26:	6823      	ldr	r3, [r4, #0]
 8017e28:	4620      	mov	r0, r4
 8017e2a:	699b      	ldr	r3, [r3, #24]
 8017e2c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017e30:	4718      	bx	r3
 8017e32:	bd70      	pop	{r4, r5, r6, pc}

08017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8017e34:	b510      	push	{r4, lr}
 8017e36:	2300      	movs	r3, #0
 8017e38:	4604      	mov	r4, r0
 8017e3a:	4608      	mov	r0, r1
 8017e3c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8017e40:	8023      	strh	r3, [r4, #0]
 8017e42:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8017e46:	8063      	strh	r3, [r4, #2]
 8017e48:	6803      	ldr	r3, [r0, #0]
 8017e4a:	80a1      	strh	r1, [r4, #4]
 8017e4c:	4621      	mov	r1, r4
 8017e4e:	80e2      	strh	r2, [r4, #6]
 8017e50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e52:	4798      	blx	r3
 8017e54:	4620      	mov	r0, r4
 8017e56:	bd10      	pop	{r4, pc}

08017e58 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8017e58:	4770      	bx	lr

08017e5a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 8017e5a:	b510      	push	{r4, lr}
 8017e5c:	4604      	mov	r4, r0
 8017e5e:	211c      	movs	r1, #28
 8017e60:	f00e f8d8 	bl	8026014 <_ZdlPvj>
 8017e64:	4620      	mov	r0, r4
 8017e66:	bd10      	pop	{r4, pc}

08017e68 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8017e68:	4a04      	ldr	r2, [pc, #16]	@ (8017e7c <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 8017e6a:	6002      	str	r2, [r0, #0]
 8017e6c:	2200      	movs	r2, #0
 8017e6e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8017e72:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8017e76:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8017e7a:	4770      	bx	lr
 8017e7c:	0802b228 	.word	0x0802b228

08017e80 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8017e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e84:	4604      	mov	r4, r0
 8017e86:	b087      	sub	sp, #28
 8017e88:	4696      	mov	lr, r2
 8017e8a:	6880      	ldr	r0, [r0, #8]
 8017e8c:	8b22      	ldrh	r2, [r4, #24]
 8017e8e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8017e92:	9105      	str	r1, [sp, #20]
 8017e94:	1c51      	adds	r1, r2, #1
 8017e96:	8321      	strh	r1, [r4, #24]
 8017e98:	2101      	movs	r1, #1
 8017e9a:	5481      	strb	r1, [r0, r2]
 8017e9c:	4689      	mov	r9, r1
 8017e9e:	f9b3 2000 	ldrsh.w	r2, [r3]
 8017ea2:	8b60      	ldrh	r0, [r4, #26]
 8017ea4:	ee06 2a90 	vmov	s13, r2
 8017ea8:	68e2      	ldr	r2, [r4, #12]
 8017eaa:	1845      	adds	r5, r0, r1
 8017eac:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8017eb0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017eb4:	8365      	strh	r5, [r4, #26]
 8017eb6:	edc2 6a00 	vstr	s13, [r2]
 8017eba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8017ebe:	8b60      	ldrh	r0, [r4, #26]
 8017ec0:	ee07 2a10 	vmov	s14, r2
 8017ec4:	68e2      	ldr	r2, [r4, #12]
 8017ec6:	1845      	adds	r5, r0, r1
 8017ec8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8017ecc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8017ed0:	8365      	strh	r5, [r4, #26]
 8017ed2:	1d18      	adds	r0, r3, #4
 8017ed4:	460d      	mov	r5, r1
 8017ed6:	ed82 7a00 	vstr	s14, [r2]
 8017eda:	f8be 2000 	ldrh.w	r2, [lr]
 8017ede:	9203      	str	r2, [sp, #12]
 8017ee0:	2200      	movs	r2, #0
 8017ee2:	4613      	mov	r3, r2
 8017ee4:	4694      	mov	ip, r2
 8017ee6:	9201      	str	r2, [sp, #4]
 8017ee8:	9202      	str	r2, [sp, #8]
 8017eea:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 8017eee:	9e05      	ldr	r6, [sp, #20]
 8017ef0:	f108 0701 	add.w	r7, r8, #1
 8017ef4:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8017ef8:	428e      	cmp	r6, r1
 8017efa:	b2bf      	uxth	r7, r7
 8017efc:	eb0a 0b08 	add.w	fp, sl, r8
 8017f00:	f340 80b6 	ble.w	8018070 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8017f04:	9b03      	ldr	r3, [sp, #12]
 8017f06:	f9b0 c000 	ldrsh.w	ip, [r0]
 8017f0a:	fa43 fb05 	asr.w	fp, r3, r5
 8017f0e:	f00b 0b01 	and.w	fp, fp, #1
 8017f12:	fa5f f38b 	uxtb.w	r3, fp
 8017f16:	9304      	str	r3, [sp, #16]
 8017f18:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8017f1c:	f1bb 0f00 	cmp.w	fp, #0
 8017f20:	d057      	beq.n	8017fd2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8017f22:	ee07 ca90 	vmov	s15, ip
 8017f26:	8327      	strh	r7, [r4, #24]
 8017f28:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8017f2c:	ee07 3a90 	vmov	s15, r3
 8017f30:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017f34:	f1b9 0f00 	cmp.w	r9, #0
 8017f38:	d028      	beq.n	8017f8c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 8017f3a:	f04f 0602 	mov.w	r6, #2
 8017f3e:	f80a 6008 	strb.w	r6, [sl, r8]
 8017f42:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017f46:	68e7      	ldr	r7, [r4, #12]
 8017f48:	f108 0901 	add.w	r9, r8, #1
 8017f4c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f50:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f54:	edc7 5a00 	vstr	s11, [r7]
 8017f58:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017f5c:	68e7      	ldr	r7, [r4, #12]
 8017f5e:	f108 0901 	add.w	r9, r8, #1
 8017f62:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017f66:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017f6a:	edc7 7a00 	vstr	s15, [r7]
 8017f6e:	3501      	adds	r5, #1
 8017f70:	2d10      	cmp	r5, #16
 8017f72:	d106      	bne.n	8017f82 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8017f74:	9d02      	ldr	r5, [sp, #8]
 8017f76:	3501      	adds	r5, #1
 8017f78:	9502      	str	r5, [sp, #8]
 8017f7a:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8017f7e:	9503      	str	r5, [sp, #12]
 8017f80:	2500      	movs	r5, #0
 8017f82:	3101      	adds	r1, #1
 8017f84:	3004      	adds	r0, #4
 8017f86:	f8dd 9010 	ldr.w	r9, [sp, #16]
 8017f8a:	e7ae      	b.n	8017eea <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8017f8c:	f04f 0605 	mov.w	r6, #5
 8017f90:	ed9d 5a01 	vldr	s10, [sp, #4]
 8017f94:	f80a 6008 	strb.w	r6, [sl, r8]
 8017f98:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017f9c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fa0:	68e7      	ldr	r7, [r4, #12]
 8017fa2:	f108 0901 	add.w	r9, r8, #1
 8017fa6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017faa:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017fae:	ed87 5a00 	vstr	s10, [r7]
 8017fb2:	ee05 2a10 	vmov	s10, r2
 8017fb6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fba:	68e7      	ldr	r7, [r4, #12]
 8017fbc:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8017fc0:	f108 0901 	add.w	r9, r8, #1
 8017fc4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017fc8:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017fcc:	ed87 5a00 	vstr	s10, [r7]
 8017fd0:	e7b7      	b.n	8017f42 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8017fd2:	f1b9 0f00 	cmp.w	r9, #0
 8017fd6:	d147      	bne.n	8018068 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8017fd8:	f04f 0605 	mov.w	r6, #5
 8017fdc:	eddd 7a01 	vldr	s15, [sp, #4]
 8017fe0:	8327      	strh	r7, [r4, #24]
 8017fe2:	f80a 6008 	strb.w	r6, [sl, r8]
 8017fe6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8017fea:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8017fee:	68e7      	ldr	r7, [r4, #12]
 8017ff0:	f108 0901 	add.w	r9, r8, #1
 8017ff4:	9e01      	ldr	r6, [sp, #4]
 8017ff6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8017ffa:	f8a4 901a 	strh.w	r9, [r4, #26]
 8017ffe:	4466      	add	r6, ip
 8018000:	edc7 7a00 	vstr	s15, [r7]
 8018004:	ee07 2a90 	vmov	s15, r2
 8018008:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801800c:	441a      	add	r2, r3
 801800e:	68e7      	ldr	r7, [r4, #12]
 8018010:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018014:	f108 0901 	add.w	r9, r8, #1
 8018018:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801801c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018020:	edc7 7a00 	vstr	s15, [r7]
 8018024:	ee07 6a90 	vmov	s15, r6
 8018028:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801802c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018030:	68e7      	ldr	r7, [r4, #12]
 8018032:	f108 0901 	add.w	r9, r8, #1
 8018036:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801803a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801803e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018042:	edc7 7a00 	vstr	s15, [r7]
 8018046:	ee07 2a90 	vmov	s15, r2
 801804a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801804e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018052:	68e7      	ldr	r7, [r4, #12]
 8018054:	f108 0901 	add.w	r9, r8, #1
 8018058:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801805c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018060:	f8a4 901a 	strh.w	r9, [r4, #26]
 8018064:	edc7 7a00 	vstr	s15, [r7]
 8018068:	461a      	mov	r2, r3
 801806a:	f8cd c004 	str.w	ip, [sp, #4]
 801806e:	e77e      	b.n	8017f6e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8018070:	f1b9 0f00 	cmp.w	r9, #0
 8018074:	d028      	beq.n	80180c8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 8018076:	ee07 ca90 	vmov	s15, ip
 801807a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801807e:	eef4 6a67 	vcmp.f32	s13, s15
 8018082:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018086:	d108      	bne.n	801809a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 8018088:	ee07 3a90 	vmov	s15, r3
 801808c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8018090:	eeb4 7a67 	vcmp.f32	s14, s15
 8018094:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018098:	d016      	beq.n	80180c8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801809a:	2302      	movs	r3, #2
 801809c:	8327      	strh	r7, [r4, #24]
 801809e:	f88b 3000 	strb.w	r3, [fp]
 80180a2:	8b62      	ldrh	r2, [r4, #26]
 80180a4:	68e3      	ldr	r3, [r4, #12]
 80180a6:	1c51      	adds	r1, r2, #1
 80180a8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80180ac:	8361      	strh	r1, [r4, #26]
 80180ae:	edc3 6a00 	vstr	s13, [r3]
 80180b2:	8b62      	ldrh	r2, [r4, #26]
 80180b4:	68e3      	ldr	r3, [r4, #12]
 80180b6:	1c51      	adds	r1, r2, #1
 80180b8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80180bc:	8361      	strh	r1, [r4, #26]
 80180be:	ed83 7a00 	vstr	s14, [r3]
 80180c2:	b007      	add	sp, #28
 80180c4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80180c8:	2305      	movs	r3, #5
 80180ca:	eddd 7a01 	vldr	s15, [sp, #4]
 80180ce:	8327      	strh	r7, [r4, #24]
 80180d0:	f88b 3000 	strb.w	r3, [fp]
 80180d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180d8:	8b61      	ldrh	r1, [r4, #26]
 80180da:	68e3      	ldr	r3, [r4, #12]
 80180dc:	1c4d      	adds	r5, r1, #1
 80180de:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80180e2:	8365      	strh	r5, [r4, #26]
 80180e4:	edc3 7a00 	vstr	s15, [r3]
 80180e8:	ee07 2a90 	vmov	s15, r2
 80180ec:	8b61      	ldrh	r1, [r4, #26]
 80180ee:	68e3      	ldr	r3, [r4, #12]
 80180f0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80180f4:	1c4d      	adds	r5, r1, #1
 80180f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80180fa:	8365      	strh	r5, [r4, #26]
 80180fc:	edc3 7a00 	vstr	s15, [r3]
 8018100:	e7cf      	b.n	80180a2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08018104 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8018104:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018108:	4604      	mov	r4, r0
 801810a:	b08e      	sub	sp, #56	@ 0x38
 801810c:	4699      	mov	r9, r3
 801810e:	4688      	mov	r8, r1
 8018110:	4615      	mov	r5, r2
 8018112:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8018114:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8018118:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801811a:	f7eb fd51 	bl	8003bc0 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801811e:	6060      	str	r0, [r4, #4]
 8018120:	f1b9 0f00 	cmp.w	r9, #0
 8018124:	f000 80e8 	beq.w	80182f8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8018128:	2800      	cmp	r0, #0
 801812a:	f000 80e5 	beq.w	80182f8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801812e:	a805      	add	r0, sp, #20
 8018130:	f000 f8f9 	bl	8018326 <_ZN8touchgfx9Matrix3x3C1Ev>
 8018134:	6833      	ldr	r3, [r6, #0]
 8018136:	4630      	mov	r0, r6
 8018138:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801813a:	4798      	blx	r3
 801813c:	a805      	add	r0, sp, #20
 801813e:	eef0 0a40 	vmov.f32	s1, s0
 8018142:	f000 f8f4 	bl	801832e <_ZN8touchgfx9Matrix3x35scaleEff>
 8018146:	6860      	ldr	r0, [r4, #4]
 8018148:	f1ba 0f03 	cmp.w	sl, #3
 801814c:	d83b      	bhi.n	80181c6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801814e:	e8df f00a 	tbb	[pc, sl]
 8018152:	1002      	.short	0x1002
 8018154:	9f71      	.short	0x9f71
 8018156:	6803      	ldr	r3, [r0, #0]
 8018158:	462a      	mov	r2, r5
 801815a:	4641      	mov	r1, r8
 801815c:	689b      	ldr	r3, [r3, #8]
 801815e:	4798      	blx	r3
 8018160:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8018164:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8018168:	ee07 7a90 	vmov	s15, r7
 801816c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8018170:	e026      	b.n	80181c0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8018172:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8018176:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801817a:	8869      	ldrh	r1, [r5, #2]
 801817c:	1a9b      	subs	r3, r3, r2
 801817e:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018182:	aa03      	add	r2, sp, #12
 8018184:	1a5b      	subs	r3, r3, r1
 8018186:	4641      	mov	r1, r8
 8018188:	f8ad 300c 	strh.w	r3, [sp, #12]
 801818c:	882b      	ldrh	r3, [r5, #0]
 801818e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018192:	88ab      	ldrh	r3, [r5, #4]
 8018194:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018198:	6803      	ldr	r3, [r0, #0]
 801819a:	689b      	ldr	r3, [r3, #8]
 801819c:	4798      	blx	r3
 801819e:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8018300 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 80181a2:	a805      	add	r0, sp, #20
 80181a4:	f000 f8e8 	bl	8018378 <_ZN8touchgfx9Matrix3x36rotateEf>
 80181a8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80181ac:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80181ae:	ee07 7a90 	vmov	s15, r7
 80181b2:	1a9b      	subs	r3, r3, r2
 80181b4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80181b8:	ee00 3a10 	vmov	s0, r3
 80181bc:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80181c0:	a805      	add	r0, sp, #20
 80181c2:	f000 f927 	bl	8018414 <_ZN8touchgfx9Matrix3x39translateEff>
 80181c6:	6860      	ldr	r0, [r4, #4]
 80181c8:	a905      	add	r1, sp, #20
 80181ca:	2500      	movs	r5, #0
 80181cc:	f109 0602 	add.w	r6, r9, #2
 80181d0:	6803      	ldr	r3, [r0, #0]
 80181d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80181d4:	4798      	blx	r3
 80181d6:	6860      	ldr	r0, [r4, #4]
 80181d8:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 80181da:	6803      	ldr	r3, [r0, #0]
 80181dc:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 80181e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181e2:	4798      	blx	r3
 80181e4:	6860      	ldr	r0, [r4, #4]
 80181e6:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 80181ea:	6803      	ldr	r3, [r0, #0]
 80181ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181ee:	4798      	blx	r3
 80181f0:	6860      	ldr	r0, [r4, #4]
 80181f2:	2101      	movs	r1, #1
 80181f4:	6803      	ldr	r3, [r0, #0]
 80181f6:	68db      	ldr	r3, [r3, #12]
 80181f8:	4798      	blx	r3
 80181fa:	f8b9 7000 	ldrh.w	r7, [r9]
 80181fe:	f104 0310 	add.w	r3, r4, #16
 8018202:	61a5      	str	r5, [r4, #24]
 8018204:	f104 0208 	add.w	r2, r4, #8
 8018208:	f104 0114 	add.w	r1, r4, #20
 801820c:	f104 000c 	add.w	r0, r4, #12
 8018210:	f7ec ff38 	bl	8005084 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8018214:	42af      	cmp	r7, r5
 8018216:	dd60      	ble.n	80182da <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8018218:	8831      	ldrh	r1, [r6, #0]
 801821a:	1cb2      	adds	r2, r6, #2
 801821c:	4620      	mov	r0, r4
 801821e:	3501      	adds	r5, #1
 8018220:	f101 030f 	add.w	r3, r1, #15
 8018224:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8018228:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 801822c:	f7ff fe28 	bl	8017e80 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8018230:	4606      	mov	r6, r0
 8018232:	e7ef      	b.n	8018214 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8018234:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018238:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 801823c:	8829      	ldrh	r1, [r5, #0]
 801823e:	1a9b      	subs	r3, r3, r2
 8018240:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018244:	aa03      	add	r2, sp, #12
 8018246:	1a5b      	subs	r3, r3, r1
 8018248:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 801824c:	886d      	ldrh	r5, [r5, #2]
 801824e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8018252:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8018256:	f8ad 1012 	strh.w	r1, [sp, #18]
 801825a:	1a5b      	subs	r3, r3, r1
 801825c:	4641      	mov	r1, r8
 801825e:	1b5b      	subs	r3, r3, r5
 8018260:	f8ad 300e 	strh.w	r3, [sp, #14]
 8018264:	6803      	ldr	r3, [r0, #0]
 8018266:	689b      	ldr	r3, [r3, #8]
 8018268:	4798      	blx	r3
 801826a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8018304 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 801826e:	a805      	add	r0, sp, #20
 8018270:	f000 f882 	bl	8018378 <_ZN8touchgfx9Matrix3x36rotateEf>
 8018274:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8018278:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801827a:	1a9b      	subs	r3, r3, r2
 801827c:	ee00 3a90 	vmov	s1, r3
 8018280:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8018284:	1bdb      	subs	r3, r3, r7
 8018286:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 801828a:	ee00 3a10 	vmov	s0, r3
 801828e:	e795      	b.n	80181bc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8018290:	886b      	ldrh	r3, [r5, #2]
 8018292:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8018296:	f8ad 300c 	strh.w	r3, [sp, #12]
 801829a:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 801829e:	8829      	ldrh	r1, [r5, #0]
 80182a0:	1a9b      	subs	r3, r3, r2
 80182a2:	f8ad 2012 	strh.w	r2, [sp, #18]
 80182a6:	aa03      	add	r2, sp, #12
 80182a8:	1a5b      	subs	r3, r3, r1
 80182aa:	4641      	mov	r1, r8
 80182ac:	f8ad 300e 	strh.w	r3, [sp, #14]
 80182b0:	88eb      	ldrh	r3, [r5, #6]
 80182b2:	f8ad 3010 	strh.w	r3, [sp, #16]
 80182b6:	6803      	ldr	r3, [r0, #0]
 80182b8:	689b      	ldr	r3, [r3, #8]
 80182ba:	4798      	blx	r3
 80182bc:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8018308 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 80182c0:	a805      	add	r0, sp, #20
 80182c2:	f000 f859 	bl	8018378 <_ZN8touchgfx9Matrix3x36rotateEf>
 80182c6:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 80182ca:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 80182ce:	1bdb      	subs	r3, r3, r7
 80182d0:	ee00 3a90 	vmov	s1, r3
 80182d4:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 80182d8:	e748      	b.n	801816c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 80182da:	6860      	ldr	r0, [r4, #4]
 80182dc:	2100      	movs	r1, #0
 80182de:	8b22      	ldrh	r2, [r4, #24]
 80182e0:	6803      	ldr	r3, [r0, #0]
 80182e2:	9101      	str	r1, [sp, #4]
 80182e4:	8b61      	ldrh	r1, [r4, #26]
 80182e6:	9100      	str	r1, [sp, #0]
 80182e8:	6a1d      	ldr	r5, [r3, #32]
 80182ea:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 80182ee:	47a8      	blx	r5
 80182f0:	6860      	ldr	r0, [r4, #4]
 80182f2:	6803      	ldr	r3, [r0, #0]
 80182f4:	69db      	ldr	r3, [r3, #28]
 80182f6:	4798      	blx	r3
 80182f8:	b00e      	add	sp, #56	@ 0x38
 80182fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80182fe:	bf00      	nop
 8018300:	42b40000 	.word	0x42b40000
 8018304:	43340000 	.word	0x43340000
 8018308:	43870000 	.word	0x43870000

0801830c <_ZN8touchgfx9Matrix3x35resetEv>:
 801830c:	2300      	movs	r3, #0
 801830e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8018312:	6043      	str	r3, [r0, #4]
 8018314:	6002      	str	r2, [r0, #0]
 8018316:	6083      	str	r3, [r0, #8]
 8018318:	60c3      	str	r3, [r0, #12]
 801831a:	6102      	str	r2, [r0, #16]
 801831c:	6143      	str	r3, [r0, #20]
 801831e:	6183      	str	r3, [r0, #24]
 8018320:	61c3      	str	r3, [r0, #28]
 8018322:	6202      	str	r2, [r0, #32]
 8018324:	4770      	bx	lr

08018326 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8018326:	b508      	push	{r3, lr}
 8018328:	f7ff fff0 	bl	801830c <_ZN8touchgfx9Matrix3x35resetEv>
 801832c:	bd08      	pop	{r3, pc}

0801832e <_ZN8touchgfx9Matrix3x35scaleEff>:
 801832e:	edd0 7a00 	vldr	s15, [r0]
 8018332:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018336:	edc0 7a00 	vstr	s15, [r0]
 801833a:	edd0 7a01 	vldr	s15, [r0, #4]
 801833e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8018342:	edc0 7a01 	vstr	s15, [r0, #4]
 8018346:	edd0 7a02 	vldr	s15, [r0, #8]
 801834a:	ee27 0a80 	vmul.f32	s0, s15, s0
 801834e:	edd0 7a03 	vldr	s15, [r0, #12]
 8018352:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018356:	ed80 0a02 	vstr	s0, [r0, #8]
 801835a:	edc0 7a03 	vstr	s15, [r0, #12]
 801835e:	edd0 7a04 	vldr	s15, [r0, #16]
 8018362:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8018366:	edc0 7a04 	vstr	s15, [r0, #16]
 801836a:	edd0 7a05 	vldr	s15, [r0, #20]
 801836e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8018372:	edc0 0a05 	vstr	s1, [r0, #20]
 8018376:	4770      	bx	lr

08018378 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8018378:	eddf 7a24 	vldr	s15, [pc, #144]	@ 801840c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 801837c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8018380:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8018410 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8018384:	b510      	push	{r4, lr}
 8018386:	ed2d 8b02 	vpush	{d8}
 801838a:	eec0 8a27 	vdiv.f32	s17, s0, s15
 801838e:	4604      	mov	r4, r0
 8018390:	eeb0 0a68 	vmov.f32	s0, s17
 8018394:	f00d ff74 	bl	8026280 <cosf>
 8018398:	eeb0 8a40 	vmov.f32	s16, s0
 801839c:	eeb0 0a68 	vmov.f32	s0, s17
 80183a0:	f00d feaa 	bl	80260f8 <sinf>
 80183a4:	edd4 6a03 	vldr	s13, [r4, #12]
 80183a8:	edd4 4a00 	vldr	s9, [r4]
 80183ac:	ee60 7a66 	vnmul.f32	s15, s0, s13
 80183b0:	ed94 7a04 	vldr	s14, [r4, #16]
 80183b4:	ed94 5a01 	vldr	s10, [r4, #4]
 80183b8:	ee66 6a88 	vmul.f32	s13, s13, s16
 80183bc:	edd4 5a02 	vldr	s11, [r4, #8]
 80183c0:	eee8 7a24 	vfma.f32	s15, s16, s9
 80183c4:	eee0 6a24 	vfma.f32	s13, s0, s9
 80183c8:	edc4 7a00 	vstr	s15, [r4]
 80183cc:	ee60 7a47 	vnmul.f32	s15, s0, s14
 80183d0:	ee27 7a08 	vmul.f32	s14, s14, s16
 80183d4:	edc4 6a03 	vstr	s13, [r4, #12]
 80183d8:	eee8 7a05 	vfma.f32	s15, s16, s10
 80183dc:	eea0 7a05 	vfma.f32	s14, s0, s10
 80183e0:	edc4 7a01 	vstr	s15, [r4, #4]
 80183e4:	edd4 7a05 	vldr	s15, [r4, #20]
 80183e8:	ed84 7a04 	vstr	s14, [r4, #16]
 80183ec:	ee20 6a67 	vnmul.f32	s12, s0, s15
 80183f0:	ee67 7a88 	vmul.f32	s15, s15, s16
 80183f4:	eea8 6a25 	vfma.f32	s12, s16, s11
 80183f8:	eee0 7a25 	vfma.f32	s15, s0, s11
 80183fc:	ecbd 8b02 	vpop	{d8}
 8018400:	ed84 6a02 	vstr	s12, [r4, #8]
 8018404:	edc4 7a05 	vstr	s15, [r4, #20]
 8018408:	bd10      	pop	{r4, pc}
 801840a:	bf00      	nop
 801840c:	40490fdb 	.word	0x40490fdb
 8018410:	43340000 	.word	0x43340000

08018414 <_ZN8touchgfx9Matrix3x39translateEff>:
 8018414:	ed90 6a06 	vldr	s12, [r0, #24]
 8018418:	edd0 7a00 	vldr	s15, [r0]
 801841c:	edd0 6a07 	vldr	s13, [r0, #28]
 8018420:	eee6 7a00 	vfma.f32	s15, s12, s0
 8018424:	ed90 7a08 	vldr	s14, [r0, #32]
 8018428:	edc0 7a00 	vstr	s15, [r0]
 801842c:	edd0 7a01 	vldr	s15, [r0, #4]
 8018430:	eee6 7a80 	vfma.f32	s15, s13, s0
 8018434:	edc0 7a01 	vstr	s15, [r0, #4]
 8018438:	edd0 7a02 	vldr	s15, [r0, #8]
 801843c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018440:	edc0 7a02 	vstr	s15, [r0, #8]
 8018444:	edd0 7a03 	vldr	s15, [r0, #12]
 8018448:	eee6 7a20 	vfma.f32	s15, s12, s1
 801844c:	edc0 7a03 	vstr	s15, [r0, #12]
 8018450:	edd0 7a04 	vldr	s15, [r0, #16]
 8018454:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8018458:	edc0 7a04 	vstr	s15, [r0, #16]
 801845c:	edd0 7a05 	vldr	s15, [r0, #20]
 8018460:	eee7 7a20 	vfma.f32	s15, s14, s1
 8018464:	edc0 7a05 	vstr	s15, [r0, #20]
 8018468:	4770      	bx	lr

0801846a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 801846a:	edd0 6a01 	vldr	s13, [r0, #4]
 801846e:	b084      	sub	sp, #16
 8018470:	edd0 7a04 	vldr	s15, [r0, #16]
 8018474:	ed90 7a03 	vldr	s14, [r0, #12]
 8018478:	ee60 7aa7 	vmul.f32	s15, s1, s15
 801847c:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8018480:	edd0 6a00 	vldr	s13, [r0]
 8018484:	eee7 7a00 	vfma.f32	s15, s14, s0
 8018488:	ed90 7a05 	vldr	s14, [r0, #20]
 801848c:	eee6 0a80 	vfma.f32	s1, s13, s0
 8018490:	ed90 0a02 	vldr	s0, [r0, #8]
 8018494:	ee30 0a80 	vadd.f32	s0, s1, s0
 8018498:	ee77 0a87 	vadd.f32	s1, s15, s14
 801849c:	b004      	add	sp, #16
 801849e:	4770      	bx	lr

080184a0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 80184a0:	b530      	push	{r4, r5, lr}
 80184a2:	8083      	strh	r3, [r0, #4]
 80184a4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 80184a8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 80184ac:	80c3      	strh	r3, [r0, #6]
 80184ae:	f89d 3010 	ldrb.w	r3, [sp, #16]
 80184b2:	6141      	str	r1, [r0, #20]
 80184b4:	7203      	strb	r3, [r0, #8]
 80184b6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 80184ba:	8302      	strh	r2, [r0, #24]
 80184bc:	7243      	strb	r3, [r0, #9]
 80184be:	7a83      	ldrb	r3, [r0, #10]
 80184c0:	f365 0306 	bfi	r3, r5, #0, #7
 80184c4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 80184c8:	f365 13c7 	bfi	r3, r5, #7, #1
 80184cc:	7283      	strb	r3, [r0, #10]
 80184ce:	f89d 3020 	ldrb.w	r3, [sp, #32]
 80184d2:	72c3      	strb	r3, [r0, #11]
 80184d4:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 80184d8:	7303      	strb	r3, [r0, #12]
 80184da:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80184de:	81c3      	strh	r3, [r0, #14]
 80184e0:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80184e4:	8203      	strh	r3, [r0, #16]
 80184e6:	4b01      	ldr	r3, [pc, #4]	@ (80184ec <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 80184e8:	6003      	str	r3, [r0, #0]
 80184ea:	bd30      	pop	{r4, r5, pc}
 80184ec:	0802b23c 	.word	0x0802b23c

080184f0 <_ZNK8touchgfx9ConstFont4findEt>:
 80184f0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80184f2:	6944      	ldr	r4, [r0, #20]
 80184f4:	b3bc      	cbz	r4, 8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 80184f6:	88a3      	ldrh	r3, [r4, #4]
 80184f8:	8b02      	ldrh	r2, [r0, #24]
 80184fa:	1acb      	subs	r3, r1, r3
 80184fc:	f102 32ff 	add.w	r2, r2, #4294967295
 8018500:	d431      	bmi.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018502:	4293      	cmp	r3, r2
 8018504:	dd0c      	ble.n	8018520 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8018506:	230e      	movs	r3, #14
 8018508:	fb03 4302 	mla	r3, r3, r2, r4
 801850c:	889b      	ldrh	r3, [r3, #4]
 801850e:	1a5b      	subs	r3, r3, r1
 8018510:	1ad3      	subs	r3, r2, r3
 8018512:	429a      	cmp	r2, r3
 8018514:	db27      	blt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018516:	2b00      	cmp	r3, #0
 8018518:	bfbc      	itt	lt
 801851a:	2302      	movlt	r3, #2
 801851c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8018520:	2500      	movs	r5, #0
 8018522:	260e      	movs	r6, #14
 8018524:	4295      	cmp	r5, r2
 8018526:	dc1e      	bgt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018528:	fb06 4003 	mla	r0, r6, r3, r4
 801852c:	8887      	ldrh	r7, [r0, #4]
 801852e:	42b9      	cmp	r1, r7
 8018530:	d01a      	beq.n	8018568 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8018532:	d20d      	bcs.n	8018550 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8018534:	1e5a      	subs	r2, r3, #1
 8018536:	4295      	cmp	r5, r2
 8018538:	dc15      	bgt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 801853a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 801853e:	1a5b      	subs	r3, r3, r1
 8018540:	1ad3      	subs	r3, r2, r3
 8018542:	429a      	cmp	r2, r3
 8018544:	db0f      	blt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018546:	429d      	cmp	r5, r3
 8018548:	ddec      	ble.n	8018524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 801854a:	1953      	adds	r3, r2, r5
 801854c:	105b      	asrs	r3, r3, #1
 801854e:	e7e9      	b.n	8018524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018550:	1c5d      	adds	r5, r3, #1
 8018552:	42aa      	cmp	r2, r5
 8018554:	db07      	blt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018556:	8a43      	ldrh	r3, [r0, #18]
 8018558:	1acb      	subs	r3, r1, r3
 801855a:	442b      	add	r3, r5
 801855c:	429d      	cmp	r5, r3
 801855e:	dc02      	bgt.n	8018566 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8018560:	429a      	cmp	r2, r3
 8018562:	dadf      	bge.n	8018524 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8018564:	e7f1      	b.n	801854a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8018566:	2000      	movs	r0, #0
 8018568:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801856a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 801856a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801856c:	4604      	mov	r4, r0
 801856e:	4617      	mov	r7, r2
 8018570:	461e      	mov	r6, r3
 8018572:	b911      	cbnz	r1, 801857a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8018574:	2500      	movs	r5, #0
 8018576:	4628      	mov	r0, r5
 8018578:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801857a:	290a      	cmp	r1, #10
 801857c:	d0fa      	beq.n	8018574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801857e:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8018582:	4291      	cmp	r1, r2
 8018584:	d0f6      	beq.n	8018574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8018586:	f242 020b 	movw	r2, #8203	@ 0x200b
 801858a:	4291      	cmp	r1, r2
 801858c:	d0f2      	beq.n	8018574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 801858e:	f7ff ffaf 	bl	80184f0 <_ZNK8touchgfx9ConstFont4findEt>
 8018592:	4605      	mov	r5, r0
 8018594:	b950      	cbnz	r0, 80185ac <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8018596:	6823      	ldr	r3, [r4, #0]
 8018598:	4620      	mov	r0, r4
 801859a:	691b      	ldr	r3, [r3, #16]
 801859c:	4798      	blx	r3
 801859e:	4601      	mov	r1, r0
 80185a0:	4620      	mov	r0, r4
 80185a2:	f7ff ffa5 	bl	80184f0 <_ZNK8touchgfx9ConstFont4findEt>
 80185a6:	4605      	mov	r5, r0
 80185a8:	2800      	cmp	r0, #0
 80185aa:	d0e3      	beq.n	8018574 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 80185ac:	6823      	ldr	r3, [r4, #0]
 80185ae:	4629      	mov	r1, r5
 80185b0:	4620      	mov	r0, r4
 80185b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80185b4:	4798      	blx	r3
 80185b6:	6038      	str	r0, [r7, #0]
 80185b8:	6823      	ldr	r3, [r4, #0]
 80185ba:	4620      	mov	r0, r4
 80185bc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80185be:	4798      	blx	r3
 80185c0:	7030      	strb	r0, [r6, #0]
 80185c2:	e7d8      	b.n	8018576 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

080185c4 <_ZN8touchgfx34lookupNearestNeighborRenderVariantERKNS_6BitmapE>:
 80185c4:	b538      	push	{r3, r4, r5, lr}
 80185c6:	4605      	mov	r5, r0
 80185c8:	f002 f936 	bl	801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80185cc:	4604      	mov	r4, r0
 80185ce:	4628      	mov	r0, r5
 80185d0:	f002 f876 	bl	801a6c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80185d4:	2800      	cmp	r0, #0
 80185d6:	bf14      	ite	ne
 80185d8:	2002      	movne	r0, #2
 80185da:	2000      	moveq	r0, #0
 80185dc:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 80185e0:	b280      	uxth	r0, r0
 80185e2:	bd38      	pop	{r3, r4, r5, pc}

080185e4 <_ZN8touchgfx27lookupBilinearRenderVariantERKNS_6BitmapE>:
 80185e4:	b538      	push	{r3, r4, r5, lr}
 80185e6:	4605      	mov	r5, r0
 80185e8:	f002 f926 	bl	801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>
 80185ec:	4604      	mov	r4, r0
 80185ee:	4628      	mov	r0, r5
 80185f0:	f002 f866 	bl	801a6c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>
 80185f4:	2800      	cmp	r0, #0
 80185f6:	bf14      	ite	ne
 80185f8:	2002      	movne	r0, #2
 80185fa:	2000      	moveq	r0, #0
 80185fc:	ea40 0084 	orr.w	r0, r0, r4, lsl #2
 8018600:	f040 0001 	orr.w	r0, r0, #1
 8018604:	b280      	uxth	r0, r0
 8018606:	bd38      	pop	{r3, r4, r5, pc}

08018608 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8018608:	2001      	movs	r0, #1
 801860a:	4770      	bx	lr

0801860c <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 801860c:	2002      	movs	r0, #2
 801860e:	4770      	bx	lr

08018610 <_ZN8touchgfx6ScreenD1Ev>:
 8018610:	4770      	bx	lr

08018612 <_ZN8touchgfx12GestureEventD1Ev>:
 8018612:	4770      	bx	lr

08018614 <_ZN8touchgfx9DragEventD1Ev>:
 8018614:	4770      	bx	lr

08018616 <_ZN8touchgfx9DragEventD0Ev>:
 8018616:	b510      	push	{r4, lr}
 8018618:	4604      	mov	r4, r0
 801861a:	2110      	movs	r1, #16
 801861c:	f00d fcfa 	bl	8026014 <_ZdlPvj>
 8018620:	4620      	mov	r0, r4
 8018622:	bd10      	pop	{r4, pc}

08018624 <_ZN8touchgfx12GestureEventD0Ev>:
 8018624:	b510      	push	{r4, lr}
 8018626:	4604      	mov	r4, r0
 8018628:	210c      	movs	r1, #12
 801862a:	f00d fcf3 	bl	8026014 <_ZdlPvj>
 801862e:	4620      	mov	r0, r4
 8018630:	bd10      	pop	{r4, pc}

08018632 <_ZN8touchgfx6ScreenD0Ev>:
 8018632:	b510      	push	{r4, lr}
 8018634:	4604      	mov	r4, r0
 8018636:	213c      	movs	r1, #60	@ 0x3c
 8018638:	f00d fcec 	bl	8026014 <_ZdlPvj>
 801863c:	4620      	mov	r0, r4
 801863e:	bd10      	pop	{r4, pc}

08018640 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8018640:	b530      	push	{r4, r5, lr}
 8018642:	460d      	mov	r5, r1
 8018644:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018646:	b087      	sub	sp, #28
 8018648:	4604      	mov	r4, r0
 801864a:	b301      	cbz	r1, 801868e <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 801864c:	a801      	add	r0, sp, #4
 801864e:	f7ff fbf1 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018652:	892a      	ldrh	r2, [r5, #8]
 8018654:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8018658:	7928      	ldrb	r0, [r5, #4]
 801865a:	1ad2      	subs	r2, r2, r3
 801865c:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 801865e:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8018662:	441a      	add	r2, r3
 8018664:	896b      	ldrh	r3, [r5, #10]
 8018666:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 801866a:	f88d 0010 	strb.w	r0, [sp, #16]
 801866e:	1b5b      	subs	r3, r3, r5
 8018670:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8018672:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8018674:	442b      	add	r3, r5
 8018676:	4d07      	ldr	r5, [pc, #28]	@ (8018694 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8018678:	f8ad 1012 	strh.w	r1, [sp, #18]
 801867c:	a903      	add	r1, sp, #12
 801867e:	9503      	str	r5, [sp, #12]
 8018680:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018684:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018688:	6803      	ldr	r3, [r0, #0]
 801868a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801868c:	4798      	blx	r3
 801868e:	b007      	add	sp, #28
 8018690:	bd30      	pop	{r4, r5, pc}
 8018692:	bf00      	nop
 8018694:	0802b2b8 	.word	0x0802b2b8

08018698 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8018698:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801869c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801869e:	b08a      	sub	sp, #40	@ 0x28
 80186a0:	4604      	mov	r4, r0
 80186a2:	460d      	mov	r5, r1
 80186a4:	b113      	cbz	r3, 80186ac <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 80186a6:	790b      	ldrb	r3, [r1, #4]
 80186a8:	2b00      	cmp	r3, #0
 80186aa:	d044      	beq.n	8018736 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80186ac:	f104 0804 	add.w	r8, r4, #4
 80186b0:	a803      	add	r0, sp, #12
 80186b2:	4641      	mov	r1, r8
 80186b4:	f7ff fbbe 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186b8:	792b      	ldrb	r3, [r5, #4]
 80186ba:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80186be:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 80186c2:	b983      	cbnz	r3, 80186e6 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 80186c4:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 80186c8:	892a      	ldrh	r2, [r5, #8]
 80186ca:	88e9      	ldrh	r1, [r5, #6]
 80186cc:	4640      	mov	r0, r8
 80186ce:	1b92      	subs	r2, r2, r6
 80186d0:	9301      	str	r3, [sp, #4]
 80186d2:	1bc9      	subs	r1, r1, r7
 80186d4:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 80186d8:	b212      	sxth	r2, r2
 80186da:	9300      	str	r3, [sp, #0]
 80186dc:	b209      	sxth	r1, r1
 80186de:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 80186e2:	f7f7 fb35 	bl	800fd50 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 80186e6:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80186e8:	b329      	cbz	r1, 8018736 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 80186ea:	a805      	add	r0, sp, #20
 80186ec:	f7ff fba2 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80186f0:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 80186f4:	792b      	ldrb	r3, [r5, #4]
 80186f6:	a907      	add	r1, sp, #28
 80186f8:	1abf      	subs	r7, r7, r2
 80186fa:	88ea      	ldrh	r2, [r5, #6]
 80186fc:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80186fe:	4417      	add	r7, r2
 8018700:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8018702:	f88d 3020 	strb.w	r3, [sp, #32]
 8018706:	4417      	add	r7, r2
 8018708:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 801870c:	1ab6      	subs	r6, r6, r2
 801870e:	892a      	ldrh	r2, [r5, #8]
 8018710:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8018714:	4416      	add	r6, r2
 8018716:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8018718:	4416      	add	r6, r2
 801871a:	4a08      	ldr	r2, [pc, #32]	@ (801873c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 801871c:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8018720:	2600      	movs	r6, #0
 8018722:	9207      	str	r2, [sp, #28]
 8018724:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8018728:	6803      	ldr	r3, [r0, #0]
 801872a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801872c:	4798      	blx	r3
 801872e:	792b      	ldrb	r3, [r5, #4]
 8018730:	b10b      	cbz	r3, 8018736 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8018732:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8018736:	b00a      	add	sp, #40	@ 0x28
 8018738:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801873c:	0802b0b8 	.word	0x0802b0b8

08018740 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8018740:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018744:	460c      	mov	r4, r1
 8018746:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8018748:	b088      	sub	sp, #32
 801874a:	4605      	mov	r5, r0
 801874c:	2900      	cmp	r1, #0
 801874e:	d06d      	beq.n	801882c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8018750:	4668      	mov	r0, sp
 8018752:	f7ff fb6f 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018756:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8018758:	88e3      	ldrh	r3, [r4, #6]
 801875a:	f9bd 8000 	ldrsh.w	r8, [sp]
 801875e:	440b      	add	r3, r1
 8018760:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8018764:	b21b      	sxth	r3, r3
 8018766:	4543      	cmp	r3, r8
 8018768:	db31      	blt.n	80187ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801876a:	f8bd c004 	ldrh.w	ip, [sp, #4]
 801876e:	44c4      	add	ip, r8
 8018770:	fa0f fc8c 	sxth.w	ip, ip
 8018774:	4563      	cmp	r3, ip
 8018776:	da2a      	bge.n	80187ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018778:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801877a:	8926      	ldrh	r6, [r4, #8]
 801877c:	4416      	add	r6, r2
 801877e:	b236      	sxth	r6, r6
 8018780:	42be      	cmp	r6, r7
 8018782:	db24      	blt.n	80187ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018784:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8018788:	4438      	add	r0, r7
 801878a:	b200      	sxth	r0, r0
 801878c:	4286      	cmp	r6, r0
 801878e:	da1e      	bge.n	80187ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8018790:	8963      	ldrh	r3, [r4, #10]
 8018792:	4419      	add	r1, r3
 8018794:	b209      	sxth	r1, r1
 8018796:	4541      	cmp	r1, r8
 8018798:	db08      	blt.n	80187ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801879a:	4561      	cmp	r1, ip
 801879c:	da06      	bge.n	80187ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801879e:	89a3      	ldrh	r3, [r4, #12]
 80187a0:	441a      	add	r2, r3
 80187a2:	b212      	sxth	r2, r2
 80187a4:	42ba      	cmp	r2, r7
 80187a6:	db01      	blt.n	80187ac <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 80187a8:	4282      	cmp	r2, r0
 80187aa:	db10      	blt.n	80187ce <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 80187ac:	4b21      	ldr	r3, [pc, #132]	@ (8018834 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 80187ae:	a904      	add	r1, sp, #16
 80187b0:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80187b2:	9304      	str	r3, [sp, #16]
 80187b4:	2302      	movs	r3, #2
 80187b6:	f88d 3014 	strb.w	r3, [sp, #20]
 80187ba:	2300      	movs	r3, #0
 80187bc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80187c0:	f8ad 3018 	strh.w	r3, [sp, #24]
 80187c4:	f8ad 301a 	strh.w	r3, [sp, #26]
 80187c8:	6803      	ldr	r3, [r0, #0]
 80187ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80187cc:	4798      	blx	r3
 80187ce:	1d29      	adds	r1, r5, #4
 80187d0:	a802      	add	r0, sp, #8
 80187d2:	f7ff fb2f 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80187d6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80187da:	88e0      	ldrh	r0, [r4, #6]
 80187dc:	eba3 0808 	sub.w	r8, r3, r8
 80187e0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80187e4:	7921      	ldrb	r1, [r4, #4]
 80187e6:	fa1f f888 	uxth.w	r8, r8
 80187ea:	1bdf      	subs	r7, r3, r7
 80187ec:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80187f0:	b2bb      	uxth	r3, r7
 80187f2:	4440      	add	r0, r8
 80187f4:	8922      	ldrh	r2, [r4, #8]
 80187f6:	8967      	ldrh	r7, [r4, #10]
 80187f8:	4460      	add	r0, ip
 80187fa:	89a4      	ldrh	r4, [r4, #12]
 80187fc:	441a      	add	r2, r3
 80187fe:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8018800:	44b8      	add	r8, r7
 8018802:	4423      	add	r3, r4
 8018804:	f8ad 0016 	strh.w	r0, [sp, #22]
 8018808:	4432      	add	r2, r6
 801880a:	44e0      	add	r8, ip
 801880c:	4433      	add	r3, r6
 801880e:	4c0a      	ldr	r4, [pc, #40]	@ (8018838 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8018810:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8018812:	f88d 1014 	strb.w	r1, [sp, #20]
 8018816:	a904      	add	r1, sp, #16
 8018818:	9404      	str	r4, [sp, #16]
 801881a:	f8ad 2018 	strh.w	r2, [sp, #24]
 801881e:	f8ad 801a 	strh.w	r8, [sp, #26]
 8018822:	f8ad 301c 	strh.w	r3, [sp, #28]
 8018826:	6803      	ldr	r3, [r0, #0]
 8018828:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801882a:	4798      	blx	r3
 801882c:	b008      	add	sp, #32
 801882e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018832:	bf00      	nop
 8018834:	0802b0b8 	.word	0x0802b0b8
 8018838:	0802b2a4 	.word	0x0802b2a4

0801883c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 801883c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801883e:	4604      	mov	r4, r0
 8018840:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8018844:	3201      	adds	r2, #1
 8018846:	d112      	bne.n	801886e <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8018848:	2500      	movs	r5, #0
 801884a:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801884e:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8018852:	6803      	ldr	r3, [r0, #0]
 8018854:	9500      	str	r5, [sp, #0]
 8018856:	466d      	mov	r5, sp
 8018858:	f8ad 1004 	strh.w	r1, [sp, #4]
 801885c:	f8ad 2006 	strh.w	r2, [sp, #6]
 8018860:	4629      	mov	r1, r5
 8018862:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018864:	4798      	blx	r3
 8018866:	e895 0003 	ldmia.w	r5, {r0, r1}
 801886a:	e884 0003 	stmia.w	r4, {r0, r1}
 801886e:	4620      	mov	r0, r4
 8018870:	b003      	add	sp, #12
 8018872:	bd30      	pop	{r4, r5, pc}

08018874 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8018874:	b513      	push	{r0, r1, r4, lr}
 8018876:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801887a:	4604      	mov	r4, r0
 801887c:	3301      	adds	r3, #1
 801887e:	d109      	bne.n	8018894 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8018880:	4601      	mov	r1, r0
 8018882:	4668      	mov	r0, sp
 8018884:	f7ff fad6 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018888:	f8bd 3000 	ldrh.w	r3, [sp]
 801888c:	8423      	strh	r3, [r4, #32]
 801888e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018892:	8463      	strh	r3, [r4, #34]	@ 0x22
 8018894:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8018898:	b002      	add	sp, #8
 801889a:	bd10      	pop	{r4, pc}

0801889c <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 801889c:	b513      	push	{r0, r1, r4, lr}
 801889e:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 80188a2:	4604      	mov	r4, r0
 80188a4:	3301      	adds	r3, #1
 80188a6:	d109      	bne.n	80188bc <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 80188a8:	4601      	mov	r1, r0
 80188aa:	4668      	mov	r0, sp
 80188ac:	f7ff fac2 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80188b0:	f8bd 3000 	ldrh.w	r3, [sp]
 80188b4:	8423      	strh	r3, [r4, #32]
 80188b6:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80188ba:	8463      	strh	r3, [r4, #34]	@ 0x22
 80188bc:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80188c0:	b002      	add	sp, #8
 80188c2:	bd10      	pop	{r4, pc}

080188c4 <_ZN8touchgfx6ScreenC1Ev>:
 80188c4:	b570      	push	{r4, r5, r6, lr}
 80188c6:	4b17      	ldr	r3, [pc, #92]	@ (8018924 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80188c8:	4605      	mov	r5, r0
 80188ca:	4a17      	ldr	r2, [pc, #92]	@ (8018928 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80188cc:	2101      	movs	r1, #1
 80188ce:	f845 3b04 	str.w	r3, [r5], #4
 80188d2:	2300      	movs	r3, #0
 80188d4:	6042      	str	r2, [r0, #4]
 80188d6:	4604      	mov	r4, r0
 80188d8:	8103      	strh	r3, [r0, #8]
 80188da:	8143      	strh	r3, [r0, #10]
 80188dc:	8183      	strh	r3, [r0, #12]
 80188de:	81c3      	strh	r3, [r0, #14]
 80188e0:	8203      	strh	r3, [r0, #16]
 80188e2:	8243      	strh	r3, [r0, #18]
 80188e4:	8283      	strh	r3, [r0, #20]
 80188e6:	82c3      	strh	r3, [r0, #22]
 80188e8:	6203      	str	r3, [r0, #32]
 80188ea:	8483      	strh	r3, [r0, #36]	@ 0x24
 80188ec:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80188ee:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80188f2:	6343      	str	r3, [r0, #52]	@ 0x34
 80188f4:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80188f8:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80188fc:	e9c0 3306 	strd	r3, r3, [r0, #24]
 8018900:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 8018904:	4b09      	ldr	r3, [pc, #36]	@ (801892c <_ZN8touchgfx6ScreenC1Ev+0x68>)
 8018906:	4628      	mov	r0, r5
 8018908:	f9b3 6000 	ldrsh.w	r6, [r3]
 801890c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 801890e:	4a08      	ldr	r2, [pc, #32]	@ (8018930 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 8018910:	f9b2 1000 	ldrsh.w	r1, [r2]
 8018914:	4798      	blx	r3
 8018916:	6863      	ldr	r3, [r4, #4]
 8018918:	4628      	mov	r0, r5
 801891a:	4631      	mov	r1, r6
 801891c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801891e:	4798      	blx	r3
 8018920:	4620      	mov	r0, r4
 8018922:	bd70      	pop	{r4, r5, r6, pc}
 8018924:	0802b2cc 	.word	0x0802b2cc
 8018928:	0802abac 	.word	0x0802abac
 801892c:	24025e16 	.word	0x24025e16
 8018930:	24025e14 	.word	0x24025e14

08018934 <_ZN8touchgfx6Screen4drawEv>:
 8018934:	4b09      	ldr	r3, [pc, #36]	@ (801895c <_ZN8touchgfx6Screen4drawEv+0x28>)
 8018936:	b507      	push	{r0, r1, r2, lr}
 8018938:	f9b3 2000 	ldrsh.w	r2, [r3]
 801893c:	2100      	movs	r1, #0
 801893e:	4b08      	ldr	r3, [pc, #32]	@ (8018960 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8018940:	9100      	str	r1, [sp, #0]
 8018942:	4669      	mov	r1, sp
 8018944:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018948:	f8ad 2004 	strh.w	r2, [sp, #4]
 801894c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018950:	6803      	ldr	r3, [r0, #0]
 8018952:	689b      	ldr	r3, [r3, #8]
 8018954:	4798      	blx	r3
 8018956:	b003      	add	sp, #12
 8018958:	f85d fb04 	ldr.w	pc, [sp], #4
 801895c:	24025e14 	.word	0x24025e14
 8018960:	24025e16 	.word	0x24025e16

08018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8018964:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018968:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801896c:	b089      	sub	sp, #36	@ 0x24
 801896e:	4680      	mov	r8, r0
 8018970:	460c      	mov	r4, r1
 8018972:	2b00      	cmp	r3, #0
 8018974:	4615      	mov	r5, r2
 8018976:	dd0e      	ble.n	8018996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018978:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801897c:	2b00      	cmp	r3, #0
 801897e:	dd0a      	ble.n	8018996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018980:	4628      	mov	r0, r5
 8018982:	f7ff ff5b 	bl	801883c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018986:	4621      	mov	r1, r4
 8018988:	f7fb fab0 	bl	8013eec <_ZNK8touchgfx4Rect9intersectERKS0_>
 801898c:	69eb      	ldr	r3, [r5, #28]
 801898e:	b928      	cbnz	r0, 801899c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8018990:	461d      	mov	r5, r3
 8018992:	2b00      	cmp	r3, #0
 8018994:	d1f4      	bne.n	8018980 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8018996:	b009      	add	sp, #36	@ 0x24
 8018998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801899c:	ae04      	add	r6, sp, #16
 801899e:	2b00      	cmp	r3, #0
 80189a0:	f000 80b5 	beq.w	8018b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80189a4:	682b      	ldr	r3, [r5, #0]
 80189a6:	4629      	mov	r1, r5
 80189a8:	a802      	add	r0, sp, #8
 80189aa:	68db      	ldr	r3, [r3, #12]
 80189ac:	4798      	blx	r3
 80189ae:	4628      	mov	r0, r5
 80189b0:	f7ff ff60 	bl	8018874 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80189b4:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80189b8:	4407      	add	r7, r0
 80189ba:	4628      	mov	r0, r5
 80189bc:	f7ff ff6e 	bl	801889c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80189c0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80189c4:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80189c8:	b23f      	sxth	r7, r7
 80189ca:	4418      	add	r0, r3
 80189cc:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80189d0:	4621      	mov	r1, r4
 80189d2:	f8ad 2014 	strh.w	r2, [sp, #20]
 80189d6:	f8ad 0012 	strh.w	r0, [sp, #18]
 80189da:	4630      	mov	r0, r6
 80189dc:	f8ad 3016 	strh.w	r3, [sp, #22]
 80189e0:	f8ad 7010 	strh.w	r7, [sp, #16]
 80189e4:	f7f7 fa96 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 80189e8:	4628      	mov	r0, r5
 80189ea:	f7ff ff27 	bl	801883c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80189ee:	ab06      	add	r3, sp, #24
 80189f0:	4602      	mov	r2, r0
 80189f2:	e896 0003 	ldmia.w	r6, {r0, r1}
 80189f6:	e883 0003 	stmia.w	r3, {r0, r1}
 80189fa:	4611      	mov	r1, r2
 80189fc:	4618      	mov	r0, r3
 80189fe:	f7f7 fa89 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8018a02:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 8018a06:	f9b4 1000 	ldrsh.w	r1, [r4]
 8018a0a:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 8018a0e:	4299      	cmp	r1, r3
 8018a10:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8018a14:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8018a18:	d10b      	bne.n	8018a32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a1a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018a1e:	4552      	cmp	r2, sl
 8018a20:	d107      	bne.n	8018a32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a22:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8018a26:	455a      	cmp	r2, fp
 8018a28:	d103      	bne.n	8018a32 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8018a2a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8018a2e:	454a      	cmp	r2, r9
 8018a30:	d06d      	beq.n	8018b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018a32:	f1bb 0f00 	cmp.w	fp, #0
 8018a36:	dd65      	ble.n	8018b04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018a38:	f1b9 0f00 	cmp.w	r9, #0
 8018a3c:	dd62      	ble.n	8018b04 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8018a3e:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8018a42:	fa1f f08a 	uxth.w	r0, sl
 8018a46:	4552      	cmp	r2, sl
 8018a48:	9000      	str	r0, [sp, #0]
 8018a4a:	da12      	bge.n	8018a72 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8018a4c:	9301      	str	r3, [sp, #4]
 8018a4e:	9b00      	ldr	r3, [sp, #0]
 8018a50:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018a54:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018a58:	1a9a      	subs	r2, r3, r2
 8018a5a:	f8ad 1010 	strh.w	r1, [sp, #16]
 8018a5e:	4631      	mov	r1, r6
 8018a60:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018a64:	4640      	mov	r0, r8
 8018a66:	f8ad 2016 	strh.w	r2, [sp, #22]
 8018a6a:	69ea      	ldr	r2, [r5, #28]
 8018a6c:	f7ff ff7a 	bl	8018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018a70:	9b01      	ldr	r3, [sp, #4]
 8018a72:	f9b4 2000 	ldrsh.w	r2, [r4]
 8018a76:	b29f      	uxth	r7, r3
 8018a78:	429a      	cmp	r2, r3
 8018a7a:	da0d      	bge.n	8018a98 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8018a7c:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018a80:	1aba      	subs	r2, r7, r2
 8018a82:	f8ad a012 	strh.w	sl, [sp, #18]
 8018a86:	4631      	mov	r1, r6
 8018a88:	f8ad 2014 	strh.w	r2, [sp, #20]
 8018a8c:	4640      	mov	r0, r8
 8018a8e:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018a92:	69ea      	ldr	r2, [r5, #28]
 8018a94:	f7ff ff66 	bl	8018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018a98:	8822      	ldrh	r2, [r4, #0]
 8018a9a:	445f      	add	r7, fp
 8018a9c:	88a3      	ldrh	r3, [r4, #4]
 8018a9e:	b2bf      	uxth	r7, r7
 8018aa0:	4413      	add	r3, r2
 8018aa2:	b23a      	sxth	r2, r7
 8018aa4:	b29b      	uxth	r3, r3
 8018aa6:	b219      	sxth	r1, r3
 8018aa8:	4291      	cmp	r1, r2
 8018aaa:	dd0d      	ble.n	8018ac8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8018aac:	1bdb      	subs	r3, r3, r7
 8018aae:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018ab2:	f8ad a012 	strh.w	sl, [sp, #18]
 8018ab6:	4631      	mov	r1, r6
 8018ab8:	f8ad 3014 	strh.w	r3, [sp, #20]
 8018abc:	4640      	mov	r0, r8
 8018abe:	f8ad 9016 	strh.w	r9, [sp, #22]
 8018ac2:	69ea      	ldr	r2, [r5, #28]
 8018ac4:	f7ff ff4e 	bl	8018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018ac8:	88e2      	ldrh	r2, [r4, #6]
 8018aca:	8863      	ldrh	r3, [r4, #2]
 8018acc:	4413      	add	r3, r2
 8018ace:	9a00      	ldr	r2, [sp, #0]
 8018ad0:	444a      	add	r2, r9
 8018ad2:	b29b      	uxth	r3, r3
 8018ad4:	fa1f f982 	uxth.w	r9, r2
 8018ad8:	b219      	sxth	r1, r3
 8018ada:	fa0f f289 	sxth.w	r2, r9
 8018ade:	428a      	cmp	r2, r1
 8018ae0:	da15      	bge.n	8018b0e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8018ae2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8018ae6:	eba3 0309 	sub.w	r3, r3, r9
 8018aea:	f9b4 0000 	ldrsh.w	r0, [r4]
 8018aee:	f8ad 1014 	strh.w	r1, [sp, #20]
 8018af2:	4631      	mov	r1, r6
 8018af4:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018af8:	f8ad 2012 	strh.w	r2, [sp, #18]
 8018afc:	f8ad 3016 	strh.w	r3, [sp, #22]
 8018b00:	69ea      	ldr	r2, [r5, #28]
 8018b02:	e001      	b.n	8018b08 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 8018b04:	69ea      	ldr	r2, [r5, #28]
 8018b06:	4621      	mov	r1, r4
 8018b08:	4640      	mov	r0, r8
 8018b0a:	f7ff ff2b 	bl	8018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018b0e:	4628      	mov	r0, r5
 8018b10:	f7ff fe94 	bl	801883c <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8018b14:	6861      	ldr	r1, [r4, #4]
 8018b16:	4602      	mov	r2, r0
 8018b18:	4633      	mov	r3, r6
 8018b1a:	6820      	ldr	r0, [r4, #0]
 8018b1c:	c303      	stmia	r3!, {r0, r1}
 8018b1e:	4611      	mov	r1, r2
 8018b20:	4630      	mov	r0, r6
 8018b22:	f7f7 f9f7 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8018b26:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8018b2a:	2b00      	cmp	r3, #0
 8018b2c:	f77f af33 	ble.w	8018996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b30:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8018b34:	2b00      	cmp	r3, #0
 8018b36:	f77f af2e 	ble.w	8018996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8018b3a:	4628      	mov	r0, r5
 8018b3c:	f7ff fe9a 	bl	8018874 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8018b40:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8018b44:	1a18      	subs	r0, r3, r0
 8018b46:	f8ad 0010 	strh.w	r0, [sp, #16]
 8018b4a:	4628      	mov	r0, r5
 8018b4c:	f7ff fea6 	bl	801889c <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8018b50:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8018b54:	4631      	mov	r1, r6
 8018b56:	1a18      	subs	r0, r3, r0
 8018b58:	f8ad 0012 	strh.w	r0, [sp, #18]
 8018b5c:	4628      	mov	r0, r5
 8018b5e:	682b      	ldr	r3, [r5, #0]
 8018b60:	689b      	ldr	r3, [r3, #8]
 8018b62:	4798      	blx	r3
 8018b64:	e717      	b.n	8018996 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08018b66 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8018b66:	b570      	push	{r4, r5, r6, lr}
 8018b68:	1d06      	adds	r6, r0, #4
 8018b6a:	b086      	sub	sp, #24
 8018b6c:	460c      	mov	r4, r1
 8018b6e:	2300      	movs	r3, #0
 8018b70:	4631      	mov	r1, r6
 8018b72:	4605      	mov	r5, r0
 8018b74:	a802      	add	r0, sp, #8
 8018b76:	9301      	str	r3, [sp, #4]
 8018b78:	f7ff f95c 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018b7c:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8018b80:	8822      	ldrh	r2, [r4, #0]
 8018b82:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8018b86:	1ad2      	subs	r2, r2, r3
 8018b88:	8863      	ldrh	r3, [r4, #2]
 8018b8a:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8018b8e:	1a5b      	subs	r3, r3, r1
 8018b90:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8018b94:	f8ad 2010 	strh.w	r2, [sp, #16]
 8018b98:	aa01      	add	r2, sp, #4
 8018b9a:	f8ad 0014 	strh.w	r0, [sp, #20]
 8018b9e:	4630      	mov	r0, r6
 8018ba0:	f8ad 1016 	strh.w	r1, [sp, #22]
 8018ba4:	a904      	add	r1, sp, #16
 8018ba6:	f8ad 3012 	strh.w	r3, [sp, #18]
 8018baa:	f7f7 fa8b 	bl	80100c4 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8018bae:	9a01      	ldr	r2, [sp, #4]
 8018bb0:	b11a      	cbz	r2, 8018bba <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8018bb2:	4621      	mov	r1, r4
 8018bb4:	4628      	mov	r0, r5
 8018bb6:	f7ff fed5 	bl	8018964 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8018bba:	b006      	add	sp, #24
 8018bbc:	bd70      	pop	{r4, r5, r6, pc}

08018bbe <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8018bbe:	4602      	mov	r2, r0
 8018bc0:	b530      	push	{r4, r5, lr}
 8018bc2:	4604      	mov	r4, r0
 8018bc4:	b085      	sub	sp, #20
 8018bc6:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8018bca:	460d      	mov	r5, r1
 8018bcc:	466b      	mov	r3, sp
 8018bce:	6851      	ldr	r1, [r2, #4]
 8018bd0:	c303      	stmia	r3!, {r0, r1}
 8018bd2:	4629      	mov	r1, r5
 8018bd4:	4668      	mov	r0, sp
 8018bd6:	f7f7 f99d 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 8018bda:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 8018bde:	b12b      	cbz	r3, 8018bec <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 8018be0:	4669      	mov	r1, sp
 8018be2:	4620      	mov	r0, r4
 8018be4:	f7ff ffbf 	bl	8018b66 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 8018be8:	b005      	add	sp, #20
 8018bea:	bd30      	pop	{r4, r5, pc}
 8018bec:	3404      	adds	r4, #4
 8018bee:	a802      	add	r0, sp, #8
 8018bf0:	4621      	mov	r1, r4
 8018bf2:	f7ff f91f 	bl	8017e34 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8018bf6:	f8bd 3000 	ldrh.w	r3, [sp]
 8018bfa:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018bfe:	4669      	mov	r1, sp
 8018c00:	4620      	mov	r0, r4
 8018c02:	1a9b      	subs	r3, r3, r2
 8018c04:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 8018c08:	f8ad 3000 	strh.w	r3, [sp]
 8018c0c:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8018c10:	1a9b      	subs	r3, r3, r2
 8018c12:	f8ad 3002 	strh.w	r3, [sp, #2]
 8018c16:	f7f7 fa1c 	bl	8010052 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8018c1a:	e7e5      	b.n	8018be8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08018c1c <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8018c1c:	460b      	mov	r3, r1
 8018c1e:	680a      	ldr	r2, [r1, #0]
 8018c20:	1d01      	adds	r1, r0, #4
 8018c22:	6992      	ldr	r2, [r2, #24]
 8018c24:	4618      	mov	r0, r3
 8018c26:	4710      	bx	r2

08018c28 <_ZN8touchgfx12TextProviderC1Ev>:
 8018c28:	b538      	push	{r3, r4, r5, lr}
 8018c2a:	2500      	movs	r5, #0
 8018c2c:	2302      	movs	r3, #2
 8018c2e:	4604      	mov	r4, r0
 8018c30:	220e      	movs	r2, #14
 8018c32:	7403      	strb	r3, [r0, #16]
 8018c34:	4629      	mov	r1, r5
 8018c36:	6145      	str	r5, [r0, #20]
 8018c38:	7605      	strb	r5, [r0, #24]
 8018c3a:	83c5      	strh	r5, [r0, #30]
 8018c3c:	8405      	strh	r5, [r0, #32]
 8018c3e:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8018c40:	8705      	strh	r5, [r0, #56]	@ 0x38
 8018c42:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8018c44:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8018c48:	e9c0 5500 	strd	r5, r5, [r0]
 8018c4c:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8018c50:	304c      	adds	r0, #76	@ 0x4c
 8018c52:	f00e f82b 	bl	8026cac <memset>
 8018c56:	2301      	movs	r3, #1
 8018c58:	4620      	mov	r0, r4
 8018c5a:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8018c5e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8018c62:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8018c66:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8018c6a:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8018c6e:	f7eb fbbb 	bl	80043e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8018c72:	4620      	mov	r0, r4
 8018c74:	bd38      	pop	{r3, r4, r5, pc}

08018c76 <_ZN8touchgfx12TextProvider11endOfStringEv>:
 8018c76:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8018c78:	eb00 0043 	add.w	r0, r0, r3, lsl #1
 8018c7c:	8c40      	ldrh	r0, [r0, #34]	@ 0x22
 8018c7e:	fab0 f080 	clz	r0, r0
 8018c82:	0940      	lsrs	r0, r0, #5
 8018c84:	4770      	bx	lr

08018c86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8018c86:	b530      	push	{r4, r5, lr}
 8018c88:	2500      	movs	r5, #0
 8018c8a:	2401      	movs	r4, #1
 8018c8c:	6843      	ldr	r3, [r0, #4]
 8018c8e:	b913      	cbnz	r3, 8018c96 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8018c90:	6803      	ldr	r3, [r0, #0]
 8018c92:	b313      	cbz	r3, 8018cda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018c94:	6043      	str	r3, [r0, #4]
 8018c96:	7e03      	ldrb	r3, [r0, #24]
 8018c98:	b143      	cbz	r3, 8018cac <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8018c9a:	6943      	ldr	r3, [r0, #20]
 8018c9c:	b12b      	cbz	r3, 8018caa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018c9e:	881a      	ldrh	r2, [r3, #0]
 8018ca0:	b11a      	cbz	r2, 8018caa <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8018ca2:	1c9a      	adds	r2, r3, #2
 8018ca4:	6142      	str	r2, [r0, #20]
 8018ca6:	8818      	ldrh	r0, [r3, #0]
 8018ca8:	bd30      	pop	{r4, r5, pc}
 8018caa:	7605      	strb	r5, [r0, #24]
 8018cac:	6843      	ldr	r3, [r0, #4]
 8018cae:	8819      	ldrh	r1, [r3, #0]
 8018cb0:	b199      	cbz	r1, 8018cda <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8018cb2:	1c9a      	adds	r2, r3, #2
 8018cb4:	2902      	cmp	r1, #2
 8018cb6:	6042      	str	r2, [r0, #4]
 8018cb8:	d1f5      	bne.n	8018ca6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8018cba:	7c03      	ldrb	r3, [r0, #16]
 8018cbc:	2b01      	cmp	r3, #1
 8018cbe:	d8e5      	bhi.n	8018c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cc0:	1c5a      	adds	r2, r3, #1
 8018cc2:	3302      	adds	r3, #2
 8018cc4:	7402      	strb	r2, [r0, #16]
 8018cc6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 8018cca:	6143      	str	r3, [r0, #20]
 8018ccc:	2b00      	cmp	r3, #0
 8018cce:	d0dd      	beq.n	8018c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cd0:	881b      	ldrh	r3, [r3, #0]
 8018cd2:	2b00      	cmp	r3, #0
 8018cd4:	d0da      	beq.n	8018c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cd6:	7604      	strb	r4, [r0, #24]
 8018cd8:	e7d8      	b.n	8018c8c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8018cda:	2000      	movs	r0, #0
 8018cdc:	e7e4      	b.n	8018ca8 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8018cde:	6001      	str	r1, [r0, #0]
 8018ce0:	2100      	movs	r1, #0
 8018ce2:	b430      	push	{r4, r5}
 8018ce4:	6041      	str	r1, [r0, #4]
 8018ce6:	6815      	ldr	r5, [r2, #0]
 8018ce8:	6085      	str	r5, [r0, #8]
 8018cea:	6852      	ldr	r2, [r2, #4]
 8018cec:	6443      	str	r3, [r0, #68]	@ 0x44
 8018cee:	9b02      	ldr	r3, [sp, #8]
 8018cf0:	60c2      	str	r2, [r0, #12]
 8018cf2:	7401      	strb	r1, [r0, #16]
 8018cf4:	6141      	str	r1, [r0, #20]
 8018cf6:	7601      	strb	r1, [r0, #24]
 8018cf8:	8701      	strh	r1, [r0, #56]	@ 0x38
 8018cfa:	8401      	strh	r1, [r0, #32]
 8018cfc:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 8018d00:	6483      	str	r3, [r0, #72]	@ 0x48
 8018d02:	bc30      	pop	{r4, r5}
 8018d04:	f7eb bb70 	b.w	80043e8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

08018d08 <_ZN8touchgfx12TextProvider10initializeEPKtS2_PKNS_24FontContextualFormsTableEz>:
 8018d08:	b408      	push	{r3}
 8018d0a:	b510      	push	{r4, lr}
 8018d0c:	b085      	sub	sp, #20
 8018d0e:	ac07      	add	r4, sp, #28
 8018d10:	f854 3b04 	ldr.w	r3, [r4], #4
 8018d14:	9300      	str	r3, [sp, #0]
 8018d16:	4613      	mov	r3, r2
 8018d18:	4622      	mov	r2, r4
 8018d1a:	9403      	str	r4, [sp, #12]
 8018d1c:	f7ff ffdf 	bl	8018cde <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8018d20:	b005      	add	sp, #20
 8018d22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8018d26:	b001      	add	sp, #4
 8018d28:	4770      	bx	lr

08018d2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 8018d2a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8018d2c:	4605      	mov	r5, r0
 8018d2e:	4608      	mov	r0, r1
 8018d30:	b1f1      	cbz	r1, 8018d70 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 8018d32:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 8018d36:	460b      	mov	r3, r1
 8018d38:	f101 0708 	add.w	r7, r1, #8
 8018d3c:	4622      	mov	r2, r4
 8018d3e:	6818      	ldr	r0, [r3, #0]
 8018d40:	3308      	adds	r3, #8
 8018d42:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018d46:	4626      	mov	r6, r4
 8018d48:	42bb      	cmp	r3, r7
 8018d4a:	c603      	stmia	r6!, {r0, r1}
 8018d4c:	4634      	mov	r4, r6
 8018d4e:	d1f6      	bne.n	8018d3e <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 8018d50:	6818      	ldr	r0, [r3, #0]
 8018d52:	6030      	str	r0, [r6, #0]
 8018d54:	4610      	mov	r0, r2
 8018d56:	889b      	ldrh	r3, [r3, #4]
 8018d58:	80b3      	strh	r3, [r6, #4]
 8018d5a:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018d5e:	015b      	lsls	r3, r3, #5
 8018d60:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 8018d64:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8018d68:	430b      	orrs	r3, r1
 8018d6a:	425b      	negs	r3, r3
 8018d6c:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018d70:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018d72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8018d72:	b538      	push	{r3, r4, r5, lr}
 8018d74:	460c      	mov	r4, r1
 8018d76:	6811      	ldr	r1, [r2, #0]
 8018d78:	4610      	mov	r0, r2
 8018d7a:	68cd      	ldr	r5, [r1, #12]
 8018d7c:	4619      	mov	r1, r3
 8018d7e:	47a8      	blx	r5
 8018d80:	2800      	cmp	r0, #0
 8018d82:	bf08      	it	eq
 8018d84:	4620      	moveq	r0, r4
 8018d86:	bd38      	pop	{r3, r4, r5, pc}

08018d88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8018d88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018d8c:	468c      	mov	ip, r1
 8018d8e:	4605      	mov	r5, r0
 8018d90:	4614      	mov	r4, r2
 8018d92:	b942      	cbnz	r2, 8018da6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8018d94:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018d98:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8018d9c:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8018da0:	4620      	mov	r0, r4
 8018da2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018da6:	7b50      	ldrb	r0, [r2, #13]
 8018da8:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8018dac:	8893      	ldrh	r3, [r2, #4]
 8018dae:	0106      	lsls	r6, r0, #4
 8018db0:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018db4:	79e6      	ldrb	r6, [r4, #7]
 8018db6:	4316      	orrs	r6, r2
 8018db8:	185a      	adds	r2, r3, r1
 8018dba:	b291      	uxth	r1, r2
 8018dbc:	b2b7      	uxth	r7, r6
 8018dbe:	291d      	cmp	r1, #29
 8018dc0:	d87f      	bhi.n	8018ec2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018dc2:	2201      	movs	r2, #1
 8018dc4:	10f6      	asrs	r6, r6, #3
 8018dc6:	408a      	lsls	r2, r1
 8018dc8:	498b      	ldr	r1, [pc, #556]	@ (8018ff8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8018dca:	420a      	tst	r2, r1
 8018dcc:	d12e      	bne.n	8018e2c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8018dce:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8018dd2:	d076      	beq.n	8018ec2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8018dd4:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018dd8:	4623      	mov	r3, r4
 8018dda:	f104 0e08 	add.w	lr, r4, #8
 8018dde:	4614      	mov	r4, r2
 8018de0:	6818      	ldr	r0, [r3, #0]
 8018de2:	3308      	adds	r3, #8
 8018de4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018de8:	4694      	mov	ip, r2
 8018dea:	4573      	cmp	r3, lr
 8018dec:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8018df0:	4662      	mov	r2, ip
 8018df2:	d1f5      	bne.n	8018de0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8018df4:	6818      	ldr	r0, [r3, #0]
 8018df6:	f8cc 0000 	str.w	r0, [ip]
 8018dfa:	889b      	ldrh	r3, [r3, #4]
 8018dfc:	f8ac 3004 	strh.w	r3, [ip, #4]
 8018e00:	b2b3      	uxth	r3, r6
 8018e02:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 8018e06:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 8018e0a:	1aca      	subs	r2, r1, r3
 8018e0c:	1bcf      	subs	r7, r1, r7
 8018e0e:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 8018e12:	b292      	uxth	r2, r2
 8018e14:	1afb      	subs	r3, r7, r3
 8018e16:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 8018e1a:	10d2      	asrs	r2, r2, #3
 8018e1c:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 8018e20:	4302      	orrs	r2, r0
 8018e22:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 8018e26:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 8018e2a:	e7b9      	b.n	8018da0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018e2c:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018e30:	4623      	mov	r3, r4
 8018e32:	f104 0808 	add.w	r8, r4, #8
 8018e36:	4614      	mov	r4, r2
 8018e38:	6818      	ldr	r0, [r3, #0]
 8018e3a:	3308      	adds	r3, #8
 8018e3c:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8018e40:	4696      	mov	lr, r2
 8018e42:	4543      	cmp	r3, r8
 8018e44:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018e48:	4672      	mov	r2, lr
 8018e4a:	d1f5      	bne.n	8018e38 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8018e4c:	6818      	ldr	r0, [r3, #0]
 8018e4e:	f8ce 0000 	str.w	r0, [lr]
 8018e52:	889b      	ldrh	r3, [r3, #4]
 8018e54:	f8ae 3004 	strh.w	r3, [lr, #4]
 8018e58:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8018e5a:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 8018e5e:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 8018e60:	f640 6333 	movw	r3, #3635	@ 0xe33
 8018e64:	4299      	cmp	r1, r3
 8018e66:	d111      	bne.n	8018e8c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8018e68:	f8dc 3000 	ldr.w	r3, [ip]
 8018e6c:	4660      	mov	r0, ip
 8018e6e:	68db      	ldr	r3, [r3, #12]
 8018e70:	4798      	blx	r3
 8018e72:	7b41      	ldrb	r1, [r0, #13]
 8018e74:	00cb      	lsls	r3, r1, #3
 8018e76:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018e7a:	7a03      	ldrb	r3, [r0, #8]
 8018e7c:	4313      	orrs	r3, r2
 8018e7e:	064a      	lsls	r2, r1, #25
 8018e80:	bf44      	itt	mi
 8018e82:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018e86:	b21b      	sxthmi	r3, r3
 8018e88:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018e8c:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8018e90:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8018e94:	443b      	add	r3, r7
 8018e96:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8018e9a:	4433      	add	r3, r6
 8018e9c:	b29b      	uxth	r3, r3
 8018e9e:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018ea2:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8018ea6:	10db      	asrs	r3, r3, #3
 8018ea8:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8018eac:	4313      	orrs	r3, r2
 8018eae:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8018eb2:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8018eb6:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8018eba:	1a9b      	subs	r3, r3, r2
 8018ebc:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8018ec0:	e76e      	b.n	8018da0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8018ec2:	f023 0204 	bic.w	r2, r3, #4
 8018ec6:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8018eca:	428a      	cmp	r2, r1
 8018ecc:	d003      	beq.n	8018ed6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8018ece:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8018ed2:	4293      	cmp	r3, r2
 8018ed4:	d138      	bne.n	8018f48 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8018ed6:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8018eda:	4622      	mov	r2, r4
 8018edc:	f104 0808 	add.w	r8, r4, #8
 8018ee0:	4634      	mov	r4, r6
 8018ee2:	6810      	ldr	r0, [r2, #0]
 8018ee4:	3208      	adds	r2, #8
 8018ee6:	f852 1c04 	ldr.w	r1, [r2, #-4]
 8018eea:	46b6      	mov	lr, r6
 8018eec:	4542      	cmp	r2, r8
 8018eee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8018ef2:	4676      	mov	r6, lr
 8018ef4:	d1f5      	bne.n	8018ee2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 8018ef6:	6810      	ldr	r0, [r2, #0]
 8018ef8:	3b01      	subs	r3, #1
 8018efa:	4621      	mov	r1, r4
 8018efc:	f8ce 0000 	str.w	r0, [lr]
 8018f00:	b29b      	uxth	r3, r3
 8018f02:	8892      	ldrh	r2, [r2, #4]
 8018f04:	4628      	mov	r0, r5
 8018f06:	f8ae 2004 	strh.w	r2, [lr, #4]
 8018f0a:	4662      	mov	r2, ip
 8018f0c:	f7ff ff31 	bl	8018d72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018f10:	7b41      	ldrb	r1, [r0, #13]
 8018f12:	00cb      	lsls	r3, r1, #3
 8018f14:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018f18:	7a03      	ldrb	r3, [r0, #8]
 8018f1a:	0648      	lsls	r0, r1, #25
 8018f1c:	ea43 0302 	orr.w	r3, r3, r2
 8018f20:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 8018f24:	bf44      	itt	mi
 8018f26:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018f2a:	b21b      	sxthmi	r3, r3
 8018f2c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8018f30:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8018f34:	005b      	lsls	r3, r3, #1
 8018f36:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018f3a:	4313      	orrs	r3, r2
 8018f3c:	115a      	asrs	r2, r3, #5
 8018f3e:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 8018f42:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8018f46:	e047      	b.n	8018fd8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8018f48:	00c2      	lsls	r2, r0, #3
 8018f4a:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 8018f4e:	7a22      	ldrb	r2, [r4, #8]
 8018f50:	430a      	orrs	r2, r1
 8018f52:	0641      	lsls	r1, r0, #25
 8018f54:	f640 6109 	movw	r1, #3593	@ 0xe09
 8018f58:	bf44      	itt	mi
 8018f5a:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 8018f5e:	b212      	sxthmi	r2, r2
 8018f60:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8018f64:	f023 0210 	bic.w	r2, r3, #16
 8018f68:	428a      	cmp	r2, r1
 8018f6a:	d003      	beq.n	8018f74 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8018f6c:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018f70:	4293      	cmp	r3, r2
 8018f72:	d13e      	bne.n	8018ff2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8018f74:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8018f78:	f104 0808 	add.w	r8, r4, #8
 8018f7c:	4696      	mov	lr, r2
 8018f7e:	6820      	ldr	r0, [r4, #0]
 8018f80:	3408      	adds	r4, #8
 8018f82:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8018f86:	4616      	mov	r6, r2
 8018f88:	4544      	cmp	r4, r8
 8018f8a:	c603      	stmia	r6!, {r0, r1}
 8018f8c:	4632      	mov	r2, r6
 8018f8e:	d1f6      	bne.n	8018f7e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8018f90:	6820      	ldr	r0, [r4, #0]
 8018f92:	6030      	str	r0, [r6, #0]
 8018f94:	4628      	mov	r0, r5
 8018f96:	88a1      	ldrh	r1, [r4, #4]
 8018f98:	4674      	mov	r4, lr
 8018f9a:	80b1      	strh	r1, [r6, #4]
 8018f9c:	4671      	mov	r1, lr
 8018f9e:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8018fa2:	0076      	lsls	r6, r6, #1
 8018fa4:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8018fa8:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8018fac:	4316      	orrs	r6, r2
 8018fae:	f640 6213 	movw	r2, #3603	@ 0xe13
 8018fb2:	4293      	cmp	r3, r2
 8018fb4:	4662      	mov	r2, ip
 8018fb6:	bf16      	itet	ne
 8018fb8:	f103 33ff 	addne.w	r3, r3, #4294967295
 8018fbc:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8018fc0:	b29b      	uxthne	r3, r3
 8018fc2:	f7ff fed6 	bl	8018d72 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8018fc6:	7b43      	ldrb	r3, [r0, #13]
 8018fc8:	7a82      	ldrb	r2, [r0, #10]
 8018fca:	005b      	lsls	r3, r3, #1
 8018fcc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018fd0:	4313      	orrs	r3, r2
 8018fd2:	1af6      	subs	r6, r6, r3
 8018fd4:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8018fd8:	7b61      	ldrb	r1, [r4, #13]
 8018fda:	00cb      	lsls	r3, r1, #3
 8018fdc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8018fe0:	7a23      	ldrb	r3, [r4, #8]
 8018fe2:	4313      	orrs	r3, r2
 8018fe4:	064a      	lsls	r2, r1, #25
 8018fe6:	bf44      	itt	mi
 8018fe8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8018fec:	b21b      	sxthmi	r3, r3
 8018fee:	1bdb      	subs	r3, r3, r7
 8018ff0:	e719      	b.n	8018e26 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	e7a5      	b.n	8018f42 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 8018ff6:	bf00      	nop
 8018ff8:	3fc00079 	.word	0x3fc00079

08018ffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8018ffc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019000:	4604      	mov	r4, r0
 8019002:	b942      	cbnz	r2, 8019016 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8019004:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019008:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 801900c:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 8019010:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 8019014:	e047      	b.n	80190a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8019016:	7b51      	ldrb	r1, [r2, #13]
 8019018:	8893      	ldrh	r3, [r2, #4]
 801901a:	010d      	lsls	r5, r1, #4
 801901c:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 8019020:	79d5      	ldrb	r5, [r2, #7]
 8019022:	4305      	orrs	r5, r0
 8019024:	2d04      	cmp	r5, #4
 8019026:	bfcc      	ite	gt
 8019028:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 801902c:	f04f 0e01 	movle.w	lr, #1
 8019030:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 8019034:	f200 80ab 	bhi.w	801918e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 8019038:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 801903c:	4283      	cmp	r3, r0
 801903e:	d216      	bcs.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019040:	f240 605b 	movw	r0, #1627	@ 0x65b
 8019044:	4283      	cmp	r3, r0
 8019046:	d859      	bhi.n	80190fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8019048:	f240 6057 	movw	r0, #1623	@ 0x657
 801904c:	4283      	cmp	r3, r0
 801904e:	d20e      	bcs.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019050:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8019054:	d24a      	bcs.n	80190ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8019056:	f240 604e 	movw	r0, #1614	@ 0x64e
 801905a:	4283      	cmp	r3, r0
 801905c:	d207      	bcs.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801905e:	f240 601a 	movw	r0, #1562	@ 0x61a
 8019062:	4283      	cmp	r3, r0
 8019064:	d02a      	beq.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019066:	d821      	bhi.n	80190ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8019068:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 801906c:	d35b      	bcc.n	8019126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801906e:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8019072:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019076:	f040 80d0 	bne.w	801921a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801907a:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801907e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8019082:	f040 80ca 	bne.w	801921a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8019086:	00cb      	lsls	r3, r1, #3
 8019088:	0649      	lsls	r1, r1, #25
 801908a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801908e:	7a13      	ldrb	r3, [r2, #8]
 8019090:	ea43 0300 	orr.w	r3, r3, r0
 8019094:	bf44      	itt	mi
 8019096:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801909a:	b21b      	sxthmi	r3, r3
 801909c:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80190a0:	1b5d      	subs	r5, r3, r5
 80190a2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80190a6:	4610      	mov	r0, r2
 80190a8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80190ac:	f240 604b 	movw	r0, #1611	@ 0x64b
 80190b0:	4283      	cmp	r3, r0
 80190b2:	d338      	bcc.n	8019126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80190b4:	f240 604c 	movw	r0, #1612	@ 0x64c
 80190b8:	4283      	cmp	r3, r0
 80190ba:	d9d8      	bls.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80190bc:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 80190c0:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 80190c4:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80190c8:	f040 80f3 	bne.w	80192b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80190cc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 80190d0:	f040 80ef 	bne.w	80192b2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 80190d4:	00cb      	lsls	r3, r1, #3
 80190d6:	064e      	lsls	r6, r1, #25
 80190d8:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80190dc:	7a13      	ldrb	r3, [r2, #8]
 80190de:	ea43 0300 	orr.w	r3, r3, r0
 80190e2:	bf44      	itt	mi
 80190e4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80190e8:	b21b      	sxthmi	r3, r3
 80190ea:	e7d9      	b.n	80190a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80190ec:	f240 6054 	movw	r0, #1620	@ 0x654
 80190f0:	4283      	cmp	r3, r0
 80190f2:	d8e3      	bhi.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80190f4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80190f8:	d9e0      	bls.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80190fa:	e7b8      	b.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80190fc:	f240 6074 	movw	r0, #1652	@ 0x674
 8019100:	4283      	cmp	r3, r0
 8019102:	d0b4      	beq.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019104:	d82d      	bhi.n	8019162 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 8019106:	f240 605e 	movw	r0, #1630	@ 0x65e
 801910a:	4283      	cmp	r3, r0
 801910c:	d804      	bhi.n	8019118 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 801910e:	f240 605d 	movw	r0, #1629	@ 0x65d
 8019112:	4283      	cmp	r3, r0
 8019114:	d3d2      	bcc.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019116:	e7aa      	b.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019118:	f240 605f 	movw	r0, #1631	@ 0x65f
 801911c:	4283      	cmp	r3, r0
 801911e:	d0cd      	beq.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019120:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 8019124:	d0a3      	beq.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019126:	00cb      	lsls	r3, r1, #3
 8019128:	0649      	lsls	r1, r1, #25
 801912a:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801912e:	7a13      	ldrb	r3, [r2, #8]
 8019130:	ea43 0300 	orr.w	r3, r3, r0
 8019134:	bf44      	itt	mi
 8019136:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801913a:	b21b      	sxthmi	r3, r3
 801913c:	1b5d      	subs	r5, r3, r5
 801913e:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8019142:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019146:	7b53      	ldrb	r3, [r2, #13]
 8019148:	015b      	lsls	r3, r3, #5
 801914a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801914e:	7993      	ldrb	r3, [r2, #6]
 8019150:	430b      	orrs	r3, r1
 8019152:	2105      	movs	r1, #5
 8019154:	005b      	lsls	r3, r3, #1
 8019156:	fb93 f3f1 	sdiv	r3, r3, r1
 801915a:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801915e:	440b      	add	r3, r1
 8019160:	e756      	b.n	8019010 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 8019162:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8019166:	4283      	cmp	r3, r0
 8019168:	d809      	bhi.n	801917e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 801916a:	f240 60df 	movw	r0, #1759	@ 0x6df
 801916e:	4283      	cmp	r3, r0
 8019170:	f4bf af7d 	bcs.w	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019174:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8019178:	2b05      	cmp	r3, #5
 801917a:	d8d4      	bhi.n	8019126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801917c:	e777      	b.n	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801917e:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8019182:	4283      	cmp	r3, r0
 8019184:	d09a      	beq.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019186:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 801918a:	4283      	cmp	r3, r0
 801918c:	e7ca      	b.n	8019124 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801918e:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8019192:	d22b      	bcs.n	80191ec <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8019194:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8019198:	4283      	cmp	r3, r0
 801919a:	d28f      	bcs.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801919c:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 80191a0:	4283      	cmp	r3, r0
 80191a2:	d816      	bhi.n	80191d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 80191a4:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 80191a8:	4283      	cmp	r3, r0
 80191aa:	f4bf af60 	bcs.w	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80191ae:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 80191b2:	4283      	cmp	r3, r0
 80191b4:	d80a      	bhi.n	80191cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 80191b6:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 80191ba:	4283      	cmp	r3, r0
 80191bc:	f4bf af57 	bcs.w	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80191c0:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 80191c4:	4283      	cmp	r3, r0
 80191c6:	f43f af79 	beq.w	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80191ca:	e7ac      	b.n	8019126 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 80191cc:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 80191d0:	e7f8      	b.n	80191c4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 80191d2:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 80191d6:	4283      	cmp	r3, r0
 80191d8:	d802      	bhi.n	80191e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 80191da:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 80191de:	e798      	b.n	8019112 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 80191e0:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80191e4:	4283      	cmp	r3, r0
 80191e6:	f47f af42 	bne.w	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80191ea:	e767      	b.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80191ec:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80191f0:	4283      	cmp	r3, r0
 80191f2:	f43f af63 	beq.w	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80191f6:	d802      	bhi.n	80191fe <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80191f8:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80191fc:	e7f2      	b.n	80191e4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80191fe:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8019202:	4283      	cmp	r3, r0
 8019204:	d805      	bhi.n	8019212 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8019206:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 801920a:	4283      	cmp	r3, r0
 801920c:	f4ff af2f 	bcc.w	801906e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8019210:	e754      	b.n	80190bc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8019212:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8019216:	4283      	cmp	r3, r0
 8019218:	e7af      	b.n	801917a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 801921a:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 801921e:	4617      	mov	r7, r2
 8019220:	f102 0808 	add.w	r8, r2, #8
 8019224:	4666      	mov	r6, ip
 8019226:	6838      	ldr	r0, [r7, #0]
 8019228:	3708      	adds	r7, #8
 801922a:	f857 1c04 	ldr.w	r1, [r7, #-4]
 801922e:	46e6      	mov	lr, ip
 8019230:	4547      	cmp	r7, r8
 8019232:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8019236:	46f4      	mov	ip, lr
 8019238:	d1f5      	bne.n	8019226 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 801923a:	6838      	ldr	r0, [r7, #0]
 801923c:	f8ce 0000 	str.w	r0, [lr]
 8019240:	88b9      	ldrh	r1, [r7, #4]
 8019242:	f8ae 1004 	strh.w	r1, [lr, #4]
 8019246:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 801924a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801924e:	d009      	beq.n	8019264 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8019250:	7b51      	ldrb	r1, [r2, #13]
 8019252:	7992      	ldrb	r2, [r2, #6]
 8019254:	0149      	lsls	r1, r1, #5
 8019256:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 801925a:	4311      	orrs	r1, r2
 801925c:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8019260:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8019264:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019268:	b2ad      	uxth	r5, r5
 801926a:	d00d      	beq.n	8019288 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 801926c:	442b      	add	r3, r5
 801926e:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8019272:	b29b      	uxth	r3, r3
 8019274:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019278:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 801927c:	10db      	asrs	r3, r3, #3
 801927e:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8019282:	4313      	orrs	r3, r2
 8019284:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019288:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 801928c:	00cb      	lsls	r3, r1, #3
 801928e:	064f      	lsls	r7, r1, #25
 8019290:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8019294:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019298:	ea43 0302 	orr.w	r3, r3, r2
 801929c:	bf44      	itt	mi
 801929e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80192a2:	b21b      	sxthmi	r3, r3
 80192a4:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80192a8:	1b5b      	subs	r3, r3, r5
 80192aa:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 80192ae:	4632      	mov	r2, r6
 80192b0:	e6f9      	b.n	80190a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80192b2:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80192b6:	4617      	mov	r7, r2
 80192b8:	f102 0908 	add.w	r9, r2, #8
 80192bc:	4666      	mov	r6, ip
 80192be:	6838      	ldr	r0, [r7, #0]
 80192c0:	3708      	adds	r7, #8
 80192c2:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80192c6:	46e0      	mov	r8, ip
 80192c8:	454f      	cmp	r7, r9
 80192ca:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 80192ce:	46c4      	mov	ip, r8
 80192d0:	d1f5      	bne.n	80192be <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 80192d2:	6838      	ldr	r0, [r7, #0]
 80192d4:	f8c8 0000 	str.w	r0, [r8]
 80192d8:	88b9      	ldrh	r1, [r7, #4]
 80192da:	f8a8 1004 	strh.w	r1, [r8, #4]
 80192de:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 80192e2:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 80192e6:	d009      	beq.n	80192fc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 80192e8:	7b51      	ldrb	r1, [r2, #13]
 80192ea:	7992      	ldrb	r2, [r2, #6]
 80192ec:	0149      	lsls	r1, r1, #5
 80192ee:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80192f2:	4311      	orrs	r1, r2
 80192f4:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 80192f8:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 80192fc:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8019300:	d00e      	beq.n	8019320 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8019302:	eba3 030e 	sub.w	r3, r3, lr
 8019306:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 801930a:	b29b      	uxth	r3, r3
 801930c:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8019310:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8019314:	10db      	asrs	r3, r3, #3
 8019316:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 801931a:	4313      	orrs	r3, r2
 801931c:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8019320:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8019324:	00cb      	lsls	r3, r1, #3
 8019326:	0648      	lsls	r0, r1, #25
 8019328:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801932c:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8019330:	ea43 0302 	orr.w	r3, r3, r2
 8019334:	bf44      	itt	mi
 8019336:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801933a:	b21b      	sxthmi	r3, r3
 801933c:	1b5d      	subs	r5, r3, r5
 801933e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8019342:	e7b4      	b.n	80192ae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08019344 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8019344:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019348:	461e      	mov	r6, r3
 801934a:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 801934c:	4604      	mov	r4, r0
 801934e:	4617      	mov	r7, r2
 8019350:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8019354:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8019358:	f7eb f804 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 801935c:	4605      	mov	r5, r0
 801935e:	b918      	cbnz	r0, 8019368 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8019360:	6030      	str	r0, [r6, #0]
 8019362:	4628      	mov	r0, r5
 8019364:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8019368:	683b      	ldr	r3, [r7, #0]
 801936a:	4601      	mov	r1, r0
 801936c:	4638      	mov	r0, r7
 801936e:	68db      	ldr	r3, [r3, #12]
 8019370:	4798      	blx	r3
 8019372:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8019376:	4602      	mov	r2, r0
 8019378:	6030      	str	r0, [r6, #0]
 801937a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801937e:	d213      	bcs.n	80193a8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8019380:	4643      	mov	r3, r8
 8019382:	4639      	mov	r1, r7
 8019384:	4620      	mov	r0, r4
 8019386:	f7ff fe39 	bl	8018ffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 801938a:	6030      	str	r0, [r6, #0]
 801938c:	6833      	ldr	r3, [r6, #0]
 801938e:	b143      	cbz	r3, 80193a2 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8019390:	7b5a      	ldrb	r2, [r3, #13]
 8019392:	7a9b      	ldrb	r3, [r3, #10]
 8019394:	0052      	lsls	r2, r2, #1
 8019396:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 801939a:	4313      	orrs	r3, r2
 801939c:	bf0c      	ite	eq
 801939e:	2301      	moveq	r3, #1
 80193a0:	2300      	movne	r3, #0
 80193a2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 80193a6:	e7dc      	b.n	8019362 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 80193a8:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 80193ac:	b29b      	uxth	r3, r3
 80193ae:	2b7f      	cmp	r3, #127	@ 0x7f
 80193b0:	d804      	bhi.n	80193bc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 80193b2:	4639      	mov	r1, r7
 80193b4:	4620      	mov	r0, r4
 80193b6:	f7ff fce7 	bl	8018d88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 80193ba:	e7e6      	b.n	801938a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 80193bc:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	d0e3      	beq.n	801938c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80193c4:	f640 1302 	movw	r3, #2306	@ 0x902
 80193c8:	429d      	cmp	r5, r3
 80193ca:	d1df      	bne.n	801938c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 80193cc:	4601      	mov	r1, r0
 80193ce:	4620      	mov	r0, r4
 80193d0:	f7ff fcab 	bl	8018d2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 80193d4:	e7d9      	b.n	801938a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

080193d6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh>:
 80193d6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80193da:	461e      	mov	r6, r3
 80193dc:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80193de:	4604      	mov	r4, r0
 80193e0:	4617      	mov	r7, r2
 80193e2:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 80193e6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80193ea:	f7ea ffbb 	bl	8004364 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 80193ee:	4605      	mov	r5, r0
 80193f0:	b918      	cbnz	r0, 80193fa <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x24>
 80193f2:	6030      	str	r0, [r6, #0]
 80193f4:	4628      	mov	r0, r5
 80193f6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80193fa:	683b      	ldr	r3, [r7, #0]
 80193fc:	4601      	mov	r1, r0
 80193fe:	4638      	mov	r0, r7
 8019400:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8019404:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 8019408:	47c8      	blx	r9
 801940a:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 801940e:	4602      	mov	r2, r0
 8019410:	6030      	str	r0, [r6, #0]
 8019412:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019416:	d213      	bcs.n	8019440 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x6a>
 8019418:	4643      	mov	r3, r8
 801941a:	4639      	mov	r1, r7
 801941c:	4620      	mov	r0, r4
 801941e:	f7ff fded 	bl	8018ffc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8019422:	6030      	str	r0, [r6, #0]
 8019424:	6833      	ldr	r3, [r6, #0]
 8019426:	b143      	cbz	r3, 801943a <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x64>
 8019428:	7b5a      	ldrb	r2, [r3, #13]
 801942a:	7a9b      	ldrb	r3, [r3, #10]
 801942c:	0052      	lsls	r2, r2, #1
 801942e:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8019432:	4313      	orrs	r3, r2
 8019434:	bf0c      	ite	eq
 8019436:	2301      	moveq	r3, #1
 8019438:	2300      	movne	r3, #0
 801943a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 801943e:	e7d9      	b.n	80193f4 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x1e>
 8019440:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8019444:	b29b      	uxth	r3, r3
 8019446:	2b7f      	cmp	r3, #127	@ 0x7f
 8019448:	d804      	bhi.n	8019454 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x7e>
 801944a:	4639      	mov	r1, r7
 801944c:	4620      	mov	r0, r4
 801944e:	f7ff fc9b 	bl	8018d88 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8019452:	e7e6      	b.n	8019422 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>
 8019454:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8019458:	2b00      	cmp	r3, #0
 801945a:	d0e3      	beq.n	8019424 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 801945c:	f640 1302 	movw	r3, #2306	@ 0x902
 8019460:	429d      	cmp	r5, r3
 8019462:	d1df      	bne.n	8019424 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4e>
 8019464:	4601      	mov	r1, r0
 8019466:	4620      	mov	r0, r4
 8019468:	f7ff fc5f 	bl	8018d2a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 801946c:	e7d9      	b.n	8019422 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeERPKhRh+0x4c>

0801946e <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 801946e:	b510      	push	{r4, lr}
 8019470:	4604      	mov	r4, r0
 8019472:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8019476:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8019478:	b1e1      	cbz	r1, 80194b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 801947a:	2b0a      	cmp	r3, #10
 801947c:	d02d      	beq.n	80194da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 801947e:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8019480:	3901      	subs	r1, #1
 8019482:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8019486:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8019488:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 801948c:	1c51      	adds	r1, r2, #1
 801948e:	b289      	uxth	r1, r1
 8019490:	2901      	cmp	r1, #1
 8019492:	bf8a      	itet	hi
 8019494:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8019498:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 801949a:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 801949c:	1c5a      	adds	r2, r3, #1
 801949e:	8722      	strh	r2, [r4, #56]	@ 0x38
 80194a0:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80194a2:	4413      	add	r3, r2
 80194a4:	b29b      	uxth	r3, r3
 80194a6:	2b09      	cmp	r3, #9
 80194a8:	bf88      	it	hi
 80194aa:	3b0a      	subhi	r3, #10
 80194ac:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80194b0:	8458      	strh	r0, [r3, #34]	@ 0x22
 80194b2:	e7de      	b.n	8019472 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 80194b4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80194b6:	2b0a      	cmp	r3, #10
 80194b8:	d00f      	beq.n	80194da <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 80194ba:	4620      	mov	r0, r4
 80194bc:	f7ff fbe3 	bl	8018c86 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 80194c0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 80194c2:	1c5a      	adds	r2, r3, #1
 80194c4:	8722      	strh	r2, [r4, #56]	@ 0x38
 80194c6:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 80194c8:	4413      	add	r3, r2
 80194ca:	b29b      	uxth	r3, r3
 80194cc:	2b09      	cmp	r3, #9
 80194ce:	bf88      	it	hi
 80194d0:	3b0a      	subhi	r3, #10
 80194d2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80194d6:	8458      	strh	r0, [r3, #34]	@ 0x22
 80194d8:	e7ec      	b.n	80194b4 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 80194da:	bd10      	pop	{r4, pc}

080194dc <_ZN8touchgfx12TextProvider11getNextCharEv>:
 80194dc:	b538      	push	{r3, r4, r5, lr}
 80194de:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 80194e0:	4604      	mov	r4, r0
 80194e2:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 80194e6:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 80194e8:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 80194ea:	3a01      	subs	r2, #1
 80194ec:	8702      	strh	r2, [r0, #56]	@ 0x38
 80194ee:	1c5a      	adds	r2, r3, #1
 80194f0:	b292      	uxth	r2, r2
 80194f2:	2a09      	cmp	r2, #9
 80194f4:	bf8a      	itet	hi
 80194f6:	3b09      	subhi	r3, #9
 80194f8:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 80194fa:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 80194fc:	f7ff ffb7 	bl	801946e <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8019500:	8c23      	ldrh	r3, [r4, #32]
 8019502:	2b01      	cmp	r3, #1
 8019504:	bf9c      	itt	ls
 8019506:	3301      	addls	r3, #1
 8019508:	8423      	strhls	r3, [r4, #32]
 801950a:	8be3      	ldrh	r3, [r4, #30]
 801950c:	b90b      	cbnz	r3, 8019512 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 801950e:	2302      	movs	r3, #2
 8019510:	83e3      	strh	r3, [r4, #30]
 8019512:	8be3      	ldrh	r3, [r4, #30]
 8019514:	4628      	mov	r0, r5
 8019516:	3b01      	subs	r3, #1
 8019518:	b29b      	uxth	r3, r3
 801951a:	83e3      	strh	r3, [r4, #30]
 801951c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8019520:	8365      	strh	r5, [r4, #26]
 8019522:	bd38      	pop	{r3, r4, r5, pc}

08019524 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8019524:	428a      	cmp	r2, r1
 8019526:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801952a:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 801952c:	d932      	bls.n	8019594 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 801952e:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8019530:	1a54      	subs	r4, r2, r1
 8019532:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8019536:	19ee      	adds	r6, r5, r7
 8019538:	fa1f fe84 	uxth.w	lr, r4
 801953c:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8019540:	3e01      	subs	r6, #1
 8019542:	b2b4      	uxth	r4, r6
 8019544:	eba4 090e 	sub.w	r9, r4, lr
 8019548:	fa1f f989 	uxth.w	r9, r9
 801954c:	2c09      	cmp	r4, #9
 801954e:	4626      	mov	r6, r4
 8019550:	bf88      	it	hi
 8019552:	f1a4 060a 	subhi.w	r6, r4, #10
 8019556:	f1bc 0f00 	cmp.w	ip, #0
 801955a:	f104 34ff 	add.w	r4, r4, #4294967295
 801955e:	bf08      	it	eq
 8019560:	f04f 0c02 	moveq.w	ip, #2
 8019564:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8019568:	b2a4      	uxth	r4, r4
 801956a:	f10c 3cff 	add.w	ip, ip, #4294967295
 801956e:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8019572:	454c      	cmp	r4, r9
 8019574:	fa1f fc8c 	uxth.w	ip, ip
 8019578:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 801957c:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8019580:	d1e4      	bne.n	801954c <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8019582:	eba5 050e 	sub.w	r5, r5, lr
 8019586:	eb0e 0408 	add.w	r4, lr, r8
 801958a:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 801958e:	8705      	strh	r5, [r0, #56]	@ 0x38
 8019590:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8019594:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8019596:	250a      	movs	r5, #10
 8019598:	1a64      	subs	r4, r4, r1
 801959a:	4439      	add	r1, r7
 801959c:	b289      	uxth	r1, r1
 801959e:	8704      	strh	r4, [r0, #56]	@ 0x38
 80195a0:	2909      	cmp	r1, #9
 80195a2:	bf88      	it	hi
 80195a4:	390a      	subhi	r1, #10
 80195a6:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80195a8:	b18a      	cbz	r2, 80195ce <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 80195aa:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 80195ac:	3a01      	subs	r2, #1
 80195ae:	3101      	adds	r1, #1
 80195b0:	b292      	uxth	r2, r2
 80195b2:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 80195b6:	8701      	strh	r1, [r0, #56]	@ 0x38
 80195b8:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80195ba:	b901      	cbnz	r1, 80195be <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 80195bc:	86c5      	strh	r5, [r0, #54]	@ 0x36
 80195be:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 80195c0:	3901      	subs	r1, #1
 80195c2:	b289      	uxth	r1, r1
 80195c4:	86c1      	strh	r1, [r0, #54]	@ 0x36
 80195c6:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 80195ca:	844c      	strh	r4, [r1, #34]	@ 0x22
 80195cc:	e7ec      	b.n	80195a8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 80195ce:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80195d2:	f7ff bf4c 	b.w	801946e <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080195d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 80195d6:	b570      	push	{r4, r5, r6, lr}
 80195d8:	2500      	movs	r5, #0
 80195da:	4295      	cmp	r5, r2
 80195dc:	d011      	beq.n	8019602 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 80195de:	8bc4      	ldrh	r4, [r0, #30]
 80195e0:	f831 6b02 	ldrh.w	r6, [r1], #2
 80195e4:	4414      	add	r4, r2
 80195e6:	3c01      	subs	r4, #1
 80195e8:	1b64      	subs	r4, r4, r5
 80195ea:	b2a4      	uxth	r4, r4
 80195ec:	2c01      	cmp	r4, #1
 80195ee:	bf88      	it	hi
 80195f0:	3c02      	subhi	r4, #2
 80195f2:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 80195f6:	8b64      	ldrh	r4, [r4, #26]
 80195f8:	42b4      	cmp	r4, r6
 80195fa:	d117      	bne.n	801962c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 80195fc:	3501      	adds	r5, #1
 80195fe:	b2ad      	uxth	r5, r5
 8019600:	e7eb      	b.n	80195da <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8019602:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8019606:	2400      	movs	r4, #0
 8019608:	4413      	add	r3, r2
 801960a:	b2a2      	uxth	r2, r4
 801960c:	429a      	cmp	r2, r3
 801960e:	da0f      	bge.n	8019630 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8019610:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8019612:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8019616:	3401      	adds	r4, #1
 8019618:	4432      	add	r2, r6
 801961a:	b292      	uxth	r2, r2
 801961c:	2a09      	cmp	r2, #9
 801961e:	bf88      	it	hi
 8019620:	3a0a      	subhi	r2, #10
 8019622:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8019626:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8019628:	42aa      	cmp	r2, r5
 801962a:	d0ee      	beq.n	801960a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 801962c:	2000      	movs	r0, #0
 801962e:	bd70      	pop	{r4, r5, r6, pc}
 8019630:	2001      	movs	r0, #1
 8019632:	e7fc      	b.n	801962e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08019634 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8019634:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019638:	4605      	mov	r5, r0
 801963a:	4616      	mov	r6, r2
 801963c:	1c8c      	adds	r4, r1, #2
 801963e:	8809      	ldrh	r1, [r1, #0]
 8019640:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8019644:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8019648:	42b3      	cmp	r3, r6
 801964a:	d124      	bne.n	8019696 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 801964c:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8019650:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8019654:	f001 070f 	and.w	r7, r1, #15
 8019658:	4652      	mov	r2, sl
 801965a:	f8cd 8000 	str.w	r8, [sp]
 801965e:	464b      	mov	r3, r9
 8019660:	4621      	mov	r1, r4
 8019662:	4628      	mov	r0, r5
 8019664:	f7ff ffb7 	bl	80195d6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8019668:	4683      	mov	fp, r0
 801966a:	b168      	cbz	r0, 8019688 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 801966c:	eb0a 0109 	add.w	r1, sl, r9
 8019670:	463a      	mov	r2, r7
 8019672:	4628      	mov	r0, r5
 8019674:	4441      	add	r1, r8
 8019676:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 801967a:	4649      	mov	r1, r9
 801967c:	f7ff ff52 	bl	8019524 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8019680:	4658      	mov	r0, fp
 8019682:	b003      	add	sp, #12
 8019684:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019688:	eb07 010a 	add.w	r1, r7, sl
 801968c:	4449      	add	r1, r9
 801968e:	4441      	add	r1, r8
 8019690:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8019694:	e7d2      	b.n	801963c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8019696:	f04f 0b00 	mov.w	fp, #0
 801969a:	e7f1      	b.n	8019680 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

0801969c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 801969c:	b570      	push	{r4, r5, r6, lr}
 801969e:	8810      	ldrh	r0, [r2, #0]
 80196a0:	4298      	cmp	r0, r3
 80196a2:	d817      	bhi.n	80196d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80196a4:	1e48      	subs	r0, r1, #1
 80196a6:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 80196aa:	4298      	cmp	r0, r3
 80196ac:	d312      	bcc.n	80196d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80196ae:	2400      	movs	r4, #0
 80196b0:	428c      	cmp	r4, r1
 80196b2:	d20f      	bcs.n	80196d4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 80196b4:	1860      	adds	r0, r4, r1
 80196b6:	1040      	asrs	r0, r0, #1
 80196b8:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 80196bc:	0085      	lsls	r5, r0, #2
 80196be:	42b3      	cmp	r3, r6
 80196c0:	d902      	bls.n	80196c8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 80196c2:	3001      	adds	r0, #1
 80196c4:	b284      	uxth	r4, r0
 80196c6:	e7f3      	b.n	80196b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80196c8:	d201      	bcs.n	80196ce <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 80196ca:	b281      	uxth	r1, r0
 80196cc:	e7f0      	b.n	80196b0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 80196ce:	442a      	add	r2, r5
 80196d0:	8850      	ldrh	r0, [r2, #2]
 80196d2:	bd70      	pop	{r4, r5, r6, pc}
 80196d4:	2000      	movs	r0, #0
 80196d6:	e7fc      	b.n	80196d2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

080196d8 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 80196d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80196dc:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 80196de:	4604      	mov	r4, r0
 80196e0:	260b      	movs	r6, #11
 80196e2:	886f      	ldrh	r7, [r5, #2]
 80196e4:	087f      	lsrs	r7, r7, #1
 80196e6:	3e01      	subs	r6, #1
 80196e8:	d013      	beq.n	8019712 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 80196ea:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 80196ec:	462a      	mov	r2, r5
 80196ee:	4639      	mov	r1, r7
 80196f0:	4620      	mov	r0, r4
 80196f2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80196f6:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 80196fa:	4643      	mov	r3, r8
 80196fc:	f7ff ffce 	bl	801969c <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8019700:	b138      	cbz	r0, 8019712 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8019702:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8019706:	4642      	mov	r2, r8
 8019708:	4620      	mov	r0, r4
 801970a:	f7ff ff93 	bl	8019634 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 801970e:	2800      	cmp	r0, #0
 8019710:	d1e9      	bne.n	80196e6 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8019712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08019718 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8019718:	b570      	push	{r4, r5, r6, lr}
 801971a:	694a      	ldr	r2, [r1, #20]
 801971c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 801971e:	684b      	ldr	r3, [r1, #4]
 8019720:	1b54      	subs	r4, r2, r5
 8019722:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8019724:	f000 8106 	beq.w	8019934 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8019728:	1b9b      	subs	r3, r3, r6
 801972a:	d003      	beq.n	8019734 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801972c:	4363      	muls	r3, r4
 801972e:	2210      	movs	r2, #16
 8019730:	fb93 f3f2 	sdiv	r3, r3, r2
 8019734:	680c      	ldr	r4, [r1, #0]
 8019736:	698a      	ldr	r2, [r1, #24]
 8019738:	1b65      	subs	r5, r4, r5
 801973a:	f000 80fd 	beq.w	8019938 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 801973e:	1b92      	subs	r2, r2, r6
 8019740:	d003      	beq.n	801974a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8019742:	436a      	muls	r2, r5
 8019744:	2410      	movs	r4, #16
 8019746:	fb92 f2f4 	sdiv	r2, r2, r4
 801974a:	1a9b      	subs	r3, r3, r2
 801974c:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8019974 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8019750:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8019754:	460a      	mov	r2, r1
 8019756:	ee07 3a90 	vmov	s15, r3
 801975a:	f100 040c 	add.w	r4, r0, #12
 801975e:	4603      	mov	r3, r0
 8019760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019764:	ee67 7a84 	vmul.f32	s15, s15, s8
 8019768:	ee87 3a27 	vdiv.f32	s6, s14, s15
 801976c:	eeb1 6a43 	vneg.f32	s12, s6
 8019770:	edd2 7a02 	vldr	s15, [r2, #8]
 8019774:	3214      	adds	r2, #20
 8019776:	eec7 6a27 	vdiv.f32	s13, s14, s15
 801977a:	ece3 6a01 	vstmia	r3!, {s13}
 801977e:	429c      	cmp	r4, r3
 8019780:	ed52 7a02 	vldr	s15, [r2, #-8]
 8019784:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019788:	edc3 7a02 	vstr	s15, [r3, #8]
 801978c:	ed52 7a01 	vldr	s15, [r2, #-4]
 8019790:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019794:	edc3 7a05 	vstr	s15, [r3, #20]
 8019798:	d1ea      	bne.n	8019770 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 801979a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801979c:	698b      	ldr	r3, [r1, #24]
 801979e:	edd0 4a02 	vldr	s9, [r0, #8]
 80197a2:	1a9b      	subs	r3, r3, r2
 80197a4:	edd0 3a00 	vldr	s7, [r0]
 80197a8:	edd0 6a01 	vldr	s13, [r0, #4]
 80197ac:	ee07 3a90 	vmov	s15, r3
 80197b0:	684b      	ldr	r3, [r1, #4]
 80197b2:	ee76 6ae4 	vsub.f32	s13, s13, s9
 80197b6:	ed90 5a05 	vldr	s10, [r0, #20]
 80197ba:	1a9b      	subs	r3, r3, r2
 80197bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80197c0:	ee73 4ae4 	vsub.f32	s9, s7, s9
 80197c4:	ed90 2a03 	vldr	s4, [r0, #12]
 80197c8:	ee07 3a10 	vmov	s14, r3
 80197cc:	edd0 5a04 	vldr	s11, [r0, #16]
 80197d0:	ee67 7a84 	vmul.f32	s15, s15, s8
 80197d4:	ed90 1a07 	vldr	s2, [r0, #28]
 80197d8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80197dc:	edd0 2a06 	vldr	s5, [r0, #24]
 80197e0:	ee75 5ac5 	vsub.f32	s11, s11, s10
 80197e4:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 80197e8:	ee27 7a04 	vmul.f32	s14, s14, s8
 80197ec:	ee32 5a45 	vsub.f32	s10, s4, s10
 80197f0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80197f4:	ee67 7a83 	vmul.f32	s15, s15, s6
 80197f8:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 80197fc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80197fe:	694a      	ldr	r2, [r1, #20]
 8019800:	1b13      	subs	r3, r2, r4
 8019802:	ee07 3a10 	vmov	s14, r3
 8019806:	680b      	ldr	r3, [r1, #0]
 8019808:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801980c:	1b1b      	subs	r3, r3, r4
 801980e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019812:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8019816:	ee07 3a10 	vmov	s14, r3
 801981a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801981e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019822:	eee6 4a87 	vfma.f32	s9, s13, s14
 8019826:	ee64 4a86 	vmul.f32	s9, s9, s12
 801982a:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801982e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019830:	698b      	ldr	r3, [r1, #24]
 8019832:	1a9b      	subs	r3, r3, r2
 8019834:	ee06 3a90 	vmov	s13, r3
 8019838:	684b      	ldr	r3, [r1, #4]
 801983a:	1a9b      	subs	r3, r3, r2
 801983c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019840:	ee07 3a10 	vmov	s14, r3
 8019844:	ee66 6a84 	vmul.f32	s13, s13, s8
 8019848:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801984c:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8019850:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019854:	eee5 6a87 	vfma.f32	s13, s11, s14
 8019858:	ee66 6a83 	vmul.f32	s13, s13, s6
 801985c:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8019860:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8019862:	694a      	ldr	r2, [r1, #20]
 8019864:	1b13      	subs	r3, r2, r4
 8019866:	ee07 3a10 	vmov	s14, r3
 801986a:	680b      	ldr	r3, [r1, #0]
 801986c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019870:	1b1b      	subs	r3, r3, r4
 8019872:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019876:	ee25 5a47 	vnmul.f32	s10, s10, s14
 801987a:	ee07 3a10 	vmov	s14, r3
 801987e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019882:	ee27 7a04 	vmul.f32	s14, s14, s8
 8019886:	eea5 5a87 	vfma.f32	s10, s11, s14
 801988a:	edd0 5a08 	vldr	s11, [r0, #32]
 801988e:	ee31 1a65 	vsub.f32	s2, s2, s11
 8019892:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8019896:	ee25 5a06 	vmul.f32	s10, s10, s12
 801989a:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801989e:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80198a0:	698b      	ldr	r3, [r1, #24]
 80198a2:	1a9b      	subs	r3, r3, r2
 80198a4:	ee07 3a10 	vmov	s14, r3
 80198a8:	684b      	ldr	r3, [r1, #4]
 80198aa:	1a9b      	subs	r3, r3, r2
 80198ac:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80198b0:	ee01 3a90 	vmov	s3, r3
 80198b4:	ee27 7a04 	vmul.f32	s14, s14, s8
 80198b8:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80198bc:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80198c0:	ee61 1a84 	vmul.f32	s3, s3, s8
 80198c4:	eea1 7a21 	vfma.f32	s14, s2, s3
 80198c8:	ee27 7a03 	vmul.f32	s14, s14, s6
 80198cc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80198d0:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80198d2:	694a      	ldr	r2, [r1, #20]
 80198d4:	1b13      	subs	r3, r2, r4
 80198d6:	ee03 3a10 	vmov	s6, r3
 80198da:	680b      	ldr	r3, [r1, #0]
 80198dc:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80198e0:	1b1b      	subs	r3, r3, r4
 80198e2:	ee23 3a04 	vmul.f32	s6, s6, s8
 80198e6:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80198ea:	ee03 3a10 	vmov	s6, r3
 80198ee:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80198f2:	ee23 4a04 	vmul.f32	s8, s6, s8
 80198f6:	eee1 5a04 	vfma.f32	s11, s2, s8
 80198fa:	ee25 6a86 	vmul.f32	s12, s11, s12
 80198fe:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8019902:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8019906:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801990a:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801990e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019912:	dd13      	ble.n	801993c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8019914:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019918:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 801991c:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801991e:	eee3 7a87 	vfma.f32	s15, s7, s14
 8019922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8019926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801992a:	dd15      	ble.n	8019958 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 801992c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019930:	6403      	str	r3, [r0, #64]	@ 0x40
 8019932:	bd70      	pop	{r4, r5, r6, pc}
 8019934:	4623      	mov	r3, r4
 8019936:	e6fd      	b.n	8019734 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8019938:	462a      	mov	r2, r5
 801993a:	e706      	b.n	801974a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 801993c:	d502      	bpl.n	8019944 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801993e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8019942:	e7e9      	b.n	8019918 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8019944:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8019948:	eea3 2a85 	vfma.f32	s4, s7, s10
 801994c:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8019950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019954:	dade      	bge.n	8019914 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8019956:	e7f2      	b.n	801993e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8019958:	d502      	bpl.n	8019960 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801995a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801995e:	e7e7      	b.n	8019930 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8019960:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8019964:	eee3 4a86 	vfma.f32	s9, s7, s12
 8019968:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 801996c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019970:	dadc      	bge.n	801992c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8019972:	e7f2      	b.n	801995a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8019974:	3d800000 	.word	0x3d800000

08019978 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8019978:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801997c:	2714      	movs	r7, #20
 801997e:	435f      	muls	r7, r3
 8019980:	eb02 0c07 	add.w	ip, r2, r7
 8019984:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8019988:	f115 0e0f 	adds.w	lr, r5, #15
 801998c:	f100 80a2 	bmi.w	8019ad4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 8019990:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8019994:	9c08      	ldr	r4, [sp, #32]
 8019996:	2614      	movs	r6, #20
 8019998:	f8c0 e014 	str.w	lr, [r0, #20]
 801999c:	4366      	muls	r6, r4
 801999e:	eb02 0806 	add.w	r8, r2, r6
 80199a2:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80199a6:	f115 040f 	adds.w	r4, r5, #15
 80199aa:	f100 809f 	bmi.w	8019aec <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80199ae:	1124      	asrs	r4, r4, #4
 80199b0:	eba4 040e 	sub.w	r4, r4, lr
 80199b4:	6184      	str	r4, [r0, #24]
 80199b6:	2c00      	cmp	r4, #0
 80199b8:	f000 808a 	beq.w	8019ad0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80199bc:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80199c0:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80199c4:	5995      	ldr	r5, [r2, r6]
 80199c6:	eba4 0809 	sub.w	r8, r4, r9
 80199ca:	59d4      	ldr	r4, [r2, r7]
 80199cc:	eba5 0a04 	sub.w	sl, r5, r4
 80199d0:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80199d4:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80199d8:	fb0e fe05 	mul.w	lr, lr, r5
 80199dc:	fb0a ee19 	mls	lr, sl, r9, lr
 80199e0:	fb08 e404 	mla	r4, r8, r4, lr
 80199e4:	3c01      	subs	r4, #1
 80199e6:	19a4      	adds	r4, r4, r6
 80199e8:	f100 808c 	bmi.w	8019b04 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80199ec:	fb94 fef6 	sdiv	lr, r4, r6
 80199f0:	fb06 441e 	mls	r4, r6, lr, r4
 80199f4:	f8c0 e000 	str.w	lr, [r0]
 80199f8:	6104      	str	r4, [r0, #16]
 80199fa:	2d00      	cmp	r5, #0
 80199fc:	f2c0 8095 	blt.w	8019b2a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8019a00:	fb95 f4f6 	sdiv	r4, r5, r6
 8019a04:	fb06 5514 	mls	r5, r6, r4, r5
 8019a08:	6044      	str	r4, [r0, #4]
 8019a0a:	6085      	str	r5, [r0, #8]
 8019a0c:	60c6      	str	r6, [r0, #12]
 8019a0e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019a12:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8019a16:	6945      	ldr	r5, [r0, #20]
 8019a18:	59d2      	ldr	r2, [r2, r7]
 8019a1a:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8019a1e:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8019b4c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8019a22:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019a26:	ee07 4a10 	vmov	s14, r4
 8019a2a:	6804      	ldr	r4, [r0, #0]
 8019a2c:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8019a30:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8019a34:	ee07 2a90 	vmov	s15, r2
 8019a38:	ee27 7a26 	vmul.f32	s14, s14, s13
 8019a3c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8019a40:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019a44:	edd3 6a00 	vldr	s13, [r3]
 8019a48:	eee6 6a07 	vfma.f32	s13, s12, s14
 8019a4c:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8019a50:	eee6 6a27 	vfma.f32	s13, s12, s15
 8019a54:	edc0 6a07 	vstr	s13, [r0, #28]
 8019a58:	edd0 6a01 	vldr	s13, [r0, #4]
 8019a5c:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8019a60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8019a64:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8019a68:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019a6c:	ed80 6a08 	vstr	s12, [r0, #32]
 8019a70:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8019a72:	6242      	str	r2, [r0, #36]	@ 0x24
 8019a74:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8019a78:	ed93 6a03 	vldr	s12, [r3, #12]
 8019a7c:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019a80:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019a84:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8019a88:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8019a8c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8019a90:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8019a94:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8019a98:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8019a9c:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8019a9e:	6302      	str	r2, [r0, #48]	@ 0x30
 8019aa0:	ed93 6a06 	vldr	s12, [r3, #24]
 8019aa4:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 8019aa8:	eea5 6a87 	vfma.f32	s12, s11, s14
 8019aac:	eeb0 7a46 	vmov.f32	s14, s12
 8019ab0:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 8019ab4:	eea6 7a27 	vfma.f32	s14, s12, s15
 8019ab8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8019abc:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 8019ac0:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 8019ac4:	eee6 7a87 	vfma.f32	s15, s13, s14
 8019ac8:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 8019acc:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8019ace:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8019ad0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019ad4:	2410      	movs	r4, #16
 8019ad6:	f1c5 0501 	rsb	r5, r5, #1
 8019ada:	fb9e fef4 	sdiv	lr, lr, r4
 8019ade:	f015 050f 	ands.w	r5, r5, #15
 8019ae2:	bf18      	it	ne
 8019ae4:	2501      	movne	r5, #1
 8019ae6:	ebae 0e05 	sub.w	lr, lr, r5
 8019aea:	e753      	b.n	8019994 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8019aec:	f04f 0910 	mov.w	r9, #16
 8019af0:	f1c5 0501 	rsb	r5, r5, #1
 8019af4:	fb94 f4f9 	sdiv	r4, r4, r9
 8019af8:	f015 050f 	ands.w	r5, r5, #15
 8019afc:	bf18      	it	ne
 8019afe:	2501      	movne	r5, #1
 8019b00:	1b64      	subs	r4, r4, r5
 8019b02:	e755      	b.n	80199b0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8019b04:	4264      	negs	r4, r4
 8019b06:	fb94 fef6 	sdiv	lr, r4, r6
 8019b0a:	f1ce 0800 	rsb	r8, lr, #0
 8019b0e:	fb06 441e 	mls	r4, r6, lr, r4
 8019b12:	f8c0 8000 	str.w	r8, [r0]
 8019b16:	6104      	str	r4, [r0, #16]
 8019b18:	2c00      	cmp	r4, #0
 8019b1a:	f43f af6e 	beq.w	80199fa <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8019b1e:	ea6f 0e0e 	mvn.w	lr, lr
 8019b22:	1b34      	subs	r4, r6, r4
 8019b24:	f8c0 e000 	str.w	lr, [r0]
 8019b28:	e766      	b.n	80199f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8019b2a:	426d      	negs	r5, r5
 8019b2c:	fb95 f4f6 	sdiv	r4, r5, r6
 8019b30:	f1c4 0e00 	rsb	lr, r4, #0
 8019b34:	fb06 5514 	mls	r5, r6, r4, r5
 8019b38:	f8c0 e004 	str.w	lr, [r0, #4]
 8019b3c:	6085      	str	r5, [r0, #8]
 8019b3e:	2d00      	cmp	r5, #0
 8019b40:	f43f af64 	beq.w	8019a0c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8019b44:	43e4      	mvns	r4, r4
 8019b46:	1b75      	subs	r5, r6, r5
 8019b48:	6044      	str	r4, [r0, #4]
 8019b4a:	e75e      	b.n	8019a0a <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8019b4c:	3d800000 	.word	0x3d800000

08019b50 <_ZN8touchgfx7Unicode6strlenEPKt>:
 8019b50:	4602      	mov	r2, r0
 8019b52:	b148      	cbz	r0, 8019b68 <_ZN8touchgfx7Unicode6strlenEPKt+0x18>
 8019b54:	2300      	movs	r3, #0
 8019b56:	b298      	uxth	r0, r3
 8019b58:	3301      	adds	r3, #1
 8019b5a:	eb02 0143 	add.w	r1, r2, r3, lsl #1
 8019b5e:	f831 1c02 	ldrh.w	r1, [r1, #-2]
 8019b62:	2900      	cmp	r1, #0
 8019b64:	d1f7      	bne.n	8019b56 <_ZN8touchgfx7Unicode6strlenEPKt+0x6>
 8019b66:	4770      	bx	lr
 8019b68:	4770      	bx	lr

08019b6a <_ZN8touchgfx7Unicode7strncpyEPtPKtt>:
 8019b6a:	b530      	push	{r4, r5, lr}
 8019b6c:	4604      	mov	r4, r0
 8019b6e:	b161      	cbz	r1, 8019b8a <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x20>
 8019b70:	b150      	cbz	r0, 8019b88 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 8019b72:	2300      	movs	r3, #0
 8019b74:	b298      	uxth	r0, r3
 8019b76:	4290      	cmp	r0, r2
 8019b78:	d206      	bcs.n	8019b88 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>
 8019b7a:	f831 5013 	ldrh.w	r5, [r1, r3, lsl #1]
 8019b7e:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019b82:	3301      	adds	r3, #1
 8019b84:	2d00      	cmp	r5, #0
 8019b86:	d1f5      	bne.n	8019b74 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0xa>
 8019b88:	bd30      	pop	{r4, r5, pc}
 8019b8a:	4608      	mov	r0, r1
 8019b8c:	e7fc      	b.n	8019b88 <_ZN8touchgfx7Unicode7strncpyEPtPKtt+0x1e>

08019b8e <_ZN8touchgfx7Unicode7strncpyEPtPKct>:
 8019b8e:	b530      	push	{r4, r5, lr}
 8019b90:	4604      	mov	r4, r0
 8019b92:	b159      	cbz	r1, 8019bac <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1e>
 8019b94:	b148      	cbz	r0, 8019baa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019b96:	2300      	movs	r3, #0
 8019b98:	b298      	uxth	r0, r3
 8019b9a:	4282      	cmp	r2, r0
 8019b9c:	d905      	bls.n	8019baa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>
 8019b9e:	5ccd      	ldrb	r5, [r1, r3]
 8019ba0:	f824 5013 	strh.w	r5, [r4, r3, lsl #1]
 8019ba4:	3301      	adds	r3, #1
 8019ba6:	2d00      	cmp	r5, #0
 8019ba8:	d1f6      	bne.n	8019b98 <_ZN8touchgfx7Unicode7strncpyEPtPKct+0xa>
 8019baa:	bd30      	pop	{r4, r5, pc}
 8019bac:	4608      	mov	r0, r1
 8019bae:	e7fc      	b.n	8019baa <_ZN8touchgfx7Unicode7strncpyEPtPKct+0x1c>

08019bb0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>:
 8019bb0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019bb2:	b08b      	sub	sp, #44	@ 0x2c
 8019bb4:	468c      	mov	ip, r1
 8019bb6:	4604      	mov	r4, r0
 8019bb8:	2100      	movs	r1, #0
 8019bba:	261f      	movs	r6, #31
 8019bbc:	af01      	add	r7, sp, #4
 8019bbe:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019bc2:	1e71      	subs	r1, r6, #1
 8019bc4:	fb94 fef3 	sdiv	lr, r4, r3
 8019bc8:	fb03 441e 	mls	r4, r3, lr, r4
 8019bcc:	ea84 75e4 	eor.w	r5, r4, r4, asr #31
 8019bd0:	eba5 75e4 	sub.w	r5, r5, r4, asr #31
 8019bd4:	b2ec      	uxtb	r4, r5
 8019bd6:	2d09      	cmp	r5, #9
 8019bd8:	bfd4      	ite	le
 8019bda:	3430      	addle	r4, #48	@ 0x30
 8019bdc:	3457      	addgt	r4, #87	@ 0x57
 8019bde:	b2e4      	uxtb	r4, r4
 8019be0:	55bc      	strb	r4, [r7, r6]
 8019be2:	4674      	mov	r4, lr
 8019be4:	b974      	cbnz	r4, 8019c04 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x54>
 8019be6:	2800      	cmp	r0, #0
 8019be8:	da05      	bge.n	8019bf6 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x46>
 8019bea:	ab0a      	add	r3, sp, #40	@ 0x28
 8019bec:	4419      	add	r1, r3
 8019bee:	232d      	movs	r3, #45	@ 0x2d
 8019bf0:	f801 3c24 	strb.w	r3, [r1, #-36]
 8019bf4:	1eb1      	subs	r1, r6, #2
 8019bf6:	3101      	adds	r1, #1
 8019bf8:	4660      	mov	r0, ip
 8019bfa:	4439      	add	r1, r7
 8019bfc:	f7ff ffc7 	bl	8019b8e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019c00:	b00b      	add	sp, #44	@ 0x2c
 8019c02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c04:	460e      	mov	r6, r1
 8019c06:	e7dc      	b.n	8019bc2 <_ZN8touchgfx7Unicode4itoaElPtti.part.2+0x12>

08019c08 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>:
 8019c08:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c0a:	468c      	mov	ip, r1
 8019c0c:	b08b      	sub	sp, #44	@ 0x2c
 8019c0e:	2100      	movs	r1, #0
 8019c10:	ae01      	add	r6, sp, #4
 8019c12:	f88d 1024 	strb.w	r1, [sp, #36]	@ 0x24
 8019c16:	211f      	movs	r1, #31
 8019c18:	fbb0 f7f3 	udiv	r7, r0, r3
 8019c1c:	fb03 0517 	mls	r5, r3, r7, r0
 8019c20:	4638      	mov	r0, r7
 8019c22:	b2ec      	uxtb	r4, r5
 8019c24:	2d09      	cmp	r5, #9
 8019c26:	bfd4      	ite	le
 8019c28:	3430      	addle	r4, #48	@ 0x30
 8019c2a:	3457      	addgt	r4, #87	@ 0x57
 8019c2c:	b2e4      	uxtb	r4, r4
 8019c2e:	558c      	strb	r4, [r1, r6]
 8019c30:	1e4c      	subs	r4, r1, #1
 8019c32:	b92f      	cbnz	r7, 8019c40 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x38>
 8019c34:	4431      	add	r1, r6
 8019c36:	4660      	mov	r0, ip
 8019c38:	f7ff ffa9 	bl	8019b8e <_ZN8touchgfx7Unicode7strncpyEPtPKct>
 8019c3c:	b00b      	add	sp, #44	@ 0x2c
 8019c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019c40:	4621      	mov	r1, r4
 8019c42:	e7e9      	b.n	8019c18 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3+0x10>

08019c44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>:
 8019c44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019c48:	b085      	sub	sp, #20
 8019c4a:	4691      	mov	r9, r2
 8019c4c:	6802      	ldr	r2, [r0, #0]
 8019c4e:	4688      	mov	r8, r1
 8019c50:	461c      	mov	r4, r3
 8019c52:	f89d 1040 	ldrb.w	r1, [sp, #64]	@ 0x40
 8019c56:	f89d 3048 	ldrb.w	r3, [sp, #72]	@ 0x48
 8019c5a:	4683      	mov	fp, r0
 8019c5c:	4610      	mov	r0, r2
 8019c5e:	9103      	str	r1, [sp, #12]
 8019c60:	9302      	str	r3, [sp, #8]
 8019c62:	9201      	str	r2, [sp, #4]
 8019c64:	f7ff ff74 	bl	8019b50 <_ZN8touchgfx7Unicode6strlenEPKt>
 8019c68:	f1b8 0f00 	cmp.w	r8, #0
 8019c6c:	bf0c      	ite	eq
 8019c6e:	4684      	moveq	ip, r0
 8019c70:	f100 0c01 	addne.w	ip, r0, #1
 8019c74:	f1b9 0f69 	cmp.w	r9, #105	@ 0x69
 8019c78:	f89d 6038 	ldrb.w	r6, [sp, #56]	@ 0x38
 8019c7c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8019c7e:	fa1f fc8c 	uxth.w	ip, ip
 8019c82:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8019c84:	f8dd a054 	ldr.w	sl, [sp, #84]	@ 0x54
 8019c88:	9903      	ldr	r1, [sp, #12]
 8019c8a:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8019c8e:	d041      	beq.n	8019d14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019c90:	d834      	bhi.n	8019cfc <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xb8>
 8019c92:	f1b9 0f63 	cmp.w	r9, #99	@ 0x63
 8019c96:	d059      	beq.n	8019d4c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x108>
 8019c98:	f1b9 0f64 	cmp.w	r9, #100	@ 0x64
 8019c9c:	d03a      	beq.n	8019d14 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xd0>
 8019c9e:	f1b9 0f58 	cmp.w	r9, #88	@ 0x58
 8019ca2:	d034      	beq.n	8019d0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019ca4:	2400      	movs	r4, #0
 8019ca6:	f8bd 2050 	ldrh.w	r2, [sp, #80]	@ 0x50
 8019caa:	3a01      	subs	r2, #1
 8019cac:	b169      	cbz	r1, 8019cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019cae:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8019cb0:	458c      	cmp	ip, r1
 8019cb2:	da09      	bge.n	8019cc8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019cb4:	eba1 010c 	sub.w	r1, r1, ip
 8019cb8:	b289      	uxth	r1, r1
 8019cba:	b933      	cbnz	r3, 8019cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019cbc:	2e00      	cmp	r6, #0
 8019cbe:	d051      	beq.n	8019d64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019cc0:	2800      	cmp	r0, #0
 8019cc2:	d04f      	beq.n	8019d64 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x120>
 8019cc4:	440c      	add	r4, r1
 8019cc6:	b2a4      	uxth	r4, r4
 8019cc8:	2100      	movs	r1, #0
 8019cca:	682b      	ldr	r3, [r5, #0]
 8019ccc:	4293      	cmp	r3, r2
 8019cce:	da07      	bge.n	8019ce0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019cd0:	f1b8 0f00 	cmp.w	r8, #0
 8019cd4:	d004      	beq.n	8019ce0 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9c>
 8019cd6:	f82a 8013 	strh.w	r8, [sl, r3, lsl #1]
 8019cda:	682b      	ldr	r3, [r5, #0]
 8019cdc:	3301      	adds	r3, #1
 8019cde:	602b      	str	r3, [r5, #0]
 8019ce0:	2730      	movs	r7, #48	@ 0x30
 8019ce2:	2c00      	cmp	r4, #0
 8019ce4:	d04e      	beq.n	8019d84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019ce6:	682e      	ldr	r6, [r5, #0]
 8019ce8:	3c01      	subs	r4, #1
 8019cea:	42b2      	cmp	r2, r6
 8019cec:	b2a4      	uxth	r4, r4
 8019cee:	dd49      	ble.n	8019d84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019cf0:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019cf4:	682b      	ldr	r3, [r5, #0]
 8019cf6:	3301      	adds	r3, #1
 8019cf8:	602b      	str	r3, [r5, #0]
 8019cfa:	e7f2      	b.n	8019ce2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x9e>
 8019cfc:	f1b9 0f73 	cmp.w	r9, #115	@ 0x73
 8019d00:	d01d      	beq.n	8019d3e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xfa>
 8019d02:	f1b9 0f78 	cmp.w	r9, #120	@ 0x78
 8019d06:	d002      	beq.n	8019d0e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xca>
 8019d08:	f1b9 0f6f 	cmp.w	r9, #111	@ 0x6f
 8019d0c:	e7c9      	b.n	8019ca2 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x5e>
 8019d0e:	4684      	mov	ip, r0
 8019d10:	f04f 0800 	mov.w	r8, #0
 8019d14:	2c00      	cmp	r4, #0
 8019d16:	d0c6      	beq.n	8019ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019d18:	b947      	cbnz	r7, 8019d2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019d1a:	2801      	cmp	r0, #1
 8019d1c:	d106      	bne.n	8019d2c <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xe8>
 8019d1e:	8814      	ldrh	r4, [r2, #0]
 8019d20:	2c30      	cmp	r4, #48	@ 0x30
 8019d22:	bf02      	ittt	eq
 8019d24:	3202      	addeq	r2, #2
 8019d26:	4638      	moveq	r0, r7
 8019d28:	f8cb 2000 	streq.w	r2, [fp]
 8019d2c:	45bc      	cmp	ip, r7
 8019d2e:	da14      	bge.n	8019d5a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x116>
 8019d30:	b2bf      	uxth	r7, r7
 8019d32:	eba7 040c 	sub.w	r4, r7, ip
 8019d36:	46bc      	mov	ip, r7
 8019d38:	b2a4      	uxth	r4, r4
 8019d3a:	2600      	movs	r6, #0
 8019d3c:	e7b3      	b.n	8019ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019d3e:	4684      	mov	ip, r0
 8019d40:	b16c      	cbz	r4, 8019d5e <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x11a>
 8019d42:	42b8      	cmp	r0, r7
 8019d44:	dd00      	ble.n	8019d48 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x104>
 8019d46:	b2b8      	uxth	r0, r7
 8019d48:	2400      	movs	r4, #0
 8019d4a:	e003      	b.n	8019d54 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x110>
 8019d4c:	f04f 0c01 	mov.w	ip, #1
 8019d50:	2400      	movs	r4, #0
 8019d52:	4660      	mov	r0, ip
 8019d54:	4626      	mov	r6, r4
 8019d56:	46a0      	mov	r8, r4
 8019d58:	e7a5      	b.n	8019ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019d5a:	2400      	movs	r4, #0
 8019d5c:	e7ed      	b.n	8019d3a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0xf6>
 8019d5e:	4626      	mov	r6, r4
 8019d60:	46a0      	mov	r8, r4
 8019d62:	e7a0      	b.n	8019ca6 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x62>
 8019d64:	2900      	cmp	r1, #0
 8019d66:	d0b0      	beq.n	8019cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019d68:	2720      	movs	r7, #32
 8019d6a:	682e      	ldr	r6, [r5, #0]
 8019d6c:	2900      	cmp	r1, #0
 8019d6e:	d0ac      	beq.n	8019cca <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x86>
 8019d70:	3901      	subs	r1, #1
 8019d72:	4296      	cmp	r6, r2
 8019d74:	b289      	uxth	r1, r1
 8019d76:	daa7      	bge.n	8019cc8 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x84>
 8019d78:	f82a 7016 	strh.w	r7, [sl, r6, lsl #1]
 8019d7c:	682b      	ldr	r3, [r5, #0]
 8019d7e:	3301      	adds	r3, #1
 8019d80:	602b      	str	r3, [r5, #0]
 8019d82:	e7f2      	b.n	8019d6a <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x126>
 8019d84:	b188      	cbz	r0, 8019daa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019d86:	682b      	ldr	r3, [r5, #0]
 8019d88:	3801      	subs	r0, #1
 8019d8a:	429a      	cmp	r2, r3
 8019d8c:	b280      	uxth	r0, r0
 8019d8e:	dd0c      	ble.n	8019daa <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x166>
 8019d90:	f8db 3000 	ldr.w	r3, [fp]
 8019d94:	1c9c      	adds	r4, r3, #2
 8019d96:	f8cb 4000 	str.w	r4, [fp]
 8019d9a:	881c      	ldrh	r4, [r3, #0]
 8019d9c:	682b      	ldr	r3, [r5, #0]
 8019d9e:	f82a 4013 	strh.w	r4, [sl, r3, lsl #1]
 8019da2:	682b      	ldr	r3, [r5, #0]
 8019da4:	3301      	adds	r3, #1
 8019da6:	602b      	str	r3, [r5, #0]
 8019da8:	e7ec      	b.n	8019d84 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x140>
 8019daa:	2620      	movs	r6, #32
 8019dac:	b151      	cbz	r1, 8019dc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019dae:	6828      	ldr	r0, [r5, #0]
 8019db0:	3901      	subs	r1, #1
 8019db2:	4282      	cmp	r2, r0
 8019db4:	b289      	uxth	r1, r1
 8019db6:	dd05      	ble.n	8019dc4 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x180>
 8019db8:	f82a 6010 	strh.w	r6, [sl, r0, lsl #1]
 8019dbc:	682b      	ldr	r3, [r5, #0]
 8019dbe:	3301      	adds	r3, #1
 8019dc0:	602b      	str	r3, [r5, #0]
 8019dc2:	e7f3      	b.n	8019dac <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt+0x168>
 8019dc4:	b005      	add	sp, #20
 8019dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08019dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>:
 8019dca:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019dce:	2400      	movs	r4, #0
 8019dd0:	e9dd 8c07 	ldrd	r8, ip, [sp, #28]
 8019dd4:	e9dd e609 	ldrd	lr, r6, [sp, #36]	@ 0x24
 8019dd8:	e9dd 750b 	ldrd	r7, r5, [sp, #44]	@ 0x2c
 8019ddc:	8014      	strh	r4, [r2, #0]
 8019dde:	701c      	strb	r4, [r3, #0]
 8019de0:	f888 4000 	strb.w	r4, [r8]
 8019de4:	f88c 4000 	strb.w	r4, [ip]
 8019de8:	f88e 4000 	strb.w	r4, [lr]
 8019dec:	703c      	strb	r4, [r7, #0]
 8019dee:	6804      	ldr	r4, [r0, #0]
 8019df0:	b1a4      	cbz	r4, 8019e1c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x52>
 8019df2:	8824      	ldrh	r4, [r4, #0]
 8019df4:	f04f 0901 	mov.w	r9, #1
 8019df8:	b314      	cbz	r4, 8019e40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019dfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8019dfc:	d001      	beq.n	8019e02 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x38>
 8019dfe:	2c20      	cmp	r4, #32
 8019e00:	d110      	bne.n	8019e24 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x5a>
 8019e02:	8014      	strh	r4, [r2, #0]
 8019e04:	6804      	ldr	r4, [r0, #0]
 8019e06:	b10c      	cbz	r4, 8019e0c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x42>
 8019e08:	3402      	adds	r4, #2
 8019e0a:	6004      	str	r4, [r0, #0]
 8019e0c:	680c      	ldr	r4, [r1, #0]
 8019e0e:	b10c      	cbz	r4, 8019e14 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x4a>
 8019e10:	3401      	adds	r4, #1
 8019e12:	600c      	str	r4, [r1, #0]
 8019e14:	6804      	ldr	r4, [r0, #0]
 8019e16:	b17c      	cbz	r4, 8019e38 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x6e>
 8019e18:	8824      	ldrh	r4, [r4, #0]
 8019e1a:	e7ed      	b.n	8019df8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019e1c:	680c      	ldr	r4, [r1, #0]
 8019e1e:	b17c      	cbz	r4, 8019e40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019e20:	7824      	ldrb	r4, [r4, #0]
 8019e22:	e7e7      	b.n	8019df4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2a>
 8019e24:	2c2d      	cmp	r4, #45	@ 0x2d
 8019e26:	d102      	bne.n	8019e2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x64>
 8019e28:	f883 9000 	strb.w	r9, [r3]
 8019e2c:	e7ea      	b.n	8019e04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019e2e:	2c23      	cmp	r4, #35	@ 0x23
 8019e30:	d107      	bne.n	8019e42 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x78>
 8019e32:	f888 9000 	strb.w	r9, [r8]
 8019e36:	e7e5      	b.n	8019e04 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x3a>
 8019e38:	680c      	ldr	r4, [r1, #0]
 8019e3a:	b10c      	cbz	r4, 8019e40 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x76>
 8019e3c:	7824      	ldrb	r4, [r4, #0]
 8019e3e:	e7db      	b.n	8019df8 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x2e>
 8019e40:	2400      	movs	r4, #0
 8019e42:	f1a4 0330 	sub.w	r3, r4, #48	@ 0x30
 8019e46:	2b09      	cmp	r3, #9
 8019e48:	d901      	bls.n	8019e4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x84>
 8019e4a:	2c2a      	cmp	r4, #42	@ 0x2a
 8019e4c:	d122      	bne.n	8019e94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019e4e:	2301      	movs	r3, #1
 8019e50:	2c30      	cmp	r4, #48	@ 0x30
 8019e52:	f88e 3000 	strb.w	r3, [lr]
 8019e56:	d10d      	bne.n	8019e74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019e58:	f88c 3000 	strb.w	r3, [ip]
 8019e5c:	6803      	ldr	r3, [r0, #0]
 8019e5e:	b10b      	cbz	r3, 8019e64 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x9a>
 8019e60:	3302      	adds	r3, #2
 8019e62:	6003      	str	r3, [r0, #0]
 8019e64:	680b      	ldr	r3, [r1, #0]
 8019e66:	b10b      	cbz	r3, 8019e6c <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xa2>
 8019e68:	3301      	adds	r3, #1
 8019e6a:	600b      	str	r3, [r1, #0]
 8019e6c:	6803      	ldr	r3, [r0, #0]
 8019e6e:	2b00      	cmp	r3, #0
 8019e70:	d02f      	beq.n	8019ed2 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x108>
 8019e72:	881c      	ldrh	r4, [r3, #0]
 8019e74:	2c2a      	cmp	r4, #42	@ 0x2a
 8019e76:	d135      	bne.n	8019ee4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019e78:	f04f 33ff 	mov.w	r3, #4294967295
 8019e7c:	6033      	str	r3, [r6, #0]
 8019e7e:	6803      	ldr	r3, [r0, #0]
 8019e80:	b10b      	cbz	r3, 8019e86 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xbc>
 8019e82:	3302      	adds	r3, #2
 8019e84:	6003      	str	r3, [r0, #0]
 8019e86:	680b      	ldr	r3, [r1, #0]
 8019e88:	b10b      	cbz	r3, 8019e8e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xc4>
 8019e8a:	3301      	adds	r3, #1
 8019e8c:	600b      	str	r3, [r1, #0]
 8019e8e:	6803      	ldr	r3, [r0, #0]
 8019e90:	b31b      	cbz	r3, 8019eda <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x110>
 8019e92:	881c      	ldrh	r4, [r3, #0]
 8019e94:	2c2e      	cmp	r4, #46	@ 0x2e
 8019e96:	d11a      	bne.n	8019ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019e98:	2301      	movs	r3, #1
 8019e9a:	703b      	strb	r3, [r7, #0]
 8019e9c:	6803      	ldr	r3, [r0, #0]
 8019e9e:	b10b      	cbz	r3, 8019ea4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xda>
 8019ea0:	3302      	adds	r3, #2
 8019ea2:	6003      	str	r3, [r0, #0]
 8019ea4:	680b      	ldr	r3, [r1, #0]
 8019ea6:	b10b      	cbz	r3, 8019eac <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xe2>
 8019ea8:	3301      	adds	r3, #1
 8019eaa:	600b      	str	r3, [r1, #0]
 8019eac:	6803      	ldr	r3, [r0, #0]
 8019eae:	2b00      	cmp	r3, #0
 8019eb0:	d036      	beq.n	8019f20 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x156>
 8019eb2:	881b      	ldrh	r3, [r3, #0]
 8019eb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8019eb6:	d137      	bne.n	8019f28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019eb8:	f04f 33ff 	mov.w	r3, #4294967295
 8019ebc:	602b      	str	r3, [r5, #0]
 8019ebe:	6803      	ldr	r3, [r0, #0]
 8019ec0:	b10b      	cbz	r3, 8019ec6 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xfc>
 8019ec2:	3302      	adds	r3, #2
 8019ec4:	6003      	str	r3, [r0, #0]
 8019ec6:	680b      	ldr	r3, [r1, #0]
 8019ec8:	b10b      	cbz	r3, 8019ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019eca:	3301      	adds	r3, #1
 8019ecc:	600b      	str	r3, [r1, #0]
 8019ece:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019ed2:	680c      	ldr	r4, [r1, #0]
 8019ed4:	b134      	cbz	r4, 8019ee4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x11a>
 8019ed6:	7824      	ldrb	r4, [r4, #0]
 8019ed8:	e7cc      	b.n	8019e74 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xaa>
 8019eda:	680b      	ldr	r3, [r1, #0]
 8019edc:	2b00      	cmp	r3, #0
 8019ede:	d0f6      	beq.n	8019ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>
 8019ee0:	781c      	ldrb	r4, [r3, #0]
 8019ee2:	e7d7      	b.n	8019e94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019ee4:	2300      	movs	r3, #0
 8019ee6:	220a      	movs	r2, #10
 8019ee8:	6033      	str	r3, [r6, #0]
 8019eea:	f1a4 0c30 	sub.w	ip, r4, #48	@ 0x30
 8019eee:	fa1f f38c 	uxth.w	r3, ip
 8019ef2:	2b09      	cmp	r3, #9
 8019ef4:	d8ce      	bhi.n	8019e94 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xca>
 8019ef6:	6833      	ldr	r3, [r6, #0]
 8019ef8:	fb02 c303 	mla	r3, r2, r3, ip
 8019efc:	6033      	str	r3, [r6, #0]
 8019efe:	6803      	ldr	r3, [r0, #0]
 8019f00:	b10b      	cbz	r3, 8019f06 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x13c>
 8019f02:	3302      	adds	r3, #2
 8019f04:	6003      	str	r3, [r0, #0]
 8019f06:	680b      	ldr	r3, [r1, #0]
 8019f08:	b10b      	cbz	r3, 8019f0e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x144>
 8019f0a:	3301      	adds	r3, #1
 8019f0c:	600b      	str	r3, [r1, #0]
 8019f0e:	6803      	ldr	r3, [r0, #0]
 8019f10:	b10b      	cbz	r3, 8019f16 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x14c>
 8019f12:	881c      	ldrh	r4, [r3, #0]
 8019f14:	e7e9      	b.n	8019eea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019f16:	680c      	ldr	r4, [r1, #0]
 8019f18:	2c00      	cmp	r4, #0
 8019f1a:	d0e6      	beq.n	8019eea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019f1c:	7824      	ldrb	r4, [r4, #0]
 8019f1e:	e7e4      	b.n	8019eea <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x120>
 8019f20:	680b      	ldr	r3, [r1, #0]
 8019f22:	b10b      	cbz	r3, 8019f28 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x15e>
 8019f24:	781b      	ldrb	r3, [r3, #0]
 8019f26:	e7c5      	b.n	8019eb4 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0xea>
 8019f28:	2200      	movs	r2, #0
 8019f2a:	240a      	movs	r4, #10
 8019f2c:	602a      	str	r2, [r5, #0]
 8019f2e:	3b30      	subs	r3, #48	@ 0x30
 8019f30:	682a      	ldr	r2, [r5, #0]
 8019f32:	b29e      	uxth	r6, r3
 8019f34:	2e09      	cmp	r6, #9
 8019f36:	d813      	bhi.n	8019f60 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x196>
 8019f38:	fb04 3302 	mla	r3, r4, r2, r3
 8019f3c:	602b      	str	r3, [r5, #0]
 8019f3e:	6803      	ldr	r3, [r0, #0]
 8019f40:	b10b      	cbz	r3, 8019f46 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x17c>
 8019f42:	3302      	adds	r3, #2
 8019f44:	6003      	str	r3, [r0, #0]
 8019f46:	680b      	ldr	r3, [r1, #0]
 8019f48:	b10b      	cbz	r3, 8019f4e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x184>
 8019f4a:	3301      	adds	r3, #1
 8019f4c:	600b      	str	r3, [r1, #0]
 8019f4e:	6803      	ldr	r3, [r0, #0]
 8019f50:	b10b      	cbz	r3, 8019f56 <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x18c>
 8019f52:	881b      	ldrh	r3, [r3, #0]
 8019f54:	e7eb      	b.n	8019f2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019f56:	680b      	ldr	r3, [r1, #0]
 8019f58:	2b00      	cmp	r3, #0
 8019f5a:	d0e8      	beq.n	8019f2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019f5c:	781b      	ldrb	r3, [r3, #0]
 8019f5e:	e7e6      	b.n	8019f2e <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x164>
 8019f60:	2a06      	cmp	r2, #6
 8019f62:	bfa8      	it	ge
 8019f64:	2206      	movge	r2, #6
 8019f66:	602a      	str	r2, [r5, #0]
 8019f68:	e7b1      	b.n	8019ece <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_+0x104>

08019f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>:
 8019f6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f6e:	b0a3      	sub	sp, #140	@ 0x8c
 8019f70:	2600      	movs	r6, #0
 8019f72:	4607      	mov	r7, r0
 8019f74:	4688      	mov	r8, r1
 8019f76:	f10d 0944 	add.w	r9, sp, #68	@ 0x44
 8019f7a:	4631      	mov	r1, r6
 8019f7c:	9c2c      	ldr	r4, [sp, #176]	@ 0xb0
 8019f7e:	4648      	mov	r0, r9
 8019f80:	960d      	str	r6, [sp, #52]	@ 0x34
 8019f82:	e9cd 3208 	strd	r3, r2, [sp, #32]
 8019f86:	2242      	movs	r2, #66	@ 0x42
 8019f88:	f00c fe90 	bl	8026cac <memset>
 8019f8c:	b15f      	cbz	r7, 8019fa6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x3c>
 8019f8e:	f108 3aff 	add.w	sl, r8, #4294967295
 8019f92:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019f94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019f96:	b152      	cbz	r2, 8019fae <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x44>
 8019f98:	8812      	ldrh	r2, [r2, #0]
 8019f9a:	b10a      	cbz	r2, 8019fa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019f9c:	459a      	cmp	sl, r3
 8019f9e:	dc2e      	bgt.n	8019ffe <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x94>
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019fa6:	4638      	mov	r0, r7
 8019fa8:	b023      	add	sp, #140	@ 0x8c
 8019faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fae:	9a08      	ldr	r2, [sp, #32]
 8019fb0:	2a00      	cmp	r2, #0
 8019fb2:	d0f5      	beq.n	8019fa0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x36>
 8019fb4:	7812      	ldrb	r2, [r2, #0]
 8019fb6:	e7f0      	b.n	8019f9a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x30>
 8019fb8:	2d00      	cmp	r5, #0
 8019fba:	d0ea      	beq.n	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019fbc:	782a      	ldrb	r2, [r5, #0]
 8019fbe:	b142      	cbz	r2, 8019fd2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x68>
 8019fc0:	2a25      	cmp	r2, #37	@ 0x25
 8019fc2:	d001      	beq.n	8019fc8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x5e>
 8019fc4:	459a      	cmp	sl, r3
 8019fc6:	dc08      	bgt.n	8019fda <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x70>
 8019fc8:	f1bb 0f00 	cmp.w	fp, #0
 8019fcc:	d121      	bne.n	801a012 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xa8>
 8019fce:	2d00      	cmp	r5, #0
 8019fd0:	d0df      	beq.n	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 8019fd2:	782a      	ldrb	r2, [r5, #0]
 8019fd4:	f04f 0b00 	mov.w	fp, #0
 8019fd8:	e01d      	b.n	801a016 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xac>
 8019fda:	f1bb 0f00 	cmp.w	fp, #0
 8019fde:	d077      	beq.n	801a0d0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x166>
 8019fe0:	f8bb 2000 	ldrh.w	r2, [fp]
 8019fe4:	f827 2013 	strh.w	r2, [r7, r3, lsl #1]
 8019fe8:	f1bb 0f00 	cmp.w	fp, #0
 8019fec:	d002      	beq.n	8019ff4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x8a>
 8019fee:	f10b 0202 	add.w	r2, fp, #2
 8019ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8019ff4:	b10d      	cbz	r5, 8019ffa <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x90>
 8019ff6:	3501      	adds	r5, #1
 8019ff8:	9508      	str	r5, [sp, #32]
 8019ffa:	3301      	adds	r3, #1
 8019ffc:	930d      	str	r3, [sp, #52]	@ 0x34
 8019ffe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a000:	e9dd 5b08 	ldrd	r5, fp, [sp, #32]
 801a004:	f1bb 0f00 	cmp.w	fp, #0
 801a008:	d0d6      	beq.n	8019fb8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x4e>
 801a00a:	f8bb 2000 	ldrh.w	r2, [fp]
 801a00e:	2a00      	cmp	r2, #0
 801a010:	d1d6      	bne.n	8019fc0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x56>
 801a012:	f8bb 2000 	ldrh.w	r2, [fp]
 801a016:	2a00      	cmp	r2, #0
 801a018:	d0bb      	beq.n	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a01a:	459a      	cmp	sl, r3
 801a01c:	ddb9      	ble.n	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a01e:	f8ad 6032 	strh.w	r6, [sp, #50]	@ 0x32
 801a022:	f88d 602d 	strb.w	r6, [sp, #45]	@ 0x2d
 801a026:	f88d 602e 	strb.w	r6, [sp, #46]	@ 0x2e
 801a02a:	f88d 602f 	strb.w	r6, [sp, #47]	@ 0x2f
 801a02e:	f88d 6030 	strb.w	r6, [sp, #48]	@ 0x30
 801a032:	960e      	str	r6, [sp, #56]	@ 0x38
 801a034:	f88d 6031 	strb.w	r6, [sp, #49]	@ 0x31
 801a038:	960f      	str	r6, [sp, #60]	@ 0x3c
 801a03a:	f1bb 0f00 	cmp.w	fp, #0
 801a03e:	d002      	beq.n	801a046 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xdc>
 801a040:	f10b 0302 	add.w	r3, fp, #2
 801a044:	9309      	str	r3, [sp, #36]	@ 0x24
 801a046:	b10d      	cbz	r5, 801a04c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0xe2>
 801a048:	1c6b      	adds	r3, r5, #1
 801a04a:	9308      	str	r3, [sp, #32]
 801a04c:	ab0f      	add	r3, sp, #60	@ 0x3c
 801a04e:	f10d 0232 	add.w	r2, sp, #50	@ 0x32
 801a052:	a908      	add	r1, sp, #32
 801a054:	a809      	add	r0, sp, #36	@ 0x24
 801a056:	9305      	str	r3, [sp, #20]
 801a058:	f10d 0331 	add.w	r3, sp, #49	@ 0x31
 801a05c:	9304      	str	r3, [sp, #16]
 801a05e:	ab0e      	add	r3, sp, #56	@ 0x38
 801a060:	9303      	str	r3, [sp, #12]
 801a062:	ab0c      	add	r3, sp, #48	@ 0x30
 801a064:	9302      	str	r3, [sp, #8]
 801a066:	f10d 032f 	add.w	r3, sp, #47	@ 0x2f
 801a06a:	9301      	str	r3, [sp, #4]
 801a06c:	f10d 032e 	add.w	r3, sp, #46	@ 0x2e
 801a070:	9300      	str	r3, [sp, #0]
 801a072:	f10d 032d 	add.w	r3, sp, #45	@ 0x2d
 801a076:	f7ff fea8 	bl	8019dca <_ZN8touchgfx7Unicode22parseFlagsAndPrecisionERPKtRPKcRtRbS8_S8_S8_RiS8_S9_>
 801a07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a07c:	2b00      	cmp	r3, #0
 801a07e:	bfbf      	itttt	lt
 801a080:	6823      	ldrlt	r3, [r4, #0]
 801a082:	3404      	addlt	r4, #4
 801a084:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a088:	930e      	strlt	r3, [sp, #56]	@ 0x38
 801a08a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a08c:	2b00      	cmp	r3, #0
 801a08e:	bfbe      	ittt	lt
 801a090:	6823      	ldrlt	r3, [r4, #0]
 801a092:	3404      	addlt	r4, #4
 801a094:	ea23 73e3 	biclt.w	r3, r3, r3, asr #31
 801a098:	e9dd 2108 	ldrd	r2, r1, [sp, #32]
 801a09c:	bfb8      	it	lt
 801a09e:	930f      	strlt	r3, [sp, #60]	@ 0x3c
 801a0a0:	b1d9      	cbz	r1, 801a0da <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x170>
 801a0a2:	880b      	ldrh	r3, [r1, #0]
 801a0a4:	2b69      	cmp	r3, #105	@ 0x69
 801a0a6:	d01f      	beq.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a0a8:	d82f      	bhi.n	801a10a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a0>
 801a0aa:	2b58      	cmp	r3, #88	@ 0x58
 801a0ac:	d01c      	beq.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a0ae:	d818      	bhi.n	801a0e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x178>
 801a0b0:	2b25      	cmp	r3, #37	@ 0x25
 801a0b2:	d034      	beq.n	801a11e <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1b4>
 801a0b4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a0b6:	e9cd 5b08 	strd	r5, fp, [sp, #32]
 801a0ba:	f1bb 0f00 	cmp.w	fp, #0
 801a0be:	f000 80b7 	beq.w	801a230 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2c6>
 801a0c2:	f8bb 5000 	ldrh.w	r5, [fp]
 801a0c6:	f827 5013 	strh.w	r5, [r7, r3, lsl #1]
 801a0ca:	3301      	adds	r3, #1
 801a0cc:	930d      	str	r3, [sp, #52]	@ 0x34
 801a0ce:	e029      	b.n	801a124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a0d0:	b10d      	cbz	r5, 801a0d6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x16c>
 801a0d2:	782a      	ldrb	r2, [r5, #0]
 801a0d4:	e786      	b.n	8019fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a0d6:	462a      	mov	r2, r5
 801a0d8:	e784      	b.n	8019fe4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x7a>
 801a0da:	2a00      	cmp	r2, #0
 801a0dc:	d0ea      	beq.n	801a0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a0de:	7813      	ldrb	r3, [r2, #0]
 801a0e0:	e7e0      	b.n	801a0a4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x13a>
 801a0e2:	3b63      	subs	r3, #99	@ 0x63
 801a0e4:	2b01      	cmp	r3, #1
 801a0e6:	d8e5      	bhi.n	801a0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a0e8:	f8cd 9040 	str.w	r9, [sp, #64]	@ 0x40
 801a0ec:	b329      	cbz	r1, 801a13a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d0>
 801a0ee:	880b      	ldrh	r3, [r1, #0]
 801a0f0:	2b69      	cmp	r3, #105	@ 0x69
 801a0f2:	d063      	beq.n	801a1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a0f4:	d825      	bhi.n	801a142 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1d8>
 801a0f6:	2b63      	cmp	r3, #99	@ 0x63
 801a0f8:	d038      	beq.n	801a16c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x202>
 801a0fa:	2b64      	cmp	r3, #100	@ 0x64
 801a0fc:	d05e      	beq.n	801a1bc <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x252>
 801a0fe:	2b58      	cmp	r3, #88	@ 0x58
 801a100:	d07a      	beq.n	801a1f8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28e>
 801a102:	f8ad 6044 	strh.w	r6, [sp, #68]	@ 0x44
 801a106:	4625      	mov	r5, r4
 801a108:	e036      	b.n	801a178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a10a:	2b73      	cmp	r3, #115	@ 0x73
 801a10c:	d0ec      	beq.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a10e:	d802      	bhi.n	801a116 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ac>
 801a110:	2b6f      	cmp	r3, #111	@ 0x6f
 801a112:	d1cf      	bne.n	801a0b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x14a>
 801a114:	e7e8      	b.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a116:	2b75      	cmp	r3, #117	@ 0x75
 801a118:	d0e6      	beq.n	801a0e8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x17e>
 801a11a:	2b78      	cmp	r3, #120	@ 0x78
 801a11c:	e7f9      	b.n	801a112 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1a8>
 801a11e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a120:	f827 3012 	strh.w	r3, [r7, r2, lsl #1]
 801a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a126:	b10b      	cbz	r3, 801a12c <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1c2>
 801a128:	3302      	adds	r3, #2
 801a12a:	9309      	str	r3, [sp, #36]	@ 0x24
 801a12c:	9b08      	ldr	r3, [sp, #32]
 801a12e:	2b00      	cmp	r3, #0
 801a130:	f43f af2f 	beq.w	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a134:	3301      	adds	r3, #1
 801a136:	9308      	str	r3, [sp, #32]
 801a138:	e72b      	b.n	8019f92 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x28>
 801a13a:	2a00      	cmp	r2, #0
 801a13c:	d0e1      	beq.n	801a102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a13e:	7813      	ldrb	r3, [r2, #0]
 801a140:	e7d6      	b.n	801a0f0 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x186>
 801a142:	2b73      	cmp	r3, #115	@ 0x73
 801a144:	d036      	beq.n	801a1b4 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24a>
 801a146:	d807      	bhi.n	801a158 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ee>
 801a148:	2b6f      	cmp	r3, #111	@ 0x6f
 801a14a:	d1da      	bne.n	801a102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a14c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a14e:	1d25      	adds	r5, r4, #4
 801a150:	2308      	movs	r3, #8
 801a152:	eba8 0202 	sub.w	r2, r8, r2
 801a156:	e049      	b.n	801a1ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a158:	2b75      	cmp	r3, #117	@ 0x75
 801a15a:	d042      	beq.n	801a1e2 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x278>
 801a15c:	2b78      	cmp	r3, #120	@ 0x78
 801a15e:	d1d0      	bne.n	801a102 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x198>
 801a160:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a162:	1d25      	adds	r5, r4, #4
 801a164:	2310      	movs	r3, #16
 801a166:	eba8 0202 	sub.w	r2, r8, r2
 801a16a:	e03f      	b.n	801a1ec <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x282>
 801a16c:	6823      	ldr	r3, [r4, #0]
 801a16e:	1d25      	adds	r5, r4, #4
 801a170:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801a174:	f8ad 3044 	strh.w	r3, [sp, #68]	@ 0x44
 801a178:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a17a:	f8bd 1032 	ldrh.w	r1, [sp, #50]	@ 0x32
 801a17e:	2b00      	cmp	r3, #0
 801a180:	d051      	beq.n	801a226 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2bc>
 801a182:	881a      	ldrh	r2, [r3, #0]
 801a184:	a80d      	add	r0, sp, #52	@ 0x34
 801a186:	f89d 3031 	ldrb.w	r3, [sp, #49]	@ 0x31
 801a18a:	462c      	mov	r4, r5
 801a18c:	9005      	str	r0, [sp, #20]
 801a18e:	f89d 002d 	ldrb.w	r0, [sp, #45]	@ 0x2d
 801a192:	9004      	str	r0, [sp, #16]
 801a194:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801a196:	9003      	str	r0, [sp, #12]
 801a198:	f89d 0030 	ldrb.w	r0, [sp, #48]	@ 0x30
 801a19c:	9002      	str	r0, [sp, #8]
 801a19e:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801a1a0:	9001      	str	r0, [sp, #4]
 801a1a2:	f89d 002f 	ldrb.w	r0, [sp, #47]	@ 0x2f
 801a1a6:	e9cd 8706 	strd	r8, r7, [sp, #24]
 801a1aa:	9000      	str	r0, [sp, #0]
 801a1ac:	a810      	add	r0, sp, #64	@ 0x40
 801a1ae:	f7ff fd49 	bl	8019c44 <_ZN8touchgfx7Unicode13composeStringERPKtttbbibibRitPt>
 801a1b2:	e7b7      	b.n	801a124 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x1ba>
 801a1b4:	1d25      	adds	r5, r4, #4
 801a1b6:	6823      	ldr	r3, [r4, #0]
 801a1b8:	9310      	str	r3, [sp, #64]	@ 0x40
 801a1ba:	e7dd      	b.n	801a178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a1bc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1be:	230a      	movs	r3, #10
 801a1c0:	4649      	mov	r1, r9
 801a1c2:	6820      	ldr	r0, [r4, #0]
 801a1c4:	eba8 0202 	sub.w	r2, r8, r2
 801a1c8:	1d25      	adds	r5, r4, #4
 801a1ca:	b292      	uxth	r2, r2
 801a1cc:	f7ff fcf0 	bl	8019bb0 <_ZN8touchgfx7Unicode4itoaElPtti.part.2>
 801a1d0:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 801a1d4:	2b2d      	cmp	r3, #45	@ 0x2d
 801a1d6:	d1cf      	bne.n	801a178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a1d8:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a1dc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a1de:	3302      	adds	r3, #2
 801a1e0:	e7ea      	b.n	801a1b8 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x24e>
 801a1e2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1e4:	1d25      	adds	r5, r4, #4
 801a1e6:	230a      	movs	r3, #10
 801a1e8:	eba8 0202 	sub.w	r2, r8, r2
 801a1ec:	b292      	uxth	r2, r2
 801a1ee:	4649      	mov	r1, r9
 801a1f0:	6820      	ldr	r0, [r4, #0]
 801a1f2:	f7ff fd09 	bl	8019c08 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a1f6:	e7bf      	b.n	801a178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a1f8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801a1fa:	2310      	movs	r3, #16
 801a1fc:	4649      	mov	r1, r9
 801a1fe:	6820      	ldr	r0, [r4, #0]
 801a200:	eba8 0202 	sub.w	r2, r8, r2
 801a204:	1d25      	adds	r5, r4, #4
 801a206:	b292      	uxth	r2, r2
 801a208:	f7ff fcfe 	bl	8019c08 <_ZN8touchgfx7Unicode4utoaEmPtti.part.3>
 801a20c:	f10d 0242 	add.w	r2, sp, #66	@ 0x42
 801a210:	f832 3f02 	ldrh.w	r3, [r2, #2]!
 801a214:	2b00      	cmp	r3, #0
 801a216:	d0af      	beq.n	801a178 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x20e>
 801a218:	f1a3 0161 	sub.w	r1, r3, #97	@ 0x61
 801a21c:	2919      	cmp	r1, #25
 801a21e:	d8f7      	bhi.n	801a210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a220:	3b20      	subs	r3, #32
 801a222:	8013      	strh	r3, [r2, #0]
 801a224:	e7f4      	b.n	801a210 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x2a6>
 801a226:	9a08      	ldr	r2, [sp, #32]
 801a228:	2a00      	cmp	r2, #0
 801a22a:	d0ab      	beq.n	801a184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a22c:	7812      	ldrb	r2, [r2, #0]
 801a22e:	e7a9      	b.n	801a184 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x21a>
 801a230:	2d00      	cmp	r5, #0
 801a232:	f43f af48 	beq.w	801a0c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>
 801a236:	782d      	ldrb	r5, [r5, #0]
 801a238:	e745      	b.n	801a0c6 <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list+0x15c>

0801a23a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>:
 801a23a:	b507      	push	{r0, r1, r2, lr}
 801a23c:	9300      	str	r3, [sp, #0]
 801a23e:	4613      	mov	r3, r2
 801a240:	2200      	movs	r2, #0
 801a242:	f7ff fe92 	bl	8019f6a <_ZN8touchgfx7Unicode9vsnprintfEPttPKtPKcSt9__va_list>
 801a246:	b003      	add	sp, #12
 801a248:	f85d fb04 	ldr.w	pc, [sp], #4

0801a24c <_ZN8touchgfx7Unicode8snprintfEPttPKcz>:
 801a24c:	b40c      	push	{r2, r3}
 801a24e:	b507      	push	{r0, r1, r2, lr}
 801a250:	ab04      	add	r3, sp, #16
 801a252:	f853 2b04 	ldr.w	r2, [r3], #4
 801a256:	9301      	str	r3, [sp, #4]
 801a258:	f7ff ffef 	bl	801a23a <_ZN8touchgfx7Unicode9vsnprintfEPttPKcSt9__va_list>
 801a25c:	b003      	add	sp, #12
 801a25e:	f85d eb04 	ldr.w	lr, [sp], #4
 801a262:	b002      	add	sp, #8
 801a264:	4770      	bx	lr
	...

0801a268 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801a268:	4b01      	ldr	r3, [pc, #4]	@ (801a270 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801a26a:	6018      	str	r0, [r3, #0]
 801a26c:	4770      	bx	lr
 801a26e:	bf00      	nop
 801a270:	24025e88 	.word	0x24025e88

0801a274 <_ZN8touchgfx11FontManager7getFontEt>:
 801a274:	4b03      	ldr	r3, [pc, #12]	@ (801a284 <_ZN8touchgfx11FontManager7getFontEt+0x10>)
 801a276:	4601      	mov	r1, r0
 801a278:	6818      	ldr	r0, [r3, #0]
 801a27a:	b110      	cbz	r0, 801a282 <_ZN8touchgfx11FontManager7getFontEt+0xe>
 801a27c:	6803      	ldr	r3, [r0, #0]
 801a27e:	681b      	ldr	r3, [r3, #0]
 801a280:	4718      	bx	r3
 801a282:	4770      	bx	lr
 801a284:	24025e88 	.word	0x24025e88

0801a288 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 801a288:	4b06      	ldr	r3, [pc, #24]	@ (801a2a4 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801a28a:	881a      	ldrh	r2, [r3, #0]
 801a28c:	4282      	cmp	r2, r0
 801a28e:	d807      	bhi.n	801a2a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 801a290:	4b05      	ldr	r3, [pc, #20]	@ (801a2a8 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801a292:	881b      	ldrh	r3, [r3, #0]
 801a294:	4413      	add	r3, r2
 801a296:	4298      	cmp	r0, r3
 801a298:	bfac      	ite	ge
 801a29a:	2000      	movge	r0, #0
 801a29c:	2001      	movlt	r0, #1
 801a29e:	4770      	bx	lr
 801a2a0:	2000      	movs	r0, #0
 801a2a2:	4770      	bx	lr
 801a2a4:	24025ea8 	.word	0x24025ea8
 801a2a8:	24025eac 	.word	0x24025eac

0801a2ac <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801a2ac:	b508      	push	{r3, lr}
 801a2ae:	4601      	mov	r1, r0
 801a2b0:	f7ff ffea 	bl	801a288 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a2b4:	b118      	cbz	r0, 801a2be <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 801a2b6:	4b02      	ldr	r3, [pc, #8]	@ (801a2c0 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801a2be:	bd08      	pop	{r3, pc}
 801a2c0:	24025e8c 	.word	0x24025e8c

0801a2c4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 801a2c4:	b538      	push	{r3, r4, r5, lr}
 801a2c6:	4604      	mov	r4, r0
 801a2c8:	f7ff ffde 	bl	801a288 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a2cc:	b1d8      	cbz	r0, 801a306 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801a2ce:	4b0f      	ldr	r3, [pc, #60]	@ (801a30c <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 801a2d0:	881b      	ldrh	r3, [r3, #0]
 801a2d2:	1ae4      	subs	r4, r4, r3
 801a2d4:	230e      	movs	r3, #14
 801a2d6:	4363      	muls	r3, r4
 801a2d8:	4c0d      	ldr	r4, [pc, #52]	@ (801a310 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 801a2da:	6825      	ldr	r5, [r4, #0]
 801a2dc:	18ea      	adds	r2, r5, r3
 801a2de:	7b12      	ldrb	r2, [r2, #12]
 801a2e0:	f012 0220 	ands.w	r2, r2, #32
 801a2e4:	d010      	beq.n	801a308 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 801a2e6:	f9b1 2000 	ldrsh.w	r2, [r1]
 801a2ea:	52ea      	strh	r2, [r5, r3]
 801a2ec:	6822      	ldr	r2, [r4, #0]
 801a2ee:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 801a2f2:	441a      	add	r2, r3
 801a2f4:	8055      	strh	r5, [r2, #2]
 801a2f6:	6822      	ldr	r2, [r4, #0]
 801a2f8:	4413      	add	r3, r2
 801a2fa:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 801a2fe:	809a      	strh	r2, [r3, #4]
 801a300:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 801a304:	80da      	strh	r2, [r3, #6]
 801a306:	bd38      	pop	{r3, r4, r5, pc}
 801a308:	4610      	mov	r0, r2
 801a30a:	e7fc      	b.n	801a306 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801a30c:	24025ea8 	.word	0x24025ea8
 801a310:	24025e90 	.word	0x24025e90

0801a314 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801a314:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801a318:	4606      	mov	r6, r0
 801a31a:	460c      	mov	r4, r1
 801a31c:	f7ff ffb4 	bl	801a288 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801a320:	b918      	cbnz	r0, 801a32a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801a322:	2000      	movs	r0, #0
 801a324:	b002      	add	sp, #8
 801a326:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a32a:	4608      	mov	r0, r1
 801a32c:	f7f5 fe35 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a330:	2800      	cmp	r0, #0
 801a332:	d1f6      	bne.n	801a322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a334:	4b3f      	ldr	r3, [pc, #252]	@ (801a434 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801a336:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 801a438 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801a33a:	881d      	ldrh	r5, [r3, #0]
 801a33c:	f8d9 a000 	ldr.w	sl, [r9]
 801a340:	46c8      	mov	r8, r9
 801a342:	1b73      	subs	r3, r6, r5
 801a344:	250e      	movs	r5, #14
 801a346:	435d      	muls	r5, r3
 801a348:	eb0a 0705 	add.w	r7, sl, r5
 801a34c:	7b3b      	ldrb	r3, [r7, #12]
 801a34e:	f013 0f20 	tst.w	r3, #32
 801a352:	d0e6      	beq.n	801a322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a354:	4621      	mov	r1, r4
 801a356:	4638      	mov	r0, r7
 801a358:	f7fc fbec 	bl	8016b34 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a35c:	2800      	cmp	r0, #0
 801a35e:	d1e1      	bne.n	801a324 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a360:	4639      	mov	r1, r7
 801a362:	4620      	mov	r0, r4
 801a364:	f7fc fbe6 	bl	8016b34 <_ZNK8touchgfx4Rect8includesERKS0_>
 801a368:	b108      	cbz	r0, 801a36e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801a36a:	4621      	mov	r1, r4
 801a36c:	e020      	b.n	801a3b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801a36e:	f9b4 2000 	ldrsh.w	r2, [r4]
 801a372:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801a376:	429a      	cmp	r2, r3
 801a378:	d11e      	bne.n	801a3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a37a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a37e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801a382:	429a      	cmp	r2, r3
 801a384:	d118      	bne.n	801a3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a386:	6820      	ldr	r0, [r4, #0]
 801a388:	466b      	mov	r3, sp
 801a38a:	6861      	ldr	r1, [r4, #4]
 801a38c:	c303      	stmia	r3!, {r0, r1}
 801a38e:	4639      	mov	r1, r7
 801a390:	4668      	mov	r0, sp
 801a392:	f7fc fbf5 	bl	8016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a396:	f8d9 3000 	ldr.w	r3, [r9]
 801a39a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801a39e:	442b      	add	r3, r5
 801a3a0:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801a3a4:	4413      	add	r3, r2
 801a3a6:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801a3aa:	4293      	cmp	r3, r2
 801a3ac:	dc04      	bgt.n	801a3b8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801a3ae:	4669      	mov	r1, sp
 801a3b0:	4630      	mov	r0, r6
 801a3b2:	f7ff ff87 	bl	801a2c4 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 801a3b6:	e7b5      	b.n	801a324 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 801a3b8:	f8d8 3000 	ldr.w	r3, [r8]
 801a3bc:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 801a3c0:	442b      	add	r3, r5
 801a3c2:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801a3c6:	4291      	cmp	r1, r2
 801a3c8:	d119      	bne.n	801a3fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a3ca:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801a3ce:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 801a3d2:	4291      	cmp	r1, r2
 801a3d4:	d113      	bne.n	801a3fe <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801a3d6:	6820      	ldr	r0, [r4, #0]
 801a3d8:	466a      	mov	r2, sp
 801a3da:	6861      	ldr	r1, [r4, #4]
 801a3dc:	c203      	stmia	r2!, {r0, r1}
 801a3de:	4619      	mov	r1, r3
 801a3e0:	4668      	mov	r0, sp
 801a3e2:	f7fc fbcd 	bl	8016b80 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801a3e6:	f8d8 3000 	ldr.w	r3, [r8]
 801a3ea:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801a3ee:	442b      	add	r3, r5
 801a3f0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 801a3f4:	4413      	add	r3, r2
 801a3f6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 801a3fa:	4293      	cmp	r3, r2
 801a3fc:	ddd7      	ble.n	801a3ae <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 801a3fe:	4620      	mov	r0, r4
 801a400:	f7f5 fdcb 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a404:	b990      	cbnz	r0, 801a42c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 801a406:	88a7      	ldrh	r7, [r4, #4]
 801a408:	88e3      	ldrh	r3, [r4, #6]
 801a40a:	fb17 f703 	smulbb	r7, r7, r3
 801a40e:	f8d8 3000 	ldr.w	r3, [r8]
 801a412:	441d      	add	r5, r3
 801a414:	4628      	mov	r0, r5
 801a416:	f7f5 fdc0 	bl	800ff9a <_ZNK8touchgfx4Rect7isEmptyEv>
 801a41a:	b948      	cbnz	r0, 801a430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 801a41c:	88ab      	ldrh	r3, [r5, #4]
 801a41e:	88ea      	ldrh	r2, [r5, #6]
 801a420:	fb13 f302 	smulbb	r3, r3, r2
 801a424:	42bb      	cmp	r3, r7
 801a426:	f6bf af7c 	bge.w	801a322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801a42a:	e79e      	b.n	801a36a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 801a42c:	2700      	movs	r7, #0
 801a42e:	e7ee      	b.n	801a40e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 801a430:	2300      	movs	r3, #0
 801a432:	e7f7      	b.n	801a424 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801a434:	24025ea8 	.word	0x24025ea8
 801a438:	24025e90 	.word	0x24025e90

0801a43c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801a43c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a43e:	4c24      	ldr	r4, [pc, #144]	@ (801a4d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 801a440:	6823      	ldr	r3, [r4, #0]
 801a442:	2b00      	cmp	r3, #0
 801a444:	d042      	beq.n	801a4cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a446:	4a23      	ldr	r2, [pc, #140]	@ (801a4d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 801a448:	4d23      	ldr	r5, [pc, #140]	@ (801a4d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801a44a:	8811      	ldrh	r1, [r2, #0]
 801a44c:	f8b5 c000 	ldrh.w	ip, [r5]
 801a450:	4822      	ldr	r0, [pc, #136]	@ (801a4dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801a452:	4461      	add	r1, ip
 801a454:	1c4a      	adds	r2, r1, #1
 801a456:	008f      	lsls	r7, r1, #2
 801a458:	f022 0201 	bic.w	r2, r2, #1
 801a45c:	19de      	adds	r6, r3, r7
 801a45e:	0412      	lsls	r2, r2, #16
 801a460:	6006      	str	r6, [r0, #0]
 801a462:	4e1f      	ldr	r6, [pc, #124]	@ (801a4e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801a464:	0c12      	lsrs	r2, r2, #16
 801a466:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801a46a:	19da      	adds	r2, r3, r7
 801a46c:	6032      	str	r2, [r6, #0]
 801a46e:	220e      	movs	r2, #14
 801a470:	fb02 f20c 	mul.w	r2, r2, ip
 801a474:	3203      	adds	r2, #3
 801a476:	f022 0203 	bic.w	r2, r2, #3
 801a47a:	443a      	add	r2, r7
 801a47c:	4f19      	ldr	r7, [pc, #100]	@ (801a4e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801a47e:	4413      	add	r3, r2
 801a480:	603b      	str	r3, [r7, #0]
 801a482:	2300      	movs	r3, #0
 801a484:	4f18      	ldr	r7, [pc, #96]	@ (801a4e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801a486:	469c      	mov	ip, r3
 801a488:	803b      	strh	r3, [r7, #0]
 801a48a:	4f18      	ldr	r7, [pc, #96]	@ (801a4ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801a48c:	683f      	ldr	r7, [r7, #0]
 801a48e:	1aba      	subs	r2, r7, r2
 801a490:	4f17      	ldr	r7, [pc, #92]	@ (801a4f0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801a492:	603a      	str	r2, [r7, #0]
 801a494:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 801a498:	4a16      	ldr	r2, [pc, #88]	@ (801a4f4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801a49a:	8013      	strh	r3, [r2, #0]
 801a49c:	428b      	cmp	r3, r1
 801a49e:	d10d      	bne.n	801a4bc <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 801a4a0:	882d      	ldrh	r5, [r5, #0]
 801a4a2:	2300      	movs	r3, #0
 801a4a4:	6830      	ldr	r0, [r6, #0]
 801a4a6:	240e      	movs	r4, #14
 801a4a8:	429d      	cmp	r5, r3
 801a4aa:	d90f      	bls.n	801a4cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801a4ac:	fb04 0203 	mla	r2, r4, r3, r0
 801a4b0:	3301      	adds	r3, #1
 801a4b2:	7b11      	ldrb	r1, [r2, #12]
 801a4b4:	f36f 1145 	bfc	r1, #5, #1
 801a4b8:	7311      	strb	r1, [r2, #12]
 801a4ba:	e7f5      	b.n	801a4a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801a4bc:	6822      	ldr	r2, [r4, #0]
 801a4be:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 801a4c2:	6802      	ldr	r2, [r0, #0]
 801a4c4:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 801a4c8:	3301      	adds	r3, #1
 801a4ca:	e7e7      	b.n	801a49c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801a4cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4ce:	bf00      	nop
 801a4d0:	24025e8c 	.word	0x24025e8c
 801a4d4:	24025ea8 	.word	0x24025ea8
 801a4d8:	24025eac 	.word	0x24025eac
 801a4dc:	24025ea0 	.word	0x24025ea0
 801a4e0:	24025e90 	.word	0x24025e90
 801a4e4:	24025e98 	.word	0x24025e98
 801a4e8:	24025eaa 	.word	0x24025eaa
 801a4ec:	24025e94 	.word	0x24025e94
 801a4f0:	24025ea4 	.word	0x24025ea4
 801a4f4:	24025e9c 	.word	0x24025e9c

0801a4f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 801a4f8:	4b06      	ldr	r3, [pc, #24]	@ (801a514 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 801a4fa:	681b      	ldr	r3, [r3, #0]
 801a4fc:	b943      	cbnz	r3, 801a510 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a4fe:	b139      	cbz	r1, 801a510 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 801a500:	4b05      	ldr	r3, [pc, #20]	@ (801a518 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 801a502:	801a      	strh	r2, [r3, #0]
 801a504:	4b05      	ldr	r3, [pc, #20]	@ (801a51c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 801a506:	6019      	str	r1, [r3, #0]
 801a508:	4b05      	ldr	r3, [pc, #20]	@ (801a520 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 801a50a:	6018      	str	r0, [r3, #0]
 801a50c:	f7ff bf96 	b.w	801a43c <_ZN8touchgfx6Bitmap10clearCacheEv>
 801a510:	4770      	bx	lr
 801a512:	bf00      	nop
 801a514:	24025e98 	.word	0x24025e98
 801a518:	24025eac 	.word	0x24025eac
 801a51c:	24025e94 	.word	0x24025e94
 801a520:	24025e8c 	.word	0x24025e8c

0801a524 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801a524:	b470      	push	{r4, r5, r6}
 801a526:	4c07      	ldr	r4, [pc, #28]	@ (801a544 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 801a528:	4605      	mov	r5, r0
 801a52a:	4610      	mov	r0, r2
 801a52c:	9a03      	ldr	r2, [sp, #12]
 801a52e:	6826      	ldr	r6, [r4, #0]
 801a530:	b936      	cbnz	r6, 801a540 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801a532:	6025      	str	r5, [r4, #0]
 801a534:	4c04      	ldr	r4, [pc, #16]	@ (801a548 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801a536:	8021      	strh	r1, [r4, #0]
 801a538:	4619      	mov	r1, r3
 801a53a:	bc70      	pop	{r4, r5, r6}
 801a53c:	f7ff bfdc 	b.w	801a4f8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 801a540:	bc70      	pop	{r4, r5, r6}
 801a542:	4770      	bx	lr
 801a544:	24025eb0 	.word	0x24025eb0
 801a548:	24025ea8 	.word	0x24025ea8

0801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801a54c:	4a12      	ldr	r2, [pc, #72]	@ (801a598 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801a54e:	8803      	ldrh	r3, [r0, #0]
 801a550:	8812      	ldrh	r2, [r2, #0]
 801a552:	4293      	cmp	r3, r2
 801a554:	d207      	bcs.n	801a566 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801a556:	4a11      	ldr	r2, [pc, #68]	@ (801a59c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 801a558:	2114      	movs	r1, #20
 801a55a:	6812      	ldr	r2, [r2, #0]
 801a55c:	fb01 2303 	mla	r3, r1, r3, r2
 801a560:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801a564:	4770      	bx	lr
 801a566:	490e      	ldr	r1, [pc, #56]	@ (801a5a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 801a568:	8809      	ldrh	r1, [r1, #0]
 801a56a:	4411      	add	r1, r2
 801a56c:	428b      	cmp	r3, r1
 801a56e:	da04      	bge.n	801a57a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 801a570:	1a9b      	subs	r3, r3, r2
 801a572:	4a0c      	ldr	r2, [pc, #48]	@ (801a5a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801a574:	210e      	movs	r1, #14
 801a576:	6812      	ldr	r2, [r2, #0]
 801a578:	e7f0      	b.n	801a55c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801a57a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a57e:	4293      	cmp	r3, r2
 801a580:	d108      	bne.n	801a594 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801a582:	4b09      	ldr	r3, [pc, #36]	@ (801a5a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801a584:	781b      	ldrb	r3, [r3, #0]
 801a586:	b91b      	cbnz	r3, 801a590 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 801a588:	4b08      	ldr	r3, [pc, #32]	@ (801a5ac <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801a58a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a58e:	4770      	bx	lr
 801a590:	4b07      	ldr	r3, [pc, #28]	@ (801a5b0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801a592:	e7fa      	b.n	801a58a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801a594:	2000      	movs	r0, #0
 801a596:	4770      	bx	lr
 801a598:	24025ea8 	.word	0x24025ea8
 801a59c:	24025eb0 	.word	0x24025eb0
 801a5a0:	24025eac 	.word	0x24025eac
 801a5a4:	24025e90 	.word	0x24025e90
 801a5a8:	24025e18 	.word	0x24025e18
 801a5ac:	24025e1a 	.word	0x24025e1a
 801a5b0:	24025e1c 	.word	0x24025e1c

0801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 801a5b4:	4a12      	ldr	r2, [pc, #72]	@ (801a600 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 801a5b6:	8803      	ldrh	r3, [r0, #0]
 801a5b8:	8812      	ldrh	r2, [r2, #0]
 801a5ba:	4293      	cmp	r3, r2
 801a5bc:	d207      	bcs.n	801a5ce <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801a5be:	4a11      	ldr	r2, [pc, #68]	@ (801a604 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 801a5c0:	2114      	movs	r1, #20
 801a5c2:	6812      	ldr	r2, [r2, #0]
 801a5c4:	fb01 2303 	mla	r3, r1, r3, r2
 801a5c8:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801a5cc:	4770      	bx	lr
 801a5ce:	490e      	ldr	r1, [pc, #56]	@ (801a608 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 801a5d0:	8809      	ldrh	r1, [r1, #0]
 801a5d2:	4411      	add	r1, r2
 801a5d4:	428b      	cmp	r3, r1
 801a5d6:	da04      	bge.n	801a5e2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 801a5d8:	1a9b      	subs	r3, r3, r2
 801a5da:	4a0c      	ldr	r2, [pc, #48]	@ (801a60c <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 801a5dc:	210e      	movs	r1, #14
 801a5de:	6812      	ldr	r2, [r2, #0]
 801a5e0:	e7f0      	b.n	801a5c4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 801a5e2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a5e6:	4293      	cmp	r3, r2
 801a5e8:	d108      	bne.n	801a5fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 801a5ea:	4b09      	ldr	r3, [pc, #36]	@ (801a610 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 801a5ec:	781b      	ldrb	r3, [r3, #0]
 801a5ee:	b91b      	cbnz	r3, 801a5f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 801a5f0:	4b08      	ldr	r3, [pc, #32]	@ (801a614 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 801a5f2:	f9b3 0000 	ldrsh.w	r0, [r3]
 801a5f6:	4770      	bx	lr
 801a5f8:	4b07      	ldr	r3, [pc, #28]	@ (801a618 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 801a5fa:	e7fa      	b.n	801a5f2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 801a5fc:	2000      	movs	r0, #0
 801a5fe:	4770      	bx	lr
 801a600:	24025ea8 	.word	0x24025ea8
 801a604:	24025eb0 	.word	0x24025eb0
 801a608:	24025eac 	.word	0x24025eac
 801a60c:	24025e90 	.word	0x24025e90
 801a610:	24025e18 	.word	0x24025e18
 801a614:	24025e1c 	.word	0x24025e1c
 801a618:	24025e1a 	.word	0x24025e1a

0801a61c <_ZNK8touchgfx6Bitmap12getSolidRectEv>:
 801a61c:	4a22      	ldr	r2, [pc, #136]	@ (801a6a8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x8c>)
 801a61e:	b530      	push	{r4, r5, lr}
 801a620:	880b      	ldrh	r3, [r1, #0]
 801a622:	8812      	ldrh	r2, [r2, #0]
 801a624:	4293      	cmp	r3, r2
 801a626:	d213      	bcs.n	801a650 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x34>
 801a628:	4a20      	ldr	r2, [pc, #128]	@ (801a6ac <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x90>)
 801a62a:	2114      	movs	r1, #20
 801a62c:	6812      	ldr	r2, [r2, #0]
 801a62e:	fb01 2303 	mla	r3, r1, r3, r2
 801a632:	f9b3 400c 	ldrsh.w	r4, [r3, #12]
 801a636:	f9b3 100e 	ldrsh.w	r1, [r3, #14]
 801a63a:	8a1a      	ldrh	r2, [r3, #16]
 801a63c:	8a5b      	ldrh	r3, [r3, #18]
 801a63e:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a642:	8004      	strh	r4, [r0, #0]
 801a644:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a648:	8041      	strh	r1, [r0, #2]
 801a64a:	8082      	strh	r2, [r0, #4]
 801a64c:	80c3      	strh	r3, [r0, #6]
 801a64e:	e024      	b.n	801a69a <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x7e>
 801a650:	4917      	ldr	r1, [pc, #92]	@ (801a6b0 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x94>)
 801a652:	8809      	ldrh	r1, [r1, #0]
 801a654:	4411      	add	r1, r2
 801a656:	428b      	cmp	r3, r1
 801a658:	da10      	bge.n	801a67c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x60>
 801a65a:	1a9b      	subs	r3, r3, r2
 801a65c:	220e      	movs	r2, #14
 801a65e:	4353      	muls	r3, r2
 801a660:	4a14      	ldr	r2, [pc, #80]	@ (801a6b4 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x98>)
 801a662:	6811      	ldr	r1, [r2, #0]
 801a664:	18ca      	adds	r2, r1, r3
 801a666:	5ecd      	ldrsh	r5, [r1, r3]
 801a668:	f9b2 4002 	ldrsh.w	r4, [r2, #2]
 801a66c:	f9b2 1004 	ldrsh.w	r1, [r2, #4]
 801a670:	f9b2 3006 	ldrsh.w	r3, [r2, #6]
 801a674:	8005      	strh	r5, [r0, #0]
 801a676:	8044      	strh	r4, [r0, #2]
 801a678:	8081      	strh	r1, [r0, #4]
 801a67a:	e7e7      	b.n	801a64c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a67c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a680:	4293      	cmp	r3, r2
 801a682:	d10b      	bne.n	801a69c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x80>
 801a684:	4b0c      	ldr	r3, [pc, #48]	@ (801a6b8 <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x9c>)
 801a686:	f9b3 1000 	ldrsh.w	r1, [r3]
 801a68a:	4b0c      	ldr	r3, [pc, #48]	@ (801a6bc <_ZNK8touchgfx6Bitmap12getSolidRectEv+0xa0>)
 801a68c:	8081      	strh	r1, [r0, #4]
 801a68e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801a692:	2300      	movs	r3, #0
 801a694:	80c2      	strh	r2, [r0, #6]
 801a696:	8003      	strh	r3, [r0, #0]
 801a698:	8043      	strh	r3, [r0, #2]
 801a69a:	bd30      	pop	{r4, r5, pc}
 801a69c:	2300      	movs	r3, #0
 801a69e:	8003      	strh	r3, [r0, #0]
 801a6a0:	8043      	strh	r3, [r0, #2]
 801a6a2:	8083      	strh	r3, [r0, #4]
 801a6a4:	e7d2      	b.n	801a64c <_ZNK8touchgfx6Bitmap12getSolidRectEv+0x30>
 801a6a6:	bf00      	nop
 801a6a8:	24025ea8 	.word	0x24025ea8
 801a6ac:	24025eb0 	.word	0x24025eb0
 801a6b0:	24025eac 	.word	0x24025eac
 801a6b4:	24025e90 	.word	0x24025e90
 801a6b8:	24025e14 	.word	0x24025e14
 801a6bc:	24025e16 	.word	0x24025e16

0801a6c0 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv>:
 801a6c0:	4a17      	ldr	r2, [pc, #92]	@ (801a720 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x60>)
 801a6c2:	8803      	ldrh	r3, [r0, #0]
 801a6c4:	8812      	ldrh	r2, [r2, #0]
 801a6c6:	4293      	cmp	r3, r2
 801a6c8:	d213      	bcs.n	801a6f2 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x32>
 801a6ca:	4a16      	ldr	r2, [pc, #88]	@ (801a724 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x64>)
 801a6cc:	2114      	movs	r1, #20
 801a6ce:	6812      	ldr	r2, [r2, #0]
 801a6d0:	fb01 2303 	mla	r3, r1, r3, r2
 801a6d4:	8a1a      	ldrh	r2, [r3, #16]
 801a6d6:	8919      	ldrh	r1, [r3, #8]
 801a6d8:	f3c2 020c 	ubfx	r2, r2, #0, #13
 801a6dc:	428a      	cmp	r2, r1
 801a6de:	db1d      	blt.n	801a71c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a6e0:	8a58      	ldrh	r0, [r3, #18]
 801a6e2:	f3c0 000c 	ubfx	r0, r0, #0, #13
 801a6e6:	895b      	ldrh	r3, [r3, #10]
 801a6e8:	4298      	cmp	r0, r3
 801a6ea:	bfac      	ite	ge
 801a6ec:	2000      	movge	r0, #0
 801a6ee:	2001      	movlt	r0, #1
 801a6f0:	4770      	bx	lr
 801a6f2:	490d      	ldr	r1, [pc, #52]	@ (801a728 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x68>)
 801a6f4:	8809      	ldrh	r1, [r1, #0]
 801a6f6:	4411      	add	r1, r2
 801a6f8:	428b      	cmp	r3, r1
 801a6fa:	da0d      	bge.n	801a718 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x58>
 801a6fc:	1a9b      	subs	r3, r3, r2
 801a6fe:	4a0b      	ldr	r2, [pc, #44]	@ (801a72c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x6c>)
 801a700:	210e      	movs	r1, #14
 801a702:	6812      	ldr	r2, [r2, #0]
 801a704:	fb01 2303 	mla	r3, r1, r3, r2
 801a708:	f9b3 1004 	ldrsh.w	r1, [r3, #4]
 801a70c:	891a      	ldrh	r2, [r3, #8]
 801a70e:	4291      	cmp	r1, r2
 801a710:	db04      	blt.n	801a71c <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x5c>
 801a712:	f9b3 0006 	ldrsh.w	r0, [r3, #6]
 801a716:	e7e6      	b.n	801a6e6 <_ZNK8touchgfx6Bitmap20hasTransparentPixelsEv+0x26>
 801a718:	2000      	movs	r0, #0
 801a71a:	4770      	bx	lr
 801a71c:	2001      	movs	r0, #1
 801a71e:	4770      	bx	lr
 801a720:	24025ea8 	.word	0x24025ea8
 801a724:	24025eb0 	.word	0x24025eb0
 801a728:	24025eac 	.word	0x24025eac
 801a72c:	24025e90 	.word	0x24025e90

0801a730 <_ZNK8touchgfx6Bitmap7getDataEv>:
 801a730:	4a12      	ldr	r2, [pc, #72]	@ (801a77c <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 801a732:	8803      	ldrh	r3, [r0, #0]
 801a734:	8811      	ldrh	r1, [r2, #0]
 801a736:	428b      	cmp	r3, r1
 801a738:	d20b      	bcs.n	801a752 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801a73a:	4a11      	ldr	r2, [pc, #68]	@ (801a780 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a73c:	6812      	ldr	r2, [r2, #0]
 801a73e:	b112      	cbz	r2, 801a746 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 801a740:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a744:	b9c0      	cbnz	r0, 801a778 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801a746:	4a0f      	ldr	r2, [pc, #60]	@ (801a784 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801a748:	6811      	ldr	r1, [r2, #0]
 801a74a:	2214      	movs	r2, #20
 801a74c:	4353      	muls	r3, r2
 801a74e:	58c8      	ldr	r0, [r1, r3]
 801a750:	4770      	bx	lr
 801a752:	4a0d      	ldr	r2, [pc, #52]	@ (801a788 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 801a754:	8812      	ldrh	r2, [r2, #0]
 801a756:	440a      	add	r2, r1
 801a758:	4293      	cmp	r3, r2
 801a75a:	da04      	bge.n	801a766 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 801a75c:	4a08      	ldr	r2, [pc, #32]	@ (801a780 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801a75e:	6812      	ldr	r2, [r2, #0]
 801a760:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 801a764:	4770      	bx	lr
 801a766:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801a76a:	4293      	cmp	r3, r2
 801a76c:	d103      	bne.n	801a776 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801a76e:	4b07      	ldr	r3, [pc, #28]	@ (801a78c <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801a770:	681b      	ldr	r3, [r3, #0]
 801a772:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 801a774:	4770      	bx	lr
 801a776:	2000      	movs	r0, #0
 801a778:	4770      	bx	lr
 801a77a:	bf00      	nop
 801a77c:	24025ea8 	.word	0x24025ea8
 801a780:	24025e8c 	.word	0x24025e8c
 801a784:	24025eb0 	.word	0x24025eb0
 801a788:	24025eac 	.word	0x24025eac
 801a78c:	24025e20 	.word	0x24025e20

0801a790 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801a790:	4b24      	ldr	r3, [pc, #144]	@ (801a824 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801a792:	8802      	ldrh	r2, [r0, #0]
 801a794:	8818      	ldrh	r0, [r3, #0]
 801a796:	4282      	cmp	r2, r0
 801a798:	d221      	bcs.n	801a7de <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801a79a:	4b23      	ldr	r3, [pc, #140]	@ (801a828 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 801a79c:	6819      	ldr	r1, [r3, #0]
 801a79e:	2314      	movs	r3, #20
 801a7a0:	fb03 1302 	mla	r3, r3, r2, r1
 801a7a4:	6858      	ldr	r0, [r3, #4]
 801a7a6:	2800      	cmp	r0, #0
 801a7a8:	d03a      	beq.n	801a820 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a7aa:	4920      	ldr	r1, [pc, #128]	@ (801a82c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a7ac:	6809      	ldr	r1, [r1, #0]
 801a7ae:	2900      	cmp	r1, #0
 801a7b0:	d036      	beq.n	801a820 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a7b2:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801a7b6:	2900      	cmp	r1, #0
 801a7b8:	d032      	beq.n	801a820 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801a7ba:	891a      	ldrh	r2, [r3, #8]
 801a7bc:	8958      	ldrh	r0, [r3, #10]
 801a7be:	4350      	muls	r0, r2
 801a7c0:	7c5a      	ldrb	r2, [r3, #17]
 801a7c2:	7cdb      	ldrb	r3, [r3, #19]
 801a7c4:	0952      	lsrs	r2, r2, #5
 801a7c6:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a7ca:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801a7ce:	2b0b      	cmp	r3, #11
 801a7d0:	bf18      	it	ne
 801a7d2:	0040      	lslne	r0, r0, #1
 801a7d4:	3003      	adds	r0, #3
 801a7d6:	f020 0003 	bic.w	r0, r0, #3
 801a7da:	4408      	add	r0, r1
 801a7dc:	4770      	bx	lr
 801a7de:	4b14      	ldr	r3, [pc, #80]	@ (801a830 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801a7e0:	881b      	ldrh	r3, [r3, #0]
 801a7e2:	4403      	add	r3, r0
 801a7e4:	429a      	cmp	r2, r3
 801a7e6:	da1a      	bge.n	801a81e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a7e8:	4b12      	ldr	r3, [pc, #72]	@ (801a834 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 801a7ea:	1a10      	subs	r0, r2, r0
 801a7ec:	210e      	movs	r1, #14
 801a7ee:	681b      	ldr	r3, [r3, #0]
 801a7f0:	fb01 3000 	mla	r0, r1, r0, r3
 801a7f4:	7b03      	ldrb	r3, [r0, #12]
 801a7f6:	f003 031f 	and.w	r3, r3, #31
 801a7fa:	2b0b      	cmp	r3, #11
 801a7fc:	d10b      	bne.n	801a816 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 801a7fe:	8903      	ldrh	r3, [r0, #8]
 801a800:	8940      	ldrh	r0, [r0, #10]
 801a802:	4358      	muls	r0, r3
 801a804:	4b09      	ldr	r3, [pc, #36]	@ (801a82c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 801a806:	3003      	adds	r0, #3
 801a808:	6819      	ldr	r1, [r3, #0]
 801a80a:	f020 0303 	bic.w	r3, r0, #3
 801a80e:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 801a812:	4418      	add	r0, r3
 801a814:	4770      	bx	lr
 801a816:	2b0d      	cmp	r3, #13
 801a818:	d101      	bne.n	801a81e <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 801a81a:	300d      	adds	r0, #13
 801a81c:	4770      	bx	lr
 801a81e:	2000      	movs	r0, #0
 801a820:	4770      	bx	lr
 801a822:	bf00      	nop
 801a824:	24025ea8 	.word	0x24025ea8
 801a828:	24025eb0 	.word	0x24025eb0
 801a82c:	24025e8c 	.word	0x24025e8c
 801a830:	24025eac 	.word	0x24025eac
 801a834:	24025e90 	.word	0x24025e90

0801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801a838:	4b1f      	ldr	r3, [pc, #124]	@ (801a8b8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801a83a:	b510      	push	{r4, lr}
 801a83c:	8802      	ldrh	r2, [r0, #0]
 801a83e:	881b      	ldrh	r3, [r3, #0]
 801a840:	429a      	cmp	r2, r3
 801a842:	d21a      	bcs.n	801a87a <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 801a844:	4b1d      	ldr	r3, [pc, #116]	@ (801a8bc <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801a846:	2114      	movs	r1, #20
 801a848:	681b      	ldr	r3, [r3, #0]
 801a84a:	fb01 3102 	mla	r1, r1, r2, r3
 801a84e:	7c4b      	ldrb	r3, [r1, #17]
 801a850:	0958      	lsrs	r0, r3, #5
 801a852:	7ccb      	ldrb	r3, [r1, #19]
 801a854:	491a      	ldr	r1, [pc, #104]	@ (801a8c0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801a856:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801a85a:	6809      	ldr	r1, [r1, #0]
 801a85c:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801a860:	b2d8      	uxtb	r0, r3
 801a862:	b149      	cbz	r1, 801a878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a864:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801a868:	b132      	cbz	r2, 801a878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a86a:	2b0e      	cmp	r3, #14
 801a86c:	d021      	beq.n	801a8b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a86e:	280f      	cmp	r0, #15
 801a870:	d01d      	beq.n	801a8ae <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801a872:	2810      	cmp	r0, #16
 801a874:	bf08      	it	eq
 801a876:	2002      	moveq	r0, #2
 801a878:	bd10      	pop	{r4, pc}
 801a87a:	4912      	ldr	r1, [pc, #72]	@ (801a8c4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 801a87c:	8809      	ldrh	r1, [r1, #0]
 801a87e:	4419      	add	r1, r3
 801a880:	428a      	cmp	r2, r1
 801a882:	da09      	bge.n	801a898 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 801a884:	1ad3      	subs	r3, r2, r3
 801a886:	4a10      	ldr	r2, [pc, #64]	@ (801a8c8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801a888:	210e      	movs	r1, #14
 801a88a:	6812      	ldr	r2, [r2, #0]
 801a88c:	fb01 2303 	mla	r3, r1, r3, r2
 801a890:	7b18      	ldrb	r0, [r3, #12]
 801a892:	f000 001f 	and.w	r0, r0, #31
 801a896:	e7ef      	b.n	801a878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a898:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 801a89c:	429a      	cmp	r2, r3
 801a89e:	d108      	bne.n	801a8b2 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801a8a0:	f7e9 fbd2 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 801a8a4:	6803      	ldr	r3, [r0, #0]
 801a8a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a8aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8ac:	4718      	bx	r3
 801a8ae:	2001      	movs	r0, #1
 801a8b0:	e7e2      	b.n	801a878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a8b2:	2000      	movs	r0, #0
 801a8b4:	e7e0      	b.n	801a878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801a8b6:	bf00      	nop
 801a8b8:	24025ea8 	.word	0x24025ea8
 801a8bc:	24025eb0 	.word	0x24025eb0
 801a8c0:	24025e8c 	.word	0x24025e8c
 801a8c4:	24025eac 	.word	0x24025eac
 801a8c8:	24025e90 	.word	0x24025e90

0801a8cc <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 801a8cc:	2018      	movs	r0, #24
 801a8ce:	4770      	bx	lr

0801a8d0 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801a8d0:	2001      	movs	r0, #1
 801a8d2:	4770      	bx	lr

0801a8d4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 801a8d4:	4b02      	ldr	r3, [pc, #8]	@ (801a8e0 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 801a8d6:	8818      	ldrh	r0, [r3, #0]
 801a8d8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a8dc:	b280      	uxth	r0, r0
 801a8de:	4770      	bx	lr
 801a8e0:	24025e1a 	.word	0x24025e1a

0801a8e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 801a8e4:	2bff      	cmp	r3, #255	@ 0xff
 801a8e6:	d04c      	beq.n	801a982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 801a8e8:	2a2c      	cmp	r2, #44	@ 0x2c
 801a8ea:	d030      	beq.n	801a94e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 801a8ec:	d80f      	bhi.n	801a90e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 801a8ee:	2a08      	cmp	r2, #8
 801a8f0:	d043      	beq.n	801a97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a8f2:	d805      	bhi.n	801a900 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 801a8f4:	2a04      	cmp	r2, #4
 801a8f6:	d03e      	beq.n	801a976 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 801a8f8:	2a05      	cmp	r2, #5
 801a8fa:	d03a      	beq.n	801a972 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 801a8fc:	2300      	movs	r3, #0
 801a8fe:	e024      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a900:	2a0a      	cmp	r2, #10
 801a902:	d03a      	beq.n	801a97a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 801a904:	d301      	bcc.n	801a90a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 801a906:	2a0b      	cmp	r2, #11
 801a908:	d1f8      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a90a:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 801a90c:	e01d      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a90e:	2a30      	cmp	r2, #48	@ 0x30
 801a910:	d035      	beq.n	801a97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a912:	d80a      	bhi.n	801a92a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 801a914:	2a2e      	cmp	r2, #46	@ 0x2e
 801a916:	684b      	ldr	r3, [r1, #4]
 801a918:	d023      	beq.n	801a962 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 801a91a:	d90d      	bls.n	801a938 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 801a91c:	781a      	ldrb	r2, [r3, #0]
 801a91e:	785b      	ldrb	r3, [r3, #1]
 801a920:	2b00      	cmp	r3, #0
 801a922:	d1eb      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a924:	b98a      	cbnz	r2, 801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a926:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801a928:	e00f      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a92a:	2a32      	cmp	r2, #50	@ 0x32
 801a92c:	d027      	beq.n	801a97e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 801a92e:	d301      	bcc.n	801a934 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 801a930:	2a33      	cmp	r2, #51	@ 0x33
 801a932:	d1e3      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a934:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801a936:	e008      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a938:	781a      	ldrb	r2, [r3, #0]
 801a93a:	785b      	ldrb	r3, [r3, #1]
 801a93c:	2b00      	cmp	r3, #0
 801a93e:	d1dd      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a940:	2a00      	cmp	r2, #0
 801a942:	d0f0      	beq.n	801a926 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 801a944:	2a01      	cmp	r2, #1
 801a946:	d1d9      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a948:	6943      	ldr	r3, [r0, #20]
 801a94a:	4618      	mov	r0, r3
 801a94c:	4770      	bx	lr
 801a94e:	684b      	ldr	r3, [r1, #4]
 801a950:	781a      	ldrb	r2, [r3, #0]
 801a952:	785b      	ldrb	r3, [r3, #1]
 801a954:	2b00      	cmp	r3, #0
 801a956:	d1d1      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a958:	b14a      	cbz	r2, 801a96e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801a95a:	2a01      	cmp	r2, #1
 801a95c:	bf08      	it	eq
 801a95e:	68c3      	ldreq	r3, [r0, #12]
 801a960:	e7f3      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a962:	781a      	ldrb	r2, [r3, #0]
 801a964:	785b      	ldrb	r3, [r3, #1]
 801a966:	2b00      	cmp	r3, #0
 801a968:	d1c8      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a96a:	2a00      	cmp	r2, #0
 801a96c:	d1ed      	bne.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a96e:	69c3      	ldr	r3, [r0, #28]
 801a970:	e7eb      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a972:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 801a974:	e7e9      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a976:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801a978:	e7e7      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a97a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801a97c:	e7e5      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a97e:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801a980:	e7e3      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a982:	2a2c      	cmp	r2, #44	@ 0x2c
 801a984:	d030      	beq.n	801a9e8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801a986:	d80f      	bhi.n	801a9a8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801a988:	2a08      	cmp	r2, #8
 801a98a:	d042      	beq.n	801aa12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a98c:	d805      	bhi.n	801a99a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801a98e:	2a04      	cmp	r2, #4
 801a990:	d03d      	beq.n	801aa0e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801a992:	2a05      	cmp	r2, #5
 801a994:	d1b2      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a996:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801a998:	e7d7      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a99a:	2a0a      	cmp	r2, #10
 801a99c:	d039      	beq.n	801aa12 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801a99e:	d301      	bcc.n	801a9a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801a9a0:	2a0b      	cmp	r2, #11
 801a9a2:	d1ab      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9a4:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801a9a6:	e7d0      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9a8:	2a30      	cmp	r2, #48	@ 0x30
 801a9aa:	d034      	beq.n	801aa16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a9ac:	d80b      	bhi.n	801a9c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801a9ae:	2a2e      	cmp	r2, #46	@ 0x2e
 801a9b0:	684b      	ldr	r3, [r1, #4]
 801a9b2:	d023      	beq.n	801a9fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 801a9b4:	d90e      	bls.n	801a9d4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801a9b6:	781a      	ldrb	r2, [r3, #0]
 801a9b8:	785b      	ldrb	r3, [r3, #1]
 801a9ba:	2b00      	cmp	r3, #0
 801a9bc:	d19e      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9be:	2a00      	cmp	r2, #0
 801a9c0:	d1c3      	bne.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9c2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 801a9c4:	e7c1      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9c6:	2a32      	cmp	r2, #50	@ 0x32
 801a9c8:	d025      	beq.n	801aa16 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 801a9ca:	d301      	bcc.n	801a9d0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 801a9cc:	2a33      	cmp	r2, #51	@ 0x33
 801a9ce:	d195      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9d0:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801a9d2:	e7ba      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9d4:	781a      	ldrb	r2, [r3, #0]
 801a9d6:	785b      	ldrb	r3, [r3, #1]
 801a9d8:	2b00      	cmp	r3, #0
 801a9da:	d18f      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9dc:	2a00      	cmp	r2, #0
 801a9de:	d0f0      	beq.n	801a9c2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801a9e0:	2a01      	cmp	r2, #1
 801a9e2:	d18b      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9e4:	6983      	ldr	r3, [r0, #24]
 801a9e6:	e7b0      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9e8:	684b      	ldr	r3, [r1, #4]
 801a9ea:	781a      	ldrb	r2, [r3, #0]
 801a9ec:	785b      	ldrb	r3, [r3, #1]
 801a9ee:	2b00      	cmp	r3, #0
 801a9f0:	d184      	bne.n	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801a9f2:	b152      	cbz	r2, 801aa0a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 801a9f4:	2a01      	cmp	r2, #1
 801a9f6:	bf08      	it	eq
 801a9f8:	6903      	ldreq	r3, [r0, #16]
 801a9fa:	e7a6      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801a9fc:	781a      	ldrb	r2, [r3, #0]
 801a9fe:	785b      	ldrb	r3, [r3, #1]
 801aa00:	2b00      	cmp	r3, #0
 801aa02:	f47f af7b 	bne.w	801a8fc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801aa06:	2a00      	cmp	r2, #0
 801aa08:	d19f      	bne.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa0a:	6a03      	ldr	r3, [r0, #32]
 801aa0c:	e79d      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa0e:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 801aa10:	e79b      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa12:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 801aa14:	e799      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801aa16:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 801aa18:	e797      	b.n	801a94a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

0801aa1a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801aa1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aa1e:	b085      	sub	sp, #20
 801aa20:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 801aa22:	9203      	str	r2, [sp, #12]
 801aa24:	6870      	ldr	r0, [r6, #4]
 801aa26:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801aa2a:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 801aa2e:	9101      	str	r1, [sp, #4]
 801aa30:	fa1f f885 	uxth.w	r8, r5
 801aa34:	43ed      	mvns	r5, r5
 801aa36:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801aa3a:	b2ed      	uxtb	r5, r5
 801aa3c:	fb00 2404 	mla	r4, r0, r4, r2
 801aa40:	6832      	ldr	r2, [r6, #0]
 801aa42:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801aa46:	4414      	add	r4, r2
 801aa48:	f8dc 2000 	ldr.w	r2, [ip]
 801aa4c:	9202      	str	r2, [sp, #8]
 801aa4e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801aa52:	f102 0e04 	add.w	lr, r2, #4
 801aa56:	9a01      	ldr	r2, [sp, #4]
 801aa58:	2a00      	cmp	r2, #0
 801aa5a:	dc03      	bgt.n	801aa64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801aa5c:	9a03      	ldr	r2, [sp, #12]
 801aa5e:	2a00      	cmp	r2, #0
 801aa60:	f340 8116 	ble.w	801ac90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801aa64:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801aa66:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801aa6a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801aa6e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aa70:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801aa74:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801aa78:	2b00      	cmp	r3, #0
 801aa7a:	dd0e      	ble.n	801aa9a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 801aa7c:	1406      	asrs	r6, r0, #16
 801aa7e:	d405      	bmi.n	801aa8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aa80:	4556      	cmp	r6, sl
 801aa82:	da03      	bge.n	801aa8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aa84:	1416      	asrs	r6, r2, #16
 801aa86:	d401      	bmi.n	801aa8c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801aa88:	454e      	cmp	r6, r9
 801aa8a:	db07      	blt.n	801aa9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801aa8c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801aa8e:	3b01      	subs	r3, #1
 801aa90:	3403      	adds	r4, #3
 801aa92:	4430      	add	r0, r6
 801aa94:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801aa96:	4432      	add	r2, r6
 801aa98:	e7ee      	b.n	801aa78 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801aa9a:	d063      	beq.n	801ab64 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801aa9c:	1e5e      	subs	r6, r3, #1
 801aa9e:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801aaa0:	fb07 0706 	mla	r7, r7, r6, r0
 801aaa4:	143f      	asrs	r7, r7, #16
 801aaa6:	d454      	bmi.n	801ab52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aaa8:	4557      	cmp	r7, sl
 801aaaa:	da52      	bge.n	801ab52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aaac:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801aaae:	fb07 2606 	mla	r6, r7, r6, r2
 801aab2:	1436      	asrs	r6, r6, #16
 801aab4:	d44d      	bmi.n	801ab52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aab6:	454e      	cmp	r6, r9
 801aab8:	da4b      	bge.n	801ab52 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801aaba:	1ce6      	adds	r6, r4, #3
 801aabc:	4699      	mov	r9, r3
 801aabe:	f1b9 0f00 	cmp.w	r9, #0
 801aac2:	f106 0603 	add.w	r6, r6, #3
 801aac6:	dd48      	ble.n	801ab5a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 801aac8:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801aacc:	1417      	asrs	r7, r2, #16
 801aace:	9902      	ldr	r1, [sp, #8]
 801aad0:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801aad4:	f109 39ff 	add.w	r9, r9, #4294967295
 801aad8:	fb0b 1707 	mla	r7, fp, r7, r1
 801aadc:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801aae0:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801aae2:	f817 700a 	ldrb.w	r7, [r7, sl]
 801aae6:	fb1b fb05 	smulbb	fp, fp, r5
 801aaea:	4408      	add	r0, r1
 801aaec:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801aaee:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801aaf2:	440a      	add	r2, r1
 801aaf4:	eb0e 0a07 	add.w	sl, lr, r7
 801aaf8:	f81e 7007 	ldrb.w	r7, [lr, r7]
 801aafc:	fb07 b708 	mla	r7, r7, r8, fp
 801ab00:	b2bf      	uxth	r7, r7
 801ab02:	f107 0b01 	add.w	fp, r7, #1
 801ab06:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ab0a:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801ab0e:	fb1b fb05 	smulbb	fp, fp, r5
 801ab12:	123f      	asrs	r7, r7, #8
 801ab14:	f806 7c06 	strb.w	r7, [r6, #-6]
 801ab18:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801ab1c:	fb07 b708 	mla	r7, r7, r8, fp
 801ab20:	b2bf      	uxth	r7, r7
 801ab22:	f107 0b01 	add.w	fp, r7, #1
 801ab26:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801ab2a:	123f      	asrs	r7, r7, #8
 801ab2c:	f806 7c05 	strb.w	r7, [r6, #-5]
 801ab30:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801ab34:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801ab38:	fb1a fa05 	smulbb	sl, sl, r5
 801ab3c:	fb07 a708 	mla	r7, r7, r8, sl
 801ab40:	b2bf      	uxth	r7, r7
 801ab42:	f107 0a01 	add.w	sl, r7, #1
 801ab46:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801ab4a:	123f      	asrs	r7, r7, #8
 801ab4c:	f806 7c04 	strb.w	r7, [r6, #-4]
 801ab50:	e7b5      	b.n	801aabe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 801ab52:	2700      	movs	r7, #0
 801ab54:	1bde      	subs	r6, r3, r7
 801ab56:	2e00      	cmp	r6, #0
 801ab58:	dc42      	bgt.n	801abe0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 801ab5a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ab5e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ab62:	441c      	add	r4, r3
 801ab64:	9b01      	ldr	r3, [sp, #4]
 801ab66:	2b00      	cmp	r3, #0
 801ab68:	f340 8092 	ble.w	801ac90 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 801ab6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ab70:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ab72:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ab76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ab7a:	eef0 6a62 	vmov.f32	s13, s5
 801ab7e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ab82:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ab86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab8a:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 801ab8e:	eef0 6a43 	vmov.f32	s13, s6
 801ab92:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ab96:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 801ab9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ab9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aba2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aba6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801abaa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801abae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801abb2:	ee12 2a90 	vmov	r2, s5
 801abb6:	eef0 2a47 	vmov.f32	s5, s14
 801abba:	fb92 f3f3 	sdiv	r3, r2, r3
 801abbe:	ee13 2a10 	vmov	r2, s6
 801abc2:	9311      	str	r3, [sp, #68]	@ 0x44
 801abc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abc6:	eeb0 3a67 	vmov.f32	s6, s15
 801abca:	fb92 f3f3 	sdiv	r3, r2, r3
 801abce:	9312      	str	r3, [sp, #72]	@ 0x48
 801abd0:	9b01      	ldr	r3, [sp, #4]
 801abd2:	9a03      	ldr	r2, [sp, #12]
 801abd4:	3b01      	subs	r3, #1
 801abd6:	9301      	str	r3, [sp, #4]
 801abd8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801abda:	bf08      	it	eq
 801abdc:	4613      	moveq	r3, r2
 801abde:	e73a      	b.n	801aa56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801abe0:	ea5f 4a20 	movs.w	sl, r0, asr #16
 801abe4:	d44e      	bmi.n	801ac84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801abe6:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801abea:	4556      	cmp	r6, sl
 801abec:	dd4a      	ble.n	801ac84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801abee:	ea5f 4b22 	movs.w	fp, r2, asr #16
 801abf2:	d447      	bmi.n	801ac84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801abf4:	f8dc 100c 	ldr.w	r1, [ip, #12]
 801abf8:	4559      	cmp	r1, fp
 801abfa:	dd43      	ble.n	801ac84 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 801abfc:	fa0f f986 	sxth.w	r9, r6
 801ac00:	9902      	ldr	r1, [sp, #8]
 801ac02:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801ac06:	fb0b 1909 	mla	r9, fp, r9, r1
 801ac0a:	f814 b006 	ldrb.w	fp, [r4, r6]
 801ac0e:	f819 900a 	ldrb.w	r9, [r9, sl]
 801ac12:	fb1b fb05 	smulbb	fp, fp, r5
 801ac16:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ac1a:	eb0e 0a09 	add.w	sl, lr, r9
 801ac1e:	f81e 9009 	ldrb.w	r9, [lr, r9]
 801ac22:	fb09 b908 	mla	r9, r9, r8, fp
 801ac26:	fa1f f989 	uxth.w	r9, r9
 801ac2a:	f109 0b01 	add.w	fp, r9, #1
 801ac2e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac32:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac36:	f804 9006 	strb.w	r9, [r4, r6]
 801ac3a:	4426      	add	r6, r4
 801ac3c:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ac40:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ac44:	fb1b fb05 	smulbb	fp, fp, r5
 801ac48:	fb09 b908 	mla	r9, r9, r8, fp
 801ac4c:	fa1f f989 	uxth.w	r9, r9
 801ac50:	f109 0b01 	add.w	fp, r9, #1
 801ac54:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801ac58:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac5c:	f886 9001 	strb.w	r9, [r6, #1]
 801ac60:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ac64:	f896 a002 	ldrb.w	sl, [r6, #2]
 801ac68:	fb1a fa05 	smulbb	sl, sl, r5
 801ac6c:	fb09 a908 	mla	r9, r9, r8, sl
 801ac70:	fa1f f989 	uxth.w	r9, r9
 801ac74:	f109 0a01 	add.w	sl, r9, #1
 801ac78:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801ac7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ac80:	f886 9002 	strb.w	r9, [r6, #2]
 801ac84:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801ac86:	3701      	adds	r7, #1
 801ac88:	4408      	add	r0, r1
 801ac8a:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801ac8c:	440a      	add	r2, r1
 801ac8e:	e761      	b.n	801ab54 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801ac90:	b005      	add	sp, #20
 801ac92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac96 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ac96:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac9a:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801ac9c:	4693      	mov	fp, r2
 801ac9e:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801aca0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aca4:	6868      	ldr	r0, [r5, #4]
 801aca6:	6877      	ldr	r7, [r6, #4]
 801aca8:	9100      	str	r1, [sp, #0]
 801acaa:	3704      	adds	r7, #4
 801acac:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801acb0:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 801acb4:	fb00 2404 	mla	r4, r0, r4, r2
 801acb8:	682a      	ldr	r2, [r5, #0]
 801acba:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801acbe:	4414      	add	r4, r2
 801acc0:	6832      	ldr	r2, [r6, #0]
 801acc2:	9201      	str	r2, [sp, #4]
 801acc4:	9a00      	ldr	r2, [sp, #0]
 801acc6:	2a00      	cmp	r2, #0
 801acc8:	dc03      	bgt.n	801acd2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801acca:	f1bb 0f00 	cmp.w	fp, #0
 801acce:	f340 80bc 	ble.w	801ae4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801acd2:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801acd4:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 801acd8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801acdc:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801acde:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 801ace2:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801ace6:	2b00      	cmp	r3, #0
 801ace8:	dd0c      	ble.n	801ad04 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801acea:	1405      	asrs	r5, r0, #16
 801acec:	d405      	bmi.n	801acfa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801acee:	4555      	cmp	r5, sl
 801acf0:	da03      	bge.n	801acfa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801acf2:	1415      	asrs	r5, r2, #16
 801acf4:	d401      	bmi.n	801acfa <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801acf6:	454d      	cmp	r5, r9
 801acf8:	db05      	blt.n	801ad06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801acfa:	4440      	add	r0, r8
 801acfc:	4472      	add	r2, lr
 801acfe:	3b01      	subs	r3, #1
 801ad00:	3403      	adds	r4, #3
 801ad02:	e7f0      	b.n	801ace6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801ad04:	d03f      	beq.n	801ad86 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 801ad06:	1e5d      	subs	r5, r3, #1
 801ad08:	fb08 0c05 	mla	ip, r8, r5, r0
 801ad0c:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 801ad10:	d42e      	bmi.n	801ad70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ad12:	45d4      	cmp	ip, sl
 801ad14:	da2c      	bge.n	801ad70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ad16:	fb0e 2505 	mla	r5, lr, r5, r2
 801ad1a:	142d      	asrs	r5, r5, #16
 801ad1c:	d428      	bmi.n	801ad70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ad1e:	454d      	cmp	r5, r9
 801ad20:	da26      	bge.n	801ad70 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801ad22:	1ce5      	adds	r5, r4, #3
 801ad24:	469c      	mov	ip, r3
 801ad26:	f1bc 0f00 	cmp.w	ip, #0
 801ad2a:	f105 0503 	add.w	r5, r5, #3
 801ad2e:	dd25      	ble.n	801ad7c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 801ad30:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 801ad34:	ea4f 4922 	mov.w	r9, r2, asr #16
 801ad38:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ad3c:	4472      	add	r2, lr
 801ad3e:	468a      	mov	sl, r1
 801ad40:	9901      	ldr	r1, [sp, #4]
 801ad42:	fb0a 1909 	mla	r9, sl, r9, r1
 801ad46:	1401      	asrs	r1, r0, #16
 801ad48:	4440      	add	r0, r8
 801ad4a:	f819 9001 	ldrb.w	r9, [r9, r1]
 801ad4e:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801ad52:	eb07 0a09 	add.w	sl, r7, r9
 801ad56:	f817 9009 	ldrb.w	r9, [r7, r9]
 801ad5a:	f805 9c06 	strb.w	r9, [r5, #-6]
 801ad5e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801ad62:	f805 9c05 	strb.w	r9, [r5, #-5]
 801ad66:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801ad6a:	f805 9c04 	strb.w	r9, [r5, #-4]
 801ad6e:	e7da      	b.n	801ad26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801ad70:	2500      	movs	r5, #0
 801ad72:	eba3 0c05 	sub.w	ip, r3, r5
 801ad76:	f1bc 0f00 	cmp.w	ip, #0
 801ad7a:	dc3b      	bgt.n	801adf4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 801ad7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ad80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad84:	441c      	add	r4, r3
 801ad86:	9b00      	ldr	r3, [sp, #0]
 801ad88:	2b00      	cmp	r3, #0
 801ad8a:	dd5e      	ble.n	801ae4a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801ad8c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ad90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ad92:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ad96:	eeb0 6a62 	vmov.f32	s12, s5
 801ad9a:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ad9e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ada2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ada6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801adaa:	eeb0 6a43 	vmov.f32	s12, s6
 801adae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801adb2:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801adb6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801adba:	ee61 7a27 	vmul.f32	s15, s2, s15
 801adbe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801adc2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801adc6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801adca:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801adce:	ee12 2a90 	vmov	r2, s5
 801add2:	eef0 2a47 	vmov.f32	s5, s14
 801add6:	fb92 f8f3 	sdiv	r8, r2, r3
 801adda:	ee13 2a10 	vmov	r2, s6
 801adde:	eeb0 3a67 	vmov.f32	s6, s15
 801ade2:	fb92 fef3 	sdiv	lr, r2, r3
 801ade6:	9b00      	ldr	r3, [sp, #0]
 801ade8:	3b01      	subs	r3, #1
 801adea:	9300      	str	r3, [sp, #0]
 801adec:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801adee:	bf08      	it	eq
 801adf0:	465b      	moveq	r3, fp
 801adf2:	e767      	b.n	801acc4 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801adf4:	ea5f 4920 	movs.w	r9, r0, asr #16
 801adf8:	d423      	bmi.n	801ae42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801adfa:	f8d6 c008 	ldr.w	ip, [r6, #8]
 801adfe:	45cc      	cmp	ip, r9
 801ae00:	dd1f      	ble.n	801ae42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ae02:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801ae06:	d41c      	bmi.n	801ae42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ae08:	68f1      	ldr	r1, [r6, #12]
 801ae0a:	4551      	cmp	r1, sl
 801ae0c:	dd19      	ble.n	801ae42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 801ae0e:	fa0f fc8c 	sxth.w	ip, ip
 801ae12:	9901      	ldr	r1, [sp, #4]
 801ae14:	fb0a 1c0c 	mla	ip, sl, ip, r1
 801ae18:	f81c c009 	ldrb.w	ip, [ip, r9]
 801ae1c:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801ae20:	f817 a00c 	ldrb.w	sl, [r7, ip]
 801ae24:	eb07 090c 	add.w	r9, r7, ip
 801ae28:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 801ae2c:	f804 a00c 	strb.w	sl, [r4, ip]
 801ae30:	44a4      	add	ip, r4
 801ae32:	f899 a001 	ldrb.w	sl, [r9, #1]
 801ae36:	f88c a001 	strb.w	sl, [ip, #1]
 801ae3a:	f899 9002 	ldrb.w	r9, [r9, #2]
 801ae3e:	f88c 9002 	strb.w	r9, [ip, #2]
 801ae42:	4440      	add	r0, r8
 801ae44:	4472      	add	r2, lr
 801ae46:	3501      	adds	r5, #1
 801ae48:	e793      	b.n	801ad72 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 801ae4a:	b003      	add	sp, #12
 801ae4c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ae50 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ae50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ae54:	b085      	sub	sp, #20
 801ae56:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ae5a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ae5c:	9202      	str	r2, [sp, #8]
 801ae5e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801ae62:	6860      	ldr	r0, [r4, #4]
 801ae64:	9203      	str	r2, [sp, #12]
 801ae66:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801ae6a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801ae6e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801ae72:	fb00 2505 	mla	r5, r0, r5, r2
 801ae76:	6822      	ldr	r2, [r4, #0]
 801ae78:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ae7c:	4415      	add	r5, r2
 801ae7e:	f8dc 2000 	ldr.w	r2, [ip]
 801ae82:	9200      	str	r2, [sp, #0]
 801ae84:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801ae88:	3204      	adds	r2, #4
 801ae8a:	9201      	str	r2, [sp, #4]
 801ae8c:	2900      	cmp	r1, #0
 801ae8e:	dc03      	bgt.n	801ae98 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ae90:	9a02      	ldr	r2, [sp, #8]
 801ae92:	2a00      	cmp	r2, #0
 801ae94:	f340 8127 	ble.w	801b0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801ae98:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ae9a:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801ae9e:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801aea2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aea4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801aea8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801aeac:	2b00      	cmp	r3, #0
 801aeae:	dd0d      	ble.n	801aecc <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801aeb0:	1422      	asrs	r2, r4, #16
 801aeb2:	d405      	bmi.n	801aec0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aeb4:	4542      	cmp	r2, r8
 801aeb6:	da03      	bge.n	801aec0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aeb8:	1402      	asrs	r2, r0, #16
 801aeba:	d401      	bmi.n	801aec0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801aebc:	42ba      	cmp	r2, r7
 801aebe:	db06      	blt.n	801aece <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801aec0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801aec2:	4474      	add	r4, lr
 801aec4:	3b01      	subs	r3, #1
 801aec6:	3503      	adds	r5, #3
 801aec8:	4410      	add	r0, r2
 801aeca:	e7ef      	b.n	801aeac <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801aecc:	d075      	beq.n	801afba <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 801aece:	1e5a      	subs	r2, r3, #1
 801aed0:	fb0e 4602 	mla	r6, lr, r2, r4
 801aed4:	1436      	asrs	r6, r6, #16
 801aed6:	d465      	bmi.n	801afa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801aed8:	4546      	cmp	r6, r8
 801aeda:	da63      	bge.n	801afa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801aedc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801aede:	fb06 0202 	mla	r2, r6, r2, r0
 801aee2:	1412      	asrs	r2, r2, #16
 801aee4:	d45e      	bmi.n	801afa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801aee6:	42ba      	cmp	r2, r7
 801aee8:	da5c      	bge.n	801afa4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801aeea:	1cef      	adds	r7, r5, #3
 801aeec:	4699      	mov	r9, r3
 801aeee:	f1b9 0f00 	cmp.w	r9, #0
 801aef2:	dd5d      	ble.n	801afb0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 801aef4:	1402      	asrs	r2, r0, #16
 801aef6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801aefa:	1426      	asrs	r6, r4, #16
 801aefc:	4692      	mov	sl, r2
 801aefe:	9a00      	ldr	r2, [sp, #0]
 801af00:	fb08 220a 	mla	r2, r8, sl, r2
 801af04:	5d92      	ldrb	r2, [r2, r6]
 801af06:	9e01      	ldr	r6, [sp, #4]
 801af08:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801af0c:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801af10:	d041      	beq.n	801af96 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801af12:	9a03      	ldr	r2, [sp, #12]
 801af14:	fa5f fb86 	uxtb.w	fp, r6
 801af18:	fb02 f808 	mul.w	r8, r2, r8
 801af1c:	f108 0201 	add.w	r2, r8, #1
 801af20:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801af24:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801af28:	1212      	asrs	r2, r2, #8
 801af2a:	fa1f fa82 	uxth.w	sl, r2
 801af2e:	43d2      	mvns	r2, r2
 801af30:	fb1b fb0a 	smulbb	fp, fp, sl
 801af34:	b2d2      	uxtb	r2, r2
 801af36:	fb08 b802 	mla	r8, r8, r2, fp
 801af3a:	fa1f f888 	uxth.w	r8, r8
 801af3e:	f108 0b01 	add.w	fp, r8, #1
 801af42:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801af46:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801af4a:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801af4e:	fb1b fb0a 	smulbb	fp, fp, sl
 801af52:	ea4f 2828 	mov.w	r8, r8, asr #8
 801af56:	fb16 fa0a 	smulbb	sl, r6, sl
 801af5a:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801af5e:	f807 8c03 	strb.w	r8, [r7, #-3]
 801af62:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801af66:	fb06 aa02 	mla	sl, r6, r2, sl
 801af6a:	fb08 b802 	mla	r8, r8, r2, fp
 801af6e:	fa1f fa8a 	uxth.w	sl, sl
 801af72:	fa1f f888 	uxth.w	r8, r8
 801af76:	f10a 0601 	add.w	r6, sl, #1
 801af7a:	f108 0b01 	add.w	fp, r8, #1
 801af7e:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801af82:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801af86:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801af8a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801af8e:	f807 ac01 	strb.w	sl, [r7, #-1]
 801af92:	f807 8c02 	strb.w	r8, [r7, #-2]
 801af96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801af98:	4474      	add	r4, lr
 801af9a:	3703      	adds	r7, #3
 801af9c:	f109 39ff 	add.w	r9, r9, #4294967295
 801afa0:	4410      	add	r0, r2
 801afa2:	e7a4      	b.n	801aeee <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 801afa4:	f04f 0800 	mov.w	r8, #0
 801afa8:	eba3 0208 	sub.w	r2, r3, r8
 801afac:	2a00      	cmp	r2, #0
 801afae:	dc3b      	bgt.n	801b028 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 801afb0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801afb4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801afb8:	441d      	add	r5, r3
 801afba:	2900      	cmp	r1, #0
 801afbc:	f340 8093 	ble.w	801b0e6 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 801afc0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801afc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801afc6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801afca:	3901      	subs	r1, #1
 801afcc:	eeb0 6a62 	vmov.f32	s12, s5
 801afd0:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801afd4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afd8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afdc:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801afe0:	eeb0 6a43 	vmov.f32	s12, s6
 801afe4:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afe8:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801afec:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aff0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aff4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aff8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801affc:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b000:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b004:	ee12 2a90 	vmov	r2, s5
 801b008:	eef0 2a47 	vmov.f32	s5, s14
 801b00c:	fb92 fef3 	sdiv	lr, r2, r3
 801b010:	ee13 2a10 	vmov	r2, s6
 801b014:	eeb0 3a67 	vmov.f32	s6, s15
 801b018:	fb92 f3f3 	sdiv	r3, r2, r3
 801b01c:	9a02      	ldr	r2, [sp, #8]
 801b01e:	9312      	str	r3, [sp, #72]	@ 0x48
 801b020:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b022:	bf08      	it	eq
 801b024:	4613      	moveq	r3, r2
 801b026:	e731      	b.n	801ae8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801b028:	1427      	asrs	r7, r4, #16
 801b02a:	d456      	bmi.n	801b0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b02c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b030:	42be      	cmp	r6, r7
 801b032:	dd52      	ble.n	801b0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b034:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b038:	d44f      	bmi.n	801b0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b03a:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b03e:	454a      	cmp	r2, r9
 801b040:	dd4b      	ble.n	801b0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b042:	9a00      	ldr	r2, [sp, #0]
 801b044:	b236      	sxth	r6, r6
 801b046:	fb09 2606 	mla	r6, r9, r6, r2
 801b04a:	5df2      	ldrb	r2, [r6, r7]
 801b04c:	9e01      	ldr	r6, [sp, #4]
 801b04e:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801b052:	0e3a      	lsrs	r2, r7, #24
 801b054:	d041      	beq.n	801b0da <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801b056:	9e03      	ldr	r6, [sp, #12]
 801b058:	fa5f fb87 	uxtb.w	fp, r7
 801b05c:	4372      	muls	r2, r6
 801b05e:	1c56      	adds	r6, r2, #1
 801b060:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b064:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b068:	1212      	asrs	r2, r2, #8
 801b06a:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b06e:	fa1f fa82 	uxth.w	sl, r2
 801b072:	43d2      	mvns	r2, r2
 801b074:	fb1b fb0a 	smulbb	fp, fp, sl
 801b078:	b2d2      	uxtb	r2, r2
 801b07a:	fb09 b902 	mla	r9, r9, r2, fp
 801b07e:	fa1f f989 	uxth.w	r9, r9
 801b082:	f109 0b01 	add.w	fp, r9, #1
 801b086:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b08a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b08e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b092:	fb1b fb0a 	smulbb	fp, fp, sl
 801b096:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b09a:	fb17 fa0a 	smulbb	sl, r7, sl
 801b09e:	f805 9006 	strb.w	r9, [r5, r6]
 801b0a2:	442e      	add	r6, r5
 801b0a4:	78b7      	ldrb	r7, [r6, #2]
 801b0a6:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b0aa:	fb07 aa02 	mla	sl, r7, r2, sl
 801b0ae:	fb09 b902 	mla	r9, r9, r2, fp
 801b0b2:	fa1f fa8a 	uxth.w	sl, sl
 801b0b6:	fa1f f989 	uxth.w	r9, r9
 801b0ba:	f10a 0701 	add.w	r7, sl, #1
 801b0be:	f109 0b01 	add.w	fp, r9, #1
 801b0c2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b0c6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b0ca:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b0ce:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b0d2:	f886 a002 	strb.w	sl, [r6, #2]
 801b0d6:	f886 9001 	strb.w	r9, [r6, #1]
 801b0da:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b0dc:	4474      	add	r4, lr
 801b0de:	f108 0801 	add.w	r8, r8, #1
 801b0e2:	4410      	add	r0, r2
 801b0e4:	e760      	b.n	801afa8 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 801b0e6:	b005      	add	sp, #20
 801b0e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b0ec <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b0ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b0f0:	b085      	sub	sp, #20
 801b0f2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b0f6:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 801b0f8:	9203      	str	r2, [sp, #12]
 801b0fa:	6868      	ldr	r0, [r5, #4]
 801b0fc:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b100:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b104:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801b108:	fb00 2404 	mla	r4, r0, r4, r2
 801b10c:	682a      	ldr	r2, [r5, #0]
 801b10e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b112:	4414      	add	r4, r2
 801b114:	f8dc 2000 	ldr.w	r2, [ip]
 801b118:	9201      	str	r2, [sp, #4]
 801b11a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 801b11e:	3204      	adds	r2, #4
 801b120:	9202      	str	r2, [sp, #8]
 801b122:	2900      	cmp	r1, #0
 801b124:	dc03      	bgt.n	801b12e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801b126:	9a03      	ldr	r2, [sp, #12]
 801b128:	2a00      	cmp	r2, #0
 801b12a:	f340 8137 	ble.w	801b39c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b12e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b130:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b134:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b138:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b13a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b13e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b142:	2b00      	cmp	r3, #0
 801b144:	dd0d      	ble.n	801b162 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b146:	1405      	asrs	r5, r0, #16
 801b148:	d405      	bmi.n	801b156 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b14a:	4545      	cmp	r5, r8
 801b14c:	da03      	bge.n	801b156 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b14e:	1415      	asrs	r5, r2, #16
 801b150:	d401      	bmi.n	801b156 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801b152:	42bd      	cmp	r5, r7
 801b154:	db06      	blt.n	801b164 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801b156:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b158:	4470      	add	r0, lr
 801b15a:	3b01      	subs	r3, #1
 801b15c:	3403      	adds	r4, #3
 801b15e:	442a      	add	r2, r5
 801b160:	e7ef      	b.n	801b142 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801b162:	d070      	beq.n	801b246 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801b164:	1e5d      	subs	r5, r3, #1
 801b166:	fb0e 0605 	mla	r6, lr, r5, r0
 801b16a:	1436      	asrs	r6, r6, #16
 801b16c:	d462      	bmi.n	801b234 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b16e:	4546      	cmp	r6, r8
 801b170:	da60      	bge.n	801b234 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b172:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b174:	fb06 2505 	mla	r5, r6, r5, r2
 801b178:	142d      	asrs	r5, r5, #16
 801b17a:	d45b      	bmi.n	801b234 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b17c:	42bd      	cmp	r5, r7
 801b17e:	da59      	bge.n	801b234 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801b180:	1ce5      	adds	r5, r4, #3
 801b182:	469a      	mov	sl, r3
 801b184:	f1ba 0f00 	cmp.w	sl, #0
 801b188:	dd58      	ble.n	801b23c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801b18a:	1416      	asrs	r6, r2, #16
 801b18c:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b190:	1407      	asrs	r7, r0, #16
 801b192:	46b1      	mov	r9, r6
 801b194:	9e01      	ldr	r6, [sp, #4]
 801b196:	fb08 6609 	mla	r6, r8, r9, r6
 801b19a:	5df6      	ldrb	r6, [r6, r7]
 801b19c:	9f02      	ldr	r7, [sp, #8]
 801b19e:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801b1a2:	0e37      	lsrs	r7, r6, #24
 801b1a4:	2fff      	cmp	r7, #255	@ 0xff
 801b1a6:	f000 80f0 	beq.w	801b38a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801b1aa:	fa5f f887 	uxtb.w	r8, r7
 801b1ae:	b3d7      	cbz	r7, 801b226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b1b0:	fa1f f788 	uxth.w	r7, r8
 801b1b4:	ea6f 0808 	mvn.w	r8, r8
 801b1b8:	fa5f fb86 	uxtb.w	fp, r6
 801b1bc:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801b1c0:	fa5f f888 	uxtb.w	r8, r8
 801b1c4:	fb1b fb07 	smulbb	fp, fp, r7
 801b1c8:	fb09 b908 	mla	r9, r9, r8, fp
 801b1cc:	fa1f f989 	uxth.w	r9, r9
 801b1d0:	f109 0b01 	add.w	fp, r9, #1
 801b1d4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b1d8:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 801b1dc:	fb1b fb08 	smulbb	fp, fp, r8
 801b1e0:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b1e4:	f805 9c03 	strb.w	r9, [r5, #-3]
 801b1e8:	f3c6 2907 	ubfx	r9, r6, #8, #8
 801b1ec:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b1f0:	fb09 b907 	mla	r9, r9, r7, fp
 801b1f4:	fa1f f989 	uxth.w	r9, r9
 801b1f8:	f109 0b01 	add.w	fp, r9, #1
 801b1fc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b200:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b204:	f805 9c02 	strb.w	r9, [r5, #-2]
 801b208:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 801b20c:	fb19 f808 	smulbb	r8, r9, r8
 801b210:	fb06 8607 	mla	r6, r6, r7, r8
 801b214:	b2b6      	uxth	r6, r6
 801b216:	f106 0801 	add.w	r8, r6, #1
 801b21a:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 801b21e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b222:	f805 8c01 	strb.w	r8, [r5, #-1]
 801b226:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b228:	4470      	add	r0, lr
 801b22a:	3503      	adds	r5, #3
 801b22c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b230:	4432      	add	r2, r6
 801b232:	e7a7      	b.n	801b184 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b234:	2600      	movs	r6, #0
 801b236:	1b9d      	subs	r5, r3, r6
 801b238:	2d00      	cmp	r5, #0
 801b23a:	dc3b      	bgt.n	801b2b4 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 801b23c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b240:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b244:	441c      	add	r4, r3
 801b246:	2900      	cmp	r1, #0
 801b248:	f340 80a8 	ble.w	801b39c <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801b24c:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b250:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b252:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b256:	3901      	subs	r1, #1
 801b258:	eeb0 6a62 	vmov.f32	s12, s5
 801b25c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b260:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b264:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b268:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b26c:	eeb0 6a43 	vmov.f32	s12, s6
 801b270:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b274:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b278:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b27c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b280:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b284:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b288:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b28c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b290:	ee12 2a90 	vmov	r2, s5
 801b294:	eef0 2a47 	vmov.f32	s5, s14
 801b298:	fb92 fef3 	sdiv	lr, r2, r3
 801b29c:	ee13 2a10 	vmov	r2, s6
 801b2a0:	eeb0 3a67 	vmov.f32	s6, s15
 801b2a4:	fb92 f3f3 	sdiv	r3, r2, r3
 801b2a8:	9a03      	ldr	r2, [sp, #12]
 801b2aa:	9312      	str	r3, [sp, #72]	@ 0x48
 801b2ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b2ae:	bf08      	it	eq
 801b2b0:	4613      	moveq	r3, r2
 801b2b2:	e736      	b.n	801b122 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b2b4:	ea5f 4820 	movs.w	r8, r0, asr #16
 801b2b8:	d457      	bmi.n	801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2ba:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801b2be:	4547      	cmp	r7, r8
 801b2c0:	dd53      	ble.n	801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2c2:	ea5f 4922 	movs.w	r9, r2, asr #16
 801b2c6:	d450      	bmi.n	801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2c8:	f8dc 500c 	ldr.w	r5, [ip, #12]
 801b2cc:	454d      	cmp	r5, r9
 801b2ce:	dd4c      	ble.n	801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2d0:	9d01      	ldr	r5, [sp, #4]
 801b2d2:	b23f      	sxth	r7, r7
 801b2d4:	fb09 5707 	mla	r7, r9, r7, r5
 801b2d8:	f817 5008 	ldrb.w	r5, [r7, r8]
 801b2dc:	9f02      	ldr	r7, [sp, #8]
 801b2de:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801b2e2:	0e2f      	lsrs	r7, r5, #24
 801b2e4:	2fff      	cmp	r7, #255	@ 0xff
 801b2e6:	d045      	beq.n	801b374 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 801b2e8:	fa5f f987 	uxtb.w	r9, r7
 801b2ec:	b3ef      	cbz	r7, 801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b2ee:	fa1f f889 	uxth.w	r8, r9
 801b2f2:	ea6f 0909 	mvn.w	r9, r9
 801b2f6:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b2fa:	fa5f fb85 	uxtb.w	fp, r5
 801b2fe:	f814 a007 	ldrb.w	sl, [r4, r7]
 801b302:	fa5f f989 	uxtb.w	r9, r9
 801b306:	fb1b fb08 	smulbb	fp, fp, r8
 801b30a:	fb0a ba09 	mla	sl, sl, r9, fp
 801b30e:	fa1f fa8a 	uxth.w	sl, sl
 801b312:	f10a 0b01 	add.w	fp, sl, #1
 801b316:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b31a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b31e:	f804 a007 	strb.w	sl, [r4, r7]
 801b322:	4427      	add	r7, r4
 801b324:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b328:	f3c5 4507 	ubfx	r5, r5, #16, #8
 801b32c:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b330:	fb1b fb09 	smulbb	fp, fp, r9
 801b334:	fb0a ba08 	mla	sl, sl, r8, fp
 801b338:	fa1f fa8a 	uxth.w	sl, sl
 801b33c:	f10a 0b01 	add.w	fp, sl, #1
 801b340:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 801b344:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b348:	f887 a001 	strb.w	sl, [r7, #1]
 801b34c:	f897 a002 	ldrb.w	sl, [r7, #2]
 801b350:	fb1a f909 	smulbb	r9, sl, r9
 801b354:	fb05 9508 	mla	r5, r5, r8, r9
 801b358:	b2ad      	uxth	r5, r5
 801b35a:	f105 0901 	add.w	r9, r5, #1
 801b35e:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801b362:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b366:	f887 9002 	strb.w	r9, [r7, #2]
 801b36a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801b36c:	4470      	add	r0, lr
 801b36e:	3601      	adds	r6, #1
 801b370:	442a      	add	r2, r5
 801b372:	e760      	b.n	801b236 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801b374:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801b378:	ea4f 2815 	mov.w	r8, r5, lsr #8
 801b37c:	55e5      	strb	r5, [r4, r7]
 801b37e:	4427      	add	r7, r4
 801b380:	0c2d      	lsrs	r5, r5, #16
 801b382:	f887 8001 	strb.w	r8, [r7, #1]
 801b386:	70bd      	strb	r5, [r7, #2]
 801b388:	e7ef      	b.n	801b36a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801b38a:	0a37      	lsrs	r7, r6, #8
 801b38c:	f805 6c03 	strb.w	r6, [r5, #-3]
 801b390:	0c36      	lsrs	r6, r6, #16
 801b392:	f805 7c02 	strb.w	r7, [r5, #-2]
 801b396:	f805 6c01 	strb.w	r6, [r5, #-1]
 801b39a:	e744      	b.n	801b226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801b39c:	b005      	add	sp, #20
 801b39e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b3a2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3a6:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801b3a8:	9201      	str	r2, [sp, #4]
 801b3aa:	6870      	ldr	r0, [r6, #4]
 801b3ac:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801b3b0:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801b3b4:	fa1f fe85 	uxth.w	lr, r5
 801b3b8:	43ed      	mvns	r5, r5
 801b3ba:	f8dc 8000 	ldr.w	r8, [ip]
 801b3be:	b2ed      	uxtb	r5, r5
 801b3c0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b3c4:	fb00 2404 	mla	r4, r0, r4, r2
 801b3c8:	6832      	ldr	r2, [r6, #0]
 801b3ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b3ce:	4414      	add	r4, r2
 801b3d0:	2900      	cmp	r1, #0
 801b3d2:	dc03      	bgt.n	801b3dc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801b3d4:	9a01      	ldr	r2, [sp, #4]
 801b3d6:	2a00      	cmp	r2, #0
 801b3d8:	f340 810d 	ble.w	801b5f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b3dc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b3de:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801b3e2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b3e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3e8:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 801b3ec:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b3f0:	2b00      	cmp	r3, #0
 801b3f2:	dd0e      	ble.n	801b412 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 801b3f4:	1406      	asrs	r6, r0, #16
 801b3f6:	d405      	bmi.n	801b404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b3f8:	4556      	cmp	r6, sl
 801b3fa:	da03      	bge.n	801b404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b3fc:	1416      	asrs	r6, r2, #16
 801b3fe:	d401      	bmi.n	801b404 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 801b400:	454e      	cmp	r6, r9
 801b402:	db07      	blt.n	801b414 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801b404:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b406:	3b01      	subs	r3, #1
 801b408:	3403      	adds	r4, #3
 801b40a:	4430      	add	r0, r6
 801b40c:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b40e:	4432      	add	r2, r6
 801b410:	e7ee      	b.n	801b3f0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 801b412:	d060      	beq.n	801b4d6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 801b414:	1e5e      	subs	r6, r3, #1
 801b416:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b418:	fb07 0706 	mla	r7, r7, r6, r0
 801b41c:	143f      	asrs	r7, r7, #16
 801b41e:	d451      	bmi.n	801b4c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b420:	4557      	cmp	r7, sl
 801b422:	da4f      	bge.n	801b4c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b424:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b426:	fb07 2606 	mla	r6, r7, r6, r2
 801b42a:	1436      	asrs	r6, r6, #16
 801b42c:	d44a      	bmi.n	801b4c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b42e:	454e      	cmp	r6, r9
 801b430:	da48      	bge.n	801b4c4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 801b432:	1ce6      	adds	r6, r4, #3
 801b434:	4699      	mov	r9, r3
 801b436:	f1b9 0f00 	cmp.w	r9, #0
 801b43a:	f106 0603 	add.w	r6, r6, #3
 801b43e:	dd45      	ble.n	801b4cc <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 801b440:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 801b444:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b448:	1417      	asrs	r7, r2, #16
 801b44a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b44e:	fb0b a707 	mla	r7, fp, r7, sl
 801b452:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801b456:	fb1b fb05 	smulbb	fp, fp, r5
 801b45a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b45e:	eb08 0a07 	add.w	sl, r8, r7
 801b462:	f818 7007 	ldrb.w	r7, [r8, r7]
 801b466:	fb07 b70e 	mla	r7, r7, lr, fp
 801b46a:	b2bf      	uxth	r7, r7
 801b46c:	f107 0b01 	add.w	fp, r7, #1
 801b470:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b474:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801b478:	fb1b fb05 	smulbb	fp, fp, r5
 801b47c:	123f      	asrs	r7, r7, #8
 801b47e:	f806 7c06 	strb.w	r7, [r6, #-6]
 801b482:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801b486:	fb07 b70e 	mla	r7, r7, lr, fp
 801b48a:	b2bf      	uxth	r7, r7
 801b48c:	f107 0b01 	add.w	fp, r7, #1
 801b490:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 801b494:	123f      	asrs	r7, r7, #8
 801b496:	f806 7c05 	strb.w	r7, [r6, #-5]
 801b49a:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801b49e:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801b4a2:	fb1a fa05 	smulbb	sl, sl, r5
 801b4a6:	fb07 a70e 	mla	r7, r7, lr, sl
 801b4aa:	b2bf      	uxth	r7, r7
 801b4ac:	f107 0a01 	add.w	sl, r7, #1
 801b4b0:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801b4b4:	123f      	asrs	r7, r7, #8
 801b4b6:	f806 7c04 	strb.w	r7, [r6, #-4]
 801b4ba:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 801b4bc:	4438      	add	r0, r7
 801b4be:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801b4c0:	443a      	add	r2, r7
 801b4c2:	e7b8      	b.n	801b436 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b4c4:	2700      	movs	r7, #0
 801b4c6:	1bde      	subs	r6, r3, r7
 801b4c8:	2e00      	cmp	r6, #0
 801b4ca:	dc3f      	bgt.n	801b54c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 801b4cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b4d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b4d4:	441c      	add	r4, r3
 801b4d6:	2900      	cmp	r1, #0
 801b4d8:	f340 808d 	ble.w	801b5f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 801b4dc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b4e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b4e2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b4e6:	3901      	subs	r1, #1
 801b4e8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b4ec:	eef0 6a62 	vmov.f32	s13, s5
 801b4f0:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b4f4:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b4f8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b4fc:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 801b500:	eef0 6a43 	vmov.f32	s13, s6
 801b504:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b508:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 801b50c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b510:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b514:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b518:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b51c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b520:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b524:	ee12 2a90 	vmov	r2, s5
 801b528:	eef0 2a47 	vmov.f32	s5, s14
 801b52c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b530:	ee13 2a10 	vmov	r2, s6
 801b534:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b536:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b538:	eeb0 3a67 	vmov.f32	s6, s15
 801b53c:	fb92 f3f3 	sdiv	r3, r2, r3
 801b540:	9a01      	ldr	r2, [sp, #4]
 801b542:	9310      	str	r3, [sp, #64]	@ 0x40
 801b544:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b546:	bf08      	it	eq
 801b548:	4613      	moveq	r3, r2
 801b54a:	e741      	b.n	801b3d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801b54c:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b550:	d44b      	bmi.n	801b5ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b552:	f8dc b008 	ldr.w	fp, [ip, #8]
 801b556:	45cb      	cmp	fp, r9
 801b558:	dd47      	ble.n	801b5ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b55a:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b55e:	d444      	bmi.n	801b5ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b560:	f8dc 600c 	ldr.w	r6, [ip, #12]
 801b564:	4556      	cmp	r6, sl
 801b566:	dd40      	ble.n	801b5ea <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801b568:	fa0f f68b 	sxth.w	r6, fp
 801b56c:	fb0a 9906 	mla	r9, sl, r6, r9
 801b570:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801b574:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801b578:	f814 b006 	ldrb.w	fp, [r4, r6]
 801b57c:	fb1b fb05 	smulbb	fp, fp, r5
 801b580:	eb08 0a09 	add.w	sl, r8, r9
 801b584:	f818 9009 	ldrb.w	r9, [r8, r9]
 801b588:	fb09 b90e 	mla	r9, r9, lr, fp
 801b58c:	fa1f f989 	uxth.w	r9, r9
 801b590:	f109 0b01 	add.w	fp, r9, #1
 801b594:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b598:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b59c:	f804 9006 	strb.w	r9, [r4, r6]
 801b5a0:	4426      	add	r6, r4
 801b5a2:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801b5a6:	f896 b001 	ldrb.w	fp, [r6, #1]
 801b5aa:	fb1b fb05 	smulbb	fp, fp, r5
 801b5ae:	fb09 b90e 	mla	r9, r9, lr, fp
 801b5b2:	fa1f f989 	uxth.w	r9, r9
 801b5b6:	f109 0b01 	add.w	fp, r9, #1
 801b5ba:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b5be:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b5c2:	f886 9001 	strb.w	r9, [r6, #1]
 801b5c6:	f89a 9002 	ldrb.w	r9, [sl, #2]
 801b5ca:	f896 a002 	ldrb.w	sl, [r6, #2]
 801b5ce:	fb1a fa05 	smulbb	sl, sl, r5
 801b5d2:	fb09 a90e 	mla	r9, r9, lr, sl
 801b5d6:	fa1f f989 	uxth.w	r9, r9
 801b5da:	f109 0a01 	add.w	sl, r9, #1
 801b5de:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801b5e2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b5e6:	f886 9002 	strb.w	r9, [r6, #2]
 801b5ea:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801b5ec:	3701      	adds	r7, #1
 801b5ee:	4430      	add	r0, r6
 801b5f0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801b5f2:	4432      	add	r2, r6
 801b5f4:	e767      	b.n	801b4c6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 801b5f6:	b003      	add	sp, #12
 801b5f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b5fc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b5fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b600:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 801b602:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b606:	9201      	str	r2, [sp, #4]
 801b608:	6868      	ldr	r0, [r5, #4]
 801b60a:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 801b60c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 801b610:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 801b614:	fb00 2404 	mla	r4, r0, r4, r2
 801b618:	682a      	ldr	r2, [r5, #0]
 801b61a:	f8d7 8000 	ldr.w	r8, [r7]
 801b61e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b622:	4414      	add	r4, r2
 801b624:	2900      	cmp	r1, #0
 801b626:	dc03      	bgt.n	801b630 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b628:	9a01      	ldr	r2, [sp, #4]
 801b62a:	2a00      	cmp	r2, #0
 801b62c:	f340 80af 	ble.w	801b78e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b630:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801b632:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801b636:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b63a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b63c:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 801b640:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801b644:	2b00      	cmp	r3, #0
 801b646:	dd0c      	ble.n	801b662 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801b648:	1405      	asrs	r5, r0, #16
 801b64a:	d405      	bmi.n	801b658 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b64c:	4555      	cmp	r5, sl
 801b64e:	da03      	bge.n	801b658 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b650:	1415      	asrs	r5, r2, #16
 801b652:	d401      	bmi.n	801b658 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801b654:	454d      	cmp	r5, r9
 801b656:	db05      	blt.n	801b664 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b658:	4470      	add	r0, lr
 801b65a:	4462      	add	r2, ip
 801b65c:	3b01      	subs	r3, #1
 801b65e:	3403      	adds	r4, #3
 801b660:	e7f0      	b.n	801b644 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801b662:	d038      	beq.n	801b6d6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 801b664:	1e5d      	subs	r5, r3, #1
 801b666:	fb0e 0605 	mla	r6, lr, r5, r0
 801b66a:	1436      	asrs	r6, r6, #16
 801b66c:	d42a      	bmi.n	801b6c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b66e:	4556      	cmp	r6, sl
 801b670:	da28      	bge.n	801b6c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b672:	fb0c 2505 	mla	r5, ip, r5, r2
 801b676:	142d      	asrs	r5, r5, #16
 801b678:	d424      	bmi.n	801b6c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b67a:	454d      	cmp	r5, r9
 801b67c:	da22      	bge.n	801b6c4 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801b67e:	1ce6      	adds	r6, r4, #3
 801b680:	4699      	mov	r9, r3
 801b682:	f1b9 0f00 	cmp.w	r9, #0
 801b686:	f106 0603 	add.w	r6, r6, #3
 801b68a:	dd1f      	ble.n	801b6cc <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 801b68c:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801b690:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801b694:	1415      	asrs	r5, r2, #16
 801b696:	4470      	add	r0, lr
 801b698:	4462      	add	r2, ip
 801b69a:	f109 39ff 	add.w	r9, r9, #4294967295
 801b69e:	fb0b a505 	mla	r5, fp, r5, sl
 801b6a2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b6a6:	eb08 0a05 	add.w	sl, r8, r5
 801b6aa:	f818 5005 	ldrb.w	r5, [r8, r5]
 801b6ae:	f806 5c06 	strb.w	r5, [r6, #-6]
 801b6b2:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b6b6:	f806 5c05 	strb.w	r5, [r6, #-5]
 801b6ba:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801b6be:	f806 5c04 	strb.w	r5, [r6, #-4]
 801b6c2:	e7de      	b.n	801b682 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801b6c4:	2600      	movs	r6, #0
 801b6c6:	1b9d      	subs	r5, r3, r6
 801b6c8:	2d00      	cmp	r5, #0
 801b6ca:	dc38      	bgt.n	801b73e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801b6cc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b6d0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b6d4:	441c      	add	r4, r3
 801b6d6:	2900      	cmp	r1, #0
 801b6d8:	dd59      	ble.n	801b78e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 801b6da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b6de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b6e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b6e4:	3901      	subs	r1, #1
 801b6e6:	eeb0 6a62 	vmov.f32	s12, s5
 801b6ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b6ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b6f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b6f6:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801b6fa:	eeb0 6a43 	vmov.f32	s12, s6
 801b6fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b702:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801b706:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b70a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b70e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b712:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b716:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b71a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b71e:	ee12 2a90 	vmov	r2, s5
 801b722:	eef0 2a47 	vmov.f32	s5, s14
 801b726:	fb92 fef3 	sdiv	lr, r2, r3
 801b72a:	ee13 2a10 	vmov	r2, s6
 801b72e:	eeb0 3a67 	vmov.f32	s6, s15
 801b732:	fb92 fcf3 	sdiv	ip, r2, r3
 801b736:	9a01      	ldr	r2, [sp, #4]
 801b738:	bf08      	it	eq
 801b73a:	4613      	moveq	r3, r2
 801b73c:	e772      	b.n	801b624 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801b73e:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b742:	d420      	bmi.n	801b786 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b744:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801b748:	45cb      	cmp	fp, r9
 801b74a:	dd1c      	ble.n	801b786 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b74c:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801b750:	d419      	bmi.n	801b786 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b752:	68fd      	ldr	r5, [r7, #12]
 801b754:	4555      	cmp	r5, sl
 801b756:	dd16      	ble.n	801b786 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801b758:	fa0f f58b 	sxth.w	r5, fp
 801b75c:	fb0a 9505 	mla	r5, sl, r5, r9
 801b760:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b764:	f818 9005 	ldrb.w	r9, [r8, r5]
 801b768:	eb08 0b05 	add.w	fp, r8, r5
 801b76c:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801b770:	f804 9005 	strb.w	r9, [r4, r5]
 801b774:	4425      	add	r5, r4
 801b776:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801b77a:	f885 9001 	strb.w	r9, [r5, #1]
 801b77e:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801b782:	f885 9002 	strb.w	r9, [r5, #2]
 801b786:	4470      	add	r0, lr
 801b788:	4462      	add	r2, ip
 801b78a:	3601      	adds	r6, #1
 801b78c:	e79b      	b.n	801b6c6 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801b78e:	b003      	add	sp, #12
 801b790:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b794 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b798:	b085      	sub	sp, #20
 801b79a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801b79e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b7a0:	9202      	str	r2, [sp, #8]
 801b7a2:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801b7a6:	6860      	ldr	r0, [r4, #4]
 801b7a8:	9203      	str	r2, [sp, #12]
 801b7aa:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801b7ae:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801b7b2:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801b7b6:	fb00 2505 	mla	r5, r0, r5, r2
 801b7ba:	6822      	ldr	r2, [r4, #0]
 801b7bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b7c0:	4415      	add	r5, r2
 801b7c2:	f8dc 2000 	ldr.w	r2, [ip]
 801b7c6:	9201      	str	r2, [sp, #4]
 801b7c8:	2900      	cmp	r1, #0
 801b7ca:	dc03      	bgt.n	801b7d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 801b7cc:	9a02      	ldr	r2, [sp, #8]
 801b7ce:	2a00      	cmp	r2, #0
 801b7d0:	f340 8122 	ble.w	801ba18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b7d4:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b7d6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b7da:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801b7de:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b7e0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801b7e4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801b7e8:	2b00      	cmp	r3, #0
 801b7ea:	dd0d      	ble.n	801b808 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801b7ec:	1422      	asrs	r2, r4, #16
 801b7ee:	d405      	bmi.n	801b7fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7f0:	4542      	cmp	r2, r8
 801b7f2:	da03      	bge.n	801b7fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7f4:	1402      	asrs	r2, r0, #16
 801b7f6:	d401      	bmi.n	801b7fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801b7f8:	42ba      	cmp	r2, r7
 801b7fa:	db06      	blt.n	801b80a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801b7fc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b7fe:	4474      	add	r4, lr
 801b800:	3b01      	subs	r3, #1
 801b802:	3503      	adds	r5, #3
 801b804:	4410      	add	r0, r2
 801b806:	e7ef      	b.n	801b7e8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 801b808:	d072      	beq.n	801b8f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 801b80a:	1e5a      	subs	r2, r3, #1
 801b80c:	fb0e 4602 	mla	r6, lr, r2, r4
 801b810:	1436      	asrs	r6, r6, #16
 801b812:	d462      	bmi.n	801b8da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b814:	4546      	cmp	r6, r8
 801b816:	da60      	bge.n	801b8da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b818:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801b81a:	fb06 0202 	mla	r2, r6, r2, r0
 801b81e:	1412      	asrs	r2, r2, #16
 801b820:	d45b      	bmi.n	801b8da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b822:	42ba      	cmp	r2, r7
 801b824:	da59      	bge.n	801b8da <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801b826:	1cef      	adds	r7, r5, #3
 801b828:	4699      	mov	r9, r3
 801b82a:	f1b9 0f00 	cmp.w	r9, #0
 801b82e:	dd5a      	ble.n	801b8e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801b830:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801b834:	1426      	asrs	r6, r4, #16
 801b836:	1402      	asrs	r2, r0, #16
 801b838:	fb08 6202 	mla	r2, r8, r2, r6
 801b83c:	9e01      	ldr	r6, [sp, #4]
 801b83e:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 801b842:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801b846:	d041      	beq.n	801b8cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801b848:	9a03      	ldr	r2, [sp, #12]
 801b84a:	fa5f fb86 	uxtb.w	fp, r6
 801b84e:	fb02 f808 	mul.w	r8, r2, r8
 801b852:	f108 0201 	add.w	r2, r8, #1
 801b856:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801b85a:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801b85e:	1212      	asrs	r2, r2, #8
 801b860:	fa1f fa82 	uxth.w	sl, r2
 801b864:	43d2      	mvns	r2, r2
 801b866:	fb1b fb0a 	smulbb	fp, fp, sl
 801b86a:	b2d2      	uxtb	r2, r2
 801b86c:	fb08 b802 	mla	r8, r8, r2, fp
 801b870:	fa1f f888 	uxth.w	r8, r8
 801b874:	f108 0b01 	add.w	fp, r8, #1
 801b878:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b87c:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801b880:	f3c6 4607 	ubfx	r6, r6, #16, #8
 801b884:	fb1b fb0a 	smulbb	fp, fp, sl
 801b888:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b88c:	fb16 fa0a 	smulbb	sl, r6, sl
 801b890:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 801b894:	f807 8c03 	strb.w	r8, [r7, #-3]
 801b898:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 801b89c:	fb06 aa02 	mla	sl, r6, r2, sl
 801b8a0:	fb08 b802 	mla	r8, r8, r2, fp
 801b8a4:	fa1f fa8a 	uxth.w	sl, sl
 801b8a8:	fa1f f888 	uxth.w	r8, r8
 801b8ac:	f10a 0601 	add.w	r6, sl, #1
 801b8b0:	f108 0b01 	add.w	fp, r8, #1
 801b8b4:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801b8b8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801b8bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b8c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 801b8c4:	f807 ac01 	strb.w	sl, [r7, #-1]
 801b8c8:	f807 8c02 	strb.w	r8, [r7, #-2]
 801b8cc:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b8ce:	4474      	add	r4, lr
 801b8d0:	3703      	adds	r7, #3
 801b8d2:	f109 39ff 	add.w	r9, r9, #4294967295
 801b8d6:	4410      	add	r0, r2
 801b8d8:	e7a7      	b.n	801b82a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801b8da:	f04f 0800 	mov.w	r8, #0
 801b8de:	eba3 0208 	sub.w	r2, r3, r8
 801b8e2:	2a00      	cmp	r2, #0
 801b8e4:	dc3b      	bgt.n	801b95e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 801b8e6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8ea:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8ee:	441d      	add	r5, r3
 801b8f0:	2900      	cmp	r1, #0
 801b8f2:	f340 8091 	ble.w	801ba18 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 801b8f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b8fa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b8fc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b900:	3901      	subs	r1, #1
 801b902:	eeb0 6a62 	vmov.f32	s12, s5
 801b906:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801b90a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b90e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b912:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801b916:	eeb0 6a43 	vmov.f32	s12, s6
 801b91a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801b91e:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801b922:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b926:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b92a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b92e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b932:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b936:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b93a:	ee12 2a90 	vmov	r2, s5
 801b93e:	eef0 2a47 	vmov.f32	s5, s14
 801b942:	fb92 fef3 	sdiv	lr, r2, r3
 801b946:	ee13 2a10 	vmov	r2, s6
 801b94a:	eeb0 3a67 	vmov.f32	s6, s15
 801b94e:	fb92 f3f3 	sdiv	r3, r2, r3
 801b952:	9a02      	ldr	r2, [sp, #8]
 801b954:	9312      	str	r3, [sp, #72]	@ 0x48
 801b956:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b958:	bf08      	it	eq
 801b95a:	4613      	moveq	r3, r2
 801b95c:	e734      	b.n	801b7c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801b95e:	1427      	asrs	r7, r4, #16
 801b960:	d454      	bmi.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b962:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801b966:	42be      	cmp	r6, r7
 801b968:	dd50      	ble.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b96a:	ea5f 4920 	movs.w	r9, r0, asr #16
 801b96e:	d44d      	bmi.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b970:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801b974:	454a      	cmp	r2, r9
 801b976:	dd49      	ble.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b978:	b236      	sxth	r6, r6
 801b97a:	9a01      	ldr	r2, [sp, #4]
 801b97c:	fb09 7606 	mla	r6, r9, r6, r7
 801b980:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801b984:	0e3a      	lsrs	r2, r7, #24
 801b986:	d041      	beq.n	801ba0c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801b988:	9e03      	ldr	r6, [sp, #12]
 801b98a:	fa5f fb87 	uxtb.w	fp, r7
 801b98e:	4372      	muls	r2, r6
 801b990:	1c56      	adds	r6, r2, #1
 801b992:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801b996:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801b99a:	1212      	asrs	r2, r2, #8
 801b99c:	f815 9006 	ldrb.w	r9, [r5, r6]
 801b9a0:	fa1f fa82 	uxth.w	sl, r2
 801b9a4:	43d2      	mvns	r2, r2
 801b9a6:	fb1b fb0a 	smulbb	fp, fp, sl
 801b9aa:	b2d2      	uxtb	r2, r2
 801b9ac:	fb09 b902 	mla	r9, r9, r2, fp
 801b9b0:	fa1f f989 	uxth.w	r9, r9
 801b9b4:	f109 0b01 	add.w	fp, r9, #1
 801b9b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b9bc:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801b9c0:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801b9c4:	fb1b fb0a 	smulbb	fp, fp, sl
 801b9c8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b9cc:	fb17 fa0a 	smulbb	sl, r7, sl
 801b9d0:	f805 9006 	strb.w	r9, [r5, r6]
 801b9d4:	442e      	add	r6, r5
 801b9d6:	78b7      	ldrb	r7, [r6, #2]
 801b9d8:	f896 9001 	ldrb.w	r9, [r6, #1]
 801b9dc:	fb07 aa02 	mla	sl, r7, r2, sl
 801b9e0:	fb09 b902 	mla	r9, r9, r2, fp
 801b9e4:	fa1f fa8a 	uxth.w	sl, sl
 801b9e8:	fa1f f989 	uxth.w	r9, r9
 801b9ec:	f10a 0701 	add.w	r7, sl, #1
 801b9f0:	f109 0b01 	add.w	fp, r9, #1
 801b9f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b9f8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801b9fc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801ba00:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ba04:	f886 a002 	strb.w	sl, [r6, #2]
 801ba08:	f886 9001 	strb.w	r9, [r6, #1]
 801ba0c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801ba0e:	4474      	add	r4, lr
 801ba10:	f108 0801 	add.w	r8, r8, #1
 801ba14:	4410      	add	r0, r2
 801ba16:	e762      	b.n	801b8de <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 801ba18:	b005      	add	sp, #20
 801ba1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ba1e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ba1e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ba22:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba24:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ba28:	9201      	str	r2, [sp, #4]
 801ba2a:	6860      	ldr	r0, [r4, #4]
 801ba2c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 801ba30:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 801ba34:	fb00 2505 	mla	r5, r0, r5, r2
 801ba38:	6822      	ldr	r2, [r4, #0]
 801ba3a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba3e:	4415      	add	r5, r2
 801ba40:	f8dc 2000 	ldr.w	r2, [ip]
 801ba44:	9200      	str	r2, [sp, #0]
 801ba46:	2900      	cmp	r1, #0
 801ba48:	dc03      	bgt.n	801ba52 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801ba4a:	9a01      	ldr	r2, [sp, #4]
 801ba4c:	2a00      	cmp	r2, #0
 801ba4e:	f340 812b 	ble.w	801bca8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801ba52:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801ba54:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801ba58:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801ba5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ba5e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801ba62:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801ba66:	2b00      	cmp	r3, #0
 801ba68:	dd0e      	ble.n	801ba88 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801ba6a:	1422      	asrs	r2, r4, #16
 801ba6c:	d405      	bmi.n	801ba7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba6e:	4572      	cmp	r2, lr
 801ba70:	da03      	bge.n	801ba7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba72:	1402      	asrs	r2, r0, #16
 801ba74:	d401      	bmi.n	801ba7a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801ba76:	42ba      	cmp	r2, r7
 801ba78:	db07      	blt.n	801ba8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801ba7a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ba7c:	3b01      	subs	r3, #1
 801ba7e:	3503      	adds	r5, #3
 801ba80:	4414      	add	r4, r2
 801ba82:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801ba84:	4410      	add	r0, r2
 801ba86:	e7ee      	b.n	801ba66 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801ba88:	d06f      	beq.n	801bb6a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801ba8a:	1e5a      	subs	r2, r3, #1
 801ba8c:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 801ba8e:	fb06 4602 	mla	r6, r6, r2, r4
 801ba92:	1436      	asrs	r6, r6, #16
 801ba94:	d45e      	bmi.n	801bb54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ba96:	4576      	cmp	r6, lr
 801ba98:	da5c      	bge.n	801bb54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801ba9a:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 801ba9c:	fb06 0202 	mla	r2, r6, r2, r0
 801baa0:	1412      	asrs	r2, r2, #16
 801baa2:	d457      	bmi.n	801bb54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801baa4:	42ba      	cmp	r2, r7
 801baa6:	da55      	bge.n	801bb54 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801baa8:	1cee      	adds	r6, r5, #3
 801baaa:	469a      	mov	sl, r3
 801baac:	f1ba 0f00 	cmp.w	sl, #0
 801bab0:	dd56      	ble.n	801bb60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801bab2:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801bab6:	1427      	asrs	r7, r4, #16
 801bab8:	1402      	asrs	r2, r0, #16
 801baba:	fb0e 7202 	mla	r2, lr, r2, r7
 801babe:	9f00      	ldr	r7, [sp, #0]
 801bac0:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 801bac4:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 801bac8:	d03c      	beq.n	801bb44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801baca:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801bace:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bad2:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801bad6:	fa5f f28e 	uxtb.w	r2, lr
 801bada:	b2ff      	uxtb	r7, r7
 801badc:	f000 80dd 	beq.w	801bc9a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bae0:	fa1f f882 	uxth.w	r8, r2
 801bae4:	43d2      	mvns	r2, r2
 801bae6:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 801baea:	fb17 f708 	smulbb	r7, r7, r8
 801baee:	b2d2      	uxtb	r2, r2
 801baf0:	fb19 f908 	smulbb	r9, r9, r8
 801baf4:	fb0e 7702 	mla	r7, lr, r2, r7
 801baf8:	fb1b f808 	smulbb	r8, fp, r8
 801bafc:	b2bf      	uxth	r7, r7
 801bafe:	f107 0e01 	add.w	lr, r7, #1
 801bb02:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801bb06:	123f      	asrs	r7, r7, #8
 801bb08:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bb0c:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 801bb10:	fb07 9902 	mla	r9, r7, r2, r9
 801bb14:	fa1f f989 	uxth.w	r9, r9
 801bb18:	f109 0701 	add.w	r7, r9, #1
 801bb1c:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801bb20:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bb24:	fb07 8802 	mla	r8, r7, r2, r8
 801bb28:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bb2c:	fa1f f888 	uxth.w	r8, r8
 801bb30:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bb34:	f108 0201 	add.w	r2, r8, #1
 801bb38:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bb3c:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bb40:	f806 8c01 	strb.w	r8, [r6, #-1]
 801bb44:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bb46:	3603      	adds	r6, #3
 801bb48:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bb4c:	4414      	add	r4, r2
 801bb4e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bb50:	4410      	add	r0, r2
 801bb52:	e7ab      	b.n	801baac <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801bb54:	f04f 0e00 	mov.w	lr, #0
 801bb58:	eba3 020e 	sub.w	r2, r3, lr
 801bb5c:	2a00      	cmp	r2, #0
 801bb5e:	dc3d      	bgt.n	801bbdc <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 801bb60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bb64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bb68:	441d      	add	r5, r3
 801bb6a:	2900      	cmp	r1, #0
 801bb6c:	f340 809c 	ble.w	801bca8 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 801bb70:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bb74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bb7a:	3901      	subs	r1, #1
 801bb7c:	eeb0 6a62 	vmov.f32	s12, s5
 801bb80:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801bb84:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bb88:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb8c:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 801bb90:	eeb0 6a43 	vmov.f32	s12, s6
 801bb94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bb98:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 801bb9c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bba0:	ee61 7a27 	vmul.f32	s15, s2, s15
 801bba4:	ee77 2a62 	vsub.f32	s5, s14, s5
 801bba8:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bbac:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bbb0:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801bbb4:	ee12 2a90 	vmov	r2, s5
 801bbb8:	eef0 2a47 	vmov.f32	s5, s14
 801bbbc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbc0:	ee13 2a10 	vmov	r2, s6
 801bbc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bbc6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbc8:	eeb0 3a67 	vmov.f32	s6, s15
 801bbcc:	fb92 f3f3 	sdiv	r3, r2, r3
 801bbd0:	9a01      	ldr	r2, [sp, #4]
 801bbd2:	9310      	str	r3, [sp, #64]	@ 0x40
 801bbd4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbd6:	bf08      	it	eq
 801bbd8:	4613      	moveq	r3, r2
 801bbda:	e734      	b.n	801ba46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 801bbdc:	1427      	asrs	r7, r4, #16
 801bbde:	d44d      	bmi.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bbe0:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801bbe4:	42be      	cmp	r6, r7
 801bbe6:	dd49      	ble.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bbe8:	ea5f 4820 	movs.w	r8, r0, asr #16
 801bbec:	d446      	bmi.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bbee:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801bbf2:	4542      	cmp	r2, r8
 801bbf4:	dd42      	ble.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bbf6:	b236      	sxth	r6, r6
 801bbf8:	9a00      	ldr	r2, [sp, #0]
 801bbfa:	fb08 7606 	mla	r6, r8, r6, r7
 801bbfe:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 801bc02:	0e3a      	lsrs	r2, r7, #24
 801bc04:	d03a      	beq.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bc06:	2aff      	cmp	r2, #255	@ 0xff
 801bc08:	b2d6      	uxtb	r6, r2
 801bc0a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801bc0e:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 801bc12:	ea4f 024e 	mov.w	r2, lr, lsl #1
 801bc16:	b2ff      	uxtb	r7, r7
 801bc18:	d037      	beq.n	801bc8a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 801bc1a:	fa1f f986 	uxth.w	r9, r6
 801bc1e:	4472      	add	r2, lr
 801bc20:	43f6      	mvns	r6, r6
 801bc22:	f815 8002 	ldrb.w	r8, [r5, r2]
 801bc26:	fb17 f709 	smulbb	r7, r7, r9
 801bc2a:	fb1a fa09 	smulbb	sl, sl, r9
 801bc2e:	b2f6      	uxtb	r6, r6
 801bc30:	fb1b f909 	smulbb	r9, fp, r9
 801bc34:	fb08 7706 	mla	r7, r8, r6, r7
 801bc38:	b2bf      	uxth	r7, r7
 801bc3a:	f107 0801 	add.w	r8, r7, #1
 801bc3e:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 801bc42:	123f      	asrs	r7, r7, #8
 801bc44:	54af      	strb	r7, [r5, r2]
 801bc46:	442a      	add	r2, r5
 801bc48:	7857      	ldrb	r7, [r2, #1]
 801bc4a:	fb07 aa06 	mla	sl, r7, r6, sl
 801bc4e:	fa1f fa8a 	uxth.w	sl, sl
 801bc52:	f10a 0701 	add.w	r7, sl, #1
 801bc56:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bc5a:	7897      	ldrb	r7, [r2, #2]
 801bc5c:	fb07 9906 	mla	r9, r7, r6, r9
 801bc60:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bc64:	fa1f f989 	uxth.w	r9, r9
 801bc68:	f882 a001 	strb.w	sl, [r2, #1]
 801bc6c:	f109 0601 	add.w	r6, r9, #1
 801bc70:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 801bc74:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bc78:	f882 9002 	strb.w	r9, [r2, #2]
 801bc7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bc7e:	f10e 0e01 	add.w	lr, lr, #1
 801bc82:	4414      	add	r4, r2
 801bc84:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bc86:	4410      	add	r0, r2
 801bc88:	e766      	b.n	801bb58 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801bc8a:	4472      	add	r2, lr
 801bc8c:	54af      	strb	r7, [r5, r2]
 801bc8e:	442a      	add	r2, r5
 801bc90:	f882 a001 	strb.w	sl, [r2, #1]
 801bc94:	f882 b002 	strb.w	fp, [r2, #2]
 801bc98:	e7f0      	b.n	801bc7c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 801bc9a:	f806 7c03 	strb.w	r7, [r6, #-3]
 801bc9e:	f806 9c02 	strb.w	r9, [r6, #-2]
 801bca2:	f806 bc01 	strb.w	fp, [r6, #-1]
 801bca6:	e74d      	b.n	801bb44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801bca8:	b003      	add	sp, #12
 801bcaa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801bcb0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bcb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bcb4:	b087      	sub	sp, #28
 801bcb6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bcba:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801bcbc:	9204      	str	r2, [sp, #16]
 801bcbe:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801bcc2:	6860      	ldr	r0, [r4, #4]
 801bcc4:	9205      	str	r2, [sp, #20]
 801bcc6:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 801bcca:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 801bcce:	9101      	str	r1, [sp, #4]
 801bcd0:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 801bcd4:	fb00 2505 	mla	r5, r0, r5, r2
 801bcd8:	6822      	ldr	r2, [r4, #0]
 801bcda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bcde:	4415      	add	r5, r2
 801bce0:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bce4:	3201      	adds	r2, #1
 801bce6:	f022 0201 	bic.w	r2, r2, #1
 801bcea:	9202      	str	r2, [sp, #8]
 801bcec:	f8dc 2000 	ldr.w	r2, [ip]
 801bcf0:	9203      	str	r2, [sp, #12]
 801bcf2:	9a01      	ldr	r2, [sp, #4]
 801bcf4:	2a00      	cmp	r2, #0
 801bcf6:	dc03      	bgt.n	801bd00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 801bcf8:	9a04      	ldr	r2, [sp, #16]
 801bcfa:	2a00      	cmp	r2, #0
 801bcfc:	f340 8135 	ble.w	801bf6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801bd00:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bd02:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801bd06:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801bd0a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bd0c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bd10:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801bd14:	2b00      	cmp	r3, #0
 801bd16:	dd0d      	ble.n	801bd34 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801bd18:	1422      	asrs	r2, r4, #16
 801bd1a:	d405      	bmi.n	801bd28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bd1c:	4542      	cmp	r2, r8
 801bd1e:	da03      	bge.n	801bd28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bd20:	1402      	asrs	r2, r0, #16
 801bd22:	d401      	bmi.n	801bd28 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801bd24:	42ba      	cmp	r2, r7
 801bd26:	db06      	blt.n	801bd36 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 801bd28:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bd2a:	4474      	add	r4, lr
 801bd2c:	3b01      	subs	r3, #1
 801bd2e:	3503      	adds	r5, #3
 801bd30:	4410      	add	r0, r2
 801bd32:	e7ef      	b.n	801bd14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 801bd34:	d077      	beq.n	801be26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 801bd36:	1e5a      	subs	r2, r3, #1
 801bd38:	fb0e 4602 	mla	r6, lr, r2, r4
 801bd3c:	1436      	asrs	r6, r6, #16
 801bd3e:	d469      	bmi.n	801be14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd40:	4546      	cmp	r6, r8
 801bd42:	da67      	bge.n	801be14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd44:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bd46:	fb06 0202 	mla	r2, r6, r2, r0
 801bd4a:	1412      	asrs	r2, r2, #16
 801bd4c:	d462      	bmi.n	801be14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd4e:	42ba      	cmp	r2, r7
 801bd50:	da60      	bge.n	801be14 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bd52:	1cee      	adds	r6, r5, #3
 801bd54:	4699      	mov	r9, r3
 801bd56:	f1b9 0f00 	cmp.w	r9, #0
 801bd5a:	dd5f      	ble.n	801be1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 801bd5c:	1422      	asrs	r2, r4, #16
 801bd5e:	9902      	ldr	r1, [sp, #8]
 801bd60:	1407      	asrs	r7, r0, #16
 801bd62:	fb01 2707 	mla	r7, r1, r7, r2
 801bd66:	9903      	ldr	r1, [sp, #12]
 801bd68:	087a      	lsrs	r2, r7, #1
 801bd6a:	5c8a      	ldrb	r2, [r1, r2]
 801bd6c:	07f9      	lsls	r1, r7, #31
 801bd6e:	bf54      	ite	pl
 801bd70:	f002 020f 	andpl.w	r2, r2, #15
 801bd74:	1112      	asrmi	r2, r2, #4
 801bd76:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bd7a:	b2d2      	uxtb	r2, r2
 801bd7c:	2a00      	cmp	r2, #0
 801bd7e:	d042      	beq.n	801be06 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801bd80:	497b      	ldr	r1, [pc, #492]	@ (801bf70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bd82:	680f      	ldr	r7, [r1, #0]
 801bd84:	9905      	ldr	r1, [sp, #20]
 801bd86:	fa5f fb87 	uxtb.w	fp, r7
 801bd8a:	434a      	muls	r2, r1
 801bd8c:	f102 0801 	add.w	r8, r2, #1
 801bd90:	eb08 2222 	add.w	r2, r8, r2, asr #8
 801bd94:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 801bd98:	1212      	asrs	r2, r2, #8
 801bd9a:	fa1f fa82 	uxth.w	sl, r2
 801bd9e:	43d2      	mvns	r2, r2
 801bda0:	fb1b fb0a 	smulbb	fp, fp, sl
 801bda4:	b2d2      	uxtb	r2, r2
 801bda6:	fb08 b802 	mla	r8, r8, r2, fp
 801bdaa:	fa1f f888 	uxth.w	r8, r8
 801bdae:	f108 0b01 	add.w	fp, r8, #1
 801bdb2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bdb6:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801bdba:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801bdbe:	fb1b fb0a 	smulbb	fp, fp, sl
 801bdc2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bdc6:	fb17 fa0a 	smulbb	sl, r7, sl
 801bdca:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 801bdce:	f806 8c03 	strb.w	r8, [r6, #-3]
 801bdd2:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 801bdd6:	fb07 aa02 	mla	sl, r7, r2, sl
 801bdda:	fb08 b802 	mla	r8, r8, r2, fp
 801bdde:	fa1f fa8a 	uxth.w	sl, sl
 801bde2:	fa1f f888 	uxth.w	r8, r8
 801bde6:	f10a 0701 	add.w	r7, sl, #1
 801bdea:	f108 0b01 	add.w	fp, r8, #1
 801bdee:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801bdf2:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801bdf6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bdfa:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bdfe:	f806 ac01 	strb.w	sl, [r6, #-1]
 801be02:	f806 8c02 	strb.w	r8, [r6, #-2]
 801be06:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801be08:	4474      	add	r4, lr
 801be0a:	3603      	adds	r6, #3
 801be0c:	f109 39ff 	add.w	r9, r9, #4294967295
 801be10:	4410      	add	r0, r2
 801be12:	e7a0      	b.n	801bd56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 801be14:	2700      	movs	r7, #0
 801be16:	1bda      	subs	r2, r3, r7
 801be18:	2a00      	cmp	r2, #0
 801be1a:	dc3e      	bgt.n	801be9a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801be1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801be20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801be24:	441d      	add	r5, r3
 801be26:	9b01      	ldr	r3, [sp, #4]
 801be28:	2b00      	cmp	r3, #0
 801be2a:	f340 809e 	ble.w	801bf6a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 801be2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801be32:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be34:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801be38:	eeb0 6a62 	vmov.f32	s12, s5
 801be3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801be40:	ee31 1a05 	vadd.f32	s2, s2, s10
 801be44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be48:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 801be4c:	eeb0 6a43 	vmov.f32	s12, s6
 801be50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801be54:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 801be58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801be5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801be60:	ee77 2a62 	vsub.f32	s5, s14, s5
 801be64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801be68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801be6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801be70:	ee12 2a90 	vmov	r2, s5
 801be74:	eef0 2a47 	vmov.f32	s5, s14
 801be78:	fb92 fef3 	sdiv	lr, r2, r3
 801be7c:	ee13 2a10 	vmov	r2, s6
 801be80:	eeb0 3a67 	vmov.f32	s6, s15
 801be84:	fb92 f3f3 	sdiv	r3, r2, r3
 801be88:	9314      	str	r3, [sp, #80]	@ 0x50
 801be8a:	9b01      	ldr	r3, [sp, #4]
 801be8c:	9a04      	ldr	r2, [sp, #16]
 801be8e:	3b01      	subs	r3, #1
 801be90:	9301      	str	r3, [sp, #4]
 801be92:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801be94:	bf08      	it	eq
 801be96:	4613      	moveq	r3, r2
 801be98:	e72b      	b.n	801bcf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801be9a:	1426      	asrs	r6, r4, #16
 801be9c:	d460      	bmi.n	801bf60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801be9e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bea2:	42b2      	cmp	r2, r6
 801bea4:	dd5c      	ble.n	801bf60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bea6:	ea5f 4820 	movs.w	r8, r0, asr #16
 801beaa:	d459      	bmi.n	801bf60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801beac:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801beb0:	4542      	cmp	r2, r8
 801beb2:	dd55      	ble.n	801bf60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801beb4:	9a02      	ldr	r2, [sp, #8]
 801beb6:	9903      	ldr	r1, [sp, #12]
 801beb8:	fb08 6602 	mla	r6, r8, r2, r6
 801bebc:	0872      	lsrs	r2, r6, #1
 801bebe:	07f6      	lsls	r6, r6, #31
 801bec0:	5c8a      	ldrb	r2, [r1, r2]
 801bec2:	bf54      	ite	pl
 801bec4:	f002 020f 	andpl.w	r2, r2, #15
 801bec8:	1112      	asrmi	r2, r2, #4
 801beca:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801bece:	b2d2      	uxtb	r2, r2
 801bed0:	2a00      	cmp	r2, #0
 801bed2:	d045      	beq.n	801bf60 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bed4:	4926      	ldr	r1, [pc, #152]	@ (801bf70 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 801bed6:	f8d1 8000 	ldr.w	r8, [r1]
 801beda:	9905      	ldr	r1, [sp, #20]
 801bedc:	fa5f fb88 	uxtb.w	fp, r8
 801bee0:	434a      	muls	r2, r1
 801bee2:	1c56      	adds	r6, r2, #1
 801bee4:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801bee8:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 801beec:	1212      	asrs	r2, r2, #8
 801beee:	f815 9006 	ldrb.w	r9, [r5, r6]
 801bef2:	fa1f fa82 	uxth.w	sl, r2
 801bef6:	43d2      	mvns	r2, r2
 801bef8:	fb1b fb0a 	smulbb	fp, fp, sl
 801befc:	b2d2      	uxtb	r2, r2
 801befe:	fb09 b902 	mla	r9, r9, r2, fp
 801bf02:	fa1f f989 	uxth.w	r9, r9
 801bf06:	f109 0b01 	add.w	fp, r9, #1
 801bf0a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf0e:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 801bf12:	f3c8 4807 	ubfx	r8, r8, #16, #8
 801bf16:	fb1b fb0a 	smulbb	fp, fp, sl
 801bf1a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf1e:	fb18 fa0a 	smulbb	sl, r8, sl
 801bf22:	f805 9006 	strb.w	r9, [r5, r6]
 801bf26:	442e      	add	r6, r5
 801bf28:	f896 8002 	ldrb.w	r8, [r6, #2]
 801bf2c:	f896 9001 	ldrb.w	r9, [r6, #1]
 801bf30:	fb08 aa02 	mla	sl, r8, r2, sl
 801bf34:	fb09 b902 	mla	r9, r9, r2, fp
 801bf38:	fa1f fa8a 	uxth.w	sl, sl
 801bf3c:	fa1f f989 	uxth.w	r9, r9
 801bf40:	f10a 0801 	add.w	r8, sl, #1
 801bf44:	f109 0b01 	add.w	fp, r9, #1
 801bf48:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 801bf4c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801bf50:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801bf54:	ea4f 2929 	mov.w	r9, r9, asr #8
 801bf58:	f886 a002 	strb.w	sl, [r6, #2]
 801bf5c:	f886 9001 	strb.w	r9, [r6, #1]
 801bf60:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bf62:	4474      	add	r4, lr
 801bf64:	3701      	adds	r7, #1
 801bf66:	4410      	add	r0, r2
 801bf68:	e755      	b.n	801be16 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 801bf6a:	b007      	add	sp, #28
 801bf6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bf70:	24025e30 	.word	0x24025e30

0801bf74 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bf74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bf78:	b085      	sub	sp, #20
 801bf7a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bf7e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bf80:	9203      	str	r2, [sp, #12]
 801bf82:	6860      	ldr	r0, [r4, #4]
 801bf84:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801bf88:	9100      	str	r1, [sp, #0]
 801bf8a:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 801bf8e:	fb00 2606 	mla	r6, r0, r6, r2
 801bf92:	6822      	ldr	r2, [r4, #0]
 801bf94:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bf98:	4416      	add	r6, r2
 801bf9a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801bf9e:	3201      	adds	r2, #1
 801bfa0:	f022 0201 	bic.w	r2, r2, #1
 801bfa4:	9201      	str	r2, [sp, #4]
 801bfa6:	f8dc 2000 	ldr.w	r2, [ip]
 801bfaa:	9202      	str	r2, [sp, #8]
 801bfac:	9a00      	ldr	r2, [sp, #0]
 801bfae:	2a00      	cmp	r2, #0
 801bfb0:	dc03      	bgt.n	801bfba <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 801bfb2:	9a03      	ldr	r2, [sp, #12]
 801bfb4:	2a00      	cmp	r2, #0
 801bfb6:	f340 8140 	ble.w	801c23a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801bfba:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801bfbc:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801bfc0:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 801bfc4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801bfc6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 801bfca:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801bfce:	2b00      	cmp	r3, #0
 801bfd0:	dd0e      	ble.n	801bff0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801bfd2:	142a      	asrs	r2, r5, #16
 801bfd4:	d405      	bmi.n	801bfe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bfd6:	4572      	cmp	r2, lr
 801bfd8:	da03      	bge.n	801bfe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bfda:	1422      	asrs	r2, r4, #16
 801bfdc:	d401      	bmi.n	801bfe2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 801bfde:	42ba      	cmp	r2, r7
 801bfe0:	db07      	blt.n	801bff2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 801bfe2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801bfe4:	3b01      	subs	r3, #1
 801bfe6:	3603      	adds	r6, #3
 801bfe8:	4415      	add	r5, r2
 801bfea:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801bfec:	4414      	add	r4, r2
 801bfee:	e7ee      	b.n	801bfce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801bff0:	d072      	beq.n	801c0d8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 801bff2:	1e5a      	subs	r2, r3, #1
 801bff4:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801bff6:	fb00 5002 	mla	r0, r0, r2, r5
 801bffa:	1400      	asrs	r0, r0, #16
 801bffc:	d463      	bmi.n	801c0c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801bffe:	4570      	cmp	r0, lr
 801c000:	da61      	bge.n	801c0c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c002:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c004:	fb00 4202 	mla	r2, r0, r2, r4
 801c008:	1412      	asrs	r2, r2, #16
 801c00a:	d45c      	bmi.n	801c0c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c00c:	42ba      	cmp	r2, r7
 801c00e:	da5a      	bge.n	801c0c6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 801c010:	1cf0      	adds	r0, r6, #3
 801c012:	469a      	mov	sl, r3
 801c014:	f1ba 0f00 	cmp.w	sl, #0
 801c018:	dd59      	ble.n	801c0ce <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 801c01a:	142a      	asrs	r2, r5, #16
 801c01c:	9901      	ldr	r1, [sp, #4]
 801c01e:	1427      	asrs	r7, r4, #16
 801c020:	fb01 2707 	mla	r7, r1, r7, r2
 801c024:	9902      	ldr	r1, [sp, #8]
 801c026:	087a      	lsrs	r2, r7, #1
 801c028:	5c8a      	ldrb	r2, [r1, r2]
 801c02a:	07f9      	lsls	r1, r7, #31
 801c02c:	bf54      	ite	pl
 801c02e:	f002 020f 	andpl.w	r2, r2, #15
 801c032:	1112      	asrmi	r2, r2, #4
 801c034:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c038:	b2d2      	uxtb	r2, r2
 801c03a:	2a00      	cmp	r2, #0
 801c03c:	d03b      	beq.n	801c0b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c03e:	4980      	ldr	r1, [pc, #512]	@ (801c240 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c040:	2aff      	cmp	r2, #255	@ 0xff
 801c042:	680f      	ldr	r7, [r1, #0]
 801c044:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 801c048:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801c04c:	b2ff      	uxtb	r7, r7
 801c04e:	f000 80ed 	beq.w	801c22c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801c052:	fa1f f882 	uxth.w	r8, r2
 801c056:	43d2      	mvns	r2, r2
 801c058:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 801c05c:	fb17 f708 	smulbb	r7, r7, r8
 801c060:	b2d2      	uxtb	r2, r2
 801c062:	fb19 f908 	smulbb	r9, r9, r8
 801c066:	fb0e 7702 	mla	r7, lr, r2, r7
 801c06a:	fb1b f808 	smulbb	r8, fp, r8
 801c06e:	b2bf      	uxth	r7, r7
 801c070:	f107 0e01 	add.w	lr, r7, #1
 801c074:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 801c078:	123f      	asrs	r7, r7, #8
 801c07a:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c07e:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801c082:	fb07 9902 	mla	r9, r7, r2, r9
 801c086:	fa1f f989 	uxth.w	r9, r9
 801c08a:	f109 0701 	add.w	r7, r9, #1
 801c08e:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801c092:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 801c096:	fb07 8802 	mla	r8, r7, r2, r8
 801c09a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c09e:	fa1f f888 	uxth.w	r8, r8
 801c0a2:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c0a6:	f108 0201 	add.w	r2, r8, #1
 801c0aa:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c0ae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c0b2:	f800 8c01 	strb.w	r8, [r0, #-1]
 801c0b6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c0b8:	3003      	adds	r0, #3
 801c0ba:	f10a 3aff 	add.w	sl, sl, #4294967295
 801c0be:	4415      	add	r5, r2
 801c0c0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c0c2:	4414      	add	r4, r2
 801c0c4:	e7a6      	b.n	801c014 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801c0c6:	2700      	movs	r7, #0
 801c0c8:	1bda      	subs	r2, r3, r7
 801c0ca:	2a00      	cmp	r2, #0
 801c0cc:	dc40      	bgt.n	801c150 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801c0ce:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c0d2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c0d6:	441e      	add	r6, r3
 801c0d8:	9b00      	ldr	r3, [sp, #0]
 801c0da:	2b00      	cmp	r3, #0
 801c0dc:	f340 80ad 	ble.w	801c23a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801c0e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c0e4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c0e6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c0ea:	eeb0 6a62 	vmov.f32	s12, s5
 801c0ee:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c0f2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c0f6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c0fa:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 801c0fe:	eeb0 6a43 	vmov.f32	s12, s6
 801c102:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c106:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801c10a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c10e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c112:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c116:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c11a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c11e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c122:	ee12 2a90 	vmov	r2, s5
 801c126:	eef0 2a47 	vmov.f32	s5, s14
 801c12a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c12e:	ee13 2a10 	vmov	r2, s6
 801c132:	9311      	str	r3, [sp, #68]	@ 0x44
 801c134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c136:	eeb0 3a67 	vmov.f32	s6, s15
 801c13a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c13e:	9312      	str	r3, [sp, #72]	@ 0x48
 801c140:	9b00      	ldr	r3, [sp, #0]
 801c142:	9a03      	ldr	r2, [sp, #12]
 801c144:	3b01      	subs	r3, #1
 801c146:	9300      	str	r3, [sp, #0]
 801c148:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c14a:	bf08      	it	eq
 801c14c:	4613      	moveq	r3, r2
 801c14e:	e72d      	b.n	801bfac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801c150:	1428      	asrs	r0, r5, #16
 801c152:	d45c      	bmi.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c154:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801c158:	4282      	cmp	r2, r0
 801c15a:	dd58      	ble.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c15c:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801c160:	d455      	bmi.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c162:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801c166:	4572      	cmp	r2, lr
 801c168:	dd51      	ble.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c16a:	9a01      	ldr	r2, [sp, #4]
 801c16c:	9902      	ldr	r1, [sp, #8]
 801c16e:	fb0e 0002 	mla	r0, lr, r2, r0
 801c172:	0842      	lsrs	r2, r0, #1
 801c174:	07c0      	lsls	r0, r0, #31
 801c176:	5c8a      	ldrb	r2, [r1, r2]
 801c178:	bf54      	ite	pl
 801c17a:	f002 020f 	andpl.w	r2, r2, #15
 801c17e:	1112      	asrmi	r2, r2, #4
 801c180:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801c184:	b2d2      	uxtb	r2, r2
 801c186:	2a00      	cmp	r2, #0
 801c188:	d041      	beq.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c18a:	492d      	ldr	r1, [pc, #180]	@ (801c240 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 801c18c:	2aff      	cmp	r2, #255	@ 0xff
 801c18e:	6808      	ldr	r0, [r1, #0]
 801c190:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 801c194:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801c198:	fa5f fe80 	uxtb.w	lr, r0
 801c19c:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801c1a0:	d03b      	beq.n	801c21a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801c1a2:	fa1f f982 	uxth.w	r9, r2
 801c1a6:	4438      	add	r0, r7
 801c1a8:	43d2      	mvns	r2, r2
 801c1aa:	f816 8000 	ldrb.w	r8, [r6, r0]
 801c1ae:	fb1e fe09 	smulbb	lr, lr, r9
 801c1b2:	fb1a fa09 	smulbb	sl, sl, r9
 801c1b6:	b2d2      	uxtb	r2, r2
 801c1b8:	fb1b f909 	smulbb	r9, fp, r9
 801c1bc:	fb08 ee02 	mla	lr, r8, r2, lr
 801c1c0:	fa1f fe8e 	uxth.w	lr, lr
 801c1c4:	f10e 0801 	add.w	r8, lr, #1
 801c1c8:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 801c1cc:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c1d0:	f806 e000 	strb.w	lr, [r6, r0]
 801c1d4:	4430      	add	r0, r6
 801c1d6:	f890 e001 	ldrb.w	lr, [r0, #1]
 801c1da:	fb0e aa02 	mla	sl, lr, r2, sl
 801c1de:	fa1f fa8a 	uxth.w	sl, sl
 801c1e2:	f10a 0e01 	add.w	lr, sl, #1
 801c1e6:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 801c1ea:	f890 e002 	ldrb.w	lr, [r0, #2]
 801c1ee:	fb0e 9902 	mla	r9, lr, r2, r9
 801c1f2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801c1f6:	fa1f f989 	uxth.w	r9, r9
 801c1fa:	f880 a001 	strb.w	sl, [r0, #1]
 801c1fe:	f109 0201 	add.w	r2, r9, #1
 801c202:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801c206:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c20a:	f880 9002 	strb.w	r9, [r0, #2]
 801c20e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c210:	3701      	adds	r7, #1
 801c212:	4415      	add	r5, r2
 801c214:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c216:	4414      	add	r4, r2
 801c218:	e756      	b.n	801c0c8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 801c21a:	4438      	add	r0, r7
 801c21c:	f806 e000 	strb.w	lr, [r6, r0]
 801c220:	4430      	add	r0, r6
 801c222:	f880 a001 	strb.w	sl, [r0, #1]
 801c226:	f880 b002 	strb.w	fp, [r0, #2]
 801c22a:	e7f0      	b.n	801c20e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801c22c:	f800 7c03 	strb.w	r7, [r0, #-3]
 801c230:	f800 9c02 	strb.w	r9, [r0, #-2]
 801c234:	f800 bc01 	strb.w	fp, [r0, #-1]
 801c238:	e73d      	b.n	801c0b6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801c23a:	b005      	add	sp, #20
 801c23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c240:	24025e30 	.word	0x24025e30

0801c244 <_ZN8touchgfx8LCD24bppD1Ev>:
 801c244:	4770      	bx	lr

0801c246 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801c246:	4770      	bx	lr

0801c248 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801c248:	4770      	bx	lr

0801c24a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801c24a:	4770      	bx	lr

0801c24c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 801c24c:	4770      	bx	lr

0801c24e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801c24e:	4770      	bx	lr

0801c250 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801c250:	4770      	bx	lr

0801c252 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801c252:	4770      	bx	lr

0801c254 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 801c254:	4770      	bx	lr

0801c256 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c256:	4770      	bx	lr

0801c258 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c258:	4770      	bx	lr

0801c25a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c25a:	4770      	bx	lr

0801c25c <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c25c:	4770      	bx	lr

0801c25e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c25e:	4770      	bx	lr

0801c260 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c260:	4770      	bx	lr

0801c262 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c262:	4770      	bx	lr

0801c264 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c264:	4770      	bx	lr

0801c266 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801c266:	4770      	bx	lr

0801c268 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801c268:	4770      	bx	lr

0801c26a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801c26a:	4770      	bx	lr

0801c26c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 801c26c:	4770      	bx	lr

0801c26e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801c26e:	4770      	bx	lr

0801c270 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801c270:	4770      	bx	lr

0801c272 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801c272:	4770      	bx	lr

0801c274 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 801c274:	4770      	bx	lr
	...

0801c278 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801c278:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c27a:	4606      	mov	r6, r0
 801c27c:	b087      	sub	sp, #28
 801c27e:	4615      	mov	r5, r2
 801c280:	461f      	mov	r7, r3
 801c282:	b353      	cbz	r3, 801c2da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c284:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801c288:	2b00      	cmp	r3, #0
 801c28a:	dd26      	ble.n	801c2da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c28c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801c290:	2b00      	cmp	r3, #0
 801c292:	dd22      	ble.n	801c2da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c294:	6808      	ldr	r0, [r1, #0]
 801c296:	aa04      	add	r2, sp, #16
 801c298:	6849      	ldr	r1, [r1, #4]
 801c29a:	4c1b      	ldr	r4, [pc, #108]	@ (801c308 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 801c29c:	c203      	stmia	r2!, {r0, r1}
 801c29e:	a804      	add	r0, sp, #16
 801c2a0:	f7fa fb22 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c2a4:	6820      	ldr	r0, [r4, #0]
 801c2a6:	6803      	ldr	r3, [r0, #0]
 801c2a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c2aa:	4798      	blx	r3
 801c2ac:	2fff      	cmp	r7, #255	@ 0xff
 801c2ae:	d016      	beq.n	801c2de <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801c2b0:	f010 0f08 	tst.w	r0, #8
 801c2b4:	6820      	ldr	r0, [r4, #0]
 801c2b6:	d015      	beq.n	801c2e4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801c2b8:	2400      	movs	r4, #0
 801c2ba:	6801      	ldr	r1, [r0, #0]
 801c2bc:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801c2c0:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 801c2c4:	e9cd 7402 	strd	r7, r4, [sp, #8]
 801c2c8:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 801c2cc:	9401      	str	r4, [sp, #4]
 801c2ce:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801c2d2:	9400      	str	r4, [sp, #0]
 801c2d4:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 801c2d6:	4629      	mov	r1, r5
 801c2d8:	47a0      	blx	r4
 801c2da:	b007      	add	sp, #28
 801c2dc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c2de:	f010 0f02 	tst.w	r0, #2
 801c2e2:	e7e7      	b.n	801c2b4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 801c2e4:	6803      	ldr	r3, [r0, #0]
 801c2e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c2e8:	4798      	blx	r3
 801c2ea:	4b08      	ldr	r3, [pc, #32]	@ (801c30c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 801c2ec:	4601      	mov	r1, r0
 801c2ee:	4630      	mov	r0, r6
 801c2f0:	881a      	ldrh	r2, [r3, #0]
 801c2f2:	6833      	ldr	r3, [r6, #0]
 801c2f4:	e9cd 5700 	strd	r5, r7, [sp]
 801c2f8:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 801c2fa:	ab04      	add	r3, sp, #16
 801c2fc:	47a8      	blx	r5
 801c2fe:	6820      	ldr	r0, [r4, #0]
 801c300:	6803      	ldr	r3, [r0, #0]
 801c302:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c304:	4798      	blx	r3
 801c306:	e7e8      	b.n	801c2da <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 801c308:	24025e20 	.word	0x24025e20
 801c30c:	24025e1a 	.word	0x24025e1a

0801c310 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 801c310:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801c314:	b08b      	sub	sp, #44	@ 0x2c
 801c316:	460d      	mov	r5, r1
 801c318:	4616      	mov	r6, r2
 801c31a:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 801c31e:	f1b8 0f00 	cmp.w	r8, #0
 801c322:	d047      	beq.n	801c3b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c324:	6810      	ldr	r0, [r2, #0]
 801c326:	ac06      	add	r4, sp, #24
 801c328:	6851      	ldr	r1, [r2, #4]
 801c32a:	4f51      	ldr	r7, [pc, #324]	@ (801c470 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 801c32c:	c403      	stmia	r4!, {r0, r1}
 801c32e:	6818      	ldr	r0, [r3, #0]
 801c330:	ac08      	add	r4, sp, #32
 801c332:	6859      	ldr	r1, [r3, #4]
 801c334:	c403      	stmia	r4!, {r0, r1}
 801c336:	a806      	add	r0, sp, #24
 801c338:	f7fa fad6 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c33c:	4631      	mov	r1, r6
 801c33e:	a808      	add	r0, sp, #32
 801c340:	f7fa fb16 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c344:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801c348:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801c34c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c350:	6838      	ldr	r0, [r7, #0]
 801c352:	fb11 2103 	smlabb	r1, r1, r3, r2
 801c356:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801c35a:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801c35e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c362:	440d      	add	r5, r1
 801c364:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801c368:	440a      	add	r2, r1
 801c36a:	f8ad 2020 	strh.w	r2, [sp, #32]
 801c36e:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801c372:	4413      	add	r3, r2
 801c374:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801c378:	6803      	ldr	r3, [r0, #0]
 801c37a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c37c:	4798      	blx	r3
 801c37e:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801c382:	d01a      	beq.n	801c3ba <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 801c384:	f010 0f04 	tst.w	r0, #4
 801c388:	6838      	ldr	r0, [r7, #0]
 801c38a:	d019      	beq.n	801c3c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 801c38c:	2100      	movs	r1, #0
 801c38e:	6807      	ldr	r7, [r0, #0]
 801c390:	b2a4      	uxth	r4, r4
 801c392:	f8cd 800c 	str.w	r8, [sp, #12]
 801c396:	b2b6      	uxth	r6, r6
 801c398:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801c39c:	9401      	str	r4, [sp, #4]
 801c39e:	9600      	str	r6, [sp, #0]
 801c3a0:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801c3a4:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801c3a8:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801c3ac:	9102      	str	r1, [sp, #8]
 801c3ae:	4629      	mov	r1, r5
 801c3b0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801c3b2:	47a0      	blx	r4
 801c3b4:	b00b      	add	sp, #44	@ 0x2c
 801c3b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c3ba:	f010 0f01 	tst.w	r0, #1
 801c3be:	e7e3      	b.n	801c388 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801c3c0:	6803      	ldr	r3, [r0, #0]
 801c3c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c3c4:	4798      	blx	r3
 801c3c6:	4a2b      	ldr	r2, [pc, #172]	@ (801c474 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 801c3c8:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801c3cc:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801c3d0:	8813      	ldrh	r3, [r2, #0]
 801c3d2:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 801c3d6:	fb03 f404 	mul.w	r4, r3, r4
 801c3da:	fb03 c101 	mla	r1, r3, r1, ip
 801c3de:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c3e2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c3e6:	4408      	add	r0, r1
 801c3e8:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 801c3ec:	4404      	add	r4, r0
 801c3ee:	d02e      	beq.n	801c44e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 801c3f0:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801c3f4:	1b9b      	subs	r3, r3, r6
 801c3f6:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 801c3fa:	1b96      	subs	r6, r2, r6
 801c3fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c400:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801c404:	42a0      	cmp	r0, r4
 801c406:	d22d      	bcs.n	801c464 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c408:	eb00 0e01 	add.w	lr, r0, r1
 801c40c:	4570      	cmp	r0, lr
 801c40e:	d210      	bcs.n	801c432 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 801c410:	f890 9000 	ldrb.w	r9, [r0]
 801c414:	f815 2b01 	ldrb.w	r2, [r5], #1
 801c418:	fb19 f90c 	smulbb	r9, r9, ip
 801c41c:	fb02 9208 	mla	r2, r2, r8, r9
 801c420:	b292      	uxth	r2, r2
 801c422:	f102 0901 	add.w	r9, r2, #1
 801c426:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801c42a:	1212      	asrs	r2, r2, #8
 801c42c:	f800 2b01 	strb.w	r2, [r0], #1
 801c430:	e7ec      	b.n	801c40c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 801c432:	4418      	add	r0, r3
 801c434:	4435      	add	r5, r6
 801c436:	e7e5      	b.n	801c404 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801c438:	8813      	ldrh	r3, [r2, #0]
 801c43a:	1b9b      	subs	r3, r3, r6
 801c43c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c440:	4418      	add	r0, r3
 801c442:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801c446:	1b9b      	subs	r3, r3, r6
 801c448:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c44c:	441d      	add	r5, r3
 801c44e:	42a0      	cmp	r0, r4
 801c450:	d208      	bcs.n	801c464 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801c452:	eb00 0c01 	add.w	ip, r0, r1
 801c456:	4560      	cmp	r0, ip
 801c458:	d2ee      	bcs.n	801c438 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801c45a:	f815 3b01 	ldrb.w	r3, [r5], #1
 801c45e:	f800 3b01 	strb.w	r3, [r0], #1
 801c462:	e7f8      	b.n	801c456 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 801c464:	6838      	ldr	r0, [r7, #0]
 801c466:	6803      	ldr	r3, [r0, #0]
 801c468:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c46a:	4798      	blx	r3
 801c46c:	e7a2      	b.n	801c3b4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801c46e:	bf00      	nop
 801c470:	24025e20 	.word	0x24025e20
 801c474:	24025e1a 	.word	0x24025e1a

0801c478 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801c478:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c47a:	2300      	movs	r3, #0
 801c47c:	b085      	sub	sp, #20
 801c47e:	9300      	str	r3, [sp, #0]
 801c480:	4b41      	ldr	r3, [pc, #260]	@ (801c588 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801c482:	781b      	ldrb	r3, [r3, #0]
 801c484:	2b00      	cmp	r3, #0
 801c486:	d136      	bne.n	801c4f6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801c488:	4a40      	ldr	r2, [pc, #256]	@ (801c58c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c48a:	f9b2 2000 	ldrsh.w	r2, [r2]
 801c48e:	f8ad 2004 	strh.w	r2, [sp, #4]
 801c492:	2b00      	cmp	r3, #0
 801c494:	d131      	bne.n	801c4fa <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801c496:	4b3e      	ldr	r3, [pc, #248]	@ (801c590 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c498:	f9b3 3000 	ldrsh.w	r3, [r3]
 801c49c:	ac02      	add	r4, sp, #8
 801c49e:	6808      	ldr	r0, [r1, #0]
 801c4a0:	f8ad 3006 	strh.w	r3, [sp, #6]
 801c4a4:	ab02      	add	r3, sp, #8
 801c4a6:	6849      	ldr	r1, [r1, #4]
 801c4a8:	4d3a      	ldr	r5, [pc, #232]	@ (801c594 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801c4aa:	c303      	stmia	r3!, {r0, r1}
 801c4ac:	4669      	mov	r1, sp
 801c4ae:	4620      	mov	r0, r4
 801c4b0:	f7fa fa5e 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c4b4:	4668      	mov	r0, sp
 801c4b6:	f7fa fa17 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c4ba:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801c4be:	f8bd 2000 	ldrh.w	r2, [sp]
 801c4c2:	462e      	mov	r6, r5
 801c4c4:	6828      	ldr	r0, [r5, #0]
 801c4c6:	4413      	add	r3, r2
 801c4c8:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 801c4cc:	f8ad 3008 	strh.w	r3, [sp, #8]
 801c4d0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801c4d4:	4413      	add	r3, r2
 801c4d6:	f8ad 300a 	strh.w	r3, [sp, #10]
 801c4da:	6803      	ldr	r3, [r0, #0]
 801c4dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c4de:	4798      	blx	r3
 801c4e0:	f010 0f01 	tst.w	r0, #1
 801c4e4:	d00b      	beq.n	801c4fe <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 801c4e6:	6828      	ldr	r0, [r5, #0]
 801c4e8:	6803      	ldr	r3, [r0, #0]
 801c4ea:	e894 0006 	ldmia.w	r4, {r1, r2}
 801c4ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801c4f0:	4798      	blx	r3
 801c4f2:	b005      	add	sp, #20
 801c4f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c4f6:	4a26      	ldr	r2, [pc, #152]	@ (801c590 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801c4f8:	e7c7      	b.n	801c48a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 801c4fa:	4b24      	ldr	r3, [pc, #144]	@ (801c58c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c4fc:	e7cc      	b.n	801c498 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 801c4fe:	6830      	ldr	r0, [r6, #0]
 801c500:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 801c504:	6803      	ldr	r3, [r0, #0]
 801c506:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 801c50a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801c50c:	4798      	blx	r3
 801c50e:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 801c512:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 801c516:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 801c51a:	fb14 3402 	smlabb	r4, r4, r2, r3
 801c51e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c522:	4404      	add	r4, r0
 801c524:	6830      	ldr	r0, [r6, #0]
 801c526:	6803      	ldr	r3, [r0, #0]
 801c528:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c52a:	4798      	blx	r3
 801c52c:	4917      	ldr	r1, [pc, #92]	@ (801c58c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801c52e:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 801c532:	880b      	ldrh	r3, [r1, #0]
 801c534:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801c538:	fb03 c202 	mla	r2, r3, r2, ip
 801c53c:	437b      	muls	r3, r7
 801c53e:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 801c542:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c546:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c54a:	4410      	add	r0, r2
 801c54c:	18c2      	adds	r2, r0, r3
 801c54e:	4290      	cmp	r0, r2
 801c550:	d214      	bcs.n	801c57c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801c552:	eb00 0c07 	add.w	ip, r0, r7
 801c556:	4560      	cmp	r0, ip
 801c558:	d204      	bcs.n	801c564 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801c55a:	f814 3b01 	ldrb.w	r3, [r4], #1
 801c55e:	f800 3b01 	strb.w	r3, [r0], #1
 801c562:	e7f8      	b.n	801c556 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 801c564:	880b      	ldrh	r3, [r1, #0]
 801c566:	1b5b      	subs	r3, r3, r5
 801c568:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c56c:	4418      	add	r0, r3
 801c56e:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801c572:	1b5b      	subs	r3, r3, r5
 801c574:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c578:	441c      	add	r4, r3
 801c57a:	e7e8      	b.n	801c54e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 801c57c:	6830      	ldr	r0, [r6, #0]
 801c57e:	6803      	ldr	r3, [r0, #0]
 801c580:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c582:	4798      	blx	r3
 801c584:	e7b5      	b.n	801c4f2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801c586:	bf00      	nop
 801c588:	24025e18 	.word	0x24025e18
 801c58c:	24025e1a 	.word	0x24025e1a
 801c590:	24025e1c 	.word	0x24025e1c
 801c594:	24025e20 	.word	0x24025e20

0801c598 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801c598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c59c:	b08f      	sub	sp, #60	@ 0x3c
 801c59e:	461c      	mov	r4, r3
 801c5a0:	9203      	str	r2, [sp, #12]
 801c5a2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c5a6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c5a8:	6820      	ldr	r0, [r4, #0]
 801c5aa:	9100      	str	r1, [sp, #0]
 801c5ac:	9204      	str	r2, [sp, #16]
 801c5ae:	aa0a      	add	r2, sp, #40	@ 0x28
 801c5b0:	6861      	ldr	r1, [r4, #4]
 801c5b2:	c203      	stmia	r2!, {r0, r1}
 801c5b4:	6818      	ldr	r0, [r3, #0]
 801c5b6:	aa0c      	add	r2, sp, #48	@ 0x30
 801c5b8:	6859      	ldr	r1, [r3, #4]
 801c5ba:	c203      	stmia	r2!, {r0, r1}
 801c5bc:	a80a      	add	r0, sp, #40	@ 0x28
 801c5be:	f7fa f993 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801c5c2:	4621      	mov	r1, r4
 801c5c4:	a80c      	add	r0, sp, #48	@ 0x30
 801c5c6:	f7fa f9d3 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801c5ca:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801c5ce:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801c5d2:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 801c5d6:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801c5da:	bfdb      	ittet	le
 801c5dc:	b2b3      	uxthle	r3, r6
 801c5de:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801c5e2:	2301      	movgt	r3, #1
 801c5e4:	fb92 f3f3 	sdivle	r3, r2, r3
 801c5e8:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801c5ec:	441d      	add	r5, r3
 801c5ee:	fb92 f1f3 	sdiv	r1, r2, r3
 801c5f2:	fa1f fc81 	uxth.w	ip, r1
 801c5f6:	3d01      	subs	r5, #1
 801c5f8:	fb0c 2413 	mls	r4, ip, r3, r2
 801c5fc:	4661      	mov	r1, ip
 801c5fe:	fb14 f406 	smulbb	r4, r4, r6
 801c602:	4404      	add	r4, r0
 801c604:	fb95 f5f3 	sdiv	r5, r5, r3
 801c608:	b2a4      	uxth	r4, r4
 801c60a:	b131      	cbz	r1, 801c61a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 801c60c:	9b03      	ldr	r3, [sp, #12]
 801c60e:	9900      	ldr	r1, [sp, #0]
 801c610:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801c614:	ba1b      	rev	r3, r3
 801c616:	4419      	add	r1, r3
 801c618:	9100      	str	r1, [sp, #0]
 801c61a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801c61e:	b2ad      	uxth	r5, r5
 801c620:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 801c624:	4418      	add	r0, r3
 801c626:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801c62a:	00ad      	lsls	r5, r5, #2
 801c62c:	441a      	add	r2, r3
 801c62e:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801c632:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801c636:	9301      	str	r3, [sp, #4]
 801c638:	4b79      	ldr	r3, [pc, #484]	@ (801c820 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801c63a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801c63e:	6818      	ldr	r0, [r3, #0]
 801c640:	6803      	ldr	r3, [r0, #0]
 801c642:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c644:	4798      	blx	r3
 801c646:	4a77      	ldr	r2, [pc, #476]	@ (801c824 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801c648:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801c64c:	2c00      	cmp	r4, #0
 801c64e:	8813      	ldrh	r3, [r2, #0]
 801c650:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c654:	9209      	str	r2, [sp, #36]	@ 0x24
 801c656:	fb03 c101 	mla	r1, r3, r1, ip
 801c65a:	fb06 f303 	mul.w	r3, r6, r3
 801c65e:	bf18      	it	ne
 801c660:	2600      	movne	r6, #0
 801c662:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c666:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c66a:	4408      	add	r0, r1
 801c66c:	4403      	add	r3, r0
 801c66e:	9306      	str	r3, [sp, #24]
 801c670:	f105 0304 	add.w	r3, r5, #4
 801c674:	9305      	str	r3, [sp, #20]
 801c676:	9b01      	ldr	r3, [sp, #4]
 801c678:	bf08      	it	eq
 801c67a:	461e      	moveq	r6, r3
 801c67c:	2300      	movs	r3, #0
 801c67e:	b2b6      	uxth	r6, r6
 801c680:	9302      	str	r3, [sp, #8]
 801c682:	9a06      	ldr	r2, [sp, #24]
 801c684:	4290      	cmp	r0, r2
 801c686:	f080 80c2 	bcs.w	801c80e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801c68a:	b963      	cbnz	r3, 801c6a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c68c:	9b00      	ldr	r3, [sp, #0]
 801c68e:	781a      	ldrb	r2, [r3, #0]
 801c690:	0993      	lsrs	r3, r2, #6
 801c692:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801c696:	9202      	str	r2, [sp, #8]
 801c698:	1e5a      	subs	r2, r3, #1
 801c69a:	2a02      	cmp	r2, #2
 801c69c:	d815      	bhi.n	801c6ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801c69e:	9a00      	ldr	r2, [sp, #0]
 801c6a0:	b29b      	uxth	r3, r3
 801c6a2:	3201      	adds	r2, #1
 801c6a4:	9200      	str	r2, [sp, #0]
 801c6a6:	b1b4      	cbz	r4, 801c6d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801c6a8:	429c      	cmp	r4, r3
 801c6aa:	bf91      	iteee	ls
 801c6ac:	1b1c      	subls	r4, r3, r4
 801c6ae:	1ae4      	subhi	r4, r4, r3
 801c6b0:	4635      	movhi	r5, r6
 801c6b2:	f04f 0e00 	movhi.w	lr, #0
 801c6b6:	bf9b      	ittet	ls
 801c6b8:	fa1f fe84 	uxthls.w	lr, r4
 801c6bc:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801c6c0:	b2a4      	uxthhi	r4, r4
 801c6c2:	2400      	movls	r4, #0
 801c6c4:	4673      	mov	r3, lr
 801c6c6:	462e      	mov	r6, r5
 801c6c8:	e7db      	b.n	801c682 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 801c6ca:	9a00      	ldr	r2, [sp, #0]
 801c6cc:	9b00      	ldr	r3, [sp, #0]
 801c6ce:	3202      	adds	r2, #2
 801c6d0:	785b      	ldrb	r3, [r3, #1]
 801c6d2:	9200      	str	r2, [sp, #0]
 801c6d4:	e7e7      	b.n	801c6a6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 801c6d6:	2204      	movs	r2, #4
 801c6d8:	9905      	ldr	r1, [sp, #20]
 801c6da:	429e      	cmp	r6, r3
 801c6dc:	4615      	mov	r5, r2
 801c6de:	9a02      	ldr	r2, [sp, #8]
 801c6e0:	bf94      	ite	ls
 801c6e2:	eba3 0e06 	subls.w	lr, r3, r6
 801c6e6:	46a6      	movhi	lr, r4
 801c6e8:	fb15 1202 	smlabb	r2, r5, r2, r1
 801c6ec:	9903      	ldr	r1, [sp, #12]
 801c6ee:	bf8c      	ite	hi
 801c6f0:	1af5      	subhi	r5, r6, r3
 801c6f2:	fa1f fe8e 	uxthls.w	lr, lr
 801c6f6:	f851 c002 	ldr.w	ip, [r1, r2]
 801c6fa:	bf9a      	itte	ls
 801c6fc:	4625      	movls	r5, r4
 801c6fe:	4632      	movls	r2, r6
 801c700:	b2ad      	uxthhi	r5, r5
 801c702:	ea4f 611c 	mov.w	r1, ip, lsr #24
 801c706:	bf88      	it	hi
 801c708:	461a      	movhi	r2, r3
 801c70a:	b179      	cbz	r1, 801c72c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c70c:	29ff      	cmp	r1, #255	@ 0xff
 801c70e:	fa5f f98c 	uxtb.w	r9, ip
 801c712:	f3cc 2807 	ubfx	r8, ip, #8, #8
 801c716:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 801c71a:	d126      	bne.n	801c76a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c71c:	9f04      	ldr	r7, [sp, #16]
 801c71e:	2fff      	cmp	r7, #255	@ 0xff
 801c720:	d123      	bne.n	801c76a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 801c722:	4682      	mov	sl, r0
 801c724:	4611      	mov	r1, r2
 801c726:	f10a 0a03 	add.w	sl, sl, #3
 801c72a:	b9a9      	cbnz	r1, 801c758 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 801c72c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c730:	429e      	cmp	r6, r3
 801c732:	4410      	add	r0, r2
 801c734:	d8c6      	bhi.n	801c6c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c736:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801c73a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801c73e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c740:	1b64      	subs	r4, r4, r5
 801c742:	9a01      	ldr	r2, [sp, #4]
 801c744:	881b      	ldrh	r3, [r3, #0]
 801c746:	b2a4      	uxth	r4, r4
 801c748:	1a9b      	subs	r3, r3, r2
 801c74a:	2c00      	cmp	r4, #0
 801c74c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c750:	bf18      	it	ne
 801c752:	2500      	movne	r5, #0
 801c754:	4418      	add	r0, r3
 801c756:	e7b5      	b.n	801c6c4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801c758:	3901      	subs	r1, #1
 801c75a:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801c75e:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801c762:	f80a cc01 	strb.w	ip, [sl, #-1]
 801c766:	b289      	uxth	r1, r1
 801c768:	e7dd      	b.n	801c726 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801c76a:	9f04      	ldr	r7, [sp, #16]
 801c76c:	fb07 fa01 	mul.w	sl, r7, r1
 801c770:	f10a 0101 	add.w	r1, sl, #1
 801c774:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801c778:	1209      	asrs	r1, r1, #8
 801c77a:	ea6f 0a01 	mvn.w	sl, r1
 801c77e:	b289      	uxth	r1, r1
 801c780:	fb19 f901 	smulbb	r9, r9, r1
 801c784:	fa5f fa8a 	uxtb.w	sl, sl
 801c788:	fb18 f801 	smulbb	r8, r8, r1
 801c78c:	fb1c f101 	smulbb	r1, ip, r1
 801c790:	fa1f f789 	uxth.w	r7, r9
 801c794:	4684      	mov	ip, r0
 801c796:	4691      	mov	r9, r2
 801c798:	9707      	str	r7, [sp, #28]
 801c79a:	b289      	uxth	r1, r1
 801c79c:	fa1f f788 	uxth.w	r7, r8
 801c7a0:	9708      	str	r7, [sp, #32]
 801c7a2:	f10c 0c03 	add.w	ip, ip, #3
 801c7a6:	f1b9 0f00 	cmp.w	r9, #0
 801c7aa:	d0bf      	beq.n	801c72c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 801c7ac:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801c7b0:	f109 39ff 	add.w	r9, r9, #4294967295
 801c7b4:	9f07      	ldr	r7, [sp, #28]
 801c7b6:	fa1f f989 	uxth.w	r9, r9
 801c7ba:	fb08 780a 	mla	r8, r8, sl, r7
 801c7be:	9f08      	ldr	r7, [sp, #32]
 801c7c0:	fa1f f888 	uxth.w	r8, r8
 801c7c4:	f108 0b01 	add.w	fp, r8, #1
 801c7c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c7cc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7d0:	f80c 8c03 	strb.w	r8, [ip, #-3]
 801c7d4:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 801c7d8:	fb08 780a 	mla	r8, r8, sl, r7
 801c7dc:	fa1f f888 	uxth.w	r8, r8
 801c7e0:	f108 0b01 	add.w	fp, r8, #1
 801c7e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c7e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c7ec:	f80c 8c02 	strb.w	r8, [ip, #-2]
 801c7f0:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 801c7f4:	fb08 180a 	mla	r8, r8, sl, r1
 801c7f8:	fa1f f888 	uxth.w	r8, r8
 801c7fc:	f108 0b01 	add.w	fp, r8, #1
 801c800:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801c804:	ea4f 2828 	mov.w	r8, r8, asr #8
 801c808:	f80c 8c01 	strb.w	r8, [ip, #-1]
 801c80c:	e7c9      	b.n	801c7a2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 801c80e:	4b04      	ldr	r3, [pc, #16]	@ (801c820 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801c810:	6818      	ldr	r0, [r3, #0]
 801c812:	6803      	ldr	r3, [r0, #0]
 801c814:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c816:	4798      	blx	r3
 801c818:	b00f      	add	sp, #60	@ 0x3c
 801c81a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c81e:	bf00      	nop
 801c820:	24025e20 	.word	0x24025e20
 801c824:	24025e1a 	.word	0x24025e1a

0801c828 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801c828:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c82c:	b089      	sub	sp, #36	@ 0x24
 801c82e:	4607      	mov	r7, r0
 801c830:	4689      	mov	r9, r1
 801c832:	4692      	mov	sl, r2
 801c834:	ac08      	add	r4, sp, #32
 801c836:	461e      	mov	r6, r3
 801c838:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 801c83c:	4620      	mov	r0, r4
 801c83e:	f7fd ff77 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801c842:	683b      	ldr	r3, [r7, #0]
 801c844:	4605      	mov	r5, r0
 801c846:	4620      	mov	r0, r4
 801c848:	f8d3 8018 	ldr.w	r8, [r3, #24]
 801c84c:	f7fd fe7e 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801c850:	4683      	mov	fp, r0
 801c852:	4620      	mov	r0, r4
 801c854:	f7fd feae 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801c858:	4653      	mov	r3, sl
 801c85a:	464a      	mov	r2, r9
 801c85c:	4639      	mov	r1, r7
 801c85e:	9500      	str	r5, [sp, #0]
 801c860:	e9cd b001 	strd	fp, r0, [sp, #4]
 801c864:	a806      	add	r0, sp, #24
 801c866:	47c0      	blx	r8
 801c868:	a906      	add	r1, sp, #24
 801c86a:	4630      	mov	r0, r6
 801c86c:	f7fd fd52 	bl	801a314 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801c870:	4628      	mov	r0, r5
 801c872:	b009      	add	sp, #36	@ 0x24
 801c874:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c878 <_ZN8touchgfx8LCD24bppD0Ev>:
 801c878:	b510      	push	{r4, lr}
 801c87a:	4604      	mov	r4, r0
 801c87c:	216c      	movs	r1, #108	@ 0x6c
 801c87e:	f009 fbc9 	bl	8026014 <_ZdlPvj>
 801c882:	4620      	mov	r0, r4
 801c884:	bd10      	pop	{r4, pc}

0801c886 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801c886:	b510      	push	{r4, lr}
 801c888:	4604      	mov	r4, r0
 801c88a:	2104      	movs	r1, #4
 801c88c:	f009 fbc2 	bl	8026014 <_ZdlPvj>
 801c890:	4620      	mov	r0, r4
 801c892:	bd10      	pop	{r4, pc}

0801c894 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 801c894:	b510      	push	{r4, lr}
 801c896:	4604      	mov	r4, r0
 801c898:	2104      	movs	r1, #4
 801c89a:	f009 fbbb 	bl	8026014 <_ZdlPvj>
 801c89e:	4620      	mov	r0, r4
 801c8a0:	bd10      	pop	{r4, pc}

0801c8a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801c8a2:	b510      	push	{r4, lr}
 801c8a4:	4604      	mov	r4, r0
 801c8a6:	f640 0144 	movw	r1, #2116	@ 0x844
 801c8aa:	f009 fbb3 	bl	8026014 <_ZdlPvj>
 801c8ae:	4620      	mov	r0, r4
 801c8b0:	bd10      	pop	{r4, pc}

0801c8b2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801c8b2:	b510      	push	{r4, lr}
 801c8b4:	4604      	mov	r4, r0
 801c8b6:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801c8ba:	f009 fbab 	bl	8026014 <_ZdlPvj>
 801c8be:	4620      	mov	r0, r4
 801c8c0:	bd10      	pop	{r4, pc}

0801c8c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c8c2:	b510      	push	{r4, lr}
 801c8c4:	4604      	mov	r4, r0
 801c8c6:	2104      	movs	r1, #4
 801c8c8:	f009 fba4 	bl	8026014 <_ZdlPvj>
 801c8cc:	4620      	mov	r0, r4
 801c8ce:	bd10      	pop	{r4, pc}

0801c8d0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c8d0:	b510      	push	{r4, lr}
 801c8d2:	4604      	mov	r4, r0
 801c8d4:	2104      	movs	r1, #4
 801c8d6:	f009 fb9d 	bl	8026014 <_ZdlPvj>
 801c8da:	4620      	mov	r0, r4
 801c8dc:	bd10      	pop	{r4, pc}

0801c8de <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c8de:	b510      	push	{r4, lr}
 801c8e0:	4604      	mov	r4, r0
 801c8e2:	2104      	movs	r1, #4
 801c8e4:	f009 fb96 	bl	8026014 <_ZdlPvj>
 801c8e8:	4620      	mov	r0, r4
 801c8ea:	bd10      	pop	{r4, pc}

0801c8ec <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c8ec:	b510      	push	{r4, lr}
 801c8ee:	4604      	mov	r4, r0
 801c8f0:	2104      	movs	r1, #4
 801c8f2:	f009 fb8f 	bl	8026014 <_ZdlPvj>
 801c8f6:	4620      	mov	r0, r4
 801c8f8:	bd10      	pop	{r4, pc}

0801c8fa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c8fa:	b510      	push	{r4, lr}
 801c8fc:	4604      	mov	r4, r0
 801c8fe:	2104      	movs	r1, #4
 801c900:	f009 fb88 	bl	8026014 <_ZdlPvj>
 801c904:	4620      	mov	r0, r4
 801c906:	bd10      	pop	{r4, pc}

0801c908 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c908:	b510      	push	{r4, lr}
 801c90a:	4604      	mov	r4, r0
 801c90c:	2104      	movs	r1, #4
 801c90e:	f009 fb81 	bl	8026014 <_ZdlPvj>
 801c912:	4620      	mov	r0, r4
 801c914:	bd10      	pop	{r4, pc}

0801c916 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c916:	b510      	push	{r4, lr}
 801c918:	4604      	mov	r4, r0
 801c91a:	2104      	movs	r1, #4
 801c91c:	f009 fb7a 	bl	8026014 <_ZdlPvj>
 801c920:	4620      	mov	r0, r4
 801c922:	bd10      	pop	{r4, pc}

0801c924 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c924:	b510      	push	{r4, lr}
 801c926:	4604      	mov	r4, r0
 801c928:	2104      	movs	r1, #4
 801c92a:	f009 fb73 	bl	8026014 <_ZdlPvj>
 801c92e:	4620      	mov	r0, r4
 801c930:	bd10      	pop	{r4, pc}

0801c932 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801c932:	b510      	push	{r4, lr}
 801c934:	4604      	mov	r4, r0
 801c936:	2104      	movs	r1, #4
 801c938:	f009 fb6c 	bl	8026014 <_ZdlPvj>
 801c93c:	4620      	mov	r0, r4
 801c93e:	bd10      	pop	{r4, pc}

0801c940 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801c940:	b510      	push	{r4, lr}
 801c942:	4604      	mov	r4, r0
 801c944:	2104      	movs	r1, #4
 801c946:	f009 fb65 	bl	8026014 <_ZdlPvj>
 801c94a:	4620      	mov	r0, r4
 801c94c:	bd10      	pop	{r4, pc}

0801c94e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801c94e:	b510      	push	{r4, lr}
 801c950:	4604      	mov	r4, r0
 801c952:	2104      	movs	r1, #4
 801c954:	f009 fb5e 	bl	8026014 <_ZdlPvj>
 801c958:	4620      	mov	r0, r4
 801c95a:	bd10      	pop	{r4, pc}

0801c95c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 801c95c:	b510      	push	{r4, lr}
 801c95e:	4604      	mov	r4, r0
 801c960:	2104      	movs	r1, #4
 801c962:	f009 fb57 	bl	8026014 <_ZdlPvj>
 801c966:	4620      	mov	r0, r4
 801c968:	bd10      	pop	{r4, pc}

0801c96a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801c96a:	b510      	push	{r4, lr}
 801c96c:	4604      	mov	r4, r0
 801c96e:	2104      	movs	r1, #4
 801c970:	f009 fb50 	bl	8026014 <_ZdlPvj>
 801c974:	4620      	mov	r0, r4
 801c976:	bd10      	pop	{r4, pc}

0801c978 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801c978:	b510      	push	{r4, lr}
 801c97a:	4604      	mov	r4, r0
 801c97c:	2104      	movs	r1, #4
 801c97e:	f009 fb49 	bl	8026014 <_ZdlPvj>
 801c982:	4620      	mov	r0, r4
 801c984:	bd10      	pop	{r4, pc}

0801c986 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801c986:	b510      	push	{r4, lr}
 801c988:	4604      	mov	r4, r0
 801c98a:	2104      	movs	r1, #4
 801c98c:	f009 fb42 	bl	8026014 <_ZdlPvj>
 801c990:	4620      	mov	r0, r4
 801c992:	bd10      	pop	{r4, pc}

0801c994 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 801c994:	b510      	push	{r4, lr}
 801c996:	4604      	mov	r4, r0
 801c998:	2104      	movs	r1, #4
 801c99a:	f009 fb3b 	bl	8026014 <_ZdlPvj>
 801c99e:	4620      	mov	r0, r4
 801c9a0:	bd10      	pop	{r4, pc}

0801c9a2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801c9a2:	b510      	push	{r4, lr}
 801c9a4:	4604      	mov	r4, r0
 801c9a6:	2104      	movs	r1, #4
 801c9a8:	f009 fb34 	bl	8026014 <_ZdlPvj>
 801c9ac:	4620      	mov	r0, r4
 801c9ae:	bd10      	pop	{r4, pc}

0801c9b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801c9b0:	b510      	push	{r4, lr}
 801c9b2:	4604      	mov	r4, r0
 801c9b4:	2104      	movs	r1, #4
 801c9b6:	f009 fb2d 	bl	8026014 <_ZdlPvj>
 801c9ba:	4620      	mov	r0, r4
 801c9bc:	bd10      	pop	{r4, pc}

0801c9be <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801c9be:	b510      	push	{r4, lr}
 801c9c0:	4604      	mov	r4, r0
 801c9c2:	2104      	movs	r1, #4
 801c9c4:	f009 fb26 	bl	8026014 <_ZdlPvj>
 801c9c8:	4620      	mov	r0, r4
 801c9ca:	bd10      	pop	{r4, pc}

0801c9cc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 801c9cc:	b510      	push	{r4, lr}
 801c9ce:	4604      	mov	r4, r0
 801c9d0:	2104      	movs	r1, #4
 801c9d2:	f009 fb1f 	bl	8026014 <_ZdlPvj>
 801c9d6:	4620      	mov	r0, r4
 801c9d8:	bd10      	pop	{r4, pc}
	...

0801c9dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801c9dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c9e0:	b08f      	sub	sp, #60	@ 0x3c
 801c9e2:	461c      	mov	r4, r3
 801c9e4:	460e      	mov	r6, r1
 801c9e6:	9206      	str	r2, [sp, #24]
 801c9e8:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801c9ec:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c9ee:	9202      	str	r2, [sp, #8]
 801c9f0:	2a00      	cmp	r2, #0
 801c9f2:	f000 8128 	beq.w	801cc46 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 801c9f6:	6820      	ldr	r0, [r4, #0]
 801c9f8:	aa0a      	add	r2, sp, #40	@ 0x28
 801c9fa:	6861      	ldr	r1, [r4, #4]
 801c9fc:	c203      	stmia	r2!, {r0, r1}
 801c9fe:	6818      	ldr	r0, [r3, #0]
 801ca00:	aa0c      	add	r2, sp, #48	@ 0x30
 801ca02:	6859      	ldr	r1, [r3, #4]
 801ca04:	c203      	stmia	r2!, {r0, r1}
 801ca06:	a80a      	add	r0, sp, #40	@ 0x28
 801ca08:	f7f9 ff6e 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ca0c:	4621      	mov	r1, r4
 801ca0e:	a80c      	add	r0, sp, #48	@ 0x30
 801ca10:	f7f9 ffae 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ca14:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 801ca18:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801ca1c:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 801ca20:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 801ca24:	bfdb      	ittet	le
 801ca26:	b2bb      	uxthle	r3, r7
 801ca28:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801ca2c:	2301      	movgt	r3, #1
 801ca2e:	fb92 f3f3 	sdivle	r3, r2, r3
 801ca32:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801ca36:	441d      	add	r5, r3
 801ca38:	fb92 f1f3 	sdiv	r1, r2, r3
 801ca3c:	fa1f fc81 	uxth.w	ip, r1
 801ca40:	3d01      	subs	r5, #1
 801ca42:	fb0c 2413 	mls	r4, ip, r3, r2
 801ca46:	4661      	mov	r1, ip
 801ca48:	fb14 f407 	smulbb	r4, r4, r7
 801ca4c:	4404      	add	r4, r0
 801ca4e:	fb95 f5f3 	sdiv	r5, r5, r3
 801ca52:	b2a4      	uxth	r4, r4
 801ca54:	b121      	cbz	r1, 801ca60 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801ca56:	9b06      	ldr	r3, [sp, #24]
 801ca58:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 801ca5c:	ba1b      	rev	r3, r3
 801ca5e:	441e      	add	r6, r3
 801ca60:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801ca64:	b2ad      	uxth	r5, r5
 801ca66:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801ca6a:	4418      	add	r0, r3
 801ca6c:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801ca70:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 801ca74:	00ad      	lsls	r5, r5, #2
 801ca76:	441a      	add	r2, r3
 801ca78:	4b74      	ldr	r3, [pc, #464]	@ (801cc4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801ca7a:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801ca7e:	6818      	ldr	r0, [r3, #0]
 801ca80:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801ca84:	6803      	ldr	r3, [r0, #0]
 801ca86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ca88:	4798      	blx	r3
 801ca8a:	4a71      	ldr	r2, [pc, #452]	@ (801cc50 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 801ca8c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801ca90:	2c00      	cmp	r4, #0
 801ca92:	8813      	ldrh	r3, [r2, #0]
 801ca94:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801ca98:	9209      	str	r2, [sp, #36]	@ 0x24
 801ca9a:	fb03 c101 	mla	r1, r3, r1, ip
 801ca9e:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 801caa2:	fb03 f307 	mul.w	r3, r3, r7
 801caa6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801caaa:	9204      	str	r2, [sp, #16]
 801caac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cab0:	9a02      	ldr	r2, [sp, #8]
 801cab2:	4408      	add	r0, r1
 801cab4:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801cab8:	4403      	add	r3, r0
 801caba:	b292      	uxth	r2, r2
 801cabc:	9307      	str	r3, [sp, #28]
 801cabe:	f105 0304 	add.w	r3, r5, #4
 801cac2:	bf0c      	ite	eq
 801cac4:	4645      	moveq	r5, r8
 801cac6:	2500      	movne	r5, #0
 801cac8:	9308      	str	r3, [sp, #32]
 801caca:	2300      	movs	r3, #0
 801cacc:	b2ad      	uxth	r5, r5
 801cace:	9205      	str	r2, [sp, #20]
 801cad0:	9303      	str	r3, [sp, #12]
 801cad2:	9a07      	ldr	r2, [sp, #28]
 801cad4:	4282      	cmp	r2, r0
 801cad6:	f240 80b1 	bls.w	801cc3c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 801cada:	b95b      	cbnz	r3, 801caf4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 801cadc:	7832      	ldrb	r2, [r6, #0]
 801cade:	0993      	lsrs	r3, r2, #6
 801cae0:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801cae4:	9203      	str	r2, [sp, #12]
 801cae6:	1e5a      	subs	r2, r3, #1
 801cae8:	2a02      	cmp	r2, #2
 801caea:	bf8d      	iteet	hi
 801caec:	7873      	ldrbhi	r3, [r6, #1]
 801caee:	3601      	addls	r6, #1
 801caf0:	b29b      	uxthls	r3, r3
 801caf2:	3602      	addhi	r6, #2
 801caf4:	b184      	cbz	r4, 801cb18 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 801caf6:	429c      	cmp	r4, r3
 801caf8:	bf91      	iteee	ls
 801cafa:	1b1c      	subls	r4, r3, r4
 801cafc:	1ae4      	subhi	r4, r4, r3
 801cafe:	4629      	movhi	r1, r5
 801cb00:	f04f 0e00 	movhi.w	lr, #0
 801cb04:	bf9b      	ittet	ls
 801cb06:	fa1f fe84 	uxthls.w	lr, r4
 801cb0a:	2400      	movls	r4, #0
 801cb0c:	b2a4      	uxthhi	r4, r4
 801cb0e:	fa1f f188 	uxthls.w	r1, r8
 801cb12:	4673      	mov	r3, lr
 801cb14:	460d      	mov	r5, r1
 801cb16:	e7dc      	b.n	801cad2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 801cb18:	2203      	movs	r2, #3
 801cb1a:	9908      	ldr	r1, [sp, #32]
 801cb1c:	42ab      	cmp	r3, r5
 801cb1e:	4617      	mov	r7, r2
 801cb20:	9a03      	ldr	r2, [sp, #12]
 801cb22:	bf24      	itt	cs
 801cb24:	eba3 0e05 	subcs.w	lr, r3, r5
 801cb28:	9501      	strcs	r5, [sp, #4]
 801cb2a:	fb17 1702 	smlabb	r7, r7, r2, r1
 801cb2e:	9a06      	ldr	r2, [sp, #24]
 801cb30:	bf34      	ite	cc
 801cb32:	1ae9      	subcc	r1, r5, r3
 801cb34:	fa1f fe8e 	uxthcs.w	lr, lr
 801cb38:	4417      	add	r7, r2
 801cb3a:	9a02      	ldr	r2, [sp, #8]
 801cb3c:	bf2f      	iteee	cs
 801cb3e:	4621      	movcs	r1, r4
 801cb40:	b289      	uxthcc	r1, r1
 801cb42:	9301      	strcc	r3, [sp, #4]
 801cb44:	46a6      	movcc	lr, r4
 801cb46:	2aff      	cmp	r2, #255	@ 0xff
 801cb48:	d11e      	bne.n	801cb88 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 801cb4a:	4681      	mov	r9, r0
 801cb4c:	f8dd c004 	ldr.w	ip, [sp, #4]
 801cb50:	f109 0903 	add.w	r9, r9, #3
 801cb54:	f1bc 0f00 	cmp.w	ip, #0
 801cb58:	d15f      	bne.n	801cc1a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 801cb5a:	9a01      	ldr	r2, [sp, #4]
 801cb5c:	42ab      	cmp	r3, r5
 801cb5e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cb62:	4410      	add	r0, r2
 801cb64:	d3d5      	bcc.n	801cb12 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801cb66:	fa1f f188 	uxth.w	r1, r8
 801cb6a:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 801cb6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cb70:	1a64      	subs	r4, r4, r1
 801cb72:	881b      	ldrh	r3, [r3, #0]
 801cb74:	b2a4      	uxth	r4, r4
 801cb76:	eba3 0308 	sub.w	r3, r3, r8
 801cb7a:	2c00      	cmp	r4, #0
 801cb7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cb80:	bf18      	it	ne
 801cb82:	2100      	movne	r1, #0
 801cb84:	4418      	add	r0, r3
 801cb86:	e7c4      	b.n	801cb12 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 801cb88:	4684      	mov	ip, r0
 801cb8a:	f8dd a004 	ldr.w	sl, [sp, #4]
 801cb8e:	f10c 0c03 	add.w	ip, ip, #3
 801cb92:	f1ba 0f00 	cmp.w	sl, #0
 801cb96:	d0e0      	beq.n	801cb5a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 801cb98:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 801cb9c:	f10a 3aff 	add.w	sl, sl, #4294967295
 801cba0:	9a05      	ldr	r2, [sp, #20]
 801cba2:	f897 9000 	ldrb.w	r9, [r7]
 801cba6:	fa1f fa8a 	uxth.w	sl, sl
 801cbaa:	fb1b fb02 	smulbb	fp, fp, r2
 801cbae:	9a04      	ldr	r2, [sp, #16]
 801cbb0:	fb09 b902 	mla	r9, r9, r2, fp
 801cbb4:	9a05      	ldr	r2, [sp, #20]
 801cbb6:	fa1f f989 	uxth.w	r9, r9
 801cbba:	f109 0b01 	add.w	fp, r9, #1
 801cbbe:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cbc2:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 801cbc6:	fb1b fb02 	smulbb	fp, fp, r2
 801cbca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbce:	9a04      	ldr	r2, [sp, #16]
 801cbd0:	f80c 9c03 	strb.w	r9, [ip, #-3]
 801cbd4:	f897 9001 	ldrb.w	r9, [r7, #1]
 801cbd8:	fb09 b902 	mla	r9, r9, r2, fp
 801cbdc:	9a05      	ldr	r2, [sp, #20]
 801cbde:	fa1f f989 	uxth.w	r9, r9
 801cbe2:	f109 0b01 	add.w	fp, r9, #1
 801cbe6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cbea:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 801cbee:	fb1b fb02 	smulbb	fp, fp, r2
 801cbf2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cbf6:	9a04      	ldr	r2, [sp, #16]
 801cbf8:	f80c 9c02 	strb.w	r9, [ip, #-2]
 801cbfc:	f897 9002 	ldrb.w	r9, [r7, #2]
 801cc00:	fb09 b902 	mla	r9, r9, r2, fp
 801cc04:	fa1f f989 	uxth.w	r9, r9
 801cc08:	f109 0b01 	add.w	fp, r9, #1
 801cc0c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801cc10:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cc14:	f80c 9c01 	strb.w	r9, [ip, #-1]
 801cc18:	e7b9      	b.n	801cb8e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 801cc1a:	f897 a000 	ldrb.w	sl, [r7]
 801cc1e:	f10c 3cff 	add.w	ip, ip, #4294967295
 801cc22:	f809 ac03 	strb.w	sl, [r9, #-3]
 801cc26:	fa1f fc8c 	uxth.w	ip, ip
 801cc2a:	f897 a001 	ldrb.w	sl, [r7, #1]
 801cc2e:	f809 ac02 	strb.w	sl, [r9, #-2]
 801cc32:	f897 a002 	ldrb.w	sl, [r7, #2]
 801cc36:	f809 ac01 	strb.w	sl, [r9, #-1]
 801cc3a:	e789      	b.n	801cb50 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 801cc3c:	4b03      	ldr	r3, [pc, #12]	@ (801cc4c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801cc3e:	6818      	ldr	r0, [r3, #0]
 801cc40:	6803      	ldr	r3, [r0, #0]
 801cc42:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801cc44:	4798      	blx	r3
 801cc46:	b00f      	add	sp, #60	@ 0x3c
 801cc48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc4c:	24025e20 	.word	0x24025e20
 801cc50:	24025e1a 	.word	0x24025e1a

0801cc54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801cc54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc58:	b09b      	sub	sp, #108	@ 0x6c
 801cc5a:	461d      	mov	r5, r3
 801cc5c:	4604      	mov	r4, r0
 801cc5e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801cc60:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 801cc64:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 801cc68:	9208      	str	r2, [sp, #32]
 801cc6a:	2a00      	cmp	r2, #0
 801cc6c:	f000 81f3 	beq.w	801d056 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 801cc70:	6828      	ldr	r0, [r5, #0]
 801cc72:	aa16      	add	r2, sp, #88	@ 0x58
 801cc74:	6869      	ldr	r1, [r5, #4]
 801cc76:	c203      	stmia	r2!, {r0, r1}
 801cc78:	6818      	ldr	r0, [r3, #0]
 801cc7a:	aa18      	add	r2, sp, #96	@ 0x60
 801cc7c:	6859      	ldr	r1, [r3, #4]
 801cc7e:	c203      	stmia	r2!, {r0, r1}
 801cc80:	a816      	add	r0, sp, #88	@ 0x58
 801cc82:	f7f9 fe31 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801cc86:	4629      	mov	r1, r5
 801cc88:	a818      	add	r0, sp, #96	@ 0x60
 801cc8a:	f7f9 fe71 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801cc8e:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 801cc92:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 801cc96:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801cc9a:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 801cc9e:	bfdb      	ittet	le
 801cca0:	b29a      	uxthle	r2, r3
 801cca2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801cca6:	f04f 0a01 	movgt.w	sl, #1
 801ccaa:	fb91 faf2 	sdivle	sl, r1, r2
 801ccae:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 801ccb2:	4456      	add	r6, sl
 801ccb4:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 801ccb8:	3e01      	subs	r6, #1
 801ccba:	fb92 f0fa 	sdiv	r0, r2, sl
 801ccbe:	b280      	uxth	r0, r0
 801ccc0:	fb00 281a 	mls	r8, r0, sl, r2
 801ccc4:	900e      	str	r0, [sp, #56]	@ 0x38
 801ccc6:	fb18 f803 	smulbb	r8, r8, r3
 801ccca:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 801ccce:	4488      	add	r8, r1
 801ccd0:	4419      	add	r1, r3
 801ccd2:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 801ccd6:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 801ccda:	fa1f f888 	uxth.w	r8, r8
 801ccde:	441a      	add	r2, r3
 801cce0:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801cce4:	9303      	str	r3, [sp, #12]
 801cce6:	4b9c      	ldr	r3, [pc, #624]	@ (801cf58 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 801cce8:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 801ccec:	6818      	ldr	r0, [r3, #0]
 801ccee:	6803      	ldr	r3, [r0, #0]
 801ccf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ccf2:	4798      	blx	r3
 801ccf4:	4b99      	ldr	r3, [pc, #612]	@ (801cf5c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 801ccf6:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 801ccfa:	f1b8 0f00 	cmp.w	r8, #0
 801ccfe:	881a      	ldrh	r2, [r3, #0]
 801cd00:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 801cd04:	fb02 f505 	mul.w	r5, r2, r5
 801cd08:	fb02 7101 	mla	r1, r2, r1, r7
 801cd0c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cd10:	9314      	str	r3, [sp, #80]	@ 0x50
 801cd12:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801cd16:	9b08      	ldr	r3, [sp, #32]
 801cd18:	fb96 f6fa 	sdiv	r6, r6, sl
 801cd1c:	4408      	add	r0, r1
 801cd1e:	f106 0601 	add.w	r6, r6, #1
 801cd22:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801cd26:	f04f 0100 	mov.w	r1, #0
 801cd2a:	eb00 0205 	add.w	r2, r0, r5
 801cd2e:	b2b6      	uxth	r6, r6
 801cd30:	b29b      	uxth	r3, r3
 801cd32:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd34:	9209      	str	r2, [sp, #36]	@ 0x24
 801cd36:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd38:	930d      	str	r3, [sp, #52]	@ 0x34
 801cd3a:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 801cd3e:	4b88      	ldr	r3, [pc, #544]	@ (801cf60 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 801cd40:	f106 0204 	add.w	r2, r6, #4
 801cd44:	eba3 0304 	sub.w	r3, r3, r4
 801cd48:	9205      	str	r2, [sp, #20]
 801cd4a:	9a03      	ldr	r2, [sp, #12]
 801cd4c:	bf18      	it	ne
 801cd4e:	2200      	movne	r2, #0
 801cd50:	9315      	str	r3, [sp, #84]	@ 0x54
 801cd52:	b292      	uxth	r2, r2
 801cd54:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801cd56:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd58:	fa11 f383 	uxtah	r3, r1, r3
 801cd5c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801cd5e:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801cd62:	3304      	adds	r3, #4
 801cd64:	9306      	str	r3, [sp, #24]
 801cd66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd68:	4283      	cmp	r3, r0
 801cd6a:	f240 816f 	bls.w	801d04c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 801cd6e:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 801cd72:	f04f 0900 	mov.w	r9, #0
 801cd76:	9d06      	ldr	r5, [sp, #24]
 801cd78:	fbb8 f3f3 	udiv	r3, r8, r3
 801cd7c:	ebaa 0303 	sub.w	r3, sl, r3
 801cd80:	782d      	ldrb	r5, [r5, #0]
 801cd82:	b29b      	uxth	r3, r3
 801cd84:	950f      	str	r5, [sp, #60]	@ 0x3c
 801cd86:	3501      	adds	r5, #1
 801cd88:	9312      	str	r3, [sp, #72]	@ 0x48
 801cd8a:	9b06      	ldr	r3, [sp, #24]
 801cd8c:	9504      	str	r5, [sp, #16]
 801cd8e:	7859      	ldrb	r1, [r3, #1]
 801cd90:	789b      	ldrb	r3, [r3, #2]
 801cd92:	021b      	lsls	r3, r3, #8
 801cd94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 801cd98:	9906      	ldr	r1, [sp, #24]
 801cd9a:	78c9      	ldrb	r1, [r1, #3]
 801cd9c:	430b      	orrs	r3, r1
 801cd9e:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cda0:	4419      	add	r1, r3
 801cda2:	1c4d      	adds	r5, r1, #1
 801cda4:	7849      	ldrb	r1, [r1, #1]
 801cda6:	9502      	str	r5, [sp, #8]
 801cda8:	0209      	lsls	r1, r1, #8
 801cdaa:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 801cdac:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 801cdb0:	5ceb      	ldrb	r3, [r5, r3]
 801cdb2:	4319      	orrs	r1, r3
 801cdb4:	b28b      	uxth	r3, r1
 801cdb6:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801cdba:	930a      	str	r3, [sp, #40]	@ 0x28
 801cdbc:	2300      	movs	r3, #0
 801cdbe:	9307      	str	r3, [sp, #28]
 801cdc0:	2301      	movs	r3, #1
 801cdc2:	e9cd 3300 	strd	r3, r3, [sp]
 801cdc6:	469c      	mov	ip, r3
 801cdc8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 801cdcc:	930c      	str	r3, [sp, #48]	@ 0x30
 801cdce:	f1b8 0f00 	cmp.w	r8, #0
 801cdd2:	f000 8082 	beq.w	801ceda <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 801cdd6:	45c4      	cmp	ip, r8
 801cdd8:	d270      	bcs.n	801cebc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 801cdda:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cddc:	eba8 080c 	sub.w	r8, r8, ip
 801cde0:	4611      	mov	r1, r2
 801cde2:	4283      	cmp	r3, r0
 801cde4:	fa1f f888 	uxth.w	r8, r8
 801cde8:	d802      	bhi.n	801cdf0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 801cdea:	e074      	b.n	801ced6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 801cdec:	2b00      	cmp	r3, #0
 801cdee:	d15f      	bne.n	801ceb0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 801cdf0:	9b02      	ldr	r3, [sp, #8]
 801cdf2:	9a01      	ldr	r2, [sp, #4]
 801cdf4:	785b      	ldrb	r3, [r3, #1]
 801cdf6:	f1c2 0207 	rsb	r2, r2, #7
 801cdfa:	9d01      	ldr	r5, [sp, #4]
 801cdfc:	4093      	lsls	r3, r2
 801cdfe:	005b      	lsls	r3, r3, #1
 801ce00:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801ce04:	9b02      	ldr	r3, [sp, #8]
 801ce06:	781b      	ldrb	r3, [r3, #0]
 801ce08:	412b      	asrs	r3, r5
 801ce0a:	b2db      	uxtb	r3, r3
 801ce0c:	4313      	orrs	r3, r2
 801ce0e:	462a      	mov	r2, r5
 801ce10:	3201      	adds	r2, #1
 801ce12:	b29e      	uxth	r6, r3
 801ce14:	b2d2      	uxtb	r2, r2
 801ce16:	2a08      	cmp	r2, #8
 801ce18:	9201      	str	r2, [sp, #4]
 801ce1a:	9a02      	ldr	r2, [sp, #8]
 801ce1c:	bf09      	itett	eq
 801ce1e:	3202      	addeq	r2, #2
 801ce20:	3201      	addne	r2, #1
 801ce22:	9202      	streq	r2, [sp, #8]
 801ce24:	2200      	moveq	r2, #0
 801ce26:	bf14      	ite	ne
 801ce28:	9202      	strne	r2, [sp, #8]
 801ce2a:	9201      	streq	r2, [sp, #4]
 801ce2c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801ce2e:	42b2      	cmp	r2, r6
 801ce30:	d309      	bcc.n	801ce46 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 801ce32:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801ce36:	2301      	movs	r3, #1
 801ce38:	9a04      	ldr	r2, [sp, #16]
 801ce3a:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801ce3e:	d30e      	bcc.n	801ce5e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 801ce40:	9300      	str	r3, [sp, #0]
 801ce42:	2500      	movs	r5, #0
 801ce44:	e035      	b.n	801ceb2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 801ce46:	9b04      	ldr	r3, [sp, #16]
 801ce48:	429e      	cmp	r6, r3
 801ce4a:	d318      	bcc.n	801ce7e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 801ce4c:	9b00      	ldr	r3, [sp, #0]
 801ce4e:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 801ce52:	18e3      	adds	r3, r4, r3
 801ce54:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 801ce58:	9b00      	ldr	r3, [sp, #0]
 801ce5a:	3301      	adds	r3, #1
 801ce5c:	b29b      	uxth	r3, r3
 801ce5e:	9a04      	ldr	r2, [sp, #16]
 801ce60:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 801ce64:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ce68:	9f00      	ldr	r7, [sp, #0]
 801ce6a:	7115      	strb	r5, [r2, #4]
 801ce6c:	3701      	adds	r7, #1
 801ce6e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801ce70:	7157      	strb	r7, [r2, #5]
 801ce72:	80d5      	strh	r5, [r2, #6]
 801ce74:	9a04      	ldr	r2, [sp, #16]
 801ce76:	3201      	adds	r2, #1
 801ce78:	b292      	uxth	r2, r2
 801ce7a:	9204      	str	r2, [sp, #16]
 801ce7c:	e7e0      	b.n	801ce40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 801ce7e:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 801ce82:	4632      	mov	r2, r6
 801ce84:	795b      	ldrb	r3, [r3, #5]
 801ce86:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 801ce8a:	4425      	add	r5, r4
 801ce8c:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801ce8e:	eb07 0c05 	add.w	ip, r7, r5
 801ce92:	f1bc 0f00 	cmp.w	ip, #0
 801ce96:	dd07      	ble.n	801cea8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 801ce98:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 801ce9c:	f892 c004 	ldrb.w	ip, [r2, #4]
 801cea0:	f805 cd01 	strb.w	ip, [r5, #-1]!
 801cea4:	88d2      	ldrh	r2, [r2, #6]
 801cea6:	e7f1      	b.n	801ce8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 801cea8:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801ceac:	b29b      	uxth	r3, r3
 801ceae:	e7c3      	b.n	801ce38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 801ceb0:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801ceb2:	460a      	mov	r2, r1
 801ceb4:	960a      	str	r6, [sp, #40]	@ 0x28
 801ceb6:	46a9      	mov	r9, r5
 801ceb8:	469c      	mov	ip, r3
 801ceba:	e788      	b.n	801cdce <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 801cebc:	ebac 0308 	sub.w	r3, ip, r8
 801cec0:	eb09 0508 	add.w	r5, r9, r8
 801cec4:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801cec8:	b29b      	uxth	r3, r3
 801ceca:	b2ad      	uxth	r5, r5
 801cecc:	f04f 0800 	mov.w	r8, #0
 801ced0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ced2:	4282      	cmp	r2, r0
 801ced4:	d88a      	bhi.n	801cdec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 801ced6:	460a      	mov	r2, r1
 801ced8:	e745      	b.n	801cd66 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 801ceda:	4594      	cmp	ip, r2
 801cedc:	9d08      	ldr	r5, [sp, #32]
 801cede:	4686      	mov	lr, r0
 801cee0:	bf27      	ittee	cs
 801cee2:	ebac 0302 	subcs.w	r3, ip, r2
 801cee6:	4616      	movcs	r6, r2
 801cee8:	eba2 010c 	subcc.w	r1, r2, ip
 801ceec:	4666      	movcc	r6, ip
 801ceee:	bf27      	ittee	cs
 801cef0:	b29b      	uxthcs	r3, r3
 801cef2:	4641      	movcs	r1, r8
 801cef4:	b289      	uxthcc	r1, r1
 801cef6:	4643      	movcc	r3, r8
 801cef8:	2dff      	cmp	r5, #255	@ 0xff
 801cefa:	eb09 0506 	add.w	r5, r9, r6
 801cefe:	b2ad      	uxth	r5, r5
 801cf00:	d130      	bne.n	801cf64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801cf02:	45a9      	cmp	r9, r5
 801cf04:	f10e 0e03 	add.w	lr, lr, #3
 801cf08:	d17a      	bne.n	801d000 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 801cf0a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801cf0e:	4594      	cmp	ip, r2
 801cf10:	4430      	add	r0, r6
 801cf12:	d3db      	bcc.n	801cecc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 801cf14:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801cf16:	9903      	ldr	r1, [sp, #12]
 801cf18:	8812      	ldrh	r2, [r2, #0]
 801cf1a:	1a52      	subs	r2, r2, r1
 801cf1c:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cf1e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801cf22:	4410      	add	r0, r2
 801cf24:	9a07      	ldr	r2, [sp, #28]
 801cf26:	3201      	adds	r2, #1
 801cf28:	428a      	cmp	r2, r1
 801cf2a:	9207      	str	r2, [sp, #28]
 801cf2c:	f040 8081 	bne.w	801d032 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 801cf30:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 801cf34:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 801cf38:	9b03      	ldr	r3, [sp, #12]
 801cf3a:	eba8 080c 	sub.w	r8, r8, ip
 801cf3e:	fa1f f888 	uxth.w	r8, r8
 801cf42:	f1b8 0f00 	cmp.w	r8, #0
 801cf46:	bf08      	it	eq
 801cf48:	461a      	moveq	r2, r3
 801cf4a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cf4c:	bf18      	it	ne
 801cf4e:	2200      	movne	r2, #0
 801cf50:	3301      	adds	r3, #1
 801cf52:	b292      	uxth	r2, r2
 801cf54:	930b      	str	r3, [sp, #44]	@ 0x2c
 801cf56:	e6fd      	b.n	801cd54 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 801cf58:	24025e20 	.word	0x24025e20
 801cf5c:	24025e1a 	.word	0x24025e1a
 801cf60:	fffff7fb 	.word	0xfffff7fb
 801cf64:	45a9      	cmp	r9, r5
 801cf66:	f10e 0e03 	add.w	lr, lr, #3
 801cf6a:	d0ce      	beq.n	801cf0a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 801cf6c:	f109 0701 	add.w	r7, r9, #1
 801cf70:	44a1      	add	r9, r4
 801cf72:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 801cf76:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801cf7a:	9713      	str	r7, [sp, #76]	@ 0x4c
 801cf7c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801cf80:	9f05      	ldr	r7, [sp, #20]
 801cf82:	eb07 0908 	add.w	r9, r7, r8
 801cf86:	f817 8008 	ldrb.w	r8, [r7, r8]
 801cf8a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801cf8c:	fb1b fb07 	smulbb	fp, fp, r7
 801cf90:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cf92:	fb08 b807 	mla	r8, r8, r7, fp
 801cf96:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801cf98:	fa1f f888 	uxth.w	r8, r8
 801cf9c:	f108 0b01 	add.w	fp, r8, #1
 801cfa0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cfa4:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 801cfa8:	fb1b fb07 	smulbb	fp, fp, r7
 801cfac:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cfb0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cfb2:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801cfb6:	f899 8001 	ldrb.w	r8, [r9, #1]
 801cfba:	fb08 b807 	mla	r8, r8, r7, fp
 801cfbe:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 801cfc0:	fa1f f888 	uxth.w	r8, r8
 801cfc4:	f108 0b01 	add.w	fp, r8, #1
 801cfc8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 801cfcc:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cfd0:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801cfd4:	f899 8002 	ldrb.w	r8, [r9, #2]
 801cfd8:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 801cfdc:	fb19 f907 	smulbb	r9, r9, r7
 801cfe0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801cfe2:	fb08 9807 	mla	r8, r8, r7, r9
 801cfe6:	fa1f f888 	uxth.w	r8, r8
 801cfea:	f108 0901 	add.w	r9, r8, #1
 801cfee:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 801cff2:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 801cff6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cffa:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801cffe:	e7b1      	b.n	801cf64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 801d000:	f109 0b01 	add.w	fp, r9, #1
 801d004:	44a1      	add	r9, r4
 801d006:	9f05      	ldr	r7, [sp, #20]
 801d008:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 801d00c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d010:	eb07 0908 	add.w	r9, r7, r8
 801d014:	f817 8008 	ldrb.w	r8, [r7, r8]
 801d018:	f80e 8c03 	strb.w	r8, [lr, #-3]
 801d01c:	f899 8001 	ldrb.w	r8, [r9, #1]
 801d020:	f80e 8c02 	strb.w	r8, [lr, #-2]
 801d024:	f899 8002 	ldrb.w	r8, [r9, #2]
 801d028:	fa1f f98b 	uxth.w	r9, fp
 801d02c:	f80e 8c01 	strb.w	r8, [lr, #-1]
 801d030:	e767      	b.n	801cf02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 801d032:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 801d036:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 801d03a:	eba8 0801 	sub.w	r8, r8, r1
 801d03e:	fa1f f888 	uxth.w	r8, r8
 801d042:	f1b8 0f00 	cmp.w	r8, #0
 801d046:	bf18      	it	ne
 801d048:	2100      	movne	r1, #0
 801d04a:	e741      	b.n	801ced0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 801d04c:	4b03      	ldr	r3, [pc, #12]	@ (801d05c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801d04e:	6818      	ldr	r0, [r3, #0]
 801d050:	6803      	ldr	r3, [r0, #0]
 801d052:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d054:	4798      	blx	r3
 801d056:	b01b      	add	sp, #108	@ 0x6c
 801d058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d05c:	24025e20 	.word	0x24025e20

0801d060 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801d060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d064:	b09d      	sub	sp, #116	@ 0x74
 801d066:	461d      	mov	r5, r3
 801d068:	4604      	mov	r4, r0
 801d06a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d06c:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801d070:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 801d074:	920c      	str	r2, [sp, #48]	@ 0x30
 801d076:	2a00      	cmp	r2, #0
 801d078:	f000 81de 	beq.w	801d438 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 801d07c:	6828      	ldr	r0, [r5, #0]
 801d07e:	aa18      	add	r2, sp, #96	@ 0x60
 801d080:	6869      	ldr	r1, [r5, #4]
 801d082:	c203      	stmia	r2!, {r0, r1}
 801d084:	6818      	ldr	r0, [r3, #0]
 801d086:	aa1a      	add	r2, sp, #104	@ 0x68
 801d088:	6859      	ldr	r1, [r3, #4]
 801d08a:	c203      	stmia	r2!, {r0, r1}
 801d08c:	a818      	add	r0, sp, #96	@ 0x60
 801d08e:	f7f9 fc2b 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d092:	4629      	mov	r1, r5
 801d094:	a81a      	add	r0, sp, #104	@ 0x68
 801d096:	f7f9 fc6b 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d09a:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801d09e:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801d0a2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801d0a6:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 801d0aa:	bfdb      	ittet	le
 801d0ac:	b29a      	uxthle	r2, r3
 801d0ae:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d0b2:	2201      	movgt	r2, #1
 801d0b4:	fb91 f2f2 	sdivle	r2, r1, r2
 801d0b8:	9201      	str	r2, [sp, #4]
 801d0ba:	9801      	ldr	r0, [sp, #4]
 801d0bc:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801d0c0:	9901      	ldr	r1, [sp, #4]
 801d0c2:	fb92 f0f0 	sdiv	r0, r2, r0
 801d0c6:	b280      	uxth	r0, r0
 801d0c8:	440f      	add	r7, r1
 801d0ca:	900d      	str	r0, [sp, #52]	@ 0x34
 801d0cc:	3f01      	subs	r7, #1
 801d0ce:	9801      	ldr	r0, [sp, #4]
 801d0d0:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801d0d2:	fb05 2510 	mls	r5, r5, r0, r2
 801d0d6:	fb97 f7f1 	sdiv	r7, r7, r1
 801d0da:	fb15 f503 	smulbb	r5, r5, r3
 801d0de:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801d0e2:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 801d0e6:	3701      	adds	r7, #1
 801d0e8:	440d      	add	r5, r1
 801d0ea:	4419      	add	r1, r3
 801d0ec:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 801d0f0:	b2bf      	uxth	r7, r7
 801d0f2:	441a      	add	r2, r3
 801d0f4:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 801d0f8:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 801d0fc:	00bf      	lsls	r7, r7, #2
 801d0fe:	9304      	str	r3, [sp, #16]
 801d100:	b2ad      	uxth	r5, r5
 801d102:	4bb0      	ldr	r3, [pc, #704]	@ (801d3c4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 801d104:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 801d108:	6818      	ldr	r0, [r3, #0]
 801d10a:	6803      	ldr	r3, [r0, #0]
 801d10c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d10e:	4798      	blx	r3
 801d110:	4bad      	ldr	r3, [pc, #692]	@ (801d3c8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 801d112:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 801d116:	2d00      	cmp	r5, #0
 801d118:	881a      	ldrh	r2, [r3, #0]
 801d11a:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 801d11e:	fb02 f606 	mul.w	r6, r2, r6
 801d122:	fb02 c101 	mla	r1, r2, r1, ip
 801d126:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801d12a:	9316      	str	r3, [sp, #88]	@ 0x58
 801d12c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d130:	4ba6      	ldr	r3, [pc, #664]	@ (801d3cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 801d132:	eb00 0801 	add.w	r8, r0, r1
 801d136:	bf18      	it	ne
 801d138:	2100      	movne	r1, #0
 801d13a:	eba3 0304 	sub.w	r3, r3, r4
 801d13e:	eb08 0206 	add.w	r2, r8, r6
 801d142:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d144:	9208      	str	r2, [sp, #32]
 801d146:	f107 0204 	add.w	r2, r7, #4
 801d14a:	9211      	str	r2, [sp, #68]	@ 0x44
 801d14c:	9a04      	ldr	r2, [sp, #16]
 801d14e:	bf08      	it	eq
 801d150:	4611      	moveq	r1, r2
 801d152:	2200      	movs	r2, #0
 801d154:	b289      	uxth	r1, r1
 801d156:	920b      	str	r2, [sp, #44]	@ 0x2c
 801d158:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d15a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d15c:	fa12 f383 	uxtah	r3, r2, r3
 801d160:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d162:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801d166:	3304      	adds	r3, #4
 801d168:	9306      	str	r3, [sp, #24]
 801d16a:	9b08      	ldr	r3, [sp, #32]
 801d16c:	4543      	cmp	r3, r8
 801d16e:	f240 815e 	bls.w	801d42e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801d172:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801d176:	f04f 0b01 	mov.w	fp, #1
 801d17a:	9a01      	ldr	r2, [sp, #4]
 801d17c:	9806      	ldr	r0, [sp, #24]
 801d17e:	465e      	mov	r6, fp
 801d180:	f8cd b008 	str.w	fp, [sp, #8]
 801d184:	7800      	ldrb	r0, [r0, #0]
 801d186:	fbb5 f3f3 	udiv	r3, r5, r3
 801d18a:	1ad3      	subs	r3, r2, r3
 801d18c:	900e      	str	r0, [sp, #56]	@ 0x38
 801d18e:	3001      	adds	r0, #1
 801d190:	b29b      	uxth	r3, r3
 801d192:	9005      	str	r0, [sp, #20]
 801d194:	9312      	str	r3, [sp, #72]	@ 0x48
 801d196:	9b06      	ldr	r3, [sp, #24]
 801d198:	785a      	ldrb	r2, [r3, #1]
 801d19a:	789b      	ldrb	r3, [r3, #2]
 801d19c:	021b      	lsls	r3, r3, #8
 801d19e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801d1a2:	9a06      	ldr	r2, [sp, #24]
 801d1a4:	78d2      	ldrb	r2, [r2, #3]
 801d1a6:	4313      	orrs	r3, r2
 801d1a8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d1aa:	441a      	add	r2, r3
 801d1ac:	1c50      	adds	r0, r2, #1
 801d1ae:	7852      	ldrb	r2, [r2, #1]
 801d1b0:	9003      	str	r0, [sp, #12]
 801d1b2:	0212      	lsls	r2, r2, #8
 801d1b4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d1b6:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801d1ba:	5cc3      	ldrb	r3, [r0, r3]
 801d1bc:	431a      	orrs	r2, r3
 801d1be:	b293      	uxth	r3, r2
 801d1c0:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 801d1c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d1c6:	2300      	movs	r3, #0
 801d1c8:	461a      	mov	r2, r3
 801d1ca:	9307      	str	r3, [sp, #28]
 801d1cc:	2d00      	cmp	r5, #0
 801d1ce:	d07c      	beq.n	801d2ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801d1d0:	42ae      	cmp	r6, r5
 801d1d2:	d26c      	bcs.n	801d2ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 801d1d4:	9b08      	ldr	r3, [sp, #32]
 801d1d6:	1bad      	subs	r5, r5, r6
 801d1d8:	4608      	mov	r0, r1
 801d1da:	4543      	cmp	r3, r8
 801d1dc:	b2ad      	uxth	r5, r5
 801d1de:	d802      	bhi.n	801d1e6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801d1e0:	e071      	b.n	801d2c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801d1e2:	2b00      	cmp	r3, #0
 801d1e4:	d15d      	bne.n	801d2a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 801d1e6:	9b03      	ldr	r3, [sp, #12]
 801d1e8:	9a02      	ldr	r2, [sp, #8]
 801d1ea:	785b      	ldrb	r3, [r3, #1]
 801d1ec:	f1c2 0207 	rsb	r2, r2, #7
 801d1f0:	9902      	ldr	r1, [sp, #8]
 801d1f2:	4093      	lsls	r3, r2
 801d1f4:	005b      	lsls	r3, r3, #1
 801d1f6:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 801d1fa:	9b03      	ldr	r3, [sp, #12]
 801d1fc:	781b      	ldrb	r3, [r3, #0]
 801d1fe:	410b      	asrs	r3, r1
 801d200:	3101      	adds	r1, #1
 801d202:	b2c9      	uxtb	r1, r1
 801d204:	b2db      	uxtb	r3, r3
 801d206:	2908      	cmp	r1, #8
 801d208:	9102      	str	r1, [sp, #8]
 801d20a:	9903      	ldr	r1, [sp, #12]
 801d20c:	ea43 0302 	orr.w	r3, r3, r2
 801d210:	bf0c      	ite	eq
 801d212:	3102      	addeq	r1, #2
 801d214:	3101      	addne	r1, #1
 801d216:	b29a      	uxth	r2, r3
 801d218:	bf05      	ittet	eq
 801d21a:	9103      	streq	r1, [sp, #12]
 801d21c:	2100      	moveq	r1, #0
 801d21e:	9103      	strne	r1, [sp, #12]
 801d220:	9102      	streq	r1, [sp, #8]
 801d222:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d224:	4291      	cmp	r1, r2
 801d226:	d30a      	bcc.n	801d23e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801d228:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 801d22c:	2301      	movs	r3, #1
 801d22e:	9905      	ldr	r1, [sp, #20]
 801d230:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 801d234:	d30f      	bcc.n	801d256 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801d236:	469b      	mov	fp, r3
 801d238:	f04f 0c00 	mov.w	ip, #0
 801d23c:	e032      	b.n	801d2a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 801d23e:	9b05      	ldr	r3, [sp, #20]
 801d240:	429a      	cmp	r2, r3
 801d242:	d318      	bcc.n	801d276 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 801d244:	eb04 030b 	add.w	r3, r4, fp
 801d248:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 801d24c:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801d250:	f10b 0301 	add.w	r3, fp, #1
 801d254:	b29b      	uxth	r3, r3
 801d256:	9905      	ldr	r1, [sp, #20]
 801d258:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 801d25c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d260:	710e      	strb	r6, [r1, #4]
 801d262:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801d264:	80ce      	strh	r6, [r1, #6]
 801d266:	f10b 0601 	add.w	r6, fp, #1
 801d26a:	714e      	strb	r6, [r1, #5]
 801d26c:	9905      	ldr	r1, [sp, #20]
 801d26e:	3101      	adds	r1, #1
 801d270:	b289      	uxth	r1, r1
 801d272:	9105      	str	r1, [sp, #20]
 801d274:	e7df      	b.n	801d236 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801d276:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801d27a:	4611      	mov	r1, r2
 801d27c:	795b      	ldrb	r3, [r3, #5]
 801d27e:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801d282:	4426      	add	r6, r4
 801d284:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801d286:	4437      	add	r7, r6
 801d288:	2f00      	cmp	r7, #0
 801d28a:	dd06      	ble.n	801d29a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 801d28c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801d290:	790f      	ldrb	r7, [r1, #4]
 801d292:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d296:	88c9      	ldrh	r1, [r1, #6]
 801d298:	e7f4      	b.n	801d284 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801d29a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801d29e:	b29b      	uxth	r3, r3
 801d2a0:	e7c5      	b.n	801d22e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801d2a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d2a4:	920a      	str	r2, [sp, #40]	@ 0x28
 801d2a6:	4601      	mov	r1, r0
 801d2a8:	4662      	mov	r2, ip
 801d2aa:	461e      	mov	r6, r3
 801d2ac:	e78e      	b.n	801d1cc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801d2ae:	1b73      	subs	r3, r6, r5
 801d2b0:	eb02 0c05 	add.w	ip, r2, r5
 801d2b4:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d2b8:	b29b      	uxth	r3, r3
 801d2ba:	fa1f fc8c 	uxth.w	ip, ip
 801d2be:	2500      	movs	r5, #0
 801d2c0:	9a08      	ldr	r2, [sp, #32]
 801d2c2:	4542      	cmp	r2, r8
 801d2c4:	d88d      	bhi.n	801d1e2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 801d2c6:	4601      	mov	r1, r0
 801d2c8:	e74f      	b.n	801d16a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 801d2ca:	428e      	cmp	r6, r1
 801d2cc:	bf2b      	itete	cs
 801d2ce:	468e      	movcs	lr, r1
 801d2d0:	46b6      	movcc	lr, r6
 801d2d2:	1a73      	subcs	r3, r6, r1
 801d2d4:	1b88      	subcc	r0, r1, r6
 801d2d6:	eb02 0c0e 	add.w	ip, r2, lr
 801d2da:	bf2b      	itete	cs
 801d2dc:	4628      	movcs	r0, r5
 801d2de:	462b      	movcc	r3, r5
 801d2e0:	b29b      	uxthcs	r3, r3
 801d2e2:	b280      	uxthcc	r0, r0
 801d2e4:	f108 0503 	add.w	r5, r8, #3
 801d2e8:	fa1f fc8c 	uxth.w	ip, ip
 801d2ec:	4562      	cmp	r2, ip
 801d2ee:	d06f      	beq.n	801d3d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 801d2f0:	1c57      	adds	r7, r2, #1
 801d2f2:	4422      	add	r2, r4
 801d2f4:	b2bf      	uxth	r7, r7
 801d2f6:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 801d2fa:	9713      	str	r7, [sp, #76]	@ 0x4c
 801d2fc:	2704      	movs	r7, #4
 801d2fe:	46b9      	mov	r9, r7
 801d300:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d302:	fb19 7202 	smlabb	r2, r9, r2, r7
 801d306:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d308:	58bf      	ldr	r7, [r7, r2]
 801d30a:	0e3a      	lsrs	r2, r7, #24
 801d30c:	9209      	str	r2, [sp, #36]	@ 0x24
 801d30e:	d016      	beq.n	801d33e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801d310:	f3c7 2907 	ubfx	r9, r7, #8, #8
 801d314:	fa5f fa87 	uxtb.w	sl, r7
 801d318:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801d31c:	fa5f f289 	uxtb.w	r2, r9
 801d320:	9214      	str	r2, [sp, #80]	@ 0x50
 801d322:	b2fa      	uxtb	r2, r7
 801d324:	9215      	str	r2, [sp, #84]	@ 0x54
 801d326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d328:	2aff      	cmp	r2, #255	@ 0xff
 801d32a:	d10b      	bne.n	801d344 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801d32c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d32e:	2aff      	cmp	r2, #255	@ 0xff
 801d330:	d108      	bne.n	801d344 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 801d332:	f805 ac03 	strb.w	sl, [r5, #-3]
 801d336:	f805 9c02 	strb.w	r9, [r5, #-2]
 801d33a:	f805 7c01 	strb.w	r7, [r5, #-1]
 801d33e:	3503      	adds	r5, #3
 801d340:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801d342:	e7d3      	b.n	801d2ec <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 801d344:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d346:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801d348:	437a      	muls	r2, r7
 801d34a:	1c57      	adds	r7, r2, #1
 801d34c:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801d350:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 801d354:	1212      	asrs	r2, r2, #8
 801d356:	fa1f f982 	uxth.w	r9, r2
 801d35a:	43d2      	mvns	r2, r2
 801d35c:	fb1a fa09 	smulbb	sl, sl, r9
 801d360:	b2d2      	uxtb	r2, r2
 801d362:	fb07 a702 	mla	r7, r7, r2, sl
 801d366:	9209      	str	r2, [sp, #36]	@ 0x24
 801d368:	b2bf      	uxth	r7, r7
 801d36a:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d36c:	f107 0a01 	add.w	sl, r7, #1
 801d370:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 801d374:	fb12 fa09 	smulbb	sl, r2, r9
 801d378:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d37a:	123f      	asrs	r7, r7, #8
 801d37c:	f805 7c03 	strb.w	r7, [r5, #-3]
 801d380:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 801d384:	fb07 aa02 	mla	sl, r7, r2, sl
 801d388:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801d38a:	fb12 f909 	smulbb	r9, r2, r9
 801d38e:	fa1f fa8a 	uxth.w	sl, sl
 801d392:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d394:	f10a 0701 	add.w	r7, sl, #1
 801d398:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d39c:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801d3a0:	fb07 9902 	mla	r9, r7, r2, r9
 801d3a4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801d3a8:	fa1f f989 	uxth.w	r9, r9
 801d3ac:	f805 ac02 	strb.w	sl, [r5, #-2]
 801d3b0:	f109 0201 	add.w	r2, r9, #1
 801d3b4:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801d3b8:	ea4f 2929 	mov.w	r9, r9, asr #8
 801d3bc:	f805 9c01 	strb.w	r9, [r5, #-1]
 801d3c0:	e7bd      	b.n	801d33e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801d3c2:	bf00      	nop
 801d3c4:	24025e20 	.word	0x24025e20
 801d3c8:	24025e1a 	.word	0x24025e1a
 801d3cc:	fffff7fb 	.word	0xfffff7fb
 801d3d0:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801d3d4:	428e      	cmp	r6, r1
 801d3d6:	44f0      	add	r8, lr
 801d3d8:	f4ff af71 	bcc.w	801d2be <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 801d3dc:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d3de:	9904      	ldr	r1, [sp, #16]
 801d3e0:	8812      	ldrh	r2, [r2, #0]
 801d3e2:	1a52      	subs	r2, r2, r1
 801d3e4:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801d3e6:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801d3ea:	4490      	add	r8, r2
 801d3ec:	9a07      	ldr	r2, [sp, #28]
 801d3ee:	3201      	adds	r2, #1
 801d3f0:	428a      	cmp	r2, r1
 801d3f2:	9207      	str	r2, [sp, #28]
 801d3f4:	d111      	bne.n	801d41a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 801d3f6:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 801d3fa:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 801d3fe:	9b04      	ldr	r3, [sp, #16]
 801d400:	eba5 050c 	sub.w	r5, r5, ip
 801d404:	b2ad      	uxth	r5, r5
 801d406:	2d00      	cmp	r5, #0
 801d408:	bf08      	it	eq
 801d40a:	4619      	moveq	r1, r3
 801d40c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d40e:	bf18      	it	ne
 801d410:	2100      	movne	r1, #0
 801d412:	3301      	adds	r3, #1
 801d414:	b289      	uxth	r1, r1
 801d416:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d418:	e69e      	b.n	801d158 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 801d41a:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801d41e:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 801d422:	1a2d      	subs	r5, r5, r0
 801d424:	b2ad      	uxth	r5, r5
 801d426:	2d00      	cmp	r5, #0
 801d428:	bf18      	it	ne
 801d42a:	2000      	movne	r0, #0
 801d42c:	e748      	b.n	801d2c0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 801d42e:	4b04      	ldr	r3, [pc, #16]	@ (801d440 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 801d430:	6818      	ldr	r0, [r3, #0]
 801d432:	6803      	ldr	r3, [r0, #0]
 801d434:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d436:	4798      	blx	r3
 801d438:	b01d      	add	sp, #116	@ 0x74
 801d43a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d43e:	bf00      	nop
 801d440:	24025e20 	.word	0x24025e20

0801d444 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 801d444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d448:	b08f      	sub	sp, #60	@ 0x3c
 801d44a:	4616      	mov	r6, r2
 801d44c:	4681      	mov	r9, r0
 801d44e:	460d      	mov	r5, r1
 801d450:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 801d454:	9205      	str	r2, [sp, #20]
 801d456:	2a00      	cmp	r2, #0
 801d458:	f000 82a8 	beq.w	801d9ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 801d45c:	6830      	ldr	r0, [r6, #0]
 801d45e:	ac0a      	add	r4, sp, #40	@ 0x28
 801d460:	6871      	ldr	r1, [r6, #4]
 801d462:	c403      	stmia	r4!, {r0, r1}
 801d464:	6818      	ldr	r0, [r3, #0]
 801d466:	ac0c      	add	r4, sp, #48	@ 0x30
 801d468:	6859      	ldr	r1, [r3, #4]
 801d46a:	c403      	stmia	r4!, {r0, r1}
 801d46c:	a80a      	add	r0, sp, #40	@ 0x28
 801d46e:	f7f9 fa3b 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d472:	4631      	mov	r1, r6
 801d474:	a80c      	add	r0, sp, #48	@ 0x30
 801d476:	f7f9 fa7b 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d47a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801d47e:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d482:	bfdb      	ittet	le
 801d484:	b293      	uxthle	r3, r2
 801d486:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801d48a:	2301      	movgt	r3, #1
 801d48c:	fb91 f3f3 	sdivle	r3, r1, r3
 801d490:	9300      	str	r3, [sp, #0]
 801d492:	f105 0308 	add.w	r3, r5, #8
 801d496:	9900      	ldr	r1, [sp, #0]
 801d498:	9306      	str	r3, [sp, #24]
 801d49a:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801d49e:	440b      	add	r3, r1
 801d4a0:	3b01      	subs	r3, #1
 801d4a2:	fb93 f3f1 	sdiv	r3, r3, r1
 801d4a6:	3b01      	subs	r3, #1
 801d4a8:	9906      	ldr	r1, [sp, #24]
 801d4aa:	b29b      	uxth	r3, r3
 801d4ac:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801d4b0:	9900      	ldr	r1, [sp, #0]
 801d4b2:	9307      	str	r3, [sp, #28]
 801d4b4:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801d4b8:	fb93 f0f1 	sdiv	r0, r3, r1
 801d4bc:	b284      	uxth	r4, r0
 801d4be:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801d4c2:	b280      	uxth	r0, r0
 801d4c4:	9402      	str	r4, [sp, #8]
 801d4c6:	9d02      	ldr	r5, [sp, #8]
 801d4c8:	9c00      	ldr	r4, [sp, #0]
 801d4ca:	fb05 3514 	mls	r5, r5, r4, r3
 801d4ce:	fb15 f502 	smulbb	r5, r5, r2
 801d4d2:	440d      	add	r5, r1
 801d4d4:	b2ad      	uxth	r5, r5
 801d4d6:	2800      	cmp	r0, #0
 801d4d8:	d071      	beq.n	801d5be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 801d4da:	1e42      	subs	r2, r0, #1
 801d4dc:	9806      	ldr	r0, [sp, #24]
 801d4de:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801d4e2:	9a07      	ldr	r2, [sp, #28]
 801d4e4:	fa98 f888 	rev.w	r8, r8
 801d4e8:	4490      	add	r8, r2
 801d4ea:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 801d4ee:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801d4f2:	4411      	add	r1, r2
 801d4f4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801d4f8:	f8df b348 	ldr.w	fp, [pc, #840]	@ 801d844 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801d4fc:	4413      	add	r3, r2
 801d4fe:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 801d502:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801d506:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801d50a:	9301      	str	r3, [sp, #4]
 801d50c:	4bcb      	ldr	r3, [pc, #812]	@ (801d83c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 801d50e:	6818      	ldr	r0, [r3, #0]
 801d510:	6803      	ldr	r3, [r0, #0]
 801d512:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d514:	4798      	blx	r3
 801d516:	4bca      	ldr	r3, [pc, #808]	@ (801d840 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 801d518:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801d51c:	881b      	ldrh	r3, [r3, #0]
 801d51e:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 801d522:	fb03 2707 	mla	r7, r3, r7, r2
 801d526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d52a:	4363      	muls	r3, r4
 801d52c:	2400      	movs	r4, #0
 801d52e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d532:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d536:	4621      	mov	r1, r4
 801d538:	4407      	add	r7, r0
 801d53a:	18fb      	adds	r3, r7, r3
 801d53c:	9309      	str	r3, [sp, #36]	@ 0x24
 801d53e:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801d542:	fb95 f3f3 	sdiv	r3, r5, r3
 801d546:	9304      	str	r3, [sp, #16]
 801d548:	f109 0304 	add.w	r3, r9, #4
 801d54c:	4618      	mov	r0, r3
 801d54e:	9308      	str	r3, [sp, #32]
 801d550:	f009 fbac 	bl	8026cac <memset>
 801d554:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d556:	42bb      	cmp	r3, r7
 801d558:	f240 8223 	bls.w	801d9a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 801d55c:	2003      	movs	r0, #3
 801d55e:	f04f 0c07 	mov.w	ip, #7
 801d562:	f04f 0e0b 	mov.w	lr, #11
 801d566:	2d00      	cmp	r5, #0
 801d568:	f000 813c 	beq.w	801d7e4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 801d56c:	f898 3000 	ldrb.w	r3, [r8]
 801d570:	b2db      	uxtb	r3, r3
 801d572:	2bfe      	cmp	r3, #254	@ 0xfe
 801d574:	d126      	bne.n	801d5c4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801d576:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d57a:	f108 0604 	add.w	r6, r8, #4
 801d57e:	f898 2002 	ldrb.w	r2, [r8, #2]
 801d582:	3d01      	subs	r5, #1
 801d584:	b2c9      	uxtb	r1, r1
 801d586:	f898 8003 	ldrb.w	r8, [r8, #3]
 801d58a:	b2d2      	uxtb	r2, r2
 801d58c:	f361 0407 	bfi	r4, r1, #0, #8
 801d590:	fa5f f888 	uxtb.w	r8, r8
 801d594:	b2ad      	uxth	r5, r5
 801d596:	f362 240f 	bfi	r4, r2, #8, #8
 801d59a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d59e:	fb10 2208 	smlabb	r2, r0, r8, r2
 801d5a2:	f368 4417 	bfi	r4, r8, #16, #8
 801d5a6:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d5aa:	0e23      	lsrs	r3, r4, #24
 801d5ac:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801d5b0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d5b4:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d5b8:	605c      	str	r4, [r3, #4]
 801d5ba:	46b0      	mov	r8, r6
 801d5bc:	e7d3      	b.n	801d566 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801d5be:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801d5c2:	e792      	b.n	801d4ea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 801d5c4:	2bff      	cmp	r3, #255	@ 0xff
 801d5c6:	d127      	bne.n	801d618 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 801d5c8:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d5cc:	f108 0605 	add.w	r6, r8, #5
 801d5d0:	f898 3002 	ldrb.w	r3, [r8, #2]
 801d5d4:	3d01      	subs	r5, #1
 801d5d6:	b2d2      	uxtb	r2, r2
 801d5d8:	f898 1003 	ldrb.w	r1, [r8, #3]
 801d5dc:	b2db      	uxtb	r3, r3
 801d5de:	f898 8004 	ldrb.w	r8, [r8, #4]
 801d5e2:	f362 0407 	bfi	r4, r2, #0, #8
 801d5e6:	b2c9      	uxtb	r1, r1
 801d5e8:	fa5f f888 	uxtb.w	r8, r8
 801d5ec:	f363 240f 	bfi	r4, r3, #8, #8
 801d5f0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d5f4:	b2ad      	uxth	r5, r5
 801d5f6:	fb10 3301 	smlabb	r3, r0, r1, r3
 801d5fa:	f361 4417 	bfi	r4, r1, #16, #8
 801d5fe:	fb1c 3302 	smlabb	r3, ip, r2, r3
 801d602:	f368 641f 	bfi	r4, r8, #24, #8
 801d606:	fb1e 3808 	smlabb	r8, lr, r8, r3
 801d60a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d60e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801d612:	f8c8 4004 	str.w	r4, [r8, #4]
 801d616:	e7d0      	b.n	801d5ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801d618:	119a      	asrs	r2, r3, #6
 801d61a:	f108 0601 	add.w	r6, r8, #1
 801d61e:	d107      	bne.n	801d630 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 801d620:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d624:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d628:	685c      	ldr	r4, [r3, #4]
 801d62a:	3d01      	subs	r5, #1
 801d62c:	b2ad      	uxth	r5, r5
 801d62e:	e7c4      	b.n	801d5ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 801d630:	2a01      	cmp	r2, #1
 801d632:	d129      	bne.n	801d688 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 801d634:	f003 0203 	and.w	r2, r3, #3
 801d638:	1ea1      	subs	r1, r4, #2
 801d63a:	4411      	add	r1, r2
 801d63c:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801d640:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d644:	b2c9      	uxtb	r1, r1
 801d646:	3a02      	subs	r2, #2
 801d648:	3b02      	subs	r3, #2
 801d64a:	f361 0407 	bfi	r4, r1, #0, #8
 801d64e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d652:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d656:	f362 240f 	bfi	r4, r2, #8, #8
 801d65a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d65e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d662:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d666:	fb10 2203 	smlabb	r2, r0, r3, r2
 801d66a:	f363 4417 	bfi	r4, r3, #16, #8
 801d66e:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801d672:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801d676:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801d67a:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801d67e:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801d682:	f8c8 4004 	str.w	r4, [r8, #4]
 801d686:	e7d0      	b.n	801d62a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d688:	2a02      	cmp	r2, #2
 801d68a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d68e:	d12e      	bne.n	801d6ee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801d690:	f898 2001 	ldrb.w	r2, [r8, #1]
 801d694:	f1a3 0a20 	sub.w	sl, r3, #32
 801d698:	f108 0602 	add.w	r6, r8, #2
 801d69c:	b2d2      	uxtb	r2, r2
 801d69e:	f002 010f 	and.w	r1, r2, #15
 801d6a2:	1112      	asrs	r2, r2, #4
 801d6a4:	3908      	subs	r1, #8
 801d6a6:	3a08      	subs	r2, #8
 801d6a8:	4451      	add	r1, sl
 801d6aa:	4492      	add	sl, r2
 801d6ac:	4421      	add	r1, r4
 801d6ae:	b2c9      	uxtb	r1, r1
 801d6b0:	f361 0407 	bfi	r4, r1, #0, #8
 801d6b4:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801d6b8:	f1a8 0820 	sub.w	r8, r8, #32
 801d6bc:	4443      	add	r3, r8
 801d6be:	b2db      	uxtb	r3, r3
 801d6c0:	f363 240f 	bfi	r4, r3, #8, #8
 801d6c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d6c8:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 801d6cc:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801d6d0:	fb10 330a 	smlabb	r3, r0, sl, r3
 801d6d4:	f36a 4417 	bfi	r4, sl, #16, #8
 801d6d8:	fb1c 3301 	smlabb	r3, ip, r1, r3
 801d6dc:	0e22      	lsrs	r2, r4, #24
 801d6de:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801d6e2:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801d6e6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 801d6ea:	6054      	str	r4, [r2, #4]
 801d6ec:	e79d      	b.n	801d62a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801d6ee:	3301      	adds	r3, #1
 801d6f0:	42ab      	cmp	r3, r5
 801d6f2:	dd59      	ble.n	801d7a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 801d6f4:	1b5d      	subs	r5, r3, r5
 801d6f6:	2d00      	cmp	r5, #0
 801d6f8:	dc58      	bgt.n	801d7ac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 801d6fa:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d6fe:	f04f 0800 	mov.w	r8, #0
 801d702:	f1ba 0f00 	cmp.w	sl, #0
 801d706:	f340 8108 	ble.w	801d91a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 801d70a:	1c73      	adds	r3, r6, #1
 801d70c:	9303      	str	r3, [sp, #12]
 801d70e:	7833      	ldrb	r3, [r6, #0]
 801d710:	b2db      	uxtb	r3, r3
 801d712:	2bfe      	cmp	r3, #254	@ 0xfe
 801d714:	d16a      	bne.n	801d7ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 801d716:	7871      	ldrb	r1, [r6, #1]
 801d718:	1d33      	adds	r3, r6, #4
 801d71a:	78b2      	ldrb	r2, [r6, #2]
 801d71c:	b2c9      	uxtb	r1, r1
 801d71e:	78f0      	ldrb	r0, [r6, #3]
 801d720:	b2d2      	uxtb	r2, r2
 801d722:	9303      	str	r3, [sp, #12]
 801d724:	f361 0407 	bfi	r4, r1, #0, #8
 801d728:	b2c0      	uxtb	r0, r0
 801d72a:	2303      	movs	r3, #3
 801d72c:	f362 240f 	bfi	r4, r2, #8, #8
 801d730:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d734:	fb13 2200 	smlabb	r2, r3, r0, r2
 801d738:	f360 4417 	bfi	r4, r0, #16, #8
 801d73c:	2307      	movs	r3, #7
 801d73e:	0e25      	lsrs	r5, r4, #24
 801d740:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d744:	230b      	movs	r3, #11
 801d746:	fb13 1305 	smlabb	r3, r3, r5, r1
 801d74a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d74e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d752:	605c      	str	r4, [r3, #4]
 801d754:	2501      	movs	r5, #1
 801d756:	462e      	mov	r6, r5
 801d758:	eb06 0308 	add.w	r3, r6, r8
 801d75c:	ebaa 0a06 	sub.w	sl, sl, r6
 801d760:	1bad      	subs	r5, r5, r6
 801d762:	2b40      	cmp	r3, #64	@ 0x40
 801d764:	dd16      	ble.n	801d794 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801d766:	4658      	mov	r0, fp
 801d768:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d76c:	f7e5 fdb4 	bl	80032d8 <_ZN8touchgfx5paint9flushLineEPmi>
 801d770:	4659      	mov	r1, fp
 801d772:	9b05      	ldr	r3, [sp, #20]
 801d774:	4642      	mov	r2, r8
 801d776:	4638      	mov	r0, r7
 801d778:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d77c:	f7e5 fe14 	bl	80033a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d780:	4b30      	ldr	r3, [pc, #192]	@ (801d844 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801d782:	4447      	add	r7, r8
 801d784:	f04f 0800 	mov.w	r8, #0
 801d788:	459b      	cmp	fp, r3
 801d78a:	bf0c      	ite	eq
 801d78c:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801d848 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801d790:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 801d844 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 801d794:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801d798:	4633      	mov	r3, r6
 801d79a:	3b01      	subs	r3, #1
 801d79c:	f842 4b04 	str.w	r4, [r2], #4
 801d7a0:	d1fb      	bne.n	801d79a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801d7a2:	44b0      	add	r8, r6
 801d7a4:	9e03      	ldr	r6, [sp, #12]
 801d7a6:	e7ac      	b.n	801d702 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801d7a8:	1aed      	subs	r5, r5, r3
 801d7aa:	e73f      	b.n	801d62c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 801d7ac:	9b01      	ldr	r3, [sp, #4]
 801d7ae:	42ab      	cmp	r3, r5
 801d7b0:	bfa8      	it	ge
 801d7b2:	462b      	movge	r3, r5
 801d7b4:	4698      	mov	r8, r3
 801d7b6:	9b01      	ldr	r3, [sp, #4]
 801d7b8:	eba3 0a08 	sub.w	sl, r3, r8
 801d7bc:	0e23      	lsrs	r3, r4, #24
 801d7be:	eba5 0508 	sub.w	r5, r5, r8
 801d7c2:	d00b      	beq.n	801d7dc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 801d7c4:	9a05      	ldr	r2, [sp, #20]
 801d7c6:	4641      	mov	r1, r8
 801d7c8:	4638      	mov	r0, r7
 801d7ca:	4353      	muls	r3, r2
 801d7cc:	1c5a      	adds	r2, r3, #1
 801d7ce:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801d7d2:	4622      	mov	r2, r4
 801d7d4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801d7d8:	f7e5 fd98 	bl	800330c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801d7dc:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d7e0:	4447      	add	r7, r8
 801d7e2:	e78c      	b.n	801d6fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d7e4:	f8dd a004 	ldr.w	sl, [sp, #4]
 801d7e8:	4646      	mov	r6, r8
 801d7ea:	e788      	b.n	801d6fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 801d7ec:	2bff      	cmp	r3, #255	@ 0xff
 801d7ee:	d11d      	bne.n	801d82c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 801d7f0:	7870      	ldrb	r0, [r6, #1]
 801d7f2:	1d73      	adds	r3, r6, #5
 801d7f4:	78b2      	ldrb	r2, [r6, #2]
 801d7f6:	b2c0      	uxtb	r0, r0
 801d7f8:	78f5      	ldrb	r5, [r6, #3]
 801d7fa:	b2d2      	uxtb	r2, r2
 801d7fc:	9303      	str	r3, [sp, #12]
 801d7fe:	f360 0407 	bfi	r4, r0, #0, #8
 801d802:	7933      	ldrb	r3, [r6, #4]
 801d804:	b2ed      	uxtb	r5, r5
 801d806:	b2d9      	uxtb	r1, r3
 801d808:	f362 240f 	bfi	r4, r2, #8, #8
 801d80c:	2303      	movs	r3, #3
 801d80e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d812:	f365 4417 	bfi	r4, r5, #16, #8
 801d816:	fb13 2205 	smlabb	r2, r3, r5, r2
 801d81a:	2307      	movs	r3, #7
 801d81c:	f361 641f 	bfi	r4, r1, #24, #8
 801d820:	fb13 2000 	smlabb	r0, r3, r0, r2
 801d824:	230b      	movs	r3, #11
 801d826:	fb13 0301 	smlabb	r3, r3, r1, r0
 801d82a:	e78e      	b.n	801d74a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 801d82c:	119d      	asrs	r5, r3, #6
 801d82e:	d10d      	bne.n	801d84c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 801d830:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d834:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d838:	685c      	ldr	r4, [r3, #4]
 801d83a:	e78b      	b.n	801d754 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d83c:	24025e20 	.word	0x24025e20
 801d840:	24025e1a 	.word	0x24025e1a
 801d844:	24000180 	.word	0x24000180
 801d848:	24000280 	.word	0x24000280
 801d84c:	2d01      	cmp	r5, #1
 801d84e:	d12a      	bne.n	801d8a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801d850:	f003 0203 	and.w	r2, r3, #3
 801d854:	1ea1      	subs	r1, r4, #2
 801d856:	2603      	movs	r6, #3
 801d858:	4411      	add	r1, r2
 801d85a:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801d85e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801d862:	b2c9      	uxtb	r1, r1
 801d864:	3a02      	subs	r2, #2
 801d866:	3b02      	subs	r3, #2
 801d868:	f361 0407 	bfi	r4, r1, #0, #8
 801d86c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801d870:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d874:	f362 240f 	bfi	r4, r2, #8, #8
 801d878:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801d87c:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801d880:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801d884:	fb16 2203 	smlabb	r2, r6, r3, r2
 801d888:	f363 4417 	bfi	r4, r3, #16, #8
 801d88c:	2307      	movs	r3, #7
 801d88e:	0e20      	lsrs	r0, r4, #24
 801d890:	fb13 2101 	smlabb	r1, r3, r1, r2
 801d894:	230b      	movs	r3, #11
 801d896:	fb13 1300 	smlabb	r3, r3, r0, r1
 801d89a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d89e:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801d8a2:	605c      	str	r4, [r3, #4]
 801d8a4:	e757      	b.n	801d756 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801d8a6:	2d02      	cmp	r5, #2
 801d8a8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d8ac:	d12f      	bne.n	801d90e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801d8ae:	1cb2      	adds	r2, r6, #2
 801d8b0:	f1a3 0020 	sub.w	r0, r3, #32
 801d8b4:	9203      	str	r2, [sp, #12]
 801d8b6:	7872      	ldrb	r2, [r6, #1]
 801d8b8:	b2d2      	uxtb	r2, r2
 801d8ba:	f002 010f 	and.w	r1, r2, #15
 801d8be:	1112      	asrs	r2, r2, #4
 801d8c0:	3908      	subs	r1, #8
 801d8c2:	3a08      	subs	r2, #8
 801d8c4:	4401      	add	r1, r0
 801d8c6:	4402      	add	r2, r0
 801d8c8:	4421      	add	r1, r4
 801d8ca:	b2c9      	uxtb	r1, r1
 801d8cc:	f361 0407 	bfi	r4, r1, #0, #8
 801d8d0:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801d8d4:	3d20      	subs	r5, #32
 801d8d6:	442b      	add	r3, r5
 801d8d8:	2503      	movs	r5, #3
 801d8da:	b2db      	uxtb	r3, r3
 801d8dc:	f363 240f 	bfi	r4, r3, #8, #8
 801d8e0:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801d8e4:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 801d8e8:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801d8ec:	fb15 3302 	smlabb	r3, r5, r2, r3
 801d8f0:	f362 4417 	bfi	r4, r2, #16, #8
 801d8f4:	2207      	movs	r2, #7
 801d8f6:	0e20      	lsrs	r0, r4, #24
 801d8f8:	fb12 3201 	smlabb	r2, r2, r1, r3
 801d8fc:	210b      	movs	r1, #11
 801d8fe:	fb11 2100 	smlabb	r1, r1, r0, r2
 801d902:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801d906:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 801d90a:	604c      	str	r4, [r1, #4]
 801d90c:	e722      	b.n	801d754 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 801d90e:	1c5d      	adds	r5, r3, #1
 801d910:	4656      	mov	r6, sl
 801d912:	45aa      	cmp	sl, r5
 801d914:	bfa8      	it	ge
 801d916:	462e      	movge	r6, r5
 801d918:	e71e      	b.n	801d758 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 801d91a:	f1b8 0f00 	cmp.w	r8, #0
 801d91e:	d00d      	beq.n	801d93c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 801d920:	ea4f 0188 	mov.w	r1, r8, lsl #2
 801d924:	4658      	mov	r0, fp
 801d926:	f7e5 fcd7 	bl	80032d8 <_ZN8touchgfx5paint9flushLineEPmi>
 801d92a:	4642      	mov	r2, r8
 801d92c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801d930:	4638      	mov	r0, r7
 801d932:	9b05      	ldr	r3, [sp, #20]
 801d934:	4659      	mov	r1, fp
 801d936:	4447      	add	r7, r8
 801d938:	f7e5 fd36 	bl	80033a8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801d93c:	4b1d      	ldr	r3, [pc, #116]	@ (801d9b4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 801d93e:	9a01      	ldr	r2, [sp, #4]
 801d940:	881b      	ldrh	r3, [r3, #0]
 801d942:	1a9b      	subs	r3, r3, r2
 801d944:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d948:	441f      	add	r7, r3
 801d94a:	9b04      	ldr	r3, [sp, #16]
 801d94c:	3301      	adds	r3, #1
 801d94e:	9304      	str	r3, [sp, #16]
 801d950:	9a04      	ldr	r2, [sp, #16]
 801d952:	9b00      	ldr	r3, [sp, #0]
 801d954:	4293      	cmp	r3, r2
 801d956:	d11d      	bne.n	801d994 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801d958:	9b02      	ldr	r3, [sp, #8]
 801d95a:	2400      	movs	r4, #0
 801d95c:	9a02      	ldr	r2, [sp, #8]
 801d95e:	f103 0801 	add.w	r8, r3, #1
 801d962:	9b06      	ldr	r3, [sp, #24]
 801d964:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801d968:	4621      	mov	r1, r4
 801d96a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801d96e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801d972:	9b07      	ldr	r3, [sp, #28]
 801d974:	ba36      	rev	r6, r6
 801d976:	9808      	ldr	r0, [sp, #32]
 801d978:	441e      	add	r6, r3
 801d97a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801d97e:	1aed      	subs	r5, r5, r3
 801d980:	f009 f994 	bl	8026cac <memset>
 801d984:	f8cd 8008 	str.w	r8, [sp, #8]
 801d988:	b2ad      	uxth	r5, r5
 801d98a:	9404      	str	r4, [sp, #16]
 801d98c:	f7e5 fc9a 	bl	80032c4 <_ZN8touchgfx5paint8tearDownEv>
 801d990:	46b0      	mov	r8, r6
 801d992:	e5df      	b.n	801d554 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 801d994:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801d998:	9a01      	ldr	r2, [sp, #4]
 801d99a:	1a9b      	subs	r3, r3, r2
 801d99c:	1b5d      	subs	r5, r3, r5
 801d99e:	b2ad      	uxth	r5, r5
 801d9a0:	e7f4      	b.n	801d98c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801d9a2:	4b05      	ldr	r3, [pc, #20]	@ (801d9b8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 801d9a4:	6818      	ldr	r0, [r3, #0]
 801d9a6:	6803      	ldr	r3, [r0, #0]
 801d9a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d9aa:	4798      	blx	r3
 801d9ac:	b00f      	add	sp, #60	@ 0x3c
 801d9ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d9b2:	bf00      	nop
 801d9b4:	24025e1a 	.word	0x24025e1a
 801d9b8:	24025e20 	.word	0x24025e20

0801d9bc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 801d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c0:	b093      	sub	sp, #76	@ 0x4c
 801d9c2:	460d      	mov	r5, r1
 801d9c4:	4616      	mov	r6, r2
 801d9c6:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 801d9ca:	9000      	str	r0, [sp, #0]
 801d9cc:	f1bb 0f00 	cmp.w	fp, #0
 801d9d0:	f000 82ac 	beq.w	801df2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 801d9d4:	6810      	ldr	r0, [r2, #0]
 801d9d6:	ac0e      	add	r4, sp, #56	@ 0x38
 801d9d8:	6851      	ldr	r1, [r2, #4]
 801d9da:	c403      	stmia	r4!, {r0, r1}
 801d9dc:	6818      	ldr	r0, [r3, #0]
 801d9de:	ac10      	add	r4, sp, #64	@ 0x40
 801d9e0:	6859      	ldr	r1, [r3, #4]
 801d9e2:	c403      	stmia	r4!, {r0, r1}
 801d9e4:	a80e      	add	r0, sp, #56	@ 0x38
 801d9e6:	f7f8 ff7f 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801d9ea:	4631      	mov	r1, r6
 801d9ec:	a810      	add	r0, sp, #64	@ 0x40
 801d9ee:	f7f8 ffbf 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801d9f2:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801d9f6:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801d9fa:	bfdb      	ittet	le
 801d9fc:	b293      	uxthle	r3, r2
 801d9fe:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801da02:	2301      	movgt	r3, #1
 801da04:	fb91 f3f3 	sdivle	r3, r1, r3
 801da08:	9301      	str	r3, [sp, #4]
 801da0a:	f105 0308 	add.w	r3, r5, #8
 801da0e:	9901      	ldr	r1, [sp, #4]
 801da10:	9305      	str	r3, [sp, #20]
 801da12:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801da16:	440b      	add	r3, r1
 801da18:	3b01      	subs	r3, #1
 801da1a:	fb93 f3f1 	sdiv	r3, r3, r1
 801da1e:	3b01      	subs	r3, #1
 801da20:	9905      	ldr	r1, [sp, #20]
 801da22:	b29b      	uxth	r3, r3
 801da24:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801da28:	9901      	ldr	r1, [sp, #4]
 801da2a:	9306      	str	r3, [sp, #24]
 801da2c:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 801da30:	fb93 f0f1 	sdiv	r0, r3, r1
 801da34:	b284      	uxth	r4, r0
 801da36:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801da3a:	9403      	str	r4, [sp, #12]
 801da3c:	9d03      	ldr	r5, [sp, #12]
 801da3e:	9c01      	ldr	r4, [sp, #4]
 801da40:	fb05 3714 	mls	r7, r5, r4, r3
 801da44:	fb17 f702 	smulbb	r7, r7, r2
 801da48:	440f      	add	r7, r1
 801da4a:	b2bf      	uxth	r7, r7
 801da4c:	2d00      	cmp	r5, #0
 801da4e:	d06b      	beq.n	801db28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 801da50:	1e6a      	subs	r2, r5, #1
 801da52:	9805      	ldr	r0, [sp, #20]
 801da54:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801da58:	9a06      	ldr	r2, [sp, #24]
 801da5a:	fa99 f989 	rev.w	r9, r9
 801da5e:	4491      	add	r9, r2
 801da60:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 801da64:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801da68:	4411      	add	r1, r2
 801da6a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801da6e:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 801ddcc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 801da72:	4413      	add	r3, r2
 801da74:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801da78:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 801da7c:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 801da80:	9302      	str	r3, [sp, #8]
 801da82:	4bd0      	ldr	r3, [pc, #832]	@ (801ddc4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 801da84:	6818      	ldr	r0, [r3, #0]
 801da86:	6803      	ldr	r3, [r0, #0]
 801da88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801da8a:	4798      	blx	r3
 801da8c:	4bce      	ldr	r3, [pc, #824]	@ (801ddc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 801da8e:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 801da92:	881b      	ldrh	r3, [r3, #0]
 801da94:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801da98:	fb03 2404 	mla	r4, r3, r4, r2
 801da9c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801daa0:	436b      	muls	r3, r5
 801daa2:	2500      	movs	r5, #0
 801daa4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801daa8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801daac:	4629      	mov	r1, r5
 801daae:	4404      	add	r4, r0
 801dab0:	18e3      	adds	r3, r4, r3
 801dab2:	930d      	str	r3, [sp, #52]	@ 0x34
 801dab4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801dab8:	fb97 f3f3 	sdiv	r3, r7, r3
 801dabc:	9304      	str	r3, [sp, #16]
 801dabe:	9b00      	ldr	r3, [sp, #0]
 801dac0:	3304      	adds	r3, #4
 801dac2:	4618      	mov	r0, r3
 801dac4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dac6:	f009 f8f1 	bl	8026cac <memset>
 801daca:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801dacc:	42a3      	cmp	r3, r4
 801dace:	f240 8228 	bls.w	801df22 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 801dad2:	2003      	movs	r0, #3
 801dad4:	2607      	movs	r6, #7
 801dad6:	2f00      	cmp	r7, #0
 801dad8:	f000 80cb 	beq.w	801dc72 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 801dadc:	f899 3000 	ldrb.w	r3, [r9]
 801dae0:	b2db      	uxtb	r3, r3
 801dae2:	2bfe      	cmp	r3, #254	@ 0xfe
 801dae4:	d123      	bne.n	801db2e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 801dae6:	f899 3001 	ldrb.w	r3, [r9, #1]
 801daea:	3f01      	subs	r7, #1
 801daec:	f899 2002 	ldrb.w	r2, [r9, #2]
 801daf0:	f109 0804 	add.w	r8, r9, #4
 801daf4:	b2db      	uxtb	r3, r3
 801daf6:	f899 1003 	ldrb.w	r1, [r9, #3]
 801dafa:	b2d2      	uxtb	r2, r2
 801dafc:	f363 0507 	bfi	r5, r3, #0, #8
 801db00:	b2c9      	uxtb	r1, r1
 801db02:	b2bf      	uxth	r7, r7
 801db04:	f362 250f 	bfi	r5, r2, #8, #8
 801db08:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801db0c:	fb10 2201 	smlabb	r2, r0, r1, r2
 801db10:	f361 4517 	bfi	r5, r1, #16, #8
 801db14:	fb16 2303 	smlabb	r3, r6, r3, r2
 801db18:	9a00      	ldr	r2, [sp, #0]
 801db1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db1e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db22:	605d      	str	r5, [r3, #4]
 801db24:	46c1      	mov	r9, r8
 801db26:	e7d6      	b.n	801dad6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 801db28:	f8dd 9018 	ldr.w	r9, [sp, #24]
 801db2c:	e798      	b.n	801da60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 801db2e:	119a      	asrs	r2, r3, #6
 801db30:	f109 0801 	add.w	r8, r9, #1
 801db34:	d108      	bne.n	801db48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 801db36:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db3a:	9a00      	ldr	r2, [sp, #0]
 801db3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801db40:	685d      	ldr	r5, [r3, #4]
 801db42:	3f01      	subs	r7, #1
 801db44:	b2bf      	uxth	r7, r7
 801db46:	e7ed      	b.n	801db24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 801db48:	2a01      	cmp	r2, #1
 801db4a:	d125      	bne.n	801db98 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 801db4c:	f003 0103 	and.w	r1, r3, #3
 801db50:	1eaa      	subs	r2, r5, #2
 801db52:	440a      	add	r2, r1
 801db54:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801db58:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801db5c:	b2d2      	uxtb	r2, r2
 801db5e:	3902      	subs	r1, #2
 801db60:	3b02      	subs	r3, #2
 801db62:	f362 0507 	bfi	r5, r2, #0, #8
 801db66:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801db6a:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801db6e:	f361 250f 	bfi	r5, r1, #8, #8
 801db72:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 801db76:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801db7a:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801db7e:	fb10 1103 	smlabb	r1, r0, r3, r1
 801db82:	f363 4517 	bfi	r5, r3, #16, #8
 801db86:	9b00      	ldr	r3, [sp, #0]
 801db88:	fb16 1202 	smlabb	r2, r6, r2, r1
 801db8c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801db90:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 801db94:	6055      	str	r5, [r2, #4]
 801db96:	e7d4      	b.n	801db42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801db98:	2a02      	cmp	r2, #2
 801db9a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801db9e:	d12c      	bne.n	801dbfa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 801dba0:	f899 2001 	ldrb.w	r2, [r9, #1]
 801dba4:	f1a3 0c20 	sub.w	ip, r3, #32
 801dba8:	f109 0802 	add.w	r8, r9, #2
 801dbac:	b2d2      	uxtb	r2, r2
 801dbae:	f002 010f 	and.w	r1, r2, #15
 801dbb2:	1112      	asrs	r2, r2, #4
 801dbb4:	3908      	subs	r1, #8
 801dbb6:	3a08      	subs	r2, #8
 801dbb8:	4461      	add	r1, ip
 801dbba:	4494      	add	ip, r2
 801dbbc:	4429      	add	r1, r5
 801dbbe:	b2c9      	uxtb	r1, r1
 801dbc0:	f361 0507 	bfi	r5, r1, #0, #8
 801dbc4:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 801dbc8:	f1ae 0e20 	sub.w	lr, lr, #32
 801dbcc:	4473      	add	r3, lr
 801dbce:	b2db      	uxtb	r3, r3
 801dbd0:	f363 250f 	bfi	r5, r3, #8, #8
 801dbd4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 801dbd8:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 801dbdc:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 801dbe0:	fb10 330c 	smlabb	r3, r0, ip, r3
 801dbe4:	f36c 4517 	bfi	r5, ip, #16, #8
 801dbe8:	fb16 3101 	smlabb	r1, r6, r1, r3
 801dbec:	9b00      	ldr	r3, [sp, #0]
 801dbee:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 801dbf2:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 801dbf6:	604d      	str	r5, [r1, #4]
 801dbf8:	e7a3      	b.n	801db42 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 801dbfa:	3301      	adds	r3, #1
 801dbfc:	42bb      	cmp	r3, r7
 801dbfe:	dd23      	ble.n	801dc48 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 801dc00:	eba3 0907 	sub.w	r9, r3, r7
 801dc04:	f1b9 0f00 	cmp.w	r9, #0
 801dc08:	dc20      	bgt.n	801dc4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 801dc0a:	9e02      	ldr	r6, [sp, #8]
 801dc0c:	2700      	movs	r7, #0
 801dc0e:	2e00      	cmp	r6, #0
 801dc10:	f340 8142 	ble.w	801de98 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 801dc14:	f108 0301 	add.w	r3, r8, #1
 801dc18:	9307      	str	r3, [sp, #28]
 801dc1a:	f898 3000 	ldrb.w	r3, [r8]
 801dc1e:	b2db      	uxtb	r3, r3
 801dc20:	119a      	asrs	r2, r3, #6
 801dc22:	d12a      	bne.n	801dc7a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 801dc24:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dc28:	9a00      	ldr	r2, [sp, #0]
 801dc2a:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801dc2e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801dc32:	685d      	ldr	r5, [r3, #4]
 801dc34:	f040 811f 	bne.w	801de76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801dc38:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801dc3c:	7025      	strb	r5, [r4, #0]
 801dc3e:	7063      	strb	r3, [r4, #1]
 801dc40:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801dc44:	70a3      	strb	r3, [r4, #2]
 801dc46:	e04e      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801dc48:	1aff      	subs	r7, r7, r3
 801dc4a:	e77b      	b.n	801db44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 801dc4c:	9b02      	ldr	r3, [sp, #8]
 801dc4e:	4620      	mov	r0, r4
 801dc50:	462a      	mov	r2, r5
 801dc52:	454b      	cmp	r3, r9
 801dc54:	bfa8      	it	ge
 801dc56:	464b      	movge	r3, r9
 801dc58:	461f      	mov	r7, r3
 801dc5a:	9b02      	ldr	r3, [sp, #8]
 801dc5c:	4639      	mov	r1, r7
 801dc5e:	1bde      	subs	r6, r3, r7
 801dc60:	eba9 0907 	sub.w	r9, r9, r7
 801dc64:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801dc68:	465b      	mov	r3, fp
 801dc6a:	f7e5 fb4f 	bl	800330c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 801dc6e:	443c      	add	r4, r7
 801dc70:	e7cc      	b.n	801dc0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801dc72:	46c8      	mov	r8, r9
 801dc74:	9e02      	ldr	r6, [sp, #8]
 801dc76:	46b9      	mov	r9, r7
 801dc78:	e7c8      	b.n	801dc0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 801dc7a:	2a01      	cmp	r2, #1
 801dc7c:	d136      	bne.n	801dcec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 801dc7e:	f003 0103 	and.w	r1, r3, #3
 801dc82:	1ea8      	subs	r0, r5, #2
 801dc84:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801dc88:	4408      	add	r0, r1
 801dc8a:	f3c3 0181 	ubfx	r1, r3, #2, #2
 801dc8e:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801dc92:	b2c0      	uxtb	r0, r0
 801dc94:	f1a1 0102 	sub.w	r1, r1, #2
 801dc98:	f1a3 0302 	sub.w	r3, r3, #2
 801dc9c:	f360 0507 	bfi	r5, r0, #0, #8
 801dca0:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 801dca4:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 801dca8:	f361 250f 	bfi	r5, r1, #8, #8
 801dcac:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 801dcb0:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 801dcb4:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 801dcb8:	f04f 0303 	mov.w	r3, #3
 801dcbc:	fb13 ce08 	smlabb	lr, r3, r8, ip
 801dcc0:	f04f 0c07 	mov.w	ip, #7
 801dcc4:	9b00      	ldr	r3, [sp, #0]
 801dcc6:	f368 4517 	bfi	r5, r8, #16, #8
 801dcca:	fb1c ec00 	smlabb	ip, ip, r0, lr
 801dcce:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 801dcd2:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 801dcd6:	f8cc 5004 	str.w	r5, [ip, #4]
 801dcda:	f040 80cd 	bne.w	801de78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801dcde:	7020      	strb	r0, [r4, #0]
 801dce0:	7061      	strb	r1, [r4, #1]
 801dce2:	f884 8002 	strb.w	r8, [r4, #2]
 801dce6:	3e01      	subs	r6, #1
 801dce8:	3403      	adds	r4, #3
 801dcea:	e0c1      	b.n	801de70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801dcec:	2a02      	cmp	r2, #2
 801dcee:	d13d      	bne.n	801dd6c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 801dcf0:	f898 1001 	ldrb.w	r1, [r8, #1]
 801dcf4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801dcf8:	f108 0202 	add.w	r2, r8, #2
 801dcfc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801dd00:	b2c9      	uxtb	r1, r1
 801dd02:	f1a3 0c20 	sub.w	ip, r3, #32
 801dd06:	9207      	str	r2, [sp, #28]
 801dd08:	f001 000f 	and.w	r0, r1, #15
 801dd0c:	f1a0 0008 	sub.w	r0, r0, #8
 801dd10:	4460      	add	r0, ip
 801dd12:	4428      	add	r0, r5
 801dd14:	b2c0      	uxtb	r0, r0
 801dd16:	f360 0507 	bfi	r5, r0, #0, #8
 801dd1a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801dd1e:	f1a2 0220 	sub.w	r2, r2, #32
 801dd22:	4413      	add	r3, r2
 801dd24:	ea4f 1221 	mov.w	r2, r1, asr #4
 801dd28:	b2db      	uxtb	r3, r3
 801dd2a:	f1a2 0208 	sub.w	r2, r2, #8
 801dd2e:	f363 250f 	bfi	r5, r3, #8, #8
 801dd32:	4462      	add	r2, ip
 801dd34:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 801dd38:	f04f 0c03 	mov.w	ip, #3
 801dd3c:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 801dd40:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801dd44:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 801dd48:	f04f 0107 	mov.w	r1, #7
 801dd4c:	f362 4517 	bfi	r5, r2, #16, #8
 801dd50:	fb11 c100 	smlabb	r1, r1, r0, ip
 801dd54:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 801dd58:	9900      	ldr	r1, [sp, #0]
 801dd5a:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 801dd5e:	604d      	str	r5, [r1, #4]
 801dd60:	f040 8089 	bne.w	801de76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801dd64:	7020      	strb	r0, [r4, #0]
 801dd66:	7063      	strb	r3, [r4, #1]
 801dd68:	70a2      	strb	r2, [r4, #2]
 801dd6a:	e7bc      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801dd6c:	2bfe      	cmp	r3, #254	@ 0xfe
 801dd6e:	d12f      	bne.n	801ddd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 801dd70:	f898 0001 	ldrb.w	r0, [r8, #1]
 801dd74:	f108 0304 	add.w	r3, r8, #4
 801dd78:	f898 2002 	ldrb.w	r2, [r8, #2]
 801dd7c:	f04f 0c03 	mov.w	ip, #3
 801dd80:	f898 1003 	ldrb.w	r1, [r8, #3]
 801dd84:	b2c0      	uxtb	r0, r0
 801dd86:	b2d2      	uxtb	r2, r2
 801dd88:	9307      	str	r3, [sp, #28]
 801dd8a:	b2c9      	uxtb	r1, r1
 801dd8c:	f360 0507 	bfi	r5, r0, #0, #8
 801dd90:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 801dd94:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801dd98:	f362 250f 	bfi	r5, r2, #8, #8
 801dd9c:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 801dda0:	f04f 0307 	mov.w	r3, #7
 801dda4:	f361 4517 	bfi	r5, r1, #16, #8
 801dda8:	fb13 c300 	smlabb	r3, r3, r0, ip
 801ddac:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 801ddb0:	9b00      	ldr	r3, [sp, #0]
 801ddb2:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 801ddb6:	605d      	str	r5, [r3, #4]
 801ddb8:	d15d      	bne.n	801de76 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 801ddba:	7020      	strb	r0, [r4, #0]
 801ddbc:	7062      	strb	r2, [r4, #1]
 801ddbe:	70a1      	strb	r1, [r4, #2]
 801ddc0:	e791      	b.n	801dce6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 801ddc2:	bf00      	nop
 801ddc4:	24025e20 	.word	0x24025e20
 801ddc8:	24025e1a 	.word	0x24025e1a
 801ddcc:	24000180 	.word	0x24000180
 801ddd0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ddd4:	1c5a      	adds	r2, r3, #1
 801ddd6:	b94b      	cbnz	r3, 801ddec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 801ddd8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801dddc:	d14c      	bne.n	801de78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 801ddde:	f3c5 2207 	ubfx	r2, r5, #8, #8
 801dde2:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801dde6:	7025      	strb	r5, [r4, #0]
 801dde8:	7062      	strb	r2, [r4, #1]
 801ddea:	e72b      	b.n	801dc44 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 801ddec:	4296      	cmp	r6, r2
 801ddee:	46b0      	mov	r8, r6
 801ddf0:	bfa8      	it	ge
 801ddf2:	4690      	movge	r8, r2
 801ddf4:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801ddf8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801ddfc:	eba6 0608 	sub.w	r6, r6, r8
 801de00:	eba2 0908 	sub.w	r9, r2, r8
 801de04:	9308      	str	r3, [sp, #32]
 801de06:	b2eb      	uxtb	r3, r5
 801de08:	930c      	str	r3, [sp, #48]	@ 0x30
 801de0a:	f3c5 2307 	ubfx	r3, r5, #8, #8
 801de0e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801de10:	f3c5 4307 	ubfx	r3, r5, #16, #8
 801de14:	930a      	str	r3, [sp, #40]	@ 0x28
 801de16:	9b08      	ldr	r3, [sp, #32]
 801de18:	d030      	beq.n	801de7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 801de1a:	18fb      	adds	r3, r7, r3
 801de1c:	2bc0      	cmp	r3, #192	@ 0xc0
 801de1e:	dd15      	ble.n	801de4c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 801de20:	4650      	mov	r0, sl
 801de22:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801de26:	f7e5 fa57 	bl	80032d8 <_ZN8touchgfx5paint9flushLineEPmi>
 801de2a:	2203      	movs	r2, #3
 801de2c:	4651      	mov	r1, sl
 801de2e:	465b      	mov	r3, fp
 801de30:	4620      	mov	r0, r4
 801de32:	443c      	add	r4, r7
 801de34:	fb97 f2f2 	sdiv	r2, r7, r2
 801de38:	f7e5 fa92 	bl	8003360 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801de3c:	4b3d      	ldr	r3, [pc, #244]	@ (801df34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 801de3e:	2700      	movs	r7, #0
 801de40:	459a      	cmp	sl, r3
 801de42:	bf0c      	ite	eq
 801de44:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 801df40 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 801de48:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 801df34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 801de4c:	eb0a 0307 	add.w	r3, sl, r7
 801de50:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de52:	f1b8 0801 	subs.w	r8, r8, #1
 801de56:	f103 0303 	add.w	r3, r3, #3
 801de5a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801de5e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801de60:	f803 2c02 	strb.w	r2, [r3, #-2]
 801de64:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de66:	f803 2c01 	strb.w	r2, [r3, #-1]
 801de6a:	d1f1      	bne.n	801de50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 801de6c:	9b08      	ldr	r3, [sp, #32]
 801de6e:	441f      	add	r7, r3
 801de70:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801de74:	e6cb      	b.n	801dc0e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 801de76:	2201      	movs	r2, #1
 801de78:	4690      	mov	r8, r2
 801de7a:	e7bb      	b.n	801ddf4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 801de7c:	4423      	add	r3, r4
 801de7e:	42a3      	cmp	r3, r4
 801de80:	d9f6      	bls.n	801de70 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 801de82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801de84:	3403      	adds	r4, #3
 801de86:	f804 2c03 	strb.w	r2, [r4, #-3]
 801de8a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801de8c:	f804 2c02 	strb.w	r2, [r4, #-2]
 801de90:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801de92:	f804 2c01 	strb.w	r2, [r4, #-1]
 801de96:	e7f2      	b.n	801de7e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 801de98:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 801de9c:	d00e      	beq.n	801debc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801de9e:	b16f      	cbz	r7, 801debc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 801dea0:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 801dea4:	4650      	mov	r0, sl
 801dea6:	f7e5 fa17 	bl	80032d8 <_ZN8touchgfx5paint9flushLineEPmi>
 801deaa:	2203      	movs	r2, #3
 801deac:	4620      	mov	r0, r4
 801deae:	443c      	add	r4, r7
 801deb0:	465b      	mov	r3, fp
 801deb2:	4651      	mov	r1, sl
 801deb4:	fb97 f2f2 	sdiv	r2, r7, r2
 801deb8:	f7e5 fa52 	bl	8003360 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 801debc:	4b1e      	ldr	r3, [pc, #120]	@ (801df38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 801debe:	9a02      	ldr	r2, [sp, #8]
 801dec0:	881b      	ldrh	r3, [r3, #0]
 801dec2:	1a9b      	subs	r3, r3, r2
 801dec4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dec8:	441c      	add	r4, r3
 801deca:	9b04      	ldr	r3, [sp, #16]
 801decc:	3301      	adds	r3, #1
 801dece:	9304      	str	r3, [sp, #16]
 801ded0:	9a04      	ldr	r2, [sp, #16]
 801ded2:	9b01      	ldr	r3, [sp, #4]
 801ded4:	4293      	cmp	r3, r2
 801ded6:	d11c      	bne.n	801df12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 801ded8:	9b03      	ldr	r3, [sp, #12]
 801deda:	2500      	movs	r5, #0
 801dedc:	9a03      	ldr	r2, [sp, #12]
 801dede:	1c5e      	adds	r6, r3, #1
 801dee0:	9b05      	ldr	r3, [sp, #20]
 801dee2:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 801dee6:	4629      	mov	r1, r5
 801dee8:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 801deec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801def0:	9b06      	ldr	r3, [sp, #24]
 801def2:	fa98 f888 	rev.w	r8, r8
 801def6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801def8:	4498      	add	r8, r3
 801defa:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801defe:	1aff      	subs	r7, r7, r3
 801df00:	f008 fed4 	bl	8026cac <memset>
 801df04:	b2bf      	uxth	r7, r7
 801df06:	e9cd 6503 	strd	r6, r5, [sp, #12]
 801df0a:	f7e5 f9db 	bl	80032c4 <_ZN8touchgfx5paint8tearDownEv>
 801df0e:	46c1      	mov	r9, r8
 801df10:	e5db      	b.n	801daca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 801df12:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 801df16:	9b02      	ldr	r3, [sp, #8]
 801df18:	1aff      	subs	r7, r7, r3
 801df1a:	eba7 0709 	sub.w	r7, r7, r9
 801df1e:	b2bf      	uxth	r7, r7
 801df20:	e7f3      	b.n	801df0a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 801df22:	4b06      	ldr	r3, [pc, #24]	@ (801df3c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 801df24:	6818      	ldr	r0, [r3, #0]
 801df26:	6803      	ldr	r3, [r0, #0]
 801df28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801df2a:	4798      	blx	r3
 801df2c:	b013      	add	sp, #76	@ 0x4c
 801df2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801df32:	bf00      	nop
 801df34:	24000180 	.word	0x24000180
 801df38:	24025e1a 	.word	0x24025e1a
 801df3c:	24025e20 	.word	0x24025e20
 801df40:	24000280 	.word	0x24000280

0801df44 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 801df44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df48:	f89d 001c 	ldrb.w	r0, [sp, #28]
 801df4c:	9c06      	ldr	r4, [sp, #24]
 801df4e:	2800      	cmp	r0, #0
 801df50:	d06e      	beq.n	801e030 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df52:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 801df56:	2d00      	cmp	r5, #0
 801df58:	dd6a      	ble.n	801e030 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df5a:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 801df5e:	f1bc 0f00 	cmp.w	ip, #0
 801df62:	dd65      	ble.n	801e030 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801df64:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 801df68:	28ff      	cmp	r0, #255	@ 0xff
 801df6a:	f9b3 3000 	ldrsh.w	r3, [r3]
 801df6e:	f3c4 2707 	ubfx	r7, r4, #8, #8
 801df72:	fb02 3306 	mla	r3, r2, r6, r3
 801df76:	f3c4 4607 	ubfx	r6, r4, #16, #8
 801df7a:	b2e4      	uxtb	r4, r4
 801df7c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df80:	4419      	add	r1, r3
 801df82:	fb02 f30c 	mul.w	r3, r2, ip
 801df86:	eba2 0205 	sub.w	r2, r2, r5
 801df8a:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801df8e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801df92:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801df96:	440b      	add	r3, r1
 801df98:	d03e      	beq.n	801e018 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 801df9a:	fa1f fc80 	uxth.w	ip, r0
 801df9e:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 801dfa2:	fb06 f60c 	mul.w	r6, r6, ip
 801dfa6:	b280      	uxth	r0, r0
 801dfa8:	fb07 f70c 	mul.w	r7, r7, ip
 801dfac:	fb04 f40c 	mul.w	r4, r4, ip
 801dfb0:	4299      	cmp	r1, r3
 801dfb2:	d23d      	bcs.n	801e030 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801dfb4:	eb01 0c05 	add.w	ip, r1, r5
 801dfb8:	458c      	cmp	ip, r1
 801dfba:	f101 0e03 	add.w	lr, r1, #3
 801dfbe:	d928      	bls.n	801e012 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 801dfc0:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801dfc4:	fb11 f100 	smulbb	r1, r1, r0
 801dfc8:	4421      	add	r1, r4
 801dfca:	b289      	uxth	r1, r1
 801dfcc:	f101 0801 	add.w	r8, r1, #1
 801dfd0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dfd4:	1209      	asrs	r1, r1, #8
 801dfd6:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801dfda:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 801dfde:	fb11 f100 	smulbb	r1, r1, r0
 801dfe2:	4439      	add	r1, r7
 801dfe4:	b289      	uxth	r1, r1
 801dfe6:	f101 0801 	add.w	r8, r1, #1
 801dfea:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801dfee:	1209      	asrs	r1, r1, #8
 801dff0:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801dff4:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801dff8:	fb11 f100 	smulbb	r1, r1, r0
 801dffc:	4431      	add	r1, r6
 801dffe:	b289      	uxth	r1, r1
 801e000:	f101 0801 	add.w	r8, r1, #1
 801e004:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 801e008:	1209      	asrs	r1, r1, #8
 801e00a:	f80e 1c01 	strb.w	r1, [lr, #-1]
 801e00e:	4671      	mov	r1, lr
 801e010:	e7d2      	b.n	801dfb8 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 801e012:	4411      	add	r1, r2
 801e014:	e7cc      	b.n	801dfb0 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 801e016:	4411      	add	r1, r2
 801e018:	4299      	cmp	r1, r3
 801e01a:	d209      	bcs.n	801e030 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 801e01c:	1948      	adds	r0, r1, r5
 801e01e:	4281      	cmp	r1, r0
 801e020:	d2f9      	bcs.n	801e016 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 801e022:	700c      	strb	r4, [r1, #0]
 801e024:	3103      	adds	r1, #3
 801e026:	f801 7c02 	strb.w	r7, [r1, #-2]
 801e02a:	f801 6c01 	strb.w	r6, [r1, #-1]
 801e02e:	e7f6      	b.n	801e01e <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 801e030:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0801e034 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 801e034:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e038:	b093      	sub	sp, #76	@ 0x4c
 801e03a:	4699      	mov	r9, r3
 801e03c:	4617      	mov	r7, r2
 801e03e:	f9b3 2000 	ldrsh.w	r2, [r3]
 801e042:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 801e046:	4604      	mov	r4, r0
 801e048:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801e04c:	a80c      	add	r0, sp, #48	@ 0x30
 801e04e:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801e052:	460d      	mov	r5, r1
 801e054:	4649      	mov	r1, r9
 801e056:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e05a:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e05e:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801e062:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 801e066:	f7f1 ff55 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 801e06a:	4639      	mov	r1, r7
 801e06c:	a80c      	add	r0, sp, #48	@ 0x30
 801e06e:	f7f1 ff51 	bl	800ff14 <_ZN8touchgfx4RectaNERKS0_>
 801e072:	4b78      	ldr	r3, [pc, #480]	@ (801e254 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 801e074:	8818      	ldrh	r0, [r3, #0]
 801e076:	4b78      	ldr	r3, [pc, #480]	@ (801e258 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 801e078:	b202      	sxth	r2, r0
 801e07a:	8819      	ldrh	r1, [r3, #0]
 801e07c:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e080:	b20f      	sxth	r7, r1
 801e082:	2b00      	cmp	r3, #0
 801e084:	da07      	bge.n	801e096 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 801e086:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 801e08a:	4463      	add	r3, ip
 801e08c:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801e090:	2300      	movs	r3, #0
 801e092:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 801e096:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801e09a:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801e09e:	1ad2      	subs	r2, r2, r3
 801e0a0:	4594      	cmp	ip, r2
 801e0a2:	bfc4      	itt	gt
 801e0a4:	1ac2      	subgt	r2, r0, r3
 801e0a6:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 801e0aa:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e0ae:	2a00      	cmp	r2, #0
 801e0b0:	da07      	bge.n	801e0c2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801e0b2:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 801e0b6:	4462      	add	r2, ip
 801e0b8:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 801e0bc:	2200      	movs	r2, #0
 801e0be:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801e0c2:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801e0c6:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 801e0ca:	1abf      	subs	r7, r7, r2
 801e0cc:	45bc      	cmp	ip, r7
 801e0ce:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801e260 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801e0d2:	bfc8      	it	gt
 801e0d4:	1a8f      	subgt	r7, r1, r2
 801e0d6:	f89c c000 	ldrb.w	ip, [ip]
 801e0da:	bfc8      	it	gt
 801e0dc:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801e0e0:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 801e0e4:	f1bc 0f00 	cmp.w	ip, #0
 801e0e8:	d176      	bne.n	801e1d8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 801e0ea:	4287      	cmp	r7, r0
 801e0ec:	bf14      	ite	ne
 801e0ee:	2100      	movne	r1, #0
 801e0f0:	2101      	moveq	r1, #1
 801e0f2:	2f00      	cmp	r7, #0
 801e0f4:	9107      	str	r1, [sp, #28]
 801e0f6:	dd73      	ble.n	801e1e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e0f8:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 801e0fc:	2900      	cmp	r1, #0
 801e0fe:	9104      	str	r1, [sp, #16]
 801e100:	dd6e      	ble.n	801e1e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 801e102:	f8b9 1000 	ldrh.w	r1, [r9]
 801e106:	a80e      	add	r0, sp, #56	@ 0x38
 801e108:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 801e10c:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 801e110:	1a5b      	subs	r3, r3, r1
 801e112:	a910      	add	r1, sp, #64	@ 0x40
 801e114:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 801e118:	b21b      	sxth	r3, r3
 801e11a:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801e11e:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801e264 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e122:	9305      	str	r3, [sp, #20]
 801e124:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801e128:	1ad2      	subs	r2, r2, r3
 801e12a:	b213      	sxth	r3, r2
 801e12c:	9306      	str	r3, [sp, #24]
 801e12e:	9b05      	ldr	r3, [sp, #20]
 801e130:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801e134:	9b06      	ldr	r3, [sp, #24]
 801e136:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e13a:	9b04      	ldr	r3, [sp, #16]
 801e13c:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801e140:	2300      	movs	r3, #0
 801e142:	9310      	str	r3, [sp, #64]	@ 0x40
 801e144:	f7f8 fc14 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e148:	4640      	mov	r0, r8
 801e14a:	f7f8 fbcd 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e14e:	a810      	add	r0, sp, #64	@ 0x40
 801e150:	f7f8 fbca 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e154:	4b41      	ldr	r3, [pc, #260]	@ (801e25c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801e156:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801e15a:	4628      	mov	r0, r5
 801e15c:	881b      	ldrh	r3, [r3, #0]
 801e15e:	9308      	str	r3, [sp, #32]
 801e160:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801e164:	b21b      	sxth	r3, r3
 801e166:	9303      	str	r3, [sp, #12]
 801e168:	682b      	ldr	r3, [r5, #0]
 801e16a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e16c:	4798      	blx	r3
 801e16e:	9a03      	ldr	r2, [sp, #12]
 801e170:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801e174:	4681      	mov	r9, r0
 801e176:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801e17a:	fb13 f302 	smulbb	r3, r3, r2
 801e17e:	2203      	movs	r2, #3
 801e180:	f8da 0000 	ldr.w	r0, [sl]
 801e184:	fb15 3302 	smlabb	r3, r5, r2, r3
 801e188:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801e18a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e18c:	441d      	add	r5, r3
 801e18e:	6803      	ldr	r3, [r0, #0]
 801e190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e192:	4798      	blx	r3
 801e194:	9009      	str	r0, [sp, #36]	@ 0x24
 801e196:	f8da 0000 	ldr.w	r0, [sl]
 801e19a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801e19e:	6803      	ldr	r3, [r0, #0]
 801e1a0:	910a      	str	r1, [sp, #40]	@ 0x28
 801e1a2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e1a4:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801e1a8:	4798      	blx	r3
 801e1aa:	f010 0f01 	tst.w	r0, #1
 801e1ae:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801e1b2:	d01e      	beq.n	801e1f2 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801e1b4:	f8da 0000 	ldr.w	r0, [sl]
 801e1b8:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801e1bc:	6803      	ldr	r3, [r0, #0]
 801e1be:	9200      	str	r2, [sp, #0]
 801e1c0:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801e1c2:	462b      	mov	r3, r5
 801e1c4:	e898 0006 	ldmia.w	r8, {r1, r2}
 801e1c8:	47b0      	blx	r6
 801e1ca:	9b05      	ldr	r3, [sp, #20]
 801e1cc:	80a7      	strh	r7, [r4, #4]
 801e1ce:	8023      	strh	r3, [r4, #0]
 801e1d0:	9b06      	ldr	r3, [sp, #24]
 801e1d2:	8063      	strh	r3, [r4, #2]
 801e1d4:	9b04      	ldr	r3, [sp, #16]
 801e1d6:	e007      	b.n	801e1e8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801e1d8:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801e1dc:	4288      	cmp	r0, r1
 801e1de:	e785      	b.n	801e0ec <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801e1e0:	2300      	movs	r3, #0
 801e1e2:	8023      	strh	r3, [r4, #0]
 801e1e4:	8063      	strh	r3, [r4, #2]
 801e1e6:	80a3      	strh	r3, [r4, #4]
 801e1e8:	4620      	mov	r0, r4
 801e1ea:	80e3      	strh	r3, [r4, #6]
 801e1ec:	b013      	add	sp, #76	@ 0x4c
 801e1ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e1f2:	fb09 f606 	mul.w	r6, r9, r6
 801e1f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e1f8:	fb11 6602 	smlabb	r6, r1, r2, r6
 801e1fc:	9a07      	ldr	r2, [sp, #28]
 801e1fe:	4433      	add	r3, r6
 801e200:	461e      	mov	r6, r3
 801e202:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801e206:	b16a      	cbz	r2, 801e224 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e208:	9a08      	ldr	r2, [sp, #32]
 801e20a:	4593      	cmp	fp, r2
 801e20c:	d10a      	bne.n	801e224 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801e20e:	f8da 0000 	ldr.w	r0, [sl]
 801e212:	fb09 f303 	mul.w	r3, r9, r3
 801e216:	4629      	mov	r1, r5
 801e218:	6802      	ldr	r2, [r0, #0]
 801e21a:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801e21e:	4632      	mov	r2, r6
 801e220:	47d0      	blx	sl
 801e222:	e7d2      	b.n	801e1ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e224:	9a03      	ldr	r2, [sp, #12]
 801e226:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801e264 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801e22a:	fb02 5803 	mla	r8, r2, r3, r5
 801e22e:	4545      	cmp	r5, r8
 801e230:	d2cb      	bcs.n	801e1ca <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801e232:	f8db 0000 	ldr.w	r0, [fp]
 801e236:	4629      	mov	r1, r5
 801e238:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801e23c:	6802      	ldr	r2, [r0, #0]
 801e23e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e242:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801e246:	4632      	mov	r2, r6
 801e248:	47d0      	blx	sl
 801e24a:	9b03      	ldr	r3, [sp, #12]
 801e24c:	444e      	add	r6, r9
 801e24e:	441d      	add	r5, r3
 801e250:	e7ed      	b.n	801e22e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801e252:	bf00      	nop
 801e254:	24025e14 	.word	0x24025e14
 801e258:	24025e16 	.word	0x24025e16
 801e25c:	24025e1a 	.word	0x24025e1a
 801e260:	24025e18 	.word	0x24025e18
 801e264:	24025e20 	.word	0x24025e20

0801e268 <_ZN8touchgfx8LCD24bppC1Ev>:
 801e268:	2200      	movs	r2, #0
 801e26a:	490e      	ldr	r1, [pc, #56]	@ (801e2a4 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801e26c:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801e270:	6001      	str	r1, [r0, #0]
 801e272:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801e276:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801e27a:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801e27e:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801e282:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801e286:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801e28a:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801e28e:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801e292:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801e296:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801e29a:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801e29e:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801e2a2:	4770      	bx	lr
 801e2a4:	0802b4f0 	.word	0x0802b4f0

0801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801e2a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2ac:	b091      	sub	sp, #68	@ 0x44
 801e2ae:	4607      	mov	r7, r0
 801e2b0:	4688      	mov	r8, r1
 801e2b2:	6810      	ldr	r0, [r2, #0]
 801e2b4:	6851      	ldr	r1, [r2, #4]
 801e2b6:	ac0c      	add	r4, sp, #48	@ 0x30
 801e2b8:	4616      	mov	r6, r2
 801e2ba:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801e2be:	4d64      	ldr	r5, [pc, #400]	@ (801e450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e2c0:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801e454 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801e2c4:	c403      	stmia	r4!, {r0, r1}
 801e2c6:	6818      	ldr	r0, [r3, #0]
 801e2c8:	ac0e      	add	r4, sp, #56	@ 0x38
 801e2ca:	6859      	ldr	r1, [r3, #4]
 801e2cc:	c403      	stmia	r4!, {r0, r1}
 801e2ce:	a80c      	add	r0, sp, #48	@ 0x30
 801e2d0:	f7f8 fb0a 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e2d4:	4631      	mov	r1, r6
 801e2d6:	a80e      	add	r0, sp, #56	@ 0x38
 801e2d8:	f7f8 fb4a 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e2dc:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e2e0:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e2e4:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801e2e8:	6828      	ldr	r0, [r5, #0]
 801e2ea:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e2ee:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801e2f2:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801e2f6:	440f      	add	r7, r1
 801e2f8:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801e2fc:	440a      	add	r2, r1
 801e2fe:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e302:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801e306:	4413      	add	r3, r2
 801e308:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e30c:	6803      	ldr	r3, [r0, #0]
 801e30e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e310:	4798      	blx	r3
 801e312:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801e316:	6828      	ldr	r0, [r5, #0]
 801e318:	d01f      	beq.n	801e35a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801e31a:	2201      	movs	r2, #1
 801e31c:	2500      	movs	r5, #0
 801e31e:	6801      	ldr	r1, [r0, #0]
 801e320:	b2a4      	uxth	r4, r4
 801e322:	b2b6      	uxth	r6, r6
 801e324:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e328:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801e32c:	250b      	movs	r5, #11
 801e32e:	9507      	str	r5, [sp, #28]
 801e330:	f8ba 5000 	ldrh.w	r5, [sl]
 801e334:	f8cd 9010 	str.w	r9, [sp, #16]
 801e338:	9602      	str	r6, [sp, #8]
 801e33a:	9401      	str	r4, [sp, #4]
 801e33c:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801e340:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801e344:	9203      	str	r2, [sp, #12]
 801e346:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e34a:	9200      	str	r2, [sp, #0]
 801e34c:	4642      	mov	r2, r8
 801e34e:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801e350:	4639      	mov	r1, r7
 801e352:	47a0      	blx	r4
 801e354:	b011      	add	sp, #68	@ 0x44
 801e356:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e35a:	6803      	ldr	r3, [r0, #0]
 801e35c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e35e:	4798      	blx	r3
 801e360:	f8ba 5000 	ldrh.w	r5, [sl]
 801e364:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e368:	f04f 0e04 	mov.w	lr, #4
 801e36c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e370:	436e      	muls	r6, r5
 801e372:	fb05 2303 	mla	r3, r5, r3, r2
 801e376:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801e37a:	1b2d      	subs	r5, r5, r4
 801e37c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e380:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e384:	4418      	add	r0, r3
 801e386:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801e38a:	1982      	adds	r2, r0, r6
 801e38c:	1b1b      	subs	r3, r3, r4
 801e38e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e392:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e394:	4290      	cmp	r0, r2
 801e396:	d254      	bcs.n	801e442 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e398:	eb00 0a04 	add.w	sl, r0, r4
 801e39c:	4550      	cmp	r0, sl
 801e39e:	d24c      	bcs.n	801e43a <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801e3a0:	f817 1b01 	ldrb.w	r1, [r7], #1
 801e3a4:	fb1e e101 	smlabb	r1, lr, r1, lr
 801e3a8:	eb08 0c01 	add.w	ip, r8, r1
 801e3ac:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801e3b0:	b173      	cbz	r3, 801e3d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e3b2:	2bff      	cmp	r3, #255	@ 0xff
 801e3b4:	f818 b001 	ldrb.w	fp, [r8, r1]
 801e3b8:	d10c      	bne.n	801e3d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3ba:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801e3be:	d109      	bne.n	801e3d4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801e3c0:	f880 b000 	strb.w	fp, [r0]
 801e3c4:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801e3c8:	7043      	strb	r3, [r0, #1]
 801e3ca:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801e3ce:	7083      	strb	r3, [r0, #2]
 801e3d0:	3003      	adds	r0, #3
 801e3d2:	e7e3      	b.n	801e39c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801e3d4:	fb09 f103 	mul.w	r1, r9, r3
 801e3d8:	1c4b      	adds	r3, r1, #1
 801e3da:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801e3de:	7801      	ldrb	r1, [r0, #0]
 801e3e0:	121b      	asrs	r3, r3, #8
 801e3e2:	b29e      	uxth	r6, r3
 801e3e4:	43db      	mvns	r3, r3
 801e3e6:	fb1b fb06 	smulbb	fp, fp, r6
 801e3ea:	b2db      	uxtb	r3, r3
 801e3ec:	fb01 b103 	mla	r1, r1, r3, fp
 801e3f0:	b289      	uxth	r1, r1
 801e3f2:	f101 0b01 	add.w	fp, r1, #1
 801e3f6:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e3fa:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e3fe:	fb1b fb03 	smulbb	fp, fp, r3
 801e402:	1209      	asrs	r1, r1, #8
 801e404:	7001      	strb	r1, [r0, #0]
 801e406:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801e40a:	fb01 b106 	mla	r1, r1, r6, fp
 801e40e:	b289      	uxth	r1, r1
 801e410:	f101 0b01 	add.w	fp, r1, #1
 801e414:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801e418:	1209      	asrs	r1, r1, #8
 801e41a:	7041      	strb	r1, [r0, #1]
 801e41c:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801e420:	f890 c002 	ldrb.w	ip, [r0, #2]
 801e424:	fb1c f303 	smulbb	r3, ip, r3
 801e428:	fb01 3606 	mla	r6, r1, r6, r3
 801e42c:	b2b6      	uxth	r6, r6
 801e42e:	1c73      	adds	r3, r6, #1
 801e430:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801e434:	1236      	asrs	r6, r6, #8
 801e436:	7086      	strb	r6, [r0, #2]
 801e438:	e7ca      	b.n	801e3d0 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801e43a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e43c:	4428      	add	r0, r5
 801e43e:	441f      	add	r7, r3
 801e440:	e7a8      	b.n	801e394 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801e442:	4b03      	ldr	r3, [pc, #12]	@ (801e450 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801e444:	6818      	ldr	r0, [r3, #0]
 801e446:	6803      	ldr	r3, [r0, #0]
 801e448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e44a:	4798      	blx	r3
 801e44c:	e782      	b.n	801e354 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801e44e:	bf00      	nop
 801e450:	24025e20 	.word	0x24025e20
 801e454:	24025e1a 	.word	0x24025e1a

0801e458 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e45c:	b091      	sub	sp, #68	@ 0x44
 801e45e:	4680      	mov	r8, r0
 801e460:	460e      	mov	r6, r1
 801e462:	6810      	ldr	r0, [r2, #0]
 801e464:	6851      	ldr	r1, [r2, #4]
 801e466:	ad0c      	add	r5, sp, #48	@ 0x30
 801e468:	4614      	mov	r4, r2
 801e46a:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801e46e:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801e608 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801e472:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801e60c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801e476:	c503      	stmia	r5!, {r0, r1}
 801e478:	6818      	ldr	r0, [r3, #0]
 801e47a:	ad0e      	add	r5, sp, #56	@ 0x38
 801e47c:	6859      	ldr	r1, [r3, #4]
 801e47e:	c503      	stmia	r5!, {r0, r1}
 801e480:	a80c      	add	r0, sp, #48	@ 0x30
 801e482:	f7f8 fa31 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e486:	4621      	mov	r1, r4
 801e488:	a80e      	add	r0, sp, #56	@ 0x38
 801e48a:	f7f8 fa71 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e48e:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801e492:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e496:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801e49a:	f8d9 0000 	ldr.w	r0, [r9]
 801e49e:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e4a2:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801e4a6:	eb08 0401 	add.w	r4, r8, r1
 801e4aa:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801e4ae:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801e4b2:	440a      	add	r2, r1
 801e4b4:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801e4b8:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801e4bc:	4413      	add	r3, r2
 801e4be:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801e4c2:	6803      	ldr	r3, [r0, #0]
 801e4c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e4c6:	4798      	blx	r3
 801e4c8:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801e4cc:	f8d9 0000 	ldr.w	r0, [r9]
 801e4d0:	d022      	beq.n	801e518 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801e4d2:	2200      	movs	r2, #0
 801e4d4:	f04f 0c01 	mov.w	ip, #1
 801e4d8:	6801      	ldr	r1, [r0, #0]
 801e4da:	b2ad      	uxth	r5, r5
 801e4dc:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801e4e0:	e9cd c208 	strd	ip, r2, [sp, #32]
 801e4e4:	f04f 0c0b 	mov.w	ip, #11
 801e4e8:	f8cd c01c 	str.w	ip, [sp, #28]
 801e4ec:	f8ba c000 	ldrh.w	ip, [sl]
 801e4f0:	9704      	str	r7, [sp, #16]
 801e4f2:	9502      	str	r5, [sp, #8]
 801e4f4:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801e4f8:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801e4fc:	9203      	str	r2, [sp, #12]
 801e4fe:	fa1f f288 	uxth.w	r2, r8
 801e502:	9201      	str	r2, [sp, #4]
 801e504:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801e508:	9200      	str	r2, [sp, #0]
 801e50a:	4632      	mov	r2, r6
 801e50c:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801e50e:	4621      	mov	r1, r4
 801e510:	47a8      	blx	r5
 801e512:	b011      	add	sp, #68	@ 0x44
 801e514:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e518:	6803      	ldr	r3, [r0, #0]
 801e51a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e51c:	4798      	blx	r3
 801e51e:	f8ba 2000 	ldrh.w	r2, [sl]
 801e522:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801e526:	f04f 0e03 	mov.w	lr, #3
 801e52a:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801e52e:	4355      	muls	r5, r2
 801e530:	fa1f fc87 	uxth.w	ip, r7
 801e534:	fb02 1303 	mla	r3, r2, r3, r1
 801e538:	eba2 0208 	sub.w	r2, r2, r8
 801e53c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e540:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e544:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801e548:	4418      	add	r0, r3
 801e54a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801e54c:	1943      	adds	r3, r0, r5
 801e54e:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801e552:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801e556:	eba2 0208 	sub.w	r2, r2, r8
 801e55a:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801e55e:	b2ad      	uxth	r5, r5
 801e560:	4298      	cmp	r0, r3
 801e562:	d24a      	bcs.n	801e5fa <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801e564:	eb00 0908 	add.w	r9, r0, r8
 801e568:	4621      	mov	r1, r4
 801e56a:	4548      	cmp	r0, r9
 801e56c:	460c      	mov	r4, r1
 801e56e:	d240      	bcs.n	801e5f2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801e570:	f04f 0a04 	mov.w	sl, #4
 801e574:	7824      	ldrb	r4, [r4, #0]
 801e576:	2fff      	cmp	r7, #255	@ 0xff
 801e578:	f101 0101 	add.w	r1, r1, #1
 801e57c:	fb1e a404 	smlabb	r4, lr, r4, sl
 801e580:	eb06 0a04 	add.w	sl, r6, r4
 801e584:	f816 b004 	ldrb.w	fp, [r6, r4]
 801e588:	d02b      	beq.n	801e5e2 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801e58a:	7804      	ldrb	r4, [r0, #0]
 801e58c:	fb14 f405 	smulbb	r4, r4, r5
 801e590:	fb0b 440c 	mla	r4, fp, ip, r4
 801e594:	b2a4      	uxth	r4, r4
 801e596:	f104 0b01 	add.w	fp, r4, #1
 801e59a:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e59e:	f890 b001 	ldrb.w	fp, [r0, #1]
 801e5a2:	fb1b fb05 	smulbb	fp, fp, r5
 801e5a6:	1224      	asrs	r4, r4, #8
 801e5a8:	7004      	strb	r4, [r0, #0]
 801e5aa:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e5ae:	fb04 b40c 	mla	r4, r4, ip, fp
 801e5b2:	b2a4      	uxth	r4, r4
 801e5b4:	f104 0b01 	add.w	fp, r4, #1
 801e5b8:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801e5bc:	1224      	asrs	r4, r4, #8
 801e5be:	7044      	strb	r4, [r0, #1]
 801e5c0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e5c4:	f890 a002 	ldrb.w	sl, [r0, #2]
 801e5c8:	fb1a fa05 	smulbb	sl, sl, r5
 801e5cc:	fb04 a40c 	mla	r4, r4, ip, sl
 801e5d0:	b2a4      	uxth	r4, r4
 801e5d2:	f104 0a01 	add.w	sl, r4, #1
 801e5d6:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801e5da:	1224      	asrs	r4, r4, #8
 801e5dc:	7084      	strb	r4, [r0, #2]
 801e5de:	3003      	adds	r0, #3
 801e5e0:	e7c3      	b.n	801e56a <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801e5e2:	f880 b000 	strb.w	fp, [r0]
 801e5e6:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801e5ea:	7044      	strb	r4, [r0, #1]
 801e5ec:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801e5f0:	e7f4      	b.n	801e5dc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801e5f2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801e5f4:	4420      	add	r0, r4
 801e5f6:	188c      	adds	r4, r1, r2
 801e5f8:	e7b2      	b.n	801e560 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801e5fa:	4b03      	ldr	r3, [pc, #12]	@ (801e608 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801e5fc:	6818      	ldr	r0, [r3, #0]
 801e5fe:	6803      	ldr	r3, [r0, #0]
 801e600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e602:	4798      	blx	r3
 801e604:	e785      	b.n	801e512 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801e606:	bf00      	nop
 801e608:	24025e20 	.word	0x24025e20
 801e60c:	24025e1a 	.word	0x24025e1a

0801e610 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801e610:	b4f0      	push	{r4, r5, r6, r7}
 801e612:	460c      	mov	r4, r1
 801e614:	4611      	mov	r1, r2
 801e616:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801e61a:	461a      	mov	r2, r3
 801e61c:	780f      	ldrb	r7, [r1, #0]
 801e61e:	9b04      	ldr	r3, [sp, #16]
 801e620:	784e      	ldrb	r6, [r1, #1]
 801e622:	b11f      	cbz	r7, 801e62c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801e624:	2f01      	cmp	r7, #1
 801e626:	d01d      	beq.n	801e664 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801e628:	bcf0      	pop	{r4, r5, r6, r7}
 801e62a:	4770      	bx	lr
 801e62c:	2e03      	cmp	r6, #3
 801e62e:	d8fb      	bhi.n	801e628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e630:	e8df f006 	tbb	[pc, r6]
 801e634:	16140702 	.word	0x16140702
 801e638:	9504      	str	r5, [sp, #16]
 801e63a:	4620      	mov	r0, r4
 801e63c:	bcf0      	pop	{r4, r5, r6, r7}
 801e63e:	f7ff be33 	b.w	801e2a8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801e642:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801e644:	2800      	cmp	r0, #0
 801e646:	d0ef      	beq.n	801e628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e648:	6806      	ldr	r6, [r0, #0]
 801e64a:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e64e:	68f5      	ldr	r5, [r6, #12]
 801e650:	4613      	mov	r3, r2
 801e652:	46ac      	mov	ip, r5
 801e654:	460a      	mov	r2, r1
 801e656:	4621      	mov	r1, r4
 801e658:	bcf0      	pop	{r4, r5, r6, r7}
 801e65a:	4760      	bx	ip
 801e65c:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e65e:	e7f1      	b.n	801e644 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e660:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e662:	e7ef      	b.n	801e644 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801e664:	2e03      	cmp	r6, #3
 801e666:	d8df      	bhi.n	801e628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e668:	e8df f006 	tbb	[pc, r6]
 801e66c:	110f0702 	.word	0x110f0702
 801e670:	9504      	str	r5, [sp, #16]
 801e672:	4620      	mov	r0, r4
 801e674:	bcf0      	pop	{r4, r5, r6, r7}
 801e676:	f7ff beef 	b.w	801e458 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801e67a:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801e67c:	2800      	cmp	r0, #0
 801e67e:	d0d3      	beq.n	801e628 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801e680:	6806      	ldr	r6, [r0, #0]
 801e682:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801e686:	68b5      	ldr	r5, [r6, #8]
 801e688:	e7e2      	b.n	801e650 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801e68a:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801e68c:	e7f6      	b.n	801e67c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801e68e:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801e690:	e7f4      	b.n	801e67c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801e694 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801e694:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801e698:	4605      	mov	r5, r0
 801e69a:	b08f      	sub	sp, #60	@ 0x3c
 801e69c:	460c      	mov	r4, r1
 801e69e:	461f      	mov	r7, r3
 801e6a0:	2b00      	cmp	r3, #0
 801e6a2:	d052      	beq.n	801e74a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e6a4:	6808      	ldr	r0, [r1, #0]
 801e6a6:	ab0a      	add	r3, sp, #40	@ 0x28
 801e6a8:	6849      	ldr	r1, [r1, #4]
 801e6aa:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801e874 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801e6ae:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801e878 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801e6b2:	c303      	stmia	r3!, {r0, r1}
 801e6b4:	6810      	ldr	r0, [r2, #0]
 801e6b6:	ab0c      	add	r3, sp, #48	@ 0x30
 801e6b8:	6851      	ldr	r1, [r2, #4]
 801e6ba:	c303      	stmia	r3!, {r0, r1}
 801e6bc:	a80a      	add	r0, sp, #40	@ 0x28
 801e6be:	f7f8 f913 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e6c2:	4621      	mov	r1, r4
 801e6c4:	a80c      	add	r0, sp, #48	@ 0x30
 801e6c6:	f7f8 f953 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e6ca:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e6ce:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e6d2:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e6d6:	f8d8 0000 	ldr.w	r0, [r8]
 801e6da:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e6de:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801e6e2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801e6e6:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801e6ea:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801e6ee:	440a      	add	r2, r1
 801e6f0:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801e6f4:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801e6f8:	4413      	add	r3, r2
 801e6fa:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801e6fe:	6803      	ldr	r3, [r0, #0]
 801e700:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e702:	4798      	blx	r3
 801e704:	2fff      	cmp	r7, #255	@ 0xff
 801e706:	d023      	beq.n	801e750 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801e708:	f010 0f04 	tst.w	r0, #4
 801e70c:	f8d8 0000 	ldr.w	r0, [r8]
 801e710:	d021      	beq.n	801e756 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801e712:	2100      	movs	r1, #0
 801e714:	f04f 0e01 	mov.w	lr, #1
 801e718:	f8d0 c000 	ldr.w	ip, [r0]
 801e71c:	b2a4      	uxth	r4, r4
 801e71e:	9106      	str	r1, [sp, #24]
 801e720:	b2b6      	uxth	r6, r6
 801e722:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801e726:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801e72a:	e9cd e107 	strd	lr, r1, [sp, #28]
 801e72e:	f8b9 e000 	ldrh.w	lr, [r9]
 801e732:	9703      	str	r7, [sp, #12]
 801e734:	9401      	str	r4, [sp, #4]
 801e736:	9600      	str	r6, [sp, #0]
 801e738:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801e73c:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801e740:	9102      	str	r1, [sp, #8]
 801e742:	4629      	mov	r1, r5
 801e744:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801e748:	47a0      	blx	r4
 801e74a:	b00f      	add	sp, #60	@ 0x3c
 801e74c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801e750:	f010 0f01 	tst.w	r0, #1
 801e754:	e7da      	b.n	801e70c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801e756:	6803      	ldr	r3, [r0, #0]
 801e758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e75a:	4798      	blx	r3
 801e75c:	f8b9 1000 	ldrh.w	r1, [r9]
 801e760:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801e764:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801e768:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801e76c:	434c      	muls	r4, r1
 801e76e:	2fff      	cmp	r7, #255	@ 0xff
 801e770:	fb01 2303 	mla	r3, r1, r3, r2
 801e774:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e778:	eba1 0106 	sub.w	r1, r1, r6
 801e77c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e780:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801e784:	4418      	add	r0, r3
 801e786:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801e78a:	eba3 0606 	sub.w	r6, r3, r6
 801e78e:	4404      	add	r4, r0
 801e790:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801e794:	d04a      	beq.n	801e82c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801e796:	43fa      	mvns	r2, r7
 801e798:	b2bb      	uxth	r3, r7
 801e79a:	b2d7      	uxtb	r7, r2
 801e79c:	42a0      	cmp	r0, r4
 801e79e:	d263      	bcs.n	801e868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e7a0:	eb00 0e0c 	add.w	lr, r0, ip
 801e7a4:	4586      	cmp	lr, r0
 801e7a6:	f100 0803 	add.w	r8, r0, #3
 801e7aa:	d93a      	bls.n	801e822 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801e7ac:	f835 2b02 	ldrh.w	r2, [r5], #2
 801e7b0:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801e7b4:	00d0      	lsls	r0, r2, #3
 801e7b6:	fb19 f907 	smulbb	r9, r9, r7
 801e7ba:	b2c0      	uxtb	r0, r0
 801e7bc:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801e7c0:	fb00 9003 	mla	r0, r0, r3, r9
 801e7c4:	b280      	uxth	r0, r0
 801e7c6:	f100 0901 	add.w	r9, r0, #1
 801e7ca:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e7ce:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801e7d2:	fb19 f907 	smulbb	r9, r9, r7
 801e7d6:	1200      	asrs	r0, r0, #8
 801e7d8:	f808 0c03 	strb.w	r0, [r8, #-3]
 801e7dc:	10d0      	asrs	r0, r2, #3
 801e7de:	1212      	asrs	r2, r2, #8
 801e7e0:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801e7e4:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801e7e8:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801e7ec:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e7f0:	fb00 9003 	mla	r0, r0, r3, r9
 801e7f4:	b280      	uxth	r0, r0
 801e7f6:	f100 0901 	add.w	r9, r0, #1
 801e7fa:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801e7fe:	1200      	asrs	r0, r0, #8
 801e800:	f808 0c02 	strb.w	r0, [r8, #-2]
 801e804:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801e808:	fb10 f007 	smulbb	r0, r0, r7
 801e80c:	fb02 0203 	mla	r2, r2, r3, r0
 801e810:	b292      	uxth	r2, r2
 801e812:	1c50      	adds	r0, r2, #1
 801e814:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801e818:	4640      	mov	r0, r8
 801e81a:	1212      	asrs	r2, r2, #8
 801e81c:	f808 2c01 	strb.w	r2, [r8, #-1]
 801e820:	e7c0      	b.n	801e7a4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801e822:	4408      	add	r0, r1
 801e824:	4435      	add	r5, r6
 801e826:	e7b9      	b.n	801e79c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801e828:	4408      	add	r0, r1
 801e82a:	4435      	add	r5, r6
 801e82c:	42a0      	cmp	r0, r4
 801e82e:	d21b      	bcs.n	801e868 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801e830:	eb00 070c 	add.w	r7, r0, ip
 801e834:	42b8      	cmp	r0, r7
 801e836:	d2f7      	bcs.n	801e828 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801e838:	f835 3b02 	ldrh.w	r3, [r5], #2
 801e83c:	3003      	adds	r0, #3
 801e83e:	00da      	lsls	r2, r3, #3
 801e840:	b2d2      	uxtb	r2, r2
 801e842:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801e846:	f800 2c03 	strb.w	r2, [r0, #-3]
 801e84a:	10da      	asrs	r2, r3, #3
 801e84c:	121b      	asrs	r3, r3, #8
 801e84e:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801e852:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801e856:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801e85a:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801e85e:	f800 2c02 	strb.w	r2, [r0, #-2]
 801e862:	f800 3c01 	strb.w	r3, [r0, #-1]
 801e866:	e7e5      	b.n	801e834 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801e868:	4b02      	ldr	r3, [pc, #8]	@ (801e874 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801e86a:	6818      	ldr	r0, [r3, #0]
 801e86c:	6803      	ldr	r3, [r0, #0]
 801e86e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e870:	4798      	blx	r3
 801e872:	e76a      	b.n	801e74a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801e874:	24025e20 	.word	0x24025e20
 801e878:	24025e1a 	.word	0x24025e1a

0801e87c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801e87c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e880:	b08a      	sub	sp, #40	@ 0x28
 801e882:	460d      	mov	r5, r1
 801e884:	4604      	mov	r4, r0
 801e886:	461e      	mov	r6, r3
 801e888:	6808      	ldr	r0, [r1, #0]
 801e88a:	ab06      	add	r3, sp, #24
 801e88c:	6849      	ldr	r1, [r1, #4]
 801e88e:	4f5d      	ldr	r7, [pc, #372]	@ (801ea04 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801e890:	c303      	stmia	r3!, {r0, r1}
 801e892:	6810      	ldr	r0, [r2, #0]
 801e894:	ab08      	add	r3, sp, #32
 801e896:	6851      	ldr	r1, [r2, #4]
 801e898:	c303      	stmia	r3!, {r0, r1}
 801e89a:	a806      	add	r0, sp, #24
 801e89c:	f7f8 f824 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801e8a0:	4629      	mov	r1, r5
 801e8a2:	a808      	add	r0, sp, #32
 801e8a4:	f7f8 f864 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801e8a8:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e8ac:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e8b0:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801e8b4:	6838      	ldr	r0, [r7, #0]
 801e8b6:	fb11 2103 	smlabb	r1, r1, r3, r2
 801e8ba:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801e8be:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801e8c2:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801e8c6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801e8ca:	440a      	add	r2, r1
 801e8cc:	f8ad 2020 	strh.w	r2, [sp, #32]
 801e8d0:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801e8d4:	4413      	add	r3, r2
 801e8d6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801e8da:	6803      	ldr	r3, [r0, #0]
 801e8dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801e8de:	4798      	blx	r3
 801e8e0:	2eff      	cmp	r6, #255	@ 0xff
 801e8e2:	d119      	bne.n	801e918 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801e8e4:	f010 0f20 	tst.w	r0, #32
 801e8e8:	6838      	ldr	r0, [r7, #0]
 801e8ea:	d018      	beq.n	801e91e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801e8ec:	b2ad      	uxth	r5, r5
 801e8ee:	2700      	movs	r7, #0
 801e8f0:	6801      	ldr	r1, [r0, #0]
 801e8f2:	9501      	str	r5, [sp, #4]
 801e8f4:	fa1f f588 	uxth.w	r5, r8
 801e8f8:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801e8fc:	9500      	str	r5, [sp, #0]
 801e8fe:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801e902:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801e906:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801e90a:	9602      	str	r6, [sp, #8]
 801e90c:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801e90e:	4621      	mov	r1, r4
 801e910:	47a8      	blx	r5
 801e912:	b00a      	add	sp, #40	@ 0x28
 801e914:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e918:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801e91c:	e7e4      	b.n	801e8e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801e91e:	6803      	ldr	r3, [r0, #0]
 801e920:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e922:	4798      	blx	r3
 801e924:	4b38      	ldr	r3, [pc, #224]	@ (801ea08 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801e926:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801e92a:	f8b3 c000 	ldrh.w	ip, [r3]
 801e92e:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801e932:	fb0c f505 	mul.w	r5, ip, r5
 801e936:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801e93a:	fb0c 2303 	mla	r3, ip, r3, r2
 801e93e:	ebac 0c08 	sub.w	ip, ip, r8
 801e942:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801e946:	ebae 0e08 	sub.w	lr, lr, r8
 801e94a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e94e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801e952:	4418      	add	r0, r3
 801e954:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801e958:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801e95c:	4405      	add	r5, r0
 801e95e:	42a8      	cmp	r0, r5
 801e960:	d24a      	bcs.n	801e9f8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801e962:	eb00 0803 	add.w	r8, r0, r3
 801e966:	4540      	cmp	r0, r8
 801e968:	d243      	bcs.n	801e9f2 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801e96a:	78e2      	ldrb	r2, [r4, #3]
 801e96c:	b15a      	cbz	r2, 801e986 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801e96e:	2aff      	cmp	r2, #255	@ 0xff
 801e970:	f894 9000 	ldrb.w	r9, [r4]
 801e974:	d10a      	bne.n	801e98c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e976:	2eff      	cmp	r6, #255	@ 0xff
 801e978:	d108      	bne.n	801e98c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801e97a:	f880 9000 	strb.w	r9, [r0]
 801e97e:	7862      	ldrb	r2, [r4, #1]
 801e980:	7042      	strb	r2, [r0, #1]
 801e982:	78a2      	ldrb	r2, [r4, #2]
 801e984:	7082      	strb	r2, [r0, #2]
 801e986:	3003      	adds	r0, #3
 801e988:	3404      	adds	r4, #4
 801e98a:	e7ec      	b.n	801e966 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801e98c:	4372      	muls	r2, r6
 801e98e:	1c51      	adds	r1, r2, #1
 801e990:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801e994:	1209      	asrs	r1, r1, #8
 801e996:	fa1f fa81 	uxth.w	sl, r1
 801e99a:	43c9      	mvns	r1, r1
 801e99c:	fb19 f90a 	smulbb	r9, r9, sl
 801e9a0:	b2ca      	uxtb	r2, r1
 801e9a2:	7801      	ldrb	r1, [r0, #0]
 801e9a4:	fb01 9902 	mla	r9, r1, r2, r9
 801e9a8:	fa1f f989 	uxth.w	r9, r9
 801e9ac:	f109 0101 	add.w	r1, r9, #1
 801e9b0:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801e9b4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801e9b8:	f880 9000 	strb.w	r9, [r0]
 801e9bc:	f890 9001 	ldrb.w	r9, [r0, #1]
 801e9c0:	7861      	ldrb	r1, [r4, #1]
 801e9c2:	fb19 f902 	smulbb	r9, r9, r2
 801e9c6:	fb01 910a 	mla	r1, r1, sl, r9
 801e9ca:	b289      	uxth	r1, r1
 801e9cc:	f101 0901 	add.w	r9, r1, #1
 801e9d0:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801e9d4:	1209      	asrs	r1, r1, #8
 801e9d6:	7041      	strb	r1, [r0, #1]
 801e9d8:	7881      	ldrb	r1, [r0, #2]
 801e9da:	f894 9002 	ldrb.w	r9, [r4, #2]
 801e9de:	fb11 f202 	smulbb	r2, r1, r2
 801e9e2:	fb09 220a 	mla	r2, r9, sl, r2
 801e9e6:	b292      	uxth	r2, r2
 801e9e8:	1c51      	adds	r1, r2, #1
 801e9ea:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801e9ee:	1212      	asrs	r2, r2, #8
 801e9f0:	e7c8      	b.n	801e984 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801e9f2:	4460      	add	r0, ip
 801e9f4:	4474      	add	r4, lr
 801e9f6:	e7b2      	b.n	801e95e <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801e9f8:	6838      	ldr	r0, [r7, #0]
 801e9fa:	6803      	ldr	r3, [r0, #0]
 801e9fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801e9fe:	4798      	blx	r3
 801ea00:	e787      	b.n	801e912 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801ea02:	bf00      	nop
 801ea04:	24025e20 	.word	0x24025e20
 801ea08:	24025e1a 	.word	0x24025e1a

0801ea0c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801ea0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801ea10:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801ea14:	4607      	mov	r7, r0
 801ea16:	460c      	mov	r4, r1
 801ea18:	4692      	mov	sl, r2
 801ea1a:	4699      	mov	r9, r3
 801ea1c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801ea1e:	b335      	cbz	r5, 801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ea20:	4608      	mov	r0, r1
 801ea22:	f7fb fd93 	bl	801a54c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801ea26:	4680      	mov	r8, r0
 801ea28:	4620      	mov	r0, r4
 801ea2a:	f7fb fdc3 	bl	801a5b4 <_ZNK8touchgfx6Bitmap9getHeightEv>
 801ea2e:	f8ad 000e 	strh.w	r0, [sp, #14]
 801ea32:	4620      	mov	r0, r4
 801ea34:	f8ad a008 	strh.w	sl, [sp, #8]
 801ea38:	f8ad 900a 	strh.w	r9, [sp, #10]
 801ea3c:	f8ad 800c 	strh.w	r8, [sp, #12]
 801ea40:	f7fb fefa 	bl	801a838 <_ZNK8touchgfx6Bitmap9getFormatEv>
 801ea44:	2810      	cmp	r0, #16
 801ea46:	d812      	bhi.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ea48:	e8df f000 	tbb	[pc, r0]
 801ea4c:	11092d24 	.word	0x11092d24
 801ea50:	11111111 	.word	0x11111111
 801ea54:	14111111 	.word	0x14111111
 801ea58:	4c111111 	.word	0x4c111111
 801ea5c:	3c          	.byte	0x3c
 801ea5d:	00          	.byte	0x00
 801ea5e:	4620      	mov	r0, r4
 801ea60:	f7fb fe66 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea64:	462b      	mov	r3, r5
 801ea66:	4632      	mov	r2, r6
 801ea68:	a902      	add	r1, sp, #8
 801ea6a:	f7ff ff07 	bl	801e87c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801ea6e:	b004      	add	sp, #16
 801ea70:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ea74:	4620      	mov	r0, r4
 801ea76:	f7fb fe5b 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea7a:	4680      	mov	r8, r0
 801ea7c:	4620      	mov	r0, r4
 801ea7e:	f7fb fe87 	bl	801a790 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801ea82:	ab02      	add	r3, sp, #8
 801ea84:	4602      	mov	r2, r0
 801ea86:	4641      	mov	r1, r8
 801ea88:	4638      	mov	r0, r7
 801ea8a:	e9cd 6500 	strd	r6, r5, [sp]
 801ea8e:	f7ff fdbf 	bl	801e610 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801ea92:	e7ec      	b.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801ea94:	4620      	mov	r0, r4
 801ea96:	f7fb fe4b 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ea9a:	462b      	mov	r3, r5
 801ea9c:	4632      	mov	r2, r6
 801ea9e:	a902      	add	r1, sp, #8
 801eaa0:	f7ff fdf8 	bl	801e694 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801eaa4:	e7e3      	b.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eaa6:	683b      	ldr	r3, [r7, #0]
 801eaa8:	4620      	mov	r0, r4
 801eaaa:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801eaae:	f7fb fe3f 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801eab2:	2300      	movs	r3, #0
 801eab4:	4601      	mov	r1, r0
 801eab6:	aa02      	add	r2, sp, #8
 801eab8:	4638      	mov	r0, r7
 801eaba:	e9cd 5300 	strd	r5, r3, [sp]
 801eabe:	4633      	mov	r3, r6
 801eac0:	47c0      	blx	r8
 801eac2:	e7d4      	b.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eac4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801eac6:	2f00      	cmp	r7, #0
 801eac8:	d0d1      	beq.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eaca:	683b      	ldr	r3, [r7, #0]
 801eacc:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801ead0:	4620      	mov	r0, r4
 801ead2:	f7fb fe2d 	bl	801a730 <_ZNK8touchgfx6Bitmap7getDataEv>
 801ead6:	9500      	str	r5, [sp, #0]
 801ead8:	4601      	mov	r1, r0
 801eada:	4633      	mov	r3, r6
 801eadc:	aa02      	add	r2, sp, #8
 801eade:	4638      	mov	r0, r7
 801eae0:	47c0      	blx	r8
 801eae2:	e7c4      	b.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eae4:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801eae6:	2f00      	cmp	r7, #0
 801eae8:	d0c1      	beq.n	801ea6e <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801eaea:	683b      	ldr	r3, [r7, #0]
 801eaec:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801eaf0:	e7ee      	b.n	801ead0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801eaf2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801eaf2:	b4f0      	push	{r4, r5, r6, r7}
 801eaf4:	4616      	mov	r6, r2
 801eaf6:	461c      	mov	r4, r3
 801eaf8:	460d      	mov	r5, r1
 801eafa:	9a04      	ldr	r2, [sp, #16]
 801eafc:	2e01      	cmp	r6, #1
 801eafe:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801eb02:	d00e      	beq.n	801eb22 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801eb04:	d303      	bcc.n	801eb0e <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801eb06:	2e02      	cmp	r6, #2
 801eb08:	d006      	beq.n	801eb18 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801eb0a:	bcf0      	pop	{r4, r5, r6, r7}
 801eb0c:	4770      	bx	lr
 801eb0e:	4621      	mov	r1, r4
 801eb10:	4628      	mov	r0, r5
 801eb12:	bcf0      	pop	{r4, r5, r6, r7}
 801eb14:	f7ff bdbe 	b.w	801e694 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801eb18:	4621      	mov	r1, r4
 801eb1a:	4628      	mov	r0, r5
 801eb1c:	bcf0      	pop	{r4, r5, r6, r7}
 801eb1e:	f7ff bead 	b.w	801e87c <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801eb22:	6805      	ldr	r5, [r0, #0]
 801eb24:	2600      	movs	r6, #0
 801eb26:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801eb2a:	68ed      	ldr	r5, [r5, #12]
 801eb2c:	4613      	mov	r3, r2
 801eb2e:	4622      	mov	r2, r4
 801eb30:	46ac      	mov	ip, r5
 801eb32:	bcf0      	pop	{r4, r5, r6, r7}
 801eb34:	4760      	bx	ip
	...

0801eb38 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801eb38:	b160      	cbz	r0, 801eb54 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801eb3a:	2903      	cmp	r1, #3
 801eb3c:	d818      	bhi.n	801eb70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801eb3e:	e8df f001 	tbb	[pc, r1]
 801eb42:	1902      	.short	0x1902
 801eb44:	1b06      	.short	0x1b06
 801eb46:	4b0e      	ldr	r3, [pc, #56]	@ (801eb80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801eb48:	8818      	ldrh	r0, [r3, #0]
 801eb4a:	4240      	negs	r0, r0
 801eb4c:	4770      	bx	lr
 801eb4e:	4b0c      	ldr	r3, [pc, #48]	@ (801eb80 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801eb50:	8818      	ldrh	r0, [r3, #0]
 801eb52:	4770      	bx	lr
 801eb54:	2903      	cmp	r1, #3
 801eb56:	d80b      	bhi.n	801eb70 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801eb58:	a301      	add	r3, pc, #4	@ (adr r3, 801eb60 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801eb5a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801eb5e:	bf00      	nop
 801eb60:	0801eb75 	.word	0x0801eb75
 801eb64:	0801eb4f 	.word	0x0801eb4f
 801eb68:	0801eb79 	.word	0x0801eb79
 801eb6c:	0801eb47 	.word	0x0801eb47
 801eb70:	2000      	movs	r0, #0
 801eb72:	4770      	bx	lr
 801eb74:	2001      	movs	r0, #1
 801eb76:	4770      	bx	lr
 801eb78:	f04f 30ff 	mov.w	r0, #4294967295
 801eb7c:	4770      	bx	lr
 801eb7e:	bf00      	nop
 801eb80:	24025e1a 	.word	0x24025e1a

0801eb84 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801eb84:	b160      	cbz	r0, 801eba0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801eb86:	2903      	cmp	r1, #3
 801eb88:	d818      	bhi.n	801ebbc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801eb8a:	e8df f001 	tbb	[pc, r1]
 801eb8e:	0219      	.short	0x0219
 801eb90:	051b      	.short	0x051b
 801eb92:	4b0e      	ldr	r3, [pc, #56]	@ (801ebcc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801eb94:	8818      	ldrh	r0, [r3, #0]
 801eb96:	4770      	bx	lr
 801eb98:	4b0c      	ldr	r3, [pc, #48]	@ (801ebcc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801eb9a:	8818      	ldrh	r0, [r3, #0]
 801eb9c:	4240      	negs	r0, r0
 801eb9e:	4770      	bx	lr
 801eba0:	2903      	cmp	r1, #3
 801eba2:	d80b      	bhi.n	801ebbc <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801eba4:	a301      	add	r3, pc, #4	@ (adr r3, 801ebac <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801eba6:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801ebaa:	bf00      	nop
 801ebac:	0801eb93 	.word	0x0801eb93
 801ebb0:	0801ebc5 	.word	0x0801ebc5
 801ebb4:	0801eb99 	.word	0x0801eb99
 801ebb8:	0801ebc1 	.word	0x0801ebc1
 801ebbc:	2000      	movs	r0, #0
 801ebbe:	4770      	bx	lr
 801ebc0:	2001      	movs	r0, #1
 801ebc2:	4770      	bx	lr
 801ebc4:	f04f 30ff 	mov.w	r0, #4294967295
 801ebc8:	4770      	bx	lr
 801ebca:	bf00      	nop
 801ebcc:	24025e1a 	.word	0x24025e1a

0801ebd0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801ebd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ebd4:	b097      	sub	sp, #92	@ 0x5c
 801ebd6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ebd8:	a912      	add	r1, sp, #72	@ 0x48
 801ebda:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801ebde:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801ebe2:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801ebe6:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801ebea:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801ebee:	e881 000c 	stmia.w	r1, {r2, r3}
 801ebf2:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801ebf6:	930a      	str	r3, [sp, #40]	@ 0x28
 801ebf8:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801ebfc:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801ec00:	9311      	str	r3, [sp, #68]	@ 0x44
 801ec02:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801ec06:	798d      	ldrb	r5, [r1, #6]
 801ec08:	930c      	str	r3, [sp, #48]	@ 0x30
 801ec0a:	7b4b      	ldrb	r3, [r1, #13]
 801ec0c:	0158      	lsls	r0, r3, #5
 801ec0e:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801ec12:	4328      	orrs	r0, r5
 801ec14:	9009      	str	r0, [sp, #36]	@ 0x24
 801ec16:	f000 817c 	beq.w	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ec1a:	011b      	lsls	r3, r3, #4
 801ec1c:	79c8      	ldrb	r0, [r1, #7]
 801ec1e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ec22:	4303      	orrs	r3, r0
 801ec24:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec26:	f000 8174 	beq.w	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ec2a:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ec2e:	b29b      	uxth	r3, r3
 801ec30:	2f00      	cmp	r7, #0
 801ec32:	f000 8116 	beq.w	801ee62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801ec36:	1aff      	subs	r7, r7, r3
 801ec38:	b2bf      	uxth	r7, r7
 801ec3a:	043b      	lsls	r3, r7, #16
 801ec3c:	d502      	bpl.n	801ec44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ec3e:	1bf6      	subs	r6, r6, r7
 801ec40:	2700      	movs	r7, #0
 801ec42:	b236      	sxth	r6, r6
 801ec44:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ec48:	a812      	add	r0, sp, #72	@ 0x48
 801ec4a:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ec4e:	428e      	cmp	r6, r1
 801ec50:	b28b      	uxth	r3, r1
 801ec52:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801ec56:	bfbf      	itttt	lt
 801ec58:	18ff      	addlt	r7, r7, r3
 801ec5a:	1bbe      	sublt	r6, r7, r6
 801ec5c:	b2b7      	uxthlt	r7, r6
 801ec5e:	460e      	movlt	r6, r1
 801ec60:	8891      	ldrh	r1, [r2, #4]
 801ec62:	440b      	add	r3, r1
 801ec64:	4631      	mov	r1, r6
 801ec66:	b21b      	sxth	r3, r3
 801ec68:	9310      	str	r3, [sp, #64]	@ 0x40
 801ec6a:	88d3      	ldrh	r3, [r2, #6]
 801ec6c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec6e:	449a      	add	sl, r3
 801ec70:	fa0f f38a 	sxth.w	r3, sl
 801ec74:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801ec78:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ec7a:	4bb5      	ldr	r3, [pc, #724]	@ (801ef50 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801ec7c:	f893 b000 	ldrb.w	fp, [r3]
 801ec80:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ec84:	f1dc 0300 	rsbs	r3, ip, #0
 801ec88:	eb43 030c 	adc.w	r3, r3, ip
 801ec8c:	930d      	str	r3, [sp, #52]	@ 0x34
 801ec8e:	464b      	mov	r3, r9
 801ec90:	f7f7 fc9f 	bl	80165d2 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ec94:	4631      	mov	r1, r6
 801ec96:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801ec9a:	464b      	mov	r3, r9
 801ec9c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec9e:	a812      	add	r0, sp, #72	@ 0x48
 801eca0:	f7f7 fcb4 	bl	801660c <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801eca4:	a916      	add	r1, sp, #88	@ 0x58
 801eca6:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ecaa:	a815      	add	r0, sp, #84	@ 0x54
 801ecac:	f7f7 fdda 	bl	8016864 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ecb0:	f1b9 0f00 	cmp.w	r9, #0
 801ecb4:	f040 80d8 	bne.w	801ee68 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801ecb8:	f1bb 0f01 	cmp.w	fp, #1
 801ecbc:	f040 80dc 	bne.w	801ee78 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801ecc0:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ecc2:	b153      	cbz	r3, 801ecda <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801ecc4:	2508      	movs	r5, #8
 801ecc6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ecc8:	fb95 f3f8 	sdiv	r3, r5, r8
 801eccc:	1e5d      	subs	r5, r3, #1
 801ecce:	4415      	add	r5, r2
 801ecd0:	fb95 f5f3 	sdiv	r5, r5, r3
 801ecd4:	fb15 f503 	smulbb	r5, r5, r3
 801ecd8:	b2ad      	uxth	r5, r5
 801ecda:	b907      	cbnz	r7, 801ecde <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801ecdc:	b16c      	cbz	r4, 801ecfa <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801ecde:	fb04 7305 	mla	r3, r4, r5, r7
 801ece2:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801ece4:	ebaa 0a04 	sub.w	sl, sl, r4
 801ece8:	fb08 f303 	mul.w	r3, r8, r3
 801ecec:	fa1f fa8a 	uxth.w	sl, sl
 801ecf0:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801ecf4:	f003 0407 	and.w	r4, r3, #7
 801ecf8:	9226      	str	r2, [sp, #152]	@ 0x98
 801ecfa:	4649      	mov	r1, r9
 801ecfc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ecfe:	f7ff ff1b 	bl	801eb38 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801ed02:	4683      	mov	fp, r0
 801ed04:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ed06:	f7ff ff3d 	bl	801eb84 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801ed0a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ed0c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ed0e:	4681      	mov	r9, r0
 801ed10:	1a9b      	subs	r3, r3, r2
 801ed12:	459a      	cmp	sl, r3
 801ed14:	bfa8      	it	ge
 801ed16:	469a      	movge	sl, r3
 801ed18:	f1ba 0f00 	cmp.w	sl, #0
 801ed1c:	f340 80f9 	ble.w	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ed20:	1bf6      	subs	r6, r6, r7
 801ed22:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ed24:	1b9e      	subs	r6, r3, r6
 801ed26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ed28:	429e      	cmp	r6, r3
 801ed2a:	bfd4      	ite	le
 801ed2c:	ebc7 0706 	rsble	r7, r7, r6
 801ed30:	ebc7 0703 	rsbgt	r7, r7, r3
 801ed34:	2f00      	cmp	r7, #0
 801ed36:	f340 80ec 	ble.w	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ed3a:	1bed      	subs	r5, r5, r7
 801ed3c:	fb08 f305 	mul.w	r3, r8, r5
 801ed40:	930d      	str	r3, [sp, #52]	@ 0x34
 801ed42:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ed44:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ed48:	930e      	str	r3, [sp, #56]	@ 0x38
 801ed4a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ed4c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ed50:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ed52:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ed54:	b2db      	uxtb	r3, r3
 801ed56:	9310      	str	r3, [sp, #64]	@ 0x40
 801ed58:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ed5a:	2b00      	cmp	r3, #0
 801ed5c:	f040 80de 	bne.w	801ef1c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801ed60:	4b7c      	ldr	r3, [pc, #496]	@ (801ef54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801ed62:	6818      	ldr	r0, [r3, #0]
 801ed64:	6803      	ldr	r3, [r0, #0]
 801ed66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ed68:	4798      	blx	r3
 801ed6a:	2301      	movs	r3, #1
 801ed6c:	4a7a      	ldr	r2, [pc, #488]	@ (801ef58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ed6e:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801ed72:	fb07 9b1b 	mls	fp, r7, fp, r9
 801ed76:	fa03 f308 	lsl.w	r3, r3, r8
 801ed7a:	8811      	ldrh	r1, [r2, #0]
 801ed7c:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801ed80:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ed84:	3b01      	subs	r3, #1
 801ed86:	fb06 bb07 	mla	fp, r6, r7, fp
 801ed8a:	b2db      	uxtb	r3, r3
 801ed8c:	930a      	str	r3, [sp, #40]	@ 0x28
 801ed8e:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801ed92:	fb01 2303 	mla	r3, r1, r3, r2
 801ed96:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ed9a:	18c3      	adds	r3, r0, r3
 801ed9c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ed9e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801eda0:	781a      	ldrb	r2, [r3, #0]
 801eda2:	4122      	asrs	r2, r4
 801eda4:	b2d2      	uxtb	r2, r2
 801eda6:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801edaa:	f0c0 80d7 	bcc.w	801ef5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801edae:	46be      	mov	lr, r7
 801edb0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801edb2:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801edb6:	f0c0 80ba 	bcc.w	801ef2e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801edba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801edbc:	4013      	ands	r3, r2
 801edbe:	d041      	beq.n	801ee44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801edc0:	20ff      	movs	r0, #255	@ 0xff
 801edc2:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801edc4:	fb90 f5f5 	sdiv	r5, r0, r5
 801edc8:	436b      	muls	r3, r5
 801edca:	2bfe      	cmp	r3, #254	@ 0xfe
 801edcc:	dd03      	ble.n	801edd6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801edce:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801edd0:	4285      	cmp	r5, r0
 801edd2:	f000 80a5 	beq.w	801ef20 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801edd6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801edd8:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801edda:	fb15 f303 	smulbb	r3, r5, r3
 801edde:	b29b      	uxth	r3, r3
 801ede0:	1c5d      	adds	r5, r3, #1
 801ede2:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801ede6:	780d      	ldrb	r5, [r1, #0]
 801ede8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801edec:	fa1f fc83 	uxth.w	ip, r3
 801edf0:	43db      	mvns	r3, r3
 801edf2:	fb10 f90c 	smulbb	r9, r0, ip
 801edf6:	b2db      	uxtb	r3, r3
 801edf8:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801edfa:	fb05 9503 	mla	r5, r5, r3, r9
 801edfe:	b2ad      	uxth	r5, r5
 801ee00:	f105 0901 	add.w	r9, r5, #1
 801ee04:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee08:	fb10 f90c 	smulbb	r9, r0, ip
 801ee0c:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801ee0e:	122d      	asrs	r5, r5, #8
 801ee10:	fb10 fc0c 	smulbb	ip, r0, ip
 801ee14:	700d      	strb	r5, [r1, #0]
 801ee16:	784d      	ldrb	r5, [r1, #1]
 801ee18:	fb05 9503 	mla	r5, r5, r3, r9
 801ee1c:	b2ad      	uxth	r5, r5
 801ee1e:	f105 0901 	add.w	r9, r5, #1
 801ee22:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ee26:	122d      	asrs	r5, r5, #8
 801ee28:	704d      	strb	r5, [r1, #1]
 801ee2a:	788d      	ldrb	r5, [r1, #2]
 801ee2c:	fb05 cc03 	mla	ip, r5, r3, ip
 801ee30:	fa1f fc8c 	uxth.w	ip, ip
 801ee34:	f10c 0301 	add.w	r3, ip, #1
 801ee38:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ee3c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ee40:	f881 c002 	strb.w	ip, [r1, #2]
 801ee44:	4444      	add	r4, r8
 801ee46:	4431      	add	r1, r6
 801ee48:	b2a4      	uxth	r4, r4
 801ee4a:	2c07      	cmp	r4, #7
 801ee4c:	bf89      	itett	hi
 801ee4e:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801ee50:	fa42 f208 	asrls.w	r2, r2, r8
 801ee54:	2400      	movhi	r4, #0
 801ee56:	785a      	ldrbhi	r2, [r3, #1]
 801ee58:	bf8a      	itet	hi
 801ee5a:	3301      	addhi	r3, #1
 801ee5c:	b2d2      	uxtbls	r2, r2
 801ee5e:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801ee60:	e7a7      	b.n	801edb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801ee62:	441e      	add	r6, r3
 801ee64:	b236      	sxth	r6, r6
 801ee66:	e6ed      	b.n	801ec44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ee68:	f1b9 0f01 	cmp.w	r9, #1
 801ee6c:	f47f af28 	bne.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee70:	f1bb 0f01 	cmp.w	fp, #1
 801ee74:	f47f af24 	bne.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ee78:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801ef54 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ee7c:	f8db 0000 	ldr.w	r0, [fp]
 801ee80:	6803      	ldr	r3, [r0, #0]
 801ee82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ee84:	4798      	blx	r3
 801ee86:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801ee8a:	465a      	mov	r2, fp
 801ee8c:	d006      	beq.n	801ee9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ee8e:	f1b8 0f04 	cmp.w	r8, #4
 801ee92:	d141      	bne.n	801ef18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801ee94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ee96:	3300      	adds	r3, #0
 801ee98:	bf18      	it	ne
 801ee9a:	2301      	movne	r3, #1
 801ee9c:	0580      	lsls	r0, r0, #22
 801ee9e:	d566      	bpl.n	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801eea0:	f1b8 0f08 	cmp.w	r8, #8
 801eea4:	d163      	bne.n	801ef6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801eea6:	2b00      	cmp	r3, #0
 801eea8:	bf0c      	ite	eq
 801eeaa:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801eeae:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801eeb2:	2f00      	cmp	r7, #0
 801eeb4:	f47f af04 	bne.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eeb8:	2c00      	cmp	r4, #0
 801eeba:	f47f af01 	bne.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eebe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801eec0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801eec2:	18f3      	adds	r3, r6, r3
 801eec4:	4283      	cmp	r3, r0
 801eec6:	f73f aefb 	bgt.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eeca:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801eecc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801eece:	4403      	add	r3, r0
 801eed0:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801eed2:	4283      	cmp	r3, r0
 801eed4:	f73f aef4 	bgt.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801eed8:	f1b8 0f08 	cmp.w	r8, #8
 801eedc:	6810      	ldr	r0, [r2, #0]
 801eede:	f04f 0600 	mov.w	r6, #0
 801eee2:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801eee6:	bf18      	it	ne
 801eee8:	3501      	addne	r5, #1
 801eeea:	6804      	ldr	r4, [r0, #0]
 801eeec:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801eef0:	bf18      	it	ne
 801eef2:	f025 0501 	bicne.w	r5, r5, #1
 801eef6:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801eefa:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801eefc:	bf18      	it	ne
 801eefe:	b2ad      	uxthne	r5, r5
 801ef00:	9104      	str	r1, [sp, #16]
 801ef02:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ef04:	e9cd 5a00 	strd	r5, sl, [sp]
 801ef08:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801ef0c:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801ef0e:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801ef10:	47a0      	blx	r4
 801ef12:	b017      	add	sp, #92	@ 0x5c
 801ef14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef18:	2300      	movs	r3, #0
 801ef1a:	e7bf      	b.n	801ee9c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ef1c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ef1e:	e724      	b.n	801ed6a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801ef20:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ef22:	700b      	strb	r3, [r1, #0]
 801ef24:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ef26:	704b      	strb	r3, [r1, #1]
 801ef28:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ef2a:	708b      	strb	r3, [r1, #2]
 801ef2c:	e78a      	b.n	801ee44 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ef2e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ef30:	b153      	cbz	r3, 801ef48 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ef32:	441c      	add	r4, r3
 801ef34:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ef36:	b2a4      	uxth	r4, r4
 801ef38:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ef3c:	f004 0407 	and.w	r4, r4, #7
 801ef40:	781a      	ldrb	r2, [r3, #0]
 801ef42:	9326      	str	r3, [sp, #152]	@ 0x98
 801ef44:	4122      	asrs	r2, r4
 801ef46:	b2d2      	uxtb	r2, r2
 801ef48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ef4a:	445b      	add	r3, fp
 801ef4c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ef4e:	e72a      	b.n	801eda6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801ef50:	24025e18 	.word	0x24025e18
 801ef54:	24025e20 	.word	0x24025e20
 801ef58:	24025e1a 	.word	0x24025e1a
 801ef5c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ef5e:	2b00      	cmp	r3, #0
 801ef60:	d1d7      	bne.n	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ef62:	4b06      	ldr	r3, [pc, #24]	@ (801ef7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801ef64:	6818      	ldr	r0, [r3, #0]
 801ef66:	6803      	ldr	r3, [r0, #0]
 801ef68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ef6a:	4798      	blx	r3
 801ef6c:	e7d1      	b.n	801ef12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ef6e:	2b00      	cmp	r3, #0
 801ef70:	f43f aea6 	beq.w	801ecc0 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ef74:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ef78:	e79b      	b.n	801eeb2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801ef7a:	bf00      	nop
 801ef7c:	24025e20 	.word	0x24025e20

0801ef80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ef80:	b538      	push	{r3, r4, r5, lr}
 801ef82:	4c15      	ldr	r4, [pc, #84]	@ (801efd8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ef84:	4605      	mov	r5, r0
 801ef86:	7823      	ldrb	r3, [r4, #0]
 801ef88:	f3bf 8f5b 	dmb	ish
 801ef8c:	07da      	lsls	r2, r3, #31
 801ef8e:	d40b      	bmi.n	801efa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ef90:	4620      	mov	r0, r4
 801ef92:	f007 f841 	bl	8026018 <__cxa_guard_acquire>
 801ef96:	b138      	cbz	r0, 801efa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ef98:	4620      	mov	r0, r4
 801ef9a:	f007 f849 	bl	8026030 <__cxa_guard_release>
 801ef9e:	4a0f      	ldr	r2, [pc, #60]	@ (801efdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801efa0:	490f      	ldr	r1, [pc, #60]	@ (801efe0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801efa2:	4810      	ldr	r0, [pc, #64]	@ (801efe4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801efa4:	f007 f831 	bl	802600a <__aeabi_atexit>
 801efa8:	4c0f      	ldr	r4, [pc, #60]	@ (801efe8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801efaa:	7823      	ldrb	r3, [r4, #0]
 801efac:	f3bf 8f5b 	dmb	ish
 801efb0:	07db      	lsls	r3, r3, #31
 801efb2:	d40b      	bmi.n	801efcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801efb4:	4620      	mov	r0, r4
 801efb6:	f007 f82f 	bl	8026018 <__cxa_guard_acquire>
 801efba:	b138      	cbz	r0, 801efcc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801efbc:	4620      	mov	r0, r4
 801efbe:	f007 f837 	bl	8026030 <__cxa_guard_release>
 801efc2:	4a06      	ldr	r2, [pc, #24]	@ (801efdc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801efc4:	4909      	ldr	r1, [pc, #36]	@ (801efec <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801efc6:	480a      	ldr	r0, [pc, #40]	@ (801eff0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801efc8:	f007 f81f 	bl	802600a <__aeabi_atexit>
 801efcc:	4b05      	ldr	r3, [pc, #20]	@ (801efe4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801efce:	616b      	str	r3, [r5, #20]
 801efd0:	4b07      	ldr	r3, [pc, #28]	@ (801eff0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801efd2:	61ab      	str	r3, [r5, #24]
 801efd4:	bd38      	pop	{r3, r4, r5, pc}
 801efd6:	bf00      	nop
 801efd8:	24025f04 	.word	0x24025f04
 801efdc:	24000000 	.word	0x24000000
 801efe0:	0801c271 	.word	0x0801c271
 801efe4:	240000f8 	.word	0x240000f8
 801efe8:	24025f08 	.word	0x24025f08
 801efec:	0801c26f 	.word	0x0801c26f
 801eff0:	240000fc 	.word	0x240000fc

0801eff4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801eff4:	b538      	push	{r3, r4, r5, lr}
 801eff6:	4c15      	ldr	r4, [pc, #84]	@ (801f04c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801eff8:	4605      	mov	r5, r0
 801effa:	7823      	ldrb	r3, [r4, #0]
 801effc:	f3bf 8f5b 	dmb	ish
 801f000:	07da      	lsls	r2, r3, #31
 801f002:	d40b      	bmi.n	801f01c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f004:	4620      	mov	r0, r4
 801f006:	f007 f807 	bl	8026018 <__cxa_guard_acquire>
 801f00a:	b138      	cbz	r0, 801f01c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801f00c:	4620      	mov	r0, r4
 801f00e:	f007 f80f 	bl	8026030 <__cxa_guard_release>
 801f012:	4a0f      	ldr	r2, [pc, #60]	@ (801f050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f014:	490f      	ldr	r1, [pc, #60]	@ (801f054 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801f016:	4810      	ldr	r0, [pc, #64]	@ (801f058 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f018:	f006 fff7 	bl	802600a <__aeabi_atexit>
 801f01c:	4c0f      	ldr	r4, [pc, #60]	@ (801f05c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801f01e:	7823      	ldrb	r3, [r4, #0]
 801f020:	f3bf 8f5b 	dmb	ish
 801f024:	07db      	lsls	r3, r3, #31
 801f026:	d40b      	bmi.n	801f040 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f028:	4620      	mov	r0, r4
 801f02a:	f006 fff5 	bl	8026018 <__cxa_guard_acquire>
 801f02e:	b138      	cbz	r0, 801f040 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801f030:	4620      	mov	r0, r4
 801f032:	f006 fffd 	bl	8026030 <__cxa_guard_release>
 801f036:	4a06      	ldr	r2, [pc, #24]	@ (801f050 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801f038:	4909      	ldr	r1, [pc, #36]	@ (801f060 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801f03a:	480a      	ldr	r0, [pc, #40]	@ (801f064 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f03c:	f006 ffe5 	bl	802600a <__aeabi_atexit>
 801f040:	4b05      	ldr	r3, [pc, #20]	@ (801f058 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801f042:	60eb      	str	r3, [r5, #12]
 801f044:	4b07      	ldr	r3, [pc, #28]	@ (801f064 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801f046:	612b      	str	r3, [r5, #16]
 801f048:	bd38      	pop	{r3, r4, r5, pc}
 801f04a:	bf00      	nop
 801f04c:	24025ee4 	.word	0x24025ee4
 801f050:	24000000 	.word	0x24000000
 801f054:	0801c275 	.word	0x0801c275
 801f058:	240000d8 	.word	0x240000d8
 801f05c:	24025ee8 	.word	0x24025ee8
 801f060:	0801c273 	.word	0x0801c273
 801f064:	240000dc 	.word	0x240000dc

0801f068 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801f068:	b510      	push	{r4, lr}
 801f06a:	4604      	mov	r4, r0
 801f06c:	f7ff ff88 	bl	801ef80 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801f070:	4620      	mov	r0, r4
 801f072:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f076:	f7ff bfbd 	b.w	801eff4 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801f07c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801f07c:	b538      	push	{r3, r4, r5, lr}
 801f07e:	4c15      	ldr	r4, [pc, #84]	@ (801f0d4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801f080:	4605      	mov	r5, r0
 801f082:	7823      	ldrb	r3, [r4, #0]
 801f084:	f3bf 8f5b 	dmb	ish
 801f088:	07da      	lsls	r2, r3, #31
 801f08a:	d40b      	bmi.n	801f0a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f08c:	4620      	mov	r0, r4
 801f08e:	f006 ffc3 	bl	8026018 <__cxa_guard_acquire>
 801f092:	b138      	cbz	r0, 801f0a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801f094:	4620      	mov	r0, r4
 801f096:	f006 ffcb 	bl	8026030 <__cxa_guard_release>
 801f09a:	4a0f      	ldr	r2, [pc, #60]	@ (801f0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f09c:	490f      	ldr	r1, [pc, #60]	@ (801f0dc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801f09e:	4810      	ldr	r0, [pc, #64]	@ (801f0e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f0a0:	f006 ffb3 	bl	802600a <__aeabi_atexit>
 801f0a4:	4c0f      	ldr	r4, [pc, #60]	@ (801f0e4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801f0a6:	7823      	ldrb	r3, [r4, #0]
 801f0a8:	f3bf 8f5b 	dmb	ish
 801f0ac:	07db      	lsls	r3, r3, #31
 801f0ae:	d40b      	bmi.n	801f0c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f0b0:	4620      	mov	r0, r4
 801f0b2:	f006 ffb1 	bl	8026018 <__cxa_guard_acquire>
 801f0b6:	b138      	cbz	r0, 801f0c8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801f0b8:	4620      	mov	r0, r4
 801f0ba:	f006 ffb9 	bl	8026030 <__cxa_guard_release>
 801f0be:	4a06      	ldr	r2, [pc, #24]	@ (801f0d8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801f0c0:	4909      	ldr	r1, [pc, #36]	@ (801f0e8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801f0c2:	480a      	ldr	r0, [pc, #40]	@ (801f0ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f0c4:	f006 ffa1 	bl	802600a <__aeabi_atexit>
 801f0c8:	4b05      	ldr	r3, [pc, #20]	@ (801f0e0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801f0ca:	626b      	str	r3, [r5, #36]	@ 0x24
 801f0cc:	4b07      	ldr	r3, [pc, #28]	@ (801f0ec <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801f0ce:	62ab      	str	r3, [r5, #40]	@ 0x28
 801f0d0:	bd38      	pop	{r3, r4, r5, pc}
 801f0d2:	bf00      	nop
 801f0d4:	24025f0c 	.word	0x24025f0c
 801f0d8:	24000000 	.word	0x24000000
 801f0dc:	0801c269 	.word	0x0801c269
 801f0e0:	24000100 	.word	0x24000100
 801f0e4:	24025f10 	.word	0x24025f10
 801f0e8:	0801c267 	.word	0x0801c267
 801f0ec:	24000104 	.word	0x24000104

0801f0f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801f0f0:	b538      	push	{r3, r4, r5, lr}
 801f0f2:	4c15      	ldr	r4, [pc, #84]	@ (801f148 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801f0f4:	4605      	mov	r5, r0
 801f0f6:	7823      	ldrb	r3, [r4, #0]
 801f0f8:	f3bf 8f5b 	dmb	ish
 801f0fc:	07da      	lsls	r2, r3, #31
 801f0fe:	d40b      	bmi.n	801f118 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f100:	4620      	mov	r0, r4
 801f102:	f006 ff89 	bl	8026018 <__cxa_guard_acquire>
 801f106:	b138      	cbz	r0, 801f118 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801f108:	4620      	mov	r0, r4
 801f10a:	f006 ff91 	bl	8026030 <__cxa_guard_release>
 801f10e:	4a0f      	ldr	r2, [pc, #60]	@ (801f14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f110:	490f      	ldr	r1, [pc, #60]	@ (801f150 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801f112:	4810      	ldr	r0, [pc, #64]	@ (801f154 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f114:	f006 ff79 	bl	802600a <__aeabi_atexit>
 801f118:	4c0f      	ldr	r4, [pc, #60]	@ (801f158 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801f11a:	7823      	ldrb	r3, [r4, #0]
 801f11c:	f3bf 8f5b 	dmb	ish
 801f120:	07db      	lsls	r3, r3, #31
 801f122:	d40b      	bmi.n	801f13c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f124:	4620      	mov	r0, r4
 801f126:	f006 ff77 	bl	8026018 <__cxa_guard_acquire>
 801f12a:	b138      	cbz	r0, 801f13c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801f12c:	4620      	mov	r0, r4
 801f12e:	f006 ff7f 	bl	8026030 <__cxa_guard_release>
 801f132:	4a06      	ldr	r2, [pc, #24]	@ (801f14c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801f134:	4909      	ldr	r1, [pc, #36]	@ (801f15c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801f136:	480a      	ldr	r0, [pc, #40]	@ (801f160 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f138:	f006 ff67 	bl	802600a <__aeabi_atexit>
 801f13c:	4b05      	ldr	r3, [pc, #20]	@ (801f154 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801f13e:	61eb      	str	r3, [r5, #28]
 801f140:	4b07      	ldr	r3, [pc, #28]	@ (801f160 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801f142:	622b      	str	r3, [r5, #32]
 801f144:	bd38      	pop	{r3, r4, r5, pc}
 801f146:	bf00      	nop
 801f148:	24025eec 	.word	0x24025eec
 801f14c:	24000000 	.word	0x24000000
 801f150:	0801c26d 	.word	0x0801c26d
 801f154:	240000e0 	.word	0x240000e0
 801f158:	24025ef0 	.word	0x24025ef0
 801f15c:	0801c26b 	.word	0x0801c26b
 801f160:	240000e4 	.word	0x240000e4

0801f164 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801f164:	b510      	push	{r4, lr}
 801f166:	4604      	mov	r4, r0
 801f168:	f7ff ff88 	bl	801f07c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801f16c:	4620      	mov	r0, r4
 801f16e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f172:	f7ff bfbd 	b.w	801f0f0 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801f178 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801f178:	b538      	push	{r3, r4, r5, lr}
 801f17a:	4c15      	ldr	r4, [pc, #84]	@ (801f1d0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801f17c:	4605      	mov	r5, r0
 801f17e:	7823      	ldrb	r3, [r4, #0]
 801f180:	f3bf 8f5b 	dmb	ish
 801f184:	07da      	lsls	r2, r3, #31
 801f186:	d40b      	bmi.n	801f1a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f188:	4620      	mov	r0, r4
 801f18a:	f006 ff45 	bl	8026018 <__cxa_guard_acquire>
 801f18e:	b138      	cbz	r0, 801f1a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801f190:	4620      	mov	r0, r4
 801f192:	f006 ff4d 	bl	8026030 <__cxa_guard_release>
 801f196:	4a0f      	ldr	r2, [pc, #60]	@ (801f1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f198:	490f      	ldr	r1, [pc, #60]	@ (801f1d8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801f19a:	4810      	ldr	r0, [pc, #64]	@ (801f1dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f19c:	f006 ff35 	bl	802600a <__aeabi_atexit>
 801f1a0:	4c0f      	ldr	r4, [pc, #60]	@ (801f1e0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801f1a2:	7823      	ldrb	r3, [r4, #0]
 801f1a4:	f3bf 8f5b 	dmb	ish
 801f1a8:	07db      	lsls	r3, r3, #31
 801f1aa:	d40b      	bmi.n	801f1c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f1ac:	4620      	mov	r0, r4
 801f1ae:	f006 ff33 	bl	8026018 <__cxa_guard_acquire>
 801f1b2:	b138      	cbz	r0, 801f1c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801f1b4:	4620      	mov	r0, r4
 801f1b6:	f006 ff3b 	bl	8026030 <__cxa_guard_release>
 801f1ba:	4a06      	ldr	r2, [pc, #24]	@ (801f1d4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801f1bc:	4909      	ldr	r1, [pc, #36]	@ (801f1e4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801f1be:	480a      	ldr	r0, [pc, #40]	@ (801f1e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f1c0:	f006 ff23 	bl	802600a <__aeabi_atexit>
 801f1c4:	4b05      	ldr	r3, [pc, #20]	@ (801f1dc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801f1c6:	636b      	str	r3, [r5, #52]	@ 0x34
 801f1c8:	4b07      	ldr	r3, [pc, #28]	@ (801f1e8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801f1ca:	63ab      	str	r3, [r5, #56]	@ 0x38
 801f1cc:	bd38      	pop	{r3, r4, r5, pc}
 801f1ce:	bf00      	nop
 801f1d0:	24025ef4 	.word	0x24025ef4
 801f1d4:	24000000 	.word	0x24000000
 801f1d8:	0801c261 	.word	0x0801c261
 801f1dc:	240000e8 	.word	0x240000e8
 801f1e0:	24025ef8 	.word	0x24025ef8
 801f1e4:	0801c25f 	.word	0x0801c25f
 801f1e8:	240000ec 	.word	0x240000ec

0801f1ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801f1ec:	b538      	push	{r3, r4, r5, lr}
 801f1ee:	4c15      	ldr	r4, [pc, #84]	@ (801f244 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801f1f0:	4605      	mov	r5, r0
 801f1f2:	7823      	ldrb	r3, [r4, #0]
 801f1f4:	f3bf 8f5b 	dmb	ish
 801f1f8:	07da      	lsls	r2, r3, #31
 801f1fa:	d40b      	bmi.n	801f214 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f1fc:	4620      	mov	r0, r4
 801f1fe:	f006 ff0b 	bl	8026018 <__cxa_guard_acquire>
 801f202:	b138      	cbz	r0, 801f214 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801f204:	4620      	mov	r0, r4
 801f206:	f006 ff13 	bl	8026030 <__cxa_guard_release>
 801f20a:	4a0f      	ldr	r2, [pc, #60]	@ (801f248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f20c:	490f      	ldr	r1, [pc, #60]	@ (801f24c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801f20e:	4810      	ldr	r0, [pc, #64]	@ (801f250 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f210:	f006 fefb 	bl	802600a <__aeabi_atexit>
 801f214:	4c0f      	ldr	r4, [pc, #60]	@ (801f254 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801f216:	7823      	ldrb	r3, [r4, #0]
 801f218:	f3bf 8f5b 	dmb	ish
 801f21c:	07db      	lsls	r3, r3, #31
 801f21e:	d40b      	bmi.n	801f238 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f220:	4620      	mov	r0, r4
 801f222:	f006 fef9 	bl	8026018 <__cxa_guard_acquire>
 801f226:	b138      	cbz	r0, 801f238 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801f228:	4620      	mov	r0, r4
 801f22a:	f006 ff01 	bl	8026030 <__cxa_guard_release>
 801f22e:	4a06      	ldr	r2, [pc, #24]	@ (801f248 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801f230:	4909      	ldr	r1, [pc, #36]	@ (801f258 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801f232:	480a      	ldr	r0, [pc, #40]	@ (801f25c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f234:	f006 fee9 	bl	802600a <__aeabi_atexit>
 801f238:	4b05      	ldr	r3, [pc, #20]	@ (801f250 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801f23a:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801f23c:	4b07      	ldr	r3, [pc, #28]	@ (801f25c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801f23e:	632b      	str	r3, [r5, #48]	@ 0x30
 801f240:	bd38      	pop	{r3, r4, r5, pc}
 801f242:	bf00      	nop
 801f244:	24025ecc 	.word	0x24025ecc
 801f248:	24000000 	.word	0x24000000
 801f24c:	0801c265 	.word	0x0801c265
 801f250:	240000c0 	.word	0x240000c0
 801f254:	24025ed0 	.word	0x24025ed0
 801f258:	0801c263 	.word	0x0801c263
 801f25c:	240000c4 	.word	0x240000c4

0801f260 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801f260:	b510      	push	{r4, lr}
 801f262:	4604      	mov	r4, r0
 801f264:	f7ff ff88 	bl	801f178 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801f268:	4620      	mov	r0, r4
 801f26a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f26e:	f7ff bfbd 	b.w	801f1ec <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801f274 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801f274:	b538      	push	{r3, r4, r5, lr}
 801f276:	4c15      	ldr	r4, [pc, #84]	@ (801f2cc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801f278:	4605      	mov	r5, r0
 801f27a:	7823      	ldrb	r3, [r4, #0]
 801f27c:	f3bf 8f5b 	dmb	ish
 801f280:	07da      	lsls	r2, r3, #31
 801f282:	d40b      	bmi.n	801f29c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f284:	4620      	mov	r0, r4
 801f286:	f006 fec7 	bl	8026018 <__cxa_guard_acquire>
 801f28a:	b138      	cbz	r0, 801f29c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801f28c:	4620      	mov	r0, r4
 801f28e:	f006 fecf 	bl	8026030 <__cxa_guard_release>
 801f292:	4a0f      	ldr	r2, [pc, #60]	@ (801f2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f294:	490f      	ldr	r1, [pc, #60]	@ (801f2d4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801f296:	4810      	ldr	r0, [pc, #64]	@ (801f2d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f298:	f006 feb7 	bl	802600a <__aeabi_atexit>
 801f29c:	4c0f      	ldr	r4, [pc, #60]	@ (801f2dc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801f29e:	7823      	ldrb	r3, [r4, #0]
 801f2a0:	f3bf 8f5b 	dmb	ish
 801f2a4:	07db      	lsls	r3, r3, #31
 801f2a6:	d40b      	bmi.n	801f2c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f2a8:	4620      	mov	r0, r4
 801f2aa:	f006 feb5 	bl	8026018 <__cxa_guard_acquire>
 801f2ae:	b138      	cbz	r0, 801f2c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801f2b0:	4620      	mov	r0, r4
 801f2b2:	f006 febd 	bl	8026030 <__cxa_guard_release>
 801f2b6:	4a06      	ldr	r2, [pc, #24]	@ (801f2d0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801f2b8:	4909      	ldr	r1, [pc, #36]	@ (801f2e0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801f2ba:	480a      	ldr	r0, [pc, #40]	@ (801f2e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f2bc:	f006 fea5 	bl	802600a <__aeabi_atexit>
 801f2c0:	4b05      	ldr	r3, [pc, #20]	@ (801f2d8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801f2c2:	646b      	str	r3, [r5, #68]	@ 0x44
 801f2c4:	4b07      	ldr	r3, [pc, #28]	@ (801f2e4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801f2c6:	64ab      	str	r3, [r5, #72]	@ 0x48
 801f2c8:	bd38      	pop	{r3, r4, r5, pc}
 801f2ca:	bf00      	nop
 801f2cc:	24025efc 	.word	0x24025efc
 801f2d0:	24000000 	.word	0x24000000
 801f2d4:	0801c259 	.word	0x0801c259
 801f2d8:	240000f0 	.word	0x240000f0
 801f2dc:	24025f00 	.word	0x24025f00
 801f2e0:	0801c257 	.word	0x0801c257
 801f2e4:	240000f4 	.word	0x240000f4

0801f2e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801f2e8:	b538      	push	{r3, r4, r5, lr}
 801f2ea:	4c15      	ldr	r4, [pc, #84]	@ (801f340 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801f2ec:	4605      	mov	r5, r0
 801f2ee:	7823      	ldrb	r3, [r4, #0]
 801f2f0:	f3bf 8f5b 	dmb	ish
 801f2f4:	07da      	lsls	r2, r3, #31
 801f2f6:	d40b      	bmi.n	801f310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f2f8:	4620      	mov	r0, r4
 801f2fa:	f006 fe8d 	bl	8026018 <__cxa_guard_acquire>
 801f2fe:	b138      	cbz	r0, 801f310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801f300:	4620      	mov	r0, r4
 801f302:	f006 fe95 	bl	8026030 <__cxa_guard_release>
 801f306:	4a0f      	ldr	r2, [pc, #60]	@ (801f344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f308:	490f      	ldr	r1, [pc, #60]	@ (801f348 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801f30a:	4810      	ldr	r0, [pc, #64]	@ (801f34c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f30c:	f006 fe7d 	bl	802600a <__aeabi_atexit>
 801f310:	4c0f      	ldr	r4, [pc, #60]	@ (801f350 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801f312:	7823      	ldrb	r3, [r4, #0]
 801f314:	f3bf 8f5b 	dmb	ish
 801f318:	07db      	lsls	r3, r3, #31
 801f31a:	d40b      	bmi.n	801f334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f31c:	4620      	mov	r0, r4
 801f31e:	f006 fe7b 	bl	8026018 <__cxa_guard_acquire>
 801f322:	b138      	cbz	r0, 801f334 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801f324:	4620      	mov	r0, r4
 801f326:	f006 fe83 	bl	8026030 <__cxa_guard_release>
 801f32a:	4a06      	ldr	r2, [pc, #24]	@ (801f344 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801f32c:	4909      	ldr	r1, [pc, #36]	@ (801f354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801f32e:	480a      	ldr	r0, [pc, #40]	@ (801f358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f330:	f006 fe6b 	bl	802600a <__aeabi_atexit>
 801f334:	4b05      	ldr	r3, [pc, #20]	@ (801f34c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801f336:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801f338:	4b07      	ldr	r3, [pc, #28]	@ (801f358 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801f33a:	642b      	str	r3, [r5, #64]	@ 0x40
 801f33c:	bd38      	pop	{r3, r4, r5, pc}
 801f33e:	bf00      	nop
 801f340:	24025edc 	.word	0x24025edc
 801f344:	24000000 	.word	0x24000000
 801f348:	0801c25d 	.word	0x0801c25d
 801f34c:	240000d0 	.word	0x240000d0
 801f350:	24025ee0 	.word	0x24025ee0
 801f354:	0801c25b 	.word	0x0801c25b
 801f358:	240000d4 	.word	0x240000d4

0801f35c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801f35c:	b510      	push	{r4, lr}
 801f35e:	4604      	mov	r4, r0
 801f360:	f7ff ff88 	bl	801f274 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801f364:	4620      	mov	r0, r4
 801f366:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f36a:	f7ff bfbd 	b.w	801f2e8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801f370 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801f370:	b538      	push	{r3, r4, r5, lr}
 801f372:	4c15      	ldr	r4, [pc, #84]	@ (801f3c8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801f374:	4605      	mov	r5, r0
 801f376:	7823      	ldrb	r3, [r4, #0]
 801f378:	f3bf 8f5b 	dmb	ish
 801f37c:	07da      	lsls	r2, r3, #31
 801f37e:	d40b      	bmi.n	801f398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f380:	4620      	mov	r0, r4
 801f382:	f006 fe49 	bl	8026018 <__cxa_guard_acquire>
 801f386:	b138      	cbz	r0, 801f398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801f388:	4620      	mov	r0, r4
 801f38a:	f006 fe51 	bl	8026030 <__cxa_guard_release>
 801f38e:	4a0f      	ldr	r2, [pc, #60]	@ (801f3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f390:	490f      	ldr	r1, [pc, #60]	@ (801f3d0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801f392:	4810      	ldr	r0, [pc, #64]	@ (801f3d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f394:	f006 fe39 	bl	802600a <__aeabi_atexit>
 801f398:	4c0f      	ldr	r4, [pc, #60]	@ (801f3d8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801f39a:	7823      	ldrb	r3, [r4, #0]
 801f39c:	f3bf 8f5b 	dmb	ish
 801f3a0:	07db      	lsls	r3, r3, #31
 801f3a2:	d40b      	bmi.n	801f3bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f3a4:	4620      	mov	r0, r4
 801f3a6:	f006 fe37 	bl	8026018 <__cxa_guard_acquire>
 801f3aa:	b138      	cbz	r0, 801f3bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801f3ac:	4620      	mov	r0, r4
 801f3ae:	f006 fe3f 	bl	8026030 <__cxa_guard_release>
 801f3b2:	4a06      	ldr	r2, [pc, #24]	@ (801f3cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801f3b4:	4909      	ldr	r1, [pc, #36]	@ (801f3dc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801f3b6:	480a      	ldr	r0, [pc, #40]	@ (801f3e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f3b8:	f006 fe27 	bl	802600a <__aeabi_atexit>
 801f3bc:	4b05      	ldr	r3, [pc, #20]	@ (801f3d4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801f3be:	656b      	str	r3, [r5, #84]	@ 0x54
 801f3c0:	4b07      	ldr	r3, [pc, #28]	@ (801f3e0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801f3c2:	65ab      	str	r3, [r5, #88]	@ 0x58
 801f3c4:	bd38      	pop	{r3, r4, r5, pc}
 801f3c6:	bf00      	nop
 801f3c8:	24025ed4 	.word	0x24025ed4
 801f3cc:	24000000 	.word	0x24000000
 801f3d0:	0801c251 	.word	0x0801c251
 801f3d4:	240000c8 	.word	0x240000c8
 801f3d8:	24025ed8 	.word	0x24025ed8
 801f3dc:	0801c24f 	.word	0x0801c24f
 801f3e0:	240000cc 	.word	0x240000cc

0801f3e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801f3e4:	b538      	push	{r3, r4, r5, lr}
 801f3e6:	4c15      	ldr	r4, [pc, #84]	@ (801f43c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801f3e8:	4605      	mov	r5, r0
 801f3ea:	7823      	ldrb	r3, [r4, #0]
 801f3ec:	f3bf 8f5b 	dmb	ish
 801f3f0:	07da      	lsls	r2, r3, #31
 801f3f2:	d40b      	bmi.n	801f40c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f3f4:	4620      	mov	r0, r4
 801f3f6:	f006 fe0f 	bl	8026018 <__cxa_guard_acquire>
 801f3fa:	b138      	cbz	r0, 801f40c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801f3fc:	4620      	mov	r0, r4
 801f3fe:	f006 fe17 	bl	8026030 <__cxa_guard_release>
 801f402:	4a0f      	ldr	r2, [pc, #60]	@ (801f440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f404:	490f      	ldr	r1, [pc, #60]	@ (801f444 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801f406:	4810      	ldr	r0, [pc, #64]	@ (801f448 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f408:	f006 fdff 	bl	802600a <__aeabi_atexit>
 801f40c:	4c0f      	ldr	r4, [pc, #60]	@ (801f44c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801f40e:	7823      	ldrb	r3, [r4, #0]
 801f410:	f3bf 8f5b 	dmb	ish
 801f414:	07db      	lsls	r3, r3, #31
 801f416:	d40b      	bmi.n	801f430 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f418:	4620      	mov	r0, r4
 801f41a:	f006 fdfd 	bl	8026018 <__cxa_guard_acquire>
 801f41e:	b138      	cbz	r0, 801f430 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801f420:	4620      	mov	r0, r4
 801f422:	f006 fe05 	bl	8026030 <__cxa_guard_release>
 801f426:	4a06      	ldr	r2, [pc, #24]	@ (801f440 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801f428:	4909      	ldr	r1, [pc, #36]	@ (801f450 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801f42a:	480a      	ldr	r0, [pc, #40]	@ (801f454 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f42c:	f006 fded 	bl	802600a <__aeabi_atexit>
 801f430:	4b05      	ldr	r3, [pc, #20]	@ (801f448 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801f432:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801f434:	4b07      	ldr	r3, [pc, #28]	@ (801f454 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801f436:	652b      	str	r3, [r5, #80]	@ 0x50
 801f438:	bd38      	pop	{r3, r4, r5, pc}
 801f43a:	bf00      	nop
 801f43c:	24025ec4 	.word	0x24025ec4
 801f440:	24000000 	.word	0x24000000
 801f444:	0801c255 	.word	0x0801c255
 801f448:	240000b8 	.word	0x240000b8
 801f44c:	24025ec8 	.word	0x24025ec8
 801f450:	0801c253 	.word	0x0801c253
 801f454:	240000bc 	.word	0x240000bc

0801f458 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801f458:	b510      	push	{r4, lr}
 801f45a:	4604      	mov	r4, r0
 801f45c:	f7ff ff88 	bl	801f370 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801f460:	4620      	mov	r0, r4
 801f462:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f466:	f7ff bfbd 	b.w	801f3e4 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801f46a <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801f46a:	b510      	push	{r4, lr}
 801f46c:	4604      	mov	r4, r0
 801f46e:	f7ff fff3 	bl	801f458 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801f472:	4620      	mov	r0, r4
 801f474:	f7ff ff72 	bl	801f35c <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801f478:	4620      	mov	r0, r4
 801f47a:	f7ff fe73 	bl	801f164 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801f47e:	4620      	mov	r0, r4
 801f480:	f7ff fdf2 	bl	801f068 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801f484:	4620      	mov	r0, r4
 801f486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f48a:	f7ff bee9 	b.w	801f260 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801f490 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801f490:	b538      	push	{r3, r4, r5, lr}
 801f492:	4c0b      	ldr	r4, [pc, #44]	@ (801f4c0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801f494:	4605      	mov	r5, r0
 801f496:	7823      	ldrb	r3, [r4, #0]
 801f498:	f3bf 8f5b 	dmb	ish
 801f49c:	07db      	lsls	r3, r3, #31
 801f49e:	d40b      	bmi.n	801f4b8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801f4a0:	4620      	mov	r0, r4
 801f4a2:	f006 fdb9 	bl	8026018 <__cxa_guard_acquire>
 801f4a6:	b138      	cbz	r0, 801f4b8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801f4a8:	4620      	mov	r0, r4
 801f4aa:	f006 fdc1 	bl	8026030 <__cxa_guard_release>
 801f4ae:	4a05      	ldr	r2, [pc, #20]	@ (801f4c4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801f4b0:	4905      	ldr	r1, [pc, #20]	@ (801f4c8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801f4b2:	4806      	ldr	r0, [pc, #24]	@ (801f4cc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801f4b4:	f006 fda9 	bl	802600a <__aeabi_atexit>
 801f4b8:	4b04      	ldr	r3, [pc, #16]	@ (801f4cc <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801f4ba:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801f4bc:	bd38      	pop	{r3, r4, r5, pc}
 801f4be:	bf00      	nop
 801f4c0:	24025eb8 	.word	0x24025eb8
 801f4c4:	24000000 	.word	0x24000000
 801f4c8:	0801c24d 	.word	0x0801c24d
 801f4cc:	240000b0 	.word	0x240000b0

0801f4d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801f4d0:	b538      	push	{r3, r4, r5, lr}
 801f4d2:	4c0b      	ldr	r4, [pc, #44]	@ (801f500 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801f4d4:	4605      	mov	r5, r0
 801f4d6:	7823      	ldrb	r3, [r4, #0]
 801f4d8:	f3bf 8f5b 	dmb	ish
 801f4dc:	07db      	lsls	r3, r3, #31
 801f4de:	d40b      	bmi.n	801f4f8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801f4e0:	4620      	mov	r0, r4
 801f4e2:	f006 fd99 	bl	8026018 <__cxa_guard_acquire>
 801f4e6:	b138      	cbz	r0, 801f4f8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801f4e8:	4620      	mov	r0, r4
 801f4ea:	f006 fda1 	bl	8026030 <__cxa_guard_release>
 801f4ee:	4a05      	ldr	r2, [pc, #20]	@ (801f504 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801f4f0:	4905      	ldr	r1, [pc, #20]	@ (801f508 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801f4f2:	4806      	ldr	r0, [pc, #24]	@ (801f50c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801f4f4:	f006 fd89 	bl	802600a <__aeabi_atexit>
 801f4f8:	4b04      	ldr	r3, [pc, #16]	@ (801f50c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801f4fa:	662b      	str	r3, [r5, #96]	@ 0x60
 801f4fc:	bd38      	pop	{r3, r4, r5, pc}
 801f4fe:	bf00      	nop
 801f500:	24025ebc 	.word	0x24025ebc
 801f504:	24000000 	.word	0x24000000
 801f508:	0801c24b 	.word	0x0801c24b
 801f50c:	240000b4 	.word	0x240000b4

0801f510 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801f510:	b570      	push	{r4, r5, r6, lr}
 801f512:	4d0c      	ldr	r5, [pc, #48]	@ (801f544 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801f514:	4606      	mov	r6, r0
 801f516:	4c0c      	ldr	r4, [pc, #48]	@ (801f548 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801f518:	782b      	ldrb	r3, [r5, #0]
 801f51a:	f3bf 8f5b 	dmb	ish
 801f51e:	f013 0f01 	tst.w	r3, #1
 801f522:	d10d      	bne.n	801f540 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f524:	4628      	mov	r0, r5
 801f526:	f006 fd77 	bl	8026018 <__cxa_guard_acquire>
 801f52a:	b148      	cbz	r0, 801f540 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801f52c:	4b07      	ldr	r3, [pc, #28]	@ (801f54c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801f52e:	4628      	mov	r0, r5
 801f530:	6023      	str	r3, [r4, #0]
 801f532:	f006 fd7d 	bl	8026030 <__cxa_guard_release>
 801f536:	4a06      	ldr	r2, [pc, #24]	@ (801f550 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801f538:	4620      	mov	r0, r4
 801f53a:	4906      	ldr	r1, [pc, #24]	@ (801f554 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801f53c:	f006 fd65 	bl	802600a <__aeabi_atexit>
 801f540:	6674      	str	r4, [r6, #100]	@ 0x64
 801f542:	bd70      	pop	{r4, r5, r6, pc}
 801f544:	24025ec0 	.word	0x24025ec0
 801f548:	24026018 	.word	0x24026018
 801f54c:	0802b330 	.word	0x0802b330
 801f550:	24000000 	.word	0x24000000
 801f554:	0801c249 	.word	0x0801c249

0801f558 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801f558:	b510      	push	{r4, lr}
 801f55a:	4604      	mov	r4, r0
 801f55c:	f7ff ff98 	bl	801f490 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801f560:	4620      	mov	r0, r4
 801f562:	f7ff ffb5 	bl	801f4d0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801f566:	4620      	mov	r0, r4
 801f568:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801f56c:	f7ff bfd0 	b.w	801f510 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801f570 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801f570:	b570      	push	{r4, r5, r6, lr}
 801f572:	4d0c      	ldr	r5, [pc, #48]	@ (801f5a4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801f574:	4606      	mov	r6, r0
 801f576:	4c0c      	ldr	r4, [pc, #48]	@ (801f5a8 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801f578:	782b      	ldrb	r3, [r5, #0]
 801f57a:	f3bf 8f5b 	dmb	ish
 801f57e:	f013 0f01 	tst.w	r3, #1
 801f582:	d10d      	bne.n	801f5a0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f584:	4628      	mov	r0, r5
 801f586:	f006 fd47 	bl	8026018 <__cxa_guard_acquire>
 801f58a:	b148      	cbz	r0, 801f5a0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801f58c:	4b07      	ldr	r3, [pc, #28]	@ (801f5ac <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801f58e:	4628      	mov	r0, r5
 801f590:	6023      	str	r3, [r4, #0]
 801f592:	f006 fd4d 	bl	8026030 <__cxa_guard_release>
 801f596:	4a06      	ldr	r2, [pc, #24]	@ (801f5b0 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801f598:	4620      	mov	r0, r4
 801f59a:	4906      	ldr	r1, [pc, #24]	@ (801f5b4 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801f59c:	f006 fd35 	bl	802600a <__aeabi_atexit>
 801f5a0:	66b4      	str	r4, [r6, #104]	@ 0x68
 801f5a2:	bd70      	pop	{r4, r5, r6, pc}
 801f5a4:	24025eb4 	.word	0x24025eb4
 801f5a8:	24025f14 	.word	0x24025f14
 801f5ac:	0802b348 	.word	0x0802b348
 801f5b0:	24000000 	.word	0x24000000
 801f5b4:	0801c247 	.word	0x0801c247

0801f5b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801f5b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f5bc:	b087      	sub	sp, #28
 801f5be:	788d      	ldrb	r5, [r1, #2]
 801f5c0:	f891 9000 	ldrb.w	r9, [r1]
 801f5c4:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801f5c8:	9501      	str	r5, [sp, #4]
 801f5ca:	784d      	ldrb	r5, [r1, #1]
 801f5cc:	9203      	str	r2, [sp, #12]
 801f5ce:	9502      	str	r5, [sp, #8]
 801f5d0:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801f5d4:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801f5d8:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801f5dc:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801f5e0:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801f5e4:	fb06 0708 	mla	r7, r6, r8, r0
 801f5e8:	2e00      	cmp	r6, #0
 801f5ea:	eb02 0a07 	add.w	sl, r2, r7
 801f5ee:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801f5f2:	9d01      	ldr	r5, [sp, #4]
 801f5f4:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801f5f8:	ea45 0509 	orr.w	r5, r5, r9
 801f5fc:	9505      	str	r5, [sp, #20]
 801f5fe:	f2c0 80b2 	blt.w	801f766 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f602:	45b3      	cmp	fp, r6
 801f604:	f340 80af 	ble.w	801f766 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801f608:	2800      	cmp	r0, #0
 801f60a:	f2c0 80aa 	blt.w	801f762 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f60e:	4580      	cmp	r8, r0
 801f610:	f340 80a7 	ble.w	801f762 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801f614:	9a03      	ldr	r2, [sp, #12]
 801f616:	5dd7      	ldrb	r7, [r2, r7]
 801f618:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f61c:	441f      	add	r7, r3
 801f61e:	1c42      	adds	r2, r0, #1
 801f620:	f100 80a4 	bmi.w	801f76c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f624:	4590      	cmp	r8, r2
 801f626:	f340 80a1 	ble.w	801f76c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f62a:	2c00      	cmp	r4, #0
 801f62c:	f000 809e 	beq.w	801f76c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801f630:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801f634:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801f638:	441d      	add	r5, r3
 801f63a:	3601      	adds	r6, #1
 801f63c:	f100 809a 	bmi.w	801f774 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f640:	45b3      	cmp	fp, r6
 801f642:	f340 8097 	ble.w	801f774 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f646:	f1bc 0f00 	cmp.w	ip, #0
 801f64a:	f000 8093 	beq.w	801f774 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801f64e:	2800      	cmp	r0, #0
 801f650:	f2c0 808e 	blt.w	801f770 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f654:	4580      	cmp	r8, r0
 801f656:	f340 808b 	ble.w	801f770 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801f65a:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801f65e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801f662:	441e      	add	r6, r3
 801f664:	3001      	adds	r0, #1
 801f666:	f100 8088 	bmi.w	801f77a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f66a:	4580      	cmp	r8, r0
 801f66c:	f340 8085 	ble.w	801f77a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f670:	2c00      	cmp	r4, #0
 801f672:	f000 8082 	beq.w	801f77a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801f676:	44d0      	add	r8, sl
 801f678:	f898 2001 	ldrb.w	r2, [r8, #1]
 801f67c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f680:	4413      	add	r3, r2
 801f682:	b2a4      	uxth	r4, r4
 801f684:	f895 a000 	ldrb.w	sl, [r5]
 801f688:	fa1f fc8c 	uxth.w	ip, ip
 801f68c:	fb04 fb0c 	mul.w	fp, r4, ip
 801f690:	0124      	lsls	r4, r4, #4
 801f692:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801f696:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801f69a:	eba4 040b 	sub.w	r4, r4, fp
 801f69e:	fa1f f08c 	uxth.w	r0, ip
 801f6a2:	b2a2      	uxth	r2, r4
 801f6a4:	783c      	ldrb	r4, [r7, #0]
 801f6a6:	eba8 0800 	sub.w	r8, r8, r0
 801f6aa:	fa1f fc8e 	uxth.w	ip, lr
 801f6ae:	fb02 fa0a 	mul.w	sl, r2, sl
 801f6b2:	ea6f 0e0e 	mvn.w	lr, lr
 801f6b6:	fa1f f888 	uxth.w	r8, r8
 801f6ba:	fa5f fe8e 	uxtb.w	lr, lr
 801f6be:	fb08 aa04 	mla	sl, r8, r4, sl
 801f6c2:	7834      	ldrb	r4, [r6, #0]
 801f6c4:	fb19 f90e 	smulbb	r9, r9, lr
 801f6c8:	fb00 aa04 	mla	sl, r0, r4, sl
 801f6cc:	781c      	ldrb	r4, [r3, #0]
 801f6ce:	fb0b a404 	mla	r4, fp, r4, sl
 801f6d2:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801f6d6:	fb04 990c 	mla	r9, r4, ip, r9
 801f6da:	fa1f f989 	uxth.w	r9, r9
 801f6de:	f109 0401 	add.w	r4, r9, #1
 801f6e2:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801f6e6:	ea4f 2929 	mov.w	r9, r9, asr #8
 801f6ea:	f881 9000 	strb.w	r9, [r1]
 801f6ee:	f895 9001 	ldrb.w	r9, [r5, #1]
 801f6f2:	787c      	ldrb	r4, [r7, #1]
 801f6f4:	fb02 f909 	mul.w	r9, r2, r9
 801f6f8:	fb08 9904 	mla	r9, r8, r4, r9
 801f6fc:	7874      	ldrb	r4, [r6, #1]
 801f6fe:	fb00 9904 	mla	r9, r0, r4, r9
 801f702:	785c      	ldrb	r4, [r3, #1]
 801f704:	fb0b 9404 	mla	r4, fp, r4, r9
 801f708:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801f70c:	9c02      	ldr	r4, [sp, #8]
 801f70e:	fb14 f90e 	smulbb	r9, r4, lr
 801f712:	fb0a 940c 	mla	r4, sl, ip, r9
 801f716:	b2a4      	uxth	r4, r4
 801f718:	f104 0901 	add.w	r9, r4, #1
 801f71c:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801f720:	1224      	asrs	r4, r4, #8
 801f722:	704c      	strb	r4, [r1, #1]
 801f724:	78ad      	ldrb	r5, [r5, #2]
 801f726:	78bc      	ldrb	r4, [r7, #2]
 801f728:	436a      	muls	r2, r5
 801f72a:	789b      	ldrb	r3, [r3, #2]
 801f72c:	fb08 2204 	mla	r2, r8, r4, r2
 801f730:	78b4      	ldrb	r4, [r6, #2]
 801f732:	fb00 2004 	mla	r0, r0, r4, r2
 801f736:	fb0b 0b03 	mla	fp, fp, r3, r0
 801f73a:	9b01      	ldr	r3, [sp, #4]
 801f73c:	fb13 fe0e 	smulbb	lr, r3, lr
 801f740:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801f744:	fb0b ec0c 	mla	ip, fp, ip, lr
 801f748:	fa1f fc8c 	uxth.w	ip, ip
 801f74c:	f10c 0e01 	add.w	lr, ip, #1
 801f750:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801f754:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f758:	f881 c002 	strb.w	ip, [r1, #2]
 801f75c:	b007      	add	sp, #28
 801f75e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f762:	af05      	add	r7, sp, #20
 801f764:	e75b      	b.n	801f61e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801f766:	ad05      	add	r5, sp, #20
 801f768:	462f      	mov	r7, r5
 801f76a:	e766      	b.n	801f63a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f76c:	ad05      	add	r5, sp, #20
 801f76e:	e764      	b.n	801f63a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801f770:	ae05      	add	r6, sp, #20
 801f772:	e777      	b.n	801f664 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801f774:	ab05      	add	r3, sp, #20
 801f776:	461e      	mov	r6, r3
 801f778:	e783      	b.n	801f682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801f77a:	ab05      	add	r3, sp, #20
 801f77c:	e781      	b.n	801f682 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801f77e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f77e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f782:	b093      	sub	sp, #76	@ 0x4c
 801f784:	9210      	str	r2, [sp, #64]	@ 0x40
 801f786:	9309      	str	r3, [sp, #36]	@ 0x24
 801f788:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801f78a:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801f78e:	9011      	str	r0, [sp, #68]	@ 0x44
 801f790:	930e      	str	r3, [sp, #56]	@ 0x38
 801f792:	6850      	ldr	r0, [r2, #4]
 801f794:	910d      	str	r1, [sp, #52]	@ 0x34
 801f796:	6812      	ldr	r2, [r2, #0]
 801f798:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801f79c:	fb00 1303 	mla	r3, r0, r3, r1
 801f7a0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f7a4:	18d3      	adds	r3, r2, r3
 801f7a6:	930a      	str	r3, [sp, #40]	@ 0x28
 801f7a8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f7aa:	681b      	ldr	r3, [r3, #0]
 801f7ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801f7ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f7b0:	685c      	ldr	r4, [r3, #4]
 801f7b2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f7b4:	3404      	adds	r4, #4
 801f7b6:	43db      	mvns	r3, r3
 801f7b8:	b2db      	uxtb	r3, r3
 801f7ba:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f7bc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f7be:	2b00      	cmp	r3, #0
 801f7c0:	dc03      	bgt.n	801f7ca <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f7c2:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	f340 8250 	ble.w	801fc6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801f7ca:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f7cc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f7d0:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f7d4:	1e48      	subs	r0, r1, #1
 801f7d6:	1e55      	subs	r5, r2, #1
 801f7d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7da:	2b00      	cmp	r3, #0
 801f7dc:	f340 80ee 	ble.w	801f9bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801f7e0:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801f7e2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f7e4:	1436      	asrs	r6, r6, #16
 801f7e6:	ea4f 4323 	mov.w	r3, r3, asr #16
 801f7ea:	d406      	bmi.n	801f7fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f7ec:	4286      	cmp	r6, r0
 801f7ee:	da04      	bge.n	801f7fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f7f0:	2b00      	cmp	r3, #0
 801f7f2:	db02      	blt.n	801f7fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f7f4:	42ab      	cmp	r3, r5
 801f7f6:	f2c0 80e2 	blt.w	801f9be <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801f7fa:	3601      	adds	r6, #1
 801f7fc:	f100 80cf 	bmi.w	801f99e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f800:	42b1      	cmp	r1, r6
 801f802:	f2c0 80cc 	blt.w	801f99e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f806:	3301      	adds	r3, #1
 801f808:	f100 80c9 	bmi.w	801f99e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f80c:	429a      	cmp	r2, r3
 801f80e:	f2c0 80c6 	blt.w	801f99e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801f812:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801f816:	f1bb 0f00 	cmp.w	fp, #0
 801f81a:	f340 80f1 	ble.w	801fa00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801f81e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f820:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801f822:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801f824:	141d      	asrs	r5, r3, #16
 801f826:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f828:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801f82c:	68c7      	ldr	r7, [r0, #12]
 801f82e:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801f830:	1418      	asrs	r0, r3, #16
 801f832:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801f836:	6892      	ldr	r2, [r2, #8]
 801f838:	f100 8137 	bmi.w	801faaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f83c:	f102 3cff 	add.w	ip, r2, #4294967295
 801f840:	4560      	cmp	r0, ip
 801f842:	f280 8132 	bge.w	801faaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f846:	2d00      	cmp	r5, #0
 801f848:	f2c0 812f 	blt.w	801faaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f84c:	f107 3cff 	add.w	ip, r7, #4294967295
 801f850:	4565      	cmp	r5, ip
 801f852:	f280 812a 	bge.w	801faaa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801f856:	b212      	sxth	r2, r2
 801f858:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801f85a:	fb05 0002 	mla	r0, r5, r2, r0
 801f85e:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801f860:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f864:	4405      	add	r5, r0
 801f866:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801f86a:	eb04 0e0c 	add.w	lr, r4, ip
 801f86e:	f1b8 0f00 	cmp.w	r8, #0
 801f872:	f000 810c 	beq.w	801fa8e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801f876:	786f      	ldrb	r7, [r5, #1]
 801f878:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801f87c:	4427      	add	r7, r4
 801f87e:	2900      	cmp	r1, #0
 801f880:	f000 810d 	beq.w	801fa9e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801f884:	18a8      	adds	r0, r5, r2
 801f886:	5caa      	ldrb	r2, [r5, r2]
 801f888:	7840      	ldrb	r0, [r0, #1]
 801f88a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f88e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f892:	4422      	add	r2, r4
 801f894:	4420      	add	r0, r4
 801f896:	fa1f f388 	uxth.w	r3, r8
 801f89a:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801f89e:	b289      	uxth	r1, r1
 801f8a0:	f897 c000 	ldrb.w	ip, [r7]
 801f8a4:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801f8a8:	fb03 f901 	mul.w	r9, r3, r1
 801f8ac:	011b      	lsls	r3, r3, #4
 801f8ae:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801f8b2:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801f8b6:	eba3 0309 	sub.w	r3, r3, r9
 801f8ba:	b289      	uxth	r1, r1
 801f8bc:	b29b      	uxth	r3, r3
 801f8be:	eba8 0801 	sub.w	r8, r8, r1
 801f8c2:	fb03 fc0c 	mul.w	ip, r3, ip
 801f8c6:	fa1f f888 	uxth.w	r8, r8
 801f8ca:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f8cc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f8ce:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f8d2:	f892 a000 	ldrb.w	sl, [r2]
 801f8d6:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f8da:	f890 a000 	ldrb.w	sl, [r0]
 801f8de:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f8e2:	f896 a000 	ldrb.w	sl, [r6]
 801f8e6:	fb1a fa03 	smulbb	sl, sl, r3
 801f8ea:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f8ee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f8f0:	fb0c ac05 	mla	ip, ip, r5, sl
 801f8f4:	fa1f fc8c 	uxth.w	ip, ip
 801f8f8:	f10c 0a01 	add.w	sl, ip, #1
 801f8fc:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801f900:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801f904:	f886 a000 	strb.w	sl, [r6]
 801f908:	f897 c001 	ldrb.w	ip, [r7, #1]
 801f90c:	f89e a001 	ldrb.w	sl, [lr, #1]
 801f910:	fb03 fc0c 	mul.w	ip, r3, ip
 801f914:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f916:	fb08 cc0a 	mla	ip, r8, sl, ip
 801f91a:	f892 a001 	ldrb.w	sl, [r2, #1]
 801f91e:	fb01 cc0a 	mla	ip, r1, sl, ip
 801f922:	f890 a001 	ldrb.w	sl, [r0, #1]
 801f926:	fb09 cc0a 	mla	ip, r9, sl, ip
 801f92a:	f896 a001 	ldrb.w	sl, [r6, #1]
 801f92e:	fb1a fa03 	smulbb	sl, sl, r3
 801f932:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801f936:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801f938:	fb0c ac05 	mla	ip, ip, r5, sl
 801f93c:	fa1f fc8c 	uxth.w	ip, ip
 801f940:	f10c 0a01 	add.w	sl, ip, #1
 801f944:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801f948:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801f94c:	f886 c001 	strb.w	ip, [r6, #1]
 801f950:	78bf      	ldrb	r7, [r7, #2]
 801f952:	f89e c002 	ldrb.w	ip, [lr, #2]
 801f956:	437b      	muls	r3, r7
 801f958:	fb08 330c 	mla	r3, r8, ip, r3
 801f95c:	f892 c002 	ldrb.w	ip, [r2, #2]
 801f960:	7882      	ldrb	r2, [r0, #2]
 801f962:	fb01 310c 	mla	r1, r1, ip, r3
 801f966:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801f968:	fb09 1902 	mla	r9, r9, r2, r1
 801f96c:	78b1      	ldrb	r1, [r6, #2]
 801f96e:	fb11 f103 	smulbb	r1, r1, r3
 801f972:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801f976:	fb09 1505 	mla	r5, r9, r5, r1
 801f97a:	b2ad      	uxth	r5, r5
 801f97c:	1c6b      	adds	r3, r5, #1
 801f97e:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801f982:	122d      	asrs	r5, r5, #8
 801f984:	70b5      	strb	r5, [r6, #2]
 801f986:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f988:	3603      	adds	r6, #3
 801f98a:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801f98c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f990:	4413      	add	r3, r2
 801f992:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801f994:	931d      	str	r3, [sp, #116]	@ 0x74
 801f996:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f998:	4413      	add	r3, r2
 801f99a:	931e      	str	r3, [sp, #120]	@ 0x78
 801f99c:	e73b      	b.n	801f816 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801f99e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801f9a0:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801f9a2:	4433      	add	r3, r6
 801f9a4:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801f9a6:	931d      	str	r3, [sp, #116]	@ 0x74
 801f9a8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801f9aa:	4433      	add	r3, r6
 801f9ac:	931e      	str	r3, [sp, #120]	@ 0x78
 801f9ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9b0:	3b01      	subs	r3, #1
 801f9b2:	9309      	str	r3, [sp, #36]	@ 0x24
 801f9b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9b6:	3303      	adds	r3, #3
 801f9b8:	930a      	str	r3, [sp, #40]	@ 0x28
 801f9ba:	e70d      	b.n	801f7d8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801f9bc:	d028      	beq.n	801fa10 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801f9be:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f9c0:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801f9c2:	3b01      	subs	r3, #1
 801f9c4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801f9c6:	fb00 5003 	mla	r0, r0, r3, r5
 801f9ca:	1400      	asrs	r0, r0, #16
 801f9cc:	f53f af21 	bmi.w	801f812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f9d0:	3901      	subs	r1, #1
 801f9d2:	4288      	cmp	r0, r1
 801f9d4:	f6bf af1d 	bge.w	801f812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f9d8:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801f9da:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801f9dc:	fb01 0303 	mla	r3, r1, r3, r0
 801f9e0:	141b      	asrs	r3, r3, #16
 801f9e2:	f53f af16 	bmi.w	801f812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f9e6:	3a01      	subs	r2, #1
 801f9e8:	4293      	cmp	r3, r2
 801f9ea:	f6bf af12 	bge.w	801f812 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801f9ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f9f0:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801f9f4:	1cdf      	adds	r7, r3, #3
 801f9f6:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801f9fa:	f1b9 0f00 	cmp.w	r9, #0
 801f9fe:	dc73      	bgt.n	801fae8 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801fa00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fa02:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fa04:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801fa08:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa0c:	441a      	add	r2, r3
 801fa0e:	920a      	str	r2, [sp, #40]	@ 0x28
 801fa10:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa12:	2b00      	cmp	r3, #0
 801fa14:	f340 8129 	ble.w	801fc6a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801fa18:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fa1c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fa1e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fa22:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fa26:	eef0 6a62 	vmov.f32	s13, s5
 801fa2a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fa2e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fa32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa36:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801fa3a:	eef0 6a43 	vmov.f32	s13, s6
 801fa3e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fa42:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801fa46:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fa4a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fa4e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fa52:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fa56:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fa5a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fa5e:	ee12 2a90 	vmov	r2, s5
 801fa62:	eef0 2a47 	vmov.f32	s5, s14
 801fa66:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa6a:	ee13 2a10 	vmov	r2, s6
 801fa6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fa70:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fa72:	eeb0 3a67 	vmov.f32	s6, s15
 801fa76:	fb92 f3f3 	sdiv	r3, r2, r3
 801fa7a:	9320      	str	r3, [sp, #128]	@ 0x80
 801fa7c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801fa7e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fa80:	3b01      	subs	r3, #1
 801fa82:	930d      	str	r3, [sp, #52]	@ 0x34
 801fa84:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fa86:	bf08      	it	eq
 801fa88:	4613      	moveq	r3, r2
 801fa8a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa8c:	e696      	b.n	801f7bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801fa8e:	b149      	cbz	r1, 801faa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801fa90:	5caa      	ldrb	r2, [r5, r2]
 801fa92:	4670      	mov	r0, lr
 801fa94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fa98:	4422      	add	r2, r4
 801fa9a:	4677      	mov	r7, lr
 801fa9c:	e6fb      	b.n	801f896 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801fa9e:	4670      	mov	r0, lr
 801faa0:	4672      	mov	r2, lr
 801faa2:	e6f8      	b.n	801f896 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801faa4:	4670      	mov	r0, lr
 801faa6:	4672      	mov	r2, lr
 801faa8:	e7f7      	b.n	801fa9a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801faaa:	f110 0c01 	adds.w	ip, r0, #1
 801faae:	f53f af6a 	bmi.w	801f986 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fab2:	4562      	cmp	r2, ip
 801fab4:	f6ff af67 	blt.w	801f986 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fab8:	f115 0c01 	adds.w	ip, r5, #1
 801fabc:	f53f af63 	bmi.w	801f986 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fac0:	4567      	cmp	r7, ip
 801fac2:	f6ff af60 	blt.w	801f986 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fac6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801fac8:	b23f      	sxth	r7, r7
 801faca:	b212      	sxth	r2, r2
 801facc:	9002      	str	r0, [sp, #8]
 801face:	9701      	str	r7, [sp, #4]
 801fad0:	9200      	str	r2, [sp, #0]
 801fad2:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fad4:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fad6:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801fada:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801fade:	4623      	mov	r3, r4
 801fae0:	4631      	mov	r1, r6
 801fae2:	f7ff fd69 	bl	801f5b8 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801fae6:	e74e      	b.n	801f986 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801fae8:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801faea:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801faec:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801faf0:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801faf2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801faf4:	1400      	asrs	r0, r0, #16
 801faf6:	142d      	asrs	r5, r5, #16
 801faf8:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fafa:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801fafe:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801fb02:	fb02 5000 	mla	r0, r2, r0, r5
 801fb06:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801fb08:	f815 e000 	ldrb.w	lr, [r5, r0]
 801fb0c:	eb05 0c00 	add.w	ip, r5, r0
 801fb10:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801fb14:	eb04 060e 	add.w	r6, r4, lr
 801fb18:	2b00      	cmp	r3, #0
 801fb1a:	f000 8097 	beq.w	801fc4c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801fb1e:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801fb22:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fb26:	4425      	add	r5, r4
 801fb28:	2900      	cmp	r1, #0
 801fb2a:	f000 8098 	beq.w	801fc5e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801fb2e:	eb0c 0002 	add.w	r0, ip, r2
 801fb32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fb36:	7840      	ldrb	r0, [r0, #1]
 801fb38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fb3c:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801fb40:	4422      	add	r2, r4
 801fb42:	4420      	add	r0, r4
 801fb44:	b29b      	uxth	r3, r3
 801fb46:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801fb4a:	b289      	uxth	r1, r1
 801fb4c:	f895 e000 	ldrb.w	lr, [r5]
 801fb50:	3703      	adds	r7, #3
 801fb52:	f109 39ff 	add.w	r9, r9, #4294967295
 801fb56:	fb03 f801 	mul.w	r8, r3, r1
 801fb5a:	011b      	lsls	r3, r3, #4
 801fb5c:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801fb60:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801fb64:	eba3 0308 	sub.w	r3, r3, r8
 801fb68:	b289      	uxth	r1, r1
 801fb6a:	b29b      	uxth	r3, r3
 801fb6c:	ebac 0c01 	sub.w	ip, ip, r1
 801fb70:	fb03 fe0e 	mul.w	lr, r3, lr
 801fb74:	fa1f fc8c 	uxth.w	ip, ip
 801fb78:	930f      	str	r3, [sp, #60]	@ 0x3c
 801fb7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fb7c:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fb80:	f892 b000 	ldrb.w	fp, [r2]
 801fb84:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fb88:	f890 b000 	ldrb.w	fp, [r0]
 801fb8c:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fb90:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801fb94:	fb1b fb03 	smulbb	fp, fp, r3
 801fb98:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fb9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fb9e:	fb0e be0a 	mla	lr, lr, sl, fp
 801fba2:	fa1f fe8e 	uxth.w	lr, lr
 801fba6:	f10e 0b01 	add.w	fp, lr, #1
 801fbaa:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fbae:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fbb2:	f807 ec06 	strb.w	lr, [r7, #-6]
 801fbb6:	f895 e001 	ldrb.w	lr, [r5, #1]
 801fbba:	f896 b001 	ldrb.w	fp, [r6, #1]
 801fbbe:	fb03 fe0e 	mul.w	lr, r3, lr
 801fbc2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801fbc4:	fb0c ee0b 	mla	lr, ip, fp, lr
 801fbc8:	f892 b001 	ldrb.w	fp, [r2, #1]
 801fbcc:	fb01 ee0b 	mla	lr, r1, fp, lr
 801fbd0:	f890 b001 	ldrb.w	fp, [r0, #1]
 801fbd4:	fb08 ee0b 	mla	lr, r8, fp, lr
 801fbd8:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801fbdc:	fb1b fb03 	smulbb	fp, fp, r3
 801fbe0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801fbe4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801fbe6:	fb0e be0a 	mla	lr, lr, sl, fp
 801fbea:	fa1f fe8e 	uxth.w	lr, lr
 801fbee:	f10e 0b01 	add.w	fp, lr, #1
 801fbf2:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801fbf6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801fbfa:	f807 ec05 	strb.w	lr, [r7, #-5]
 801fbfe:	78ad      	ldrb	r5, [r5, #2]
 801fc00:	78b6      	ldrb	r6, [r6, #2]
 801fc02:	436b      	muls	r3, r5
 801fc04:	7895      	ldrb	r5, [r2, #2]
 801fc06:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801fc08:	fb0c 3306 	mla	r3, ip, r6, r3
 801fc0c:	fb01 3305 	mla	r3, r1, r5, r3
 801fc10:	7885      	ldrb	r5, [r0, #2]
 801fc12:	fb08 3805 	mla	r8, r8, r5, r3
 801fc16:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801fc1a:	fb13 f302 	smulbb	r3, r3, r2
 801fc1e:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801fc22:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801fc24:	fb08 380a 	mla	r8, r8, sl, r3
 801fc28:	fa1f f888 	uxth.w	r8, r8
 801fc2c:	f108 0301 	add.w	r3, r8, #1
 801fc30:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801fc34:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801fc36:	4413      	add	r3, r2
 801fc38:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801fc3a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801fc3e:	931d      	str	r3, [sp, #116]	@ 0x74
 801fc40:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fc42:	f807 8c04 	strb.w	r8, [r7, #-4]
 801fc46:	4413      	add	r3, r2
 801fc48:	931e      	str	r3, [sp, #120]	@ 0x78
 801fc4a:	e6d6      	b.n	801f9fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801fc4c:	b151      	cbz	r1, 801fc64 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801fc4e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801fc52:	4630      	mov	r0, r6
 801fc54:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fc58:	4422      	add	r2, r4
 801fc5a:	4635      	mov	r5, r6
 801fc5c:	e772      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fc5e:	4630      	mov	r0, r6
 801fc60:	4632      	mov	r2, r6
 801fc62:	e76f      	b.n	801fb44 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801fc64:	4630      	mov	r0, r6
 801fc66:	4632      	mov	r2, r6
 801fc68:	e7f7      	b.n	801fc5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801fc6a:	b013      	add	sp, #76	@ 0x4c
 801fc6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801fc70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801fc70:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801fc74:	784c      	ldrb	r4, [r1, #1]
 801fc76:	f891 a002 	ldrb.w	sl, [r1, #2]
 801fc7a:	0224      	lsls	r4, r4, #8
 801fc7c:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801fc80:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801fc84:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801fc88:	f891 a000 	ldrb.w	sl, [r1]
 801fc8c:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801fc90:	ea44 040a 	orr.w	r4, r4, sl
 801fc94:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801fc98:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801fc9c:	9401      	str	r4, [sp, #4]
 801fc9e:	fb05 c70e 	mla	r7, r5, lr, ip
 801fca2:	2d00      	cmp	r5, #0
 801fca4:	eb02 0807 	add.w	r8, r2, r7
 801fca8:	db72      	blt.n	801fd90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801fcaa:	45a9      	cmp	r9, r5
 801fcac:	dd70      	ble.n	801fd90 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801fcae:	f1bc 0f00 	cmp.w	ip, #0
 801fcb2:	db6b      	blt.n	801fd8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801fcb4:	45e6      	cmp	lr, ip
 801fcb6:	dd69      	ble.n	801fd8c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801fcb8:	5dd7      	ldrb	r7, [r2, r7]
 801fcba:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fcbe:	441f      	add	r7, r3
 801fcc0:	f11c 0201 	adds.w	r2, ip, #1
 801fcc4:	d467      	bmi.n	801fd96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fcc6:	4596      	cmp	lr, r2
 801fcc8:	dd65      	ble.n	801fd96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fcca:	2800      	cmp	r0, #0
 801fccc:	d063      	beq.n	801fd96 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801fcce:	f898 4001 	ldrb.w	r4, [r8, #1]
 801fcd2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fcd6:	441c      	add	r4, r3
 801fcd8:	3501      	adds	r5, #1
 801fcda:	d460      	bmi.n	801fd9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fcdc:	45a9      	cmp	r9, r5
 801fcde:	dd5e      	ble.n	801fd9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fce0:	2e00      	cmp	r6, #0
 801fce2:	d05c      	beq.n	801fd9e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801fce4:	f1bc 0f00 	cmp.w	ip, #0
 801fce8:	db57      	blt.n	801fd9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801fcea:	45e6      	cmp	lr, ip
 801fcec:	dd55      	ble.n	801fd9a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801fcee:	f818 500e 	ldrb.w	r5, [r8, lr]
 801fcf2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801fcf6:	441d      	add	r5, r3
 801fcf8:	f11c 0201 	adds.w	r2, ip, #1
 801fcfc:	d452      	bmi.n	801fda4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fcfe:	4596      	cmp	lr, r2
 801fd00:	dd50      	ble.n	801fda4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fd02:	2800      	cmp	r0, #0
 801fd04:	d04e      	beq.n	801fda4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801fd06:	44c6      	add	lr, r8
 801fd08:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801fd0c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801fd10:	4413      	add	r3, r2
 801fd12:	b280      	uxth	r0, r0
 801fd14:	f897 8000 	ldrb.w	r8, [r7]
 801fd18:	b2b2      	uxth	r2, r6
 801fd1a:	fb00 f602 	mul.w	r6, r0, r2
 801fd1e:	0100      	lsls	r0, r0, #4
 801fd20:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801fd24:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801fd28:	1b80      	subs	r0, r0, r6
 801fd2a:	fa1f fc82 	uxth.w	ip, r2
 801fd2e:	b282      	uxth	r2, r0
 801fd30:	7820      	ldrb	r0, [r4, #0]
 801fd32:	ebae 0e0c 	sub.w	lr, lr, ip
 801fd36:	4350      	muls	r0, r2
 801fd38:	fa1f fe8e 	uxth.w	lr, lr
 801fd3c:	fb0e 0808 	mla	r8, lr, r8, r0
 801fd40:	7828      	ldrb	r0, [r5, #0]
 801fd42:	fb0c 8800 	mla	r8, ip, r0, r8
 801fd46:	7818      	ldrb	r0, [r3, #0]
 801fd48:	fb06 8000 	mla	r0, r6, r0, r8
 801fd4c:	1200      	asrs	r0, r0, #8
 801fd4e:	7008      	strb	r0, [r1, #0]
 801fd50:	7860      	ldrb	r0, [r4, #1]
 801fd52:	f897 8001 	ldrb.w	r8, [r7, #1]
 801fd56:	4350      	muls	r0, r2
 801fd58:	fb0e 0808 	mla	r8, lr, r8, r0
 801fd5c:	7868      	ldrb	r0, [r5, #1]
 801fd5e:	fb0c 8800 	mla	r8, ip, r0, r8
 801fd62:	7858      	ldrb	r0, [r3, #1]
 801fd64:	fb06 8000 	mla	r0, r6, r0, r8
 801fd68:	1200      	asrs	r0, r0, #8
 801fd6a:	7048      	strb	r0, [r1, #1]
 801fd6c:	78a0      	ldrb	r0, [r4, #2]
 801fd6e:	78bf      	ldrb	r7, [r7, #2]
 801fd70:	4350      	muls	r0, r2
 801fd72:	78aa      	ldrb	r2, [r5, #2]
 801fd74:	fb0e 0007 	mla	r0, lr, r7, r0
 801fd78:	fb0c 0c02 	mla	ip, ip, r2, r0
 801fd7c:	789a      	ldrb	r2, [r3, #2]
 801fd7e:	fb06 c202 	mla	r2, r6, r2, ip
 801fd82:	1212      	asrs	r2, r2, #8
 801fd84:	708a      	strb	r2, [r1, #2]
 801fd86:	b002      	add	sp, #8
 801fd88:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801fd8c:	af01      	add	r7, sp, #4
 801fd8e:	e797      	b.n	801fcc0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801fd90:	ac01      	add	r4, sp, #4
 801fd92:	4627      	mov	r7, r4
 801fd94:	e7a0      	b.n	801fcd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fd96:	ac01      	add	r4, sp, #4
 801fd98:	e79e      	b.n	801fcd8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801fd9a:	ad01      	add	r5, sp, #4
 801fd9c:	e7ac      	b.n	801fcf8 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801fd9e:	ab01      	add	r3, sp, #4
 801fda0:	461d      	mov	r5, r3
 801fda2:	e7b6      	b.n	801fd12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801fda4:	ab01      	add	r3, sp, #4
 801fda6:	e7b4      	b.n	801fd12 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801fda8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fda8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fdac:	b08d      	sub	sp, #52	@ 0x34
 801fdae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801fdb2:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801fdb6:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801fdb8:	900b      	str	r0, [sp, #44]	@ 0x2c
 801fdba:	9306      	str	r3, [sp, #24]
 801fdbc:	6850      	ldr	r0, [r2, #4]
 801fdbe:	6812      	ldr	r2, [r2, #0]
 801fdc0:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801fdc2:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801fdc6:	fb00 1303 	mla	r3, r0, r3, r1
 801fdca:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fdce:	18d3      	adds	r3, r2, r3
 801fdd0:	9307      	str	r3, [sp, #28]
 801fdd2:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	9308      	str	r3, [sp, #32]
 801fdd8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fdda:	685d      	ldr	r5, [r3, #4]
 801fddc:	3504      	adds	r5, #4
 801fdde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801fde0:	2b00      	cmp	r3, #0
 801fde2:	dc03      	bgt.n	801fdec <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801fde4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801fde6:	2b00      	cmp	r3, #0
 801fde8:	f340 81e6 	ble.w	80201b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801fdec:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801fdee:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fdf2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fdf6:	1e48      	subs	r0, r1, #1
 801fdf8:	1e56      	subs	r6, r2, #1
 801fdfa:	9b06      	ldr	r3, [sp, #24]
 801fdfc:	2b00      	cmp	r3, #0
 801fdfe:	f340 80bd 	ble.w	801ff7c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801fe02:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fe04:	1427      	asrs	r7, r4, #16
 801fe06:	ea4f 4323 	mov.w	r3, r3, asr #16
 801fe0a:	d406      	bmi.n	801fe1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe0c:	4287      	cmp	r7, r0
 801fe0e:	da04      	bge.n	801fe1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe10:	2b00      	cmp	r3, #0
 801fe12:	db02      	blt.n	801fe1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801fe14:	42b3      	cmp	r3, r6
 801fe16:	f2c0 80b2 	blt.w	801ff7e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801fe1a:	3701      	adds	r7, #1
 801fe1c:	f100 80a1 	bmi.w	801ff62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fe20:	42b9      	cmp	r1, r7
 801fe22:	f2c0 809e 	blt.w	801ff62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fe26:	3301      	adds	r3, #1
 801fe28:	f100 809b 	bmi.w	801ff62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fe2c:	429a      	cmp	r2, r3
 801fe2e:	f2c0 8098 	blt.w	801ff62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801fe32:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801fe36:	f1bb 0f00 	cmp.w	fp, #0
 801fe3a:	f340 80bf 	ble.w	801ffbc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801fe3e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801fe40:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801fe42:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801fe44:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801fe48:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801fe4c:	1420      	asrs	r0, r4, #16
 801fe4e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801fe50:	ea4f 4723 	mov.w	r7, r3, asr #16
 801fe54:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801fe58:	6892      	ldr	r2, [r2, #8]
 801fe5a:	f100 8103 	bmi.w	8020064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fe5e:	f102 3eff 	add.w	lr, r2, #4294967295
 801fe62:	4570      	cmp	r0, lr
 801fe64:	f280 80fe 	bge.w	8020064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fe68:	2f00      	cmp	r7, #0
 801fe6a:	f2c0 80fb 	blt.w	8020064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fe6e:	f10c 3eff 	add.w	lr, ip, #4294967295
 801fe72:	4577      	cmp	r7, lr
 801fe74:	f280 80f6 	bge.w	8020064 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801fe78:	b212      	sxth	r2, r2
 801fe7a:	fb07 0002 	mla	r0, r7, r2, r0
 801fe7e:	9f08      	ldr	r7, [sp, #32]
 801fe80:	f817 8000 	ldrb.w	r8, [r7, r0]
 801fe84:	eb07 0e00 	add.w	lr, r7, r0
 801fe88:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801fe8c:	eb05 0c08 	add.w	ip, r5, r8
 801fe90:	2b00      	cmp	r3, #0
 801fe92:	f000 80d8 	beq.w	8020046 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801fe96:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801fe9a:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801fe9e:	442f      	add	r7, r5
 801fea0:	2900      	cmp	r1, #0
 801fea2:	f000 80d9 	beq.w	8020058 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801fea6:	eb0e 0002 	add.w	r0, lr, r2
 801feaa:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801feae:	7840      	ldrb	r0, [r0, #1]
 801feb0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801feb4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801feb8:	442a      	add	r2, r5
 801feba:	4428      	add	r0, r5
 801febc:	b29b      	uxth	r3, r3
 801febe:	f815 a008 	ldrb.w	sl, [r5, r8]
 801fec2:	b289      	uxth	r1, r1
 801fec4:	f897 8000 	ldrb.w	r8, [r7]
 801fec8:	fb03 f901 	mul.w	r9, r3, r1
 801fecc:	011b      	lsls	r3, r3, #4
 801fece:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801fed2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801fed6:	eba3 0309 	sub.w	r3, r3, r9
 801feda:	b289      	uxth	r1, r1
 801fedc:	b29b      	uxth	r3, r3
 801fede:	ebae 0e01 	sub.w	lr, lr, r1
 801fee2:	fb03 f808 	mul.w	r8, r3, r8
 801fee6:	fa1f fe8e 	uxth.w	lr, lr
 801feea:	fb0e 880a 	mla	r8, lr, sl, r8
 801feee:	f892 a000 	ldrb.w	sl, [r2]
 801fef2:	fb01 880a 	mla	r8, r1, sl, r8
 801fef6:	f890 a000 	ldrb.w	sl, [r0]
 801fefa:	fb09 880a 	mla	r8, r9, sl, r8
 801fefe:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff02:	f886 8000 	strb.w	r8, [r6]
 801ff06:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ff0a:	f89c a001 	ldrb.w	sl, [ip, #1]
 801ff0e:	fb03 f808 	mul.w	r8, r3, r8
 801ff12:	fb0e 880a 	mla	r8, lr, sl, r8
 801ff16:	f892 a001 	ldrb.w	sl, [r2, #1]
 801ff1a:	fb01 880a 	mla	r8, r1, sl, r8
 801ff1e:	f890 a001 	ldrb.w	sl, [r0, #1]
 801ff22:	fb09 880a 	mla	r8, r9, sl, r8
 801ff26:	ea4f 2828 	mov.w	r8, r8, asr #8
 801ff2a:	f886 8001 	strb.w	r8, [r6, #1]
 801ff2e:	78bf      	ldrb	r7, [r7, #2]
 801ff30:	f89c c002 	ldrb.w	ip, [ip, #2]
 801ff34:	437b      	muls	r3, r7
 801ff36:	7892      	ldrb	r2, [r2, #2]
 801ff38:	fb0e 330c 	mla	r3, lr, ip, r3
 801ff3c:	fb01 3102 	mla	r1, r1, r2, r3
 801ff40:	7882      	ldrb	r2, [r0, #2]
 801ff42:	fb09 1902 	mla	r9, r9, r2, r1
 801ff46:	ea4f 2929 	mov.w	r9, r9, asr #8
 801ff4a:	f886 9002 	strb.w	r9, [r6, #2]
 801ff4e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ff50:	3603      	adds	r6, #3
 801ff52:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801ff54:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ff58:	441c      	add	r4, r3
 801ff5a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ff5c:	4413      	add	r3, r2
 801ff5e:	9318      	str	r3, [sp, #96]	@ 0x60
 801ff60:	e769      	b.n	801fe36 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ff62:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801ff64:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801ff66:	441c      	add	r4, r3
 801ff68:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ff6a:	443b      	add	r3, r7
 801ff6c:	9318      	str	r3, [sp, #96]	@ 0x60
 801ff6e:	9b06      	ldr	r3, [sp, #24]
 801ff70:	3b01      	subs	r3, #1
 801ff72:	9306      	str	r3, [sp, #24]
 801ff74:	9b07      	ldr	r3, [sp, #28]
 801ff76:	3303      	adds	r3, #3
 801ff78:	9307      	str	r3, [sp, #28]
 801ff7a:	e73e      	b.n	801fdfa <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801ff7c:	d026      	beq.n	801ffcc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801ff7e:	9b06      	ldr	r3, [sp, #24]
 801ff80:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ff82:	3b01      	subs	r3, #1
 801ff84:	fb00 4003 	mla	r0, r0, r3, r4
 801ff88:	1400      	asrs	r0, r0, #16
 801ff8a:	f53f af52 	bmi.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ff8e:	3901      	subs	r1, #1
 801ff90:	4288      	cmp	r0, r1
 801ff92:	f6bf af4e 	bge.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ff96:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801ff98:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801ff9a:	fb01 0303 	mla	r3, r1, r3, r0
 801ff9e:	141b      	asrs	r3, r3, #16
 801ffa0:	f53f af47 	bmi.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ffa4:	3a01      	subs	r2, #1
 801ffa6:	4293      	cmp	r3, r2
 801ffa8:	f6bf af43 	bge.w	801fe32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ffac:	9b07      	ldr	r3, [sp, #28]
 801ffae:	f8dd a018 	ldr.w	sl, [sp, #24]
 801ffb2:	f103 0803 	add.w	r8, r3, #3
 801ffb6:	f1ba 0f00 	cmp.w	sl, #0
 801ffba:	dc71      	bgt.n	80200a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801ffbc:	9b06      	ldr	r3, [sp, #24]
 801ffbe:	9a07      	ldr	r2, [sp, #28]
 801ffc0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801ffc4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffc8:	441a      	add	r2, r3
 801ffca:	9207      	str	r2, [sp, #28]
 801ffcc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ffce:	2b00      	cmp	r3, #0
 801ffd0:	f340 80f2 	ble.w	80201b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801ffd4:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ffd8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ffda:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ffde:	eeb0 6a62 	vmov.f32	s12, s5
 801ffe2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801ffe6:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ffea:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801ffee:	ee16 4a10 	vmov	r4, s12
 801fff2:	eeb0 6a43 	vmov.f32	s12, s6
 801fff6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801fffa:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801fffe:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8020002:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020006:	ee77 2a62 	vsub.f32	s5, s14, s5
 802000a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802000e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8020012:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020016:	ee12 2a90 	vmov	r2, s5
 802001a:	eef0 2a47 	vmov.f32	s5, s14
 802001e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020022:	ee13 2a10 	vmov	r2, s6
 8020026:	9319      	str	r3, [sp, #100]	@ 0x64
 8020028:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802002a:	eeb0 3a67 	vmov.f32	s6, s15
 802002e:	fb92 f3f3 	sdiv	r3, r2, r3
 8020032:	931a      	str	r3, [sp, #104]	@ 0x68
 8020034:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020036:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8020038:	3b01      	subs	r3, #1
 802003a:	9309      	str	r3, [sp, #36]	@ 0x24
 802003c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802003e:	bf08      	it	eq
 8020040:	4613      	moveq	r3, r2
 8020042:	9306      	str	r3, [sp, #24]
 8020044:	e6cb      	b.n	801fdde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8020046:	b151      	cbz	r1, 802005e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 8020048:	f81e 2002 	ldrb.w	r2, [lr, r2]
 802004c:	4660      	mov	r0, ip
 802004e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020052:	442a      	add	r2, r5
 8020054:	4667      	mov	r7, ip
 8020056:	e731      	b.n	801febc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 8020058:	4660      	mov	r0, ip
 802005a:	4662      	mov	r2, ip
 802005c:	e72e      	b.n	801febc <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 802005e:	4660      	mov	r0, ip
 8020060:	4662      	mov	r2, ip
 8020062:	e7f7      	b.n	8020054 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 8020064:	f110 0e01 	adds.w	lr, r0, #1
 8020068:	f53f af71 	bmi.w	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802006c:	4572      	cmp	r2, lr
 802006e:	f6ff af6e 	blt.w	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020072:	f117 0e01 	adds.w	lr, r7, #1
 8020076:	f53f af6a 	bmi.w	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 802007a:	45f4      	cmp	ip, lr
 802007c:	f6ff af67 	blt.w	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 8020080:	b212      	sxth	r2, r2
 8020082:	e9cd 3104 	strd	r3, r1, [sp, #16]
 8020086:	fa0f f38c 	sxth.w	r3, ip
 802008a:	9200      	str	r2, [sp, #0]
 802008c:	4631      	mov	r1, r6
 802008e:	9a08      	ldr	r2, [sp, #32]
 8020090:	9301      	str	r3, [sp, #4]
 8020092:	462b      	mov	r3, r5
 8020094:	e9cd 0702 	strd	r0, r7, [sp, #8]
 8020098:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 802009a:	f7ff fde9 	bl	801fc70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 802009e:	e756      	b.n	801ff4e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 80200a0:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80200a2:	1426      	asrs	r6, r4, #16
 80200a4:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80200a6:	f3c4 3303 	ubfx	r3, r4, #12, #4
 80200aa:	f3c2 3103 	ubfx	r1, r2, #12, #4
 80200ae:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80200b0:	1400      	asrs	r0, r0, #16
 80200b2:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 80200b6:	fb02 6000 	mla	r0, r2, r0, r6
 80200ba:	9e08      	ldr	r6, [sp, #32]
 80200bc:	f816 e000 	ldrb.w	lr, [r6, r0]
 80200c0:	eb06 0c00 	add.w	ip, r6, r0
 80200c4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80200c8:	eb05 070e 	add.w	r7, r5, lr
 80200cc:	2b00      	cmp	r3, #0
 80200ce:	d064      	beq.n	802019a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 80200d0:	f89c 6001 	ldrb.w	r6, [ip, #1]
 80200d4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80200d8:	442e      	add	r6, r5
 80200da:	2900      	cmp	r1, #0
 80200dc:	d066      	beq.n	80201ac <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 80200de:	eb0c 0002 	add.w	r0, ip, r2
 80200e2:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80200e6:	7840      	ldrb	r0, [r0, #1]
 80200e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80200ec:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200f0:	442a      	add	r2, r5
 80200f2:	4428      	add	r0, r5
 80200f4:	b29b      	uxth	r3, r3
 80200f6:	f815 b00e 	ldrb.w	fp, [r5, lr]
 80200fa:	b289      	uxth	r1, r1
 80200fc:	f896 e000 	ldrb.w	lr, [r6]
 8020100:	f108 0803 	add.w	r8, r8, #3
 8020104:	f10a 3aff 	add.w	sl, sl, #4294967295
 8020108:	fb03 f901 	mul.w	r9, r3, r1
 802010c:	011b      	lsls	r3, r3, #4
 802010e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020112:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 8020116:	eba3 0309 	sub.w	r3, r3, r9
 802011a:	b289      	uxth	r1, r1
 802011c:	b29b      	uxth	r3, r3
 802011e:	ebac 0c01 	sub.w	ip, ip, r1
 8020122:	fb03 fe0e 	mul.w	lr, r3, lr
 8020126:	fa1f fc8c 	uxth.w	ip, ip
 802012a:	fb0c ee0b 	mla	lr, ip, fp, lr
 802012e:	f892 b000 	ldrb.w	fp, [r2]
 8020132:	fb01 ee0b 	mla	lr, r1, fp, lr
 8020136:	f890 b000 	ldrb.w	fp, [r0]
 802013a:	fb09 ee0b 	mla	lr, r9, fp, lr
 802013e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8020142:	f808 ec06 	strb.w	lr, [r8, #-6]
 8020146:	f896 e001 	ldrb.w	lr, [r6, #1]
 802014a:	f897 b001 	ldrb.w	fp, [r7, #1]
 802014e:	fb03 fe0e 	mul.w	lr, r3, lr
 8020152:	fb0c ee0b 	mla	lr, ip, fp, lr
 8020156:	f892 b001 	ldrb.w	fp, [r2, #1]
 802015a:	fb01 ee0b 	mla	lr, r1, fp, lr
 802015e:	f890 b001 	ldrb.w	fp, [r0, #1]
 8020162:	fb09 ee0b 	mla	lr, r9, fp, lr
 8020166:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802016a:	f808 ec05 	strb.w	lr, [r8, #-5]
 802016e:	78b6      	ldrb	r6, [r6, #2]
 8020170:	78bf      	ldrb	r7, [r7, #2]
 8020172:	4373      	muls	r3, r6
 8020174:	7896      	ldrb	r6, [r2, #2]
 8020176:	7882      	ldrb	r2, [r0, #2]
 8020178:	fb0c 3307 	mla	r3, ip, r7, r3
 802017c:	fb01 3306 	mla	r3, r1, r6, r3
 8020180:	fb09 3902 	mla	r9, r9, r2, r3
 8020184:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020186:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8020188:	441c      	add	r4, r3
 802018a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802018c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8020190:	4413      	add	r3, r2
 8020192:	f808 9c04 	strb.w	r9, [r8, #-4]
 8020196:	9318      	str	r3, [sp, #96]	@ 0x60
 8020198:	e70d      	b.n	801ffb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 802019a:	b151      	cbz	r1, 80201b2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 802019c:	f81c 2002 	ldrb.w	r2, [ip, r2]
 80201a0:	4638      	mov	r0, r7
 80201a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80201a6:	442a      	add	r2, r5
 80201a8:	463e      	mov	r6, r7
 80201aa:	e7a3      	b.n	80200f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80201ac:	4638      	mov	r0, r7
 80201ae:	463a      	mov	r2, r7
 80201b0:	e7a0      	b.n	80200f4 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 80201b2:	4638      	mov	r0, r7
 80201b4:	463a      	mov	r2, r7
 80201b6:	e7f7      	b.n	80201a8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 80201b8:	b00d      	add	sp, #52	@ 0x34
 80201ba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080201be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 80201be:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c2:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 80201c6:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 80201ca:	2d00      	cmp	r5, #0
 80201cc:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 80201d0:	fb05 700c 	mla	r0, r5, ip, r7
 80201d4:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 80201d8:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 80201dc:	eb02 0800 	add.w	r8, r2, r0
 80201e0:	f2c0 8118 	blt.w	8020414 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80201e4:	45a9      	cmp	r9, r5
 80201e6:	f340 8115 	ble.w	8020414 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 80201ea:	2f00      	cmp	r7, #0
 80201ec:	f2c0 8110 	blt.w	8020410 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80201f0:	45bc      	cmp	ip, r7
 80201f2:	f340 810d 	ble.w	8020410 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 80201f6:	5c12      	ldrb	r2, [r2, r0]
 80201f8:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 80201fc:	1c7a      	adds	r2, r7, #1
 80201fe:	f100 810c 	bmi.w	802041a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020202:	4594      	cmp	ip, r2
 8020204:	f340 8109 	ble.w	802041a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 8020208:	2c00      	cmp	r4, #0
 802020a:	f000 8108 	beq.w	802041e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 802020e:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020212:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020216:	3501      	adds	r5, #1
 8020218:	f100 8105 	bmi.w	8020426 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 802021c:	45a9      	cmp	r9, r5
 802021e:	f340 8102 	ble.w	8020426 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 8020222:	f1be 0f00 	cmp.w	lr, #0
 8020226:	f000 8101 	beq.w	802042c <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 802022a:	2f00      	cmp	r7, #0
 802022c:	f2c0 80f9 	blt.w	8020422 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020230:	45bc      	cmp	ip, r7
 8020232:	f340 80f6 	ble.w	8020422 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 8020236:	f818 200c 	ldrb.w	r2, [r8, ip]
 802023a:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 802023e:	3701      	adds	r7, #1
 8020240:	f100 80f7 	bmi.w	8020432 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 8020244:	45bc      	cmp	ip, r7
 8020246:	f340 80f4 	ble.w	8020432 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 802024a:	2c00      	cmp	r4, #0
 802024c:	f000 80f3 	beq.w	8020436 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 8020250:	44c4      	add	ip, r8
 8020252:	f89c 2001 	ldrb.w	r2, [ip, #1]
 8020256:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 802025a:	fa1f fc84 	uxth.w	ip, r4
 802025e:	fa1f f48e 	uxth.w	r4, lr
 8020262:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020266:	fb04 fe0c 	mul.w	lr, r4, ip
 802026a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 802026e:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020272:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 8020276:	ebac 070e 	sub.w	r7, ip, lr
 802027a:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 802027e:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020282:	b2a4      	uxth	r4, r4
 8020284:	b2bf      	uxth	r7, r7
 8020286:	1b1b      	subs	r3, r3, r4
 8020288:	ea4f 6812 	mov.w	r8, r2, lsr #24
 802028c:	fb07 fc0a 	mul.w	ip, r7, sl
 8020290:	b29b      	uxth	r3, r3
 8020292:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020296:	9300      	str	r3, [sp, #0]
 8020298:	fb04 cc09 	mla	ip, r4, r9, ip
 802029c:	fb0e cc08 	mla	ip, lr, r8, ip
 80202a0:	f3cc 2307 	ubfx	r3, ip, #8, #8
 80202a4:	9301      	str	r3, [sp, #4]
 80202a6:	2b00      	cmp	r3, #0
 80202a8:	f000 80af 	beq.w	802040a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 80202ac:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 80202b0:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 80202b4:	fb0b fc0c 	mul.w	ip, fp, ip
 80202b8:	fb0b f606 	mul.w	r6, fp, r6
 80202bc:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 80202c0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80202c4:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 80202c8:	44dc      	add	ip, fp
 80202ca:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 80202ce:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80202d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80202d6:	fb0a fb0b 	mul.w	fp, sl, fp
 80202da:	fb0a fa00 	mul.w	sl, sl, r0
 80202de:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 80202e2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80202e6:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 80202ea:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80202ee:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 80202f2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80202f6:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 80202fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80202fe:	0a36      	lsrs	r6, r6, #8
 8020300:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020304:	44dc      	add	ip, fp
 8020306:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 802030a:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 802030e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020312:	fb09 fb0b 	mul.w	fp, r9, fp
 8020316:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802031a:	fb09 f905 	mul.w	r9, r9, r5
 802031e:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020322:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020326:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 802032a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802032e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020332:	fb0c fc07 	mul.w	ip, ip, r7
 8020336:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 802033a:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 802033e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020342:	4458      	add	r0, fp
 8020344:	fb08 f505 	mul.w	r5, r8, r5
 8020348:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802034c:	fb08 f802 	mul.w	r8, r8, r2
 8020350:	0a00      	lsrs	r0, r0, #8
 8020352:	0a2a      	lsrs	r2, r5, #8
 8020354:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020358:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 802035c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020360:	4415      	add	r5, r2
 8020362:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020366:	0a2d      	lsrs	r5, r5, #8
 8020368:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 802036c:	9a00      	ldr	r2, [sp, #0]
 802036e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020372:	fb03 cc02 	mla	ip, r3, r2, ip
 8020376:	ea4f 2818 	mov.w	r8, r8, lsr #8
 802037a:	9b01      	ldr	r3, [sp, #4]
 802037c:	fb05 c50e 	mla	r5, r5, lr, ip
 8020380:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020384:	fb00 5004 	mla	r0, r0, r4, r5
 8020388:	0a00      	lsrs	r0, r0, #8
 802038a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 802038e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8020392:	4378      	muls	r0, r7
 8020394:	fb02 0006 	mla	r0, r2, r6, r0
 8020398:	fb0e 0e08 	mla	lr, lr, r8, r0
 802039c:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 80203a0:	fb04 e000 	mla	r0, r4, r0, lr
 80203a4:	0a00      	lsrs	r0, r0, #8
 80203a6:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80203aa:	4328      	orrs	r0, r5
 80203ac:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 80203b0:	b2ad      	uxth	r5, r5
 80203b2:	b2c4      	uxtb	r4, r0
 80203b4:	436b      	muls	r3, r5
 80203b6:	fb14 f405 	smulbb	r4, r4, r5
 80203ba:	1c5a      	adds	r2, r3, #1
 80203bc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80203c0:	780b      	ldrb	r3, [r1, #0]
 80203c2:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 80203c6:	b2d2      	uxtb	r2, r2
 80203c8:	fb03 4302 	mla	r3, r3, r2, r4
 80203cc:	b29b      	uxth	r3, r3
 80203ce:	1c5c      	adds	r4, r3, #1
 80203d0:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80203d4:	784c      	ldrb	r4, [r1, #1]
 80203d6:	fb14 f402 	smulbb	r4, r4, r2
 80203da:	121b      	asrs	r3, r3, #8
 80203dc:	700b      	strb	r3, [r1, #0]
 80203de:	f3c0 2307 	ubfx	r3, r0, #8, #8
 80203e2:	fb03 4305 	mla	r3, r3, r5, r4
 80203e6:	b29b      	uxth	r3, r3
 80203e8:	1c5c      	adds	r4, r3, #1
 80203ea:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 80203ee:	0c04      	lsrs	r4, r0, #16
 80203f0:	7888      	ldrb	r0, [r1, #2]
 80203f2:	121b      	asrs	r3, r3, #8
 80203f4:	fb10 f002 	smulbb	r0, r0, r2
 80203f8:	704b      	strb	r3, [r1, #1]
 80203fa:	fb04 0005 	mla	r0, r4, r5, r0
 80203fe:	b280      	uxth	r0, r0
 8020400:	1c43      	adds	r3, r0, #1
 8020402:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 8020406:	1200      	asrs	r0, r0, #8
 8020408:	7088      	strb	r0, [r1, #2]
 802040a:	b003      	add	sp, #12
 802040c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020410:	2600      	movs	r6, #0
 8020412:	e6f3      	b.n	80201fc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 8020414:	2000      	movs	r0, #0
 8020416:	4606      	mov	r6, r0
 8020418:	e6fd      	b.n	8020216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802041a:	2000      	movs	r0, #0
 802041c:	e6fb      	b.n	8020216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 802041e:	4620      	mov	r0, r4
 8020420:	e6f9      	b.n	8020216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 8020422:	2500      	movs	r5, #0
 8020424:	e70b      	b.n	802023e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 8020426:	2200      	movs	r2, #0
 8020428:	4615      	mov	r5, r2
 802042a:	e716      	b.n	802025a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 802042c:	4672      	mov	r2, lr
 802042e:	4675      	mov	r5, lr
 8020430:	e713      	b.n	802025a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020432:	2200      	movs	r2, #0
 8020434:	e711      	b.n	802025a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 8020436:	4622      	mov	r2, r4
 8020438:	e70f      	b.n	802025a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0802043a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802043a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802043e:	b09f      	sub	sp, #124	@ 0x7c
 8020440:	921b      	str	r2, [sp, #108]	@ 0x6c
 8020442:	9309      	str	r3, [sp, #36]	@ 0x24
 8020444:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8020446:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 802044a:	901d      	str	r0, [sp, #116]	@ 0x74
 802044c:	931c      	str	r3, [sp, #112]	@ 0x70
 802044e:	6850      	ldr	r0, [r2, #4]
 8020450:	9119      	str	r1, [sp, #100]	@ 0x64
 8020452:	6812      	ldr	r2, [r2, #0]
 8020454:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 8020456:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 802045a:	fb00 1303 	mla	r3, r0, r3, r1
 802045e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020462:	18d3      	adds	r3, r2, r3
 8020464:	930c      	str	r3, [sp, #48]	@ 0x30
 8020466:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020468:	681b      	ldr	r3, [r3, #0]
 802046a:	9312      	str	r3, [sp, #72]	@ 0x48
 802046c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 802046e:	685e      	ldr	r6, [r3, #4]
 8020470:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8020474:	3604      	adds	r6, #4
 8020476:	930d      	str	r3, [sp, #52]	@ 0x34
 8020478:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 802047a:	2b00      	cmp	r3, #0
 802047c:	dc03      	bgt.n	8020486 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 802047e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8020480:	2b00      	cmp	r3, #0
 8020482:	f340 8378 	ble.w	8020b76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 8020486:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8020488:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802048c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020490:	1e48      	subs	r0, r1, #1
 8020492:	1e57      	subs	r7, r2, #1
 8020494:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020496:	2b00      	cmp	r3, #0
 8020498:	f340 818c 	ble.w	80207b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 802049c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802049e:	142b      	asrs	r3, r5, #16
 80204a0:	ea5f 4c24 	movs.w	ip, r4, asr #16
 80204a4:	d406      	bmi.n	80204b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80204a6:	4584      	cmp	ip, r0
 80204a8:	da04      	bge.n	80204b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80204aa:	2b00      	cmp	r3, #0
 80204ac:	db02      	blt.n	80204b4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 80204ae:	42bb      	cmp	r3, r7
 80204b0:	f2c0 8181 	blt.w	80207b6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 80204b4:	f11c 0c01 	adds.w	ip, ip, #1
 80204b8:	f100 816f 	bmi.w	802079a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80204bc:	4561      	cmp	r1, ip
 80204be:	f2c0 816c 	blt.w	802079a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80204c2:	3301      	adds	r3, #1
 80204c4:	f100 8169 	bmi.w	802079a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80204c8:	429a      	cmp	r2, r3
 80204ca:	f2c0 8166 	blt.w	802079a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 80204ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80204d0:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 80204d2:	931a      	str	r3, [sp, #104]	@ 0x68
 80204d4:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80204d6:	2b00      	cmp	r3, #0
 80204d8:	f340 818c 	ble.w	80207f4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80204dc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80204de:	ea4f 4c25 	mov.w	ip, r5, asr #16
 80204e2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80204e6:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80204ea:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80204ec:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 80204f0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80204f2:	141b      	asrs	r3, r3, #16
 80204f4:	f100 81d0 	bmi.w	8020898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 80204f8:	f100 38ff 	add.w	r8, r0, #4294967295
 80204fc:	4543      	cmp	r3, r8
 80204fe:	f280 81cb 	bge.w	8020898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020502:	f1bc 0f00 	cmp.w	ip, #0
 8020506:	f2c0 81c7 	blt.w	8020898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 802050a:	f10e 38ff 	add.w	r8, lr, #4294967295
 802050e:	45c4      	cmp	ip, r8
 8020510:	f280 81c2 	bge.w	8020898 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8020514:	b200      	sxth	r0, r0
 8020516:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020518:	fb0c 3300 	mla	r3, ip, r0, r3
 802051c:	eb04 0803 	add.w	r8, r4, r3
 8020520:	5ce3      	ldrb	r3, [r4, r3]
 8020522:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020526:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802052a:	2a00      	cmp	r2, #0
 802052c:	f000 81a9 	beq.w	8020882 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 8020530:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020534:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020538:	940e      	str	r4, [sp, #56]	@ 0x38
 802053a:	0e24      	lsrs	r4, r4, #24
 802053c:	9415      	str	r4, [sp, #84]	@ 0x54
 802053e:	b179      	cbz	r1, 8020560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020540:	eb08 0c00 	add.w	ip, r8, r0
 8020544:	f818 0000 	ldrb.w	r0, [r8, r0]
 8020548:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802054c:	900a      	str	r0, [sp, #40]	@ 0x28
 802054e:	0e00      	lsrs	r0, r0, #24
 8020550:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020552:	f89c 0001 	ldrb.w	r0, [ip, #1]
 8020556:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 802055a:	900f      	str	r0, [sp, #60]	@ 0x3c
 802055c:	0e00      	lsrs	r0, r0, #24
 802055e:	9016      	str	r0, [sp, #88]	@ 0x58
 8020560:	b292      	uxth	r2, r2
 8020562:	9815      	ldr	r0, [sp, #84]	@ 0x54
 8020564:	b289      	uxth	r1, r1
 8020566:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020568:	fb02 f901 	mul.w	r9, r2, r1
 802056c:	0112      	lsls	r2, r2, #4
 802056e:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 8020572:	eba2 0809 	sub.w	r8, r2, r9
 8020576:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802057a:	b289      	uxth	r1, r1
 802057c:	fa1f f888 	uxth.w	r8, r8
 8020580:	1a52      	subs	r2, r2, r1
 8020582:	fb08 f000 	mul.w	r0, r8, r0
 8020586:	b292      	uxth	r2, r2
 8020588:	fb02 000e 	mla	r0, r2, lr, r0
 802058c:	fb01 0004 	mla	r0, r1, r4, r0
 8020590:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020592:	fb09 0004 	mla	r0, r9, r4, r0
 8020596:	f3c0 2007 	ubfx	r0, r0, #8, #8
 802059a:	2800      	cmp	r0, #0
 802059c:	f000 80f2 	beq.w	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80205a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80205a4:	d01b      	beq.n	80205de <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 80205a6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80205aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80205ae:	fb0e fa0a 	mul.w	sl, lr, sl
 80205b2:	fb0e fe03 	mul.w	lr, lr, r3
 80205b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80205ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80205be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80205c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80205c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80205ca:	4453      	add	r3, sl
 80205cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80205d0:	0a1b      	lsrs	r3, r3, #8
 80205d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80205d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80205da:	ea43 030c 	orr.w	r3, r3, ip
 80205de:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80205e0:	2cff      	cmp	r4, #255	@ 0xff
 80205e2:	d021      	beq.n	8020628 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 80205e4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80205e6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80205ea:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80205ec:	fb04 fb0b 	mul.w	fp, r4, fp
 80205f0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80205f2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80205f6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80205f8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80205fc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020600:	fb04 fa0a 	mul.w	sl, r4, sl
 8020604:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020608:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802060c:	44de      	add	lr, fp
 802060e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020612:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020616:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802061a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802061e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020622:	ea4e 040a 	orr.w	r4, lr, sl
 8020626:	940e      	str	r4, [sp, #56]	@ 0x38
 8020628:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802062a:	2cff      	cmp	r4, #255	@ 0xff
 802062c:	d021      	beq.n	8020672 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 802062e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8020630:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020634:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020636:	fb04 fb0b 	mul.w	fp, r4, fp
 802063a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 802063c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020640:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020642:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020646:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 802064a:	fb04 fa0a 	mul.w	sl, r4, sl
 802064e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020652:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020656:	44de      	add	lr, fp
 8020658:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802065c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020660:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020664:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020668:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802066c:	ea4e 040a 	orr.w	r4, lr, sl
 8020670:	940a      	str	r4, [sp, #40]	@ 0x28
 8020672:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020674:	2cff      	cmp	r4, #255	@ 0xff
 8020676:	d021      	beq.n	80206bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 8020678:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802067a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802067e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8020680:	fb04 fb0b 	mul.w	fp, r4, fp
 8020684:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020686:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802068a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802068c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020690:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020694:	fb04 fa0a 	mul.w	sl, r4, sl
 8020698:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802069c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80206a0:	44de      	add	lr, fp
 80206a2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80206a6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80206aa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80206ae:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80206b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80206b6:	ea4e 040a 	orr.w	r4, lr, sl
 80206ba:	940f      	str	r4, [sp, #60]	@ 0x3c
 80206bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80206be:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 80206c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80206c6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80206ca:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80206cc:	fb08 fc0c 	mul.w	ip, r8, ip
 80206d0:	fb02 cc0e 	mla	ip, r2, lr, ip
 80206d4:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80206d8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80206da:	fb01 cc0e 	mla	ip, r1, lr, ip
 80206de:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 80206e2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80206e4:	fb09 cc0e 	mla	ip, r9, lr, ip
 80206e8:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 80206ec:	fb08 f80e 	mul.w	r8, r8, lr
 80206f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80206f4:	fb02 8303 	mla	r3, r2, r3, r8
 80206f8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80206fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80206fe:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020702:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8020704:	fb01 330a 	mla	r3, r1, sl, r3
 8020708:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 802070c:	fb09 3901 	mla	r9, r9, r1, r3
 8020710:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020712:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8020714:	4343      	muls	r3, r0
 8020716:	ea4f 2919 	mov.w	r9, r9, lsr #8
 802071a:	1c58      	adds	r0, r3, #1
 802071c:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8020720:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020724:	ea4c 0c09 	orr.w	ip, ip, r9
 8020728:	783b      	ldrb	r3, [r7, #0]
 802072a:	fa5f f28c 	uxtb.w	r2, ip
 802072e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8020732:	fb12 f201 	smulbb	r2, r2, r1
 8020736:	b2c0      	uxtb	r0, r0
 8020738:	fb03 2300 	mla	r3, r3, r0, r2
 802073c:	b29b      	uxth	r3, r3
 802073e:	1c5a      	adds	r2, r3, #1
 8020740:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020744:	787a      	ldrb	r2, [r7, #1]
 8020746:	fb12 f200 	smulbb	r2, r2, r0
 802074a:	121b      	asrs	r3, r3, #8
 802074c:	703b      	strb	r3, [r7, #0]
 802074e:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020752:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8020756:	fb03 2301 	mla	r3, r3, r1, r2
 802075a:	b29b      	uxth	r3, r3
 802075c:	1c5a      	adds	r2, r3, #1
 802075e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020762:	121b      	asrs	r3, r3, #8
 8020764:	707b      	strb	r3, [r7, #1]
 8020766:	78bb      	ldrb	r3, [r7, #2]
 8020768:	fb13 f000 	smulbb	r0, r3, r0
 802076c:	fb0c 0c01 	mla	ip, ip, r1, r0
 8020770:	fa1f fc8c 	uxth.w	ip, ip
 8020774:	f10c 0301 	add.w	r3, ip, #1
 8020778:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 802077c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8020780:	f887 c002 	strb.w	ip, [r7, #2]
 8020784:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020786:	3703      	adds	r7, #3
 8020788:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 802078a:	441a      	add	r2, r3
 802078c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 802078e:	441d      	add	r5, r3
 8020790:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8020792:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020794:	3b01      	subs	r3, #1
 8020796:	931a      	str	r3, [sp, #104]	@ 0x68
 8020798:	e69c      	b.n	80204d4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 802079a:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 802079c:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 802079e:	441c      	add	r4, r3
 80207a0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80207a2:	441d      	add	r5, r3
 80207a4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207a6:	9429      	str	r4, [sp, #164]	@ 0xa4
 80207a8:	3b01      	subs	r3, #1
 80207aa:	9309      	str	r3, [sp, #36]	@ 0x24
 80207ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207ae:	3303      	adds	r3, #3
 80207b0:	930c      	str	r3, [sp, #48]	@ 0x30
 80207b2:	e66f      	b.n	8020494 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 80207b4:	d026      	beq.n	8020804 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 80207b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207b8:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80207ba:	3b01      	subs	r3, #1
 80207bc:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80207be:	fb00 4003 	mla	r0, r0, r3, r4
 80207c2:	1400      	asrs	r0, r0, #16
 80207c4:	f53f ae83 	bmi.w	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207c8:	3901      	subs	r1, #1
 80207ca:	4288      	cmp	r0, r1
 80207cc:	f6bf ae7f 	bge.w	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207d0:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80207d2:	fb01 5303 	mla	r3, r1, r3, r5
 80207d6:	141b      	asrs	r3, r3, #16
 80207d8:	f53f ae79 	bmi.w	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207dc:	3a01      	subs	r2, #1
 80207de:	4293      	cmp	r3, r2
 80207e0:	f6bf ae75 	bge.w	80204ce <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80207e4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207e6:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 80207ea:	f103 0e03 	add.w	lr, r3, #3
 80207ee:	f1bb 0f00 	cmp.w	fp, #0
 80207f2:	dc71      	bgt.n	80208d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80207f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80207f6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 80207fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80207fc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020800:	4423      	add	r3, r4
 8020802:	930c      	str	r3, [sp, #48]	@ 0x30
 8020804:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020806:	2b00      	cmp	r3, #0
 8020808:	f340 81b5 	ble.w	8020b76 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 802080c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020810:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020812:	ee30 0a04 	vadd.f32	s0, s0, s8
 8020816:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802081a:	eef0 6a62 	vmov.f32	s13, s5
 802081e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020822:	ee31 1a05 	vadd.f32	s2, s2, s10
 8020826:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802082a:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 802082e:	eef0 6a43 	vmov.f32	s13, s6
 8020832:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8020836:	ee16 5a90 	vmov	r5, s13
 802083a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802083e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8020842:	ee77 2a62 	vsub.f32	s5, s14, s5
 8020846:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802084a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802084e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8020852:	ee12 2a90 	vmov	r2, s5
 8020856:	eef0 2a47 	vmov.f32	s5, s14
 802085a:	fb92 f3f3 	sdiv	r3, r2, r3
 802085e:	ee13 2a10 	vmov	r2, s6
 8020862:	932b      	str	r3, [sp, #172]	@ 0xac
 8020864:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8020866:	eeb0 3a67 	vmov.f32	s6, s15
 802086a:	fb92 f3f3 	sdiv	r3, r2, r3
 802086e:	932c      	str	r3, [sp, #176]	@ 0xb0
 8020870:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8020872:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8020874:	3b01      	subs	r3, #1
 8020876:	9319      	str	r3, [sp, #100]	@ 0x64
 8020878:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802087a:	bf08      	it	eq
 802087c:	4613      	moveq	r3, r2
 802087e:	9309      	str	r3, [sp, #36]	@ 0x24
 8020880:	e5fa      	b.n	8020478 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8020882:	2900      	cmp	r1, #0
 8020884:	f43f ae6c 	beq.w	8020560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020888:	f818 0000 	ldrb.w	r0, [r8, r0]
 802088c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8020890:	900a      	str	r0, [sp, #40]	@ 0x28
 8020892:	0e00      	lsrs	r0, r0, #24
 8020894:	9013      	str	r0, [sp, #76]	@ 0x4c
 8020896:	e663      	b.n	8020560 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8020898:	f113 0801 	adds.w	r8, r3, #1
 802089c:	f53f af72 	bmi.w	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80208a0:	4540      	cmp	r0, r8
 80208a2:	f6ff af6f 	blt.w	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80208a6:	f11c 0801 	adds.w	r8, ip, #1
 80208aa:	f53f af6b 	bmi.w	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80208ae:	45c6      	cmp	lr, r8
 80208b0:	f6ff af68 	blt.w	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80208b4:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80208b6:	b200      	sxth	r0, r0
 80208b8:	9302      	str	r3, [sp, #8]
 80208ba:	fa0f f38e 	sxth.w	r3, lr
 80208be:	9000      	str	r0, [sp, #0]
 80208c0:	9301      	str	r3, [sp, #4]
 80208c2:	4633      	mov	r3, r6
 80208c4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80208c6:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80208ca:	e9cd c203 	strd	ip, r2, [sp, #12]
 80208ce:	4639      	mov	r1, r7
 80208d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80208d2:	f7ff fc74 	bl	80201be <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 80208d6:	e755      	b.n	8020784 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 80208d8:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80208da:	f3c5 3003 	ubfx	r0, r5, #12, #4
 80208de:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 80208e0:	f3c3 3203 	ubfx	r2, r3, #12, #4
 80208e4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80208e6:	1427      	asrs	r7, r4, #16
 80208e8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80208ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80208ee:	142b      	asrs	r3, r5, #16
 80208f0:	fb01 7303 	mla	r3, r1, r3, r7
 80208f4:	18e7      	adds	r7, r4, r3
 80208f6:	5ce3      	ldrb	r3, [r4, r3]
 80208f8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80208fc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8020900:	2a00      	cmp	r2, #0
 8020902:	f000 812e 	beq.w	8020b62 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 8020906:	f897 8001 	ldrb.w	r8, [r7, #1]
 802090a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802090e:	9410      	str	r4, [sp, #64]	@ 0x40
 8020910:	0e24      	lsrs	r4, r4, #24
 8020912:	9417      	str	r4, [sp, #92]	@ 0x5c
 8020914:	b170      	cbz	r0, 8020934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020916:	eb07 0801 	add.w	r8, r7, r1
 802091a:	5c79      	ldrb	r1, [r7, r1]
 802091c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020920:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020922:	0e09      	lsrs	r1, r1, #24
 8020924:	9114      	str	r1, [sp, #80]	@ 0x50
 8020926:	f898 1001 	ldrb.w	r1, [r8, #1]
 802092a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802092e:	9111      	str	r1, [sp, #68]	@ 0x44
 8020930:	0e09      	lsrs	r1, r1, #24
 8020932:	9118      	str	r1, [sp, #96]	@ 0x60
 8020934:	b292      	uxth	r2, r2
 8020936:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8020938:	b280      	uxth	r0, r0
 802093a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802093c:	fb02 f900 	mul.w	r9, r2, r0
 8020940:	0112      	lsls	r2, r2, #4
 8020942:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020946:	eba2 0809 	sub.w	r8, r2, r9
 802094a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 802094e:	b280      	uxth	r0, r0
 8020950:	fa1f f888 	uxth.w	r8, r8
 8020954:	1a12      	subs	r2, r2, r0
 8020956:	fb08 f101 	mul.w	r1, r8, r1
 802095a:	b292      	uxth	r2, r2
 802095c:	fb02 110c 	mla	r1, r2, ip, r1
 8020960:	fb00 1104 	mla	r1, r0, r4, r1
 8020964:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020966:	fb09 1104 	mla	r1, r9, r4, r1
 802096a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802096e:	2900      	cmp	r1, #0
 8020970:	f000 80ec 	beq.w	8020b4c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 8020974:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8020978:	d019      	beq.n	80209ae <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 802097a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802097e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020982:	fb0c fa0a 	mul.w	sl, ip, sl
 8020986:	fb0c fc03 	mul.w	ip, ip, r3
 802098a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802098e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020992:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 8020996:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802099a:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 802099e:	4453      	add	r3, sl
 80209a0:	0a3f      	lsrs	r7, r7, #8
 80209a2:	0a1b      	lsrs	r3, r3, #8
 80209a4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80209a8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80209ac:	433b      	orrs	r3, r7
 80209ae:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80209b0:	2cff      	cmp	r4, #255	@ 0xff
 80209b2:	d020      	beq.n	80209f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 80209b4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80209b6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80209ba:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80209bc:	4367      	muls	r7, r4
 80209be:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80209c0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80209c4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80209c8:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 80209ca:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80209ce:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80209d2:	fb04 fa0a 	mul.w	sl, r4, sl
 80209d6:	44bc      	add	ip, r7
 80209d8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80209dc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80209e0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80209e4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80209e8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80209ec:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80209f0:	ea4c 040a 	orr.w	r4, ip, sl
 80209f4:	9410      	str	r4, [sp, #64]	@ 0x40
 80209f6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80209f8:	2cff      	cmp	r4, #255	@ 0xff
 80209fa:	d020      	beq.n	8020a3e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 80209fc:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80209fe:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020a02:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020a04:	4367      	muls	r7, r4
 8020a06:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a08:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a0c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a10:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8020a12:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020a16:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a1a:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a1e:	44bc      	add	ip, r7
 8020a20:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020a24:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a28:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a2c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a30:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a34:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a38:	ea4c 040a 	orr.w	r4, ip, sl
 8020a3c:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020a3e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020a40:	2cff      	cmp	r4, #255	@ 0xff
 8020a42:	d020      	beq.n	8020a86 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 8020a44:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020a46:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020a4a:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020a4c:	4367      	muls	r7, r4
 8020a4e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020a50:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8020a54:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020a58:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 8020a5a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8020a5e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a62:	fb04 fa0a 	mul.w	sl, r4, sl
 8020a66:	44bc      	add	ip, r7
 8020a68:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8020a6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020a70:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8020a74:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020a78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020a7c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020a80:	ea4c 040a 	orr.w	r4, ip, sl
 8020a84:	9411      	str	r4, [sp, #68]	@ 0x44
 8020a86:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020a88:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 8020a8c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020a90:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8020a94:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020a96:	fb08 f707 	mul.w	r7, r8, r7
 8020a9a:	fb02 770c 	mla	r7, r2, ip, r7
 8020a9e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020aa2:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8020aa4:	fb00 770c 	mla	r7, r0, ip, r7
 8020aa8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8020aac:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020aae:	fb09 770c 	mla	r7, r9, ip, r7
 8020ab2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 8020ab6:	fb08 f80c 	mul.w	r8, r8, ip
 8020aba:	0a3f      	lsrs	r7, r7, #8
 8020abc:	fb02 8303 	mla	r3, r2, r3, r8
 8020ac0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8020ac2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 8020ac6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8020aca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8020acc:	fb00 330a 	mla	r3, r0, sl, r3
 8020ad0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 8020ad4:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8020ad6:	fb09 3c0c 	mla	ip, r9, ip, r3
 8020ada:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8020adc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020ae0:	434b      	muls	r3, r1
 8020ae2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020ae6:	1c59      	adds	r1, r3, #1
 8020ae8:	ea47 070c 	orr.w	r7, r7, ip
 8020aec:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8020af0:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8020af4:	b2fa      	uxtb	r2, r7
 8020af6:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 8020afa:	fb12 f200 	smulbb	r2, r2, r0
 8020afe:	b2c9      	uxtb	r1, r1
 8020b00:	fb03 2301 	mla	r3, r3, r1, r2
 8020b04:	b29b      	uxth	r3, r3
 8020b06:	1c5a      	adds	r2, r3, #1
 8020b08:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b0c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8020b10:	fb12 f201 	smulbb	r2, r2, r1
 8020b14:	121b      	asrs	r3, r3, #8
 8020b16:	f80e 3c03 	strb.w	r3, [lr, #-3]
 8020b1a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 8020b1e:	0c3f      	lsrs	r7, r7, #16
 8020b20:	fb03 2300 	mla	r3, r3, r0, r2
 8020b24:	b29b      	uxth	r3, r3
 8020b26:	1c5a      	adds	r2, r3, #1
 8020b28:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020b2c:	121b      	asrs	r3, r3, #8
 8020b2e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8020b32:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8020b36:	fb13 f101 	smulbb	r1, r3, r1
 8020b3a:	fb07 1700 	mla	r7, r7, r0, r1
 8020b3e:	b2bf      	uxth	r7, r7
 8020b40:	1c7b      	adds	r3, r7, #1
 8020b42:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 8020b46:	123f      	asrs	r7, r7, #8
 8020b48:	f80e 7c01 	strb.w	r7, [lr, #-1]
 8020b4c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8020b4e:	f10e 0e03 	add.w	lr, lr, #3
 8020b52:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020b54:	f10b 3bff 	add.w	fp, fp, #4294967295
 8020b58:	441a      	add	r2, r3
 8020b5a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020b5c:	9229      	str	r2, [sp, #164]	@ 0xa4
 8020b5e:	441d      	add	r5, r3
 8020b60:	e645      	b.n	80207ee <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 8020b62:	2800      	cmp	r0, #0
 8020b64:	f43f aee6 	beq.w	8020934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020b68:	5c79      	ldrb	r1, [r7, r1]
 8020b6a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020b6e:	910b      	str	r1, [sp, #44]	@ 0x2c
 8020b70:	0e09      	lsrs	r1, r1, #24
 8020b72:	9114      	str	r1, [sp, #80]	@ 0x50
 8020b74:	e6de      	b.n	8020934 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 8020b76:	b01f      	add	sp, #124	@ 0x7c
 8020b78:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08020b7c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 8020b7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020b80:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 8020b84:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 8020b88:	2d00      	cmp	r5, #0
 8020b8a:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 8020b8e:	fb05 700e 	mla	r0, r5, lr, r7
 8020b92:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 8020b96:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 8020b9a:	eb02 0800 	add.w	r8, r2, r0
 8020b9e:	f2c0 8105 	blt.w	8020dac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020ba2:	45a9      	cmp	r9, r5
 8020ba4:	f340 8102 	ble.w	8020dac <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 8020ba8:	2f00      	cmp	r7, #0
 8020baa:	f2c0 80fd 	blt.w	8020da8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020bae:	45be      	cmp	lr, r7
 8020bb0:	f340 80fa 	ble.w	8020da8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 8020bb4:	5c12      	ldrb	r2, [r2, r0]
 8020bb6:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8020bba:	1c7a      	adds	r2, r7, #1
 8020bbc:	f100 80f9 	bmi.w	8020db2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020bc0:	4596      	cmp	lr, r2
 8020bc2:	f340 80f6 	ble.w	8020db2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 8020bc6:	2c00      	cmp	r4, #0
 8020bc8:	f000 80f5 	beq.w	8020db6 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 8020bcc:	f898 2001 	ldrb.w	r2, [r8, #1]
 8020bd0:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8020bd4:	3501      	adds	r5, #1
 8020bd6:	f100 80f2 	bmi.w	8020dbe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020bda:	45a9      	cmp	r9, r5
 8020bdc:	f340 80ef 	ble.w	8020dbe <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 8020be0:	f1bc 0f00 	cmp.w	ip, #0
 8020be4:	f000 80ee 	beq.w	8020dc4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 8020be8:	2f00      	cmp	r7, #0
 8020bea:	f2c0 80e6 	blt.w	8020dba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020bee:	45be      	cmp	lr, r7
 8020bf0:	f340 80e3 	ble.w	8020dba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 8020bf4:	f818 200e 	ldrb.w	r2, [r8, lr]
 8020bf8:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 8020bfc:	3701      	adds	r7, #1
 8020bfe:	f100 80e4 	bmi.w	8020dca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8020c02:	45be      	cmp	lr, r7
 8020c04:	f340 80e1 	ble.w	8020dca <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 8020c08:	2c00      	cmp	r4, #0
 8020c0a:	f000 80e0 	beq.w	8020dce <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 8020c0e:	44c6      	add	lr, r8
 8020c10:	f89e 2001 	ldrb.w	r2, [lr, #1]
 8020c14:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8020c18:	b2a3      	uxth	r3, r4
 8020c1a:	fa1f fc8c 	uxth.w	ip, ip
 8020c1e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 8020c22:	fb0c fe03 	mul.w	lr, ip, r3
 8020c26:	011b      	lsls	r3, r3, #4
 8020c28:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 8020c2c:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 8020c30:	eba3 070e 	sub.w	r7, r3, lr
 8020c34:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 8020c38:	ea4f 6915 	mov.w	r9, r5, lsr #24
 8020c3c:	fa1f f48c 	uxth.w	r4, ip
 8020c40:	b2bf      	uxth	r7, r7
 8020c42:	1b1b      	subs	r3, r3, r4
 8020c44:	ea4f 6812 	mov.w	r8, r2, lsr #24
 8020c48:	fb07 fc0a 	mul.w	ip, r7, sl
 8020c4c:	b29b      	uxth	r3, r3
 8020c4e:	fb03 cc0b 	mla	ip, r3, fp, ip
 8020c52:	9300      	str	r3, [sp, #0]
 8020c54:	fb04 cc09 	mla	ip, r4, r9, ip
 8020c58:	fb0e cc08 	mla	ip, lr, r8, ip
 8020c5c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 8020c60:	9301      	str	r3, [sp, #4]
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	f000 809d 	beq.w	8020da2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 8020c68:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 8020c6c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020c70:	fb0b fc0c 	mul.w	ip, fp, ip
 8020c74:	fb0b f606 	mul.w	r6, fp, r6
 8020c78:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 8020c7c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8020c80:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 8020c84:	44dc      	add	ip, fp
 8020c86:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 8020c8a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020c8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020c92:	fb0a fb0b 	mul.w	fp, sl, fp
 8020c96:	fb0a fa00 	mul.w	sl, sl, r0
 8020c9a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 8020c9e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8020ca2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 8020ca6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8020caa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 8020cae:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020cb2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 8020cb6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020cba:	0a36      	lsrs	r6, r6, #8
 8020cbc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020cc0:	44dc      	add	ip, fp
 8020cc2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 8020cc6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8020cca:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8020cce:	fb09 fb0b 	mul.w	fp, r9, fp
 8020cd2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020cd6:	fb09 f905 	mul.w	r9, r9, r5
 8020cda:	ea4f 201b 	mov.w	r0, fp, lsr #8
 8020cde:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8020ce2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 8020ce6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020cea:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020cee:	fb0c fc07 	mul.w	ip, ip, r7
 8020cf2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 8020cf6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 8020cfa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8020cfe:	4458      	add	r0, fp
 8020d00:	fb08 f505 	mul.w	r5, r8, r5
 8020d04:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8020d08:	fb08 f802 	mul.w	r8, r8, r2
 8020d0c:	0a00      	lsrs	r0, r0, #8
 8020d0e:	0a2a      	lsrs	r2, r5, #8
 8020d10:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 8020d14:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8020d18:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8020d1c:	4415      	add	r5, r2
 8020d1e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 8020d22:	0a2d      	lsrs	r5, r5, #8
 8020d24:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8020d28:	9a00      	ldr	r2, [sp, #0]
 8020d2a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 8020d2e:	fb03 cc02 	mla	ip, r3, r2, ip
 8020d32:	ea4f 2818 	mov.w	r8, r8, lsr #8
 8020d36:	9b01      	ldr	r3, [sp, #4]
 8020d38:	fb05 c50e 	mla	r5, r5, lr, ip
 8020d3c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 8020d40:	43db      	mvns	r3, r3
 8020d42:	fb00 5004 	mla	r0, r0, r4, r5
 8020d46:	b2db      	uxtb	r3, r3
 8020d48:	0a00      	lsrs	r0, r0, #8
 8020d4a:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 8020d4e:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 8020d52:	4378      	muls	r0, r7
 8020d54:	fb02 0006 	mla	r0, r2, r6, r0
 8020d58:	780a      	ldrb	r2, [r1, #0]
 8020d5a:	fb0e 0e08 	mla	lr, lr, r8, r0
 8020d5e:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 8020d62:	fb04 e000 	mla	r0, r4, r0, lr
 8020d66:	fb02 f403 	mul.w	r4, r2, r3
 8020d6a:	0a00      	lsrs	r0, r0, #8
 8020d6c:	1c62      	adds	r2, r4, #1
 8020d6e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8020d72:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020d76:	4328      	orrs	r0, r5
 8020d78:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8020d7c:	700a      	strb	r2, [r1, #0]
 8020d7e:	784a      	ldrb	r2, [r1, #1]
 8020d80:	435a      	muls	r2, r3
 8020d82:	1c54      	adds	r4, r2, #1
 8020d84:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 8020d88:	0a02      	lsrs	r2, r0, #8
 8020d8a:	0c00      	lsrs	r0, r0, #16
 8020d8c:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8020d90:	704a      	strb	r2, [r1, #1]
 8020d92:	788a      	ldrb	r2, [r1, #2]
 8020d94:	4353      	muls	r3, r2
 8020d96:	1c5a      	adds	r2, r3, #1
 8020d98:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8020d9c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020da0:	7088      	strb	r0, [r1, #2]
 8020da2:	b003      	add	sp, #12
 8020da4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020da8:	2600      	movs	r6, #0
 8020daa:	e706      	b.n	8020bba <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 8020dac:	2000      	movs	r0, #0
 8020dae:	4606      	mov	r6, r0
 8020db0:	e710      	b.n	8020bd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020db2:	2000      	movs	r0, #0
 8020db4:	e70e      	b.n	8020bd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020db6:	4620      	mov	r0, r4
 8020db8:	e70c      	b.n	8020bd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 8020dba:	2500      	movs	r5, #0
 8020dbc:	e71e      	b.n	8020bfc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 8020dbe:	2200      	movs	r2, #0
 8020dc0:	4615      	mov	r5, r2
 8020dc2:	e729      	b.n	8020c18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020dc4:	4662      	mov	r2, ip
 8020dc6:	4665      	mov	r5, ip
 8020dc8:	e726      	b.n	8020c18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020dca:	2200      	movs	r2, #0
 8020dcc:	e724      	b.n	8020c18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 8020dce:	4622      	mov	r2, r4
 8020dd0:	e722      	b.n	8020c18 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

08020dd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8020dd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8020dd6:	b09b      	sub	sp, #108	@ 0x6c
 8020dd8:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020ddc:	9218      	str	r2, [sp, #96]	@ 0x60
 8020dde:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8020de0:	9019      	str	r0, [sp, #100]	@ 0x64
 8020de2:	9116      	str	r1, [sp, #88]	@ 0x58
 8020de4:	6850      	ldr	r0, [r2, #4]
 8020de6:	9307      	str	r3, [sp, #28]
 8020de8:	6812      	ldr	r2, [r2, #0]
 8020dea:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8020dec:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8020df0:	fb00 1303 	mla	r3, r0, r3, r1
 8020df4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020df8:	18d3      	adds	r3, r2, r3
 8020dfa:	930a      	str	r3, [sp, #40]	@ 0x28
 8020dfc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020dfe:	681b      	ldr	r3, [r3, #0]
 8020e00:	930f      	str	r3, [sp, #60]	@ 0x3c
 8020e02:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020e04:	685e      	ldr	r6, [r3, #4]
 8020e06:	3604      	adds	r6, #4
 8020e08:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8020e0a:	2b00      	cmp	r3, #0
 8020e0c:	dc03      	bgt.n	8020e16 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 8020e0e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8020e10:	2b00      	cmp	r3, #0
 8020e12:	f340 834f 	ble.w	80214b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8020e16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020e18:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8020e1c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8020e20:	1e48      	subs	r0, r1, #1
 8020e22:	1e57      	subs	r7, r2, #1
 8020e24:	9b07      	ldr	r3, [sp, #28]
 8020e26:	2b00      	cmp	r3, #0
 8020e28:	f340 8178 	ble.w	802111c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8020e2c:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8020e2e:	142b      	asrs	r3, r5, #16
 8020e30:	ea5f 4c24 	movs.w	ip, r4, asr #16
 8020e34:	d406      	bmi.n	8020e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e36:	4584      	cmp	ip, r0
 8020e38:	da04      	bge.n	8020e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e3a:	2b00      	cmp	r3, #0
 8020e3c:	db02      	blt.n	8020e44 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8020e3e:	42bb      	cmp	r3, r7
 8020e40:	f2c0 816d 	blt.w	802111e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 8020e44:	f11c 0c01 	adds.w	ip, ip, #1
 8020e48:	f100 815b 	bmi.w	8021102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020e4c:	4561      	cmp	r1, ip
 8020e4e:	f2c0 8158 	blt.w	8021102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020e52:	3301      	adds	r3, #1
 8020e54:	f100 8155 	bmi.w	8021102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020e58:	429a      	cmp	r2, r3
 8020e5a:	f2c0 8152 	blt.w	8021102 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 8020e5e:	9b07      	ldr	r3, [sp, #28]
 8020e60:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8020e62:	9317      	str	r3, [sp, #92]	@ 0x5c
 8020e64:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	f340 8178 	ble.w	802115c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 8020e6c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020e6e:	ea4f 4c25 	mov.w	ip, r5, asr #16
 8020e72:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8020e76:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8020e7a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8020e7c:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 8020e80:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8020e82:	141b      	asrs	r3, r3, #16
 8020e84:	f100 81ba 	bmi.w	80211fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020e88:	f101 38ff 	add.w	r8, r1, #4294967295
 8020e8c:	4543      	cmp	r3, r8
 8020e8e:	f280 81b5 	bge.w	80211fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020e92:	f1bc 0f00 	cmp.w	ip, #0
 8020e96:	f2c0 81b1 	blt.w	80211fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020e9a:	f10e 38ff 	add.w	r8, lr, #4294967295
 8020e9e:	45c4      	cmp	ip, r8
 8020ea0:	f280 81ac 	bge.w	80211fc <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8020ea4:	b209      	sxth	r1, r1
 8020ea6:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8020ea8:	fb0c 3301 	mla	r3, ip, r1, r3
 8020eac:	eb04 0803 	add.w	r8, r4, r3
 8020eb0:	5ce3      	ldrb	r3, [r4, r3]
 8020eb2:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020eb6:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 8020eba:	2a00      	cmp	r2, #0
 8020ebc:	f000 8193 	beq.w	80211e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 8020ec0:	f898 c001 	ldrb.w	ip, [r8, #1]
 8020ec4:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 8020ec8:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020eca:	0e24      	lsrs	r4, r4, #24
 8020ecc:	9412      	str	r4, [sp, #72]	@ 0x48
 8020ece:	b178      	cbz	r0, 8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8020ed0:	eb08 0c01 	add.w	ip, r8, r1
 8020ed4:	f818 1001 	ldrb.w	r1, [r8, r1]
 8020ed8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020edc:	9108      	str	r1, [sp, #32]
 8020ede:	0e09      	lsrs	r1, r1, #24
 8020ee0:	9110      	str	r1, [sp, #64]	@ 0x40
 8020ee2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8020ee6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8020eea:	910c      	str	r1, [sp, #48]	@ 0x30
 8020eec:	0e09      	lsrs	r1, r1, #24
 8020eee:	9113      	str	r1, [sp, #76]	@ 0x4c
 8020ef0:	b292      	uxth	r2, r2
 8020ef2:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8020ef4:	b280      	uxth	r0, r0
 8020ef6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020ef8:	fb02 f900 	mul.w	r9, r2, r0
 8020efc:	0112      	lsls	r2, r2, #4
 8020efe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8020f02:	eba2 0809 	sub.w	r8, r2, r9
 8020f06:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 8020f0a:	b280      	uxth	r0, r0
 8020f0c:	fa1f f888 	uxth.w	r8, r8
 8020f10:	1a12      	subs	r2, r2, r0
 8020f12:	fb08 f101 	mul.w	r1, r8, r1
 8020f16:	b292      	uxth	r2, r2
 8020f18:	fb02 110e 	mla	r1, r2, lr, r1
 8020f1c:	fb00 1104 	mla	r1, r0, r4, r1
 8020f20:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8020f22:	fb09 1104 	mla	r1, r9, r4, r1
 8020f26:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8020f2a:	2900      	cmp	r1, #0
 8020f2c:	f000 80de 	beq.w	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8020f30:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8020f34:	d01b      	beq.n	8020f6e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 8020f36:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 8020f3a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8020f3e:	fb0e fa0a 	mul.w	sl, lr, sl
 8020f42:	fb0e fe03 	mul.w	lr, lr, r3
 8020f46:	ea4f 231a 	mov.w	r3, sl, lsr #8
 8020f4a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8020f4e:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8020f52:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020f56:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8020f5a:	4453      	add	r3, sl
 8020f5c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8020f60:	0a1b      	lsrs	r3, r3, #8
 8020f62:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8020f66:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 8020f6a:	ea43 030c 	orr.w	r3, r3, ip
 8020f6e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f70:	2cff      	cmp	r4, #255	@ 0xff
 8020f72:	d021      	beq.n	8020fb8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 8020f74:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020f76:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020f7a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f7c:	fb04 fb0b 	mul.w	fp, r4, fp
 8020f80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8020f82:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020f86:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8020f88:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020f8c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020f90:	fb04 fa0a 	mul.w	sl, r4, sl
 8020f94:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020f98:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020f9c:	44de      	add	lr, fp
 8020f9e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fa2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020fa6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020faa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fae:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020fb2:	ea4e 040a 	orr.w	r4, lr, sl
 8020fb6:	940b      	str	r4, [sp, #44]	@ 0x2c
 8020fb8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020fba:	2cff      	cmp	r4, #255	@ 0xff
 8020fbc:	d021      	beq.n	8021002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8020fbe:	9c08      	ldr	r4, [sp, #32]
 8020fc0:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8020fc4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020fc6:	fb04 fb0b 	mul.w	fp, r4, fp
 8020fca:	9c08      	ldr	r4, [sp, #32]
 8020fcc:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8020fd0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8020fd2:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8020fd6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8020fda:	fb04 fa0a 	mul.w	sl, r4, sl
 8020fde:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020fe2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8020fe6:	44de      	add	lr, fp
 8020fe8:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8020fec:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8020ff0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8020ff4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8020ff8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8020ffc:	ea4e 040a 	orr.w	r4, lr, sl
 8021000:	9408      	str	r4, [sp, #32]
 8021002:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021004:	2cff      	cmp	r4, #255	@ 0xff
 8021006:	d021      	beq.n	802104c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 8021008:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802100a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802100e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021010:	fb04 fb0b 	mul.w	fp, r4, fp
 8021014:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8021016:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802101a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 802101c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8021020:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8021024:	fb04 fa0a 	mul.w	sl, r4, sl
 8021028:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802102c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8021030:	44de      	add	lr, fp
 8021032:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8021036:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802103a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802103e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8021042:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021046:	ea4e 040a 	orr.w	r4, lr, sl
 802104a:	940c      	str	r4, [sp, #48]	@ 0x30
 802104c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 802104e:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8021052:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8021056:	43c9      	mvns	r1, r1
 8021058:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802105c:	9c08      	ldr	r4, [sp, #32]
 802105e:	b2c9      	uxtb	r1, r1
 8021060:	fb08 fc0c 	mul.w	ip, r8, ip
 8021064:	fb02 cc0e 	mla	ip, r2, lr, ip
 8021068:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802106c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802106e:	fb00 cc0e 	mla	ip, r0, lr, ip
 8021072:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8021076:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8021078:	fb09 cc0e 	mla	ip, r9, lr, ip
 802107c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8021080:	fb08 f80e 	mul.w	r8, r8, lr
 8021084:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021088:	fb02 8303 	mla	r3, r2, r3, r8
 802108c:	9a08      	ldr	r2, [sp, #32]
 802108e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021092:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 8021096:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8021098:	fb00 330a 	mla	r3, r0, sl, r3
 802109c:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 80210a0:	fb09 3900 	mla	r9, r9, r0, r3
 80210a4:	783b      	ldrb	r3, [r7, #0]
 80210a6:	ea4f 2919 	mov.w	r9, r9, lsr #8
 80210aa:	fb03 f201 	mul.w	r2, r3, r1
 80210ae:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 80210b2:	1c53      	adds	r3, r2, #1
 80210b4:	ea4c 0c09 	orr.w	ip, ip, r9
 80210b8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80210bc:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 80210c0:	703b      	strb	r3, [r7, #0]
 80210c2:	787b      	ldrb	r3, [r7, #1]
 80210c4:	434b      	muls	r3, r1
 80210c6:	1c5a      	adds	r2, r3, #1
 80210c8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80210cc:	ea4f 231c 	mov.w	r3, ip, lsr #8
 80210d0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80210d4:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 80210d8:	707b      	strb	r3, [r7, #1]
 80210da:	78bb      	ldrb	r3, [r7, #2]
 80210dc:	4359      	muls	r1, r3
 80210de:	1c4b      	adds	r3, r1, #1
 80210e0:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 80210e4:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 80210e8:	f887 c002 	strb.w	ip, [r7, #2]
 80210ec:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 80210ee:	3703      	adds	r7, #3
 80210f0:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80210f2:	441a      	add	r2, r3
 80210f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80210f6:	441d      	add	r5, r3
 80210f8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80210fa:	9225      	str	r2, [sp, #148]	@ 0x94
 80210fc:	3b01      	subs	r3, #1
 80210fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8021100:	e6b0      	b.n	8020e64 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 8021102:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021104:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021106:	441c      	add	r4, r3
 8021108:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802110a:	441d      	add	r5, r3
 802110c:	9b07      	ldr	r3, [sp, #28]
 802110e:	9425      	str	r4, [sp, #148]	@ 0x94
 8021110:	3b01      	subs	r3, #1
 8021112:	9307      	str	r3, [sp, #28]
 8021114:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021116:	3303      	adds	r3, #3
 8021118:	930a      	str	r3, [sp, #40]	@ 0x28
 802111a:	e683      	b.n	8020e24 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 802111c:	d026      	beq.n	802116c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 802111e:	9b07      	ldr	r3, [sp, #28]
 8021120:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021122:	3b01      	subs	r3, #1
 8021124:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021126:	fb00 4003 	mla	r0, r0, r3, r4
 802112a:	1400      	asrs	r0, r0, #16
 802112c:	f53f ae97 	bmi.w	8020e5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021130:	3901      	subs	r1, #1
 8021132:	4288      	cmp	r0, r1
 8021134:	f6bf ae93 	bge.w	8020e5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021138:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 802113a:	fb01 5303 	mla	r3, r1, r3, r5
 802113e:	141b      	asrs	r3, r3, #16
 8021140:	f53f ae8d 	bmi.w	8020e5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 8021144:	3a01      	subs	r2, #1
 8021146:	4293      	cmp	r3, r2
 8021148:	f6bf ae89 	bge.w	8020e5e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 802114c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802114e:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8021152:	f103 0e03 	add.w	lr, r3, #3
 8021156:	f1bb 0f00 	cmp.w	fp, #0
 802115a:	dc6d      	bgt.n	8021238 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 802115c:	9b07      	ldr	r3, [sp, #28]
 802115e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021162:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021164:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021168:	4423      	add	r3, r4
 802116a:	930a      	str	r3, [sp, #40]	@ 0x28
 802116c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 802116e:	2b00      	cmp	r3, #0
 8021170:	f340 81a0 	ble.w	80214b4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 8021174:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021178:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 802117a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802117e:	eeb0 6a62 	vmov.f32	s12, s5
 8021182:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8021186:	ee31 1a05 	vadd.f32	s2, s2, s10
 802118a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802118e:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 8021192:	eeb0 6a43 	vmov.f32	s12, s6
 8021196:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 802119a:	ee16 5a10 	vmov	r5, s12
 802119e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80211a2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80211a6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80211aa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80211ae:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80211b2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80211b6:	ee12 2a90 	vmov	r2, s5
 80211ba:	eef0 2a47 	vmov.f32	s5, s14
 80211be:	fb92 f3f3 	sdiv	r3, r2, r3
 80211c2:	ee13 2a10 	vmov	r2, s6
 80211c6:	9327      	str	r3, [sp, #156]	@ 0x9c
 80211c8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80211ca:	eeb0 3a67 	vmov.f32	s6, s15
 80211ce:	fb92 f3f3 	sdiv	r3, r2, r3
 80211d2:	9328      	str	r3, [sp, #160]	@ 0xa0
 80211d4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80211d6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 80211d8:	3b01      	subs	r3, #1
 80211da:	9316      	str	r3, [sp, #88]	@ 0x58
 80211dc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80211de:	bf08      	it	eq
 80211e0:	4613      	moveq	r3, r2
 80211e2:	9307      	str	r3, [sp, #28]
 80211e4:	e610      	b.n	8020e08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 80211e6:	2800      	cmp	r0, #0
 80211e8:	f43f ae82 	beq.w	8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80211ec:	f818 1001 	ldrb.w	r1, [r8, r1]
 80211f0:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80211f4:	9108      	str	r1, [sp, #32]
 80211f6:	0e09      	lsrs	r1, r1, #24
 80211f8:	9110      	str	r1, [sp, #64]	@ 0x40
 80211fa:	e679      	b.n	8020ef0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 80211fc:	f113 0801 	adds.w	r8, r3, #1
 8021200:	f53f af74 	bmi.w	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021204:	4541      	cmp	r1, r8
 8021206:	f6ff af71 	blt.w	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802120a:	f11c 0801 	adds.w	r8, ip, #1
 802120e:	f53f af6d 	bmi.w	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021212:	45c6      	cmp	lr, r8
 8021214:	f6ff af6a 	blt.w	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021218:	b209      	sxth	r1, r1
 802121a:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 802121e:	fa0f f38e 	sxth.w	r3, lr
 8021222:	9100      	str	r1, [sp, #0]
 8021224:	4639      	mov	r1, r7
 8021226:	9301      	str	r3, [sp, #4]
 8021228:	4633      	mov	r3, r6
 802122a:	e9cd 2004 	strd	r2, r0, [sp, #16]
 802122e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8021230:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021232:	f7ff fca3 	bl	8020b7c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 8021236:	e759      	b.n	80210ec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8021238:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 802123a:	f3c5 3003 	ubfx	r0, r5, #12, #4
 802123e:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 8021240:	f3c3 3203 	ubfx	r2, r3, #12, #4
 8021244:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021246:	1427      	asrs	r7, r4, #16
 8021248:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 802124a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 802124e:	142b      	asrs	r3, r5, #16
 8021250:	fb01 7303 	mla	r3, r1, r3, r7
 8021254:	18e7      	adds	r7, r4, r3
 8021256:	5ce3      	ldrb	r3, [r4, r3]
 8021258:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802125c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8021260:	2a00      	cmp	r2, #0
 8021262:	f000 811d 	beq.w	80214a0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 8021266:	f897 8001 	ldrb.w	r8, [r7, #1]
 802126a:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 802126e:	940d      	str	r4, [sp, #52]	@ 0x34
 8021270:	0e24      	lsrs	r4, r4, #24
 8021272:	9414      	str	r4, [sp, #80]	@ 0x50
 8021274:	b170      	cbz	r0, 8021294 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 8021276:	eb07 0801 	add.w	r8, r7, r1
 802127a:	5c79      	ldrb	r1, [r7, r1]
 802127c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8021280:	9109      	str	r1, [sp, #36]	@ 0x24
 8021282:	0e09      	lsrs	r1, r1, #24
 8021284:	9111      	str	r1, [sp, #68]	@ 0x44
 8021286:	f898 1001 	ldrb.w	r1, [r8, #1]
 802128a:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802128e:	910e      	str	r1, [sp, #56]	@ 0x38
 8021290:	0e09      	lsrs	r1, r1, #24
 8021292:	9115      	str	r1, [sp, #84]	@ 0x54
 8021294:	b292      	uxth	r2, r2
 8021296:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021298:	b280      	uxth	r0, r0
 802129a:	fb02 f900 	mul.w	r9, r2, r0
 802129e:	0112      	lsls	r2, r2, #4
 80212a0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80212a4:	eba2 0809 	sub.w	r8, r2, r9
 80212a8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80212ac:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 80212ae:	b280      	uxth	r0, r0
 80212b0:	fa1f f888 	uxth.w	r8, r8
 80212b4:	1a09      	subs	r1, r1, r0
 80212b6:	fb08 f202 	mul.w	r2, r8, r2
 80212ba:	b289      	uxth	r1, r1
 80212bc:	fb01 220c 	mla	r2, r1, ip, r2
 80212c0:	fb00 2204 	mla	r2, r0, r4, r2
 80212c4:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80212c6:	fb09 2204 	mla	r2, r9, r4, r2
 80212ca:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80212ce:	2a00      	cmp	r2, #0
 80212d0:	f000 80db 	beq.w	802148a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 80212d4:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 80212d8:	d019      	beq.n	802130e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 80212da:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80212de:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80212e2:	fb0c fa0a 	mul.w	sl, ip, sl
 80212e6:	fb0c fc03 	mul.w	ip, ip, r3
 80212ea:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80212ee:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80212f2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80212f6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80212fa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80212fe:	4453      	add	r3, sl
 8021300:	0a3f      	lsrs	r7, r7, #8
 8021302:	0a1b      	lsrs	r3, r3, #8
 8021304:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 8021308:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802130c:	433b      	orrs	r3, r7
 802130e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 8021310:	2cff      	cmp	r4, #255	@ 0xff
 8021312:	d020      	beq.n	8021356 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 8021314:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021316:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802131a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802131c:	4367      	muls	r7, r4
 802131e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021320:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8021324:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021328:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802132a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802132e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021332:	fb04 fa0a 	mul.w	sl, r4, sl
 8021336:	44bc      	add	ip, r7
 8021338:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802133c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021340:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8021344:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021348:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802134c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021350:	ea4c 040a 	orr.w	r4, ip, sl
 8021354:	940d      	str	r4, [sp, #52]	@ 0x34
 8021356:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021358:	2cff      	cmp	r4, #255	@ 0xff
 802135a:	d020      	beq.n	802139e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 802135c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802135e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8021362:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021364:	4367      	muls	r7, r4
 8021366:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8021368:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802136c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8021370:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8021372:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8021376:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802137a:	fb04 fa0a 	mul.w	sl, r4, sl
 802137e:	44bc      	add	ip, r7
 8021380:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8021384:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021388:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802138c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8021390:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8021394:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8021398:	ea4c 040a 	orr.w	r4, ip, sl
 802139c:	9409      	str	r4, [sp, #36]	@ 0x24
 802139e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80213a0:	2cff      	cmp	r4, #255	@ 0xff
 80213a2:	d020      	beq.n	80213e6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 80213a4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80213a6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80213aa:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80213ac:	4367      	muls	r7, r4
 80213ae:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80213b0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80213b4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80213b8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80213ba:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80213be:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213c2:	fb04 fa0a 	mul.w	sl, r4, sl
 80213c6:	44bc      	add	ip, r7
 80213c8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80213cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80213d0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80213d4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80213d8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80213dc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80213e0:	ea4c 040a 	orr.w	r4, ip, sl
 80213e4:	940e      	str	r4, [sp, #56]	@ 0x38
 80213e6:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80213e8:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 80213ec:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80213f0:	43d2      	mvns	r2, r2
 80213f2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80213f6:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80213f8:	b2d2      	uxtb	r2, r2
 80213fa:	fb08 f707 	mul.w	r7, r8, r7
 80213fe:	fb01 770c 	mla	r7, r1, ip, r7
 8021402:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021406:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8021408:	fb00 770c 	mla	r7, r0, ip, r7
 802140c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8021410:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8021412:	fb09 770c 	mla	r7, r9, ip, r7
 8021416:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 802141a:	fb08 f80c 	mul.w	r8, r8, ip
 802141e:	0a3f      	lsrs	r7, r7, #8
 8021420:	fb01 8303 	mla	r3, r1, r3, r8
 8021424:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021426:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 802142a:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 802142e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8021430:	fb00 330a 	mla	r3, r0, sl, r3
 8021434:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 8021438:	fb09 3c0c 	mla	ip, r9, ip, r3
 802143c:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8021440:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8021444:	fb03 f102 	mul.w	r1, r3, r2
 8021448:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802144c:	1c4b      	adds	r3, r1, #1
 802144e:	ea47 070c 	orr.w	r7, r7, ip
 8021452:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021456:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 802145a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802145e:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 8021462:	4353      	muls	r3, r2
 8021464:	1c59      	adds	r1, r3, #1
 8021466:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802146a:	0a3b      	lsrs	r3, r7, #8
 802146c:	0c3f      	lsrs	r7, r7, #16
 802146e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 8021472:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8021476:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 802147a:	435a      	muls	r2, r3
 802147c:	1c53      	adds	r3, r2, #1
 802147e:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8021482:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 8021486:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802148a:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 802148c:	f10e 0e03 	add.w	lr, lr, #3
 8021490:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8021492:	f10b 3bff 	add.w	fp, fp, #4294967295
 8021496:	441a      	add	r2, r3
 8021498:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802149a:	9225      	str	r2, [sp, #148]	@ 0x94
 802149c:	441d      	add	r5, r3
 802149e:	e65a      	b.n	8021156 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 80214a0:	2800      	cmp	r0, #0
 80214a2:	f43f aef7 	beq.w	8021294 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80214a6:	5c79      	ldrb	r1, [r7, r1]
 80214a8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 80214ac:	9109      	str	r1, [sp, #36]	@ 0x24
 80214ae:	0e09      	lsrs	r1, r1, #24
 80214b0:	9111      	str	r1, [sp, #68]	@ 0x44
 80214b2:	e6ef      	b.n	8021294 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 80214b4:	b01b      	add	sp, #108	@ 0x6c
 80214b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080214ba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 80214ba:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80214be:	b08d      	sub	sp, #52	@ 0x34
 80214c0:	468b      	mov	fp, r1
 80214c2:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 80214c6:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 80214ca:	fb0c 5703 	mla	r7, ip, r3, r5
 80214ce:	f1bc 0f00 	cmp.w	ip, #0
 80214d2:	910b      	str	r1, [sp, #44]	@ 0x2c
 80214d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80214d8:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 80214dc:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 80214e0:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 80214e4:	eb02 0607 	add.w	r6, r2, r7
 80214e8:	f89b 4000 	ldrb.w	r4, [fp]
 80214ec:	f89b 0001 	ldrb.w	r0, [fp, #1]
 80214f0:	f89b 1002 	ldrb.w	r1, [fp, #2]
 80214f4:	f2c0 80c1 	blt.w	802167a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80214f8:	45e6      	cmp	lr, ip
 80214fa:	f340 80be 	ble.w	802167a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 80214fe:	2d00      	cmp	r5, #0
 8021500:	f2c0 80b7 	blt.w	8021672 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 8021504:	42ab      	cmp	r3, r5
 8021506:	f340 80b4 	ble.w	8021672 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 802150a:	5dd2      	ldrb	r2, [r2, r7]
 802150c:	9205      	str	r2, [sp, #20]
 802150e:	7872      	ldrb	r2, [r6, #1]
 8021510:	9206      	str	r2, [sp, #24]
 8021512:	78b2      	ldrb	r2, [r6, #2]
 8021514:	9207      	str	r2, [sp, #28]
 8021516:	1c6a      	adds	r2, r5, #1
 8021518:	f100 80b6 	bmi.w	8021688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802151c:	4293      	cmp	r3, r2
 802151e:	f340 80b3 	ble.w	8021688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 8021522:	f1b8 0f00 	cmp.w	r8, #0
 8021526:	f000 80af 	beq.w	8021688 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 802152a:	78f2      	ldrb	r2, [r6, #3]
 802152c:	9201      	str	r2, [sp, #4]
 802152e:	7932      	ldrb	r2, [r6, #4]
 8021530:	9202      	str	r2, [sp, #8]
 8021532:	7972      	ldrb	r2, [r6, #5]
 8021534:	9203      	str	r2, [sp, #12]
 8021536:	f11c 0c01 	adds.w	ip, ip, #1
 802153a:	f100 80ad 	bmi.w	8021698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802153e:	45e6      	cmp	lr, ip
 8021540:	f340 80aa 	ble.w	8021698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 8021544:	f1ba 0f00 	cmp.w	sl, #0
 8021548:	f000 80a6 	beq.w	8021698 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 802154c:	2d00      	cmp	r5, #0
 802154e:	f2c0 809f 	blt.w	8021690 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021552:	42ab      	cmp	r3, r5
 8021554:	f340 809c 	ble.w	8021690 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 8021558:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 802155c:	f816 9002 	ldrb.w	r9, [r6, r2]
 8021560:	2203      	movs	r2, #3
 8021562:	fb03 6c02 	mla	ip, r3, r2, r6
 8021566:	f89c 7001 	ldrb.w	r7, [ip, #1]
 802156a:	f89c e002 	ldrb.w	lr, [ip, #2]
 802156e:	9704      	str	r7, [sp, #16]
 8021570:	3501      	adds	r5, #1
 8021572:	f100 8098 	bmi.w	80216a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021576:	42ab      	cmp	r3, r5
 8021578:	f340 8095 	ble.w	80216a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 802157c:	f1b8 0f00 	cmp.w	r8, #0
 8021580:	f000 8091 	beq.w	80216a6 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 8021584:	f04f 0c03 	mov.w	ip, #3
 8021588:	fb13 c20c 	smlabb	r2, r3, ip, ip
 802158c:	5cb5      	ldrb	r5, [r6, r2]
 802158e:	fb03 620c 	mla	r2, r3, ip, r6
 8021592:	fb03 630c 	mla	r3, r3, ip, r6
 8021596:	7912      	ldrb	r2, [r2, #4]
 8021598:	795e      	ldrb	r6, [r3, #5]
 802159a:	fa1f f388 	uxth.w	r3, r8
 802159e:	fa1f fc8a 	uxth.w	ip, sl
 80215a2:	fb03 f70c 	mul.w	r7, r3, ip
 80215a6:	011b      	lsls	r3, r3, #4
 80215a8:	9708      	str	r7, [sp, #32]
 80215aa:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 80215ae:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 80215b2:	1bdb      	subs	r3, r3, r7
 80215b4:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 80215b8:	fa1f fc8c 	uxth.w	ip, ip
 80215bc:	b29b      	uxth	r3, r3
 80215be:	9709      	str	r7, [sp, #36]	@ 0x24
 80215c0:	ebaa 0a0c 	sub.w	sl, sl, ip
 80215c4:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 80215c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80215c8:	fa1f fa8a 	uxth.w	sl, sl
 80215cc:	ea6f 0807 	mvn.w	r8, r7
 80215d0:	9f01      	ldr	r7, [sp, #4]
 80215d2:	435f      	muls	r7, r3
 80215d4:	9b05      	ldr	r3, [sp, #20]
 80215d6:	fa5f f888 	uxtb.w	r8, r8
 80215da:	fb0a 7703 	mla	r7, sl, r3, r7
 80215de:	9b08      	ldr	r3, [sp, #32]
 80215e0:	fb14 f408 	smulbb	r4, r4, r8
 80215e4:	fb0c 7709 	mla	r7, ip, r9, r7
 80215e8:	fb10 f008 	smulbb	r0, r0, r8
 80215ec:	fb11 f108 	smulbb	r1, r1, r8
 80215f0:	fb03 7705 	mla	r7, r3, r5, r7
 80215f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80215f6:	f3c7 2707 	ubfx	r7, r7, #8, #8
 80215fa:	fb07 4703 	mla	r7, r7, r3, r4
 80215fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021600:	b2bf      	uxth	r7, r7
 8021602:	1c7c      	adds	r4, r7, #1
 8021604:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 8021608:	1224      	asrs	r4, r4, #8
 802160a:	f88b 4000 	strb.w	r4, [fp]
 802160e:	9c02      	ldr	r4, [sp, #8]
 8021610:	435c      	muls	r4, r3
 8021612:	9b06      	ldr	r3, [sp, #24]
 8021614:	fb0a 4403 	mla	r4, sl, r3, r4
 8021618:	9b04      	ldr	r3, [sp, #16]
 802161a:	fb0c 4403 	mla	r4, ip, r3, r4
 802161e:	9b08      	ldr	r3, [sp, #32]
 8021620:	fb03 4402 	mla	r4, r3, r2, r4
 8021624:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021626:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8021628:	f3c4 2407 	ubfx	r4, r4, #8, #8
 802162c:	fb04 0403 	mla	r4, r4, r3, r0
 8021630:	9b03      	ldr	r3, [sp, #12]
 8021632:	435a      	muls	r2, r3
 8021634:	b2a4      	uxth	r4, r4
 8021636:	4613      	mov	r3, r2
 8021638:	9a07      	ldr	r2, [sp, #28]
 802163a:	1c60      	adds	r0, r4, #1
 802163c:	fb0a 3a02 	mla	sl, sl, r2, r3
 8021640:	9b08      	ldr	r3, [sp, #32]
 8021642:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 8021646:	fb0c ac0e 	mla	ip, ip, lr, sl
 802164a:	1224      	asrs	r4, r4, #8
 802164c:	fb03 c606 	mla	r6, r3, r6, ip
 8021650:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021652:	f88b 4001 	strb.w	r4, [fp, #1]
 8021656:	f3c6 2607 	ubfx	r6, r6, #8, #8
 802165a:	fb06 1103 	mla	r1, r6, r3, r1
 802165e:	b289      	uxth	r1, r1
 8021660:	1c4e      	adds	r6, r1, #1
 8021662:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 8021666:	1209      	asrs	r1, r1, #8
 8021668:	f88b 1002 	strb.w	r1, [fp, #2]
 802166c:	b00d      	add	sp, #52	@ 0x34
 802166e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021672:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021676:	9405      	str	r4, [sp, #20]
 8021678:	e74d      	b.n	8021516 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 802167a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802167e:	9401      	str	r4, [sp, #4]
 8021680:	9405      	str	r4, [sp, #20]
 8021682:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8021686:	e756      	b.n	8021536 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021688:	e9cd 0102 	strd	r0, r1, [sp, #8]
 802168c:	9401      	str	r4, [sp, #4]
 802168e:	e752      	b.n	8021536 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 8021690:	468e      	mov	lr, r1
 8021692:	9004      	str	r0, [sp, #16]
 8021694:	46a1      	mov	r9, r4
 8021696:	e76b      	b.n	8021570 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 8021698:	460e      	mov	r6, r1
 802169a:	4602      	mov	r2, r0
 802169c:	4625      	mov	r5, r4
 802169e:	468e      	mov	lr, r1
 80216a0:	9004      	str	r0, [sp, #16]
 80216a2:	46a1      	mov	r9, r4
 80216a4:	e779      	b.n	802159a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 80216a6:	460e      	mov	r6, r1
 80216a8:	4602      	mov	r2, r0
 80216aa:	4625      	mov	r5, r4
 80216ac:	e775      	b.n	802159a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

080216ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80216ae:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80216b2:	b09f      	sub	sp, #124	@ 0x7c
 80216b4:	920e      	str	r2, [sp, #56]	@ 0x38
 80216b6:	9307      	str	r3, [sp, #28]
 80216b8:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 80216ba:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 80216be:	901d      	str	r0, [sp, #116]	@ 0x74
 80216c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80216c2:	6850      	ldr	r0, [r2, #4]
 80216c4:	910b      	str	r1, [sp, #44]	@ 0x2c
 80216c6:	6812      	ldr	r2, [r2, #0]
 80216c8:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 80216cc:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 80216d0:	fb00 1303 	mla	r3, r0, r3, r1
 80216d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80216d8:	18d3      	adds	r3, r2, r3
 80216da:	9308      	str	r3, [sp, #32]
 80216dc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80216de:	681b      	ldr	r3, [r3, #0]
 80216e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80216e2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80216e4:	43db      	mvns	r3, r3
 80216e6:	b2db      	uxtb	r3, r3
 80216e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80216ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80216ec:	2b00      	cmp	r3, #0
 80216ee:	dc03      	bgt.n	80216f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 80216f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80216f2:	2b00      	cmp	r3, #0
 80216f4:	f340 81f5 	ble.w	8021ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 80216f8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80216fa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80216fe:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021702:	1e48      	subs	r0, r1, #1
 8021704:	1e54      	subs	r4, r2, #1
 8021706:	9b07      	ldr	r3, [sp, #28]
 8021708:	2b00      	cmp	r3, #0
 802170a:	f340 80d5 	ble.w	80218b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 802170e:	ea5f 452a 	movs.w	r5, sl, asr #16
 8021712:	ea4f 4328 	mov.w	r3, r8, asr #16
 8021716:	d406      	bmi.n	8021726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021718:	4285      	cmp	r5, r0
 802171a:	da04      	bge.n	8021726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 802171c:	2b00      	cmp	r3, #0
 802171e:	db02      	blt.n	8021726 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8021720:	42a3      	cmp	r3, r4
 8021722:	f2c0 80ca 	blt.w	80218ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8021726:	3501      	adds	r5, #1
 8021728:	f100 80bb 	bmi.w	80218a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802172c:	42a9      	cmp	r1, r5
 802172e:	f2c0 80b8 	blt.w	80218a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021732:	3301      	adds	r3, #1
 8021734:	f100 80b5 	bmi.w	80218a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 8021738:	429a      	cmp	r2, r3
 802173a:	f2c0 80b2 	blt.w	80218a2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 802173e:	9b07      	ldr	r3, [sp, #28]
 8021740:	9d08      	ldr	r5, [sp, #32]
 8021742:	930d      	str	r3, [sp, #52]	@ 0x34
 8021744:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8021746:	2b00      	cmp	r3, #0
 8021748:	f340 80d6 	ble.w	80218f8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 802174c:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 802174e:	ea4f 4428 	mov.w	r4, r8, asr #16
 8021752:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8021754:	f3ca 3203 	ubfx	r2, sl, #12, #4
 8021758:	68c6      	ldr	r6, [r0, #12]
 802175a:	ea5f 402a 	movs.w	r0, sl, asr #16
 802175e:	f3c8 3103 	ubfx	r1, r8, #12, #4
 8021762:	689b      	ldr	r3, [r3, #8]
 8021764:	f100 810f 	bmi.w	8021986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021768:	1e5f      	subs	r7, r3, #1
 802176a:	42b8      	cmp	r0, r7
 802176c:	f280 810b 	bge.w	8021986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021770:	2c00      	cmp	r4, #0
 8021772:	f2c0 8108 	blt.w	8021986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 8021776:	1e77      	subs	r7, r6, #1
 8021778:	42bc      	cmp	r4, r7
 802177a:	f280 8104 	bge.w	8021986 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 802177e:	b21b      	sxth	r3, r3
 8021780:	fb04 0003 	mla	r0, r4, r3, r0
 8021784:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8021786:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802178a:	1826      	adds	r6, r4, r0
 802178c:	5c24      	ldrb	r4, [r4, r0]
 802178e:	78b7      	ldrb	r7, [r6, #2]
 8021790:	7870      	ldrb	r0, [r6, #1]
 8021792:	970f      	str	r7, [sp, #60]	@ 0x3c
 8021794:	7977      	ldrb	r7, [r6, #5]
 8021796:	f896 e003 	ldrb.w	lr, [r6, #3]
 802179a:	f896 c004 	ldrb.w	ip, [r6, #4]
 802179e:	9710      	str	r7, [sp, #64]	@ 0x40
 80217a0:	b1c9      	cbz	r1, 80217d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 80217a2:	f04f 0b03 	mov.w	fp, #3
 80217a6:	f06f 0904 	mvn.w	r9, #4
 80217aa:	3605      	adds	r6, #5
 80217ac:	fb13 930b 	smlabb	r3, r3, fp, r9
 80217b0:	eb06 0b03 	add.w	fp, r6, r3
 80217b4:	5cf3      	ldrb	r3, [r6, r3]
 80217b6:	9311      	str	r3, [sp, #68]	@ 0x44
 80217b8:	f89b 3001 	ldrb.w	r3, [fp, #1]
 80217bc:	9313      	str	r3, [sp, #76]	@ 0x4c
 80217be:	f89b 3002 	ldrb.w	r3, [fp, #2]
 80217c2:	9315      	str	r3, [sp, #84]	@ 0x54
 80217c4:	f89b 3003 	ldrb.w	r3, [fp, #3]
 80217c8:	9312      	str	r3, [sp, #72]	@ 0x48
 80217ca:	f89b 3004 	ldrb.w	r3, [fp, #4]
 80217ce:	9314      	str	r3, [sp, #80]	@ 0x50
 80217d0:	f89b 3005 	ldrb.w	r3, [fp, #5]
 80217d4:	9316      	str	r3, [sp, #88]	@ 0x58
 80217d6:	b292      	uxth	r2, r2
 80217d8:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80217da:	b289      	uxth	r1, r1
 80217dc:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 80217e0:	fb02 f601 	mul.w	r6, r2, r1
 80217e4:	0112      	lsls	r2, r2, #4
 80217e6:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 80217ea:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 80217ee:	1b92      	subs	r2, r2, r6
 80217f0:	b289      	uxth	r1, r1
 80217f2:	b292      	uxth	r2, r2
 80217f4:	eba9 0901 	sub.w	r9, r9, r1
 80217f8:	fb02 fe0e 	mul.w	lr, r2, lr
 80217fc:	fa1f f989 	uxth.w	r9, r9
 8021800:	fb02 fc0c 	mul.w	ip, r2, ip
 8021804:	fb09 e404 	mla	r4, r9, r4, lr
 8021808:	f895 e000 	ldrb.w	lr, [r5]
 802180c:	fb09 c000 	mla	r0, r9, r0, ip
 8021810:	fb01 4407 	mla	r4, r1, r7, r4
 8021814:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8021816:	fb06 4407 	mla	r4, r6, r7, r4
 802181a:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 802181c:	fb1e fe07 	smulbb	lr, lr, r7
 8021820:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021824:	fb04 e403 	mla	r4, r4, r3, lr
 8021828:	b2a4      	uxth	r4, r4
 802182a:	f104 0e01 	add.w	lr, r4, #1
 802182e:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 8021832:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8021834:	fb01 0004 	mla	r0, r1, r4, r0
 8021838:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802183a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 802183e:	fb06 0004 	mla	r0, r6, r4, r0
 8021842:	786c      	ldrb	r4, [r5, #1]
 8021844:	f885 e000 	strb.w	lr, [r5]
 8021848:	fb14 f407 	smulbb	r4, r4, r7
 802184c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021850:	fb00 4003 	mla	r0, r0, r3, r4
 8021854:	b280      	uxth	r0, r0
 8021856:	1c44      	adds	r4, r0, #1
 8021858:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 802185c:	1200      	asrs	r0, r0, #8
 802185e:	7068      	strb	r0, [r5, #1]
 8021860:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021862:	4342      	muls	r2, r0
 8021864:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021866:	fb09 2200 	mla	r2, r9, r0, r2
 802186a:	9815      	ldr	r0, [sp, #84]	@ 0x54
 802186c:	fb01 2100 	mla	r1, r1, r0, r2
 8021870:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8021872:	fb06 1602 	mla	r6, r6, r2, r1
 8021876:	78a9      	ldrb	r1, [r5, #2]
 8021878:	fb11 f107 	smulbb	r1, r1, r7
 802187c:	f3c6 2607 	ubfx	r6, r6, #8, #8
 8021880:	fb06 1303 	mla	r3, r6, r3, r1
 8021884:	b29b      	uxth	r3, r3
 8021886:	1c5e      	adds	r6, r3, #1
 8021888:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 802188c:	121b      	asrs	r3, r3, #8
 802188e:	70ab      	strb	r3, [r5, #2]
 8021890:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021892:	3503      	adds	r5, #3
 8021894:	449a      	add	sl, r3
 8021896:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021898:	4498      	add	r8, r3
 802189a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802189c:	3b01      	subs	r3, #1
 802189e:	930d      	str	r3, [sp, #52]	@ 0x34
 80218a0:	e750      	b.n	8021744 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80218a2:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 80218a4:	449a      	add	sl, r3
 80218a6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 80218a8:	4498      	add	r8, r3
 80218aa:	9b07      	ldr	r3, [sp, #28]
 80218ac:	3b01      	subs	r3, #1
 80218ae:	9307      	str	r3, [sp, #28]
 80218b0:	9b08      	ldr	r3, [sp, #32]
 80218b2:	3303      	adds	r3, #3
 80218b4:	9308      	str	r3, [sp, #32]
 80218b6:	e726      	b.n	8021706 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 80218b8:	d026      	beq.n	8021908 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 80218ba:	9b07      	ldr	r3, [sp, #28]
 80218bc:	982b      	ldr	r0, [sp, #172]	@ 0xac
 80218be:	3b01      	subs	r3, #1
 80218c0:	fb00 a003 	mla	r0, r0, r3, sl
 80218c4:	1400      	asrs	r0, r0, #16
 80218c6:	f53f af3a 	bmi.w	802173e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218ca:	3901      	subs	r1, #1
 80218cc:	4288      	cmp	r0, r1
 80218ce:	f6bf af36 	bge.w	802173e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218d2:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 80218d4:	fb01 8303 	mla	r3, r1, r3, r8
 80218d8:	141b      	asrs	r3, r3, #16
 80218da:	f53f af30 	bmi.w	802173e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218de:	3a01      	subs	r2, #1
 80218e0:	4293      	cmp	r3, r2
 80218e2:	f6bf af2c 	bge.w	802173e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80218e6:	9b08      	ldr	r3, [sp, #32]
 80218e8:	f8dd c01c 	ldr.w	ip, [sp, #28]
 80218ec:	1cdd      	adds	r5, r3, #3
 80218ee:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 80218f2:	f1bc 0f00 	cmp.w	ip, #0
 80218f6:	dc5f      	bgt.n	80219b8 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 80218f8:	9b07      	ldr	r3, [sp, #28]
 80218fa:	9a08      	ldr	r2, [sp, #32]
 80218fc:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8021900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021904:	441a      	add	r2, r3
 8021906:	9208      	str	r2, [sp, #32]
 8021908:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 802190a:	2b00      	cmp	r3, #0
 802190c:	f340 80e9 	ble.w	8021ae2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 8021910:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021914:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021916:	ee30 0a04 	vadd.f32	s0, s0, s8
 802191a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802191e:	eef0 6a62 	vmov.f32	s13, s5
 8021922:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021926:	ee31 1a05 	vadd.f32	s2, s2, s10
 802192a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802192e:	ee16 aa90 	vmov	sl, s13
 8021932:	eef0 6a43 	vmov.f32	s13, s6
 8021936:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802193a:	ee16 8a90 	vmov	r8, s13
 802193e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021942:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021946:	ee77 2a62 	vsub.f32	s5, s14, s5
 802194a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802194e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021952:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021956:	ee12 2a90 	vmov	r2, s5
 802195a:	eef0 2a47 	vmov.f32	s5, s14
 802195e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021962:	ee13 2a10 	vmov	r2, s6
 8021966:	932b      	str	r3, [sp, #172]	@ 0xac
 8021968:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802196a:	eeb0 3a67 	vmov.f32	s6, s15
 802196e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021972:	932c      	str	r3, [sp, #176]	@ 0xb0
 8021974:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021976:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8021978:	3b01      	subs	r3, #1
 802197a:	930b      	str	r3, [sp, #44]	@ 0x2c
 802197c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 802197e:	bf08      	it	eq
 8021980:	4613      	moveq	r3, r2
 8021982:	9307      	str	r3, [sp, #28]
 8021984:	e6b1      	b.n	80216ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021986:	1c47      	adds	r7, r0, #1
 8021988:	d482      	bmi.n	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802198a:	42bb      	cmp	r3, r7
 802198c:	db80      	blt.n	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802198e:	1c67      	adds	r7, r4, #1
 8021990:	f53f af7e 	bmi.w	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 8021994:	42be      	cmp	r6, r7
 8021996:	f6ff af7b 	blt.w	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 802199a:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 802199c:	b236      	sxth	r6, r6
 802199e:	9001      	str	r0, [sp, #4]
 80219a0:	b21b      	sxth	r3, r3
 80219a2:	9600      	str	r6, [sp, #0]
 80219a4:	981d      	ldr	r0, [sp, #116]	@ 0x74
 80219a6:	e9cd 1704 	strd	r1, r7, [sp, #16]
 80219aa:	e9cd 4202 	strd	r4, r2, [sp, #8]
 80219ae:	4629      	mov	r1, r5
 80219b0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80219b2:	f7ff fd82 	bl	80214ba <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 80219b6:	e76b      	b.n	8021890 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 80219b8:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 80219ba:	ea4f 402a 	mov.w	r0, sl, asr #16
 80219be:	f3c8 3203 	ubfx	r2, r8, #12, #4
 80219c2:	f3ca 3303 	ubfx	r3, sl, #12, #4
 80219c6:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 80219ca:	ea4f 4128 	mov.w	r1, r8, asr #16
 80219ce:	fb07 0101 	mla	r1, r7, r1, r0
 80219d2:	980a      	ldr	r0, [sp, #40]	@ 0x28
 80219d4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80219d8:	1844      	adds	r4, r0, r1
 80219da:	5c40      	ldrb	r0, [r0, r1]
 80219dc:	78a6      	ldrb	r6, [r4, #2]
 80219de:	7861      	ldrb	r1, [r4, #1]
 80219e0:	960f      	str	r6, [sp, #60]	@ 0x3c
 80219e2:	78e6      	ldrb	r6, [r4, #3]
 80219e4:	910d      	str	r1, [sp, #52]	@ 0x34
 80219e6:	9610      	str	r6, [sp, #64]	@ 0x40
 80219e8:	f894 9004 	ldrb.w	r9, [r4, #4]
 80219ec:	f894 b005 	ldrb.w	fp, [r4, #5]
 80219f0:	b192      	cbz	r2, 8021a18 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 80219f2:	f06f 0604 	mvn.w	r6, #4
 80219f6:	2103      	movs	r1, #3
 80219f8:	3405      	adds	r4, #5
 80219fa:	fb17 6701 	smlabb	r7, r7, r1, r6
 80219fe:	19e6      	adds	r6, r4, r7
 8021a00:	5de4      	ldrb	r4, [r4, r7]
 8021a02:	9417      	str	r4, [sp, #92]	@ 0x5c
 8021a04:	7874      	ldrb	r4, [r6, #1]
 8021a06:	9419      	str	r4, [sp, #100]	@ 0x64
 8021a08:	78b4      	ldrb	r4, [r6, #2]
 8021a0a:	941b      	str	r4, [sp, #108]	@ 0x6c
 8021a0c:	78f4      	ldrb	r4, [r6, #3]
 8021a0e:	9418      	str	r4, [sp, #96]	@ 0x60
 8021a10:	7934      	ldrb	r4, [r6, #4]
 8021a12:	941a      	str	r4, [sp, #104]	@ 0x68
 8021a14:	7974      	ldrb	r4, [r6, #5]
 8021a16:	941c      	str	r4, [sp, #112]	@ 0x70
 8021a18:	b29b      	uxth	r3, r3
 8021a1a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 8021a1c:	b292      	uxth	r2, r2
 8021a1e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8021a20:	3503      	adds	r5, #3
 8021a22:	f10c 3cff 	add.w	ip, ip, #4294967295
 8021a26:	fb03 f402 	mul.w	r4, r3, r2
 8021a2a:	011b      	lsls	r3, r3, #4
 8021a2c:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 8021a30:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 8021a34:	1b1b      	subs	r3, r3, r4
 8021a36:	b292      	uxth	r2, r2
 8021a38:	b29b      	uxth	r3, r3
 8021a3a:	1ab6      	subs	r6, r6, r2
 8021a3c:	435f      	muls	r7, r3
 8021a3e:	b2b6      	uxth	r6, r6
 8021a40:	fb03 f909 	mul.w	r9, r3, r9
 8021a44:	fb03 fb0b 	mul.w	fp, r3, fp
 8021a48:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8021a4a:	fb06 7000 	mla	r0, r6, r0, r7
 8021a4e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8021a50:	fb06 bb03 	mla	fp, r6, r3, fp
 8021a54:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8021a56:	fb02 0007 	mla	r0, r2, r7, r0
 8021a5a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8021a5c:	fb02 bb03 	mla	fp, r2, r3, fp
 8021a60:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8021a62:	fb04 0007 	mla	r0, r4, r7, r0
 8021a66:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 8021a6a:	fb17 f701 	smulbb	r7, r7, r1
 8021a6e:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8021a72:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8021a74:	fb00 700e 	mla	r0, r0, lr, r7
 8021a78:	fb06 9101 	mla	r1, r6, r1, r9
 8021a7c:	b280      	uxth	r0, r0
 8021a7e:	1c47      	adds	r7, r0, #1
 8021a80:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 8021a84:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8021a86:	1200      	asrs	r0, r0, #8
 8021a88:	f805 0c06 	strb.w	r0, [r5, #-6]
 8021a8c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021a8e:	fb02 1100 	mla	r1, r2, r0, r1
 8021a92:	981a      	ldr	r0, [sp, #104]	@ 0x68
 8021a94:	fb04 1100 	mla	r1, r4, r0, r1
 8021a98:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 8021a9c:	fb04 b403 	mla	r4, r4, r3, fp
 8021aa0:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 8021aa4:	fb10 f007 	smulbb	r0, r0, r7
 8021aa8:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8021aac:	fb13 f307 	smulbb	r3, r3, r7
 8021ab0:	f3c4 2407 	ubfx	r4, r4, #8, #8
 8021ab4:	fb01 010e 	mla	r1, r1, lr, r0
 8021ab8:	fb04 340e 	mla	r4, r4, lr, r3
 8021abc:	b289      	uxth	r1, r1
 8021abe:	b2a4      	uxth	r4, r4
 8021ac0:	1c48      	adds	r0, r1, #1
 8021ac2:	1c63      	adds	r3, r4, #1
 8021ac4:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 8021ac8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8021acc:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8021ace:	1209      	asrs	r1, r1, #8
 8021ad0:	1224      	asrs	r4, r4, #8
 8021ad2:	449a      	add	sl, r3
 8021ad4:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021ad6:	f805 1c05 	strb.w	r1, [r5, #-5]
 8021ada:	f805 4c04 	strb.w	r4, [r5, #-4]
 8021ade:	4498      	add	r8, r3
 8021ae0:	e707      	b.n	80218f2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 8021ae2:	b01f      	add	sp, #124	@ 0x7c
 8021ae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021ae8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 8021ae8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021aec:	b087      	sub	sp, #28
 8021aee:	780d      	ldrb	r5, [r1, #0]
 8021af0:	784c      	ldrb	r4, [r1, #1]
 8021af2:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 8021af6:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 8021afa:	9004      	str	r0, [sp, #16]
 8021afc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 8021b00:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 8021b04:	9005      	str	r0, [sp, #20]
 8021b06:	fb06 bc03 	mla	ip, r6, r3, fp
 8021b0a:	2e00      	cmp	r6, #0
 8021b0c:	7888      	ldrb	r0, [r1, #2]
 8021b0e:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8021b12:	eb02 090c 	add.w	r9, r2, ip
 8021b16:	f2c0 8084 	blt.w	8021c22 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021b1a:	42b7      	cmp	r7, r6
 8021b1c:	f340 8081 	ble.w	8021c22 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 8021b20:	f1bb 0f00 	cmp.w	fp, #0
 8021b24:	db79      	blt.n	8021c1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021b26:	455b      	cmp	r3, fp
 8021b28:	dd77      	ble.n	8021c1a <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 8021b2a:	f812 200c 	ldrb.w	r2, [r2, ip]
 8021b2e:	9201      	str	r2, [sp, #4]
 8021b30:	f899 2001 	ldrb.w	r2, [r9, #1]
 8021b34:	9202      	str	r2, [sp, #8]
 8021b36:	f899 2002 	ldrb.w	r2, [r9, #2]
 8021b3a:	9203      	str	r2, [sp, #12]
 8021b3c:	f11b 0201 	adds.w	r2, fp, #1
 8021b40:	d476      	bmi.n	8021c30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021b42:	4293      	cmp	r3, r2
 8021b44:	dd74      	ble.n	8021c30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021b46:	9a04      	ldr	r2, [sp, #16]
 8021b48:	2a00      	cmp	r2, #0
 8021b4a:	d071      	beq.n	8021c30 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 8021b4c:	f899 8003 	ldrb.w	r8, [r9, #3]
 8021b50:	f899 c004 	ldrb.w	ip, [r9, #4]
 8021b54:	f899 a005 	ldrb.w	sl, [r9, #5]
 8021b58:	3601      	adds	r6, #1
 8021b5a:	d471      	bmi.n	8021c40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021b5c:	42b7      	cmp	r7, r6
 8021b5e:	dd6f      	ble.n	8021c40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021b60:	9a05      	ldr	r2, [sp, #20]
 8021b62:	2a00      	cmp	r2, #0
 8021b64:	d06c      	beq.n	8021c40 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 8021b66:	f1bb 0f00 	cmp.w	fp, #0
 8021b6a:	db65      	blt.n	8021c38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021b6c:	455b      	cmp	r3, fp
 8021b6e:	dd63      	ble.n	8021c38 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 8021b70:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8021b74:	f819 e002 	ldrb.w	lr, [r9, r2]
 8021b78:	2203      	movs	r2, #3
 8021b7a:	fb03 9602 	mla	r6, r3, r2, r9
 8021b7e:	7877      	ldrb	r7, [r6, #1]
 8021b80:	78b6      	ldrb	r6, [r6, #2]
 8021b82:	f11b 0b01 	adds.w	fp, fp, #1
 8021b86:	d40c      	bmi.n	8021ba2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021b88:	455b      	cmp	r3, fp
 8021b8a:	dd0a      	ble.n	8021ba2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021b8c:	9a04      	ldr	r2, [sp, #16]
 8021b8e:	b142      	cbz	r2, 8021ba2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 8021b90:	2203      	movs	r2, #3
 8021b92:	fb13 2002 	smlabb	r0, r3, r2, r2
 8021b96:	f819 5000 	ldrb.w	r5, [r9, r0]
 8021b9a:	fb03 9002 	mla	r0, r3, r2, r9
 8021b9e:	7904      	ldrb	r4, [r0, #4]
 8021ba0:	7940      	ldrb	r0, [r0, #5]
 8021ba2:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8021ba6:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8021baa:	fb03 fb02 	mul.w	fp, r3, r2
 8021bae:	011b      	lsls	r3, r3, #4
 8021bb0:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 8021bb4:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 8021bb8:	eba3 030b 	sub.w	r3, r3, fp
 8021bbc:	b292      	uxth	r2, r2
 8021bbe:	b29b      	uxth	r3, r3
 8021bc0:	eba9 0902 	sub.w	r9, r9, r2
 8021bc4:	9304      	str	r3, [sp, #16]
 8021bc6:	fa1f f989 	uxth.w	r9, r9
 8021bca:	fb03 f808 	mul.w	r8, r3, r8
 8021bce:	9b01      	ldr	r3, [sp, #4]
 8021bd0:	fb09 8803 	mla	r8, r9, r3, r8
 8021bd4:	9b04      	ldr	r3, [sp, #16]
 8021bd6:	fb03 fc0c 	mul.w	ip, r3, ip
 8021bda:	9b02      	ldr	r3, [sp, #8]
 8021bdc:	fb02 880e 	mla	r8, r2, lr, r8
 8021be0:	fb09 cc03 	mla	ip, r9, r3, ip
 8021be4:	9b04      	ldr	r3, [sp, #16]
 8021be6:	fb0b 8805 	mla	r8, fp, r5, r8
 8021bea:	fb02 c707 	mla	r7, r2, r7, ip
 8021bee:	fb03 f30a 	mul.w	r3, r3, sl
 8021bf2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021bf6:	fb0b 7404 	mla	r4, fp, r4, r7
 8021bfa:	f881 8000 	strb.w	r8, [r1]
 8021bfe:	1224      	asrs	r4, r4, #8
 8021c00:	704c      	strb	r4, [r1, #1]
 8021c02:	9c03      	ldr	r4, [sp, #12]
 8021c04:	fb09 3904 	mla	r9, r9, r4, r3
 8021c08:	fb02 9206 	mla	r2, r2, r6, r9
 8021c0c:	fb0b 2000 	mla	r0, fp, r0, r2
 8021c10:	1200      	asrs	r0, r0, #8
 8021c12:	7088      	strb	r0, [r1, #2]
 8021c14:	b007      	add	sp, #28
 8021c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8021c1a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8021c1e:	9501      	str	r5, [sp, #4]
 8021c20:	e78c      	b.n	8021b3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 8021c22:	4682      	mov	sl, r0
 8021c24:	46a4      	mov	ip, r4
 8021c26:	46a8      	mov	r8, r5
 8021c28:	9501      	str	r5, [sp, #4]
 8021c2a:	e9cd 4002 	strd	r4, r0, [sp, #8]
 8021c2e:	e793      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021c30:	4682      	mov	sl, r0
 8021c32:	46a4      	mov	ip, r4
 8021c34:	46a8      	mov	r8, r5
 8021c36:	e78f      	b.n	8021b58 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 8021c38:	4606      	mov	r6, r0
 8021c3a:	4627      	mov	r7, r4
 8021c3c:	46ae      	mov	lr, r5
 8021c3e:	e7a0      	b.n	8021b82 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 8021c40:	4606      	mov	r6, r0
 8021c42:	4627      	mov	r7, r4
 8021c44:	46ae      	mov	lr, r5
 8021c46:	e7ac      	b.n	8021ba2 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

08021c48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8021c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021c4c:	b09b      	sub	sp, #108	@ 0x6c
 8021c4e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8021c50:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 8021c52:	9019      	str	r0, [sp, #100]	@ 0x64
 8021c54:	9109      	str	r1, [sp, #36]	@ 0x24
 8021c56:	6850      	ldr	r0, [r2, #4]
 8021c58:	9306      	str	r3, [sp, #24]
 8021c5a:	6812      	ldr	r2, [r2, #0]
 8021c5c:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 8021c60:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 8021c64:	fb00 1303 	mla	r3, r0, r3, r1
 8021c68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8021c6c:	18d3      	adds	r3, r2, r3
 8021c6e:	9307      	str	r3, [sp, #28]
 8021c70:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021c72:	681b      	ldr	r3, [r3, #0]
 8021c74:	9308      	str	r3, [sp, #32]
 8021c76:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021c78:	2b00      	cmp	r3, #0
 8021c7a:	dc03      	bgt.n	8021c84 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8021c7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8021c7e:	2b00      	cmp	r3, #0
 8021c80:	f340 81ab 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021c84:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021c86:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8021c8a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8021c8e:	1e48      	subs	r0, r1, #1
 8021c90:	1e55      	subs	r5, r2, #1
 8021c92:	9b06      	ldr	r3, [sp, #24]
 8021c94:	2b00      	cmp	r3, #0
 8021c96:	f340 80b1 	ble.w	8021dfc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8021c9a:	ea5f 462b 	movs.w	r6, fp, asr #16
 8021c9e:	ea4f 4324 	mov.w	r3, r4, asr #16
 8021ca2:	d406      	bmi.n	8021cb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021ca4:	4286      	cmp	r6, r0
 8021ca6:	da04      	bge.n	8021cb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021ca8:	2b00      	cmp	r3, #0
 8021caa:	db02      	blt.n	8021cb2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8021cac:	42ab      	cmp	r3, r5
 8021cae:	f2c0 80a6 	blt.w	8021dfe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 8021cb2:	3601      	adds	r6, #1
 8021cb4:	f100 8097 	bmi.w	8021de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021cb8:	42b1      	cmp	r1, r6
 8021cba:	f2c0 8094 	blt.w	8021de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021cbe:	3301      	adds	r3, #1
 8021cc0:	f100 8091 	bmi.w	8021de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021cc4:	429a      	cmp	r2, r3
 8021cc6:	f2c0 808e 	blt.w	8021de6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 8021cca:	9b06      	ldr	r3, [sp, #24]
 8021ccc:	9e07      	ldr	r6, [sp, #28]
 8021cce:	930a      	str	r3, [sp, #40]	@ 0x28
 8021cd0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021cd2:	2b00      	cmp	r3, #0
 8021cd4:	f340 80b0 	ble.w	8021e38 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 8021cd8:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8021cda:	1425      	asrs	r5, r4, #16
 8021cdc:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8021cde:	f3cb 3203 	ubfx	r2, fp, #12, #4
 8021ce2:	68c7      	ldr	r7, [r0, #12]
 8021ce4:	ea5f 402b 	movs.w	r0, fp, asr #16
 8021ce8:	f3c4 3103 	ubfx	r1, r4, #12, #4
 8021cec:	689b      	ldr	r3, [r3, #8]
 8021cee:	f100 80ea 	bmi.w	8021ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021cf2:	f103 3cff 	add.w	ip, r3, #4294967295
 8021cf6:	4560      	cmp	r0, ip
 8021cf8:	f280 80e5 	bge.w	8021ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021cfc:	2d00      	cmp	r5, #0
 8021cfe:	f2c0 80e2 	blt.w	8021ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021d02:	f107 3cff 	add.w	ip, r7, #4294967295
 8021d06:	4565      	cmp	r5, ip
 8021d08:	f280 80dd 	bge.w	8021ec6 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8021d0c:	b21b      	sxth	r3, r3
 8021d0e:	fb05 0003 	mla	r0, r5, r3, r0
 8021d12:	9d08      	ldr	r5, [sp, #32]
 8021d14:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8021d18:	182f      	adds	r7, r5, r0
 8021d1a:	5c2d      	ldrb	r5, [r5, r0]
 8021d1c:	7878      	ldrb	r0, [r7, #1]
 8021d1e:	f897 e002 	ldrb.w	lr, [r7, #2]
 8021d22:	900c      	str	r0, [sp, #48]	@ 0x30
 8021d24:	f897 9003 	ldrb.w	r9, [r7, #3]
 8021d28:	f897 8004 	ldrb.w	r8, [r7, #4]
 8021d2c:	f897 a005 	ldrb.w	sl, [r7, #5]
 8021d30:	b1c9      	cbz	r1, 8021d66 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 8021d32:	f04f 0c03 	mov.w	ip, #3
 8021d36:	f06f 0004 	mvn.w	r0, #4
 8021d3a:	3705      	adds	r7, #5
 8021d3c:	fb13 030c 	smlabb	r3, r3, ip, r0
 8021d40:	eb07 0c03 	add.w	ip, r7, r3
 8021d44:	5cfb      	ldrb	r3, [r7, r3]
 8021d46:	930d      	str	r3, [sp, #52]	@ 0x34
 8021d48:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8021d4c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8021d4e:	f89c 3002 	ldrb.w	r3, [ip, #2]
 8021d52:	9311      	str	r3, [sp, #68]	@ 0x44
 8021d54:	f89c 3003 	ldrb.w	r3, [ip, #3]
 8021d58:	930e      	str	r3, [sp, #56]	@ 0x38
 8021d5a:	f89c 3004 	ldrb.w	r3, [ip, #4]
 8021d5e:	9310      	str	r3, [sp, #64]	@ 0x40
 8021d60:	f89c 3005 	ldrb.w	r3, [ip, #5]
 8021d64:	9312      	str	r3, [sp, #72]	@ 0x48
 8021d66:	b292      	uxth	r2, r2
 8021d68:	980c      	ldr	r0, [sp, #48]	@ 0x30
 8021d6a:	b289      	uxth	r1, r1
 8021d6c:	fb02 f301 	mul.w	r3, r2, r1
 8021d70:	0112      	lsls	r2, r2, #4
 8021d72:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8021d76:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 8021d7a:	1ad2      	subs	r2, r2, r3
 8021d7c:	b289      	uxth	r1, r1
 8021d7e:	b292      	uxth	r2, r2
 8021d80:	1a7f      	subs	r7, r7, r1
 8021d82:	fb02 f909 	mul.w	r9, r2, r9
 8021d86:	b2bf      	uxth	r7, r7
 8021d88:	fb02 f808 	mul.w	r8, r2, r8
 8021d8c:	fb02 fa0a 	mul.w	sl, r2, sl
 8021d90:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8021d92:	fb07 9905 	mla	r9, r7, r5, r9
 8021d96:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8021d98:	fb07 8800 	mla	r8, r7, r0, r8
 8021d9c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8021d9e:	fb07 aa0e 	mla	sl, r7, lr, sl
 8021da2:	fb01 9905 	mla	r9, r1, r5, r9
 8021da6:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 8021da8:	fb01 8800 	mla	r8, r1, r0, r8
 8021dac:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8021dae:	fb01 a102 	mla	r1, r1, r2, sl
 8021db2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8021db4:	fb03 9905 	mla	r9, r3, r5, r9
 8021db8:	fb03 8800 	mla	r8, r3, r0, r8
 8021dbc:	fb03 1302 	mla	r3, r3, r2, r1
 8021dc0:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021dc4:	ea4f 2828 	mov.w	r8, r8, asr #8
 8021dc8:	121b      	asrs	r3, r3, #8
 8021dca:	f886 9000 	strb.w	r9, [r6]
 8021dce:	f886 8001 	strb.w	r8, [r6, #1]
 8021dd2:	70b3      	strb	r3, [r6, #2]
 8021dd4:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021dd6:	3603      	adds	r6, #3
 8021dd8:	449b      	add	fp, r3
 8021dda:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021ddc:	441c      	add	r4, r3
 8021dde:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8021de0:	3b01      	subs	r3, #1
 8021de2:	930a      	str	r3, [sp, #40]	@ 0x28
 8021de4:	e774      	b.n	8021cd0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 8021de6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021de8:	449b      	add	fp, r3
 8021dea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021dec:	441c      	add	r4, r3
 8021dee:	9b06      	ldr	r3, [sp, #24]
 8021df0:	3b01      	subs	r3, #1
 8021df2:	9306      	str	r3, [sp, #24]
 8021df4:	9b07      	ldr	r3, [sp, #28]
 8021df6:	3303      	adds	r3, #3
 8021df8:	9307      	str	r3, [sp, #28]
 8021dfa:	e74a      	b.n	8021c92 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8021dfc:	d024      	beq.n	8021e48 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 8021dfe:	9b06      	ldr	r3, [sp, #24]
 8021e00:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 8021e02:	3b01      	subs	r3, #1
 8021e04:	fb00 b003 	mla	r0, r0, r3, fp
 8021e08:	1400      	asrs	r0, r0, #16
 8021e0a:	f53f af5e 	bmi.w	8021cca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e0e:	3901      	subs	r1, #1
 8021e10:	4288      	cmp	r0, r1
 8021e12:	f6bf af5a 	bge.w	8021cca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e16:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8021e18:	fb01 4303 	mla	r3, r1, r3, r4
 8021e1c:	141b      	asrs	r3, r3, #16
 8021e1e:	f53f af54 	bmi.w	8021cca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e22:	3a01      	subs	r2, #1
 8021e24:	4293      	cmp	r3, r2
 8021e26:	f6bf af50 	bge.w	8021cca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8021e2a:	9b07      	ldr	r3, [sp, #28]
 8021e2c:	f8dd e018 	ldr.w	lr, [sp, #24]
 8021e30:	1cde      	adds	r6, r3, #3
 8021e32:	f1be 0f00 	cmp.w	lr, #0
 8021e36:	dc5f      	bgt.n	8021ef8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8021e38:	9b06      	ldr	r3, [sp, #24]
 8021e3a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8021e3e:	9b07      	ldr	r3, [sp, #28]
 8021e40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8021e44:	4423      	add	r3, r4
 8021e46:	9307      	str	r3, [sp, #28]
 8021e48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021e4a:	2b00      	cmp	r3, #0
 8021e4c:	f340 80c5 	ble.w	8021fda <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 8021e50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021e54:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021e56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8021e5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8021e5e:	eef0 6a62 	vmov.f32	s13, s5
 8021e62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021e66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8021e6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e6e:	ee16 ba90 	vmov	fp, s13
 8021e72:	eef0 6a43 	vmov.f32	s13, s6
 8021e76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8021e7a:	ee16 4a90 	vmov	r4, s13
 8021e7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8021e82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8021e86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8021e8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8021e8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8021e92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8021e96:	ee12 2a90 	vmov	r2, s5
 8021e9a:	eef0 2a47 	vmov.f32	s5, s14
 8021e9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8021ea2:	ee13 2a10 	vmov	r2, s6
 8021ea6:	9327      	str	r3, [sp, #156]	@ 0x9c
 8021ea8:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021eaa:	eeb0 3a67 	vmov.f32	s6, s15
 8021eae:	fb92 f3f3 	sdiv	r3, r2, r3
 8021eb2:	9328      	str	r3, [sp, #160]	@ 0xa0
 8021eb4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021eb6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8021eb8:	3b01      	subs	r3, #1
 8021eba:	9309      	str	r3, [sp, #36]	@ 0x24
 8021ebc:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8021ebe:	bf08      	it	eq
 8021ec0:	4613      	moveq	r3, r2
 8021ec2:	9306      	str	r3, [sp, #24]
 8021ec4:	e6d7      	b.n	8021c76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8021ec6:	f110 0c01 	adds.w	ip, r0, #1
 8021eca:	d483      	bmi.n	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021ecc:	4563      	cmp	r3, ip
 8021ece:	db81      	blt.n	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021ed0:	f115 0c01 	adds.w	ip, r5, #1
 8021ed4:	f53f af7e 	bmi.w	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021ed8:	4567      	cmp	r7, ip
 8021eda:	f6ff af7b 	blt.w	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021ede:	b23f      	sxth	r7, r7
 8021ee0:	b21b      	sxth	r3, r3
 8021ee2:	9700      	str	r7, [sp, #0]
 8021ee4:	e9cd 2103 	strd	r2, r1, [sp, #12]
 8021ee8:	e9cd 0501 	strd	r0, r5, [sp, #4]
 8021eec:	9a08      	ldr	r2, [sp, #32]
 8021eee:	4631      	mov	r1, r6
 8021ef0:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8021ef2:	f7ff fdf9 	bl	8021ae8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 8021ef6:	e76d      	b.n	8021dd4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 8021ef8:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 8021efa:	ea4f 402b 	mov.w	r0, fp, asr #16
 8021efe:	f3cb 3303 	ubfx	r3, fp, #12, #4
 8021f02:	f3c4 3203 	ubfx	r2, r4, #12, #4
 8021f06:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 8021f0a:	1421      	asrs	r1, r4, #16
 8021f0c:	930a      	str	r3, [sp, #40]	@ 0x28
 8021f0e:	fb0c 0101 	mla	r1, ip, r1, r0
 8021f12:	9808      	ldr	r0, [sp, #32]
 8021f14:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8021f18:	1845      	adds	r5, r0, r1
 8021f1a:	5c40      	ldrb	r0, [r0, r1]
 8021f1c:	796f      	ldrb	r7, [r5, #5]
 8021f1e:	7869      	ldrb	r1, [r5, #1]
 8021f20:	f895 8002 	ldrb.w	r8, [r5, #2]
 8021f24:	f895 a003 	ldrb.w	sl, [r5, #3]
 8021f28:	f895 9004 	ldrb.w	r9, [r5, #4]
 8021f2c:	970c      	str	r7, [sp, #48]	@ 0x30
 8021f2e:	b1a2      	cbz	r2, 8021f5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 8021f30:	2703      	movs	r7, #3
 8021f32:	f06f 0304 	mvn.w	r3, #4
 8021f36:	3505      	adds	r5, #5
 8021f38:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 8021f3c:	eb05 070c 	add.w	r7, r5, ip
 8021f40:	f815 500c 	ldrb.w	r5, [r5, ip]
 8021f44:	9513      	str	r5, [sp, #76]	@ 0x4c
 8021f46:	787d      	ldrb	r5, [r7, #1]
 8021f48:	9515      	str	r5, [sp, #84]	@ 0x54
 8021f4a:	78bd      	ldrb	r5, [r7, #2]
 8021f4c:	9517      	str	r5, [sp, #92]	@ 0x5c
 8021f4e:	78fd      	ldrb	r5, [r7, #3]
 8021f50:	9514      	str	r5, [sp, #80]	@ 0x50
 8021f52:	793d      	ldrb	r5, [r7, #4]
 8021f54:	9516      	str	r5, [sp, #88]	@ 0x58
 8021f56:	797d      	ldrb	r5, [r7, #5]
 8021f58:	9518      	str	r5, [sp, #96]	@ 0x60
 8021f5a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8021f5e:	b292      	uxth	r2, r2
 8021f60:	3603      	adds	r6, #3
 8021f62:	f10e 3eff 	add.w	lr, lr, #4294967295
 8021f66:	fb03 f502 	mul.w	r5, r3, r2
 8021f6a:	011b      	lsls	r3, r3, #4
 8021f6c:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 8021f70:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 8021f74:	1b5b      	subs	r3, r3, r5
 8021f76:	b292      	uxth	r2, r2
 8021f78:	b29b      	uxth	r3, r3
 8021f7a:	1abf      	subs	r7, r7, r2
 8021f7c:	fb03 f909 	mul.w	r9, r3, r9
 8021f80:	b2bf      	uxth	r7, r7
 8021f82:	fb03 fa0a 	mul.w	sl, r3, sl
 8021f86:	fb07 9901 	mla	r9, r7, r1, r9
 8021f8a:	9915      	ldr	r1, [sp, #84]	@ 0x54
 8021f8c:	fb07 aa00 	mla	sl, r7, r0, sl
 8021f90:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8021f92:	fb02 9901 	mla	r9, r2, r1, r9
 8021f96:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8021f98:	fb02 aa00 	mla	sl, r2, r0, sl
 8021f9c:	9814      	ldr	r0, [sp, #80]	@ 0x50
 8021f9e:	fb05 9901 	mla	r9, r5, r1, r9
 8021fa2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8021fa4:	fb05 aa00 	mla	sl, r5, r0, sl
 8021fa8:	434b      	muls	r3, r1
 8021faa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8021fac:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8021fb0:	fb07 3308 	mla	r3, r7, r8, r3
 8021fb4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8021fb8:	f806 ac06 	strb.w	sl, [r6, #-6]
 8021fbc:	fb02 3201 	mla	r2, r2, r1, r3
 8021fc0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8021fc2:	f806 9c05 	strb.w	r9, [r6, #-5]
 8021fc6:	fb05 2503 	mla	r5, r5, r3, r2
 8021fca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8021fcc:	122d      	asrs	r5, r5, #8
 8021fce:	449b      	add	fp, r3
 8021fd0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8021fd2:	f806 5c04 	strb.w	r5, [r6, #-4]
 8021fd6:	441c      	add	r4, r3
 8021fd8:	e72b      	b.n	8021e32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8021fda:	b01b      	add	sp, #108	@ 0x6c
 8021fdc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08021fe0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 8021fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021fe4:	b087      	sub	sp, #28
 8021fe6:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8021fea:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8021fee:	fb05 7003 	mla	r0, r5, r3, r7
 8021ff2:	2d00      	cmp	r5, #0
 8021ff4:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 8021ff8:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 8021ffc:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 8022000:	f2c0 811f 	blt.w	8022242 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 8022004:	45a8      	cmp	r8, r5
 8022006:	f340 811c 	ble.w	8022242 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 802200a:	2f00      	cmp	r7, #0
 802200c:	f2c0 8117 	blt.w	802223e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022010:	42bb      	cmp	r3, r7
 8022012:	f340 8114 	ble.w	802223e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 8022016:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 802201a:	1c7a      	adds	r2, r7, #1
 802201c:	f100 8114 	bmi.w	8022248 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022020:	4293      	cmp	r3, r2
 8022022:	f340 8111 	ble.w	8022248 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 8022026:	2c00      	cmp	r4, #0
 8022028:	f000 8110 	beq.w	802224c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 802202c:	f8dc 0004 	ldr.w	r0, [ip, #4]
 8022030:	3501      	adds	r5, #1
 8022032:	f100 810f 	bmi.w	8022254 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 8022036:	45a8      	cmp	r8, r5
 8022038:	f340 810c 	ble.w	8022254 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 802203c:	f1be 0f00 	cmp.w	lr, #0
 8022040:	f000 810b 	beq.w	802225a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 8022044:	2f00      	cmp	r7, #0
 8022046:	f2c0 8103 	blt.w	8022250 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 802204a:	42bb      	cmp	r3, r7
 802204c:	f340 8100 	ble.w	8022250 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 8022050:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 8022054:	3701      	adds	r7, #1
 8022056:	f100 8103 	bmi.w	8022260 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 802205a:	42bb      	cmp	r3, r7
 802205c:	f340 8100 	ble.w	8022260 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 8022060:	2c00      	cmp	r4, #0
 8022062:	f000 80ff 	beq.w	8022264 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 8022066:	3301      	adds	r3, #1
 8022068:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 802206c:	fa1f fc84 	uxth.w	ip, r4
 8022070:	fa1f fe8e 	uxth.w	lr, lr
 8022074:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022078:	fb0c f90e 	mul.w	r9, ip, lr
 802207c:	0e13      	lsrs	r3, r2, #24
 802207e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022082:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022086:	9302      	str	r3, [sp, #8]
 8022088:	ebac 0709 	sub.w	r7, ip, r9
 802208c:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022090:	fa1f f48e 	uxth.w	r4, lr
 8022094:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8022098:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 802209c:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 80220a0:	fb0a fe0e 	mul.w	lr, sl, lr
 80220a4:	1b1b      	subs	r3, r3, r4
 80220a6:	fb0a f606 	mul.w	r6, sl, r6
 80220aa:	ea4f 6815 	mov.w	r8, r5, lsr #24
 80220ae:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 80220b2:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 80220b6:	b29b      	uxth	r3, r3
 80220b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80220bc:	b2bf      	uxth	r7, r7
 80220be:	9301      	str	r3, [sp, #4]
 80220c0:	44e6      	add	lr, ip
 80220c2:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 80220c6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80220ca:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 80220ce:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 80220d2:	9303      	str	r3, [sp, #12]
 80220d4:	0a33      	lsrs	r3, r6, #8
 80220d6:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 80220da:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 80220de:	9304      	str	r3, [sp, #16]
 80220e0:	fb0b f606 	mul.w	r6, fp, r6
 80220e4:	fb0b f000 	mul.w	r0, fp, r0
 80220e8:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 80220ec:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 80220f0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80220f4:	44b6      	add	lr, r6
 80220f6:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 80220fa:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 80220fe:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022102:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022106:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802210a:	fb08 f606 	mul.w	r6, r8, r6
 802210e:	0a03      	lsrs	r3, r0, #8
 8022110:	fb08 f505 	mul.w	r5, r8, r5
 8022114:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022118:	0a30      	lsrs	r0, r6, #8
 802211a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802211e:	9305      	str	r3, [sp, #20]
 8022120:	0e13      	lsrs	r3, r2, #24
 8022122:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022126:	fb0e fe07 	mul.w	lr, lr, r7
 802212a:	4430      	add	r0, r6
 802212c:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8022130:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022134:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022138:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 802213c:	0a00      	lsrs	r0, r0, #8
 802213e:	435e      	muls	r6, r3
 8022140:	0a2d      	lsrs	r5, r5, #8
 8022142:	435a      	muls	r2, r3
 8022144:	9b03      	ldr	r3, [sp, #12]
 8022146:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 802214a:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 802214e:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022152:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022156:	44b4      	add	ip, r6
 8022158:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 802215c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022160:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022164:	9e01      	ldr	r6, [sp, #4]
 8022166:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802216a:	fb03 ee06 	mla	lr, r3, r6, lr
 802216e:	9b04      	ldr	r3, [sp, #16]
 8022170:	0a12      	lsrs	r2, r2, #8
 8022172:	fb0c ee09 	mla	lr, ip, r9, lr
 8022176:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 802217a:	9b05      	ldr	r3, [sp, #20]
 802217c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022180:	fb00 ee04 	mla	lr, r0, r4, lr
 8022184:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022188:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 802218c:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8022190:	9b01      	ldr	r3, [sp, #4]
 8022192:	fb07 fe0e 	mul.w	lr, r7, lr
 8022196:	fb07 f70b 	mul.w	r7, r7, fp
 802219a:	fb03 ee06 	mla	lr, r3, r6, lr
 802219e:	fb03 730a 	mla	r3, r3, sl, r7
 80221a2:	fb09 e202 	mla	r2, r9, r2, lr
 80221a6:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 80221aa:	fb04 2e0e 	mla	lr, r4, lr, r2
 80221ae:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 80221b2:	fb04 3408 	mla	r4, r4, r8, r3
 80221b6:	9b02      	ldr	r3, [sp, #8]
 80221b8:	b292      	uxth	r2, r2
 80221ba:	fb09 4903 	mla	r9, r9, r3, r4
 80221be:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80221c2:	f3c9 2907 	ubfx	r9, r9, #8, #8
 80221c6:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 80221ca:	fb09 f902 	mul.w	r9, r9, r2
 80221ce:	ea40 0e0e 	orr.w	lr, r0, lr
 80221d2:	f109 0301 	add.w	r3, r9, #1
 80221d6:	fa5f f08e 	uxtb.w	r0, lr
 80221da:	fb10 f002 	smulbb	r0, r0, r2
 80221de:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 80221e2:	780b      	ldrb	r3, [r1, #0]
 80221e4:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 80221e8:	fa5f f989 	uxtb.w	r9, r9
 80221ec:	fb03 0309 	mla	r3, r3, r9, r0
 80221f0:	b29b      	uxth	r3, r3
 80221f2:	1c58      	adds	r0, r3, #1
 80221f4:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 80221f8:	7848      	ldrb	r0, [r1, #1]
 80221fa:	fb10 f009 	smulbb	r0, r0, r9
 80221fe:	121b      	asrs	r3, r3, #8
 8022200:	700b      	strb	r3, [r1, #0]
 8022202:	f3ce 2307 	ubfx	r3, lr, #8, #8
 8022206:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 802220a:	fb03 0302 	mla	r3, r3, r2, r0
 802220e:	b29b      	uxth	r3, r3
 8022210:	1c58      	adds	r0, r3, #1
 8022212:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8022216:	121b      	asrs	r3, r3, #8
 8022218:	704b      	strb	r3, [r1, #1]
 802221a:	788b      	ldrb	r3, [r1, #2]
 802221c:	fb13 f909 	smulbb	r9, r3, r9
 8022220:	fb0e 9e02 	mla	lr, lr, r2, r9
 8022224:	fa1f fe8e 	uxth.w	lr, lr
 8022228:	f10e 0301 	add.w	r3, lr, #1
 802222c:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 8022230:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 8022234:	f881 e002 	strb.w	lr, [r1, #2]
 8022238:	b007      	add	sp, #28
 802223a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802223e:	2600      	movs	r6, #0
 8022240:	e6eb      	b.n	802201a <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 8022242:	2000      	movs	r0, #0
 8022244:	4606      	mov	r6, r0
 8022246:	e6f3      	b.n	8022030 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022248:	2000      	movs	r0, #0
 802224a:	e6f1      	b.n	8022030 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 802224c:	4620      	mov	r0, r4
 802224e:	e6ef      	b.n	8022030 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 8022250:	2500      	movs	r5, #0
 8022252:	e6ff      	b.n	8022054 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 8022254:	2200      	movs	r2, #0
 8022256:	4615      	mov	r5, r2
 8022258:	e708      	b.n	802206c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 802225a:	4672      	mov	r2, lr
 802225c:	4675      	mov	r5, lr
 802225e:	e705      	b.n	802206c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022260:	2200      	movs	r2, #0
 8022262:	e703      	b.n	802206c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 8022264:	4622      	mov	r2, r4
 8022266:	e701      	b.n	802206c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

08022268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802226c:	b09d      	sub	sp, #116	@ 0x74
 802226e:	9219      	str	r2, [sp, #100]	@ 0x64
 8022270:	9307      	str	r3, [sp, #28]
 8022272:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 8022274:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 8022278:	901b      	str	r0, [sp, #108]	@ 0x6c
 802227a:	931a      	str	r3, [sp, #104]	@ 0x68
 802227c:	6850      	ldr	r0, [r2, #4]
 802227e:	9117      	str	r1, [sp, #92]	@ 0x5c
 8022280:	6812      	ldr	r2, [r2, #0]
 8022282:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 8022286:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 802228a:	fb00 1303 	mla	r3, r0, r3, r1
 802228e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022292:	18d3      	adds	r3, r2, r3
 8022294:	930a      	str	r3, [sp, #40]	@ 0x28
 8022296:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022298:	681b      	ldr	r3, [r3, #0]
 802229a:	9310      	str	r3, [sp, #64]	@ 0x40
 802229c:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 80222a0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80222a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80222a4:	2b00      	cmp	r3, #0
 80222a6:	dc03      	bgt.n	80222b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 80222a8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80222aa:	2b00      	cmp	r3, #0
 80222ac:	f340 8368 	ble.w	8022980 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 80222b0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80222b2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80222b6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80222ba:	1e48      	subs	r0, r1, #1
 80222bc:	1e57      	subs	r7, r2, #1
 80222be:	9b07      	ldr	r3, [sp, #28]
 80222c0:	2b00      	cmp	r3, #0
 80222c2:	f340 8187 	ble.w	80225d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 80222c6:	ea5f 4c25 	movs.w	ip, r5, asr #16
 80222ca:	ea4f 4326 	mov.w	r3, r6, asr #16
 80222ce:	d406      	bmi.n	80222de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80222d0:	4584      	cmp	ip, r0
 80222d2:	da04      	bge.n	80222de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	db02      	blt.n	80222de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80222d8:	42bb      	cmp	r3, r7
 80222da:	f2c0 817c 	blt.w	80225d6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 80222de:	f11c 0c01 	adds.w	ip, ip, #1
 80222e2:	f100 816c 	bmi.w	80225be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80222e6:	4561      	cmp	r1, ip
 80222e8:	f2c0 8169 	blt.w	80225be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80222ec:	3301      	adds	r3, #1
 80222ee:	f100 8166 	bmi.w	80225be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80222f2:	429a      	cmp	r2, r3
 80222f4:	f2c0 8163 	blt.w	80225be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 80222f8:	9b07      	ldr	r3, [sp, #28]
 80222fa:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80222fc:	9318      	str	r3, [sp, #96]	@ 0x60
 80222fe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8022300:	2b00      	cmp	r3, #0
 8022302:	f340 8186 	ble.w	8022612 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 8022306:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8022308:	142a      	asrs	r2, r5, #16
 802230a:	ea4f 4026 	mov.w	r0, r6, asr #16
 802230e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022312:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 8022316:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 802231a:	f100 81cb 	bmi.w	80226b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802231e:	f10e 38ff 	add.w	r8, lr, #4294967295
 8022322:	4542      	cmp	r2, r8
 8022324:	f280 81c6 	bge.w	80226b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022328:	2800      	cmp	r0, #0
 802232a:	f2c0 81c3 	blt.w	80226b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 802232e:	f103 38ff 	add.w	r8, r3, #4294967295
 8022332:	4540      	cmp	r0, r8
 8022334:	f280 81be 	bge.w	80226b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 8022338:	fa0f f38e 	sxth.w	r3, lr
 802233c:	fb00 2203 	mla	r2, r0, r3, r2
 8022340:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8022342:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 8022346:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 802234a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 802234e:	2900      	cmp	r1, #0
 8022350:	f000 81a6 	beq.w	80226a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 8022354:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8022358:	900c      	str	r0, [sp, #48]	@ 0x30
 802235a:	0e00      	lsrs	r0, r0, #24
 802235c:	9013      	str	r0, [sp, #76]	@ 0x4c
 802235e:	f1bc 0f00 	cmp.w	ip, #0
 8022362:	d00f      	beq.n	8022384 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 8022364:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022368:	3b01      	subs	r3, #1
 802236a:	009b      	lsls	r3, r3, #2
 802236c:	3304      	adds	r3, #4
 802236e:	eb08 0003 	add.w	r0, r8, r3
 8022372:	f858 3003 	ldr.w	r3, [r8, r3]
 8022376:	9308      	str	r3, [sp, #32]
 8022378:	0e1b      	lsrs	r3, r3, #24
 802237a:	9311      	str	r3, [sp, #68]	@ 0x44
 802237c:	6843      	ldr	r3, [r0, #4]
 802237e:	930d      	str	r3, [sp, #52]	@ 0x34
 8022380:	0e1b      	lsrs	r3, r3, #24
 8022382:	9314      	str	r3, [sp, #80]	@ 0x50
 8022384:	b289      	uxth	r1, r1
 8022386:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022388:	fa1f fc8c 	uxth.w	ip, ip
 802238c:	0108      	lsls	r0, r1, #4
 802238e:	fb01 f90c 	mul.w	r9, r1, ip
 8022392:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 8022396:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 802239a:	eba0 0809 	sub.w	r8, r0, r9
 802239e:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 80223a0:	fa1f f18c 	uxth.w	r1, ip
 80223a4:	fa1f f888 	uxth.w	r8, r8
 80223a8:	1a5b      	subs	r3, r3, r1
 80223aa:	fb08 f000 	mul.w	r0, r8, r0
 80223ae:	b29b      	uxth	r3, r3
 80223b0:	fb03 000e 	mla	r0, r3, lr, r0
 80223b4:	fb01 0004 	mla	r0, r1, r4, r0
 80223b8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80223ba:	fb09 0004 	mla	r0, r9, r4, r0
 80223be:	f3c0 2007 	ubfx	r0, r0, #8, #8
 80223c2:	2800      	cmp	r0, #0
 80223c4:	f000 80f2 	beq.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80223c8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80223cc:	d01b      	beq.n	8022406 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 80223ce:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 80223d2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80223d6:	fb0e fa0a 	mul.w	sl, lr, sl
 80223da:	fb0e fe02 	mul.w	lr, lr, r2
 80223de:	ea4f 221a 	mov.w	r2, sl, lsr #8
 80223e2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80223e6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 80223ea:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 80223ee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 80223f2:	4452      	add	r2, sl
 80223f4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80223f8:	0a12      	lsrs	r2, r2, #8
 80223fa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80223fe:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022402:	ea42 020c 	orr.w	r2, r2, ip
 8022406:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022408:	2cff      	cmp	r4, #255	@ 0xff
 802240a:	d021      	beq.n	8022450 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 802240c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802240e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 8022412:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022414:	fb04 fb0b 	mul.w	fp, r4, fp
 8022418:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802241a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802241e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8022420:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 8022424:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022428:	fb04 fa0a 	mul.w	sl, r4, sl
 802242c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022430:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8022434:	44de      	add	lr, fp
 8022436:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802243a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802243e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022442:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022446:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 802244a:	ea4e 040a 	orr.w	r4, lr, sl
 802244e:	940c      	str	r4, [sp, #48]	@ 0x30
 8022450:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022452:	2cff      	cmp	r4, #255	@ 0xff
 8022454:	d021      	beq.n	802249a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 8022456:	9c08      	ldr	r4, [sp, #32]
 8022458:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 802245c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802245e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022462:	9c08      	ldr	r4, [sp, #32]
 8022464:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022468:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 802246a:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 802246e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022472:	fb04 fa0a 	mul.w	sl, r4, sl
 8022476:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802247a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802247e:	44de      	add	lr, fp
 8022480:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 8022484:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022488:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802248c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022490:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022494:	ea4e 040a 	orr.w	r4, lr, sl
 8022498:	9408      	str	r4, [sp, #32]
 802249a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 802249c:	2cff      	cmp	r4, #255	@ 0xff
 802249e:	d021      	beq.n	80224e4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80224a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80224a2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 80224a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80224a8:	fb04 fb0b 	mul.w	fp, r4, fp
 80224ac:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80224ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80224b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80224b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 80224b8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 80224bc:	fb04 fa0a 	mul.w	sl, r4, sl
 80224c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224c4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80224c8:	44de      	add	lr, fp
 80224ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80224ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80224d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80224d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80224da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80224de:	ea4e 040a 	orr.w	r4, lr, sl
 80224e2:	940d      	str	r4, [sp, #52]	@ 0x34
 80224e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 80224e6:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 80224ea:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 80224ee:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80224f2:	9c08      	ldr	r4, [sp, #32]
 80224f4:	fb08 fc0c 	mul.w	ip, r8, ip
 80224f8:	fb03 cc0e 	mla	ip, r3, lr, ip
 80224fc:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022500:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8022502:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022506:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802250a:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802250c:	fb09 cc0e 	mla	ip, r9, lr, ip
 8022510:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022514:	fb08 f80e 	mul.w	r8, r8, lr
 8022518:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802251c:	fb03 8202 	mla	r2, r3, r2, r8
 8022520:	9b08      	ldr	r3, [sp, #32]
 8022522:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022526:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 802252a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802252c:	fb01 220a 	mla	r2, r1, sl, r2
 8022530:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 8022534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8022536:	fb09 2901 	mla	r9, r9, r1, r2
 802253a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802253c:	4343      	muls	r3, r0
 802253e:	ea4f 2919 	mov.w	r9, r9, lsr #8
 8022542:	1c58      	adds	r0, r3, #1
 8022544:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 8022548:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802254c:	783b      	ldrb	r3, [r7, #0]
 802254e:	ea4c 0c09 	orr.w	ip, ip, r9
 8022552:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 8022556:	fa5f f28c 	uxtb.w	r2, ip
 802255a:	b2c0      	uxtb	r0, r0
 802255c:	fb12 f201 	smulbb	r2, r2, r1
 8022560:	fb03 2300 	mla	r3, r3, r0, r2
 8022564:	b29b      	uxth	r3, r3
 8022566:	1c5a      	adds	r2, r3, #1
 8022568:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802256c:	787a      	ldrb	r2, [r7, #1]
 802256e:	fb12 f200 	smulbb	r2, r2, r0
 8022572:	121b      	asrs	r3, r3, #8
 8022574:	703b      	strb	r3, [r7, #0]
 8022576:	f3cc 2307 	ubfx	r3, ip, #8, #8
 802257a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802257e:	fb03 2301 	mla	r3, r3, r1, r2
 8022582:	b29b      	uxth	r3, r3
 8022584:	1c5a      	adds	r2, r3, #1
 8022586:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802258a:	121b      	asrs	r3, r3, #8
 802258c:	707b      	strb	r3, [r7, #1]
 802258e:	78bb      	ldrb	r3, [r7, #2]
 8022590:	fb13 f000 	smulbb	r0, r3, r0
 8022594:	fb0c 0c01 	mla	ip, ip, r1, r0
 8022598:	fa1f fc8c 	uxth.w	ip, ip
 802259c:	f10c 0301 	add.w	r3, ip, #1
 80225a0:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 80225a4:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 80225a8:	f887 c002 	strb.w	ip, [r7, #2]
 80225ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80225ae:	3703      	adds	r7, #3
 80225b0:	441d      	add	r5, r3
 80225b2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80225b4:	441e      	add	r6, r3
 80225b6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80225b8:	3b01      	subs	r3, #1
 80225ba:	9318      	str	r3, [sp, #96]	@ 0x60
 80225bc:	e69f      	b.n	80222fe <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80225be:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 80225c0:	441d      	add	r5, r3
 80225c2:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80225c4:	441e      	add	r6, r3
 80225c6:	9b07      	ldr	r3, [sp, #28]
 80225c8:	3b01      	subs	r3, #1
 80225ca:	9307      	str	r3, [sp, #28]
 80225cc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80225ce:	3303      	adds	r3, #3
 80225d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80225d2:	e674      	b.n	80222be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 80225d4:	d025      	beq.n	8022622 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 80225d6:	9b07      	ldr	r3, [sp, #28]
 80225d8:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 80225da:	3b01      	subs	r3, #1
 80225dc:	fb00 5003 	mla	r0, r0, r3, r5
 80225e0:	1400      	asrs	r0, r0, #16
 80225e2:	f53f ae89 	bmi.w	80222f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80225e6:	3901      	subs	r1, #1
 80225e8:	4288      	cmp	r0, r1
 80225ea:	f6bf ae85 	bge.w	80222f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80225ee:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 80225f0:	fb01 6303 	mla	r3, r1, r3, r6
 80225f4:	141b      	asrs	r3, r3, #16
 80225f6:	f53f ae7f 	bmi.w	80222f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 80225fa:	3a01      	subs	r2, #1
 80225fc:	4293      	cmp	r3, r2
 80225fe:	f6bf ae7b 	bge.w	80222f8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8022602:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8022604:	f8dd b01c 	ldr.w	fp, [sp, #28]
 8022608:	f103 0e03 	add.w	lr, r3, #3
 802260c:	f1bb 0f00 	cmp.w	fp, #0
 8022610:	dc6e      	bgt.n	80226f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 8022612:	9b07      	ldr	r3, [sp, #28]
 8022614:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802261a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802261e:	4423      	add	r3, r4
 8022620:	930a      	str	r3, [sp, #40]	@ 0x28
 8022622:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022624:	2b00      	cmp	r3, #0
 8022626:	f340 81ab 	ble.w	8022980 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 802262a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 802262e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022630:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022634:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022638:	eef0 6a62 	vmov.f32	s13, s5
 802263c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022640:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022644:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022648:	ee16 5a90 	vmov	r5, s13
 802264c:	eef0 6a43 	vmov.f32	s13, s6
 8022650:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022654:	ee16 6a90 	vmov	r6, s13
 8022658:	ee20 7aa7 	vmul.f32	s14, s1, s15
 802265c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022660:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022664:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022668:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 802266c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022670:	ee12 2a90 	vmov	r2, s5
 8022674:	eef0 2a47 	vmov.f32	s5, s14
 8022678:	fb92 f3f3 	sdiv	r3, r2, r3
 802267c:	ee13 2a10 	vmov	r2, s6
 8022680:	9329      	str	r3, [sp, #164]	@ 0xa4
 8022682:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022684:	eeb0 3a67 	vmov.f32	s6, s15
 8022688:	fb92 f3f3 	sdiv	r3, r2, r3
 802268c:	932a      	str	r3, [sp, #168]	@ 0xa8
 802268e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8022690:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8022692:	3b01      	subs	r3, #1
 8022694:	9317      	str	r3, [sp, #92]	@ 0x5c
 8022696:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022698:	bf08      	it	eq
 802269a:	4613      	moveq	r3, r2
 802269c:	9307      	str	r3, [sp, #28]
 802269e:	e600      	b.n	80222a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80226a0:	f1bc 0f00 	cmp.w	ip, #0
 80226a4:	f43f ae6e 	beq.w	8022384 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80226a8:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 80226ac:	9308      	str	r3, [sp, #32]
 80226ae:	0e1b      	lsrs	r3, r3, #24
 80226b0:	9311      	str	r3, [sp, #68]	@ 0x44
 80226b2:	e667      	b.n	8022384 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 80226b4:	f112 0801 	adds.w	r8, r2, #1
 80226b8:	f53f af78 	bmi.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80226bc:	45c6      	cmp	lr, r8
 80226be:	f6ff af75 	blt.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80226c2:	f110 0801 	adds.w	r8, r0, #1
 80226c6:	f53f af71 	bmi.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80226ca:	4543      	cmp	r3, r8
 80226cc:	f6ff af6e 	blt.w	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80226d0:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80226d2:	b21b      	sxth	r3, r3
 80226d4:	9201      	str	r2, [sp, #4]
 80226d6:	9300      	str	r3, [sp, #0]
 80226d8:	fa0f f38e 	sxth.w	r3, lr
 80226dc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80226de:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80226e2:	e9cd c404 	strd	ip, r4, [sp, #16]
 80226e6:	4639      	mov	r1, r7
 80226e8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80226ea:	f7ff fc79 	bl	8021fe0 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 80226ee:	e75d      	b.n	80225ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 80226f0:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80226f2:	142f      	asrs	r7, r5, #16
 80226f4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80226f6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80226fa:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 80226fe:	1433      	asrs	r3, r6, #16
 8022700:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022704:	fb02 7303 	mla	r3, r2, r3, r7
 8022708:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 802270c:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8022710:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8022714:	2900      	cmp	r1, #0
 8022716:	f000 812a 	beq.w	802296e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 802271a:	687c      	ldr	r4, [r7, #4]
 802271c:	940e      	str	r4, [sp, #56]	@ 0x38
 802271e:	0e24      	lsrs	r4, r4, #24
 8022720:	9415      	str	r4, [sp, #84]	@ 0x54
 8022722:	b178      	cbz	r0, 8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022724:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 8022728:	3a01      	subs	r2, #1
 802272a:	0092      	lsls	r2, r2, #2
 802272c:	3204      	adds	r2, #4
 802272e:	eb07 0802 	add.w	r8, r7, r2
 8022732:	58ba      	ldr	r2, [r7, r2]
 8022734:	9209      	str	r2, [sp, #36]	@ 0x24
 8022736:	0e12      	lsrs	r2, r2, #24
 8022738:	9212      	str	r2, [sp, #72]	@ 0x48
 802273a:	f8d8 2004 	ldr.w	r2, [r8, #4]
 802273e:	920f      	str	r2, [sp, #60]	@ 0x3c
 8022740:	0e12      	lsrs	r2, r2, #24
 8022742:	9216      	str	r2, [sp, #88]	@ 0x58
 8022744:	b289      	uxth	r1, r1
 8022746:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022748:	b280      	uxth	r0, r0
 802274a:	fb01 f900 	mul.w	r9, r1, r0
 802274e:	0109      	lsls	r1, r1, #4
 8022750:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 8022754:	eba1 0809 	sub.w	r8, r1, r9
 8022758:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 802275c:	9915      	ldr	r1, [sp, #84]	@ 0x54
 802275e:	b280      	uxth	r0, r0
 8022760:	fa1f f888 	uxth.w	r8, r8
 8022764:	1a12      	subs	r2, r2, r0
 8022766:	fb08 f101 	mul.w	r1, r8, r1
 802276a:	b292      	uxth	r2, r2
 802276c:	fb02 110c 	mla	r1, r2, ip, r1
 8022770:	fb00 1104 	mla	r1, r0, r4, r1
 8022774:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022776:	fb09 1104 	mla	r1, r9, r4, r1
 802277a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 802277e:	2900      	cmp	r1, #0
 8022780:	f000 80ec 	beq.w	802295c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 8022784:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 8022788:	d019      	beq.n	80227be <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 802278a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 802278e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8022792:	fb0c fa0a 	mul.w	sl, ip, sl
 8022796:	fb0c fc03 	mul.w	ip, ip, r3
 802279a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 802279e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 80227a2:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 80227a6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80227aa:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 80227ae:	4453      	add	r3, sl
 80227b0:	0a3f      	lsrs	r7, r7, #8
 80227b2:	0a1b      	lsrs	r3, r3, #8
 80227b4:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 80227b8:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 80227bc:	433b      	orrs	r3, r7
 80227be:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80227c0:	2cff      	cmp	r4, #255	@ 0xff
 80227c2:	d020      	beq.n	8022806 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 80227c4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80227c6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80227ca:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80227cc:	4367      	muls	r7, r4
 80227ce:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80227d0:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 80227d4:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80227d8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 80227da:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 80227de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80227e2:	fb04 fa0a 	mul.w	sl, r4, sl
 80227e6:	44bc      	add	ip, r7
 80227e8:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 80227ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80227f0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80227f4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 80227f8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80227fc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022800:	ea4c 040a 	orr.w	r4, ip, sl
 8022804:	940e      	str	r4, [sp, #56]	@ 0x38
 8022806:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022808:	2cff      	cmp	r4, #255	@ 0xff
 802280a:	d020      	beq.n	802284e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 802280c:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 802280e:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 8022812:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022814:	4367      	muls	r7, r4
 8022816:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8022818:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 802281c:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022820:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022822:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 8022826:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 802282a:	fb04 fa0a 	mul.w	sl, r4, sl
 802282e:	44bc      	add	ip, r7
 8022830:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 8022834:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022838:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 802283c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022840:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022844:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022848:	ea4c 040a 	orr.w	r4, ip, sl
 802284c:	9409      	str	r4, [sp, #36]	@ 0x24
 802284e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 8022850:	2cff      	cmp	r4, #255	@ 0xff
 8022852:	d020      	beq.n	8022896 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 8022854:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022856:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 802285a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802285c:	4367      	muls	r7, r4
 802285e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022860:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 8022864:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 8022868:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 802286a:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 802286e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022872:	fb04 fa0a 	mul.w	sl, r4, sl
 8022876:	44bc      	add	ip, r7
 8022878:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 802287c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022880:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8022884:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022888:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 802288c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022890:	ea4c 040a 	orr.w	r4, ip, sl
 8022894:	940f      	str	r4, [sp, #60]	@ 0x3c
 8022896:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022898:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 802289c:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80228a0:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 80228a4:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 80228a6:	fb08 f707 	mul.w	r7, r8, r7
 80228aa:	fb02 770c 	mla	r7, r2, ip, r7
 80228ae:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80228b2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 80228b4:	fb00 770c 	mla	r7, r0, ip, r7
 80228b8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80228bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80228be:	fb09 770c 	mla	r7, r9, ip, r7
 80228c2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 80228c6:	fb08 f80c 	mul.w	r8, r8, ip
 80228ca:	0a3f      	lsrs	r7, r7, #8
 80228cc:	fb02 8303 	mla	r3, r2, r3, r8
 80228d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80228d2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 80228d6:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 80228da:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80228dc:	fb00 330a 	mla	r3, r0, sl, r3
 80228e0:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 80228e4:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80228e6:	fb09 3c0c 	mla	ip, r9, ip, r3
 80228ea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80228ec:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 80228f0:	434b      	muls	r3, r1
 80228f2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 80228f6:	1c59      	adds	r1, r3, #1
 80228f8:	ea47 070c 	orr.w	r7, r7, ip
 80228fc:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 8022900:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 8022904:	b2fa      	uxtb	r2, r7
 8022906:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 802290a:	fb12 f200 	smulbb	r2, r2, r0
 802290e:	b2c9      	uxtb	r1, r1
 8022910:	fb03 2301 	mla	r3, r3, r1, r2
 8022914:	b29b      	uxth	r3, r3
 8022916:	1c5a      	adds	r2, r3, #1
 8022918:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802291c:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 8022920:	fb12 f201 	smulbb	r2, r2, r1
 8022924:	121b      	asrs	r3, r3, #8
 8022926:	f80e 3c03 	strb.w	r3, [lr, #-3]
 802292a:	f3c7 2307 	ubfx	r3, r7, #8, #8
 802292e:	0c3f      	lsrs	r7, r7, #16
 8022930:	fb03 2300 	mla	r3, r3, r0, r2
 8022934:	b29b      	uxth	r3, r3
 8022936:	1c5a      	adds	r2, r3, #1
 8022938:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802293c:	121b      	asrs	r3, r3, #8
 802293e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 8022942:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 8022946:	fb13 f101 	smulbb	r1, r3, r1
 802294a:	fb07 1700 	mla	r7, r7, r0, r1
 802294e:	b2bf      	uxth	r7, r7
 8022950:	1c79      	adds	r1, r7, #1
 8022952:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 8022956:	123f      	asrs	r7, r7, #8
 8022958:	f80e 7c01 	strb.w	r7, [lr, #-1]
 802295c:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 802295e:	f10e 0e03 	add.w	lr, lr, #3
 8022962:	f10b 3bff 	add.w	fp, fp, #4294967295
 8022966:	441d      	add	r5, r3
 8022968:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 802296a:	441e      	add	r6, r3
 802296c:	e64e      	b.n	802260c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 802296e:	2800      	cmp	r0, #0
 8022970:	f43f aee8 	beq.w	8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022974:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8022978:	9209      	str	r2, [sp, #36]	@ 0x24
 802297a:	0e12      	lsrs	r2, r2, #24
 802297c:	9212      	str	r2, [sp, #72]	@ 0x48
 802297e:	e6e1      	b.n	8022744 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 8022980:	b01d      	add	sp, #116	@ 0x74
 8022982:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08022986 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 8022986:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802298a:	b087      	sub	sp, #28
 802298c:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 8022990:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 8022994:	fb05 7003 	mla	r0, r5, r3, r7
 8022998:	2d00      	cmp	r5, #0
 802299a:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 802299e:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 80229a2:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 80229a6:	f2c0 810a 	blt.w	8022bbe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80229aa:	45a8      	cmp	r8, r5
 80229ac:	f340 8107 	ble.w	8022bbe <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 80229b0:	2f00      	cmp	r7, #0
 80229b2:	f2c0 8102 	blt.w	8022bba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80229b6:	42bb      	cmp	r3, r7
 80229b8:	f340 80ff 	ble.w	8022bba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 80229bc:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 80229c0:	1c7a      	adds	r2, r7, #1
 80229c2:	f100 80ff 	bmi.w	8022bc4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80229c6:	4293      	cmp	r3, r2
 80229c8:	f340 80fc 	ble.w	8022bc4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 80229cc:	2c00      	cmp	r4, #0
 80229ce:	f000 80fb 	beq.w	8022bc8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 80229d2:	f8dc 0004 	ldr.w	r0, [ip, #4]
 80229d6:	3501      	adds	r5, #1
 80229d8:	f100 80fa 	bmi.w	8022bd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80229dc:	45a8      	cmp	r8, r5
 80229de:	f340 80f7 	ble.w	8022bd0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 80229e2:	f1be 0f00 	cmp.w	lr, #0
 80229e6:	f000 80f6 	beq.w	8022bd6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 80229ea:	2f00      	cmp	r7, #0
 80229ec:	f2c0 80ee 	blt.w	8022bcc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80229f0:	42bb      	cmp	r3, r7
 80229f2:	f340 80eb 	ble.w	8022bcc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 80229f6:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 80229fa:	3701      	adds	r7, #1
 80229fc:	f100 80ee 	bmi.w	8022bdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8022a00:	42bb      	cmp	r3, r7
 8022a02:	f340 80eb 	ble.w	8022bdc <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 8022a06:	2c00      	cmp	r4, #0
 8022a08:	f000 80ea 	beq.w	8022be0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 8022a0c:	3301      	adds	r3, #1
 8022a0e:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 8022a12:	fa1f fc84 	uxth.w	ip, r4
 8022a16:	fa1f fe8e 	uxth.w	lr, lr
 8022a1a:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 8022a1e:	fb0c f90e 	mul.w	r9, ip, lr
 8022a22:	0e13      	lsrs	r3, r2, #24
 8022a24:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 8022a28:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 8022a2c:	9302      	str	r3, [sp, #8]
 8022a2e:	ebac 0709 	sub.w	r7, ip, r9
 8022a32:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 8022a36:	fa1f f48e 	uxth.w	r4, lr
 8022a3a:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 8022a3e:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 8022a42:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 8022a46:	fb0a fe0e 	mul.w	lr, sl, lr
 8022a4a:	1b1b      	subs	r3, r3, r4
 8022a4c:	fb0a f606 	mul.w	r6, sl, r6
 8022a50:	ea4f 6815 	mov.w	r8, r5, lsr #24
 8022a54:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 8022a58:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 8022a5c:	b29b      	uxth	r3, r3
 8022a5e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022a62:	b2bf      	uxth	r7, r7
 8022a64:	9301      	str	r3, [sp, #4]
 8022a66:	44e6      	add	lr, ip
 8022a68:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 8022a6c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022a70:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 8022a74:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 8022a78:	9303      	str	r3, [sp, #12]
 8022a7a:	0a33      	lsrs	r3, r6, #8
 8022a7c:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 8022a80:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 8022a84:	9304      	str	r3, [sp, #16]
 8022a86:	fb0b f606 	mul.w	r6, fp, r6
 8022a8a:	fb0b f000 	mul.w	r0, fp, r0
 8022a8e:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 8022a92:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022a96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022a9a:	44b6      	add	lr, r6
 8022a9c:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 8022aa0:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 8022aa4:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 8022aa8:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 8022aac:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022ab0:	fb08 f606 	mul.w	r6, r8, r6
 8022ab4:	0a03      	lsrs	r3, r0, #8
 8022ab6:	fb08 f505 	mul.w	r5, r8, r5
 8022aba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022abe:	0a30      	lsrs	r0, r6, #8
 8022ac0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022ac4:	9305      	str	r3, [sp, #20]
 8022ac6:	0e13      	lsrs	r3, r2, #24
 8022ac8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022acc:	fb0e fe07 	mul.w	lr, lr, r7
 8022ad0:	4430      	add	r0, r6
 8022ad2:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 8022ad6:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 8022ada:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 8022ade:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022ae2:	0a00      	lsrs	r0, r0, #8
 8022ae4:	435e      	muls	r6, r3
 8022ae6:	0a2d      	lsrs	r5, r5, #8
 8022ae8:	435a      	muls	r2, r3
 8022aea:	9b03      	ldr	r3, [sp, #12]
 8022aec:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 8022af0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 8022af4:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 8022af8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022afc:	44b4      	add	ip, r6
 8022afe:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 8022b02:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022b06:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 8022b0a:	9e01      	ldr	r6, [sp, #4]
 8022b0c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022b10:	fb03 ee06 	mla	lr, r3, r6, lr
 8022b14:	9b04      	ldr	r3, [sp, #16]
 8022b16:	0a12      	lsrs	r2, r2, #8
 8022b18:	fb0c ee09 	mla	lr, ip, r9, lr
 8022b1c:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 8022b20:	9b05      	ldr	r3, [sp, #20]
 8022b22:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022b26:	fb00 ee04 	mla	lr, r0, r4, lr
 8022b2a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b2e:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 8022b32:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 8022b36:	9b01      	ldr	r3, [sp, #4]
 8022b38:	fb07 fe0e 	mul.w	lr, r7, lr
 8022b3c:	fb07 f70b 	mul.w	r7, r7, fp
 8022b40:	fb03 ee06 	mla	lr, r3, r6, lr
 8022b44:	fb03 730a 	mla	r3, r3, sl, r7
 8022b48:	fb09 e202 	mla	r2, r9, r2, lr
 8022b4c:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 8022b50:	fb04 2e0e 	mla	lr, r4, lr, r2
 8022b54:	fb04 3408 	mla	r4, r4, r8, r3
 8022b58:	9b02      	ldr	r3, [sp, #8]
 8022b5a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022b5e:	fb09 4903 	mla	r9, r9, r3, r4
 8022b62:	780b      	ldrb	r3, [r1, #0]
 8022b64:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 8022b68:	ea6f 2929 	mvn.w	r9, r9, asr #8
 8022b6c:	ea40 0e0e 	orr.w	lr, r0, lr
 8022b70:	fa5f f989 	uxtb.w	r9, r9
 8022b74:	fb03 f209 	mul.w	r2, r3, r9
 8022b78:	1c53      	adds	r3, r2, #1
 8022b7a:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022b7e:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8022b82:	700b      	strb	r3, [r1, #0]
 8022b84:	784b      	ldrb	r3, [r1, #1]
 8022b86:	fb03 f309 	mul.w	r3, r3, r9
 8022b8a:	1c5a      	adds	r2, r3, #1
 8022b8c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8022b90:	ea4f 231e 	mov.w	r3, lr, lsr #8
 8022b94:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 8022b98:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8022b9c:	704b      	strb	r3, [r1, #1]
 8022b9e:	788b      	ldrb	r3, [r1, #2]
 8022ba0:	fb03 f909 	mul.w	r9, r3, r9
 8022ba4:	f109 0301 	add.w	r3, r9, #1
 8022ba8:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 8022bac:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 8022bb0:	f881 e002 	strb.w	lr, [r1, #2]
 8022bb4:	b007      	add	sp, #28
 8022bb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8022bba:	2600      	movs	r6, #0
 8022bbc:	e700      	b.n	80229c0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 8022bbe:	2000      	movs	r0, #0
 8022bc0:	4606      	mov	r6, r0
 8022bc2:	e708      	b.n	80229d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022bc4:	2000      	movs	r0, #0
 8022bc6:	e706      	b.n	80229d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022bc8:	4620      	mov	r0, r4
 8022bca:	e704      	b.n	80229d6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 8022bcc:	2500      	movs	r5, #0
 8022bce:	e714      	b.n	80229fa <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 8022bd0:	2200      	movs	r2, #0
 8022bd2:	4615      	mov	r5, r2
 8022bd4:	e71d      	b.n	8022a12 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022bd6:	4672      	mov	r2, lr
 8022bd8:	4675      	mov	r5, lr
 8022bda:	e71a      	b.n	8022a12 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022bdc:	2200      	movs	r2, #0
 8022bde:	e718      	b.n	8022a12 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 8022be0:	4622      	mov	r2, r4
 8022be2:	e716      	b.n	8022a12 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

08022be4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8022be4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022be8:	b099      	sub	sp, #100	@ 0x64
 8022bea:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 8022bee:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8022bf0:	9017      	str	r0, [sp, #92]	@ 0x5c
 8022bf2:	9306      	str	r3, [sp, #24]
 8022bf4:	6850      	ldr	r0, [r2, #4]
 8022bf6:	6812      	ldr	r2, [r2, #0]
 8022bf8:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 8022bfc:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 8022c00:	fb00 1303 	mla	r3, r0, r3, r1
 8022c04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8022c08:	18d3      	adds	r3, r2, r3
 8022c0a:	9309      	str	r3, [sp, #36]	@ 0x24
 8022c0c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022c0e:	681b      	ldr	r3, [r3, #0]
 8022c10:	930e      	str	r3, [sp, #56]	@ 0x38
 8022c12:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022c14:	2b00      	cmp	r3, #0
 8022c16:	dc03      	bgt.n	8022c20 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8022c18:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8022c1a:	2b00      	cmp	r3, #0
 8022c1c:	f340 8360 	ble.w	80232e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022c20:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022c22:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8022c26:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8022c2a:	1e48      	subs	r0, r1, #1
 8022c2c:	1e57      	subs	r7, r2, #1
 8022c2e:	9b06      	ldr	r3, [sp, #24]
 8022c30:	2b00      	cmp	r3, #0
 8022c32:	f340 817b 	ble.w	8022f2c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 8022c36:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8022c3a:	ea4f 4326 	mov.w	r3, r6, asr #16
 8022c3e:	d406      	bmi.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022c40:	4584      	cmp	ip, r0
 8022c42:	da04      	bge.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022c44:	2b00      	cmp	r3, #0
 8022c46:	db02      	blt.n	8022c4e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8022c48:	42bb      	cmp	r3, r7
 8022c4a:	f2c0 8170 	blt.w	8022f2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 8022c4e:	f11c 0c01 	adds.w	ip, ip, #1
 8022c52:	f100 8160 	bmi.w	8022f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022c56:	4561      	cmp	r1, ip
 8022c58:	f2c0 815d 	blt.w	8022f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022c5c:	3301      	adds	r3, #1
 8022c5e:	f100 815a 	bmi.w	8022f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022c62:	429a      	cmp	r2, r3
 8022c64:	f2c0 8157 	blt.w	8022f16 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 8022c68:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8022c6c:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8022c6e:	f1b8 0f00 	cmp.w	r8, #0
 8022c72:	f340 8179 	ble.w	8022f68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 8022c76:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8022c78:	ea4f 4c26 	mov.w	ip, r6, asr #16
 8022c7c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8022c7e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 8022c82:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8022c86:	142a      	asrs	r2, r5, #16
 8022c88:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8022c8c:	689b      	ldr	r3, [r3, #8]
 8022c8e:	f100 81be 	bmi.w	802300e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022c92:	f103 39ff 	add.w	r9, r3, #4294967295
 8022c96:	454a      	cmp	r2, r9
 8022c98:	f280 81b9 	bge.w	802300e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022c9c:	f1bc 0f00 	cmp.w	ip, #0
 8022ca0:	f2c0 81b5 	blt.w	802300e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022ca4:	f10e 39ff 	add.w	r9, lr, #4294967295
 8022ca8:	45cc      	cmp	ip, r9
 8022caa:	f280 81b0 	bge.w	802300e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 8022cae:	b21b      	sxth	r3, r3
 8022cb0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8022cb2:	fb0c 2203 	mla	r2, ip, r3, r2
 8022cb6:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 8022cba:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8022cbe:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 8022cc2:	2900      	cmp	r1, #0
 8022cc4:	f000 8197 	beq.w	8022ff6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 8022cc8:	f8d9 4004 	ldr.w	r4, [r9, #4]
 8022ccc:	940a      	str	r4, [sp, #40]	@ 0x28
 8022cce:	0e24      	lsrs	r4, r4, #24
 8022cd0:	9411      	str	r4, [sp, #68]	@ 0x44
 8022cd2:	b180      	cbz	r0, 8022cf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022cd4:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8022cd8:	3b01      	subs	r3, #1
 8022cda:	009b      	lsls	r3, r3, #2
 8022cdc:	3304      	adds	r3, #4
 8022cde:	eb09 0c03 	add.w	ip, r9, r3
 8022ce2:	f859 3003 	ldr.w	r3, [r9, r3]
 8022ce6:	9307      	str	r3, [sp, #28]
 8022ce8:	0e1b      	lsrs	r3, r3, #24
 8022cea:	930f      	str	r3, [sp, #60]	@ 0x3c
 8022cec:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8022cf0:	930b      	str	r3, [sp, #44]	@ 0x2c
 8022cf2:	0e1b      	lsrs	r3, r3, #24
 8022cf4:	9312      	str	r3, [sp, #72]	@ 0x48
 8022cf6:	b289      	uxth	r1, r1
 8022cf8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8022cfa:	b280      	uxth	r0, r0
 8022cfc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022cfe:	fb01 fa00 	mul.w	sl, r1, r0
 8022d02:	0109      	lsls	r1, r1, #4
 8022d04:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 8022d08:	eba1 090a 	sub.w	r9, r1, sl
 8022d0c:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 8022d10:	b280      	uxth	r0, r0
 8022d12:	fa1f f989 	uxth.w	r9, r9
 8022d16:	1a09      	subs	r1, r1, r0
 8022d18:	fb09 f303 	mul.w	r3, r9, r3
 8022d1c:	b289      	uxth	r1, r1
 8022d1e:	fb01 330e 	mla	r3, r1, lr, r3
 8022d22:	fb00 3304 	mla	r3, r0, r4, r3
 8022d26:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022d28:	fb0a 3304 	mla	r3, sl, r4, r3
 8022d2c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8022d30:	2b00      	cmp	r3, #0
 8022d32:	f000 80e8 	beq.w	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8022d36:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8022d3a:	d01b      	beq.n	8022d74 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 8022d3c:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 8022d40:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022d44:	fb0e fb0b 	mul.w	fp, lr, fp
 8022d48:	fb0e fe02 	mul.w	lr, lr, r2
 8022d4c:	ea4f 221b 	mov.w	r2, fp, lsr #8
 8022d50:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 8022d54:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8022d58:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022d5c:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 8022d60:	445a      	add	r2, fp
 8022d62:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022d66:	0a12      	lsrs	r2, r2, #8
 8022d68:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 8022d6c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 8022d70:	ea42 020c 	orr.w	r2, r2, ip
 8022d74:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022d76:	2cff      	cmp	r4, #255	@ 0xff
 8022d78:	d021      	beq.n	8022dbe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 8022d7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022d7c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022d80:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022d82:	fb04 fc0c 	mul.w	ip, r4, ip
 8022d86:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022d88:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022d8c:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022d90:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8022d92:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022d96:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022d9a:	fb04 fb0b 	mul.w	fp, r4, fp
 8022d9e:	44e6      	add	lr, ip
 8022da0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022da4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022da8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022dac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022db0:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022db4:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022db8:	ea4e 040b 	orr.w	r4, lr, fp
 8022dbc:	940a      	str	r4, [sp, #40]	@ 0x28
 8022dbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022dc0:	2cff      	cmp	r4, #255	@ 0xff
 8022dc2:	d021      	beq.n	8022e08 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 8022dc4:	9c07      	ldr	r4, [sp, #28]
 8022dc6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022dca:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022dcc:	fb04 fc0c 	mul.w	ip, r4, ip
 8022dd0:	9c07      	ldr	r4, [sp, #28]
 8022dd2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022dd6:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022dda:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 8022ddc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022de0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022de4:	fb04 fb0b 	mul.w	fp, r4, fp
 8022de8:	44e6      	add	lr, ip
 8022dea:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022dee:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022df2:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022df6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022dfa:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022dfe:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022e02:	ea4e 040b 	orr.w	r4, lr, fp
 8022e06:	9407      	str	r4, [sp, #28]
 8022e08:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022e0a:	2cff      	cmp	r4, #255	@ 0xff
 8022e0c:	d021      	beq.n	8022e52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8022e0e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022e10:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022e14:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022e16:	fb04 fc0c 	mul.w	ip, r4, ip
 8022e1a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022e1c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 8022e20:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 8022e24:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8022e26:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8022e2a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e2e:	fb04 fb0b 	mul.w	fp, r4, fp
 8022e32:	44e6      	add	lr, ip
 8022e34:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 8022e38:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8022e3c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 8022e40:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8022e44:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 8022e48:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 8022e4c:	ea4e 040b 	orr.w	r4, lr, fp
 8022e50:	940b      	str	r4, [sp, #44]	@ 0x2c
 8022e52:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022e54:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 8022e58:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 8022e5c:	2bff      	cmp	r3, #255	@ 0xff
 8022e5e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8022e62:	9c07      	ldr	r4, [sp, #28]
 8022e64:	fb09 fc0c 	mul.w	ip, r9, ip
 8022e68:	fb01 cc0e 	mla	ip, r1, lr, ip
 8022e6c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022e70:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 8022e72:	fb00 cc0e 	mla	ip, r0, lr, ip
 8022e76:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8022e7a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8022e7c:	fb0a cc0e 	mla	ip, sl, lr, ip
 8022e80:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8022e84:	fb09 f90e 	mul.w	r9, r9, lr
 8022e88:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8022e8c:	fb01 9202 	mla	r2, r1, r2, r9
 8022e90:	9907      	ldr	r1, [sp, #28]
 8022e92:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8022e96:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 8022e9a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8022e9c:	fb00 220b 	mla	r2, r0, fp, r2
 8022ea0:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 8022ea4:	fb0a 2a00 	mla	sl, sl, r0, r2
 8022ea8:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8022eac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8022eb0:	ea4c 0c0a 	orr.w	ip, ip, sl
 8022eb4:	fa5f f08c 	uxtb.w	r0, ip
 8022eb8:	f3cc 2107 	ubfx	r1, ip, #8, #8
 8022ebc:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 8022ec0:	f000 80a2 	beq.w	8023008 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 8022ec4:	43db      	mvns	r3, r3
 8022ec6:	783a      	ldrb	r2, [r7, #0]
 8022ec8:	f897 a002 	ldrb.w	sl, [r7, #2]
 8022ecc:	b2db      	uxtb	r3, r3
 8022ece:	fb02 fe03 	mul.w	lr, r2, r3
 8022ed2:	fb0a fa03 	mul.w	sl, sl, r3
 8022ed6:	f10e 0201 	add.w	r2, lr, #1
 8022eda:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 8022ede:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 8022ee2:	703a      	strb	r2, [r7, #0]
 8022ee4:	787a      	ldrb	r2, [r7, #1]
 8022ee6:	fb02 f003 	mul.w	r0, r2, r3
 8022eea:	f10a 0301 	add.w	r3, sl, #1
 8022eee:	1c42      	adds	r2, r0, #1
 8022ef0:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 8022ef4:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 8022ef8:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 8022efc:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8022f00:	707a      	strb	r2, [r7, #1]
 8022f02:	f887 c002 	strb.w	ip, [r7, #2]
 8022f06:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022f08:	3703      	adds	r7, #3
 8022f0a:	f108 38ff 	add.w	r8, r8, #4294967295
 8022f0e:	441d      	add	r5, r3
 8022f10:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022f12:	441e      	add	r6, r3
 8022f14:	e6ab      	b.n	8022c6e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 8022f16:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8022f18:	441d      	add	r5, r3
 8022f1a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8022f1c:	441e      	add	r6, r3
 8022f1e:	9b06      	ldr	r3, [sp, #24]
 8022f20:	3b01      	subs	r3, #1
 8022f22:	9306      	str	r3, [sp, #24]
 8022f24:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f26:	3303      	adds	r3, #3
 8022f28:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f2a:	e680      	b.n	8022c2e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8022f2c:	d024      	beq.n	8022f78 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 8022f2e:	9b06      	ldr	r3, [sp, #24]
 8022f30:	9825      	ldr	r0, [sp, #148]	@ 0x94
 8022f32:	3b01      	subs	r3, #1
 8022f34:	fb00 5003 	mla	r0, r0, r3, r5
 8022f38:	1400      	asrs	r0, r0, #16
 8022f3a:	f53f ae95 	bmi.w	8022c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022f3e:	3901      	subs	r1, #1
 8022f40:	4288      	cmp	r0, r1
 8022f42:	f6bf ae91 	bge.w	8022c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022f46:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8022f48:	fb01 6303 	mla	r3, r1, r3, r6
 8022f4c:	141b      	asrs	r3, r3, #16
 8022f4e:	f53f ae8b 	bmi.w	8022c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022f52:	3a01      	subs	r2, #1
 8022f54:	4293      	cmp	r3, r2
 8022f56:	f6bf ae87 	bge.w	8022c68 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8022f5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f5c:	f8dd b018 	ldr.w	fp, [sp, #24]
 8022f60:	1cdf      	adds	r7, r3, #3
 8022f62:	f1bb 0f00 	cmp.w	fp, #0
 8022f66:	dc6e      	bgt.n	8023046 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 8022f68:	9b06      	ldr	r3, [sp, #24]
 8022f6a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8022f6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022f70:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8022f74:	4423      	add	r3, r4
 8022f76:	9309      	str	r3, [sp, #36]	@ 0x24
 8022f78:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022f7a:	2b00      	cmp	r3, #0
 8022f7c:	f340 81b0 	ble.w	80232e0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 8022f80:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8022f84:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022f86:	ee30 0a04 	vadd.f32	s0, s0, s8
 8022f8a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8022f8e:	eef0 6a62 	vmov.f32	s13, s5
 8022f92:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8022f96:	ee31 1a05 	vadd.f32	s2, s2, s10
 8022f9a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022f9e:	ee16 5a90 	vmov	r5, s13
 8022fa2:	eef0 6a43 	vmov.f32	s13, s6
 8022fa6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8022faa:	ee16 6a90 	vmov	r6, s13
 8022fae:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8022fb2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8022fb6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8022fba:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8022fbe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8022fc2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8022fc6:	ee12 2a90 	vmov	r2, s5
 8022fca:	eef0 2a47 	vmov.f32	s5, s14
 8022fce:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fd2:	ee13 2a10 	vmov	r2, s6
 8022fd6:	9325      	str	r3, [sp, #148]	@ 0x94
 8022fd8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fda:	eeb0 3a67 	vmov.f32	s6, s15
 8022fde:	fb92 f3f3 	sdiv	r3, r2, r3
 8022fe2:	9326      	str	r3, [sp, #152]	@ 0x98
 8022fe4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8022fe6:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8022fe8:	3b01      	subs	r3, #1
 8022fea:	9315      	str	r3, [sp, #84]	@ 0x54
 8022fec:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8022fee:	bf08      	it	eq
 8022ff0:	4613      	moveq	r3, r2
 8022ff2:	9306      	str	r3, [sp, #24]
 8022ff4:	e60d      	b.n	8022c12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8022ff6:	2800      	cmp	r0, #0
 8022ff8:	f43f ae7d 	beq.w	8022cf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8022ffc:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8023000:	9307      	str	r3, [sp, #28]
 8023002:	0e1b      	lsrs	r3, r3, #24
 8023004:	930f      	str	r3, [sp, #60]	@ 0x3c
 8023006:	e676      	b.n	8022cf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 8023008:	7038      	strb	r0, [r7, #0]
 802300a:	7079      	strb	r1, [r7, #1]
 802300c:	e779      	b.n	8022f02 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 802300e:	f112 0901 	adds.w	r9, r2, #1
 8023012:	f53f af78 	bmi.w	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023016:	454b      	cmp	r3, r9
 8023018:	f6ff af75 	blt.w	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802301c:	f11c 0901 	adds.w	r9, ip, #1
 8023020:	f53f af71 	bmi.w	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023024:	45ce      	cmp	lr, r9
 8023026:	f6ff af6e 	blt.w	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 802302a:	b21b      	sxth	r3, r3
 802302c:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 8023030:	fa0f f28e 	sxth.w	r2, lr
 8023034:	e9cd 1003 	strd	r1, r0, [sp, #12]
 8023038:	9200      	str	r2, [sp, #0]
 802303a:	4639      	mov	r1, r7
 802303c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 802303e:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 8023040:	f7ff fca1 	bl	8022986 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 8023044:	e75f      	b.n	8022f06 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 8023046:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8023048:	1429      	asrs	r1, r5, #16
 802304a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 802304c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 8023050:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 8023054:	1433      	asrs	r3, r6, #16
 8023056:	f3c6 3003 	ubfx	r0, r6, #12, #4
 802305a:	fb0c 1303 	mla	r3, ip, r3, r1
 802305e:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8023060:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 8023064:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8023068:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 802306c:	2a00      	cmp	r2, #0
 802306e:	f000 8129 	beq.w	80232c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 8023072:	684c      	ldr	r4, [r1, #4]
 8023074:	940c      	str	r4, [sp, #48]	@ 0x30
 8023076:	0e24      	lsrs	r4, r4, #24
 8023078:	9413      	str	r4, [sp, #76]	@ 0x4c
 802307a:	b198      	cbz	r0, 80230a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 802307c:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 8023080:	f10c 3cff 	add.w	ip, ip, #4294967295
 8023084:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 8023088:	f10c 0c04 	add.w	ip, ip, #4
 802308c:	eb01 080c 	add.w	r8, r1, ip
 8023090:	f851 100c 	ldr.w	r1, [r1, ip]
 8023094:	9108      	str	r1, [sp, #32]
 8023096:	0e09      	lsrs	r1, r1, #24
 8023098:	9110      	str	r1, [sp, #64]	@ 0x40
 802309a:	f8d8 1004 	ldr.w	r1, [r8, #4]
 802309e:	910d      	str	r1, [sp, #52]	@ 0x34
 80230a0:	0e09      	lsrs	r1, r1, #24
 80230a2:	9114      	str	r1, [sp, #80]	@ 0x50
 80230a4:	b292      	uxth	r2, r2
 80230a6:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80230a8:	b280      	uxth	r0, r0
 80230aa:	fb02 f900 	mul.w	r9, r2, r0
 80230ae:	0112      	lsls	r2, r2, #4
 80230b0:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 80230b4:	eba2 0809 	sub.w	r8, r2, r9
 80230b8:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 80230bc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80230be:	b280      	uxth	r0, r0
 80230c0:	fa1f f888 	uxth.w	r8, r8
 80230c4:	1a09      	subs	r1, r1, r0
 80230c6:	fb08 f202 	mul.w	r2, r8, r2
 80230ca:	b289      	uxth	r1, r1
 80230cc:	fb01 220e 	mla	r2, r1, lr, r2
 80230d0:	fb00 2204 	mla	r2, r0, r4, r2
 80230d4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80230d6:	fb09 2204 	mla	r2, r9, r4, r2
 80230da:	f3c2 2207 	ubfx	r2, r2, #8, #8
 80230de:	2a00      	cmp	r2, #0
 80230e0:	f000 80e8 	beq.w	80232b4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 80230e4:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80230e8:	d01b      	beq.n	8023122 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 80230ea:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 80230ee:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 80230f2:	fb0e fa0a 	mul.w	sl, lr, sl
 80230f6:	fb0e fe03 	mul.w	lr, lr, r3
 80230fa:	ea4f 231a 	mov.w	r3, sl, lsr #8
 80230fe:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 8023102:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 8023106:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802310a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 802310e:	4453      	add	r3, sl
 8023110:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 8023114:	0a1b      	lsrs	r3, r3, #8
 8023116:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 802311a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 802311e:	ea43 030c 	orr.w	r3, r3, ip
 8023122:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023124:	2cff      	cmp	r4, #255	@ 0xff
 8023126:	d021      	beq.n	802316c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 8023128:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802312a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 802312e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023130:	fb04 fc0c 	mul.w	ip, r4, ip
 8023134:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023136:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802313a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 802313e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8023140:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023144:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023148:	fb04 fa0a 	mul.w	sl, r4, sl
 802314c:	44e6      	add	lr, ip
 802314e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 8023152:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 8023156:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 802315a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 802315e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 8023162:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 8023166:	ea4e 040a 	orr.w	r4, lr, sl
 802316a:	940c      	str	r4, [sp, #48]	@ 0x30
 802316c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802316e:	2cff      	cmp	r4, #255	@ 0xff
 8023170:	d021      	beq.n	80231b6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 8023172:	9c08      	ldr	r4, [sp, #32]
 8023174:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023178:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 802317a:	fb04 fc0c 	mul.w	ip, r4, ip
 802317e:	9c08      	ldr	r4, [sp, #32]
 8023180:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023184:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8023186:	fb04 fa0e 	mul.w	sl, r4, lr
 802318a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 802318e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 8023192:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 8023196:	44e6      	add	lr, ip
 8023198:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 802319c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231a0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231a8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231ac:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80231b0:	ea4e 040a 	orr.w	r4, lr, sl
 80231b4:	9408      	str	r4, [sp, #32]
 80231b6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80231b8:	2cff      	cmp	r4, #255	@ 0xff
 80231ba:	d021      	beq.n	8023200 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 80231bc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80231be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 80231c2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80231c4:	fb04 fc0c 	mul.w	ip, r4, ip
 80231c8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 80231ca:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 80231ce:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 80231d2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 80231d4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 80231d8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231dc:	fb04 fa0a 	mul.w	sl, r4, sl
 80231e0:	44e6      	add	lr, ip
 80231e2:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 80231e6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 80231ea:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 80231ee:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 80231f2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 80231f6:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 80231fa:	ea4e 040a 	orr.w	r4, lr, sl
 80231fe:	940d      	str	r4, [sp, #52]	@ 0x34
 8023200:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8023202:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 8023206:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 802320a:	2aff      	cmp	r2, #255	@ 0xff
 802320c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 8023210:	9c08      	ldr	r4, [sp, #32]
 8023212:	fb08 fc0c 	mul.w	ip, r8, ip
 8023216:	fb01 cc0e 	mla	ip, r1, lr, ip
 802321a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 802321e:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8023220:	fb00 cc0e 	mla	ip, r0, lr, ip
 8023224:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 8023228:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 802322a:	fb09 cc0e 	mla	ip, r9, lr, ip
 802322e:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 8023232:	fb08 f80e 	mul.w	r8, r8, lr
 8023236:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 802323a:	fb01 8303 	mla	r3, r1, r3, r8
 802323e:	9908      	ldr	r1, [sp, #32]
 8023240:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 8023244:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 8023248:	990d      	ldr	r1, [sp, #52]	@ 0x34
 802324a:	fb00 330a 	mla	r3, r0, sl, r3
 802324e:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 8023252:	fb09 3e0e 	mla	lr, r9, lr, r3
 8023256:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 802325a:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 802325e:	ea4c 0c0e 	orr.w	ip, ip, lr
 8023262:	fa5f f08c 	uxtb.w	r0, ip
 8023266:	f3cc 2107 	ubfx	r1, ip, #8, #8
 802326a:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 802326e:	d032      	beq.n	80232d6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 8023270:	43d2      	mvns	r2, r2
 8023272:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 8023276:	b2d2      	uxtb	r2, r2
 8023278:	fb0e fe02 	mul.w	lr, lr, r2
 802327c:	f10e 0301 	add.w	r3, lr, #1
 8023280:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 8023284:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 8023288:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 802328c:	4350      	muls	r0, r2
 802328e:	f807 3c03 	strb.w	r3, [r7, #-3]
 8023292:	1c43      	adds	r3, r0, #1
 8023294:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 8023298:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 802329c:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80232a0:	4353      	muls	r3, r2
 80232a2:	f807 1c02 	strb.w	r1, [r7, #-2]
 80232a6:	1c5a      	adds	r2, r3, #1
 80232a8:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 80232ac:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 80232b0:	f807 cc01 	strb.w	ip, [r7, #-1]
 80232b4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80232b6:	3703      	adds	r7, #3
 80232b8:	f10b 3bff 	add.w	fp, fp, #4294967295
 80232bc:	441d      	add	r5, r3
 80232be:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 80232c0:	441e      	add	r6, r3
 80232c2:	e64e      	b.n	8022f62 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 80232c4:	2800      	cmp	r0, #0
 80232c6:	f43f aeed 	beq.w	80230a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80232ca:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 80232ce:	9108      	str	r1, [sp, #32]
 80232d0:	0e09      	lsrs	r1, r1, #24
 80232d2:	9110      	str	r1, [sp, #64]	@ 0x40
 80232d4:	e6e6      	b.n	80230a4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 80232d6:	f807 0c03 	strb.w	r0, [r7, #-3]
 80232da:	f807 1c02 	strb.w	r1, [r7, #-2]
 80232de:	e7e7      	b.n	80232b0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 80232e0:	b019      	add	sp, #100	@ 0x64
 80232e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

080232e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 80232e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80232ec:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 80232f0:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 80232f4:	2c00      	cmp	r4, #0
 80232f6:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 80232fa:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 80232fe:	fb00 4e03 	mla	lr, r0, r3, r4
 8023302:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 8023306:	f2c0 80b8 	blt.w	802347a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802330a:	45a1      	cmp	r9, r4
 802330c:	f340 80b5 	ble.w	802347a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023310:	2800      	cmp	r0, #0
 8023312:	f2c0 80b2 	blt.w	802347a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 8023316:	4580      	cmp	r8, r0
 8023318:	f340 80af 	ble.w	802347a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 802331c:	ea4f 055e 	mov.w	r5, lr, lsr #1
 8023320:	f01e 0f01 	tst.w	lr, #1
 8023324:	5d56      	ldrb	r6, [r2, r5]
 8023326:	bf0c      	ite	eq
 8023328:	f006 060f 	andeq.w	r6, r6, #15
 802332c:	1136      	asrne	r6, r6, #4
 802332e:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023332:	b2f6      	uxtb	r6, r6
 8023334:	f114 0a01 	adds.w	sl, r4, #1
 8023338:	f100 80a1 	bmi.w	802347e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802333c:	45d1      	cmp	r9, sl
 802333e:	f340 809e 	ble.w	802347e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023342:	2800      	cmp	r0, #0
 8023344:	f2c0 809b 	blt.w	802347e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 8023348:	4580      	cmp	r8, r0
 802334a:	f340 8098 	ble.w	802347e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 802334e:	2f00      	cmp	r7, #0
 8023350:	f000 8097 	beq.w	8023482 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 8023354:	f10e 0b01 	add.w	fp, lr, #1
 8023358:	ea4f 055b 	mov.w	r5, fp, lsr #1
 802335c:	f01b 0f01 	tst.w	fp, #1
 8023360:	5d55      	ldrb	r5, [r2, r5]
 8023362:	bf0c      	ite	eq
 8023364:	f005 050f 	andeq.w	r5, r5, #15
 8023368:	112d      	asrne	r5, r5, #4
 802336a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 802336e:	b2ed      	uxtb	r5, r5
 8023370:	f1bc 0f00 	cmp.w	ip, #0
 8023374:	f000 8089 	beq.w	802348a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 8023378:	2c00      	cmp	r4, #0
 802337a:	f100 0001 	add.w	r0, r0, #1
 802337e:	f2c0 8082 	blt.w	8023486 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023382:	45a1      	cmp	r9, r4
 8023384:	dd7f      	ble.n	8023486 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 8023386:	2800      	cmp	r0, #0
 8023388:	db7d      	blt.n	8023486 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802338a:	4580      	cmp	r8, r0
 802338c:	dd7b      	ble.n	8023486 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 802338e:	eb03 0b0e 	add.w	fp, r3, lr
 8023392:	ea4f 045b 	mov.w	r4, fp, lsr #1
 8023396:	f01b 0f01 	tst.w	fp, #1
 802339a:	5d14      	ldrb	r4, [r2, r4]
 802339c:	bf0c      	ite	eq
 802339e:	f004 040f 	andeq.w	r4, r4, #15
 80233a2:	1124      	asrne	r4, r4, #4
 80233a4:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 80233a8:	b2e4      	uxtb	r4, r4
 80233aa:	f1ba 0f00 	cmp.w	sl, #0
 80233ae:	db6f      	blt.n	8023490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80233b0:	45d1      	cmp	r9, sl
 80233b2:	dd6d      	ble.n	8023490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80233b4:	2800      	cmp	r0, #0
 80233b6:	db6b      	blt.n	8023490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80233b8:	4580      	cmp	r8, r0
 80233ba:	dd69      	ble.n	8023490 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 80233bc:	2f00      	cmp	r7, #0
 80233be:	d069      	beq.n	8023494 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 80233c0:	3301      	adds	r3, #1
 80233c2:	449e      	add	lr, r3
 80233c4:	ea4f 035e 	mov.w	r3, lr, lsr #1
 80233c8:	f01e 0f01 	tst.w	lr, #1
 80233cc:	5cd0      	ldrb	r0, [r2, r3]
 80233ce:	bf0c      	ite	eq
 80233d0:	f000 000f 	andeq.w	r0, r0, #15
 80233d4:	1100      	asrne	r0, r0, #4
 80233d6:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80233da:	b2c3      	uxtb	r3, r0
 80233dc:	b2ba      	uxth	r2, r7
 80233de:	fa1f fc8c 	uxth.w	ip, ip
 80233e2:	fb02 f00c 	mul.w	r0, r2, ip
 80233e6:	0112      	lsls	r2, r2, #4
 80233e8:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 80233ec:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 80233f0:	1a12      	subs	r2, r2, r0
 80233f2:	fa1f fc8c 	uxth.w	ip, ip
 80233f6:	b292      	uxth	r2, r2
 80233f8:	eba7 070c 	sub.w	r7, r7, ip
 80233fc:	436a      	muls	r2, r5
 80233fe:	b2bf      	uxth	r7, r7
 8023400:	fb06 2207 	mla	r2, r6, r7, r2
 8023404:	fb0c 2404 	mla	r4, ip, r4, r2
 8023408:	fb00 4303 	mla	r3, r0, r3, r4
 802340c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023410:	b38b      	cbz	r3, 8023476 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 8023412:	4a21      	ldr	r2, [pc, #132]	@ (8023498 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 8023414:	6814      	ldr	r4, [r2, #0]
 8023416:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 802341a:	b2e5      	uxtb	r5, r4
 802341c:	4353      	muls	r3, r2
 802341e:	1c5a      	adds	r2, r3, #1
 8023420:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 8023424:	1212      	asrs	r2, r2, #8
 8023426:	b290      	uxth	r0, r2
 8023428:	43d2      	mvns	r2, r2
 802342a:	fb15 f500 	smulbb	r5, r5, r0
 802342e:	b2d3      	uxtb	r3, r2
 8023430:	780a      	ldrb	r2, [r1, #0]
 8023432:	fb02 5203 	mla	r2, r2, r3, r5
 8023436:	b292      	uxth	r2, r2
 8023438:	1c55      	adds	r5, r2, #1
 802343a:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802343e:	784d      	ldrb	r5, [r1, #1]
 8023440:	fb15 f503 	smulbb	r5, r5, r3
 8023444:	1212      	asrs	r2, r2, #8
 8023446:	700a      	strb	r2, [r1, #0]
 8023448:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802344c:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023450:	fb02 5200 	mla	r2, r2, r0, r5
 8023454:	b292      	uxth	r2, r2
 8023456:	1c55      	adds	r5, r2, #1
 8023458:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 802345c:	1212      	asrs	r2, r2, #8
 802345e:	704a      	strb	r2, [r1, #1]
 8023460:	788a      	ldrb	r2, [r1, #2]
 8023462:	fb12 f303 	smulbb	r3, r2, r3
 8023466:	fb04 3300 	mla	r3, r4, r0, r3
 802346a:	b29b      	uxth	r3, r3
 802346c:	1c5a      	adds	r2, r3, #1
 802346e:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023472:	121b      	asrs	r3, r3, #8
 8023474:	708b      	strb	r3, [r1, #2]
 8023476:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802347a:	2600      	movs	r6, #0
 802347c:	e75a      	b.n	8023334 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 802347e:	2500      	movs	r5, #0
 8023480:	e776      	b.n	8023370 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8023482:	463d      	mov	r5, r7
 8023484:	e774      	b.n	8023370 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 8023486:	2400      	movs	r4, #0
 8023488:	e78f      	b.n	80233aa <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 802348a:	4663      	mov	r3, ip
 802348c:	4664      	mov	r4, ip
 802348e:	e7a5      	b.n	80233dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023490:	2300      	movs	r3, #0
 8023492:	e7a3      	b.n	80233dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023494:	463b      	mov	r3, r7
 8023496:	e7a1      	b.n	80233dc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 8023498:	24025e30 	.word	0x24025e30

0802349c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 802349c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80234a0:	b097      	sub	sp, #92	@ 0x5c
 80234a2:	9214      	str	r2, [sp, #80]	@ 0x50
 80234a4:	9309      	str	r3, [sp, #36]	@ 0x24
 80234a6:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 80234a8:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 80234ac:	9015      	str	r0, [sp, #84]	@ 0x54
 80234ae:	910c      	str	r1, [sp, #48]	@ 0x30
 80234b0:	6850      	ldr	r0, [r2, #4]
 80234b2:	930e      	str	r3, [sp, #56]	@ 0x38
 80234b4:	6812      	ldr	r2, [r2, #0]
 80234b6:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 80234ba:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 80234be:	fb00 1303 	mla	r3, r0, r3, r1
 80234c2:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80234c6:	eb02 0a03 	add.w	sl, r2, r3
 80234ca:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80234cc:	689b      	ldr	r3, [r3, #8]
 80234ce:	3301      	adds	r3, #1
 80234d0:	f023 0301 	bic.w	r3, r3, #1
 80234d4:	930f      	str	r3, [sp, #60]	@ 0x3c
 80234d6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80234d8:	681f      	ldr	r7, [r3, #0]
 80234da:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80234dc:	2b00      	cmp	r3, #0
 80234de:	dc03      	bgt.n	80234e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 80234e0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80234e2:	2b00      	cmp	r3, #0
 80234e4:	f340 8247 	ble.w	8023976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 80234e8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 80234ea:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 80234ee:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 80234f2:	1e48      	subs	r0, r1, #1
 80234f4:	f102 3cff 	add.w	ip, r2, #4294967295
 80234f8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80234fa:	2b00      	cmp	r3, #0
 80234fc:	f340 80e5 	ble.w	80236ca <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 8023500:	ea5f 4e25 	movs.w	lr, r5, asr #16
 8023504:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023508:	d406      	bmi.n	8023518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802350a:	4586      	cmp	lr, r0
 802350c:	da04      	bge.n	8023518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 802350e:	2b00      	cmp	r3, #0
 8023510:	db02      	blt.n	8023518 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8023512:	4563      	cmp	r3, ip
 8023514:	f2c0 80da 	blt.w	80236cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 8023518:	f11e 0e01 	adds.w	lr, lr, #1
 802351c:	f100 80cb 	bmi.w	80236b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023520:	4571      	cmp	r1, lr
 8023522:	f2c0 80c8 	blt.w	80236b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023526:	3301      	adds	r3, #1
 8023528:	f100 80c5 	bmi.w	80236b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 802352c:	429a      	cmp	r2, r3
 802352e:	f2c0 80c2 	blt.w	80236b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 8023532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8023534:	46d0      	mov	r8, sl
 8023536:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 802353a:	930d      	str	r3, [sp, #52]	@ 0x34
 802353c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 802353e:	2b00      	cmp	r3, #0
 8023540:	f340 80e3 	ble.w	802370a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 8023544:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8023546:	1430      	asrs	r0, r6, #16
 8023548:	f3c5 3203 	ubfx	r2, r5, #12, #4
 802354c:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023550:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023554:	142b      	asrs	r3, r5, #16
 8023556:	f100 812e 	bmi.w	80237b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802355a:	f10c 3bff 	add.w	fp, ip, #4294967295
 802355e:	455b      	cmp	r3, fp
 8023560:	f280 8129 	bge.w	80237b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023564:	2800      	cmp	r0, #0
 8023566:	f2c0 8126 	blt.w	80237b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 802356a:	f10e 3bff 	add.w	fp, lr, #4294967295
 802356e:	4558      	cmp	r0, fp
 8023570:	f280 8121 	bge.w	80237b6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 8023574:	fb00 3309 	mla	r3, r0, r9, r3
 8023578:	0858      	lsrs	r0, r3, #1
 802357a:	07dc      	lsls	r4, r3, #31
 802357c:	f817 c000 	ldrb.w	ip, [r7, r0]
 8023580:	bf54      	ite	pl
 8023582:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023586:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802358a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802358e:	fa5f fc8c 	uxtb.w	ip, ip
 8023592:	2a00      	cmp	r2, #0
 8023594:	f000 80fe 	beq.w	8023794 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 8023598:	1c58      	adds	r0, r3, #1
 802359a:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 802359e:	07c0      	lsls	r0, r0, #31
 80235a0:	f817 e00e 	ldrb.w	lr, [r7, lr]
 80235a4:	bf54      	ite	pl
 80235a6:	f00e 0e0f 	andpl.w	lr, lr, #15
 80235aa:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 80235ae:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 80235b2:	fa5f f08e 	uxtb.w	r0, lr
 80235b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80235b8:	b1d9      	cbz	r1, 80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80235ba:	444b      	add	r3, r9
 80235bc:	0858      	lsrs	r0, r3, #1
 80235be:	07dc      	lsls	r4, r3, #31
 80235c0:	f103 0301 	add.w	r3, r3, #1
 80235c4:	5c38      	ldrb	r0, [r7, r0]
 80235c6:	bf54      	ite	pl
 80235c8:	f000 000f 	andpl.w	r0, r0, #15
 80235cc:	1100      	asrmi	r0, r0, #4
 80235ce:	07dc      	lsls	r4, r3, #31
 80235d0:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 80235d4:	b2c0      	uxtb	r0, r0
 80235d6:	900a      	str	r0, [sp, #40]	@ 0x28
 80235d8:	ea4f 0053 	mov.w	r0, r3, lsr #1
 80235dc:	f817 e000 	ldrb.w	lr, [r7, r0]
 80235e0:	bf54      	ite	pl
 80235e2:	f00e 030f 	andpl.w	r3, lr, #15
 80235e6:	ea4f 132e 	movmi.w	r3, lr, asr #4
 80235ea:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80235ee:	b2db      	uxtb	r3, r3
 80235f0:	9311      	str	r3, [sp, #68]	@ 0x44
 80235f2:	b292      	uxth	r2, r2
 80235f4:	b289      	uxth	r1, r1
 80235f6:	0113      	lsls	r3, r2, #4
 80235f8:	fb02 f001 	mul.w	r0, r2, r1
 80235fc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80235fe:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 8023602:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 8023606:	1a1b      	subs	r3, r3, r0
 8023608:	b289      	uxth	r1, r1
 802360a:	b29b      	uxth	r3, r3
 802360c:	ebae 0e01 	sub.w	lr, lr, r1
 8023610:	4353      	muls	r3, r2
 8023612:	fa1f fe8e 	uxth.w	lr, lr
 8023616:	fb0c 320e 	mla	r2, ip, lr, r3
 802361a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 802361c:	fb01 2203 	mla	r2, r1, r3, r2
 8023620:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8023622:	fb00 2203 	mla	r2, r0, r3, r2
 8023626:	f3c2 2207 	ubfx	r2, r2, #8, #8
 802362a:	2a00      	cmp	r2, #0
 802362c:	d039      	beq.n	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 802362e:	4bc7      	ldr	r3, [pc, #796]	@ (802394c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 8023630:	6819      	ldr	r1, [r3, #0]
 8023632:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8023634:	fa5f fc81 	uxtb.w	ip, r1
 8023638:	435a      	muls	r2, r3
 802363a:	1c53      	adds	r3, r2, #1
 802363c:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023640:	1212      	asrs	r2, r2, #8
 8023642:	b290      	uxth	r0, r2
 8023644:	43d2      	mvns	r2, r2
 8023646:	fb1c fc00 	smulbb	ip, ip, r0
 802364a:	b2d3      	uxtb	r3, r2
 802364c:	f898 2000 	ldrb.w	r2, [r8]
 8023650:	fb02 c203 	mla	r2, r2, r3, ip
 8023654:	b292      	uxth	r2, r2
 8023656:	f102 0c01 	add.w	ip, r2, #1
 802365a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 802365e:	f898 c001 	ldrb.w	ip, [r8, #1]
 8023662:	fb1c fc03 	smulbb	ip, ip, r3
 8023666:	1212      	asrs	r2, r2, #8
 8023668:	f888 2000 	strb.w	r2, [r8]
 802366c:	f3c1 2207 	ubfx	r2, r1, #8, #8
 8023670:	f3c1 4107 	ubfx	r1, r1, #16, #8
 8023674:	fb02 c200 	mla	r2, r2, r0, ip
 8023678:	b292      	uxth	r2, r2
 802367a:	f102 0c01 	add.w	ip, r2, #1
 802367e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023682:	1212      	asrs	r2, r2, #8
 8023684:	f888 2001 	strb.w	r2, [r8, #1]
 8023688:	f898 2002 	ldrb.w	r2, [r8, #2]
 802368c:	fb12 f303 	smulbb	r3, r2, r3
 8023690:	fb01 3300 	mla	r3, r1, r0, r3
 8023694:	b29b      	uxth	r3, r3
 8023696:	1c5a      	adds	r2, r3, #1
 8023698:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 802369c:	121b      	asrs	r3, r3, #8
 802369e:	f888 3002 	strb.w	r3, [r8, #2]
 80236a2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80236a4:	f108 0803 	add.w	r8, r8, #3
 80236a8:	441d      	add	r5, r3
 80236aa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80236ac:	441e      	add	r6, r3
 80236ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80236b0:	3b01      	subs	r3, #1
 80236b2:	930d      	str	r3, [sp, #52]	@ 0x34
 80236b4:	e742      	b.n	802353c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 80236b6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80236b8:	f10a 0a03 	add.w	sl, sl, #3
 80236bc:	441d      	add	r5, r3
 80236be:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80236c0:	441e      	add	r6, r3
 80236c2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236c4:	3b01      	subs	r3, #1
 80236c6:	9309      	str	r3, [sp, #36]	@ 0x24
 80236c8:	e716      	b.n	80234f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 80236ca:	d024      	beq.n	8023716 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 80236cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80236ce:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80236d0:	3b01      	subs	r3, #1
 80236d2:	fb00 5003 	mla	r0, r0, r3, r5
 80236d6:	1400      	asrs	r0, r0, #16
 80236d8:	f53f af2b 	bmi.w	8023532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236dc:	3901      	subs	r1, #1
 80236de:	4288      	cmp	r0, r1
 80236e0:	f6bf af27 	bge.w	8023532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236e4:	9924      	ldr	r1, [sp, #144]	@ 0x90
 80236e6:	fb01 6303 	mla	r3, r1, r3, r6
 80236ea:	141b      	asrs	r3, r3, #16
 80236ec:	f53f af21 	bmi.w	8023532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236f0:	3a01      	subs	r2, #1
 80236f2:	4293      	cmp	r3, r2
 80236f4:	f6bf af1d 	bge.w	8023532 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80236f8:	f10a 0e03 	add.w	lr, sl, #3
 80236fc:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 8023700:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 8023704:	f1b8 0f00 	cmp.w	r8, #0
 8023708:	dc76      	bgt.n	80237f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 802370a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802370c:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 8023710:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023714:	44a2      	add	sl, r4
 8023716:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023718:	2b00      	cmp	r3, #0
 802371a:	f340 812c 	ble.w	8023976 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 802371e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023722:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023724:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023728:	ee70 0aa4 	vadd.f32	s1, s1, s9
 802372c:	eef0 6a62 	vmov.f32	s13, s5
 8023730:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023734:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023738:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 802373c:	ee16 5a90 	vmov	r5, s13
 8023740:	eef0 6a43 	vmov.f32	s13, s6
 8023744:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023748:	ee16 6a90 	vmov	r6, s13
 802374c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023750:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023754:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023758:	ee37 3ac3 	vsub.f32	s6, s15, s6
 802375c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023760:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023764:	ee12 2a90 	vmov	r2, s5
 8023768:	eef0 2a47 	vmov.f32	s5, s14
 802376c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023770:	ee13 2a10 	vmov	r2, s6
 8023774:	9323      	str	r3, [sp, #140]	@ 0x8c
 8023776:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023778:	eeb0 3a67 	vmov.f32	s6, s15
 802377c:	fb92 f3f3 	sdiv	r3, r2, r3
 8023780:	9324      	str	r3, [sp, #144]	@ 0x90
 8023782:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023784:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8023786:	3b01      	subs	r3, #1
 8023788:	930c      	str	r3, [sp, #48]	@ 0x30
 802378a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 802378c:	bf08      	it	eq
 802378e:	4613      	moveq	r3, r2
 8023790:	9309      	str	r3, [sp, #36]	@ 0x24
 8023792:	e6a2      	b.n	80234da <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 8023794:	2900      	cmp	r1, #0
 8023796:	f43f af2c 	beq.w	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 802379a:	eb09 0003 	add.w	r0, r9, r3
 802379e:	0843      	lsrs	r3, r0, #1
 80237a0:	07c0      	lsls	r0, r0, #31
 80237a2:	5cfb      	ldrb	r3, [r7, r3]
 80237a4:	bf54      	ite	pl
 80237a6:	f003 030f 	andpl.w	r3, r3, #15
 80237aa:	111b      	asrmi	r3, r3, #4
 80237ac:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 80237b0:	b2db      	uxtb	r3, r3
 80237b2:	930a      	str	r3, [sp, #40]	@ 0x28
 80237b4:	e71d      	b.n	80235f2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 80237b6:	f113 0b01 	adds.w	fp, r3, #1
 80237ba:	f53f af72 	bmi.w	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80237be:	45dc      	cmp	ip, fp
 80237c0:	f6ff af6f 	blt.w	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80237c4:	f110 0b01 	adds.w	fp, r0, #1
 80237c8:	f53f af6b 	bmi.w	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80237cc:	45de      	cmp	lr, fp
 80237ce:	f6ff af68 	blt.w	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80237d2:	9302      	str	r3, [sp, #8]
 80237d4:	fa0f f38e 	sxth.w	r3, lr
 80237d8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 80237da:	9301      	str	r3, [sp, #4]
 80237dc:	fa0f f38c 	sxth.w	r3, ip
 80237e0:	e9cd 0203 	strd	r0, r2, [sp, #12]
 80237e4:	e9cd 1405 	strd	r1, r4, [sp, #20]
 80237e8:	9300      	str	r3, [sp, #0]
 80237ea:	463a      	mov	r2, r7
 80237ec:	464b      	mov	r3, r9
 80237ee:	4641      	mov	r1, r8
 80237f0:	9815      	ldr	r0, [sp, #84]	@ 0x54
 80237f2:	f7ff fd79 	bl	80232e8 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 80237f6:	e754      	b.n	80236a2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 80237f8:	142a      	asrs	r2, r5, #16
 80237fa:	f3c5 3103 	ubfx	r1, r5, #12, #4
 80237fe:	1433      	asrs	r3, r6, #16
 8023800:	f3c6 3003 	ubfx	r0, r6, #12, #4
 8023804:	fb09 2303 	mla	r3, r9, r3, r2
 8023808:	085a      	lsrs	r2, r3, #1
 802380a:	07dc      	lsls	r4, r3, #31
 802380c:	5cba      	ldrb	r2, [r7, r2]
 802380e:	bf54      	ite	pl
 8023810:	f002 020f 	andpl.w	r2, r2, #15
 8023814:	1112      	asrmi	r2, r2, #4
 8023816:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 802381a:	b2d2      	uxtb	r2, r2
 802381c:	2900      	cmp	r1, #0
 802381e:	f000 8097 	beq.w	8023950 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 8023822:	f103 0b01 	add.w	fp, r3, #1
 8023826:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 802382a:	f01b 0f01 	tst.w	fp, #1
 802382e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023832:	bf0c      	ite	eq
 8023834:	f00c 0c0f 	andeq.w	ip, ip, #15
 8023838:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 802383c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023840:	fa5f f48c 	uxtb.w	r4, ip
 8023844:	9412      	str	r4, [sp, #72]	@ 0x48
 8023846:	b300      	cbz	r0, 802388a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023848:	444b      	add	r3, r9
 802384a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802384e:	07dc      	lsls	r4, r3, #31
 8023850:	f103 0301 	add.w	r3, r3, #1
 8023854:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023858:	bf54      	ite	pl
 802385a:	f00c 0c0f 	andpl.w	ip, ip, #15
 802385e:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023862:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023866:	fa5f f48c 	uxtb.w	r4, ip
 802386a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802386e:	940b      	str	r4, [sp, #44]	@ 0x2c
 8023870:	07dc      	lsls	r4, r3, #31
 8023872:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023876:	bf54      	ite	pl
 8023878:	f00c 0c0f 	andpl.w	ip, ip, #15
 802387c:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023880:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023884:	fa5f f38c 	uxtb.w	r3, ip
 8023888:	9313      	str	r3, [sp, #76]	@ 0x4c
 802388a:	b289      	uxth	r1, r1
 802388c:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 802388e:	b280      	uxth	r0, r0
 8023890:	fb01 f300 	mul.w	r3, r1, r0
 8023894:	0109      	lsls	r1, r1, #4
 8023896:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 802389a:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 802389e:	1ac9      	subs	r1, r1, r3
 80238a0:	b280      	uxth	r0, r0
 80238a2:	b289      	uxth	r1, r1
 80238a4:	ebac 0c00 	sub.w	ip, ip, r0
 80238a8:	4361      	muls	r1, r4
 80238aa:	fa1f fc8c 	uxth.w	ip, ip
 80238ae:	fb02 120c 	mla	r2, r2, ip, r1
 80238b2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80238b4:	fb00 2001 	mla	r0, r0, r1, r2
 80238b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80238ba:	fb03 0302 	mla	r3, r3, r2, r0
 80238be:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80238c2:	2b00      	cmp	r3, #0
 80238c4:	d039      	beq.n	802393a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 80238c6:	4a21      	ldr	r2, [pc, #132]	@ (802394c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 80238c8:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 80238cc:	6810      	ldr	r0, [r2, #0]
 80238ce:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80238d0:	fa5f fc80 	uxtb.w	ip, r0
 80238d4:	4353      	muls	r3, r2
 80238d6:	1c5a      	adds	r2, r3, #1
 80238d8:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 80238dc:	121b      	asrs	r3, r3, #8
 80238de:	b29a      	uxth	r2, r3
 80238e0:	43db      	mvns	r3, r3
 80238e2:	fb1c fc02 	smulbb	ip, ip, r2
 80238e6:	b2db      	uxtb	r3, r3
 80238e8:	fb01 c103 	mla	r1, r1, r3, ip
 80238ec:	b289      	uxth	r1, r1
 80238ee:	f101 0c01 	add.w	ip, r1, #1
 80238f2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 80238f6:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 80238fa:	fb1c fc03 	smulbb	ip, ip, r3
 80238fe:	1209      	asrs	r1, r1, #8
 8023900:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8023904:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8023908:	f3c0 4007 	ubfx	r0, r0, #16, #8
 802390c:	fb01 c102 	mla	r1, r1, r2, ip
 8023910:	b289      	uxth	r1, r1
 8023912:	f101 0c01 	add.w	ip, r1, #1
 8023916:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 802391a:	1209      	asrs	r1, r1, #8
 802391c:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8023920:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8023924:	fb11 f303 	smulbb	r3, r1, r3
 8023928:	fb00 3002 	mla	r0, r0, r2, r3
 802392c:	b280      	uxth	r0, r0
 802392e:	1c42      	adds	r2, r0, #1
 8023930:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023934:	1200      	asrs	r0, r0, #8
 8023936:	f80e 0c01 	strb.w	r0, [lr, #-1]
 802393a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 802393c:	f10e 0e03 	add.w	lr, lr, #3
 8023940:	f108 38ff 	add.w	r8, r8, #4294967295
 8023944:	441d      	add	r5, r3
 8023946:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023948:	441e      	add	r6, r3
 802394a:	e6db      	b.n	8023704 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 802394c:	24025e30 	.word	0x24025e30
 8023950:	2800      	cmp	r0, #0
 8023952:	d09a      	beq.n	802388a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023954:	444b      	add	r3, r9
 8023956:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 802395a:	07db      	lsls	r3, r3, #31
 802395c:	f817 c00c 	ldrb.w	ip, [r7, ip]
 8023960:	bf54      	ite	pl
 8023962:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023966:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 802396a:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 802396e:	fa5f f38c 	uxtb.w	r3, ip
 8023972:	930b      	str	r3, [sp, #44]	@ 0x2c
 8023974:	e789      	b.n	802388a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 8023976:	b017      	add	sp, #92	@ 0x5c
 8023978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0802397c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 802397c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023980:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 8023984:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023988:	2d00      	cmp	r5, #0
 802398a:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 802398e:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 8023992:	fb04 5e03 	mla	lr, r4, r3, r5
 8023996:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 802399a:	f2c0 80b1 	blt.w	8023b00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 802399e:	45a9      	cmp	r9, r5
 80239a0:	f340 80ae 	ble.w	8023b00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80239a4:	2c00      	cmp	r4, #0
 80239a6:	f2c0 80ab 	blt.w	8023b00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80239aa:	45a0      	cmp	r8, r4
 80239ac:	f340 80a8 	ble.w	8023b00 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 80239b0:	ea4f 065e 	mov.w	r6, lr, lsr #1
 80239b4:	f01e 0f01 	tst.w	lr, #1
 80239b8:	5d97      	ldrb	r7, [r2, r6]
 80239ba:	bf0c      	ite	eq
 80239bc:	f007 070f 	andeq.w	r7, r7, #15
 80239c0:	113f      	asrne	r7, r7, #4
 80239c2:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 80239c6:	b2ff      	uxtb	r7, r7
 80239c8:	f115 0a01 	adds.w	sl, r5, #1
 80239cc:	f100 809a 	bmi.w	8023b04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80239d0:	45d1      	cmp	r9, sl
 80239d2:	f340 8097 	ble.w	8023b04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80239d6:	2c00      	cmp	r4, #0
 80239d8:	f2c0 8094 	blt.w	8023b04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80239dc:	45a0      	cmp	r8, r4
 80239de:	f340 8091 	ble.w	8023b04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 80239e2:	2800      	cmp	r0, #0
 80239e4:	f000 8090 	beq.w	8023b08 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 80239e8:	f10e 0b01 	add.w	fp, lr, #1
 80239ec:	ea4f 065b 	mov.w	r6, fp, lsr #1
 80239f0:	f01b 0f01 	tst.w	fp, #1
 80239f4:	5d96      	ldrb	r6, [r2, r6]
 80239f6:	bf0c      	ite	eq
 80239f8:	f006 060f 	andeq.w	r6, r6, #15
 80239fc:	1136      	asrne	r6, r6, #4
 80239fe:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 8023a02:	b2f6      	uxtb	r6, r6
 8023a04:	f1bc 0f00 	cmp.w	ip, #0
 8023a08:	f000 8082 	beq.w	8023b10 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 8023a0c:	2d00      	cmp	r5, #0
 8023a0e:	f104 0401 	add.w	r4, r4, #1
 8023a12:	db7b      	blt.n	8023b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023a14:	45a9      	cmp	r9, r5
 8023a16:	dd79      	ble.n	8023b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023a18:	2c00      	cmp	r4, #0
 8023a1a:	db77      	blt.n	8023b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023a1c:	45a0      	cmp	r8, r4
 8023a1e:	dd75      	ble.n	8023b0c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 8023a20:	eb03 0b0e 	add.w	fp, r3, lr
 8023a24:	ea4f 055b 	mov.w	r5, fp, lsr #1
 8023a28:	f01b 0f01 	tst.w	fp, #1
 8023a2c:	5d55      	ldrb	r5, [r2, r5]
 8023a2e:	bf0c      	ite	eq
 8023a30:	f005 050f 	andeq.w	r5, r5, #15
 8023a34:	112d      	asrne	r5, r5, #4
 8023a36:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 8023a3a:	b2ed      	uxtb	r5, r5
 8023a3c:	f1ba 0f00 	cmp.w	sl, #0
 8023a40:	db69      	blt.n	8023b16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023a42:	45d1      	cmp	r9, sl
 8023a44:	dd67      	ble.n	8023b16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023a46:	2c00      	cmp	r4, #0
 8023a48:	db65      	blt.n	8023b16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023a4a:	45a0      	cmp	r8, r4
 8023a4c:	dd63      	ble.n	8023b16 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 8023a4e:	2800      	cmp	r0, #0
 8023a50:	d063      	beq.n	8023b1a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 8023a52:	3301      	adds	r3, #1
 8023a54:	449e      	add	lr, r3
 8023a56:	ea4f 035e 	mov.w	r3, lr, lsr #1
 8023a5a:	f01e 0f01 	tst.w	lr, #1
 8023a5e:	5cd4      	ldrb	r4, [r2, r3]
 8023a60:	bf0c      	ite	eq
 8023a62:	f004 040f 	andeq.w	r4, r4, #15
 8023a66:	1124      	asrne	r4, r4, #4
 8023a68:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 8023a6c:	b2e3      	uxtb	r3, r4
 8023a6e:	b282      	uxth	r2, r0
 8023a70:	fa1f fc8c 	uxth.w	ip, ip
 8023a74:	fb02 f40c 	mul.w	r4, r2, ip
 8023a78:	0112      	lsls	r2, r2, #4
 8023a7a:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 8023a7e:	fa1f f08c 	uxth.w	r0, ip
 8023a82:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 8023a86:	1b12      	subs	r2, r2, r4
 8023a88:	ebac 0c00 	sub.w	ip, ip, r0
 8023a8c:	b292      	uxth	r2, r2
 8023a8e:	fa1f fc8c 	uxth.w	ip, ip
 8023a92:	4372      	muls	r2, r6
 8023a94:	fb07 220c 	mla	r2, r7, ip, r2
 8023a98:	fb00 2005 	mla	r0, r0, r5, r2
 8023a9c:	fb04 0303 	mla	r3, r4, r3, r0
 8023aa0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023aa4:	b353      	cbz	r3, 8023afc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 8023aa6:	4a1e      	ldr	r2, [pc, #120]	@ (8023b20 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 8023aa8:	7808      	ldrb	r0, [r1, #0]
 8023aaa:	6814      	ldr	r4, [r2, #0]
 8023aac:	b29a      	uxth	r2, r3
 8023aae:	43db      	mvns	r3, r3
 8023ab0:	b2e5      	uxtb	r5, r4
 8023ab2:	b2db      	uxtb	r3, r3
 8023ab4:	fb15 f502 	smulbb	r5, r5, r2
 8023ab8:	fb00 5003 	mla	r0, r0, r3, r5
 8023abc:	b280      	uxth	r0, r0
 8023abe:	1c45      	adds	r5, r0, #1
 8023ac0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ac4:	784d      	ldrb	r5, [r1, #1]
 8023ac6:	fb15 f503 	smulbb	r5, r5, r3
 8023aca:	1200      	asrs	r0, r0, #8
 8023acc:	7008      	strb	r0, [r1, #0]
 8023ace:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8023ad2:	f3c4 4407 	ubfx	r4, r4, #16, #8
 8023ad6:	fb00 5002 	mla	r0, r0, r2, r5
 8023ada:	b280      	uxth	r0, r0
 8023adc:	1c45      	adds	r5, r0, #1
 8023ade:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 8023ae2:	1200      	asrs	r0, r0, #8
 8023ae4:	7048      	strb	r0, [r1, #1]
 8023ae6:	7888      	ldrb	r0, [r1, #2]
 8023ae8:	fb10 f303 	smulbb	r3, r0, r3
 8023aec:	fb04 3202 	mla	r2, r4, r2, r3
 8023af0:	b292      	uxth	r2, r2
 8023af2:	1c53      	adds	r3, r2, #1
 8023af4:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 8023af8:	1212      	asrs	r2, r2, #8
 8023afa:	708a      	strb	r2, [r1, #2]
 8023afc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b00:	2700      	movs	r7, #0
 8023b02:	e761      	b.n	80239c8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 8023b04:	2600      	movs	r6, #0
 8023b06:	e77d      	b.n	8023a04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023b08:	4606      	mov	r6, r0
 8023b0a:	e77b      	b.n	8023a04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 8023b0c:	2500      	movs	r5, #0
 8023b0e:	e795      	b.n	8023a3c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 8023b10:	4663      	mov	r3, ip
 8023b12:	4665      	mov	r5, ip
 8023b14:	e7ab      	b.n	8023a6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023b16:	2300      	movs	r3, #0
 8023b18:	e7a9      	b.n	8023a6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023b1a:	4603      	mov	r3, r0
 8023b1c:	e7a7      	b.n	8023a6e <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 8023b1e:	bf00      	nop
 8023b20:	24025e30 	.word	0x24025e30

08023b24 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8023b24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b28:	b093      	sub	sp, #76	@ 0x4c
 8023b2a:	461c      	mov	r4, r3
 8023b2c:	920c      	str	r2, [sp, #48]	@ 0x30
 8023b2e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8023b30:	9011      	str	r0, [sp, #68]	@ 0x44
 8023b32:	9107      	str	r1, [sp, #28]
 8023b34:	6850      	ldr	r0, [r2, #4]
 8023b36:	6812      	ldr	r2, [r2, #0]
 8023b38:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 8023b3c:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 8023b40:	fb00 1303 	mla	r3, r0, r3, r1
 8023b44:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8023b48:	eb02 0b03 	add.w	fp, r2, r3
 8023b4c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023b4e:	689b      	ldr	r3, [r3, #8]
 8023b50:	3301      	adds	r3, #1
 8023b52:	f023 0301 	bic.w	r3, r3, #1
 8023b56:	9309      	str	r3, [sp, #36]	@ 0x24
 8023b58:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023b5a:	f8d3 8000 	ldr.w	r8, [r3]
 8023b5e:	9b07      	ldr	r3, [sp, #28]
 8023b60:	2b00      	cmp	r3, #0
 8023b62:	dc03      	bgt.n	8023b6c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8023b64:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8023b66:	2b00      	cmp	r3, #0
 8023b68:	f340 822b 	ble.w	8023fc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023b6c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023b6e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 8023b72:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 8023b76:	1e48      	subs	r0, r1, #1
 8023b78:	1e57      	subs	r7, r2, #1
 8023b7a:	2c00      	cmp	r4, #0
 8023b7c:	f340 80d7 	ble.w	8023d2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 8023b80:	ea5f 4c25 	movs.w	ip, r5, asr #16
 8023b84:	ea4f 4326 	mov.w	r3, r6, asr #16
 8023b88:	d406      	bmi.n	8023b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b8a:	4584      	cmp	ip, r0
 8023b8c:	da04      	bge.n	8023b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b8e:	2b00      	cmp	r3, #0
 8023b90:	db02      	blt.n	8023b98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 8023b92:	42bb      	cmp	r3, r7
 8023b94:	f2c0 80cc 	blt.w	8023d30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 8023b98:	f11c 0c01 	adds.w	ip, ip, #1
 8023b9c:	f100 80bf 	bmi.w	8023d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023ba0:	4561      	cmp	r1, ip
 8023ba2:	f2c0 80bc 	blt.w	8023d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023ba6:	3301      	adds	r3, #1
 8023ba8:	f100 80b9 	bmi.w	8023d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023bac:	429a      	cmp	r2, r3
 8023bae:	f2c0 80b6 	blt.w	8023d1e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 8023bb2:	46a2      	mov	sl, r4
 8023bb4:	465f      	mov	r7, fp
 8023bb6:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023bba:	f1ba 0f00 	cmp.w	sl, #0
 8023bbe:	f340 80d4 	ble.w	8023d6a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 8023bc2:	f3c5 3303 	ubfx	r3, r5, #12, #4
 8023bc6:	1430      	asrs	r0, r6, #16
 8023bc8:	f3c6 3103 	ubfx	r1, r6, #12, #4
 8023bcc:	9308      	str	r3, [sp, #32]
 8023bce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8023bd0:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 8023bd4:	142b      	asrs	r3, r5, #16
 8023bd6:	f100 8124 	bmi.w	8023e22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023bda:	f10c 32ff 	add.w	r2, ip, #4294967295
 8023bde:	4293      	cmp	r3, r2
 8023be0:	f280 811f 	bge.w	8023e22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023be4:	2800      	cmp	r0, #0
 8023be6:	f2c0 811c 	blt.w	8023e22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023bea:	f10e 32ff 	add.w	r2, lr, #4294967295
 8023bee:	4290      	cmp	r0, r2
 8023bf0:	f280 8117 	bge.w	8023e22 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 8023bf4:	fb00 3309 	mla	r3, r0, r9, r3
 8023bf8:	0858      	lsrs	r0, r3, #1
 8023bfa:	07da      	lsls	r2, r3, #31
 8023bfc:	9a08      	ldr	r2, [sp, #32]
 8023bfe:	f818 c000 	ldrb.w	ip, [r8, r0]
 8023c02:	bf54      	ite	pl
 8023c04:	f00c 0c0f 	andpl.w	ip, ip, #15
 8023c08:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 8023c0c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 8023c10:	fa5f fc8c 	uxtb.w	ip, ip
 8023c14:	2a00      	cmp	r2, #0
 8023c16:	f000 80ed 	beq.w	8023df4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 8023c1a:	1c58      	adds	r0, r3, #1
 8023c1c:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 8023c20:	07c0      	lsls	r0, r0, #31
 8023c22:	f818 e00e 	ldrb.w	lr, [r8, lr]
 8023c26:	bf54      	ite	pl
 8023c28:	f00e 0e0f 	andpl.w	lr, lr, #15
 8023c2c:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 8023c30:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 8023c34:	fa5f fe8e 	uxtb.w	lr, lr
 8023c38:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 8023c3c:	b1c9      	cbz	r1, 8023c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023c3e:	444b      	add	r3, r9
 8023c40:	0858      	lsrs	r0, r3, #1
 8023c42:	07da      	lsls	r2, r3, #31
 8023c44:	f818 0000 	ldrb.w	r0, [r8, r0]
 8023c48:	bf54      	ite	pl
 8023c4a:	f000 000f 	andpl.w	r0, r0, #15
 8023c4e:	1100      	asrmi	r0, r0, #4
 8023c50:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 8023c54:	b2c0      	uxtb	r0, r0
 8023c56:	900a      	str	r0, [sp, #40]	@ 0x28
 8023c58:	1c58      	adds	r0, r3, #1
 8023c5a:	0843      	lsrs	r3, r0, #1
 8023c5c:	07c2      	lsls	r2, r0, #31
 8023c5e:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023c62:	bf54      	ite	pl
 8023c64:	f003 030f 	andpl.w	r3, r3, #15
 8023c68:	111b      	asrmi	r3, r3, #4
 8023c6a:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023c6e:	b2db      	uxtb	r3, r3
 8023c70:	930e      	str	r3, [sp, #56]	@ 0x38
 8023c72:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8023c76:	b289      	uxth	r1, r1
 8023c78:	fb02 f301 	mul.w	r3, r2, r1
 8023c7c:	0112      	lsls	r2, r2, #4
 8023c7e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 8023c82:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 8023c86:	1ad2      	subs	r2, r2, r3
 8023c88:	b289      	uxth	r1, r1
 8023c8a:	b292      	uxth	r2, r2
 8023c8c:	1a40      	subs	r0, r0, r1
 8023c8e:	fa1f fe80 	uxth.w	lr, r0
 8023c92:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8023c94:	4342      	muls	r2, r0
 8023c96:	fb0c 2c0e 	mla	ip, ip, lr, r2
 8023c9a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8023c9c:	fb01 c102 	mla	r1, r1, r2, ip
 8023ca0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8023ca2:	fb03 1302 	mla	r3, r3, r2, r1
 8023ca6:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023caa:	b383      	cbz	r3, 8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023cac:	4ac6      	ldr	r2, [pc, #792]	@ (8023fc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023cae:	2bff      	cmp	r3, #255	@ 0xff
 8023cb0:	6812      	ldr	r2, [r2, #0]
 8023cb2:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 8023cb6:	f3c2 2007 	ubfx	r0, r2, #8, #8
 8023cba:	b2d2      	uxtb	r2, r2
 8023cbc:	f000 80ac 	beq.w	8023e18 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 8023cc0:	b299      	uxth	r1, r3
 8023cc2:	43db      	mvns	r3, r3
 8023cc4:	f897 c000 	ldrb.w	ip, [r7]
 8023cc8:	fb12 f201 	smulbb	r2, r2, r1
 8023ccc:	b2db      	uxtb	r3, r3
 8023cce:	fb10 f001 	smulbb	r0, r0, r1
 8023cd2:	fb0c 2203 	mla	r2, ip, r3, r2
 8023cd6:	fb1e f101 	smulbb	r1, lr, r1
 8023cda:	b292      	uxth	r2, r2
 8023cdc:	f102 0c01 	add.w	ip, r2, #1
 8023ce0:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 8023ce4:	1212      	asrs	r2, r2, #8
 8023ce6:	703a      	strb	r2, [r7, #0]
 8023ce8:	787a      	ldrb	r2, [r7, #1]
 8023cea:	fb02 0003 	mla	r0, r2, r3, r0
 8023cee:	b280      	uxth	r0, r0
 8023cf0:	1c42      	adds	r2, r0, #1
 8023cf2:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 8023cf6:	78ba      	ldrb	r2, [r7, #2]
 8023cf8:	fb02 1303 	mla	r3, r2, r3, r1
 8023cfc:	1200      	asrs	r0, r0, #8
 8023cfe:	b29b      	uxth	r3, r3
 8023d00:	7078      	strb	r0, [r7, #1]
 8023d02:	f103 0e01 	add.w	lr, r3, #1
 8023d06:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 8023d0a:	121b      	asrs	r3, r3, #8
 8023d0c:	70bb      	strb	r3, [r7, #2]
 8023d0e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023d10:	3703      	adds	r7, #3
 8023d12:	f10a 3aff 	add.w	sl, sl, #4294967295
 8023d16:	441d      	add	r5, r3
 8023d18:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023d1a:	441e      	add	r6, r3
 8023d1c:	e74d      	b.n	8023bba <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8023d1e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023d20:	3c01      	subs	r4, #1
 8023d22:	f10b 0b03 	add.w	fp, fp, #3
 8023d26:	441d      	add	r5, r3
 8023d28:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023d2a:	441e      	add	r6, r3
 8023d2c:	e725      	b.n	8023b7a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8023d2e:	d021      	beq.n	8023d74 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 8023d30:	1e63      	subs	r3, r4, #1
 8023d32:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 8023d34:	fb00 5003 	mla	r0, r0, r3, r5
 8023d38:	1400      	asrs	r0, r0, #16
 8023d3a:	f53f af3a 	bmi.w	8023bb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023d3e:	3901      	subs	r1, #1
 8023d40:	4288      	cmp	r0, r1
 8023d42:	f6bf af36 	bge.w	8023bb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023d46:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8023d48:	fb01 6303 	mla	r3, r1, r3, r6
 8023d4c:	141b      	asrs	r3, r3, #16
 8023d4e:	f53f af30 	bmi.w	8023bb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023d52:	3a01      	subs	r2, #1
 8023d54:	4293      	cmp	r3, r2
 8023d56:	f6bf af2c 	bge.w	8023bb2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8023d5a:	f10b 0c03 	add.w	ip, fp, #3
 8023d5e:	46a6      	mov	lr, r4
 8023d60:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 8023d64:	f1be 0f00 	cmp.w	lr, #0
 8023d68:	dc79      	bgt.n	8023e5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 8023d6a:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 8023d6e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8023d72:	44a3      	add	fp, r4
 8023d74:	9b07      	ldr	r3, [sp, #28]
 8023d76:	2b00      	cmp	r3, #0
 8023d78:	f340 8123 	ble.w	8023fc2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 8023d7c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8023d80:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023d82:	ee30 0a04 	vadd.f32	s0, s0, s8
 8023d86:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8023d8a:	eef0 6a62 	vmov.f32	s13, s5
 8023d8e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8023d92:	ee31 1a05 	vadd.f32	s2, s2, s10
 8023d96:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023d9a:	ee16 5a90 	vmov	r5, s13
 8023d9e:	eef0 6a43 	vmov.f32	s13, s6
 8023da2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8023da6:	ee16 6a90 	vmov	r6, s13
 8023daa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8023dae:	ee61 7a27 	vmul.f32	s15, s2, s15
 8023db2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8023db6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8023dba:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8023dbe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8023dc2:	ee12 2a90 	vmov	r2, s5
 8023dc6:	eef0 2a47 	vmov.f32	s5, s14
 8023dca:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dce:	ee13 2a10 	vmov	r2, s6
 8023dd2:	931f      	str	r3, [sp, #124]	@ 0x7c
 8023dd4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023dd6:	eeb0 3a67 	vmov.f32	s6, s15
 8023dda:	fb92 f3f3 	sdiv	r3, r2, r3
 8023dde:	9320      	str	r3, [sp, #128]	@ 0x80
 8023de0:	9b07      	ldr	r3, [sp, #28]
 8023de2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8023de4:	3b01      	subs	r3, #1
 8023de6:	9307      	str	r3, [sp, #28]
 8023de8:	bf08      	it	eq
 8023dea:	4614      	moveq	r4, r2
 8023dec:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8023dee:	bf18      	it	ne
 8023df0:	461c      	movne	r4, r3
 8023df2:	e6b4      	b.n	8023b5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8023df4:	2900      	cmp	r1, #0
 8023df6:	f43f af3c 	beq.w	8023c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023dfa:	eb09 0003 	add.w	r0, r9, r3
 8023dfe:	0843      	lsrs	r3, r0, #1
 8023e00:	07c0      	lsls	r0, r0, #31
 8023e02:	f818 3003 	ldrb.w	r3, [r8, r3]
 8023e06:	bf54      	ite	pl
 8023e08:	f003 030f 	andpl.w	r3, r3, #15
 8023e0c:	111b      	asrmi	r3, r3, #4
 8023e0e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 8023e12:	b2db      	uxtb	r3, r3
 8023e14:	930a      	str	r3, [sp, #40]	@ 0x28
 8023e16:	e72c      	b.n	8023c72 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 8023e18:	703a      	strb	r2, [r7, #0]
 8023e1a:	7078      	strb	r0, [r7, #1]
 8023e1c:	f887 e002 	strb.w	lr, [r7, #2]
 8023e20:	e775      	b.n	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e22:	1c5a      	adds	r2, r3, #1
 8023e24:	f53f af73 	bmi.w	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e28:	4594      	cmp	ip, r2
 8023e2a:	f6ff af70 	blt.w	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e2e:	1c42      	adds	r2, r0, #1
 8023e30:	f53f af6d 	bmi.w	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e34:	4596      	cmp	lr, r2
 8023e36:	f6ff af6a 	blt.w	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e3a:	9302      	str	r3, [sp, #8]
 8023e3c:	fa0f f38e 	sxth.w	r3, lr
 8023e40:	9a08      	ldr	r2, [sp, #32]
 8023e42:	9301      	str	r3, [sp, #4]
 8023e44:	fa0f f38c 	sxth.w	r3, ip
 8023e48:	9105      	str	r1, [sp, #20]
 8023e4a:	4639      	mov	r1, r7
 8023e4c:	9300      	str	r3, [sp, #0]
 8023e4e:	464b      	mov	r3, r9
 8023e50:	e9cd 0203 	strd	r0, r2, [sp, #12]
 8023e54:	4642      	mov	r2, r8
 8023e56:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8023e58:	f7ff fd90 	bl	802397c <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 8023e5c:	e757      	b.n	8023d0e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8023e5e:	142a      	asrs	r2, r5, #16
 8023e60:	f3c5 3003 	ubfx	r0, r5, #12, #4
 8023e64:	1433      	asrs	r3, r6, #16
 8023e66:	f3c6 3703 	ubfx	r7, r6, #12, #4
 8023e6a:	fb09 2303 	mla	r3, r9, r3, r2
 8023e6e:	085a      	lsrs	r2, r3, #1
 8023e70:	07d9      	lsls	r1, r3, #31
 8023e72:	f818 2002 	ldrb.w	r2, [r8, r2]
 8023e76:	bf54      	ite	pl
 8023e78:	f002 020f 	andpl.w	r2, r2, #15
 8023e7c:	1112      	asrmi	r2, r2, #4
 8023e7e:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8023e82:	b2d2      	uxtb	r2, r2
 8023e84:	2800      	cmp	r0, #0
 8023e86:	f000 8085 	beq.w	8023f94 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 8023e8a:	f103 0a01 	add.w	sl, r3, #1
 8023e8e:	ea4f 015a 	mov.w	r1, sl, lsr #1
 8023e92:	f01a 0f01 	tst.w	sl, #1
 8023e96:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023e9a:	bf0c      	ite	eq
 8023e9c:	f001 010f 	andeq.w	r1, r1, #15
 8023ea0:	1109      	asrne	r1, r1, #4
 8023ea2:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ea6:	b2c9      	uxtb	r1, r1
 8023ea8:	910f      	str	r1, [sp, #60]	@ 0x3c
 8023eaa:	b1df      	cbz	r7, 8023ee4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023eac:	444b      	add	r3, r9
 8023eae:	0859      	lsrs	r1, r3, #1
 8023eb0:	f013 0f01 	tst.w	r3, #1
 8023eb4:	f103 0301 	add.w	r3, r3, #1
 8023eb8:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023ebc:	bf0c      	ite	eq
 8023ebe:	f001 010f 	andeq.w	r1, r1, #15
 8023ec2:	1109      	asrne	r1, r1, #4
 8023ec4:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ec8:	b2c9      	uxtb	r1, r1
 8023eca:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023ecc:	0859      	lsrs	r1, r3, #1
 8023ece:	07db      	lsls	r3, r3, #31
 8023ed0:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023ed4:	bf54      	ite	pl
 8023ed6:	f001 010f 	andpl.w	r1, r1, #15
 8023eda:	1109      	asrmi	r1, r1, #4
 8023edc:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023ee0:	b2c9      	uxtb	r1, r1
 8023ee2:	9110      	str	r1, [sp, #64]	@ 0x40
 8023ee4:	b280      	uxth	r0, r0
 8023ee6:	b2bf      	uxth	r7, r7
 8023ee8:	fb00 f307 	mul.w	r3, r0, r7
 8023eec:	0100      	lsls	r0, r0, #4
 8023eee:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 8023ef2:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 8023ef6:	1ac0      	subs	r0, r0, r3
 8023ef8:	b2bf      	uxth	r7, r7
 8023efa:	b280      	uxth	r0, r0
 8023efc:	1bc9      	subs	r1, r1, r7
 8023efe:	fa1f fa81 	uxth.w	sl, r1
 8023f02:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8023f04:	4348      	muls	r0, r1
 8023f06:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8023f08:	fb02 020a 	mla	r2, r2, sl, r0
 8023f0c:	fb07 2701 	mla	r7, r7, r1, r2
 8023f10:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8023f12:	fb03 7302 	mla	r3, r3, r2, r7
 8023f16:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8023f1a:	b393      	cbz	r3, 8023f82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023f1c:	4a2a      	ldr	r2, [pc, #168]	@ (8023fc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 8023f1e:	2bff      	cmp	r3, #255	@ 0xff
 8023f20:	6811      	ldr	r1, [r2, #0]
 8023f22:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 8023f26:	f3c1 2707 	ubfx	r7, r1, #8, #8
 8023f2a:	b2c9      	uxtb	r1, r1
 8023f2c:	d042      	beq.n	8023fb4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 8023f2e:	b298      	uxth	r0, r3
 8023f30:	43db      	mvns	r3, r3
 8023f32:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 8023f36:	fb11 f100 	smulbb	r1, r1, r0
 8023f3a:	b2db      	uxtb	r3, r3
 8023f3c:	fb17 f700 	smulbb	r7, r7, r0
 8023f40:	fb02 1103 	mla	r1, r2, r3, r1
 8023f44:	fb1a f000 	smulbb	r0, sl, r0
 8023f48:	b289      	uxth	r1, r1
 8023f4a:	1c4a      	adds	r2, r1, #1
 8023f4c:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 8023f50:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 8023f54:	fb02 7703 	mla	r7, r2, r3, r7
 8023f58:	1209      	asrs	r1, r1, #8
 8023f5a:	b2bf      	uxth	r7, r7
 8023f5c:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023f60:	1c7a      	adds	r2, r7, #1
 8023f62:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 8023f66:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 8023f6a:	fb02 0303 	mla	r3, r2, r3, r0
 8023f6e:	123f      	asrs	r7, r7, #8
 8023f70:	b29b      	uxth	r3, r3
 8023f72:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023f76:	1c5a      	adds	r2, r3, #1
 8023f78:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 8023f7c:	121b      	asrs	r3, r3, #8
 8023f7e:	f80c 3c01 	strb.w	r3, [ip, #-1]
 8023f82:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8023f84:	f10c 0c03 	add.w	ip, ip, #3
 8023f88:	f10e 3eff 	add.w	lr, lr, #4294967295
 8023f8c:	441d      	add	r5, r3
 8023f8e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8023f90:	441e      	add	r6, r3
 8023f92:	e6e7      	b.n	8023d64 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 8023f94:	2f00      	cmp	r7, #0
 8023f96:	d0a5      	beq.n	8023ee4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023f98:	444b      	add	r3, r9
 8023f9a:	0859      	lsrs	r1, r3, #1
 8023f9c:	07db      	lsls	r3, r3, #31
 8023f9e:	f818 1001 	ldrb.w	r1, [r8, r1]
 8023fa2:	bf54      	ite	pl
 8023fa4:	f001 010f 	andpl.w	r1, r1, #15
 8023fa8:	1109      	asrmi	r1, r1, #4
 8023faa:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 8023fae:	b2c9      	uxtb	r1, r1
 8023fb0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8023fb2:	e797      	b.n	8023ee4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 8023fb4:	f80c 1c03 	strb.w	r1, [ip, #-3]
 8023fb8:	f80c 7c02 	strb.w	r7, [ip, #-2]
 8023fbc:	f80c ac01 	strb.w	sl, [ip, #-1]
 8023fc0:	e7df      	b.n	8023f82 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 8023fc2:	b013      	add	sp, #76	@ 0x4c
 8023fc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023fc8:	24025e30 	.word	0x24025e30

08023fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 8023fcc:	b530      	push	{r4, r5, lr}
 8023fce:	b29d      	uxth	r5, r3
 8023fd0:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8023fd4:	780c      	ldrb	r4, [r1, #0]
 8023fd6:	b298      	uxth	r0, r3
 8023fd8:	7813      	ldrb	r3, [r2, #0]
 8023fda:	fb14 f405 	smulbb	r4, r4, r5
 8023fde:	fb13 f300 	smulbb	r3, r3, r0
 8023fe2:	441c      	add	r4, r3
 8023fe4:	b2a4      	uxth	r4, r4
 8023fe6:	1c63      	adds	r3, r4, #1
 8023fe8:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8023fec:	7853      	ldrb	r3, [r2, #1]
 8023fee:	fb13 f300 	smulbb	r3, r3, r0
 8023ff2:	1224      	asrs	r4, r4, #8
 8023ff4:	7014      	strb	r4, [r2, #0]
 8023ff6:	784c      	ldrb	r4, [r1, #1]
 8023ff8:	fb14 f405 	smulbb	r4, r4, r5
 8023ffc:	441c      	add	r4, r3
 8023ffe:	b2a4      	uxth	r4, r4
 8024000:	1c63      	adds	r3, r4, #1
 8024002:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 8024006:	1224      	asrs	r4, r4, #8
 8024008:	7054      	strb	r4, [r2, #1]
 802400a:	788b      	ldrb	r3, [r1, #2]
 802400c:	7891      	ldrb	r1, [r2, #2]
 802400e:	fb13 f305 	smulbb	r3, r3, r5
 8024012:	fb11 f000 	smulbb	r0, r1, r0
 8024016:	4403      	add	r3, r0
 8024018:	b29b      	uxth	r3, r3
 802401a:	1c59      	adds	r1, r3, #1
 802401c:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 8024020:	121b      	asrs	r3, r3, #8
 8024022:	7093      	strb	r3, [r2, #2]
 8024024:	bd30      	pop	{r4, r5, pc}
	...

08024028 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8024028:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802402c:	461c      	mov	r4, r3
 802402e:	b08b      	sub	sp, #44	@ 0x2c
 8024030:	460e      	mov	r6, r1
 8024032:	4615      	mov	r5, r2
 8024034:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8024036:	4682      	mov	sl, r0
 8024038:	6861      	ldr	r1, [r4, #4]
 802403a:	aa06      	add	r2, sp, #24
 802403c:	6820      	ldr	r0, [r4, #0]
 802403e:	2702      	movs	r7, #2
 8024040:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 8024044:	3504      	adds	r5, #4
 8024046:	c203      	stmia	r2!, {r0, r1}
 8024048:	6818      	ldr	r0, [r3, #0]
 802404a:	aa08      	add	r2, sp, #32
 802404c:	6859      	ldr	r1, [r3, #4]
 802404e:	c203      	stmia	r2!, {r0, r1}
 8024050:	a806      	add	r0, sp, #24
 8024052:	f7f2 fc49 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8024056:	4621      	mov	r1, r4
 8024058:	a808      	add	r0, sp, #32
 802405a:	f7f2 fc89 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802405e:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8024062:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 8024066:	f002 0301 	and.w	r3, r2, #1
 802406a:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 802406e:	9302      	str	r3, [sp, #8]
 8024070:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8024074:	f003 0101 	and.w	r1, r3, #1
 8024078:	9101      	str	r1, [sp, #4]
 802407a:	9801      	ldr	r0, [sp, #4]
 802407c:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8024080:	4403      	add	r3, r0
 8024082:	fb01 2303 	mla	r3, r1, r3, r2
 8024086:	fb93 f3f7 	sdiv	r3, r3, r7
 802408a:	441e      	add	r6, r3
 802408c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 8024090:	441a      	add	r2, r3
 8024092:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 8024096:	4419      	add	r1, r3
 8024098:	4b70      	ldr	r3, [pc, #448]	@ (802425c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802409a:	f8ad 2020 	strh.w	r2, [sp, #32]
 802409e:	6818      	ldr	r0, [r3, #0]
 80240a0:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 80240a4:	6803      	ldr	r3, [r0, #0]
 80240a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80240a8:	4798      	blx	r3
 80240aa:	4a6d      	ldr	r2, [pc, #436]	@ (8024260 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 80240ac:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 80240b0:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 80240b4:	8813      	ldrh	r3, [r2, #0]
 80240b6:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 80240ba:	fb03 1404 	mla	r4, r3, r4, r1
 80240be:	4611      	mov	r1, r2
 80240c0:	fb0b f303 	mul.w	r3, fp, r3
 80240c4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80240c8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80240cc:	4404      	add	r4, r0
 80240ce:	4423      	add	r3, r4
 80240d0:	d073      	beq.n	80241ba <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 80240d2:	9705      	str	r7, [sp, #20]
 80240d4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80240d8:	9b03      	ldr	r3, [sp, #12]
 80240da:	429c      	cmp	r4, r3
 80240dc:	f080 80b5 	bcs.w	802424a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80240e0:	9b02      	ldr	r3, [sp, #8]
 80240e2:	b35b      	cbz	r3, 802413c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 80240e4:	7831      	ldrb	r1, [r6, #0]
 80240e6:	4622      	mov	r2, r4
 80240e8:	1c77      	adds	r7, r6, #1
 80240ea:	3403      	adds	r4, #3
 80240ec:	f001 010f 	and.w	r1, r1, #15
 80240f0:	f108 3bff 	add.w	fp, r8, #4294967295
 80240f4:	464b      	mov	r3, r9
 80240f6:	4650      	mov	r0, sl
 80240f8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80240fc:	4429      	add	r1, r5
 80240fe:	f7ff ff65 	bl	8023fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024102:	f1bb 0f01 	cmp.w	fp, #1
 8024106:	dd1c      	ble.n	8024142 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 8024108:	7839      	ldrb	r1, [r7, #0]
 802410a:	4622      	mov	r2, r4
 802410c:	464b      	mov	r3, r9
 802410e:	4650      	mov	r0, sl
 8024110:	0909      	lsrs	r1, r1, #4
 8024112:	f1ab 0b02 	sub.w	fp, fp, #2
 8024116:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 802411a:	4429      	add	r1, r5
 802411c:	f7ff ff56 	bl	8023fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8024120:	f817 1b01 	ldrb.w	r1, [r7], #1
 8024124:	1ce2      	adds	r2, r4, #3
 8024126:	464b      	mov	r3, r9
 8024128:	f001 010f 	and.w	r1, r1, #15
 802412c:	4650      	mov	r0, sl
 802412e:	3406      	adds	r4, #6
 8024130:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024134:	4429      	add	r1, r5
 8024136:	f7ff ff49 	bl	8023fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802413a:	e7e2      	b.n	8024102 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 802413c:	4637      	mov	r7, r6
 802413e:	46c3      	mov	fp, r8
 8024140:	e7df      	b.n	8024102 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8024142:	d10a      	bne.n	802415a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8024144:	7839      	ldrb	r1, [r7, #0]
 8024146:	4622      	mov	r2, r4
 8024148:	3403      	adds	r4, #3
 802414a:	464b      	mov	r3, r9
 802414c:	0909      	lsrs	r1, r1, #4
 802414e:	4650      	mov	r0, sl
 8024150:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8024154:	4429      	add	r1, r5
 8024156:	f7ff ff39 	bl	8023fcc <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802415a:	9b04      	ldr	r3, [sp, #16]
 802415c:	9a01      	ldr	r2, [sp, #4]
 802415e:	881b      	ldrh	r3, [r3, #0]
 8024160:	eba3 0308 	sub.w	r3, r3, r8
 8024164:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024168:	441c      	add	r4, r3
 802416a:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 802416e:	4413      	add	r3, r2
 8024170:	9a05      	ldr	r2, [sp, #20]
 8024172:	fb93 f3f2 	sdiv	r3, r3, r2
 8024176:	441e      	add	r6, r3
 8024178:	e7ae      	b.n	80240d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802417a:	4632      	mov	r2, r6
 802417c:	46c4      	mov	ip, r8
 802417e:	e037      	b.n	80241f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8024180:	d10e      	bne.n	80241a0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8024182:	7812      	ldrb	r2, [r2, #0]
 8024184:	3003      	adds	r0, #3
 8024186:	0912      	lsrs	r2, r2, #4
 8024188:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 802418c:	18ac      	adds	r4, r5, r2
 802418e:	5caa      	ldrb	r2, [r5, r2]
 8024190:	f800 2c03 	strb.w	r2, [r0, #-3]
 8024194:	7862      	ldrb	r2, [r4, #1]
 8024196:	f800 2c02 	strb.w	r2, [r0, #-2]
 802419a:	78a2      	ldrb	r2, [r4, #2]
 802419c:	f800 2c01 	strb.w	r2, [r0, #-1]
 80241a0:	880c      	ldrh	r4, [r1, #0]
 80241a2:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80241a6:	eba4 0408 	sub.w	r4, r4, r8
 80241aa:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80241ae:	4404      	add	r4, r0
 80241b0:	9801      	ldr	r0, [sp, #4]
 80241b2:	4402      	add	r2, r0
 80241b4:	fb92 f2f7 	sdiv	r2, r2, r7
 80241b8:	4416      	add	r6, r2
 80241ba:	429c      	cmp	r4, r3
 80241bc:	d245      	bcs.n	802424a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80241be:	9a02      	ldr	r2, [sp, #8]
 80241c0:	2a00      	cmp	r2, #0
 80241c2:	d0da      	beq.n	802417a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80241c4:	7830      	ldrb	r0, [r6, #0]
 80241c6:	1c72      	adds	r2, r6, #1
 80241c8:	3403      	adds	r4, #3
 80241ca:	f000 000f 	and.w	r0, r0, #15
 80241ce:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80241d2:	eb05 0c00 	add.w	ip, r5, r0
 80241d6:	5c28      	ldrb	r0, [r5, r0]
 80241d8:	f804 0c03 	strb.w	r0, [r4, #-3]
 80241dc:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80241e0:	f804 0c02 	strb.w	r0, [r4, #-2]
 80241e4:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80241e8:	f108 3cff 	add.w	ip, r8, #4294967295
 80241ec:	f804 0c01 	strb.w	r0, [r4, #-1]
 80241f0:	f1bc 0f01 	cmp.w	ip, #1
 80241f4:	4620      	mov	r0, r4
 80241f6:	f104 0406 	add.w	r4, r4, #6
 80241fa:	ddc1      	ble.n	8024180 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80241fc:	7810      	ldrb	r0, [r2, #0]
 80241fe:	f1ac 0c02 	sub.w	ip, ip, #2
 8024202:	0900      	lsrs	r0, r0, #4
 8024204:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8024208:	eb05 0e00 	add.w	lr, r5, r0
 802420c:	5c28      	ldrb	r0, [r5, r0]
 802420e:	f804 0c06 	strb.w	r0, [r4, #-6]
 8024212:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8024216:	f804 0c05 	strb.w	r0, [r4, #-5]
 802421a:	f89e 0002 	ldrb.w	r0, [lr, #2]
 802421e:	f804 0c04 	strb.w	r0, [r4, #-4]
 8024222:	f812 0b01 	ldrb.w	r0, [r2], #1
 8024226:	f000 000f 	and.w	r0, r0, #15
 802422a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802422e:	eb05 0e00 	add.w	lr, r5, r0
 8024232:	5c28      	ldrb	r0, [r5, r0]
 8024234:	f804 0c03 	strb.w	r0, [r4, #-3]
 8024238:	f89e 0001 	ldrb.w	r0, [lr, #1]
 802423c:	f804 0c02 	strb.w	r0, [r4, #-2]
 8024240:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8024244:	f804 0c01 	strb.w	r0, [r4, #-1]
 8024248:	e7d2      	b.n	80241f0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802424a:	4b04      	ldr	r3, [pc, #16]	@ (802425c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 802424c:	6818      	ldr	r0, [r3, #0]
 802424e:	6803      	ldr	r3, [r0, #0]
 8024250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8024252:	4798      	blx	r3
 8024254:	b00b      	add	sp, #44	@ 0x2c
 8024256:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802425a:	bf00      	nop
 802425c:	24025e20 	.word	0x24025e20
 8024260:	24025e1a 	.word	0x24025e1a

08024264 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8024264:	b530      	push	{r4, r5, lr}
 8024266:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802426a:	780d      	ldrb	r5, [r1, #0]
 802426c:	28ff      	cmp	r0, #255	@ 0xff
 802426e:	d107      	bne.n	8024280 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024270:	2bff      	cmp	r3, #255	@ 0xff
 8024272:	d105      	bne.n	8024280 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8024274:	7015      	strb	r5, [r2, #0]
 8024276:	784b      	ldrb	r3, [r1, #1]
 8024278:	7053      	strb	r3, [r2, #1]
 802427a:	788b      	ldrb	r3, [r1, #2]
 802427c:	7093      	strb	r3, [r2, #2]
 802427e:	bd30      	pop	{r4, r5, pc}
 8024280:	fb10 f003 	smulbb	r0, r0, r3
 8024284:	b283      	uxth	r3, r0
 8024286:	1c58      	adds	r0, r3, #1
 8024288:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 802428c:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8024290:	b284      	uxth	r4, r0
 8024292:	43c0      	mvns	r0, r0
 8024294:	fb15 f504 	smulbb	r5, r5, r4
 8024298:	b2c3      	uxtb	r3, r0
 802429a:	7810      	ldrb	r0, [r2, #0]
 802429c:	fb00 5003 	mla	r0, r0, r3, r5
 80242a0:	b280      	uxth	r0, r0
 80242a2:	1c45      	adds	r5, r0, #1
 80242a4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80242a8:	7855      	ldrb	r5, [r2, #1]
 80242aa:	fb15 f503 	smulbb	r5, r5, r3
 80242ae:	1200      	asrs	r0, r0, #8
 80242b0:	7010      	strb	r0, [r2, #0]
 80242b2:	7848      	ldrb	r0, [r1, #1]
 80242b4:	fb00 5004 	mla	r0, r0, r4, r5
 80242b8:	b280      	uxth	r0, r0
 80242ba:	1c45      	adds	r5, r0, #1
 80242bc:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80242c0:	1200      	asrs	r0, r0, #8
 80242c2:	7050      	strb	r0, [r2, #1]
 80242c4:	7888      	ldrb	r0, [r1, #2]
 80242c6:	7891      	ldrb	r1, [r2, #2]
 80242c8:	fb11 f303 	smulbb	r3, r1, r3
 80242cc:	fb00 3304 	mla	r3, r0, r4, r3
 80242d0:	b29b      	uxth	r3, r3
 80242d2:	1c59      	adds	r1, r3, #1
 80242d4:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80242d8:	121b      	asrs	r3, r3, #8
 80242da:	e7cf      	b.n	802427c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080242dc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80242dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242e0:	461d      	mov	r5, r3
 80242e2:	b08f      	sub	sp, #60	@ 0x3c
 80242e4:	460c      	mov	r4, r1
 80242e6:	4616      	mov	r6, r2
 80242e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80242ea:	4680      	mov	r8, r0
 80242ec:	6869      	ldr	r1, [r5, #4]
 80242ee:	aa0a      	add	r2, sp, #40	@ 0x28
 80242f0:	6828      	ldr	r0, [r5, #0]
 80242f2:	3604      	adds	r6, #4
 80242f4:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80242f8:	4f57      	ldr	r7, [pc, #348]	@ (8024458 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80242fa:	c203      	stmia	r2!, {r0, r1}
 80242fc:	6818      	ldr	r0, [r3, #0]
 80242fe:	aa0c      	add	r2, sp, #48	@ 0x30
 8024300:	6859      	ldr	r1, [r3, #4]
 8024302:	c203      	stmia	r2!, {r0, r1}
 8024304:	a80a      	add	r0, sp, #40	@ 0x28
 8024306:	f7f2 faef 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 802430a:	4629      	mov	r1, r5
 802430c:	a80c      	add	r0, sp, #48	@ 0x30
 802430e:	2502      	movs	r5, #2
 8024310:	f7f2 fb2e 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8024314:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8024318:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 802431c:	f002 0301 	and.w	r3, r2, #1
 8024320:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8024324:	9304      	str	r3, [sp, #16]
 8024326:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802432a:	f003 0101 	and.w	r1, r3, #1
 802432e:	9103      	str	r1, [sp, #12]
 8024330:	9803      	ldr	r0, [sp, #12]
 8024332:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8024336:	4403      	add	r3, r0
 8024338:	6838      	ldr	r0, [r7, #0]
 802433a:	fb01 2303 	mla	r3, r1, r3, r2
 802433e:	fb93 f3f5 	sdiv	r3, r3, r5
 8024342:	18e5      	adds	r5, r4, r3
 8024344:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8024348:	441a      	add	r2, r3
 802434a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 802434e:	4419      	add	r1, r3
 8024350:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8024354:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 8024358:	6803      	ldr	r3, [r0, #0]
 802435a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 802435c:	4798      	blx	r3
 802435e:	4a3f      	ldr	r2, [pc, #252]	@ (802445c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8024360:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8024364:	8813      	ldrh	r3, [r2, #0]
 8024366:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802436a:	9207      	str	r2, [sp, #28]
 802436c:	fb03 1404 	mla	r4, r3, r4, r1
 8024370:	fb0a f303 	mul.w	r3, sl, r3
 8024374:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8024378:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802437c:	4404      	add	r4, r0
 802437e:	18e3      	adds	r3, r4, r3
 8024380:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8024384:	9b05      	ldr	r3, [sp, #20]
 8024386:	429c      	cmp	r4, r3
 8024388:	d25d      	bcs.n	8024446 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 802438a:	9b04      	ldr	r3, [sp, #16]
 802438c:	2b00      	cmp	r3, #0
 802438e:	d037      	beq.n	8024400 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8024390:	782b      	ldrb	r3, [r5, #0]
 8024392:	1c6f      	adds	r7, r5, #1
 8024394:	f003 030f 	and.w	r3, r3, #15
 8024398:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802439c:	9309      	str	r3, [sp, #36]	@ 0x24
 802439e:	0e1b      	lsrs	r3, r3, #24
 80243a0:	d006      	beq.n	80243b0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 80243a2:	9300      	str	r3, [sp, #0]
 80243a4:	4622      	mov	r2, r4
 80243a6:	464b      	mov	r3, r9
 80243a8:	a909      	add	r1, sp, #36	@ 0x24
 80243aa:	4640      	mov	r0, r8
 80243ac:	f7ff ff5a 	bl	8024264 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80243b0:	3403      	adds	r4, #3
 80243b2:	f10b 3aff 	add.w	sl, fp, #4294967295
 80243b6:	f1ba 0f01 	cmp.w	sl, #1
 80243ba:	dd24      	ble.n	8024406 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80243bc:	783b      	ldrb	r3, [r7, #0]
 80243be:	091b      	lsrs	r3, r3, #4
 80243c0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80243c4:	9308      	str	r3, [sp, #32]
 80243c6:	0e1b      	lsrs	r3, r3, #24
 80243c8:	d006      	beq.n	80243d8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80243ca:	9300      	str	r3, [sp, #0]
 80243cc:	4622      	mov	r2, r4
 80243ce:	464b      	mov	r3, r9
 80243d0:	a908      	add	r1, sp, #32
 80243d2:	4640      	mov	r0, r8
 80243d4:	f7ff ff46 	bl	8024264 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80243d8:	f817 3b01 	ldrb.w	r3, [r7], #1
 80243dc:	f003 030f 	and.w	r3, r3, #15
 80243e0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80243e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80243e6:	0e1b      	lsrs	r3, r3, #24
 80243e8:	d006      	beq.n	80243f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80243ea:	9300      	str	r3, [sp, #0]
 80243ec:	1ce2      	adds	r2, r4, #3
 80243ee:	464b      	mov	r3, r9
 80243f0:	a909      	add	r1, sp, #36	@ 0x24
 80243f2:	4640      	mov	r0, r8
 80243f4:	f7ff ff36 	bl	8024264 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80243f8:	3406      	adds	r4, #6
 80243fa:	f1aa 0a02 	sub.w	sl, sl, #2
 80243fe:	e7da      	b.n	80243b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024400:	462f      	mov	r7, r5
 8024402:	46da      	mov	sl, fp
 8024404:	e7d7      	b.n	80243b6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 8024406:	d10e      	bne.n	8024426 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 8024408:	783b      	ldrb	r3, [r7, #0]
 802440a:	091b      	lsrs	r3, r3, #4
 802440c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024410:	9309      	str	r3, [sp, #36]	@ 0x24
 8024412:	0e1b      	lsrs	r3, r3, #24
 8024414:	d006      	beq.n	8024424 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 8024416:	9300      	str	r3, [sp, #0]
 8024418:	4622      	mov	r2, r4
 802441a:	464b      	mov	r3, r9
 802441c:	a909      	add	r1, sp, #36	@ 0x24
 802441e:	4640      	mov	r0, r8
 8024420:	f7ff ff20 	bl	8024264 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8024424:	3403      	adds	r4, #3
 8024426:	9b07      	ldr	r3, [sp, #28]
 8024428:	9a03      	ldr	r2, [sp, #12]
 802442a:	881b      	ldrh	r3, [r3, #0]
 802442c:	eba3 030b 	sub.w	r3, r3, fp
 8024430:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024434:	441c      	add	r4, r3
 8024436:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802443a:	4413      	add	r3, r2
 802443c:	2202      	movs	r2, #2
 802443e:	fb93 f3f2 	sdiv	r3, r3, r2
 8024442:	441d      	add	r5, r3
 8024444:	e79e      	b.n	8024384 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 8024446:	9b06      	ldr	r3, [sp, #24]
 8024448:	6818      	ldr	r0, [r3, #0]
 802444a:	6803      	ldr	r3, [r0, #0]
 802444c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 802444e:	4798      	blx	r3
 8024450:	b00f      	add	sp, #60	@ 0x3c
 8024452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024456:	bf00      	nop
 8024458:	24025e20 	.word	0x24025e20
 802445c:	24025e1a 	.word	0x24025e1a

08024460 <CRC_Lock>:
 8024460:	4a2d      	ldr	r2, [pc, #180]	@ (8024518 <CRC_Lock+0xb8>)
 8024462:	b530      	push	{r4, r5, lr}
 8024464:	6813      	ldr	r3, [r2, #0]
 8024466:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802446a:	f023 0301 	bic.w	r3, r3, #1
 802446e:	6013      	str	r3, [r2, #0]
 8024470:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8024474:	4b29      	ldr	r3, [pc, #164]	@ (802451c <CRC_Lock+0xbc>)
 8024476:	681c      	ldr	r4, [r3, #0]
 8024478:	4014      	ands	r4, r2
 802447a:	42ac      	cmp	r4, r5
 802447c:	d005      	beq.n	802448a <CRC_Lock+0x2a>
 802447e:	681c      	ldr	r4, [r3, #0]
 8024480:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8024484:	4014      	ands	r4, r2
 8024486:	42ac      	cmp	r4, r5
 8024488:	d125      	bne.n	80244d6 <CRC_Lock+0x76>
 802448a:	4b25      	ldr	r3, [pc, #148]	@ (8024520 <CRC_Lock+0xc0>)
 802448c:	681b      	ldr	r3, [r3, #0]
 802448e:	2b00      	cmp	r3, #0
 8024490:	d139      	bne.n	8024506 <CRC_Lock+0xa6>
 8024492:	4b24      	ldr	r3, [pc, #144]	@ (8024524 <CRC_Lock+0xc4>)
 8024494:	681a      	ldr	r2, [r3, #0]
 8024496:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802449a:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 802449e:	d00d      	beq.n	80244bc <CRC_Lock+0x5c>
 80244a0:	681a      	ldr	r2, [r3, #0]
 80244a2:	f240 4483 	movw	r4, #1155	@ 0x483
 80244a6:	f3c2 020b 	ubfx	r2, r2, #0, #12
 80244aa:	42a2      	cmp	r2, r4
 80244ac:	d006      	beq.n	80244bc <CRC_Lock+0x5c>
 80244ae:	681b      	ldr	r3, [r3, #0]
 80244b0:	f240 4285 	movw	r2, #1157	@ 0x485
 80244b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80244b8:	4293      	cmp	r3, r2
 80244ba:	d124      	bne.n	8024506 <CRC_Lock+0xa6>
 80244bc:	4b1a      	ldr	r3, [pc, #104]	@ (8024528 <CRC_Lock+0xc8>)
 80244be:	2201      	movs	r2, #1
 80244c0:	601a      	str	r2, [r3, #0]
 80244c2:	681a      	ldr	r2, [r3, #0]
 80244c4:	2a00      	cmp	r2, #0
 80244c6:	d1fc      	bne.n	80244c2 <CRC_Lock+0x62>
 80244c8:	4b18      	ldr	r3, [pc, #96]	@ (802452c <CRC_Lock+0xcc>)
 80244ca:	6018      	str	r0, [r3, #0]
 80244cc:	6818      	ldr	r0, [r3, #0]
 80244ce:	1a43      	subs	r3, r0, r1
 80244d0:	4258      	negs	r0, r3
 80244d2:	4158      	adcs	r0, r3
 80244d4:	e00e      	b.n	80244f4 <CRC_Lock+0x94>
 80244d6:	681b      	ldr	r3, [r3, #0]
 80244d8:	4013      	ands	r3, r2
 80244da:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80244de:	4293      	cmp	r3, r2
 80244e0:	d111      	bne.n	8024506 <CRC_Lock+0xa6>
 80244e2:	4b13      	ldr	r3, [pc, #76]	@ (8024530 <CRC_Lock+0xd0>)
 80244e4:	f240 4286 	movw	r2, #1158	@ 0x486
 80244e8:	681b      	ldr	r3, [r3, #0]
 80244ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80244ee:	4293      	cmp	r3, r2
 80244f0:	d001      	beq.n	80244f6 <CRC_Lock+0x96>
 80244f2:	2000      	movs	r0, #0
 80244f4:	bd30      	pop	{r4, r5, pc}
 80244f6:	4b0f      	ldr	r3, [pc, #60]	@ (8024534 <CRC_Lock+0xd4>)
 80244f8:	2201      	movs	r2, #1
 80244fa:	601a      	str	r2, [r3, #0]
 80244fc:	681a      	ldr	r2, [r3, #0]
 80244fe:	2a00      	cmp	r2, #0
 8024500:	d1fc      	bne.n	80244fc <CRC_Lock+0x9c>
 8024502:	4b0d      	ldr	r3, [pc, #52]	@ (8024538 <CRC_Lock+0xd8>)
 8024504:	e7e1      	b.n	80244ca <CRC_Lock+0x6a>
 8024506:	4b0d      	ldr	r3, [pc, #52]	@ (802453c <CRC_Lock+0xdc>)
 8024508:	2201      	movs	r2, #1
 802450a:	601a      	str	r2, [r3, #0]
 802450c:	681a      	ldr	r2, [r3, #0]
 802450e:	2a00      	cmp	r2, #0
 8024510:	d1fc      	bne.n	802450c <CRC_Lock+0xac>
 8024512:	4b0b      	ldr	r3, [pc, #44]	@ (8024540 <CRC_Lock+0xe0>)
 8024514:	e7d9      	b.n	80244ca <CRC_Lock+0x6a>
 8024516:	bf00      	nop
 8024518:	e0002000 	.word	0xe0002000
 802451c:	e000ed00 	.word	0xe000ed00
 8024520:	e0042000 	.word	0xe0042000
 8024524:	5c001000 	.word	0x5c001000
 8024528:	58024c08 	.word	0x58024c08
 802452c:	58024c00 	.word	0x58024c00
 8024530:	46008ff0 	.word	0x46008ff0
 8024534:	46024c08 	.word	0x46024c08
 8024538:	46024c00 	.word	0x46024c00
 802453c:	40023008 	.word	0x40023008
 8024540:	40023000 	.word	0x40023000

08024544 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8024544:	6101      	str	r1, [r0, #16]
 8024546:	4770      	bx	lr

08024548 <_ZN8touchgfx8Gestures4tickEv>:
 8024548:	7b83      	ldrb	r3, [r0, #14]
 802454a:	b14b      	cbz	r3, 8024560 <_ZN8touchgfx8Gestures4tickEv+0x18>
 802454c:	8903      	ldrh	r3, [r0, #8]
 802454e:	3301      	adds	r3, #1
 8024550:	b29b      	uxth	r3, r3
 8024552:	2b07      	cmp	r3, #7
 8024554:	8103      	strh	r3, [r0, #8]
 8024556:	bf81      	itttt	hi
 8024558:	2300      	movhi	r3, #0
 802455a:	8143      	strhhi	r3, [r0, #10]
 802455c:	8183      	strhhi	r3, [r0, #12]
 802455e:	7383      	strbhi	r3, [r0, #14]
 8024560:	4770      	bx	lr
	...

08024564 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8024564:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8024568:	4698      	mov	r8, r3
 802456a:	8883      	ldrh	r3, [r0, #4]
 802456c:	4604      	mov	r4, r0
 802456e:	4617      	mov	r7, r2
 8024570:	f8ad 3006 	strh.w	r3, [sp, #6]
 8024574:	eba8 0303 	sub.w	r3, r8, r3
 8024578:	4a19      	ldr	r2, [pc, #100]	@ (80245e0 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802457a:	460e      	mov	r6, r1
 802457c:	b21b      	sxth	r3, r3
 802457e:	88c1      	ldrh	r1, [r0, #6]
 8024580:	9200      	str	r2, [sp, #0]
 8024582:	2000      	movs	r0, #0
 8024584:	2b00      	cmp	r3, #0
 8024586:	8aa2      	ldrh	r2, [r4, #20]
 8024588:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 802458c:	bfb8      	it	lt
 802458e:	425b      	neglt	r3, r3
 8024590:	f88d 0004 	strb.w	r0, [sp, #4]
 8024594:	f8ad 1008 	strh.w	r1, [sp, #8]
 8024598:	b21b      	sxth	r3, r3
 802459a:	f8ad 800a 	strh.w	r8, [sp, #10]
 802459e:	f8ad 500c 	strh.w	r5, [sp, #12]
 80245a2:	4293      	cmp	r3, r2
 80245a4:	dc07      	bgt.n	80245b6 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 80245a6:	1a69      	subs	r1, r5, r1
 80245a8:	b209      	sxth	r1, r1
 80245aa:	2900      	cmp	r1, #0
 80245ac:	bfb8      	it	lt
 80245ae:	4249      	neglt	r1, r1
 80245b0:	b209      	sxth	r1, r1
 80245b2:	428a      	cmp	r2, r1
 80245b4:	da10      	bge.n	80245d8 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 80245b6:	6920      	ldr	r0, [r4, #16]
 80245b8:	4669      	mov	r1, sp
 80245ba:	eba8 0606 	sub.w	r6, r8, r6
 80245be:	1bef      	subs	r7, r5, r7
 80245c0:	6803      	ldr	r3, [r0, #0]
 80245c2:	685b      	ldr	r3, [r3, #4]
 80245c4:	4798      	blx	r3
 80245c6:	2300      	movs	r3, #0
 80245c8:	2001      	movs	r0, #1
 80245ca:	8166      	strh	r6, [r4, #10]
 80245cc:	8123      	strh	r3, [r4, #8]
 80245ce:	81a7      	strh	r7, [r4, #12]
 80245d0:	f8a4 8004 	strh.w	r8, [r4, #4]
 80245d4:	80e5      	strh	r5, [r4, #6]
 80245d6:	73a0      	strb	r0, [r4, #14]
 80245d8:	b004      	add	sp, #16
 80245da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80245de:	bf00      	nop
 80245e0:	0802b2a4 	.word	0x0802b2a4

080245e4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80245e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80245e6:	461e      	mov	r6, r3
 80245e8:	1e4b      	subs	r3, r1, #1
 80245ea:	b085      	sub	sp, #20
 80245ec:	4604      	mov	r4, r0
 80245ee:	2b01      	cmp	r3, #1
 80245f0:	460d      	mov	r5, r1
 80245f2:	4617      	mov	r7, r2
 80245f4:	d84b      	bhi.n	802468e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80245f6:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80245fa:	1cd3      	adds	r3, r2, #3
 80245fc:	b29b      	uxth	r3, r3
 80245fe:	2b06      	cmp	r3, #6
 8024600:	d916      	bls.n	8024630 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 8024602:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 80246a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024606:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 802460a:	f8cd c004 	str.w	ip, [sp, #4]
 802460e:	f04f 0c00 	mov.w	ip, #0
 8024612:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024616:	6900      	ldr	r0, [r0, #16]
 8024618:	f8ad 100c 	strh.w	r1, [sp, #12]
 802461c:	a901      	add	r1, sp, #4
 802461e:	f88d c008 	strb.w	ip, [sp, #8]
 8024622:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024626:	f8ad 300e 	strh.w	r3, [sp, #14]
 802462a:	6803      	ldr	r3, [r0, #0]
 802462c:	689b      	ldr	r3, [r3, #8]
 802462e:	4798      	blx	r3
 8024630:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8024634:	1cd3      	adds	r3, r2, #3
 8024636:	b29b      	uxth	r3, r3
 8024638:	2b06      	cmp	r3, #6
 802463a:	d916      	bls.n	802466a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802463c:	f8df c064 	ldr.w	ip, [pc, #100]	@ 80246a4 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8024640:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8024644:	f8cd c004 	str.w	ip, [sp, #4]
 8024648:	f04f 0c01 	mov.w	ip, #1
 802464c:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8024650:	6920      	ldr	r0, [r4, #16]
 8024652:	f8ad 100c 	strh.w	r1, [sp, #12]
 8024656:	a901      	add	r1, sp, #4
 8024658:	f88d c008 	strb.w	ip, [sp, #8]
 802465c:	f8ad 200a 	strh.w	r2, [sp, #10]
 8024660:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024664:	6803      	ldr	r3, [r0, #0]
 8024666:	689b      	ldr	r3, [r3, #8]
 8024668:	4798      	blx	r3
 802466a:	4b0d      	ldr	r3, [pc, #52]	@ (80246a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 802466c:	a901      	add	r1, sp, #4
 802466e:	6920      	ldr	r0, [r4, #16]
 8024670:	9301      	str	r3, [sp, #4]
 8024672:	2300      	movs	r3, #0
 8024674:	f88d 5008 	strb.w	r5, [sp, #8]
 8024678:	f8ad 700a 	strh.w	r7, [sp, #10]
 802467c:	f8ad 600c 	strh.w	r6, [sp, #12]
 8024680:	f8ad 300e 	strh.w	r3, [sp, #14]
 8024684:	6803      	ldr	r3, [r0, #0]
 8024686:	681b      	ldr	r3, [r3, #0]
 8024688:	4798      	blx	r3
 802468a:	b005      	add	sp, #20
 802468c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 802468e:	2900      	cmp	r1, #0
 8024690:	d1eb      	bne.n	802466a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8024692:	80a2      	strh	r2, [r4, #4]
 8024694:	80c6      	strh	r6, [r0, #6]
 8024696:	60a1      	str	r1, [r4, #8]
 8024698:	81a1      	strh	r1, [r4, #12]
 802469a:	73a1      	strb	r1, [r4, #14]
 802469c:	e7e5      	b.n	802466a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 802469e:	bf00      	nop
 80246a0:	0802b0b8 	.word	0x0802b0b8
 80246a4:	0802b2b8 	.word	0x0802b2b8

080246a8 <appendBitsToBuffer>:
 80246a8:	3901      	subs	r1, #1
 80246aa:	b570      	push	{r4, r5, r6, lr}
 80246ac:	2900      	cmp	r1, #0
 80246ae:	db11      	blt.n	80246d4 <appendBitsToBuffer+0x2c>
 80246b0:	681d      	ldr	r5, [r3, #0]
 80246b2:	fa20 f401 	lsr.w	r4, r0, r1
 80246b6:	3901      	subs	r1, #1
 80246b8:	10ee      	asrs	r6, r5, #3
 80246ba:	43ed      	mvns	r5, r5
 80246bc:	f004 0401 	and.w	r4, r4, #1
 80246c0:	f005 0507 	and.w	r5, r5, #7
 80246c4:	40ac      	lsls	r4, r5
 80246c6:	5d95      	ldrb	r5, [r2, r6]
 80246c8:	432c      	orrs	r4, r5
 80246ca:	5594      	strb	r4, [r2, r6]
 80246cc:	681c      	ldr	r4, [r3, #0]
 80246ce:	3401      	adds	r4, #1
 80246d0:	601c      	str	r4, [r3, #0]
 80246d2:	e7eb      	b.n	80246ac <appendBitsToBuffer+0x4>
 80246d4:	bd70      	pop	{r4, r5, r6, pc}

080246d6 <getNumRawDataModules>:
 80246d6:	f100 0308 	add.w	r3, r0, #8
 80246da:	2801      	cmp	r0, #1
 80246dc:	ea4f 1303 	mov.w	r3, r3, lsl #4
 80246e0:	fb00 f303 	mul.w	r3, r0, r3
 80246e4:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 80246e8:	dd12      	ble.n	8024710 <getNumRawDataModules+0x3a>
 80246ea:	2207      	movs	r2, #7
 80246ec:	2119      	movs	r1, #25
 80246ee:	2806      	cmp	r0, #6
 80246f0:	fb90 f2f2 	sdiv	r2, r0, r2
 80246f4:	f102 0202 	add.w	r2, r2, #2
 80246f8:	fb01 f102 	mul.w	r1, r1, r2
 80246fc:	f1a1 010a 	sub.w	r1, r1, #10
 8024700:	fb02 f201 	mul.w	r2, r2, r1
 8024704:	f1a2 0237 	sub.w	r2, r2, #55	@ 0x37
 8024708:	eba3 0302 	sub.w	r3, r3, r2
 802470c:	bfc8      	it	gt
 802470e:	3b24      	subgt	r3, #36	@ 0x24
 8024710:	4618      	mov	r0, r3
 8024712:	4770      	bx	lr

08024714 <getNumDataCodewords>:
 8024714:	b538      	push	{r3, r4, r5, lr}
 8024716:	4604      	mov	r4, r0
 8024718:	460d      	mov	r5, r1
 802471a:	f7ff ffdc 	bl	80246d6 <getNumRawDataModules>
 802471e:	2308      	movs	r3, #8
 8024720:	fb90 f0f3 	sdiv	r0, r0, r3
 8024724:	2329      	movs	r3, #41	@ 0x29
 8024726:	fb03 f105 	mul.w	r1, r3, r5
 802472a:	4b04      	ldr	r3, [pc, #16]	@ (802473c <getNumDataCodewords+0x28>)
 802472c:	440b      	add	r3, r1
 802472e:	571a      	ldrsb	r2, [r3, r4]
 8024730:	4b03      	ldr	r3, [pc, #12]	@ (8024740 <getNumDataCodewords+0x2c>)
 8024732:	4419      	add	r1, r3
 8024734:	570b      	ldrsb	r3, [r1, r4]
 8024736:	fb02 0013 	mls	r0, r2, r3, r0
 802473a:	bd38      	pop	{r3, r4, r5, pc}
 802473c:	0802b540 	.word	0x0802b540
 8024740:	0802b5e4 	.word	0x0802b5e4

08024744 <reedSolomonMultiply>:
 8024744:	b530      	push	{r4, r5, lr}
 8024746:	4605      	mov	r5, r0
 8024748:	2407      	movs	r4, #7
 802474a:	2000      	movs	r0, #0
 802474c:	11c3      	asrs	r3, r0, #7
 802474e:	00da      	lsls	r2, r3, #3
 8024750:	1ad2      	subs	r2, r2, r3
 8024752:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8024756:	fa41 f204 	asr.w	r2, r1, r4
 802475a:	f114 34ff 	adds.w	r4, r4, #4294967295
 802475e:	f002 0201 	and.w	r2, r2, #1
 8024762:	ea83 0340 	eor.w	r3, r3, r0, lsl #1
 8024766:	fb12 f205 	smulbb	r2, r2, r5
 802476a:	ea83 0302 	eor.w	r3, r3, r2
 802476e:	b2d8      	uxtb	r0, r3
 8024770:	d2ec      	bcs.n	802474c <reedSolomonMultiply+0x8>
 8024772:	bd30      	pop	{r4, r5, pc}

08024774 <getModuleBounded>:
 8024774:	7803      	ldrb	r3, [r0, #0]
 8024776:	fb02 1203 	mla	r2, r2, r3, r1
 802477a:	eb00 00e2 	add.w	r0, r0, r2, asr #3
 802477e:	f002 0207 	and.w	r2, r2, #7
 8024782:	7840      	ldrb	r0, [r0, #1]
 8024784:	4110      	asrs	r0, r2
 8024786:	f000 0001 	and.w	r0, r0, #1
 802478a:	4770      	bx	lr

0802478c <setModuleBounded>:
 802478c:	b530      	push	{r4, r5, lr}
 802478e:	7804      	ldrb	r4, [r0, #0]
 8024790:	fb02 1204 	mla	r2, r2, r4, r1
 8024794:	2101      	movs	r1, #1
 8024796:	10d5      	asrs	r5, r2, #3
 8024798:	f002 0207 	and.w	r2, r2, #7
 802479c:	3501      	adds	r5, #1
 802479e:	4091      	lsls	r1, r2
 80247a0:	5744      	ldrsb	r4, [r0, r5]
 80247a2:	b249      	sxtb	r1, r1
 80247a4:	b113      	cbz	r3, 80247ac <setModuleBounded+0x20>
 80247a6:	430c      	orrs	r4, r1
 80247a8:	5544      	strb	r4, [r0, r5]
 80247aa:	bd30      	pop	{r4, r5, pc}
 80247ac:	ea24 0401 	bic.w	r4, r4, r1
 80247b0:	e7fa      	b.n	80247a8 <setModuleBounded+0x1c>

080247b2 <fillRectangle>:
 80247b2:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80247b6:	4607      	mov	r7, r0
 80247b8:	460e      	mov	r6, r1
 80247ba:	4690      	mov	r8, r2
 80247bc:	4699      	mov	r9, r3
 80247be:	460c      	mov	r4, r1
 80247c0:	1ba3      	subs	r3, r4, r6
 80247c2:	4599      	cmp	r9, r3
 80247c4:	dd0c      	ble.n	80247e0 <fillRectangle+0x2e>
 80247c6:	2500      	movs	r5, #0
 80247c8:	4545      	cmp	r5, r8
 80247ca:	da07      	bge.n	80247dc <fillRectangle+0x2a>
 80247cc:	1979      	adds	r1, r7, r5
 80247ce:	2301      	movs	r3, #1
 80247d0:	4622      	mov	r2, r4
 80247d2:	9808      	ldr	r0, [sp, #32]
 80247d4:	f7ff ffda 	bl	802478c <setModuleBounded>
 80247d8:	3501      	adds	r5, #1
 80247da:	e7f5      	b.n	80247c8 <fillRectangle+0x16>
 80247dc:	3401      	adds	r4, #1
 80247de:	e7ef      	b.n	80247c0 <fillRectangle+0xe>
 80247e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

080247e4 <applyMask>:
 80247e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80247e8:	4683      	mov	fp, r0
 80247ea:	b085      	sub	sp, #20
 80247ec:	4689      	mov	r9, r1
 80247ee:	f891 a000 	ldrb.w	sl, [r1]
 80247f2:	2500      	movs	r5, #0
 80247f4:	2703      	movs	r7, #3
 80247f6:	9201      	str	r2, [sp, #4]
 80247f8:	4555      	cmp	r5, sl
 80247fa:	da60      	bge.n	80248be <applyMask+0xda>
 80247fc:	f005 0801 	and.w	r8, r5, #1
 8024800:	106b      	asrs	r3, r5, #1
 8024802:	2600      	movs	r6, #0
 8024804:	f088 0801 	eor.w	r8, r8, #1
 8024808:	9300      	str	r3, [sp, #0]
 802480a:	4634      	mov	r4, r6
 802480c:	fa5f f388 	uxtb.w	r3, r8
 8024810:	9302      	str	r3, [sp, #8]
 8024812:	462a      	mov	r2, r5
 8024814:	4621      	mov	r1, r4
 8024816:	4658      	mov	r0, fp
 8024818:	f7ff ffac 	bl	8024774 <getModuleBounded>
 802481c:	b9d8      	cbnz	r0, 8024856 <applyMask+0x72>
 802481e:	9b01      	ldr	r3, [sp, #4]
 8024820:	2b07      	cmp	r3, #7
 8024822:	d84c      	bhi.n	80248be <applyMask+0xda>
 8024824:	e8df f003 	tbb	[pc, r3]
 8024828:	261d0904 	.word	0x261d0904
 802482c:	473f332d 	.word	0x473f332d
 8024830:	eba8 0304 	sub.w	r3, r8, r4
 8024834:	f003 0301 	and.w	r3, r3, #1
 8024838:	e000      	b.n	802483c <applyMask+0x58>
 802483a:	9b02      	ldr	r3, [sp, #8]
 802483c:	462a      	mov	r2, r5
 802483e:	4621      	mov	r1, r4
 8024840:	4648      	mov	r0, r9
 8024842:	9303      	str	r3, [sp, #12]
 8024844:	f7ff ff96 	bl	8024774 <getModuleBounded>
 8024848:	9b03      	ldr	r3, [sp, #12]
 802484a:	462a      	mov	r2, r5
 802484c:	4043      	eors	r3, r0
 802484e:	4648      	mov	r0, r9
 8024850:	b2db      	uxtb	r3, r3
 8024852:	f7ff ff9b 	bl	802478c <setModuleBounded>
 8024856:	3401      	adds	r4, #1
 8024858:	442e      	add	r6, r5
 802485a:	45a2      	cmp	sl, r4
 802485c:	dcd9      	bgt.n	8024812 <applyMask+0x2e>
 802485e:	3501      	adds	r5, #1
 8024860:	e7ca      	b.n	80247f8 <applyMask+0x14>
 8024862:	fb94 f3f7 	sdiv	r3, r4, r7
 8024866:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802486a:	429c      	cmp	r4, r3
 802486c:	bf14      	ite	ne
 802486e:	2300      	movne	r3, #0
 8024870:	2301      	moveq	r3, #1
 8024872:	e7e3      	b.n	802483c <applyMask+0x58>
 8024874:	1963      	adds	r3, r4, r5
 8024876:	fb93 f0f7 	sdiv	r0, r3, r7
 802487a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 802487e:	4283      	cmp	r3, r0
 8024880:	e7f4      	b.n	802486c <applyMask+0x88>
 8024882:	fb94 f3f7 	sdiv	r3, r4, r7
 8024886:	9a00      	ldr	r2, [sp, #0]
 8024888:	4413      	add	r3, r2
 802488a:	43db      	mvns	r3, r3
 802488c:	e7d2      	b.n	8024834 <applyMask+0x50>
 802488e:	fb96 f3f7 	sdiv	r3, r6, r7
 8024892:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8024896:	f006 0201 	and.w	r2, r6, #1
 802489a:	1af3      	subs	r3, r6, r3
 802489c:	42da      	cmn	r2, r3
 802489e:	bf0c      	ite	eq
 80248a0:	2301      	moveq	r3, #1
 80248a2:	2300      	movne	r3, #0
 80248a4:	e7ca      	b.n	802483c <applyMask+0x58>
 80248a6:	f006 0301 	and.w	r3, r6, #1
 80248aa:	fb96 f2f7 	sdiv	r2, r6, r7
 80248ae:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80248b2:	1ab2      	subs	r2, r6, r2
 80248b4:	e7e8      	b.n	8024888 <applyMask+0xa4>
 80248b6:	1963      	adds	r3, r4, r5
 80248b8:	f003 0301 	and.w	r3, r3, #1
 80248bc:	e7f5      	b.n	80248aa <applyMask+0xc6>
 80248be:	b005      	add	sp, #20
 80248c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080248c4 <drawFormatBits>:
 80248c4:	4b36      	ldr	r3, [pc, #216]	@ (80249a0 <drawFormatBits+0xdc>)
 80248c6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80248ca:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
 80248ce:	4616      	mov	r6, r2
 80248d0:	250a      	movs	r5, #10
 80248d2:	f240 5237 	movw	r2, #1335	@ 0x537
 80248d6:	ea41 01c4 	orr.w	r1, r1, r4, lsl #3
 80248da:	460c      	mov	r4, r1
 80248dc:	1263      	asrs	r3, r4, #9
 80248de:	3d01      	subs	r5, #1
 80248e0:	fb02 f303 	mul.w	r3, r2, r3
 80248e4:	ea83 0444 	eor.w	r4, r3, r4, lsl #1
 80248e8:	d1f8      	bne.n	80248dc <drawFormatBits+0x18>
 80248ea:	ea44 2481 	orr.w	r4, r4, r1, lsl #10
 80248ee:	f484 44a8 	eor.w	r4, r4, #21504	@ 0x5400
 80248f2:	f084 0412 	eor.w	r4, r4, #18
 80248f6:	fa44 f305 	asr.w	r3, r4, r5
 80248fa:	462a      	mov	r2, r5
 80248fc:	3501      	adds	r5, #1
 80248fe:	2108      	movs	r1, #8
 8024900:	f003 0301 	and.w	r3, r3, #1
 8024904:	4630      	mov	r0, r6
 8024906:	f7ff ff41 	bl	802478c <setModuleBounded>
 802490a:	2d06      	cmp	r5, #6
 802490c:	d1f3      	bne.n	80248f6 <drawFormatBits+0x32>
 802490e:	f3c4 1380 	ubfx	r3, r4, #6, #1
 8024912:	2207      	movs	r2, #7
 8024914:	2108      	movs	r1, #8
 8024916:	2509      	movs	r5, #9
 8024918:	f7ff ff38 	bl	802478c <setModuleBounded>
 802491c:	2208      	movs	r2, #8
 802491e:	f3c4 13c0 	ubfx	r3, r4, #7, #1
 8024922:	4611      	mov	r1, r2
 8024924:	f7ff ff32 	bl	802478c <setModuleBounded>
 8024928:	f3c4 2300 	ubfx	r3, r4, #8, #1
 802492c:	2208      	movs	r2, #8
 802492e:	2107      	movs	r1, #7
 8024930:	f7ff ff2c 	bl	802478c <setModuleBounded>
 8024934:	fa44 f305 	asr.w	r3, r4, r5
 8024938:	f1c5 010e 	rsb	r1, r5, #14
 802493c:	3501      	adds	r5, #1
 802493e:	2208      	movs	r2, #8
 8024940:	f003 0301 	and.w	r3, r3, #1
 8024944:	4630      	mov	r0, r6
 8024946:	f7ff ff21 	bl	802478c <setModuleBounded>
 802494a:	2d0f      	cmp	r5, #15
 802494c:	d1f2      	bne.n	8024934 <drawFormatBits+0x70>
 802494e:	7837      	ldrb	r7, [r6, #0]
 8024950:	2500      	movs	r5, #0
 8024952:	f107 38ff 	add.w	r8, r7, #4294967295
 8024956:	fa44 f305 	asr.w	r3, r4, r5
 802495a:	eba8 0105 	sub.w	r1, r8, r5
 802495e:	3501      	adds	r5, #1
 8024960:	2208      	movs	r2, #8
 8024962:	f003 0301 	and.w	r3, r3, #1
 8024966:	4630      	mov	r0, r6
 8024968:	f7ff ff10 	bl	802478c <setModuleBounded>
 802496c:	2d08      	cmp	r5, #8
 802496e:	d1f2      	bne.n	8024956 <drawFormatBits+0x92>
 8024970:	f1a7 080f 	sub.w	r8, r7, #15
 8024974:	fa44 f305 	asr.w	r3, r4, r5
 8024978:	eb08 0205 	add.w	r2, r8, r5
 802497c:	3501      	adds	r5, #1
 802497e:	2108      	movs	r1, #8
 8024980:	f003 0301 	and.w	r3, r3, #1
 8024984:	4630      	mov	r0, r6
 8024986:	f7ff ff01 	bl	802478c <setModuleBounded>
 802498a:	2d0f      	cmp	r5, #15
 802498c:	d1f2      	bne.n	8024974 <drawFormatBits+0xb0>
 802498e:	f1a7 0208 	sub.w	r2, r7, #8
 8024992:	2301      	movs	r3, #1
 8024994:	2108      	movs	r1, #8
 8024996:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802499a:	f7ff bef7 	b.w	802478c <setModuleBounded>
 802499e:	bf00      	nop
 80249a0:	0802b688 	.word	0x0802b688

080249a4 <calcSegmentBitLength>:
 80249a4:	f5b1 4f00 	cmp.w	r1, #32768	@ 0x8000
 80249a8:	d225      	bcs.n	80249f6 <calcSegmentBitLength+0x52>
 80249aa:	2801      	cmp	r0, #1
 80249ac:	d10b      	bne.n	80249c6 <calcSegmentBitLength+0x22>
 80249ae:	200a      	movs	r0, #10
 80249b0:	4348      	muls	r0, r1
 80249b2:	1c81      	adds	r1, r0, #2
 80249b4:	2003      	movs	r0, #3
 80249b6:	fb91 f0f0 	sdiv	r0, r1, r0
 80249ba:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 80249be:	bfa8      	it	ge
 80249c0:	f04f 30ff 	movge.w	r0, #4294967295
 80249c4:	4770      	bx	lr
 80249c6:	2802      	cmp	r0, #2
 80249c8:	d104      	bne.n	80249d4 <calcSegmentBitLength+0x30>
 80249ca:	200b      	movs	r0, #11
 80249cc:	4348      	muls	r0, r1
 80249ce:	3001      	adds	r0, #1
 80249d0:	1040      	asrs	r0, r0, #1
 80249d2:	e7f2      	b.n	80249ba <calcSegmentBitLength+0x16>
 80249d4:	2804      	cmp	r0, #4
 80249d6:	d101      	bne.n	80249dc <calcSegmentBitLength+0x38>
 80249d8:	00c8      	lsls	r0, r1, #3
 80249da:	e7ee      	b.n	80249ba <calcSegmentBitLength+0x16>
 80249dc:	2808      	cmp	r0, #8
 80249de:	d102      	bne.n	80249e6 <calcSegmentBitLength+0x42>
 80249e0:	200d      	movs	r0, #13
 80249e2:	4348      	muls	r0, r1
 80249e4:	e7e9      	b.n	80249ba <calcSegmentBitLength+0x16>
 80249e6:	2807      	cmp	r0, #7
 80249e8:	d105      	bne.n	80249f6 <calcSegmentBitLength+0x52>
 80249ea:	2900      	cmp	r1, #0
 80249ec:	bf14      	ite	ne
 80249ee:	f04f 30ff 	movne.w	r0, #4294967295
 80249f2:	2018      	moveq	r0, #24
 80249f4:	4770      	bx	lr
 80249f6:	f04f 30ff 	mov.w	r0, #4294967295
 80249fa:	4770      	bx	lr

080249fc <numCharCountBits>:
 80249fc:	3107      	adds	r1, #7
 80249fe:	2311      	movs	r3, #17
 8024a00:	3801      	subs	r0, #1
 8024a02:	fb91 f1f3 	sdiv	r1, r1, r3
 8024a06:	2807      	cmp	r0, #7
 8024a08:	d805      	bhi.n	8024a16 <numCharCountBits+0x1a>
 8024a0a:	e8df f000 	tbb	[pc, r0]
 8024a0e:	0b07      	.short	0x0b07
 8024a10:	04040d04 	.word	0x04040d04
 8024a14:	0f11      	.short	0x0f11
 8024a16:	f04f 30ff 	mov.w	r0, #4294967295
 8024a1a:	4770      	bx	lr
 8024a1c:	4b05      	ldr	r3, [pc, #20]	@ (8024a34 <numCharCountBits+0x38>)
 8024a1e:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 8024a22:	4770      	bx	lr
 8024a24:	4b04      	ldr	r3, [pc, #16]	@ (8024a38 <numCharCountBits+0x3c>)
 8024a26:	e7fa      	b.n	8024a1e <numCharCountBits+0x22>
 8024a28:	4b04      	ldr	r3, [pc, #16]	@ (8024a3c <numCharCountBits+0x40>)
 8024a2a:	e7f8      	b.n	8024a1e <numCharCountBits+0x22>
 8024a2c:	4b04      	ldr	r3, [pc, #16]	@ (8024a40 <numCharCountBits+0x44>)
 8024a2e:	e7f6      	b.n	8024a1e <numCharCountBits+0x22>
 8024a30:	2000      	movs	r0, #0
 8024a32:	4770      	bx	lr
 8024a34:	0802b698 	.word	0x0802b698
 8024a38:	0802b6a4 	.word	0x0802b6a4
 8024a3c:	0802b6b0 	.word	0x0802b6b0
 8024a40:	0802b6bc 	.word	0x0802b6bc

08024a44 <finderPenaltyAddHistory>:
 8024a44:	b538      	push	{r3, r4, r5, lr}
 8024a46:	680b      	ldr	r3, [r1, #0]
 8024a48:	4605      	mov	r5, r0
 8024a4a:	460c      	mov	r4, r1
 8024a4c:	b903      	cbnz	r3, 8024a50 <finderPenaltyAddHistory+0xc>
 8024a4e:	4415      	add	r5, r2
 8024a50:	2218      	movs	r2, #24
 8024a52:	4621      	mov	r1, r4
 8024a54:	1d20      	adds	r0, r4, #4
 8024a56:	f002 f90f 	bl	8026c78 <memmove>
 8024a5a:	6025      	str	r5, [r4, #0]
 8024a5c:	bd38      	pop	{r3, r4, r5, pc}

08024a5e <getAlignmentPatternPositions.part.0>:
 8024a5e:	b530      	push	{r4, r5, lr}
 8024a60:	2407      	movs	r4, #7
 8024a62:	4603      	mov	r3, r0
 8024a64:	fb90 f4f4 	sdiv	r4, r0, r4
 8024a68:	2b20      	cmp	r3, #32
 8024a6a:	f104 0002 	add.w	r0, r4, #2
 8024a6e:	f104 0401 	add.w	r4, r4, #1
 8024a72:	bf17      	itett	ne
 8024a74:	eb00 0243 	addne.w	r2, r0, r3, lsl #1
 8024a78:	221a      	moveq	r2, #26
 8024a7a:	0065      	lslne	r5, r4, #1
 8024a7c:	0052      	lslne	r2, r2, #1
 8024a7e:	ea4f 0383 	mov.w	r3, r3, lsl #2
 8024a82:	bf18      	it	ne
 8024a84:	3201      	addne	r2, #1
 8024a86:	f103 030a 	add.w	r3, r3, #10
 8024a8a:	bf1c      	itt	ne
 8024a8c:	fb92 f2f5 	sdivne	r2, r2, r5
 8024a90:	0052      	lslne	r2, r2, #1
 8024a92:	2c00      	cmp	r4, #0
 8024a94:	dd03      	ble.n	8024a9e <getAlignmentPatternPositions.part.0+0x40>
 8024a96:	550b      	strb	r3, [r1, r4]
 8024a98:	3c01      	subs	r4, #1
 8024a9a:	1a9b      	subs	r3, r3, r2
 8024a9c:	e7f9      	b.n	8024a92 <getAlignmentPatternPositions.part.0+0x34>
 8024a9e:	2306      	movs	r3, #6
 8024aa0:	700b      	strb	r3, [r1, #0]
 8024aa2:	bd30      	pop	{r4, r5, pc}

08024aa4 <finderPenaltyCountPatterns.isra.1>:
 8024aa4:	b510      	push	{r4, lr}
 8024aa6:	6843      	ldr	r3, [r0, #4]
 8024aa8:	2b00      	cmp	r3, #0
 8024aaa:	dd20      	ble.n	8024aee <finderPenaltyCountPatterns.isra.1+0x4a>
 8024aac:	6882      	ldr	r2, [r0, #8]
 8024aae:	4293      	cmp	r3, r2
 8024ab0:	d11d      	bne.n	8024aee <finderPenaltyCountPatterns.isra.1+0x4a>
 8024ab2:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024ab6:	68c1      	ldr	r1, [r0, #12]
 8024ab8:	4291      	cmp	r1, r2
 8024aba:	d118      	bne.n	8024aee <finderPenaltyCountPatterns.isra.1+0x4a>
 8024abc:	6902      	ldr	r2, [r0, #16]
 8024abe:	4293      	cmp	r3, r2
 8024ac0:	d115      	bne.n	8024aee <finderPenaltyCountPatterns.isra.1+0x4a>
 8024ac2:	6942      	ldr	r2, [r0, #20]
 8024ac4:	4293      	cmp	r3, r2
 8024ac6:	d112      	bne.n	8024aee <finderPenaltyCountPatterns.isra.1+0x4a>
 8024ac8:	6802      	ldr	r2, [r0, #0]
 8024aca:	009c      	lsls	r4, r3, #2
 8024acc:	6981      	ldr	r1, [r0, #24]
 8024ace:	42a2      	cmp	r2, r4
 8024ad0:	db0b      	blt.n	8024aea <finderPenaltyCountPatterns.isra.1+0x46>
 8024ad2:	428b      	cmp	r3, r1
 8024ad4:	bfcc      	ite	gt
 8024ad6:	2000      	movgt	r0, #0
 8024ad8:	2001      	movle	r0, #1
 8024ada:	428c      	cmp	r4, r1
 8024adc:	dc08      	bgt.n	8024af0 <finderPenaltyCountPatterns.isra.1+0x4c>
 8024ade:	4293      	cmp	r3, r2
 8024ae0:	bfcc      	ite	gt
 8024ae2:	2300      	movgt	r3, #0
 8024ae4:	2301      	movle	r3, #1
 8024ae6:	4418      	add	r0, r3
 8024ae8:	bd10      	pop	{r4, pc}
 8024aea:	2000      	movs	r0, #0
 8024aec:	e7f5      	b.n	8024ada <finderPenaltyCountPatterns.isra.1+0x36>
 8024aee:	2000      	movs	r0, #0
 8024af0:	2300      	movs	r3, #0
 8024af2:	e7f8      	b.n	8024ae6 <finderPenaltyCountPatterns.isra.1+0x42>

08024af4 <setModuleUnbounded.constprop.2>:
 8024af4:	7803      	ldrb	r3, [r0, #0]
 8024af6:	428b      	cmp	r3, r1
 8024af8:	b410      	push	{r4}
 8024afa:	d906      	bls.n	8024b0a <setModuleUnbounded.constprop.2+0x16>
 8024afc:	4293      	cmp	r3, r2
 8024afe:	d904      	bls.n	8024b0a <setModuleUnbounded.constprop.2+0x16>
 8024b00:	2300      	movs	r3, #0
 8024b02:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b06:	f7ff be41 	b.w	802478c <setModuleBounded>
 8024b0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8024b0e:	4770      	bx	lr

08024b10 <initializeFunctionModules>:
 8024b10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b14:	ea4f 0b80 	mov.w	fp, r0, lsl #2
 8024b18:	460c      	mov	r4, r1
 8024b1a:	b087      	sub	sp, #28
 8024b1c:	4607      	mov	r7, r0
 8024b1e:	f10b 0511 	add.w	r5, fp, #17
 8024b22:	2100      	movs	r1, #0
 8024b24:	4620      	mov	r0, r4
 8024b26:	fb05 f205 	mul.w	r2, r5, r5
 8024b2a:	3207      	adds	r2, #7
 8024b2c:	10d2      	asrs	r2, r2, #3
 8024b2e:	3201      	adds	r2, #1
 8024b30:	f002 f8bc 	bl	8026cac <memset>
 8024b34:	462b      	mov	r3, r5
 8024b36:	7025      	strb	r5, [r4, #0]
 8024b38:	2201      	movs	r2, #1
 8024b3a:	2100      	movs	r1, #0
 8024b3c:	2006      	movs	r0, #6
 8024b3e:	9400      	str	r4, [sp, #0]
 8024b40:	f7ff fe37 	bl	80247b2 <fillRectangle>
 8024b44:	462a      	mov	r2, r5
 8024b46:	2301      	movs	r3, #1
 8024b48:	2106      	movs	r1, #6
 8024b4a:	2000      	movs	r0, #0
 8024b4c:	9400      	str	r4, [sp, #0]
 8024b4e:	f7ff fe30 	bl	80247b2 <fillRectangle>
 8024b52:	2309      	movs	r3, #9
 8024b54:	2100      	movs	r1, #0
 8024b56:	f10b 0509 	add.w	r5, fp, #9
 8024b5a:	461a      	mov	r2, r3
 8024b5c:	9400      	str	r4, [sp, #0]
 8024b5e:	4608      	mov	r0, r1
 8024b60:	f7ff fe27 	bl	80247b2 <fillRectangle>
 8024b64:	2309      	movs	r3, #9
 8024b66:	2208      	movs	r2, #8
 8024b68:	2100      	movs	r1, #0
 8024b6a:	4628      	mov	r0, r5
 8024b6c:	9400      	str	r4, [sp, #0]
 8024b6e:	f7ff fe20 	bl	80247b2 <fillRectangle>
 8024b72:	9400      	str	r4, [sp, #0]
 8024b74:	2308      	movs	r3, #8
 8024b76:	2209      	movs	r2, #9
 8024b78:	4629      	mov	r1, r5
 8024b7a:	2000      	movs	r0, #0
 8024b7c:	f7ff fe19 	bl	80247b2 <fillRectangle>
 8024b80:	2f01      	cmp	r7, #1
 8024b82:	d03b      	beq.n	8024bfc <initializeFunctionModules+0xec>
 8024b84:	f10d 0a10 	add.w	sl, sp, #16
 8024b88:	4638      	mov	r0, r7
 8024b8a:	2600      	movs	r6, #0
 8024b8c:	4651      	mov	r1, sl
 8024b8e:	46d0      	mov	r8, sl
 8024b90:	f7ff ff65 	bl	8024a5e <getAlignmentPatternPositions.part.0>
 8024b94:	1e43      	subs	r3, r0, #1
 8024b96:	4681      	mov	r9, r0
 8024b98:	9303      	str	r3, [sp, #12]
 8024b9a:	454e      	cmp	r6, r9
 8024b9c:	da1c      	bge.n	8024bd8 <initializeFunctionModules+0xc8>
 8024b9e:	2500      	movs	r5, #0
 8024ba0:	454d      	cmp	r5, r9
 8024ba2:	d015      	beq.n	8024bd0 <initializeFunctionModules+0xc0>
 8024ba4:	b91e      	cbnz	r6, 8024bae <initializeFunctionModules+0x9e>
 8024ba6:	b18d      	cbz	r5, 8024bcc <initializeFunctionModules+0xbc>
 8024ba8:	9b03      	ldr	r3, [sp, #12]
 8024baa:	42ab      	cmp	r3, r5
 8024bac:	d00e      	beq.n	8024bcc <initializeFunctionModules+0xbc>
 8024bae:	9b03      	ldr	r3, [sp, #12]
 8024bb0:	42b3      	cmp	r3, r6
 8024bb2:	d100      	bne.n	8024bb6 <initializeFunctionModules+0xa6>
 8024bb4:	b155      	cbz	r5, 8024bcc <initializeFunctionModules+0xbc>
 8024bb6:	f81a 1005 	ldrb.w	r1, [sl, r5]
 8024bba:	2305      	movs	r3, #5
 8024bbc:	f898 0000 	ldrb.w	r0, [r8]
 8024bc0:	461a      	mov	r2, r3
 8024bc2:	9400      	str	r4, [sp, #0]
 8024bc4:	3902      	subs	r1, #2
 8024bc6:	3802      	subs	r0, #2
 8024bc8:	f7ff fdf3 	bl	80247b2 <fillRectangle>
 8024bcc:	3501      	adds	r5, #1
 8024bce:	e7e7      	b.n	8024ba0 <initializeFunctionModules+0x90>
 8024bd0:	3601      	adds	r6, #1
 8024bd2:	f108 0801 	add.w	r8, r8, #1
 8024bd6:	e7e0      	b.n	8024b9a <initializeFunctionModules+0x8a>
 8024bd8:	2f06      	cmp	r7, #6
 8024bda:	dd0f      	ble.n	8024bfc <initializeFunctionModules+0xec>
 8024bdc:	f10b 0506 	add.w	r5, fp, #6
 8024be0:	2306      	movs	r3, #6
 8024be2:	2203      	movs	r2, #3
 8024be4:	2100      	movs	r1, #0
 8024be6:	4628      	mov	r0, r5
 8024be8:	9400      	str	r4, [sp, #0]
 8024bea:	f7ff fde2 	bl	80247b2 <fillRectangle>
 8024bee:	9400      	str	r4, [sp, #0]
 8024bf0:	2303      	movs	r3, #3
 8024bf2:	2206      	movs	r2, #6
 8024bf4:	4629      	mov	r1, r5
 8024bf6:	2000      	movs	r0, #0
 8024bf8:	f7ff fddb 	bl	80247b2 <fillRectangle>
 8024bfc:	b007      	add	sp, #28
 8024bfe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08024c04 <qrcodegen_encodeSegmentsAdvanced>:
 8024c04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c08:	b097      	sub	sp, #92	@ 0x5c
 8024c0a:	469b      	mov	fp, r3
 8024c0c:	4607      	mov	r7, r0
 8024c0e:	4688      	mov	r8, r1
 8024c10:	f99d 3084 	ldrsb.w	r3, [sp, #132]	@ 0x84
 8024c14:	f8dd a090 	ldr.w	sl, [sp, #144]	@ 0x90
 8024c18:	9303      	str	r3, [sp, #12]
 8024c1a:	f89d 3088 	ldrb.w	r3, [sp, #136]	@ 0x88
 8024c1e:	9200      	str	r2, [sp, #0]
 8024c20:	9302      	str	r3, [sp, #8]
 8024c22:	2600      	movs	r6, #0
 8024c24:	9900      	ldr	r1, [sp, #0]
 8024c26:	4658      	mov	r0, fp
 8024c28:	463c      	mov	r4, r7
 8024c2a:	f7ff fd73 	bl	8024714 <getNumDataCodewords>
 8024c2e:	4635      	mov	r5, r6
 8024c30:	4681      	mov	r9, r0
 8024c32:	463a      	mov	r2, r7
 8024c34:	45b0      	cmp	r8, r6
 8024c36:	d015      	beq.n	8024c64 <qrcodegen_encodeSegmentsAdvanced+0x60>
 8024c38:	68d3      	ldr	r3, [r2, #12]
 8024c3a:	4659      	mov	r1, fp
 8024c3c:	7810      	ldrb	r0, [r2, #0]
 8024c3e:	9301      	str	r3, [sp, #4]
 8024c40:	f7ff fedc 	bl	80249fc <numCharCountBits>
 8024c44:	2301      	movs	r3, #1
 8024c46:	fa03 f100 	lsl.w	r1, r3, r0
 8024c4a:	6853      	ldr	r3, [r2, #4]
 8024c4c:	428b      	cmp	r3, r1
 8024c4e:	da0e      	bge.n	8024c6e <qrcodegen_encodeSegmentsAdvanced+0x6a>
 8024c50:	3004      	adds	r0, #4
 8024c52:	9b01      	ldr	r3, [sp, #4]
 8024c54:	3210      	adds	r2, #16
 8024c56:	4403      	add	r3, r0
 8024c58:	441d      	add	r5, r3
 8024c5a:	f5b5 4f00 	cmp.w	r5, #32768	@ 0x8000
 8024c5e:	da06      	bge.n	8024c6e <qrcodegen_encodeSegmentsAdvanced+0x6a>
 8024c60:	3601      	adds	r6, #1
 8024c62:	e7e7      	b.n	8024c34 <qrcodegen_encodeSegmentsAdvanced+0x30>
 8024c64:	1c6b      	adds	r3, r5, #1
 8024c66:	d002      	beq.n	8024c6e <qrcodegen_encodeSegmentsAdvanced+0x6a>
 8024c68:	ebb5 0fc9 	cmp.w	r5, r9, lsl #3
 8024c6c:	dd0b      	ble.n	8024c86 <qrcodegen_encodeSegmentsAdvanced+0x82>
 8024c6e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 8024c70:	459b      	cmp	fp, r3
 8024c72:	db05      	blt.n	8024c80 <qrcodegen_encodeSegmentsAdvanced+0x7c>
 8024c74:	2000      	movs	r0, #0
 8024c76:	f88a 0000 	strb.w	r0, [sl]
 8024c7a:	b017      	add	sp, #92	@ 0x5c
 8024c7c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c80:	f10b 0b01 	add.w	fp, fp, #1
 8024c84:	e7cd      	b.n	8024c22 <qrcodegen_encodeSegmentsAdvanced+0x1e>
 8024c86:	2701      	movs	r7, #1
 8024c88:	9b02      	ldr	r3, [sp, #8]
 8024c8a:	b15b      	cbz	r3, 8024ca4 <qrcodegen_encodeSegmentsAdvanced+0xa0>
 8024c8c:	fa5f f887 	uxtb.w	r8, r7
 8024c90:	4658      	mov	r0, fp
 8024c92:	4641      	mov	r1, r8
 8024c94:	f7ff fd3e 	bl	8024714 <getNumDataCodewords>
 8024c98:	9b00      	ldr	r3, [sp, #0]
 8024c9a:	ebb5 0fc0 	cmp.w	r5, r0, lsl #3
 8024c9e:	bfd8      	it	le
 8024ca0:	4643      	movle	r3, r8
 8024ca2:	9300      	str	r3, [sp, #0]
 8024ca4:	3701      	adds	r7, #1
 8024ca6:	2f04      	cmp	r7, #4
 8024ca8:	d1ee      	bne.n	8024c88 <qrcodegen_encodeSegmentsAdvanced+0x84>
 8024caa:	ea4f 028b 	mov.w	r2, fp, lsl #2
 8024cae:	2700      	movs	r7, #0
 8024cb0:	ad16      	add	r5, sp, #88	@ 0x58
 8024cb2:	2100      	movs	r1, #0
 8024cb4:	3211      	adds	r2, #17
 8024cb6:	4650      	mov	r0, sl
 8024cb8:	4352      	muls	r2, r2
 8024cba:	3207      	adds	r2, #7
 8024cbc:	10d2      	asrs	r2, r2, #3
 8024cbe:	3201      	adds	r2, #1
 8024cc0:	f001 fff4 	bl	8026cac <memset>
 8024cc4:	f845 7d24 	str.w	r7, [r5, #-36]!
 8024cc8:	42b7      	cmp	r7, r6
 8024cca:	d028      	beq.n	8024d1e <qrcodegen_encodeSegmentsAdvanced+0x11a>
 8024ccc:	462b      	mov	r3, r5
 8024cce:	4652      	mov	r2, sl
 8024cd0:	2104      	movs	r1, #4
 8024cd2:	7820      	ldrb	r0, [r4, #0]
 8024cd4:	f7ff fce8 	bl	80246a8 <appendBitsToBuffer>
 8024cd8:	f04f 0800 	mov.w	r8, #0
 8024cdc:	4659      	mov	r1, fp
 8024cde:	7820      	ldrb	r0, [r4, #0]
 8024ce0:	f7ff fe8c 	bl	80249fc <numCharCountBits>
 8024ce4:	462b      	mov	r3, r5
 8024ce6:	4601      	mov	r1, r0
 8024ce8:	6860      	ldr	r0, [r4, #4]
 8024cea:	f7ff fcdd 	bl	80246a8 <appendBitsToBuffer>
 8024cee:	68e3      	ldr	r3, [r4, #12]
 8024cf0:	4543      	cmp	r3, r8
 8024cf2:	dd11      	ble.n	8024d18 <qrcodegen_encodeSegmentsAdvanced+0x114>
 8024cf4:	ea4f 03e8 	mov.w	r3, r8, asr #3
 8024cf8:	68a2      	ldr	r2, [r4, #8]
 8024cfa:	2101      	movs	r1, #1
 8024cfc:	5cd0      	ldrb	r0, [r2, r3]
 8024cfe:	ea6f 0308 	mvn.w	r3, r8
 8024d02:	4652      	mov	r2, sl
 8024d04:	f108 0801 	add.w	r8, r8, #1
 8024d08:	f003 0307 	and.w	r3, r3, #7
 8024d0c:	4118      	asrs	r0, r3
 8024d0e:	462b      	mov	r3, r5
 8024d10:	4008      	ands	r0, r1
 8024d12:	f7ff fcc9 	bl	80246a8 <appendBitsToBuffer>
 8024d16:	e7ea      	b.n	8024cee <qrcodegen_encodeSegmentsAdvanced+0xea>
 8024d18:	3701      	adds	r7, #1
 8024d1a:	3410      	adds	r4, #16
 8024d1c:	e7d4      	b.n	8024cc8 <qrcodegen_encodeSegmentsAdvanced+0xc4>
 8024d1e:	9900      	ldr	r1, [sp, #0]
 8024d20:	4658      	mov	r0, fp
 8024d22:	f7ff fcf7 	bl	8024714 <getNumDataCodewords>
 8024d26:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024d28:	00c6      	lsls	r6, r0, #3
 8024d2a:	9002      	str	r0, [sp, #8]
 8024d2c:	462b      	mov	r3, r5
 8024d2e:	4652      	mov	r2, sl
 8024d30:	1a71      	subs	r1, r6, r1
 8024d32:	2000      	movs	r0, #0
 8024d34:	24ec      	movs	r4, #236	@ 0xec
 8024d36:	2904      	cmp	r1, #4
 8024d38:	bfa8      	it	ge
 8024d3a:	2104      	movge	r1, #4
 8024d3c:	f7ff fcb4 	bl	80246a8 <appendBitsToBuffer>
 8024d40:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8024d42:	2000      	movs	r0, #0
 8024d44:	424b      	negs	r3, r1
 8024d46:	f001 0107 	and.w	r1, r1, #7
 8024d4a:	f003 0307 	and.w	r3, r3, #7
 8024d4e:	bf58      	it	pl
 8024d50:	4259      	negpl	r1, r3
 8024d52:	462b      	mov	r3, r5
 8024d54:	f1c1 0108 	rsb	r1, r1, #8
 8024d58:	f001 0107 	and.w	r1, r1, #7
 8024d5c:	f7ff fca4 	bl	80246a8 <appendBitsToBuffer>
 8024d60:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8024d62:	42b3      	cmp	r3, r6
 8024d64:	da08      	bge.n	8024d78 <qrcodegen_encodeSegmentsAdvanced+0x174>
 8024d66:	4620      	mov	r0, r4
 8024d68:	462b      	mov	r3, r5
 8024d6a:	4652      	mov	r2, sl
 8024d6c:	2108      	movs	r1, #8
 8024d6e:	f7ff fc9b 	bl	80246a8 <appendBitsToBuffer>
 8024d72:	f084 04fd 	eor.w	r4, r4, #253	@ 0xfd
 8024d76:	e7f3      	b.n	8024d60 <qrcodegen_encodeSegmentsAdvanced+0x15c>
 8024d78:	9a00      	ldr	r2, [sp, #0]
 8024d7a:	2329      	movs	r3, #41	@ 0x29
 8024d7c:	4658      	mov	r0, fp
 8024d7e:	ae0e      	add	r6, sp, #56	@ 0x38
 8024d80:	4353      	muls	r3, r2
 8024d82:	4abd      	ldr	r2, [pc, #756]	@ (8025078 <qrcodegen_encodeSegmentsAdvanced+0x474>)
 8024d84:	2501      	movs	r5, #1
 8024d86:	f04f 0800 	mov.w	r8, #0
 8024d8a:	441a      	add	r2, r3
 8024d8c:	f912 200b 	ldrsb.w	r2, [r2, fp]
 8024d90:	9201      	str	r2, [sp, #4]
 8024d92:	4aba      	ldr	r2, [pc, #744]	@ (802507c <qrcodegen_encodeSegmentsAdvanced+0x478>)
 8024d94:	4413      	add	r3, r2
 8024d96:	f913 400b 	ldrsb.w	r4, [r3, fp]
 8024d9a:	f7ff fc9c 	bl	80246d6 <getNumRawDataModules>
 8024d9e:	2308      	movs	r3, #8
 8024da0:	9a01      	ldr	r2, [sp, #4]
 8024da2:	fb90 f3f3 	sdiv	r3, r0, r3
 8024da6:	9304      	str	r3, [sp, #16]
 8024da8:	4630      	mov	r0, r6
 8024daa:	9904      	ldr	r1, [sp, #16]
 8024dac:	fb93 f3f2 	sdiv	r3, r3, r2
 8024db0:	fb02 1213 	mls	r2, r2, r3, r1
 8024db4:	9901      	ldr	r1, [sp, #4]
 8024db6:	1b1b      	subs	r3, r3, r4
 8024db8:	1a8a      	subs	r2, r1, r2
 8024dba:	2100      	movs	r1, #0
 8024dbc:	9308      	str	r3, [sp, #32]
 8024dbe:	9207      	str	r2, [sp, #28]
 8024dc0:	4622      	mov	r2, r4
 8024dc2:	f001 ff73 	bl	8026cac <memset>
 8024dc6:	1e63      	subs	r3, r4, #1
 8024dc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8024dca:	ab16      	add	r3, sp, #88	@ 0x58
 8024dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8024dce:	4413      	add	r3, r2
 8024dd0:	f803 5c20 	strb.w	r5, [r3, #-32]
 8024dd4:	4544      	cmp	r4, r8
 8024dd6:	dd0f      	ble.n	8024df8 <qrcodegen_encodeSegmentsAdvanced+0x1f4>
 8024dd8:	4637      	mov	r7, r6
 8024dda:	7838      	ldrb	r0, [r7, #0]
 8024ddc:	4629      	mov	r1, r5
 8024dde:	f7ff fcb1 	bl	8024744 <reedSolomonMultiply>
 8024de2:	f807 0b01 	strb.w	r0, [r7], #1
 8024de6:	1bbb      	subs	r3, r7, r6
 8024de8:	429c      	cmp	r4, r3
 8024dea:	f340 828c 	ble.w	8025306 <qrcodegen_encodeSegmentsAdvanced+0x702>
 8024dee:	783b      	ldrb	r3, [r7, #0]
 8024df0:	4058      	eors	r0, r3
 8024df2:	f807 0c01 	strb.w	r0, [r7, #-1]
 8024df6:	e7f0      	b.n	8024dda <qrcodegen_encodeSegmentsAdvanced+0x1d6>
 8024df8:	46d0      	mov	r8, sl
 8024dfa:	2700      	movs	r7, #0
 8024dfc:	9b01      	ldr	r3, [sp, #4]
 8024dfe:	42bb      	cmp	r3, r7
 8024e00:	dd5a      	ble.n	8024eb8 <qrcodegen_encodeSegmentsAdvanced+0x2b4>
 8024e02:	2100      	movs	r1, #0
 8024e04:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8024e08:	42ba      	cmp	r2, r7
 8024e0a:	bfd8      	it	le
 8024e0c:	3301      	addle	r3, #1
 8024e0e:	4622      	mov	r2, r4
 8024e10:	9305      	str	r3, [sp, #20]
 8024e12:	9b02      	ldr	r3, [sp, #8]
 8024e14:	eb0a 0503 	add.w	r5, sl, r3
 8024e18:	4628      	mov	r0, r5
 8024e1a:	f001 ff47 	bl	8026cac <memset>
 8024e1e:	1e63      	subs	r3, r4, #1
 8024e20:	f8cd 8018 	str.w	r8, [sp, #24]
 8024e24:	930a      	str	r3, [sp, #40]	@ 0x28
 8024e26:	9b06      	ldr	r3, [sp, #24]
 8024e28:	9a05      	ldr	r2, [sp, #20]
 8024e2a:	eba3 0308 	sub.w	r3, r3, r8
 8024e2e:	429a      	cmp	r2, r3
 8024e30:	dd1f      	ble.n	8024e72 <qrcodegen_encodeSegmentsAdvanced+0x26e>
 8024e32:	9b06      	ldr	r3, [sp, #24]
 8024e34:	4629      	mov	r1, r5
 8024e36:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8024e38:	4628      	mov	r0, r5
 8024e3a:	f813 9b01 	ldrb.w	r9, [r3], #1
 8024e3e:	2600      	movs	r6, #0
 8024e40:	9306      	str	r3, [sp, #24]
 8024e42:	f811 3b01 	ldrb.w	r3, [r1], #1
 8024e46:	ea89 0903 	eor.w	r9, r9, r3
 8024e4a:	f001 ff15 	bl	8026c78 <memmove>
 8024e4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8024e50:	1e6a      	subs	r2, r5, #1
 8024e52:	54ee      	strb	r6, [r5, r3]
 8024e54:	42b4      	cmp	r4, r6
 8024e56:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024e58:	dde5      	ble.n	8024e26 <qrcodegen_encodeSegmentsAdvanced+0x222>
 8024e5a:	ab0e      	add	r3, sp, #56	@ 0x38
 8024e5c:	4649      	mov	r1, r9
 8024e5e:	5d98      	ldrb	r0, [r3, r6]
 8024e60:	3601      	adds	r6, #1
 8024e62:	f7ff fc6f 	bl	8024744 <reedSolomonMultiply>
 8024e66:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8024e68:	f812 3f01 	ldrb.w	r3, [r2, #1]!
 8024e6c:	4058      	eors	r0, r3
 8024e6e:	7010      	strb	r0, [r2, #0]
 8024e70:	e7f0      	b.n	8024e54 <qrcodegen_encodeSegmentsAdvanced+0x250>
 8024e72:	463b      	mov	r3, r7
 8024e74:	2200      	movs	r2, #0
 8024e76:	9905      	ldr	r1, [sp, #20]
 8024e78:	4291      	cmp	r1, r2
 8024e7a:	dd0c      	ble.n	8024e96 <qrcodegen_encodeSegmentsAdvanced+0x292>
 8024e7c:	9908      	ldr	r1, [sp, #32]
 8024e7e:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024e80:	4291      	cmp	r1, r2
 8024e82:	bf04      	itt	eq
 8024e84:	9907      	ldreq	r1, [sp, #28]
 8024e86:	1a5b      	subeq	r3, r3, r1
 8024e88:	f818 1002 	ldrb.w	r1, [r8, r2]
 8024e8c:	3201      	adds	r2, #1
 8024e8e:	54c1      	strb	r1, [r0, r3]
 8024e90:	9901      	ldr	r1, [sp, #4]
 8024e92:	440b      	add	r3, r1
 8024e94:	e7ef      	b.n	8024e76 <qrcodegen_encodeSegmentsAdvanced+0x272>
 8024e96:	9b02      	ldr	r3, [sp, #8]
 8024e98:	462a      	mov	r2, r5
 8024e9a:	18fb      	adds	r3, r7, r3
 8024e9c:	1b51      	subs	r1, r2, r5
 8024e9e:	428c      	cmp	r4, r1
 8024ea0:	dd06      	ble.n	8024eb0 <qrcodegen_encodeSegmentsAdvanced+0x2ac>
 8024ea2:	f812 1b01 	ldrb.w	r1, [r2], #1
 8024ea6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024ea8:	54c1      	strb	r1, [r0, r3]
 8024eaa:	9901      	ldr	r1, [sp, #4]
 8024eac:	440b      	add	r3, r1
 8024eae:	e7f5      	b.n	8024e9c <qrcodegen_encodeSegmentsAdvanced+0x298>
 8024eb0:	9b05      	ldr	r3, [sp, #20]
 8024eb2:	3701      	adds	r7, #1
 8024eb4:	4498      	add	r8, r3
 8024eb6:	e7a1      	b.n	8024dfc <qrcodegen_encodeSegmentsAdvanced+0x1f8>
 8024eb8:	4651      	mov	r1, sl
 8024eba:	4658      	mov	r0, fp
 8024ebc:	f7ff fe28 	bl	8024b10 <initializeFunctionModules>
 8024ec0:	f89a 5000 	ldrb.w	r5, [sl]
 8024ec4:	9b04      	ldr	r3, [sp, #16]
 8024ec6:	2600      	movs	r6, #0
 8024ec8:	3d01      	subs	r5, #1
 8024eca:	00db      	lsls	r3, r3, #3
 8024ecc:	462c      	mov	r4, r5
 8024ece:	9505      	str	r5, [sp, #20]
 8024ed0:	9302      	str	r3, [sp, #8]
 8024ed2:	2c00      	cmp	r4, #0
 8024ed4:	dd37      	ble.n	8024f46 <qrcodegen_encodeSegmentsAdvanced+0x342>
 8024ed6:	2c06      	cmp	r4, #6
 8024ed8:	462f      	mov	r7, r5
 8024eda:	bf08      	it	eq
 8024edc:	2405      	moveq	r4, #5
 8024ede:	1c63      	adds	r3, r4, #1
 8024ee0:	f003 0302 	and.w	r3, r3, #2
 8024ee4:	9304      	str	r3, [sp, #16]
 8024ee6:	9b05      	ldr	r3, [sp, #20]
 8024ee8:	1c78      	adds	r0, r7, #1
 8024eea:	eba3 0807 	sub.w	r8, r3, r7
 8024eee:	d028      	beq.n	8024f42 <qrcodegen_encodeSegmentsAdvanced+0x33e>
 8024ef0:	9b04      	ldr	r3, [sp, #16]
 8024ef2:	f04f 0900 	mov.w	r9, #0
 8024ef6:	2b00      	cmp	r3, #0
 8024ef8:	bf08      	it	eq
 8024efa:	46b8      	moveq	r8, r7
 8024efc:	eba4 0309 	sub.w	r3, r4, r9
 8024f00:	4642      	mov	r2, r8
 8024f02:	4650      	mov	r0, sl
 8024f04:	4619      	mov	r1, r3
 8024f06:	9301      	str	r3, [sp, #4]
 8024f08:	f7ff fc34 	bl	8024774 <getModuleBounded>
 8024f0c:	b988      	cbnz	r0, 8024f32 <qrcodegen_encodeSegmentsAdvanced+0x32e>
 8024f0e:	9b02      	ldr	r3, [sp, #8]
 8024f10:	42b3      	cmp	r3, r6
 8024f12:	dd0e      	ble.n	8024f32 <qrcodegen_encodeSegmentsAdvanced+0x32e>
 8024f14:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8024f16:	10f3      	asrs	r3, r6, #3
 8024f18:	9901      	ldr	r1, [sp, #4]
 8024f1a:	4650      	mov	r0, sl
 8024f1c:	5cd3      	ldrb	r3, [r2, r3]
 8024f1e:	43f2      	mvns	r2, r6
 8024f20:	3601      	adds	r6, #1
 8024f22:	f002 0207 	and.w	r2, r2, #7
 8024f26:	4113      	asrs	r3, r2
 8024f28:	4642      	mov	r2, r8
 8024f2a:	f003 0301 	and.w	r3, r3, #1
 8024f2e:	f7ff fc2d 	bl	802478c <setModuleBounded>
 8024f32:	f1b9 0f00 	cmp.w	r9, #0
 8024f36:	d001      	beq.n	8024f3c <qrcodegen_encodeSegmentsAdvanced+0x338>
 8024f38:	3f01      	subs	r7, #1
 8024f3a:	e7d4      	b.n	8024ee6 <qrcodegen_encodeSegmentsAdvanced+0x2e2>
 8024f3c:	f04f 0901 	mov.w	r9, #1
 8024f40:	e7dc      	b.n	8024efc <qrcodegen_encodeSegmentsAdvanced+0x2f8>
 8024f42:	3c02      	subs	r4, #2
 8024f44:	e7c5      	b.n	8024ed2 <qrcodegen_encodeSegmentsAdvanced+0x2ce>
 8024f46:	f89a 5000 	ldrb.w	r5, [sl]
 8024f4a:	2407      	movs	r4, #7
 8024f4c:	1fee      	subs	r6, r5, #7
 8024f4e:	42a6      	cmp	r6, r4
 8024f50:	dd0c      	ble.n	8024f6c <qrcodegen_encodeSegmentsAdvanced+0x368>
 8024f52:	4622      	mov	r2, r4
 8024f54:	2300      	movs	r3, #0
 8024f56:	2106      	movs	r1, #6
 8024f58:	4650      	mov	r0, sl
 8024f5a:	f7ff fc17 	bl	802478c <setModuleBounded>
 8024f5e:	4621      	mov	r1, r4
 8024f60:	2300      	movs	r3, #0
 8024f62:	2206      	movs	r2, #6
 8024f64:	f7ff fc12 	bl	802478c <setModuleBounded>
 8024f68:	3402      	adds	r4, #2
 8024f6a:	e7f0      	b.n	8024f4e <qrcodegen_encodeSegmentsAdvanced+0x34a>
 8024f6c:	f04f 38ff 	mov.w	r8, #4294967295
 8024f70:	2608      	movs	r6, #8
 8024f72:	f1a5 0904 	sub.w	r9, r5, #4
 8024f76:	f1c6 0704 	rsb	r7, r6, #4
 8024f7a:	1bab      	subs	r3, r5, r6
 8024f7c:	f06f 0403 	mvn.w	r4, #3
 8024f80:	2f00      	cmp	r7, #0
 8024f82:	9301      	str	r3, [sp, #4]
 8024f84:	bfb8      	it	lt
 8024f86:	427f      	neglt	r7, r7
 8024f88:	ea84 73e4 	eor.w	r3, r4, r4, asr #31
 8024f8c:	eba3 73e4 	sub.w	r3, r3, r4, asr #31
 8024f90:	42bb      	cmp	r3, r7
 8024f92:	bfb8      	it	lt
 8024f94:	463b      	movlt	r3, r7
 8024f96:	2b02      	cmp	r3, #2
 8024f98:	d001      	beq.n	8024f9e <qrcodegen_encodeSegmentsAdvanced+0x39a>
 8024f9a:	2b04      	cmp	r3, #4
 8024f9c:	d110      	bne.n	8024fc0 <qrcodegen_encodeSegmentsAdvanced+0x3bc>
 8024f9e:	1ce3      	adds	r3, r4, #3
 8024fa0:	4642      	mov	r2, r8
 8024fa2:	4650      	mov	r0, sl
 8024fa4:	4619      	mov	r1, r3
 8024fa6:	9302      	str	r3, [sp, #8]
 8024fa8:	f7ff fda4 	bl	8024af4 <setModuleUnbounded.constprop.2>
 8024fac:	4642      	mov	r2, r8
 8024fae:	eb09 0104 	add.w	r1, r9, r4
 8024fb2:	f7ff fd9f 	bl	8024af4 <setModuleUnbounded.constprop.2>
 8024fb6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8024fba:	4619      	mov	r1, r3
 8024fbc:	f7ff fd9a 	bl	8024af4 <setModuleUnbounded.constprop.2>
 8024fc0:	3401      	adds	r4, #1
 8024fc2:	2c05      	cmp	r4, #5
 8024fc4:	d1e0      	bne.n	8024f88 <qrcodegen_encodeSegmentsAdvanced+0x384>
 8024fc6:	3e01      	subs	r6, #1
 8024fc8:	f108 0801 	add.w	r8, r8, #1
 8024fcc:	1c71      	adds	r1, r6, #1
 8024fce:	d1d2      	bne.n	8024f76 <qrcodegen_encodeSegmentsAdvanced+0x372>
 8024fd0:	f1bb 0f01 	cmp.w	fp, #1
 8024fd4:	d154      	bne.n	8025080 <qrcodegen_encodeSegmentsAdvanced+0x47c>
 8024fd6:	9923      	ldr	r1, [sp, #140]	@ 0x8c
 8024fd8:	4658      	mov	r0, fp
 8024fda:	f7ff fd99 	bl	8024b10 <initializeFunctionModules>
 8024fde:	9b03      	ldr	r3, [sp, #12]
 8024fe0:	3301      	adds	r3, #1
 8024fe2:	f040 8184 	bne.w	80252ee <qrcodegen_encodeSegmentsAdvanced+0x6ea>
 8024fe6:	2300      	movs	r3, #0
 8024fe8:	9302      	str	r3, [sp, #8]
 8024fea:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8024fee:	9304      	str	r3, [sp, #16]
 8024ff0:	f99d 3008 	ldrsb.w	r3, [sp, #8]
 8024ff4:	4651      	mov	r1, sl
 8024ff6:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 8024ff8:	2700      	movs	r7, #0
 8024ffa:	461a      	mov	r2, r3
 8024ffc:	9301      	str	r3, [sp, #4]
 8024ffe:	f7ff fbf1 	bl	80247e4 <applyMask>
 8025002:	4652      	mov	r2, sl
 8025004:	463d      	mov	r5, r7
 8025006:	e9dd 0100 	ldrd	r0, r1, [sp]
 802500a:	f7ff fc5b 	bl	80248c4 <drawFormatBits>
 802500e:	f89a 4000 	ldrb.w	r4, [sl]
 8025012:	42bc      	cmp	r4, r7
 8025014:	f340 80bd 	ble.w	8025192 <qrcodegen_encodeSegmentsAdvanced+0x58e>
 8025018:	2600      	movs	r6, #0
 802501a:	221c      	movs	r2, #28
 802501c:	2100      	movs	r1, #0
 802501e:	a80e      	add	r0, sp, #56	@ 0x38
 8025020:	46b1      	mov	r9, r6
 8025022:	46b0      	mov	r8, r6
 8025024:	f001 fe42 	bl	8026cac <memset>
 8025028:	463a      	mov	r2, r7
 802502a:	4641      	mov	r1, r8
 802502c:	4650      	mov	r0, sl
 802502e:	f7ff fba1 	bl	8024774 <getModuleBounded>
 8025032:	4548      	cmp	r0, r9
 8025034:	f040 8097 	bne.w	8025166 <qrcodegen_encodeSegmentsAdvanced+0x562>
 8025038:	3601      	adds	r6, #1
 802503a:	2e05      	cmp	r6, #5
 802503c:	f040 808f 	bne.w	802515e <qrcodegen_encodeSegmentsAdvanced+0x55a>
 8025040:	3503      	adds	r5, #3
 8025042:	f108 0801 	add.w	r8, r8, #1
 8025046:	4544      	cmp	r4, r8
 8025048:	dcee      	bgt.n	8025028 <qrcodegen_encodeSegmentsAdvanced+0x424>
 802504a:	f1b9 0f00 	cmp.w	r9, #0
 802504e:	d005      	beq.n	802505c <qrcodegen_encodeSegmentsAdvanced+0x458>
 8025050:	4630      	mov	r0, r6
 8025052:	2600      	movs	r6, #0
 8025054:	4622      	mov	r2, r4
 8025056:	a90e      	add	r1, sp, #56	@ 0x38
 8025058:	f7ff fcf4 	bl	8024a44 <finderPenaltyAddHistory>
 802505c:	4622      	mov	r2, r4
 802505e:	a90e      	add	r1, sp, #56	@ 0x38
 8025060:	19a0      	adds	r0, r4, r6
 8025062:	3701      	adds	r7, #1
 8025064:	f7ff fcee 	bl	8024a44 <finderPenaltyAddHistory>
 8025068:	a80e      	add	r0, sp, #56	@ 0x38
 802506a:	f7ff fd1b 	bl	8024aa4 <finderPenaltyCountPatterns.isra.1>
 802506e:	2328      	movs	r3, #40	@ 0x28
 8025070:	fb03 5500 	mla	r5, r3, r0, r5
 8025074:	e7cd      	b.n	8025012 <qrcodegen_encodeSegmentsAdvanced+0x40e>
 8025076:	bf00      	nop
 8025078:	0802b5e4 	.word	0x0802b5e4
 802507c:	0802b540 	.word	0x0802b540
 8025080:	f10d 0938 	add.w	r9, sp, #56	@ 0x38
 8025084:	4658      	mov	r0, fp
 8025086:	2600      	movs	r6, #0
 8025088:	4649      	mov	r1, r9
 802508a:	f7ff fce8 	bl	8024a5e <getAlignmentPatternPositions.part.0>
 802508e:	4680      	mov	r8, r0
 8025090:	f8cd 9008 	str.w	r9, [sp, #8]
 8025094:	4546      	cmp	r6, r8
 8025096:	da38      	bge.n	802510a <qrcodegen_encodeSegmentsAdvanced+0x506>
 8025098:	f108 33ff 	add.w	r3, r8, #4294967295
 802509c:	f8cd 9004 	str.w	r9, [sp, #4]
 80250a0:	9304      	str	r3, [sp, #16]
 80250a2:	9b01      	ldr	r3, [sp, #4]
 80250a4:	eba3 0309 	sub.w	r3, r3, r9
 80250a8:	4598      	cmp	r8, r3
 80250aa:	dd29      	ble.n	8025100 <qrcodegen_encodeSegmentsAdvanced+0x4fc>
 80250ac:	bb06      	cbnz	r6, 80250f0 <qrcodegen_encodeSegmentsAdvanced+0x4ec>
 80250ae:	b91b      	cbnz	r3, 80250b8 <qrcodegen_encodeSegmentsAdvanced+0x4b4>
 80250b0:	9b01      	ldr	r3, [sp, #4]
 80250b2:	3301      	adds	r3, #1
 80250b4:	9301      	str	r3, [sp, #4]
 80250b6:	e7f4      	b.n	80250a2 <qrcodegen_encodeSegmentsAdvanced+0x49e>
 80250b8:	f108 32ff 	add.w	r2, r8, #4294967295
 80250bc:	429a      	cmp	r2, r3
 80250be:	d0f7      	beq.n	80250b0 <qrcodegen_encodeSegmentsAdvanced+0x4ac>
 80250c0:	f04f 34ff 	mov.w	r4, #4294967295
 80250c4:	f04f 37ff 	mov.w	r7, #4294967295
 80250c8:	9b02      	ldr	r3, [sp, #8]
 80250ca:	7819      	ldrb	r1, [r3, #0]
 80250cc:	9b01      	ldr	r3, [sp, #4]
 80250ce:	4439      	add	r1, r7
 80250d0:	781a      	ldrb	r2, [r3, #0]
 80250d2:	4422      	add	r2, r4
 80250d4:	b997      	cbnz	r7, 80250fc <qrcodegen_encodeSegmentsAdvanced+0x4f8>
 80250d6:	fab4 f384 	clz	r3, r4
 80250da:	095b      	lsrs	r3, r3, #5
 80250dc:	3701      	adds	r7, #1
 80250de:	4650      	mov	r0, sl
 80250e0:	f7ff fb54 	bl	802478c <setModuleBounded>
 80250e4:	2f02      	cmp	r7, #2
 80250e6:	d1ef      	bne.n	80250c8 <qrcodegen_encodeSegmentsAdvanced+0x4c4>
 80250e8:	3401      	adds	r4, #1
 80250ea:	2c02      	cmp	r4, #2
 80250ec:	d1ea      	bne.n	80250c4 <qrcodegen_encodeSegmentsAdvanced+0x4c0>
 80250ee:	e7df      	b.n	80250b0 <qrcodegen_encodeSegmentsAdvanced+0x4ac>
 80250f0:	9a04      	ldr	r2, [sp, #16]
 80250f2:	4296      	cmp	r6, r2
 80250f4:	d1e4      	bne.n	80250c0 <qrcodegen_encodeSegmentsAdvanced+0x4bc>
 80250f6:	2b00      	cmp	r3, #0
 80250f8:	d1e2      	bne.n	80250c0 <qrcodegen_encodeSegmentsAdvanced+0x4bc>
 80250fa:	e7d9      	b.n	80250b0 <qrcodegen_encodeSegmentsAdvanced+0x4ac>
 80250fc:	2300      	movs	r3, #0
 80250fe:	e7ed      	b.n	80250dc <qrcodegen_encodeSegmentsAdvanced+0x4d8>
 8025100:	9b02      	ldr	r3, [sp, #8]
 8025102:	3601      	adds	r6, #1
 8025104:	3301      	adds	r3, #1
 8025106:	9302      	str	r3, [sp, #8]
 8025108:	e7c4      	b.n	8025094 <qrcodegen_encodeSegmentsAdvanced+0x490>
 802510a:	f1bb 0f06 	cmp.w	fp, #6
 802510e:	f77f af62 	ble.w	8024fd6 <qrcodegen_encodeSegmentsAdvanced+0x3d2>
 8025112:	465e      	mov	r6, fp
 8025114:	240c      	movs	r4, #12
 8025116:	f641 7225 	movw	r2, #7973	@ 0x1f25
 802511a:	12f3      	asrs	r3, r6, #11
 802511c:	3c01      	subs	r4, #1
 802511e:	fb02 f303 	mul.w	r3, r2, r3
 8025122:	ea83 0646 	eor.w	r6, r3, r6, lsl #1
 8025126:	d1f8      	bne.n	802511a <qrcodegen_encodeSegmentsAdvanced+0x516>
 8025128:	ea46 360b 	orr.w	r6, r6, fp, lsl #12
 802512c:	3d0b      	subs	r5, #11
 802512e:	2700      	movs	r7, #0
 8025130:	eb05 0807 	add.w	r8, r5, r7
 8025134:	f006 0901 	and.w	r9, r6, #1
 8025138:	4622      	mov	r2, r4
 802513a:	4650      	mov	r0, sl
 802513c:	464b      	mov	r3, r9
 802513e:	4641      	mov	r1, r8
 8025140:	3701      	adds	r7, #1
 8025142:	f7ff fb23 	bl	802478c <setModuleBounded>
 8025146:	4642      	mov	r2, r8
 8025148:	4621      	mov	r1, r4
 802514a:	f7ff fb1f 	bl	802478c <setModuleBounded>
 802514e:	2f03      	cmp	r7, #3
 8025150:	ea4f 0666 	mov.w	r6, r6, asr #1
 8025154:	d1ec      	bne.n	8025130 <qrcodegen_encodeSegmentsAdvanced+0x52c>
 8025156:	3401      	adds	r4, #1
 8025158:	2c06      	cmp	r4, #6
 802515a:	d1e8      	bne.n	802512e <qrcodegen_encodeSegmentsAdvanced+0x52a>
 802515c:	e73b      	b.n	8024fd6 <qrcodegen_encodeSegmentsAdvanced+0x3d2>
 802515e:	f77f af70 	ble.w	8025042 <qrcodegen_encodeSegmentsAdvanced+0x43e>
 8025162:	3501      	adds	r5, #1
 8025164:	e76d      	b.n	8025042 <qrcodegen_encodeSegmentsAdvanced+0x43e>
 8025166:	4622      	mov	r2, r4
 8025168:	a90e      	add	r1, sp, #56	@ 0x38
 802516a:	4630      	mov	r0, r6
 802516c:	f7ff fc6a 	bl	8024a44 <finderPenaltyAddHistory>
 8025170:	f1b9 0f00 	cmp.w	r9, #0
 8025174:	d105      	bne.n	8025182 <qrcodegen_encodeSegmentsAdvanced+0x57e>
 8025176:	a80e      	add	r0, sp, #56	@ 0x38
 8025178:	f7ff fc94 	bl	8024aa4 <finderPenaltyCountPatterns.isra.1>
 802517c:	2328      	movs	r3, #40	@ 0x28
 802517e:	fb03 5500 	mla	r5, r3, r0, r5
 8025182:	463a      	mov	r2, r7
 8025184:	4641      	mov	r1, r8
 8025186:	4650      	mov	r0, sl
 8025188:	2601      	movs	r6, #1
 802518a:	f7ff faf3 	bl	8024774 <getModuleBounded>
 802518e:	4681      	mov	r9, r0
 8025190:	e757      	b.n	8025042 <qrcodegen_encodeSegmentsAdvanced+0x43e>
 8025192:	2700      	movs	r7, #0
 8025194:	42bc      	cmp	r4, r7
 8025196:	dd45      	ble.n	8025224 <qrcodegen_encodeSegmentsAdvanced+0x620>
 8025198:	2600      	movs	r6, #0
 802519a:	221c      	movs	r2, #28
 802519c:	2100      	movs	r1, #0
 802519e:	a80e      	add	r0, sp, #56	@ 0x38
 80251a0:	46b1      	mov	r9, r6
 80251a2:	46b0      	mov	r8, r6
 80251a4:	f001 fd82 	bl	8026cac <memset>
 80251a8:	4642      	mov	r2, r8
 80251aa:	4639      	mov	r1, r7
 80251ac:	4650      	mov	r0, sl
 80251ae:	f7ff fae1 	bl	8024774 <getModuleBounded>
 80251b2:	4548      	cmp	r0, r9
 80251b4:	d120      	bne.n	80251f8 <qrcodegen_encodeSegmentsAdvanced+0x5f4>
 80251b6:	3601      	adds	r6, #1
 80251b8:	2e05      	cmp	r6, #5
 80251ba:	d11a      	bne.n	80251f2 <qrcodegen_encodeSegmentsAdvanced+0x5ee>
 80251bc:	3503      	adds	r5, #3
 80251be:	f108 0801 	add.w	r8, r8, #1
 80251c2:	4544      	cmp	r4, r8
 80251c4:	dcf0      	bgt.n	80251a8 <qrcodegen_encodeSegmentsAdvanced+0x5a4>
 80251c6:	f1b9 0f00 	cmp.w	r9, #0
 80251ca:	d005      	beq.n	80251d8 <qrcodegen_encodeSegmentsAdvanced+0x5d4>
 80251cc:	4630      	mov	r0, r6
 80251ce:	2600      	movs	r6, #0
 80251d0:	4622      	mov	r2, r4
 80251d2:	a90e      	add	r1, sp, #56	@ 0x38
 80251d4:	f7ff fc36 	bl	8024a44 <finderPenaltyAddHistory>
 80251d8:	4622      	mov	r2, r4
 80251da:	a90e      	add	r1, sp, #56	@ 0x38
 80251dc:	19a0      	adds	r0, r4, r6
 80251de:	3701      	adds	r7, #1
 80251e0:	f7ff fc30 	bl	8024a44 <finderPenaltyAddHistory>
 80251e4:	a80e      	add	r0, sp, #56	@ 0x38
 80251e6:	f7ff fc5d 	bl	8024aa4 <finderPenaltyCountPatterns.isra.1>
 80251ea:	2328      	movs	r3, #40	@ 0x28
 80251ec:	fb03 5500 	mla	r5, r3, r0, r5
 80251f0:	e7d0      	b.n	8025194 <qrcodegen_encodeSegmentsAdvanced+0x590>
 80251f2:	dde4      	ble.n	80251be <qrcodegen_encodeSegmentsAdvanced+0x5ba>
 80251f4:	3501      	adds	r5, #1
 80251f6:	e7e2      	b.n	80251be <qrcodegen_encodeSegmentsAdvanced+0x5ba>
 80251f8:	4622      	mov	r2, r4
 80251fa:	a90e      	add	r1, sp, #56	@ 0x38
 80251fc:	4630      	mov	r0, r6
 80251fe:	f7ff fc21 	bl	8024a44 <finderPenaltyAddHistory>
 8025202:	f1b9 0f00 	cmp.w	r9, #0
 8025206:	d105      	bne.n	8025214 <qrcodegen_encodeSegmentsAdvanced+0x610>
 8025208:	a80e      	add	r0, sp, #56	@ 0x38
 802520a:	f7ff fc4b 	bl	8024aa4 <finderPenaltyCountPatterns.isra.1>
 802520e:	2328      	movs	r3, #40	@ 0x28
 8025210:	fb03 5500 	mla	r5, r3, r0, r5
 8025214:	4642      	mov	r2, r8
 8025216:	4639      	mov	r1, r7
 8025218:	4650      	mov	r0, sl
 802521a:	2601      	movs	r6, #1
 802521c:	f7ff faaa 	bl	8024774 <getModuleBounded>
 8025220:	4681      	mov	r9, r0
 8025222:	e7cc      	b.n	80251be <qrcodegen_encodeSegmentsAdvanced+0x5ba>
 8025224:	1e63      	subs	r3, r4, #1
 8025226:	2601      	movs	r6, #1
 8025228:	9305      	str	r3, [sp, #20]
 802522a:	f106 38ff 	add.w	r8, r6, #4294967295
 802522e:	9b05      	ldr	r3, [sp, #20]
 8025230:	4543      	cmp	r3, r8
 8025232:	dd25      	ble.n	8025280 <qrcodegen_encodeSegmentsAdvanced+0x67c>
 8025234:	f04f 0b00 	mov.w	fp, #0
 8025238:	4642      	mov	r2, r8
 802523a:	4659      	mov	r1, fp
 802523c:	4650      	mov	r0, sl
 802523e:	f10b 0701 	add.w	r7, fp, #1
 8025242:	f7ff fa97 	bl	8024774 <getModuleBounded>
 8025246:	4681      	mov	r9, r0
 8025248:	4642      	mov	r2, r8
 802524a:	4639      	mov	r1, r7
 802524c:	4650      	mov	r0, sl
 802524e:	f7ff fa91 	bl	8024774 <getModuleBounded>
 8025252:	4581      	cmp	r9, r0
 8025254:	d10e      	bne.n	8025274 <qrcodegen_encodeSegmentsAdvanced+0x670>
 8025256:	4632      	mov	r2, r6
 8025258:	4659      	mov	r1, fp
 802525a:	4650      	mov	r0, sl
 802525c:	f7ff fa8a 	bl	8024774 <getModuleBounded>
 8025260:	4581      	cmp	r9, r0
 8025262:	d107      	bne.n	8025274 <qrcodegen_encodeSegmentsAdvanced+0x670>
 8025264:	4632      	mov	r2, r6
 8025266:	4639      	mov	r1, r7
 8025268:	4650      	mov	r0, sl
 802526a:	f7ff fa83 	bl	8024774 <getModuleBounded>
 802526e:	4581      	cmp	r9, r0
 8025270:	d100      	bne.n	8025274 <qrcodegen_encodeSegmentsAdvanced+0x670>
 8025272:	3503      	adds	r5, #3
 8025274:	9b05      	ldr	r3, [sp, #20]
 8025276:	46bb      	mov	fp, r7
 8025278:	42bb      	cmp	r3, r7
 802527a:	dcdd      	bgt.n	8025238 <qrcodegen_encodeSegmentsAdvanced+0x634>
 802527c:	3601      	adds	r6, #1
 802527e:	e7d4      	b.n	802522a <qrcodegen_encodeSegmentsAdvanced+0x626>
 8025280:	2700      	movs	r7, #0
 8025282:	463e      	mov	r6, r7
 8025284:	42bc      	cmp	r4, r7
 8025286:	dd0e      	ble.n	80252a6 <qrcodegen_encodeSegmentsAdvanced+0x6a2>
 8025288:	f04f 0800 	mov.w	r8, #0
 802528c:	463a      	mov	r2, r7
 802528e:	4641      	mov	r1, r8
 8025290:	4650      	mov	r0, sl
 8025292:	f7ff fa6f 	bl	8024774 <getModuleBounded>
 8025296:	b100      	cbz	r0, 802529a <qrcodegen_encodeSegmentsAdvanced+0x696>
 8025298:	3601      	adds	r6, #1
 802529a:	f108 0801 	add.w	r8, r8, #1
 802529e:	4544      	cmp	r4, r8
 80252a0:	dcf4      	bgt.n	802528c <qrcodegen_encodeSegmentsAdvanced+0x688>
 80252a2:	3701      	adds	r7, #1
 80252a4:	e7ee      	b.n	8025284 <qrcodegen_encodeSegmentsAdvanced+0x680>
 80252a6:	fb14 f404 	smulbb	r4, r4, r4
 80252aa:	f06f 0309 	mvn.w	r3, #9
 80252ae:	2214      	movs	r2, #20
 80252b0:	4651      	mov	r1, sl
 80252b2:	4363      	muls	r3, r4
 80252b4:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80252b6:	fb02 3606 	mla	r6, r2, r6, r3
 80252ba:	230a      	movs	r3, #10
 80252bc:	9a01      	ldr	r2, [sp, #4]
 80252be:	2e00      	cmp	r6, #0
 80252c0:	bfb8      	it	lt
 80252c2:	4276      	neglt	r6, r6
 80252c4:	4426      	add	r6, r4
 80252c6:	3e01      	subs	r6, #1
 80252c8:	fb96 f4f4 	sdiv	r4, r6, r4
 80252cc:	3c01      	subs	r4, #1
 80252ce:	fb03 5504 	mla	r5, r3, r4, r5
 80252d2:	9b04      	ldr	r3, [sp, #16]
 80252d4:	429d      	cmp	r5, r3
 80252d6:	bfbe      	ittt	lt
 80252d8:	9b01      	ldrlt	r3, [sp, #4]
 80252da:	9504      	strlt	r5, [sp, #16]
 80252dc:	9303      	strlt	r3, [sp, #12]
 80252de:	f7ff fa81 	bl	80247e4 <applyMask>
 80252e2:	9b02      	ldr	r3, [sp, #8]
 80252e4:	3301      	adds	r3, #1
 80252e6:	2b08      	cmp	r3, #8
 80252e8:	9302      	str	r3, [sp, #8]
 80252ea:	f47f ae81 	bne.w	8024ff0 <qrcodegen_encodeSegmentsAdvanced+0x3ec>
 80252ee:	9a03      	ldr	r2, [sp, #12]
 80252f0:	4651      	mov	r1, sl
 80252f2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 80252f4:	f7ff fa76 	bl	80247e4 <applyMask>
 80252f8:	9800      	ldr	r0, [sp, #0]
 80252fa:	4652      	mov	r2, sl
 80252fc:	9903      	ldr	r1, [sp, #12]
 80252fe:	f7ff fae1 	bl	80248c4 <drawFormatBits>
 8025302:	2001      	movs	r0, #1
 8025304:	e4b9      	b.n	8024c7a <qrcodegen_encodeSegmentsAdvanced+0x76>
 8025306:	4628      	mov	r0, r5
 8025308:	2102      	movs	r1, #2
 802530a:	f7ff fa1b 	bl	8024744 <reedSolomonMultiply>
 802530e:	f108 0801 	add.w	r8, r8, #1
 8025312:	4605      	mov	r5, r0
 8025314:	e55e      	b.n	8024dd4 <qrcodegen_encodeSegmentsAdvanced+0x1d0>
 8025316:	bf00      	nop

08025318 <qrcodegen_isNumeric>:
 8025318:	3801      	subs	r0, #1
 802531a:	f810 3f01 	ldrb.w	r3, [r0, #1]!
 802531e:	b123      	cbz	r3, 802532a <qrcodegen_isNumeric+0x12>
 8025320:	3b30      	subs	r3, #48	@ 0x30
 8025322:	2b09      	cmp	r3, #9
 8025324:	d9f9      	bls.n	802531a <qrcodegen_isNumeric+0x2>
 8025326:	2000      	movs	r0, #0
 8025328:	4770      	bx	lr
 802532a:	2001      	movs	r0, #1
 802532c:	4770      	bx	lr
	...

08025330 <qrcodegen_isAlphanumeric>:
 8025330:	b538      	push	{r3, r4, r5, lr}
 8025332:	1e44      	subs	r4, r0, #1
 8025334:	4d05      	ldr	r5, [pc, #20]	@ (802534c <qrcodegen_isAlphanumeric+0x1c>)
 8025336:	f814 1f01 	ldrb.w	r1, [r4, #1]!
 802533a:	b129      	cbz	r1, 8025348 <qrcodegen_isAlphanumeric+0x18>
 802533c:	4628      	mov	r0, r5
 802533e:	f001 fcbd 	bl	8026cbc <strchr>
 8025342:	2800      	cmp	r0, #0
 8025344:	d1f7      	bne.n	8025336 <qrcodegen_isAlphanumeric+0x6>
 8025346:	bd38      	pop	{r3, r4, r5, pc}
 8025348:	2001      	movs	r0, #1
 802534a:	e7fc      	b.n	8025346 <qrcodegen_isAlphanumeric+0x16>
 802534c:	0802b6c8 	.word	0x0802b6c8

08025350 <qrcodegen_calcSegmentBufferSize>:
 8025350:	b508      	push	{r3, lr}
 8025352:	f7ff fb27 	bl	80249a4 <calcSegmentBitLength>
 8025356:	1c43      	adds	r3, r0, #1
 8025358:	bf1c      	itt	ne
 802535a:	3007      	addne	r0, #7
 802535c:	08c0      	lsrne	r0, r0, #3
 802535e:	bd08      	pop	{r3, pc}

08025360 <qrcodegen_makeNumeric>:
 8025360:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8025364:	4604      	mov	r4, r0
 8025366:	4608      	mov	r0, r1
 8025368:	4616      	mov	r6, r2
 802536a:	460d      	mov	r5, r1
 802536c:	f7da ffb8 	bl	80002e0 <strlen>
 8025370:	4603      	mov	r3, r0
 8025372:	2001      	movs	r0, #1
 8025374:	4619      	mov	r1, r3
 8025376:	7020      	strb	r0, [r4, #0]
 8025378:	f7ff fb14 	bl	80249a4 <calcSegmentBitLength>
 802537c:	1e02      	subs	r2, r0, #0
 802537e:	6063      	str	r3, [r4, #4]
 8025380:	dd05      	ble.n	802538e <qrcodegen_makeNumeric+0x2e>
 8025382:	3207      	adds	r2, #7
 8025384:	2100      	movs	r1, #0
 8025386:	4630      	mov	r0, r6
 8025388:	08d2      	lsrs	r2, r2, #3
 802538a:	f001 fc8f 	bl	8026cac <memset>
 802538e:	2100      	movs	r1, #0
 8025390:	4627      	mov	r7, r4
 8025392:	3d01      	subs	r5, #1
 8025394:	f04f 080a 	mov.w	r8, #10
 8025398:	4608      	mov	r0, r1
 802539a:	f847 1f0c 	str.w	r1, [r7, #12]!
 802539e:	f815 3f01 	ldrb.w	r3, [r5, #1]!
 80253a2:	b16b      	cbz	r3, 80253c0 <qrcodegen_makeNumeric+0x60>
 80253a4:	3101      	adds	r1, #1
 80253a6:	3b30      	subs	r3, #48	@ 0x30
 80253a8:	2903      	cmp	r1, #3
 80253aa:	fb08 3000 	mla	r0, r8, r0, r3
 80253ae:	d1f6      	bne.n	802539e <qrcodegen_makeNumeric+0x3e>
 80253b0:	210a      	movs	r1, #10
 80253b2:	463b      	mov	r3, r7
 80253b4:	4632      	mov	r2, r6
 80253b6:	f7ff f977 	bl	80246a8 <appendBitsToBuffer>
 80253ba:	2000      	movs	r0, #0
 80253bc:	4601      	mov	r1, r0
 80253be:	e7ee      	b.n	802539e <qrcodegen_makeNumeric+0x3e>
 80253c0:	b139      	cbz	r1, 80253d2 <qrcodegen_makeNumeric+0x72>
 80253c2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80253c6:	f104 030c 	add.w	r3, r4, #12
 80253ca:	4632      	mov	r2, r6
 80253cc:	3101      	adds	r1, #1
 80253ce:	f7ff f96b 	bl	80246a8 <appendBitsToBuffer>
 80253d2:	60a6      	str	r6, [r4, #8]
 80253d4:	4620      	mov	r0, r4
 80253d6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

080253dc <qrcodegen_makeAlphanumeric>:
 80253dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80253e0:	4605      	mov	r5, r0
 80253e2:	4608      	mov	r0, r1
 80253e4:	4690      	mov	r8, r2
 80253e6:	460f      	mov	r7, r1
 80253e8:	f7da ff7a 	bl	80002e0 <strlen>
 80253ec:	4603      	mov	r3, r0
 80253ee:	2002      	movs	r0, #2
 80253f0:	4619      	mov	r1, r3
 80253f2:	7028      	strb	r0, [r5, #0]
 80253f4:	f7ff fad6 	bl	80249a4 <calcSegmentBitLength>
 80253f8:	1e02      	subs	r2, r0, #0
 80253fa:	606b      	str	r3, [r5, #4]
 80253fc:	dd05      	ble.n	802540a <qrcodegen_makeAlphanumeric+0x2e>
 80253fe:	3207      	adds	r2, #7
 8025400:	2100      	movs	r1, #0
 8025402:	4640      	mov	r0, r8
 8025404:	08d2      	lsrs	r2, r2, #3
 8025406:	f001 fc51 	bl	8026cac <memset>
 802540a:	2400      	movs	r4, #0
 802540c:	3f01      	subs	r7, #1
 802540e:	f8df 9050 	ldr.w	r9, [pc, #80]	@ 8025460 <qrcodegen_makeAlphanumeric+0x84>
 8025412:	4626      	mov	r6, r4
 8025414:	60ec      	str	r4, [r5, #12]
 8025416:	f817 1f01 	ldrb.w	r1, [r7, #1]!
 802541a:	b1a1      	cbz	r1, 8025446 <qrcodegen_makeAlphanumeric+0x6a>
 802541c:	4810      	ldr	r0, [pc, #64]	@ (8025460 <qrcodegen_makeAlphanumeric+0x84>)
 802541e:	f001 fc4d 	bl	8026cbc <strchr>
 8025422:	232d      	movs	r3, #45	@ 0x2d
 8025424:	435e      	muls	r6, r3
 8025426:	eba6 0609 	sub.w	r6, r6, r9
 802542a:	4406      	add	r6, r0
 802542c:	b14c      	cbz	r4, 8025442 <qrcodegen_makeAlphanumeric+0x66>
 802542e:	4630      	mov	r0, r6
 8025430:	2600      	movs	r6, #0
 8025432:	f105 030c 	add.w	r3, r5, #12
 8025436:	4642      	mov	r2, r8
 8025438:	210b      	movs	r1, #11
 802543a:	4634      	mov	r4, r6
 802543c:	f7ff f934 	bl	80246a8 <appendBitsToBuffer>
 8025440:	e7e9      	b.n	8025416 <qrcodegen_makeAlphanumeric+0x3a>
 8025442:	2401      	movs	r4, #1
 8025444:	e7e7      	b.n	8025416 <qrcodegen_makeAlphanumeric+0x3a>
 8025446:	b134      	cbz	r4, 8025456 <qrcodegen_makeAlphanumeric+0x7a>
 8025448:	f105 030c 	add.w	r3, r5, #12
 802544c:	4642      	mov	r2, r8
 802544e:	2106      	movs	r1, #6
 8025450:	4630      	mov	r0, r6
 8025452:	f7ff f929 	bl	80246a8 <appendBitsToBuffer>
 8025456:	f8c5 8008 	str.w	r8, [r5, #8]
 802545a:	4628      	mov	r0, r5
 802545c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025460:	0802b6c8 	.word	0x0802b6c8

08025464 <qrcodegen_encodeText>:
 8025464:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025468:	b08f      	sub	sp, #60	@ 0x3c
 802546a:	4607      	mov	r7, r0
 802546c:	460e      	mov	r6, r1
 802546e:	4690      	mov	r8, r2
 8025470:	4699      	mov	r9, r3
 8025472:	f99d a068 	ldrsb.w	sl, [sp, #104]	@ 0x68
 8025476:	f7da ff33 	bl	80002e0 <strlen>
 802547a:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 802547e:	4605      	mov	r5, r0
 8025480:	b968      	cbnz	r0, 802549e <qrcodegen_encodeText+0x3a>
 8025482:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8025484:	464a      	mov	r2, r9
 8025486:	4601      	mov	r1, r0
 8025488:	9300      	str	r3, [sp, #0]
 802548a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 802548c:	e9cd 6803 	strd	r6, r8, [sp, #12]
 8025490:	e9cd ab01 	strd	sl, fp, [sp, #4]
 8025494:	f7ff fbb6 	bl	8024c04 <qrcodegen_encodeSegmentsAdvanced>
 8025498:	b00f      	add	sp, #60	@ 0x3c
 802549a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802549e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254a0:	4638      	mov	r0, r7
 80254a2:	009c      	lsls	r4, r3, #2
 80254a4:	3411      	adds	r4, #17
 80254a6:	4364      	muls	r4, r4
 80254a8:	3407      	adds	r4, #7
 80254aa:	10e4      	asrs	r4, r4, #3
 80254ac:	3401      	adds	r4, #1
 80254ae:	f7ff ff33 	bl	8025318 <qrcodegen_isNumeric>
 80254b2:	b1d8      	cbz	r0, 80254ec <qrcodegen_encodeText+0x88>
 80254b4:	4629      	mov	r1, r5
 80254b6:	2001      	movs	r0, #1
 80254b8:	f7ff ff4a 	bl	8025350 <qrcodegen_calcSegmentBufferSize>
 80254bc:	42a0      	cmp	r0, r4
 80254be:	d839      	bhi.n	8025534 <qrcodegen_encodeText+0xd0>
 80254c0:	ac06      	add	r4, sp, #24
 80254c2:	4632      	mov	r2, r6
 80254c4:	4639      	mov	r1, r7
 80254c6:	4620      	mov	r0, r4
 80254c8:	f7ff ff4a 	bl	8025360 <qrcodegen_makeNumeric>
 80254cc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80254d0:	ac0e      	add	r4, sp, #56	@ 0x38
 80254d2:	e904 000f 	stmdb	r4, {r0, r1, r2, r3}
 80254d6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80254d8:	464a      	mov	r2, r9
 80254da:	2101      	movs	r1, #1
 80254dc:	a80a      	add	r0, sp, #40	@ 0x28
 80254de:	9300      	str	r3, [sp, #0]
 80254e0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80254e2:	e9cd 6803 	strd	r6, r8, [sp, #12]
 80254e6:	e9cd ab01 	strd	sl, fp, [sp, #4]
 80254ea:	e7d3      	b.n	8025494 <qrcodegen_encodeText+0x30>
 80254ec:	4638      	mov	r0, r7
 80254ee:	f7ff ff1f 	bl	8025330 <qrcodegen_isAlphanumeric>
 80254f2:	b160      	cbz	r0, 802550e <qrcodegen_encodeText+0xaa>
 80254f4:	4629      	mov	r1, r5
 80254f6:	2002      	movs	r0, #2
 80254f8:	f7ff ff2a 	bl	8025350 <qrcodegen_calcSegmentBufferSize>
 80254fc:	42a0      	cmp	r0, r4
 80254fe:	d819      	bhi.n	8025534 <qrcodegen_encodeText+0xd0>
 8025500:	ac06      	add	r4, sp, #24
 8025502:	4632      	mov	r2, r6
 8025504:	4639      	mov	r1, r7
 8025506:	4620      	mov	r0, r4
 8025508:	f7ff ff68 	bl	80253dc <qrcodegen_makeAlphanumeric>
 802550c:	e7de      	b.n	80254cc <qrcodegen_encodeText+0x68>
 802550e:	42a5      	cmp	r5, r4
 8025510:	d810      	bhi.n	8025534 <qrcodegen_encodeText+0xd0>
 8025512:	5c3b      	ldrb	r3, [r7, r0]
 8025514:	5433      	strb	r3, [r6, r0]
 8025516:	3001      	adds	r0, #1
 8025518:	4285      	cmp	r5, r0
 802551a:	d1fa      	bne.n	8025512 <qrcodegen_encodeText+0xae>
 802551c:	2004      	movs	r0, #4
 802551e:	4629      	mov	r1, r5
 8025520:	f88d 0028 	strb.w	r0, [sp, #40]	@ 0x28
 8025524:	f7ff fa3e 	bl	80249a4 <calcSegmentBitLength>
 8025528:	900d      	str	r0, [sp, #52]	@ 0x34
 802552a:	3001      	adds	r0, #1
 802552c:	d002      	beq.n	8025534 <qrcodegen_encodeText+0xd0>
 802552e:	e9cd 560b 	strd	r5, r6, [sp, #44]	@ 0x2c
 8025532:	e7d0      	b.n	80254d6 <qrcodegen_encodeText+0x72>
 8025534:	2000      	movs	r0, #0
 8025536:	f888 0000 	strb.w	r0, [r8]
 802553a:	e7ad      	b.n	8025498 <qrcodegen_encodeText+0x34>

0802553c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802553c:	10c9      	asrs	r1, r1, #3
 802553e:	2900      	cmp	r1, #0
 8025540:	bfb8      	it	lt
 8025542:	4249      	neglt	r1, r1
 8025544:	2801      	cmp	r0, #1
 8025546:	d108      	bne.n	802555a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025548:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802554c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 8025550:	4601      	mov	r1, r0
 8025552:	dd02      	ble.n	802555a <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8025554:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 8025558:	4770      	bx	lr
 802555a:	29ff      	cmp	r1, #255	@ 0xff
 802555c:	bfa8      	it	ge
 802555e:	21ff      	movge	r1, #255	@ 0xff
 8025560:	4608      	mov	r0, r1
 8025562:	4770      	bx	lr

08025564 <_ZN8touchgfx10Rasterizer6lineToEii>:
 8025564:	b410      	push	{r4}
 8025566:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 802556a:	429c      	cmp	r4, r3
 802556c:	d803      	bhi.n	8025576 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 802556e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8025572:	f7ef bcc3 	b.w	8014efc <_ZN8touchgfx7Outline6lineToEii>
 8025576:	f85d 4b04 	ldr.w	r4, [sp], #4
 802557a:	4770      	bx	lr

0802557c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 802557c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025580:	b08b      	sub	sp, #44	@ 0x2c
 8025582:	4606      	mov	r6, r0
 8025584:	468a      	mov	sl, r1
 8025586:	e9cd 2306 	strd	r2, r3, [sp, #24]
 802558a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 802558e:	9308      	str	r3, [sp, #32]
 8025590:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 8025594:	9309      	str	r3, [sp, #36]	@ 0x24
 8025596:	f7ef fe1c 	bl	80151d2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 802559a:	68b5      	ldr	r5, [r6, #8]
 802559c:	4604      	mov	r4, r0
 802559e:	2d00      	cmp	r5, #0
 80255a0:	d044      	beq.n	802562c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80255a2:	6873      	ldr	r3, [r6, #4]
 80255a4:	42ab      	cmp	r3, r5
 80255a6:	d33d      	bcc.n	8025624 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80255a8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80255ac:	f04f 0800 	mov.w	r8, #0
 80255b0:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 80255b4:	eb02 0b03 	add.w	fp, r2, r3
 80255b8:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 80255bc:	fb02 1203 	mla	r2, r2, r3, r1
 80255c0:	9205      	str	r2, [sp, #20]
 80255c2:	1e6a      	subs	r2, r5, #1
 80255c4:	9204      	str	r2, [sp, #16]
 80255c6:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 80255ca:	f9b4 7000 	ldrsh.w	r7, [r4]
 80255ce:	454b      	cmp	r3, r9
 80255d0:	463a      	mov	r2, r7
 80255d2:	d008      	beq.n	80255e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 80255d4:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 80255d8:	eb03 0b09 	add.w	fp, r3, r9
 80255dc:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 80255e0:	fb03 1309 	mla	r3, r3, r9, r1
 80255e4:	9305      	str	r3, [sp, #20]
 80255e6:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80255ea:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80255ee:	4498      	add	r8, r3
 80255f0:	9b04      	ldr	r3, [sp, #16]
 80255f2:	3b01      	subs	r3, #1
 80255f4:	9304      	str	r3, [sp, #16]
 80255f6:	9b04      	ldr	r3, [sp, #16]
 80255f8:	3301      	adds	r3, #1
 80255fa:	d015      	beq.n	8025628 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 80255fc:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8025600:	42bb      	cmp	r3, r7
 8025602:	d117      	bne.n	8025634 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8025604:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8025608:	9b04      	ldr	r3, [sp, #16]
 802560a:	4548      	cmp	r0, r9
 802560c:	f103 33ff 	add.w	r3, r3, #4294967295
 8025610:	d17d      	bne.n	802570e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8025612:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8025616:	4401      	add	r1, r0
 8025618:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802561c:	4480      	add	r8, r0
 802561e:	e7e9      	b.n	80255f4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8025620:	461f      	mov	r7, r3
 8025622:	e042      	b.n	80256aa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8025624:	2000      	movs	r0, #0
 8025626:	e002      	b.n	802562e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8025628:	2900      	cmp	r1, #0
 802562a:	d16d      	bne.n	8025708 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802562c:	2001      	movs	r0, #1
 802562e:	b00b      	add	sp, #44	@ 0x2c
 8025630:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025634:	b379      	cbz	r1, 8025696 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8025636:	2f00      	cmp	r7, #0
 8025638:	db29      	blt.n	802568e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802563a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802563e:	42bb      	cmp	r3, r7
 8025640:	dd25      	ble.n	802568e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025642:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8025646:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802564a:	f7ff ff77 	bl	802553c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802564e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025650:	fb10 f003 	smulbb	r0, r0, r3
 8025654:	b280      	uxth	r0, r0
 8025656:	1c41      	adds	r1, r0, #1
 8025658:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 802565c:	1209      	asrs	r1, r1, #8
 802565e:	f011 0fff 	tst.w	r1, #255	@ 0xff
 8025662:	d014      	beq.n	802568e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8025664:	b2c9      	uxtb	r1, r1
 8025666:	9808      	ldr	r0, [sp, #32]
 8025668:	b2ba      	uxth	r2, r7
 802566a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 802566c:	9102      	str	r1, [sp, #8]
 802566e:	2101      	movs	r1, #1
 8025670:	4413      	add	r3, r2
 8025672:	4402      	add	r2, r0
 8025674:	9101      	str	r1, [sp, #4]
 8025676:	fa0f f18b 	sxth.w	r1, fp
 802567a:	f8da 0000 	ldr.w	r0, [sl]
 802567e:	b21b      	sxth	r3, r3
 8025680:	9100      	str	r1, [sp, #0]
 8025682:	b212      	sxth	r2, r2
 8025684:	6941      	ldr	r1, [r0, #20]
 8025686:	4650      	mov	r0, sl
 8025688:	460d      	mov	r5, r1
 802568a:	9905      	ldr	r1, [sp, #20]
 802568c:	47a8      	blx	r5
 802568e:	9b04      	ldr	r3, [sp, #16]
 8025690:	1c7a      	adds	r2, r7, #1
 8025692:	3301      	adds	r3, #1
 8025694:	d0ca      	beq.n	802562c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 8025696:	f9b4 7000 	ldrsh.w	r7, [r4]
 802569a:	1abb      	subs	r3, r7, r2
 802569c:	2b00      	cmp	r3, #0
 802569e:	dd31      	ble.n	8025704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80256a0:	2a00      	cmp	r2, #0
 80256a2:	dabd      	bge.n	8025620 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80256a4:	2f00      	cmp	r7, #0
 80256a6:	dd2d      	ble.n	8025704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80256a8:	2200      	movs	r2, #0
 80256aa:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80256ae:	19d1      	adds	r1, r2, r7
 80256b0:	4299      	cmp	r1, r3
 80256b2:	db02      	blt.n	80256ba <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 80256b4:	1a9f      	subs	r7, r3, r2
 80256b6:	2f00      	cmp	r7, #0
 80256b8:	dd24      	ble.n	8025704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80256ba:	ea4f 1188 	mov.w	r1, r8, lsl #6
 80256be:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 80256c2:	f7ff ff3b 	bl	802553c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 80256c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80256c8:	fb10 f003 	smulbb	r0, r0, r3
 80256cc:	b280      	uxth	r0, r0
 80256ce:	1c41      	adds	r1, r0, #1
 80256d0:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80256d4:	1209      	asrs	r1, r1, #8
 80256d6:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80256da:	d013      	beq.n	8025704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80256dc:	b292      	uxth	r2, r2
 80256de:	9808      	ldr	r0, [sp, #32]
 80256e0:	b2c9      	uxtb	r1, r1
 80256e2:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80256e4:	b23f      	sxth	r7, r7
 80256e6:	4413      	add	r3, r2
 80256e8:	9102      	str	r1, [sp, #8]
 80256ea:	4402      	add	r2, r0
 80256ec:	fa0f f18b 	sxth.w	r1, fp
 80256f0:	f8da 0000 	ldr.w	r0, [sl]
 80256f4:	b21b      	sxth	r3, r3
 80256f6:	9100      	str	r1, [sp, #0]
 80256f8:	b212      	sxth	r2, r2
 80256fa:	9701      	str	r7, [sp, #4]
 80256fc:	9905      	ldr	r1, [sp, #20]
 80256fe:	6947      	ldr	r7, [r0, #20]
 8025700:	4650      	mov	r0, sl
 8025702:	47b8      	blx	r7
 8025704:	464b      	mov	r3, r9
 8025706:	e75e      	b.n	80255c6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8025708:	2f00      	cmp	r7, #0
 802570a:	da96      	bge.n	802563a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802570c:	e78e      	b.n	802562c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802570e:	2900      	cmp	r1, #0
 8025710:	d0f8      	beq.n	8025704 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8025712:	e790      	b.n	8025636 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08025714 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8025714:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025718:	461e      	mov	r6, r3
 802571a:	4b36      	ldr	r3, [pc, #216]	@ (80257f4 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802571c:	2500      	movs	r5, #0
 802571e:	f100 0814 	add.w	r8, r0, #20
 8025722:	4604      	mov	r4, r0
 8025724:	4617      	mov	r7, r2
 8025726:	e9c0 3100 	strd	r3, r1, [r0]
 802572a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802572e:	8185      	strh	r5, [r0, #12]
 8025730:	8103      	strh	r3, [r0, #8]
 8025732:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8025736:	81c5      	strh	r5, [r0, #14]
 8025738:	7283      	strb	r3, [r0, #10]
 802573a:	8205      	strh	r5, [r0, #16]
 802573c:	8245      	strh	r5, [r0, #18]
 802573e:	4640      	mov	r0, r8
 8025740:	f7ee ff22 	bl	8014588 <_ZN8touchgfx7OutlineC1Ev>
 8025744:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8025748:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802574c:	466b      	mov	r3, sp
 802574e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 8025752:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 8025756:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 802575a:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 802575e:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 8025762:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 8025766:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 802576a:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 802576e:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 8025772:	6830      	ldr	r0, [r6, #0]
 8025774:	6871      	ldr	r1, [r6, #4]
 8025776:	8872      	ldrh	r2, [r6, #2]
 8025778:	8835      	ldrh	r5, [r6, #0]
 802577a:	c303      	stmia	r3!, {r0, r1}
 802577c:	887b      	ldrh	r3, [r7, #2]
 802577e:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 8025782:	4413      	add	r3, r2
 8025784:	883a      	ldrh	r2, [r7, #0]
 8025786:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 802578a:	442a      	add	r2, r5
 802578c:	81e3      	strh	r3, [r4, #14]
 802578e:	8220      	strh	r0, [r4, #16]
 8025790:	4668      	mov	r0, sp
 8025792:	81a2      	strh	r2, [r4, #12]
 8025794:	8261      	strh	r1, [r4, #18]
 8025796:	4639      	mov	r1, r7
 8025798:	f7f1 f8ea 	bl	8016970 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 802579c:	f104 000c 	add.w	r0, r4, #12
 80257a0:	f7f1 f8a2 	bl	80168e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80257a4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80257a8:	f8bd 2000 	ldrh.w	r2, [sp]
 80257ac:	4640      	mov	r0, r8
 80257ae:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 80257b2:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 80257b6:	f7ee fecc 	bl	8014552 <_ZN8touchgfx7Outline5resetEv>
 80257ba:	f9bd 3000 	ldrsh.w	r3, [sp]
 80257be:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 80257c2:	4620      	mov	r0, r4
 80257c4:	015b      	lsls	r3, r3, #5
 80257c6:	64e3      	str	r3, [r4, #76]	@ 0x4c
 80257c8:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80257cc:	015b      	lsls	r3, r3, #5
 80257ce:	6523      	str	r3, [r4, #80]	@ 0x50
 80257d0:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80257d4:	015b      	lsls	r3, r3, #5
 80257d6:	6563      	str	r3, [r4, #84]	@ 0x54
 80257d8:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 80257dc:	015b      	lsls	r3, r3, #5
 80257de:	65a3      	str	r3, [r4, #88]	@ 0x58
 80257e0:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 80257e4:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 80257e8:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 80257ec:	b002      	add	sp, #8
 80257ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80257f2:	bf00      	nop
 80257f4:	0802b700 	.word	0x0802b700

080257f8 <_ZN8touchgfx6Canvas5closeEv>:
 80257f8:	b538      	push	{r3, r4, r5, lr}
 80257fa:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80257fe:	4604      	mov	r4, r0
 8025800:	b193      	cbz	r3, 8025828 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8025802:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8025806:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802580a:	4213      	tst	r3, r2
 802580c:	d10c      	bne.n	8025828 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802580e:	f100 0514 	add.w	r5, r0, #20
 8025812:	b123      	cbz	r3, 802581e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8025814:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8025818:	4628      	mov	r0, r5
 802581a:	f7ff fea3 	bl	8025564 <_ZN8touchgfx10Rasterizer6lineToEii>
 802581e:	4628      	mov	r0, r5
 8025820:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8025824:	f7ff fe9e 	bl	8025564 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025828:	2300      	movs	r3, #0
 802582a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802582e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8025832:	4298      	cmp	r0, r3
 8025834:	bf34      	ite	cc
 8025836:	2000      	movcc	r0, #0
 8025838:	2001      	movcs	r0, #1
 802583a:	bd38      	pop	{r3, r4, r5, pc}

0802583c <_ZN8touchgfx6Canvas6renderEh>:
 802583c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8025840:	7a85      	ldrb	r5, [r0, #10]
 8025842:	4604      	mov	r4, r0
 8025844:	4369      	muls	r1, r5
 8025846:	1c4d      	adds	r5, r1, #1
 8025848:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802584c:	122d      	asrs	r5, r5, #8
 802584e:	f000 8098 	beq.w	8025982 <_ZN8touchgfx6Canvas6renderEh+0x146>
 8025852:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 8025856:	2b00      	cmp	r3, #0
 8025858:	f000 8093 	beq.w	8025982 <_ZN8touchgfx6Canvas6renderEh+0x146>
 802585c:	f7ff ffcc 	bl	80257f8 <_ZN8touchgfx6Canvas5closeEv>
 8025860:	4607      	mov	r7, r0
 8025862:	2800      	cmp	r0, #0
 8025864:	d045      	beq.n	80258f2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8025866:	6860      	ldr	r0, [r4, #4]
 8025868:	4e47      	ldr	r6, [pc, #284]	@ (8025988 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 802586a:	6803      	ldr	r3, [r0, #0]
 802586c:	6837      	ldr	r7, [r6, #0]
 802586e:	689b      	ldr	r3, [r3, #8]
 8025870:	4798      	blx	r3
 8025872:	4601      	mov	r1, r0
 8025874:	4638      	mov	r0, r7
 8025876:	f7eb fa53 	bl	8010d20 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 802587a:	4607      	mov	r7, r0
 802587c:	f7de fbe4 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 8025880:	6803      	ldr	r3, [r0, #0]
 8025882:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8025884:	4798      	blx	r3
 8025886:	4680      	mov	r8, r0
 8025888:	f7de fbde 	bl	8004048 <_ZN8touchgfx3HAL3lcdEv>
 802588c:	6803      	ldr	r3, [r0, #0]
 802588e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8025890:	4798      	blx	r3
 8025892:	280b      	cmp	r0, #11
 8025894:	d85a      	bhi.n	802594c <_ZN8touchgfx6Canvas6renderEh+0x110>
 8025896:	e8df f000 	tbb	[pc, r0]
 802589a:	5b50      	.short	0x5b50
 802589c:	3059066b 	.word	0x3059066b
 80258a0:	64646440 	.word	0x64646440
 80258a4:	6464      	.short	0x6464
 80258a6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80258aa:	2208      	movs	r2, #8
 80258ac:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80258b0:	fb91 f2f2 	sdiv	r2, r1, r2
 80258b4:	fb08 2303 	mla	r3, r8, r3, r2
 80258b8:	441f      	add	r7, r3
 80258ba:	424b      	negs	r3, r1
 80258bc:	f001 0107 	and.w	r1, r1, #7
 80258c0:	f003 0307 	and.w	r3, r3, #7
 80258c4:	bf58      	it	pl
 80258c6:	4259      	negpl	r1, r3
 80258c8:	b2c9      	uxtb	r1, r1
 80258ca:	b2ed      	uxtb	r5, r5
 80258cc:	463a      	mov	r2, r7
 80258ce:	fa0f f388 	sxth.w	r3, r8
 80258d2:	f104 0014 	add.w	r0, r4, #20
 80258d6:	e9cd 1500 	strd	r1, r5, [sp]
 80258da:	6861      	ldr	r1, [r4, #4]
 80258dc:	f7ff fe4e 	bl	802557c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 80258e0:	4607      	mov	r7, r0
 80258e2:	6860      	ldr	r0, [r4, #4]
 80258e4:	6803      	ldr	r3, [r0, #0]
 80258e6:	691b      	ldr	r3, [r3, #16]
 80258e8:	4798      	blx	r3
 80258ea:	6830      	ldr	r0, [r6, #0]
 80258ec:	6803      	ldr	r3, [r0, #0]
 80258ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80258f0:	4798      	blx	r3
 80258f2:	4638      	mov	r0, r7
 80258f4:	b002      	add	sp, #8
 80258f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80258fa:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80258fe:	2204      	movs	r2, #4
 8025900:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025904:	fb91 f2f2 	sdiv	r2, r1, r2
 8025908:	fb08 2303 	mla	r3, r8, r3, r2
 802590c:	441f      	add	r7, r3
 802590e:	424b      	negs	r3, r1
 8025910:	f001 0103 	and.w	r1, r1, #3
 8025914:	f003 0303 	and.w	r3, r3, #3
 8025918:	e7d4      	b.n	80258c4 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802591a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802591e:	2202      	movs	r2, #2
 8025920:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025924:	2900      	cmp	r1, #0
 8025926:	fb91 f2f2 	sdiv	r2, r1, r2
 802592a:	f001 0101 	and.w	r1, r1, #1
 802592e:	fb08 2303 	mla	r3, r8, r3, r2
 8025932:	bfb8      	it	lt
 8025934:	4249      	neglt	r1, r1
 8025936:	441f      	add	r7, r3
 8025938:	e7c6      	b.n	80258c8 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802593a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802593e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025942:	fb08 f303 	mul.w	r3, r8, r3
 8025946:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802594a:	441f      	add	r7, r3
 802594c:	2100      	movs	r1, #0
 802594e:	e7bc      	b.n	80258ca <_ZN8touchgfx6Canvas6renderEh+0x8e>
 8025950:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025954:	2103      	movs	r1, #3
 8025956:	fb08 f203 	mul.w	r2, r8, r3
 802595a:	89a3      	ldrh	r3, [r4, #12]
 802595c:	fb13 2301 	smlabb	r3, r3, r1, r2
 8025960:	e7f3      	b.n	802594a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8025962:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025966:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 802596a:	fb08 2303 	mla	r3, r8, r3, r2
 802596e:	e7ec      	b.n	802594a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8025970:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8025974:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8025978:	fb08 f303 	mul.w	r3, r8, r3
 802597c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 8025980:	e7e3      	b.n	802594a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 8025982:	2701      	movs	r7, #1
 8025984:	e7b5      	b.n	80258f2 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 8025986:	bf00      	nop
 8025988:	24025e20 	.word	0x24025e20

0802598c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 802598c:	4b06      	ldr	r3, [pc, #24]	@ (80259a8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 802598e:	b510      	push	{r4, lr}
 8025990:	781b      	ldrb	r3, [r3, #0]
 8025992:	2b01      	cmp	r3, #1
 8025994:	d107      	bne.n	80259a6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 8025996:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 802599a:	680b      	ldr	r3, [r1, #0]
 802599c:	6814      	ldr	r4, [r2, #0]
 802599e:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80259a2:	6013      	str	r3, [r2, #0]
 80259a4:	600c      	str	r4, [r1, #0]
 80259a6:	bd10      	pop	{r4, pc}
 80259a8:	24025e18 	.word	0x24025e18

080259ac <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80259ac:	b513      	push	{r0, r1, r4, lr}
 80259ae:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 80259b2:	4604      	mov	r4, r0
 80259b4:	e9cd 2100 	strd	r2, r1, [sp]
 80259b8:	b9a3      	cbnz	r3, 80259e4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 80259ba:	466a      	mov	r2, sp
 80259bc:	a901      	add	r1, sp, #4
 80259be:	4620      	mov	r0, r4
 80259c0:	f7ff ffe4 	bl	802598c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 80259c4:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 80259c6:	9901      	ldr	r1, [sp, #4]
 80259c8:	9a00      	ldr	r2, [sp, #0]
 80259ca:	1ac9      	subs	r1, r1, r3
 80259cc:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 80259ce:	1ad2      	subs	r2, r2, r3
 80259d0:	9101      	str	r1, [sp, #4]
 80259d2:	2a00      	cmp	r2, #0
 80259d4:	9200      	str	r2, [sp, #0]
 80259d6:	da0b      	bge.n	80259f0 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 80259d8:	2301      	movs	r3, #1
 80259da:	2900      	cmp	r1, #0
 80259dc:	da0e      	bge.n	80259fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 80259de:	f043 0304 	orr.w	r3, r3, #4
 80259e2:	e013      	b.n	8025a0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 80259e4:	f7ff ff08 	bl	80257f8 <_ZN8touchgfx6Canvas5closeEv>
 80259e8:	2800      	cmp	r0, #0
 80259ea:	d1e6      	bne.n	80259ba <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 80259ec:	b002      	add	sp, #8
 80259ee:	bd10      	pop	{r4, pc}
 80259f0:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 80259f2:	429a      	cmp	r2, r3
 80259f4:	bfac      	ite	ge
 80259f6:	2302      	movge	r3, #2
 80259f8:	2300      	movlt	r3, #0
 80259fa:	e7ee      	b.n	80259da <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 80259fc:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 80259fe:	4281      	cmp	r1, r0
 8025a00:	bfac      	ite	ge
 8025a02:	2008      	movge	r0, #8
 8025a04:	2000      	movlt	r0, #0
 8025a06:	4318      	orrs	r0, r3
 8025a08:	b2c3      	uxtb	r3, r0
 8025a0a:	b158      	cbz	r0, 8025a24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8025a0c:	2200      	movs	r2, #0
 8025a0e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8025a12:	9901      	ldr	r1, [sp, #4]
 8025a14:	9a00      	ldr	r2, [sp, #0]
 8025a16:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8025a18:	6722      	str	r2, [r4, #112]	@ 0x70
 8025a1a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8025a1e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8025a22:	e7e3      	b.n	80259ec <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8025a24:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8025a28:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8025a2c:	4298      	cmp	r0, r3
 8025a2e:	d803      	bhi.n	8025a38 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8025a30:	f104 0014 	add.w	r0, r4, #20
 8025a34:	f7ef fa7c 	bl	8014f30 <_ZN8touchgfx7Outline6moveToEii>
 8025a38:	2301      	movs	r3, #1
 8025a3a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8025a3e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8025a42:	2300      	movs	r3, #0
 8025a44:	e7e5      	b.n	8025a12 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08025a46 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8025a46:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8025a48:	ab02      	add	r3, sp, #8
 8025a4a:	4604      	mov	r4, r0
 8025a4c:	9101      	str	r1, [sp, #4]
 8025a4e:	a901      	add	r1, sp, #4
 8025a50:	f843 2d08 	str.w	r2, [r3, #-8]!
 8025a54:	461a      	mov	r2, r3
 8025a56:	f7ff ff99 	bl	802598c <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8025a5a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8025a5c:	9901      	ldr	r1, [sp, #4]
 8025a5e:	9a00      	ldr	r2, [sp, #0]
 8025a60:	1ac9      	subs	r1, r1, r3
 8025a62:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8025a64:	1ad2      	subs	r2, r2, r3
 8025a66:	9101      	str	r1, [sp, #4]
 8025a68:	2a00      	cmp	r2, #0
 8025a6a:	9200      	str	r2, [sp, #0]
 8025a6c:	db1c      	blt.n	8025aa8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8025a6e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8025a70:	429a      	cmp	r2, r3
 8025a72:	bfac      	ite	ge
 8025a74:	2002      	movge	r0, #2
 8025a76:	2000      	movlt	r0, #0
 8025a78:	2900      	cmp	r1, #0
 8025a7a:	db17      	blt.n	8025aac <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8025a7c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8025a7e:	4299      	cmp	r1, r3
 8025a80:	bfac      	ite	ge
 8025a82:	2308      	movge	r3, #8
 8025a84:	2300      	movlt	r3, #0
 8025a86:	4303      	orrs	r3, r0
 8025a88:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8025a8c:	b2dd      	uxtb	r5, r3
 8025a8e:	b978      	cbnz	r0, 8025ab0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8025a90:	f104 0014 	add.w	r0, r4, #20
 8025a94:	f7ff fd66 	bl	8025564 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025a98:	9b01      	ldr	r3, [sp, #4]
 8025a9a:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8025a9e:	6623      	str	r3, [r4, #96]	@ 0x60
 8025aa0:	9b00      	ldr	r3, [sp, #0]
 8025aa2:	6663      	str	r3, [r4, #100]	@ 0x64
 8025aa4:	b002      	add	sp, #8
 8025aa6:	bd70      	pop	{r4, r5, r6, pc}
 8025aa8:	2001      	movs	r0, #1
 8025aaa:	e7e5      	b.n	8025a78 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8025aac:	2304      	movs	r3, #4
 8025aae:	e7ea      	b.n	8025a86 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8025ab0:	b113      	cbz	r3, 8025ab8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8025ab2:	ea10 0305 	ands.w	r3, r0, r5
 8025ab6:	d11c      	bne.n	8025af2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8025ab8:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8025abc:	f104 0614 	add.w	r6, r4, #20
 8025ac0:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8025ac4:	b98b      	cbnz	r3, 8025aea <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8025ac6:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8025aca:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8025ace:	4298      	cmp	r0, r3
 8025ad0:	d802      	bhi.n	8025ad8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8025ad2:	4630      	mov	r0, r6
 8025ad4:	f7ef fa2c 	bl	8014f30 <_ZN8touchgfx7Outline6moveToEii>
 8025ad8:	2301      	movs	r3, #1
 8025ada:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8025ade:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8025ae2:	4630      	mov	r0, r6
 8025ae4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8025ae8:	e7d4      	b.n	8025a94 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8025aea:	4630      	mov	r0, r6
 8025aec:	f7ff fd3a 	bl	8025564 <_ZN8touchgfx10Rasterizer6lineToEii>
 8025af0:	e7f7      	b.n	8025ae2 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8025af2:	461d      	mov	r5, r3
 8025af4:	e7d0      	b.n	8025a98 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08025af8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8025af8:	b538      	push	{r3, r4, r5, lr}
 8025afa:	ed2d 8b10 	vpush	{d8-d15}
 8025afe:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8025b02:	4605      	mov	r5, r0
 8025b04:	eeb0 ca40 	vmov.f32	s24, s0
 8025b08:	460c      	mov	r4, r1
 8025b0a:	eef0 ca60 	vmov.f32	s25, s1
 8025b0e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8025c6c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8025b12:	eeb0 da41 	vmov.f32	s26, s2
 8025b16:	eef0 da61 	vmov.f32	s27, s3
 8025b1a:	eeb0 ea42 	vmov.f32	s28, s4
 8025b1e:	eef0 ea62 	vmov.f32	s29, s5
 8025b22:	eef0 aa6b 	vmov.f32	s21, s23
 8025b26:	2c08      	cmp	r4, #8
 8025b28:	d86e      	bhi.n	8025c08 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8025b2a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8025b2e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8025b32:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8025b36:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8025b3a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8025b3e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8025b42:	ee7c faad 	vadd.f32	s31, s25, s27
 8025b46:	eee6 7a07 	vfma.f32	s15, s12, s14
 8025b4a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8025b4e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8025b52:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8025b56:	ee6f faab 	vmul.f32	s31, s31, s23
 8025b5a:	ee69 9aab 	vmul.f32	s19, s19, s23
 8025b5e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8025b62:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8025b66:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8025b6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b6e:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8025b72:	ee68 8aab 	vmul.f32	s17, s17, s23
 8025b76:	bf48      	it	mi
 8025b78:	eef1 7a67 	vnegmi.f32	s15, s15
 8025b7c:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8025b80:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8025b84:	eef4 7acb 	vcmpe.f32	s15, s22
 8025b88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025b8c:	dd3f      	ble.n	8025c0e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8025b8e:	ee27 7a07 	vmul.f32	s14, s14, s14
 8025b92:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025b96:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8025b9a:	ee27 7a06 	vmul.f32	s14, s14, s12
 8025b9e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8025ba2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ba6:	d847      	bhi.n	8025c38 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8025ba8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8025bac:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8025bb0:	f000 fa57 	bl	8026062 <atan2f>
 8025bb4:	eeb0 8a40 	vmov.f32	s16, s0
 8025bb8:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8025bbc:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8025bc0:	f000 fa4f 	bl	8026062 <atan2f>
 8025bc4:	ee38 0a40 	vsub.f32	s0, s16, s0
 8025bc8:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8025c70 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8025bcc:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025bd0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bd4:	bf48      	it	mi
 8025bd6:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025bda:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025bde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025be2:	bfa4      	itt	ge
 8025be4:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8025c74 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8025be8:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025bec:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8025c78 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8025bf0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025bf4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025bf8:	d51e      	bpl.n	8025c38 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8025bfa:	eef0 0a49 	vmov.f32	s1, s18
 8025bfe:	4628      	mov	r0, r5
 8025c00:	eeb0 0a68 	vmov.f32	s0, s17
 8025c04:	f7eb ff0c 	bl	8011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025c08:	ecbd 8b10 	vpop	{d8-d15}
 8025c0c:	bd38      	pop	{r3, r4, r5, pc}
 8025c0e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8025c12:	eeb0 7a68 	vmov.f32	s14, s17
 8025c16:	eef0 6a49 	vmov.f32	s13, s18
 8025c1a:	eea7 7aea 	vfms.f32	s14, s15, s21
 8025c1e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8025c22:	eee7 6aea 	vfms.f32	s13, s15, s21
 8025c26:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8025c2a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8025c2e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8025c32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025c36:	d9e0      	bls.n	8025bfa <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8025c38:	3401      	adds	r4, #1
 8025c3a:	eef0 0a6c 	vmov.f32	s1, s25
 8025c3e:	eeb0 0a4c 	vmov.f32	s0, s24
 8025c42:	4628      	mov	r0, r5
 8025c44:	4621      	mov	r1, r4
 8025c46:	eef0 2a49 	vmov.f32	s5, s18
 8025c4a:	eeb0 2a68 	vmov.f32	s4, s17
 8025c4e:	eef0 1a6f 	vmov.f32	s3, s31
 8025c52:	eeb0 1a4f 	vmov.f32	s2, s30
 8025c56:	f7ff ff4f 	bl	8025af8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8025c5a:	eef0 da4a 	vmov.f32	s27, s20
 8025c5e:	eeb0 da69 	vmov.f32	s26, s19
 8025c62:	eef0 ca49 	vmov.f32	s25, s18
 8025c66:	eeb0 ca68 	vmov.f32	s24, s17
 8025c6a:	e75c      	b.n	8025b26 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8025c6c:	2edbe6ff 	.word	0x2edbe6ff
 8025c70:	40490fdb 	.word	0x40490fdb
 8025c74:	40c90fdb 	.word	0x40c90fdb
 8025c78:	3dcccccd 	.word	0x3dcccccd

08025c7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8025c7c:	b530      	push	{r4, r5, lr}
 8025c7e:	ed2d 8b10 	vpush	{d8-d15}
 8025c82:	eef0 8a40 	vmov.f32	s17, s0
 8025c86:	b085      	sub	sp, #20
 8025c88:	eef0 9a60 	vmov.f32	s19, s1
 8025c8c:	4604      	mov	r4, r0
 8025c8e:	eef0 fa41 	vmov.f32	s31, s2
 8025c92:	460d      	mov	r5, r1
 8025c94:	eeb0 fa61 	vmov.f32	s30, s3
 8025c98:	eef0 ba42 	vmov.f32	s23, s4
 8025c9c:	eeb0 ca62 	vmov.f32	s24, s5
 8025ca0:	eef0 aa43 	vmov.f32	s21, s6
 8025ca4:	eeb0 ba63 	vmov.f32	s22, s7
 8025ca8:	2d08      	cmp	r5, #8
 8025caa:	f200 8113 	bhi.w	8025ed4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8025cae:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8025cb2:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8025cb6:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8025cba:	ee38 daaf 	vadd.f32	s26, s17, s31
 8025cbe:	ee26 6a27 	vmul.f32	s12, s12, s15
 8025cc2:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8025cc6:	ee2d da27 	vmul.f32	s26, s26, s15
 8025cca:	ed8d 6a01 	vstr	s12, [sp, #4]
 8025cce:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8025cd2:	ee6c caa7 	vmul.f32	s25, s25, s15
 8025cd6:	eeb0 ea4d 	vmov.f32	s28, s26
 8025cda:	ee79 da8f 	vadd.f32	s27, s19, s30
 8025cde:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8025ce2:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8025ce6:	ee66 6a27 	vmul.f32	s13, s12, s15
 8025cea:	ee6d daa7 	vmul.f32	s27, s27, s15
 8025cee:	edcd 6a03 	vstr	s13, [sp, #12]
 8025cf2:	eef0 6a6c 	vmov.f32	s13, s25
 8025cf6:	eef0 ea6d 	vmov.f32	s29, s27
 8025cfa:	ee2e ea27 	vmul.f32	s28, s28, s15
 8025cfe:	eee7 6a27 	vfma.f32	s13, s14, s15
 8025d02:	eee7 ea27 	vfma.f32	s29, s14, s15
 8025d06:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8025d0a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8025d0e:	eef0 6a67 	vmov.f32	s13, s15
 8025d12:	ed8d 7a02 	vstr	s14, [sp, #8]
 8025d16:	ed9d 7a03 	vldr	s14, [sp, #12]
 8025d1a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8025d1e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8025d22:	ee3e aa87 	vadd.f32	s20, s29, s14
 8025d26:	ee29 9a27 	vmul.f32	s18, s18, s15
 8025d2a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8025d2e:	2d00      	cmp	r5, #0
 8025d30:	f000 810b 	beq.w	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025d34:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8025d38:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8025f90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8025d3c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8025d40:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8025d44:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8025d48:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8025d4c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8025d50:	eea6 7a27 	vfma.f32	s14, s12, s15
 8025d54:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8025d58:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8025d5c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8025d60:	eea5 6a27 	vfma.f32	s12, s10, s15
 8025d64:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8025d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d6c:	bf48      	it	mi
 8025d6e:	eeb1 7a47 	vnegmi.f32	s14, s14
 8025d72:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8025d76:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d7a:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8025d7e:	bf48      	it	mi
 8025d80:	eeb1 6a46 	vnegmi.f32	s12, s12
 8025d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d88:	f340 80a8 	ble.w	8025edc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8025d8c:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8025d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025d94:	dd5a      	ble.n	8025e4c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8025d96:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8025d9a:	ee37 7a06 	vadd.f32	s14, s14, s12
 8025d9e:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8025da2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8025da6:	ee65 7a85 	vmul.f32	s15, s11, s10
 8025daa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025dae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025db2:	f200 80ca 	bhi.w	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025db6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025dba:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025dbe:	f000 f950 	bl	8026062 <atan2f>
 8025dc2:	eeb0 8a40 	vmov.f32	s16, s0
 8025dc6:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8025dca:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8025dce:	f000 f948 	bl	8026062 <atan2f>
 8025dd2:	ee38 fa40 	vsub.f32	s30, s16, s0
 8025dd6:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025dda:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025dde:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8025de2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025de6:	bf48      	it	mi
 8025de8:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8025dec:	f000 f939 	bl	8026062 <atan2f>
 8025df0:	ee30 0a48 	vsub.f32	s0, s0, s16
 8025df4:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8025f94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025df8:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025dfc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e00:	eeb4 fae7 	vcmpe.f32	s30, s15
 8025e04:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8025f94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025e08:	bf48      	it	mi
 8025e0a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025e0e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e12:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025e16:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8025f98 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025e1a:	bfa4      	itt	ge
 8025e1c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8025f9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025e20:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8025e24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e28:	bfa4      	itt	ge
 8025e2a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8025f9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025e2e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8025e32:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8025e36:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025e3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e3e:	f140 8084 	bpl.w	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025e42:	eef0 0a4a 	vmov.f32	s1, s20
 8025e46:	eeb0 0a49 	vmov.f32	s0, s18
 8025e4a:	e040      	b.n	8025ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8025e4c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025e50:	ee27 7a07 	vmul.f32	s14, s14, s14
 8025e54:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8025e58:	ee67 7a85 	vmul.f32	s15, s15, s10
 8025e5c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025e60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e64:	d871      	bhi.n	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025e66:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025e6a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025e6e:	f000 f8f8 	bl	8026062 <atan2f>
 8025e72:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8025e76:	eeb0 8a40 	vmov.f32	s16, s0
 8025e7a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8025e7e:	f000 f8f0 	bl	8026062 <atan2f>
 8025e82:	ee38 0a40 	vsub.f32	s0, s16, s0
 8025e86:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8025f94 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8025e8a:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8025e8e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025e92:	bf48      	it	mi
 8025e94:	eeb1 0a40 	vnegmi.f32	s0, s0
 8025e98:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ea0:	bfa4      	itt	ge
 8025ea2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8025f9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8025ea6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8025eaa:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8025f98 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8025eae:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8025eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025eb6:	d548      	bpl.n	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025eb8:	eef0 0a4f 	vmov.f32	s1, s30
 8025ebc:	4620      	mov	r0, r4
 8025ebe:	eeb0 0a6f 	vmov.f32	s0, s31
 8025ec2:	f7eb fdad 	bl	8011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025ec6:	eef0 0a4c 	vmov.f32	s1, s24
 8025eca:	eeb0 0a6b 	vmov.f32	s0, s23
 8025ece:	4620      	mov	r0, r4
 8025ed0:	f7eb fda6 	bl	8011a20 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8025ed4:	b005      	add	sp, #20
 8025ed6:	ecbd 8b10 	vpop	{d8-d15}
 8025eda:	bd30      	pop	{r4, r5, pc}
 8025edc:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8025f90 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8025ee0:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8025ee4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025ee8:	dd19      	ble.n	8025f1e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8025eea:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8025eee:	ee26 7a06 	vmul.f32	s14, s12, s12
 8025ef2:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8025ef6:	ee67 7a85 	vmul.f32	s15, s15, s10
 8025efa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8025efe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f02:	d822      	bhi.n	8025f4a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8025f04:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8025f08:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8025f0c:	f000 f8a9 	bl	8026062 <atan2f>
 8025f10:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8025f14:	eeb0 8a40 	vmov.f32	s16, s0
 8025f18:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8025f1c:	e7af      	b.n	8025e7e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8025f1e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8025f22:	eeb0 7a49 	vmov.f32	s14, s18
 8025f26:	eeb0 6a4a 	vmov.f32	s12, s20
 8025f2a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8025f2e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8025f32:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8025f36:	ee66 7a06 	vmul.f32	s15, s12, s12
 8025f3a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8025f3e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8025f42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8025f46:	f67f af7c 	bls.w	8025e42 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8025f4a:	3501      	adds	r5, #1
 8025f4c:	eef0 0a69 	vmov.f32	s1, s19
 8025f50:	eeb0 0a68 	vmov.f32	s0, s17
 8025f54:	4620      	mov	r0, r4
 8025f56:	4629      	mov	r1, r5
 8025f58:	eef0 3a4a 	vmov.f32	s7, s20
 8025f5c:	eeb0 3a49 	vmov.f32	s6, s18
 8025f60:	eef0 2a6e 	vmov.f32	s5, s29
 8025f64:	eeb0 2a4e 	vmov.f32	s4, s28
 8025f68:	eef0 1a6d 	vmov.f32	s3, s27
 8025f6c:	eeb0 1a4d 	vmov.f32	s2, s26
 8025f70:	f7ff fe84 	bl	8025c7c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8025f74:	eeb0 ca6c 	vmov.f32	s24, s25
 8025f78:	eddd ba01 	vldr	s23, [sp, #4]
 8025f7c:	eef0 9a4a 	vmov.f32	s19, s20
 8025f80:	ed9d fa02 	vldr	s30, [sp, #8]
 8025f84:	eef0 8a49 	vmov.f32	s17, s18
 8025f88:	eddd fa03 	vldr	s31, [sp, #12]
 8025f8c:	e68c      	b.n	8025ca8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8025f8e:	bf00      	nop
 8025f90:	2edbe6ff 	.word	0x2edbe6ff
 8025f94:	40490fdb 	.word	0x40490fdb
 8025f98:	3dcccccd 	.word	0x3dcccccd
 8025f9c:	40c90fdb 	.word	0x40c90fdb

08025fa0 <_ZN8touchgfx6CanvasD1Ev>:
 8025fa0:	4b04      	ldr	r3, [pc, #16]	@ (8025fb4 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8025fa2:	b510      	push	{r4, lr}
 8025fa4:	4604      	mov	r4, r0
 8025fa6:	f840 3b14 	str.w	r3, [r0], #20
 8025faa:	f7ee faca 	bl	8014542 <_ZN8touchgfx7OutlineD1Ev>
 8025fae:	4620      	mov	r0, r4
 8025fb0:	bd10      	pop	{r4, pc}
 8025fb2:	bf00      	nop
 8025fb4:	0802b700 	.word	0x0802b700

08025fb8 <_ZN8touchgfx6CanvasD0Ev>:
 8025fb8:	b510      	push	{r4, lr}
 8025fba:	4604      	mov	r4, r0
 8025fbc:	f7ff fff0 	bl	8025fa0 <_ZN8touchgfx6CanvasD1Ev>
 8025fc0:	2174      	movs	r1, #116	@ 0x74
 8025fc2:	4620      	mov	r0, r4
 8025fc4:	f000 f826 	bl	8026014 <_ZdlPvj>
 8025fc8:	4620      	mov	r0, r4
 8025fca:	bd10      	pop	{r4, pc}

08025fcc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE>:
 8025fcc:	790b      	ldrb	r3, [r1, #4]
 8025fce:	2b00      	cmp	r3, #0
 8025fd0:	bf0c      	ite	eq
 8025fd2:	2301      	moveq	r3, #1
 8025fd4:	2300      	movne	r3, #0
 8025fd6:	b570      	push	{r4, r5, r6, lr}
 8025fd8:	4604      	mov	r4, r0
 8025fda:	f890 502c 	ldrb.w	r5, [r0, #44]	@ 0x2c
 8025fde:	460e      	mov	r6, r1
 8025fe0:	f880 302c 	strb.w	r3, [r0, #44]	@ 0x2c
 8025fe4:	d109      	bne.n	8025ffa <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x2e>
 8025fe6:	b14d      	cbz	r5, 8025ffc <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x30>
 8025fe8:	7933      	ldrb	r3, [r6, #4]
 8025fea:	2b01      	cmp	r3, #1
 8025fec:	d10c      	bne.n	8026008 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025fee:	6823      	ldr	r3, [r4, #0]
 8025ff0:	4620      	mov	r0, r4
 8025ff2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8025ff4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8025ff8:	4718      	bx	r3
 8025ffa:	b12d      	cbz	r5, 8026008 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x3c>
 8025ffc:	6823      	ldr	r3, [r4, #0]
 8025ffe:	4620      	mov	r0, r4
 8026000:	695b      	ldr	r3, [r3, #20]
 8026002:	4798      	blx	r3
 8026004:	2d00      	cmp	r5, #0
 8026006:	d1ef      	bne.n	8025fe8 <_ZN8touchgfx14AbstractButton16handleClickEventERKNS_10ClickEventE+0x1c>
 8026008:	bd70      	pop	{r4, r5, r6, pc}

0802600a <__aeabi_atexit>:
 802600a:	460b      	mov	r3, r1
 802600c:	4601      	mov	r1, r0
 802600e:	4618      	mov	r0, r3
 8026010:	f000 bc58 	b.w	80268c4 <__cxa_atexit>

08026014 <_ZdlPvj>:
 8026014:	f000 b812 	b.w	802603c <_ZdlPv>

08026018 <__cxa_guard_acquire>:
 8026018:	6802      	ldr	r2, [r0, #0]
 802601a:	07d2      	lsls	r2, r2, #31
 802601c:	4603      	mov	r3, r0
 802601e:	d405      	bmi.n	802602c <__cxa_guard_acquire+0x14>
 8026020:	7842      	ldrb	r2, [r0, #1]
 8026022:	b102      	cbz	r2, 8026026 <__cxa_guard_acquire+0xe>
 8026024:	deff      	udf	#255	@ 0xff
 8026026:	2001      	movs	r0, #1
 8026028:	7058      	strb	r0, [r3, #1]
 802602a:	4770      	bx	lr
 802602c:	2000      	movs	r0, #0
 802602e:	4770      	bx	lr

08026030 <__cxa_guard_release>:
 8026030:	2301      	movs	r3, #1
 8026032:	6003      	str	r3, [r0, #0]
 8026034:	4770      	bx	lr

08026036 <__cxa_pure_virtual>:
 8026036:	b508      	push	{r3, lr}
 8026038:	f000 f80e 	bl	8026058 <_ZSt9terminatev>

0802603c <_ZdlPv>:
 802603c:	f000 bb8c 	b.w	8026758 <free>

08026040 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8026040:	b508      	push	{r3, lr}
 8026042:	4780      	blx	r0
 8026044:	f000 fb55 	bl	80266f2 <abort>

08026048 <_ZSt13get_terminatev>:
 8026048:	4b02      	ldr	r3, [pc, #8]	@ (8026054 <_ZSt13get_terminatev+0xc>)
 802604a:	6818      	ldr	r0, [r3, #0]
 802604c:	f3bf 8f5b 	dmb	ish
 8026050:	4770      	bx	lr
 8026052:	bf00      	nop
 8026054:	24000108 	.word	0x24000108

08026058 <_ZSt9terminatev>:
 8026058:	b508      	push	{r3, lr}
 802605a:	f7ff fff5 	bl	8026048 <_ZSt13get_terminatev>
 802605e:	f7ff ffef 	bl	8026040 <_ZN10__cxxabiv111__terminateEPFvvE>

08026062 <atan2f>:
 8026062:	f000 b9cd 	b.w	8026400 <__ieee754_atan2f>
	...

08026068 <sqrtf>:
 8026068:	b508      	push	{r3, lr}
 802606a:	ed2d 8b02 	vpush	{d8}
 802606e:	eeb0 8a40 	vmov.f32	s16, s0
 8026072:	f000 f9c2 	bl	80263fa <__ieee754_sqrtf>
 8026076:	eeb4 8a48 	vcmp.f32	s16, s16
 802607a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802607e:	d60c      	bvs.n	802609a <sqrtf+0x32>
 8026080:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80260a0 <sqrtf+0x38>
 8026084:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8026088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802608c:	d505      	bpl.n	802609a <sqrtf+0x32>
 802608e:	f000 ff25 	bl	8026edc <__errno>
 8026092:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8026096:	2321      	movs	r3, #33	@ 0x21
 8026098:	6003      	str	r3, [r0, #0]
 802609a:	ecbd 8b02 	vpop	{d8}
 802609e:	bd08      	pop	{r3, pc}
 80260a0:	00000000 	.word	0x00000000

080260a4 <sinf_poly>:
 80260a4:	07cb      	lsls	r3, r1, #31
 80260a6:	d412      	bmi.n	80260ce <sinf_poly+0x2a>
 80260a8:	ee21 5b00 	vmul.f64	d5, d1, d0
 80260ac:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80260b0:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80260b4:	eea6 7b01 	vfma.f64	d7, d6, d1
 80260b8:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80260bc:	ee21 1b05 	vmul.f64	d1, d1, d5
 80260c0:	eea6 0b05 	vfma.f64	d0, d6, d5
 80260c4:	eea7 0b01 	vfma.f64	d0, d7, d1
 80260c8:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80260cc:	4770      	bx	lr
 80260ce:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80260d2:	ee21 5b01 	vmul.f64	d5, d1, d1
 80260d6:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80260da:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80260de:	eea1 7b06 	vfma.f64	d7, d1, d6
 80260e2:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80260e6:	eea1 0b06 	vfma.f64	d0, d1, d6
 80260ea:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80260ee:	ee21 1b05 	vmul.f64	d1, d1, d5
 80260f2:	eea5 0b06 	vfma.f64	d0, d5, d6
 80260f6:	e7e5      	b.n	80260c4 <sinf_poly+0x20>

080260f8 <sinf>:
 80260f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80260fa:	ee10 4a10 	vmov	r4, s0
 80260fe:	f3c4 530a 	ubfx	r3, r4, #20, #11
 8026102:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 8026106:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 802610a:	eef0 7a40 	vmov.f32	s15, s0
 802610e:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8026112:	d218      	bcs.n	8026146 <sinf+0x4e>
 8026114:	ee26 1b06 	vmul.f64	d1, d6, d6
 8026118:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802611c:	d20a      	bcs.n	8026134 <sinf+0x3c>
 802611e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8026122:	d103      	bne.n	802612c <sinf+0x34>
 8026124:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8026128:	ed8d 1a01 	vstr	s2, [sp, #4]
 802612c:	eeb0 0a67 	vmov.f32	s0, s15
 8026130:	b003      	add	sp, #12
 8026132:	bd30      	pop	{r4, r5, pc}
 8026134:	483a      	ldr	r0, [pc, #232]	@ (8026220 <sinf+0x128>)
 8026136:	eeb0 0b46 	vmov.f64	d0, d6
 802613a:	2100      	movs	r1, #0
 802613c:	b003      	add	sp, #12
 802613e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026142:	f7ff bfaf 	b.w	80260a4 <sinf_poly>
 8026146:	f240 422e 	movw	r2, #1070	@ 0x42e
 802614a:	4293      	cmp	r3, r2
 802614c:	d824      	bhi.n	8026198 <sinf+0xa0>
 802614e:	4b34      	ldr	r3, [pc, #208]	@ (8026220 <sinf+0x128>)
 8026150:	ed93 7b08 	vldr	d7, [r3, #32]
 8026154:	ee26 7b07 	vmul.f64	d7, d6, d7
 8026158:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802615c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026160:	ee17 1a90 	vmov	r1, s15
 8026164:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8026168:	1609      	asrs	r1, r1, #24
 802616a:	ee07 1a90 	vmov	s15, r1
 802616e:	f001 0203 	and.w	r2, r1, #3
 8026172:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026176:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802617a:	ed92 0b00 	vldr	d0, [r2]
 802617e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8026182:	f011 0f02 	tst.w	r1, #2
 8026186:	eea5 6b47 	vfms.f64	d6, d5, d7
 802618a:	bf08      	it	eq
 802618c:	4618      	moveq	r0, r3
 802618e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8026192:	ee20 0b06 	vmul.f64	d0, d0, d6
 8026196:	e7d1      	b.n	802613c <sinf+0x44>
 8026198:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802619c:	d237      	bcs.n	802620e <sinf+0x116>
 802619e:	4921      	ldr	r1, [pc, #132]	@ (8026224 <sinf+0x12c>)
 80261a0:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80261a4:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80261a8:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80261ac:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80261b0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80261b4:	6a10      	ldr	r0, [r2, #32]
 80261b6:	6912      	ldr	r2, [r2, #16]
 80261b8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80261bc:	40ab      	lsls	r3, r5
 80261be:	fba0 5003 	umull	r5, r0, r0, r3
 80261c2:	4359      	muls	r1, r3
 80261c4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80261c8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80261cc:	0f9d      	lsrs	r5, r3, #30
 80261ce:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80261d2:	1ac9      	subs	r1, r1, r3
 80261d4:	f7da fa6a 	bl	80006ac <__aeabi_l2d>
 80261d8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80261dc:	4b10      	ldr	r3, [pc, #64]	@ (8026220 <sinf+0x128>)
 80261de:	f004 0203 	and.w	r2, r4, #3
 80261e2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80261e6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8026218 <sinf+0x120>
 80261ea:	ed92 0b00 	vldr	d0, [r2]
 80261ee:	ec41 0b17 	vmov	d7, r0, r1
 80261f2:	f014 0f02 	tst.w	r4, #2
 80261f6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80261fa:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80261fe:	4629      	mov	r1, r5
 8026200:	bf08      	it	eq
 8026202:	4618      	moveq	r0, r3
 8026204:	ee27 1b07 	vmul.f64	d1, d7, d7
 8026208:	ee20 0b07 	vmul.f64	d0, d0, d7
 802620c:	e796      	b.n	802613c <sinf+0x44>
 802620e:	b003      	add	sp, #12
 8026210:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026214:	f000 b8e2 	b.w	80263dc <__math_invalidf>
 8026218:	54442d18 	.word	0x54442d18
 802621c:	3c1921fb 	.word	0x3c1921fb
 8026220:	0802b770 	.word	0x0802b770
 8026224:	0802b70c 	.word	0x0802b70c

08026228 <sinf_poly>:
 8026228:	07cb      	lsls	r3, r1, #31
 802622a:	d412      	bmi.n	8026252 <sinf_poly+0x2a>
 802622c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8026230:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8026234:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8026238:	eea6 7b01 	vfma.f64	d7, d6, d1
 802623c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8026240:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026244:	eea6 0b05 	vfma.f64	d0, d6, d5
 8026248:	eea7 0b01 	vfma.f64	d0, d7, d1
 802624c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8026250:	4770      	bx	lr
 8026252:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8026256:	ee21 5b01 	vmul.f64	d5, d1, d1
 802625a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802625e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8026262:	eea1 7b06 	vfma.f64	d7, d1, d6
 8026266:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802626a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802626e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8026272:	ee21 1b05 	vmul.f64	d1, d1, d5
 8026276:	eea5 0b06 	vfma.f64	d0, d5, d6
 802627a:	e7e5      	b.n	8026248 <sinf_poly+0x20>
 802627c:	0000      	movs	r0, r0
	...

08026280 <cosf>:
 8026280:	b538      	push	{r3, r4, r5, lr}
 8026282:	ee10 4a10 	vmov	r4, s0
 8026286:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802628a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802628e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8026292:	d21f      	bcs.n	80262d4 <cosf+0x54>
 8026294:	ee27 7b07 	vmul.f64	d7, d7, d7
 8026298:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802629c:	f0c0 8082 	bcc.w	80263a4 <cosf+0x124>
 80262a0:	ee27 4b07 	vmul.f64	d4, d7, d7
 80262a4:	4b44      	ldr	r3, [pc, #272]	@ (80263b8 <cosf+0x138>)
 80262a6:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80262aa:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80262ae:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80262b2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80262b6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80262ba:	eea7 0b05 	vfma.f64	d0, d7, d5
 80262be:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80262c2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80262c6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80262ca:	eea6 0b07 	vfma.f64	d0, d6, d7
 80262ce:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80262d2:	bd38      	pop	{r3, r4, r5, pc}
 80262d4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80262d8:	4293      	cmp	r3, r2
 80262da:	d829      	bhi.n	8026330 <cosf+0xb0>
 80262dc:	4b36      	ldr	r3, [pc, #216]	@ (80263b8 <cosf+0x138>)
 80262de:	ed93 6b08 	vldr	d6, [r3, #32]
 80262e2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80262e6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80262ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80262ee:	ee16 1a90 	vmov	r1, s13
 80262f2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80262f6:	1609      	asrs	r1, r1, #24
 80262f8:	ee06 1a90 	vmov	s13, r1
 80262fc:	f001 0203 	and.w	r2, r1, #3
 8026300:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026304:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8026308:	ed92 0b00 	vldr	d0, [r2]
 802630c:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8026310:	f011 0f02 	tst.w	r1, #2
 8026314:	f081 0101 	eor.w	r1, r1, #1
 8026318:	eea5 7b46 	vfms.f64	d7, d5, d6
 802631c:	bf08      	it	eq
 802631e:	4618      	moveq	r0, r3
 8026320:	ee27 1b07 	vmul.f64	d1, d7, d7
 8026324:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026328:	ee20 0b07 	vmul.f64	d0, d0, d7
 802632c:	f7ff bf7c 	b.w	8026228 <sinf_poly>
 8026330:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8026334:	d232      	bcs.n	802639c <cosf+0x11c>
 8026336:	4921      	ldr	r1, [pc, #132]	@ (80263bc <cosf+0x13c>)
 8026338:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802633c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8026340:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8026344:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8026348:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802634c:	6a10      	ldr	r0, [r2, #32]
 802634e:	6912      	ldr	r2, [r2, #16]
 8026350:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8026354:	40ab      	lsls	r3, r5
 8026356:	fba0 5003 	umull	r5, r0, r0, r3
 802635a:	4359      	muls	r1, r3
 802635c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8026360:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8026364:	0f9d      	lsrs	r5, r3, #30
 8026366:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802636a:	1ac9      	subs	r1, r1, r3
 802636c:	f7da f99e 	bl	80006ac <__aeabi_l2d>
 8026370:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8026374:	4b10      	ldr	r3, [pc, #64]	@ (80263b8 <cosf+0x138>)
 8026376:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80263b0 <cosf+0x130>
 802637a:	ec41 0b17 	vmov	d7, r0, r1
 802637e:	f004 0203 	and.w	r2, r4, #3
 8026382:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8026386:	ed92 0b00 	vldr	d0, [r2]
 802638a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802638e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8026392:	f014 0f02 	tst.w	r4, #2
 8026396:	f085 0101 	eor.w	r1, r5, #1
 802639a:	e7bf      	b.n	802631c <cosf+0x9c>
 802639c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80263a0:	f000 b81c 	b.w	80263dc <__math_invalidf>
 80263a4:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80263a8:	e793      	b.n	80262d2 <cosf+0x52>
 80263aa:	bf00      	nop
 80263ac:	f3af 8000 	nop.w
 80263b0:	54442d18 	.word	0x54442d18
 80263b4:	3c1921fb 	.word	0x3c1921fb
 80263b8:	0802b770 	.word	0x0802b770
 80263bc:	0802b70c 	.word	0x0802b70c

080263c0 <with_errnof>:
 80263c0:	b510      	push	{r4, lr}
 80263c2:	ed2d 8b02 	vpush	{d8}
 80263c6:	eeb0 8a40 	vmov.f32	s16, s0
 80263ca:	4604      	mov	r4, r0
 80263cc:	f000 fd86 	bl	8026edc <__errno>
 80263d0:	eeb0 0a48 	vmov.f32	s0, s16
 80263d4:	ecbd 8b02 	vpop	{d8}
 80263d8:	6004      	str	r4, [r0, #0]
 80263da:	bd10      	pop	{r4, pc}

080263dc <__math_invalidf>:
 80263dc:	eef0 7a40 	vmov.f32	s15, s0
 80263e0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80263e4:	eef4 7a67 	vcmp.f32	s15, s15
 80263e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263ec:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80263f0:	d602      	bvs.n	80263f8 <__math_invalidf+0x1c>
 80263f2:	2021      	movs	r0, #33	@ 0x21
 80263f4:	f7ff bfe4 	b.w	80263c0 <with_errnof>
 80263f8:	4770      	bx	lr

080263fa <__ieee754_sqrtf>:
 80263fa:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80263fe:	4770      	bx	lr

08026400 <__ieee754_atan2f>:
 8026400:	ee10 2a90 	vmov	r2, s1
 8026404:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8026408:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802640c:	b510      	push	{r4, lr}
 802640e:	eef0 7a40 	vmov.f32	s15, s0
 8026412:	d806      	bhi.n	8026422 <__ieee754_atan2f+0x22>
 8026414:	ee10 0a10 	vmov	r0, s0
 8026418:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802641c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026420:	d904      	bls.n	802642c <__ieee754_atan2f+0x2c>
 8026422:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8026426:	eeb0 0a67 	vmov.f32	s0, s15
 802642a:	bd10      	pop	{r4, pc}
 802642c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8026430:	d103      	bne.n	802643a <__ieee754_atan2f+0x3a>
 8026432:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026436:	f000 b881 	b.w	802653c <atanf>
 802643a:	1794      	asrs	r4, r2, #30
 802643c:	f004 0402 	and.w	r4, r4, #2
 8026440:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8026444:	b93b      	cbnz	r3, 8026456 <__ieee754_atan2f+0x56>
 8026446:	2c02      	cmp	r4, #2
 8026448:	d05c      	beq.n	8026504 <__ieee754_atan2f+0x104>
 802644a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8026518 <__ieee754_atan2f+0x118>
 802644e:	2c03      	cmp	r4, #3
 8026450:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8026454:	e7e7      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026456:	b939      	cbnz	r1, 8026468 <__ieee754_atan2f+0x68>
 8026458:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802651c <__ieee754_atan2f+0x11c>
 802645c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8026520 <__ieee754_atan2f+0x120>
 8026460:	2800      	cmp	r0, #0
 8026462:	fe67 7a87 	vselge.f32	s15, s15, s14
 8026466:	e7de      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026468:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802646c:	d110      	bne.n	8026490 <__ieee754_atan2f+0x90>
 802646e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026472:	f104 34ff 	add.w	r4, r4, #4294967295
 8026476:	d107      	bne.n	8026488 <__ieee754_atan2f+0x88>
 8026478:	2c02      	cmp	r4, #2
 802647a:	d846      	bhi.n	802650a <__ieee754_atan2f+0x10a>
 802647c:	4b29      	ldr	r3, [pc, #164]	@ (8026524 <__ieee754_atan2f+0x124>)
 802647e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8026482:	edd3 7a00 	vldr	s15, [r3]
 8026486:	e7ce      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026488:	2c02      	cmp	r4, #2
 802648a:	d841      	bhi.n	8026510 <__ieee754_atan2f+0x110>
 802648c:	4b26      	ldr	r3, [pc, #152]	@ (8026528 <__ieee754_atan2f+0x128>)
 802648e:	e7f6      	b.n	802647e <__ieee754_atan2f+0x7e>
 8026490:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8026494:	d0e0      	beq.n	8026458 <__ieee754_atan2f+0x58>
 8026496:	1a5b      	subs	r3, r3, r1
 8026498:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802649c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80264a0:	da1a      	bge.n	80264d8 <__ieee754_atan2f+0xd8>
 80264a2:	2a00      	cmp	r2, #0
 80264a4:	da01      	bge.n	80264aa <__ieee754_atan2f+0xaa>
 80264a6:	313c      	adds	r1, #60	@ 0x3c
 80264a8:	db19      	blt.n	80264de <__ieee754_atan2f+0xde>
 80264aa:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80264ae:	f000 f919 	bl	80266e4 <fabsf>
 80264b2:	f000 f843 	bl	802653c <atanf>
 80264b6:	eef0 7a40 	vmov.f32	s15, s0
 80264ba:	2c01      	cmp	r4, #1
 80264bc:	d012      	beq.n	80264e4 <__ieee754_atan2f+0xe4>
 80264be:	2c02      	cmp	r4, #2
 80264c0:	d017      	beq.n	80264f2 <__ieee754_atan2f+0xf2>
 80264c2:	2c00      	cmp	r4, #0
 80264c4:	d0af      	beq.n	8026426 <__ieee754_atan2f+0x26>
 80264c6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802652c <__ieee754_atan2f+0x12c>
 80264ca:	ee77 7a87 	vadd.f32	s15, s15, s14
 80264ce:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8026530 <__ieee754_atan2f+0x130>
 80264d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80264d6:	e7a6      	b.n	8026426 <__ieee754_atan2f+0x26>
 80264d8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802651c <__ieee754_atan2f+0x11c>
 80264dc:	e7ed      	b.n	80264ba <__ieee754_atan2f+0xba>
 80264de:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8026534 <__ieee754_atan2f+0x134>
 80264e2:	e7ea      	b.n	80264ba <__ieee754_atan2f+0xba>
 80264e4:	ee17 3a90 	vmov	r3, s15
 80264e8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80264ec:	ee07 3a90 	vmov	s15, r3
 80264f0:	e799      	b.n	8026426 <__ieee754_atan2f+0x26>
 80264f2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802652c <__ieee754_atan2f+0x12c>
 80264f6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80264fa:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8026530 <__ieee754_atan2f+0x130>
 80264fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8026502:	e790      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026504:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8026530 <__ieee754_atan2f+0x130>
 8026508:	e78d      	b.n	8026426 <__ieee754_atan2f+0x26>
 802650a:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8026538 <__ieee754_atan2f+0x138>
 802650e:	e78a      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026510:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8026534 <__ieee754_atan2f+0x134>
 8026514:	e787      	b.n	8026426 <__ieee754_atan2f+0x26>
 8026516:	bf00      	nop
 8026518:	c0490fdb 	.word	0xc0490fdb
 802651c:	3fc90fdb 	.word	0x3fc90fdb
 8026520:	bfc90fdb 	.word	0xbfc90fdb
 8026524:	0802b85c 	.word	0x0802b85c
 8026528:	0802b850 	.word	0x0802b850
 802652c:	33bbbd2e 	.word	0x33bbbd2e
 8026530:	40490fdb 	.word	0x40490fdb
 8026534:	00000000 	.word	0x00000000
 8026538:	3f490fdb 	.word	0x3f490fdb

0802653c <atanf>:
 802653c:	b538      	push	{r3, r4, r5, lr}
 802653e:	ee10 5a10 	vmov	r5, s0
 8026542:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8026546:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802654a:	eef0 7a40 	vmov.f32	s15, s0
 802654e:	d30f      	bcc.n	8026570 <atanf+0x34>
 8026550:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8026554:	d904      	bls.n	8026560 <atanf+0x24>
 8026556:	ee70 7a00 	vadd.f32	s15, s0, s0
 802655a:	eeb0 0a67 	vmov.f32	s0, s15
 802655e:	bd38      	pop	{r3, r4, r5, pc}
 8026560:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8026698 <atanf+0x15c>
 8026564:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802669c <atanf+0x160>
 8026568:	2d00      	cmp	r5, #0
 802656a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802656e:	e7f4      	b.n	802655a <atanf+0x1e>
 8026570:	4b4b      	ldr	r3, [pc, #300]	@ (80266a0 <atanf+0x164>)
 8026572:	429c      	cmp	r4, r3
 8026574:	d810      	bhi.n	8026598 <atanf+0x5c>
 8026576:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802657a:	d20a      	bcs.n	8026592 <atanf+0x56>
 802657c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80266a4 <atanf+0x168>
 8026580:	ee30 7a07 	vadd.f32	s14, s0, s14
 8026584:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8026588:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802658c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026590:	dce3      	bgt.n	802655a <atanf+0x1e>
 8026592:	f04f 33ff 	mov.w	r3, #4294967295
 8026596:	e013      	b.n	80265c0 <atanf+0x84>
 8026598:	f000 f8a4 	bl	80266e4 <fabsf>
 802659c:	4b42      	ldr	r3, [pc, #264]	@ (80266a8 <atanf+0x16c>)
 802659e:	429c      	cmp	r4, r3
 80265a0:	d84f      	bhi.n	8026642 <atanf+0x106>
 80265a2:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80265a6:	429c      	cmp	r4, r3
 80265a8:	d841      	bhi.n	802662e <atanf+0xf2>
 80265aa:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80265ae:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80265b2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80265b6:	2300      	movs	r3, #0
 80265b8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80265bc:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80265c0:	1c5a      	adds	r2, r3, #1
 80265c2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80265c6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80266ac <atanf+0x170>
 80265ca:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80266b0 <atanf+0x174>
 80265ce:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80266b4 <atanf+0x178>
 80265d2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80265d6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80265da:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80266b8 <atanf+0x17c>
 80265de:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80265e2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80266bc <atanf+0x180>
 80265e6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80265ea:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80266c0 <atanf+0x184>
 80265ee:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80265f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80266c4 <atanf+0x188>
 80265f6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80265fa:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80266c8 <atanf+0x18c>
 80265fe:	eea6 5a87 	vfma.f32	s10, s13, s14
 8026602:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80266cc <atanf+0x190>
 8026606:	eea5 7a26 	vfma.f32	s14, s10, s13
 802660a:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80266d0 <atanf+0x194>
 802660e:	eea7 5a26 	vfma.f32	s10, s14, s13
 8026612:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80266d4 <atanf+0x198>
 8026616:	eea5 7a26 	vfma.f32	s14, s10, s13
 802661a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802661e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8026622:	ee27 7a87 	vmul.f32	s14, s15, s14
 8026626:	d121      	bne.n	802666c <atanf+0x130>
 8026628:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802662c:	e795      	b.n	802655a <atanf+0x1e>
 802662e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8026632:	ee30 7a67 	vsub.f32	s14, s0, s15
 8026636:	ee30 0a27 	vadd.f32	s0, s0, s15
 802663a:	2301      	movs	r3, #1
 802663c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026640:	e7be      	b.n	80265c0 <atanf+0x84>
 8026642:	4b25      	ldr	r3, [pc, #148]	@ (80266d8 <atanf+0x19c>)
 8026644:	429c      	cmp	r4, r3
 8026646:	d80b      	bhi.n	8026660 <atanf+0x124>
 8026648:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802664c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8026650:	eea0 7a27 	vfma.f32	s14, s0, s15
 8026654:	2302      	movs	r3, #2
 8026656:	ee70 6a67 	vsub.f32	s13, s0, s15
 802665a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802665e:	e7af      	b.n	80265c0 <atanf+0x84>
 8026660:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8026664:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8026668:	2303      	movs	r3, #3
 802666a:	e7a9      	b.n	80265c0 <atanf+0x84>
 802666c:	4a1b      	ldr	r2, [pc, #108]	@ (80266dc <atanf+0x1a0>)
 802666e:	491c      	ldr	r1, [pc, #112]	@ (80266e0 <atanf+0x1a4>)
 8026670:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8026674:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8026678:	edd3 6a00 	vldr	s13, [r3]
 802667c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8026680:	2d00      	cmp	r5, #0
 8026682:	ee37 7a67 	vsub.f32	s14, s14, s15
 8026686:	edd2 7a00 	vldr	s15, [r2]
 802668a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802668e:	bfb8      	it	lt
 8026690:	eef1 7a67 	vneglt.f32	s15, s15
 8026694:	e761      	b.n	802655a <atanf+0x1e>
 8026696:	bf00      	nop
 8026698:	bfc90fdb 	.word	0xbfc90fdb
 802669c:	3fc90fdb 	.word	0x3fc90fdb
 80266a0:	3edfffff 	.word	0x3edfffff
 80266a4:	7149f2ca 	.word	0x7149f2ca
 80266a8:	3f97ffff 	.word	0x3f97ffff
 80266ac:	3c8569d7 	.word	0x3c8569d7
 80266b0:	3d4bda59 	.word	0x3d4bda59
 80266b4:	bd6ef16b 	.word	0xbd6ef16b
 80266b8:	3d886b35 	.word	0x3d886b35
 80266bc:	3dba2e6e 	.word	0x3dba2e6e
 80266c0:	3e124925 	.word	0x3e124925
 80266c4:	3eaaaaab 	.word	0x3eaaaaab
 80266c8:	bd15a221 	.word	0xbd15a221
 80266cc:	bd9d8795 	.word	0xbd9d8795
 80266d0:	bde38e38 	.word	0xbde38e38
 80266d4:	be4ccccd 	.word	0xbe4ccccd
 80266d8:	401bffff 	.word	0x401bffff
 80266dc:	0802b878 	.word	0x0802b878
 80266e0:	0802b868 	.word	0x0802b868

080266e4 <fabsf>:
 80266e4:	ee10 3a10 	vmov	r3, s0
 80266e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80266ec:	ee00 3a10 	vmov	s0, r3
 80266f0:	4770      	bx	lr

080266f2 <abort>:
 80266f2:	b508      	push	{r3, lr}
 80266f4:	2006      	movs	r0, #6
 80266f6:	f000 fb29 	bl	8026d4c <raise>
 80266fa:	2001      	movs	r0, #1
 80266fc:	f7db f9ec 	bl	8001ad8 <_exit>

08026700 <__assert_func>:
 8026700:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8026702:	4614      	mov	r4, r2
 8026704:	461a      	mov	r2, r3
 8026706:	4b09      	ldr	r3, [pc, #36]	@ (802672c <__assert_func+0x2c>)
 8026708:	681b      	ldr	r3, [r3, #0]
 802670a:	4605      	mov	r5, r0
 802670c:	68d8      	ldr	r0, [r3, #12]
 802670e:	b954      	cbnz	r4, 8026726 <__assert_func+0x26>
 8026710:	4b07      	ldr	r3, [pc, #28]	@ (8026730 <__assert_func+0x30>)
 8026712:	461c      	mov	r4, r3
 8026714:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8026718:	9100      	str	r1, [sp, #0]
 802671a:	462b      	mov	r3, r5
 802671c:	4905      	ldr	r1, [pc, #20]	@ (8026734 <__assert_func+0x34>)
 802671e:	f000 f983 	bl	8026a28 <fiprintf>
 8026722:	f7ff ffe6 	bl	80266f2 <abort>
 8026726:	4b04      	ldr	r3, [pc, #16]	@ (8026738 <__assert_func+0x38>)
 8026728:	e7f4      	b.n	8026714 <__assert_func+0x14>
 802672a:	bf00      	nop
 802672c:	24000118 	.word	0x24000118
 8026730:	0802b8c3 	.word	0x0802b8c3
 8026734:	0802b895 	.word	0x0802b895
 8026738:	0802b888 	.word	0x0802b888

0802673c <atexit>:
 802673c:	2300      	movs	r3, #0
 802673e:	4601      	mov	r1, r0
 8026740:	461a      	mov	r2, r3
 8026742:	4618      	mov	r0, r3
 8026744:	f000 bc06 	b.w	8026f54 <__register_exitproc>

08026748 <malloc>:
 8026748:	4b02      	ldr	r3, [pc, #8]	@ (8026754 <malloc+0xc>)
 802674a:	4601      	mov	r1, r0
 802674c:	6818      	ldr	r0, [r3, #0]
 802674e:	f000 b82d 	b.w	80267ac <_malloc_r>
 8026752:	bf00      	nop
 8026754:	24000118 	.word	0x24000118

08026758 <free>:
 8026758:	4b02      	ldr	r3, [pc, #8]	@ (8026764 <free+0xc>)
 802675a:	4601      	mov	r1, r0
 802675c:	6818      	ldr	r0, [r3, #0]
 802675e:	f000 bc55 	b.w	802700c <_free_r>
 8026762:	bf00      	nop
 8026764:	24000118 	.word	0x24000118

08026768 <sbrk_aligned>:
 8026768:	b570      	push	{r4, r5, r6, lr}
 802676a:	4e0f      	ldr	r6, [pc, #60]	@ (80267a8 <sbrk_aligned+0x40>)
 802676c:	460c      	mov	r4, r1
 802676e:	6831      	ldr	r1, [r6, #0]
 8026770:	4605      	mov	r5, r0
 8026772:	b911      	cbnz	r1, 802677a <sbrk_aligned+0x12>
 8026774:	f000 fb90 	bl	8026e98 <_sbrk_r>
 8026778:	6030      	str	r0, [r6, #0]
 802677a:	4621      	mov	r1, r4
 802677c:	4628      	mov	r0, r5
 802677e:	f000 fb8b 	bl	8026e98 <_sbrk_r>
 8026782:	1c43      	adds	r3, r0, #1
 8026784:	d103      	bne.n	802678e <sbrk_aligned+0x26>
 8026786:	f04f 34ff 	mov.w	r4, #4294967295
 802678a:	4620      	mov	r0, r4
 802678c:	bd70      	pop	{r4, r5, r6, pc}
 802678e:	1cc4      	adds	r4, r0, #3
 8026790:	f024 0403 	bic.w	r4, r4, #3
 8026794:	42a0      	cmp	r0, r4
 8026796:	d0f8      	beq.n	802678a <sbrk_aligned+0x22>
 8026798:	1a21      	subs	r1, r4, r0
 802679a:	4628      	mov	r0, r5
 802679c:	f000 fb7c 	bl	8026e98 <_sbrk_r>
 80267a0:	3001      	adds	r0, #1
 80267a2:	d1f2      	bne.n	802678a <sbrk_aligned+0x22>
 80267a4:	e7ef      	b.n	8026786 <sbrk_aligned+0x1e>
 80267a6:	bf00      	nop
 80267a8:	2402685c 	.word	0x2402685c

080267ac <_malloc_r>:
 80267ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80267b0:	1ccd      	adds	r5, r1, #3
 80267b2:	f025 0503 	bic.w	r5, r5, #3
 80267b6:	3508      	adds	r5, #8
 80267b8:	2d0c      	cmp	r5, #12
 80267ba:	bf38      	it	cc
 80267bc:	250c      	movcc	r5, #12
 80267be:	2d00      	cmp	r5, #0
 80267c0:	4606      	mov	r6, r0
 80267c2:	db01      	blt.n	80267c8 <_malloc_r+0x1c>
 80267c4:	42a9      	cmp	r1, r5
 80267c6:	d904      	bls.n	80267d2 <_malloc_r+0x26>
 80267c8:	230c      	movs	r3, #12
 80267ca:	6033      	str	r3, [r6, #0]
 80267cc:	2000      	movs	r0, #0
 80267ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80267d2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80268a8 <_malloc_r+0xfc>
 80267d6:	f000 f869 	bl	80268ac <__malloc_lock>
 80267da:	f8d8 3000 	ldr.w	r3, [r8]
 80267de:	461c      	mov	r4, r3
 80267e0:	bb44      	cbnz	r4, 8026834 <_malloc_r+0x88>
 80267e2:	4629      	mov	r1, r5
 80267e4:	4630      	mov	r0, r6
 80267e6:	f7ff ffbf 	bl	8026768 <sbrk_aligned>
 80267ea:	1c43      	adds	r3, r0, #1
 80267ec:	4604      	mov	r4, r0
 80267ee:	d158      	bne.n	80268a2 <_malloc_r+0xf6>
 80267f0:	f8d8 4000 	ldr.w	r4, [r8]
 80267f4:	4627      	mov	r7, r4
 80267f6:	2f00      	cmp	r7, #0
 80267f8:	d143      	bne.n	8026882 <_malloc_r+0xd6>
 80267fa:	2c00      	cmp	r4, #0
 80267fc:	d04b      	beq.n	8026896 <_malloc_r+0xea>
 80267fe:	6823      	ldr	r3, [r4, #0]
 8026800:	4639      	mov	r1, r7
 8026802:	4630      	mov	r0, r6
 8026804:	eb04 0903 	add.w	r9, r4, r3
 8026808:	f000 fb46 	bl	8026e98 <_sbrk_r>
 802680c:	4581      	cmp	r9, r0
 802680e:	d142      	bne.n	8026896 <_malloc_r+0xea>
 8026810:	6821      	ldr	r1, [r4, #0]
 8026812:	1a6d      	subs	r5, r5, r1
 8026814:	4629      	mov	r1, r5
 8026816:	4630      	mov	r0, r6
 8026818:	f7ff ffa6 	bl	8026768 <sbrk_aligned>
 802681c:	3001      	adds	r0, #1
 802681e:	d03a      	beq.n	8026896 <_malloc_r+0xea>
 8026820:	6823      	ldr	r3, [r4, #0]
 8026822:	442b      	add	r3, r5
 8026824:	6023      	str	r3, [r4, #0]
 8026826:	f8d8 3000 	ldr.w	r3, [r8]
 802682a:	685a      	ldr	r2, [r3, #4]
 802682c:	bb62      	cbnz	r2, 8026888 <_malloc_r+0xdc>
 802682e:	f8c8 7000 	str.w	r7, [r8]
 8026832:	e00f      	b.n	8026854 <_malloc_r+0xa8>
 8026834:	6822      	ldr	r2, [r4, #0]
 8026836:	1b52      	subs	r2, r2, r5
 8026838:	d420      	bmi.n	802687c <_malloc_r+0xd0>
 802683a:	2a0b      	cmp	r2, #11
 802683c:	d917      	bls.n	802686e <_malloc_r+0xc2>
 802683e:	1961      	adds	r1, r4, r5
 8026840:	42a3      	cmp	r3, r4
 8026842:	6025      	str	r5, [r4, #0]
 8026844:	bf18      	it	ne
 8026846:	6059      	strne	r1, [r3, #4]
 8026848:	6863      	ldr	r3, [r4, #4]
 802684a:	bf08      	it	eq
 802684c:	f8c8 1000 	streq.w	r1, [r8]
 8026850:	5162      	str	r2, [r4, r5]
 8026852:	604b      	str	r3, [r1, #4]
 8026854:	4630      	mov	r0, r6
 8026856:	f000 f82f 	bl	80268b8 <__malloc_unlock>
 802685a:	f104 000b 	add.w	r0, r4, #11
 802685e:	1d23      	adds	r3, r4, #4
 8026860:	f020 0007 	bic.w	r0, r0, #7
 8026864:	1ac2      	subs	r2, r0, r3
 8026866:	bf1c      	itt	ne
 8026868:	1a1b      	subne	r3, r3, r0
 802686a:	50a3      	strne	r3, [r4, r2]
 802686c:	e7af      	b.n	80267ce <_malloc_r+0x22>
 802686e:	6862      	ldr	r2, [r4, #4]
 8026870:	42a3      	cmp	r3, r4
 8026872:	bf0c      	ite	eq
 8026874:	f8c8 2000 	streq.w	r2, [r8]
 8026878:	605a      	strne	r2, [r3, #4]
 802687a:	e7eb      	b.n	8026854 <_malloc_r+0xa8>
 802687c:	4623      	mov	r3, r4
 802687e:	6864      	ldr	r4, [r4, #4]
 8026880:	e7ae      	b.n	80267e0 <_malloc_r+0x34>
 8026882:	463c      	mov	r4, r7
 8026884:	687f      	ldr	r7, [r7, #4]
 8026886:	e7b6      	b.n	80267f6 <_malloc_r+0x4a>
 8026888:	461a      	mov	r2, r3
 802688a:	685b      	ldr	r3, [r3, #4]
 802688c:	42a3      	cmp	r3, r4
 802688e:	d1fb      	bne.n	8026888 <_malloc_r+0xdc>
 8026890:	2300      	movs	r3, #0
 8026892:	6053      	str	r3, [r2, #4]
 8026894:	e7de      	b.n	8026854 <_malloc_r+0xa8>
 8026896:	230c      	movs	r3, #12
 8026898:	6033      	str	r3, [r6, #0]
 802689a:	4630      	mov	r0, r6
 802689c:	f000 f80c 	bl	80268b8 <__malloc_unlock>
 80268a0:	e794      	b.n	80267cc <_malloc_r+0x20>
 80268a2:	6005      	str	r5, [r0, #0]
 80268a4:	e7d6      	b.n	8026854 <_malloc_r+0xa8>
 80268a6:	bf00      	nop
 80268a8:	24026860 	.word	0x24026860

080268ac <__malloc_lock>:
 80268ac:	4801      	ldr	r0, [pc, #4]	@ (80268b4 <__malloc_lock+0x8>)
 80268ae:	f000 bb40 	b.w	8026f32 <__retarget_lock_acquire_recursive>
 80268b2:	bf00      	nop
 80268b4:	240269a4 	.word	0x240269a4

080268b8 <__malloc_unlock>:
 80268b8:	4801      	ldr	r0, [pc, #4]	@ (80268c0 <__malloc_unlock+0x8>)
 80268ba:	f000 bb3b 	b.w	8026f34 <__retarget_lock_release_recursive>
 80268be:	bf00      	nop
 80268c0:	240269a4 	.word	0x240269a4

080268c4 <__cxa_atexit>:
 80268c4:	b510      	push	{r4, lr}
 80268c6:	4604      	mov	r4, r0
 80268c8:	4804      	ldr	r0, [pc, #16]	@ (80268dc <__cxa_atexit+0x18>)
 80268ca:	4613      	mov	r3, r2
 80268cc:	b120      	cbz	r0, 80268d8 <__cxa_atexit+0x14>
 80268ce:	460a      	mov	r2, r1
 80268d0:	2002      	movs	r0, #2
 80268d2:	4621      	mov	r1, r4
 80268d4:	f000 fb3e 	bl	8026f54 <__register_exitproc>
 80268d8:	bd10      	pop	{r4, pc}
 80268da:	bf00      	nop
 80268dc:	08026f55 	.word	0x08026f55

080268e0 <std>:
 80268e0:	2300      	movs	r3, #0
 80268e2:	b510      	push	{r4, lr}
 80268e4:	4604      	mov	r4, r0
 80268e6:	e9c0 3300 	strd	r3, r3, [r0]
 80268ea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80268ee:	6083      	str	r3, [r0, #8]
 80268f0:	8181      	strh	r1, [r0, #12]
 80268f2:	6643      	str	r3, [r0, #100]	@ 0x64
 80268f4:	81c2      	strh	r2, [r0, #14]
 80268f6:	6183      	str	r3, [r0, #24]
 80268f8:	4619      	mov	r1, r3
 80268fa:	2208      	movs	r2, #8
 80268fc:	305c      	adds	r0, #92	@ 0x5c
 80268fe:	f000 f9d5 	bl	8026cac <memset>
 8026902:	4b0d      	ldr	r3, [pc, #52]	@ (8026938 <std+0x58>)
 8026904:	6263      	str	r3, [r4, #36]	@ 0x24
 8026906:	4b0d      	ldr	r3, [pc, #52]	@ (802693c <std+0x5c>)
 8026908:	62a3      	str	r3, [r4, #40]	@ 0x28
 802690a:	4b0d      	ldr	r3, [pc, #52]	@ (8026940 <std+0x60>)
 802690c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 802690e:	4b0d      	ldr	r3, [pc, #52]	@ (8026944 <std+0x64>)
 8026910:	6323      	str	r3, [r4, #48]	@ 0x30
 8026912:	4b0d      	ldr	r3, [pc, #52]	@ (8026948 <std+0x68>)
 8026914:	6224      	str	r4, [r4, #32]
 8026916:	429c      	cmp	r4, r3
 8026918:	d006      	beq.n	8026928 <std+0x48>
 802691a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 802691e:	4294      	cmp	r4, r2
 8026920:	d002      	beq.n	8026928 <std+0x48>
 8026922:	33d0      	adds	r3, #208	@ 0xd0
 8026924:	429c      	cmp	r4, r3
 8026926:	d105      	bne.n	8026934 <std+0x54>
 8026928:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 802692c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026930:	f000 bafe 	b.w	8026f30 <__retarget_lock_init_recursive>
 8026934:	bd10      	pop	{r4, pc}
 8026936:	bf00      	nop
 8026938:	08026ac9 	.word	0x08026ac9
 802693c:	08026aeb 	.word	0x08026aeb
 8026940:	08026b23 	.word	0x08026b23
 8026944:	08026b47 	.word	0x08026b47
 8026948:	24026864 	.word	0x24026864

0802694c <stdio_exit_handler>:
 802694c:	4a02      	ldr	r2, [pc, #8]	@ (8026958 <stdio_exit_handler+0xc>)
 802694e:	4903      	ldr	r1, [pc, #12]	@ (802695c <stdio_exit_handler+0x10>)
 8026950:	4803      	ldr	r0, [pc, #12]	@ (8026960 <stdio_exit_handler+0x14>)
 8026952:	f000 b87b 	b.w	8026a4c <_fwalk_sglue>
 8026956:	bf00      	nop
 8026958:	2400010c 	.word	0x2400010c
 802695c:	080279f9 	.word	0x080279f9
 8026960:	2400011c 	.word	0x2400011c

08026964 <cleanup_stdio>:
 8026964:	6841      	ldr	r1, [r0, #4]
 8026966:	4b0c      	ldr	r3, [pc, #48]	@ (8026998 <cleanup_stdio+0x34>)
 8026968:	4299      	cmp	r1, r3
 802696a:	b510      	push	{r4, lr}
 802696c:	4604      	mov	r4, r0
 802696e:	d001      	beq.n	8026974 <cleanup_stdio+0x10>
 8026970:	f001 f842 	bl	80279f8 <_fflush_r>
 8026974:	68a1      	ldr	r1, [r4, #8]
 8026976:	4b09      	ldr	r3, [pc, #36]	@ (802699c <cleanup_stdio+0x38>)
 8026978:	4299      	cmp	r1, r3
 802697a:	d002      	beq.n	8026982 <cleanup_stdio+0x1e>
 802697c:	4620      	mov	r0, r4
 802697e:	f001 f83b 	bl	80279f8 <_fflush_r>
 8026982:	68e1      	ldr	r1, [r4, #12]
 8026984:	4b06      	ldr	r3, [pc, #24]	@ (80269a0 <cleanup_stdio+0x3c>)
 8026986:	4299      	cmp	r1, r3
 8026988:	d004      	beq.n	8026994 <cleanup_stdio+0x30>
 802698a:	4620      	mov	r0, r4
 802698c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026990:	f001 b832 	b.w	80279f8 <_fflush_r>
 8026994:	bd10      	pop	{r4, pc}
 8026996:	bf00      	nop
 8026998:	24026864 	.word	0x24026864
 802699c:	240268cc 	.word	0x240268cc
 80269a0:	24026934 	.word	0x24026934

080269a4 <global_stdio_init.part.0>:
 80269a4:	b510      	push	{r4, lr}
 80269a6:	4b0b      	ldr	r3, [pc, #44]	@ (80269d4 <global_stdio_init.part.0+0x30>)
 80269a8:	4c0b      	ldr	r4, [pc, #44]	@ (80269d8 <global_stdio_init.part.0+0x34>)
 80269aa:	4a0c      	ldr	r2, [pc, #48]	@ (80269dc <global_stdio_init.part.0+0x38>)
 80269ac:	601a      	str	r2, [r3, #0]
 80269ae:	4620      	mov	r0, r4
 80269b0:	2200      	movs	r2, #0
 80269b2:	2104      	movs	r1, #4
 80269b4:	f7ff ff94 	bl	80268e0 <std>
 80269b8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80269bc:	2201      	movs	r2, #1
 80269be:	2109      	movs	r1, #9
 80269c0:	f7ff ff8e 	bl	80268e0 <std>
 80269c4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80269c8:	2202      	movs	r2, #2
 80269ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80269ce:	2112      	movs	r1, #18
 80269d0:	f7ff bf86 	b.w	80268e0 <std>
 80269d4:	2402699c 	.word	0x2402699c
 80269d8:	24026864 	.word	0x24026864
 80269dc:	0802694d 	.word	0x0802694d

080269e0 <__sfp_lock_acquire>:
 80269e0:	4801      	ldr	r0, [pc, #4]	@ (80269e8 <__sfp_lock_acquire+0x8>)
 80269e2:	f000 baa6 	b.w	8026f32 <__retarget_lock_acquire_recursive>
 80269e6:	bf00      	nop
 80269e8:	240269a6 	.word	0x240269a6

080269ec <__sfp_lock_release>:
 80269ec:	4801      	ldr	r0, [pc, #4]	@ (80269f4 <__sfp_lock_release+0x8>)
 80269ee:	f000 baa1 	b.w	8026f34 <__retarget_lock_release_recursive>
 80269f2:	bf00      	nop
 80269f4:	240269a6 	.word	0x240269a6

080269f8 <__sinit>:
 80269f8:	b510      	push	{r4, lr}
 80269fa:	4604      	mov	r4, r0
 80269fc:	f7ff fff0 	bl	80269e0 <__sfp_lock_acquire>
 8026a00:	6a23      	ldr	r3, [r4, #32]
 8026a02:	b11b      	cbz	r3, 8026a0c <__sinit+0x14>
 8026a04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8026a08:	f7ff bff0 	b.w	80269ec <__sfp_lock_release>
 8026a0c:	4b04      	ldr	r3, [pc, #16]	@ (8026a20 <__sinit+0x28>)
 8026a0e:	6223      	str	r3, [r4, #32]
 8026a10:	4b04      	ldr	r3, [pc, #16]	@ (8026a24 <__sinit+0x2c>)
 8026a12:	681b      	ldr	r3, [r3, #0]
 8026a14:	2b00      	cmp	r3, #0
 8026a16:	d1f5      	bne.n	8026a04 <__sinit+0xc>
 8026a18:	f7ff ffc4 	bl	80269a4 <global_stdio_init.part.0>
 8026a1c:	e7f2      	b.n	8026a04 <__sinit+0xc>
 8026a1e:	bf00      	nop
 8026a20:	08026965 	.word	0x08026965
 8026a24:	2402699c 	.word	0x2402699c

08026a28 <fiprintf>:
 8026a28:	b40e      	push	{r1, r2, r3}
 8026a2a:	b503      	push	{r0, r1, lr}
 8026a2c:	4601      	mov	r1, r0
 8026a2e:	ab03      	add	r3, sp, #12
 8026a30:	4805      	ldr	r0, [pc, #20]	@ (8026a48 <fiprintf+0x20>)
 8026a32:	f853 2b04 	ldr.w	r2, [r3], #4
 8026a36:	6800      	ldr	r0, [r0, #0]
 8026a38:	9301      	str	r3, [sp, #4]
 8026a3a:	f000 fcb3 	bl	80273a4 <_vfiprintf_r>
 8026a3e:	b002      	add	sp, #8
 8026a40:	f85d eb04 	ldr.w	lr, [sp], #4
 8026a44:	b003      	add	sp, #12
 8026a46:	4770      	bx	lr
 8026a48:	24000118 	.word	0x24000118

08026a4c <_fwalk_sglue>:
 8026a4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026a50:	4607      	mov	r7, r0
 8026a52:	4688      	mov	r8, r1
 8026a54:	4614      	mov	r4, r2
 8026a56:	2600      	movs	r6, #0
 8026a58:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8026a5c:	f1b9 0901 	subs.w	r9, r9, #1
 8026a60:	d505      	bpl.n	8026a6e <_fwalk_sglue+0x22>
 8026a62:	6824      	ldr	r4, [r4, #0]
 8026a64:	2c00      	cmp	r4, #0
 8026a66:	d1f7      	bne.n	8026a58 <_fwalk_sglue+0xc>
 8026a68:	4630      	mov	r0, r6
 8026a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026a6e:	89ab      	ldrh	r3, [r5, #12]
 8026a70:	2b01      	cmp	r3, #1
 8026a72:	d907      	bls.n	8026a84 <_fwalk_sglue+0x38>
 8026a74:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8026a78:	3301      	adds	r3, #1
 8026a7a:	d003      	beq.n	8026a84 <_fwalk_sglue+0x38>
 8026a7c:	4629      	mov	r1, r5
 8026a7e:	4638      	mov	r0, r7
 8026a80:	47c0      	blx	r8
 8026a82:	4306      	orrs	r6, r0
 8026a84:	3568      	adds	r5, #104	@ 0x68
 8026a86:	e7e9      	b.n	8026a5c <_fwalk_sglue+0x10>

08026a88 <siprintf>:
 8026a88:	b40e      	push	{r1, r2, r3}
 8026a8a:	b500      	push	{lr}
 8026a8c:	b09c      	sub	sp, #112	@ 0x70
 8026a8e:	ab1d      	add	r3, sp, #116	@ 0x74
 8026a90:	9002      	str	r0, [sp, #8]
 8026a92:	9006      	str	r0, [sp, #24]
 8026a94:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8026a98:	4809      	ldr	r0, [pc, #36]	@ (8026ac0 <siprintf+0x38>)
 8026a9a:	9107      	str	r1, [sp, #28]
 8026a9c:	9104      	str	r1, [sp, #16]
 8026a9e:	4909      	ldr	r1, [pc, #36]	@ (8026ac4 <siprintf+0x3c>)
 8026aa0:	f853 2b04 	ldr.w	r2, [r3], #4
 8026aa4:	9105      	str	r1, [sp, #20]
 8026aa6:	6800      	ldr	r0, [r0, #0]
 8026aa8:	9301      	str	r3, [sp, #4]
 8026aaa:	a902      	add	r1, sp, #8
 8026aac:	f000 fb54 	bl	8027158 <_svfiprintf_r>
 8026ab0:	9b02      	ldr	r3, [sp, #8]
 8026ab2:	2200      	movs	r2, #0
 8026ab4:	701a      	strb	r2, [r3, #0]
 8026ab6:	b01c      	add	sp, #112	@ 0x70
 8026ab8:	f85d eb04 	ldr.w	lr, [sp], #4
 8026abc:	b003      	add	sp, #12
 8026abe:	4770      	bx	lr
 8026ac0:	24000118 	.word	0x24000118
 8026ac4:	ffff0208 	.word	0xffff0208

08026ac8 <__sread>:
 8026ac8:	b510      	push	{r4, lr}
 8026aca:	460c      	mov	r4, r1
 8026acc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026ad0:	f000 f9bc 	bl	8026e4c <_read_r>
 8026ad4:	2800      	cmp	r0, #0
 8026ad6:	bfab      	itete	ge
 8026ad8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8026ada:	89a3      	ldrhlt	r3, [r4, #12]
 8026adc:	181b      	addge	r3, r3, r0
 8026ade:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8026ae2:	bfac      	ite	ge
 8026ae4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8026ae6:	81a3      	strhlt	r3, [r4, #12]
 8026ae8:	bd10      	pop	{r4, pc}

08026aea <__swrite>:
 8026aea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026aee:	461f      	mov	r7, r3
 8026af0:	898b      	ldrh	r3, [r1, #12]
 8026af2:	05db      	lsls	r3, r3, #23
 8026af4:	4605      	mov	r5, r0
 8026af6:	460c      	mov	r4, r1
 8026af8:	4616      	mov	r6, r2
 8026afa:	d505      	bpl.n	8026b08 <__swrite+0x1e>
 8026afc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b00:	2302      	movs	r3, #2
 8026b02:	2200      	movs	r2, #0
 8026b04:	f000 f990 	bl	8026e28 <_lseek_r>
 8026b08:	89a3      	ldrh	r3, [r4, #12]
 8026b0a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8026b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8026b12:	81a3      	strh	r3, [r4, #12]
 8026b14:	4632      	mov	r2, r6
 8026b16:	463b      	mov	r3, r7
 8026b18:	4628      	mov	r0, r5
 8026b1a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8026b1e:	f000 b9cb 	b.w	8026eb8 <_write_r>

08026b22 <__sseek>:
 8026b22:	b510      	push	{r4, lr}
 8026b24:	460c      	mov	r4, r1
 8026b26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b2a:	f000 f97d 	bl	8026e28 <_lseek_r>
 8026b2e:	1c43      	adds	r3, r0, #1
 8026b30:	89a3      	ldrh	r3, [r4, #12]
 8026b32:	bf15      	itete	ne
 8026b34:	6560      	strne	r0, [r4, #84]	@ 0x54
 8026b36:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8026b3a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8026b3e:	81a3      	strheq	r3, [r4, #12]
 8026b40:	bf18      	it	ne
 8026b42:	81a3      	strhne	r3, [r4, #12]
 8026b44:	bd10      	pop	{r4, pc}

08026b46 <__sclose>:
 8026b46:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8026b4a:	f000 b907 	b.w	8026d5c <_close_r>

08026b4e <__swbuf_r>:
 8026b4e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8026b50:	460e      	mov	r6, r1
 8026b52:	4614      	mov	r4, r2
 8026b54:	4605      	mov	r5, r0
 8026b56:	b118      	cbz	r0, 8026b60 <__swbuf_r+0x12>
 8026b58:	6a03      	ldr	r3, [r0, #32]
 8026b5a:	b90b      	cbnz	r3, 8026b60 <__swbuf_r+0x12>
 8026b5c:	f7ff ff4c 	bl	80269f8 <__sinit>
 8026b60:	69a3      	ldr	r3, [r4, #24]
 8026b62:	60a3      	str	r3, [r4, #8]
 8026b64:	89a3      	ldrh	r3, [r4, #12]
 8026b66:	071a      	lsls	r2, r3, #28
 8026b68:	d501      	bpl.n	8026b6e <__swbuf_r+0x20>
 8026b6a:	6923      	ldr	r3, [r4, #16]
 8026b6c:	b943      	cbnz	r3, 8026b80 <__swbuf_r+0x32>
 8026b6e:	4621      	mov	r1, r4
 8026b70:	4628      	mov	r0, r5
 8026b72:	f000 f82b 	bl	8026bcc <__swsetup_r>
 8026b76:	b118      	cbz	r0, 8026b80 <__swbuf_r+0x32>
 8026b78:	f04f 37ff 	mov.w	r7, #4294967295
 8026b7c:	4638      	mov	r0, r7
 8026b7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8026b80:	6823      	ldr	r3, [r4, #0]
 8026b82:	6922      	ldr	r2, [r4, #16]
 8026b84:	1a98      	subs	r0, r3, r2
 8026b86:	6963      	ldr	r3, [r4, #20]
 8026b88:	b2f6      	uxtb	r6, r6
 8026b8a:	4283      	cmp	r3, r0
 8026b8c:	4637      	mov	r7, r6
 8026b8e:	dc05      	bgt.n	8026b9c <__swbuf_r+0x4e>
 8026b90:	4621      	mov	r1, r4
 8026b92:	4628      	mov	r0, r5
 8026b94:	f000 ff30 	bl	80279f8 <_fflush_r>
 8026b98:	2800      	cmp	r0, #0
 8026b9a:	d1ed      	bne.n	8026b78 <__swbuf_r+0x2a>
 8026b9c:	68a3      	ldr	r3, [r4, #8]
 8026b9e:	3b01      	subs	r3, #1
 8026ba0:	60a3      	str	r3, [r4, #8]
 8026ba2:	6823      	ldr	r3, [r4, #0]
 8026ba4:	1c5a      	adds	r2, r3, #1
 8026ba6:	6022      	str	r2, [r4, #0]
 8026ba8:	701e      	strb	r6, [r3, #0]
 8026baa:	6962      	ldr	r2, [r4, #20]
 8026bac:	1c43      	adds	r3, r0, #1
 8026bae:	429a      	cmp	r2, r3
 8026bb0:	d004      	beq.n	8026bbc <__swbuf_r+0x6e>
 8026bb2:	89a3      	ldrh	r3, [r4, #12]
 8026bb4:	07db      	lsls	r3, r3, #31
 8026bb6:	d5e1      	bpl.n	8026b7c <__swbuf_r+0x2e>
 8026bb8:	2e0a      	cmp	r6, #10
 8026bba:	d1df      	bne.n	8026b7c <__swbuf_r+0x2e>
 8026bbc:	4621      	mov	r1, r4
 8026bbe:	4628      	mov	r0, r5
 8026bc0:	f000 ff1a 	bl	80279f8 <_fflush_r>
 8026bc4:	2800      	cmp	r0, #0
 8026bc6:	d0d9      	beq.n	8026b7c <__swbuf_r+0x2e>
 8026bc8:	e7d6      	b.n	8026b78 <__swbuf_r+0x2a>
	...

08026bcc <__swsetup_r>:
 8026bcc:	b538      	push	{r3, r4, r5, lr}
 8026bce:	4b29      	ldr	r3, [pc, #164]	@ (8026c74 <__swsetup_r+0xa8>)
 8026bd0:	4605      	mov	r5, r0
 8026bd2:	6818      	ldr	r0, [r3, #0]
 8026bd4:	460c      	mov	r4, r1
 8026bd6:	b118      	cbz	r0, 8026be0 <__swsetup_r+0x14>
 8026bd8:	6a03      	ldr	r3, [r0, #32]
 8026bda:	b90b      	cbnz	r3, 8026be0 <__swsetup_r+0x14>
 8026bdc:	f7ff ff0c 	bl	80269f8 <__sinit>
 8026be0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026be4:	0719      	lsls	r1, r3, #28
 8026be6:	d422      	bmi.n	8026c2e <__swsetup_r+0x62>
 8026be8:	06da      	lsls	r2, r3, #27
 8026bea:	d407      	bmi.n	8026bfc <__swsetup_r+0x30>
 8026bec:	2209      	movs	r2, #9
 8026bee:	602a      	str	r2, [r5, #0]
 8026bf0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8026bf4:	81a3      	strh	r3, [r4, #12]
 8026bf6:	f04f 30ff 	mov.w	r0, #4294967295
 8026bfa:	e033      	b.n	8026c64 <__swsetup_r+0x98>
 8026bfc:	0758      	lsls	r0, r3, #29
 8026bfe:	d512      	bpl.n	8026c26 <__swsetup_r+0x5a>
 8026c00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026c02:	b141      	cbz	r1, 8026c16 <__swsetup_r+0x4a>
 8026c04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8026c08:	4299      	cmp	r1, r3
 8026c0a:	d002      	beq.n	8026c12 <__swsetup_r+0x46>
 8026c0c:	4628      	mov	r0, r5
 8026c0e:	f000 f9fd 	bl	802700c <_free_r>
 8026c12:	2300      	movs	r3, #0
 8026c14:	6363      	str	r3, [r4, #52]	@ 0x34
 8026c16:	89a3      	ldrh	r3, [r4, #12]
 8026c18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8026c1c:	81a3      	strh	r3, [r4, #12]
 8026c1e:	2300      	movs	r3, #0
 8026c20:	6063      	str	r3, [r4, #4]
 8026c22:	6923      	ldr	r3, [r4, #16]
 8026c24:	6023      	str	r3, [r4, #0]
 8026c26:	89a3      	ldrh	r3, [r4, #12]
 8026c28:	f043 0308 	orr.w	r3, r3, #8
 8026c2c:	81a3      	strh	r3, [r4, #12]
 8026c2e:	6923      	ldr	r3, [r4, #16]
 8026c30:	b94b      	cbnz	r3, 8026c46 <__swsetup_r+0x7a>
 8026c32:	89a3      	ldrh	r3, [r4, #12]
 8026c34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8026c38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8026c3c:	d003      	beq.n	8026c46 <__swsetup_r+0x7a>
 8026c3e:	4621      	mov	r1, r4
 8026c40:	4628      	mov	r0, r5
 8026c42:	f000 ff27 	bl	8027a94 <__smakebuf_r>
 8026c46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8026c4a:	f013 0201 	ands.w	r2, r3, #1
 8026c4e:	d00a      	beq.n	8026c66 <__swsetup_r+0x9a>
 8026c50:	2200      	movs	r2, #0
 8026c52:	60a2      	str	r2, [r4, #8]
 8026c54:	6962      	ldr	r2, [r4, #20]
 8026c56:	4252      	negs	r2, r2
 8026c58:	61a2      	str	r2, [r4, #24]
 8026c5a:	6922      	ldr	r2, [r4, #16]
 8026c5c:	b942      	cbnz	r2, 8026c70 <__swsetup_r+0xa4>
 8026c5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8026c62:	d1c5      	bne.n	8026bf0 <__swsetup_r+0x24>
 8026c64:	bd38      	pop	{r3, r4, r5, pc}
 8026c66:	0799      	lsls	r1, r3, #30
 8026c68:	bf58      	it	pl
 8026c6a:	6962      	ldrpl	r2, [r4, #20]
 8026c6c:	60a2      	str	r2, [r4, #8]
 8026c6e:	e7f4      	b.n	8026c5a <__swsetup_r+0x8e>
 8026c70:	2000      	movs	r0, #0
 8026c72:	e7f7      	b.n	8026c64 <__swsetup_r+0x98>
 8026c74:	24000118 	.word	0x24000118

08026c78 <memmove>:
 8026c78:	4288      	cmp	r0, r1
 8026c7a:	b510      	push	{r4, lr}
 8026c7c:	eb01 0402 	add.w	r4, r1, r2
 8026c80:	d902      	bls.n	8026c88 <memmove+0x10>
 8026c82:	4284      	cmp	r4, r0
 8026c84:	4623      	mov	r3, r4
 8026c86:	d807      	bhi.n	8026c98 <memmove+0x20>
 8026c88:	1e43      	subs	r3, r0, #1
 8026c8a:	42a1      	cmp	r1, r4
 8026c8c:	d008      	beq.n	8026ca0 <memmove+0x28>
 8026c8e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026c92:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026c96:	e7f8      	b.n	8026c8a <memmove+0x12>
 8026c98:	4402      	add	r2, r0
 8026c9a:	4601      	mov	r1, r0
 8026c9c:	428a      	cmp	r2, r1
 8026c9e:	d100      	bne.n	8026ca2 <memmove+0x2a>
 8026ca0:	bd10      	pop	{r4, pc}
 8026ca2:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026ca6:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8026caa:	e7f7      	b.n	8026c9c <memmove+0x24>

08026cac <memset>:
 8026cac:	4402      	add	r2, r0
 8026cae:	4603      	mov	r3, r0
 8026cb0:	4293      	cmp	r3, r2
 8026cb2:	d100      	bne.n	8026cb6 <memset+0xa>
 8026cb4:	4770      	bx	lr
 8026cb6:	f803 1b01 	strb.w	r1, [r3], #1
 8026cba:	e7f9      	b.n	8026cb0 <memset+0x4>

08026cbc <strchr>:
 8026cbc:	b2c9      	uxtb	r1, r1
 8026cbe:	4603      	mov	r3, r0
 8026cc0:	4618      	mov	r0, r3
 8026cc2:	f813 2b01 	ldrb.w	r2, [r3], #1
 8026cc6:	b112      	cbz	r2, 8026cce <strchr+0x12>
 8026cc8:	428a      	cmp	r2, r1
 8026cca:	d1f9      	bne.n	8026cc0 <strchr+0x4>
 8026ccc:	4770      	bx	lr
 8026cce:	2900      	cmp	r1, #0
 8026cd0:	bf18      	it	ne
 8026cd2:	2000      	movne	r0, #0
 8026cd4:	4770      	bx	lr

08026cd6 <strncmp>:
 8026cd6:	b510      	push	{r4, lr}
 8026cd8:	b16a      	cbz	r2, 8026cf6 <strncmp+0x20>
 8026cda:	3901      	subs	r1, #1
 8026cdc:	1884      	adds	r4, r0, r2
 8026cde:	f810 2b01 	ldrb.w	r2, [r0], #1
 8026ce2:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8026ce6:	429a      	cmp	r2, r3
 8026ce8:	d103      	bne.n	8026cf2 <strncmp+0x1c>
 8026cea:	42a0      	cmp	r0, r4
 8026cec:	d001      	beq.n	8026cf2 <strncmp+0x1c>
 8026cee:	2a00      	cmp	r2, #0
 8026cf0:	d1f5      	bne.n	8026cde <strncmp+0x8>
 8026cf2:	1ad0      	subs	r0, r2, r3
 8026cf4:	bd10      	pop	{r4, pc}
 8026cf6:	4610      	mov	r0, r2
 8026cf8:	e7fc      	b.n	8026cf4 <strncmp+0x1e>

08026cfa <_raise_r>:
 8026cfa:	291f      	cmp	r1, #31
 8026cfc:	b538      	push	{r3, r4, r5, lr}
 8026cfe:	4605      	mov	r5, r0
 8026d00:	460c      	mov	r4, r1
 8026d02:	d904      	bls.n	8026d0e <_raise_r+0x14>
 8026d04:	2316      	movs	r3, #22
 8026d06:	6003      	str	r3, [r0, #0]
 8026d08:	f04f 30ff 	mov.w	r0, #4294967295
 8026d0c:	bd38      	pop	{r3, r4, r5, pc}
 8026d0e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8026d10:	b112      	cbz	r2, 8026d18 <_raise_r+0x1e>
 8026d12:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8026d16:	b94b      	cbnz	r3, 8026d2c <_raise_r+0x32>
 8026d18:	4628      	mov	r0, r5
 8026d1a:	f000 f8bb 	bl	8026e94 <_getpid_r>
 8026d1e:	4622      	mov	r2, r4
 8026d20:	4601      	mov	r1, r0
 8026d22:	4628      	mov	r0, r5
 8026d24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8026d28:	f000 b8a2 	b.w	8026e70 <_kill_r>
 8026d2c:	2b01      	cmp	r3, #1
 8026d2e:	d00a      	beq.n	8026d46 <_raise_r+0x4c>
 8026d30:	1c59      	adds	r1, r3, #1
 8026d32:	d103      	bne.n	8026d3c <_raise_r+0x42>
 8026d34:	2316      	movs	r3, #22
 8026d36:	6003      	str	r3, [r0, #0]
 8026d38:	2001      	movs	r0, #1
 8026d3a:	e7e7      	b.n	8026d0c <_raise_r+0x12>
 8026d3c:	2100      	movs	r1, #0
 8026d3e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8026d42:	4620      	mov	r0, r4
 8026d44:	4798      	blx	r3
 8026d46:	2000      	movs	r0, #0
 8026d48:	e7e0      	b.n	8026d0c <_raise_r+0x12>
	...

08026d4c <raise>:
 8026d4c:	4b02      	ldr	r3, [pc, #8]	@ (8026d58 <raise+0xc>)
 8026d4e:	4601      	mov	r1, r0
 8026d50:	6818      	ldr	r0, [r3, #0]
 8026d52:	f7ff bfd2 	b.w	8026cfa <_raise_r>
 8026d56:	bf00      	nop
 8026d58:	24000118 	.word	0x24000118

08026d5c <_close_r>:
 8026d5c:	b538      	push	{r3, r4, r5, lr}
 8026d5e:	4d06      	ldr	r5, [pc, #24]	@ (8026d78 <_close_r+0x1c>)
 8026d60:	2300      	movs	r3, #0
 8026d62:	4604      	mov	r4, r0
 8026d64:	4608      	mov	r0, r1
 8026d66:	602b      	str	r3, [r5, #0]
 8026d68:	f7da fed8 	bl	8001b1c <_close>
 8026d6c:	1c43      	adds	r3, r0, #1
 8026d6e:	d102      	bne.n	8026d76 <_close_r+0x1a>
 8026d70:	682b      	ldr	r3, [r5, #0]
 8026d72:	b103      	cbz	r3, 8026d76 <_close_r+0x1a>
 8026d74:	6023      	str	r3, [r4, #0]
 8026d76:	bd38      	pop	{r3, r4, r5, pc}
 8026d78:	240269a0 	.word	0x240269a0

08026d7c <_reclaim_reent>:
 8026d7c:	4b29      	ldr	r3, [pc, #164]	@ (8026e24 <_reclaim_reent+0xa8>)
 8026d7e:	681b      	ldr	r3, [r3, #0]
 8026d80:	4283      	cmp	r3, r0
 8026d82:	b570      	push	{r4, r5, r6, lr}
 8026d84:	4604      	mov	r4, r0
 8026d86:	d04b      	beq.n	8026e20 <_reclaim_reent+0xa4>
 8026d88:	69c3      	ldr	r3, [r0, #28]
 8026d8a:	b1ab      	cbz	r3, 8026db8 <_reclaim_reent+0x3c>
 8026d8c:	68db      	ldr	r3, [r3, #12]
 8026d8e:	b16b      	cbz	r3, 8026dac <_reclaim_reent+0x30>
 8026d90:	2500      	movs	r5, #0
 8026d92:	69e3      	ldr	r3, [r4, #28]
 8026d94:	68db      	ldr	r3, [r3, #12]
 8026d96:	5959      	ldr	r1, [r3, r5]
 8026d98:	2900      	cmp	r1, #0
 8026d9a:	d13b      	bne.n	8026e14 <_reclaim_reent+0x98>
 8026d9c:	3504      	adds	r5, #4
 8026d9e:	2d80      	cmp	r5, #128	@ 0x80
 8026da0:	d1f7      	bne.n	8026d92 <_reclaim_reent+0x16>
 8026da2:	69e3      	ldr	r3, [r4, #28]
 8026da4:	4620      	mov	r0, r4
 8026da6:	68d9      	ldr	r1, [r3, #12]
 8026da8:	f000 f930 	bl	802700c <_free_r>
 8026dac:	69e3      	ldr	r3, [r4, #28]
 8026dae:	6819      	ldr	r1, [r3, #0]
 8026db0:	b111      	cbz	r1, 8026db8 <_reclaim_reent+0x3c>
 8026db2:	4620      	mov	r0, r4
 8026db4:	f000 f92a 	bl	802700c <_free_r>
 8026db8:	6961      	ldr	r1, [r4, #20]
 8026dba:	b111      	cbz	r1, 8026dc2 <_reclaim_reent+0x46>
 8026dbc:	4620      	mov	r0, r4
 8026dbe:	f000 f925 	bl	802700c <_free_r>
 8026dc2:	69e1      	ldr	r1, [r4, #28]
 8026dc4:	b111      	cbz	r1, 8026dcc <_reclaim_reent+0x50>
 8026dc6:	4620      	mov	r0, r4
 8026dc8:	f000 f920 	bl	802700c <_free_r>
 8026dcc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8026dce:	b111      	cbz	r1, 8026dd6 <_reclaim_reent+0x5a>
 8026dd0:	4620      	mov	r0, r4
 8026dd2:	f000 f91b 	bl	802700c <_free_r>
 8026dd6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8026dd8:	b111      	cbz	r1, 8026de0 <_reclaim_reent+0x64>
 8026dda:	4620      	mov	r0, r4
 8026ddc:	f000 f916 	bl	802700c <_free_r>
 8026de0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8026de2:	b111      	cbz	r1, 8026dea <_reclaim_reent+0x6e>
 8026de4:	4620      	mov	r0, r4
 8026de6:	f000 f911 	bl	802700c <_free_r>
 8026dea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8026dec:	b111      	cbz	r1, 8026df4 <_reclaim_reent+0x78>
 8026dee:	4620      	mov	r0, r4
 8026df0:	f000 f90c 	bl	802700c <_free_r>
 8026df4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8026df6:	b111      	cbz	r1, 8026dfe <_reclaim_reent+0x82>
 8026df8:	4620      	mov	r0, r4
 8026dfa:	f000 f907 	bl	802700c <_free_r>
 8026dfe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8026e00:	b111      	cbz	r1, 8026e08 <_reclaim_reent+0x8c>
 8026e02:	4620      	mov	r0, r4
 8026e04:	f000 f902 	bl	802700c <_free_r>
 8026e08:	6a23      	ldr	r3, [r4, #32]
 8026e0a:	b14b      	cbz	r3, 8026e20 <_reclaim_reent+0xa4>
 8026e0c:	4620      	mov	r0, r4
 8026e0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8026e12:	4718      	bx	r3
 8026e14:	680e      	ldr	r6, [r1, #0]
 8026e16:	4620      	mov	r0, r4
 8026e18:	f000 f8f8 	bl	802700c <_free_r>
 8026e1c:	4631      	mov	r1, r6
 8026e1e:	e7bb      	b.n	8026d98 <_reclaim_reent+0x1c>
 8026e20:	bd70      	pop	{r4, r5, r6, pc}
 8026e22:	bf00      	nop
 8026e24:	24000118 	.word	0x24000118

08026e28 <_lseek_r>:
 8026e28:	b538      	push	{r3, r4, r5, lr}
 8026e2a:	4d07      	ldr	r5, [pc, #28]	@ (8026e48 <_lseek_r+0x20>)
 8026e2c:	4604      	mov	r4, r0
 8026e2e:	4608      	mov	r0, r1
 8026e30:	4611      	mov	r1, r2
 8026e32:	2200      	movs	r2, #0
 8026e34:	602a      	str	r2, [r5, #0]
 8026e36:	461a      	mov	r2, r3
 8026e38:	f7da fe7a 	bl	8001b30 <_lseek>
 8026e3c:	1c43      	adds	r3, r0, #1
 8026e3e:	d102      	bne.n	8026e46 <_lseek_r+0x1e>
 8026e40:	682b      	ldr	r3, [r5, #0]
 8026e42:	b103      	cbz	r3, 8026e46 <_lseek_r+0x1e>
 8026e44:	6023      	str	r3, [r4, #0]
 8026e46:	bd38      	pop	{r3, r4, r5, pc}
 8026e48:	240269a0 	.word	0x240269a0

08026e4c <_read_r>:
 8026e4c:	b538      	push	{r3, r4, r5, lr}
 8026e4e:	4d07      	ldr	r5, [pc, #28]	@ (8026e6c <_read_r+0x20>)
 8026e50:	4604      	mov	r4, r0
 8026e52:	4608      	mov	r0, r1
 8026e54:	4611      	mov	r1, r2
 8026e56:	2200      	movs	r2, #0
 8026e58:	602a      	str	r2, [r5, #0]
 8026e5a:	461a      	mov	r2, r3
 8026e5c:	f7da fe42 	bl	8001ae4 <_read>
 8026e60:	1c43      	adds	r3, r0, #1
 8026e62:	d102      	bne.n	8026e6a <_read_r+0x1e>
 8026e64:	682b      	ldr	r3, [r5, #0]
 8026e66:	b103      	cbz	r3, 8026e6a <_read_r+0x1e>
 8026e68:	6023      	str	r3, [r4, #0]
 8026e6a:	bd38      	pop	{r3, r4, r5, pc}
 8026e6c:	240269a0 	.word	0x240269a0

08026e70 <_kill_r>:
 8026e70:	b538      	push	{r3, r4, r5, lr}
 8026e72:	4d07      	ldr	r5, [pc, #28]	@ (8026e90 <_kill_r+0x20>)
 8026e74:	2300      	movs	r3, #0
 8026e76:	4604      	mov	r4, r0
 8026e78:	4608      	mov	r0, r1
 8026e7a:	4611      	mov	r1, r2
 8026e7c:	602b      	str	r3, [r5, #0]
 8026e7e:	f7da fe23 	bl	8001ac8 <_kill>
 8026e82:	1c43      	adds	r3, r0, #1
 8026e84:	d102      	bne.n	8026e8c <_kill_r+0x1c>
 8026e86:	682b      	ldr	r3, [r5, #0]
 8026e88:	b103      	cbz	r3, 8026e8c <_kill_r+0x1c>
 8026e8a:	6023      	str	r3, [r4, #0]
 8026e8c:	bd38      	pop	{r3, r4, r5, pc}
 8026e8e:	bf00      	nop
 8026e90:	240269a0 	.word	0x240269a0

08026e94 <_getpid_r>:
 8026e94:	f7da be16 	b.w	8001ac4 <_getpid>

08026e98 <_sbrk_r>:
 8026e98:	b538      	push	{r3, r4, r5, lr}
 8026e9a:	4d06      	ldr	r5, [pc, #24]	@ (8026eb4 <_sbrk_r+0x1c>)
 8026e9c:	2300      	movs	r3, #0
 8026e9e:	4604      	mov	r4, r0
 8026ea0:	4608      	mov	r0, r1
 8026ea2:	602b      	str	r3, [r5, #0]
 8026ea4:	f7da fe46 	bl	8001b34 <_sbrk>
 8026ea8:	1c43      	adds	r3, r0, #1
 8026eaa:	d102      	bne.n	8026eb2 <_sbrk_r+0x1a>
 8026eac:	682b      	ldr	r3, [r5, #0]
 8026eae:	b103      	cbz	r3, 8026eb2 <_sbrk_r+0x1a>
 8026eb0:	6023      	str	r3, [r4, #0]
 8026eb2:	bd38      	pop	{r3, r4, r5, pc}
 8026eb4:	240269a0 	.word	0x240269a0

08026eb8 <_write_r>:
 8026eb8:	b538      	push	{r3, r4, r5, lr}
 8026eba:	4d07      	ldr	r5, [pc, #28]	@ (8026ed8 <_write_r+0x20>)
 8026ebc:	4604      	mov	r4, r0
 8026ebe:	4608      	mov	r0, r1
 8026ec0:	4611      	mov	r1, r2
 8026ec2:	2200      	movs	r2, #0
 8026ec4:	602a      	str	r2, [r5, #0]
 8026ec6:	461a      	mov	r2, r3
 8026ec8:	f7da fe1a 	bl	8001b00 <_write>
 8026ecc:	1c43      	adds	r3, r0, #1
 8026ece:	d102      	bne.n	8026ed6 <_write_r+0x1e>
 8026ed0:	682b      	ldr	r3, [r5, #0]
 8026ed2:	b103      	cbz	r3, 8026ed6 <_write_r+0x1e>
 8026ed4:	6023      	str	r3, [r4, #0]
 8026ed6:	bd38      	pop	{r3, r4, r5, pc}
 8026ed8:	240269a0 	.word	0x240269a0

08026edc <__errno>:
 8026edc:	4b01      	ldr	r3, [pc, #4]	@ (8026ee4 <__errno+0x8>)
 8026ede:	6818      	ldr	r0, [r3, #0]
 8026ee0:	4770      	bx	lr
 8026ee2:	bf00      	nop
 8026ee4:	24000118 	.word	0x24000118

08026ee8 <__libc_init_array>:
 8026ee8:	b570      	push	{r4, r5, r6, lr}
 8026eea:	4d0d      	ldr	r5, [pc, #52]	@ (8026f20 <__libc_init_array+0x38>)
 8026eec:	4c0d      	ldr	r4, [pc, #52]	@ (8026f24 <__libc_init_array+0x3c>)
 8026eee:	1b64      	subs	r4, r4, r5
 8026ef0:	10a4      	asrs	r4, r4, #2
 8026ef2:	2600      	movs	r6, #0
 8026ef4:	42a6      	cmp	r6, r4
 8026ef6:	d109      	bne.n	8026f0c <__libc_init_array+0x24>
 8026ef8:	4d0b      	ldr	r5, [pc, #44]	@ (8026f28 <__libc_init_array+0x40>)
 8026efa:	4c0c      	ldr	r4, [pc, #48]	@ (8026f2c <__libc_init_array+0x44>)
 8026efc:	f000 fe5e 	bl	8027bbc <_init>
 8026f00:	1b64      	subs	r4, r4, r5
 8026f02:	10a4      	asrs	r4, r4, #2
 8026f04:	2600      	movs	r6, #0
 8026f06:	42a6      	cmp	r6, r4
 8026f08:	d105      	bne.n	8026f16 <__libc_init_array+0x2e>
 8026f0a:	bd70      	pop	{r4, r5, r6, pc}
 8026f0c:	f855 3b04 	ldr.w	r3, [r5], #4
 8026f10:	4798      	blx	r3
 8026f12:	3601      	adds	r6, #1
 8026f14:	e7ee      	b.n	8026ef4 <__libc_init_array+0xc>
 8026f16:	f855 3b04 	ldr.w	r3, [r5], #4
 8026f1a:	4798      	blx	r3
 8026f1c:	3601      	adds	r6, #1
 8026f1e:	e7f2      	b.n	8026f06 <__libc_init_array+0x1e>
 8026f20:	0802e6e4 	.word	0x0802e6e4
 8026f24:	0802e6e4 	.word	0x0802e6e4
 8026f28:	0802e6e4 	.word	0x0802e6e4
 8026f2c:	0802e704 	.word	0x0802e704

08026f30 <__retarget_lock_init_recursive>:
 8026f30:	4770      	bx	lr

08026f32 <__retarget_lock_acquire_recursive>:
 8026f32:	4770      	bx	lr

08026f34 <__retarget_lock_release_recursive>:
 8026f34:	4770      	bx	lr

08026f36 <memcpy>:
 8026f36:	440a      	add	r2, r1
 8026f38:	4291      	cmp	r1, r2
 8026f3a:	f100 33ff 	add.w	r3, r0, #4294967295
 8026f3e:	d100      	bne.n	8026f42 <memcpy+0xc>
 8026f40:	4770      	bx	lr
 8026f42:	b510      	push	{r4, lr}
 8026f44:	f811 4b01 	ldrb.w	r4, [r1], #1
 8026f48:	f803 4f01 	strb.w	r4, [r3, #1]!
 8026f4c:	4291      	cmp	r1, r2
 8026f4e:	d1f9      	bne.n	8026f44 <memcpy+0xe>
 8026f50:	bd10      	pop	{r4, pc}
	...

08026f54 <__register_exitproc>:
 8026f54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8026f58:	4d27      	ldr	r5, [pc, #156]	@ (8026ff8 <__register_exitproc+0xa4>)
 8026f5a:	4607      	mov	r7, r0
 8026f5c:	6828      	ldr	r0, [r5, #0]
 8026f5e:	4691      	mov	r9, r2
 8026f60:	460e      	mov	r6, r1
 8026f62:	4698      	mov	r8, r3
 8026f64:	f7ff ffe5 	bl	8026f32 <__retarget_lock_acquire_recursive>
 8026f68:	4a24      	ldr	r2, [pc, #144]	@ (8026ffc <__register_exitproc+0xa8>)
 8026f6a:	6814      	ldr	r4, [r2, #0]
 8026f6c:	b93c      	cbnz	r4, 8026f7e <__register_exitproc+0x2a>
 8026f6e:	4b24      	ldr	r3, [pc, #144]	@ (8027000 <__register_exitproc+0xac>)
 8026f70:	6013      	str	r3, [r2, #0]
 8026f72:	4a24      	ldr	r2, [pc, #144]	@ (8027004 <__register_exitproc+0xb0>)
 8026f74:	b112      	cbz	r2, 8026f7c <__register_exitproc+0x28>
 8026f76:	6812      	ldr	r2, [r2, #0]
 8026f78:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8026f7c:	4c20      	ldr	r4, [pc, #128]	@ (8027000 <__register_exitproc+0xac>)
 8026f7e:	6863      	ldr	r3, [r4, #4]
 8026f80:	2b1f      	cmp	r3, #31
 8026f82:	dd06      	ble.n	8026f92 <__register_exitproc+0x3e>
 8026f84:	6828      	ldr	r0, [r5, #0]
 8026f86:	f7ff ffd5 	bl	8026f34 <__retarget_lock_release_recursive>
 8026f8a:	f04f 30ff 	mov.w	r0, #4294967295
 8026f8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8026f92:	b32f      	cbz	r7, 8026fe0 <__register_exitproc+0x8c>
 8026f94:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8026f98:	b968      	cbnz	r0, 8026fb6 <__register_exitproc+0x62>
 8026f9a:	4b1b      	ldr	r3, [pc, #108]	@ (8027008 <__register_exitproc+0xb4>)
 8026f9c:	2b00      	cmp	r3, #0
 8026f9e:	d0f1      	beq.n	8026f84 <__register_exitproc+0x30>
 8026fa0:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8026fa4:	f7ff fbd0 	bl	8026748 <malloc>
 8026fa8:	2800      	cmp	r0, #0
 8026faa:	d0eb      	beq.n	8026f84 <__register_exitproc+0x30>
 8026fac:	2300      	movs	r3, #0
 8026fae:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8026fb2:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8026fb6:	6863      	ldr	r3, [r4, #4]
 8026fb8:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8026fbc:	2201      	movs	r2, #1
 8026fbe:	409a      	lsls	r2, r3
 8026fc0:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8026fc4:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8026fc8:	4313      	orrs	r3, r2
 8026fca:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8026fce:	2f02      	cmp	r7, #2
 8026fd0:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8026fd4:	bf02      	ittt	eq
 8026fd6:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8026fda:	4313      	orreq	r3, r2
 8026fdc:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8026fe0:	6863      	ldr	r3, [r4, #4]
 8026fe2:	6828      	ldr	r0, [r5, #0]
 8026fe4:	1c5a      	adds	r2, r3, #1
 8026fe6:	3302      	adds	r3, #2
 8026fe8:	6062      	str	r2, [r4, #4]
 8026fea:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8026fee:	f7ff ffa1 	bl	8026f34 <__retarget_lock_release_recursive>
 8026ff2:	2000      	movs	r0, #0
 8026ff4:	e7cb      	b.n	8026f8e <__register_exitproc+0x3a>
 8026ff6:	bf00      	nop
 8026ff8:	24000168 	.word	0x24000168
 8026ffc:	24026a34 	.word	0x24026a34
 8027000:	240269a8 	.word	0x240269a8
 8027004:	0802b8c4 	.word	0x0802b8c4
 8027008:	08026749 	.word	0x08026749

0802700c <_free_r>:
 802700c:	b538      	push	{r3, r4, r5, lr}
 802700e:	4605      	mov	r5, r0
 8027010:	2900      	cmp	r1, #0
 8027012:	d041      	beq.n	8027098 <_free_r+0x8c>
 8027014:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027018:	1f0c      	subs	r4, r1, #4
 802701a:	2b00      	cmp	r3, #0
 802701c:	bfb8      	it	lt
 802701e:	18e4      	addlt	r4, r4, r3
 8027020:	f7ff fc44 	bl	80268ac <__malloc_lock>
 8027024:	4a1d      	ldr	r2, [pc, #116]	@ (802709c <_free_r+0x90>)
 8027026:	6813      	ldr	r3, [r2, #0]
 8027028:	b933      	cbnz	r3, 8027038 <_free_r+0x2c>
 802702a:	6063      	str	r3, [r4, #4]
 802702c:	6014      	str	r4, [r2, #0]
 802702e:	4628      	mov	r0, r5
 8027030:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8027034:	f7ff bc40 	b.w	80268b8 <__malloc_unlock>
 8027038:	42a3      	cmp	r3, r4
 802703a:	d908      	bls.n	802704e <_free_r+0x42>
 802703c:	6820      	ldr	r0, [r4, #0]
 802703e:	1821      	adds	r1, r4, r0
 8027040:	428b      	cmp	r3, r1
 8027042:	bf01      	itttt	eq
 8027044:	6819      	ldreq	r1, [r3, #0]
 8027046:	685b      	ldreq	r3, [r3, #4]
 8027048:	1809      	addeq	r1, r1, r0
 802704a:	6021      	streq	r1, [r4, #0]
 802704c:	e7ed      	b.n	802702a <_free_r+0x1e>
 802704e:	461a      	mov	r2, r3
 8027050:	685b      	ldr	r3, [r3, #4]
 8027052:	b10b      	cbz	r3, 8027058 <_free_r+0x4c>
 8027054:	42a3      	cmp	r3, r4
 8027056:	d9fa      	bls.n	802704e <_free_r+0x42>
 8027058:	6811      	ldr	r1, [r2, #0]
 802705a:	1850      	adds	r0, r2, r1
 802705c:	42a0      	cmp	r0, r4
 802705e:	d10b      	bne.n	8027078 <_free_r+0x6c>
 8027060:	6820      	ldr	r0, [r4, #0]
 8027062:	4401      	add	r1, r0
 8027064:	1850      	adds	r0, r2, r1
 8027066:	4283      	cmp	r3, r0
 8027068:	6011      	str	r1, [r2, #0]
 802706a:	d1e0      	bne.n	802702e <_free_r+0x22>
 802706c:	6818      	ldr	r0, [r3, #0]
 802706e:	685b      	ldr	r3, [r3, #4]
 8027070:	6053      	str	r3, [r2, #4]
 8027072:	4408      	add	r0, r1
 8027074:	6010      	str	r0, [r2, #0]
 8027076:	e7da      	b.n	802702e <_free_r+0x22>
 8027078:	d902      	bls.n	8027080 <_free_r+0x74>
 802707a:	230c      	movs	r3, #12
 802707c:	602b      	str	r3, [r5, #0]
 802707e:	e7d6      	b.n	802702e <_free_r+0x22>
 8027080:	6820      	ldr	r0, [r4, #0]
 8027082:	1821      	adds	r1, r4, r0
 8027084:	428b      	cmp	r3, r1
 8027086:	bf04      	itt	eq
 8027088:	6819      	ldreq	r1, [r3, #0]
 802708a:	685b      	ldreq	r3, [r3, #4]
 802708c:	6063      	str	r3, [r4, #4]
 802708e:	bf04      	itt	eq
 8027090:	1809      	addeq	r1, r1, r0
 8027092:	6021      	streq	r1, [r4, #0]
 8027094:	6054      	str	r4, [r2, #4]
 8027096:	e7ca      	b.n	802702e <_free_r+0x22>
 8027098:	bd38      	pop	{r3, r4, r5, pc}
 802709a:	bf00      	nop
 802709c:	24026860 	.word	0x24026860

080270a0 <__ssputs_r>:
 80270a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80270a4:	688e      	ldr	r6, [r1, #8]
 80270a6:	461f      	mov	r7, r3
 80270a8:	42be      	cmp	r6, r7
 80270aa:	680b      	ldr	r3, [r1, #0]
 80270ac:	4682      	mov	sl, r0
 80270ae:	460c      	mov	r4, r1
 80270b0:	4690      	mov	r8, r2
 80270b2:	d82d      	bhi.n	8027110 <__ssputs_r+0x70>
 80270b4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80270b8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80270bc:	d026      	beq.n	802710c <__ssputs_r+0x6c>
 80270be:	6965      	ldr	r5, [r4, #20]
 80270c0:	6909      	ldr	r1, [r1, #16]
 80270c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80270c6:	eba3 0901 	sub.w	r9, r3, r1
 80270ca:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80270ce:	1c7b      	adds	r3, r7, #1
 80270d0:	444b      	add	r3, r9
 80270d2:	106d      	asrs	r5, r5, #1
 80270d4:	429d      	cmp	r5, r3
 80270d6:	bf38      	it	cc
 80270d8:	461d      	movcc	r5, r3
 80270da:	0553      	lsls	r3, r2, #21
 80270dc:	d527      	bpl.n	802712e <__ssputs_r+0x8e>
 80270de:	4629      	mov	r1, r5
 80270e0:	f7ff fb64 	bl	80267ac <_malloc_r>
 80270e4:	4606      	mov	r6, r0
 80270e6:	b360      	cbz	r0, 8027142 <__ssputs_r+0xa2>
 80270e8:	6921      	ldr	r1, [r4, #16]
 80270ea:	464a      	mov	r2, r9
 80270ec:	f7ff ff23 	bl	8026f36 <memcpy>
 80270f0:	89a3      	ldrh	r3, [r4, #12]
 80270f2:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80270f6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80270fa:	81a3      	strh	r3, [r4, #12]
 80270fc:	6126      	str	r6, [r4, #16]
 80270fe:	6165      	str	r5, [r4, #20]
 8027100:	444e      	add	r6, r9
 8027102:	eba5 0509 	sub.w	r5, r5, r9
 8027106:	6026      	str	r6, [r4, #0]
 8027108:	60a5      	str	r5, [r4, #8]
 802710a:	463e      	mov	r6, r7
 802710c:	42be      	cmp	r6, r7
 802710e:	d900      	bls.n	8027112 <__ssputs_r+0x72>
 8027110:	463e      	mov	r6, r7
 8027112:	6820      	ldr	r0, [r4, #0]
 8027114:	4632      	mov	r2, r6
 8027116:	4641      	mov	r1, r8
 8027118:	f7ff fdae 	bl	8026c78 <memmove>
 802711c:	68a3      	ldr	r3, [r4, #8]
 802711e:	1b9b      	subs	r3, r3, r6
 8027120:	60a3      	str	r3, [r4, #8]
 8027122:	6823      	ldr	r3, [r4, #0]
 8027124:	4433      	add	r3, r6
 8027126:	6023      	str	r3, [r4, #0]
 8027128:	2000      	movs	r0, #0
 802712a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802712e:	462a      	mov	r2, r5
 8027130:	f000 fd0e 	bl	8027b50 <_realloc_r>
 8027134:	4606      	mov	r6, r0
 8027136:	2800      	cmp	r0, #0
 8027138:	d1e0      	bne.n	80270fc <__ssputs_r+0x5c>
 802713a:	6921      	ldr	r1, [r4, #16]
 802713c:	4650      	mov	r0, sl
 802713e:	f7ff ff65 	bl	802700c <_free_r>
 8027142:	230c      	movs	r3, #12
 8027144:	f8ca 3000 	str.w	r3, [sl]
 8027148:	89a3      	ldrh	r3, [r4, #12]
 802714a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802714e:	81a3      	strh	r3, [r4, #12]
 8027150:	f04f 30ff 	mov.w	r0, #4294967295
 8027154:	e7e9      	b.n	802712a <__ssputs_r+0x8a>
	...

08027158 <_svfiprintf_r>:
 8027158:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802715c:	4698      	mov	r8, r3
 802715e:	898b      	ldrh	r3, [r1, #12]
 8027160:	061b      	lsls	r3, r3, #24
 8027162:	b09d      	sub	sp, #116	@ 0x74
 8027164:	4607      	mov	r7, r0
 8027166:	460d      	mov	r5, r1
 8027168:	4614      	mov	r4, r2
 802716a:	d510      	bpl.n	802718e <_svfiprintf_r+0x36>
 802716c:	690b      	ldr	r3, [r1, #16]
 802716e:	b973      	cbnz	r3, 802718e <_svfiprintf_r+0x36>
 8027170:	2140      	movs	r1, #64	@ 0x40
 8027172:	f7ff fb1b 	bl	80267ac <_malloc_r>
 8027176:	6028      	str	r0, [r5, #0]
 8027178:	6128      	str	r0, [r5, #16]
 802717a:	b930      	cbnz	r0, 802718a <_svfiprintf_r+0x32>
 802717c:	230c      	movs	r3, #12
 802717e:	603b      	str	r3, [r7, #0]
 8027180:	f04f 30ff 	mov.w	r0, #4294967295
 8027184:	b01d      	add	sp, #116	@ 0x74
 8027186:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802718a:	2340      	movs	r3, #64	@ 0x40
 802718c:	616b      	str	r3, [r5, #20]
 802718e:	2300      	movs	r3, #0
 8027190:	9309      	str	r3, [sp, #36]	@ 0x24
 8027192:	2320      	movs	r3, #32
 8027194:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8027198:	f8cd 800c 	str.w	r8, [sp, #12]
 802719c:	2330      	movs	r3, #48	@ 0x30
 802719e:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 802733c <_svfiprintf_r+0x1e4>
 80271a2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80271a6:	f04f 0901 	mov.w	r9, #1
 80271aa:	4623      	mov	r3, r4
 80271ac:	469a      	mov	sl, r3
 80271ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80271b2:	b10a      	cbz	r2, 80271b8 <_svfiprintf_r+0x60>
 80271b4:	2a25      	cmp	r2, #37	@ 0x25
 80271b6:	d1f9      	bne.n	80271ac <_svfiprintf_r+0x54>
 80271b8:	ebba 0b04 	subs.w	fp, sl, r4
 80271bc:	d00b      	beq.n	80271d6 <_svfiprintf_r+0x7e>
 80271be:	465b      	mov	r3, fp
 80271c0:	4622      	mov	r2, r4
 80271c2:	4629      	mov	r1, r5
 80271c4:	4638      	mov	r0, r7
 80271c6:	f7ff ff6b 	bl	80270a0 <__ssputs_r>
 80271ca:	3001      	adds	r0, #1
 80271cc:	f000 80a7 	beq.w	802731e <_svfiprintf_r+0x1c6>
 80271d0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80271d2:	445a      	add	r2, fp
 80271d4:	9209      	str	r2, [sp, #36]	@ 0x24
 80271d6:	f89a 3000 	ldrb.w	r3, [sl]
 80271da:	2b00      	cmp	r3, #0
 80271dc:	f000 809f 	beq.w	802731e <_svfiprintf_r+0x1c6>
 80271e0:	2300      	movs	r3, #0
 80271e2:	f04f 32ff 	mov.w	r2, #4294967295
 80271e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80271ea:	f10a 0a01 	add.w	sl, sl, #1
 80271ee:	9304      	str	r3, [sp, #16]
 80271f0:	9307      	str	r3, [sp, #28]
 80271f2:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80271f6:	931a      	str	r3, [sp, #104]	@ 0x68
 80271f8:	4654      	mov	r4, sl
 80271fa:	2205      	movs	r2, #5
 80271fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027200:	484e      	ldr	r0, [pc, #312]	@ (802733c <_svfiprintf_r+0x1e4>)
 8027202:	f7d9 f875 	bl	80002f0 <memchr>
 8027206:	9a04      	ldr	r2, [sp, #16]
 8027208:	b9d8      	cbnz	r0, 8027242 <_svfiprintf_r+0xea>
 802720a:	06d0      	lsls	r0, r2, #27
 802720c:	bf44      	itt	mi
 802720e:	2320      	movmi	r3, #32
 8027210:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027214:	0711      	lsls	r1, r2, #28
 8027216:	bf44      	itt	mi
 8027218:	232b      	movmi	r3, #43	@ 0x2b
 802721a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802721e:	f89a 3000 	ldrb.w	r3, [sl]
 8027222:	2b2a      	cmp	r3, #42	@ 0x2a
 8027224:	d015      	beq.n	8027252 <_svfiprintf_r+0xfa>
 8027226:	9a07      	ldr	r2, [sp, #28]
 8027228:	4654      	mov	r4, sl
 802722a:	2000      	movs	r0, #0
 802722c:	f04f 0c0a 	mov.w	ip, #10
 8027230:	4621      	mov	r1, r4
 8027232:	f811 3b01 	ldrb.w	r3, [r1], #1
 8027236:	3b30      	subs	r3, #48	@ 0x30
 8027238:	2b09      	cmp	r3, #9
 802723a:	d94b      	bls.n	80272d4 <_svfiprintf_r+0x17c>
 802723c:	b1b0      	cbz	r0, 802726c <_svfiprintf_r+0x114>
 802723e:	9207      	str	r2, [sp, #28]
 8027240:	e014      	b.n	802726c <_svfiprintf_r+0x114>
 8027242:	eba0 0308 	sub.w	r3, r0, r8
 8027246:	fa09 f303 	lsl.w	r3, r9, r3
 802724a:	4313      	orrs	r3, r2
 802724c:	9304      	str	r3, [sp, #16]
 802724e:	46a2      	mov	sl, r4
 8027250:	e7d2      	b.n	80271f8 <_svfiprintf_r+0xa0>
 8027252:	9b03      	ldr	r3, [sp, #12]
 8027254:	1d19      	adds	r1, r3, #4
 8027256:	681b      	ldr	r3, [r3, #0]
 8027258:	9103      	str	r1, [sp, #12]
 802725a:	2b00      	cmp	r3, #0
 802725c:	bfbb      	ittet	lt
 802725e:	425b      	neglt	r3, r3
 8027260:	f042 0202 	orrlt.w	r2, r2, #2
 8027264:	9307      	strge	r3, [sp, #28]
 8027266:	9307      	strlt	r3, [sp, #28]
 8027268:	bfb8      	it	lt
 802726a:	9204      	strlt	r2, [sp, #16]
 802726c:	7823      	ldrb	r3, [r4, #0]
 802726e:	2b2e      	cmp	r3, #46	@ 0x2e
 8027270:	d10a      	bne.n	8027288 <_svfiprintf_r+0x130>
 8027272:	7863      	ldrb	r3, [r4, #1]
 8027274:	2b2a      	cmp	r3, #42	@ 0x2a
 8027276:	d132      	bne.n	80272de <_svfiprintf_r+0x186>
 8027278:	9b03      	ldr	r3, [sp, #12]
 802727a:	1d1a      	adds	r2, r3, #4
 802727c:	681b      	ldr	r3, [r3, #0]
 802727e:	9203      	str	r2, [sp, #12]
 8027280:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8027284:	3402      	adds	r4, #2
 8027286:	9305      	str	r3, [sp, #20]
 8027288:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 802734c <_svfiprintf_r+0x1f4>
 802728c:	7821      	ldrb	r1, [r4, #0]
 802728e:	2203      	movs	r2, #3
 8027290:	4650      	mov	r0, sl
 8027292:	f7d9 f82d 	bl	80002f0 <memchr>
 8027296:	b138      	cbz	r0, 80272a8 <_svfiprintf_r+0x150>
 8027298:	9b04      	ldr	r3, [sp, #16]
 802729a:	eba0 000a 	sub.w	r0, r0, sl
 802729e:	2240      	movs	r2, #64	@ 0x40
 80272a0:	4082      	lsls	r2, r0
 80272a2:	4313      	orrs	r3, r2
 80272a4:	3401      	adds	r4, #1
 80272a6:	9304      	str	r3, [sp, #16]
 80272a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80272ac:	4824      	ldr	r0, [pc, #144]	@ (8027340 <_svfiprintf_r+0x1e8>)
 80272ae:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80272b2:	2206      	movs	r2, #6
 80272b4:	f7d9 f81c 	bl	80002f0 <memchr>
 80272b8:	2800      	cmp	r0, #0
 80272ba:	d036      	beq.n	802732a <_svfiprintf_r+0x1d2>
 80272bc:	4b21      	ldr	r3, [pc, #132]	@ (8027344 <_svfiprintf_r+0x1ec>)
 80272be:	bb1b      	cbnz	r3, 8027308 <_svfiprintf_r+0x1b0>
 80272c0:	9b03      	ldr	r3, [sp, #12]
 80272c2:	3307      	adds	r3, #7
 80272c4:	f023 0307 	bic.w	r3, r3, #7
 80272c8:	3308      	adds	r3, #8
 80272ca:	9303      	str	r3, [sp, #12]
 80272cc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80272ce:	4433      	add	r3, r6
 80272d0:	9309      	str	r3, [sp, #36]	@ 0x24
 80272d2:	e76a      	b.n	80271aa <_svfiprintf_r+0x52>
 80272d4:	fb0c 3202 	mla	r2, ip, r2, r3
 80272d8:	460c      	mov	r4, r1
 80272da:	2001      	movs	r0, #1
 80272dc:	e7a8      	b.n	8027230 <_svfiprintf_r+0xd8>
 80272de:	2300      	movs	r3, #0
 80272e0:	3401      	adds	r4, #1
 80272e2:	9305      	str	r3, [sp, #20]
 80272e4:	4619      	mov	r1, r3
 80272e6:	f04f 0c0a 	mov.w	ip, #10
 80272ea:	4620      	mov	r0, r4
 80272ec:	f810 2b01 	ldrb.w	r2, [r0], #1
 80272f0:	3a30      	subs	r2, #48	@ 0x30
 80272f2:	2a09      	cmp	r2, #9
 80272f4:	d903      	bls.n	80272fe <_svfiprintf_r+0x1a6>
 80272f6:	2b00      	cmp	r3, #0
 80272f8:	d0c6      	beq.n	8027288 <_svfiprintf_r+0x130>
 80272fa:	9105      	str	r1, [sp, #20]
 80272fc:	e7c4      	b.n	8027288 <_svfiprintf_r+0x130>
 80272fe:	fb0c 2101 	mla	r1, ip, r1, r2
 8027302:	4604      	mov	r4, r0
 8027304:	2301      	movs	r3, #1
 8027306:	e7f0      	b.n	80272ea <_svfiprintf_r+0x192>
 8027308:	ab03      	add	r3, sp, #12
 802730a:	9300      	str	r3, [sp, #0]
 802730c:	462a      	mov	r2, r5
 802730e:	4b0e      	ldr	r3, [pc, #56]	@ (8027348 <_svfiprintf_r+0x1f0>)
 8027310:	a904      	add	r1, sp, #16
 8027312:	4638      	mov	r0, r7
 8027314:	f3af 8000 	nop.w
 8027318:	1c42      	adds	r2, r0, #1
 802731a:	4606      	mov	r6, r0
 802731c:	d1d6      	bne.n	80272cc <_svfiprintf_r+0x174>
 802731e:	89ab      	ldrh	r3, [r5, #12]
 8027320:	065b      	lsls	r3, r3, #25
 8027322:	f53f af2d 	bmi.w	8027180 <_svfiprintf_r+0x28>
 8027326:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8027328:	e72c      	b.n	8027184 <_svfiprintf_r+0x2c>
 802732a:	ab03      	add	r3, sp, #12
 802732c:	9300      	str	r3, [sp, #0]
 802732e:	462a      	mov	r2, r5
 8027330:	4b05      	ldr	r3, [pc, #20]	@ (8027348 <_svfiprintf_r+0x1f0>)
 8027332:	a904      	add	r1, sp, #16
 8027334:	4638      	mov	r0, r7
 8027336:	f000 f9bb 	bl	80276b0 <_printf_i>
 802733a:	e7ed      	b.n	8027318 <_svfiprintf_r+0x1c0>
 802733c:	0802b8c8 	.word	0x0802b8c8
 8027340:	0802b8d2 	.word	0x0802b8d2
 8027344:	00000000 	.word	0x00000000
 8027348:	080270a1 	.word	0x080270a1
 802734c:	0802b8ce 	.word	0x0802b8ce

08027350 <__sfputc_r>:
 8027350:	6893      	ldr	r3, [r2, #8]
 8027352:	3b01      	subs	r3, #1
 8027354:	2b00      	cmp	r3, #0
 8027356:	b410      	push	{r4}
 8027358:	6093      	str	r3, [r2, #8]
 802735a:	da08      	bge.n	802736e <__sfputc_r+0x1e>
 802735c:	6994      	ldr	r4, [r2, #24]
 802735e:	42a3      	cmp	r3, r4
 8027360:	db01      	blt.n	8027366 <__sfputc_r+0x16>
 8027362:	290a      	cmp	r1, #10
 8027364:	d103      	bne.n	802736e <__sfputc_r+0x1e>
 8027366:	f85d 4b04 	ldr.w	r4, [sp], #4
 802736a:	f7ff bbf0 	b.w	8026b4e <__swbuf_r>
 802736e:	6813      	ldr	r3, [r2, #0]
 8027370:	1c58      	adds	r0, r3, #1
 8027372:	6010      	str	r0, [r2, #0]
 8027374:	7019      	strb	r1, [r3, #0]
 8027376:	4608      	mov	r0, r1
 8027378:	f85d 4b04 	ldr.w	r4, [sp], #4
 802737c:	4770      	bx	lr

0802737e <__sfputs_r>:
 802737e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027380:	4606      	mov	r6, r0
 8027382:	460f      	mov	r7, r1
 8027384:	4614      	mov	r4, r2
 8027386:	18d5      	adds	r5, r2, r3
 8027388:	42ac      	cmp	r4, r5
 802738a:	d101      	bne.n	8027390 <__sfputs_r+0x12>
 802738c:	2000      	movs	r0, #0
 802738e:	e007      	b.n	80273a0 <__sfputs_r+0x22>
 8027390:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027394:	463a      	mov	r2, r7
 8027396:	4630      	mov	r0, r6
 8027398:	f7ff ffda 	bl	8027350 <__sfputc_r>
 802739c:	1c43      	adds	r3, r0, #1
 802739e:	d1f3      	bne.n	8027388 <__sfputs_r+0xa>
 80273a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080273a4 <_vfiprintf_r>:
 80273a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80273a8:	460d      	mov	r5, r1
 80273aa:	b09d      	sub	sp, #116	@ 0x74
 80273ac:	4614      	mov	r4, r2
 80273ae:	4698      	mov	r8, r3
 80273b0:	4606      	mov	r6, r0
 80273b2:	b118      	cbz	r0, 80273bc <_vfiprintf_r+0x18>
 80273b4:	6a03      	ldr	r3, [r0, #32]
 80273b6:	b90b      	cbnz	r3, 80273bc <_vfiprintf_r+0x18>
 80273b8:	f7ff fb1e 	bl	80269f8 <__sinit>
 80273bc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80273be:	07d9      	lsls	r1, r3, #31
 80273c0:	d405      	bmi.n	80273ce <_vfiprintf_r+0x2a>
 80273c2:	89ab      	ldrh	r3, [r5, #12]
 80273c4:	059a      	lsls	r2, r3, #22
 80273c6:	d402      	bmi.n	80273ce <_vfiprintf_r+0x2a>
 80273c8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80273ca:	f7ff fdb2 	bl	8026f32 <__retarget_lock_acquire_recursive>
 80273ce:	89ab      	ldrh	r3, [r5, #12]
 80273d0:	071b      	lsls	r3, r3, #28
 80273d2:	d501      	bpl.n	80273d8 <_vfiprintf_r+0x34>
 80273d4:	692b      	ldr	r3, [r5, #16]
 80273d6:	b99b      	cbnz	r3, 8027400 <_vfiprintf_r+0x5c>
 80273d8:	4629      	mov	r1, r5
 80273da:	4630      	mov	r0, r6
 80273dc:	f7ff fbf6 	bl	8026bcc <__swsetup_r>
 80273e0:	b170      	cbz	r0, 8027400 <_vfiprintf_r+0x5c>
 80273e2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80273e4:	07dc      	lsls	r4, r3, #31
 80273e6:	d504      	bpl.n	80273f2 <_vfiprintf_r+0x4e>
 80273e8:	f04f 30ff 	mov.w	r0, #4294967295
 80273ec:	b01d      	add	sp, #116	@ 0x74
 80273ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80273f2:	89ab      	ldrh	r3, [r5, #12]
 80273f4:	0598      	lsls	r0, r3, #22
 80273f6:	d4f7      	bmi.n	80273e8 <_vfiprintf_r+0x44>
 80273f8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80273fa:	f7ff fd9b 	bl	8026f34 <__retarget_lock_release_recursive>
 80273fe:	e7f3      	b.n	80273e8 <_vfiprintf_r+0x44>
 8027400:	2300      	movs	r3, #0
 8027402:	9309      	str	r3, [sp, #36]	@ 0x24
 8027404:	2320      	movs	r3, #32
 8027406:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802740a:	f8cd 800c 	str.w	r8, [sp, #12]
 802740e:	2330      	movs	r3, #48	@ 0x30
 8027410:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80275c0 <_vfiprintf_r+0x21c>
 8027414:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8027418:	f04f 0901 	mov.w	r9, #1
 802741c:	4623      	mov	r3, r4
 802741e:	469a      	mov	sl, r3
 8027420:	f813 2b01 	ldrb.w	r2, [r3], #1
 8027424:	b10a      	cbz	r2, 802742a <_vfiprintf_r+0x86>
 8027426:	2a25      	cmp	r2, #37	@ 0x25
 8027428:	d1f9      	bne.n	802741e <_vfiprintf_r+0x7a>
 802742a:	ebba 0b04 	subs.w	fp, sl, r4
 802742e:	d00b      	beq.n	8027448 <_vfiprintf_r+0xa4>
 8027430:	465b      	mov	r3, fp
 8027432:	4622      	mov	r2, r4
 8027434:	4629      	mov	r1, r5
 8027436:	4630      	mov	r0, r6
 8027438:	f7ff ffa1 	bl	802737e <__sfputs_r>
 802743c:	3001      	adds	r0, #1
 802743e:	f000 80a7 	beq.w	8027590 <_vfiprintf_r+0x1ec>
 8027442:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8027444:	445a      	add	r2, fp
 8027446:	9209      	str	r2, [sp, #36]	@ 0x24
 8027448:	f89a 3000 	ldrb.w	r3, [sl]
 802744c:	2b00      	cmp	r3, #0
 802744e:	f000 809f 	beq.w	8027590 <_vfiprintf_r+0x1ec>
 8027452:	2300      	movs	r3, #0
 8027454:	f04f 32ff 	mov.w	r2, #4294967295
 8027458:	e9cd 2305 	strd	r2, r3, [sp, #20]
 802745c:	f10a 0a01 	add.w	sl, sl, #1
 8027460:	9304      	str	r3, [sp, #16]
 8027462:	9307      	str	r3, [sp, #28]
 8027464:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8027468:	931a      	str	r3, [sp, #104]	@ 0x68
 802746a:	4654      	mov	r4, sl
 802746c:	2205      	movs	r2, #5
 802746e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8027472:	4853      	ldr	r0, [pc, #332]	@ (80275c0 <_vfiprintf_r+0x21c>)
 8027474:	f7d8 ff3c 	bl	80002f0 <memchr>
 8027478:	9a04      	ldr	r2, [sp, #16]
 802747a:	b9d8      	cbnz	r0, 80274b4 <_vfiprintf_r+0x110>
 802747c:	06d1      	lsls	r1, r2, #27
 802747e:	bf44      	itt	mi
 8027480:	2320      	movmi	r3, #32
 8027482:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027486:	0713      	lsls	r3, r2, #28
 8027488:	bf44      	itt	mi
 802748a:	232b      	movmi	r3, #43	@ 0x2b
 802748c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8027490:	f89a 3000 	ldrb.w	r3, [sl]
 8027494:	2b2a      	cmp	r3, #42	@ 0x2a
 8027496:	d015      	beq.n	80274c4 <_vfiprintf_r+0x120>
 8027498:	9a07      	ldr	r2, [sp, #28]
 802749a:	4654      	mov	r4, sl
 802749c:	2000      	movs	r0, #0
 802749e:	f04f 0c0a 	mov.w	ip, #10
 80274a2:	4621      	mov	r1, r4
 80274a4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80274a8:	3b30      	subs	r3, #48	@ 0x30
 80274aa:	2b09      	cmp	r3, #9
 80274ac:	d94b      	bls.n	8027546 <_vfiprintf_r+0x1a2>
 80274ae:	b1b0      	cbz	r0, 80274de <_vfiprintf_r+0x13a>
 80274b0:	9207      	str	r2, [sp, #28]
 80274b2:	e014      	b.n	80274de <_vfiprintf_r+0x13a>
 80274b4:	eba0 0308 	sub.w	r3, r0, r8
 80274b8:	fa09 f303 	lsl.w	r3, r9, r3
 80274bc:	4313      	orrs	r3, r2
 80274be:	9304      	str	r3, [sp, #16]
 80274c0:	46a2      	mov	sl, r4
 80274c2:	e7d2      	b.n	802746a <_vfiprintf_r+0xc6>
 80274c4:	9b03      	ldr	r3, [sp, #12]
 80274c6:	1d19      	adds	r1, r3, #4
 80274c8:	681b      	ldr	r3, [r3, #0]
 80274ca:	9103      	str	r1, [sp, #12]
 80274cc:	2b00      	cmp	r3, #0
 80274ce:	bfbb      	ittet	lt
 80274d0:	425b      	neglt	r3, r3
 80274d2:	f042 0202 	orrlt.w	r2, r2, #2
 80274d6:	9307      	strge	r3, [sp, #28]
 80274d8:	9307      	strlt	r3, [sp, #28]
 80274da:	bfb8      	it	lt
 80274dc:	9204      	strlt	r2, [sp, #16]
 80274de:	7823      	ldrb	r3, [r4, #0]
 80274e0:	2b2e      	cmp	r3, #46	@ 0x2e
 80274e2:	d10a      	bne.n	80274fa <_vfiprintf_r+0x156>
 80274e4:	7863      	ldrb	r3, [r4, #1]
 80274e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80274e8:	d132      	bne.n	8027550 <_vfiprintf_r+0x1ac>
 80274ea:	9b03      	ldr	r3, [sp, #12]
 80274ec:	1d1a      	adds	r2, r3, #4
 80274ee:	681b      	ldr	r3, [r3, #0]
 80274f0:	9203      	str	r2, [sp, #12]
 80274f2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80274f6:	3402      	adds	r4, #2
 80274f8:	9305      	str	r3, [sp, #20]
 80274fa:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80275d0 <_vfiprintf_r+0x22c>
 80274fe:	7821      	ldrb	r1, [r4, #0]
 8027500:	2203      	movs	r2, #3
 8027502:	4650      	mov	r0, sl
 8027504:	f7d8 fef4 	bl	80002f0 <memchr>
 8027508:	b138      	cbz	r0, 802751a <_vfiprintf_r+0x176>
 802750a:	9b04      	ldr	r3, [sp, #16]
 802750c:	eba0 000a 	sub.w	r0, r0, sl
 8027510:	2240      	movs	r2, #64	@ 0x40
 8027512:	4082      	lsls	r2, r0
 8027514:	4313      	orrs	r3, r2
 8027516:	3401      	adds	r4, #1
 8027518:	9304      	str	r3, [sp, #16]
 802751a:	f814 1b01 	ldrb.w	r1, [r4], #1
 802751e:	4829      	ldr	r0, [pc, #164]	@ (80275c4 <_vfiprintf_r+0x220>)
 8027520:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8027524:	2206      	movs	r2, #6
 8027526:	f7d8 fee3 	bl	80002f0 <memchr>
 802752a:	2800      	cmp	r0, #0
 802752c:	d03f      	beq.n	80275ae <_vfiprintf_r+0x20a>
 802752e:	4b26      	ldr	r3, [pc, #152]	@ (80275c8 <_vfiprintf_r+0x224>)
 8027530:	bb1b      	cbnz	r3, 802757a <_vfiprintf_r+0x1d6>
 8027532:	9b03      	ldr	r3, [sp, #12]
 8027534:	3307      	adds	r3, #7
 8027536:	f023 0307 	bic.w	r3, r3, #7
 802753a:	3308      	adds	r3, #8
 802753c:	9303      	str	r3, [sp, #12]
 802753e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8027540:	443b      	add	r3, r7
 8027542:	9309      	str	r3, [sp, #36]	@ 0x24
 8027544:	e76a      	b.n	802741c <_vfiprintf_r+0x78>
 8027546:	fb0c 3202 	mla	r2, ip, r2, r3
 802754a:	460c      	mov	r4, r1
 802754c:	2001      	movs	r0, #1
 802754e:	e7a8      	b.n	80274a2 <_vfiprintf_r+0xfe>
 8027550:	2300      	movs	r3, #0
 8027552:	3401      	adds	r4, #1
 8027554:	9305      	str	r3, [sp, #20]
 8027556:	4619      	mov	r1, r3
 8027558:	f04f 0c0a 	mov.w	ip, #10
 802755c:	4620      	mov	r0, r4
 802755e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8027562:	3a30      	subs	r2, #48	@ 0x30
 8027564:	2a09      	cmp	r2, #9
 8027566:	d903      	bls.n	8027570 <_vfiprintf_r+0x1cc>
 8027568:	2b00      	cmp	r3, #0
 802756a:	d0c6      	beq.n	80274fa <_vfiprintf_r+0x156>
 802756c:	9105      	str	r1, [sp, #20]
 802756e:	e7c4      	b.n	80274fa <_vfiprintf_r+0x156>
 8027570:	fb0c 2101 	mla	r1, ip, r1, r2
 8027574:	4604      	mov	r4, r0
 8027576:	2301      	movs	r3, #1
 8027578:	e7f0      	b.n	802755c <_vfiprintf_r+0x1b8>
 802757a:	ab03      	add	r3, sp, #12
 802757c:	9300      	str	r3, [sp, #0]
 802757e:	462a      	mov	r2, r5
 8027580:	4b12      	ldr	r3, [pc, #72]	@ (80275cc <_vfiprintf_r+0x228>)
 8027582:	a904      	add	r1, sp, #16
 8027584:	4630      	mov	r0, r6
 8027586:	f3af 8000 	nop.w
 802758a:	4607      	mov	r7, r0
 802758c:	1c78      	adds	r0, r7, #1
 802758e:	d1d6      	bne.n	802753e <_vfiprintf_r+0x19a>
 8027590:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8027592:	07d9      	lsls	r1, r3, #31
 8027594:	d405      	bmi.n	80275a2 <_vfiprintf_r+0x1fe>
 8027596:	89ab      	ldrh	r3, [r5, #12]
 8027598:	059a      	lsls	r2, r3, #22
 802759a:	d402      	bmi.n	80275a2 <_vfiprintf_r+0x1fe>
 802759c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 802759e:	f7ff fcc9 	bl	8026f34 <__retarget_lock_release_recursive>
 80275a2:	89ab      	ldrh	r3, [r5, #12]
 80275a4:	065b      	lsls	r3, r3, #25
 80275a6:	f53f af1f 	bmi.w	80273e8 <_vfiprintf_r+0x44>
 80275aa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80275ac:	e71e      	b.n	80273ec <_vfiprintf_r+0x48>
 80275ae:	ab03      	add	r3, sp, #12
 80275b0:	9300      	str	r3, [sp, #0]
 80275b2:	462a      	mov	r2, r5
 80275b4:	4b05      	ldr	r3, [pc, #20]	@ (80275cc <_vfiprintf_r+0x228>)
 80275b6:	a904      	add	r1, sp, #16
 80275b8:	4630      	mov	r0, r6
 80275ba:	f000 f879 	bl	80276b0 <_printf_i>
 80275be:	e7e4      	b.n	802758a <_vfiprintf_r+0x1e6>
 80275c0:	0802b8c8 	.word	0x0802b8c8
 80275c4:	0802b8d2 	.word	0x0802b8d2
 80275c8:	00000000 	.word	0x00000000
 80275cc:	0802737f 	.word	0x0802737f
 80275d0:	0802b8ce 	.word	0x0802b8ce

080275d4 <_printf_common>:
 80275d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80275d8:	4616      	mov	r6, r2
 80275da:	4698      	mov	r8, r3
 80275dc:	688a      	ldr	r2, [r1, #8]
 80275de:	690b      	ldr	r3, [r1, #16]
 80275e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80275e4:	4293      	cmp	r3, r2
 80275e6:	bfb8      	it	lt
 80275e8:	4613      	movlt	r3, r2
 80275ea:	6033      	str	r3, [r6, #0]
 80275ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80275f0:	4607      	mov	r7, r0
 80275f2:	460c      	mov	r4, r1
 80275f4:	b10a      	cbz	r2, 80275fa <_printf_common+0x26>
 80275f6:	3301      	adds	r3, #1
 80275f8:	6033      	str	r3, [r6, #0]
 80275fa:	6823      	ldr	r3, [r4, #0]
 80275fc:	0699      	lsls	r1, r3, #26
 80275fe:	bf42      	ittt	mi
 8027600:	6833      	ldrmi	r3, [r6, #0]
 8027602:	3302      	addmi	r3, #2
 8027604:	6033      	strmi	r3, [r6, #0]
 8027606:	6825      	ldr	r5, [r4, #0]
 8027608:	f015 0506 	ands.w	r5, r5, #6
 802760c:	d106      	bne.n	802761c <_printf_common+0x48>
 802760e:	f104 0a19 	add.w	sl, r4, #25
 8027612:	68e3      	ldr	r3, [r4, #12]
 8027614:	6832      	ldr	r2, [r6, #0]
 8027616:	1a9b      	subs	r3, r3, r2
 8027618:	42ab      	cmp	r3, r5
 802761a:	dc26      	bgt.n	802766a <_printf_common+0x96>
 802761c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8027620:	6822      	ldr	r2, [r4, #0]
 8027622:	3b00      	subs	r3, #0
 8027624:	bf18      	it	ne
 8027626:	2301      	movne	r3, #1
 8027628:	0692      	lsls	r2, r2, #26
 802762a:	d42b      	bmi.n	8027684 <_printf_common+0xb0>
 802762c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8027630:	4641      	mov	r1, r8
 8027632:	4638      	mov	r0, r7
 8027634:	47c8      	blx	r9
 8027636:	3001      	adds	r0, #1
 8027638:	d01e      	beq.n	8027678 <_printf_common+0xa4>
 802763a:	6823      	ldr	r3, [r4, #0]
 802763c:	6922      	ldr	r2, [r4, #16]
 802763e:	f003 0306 	and.w	r3, r3, #6
 8027642:	2b04      	cmp	r3, #4
 8027644:	bf02      	ittt	eq
 8027646:	68e5      	ldreq	r5, [r4, #12]
 8027648:	6833      	ldreq	r3, [r6, #0]
 802764a:	1aed      	subeq	r5, r5, r3
 802764c:	68a3      	ldr	r3, [r4, #8]
 802764e:	bf0c      	ite	eq
 8027650:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8027654:	2500      	movne	r5, #0
 8027656:	4293      	cmp	r3, r2
 8027658:	bfc4      	itt	gt
 802765a:	1a9b      	subgt	r3, r3, r2
 802765c:	18ed      	addgt	r5, r5, r3
 802765e:	2600      	movs	r6, #0
 8027660:	341a      	adds	r4, #26
 8027662:	42b5      	cmp	r5, r6
 8027664:	d11a      	bne.n	802769c <_printf_common+0xc8>
 8027666:	2000      	movs	r0, #0
 8027668:	e008      	b.n	802767c <_printf_common+0xa8>
 802766a:	2301      	movs	r3, #1
 802766c:	4652      	mov	r2, sl
 802766e:	4641      	mov	r1, r8
 8027670:	4638      	mov	r0, r7
 8027672:	47c8      	blx	r9
 8027674:	3001      	adds	r0, #1
 8027676:	d103      	bne.n	8027680 <_printf_common+0xac>
 8027678:	f04f 30ff 	mov.w	r0, #4294967295
 802767c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027680:	3501      	adds	r5, #1
 8027682:	e7c6      	b.n	8027612 <_printf_common+0x3e>
 8027684:	18e1      	adds	r1, r4, r3
 8027686:	1c5a      	adds	r2, r3, #1
 8027688:	2030      	movs	r0, #48	@ 0x30
 802768a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 802768e:	4422      	add	r2, r4
 8027690:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8027694:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8027698:	3302      	adds	r3, #2
 802769a:	e7c7      	b.n	802762c <_printf_common+0x58>
 802769c:	2301      	movs	r3, #1
 802769e:	4622      	mov	r2, r4
 80276a0:	4641      	mov	r1, r8
 80276a2:	4638      	mov	r0, r7
 80276a4:	47c8      	blx	r9
 80276a6:	3001      	adds	r0, #1
 80276a8:	d0e6      	beq.n	8027678 <_printf_common+0xa4>
 80276aa:	3601      	adds	r6, #1
 80276ac:	e7d9      	b.n	8027662 <_printf_common+0x8e>
	...

080276b0 <_printf_i>:
 80276b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80276b4:	7e0f      	ldrb	r7, [r1, #24]
 80276b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80276b8:	2f78      	cmp	r7, #120	@ 0x78
 80276ba:	4691      	mov	r9, r2
 80276bc:	4680      	mov	r8, r0
 80276be:	460c      	mov	r4, r1
 80276c0:	469a      	mov	sl, r3
 80276c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80276c6:	d807      	bhi.n	80276d8 <_printf_i+0x28>
 80276c8:	2f62      	cmp	r7, #98	@ 0x62
 80276ca:	d80a      	bhi.n	80276e2 <_printf_i+0x32>
 80276cc:	2f00      	cmp	r7, #0
 80276ce:	f000 80d2 	beq.w	8027876 <_printf_i+0x1c6>
 80276d2:	2f58      	cmp	r7, #88	@ 0x58
 80276d4:	f000 80b9 	beq.w	802784a <_printf_i+0x19a>
 80276d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80276dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80276e0:	e03a      	b.n	8027758 <_printf_i+0xa8>
 80276e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80276e6:	2b15      	cmp	r3, #21
 80276e8:	d8f6      	bhi.n	80276d8 <_printf_i+0x28>
 80276ea:	a101      	add	r1, pc, #4	@ (adr r1, 80276f0 <_printf_i+0x40>)
 80276ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80276f0:	08027749 	.word	0x08027749
 80276f4:	0802775d 	.word	0x0802775d
 80276f8:	080276d9 	.word	0x080276d9
 80276fc:	080276d9 	.word	0x080276d9
 8027700:	080276d9 	.word	0x080276d9
 8027704:	080276d9 	.word	0x080276d9
 8027708:	0802775d 	.word	0x0802775d
 802770c:	080276d9 	.word	0x080276d9
 8027710:	080276d9 	.word	0x080276d9
 8027714:	080276d9 	.word	0x080276d9
 8027718:	080276d9 	.word	0x080276d9
 802771c:	0802785d 	.word	0x0802785d
 8027720:	08027787 	.word	0x08027787
 8027724:	08027817 	.word	0x08027817
 8027728:	080276d9 	.word	0x080276d9
 802772c:	080276d9 	.word	0x080276d9
 8027730:	0802787f 	.word	0x0802787f
 8027734:	080276d9 	.word	0x080276d9
 8027738:	08027787 	.word	0x08027787
 802773c:	080276d9 	.word	0x080276d9
 8027740:	080276d9 	.word	0x080276d9
 8027744:	0802781f 	.word	0x0802781f
 8027748:	6833      	ldr	r3, [r6, #0]
 802774a:	1d1a      	adds	r2, r3, #4
 802774c:	681b      	ldr	r3, [r3, #0]
 802774e:	6032      	str	r2, [r6, #0]
 8027750:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8027754:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8027758:	2301      	movs	r3, #1
 802775a:	e09d      	b.n	8027898 <_printf_i+0x1e8>
 802775c:	6833      	ldr	r3, [r6, #0]
 802775e:	6820      	ldr	r0, [r4, #0]
 8027760:	1d19      	adds	r1, r3, #4
 8027762:	6031      	str	r1, [r6, #0]
 8027764:	0606      	lsls	r6, r0, #24
 8027766:	d501      	bpl.n	802776c <_printf_i+0xbc>
 8027768:	681d      	ldr	r5, [r3, #0]
 802776a:	e003      	b.n	8027774 <_printf_i+0xc4>
 802776c:	0645      	lsls	r5, r0, #25
 802776e:	d5fb      	bpl.n	8027768 <_printf_i+0xb8>
 8027770:	f9b3 5000 	ldrsh.w	r5, [r3]
 8027774:	2d00      	cmp	r5, #0
 8027776:	da03      	bge.n	8027780 <_printf_i+0xd0>
 8027778:	232d      	movs	r3, #45	@ 0x2d
 802777a:	426d      	negs	r5, r5
 802777c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8027780:	4859      	ldr	r0, [pc, #356]	@ (80278e8 <_printf_i+0x238>)
 8027782:	230a      	movs	r3, #10
 8027784:	e011      	b.n	80277aa <_printf_i+0xfa>
 8027786:	6821      	ldr	r1, [r4, #0]
 8027788:	6833      	ldr	r3, [r6, #0]
 802778a:	0608      	lsls	r0, r1, #24
 802778c:	f853 5b04 	ldr.w	r5, [r3], #4
 8027790:	d402      	bmi.n	8027798 <_printf_i+0xe8>
 8027792:	0649      	lsls	r1, r1, #25
 8027794:	bf48      	it	mi
 8027796:	b2ad      	uxthmi	r5, r5
 8027798:	2f6f      	cmp	r7, #111	@ 0x6f
 802779a:	4853      	ldr	r0, [pc, #332]	@ (80278e8 <_printf_i+0x238>)
 802779c:	6033      	str	r3, [r6, #0]
 802779e:	bf14      	ite	ne
 80277a0:	230a      	movne	r3, #10
 80277a2:	2308      	moveq	r3, #8
 80277a4:	2100      	movs	r1, #0
 80277a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80277aa:	6866      	ldr	r6, [r4, #4]
 80277ac:	60a6      	str	r6, [r4, #8]
 80277ae:	2e00      	cmp	r6, #0
 80277b0:	bfa2      	ittt	ge
 80277b2:	6821      	ldrge	r1, [r4, #0]
 80277b4:	f021 0104 	bicge.w	r1, r1, #4
 80277b8:	6021      	strge	r1, [r4, #0]
 80277ba:	b90d      	cbnz	r5, 80277c0 <_printf_i+0x110>
 80277bc:	2e00      	cmp	r6, #0
 80277be:	d04b      	beq.n	8027858 <_printf_i+0x1a8>
 80277c0:	4616      	mov	r6, r2
 80277c2:	fbb5 f1f3 	udiv	r1, r5, r3
 80277c6:	fb03 5711 	mls	r7, r3, r1, r5
 80277ca:	5dc7      	ldrb	r7, [r0, r7]
 80277cc:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80277d0:	462f      	mov	r7, r5
 80277d2:	42bb      	cmp	r3, r7
 80277d4:	460d      	mov	r5, r1
 80277d6:	d9f4      	bls.n	80277c2 <_printf_i+0x112>
 80277d8:	2b08      	cmp	r3, #8
 80277da:	d10b      	bne.n	80277f4 <_printf_i+0x144>
 80277dc:	6823      	ldr	r3, [r4, #0]
 80277de:	07df      	lsls	r7, r3, #31
 80277e0:	d508      	bpl.n	80277f4 <_printf_i+0x144>
 80277e2:	6923      	ldr	r3, [r4, #16]
 80277e4:	6861      	ldr	r1, [r4, #4]
 80277e6:	4299      	cmp	r1, r3
 80277e8:	bfde      	ittt	le
 80277ea:	2330      	movle	r3, #48	@ 0x30
 80277ec:	f806 3c01 	strble.w	r3, [r6, #-1]
 80277f0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80277f4:	1b92      	subs	r2, r2, r6
 80277f6:	6122      	str	r2, [r4, #16]
 80277f8:	f8cd a000 	str.w	sl, [sp]
 80277fc:	464b      	mov	r3, r9
 80277fe:	aa03      	add	r2, sp, #12
 8027800:	4621      	mov	r1, r4
 8027802:	4640      	mov	r0, r8
 8027804:	f7ff fee6 	bl	80275d4 <_printf_common>
 8027808:	3001      	adds	r0, #1
 802780a:	d14a      	bne.n	80278a2 <_printf_i+0x1f2>
 802780c:	f04f 30ff 	mov.w	r0, #4294967295
 8027810:	b004      	add	sp, #16
 8027812:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8027816:	6823      	ldr	r3, [r4, #0]
 8027818:	f043 0320 	orr.w	r3, r3, #32
 802781c:	6023      	str	r3, [r4, #0]
 802781e:	4833      	ldr	r0, [pc, #204]	@ (80278ec <_printf_i+0x23c>)
 8027820:	2778      	movs	r7, #120	@ 0x78
 8027822:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8027826:	6823      	ldr	r3, [r4, #0]
 8027828:	6831      	ldr	r1, [r6, #0]
 802782a:	061f      	lsls	r7, r3, #24
 802782c:	f851 5b04 	ldr.w	r5, [r1], #4
 8027830:	d402      	bmi.n	8027838 <_printf_i+0x188>
 8027832:	065f      	lsls	r7, r3, #25
 8027834:	bf48      	it	mi
 8027836:	b2ad      	uxthmi	r5, r5
 8027838:	6031      	str	r1, [r6, #0]
 802783a:	07d9      	lsls	r1, r3, #31
 802783c:	bf44      	itt	mi
 802783e:	f043 0320 	orrmi.w	r3, r3, #32
 8027842:	6023      	strmi	r3, [r4, #0]
 8027844:	b11d      	cbz	r5, 802784e <_printf_i+0x19e>
 8027846:	2310      	movs	r3, #16
 8027848:	e7ac      	b.n	80277a4 <_printf_i+0xf4>
 802784a:	4827      	ldr	r0, [pc, #156]	@ (80278e8 <_printf_i+0x238>)
 802784c:	e7e9      	b.n	8027822 <_printf_i+0x172>
 802784e:	6823      	ldr	r3, [r4, #0]
 8027850:	f023 0320 	bic.w	r3, r3, #32
 8027854:	6023      	str	r3, [r4, #0]
 8027856:	e7f6      	b.n	8027846 <_printf_i+0x196>
 8027858:	4616      	mov	r6, r2
 802785a:	e7bd      	b.n	80277d8 <_printf_i+0x128>
 802785c:	6833      	ldr	r3, [r6, #0]
 802785e:	6825      	ldr	r5, [r4, #0]
 8027860:	6961      	ldr	r1, [r4, #20]
 8027862:	1d18      	adds	r0, r3, #4
 8027864:	6030      	str	r0, [r6, #0]
 8027866:	062e      	lsls	r6, r5, #24
 8027868:	681b      	ldr	r3, [r3, #0]
 802786a:	d501      	bpl.n	8027870 <_printf_i+0x1c0>
 802786c:	6019      	str	r1, [r3, #0]
 802786e:	e002      	b.n	8027876 <_printf_i+0x1c6>
 8027870:	0668      	lsls	r0, r5, #25
 8027872:	d5fb      	bpl.n	802786c <_printf_i+0x1bc>
 8027874:	8019      	strh	r1, [r3, #0]
 8027876:	2300      	movs	r3, #0
 8027878:	6123      	str	r3, [r4, #16]
 802787a:	4616      	mov	r6, r2
 802787c:	e7bc      	b.n	80277f8 <_printf_i+0x148>
 802787e:	6833      	ldr	r3, [r6, #0]
 8027880:	1d1a      	adds	r2, r3, #4
 8027882:	6032      	str	r2, [r6, #0]
 8027884:	681e      	ldr	r6, [r3, #0]
 8027886:	6862      	ldr	r2, [r4, #4]
 8027888:	2100      	movs	r1, #0
 802788a:	4630      	mov	r0, r6
 802788c:	f7d8 fd30 	bl	80002f0 <memchr>
 8027890:	b108      	cbz	r0, 8027896 <_printf_i+0x1e6>
 8027892:	1b80      	subs	r0, r0, r6
 8027894:	6060      	str	r0, [r4, #4]
 8027896:	6863      	ldr	r3, [r4, #4]
 8027898:	6123      	str	r3, [r4, #16]
 802789a:	2300      	movs	r3, #0
 802789c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80278a0:	e7aa      	b.n	80277f8 <_printf_i+0x148>
 80278a2:	6923      	ldr	r3, [r4, #16]
 80278a4:	4632      	mov	r2, r6
 80278a6:	4649      	mov	r1, r9
 80278a8:	4640      	mov	r0, r8
 80278aa:	47d0      	blx	sl
 80278ac:	3001      	adds	r0, #1
 80278ae:	d0ad      	beq.n	802780c <_printf_i+0x15c>
 80278b0:	6823      	ldr	r3, [r4, #0]
 80278b2:	079b      	lsls	r3, r3, #30
 80278b4:	d413      	bmi.n	80278de <_printf_i+0x22e>
 80278b6:	68e0      	ldr	r0, [r4, #12]
 80278b8:	9b03      	ldr	r3, [sp, #12]
 80278ba:	4298      	cmp	r0, r3
 80278bc:	bfb8      	it	lt
 80278be:	4618      	movlt	r0, r3
 80278c0:	e7a6      	b.n	8027810 <_printf_i+0x160>
 80278c2:	2301      	movs	r3, #1
 80278c4:	4632      	mov	r2, r6
 80278c6:	4649      	mov	r1, r9
 80278c8:	4640      	mov	r0, r8
 80278ca:	47d0      	blx	sl
 80278cc:	3001      	adds	r0, #1
 80278ce:	d09d      	beq.n	802780c <_printf_i+0x15c>
 80278d0:	3501      	adds	r5, #1
 80278d2:	68e3      	ldr	r3, [r4, #12]
 80278d4:	9903      	ldr	r1, [sp, #12]
 80278d6:	1a5b      	subs	r3, r3, r1
 80278d8:	42ab      	cmp	r3, r5
 80278da:	dcf2      	bgt.n	80278c2 <_printf_i+0x212>
 80278dc:	e7eb      	b.n	80278b6 <_printf_i+0x206>
 80278de:	2500      	movs	r5, #0
 80278e0:	f104 0619 	add.w	r6, r4, #25
 80278e4:	e7f5      	b.n	80278d2 <_printf_i+0x222>
 80278e6:	bf00      	nop
 80278e8:	0802b8d9 	.word	0x0802b8d9
 80278ec:	0802b8ea 	.word	0x0802b8ea

080278f0 <__sflush_r>:
 80278f0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80278f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80278f8:	0716      	lsls	r6, r2, #28
 80278fa:	4605      	mov	r5, r0
 80278fc:	460c      	mov	r4, r1
 80278fe:	d454      	bmi.n	80279aa <__sflush_r+0xba>
 8027900:	684b      	ldr	r3, [r1, #4]
 8027902:	2b00      	cmp	r3, #0
 8027904:	dc02      	bgt.n	802790c <__sflush_r+0x1c>
 8027906:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8027908:	2b00      	cmp	r3, #0
 802790a:	dd48      	ble.n	802799e <__sflush_r+0xae>
 802790c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802790e:	2e00      	cmp	r6, #0
 8027910:	d045      	beq.n	802799e <__sflush_r+0xae>
 8027912:	2300      	movs	r3, #0
 8027914:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8027918:	682f      	ldr	r7, [r5, #0]
 802791a:	6a21      	ldr	r1, [r4, #32]
 802791c:	602b      	str	r3, [r5, #0]
 802791e:	d030      	beq.n	8027982 <__sflush_r+0x92>
 8027920:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8027922:	89a3      	ldrh	r3, [r4, #12]
 8027924:	0759      	lsls	r1, r3, #29
 8027926:	d505      	bpl.n	8027934 <__sflush_r+0x44>
 8027928:	6863      	ldr	r3, [r4, #4]
 802792a:	1ad2      	subs	r2, r2, r3
 802792c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 802792e:	b10b      	cbz	r3, 8027934 <__sflush_r+0x44>
 8027930:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8027932:	1ad2      	subs	r2, r2, r3
 8027934:	2300      	movs	r3, #0
 8027936:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8027938:	6a21      	ldr	r1, [r4, #32]
 802793a:	4628      	mov	r0, r5
 802793c:	47b0      	blx	r6
 802793e:	1c43      	adds	r3, r0, #1
 8027940:	89a3      	ldrh	r3, [r4, #12]
 8027942:	d106      	bne.n	8027952 <__sflush_r+0x62>
 8027944:	6829      	ldr	r1, [r5, #0]
 8027946:	291d      	cmp	r1, #29
 8027948:	d82b      	bhi.n	80279a2 <__sflush_r+0xb2>
 802794a:	4a2a      	ldr	r2, [pc, #168]	@ (80279f4 <__sflush_r+0x104>)
 802794c:	410a      	asrs	r2, r1
 802794e:	07d6      	lsls	r6, r2, #31
 8027950:	d427      	bmi.n	80279a2 <__sflush_r+0xb2>
 8027952:	2200      	movs	r2, #0
 8027954:	6062      	str	r2, [r4, #4]
 8027956:	04d9      	lsls	r1, r3, #19
 8027958:	6922      	ldr	r2, [r4, #16]
 802795a:	6022      	str	r2, [r4, #0]
 802795c:	d504      	bpl.n	8027968 <__sflush_r+0x78>
 802795e:	1c42      	adds	r2, r0, #1
 8027960:	d101      	bne.n	8027966 <__sflush_r+0x76>
 8027962:	682b      	ldr	r3, [r5, #0]
 8027964:	b903      	cbnz	r3, 8027968 <__sflush_r+0x78>
 8027966:	6560      	str	r0, [r4, #84]	@ 0x54
 8027968:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802796a:	602f      	str	r7, [r5, #0]
 802796c:	b1b9      	cbz	r1, 802799e <__sflush_r+0xae>
 802796e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8027972:	4299      	cmp	r1, r3
 8027974:	d002      	beq.n	802797c <__sflush_r+0x8c>
 8027976:	4628      	mov	r0, r5
 8027978:	f7ff fb48 	bl	802700c <_free_r>
 802797c:	2300      	movs	r3, #0
 802797e:	6363      	str	r3, [r4, #52]	@ 0x34
 8027980:	e00d      	b.n	802799e <__sflush_r+0xae>
 8027982:	2301      	movs	r3, #1
 8027984:	4628      	mov	r0, r5
 8027986:	47b0      	blx	r6
 8027988:	4602      	mov	r2, r0
 802798a:	1c50      	adds	r0, r2, #1
 802798c:	d1c9      	bne.n	8027922 <__sflush_r+0x32>
 802798e:	682b      	ldr	r3, [r5, #0]
 8027990:	2b00      	cmp	r3, #0
 8027992:	d0c6      	beq.n	8027922 <__sflush_r+0x32>
 8027994:	2b1d      	cmp	r3, #29
 8027996:	d001      	beq.n	802799c <__sflush_r+0xac>
 8027998:	2b16      	cmp	r3, #22
 802799a:	d11e      	bne.n	80279da <__sflush_r+0xea>
 802799c:	602f      	str	r7, [r5, #0]
 802799e:	2000      	movs	r0, #0
 80279a0:	e022      	b.n	80279e8 <__sflush_r+0xf8>
 80279a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80279a6:	b21b      	sxth	r3, r3
 80279a8:	e01b      	b.n	80279e2 <__sflush_r+0xf2>
 80279aa:	690f      	ldr	r7, [r1, #16]
 80279ac:	2f00      	cmp	r7, #0
 80279ae:	d0f6      	beq.n	802799e <__sflush_r+0xae>
 80279b0:	0793      	lsls	r3, r2, #30
 80279b2:	680e      	ldr	r6, [r1, #0]
 80279b4:	bf08      	it	eq
 80279b6:	694b      	ldreq	r3, [r1, #20]
 80279b8:	600f      	str	r7, [r1, #0]
 80279ba:	bf18      	it	ne
 80279bc:	2300      	movne	r3, #0
 80279be:	eba6 0807 	sub.w	r8, r6, r7
 80279c2:	608b      	str	r3, [r1, #8]
 80279c4:	f1b8 0f00 	cmp.w	r8, #0
 80279c8:	dde9      	ble.n	802799e <__sflush_r+0xae>
 80279ca:	6a21      	ldr	r1, [r4, #32]
 80279cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80279ce:	4643      	mov	r3, r8
 80279d0:	463a      	mov	r2, r7
 80279d2:	4628      	mov	r0, r5
 80279d4:	47b0      	blx	r6
 80279d6:	2800      	cmp	r0, #0
 80279d8:	dc08      	bgt.n	80279ec <__sflush_r+0xfc>
 80279da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80279de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80279e2:	81a3      	strh	r3, [r4, #12]
 80279e4:	f04f 30ff 	mov.w	r0, #4294967295
 80279e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80279ec:	4407      	add	r7, r0
 80279ee:	eba8 0800 	sub.w	r8, r8, r0
 80279f2:	e7e7      	b.n	80279c4 <__sflush_r+0xd4>
 80279f4:	dfbffffe 	.word	0xdfbffffe

080279f8 <_fflush_r>:
 80279f8:	b538      	push	{r3, r4, r5, lr}
 80279fa:	690b      	ldr	r3, [r1, #16]
 80279fc:	4605      	mov	r5, r0
 80279fe:	460c      	mov	r4, r1
 8027a00:	b913      	cbnz	r3, 8027a08 <_fflush_r+0x10>
 8027a02:	2500      	movs	r5, #0
 8027a04:	4628      	mov	r0, r5
 8027a06:	bd38      	pop	{r3, r4, r5, pc}
 8027a08:	b118      	cbz	r0, 8027a12 <_fflush_r+0x1a>
 8027a0a:	6a03      	ldr	r3, [r0, #32]
 8027a0c:	b90b      	cbnz	r3, 8027a12 <_fflush_r+0x1a>
 8027a0e:	f7fe fff3 	bl	80269f8 <__sinit>
 8027a12:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027a16:	2b00      	cmp	r3, #0
 8027a18:	d0f3      	beq.n	8027a02 <_fflush_r+0xa>
 8027a1a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8027a1c:	07d0      	lsls	r0, r2, #31
 8027a1e:	d404      	bmi.n	8027a2a <_fflush_r+0x32>
 8027a20:	0599      	lsls	r1, r3, #22
 8027a22:	d402      	bmi.n	8027a2a <_fflush_r+0x32>
 8027a24:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027a26:	f7ff fa84 	bl	8026f32 <__retarget_lock_acquire_recursive>
 8027a2a:	4628      	mov	r0, r5
 8027a2c:	4621      	mov	r1, r4
 8027a2e:	f7ff ff5f 	bl	80278f0 <__sflush_r>
 8027a32:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8027a34:	07da      	lsls	r2, r3, #31
 8027a36:	4605      	mov	r5, r0
 8027a38:	d4e4      	bmi.n	8027a04 <_fflush_r+0xc>
 8027a3a:	89a3      	ldrh	r3, [r4, #12]
 8027a3c:	059b      	lsls	r3, r3, #22
 8027a3e:	d4e1      	bmi.n	8027a04 <_fflush_r+0xc>
 8027a40:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8027a42:	f7ff fa77 	bl	8026f34 <__retarget_lock_release_recursive>
 8027a46:	e7dd      	b.n	8027a04 <_fflush_r+0xc>

08027a48 <__swhatbuf_r>:
 8027a48:	b570      	push	{r4, r5, r6, lr}
 8027a4a:	460c      	mov	r4, r1
 8027a4c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8027a50:	2900      	cmp	r1, #0
 8027a52:	b096      	sub	sp, #88	@ 0x58
 8027a54:	4615      	mov	r5, r2
 8027a56:	461e      	mov	r6, r3
 8027a58:	da0d      	bge.n	8027a76 <__swhatbuf_r+0x2e>
 8027a5a:	89a3      	ldrh	r3, [r4, #12]
 8027a5c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8027a60:	f04f 0100 	mov.w	r1, #0
 8027a64:	bf14      	ite	ne
 8027a66:	2340      	movne	r3, #64	@ 0x40
 8027a68:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8027a6c:	2000      	movs	r0, #0
 8027a6e:	6031      	str	r1, [r6, #0]
 8027a70:	602b      	str	r3, [r5, #0]
 8027a72:	b016      	add	sp, #88	@ 0x58
 8027a74:	bd70      	pop	{r4, r5, r6, pc}
 8027a76:	466a      	mov	r2, sp
 8027a78:	f000 f848 	bl	8027b0c <_fstat_r>
 8027a7c:	2800      	cmp	r0, #0
 8027a7e:	dbec      	blt.n	8027a5a <__swhatbuf_r+0x12>
 8027a80:	9901      	ldr	r1, [sp, #4]
 8027a82:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8027a86:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8027a8a:	4259      	negs	r1, r3
 8027a8c:	4159      	adcs	r1, r3
 8027a8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8027a92:	e7eb      	b.n	8027a6c <__swhatbuf_r+0x24>

08027a94 <__smakebuf_r>:
 8027a94:	898b      	ldrh	r3, [r1, #12]
 8027a96:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8027a98:	079d      	lsls	r5, r3, #30
 8027a9a:	4606      	mov	r6, r0
 8027a9c:	460c      	mov	r4, r1
 8027a9e:	d507      	bpl.n	8027ab0 <__smakebuf_r+0x1c>
 8027aa0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8027aa4:	6023      	str	r3, [r4, #0]
 8027aa6:	6123      	str	r3, [r4, #16]
 8027aa8:	2301      	movs	r3, #1
 8027aaa:	6163      	str	r3, [r4, #20]
 8027aac:	b003      	add	sp, #12
 8027aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8027ab0:	ab01      	add	r3, sp, #4
 8027ab2:	466a      	mov	r2, sp
 8027ab4:	f7ff ffc8 	bl	8027a48 <__swhatbuf_r>
 8027ab8:	9f00      	ldr	r7, [sp, #0]
 8027aba:	4605      	mov	r5, r0
 8027abc:	4639      	mov	r1, r7
 8027abe:	4630      	mov	r0, r6
 8027ac0:	f7fe fe74 	bl	80267ac <_malloc_r>
 8027ac4:	b948      	cbnz	r0, 8027ada <__smakebuf_r+0x46>
 8027ac6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8027aca:	059a      	lsls	r2, r3, #22
 8027acc:	d4ee      	bmi.n	8027aac <__smakebuf_r+0x18>
 8027ace:	f023 0303 	bic.w	r3, r3, #3
 8027ad2:	f043 0302 	orr.w	r3, r3, #2
 8027ad6:	81a3      	strh	r3, [r4, #12]
 8027ad8:	e7e2      	b.n	8027aa0 <__smakebuf_r+0xc>
 8027ada:	89a3      	ldrh	r3, [r4, #12]
 8027adc:	6020      	str	r0, [r4, #0]
 8027ade:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8027ae2:	81a3      	strh	r3, [r4, #12]
 8027ae4:	9b01      	ldr	r3, [sp, #4]
 8027ae6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8027aea:	b15b      	cbz	r3, 8027b04 <__smakebuf_r+0x70>
 8027aec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8027af0:	4630      	mov	r0, r6
 8027af2:	f000 f81d 	bl	8027b30 <_isatty_r>
 8027af6:	b128      	cbz	r0, 8027b04 <__smakebuf_r+0x70>
 8027af8:	89a3      	ldrh	r3, [r4, #12]
 8027afa:	f023 0303 	bic.w	r3, r3, #3
 8027afe:	f043 0301 	orr.w	r3, r3, #1
 8027b02:	81a3      	strh	r3, [r4, #12]
 8027b04:	89a3      	ldrh	r3, [r4, #12]
 8027b06:	431d      	orrs	r5, r3
 8027b08:	81a5      	strh	r5, [r4, #12]
 8027b0a:	e7cf      	b.n	8027aac <__smakebuf_r+0x18>

08027b0c <_fstat_r>:
 8027b0c:	b538      	push	{r3, r4, r5, lr}
 8027b0e:	4d07      	ldr	r5, [pc, #28]	@ (8027b2c <_fstat_r+0x20>)
 8027b10:	2300      	movs	r3, #0
 8027b12:	4604      	mov	r4, r0
 8027b14:	4608      	mov	r0, r1
 8027b16:	4611      	mov	r1, r2
 8027b18:	602b      	str	r3, [r5, #0]
 8027b1a:	f7da f802 	bl	8001b22 <_fstat>
 8027b1e:	1c43      	adds	r3, r0, #1
 8027b20:	d102      	bne.n	8027b28 <_fstat_r+0x1c>
 8027b22:	682b      	ldr	r3, [r5, #0]
 8027b24:	b103      	cbz	r3, 8027b28 <_fstat_r+0x1c>
 8027b26:	6023      	str	r3, [r4, #0]
 8027b28:	bd38      	pop	{r3, r4, r5, pc}
 8027b2a:	bf00      	nop
 8027b2c:	240269a0 	.word	0x240269a0

08027b30 <_isatty_r>:
 8027b30:	b538      	push	{r3, r4, r5, lr}
 8027b32:	4d06      	ldr	r5, [pc, #24]	@ (8027b4c <_isatty_r+0x1c>)
 8027b34:	2300      	movs	r3, #0
 8027b36:	4604      	mov	r4, r0
 8027b38:	4608      	mov	r0, r1
 8027b3a:	602b      	str	r3, [r5, #0]
 8027b3c:	f7d9 fff6 	bl	8001b2c <_isatty>
 8027b40:	1c43      	adds	r3, r0, #1
 8027b42:	d102      	bne.n	8027b4a <_isatty_r+0x1a>
 8027b44:	682b      	ldr	r3, [r5, #0]
 8027b46:	b103      	cbz	r3, 8027b4a <_isatty_r+0x1a>
 8027b48:	6023      	str	r3, [r4, #0]
 8027b4a:	bd38      	pop	{r3, r4, r5, pc}
 8027b4c:	240269a0 	.word	0x240269a0

08027b50 <_realloc_r>:
 8027b50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8027b54:	4680      	mov	r8, r0
 8027b56:	4615      	mov	r5, r2
 8027b58:	460c      	mov	r4, r1
 8027b5a:	b921      	cbnz	r1, 8027b66 <_realloc_r+0x16>
 8027b5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8027b60:	4611      	mov	r1, r2
 8027b62:	f7fe be23 	b.w	80267ac <_malloc_r>
 8027b66:	b92a      	cbnz	r2, 8027b74 <_realloc_r+0x24>
 8027b68:	f7ff fa50 	bl	802700c <_free_r>
 8027b6c:	2400      	movs	r4, #0
 8027b6e:	4620      	mov	r0, r4
 8027b70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8027b74:	f000 f81a 	bl	8027bac <_malloc_usable_size_r>
 8027b78:	4285      	cmp	r5, r0
 8027b7a:	4606      	mov	r6, r0
 8027b7c:	d802      	bhi.n	8027b84 <_realloc_r+0x34>
 8027b7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8027b82:	d8f4      	bhi.n	8027b6e <_realloc_r+0x1e>
 8027b84:	4629      	mov	r1, r5
 8027b86:	4640      	mov	r0, r8
 8027b88:	f7fe fe10 	bl	80267ac <_malloc_r>
 8027b8c:	4607      	mov	r7, r0
 8027b8e:	2800      	cmp	r0, #0
 8027b90:	d0ec      	beq.n	8027b6c <_realloc_r+0x1c>
 8027b92:	42b5      	cmp	r5, r6
 8027b94:	462a      	mov	r2, r5
 8027b96:	4621      	mov	r1, r4
 8027b98:	bf28      	it	cs
 8027b9a:	4632      	movcs	r2, r6
 8027b9c:	f7ff f9cb 	bl	8026f36 <memcpy>
 8027ba0:	4621      	mov	r1, r4
 8027ba2:	4640      	mov	r0, r8
 8027ba4:	f7ff fa32 	bl	802700c <_free_r>
 8027ba8:	463c      	mov	r4, r7
 8027baa:	e7e0      	b.n	8027b6e <_realloc_r+0x1e>

08027bac <_malloc_usable_size_r>:
 8027bac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8027bb0:	1f18      	subs	r0, r3, #4
 8027bb2:	2b00      	cmp	r3, #0
 8027bb4:	bfbc      	itt	lt
 8027bb6:	580b      	ldrlt	r3, [r1, r0]
 8027bb8:	18c0      	addlt	r0, r0, r3
 8027bba:	4770      	bx	lr

08027bbc <_init>:
 8027bbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027bbe:	bf00      	nop
 8027bc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027bc2:	bc08      	pop	{r3}
 8027bc4:	469e      	mov	lr, r3
 8027bc6:	4770      	bx	lr

08027bc8 <_fini>:
 8027bc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8027bca:	bf00      	nop
 8027bcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8027bce:	bc08      	pop	{r3}
 8027bd0:	469e      	mov	lr, r3
 8027bd2:	4770      	bx	lr
