
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0002195c  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002fdc  08021c00  08021c00  00022c00  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000001a6  08024bdc  08024bdc  00025bdc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 00000018  08024d84  08024d84  00025d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 TextFlashSection 0000000e  90000000  90000000  00027000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .ARM.extab    00000000  08024d9c  08024d9c  0002700e  2**0
                  CONTENTS
  7 .ARM          00000008  08024d9c  08024d9c  00025d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .preinit_array 00000000  08024da4  08024da4  0002700e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .init_array   0000001c  08024da4  08024da4  00025da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .fini_array   00000008  08024dc0  08024dc0  00025dc0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data         0000013c  24000000  08024dc8  00026000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 TouchGFX_ScratchbufferA 00000100  24000140  08024f04  00026140  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferB 00000100  24000240  08025004  00026240  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 .bss          000252dc  24000340  08025104  00026340  2**2
                  ALLOC
 15 ._user_heap_stack 00002004  2402561c  08025104  0002661c  2**0
                  ALLOC
 16 .ARM.attributes 0000002e  00000000  00000000  0002700e  2**0
                  CONTENTS, READONLY
 17 BufferSection 00232800  d0000000  d0000000  00028000  2**2
                  ALLOC
 18 .debug_info   000c849f  00000000  00000000  0002703c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_abbrev 000164f5  00000000  00000000  000ef4db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_loclists 00022fae  00000000  00000000  001059d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003b88  00000000  00000000  00128980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00003c82  00000000  00000000  0012c508  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00013d58  00000000  00000000  0013018a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   0006ff6c  00000000  00000000  00143ee2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001e898a  00000000  00000000  001b3e4e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0039c7d8  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000ab50  00000000  00000000  0039c89c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_line_str 000000b2  00000000  00000000  003a73ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000340 	.word	0x24000340
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08021be4 	.word	0x08021be4

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000344 	.word	0x24000344
 80002dc:	08021be4 	.word	0x08021be4

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_drsub>:
 8000390:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000394:	e002      	b.n	800039c <__adddf3>
 8000396:	bf00      	nop

08000398 <__aeabi_dsub>:
 8000398:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800039c <__adddf3>:
 800039c:	b530      	push	{r4, r5, lr}
 800039e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80003a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80003a6:	ea94 0f05 	teq	r4, r5
 80003aa:	bf08      	it	eq
 80003ac:	ea90 0f02 	teqeq	r0, r2
 80003b0:	bf1f      	itttt	ne
 80003b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003c2:	f000 80e2 	beq.w	800058a <__adddf3+0x1ee>
 80003c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003ce:	bfb8      	it	lt
 80003d0:	426d      	neglt	r5, r5
 80003d2:	dd0c      	ble.n	80003ee <__adddf3+0x52>
 80003d4:	442c      	add	r4, r5
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	ea82 0000 	eor.w	r0, r2, r0
 80003e2:	ea83 0101 	eor.w	r1, r3, r1
 80003e6:	ea80 0202 	eor.w	r2, r0, r2
 80003ea:	ea81 0303 	eor.w	r3, r1, r3
 80003ee:	2d36      	cmp	r5, #54	@ 0x36
 80003f0:	bf88      	it	hi
 80003f2:	bd30      	pophi	{r4, r5, pc}
 80003f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000400:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000404:	d002      	beq.n	800040c <__adddf3+0x70>
 8000406:	4240      	negs	r0, r0
 8000408:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800040c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000410:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000414:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000418:	d002      	beq.n	8000420 <__adddf3+0x84>
 800041a:	4252      	negs	r2, r2
 800041c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000420:	ea94 0f05 	teq	r4, r5
 8000424:	f000 80a7 	beq.w	8000576 <__adddf3+0x1da>
 8000428:	f1a4 0401 	sub.w	r4, r4, #1
 800042c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000430:	db0d      	blt.n	800044e <__adddf3+0xb2>
 8000432:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000436:	fa22 f205 	lsr.w	r2, r2, r5
 800043a:	1880      	adds	r0, r0, r2
 800043c:	f141 0100 	adc.w	r1, r1, #0
 8000440:	fa03 f20e 	lsl.w	r2, r3, lr
 8000444:	1880      	adds	r0, r0, r2
 8000446:	fa43 f305 	asr.w	r3, r3, r5
 800044a:	4159      	adcs	r1, r3
 800044c:	e00e      	b.n	800046c <__adddf3+0xd0>
 800044e:	f1a5 0520 	sub.w	r5, r5, #32
 8000452:	f10e 0e20 	add.w	lr, lr, #32
 8000456:	2a01      	cmp	r2, #1
 8000458:	fa03 fc0e 	lsl.w	ip, r3, lr
 800045c:	bf28      	it	cs
 800045e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000462:	fa43 f305 	asr.w	r3, r3, r5
 8000466:	18c0      	adds	r0, r0, r3
 8000468:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800046c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000470:	d507      	bpl.n	8000482 <__adddf3+0xe6>
 8000472:	f04f 0e00 	mov.w	lr, #0
 8000476:	f1dc 0c00 	rsbs	ip, ip, #0
 800047a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800047e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000482:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000486:	d31b      	bcc.n	80004c0 <__adddf3+0x124>
 8000488:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800048c:	d30c      	bcc.n	80004a8 <__adddf3+0x10c>
 800048e:	0849      	lsrs	r1, r1, #1
 8000490:	ea5f 0030 	movs.w	r0, r0, rrx
 8000494:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000498:	f104 0401 	add.w	r4, r4, #1
 800049c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80004a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80004a4:	f080 809a 	bcs.w	80005dc <__adddf3+0x240>
 80004a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80004ac:	bf08      	it	eq
 80004ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004b2:	f150 0000 	adcs.w	r0, r0, #0
 80004b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004ba:	ea41 0105 	orr.w	r1, r1, r5
 80004be:	bd30      	pop	{r4, r5, pc}
 80004c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004c4:	4140      	adcs	r0, r0
 80004c6:	eb41 0101 	adc.w	r1, r1, r1
 80004ca:	3c01      	subs	r4, #1
 80004cc:	bf28      	it	cs
 80004ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004d2:	d2e9      	bcs.n	80004a8 <__adddf3+0x10c>
 80004d4:	f091 0f00 	teq	r1, #0
 80004d8:	bf04      	itt	eq
 80004da:	4601      	moveq	r1, r0
 80004dc:	2000      	moveq	r0, #0
 80004de:	fab1 f381 	clz	r3, r1
 80004e2:	bf08      	it	eq
 80004e4:	3320      	addeq	r3, #32
 80004e6:	f1a3 030b 	sub.w	r3, r3, #11
 80004ea:	f1b3 0220 	subs.w	r2, r3, #32
 80004ee:	da0c      	bge.n	800050a <__adddf3+0x16e>
 80004f0:	320c      	adds	r2, #12
 80004f2:	dd08      	ble.n	8000506 <__adddf3+0x16a>
 80004f4:	f102 0c14 	add.w	ip, r2, #20
 80004f8:	f1c2 020c 	rsb	r2, r2, #12
 80004fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000500:	fa21 f102 	lsr.w	r1, r1, r2
 8000504:	e00c      	b.n	8000520 <__adddf3+0x184>
 8000506:	f102 0214 	add.w	r2, r2, #20
 800050a:	bfd8      	it	le
 800050c:	f1c2 0c20 	rsble	ip, r2, #32
 8000510:	fa01 f102 	lsl.w	r1, r1, r2
 8000514:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000518:	bfdc      	itt	le
 800051a:	ea41 010c 	orrle.w	r1, r1, ip
 800051e:	4090      	lslle	r0, r2
 8000520:	1ae4      	subs	r4, r4, r3
 8000522:	bfa2      	ittt	ge
 8000524:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000528:	4329      	orrge	r1, r5
 800052a:	bd30      	popge	{r4, r5, pc}
 800052c:	ea6f 0404 	mvn.w	r4, r4
 8000530:	3c1f      	subs	r4, #31
 8000532:	da1c      	bge.n	800056e <__adddf3+0x1d2>
 8000534:	340c      	adds	r4, #12
 8000536:	dc0e      	bgt.n	8000556 <__adddf3+0x1ba>
 8000538:	f104 0414 	add.w	r4, r4, #20
 800053c:	f1c4 0220 	rsb	r2, r4, #32
 8000540:	fa20 f004 	lsr.w	r0, r0, r4
 8000544:	fa01 f302 	lsl.w	r3, r1, r2
 8000548:	ea40 0003 	orr.w	r0, r0, r3
 800054c:	fa21 f304 	lsr.w	r3, r1, r4
 8000550:	ea45 0103 	orr.w	r1, r5, r3
 8000554:	bd30      	pop	{r4, r5, pc}
 8000556:	f1c4 040c 	rsb	r4, r4, #12
 800055a:	f1c4 0220 	rsb	r2, r4, #32
 800055e:	fa20 f002 	lsr.w	r0, r0, r2
 8000562:	fa01 f304 	lsl.w	r3, r1, r4
 8000566:	ea40 0003 	orr.w	r0, r0, r3
 800056a:	4629      	mov	r1, r5
 800056c:	bd30      	pop	{r4, r5, pc}
 800056e:	fa21 f004 	lsr.w	r0, r1, r4
 8000572:	4629      	mov	r1, r5
 8000574:	bd30      	pop	{r4, r5, pc}
 8000576:	f094 0f00 	teq	r4, #0
 800057a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800057e:	bf06      	itte	eq
 8000580:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000584:	3401      	addeq	r4, #1
 8000586:	3d01      	subne	r5, #1
 8000588:	e74e      	b.n	8000428 <__adddf3+0x8c>
 800058a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800058e:	bf18      	it	ne
 8000590:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000594:	d029      	beq.n	80005ea <__adddf3+0x24e>
 8000596:	ea94 0f05 	teq	r4, r5
 800059a:	bf08      	it	eq
 800059c:	ea90 0f02 	teqeq	r0, r2
 80005a0:	d005      	beq.n	80005ae <__adddf3+0x212>
 80005a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80005a6:	bf04      	itt	eq
 80005a8:	4619      	moveq	r1, r3
 80005aa:	4610      	moveq	r0, r2
 80005ac:	bd30      	pop	{r4, r5, pc}
 80005ae:	ea91 0f03 	teq	r1, r3
 80005b2:	bf1e      	ittt	ne
 80005b4:	2100      	movne	r1, #0
 80005b6:	2000      	movne	r0, #0
 80005b8:	bd30      	popne	{r4, r5, pc}
 80005ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005be:	d105      	bne.n	80005cc <__adddf3+0x230>
 80005c0:	0040      	lsls	r0, r0, #1
 80005c2:	4149      	adcs	r1, r1
 80005c4:	bf28      	it	cs
 80005c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ca:	bd30      	pop	{r4, r5, pc}
 80005cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005d0:	bf3c      	itt	cc
 80005d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005d6:	bd30      	popcc	{r4, r5, pc}
 80005d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005e4:	f04f 0000 	mov.w	r0, #0
 80005e8:	bd30      	pop	{r4, r5, pc}
 80005ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005ee:	bf1a      	itte	ne
 80005f0:	4619      	movne	r1, r3
 80005f2:	4610      	movne	r0, r2
 80005f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005f8:	bf1c      	itt	ne
 80005fa:	460b      	movne	r3, r1
 80005fc:	4602      	movne	r2, r0
 80005fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000602:	bf06      	itte	eq
 8000604:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000608:	ea91 0f03 	teqeq	r1, r3
 800060c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000610:	bd30      	pop	{r4, r5, pc}
 8000612:	bf00      	nop

08000614 <__aeabi_ui2d>:
 8000614:	f090 0f00 	teq	r0, #0
 8000618:	bf04      	itt	eq
 800061a:	2100      	moveq	r1, #0
 800061c:	4770      	bxeq	lr
 800061e:	b530      	push	{r4, r5, lr}
 8000620:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000624:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000628:	f04f 0500 	mov.w	r5, #0
 800062c:	f04f 0100 	mov.w	r1, #0
 8000630:	e750      	b.n	80004d4 <__adddf3+0x138>
 8000632:	bf00      	nop

08000634 <__aeabi_i2d>:
 8000634:	f090 0f00 	teq	r0, #0
 8000638:	bf04      	itt	eq
 800063a:	2100      	moveq	r1, #0
 800063c:	4770      	bxeq	lr
 800063e:	b530      	push	{r4, r5, lr}
 8000640:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000644:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000648:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800064c:	bf48      	it	mi
 800064e:	4240      	negmi	r0, r0
 8000650:	f04f 0100 	mov.w	r1, #0
 8000654:	e73e      	b.n	80004d4 <__adddf3+0x138>
 8000656:	bf00      	nop

08000658 <__aeabi_f2d>:
 8000658:	0042      	lsls	r2, r0, #1
 800065a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800065e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000662:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000666:	bf1f      	itttt	ne
 8000668:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800066c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000670:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000674:	4770      	bxne	lr
 8000676:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800067a:	bf08      	it	eq
 800067c:	4770      	bxeq	lr
 800067e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000682:	bf04      	itt	eq
 8000684:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000688:	4770      	bxeq	lr
 800068a:	b530      	push	{r4, r5, lr}
 800068c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000690:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000694:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000698:	e71c      	b.n	80004d4 <__adddf3+0x138>
 800069a:	bf00      	nop

0800069c <__aeabi_ul2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f04f 0500 	mov.w	r5, #0
 80006aa:	e00a      	b.n	80006c2 <__aeabi_l2d+0x16>

080006ac <__aeabi_l2d>:
 80006ac:	ea50 0201 	orrs.w	r2, r0, r1
 80006b0:	bf08      	it	eq
 80006b2:	4770      	bxeq	lr
 80006b4:	b530      	push	{r4, r5, lr}
 80006b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006ba:	d502      	bpl.n	80006c2 <__aeabi_l2d+0x16>
 80006bc:	4240      	negs	r0, r0
 80006be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006ce:	f43f aed8 	beq.w	8000482 <__adddf3+0xe6>
 80006d2:	f04f 0203 	mov.w	r2, #3
 80006d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006da:	bf18      	it	ne
 80006dc:	3203      	addne	r2, #3
 80006de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006e2:	bf18      	it	ne
 80006e4:	3203      	addne	r2, #3
 80006e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006ea:	f1c2 0320 	rsb	r3, r2, #32
 80006ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80006f2:	fa20 f002 	lsr.w	r0, r0, r2
 80006f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006fa:	ea40 000e 	orr.w	r0, r0, lr
 80006fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000702:	4414      	add	r4, r2
 8000704:	e6bd      	b.n	8000482 <__adddf3+0xe6>
 8000706:	bf00      	nop

08000708 <__aeabi_uldivmod>:
 8000708:	b953      	cbnz	r3, 8000720 <__aeabi_uldivmod+0x18>
 800070a:	b94a      	cbnz	r2, 8000720 <__aeabi_uldivmod+0x18>
 800070c:	2900      	cmp	r1, #0
 800070e:	bf08      	it	eq
 8000710:	2800      	cmpeq	r0, #0
 8000712:	bf1c      	itt	ne
 8000714:	f04f 31ff 	movne.w	r1, #4294967295
 8000718:	f04f 30ff 	movne.w	r0, #4294967295
 800071c:	f000 b96a 	b.w	80009f4 <__aeabi_idiv0>
 8000720:	f1ad 0c08 	sub.w	ip, sp, #8
 8000724:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000728:	f000 f806 	bl	8000738 <__udivmoddi4>
 800072c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000730:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000734:	b004      	add	sp, #16
 8000736:	4770      	bx	lr

08000738 <__udivmoddi4>:
 8000738:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800073c:	9d08      	ldr	r5, [sp, #32]
 800073e:	460c      	mov	r4, r1
 8000740:	2b00      	cmp	r3, #0
 8000742:	d14e      	bne.n	80007e2 <__udivmoddi4+0xaa>
 8000744:	4694      	mov	ip, r2
 8000746:	458c      	cmp	ip, r1
 8000748:	4686      	mov	lr, r0
 800074a:	fab2 f282 	clz	r2, r2
 800074e:	d962      	bls.n	8000816 <__udivmoddi4+0xde>
 8000750:	b14a      	cbz	r2, 8000766 <__udivmoddi4+0x2e>
 8000752:	f1c2 0320 	rsb	r3, r2, #32
 8000756:	4091      	lsls	r1, r2
 8000758:	fa20 f303 	lsr.w	r3, r0, r3
 800075c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000760:	4319      	orrs	r1, r3
 8000762:	fa00 fe02 	lsl.w	lr, r0, r2
 8000766:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800076a:	fa1f f68c 	uxth.w	r6, ip
 800076e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000772:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000776:	fb07 1114 	mls	r1, r7, r4, r1
 800077a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800077e:	fb04 f106 	mul.w	r1, r4, r6
 8000782:	4299      	cmp	r1, r3
 8000784:	d90a      	bls.n	800079c <__udivmoddi4+0x64>
 8000786:	eb1c 0303 	adds.w	r3, ip, r3
 800078a:	f104 30ff 	add.w	r0, r4, #4294967295
 800078e:	f080 8112 	bcs.w	80009b6 <__udivmoddi4+0x27e>
 8000792:	4299      	cmp	r1, r3
 8000794:	f240 810f 	bls.w	80009b6 <__udivmoddi4+0x27e>
 8000798:	3c02      	subs	r4, #2
 800079a:	4463      	add	r3, ip
 800079c:	1a59      	subs	r1, r3, r1
 800079e:	fa1f f38e 	uxth.w	r3, lr
 80007a2:	fbb1 f0f7 	udiv	r0, r1, r7
 80007a6:	fb07 1110 	mls	r1, r7, r0, r1
 80007aa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80007ae:	fb00 f606 	mul.w	r6, r0, r6
 80007b2:	429e      	cmp	r6, r3
 80007b4:	d90a      	bls.n	80007cc <__udivmoddi4+0x94>
 80007b6:	eb1c 0303 	adds.w	r3, ip, r3
 80007ba:	f100 31ff 	add.w	r1, r0, #4294967295
 80007be:	f080 80fc 	bcs.w	80009ba <__udivmoddi4+0x282>
 80007c2:	429e      	cmp	r6, r3
 80007c4:	f240 80f9 	bls.w	80009ba <__udivmoddi4+0x282>
 80007c8:	4463      	add	r3, ip
 80007ca:	3802      	subs	r0, #2
 80007cc:	1b9b      	subs	r3, r3, r6
 80007ce:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007d2:	2100      	movs	r1, #0
 80007d4:	b11d      	cbz	r5, 80007de <__udivmoddi4+0xa6>
 80007d6:	40d3      	lsrs	r3, r2
 80007d8:	2200      	movs	r2, #0
 80007da:	e9c5 3200 	strd	r3, r2, [r5]
 80007de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007e2:	428b      	cmp	r3, r1
 80007e4:	d905      	bls.n	80007f2 <__udivmoddi4+0xba>
 80007e6:	b10d      	cbz	r5, 80007ec <__udivmoddi4+0xb4>
 80007e8:	e9c5 0100 	strd	r0, r1, [r5]
 80007ec:	2100      	movs	r1, #0
 80007ee:	4608      	mov	r0, r1
 80007f0:	e7f5      	b.n	80007de <__udivmoddi4+0xa6>
 80007f2:	fab3 f183 	clz	r1, r3
 80007f6:	2900      	cmp	r1, #0
 80007f8:	d146      	bne.n	8000888 <__udivmoddi4+0x150>
 80007fa:	42a3      	cmp	r3, r4
 80007fc:	d302      	bcc.n	8000804 <__udivmoddi4+0xcc>
 80007fe:	4290      	cmp	r0, r2
 8000800:	f0c0 80f0 	bcc.w	80009e4 <__udivmoddi4+0x2ac>
 8000804:	1a86      	subs	r6, r0, r2
 8000806:	eb64 0303 	sbc.w	r3, r4, r3
 800080a:	2001      	movs	r0, #1
 800080c:	2d00      	cmp	r5, #0
 800080e:	d0e6      	beq.n	80007de <__udivmoddi4+0xa6>
 8000810:	e9c5 6300 	strd	r6, r3, [r5]
 8000814:	e7e3      	b.n	80007de <__udivmoddi4+0xa6>
 8000816:	2a00      	cmp	r2, #0
 8000818:	f040 8090 	bne.w	800093c <__udivmoddi4+0x204>
 800081c:	eba1 040c 	sub.w	r4, r1, ip
 8000820:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000824:	fa1f f78c 	uxth.w	r7, ip
 8000828:	2101      	movs	r1, #1
 800082a:	fbb4 f6f8 	udiv	r6, r4, r8
 800082e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000832:	fb08 4416 	mls	r4, r8, r6, r4
 8000836:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800083a:	fb07 f006 	mul.w	r0, r7, r6
 800083e:	4298      	cmp	r0, r3
 8000840:	d908      	bls.n	8000854 <__udivmoddi4+0x11c>
 8000842:	eb1c 0303 	adds.w	r3, ip, r3
 8000846:	f106 34ff 	add.w	r4, r6, #4294967295
 800084a:	d202      	bcs.n	8000852 <__udivmoddi4+0x11a>
 800084c:	4298      	cmp	r0, r3
 800084e:	f200 80cd 	bhi.w	80009ec <__udivmoddi4+0x2b4>
 8000852:	4626      	mov	r6, r4
 8000854:	1a1c      	subs	r4, r3, r0
 8000856:	fa1f f38e 	uxth.w	r3, lr
 800085a:	fbb4 f0f8 	udiv	r0, r4, r8
 800085e:	fb08 4410 	mls	r4, r8, r0, r4
 8000862:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000866:	fb00 f707 	mul.w	r7, r0, r7
 800086a:	429f      	cmp	r7, r3
 800086c:	d908      	bls.n	8000880 <__udivmoddi4+0x148>
 800086e:	eb1c 0303 	adds.w	r3, ip, r3
 8000872:	f100 34ff 	add.w	r4, r0, #4294967295
 8000876:	d202      	bcs.n	800087e <__udivmoddi4+0x146>
 8000878:	429f      	cmp	r7, r3
 800087a:	f200 80b0 	bhi.w	80009de <__udivmoddi4+0x2a6>
 800087e:	4620      	mov	r0, r4
 8000880:	1bdb      	subs	r3, r3, r7
 8000882:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000886:	e7a5      	b.n	80007d4 <__udivmoddi4+0x9c>
 8000888:	f1c1 0620 	rsb	r6, r1, #32
 800088c:	408b      	lsls	r3, r1
 800088e:	fa22 f706 	lsr.w	r7, r2, r6
 8000892:	431f      	orrs	r7, r3
 8000894:	fa20 fc06 	lsr.w	ip, r0, r6
 8000898:	fa04 f301 	lsl.w	r3, r4, r1
 800089c:	ea43 030c 	orr.w	r3, r3, ip
 80008a0:	40f4      	lsrs	r4, r6
 80008a2:	fa00 f801 	lsl.w	r8, r0, r1
 80008a6:	0c38      	lsrs	r0, r7, #16
 80008a8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 80008ac:	fbb4 fef0 	udiv	lr, r4, r0
 80008b0:	fa1f fc87 	uxth.w	ip, r7
 80008b4:	fb00 441e 	mls	r4, r0, lr, r4
 80008b8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008bc:	fb0e f90c 	mul.w	r9, lr, ip
 80008c0:	45a1      	cmp	r9, r4
 80008c2:	fa02 f201 	lsl.w	r2, r2, r1
 80008c6:	d90a      	bls.n	80008de <__udivmoddi4+0x1a6>
 80008c8:	193c      	adds	r4, r7, r4
 80008ca:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008ce:	f080 8084 	bcs.w	80009da <__udivmoddi4+0x2a2>
 80008d2:	45a1      	cmp	r9, r4
 80008d4:	f240 8081 	bls.w	80009da <__udivmoddi4+0x2a2>
 80008d8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008dc:	443c      	add	r4, r7
 80008de:	eba4 0409 	sub.w	r4, r4, r9
 80008e2:	fa1f f983 	uxth.w	r9, r3
 80008e6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008ea:	fb00 4413 	mls	r4, r0, r3, r4
 80008ee:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008f2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008f6:	45a4      	cmp	ip, r4
 80008f8:	d907      	bls.n	800090a <__udivmoddi4+0x1d2>
 80008fa:	193c      	adds	r4, r7, r4
 80008fc:	f103 30ff 	add.w	r0, r3, #4294967295
 8000900:	d267      	bcs.n	80009d2 <__udivmoddi4+0x29a>
 8000902:	45a4      	cmp	ip, r4
 8000904:	d965      	bls.n	80009d2 <__udivmoddi4+0x29a>
 8000906:	3b02      	subs	r3, #2
 8000908:	443c      	add	r4, r7
 800090a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 800090e:	fba0 9302 	umull	r9, r3, r0, r2
 8000912:	eba4 040c 	sub.w	r4, r4, ip
 8000916:	429c      	cmp	r4, r3
 8000918:	46ce      	mov	lr, r9
 800091a:	469c      	mov	ip, r3
 800091c:	d351      	bcc.n	80009c2 <__udivmoddi4+0x28a>
 800091e:	d04e      	beq.n	80009be <__udivmoddi4+0x286>
 8000920:	b155      	cbz	r5, 8000938 <__udivmoddi4+0x200>
 8000922:	ebb8 030e 	subs.w	r3, r8, lr
 8000926:	eb64 040c 	sbc.w	r4, r4, ip
 800092a:	fa04 f606 	lsl.w	r6, r4, r6
 800092e:	40cb      	lsrs	r3, r1
 8000930:	431e      	orrs	r6, r3
 8000932:	40cc      	lsrs	r4, r1
 8000934:	e9c5 6400 	strd	r6, r4, [r5]
 8000938:	2100      	movs	r1, #0
 800093a:	e750      	b.n	80007de <__udivmoddi4+0xa6>
 800093c:	f1c2 0320 	rsb	r3, r2, #32
 8000940:	fa20 f103 	lsr.w	r1, r0, r3
 8000944:	fa0c fc02 	lsl.w	ip, ip, r2
 8000948:	fa24 f303 	lsr.w	r3, r4, r3
 800094c:	4094      	lsls	r4, r2
 800094e:	430c      	orrs	r4, r1
 8000950:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000954:	fa00 fe02 	lsl.w	lr, r0, r2
 8000958:	fa1f f78c 	uxth.w	r7, ip
 800095c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000960:	fb08 3110 	mls	r1, r8, r0, r3
 8000964:	0c23      	lsrs	r3, r4, #16
 8000966:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800096a:	fb00 f107 	mul.w	r1, r0, r7
 800096e:	4299      	cmp	r1, r3
 8000970:	d908      	bls.n	8000984 <__udivmoddi4+0x24c>
 8000972:	eb1c 0303 	adds.w	r3, ip, r3
 8000976:	f100 36ff 	add.w	r6, r0, #4294967295
 800097a:	d22c      	bcs.n	80009d6 <__udivmoddi4+0x29e>
 800097c:	4299      	cmp	r1, r3
 800097e:	d92a      	bls.n	80009d6 <__udivmoddi4+0x29e>
 8000980:	3802      	subs	r0, #2
 8000982:	4463      	add	r3, ip
 8000984:	1a5b      	subs	r3, r3, r1
 8000986:	b2a4      	uxth	r4, r4
 8000988:	fbb3 f1f8 	udiv	r1, r3, r8
 800098c:	fb08 3311 	mls	r3, r8, r1, r3
 8000990:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000994:	fb01 f307 	mul.w	r3, r1, r7
 8000998:	42a3      	cmp	r3, r4
 800099a:	d908      	bls.n	80009ae <__udivmoddi4+0x276>
 800099c:	eb1c 0404 	adds.w	r4, ip, r4
 80009a0:	f101 36ff 	add.w	r6, r1, #4294967295
 80009a4:	d213      	bcs.n	80009ce <__udivmoddi4+0x296>
 80009a6:	42a3      	cmp	r3, r4
 80009a8:	d911      	bls.n	80009ce <__udivmoddi4+0x296>
 80009aa:	3902      	subs	r1, #2
 80009ac:	4464      	add	r4, ip
 80009ae:	1ae4      	subs	r4, r4, r3
 80009b0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009b4:	e739      	b.n	800082a <__udivmoddi4+0xf2>
 80009b6:	4604      	mov	r4, r0
 80009b8:	e6f0      	b.n	800079c <__udivmoddi4+0x64>
 80009ba:	4608      	mov	r0, r1
 80009bc:	e706      	b.n	80007cc <__udivmoddi4+0x94>
 80009be:	45c8      	cmp	r8, r9
 80009c0:	d2ae      	bcs.n	8000920 <__udivmoddi4+0x1e8>
 80009c2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009c6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ca:	3801      	subs	r0, #1
 80009cc:	e7a8      	b.n	8000920 <__udivmoddi4+0x1e8>
 80009ce:	4631      	mov	r1, r6
 80009d0:	e7ed      	b.n	80009ae <__udivmoddi4+0x276>
 80009d2:	4603      	mov	r3, r0
 80009d4:	e799      	b.n	800090a <__udivmoddi4+0x1d2>
 80009d6:	4630      	mov	r0, r6
 80009d8:	e7d4      	b.n	8000984 <__udivmoddi4+0x24c>
 80009da:	46d6      	mov	lr, sl
 80009dc:	e77f      	b.n	80008de <__udivmoddi4+0x1a6>
 80009de:	4463      	add	r3, ip
 80009e0:	3802      	subs	r0, #2
 80009e2:	e74d      	b.n	8000880 <__udivmoddi4+0x148>
 80009e4:	4606      	mov	r6, r0
 80009e6:	4623      	mov	r3, r4
 80009e8:	4608      	mov	r0, r1
 80009ea:	e70f      	b.n	800080c <__udivmoddi4+0xd4>
 80009ec:	3e02      	subs	r6, #2
 80009ee:	4463      	add	r3, ip
 80009f0:	e730      	b.n	8000854 <__udivmoddi4+0x11c>
 80009f2:	bf00      	nop

080009f4 <__aeabi_idiv0>:
 80009f4:	4770      	bx	lr
 80009f6:	bf00      	nop

080009f8 <RTC_Write>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
HAL_StatusTypeDef RTC_Write(uint8_t reg, uint8_t* data, uint16_t size) {
 80009f8:	b508      	push	{r3, lr}
 80009fa:	4613      	mov	r3, r2
    // Use BSP I2C write function to write to RTC
    return BSP_I2C4_WriteReg(DS1307_ADDR, reg, data, size);
 80009fc:	460a      	mov	r2, r1
 80009fe:	4601      	mov	r1, r0
 8000a00:	20d0      	movs	r0, #208	@ 0xd0
 8000a02:	f004 ff15 	bl	8005830 <BSP_I2C4_WriteReg>
}
 8000a06:	b2c0      	uxtb	r0, r0
 8000a08:	bd08      	pop	{r3, pc}

08000a0a <RTC_Read>:
HAL_StatusTypeDef RTC_Read(uint8_t reg, uint8_t* data, uint16_t size) {
 8000a0a:	b508      	push	{r3, lr}
 8000a0c:	4613      	mov	r3, r2
    // Use BSP I2C read function to read from RTC
    return BSP_I2C4_ReadReg(DS1307_ADDR, reg, data, size);
 8000a0e:	460a      	mov	r2, r1
 8000a10:	4601      	mov	r1, r0
 8000a12:	20d0      	movs	r0, #208	@ 0xd0
 8000a14:	f004 ff26 	bl	8005864 <BSP_I2C4_ReadReg>
}
 8000a18:	b2c0      	uxtb	r0, r0
 8000a1a:	bd08      	pop	{r3, pc}

08000a1c <BCD_to_Decimal>:
  * @brief  Convert BCD (Binary Coded Decimal) to Decimal
  * @param  bcd: BCD value
  * @retval Decimal equivalent of BCD value
  */
uint8_t BCD_to_Decimal(uint8_t bcd) {
    return ((bcd >> 4) * 10) + (bcd & 0x0F);  // Extract tens and ones digits
 8000a1c:	0903      	lsrs	r3, r0, #4
 8000a1e:	f000 000f 	and.w	r0, r0, #15
 8000a22:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8000a26:	eb00 0043 	add.w	r0, r0, r3, lsl #1
}
 8000a2a:	b2c0      	uxtb	r0, r0
 8000a2c:	4770      	bx	lr

08000a2e <Get_Time>:
void Get_Time(uint8_t* hours, uint8_t* minutes, uint8_t* seconds) {
 8000a2e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8000a30:	4604      	mov	r4, r0
 8000a32:	460d      	mov	r5, r1
 8000a34:	4616      	mov	r6, r2
    if (RTC_Read(0x00, time_data, 3) != HAL_OK) {
 8000a36:	a901      	add	r1, sp, #4
 8000a38:	2203      	movs	r2, #3
 8000a3a:	2000      	movs	r0, #0
 8000a3c:	f7ff ffe5 	bl	8000a0a <RTC_Read>
    *seconds = BCD_to_Decimal(time_data[0]);
 8000a40:	f89d 0004 	ldrb.w	r0, [sp, #4]
 8000a44:	f7ff ffea 	bl	8000a1c <BCD_to_Decimal>
 8000a48:	7030      	strb	r0, [r6, #0]
    *minutes = BCD_to_Decimal(time_data[1]);
 8000a4a:	f89d 0005 	ldrb.w	r0, [sp, #5]
 8000a4e:	f7ff ffe5 	bl	8000a1c <BCD_to_Decimal>
 8000a52:	7028      	strb	r0, [r5, #0]
    *hours = BCD_to_Decimal(time_data[2]);
 8000a54:	f89d 0006 	ldrb.w	r0, [sp, #6]
 8000a58:	f7ff ffe0 	bl	8000a1c <BCD_to_Decimal>
 8000a5c:	7020      	strb	r0, [r4, #0]
}
 8000a5e:	b002      	add	sp, #8
 8000a60:	bd70      	pop	{r4, r5, r6, pc}

08000a62 <Decimal_to_BCD>:
  * @brief  Convert Decimal to BCD (Binary Coded Decimal)
  * @param  dec: Decimal value
  * @retval BCD equivalent of Decimal value
  */
uint8_t Decimal_to_BCD(uint8_t dec) {
    return ((dec / 10) << 4) | (dec % 10);  // Convert decimal to BCD
 8000a62:	220a      	movs	r2, #10
 8000a64:	fbb0 f3f2 	udiv	r3, r0, r2
 8000a68:	fb02 0013 	mls	r0, r2, r3, r0
 8000a6c:	ea40 1003 	orr.w	r0, r0, r3, lsl #4
}
 8000a70:	b2c0      	uxtb	r0, r0
 8000a72:	4770      	bx	lr

08000a74 <Set_Time>:
void Set_Time(uint8_t hours, uint8_t minutes, uint8_t seconds) {
 8000a74:	b513      	push	{r0, r1, r4, lr}
 8000a76:	4604      	mov	r4, r0
    time_data[0] = Decimal_to_BCD(seconds);   // Seconds
 8000a78:	4610      	mov	r0, r2
 8000a7a:	f7ff fff2 	bl	8000a62 <Decimal_to_BCD>
 8000a7e:	f88d 0004 	strb.w	r0, [sp, #4]
    time_data[1] = Decimal_to_BCD(minutes);   // Minutes
 8000a82:	4608      	mov	r0, r1
    if (RTC_Write(0x00, time_data, 3) != HAL_OK) {
 8000a84:	a901      	add	r1, sp, #4
    time_data[1] = Decimal_to_BCD(minutes);   // Minutes
 8000a86:	f7ff ffec 	bl	8000a62 <Decimal_to_BCD>
 8000a8a:	f88d 0005 	strb.w	r0, [sp, #5]
    time_data[2] = Decimal_to_BCD(hours);     // Hours
 8000a8e:	4620      	mov	r0, r4
 8000a90:	f7ff ffe7 	bl	8000a62 <Decimal_to_BCD>
    if (RTC_Write(0x00, time_data, 3) != HAL_OK) {
 8000a94:	2203      	movs	r2, #3
    time_data[2] = Decimal_to_BCD(hours);     // Hours
 8000a96:	f88d 0006 	strb.w	r0, [sp, #6]
    if (RTC_Write(0x00, time_data, 3) != HAL_OK) {
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f7ff ffac 	bl	80009f8 <RTC_Write>
}
 8000aa0:	b002      	add	sp, #8
 8000aa2:	bd10      	pop	{r4, pc}

08000aa4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aa4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000aa6:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000aa8:	224c      	movs	r2, #76	@ 0x4c
 8000aaa:	2100      	movs	r1, #0
 8000aac:	a809      	add	r0, sp, #36	@ 0x24
 8000aae:	f020 f95b 	bl	8020d68 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ab2:	2220      	movs	r2, #32
 8000ab4:	2100      	movs	r1, #0
 8000ab6:	a801      	add	r0, sp, #4
 8000ab8:	f020 f956 	bl	8020d68 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000abc:	2004      	movs	r0, #4
 8000abe:	f008 fcbf 	bl	8009440 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000ac2:	2300      	movs	r3, #0
 8000ac4:	9300      	str	r3, [sp, #0]
 8000ac6:	4b26      	ldr	r3, [pc, #152]	@ (8000b60 <SystemClock_Config+0xbc>)
 8000ac8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000aca:	f022 0201 	bic.w	r2, r2, #1
 8000ace:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000ad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000ad2:	f003 0301 	and.w	r3, r3, #1
 8000ad6:	9300      	str	r3, [sp, #0]
 8000ad8:	4b22      	ldr	r3, [pc, #136]	@ (8000b64 <SystemClock_Config+0xc0>)
 8000ada:	699a      	ldr	r2, [r3, #24]
 8000adc:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000ae0:	619a      	str	r2, [r3, #24]
 8000ae2:	699a      	ldr	r2, [r3, #24]
 8000ae4:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000ae8:	9200      	str	r2, [sp, #0]
 8000aea:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000aec:	699a      	ldr	r2, [r3, #24]
 8000aee:	0491      	lsls	r1, r2, #18
 8000af0:	d5fc      	bpl.n	8000aec <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000af2:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000af6:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000af8:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000afa:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000afc:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000afe:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b00:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000b02:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b04:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b08:	2301      	movs	r3, #1
 8000b0a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000b0e:	23a0      	movs	r3, #160	@ 0xa0
 8000b10:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b14:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b16:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000b1a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000b1e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000b22:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b24:	f008 ff8c 	bl	8009a40 <HAL_RCC_OscConfig>
 8000b28:	b108      	cbz	r0, 8000b2e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b2a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b2c:	e7fe      	b.n	8000b2c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b2e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b30:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b32:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000b36:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000b3a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b3e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000b40:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000b44:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b48:	f009 fb16 	bl	800a178 <HAL_RCC_ClockConfig>
 8000b4c:	4601      	mov	r1, r0
 8000b4e:	b108      	cbz	r0, 8000b54 <SystemClock_Config+0xb0>
 8000b50:	b672      	cpsid	i
  while (1)
 8000b52:	e7fe      	b.n	8000b52 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000b54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000b58:	f009 fa1e 	bl	8009f98 <HAL_RCC_MCOConfig>
}
 8000b5c:	b01d      	add	sp, #116	@ 0x74
 8000b5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000b60:	58000400 	.word	0x58000400
 8000b64:	58024800 	.word	0x58024800

08000b68 <main>:
{
 8000b68:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b6c:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b6e:	2210      	movs	r2, #16
 8000b70:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b72:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b74:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b76:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000b78:	f020 f8f6 	bl	8020d68 <memset>
  HAL_MPU_Disable();
 8000b7c:	f005 fc18 	bl	80063b0 <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b80:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000b84:	4bbe      	ldr	r3, [pc, #760]	@ (8000e80 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b86:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000b88:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b8c:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000b8e:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b92:	f005 fc2b 	bl	80063ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b96:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b98:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000b9a:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000b9e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba2:	f005 fc23 	bl	80063ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000ba6:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ba8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000baa:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000bae:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000bb2:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000bb6:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000bb8:	2318      	movs	r3, #24
 8000bba:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bbe:	f005 fc15 	bl	80063ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bc2:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bc4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000bc6:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000bca:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000bce:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000bd0:	2312      	movs	r3, #18
 8000bd2:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000bd6:	2300      	movs	r3, #0
 8000bd8:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bdc:	f005 fc06 	bl	80063ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000be0:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000be4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000be6:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000bea:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000bec:	2311      	movs	r3, #17
 8000bee:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf2:	f005 fbfb 	bl	80063ec <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000bf6:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000bf8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000bfa:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000bfe:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000c02:	4ba0      	ldr	r3, [pc, #640]	@ (8000e84 <main+0x31c>)
 8000c04:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000c06:	230e      	movs	r3, #14
 8000c08:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000c0c:	f005 fbee 	bl	80063ec <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000c10:	4628      	mov	r0, r5
 8000c12:	f005 fbdb 	bl	80063cc <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000c16:	4b9c      	ldr	r3, [pc, #624]	@ (8000e88 <main+0x320>)
 8000c18:	695a      	ldr	r2, [r3, #20]
 8000c1a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000c1e:	d111      	bne.n	8000c44 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000c20:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c24:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000c28:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000c2c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c30:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000c34:	695a      	ldr	r2, [r3, #20]
 8000c36:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000c3a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000c3c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c40:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000c44:	4a90      	ldr	r2, [pc, #576]	@ (8000e88 <main+0x320>)
 8000c46:	6953      	ldr	r3, [r2, #20]
 8000c48:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000c4c:	d123      	bne.n	8000c96 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000c4e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000c52:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000c56:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c5a:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c5e:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000c62:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000c66:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c68:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000c6c:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c6e:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000c72:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000c74:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000c78:	d2f9      	bcs.n	8000c6e <main+0x106>
    } while(sets-- != 0U);
 8000c7a:	3b20      	subs	r3, #32
 8000c7c:	f113 0f20 	cmn.w	r3, #32
 8000c80:	d1f2      	bne.n	8000c68 <main+0x100>
 8000c82:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000c86:	6953      	ldr	r3, [r2, #20]
 8000c88:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000c8c:	6153      	str	r3, [r2, #20]
 8000c8e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000c92:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000c96:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000c9a:	4d7c      	ldr	r5, [pc, #496]	@ (8000e8c <main+0x324>)
 8000c9c:	682c      	ldr	r4, [r5, #0]
 8000c9e:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000ca2:	f000 8359 	beq.w	8001358 <main+0x7f0>
 8000ca6:	3b01      	subs	r3, #1
 8000ca8:	d2f8      	bcs.n	8000c9c <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000caa:	b672      	cpsid	i
  while (1)
 8000cac:	e7fe      	b.n	8000cac <main+0x144>
 8000cae:	b672      	cpsid	i
 8000cb0:	e7fe      	b.n	8000cb0 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000cb2:	4877      	ldr	r0, [pc, #476]	@ (8000e90 <main+0x328>)
 8000cb4:	4a77      	ldr	r2, [pc, #476]	@ (8000e94 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000cb6:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000cb8:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000cba:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000cbe:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000cc2:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000cc6:	f008 fcdb 	bl	8009680 <HAL_QSPI_Init>
 8000cca:	b108      	cbz	r0, 8000cd0 <main+0x168>
 8000ccc:	b672      	cpsid	i
  while (1)
 8000cce:	e7fe      	b.n	8000cce <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000cd0:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000cd4:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000cd6:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000cda:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000cde:	f004 fe47 	bl	8005970 <BSP_QSPI_Init>
 8000ce2:	b108      	cbz	r0, 8000ce8 <main+0x180>
 8000ce4:	b672      	cpsid	i
  while (1)
 8000ce6:	e7fe      	b.n	8000ce6 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000ce8:	f004 fdee 	bl	80058c8 <BSP_QSPI_EnableMemoryMappedMode>
 8000cec:	4603      	mov	r3, r0
 8000cee:	b108      	cbz	r0, 8000cf4 <main+0x18c>
 8000cf0:	b672      	cpsid	i
  while (1)
 8000cf2:	e7fe      	b.n	8000cf2 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000cf4:	4868      	ldr	r0, [pc, #416]	@ (8000e98 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000cf6:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000cfa:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000ea4 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000cfe:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000d02:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000d06:	f005 fe35 	bl	8006974 <HAL_DMA2D_Init>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	b108      	cbz	r0, 8000d12 <main+0x1aa>
 8000d0e:	b672      	cpsid	i
  while (1)
 8000d10:	e7fe      	b.n	8000d10 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000d12:	4602      	mov	r2, r0
 8000d14:	4649      	mov	r1, r9
 8000d16:	4861      	ldr	r0, [pc, #388]	@ (8000e9c <main+0x334>)
 8000d18:	f006 fd0e 	bl	8007738 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000d1c:	2014      	movs	r0, #20
 8000d1e:	f005 facb 	bl	80062b8 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000d22:	462a      	mov	r2, r5
 8000d24:	4649      	mov	r1, r9
 8000d26:	485d      	ldr	r0, [pc, #372]	@ (8000e9c <main+0x334>)
 8000d28:	f006 fd06 	bl	8007738 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000d2c:	200a      	movs	r0, #10
 8000d2e:	f005 fac3 	bl	80062b8 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000d32:	2224      	movs	r2, #36	@ 0x24
 8000d34:	4621      	mov	r1, r4
 8000d36:	a817      	add	r0, sp, #92	@ 0x5c
 8000d38:	f020 f816 	bl	8020d68 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000d3c:	2218      	movs	r2, #24
 8000d3e:	4621      	mov	r1, r4
 8000d40:	a811      	add	r0, sp, #68	@ 0x44
 8000d42:	f020 f811 	bl	8020d68 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000d46:	2234      	movs	r2, #52	@ 0x34
 8000d48:	4621      	mov	r1, r4
 8000d4a:	a82d      	add	r0, sp, #180	@ 0xb4
 8000d4c:	f020 f80c 	bl	8020d68 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000d50:	4621      	mov	r1, r4
 8000d52:	222c      	movs	r2, #44	@ 0x2c
 8000d54:	a820      	add	r0, sp, #128	@ 0x80
 8000d56:	f020 f807 	bl	8020d68 <memset>
  hdsi.Instance = DSI;
 8000d5a:	4e51      	ldr	r6, [pc, #324]	@ (8000ea0 <main+0x338>)
 8000d5c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d60:	a90e      	add	r1, sp, #56	@ 0x38
 8000d62:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000d64:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000d66:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 8000d6a:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000d6c:	e9c6 8502 	strd	r8, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000d70:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000d74:	f005 ff4a 	bl	8006c0c <HAL_DSI_Init>
 8000d78:	b108      	cbz	r0, 8000d7e <main+0x216>
 8000d7a:	b672      	cpsid	i
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000d7e:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000d82:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000d86:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000d8a:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000d8e:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000d90:	a917      	add	r1, sp, #92	@ 0x5c
 8000d92:	4630      	mov	r0, r6
 8000d94:	f006 f9a6 	bl	80070e4 <HAL_DSI_ConfigHostTimeouts>
 8000d98:	b108      	cbz	r0, 8000d9e <main+0x236>
 8000d9a:	b672      	cpsid	i
  while (1)
 8000d9c:	e7fe      	b.n	8000d9c <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000d9e:	2321      	movs	r3, #33	@ 0x21
 8000da0:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000da2:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000da4:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000da6:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000daa:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000dac:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000db0:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000db2:	e9cd 7313 	strd	r7, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000db6:	f006 f958 	bl	800706a <HAL_DSI_ConfigPhyTimer>
 8000dba:	b108      	cbz	r0, 8000dc0 <main+0x258>
 8000dbc:	b672      	cpsid	i
  while (1)
 8000dbe:	e7fe      	b.n	8000dbe <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000dc0:	2104      	movs	r1, #4
 8000dc2:	4837      	ldr	r0, [pc, #220]	@ (8000ea0 <main+0x338>)
 8000dc4:	f006 f940 	bl	8007048 <HAL_DSI_ConfigFlowControl>
 8000dc8:	b108      	cbz	r0, 8000dce <main+0x266>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000dce:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000dd2:	4833      	ldr	r0, [pc, #204]	@ (8000ea0 <main+0x338>)
 8000dd4:	f006 fb0f 	bl	80073f6 <HAL_DSI_SetLowPowerRXFilter>
 8000dd8:	4601      	mov	r1, r0
 8000dda:	b108      	cbz	r0, 8000de0 <main+0x278>
 8000ddc:	b672      	cpsid	i
  while (1)
 8000dde:	e7fe      	b.n	8000dde <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000de0:	482f      	ldr	r0, [pc, #188]	@ (8000ea0 <main+0x338>)
 8000de2:	f005 feb1 	bl	8006b48 <HAL_DSI_ConfigErrorMonitor>
 8000de6:	b108      	cbz	r0, 8000dec <main+0x284>
 8000de8:	b672      	cpsid	i
  while (1)
 8000dea:	e7fe      	b.n	8000dea <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000dec:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000df0:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000df4:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000df8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000dfc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e00:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e04:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000e08:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000e0c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000e10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000e14:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000e18:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000e1c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e20:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000e24:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e28:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e2c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e30:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000e32:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e36:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e3a:	4819      	ldr	r0, [pc, #100]	@ (8000ea0 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000e3c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000e40:	f006 f8ce 	bl	8006fe0 <HAL_DSI_ConfigCommand>
 8000e44:	b108      	cbz	r0, 8000e4a <main+0x2e2>
 8000e46:	b672      	cpsid	i
  while (1)
 8000e48:	e7fe      	b.n	8000e48 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000e4a:	2305      	movs	r3, #5
 8000e4c:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000e50:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000e52:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000e54:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000e56:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000e58:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000e5c:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000e5e:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000e62:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000e64:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e68:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000e6c:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000e70:	480b      	ldr	r0, [pc, #44]	@ (8000ea0 <main+0x338>)
 8000e72:	f006 f843 	bl	8006efc <HAL_DSI_ConfigAdaptedCommandMode>
 8000e76:	4601      	mov	r1, r0
 8000e78:	b1b0      	cbz	r0, 8000ea8 <main+0x340>
 8000e7a:	b672      	cpsid	i
  while (1)
 8000e7c:	e7fe      	b.n	8000e7c <main+0x314>
 8000e7e:	bf00      	nop
 8000e80:	0300001b 	.word	0x0300001b
 8000e84:	10040000 	.word	0x10040000
 8000e88:	e000ed00 	.word	0xe000ed00
 8000e8c:	58024400 	.word	0x58024400
 8000e90:	24000454 	.word	0x24000454
 8000e94:	52005000 	.word	0x52005000
 8000e98:	24000694 	.word	0x24000694
 8000e9c:	58021800 	.word	0x58021800
 8000ea0:	24000678 	.word	0x24000678
 8000ea4:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000ea8:	488b      	ldr	r0, [pc, #556]	@ (80010d8 <main+0x570>)
 8000eaa:	f006 f816 	bl	8006eda <HAL_DSI_SetGenericVCID>
 8000eae:	4604      	mov	r4, r0
 8000eb0:	b108      	cbz	r0, 8000eb6 <main+0x34e>
 8000eb2:	b672      	cpsid	i
  while (1)
 8000eb4:	e7fe      	b.n	8000eb4 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000eb6:	2234      	movs	r2, #52	@ 0x34
 8000eb8:	4601      	mov	r1, r0
 8000eba:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000ebc:	4d87      	ldr	r5, [pc, #540]	@ (80010dc <main+0x574>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000ebe:	f01f ff53 	bl	8020d68 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000ec2:	f8df c250 	ldr.w	ip, [pc, #592]	@ 8001114 <main+0x5ac>
 8000ec6:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000eca:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000ece:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000ed2:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000ed4:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000ed6:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000eda:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000ede:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000ee2:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000ee6:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000eea:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000eee:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000ef2:	f240 1893 	movw	r8, #403	@ 0x193
 8000ef6:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000efa:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000efe:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000f02:	f007 ff85 	bl	8008e10 <HAL_LTDC_Init>
 8000f06:	4602      	mov	r2, r0
 8000f08:	b108      	cbz	r0, 8000f0e <main+0x3a6>
 8000f0a:	b672      	cpsid	i
  while (1)
 8000f0c:	e7fe      	b.n	8000f0c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000f0e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f10:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000f14:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000f18:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000f1a:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000f1e:	f88d 00b2 	strb.w	r0, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000f22:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000f24:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000f28:	2107      	movs	r1, #7
 8000f2a:	e9cd 4127 	strd	r4, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000f2e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000f32:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.ImageWidth = 400;
 8000f36:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f3a:	4628      	mov	r0, r5
 8000f3c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000f3e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000f42:	f008 f81a 	bl	8008f7a <HAL_LTDC_ConfigLayer>
 8000f46:	4604      	mov	r4, r0
 8000f48:	b108      	cbz	r0, 8000f4e <main+0x3e6>
 8000f4a:	b672      	cpsid	i
  while (1)
 8000f4c:	e7fe      	b.n	8000f4c <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000f4e:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000f50:	4861      	ldr	r0, [pc, #388]	@ (80010d8 <main+0x570>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000f52:	6993      	ldr	r3, [r2, #24]
 8000f54:	f023 0301 	bic.w	r3, r3, #1
 8000f58:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000f5a:	f006 f929 	bl	80071b0 <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000f5e:	4960      	ldr	r1, [pc, #384]	@ (80010e0 <main+0x578>)
  IOCtx.GetTick     = BSP_GetTick;
 8000f60:	4b60      	ldr	r3, [pc, #384]	@ (80010e4 <main+0x57c>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000f62:	4861      	ldr	r0, [pc, #388]	@ (80010e8 <main+0x580>)
  IOCtx.GetTick     = BSP_GetTick;
 8000f64:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f66:	4b61      	ldr	r3, [pc, #388]	@ (80010ec <main+0x584>)
  IOCtx.Address     = 0;
 8000f68:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000f6a:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000f6c:	4b60      	ldr	r3, [pc, #384]	@ (80010f0 <main+0x588>)
 8000f6e:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000f70:	f004 faa2 	bl	80054b8 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000f74:	4632      	mov	r2, r6
 8000f76:	4621      	mov	r1, r4
 8000f78:	485b      	ldr	r0, [pc, #364]	@ (80010e8 <main+0x580>)
 8000f7a:	f003 ff0d 	bl	8004d98 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000f7e:	2328      	movs	r3, #40	@ 0x28
 8000f80:	2215      	movs	r2, #21
 8000f82:	4621      	mov	r1, r4
 8000f84:	4854      	ldr	r0, [pc, #336]	@ (80010d8 <main+0x570>)
 8000f86:	9400      	str	r4, [sp, #0]
 8000f88:	f006 f945 	bl	8007216 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000f8c:	a92d      	add	r1, sp, #180	@ 0xb4
 8000f8e:	4852      	ldr	r0, [pc, #328]	@ (80010d8 <main+0x570>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000f90:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000f92:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000f96:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000f9a:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000f9e:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000fa2:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000fa6:	f006 f81b 	bl	8006fe0 <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000faa:	4622      	mov	r2, r4
 8000fac:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000fb0:	4628      	mov	r0, r5
 8000fb2:	f008 f80f 	bl	8008fd4 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000fb6:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000fb8:	484e      	ldr	r0, [pc, #312]	@ (80010f4 <main+0x58c>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000fba:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000fbc:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000fbe:	f043 0301 	orr.w	r3, r3, #1
 8000fc2:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000fc4:	4b4c      	ldr	r3, [pc, #304]	@ (80010f8 <main+0x590>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000fc6:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000fc8:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000fca:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000fce:	f005 fa39 	bl	8006444 <HAL_CRC_Init>
 8000fd2:	b108      	cbz	r0, 8000fd8 <main+0x470>
 8000fd4:	b672      	cpsid	i
  while (1)
 8000fd6:	e7fe      	b.n	8000fd6 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000fd8:	4848      	ldr	r0, [pc, #288]	@ (80010fc <main+0x594>)
 8000fda:	4b49      	ldr	r3, [pc, #292]	@ (8001100 <main+0x598>)
 8000fdc:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000fde:	f007 f905 	bl	80081ec <HAL_JPEG_Init>
 8000fe2:	b108      	cbz	r0, 8000fe8 <main+0x480>
 8000fe4:	b672      	cpsid	i
  while (1)
 8000fe6:	e7fe      	b.n	8000fe6 <main+0x47e>
  huart1.Instance = USART1;
 8000fe8:	4c46      	ldr	r4, [pc, #280]	@ (8001104 <main+0x59c>)
  huart1.Init.BaudRate = 115200;
 8000fea:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000fee:	4846      	ldr	r0, [pc, #280]	@ (8001108 <main+0x5a0>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ff0:	250c      	movs	r5, #12
  huart1.Init.BaudRate = 115200;
 8000ff2:	e9c4 0300 	strd	r0, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ff6:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ff8:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ffa:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ffe:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001000:	e9c4 5305 	strd	r5, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001004:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001008:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800100c:	f00b f89b 	bl	800c146 <HAL_UART_Init>
 8001010:	4601      	mov	r1, r0
 8001012:	b108      	cbz	r0, 8001018 <main+0x4b0>
 8001014:	b672      	cpsid	i
  while (1)
 8001016:	e7fe      	b.n	8001016 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001018:	4620      	mov	r0, r4
 800101a:	f00b f905 	bl	800c228 <HAL_UARTEx_SetTxFifoThreshold>
 800101e:	4601      	mov	r1, r0
 8001020:	b108      	cbz	r0, 8001026 <main+0x4be>
 8001022:	b672      	cpsid	i
  while (1)
 8001024:	e7fe      	b.n	8001024 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001026:	4620      	mov	r0, r4
 8001028:	f00b f91e 	bl	800c268 <HAL_UARTEx_SetRxFifoThreshold>
 800102c:	b108      	cbz	r0, 8001032 <main+0x4ca>
 800102e:	b672      	cpsid	i
  while (1)
 8001030:	e7fe      	b.n	8001030 <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8001032:	4620      	mov	r0, r4
 8001034:	f00b f8dd 	bl	800c1f2 <HAL_UARTEx_DisableFifoMode>
 8001038:	b108      	cbz	r0, 800103e <main+0x4d6>
 800103a:	b672      	cpsid	i
  while (1)
 800103c:	e7fe      	b.n	800103c <main+0x4d4>
  MX_TouchGFX_Init();
 800103e:	f000 fe35 	bl	8001cac <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8001042:	f000 fe32 	bl	8001caa <MX_TouchGFX_PreOSInit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Hell", strlen("Hell"), HAL_MAX_DELAY);
 8001046:	f04f 33ff 	mov.w	r3, #4294967295
 800104a:	2204      	movs	r2, #4
 800104c:	492f      	ldr	r1, [pc, #188]	@ (800110c <main+0x5a4>)
 800104e:	4620      	mov	r0, r4
 8001050:	f00a ffc9 	bl	800bfe6 <HAL_UART_Transmit>
  (void)BSP_I2C4_Init();
 8001054:	f004 fa98 	bl	8005588 <BSP_I2C4_Init>
  Set_Time(12, 34, 56);  // Set time to 12:34:56
 8001058:	4628      	mov	r0, r5
 800105a:	2238      	movs	r2, #56	@ 0x38
 800105c:	2122      	movs	r1, #34	@ 0x22
 800105e:	f7ff fd09 	bl	8000a74 <Set_Time>
  Get_Time(&hours, &minutes, &seconds);
 8001062:	aa20      	add	r2, sp, #128	@ 0x80
 8001064:	a917      	add	r1, sp, #92	@ 0x5c
 8001066:	a811      	add	r0, sp, #68	@ 0x44
 8001068:	f7ff fce1 	bl	8000a2e <Get_Time>
  sprintf(UART_BUFF, "Time: %02d:%02d:%02d\n", hours, minutes, seconds);
 800106c:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 8001070:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
 8001074:	a82d      	add	r0, sp, #180	@ 0xb4
 8001076:	4926      	ldr	r1, [pc, #152]	@ (8001110 <main+0x5a8>)
 8001078:	9300      	str	r3, [sp, #0]
 800107a:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 800107e:	f01f fd7b 	bl	8020b78 <siprintf>
	  sprintf(UART_BUFF, "Time: %02d:%02d:%02d\n", hours, minutes, seconds);
 8001082:	4d23      	ldr	r5, [pc, #140]	@ (8001110 <main+0x5a8>)
  HAL_UART_Transmit(&huart1, (uint8_t *)UART_BUFF, strlen(UART_BUFF), HAL_MAX_DELAY);
 8001084:	a82d      	add	r0, sp, #180	@ 0xb4
 8001086:	f7ff f92b 	bl	80002e0 <strlen>
 800108a:	f04f 33ff 	mov.w	r3, #4294967295
 800108e:	b282      	uxth	r2, r0
 8001090:	a92d      	add	r1, sp, #180	@ 0xb4
 8001092:	4620      	mov	r0, r4
 8001094:	f00a ffa7 	bl	800bfe6 <HAL_UART_Transmit>
	  Get_Time(&hours, &minutes, &seconds);
 8001098:	aa20      	add	r2, sp, #128	@ 0x80
 800109a:	a917      	add	r1, sp, #92	@ 0x5c
 800109c:	a811      	add	r0, sp, #68	@ 0x44
 800109e:	f7ff fcc6 	bl	8000a2e <Get_Time>
	  sprintf(UART_BUFF, "Time: %02d:%02d:%02d\n", hours, minutes, seconds);
 80010a2:	f89d 3080 	ldrb.w	r3, [sp, #128]	@ 0x80
 80010a6:	f89d 2044 	ldrb.w	r2, [sp, #68]	@ 0x44
 80010aa:	4629      	mov	r1, r5
 80010ac:	9300      	str	r3, [sp, #0]
 80010ae:	a82d      	add	r0, sp, #180	@ 0xb4
 80010b0:	f89d 305c 	ldrb.w	r3, [sp, #92]	@ 0x5c
 80010b4:	f01f fd60 	bl	8020b78 <siprintf>
	  HAL_UART_Transmit(&huart1, (uint8_t *)UART_BUFF, strlen(UART_BUFF), HAL_MAX_DELAY);
 80010b8:	a82d      	add	r0, sp, #180	@ 0xb4
 80010ba:	f7ff f911 	bl	80002e0 <strlen>
 80010be:	f04f 33ff 	mov.w	r3, #4294967295
 80010c2:	b282      	uxth	r2, r0
 80010c4:	a92d      	add	r1, sp, #180	@ 0xb4
 80010c6:	4620      	mov	r0, r4
 80010c8:	f00a ff8d 	bl	800bfe6 <HAL_UART_Transmit>
	  HAL_Delay(1000);
 80010cc:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80010d0:	f005 f8f2 	bl	80062b8 <HAL_Delay>
  while(1){
 80010d4:	e7e0      	b.n	8001098 <main+0x530>
 80010d6:	bf00      	nop
 80010d8:	24000678 	.word	0x24000678
 80010dc:	240004a0 	.word	0x240004a0
 80010e0:	2400035c 	.word	0x2400035c
 80010e4:	08005899 	.word	0x08005899
 80010e8:	2400036c 	.word	0x2400036c
 80010ec:	08002251 	.word	0x08002251
 80010f0:	08002289 	.word	0x08002289
 80010f4:	240006fc 	.word	0x240006fc
 80010f8:	58024c00 	.word	0x58024c00
 80010fc:	24000620 	.word	0x24000620
 8001100:	52003000 	.word	0x52003000
 8001104:	240003c0 	.word	0x240003c0
 8001108:	40011000 	.word	0x40011000
 800110c:	08021c40 	.word	0x08021c40
 8001110:	08021c45 	.word	0x08021c45
 8001114:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001118:	2214      	movs	r2, #20
 800111a:	2100      	movs	r1, #0
 800111c:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800111e:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001120:	f01f fe22 	bl	8020d68 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001124:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001128:	2200      	movs	r2, #0
 800112a:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800112e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001132:	489a      	ldr	r0, [pc, #616]	@ (800139c <main+0x834>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001134:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001136:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001138:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800113c:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001140:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001148:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800114c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001150:	9304      	str	r3, [sp, #16]
 8001152:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001158:	f043 0302 	orr.w	r3, r3, #2
 800115c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001160:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	9305      	str	r3, [sp, #20]
 800116a:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800116c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001170:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001174:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001178:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800117c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001180:	9306      	str	r3, [sp, #24]
 8001182:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001184:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001188:	f043 0310 	orr.w	r3, r3, #16
 800118c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001190:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001194:	f003 0310 	and.w	r3, r3, #16
 8001198:	9307      	str	r3, [sp, #28]
 800119a:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800119c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80011a4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80011b0:	9308      	str	r3, [sp, #32]
 80011b2:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011b8:	f043 0304 	orr.w	r3, r3, #4
 80011bc:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011c4:	f003 0304 	and.w	r3, r3, #4
 80011c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80011ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80011cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011d0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80011d4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011dc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80011e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80011f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80011f4:	f003 0308 	and.w	r3, r3, #8
 80011f8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80011fa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001200:	f043 0301 	orr.w	r3, r3, #1
 8001204:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001208:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800120c:	f003 0301 	and.w	r3, r3, #1
 8001210:	930c      	str	r3, [sp, #48]	@ 0x30
 8001212:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001214:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001218:	f043 0320 	orr.w	r3, r3, #32
 800121c:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001220:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001224:	f003 0320 	and.w	r3, r3, #32
 8001228:	930d      	str	r3, [sp, #52]	@ 0x34
 800122a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800122c:	f006 fa84 	bl	8007738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 8001230:	2200      	movs	r2, #0
 8001232:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001236:	485a      	ldr	r0, [pc, #360]	@ (80013a0 <main+0x838>)
 8001238:	f006 fa7e 	bl	8007738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 800123c:	2200      	movs	r2, #0
 800123e:	2108      	movs	r1, #8
 8001240:	4858      	ldr	r0, [pc, #352]	@ (80013a4 <main+0x83c>)
 8001242:	f006 fa79 	bl	8007738 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001246:	2200      	movs	r2, #0
 8001248:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800124c:	4856      	ldr	r0, [pc, #344]	@ (80013a8 <main+0x840>)
 800124e:	f006 fa73 	bl	8007738 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001256:	a92d      	add	r1, sp, #180	@ 0xb4
 8001258:	4850      	ldr	r0, [pc, #320]	@ (800139c <main+0x834>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800125a:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800125e:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001262:	f006 f8df 	bl	8007424 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001266:	a92d      	add	r1, sp, #180	@ 0xb4
 8001268:	4850      	ldr	r0, [pc, #320]	@ (80013ac <main+0x844>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800126a:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126c:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001270:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001274:	f006 f8d6 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001278:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800127c:	a92d      	add	r1, sp, #180	@ 0xb4
 800127e:	4848      	ldr	r0, [pc, #288]	@ (80013a0 <main+0x838>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001280:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001284:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001288:	f006 f8cc 	bl	8007424 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 800128c:	a92d      	add	r1, sp, #180	@ 0xb4
 800128e:	4845      	ldr	r0, [pc, #276]	@ (80013a4 <main+0x83c>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001290:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001294:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001298:	f006 f8c4 	bl	8007424 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 800129c:	a92d      	add	r1, sp, #180	@ 0xb4
 800129e:	4842      	ldr	r0, [pc, #264]	@ (80013a8 <main+0x840>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a0:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012a4:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012a8:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80012ac:	f006 f8ba 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012b0:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80012b4:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012b6:	a92d      	add	r1, sp, #180	@ 0xb4
 80012b8:	483d      	ldr	r0, [pc, #244]	@ (80013b0 <main+0x848>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80012ba:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80012be:	e9cd 232d 	strd	r2, r3, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c2:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012c6:	f006 f8ad 	bl	8007424 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80012ca:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80012ce:	4632      	mov	r2, r6
 80012d0:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80012d2:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80012d4:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 80012d6:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80012da:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80012de:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80012e0:	402b      	ands	r3, r5
 80012e2:	9303      	str	r3, [sp, #12]
 80012e4:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80012e6:	f005 f811 	bl	800630c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80012ea:	207a      	movs	r0, #122	@ 0x7a
 80012ec:	f005 f840 	bl	8006370 <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80012f0:	4a30      	ldr	r2, [pc, #192]	@ (80013b4 <main+0x84c>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80012f2:	4831      	ldr	r0, [pc, #196]	@ (80013b8 <main+0x850>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 80012f4:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80012f8:	6813      	ldr	r3, [r2, #0]
 80012fa:	f023 0301 	bic.w	r3, r3, #1
 80012fe:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 8001300:	4b2e      	ldr	r3, [pc, #184]	@ (80013bc <main+0x854>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 8001302:	6286      	str	r6, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001304:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001308:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 800130c:	2320      	movs	r3, #32
 800130e:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 8001312:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001316:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 800131a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800131e:	e9c0 1308 	strd	r1, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 8001322:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001324:	a92d      	add	r1, sp, #180	@ 0xb4
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001326:	e9c0 5802 	strd	r5, r8, [r0, #8]
  SdramTiming.SelfRefreshTime = 4;
 800132a:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 800132e:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  SdramTiming.RCDDelay = 2;
 8001332:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001336:	f00a f819 	bl	800b36c <HAL_SDRAM_Init>
 800133a:	4606      	mov	r6, r0
 800133c:	2800      	cmp	r0, #0
 800133e:	f47f acb6 	bne.w	8000cae <main+0x146>
  BSP_SDRAM_DeInit(0);
 8001342:	f004 fccf 	bl	8005ce4 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001346:	4630      	mov	r0, r6
 8001348:	f004 fd1a 	bl	8005d80 <BSP_SDRAM_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2800      	cmp	r0, #0
 8001350:	f43f acaf 	beq.w	8000cb2 <main+0x14a>
 8001354:	b672      	cpsid	i
  while (1)
 8001356:	e7fe      	b.n	8001356 <main+0x7ee>
  HAL_Init();
 8001358:	f004 ff6e 	bl	8006238 <HAL_Init>
  SystemClock_Config();
 800135c:	f7ff fba2 	bl	8000aa4 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 8001360:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001364:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800136a:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800136e:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8001372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001376:	9302      	str	r3, [sp, #8]
 8001378:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 800137a:	f006 f9eb 	bl	8007754 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800137e:	4621      	mov	r1, r4
 8001380:	4620      	mov	r0, r4
 8001382:	f006 f9f5 	bl	8007770 <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001386:	4c0e      	ldr	r4, [pc, #56]	@ (80013c0 <main+0x858>)
timeout = 0xFFFF;
 8001388:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800138c:	6822      	ldr	r2, [r4, #0]
 800138e:	0412      	lsls	r2, r2, #16
 8001390:	f53f aec2 	bmi.w	8001118 <main+0x5b0>
 8001394:	3b01      	subs	r3, #1
 8001396:	d2f9      	bcs.n	800138c <main+0x824>
 8001398:	b672      	cpsid	i
  while (1)
 800139a:	e7fe      	b.n	800139a <main+0x832>
 800139c:	58022400 	.word	0x58022400
 80013a0:	58022000 	.word	0x58022000
 80013a4:	58021800 	.word	0x58021800
 80013a8:	58021400 	.word	0x58021400
 80013ac:	58020000 	.word	0x58020000
 80013b0:	58020c00 	.word	0x58020c00
 80013b4:	52004000 	.word	0x52004000
 80013b8:	2400038c 	.word	0x2400038c
 80013bc:	52004140 	.word	0x52004140
 80013c0:	58024400 	.word	0x58024400

080013c4 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80013c4:	6802      	ldr	r2, [r0, #0]
 80013c6:	4b03      	ldr	r3, [pc, #12]	@ (80013d4 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80013c8:	429a      	cmp	r2, r3
 80013ca:	d101      	bne.n	80013d0 <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80013cc:	f004 bf62 	b.w	8006294 <HAL_IncTick>
}
 80013d0:	4770      	bx	lr
 80013d2:	bf00      	nop
 80013d4:	40001000 	.word	0x40001000

080013d8 <Error_Handler>:
 80013d8:	b672      	cpsid	i
  while (1)
 80013da:	e7fe      	b.n	80013da <Error_Handler+0x2>

080013dc <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001408 <HAL_MspInit+0x2c>)
{
 80013de:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013e0:	210f      	movs	r1, #15
 80013e2:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013e6:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80013ea:	f042 0202 	orr.w	r2, r2, #2
 80013ee:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80013f2:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013f4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013f8:	f003 0302 	and.w	r3, r3, #2
 80013fc:	9301      	str	r3, [sp, #4]
 80013fe:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001400:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001402:	f004 bf83 	b.w	800630c <HAL_NVIC_SetPriority>
 8001406:	bf00      	nop
 8001408:	58024400 	.word	0x58024400

0800140c <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 800140c:	6802      	ldr	r2, [r0, #0]
{
 800140e:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 8001410:	4b09      	ldr	r3, [pc, #36]	@ (8001438 <HAL_CRC_MspInit+0x2c>)
 8001412:	429a      	cmp	r2, r3
 8001414:	d10d      	bne.n	8001432 <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001416:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 800141a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800141e:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 8001422:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001426:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800142a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800142e:	9301      	str	r3, [sp, #4]
 8001430:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 8001432:	b002      	add	sp, #8
 8001434:	4770      	bx	lr
 8001436:	bf00      	nop
 8001438:	58024c00 	.word	0x58024c00

0800143c <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 800143c:	4b0f      	ldr	r3, [pc, #60]	@ (800147c <HAL_DMA2D_MspInit+0x40>)
{
 800143e:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 8001440:	6802      	ldr	r2, [r0, #0]
 8001442:	429a      	cmp	r2, r3
 8001444:	d117      	bne.n	8001476 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001446:	4b0e      	ldr	r3, [pc, #56]	@ (8001480 <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001448:	2107      	movs	r1, #7
 800144a:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800144c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001450:	f042 0210 	orr.w	r2, r2, #16
 8001454:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001458:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800145a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800145e:	f003 0310 	and.w	r3, r3, #16
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001466:	f004 ff51 	bl	800630c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800146a:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 800146c:	b003      	add	sp, #12
 800146e:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001472:	f004 bf7d 	b.w	8006370 <HAL_NVIC_EnableIRQ>
}
 8001476:	b003      	add	sp, #12
 8001478:	f85d fb04 	ldr.w	pc, [sp], #4
 800147c:	52001000 	.word	0x52001000
 8001480:	58024400 	.word	0x58024400

08001484 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001484:	b510      	push	{r4, lr}
 8001486:	b0ba      	sub	sp, #232	@ 0xe8
 8001488:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800148a:	2214      	movs	r2, #20
 800148c:	2100      	movs	r1, #0
 800148e:	a803      	add	r0, sp, #12
 8001490:	f01f fc6a 	bl	8020d68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001494:	22c8      	movs	r2, #200	@ 0xc8
 8001496:	2100      	movs	r1, #0
 8001498:	a808      	add	r0, sp, #32
 800149a:	f01f fc65 	bl	8020d68 <memset>
  if(hdsi->Instance==DSI)
 800149e:	6823      	ldr	r3, [r4, #0]
 80014a0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80014a4:	d138      	bne.n	8001518 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80014a6:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80014aa:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ac:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80014ae:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014b2:	f009 f8e7 	bl	800a684 <HAL_RCCEx_PeriphCLKConfig>
 80014b6:	b108      	cbz	r0, 80014bc <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80014b8:	f7ff ff8e 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80014bc:	4b17      	ldr	r3, [pc, #92]	@ (800151c <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014be:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80014c0:	a903      	add	r1, sp, #12
 80014c2:	4817      	ldr	r0, [pc, #92]	@ (8001520 <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80014c4:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80014c8:	f042 0210 	orr.w	r2, r2, #16
 80014cc:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80014d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80014d4:	f002 0210 	and.w	r2, r2, #16
 80014d8:	9201      	str	r2, [sp, #4]
 80014da:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80014e0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80014e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014e8:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80014ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80014ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80014f2:	9302      	str	r3, [sp, #8]
 80014f4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014f6:	2302      	movs	r3, #2
 80014f8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 80014fc:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014fe:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001502:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001504:	f005 ff8e 	bl	8007424 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001508:	207b      	movs	r0, #123	@ 0x7b
 800150a:	4622      	mov	r2, r4
 800150c:	2107      	movs	r1, #7
 800150e:	f004 fefd 	bl	800630c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 8001512:	207b      	movs	r0, #123	@ 0x7b
 8001514:	f004 ff2c 	bl	8006370 <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001518:	b03a      	add	sp, #232	@ 0xe8
 800151a:	bd10      	pop	{r4, pc}
 800151c:	58024400 	.word	0x58024400
 8001520:	58022400 	.word	0x58022400

08001524 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001524:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001526:	4b3c      	ldr	r3, [pc, #240]	@ (8001618 <HAL_JPEG_MspInit+0xf4>)
{
 8001528:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 800152a:	6802      	ldr	r2, [r0, #0]
 800152c:	429a      	cmp	r2, r3
 800152e:	d170      	bne.n	8001612 <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001530:	4b3a      	ldr	r3, [pc, #232]	@ (800161c <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 8001532:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001534:	4c3a      	ldr	r4, [pc, #232]	@ (8001620 <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001536:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 800153a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800153e:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 800162c <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001542:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001544:	f042 0220 	orr.w	r2, r2, #32
 8001548:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800154c:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800154e:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001552:	f003 0320 	and.w	r3, r3, #32
 8001556:	9301      	str	r3, [sp, #4]
 8001558:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800155a:	2311      	movs	r3, #17
 800155c:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001560:	2300      	movs	r3, #0
 8001562:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001566:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800156a:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 800156c:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800156e:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001572:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001576:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 800157a:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800157e:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001582:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001586:	f007 fd90 	bl	80090aa <HAL_MDMA_Init>
 800158a:	b108      	cbz	r0, 8001590 <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 800158c:	f7ff ff24 	bl	80013d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 8001590:	2200      	movs	r2, #0
 8001592:	4823      	ldr	r0, [pc, #140]	@ (8001620 <HAL_JPEG_MspInit+0xfc>)
 8001594:	4611      	mov	r1, r2
 8001596:	f007 fe16 	bl	80091c6 <HAL_MDMA_ConfigPostRequestMask>
 800159a:	b108      	cbz	r0, 80015a0 <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 800159c:	f7ff ff1c 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80015a0:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015a2:	2313      	movs	r3, #19
 80015a4:	4a1f      	ldr	r2, [pc, #124]	@ (8001624 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015a6:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80015a8:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015aa:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80015ae:	4c1e      	ldr	r4, [pc, #120]	@ (8001628 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80015b0:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80015b4:	2300      	movs	r3, #0
 80015b6:	22c0      	movs	r2, #192	@ 0xc0
 80015b8:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015bc:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80015be:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80015c0:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80015c4:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80015c8:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80015cc:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80015d0:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80015d4:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80015d6:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80015da:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80015de:	f007 fd64 	bl	80090aa <HAL_MDMA_Init>
 80015e2:	b108      	cbz	r0, 80015e8 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80015e4:	f7ff fef8 	bl	80013d8 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80015e8:	2200      	movs	r2, #0
 80015ea:	480f      	ldr	r0, [pc, #60]	@ (8001628 <HAL_JPEG_MspInit+0x104>)
 80015ec:	4611      	mov	r1, r2
 80015ee:	f007 fdea 	bl	80091c6 <HAL_MDMA_ConfigPostRequestMask>
 80015f2:	b108      	cbz	r0, 80015f8 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 80015f4:	f7ff fef0 	bl	80013d8 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 80015f8:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 80015fa:	2200      	movs	r2, #0
 80015fc:	2105      	movs	r1, #5
 80015fe:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001600:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001602:	f004 fe83 	bl	800630c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001606:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001608:	b003      	add	sp, #12
 800160a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800160e:	f004 beaf 	b.w	8006370 <HAL_NVIC_EnableIRQ>
}
 8001612:	b003      	add	sp, #12
 8001614:	bd30      	pop	{r4, r5, pc}
 8001616:	bf00      	nop
 8001618:	52003000 	.word	0x52003000
 800161c:	58024400 	.word	0x58024400
 8001620:	240005b4 	.word	0x240005b4
 8001624:	520001c0 	.word	0x520001c0
 8001628:	24000548 	.word	0x24000548
 800162c:	52000200 	.word	0x52000200

08001630 <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 8001630:	b510      	push	{r4, lr}
 8001632:	b0b4      	sub	sp, #208	@ 0xd0
 8001634:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001636:	22c8      	movs	r2, #200	@ 0xc8
 8001638:	2100      	movs	r1, #0
 800163a:	a802      	add	r0, sp, #8
 800163c:	f01f fb94 	bl	8020d68 <memset>
  if(hltdc->Instance==LTDC)
 8001640:	6822      	ldr	r2, [r4, #0]
 8001642:	4b18      	ldr	r3, [pc, #96]	@ (80016a4 <HAL_LTDC_MspInit+0x74>)
 8001644:	429a      	cmp	r2, r3
 8001646:	d12b      	bne.n	80016a0 <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001648:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800164c:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800164e:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001650:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001652:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001656:	23a1      	movs	r3, #161	@ 0xa1
 8001658:	2205      	movs	r2, #5
 800165a:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800165e:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 8001660:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001664:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001668:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800166c:	f009 f80a 	bl	800a684 <HAL_RCCEx_PeriphCLKConfig>
 8001670:	b108      	cbz	r0, 8001676 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 8001672:	f7ff feb1 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001678:	2058      	movs	r0, #88	@ 0x58
 800167a:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 800167c:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 8001680:	f042 0208 	orr.w	r2, r2, #8
 8001684:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001688:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 800168a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800168e:	f003 0308 	and.w	r3, r3, #8
 8001692:	9301      	str	r3, [sp, #4]
 8001694:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001696:	f004 fe39 	bl	800630c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800169a:	2058      	movs	r0, #88	@ 0x58
 800169c:	f004 fe68 	bl	8006370 <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80016a0:	b034      	add	sp, #208	@ 0xd0
 80016a2:	bd10      	pop	{r4, pc}
 80016a4:	50001000 	.word	0x50001000
 80016a8:	58024400 	.word	0x58024400

080016ac <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80016ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ae:	b0bf      	sub	sp, #252	@ 0xfc
 80016b0:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b2:	2214      	movs	r2, #20
 80016b4:	2100      	movs	r1, #0
 80016b6:	a807      	add	r0, sp, #28
 80016b8:	f01f fb56 	bl	8020d68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016bc:	22c8      	movs	r2, #200	@ 0xc8
 80016be:	2100      	movs	r1, #0
 80016c0:	a80c      	add	r0, sp, #48	@ 0x30
 80016c2:	f01f fb51 	bl	8020d68 <memset>
  if(hqspi->Instance==QUADSPI)
 80016c6:	6822      	ldr	r2, [r4, #0]
 80016c8:	4b53      	ldr	r3, [pc, #332]	@ (8001818 <HAL_QSPI_MspInit+0x16c>)
 80016ca:	429a      	cmp	r2, r3
 80016cc:	f040 80a1 	bne.w	8001812 <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80016d0:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80016d4:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016d6:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80016d8:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80016dc:	f008 ffd2 	bl	800a684 <HAL_RCCEx_PeriphCLKConfig>
 80016e0:	b108      	cbz	r0, 80016e6 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80016e2:	f7ff fe79 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016e6:	4b4d      	ldr	r3, [pc, #308]	@ (800181c <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ea:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016ec:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016ee:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016f2:	a907      	add	r1, sp, #28
 80016f4:	484a      	ldr	r0, [pc, #296]	@ (8001820 <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016f6:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 80016f8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80016fc:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001700:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001704:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001708:	9201      	str	r2, [sp, #4]
 800170a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800170c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001710:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001714:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001718:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800171c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8001720:	9202      	str	r2, [sp, #8]
 8001722:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001724:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001728:	f042 0220 	orr.w	r2, r2, #32
 800172c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001730:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001734:	f002 0220 	and.w	r2, r2, #32
 8001738:	9203      	str	r2, [sp, #12]
 800173a:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 800173c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001740:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001744:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001748:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800174c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8001750:	9204      	str	r2, [sp, #16]
 8001752:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001754:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001758:	f042 0202 	orr.w	r2, r2, #2
 800175c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001760:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001764:	f002 0202 	and.w	r2, r2, #2
 8001768:	9205      	str	r2, [sp, #20]
 800176a:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800176c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001770:	f042 0208 	orr.w	r2, r2, #8
 8001774:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001778:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800177c:	f003 0308 	and.w	r3, r3, #8
 8001780:	9306      	str	r3, [sp, #24]
 8001782:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001784:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001788:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800178c:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001790:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001792:	f005 fe47 	bl	8007424 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001796:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001798:	a907      	add	r1, sp, #28
 800179a:	4821      	ldr	r0, [pc, #132]	@ (8001820 <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 800179c:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800179e:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80017a6:	f005 fe3d 	bl	8007424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80017aa:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ac:	a907      	add	r1, sp, #28
 80017ae:	481d      	ldr	r0, [pc, #116]	@ (8001824 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017b0:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017b6:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017ba:	f005 fe33 	bl	8007424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80017be:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017c2:	a907      	add	r1, sp, #28
 80017c4:	4817      	ldr	r0, [pc, #92]	@ (8001824 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80017c6:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017c8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017cc:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80017d0:	f005 fe28 	bl	8007424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d4:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017d6:	a907      	add	r1, sp, #28
 80017d8:	4813      	ldr	r0, [pc, #76]	@ (8001828 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017da:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017dc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e0:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80017e4:	f005 fe1e 	bl	8007424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80017e8:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017ea:	a907      	add	r1, sp, #28
 80017ec:	480f      	ldr	r0, [pc, #60]	@ (800182c <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80017ee:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f0:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017f4:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80017f8:	f005 fe14 	bl	8007424 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80017fc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001800:	a907      	add	r1, sp, #28
 8001802:	480b      	ldr	r0, [pc, #44]	@ (8001830 <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001804:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001806:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800180a:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800180e:	f005 fe09 	bl	8007424 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 8001812:	b03f      	add	sp, #252	@ 0xfc
 8001814:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001816:	bf00      	nop
 8001818:	52005000 	.word	0x52005000
 800181c:	58024400 	.word	0x58024400
 8001820:	58021800 	.word	0x58021800
 8001824:	58021400 	.word	0x58021400
 8001828:	58021c00 	.word	0x58021c00
 800182c:	58020400 	.word	0x58020400
 8001830:	58020c00 	.word	0x58020c00

08001834 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001834:	b510      	push	{r4, lr}
 8001836:	b0ba      	sub	sp, #232	@ 0xe8
 8001838:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800183a:	2214      	movs	r2, #20
 800183c:	2100      	movs	r1, #0
 800183e:	a803      	add	r0, sp, #12
 8001840:	f01f fa92 	bl	8020d68 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001844:	22c8      	movs	r2, #200	@ 0xc8
 8001846:	2100      	movs	r1, #0
 8001848:	a808      	add	r0, sp, #32
 800184a:	f01f fa8d 	bl	8020d68 <memset>
  if(huart->Instance==USART1)
 800184e:	6822      	ldr	r2, [r4, #0]
 8001850:	4b1e      	ldr	r3, [pc, #120]	@ (80018cc <HAL_UART_MspInit+0x98>)
 8001852:	429a      	cmp	r2, r3
 8001854:	d138      	bne.n	80018c8 <HAL_UART_MspInit+0x94>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001856:	2201      	movs	r2, #1
 8001858:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800185a:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 800185c:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001860:	f008 ff10 	bl	800a684 <HAL_RCCEx_PeriphCLKConfig>
 8001864:	b108      	cbz	r0, 800186a <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001866:	f7ff fdb7 	bl	80013d8 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800186a:	4b19      	ldr	r3, [pc, #100]	@ (80018d0 <HAL_UART_MspInit+0x9c>)
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800186c:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800186e:	a903      	add	r1, sp, #12
 8001870:	4818      	ldr	r0, [pc, #96]	@ (80018d4 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 8001872:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001876:	f042 0210 	orr.w	r2, r2, #16
 800187a:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800187e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001882:	f002 0210 	and.w	r2, r2, #16
 8001886:	9201      	str	r2, [sp, #4]
 8001888:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800188a:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800188e:	f042 0201 	orr.w	r2, r2, #1
 8001892:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001896:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800189a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800189e:	f003 0301 	and.w	r3, r3, #1
 80018a2:	9302      	str	r3, [sp, #8]
 80018a4:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018a6:	2302      	movs	r3, #2
 80018a8:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018ac:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80018ae:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80018b2:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80018b4:	f005 fdb6 	bl	8007424 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80018b8:	2025      	movs	r0, #37	@ 0x25
 80018ba:	4622      	mov	r2, r4
 80018bc:	2105      	movs	r1, #5
 80018be:	f004 fd25 	bl	800630c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80018c2:	2025      	movs	r0, #37	@ 0x25
 80018c4:	f004 fd54 	bl	8006370 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80018c8:	b03a      	add	sp, #232	@ 0xe8
 80018ca:	bd10      	pop	{r4, pc}
 80018cc:	40011000 	.word	0x40011000
 80018d0:	58024400 	.word	0x58024400
 80018d4:	58020000 	.word	0x58020000

080018d8 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80018d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018da:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80018dc:	2100      	movs	r1, #0
 80018de:	2214      	movs	r2, #20
 80018e0:	a801      	add	r0, sp, #4
 80018e2:	f01f fa41 	bl	8020d68 <memset>
  if (FMC_Initialized) {
 80018e6:	4b3f      	ldr	r3, [pc, #252]	@ (80019e4 <HAL_SDRAM_MspInit+0x10c>)
 80018e8:	6819      	ldr	r1, [r3, #0]
 80018ea:	2900      	cmp	r1, #0
 80018ec:	d177      	bne.n	80019de <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80018ee:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f0:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80018f2:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80018f4:	22c0      	movs	r2, #192	@ 0xc0
 80018f6:	f01f fa37 	bl	8020d68 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 80018fa:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80018fe:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001900:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001902:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001906:	f008 febd 	bl	800a684 <HAL_RCCEx_PeriphCLKConfig>
 800190a:	b108      	cbz	r0, 8001910 <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 800190c:	f7ff fd64 	bl	80013d8 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 8001910:	4b35      	ldr	r3, [pc, #212]	@ (80019e8 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001912:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001914:	2600      	movs	r6, #0
 8001916:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001918:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800191c:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800191e:	a901      	add	r1, sp, #4
 8001920:	4832      	ldr	r0, [pc, #200]	@ (80019ec <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8001922:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001926:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800192a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800192e:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 8001930:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001934:	9300      	str	r3, [sp, #0]
 8001936:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001938:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800193c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001940:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001944:	f005 fd6e 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001948:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800194a:	a901      	add	r1, sp, #4
 800194c:	4828      	ldr	r0, [pc, #160]	@ (80019f0 <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800194e:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001950:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001954:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001958:	f005 fd64 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 800195c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001960:	a901      	add	r1, sp, #4
 8001962:	4824      	ldr	r0, [pc, #144]	@ (80019f4 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001964:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001966:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800196a:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196e:	f005 fd59 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001972:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001976:	a901      	add	r1, sp, #4
 8001978:	481f      	ldr	r0, [pc, #124]	@ (80019f8 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800197a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001980:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001984:	f005 fd4e 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001988:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800198c:	a901      	add	r1, sp, #4
 800198e:	481b      	ldr	r0, [pc, #108]	@ (80019fc <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001990:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001992:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001996:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800199a:	f005 fd43 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 800199e:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019a2:	a901      	add	r1, sp, #4
 80019a4:	4816      	ldr	r0, [pc, #88]	@ (8001a00 <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019a6:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019a8:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019ac:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019b0:	f005 fd38 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80019b4:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019b8:	a901      	add	r1, sp, #4
 80019ba:	4812      	ldr	r0, [pc, #72]	@ (8001a04 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019bc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019be:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80019c6:	f005 fd2d 	bl	8007424 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80019ca:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	a901      	add	r1, sp, #4
 80019ce:	480e      	ldr	r0, [pc, #56]	@ (8001a08 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80019d0:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019d2:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019d6:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019da:	f005 fd23 	bl	8007424 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80019de:	b039      	add	sp, #228	@ 0xe4
 80019e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019e2:	bf00      	nop
 80019e4:	24000724 	.word	0x24000724
 80019e8:	58024400 	.word	0x58024400
 80019ec:	58022000 	.word	0x58022000
 80019f0:	58020400 	.word	0x58020400
 80019f4:	58021000 	.word	0x58021000
 80019f8:	58021c00 	.word	0x58021c00
 80019fc:	58021800 	.word	0x58021800
 8001a00:	58020c00 	.word	0x58020c00
 8001a04:	58021400 	.word	0x58021400
 8001a08:	58020800 	.word	0x58020800

08001a0c <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001a0c:	4b1a      	ldr	r3, [pc, #104]	@ (8001a78 <HAL_SDRAM_MspDeInit+0x6c>)
 8001a0e:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 8001a10:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 8001a12:	bb82      	cbnz	r2, 8001a76 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a14:	4a19      	ldr	r2, [pc, #100]	@ (8001a7c <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001a16:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a18:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001a1c:	4818      	ldr	r0, [pc, #96]	@ (8001a80 <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 8001a1e:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 8001a20:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001a24:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001a28:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001a2c:	f005 fde2 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 8001a30:	2160      	movs	r1, #96	@ 0x60
 8001a32:	4814      	ldr	r0, [pc, #80]	@ (8001a84 <HAL_SDRAM_MspDeInit+0x78>)
 8001a34:	f005 fdde 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001a38:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001a3c:	4812      	ldr	r0, [pc, #72]	@ (8001a88 <HAL_SDRAM_MspDeInit+0x7c>)
 8001a3e:	f005 fdd9 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 8001a42:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001a46:	4811      	ldr	r0, [pc, #68]	@ (8001a8c <HAL_SDRAM_MspDeInit+0x80>)
 8001a48:	f005 fdd4 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001a4c:	f248 1133 	movw	r1, #33075	@ 0x8133
 8001a50:	480f      	ldr	r0, [pc, #60]	@ (8001a90 <HAL_SDRAM_MspDeInit+0x84>)
 8001a52:	f005 fdcf 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001a56:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001a5a:	480e      	ldr	r0, [pc, #56]	@ (8001a94 <HAL_SDRAM_MspDeInit+0x88>)
 8001a5c:	f005 fdca 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 8001a60:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001a64:	480c      	ldr	r0, [pc, #48]	@ (8001a98 <HAL_SDRAM_MspDeInit+0x8c>)
 8001a66:	f005 fdc5 	bl	80075f4 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a6a:	4621      	mov	r1, r4
 8001a6c:	480b      	ldr	r0, [pc, #44]	@ (8001a9c <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 8001a6e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001a72:	f005 bdbf 	b.w	80075f4 <HAL_GPIO_DeInit>
}
 8001a76:	bd10      	pop	{r4, pc}
 8001a78:	24000720 	.word	0x24000720
 8001a7c:	58024400 	.word	0x58024400
 8001a80:	58022000 	.word	0x58022000
 8001a84:	58020400 	.word	0x58020400
 8001a88:	58021000 	.word	0x58021000
 8001a8c:	58021c00 	.word	0x58021c00
 8001a90:	58021800 	.word	0x58021800
 8001a94:	58020c00 	.word	0x58020c00
 8001a98:	58021400 	.word	0x58021400
 8001a9c:	58020800 	.word	0x58020800

08001aa0 <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa0:	280f      	cmp	r0, #15
{
 8001aa2:	b510      	push	{r4, lr}
 8001aa4:	4604      	mov	r4, r0
 8001aa6:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001aa8:	d902      	bls.n	8001ab0 <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 8001aaa:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 8001aac:	b00a      	add	sp, #40	@ 0x28
 8001aae:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 8001ab0:	4601      	mov	r1, r0
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	2036      	movs	r0, #54	@ 0x36
 8001ab6:	f004 fc29 	bl	800630c <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8001aba:	2036      	movs	r0, #54	@ 0x36
 8001abc:	f004 fc58 	bl	8006370 <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 8001ac0:	4b18      	ldr	r3, [pc, #96]	@ (8001b24 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ac2:	4669      	mov	r1, sp
 8001ac4:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 8001ac6:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 8001ac8:	4b17      	ldr	r3, [pc, #92]	@ (8001b28 <HAL_InitTick+0x88>)
 8001aca:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 8001ace:	f042 0210 	orr.w	r2, r2, #16
 8001ad2:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 8001ad6:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8001ada:	f003 0310 	and.w	r3, r3, #16
 8001ade:	9301      	str	r3, [sp, #4]
 8001ae0:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ae2:	f008 fcb5 	bl	800a450 <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8001ae6:	9b07      	ldr	r3, [sp, #28]
 8001ae8:	b9c3      	cbnz	r3, 8001b1c <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8001aea:	f008 fc8d 	bl	800a408 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 8001aee:	4c0f      	ldr	r4, [pc, #60]	@ (8001b2c <HAL_InitTick+0x8c>)
 8001af0:	4b0f      	ldr	r3, [pc, #60]	@ (8001b30 <HAL_InitTick+0x90>)
 8001af2:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001af4:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001af8:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001afa:	4b0e      	ldr	r3, [pc, #56]	@ (8001b34 <HAL_InitTick+0x94>)
 8001afc:	fbb0 f0f3 	udiv	r0, r0, r3
 8001b00:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001b02:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001b04:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b06:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001b08:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001b0a:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001b0c:	f009 fe22 	bl	800b754 <HAL_TIM_Base_Init>
 8001b10:	2800      	cmp	r0, #0
 8001b12:	d1ca      	bne.n	8001aaa <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001b14:	4620      	mov	r0, r4
 8001b16:	f009 fcd1 	bl	800b4bc <HAL_TIM_Base_Start_IT>
 8001b1a:	e7c7      	b.n	8001aac <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001b1c:	f008 fc74 	bl	800a408 <HAL_RCC_GetPCLK1Freq>
 8001b20:	0040      	lsls	r0, r0, #1
 8001b22:	e7e4      	b.n	8001aee <HAL_InitTick+0x4e>
 8001b24:	24000074 	.word	0x24000074
 8001b28:	58024400 	.word	0x58024400
 8001b2c:	24000728 	.word	0x24000728
 8001b30:	40001000 	.word	0x40001000
 8001b34:	000f4240 	.word	0x000f4240

08001b38 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001b38:	e7fe      	b.n	8001b38 <NMI_Handler>

08001b3a <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001b3a:	e7fe      	b.n	8001b3a <HardFault_Handler>

08001b3c <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001b3c:	e7fe      	b.n	8001b3c <MemManage_Handler>

08001b3e <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001b3e:	e7fe      	b.n	8001b3e <BusFault_Handler>

08001b40 <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001b40:	e7fe      	b.n	8001b40 <UsageFault_Handler>

08001b42 <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001b42:	4770      	bx	lr

08001b44 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001b44:	4801      	ldr	r0, [pc, #4]	@ (8001b4c <USART1_IRQHandler+0x8>)
 8001b46:	f009 be71 	b.w	800b82c <HAL_UART_IRQHandler>
 8001b4a:	bf00      	nop
 8001b4c:	240003c0 	.word	0x240003c0

08001b50 <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001b50:	4801      	ldr	r0, [pc, #4]	@ (8001b58 <TIM6_DAC_IRQHandler+0x8>)
 8001b52:	f009 bcf5 	b.w	800b540 <HAL_TIM_IRQHandler>
 8001b56:	bf00      	nop
 8001b58:	24000728 	.word	0x24000728

08001b5c <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001b5c:	4801      	ldr	r0, [pc, #4]	@ (8001b64 <LTDC_IRQHandler+0x8>)
 8001b5e:	f007 b9af 	b.w	8008ec0 <HAL_LTDC_IRQHandler>
 8001b62:	bf00      	nop
 8001b64:	240004a0 	.word	0x240004a0

08001b68 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001b68:	4801      	ldr	r0, [pc, #4]	@ (8001b70 <DMA2D_IRQHandler+0x8>)
 8001b6a:	f004 bf42 	b.w	80069f2 <HAL_DMA2D_IRQHandler>
 8001b6e:	bf00      	nop
 8001b70:	24000694 	.word	0x24000694

08001b74 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001b74:	4801      	ldr	r0, [pc, #4]	@ (8001b7c <JPEG_IRQHandler+0x8>)
 8001b76:	f007 b871 	b.w	8008c5c <HAL_JPEG_IRQHandler>
 8001b7a:	bf00      	nop
 8001b7c:	24000620 	.word	0x24000620

08001b80 <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001b80:	4804      	ldr	r0, [pc, #16]	@ (8001b94 <MDMA_IRQHandler+0x14>)
{
 8001b82:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001b84:	f007 fba4 	bl	80092d0 <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b88:	4803      	ldr	r0, [pc, #12]	@ (8001b98 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001b8a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001b8e:	f007 bb9f 	b.w	80092d0 <HAL_MDMA_IRQHandler>
 8001b92:	bf00      	nop
 8001b94:	24000548 	.word	0x24000548
 8001b98:	240005b4 	.word	0x240005b4

08001b9c <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001b9c:	4801      	ldr	r0, [pc, #4]	@ (8001ba4 <DSI_IRQHandler+0x8>)
 8001b9e:	f005 b92a 	b.w	8006df6 <HAL_DSI_IRQHandler>
 8001ba2:	bf00      	nop
 8001ba4:	24000678 	.word	0x24000678

08001ba8 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ba8:	2001      	movs	r0, #1
 8001baa:	4770      	bx	lr

08001bac <_kill>:

int _kill(int pid, int sig)
{
 8001bac:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bae:	f01f f98f 	bl	8020ed0 <__errno>
 8001bb2:	2316      	movs	r3, #22
 8001bb4:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001bb6:	f04f 30ff 	mov.w	r0, #4294967295
 8001bba:	bd08      	pop	{r3, pc}

08001bbc <_exit>:

void _exit (int status)
{
 8001bbc:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001bbe:	f01f f987 	bl	8020ed0 <__errno>
 8001bc2:	2316      	movs	r3, #22
 8001bc4:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001bc6:	e7fe      	b.n	8001bc6 <_exit+0xa>

08001bc8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001bc8:	b570      	push	{r4, r5, r6, lr}
 8001bca:	460d      	mov	r5, r1
 8001bcc:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bce:	460e      	mov	r6, r1
 8001bd0:	1b73      	subs	r3, r6, r5
 8001bd2:	429c      	cmp	r4, r3
 8001bd4:	dc01      	bgt.n	8001bda <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001bd6:	4620      	mov	r0, r4
 8001bd8:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001bda:	f3af 8000 	nop.w
 8001bde:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001be2:	e7f5      	b.n	8001bd0 <_read+0x8>

08001be4 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001be4:	b570      	push	{r4, r5, r6, lr}
 8001be6:	460d      	mov	r5, r1
 8001be8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bea:	460e      	mov	r6, r1
 8001bec:	1b73      	subs	r3, r6, r5
 8001bee:	429c      	cmp	r4, r3
 8001bf0:	dc01      	bgt.n	8001bf6 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001bf2:	4620      	mov	r0, r4
 8001bf4:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001bf6:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001bfa:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001bfe:	e7f5      	b.n	8001bec <_write+0x8>

08001c00 <_close>:

int _close(int file)
{
	return -1;
}
 8001c00:	f04f 30ff 	mov.w	r0, #4294967295
 8001c04:	4770      	bx	lr

08001c06 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001c06:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001c0a:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001c0c:	604b      	str	r3, [r1, #4]
}
 8001c0e:	4770      	bx	lr

08001c10 <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001c10:	2001      	movs	r0, #1
 8001c12:	4770      	bx	lr

08001c14 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001c14:	2000      	movs	r0, #0
 8001c16:	4770      	bx	lr

08001c18 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001c18:	4a0b      	ldr	r2, [pc, #44]	@ (8001c48 <_sbrk+0x30>)
{
 8001c1a:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001c1c:	6811      	ldr	r1, [r2, #0]
{
 8001c1e:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001c20:	b909      	cbnz	r1, 8001c26 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001c22:	490a      	ldr	r1, [pc, #40]	@ (8001c4c <_sbrk+0x34>)
 8001c24:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001c26:	6810      	ldr	r0, [r2, #0]
 8001c28:	4909      	ldr	r1, [pc, #36]	@ (8001c50 <_sbrk+0x38>)
 8001c2a:	4c0a      	ldr	r4, [pc, #40]	@ (8001c54 <_sbrk+0x3c>)
 8001c2c:	4403      	add	r3, r0
 8001c2e:	1b09      	subs	r1, r1, r4
 8001c30:	428b      	cmp	r3, r1
 8001c32:	d906      	bls.n	8001c42 <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001c34:	f01f f94c 	bl	8020ed0 <__errno>
 8001c38:	230c      	movs	r3, #12
 8001c3a:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001c3c:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001c40:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001c42:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001c44:	e7fc      	b.n	8001c40 <_sbrk+0x28>
 8001c46:	bf00      	nop
 8001c48:	24000774 	.word	0x24000774
 8001c4c:	24025620 	.word	0x24025620
 8001c50:	24080000 	.word	0x24080000
 8001c54:	00001000 	.word	0x00001000

08001c58 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001c58:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c90 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001c5c:	f004 fa7c 	bl	8006158 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001c60:	480c      	ldr	r0, [pc, #48]	@ (8001c94 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c62:	490d      	ldr	r1, [pc, #52]	@ (8001c98 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c64:	4a0d      	ldr	r2, [pc, #52]	@ (8001c9c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c66:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c68:	e002      	b.n	8001c70 <LoopCopyDataInit>

08001c6a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c6a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c6c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c6e:	3304      	adds	r3, #4

08001c70 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c70:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c72:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c74:	d3f9      	bcc.n	8001c6a <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c76:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c78:	4c0a      	ldr	r4, [pc, #40]	@ (8001ca4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c7a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c7c:	e001      	b.n	8001c82 <LoopFillZerobss>

08001c7e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c7e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c80:	3204      	adds	r2, #4

08001c82 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c82:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c84:	d3fb      	bcc.n	8001c7e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001c86:	f01f f929 	bl	8020edc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c8a:	f7fe ff6d 	bl	8000b68 <main>
  bx  lr
 8001c8e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001c90:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001c94:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001c98:	2400013c 	.word	0x2400013c
  ldr r2, =_sidata
 8001c9c:	08024dc8 	.word	0x08024dc8
  ldr r2, =_sbss
 8001ca0:	24000340 	.word	0x24000340
  ldr r4, =_ebss
 8001ca4:	2402561c 	.word	0x2402561c

08001ca8 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001ca8:	e7fe      	b.n	8001ca8 <ADC3_IRQHandler>

08001caa <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001caa:	4770      	bx	lr

08001cac <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001cac:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001cae:	f001 fd03 	bl	80036b8 <touchgfx_components_init>
    touchgfx_init();
}
 8001cb2:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001cb6:	f001 bc87 	b.w	80035c8 <touchgfx_init>

08001cba <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001cba:	6840      	ldr	r0, [r0, #4]
    }
 8001cbc:	4770      	bx	lr

08001cbe <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001cbe:	6041      	str	r1, [r0, #4]
    }
 8001cc0:	4770      	bx	lr

08001cc2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001cc2:	1a52      	subs	r2, r2, r1
 8001cc4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001cc8:	fbb2 f0f3 	udiv	r0, r2, r3
 8001ccc:	4770      	bx	lr
	...

08001cd0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001cd0:	4b02      	ldr	r3, [pc, #8]	@ (8001cdc <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001cd2:	68c0      	ldr	r0, [r0, #12]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001cd8:	4358      	muls	r0, r3
 8001cda:	4770      	bx	lr
 8001cdc:	24000778 	.word	0x24000778

08001ce0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001ce0:	4770      	bx	lr
	...

08001ce4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001ce4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001ce6:	4a1e      	ldr	r2, [pc, #120]	@ (8001d60 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001ce8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001cec:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001cee:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001cf2:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001cf6:	f043 0301 	orr.w	r3, r3, #1
 8001cfa:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001cfe:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	9301      	str	r3, [sp, #4]
 8001d08:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d0c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d0e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001d10:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001d12:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d14:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001d16:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001d18:	2101      	movs	r1, #1
 8001d1a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001d1c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001d1e:	2210      	movs	r2, #16
 8001d20:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001d24:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001d28:	fab2 f282 	clz	r2, r2
 8001d2c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001d2e:	4a0e      	ldr	r2, [pc, #56]	@ (8001d68 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001d30:	5cd3      	ldrb	r3, [r2, r3]
 8001d32:	b983      	cbnz	r3, 8001d56 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001d34:	f008 fb46 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 8001d38:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001d3a:	f008 f97b 	bl	800a034 <HAL_RCC_GetSysClockFreq>
 8001d3e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001d42:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001d44:	4807      	ldr	r0, [pc, #28]	@ (8001d64 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001d46:	f009 fd05 	bl	800b754 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001d4a:	4806      	ldr	r0, [pc, #24]	@ (8001d64 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001d4c:	b003      	add	sp, #12
 8001d4e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001d52:	f009 bb79 	b.w	800b448 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001d56:	f008 fb57 	bl	800a408 <HAL_RCC_GetPCLK1Freq>
 8001d5a:	0044      	lsls	r4, r0, #1
 8001d5c:	e7ed      	b.n	8001d3a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001d5e:	bf00      	nop
 8001d60:	58024400 	.word	0x58024400
 8001d64:	24000778 	.word	0x24000778
 8001d68:	08024120 	.word	0x08024120

08001d6c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001d6c:	b510      	push	{r4, lr}
 8001d6e:	4604      	mov	r4, r0
 8001d70:	2110      	movs	r1, #16
 8001d72:	f01e f9c4 	bl	80200fe <_ZdlPvj>
 8001d76:	4620      	mov	r0, r4
 8001d78:	bd10      	pop	{r4, pc}

08001d7a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001d7a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001d7c:	6803      	ldr	r3, [r0, #0]
{
 8001d7e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001d80:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001d82:	b131      	cbz	r1, 8001d92 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001d84:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001d86:	4798      	blx	r3
 8001d88:	6863      	ldr	r3, [r4, #4]
 8001d8a:	1b5b      	subs	r3, r3, r5
 8001d8c:	4403      	add	r3, r0
 8001d8e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001d90:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001d92:	4798      	blx	r3
 8001d94:	60a0      	str	r0, [r4, #8]
}
 8001d96:	e7fb      	b.n	8001d90 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001d98 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001d98:	4770      	bx	lr
	...

08001d9c <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001d9e:	4b0a      	ldr	r3, [pc, #40]	@ (8001dc8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001da0:	460f      	mov	r7, r1
 8001da2:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001da4:	781d      	ldrb	r5, [r3, #0]
 8001da6:	b915      	cbnz	r5, 8001dae <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001da8:	2500      	movs	r5, #0
}
 8001daa:	4628      	mov	r0, r5
 8001dac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001dae:	4c07      	ldr	r4, [pc, #28]	@ (8001dcc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001db0:	2000      	movs	r0, #0
 8001db2:	4621      	mov	r1, r4
 8001db4:	f004 f974 	bl	80060a0 <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001db8:	6823      	ldr	r3, [r4, #0]
 8001dba:	2b00      	cmp	r3, #0
 8001dbc:	d0f4      	beq.n	8001da8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001dbe:	6863      	ldr	r3, [r4, #4]
 8001dc0:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001dc2:	68a3      	ldr	r3, [r4, #8]
 8001dc4:	6033      	str	r3, [r6, #0]
            return true;
 8001dc6:	e7f0      	b.n	8001daa <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001dc8:	240007d4 	.word	0x240007d4
 8001dcc:	240007c4 	.word	0x240007c4

08001dd0 <_ZN20STM32TouchControllerD0Ev>:
 8001dd0:	b510      	push	{r4, lr}
 8001dd2:	4604      	mov	r4, r0
 8001dd4:	2104      	movs	r1, #4
 8001dd6:	f01e f992 	bl	80200fe <_ZdlPvj>
 8001dda:	4620      	mov	r0, r4
 8001ddc:	bd10      	pop	{r4, pc}
	...

08001de0 <_ZN20STM32TouchController4initEv>:
{
 8001de0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001de2:	4b0e      	ldr	r3, [pc, #56]	@ (8001e1c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001de4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001de8:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001dea:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001dec:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001df0:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001df4:	230c      	movs	r3, #12
 8001df6:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001dfa:	f004 f8c1 	bl	8005f80 <BSP_TS_Init>
 8001dfe:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <_ZN20STM32TouchController4initEv+0x40>)
 8001e00:	b910      	cbnz	r0, 8001e08 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001e02:	2201      	movs	r2, #1
 8001e04:	701a      	strb	r2, [r3, #0]
}
 8001e06:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001e08:	781b      	ldrb	r3, [r3, #0]
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d1fb      	bne.n	8001e06 <_ZN20STM32TouchController4initEv+0x26>
 8001e0e:	4b05      	ldr	r3, [pc, #20]	@ (8001e24 <_ZN20STM32TouchController4initEv+0x44>)
 8001e10:	212e      	movs	r1, #46	@ 0x2e
 8001e12:	4a05      	ldr	r2, [pc, #20]	@ (8001e28 <_ZN20STM32TouchController4initEv+0x48>)
 8001e14:	4805      	ldr	r0, [pc, #20]	@ (8001e2c <_ZN20STM32TouchController4initEv+0x4c>)
 8001e16:	f01e fceb 	bl	80207f0 <__assert_func>
 8001e1a:	bf00      	nop
 8001e1c:	240007d0 	.word	0x240007d0
 8001e20:	240007d4 	.word	0x240007d4
 8001e24:	08021c84 	.word	0x08021c84
 8001e28:	08021c97 	.word	0x08021c97
 8001e2c:	08021cc1 	.word	0x08021cc1

08001e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001e30:	2803      	cmp	r0, #3
 8001e32:	d825      	bhi.n	8001e80 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001e34:	e8df f000 	tbb	[pc, r0]
 8001e38:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001e3c:	4b11      	ldr	r3, [pc, #68]	@ (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e3e:	2108      	movs	r1, #8
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	fab2 f282 	clz	r2, r2
 8001e46:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e48:	480f      	ldr	r0, [pc, #60]	@ (8001e88 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e4a:	f005 bc75 	b.w	8007738 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001e4e:	4b0d      	ldr	r3, [pc, #52]	@ (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e50:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e54:	685a      	ldr	r2, [r3, #4]
 8001e56:	fab2 f282 	clz	r2, r2
 8001e5a:	0952      	lsrs	r2, r2, #5
 8001e5c:	e7f4      	b.n	8001e48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001e5e:	4b09      	ldr	r3, [pc, #36]	@ (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e60:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e64:	689a      	ldr	r2, [r3, #8]
 8001e66:	fab2 f282 	clz	r2, r2
 8001e6a:	0952      	lsrs	r2, r2, #5
 8001e6c:	e7ec      	b.n	8001e48 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001e6e:	4b05      	ldr	r3, [pc, #20]	@ (8001e84 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001e70:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e74:	4805      	ldr	r0, [pc, #20]	@ (8001e8c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001e76:	68da      	ldr	r2, [r3, #12]
 8001e78:	fab2 f282 	clz	r2, r2
 8001e7c:	0952      	lsrs	r2, r2, #5
 8001e7e:	e7e4      	b.n	8001e4a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001e80:	4770      	bx	lr
 8001e82:	bf00      	nop
 8001e84:	240007d8 	.word	0x240007d8
 8001e88:	58022400 	.word	0x58022400
 8001e8c:	58021400 	.word	0x58021400

08001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001e90:	2803      	cmp	r0, #3
 8001e92:	d825      	bhi.n	8001ee0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001e94:	e8df f000 	tbb	[pc, r0]
 8001e98:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001e9c:	4b11      	ldr	r3, [pc, #68]	@ (8001ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001e9e:	2108      	movs	r1, #8
 8001ea0:	681a      	ldr	r2, [r3, #0]
 8001ea2:	3a00      	subs	r2, #0
 8001ea4:	bf18      	it	ne
 8001ea6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001ea8:	480f      	ldr	r0, [pc, #60]	@ (8001ee8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001eaa:	f005 bc45 	b.w	8007738 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001eae:	4b0d      	ldr	r3, [pc, #52]	@ (8001ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001eb0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001eb4:	685a      	ldr	r2, [r3, #4]
 8001eb6:	3a00      	subs	r2, #0
 8001eb8:	bf18      	it	ne
 8001eba:	2201      	movne	r2, #1
 8001ebc:	e7f4      	b.n	8001ea8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001ebe:	4b09      	ldr	r3, [pc, #36]	@ (8001ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ec0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001ec4:	689a      	ldr	r2, [r3, #8]
 8001ec6:	3a00      	subs	r2, #0
 8001ec8:	bf18      	it	ne
 8001eca:	2201      	movne	r2, #1
 8001ecc:	e7ec      	b.n	8001ea8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001ece:	4b05      	ldr	r3, [pc, #20]	@ (8001ee4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001ed0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001ed4:	4805      	ldr	r0, [pc, #20]	@ (8001eec <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001ed6:	68da      	ldr	r2, [r3, #12]
 8001ed8:	3a00      	subs	r2, #0
 8001eda:	bf18      	it	ne
 8001edc:	2201      	movne	r2, #1
 8001ede:	e7e4      	b.n	8001eaa <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	240007d8 	.word	0x240007d8
 8001ee8:	58022400 	.word	0x58022400
 8001eec:	58021400 	.word	0x58021400

08001ef0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001ef0:	2803      	cmp	r0, #3
 8001ef2:	d811      	bhi.n	8001f18 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001ef4:	e8df f000 	tbb	[pc, r0]
 8001ef8:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001efc:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001efe:	4807      	ldr	r0, [pc, #28]	@ (8001f1c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f00:	f005 bc1f 	b.w	8007742 <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f04:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f08:	e7f9      	b.n	8001efe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f0a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f0e:	e7f6      	b.n	8001efe <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f10:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f14:	4802      	ldr	r0, [pc, #8]	@ (8001f20 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001f16:	e7f3      	b.n	8001f00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	58022400 	.word	0x58022400
 8001f20:	58021400 	.word	0x58021400

08001f24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001f24:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001f26:	2803      	cmp	r0, #3
 8001f28:	d815      	bhi.n	8001f56 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001f2a:	e8df f000 	tbb	[pc, r0]
 8001f2e:	0a02      	.short	0x0a02
 8001f30:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001f32:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f34:	4809      	ldr	r0, [pc, #36]	@ (8001f5c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f36:	f005 fbf9 	bl	800772c <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001f3a:	1e43      	subs	r3, r0, #1
 8001f3c:	4258      	negs	r0, r3
 8001f3e:	4158      	adcs	r0, r3
 8001f40:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001f42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f46:	e7f5      	b.n	8001f34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001f48:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001f4c:	e7f2      	b.n	8001f34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001f4e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001f52:	4803      	ldr	r0, [pc, #12]	@ (8001f60 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001f54:	e7ef      	b.n	8001f36 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001f56:	2000      	movs	r0, #0
 8001f58:	e7ef      	b.n	8001f3a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001f5a:	bf00      	nop
 8001f5c:	58022400 	.word	0x58022400
 8001f60:	58021400 	.word	0x58021400

08001f64 <_ZN8touchgfx4GPIO4initEv>:
{
 8001f64:	b570      	push	{r4, r5, r6, lr}
 8001f66:	4d08      	ldr	r5, [pc, #32]	@ (8001f88 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001f68:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001f6a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001f6c:	b2e0      	uxtb	r0, r4
 8001f6e:	f7ff ffd9 	bl	8001f24 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001f72:	b118      	cbz	r0, 8001f7c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001f74:	682b      	ldr	r3, [r5, #0]
 8001f76:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001f78:	bf18      	it	ne
 8001f7a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001f7c:	3401      	adds	r4, #1
 8001f7e:	3504      	adds	r5, #4
 8001f80:	2c05      	cmp	r4, #5
 8001f82:	d1f3      	bne.n	8001f6c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001f84:	bd70      	pop	{r4, r5, r6, pc}
 8001f86:	bf00      	nop
 8001f88:	240007d8 	.word	0x240007d8

08001f8c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001f8c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001f8e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001f92:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001f96:	4770      	bx	lr

08001f98 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001f98:	2000      	movs	r0, #0
 8001f9a:	4770      	bx	lr

08001f9c <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001f9c:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001f9e:	3900      	subs	r1, #0
 8001fa0:	4b02      	ldr	r3, [pc, #8]	@ (8001fac <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001fa2:	bf18      	it	ne
 8001fa4:	2101      	movne	r1, #1
 8001fa6:	7019      	strb	r1, [r3, #0]
    }
 8001fa8:	4770      	bx	lr
 8001faa:	bf00      	nop
 8001fac:	240248fb 	.word	0x240248fb

08001fb0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001fb0:	2000      	movs	r0, #0
 8001fb2:	4770      	bx	lr

08001fb4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001fb4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001fb6:	b10b      	cbz	r3, 8001fbc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001fb8:	4608      	mov	r0, r1
 8001fba:	4718      	bx	r3
        }
    }
 8001fbc:	4770      	bx	lr

08001fbe <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001fbe:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001fc2:	4770      	bx	lr

08001fc4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001fc4:	6840      	ldr	r0, [r0, #4]
 8001fc6:	6803      	ldr	r3, [r0, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	4718      	bx	r3

08001fcc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001fcc:	4b01      	ldr	r3, [pc, #4]	@ (8001fd4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	240007fc 	.word	0x240007fc

08001fd8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001fd8:	4770      	bx	lr

08001fda <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001fda:	f001 bc66 	b.w	80038aa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001fde <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001fde:	f001 bbf5 	b.w	80037cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001fe2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001fe2:	f001 bdc7 	b.w	8003b74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001fe6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001fe6:	f001 bdb9 	b.w	8003b5c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001fec <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001fec:	b510      	push	{r4, lr}
 8001fee:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001ff0:	f001 fd7c 	bl	8003aec <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001ff4:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001ff8:	b113      	cbz	r3, 8002000 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001ffa:	4b02      	ldr	r3, [pc, #8]	@ (8002004 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	701a      	strb	r2, [r3, #0]
    }
}
 8002000:	bd10      	pop	{r4, pc}
 8002002:	bf00      	nop
 8002004:	2400000c 	.word	0x2400000c

08002008 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8002008:	f001 bbe8 	b.w	80037dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

0800200c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 800200c:	b510      	push	{r4, lr}
 800200e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8002010:	f00c fe8e 	bl	800ed30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8002014:	6823      	ldr	r3, [r4, #0]
 8002016:	4620      	mov	r0, r4
 8002018:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 800201c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8002020:	4718      	bx	r3

08002022 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8002022:	b510      	push	{r4, lr}
 8002024:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8002026:	f00c fa0b 	bl	800e440 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 800202a:	6860      	ldr	r0, [r4, #4]
 800202c:	6803      	ldr	r3, [r0, #0]
    }
 800202e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8002032:	691b      	ldr	r3, [r3, #16]
 8002034:	4718      	bx	r3

08002036 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8002036:	f00c b8d9 	b.w	800e1ec <_ZN8touchgfx3HAL16flushFrameBufferEv>

0800203a <_ZN11TouchGFXHALD0Ev>:
 800203a:	b510      	push	{r4, lr}
 800203c:	4604      	mov	r4, r0
 800203e:	217c      	movs	r1, #124	@ 0x7c
 8002040:	f01e f85d 	bl	80200fe <_ZdlPvj>
 8002044:	4620      	mov	r0, r4
 8002046:	bd10      	pop	{r4, pc}

08002048 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8002048:	4b02      	ldr	r3, [pc, #8]	@ (8002054 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 800204a:	2200      	movs	r2, #0
 800204c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 800204e:	f00c b909 	b.w	800e264 <_ZN8touchgfx3HAL10beginFrameEv>
 8002052:	bf00      	nop
 8002054:	2400000c 	.word	0x2400000c

08002058 <_ZN11TouchGFXHAL10initializeEv>:
{
 8002058:	b538      	push	{r3, r4, r5, lr}
 800205a:	4604      	mov	r4, r0
    mcuInstr.init();
 800205c:	4d06      	ldr	r5, [pc, #24]	@ (8002078 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 800205e:	f001 fbe5 	bl	800382c <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8002062:	2300      	movs	r3, #0
    mcuInstr.init();
 8002064:	4628      	mov	r0, r5
 8002066:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 800206a:	f7ff fe3b 	bl	8001ce4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 800206e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8002070:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8002072:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8002076:	bd38      	pop	{r3, r4, r5, pc}
 8002078:	240007ec 	.word	0x240007ec

0800207c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 800207c:	6803      	ldr	r3, [r0, #0]
{
 800207e:	4604      	mov	r4, r0
 8002080:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8002082:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002086:	4798      	blx	r3
    enableInterrupts();
 8002088:	6823      	ldr	r3, [r4, #0]
 800208a:	4620      	mov	r0, r4
 800208c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800208e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8002090:	f000 ff50 	bl	8002f34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8002094:	6823      	ldr	r3, [r4, #0]
 8002096:	4620      	mov	r0, r4
 8002098:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800209a:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 800209c:	2100      	movs	r1, #0
 800209e:	2329      	movs	r3, #41	@ 0x29
 80020a0:	2215      	movs	r2, #21
 80020a2:	4805      	ldr	r0, [pc, #20]	@ (80020b8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 80020a4:	9100      	str	r1, [sp, #0]
 80020a6:	f005 f8b6 	bl	8007216 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 80020aa:	f000 ff43 	bl	8002f34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 80020ae:	6823      	ldr	r3, [r4, #0]
 80020b0:	4620      	mov	r0, r4
 80020b2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80020b4:	4798      	blx	r3
    for (;;)
 80020b6:	e7f8      	b.n	80020aa <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 80020b8:	24000678 	.word	0x24000678

080020bc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 80020bc:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 80020c0:	4b0d      	ldr	r3, [pc, #52]	@ (80020f8 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 80020c2:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 80020c4:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 80020c8:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 80020ca:	428c      	cmp	r4, r1
 80020cc:	d009      	beq.n	80020e2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 80020ce:	b93a      	cbnz	r2, 80020e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020d0:	490a      	ldr	r1, [pc, #40]	@ (80020fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020d2:	4a0b      	ldr	r2, [pc, #44]	@ (8002100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 80020d4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020d6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 80020d8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 80020da:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020dc:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 80020de:	701a      	strb	r2, [r3, #0]
        }
    }
 80020e0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 80020e2:	2a00      	cmp	r2, #0
 80020e4:	d0fc      	beq.n	80020e0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020e6:	4a06      	ldr	r2, [pc, #24]	@ (8002100 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 80020e8:	4904      	ldr	r1, [pc, #16]	@ (80020fc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020ea:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 80020ec:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 80020ee:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 80020f0:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 80020f2:	2200      	movs	r2, #0
 80020f4:	e7f3      	b.n	80020de <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 80020f6:	bf00      	nop
 80020f8:	240248f4 	.word	0x240248f4
 80020fc:	240248f2 	.word	0x240248f2
 8002100:	240248f0 	.word	0x240248f0

08002104 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002104:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002106:	4b09      	ldr	r3, [pc, #36]	@ (800212c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002108:	881b      	ldrh	r3, [r3, #0]
 800210a:	428b      	cmp	r3, r1
 800210c:	d803      	bhi.n	8002116 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800210e:	4b08      	ldr	r3, [pc, #32]	@ (8002130 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002110:	881b      	ldrh	r3, [r3, #0]
 8002112:	4293      	cmp	r3, r2
 8002114:	d905      	bls.n	8002122 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002116:	4b07      	ldr	r3, [pc, #28]	@ (8002134 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002118:	219e      	movs	r1, #158	@ 0x9e
 800211a:	4a07      	ldr	r2, [pc, #28]	@ (8002138 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800211c:	4807      	ldr	r0, [pc, #28]	@ (800213c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800211e:	f01e fb67 	bl	80207f0 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002122:	4b07      	ldr	r3, [pc, #28]	@ (8002140 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002124:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002126:	4b07      	ldr	r3, [pc, #28]	@ (8002144 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002128:	801a      	strh	r2, [r3, #0]
    }
 800212a:	bd08      	pop	{r3, pc}
 800212c:	240248f0 	.word	0x240248f0
 8002130:	240248f2 	.word	0x240248f2
 8002134:	08021d70 	.word	0x08021d70
 8002138:	08021dd3 	.word	0x08021dd3
 800213c:	08021e16 	.word	0x08021e16
 8002140:	240248f6 	.word	0x240248f6
 8002144:	240248f8 	.word	0x240248f8

08002148 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002148:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800214a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800214e:	b118      	cbz	r0, 8002158 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002150:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002152:	6803      	ldr	r3, [r0, #0]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4718      	bx	r3
    }
 8002158:	4770      	bx	lr
	...

0800215c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800215c:	b570      	push	{r4, r5, r6, lr}
 800215e:	460d      	mov	r5, r1
 8002160:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002162:	4b0b      	ldr	r3, [pc, #44]	@ (8002190 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002164:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002166:	b935      	cbnz	r5, 8002176 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002168:	4b0a      	ldr	r3, [pc, #40]	@ (8002194 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800216a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800216e:	4a0a      	ldr	r2, [pc, #40]	@ (8002198 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002170:	480a      	ldr	r0, [pc, #40]	@ (800219c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002172:	f01e fb3d 	bl	80207f0 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002176:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800217a:	3a00      	subs	r2, #0
 800217c:	4b08      	ldr	r3, [pc, #32]	@ (80021a0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800217e:	bf18      	it	ne
 8002180:	2201      	movne	r2, #1
 8002182:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002184:	6803      	ldr	r3, [r0, #0]
}
 8002186:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800218a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800218e:	4718      	bx	r3
 8002190:	240007fc 	.word	0x240007fc
 8002194:	08021e69 	.word	0x08021e69
 8002198:	08021ea1 	.word	0x08021ea1
 800219c:	08021e16 	.word	0x08021e16
 80021a0:	240248fa 	.word	0x240248fa

080021a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 80021a4:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80021a8:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80021aa:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80021ae:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80021b0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80021b4:	4a1d      	ldr	r2, [pc, #116]	@ (800222c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80021b6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80021b8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80021bc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80021be:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80021c0:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80021c4:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80021c6:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80021ca:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80021cc:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80021ce:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80021d2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80021d6:	4a16      	ldr	r2, [pc, #88]	@ (8002230 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80021d8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80021dc:	3520      	adds	r5, #32
          buttonController(0),
 80021de:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80021e2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80021e6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80021ea:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 80021ee:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 80021f2:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 80021f6:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80021fa:	6782      	str	r2, [r0, #120]	@ 0x78
 80021fc:	b2ad      	uxth	r5, r5
        instance = this;
 80021fe:	4a0d      	ldr	r2, [pc, #52]	@ (8002234 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002200:	42b5      	cmp	r5, r6
        instance = this;
 8002202:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002204:	4a0c      	ldr	r2, [pc, #48]	@ (8002238 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8002206:	8015      	strh	r5, [r2, #0]
 8002208:	4a0c      	ldr	r2, [pc, #48]	@ (800223c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800220a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800220c:	bf28      	it	cs
 800220e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002210:	4a0b      	ldr	r2, [pc, #44]	@ (8002240 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002212:	bf38      	it	cc
 8002214:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002216:	8016      	strh	r6, [r2, #0]
 8002218:	4a0a      	ldr	r2, [pc, #40]	@ (8002244 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800221a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800221e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002220:	4a09      	ldr	r2, [pc, #36]	@ (8002248 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002222:	7013      	strb	r3, [r2, #0]
 8002224:	4b09      	ldr	r3, [pc, #36]	@ (800224c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002226:	6003      	str	r3, [r0, #0]
}
 8002228:	bd70      	pop	{r4, r5, r6, pc}
 800222a:	bf00      	nop
 800222c:	01000001 	.word	0x01000001
 8002230:	01010000 	.word	0x01010000
 8002234:	240248fc 	.word	0x240248fc
 8002238:	240248f0 	.word	0x240248f0
 800223c:	240248f6 	.word	0x240248f6
 8002240:	240248f2 	.word	0x240248f2
 8002244:	240248f8 	.word	0x240248f8
 8002248:	240248f4 	.word	0x240248f4
 800224c:	08021ef8 	.word	0x08021ef8

08002250 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002250:	2b01      	cmp	r3, #1
    {
 8002252:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002254:	d80e      	bhi.n	8002274 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002256:	5cd3      	ldrb	r3, [r2, r3]
 8002258:	2215      	movs	r2, #21
 800225a:	9300      	str	r3, [sp, #0]
 800225c:	460b      	mov	r3, r1
 800225e:	4601      	mov	r1, r0
 8002260:	4808      	ldr	r0, [pc, #32]	@ (8002284 <DSI_IO_Write+0x34>)
 8002262:	f004 ffd8 	bl	8007216 <HAL_DSI_ShortWrite>
 8002266:	b118      	cbz	r0, 8002270 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002268:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800226c:	b002      	add	sp, #8
 800226e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002270:	2000      	movs	r0, #0
 8002272:	e7fb      	b.n	800226c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002274:	e9cd 1200 	strd	r1, r2, [sp]
 8002278:	4601      	mov	r1, r0
 800227a:	2239      	movs	r2, #57	@ 0x39
 800227c:	4801      	ldr	r0, [pc, #4]	@ (8002284 <DSI_IO_Write+0x34>)
 800227e:	f004 ffdb 	bl	8007238 <HAL_DSI_LongWrite>
 8002282:	e7f0      	b.n	8002266 <DSI_IO_Write+0x16>
 8002284:	24000678 	.word	0x24000678

08002288 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002288:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800228a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800228e:	2106      	movs	r1, #6
 8002290:	9100      	str	r1, [sp, #0]
 8002292:	4601      	mov	r1, r0
 8002294:	4805      	ldr	r0, [pc, #20]	@ (80022ac <DSI_IO_Read+0x24>)
 8002296:	f005 f82f 	bl	80072f8 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 800229a:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 800229c:	bf14      	ite	ne
 800229e:	f06f 0007 	mvnne.w	r0, #7
 80022a2:	2000      	moveq	r0, #0
 80022a4:	b005      	add	sp, #20
 80022a6:	f85d fb04 	ldr.w	pc, [sp], #4
 80022aa:	bf00      	nop
 80022ac:	24000678 	.word	0x24000678

080022b0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80022b0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80022b2:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022b6:	4c0b      	ldr	r4, [pc, #44]	@ (80022e4 <LCD_ReqTear+0x34>)
 80022b8:	2239      	movs	r2, #57	@ 0x39
 80022ba:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80022bc:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80022c0:	ab03      	add	r3, sp, #12
 80022c2:	4620      	mov	r0, r4
 80022c4:	9301      	str	r3, [sp, #4]
 80022c6:	2344      	movs	r3, #68	@ 0x44
 80022c8:	9300      	str	r3, [sp, #0]
 80022ca:	2302      	movs	r3, #2
 80022cc:	f004 ffb4 	bl	8007238 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80022d0:	2100      	movs	r1, #0
 80022d2:	2335      	movs	r3, #53	@ 0x35
 80022d4:	2215      	movs	r2, #21
 80022d6:	4620      	mov	r0, r4
 80022d8:	9100      	str	r1, [sp, #0]
 80022da:	f004 ff9c 	bl	8007216 <HAL_DSI_ShortWrite>
    }
 80022de:	b004      	add	sp, #16
 80022e0:	bd10      	pop	{r4, pc}
 80022e2:	bf00      	nop
 80022e4:	24000678 	.word	0x24000678

080022e8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80022e8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80022ea:	f7ff ffe1 	bl	80022b0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80022ee:	4b0c      	ldr	r3, [pc, #48]	@ (8002320 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 80022f0:	2202      	movs	r2, #2
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 80022f8:	2201      	movs	r2, #1
 80022fa:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 80022fe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002302:	f042 0201 	orr.w	r2, r2, #1
 8002306:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800230a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800230e:	f042 0202 	orr.w	r2, r2, #2
 8002312:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002316:	2203      	movs	r2, #3
 8002318:	4b02      	ldr	r3, [pc, #8]	@ (8002324 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800231a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800231c:	bd08      	pop	{r3, pc}
 800231e:	bf00      	nop
 8002320:	24000678 	.word	0x24000678
 8002324:	50001000 	.word	0x50001000

08002328 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002328:	4b07      	ldr	r3, [pc, #28]	@ (8002348 <LCD_ReqEnable+0x20>)
    {
 800232a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 800232c:	7819      	ldrb	r1, [r3, #0]
 800232e:	b939      	cbnz	r1, 8002340 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002330:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002332:	4806      	ldr	r0, [pc, #24]	@ (800234c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002334:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002336:	2329      	movs	r3, #41	@ 0x29
 8002338:	2215      	movs	r2, #21
 800233a:	9100      	str	r1, [sp, #0]
 800233c:	f004 ff6b 	bl	8007216 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002340:	b003      	add	sp, #12
 8002342:	f85d fb04 	ldr.w	pc, [sp], #4
 8002346:	bf00      	nop
 8002348:	240007e8 	.word	0x240007e8
 800234c:	24000678 	.word	0x24000678

08002350 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002350:	4b06      	ldr	r3, [pc, #24]	@ (800236c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002352:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002354:	9301      	str	r3, [sp, #4]
 8002356:	232a      	movs	r3, #42	@ 0x2a
 8002358:	2239      	movs	r2, #57	@ 0x39
 800235a:	2100      	movs	r1, #0
 800235c:	9300      	str	r3, [sp, #0]
 800235e:	2304      	movs	r3, #4
 8002360:	4803      	ldr	r0, [pc, #12]	@ (8002370 <LCD_SetUpdateRegionLeft+0x20>)
 8002362:	f004 ff69 	bl	8007238 <HAL_DSI_LongWrite>
    }
 8002366:	b003      	add	sp, #12
 8002368:	f85d fb04 	ldr.w	pc, [sp], #4
 800236c:	24000008 	.word	0x24000008
 8002370:	24000678 	.word	0x24000678

08002374 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002374:	4b06      	ldr	r3, [pc, #24]	@ (8002390 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002376:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002378:	9301      	str	r3, [sp, #4]
 800237a:	232a      	movs	r3, #42	@ 0x2a
 800237c:	2239      	movs	r2, #57	@ 0x39
 800237e:	2100      	movs	r1, #0
 8002380:	9300      	str	r3, [sp, #0]
 8002382:	2304      	movs	r3, #4
 8002384:	4803      	ldr	r0, [pc, #12]	@ (8002394 <LCD_SetUpdateRegionRight+0x20>)
 8002386:	f004 ff57 	bl	8007238 <HAL_DSI_LongWrite>
    }
 800238a:	b003      	add	sp, #12
 800238c:	f85d fb04 	ldr.w	pc, [sp], #4
 8002390:	24000004 	.word	0x24000004
 8002394:	24000678 	.word	0x24000678

08002398 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 8002398:	b538      	push	{r3, r4, r5, lr}
        return instance;
 800239a:	4d14      	ldr	r5, [pc, #80]	@ (80023ec <HAL_DSI_TearingEffectCallback+0x54>)
 800239c:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 800239e:	2000      	movs	r0, #0
 80023a0:	f7ff fd46 	bl	8001e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80023a4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80023a6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80023aa:	3301      	adds	r3, #1
 80023ac:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80023b0:	f000 fdb4 	bl	8002f1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80023b4:	4b0e      	ldr	r3, [pc, #56]	@ (80023f0 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80023b6:	682a      	ldr	r2, [r5, #0]
 80023b8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80023ba:	781b      	ldrb	r3, [r3, #0]
 80023bc:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80023c0:	b173      	cbz	r3, 80023e0 <HAL_DSI_TearingEffectCallback+0x48>
 80023c2:	4d0c      	ldr	r5, [pc, #48]	@ (80023f4 <HAL_DSI_TearingEffectCallback+0x5c>)
 80023c4:	782b      	ldrb	r3, [r5, #0]
 80023c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80023ca:	b94b      	cbnz	r3, 80023e0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80023cc:	4b0a      	ldr	r3, [pc, #40]	@ (80023f8 <HAL_DSI_TearingEffectCallback+0x60>)
 80023ce:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80023d0:	f7ff ffbe 	bl	8002350 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80023d4:	4620      	mov	r0, r4
 80023d6:	f004 ff0e 	bl	80071f6 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80023da:	2301      	movs	r3, #1
 80023dc:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80023de:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80023e0:	2000      	movs	r0, #0
    }
 80023e2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80023e6:	f7ff bd53 	b.w	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80023ea:	bf00      	nop
 80023ec:	240248fc 	.word	0x240248fc
 80023f0:	2400000c 	.word	0x2400000c
 80023f4:	24000804 	.word	0x24000804
 80023f8:	24000800 	.word	0x24000800

080023fc <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 80023fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002400:	4e48      	ldr	r6, [pc, #288]	@ (8002524 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8002402:	b085      	sub	sp, #20
 8002404:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002406:	7833      	ldrb	r3, [r6, #0]
 8002408:	2b00      	cmp	r3, #0
 800240a:	f000 8088 	beq.w	800251e <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 800240e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002548 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002412:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800254c <HAL_DSI_EndOfRefreshCallback+0x150>
 8002416:	f8d9 5000 	ldr.w	r5, [r9]
 800241a:	4f43      	ldr	r7, [pc, #268]	@ (8002528 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 800241c:	2d00      	cmp	r5, #0
 800241e:	d13e      	bne.n	800249e <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002420:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002422:	4e42      	ldr	r6, [pc, #264]	@ (800252c <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002424:	f003 ff48 	bl	80062b8 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002428:	6823      	ldr	r3, [r4, #0]
 800242a:	9500      	str	r5, [sp, #0]
 800242c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002430:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002432:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002436:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800243a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800243e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002442:	f002 0208 	and.w	r2, r2, #8
 8002446:	9200      	str	r2, [sp, #0]
 8002448:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800244a:	f8d8 2000 	ldr.w	r2, [r8]
 800244e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002452:	4837      	ldr	r0, [pc, #220]	@ (8002530 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002454:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002456:	4e37      	ldr	r6, [pc, #220]	@ (8002534 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002458:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800245a:	4837      	ldr	r0, [pc, #220]	@ (8002538 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 800245c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002460:	4836      	ldr	r0, [pc, #216]	@ (800253c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002462:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002466:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002468:	f041 0101 	orr.w	r1, r1, #1
 800246c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800246e:	9501      	str	r5, [sp, #4]
 8002470:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002474:	f042 0208 	orr.w	r2, r2, #8
 8002478:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800247c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002480:	f003 0308 	and.w	r3, r3, #8
 8002484:	9301      	str	r3, [sp, #4]
 8002486:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002488:	f7ff ff74 	bl	8002374 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 800248c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 800248e:	4620      	mov	r0, r4
                updateRegion = 1;
 8002490:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 8002494:	b005      	add	sp, #20
 8002496:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 800249a:	f004 beac 	b.w	80071f6 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800249e:	6803      	ldr	r3, [r0, #0]
 80024a0:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024a2:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024a4:	9502      	str	r5, [sp, #8]
 80024a6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024aa:	4c25      	ldr	r4, [pc, #148]	@ (8002540 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80024ac:	f022 0208 	bic.w	r2, r2, #8
 80024b0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024b4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80024b8:	f002 0208 	and.w	r2, r2, #8
 80024bc:	9202      	str	r2, [sp, #8]
 80024be:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80024c0:	f8d8 2000 	ldr.w	r2, [r8]
 80024c4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80024c8:	4819      	ldr	r0, [pc, #100]	@ (8002530 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80024ca:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80024cc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80024d0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80024d2:	4819      	ldr	r0, [pc, #100]	@ (8002538 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80024d4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80024d8:	4818      	ldr	r0, [pc, #96]	@ (800253c <HAL_DSI_EndOfRefreshCallback+0x140>)
 80024da:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80024de:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80024e0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80024e2:	f041 0101 	orr.w	r1, r1, #1
 80024e6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80024e8:	9503      	str	r5, [sp, #12]
 80024ea:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80024ee:	f042 0208 	orr.w	r2, r2, #8
 80024f2:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80024f6:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 80024fa:	f003 0308 	and.w	r3, r3, #8
 80024fe:	9303      	str	r3, [sp, #12]
 8002500:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002502:	f7ff fcc5 	bl	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002506:	f7ff ff0f 	bl	8002328 <LCD_ReqEnable>
        return instance;
 800250a:	4b0e      	ldr	r3, [pc, #56]	@ (8002544 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 800250c:	7035      	strb	r5, [r6, #0]
 800250e:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002510:	b128      	cbz	r0, 800251e <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002512:	6803      	ldr	r3, [r0, #0]
 8002514:	6a1b      	ldr	r3, [r3, #32]
    }
 8002516:	b005      	add	sp, #20
 8002518:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800251c:	4718      	bx	r3
 800251e:	b005      	add	sp, #20
 8002520:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002524:	24000804 	.word	0x24000804
 8002528:	240007fc 	.word	0x240007fc
 800252c:	01b201e2 	.word	0x01b201e2
 8002530:	50001000 	.word	0x50001000
 8002534:	019201e3 	.word	0x019201e3
 8002538:	01920003 	.word	0x01920003
 800253c:	09c004b3 	.word	0x09c004b3
 8002540:	019201e2 	.word	0x019201e2
 8002544:	240248fc 	.word	0x240248fc
 8002548:	24000800 	.word	0x24000800
 800254c:	240004a0 	.word	0x240004a0

08002550 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002550:	4b03      	ldr	r3, [pc, #12]	@ (8002560 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 8002552:	2200      	movs	r2, #0
 8002554:	605a      	str	r2, [r3, #4]
          cc_in(0)
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	4a02      	ldr	r2, [pc, #8]	@ (8002564 <_GLOBAL__sub_I_displayRefreshing+0x14>)
 800255a:	601a      	str	r2, [r3, #0]
            touchgfx::HAL::getInstance()->setMCUActive(false);
        }
        return pdTRUE;
    }

}
 800255c:	4770      	bx	lr
 800255e:	bf00      	nop
 8002560:	240007ec 	.word	0x240007ec
 8002564:	08021c64 	.word	0x08021c64

08002568 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002568:	6940      	ldr	r0, [r0, #20]
 800256a:	4770      	bx	lr

0800256c <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 800256c:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002570:	4770      	bx	lr

08002572 <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 8002572:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002574:	b923      	cbnz	r3, 8002580 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 8002576:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002578:	3800      	subs	r0, #0
 800257a:	bf18      	it	ne
 800257c:	2001      	movne	r0, #1
 800257e:	4770      	bx	lr
 8002580:	2001      	movs	r0, #1
}
 8002582:	4770      	bx	lr

08002584 <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 8002584:	6880      	ldr	r0, [r0, #8]
 8002586:	4770      	bx	lr

08002588 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 8002588:	4770      	bx	lr

0800258a <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 800258a:	3004      	adds	r0, #4
{
 800258c:	b510      	push	{r4, lr}
 800258e:	460c      	mov	r4, r1
    *data = videoInfo;
 8002590:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 8002592:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002596:	bd10      	pop	{r4, pc}

08002598 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 8002598:	4770      	bx	lr
	...

0800259c <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 800259c:	b508      	push	{r3, lr}
    assert(0);
 800259e:	4a03      	ldr	r2, [pc, #12]	@ (80025ac <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80025a0:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80025a4:	4b02      	ldr	r3, [pc, #8]	@ (80025b0 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80025a6:	4803      	ldr	r0, [pc, #12]	@ (80025b4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80025a8:	f01e f922 	bl	80207f0 <__assert_func>
 80025ac:	08021fc8 	.word	0x08021fc8
 80025b0:	08023d07 	.word	0x08023d07
 80025b4:	08022023 	.word	0x08022023

080025b8 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80025b8:	b510      	push	{r4, lr}
 80025ba:	4604      	mov	r4, r0
 80025bc:	2148      	movs	r1, #72	@ 0x48
 80025be:	f01d fd9e 	bl	80200fe <_ZdlPvj>
 80025c2:	4620      	mov	r0, r4
 80025c4:	bd10      	pop	{r4, pc}
	...

080025c8 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80025c8:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80025ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002604 <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80025cc:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80025ce:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80025d0:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80025d2:	6003      	str	r3, [r0, #0]
 80025d4:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80025d6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80025da:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80025de:	e9c0 2207 	strd	r2, r2, [r0, #28]
 80025e2:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80025e6:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 80025ea:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 80025ee:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 80025f2:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 80025f6:	2001      	movs	r0, #1
 80025f8:	f009 ff73 	bl	800c4e2 <osSemaphoreNew>
 80025fc:	4b02      	ldr	r3, [pc, #8]	@ (8002608 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 80025fe:	6018      	str	r0, [r3, #0]
}
 8002600:	4620      	mov	r0, r4
 8002602:	bd10      	pop	{r4, pc}
 8002604:	08022298 	.word	0x08022298
 8002608:	24000824 	.word	0x24000824

0800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 800260c:	b410      	push	{r4}
 800260e:	460c      	mov	r4, r1
 8002610:	4611      	mov	r1, r2
 8002612:	461a      	mov	r2, r3
    if (reader != 0)
 8002614:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002616:	b13b      	cbz	r3, 8002628 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002618:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 800261a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 800261c:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 800261e:	4420      	add	r0, r4
}
 8002620:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 8002624:	f01e bba8 	b.w	8020d78 <strncmp>
        src = (const char*)movieData + offset;
 8002628:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 800262a:	e7f8      	b.n	800261e <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

0800262c <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 800262c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 800262e:	b510      	push	{r4, lr}
    if (reader != 0)
 8002630:	b173      	cbz	r3, 8002650 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 8002632:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002634:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 8002636:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002638:	1853      	adds	r3, r2, r1
 800263a:	5c52      	ldrb	r2, [r2, r1]
 800263c:	7898      	ldrb	r0, [r3, #2]
 800263e:	785c      	ldrb	r4, [r3, #1]
 8002640:	0400      	lsls	r0, r0, #16
 8002642:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 8002646:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002648:	78db      	ldrb	r3, [r3, #3]
 800264a:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 800264e:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002650:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8002652:	1853      	adds	r3, r2, r1
        val |= d[0];
 8002654:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 8002656:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002658:	7898      	ldrb	r0, [r3, #2]
 800265a:	0400      	lsls	r0, r0, #16
 800265c:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002660:	e7f1      	b.n	8002646 <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

08002662 <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 8002662:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8002664:	b143      	cbz	r3, 8002678 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 8002666:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002668:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 800266a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 800266c:	185a      	adds	r2, r3, r1
 800266e:	5c58      	ldrb	r0, [r3, r1]
 8002670:	7852      	ldrb	r2, [r2, #1]
 8002672:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 8002676:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 8002678:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800267a:	185a      	adds	r2, r3, r1
        val |= d[0];
 800267c:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 800267e:	7853      	ldrb	r3, [r2, #1]
 8002680:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 8002684:	4770      	bx	lr
	...

08002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 8002688:	b570      	push	{r4, r5, r6, lr}
 800268a:	4604      	mov	r4, r0
    if (reader != 0)
 800268c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 800268e:	460d      	mov	r5, r1
 8002690:	4616      	mov	r6, r2
    if (reader != 0)
 8002692:	b1d8      	cbz	r0, 80026cc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 8002694:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8002696:	4293      	cmp	r3, r2
 8002698:	d208      	bcs.n	80026ac <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 800269a:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 800269c:	4a0d      	ldr	r2, [pc, #52]	@ (80026d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 800269e:	219e      	movs	r1, #158	@ 0x9e
 80026a0:	480d      	ldr	r0, [pc, #52]	@ (80026d8 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80026a2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80026a6:	4b0d      	ldr	r3, [pc, #52]	@ (80026dc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80026a8:	f01e f8a2 	bl	80207f0 <__assert_func>
        reader->seek(offset);
 80026ac:	6803      	ldr	r3, [r0, #0]
 80026ae:	68db      	ldr	r3, [r3, #12]
 80026b0:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80026b2:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80026b4:	4632      	mov	r2, r6
 80026b6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80026b8:	6803      	ldr	r3, [r0, #0]
 80026ba:	691b      	ldr	r3, [r3, #16]
 80026bc:	4798      	blx	r3
 80026be:	b910      	cbnz	r0, 80026c6 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80026c0:	230d      	movs	r3, #13
 80026c2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80026c6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80026c8:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80026ca:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80026cc:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80026ce:	4408      	add	r0, r1
 80026d0:	e7fb      	b.n	80026ca <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80026d2:	bf00      	nop
 80026d4:	080220d4 	.word	0x080220d4
 80026d8:	08022023 	.word	0x08022023
 80026dc:	080220c1 	.word	0x080220c1

080026e0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 80026e0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80026e4:	6943      	ldr	r3, [r0, #20]
{
 80026e6:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 80026e8:	b92b      	cbnz	r3, 80026f6 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 80026ea:	4b22      	ldr	r3, [pc, #136]	@ (8002774 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 80026ec:	21e4      	movs	r1, #228	@ 0xe4
 80026ee:	4a22      	ldr	r2, [pc, #136]	@ (8002778 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 80026f0:	4822      	ldr	r0, [pc, #136]	@ (800277c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 80026f2:	f01e f87d 	bl	80207f0 <__assert_func>
    readData(currentMovieOffset, 8);
 80026f6:	2208      	movs	r2, #8
 80026f8:	6981      	ldr	r1, [r0, #24]
 80026fa:	f7ff ffc5 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 80026fe:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002700:	f243 0630 	movw	r6, #12336	@ 0x3030
 8002704:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002708:	3104      	adds	r1, #4
 800270a:	4620      	mov	r0, r4
 800270c:	f7ff ff8e 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002710:	69a3      	ldr	r3, [r4, #24]
 8002712:	4418      	add	r0, r3
 8002714:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8002716:	f100 0208 	add.w	r2, r0, #8
 800271a:	429a      	cmp	r2, r3
 800271c:	d306      	bcc.n	800272c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 800271e:	2301      	movs	r3, #1
    return false;
 8002720:	2000      	movs	r0, #0
    frameNumber = 1;
 8002722:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 8002724:	6a23      	ldr	r3, [r4, #32]
 8002726:	61a3      	str	r3, [r4, #24]
}
 8002728:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 800272c:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800272e:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 8002732:	2208      	movs	r2, #8
 8002734:	4620      	mov	r0, r4
        frameNumber++;
 8002736:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002738:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 800273c:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 800273e:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002740:	f7ff ffa2 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002744:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002748:	4620      	mov	r0, r4
 800274a:	4649      	mov	r1, r9
 800274c:	f7ff ff89 	bl	8002662 <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002750:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 8002754:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002756:	4620      	mov	r0, r4
 8002758:	f7ff ff83 	bl	8002662 <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 800275c:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002760:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 8002762:	4620      	mov	r0, r4
 8002764:	f7ff ff62 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002768:	45b0      	cmp	r8, r6
 800276a:	d1d1      	bne.n	8002710 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 800276c:	42bd      	cmp	r5, r7
 800276e:	d1cf      	bne.n	8002710 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002770:	2001      	movs	r0, #1
 8002772:	e7d9      	b.n	8002728 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 8002774:	08022116 	.word	0x08022116
 8002778:	0802215f 	.word	0x0802215f
 800277c:	08022023 	.word	0x08022023

08002780 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 8002780:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 8002782:	6803      	ldr	r3, [r0, #0]
 8002784:	bf38      	it	cc
 8002786:	2101      	movcc	r1, #1
 8002788:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 800278a:	b570      	push	{r4, r5, r6, lr}
 800278c:	460d      	mov	r5, r1
 800278e:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 8002790:	4798      	blx	r3
 8002792:	42a8      	cmp	r0, r5
 8002794:	d204      	bcs.n	80027a0 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 8002796:	6823      	ldr	r3, [r4, #0]
 8002798:	4620      	mov	r0, r4
 800279a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800279c:	4798      	blx	r3
 800279e:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027a0:	1e6b      	subs	r3, r5, #1
 80027a2:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80027a4:	2210      	movs	r2, #16
 80027a6:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80027a8:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80027ac:	f106 0108 	add.w	r1, r6, #8
 80027b0:	f7ff ff6a 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80027b4:	f106 0110 	add.w	r1, r6, #16
 80027b8:	4620      	mov	r0, r4
 80027ba:	f7ff ff37 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027be:	6a23      	ldr	r3, [r4, #32]
 80027c0:	3b04      	subs	r3, #4
 80027c2:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80027c4:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80027c8:	bd70      	pop	{r4, r5, r6, pc}
	...

080027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80027cc:	2100      	movs	r1, #0
    readData(0, 72);
 80027ce:	2248      	movs	r2, #72	@ 0x48
{
 80027d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80027d4:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80027d6:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 80027d8:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 80027dc:	f7ff ff54 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 80027e0:	69a6      	ldr	r6, [r4, #24]
 80027e2:	2304      	movs	r3, #4
 80027e4:	4a63      	ldr	r2, [pc, #396]	@ (8002974 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 80027e6:	4631      	mov	r1, r6
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff ff0f 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027ee:	b148      	cbz	r0, 8002804 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 80027f0:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 80027f2:	4a61      	ldr	r2, [pc, #388]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 80027f4:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 80027f8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 80027fc:	4b5f      	ldr	r3, [pc, #380]	@ (800297c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 80027fe:	4860      	ldr	r0, [pc, #384]	@ (8002980 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002800:	f01d fff6 	bl	80207f0 <__assert_func>
    currentMovieOffset += 8;
 8002804:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002808:	2304      	movs	r3, #4
 800280a:	4a5e      	ldr	r2, [pc, #376]	@ (8002984 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 800280c:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 800280e:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002810:	f7ff fefc 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002814:	b138      	cbz	r0, 8002826 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002816:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002818:	4a57      	ldr	r2, [pc, #348]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800281a:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800281e:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 8002822:	4b59      	ldr	r3, [pc, #356]	@ (8002988 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 8002824:	e7eb      	b.n	80027fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 8002826:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 800282a:	2304      	movs	r3, #4
 800282c:	4a57      	ldr	r2, [pc, #348]	@ (800298c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 800282e:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002830:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 8002832:	f7ff feeb 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002836:	4607      	mov	r7, r0
 8002838:	b138      	cbz	r0, 800284a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800283a:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 800283c:	4a4e      	ldr	r2, [pc, #312]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800283e:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002842:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 8002846:	4b52      	ldr	r3, [pc, #328]	@ (8002990 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002848:	e7d9      	b.n	80027fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 800284a:	f106 0110 	add.w	r1, r6, #16
 800284e:	4620      	mov	r0, r4
 8002850:	f7ff feec 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 8002854:	4605      	mov	r5, r0
 8002856:	b920      	cbnz	r0, 8002862 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002858:	4b4e      	ldr	r3, [pc, #312]	@ (8002994 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 800285a:	f240 1141 	movw	r1, #321	@ 0x141
 800285e:	4a46      	ldr	r2, [pc, #280]	@ (8002978 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002860:	e7cd      	b.n	80027fe <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 8002862:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 8002866:	2304      	movs	r3, #4
 8002868:	4a4b      	ldr	r2, [pc, #300]	@ (8002998 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 800286a:	4620      	mov	r0, r4
 800286c:	4641      	mov	r1, r8
 800286e:	f7ff fecd 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002872:	2800      	cmp	r0, #0
 8002874:	d049      	beq.n	800290a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 8002876:	2306      	movs	r3, #6
 8002878:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 800287c:	2304      	movs	r3, #4
 800287e:	4a47      	ldr	r2, [pc, #284]	@ (800299c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 8002880:	f106 0118 	add.w	r1, r6, #24
 8002884:	4620      	mov	r0, r4
 8002886:	f7ff fec1 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800288a:	2800      	cmp	r0, #0
 800288c:	d03f      	beq.n	800290e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 800288e:	2307      	movs	r3, #7
 8002890:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 8002894:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 8002896:	4f42      	ldr	r7, [pc, #264]	@ (80029a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 8002898:	220c      	movs	r2, #12
 800289a:	4620      	mov	r0, r4
 800289c:	4629      	mov	r1, r5
 800289e:	f7ff fef3 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80028a2:	f105 0608 	add.w	r6, r5, #8
 80028a6:	2304      	movs	r3, #4
 80028a8:	463a      	mov	r2, r7
 80028aa:	4620      	mov	r0, r4
 80028ac:	4631      	mov	r1, r6
 80028ae:	f7ff fead 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028b2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80028b6:	2800      	cmp	r0, #0
 80028b8:	d048      	beq.n	800294c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d148      	bne.n	8002950 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80028be:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80028c0:	42ab      	cmp	r3, r5
 80028c2:	d849      	bhi.n	8002958 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80028c4:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028c8:	3504      	adds	r5, #4
 80028ca:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80028cc:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028ce:	4629      	mov	r1, r5
 80028d0:	f7ff feac 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
 80028d4:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028d6:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80028d8:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80028da:	4620      	mov	r0, r4
 80028dc:	f7ff fea6 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 80028e0:	4406      	add	r6, r0
    readData(listOffset, 4);
 80028e2:	2204      	movs	r2, #4
 80028e4:	4620      	mov	r0, r4
 80028e6:	4631      	mov	r1, r6
 80028e8:	f7ff fece 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 80028ec:	2304      	movs	r3, #4
 80028ee:	4a2d      	ldr	r2, [pc, #180]	@ (80029a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 80028f0:	4631      	mov	r1, r6
 80028f2:	4620      	mov	r0, r4
 80028f4:	f7ff fe8a 	bl	800260c <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80028f8:	2800      	cmp	r0, #0
 80028fa:	d138      	bne.n	800296e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 80028fc:	2301      	movs	r3, #1
        indexOffset = listOffset;
 80028fe:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002900:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 8002902:	69a3      	ldr	r3, [r4, #24]
 8002904:	6223      	str	r3, [r4, #32]
}
 8002906:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 800290a:	2701      	movs	r7, #1
 800290c:	e7b6      	b.n	800287c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 800290e:	2f00      	cmp	r7, #0
 8002910:	d0c0      	beq.n	8002894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002912:	f106 0120 	add.w	r1, r6, #32
 8002916:	4620      	mov	r0, r4
 8002918:	f7ff fe88 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
 800291c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002920:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 8002924:	fbb0 f0f3 	udiv	r0, r0, r3
 8002928:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 800292a:	4620      	mov	r0, r4
 800292c:	f7ff fe7e 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002930:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 8002934:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 8002936:	4620      	mov	r0, r4
 8002938:	f7ff fe78 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 800293c:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002940:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 8002942:	4620      	mov	r0, r4
 8002944:	f7ff fe72 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002948:	6120      	str	r0, [r4, #16]
 800294a:	e7a3      	b.n	8002894 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 800294c:	2b00      	cmp	r3, #0
 800294e:	d0b9      	beq.n	80028c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002950:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002952:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 8002956:	e7d6      	b.n	8002906 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002958:	1d29      	adds	r1, r5, #4
 800295a:	4620      	mov	r0, r4
 800295c:	f7ff fe66 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002960:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 8002962:	220c      	movs	r2, #12
 8002964:	4620      	mov	r0, r4
 8002966:	4629      	mov	r1, r5
 8002968:	f7ff fe8e 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 800296c:	e799      	b.n	80028a2 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800296e:	230b      	movs	r3, #11
 8002970:	e7ef      	b.n	8002952 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 8002972:	bf00      	nop
 8002974:	08022192 	.word	0x08022192
 8002978:	080221b0 	.word	0x080221b0
 800297c:	08022197 	.word	0x08022197
 8002980:	08022023 	.word	0x08022023
 8002984:	080221dd 	.word	0x080221dd
 8002988:	080221e2 	.word	0x080221e2
 800298c:	080221fa 	.word	0x080221fa
 8002990:	080221ff 	.word	0x080221ff
 8002994:	08022215 	.word	0x08022215
 8002998:	08022221 	.word	0x08022221
 800299c:	08022226 	.word	0x08022226
 80029a0:	0802222b 	.word	0x0802222b
 80029a4:	08022230 	.word	0x08022230

080029a8 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80029a8:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80029ac:	2200      	movs	r2, #0
 80029ae:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80029b0:	f7ff bf0c 	b.w	80027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080029b4 <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80029b4:	b510      	push	{r4, lr}
    movieData = 0;
 80029b6:	2300      	movs	r3, #0
{
 80029b8:	4604      	mov	r4, r0
 80029ba:	4608      	mov	r0, r1
    movieData = 0;
 80029bc:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80029be:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80029c0:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	4798      	blx	r3
 80029c6:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80029c8:	4620      	mov	r0, r4
}
 80029ca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80029ce:	f7ff befd 	b.w	80027cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080029d4 <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80029d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80029d6:	4c14      	ldr	r4, [pc, #80]	@ (8002a28 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 80029d8:	4d14      	ldr	r5, [pc, #80]	@ (8002a2c <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 80029da:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 80029dc:	2400      	movs	r4, #0
 80029de:	4b14      	ldr	r3, [pc, #80]	@ (8002a30 <JPEG_Decode_DMA+0x5c>)
 80029e0:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 80029e2:	4b14      	ldr	r3, [pc, #80]	@ (8002a34 <JPEG_Decode_DMA+0x60>)
 80029e4:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 80029e6:	4b14      	ldr	r3, [pc, #80]	@ (8002a38 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 80029e8:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 80029ea:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 80029ec:	4b13      	ldr	r3, [pc, #76]	@ (8002a3c <JPEG_Decode_DMA+0x68>)
 80029ee:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 80029f0:	4b13      	ldr	r3, [pc, #76]	@ (8002a40 <JPEG_Decode_DMA+0x6c>)
 80029f2:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 80029f4:	4b13      	ldr	r3, [pc, #76]	@ (8002a44 <JPEG_Decode_DMA+0x70>)
 80029f6:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 80029f8:	4b13      	ldr	r3, [pc, #76]	@ (8002a48 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 80029fa:	682a      	ldr	r2, [r5, #0]
 80029fc:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002a00:	701c      	strb	r4, [r3, #0]
 8002a02:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 8002a04:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002a08:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a0c:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002a10:	4a0e      	ldr	r2, [pc, #56]	@ (8002a4c <JPEG_Decode_DMA+0x78>)
 8002a12:	68d2      	ldr	r2, [r2, #12]
 8002a14:	436a      	muls	r2, r5
 8002a16:	9200      	str	r2, [sp, #0]
 8002a18:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002a1c:	685b      	ldr	r3, [r3, #4]
 8002a1e:	f005 fd93 	bl	8008548 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 8002a22:	4620      	mov	r0, r4
 8002a24:	b003      	add	sp, #12
 8002a26:	bd30      	pop	{r4, r5, pc}
 8002a28:	24009e50 	.word	0x24009e50
 8002a2c:	24009e2c 	.word	0x24009e2c
 8002a30:	24009e3c 	.word	0x24009e3c
 8002a34:	24000820 	.word	0x24000820
 8002a38:	24009e4c 	.word	0x24009e4c
 8002a3c:	24009e44 	.word	0x24009e44
 8002a40:	24009e48 	.word	0x24009e48
 8002a44:	24000828 	.word	0x24000828
 8002a48:	24000010 	.word	0x24000010
 8002a4c:	24000808 	.word	0x24000808

08002a50 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002a50:	684b      	ldr	r3, [r1, #4]
 8002a52:	2b01      	cmp	r3, #1
 8002a54:	d115      	bne.n	8002a82 <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 8002a56:	68cb      	ldr	r3, [r1, #12]
 8002a58:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002a5a:	bf1e      	ittt	ne
 8002a5c:	f023 030f 	bicne.w	r3, r3, #15
 8002a60:	3310      	addne	r3, #16
 8002a62:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 8002a64:	688b      	ldr	r3, [r1, #8]
 8002a66:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002a68:	bf1e      	ittt	ne
 8002a6a:	f023 030f 	bicne.w	r3, r3, #15
 8002a6e:	3310      	addne	r3, #16
 8002a70:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002a72:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002a74:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 8002a76:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 8002a78:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 8002a7a:	4353      	muls	r3, r2
 8002a7c:	4a0e      	ldr	r2, [pc, #56]	@ (8002ab8 <HAL_JPEG_InfoReadyCallback+0x68>)
 8002a7e:	6013      	str	r3, [r2, #0]
 8002a80:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 8002a82:	2b02      	cmp	r3, #2
 8002a84:	d10e      	bne.n	8002aa4 <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 8002a86:	68cb      	ldr	r3, [r1, #12]
 8002a88:	071a      	lsls	r2, r3, #28
 8002a8a:	d003      	beq.n	8002a94 <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002a8c:	f023 030f 	bic.w	r3, r3, #15
 8002a90:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002a92:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 8002a94:	688b      	ldr	r3, [r1, #8]
 8002a96:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 8002a98:	bf1e      	ittt	ne
 8002a9a:	f023 0307 	bicne.w	r3, r3, #7
 8002a9e:	3308      	addne	r3, #8
 8002aa0:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 8002aa2:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d1fc      	bne.n	8002aa2 <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 8002aa8:	68cb      	ldr	r3, [r1, #12]
 8002aaa:	0758      	lsls	r0, r3, #29
 8002aac:	d0f2      	beq.n	8002a94 <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 8002aae:	f023 0307 	bic.w	r3, r3, #7
 8002ab2:	3308      	adds	r3, #8
 8002ab4:	e7ed      	b.n	8002a92 <HAL_JPEG_InfoReadyCallback+0x42>
 8002ab6:	bf00      	nop
 8002ab8:	24009e34 	.word	0x24009e34

08002abc <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 8002abc:	4a0b      	ldr	r2, [pc, #44]	@ (8002aec <HAL_JPEG_GetDataCallback+0x30>)
 8002abe:	6813      	ldr	r3, [r2, #0]
 8002ac0:	440b      	add	r3, r1
    {
 8002ac2:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 8002ac4:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <HAL_JPEG_GetDataCallback+0x34>)
 8002ac8:	6812      	ldr	r2, [r2, #0]
 8002aca:	4293      	cmp	r3, r2
 8002acc:	d20c      	bcs.n	8002ae8 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002ace:	4c09      	ldr	r4, [pc, #36]	@ (8002af4 <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 8002ad0:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002ad2:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002ad4:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002ad8:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002ada:	bf28      	it	cs
 8002adc:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002ae0:	6021      	str	r1, [r4, #0]
        }
    }
 8002ae2:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002ae4:	f005 bd92 	b.w	800860c <HAL_JPEG_ConfigInputBuffer>
    }
 8002ae8:	bc30      	pop	{r4, r5}
 8002aea:	4770      	bx	lr
 8002aec:	24009e4c 	.word	0x24009e4c
 8002af0:	24009e48 	.word	0x24009e48
 8002af4:	24009e44 	.word	0x24009e44

08002af8 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002af8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002afa:	4c20      	ldr	r4, [pc, #128]	@ (8002b7c <HAL_JPEG_DataReadyCallback+0x84>)
 8002afc:	2101      	movs	r1, #1
 8002afe:	4d20      	ldr	r5, [pc, #128]	@ (8002b80 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002b00:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b02:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b04:	4f1f      	ldr	r7, [pc, #124]	@ (8002b84 <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002b06:	011b      	lsls	r3, r3, #4
 8002b08:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002b0a:	6823      	ldr	r3, [r4, #0]
 8002b0c:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002b10:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002b12:	4b1d      	ldr	r3, [pc, #116]	@ (8002b88 <HAL_JPEG_DataReadyCallback+0x90>)
 8002b14:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002b16:	6822      	ldr	r2, [r4, #0]
 8002b18:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002b1c:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002b1e:	681a      	ldr	r2, [r3, #0]
 8002b20:	68f9      	ldr	r1, [r7, #12]
 8002b22:	440a      	add	r2, r1
 8002b24:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002b26:	6823      	ldr	r3, [r4, #0]
 8002b28:	3301      	adds	r3, #1
 8002b2a:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002b2c:	6823      	ldr	r3, [r4, #0]
 8002b2e:	2b01      	cmp	r3, #1
 8002b30:	d901      	bls.n	8002b36 <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002b32:	2300      	movs	r3, #0
 8002b34:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002b36:	6823      	ldr	r3, [r4, #0]
 8002b38:	011b      	lsls	r3, r3, #4
 8002b3a:	5ceb      	ldrb	r3, [r5, r3]
 8002b3c:	b133      	cbz	r3, 8002b4c <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b3e:	2102      	movs	r1, #2
 8002b40:	4630      	mov	r0, r6
 8002b42:	f005 fd35 	bl	80085b0 <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002b46:	4b11      	ldr	r3, [pc, #68]	@ (8002b8c <HAL_JPEG_DataReadyCallback+0x94>)
 8002b48:	2201      	movs	r2, #1
 8002b4a:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002b4c:	6822      	ldr	r2, [r4, #0]
 8002b4e:	4630      	mov	r0, r6
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002b56:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002b5a:	6869      	ldr	r1, [r5, #4]
 8002b5c:	435a      	muls	r2, r3
 8002b5e:	f005 fd58 	bl	8008612 <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002b62:	4b0b      	ldr	r3, [pc, #44]	@ (8002b90 <HAL_JPEG_DataReadyCallback+0x98>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	7a1a      	ldrb	r2, [r3, #8]
 8002b68:	b93a      	cbnz	r2, 8002b7a <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002b6a:	7a9b      	ldrb	r3, [r3, #10]
 8002b6c:	b92b      	cbnz	r3, 8002b7a <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002b6e:	4b09      	ldr	r3, [pc, #36]	@ (8002b94 <HAL_JPEG_DataReadyCallback+0x9c>)
 8002b70:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002b72:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002b76:	f009 bd2a 	b.w	800c5ce <osSemaphoreRelease>
    }
 8002b7a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002b7c:	24009e2c 	.word	0x24009e2c
 8002b80:	24000010 	.word	0x24000010
 8002b84:	24000808 	.word	0x24000808
 8002b88:	24000828 	.word	0x24000828
 8002b8c:	24009e3c 	.word	0x24009e3c
 8002b90:	24009e30 	.word	0x24009e30
 8002b94:	24000824 	.word	0x24000824

08002b98 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002b98:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002b9a:	e7fe      	b.n	8002b9a <HAL_JPEG_ErrorCallback+0x2>

08002b9c <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002b9c:	4b01      	ldr	r3, [pc, #4]	@ (8002ba4 <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002b9e:	2201      	movs	r2, #1
 8002ba0:	601a      	str	r2, [r3, #0]
    }
 8002ba2:	4770      	bx	lr
 8002ba4:	24009e40 	.word	0x24009e40

08002ba8 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002ba8:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002baa:	4d16      	ldr	r5, [pc, #88]	@ (8002c04 <JPEG_OutputHandler+0x5c>)
{
 8002bac:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002bae:	682b      	ldr	r3, [r5, #0]
 8002bb0:	b113      	cbz	r3, 8002bb8 <JPEG_OutputHandler+0x10>
 8002bb2:	4b15      	ldr	r3, [pc, #84]	@ (8002c08 <JPEG_OutputHandler+0x60>)
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	bb1b      	cbnz	r3, 8002c00 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002bb8:	4b14      	ldr	r3, [pc, #80]	@ (8002c0c <JPEG_OutputHandler+0x64>)
 8002bba:	6818      	ldr	r0, [r3, #0]
 8002bbc:	7a03      	ldrb	r3, [r0, #8]
 8002bbe:	b963      	cbnz	r3, 8002bda <JPEG_OutputHandler+0x32>
 8002bc0:	4b13      	ldr	r3, [pc, #76]	@ (8002c10 <JPEG_OutputHandler+0x68>)
 8002bc2:	4a14      	ldr	r2, [pc, #80]	@ (8002c14 <JPEG_OutputHandler+0x6c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	011b      	lsls	r3, r3, #4
 8002bc8:	5cd3      	ldrb	r3, [r2, r3]
 8002bca:	2b01      	cmp	r3, #1
 8002bcc:	d105      	bne.n	8002bda <JPEG_OutputHandler+0x32>
 8002bce:	4b0e      	ldr	r3, [pc, #56]	@ (8002c08 <JPEG_OutputHandler+0x60>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	b913      	cbnz	r3, 8002bda <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002bd4:	6803      	ldr	r3, [r0, #0]
 8002bd6:	691b      	ldr	r3, [r3, #16]
 8002bd8:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002bda:	4a0f      	ldr	r2, [pc, #60]	@ (8002c18 <JPEG_OutputHandler+0x70>)
 8002bdc:	6813      	ldr	r3, [r2, #0]
 8002bde:	2b01      	cmp	r3, #1
 8002be0:	d10c      	bne.n	8002bfc <JPEG_OutputHandler+0x54>
 8002be2:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <JPEG_OutputHandler+0x74>)
 8002be4:	490b      	ldr	r1, [pc, #44]	@ (8002c14 <JPEG_OutputHandler+0x6c>)
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	011b      	lsls	r3, r3, #4
 8002bea:	5ccb      	ldrb	r3, [r1, r3]
 8002bec:	b933      	cbnz	r3, 8002bfc <JPEG_OutputHandler+0x54>
 8002bee:	682b      	ldr	r3, [r5, #0]
 8002bf0:	b923      	cbnz	r3, 8002bfc <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002bf2:	2102      	movs	r1, #2
 8002bf4:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002bf6:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002bf8:	f005 ff39 	bl	8008a6e <HAL_JPEG_Resume>
        return 1;
 8002bfc:	2002      	movs	r0, #2
    }

    return 2;
}
 8002bfe:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002c00:	2001      	movs	r0, #1
 8002c02:	e7fc      	b.n	8002bfe <JPEG_OutputHandler+0x56>
 8002c04:	24009e40 	.word	0x24009e40
 8002c08:	2400081c 	.word	0x2400081c
 8002c0c:	24009e30 	.word	0x24009e30
 8002c10:	24000820 	.word	0x24000820
 8002c14:	24000010 	.word	0x24000010
 8002c18:	24009e3c 	.word	0x24009e3c
 8002c1c:	24009e2c 	.word	0x24009e2c

08002c20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002c20:	b570      	push	{r4, r5, r6, lr}
 8002c22:	4605      	mov	r5, r0
    if (length == 0)
 8002c24:	2a00      	cmp	r2, #0
 8002c26:	d035      	beq.n	8002c94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d033      	beq.n	8002c94 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002c2c:	481a      	ldr	r0, [pc, #104]	@ (8002c98 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002c2e:	2403      	movs	r4, #3
 8002c30:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c32:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002c34:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c36:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c3a:	bf18      	it	ne
 8002c3c:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002c40:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002c42:	bf18      	it	ne
 8002c44:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002c46:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002c48:	0924      	lsrs	r4, r4, #4
 8002c4a:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002c4c:	692c      	ldr	r4, [r5, #16]
 8002c4e:	f014 040f 	ands.w	r4, r4, #15
 8002c52:	bf18      	it	ne
 8002c54:	f1c4 0410 	rsbne	r4, r4, #16
 8002c58:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002c5a:	4810      	ldr	r0, [pc, #64]	@ (8002c9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002c5c:	f7ff feba 	bl	80029d4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c60:	4c0f      	ldr	r4, [pc, #60]	@ (8002ca0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002c62:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002c64:	4b0f      	ldr	r3, [pc, #60]	@ (8002ca4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c66:	4d0d      	ldr	r5, [pc, #52]	@ (8002c9c <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002c68:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002c6a:	4628      	mov	r0, r5
 8002c6c:	f7ff ff9c 	bl	8002ba8 <JPEG_OutputHandler>
 8002c70:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002c72:	6823      	ldr	r3, [r4, #0]
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d105      	bne.n	8002c84 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002c78:	4b0b      	ldr	r3, [pc, #44]	@ (8002ca8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002c7a:	f04f 31ff 	mov.w	r1, #4294967295
 8002c7e:	6818      	ldr	r0, [r3, #0]
 8002c80:	f009 fc79 	bl	800c576 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002c84:	6823      	ldr	r3, [r4, #0]
 8002c86:	2b01      	cmp	r3, #1
 8002c88:	d1ef      	bne.n	8002c6a <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	4a07      	ldr	r2, [pc, #28]	@ (8002cac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002c8e:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002c90:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002c92:	6013      	str	r3, [r2, #0]
}
 8002c94:	bd70      	pop	{r4, r5, r6, pc}
 8002c96:	bf00      	nop
 8002c98:	24000808 	.word	0x24000808
 8002c9c:	24000620 	.word	0x24000620
 8002ca0:	24009e38 	.word	0x24009e38
 8002ca4:	24009e30 	.word	0x24009e30
 8002ca8:	24000824 	.word	0x24000824
 8002cac:	24009e40 	.word	0x24009e40
 8002cb0:	2400081c 	.word	0x2400081c

08002cb4 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002cb8:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002cba:	6943      	ldr	r3, [r0, #20]
{
 8002cbc:	b085      	sub	sp, #20
 8002cbe:	4604      	mov	r4, r0
 8002cc0:	460f      	mov	r7, r1
 8002cc2:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002cc4:	b92b      	cbnz	r3, 8002cd2 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002cc6:	4b29      	ldr	r3, [pc, #164]	@ (8002d6c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002cc8:	21b0      	movs	r1, #176	@ 0xb0
 8002cca:	4a29      	ldr	r2, [pc, #164]	@ (8002d70 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002ccc:	4829      	ldr	r0, [pc, #164]	@ (8002d74 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002cce:	f01d fd8f 	bl	80207f0 <__assert_func>
    readData(currentMovieOffset, 8);
 8002cd2:	2208      	movs	r2, #8
 8002cd4:	6981      	ldr	r1, [r0, #24]
 8002cd6:	f7ff fcd7 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002cda:	69a6      	ldr	r6, [r4, #24]
 8002cdc:	4620      	mov	r0, r4
 8002cde:	4631      	mov	r1, r6
 8002ce0:	f7ff fcbf 	bl	8002662 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002ce4:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002ce6:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002ce8:	4620      	mov	r0, r4
 8002cea:	f7ff fcba 	bl	8002662 <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cee:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002cf0:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cf2:	4620      	mov	r0, r4
 8002cf4:	f7ff fc9a 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002cf8:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002cfc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002cfe:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002d00:	1842      	adds	r2, r0, r1
 8002d02:	429a      	cmp	r2, r3
 8002d04:	d226      	bcs.n	8002d54 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002d06:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002d0a:	459b      	cmp	fp, r3
 8002d0c:	d117      	bne.n	8002d3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d0e:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002d12:	459a      	cmp	sl, r3
 8002d14:	d113      	bne.n	8002d3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002d16:	b190      	cbz	r0, 8002d3e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d18:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002d1a:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d1c:	4620      	mov	r0, r4
 8002d1e:	f7ff fcb3 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d22:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002d24:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002d26:	462a      	mov	r2, r5
 8002d28:	4620      	mov	r0, r4
 8002d2a:	f8cd 8000 	str.w	r8, [sp]
 8002d2e:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002d32:	463b      	mov	r3, r7
 8002d34:	f7ff ff74 	bl	8002c20 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002d38:	6963      	ldr	r3, [r4, #20]
 8002d3a:	3301      	adds	r3, #1
 8002d3c:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002d3e:	69a3      	ldr	r3, [r4, #24]
 8002d40:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002d42:	b905      	cbnz	r5, 8002d46 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002d44:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d46:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d4a:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002d4e:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002d50:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002d52:	d109      	bne.n	8002d68 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002d54:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002d56:	2001      	movs	r0, #1
        frameNumber = 1;
 8002d58:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002d5a:	6a23      	ldr	r3, [r4, #32]
 8002d5c:	61a3      	str	r3, [r4, #24]
}
 8002d5e:	f080 0001 	eor.w	r0, r0, #1
 8002d62:	b005      	add	sp, #20
 8002d64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002d68:	2000      	movs	r0, #0
 8002d6a:	e7f8      	b.n	8002d5e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002d6c:	08022116 	.word	0x08022116
 8002d70:	08022235 	.word	0x08022235
 8002d74:	08022023 	.word	0x08022023

08002d78 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002d7a:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002d7c:	6981      	ldr	r1, [r0, #24]
{
 8002d7e:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002d80:	2208      	movs	r2, #8
 8002d82:	f7ff fc81 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002d86:	69a7      	ldr	r7, [r4, #24]
 8002d88:	4620      	mov	r0, r4
 8002d8a:	1d39      	adds	r1, r7, #4
 8002d8c:	f7ff fc4e 	bl	800262c <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002d90:	f107 0108 	add.w	r1, r7, #8
 8002d94:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002d96:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002d98:	4620      	mov	r0, r4
 8002d9a:	f7ff fc75 	bl	8002688 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002d9e:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002da0:	b16e      	cbz	r6, 8002dbe <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002da2:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002da4:	4c07      	ldr	r4, [pc, #28]	@ (8002dc4 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002da6:	4d08      	ldr	r5, [pc, #32]	@ (8002dc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002da8:	4633      	mov	r3, r6
 8002daa:	4807      	ldr	r0, [pc, #28]	@ (8002dc8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002dac:	f7ff fe12 	bl	80029d4 <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002db0:	4628      	mov	r0, r5
 8002db2:	f7ff fef9 	bl	8002ba8 <JPEG_OutputHandler>
 8002db6:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002db8:	6823      	ldr	r3, [r4, #0]
 8002dba:	2b00      	cmp	r3, #0
 8002dbc:	d0f8      	beq.n	8002db0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002dbe:	2001      	movs	r0, #1
 8002dc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002dc2:	bf00      	nop
 8002dc4:	24009e38 	.word	0x24009e38
 8002dc8:	24000620 	.word	0x24000620

08002dcc <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002dcc:	4a1b      	ldr	r2, [pc, #108]	@ (8002e3c <DMA2D_CopyBuffer+0x70>)
 8002dce:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002dd2:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002dd4:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002dd8:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002dda:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002ddc:	4e18      	ldr	r6, [pc, #96]	@ (8002e40 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002dde:	4f19      	ldr	r7, [pc, #100]	@ (8002e44 <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002de0:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002de4:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002de8:	434d      	muls	r5, r1
 8002dea:	6911      	ldr	r1, [r2, #16]
 8002dec:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002df0:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002df2:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002df4:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002df6:	683f      	ldr	r7, [r7, #0]
 8002df8:	68d3      	ldr	r3, [r2, #12]
 8002dfa:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002dfc:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002dfe:	45bc      	cmp	ip, r7
 8002e00:	d317      	bcc.n	8002e32 <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e02:	6892      	ldr	r2, [r2, #8]
 8002e04:	f1c2 0210 	rsb	r2, r2, #16
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e0c:	4a0e      	ldr	r2, [pc, #56]	@ (8002e48 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e0e:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e12:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e14:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002e16:	4a0a      	ldr	r2, [pc, #40]	@ (8002e40 <DMA2D_CopyBuffer+0x74>)
 8002e18:	4421      	add	r1, r4
 8002e1a:	4429      	add	r1, r5
 8002e1c:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002e1e:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002e20:	2300      	movs	r3, #0
 8002e22:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002e24:	4b09      	ldr	r3, [pc, #36]	@ (8002e4c <DMA2D_CopyBuffer+0x80>)
 8002e26:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002e28:	6843      	ldr	r3, [r0, #4]
 8002e2a:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002e2c:	4b08      	ldr	r3, [pc, #32]	@ (8002e50 <DMA2D_CopyBuffer+0x84>)
 8002e2e:	6013      	str	r3, [r2, #0]
}
 8002e30:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002e32:	f041 0110 	orr.w	r1, r1, #16
 8002e36:	6471      	str	r1, [r6, #68]	@ 0x44
 8002e38:	e7e8      	b.n	8002e0c <DMA2D_CopyBuffer+0x40>
 8002e3a:	bf00      	nop
 8002e3c:	24000808 	.word	0x24000808
 8002e40:	52001000 	.word	0x52001000
 8002e44:	24009e34 	.word	0x24009e34
 8002e48:	24009e50 	.word	0x24009e50
 8002e4c:	ff09000b 	.word	0xff09000b
 8002e50:	00012301 	.word	0x00012301

08002e54 <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002e54:	4b0c      	ldr	r3, [pc, #48]	@ (8002e88 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002e56:	2200      	movs	r2, #0
 8002e58:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002e5a:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002e5c:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002e5e:	3101      	adds	r1, #1
 8002e60:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002e62:	6819      	ldr	r1, [r3, #0]
 8002e64:	2901      	cmp	r1, #1
 8002e66:	d900      	bls.n	8002e6a <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002e68:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002e6a:	4b08      	ldr	r3, [pc, #32]	@ (8002e8c <DMA2D_ExternalJobCompleted+0x38>)
 8002e6c:	4a08      	ldr	r2, [pc, #32]	@ (8002e90 <DMA2D_ExternalJobCompleted+0x3c>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	68d2      	ldr	r2, [r2, #12]
 8002e72:	1a9b      	subs	r3, r3, r2
 8002e74:	68c2      	ldr	r2, [r0, #12]
 8002e76:	429a      	cmp	r2, r3
 8002e78:	d302      	bcc.n	8002e80 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002e7a:	4b06      	ldr	r3, [pc, #24]	@ (8002e94 <DMA2D_ExternalJobCompleted+0x40>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002e80:	4b05      	ldr	r3, [pc, #20]	@ (8002e98 <DMA2D_ExternalJobCompleted+0x44>)
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	f009 bba3 	b.w	800c5ce <osSemaphoreRelease>
 8002e88:	24000820 	.word	0x24000820
 8002e8c:	24009e34 	.word	0x24009e34
 8002e90:	24000808 	.word	0x24000808
 8002e94:	2400081c 	.word	0x2400081c
 8002e98:	24000824 	.word	0x24000824

08002e9c <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002e9c:	2101      	movs	r1, #1
 8002e9e:	2200      	movs	r2, #0
{
 8002ea0:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002ea2:	4608      	mov	r0, r1
 8002ea4:	f009 fb1d 	bl	800c4e2 <osSemaphoreNew>
 8002ea8:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed4 <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002eaa:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002eac:	b928      	cbnz	r0, 8002eba <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002eae:	4b0a      	ldr	r3, [pc, #40]	@ (8002ed8 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002eb0:	2128      	movs	r1, #40	@ 0x28
 8002eb2:	4a0a      	ldr	r2, [pc, #40]	@ (8002edc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002eb4:	480a      	ldr	r0, [pc, #40]	@ (8002ee0 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002eb6:	f01d fc9b 	bl	80207f0 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002eba:	2200      	movs	r2, #0
 8002ebc:	2104      	movs	r1, #4
 8002ebe:	2001      	movs	r0, #1
 8002ec0:	f009 fbae 	bl	800c620 <osMessageQueueNew>
 8002ec4:	4b07      	ldr	r3, [pc, #28]	@ (8002ee4 <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002ec6:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ec8:	b918      	cbnz	r0, 8002ed2 <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002eca:	4b07      	ldr	r3, [pc, #28]	@ (8002ee8 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002ecc:	212c      	movs	r1, #44	@ 0x2c
 8002ece:	4a03      	ldr	r2, [pc, #12]	@ (8002edc <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002ed0:	e7f0      	b.n	8002eb4 <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002ed2:	bd08      	pop	{r3, pc}
 8002ed4:	24009e58 	.word	0x24009e58
 8002ed8:	080222d4 	.word	0x080222d4
 8002edc:	0802231d 	.word	0x0802231d
 8002ee0:	0802234c 	.word	0x0802234c
 8002ee4:	24009e54 	.word	0x24009e54
 8002ee8:	080223e0 	.word	0x080223e0

08002eec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002eec:	4b02      	ldr	r3, [pc, #8]	@ (8002ef8 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002eee:	f04f 31ff 	mov.w	r1, #4294967295
 8002ef2:	6818      	ldr	r0, [r3, #0]
 8002ef4:	f009 bb3f 	b.w	800c576 <osSemaphoreAcquire>
 8002ef8:	24009e58 	.word	0x24009e58

08002efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002efc:	4b01      	ldr	r3, [pc, #4]	@ (8002f04 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002efe:	6818      	ldr	r0, [r3, #0]
 8002f00:	f009 bb65 	b.w	800c5ce <osSemaphoreRelease>
 8002f04:	24009e58 	.word	0x24009e58

08002f08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002f08:	4b02      	ldr	r3, [pc, #8]	@ (8002f14 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002f0a:	2100      	movs	r1, #0
 8002f0c:	6818      	ldr	r0, [r3, #0]
 8002f0e:	f009 bb32 	b.w	800c576 <osSemaphoreAcquire>
 8002f12:	bf00      	nop
 8002f14:	24009e58 	.word	0x24009e58

08002f18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002f18:	f7ff bff0 	b.w	8002efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002f1c <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002f1c:	2300      	movs	r3, #0
 8002f1e:	4803      	ldr	r0, [pc, #12]	@ (8002f2c <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002f20:	4903      	ldr	r1, [pc, #12]	@ (8002f30 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002f22:	461a      	mov	r2, r3
 8002f24:	6800      	ldr	r0, [r0, #0]
 8002f26:	f009 bbb6 	b.w	800c696 <osMessageQueuePut>
 8002f2a:	bf00      	nop
 8002f2c:	24009e54 	.word	0x24009e54
 8002f30:	24000030 	.word	0x24000030

08002f34 <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002f34:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002f36:	2300      	movs	r3, #0
 8002f38:	4c07      	ldr	r4, [pc, #28]	@ (8002f58 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002f3a:	a901      	add	r1, sp, #4
 8002f3c:	461a      	mov	r2, r3
 8002f3e:	6820      	ldr	r0, [r4, #0]
 8002f40:	f009 fbda 	bl	800c6f8 <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002f44:	f04f 33ff 	mov.w	r3, #4294967295
 8002f48:	2200      	movs	r2, #0
 8002f4a:	a901      	add	r1, sp, #4
 8002f4c:	6820      	ldr	r0, [r4, #0]
 8002f4e:	f009 fbd3 	bl	800c6f8 <osMessageQueueGet>
}
 8002f52:	b002      	add	sp, #8
 8002f54:	bd10      	pop	{r4, pc}
 8002f56:	bf00      	nop
 8002f58:	24009e54 	.word	0x24009e54

08002f5c <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002f5c:	6803      	ldr	r3, [r0, #0]
 8002f5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f60:	4718      	bx	r3

08002f62 <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002f62:	2001      	movs	r0, #1
 8002f64:	4770      	bx	lr

08002f66 <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002f66:	e7fe      	b.n	8002f66 <DMA2D_XferErrorCallback>

08002f68 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002f68:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002f6c:	4770      	bx	lr
	...

08002f70 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002f70:	b510      	push	{r4, lr}
 8002f72:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002f74:	f04f 31ff 	mov.w	r1, #4294967295
 8002f78:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002f7c:	f009 fa6f 	bl	800c45e <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002f80:	6860      	ldr	r0, [r4, #4]
 8002f82:	6803      	ldr	r3, [r0, #0]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4798      	blx	r3
 8002f88:	b978      	cbnz	r0, 8002faa <_ZN8STM32DMA5startEv+0x3a>
 8002f8a:	7a63      	ldrb	r3, [r4, #9]
 8002f8c:	b16b      	cbz	r3, 8002faa <_ZN8STM32DMA5startEv+0x3a>
 8002f8e:	7a23      	ldrb	r3, [r4, #8]
 8002f90:	b95b      	cbnz	r3, 8002faa <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002f92:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002f96:	4620      	mov	r0, r4
 8002f98:	6823      	ldr	r3, [r4, #0]
 8002f9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f9c:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002f9e:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002fa2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002fa6:	f009 ba7d 	b.w	800c4a4 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002faa:	490b      	ldr	r1, [pc, #44]	@ (8002fd8 <_ZN8STM32DMA5startEv+0x68>)
 8002fac:	4a0b      	ldr	r2, [pc, #44]	@ (8002fdc <_ZN8STM32DMA5startEv+0x6c>)
 8002fae:	680b      	ldr	r3, [r1, #0]
 8002fb0:	011b      	lsls	r3, r3, #4
 8002fb2:	5cd3      	ldrb	r3, [r2, r3]
 8002fb4:	2b01      	cmp	r3, #1
 8002fb6:	d1f2      	bne.n	8002f9e <_ZN8STM32DMA5startEv+0x2e>
 8002fb8:	7a20      	ldrb	r0, [r4, #8]
 8002fba:	2800      	cmp	r0, #0
 8002fbc:	d1ef      	bne.n	8002f9e <_ZN8STM32DMA5startEv+0x2e>
 8002fbe:	7aa0      	ldrb	r0, [r4, #10]
 8002fc0:	2800      	cmp	r0, #0
 8002fc2:	d1ec      	bne.n	8002f9e <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002fc4:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002fc6:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002fca:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002fce:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002fd0:	f7ff fefc 	bl	8002dcc <DMA2D_CopyBuffer>
    }
 8002fd4:	e7e3      	b.n	8002f9e <_ZN8STM32DMA5startEv+0x2e>
 8002fd6:	bf00      	nop
 8002fd8:	24000820 	.word	0x24000820
 8002fdc:	24000010 	.word	0x24000010

08002fe0 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002fe0:	4b05      	ldr	r3, [pc, #20]	@ (8002ff8 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002fe2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002fe6:	6003      	str	r3, [r0, #0]
 8002fe8:	4b04      	ldr	r3, [pc, #16]	@ (8002ffc <_ZN8STM32DMAD1Ev+0x1c>)
 8002fea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002fee:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002ff2:	f3bf 8f6f 	isb	sy
}
 8002ff6:	4770      	bx	lr
 8002ff8:	080225c4 	.word	0x080225c4
 8002ffc:	e000e100 	.word	0xe000e100

08003000 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8003000:	b510      	push	{r4, lr}
 8003002:	4604      	mov	r4, r0
}
 8003004:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8003008:	f7ff ffea 	bl	8002fe0 <_ZN8STM32DMAD1Ev>
 800300c:	4620      	mov	r0, r4
 800300e:	f01d f876 	bl	80200fe <_ZdlPvj>
 8003012:	4620      	mov	r0, r4
 8003014:	bd10      	pop	{r4, pc}
	...

08003018 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8003018:	4b10      	ldr	r3, [pc, #64]	@ (800305c <_ZN8STM32DMA10initializeEv+0x44>)
{
 800301a:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800301c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8003020:	f042 0210 	orr.w	r2, r2, #16
 8003024:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8003028:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800302c:	f002 0210 	and.w	r2, r2, #16
 8003030:	9201      	str	r2, [sp, #4]
 8003032:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8003034:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8003036:	f042 0210 	orr.w	r2, r2, #16
 800303a:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800303c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 800303e:	f022 0210 	bic.w	r2, r2, #16
 8003042:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8003044:	4b06      	ldr	r3, [pc, #24]	@ (8003060 <_ZN8STM32DMA10initializeEv+0x48>)
 8003046:	4a07      	ldr	r2, [pc, #28]	@ (8003064 <_ZN8STM32DMA10initializeEv+0x4c>)
 8003048:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 800304a:	4a07      	ldr	r2, [pc, #28]	@ (8003068 <_ZN8STM32DMA10initializeEv+0x50>)
 800304c:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800304e:	4b07      	ldr	r3, [pc, #28]	@ (800306c <_ZN8STM32DMA10initializeEv+0x54>)
 8003050:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003054:	609a      	str	r2, [r3, #8]
}
 8003056:	b002      	add	sp, #8
 8003058:	4770      	bx	lr
 800305a:	bf00      	nop
 800305c:	58024400 	.word	0x58024400
 8003060:	24000694 	.word	0x24000694
 8003064:	080032b5 	.word	0x080032b5
 8003068:	08002f67 	.word	0x08002f67
 800306c:	e000e100 	.word	0xe000e100

08003070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8003070:	b508      	push	{r3, lr}
    switch (format)
 8003072:	280a      	cmp	r0, #10
 8003074:	d809      	bhi.n	800308a <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8003076:	e8df f000 	tbb	[pc, r0]
 800307a:	1006      	.short	0x1006
 800307c:	0808080e 	.word	0x0808080e
 8003080:	10101008 	.word	0x10101008
 8003084:	10          	.byte	0x10
 8003085:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8003086:	2002      	movs	r0, #2
}
 8003088:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 800308a:	4b05      	ldr	r3, [pc, #20]	@ (80030a0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 800308c:	2191      	movs	r1, #145	@ 0x91
 800308e:	4a05      	ldr	r2, [pc, #20]	@ (80030a4 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003090:	4805      	ldr	r0, [pc, #20]	@ (80030a8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003092:	f01d fbad 	bl	80207f0 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8003096:	2000      	movs	r0, #0
 8003098:	e7f6      	b.n	8003088 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800309a:	2001      	movs	r0, #1
    return dma2dColorMode;
 800309c:	e7f4      	b.n	8003088 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800309e:	bf00      	nop
 80030a0:	08022422 	.word	0x08022422
 80030a4:	0802243d 	.word	0x0802243d
 80030a8:	08022488 	.word	0x08022488

080030ac <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 80030b0:	7f88      	ldrb	r0, [r1, #30]
 80030b2:	f7ff ffdd 	bl	8003070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030b6:	4b12      	ldr	r3, [pc, #72]	@ (8003100 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030b8:	8aa5      	ldrh	r5, [r4, #20]
 80030ba:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030bc:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030be:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030c2:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030c6:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030c8:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030ca:	1b52      	subs	r2, r2, r5
 80030cc:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 80030ce:	6825      	ldr	r5, [r4, #0]
 80030d0:	2d08      	cmp	r5, #8
 80030d2:	d10e      	bne.n	80030f2 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030d4:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030d6:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80030d8:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 80030da:	4a0a      	ldr	r2, [pc, #40]	@ (8003104 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 80030dc:	7f20      	ldrb	r0, [r4, #28]
 80030de:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 80030e2:	61da      	str	r2, [r3, #28]
        return color;
 80030e4:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80030e6:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 80030e8:	4a07      	ldr	r2, [pc, #28]	@ (8003108 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030ea:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030ec:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80030ee:	601a      	str	r2, [r3, #0]
    }
}
 80030f0:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 80030f2:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 80030f4:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 80030f6:	611a      	str	r2, [r3, #16]
 80030f8:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 80030fa:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 80030fc:	4a03      	ldr	r2, [pc, #12]	@ (800310c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 80030fe:	e7f6      	b.n	80030ee <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003100:	52001000 	.word	0x52001000
 8003104:	00010009 	.word	0x00010009
 8003108:	00022301 	.word	0x00022301
 800310c:	00032301 	.word	0x00032301

08003110 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003110:	b508      	push	{r3, lr}
    switch (format)
 8003112:	280b      	cmp	r0, #11
 8003114:	d80b      	bhi.n	800312e <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 8003116:	e8df f000 	tbb	[pc, r0]
 800311a:	1206      	.short	0x1206
 800311c:	0a0a0a10 	.word	0x0a0a0a10
 8003120:	0808080a 	.word	0x0808080a
 8003124:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 8003126:	2002      	movs	r0, #2
}
 8003128:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 800312a:	2005      	movs	r0, #5
        break;
 800312c:	e7fc      	b.n	8003128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 800312e:	4b05      	ldr	r3, [pc, #20]	@ (8003144 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003130:	2170      	movs	r1, #112	@ 0x70
 8003132:	4a05      	ldr	r2, [pc, #20]	@ (8003148 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8003134:	4805      	ldr	r0, [pc, #20]	@ (800314c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 8003136:	f01d fb5b 	bl	80207f0 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 800313a:	2000      	movs	r0, #0
 800313c:	e7f4      	b.n	8003128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 800313e:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003140:	e7f2      	b.n	8003128 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8003142:	bf00      	nop
 8003144:	08022422 	.word	0x08022422
 8003148:	0802251a 	.word	0x0802251a
 800314c:	08022488 	.word	0x08022488

08003150 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003150:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003154:	7f4f      	ldrb	r7, [r1, #29]
{
 8003156:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003158:	4638      	mov	r0, r7
 800315a:	f7ff ffd9 	bl	8003110 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800315e:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003162:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003164:	4628      	mov	r0, r5
 8003166:	f7ff ffd3 	bl	8003110 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 800316a:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800316c:	4628      	mov	r0, r5
 800316e:	f7ff ff7f 	bl	8003070 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003172:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 8003176:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 800317a:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800317e:	4b45      	ldr	r3, [pc, #276]	@ (8003294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003180:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003182:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003184:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8003186:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 8003188:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 800318a:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 800318e:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003190:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003194:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8003198:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 800319a:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800319e:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80031a0:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80031a2:	f8d9 4000 	ldr.w	r4, [r9]
 80031a6:	f899 201c 	ldrb.w	r2, [r9, #28]
 80031aa:	2c80      	cmp	r4, #128	@ 0x80
 80031ac:	d022      	beq.n	80031f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80031ae:	d80f      	bhi.n	80031d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80031b0:	2c20      	cmp	r4, #32
 80031b2:	d066      	beq.n	8003282 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031b4:	2c40      	cmp	r4, #64	@ 0x40
 80031b6:	d064      	beq.n	8003282 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80031b8:	2c04      	cmp	r4, #4
 80031ba:	d05c      	beq.n	8003276 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031bc:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80031c0:	4b34      	ldr	r3, [pc, #208]	@ (8003294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80031c2:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031c4:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80031c8:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80031ca:	d060      	beq.n	800328e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80031cc:	4a32      	ldr	r2, [pc, #200]	@ (8003298 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80031ce:	e03f      	b.n	8003250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80031d0:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80031d4:	d004      	beq.n	80031e0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80031d6:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 80031da:	d1ef      	bne.n	80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031dc:	482f      	ldr	r0, [pc, #188]	@ (800329c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 80031de:	e000      	b.n	80031e2 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031e0:	482f      	ldr	r0, [pc, #188]	@ (80032a0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031e2:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 80031e6:	61da      	str	r2, [r3, #28]
 80031e8:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 80031ec:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80031ee:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80031f0:	6159      	str	r1, [r3, #20]
 80031f2:	e02c      	b.n	800324e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031f4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 80031f8:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031fc:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003200:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003202:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003204:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 8003206:	1d21      	adds	r1, r4, #4
 8003208:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 800320a:	7821      	ldrb	r1, [r4, #0]
 800320c:	b141      	cbz	r1, 8003220 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 800320e:	2901      	cmp	r1, #1
 8003210:	d021      	beq.n	8003256 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 8003212:	4b24      	ldr	r3, [pc, #144]	@ (80032a4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 8003214:	f240 110b 	movw	r1, #267	@ 0x10b
 8003218:	4a23      	ldr	r2, [pc, #140]	@ (80032a8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 800321a:	4824      	ldr	r0, [pc, #144]	@ (80032ac <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 800321c:	f01d fae8 	bl	80207f0 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003220:	69da      	ldr	r2, [r3, #28]
 8003222:	8861      	ldrh	r1, [r4, #2]
 8003224:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003228:	3901      	subs	r1, #1
 800322a:	f022 0210 	bic.w	r2, r2, #16
 800322e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8003232:	61da      	str	r2, [r3, #28]
            bool blend = true;
 8003234:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 8003236:	4b17      	ldr	r3, [pc, #92]	@ (8003294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003238:	69d9      	ldr	r1, [r3, #28]
 800323a:	f041 0120 	orr.w	r1, r1, #32
 800323e:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003240:	69d9      	ldr	r1, [r3, #28]
 8003242:	0689      	lsls	r1, r1, #26
 8003244:	d4fc      	bmi.n	8003240 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 8003246:	2110      	movs	r1, #16
 8003248:	6099      	str	r1, [r3, #8]
            if (blend)
 800324a:	2a00      	cmp	r2, #0
 800324c:	d0be      	beq.n	80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800324e:	4a18      	ldr	r2, [pc, #96]	@ (80032b0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003250:	601a      	str	r2, [r3, #0]
}
 8003252:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003256:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003258:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800325a:	8860      	ldrh	r0, [r4, #2]
 800325c:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003260:	bf18      	it	ne
 8003262:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003264:	3801      	subs	r0, #1
 8003266:	f021 0110 	bic.w	r1, r1, #16
 800326a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 800326e:	f041 0110 	orr.w	r1, r1, #16
 8003272:	61d9      	str	r1, [r3, #28]
                break;
 8003274:	e7df      	b.n	8003236 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003276:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 800327a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800327e:	61da      	str	r2, [r3, #28]
 8003280:	e7b5      	b.n	80031ee <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 8003282:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 8003286:	4b03      	ldr	r3, [pc, #12]	@ (8003294 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003288:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800328c:	e7f7      	b.n	800327e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 800328e:	f242 3201 	movw	r2, #8961	@ 0x2301
 8003292:	e7dd      	b.n	8003250 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 8003294:	52001000 	.word	0x52001000
 8003298:	00012301 	.word	0x00012301
 800329c:	00020009 	.word	0x00020009
 80032a0:	0002000a 	.word	0x0002000a
 80032a4:	08022564 	.word	0x08022564
 80032a8:	0802257e 	.word	0x0802257e
 80032ac:	08022488 	.word	0x08022488
 80032b0:	00022301 	.word	0x00022301

080032b4 <DMA2D_XferCpltCallback>:
        return instance;
 80032b4:	4b02      	ldr	r3, [pc, #8]	@ (80032c0 <DMA2D_XferCpltCallback+0xc>)
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80032ba:	6803      	ldr	r3, [r0, #0]
 80032bc:	695b      	ldr	r3, [r3, #20]
 80032be:	4718      	bx	r3
 80032c0:	240248fc 	.word	0x240248fc

080032c4 <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80032c4:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80032c8:	b510      	push	{r4, lr}
 80032ca:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80032cc:	b9d3      	cbnz	r3, 8003304 <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80032ce:	6803      	ldr	r3, [r0, #0]
 80032d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032d2:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80032d4:	4919      	ldr	r1, [pc, #100]	@ (800333c <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80032d6:	4a1a      	ldr	r2, [pc, #104]	@ (8003340 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 80032d8:	680b      	ldr	r3, [r1, #0]
 80032da:	011b      	lsls	r3, r3, #4
 80032dc:	5cd3      	ldrb	r3, [r2, r3]
 80032de:	2b01      	cmp	r3, #1
 80032e0:	d12a      	bne.n	8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032e2:	4818      	ldr	r0, [pc, #96]	@ (8003344 <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 80032e4:	6800      	ldr	r0, [r0, #0]
 80032e6:	bb38      	cbnz	r0, 8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032e8:	7a20      	ldrb	r0, [r4, #8]
 80032ea:	bb28      	cbnz	r0, 8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 80032ec:	7aa0      	ldrb	r0, [r4, #10]
 80032ee:	bb18      	cbnz	r0, 8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032f0:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 80032f2:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 80032f6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 80032f8:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 80032fc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003300:	f7ff bd64 	b.w	8002dcc <DMA2D_CopyBuffer>
        if (isRunning)
 8003304:	7a03      	ldrb	r3, [r0, #8]
 8003306:	b143      	cbz	r3, 800331a <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003308:	2300      	movs	r3, #0
 800330a:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 800330c:	4b0b      	ldr	r3, [pc, #44]	@ (800333c <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 800330e:	6818      	ldr	r0, [r3, #0]
 8003310:	4b0b      	ldr	r3, [pc, #44]	@ (8003340 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003312:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 8003316:	f7ff fd9d 	bl	8002e54 <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 800331a:	6860      	ldr	r0, [r4, #4]
 800331c:	6803      	ldr	r3, [r0, #0]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	4798      	blx	r3
 8003322:	b948      	cbnz	r0, 8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003324:	7a63      	ldrb	r3, [r4, #9]
 8003326:	b13b      	cbz	r3, 8003338 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003328:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 800332a:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 800332e:	4620      	mov	r0, r4
 8003330:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 8003332:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 8003336:	4718      	bx	r3
    }
 8003338:	bd10      	pop	{r4, pc}
 800333a:	bf00      	nop
 800333c:	24000820 	.word	0x24000820
 8003340:	24000010 	.word	0x24000010
 8003344:	2400081c 	.word	0x2400081c

08003348 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003348:	b570      	push	{r4, r5, r6, lr}
 800334a:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 800334c:	4b0e      	ldr	r3, [pc, #56]	@ (8003388 <_ZN8STM32DMAC1Ev+0x40>)
 800334e:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003350:	2600      	movs	r6, #0
 8003352:	4625      	mov	r5, r4
 8003354:	2260      	movs	r2, #96	@ 0x60
 8003356:	6060      	str	r0, [r4, #4]
 8003358:	7226      	strb	r6, [r4, #8]
 800335a:	7266      	strb	r6, [r4, #9]
 800335c:	f845 3b20 	str.w	r3, [r5], #32
 8003360:	4629      	mov	r1, r5
 8003362:	f00b fe2b 	bl	800efbc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 8003366:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 800336a:	60ee      	str	r6, [r5, #12]
 800336c:	3524      	adds	r5, #36	@ 0x24
 800336e:	429d      	cmp	r5, r3
 8003370:	d1fb      	bne.n	800336a <_ZN8STM32DMAC1Ev+0x22>
 8003372:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 8003376:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003378:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 800337c:	f009 f83a 	bl	800c3f4 <osMutexNew>
 8003380:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 8003384:	4620      	mov	r0, r4
 8003386:	bd70      	pop	{r4, r5, r6, pc}
 8003388:	080225c4 	.word	0x080225c4

0800338c <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800338c:	4b03      	ldr	r3, [pc, #12]	@ (800339c <_ZN8touchgfx5paint8tearDownEv+0x10>)
 800338e:	681a      	ldr	r2, [r3, #0]
 8003390:	07d2      	lsls	r2, r2, #31
 8003392:	d4fc      	bmi.n	800338e <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003394:	2223      	movs	r2, #35	@ 0x23
 8003396:	609a      	str	r2, [r3, #8]
}
 8003398:	4770      	bx	lr
 800339a:	bf00      	nop
 800339c:	52001000 	.word	0x52001000

080033a0 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80033a0:	4a0b      	ldr	r2, [pc, #44]	@ (80033d0 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80033a2:	6953      	ldr	r3, [r2, #20]
 80033a4:	03db      	lsls	r3, r3, #15
 80033a6:	d511      	bpl.n	80033cc <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80033a8:	2900      	cmp	r1, #0
 80033aa:	dd0f      	ble.n	80033cc <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80033ac:	f000 031f 	and.w	r3, r0, #31
 80033b0:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80033b2:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80033b6:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80033b8:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80033bc:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80033be:	1a0b      	subs	r3, r1, r0
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	dcf9      	bgt.n	80033b8 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80033c4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80033c8:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80033cc:	4770      	bx	lr
 80033ce:	bf00      	nop
 80033d0:	e000ed00 	.word	0xe000ed00

080033d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80033d4:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80033d6:	4c10      	ldr	r4, [pc, #64]	@ (8003418 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 80033d8:	6825      	ldr	r5, [r4, #0]
 80033da:	07ed      	lsls	r5, r5, #31
 80033dc:	d4fc      	bmi.n	80033d8 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033de:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033e0:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 80033e2:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033e4:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033e6:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033ea:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033ee:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033f0:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033f2:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 80033f4:	d00c      	beq.n	8003410 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033f6:	4909      	ldr	r1, [pc, #36]	@ (800341c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 80033f8:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033fc:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033fe:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 8003402:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 8003404:	4b06      	ldr	r3, [pc, #24]	@ (8003420 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003406:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003408:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 800340a:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800340c:	6023      	str	r3, [r4, #0]
    }
}
 800340e:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003410:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003412:	4b04      	ldr	r3, [pc, #16]	@ (8003424 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 8003414:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003416:	e7f9      	b.n	800340c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003418:	52001000 	.word	0x52001000
 800341c:	00010009 	.word	0x00010009
 8003420:	00020001 	.word	0x00020001
 8003424:	00030001 	.word	0x00030001

08003428 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003428:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800342a:	4c0e      	ldr	r4, [pc, #56]	@ (8003464 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 800342c:	6825      	ldr	r5, [r4, #0]
 800342e:	07ed      	lsls	r5, r5, #31
 8003430:	d4fc      	bmi.n	800342c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003432:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003434:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 8003436:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003438:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800343a:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800343e:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003442:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003444:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 8003446:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003448:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 800344a:	d007      	beq.n	800345c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800344c:	4a06      	ldr	r2, [pc, #24]	@ (8003468 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 800344e:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 8003452:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003454:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003456:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003458:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 800345a:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800345c:	4b03      	ldr	r3, [pc, #12]	@ (800346c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 800345e:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003460:	6025      	str	r5, [r4, #0]
}
 8003462:	e7fa      	b.n	800345a <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 8003464:	52001000 	.word	0x52001000
 8003468:	00020001 	.word	0x00020001
 800346c:	ff020001 	.word	0xff020001

08003470 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003470:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003472:	4c0b      	ldr	r4, [pc, #44]	@ (80034a0 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 8003474:	6825      	ldr	r5, [r4, #0]
 8003476:	07ed      	lsls	r5, r5, #31
 8003478:	d4fc      	bmi.n	8003474 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800347a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800347c:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800347e:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003480:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003482:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003484:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003488:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800348a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800348c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800348e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003490:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003492:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003494:	4b03      	ldr	r3, [pc, #12]	@ (80034a4 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003496:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 8003498:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 800349a:	6023      	str	r3, [r4, #0]
}
 800349c:	bd30      	pop	{r4, r5, pc}
 800349e:	bf00      	nop
 80034a0:	52001000 	.word	0x52001000
 80034a4:	00020001 	.word	0x00020001

080034a8 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80034a8:	2001      	movs	r0, #1
 80034aa:	4770      	bx	lr

080034ac <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80034ac:	200c      	movs	r0, #12
 80034ae:	4770      	bx	lr

080034b0 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80034b0:	230c      	movs	r3, #12
 80034b2:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034b6:	3008      	adds	r0, #8
 80034b8:	4770      	bx	lr

080034ba <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80034ba:	230c      	movs	r3, #12
 80034bc:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034c0:	3008      	adds	r0, #8
 80034c2:	4770      	bx	lr

080034c4 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80034c4:	2001      	movs	r0, #1
 80034c6:	4770      	bx	lr

080034c8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80034c8:	206c      	movs	r0, #108	@ 0x6c
 80034ca:	4770      	bx	lr

080034cc <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034cc:	236c      	movs	r3, #108	@ 0x6c
 80034ce:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034d2:	3008      	adds	r0, #8
 80034d4:	4770      	bx	lr

080034d6 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034d6:	236c      	movs	r3, #108	@ 0x6c
 80034d8:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80034dc:	3008      	adds	r0, #8
 80034de:	4770      	bx	lr

080034e0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80034e0:	2001      	movs	r0, #1
 80034e2:	4770      	bx	lr

080034e4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80034e4:	2010      	movs	r0, #16
 80034e6:	4770      	bx	lr

080034e8 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034e8:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80034ec:	3008      	adds	r0, #8
 80034ee:	4770      	bx	lr

080034f0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80034f0:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 80034f4:	3008      	adds	r0, #8
 80034f6:	4770      	bx	lr

080034f8 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoWelcomeScreenScreenNoTransition();
 80034f8:	4608      	mov	r0, r1
 80034fa:	f000 bdd5 	b.w	80040a8 <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>
	...

08003500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003500:	4b03      	ldr	r3, [pc, #12]	@ (8003510 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003502:	b510      	push	{r4, lr}
 8003504:	4604      	mov	r4, r0
 8003506:	6003      	str	r3, [r0, #0]
 8003508:	f00a fbc7 	bl	800dc9a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800350c:	4620      	mov	r0, r4
 800350e:	bd10      	pop	{r4, pc}
 8003510:	0802267c 	.word	0x0802267c

08003514 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003514:	b510      	push	{r4, lr}
 8003516:	4604      	mov	r4, r0
 8003518:	f7ff fff2 	bl	8003500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 800351c:	2114      	movs	r1, #20
 800351e:	4620      	mov	r0, r4
 8003520:	f01c fded 	bl	80200fe <_ZdlPvj>
 8003524:	4620      	mov	r0, r4
 8003526:	bd10      	pop	{r4, pc}

08003528 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003528:	4b03      	ldr	r3, [pc, #12]	@ (8003538 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800352a:	b510      	push	{r4, lr}
 800352c:	4604      	mov	r4, r0
 800352e:	6003      	str	r3, [r0, #0]
 8003530:	f00a fbb3 	bl	800dc9a <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003534:	4620      	mov	r0, r4
 8003536:	bd10      	pop	{r4, pc}
 8003538:	08022648 	.word	0x08022648

0800353c <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800353c:	b510      	push	{r4, lr}
 800353e:	4604      	mov	r4, r0
 8003540:	f7ff fff2 	bl	8003528 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003544:	2174      	movs	r1, #116	@ 0x74
 8003546:	4620      	mov	r0, r4
 8003548:	f01c fdd9 	bl	80200fe <_ZdlPvj>
 800354c:	4620      	mov	r0, r4
 800354e:	bd10      	pop	{r4, pc}

08003550 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003550:	4b03      	ldr	r3, [pc, #12]	@ (8003560 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003552:	b510      	push	{r4, lr}
 8003554:	4604      	mov	r4, r0
 8003556:	6003      	str	r3, [r0, #0]
 8003558:	f00a fb9f 	bl	800dc9a <_ZN8touchgfx17AbstractPartitionD1Ev>
 800355c:	4620      	mov	r0, r4
 800355e:	bd10      	pop	{r4, pc}
 8003560:	08022614 	.word	0x08022614

08003564 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003564:	b510      	push	{r4, lr}
 8003566:	4604      	mov	r4, r0
 8003568:	f7ff fff2 	bl	8003550 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800356c:	2118      	movs	r1, #24
 800356e:	4620      	mov	r0, r4
 8003570:	f01c fdc5 	bl	80200fe <_ZdlPvj>
 8003574:	4620      	mov	r0, r4
 8003576:	bd10      	pop	{r4, pc}

08003578 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 8003578:	4b08      	ldr	r3, [pc, #32]	@ (800359c <_ZN12FrontendHeapD1Ev+0x24>)
 800357a:	b510      	push	{r4, lr}
 800357c:	4604      	mov	r4, r0
 800357e:	f840 3ba0 	str.w	r3, [r0], #160
 8003582:	f7ff ffbd 	bl	8003500 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003586:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 800358a:	f7ff ffcd 	bl	8003528 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800358e:	f104 0014 	add.w	r0, r4, #20
 8003592:	f7ff ffdd 	bl	8003550 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003596:	4620      	mov	r0, r4
 8003598:	bd10      	pop	{r4, pc}
 800359a:	bf00      	nop
 800359c:	080226b0 	.word	0x080226b0

080035a0 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80035a0:	b508      	push	{r3, lr}
 80035a2:	4802      	ldr	r0, [pc, #8]	@ (80035ac <__tcf_0+0xc>)
 80035a4:	f7ff ffe8 	bl	8003578 <_ZN12FrontendHeapD1Ev>
 80035a8:	bd08      	pop	{r3, pc}
 80035aa:	bf00      	nop
 80035ac:	2400ad14 	.word	0x2400ad14

080035b0 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80035b0:	b510      	push	{r4, lr}
 80035b2:	4604      	mov	r4, r0
 80035b4:	f7ff ffe0 	bl	8003578 <_ZN12FrontendHeapD1Ev>
 80035b8:	f44f 7105 	mov.w	r1, #532	@ 0x214
 80035bc:	4620      	mov	r0, r4
 80035be:	f01c fd9e 	bl	80200fe <_ZdlPvj>
 80035c2:	4620      	mov	r0, r4
 80035c4:	bd10      	pop	{r4, pc}
	...

080035c8 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80035c8:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80035cc:	f000 fbf0 	bl	8003db0 <_ZN14BitmapDatabase11getInstanceEv>
 80035d0:	2400      	movs	r4, #0
 80035d2:	4605      	mov	r5, r0
 80035d4:	f000 fbf0 	bl	8003db8 <_ZN14BitmapDatabase15getInstanceSizeEv>
 80035d8:	4623      	mov	r3, r4
 80035da:	4601      	mov	r1, r0
 80035dc:	4622      	mov	r2, r4
 80035de:	4628      	mov	r0, r5
 80035e0:	9400      	str	r4, [sp, #0]
 80035e2:	f012 f807 	bl	80155f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 80035e6:	4b27      	ldr	r3, [pc, #156]	@ (8003684 <touchgfx_init+0xbc>)
 80035e8:	4a27      	ldr	r2, [pc, #156]	@ (8003688 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 80035ea:	4620      	mov	r0, r4
        static FrontendHeap instance;
 80035ec:	4d27      	ldr	r5, [pc, #156]	@ (800368c <touchgfx_init+0xc4>)
 80035ee:	601a      	str	r2, [r3, #0]
 80035f0:	f000 fee8 	bl	80043c4 <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 80035f4:	4b26      	ldr	r3, [pc, #152]	@ (8003690 <touchgfx_init+0xc8>)
 80035f6:	4a27      	ldr	r2, [pc, #156]	@ (8003694 <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 80035f8:	4827      	ldr	r0, [pc, #156]	@ (8003698 <touchgfx_init+0xd0>)
 80035fa:	609a      	str	r2, [r3, #8]
 80035fc:	f011 fea6 	bl	801534c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003600:	682b      	ldr	r3, [r5, #0]
 8003602:	f3bf 8f5b 	dmb	ish
 8003606:	07db      	lsls	r3, r3, #31
 8003608:	d435      	bmi.n	8003676 <touchgfx_init+0xae>
 800360a:	4628      	mov	r0, r5
 800360c:	f01c fd79 	bl	8020102 <__cxa_guard_acquire>
 8003610:	b388      	cbz	r0, 8003676 <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 8003612:	4c22      	ldr	r4, [pc, #136]	@ (800369c <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 8003614:	4b22      	ldr	r3, [pc, #136]	@ (80036a0 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 8003616:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
        : presenterStorage(pres),
 800361a:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 800361e:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 8003622:	f104 07a0 	add.w	r7, r4, #160	@ 0xa0
 8003626:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003628:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 800362a:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 800362e:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003630:	6126      	str	r6, [r4, #16]
 8003632:	f00a fb33 	bl	800dc9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003636:	4b1b      	ldr	r3, [pc, #108]	@ (80036a4 <touchgfx_init+0xdc>)
 8003638:	4640      	mov	r0, r8
 800363a:	6163      	str	r3, [r4, #20]
 800363c:	f00a fb2e 	bl	800dc9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003640:	4b19      	ldr	r3, [pc, #100]	@ (80036a8 <touchgfx_init+0xe0>)
 8003642:	4638      	mov	r0, r7
 8003644:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003646:	f00a fb29 	bl	800dc9c <_ZN8touchgfx17AbstractPartitionC1Ev>
 800364a:	4b18      	ldr	r3, [pc, #96]	@ (80036ac <touchgfx_init+0xe4>)
 800364c:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8003650:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 8003654:	f000 ff68 	bl	8004528 <_ZN5ModelC1Ev>
 8003658:	4622      	mov	r2, r4
 800365a:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 800365e:	4630      	mov	r0, r6
 8003660:	f000 ff58 	bl	8004514 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 8003664:	4630      	mov	r0, r6
 8003666:	f000 fd1f 	bl	80040a8 <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 800366a:	4811      	ldr	r0, [pc, #68]	@ (80036b0 <touchgfx_init+0xe8>)
 800366c:	f01d f8de 	bl	802082c <atexit>
 8003670:	4628      	mov	r0, r5
 8003672:	f01c fd52 	bl	802011a <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 8003676:	480f      	ldr	r0, [pc, #60]	@ (80036b4 <touchgfx_init+0xec>)
}
 8003678:	b002      	add	sp, #8
 800367a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 800367e:	f7fe bceb 	b.w	8002058 <_ZN11TouchGFXHAL10initializeEv>
 8003682:	bf00      	nop
 8003684:	24024960 	.word	0x24024960
 8003688:	24009ed8 	.word	0x24009ed8
 800368c:	2400ad10 	.word	0x2400ad10
 8003690:	24009ef8 	.word	0x24009ef8
 8003694:	24009edc 	.word	0x24009edc
 8003698:	24000034 	.word	0x24000034
 800369c:	2400ad14 	.word	0x2400ad14
 80036a0:	080226b0 	.word	0x080226b0
 80036a4:	08022614 	.word	0x08022614
 80036a8:	08022648 	.word	0x08022648
 80036ac:	0802267c 	.word	0x0802267c
 80036b0:	080035a1 	.word	0x080035a1
 80036b4:	24009e5c 	.word	0x24009e5c

080036b8 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80036b8:	4770      	bx	lr
	...

080036bc <_GLOBAL__sub_I_touchgfx_init>:
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
}
 80036bc:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80036be:	4c0e      	ldr	r4, [pc, #56]	@ (80036f8 <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80036c0:	4b0e      	ldr	r3, [pc, #56]	@ (80036fc <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80036c2:	4e0f      	ldr	r6, [pc, #60]	@ (8003700 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80036c4:	4620      	mov	r0, r4
static LCD24bpp display;
 80036c6:	4d0f      	ldr	r5, [pc, #60]	@ (8003704 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80036c8:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80036ca:	f7ff fe3d 	bl	8003348 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 80036ce:	4628      	mov	r0, r5
 80036d0:	f015 fda8 	bl	8019224 <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 80036d4:	480c      	ldr	r0, [pc, #48]	@ (8003708 <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 80036d6:	f010 f841 	bl	801375c <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 80036da:	f44f 7348 	mov.w	r3, #800	@ 0x320
 80036de:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80036e2:	4621      	mov	r1, r4
 80036e4:	4809      	ldr	r0, [pc, #36]	@ (800370c <_GLOBAL__sub_I_touchgfx_init+0x50>)
 80036e6:	e9cd 3200 	strd	r3, r2, [sp]
 80036ea:	4633      	mov	r3, r6
 80036ec:	462a      	mov	r2, r5
 80036ee:	f7fe fd59 	bl	80021a4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 80036f2:	b002      	add	sp, #8
 80036f4:	bd70      	pop	{r4, r5, r6, pc}
 80036f6:	bf00      	nop
 80036f8:	24009f64 	.word	0x24009f64
 80036fc:	08021d60 	.word	0x08021d60
 8003700:	2400ad0c 	.word	0x2400ad0c
 8003704:	24009ef8 	.word	0x24009ef8
 8003708:	24009edc 	.word	0x24009edc
 800370c:	24009e5c 	.word	0x24009e5c

08003710 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003710:	4801      	ldr	r0, [pc, #4]	@ (8003718 <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003712:	f7ff bc65 	b.w	8002fe0 <_ZN8STM32DMAD1Ev>
 8003716:	bf00      	nop
 8003718:	24009f64 	.word	0x24009f64

0800371c <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 800371c:	2000      	movs	r0, #0
 800371e:	4770      	bx	lr

08003720 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003720:	8081      	strh	r1, [r0, #4]
    }
 8003722:	4770      	bx	lr

08003724 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003724:	80c1      	strh	r1, [r0, #6]
    }
 8003726:	4770      	bx	lr

08003728 <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 8003728:	8101      	strh	r1, [r0, #8]
    }
 800372a:	4770      	bx	lr

0800372c <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 800372c:	8141      	strh	r1, [r0, #10]
    }
 800372e:	4770      	bx	lr

08003730 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003730:	4770      	bx	lr

08003732 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003732:	4770      	bx	lr

08003734 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003734:	4770      	bx	lr

08003736 <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 8003736:	4770      	bx	lr

08003738 <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 8003738:	4770      	bx	lr

0800373a <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800373a:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 800373c:	88c4      	ldrh	r4, [r0, #6]
 800373e:	6803      	ldr	r3, [r0, #0]
 8003740:	1b12      	subs	r2, r2, r4
 8003742:	8884      	ldrh	r4, [r0, #4]
 8003744:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003746:	1b09      	subs	r1, r1, r4
 8003748:	b212      	sxth	r2, r2
    }
 800374a:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 800374e:	b209      	sxth	r1, r1
 8003750:	4718      	bx	r3

08003752 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003752:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8003756:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 8003758:	f04f 33ff 	mov.w	r3, #4294967295
 800375c:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 800375e:	6813      	ldr	r3, [r2, #0]
 8003760:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003762:	6010      	str	r0, [r2, #0]
    }
 8003764:	4770      	bx	lr

08003766 <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 8003766:	2000      	movs	r0, #0
 8003768:	4770      	bx	lr

0800376a <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800376a:	888b      	ldrh	r3, [r1, #4]
 800376c:	8083      	strh	r3, [r0, #4]
        return true;
    }
 800376e:	2001      	movs	r0, #1
 8003770:	4770      	bx	lr

08003772 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 8003772:	4770      	bx	lr

08003774 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 8003774:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 8003778:	4770      	bx	lr

0800377a <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 800377a:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 800377e:	4770      	bx	lr

08003780 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8003780:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 8003782:	b510      	push	{r4, lr}
        return rect.width;
 8003784:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 8003788:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 800378c:	8002      	strh	r2, [r0, #0]
 800378e:	8042      	strh	r2, [r0, #2]
 8003790:	8084      	strh	r4, [r0, #4]
 8003792:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 8003794:	bd10      	pop	{r4, pc}

08003796 <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 8003796:	2200      	movs	r2, #0
 8003798:	8002      	strh	r2, [r0, #0]
 800379a:	8042      	strh	r2, [r0, #2]
 800379c:	8082      	strh	r2, [r0, #4]
 800379e:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80037a0:	4770      	bx	lr

080037a2 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80037a2:	7701      	strb	r1, [r0, #28]
    }
 80037a4:	4770      	bx	lr

080037a6 <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80037a6:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80037aa:	4770      	bx	lr

080037ac <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80037ac:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80037b0:	4770      	bx	lr

080037b2 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80037b2:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80037b6:	4770      	bx	lr

080037b8 <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80037b8:	2001      	movs	r0, #1
 80037ba:	4770      	bx	lr

080037bc <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80037bc:	3098      	adds	r0, #152	@ 0x98
 80037be:	4770      	bx	lr

080037c0 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80037c0:	308c      	adds	r0, #140	@ 0x8c
 80037c2:	4770      	bx	lr

080037c4 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80037c4:	3084      	adds	r0, #132	@ 0x84
 80037c6:	4770      	bx	lr

080037c8 <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80037c8:	4770      	bx	lr
	...

080037cc <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80037cc:	4b02      	ldr	r3, [pc, #8]	@ (80037d8 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 80037ce:	2290      	movs	r2, #144	@ 0x90
 80037d0:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 80037d4:	4770      	bx	lr
 80037d6:	bf00      	nop
 80037d8:	e000e100 	.word	0xe000e100

080037dc <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 80037dc:	4770      	bx	lr

080037de <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 80037de:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 80037e0:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 80037e4:	4770      	bx	lr

080037e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 80037e6:	4770      	bx	lr

080037e8 <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 80037e8:	4770      	bx	lr

080037ea <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 80037ea:	4770      	bx	lr

080037ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 80037ec:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 80037f0:	4611      	mov	r1, r2
 80037f2:	6840      	ldr	r0, [r0, #4]
 80037f4:	6803      	ldr	r3, [r0, #0]
 80037f6:	68db      	ldr	r3, [r3, #12]
 80037f8:	4718      	bx	r3

080037fa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 80037fa:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 80037fe:	4770      	bx	lr

08003800 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003800:	b510      	push	{r4, lr}
 8003802:	4604      	mov	r4, r0
 8003804:	2148      	movs	r1, #72	@ 0x48
 8003806:	f01c fc7a 	bl	80200fe <_ZdlPvj>
 800380a:	4620      	mov	r0, r4
 800380c:	bd10      	pop	{r4, pc}

0800380e <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 800380e:	b510      	push	{r4, lr}
 8003810:	4604      	mov	r4, r0
 8003812:	212c      	movs	r1, #44	@ 0x2c
 8003814:	f01c fc73 	bl	80200fe <_ZdlPvj>
 8003818:	4620      	mov	r0, r4
 800381a:	bd10      	pop	{r4, pc}

0800381c <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800381c:	b510      	push	{r4, lr}
 800381e:	4604      	mov	r4, r0
 8003820:	21bc      	movs	r1, #188	@ 0xbc
 8003822:	f01c fc6c 	bl	80200fe <_ZdlPvj>
 8003826:	4620      	mov	r0, r4
 8003828:	bd10      	pop	{r4, pc}
	...

0800382c <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 800382c:	b538      	push	{r3, r4, r5, lr}
 800382e:	4604      	mov	r4, r0
    HAL::initialize();
 8003830:	f00a fd31 	bl	800e296 <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003834:	6823      	ldr	r3, [r4, #0]
 8003836:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 8003838:	f00e fe62 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 800383c:	4601      	mov	r1, r0
 800383e:	4620      	mov	r0, r4
 8003840:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003842:	6823      	ldr	r3, [r4, #0]
 8003844:	4908      	ldr	r1, [pc, #32]	@ (8003868 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 8003846:	4620      	mov	r0, r4
 8003848:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 800384c:	2300      	movs	r3, #0
 800384e:	461a      	mov	r2, r3
 8003850:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003852:	6863      	ldr	r3, [r4, #4]
 8003854:	4a05      	ldr	r2, [pc, #20]	@ (800386c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 8003856:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 8003858:	4b05      	ldr	r3, [pc, #20]	@ (8003870 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800385a:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 800385c:	4a05      	ldr	r2, [pc, #20]	@ (8003874 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 800385e:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003860:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003862:	4a05      	ldr	r2, [pc, #20]	@ (8003878 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003864:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8003866:	bd38      	pop	{r3, r4, r5, pc}
 8003868:	d0119400 	.word	0xd0119400
 800386c:	2400b030 	.word	0x2400b030
 8003870:	2400afe8 	.word	0x2400afe8
 8003874:	d0000000 	.word	0xd0000000
 8003878:	00119400 	.word	0x00119400

0800387c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 800387c:	b538      	push	{r3, r4, r5, lr}
 800387e:	4604      	mov	r4, r0
 8003880:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 8003882:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003884:	f04f 31ff 	mov.w	r1, #4294967295
 8003888:	f008 fde9 	bl	800c45e <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 800388c:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800388e:	f008 fe09 	bl	800c4a4 <osMutexRelease>
        streams[handle].isActive = false;
 8003892:	2324      	movs	r3, #36	@ 0x24
 8003894:	fb03 4505 	mla	r5, r3, r5, r4
 8003898:	2300      	movs	r3, #0
 800389a:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 800389e:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80038a2:	b90b      	cbnz	r3, 80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80038a4:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80038a6:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80038a8:	bd38      	pop	{r3, r4, r5, pc}

080038aa <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80038aa:	f00a bca5 	b.w	800e1f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080038ae <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80038ae:	f00a be06 	b.w	800e4be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080038b2 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80038b2:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80038b6:	b112      	cbz	r2, 80038be <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80038b8:	6803      	ldr	r3, [r0, #0]
 80038ba:	695b      	ldr	r3, [r3, #20]
 80038bc:	4718      	bx	r3
    }
 80038be:	4770      	bx	lr

080038c0 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80038c0:	4a12      	ldr	r2, [pc, #72]	@ (800390c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80038c2:	6953      	ldr	r3, [r2, #20]
 80038c4:	03db      	lsls	r3, r3, #15
{
 80038c6:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80038c8:	d51e      	bpl.n	8003908 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80038ca:	2300      	movs	r3, #0
 80038cc:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 80038d0:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 80038d4:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038d8:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038dc:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 80038e0:	f3c3 334e 	ubfx	r3, r3, #13, #15
 80038e4:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038e6:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 80038ea:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038ec:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 80038f0:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 80038f2:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 80038f6:	d2f9      	bcs.n	80038ec <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 80038f8:	3b20      	subs	r3, #32
 80038fa:	f113 0f20 	cmn.w	r3, #32
 80038fe:	d1f2      	bne.n	80038e6 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003900:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003904:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 8003908:	bd70      	pop	{r4, r5, r6, pc}
 800390a:	bf00      	nop
 800390c:	e000ed00 	.word	0xe000ed00

08003910 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003910:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003912:	b131      	cbz	r1, 8003922 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003914:	4b04      	ldr	r3, [pc, #16]	@ (8003928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 8003916:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800391a:	4a04      	ldr	r2, [pc, #16]	@ (800392c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 800391c:	4804      	ldr	r0, [pc, #16]	@ (8003930 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 800391e:	f01c ff67 	bl	80207f0 <__assert_func>
    }
 8003922:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 8003926:	bd08      	pop	{r3, pc}
 8003928:	080226bc 	.word	0x080226bc
 800392c:	080226d0 	.word	0x080226d0
 8003930:	0802285a 	.word	0x0802285a

08003934 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003934:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 8003936:	b131      	cbz	r1, 8003946 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 8003938:	4b06      	ldr	r3, [pc, #24]	@ (8003954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800393a:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 800393e:	4a06      	ldr	r2, [pc, #24]	@ (8003958 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003940:	4806      	ldr	r0, [pc, #24]	@ (800395c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003942:	f01c ff55 	bl	80207f0 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 8003946:	6840      	ldr	r0, [r0, #4]
 8003948:	4611      	mov	r1, r2
 800394a:	6803      	ldr	r3, [r0, #0]
    }
 800394c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4718      	bx	r3
 8003954:	080226bc 	.word	0x080226bc
 8003958:	080228a4 	.word	0x080228a4
 800395c:	0802285a 	.word	0x0802285a

08003960 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003960:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003962:	b129      	cbz	r1, 8003970 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003964:	4b03      	ldr	r3, [pc, #12]	@ (8003974 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 8003966:	2179      	movs	r1, #121	@ 0x79
 8003968:	4a03      	ldr	r2, [pc, #12]	@ (8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800396a:	4804      	ldr	r0, [pc, #16]	@ (800397c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 800396c:	f01c ff40 	bl	80207f0 <__assert_func>
    }
 8003970:	68c0      	ldr	r0, [r0, #12]
 8003972:	bd08      	pop	{r3, pc}
 8003974:	080226bc 	.word	0x080226bc
 8003978:	08022a52 	.word	0x08022a52
 800397c:	0802285a 	.word	0x0802285a

08003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 8003980:	b510      	push	{r4, lr}
 8003982:	4604      	mov	r4, r0
        assert(handle < no_streams);
 8003984:	b129      	cbz	r1, 8003992 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 8003986:	4b19      	ldr	r3, [pc, #100]	@ (80039ec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 8003988:	21a2      	movs	r1, #162	@ 0xa2
 800398a:	4a19      	ldr	r2, [pc, #100]	@ (80039f0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 800398c:	4819      	ldr	r0, [pc, #100]	@ (80039f4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 800398e:	f01c ff2f 	bl	80207f0 <__assert_func>
        switch (cmd)
 8003992:	2a05      	cmp	r2, #5
 8003994:	d815      	bhi.n	80039c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 8003996:	e8df f002 	tbb	[pc, r2]
 800399a:	1103      	.short	0x1103
 800399c:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80039a0:	6840      	ldr	r0, [r0, #4]
 80039a2:	6803      	ldr	r3, [r0, #0]
 80039a4:	691b      	ldr	r3, [r3, #16]
 80039a6:	4798      	blx	r3
 80039a8:	b158      	cbz	r0, 80039c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80039aa:	2301      	movs	r3, #1
 80039ac:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80039b0:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80039b4:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80039b6:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80039ba:	e002      	b.n	80039c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80039bc:	2300      	movs	r3, #0
 80039be:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80039c2:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80039c4:	6203      	str	r3, [r0, #32]
 80039c6:	e7f5      	b.n	80039b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80039c8:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80039ca:	2301      	movs	r3, #1
 80039cc:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 80039d0:	e7f0      	b.n	80039b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 80039d2:	2300      	movs	r3, #0
 80039d4:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 80039d8:	2301      	movs	r3, #1
 80039da:	6203      	str	r3, [r0, #32]
            break;
 80039dc:	e7f1      	b.n	80039c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 80039de:	3b00      	subs	r3, #0
 80039e0:	bf18      	it	ne
 80039e2:	2301      	movne	r3, #1
 80039e4:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 80039e8:	e7eb      	b.n	80039c2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80039ea:	bf00      	nop
 80039ec:	080226bc 	.word	0x080226bc
 80039f0:	08022c07 	.word	0x08022c07
 80039f4:	0802285a 	.word	0x0802285a

080039f8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 80039f8:	b510      	push	{r4, lr}
 80039fa:	460c      	mov	r4, r1
 80039fc:	4611      	mov	r1, r2
 80039fe:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003a00:	b12c      	cbz	r4, 8003a0e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003a02:	4b06      	ldr	r3, [pc, #24]	@ (8003a1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003a04:	2190      	movs	r1, #144	@ 0x90
 8003a06:	4a06      	ldr	r2, [pc, #24]	@ (8003a20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 8003a08:	4806      	ldr	r0, [pc, #24]	@ (8003a24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 8003a0a:	f01c fef1 	bl	80207f0 <__assert_func>
        stream.frameNumber = 0;
 8003a0e:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a10:	6840      	ldr	r0, [r0, #4]
 8003a12:	6803      	ldr	r3, [r0, #0]
    }
 8003a14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003a18:	689b      	ldr	r3, [r3, #8]
 8003a1a:	4718      	bx	r3
 8003a1c:	080226bc 	.word	0x080226bc
 8003a20:	08022ddb 	.word	0x08022ddb
 8003a24:	0802285a 	.word	0x0802285a

08003a28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 8003a28:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003a2a:	b129      	cbz	r1, 8003a38 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003a2c:	4b05      	ldr	r3, [pc, #20]	@ (8003a44 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003a2e:	2182      	movs	r1, #130	@ 0x82
 8003a30:	4a05      	ldr	r2, [pc, #20]	@ (8003a48 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003a32:	4806      	ldr	r0, [pc, #24]	@ (8003a4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003a34:	f01c fedc 	bl	80207f0 <__assert_func>
        stream.tickCount = 0;
 8003a38:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003a3c:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003a40:	bd08      	pop	{r3, pc}
 8003a42:	bf00      	nop
 8003a44:	080226bc 	.word	0x080226bc
 8003a48:	08022fb6 	.word	0x08022fb6
 8003a4c:	0802285a 	.word	0x0802285a

08003a50 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003a50:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003a54:	b510      	push	{r4, lr}
 8003a56:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 8003a58:	b153      	cbz	r3, 8003a70 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 8003a5a:	f04f 31ff 	mov.w	r1, #4294967295
 8003a5e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003a60:	f008 fcfd 	bl	800c45e <osMutexAcquire>
            firstDrawThisFrame = false;
 8003a64:	2300      	movs	r3, #0
 8003a66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 8003a6a:	2301      	movs	r3, #1
 8003a6c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 8003a70:	bd10      	pop	{r4, pc}

08003a72 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 8003a72:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8003a76:	b11a      	cbz	r2, 8003a80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 8003a78:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 8003a7c:	b102      	cbz	r2, 8003a80 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 8003a7e:	6018      	str	r0, [r3, #0]
        }
    }
 8003a80:	4770      	bx	lr
	...

08003a84 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 8003a84:	b510      	push	{r4, lr}
 8003a86:	4604      	mov	r4, r0
 8003a88:	4610      	mov	r0, r2
        assert(handle < no_streams);
 8003a8a:	b129      	cbz	r1, 8003a98 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 8003a8c:	4b13      	ldr	r3, [pc, #76]	@ (8003adc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 8003a8e:	21d0      	movs	r1, #208	@ 0xd0
 8003a90:	4a13      	ldr	r2, [pc, #76]	@ (8003ae0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 8003a92:	4814      	ldr	r0, [pc, #80]	@ (8003ae4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 8003a94:	f01c feac 	bl	80207f0 <__assert_func>
        if (stream.isPlaying)
 8003a98:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a9c:	b133      	cbz	r3, 8003aac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 8003a9e:	4b12      	ldr	r3, [pc, #72]	@ (8003ae8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 8003aa6:	6963      	ldr	r3, [r4, #20]
 8003aa8:	4413      	add	r3, r2
 8003aaa:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 8003aac:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 8003ab0:	b90b      	cbnz	r3, 8003ab6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 8003ab2:	2001      	movs	r0, #1
    }
 8003ab4:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 8003ab6:	68a3      	ldr	r3, [r4, #8]
 8003ab8:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 8003aba:	6803      	ldr	r3, [r0, #0]
 8003abc:	695b      	ldr	r3, [r3, #20]
 8003abe:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 8003ac0:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 8003ac2:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 8003ac6:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 8003aca:	2800      	cmp	r0, #0
 8003acc:	d1f1      	bne.n	8003ab2 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003ace:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d1ee      	bne.n	8003ab4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003ad6:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003ada:	e7eb      	b.n	8003ab4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003adc:	080226bc 	.word	0x080226bc
 8003ae0:	08023172 	.word	0x08023172
 8003ae4:	0802285a 	.word	0x0802285a
 8003ae8:	240248fc 	.word	0x240248fc

08003aec <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003aec:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003aee:	4c1a      	ldr	r4, [pc, #104]	@ (8003b58 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003af0:	4605      	mov	r5, r0
    HAL::endFrame();
 8003af2:	f00a fbc3 	bl	800e27c <_ZN8touchgfx3HAL8endFrameEv>
 8003af6:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003afa:	b913      	cbnz	r3, 8003b02 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003afc:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003b00:	b1ab      	cbz	r3, 8003b2e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003b02:	69e1      	ldr	r1, [r4, #28]
 8003b04:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003b08:	4353      	muls	r3, r2
 8003b0a:	6922      	ldr	r2, [r4, #16]
 8003b0c:	434a      	muls	r2, r1
 8003b0e:	4293      	cmp	r3, r2
 8003b10:	d30d      	bcc.n	8003b2e <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003b12:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003b16:	b138      	cbz	r0, 8003b28 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003b18:	1a9b      	subs	r3, r3, r2
 8003b1a:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003b1e:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003b20:	bf98      	it	ls
 8003b22:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003b26:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003b2e:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003b30:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003b32:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003b36:	f008 fd4a 	bl	800c5ce <osSemaphoreRelease>
        if (uiHasMutex)
 8003b3a:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003b3e:	b12b      	cbz	r3, 8003b4c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003b40:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003b42:	f008 fcaf 	bl	800c4a4 <osMutexRelease>
            uiHasMutex = false;
 8003b46:	2300      	movs	r3, #0
 8003b48:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003b4c:	6868      	ldr	r0, [r5, #4]
 8003b4e:	6803      	ldr	r3, [r0, #0]
}
 8003b50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	4718      	bx	r3
 8003b58:	2400afe8 	.word	0x2400afe8

08003b5c <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b5c:	4b04      	ldr	r3, [pc, #16]	@ (8003b70 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003b5e:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003b66:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003b6a:	f3bf 8f6f 	isb	sy
}
 8003b6e:	4770      	bx	lr
 8003b70:	e000e100 	.word	0xe000e100

08003b74 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b74:	4b02      	ldr	r3, [pc, #8]	@ (8003b80 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003b76:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003b7a:	609a      	str	r2, [r3, #8]
}
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	e000e100 	.word	0xe000e100

08003b84 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b86:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003b88:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003b8c:	b9d8      	cbnz	r0, 8003bc6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003b8e:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b92:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003b94:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003b96:	60d8      	str	r0, [r3, #12]
 8003b98:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003b9a:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003b9e:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ba0:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003ba4:	6158      	str	r0, [r3, #20]
 8003ba6:	6198      	str	r0, [r3, #24]
 8003ba8:	61d8      	str	r0, [r3, #28]
 8003baa:	6218      	str	r0, [r3, #32]
 8003bac:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003bae:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003bb0:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003bb4:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003bb8:	443c      	add	r4, r7
 8003bba:	42a2      	cmp	r2, r4
 8003bbc:	d90a      	bls.n	8003bd4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8003bec <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003bc0:	2152      	movs	r1, #82	@ 0x52
 8003bc2:	4a0b      	ldr	r2, [pc, #44]	@ (8003bf0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003bc4:	e003      	b.n	8003bce <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003bc6:	4b0b      	ldr	r3, [pc, #44]	@ (8003bf4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003bc8:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8003bf8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003bce:	480b      	ldr	r0, [pc, #44]	@ (8003bfc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003bd0:	f01c fe0e 	bl	80207f0 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003bd4:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003bd6:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003bd8:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003bdc:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003be0:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003be2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003be6:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003be8:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003bea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003bec:	080234ca 	.word	0x080234ca
 8003bf0:	08023505 	.word	0x08023505
 8003bf4:	08023313 	.word	0x08023313
 8003bf8:	08023343 	.word	0x08023343
 8003bfc:	0802285a 	.word	0x0802285a

08003c00 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003c00:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003c02:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003c04:	4e12      	ldr	r6, [pc, #72]	@ (8003c50 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003c06:	4604      	mov	r4, r0
 8003c08:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003c0a:	4b12      	ldr	r3, [pc, #72]	@ (8003c54 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003c0c:	6003      	str	r3, [r0, #0]
 8003c0e:	6833      	ldr	r3, [r6, #0]
 8003c10:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003c14:	b10a      	cbz	r2, 8003c1a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003c16:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003c18:	b900      	cbnz	r0, 8003c1c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003c1a:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003c1c:	6803      	ldr	r3, [r0, #0]
 8003c1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c20:	4798      	blx	r3
 8003c22:	1e43      	subs	r3, r0, #1
 8003c24:	425d      	negs	r5, r3
 8003c26:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003c28:	6833      	ldr	r3, [r6, #0]
 8003c2a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003c2c:	b130      	cbz	r0, 8003c3c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003c2e:	6803      	ldr	r3, [r0, #0]
 8003c30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003c32:	4798      	blx	r3
 8003c34:	2801      	cmp	r0, #1
 8003c36:	bf08      	it	eq
 8003c38:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003c3c:	b92d      	cbnz	r5, 8003c4a <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003c3e:	4b06      	ldr	r3, [pc, #24]	@ (8003c58 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003c40:	2127      	movs	r1, #39	@ 0x27
 8003c42:	4a06      	ldr	r2, [pc, #24]	@ (8003c5c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003c44:	4806      	ldr	r0, [pc, #24]	@ (8003c60 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003c46:	f01c fdd3 	bl	80207f0 <__assert_func>
    }
 8003c4a:	4620      	mov	r0, r4
 8003c4c:	bd70      	pop	{r4, r5, r6, pc}
 8003c4e:	bf00      	nop
 8003c50:	240248fc 	.word	0x240248fc
 8003c54:	080237b8 	.word	0x080237b8
 8003c58:	080236a8 	.word	0x080236a8
 8003c5c:	08023706 	.word	0x08023706
 8003c60:	0802373f 	.word	0x0802373f

08003c64 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003c64:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003c66:	4e24      	ldr	r6, [pc, #144]	@ (8003cf8 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003c68:	6835      	ldr	r5, [r6, #0]
 8003c6a:	f3bf 8f5b 	dmb	ish
 8003c6e:	f015 0501 	ands.w	r5, r5, #1
 8003c72:	d13f      	bne.n	8003cf4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003c74:	4630      	mov	r0, r6
 8003c76:	f01c fa44 	bl	8020102 <__cxa_guard_acquire>
 8003c7a:	2800      	cmp	r0, #0
 8003c7c:	d03a      	beq.n	8003cf4 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003c7e:	4c1f      	ldr	r4, [pc, #124]	@ (8003cfc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003c80:	4b1f      	ldr	r3, [pc, #124]	@ (8003d00 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003c82:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003c86:	6125      	str	r5, [r4, #16]
 8003c88:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003c8a:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003c8c:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003c8e:	e9c4 3500 	strd	r3, r5, [r4]
 8003c92:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003c96:	f00f ffc0 	bl	8013c1a <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003c9a:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003c9e:	f00c fd13 	bl	80106c8 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003ca2:	4b18      	ldr	r3, [pc, #96]	@ (8003d04 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003ca4:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003ca6:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003ca8:	4b17      	ldr	r3, [pc, #92]	@ (8003d08 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003caa:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003cae:	f7ff ffa7 	bl	8003c00 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003cb2:	4b16      	ldr	r3, [pc, #88]	@ (8003d0c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003cb4:	4816      	ldr	r0, [pc, #88]	@ (8003d10 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003cb6:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003cba:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003cbc:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003cc0:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003cc4:	2364      	movs	r3, #100	@ 0x64
 8003cc6:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003cca:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003cce:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003cd8:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003cdc:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003ce0:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003ce4:	4b0b      	ldr	r3, [pc, #44]	@ (8003d14 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003ce6:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003cea:	f01c fd9f 	bl	802082c <atexit>
 8003cee:	4630      	mov	r0, r6
 8003cf0:	f01c fa13 	bl	802011a <__cxa_guard_release>
}
 8003cf4:	4801      	ldr	r0, [pc, #4]	@ (8003cfc <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003cf6:	bd70      	pop	{r4, r5, r6, pc}
 8003cf8:	2400af28 	.word	0x2400af28
 8003cfc:	2400af2c 	.word	0x2400af2c
 8003d00:	080244c4 	.word	0x080244c4
 8003d04:	080237d8 	.word	0x080237d8
 8003d08:	08023850 	.word	0x08023850
 8003d0c:	08024510 	.word	0x08024510
 8003d10:	080037c9 	.word	0x080037c9
 8003d14:	08024548 	.word	0x08024548

08003d18 <_GLOBAL__sub_I_mjpegdecoder1>:
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
}
 8003d18:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003d1a:	4814      	ldr	r0, [pc, #80]	@ (8003d6c <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d1c:	2500      	movs	r5, #0
 8003d1e:	f7fe fc53 	bl	80025c8 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d22:	4c13      	ldr	r4, [pc, #76]	@ (8003d70 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003d24:	4b13      	ldr	r3, [pc, #76]	@ (8003d74 <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d26:	462a      	mov	r2, r5
 8003d28:	4629      	mov	r1, r5
 8003d2a:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d2c:	6023      	str	r3, [r4, #0]
 8003d2e:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d32:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d34:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d36:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d38:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003d3c:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d40:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d44:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003d48:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d4c:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003d50:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003d54:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d58:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d5c:	f008 fbc1 	bl	800c4e2 <osSemaphoreNew>
 8003d60:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003d62:	4628      	mov	r0, r5
 8003d64:	f008 fb46 	bl	800c3f4 <osMutexNew>
 8003d68:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003d6a:	bd38      	pop	{r3, r4, r5, pc}
 8003d6c:	2400b030 	.word	0x2400b030
 8003d70:	2400afe8 	.word	0x2400afe8
 8003d74:	0802389c 	.word	0x0802389c

08003d78 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId LARGE = 1;   // verdana_40_4bpp
    static const touchgfx::FontId SMALL = 2;   // verdana_10_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d78:	4770      	bx	lr

08003d7a <_ZN23ApplicationFontProviderD0Ev>:
 8003d7a:	b510      	push	{r4, lr}
 8003d7c:	4604      	mov	r4, r0
 8003d7e:	2104      	movs	r1, #4
 8003d80:	f01c f9bd 	bl	80200fe <_ZdlPvj>
 8003d84:	4620      	mov	r0, r4
 8003d86:	bd10      	pop	{r4, pc}

08003d88 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
    switch (typography)
 8003d88:	2901      	cmp	r1, #1
{
 8003d8a:	b508      	push	{r3, lr}
    switch (typography)
 8003d8c:	d006      	beq.n	8003d9c <_ZN23ApplicationFontProvider7getFontEt+0x14>
 8003d8e:	2902      	cmp	r1, #2
 8003d90:	d008      	beq.n	8003da4 <_ZN23ApplicationFontProvider7getFontEt+0x1c>
 8003d92:	b959      	cbnz	r1, 8003dac <_ZN23ApplicationFontProvider7getFontEt+0x24>
    {
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d94:	f000 fb54 	bl	8004440 <_ZN17TypedTextDatabase8getFontsEv>
 8003d98:	6800      	ldr	r0, [r0, #0]
        // verdana_10_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
    default:
        return 0;
    }
}
 8003d9a:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d9c:	f000 fb50 	bl	8004440 <_ZN17TypedTextDatabase8getFontsEv>
 8003da0:	6840      	ldr	r0, [r0, #4]
 8003da2:	e7fa      	b.n	8003d9a <_ZN23ApplicationFontProvider7getFontEt+0x12>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003da4:	f000 fb4c 	bl	8004440 <_ZN17TypedTextDatabase8getFontsEv>
 8003da8:	6880      	ldr	r0, [r0, #8]
 8003daa:	e7f6      	b.n	8003d9a <_ZN23ApplicationFontProvider7getFontEt+0x12>
    switch (typography)
 8003dac:	2000      	movs	r0, #0
 8003dae:	e7f4      	b.n	8003d9a <_ZN23ApplicationFontProvider7getFontEt+0x12>

08003db0 <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003db0:	4800      	ldr	r0, [pc, #0]	@ (8003db4 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003db2:	4770      	bx	lr
 8003db4:	080238ec 	.word	0x080238ec

08003db8 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003db8:	2001      	movs	r0, #1
 8003dba:	4770      	bx	lr

08003dbc <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003dbc:	b513      	push	{r0, r1, r4, lr}
 8003dbe:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003dc0:	b151      	cbz	r1, 8003dd8 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dc2:	6803      	ldr	r3, [r0, #0]
 8003dc4:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003dc6:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003dc8:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dcc:	689c      	ldr	r4, [r3, #8]
 8003dce:	f10d 0303 	add.w	r3, sp, #3
 8003dd2:	47a0      	blx	r4
        return glyph;
    }
 8003dd4:	b002      	add	sp, #8
 8003dd6:	bd10      	pop	{r4, pc}
            return 0;
 8003dd8:	4608      	mov	r0, r1
 8003dda:	e7fb      	b.n	8003dd4 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003ddc <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003ddc:	89c0      	ldrh	r0, [r0, #14]
 8003dde:	4770      	bx	lr

08003de0 <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003de0:	8a00      	ldrh	r0, [r0, #16]
 8003de2:	4770      	bx	lr

08003de4 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003de4:	88c0      	ldrh	r0, [r0, #6]
 8003de6:	4770      	bx	lr

08003de8 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003de8:	8880      	ldrh	r0, [r0, #4]
 8003dea:	4770      	bx	lr

08003dec <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003dec:	7a80      	ldrb	r0, [r0, #10]
    }
 8003dee:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003df2:	4770      	bx	lr

08003df4 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003df4:	7a80      	ldrb	r0, [r0, #10]
    }
 8003df6:	09c0      	lsrs	r0, r0, #7
 8003df8:	4770      	bx	lr

08003dfa <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003dfa:	2000      	movs	r0, #0
 8003dfc:	4770      	bx	lr
	...

08003e00 <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003e00:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003e08 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	00000000 	.word	0x00000000

08003e0c <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003e0c:	4770      	bx	lr

08003e0e <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003e0e:	4770      	bx	lr

08003e10 <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003e10:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003e14:	6808      	ldr	r0, [r1, #0]
 8003e16:	6849      	ldr	r1, [r1, #4]
 8003e18:	c303      	stmia	r3!, {r0, r1}
    }
 8003e1a:	4770      	bx	lr

08003e1c <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003e1c:	4770      	bx	lr

08003e1e <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003e1e:	4770      	bx	lr

08003e20 <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003e20:	6041      	str	r1, [r0, #4]
    }
 8003e22:	4770      	bx	lr

08003e24 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003e24:	4770      	bx	lr
	...

08003e28 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e28:	4b06      	ldr	r3, [pc, #24]	@ (8003e44 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003e2a:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003e2e:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003e32:	2300      	movs	r3, #0
 8003e34:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// WelcomeScreen

void FrontendApplicationBase::gotoWelcomeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoWelcomeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003e38:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003e3c:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoWelcomeScreenScreenNoTransition();
    }
 8003e40:	4770      	bx	lr
 8003e42:	bf00      	nop
 8003e44:	08003ee9 	.word	0x08003ee9

08003e48 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003e48:	2301      	movs	r3, #1
 8003e4a:	7203      	strb	r3, [r0, #8]
    }
 8003e4c:	4770      	bx	lr

08003e4e <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003e4e:	4770      	bx	lr

08003e50 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003e50:	4770      	bx	lr

08003e52 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003e52:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003e54:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003e56:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003e58:	68c2      	ldr	r2, [r0, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	1054      	asrs	r4, r2, #1
 8003e5e:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003e62:	07d2      	lsls	r2, r2, #31
 8003e64:	bf48      	it	mi
 8003e66:	590a      	ldrmi	r2, [r1, r4]
    }
 8003e68:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003e6c:	bf48      	it	mi
 8003e6e:	58d3      	ldrmi	r3, [r2, r3]
 8003e70:	4718      	bx	r3

08003e72 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003e72:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003e74:	6840      	ldr	r0, [r0, #4]
 8003e76:	b130      	cbz	r0, 8003e86 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003e78:	689a      	ldr	r2, [r3, #8]
 8003e7a:	b91a      	cbnz	r2, 8003e84 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003e7c:	68d8      	ldr	r0, [r3, #12]
 8003e7e:	f000 0001 	and.w	r0, r0, #1
 8003e82:	4770      	bx	lr
 8003e84:	2001      	movs	r0, #1
    }
 8003e86:	4770      	bx	lr

08003e88 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e88:	b510      	push	{r4, lr}
 8003e8a:	4604      	mov	r4, r0
 8003e8c:	210c      	movs	r1, #12
 8003e8e:	f01c f936 	bl	80200fe <_ZdlPvj>
 8003e92:	4620      	mov	r0, r4
 8003e94:	bd10      	pop	{r4, pc}

08003e96 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e96:	b510      	push	{r4, lr}
 8003e98:	4604      	mov	r4, r0
 8003e9a:	2110      	movs	r1, #16
 8003e9c:	f01c f92f 	bl	80200fe <_ZdlPvj>
 8003ea0:	4620      	mov	r0, r4
 8003ea2:	bd10      	pop	{r4, pc}

08003ea4 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003ea4:	b510      	push	{r4, lr}
 8003ea6:	4604      	mov	r4, r0
 8003ea8:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003eac:	f01c f927 	bl	80200fe <_ZdlPvj>
 8003eb0:	4620      	mov	r0, r4
 8003eb2:	bd10      	pop	{r4, pc}

08003eb4 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003eb4:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003eb6:	f00e fb23 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 8003eba:	6803      	ldr	r3, [r0, #0]
    }
 8003ebc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ec0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ec2:	4718      	bx	r3

08003ec4 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ec4:	b510      	push	{r4, lr}
 8003ec6:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003ec8:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003ecc:	b158      	cbz	r0, 8003ee6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003ece:	6803      	ldr	r3, [r0, #0]
 8003ed0:	68db      	ldr	r3, [r3, #12]
 8003ed2:	4798      	blx	r3
 8003ed4:	b138      	cbz	r0, 8003ee6 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003ed6:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003eda:	6803      	ldr	r3, [r0, #0]
 8003edc:	689b      	ldr	r3, [r3, #8]
 8003ede:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003ee0:	2300      	movs	r3, #0
 8003ee2:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003ee6:	bd10      	pop	{r4, pc}

08003ee8 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoWelcomeScreenScreenNoTransitionImpl()
{
 8003ee8:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<WelcomeScreenView, WelcomeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003eec:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003ef0:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003ef2:	68b0      	ldr	r0, [r6, #8]
 8003ef4:	6803      	ldr	r3, [r0, #0]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4798      	blx	r3
 8003efa:	286b      	cmp	r0, #107	@ 0x6b
 8003efc:	d805      	bhi.n	8003f0a <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x22>
 8003efe:	4b44      	ldr	r3, [pc, #272]	@ (8004010 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x128>)
 8003f00:	21a3      	movs	r1, #163	@ 0xa3
 8003f02:	4a44      	ldr	r2, [pc, #272]	@ (8004014 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f04:	4844      	ldr	r0, [pc, #272]	@ (8004018 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x130>)
 8003f06:	f01c fc73 	bl	80207f0 <__assert_func>
 8003f0a:	6870      	ldr	r0, [r6, #4]
 8003f0c:	6803      	ldr	r3, [r0, #0]
 8003f0e:	6a1b      	ldr	r3, [r3, #32]
 8003f10:	4798      	blx	r3
 8003f12:	280f      	cmp	r0, #15
 8003f14:	d803      	bhi.n	8003f1e <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x36>
 8003f16:	4b41      	ldr	r3, [pc, #260]	@ (800401c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x134>)
 8003f18:	21a4      	movs	r1, #164	@ 0xa4
 8003f1a:	4a3e      	ldr	r2, [pc, #248]	@ (8004014 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
 8003f1c:	e7f2      	b.n	8003f04 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f1e:	68f0      	ldr	r0, [r6, #12]
 8003f20:	6803      	ldr	r3, [r0, #0]
 8003f22:	6a1b      	ldr	r3, [r3, #32]
 8003f24:	4798      	blx	r3
 8003f26:	280b      	cmp	r0, #11
 8003f28:	d803      	bhi.n	8003f32 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x4a>
 8003f2a:	4b3d      	ldr	r3, [pc, #244]	@ (8004020 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x138>)
 8003f2c:	21a5      	movs	r1, #165	@ 0xa5
 8003f2e:	4a39      	ldr	r2, [pc, #228]	@ (8004014 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
 8003f30:	e7e8      	b.n	8003f04 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003f32:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004028 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8003f36:	f00e fae3 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f3a:	3004      	adds	r0, #4
 8003f3c:	f00e fb05 	bl	801254a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f40:	f8d9 0000 	ldr.w	r0, [r9]
 8003f44:	b110      	cbz	r0, 8003f4c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003f46:	6803      	ldr	r3, [r0, #0]
 8003f48:	68db      	ldr	r3, [r3, #12]
 8003f4a:	4798      	blx	r3
    if (*currentTrans)
 8003f4c:	f8d9 0000 	ldr.w	r0, [r9]
 8003f50:	b110      	cbz	r0, 8003f58 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003f52:	6803      	ldr	r3, [r0, #0]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	4798      	blx	r3
    if (*currentScreen)
 8003f58:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 800402c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x144>
 8003f5c:	f8d8 0000 	ldr.w	r0, [r8]
 8003f60:	b110      	cbz	r0, 8003f68 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003f62:	6803      	ldr	r3, [r0, #0]
 8003f64:	695b      	ldr	r3, [r3, #20]
 8003f66:	4798      	blx	r3
    if (*currentPresenter)
 8003f68:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f6c:	b110      	cbz	r0, 8003f74 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003f6e:	6803      	ldr	r3, [r0, #0]
 8003f70:	685b      	ldr	r3, [r3, #4]
 8003f72:	4798      	blx	r3
    if (*currentScreen)
 8003f74:	f8d8 0000 	ldr.w	r0, [r8]
 8003f78:	b110      	cbz	r0, 8003f80 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003f7a:	6803      	ldr	r3, [r0, #0]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	4798      	blx	r3
    if (*currentPresenter)
 8003f80:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f84:	b110      	cbz	r0, 8003f8c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003f86:	6803      	ldr	r3, [r0, #0]
 8003f88:	689b      	ldr	r3, [r3, #8]
 8003f8a:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f8c:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003f8e:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003f90:	f04f 0b00 	mov.w	fp, #0
 8003f94:	6803      	ldr	r3, [r0, #0]
 8003f96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f98:	4798      	blx	r3
 8003f9a:	4b22      	ldr	r3, [pc, #136]	@ (8004024 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x13c>)
 8003f9c:	4604      	mov	r4, r0
 8003f9e:	f8c0 b004 	str.w	fp, [r0, #4]
 8003fa2:	f880 b008 	strb.w	fp, [r0, #8]
 8003fa6:	4659      	mov	r1, fp
 8003fa8:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003faa:	68b0      	ldr	r0, [r6, #8]
 8003fac:	6803      	ldr	r3, [r0, #0]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fb0:	4798      	blx	r3
 8003fb2:	4605      	mov	r5, r0
 8003fb4:	f000 faea 	bl	800458c <_ZN17WelcomeScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fb8:	6870      	ldr	r0, [r6, #4]
 8003fba:	4659      	mov	r1, fp
 8003fbc:	6803      	ldr	r3, [r0, #0]
 8003fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc0:	4798      	blx	r3
 8003fc2:	4606      	mov	r6, r0
 8003fc4:	4629      	mov	r1, r5
 8003fc6:	f000 fac1 	bl	800454c <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fca:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fcc:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fd0:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fd2:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fd6:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003fda:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003fde:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003fe0:	f8c6 a008 	str.w	sl, [r6, #8]
 8003fe4:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003fe6:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003fe8:	4798      	blx	r3
    newPresenter->activate();
 8003fea:	6833      	ldr	r3, [r6, #0]
 8003fec:	4630      	mov	r0, r6
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003ff2:	4621      	mov	r1, r4
 8003ff4:	4628      	mov	r0, r5
 8003ff6:	f010 fa73 	bl	80144e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003ffa:	6823      	ldr	r3, [r4, #0]
 8003ffc:	4620      	mov	r0, r4
 8003ffe:	691b      	ldr	r3, [r3, #16]
 8004000:	4798      	blx	r3
    newTransition->invalidate();
 8004002:	6823      	ldr	r3, [r4, #0]
 8004004:	4620      	mov	r0, r4
 8004006:	695b      	ldr	r3, [r3, #20]
}
 8004008:	b001      	add	sp, #4
 800400a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400e:	4718      	bx	r3
 8004010:	08023900 	.word	0x08023900
 8004014:	0802398e 	.word	0x0802398e
 8004018:	08023a6c 	.word	0x08023a6c
 800401c:	08023ac1 	.word	0x08023ac1
 8004020:	08023b64 	.word	0x08023b64
 8004024:	08023c7c 	.word	0x08023c7c
 8004028:	24024944 	.word	0x24024944
 800402c:	24024940 	.word	0x24024940

08004030 <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8004030:	4b04      	ldr	r3, [pc, #16]	@ (8004044 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004038:	b10a      	cbz	r2, 800403e <_ZN8touchgfx3HAL3lcdEv+0xe>
 800403a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 800403c:	b900      	cbnz	r0, 8004040 <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800403e:	6898      	ldr	r0, [r3, #8]
    }
 8004040:	4770      	bx	lr
 8004042:	bf00      	nop
 8004044:	240248fc 	.word	0x240248fc

08004048 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004048:	b570      	push	{r4, r5, r6, lr}
 800404a:	4616      	mov	r6, r2
 800404c:	4604      	mov	r4, r0
 800404e:	460d      	mov	r5, r1
          pendingScreenTransitionCallback(0)
 8004050:	f00e fb1c 	bl	801268c <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004054:	4b10      	ldr	r3, [pc, #64]	@ (8004098 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x50>)
        : currentPresenter(0),
 8004056:	2100      	movs	r1, #0
        instance = this;
 8004058:	601c      	str	r4, [r3, #0]
      model(m)
 800405a:	4b10      	ldr	r3, [pc, #64]	@ (800409c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x54>)
 800405c:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800405e:	4b10      	ldr	r3, [pc, #64]	@ (80040a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
 8004060:	e9c4 3151 	strd	r3, r1, [r4, #324]	@ 0x144
        return instance;
 8004064:	4b0f      	ldr	r3, [pc, #60]	@ (80040a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 8004066:	6818      	ldr	r0, [r3, #0]
 8004068:	e9c4 1153 	strd	r1, r1, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800406c:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800406e:	e9c4 114f 	strd	r1, r1, [r4, #316]	@ 0x13c
 8004072:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004074:	e9c4 6555 	strd	r6, r5, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004078:	4798      	blx	r3
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800407a:	f7ff ffd9 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800407e:	f016 f9d2 	bl	801a426 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004082:	f7ff ffd5 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 8004086:	f016 fa45 	bl	801a514 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800408a:	f7ff ffd1 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800408e:	f016 fa4d 	bl	801a52c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8004092:	4620      	mov	r0, r4
 8004094:	bd70      	pop	{r4, r5, r6, pc}
 8004096:	bf00      	nop
 8004098:	24024950 	.word	0x24024950
 800409c:	08023c28 	.word	0x08023c28
 80040a0:	08023c10 	.word	0x08023c10
 80040a4:	240248fc 	.word	0x240248fc

080040a8 <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80040a8:	4b06      	ldr	r3, [pc, #24]	@ (80040c4 <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv+0x1c>)
 80040aa:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040ae:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040b2:	2300      	movs	r3, #0
 80040b4:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040b8:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040bc:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040c0:	4770      	bx	lr
 80040c2:	bf00      	nop
 80040c4:	08003ee9 	.word	0x08003ee9

080040c8 <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80040c8:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80040ca:	4770      	bx	lr

080040cc <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80040cc:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80040ce:	4770      	bx	lr

080040d0 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80040d0:	4770      	bx	lr

080040d2 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80040d2:	888b      	ldrh	r3, [r1, #4]
 80040d4:	69c0      	ldr	r0, [r0, #28]
 80040d6:	0adb      	lsrs	r3, r3, #11
 80040d8:	680a      	ldr	r2, [r1, #0]
 80040da:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80040de:	4410      	add	r0, r2
 80040e0:	4770      	bx	lr

080040e2 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80040e2:	b510      	push	{r4, lr}
 80040e4:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80040e6:	b1ba      	cbz	r2, 8004118 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80040e8:	7b10      	ldrb	r0, [r2, #12]
 80040ea:	b168      	cbz	r0, 8004108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80040ec:	7b53      	ldrb	r3, [r2, #13]
 80040ee:	7ad2      	ldrb	r2, [r2, #11]
 80040f0:	021b      	lsls	r3, r3, #8
 80040f2:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80040f6:	431a      	orrs	r2, r3
 80040f8:	6a23      	ldr	r3, [r4, #32]
 80040fa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 80040fe:	881a      	ldrh	r2, [r3, #0]
 8004100:	428a      	cmp	r2, r1
 8004102:	d102      	bne.n	800410a <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004104:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 8004108:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800410a:	d805      	bhi.n	8004118 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 800410c:	3801      	subs	r0, #1
 800410e:	3304      	adds	r3, #4
 8004110:	b280      	uxth	r0, r0
 8004112:	2800      	cmp	r0, #0
 8004114:	d1f3      	bne.n	80040fe <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 8004116:	e7f7      	b.n	8004108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 8004118:	2000      	movs	r0, #0
 800411a:	e7f5      	b.n	8004108 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

0800411c <_ZN8touchgfx13GeneratedFontD0Ev>:
 800411c:	b510      	push	{r4, lr}
 800411e:	4604      	mov	r4, r0
 8004120:	212c      	movs	r1, #44	@ 0x2c
 8004122:	f01b ffec 	bl	80200fe <_ZdlPvj>
 8004126:	4620      	mov	r0, r4
 8004128:	bd10      	pop	{r4, pc}
	...

0800412c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 800412c:	b530      	push	{r4, r5, lr}
 800412e:	b08b      	sub	sp, #44	@ 0x2c
 8004130:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004132:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 8004136:	9508      	str	r5, [sp, #32]
 8004138:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 800413c:	9507      	str	r5, [sp, #28]
 800413e:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004142:	9506      	str	r5, [sp, #24]
 8004144:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 8004148:	9505      	str	r5, [sp, #20]
 800414a:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800414e:	9504      	str	r5, [sp, #16]
 8004150:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004154:	9503      	str	r5, [sp, #12]
 8004156:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800415a:	9502      	str	r5, [sp, #8]
 800415c:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004160:	9501      	str	r5, [sp, #4]
 8004162:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8004166:	9500      	str	r5, [sp, #0]
 8004168:	f00f fe14 	bl	8013d94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 800416c:	4b06      	ldr	r3, [pc, #24]	@ (8004188 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 800416e:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004170:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8004172:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004174:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 8004176:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8004178:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800417a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800417c:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 800417e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004180:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004182:	b00b      	add	sp, #44	@ 0x2c
 8004184:	bd30      	pop	{r4, r5, pc}
 8004186:	bf00      	nop
 8004188:	08023ca0 	.word	0x08023ca0

0800418c <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 800418c:	4770      	bx	lr

0800418e <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 800418e:	4770      	bx	lr

08004190 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004190:	4770      	bx	lr

08004192 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004192:	4770      	bx	lr

08004194 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004194:	4770      	bx	lr

08004196 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 8004196:	4770      	bx	lr

08004198 <_Z23getFont_verdana_10_4bppv>:
{
 8004198:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800419a:	4d16      	ldr	r5, [pc, #88]	@ (80041f4 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 800419c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800419e:	682c      	ldr	r4, [r5, #0]
 80041a0:	f3bf 8f5b 	dmb	ish
 80041a4:	f014 0401 	ands.w	r4, r4, #1
 80041a8:	d120      	bne.n	80041ec <_Z23getFont_verdana_10_4bppv+0x54>
 80041aa:	4628      	mov	r0, r5
 80041ac:	f01b ffa9 	bl	8020102 <__cxa_guard_acquire>
 80041b0:	b1e0      	cbz	r0, 80041ec <_Z23getFont_verdana_10_4bppv+0x54>
 80041b2:	233f      	movs	r3, #63	@ 0x3f
 80041b4:	2201      	movs	r2, #1
 80041b6:	4910      	ldr	r1, [pc, #64]	@ (80041f8 <_Z23getFont_verdana_10_4bppv+0x60>)
 80041b8:	9309      	str	r3, [sp, #36]	@ 0x24
 80041ba:	4b10      	ldr	r3, [pc, #64]	@ (80041fc <_Z23getFont_verdana_10_4bppv+0x64>)
 80041bc:	4810      	ldr	r0, [pc, #64]	@ (8004200 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041be:	9308      	str	r3, [sp, #32]
 80041c0:	4b10      	ldr	r3, [pc, #64]	@ (8004204 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80041c2:	940a      	str	r4, [sp, #40]	@ 0x28
 80041c4:	9405      	str	r4, [sp, #20]
 80041c6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80041ca:	2304      	movs	r3, #4
 80041cc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041d0:	230a      	movs	r3, #10
 80041d2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80041d6:	9300      	str	r3, [sp, #0]
 80041d8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041dc:	f7ff ffa6 	bl	800412c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041e0:	4809      	ldr	r0, [pc, #36]	@ (8004208 <_Z23getFont_verdana_10_4bppv+0x70>)
 80041e2:	f01c fb23 	bl	802082c <atexit>
 80041e6:	4628      	mov	r0, r5
 80041e8:	f01b ff97 	bl	802011a <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80041ec:	4804      	ldr	r0, [pc, #16]	@ (8004200 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041ee:	b00f      	add	sp, #60	@ 0x3c
 80041f0:	bd30      	pop	{r4, r5, pc}
 80041f2:	bf00      	nop
 80041f4:	2400b078 	.word	0x2400b078
 80041f8:	08024d54 	.word	0x08024d54
 80041fc:	08024d84 	.word	0x08024d84
 8004200:	2400b07c 	.word	0x2400b07c
 8004204:	08024d90 	.word	0x08024d90
 8004208:	08004197 	.word	0x08004197

0800420c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800420c:	4770      	bx	lr
	...

08004210 <_Z23getFont_verdana_20_4bppv>:
{
 8004210:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004212:	4d16      	ldr	r5, [pc, #88]	@ (800426c <_Z23getFont_verdana_20_4bppv+0x5c>)
{
 8004214:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 1, 20, 20, 0, 0, 4, 1, 0, 0, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004216:	682c      	ldr	r4, [r5, #0]
 8004218:	f3bf 8f5b 	dmb	ish
 800421c:	f014 0401 	ands.w	r4, r4, #1
 8004220:	d120      	bne.n	8004264 <_Z23getFont_verdana_20_4bppv+0x54>
 8004222:	4628      	mov	r0, r5
 8004224:	f01b ff6d 	bl	8020102 <__cxa_guard_acquire>
 8004228:	b1e0      	cbz	r0, 8004264 <_Z23getFont_verdana_20_4bppv+0x54>
 800422a:	233f      	movs	r3, #63	@ 0x3f
 800422c:	2201      	movs	r2, #1
 800422e:	4910      	ldr	r1, [pc, #64]	@ (8004270 <_Z23getFont_verdana_20_4bppv+0x60>)
 8004230:	9309      	str	r3, [sp, #36]	@ 0x24
 8004232:	4b10      	ldr	r3, [pc, #64]	@ (8004274 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004234:	4810      	ldr	r0, [pc, #64]	@ (8004278 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004236:	9308      	str	r3, [sp, #32]
 8004238:	4b10      	ldr	r3, [pc, #64]	@ (800427c <_Z23getFont_verdana_20_4bppv+0x6c>)
 800423a:	940a      	str	r4, [sp, #40]	@ 0x28
 800423c:	9405      	str	r4, [sp, #20]
 800423e:	e9cd 4306 	strd	r4, r3, [sp, #24]
 8004242:	2304      	movs	r3, #4
 8004244:	e9cd 3203 	strd	r3, r2, [sp, #12]
 8004248:	2314      	movs	r3, #20
 800424a:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	e9cd 4401 	strd	r4, r4, [sp, #4]
 8004254:	f7ff ff6a 	bl	800412c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004258:	4809      	ldr	r0, [pc, #36]	@ (8004280 <_Z23getFont_verdana_20_4bppv+0x70>)
 800425a:	f01c fae7 	bl	802082c <atexit>
 800425e:	4628      	mov	r0, r5
 8004260:	f01b ff5b 	bl	802011a <__cxa_guard_release>
    return verdana_20_4bpp;
}
 8004264:	4804      	ldr	r0, [pc, #16]	@ (8004278 <_Z23getFont_verdana_20_4bppv+0x68>)
 8004266:	b00f      	add	sp, #60	@ 0x3c
 8004268:	bd30      	pop	{r4, r5, pc}
 800426a:	bf00      	nop
 800426c:	2400b0a8 	.word	0x2400b0a8
 8004270:	08024d64 	.word	0x08024d64
 8004274:	08024d88 	.word	0x08024d88
 8004278:	2400b0ac 	.word	0x2400b0ac
 800427c:	08024d94 	.word	0x08024d94
 8004280:	0800420d 	.word	0x0800420d

08004284 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004284:	4770      	bx	lr
	...

08004288 <_Z23getFont_verdana_40_4bppv>:
{
 8004288:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800428a:	4d16      	ldr	r5, [pc, #88]	@ (80042e4 <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 800428c:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800428e:	682c      	ldr	r4, [r5, #0]
 8004290:	f3bf 8f5b 	dmb	ish
 8004294:	f014 0401 	ands.w	r4, r4, #1
 8004298:	d120      	bne.n	80042dc <_Z23getFont_verdana_40_4bppv+0x54>
 800429a:	4628      	mov	r0, r5
 800429c:	f01b ff31 	bl	8020102 <__cxa_guard_acquire>
 80042a0:	b1e0      	cbz	r0, 80042dc <_Z23getFont_verdana_40_4bppv+0x54>
 80042a2:	233f      	movs	r3, #63	@ 0x3f
 80042a4:	2201      	movs	r2, #1
 80042a6:	4910      	ldr	r1, [pc, #64]	@ (80042e8 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80042aa:	4b10      	ldr	r3, [pc, #64]	@ (80042ec <_Z23getFont_verdana_40_4bppv+0x64>)
 80042ac:	4810      	ldr	r0, [pc, #64]	@ (80042f0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042ae:	9308      	str	r3, [sp, #32]
 80042b0:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042b2:	940a      	str	r4, [sp, #40]	@ 0x28
 80042b4:	9405      	str	r4, [sp, #20]
 80042b6:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80042ba:	2304      	movs	r3, #4
 80042bc:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80042c0:	2328      	movs	r3, #40	@ 0x28
 80042c2:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80042c6:	9300      	str	r3, [sp, #0]
 80042c8:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042cc:	f7ff ff2e 	bl	800412c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042d0:	4809      	ldr	r0, [pc, #36]	@ (80042f8 <_Z23getFont_verdana_40_4bppv+0x70>)
 80042d2:	f01c faab 	bl	802082c <atexit>
 80042d6:	4628      	mov	r0, r5
 80042d8:	f01b ff1f 	bl	802011a <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80042dc:	4804      	ldr	r0, [pc, #16]	@ (80042f0 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042de:	b00f      	add	sp, #60	@ 0x3c
 80042e0:	bd30      	pop	{r4, r5, pc}
 80042e2:	bf00      	nop
 80042e4:	2400b0d8 	.word	0x2400b0d8
 80042e8:	08024d74 	.word	0x08024d74
 80042ec:	08024d8c 	.word	0x08024d8c
 80042f0:	2400b0dc 	.word	0x2400b0dc
 80042f4:	08024d98 	.word	0x08024d98
 80042f8:	08004285 	.word	0x08004285

080042fc <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 80042fc:	2000      	movs	r0, #0
 80042fe:	4770      	bx	lr

08004300 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004300:	2000      	movs	r0, #0
 8004302:	4770      	bx	lr

08004304 <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004304:	b40e      	push	{r1, r2, r3}
 8004306:	b503      	push	{r0, r1, lr}
 8004308:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800430a:	2100      	movs	r1, #0
{
 800430c:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004310:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004312:	f00f f843 	bl	801339c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004316:	b002      	add	sp, #8
 8004318:	f85d eb04 	ldr.w	lr, [sp], #4
 800431c:	b003      	add	sp, #12
 800431e:	4770      	bx	lr

08004320 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004320:	b40c      	push	{r2, r3}
 8004322:	b507      	push	{r0, r1, r2, lr}
 8004324:	ab04      	add	r3, sp, #16
 8004326:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 800432a:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 800432c:	f00f f836 	bl	801339c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004330:	b003      	add	sp, #12
 8004332:	f85d eb04 	ldr.w	lr, [sp], #4
 8004336:	b002      	add	sp, #8
 8004338:	4770      	bx	lr
	...

0800433c <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 800433c:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 800433e:	b510      	push	{r4, lr}
 8004340:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 8004342:	b373      	cbz	r3, 80043a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 8004344:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 8004346:	b92b      	cbnz	r3, 8004354 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004348:	4b18      	ldr	r3, [pc, #96]	@ (80043ac <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 800434a:	21c5      	movs	r1, #197	@ 0xc5
 800434c:	4a18      	ldr	r2, [pc, #96]	@ (80043b0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 800434e:	4819      	ldr	r0, [pc, #100]	@ (80043b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004350:	f01c fa4e 	bl	80207f0 <__assert_func>
            return buffer[pos];
 8004354:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8004356:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 800435a:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 800435c:	b30b      	cbz	r3, 80043a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 800435e:	f010 fdb9 	bl	8014ed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 8004362:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8004364:	2b01      	cmp	r3, #1
 8004366:	d803      	bhi.n	8004370 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004368:	4b13      	ldr	r3, [pc, #76]	@ (80043b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 800436a:	21cb      	movs	r1, #203	@ 0xcb
 800436c:	4a13      	ldr	r2, [pc, #76]	@ (80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 800436e:	e7ee      	b.n	800434e <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004370:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 8004372:	f640 103f 	movw	r0, #2367	@ 0x93f
 8004376:	1c53      	adds	r3, r2, #1
 8004378:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 800437a:	2b09      	cmp	r3, #9
 800437c:	4619      	mov	r1, r3
 800437e:	bf88      	it	hi
 8004380:	f1a3 010a 	subhi.w	r1, r3, #10
 8004384:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004388:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 800438a:	4281      	cmp	r1, r0
 800438c:	d109      	bne.n	80043a2 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 800438e:	2b0a      	cmp	r3, #10
 8004390:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 8004394:	bf28      	it	cs
 8004396:	2300      	movcs	r3, #0
            return buffer[pos];
 8004398:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 800439a:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 800439e:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80043a0:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80043a2:	4620      	mov	r0, r4
}
 80043a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80043a8:	f010 bc96 	b.w	8014cd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80043ac:	08023d00 	.word	0x08023d00
 80043b0:	08023d09 	.word	0x08023d09
 80043b4:	08023db4 	.word	0x08023db4
 80043b8:	08023e0c 	.word	0x08023e0c
 80043bc:	08023e1a 	.word	0x08023e1a

080043c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80043c0:	f010 bc53 	b.w	8014c6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080043c4 <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80043c4:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80043c6:	bb18      	cbnz	r0, 8004410 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80043c8:	4b12      	ldr	r3, [pc, #72]	@ (8004414 <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80043ca:	4813      	ldr	r0, [pc, #76]	@ (8004418 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80043cc:	681c      	ldr	r4, [r3, #0]
 80043ce:	4913      	ldr	r1, [pc, #76]	@ (800441c <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80043d0:	b1b4      	cbz	r4, 8004400 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80043d2:	6822      	ldr	r2, [r4, #0]
 80043d4:	4422      	add	r2, r4
 80043d6:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80043d8:	6862      	ldr	r2, [r4, #4]
 80043da:	4422      	add	r2, r4
 80043dc:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80043de:	68a2      	ldr	r2, [r4, #8]
 80043e0:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80043e2:	4b0f      	ldr	r3, [pc, #60]	@ (8004420 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80043e4:	2200      	movs	r2, #0
 80043e6:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80043e8:	f000 f82a 	bl	8004440 <_ZN17TypedTextDatabase8getFontsEv>
 80043ec:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80043ee:	f000 f825 	bl	800443c <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80043f2:	4b0c      	ldr	r3, [pc, #48]	@ (8004424 <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80043f4:	601c      	str	r4, [r3, #0]
        fonts = f;
 80043f6:	4b0c      	ldr	r3, [pc, #48]	@ (8004428 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 80043f8:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 80043fc:	8018      	strh	r0, [r3, #0]
    }
}
 80043fe:	e007      	b.n	8004410 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004400:	4b0b      	ldr	r3, [pc, #44]	@ (8004430 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 8004402:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 8004404:	4b0b      	ldr	r3, [pc, #44]	@ (8004434 <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 8004406:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 800440a:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 800440c:	2c00      	cmp	r4, #0
 800440e:	d1e8      	bne.n	80043e2 <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004410:	bd38      	pop	{r3, r4, r5, pc}
 8004412:	bf00      	nop
 8004414:	2400b114 	.word	0x2400b114
 8004418:	2400b10c 	.word	0x2400b10c
 800441c:	2400b108 	.word	0x2400b108
 8004420:	2400b110 	.word	0x2400b110
 8004424:	24024954 	.word	0x24024954
 8004428:	2402495c 	.word	0x2402495c
 800442c:	24024958 	.word	0x24024958
 8004430:	90000004 	.word	0x90000004
 8004434:	90000000 	.word	0x90000000
 8004438:	90000008 	.word	0x90000008

0800443c <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return 0;
}
 800443c:	2000      	movs	r0, #0
 800443e:	4770      	bx	lr

08004440 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004440:	4800      	ldr	r0, [pc, #0]	@ (8004444 <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 8004442:	4770      	bx	lr
 8004444:	2400b118 	.word	0x2400b118

08004448 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004448:	b510      	push	{r4, lr}
};
 800444a:	4c05      	ldr	r4, [pc, #20]	@ (8004460 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 800444c:	f7ff fee0 	bl	8004210 <_Z23getFont_verdana_20_4bppv>
};
 8004450:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 8004452:	f7ff ff19 	bl	8004288 <_Z23getFont_verdana_40_4bppv>
};
 8004456:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004458:	f7ff fe9e 	bl	8004198 <_Z23getFont_verdana_10_4bppv>
};
 800445c:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 800445e:	bd10      	pop	{r4, pc}
 8004460:	2400b118 	.word	0x2400b118

08004464 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 8004464:	b510      	push	{r4, lr}
    pointArray = 0;
 8004466:	2400      	movs	r4, #0
 8004468:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 800446a:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 800446c:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 800446e:	601c      	str	r4, [r3, #0]
}
 8004470:	bd10      	pop	{r4, pc}

08004472 <_ZN21WelcomeScreenViewBaseD1Ev>:
}

WelcomeScreenViewBase::~WelcomeScreenViewBase()
{

}
 8004472:	4770      	bx	lr

08004474 <_ZN21WelcomeScreenViewBase11setupScreenEv>:

void WelcomeScreenViewBase::setupScreen()
{

}
 8004474:	4770      	bx	lr

08004476 <_ZN21WelcomeScreenViewBaseD0Ev>:
WelcomeScreenViewBase::~WelcomeScreenViewBase()
 8004476:	b510      	push	{r4, lr}
 8004478:	4604      	mov	r4, r0
}
 800447a:	216c      	movs	r1, #108	@ 0x6c
 800447c:	f01b fe3f 	bl	80200fe <_ZdlPvj>
 8004480:	4620      	mov	r0, r4
 8004482:	bd10      	pop	{r4, pc}

08004484 <_ZN21WelcomeScreenViewBaseC1Ev>:
WelcomeScreenViewBase::WelcomeScreenViewBase()
 8004484:	b538      	push	{r3, r4, r5, lr}
 8004486:	4604      	mov	r4, r0
        : presenter(0)
 8004488:	f00f fe7e 	bl	8014188 <_ZN8touchgfx6ScreenC1Ev>
 800448c:	2300      	movs	r3, #0
 800448e:	4a15      	ldr	r2, [pc, #84]	@ (80044e4 <_ZN21WelcomeScreenViewBaseC1Ev+0x60>)
 8004490:	4625      	mov	r5, r4
        setWidth(width);
 8004492:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8004496:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8004498:	f845 2b40 	str.w	r2, [r5], #64
 800449c:	4628      	mov	r0, r5
        : color(col)
 800449e:	66a3      	str	r3, [r4, #104]	@ 0x68
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80044a0:	4a11      	ldr	r2, [pc, #68]	@ (80044e8 <_ZN21WelcomeScreenViewBaseC1Ev+0x64>)
        : x(0), y(0), width(0), height(0)
 80044a2:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 80044a6:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
          nextSibling(0),
 80044aa:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
          cachedAbsX(0),
 80044ae:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
          touchable(false),
 80044b2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044b6:	6422      	str	r2, [r4, #64]	@ 0x40
 80044b8:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 80044bc:	23ff      	movs	r3, #255	@ 0xff
 80044be:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        setWidth(width);
 80044c2:	f7ff f931 	bl	8003728 <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80044c6:	4628      	mov	r0, r5
 80044c8:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80044cc:	f7ff f92e 	bl	800372c <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80044d0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80044d4:	1d20      	adds	r0, r4, #4
 80044d6:	4629      	mov	r1, r5
 80044d8:	66a3      	str	r3, [r4, #104]	@ 0x68
 80044da:	f009 fbf3 	bl	800dcc4 <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80044de:	4620      	mov	r0, r4
 80044e0:	bd38      	pop	{r3, r4, r5, pc}
 80044e2:	bf00      	nop
 80044e4:	08023ef4 	.word	0x08023ef4
 80044e8:	080245e0 	.word	0x080245e0

080044ec <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80044ec:	4770      	bx	lr

080044ee <_ZN19FrontendApplicationD0Ev>:
 80044ee:	b510      	push	{r4, lr}
 80044f0:	4604      	mov	r4, r0
 80044f2:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80044f6:	f01b fe02 	bl	80200fe <_ZdlPvj>
 80044fa:	4620      	mov	r0, r4
 80044fc:	bd10      	pop	{r4, pc}

080044fe <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80044fe:	b510      	push	{r4, lr}
 8004500:	4604      	mov	r4, r0
    {
        model.tick();
 8004502:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 8004506:	f000 f812 	bl	800452e <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 800450a:	4620      	mov	r0, r4
    }
 800450c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 8004510:	f00e b878 	b.w	8012604 <_ZN8touchgfx11Application15handleTickEventEv>

08004514 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 8004514:	b510      	push	{r4, lr}
 8004516:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 8004518:	f7ff fd96 	bl	8004048 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 800451c:	4b01      	ldr	r3, [pc, #4]	@ (8004524 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 800451e:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 8004520:	6023      	str	r3, [r4, #0]
}
 8004522:	bd10      	pop	{r4, pc}
 8004524:	08023f28 	.word	0x08023f28

08004528 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 8004528:	2200      	movs	r2, #0
 800452a:	6002      	str	r2, [r0, #0]
{

}
 800452c:	4770      	bx	lr

0800452e <_ZN5Model4tickEv>:

void Model::tick()
{

}
 800452e:	4770      	bx	lr

08004530 <_ZN22WelcomeScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WelcomeScreenPresenter() {}
 8004530:	4770      	bx	lr

08004532 <_ZThn4_N22WelcomeScreenPresenterD1Ev>:
 8004532:	3804      	subs	r0, #4
 8004534:	4770      	bx	lr

08004536 <_ZN22WelcomeScreenPresenter10deactivateEv>:
}

void WelcomeScreenPresenter::activate()
{

}
 8004536:	4770      	bx	lr

08004538 <_ZN22WelcomeScreenPresenterD0Ev>:
 8004538:	b510      	push	{r4, lr}
 800453a:	4604      	mov	r4, r0
 800453c:	2110      	movs	r1, #16
 800453e:	f01b fdde 	bl	80200fe <_ZdlPvj>
 8004542:	4620      	mov	r0, r4
 8004544:	bd10      	pop	{r4, pc}

08004546 <_ZThn4_N22WelcomeScreenPresenterD0Ev>:
 8004546:	f1a0 0004 	sub.w	r0, r0, #4
 800454a:	e7f5      	b.n	8004538 <_ZN22WelcomeScreenPresenterD0Ev>

0800454c <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView>:
    ModelListener() : model(0) {}
 800454c:	2200      	movs	r2, #0
    : view(v)
 800454e:	60c1      	str	r1, [r0, #12]
 8004550:	6082      	str	r2, [r0, #8]
 8004552:	4a02      	ldr	r2, [pc, #8]	@ (800455c <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView+0x10>)
 8004554:	6002      	str	r2, [r0, #0]
 8004556:	3218      	adds	r2, #24
 8004558:	6042      	str	r2, [r0, #4]
}
 800455a:	4770      	bx	lr
 800455c:	08023f7c 	.word	0x08023f7c

08004560 <_ZN17WelcomeScreenView14tearDownScreenEv>:
}

void WelcomeScreenView::tearDownScreen()
{
    WelcomeScreenViewBase::tearDownScreen();
}
 8004560:	4770      	bx	lr
	...

08004564 <_ZN17WelcomeScreenViewD1Ev>:

class WelcomeScreenView : public WelcomeScreenViewBase
{
public:
    WelcomeScreenView();
    virtual ~WelcomeScreenView() {}
 8004564:	4b03      	ldr	r3, [pc, #12]	@ (8004574 <_ZN17WelcomeScreenViewD1Ev+0x10>)
 8004566:	b510      	push	{r4, lr}
 8004568:	4604      	mov	r4, r0
 800456a:	6003      	str	r3, [r0, #0]
 800456c:	f7ff ff81 	bl	8004472 <_ZN21WelcomeScreenViewBaseD1Ev>
 8004570:	4620      	mov	r0, r4
 8004572:	bd10      	pop	{r4, pc}
 8004574:	08023fa4 	.word	0x08023fa4

08004578 <_ZN17WelcomeScreenViewD0Ev>:
 8004578:	b510      	push	{r4, lr}
 800457a:	4604      	mov	r4, r0
 800457c:	f7ff fff2 	bl	8004564 <_ZN17WelcomeScreenViewD1Ev>
 8004580:	216c      	movs	r1, #108	@ 0x6c
 8004582:	4620      	mov	r0, r4
 8004584:	f01b fdbb 	bl	80200fe <_ZdlPvj>
 8004588:	4620      	mov	r0, r4
 800458a:	bd10      	pop	{r4, pc}

0800458c <_ZN17WelcomeScreenViewC1Ev>:
WelcomeScreenView::WelcomeScreenView()
 800458c:	b510      	push	{r4, lr}
 800458e:	4604      	mov	r4, r0
 8004590:	f7ff ff78 	bl	8004484 <_ZN21WelcomeScreenViewBaseC1Ev>
 8004594:	4b01      	ldr	r3, [pc, #4]	@ (800459c <_ZN17WelcomeScreenViewC1Ev+0x10>)
}
 8004596:	4620      	mov	r0, r4
WelcomeScreenView::WelcomeScreenView()
 8004598:	6023      	str	r3, [r4, #0]
}
 800459a:	bd10      	pop	{r4, pc}
 800459c:	08023fa4 	.word	0x08023fa4

080045a0 <_ZN17WelcomeScreenView11setupScreenEv>:
    WelcomeScreenViewBase::setupScreen();
 80045a0:	f7ff bf68 	b.w	8004474 <_ZN21WelcomeScreenViewBase11setupScreenEv>

080045a4 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80045a4:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80045a6:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 80045aa:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 80045ac:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 80045ae:	2302      	movs	r3, #2
 80045b0:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 80045b2:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 80045b6:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 80045ba:	4770      	bx	lr

080045bc <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 80045bc:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 80045c0:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 80045c2:	bf04      	itt	eq
 80045c4:	2300      	moveq	r3, #0
 80045c6:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 80045ca:	2000      	movs	r0, #0
 80045cc:	4770      	bx	lr

080045ce <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 80045ce:	2000      	movs	r0, #0
 80045d0:	4770      	bx	lr

080045d2 <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80045d2:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045d4:	6904      	ldr	r4, [r0, #16]
 80045d6:	8900      	ldrh	r0, [r0, #8]
 80045d8:	46a4      	mov	ip, r4
}
 80045da:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80045de:	4760      	bx	ip

080045e0 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80045e0:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80045e2:	68c4      	ldr	r4, [r0, #12]
 80045e4:	8900      	ldrh	r0, [r0, #8]
 80045e6:	46a4      	mov	ip, r4
}
 80045e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80045ec:	4760      	bx	ip

080045ee <FT6X06_GestureConfig>:
{
 80045ee:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80045f0:	f100 0518 	add.w	r5, r0, #24
{
 80045f4:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80045f6:	7809      	ldrb	r1, [r1, #0]
 80045f8:	4628      	mov	r0, r5
 80045fa:	f000 f911 	bl	8004820 <ft6x06_radian_value>
 80045fe:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 8004600:	7931      	ldrb	r1, [r6, #4]
 8004602:	4628      	mov	r0, r5
 8004604:	f000 f918 	bl	8004838 <ft6x06_offset_left_right>
 8004608:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 800460a:	7a31      	ldrb	r1, [r6, #8]
 800460c:	4628      	mov	r0, r5
 800460e:	f000 f91f 	bl	8004850 <ft6x06_offset_up_down>
 8004612:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 8004614:	7b31      	ldrb	r1, [r6, #12]
 8004616:	4628      	mov	r0, r5
 8004618:	f000 f926 	bl	8004868 <ft6x06_disatnce_left_right>
 800461c:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800461e:	7c31      	ldrb	r1, [r6, #16]
 8004620:	4628      	mov	r0, r5
 8004622:	f000 f92d 	bl	8004880 <ft6x06_distance_up_down>
 8004626:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 8004628:	7d31      	ldrb	r1, [r6, #20]
 800462a:	4628      	mov	r0, r5
 800462c:	f000 f934 	bl	8004898 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 8004630:	42c4      	cmn	r4, r0
}
 8004632:	bf14      	ite	ne
 8004634:	f04f 30ff 	movne.w	r0, #4294967295
 8004638:	2000      	moveq	r0, #0
 800463a:	bd70      	pop	{r4, r5, r6, pc}

0800463c <FT6X06_ReadID>:
{
 800463c:	b513      	push	{r0, r1, r4, lr}
 800463e:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004640:	3018      	adds	r0, #24
 8004642:	f10d 0107 	add.w	r1, sp, #7
 8004646:	f000 f93f 	bl	80048c8 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 800464a:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800464e:	6023      	str	r3, [r4, #0]
}
 8004650:	b002      	add	sp, #8
 8004652:	bd10      	pop	{r4, pc}

08004654 <FT6X06_GetState>:
{
 8004654:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004656:	f100 0518 	add.w	r5, r0, #24
{
 800465a:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 800465c:	a901      	add	r1, sp, #4
 800465e:	4628      	mov	r0, r5
 8004660:	f000 f8d1 	bl	8004806 <ft6x06_td_status>
 8004664:	bb08      	cbnz	r0, 80046aa <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004666:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 800466a:	2b02      	cmp	r3, #2
 800466c:	bf98      	it	ls
 800466e:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004670:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004672:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004674:	2103      	movs	r1, #3
 8004676:	4628      	mov	r0, r5
 8004678:	eb0d 0203 	add.w	r2, sp, r3
 800467c:	f000 f8b0 	bl	80047e0 <ft6x06_read_reg>
 8004680:	b9b0      	cbnz	r0, 80046b0 <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004682:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004686:	f89d 2005 	ldrb.w	r2, [sp, #5]
 800468a:	021b      	lsls	r3, r3, #8
 800468c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004690:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004692:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004696:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004698:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800469c:	021b      	lsls	r3, r3, #8
 800469e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80046a2:	4313      	orrs	r3, r2
 80046a4:	60a3      	str	r3, [r4, #8]
}
 80046a6:	b003      	add	sp, #12
 80046a8:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 80046aa:	f04f 30ff 	mov.w	r0, #4294967295
 80046ae:	e7df      	b.n	8004670 <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 80046b0:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 80046b4:	e7f7      	b.n	80046a6 <FT6X06_GetState+0x52>

080046b6 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80046b6:	3018      	adds	r0, #24
 80046b8:	f000 b8a0 	b.w	80047fc <ft6x06_gest_id>

080046bc <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80046bc:	2101      	movs	r1, #1
 80046be:	3018      	adds	r0, #24
 80046c0:	f000 b8f6 	b.w	80048b0 <ft6x06_g_mode>

080046c4 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80046c4:	2100      	movs	r1, #0
 80046c6:	3018      	adds	r0, #24
 80046c8:	f000 b8f2 	b.w	80048b0 <ft6x06_g_mode>

080046cc <FT6X06_Init>:
{
 80046cc:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 80046ce:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 80046d2:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 80046d4:	b96b      	cbnz	r3, 80046f2 <FT6X06_Init+0x26>
    pObj->IO.Init();
 80046d6:	6803      	ldr	r3, [r0, #0]
 80046d8:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 80046da:	4620      	mov	r0, r4
 80046dc:	f7ff fff2 	bl	80046c4 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 80046e0:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 80046e2:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 80046e6:	bf18      	it	ne
 80046e8:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 80046ea:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 80046ee:	4240      	negs	r0, r0
}
 80046f0:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 80046f2:	2000      	movs	r0, #0
  return ret;
 80046f4:	e7fc      	b.n	80046f0 <FT6X06_Init+0x24>

080046f6 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 80046f6:	2000      	movs	r0, #0
 80046f8:	4770      	bx	lr

080046fa <FT6X06_GetMultiTouchState>:
{
 80046fa:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 80046fc:	f100 0518 	add.w	r5, r0, #24
{
 8004700:	b085      	sub	sp, #20
 8004702:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004704:	4628      	mov	r0, r5
 8004706:	a901      	add	r1, sp, #4
 8004708:	f000 f87d 	bl	8004806 <ft6x06_td_status>
 800470c:	2800      	cmp	r0, #0
 800470e:	d145      	bne.n	800479c <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004710:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004714:	2b02      	cmp	r3, #2
 8004716:	bf98      	it	ls
 8004718:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 800471a:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800471c:	230c      	movs	r3, #12
 800471e:	aa01      	add	r2, sp, #4
 8004720:	2103      	movs	r1, #3
 8004722:	4628      	mov	r0, r5
 8004724:	f000 f85c 	bl	80047e0 <ft6x06_read_reg>
 8004728:	2800      	cmp	r0, #0
 800472a:	d13a      	bne.n	80047a2 <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800472c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004730:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004734:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004736:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004738:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800473c:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800473e:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004740:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004744:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004748:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800474a:	f89d 3006 	ldrb.w	r3, [sp, #6]
 800474e:	021b      	lsls	r3, r3, #8
 8004750:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004754:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004756:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800475a:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 800475c:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004760:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004762:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004766:	091b      	lsrs	r3, r3, #4
 8004768:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800476a:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800476c:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800476e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004772:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004774:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004776:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800477a:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800477c:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004780:	021b      	lsls	r3, r3, #8
 8004782:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004786:	430b      	orrs	r3, r1
 8004788:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 800478a:	f89d 300e 	ldrb.w	r3, [sp, #14]
 800478e:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004790:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004794:	091b      	lsrs	r3, r3, #4
 8004796:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004798:	b005      	add	sp, #20
 800479a:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 800479c:	f04f 30ff 	mov.w	r0, #4294967295
 80047a0:	e7bb      	b.n	800471a <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 80047a2:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 80047a6:	e7f7      	b.n	8004798 <FT6X06_GetMultiTouchState+0x9e>

080047a8 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 80047a8:	b190      	cbz	r0, 80047d0 <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 80047aa:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 80047ac:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80047ae:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 80047b0:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 80047b2:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 80047b4:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80047b6:	68ca      	ldr	r2, [r1, #12]
 80047b8:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80047ba:	690a      	ldr	r2, [r1, #16]
 80047bc:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80047be:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 80047c0:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 80047c2:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80047c4:	4a04      	ldr	r2, [pc, #16]	@ (80047d8 <FT6X06_RegisterBusIO+0x30>)
 80047c6:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80047c8:	4a04      	ldr	r2, [pc, #16]	@ (80047dc <FT6X06_RegisterBusIO+0x34>)
 80047ca:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 80047cc:	b103      	cbz	r3, 80047d0 <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 80047ce:	4718      	bx	r3
}
 80047d0:	f04f 30ff 	mov.w	r0, #4294967295
 80047d4:	4770      	bx	lr
 80047d6:	bf00      	nop
 80047d8:	080045d3 	.word	0x080045d3
 80047dc:	080045e1 	.word	0x080045e1

080047e0 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80047e0:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80047e2:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 80047e6:	46a4      	mov	ip, r4
}
 80047e8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80047ec:	4760      	bx	ip

080047ee <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 80047ee:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80047f0:	6804      	ldr	r4, [r0, #0]
 80047f2:	6880      	ldr	r0, [r0, #8]
 80047f4:	46a4      	mov	ip, r4
}
 80047f6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 80047fa:	4760      	bx	ip

080047fc <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 80047fc:	2301      	movs	r3, #1
{
 80047fe:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004800:	4619      	mov	r1, r3
 8004802:	f7ff bfed 	b.w	80047e0 <ft6x06_read_reg>

08004806 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004806:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004808:	460a      	mov	r2, r1
{
 800480a:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800480c:	2301      	movs	r3, #1
 800480e:	2102      	movs	r1, #2
 8004810:	f7ff ffe6 	bl	80047e0 <ft6x06_read_reg>
  
  if(ret == 0)
 8004814:	b918      	cbnz	r0, 800481e <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004816:	7823      	ldrb	r3, [r4, #0]
 8004818:	f003 030f 	and.w	r3, r3, #15
 800481c:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 800481e:	bd10      	pop	{r4, pc}

08004820 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004820:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004822:	2301      	movs	r3, #1
{
 8004824:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004828:	f10d 0207 	add.w	r2, sp, #7
 800482c:	2191      	movs	r1, #145	@ 0x91
 800482e:	f7ff ffde 	bl	80047ee <ft6x06_write_reg>
}
 8004832:	b003      	add	sp, #12
 8004834:	f85d fb04 	ldr.w	pc, [sp], #4

08004838 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004838:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 800483a:	2301      	movs	r3, #1
{
 800483c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004840:	f10d 0207 	add.w	r2, sp, #7
 8004844:	2192      	movs	r1, #146	@ 0x92
 8004846:	f7ff ffd2 	bl	80047ee <ft6x06_write_reg>
}
 800484a:	b003      	add	sp, #12
 800484c:	f85d fb04 	ldr.w	pc, [sp], #4

08004850 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004850:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004852:	2301      	movs	r3, #1
{
 8004854:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004858:	f10d 0207 	add.w	r2, sp, #7
 800485c:	2193      	movs	r1, #147	@ 0x93
 800485e:	f7ff ffc6 	bl	80047ee <ft6x06_write_reg>
}
 8004862:	b003      	add	sp, #12
 8004864:	f85d fb04 	ldr.w	pc, [sp], #4

08004868 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004868:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 800486a:	2301      	movs	r3, #1
{
 800486c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004870:	f10d 0207 	add.w	r2, sp, #7
 8004874:	2194      	movs	r1, #148	@ 0x94
 8004876:	f7ff ffba 	bl	80047ee <ft6x06_write_reg>
}
 800487a:	b003      	add	sp, #12
 800487c:	f85d fb04 	ldr.w	pc, [sp], #4

08004880 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004880:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004882:	2301      	movs	r3, #1
{
 8004884:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004888:	f10d 0207 	add.w	r2, sp, #7
 800488c:	2195      	movs	r1, #149	@ 0x95
 800488e:	f7ff ffae 	bl	80047ee <ft6x06_write_reg>
}
 8004892:	b003      	add	sp, #12
 8004894:	f85d fb04 	ldr.w	pc, [sp], #4

08004898 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004898:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 800489a:	2301      	movs	r3, #1
{
 800489c:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 80048a0:	f10d 0207 	add.w	r2, sp, #7
 80048a4:	2196      	movs	r1, #150	@ 0x96
 80048a6:	f7ff ffa2 	bl	80047ee <ft6x06_write_reg>
}
 80048aa:	b003      	add	sp, #12
 80048ac:	f85d fb04 	ldr.w	pc, [sp], #4

080048b0 <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 80048b0:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80048b2:	2301      	movs	r3, #1
{
 80048b4:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 80048b8:	f10d 0207 	add.w	r2, sp, #7
 80048bc:	21a4      	movs	r1, #164	@ 0xa4
 80048be:	f7ff ff96 	bl	80047ee <ft6x06_write_reg>
}
 80048c2:	b003      	add	sp, #12
 80048c4:	f85d fb04 	ldr.w	pc, [sp], #4

080048c8 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 80048c8:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 80048ca:	2301      	movs	r3, #1
 80048cc:	21a8      	movs	r1, #168	@ 0xa8
 80048ce:	f7ff bf87 	b.w	80047e0 <ft6x06_read_reg>
	...

080048d4 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80048d4:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 80048d6:	2201      	movs	r2, #1
 80048d8:	4b07      	ldr	r3, [pc, #28]	@ (80048f8 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 80048da:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 80048de:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80048e0:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048e2:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 80048e4:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80048e6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80048ea:	f006 fd75 	bl	800b3d8 <HAL_SDRAM_SendCommand>
 80048ee:	3800      	subs	r0, #0
 80048f0:	bf18      	it	ne
 80048f2:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 80048f4:	4240      	negs	r0, r0
 80048f6:	bd08      	pop	{r3, pc}
 80048f8:	2400b124 	.word	0x2400b124

080048fc <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80048fc:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80048fe:	2202      	movs	r2, #2
 8004900:	4b08      	ldr	r3, [pc, #32]	@ (8004924 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004902:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004906:	2101      	movs	r1, #1
 8004908:	2200      	movs	r2, #0
 800490a:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800490e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004912:	4619      	mov	r1, r3
 8004914:	f006 fd60 	bl	800b3d8 <HAL_SDRAM_SendCommand>
 8004918:	3800      	subs	r0, #0
 800491a:	bf18      	it	ne
 800491c:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800491e:	4240      	negs	r0, r0
 8004920:	bd08      	pop	{r3, pc}
 8004922:	bf00      	nop
 8004924:	2400b124 	.word	0x2400b124

08004928 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004928:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800492a:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 800492e:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004930:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004932:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004934:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004936:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004938:	6991      	ldr	r1, [r2, #24]
 800493a:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800493c:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 800493e:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004940:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004942:	4907      	ldr	r1, [pc, #28]	@ (8004960 <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004944:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004946:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004948:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 800494a:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800494e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004952:	f006 fd41 	bl	800b3d8 <HAL_SDRAM_SendCommand>
 8004956:	3800      	subs	r0, #0
 8004958:	bf18      	it	ne
 800495a:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 800495c:	4240      	negs	r0, r0
 800495e:	bd10      	pop	{r4, pc}
 8004960:	2400b124 	.word	0x2400b124

08004964 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004964:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004966:	4b08      	ldr	r3, [pc, #32]	@ (8004988 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004968:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 800496c:	2108      	movs	r1, #8
 800496e:	2200      	movs	r2, #0
 8004970:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004974:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004978:	4619      	mov	r1, r3
 800497a:	f006 fd2d 	bl	800b3d8 <HAL_SDRAM_SendCommand>
 800497e:	3800      	subs	r0, #0
 8004980:	bf18      	it	ne
 8004982:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004984:	4240      	negs	r0, r0
 8004986:	bd08      	pop	{r3, pc}
 8004988:	2400b124 	.word	0x2400b124

0800498c <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 800498c:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 800498e:	f006 fd42 	bl	800b416 <HAL_SDRAM_ProgramRefreshRate>
 8004992:	3800      	subs	r0, #0
 8004994:	bf18      	it	ne
 8004996:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004998:	4240      	negs	r0, r0
 800499a:	bd08      	pop	{r3, pc}

0800499c <IS42S32800J_Init>:
{
 800499c:	b570      	push	{r4, r5, r6, lr}
 800499e:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80049a0:	6809      	ldr	r1, [r1, #0]
{
 80049a2:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80049a4:	f7ff ff96 	bl	80048d4 <IS42S32800J_ClockEnable>
 80049a8:	b110      	cbz	r0, 80049b0 <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 80049aa:	f04f 30ff 	mov.w	r0, #4294967295
}
 80049ae:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80049b0:	f001 fc7c 	bl	80062ac <HAL_GetTick>
 80049b4:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 80049b6:	f001 fc79 	bl	80062ac <HAL_GetTick>
 80049ba:	4286      	cmp	r6, r0
 80049bc:	d0fb      	beq.n	80049b6 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 80049be:	6821      	ldr	r1, [r4, #0]
 80049c0:	4628      	mov	r0, r5
 80049c2:	f7ff ff9b 	bl	80048fc <IS42S32800J_Precharge>
 80049c6:	2800      	cmp	r0, #0
 80049c8:	d1ef      	bne.n	80049aa <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 80049ca:	4628      	mov	r0, r5
 80049cc:	e9d4 1200 	ldrd	r1, r2, [r4]
 80049d0:	f7ff ffc8 	bl	8004964 <IS42S32800J_RefreshMode>
 80049d4:	2800      	cmp	r0, #0
 80049d6:	d1e8      	bne.n	80049aa <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 80049d8:	4621      	mov	r1, r4
 80049da:	4628      	mov	r0, r5
 80049dc:	f7ff ffa4 	bl	8004928 <IS42S32800J_ModeRegConfig>
 80049e0:	2800      	cmp	r0, #0
 80049e2:	d1e2      	bne.n	80049aa <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 80049e4:	68a1      	ldr	r1, [r4, #8]
 80049e6:	4628      	mov	r0, r5
 80049e8:	f7ff ffd0 	bl	800498c <IS42S32800J_RefreshRate>
 80049ec:	3800      	subs	r0, #0
 80049ee:	bf18      	it	ne
 80049f0:	2001      	movne	r0, #1
 80049f2:	4240      	negs	r0, r0
  return ret;
 80049f4:	e7db      	b.n	80049ae <IS42S32800J_Init+0x12>

080049f6 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 80049f6:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80049fa:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 80049fe:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004a02:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004a06:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004a0a:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004a0e:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004a12:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004a14:	2000      	movs	r0, #0
 8004a16:	4770      	bx	lr

08004a18 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004a18:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004a1a:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004a1e:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004a20:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004a24:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004a26:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004a28:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004a2a:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004a2c:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a2e:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004a30:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a32:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a34:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004a36:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004a38:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004a3a:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a3c:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a3e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a42:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004a46:	2310      	movs	r3, #16
 8004a48:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004a4a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004a4e:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004a50:	f240 1301 	movw	r3, #257	@ 0x101
 8004a54:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a56:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004a5a:	f004 ff5e 	bl	800991a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004a5e:	2800      	cmp	r0, #0

}
 8004a60:	bf14      	ite	ne
 8004a62:	f06f 0004 	mvnne.w	r0, #4
 8004a66:	2000      	moveq	r0, #0
 8004a68:	b015      	add	sp, #84	@ 0x54
 8004a6a:	f85d fb04 	ldr.w	pc, [sp], #4

08004a6e <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a6e:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a70:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004a74:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a76:	bf08      	it	eq
 8004a78:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004a7c:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a7e:	bf18      	it	ne
 8004a80:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004a84:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004a86:	a906      	add	r1, sp, #24
{
 8004a88:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004a8a:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004a8c:	2306      	movs	r3, #6
 8004a8e:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004a90:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004a92:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004a96:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004a98:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004a9a:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004a9c:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004aa0:	f004 fe3a 	bl	8009718 <HAL_QSPI_Command>
 8004aa4:	bb20      	cbnz	r0, 8004af0 <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004aa6:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004aaa:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004aac:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004aae:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004ab2:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ab4:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004ab6:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004aba:	f04f 0310 	mov.w	r3, #16
 8004abe:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004ac2:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ac6:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004ac8:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004acc:	bf14      	ite	ne
 8004ace:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004ad2:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ad6:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004ad8:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ada:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004ade:	f004 ff1c 	bl	800991a <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004ae2:	2800      	cmp	r0, #0
 8004ae4:	bf14      	ite	ne
 8004ae6:	f06f 0004 	mvnne.w	r0, #4
 8004aea:	2000      	moveq	r0, #0
}
 8004aec:	b015      	add	sp, #84	@ 0x54
 8004aee:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004af0:	f06f 0001 	mvn.w	r0, #1
 8004af4:	e7fa      	b.n	8004aec <MT25TL01G_WriteEnable+0x7e>

08004af6 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004af6:	2903      	cmp	r1, #3
{
 8004af8:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004afa:	bf08      	it	eq
 8004afc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004b00:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b02:	bf18      	it	ne
 8004b04:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004b08:	4604      	mov	r4, r0
 8004b0a:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004b0c:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004b0e:	23b7      	movs	r3, #183	@ 0xb7
 8004b10:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b12:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b14:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b18:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b1a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b1c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b1e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004b22:	f7ff ffa4 	bl	8004a6e <MT25TL01G_WriteEnable>
 8004b26:	b118      	cbz	r0, 8004b30 <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004b28:	f06f 0001 	mvn.w	r0, #1
}
 8004b2c:	b00f      	add	sp, #60	@ 0x3c
 8004b2e:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b30:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004b34:	4669      	mov	r1, sp
 8004b36:	4620      	mov	r0, r4
 8004b38:	f004 fdee 	bl	8009718 <HAL_QSPI_Command>
 8004b3c:	2800      	cmp	r0, #0
 8004b3e:	d1f3      	bne.n	8004b28 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004b40:	4629      	mov	r1, r5
 8004b42:	4620      	mov	r0, r4
 8004b44:	f7ff ff68 	bl	8004a18 <MT25TL01G_AutoPollingMemReady>
 8004b48:	2800      	cmp	r0, #0
 8004b4a:	d0ef      	beq.n	8004b2c <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004b4c:	e7ec      	b.n	8004b28 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004b4e <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004b4e:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b50:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004b54:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b56:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b5a:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004b5c:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b5e:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004b60:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b62:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b64:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004b68:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004b6a:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004b6c:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004b6e:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b72:	f004 fdd1 	bl	8009718 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004b76:	2800      	cmp	r0, #0
}
 8004b78:	bf14      	ite	ne
 8004b7a:	f06f 0001 	mvnne.w	r0, #1
 8004b7e:	2000      	moveq	r0, #0
 8004b80:	b00f      	add	sp, #60	@ 0x3c
 8004b82:	f85d fb04 	ldr.w	pc, [sp], #4

08004b86 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004b86:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b88:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004b8c:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b8e:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004b92:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004b94:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004b96:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004b98:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004b9a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004b9c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ba0:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004ba2:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ba4:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004ba6:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004baa:	f004 fdb5 	bl	8009718 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004bae:	2800      	cmp	r0, #0
}
 8004bb0:	bf14      	ite	ne
 8004bb2:	f06f 0001 	mvnne.w	r0, #1
 8004bb6:	2000      	moveq	r0, #0
 8004bb8:	b00f      	add	sp, #60	@ 0x3c
 8004bba:	f85d fb04 	ldr.w	pc, [sp], #4

08004bbe <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004bbe:	b500      	push	{lr}
 8004bc0:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004bc2:	2903      	cmp	r1, #3
 8004bc4:	d80e      	bhi.n	8004be4 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004bc6:	e8df f001 	tbb	[pc, r1]
 8004bca:	2902      	.short	0x2902
 8004bcc:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004bce:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004bd2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004bd4:	230e      	movs	r3, #14
 8004bd6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004bd8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004bdc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004bde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004be2:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004be4:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004be6:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004bea:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004bee:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004bf0:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004bf2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004bf6:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004bf8:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004bfa:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004bfe:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c00:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c02:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004c04:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c08:	f004 fed8 	bl	80099bc <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004c0c:	2800      	cmp	r0, #0
}
 8004c0e:	bf14      	ite	ne
 8004c10:	f06f 0005 	mvnne.w	r0, #5
 8004c14:	2000      	moveq	r0, #0
 8004c16:	b011      	add	sp, #68	@ 0x44
 8004c18:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c20:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004c22:	233d      	movs	r3, #61	@ 0x3d
 8004c24:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004c26:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c2a:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004c2c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004c30:	e7d7      	b.n	8004be2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c36:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8004c38:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004c3a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004c3c:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004c40:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c42:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004c46:	e7cc      	b.n	8004be2 <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004c48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004c4c:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8004c4e:	23ed      	movs	r3, #237	@ 0xed
 8004c50:	e7f3      	b.n	8004c3a <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

08004c52 <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004c52:	b500      	push	{lr}
 8004c54:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004c56:	2903      	cmp	r1, #3
 8004c58:	d80e      	bhi.n	8004c78 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8004c5a:	e8df f001 	tbb	[pc, r1]
 8004c5e:	2502      	.short	0x2502
 8004c60:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004c62:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004c66:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8004c68:	230c      	movs	r3, #12
 8004c6a:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004c6c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c70:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004c72:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004c76:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004c78:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c7a:	466a      	mov	r2, sp
 8004c7c:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8004c7e:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004c80:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8004c84:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004c86:	2300      	movs	r3, #0
 8004c88:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004c8a:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004c8c:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004c90:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004c94:	f004 fe92 	bl	80099bc <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004c98:	2800      	cmp	r0, #0
}
 8004c9a:	bf14      	ite	ne
 8004c9c:	f06f 0005 	mvnne.w	r0, #5
 8004ca0:	2000      	moveq	r0, #0
 8004ca2:	b011      	add	sp, #68	@ 0x44
 8004ca4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ca8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cac:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004cae:	23bc      	movs	r3, #188	@ 0xbc
 8004cb0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8004cb2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8004cb6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004cb8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004cbc:	e7db      	b.n	8004c76 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004cbe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004cc2:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8004cc4:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004cc6:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8004cc8:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8004ccc:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004cce:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8004cd2:	e7d0      	b.n	8004c76 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004cd4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8004cd8:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8004cda:	23eb      	movs	r3, #235	@ 0xeb
 8004cdc:	e7f3      	b.n	8004cc6 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

08004cde <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cde:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ce0:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004ce4:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ce6:	bf18      	it	ne
 8004ce8:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004cec:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cee:	bf08      	it	eq
 8004cf0:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004cf4:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004cf6:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 8004cf8:	2366      	movs	r3, #102	@ 0x66
 8004cfa:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004cfc:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004cfe:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004d02:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004d04:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d06:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d08:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d0c:	f004 fd04 	bl	8009718 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004d10:	2800      	cmp	r0, #0
}
 8004d12:	bf14      	ite	ne
 8004d14:	f06f 0001 	mvnne.w	r0, #1
 8004d18:	2000      	moveq	r0, #0
 8004d1a:	b00f      	add	sp, #60	@ 0x3c
 8004d1c:	f85d fb04 	ldr.w	pc, [sp], #4

08004d20 <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d20:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d22:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004d26:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d28:	bf18      	it	ne
 8004d2a:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004d2e:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d30:	bf08      	it	eq
 8004d32:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d36:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004d38:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8004d3a:	2399      	movs	r3, #153	@ 0x99
 8004d3c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004d3e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004d40:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004d44:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004d46:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004d48:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004d4a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004d4e:	f004 fce3 	bl	8009718 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004d52:	2800      	cmp	r0, #0
}
 8004d54:	bf14      	ite	ne
 8004d56:	f06f 0001 	mvnne.w	r0, #1
 8004d5a:	2000      	moveq	r0, #0
 8004d5c:	b00f      	add	sp, #60	@ 0x3c
 8004d5e:	f85d fb04 	ldr.w	pc, [sp], #4

08004d62 <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8004d62:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d64:	6884      	ldr	r4, [r0, #8]
 8004d66:	8800      	ldrh	r0, [r0, #0]
 8004d68:	46a4      	mov	ip, r4
}
 8004d6a:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004d6e:	4760      	bx	ip

08004d70 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004d70:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d72:	6844      	ldr	r4, [r0, #4]
 8004d74:	8800      	ldrh	r0, [r0, #0]
 8004d76:	46a4      	mov	ip, r4
}
 8004d78:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004d7c:	4760      	bx	ip

08004d7e <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004d7e:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004d80:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 8004d82:	4604      	mov	r4, r0
 8004d84:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8004d86:	4798      	blx	r3
 8004d88:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8004d8a:	68e3      	ldr	r3, [r4, #12]
 8004d8c:	4798      	blx	r3
 8004d8e:	1b83      	subs	r3, r0, r6
 8004d90:	42ab      	cmp	r3, r5
 8004d92:	d3fa      	bcc.n	8004d8a <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8004d94:	bd70      	pop	{r4, r5, r6, pc}
	...

08004d98 <OTM8009A_Init>:
{
 8004d98:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004d9c:	2300      	movs	r3, #0
 8004d9e:	f100 0510 	add.w	r5, r0, #16
{
 8004da2:	4607      	mov	r7, r0
 8004da4:	460e      	mov	r6, r1
 8004da6:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004da8:	4619      	mov	r1, r3
 8004daa:	4ade      	ldr	r2, [pc, #888]	@ (8005124 <OTM8009A_Init+0x38c>)
 8004dac:	4628      	mov	r0, r5
 8004dae:	f000 fb99 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004db2:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004db4:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004db6:	4adc      	ldr	r2, [pc, #880]	@ (8005128 <OTM8009A_Init+0x390>)
 8004db8:	21ff      	movs	r1, #255	@ 0xff
 8004dba:	4628      	mov	r0, r5
 8004dbc:	f000 fb92 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dc0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8004dc2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dc4:	4ad9      	ldr	r2, [pc, #868]	@ (800512c <OTM8009A_Init+0x394>)
 8004dc6:	4619      	mov	r1, r3
 8004dc8:	4628      	mov	r0, r5
 8004dca:	f000 fb8b 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004dce:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004dd0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004dd2:	4ad7      	ldr	r2, [pc, #860]	@ (8005130 <OTM8009A_Init+0x398>)
 8004dd4:	21ff      	movs	r1, #255	@ 0xff
 8004dd6:	4628      	mov	r0, r5
 8004dd8:	f000 fb84 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004ddc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 8004dde:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004de0:	4ad2      	ldr	r2, [pc, #840]	@ (800512c <OTM8009A_Init+0x394>)
 8004de2:	4619      	mov	r1, r3
 8004de4:	4628      	mov	r0, r5
 8004de6:	f000 fb7d 	bl	80054e4 <otm8009a_write_reg>
 8004dea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004dec:	2300      	movs	r3, #0
 8004dee:	4ad1      	ldr	r2, [pc, #836]	@ (8005134 <OTM8009A_Init+0x39c>)
 8004df0:	21c4      	movs	r1, #196	@ 0xc4
 8004df2:	4628      	mov	r0, r5
 8004df4:	f000 fb76 	bl	80054e4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004df8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 8004dfa:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004dfc:	4638      	mov	r0, r7
 8004dfe:	f7ff ffbe 	bl	8004d7e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 8004e02:	2300      	movs	r3, #0
 8004e04:	4acc      	ldr	r2, [pc, #816]	@ (8005138 <OTM8009A_Init+0x3a0>)
 8004e06:	4628      	mov	r0, r5
 8004e08:	4619      	mov	r1, r3
 8004e0a:	f000 fb6b 	bl	80054e4 <otm8009a_write_reg>
 8004e0e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004e10:	2300      	movs	r3, #0
 8004e12:	4aca      	ldr	r2, [pc, #808]	@ (800513c <OTM8009A_Init+0x3a4>)
 8004e14:	21c4      	movs	r1, #196	@ 0xc4
 8004e16:	4628      	mov	r0, r5
 8004e18:	f000 fb64 	bl	80054e4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004e1c:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8004e1e:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 8004e20:	4638      	mov	r0, r7
 8004e22:	f7ff ffac 	bl	8004d7e <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004e26:	2300      	movs	r3, #0
 8004e28:	4ac5      	ldr	r2, [pc, #788]	@ (8005140 <OTM8009A_Init+0x3a8>)
 8004e2a:	4628      	mov	r0, r5
 8004e2c:	4619      	mov	r1, r3
 8004e2e:	f000 fb59 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004e32:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8004e34:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004e36:	4ac3      	ldr	r2, [pc, #780]	@ (8005144 <OTM8009A_Init+0x3ac>)
 8004e38:	21c5      	movs	r1, #197	@ 0xc5
 8004e3a:	4628      	mov	r0, r5
 8004e3c:	f000 fb52 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004e40:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8004e42:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004e44:	4ac0      	ldr	r2, [pc, #768]	@ (8005148 <OTM8009A_Init+0x3b0>)
 8004e46:	4619      	mov	r1, r3
 8004e48:	4628      	mov	r0, r5
 8004e4a:	f000 fb4b 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e4e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8004e50:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e52:	4abe      	ldr	r2, [pc, #760]	@ (800514c <OTM8009A_Init+0x3b4>)
 8004e54:	21c5      	movs	r1, #197	@ 0xc5
 8004e56:	4628      	mov	r0, r5
 8004e58:	f000 fb44 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e5c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004e5e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e60:	4abb      	ldr	r2, [pc, #748]	@ (8005150 <OTM8009A_Init+0x3b8>)
 8004e62:	4619      	mov	r1, r3
 8004e64:	4628      	mov	r0, r5
 8004e66:	f000 fb3d 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e6a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8004e6c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e6e:	4ab9      	ldr	r2, [pc, #740]	@ (8005154 <OTM8009A_Init+0x3bc>)
 8004e70:	21c0      	movs	r1, #192	@ 0xc0
 8004e72:	4628      	mov	r0, r5
 8004e74:	f000 fb36 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e78:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8004e7a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e7c:	4aa9      	ldr	r2, [pc, #676]	@ (8005124 <OTM8009A_Init+0x38c>)
 8004e7e:	4619      	mov	r1, r3
 8004e80:	4628      	mov	r0, r5
 8004e82:	f000 fb2f 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e86:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004e88:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e8a:	4ab3      	ldr	r2, [pc, #716]	@ (8005158 <OTM8009A_Init+0x3c0>)
 8004e8c:	21d9      	movs	r1, #217	@ 0xd9
 8004e8e:	4628      	mov	r0, r5
 8004e90:	f000 fb28 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e94:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8004e96:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004e98:	4ab0      	ldr	r2, [pc, #704]	@ (800515c <OTM8009A_Init+0x3c4>)
 8004e9a:	4619      	mov	r1, r3
 8004e9c:	4628      	mov	r0, r5
 8004e9e:	f000 fb21 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004ea2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004ea4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004ea6:	4aae      	ldr	r2, [pc, #696]	@ (8005160 <OTM8009A_Init+0x3c8>)
 8004ea8:	21c1      	movs	r1, #193	@ 0xc1
 8004eaa:	4628      	mov	r0, r5
 8004eac:	f000 fb1a 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004eb0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8004eb2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004eb4:	4aab      	ldr	r2, [pc, #684]	@ (8005164 <OTM8009A_Init+0x3cc>)
 8004eb6:	4619      	mov	r1, r3
 8004eb8:	4628      	mov	r0, r5
 8004eba:	f000 fb13 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ebe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8004ec0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ec2:	4aa9      	ldr	r2, [pc, #676]	@ (8005168 <OTM8009A_Init+0x3d0>)
 8004ec4:	21c5      	movs	r1, #197	@ 0xc5
 8004ec6:	4628      	mov	r0, r5
 8004ec8:	f000 fb0c 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ecc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 8004ece:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004ed0:	4aa6      	ldr	r2, [pc, #664]	@ (800516c <OTM8009A_Init+0x3d4>)
 8004ed2:	4619      	mov	r1, r3
 8004ed4:	4628      	mov	r0, r5
 8004ed6:	f000 fb05 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004eda:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8004edc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004ede:	4a9b      	ldr	r2, [pc, #620]	@ (800514c <OTM8009A_Init+0x3b4>)
 8004ee0:	21c5      	movs	r1, #197	@ 0xc5
 8004ee2:	4628      	mov	r0, r5
 8004ee4:	f000 fafe 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ee8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 8004eea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004eec:	4a8d      	ldr	r2, [pc, #564]	@ (8005124 <OTM8009A_Init+0x38c>)
 8004eee:	4619      	mov	r1, r3
 8004ef0:	4628      	mov	r0, r5
 8004ef2:	f000 faf7 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004ef6:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8004ef8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004efa:	4a9d      	ldr	r2, [pc, #628]	@ (8005170 <OTM8009A_Init+0x3d8>)
 8004efc:	21d8      	movs	r1, #216	@ 0xd8
 8004efe:	4628      	mov	r0, r5
 8004f00:	f000 faf0 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f04:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 8004f06:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f08:	4a9a      	ldr	r2, [pc, #616]	@ (8005174 <OTM8009A_Init+0x3dc>)
 8004f0a:	4619      	mov	r1, r3
 8004f0c:	4628      	mov	r0, r5
 8004f0e:	f000 fae9 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004f12:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 8004f14:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004f16:	4a98      	ldr	r2, [pc, #608]	@ (8005178 <OTM8009A_Init+0x3e0>)
 8004f18:	21c5      	movs	r1, #197	@ 0xc5
 8004f1a:	4628      	mov	r0, r5
 8004f1c:	f000 fae2 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004f20:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 8004f22:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004f24:	4a95      	ldr	r2, [pc, #596]	@ (800517c <OTM8009A_Init+0x3e4>)
 8004f26:	4619      	mov	r1, r3
 8004f28:	4628      	mov	r0, r5
 8004f2a:	f000 fadb 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004f2e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8004f30:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004f32:	4a93      	ldr	r2, [pc, #588]	@ (8005180 <OTM8009A_Init+0x3e8>)
 8004f34:	21c0      	movs	r1, #192	@ 0xc0
 8004f36:	4628      	mov	r0, r5
 8004f38:	f000 fad4 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004f3c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 8004f3e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004f40:	4a90      	ldr	r2, [pc, #576]	@ (8005184 <OTM8009A_Init+0x3ec>)
 8004f42:	4619      	mov	r1, r3
 8004f44:	4628      	mov	r0, r5
 8004f46:	f000 facd 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004f4a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8004f4c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004f4e:	4a8e      	ldr	r2, [pc, #568]	@ (8005188 <OTM8009A_Init+0x3f0>)
 8004f50:	21c5      	movs	r1, #197	@ 0xc5
 8004f52:	4628      	mov	r0, r5
 8004f54:	f000 fac6 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f58:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8004f5a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f5c:	4a8b      	ldr	r2, [pc, #556]	@ (800518c <OTM8009A_Init+0x3f4>)
 8004f5e:	4619      	mov	r1, r3
 8004f60:	4628      	mov	r0, r5
 8004f62:	f000 fabf 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f66:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8004f68:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f6a:	4a89      	ldr	r2, [pc, #548]	@ (8005190 <OTM8009A_Init+0x3f8>)
 8004f6c:	21c4      	movs	r1, #196	@ 0xc4
 8004f6e:	4628      	mov	r0, r5
 8004f70:	f000 fab8 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f74:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8004f76:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f78:	4a78      	ldr	r2, [pc, #480]	@ (800515c <OTM8009A_Init+0x3c4>)
 8004f7a:	4619      	mov	r1, r3
 8004f7c:	4628      	mov	r0, r5
 8004f7e:	f000 fab1 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f82:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8004f84:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f86:	4a83      	ldr	r2, [pc, #524]	@ (8005194 <OTM8009A_Init+0x3fc>)
 8004f88:	21c1      	movs	r1, #193	@ 0xc1
 8004f8a:	4628      	mov	r0, r5
 8004f8c:	f000 faaa 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f90:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8004f92:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004f94:	4a80      	ldr	r2, [pc, #512]	@ (8005198 <OTM8009A_Init+0x400>)
 8004f96:	4619      	mov	r1, r3
 8004f98:	4628      	mov	r0, r5
 8004f9a:	f000 faa3 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004f9e:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8004fa0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004fa2:	4a7e      	ldr	r2, [pc, #504]	@ (800519c <OTM8009A_Init+0x404>)
 8004fa4:	21b3      	movs	r1, #179	@ 0xb3
 8004fa6:	4628      	mov	r0, r5
 8004fa8:	f000 fa9c 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8004fae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fb0:	4a5e      	ldr	r2, [pc, #376]	@ (800512c <OTM8009A_Init+0x394>)
 8004fb2:	4619      	mov	r1, r3
 8004fb4:	4628      	mov	r0, r5
 8004fb6:	f000 fa95 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004fba:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8004fbc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004fbe:	4a78      	ldr	r2, [pc, #480]	@ (80051a0 <OTM8009A_Init+0x408>)
 8004fc0:	21ce      	movs	r1, #206	@ 0xce
 8004fc2:	4628      	mov	r0, r5
 8004fc4:	f000 fa8e 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fc8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8004fca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fcc:	4a75      	ldr	r2, [pc, #468]	@ (80051a4 <OTM8009A_Init+0x40c>)
 8004fce:	4619      	mov	r1, r3
 8004fd0:	4628      	mov	r0, r5
 8004fd2:	f000 fa87 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004fd6:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8004fd8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004fda:	4a73      	ldr	r2, [pc, #460]	@ (80051a8 <OTM8009A_Init+0x410>)
 8004fdc:	21ce      	movs	r1, #206	@ 0xce
 8004fde:	4628      	mov	r0, r5
 8004fe0:	f000 fa80 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004fe4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8004fe6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004fe8:	4a70      	ldr	r2, [pc, #448]	@ (80051ac <OTM8009A_Init+0x414>)
 8004fea:	4619      	mov	r1, r3
 8004fec:	4628      	mov	r0, r5
 8004fee:	f000 fa79 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ff2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8004ff4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8004ff6:	4a6e      	ldr	r2, [pc, #440]	@ (80051b0 <OTM8009A_Init+0x418>)
 8004ff8:	21ce      	movs	r1, #206	@ 0xce
 8004ffa:	4628      	mov	r0, r5
 8004ffc:	f000 fa72 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005000:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 8005002:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005004:	4a6b      	ldr	r2, [pc, #428]	@ (80051b4 <OTM8009A_Init+0x41c>)
 8005006:	4619      	mov	r1, r3
 8005008:	4628      	mov	r0, r5
 800500a:	f000 fa6b 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800500e:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005010:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 8005012:	4a69      	ldr	r2, [pc, #420]	@ (80051b8 <OTM8009A_Init+0x420>)
 8005014:	21cf      	movs	r1, #207	@ 0xcf
 8005016:	4628      	mov	r0, r5
 8005018:	f000 fa64 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800501c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800501e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005020:	4a66      	ldr	r2, [pc, #408]	@ (80051bc <OTM8009A_Init+0x424>)
 8005022:	4619      	mov	r1, r3
 8005024:	4628      	mov	r0, r5
 8005026:	f000 fa5d 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800502a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800502c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800502e:	4a64      	ldr	r2, [pc, #400]	@ (80051c0 <OTM8009A_Init+0x428>)
 8005030:	21cf      	movs	r1, #207	@ 0xcf
 8005032:	4628      	mov	r0, r5
 8005034:	f000 fa56 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005038:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800503a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800503c:	4a3b      	ldr	r2, [pc, #236]	@ (800512c <OTM8009A_Init+0x394>)
 800503e:	4619      	mov	r1, r3
 8005040:	4628      	mov	r0, r5
 8005042:	f000 fa4f 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005046:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005048:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800504a:	4a5e      	ldr	r2, [pc, #376]	@ (80051c4 <OTM8009A_Init+0x42c>)
 800504c:	21cb      	movs	r1, #203	@ 0xcb
 800504e:	4628      	mov	r0, r5
 8005050:	f000 fa48 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005054:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005056:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005058:	4a5b      	ldr	r2, [pc, #364]	@ (80051c8 <OTM8009A_Init+0x430>)
 800505a:	4619      	mov	r1, r3
 800505c:	4628      	mov	r0, r5
 800505e:	f000 fa41 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005062:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005064:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005066:	4a59      	ldr	r2, [pc, #356]	@ (80051cc <OTM8009A_Init+0x434>)
 8005068:	21cb      	movs	r1, #203	@ 0xcb
 800506a:	4628      	mov	r0, r5
 800506c:	f000 fa3a 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005070:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005072:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005074:	4a4b      	ldr	r2, [pc, #300]	@ (80051a4 <OTM8009A_Init+0x40c>)
 8005076:	4619      	mov	r1, r3
 8005078:	4628      	mov	r0, r5
 800507a:	f000 fa33 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800507e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005080:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 8005082:	4a53      	ldr	r2, [pc, #332]	@ (80051d0 <OTM8009A_Init+0x438>)
 8005084:	21cb      	movs	r1, #203	@ 0xcb
 8005086:	4628      	mov	r0, r5
 8005088:	f000 fa2c 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800508c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800508e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005090:	4a46      	ldr	r2, [pc, #280]	@ (80051ac <OTM8009A_Init+0x414>)
 8005092:	4619      	mov	r1, r3
 8005094:	4628      	mov	r0, r5
 8005096:	f000 fa25 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800509a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800509c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800509e:	4a4d      	ldr	r2, [pc, #308]	@ (80051d4 <OTM8009A_Init+0x43c>)
 80050a0:	21cb      	movs	r1, #203	@ 0xcb
 80050a2:	4628      	mov	r0, r5
 80050a4:	f000 fa1e 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80050aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050ac:	4a41      	ldr	r2, [pc, #260]	@ (80051b4 <OTM8009A_Init+0x41c>)
 80050ae:	4619      	mov	r1, r3
 80050b0:	4628      	mov	r0, r5
 80050b2:	f000 fa17 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80050b6:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80050b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80050ba:	4a47      	ldr	r2, [pc, #284]	@ (80051d8 <OTM8009A_Init+0x440>)
 80050bc:	21cb      	movs	r1, #203	@ 0xcb
 80050be:	4628      	mov	r0, r5
 80050c0:	f000 fa10 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050c4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 80050c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050c8:	4a3c      	ldr	r2, [pc, #240]	@ (80051bc <OTM8009A_Init+0x424>)
 80050ca:	4619      	mov	r1, r3
 80050cc:	4628      	mov	r0, r5
 80050ce:	f000 fa09 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80050d2:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80050d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80050d6:	4a41      	ldr	r2, [pc, #260]	@ (80051dc <OTM8009A_Init+0x444>)
 80050d8:	21cb      	movs	r1, #203	@ 0xcb
 80050da:	4628      	mov	r0, r5
 80050dc:	f000 fa02 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80050e0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80050e2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80050e4:	4a3e      	ldr	r2, [pc, #248]	@ (80051e0 <OTM8009A_Init+0x448>)
 80050e6:	4619      	mov	r1, r3
 80050e8:	4628      	mov	r0, r5
 80050ea:	f000 f9fb 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80050ee:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80050f0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80050f2:	4a3c      	ldr	r2, [pc, #240]	@ (80051e4 <OTM8009A_Init+0x44c>)
 80050f4:	21cb      	movs	r1, #203	@ 0xcb
 80050f6:	4628      	mov	r0, r5
 80050f8:	f000 f9f4 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80050fc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80050fe:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8005100:	4a39      	ldr	r2, [pc, #228]	@ (80051e8 <OTM8009A_Init+0x450>)
 8005102:	4619      	mov	r1, r3
 8005104:	4628      	mov	r0, r5
 8005106:	f000 f9ed 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800510a:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800510c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800510e:	4a37      	ldr	r2, [pc, #220]	@ (80051ec <OTM8009A_Init+0x454>)
 8005110:	21cb      	movs	r1, #203	@ 0xcb
 8005112:	4628      	mov	r0, r5
 8005114:	f000 f9e6 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005118:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 800511a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800511c:	4a03      	ldr	r2, [pc, #12]	@ (800512c <OTM8009A_Init+0x394>)
 800511e:	4619      	mov	r1, r3
 8005120:	4628      	mov	r0, r5
 8005122:	e065      	b.n	80051f0 <OTM8009A_Init+0x458>
 8005124:	080240dd 	.word	0x080240dd
 8005128:	080240d9 	.word	0x080240d9
 800512c:	080240de 	.word	0x080240de
 8005130:	080240d7 	.word	0x080240d7
 8005134:	080240df 	.word	0x080240df
 8005138:	080240e0 	.word	0x080240e0
 800513c:	080240e1 	.word	0x080240e1
 8005140:	080240e2 	.word	0x080240e2
 8005144:	080240e3 	.word	0x080240e3
 8005148:	080240e4 	.word	0x080240e4
 800514c:	080240e5 	.word	0x080240e5
 8005150:	080240e6 	.word	0x080240e6
 8005154:	080240e7 	.word	0x080240e7
 8005158:	080240e8 	.word	0x080240e8
 800515c:	080240eb 	.word	0x080240eb
 8005160:	080240ec 	.word	0x080240ec
 8005164:	080240ed 	.word	0x080240ed
 8005168:	080240ee 	.word	0x080240ee
 800516c:	080240ef 	.word	0x080240ef
 8005170:	080240d5 	.word	0x080240d5
 8005174:	080240f0 	.word	0x080240f0
 8005178:	080240f1 	.word	0x080240f1
 800517c:	080240f2 	.word	0x080240f2
 8005180:	080240f3 	.word	0x080240f3
 8005184:	080240f4 	.word	0x080240f4
 8005188:	080240f5 	.word	0x080240f5
 800518c:	080240e9 	.word	0x080240e9
 8005190:	080240f6 	.word	0x080240f6
 8005194:	080240f7 	.word	0x080240f7
 8005198:	080240f8 	.word	0x080240f8
 800519c:	080240d3 	.word	0x080240d3
 80051a0:	080240cd 	.word	0x080240cd
 80051a4:	080240f9 	.word	0x080240f9
 80051a8:	080240bf 	.word	0x080240bf
 80051ac:	080240fa 	.word	0x080240fa
 80051b0:	080240b1 	.word	0x080240b1
 80051b4:	080240fb 	.word	0x080240fb
 80051b8:	080240a7 	.word	0x080240a7
 80051bc:	080240fc 	.word	0x080240fc
 80051c0:	08024109 	.word	0x08024109
 80051c4:	0802409d 	.word	0x0802409d
 80051c8:	080240fd 	.word	0x080240fd
 80051cc:	0802408e 	.word	0x0802408e
 80051d0:	0802407f 	.word	0x0802407f
 80051d4:	08024075 	.word	0x08024075
 80051d8:	08024066 	.word	0x08024066
 80051dc:	08024057 	.word	0x08024057
 80051e0:	080240fe 	.word	0x080240fe
 80051e4:	0802404d 	.word	0x0802404d
 80051e8:	080240ff 	.word	0x080240ff
 80051ec:	08024043 	.word	0x08024043
 80051f0:	f000 f978 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80051f4:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80051f8:	4a8e      	ldr	r2, [pc, #568]	@ (8005434 <OTM8009A_Init+0x69c>)
 80051fa:	21cc      	movs	r1, #204	@ 0xcc
 80051fc:	4628      	mov	r0, r5
 80051fe:	f000 f971 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005202:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8005204:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005206:	4a8c      	ldr	r2, [pc, #560]	@ (8005438 <OTM8009A_Init+0x6a0>)
 8005208:	4619      	mov	r1, r3
 800520a:	4628      	mov	r0, r5
 800520c:	f000 f96a 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005210:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005212:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005214:	4a89      	ldr	r2, [pc, #548]	@ (800543c <OTM8009A_Init+0x6a4>)
 8005216:	21cc      	movs	r1, #204	@ 0xcc
 8005218:	4628      	mov	r0, r5
 800521a:	f000 f963 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800521e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8005220:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005222:	4a87      	ldr	r2, [pc, #540]	@ (8005440 <OTM8009A_Init+0x6a8>)
 8005224:	4619      	mov	r1, r3
 8005226:	4628      	mov	r0, r5
 8005228:	f000 f95c 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800522c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800522e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005230:	4a84      	ldr	r2, [pc, #528]	@ (8005444 <OTM8009A_Init+0x6ac>)
 8005232:	21cc      	movs	r1, #204	@ 0xcc
 8005234:	4628      	mov	r0, r5
 8005236:	f000 f955 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800523a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 800523c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800523e:	4a82      	ldr	r2, [pc, #520]	@ (8005448 <OTM8009A_Init+0x6b0>)
 8005240:	4619      	mov	r1, r3
 8005242:	4628      	mov	r0, r5
 8005244:	f000 f94e 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005248:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800524a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 800524c:	4a7f      	ldr	r2, [pc, #508]	@ (800544c <OTM8009A_Init+0x6b4>)
 800524e:	21cc      	movs	r1, #204	@ 0xcc
 8005250:	4628      	mov	r0, r5
 8005252:	f000 f947 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005256:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005258:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 800525a:	4a7d      	ldr	r2, [pc, #500]	@ (8005450 <OTM8009A_Init+0x6b8>)
 800525c:	4619      	mov	r1, r3
 800525e:	4628      	mov	r0, r5
 8005260:	f000 f940 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005264:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005266:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005268:	4a7a      	ldr	r2, [pc, #488]	@ (8005454 <OTM8009A_Init+0x6bc>)
 800526a:	21cc      	movs	r1, #204	@ 0xcc
 800526c:	4628      	mov	r0, r5
 800526e:	f000 f939 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005272:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005274:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005276:	4a78      	ldr	r2, [pc, #480]	@ (8005458 <OTM8009A_Init+0x6c0>)
 8005278:	4619      	mov	r1, r3
 800527a:	4628      	mov	r0, r5
 800527c:	f000 f932 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005280:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005282:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005284:	4a75      	ldr	r2, [pc, #468]	@ (800545c <OTM8009A_Init+0x6c4>)
 8005286:	21cc      	movs	r1, #204	@ 0xcc
 8005288:	4628      	mov	r0, r5
 800528a:	f000 f92b 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800528e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005290:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005292:	4a73      	ldr	r2, [pc, #460]	@ (8005460 <OTM8009A_Init+0x6c8>)
 8005294:	4619      	mov	r1, r3
 8005296:	4628      	mov	r0, r5
 8005298:	f000 f924 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800529c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800529e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80052a0:	4a70      	ldr	r2, [pc, #448]	@ (8005464 <OTM8009A_Init+0x6cc>)
 80052a2:	21c5      	movs	r1, #197	@ 0xc5
 80052a4:	4628      	mov	r0, r5
 80052a6:	f000 f91d 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80052aa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 80052ac:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80052ae:	4a6e      	ldr	r2, [pc, #440]	@ (8005468 <OTM8009A_Init+0x6d0>)
 80052b0:	4619      	mov	r1, r3
 80052b2:	4628      	mov	r0, r5
 80052b4:	f000 f916 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80052b8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 80052ba:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80052bc:	4a6b      	ldr	r2, [pc, #428]	@ (800546c <OTM8009A_Init+0x6d4>)
 80052be:	21f5      	movs	r1, #245	@ 0xf5
 80052c0:	4628      	mov	r0, r5
 80052c2:	f000 f90f 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80052c6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 80052c8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80052ca:	4a69      	ldr	r2, [pc, #420]	@ (8005470 <OTM8009A_Init+0x6d8>)
 80052cc:	4619      	mov	r1, r3
 80052ce:	4628      	mov	r0, r5
 80052d0:	f000 f908 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80052d4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80052d6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80052d8:	4a66      	ldr	r2, [pc, #408]	@ (8005474 <OTM8009A_Init+0x6dc>)
 80052da:	21c6      	movs	r1, #198	@ 0xc6
 80052dc:	4628      	mov	r0, r5
 80052de:	f000 f901 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052e2:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80052e4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052e6:	4a64      	ldr	r2, [pc, #400]	@ (8005478 <OTM8009A_Init+0x6e0>)
 80052e8:	4619      	mov	r1, r3
 80052ea:	4628      	mov	r0, r5
 80052ec:	f000 f8fa 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80052f0:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052f2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80052f4:	4a61      	ldr	r2, [pc, #388]	@ (800547c <OTM8009A_Init+0x6e4>)
 80052f6:	21ff      	movs	r1, #255	@ 0xff
 80052f8:	4628      	mov	r0, r5
 80052fa:	f000 f8f3 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8005300:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005302:	4a5d      	ldr	r2, [pc, #372]	@ (8005478 <OTM8009A_Init+0x6e0>)
 8005304:	4619      	mov	r1, r3
 8005306:	4628      	mov	r0, r5
 8005308:	f000 f8ec 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800530c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800530e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005310:	4a59      	ldr	r2, [pc, #356]	@ (8005478 <OTM8009A_Init+0x6e0>)
 8005312:	4619      	mov	r1, r3
 8005314:	4628      	mov	r0, r5
 8005316:	f000 f8e5 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800531a:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800531c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800531e:	4a58      	ldr	r2, [pc, #352]	@ (8005480 <OTM8009A_Init+0x6e8>)
 8005320:	21e1      	movs	r1, #225	@ 0xe1
 8005322:	4628      	mov	r0, r5
 8005324:	f000 f8de 	bl	80054e4 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005328:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 800532a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800532c:	4a52      	ldr	r2, [pc, #328]	@ (8005478 <OTM8009A_Init+0x6e0>)
 800532e:	4619      	mov	r1, r3
 8005330:	4628      	mov	r0, r5
 8005332:	f000 f8d7 	bl	80054e4 <otm8009a_write_reg>
 8005336:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005338:	2310      	movs	r3, #16
 800533a:	4a52      	ldr	r2, [pc, #328]	@ (8005484 <OTM8009A_Init+0x6ec>)
 800533c:	21e2      	movs	r1, #226	@ 0xe2
 800533e:	4628      	mov	r0, r5
 8005340:	f000 f8d0 	bl	80054e4 <otm8009a_write_reg>
 8005344:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005346:	2300      	movs	r3, #0
 8005348:	4a4f      	ldr	r2, [pc, #316]	@ (8005488 <OTM8009A_Init+0x6f0>)
 800534a:	2111      	movs	r1, #17
 800534c:	4628      	mov	r0, r5
 800534e:	f000 f8c9 	bl	80054e4 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005352:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005354:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005356:	4638      	mov	r0, r7
 8005358:	f7ff fd11 	bl	8004d7e <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 800535c:	4f4b      	ldr	r7, [pc, #300]	@ (800548c <OTM8009A_Init+0x6f4>)
 800535e:	2e00      	cmp	r6, #0
 8005360:	d061      	beq.n	8005426 <OTM8009A_Init+0x68e>
 8005362:	2e02      	cmp	r6, #2
 8005364:	d107      	bne.n	8005376 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005366:	2300      	movs	r3, #0
 8005368:	4a49      	ldr	r2, [pc, #292]	@ (8005490 <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 800536a:	213a      	movs	r1, #58	@ 0x3a
 800536c:	4628      	mov	r0, r5
 800536e:	f000 f8b9 	bl	80054e4 <otm8009a_write_reg>
 8005372:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005374:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005376:	f1b8 0f01 	cmp.w	r8, #1
 800537a:	d157      	bne.n	800542c <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800537c:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800537e:	f10d 0207 	add.w	r2, sp, #7
 8005382:	2136      	movs	r1, #54	@ 0x36
 8005384:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005386:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800538a:	2300      	movs	r3, #0
 800538c:	f000 f8aa 	bl	80054e4 <otm8009a_write_reg>
 8005390:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8005392:	2304      	movs	r3, #4
 8005394:	4a3f      	ldr	r2, [pc, #252]	@ (8005494 <OTM8009A_Init+0x6fc>)
 8005396:	212a      	movs	r1, #42	@ 0x2a
 8005398:	4628      	mov	r0, r5
 800539a:	f000 f8a3 	bl	80054e4 <otm8009a_write_reg>
 800539e:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80053a0:	2304      	movs	r3, #4
 80053a2:	4a3d      	ldr	r2, [pc, #244]	@ (8005498 <OTM8009A_Init+0x700>)
 80053a4:	212b      	movs	r1, #43	@ 0x2b
 80053a6:	4628      	mov	r0, r5
 80053a8:	f000 f89c 	bl	80054e4 <otm8009a_write_reg>
 80053ac:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80053ae:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80053b2:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 80053b4:	2300      	movs	r3, #0
 80053b6:	4a39      	ldr	r2, [pc, #228]	@ (800549c <OTM8009A_Init+0x704>)
 80053b8:	2151      	movs	r1, #81	@ 0x51
 80053ba:	4628      	mov	r0, r5
 80053bc:	f000 f892 	bl	80054e4 <otm8009a_write_reg>
 80053c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80053c2:	4633      	mov	r3, r6
 80053c4:	4a36      	ldr	r2, [pc, #216]	@ (80054a0 <OTM8009A_Init+0x708>)
 80053c6:	2153      	movs	r1, #83	@ 0x53
 80053c8:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 80053ca:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 80053cc:	f000 f88a 	bl	80054e4 <otm8009a_write_reg>
 80053d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 80053d2:	4633      	mov	r3, r6
 80053d4:	4a33      	ldr	r2, [pc, #204]	@ (80054a4 <OTM8009A_Init+0x70c>)
 80053d6:	2155      	movs	r1, #85	@ 0x55
 80053d8:	4628      	mov	r0, r5
 80053da:	f000 f883 	bl	80054e4 <otm8009a_write_reg>
 80053de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80053e0:	4633      	mov	r3, r6
 80053e2:	4a31      	ldr	r2, [pc, #196]	@ (80054a8 <OTM8009A_Init+0x710>)
 80053e4:	215e      	movs	r1, #94	@ 0x5e
 80053e6:	4628      	mov	r0, r5
 80053e8:	f000 f87c 	bl	80054e4 <otm8009a_write_reg>
 80053ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80053ee:	4633      	mov	r3, r6
 80053f0:	4a2e      	ldr	r2, [pc, #184]	@ (80054ac <OTM8009A_Init+0x714>)
 80053f2:	2129      	movs	r1, #41	@ 0x29
 80053f4:	4628      	mov	r0, r5
 80053f6:	f000 f875 	bl	80054e4 <otm8009a_write_reg>
 80053fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80053fc:	4633      	mov	r3, r6
 80053fe:	4631      	mov	r1, r6
 8005400:	4a1d      	ldr	r2, [pc, #116]	@ (8005478 <OTM8009A_Init+0x6e0>)
 8005402:	4628      	mov	r0, r5
 8005404:	f000 f86e 	bl	80054e4 <otm8009a_write_reg>
 8005408:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 800540a:	4633      	mov	r3, r6
 800540c:	4a28      	ldr	r2, [pc, #160]	@ (80054b0 <OTM8009A_Init+0x718>)
 800540e:	212c      	movs	r1, #44	@ 0x2c
 8005410:	4628      	mov	r0, r5
 8005412:	f000 f867 	bl	80054e4 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 8005416:	42c4      	cmn	r4, r0
}
 8005418:	bf14      	ite	ne
 800541a:	f04f 30ff 	movne.w	r0, #4294967295
 800541e:	4630      	moveq	r0, r6
 8005420:	b002      	add	sp, #8
 8005422:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005426:	4633      	mov	r3, r6
 8005428:	4a22      	ldr	r2, [pc, #136]	@ (80054b4 <OTM8009A_Init+0x71c>)
 800542a:	e79e      	b.n	800536a <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 800542c:	2300      	movs	r3, #0
 800542e:	603b      	str	r3, [r7, #0]
 8005430:	e7bf      	b.n	80053b2 <OTM8009A_Init+0x61a>
 8005432:	bf00      	nop
 8005434:	08024039 	.word	0x08024039
 8005438:	080240fd 	.word	0x080240fd
 800543c:	0802402a 	.word	0x0802402a
 8005440:	080240f9 	.word	0x080240f9
 8005444:	0802401b 	.word	0x0802401b
 8005448:	080240fa 	.word	0x080240fa
 800544c:	08024011 	.word	0x08024011
 8005450:	080240fb 	.word	0x080240fb
 8005454:	08024002 	.word	0x08024002
 8005458:	080240fc 	.word	0x080240fc
 800545c:	08023ff3 	.word	0x08023ff3
 8005460:	080240e9 	.word	0x080240e9
 8005464:	0802410a 	.word	0x0802410a
 8005468:	0802410b 	.word	0x0802410b
 800546c:	0802410c 	.word	0x0802410c
 8005470:	0802410d 	.word	0x0802410d
 8005474:	0802410e 	.word	0x0802410e
 8005478:	080240dd 	.word	0x080240dd
 800547c:	08023ff0 	.word	0x08023ff0
 8005480:	08023fe0 	.word	0x08023fe0
 8005484:	08023fd0 	.word	0x08023fd0
 8005488:	08024100 	.word	0x08024100
 800548c:	2400b134 	.word	0x2400b134
 8005490:	08024101 	.word	0x08024101
 8005494:	08024113 	.word	0x08024113
 8005498:	0802410f 	.word	0x0802410f
 800549c:	08024103 	.word	0x08024103
 80054a0:	08024104 	.word	0x08024104
 80054a4:	08024105 	.word	0x08024105
 80054a8:	08024106 	.word	0x08024106
 80054ac:	08024107 	.word	0x08024107
 80054b0:	08024108 	.word	0x08024108
 80054b4:	08024102 	.word	0x08024102

080054b8 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 80054b8:	b160      	cbz	r0, 80054d4 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 80054ba:	684b      	ldr	r3, [r1, #4]
 80054bc:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80054be:	688b      	ldr	r3, [r1, #8]
 80054c0:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 80054c2:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 80054c4:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 80054c6:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 80054c8:	4b04      	ldr	r3, [pc, #16]	@ (80054dc <OTM8009A_RegisterBusIO+0x24>)
 80054ca:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 80054cc:	4b04      	ldr	r3, [pc, #16]	@ (80054e0 <OTM8009A_RegisterBusIO+0x28>)
 80054ce:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 80054d0:	2000      	movs	r0, #0
 80054d2:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80054d4:	f04f 30ff 	mov.w	r0, #4294967295
}
 80054d8:	4770      	bx	lr
 80054da:	bf00      	nop
 80054dc:	08004d63 	.word	0x08004d63
 80054e0:	08004d71 	.word	0x08004d71

080054e4 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80054e4:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80054e6:	6804      	ldr	r4, [r0, #0]
 80054e8:	6880      	ldr	r0, [r0, #8]
 80054ea:	46a4      	mov	ip, r4
}
 80054ec:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80054f0:	4760      	bx	ip
	...

080054f4 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80054f4:	4a10      	ldr	r2, [pc, #64]	@ (8005538 <BSP_I2C4_DeInit+0x44>)
{
 80054f6:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80054f8:	6813      	ldr	r3, [r2, #0]
 80054fa:	3b01      	subs	r3, #1
 80054fc:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80054fe:	b10b      	cbz	r3, 8005504 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 8005500:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 8005502:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 8005504:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8005508:	480c      	ldr	r0, [pc, #48]	@ (800553c <BSP_I2C4_DeInit+0x48>)
 800550a:	f002 f873 	bl	80075f4 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800550e:	480b      	ldr	r0, [pc, #44]	@ (800553c <BSP_I2C4_DeInit+0x48>)
 8005510:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8005514:	f002 f86e 	bl	80075f4 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8005518:	4a09      	ldr	r2, [pc, #36]	@ (8005540 <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800551a:	480a      	ldr	r0, [pc, #40]	@ (8005544 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 800551c:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 8005520:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005524:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8005528:	f002 fab4 	bl	8007a94 <HAL_I2C_DeInit>
 800552c:	2800      	cmp	r0, #0
 800552e:	d0e7      	beq.n	8005500 <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 8005530:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005534:	e7e5      	b.n	8005502 <BSP_I2C4_DeInit+0xe>
 8005536:	bf00      	nop
 8005538:	2400bb98 	.word	0x2400bb98
 800553c:	58020c00 	.word	0x58020c00
 8005540:	58024400 	.word	0x58024400
 8005544:	2400b140 	.word	0x2400b140

08005548 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005548:	2300      	movs	r3, #0
 800554a:	2201      	movs	r2, #1
{
 800554c:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800554e:	6041      	str	r1, [r0, #4]
{
 8005550:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8005552:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005554:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005558:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800555c:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8005560:	f002 fa42 	bl	80079e8 <HAL_I2C_Init>
 8005564:	4601      	mov	r1, r0
 8005566:	b108      	cbz	r0, 800556c <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005568:	2001      	movs	r0, #1
}
 800556a:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800556c:	4620      	mov	r0, r4
 800556e:	f002 fc68 	bl	8007e42 <HAL_I2CEx_ConfigAnalogFilter>
 8005572:	4601      	mov	r1, r0
 8005574:	2800      	cmp	r0, #0
 8005576:	d1f7      	bne.n	8005568 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005578:	4620      	mov	r0, r4
 800557a:	f002 fc88 	bl	8007e8e <HAL_I2CEx_ConfigDigitalFilter>
 800557e:	3800      	subs	r0, #0
 8005580:	bf18      	it	ne
 8005582:	2001      	movne	r0, #1
 8005584:	e7f1      	b.n	800556a <MX_I2C4_Init+0x22>
	...

08005588 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005588:	4ba1      	ldr	r3, [pc, #644]	@ (8005810 <BSP_I2C4_Init+0x288>)
 800558a:	48a2      	ldr	r0, [pc, #648]	@ (8005814 <BSP_I2C4_Init+0x28c>)
{
 800558c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 8005590:	6003      	str	r3, [r0, #0]
{
 8005592:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8005594:	4ba0      	ldr	r3, [pc, #640]	@ (8005818 <BSP_I2C4_Init+0x290>)
 8005596:	681c      	ldr	r4, [r3, #0]
 8005598:	b11c      	cbz	r4, 80055a2 <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 800559a:	2000      	movs	r0, #0
}
 800559c:	b013      	add	sp, #76	@ 0x4c
 800559e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 80055a2:	2201      	movs	r2, #1
 80055a4:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 80055a6:	f002 fc47 	bl	8007e38 <HAL_I2C_GetState>
 80055aa:	2800      	cmp	r0, #0
 80055ac:	d1f5      	bne.n	800559a <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80055ae:	4d9b      	ldr	r5, [pc, #620]	@ (800581c <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80055b0:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80055b4:	2702      	movs	r7, #2
 80055b6:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80055b8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80055bc:	a90d      	add	r1, sp, #52	@ 0x34
 80055be:	4898      	ldr	r0, [pc, #608]	@ (8005820 <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80055c0:	f043 0308 	orr.w	r3, r3, #8
 80055c4:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80055c8:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80055cc:	f003 0308 	and.w	r3, r3, #8
 80055d0:	930a      	str	r3, [sp, #40]	@ 0x28
 80055d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80055d4:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80055d8:	f043 0308 	orr.w	r3, r3, #8
 80055dc:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80055e0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80055e4:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80055e6:	f003 0308 	and.w	r3, r3, #8
 80055ea:	930b      	str	r3, [sp, #44]	@ 0x2c
 80055ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80055ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80055f2:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80055f6:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80055fa:	f001 ff13 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80055fe:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005602:	a90d      	add	r1, sp, #52	@ 0x34
 8005604:	4886      	ldr	r0, [pc, #536]	@ (8005820 <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005606:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005608:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800560c:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005610:	f001 ff08 	bl	8007424 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 8005614:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005618:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800561c:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 8005620:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 8005624:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005628:	930c      	str	r3, [sp, #48]	@ 0x30
 800562a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 800562c:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005630:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005634:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005638:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800563c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005640:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005644:	f004 fef2 	bl	800a42c <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005648:	2800      	cmp	r0, #0
 800564a:	d06f      	beq.n	800572c <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800564c:	4b75      	ldr	r3, [pc, #468]	@ (8005824 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 800564e:	4622      	mov	r2, r4
 8005650:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005652:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005656:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800565a:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 800582c <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800565e:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005662:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005666:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 800566a:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800566c:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005670:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005674:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005678:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 800567c:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800567e:	4b6a      	ldr	r3, [pc, #424]	@ (8005828 <BSP_I2C4_Init+0x2a0>)
 8005680:	681b      	ldr	r3, [r3, #0]
{
 8005682:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005684:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005688:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 800568c:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005690:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005694:	d35d      	bcc.n	8005752 <BSP_I2C4_Init+0x1ca>
 8005696:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005698:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800569a:	9d00      	ldr	r5, [sp, #0]
 800569c:	42bd      	cmp	r5, r7
 800569e:	d852      	bhi.n	8005746 <BSP_I2C4_Init+0x1be>
 80056a0:	42be      	cmp	r6, r7
 80056a2:	d350      	bcc.n	8005746 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 80056a4:	4591      	cmp	r9, r2
 80056a6:	d04e      	beq.n	8005746 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80056a8:	2514      	movs	r5, #20
 80056aa:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 80056ae:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80056b0:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80056b2:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80056b6:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80056b8:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80056bc:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80056c0:	d93e      	bls.n	8005740 <BSP_I2C4_Init+0x1b8>
 80056c2:	4a59      	ldr	r2, [pc, #356]	@ (8005828 <BSP_I2C4_Init+0x2a0>)
 80056c4:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056c6:	4b58      	ldr	r3, [pc, #352]	@ (8005828 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80056c8:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 80056cc:	f04f 32ff 	mov.w	r2, #4294967295
 80056d0:	4956      	ldr	r1, [pc, #344]	@ (800582c <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056d2:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80056d4:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056d6:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 80056d8:	0043      	lsls	r3, r0, #1
 80056da:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 80056de:	e9cd 2501 	strd	r2, r5, [sp, #4]
 80056e2:	f10b 0b01 	add.w	fp, fp, #1
 80056e6:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 80056ea:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 80056ee:	9508      	str	r5, [sp, #32]
 80056f0:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80056f2:	9b05      	ldr	r3, [sp, #20]
 80056f4:	429f      	cmp	r7, r3
 80056f6:	d138      	bne.n	800576a <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 80056f8:	9b01      	ldr	r3, [sp, #4]
 80056fa:	2b7f      	cmp	r3, #127	@ 0x7f
 80056fc:	d816      	bhi.n	800572c <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80056fe:	2114      	movs	r1, #20
 8005700:	9a01      	ldr	r2, [sp, #4]
 8005702:	4b4a      	ldr	r3, [pc, #296]	@ (800582c <BSP_I2C4_Init+0x2a4>)
 8005704:	434a      	muls	r2, r1
 8005706:	1899      	adds	r1, r3, r2
 8005708:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800570a:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800570c:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005710:	684b      	ldr	r3, [r1, #4]
 8005712:	051b      	lsls	r3, r3, #20
 8005714:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005718:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800571a:	688b      	ldr	r3, [r1, #8]
 800571c:	041b      	lsls	r3, r3, #16
 800571e:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005722:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005724:	68cb      	ldr	r3, [r1, #12]
 8005726:	021b      	lsls	r3, r3, #8
 8005728:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800572a:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800572c:	4621      	mov	r1, r4
 800572e:	4839      	ldr	r0, [pc, #228]	@ (8005814 <BSP_I2C4_Init+0x28c>)
 8005730:	f7ff ff0a 	bl	8005548 <MX_I2C4_Init>
 8005734:	2800      	cmp	r0, #0
 8005736:	f43f af30 	beq.w	800559a <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 800573a:	f06f 0007 	mvn.w	r0, #7
  return ret;
 800573e:	e72d      	b.n	800559c <BSP_I2C4_Init+0x14>
 8005740:	4691      	mov	r9, r2
 8005742:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005746:	f10e 0e01 	add.w	lr, lr, #1
 800574a:	440f      	add	r7, r1
 800574c:	f1be 0f10 	cmp.w	lr, #16
 8005750:	d1a3      	bne.n	800569a <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005752:	f1bc 0f10 	cmp.w	ip, #16
 8005756:	4488      	add	r8, r1
 8005758:	d196      	bne.n	8005688 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800575a:	3201      	adds	r2, #1
 800575c:	4401      	add	r1, r0
 800575e:	2a10      	cmp	r2, #16
 8005760:	d18f      	bne.n	8005682 <BSP_I2C4_Init+0xfa>
 8005762:	f1ba 0f00 	cmp.w	sl, #0
 8005766:	d1ac      	bne.n	80056c2 <BSP_I2C4_Init+0x13a>
 8005768:	e7ad      	b.n	80056c6 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800576a:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800576c:	f04f 0c00 	mov.w	ip, #0
 8005770:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005772:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005776:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005778:	441d      	add	r5, r3
 800577a:	441e      	add	r6, r3
 800577c:	9503      	str	r5, [sp, #12]
 800577e:	ebab 0503 	sub.w	r5, fp, r3
 8005782:	9607      	str	r6, [sp, #28]
 8005784:	006d      	lsls	r5, r5, #1
 8005786:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005788:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800578a:	f240 5214 	movw	r2, #1300	@ 0x514
 800578e:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005792:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005796:	4295      	cmp	r5, r2
 8005798:	d92f      	bls.n	80057fa <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800579a:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800579e:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 80057a2:	d22a      	bcs.n	80057fa <BSP_I2C4_Init+0x272>
 80057a4:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80057a6:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80057aa:	f8dd 9000 	ldr.w	r9, [sp]
 80057ae:	442e      	add	r6, r5
 80057b0:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80057b4:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 80057b8:	f240 4212 	movw	r2, #1042	@ 0x412
 80057bc:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80057c0:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 80057c4:	4592      	cmp	sl, r2
 80057c6:	d811      	bhi.n	80057ec <BSP_I2C4_Init+0x264>
 80057c8:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 80057cc:	d30e      	bcc.n	80057ec <BSP_I2C4_Init+0x264>
 80057ce:	4580      	cmp	r8, r0
 80057d0:	d90c      	bls.n	80057ec <BSP_I2C4_Init+0x264>
              error = -error;
 80057d2:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 80057d6:	bf28      	it	cs
 80057d8:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 80057da:	9a02      	ldr	r2, [sp, #8]
 80057dc:	4592      	cmp	sl, r2
 80057de:	d205      	bcs.n	80057ec <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 80057e0:	9a04      	ldr	r2, [sp, #16]
 80057e2:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 80057e4:	9a06      	ldr	r2, [sp, #24]
 80057e6:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 80057ea:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80057ec:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 80057f0:	4498      	add	r8, r3
 80057f2:	441e      	add	r6, r3
 80057f4:	eba9 0903 	sub.w	r9, r9, r3
 80057f8:	d1dc      	bne.n	80057b4 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 80057fa:	9a00      	ldr	r2, [sp, #0]
 80057fc:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005800:	441d      	add	r5, r3
 8005802:	eba2 0203 	sub.w	r2, r2, r3
 8005806:	9200      	str	r2, [sp, #0]
 8005808:	d1bf      	bne.n	800578a <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800580a:	3701      	adds	r7, #1
 800580c:	3114      	adds	r1, #20
 800580e:	e770      	b.n	80056f2 <BSP_I2C4_Init+0x16a>
 8005810:	58001c00 	.word	0x58001c00
 8005814:	2400b140 	.word	0x2400b140
 8005818:	2400bb98 	.word	0x2400bb98
 800581c:	58024400 	.word	0x58024400
 8005820:	58020c00 	.word	0x58020c00
 8005824:	3b9aca00 	.word	0x3b9aca00
 8005828:	2400b194 	.word	0x2400b194
 800582c:	2400b198 	.word	0x2400b198

08005830 <BSP_I2C4_WriteReg>:
{
 8005830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005832:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005836:	9200      	str	r2, [sp, #0]
 8005838:	460a      	mov	r2, r1
 800583a:	4601      	mov	r1, r0
 800583c:	4808      	ldr	r0, [pc, #32]	@ (8005860 <BSP_I2C4_WriteReg+0x30>)
 800583e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005842:	2301      	movs	r3, #1
 8005844:	f002 f940 	bl	8007ac8 <HAL_I2C_Mem_Write>
 8005848:	b140      	cbz	r0, 800585c <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800584a:	4805      	ldr	r0, [pc, #20]	@ (8005860 <BSP_I2C4_WriteReg+0x30>)
 800584c:	f002 faf7 	bl	8007e3e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005850:	2804      	cmp	r0, #4
 8005852:	bf14      	ite	ne
 8005854:	f06f 0003 	mvnne.w	r0, #3
 8005858:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 800585c:	b004      	add	sp, #16
 800585e:	bd10      	pop	{r4, pc}
 8005860:	2400b140 	.word	0x2400b140

08005864 <BSP_I2C4_ReadReg>:
{
 8005864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005866:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 800586a:	9200      	str	r2, [sp, #0]
 800586c:	460a      	mov	r2, r1
 800586e:	4601      	mov	r1, r0
 8005870:	4808      	ldr	r0, [pc, #32]	@ (8005894 <BSP_I2C4_ReadReg+0x30>)
 8005872:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005876:	2301      	movs	r3, #1
 8005878:	f002 fa00 	bl	8007c7c <HAL_I2C_Mem_Read>
 800587c:	b140      	cbz	r0, 8005890 <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800587e:	4805      	ldr	r0, [pc, #20]	@ (8005894 <BSP_I2C4_ReadReg+0x30>)
 8005880:	f002 fadd 	bl	8007e3e <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005884:	2804      	cmp	r0, #4
 8005886:	bf14      	ite	ne
 8005888:	f06f 0003 	mvnne.w	r0, #3
 800588c:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005890:	b004      	add	sp, #16
 8005892:	bd10      	pop	{r4, pc}
 8005894:	2400b140 	.word	0x2400b140

08005898 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005898:	f000 bd08 	b.w	80062ac <HAL_GetTick>

0800589c <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 800589c:	4a09      	ldr	r2, [pc, #36]	@ (80058c4 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 800589e:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 80058a2:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80058a4:	684a      	ldr	r2, [r1, #4]
 80058a6:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 80058a8:	2201      	movs	r2, #1
 80058aa:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80058ac:	688a      	ldr	r2, [r1, #8]
 80058ae:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80058b0:	680a      	ldr	r2, [r1, #0]
 80058b2:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80058b4:	2200      	movs	r2, #0
 80058b6:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80058ba:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80058bc:	68ca      	ldr	r2, [r1, #12]
 80058be:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 80058c0:	f003 bede 	b.w	8009680 <HAL_QSPI_Init>
 80058c4:	52005000 	.word	0x52005000

080058c8 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 80058c8:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80058ca:	b988      	cbnz	r0, 80058f0 <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058cc:	4c0a      	ldr	r4, [pc, #40]	@ (80058f8 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 80058ce:	480b      	ldr	r0, [pc, #44]	@ (80058fc <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80058d0:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058d2:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80058d4:	b94b      	cbnz	r3, 80058ea <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058d6:	f7ff f9bc 	bl	8004c52 <MT25TL01G_EnableMemoryMappedModeSTR>
 80058da:	b110      	cbz	r0, 80058e2 <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80058dc:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 80058e0:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80058e2:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 80058e4:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 80058e6:	7023      	strb	r3, [r4, #0]
 80058e8:	e7fa      	b.n	80058e0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 80058ea:	f7ff f968 	bl	8004bbe <MT25TL01G_EnableMemoryMappedModeDTR>
 80058ee:	e7f4      	b.n	80058da <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 80058f0:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80058f4:	e7f4      	b.n	80058e0 <BSP_QSPI_EnableMemoryMappedMode+0x18>
 80058f6:	bf00      	nop
 80058f8:	2400bb9c 	.word	0x2400bb9c
 80058fc:	24000454 	.word	0x24000454

08005900 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005902:	460c      	mov	r4, r1
 8005904:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005906:	bb30      	cbnz	r0, 8005956 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005908:	4d17      	ldr	r5, [pc, #92]	@ (8005968 <BSP_QSPI_ConfigFlash+0x68>)
 800590a:	782b      	ldrb	r3, [r5, #0]
 800590c:	2b02      	cmp	r3, #2
 800590e:	d025      	beq.n	800595c <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005910:	fab2 f382 	clz	r3, r2
 8005914:	4e15      	ldr	r6, [pc, #84]	@ (800596c <BSP_QSPI_ConfigFlash+0x6c>)
 8005916:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005918:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800591a:	011b      	lsls	r3, r3, #4
 800591c:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 800591e:	f003 feaf 	bl	8009680 <HAL_QSPI_Init>
 8005922:	b9f0      	cbnz	r0, 8005962 <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005924:	786b      	ldrb	r3, [r5, #1]
 8005926:	2b03      	cmp	r3, #3
 8005928:	d10f      	bne.n	800594a <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 800592a:	2c03      	cmp	r4, #3
 800592c:	d105      	bne.n	800593a <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 800592e:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005930:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005932:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005934:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005936:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005938:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 800593a:	4630      	mov	r0, r6
 800593c:	f7ff f923 	bl	8004b86 <MT25TL01G_ExitQPIMode>
 8005940:	2800      	cmp	r0, #0
 8005942:	d0f4      	beq.n	800592e <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005944:	f06f 0004 	mvn.w	r0, #4
 8005948:	e7f6      	b.n	8005938 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 800594a:	2c03      	cmp	r4, #3
 800594c:	d1ef      	bne.n	800592e <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff f8fd 	bl	8004b4e <MT25TL01G_EnterQPIMode>
 8005954:	e7f4      	b.n	8005940 <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005956:	f06f 0001 	mvn.w	r0, #1
 800595a:	e7ed      	b.n	8005938 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 800595c:	f06f 0019 	mvn.w	r0, #25
 8005960:	e7ea      	b.n	8005938 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005962:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005966:	e7e7      	b.n	8005938 <BSP_QSPI_ConfigFlash+0x38>
 8005968:	2400bb9c 	.word	0x2400bb9c
 800596c:	24000454 	.word	0x24000454

08005970 <BSP_QSPI_Init>:
{
 8005970:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005974:	460c      	mov	r4, r1
 8005976:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005978:	2800      	cmp	r0, #0
 800597a:	f040 81ac 	bne.w	8005cd6 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800597e:	4d03      	ldr	r5, [pc, #12]	@ (800598c <BSP_QSPI_Init+0x1c>)
 8005980:	782f      	ldrb	r7, [r5, #0]
 8005982:	b12f      	cbz	r7, 8005990 <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005984:	2000      	movs	r0, #0
}
 8005986:	b024      	add	sp, #144	@ 0x90
 8005988:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800598c:	2400bb9c 	.word	0x2400bb9c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005990:	4bc3      	ldr	r3, [pc, #780]	@ (8005ca0 <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005992:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005996:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005998:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 800599a:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 800599e:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 80059a2:	48c0      	ldr	r0, [pc, #768]	@ (8005ca4 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 80059a4:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 80059a8:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059ac:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 80059b0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 80059b4:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 80059b8:	9201      	str	r2, [sp, #4]
 80059ba:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 80059bc:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80059be:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80059c2:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 80059c4:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 80059c6:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 80059ca:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 80059cc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059d0:	f042 0202 	orr.w	r2, r2, #2
 80059d4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059d8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059dc:	f002 0202 	and.w	r2, r2, #2
 80059e0:	9202      	str	r2, [sp, #8]
 80059e2:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80059e4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059e8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80059ec:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80059f0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80059f4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80059f8:	9203      	str	r2, [sp, #12]
 80059fa:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 80059fc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a00:	f042 0208 	orr.w	r2, r2, #8
 8005a04:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a08:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a0c:	f002 0208 	and.w	r2, r2, #8
 8005a10:	9204      	str	r2, [sp, #16]
 8005a12:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005a14:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a18:	f042 0220 	orr.w	r2, r2, #32
 8005a1c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a20:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a24:	f002 0220 	and.w	r2, r2, #32
 8005a28:	9205      	str	r2, [sp, #20]
 8005a2a:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005a2c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a30:	f042 0220 	orr.w	r2, r2, #32
 8005a34:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a38:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a3c:	f002 0220 	and.w	r2, r2, #32
 8005a40:	9206      	str	r2, [sp, #24]
 8005a42:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005a44:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a48:	f042 0220 	orr.w	r2, r2, #32
 8005a4c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a50:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a54:	f002 0220 	and.w	r2, r2, #32
 8005a58:	9207      	str	r2, [sp, #28]
 8005a5a:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005a5c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a60:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a64:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a68:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a6c:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005a70:	9208      	str	r2, [sp, #32]
 8005a72:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005a74:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a78:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a7c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a80:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a84:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005a88:	9209      	str	r2, [sp, #36]	@ 0x24
 8005a8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005a8c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a90:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005a94:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005a98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005a9c:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005aa0:	920a      	str	r2, [sp, #40]	@ 0x28
 8005aa2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005aa4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005aa8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005aac:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ab0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ab4:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005ab8:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005aba:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005abc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005ac0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005ac4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005ac8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005acc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005ad0:	930c      	str	r3, [sp, #48]	@ 0x30
 8005ad2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005ad4:	2302      	movs	r3, #2
 8005ad6:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ada:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005adc:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005ade:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005ae2:	f001 fc9f 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005ae6:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005ae8:	a916      	add	r1, sp, #88	@ 0x58
 8005aea:	486f      	ldr	r0, [pc, #444]	@ (8005ca8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005aec:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005aee:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005af2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005af6:	f001 fc95 	bl	8007424 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005afa:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005afe:	a916      	add	r1, sp, #88	@ 0x58
 8005b00:	486a      	ldr	r0, [pc, #424]	@ (8005cac <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005b02:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005b04:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b06:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005b08:	f001 fc8c 	bl	8007424 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005b0c:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005b0e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005b12:	4867      	ldr	r0, [pc, #412]	@ (8005cb0 <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005b14:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b18:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005b1a:	f001 fc83 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005b1e:	a916      	add	r1, sp, #88	@ 0x58
 8005b20:	4864      	ldr	r0, [pc, #400]	@ (8005cb4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005b22:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005b26:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005b2a:	f001 fc7b 	bl	8007424 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005b2e:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005b30:	a916      	add	r1, sp, #88	@ 0x58
 8005b32:	485f      	ldr	r0, [pc, #380]	@ (8005cb0 <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005b34:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b36:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005b38:	f001 fc74 	bl	8007424 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005b3c:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005b3e:	a916      	add	r1, sp, #88	@ 0x58
 8005b40:	485c      	ldr	r0, [pc, #368]	@ (8005cb4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005b42:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005b44:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005b46:	f001 fc6d 	bl	8007424 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005b4a:	a916      	add	r1, sp, #88	@ 0x58
 8005b4c:	4856      	ldr	r0, [pc, #344]	@ (8005ca8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005b4e:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005b52:	f001 fc67 	bl	8007424 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005b56:	a916      	add	r1, sp, #88	@ 0x58
 8005b58:	4856      	ldr	r0, [pc, #344]	@ (8005cb4 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005b5a:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005b5e:	f001 fc61 	bl	8007424 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005b62:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b66:	a916      	add	r1, sp, #88	@ 0x58
 8005b68:	484f      	ldr	r0, [pc, #316]	@ (8005ca8 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005b6a:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005b6c:	f001 fc5a 	bl	8007424 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005b70:	463a      	mov	r2, r7
 8005b72:	210f      	movs	r1, #15
 8005b74:	205c      	movs	r0, #92	@ 0x5c
 8005b76:	f000 fbc9 	bl	800630c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005b7a:	205c      	movs	r0, #92	@ 0x5c
 8005b7c:	f000 fbf8 	bl	8006370 <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005b80:	a811      	add	r0, sp, #68	@ 0x44
 8005b82:	f7fe ff38 	bl	80049f6 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b86:	7863      	ldrb	r3, [r4, #1]
 8005b88:	4a4b      	ldr	r2, [pc, #300]	@ (8005cb8 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005b8a:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005b8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005b92:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005b94:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005b96:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005b9a:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005b9e:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005ba2:	a90d      	add	r1, sp, #52	@ 0x34
 8005ba4:	4845      	ldr	r0, [pc, #276]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005ba6:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005ba8:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005baa:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005bac:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005bae:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005bb0:	f7ff fe74 	bl	800589c <MX_QSPI_Init>
 8005bb4:	2800      	cmp	r0, #0
 8005bb6:	f040 8091 	bne.w	8005cdc <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005bba:	2103      	movs	r1, #3
 8005bbc:	483f      	ldr	r0, [pc, #252]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005bbe:	f7ff f88e 	bl	8004cde <MT25TL01G_ResetEnable>
 8005bc2:	2800      	cmp	r0, #0
 8005bc4:	f040 8084 	bne.w	8005cd0 <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005bc8:	2103      	movs	r1, #3
 8005bca:	483c      	ldr	r0, [pc, #240]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005bcc:	f7ff f8a8 	bl	8004d20 <MT25TL01G_ResetMemory>
 8005bd0:	2800      	cmp	r0, #0
 8005bd2:	d17d      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005bd4:	7869      	ldrb	r1, [r5, #1]
 8005bd6:	4839      	ldr	r0, [pc, #228]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005bd8:	f7fe ff1e 	bl	8004a18 <MT25TL01G_AutoPollingMemReady>
 8005bdc:	4601      	mov	r1, r0
 8005bde:	2800      	cmp	r0, #0
 8005be0:	d176      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005be2:	4836      	ldr	r0, [pc, #216]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005be4:	f7ff f87b 	bl	8004cde <MT25TL01G_ResetEnable>
 8005be8:	4601      	mov	r1, r0
 8005bea:	2800      	cmp	r0, #0
 8005bec:	d170      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005bee:	4833      	ldr	r0, [pc, #204]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005bf0:	f7ff f896 	bl	8004d20 <MT25TL01G_ResetMemory>
 8005bf4:	4601      	mov	r1, r0
 8005bf6:	2800      	cmp	r0, #0
 8005bf8:	d16a      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005bfa:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005bfc:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005bfe:	482f      	ldr	r0, [pc, #188]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005c00:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c02:	f7fe ff09 	bl	8004a18 <MT25TL01G_AutoPollingMemReady>
 8005c06:	2800      	cmp	r0, #0
 8005c08:	d162      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c0a:	7869      	ldrb	r1, [r5, #1]
 8005c0c:	482b      	ldr	r0, [pc, #172]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005c0e:	f7fe ff72 	bl	8004af6 <MT25TL01G_Enter4BytesAddressMode>
 8005c12:	2800      	cmp	r0, #0
 8005c14:	d15c      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005c16:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005c1a:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005c1e:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c20:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005c24:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005c26:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c28:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005c2a:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005c2c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005c30:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005c32:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005c34:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8005c38:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005c3c:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c40:	481e      	ldr	r0, [pc, #120]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005c42:	f003 fd69 	bl	8009718 <HAL_QSPI_Command>
 8005c46:	2800      	cmp	r0, #0
 8005c48:	d142      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c4e:	f10d 0102 	add.w	r1, sp, #2
 8005c52:	481a      	ldr	r0, [pc, #104]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005c54:	f003 fe01 	bl	800985a <HAL_QSPI_Receive>
 8005c58:	2800      	cmp	r0, #0
 8005c5a:	d139      	bne.n	8005cd0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c5c:	7869      	ldrb	r1, [r5, #1]
 8005c5e:	4817      	ldr	r0, [pc, #92]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005c60:	f7fe ff05 	bl	8004a6e <MT25TL01G_WriteEnable>
 8005c64:	bba0      	cbnz	r0, 8005cd0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005c66:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c68:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c6c:	a916      	add	r1, sp, #88	@ 0x58
 8005c6e:	4813      	ldr	r0, [pc, #76]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8005c70:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8005c72:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8005c76:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c7a:	051b      	lsls	r3, r3, #20
 8005c7c:	0d1b      	lsrs	r3, r3, #20
 8005c7e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005c82:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005c86:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c8a:	f003 fd45 	bl	8009718 <HAL_QSPI_Command>
 8005c8e:	b9f8      	cbnz	r0, 8005cd0 <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005c90:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005c94:	f10d 0102 	add.w	r1, sp, #2
 8005c98:	4808      	ldr	r0, [pc, #32]	@ (8005cbc <BSP_QSPI_Init+0x34c>)
 8005c9a:	f003 fd82 	bl	80097a2 <HAL_QSPI_Transmit>
 8005c9e:	e00f      	b.n	8005cc0 <BSP_QSPI_Init+0x350>
 8005ca0:	58024400 	.word	0x58024400
 8005ca4:	58020400 	.word	0x58020400
 8005ca8:	58021800 	.word	0x58021800
 8005cac:	58020c00 	.word	0x58020c00
 8005cb0:	58021c00 	.word	0x58021c00
 8005cb4:	58021400 	.word	0x58021400
 8005cb8:	08024118 	.word	0x08024118
 8005cbc:	24000454 	.word	0x24000454
 8005cc0:	b930      	cbnz	r0, 8005cd0 <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 8005cc2:	7862      	ldrb	r2, [r4, #1]
 8005cc4:	7821      	ldrb	r1, [r4, #0]
 8005cc6:	f7ff fe1b 	bl	8005900 <BSP_QSPI_ConfigFlash>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	f43f ae5a 	beq.w	8005984 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 8005cd0:	f06f 0004 	mvn.w	r0, #4
 8005cd4:	e657      	b.n	8005986 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 8005cd6:	f06f 0001 	mvn.w	r0, #1
 8005cda:	e654      	b.n	8005986 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 8005cdc:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005ce0:	e651      	b.n	8005986 <BSP_QSPI_Init+0x16>
 8005ce2:	bf00      	nop

08005ce4 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8005ce4:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8005ce6:	4604      	mov	r4, r0
 8005ce8:	b970      	cbnz	r0, 8005d08 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8005cea:	4b09      	ldr	r3, [pc, #36]	@ (8005d10 <BSP_SDRAM_DeInit+0x2c>)
 8005cec:	4809      	ldr	r0, [pc, #36]	@ (8005d14 <BSP_SDRAM_DeInit+0x30>)
 8005cee:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8005cf0:	f005 fb64 	bl	800b3bc <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8005cf4:	207a      	movs	r0, #122	@ 0x7a
 8005cf6:	f000 fb49 	bl	800638c <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8005cfa:	4807      	ldr	r0, [pc, #28]	@ (8005d18 <BSP_SDRAM_DeInit+0x34>)
 8005cfc:	4b07      	ldr	r3, [pc, #28]	@ (8005d1c <BSP_SDRAM_DeInit+0x38>)
 8005cfe:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005d00:	f003 fa42 	bl	8009188 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 8005d04:	4620      	mov	r0, r4
}
 8005d06:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005d08:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005d0c:	e7fb      	b.n	8005d06 <BSP_SDRAM_DeInit+0x22>
 8005d0e:	bf00      	nop
 8005d10:	52004140 	.word	0x52004140
 8005d14:	2400bca0 	.word	0x2400bca0
 8005d18:	2400bba8 	.word	0x2400bba8
 8005d1c:	52000040 	.word	0x52000040

08005d20 <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005d20:	2201      	movs	r2, #1
 8005d22:	4915      	ldr	r1, [pc, #84]	@ (8005d78 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005d24:	4b15      	ldr	r3, [pc, #84]	@ (8005d7c <MX_SDRAM_Init+0x5c>)
{
 8005d26:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8005d28:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8005d2c:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005d2e:	2104      	movs	r1, #4
 8005d30:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005d32:	2440      	movs	r4, #64	@ 0x40
{
 8005d34:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8005d36:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8005d3a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8005d3e:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8005d42:	2200      	movs	r2, #0
 8005d44:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8005d48:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8005d4c:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 8005d50:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8005d52:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005d54:	2207      	movs	r2, #7
 8005d56:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8005d58:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d5c:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 8005d5e:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8005d60:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8005d64:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8005d68:	f005 fb00 	bl	800b36c <HAL_SDRAM_Init>
}
 8005d6c:	3800      	subs	r0, #0
 8005d6e:	bf18      	it	ne
 8005d70:	2001      	movne	r0, #1
 8005d72:	b008      	add	sp, #32
 8005d74:	bd10      	pop	{r4, pc}
 8005d76:	bf00      	nop
 8005d78:	52004140 	.word	0x52004140
 8005d7c:	2400bca0 	.word	0x2400bca0

08005d80 <BSP_SDRAM_Init>:
{
 8005d80:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d82:	4605      	mov	r5, r0
{
 8005d84:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8005d86:	2800      	cmp	r0, #0
 8005d88:	f040 80dd 	bne.w	8005f46 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d8c:	4b71      	ldr	r3, [pc, #452]	@ (8005f54 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005d8e:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005d90:	a909      	add	r1, sp, #36	@ 0x24
 8005d92:	4871      	ldr	r0, [pc, #452]	@ (8005f58 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d94:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8005d98:	4c70      	ldr	r4, [pc, #448]	@ (8005f5c <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005d9a:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005d9e:	4e70      	ldr	r6, [pc, #448]	@ (8005f60 <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8005da0:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005da4:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005da8:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8005dac:	9201      	str	r2, [sp, #4]
 8005dae:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 8005db0:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005db4:	f042 0201 	orr.w	r2, r2, #1
 8005db8:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005dbc:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005dc0:	f002 0201 	and.w	r2, r2, #1
 8005dc4:	9202      	str	r2, [sp, #8]
 8005dc6:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dd8:	f002 0208 	and.w	r2, r2, #8
 8005ddc:	9203      	str	r2, [sp, #12]
 8005dde:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005de4:	f042 0210 	orr.w	r2, r2, #16
 8005de8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005df0:	f002 0210 	and.w	r2, r2, #16
 8005df4:	9204      	str	r2, [sp, #16]
 8005df6:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8005df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e08:	f002 0220 	and.w	r2, r2, #32
 8005e0c:	9205      	str	r2, [sp, #20]
 8005e0e:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8005e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e14:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e18:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e20:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005e24:	9206      	str	r2, [sp, #24]
 8005e26:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e2c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e38:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005e3c:	9207      	str	r2, [sp, #28]
 8005e3e:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e44:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005e48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005e4c:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8005e4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e52:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e56:	9308      	str	r3, [sp, #32]
 8005e58:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005e5a:	2301      	movs	r3, #1
 8005e5c:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8005e60:	230c      	movs	r3, #12
 8005e62:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8005e66:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8005e6a:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8005e6c:	f001 fada 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e70:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e74:	a909      	add	r1, sp, #36	@ 0x24
 8005e76:	483b      	ldr	r0, [pc, #236]	@ (8005f64 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e78:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8005e7a:	f001 fad3 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e7e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e82:	a909      	add	r1, sp, #36	@ 0x24
 8005e84:	4838      	ldr	r0, [pc, #224]	@ (8005f68 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8005e86:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8005e88:	f001 facc 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e8c:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e90:	a909      	add	r1, sp, #36	@ 0x24
 8005e92:	4836      	ldr	r0, [pc, #216]	@ (8005f6c <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8005e94:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8005e96:	f001 fac5 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005e9a:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005e9e:	a909      	add	r1, sp, #36	@ 0x24
 8005ea0:	4833      	ldr	r0, [pc, #204]	@ (8005f70 <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8005ea2:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8005ea4:	f001 fabe 	bl	8007424 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005ea8:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005eac:	a909      	add	r1, sp, #36	@ 0x24
 8005eae:	4831      	ldr	r0, [pc, #196]	@ (8005f74 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8005eb0:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8005eb2:	f001 fab7 	bl	8007424 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005eb6:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8005eba:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005ebe:	f240 2002 	movw	r0, #514	@ 0x202
 8005ec2:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8005ec6:	6334      	str	r4, [r6, #48]	@ 0x30
 8005ec8:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8005eca:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8005ece:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8005ed2:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8005ed4:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005ed6:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 8005ed8:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8005eda:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8005ede:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005ee2:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005ee6:	4b24      	ldr	r3, [pc, #144]	@ (8005f78 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8005ee8:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8005eea:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8005eec:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8005ef0:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8005ef4:	f003 f948 	bl	8009188 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 8005ef8:	4620      	mov	r0, r4
 8005efa:	f003 f8d6 	bl	80090aa <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8005efe:	462a      	mov	r2, r5
 8005f00:	210f      	movs	r1, #15
 8005f02:	207a      	movs	r0, #122	@ 0x7a
 8005f04:	f000 fa02 	bl	800630c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8005f08:	207a      	movs	r0, #122	@ 0x7a
 8005f0a:	f000 fa31 	bl	8006370 <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8005f0e:	4630      	mov	r0, r6
 8005f10:	f7ff ff06 	bl	8005d20 <MX_SDRAM_Init>
 8005f14:	b9d0      	cbnz	r0, 8005f4c <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8005f16:	4919      	ldr	r1, [pc, #100]	@ (8005f7c <BSP_SDRAM_Init+0x1fc>)
 8005f18:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8005f1a:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8005f1e:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8005f22:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8005f24:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8005f28:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8005f2a:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005f2e:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005f32:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8005f34:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8005f36:	f7fe fd31 	bl	800499c <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8005f3a:	2800      	cmp	r0, #0
 8005f3c:	bf18      	it	ne
 8005f3e:	f06f 0004 	mvnne.w	r0, #4
}
 8005f42:	b00f      	add	sp, #60	@ 0x3c
 8005f44:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8005f46:	f06f 0001 	mvn.w	r0, #1
 8005f4a:	e7fa      	b.n	8005f42 <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8005f4c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8005f50:	e7f7      	b.n	8005f42 <BSP_SDRAM_Init+0x1c2>
 8005f52:	bf00      	nop
 8005f54:	58024400 	.word	0x58024400
 8005f58:	58020c00 	.word	0x58020c00
 8005f5c:	2400bc14 	.word	0x2400bc14
 8005f60:	2400bca0 	.word	0x2400bca0
 8005f64:	58021000 	.word	0x58021000
 8005f68:	58021400 	.word	0x58021400
 8005f6c:	58021800 	.word	0x58021800
 8005f70:	58021c00 	.word	0x58021c00
 8005f74:	58022000 	.word	0x58022000
 8005f78:	52000040 	.word	0x52000040
 8005f7c:	2400bc80 	.word	0x2400bc80

08005f80 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8005f80:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	460c      	mov	r4, r1
 8005f86:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f88:	4606      	mov	r6, r0
 8005f8a:	2800      	cmp	r0, #0
 8005f8c:	d15c      	bne.n	8006048 <BSP_TS_Init+0xc8>
 8005f8e:	680b      	ldr	r3, [r1, #0]
 8005f90:	1e5a      	subs	r2, r3, #1
 8005f92:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8005f96:	d257      	bcs.n	8006048 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005f98:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8005f9a:	1e51      	subs	r1, r2, #1
 8005f9c:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 8005fa0:	d252      	bcs.n	8006048 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 8005fa2:	4293      	cmp	r3, r2
 8005fa4:	bf28      	it	cs
 8005fa6:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8005fa8:	68e2      	ldr	r2, [r4, #12]
 8005faa:	429a      	cmp	r2, r3
 8005fac:	d84c      	bhi.n	8006048 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005fae:	2370      	movs	r3, #112	@ 0x70
 8005fb0:	2254      	movs	r2, #84	@ 0x54
 8005fb2:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005fb6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800608c <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8005fba:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 8005fbe:	4b2e      	ldr	r3, [pc, #184]	@ (8006078 <BSP_TS_Init+0xf8>)
 8005fc0:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8005fc2:	4b2e      	ldr	r3, [pc, #184]	@ (800607c <BSP_TS_Init+0xfc>)
 8005fc4:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8005fc6:	4b2e      	ldr	r3, [pc, #184]	@ (8006080 <BSP_TS_Init+0x100>)
 8005fc8:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8005fca:	4b2e      	ldr	r3, [pc, #184]	@ (8006084 <BSP_TS_Init+0x104>)
 8005fcc:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 8005fce:	4b2e      	ldr	r3, [pc, #184]	@ (8006088 <BSP_TS_Init+0x108>)
 8005fd0:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005fd2:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005fd6:	a906      	add	r1, sp, #24
 8005fd8:	482c      	ldr	r0, [pc, #176]	@ (800608c <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8005fda:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8005fde:	f7fe fbe3 	bl	80047a8 <FT6X06_RegisterBusIO>
 8005fe2:	b9c0      	cbnz	r0, 8006016 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8005fe4:	4669      	mov	r1, sp
 8005fe6:	4829      	ldr	r0, [pc, #164]	@ (800608c <BSP_TS_Init+0x10c>)
 8005fe8:	f7fe fb28 	bl	800463c <FT6X06_ReadID>
 8005fec:	b998      	cbnz	r0, 8006016 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 8005fee:	9b00      	ldr	r3, [sp, #0]
 8005ff0:	2b11      	cmp	r3, #17
 8005ff2:	d110      	bne.n	8006016 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8005ff4:	a903      	add	r1, sp, #12
 8005ff6:	4825      	ldr	r0, [pc, #148]	@ (800608c <BSP_TS_Init+0x10c>)
 8005ff8:	f7fe fad4 	bl	80045a4 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8005ffc:	4f24      	ldr	r7, [pc, #144]	@ (8006090 <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8005ffe:	4b25      	ldr	r3, [pc, #148]	@ (8006094 <BSP_TS_Init+0x114>)
 8006000:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800609c <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 8006004:	4821      	ldr	r0, [pc, #132]	@ (800608c <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8006006:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 800600a:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	4798      	blx	r3
 8006012:	4605      	mov	r5, r0
 8006014:	b1d8      	cbz	r0, 800604e <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 8006016:	b116      	cbz	r6, 800601e <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 8006018:	f04f 35ff 	mov.w	r5, #4294967295
 800601c:	e010      	b.n	8006040 <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 800601e:	2601      	movs	r6, #1
 8006020:	e7d7      	b.n	8005fd2 <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006022:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006024:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8006026:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 8006028:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800602a:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 800602c:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800602e:	68e3      	ldr	r3, [r4, #12]
 8006030:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006032:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006034:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006036:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006038:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 800603a:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 800603c:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 8006040:	4628      	mov	r0, r5
 8006042:	b00c      	add	sp, #48	@ 0x30
 8006044:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006048:	f06f 0501 	mvn.w	r5, #1
  return ret;
 800604c:	e7f8      	b.n	8006040 <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800604e:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006050:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006052:	4e11      	ldr	r6, [pc, #68]	@ (8006098 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006054:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006056:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006058:	6863      	ldr	r3, [r4, #4]
 800605a:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 800605c:	68a3      	ldr	r3, [r4, #8]
 800605e:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 8006060:	68e3      	ldr	r3, [r4, #12]
 8006062:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006064:	f8d8 3000 	ldr.w	r3, [r8]
 8006068:	69db      	ldr	r3, [r3, #28]
 800606a:	4798      	blx	r3
 800606c:	2800      	cmp	r0, #0
 800606e:	dad8      	bge.n	8006022 <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8006070:	f06f 0504 	mvn.w	r5, #4
 8006074:	e7e4      	b.n	8006040 <BSP_TS_Init+0xc0>
 8006076:	bf00      	nop
 8006078:	08005589 	.word	0x08005589
 800607c:	080054f5 	.word	0x080054f5
 8006080:	08005865 	.word	0x08005865
 8006084:	08005831 	.word	0x08005831
 8006088:	08005899 	.word	0x08005899
 800608c:	2400bcd4 	.word	0x2400bcd4
 8006090:	2400bcfc 	.word	0x2400bcfc
 8006094:	24000038 	.word	0x24000038
 8006098:	2400bd00 	.word	0x2400bd00
 800609c:	2400bd28 	.word	0x2400bd28

080060a0 <BSP_TS_GetState>:
{
 80060a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80060a2:	460c      	mov	r4, r1
 80060a4:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 80060a6:	2800      	cmp	r0, #0
 80060a8:	d14d      	bne.n	8006146 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 80060aa:	4b28      	ldr	r3, [pc, #160]	@ (800614c <BSP_TS_GetState+0xac>)
 80060ac:	a901      	add	r1, sp, #4
 80060ae:	4a28      	ldr	r2, [pc, #160]	@ (8006150 <BSP_TS_GetState+0xb0>)
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	6810      	ldr	r0, [r2, #0]
 80060b4:	691b      	ldr	r3, [r3, #16]
 80060b6:	4798      	blx	r3
 80060b8:	2800      	cmp	r0, #0
 80060ba:	db41      	blt.n	8006140 <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80060bc:	4925      	ldr	r1, [pc, #148]	@ (8006154 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 80060be:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80060c0:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80060c2:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 80060c4:	2e00      	cmp	r6, #0
 80060c6:	d037      	beq.n	8006138 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80060c8:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80060ca:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80060ce:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 80060d2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80060d6:	bf1e      	ittt	ne
 80060d8:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 80060da:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 80060dc:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80060de:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80060e2:	bf1c      	itt	ne
 80060e4:	f10e 3cff 	addne.w	ip, lr, #4294967295
 80060e8:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80060ec:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80060f0:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80060f2:	bf44      	itt	mi
 80060f4:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80060f8:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80060fa:	680f      	ldr	r7, [r1, #0]
 80060fc:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80060fe:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 8006100:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006102:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006104:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006106:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 800610a:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 800610e:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8006110:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8006112:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 8006114:	bf8c      	ite	hi
 8006116:	eba2 0c05 	subhi.w	ip, r2, r5
 800611a:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 800611e:	4283      	cmp	r3, r0
 8006120:	bf8c      	ite	hi
 8006122:	1a1e      	subhi	r6, r3, r0
 8006124:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8006126:	4567      	cmp	r7, ip
 8006128:	d301      	bcc.n	800612e <BSP_TS_GetState+0x8e>
 800612a:	42b7      	cmp	r7, r6
 800612c:	d205      	bcs.n	800613a <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 800612e:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8006130:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 8006132:	2000      	movs	r0, #0
}
 8006134:	b005      	add	sp, #20
 8006136:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006138:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 800613a:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800613e:	e7f8      	b.n	8006132 <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8006140:	f06f 0004 	mvn.w	r0, #4
 8006144:	e7f6      	b.n	8006134 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006146:	f06f 0001 	mvn.w	r0, #1
  return ret;
 800614a:	e7f3      	b.n	8006134 <BSP_TS_GetState+0x94>
 800614c:	2400bd28 	.word	0x2400bd28
 8006150:	2400bcfc 	.word	0x2400bcfc
 8006154:	2400bd00 	.word	0x2400bd00

08006158 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006158:	4b2d      	ldr	r3, [pc, #180]	@ (8006210 <SystemInit+0xb8>)
 800615a:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800615e:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 8006162:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006166:	691a      	ldr	r2, [r3, #16]
 8006168:	f042 0210 	orr.w	r2, r2, #16
 800616c:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800616e:	4a29      	ldr	r2, [pc, #164]	@ (8006214 <SystemInit+0xbc>)
 8006170:	6813      	ldr	r3, [r2, #0]
 8006172:	f003 030f 	and.w	r3, r3, #15
 8006176:	2b06      	cmp	r3, #6
 8006178:	d805      	bhi.n	8006186 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 800617a:	6813      	ldr	r3, [r2, #0]
 800617c:	f023 030f 	bic.w	r3, r3, #15
 8006180:	f043 0307 	orr.w	r3, r3, #7
 8006184:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006186:	4b24      	ldr	r3, [pc, #144]	@ (8006218 <SystemInit+0xc0>)
 8006188:	681a      	ldr	r2, [r3, #0]
 800618a:	f042 0201 	orr.w	r2, r2, #1
 800618e:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8006190:	2200      	movs	r2, #0
 8006192:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006194:	4a21      	ldr	r2, [pc, #132]	@ (800621c <SystemInit+0xc4>)
 8006196:	6819      	ldr	r1, [r3, #0]
 8006198:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800619a:	491e      	ldr	r1, [pc, #120]	@ (8006214 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 800619c:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800619e:	680a      	ldr	r2, [r1, #0]
 80061a0:	0712      	lsls	r2, r2, #28
 80061a2:	d505      	bpl.n	80061b0 <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80061a4:	680a      	ldr	r2, [r1, #0]
 80061a6:	f022 020f 	bic.w	r2, r2, #15
 80061aa:	f042 0207 	orr.w	r2, r2, #7
 80061ae:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80061b0:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 80061b2:	491b      	ldr	r1, [pc, #108]	@ (8006220 <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 80061b4:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 80061b6:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 80061b8:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 80061ba:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 80061bc:	4919      	ldr	r1, [pc, #100]	@ (8006224 <SystemInit+0xcc>)
 80061be:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80061c0:	4919      	ldr	r1, [pc, #100]	@ (8006228 <SystemInit+0xd0>)
 80061c2:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80061c4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80061c6:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80061c8:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80061ca:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80061cc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80061ce:	6819      	ldr	r1, [r3, #0]
 80061d0:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80061d4:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80061d6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80061d8:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80061dc:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80061e0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80061e4:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80061e8:	4b10      	ldr	r3, [pc, #64]	@ (800622c <SystemInit+0xd4>)
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	0c1b      	lsrs	r3, r3, #16
 80061ee:	041b      	lsls	r3, r3, #16
 80061f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80061f4:	d203      	bcs.n	80061fe <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80061f6:	4b0e      	ldr	r3, [pc, #56]	@ (8006230 <SystemInit+0xd8>)
 80061f8:	2201      	movs	r2, #1
 80061fa:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80061fe:	4b0d      	ldr	r3, [pc, #52]	@ (8006234 <SystemInit+0xdc>)
 8006200:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8006204:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 8006206:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 800620a:	4b01      	ldr	r3, [pc, #4]	@ (8006210 <SystemInit+0xb8>)
 800620c:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 800620e:	4770      	bx	lr
 8006210:	e000ed00 	.word	0xe000ed00
 8006214:	52002000 	.word	0x52002000
 8006218:	58024400 	.word	0x58024400
 800621c:	eaf6ed7f 	.word	0xeaf6ed7f
 8006220:	02020200 	.word	0x02020200
 8006224:	01ff0000 	.word	0x01ff0000
 8006228:	01010280 	.word	0x01010280
 800622c:	5c001000 	.word	0x5c001000
 8006230:	51008000 	.word	0x51008000
 8006234:	52004000 	.word	0x52004000

08006238 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006238:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800623a:	2003      	movs	r0, #3
 800623c:	f000 f854 	bl	80062e8 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8006240:	f003 fef8 	bl	800a034 <HAL_RCC_GetSysClockFreq>
 8006244:	490f      	ldr	r1, [pc, #60]	@ (8006284 <HAL_Init+0x4c>)
 8006246:	4a10      	ldr	r2, [pc, #64]	@ (8006288 <HAL_Init+0x50>)
 8006248:	698b      	ldr	r3, [r1, #24]
 800624a:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800624e:	5cd3      	ldrb	r3, [r2, r3]
 8006250:	f003 031f 	and.w	r3, r3, #31
 8006254:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006256:	698b      	ldr	r3, [r1, #24]
 8006258:	f003 030f 	and.w	r3, r3, #15
 800625c:	5cd3      	ldrb	r3, [r2, r3]
 800625e:	4a0b      	ldr	r2, [pc, #44]	@ (800628c <HAL_Init+0x54>)
 8006260:	f003 031f 	and.w	r3, r3, #31
 8006264:	fa20 f303 	lsr.w	r3, r0, r3
 8006268:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800626a:	4b09      	ldr	r3, [pc, #36]	@ (8006290 <HAL_Init+0x58>)
 800626c:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800626e:	2000      	movs	r0, #0
 8006270:	f7fb fc16 	bl	8001aa0 <HAL_InitTick>
 8006274:	4604      	mov	r4, r0
 8006276:	b918      	cbnz	r0, 8006280 <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006278:	f7fb f8b0 	bl	80013dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 800627c:	4620      	mov	r0, r4
 800627e:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006280:	2401      	movs	r4, #1
 8006282:	e7fb      	b.n	800627c <HAL_Init+0x44>
 8006284:	58024400 	.word	0x58024400
 8006288:	08024120 	.word	0x08024120
 800628c:	24000068 	.word	0x24000068
 8006290:	2400006c 	.word	0x2400006c

08006294 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006294:	4a03      	ldr	r2, [pc, #12]	@ (80062a4 <HAL_IncTick+0x10>)
 8006296:	4b04      	ldr	r3, [pc, #16]	@ (80062a8 <HAL_IncTick+0x14>)
 8006298:	6811      	ldr	r1, [r2, #0]
 800629a:	781b      	ldrb	r3, [r3, #0]
 800629c:	440b      	add	r3, r1
 800629e:	6013      	str	r3, [r2, #0]
}
 80062a0:	4770      	bx	lr
 80062a2:	bf00      	nop
 80062a4:	2400bd2c 	.word	0x2400bd2c
 80062a8:	24000070 	.word	0x24000070

080062ac <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 80062ac:	4b01      	ldr	r3, [pc, #4]	@ (80062b4 <HAL_GetTick+0x8>)
 80062ae:	6818      	ldr	r0, [r3, #0]
}
 80062b0:	4770      	bx	lr
 80062b2:	bf00      	nop
 80062b4:	2400bd2c 	.word	0x2400bd2c

080062b8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80062b8:	b538      	push	{r3, r4, r5, lr}
 80062ba:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80062bc:	f7ff fff6 	bl	80062ac <HAL_GetTick>
 80062c0:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80062c2:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 80062c4:	bf1e      	ittt	ne
 80062c6:	4b04      	ldrne	r3, [pc, #16]	@ (80062d8 <HAL_Delay+0x20>)
 80062c8:	781b      	ldrbne	r3, [r3, #0]
 80062ca:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80062cc:	f7ff ffee 	bl	80062ac <HAL_GetTick>
 80062d0:	1b43      	subs	r3, r0, r5
 80062d2:	42a3      	cmp	r3, r4
 80062d4:	d3fa      	bcc.n	80062cc <HAL_Delay+0x14>
  {
  }
}
 80062d6:	bd38      	pop	{r3, r4, r5, pc}
 80062d8:	24000070 	.word	0x24000070

080062dc <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80062dc:	4b01      	ldr	r3, [pc, #4]	@ (80062e4 <HAL_GetREVID+0x8>)
 80062de:	6818      	ldr	r0, [r3, #0]
}
 80062e0:	0c00      	lsrs	r0, r0, #16
 80062e2:	4770      	bx	lr
 80062e4:	5c001000 	.word	0x5c001000

080062e8 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062e8:	4907      	ldr	r1, [pc, #28]	@ (8006308 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062ea:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062ec:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062ee:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062f2:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80062f6:	0412      	lsls	r2, r2, #16
 80062f8:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062fc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8006300:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 8006304:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 8006306:	4770      	bx	lr
 8006308:	e000ed00 	.word	0xe000ed00

0800630c <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800630c:	4b16      	ldr	r3, [pc, #88]	@ (8006368 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800630e:	b530      	push	{r4, r5, lr}
 8006310:	68dc      	ldr	r4, [r3, #12]
 8006312:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006316:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800631a:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800631c:	2b04      	cmp	r3, #4
 800631e:	bf28      	it	cs
 8006320:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006322:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006324:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006328:	bf8c      	ite	hi
 800632a:	3c03      	subhi	r4, #3
 800632c:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800632e:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 8006332:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006334:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006338:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800633c:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006340:	fa03 f304 	lsl.w	r3, r3, r4
 8006344:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006348:	ea4f 1303 	mov.w	r3, r3, lsl #4
 800634c:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800634e:	db06      	blt.n	800635e <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006350:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006354:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006358:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 800635c:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800635e:	f000 000f 	and.w	r0, r0, #15
 8006362:	4a02      	ldr	r2, [pc, #8]	@ (800636c <HAL_NVIC_SetPriority+0x60>)
 8006364:	5413      	strb	r3, [r2, r0]
 8006366:	e7f9      	b.n	800635c <HAL_NVIC_SetPriority+0x50>
 8006368:	e000ed00 	.word	0xe000ed00
 800636c:	e000ed14 	.word	0xe000ed14

08006370 <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006370:	2800      	cmp	r0, #0
 8006372:	db07      	blt.n	8006384 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006374:	2301      	movs	r3, #1
 8006376:	0941      	lsrs	r1, r0, #5
 8006378:	f000 001f 	and.w	r0, r0, #31
 800637c:	4a02      	ldr	r2, [pc, #8]	@ (8006388 <HAL_NVIC_EnableIRQ+0x18>)
 800637e:	4083      	lsls	r3, r0
 8006380:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006384:	4770      	bx	lr
 8006386:	bf00      	nop
 8006388:	e000e100 	.word	0xe000e100

0800638c <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800638c:	2800      	cmp	r0, #0
 800638e:	db0c      	blt.n	80063aa <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006390:	0943      	lsrs	r3, r0, #5
 8006392:	2201      	movs	r2, #1
 8006394:	f000 001f 	and.w	r0, r0, #31
 8006398:	4904      	ldr	r1, [pc, #16]	@ (80063ac <HAL_NVIC_DisableIRQ+0x20>)
 800639a:	3320      	adds	r3, #32
 800639c:	4082      	lsls	r2, r0
 800639e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80063a2:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063a6:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 80063aa:	4770      	bx	lr
 80063ac:	e000e100 	.word	0xe000e100

080063b0 <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 80063b0:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80063b4:	4b04      	ldr	r3, [pc, #16]	@ (80063c8 <HAL_MPU_Disable+0x18>)
 80063b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063b8:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 80063bc:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80063be:	2200      	movs	r2, #0
 80063c0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 80063c4:	4770      	bx	lr
 80063c6:	bf00      	nop
 80063c8:	e000ed00 	.word	0xe000ed00

080063cc <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80063cc:	4b06      	ldr	r3, [pc, #24]	@ (80063e8 <HAL_MPU_Enable+0x1c>)
 80063ce:	f040 0001 	orr.w	r0, r0, #1
 80063d2:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80063d6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063d8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80063dc:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80063de:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80063e2:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80063e6:	4770      	bx	lr
 80063e8:	e000ed00 	.word	0xe000ed00

080063ec <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80063ec:	7843      	ldrb	r3, [r0, #1]
 80063ee:	4a14      	ldr	r2, [pc, #80]	@ (8006440 <HAL_MPU_ConfigRegion+0x54>)
 80063f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80063f4:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80063f8:	f023 0301 	bic.w	r3, r3, #1
 80063fc:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8006400:	6843      	ldr	r3, [r0, #4]
 8006402:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8006406:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006408:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800640a:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800640c:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8006410:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006412:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8006414:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006416:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800641a:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800641c:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8006420:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006422:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8006426:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8006428:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 800642c:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800642e:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 8006432:	7a01      	ldrb	r1, [r0, #8]
 8006434:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006438:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 800643c:	4770      	bx	lr
 800643e:	bf00      	nop
 8006440:	e000ed00 	.word	0xe000ed00

08006444 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006444:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006446:	4604      	mov	r4, r0
 8006448:	b908      	cbnz	r0, 800644e <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 800644a:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 800644c:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800644e:	7f43      	ldrb	r3, [r0, #29]
 8006450:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006454:	b913      	cbnz	r3, 800645c <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006456:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006458:	f7fa ffd8 	bl	800140c <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 800645c:	2302      	movs	r3, #2
 800645e:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 8006460:	7923      	ldrb	r3, [r4, #4]
 8006462:	b9e3      	cbnz	r3, 800649e <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006464:	6823      	ldr	r3, [r4, #0]
 8006466:	4a13      	ldr	r2, [pc, #76]	@ (80064b4 <HAL_CRC_Init+0x70>)
 8006468:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 800646a:	689a      	ldr	r2, [r3, #8]
 800646c:	f022 0218 	bic.w	r2, r2, #24
 8006470:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006472:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006474:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006476:	b9d2      	cbnz	r2, 80064ae <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006478:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800647c:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800647e:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006480:	689a      	ldr	r2, [r3, #8]
 8006482:	6961      	ldr	r1, [r4, #20]
 8006484:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006488:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800648a:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800648c:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800648e:	689a      	ldr	r2, [r3, #8]
 8006490:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006494:	430a      	orrs	r2, r1
 8006496:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006498:	2301      	movs	r3, #1
 800649a:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 800649c:	e7d6      	b.n	800644c <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800649e:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 80064a2:	4620      	mov	r0, r4
 80064a4:	f000 f808 	bl	80064b8 <HAL_CRCEx_Polynomial_Set>
 80064a8:	2800      	cmp	r0, #0
 80064aa:	d0e2      	beq.n	8006472 <HAL_CRC_Init+0x2e>
 80064ac:	e7cd      	b.n	800644a <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 80064ae:	6922      	ldr	r2, [r4, #16]
 80064b0:	e7e4      	b.n	800647c <HAL_CRC_Init+0x38>
 80064b2:	bf00      	nop
 80064b4:	04c11db7 	.word	0x04c11db7

080064b8 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80064b8:	07cb      	lsls	r3, r1, #31
{
 80064ba:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 80064bc:	d50d      	bpl.n	80064da <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 80064be:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 80064c0:	3b01      	subs	r3, #1
 80064c2:	d31d      	bcc.n	8006500 <HAL_CRCEx_Polynomial_Set+0x48>
 80064c4:	fa21 f403 	lsr.w	r4, r1, r3
 80064c8:	07e4      	lsls	r4, r4, #31
 80064ca:	d5f9      	bpl.n	80064c0 <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 80064cc:	2a10      	cmp	r2, #16
 80064ce:	d013      	beq.n	80064f8 <HAL_CRCEx_Polynomial_Set+0x40>
 80064d0:	2a10      	cmp	r2, #16
 80064d2:	d804      	bhi.n	80064de <HAL_CRCEx_Polynomial_Set+0x26>
 80064d4:	b13a      	cbz	r2, 80064e6 <HAL_CRCEx_Polynomial_Set+0x2e>
 80064d6:	2a08      	cmp	r2, #8
 80064d8:	d010      	beq.n	80064fc <HAL_CRCEx_Polynomial_Set+0x44>
 80064da:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80064dc:	e00b      	b.n	80064f6 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80064de:	2a18      	cmp	r2, #24
 80064e0:	d1fb      	bne.n	80064da <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80064e2:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80064e4:	d8f9      	bhi.n	80064da <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80064e6:	6800      	ldr	r0, [r0, #0]
 80064e8:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80064ea:	6883      	ldr	r3, [r0, #8]
 80064ec:	f023 0318 	bic.w	r3, r3, #24
 80064f0:	4313      	orrs	r3, r2
 80064f2:	6083      	str	r3, [r0, #8]
 80064f4:	2000      	movs	r0, #0
}
 80064f6:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80064f8:	2b07      	cmp	r3, #7
 80064fa:	e7f3      	b.n	80064e4 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80064fc:	2b0f      	cmp	r3, #15
 80064fe:	e7f1      	b.n	80064e4 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 8006500:	2a10      	cmp	r2, #16
 8006502:	d1e5      	bne.n	80064d0 <HAL_CRCEx_Polynomial_Set+0x18>
 8006504:	e7e9      	b.n	80064da <HAL_CRCEx_Polynomial_Set+0x22>
	...

08006508 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006508:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650a:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800650c:	f7ff fece 	bl	80062ac <HAL_GetTick>
 8006510:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006512:	b145      	cbz	r5, 8006526 <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006514:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 8006518:	2b02      	cmp	r3, #2
 800651a:	d006      	beq.n	800652a <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800651c:	2380      	movs	r3, #128	@ 0x80
 800651e:	656b      	str	r3, [r5, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006520:	2300      	movs	r3, #0
 8006522:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 8006526:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 8006528:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800652a:	682c      	ldr	r4, [r5, #0]
 800652c:	4ea9      	ldr	r6, [pc, #676]	@ (80067d4 <HAL_DMA_Abort+0x2cc>)
 800652e:	42b4      	cmp	r4, r6
 8006530:	d04a      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006532:	4ba9      	ldr	r3, [pc, #676]	@ (80067d8 <HAL_DMA_Abort+0x2d0>)
 8006534:	429c      	cmp	r4, r3
 8006536:	d047      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006538:	3318      	adds	r3, #24
 800653a:	429c      	cmp	r4, r3
 800653c:	d044      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 800653e:	3318      	adds	r3, #24
 8006540:	429c      	cmp	r4, r3
 8006542:	d041      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006544:	3318      	adds	r3, #24
 8006546:	429c      	cmp	r4, r3
 8006548:	d03e      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 800654a:	3318      	adds	r3, #24
 800654c:	429c      	cmp	r4, r3
 800654e:	d03b      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006550:	3318      	adds	r3, #24
 8006552:	429c      	cmp	r4, r3
 8006554:	d038      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006556:	3318      	adds	r3, #24
 8006558:	429c      	cmp	r4, r3
 800655a:	d035      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 800655c:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006560:	429c      	cmp	r4, r3
 8006562:	d031      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006564:	3318      	adds	r3, #24
 8006566:	429c      	cmp	r4, r3
 8006568:	d02e      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 800656a:	3318      	adds	r3, #24
 800656c:	429c      	cmp	r4, r3
 800656e:	d02b      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006570:	3318      	adds	r3, #24
 8006572:	429c      	cmp	r4, r3
 8006574:	d028      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006576:	3318      	adds	r3, #24
 8006578:	429c      	cmp	r4, r3
 800657a:	d025      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 800657c:	3318      	adds	r3, #24
 800657e:	429c      	cmp	r4, r3
 8006580:	d022      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006582:	3318      	adds	r3, #24
 8006584:	429c      	cmp	r4, r3
 8006586:	d01f      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
 8006588:	3318      	adds	r3, #24
 800658a:	429c      	cmp	r4, r3
 800658c:	d01c      	beq.n	80065c8 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800658e:	6823      	ldr	r3, [r4, #0]
 8006590:	f023 030e 	bic.w	r3, r3, #14
 8006594:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006596:	4b91      	ldr	r3, [pc, #580]	@ (80067dc <HAL_DMA_Abort+0x2d4>)
 8006598:	429c      	cmp	r4, r3
 800659a:	d01f      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 800659c:	3314      	adds	r3, #20
 800659e:	429c      	cmp	r4, r3
 80065a0:	d01c      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065a2:	3314      	adds	r3, #20
 80065a4:	429c      	cmp	r4, r3
 80065a6:	d019      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065a8:	3314      	adds	r3, #20
 80065aa:	429c      	cmp	r4, r3
 80065ac:	d016      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065ae:	3314      	adds	r3, #20
 80065b0:	429c      	cmp	r4, r3
 80065b2:	d013      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065b4:	3314      	adds	r3, #20
 80065b6:	429c      	cmp	r4, r3
 80065b8:	d010      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065ba:	3314      	adds	r3, #20
 80065bc:	429c      	cmp	r4, r3
 80065be:	d00d      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80065c0:	3314      	adds	r3, #20
 80065c2:	429c      	cmp	r4, r3
 80065c4:	d112      	bne.n	80065ec <HAL_DMA_Abort+0xe4>
 80065c6:	e009      	b.n	80065dc <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065c8:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065ca:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 80065cc:	f023 031e 	bic.w	r3, r3, #30
 80065d0:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80065d2:	6963      	ldr	r3, [r4, #20]
 80065d4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80065d8:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80065da:	d176      	bne.n	80066ca <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065dc:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 80065de:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80065e0:	6813      	ldr	r3, [r2, #0]
 80065e2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80065e6:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80065e8:	f040 80ab 	bne.w	8006742 <HAL_DMA_Abort+0x23a>
 80065ec:	6823      	ldr	r3, [r4, #0]
 80065ee:	f023 0301 	bic.w	r3, r3, #1
 80065f2:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80065f4:	6823      	ldr	r3, [r4, #0]
 80065f6:	07db      	lsls	r3, r3, #31
 80065f8:	f100 80cd 	bmi.w	8006796 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80065fc:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80065fe:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006600:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8006602:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006604:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006608:	f000 80d1 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800660c:	4972      	ldr	r1, [pc, #456]	@ (80067d8 <HAL_DMA_Abort+0x2d0>)
 800660e:	428b      	cmp	r3, r1
 8006610:	f000 80cd 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006614:	3118      	adds	r1, #24
 8006616:	428b      	cmp	r3, r1
 8006618:	f000 80c9 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800661c:	3118      	adds	r1, #24
 800661e:	428b      	cmp	r3, r1
 8006620:	f000 80c5 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006624:	3118      	adds	r1, #24
 8006626:	428b      	cmp	r3, r1
 8006628:	f000 80c1 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800662c:	3118      	adds	r1, #24
 800662e:	428b      	cmp	r3, r1
 8006630:	f000 80bd 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006634:	3118      	adds	r1, #24
 8006636:	428b      	cmp	r3, r1
 8006638:	f000 80b9 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800663c:	3118      	adds	r1, #24
 800663e:	428b      	cmp	r3, r1
 8006640:	f000 80b5 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006644:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8006648:	428b      	cmp	r3, r1
 800664a:	f000 80b0 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800664e:	3118      	adds	r1, #24
 8006650:	428b      	cmp	r3, r1
 8006652:	f000 80ac 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006656:	3118      	adds	r1, #24
 8006658:	428b      	cmp	r3, r1
 800665a:	f000 80a8 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800665e:	3118      	adds	r1, #24
 8006660:	428b      	cmp	r3, r1
 8006662:	f000 80a4 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006666:	3118      	adds	r1, #24
 8006668:	428b      	cmp	r3, r1
 800666a:	f000 80a0 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800666e:	3118      	adds	r1, #24
 8006670:	428b      	cmp	r3, r1
 8006672:	f000 809c 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 8006676:	3118      	adds	r1, #24
 8006678:	428b      	cmp	r3, r1
 800667a:	f000 8098 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
 800667e:	3118      	adds	r1, #24
 8006680:	428b      	cmp	r3, r1
 8006682:	f000 8094 	beq.w	80067ae <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006686:	2101      	movs	r1, #1
 8006688:	fa01 f202 	lsl.w	r2, r1, r2
 800668c:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800668e:	4a53      	ldr	r2, [pc, #332]	@ (80067dc <HAL_DMA_Abort+0x2d4>)
 8006690:	4293      	cmp	r3, r2
 8006692:	f000 8092 	beq.w	80067ba <HAL_DMA_Abort+0x2b2>
 8006696:	3214      	adds	r2, #20
 8006698:	4293      	cmp	r3, r2
 800669a:	f000 808e 	beq.w	80067ba <HAL_DMA_Abort+0x2b2>
 800669e:	3214      	adds	r2, #20
 80066a0:	4293      	cmp	r3, r2
 80066a2:	f000 808a 	beq.w	80067ba <HAL_DMA_Abort+0x2b2>
 80066a6:	3214      	adds	r2, #20
 80066a8:	4293      	cmp	r3, r2
 80066aa:	f000 8086 	beq.w	80067ba <HAL_DMA_Abort+0x2b2>
 80066ae:	3214      	adds	r2, #20
 80066b0:	4293      	cmp	r3, r2
 80066b2:	f000 8082 	beq.w	80067ba <HAL_DMA_Abort+0x2b2>
 80066b6:	3214      	adds	r2, #20
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d07e      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80066bc:	3214      	adds	r2, #20
 80066be:	4293      	cmp	r3, r2
 80066c0:	d07b      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80066c2:	3214      	adds	r2, #20
 80066c4:	4293      	cmp	r3, r2
 80066c6:	d17e      	bne.n	80067c6 <HAL_DMA_Abort+0x2be>
 80066c8:	e077      	b.n	80067ba <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80066ca:	4b43      	ldr	r3, [pc, #268]	@ (80067d8 <HAL_DMA_Abort+0x2d0>)
 80066cc:	429c      	cmp	r4, r3
 80066ce:	d085      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80066d0:	3318      	adds	r3, #24
 80066d2:	429c      	cmp	r4, r3
 80066d4:	d082      	beq.n	80065dc <HAL_DMA_Abort+0xd4>
 80066d6:	3318      	adds	r3, #24
 80066d8:	429c      	cmp	r4, r3
 80066da:	f43f af7f 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 80066de:	3318      	adds	r3, #24
 80066e0:	429c      	cmp	r4, r3
 80066e2:	f43f af7b 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 80066e6:	3318      	adds	r3, #24
 80066e8:	429c      	cmp	r4, r3
 80066ea:	f43f af77 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 80066ee:	3318      	adds	r3, #24
 80066f0:	429c      	cmp	r4, r3
 80066f2:	f43f af73 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 80066f6:	3318      	adds	r3, #24
 80066f8:	429c      	cmp	r4, r3
 80066fa:	f43f af6f 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 80066fe:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006702:	429c      	cmp	r4, r3
 8006704:	f43f af6a 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006708:	3318      	adds	r3, #24
 800670a:	429c      	cmp	r4, r3
 800670c:	f43f af66 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006710:	3318      	adds	r3, #24
 8006712:	429c      	cmp	r4, r3
 8006714:	f43f af62 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006718:	3318      	adds	r3, #24
 800671a:	429c      	cmp	r4, r3
 800671c:	f43f af5e 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006720:	3318      	adds	r3, #24
 8006722:	429c      	cmp	r4, r3
 8006724:	f43f af5a 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006728:	3318      	adds	r3, #24
 800672a:	429c      	cmp	r4, r3
 800672c:	f43f af56 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006730:	3318      	adds	r3, #24
 8006732:	429c      	cmp	r4, r3
 8006734:	f43f af52 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006738:	3318      	adds	r3, #24
 800673a:	429c      	cmp	r4, r3
 800673c:	f43f af4e 	beq.w	80065dc <HAL_DMA_Abort+0xd4>
 8006740:	e729      	b.n	8006596 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8006742:	4b25      	ldr	r3, [pc, #148]	@ (80067d8 <HAL_DMA_Abort+0x2d0>)
 8006744:	429c      	cmp	r4, r3
 8006746:	f43f af51 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 800674a:	3318      	adds	r3, #24
 800674c:	429c      	cmp	r4, r3
 800674e:	f43f af4d 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 8006752:	3318      	adds	r3, #24
 8006754:	429c      	cmp	r4, r3
 8006756:	f43f af49 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 800675a:	3318      	adds	r3, #24
 800675c:	429c      	cmp	r4, r3
 800675e:	f43f af45 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 8006762:	3318      	adds	r3, #24
 8006764:	429c      	cmp	r4, r3
 8006766:	f43f af41 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 800676a:	3318      	adds	r3, #24
 800676c:	429c      	cmp	r4, r3
 800676e:	f43f af3d 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 8006772:	3318      	adds	r3, #24
 8006774:	429c      	cmp	r4, r3
 8006776:	f43f af39 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 800677a:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800677e:	429c      	cmp	r4, r3
 8006780:	f43f af34 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 8006784:	3318      	adds	r3, #24
 8006786:	429c      	cmp	r4, r3
 8006788:	f43f af30 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 800678c:	3318      	adds	r3, #24
 800678e:	429c      	cmp	r4, r3
 8006790:	f43f af2c 	beq.w	80065ec <HAL_DMA_Abort+0xe4>
 8006794:	e72a      	b.n	80065ec <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006796:	f7ff fd89 	bl	80062ac <HAL_GetTick>
 800679a:	1bc0      	subs	r0, r0, r7
 800679c:	2805      	cmp	r0, #5
 800679e:	f67f af29 	bls.w	80065f4 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80067a2:	2320      	movs	r3, #32
 80067a4:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 80067a6:	2303      	movs	r3, #3
 80067a8:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 80067ac:	e6b8      	b.n	8006520 <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067ae:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067b0:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80067b2:	fa01 f202 	lsl.w	r2, r1, r2
 80067b6:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067b8:	d112      	bne.n	80067e0 <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80067ba:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 80067be:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 80067c0:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 80067c2:	2b00      	cmp	r3, #0
 80067c4:	d13b      	bne.n	800683e <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 80067c6:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 80067c8:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 80067ca:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 80067ce:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 80067d2:	e6a9      	b.n	8006528 <HAL_DMA_Abort+0x20>
 80067d4:	40020010 	.word	0x40020010
 80067d8:	40020028 	.word	0x40020028
 80067dc:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80067e0:	4a1b      	ldr	r2, [pc, #108]	@ (8006850 <HAL_DMA_Abort+0x348>)
 80067e2:	4293      	cmp	r3, r2
 80067e4:	d0e9      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80067e6:	3218      	adds	r2, #24
 80067e8:	4293      	cmp	r3, r2
 80067ea:	d0e6      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80067ec:	3218      	adds	r2, #24
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d0e3      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80067f2:	3218      	adds	r2, #24
 80067f4:	4293      	cmp	r3, r2
 80067f6:	d0e0      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80067f8:	3218      	adds	r2, #24
 80067fa:	4293      	cmp	r3, r2
 80067fc:	d0dd      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 80067fe:	3218      	adds	r2, #24
 8006800:	4293      	cmp	r3, r2
 8006802:	d0da      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006804:	3218      	adds	r2, #24
 8006806:	4293      	cmp	r3, r2
 8006808:	d0d7      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 800680a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800680e:	4293      	cmp	r3, r2
 8006810:	d0d3      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006812:	3218      	adds	r2, #24
 8006814:	4293      	cmp	r3, r2
 8006816:	d0d0      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006818:	3218      	adds	r2, #24
 800681a:	4293      	cmp	r3, r2
 800681c:	d0cd      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 800681e:	3218      	adds	r2, #24
 8006820:	4293      	cmp	r3, r2
 8006822:	d0ca      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006824:	3218      	adds	r2, #24
 8006826:	4293      	cmp	r3, r2
 8006828:	d0c7      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 800682a:	3218      	adds	r2, #24
 800682c:	4293      	cmp	r3, r2
 800682e:	d0c4      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006830:	3218      	adds	r2, #24
 8006832:	4293      	cmp	r3, r2
 8006834:	d0c1      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 8006836:	3218      	adds	r2, #24
 8006838:	4293      	cmp	r3, r2
 800683a:	d0be      	beq.n	80067ba <HAL_DMA_Abort+0x2b2>
 800683c:	e727      	b.n	800668e <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800683e:	681a      	ldr	r2, [r3, #0]
 8006840:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006844:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006846:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 800684a:	605a      	str	r2, [r3, #4]
 800684c:	e7bb      	b.n	80067c6 <HAL_DMA_Abort+0x2be>
 800684e:	bf00      	nop
 8006850:	40020028 	.word	0x40020028

08006854 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006854:	b508      	push	{r3, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006856:	b128      	cbz	r0, 8006864 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006858:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 800685c:	2b02      	cmp	r3, #2
 800685e:	d003      	beq.n	8006868 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006860:	2380      	movs	r3, #128	@ 0x80
 8006862:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8006864:	2001      	movs	r0, #1
 8006866:	e05d      	b.n	8006924 <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006868:	6803      	ldr	r3, [r0, #0]
 800686a:	4a3f      	ldr	r2, [pc, #252]	@ (8006968 <HAL_DMA_Abort_IT+0x114>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d051      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 8006870:	3218      	adds	r2, #24
 8006872:	4293      	cmp	r3, r2
 8006874:	d04e      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 8006876:	3218      	adds	r2, #24
 8006878:	4293      	cmp	r3, r2
 800687a:	d04b      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 800687c:	3218      	adds	r2, #24
 800687e:	4293      	cmp	r3, r2
 8006880:	d048      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 8006882:	3218      	adds	r2, #24
 8006884:	4293      	cmp	r3, r2
 8006886:	d045      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 8006888:	3218      	adds	r2, #24
 800688a:	4293      	cmp	r3, r2
 800688c:	d042      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 800688e:	3218      	adds	r2, #24
 8006890:	4293      	cmp	r3, r2
 8006892:	d03f      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 8006894:	3218      	adds	r2, #24
 8006896:	4293      	cmp	r3, r2
 8006898:	d03c      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 800689a:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 800689e:	4293      	cmp	r3, r2
 80068a0:	d038      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068a2:	3218      	adds	r2, #24
 80068a4:	4293      	cmp	r3, r2
 80068a6:	d035      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068a8:	3218      	adds	r2, #24
 80068aa:	4293      	cmp	r3, r2
 80068ac:	d032      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068ae:	3218      	adds	r2, #24
 80068b0:	4293      	cmp	r3, r2
 80068b2:	d02f      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068b4:	3218      	adds	r2, #24
 80068b6:	4293      	cmp	r3, r2
 80068b8:	d02c      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068ba:	3218      	adds	r2, #24
 80068bc:	4293      	cmp	r3, r2
 80068be:	d029      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068c0:	3218      	adds	r2, #24
 80068c2:	4293      	cmp	r3, r2
 80068c4:	d026      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
 80068c6:	3218      	adds	r2, #24
 80068c8:	4293      	cmp	r3, r2
 80068ca:	d023      	beq.n	8006914 <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80068cc:	681a      	ldr	r2, [r3, #0]
 80068ce:	f022 020e 	bic.w	r2, r2, #14
 80068d2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	f022 0201 	bic.w	r2, r2, #1
 80068da:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80068dc:	4a23      	ldr	r2, [pc, #140]	@ (800696c <HAL_DMA_Abort_IT+0x118>)
 80068de:	4293      	cmp	r3, r2
 80068e0:	d121      	bne.n	8006926 <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80068e2:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 80068e4:	6813      	ldr	r3, [r2, #0]
 80068e6:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80068ea:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80068ec:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 80068f0:	f003 021f 	and.w	r2, r3, #31
 80068f4:	2301      	movs	r3, #1
 80068f6:	4093      	lsls	r3, r2
 80068f8:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80068fa:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 80068fe:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006900:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006902:	b32b      	cbz	r3, 8006950 <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006904:	681a      	ldr	r2, [r3, #0]
 8006906:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800690a:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800690c:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8006910:	605a      	str	r2, [r3, #4]
 8006912:	e01d      	b.n	8006950 <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006914:	2204      	movs	r2, #4
 8006916:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 800691a:	681a      	ldr	r2, [r3, #0]
 800691c:	f022 0201 	bic.w	r2, r2, #1
 8006920:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8006922:	2000      	movs	r0, #0
}
 8006924:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006926:	4a12      	ldr	r2, [pc, #72]	@ (8006970 <HAL_DMA_Abort_IT+0x11c>)
 8006928:	4293      	cmp	r3, r2
 800692a:	d0da      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 800692c:	3214      	adds	r2, #20
 800692e:	4293      	cmp	r3, r2
 8006930:	d0d7      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 8006932:	3214      	adds	r2, #20
 8006934:	4293      	cmp	r3, r2
 8006936:	d0d4      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 8006938:	3214      	adds	r2, #20
 800693a:	4293      	cmp	r3, r2
 800693c:	d0d1      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 800693e:	3214      	adds	r2, #20
 8006940:	4293      	cmp	r3, r2
 8006942:	d0ce      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 8006944:	3214      	adds	r2, #20
 8006946:	4293      	cmp	r3, r2
 8006948:	d0cb      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
 800694a:	3214      	adds	r2, #20
 800694c:	4293      	cmp	r3, r2
 800694e:	d0c8      	beq.n	80068e2 <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8006950:	2301      	movs	r3, #1
 8006952:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8006956:	2300      	movs	r3, #0
 8006958:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 800695c:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800695e:	2b00      	cmp	r3, #0
 8006960:	d0df      	beq.n	8006922 <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8006962:	4798      	blx	r3
 8006964:	e7dd      	b.n	8006922 <HAL_DMA_Abort_IT+0xce>
 8006966:	bf00      	nop
 8006968:	40020010 	.word	0x40020010
 800696c:	58025408 	.word	0x58025408
 8006970:	5802541c 	.word	0x5802541c

08006974 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006974:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006976:	4604      	mov	r4, r0
 8006978:	2800      	cmp	r0, #0
 800697a:	d036      	beq.n	80069ea <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800697c:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8006980:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006984:	b91b      	cbnz	r3, 800698e <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006986:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800698a:	f7fa fd57 	bl	800143c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800698e:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006990:	69e0      	ldr	r0, [r4, #28]
 8006992:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006994:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006998:	6823      	ldr	r3, [r4, #0]
 800699a:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800699c:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800699e:	6819      	ldr	r1, [r3, #0]
 80069a0:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 80069a4:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 80069a8:	430a      	orrs	r2, r1
 80069aa:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80069ac:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80069ae:	68a2      	ldr	r2, [r4, #8]
 80069b0:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 80069b4:	4302      	orrs	r2, r0
 80069b6:	f021 0101 	bic.w	r1, r1, #1
 80069ba:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80069bc:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 80069be:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 80069c0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80069c2:	0c12      	lsrs	r2, r2, #16
 80069c4:	0412      	lsls	r2, r2, #16
 80069c6:	430a      	orrs	r2, r1
 80069c8:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80069ca:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 80069cc:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 80069d0:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 80069d4:	0552      	lsls	r2, r2, #21
 80069d6:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80069da:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 80069dc:	430a      	orrs	r2, r1
 80069de:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069e0:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 80069e2:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 80069e4:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 80069e8:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 80069ea:	2001      	movs	r0, #1
 80069ec:	e7fc      	b.n	80069e8 <HAL_DMA2D_Init+0x74>

080069ee <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 80069ee:	4770      	bx	lr

080069f0 <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 80069f0:	4770      	bx	lr

080069f2 <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80069f2:	6803      	ldr	r3, [r0, #0]
{
 80069f4:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 80069f6:	685e      	ldr	r6, [r3, #4]
{
 80069f8:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 80069fa:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 80069fc:	07f2      	lsls	r2, r6, #31
 80069fe:	d514      	bpl.n	8006a2a <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006a00:	05e9      	lsls	r1, r5, #23
 8006a02:	d512      	bpl.n	8006a2a <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006a0a:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006a0c:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006a0e:	f042 0201 	orr.w	r2, r2, #1
 8006a12:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006a14:	2201      	movs	r2, #1
 8006a16:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a18:	2304      	movs	r3, #4
 8006a1a:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006a1e:	2300      	movs	r3, #0
 8006a20:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006a24:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006a26:	b103      	cbz	r3, 8006a2a <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006a28:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006a2a:	06b2      	lsls	r2, r6, #26
 8006a2c:	d516      	bpl.n	8006a5c <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006a2e:	04ab      	lsls	r3, r5, #18
 8006a30:	d514      	bpl.n	8006a5c <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	681a      	ldr	r2, [r3, #0]
 8006a36:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006a3a:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006a3c:	2220      	movs	r2, #32
 8006a3e:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006a40:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a42:	f043 0302 	orr.w	r3, r3, #2
 8006a46:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a48:	2304      	movs	r3, #4
 8006a4a:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006a4e:	2300      	movs	r3, #0
 8006a50:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006a54:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a56:	b10b      	cbz	r3, 8006a5c <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8006a58:	4620      	mov	r0, r4
 8006a5a:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006a5c:	0730      	lsls	r0, r6, #28
 8006a5e:	d516      	bpl.n	8006a8e <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006a60:	0529      	lsls	r1, r5, #20
 8006a62:	d514      	bpl.n	8006a8e <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006a64:	6823      	ldr	r3, [r4, #0]
 8006a66:	681a      	ldr	r2, [r3, #0]
 8006a68:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006a6e:	2208      	movs	r2, #8
 8006a70:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006a72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006a74:	f043 0304 	orr.w	r3, r3, #4
 8006a78:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006a7a:	2304      	movs	r3, #4
 8006a7c:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006a80:	2300      	movs	r3, #0
 8006a82:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006a86:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006a88:	b10b      	cbz	r3, 8006a8e <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8006a8a:	4620      	mov	r0, r4
 8006a8c:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006a8e:	0772      	lsls	r2, r6, #29
 8006a90:	d50b      	bpl.n	8006aaa <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006a92:	056b      	lsls	r3, r5, #21
 8006a94:	d509      	bpl.n	8006aaa <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006a96:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006a98:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006a9a:	681a      	ldr	r2, [r3, #0]
 8006a9c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006aa0:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006aa2:	2204      	movs	r2, #4
 8006aa4:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006aa6:	f7ff ffa2 	bl	80069ee <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006aaa:	07b0      	lsls	r0, r6, #30
 8006aac:	d514      	bpl.n	8006ad8 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006aae:	05a9      	lsls	r1, r5, #22
 8006ab0:	d512      	bpl.n	8006ad8 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006ab2:	6823      	ldr	r3, [r4, #0]
 8006ab4:	681a      	ldr	r2, [r3, #0]
 8006ab6:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006aba:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006abc:	2202      	movs	r2, #2
 8006abe:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ac0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ac2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ac4:	2301      	movs	r3, #1
 8006ac6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006aca:	2300      	movs	r3, #0
 8006acc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8006ad0:	6a23      	ldr	r3, [r4, #32]
 8006ad2:	b10b      	cbz	r3, 8006ad8 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006ad8:	06f2      	lsls	r2, r6, #27
 8006ada:	d513      	bpl.n	8006b04 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006adc:	04eb      	lsls	r3, r5, #19
 8006ade:	d511      	bpl.n	8006b04 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006ae0:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006ae2:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006ae4:	681a      	ldr	r2, [r3, #0]
 8006ae6:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006aea:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006aec:	2210      	movs	r2, #16
 8006aee:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006af0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006af2:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006af4:	2301      	movs	r3, #1
 8006af6:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006afa:	2300      	movs	r3, #0
 8006afc:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006b00:	f7ff ff76 	bl	80069f0 <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8006b04:	bd70      	pop	{r4, r5, r6, pc}

08006b06 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006b0a:	4607      	mov	r7, r0
 8006b0c:	460d      	mov	r5, r1
 8006b0e:	4614      	mov	r4, r2
 8006b10:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006b12:	f7ff fbcb 	bl	80062ac <HAL_GetTick>
 8006b16:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006b18:	683b      	ldr	r3, [r7, #0]
 8006b1a:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006b1c:	07d2      	lsls	r2, r2, #31
 8006b1e:	d50a      	bpl.n	8006b36 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006b20:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006b24:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006b26:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006b28:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006b2c:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006b30:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006b36:	f7ff fbb9 	bl	80062ac <HAL_GetTick>
 8006b3a:	eba0 0008 	sub.w	r0, r0, r8
 8006b3e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006b42:	d9e9      	bls.n	8006b18 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8006b44:	2003      	movs	r0, #3
 8006b46:	e7f4      	b.n	8006b32 <DSI_ShortWrite.constprop.0+0x2c>

08006b48 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006b48:	7c03      	ldrb	r3, [r0, #16]
{
 8006b4a:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d05b      	beq.n	8006c08 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006b50:	6803      	ldr	r3, [r0, #0]
 8006b52:	2000      	movs	r0, #0
 8006b54:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006b58:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006b5c:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006b5e:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006b60:	d507      	bpl.n	8006b72 <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006b62:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006b66:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006b6a:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006b6e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006b72:	0788      	lsls	r0, r1, #30
 8006b74:	d505      	bpl.n	8006b82 <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006b76:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006b7a:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006b7e:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006b82:	0748      	lsls	r0, r1, #29
 8006b84:	d505      	bpl.n	8006b92 <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006b86:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006b8a:	f040 0001 	orr.w	r0, r0, #1
 8006b8e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006b92:	0708      	lsls	r0, r1, #28
 8006b94:	d505      	bpl.n	8006ba2 <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006b96:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006b9a:	f040 0002 	orr.w	r0, r0, #2
 8006b9e:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006ba2:	06c8      	lsls	r0, r1, #27
 8006ba4:	d505      	bpl.n	8006bb2 <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006ba6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006baa:	f040 000c 	orr.w	r0, r0, #12
 8006bae:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006bb2:	0688      	lsls	r0, r1, #26
 8006bb4:	d505      	bpl.n	8006bc2 <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006bb6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006bba:	f040 0010 	orr.w	r0, r0, #16
 8006bbe:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006bc2:	0648      	lsls	r0, r1, #25
 8006bc4:	d505      	bpl.n	8006bd2 <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006bc6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006bca:	f040 0020 	orr.w	r0, r0, #32
 8006bce:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006bd2:	0608      	lsls	r0, r1, #24
 8006bd4:	d505      	bpl.n	8006be2 <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006bd6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006bda:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006bde:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006be2:	05c8      	lsls	r0, r1, #23
 8006be4:	d505      	bpl.n	8006bf2 <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006be6:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006bea:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006bee:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006bf2:	0589      	lsls	r1, r1, #22
 8006bf4:	d505      	bpl.n	8006c02 <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006bf6:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006bfa:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006bfe:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006c02:	2000      	movs	r0, #0
 8006c04:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006c06:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006c08:	2002      	movs	r0, #2
}
 8006c0a:	4770      	bx	lr

08006c0c <HAL_DSI_Init>:
{
 8006c0c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006c0e:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006c10:	4604      	mov	r4, r0
 8006c12:	2800      	cmp	r0, #0
 8006c14:	f000 80ea 	beq.w	8006dec <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006c18:	7c43      	ldrb	r3, [r0, #17]
 8006c1a:	b90b      	cbnz	r3, 8006c20 <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006c1c:	f7fa fc32 	bl	8001484 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006c20:	2303      	movs	r3, #3
 8006c22:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006c24:	2300      	movs	r3, #0
 8006c26:	9300      	str	r3, [sp, #0]
 8006c28:	6823      	ldr	r3, [r4, #0]
 8006c2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006c2e:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006c32:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8006c36:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8006c3a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8006c3e:	9300      	str	r3, [sp, #0]
 8006c40:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 8006c42:	f7ff fb33 	bl	80062ac <HAL_GetTick>
 8006c46:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8006c48:	6822      	ldr	r2, [r4, #0]
 8006c4a:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 8006c4e:	04d9      	lsls	r1, r3, #19
 8006c50:	d56e      	bpl.n	8006d30 <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8006c52:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006c56:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8006c5a:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 8006c5e:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006c62:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006c66:	e9d5 0300 	ldrd	r0, r3, [r5]
 8006c6a:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006c6c:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8006c70:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8006c72:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8006c76:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8006c78:	430b      	orrs	r3, r1
 8006c7a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 8006c7e:	2300      	movs	r3, #0
 8006c80:	9301      	str	r3, [sp, #4]
 8006c82:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006c86:	f043 0301 	orr.w	r3, r3, #1
 8006c8a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 8006c8e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8006c92:	f003 0301 	and.w	r3, r3, #1
 8006c96:	9301      	str	r3, [sp, #4]
 8006c98:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8006c9a:	f7ff fb0d 	bl	80062b8 <HAL_Delay>
  tickstart = HAL_GetTick();
 8006c9e:	f7ff fb05 	bl	80062ac <HAL_GetTick>
 8006ca2:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8006ca4:	6823      	ldr	r3, [r4, #0]
 8006ca6:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006caa:	05d2      	lsls	r2, r2, #23
 8006cac:	d548      	bpl.n	8006d40 <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 8006cae:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006cb0:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 8006cb2:	9202      	str	r2, [sp, #8]
 8006cb4:	685a      	ldr	r2, [r3, #4]
 8006cb6:	f042 0201 	orr.w	r2, r2, #1
 8006cba:	605a      	str	r2, [r3, #4]
 8006cbc:	685a      	ldr	r2, [r3, #4]
 8006cbe:	f002 0201 	and.w	r2, r2, #1
 8006cc2:	9202      	str	r2, [sp, #8]
 8006cc4:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8006cc6:	689a      	ldr	r2, [r3, #8]
 8006cc8:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8006ccc:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006cce:	689a      	ldr	r2, [r3, #8]
 8006cd0:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006cd2:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8006cd4:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8006cd6:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006cda:	f042 0202 	orr.w	r2, r2, #2
 8006cde:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8006ce2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8006ce6:	f042 0204 	orr.w	r2, r2, #4
 8006cea:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8006cee:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006cf2:	f022 0203 	bic.w	r2, r2, #3
 8006cf6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8006cfa:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8006cfe:	430a      	orrs	r2, r1
 8006d00:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 8006d04:	f7ff fad2 	bl	80062ac <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006d08:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 8006d0a:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8006d0c:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8006d10:	079b      	lsls	r3, r3, #30
 8006d12:	d025      	beq.n	8006d60 <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8006d14:	6823      	ldr	r3, [r4, #0]
 8006d16:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d1a:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8006d1e:	2b94      	cmp	r3, #148	@ 0x94
 8006d20:	d025      	beq.n	8006d6e <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d22:	f7ff fac3 	bl	80062ac <HAL_GetTick>
 8006d26:	1b80      	subs	r0, r0, r6
 8006d28:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d2c:	d9f2      	bls.n	8006d14 <HAL_DSI_Init+0x108>
 8006d2e:	e014      	b.n	8006d5a <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d30:	f7ff fabc 	bl	80062ac <HAL_GetTick>
 8006d34:	1b80      	subs	r0, r0, r6
 8006d36:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d3a:	d985      	bls.n	8006c48 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8006d3c:	2003      	movs	r0, #3
 8006d3e:	e053      	b.n	8006de8 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d40:	f7ff fab4 	bl	80062ac <HAL_GetTick>
 8006d44:	1b80      	subs	r0, r0, r6
 8006d46:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d4a:	d9ab      	bls.n	8006ca4 <HAL_DSI_Init+0x98>
 8006d4c:	e7f6      	b.n	8006d3c <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006d4e:	f7ff faad 	bl	80062ac <HAL_GetTick>
 8006d52:	1b80      	subs	r0, r0, r6
 8006d54:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006d58:	d902      	bls.n	8006d60 <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 8006d5e:	e7ed      	b.n	8006d3c <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8006d60:	6823      	ldr	r3, [r4, #0]
 8006d62:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8006d66:	f003 0314 	and.w	r3, r3, #20
 8006d6a:	2b14      	cmp	r3, #20
 8006d6c:	d1ef      	bne.n	8006d4e <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006d6e:	686b      	ldr	r3, [r5, #4]
 8006d70:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8006d74:	4a1e      	ldr	r2, [pc, #120]	@ (8006df0 <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8006d76:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	bf38      	it	cc
 8006d7c:	2301      	movcc	r3, #1
 8006d7e:	435a      	muls	r2, r3
 8006d80:	68ab      	ldr	r3, [r5, #8]
 8006d82:	f003 0303 	and.w	r3, r3, #3
 8006d86:	409a      	lsls	r2, r3
 8006d88:	682b      	ldr	r3, [r5, #0]
 8006d8a:	434b      	muls	r3, r1
 8006d8c:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8006d90:	6823      	ldr	r3, [r4, #0]
 8006d92:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006d96:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8006d9a:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006d9e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8006da2:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006da4:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8006da6:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8006daa:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006dae:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 8006db2:	9003      	str	r0, [sp, #12]
 8006db4:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8006db6:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8006db8:	f022 0201 	bic.w	r2, r2, #1
 8006dbc:	605a      	str	r2, [r3, #4]
 8006dbe:	685a      	ldr	r2, [r3, #4]
 8006dc0:	f002 0201 	and.w	r2, r2, #1
 8006dc4:	9203      	str	r2, [sp, #12]
 8006dc6:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8006dc8:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006dcc:	f022 0203 	bic.w	r2, r2, #3
 8006dd0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8006dd4:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8006dd8:	430a      	orrs	r2, r1
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 8006de2:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8006de4:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 8006de6:	7463      	strb	r3, [r4, #17]
}
 8006de8:	b004      	add	sp, #16
 8006dea:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 8006dec:	2001      	movs	r0, #1
 8006dee:	e7fb      	b.n	8006de8 <HAL_DSI_Init+0x1dc>
 8006df0:	003d0900 	.word	0x003d0900

08006df4 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 8006df4:	4770      	bx	lr

08006df6 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006df6:	6803      	ldr	r3, [r0, #0]
 8006df8:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006dfc:	07d1      	lsls	r1, r2, #31
{
 8006dfe:	b510      	push	{r4, lr}
 8006e00:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 8006e02:	d508      	bpl.n	8006e16 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 8006e04:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e08:	07d2      	lsls	r2, r2, #31
 8006e0a:	d504      	bpl.n	8006e16 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 8006e12:	f7fb fac1 	bl	8002398 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 8006e16:	6823      	ldr	r3, [r4, #0]
 8006e18:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8006e1c:	0791      	lsls	r1, r2, #30
 8006e1e:	d509      	bpl.n	8006e34 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 8006e20:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006e24:	0792      	lsls	r2, r2, #30
 8006e26:	d505      	bpl.n	8006e34 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006e28:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006e2a:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 8006e2c:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 8006e30:	f7fb fae4 	bl	80023fc <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8006e34:	69a3      	ldr	r3, [r4, #24]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d04e      	beq.n	8006ed8 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8006e3a:	6821      	ldr	r1, [r4, #0]
 8006e3c:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 8006e40:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8006e44:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8006e46:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8006e4a:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 8006e4e:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 8006e50:	b291      	uxth	r1, r2
 8006e52:	b119      	cbz	r1, 8006e5c <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8006e54:	6961      	ldr	r1, [r4, #20]
 8006e56:	f041 0101 	orr.w	r1, r1, #1
 8006e5a:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8006e5c:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 8006e60:	d003      	beq.n	8006e6a <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 8006e62:	6962      	ldr	r2, [r4, #20]
 8006e64:	f042 0202 	orr.w	r2, r2, #2
 8006e68:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8006e6a:	07d8      	lsls	r0, r3, #31
 8006e6c:	d503      	bpl.n	8006e76 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 8006e6e:	6962      	ldr	r2, [r4, #20]
 8006e70:	f042 0204 	orr.w	r2, r2, #4
 8006e74:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8006e76:	0799      	lsls	r1, r3, #30
 8006e78:	d503      	bpl.n	8006e82 <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8006e7a:	6962      	ldr	r2, [r4, #20]
 8006e7c:	f042 0208 	orr.w	r2, r2, #8
 8006e80:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 8006e82:	f013 0f0c 	tst.w	r3, #12
 8006e86:	d003      	beq.n	8006e90 <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8006e88:	6962      	ldr	r2, [r4, #20]
 8006e8a:	f042 0210 	orr.w	r2, r2, #16
 8006e8e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 8006e90:	06da      	lsls	r2, r3, #27
 8006e92:	d503      	bpl.n	8006e9c <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8006e94:	6962      	ldr	r2, [r4, #20]
 8006e96:	f042 0220 	orr.w	r2, r2, #32
 8006e9a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8006e9c:	0698      	lsls	r0, r3, #26
 8006e9e:	d503      	bpl.n	8006ea8 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 8006ea0:	6962      	ldr	r2, [r4, #20]
 8006ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8006ea6:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8006ea8:	0659      	lsls	r1, r3, #25
 8006eaa:	d503      	bpl.n	8006eb4 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8006eac:	6962      	ldr	r2, [r4, #20]
 8006eae:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8006eb2:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8006eb4:	061a      	lsls	r2, r3, #24
 8006eb6:	d503      	bpl.n	8006ec0 <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8006eb8:	6962      	ldr	r2, [r4, #20]
 8006eba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006ebe:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 8006ec0:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8006ec4:	d003      	beq.n	8006ece <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8006ec6:	6963      	ldr	r3, [r4, #20]
 8006ec8:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8006ecc:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 8006ece:	6963      	ldr	r3, [r4, #20]
 8006ed0:	b113      	cbz	r3, 8006ed8 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 8006ed2:	4620      	mov	r0, r4
 8006ed4:	f7ff ff8e 	bl	8006df4 <HAL_DSI_ErrorCallback>
}
 8006ed8:	bd10      	pop	{r4, pc}

08006eda <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006eda:	7c02      	ldrb	r2, [r0, #16]
{
 8006edc:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8006ede:	2a01      	cmp	r2, #1
 8006ee0:	d00a      	beq.n	8006ef8 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 8006ee2:	6802      	ldr	r2, [r0, #0]
 8006ee4:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006ee6:	f020 0003 	bic.w	r0, r0, #3
 8006eea:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006eec:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 8006eee:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006ef0:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 8006ef2:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 8006ef4:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8006ef6:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006ef8:	2002      	movs	r0, #2
}
 8006efa:	4770      	bx	lr

08006efc <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 8006efc:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006efe:	7c03      	ldrb	r3, [r0, #16]
{
 8006f00:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8006f02:	2b01      	cmp	r3, #1
 8006f04:	d069      	beq.n	8006fda <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006f06:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006f08:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 8006f0a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006f0c:	f042 0201 	orr.w	r2, r2, #1
 8006f10:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8006f12:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f16:	f022 0201 	bic.w	r2, r2, #1
 8006f1a:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 8006f1e:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f22:	f042 0201 	orr.w	r2, r2, #1
 8006f26:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 8006f2a:	68da      	ldr	r2, [r3, #12]
 8006f2c:	f022 0203 	bic.w	r2, r2, #3
 8006f30:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 8006f32:	68da      	ldr	r2, [r3, #12]
 8006f34:	4302      	orrs	r2, r0
 8006f36:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8006f38:	695a      	ldr	r2, [r3, #20]
 8006f3a:	f022 0207 	bic.w	r2, r2, #7
 8006f3e:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006f40:	6958      	ldr	r0, [r3, #20]
 8006f42:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8006f46:	432a      	orrs	r2, r5
 8006f48:	694d      	ldr	r5, [r1, #20]
 8006f4a:	432a      	orrs	r2, r5
 8006f4c:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006f4e:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 8006f50:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 8006f52:	691a      	ldr	r2, [r3, #16]
 8006f54:	f022 020f 	bic.w	r2, r2, #15
 8006f58:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8006f5a:	691a      	ldr	r2, [r3, #16]
 8006f5c:	4302      	orrs	r2, r0
 8006f5e:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 8006f60:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f64:	f022 020e 	bic.w	r2, r2, #14
 8006f68:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006f6c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f70:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006f74:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8006f76:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8006f7a:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f7c:	0c12      	lsrs	r2, r2, #16
 8006f7e:	0412      	lsls	r2, r2, #16
 8006f80:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8006f82:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8006f84:	4302      	orrs	r2, r0
 8006f86:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8006f88:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8006f8c:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 8006f90:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006f94:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8006f98:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8006f9c:	432a      	orrs	r2, r5
 8006f9e:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8006fa0:	432a      	orrs	r2, r5
 8006fa2:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006fa4:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006fa6:	432a      	orrs	r2, r5
 8006fa8:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8006faa:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8006fac:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 8006fb0:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006fb2:	f022 0201 	bic.w	r2, r2, #1
 8006fb6:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8006fb8:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8006fba:	430a      	orrs	r2, r1
 8006fbc:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 8006fbe:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006fc2:	f042 0201 	orr.w	r2, r2, #1
 8006fc6:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8006fca:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8006fce:	f042 0202 	orr.w	r2, r2, #2
 8006fd2:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 8006fd6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8006fd8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8006fda:	2002      	movs	r0, #2
 8006fdc:	e7fc      	b.n	8006fd8 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

08006fe0 <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 8006fe0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006fe2:	7c03      	ldrb	r3, [r0, #16]
{
 8006fe4:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006fe6:	2b01      	cmp	r3, #1
 8006fe8:	d029      	beq.n	800703e <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 8006fea:	6800      	ldr	r0, [r0, #0]
 8006fec:	4b15      	ldr	r3, [pc, #84]	@ (8007044 <HAL_DSI_ConfigCommand+0x64>)
 8006fee:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006ff0:	4023      	ands	r3, r4
 8006ff2:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8006ff4:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 8006ff6:	e9d1 3500 	ldrd	r3, r5, [r1]
 8006ffa:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 8006ffc:	688d      	ldr	r5, [r1, #8]
 8006ffe:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 8007000:	68cd      	ldr	r5, [r1, #12]
 8007002:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 8007004:	690d      	ldr	r5, [r1, #16]
 8007006:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 8007008:	694d      	ldr	r5, [r1, #20]
 800700a:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 800700c:	698d      	ldr	r5, [r1, #24]
 800700e:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 8007010:	69cd      	ldr	r5, [r1, #28]
 8007012:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 8007014:	6a0d      	ldr	r5, [r1, #32]
 8007016:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 8007018:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800701a:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 800701c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800701e:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 8007020:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007022:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 8007024:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 8007026:	4323      	orrs	r3, r4
 8007028:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 800702a:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 800702c:	f023 0302 	bic.w	r3, r3, #2
 8007030:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 8007032:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007034:	430b      	orrs	r3, r1
 8007036:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007038:	2000      	movs	r0, #0
 800703a:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 800703c:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800703e:	2002      	movs	r0, #2
 8007040:	e7fc      	b.n	800703c <HAL_DSI_ConfigCommand+0x5c>
 8007042:	bf00      	nop
 8007044:	fef080ff 	.word	0xfef080ff

08007048 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007048:	7c02      	ldrb	r2, [r0, #16]
{
 800704a:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 800704c:	2a01      	cmp	r2, #1
 800704e:	d00a      	beq.n	8007066 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8007050:	6802      	ldr	r2, [r0, #0]
 8007052:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007054:	f020 001f 	bic.w	r0, r0, #31
 8007058:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800705a:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 800705c:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800705e:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 8007060:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 8007062:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007064:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007066:	2002      	movs	r0, #2
}
 8007068:	4770      	bx	lr

0800706a <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 800706a:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 800706c:	7c03      	ldrb	r3, [r0, #16]
{
 800706e:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 8007070:	2b01      	cmp	r3, #1
 8007072:	d034      	beq.n	80070de <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007074:	e9d1 0300 	ldrd	r0, r3, [r1]
 8007078:	4298      	cmp	r0, r3
 800707a:	bf38      	it	cc
 800707c:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800707e:	6823      	ldr	r3, [r4, #0]
 8007080:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007084:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007088:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 800708c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007090:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007094:	4302      	orrs	r2, r0
 8007096:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 800709a:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800709e:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 80070a2:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80070a6:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 80070aa:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 80070ae:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80070b0:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 80070b4:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80070b6:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80070b8:	432a      	orrs	r2, r5
 80070ba:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80070bc:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 80070be:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 80070c2:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070c6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80070ca:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 80070ce:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070d2:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80070d6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80070da:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80070dc:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80070de:	2002      	movs	r0, #2
 80070e0:	e7fc      	b.n	80070dc <HAL_DSI_ConfigPhyTimer+0x72>
	...

080070e4 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80070e4:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80070e6:	7c03      	ldrb	r3, [r0, #16]
{
 80070e8:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80070ea:	2b01      	cmp	r3, #1
 80070ec:	d05b      	beq.n	80071a6 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80070ee:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80070f0:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80070f2:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80070f4:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80070f6:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80070fa:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80070fc:	689a      	ldr	r2, [r3, #8]
 80070fe:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 8007102:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 8007104:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 8007106:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 8007108:	b292      	uxth	r2, r2
 800710a:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 800710c:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 800710e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007112:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 8007114:	4a25      	ldr	r2, [pc, #148]	@ (80071ac <HAL_DSI_ConfigHostTimeouts+0xc8>)
 8007116:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 8007118:	4010      	ands	r0, r2
 800711a:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 800711c:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 800711e:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007120:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 8007122:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 8007124:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 8007126:	4010      	ands	r0, r2
 8007128:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 800712a:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 800712c:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800712e:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 8007130:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 8007132:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007136:	4010      	ands	r0, r2
 8007138:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 800713c:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007140:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007142:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007144:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007148:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800714c:	4010      	ands	r0, r2
 800714e:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 8007152:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007156:	4328      	orrs	r0, r5
 8007158:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 800715c:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007160:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007164:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007168:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800716c:	698d      	ldr	r5, [r1, #24]
 800716e:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007170:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007172:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007174:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007178:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 800717c:	4010      	ands	r0, r2
 800717e:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 8007182:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007186:	4328      	orrs	r0, r5
 8007188:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 800718c:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 8007190:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007192:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007194:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007198:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 800719c:	430a      	orrs	r2, r1
 800719e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 80071a2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80071a4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80071a6:	2002      	movs	r0, #2
 80071a8:	e7fc      	b.n	80071a4 <HAL_DSI_ConfigHostTimeouts+0xc0>
 80071aa:	bf00      	nop
 80071ac:	ffff0000 	.word	0xffff0000

080071b0 <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80071b0:	7c03      	ldrb	r3, [r0, #16]
{
 80071b2:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	d01c      	beq.n	80071f2 <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80071b8:	6802      	ldr	r2, [r0, #0]
 80071ba:	2300      	movs	r3, #0
 80071bc:	9300      	str	r3, [sp, #0]
 80071be:	6851      	ldr	r1, [r2, #4]
 80071c0:	f041 0101 	orr.w	r1, r1, #1
 80071c4:	6051      	str	r1, [r2, #4]
 80071c6:	6851      	ldr	r1, [r2, #4]
 80071c8:	f001 0101 	and.w	r1, r1, #1
 80071cc:	9100      	str	r1, [sp, #0]
 80071ce:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80071d0:	9301      	str	r3, [sp, #4]
 80071d2:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80071d6:	f041 0108 	orr.w	r1, r1, #8
 80071da:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80071de:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80071e2:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80071e4:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80071e6:	f002 0208 	and.w	r2, r2, #8
 80071ea:	9201      	str	r2, [sp, #4]
 80071ec:	9a01      	ldr	r2, [sp, #4]
}
 80071ee:	b002      	add	sp, #8
 80071f0:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80071f2:	2002      	movs	r0, #2
 80071f4:	e7fb      	b.n	80071ee <HAL_DSI_Start+0x3e>

080071f6 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80071f6:	7c02      	ldrb	r2, [r0, #16]
{
 80071f8:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80071fa:	2a01      	cmp	r2, #1
 80071fc:	d009      	beq.n	8007212 <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80071fe:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007200:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 8007202:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 8007206:	f042 0204 	orr.w	r2, r2, #4
 800720a:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 800720e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007210:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007212:	2002      	movs	r0, #2
}
 8007214:	4770      	bx	lr

08007216 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 8007216:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 8007218:	7c05      	ldrb	r5, [r0, #16]
{
 800721a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800721c:	2d01      	cmp	r5, #1
 800721e:	d009      	beq.n	8007234 <HAL_DSI_ShortWrite+0x1e>
 8007220:	2501      	movs	r5, #1
 8007222:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 8007224:	9d06      	ldr	r5, [sp, #24]
 8007226:	9500      	str	r5, [sp, #0]
 8007228:	f7ff fc6d 	bl	8006b06 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800722c:	2300      	movs	r3, #0
 800722e:	7423      	strb	r3, [r4, #16]

  return status;
}
 8007230:	b003      	add	sp, #12
 8007232:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007234:	2002      	movs	r0, #2
 8007236:	e7fb      	b.n	8007230 <HAL_DSI_ShortWrite+0x1a>

08007238 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007238:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800723c:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800723e:	7c03      	ldrb	r3, [r0, #16]
{
 8007240:	4606      	mov	r6, r0
 8007242:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007244:	2b01      	cmp	r3, #1
{
 8007246:	4615      	mov	r5, r2
 8007248:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 800724c:	d052      	beq.n	80072f4 <HAL_DSI_LongWrite+0xbc>
 800724e:	2301      	movs	r3, #1
 8007250:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8007252:	f7ff f82b 	bl	80062ac <HAL_GetTick>
 8007256:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007258:	6832      	ldr	r2, [r6, #0]
 800725a:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 800725c:	f013 0a01 	ands.w	sl, r3, #1
 8007260:	d019      	beq.n	8007296 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007262:	2c03      	cmp	r4, #3
 8007264:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007266:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800726a:	bf28      	it	cs
 800726c:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800726e:	4283      	cmp	r3, r0
 8007270:	d11d      	bne.n	80072ae <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 8007272:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8007274:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8007276:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800727a:	bb10      	cbnz	r0, 80072c2 <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800727c:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800727e:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 8007282:	0223      	lsls	r3, r4, #8
 8007284:	0224      	lsls	r4, r4, #8
 8007286:	b29b      	uxth	r3, r3
 8007288:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 800728c:	431d      	orrs	r5, r3
 800728e:	4325      	orrs	r5, r4
 8007290:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007292:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8007294:	e009      	b.n	80072aa <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007296:	f7ff f809 	bl	80062ac <HAL_GetTick>
 800729a:	eba0 000b 	sub.w	r0, r0, fp
 800729e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80072a2:	d9d9      	bls.n	8007258 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 80072a4:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80072a6:	f886 a010 	strb.w	sl, [r6, #16]
}
 80072aa:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80072ae:	f818 1003 	ldrb.w	r1, [r8, r3]
 80072b2:	3301      	adds	r3, #1
 80072b4:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 80072b8:	fa01 f10c 	lsl.w	r1, r1, ip
 80072bc:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 80072c0:	e7d5      	b.n	800726e <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80072c2:	2804      	cmp	r0, #4
    fifoword = 0U;
 80072c4:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80072c8:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 80072ca:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 80072cc:	bf28      	it	cs
 80072ce:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80072d2:	f813 8001 	ldrb.w	r8, [r3, r1]
 80072d6:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80072da:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80072dc:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80072e0:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80072e2:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80072e6:	d1f4      	bne.n	80072d2 <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80072e8:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 80072ec:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 80072ee:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 80072f2:	e7c2      	b.n	800727a <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80072f4:	2002      	movs	r0, #2
 80072f6:	e7d8      	b.n	80072aa <HAL_DSI_LongWrite+0x72>

080072f8 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80072f8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80072fc:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80072fe:	7c03      	ldrb	r3, [r0, #16]
{
 8007300:	4605      	mov	r5, r0
 8007302:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 8007304:	2b01      	cmp	r3, #1
{
 8007306:	4617      	mov	r7, r2
 8007308:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 800730c:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 8007310:	d06f      	beq.n	80073f2 <HAL_DSI_Read+0xfa>
 8007312:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 8007314:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 8007316:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 8007318:	d90d      	bls.n	8007336 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800731a:	f3c6 2307 	ubfx	r3, r6, #8, #8
 800731e:	2237      	movs	r2, #55	@ 0x37
 8007320:	9300      	str	r3, [sp, #0]
 8007322:	b2f3      	uxtb	r3, r6
 8007324:	f7ff fbef 	bl	8006b06 <DSI_ShortWrite.constprop.0>
 8007328:	b128      	cbz	r0, 8007336 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800732a:	2300      	movs	r3, #0

      return HAL_ERROR;
 800732c:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 800732e:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 8007330:	b003      	add	sp, #12
 8007332:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007336:	f1b9 0f06 	cmp.w	r9, #6
 800733a:	d10f      	bne.n	800735c <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800733c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800733e:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007340:	021b      	lsls	r3, r3, #8
 8007342:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007346:	f043 0306 	orr.w	r3, r3, #6
 800734a:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 800734c:	f7fe ffae 	bl	80062ac <HAL_GetTick>
 8007350:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 8007352:	2e00      	cmp	r6, #0
 8007354:	dc27      	bgt.n	80073a6 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007356:	2000      	movs	r0, #0
 8007358:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 800735a:	e7e9      	b.n	8007330 <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800735c:	f1b9 0f04 	cmp.w	r9, #4
 8007360:	d105      	bne.n	800736e <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007362:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007364:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007366:	f044 0404 	orr.w	r4, r4, #4
 800736a:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 800736c:	e7ee      	b.n	800734c <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800736e:	f1b9 0f14 	cmp.w	r9, #20
 8007372:	d108      	bne.n	8007386 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007374:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007378:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800737a:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800737c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 8007380:	f044 0414 	orr.w	r4, r4, #20
 8007384:	e7f1      	b.n	800736a <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007386:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 800738a:	d1ce      	bne.n	800732a <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800738c:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007390:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007392:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007394:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007398:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800739c:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 80073a0:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 80073a4:	e7e1      	b.n	800736a <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 80073a6:	682a      	ldr	r2, [r5, #0]
 80073a8:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 80073aa:	f013 0310 	ands.w	r3, r3, #16
 80073ae:	d10d      	bne.n	80073cc <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80073b0:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 80073b2:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 80073b4:	4632      	mov	r2, r6
 80073b6:	bf28      	it	cs
 80073b8:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80073ba:	00d9      	lsls	r1, r3, #3
 80073bc:	fa20 f101 	lsr.w	r1, r0, r1
 80073c0:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 80073c2:	3301      	adds	r3, #1
 80073c4:	429a      	cmp	r2, r3
 80073c6:	d1f8      	bne.n	80073ba <HAL_DSI_Read+0xc2>
        pdata++;
 80073c8:	4417      	add	r7, r2
        datasize--;
 80073ca:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80073cc:	f7fe ff6e 	bl	80062ac <HAL_GetTick>
 80073d0:	1b00      	subs	r0, r0, r4
 80073d2:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80073d6:	d903      	bls.n	80073e0 <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 80073d8:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80073da:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80073dc:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 80073de:	e7a7      	b.n	8007330 <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80073e0:	682b      	ldr	r3, [r5, #0]
 80073e2:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80073e4:	0652      	lsls	r2, r2, #25
 80073e6:	d4b4      	bmi.n	8007352 <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80073e8:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80073ec:	069b      	lsls	r3, r3, #26
 80073ee:	d49c      	bmi.n	800732a <HAL_DSI_Read+0x32>
 80073f0:	e7af      	b.n	8007352 <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 80073f2:	2002      	movs	r0, #2
 80073f4:	e79c      	b.n	8007330 <HAL_DSI_Read+0x38>

080073f6 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073f6:	7c02      	ldrb	r2, [r0, #16]
{
 80073f8:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80073fa:	2a01      	cmp	r2, #1
 80073fc:	d00f      	beq.n	800741e <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80073fe:	6802      	ldr	r2, [r0, #0]
 8007400:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007404:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 8007408:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 800740c:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 8007410:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007414:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 8007416:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 800741a:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 800741c:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 800741e:	2002      	movs	r0, #2
}
 8007420:	4770      	bx	lr
	...

08007424 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8007424:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 8007428:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800742a:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80075f0 <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800742e:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8007432:	680a      	ldr	r2, [r1, #0]
 8007434:	fa32 f503 	lsrs.w	r5, r2, r3
 8007438:	d102      	bne.n	8007440 <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 800743a:	b003      	add	sp, #12
 800743c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8007440:	2501      	movs	r5, #1
 8007442:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007446:	ea18 0202 	ands.w	r2, r8, r2
 800744a:	f000 80bb 	beq.w	80075c4 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800744e:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007450:	2703      	movs	r7, #3
 8007452:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007456:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800745a:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800745e:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007460:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007464:	2f01      	cmp	r7, #1
 8007466:	d834      	bhi.n	80074d2 <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007468:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800746a:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800746e:	68cf      	ldr	r7, [r1, #12]
 8007470:	fa07 f70e 	lsl.w	r7, r7, lr
 8007474:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007478:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 800747a:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800747c:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007480:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007484:	409f      	lsls	r7, r3
 8007486:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 800748a:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 800748c:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800748e:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007490:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007494:	688f      	ldr	r7, [r1, #8]
 8007496:	fa07 f70e 	lsl.w	r7, r7, lr
 800749a:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800749e:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074a0:	d119      	bne.n	80074d6 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 80074a2:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074a6:	f003 0a07 	and.w	sl, r3, #7
 80074aa:	f04f 0b0f 	mov.w	fp, #15
 80074ae:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 80074b2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 80074b6:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80074ba:	fa0b fb0a 	lsl.w	fp, fp, sl
 80074be:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80074c2:	690f      	ldr	r7, [r1, #16]
 80074c4:	fa07 f70a 	lsl.w	r7, r7, sl
 80074c8:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 80074cc:	f8c8 7020 	str.w	r7, [r8, #32]
 80074d0:	e001      	b.n	80074d6 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074d2:	2d03      	cmp	r5, #3
 80074d4:	d1da      	bne.n	800748c <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80074d6:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074d8:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074dc:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80074e0:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074e4:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80074e8:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074ea:	d06b      	beq.n	80075c4 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074ec:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80074f0:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80074f4:	f003 0c03 	and.w	ip, r3, #3
 80074f8:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074fc:	f045 0502 	orr.w	r5, r5, #2
 8007500:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007504:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007508:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 800750c:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 8007510:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007514:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007518:	f005 0502 	and.w	r5, r5, #2
 800751c:	9501      	str	r5, [sp, #4]
 800751e:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 8007520:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8007522:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007526:	4d31      	ldr	r5, [pc, #196]	@ (80075ec <HAL_GPIO_Init+0x1c8>)
 8007528:	42a8      	cmp	r0, r5
 800752a:	d04d      	beq.n	80075c8 <HAL_GPIO_Init+0x1a4>
 800752c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007530:	42a8      	cmp	r0, r5
 8007532:	d04b      	beq.n	80075cc <HAL_GPIO_Init+0x1a8>
 8007534:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007538:	42a8      	cmp	r0, r5
 800753a:	d049      	beq.n	80075d0 <HAL_GPIO_Init+0x1ac>
 800753c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007540:	42a8      	cmp	r0, r5
 8007542:	d047      	beq.n	80075d4 <HAL_GPIO_Init+0x1b0>
 8007544:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007548:	42a8      	cmp	r0, r5
 800754a:	d045      	beq.n	80075d8 <HAL_GPIO_Init+0x1b4>
 800754c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007550:	42a8      	cmp	r0, r5
 8007552:	d043      	beq.n	80075dc <HAL_GPIO_Init+0x1b8>
 8007554:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007558:	42a8      	cmp	r0, r5
 800755a:	d041      	beq.n	80075e0 <HAL_GPIO_Init+0x1bc>
 800755c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007560:	42a8      	cmp	r0, r5
 8007562:	d03f      	beq.n	80075e4 <HAL_GPIO_Init+0x1c0>
 8007564:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007568:	42a8      	cmp	r0, r5
 800756a:	d03d      	beq.n	80075e8 <HAL_GPIO_Init+0x1c4>
 800756c:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007570:	42a8      	cmp	r0, r5
 8007572:	bf14      	ite	ne
 8007574:	250a      	movne	r5, #10
 8007576:	2509      	moveq	r5, #9
 8007578:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800757c:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007580:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007584:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007586:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 800758a:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 800758c:	bf0c      	ite	eq
 800758e:	403d      	andeq	r5, r7
          temp |= iocurrent;
 8007590:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8007592:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007596:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007598:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 800759a:	bf0c      	ite	eq
 800759c:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800759e:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075a0:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 80075a4:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 80075a6:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 80075aa:	bf0c      	ite	eq
 80075ac:	403d      	andeq	r5, r7
          temp |= iocurrent;
 80075ae:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075b0:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 80075b2:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 80075b6:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 80075ba:	bf54      	ite	pl
 80075bc:	403d      	andpl	r5, r7
          temp |= iocurrent;
 80075be:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 80075c0:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 80075c4:	3301      	adds	r3, #1
 80075c6:	e734      	b.n	8007432 <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80075c8:	2500      	movs	r5, #0
 80075ca:	e7d5      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075cc:	2501      	movs	r5, #1
 80075ce:	e7d3      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075d0:	2502      	movs	r5, #2
 80075d2:	e7d1      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075d4:	2503      	movs	r5, #3
 80075d6:	e7cf      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075d8:	2504      	movs	r5, #4
 80075da:	e7cd      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075dc:	2505      	movs	r5, #5
 80075de:	e7cb      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075e0:	2506      	movs	r5, #6
 80075e2:	e7c9      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075e4:	2507      	movs	r5, #7
 80075e6:	e7c7      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075e8:	2508      	movs	r5, #8
 80075ea:	e7c5      	b.n	8007578 <HAL_GPIO_Init+0x154>
 80075ec:	58020000 	.word	0x58020000
 80075f0:	58024400 	.word	0x58024400

080075f4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80075f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80075f8:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80075fa:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80075fe:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007602:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007606:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 800760a:	fa31 f302 	lsrs.w	r3, r1, r2
 800760e:	d101      	bne.n	8007614 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 8007610:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 8007614:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 8007618:	ea1c 0601 	ands.w	r6, ip, r1
 800761c:	d070      	beq.n	8007700 <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 800761e:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007622:	f002 0703 	and.w	r7, r2, #3
 8007626:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 800762a:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 800762c:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8007630:	fa08 f907 	lsl.w	r9, r8, r7
 8007634:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007638:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800763c:	4b3a      	ldr	r3, [pc, #232]	@ (8007728 <HAL_GPIO_DeInit+0x134>)
 800763e:	4298      	cmp	r0, r3
 8007640:	d060      	beq.n	8007704 <HAL_GPIO_DeInit+0x110>
 8007642:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007646:	4298      	cmp	r0, r3
 8007648:	d05e      	beq.n	8007708 <HAL_GPIO_DeInit+0x114>
 800764a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800764e:	4298      	cmp	r0, r3
 8007650:	d05c      	beq.n	800770c <HAL_GPIO_DeInit+0x118>
 8007652:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007656:	4298      	cmp	r0, r3
 8007658:	d05a      	beq.n	8007710 <HAL_GPIO_DeInit+0x11c>
 800765a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800765e:	4298      	cmp	r0, r3
 8007660:	d058      	beq.n	8007714 <HAL_GPIO_DeInit+0x120>
 8007662:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007666:	4298      	cmp	r0, r3
 8007668:	d056      	beq.n	8007718 <HAL_GPIO_DeInit+0x124>
 800766a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800766e:	4298      	cmp	r0, r3
 8007670:	d054      	beq.n	800771c <HAL_GPIO_DeInit+0x128>
 8007672:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007676:	4298      	cmp	r0, r3
 8007678:	d052      	beq.n	8007720 <HAL_GPIO_DeInit+0x12c>
 800767a:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 800767e:	4298      	cmp	r0, r3
 8007680:	d050      	beq.n	8007724 <HAL_GPIO_DeInit+0x130>
 8007682:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007686:	4298      	cmp	r0, r3
 8007688:	bf0c      	ite	eq
 800768a:	2309      	moveq	r3, #9
 800768c:	230a      	movne	r3, #10
 800768e:	40bb      	lsls	r3, r7
 8007690:	4573      	cmp	r3, lr
 8007692:	d117      	bne.n	80076c4 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007694:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007698:	ea23 0306 	bic.w	r3, r3, r6
 800769c:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 80076a0:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 80076a4:	ea23 0306 	bic.w	r3, r3, r6
 80076a8:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 80076ac:	6863      	ldr	r3, [r4, #4]
 80076ae:	ea23 0306 	bic.w	r3, r3, r6
 80076b2:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 80076b4:	6823      	ldr	r3, [r4, #0]
 80076b6:	ea23 0306 	bic.w	r3, r3, r6
 80076ba:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80076bc:	68ab      	ldr	r3, [r5, #8]
 80076be:	ea23 0309 	bic.w	r3, r3, r9
 80076c2:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80076c4:	0053      	lsls	r3, r2, #1
 80076c6:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80076c8:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80076ca:	fa0b f303 	lsl.w	r3, fp, r3
 80076ce:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80076d2:	431d      	orrs	r5, r3
 80076d4:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 80076d6:	f002 0507 	and.w	r5, r2, #7
 80076da:	6a37      	ldr	r7, [r6, #32]
 80076dc:	00ad      	lsls	r5, r5, #2
 80076de:	fa08 f505 	lsl.w	r5, r8, r5
 80076e2:	ea27 0705 	bic.w	r7, r7, r5
 80076e6:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80076e8:	68c5      	ldr	r5, [r0, #12]
 80076ea:	ea25 0503 	bic.w	r5, r5, r3
 80076ee:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 80076f0:	6845      	ldr	r5, [r0, #4]
 80076f2:	ea25 050c 	bic.w	r5, r5, ip
 80076f6:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80076f8:	6885      	ldr	r5, [r0, #8]
 80076fa:	ea25 0303 	bic.w	r3, r5, r3
 80076fe:	6083      	str	r3, [r0, #8]
    position++;
 8007700:	3201      	adds	r2, #1
 8007702:	e782      	b.n	800760a <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007704:	2300      	movs	r3, #0
 8007706:	e7c2      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007708:	2301      	movs	r3, #1
 800770a:	e7c0      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 800770c:	2302      	movs	r3, #2
 800770e:	e7be      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007710:	2303      	movs	r3, #3
 8007712:	e7bc      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007714:	2304      	movs	r3, #4
 8007716:	e7ba      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007718:	2305      	movs	r3, #5
 800771a:	e7b8      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 800771c:	2306      	movs	r3, #6
 800771e:	e7b6      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007720:	2307      	movs	r3, #7
 8007722:	e7b4      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007724:	2308      	movs	r3, #8
 8007726:	e7b2      	b.n	800768e <HAL_GPIO_DeInit+0x9a>
 8007728:	58020000 	.word	0x58020000

0800772c <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800772c:	6903      	ldr	r3, [r0, #16]
 800772e:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007730:	bf14      	ite	ne
 8007732:	2001      	movne	r0, #1
 8007734:	2000      	moveq	r0, #0
 8007736:	4770      	bx	lr

08007738 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007738:	b10a      	cbz	r2, 800773e <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800773a:	6181      	str	r1, [r0, #24]
  }
}
 800773c:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800773e:	0409      	lsls	r1, r1, #16
 8007740:	e7fb      	b.n	800773a <HAL_GPIO_WritePin+0x2>

08007742 <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007742:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007744:	ea01 0203 	and.w	r2, r1, r3
 8007748:	ea21 0103 	bic.w	r1, r1, r3
 800774c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007750:	6181      	str	r1, [r0, #24]
}
 8007752:	4770      	bx	lr

08007754 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007754:	4b04      	ldr	r3, [pc, #16]	@ (8007768 <HAL_HSEM_FastTake+0x14>)
 8007756:	3020      	adds	r0, #32
 8007758:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 800775c:	4b03      	ldr	r3, [pc, #12]	@ (800776c <HAL_HSEM_FastTake+0x18>)
 800775e:	1ac0      	subs	r0, r0, r3
 8007760:	bf18      	it	ne
 8007762:	2001      	movne	r0, #1
 8007764:	4770      	bx	lr
 8007766:	bf00      	nop
 8007768:	58026400 	.word	0x58026400
 800776c:	80000300 	.word	0x80000300

08007770 <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007770:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007774:	4b01      	ldr	r3, [pc, #4]	@ (800777c <HAL_HSEM_Release+0xc>)
 8007776:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 800777a:	4770      	bx	lr
 800777c:	58026400 	.word	0x58026400

08007780 <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007780:	6803      	ldr	r3, [r0, #0]
 8007782:	699a      	ldr	r2, [r3, #24]
 8007784:	0791      	lsls	r1, r2, #30
 8007786:	d501      	bpl.n	800778c <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007788:	2200      	movs	r2, #0
 800778a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800778c:	699a      	ldr	r2, [r3, #24]
 800778e:	07d2      	lsls	r2, r2, #31
 8007790:	d403      	bmi.n	800779a <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007792:	699a      	ldr	r2, [r3, #24]
 8007794:	f042 0201 	orr.w	r2, r2, #1
 8007798:	619a      	str	r2, [r3, #24]
  }
}
 800779a:	4770      	bx	lr

0800779c <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800779c:	b530      	push	{r4, r5, lr}
 800779e:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077a0:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 80077a4:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077a6:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 80077a8:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077aa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 80077ae:	4a05      	ldr	r2, [pc, #20]	@ (80077c4 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077b0:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 80077b2:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 80077b6:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 80077ba:	ea20 0002 	bic.w	r0, r0, r2
 80077be:	4303      	orrs	r3, r0
 80077c0:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 80077c2:	bd30      	pop	{r4, r5, pc}
 80077c4:	03ff63ff 	.word	0x03ff63ff

080077c8 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 80077c8:	6803      	ldr	r3, [r0, #0]
{
 80077ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 80077ce:	699c      	ldr	r4, [r3, #24]
{
 80077d0:	4605      	mov	r5, r0
 80077d2:	460f      	mov	r7, r1
 80077d4:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80077d6:	f014 0410 	ands.w	r4, r4, #16
 80077da:	d06f      	beq.n	80078bc <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 80077dc:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077de:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 80077e0:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80077e2:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80077e4:	682b      	ldr	r3, [r5, #0]
 80077e6:	699a      	ldr	r2, [r3, #24]
 80077e8:	0690      	lsls	r0, r2, #26
 80077ea:	d461      	bmi.n	80078b0 <I2C_IsErrorOccurred+0xe8>
 80077ec:	f1b8 0f00 	cmp.w	r8, #0
 80077f0:	d035      	beq.n	800785e <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 80077f2:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 80077f6:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 80077f8:	682e      	ldr	r6, [r5, #0]
 80077fa:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80077fc:	05d9      	lsls	r1, r3, #23
 80077fe:	d505      	bpl.n	800780c <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007800:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007804:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007808:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800780a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800780c:	055a      	lsls	r2, r3, #21
 800780e:	d505      	bpl.n	800781c <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007810:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007814:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007818:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800781a:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800781c:	059b      	lsls	r3, r3, #22
 800781e:	d54f      	bpl.n	80078c0 <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007820:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007824:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007828:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 800782a:	4628      	mov	r0, r5
 800782c:	f7ff ffa8 	bl	8007780 <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007830:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8007832:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007834:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007838:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 800783c:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007840:	f023 0301 	bic.w	r3, r3, #1
 8007844:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007846:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007848:	4323      	orrs	r3, r4
 800784a:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800784c:	2320      	movs	r3, #32
 800784e:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007852:	2300      	movs	r3, #0
 8007854:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007858:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 800785c:	e032      	b.n	80078c4 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 800785e:	1c7a      	adds	r2, r7, #1
 8007860:	d0c1      	beq.n	80077e6 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007862:	f7fe fd23 	bl	80062ac <HAL_GetTick>
 8007866:	1b80      	subs	r0, r0, r6
 8007868:	42b8      	cmp	r0, r7
 800786a:	d801      	bhi.n	8007870 <I2C_IsErrorOccurred+0xa8>
 800786c:	2f00      	cmp	r7, #0
 800786e:	d1b9      	bne.n	80077e4 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007870:	682b      	ldr	r3, [r5, #0]
 8007872:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007874:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007878:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 800787a:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800787c:	0400      	lsls	r0, r0, #16
 800787e:	d50a      	bpl.n	8007896 <I2C_IsErrorOccurred+0xce>
 8007880:	0449      	lsls	r1, r1, #17
 8007882:	d408      	bmi.n	8007896 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8007884:	2a20      	cmp	r2, #32
 8007886:	d006      	beq.n	8007896 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007888:	685a      	ldr	r2, [r3, #4]
 800788a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800788e:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007890:	f7fe fd0c 	bl	80062ac <HAL_GetTick>
 8007894:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007896:	682b      	ldr	r3, [r5, #0]
 8007898:	699b      	ldr	r3, [r3, #24]
 800789a:	069b      	lsls	r3, r3, #26
 800789c:	d4a2      	bmi.n	80077e4 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800789e:	f7fe fd05 	bl	80062ac <HAL_GetTick>
 80078a2:	1b80      	subs	r0, r0, r6
 80078a4:	2819      	cmp	r0, #25
 80078a6:	d9f6      	bls.n	8007896 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 80078a8:	2420      	movs	r4, #32
              status = HAL_ERROR;
 80078aa:	f04f 0801 	mov.w	r8, #1
 80078ae:	e799      	b.n	80077e4 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 80078b0:	f1b8 0f00 	cmp.w	r8, #0
 80078b4:	d19d      	bne.n	80077f2 <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078b6:	2220      	movs	r2, #32
 80078b8:	61da      	str	r2, [r3, #28]
 80078ba:	e79a      	b.n	80077f2 <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 80078bc:	4620      	mov	r0, r4
 80078be:	e79b      	b.n	80077f8 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 80078c0:	2800      	cmp	r0, #0
 80078c2:	d1b2      	bne.n	800782a <I2C_IsErrorOccurred+0x62>
}
 80078c4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080078c8 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 80078c8:	b570      	push	{r4, r5, r6, lr}
 80078ca:	4604      	mov	r4, r0
 80078cc:	460d      	mov	r5, r1
 80078ce:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80078d0:	6823      	ldr	r3, [r4, #0]
 80078d2:	699b      	ldr	r3, [r3, #24]
 80078d4:	079b      	lsls	r3, r3, #30
 80078d6:	d501      	bpl.n	80078dc <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 80078d8:	2000      	movs	r0, #0
 80078da:	e01f      	b.n	800791c <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80078dc:	4632      	mov	r2, r6
 80078de:	4629      	mov	r1, r5
 80078e0:	4620      	mov	r0, r4
 80078e2:	f7ff ff71 	bl	80077c8 <I2C_IsErrorOccurred>
 80078e6:	b9c0      	cbnz	r0, 800791a <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 80078e8:	1c6a      	adds	r2, r5, #1
 80078ea:	d0f1      	beq.n	80078d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078ec:	f7fe fcde 	bl	80062ac <HAL_GetTick>
 80078f0:	1b80      	subs	r0, r0, r6
 80078f2:	42a8      	cmp	r0, r5
 80078f4:	d801      	bhi.n	80078fa <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 80078f6:	2d00      	cmp	r5, #0
 80078f8:	d1ea      	bne.n	80078d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80078fa:	6823      	ldr	r3, [r4, #0]
 80078fc:	699b      	ldr	r3, [r3, #24]
 80078fe:	f013 0302 	ands.w	r3, r3, #2
 8007902:	d1e5      	bne.n	80078d0 <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007904:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8007906:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800790a:	f042 0220 	orr.w	r2, r2, #32
 800790e:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007910:	2220      	movs	r2, #32
 8007912:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007916:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 800791a:	2001      	movs	r0, #1
}
 800791c:	bd70      	pop	{r4, r5, r6, pc}

0800791e <I2C_WaitOnFlagUntilTimeout>:
{
 800791e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007922:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007926:	4604      	mov	r4, r0
 8007928:	460f      	mov	r7, r1
 800792a:	4616      	mov	r6, r2
 800792c:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800792e:	6823      	ldr	r3, [r4, #0]
 8007930:	699b      	ldr	r3, [r3, #24]
 8007932:	ea37 0303 	bics.w	r3, r7, r3
 8007936:	bf0c      	ite	eq
 8007938:	2301      	moveq	r3, #1
 800793a:	2300      	movne	r3, #0
 800793c:	42b3      	cmp	r3, r6
 800793e:	d001      	beq.n	8007944 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007940:	2000      	movs	r0, #0
 8007942:	e025      	b.n	8007990 <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007944:	4642      	mov	r2, r8
 8007946:	4629      	mov	r1, r5
 8007948:	4620      	mov	r0, r4
 800794a:	f7ff ff3d 	bl	80077c8 <I2C_IsErrorOccurred>
 800794e:	b9f0      	cbnz	r0, 800798e <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007950:	1c6b      	adds	r3, r5, #1
 8007952:	d0ec      	beq.n	800792e <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007954:	f7fe fcaa 	bl	80062ac <HAL_GetTick>
 8007958:	eba0 0008 	sub.w	r0, r0, r8
 800795c:	42a8      	cmp	r0, r5
 800795e:	d801      	bhi.n	8007964 <I2C_WaitOnFlagUntilTimeout+0x46>
 8007960:	2d00      	cmp	r5, #0
 8007962:	d1e4      	bne.n	800792e <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007964:	6823      	ldr	r3, [r4, #0]
 8007966:	699b      	ldr	r3, [r3, #24]
 8007968:	ea37 0303 	bics.w	r3, r7, r3
 800796c:	bf0c      	ite	eq
 800796e:	2301      	moveq	r3, #1
 8007970:	2300      	movne	r3, #0
 8007972:	42b3      	cmp	r3, r6
 8007974:	d1db      	bne.n	800792e <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007976:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007978:	f043 0320 	orr.w	r3, r3, #32
 800797c:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800797e:	2320      	movs	r3, #32
 8007980:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007984:	2300      	movs	r3, #0
 8007986:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 800798a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 800798e:	2001      	movs	r0, #1
}
 8007990:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007994 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007994:	b570      	push	{r4, r5, r6, lr}
 8007996:	4604      	mov	r4, r0
 8007998:	460d      	mov	r5, r1
 800799a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800799c:	6823      	ldr	r3, [r4, #0]
 800799e:	699b      	ldr	r3, [r3, #24]
 80079a0:	069b      	lsls	r3, r3, #26
 80079a2:	d501      	bpl.n	80079a8 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 80079a4:	2000      	movs	r0, #0
 80079a6:	e01d      	b.n	80079e4 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80079a8:	4632      	mov	r2, r6
 80079aa:	4629      	mov	r1, r5
 80079ac:	4620      	mov	r0, r4
 80079ae:	f7ff ff0b 	bl	80077c8 <I2C_IsErrorOccurred>
 80079b2:	b9b0      	cbnz	r0, 80079e2 <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80079b4:	f7fe fc7a 	bl	80062ac <HAL_GetTick>
 80079b8:	1b80      	subs	r0, r0, r6
 80079ba:	42a8      	cmp	r0, r5
 80079bc:	d801      	bhi.n	80079c2 <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 80079be:	2d00      	cmp	r5, #0
 80079c0:	d1ec      	bne.n	800799c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 80079c2:	6823      	ldr	r3, [r4, #0]
 80079c4:	699b      	ldr	r3, [r3, #24]
 80079c6:	f013 0320 	ands.w	r3, r3, #32
 80079ca:	d1e7      	bne.n	800799c <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079cc:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 80079ce:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80079d2:	f042 0220 	orr.w	r2, r2, #32
 80079d6:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 80079d8:	2220      	movs	r2, #32
 80079da:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80079de:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 80079e2:	2001      	movs	r0, #1
}
 80079e4:	bd70      	pop	{r4, r5, r6, pc}

080079e6 <HAL_I2C_MspInit>:
}
 80079e6:	4770      	bx	lr

080079e8 <HAL_I2C_Init>:
{
 80079e8:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 80079ea:	4604      	mov	r4, r0
 80079ec:	2800      	cmp	r0, #0
 80079ee:	d04e      	beq.n	8007a8e <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 80079f0:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 80079f4:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80079f8:	b91b      	cbnz	r3, 8007a02 <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 80079fa:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 80079fe:	f7ff fff2 	bl	80079e6 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a02:	2324      	movs	r3, #36	@ 0x24
 8007a04:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007a08:	6823      	ldr	r3, [r4, #0]
 8007a0a:	681a      	ldr	r2, [r3, #0]
 8007a0c:	f022 0201 	bic.w	r2, r2, #1
 8007a10:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007a12:	6862      	ldr	r2, [r4, #4]
 8007a14:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007a18:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007a1a:	689a      	ldr	r2, [r3, #8]
 8007a1c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a20:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a22:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007a26:	2901      	cmp	r1, #1
 8007a28:	d106      	bne.n	8007a38 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007a2a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a2e:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a30:	685a      	ldr	r2, [r3, #4]
 8007a32:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007a36:	e007      	b.n	8007a48 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a38:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a3c:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007a3e:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007a40:	d1f6      	bne.n	8007a30 <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a42:	685a      	ldr	r2, [r3, #4]
 8007a44:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007a48:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a4a:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007a4c:	685a      	ldr	r2, [r3, #4]
 8007a4e:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007a52:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007a56:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007a58:	68da      	ldr	r2, [r3, #12]
 8007a5a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007a5e:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a60:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007a64:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007a66:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007a68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007a6c:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007a6e:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007a72:	430a      	orrs	r2, r1
 8007a74:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007a76:	681a      	ldr	r2, [r3, #0]
 8007a78:	f042 0201 	orr.w	r2, r2, #1
 8007a7c:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007a7e:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007a80:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007a82:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007a86:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007a88:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007a8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007a8e:	2001      	movs	r0, #1
 8007a90:	e7fc      	b.n	8007a8c <HAL_I2C_Init+0xa4>

08007a92 <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8007a92:	4770      	bx	lr

08007a94 <HAL_I2C_DeInit>:
{
 8007a94:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007a96:	4604      	mov	r4, r0
 8007a98:	b198      	cbz	r0, 8007ac2 <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007a9a:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007a9c:	2324      	movs	r3, #36	@ 0x24
 8007a9e:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007aa2:	6813      	ldr	r3, [r2, #0]
 8007aa4:	f023 0301 	bic.w	r3, r3, #1
 8007aa8:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007aaa:	f7ff fff2 	bl	8007a92 <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007aae:	2000      	movs	r0, #0
 8007ab0:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007ab2:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007ab6:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007aba:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007abc:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007ac0:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007ac2:	2001      	movs	r0, #1
 8007ac4:	e7fc      	b.n	8007ac0 <HAL_I2C_DeInit+0x2c>
	...

08007ac8 <HAL_I2C_Mem_Write>:
{
 8007ac8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007acc:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ace:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007ad2:	4604      	mov	r4, r0
 8007ad4:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ad6:	2b20      	cmp	r3, #32
{
 8007ad8:	4616      	mov	r6, r2
 8007ada:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007ade:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ae2:	f040 80c6 	bne.w	8007c72 <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae8:	b113      	cbz	r3, 8007af0 <HAL_I2C_Mem_Write+0x28>
 8007aea:	f1ba 0f00 	cmp.w	sl, #0
 8007aee:	d106      	bne.n	8007afe <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007af0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007af4:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007af6:	2001      	movs	r0, #1
}
 8007af8:	b003      	add	sp, #12
 8007afa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007afe:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007b02:	2b01      	cmp	r3, #1
 8007b04:	f000 80b5 	beq.w	8007c72 <HAL_I2C_Mem_Write+0x1aa>
 8007b08:	f04f 0b01 	mov.w	fp, #1
 8007b0c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007b10:	f7fe fbcc 	bl	80062ac <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b14:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007b16:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007b18:	9000      	str	r0, [sp, #0]
 8007b1a:	465a      	mov	r2, fp
 8007b1c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007b20:	4620      	mov	r0, r4
 8007b22:	f7ff fefc 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007b26:	2800      	cmp	r0, #0
 8007b28:	d1e5      	bne.n	8007af6 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b2a:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007b2c:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b2e:	fa5f f289 	uxtb.w	r2, r9
 8007b32:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007b34:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007b38:	2340      	movs	r3, #64	@ 0x40
 8007b3a:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007b3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007b40:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b42:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007b44:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b46:	4b4c      	ldr	r3, [pc, #304]	@ (8007c78 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007b48:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007b4c:	9300      	str	r3, [sp, #0]
 8007b4e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007b52:	f7ff fe23 	bl	800779c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b56:	462a      	mov	r2, r5
 8007b58:	4641      	mov	r1, r8
 8007b5a:	4620      	mov	r0, r4
 8007b5c:	f7ff feb4 	bl	80078c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007b60:	bb18      	cbnz	r0, 8007baa <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b62:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b66:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007b68:	d115      	bne.n	8007b96 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b6a:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2180      	movs	r1, #128	@ 0x80
 8007b70:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007b72:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007b74:	4643      	mov	r3, r8
 8007b76:	9500      	str	r5, [sp, #0]
 8007b78:	f7ff fed1 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007b7c:	b9a8      	cbnz	r0, 8007baa <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b7e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007b80:	b29b      	uxth	r3, r3
 8007b82:	2bff      	cmp	r3, #255	@ 0xff
 8007b84:	d815      	bhi.n	8007bb2 <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007b86:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b88:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007b8c:	b292      	uxth	r2, r2
 8007b8e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007b90:	b2d2      	uxtb	r2, r2
 8007b92:	9000      	str	r0, [sp, #0]
 8007b94:	e012      	b.n	8007bbc <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b96:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b98:	4641      	mov	r1, r8
 8007b9a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007b9c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007b9e:	462a      	mov	r2, r5
 8007ba0:	f7ff fe92 	bl	80078c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007ba4:	b908      	cbnz	r0, 8007baa <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007ba6:	6823      	ldr	r3, [r4, #0]
 8007ba8:	e7df      	b.n	8007b6a <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007baa:	2300      	movs	r3, #0
 8007bac:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007bb0:	e7a1      	b.n	8007af6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb2:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bb4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007bb8:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007bba:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007bbc:	4639      	mov	r1, r7
 8007bbe:	4620      	mov	r0, r4
 8007bc0:	f7ff fdec 	bl	800779c <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007bc4:	462a      	mov	r2, r5
 8007bc6:	4641      	mov	r1, r8
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f7ff fe7d 	bl	80078c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007bce:	2800      	cmp	r0, #0
 8007bd0:	d191      	bne.n	8007af6 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007bd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007bd4:	6822      	ldr	r2, [r4, #0]
 8007bd6:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007bda:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007bdc:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007bde:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007be0:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007be2:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007be4:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007be6:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007be8:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007bea:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bec:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007bee:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007bf0:	b29b      	uxth	r3, r3
 8007bf2:	b1b3      	cbz	r3, 8007c22 <HAL_I2C_Mem_Write+0x15a>
 8007bf4:	b9aa      	cbnz	r2, 8007c22 <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007bf6:	4643      	mov	r3, r8
 8007bf8:	2180      	movs	r1, #128	@ 0x80
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	9500      	str	r5, [sp, #0]
 8007bfe:	f7ff fe8e 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007c02:	2800      	cmp	r0, #0
 8007c04:	f47f af77 	bne.w	8007af6 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007c08:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007c0a:	b29b      	uxth	r3, r3
 8007c0c:	2bff      	cmp	r3, #255	@ 0xff
 8007c0e:	d928      	bls.n	8007c62 <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c10:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c12:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007c16:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007c18:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c1a:	4639      	mov	r1, r7
 8007c1c:	4620      	mov	r0, r4
 8007c1e:	f7ff fdbd 	bl	800779c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007c22:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007c24:	b29b      	uxth	r3, r3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d1cc      	bne.n	8007bc4 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007c2a:	462a      	mov	r2, r5
 8007c2c:	4641      	mov	r1, r8
 8007c2e:	4620      	mov	r0, r4
 8007c30:	f7ff feb0 	bl	8007994 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007c34:	2800      	cmp	r0, #0
 8007c36:	f47f af5e 	bne.w	8007af6 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c3a:	6823      	ldr	r3, [r4, #0]
 8007c3c:	2120      	movs	r1, #32
 8007c3e:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007c40:	685a      	ldr	r2, [r3, #4]
 8007c42:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007c46:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007c4a:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007c4e:	f022 0201 	bic.w	r2, r2, #1
 8007c52:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007c54:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007c58:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007c5c:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007c60:	e74a      	b.n	8007af8 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007c62:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c64:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007c68:	b292      	uxth	r2, r2
 8007c6a:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007c6c:	b2d2      	uxtb	r2, r2
 8007c6e:	9000      	str	r0, [sp, #0]
 8007c70:	e7d3      	b.n	8007c1a <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 8007c72:	2002      	movs	r0, #2
 8007c74:	e740      	b.n	8007af8 <HAL_I2C_Mem_Write+0x30>
 8007c76:	bf00      	nop
 8007c78:	80002000 	.word	0x80002000

08007c7c <HAL_I2C_Mem_Read>:
{
 8007c7c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c80:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c82:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007c86:	4604      	mov	r4, r0
 8007c88:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c8a:	2b20      	cmp	r3, #32
{
 8007c8c:	4616      	mov	r6, r2
 8007c8e:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007c92:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007c96:	f040 80c9 	bne.w	8007e2c <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8007c9a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007c9c:	b113      	cbz	r3, 8007ca4 <HAL_I2C_Mem_Read+0x28>
 8007c9e:	f1ba 0f00 	cmp.w	sl, #0
 8007ca2:	d106      	bne.n	8007cb2 <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ca4:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ca8:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007caa:	2001      	movs	r0, #1
}
 8007cac:	b003      	add	sp, #12
 8007cae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007cb2:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007cb6:	2b01      	cmp	r3, #1
 8007cb8:	f000 80b8 	beq.w	8007e2c <HAL_I2C_Mem_Read+0x1b0>
 8007cbc:	f04f 0b01 	mov.w	fp, #1
 8007cc0:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007cc4:	f7fe faf2 	bl	80062ac <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cc8:	2319      	movs	r3, #25
 8007cca:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8007ccc:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007cce:	465a      	mov	r2, fp
 8007cd0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	f7ff fe22 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2800      	cmp	r0, #0
 8007cde:	d1e4      	bne.n	8007caa <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ce0:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 8007ce2:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007ce4:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8007ce6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007cea:	2240      	movs	r2, #64	@ 0x40
 8007cec:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007cf0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007cf2:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cf4:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007cf6:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cf8:	4a4d      	ldr	r2, [pc, #308]	@ (8007e30 <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 8007cfa:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8007cfe:	9200      	str	r2, [sp, #0]
 8007d00:	fa5f f289 	uxtb.w	r2, r9
 8007d04:	f7ff fd4a 	bl	800779c <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d08:	462a      	mov	r2, r5
 8007d0a:	4641      	mov	r1, r8
 8007d0c:	4620      	mov	r0, r4
 8007d0e:	f7ff fddb 	bl	80078c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d12:	bb20      	cbnz	r0, 8007d5e <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d14:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d18:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007d1a:	d116      	bne.n	8007d4a <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d1c:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d1e:	2200      	movs	r2, #0
 8007d20:	2140      	movs	r1, #64	@ 0x40
 8007d22:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d24:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8007d26:	4643      	mov	r3, r8
 8007d28:	9500      	str	r5, [sp, #0]
 8007d2a:	f7ff fdf8 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007d2e:	b9b0      	cbnz	r0, 8007d5e <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007d30:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007d32:	b29b      	uxth	r3, r3
 8007d34:	2bff      	cmp	r3, #255	@ 0xff
 8007d36:	4b3f      	ldr	r3, [pc, #252]	@ (8007e34 <HAL_I2C_Mem_Read+0x1b8>)
 8007d38:	d815      	bhi.n	8007d66 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007d3a:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8007d3c:	b292      	uxth	r2, r2
 8007d3e:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d40:	b2d2      	uxtb	r2, r2
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8007d48:	e012      	b.n	8007d70 <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d4a:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d4c:	4641      	mov	r1, r8
 8007d4e:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007d50:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d52:	462a      	mov	r2, r5
 8007d54:	f7ff fdb8 	bl	80078c8 <I2C_WaitOnTXISFlagUntilTimeout>
 8007d58:	b908      	cbnz	r0, 8007d5e <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007d5a:	6823      	ldr	r3, [r4, #0]
 8007d5c:	e7de      	b.n	8007d1c <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 8007d5e:	2300      	movs	r3, #0
 8007d60:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007d64:	e7a1      	b.n	8007caa <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007d66:	22ff      	movs	r2, #255	@ 0xff
 8007d68:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007d6a:	9300      	str	r3, [sp, #0]
 8007d6c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007d70:	4639      	mov	r1, r7
 8007d72:	4620      	mov	r0, r4
 8007d74:	f7ff fd12 	bl	800779c <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8007d78:	4643      	mov	r3, r8
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	2104      	movs	r1, #4
 8007d7e:	4620      	mov	r0, r4
 8007d80:	9500      	str	r5, [sp, #0]
 8007d82:	f7ff fdcc 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007d86:	2800      	cmp	r0, #0
 8007d88:	d18f      	bne.n	8007caa <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007d8a:	6823      	ldr	r3, [r4, #0]
 8007d8c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007d8e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007d90:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 8007d92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8007d94:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007d96:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8007d98:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8007d9a:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007d9c:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007d9e:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007da0:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007da2:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007da4:	b29b      	uxth	r3, r3
 8007da6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007da8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007daa:	b29b      	uxth	r3, r3
 8007dac:	b1b3      	cbz	r3, 8007ddc <HAL_I2C_Mem_Read+0x160>
 8007dae:	b9aa      	cbnz	r2, 8007ddc <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007db0:	4643      	mov	r3, r8
 8007db2:	2180      	movs	r1, #128	@ 0x80
 8007db4:	4620      	mov	r0, r4
 8007db6:	9500      	str	r5, [sp, #0]
 8007db8:	f7ff fdb1 	bl	800791e <I2C_WaitOnFlagUntilTimeout>
 8007dbc:	2800      	cmp	r0, #0
 8007dbe:	f47f af74 	bne.w	8007caa <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007dc2:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007dc4:	b29b      	uxth	r3, r3
 8007dc6:	2bff      	cmp	r3, #255	@ 0xff
 8007dc8:	d928      	bls.n	8007e1c <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dca:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007dcc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007dd0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8007dd2:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007dd4:	4639      	mov	r1, r7
 8007dd6:	4620      	mov	r0, r4
 8007dd8:	f7ff fce0 	bl	800779c <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007ddc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007dde:	b29b      	uxth	r3, r3
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d1c9      	bne.n	8007d78 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007de4:	462a      	mov	r2, r5
 8007de6:	4641      	mov	r1, r8
 8007de8:	4620      	mov	r0, r4
 8007dea:	f7ff fdd3 	bl	8007994 <I2C_WaitOnSTOPFlagUntilTimeout>
 8007dee:	2800      	cmp	r0, #0
 8007df0:	f47f af5b 	bne.w	8007caa <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007df4:	6823      	ldr	r3, [r4, #0]
 8007df6:	2120      	movs	r1, #32
 8007df8:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8007e00:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8007e04:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 8007e08:	f022 0201 	bic.w	r2, r2, #1
 8007e0c:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e0e:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007e12:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8007e16:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 8007e1a:	e747      	b.n	8007cac <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 8007e1c:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e1e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8007e22:	b292      	uxth	r2, r2
 8007e24:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007e26:	b2d2      	uxtb	r2, r2
 8007e28:	9000      	str	r0, [sp, #0]
 8007e2a:	e7d3      	b.n	8007dd4 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 8007e2c:	2002      	movs	r0, #2
 8007e2e:	e73d      	b.n	8007cac <HAL_I2C_Mem_Read+0x30>
 8007e30:	80002000 	.word	0x80002000
 8007e34:	80002400 	.word	0x80002400

08007e38 <HAL_I2C_GetState>:
  return hi2c->State;
 8007e38:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8007e3c:	4770      	bx	lr

08007e3e <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 8007e3e:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 8007e40:	4770      	bx	lr

08007e42 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8007e42:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e44:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007e48:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e4a:	2a20      	cmp	r2, #32
 8007e4c:	b2d4      	uxtb	r4, r2
 8007e4e:	d11c      	bne.n	8007e8a <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e50:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007e54:	2a01      	cmp	r2, #1
 8007e56:	d018      	beq.n	8007e8a <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007e58:	2224      	movs	r2, #36	@ 0x24
 8007e5a:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007e5e:	6802      	ldr	r2, [r0, #0]
 8007e60:	6810      	ldr	r0, [r2, #0]
 8007e62:	f020 0001 	bic.w	r0, r0, #1
 8007e66:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8007e68:	6810      	ldr	r0, [r2, #0]
 8007e6a:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 8007e6e:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e70:	6810      	ldr	r0, [r2, #0]
 8007e72:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007e74:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8007e76:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007e78:	6811      	ldr	r1, [r2, #0]
 8007e7a:	f041 0101 	orr.w	r1, r1, #1
 8007e7e:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007e80:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007e84:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007e88:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007e8a:	2002      	movs	r0, #2
 8007e8c:	e7fc      	b.n	8007e88 <HAL_I2CEx_ConfigAnalogFilter+0x46>

08007e8e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8007e8e:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e90:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8007e94:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e96:	2a20      	cmp	r2, #32
 8007e98:	b2d4      	uxtb	r4, r2
 8007e9a:	d11b      	bne.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007e9c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8007ea0:	2a01      	cmp	r2, #1
 8007ea2:	d017      	beq.n	8007ed4 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8007ea4:	2224      	movs	r2, #36	@ 0x24
 8007ea6:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8007eaa:	6802      	ldr	r2, [r0, #0]
 8007eac:	6810      	ldr	r0, [r2, #0]
 8007eae:	f020 0001 	bic.w	r0, r0, #1
 8007eb2:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8007eb4:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8007eb6:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8007eba:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ebe:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 8007ec0:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8007ec2:	6811      	ldr	r1, [r2, #0]
 8007ec4:	f041 0101 	orr.w	r1, r1, #1
 8007ec8:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8007eca:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8007ece:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8007ed2:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8007ed4:	2002      	movs	r0, #2
 8007ed6:	e7fc      	b.n	8007ed2 <HAL_I2CEx_ConfigDigitalFilter+0x44>

08007ed8 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 8007ed8:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 8007eda:	2401      	movs	r4, #1
 8007edc:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 8007ede:	2500      	movs	r5, #0
 8007ee0:	194e      	adds	r6, r1, r5
 8007ee2:	443d      	add	r5, r7
 8007ee4:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 8007ee6:	42be      	cmp	r6, r7
 8007ee8:	d112      	bne.n	8007f10 <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 8007eea:	2c10      	cmp	r4, #16
 8007eec:	d108      	bne.n	8007f00 <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 8007eee:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007ef0:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 8007ef2:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 8007ef4:	601d      	str	r5, [r3, #0]
  p = 0;
 8007ef6:	4623      	mov	r3, r4
  si = Huffsize[0];
 8007ef8:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 8007efa:	5cc8      	ldrb	r0, [r1, r3]
 8007efc:	b9d8      	cbnz	r0, 8007f36 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 8007efe:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 8007f00:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 8007f02:	3401      	adds	r4, #1
 8007f04:	19ee      	adds	r6, r5, r7
 8007f06:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 8007f0a:	d9e9      	bls.n	8007ee0 <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 8007f0c:	2001      	movs	r0, #1
 8007f0e:	e7f6      	b.n	8007efe <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 8007f10:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 8007f14:	e7e7      	b.n	8007ee6 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 8007f16:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 8007f1a:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 8007f1c:	5cc8      	ldrb	r0, [r1, r3]
 8007f1e:	19dc      	adds	r4, r3, r7
 8007f20:	42a8      	cmp	r0, r5
 8007f22:	d0f8      	beq.n	8007f16 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 8007f24:	2d1f      	cmp	r5, #31
 8007f26:	d8f1      	bhi.n	8007f0c <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 8007f28:	fa06 f005 	lsl.w	r0, r6, r5
 8007f2c:	42a0      	cmp	r0, r4
 8007f2e:	d9ed      	bls.n	8007f0c <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 8007f30:	0064      	lsls	r4, r4, #1
    si++;
 8007f32:	3501      	adds	r5, #1
 8007f34:	e7e1      	b.n	8007efa <JPEG_Bits_To_SizeCodes+0x22>
 8007f36:	1ae7      	subs	r7, r4, r3
 8007f38:	e7f0      	b.n	8007f1c <JPEG_Bits_To_SizeCodes+0x44>

08007f3a <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8007f3a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007f3c:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 8007f40:	460d      	mov	r5, r1
 8007f42:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8007f44:	ab01      	add	r3, sp, #4
 8007f46:	aa43      	add	r2, sp, #268	@ 0x10c
 8007f48:	a902      	add	r1, sp, #8
 8007f4a:	f7ff ffc5 	bl	8007ed8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 8007f4e:	b938      	cbnz	r0, 8007f60 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 8007f50:	9e01      	ldr	r6, [sp, #4]
 8007f52:	460b      	mov	r3, r1
 8007f54:	f104 010f 	add.w	r1, r4, #15
 8007f58:	360f      	adds	r6, #15
 8007f5a:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8007f5c:	42a1      	cmp	r1, r4
 8007f5e:	d102      	bne.n	8007f66 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007f60:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8007f64:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8007f66:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8007f6a:	2e0b      	cmp	r6, #11
 8007f6c:	d80a      	bhi.n	8007f84 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8007f6e:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 8007f72:	f852 cb04 	ldr.w	ip, [r2], #4
 8007f76:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8007f7a:	f813 7b01 	ldrb.w	r7, [r3], #1
 8007f7e:	3f01      	subs	r7, #1
 8007f80:	55af      	strb	r7, [r5, r6]
      k++;
 8007f82:	e7eb      	b.n	8007f5c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8007f84:	2001      	movs	r0, #1
 8007f86:	e7eb      	b.n	8007f60 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08007f88 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8007f88:	4603      	mov	r3, r0
 8007f8a:	4608      	mov	r0, r1
 8007f8c:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007f8e:	681c      	ldr	r4, [r3, #0]
{
 8007f90:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 8007f92:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8007f96:	429a      	cmp	r2, r3
 8007f98:	d125      	bne.n	8007fe6 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007f9a:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 8007f9e:	a901      	add	r1, sp, #4
 8007fa0:	f7ff ffcb 	bl	8007f3a <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8007fa4:	b9e8      	cbnz	r0, 8007fe2 <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8007fa6:	aa01      	add	r2, sp, #4
 8007fa8:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8007fac:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 8007fb0:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 8007fb2:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8007fb4:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fb6:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8007fb8:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fba:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 8007fbe:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fc0:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fc2:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fc6:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8007fca:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8007fcc:	7b13      	ldrb	r3, [r2, #12]
 8007fce:	021b      	lsls	r3, r3, #8
 8007fd0:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8007fd4:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8007fd6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8007fda:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8007fde:	42b4      	cmp	r4, r6
 8007fe0:	d1e9      	bne.n	8007fb6 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8007fe2:	b011      	add	sp, #68	@ 0x44
 8007fe4:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 8007fe6:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 8007fea:	429a      	cmp	r2, r3
 8007fec:	d102      	bne.n	8007ff4 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8007fee:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 8007ff2:	e7d4      	b.n	8007f9e <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 8007ff4:	2001      	movs	r0, #1
 8007ff6:	e7f4      	b.n	8007fe2 <JPEG_Set_HuffDC_Mem+0x5a>

08007ff8 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 8007ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8007ffc:	6804      	ldr	r4, [r0, #0]
{
 8007ffe:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 8008002:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 8008004:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 8008008:	429a      	cmp	r2, r3
 800800a:	d149      	bne.n	80080a0 <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 800800c:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008010:	466b      	mov	r3, sp
 8008012:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 8008016:	a901      	add	r1, sp, #4
 8008018:	4630      	mov	r0, r6
 800801a:	f7ff ff5d 	bl	8007ed8 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800801e:	2800      	cmp	r0, #0
 8008020:	d13a      	bne.n	8008098 <JPEG_Set_HuffAC_Mem+0xa0>
 8008022:	9b00      	ldr	r3, [sp, #0]
 8008024:	460d      	mov	r5, r1
 8008026:	f106 0c0f 	add.w	ip, r6, #15
 800802a:	4617      	mov	r7, r2
 800802c:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800802e:	f04f 0e0a 	mov.w	lr, #10
 8008032:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008034:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8008036:	4561      	cmp	r1, ip
 8008038:	d139      	bne.n	80080ae <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 800803a:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800803e:	a942      	add	r1, sp, #264	@ 0x108
 8008040:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8008044:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008046:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008048:	6063      	str	r3, [r4, #4]
 800804a:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 800804c:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 8008050:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8008054:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008056:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800805a:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 800805c:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008060:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 8008062:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008066:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008068:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 800806c:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800806e:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 8008072:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008074:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008076:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800807a:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800807e:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008080:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8008084:	021b      	lsls	r3, r3, #8
 8008086:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 800808a:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 800808c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008090:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008094:	42b4      	cmp	r4, r6
 8008096:	d1e7      	bne.n	8008068 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008098:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 800809c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 80080a0:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 80080a4:	429a      	cmp	r2, r3
 80080a6:	d10f      	bne.n	80080c8 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80080a8:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 80080ac:	e7b0      	b.n	8008010 <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 80080ae:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 80080b2:	b15b      	cbz	r3, 80080cc <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 80080b4:	2bf0      	cmp	r3, #240	@ 0xf0
 80080b6:	d015      	beq.n	80080e4 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 80080b8:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 80080ba:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80080be:	3b01      	subs	r3, #1
 80080c0:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 80080c4:	2ba1      	cmp	r3, #161	@ 0xa1
 80080c6:	d902      	bls.n	80080ce <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 80080c8:	2001      	movs	r0, #1
 80080ca:	e7e5      	b.n	8008098 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 80080cc:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 80080ce:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 80080d2:	f857 8b04 	ldr.w	r8, [r7], #4
 80080d6:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80080da:	f815 2b01 	ldrb.w	r2, [r5], #1
 80080de:	3a01      	subs	r2, #1
 80080e0:	54f2      	strb	r2, [r6, r3]
      k++;
 80080e2:	e7a8      	b.n	8008036 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 80080e4:	23a1      	movs	r3, #161	@ 0xa1
 80080e6:	e7f2      	b.n	80080ce <JPEG_Set_HuffAC_Mem+0xd6>

080080e8 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80080e8:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80080ea:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80080ee:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080f0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80080f2:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80080f4:	f002 0203 	and.w	r2, r2, #3
 80080f8:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80080fa:	685a      	ldr	r2, [r3, #4]
 80080fc:	bf0c      	ite	eq
 80080fe:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 8008102:	f022 0208 	bicne.w	r2, r2, #8
 8008106:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008108:	681a      	ldr	r2, [r3, #0]
 800810a:	f022 0201 	bic.w	r2, r2, #1
 800810e:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008110:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008112:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008116:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008118:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800811a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800811e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008120:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008122:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8008126:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008128:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800812a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800812e:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 8008130:	681a      	ldr	r2, [r3, #0]
 8008132:	f042 0201 	orr.w	r2, r2, #1
 8008136:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008138:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800813a:	f002 020c 	and.w	r2, r2, #12
 800813e:	2a08      	cmp	r2, #8
 8008140:	d104      	bne.n	800814c <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 8008142:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008144:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008148:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 800814a:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800814c:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800814e:	f002 020c 	and.w	r2, r2, #12
 8008152:	2a0c      	cmp	r2, #12
 8008154:	d1f9      	bne.n	800814a <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008156:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008158:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800815c:	e7f4      	b.n	8008148 <JPEG_Init_Process+0x60>
	...

08008160 <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 8008160:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008162:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008164:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008166:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008168:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800816a:	42aa      	cmp	r2, r5
 800816c:	d313      	bcc.n	8008196 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800816e:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008170:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008172:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008174:	428b      	cmp	r3, r1
 8008176:	d30e      	bcc.n	8008196 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8008178:	4f18      	ldr	r7, [pc, #96]	@ (80081dc <JPEG_DMA_StartProcess+0x7c>)
 800817a:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 800817c:	4f18      	ldr	r7, [pc, #96]	@ (80081e0 <JPEG_DMA_StartProcess+0x80>)
 800817e:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008180:	4e18      	ldr	r6, [pc, #96]	@ (80081e4 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008182:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008184:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8008186:	4e18      	ldr	r6, [pc, #96]	@ (80081e8 <JPEG_DMA_StartProcess+0x88>)
 8008188:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 800818a:	b105      	cbz	r5, 800818e <JPEG_DMA_StartProcess+0x2e>
 800818c:	b931      	cbnz	r1, 800819c <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800818e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008190:	f043 0304 	orr.w	r3, r3, #4
 8008194:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8008196:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8008198:	b003      	add	sp, #12
 800819a:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800819c:	fbb2 f6f5 	udiv	r6, r2, r5
 80081a0:	fb05 2516 	mls	r5, r5, r6, r2
 80081a4:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80081a6:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 80081a8:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80081aa:	fbb3 f2f1 	udiv	r2, r3, r1
 80081ae:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80081b2:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80081b4:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80081b6:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 80081b8:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 80081ba:	9500      	str	r5, [sp, #0]
 80081bc:	69e2      	ldr	r2, [r4, #28]
 80081be:	f001 f82a 	bl	8009216 <HAL_MDMA_Start_IT>
 80081c2:	2800      	cmp	r0, #0
 80081c4:	d1e3      	bne.n	800818e <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 80081c6:	6822      	ldr	r2, [r4, #0]
 80081c8:	9500      	str	r5, [sp, #0]
 80081ca:	3240      	adds	r2, #64	@ 0x40
 80081cc:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80081ce:	69a1      	ldr	r1, [r4, #24]
 80081d0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80081d2:	f001 f820 	bl	8009216 <HAL_MDMA_Start_IT>
 80081d6:	2800      	cmp	r0, #0
 80081d8:	d0de      	beq.n	8008198 <JPEG_DMA_StartProcess+0x38>
 80081da:	e7d8      	b.n	800818e <JPEG_DMA_StartProcess+0x2e>
 80081dc:	08008723 	.word	0x08008723
 80081e0:	0800861b 	.word	0x0800861b
 80081e4:	08008be1 	.word	0x08008be1
 80081e8:	08008bd3 	.word	0x08008bd3

080081ec <HAL_JPEG_Init>:
{
 80081ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80081ee:	4605      	mov	r5, r0
 80081f0:	2800      	cmp	r0, #0
 80081f2:	f000 80f2 	beq.w	80083da <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80081f6:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80081fa:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80081fe:	b91b      	cbnz	r3, 8008208 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 8008200:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 8008204:	f7f9 f98e 	bl	8001524 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 8008208:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 800820a:	2302      	movs	r3, #2
 800820c:	4a86      	ldr	r2, [pc, #536]	@ (8008428 <HAL_JPEG_Init+0x23c>)
 800820e:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 8008212:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 8008216:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008218:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 800821c:	f043 0301 	orr.w	r3, r3, #1
 8008220:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008222:	6823      	ldr	r3, [r4, #0]
 8008224:	f023 0301 	bic.w	r3, r3, #1
 8008228:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 800822a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800822c:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008230:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 8008232:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008234:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008238:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 800823a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800823c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8008240:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008242:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008244:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008248:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 800824a:	4b78      	ldr	r3, [pc, #480]	@ (800842c <HAL_JPEG_Init+0x240>)
 800824c:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800824e:	4b78      	ldr	r3, [pc, #480]	@ (8008430 <HAL_JPEG_Init+0x244>)
 8008250:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 8008252:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008254:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008258:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 800825a:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800825c:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800825e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008260:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008264:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008266:	4333      	orrs	r3, r6
 8008268:	7c56      	ldrb	r6, [r2, #17]
 800826a:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800826e:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008272:	4281      	cmp	r1, r0
 8008274:	d1f0      	bne.n	8008258 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008276:	4b6f      	ldr	r3, [pc, #444]	@ (8008434 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008278:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 800827c:	4a6e      	ldr	r2, [pc, #440]	@ (8008438 <HAL_JPEG_Init+0x24c>)
 800827e:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008282:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8008286:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 800828a:	4610      	mov	r0, r2
 800828c:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800828e:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 8008292:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008296:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800829a:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 800829c:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800829e:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 80082a2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80082a4:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 80082a8:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 80082ac:	ea43 030c 	orr.w	r3, r3, ip
 80082b0:	f890 c011 	ldrb.w	ip, [r0, #17]
 80082b4:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 80082b8:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 80082bc:	42be      	cmp	r6, r7
 80082be:	d1ec      	bne.n	800829a <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 80082c0:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 80082c4:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 80082c8:	0c1b      	lsrs	r3, r3, #16
 80082ca:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 80082cc:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 80082d0:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 80082d4:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80082d8:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 80082dc:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80082de:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80082e2:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80082e4:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80082e8:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80082ec:	4333      	orrs	r3, r6
 80082ee:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 80082f2:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80082f6:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 80082fa:	4281      	cmp	r1, r0
 80082fc:	d1ec      	bne.n	80082d8 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 80082fe:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 8008302:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 8008306:	4a4d      	ldr	r2, [pc, #308]	@ (800843c <HAL_JPEG_Init+0x250>)
 8008308:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 800830c:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 800830e:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 8008312:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 8008316:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 800831a:	4013      	ands	r3, r2
  *address = value;
 800831c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008320:	2301      	movs	r3, #1
 8008322:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 8008326:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 800832a:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 800832e:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 8008332:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008336:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008338:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800833c:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 8008340:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008344:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008346:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 800834a:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800834e:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008352:	4b3b      	ldr	r3, [pc, #236]	@ (8008440 <HAL_JPEG_Init+0x254>)
 8008354:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008358:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 800835c:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 8008360:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008364:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008366:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 800836a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800836e:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008372:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008374:	4a33      	ldr	r2, [pc, #204]	@ (8008444 <HAL_JPEG_Init+0x258>)
 8008376:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 800837a:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800837e:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 8008382:	4b31      	ldr	r3, [pc, #196]	@ (8008448 <HAL_JPEG_Init+0x25c>)
 8008384:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8008388:	4b30      	ldr	r3, [pc, #192]	@ (800844c <HAL_JPEG_Init+0x260>)
 800838a:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800838e:	4b30      	ldr	r3, [pc, #192]	@ (8008450 <HAL_JPEG_Init+0x264>)
 8008390:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8008394:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008398:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 800839a:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800839e:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80083a2:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 80083a6:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80083a8:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 80083ac:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80083ae:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 80083b2:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 80083b6:	4333      	orrs	r3, r6
 80083b8:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 80083bc:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 80083c0:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 80083c4:	4281      	cmp	r1, r0
 80083c6:	d1ec      	bne.n	80083a2 <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 80083c8:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 80083cc:	491a      	ldr	r1, [pc, #104]	@ (8008438 <HAL_JPEG_Init+0x24c>)
 80083ce:	4628      	mov	r0, r5
 80083d0:	f7ff fe12 	bl	8007ff8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80083d4:	b118      	cbz	r0, 80083de <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80083d6:	2301      	movs	r3, #1
 80083d8:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 80083da:	2001      	movs	r0, #1
}
 80083dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80083de:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 80083e2:	4918      	ldr	r1, [pc, #96]	@ (8008444 <HAL_JPEG_Init+0x258>)
 80083e4:	4628      	mov	r0, r5
 80083e6:	f7ff fe07 	bl	8007ff8 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d1f3      	bne.n	80083d6 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80083ee:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 80083f2:	490d      	ldr	r1, [pc, #52]	@ (8008428 <HAL_JPEG_Init+0x23c>)
 80083f4:	4628      	mov	r0, r5
 80083f6:	f7ff fdc7 	bl	8007f88 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 80083fa:	2800      	cmp	r0, #0
 80083fc:	d1eb      	bne.n	80083d6 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80083fe:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 8008402:	4914      	ldr	r1, [pc, #80]	@ (8008454 <HAL_JPEG_Init+0x268>)
 8008404:	4628      	mov	r0, r5
 8008406:	f7ff fdbf 	bl	8007f88 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 800840a:	2800      	cmp	r0, #0
 800840c:	d1e3      	bne.n	80083d6 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 800840e:	6863      	ldr	r3, [r4, #4]
 8008410:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008414:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008416:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 8008418:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 800841a:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 800841c:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 8008420:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 8008422:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 8008424:	e7da      	b.n	80083dc <HAL_JPEG_Init+0x1f0>
 8008426:	bf00      	nop
 8008428:	08024370 	.word	0x08024370
 800842c:	08024170 	.word	0x08024170
 8008430:	08024130 	.word	0x08024130
 8008434:	0b0a0908 	.word	0x0b0a0908
 8008438:	080242a2 	.word	0x080242a2
 800843c:	ffff0000 	.word	0xffff0000
 8008440:	09080706 	.word	0x09080706
 8008444:	080241f0 	.word	0x080241f0
 8008448:	01000404 	.word	0x01000404
 800844c:	05070403 	.word	0x05070403
 8008450:	04040201 	.word	0x04040201
 8008454:	08024354 	.word	0x08024354

08008458 <HAL_JPEG_GetInfo>:
{
 8008458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 800845c:	2800      	cmp	r0, #0
 800845e:	d06f      	beq.n	8008540 <HAL_JPEG_GetInfo+0xe8>
 8008460:	2900      	cmp	r1, #0
 8008462:	d06d      	beq.n	8008540 <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008464:	6804      	ldr	r4, [r0, #0]
 8008466:	6863      	ldr	r3, [r4, #4]
 8008468:	f003 0303 	and.w	r3, r3, #3
 800846c:	2b02      	cmp	r3, #2
 800846e:	d047      	beq.n	8008500 <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 8008470:	6863      	ldr	r3, [r4, #4]
 8008472:	f013 0303 	ands.w	r3, r3, #3
 8008476:	d005      	beq.n	8008484 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008478:	6863      	ldr	r3, [r4, #4]
 800847a:	f003 0303 	and.w	r3, r3, #3
 800847e:	2b03      	cmp	r3, #3
 8008480:	d15e      	bne.n	8008540 <HAL_JPEG_GetInfo+0xe8>
 8008482:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008484:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008486:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008488:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800848c:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800848e:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008490:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 8008492:	68e2      	ldr	r2, [r4, #12]
 8008494:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008498:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800849a:	d13c      	bne.n	8008516 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800849c:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800849e:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 80084a0:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80084a4:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 80084a6:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80084a8:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 80084aa:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80084ae:	d129      	bne.n	8008504 <HAL_JPEG_GetInfo+0xac>
 80084b0:	4313      	orrs	r3, r2
 80084b2:	f013 0f0f 	tst.w	r3, #15
 80084b6:	bf0c      	ite	eq
 80084b8:	2301      	moveq	r3, #1
 80084ba:	2300      	movne	r3, #0
 80084bc:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 80084be:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 80084c0:	2300      	movs	r3, #0
 80084c2:	3450      	adds	r4, #80	@ 0x50
 80084c4:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008544 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 80084c8:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80084ca:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 80084ce:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 80084d2:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80084d6:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 80084da:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80084dc:	fa29 f206 	lsr.w	r2, r9, r6
 80084e0:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 80084e2:	2a01      	cmp	r2, #1
 80084e4:	d119      	bne.n	800851a <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 80084e6:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 80084e8:	3608      	adds	r6, #8
 80084ea:	3701      	adds	r7, #1
 80084ec:	2e20      	cmp	r6, #32
 80084ee:	d1f5      	bne.n	80084dc <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 80084f0:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80084f2:	2d40      	cmp	r5, #64	@ 0x40
 80084f4:	d1ed      	bne.n	80084d2 <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 80084f6:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 80084f8:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80084fa:	610b      	str	r3, [r1, #16]
}
 80084fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008500:	2310      	movs	r3, #16
 8008502:	e7bf      	b.n	8008484 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008504:	2d03      	cmp	r5, #3
 8008506:	d106      	bne.n	8008516 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008508:	4313      	orrs	r3, r2
 800850a:	f013 0f0f 	tst.w	r3, #15
 800850e:	bf0c      	ite	eq
 8008510:	2301      	moveq	r3, #1
 8008512:	2300      	movne	r3, #0
 8008514:	e7d3      	b.n	80084be <HAL_JPEG_GetInfo+0x66>
 8008516:	2300      	movs	r3, #0
 8008518:	e7d1      	b.n	80084be <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 800851a:	fb0e fb02 	mul.w	fp, lr, r2
 800851e:	f897 a000 	ldrb.w	sl, [r7]
 8008522:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008524:	f812 a00a 	ldrb.w	sl, [r2, sl]
 8008528:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 800852c:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 800852e:	bf8b      	itete	hi
 8008530:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008534:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008538:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 800853a:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800853e:	e7d3      	b.n	80084e8 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 8008540:	2001      	movs	r0, #1
 8008542:	e7db      	b.n	80084fc <HAL_JPEG_GetInfo+0xa4>
 8008544:	080241b0 	.word	0x080241b0

08008548 <HAL_JPEG_Decode_DMA>:
{
 8008548:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 800854a:	4604      	mov	r4, r0
 800854c:	b348      	cbz	r0, 80085a2 <HAL_JPEG_Decode_DMA+0x5a>
 800854e:	b341      	cbz	r1, 80085a2 <HAL_JPEG_Decode_DMA+0x5a>
 8008550:	b33b      	cbz	r3, 80085a2 <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 8008552:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008556:	2d01      	cmp	r5, #1
 8008558:	d028      	beq.n	80085ac <HAL_JPEG_Decode_DMA+0x64>
 800855a:	2501      	movs	r5, #1
 800855c:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 8008560:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008564:	2d01      	cmp	r5, #1
 8008566:	d11e      	bne.n	80085a6 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008568:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 800856a:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 800856c:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 8008570:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008572:	f025 050f 	bic.w	r5, r5, #15
 8008576:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008578:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800857a:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800857e:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008582:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008584:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008586:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008588:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 800858a:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 800858c:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800858e:	f7ff fdab 	bl	80080e8 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 8008592:	f7ff fde5 	bl	8008160 <JPEG_DMA_StartProcess>
 8008596:	b128      	cbz	r0, 80085a4 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008598:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 800859a:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800859e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 80085a2:	2001      	movs	r0, #1
}
 80085a4:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 80085a6:	2300      	movs	r3, #0
 80085a8:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 80085ac:	2002      	movs	r0, #2
 80085ae:	e7f9      	b.n	80085a4 <HAL_JPEG_Decode_DMA+0x5c>

080085b0 <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 80085b0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085b2:	f003 030c 	and.w	r3, r3, #12
 80085b6:	2b0c      	cmp	r3, #12
 80085b8:	d10d      	bne.n	80085d6 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80085ba:	07cb      	lsls	r3, r1, #31
 80085bc:	d503      	bpl.n	80085c6 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80085be:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085c0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085c4:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80085c6:	0789      	lsls	r1, r1, #30
 80085c8:	d503      	bpl.n	80085d2 <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80085ca:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085cc:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 80085d0:	6543      	str	r3, [r0, #84]	@ 0x54
}
 80085d2:	2000      	movs	r0, #0
 80085d4:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80085d6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085d8:	f003 030c 	and.w	r3, r3, #12
 80085dc:	2b08      	cmp	r3, #8
 80085de:	d1f8      	bne.n	80085d2 <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80085e0:	f011 0301 	ands.w	r3, r1, #1
 80085e4:	d004      	beq.n	80085f0 <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80085e6:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80085e8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80085ec:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80085ee:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80085f0:	078a      	lsls	r2, r1, #30
 80085f2:	d505      	bpl.n	8008600 <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80085f4:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80085f6:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80085fa:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80085fe:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 8008600:	6801      	ldr	r1, [r0, #0]
 8008602:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008604:	ea22 0303 	bic.w	r3, r2, r3
 8008608:	630b      	str	r3, [r1, #48]	@ 0x30
 800860a:	e7e2      	b.n	80085d2 <HAL_JPEG_Pause+0x22>

0800860c <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 800860c:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 800860e:	6282      	str	r2, [r0, #40]	@ 0x28
}
 8008610:	4770      	bx	lr

08008612 <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 8008612:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 8008614:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 8008616:	4770      	bx	lr

08008618 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 8008618:	4770      	bx	lr

0800861a <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 800861a:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 800861c:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800861e:	6803      	ldr	r3, [r0, #0]
 8008620:	681a      	ldr	r2, [r3, #0]
 8008622:	f022 0201 	bic.w	r2, r2, #1
 8008626:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008628:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800862a:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 800862e:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 8008630:	2301      	movs	r3, #1
 8008632:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008636:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008638:	f043 0304 	orr.w	r3, r3, #4
 800863c:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 800863e:	f7fa faab 	bl	8002b98 <HAL_JPEG_ErrorCallback>
}
 8008642:	bd08      	pop	{r3, pc}

08008644 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008644:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008646:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008648:	4604      	mov	r4, r0
 800864a:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 800864c:	b922      	cbnz	r2, 8008658 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 800864e:	2101      	movs	r1, #1
 8008650:	f7ff ffae 	bl	80085b0 <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008654:	2200      	movs	r2, #0
 8008656:	e004      	b.n	8008662 <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008658:	6a03      	ldr	r3, [r0, #32]
 800865a:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 800865c:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 800865e:	d924      	bls.n	80086aa <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008660:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008662:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008664:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008668:	d11e      	bne.n	80086a8 <JPEG_ReadInputData+0x64>
 800866a:	b1ea      	cbz	r2, 80086a8 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 800866c:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8008670:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008672:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8008676:	d827      	bhi.n	80086c8 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008678:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 800867a:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 800867c:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 800867e:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008680:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8008682:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008684:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008686:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 800868a:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 800868e:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008690:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008694:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008698:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 800869c:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 800869e:	6a22      	ldr	r2, [r4, #32]
 80086a0:	f102 0204 	add.w	r2, r2, #4
 80086a4:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 80086a6:	d1e8      	bne.n	800867a <JPEG_ReadInputData+0x36>
}
 80086a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d1d2      	bne.n	8008654 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 80086ae:	6a01      	ldr	r1, [r0, #32]
 80086b0:	f7fa fa04 	bl	8002abc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 80086b4:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80086b6:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 80086b8:	bf84      	itt	hi
 80086ba:	f023 0303 	bichi.w	r3, r3, #3
 80086be:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80086c0:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 80086c2:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 80086c4:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 80086c6:	e7cc      	b.n	8008662 <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 80086c8:	2a03      	cmp	r2, #3
 80086ca:	d918      	bls.n	80086fe <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086cc:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 80086ce:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80086d0:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086d2:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086d4:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 80086d6:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086d8:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086da:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086de:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 80086e2:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 80086e4:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 80086e8:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 80086ec:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 80086f0:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 80086f2:	6a22      	ldr	r2, [r4, #32]
 80086f4:	f102 0204 	add.w	r2, r2, #4
 80086f8:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 80086fa:	d1e8      	bne.n	80086ce <JPEG_ReadInputData+0x8a>
 80086fc:	e7d4      	b.n	80086a8 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 80086fe:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008700:	6a25      	ldr	r5, [r4, #32]
 8008702:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8008704:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008706:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8008708:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 800870a:	fa05 f506 	lsl.w	r5, r5, r6
 800870e:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8008712:	6a25      	ldr	r5, [r4, #32]
 8008714:	f105 0501 	add.w	r5, r5, #1
 8008718:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 800871a:	d1f1      	bne.n	8008700 <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 800871c:	6822      	ldr	r2, [r4, #0]
 800871e:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8008720:	e7c2      	b.n	80086a8 <JPEG_ReadInputData+0x64>

08008722 <JPEG_MDMAInCpltCallback>:
{
 8008722:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008724:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008726:	6822      	ldr	r2, [r4, #0]
 8008728:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 800872a:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 800872e:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008730:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008732:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008736:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 800873a:	041b      	lsls	r3, r3, #16
 800873c:	0c1b      	lsrs	r3, r3, #16
 800873e:	2b0c      	cmp	r3, #12
 8008740:	d11a      	bne.n	8008778 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008742:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008744:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008746:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008748:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 800874a:	695a      	ldr	r2, [r3, #20]
 800874c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800874e:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008752:	1a9b      	subs	r3, r3, r2
 8008754:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008756:	6a21      	ldr	r1, [r4, #32]
 8008758:	f7fa f9b0 	bl	8002abc <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 800875c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800875e:	42ab      	cmp	r3, r5
 8008760:	d327      	bcc.n	80087b2 <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008762:	b95d      	cbnz	r5, 800877c <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008764:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008766:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008768:	f043 0304 	orr.w	r3, r3, #4
 800876c:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 800876e:	2306      	movs	r3, #6
 8008770:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008774:	f7fa fa10 	bl	8002b98 <HAL_JPEG_ErrorCallback>
}
 8008778:	b003      	add	sp, #12
 800877a:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 800877c:	fbb3 f2f5 	udiv	r2, r3, r5
 8008780:	fb05 3212 	mls	r2, r5, r2, r3
 8008784:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008786:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008788:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 800878a:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 800878c:	04db      	lsls	r3, r3, #19
 800878e:	d40a      	bmi.n	80087a6 <JPEG_MDMAInCpltCallback+0x84>
 8008790:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008792:	b143      	cbz	r3, 80087a6 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008794:	2101      	movs	r1, #1
 8008796:	3240      	adds	r2, #64	@ 0x40
 8008798:	9100      	str	r1, [sp, #0]
 800879a:	69a1      	ldr	r1, [r4, #24]
 800879c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800879e:	f000 fd3a 	bl	8009216 <HAL_MDMA_Start_IT>
 80087a2:	2800      	cmp	r0, #0
 80087a4:	d1de      	bne.n	8008764 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 80087a6:	6822      	ldr	r2, [r4, #0]
 80087a8:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 80087aa:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 80087ae:	6313      	str	r3, [r2, #48]	@ 0x30
 80087b0:	e7e2      	b.n	8008778 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d0e8      	beq.n	8008788 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 80087b6:	079a      	lsls	r2, r3, #30
 80087b8:	d0e6      	beq.n	8008788 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 80087ba:	f023 0303 	bic.w	r3, r3, #3
 80087be:	3304      	adds	r3, #4
 80087c0:	e7e1      	b.n	8008786 <JPEG_MDMAInCpltCallback+0x64>

080087c2 <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80087c2:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 80087c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80087c6:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80087ca:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 80087cc:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d32a      	bcc.n	8008828 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 80087d2:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 80087d4:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 80087d6:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80087d8:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 80087da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 80087dc:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 80087de:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 80087e0:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 80087e2:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80087e4:	69e0      	ldr	r0, [r4, #28]
 80087e6:	4428      	add	r0, r5
 80087e8:	ea4f 2513 	mov.w	r5, r3, lsr #8
 80087ec:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80087ee:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80087f0:	69e0      	ldr	r0, [r4, #28]
 80087f2:	4428      	add	r0, r5
 80087f4:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80087f8:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 80087fc:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 80087fe:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008800:	69e0      	ldr	r0, [r4, #28]
 8008802:	4428      	add	r0, r5
 8008804:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008806:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008808:	f103 0304 	add.w	r3, r3, #4
 800880c:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 800880e:	d1e1      	bne.n	80087d4 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008810:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008812:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008814:	429a      	cmp	r2, r3
 8008816:	d106      	bne.n	8008826 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008818:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800881a:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 800881c:	4620      	mov	r0, r4
 800881e:	f7fa f96b 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008822:	2300      	movs	r3, #0
 8008824:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008826:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008828:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 800882a:	4293      	cmp	r3, r2
 800882c:	d9fb      	bls.n	8008826 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 800882e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008830:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008832:	1a9b      	subs	r3, r3, r2
 8008834:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008836:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008838:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 800883a:	d105      	bne.n	8008848 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 800883c:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 800883e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008840:	429f      	cmp	r7, r3
 8008842:	d119      	bne.n	8008878 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008844:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008846:	e7e9      	b.n	800881c <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008848:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 800884a:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 800884c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 800884e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008850:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008852:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008854:	69e1      	ldr	r1, [r4, #28]
 8008856:	4429      	add	r1, r5
 8008858:	0a1d      	lsrs	r5, r3, #8
 800885a:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 800885c:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800885e:	69e1      	ldr	r1, [r4, #28]
 8008860:	4429      	add	r1, r5
 8008862:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008864:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008866:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008868:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800886a:	69e1      	ldr	r1, [r4, #28]
 800886c:	4429      	add	r1, r5
 800886e:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008870:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008872:	3304      	adds	r3, #4
 8008874:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008876:	e7de      	b.n	8008836 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008878:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 800887a:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 800887c:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 800887e:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008880:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008882:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008884:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8008886:	d114      	bne.n	80088b2 <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008888:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800888a:	4620      	mov	r0, r4
 800888c:	f7fa f934 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008890:	2300      	movs	r3, #0
 8008892:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008894:	1d2b      	adds	r3, r5, #4
 8008896:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008898:	2b03      	cmp	r3, #3
 800889a:	d8c4      	bhi.n	8008826 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 800889c:	00da      	lsls	r2, r3, #3
 800889e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80088a0:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 80088a2:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 80088a4:	fa26 f202 	lsr.w	r2, r6, r2
 80088a8:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 80088aa:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80088ac:	3201      	adds	r2, #1
 80088ae:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 80088b0:	e7f2      	b.n	8008898 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80088b2:	f002 0303 	and.w	r3, r2, #3
 80088b6:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80088ba:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 80088bc:	00db      	lsls	r3, r3, #3
 80088be:	fa26 f303 	lsr.w	r3, r6, r3
 80088c2:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 80088c6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80088c8:	3301      	adds	r3, #1
 80088ca:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 80088cc:	e7d9      	b.n	8008882 <JPEG_StoreOutputData+0xc0>

080088ce <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088ce:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80088d0:	f003 0303 	and.w	r3, r3, #3
 80088d4:	2b02      	cmp	r3, #2
{
 80088d6:	b510      	push	{r4, lr}
 80088d8:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80088da:	d114      	bne.n	8008906 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 80088dc:	6803      	ldr	r3, [r0, #0]
 80088de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80088e0:	065b      	lsls	r3, r3, #25
 80088e2:	d510      	bpl.n	8008906 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 80088e4:	1d01      	adds	r1, r0, #4
 80088e6:	f7ff fdb7 	bl	8008458 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 80088ea:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80088ec:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 80088ee:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 80088f0:	f7fa f8ae 	bl	8002a50 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 80088f4:	6823      	ldr	r3, [r4, #0]
 80088f6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80088f8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80088fc:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 80088fe:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008900:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008904:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8008906:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008908:	04d9      	lsls	r1, r3, #19
 800890a:	d407      	bmi.n	800891c <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 800890c:	6823      	ldr	r3, [r4, #0]
 800890e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008910:	0792      	lsls	r2, r2, #30
 8008912:	d544      	bpl.n	800899e <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008914:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8008916:	4620      	mov	r0, r4
 8008918:	f7ff fe94 	bl	8008644 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 800891c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 800891e:	0499      	lsls	r1, r3, #18
 8008920:	d407      	bmi.n	8008932 <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008922:	6823      	ldr	r3, [r4, #0]
 8008924:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008926:	0712      	lsls	r2, r2, #28
 8008928:	d53e      	bpl.n	80089a8 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 800892a:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 800892c:	4620      	mov	r0, r4
 800892e:	f7ff ff48 	bl	80087c2 <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008932:	6823      	ldr	r3, [r4, #0]
 8008934:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008936:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800893a:	2a20      	cmp	r2, #32
 800893c:	d13c      	bne.n	80089b8 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 800893e:	681a      	ldr	r2, [r3, #0]
 8008940:	f022 0201 	bic.w	r2, r2, #1
 8008944:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008946:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008948:	f002 020c 	and.w	r2, r2, #12
 800894c:	2a08      	cmp	r2, #8
 800894e:	d103      	bne.n	8008958 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008950:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008952:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008956:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008958:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800895a:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 800895e:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008960:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008962:	b133      	cbz	r3, 8008972 <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008964:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008966:	4620      	mov	r0, r4
 8008968:	69e1      	ldr	r1, [r4, #28]
 800896a:	f7fa f8c5 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 800896e:	2300      	movs	r3, #0
 8008970:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008972:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008974:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008976:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008978:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 800897c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008980:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008982:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008984:	f04f 0200 	mov.w	r2, #0
 8008988:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 800898c:	f04f 0201 	mov.w	r2, #1
 8008990:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008994:	d10d      	bne.n	80089b2 <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008996:	f7fa f901 	bl	8002b9c <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 800899a:	2001      	movs	r0, #1
}
 800899c:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 800899e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089a0:	0758      	lsls	r0, r3, #29
 80089a2:	d5bb      	bpl.n	800891c <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 80089a4:	2101      	movs	r1, #1
 80089a6:	e7b6      	b.n	8008916 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80089a8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80089aa:	06db      	lsls	r3, r3, #27
 80089ac:	d5c1      	bpl.n	8008932 <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 80089ae:	2101      	movs	r1, #1
 80089b0:	e7bc      	b.n	800892c <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 80089b2:	f7ff fe31 	bl	8008618 <HAL_JPEG_EncodeCpltCallback>
 80089b6:	e7f0      	b.n	800899a <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 80089b8:	2000      	movs	r0, #0
 80089ba:	e7ef      	b.n	800899c <JPEG_Process+0xce>

080089bc <JPEG_DMA_PollResidualData>:
{
 80089bc:	b570      	push	{r4, r5, r6, lr}
 80089be:	4604      	mov	r4, r0
 80089c0:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80089c2:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80089c4:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 80089c6:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 80089ca:	d122      	bne.n	8008a12 <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 80089cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80089ce:	06d0      	lsls	r0, r2, #27
 80089d0:	d51f      	bpl.n	8008a12 <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 80089d2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 80089d4:	69e1      	ldr	r1, [r4, #28]
 80089d6:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 80089d8:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 80089da:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80089dc:	69e2      	ldr	r2, [r4, #28]
 80089de:	440a      	add	r2, r1
 80089e0:	0a19      	lsrs	r1, r3, #8
 80089e2:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80089e4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80089e6:	69e2      	ldr	r2, [r4, #28]
 80089e8:	440a      	add	r2, r1
 80089ea:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80089ec:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 80089ee:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 80089f0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80089f2:	69e2      	ldr	r2, [r4, #28]
 80089f4:	440a      	add	r2, r1
 80089f6:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 80089f8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80089fa:	3304      	adds	r3, #4
 80089fc:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 80089fe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008a00:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008a02:	429a      	cmp	r2, r3
 8008a04:	d105      	bne.n	8008a12 <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008a06:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008a08:	4620      	mov	r0, r4
 8008a0a:	69e1      	ldr	r1, [r4, #28]
 8008a0c:	f7fa f874 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008a10:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008a12:	3e01      	subs	r6, #1
 8008a14:	d1d5      	bne.n	80089c2 <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008a16:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8008a18:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008a1a:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008a1c:	06c9      	lsls	r1, r1, #27
 8008a1e:	d501      	bpl.n	8008a24 <JPEG_DMA_PollResidualData+0x68>
 8008a20:	0492      	lsls	r2, r2, #18
 8008a22:	d420      	bmi.n	8008a66 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008a24:	681a      	ldr	r2, [r3, #0]
 8008a26:	f022 0201 	bic.w	r2, r2, #1
 8008a2a:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008a2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008a2e:	b133      	cbz	r3, 8008a3e <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008a30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008a32:	4620      	mov	r0, r4
 8008a34:	69e1      	ldr	r1, [r4, #28]
 8008a36:	f7fa f85f 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008a3a:	2300      	movs	r3, #0
 8008a3c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008a3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008a40:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008a42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008a44:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008a48:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008a4c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008a4e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008a50:	f04f 0200 	mov.w	r2, #0
 8008a54:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008a58:	f04f 0201 	mov.w	r2, #1
 8008a5c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008a60:	d102      	bne.n	8008a68 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008a62:	f7fa f89b 	bl	8002b9c <HAL_JPEG_DecodeCpltCallback>
}
 8008a66:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008a68:	f7ff fdd6 	bl	8008618 <HAL_JPEG_EncodeCpltCallback>
}
 8008a6c:	e7fb      	b.n	8008a66 <JPEG_DMA_PollResidualData+0xaa>

08008a6e <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008a6e:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008a70:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008a74:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008a76:	4604      	mov	r4, r0
 8008a78:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008a7a:	d014      	beq.n	8008aa6 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008a7c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008a7e:	f003 030c 	and.w	r3, r3, #12
 8008a82:	2b0c      	cmp	r3, #12
 8008a84:	d146      	bne.n	8008b14 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008a86:	07cb      	lsls	r3, r1, #31
 8008a88:	d520      	bpl.n	8008acc <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008a8a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008a8c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008a90:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008a92:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008a94:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8008a96:	b941      	cbnz	r1, 8008aaa <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a98:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008a9a:	f043 0304 	orr.w	r3, r3, #4
 8008a9e:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008aa0:	2306      	movs	r3, #6
 8008aa2:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008aa6:	2001      	movs	r0, #1
 8008aa8:	e01d      	b.n	8008ae6 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8008aaa:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008aac:	fbb3 f2f1 	udiv	r2, r3, r1
 8008ab0:	fb01 3212 	mls	r2, r1, r2, r3
 8008ab4:	1a9b      	subs	r3, r3, r2
 8008ab6:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008ab8:	b143      	cbz	r3, 8008acc <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008aba:	6822      	ldr	r2, [r4, #0]
 8008abc:	2101      	movs	r1, #1
 8008abe:	3240      	adds	r2, #64	@ 0x40
 8008ac0:	9100      	str	r1, [sp, #0]
 8008ac2:	69a1      	ldr	r1, [r4, #24]
 8008ac4:	f000 fba7 	bl	8009216 <HAL_MDMA_Start_IT>
 8008ac8:	2800      	cmp	r0, #0
 8008aca:	d1e5      	bne.n	8008a98 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008acc:	07a8      	lsls	r0, r5, #30
 8008ace:	d509      	bpl.n	8008ae4 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008ad0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ad2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ad6:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008ad8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ada:	0419      	lsls	r1, r3, #16
 8008adc:	d505      	bpl.n	8008aea <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8008ade:	4620      	mov	r0, r4
 8008ae0:	f7ff ff6c 	bl	80089bc <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008ae4:	2000      	movs	r0, #0
}
 8008ae6:	b003      	add	sp, #12
 8008ae8:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008aea:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008aec:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8008aee:	2900      	cmp	r1, #0
 8008af0:	d0d2      	beq.n	8008a98 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008af2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008af4:	fbb3 f2f1 	udiv	r2, r3, r1
 8008af8:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008afc:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008afe:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008b00:	2201      	movs	r2, #1
 8008b02:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008b04:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008b06:	9200      	str	r2, [sp, #0]
 8008b08:	69e2      	ldr	r2, [r4, #28]
 8008b0a:	f000 fb84 	bl	8009216 <HAL_MDMA_Start_IT>
 8008b0e:	2800      	cmp	r0, #0
 8008b10:	d0e8      	beq.n	8008ae4 <HAL_JPEG_Resume+0x76>
 8008b12:	e7c1      	b.n	8008a98 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008b14:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008b16:	f003 030c 	and.w	r3, r3, #12
 8008b1a:	2b08      	cmp	r3, #8
 8008b1c:	d1e2      	bne.n	8008ae4 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008b1e:	f011 0301 	ands.w	r3, r1, #1
 8008b22:	d004      	beq.n	8008b2e <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008b24:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008b26:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008b2a:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008b2c:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008b2e:	07aa      	lsls	r2, r5, #30
 8008b30:	d505      	bpl.n	8008b3e <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008b32:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008b34:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008b38:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008b3c:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008b3e:	6821      	ldr	r1, [r4, #0]
 8008b40:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008b42:	4313      	orrs	r3, r2
 8008b44:	630b      	str	r3, [r1, #48]	@ 0x30
 8008b46:	e7cd      	b.n	8008ae4 <HAL_JPEG_Resume+0x76>

08008b48 <JPEG_DMA_EndProcess>:
{
 8008b48:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008b4a:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008b4c:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008b4e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008b50:	681b      	ldr	r3, [r3, #0]
 8008b52:	695b      	ldr	r3, [r3, #20]
 8008b54:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008b5c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008b5e:	429a      	cmp	r2, r3
 8008b60:	d105      	bne.n	8008b6e <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008b62:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008b64:	69c1      	ldr	r1, [r0, #28]
 8008b66:	f7f9 ffc7 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008b6e:	6823      	ldr	r3, [r4, #0]
 8008b70:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008b72:	f015 0510 	ands.w	r5, r5, #16
 8008b76:	d124      	bne.n	8008bc2 <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008b78:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008b7a:	b12b      	cbz	r3, 8008b88 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008b7c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008b7e:	4620      	mov	r0, r4
 8008b80:	69e1      	ldr	r1, [r4, #28]
 8008b82:	f7f9 ffb9 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008b86:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008b88:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008b8a:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008b8c:	6813      	ldr	r3, [r2, #0]
 8008b8e:	f023 0301 	bic.w	r3, r3, #1
 8008b92:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008b94:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008b96:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008b98:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008b9c:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ba0:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008ba2:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008ba4:	f04f 0200 	mov.w	r2, #0
 8008ba8:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008bac:	f04f 0201 	mov.w	r2, #1
 8008bb0:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008bb4:	d102      	bne.n	8008bbc <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008bb6:	f7f9 fff1 	bl	8002b9c <HAL_JPEG_DecodeCpltCallback>
}
 8008bba:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008bbc:	f7ff fd2c 	bl	8008618 <HAL_JPEG_EncodeCpltCallback>
 8008bc0:	e7fb      	b.n	8008bba <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008bc2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008bc4:	049b      	lsls	r3, r3, #18
 8008bc6:	d4f8      	bmi.n	8008bba <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8008bc8:	4620      	mov	r0, r4
}
 8008bca:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008bce:	f7ff bef5 	b.w	80089bc <JPEG_DMA_PollResidualData>

08008bd2 <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008bd2:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008bd4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008bd6:	041b      	lsls	r3, r3, #16
 8008bd8:	d501      	bpl.n	8008bde <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8008bda:	f7ff bfb5 	b.w	8008b48 <JPEG_DMA_EndProcess>
}
 8008bde:	4770      	bx	lr

08008be0 <JPEG_MDMAOutCpltCallback>:
{
 8008be0:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008be2:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008be4:	6823      	ldr	r3, [r4, #0]
 8008be6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008be8:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008bec:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008bee:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008bf0:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008bf4:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008bf8:	0412      	lsls	r2, r2, #16
 8008bfa:	0c12      	lsrs	r2, r2, #16
 8008bfc:	2a0c      	cmp	r2, #12
 8008bfe:	d125      	bne.n	8008c4c <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008c00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c02:	069a      	lsls	r2, r3, #26
 8008c04:	d424      	bmi.n	8008c50 <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008c06:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008c08:	4620      	mov	r0, r4
 8008c0a:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008c0c:	695a      	ldr	r2, [r3, #20]
 8008c0e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008c10:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008c14:	1a9b      	subs	r3, r3, r2
 8008c16:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008c18:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c1a:	f7f9 ff6d 	bl	8002af8 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008c1e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008c20:	049b      	lsls	r3, r3, #18
 8008c22:	d415      	bmi.n	8008c50 <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008c24:	6821      	ldr	r1, [r4, #0]
 8008c26:	2301      	movs	r3, #1
 8008c28:	3144      	adds	r1, #68	@ 0x44
 8008c2a:	9300      	str	r3, [sp, #0]
 8008c2c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008c2e:	69e2      	ldr	r2, [r4, #28]
 8008c30:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008c32:	f000 faf0 	bl	8009216 <HAL_MDMA_Start_IT>
 8008c36:	b158      	cbz	r0, 8008c50 <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008c38:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8008c3a:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008c3c:	f043 0304 	orr.w	r3, r3, #4
 8008c40:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008c42:	2306      	movs	r3, #6
 8008c44:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8008c48:	f7f9 ffa6 	bl	8002b98 <HAL_JPEG_ErrorCallback>
}
 8008c4c:	b002      	add	sp, #8
 8008c4e:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008c50:	6822      	ldr	r2, [r4, #0]
 8008c52:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008c54:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008c58:	6313      	str	r3, [r2, #48]	@ 0x30
 8008c5a:	e7f7      	b.n	8008c4c <JPEG_MDMAOutCpltCallback+0x6c>

08008c5c <HAL_JPEG_IRQHandler>:
{
 8008c5c:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 8008c5e:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 8008c62:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8008c64:	3b03      	subs	r3, #3
 8008c66:	2b01      	cmp	r3, #1
 8008c68:	d850      	bhi.n	8008d0c <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008c6a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008c6c:	f003 030c 	and.w	r3, r3, #12
 8008c70:	2b08      	cmp	r3, #8
 8008c72:	d103      	bne.n	8008c7c <HAL_JPEG_IRQHandler+0x20>
}
 8008c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8008c78:	f7ff be29 	b.w	80088ce <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008c7c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008c7e:	f003 030c 	and.w	r3, r3, #12
 8008c82:	2b0c      	cmp	r3, #12
 8008c84:	d142      	bne.n	8008d0c <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008c86:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008c88:	f003 0303 	and.w	r3, r3, #3
 8008c8c:	2b02      	cmp	r3, #2
 8008c8e:	d114      	bne.n	8008cba <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008c90:	6803      	ldr	r3, [r0, #0]
 8008c92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008c94:	0659      	lsls	r1, r3, #25
 8008c96:	d510      	bpl.n	8008cba <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008c98:	1d01      	adds	r1, r0, #4
 8008c9a:	f7ff fbdd 	bl	8008458 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008c9e:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008ca0:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008ca2:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008ca4:	f7f9 fed4 	bl	8002a50 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008ca8:	6823      	ldr	r3, [r4, #0]
 8008caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cac:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cb0:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cb4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cb8:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8008cba:	6823      	ldr	r3, [r4, #0]
 8008cbc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cbe:	0692      	lsls	r2, r2, #26
 8008cc0:	d524      	bpl.n	8008d0c <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008cc2:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008cc4:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8008cc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8008cca:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008ccc:	681a      	ldr	r2, [r3, #0]
 8008cce:	f022 0201 	bic.w	r2, r2, #1
 8008cd2:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008cd4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cd6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008cda:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008cde:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008ce2:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8008ce4:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008ce8:	2b02      	cmp	r3, #2
 8008cea:	d101      	bne.n	8008cf0 <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 8008cec:	f000 fadc 	bl	80092a8 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 8008cf0:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008cf2:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 8008cf6:	2b02      	cmp	r3, #2
 8008cf8:	d103      	bne.n	8008d02 <HAL_JPEG_IRQHandler+0xa6>
}
 8008cfa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 8008cfe:	f000 bad3 	b.w	80092a8 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 8008d02:	4620      	mov	r0, r4
}
 8008d04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 8008d08:	f7ff bf1e 	b.w	8008b48 <JPEG_DMA_EndProcess>
}
 8008d0c:	bd10      	pop	{r4, pc}

08008d0e <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d0e:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d10:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d12:	3284      	adds	r2, #132	@ 0x84
 8008d14:	1883      	adds	r3, r0, r2
{
 8008d16:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d18:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d1a:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d1c:	684c      	ldr	r4, [r1, #4]
 8008d1e:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d22:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d26:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8008d28:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8008d2a:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8008d2c:	f106 0c01 	add.w	ip, r6, #1
 8008d30:	68c5      	ldr	r5, [r0, #12]
 8008d32:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8008d36:	4465      	add	r5, ip
 8008d38:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8008d3c:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8008d3e:	68c7      	ldr	r7, [r0, #12]
 8008d40:	68cd      	ldr	r5, [r1, #12]
 8008d42:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8008d46:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8008d48:	689d      	ldr	r5, [r3, #8]
 8008d4a:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 8008d4e:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008d50:	688d      	ldr	r5, [r1, #8]
 8008d52:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8008d56:	3501      	adds	r5, #1
 8008d58:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8008d5c:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d5e:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008d62:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8008d66:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8008d68:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8008d6a:	691d      	ldr	r5, [r3, #16]
 8008d6c:	f025 0507 	bic.w	r5, r5, #7
 8008d70:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8008d72:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008d76:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8008d7a:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8008d7e:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008d82:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8008d86:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8008d8a:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 8008d8e:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8008d90:	695d      	ldr	r5, [r3, #20]
 8008d92:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8008d96:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8008d98:	694d      	ldr	r5, [r1, #20]
 8008d9a:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8008d9c:	69dd      	ldr	r5, [r3, #28]
 8008d9e:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 8008da2:	f025 0507 	bic.w	r5, r5, #7
 8008da6:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8008da8:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8008dac:	433d      	orrs	r5, r7
 8008dae:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8008db0:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 8008db2:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008db4:	f1bc 0f00 	cmp.w	ip, #0
 8008db8:	d024      	beq.n	8008e04 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008dba:	f1bc 0f01 	cmp.w	ip, #1
 8008dbe:	d023      	beq.n	8008e08 <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008dc0:	f1ac 0502 	sub.w	r5, ip, #2
 8008dc4:	2d02      	cmp	r5, #2
 8008dc6:	d921      	bls.n	8008e0c <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8008dc8:	f1bc 0f07 	cmp.w	ip, #7
 8008dcc:	bf14      	ite	ne
 8008dce:	2501      	movne	r5, #1
 8008dd0:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008dd2:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008dd4:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008dd6:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008dda:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8008ddc:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8008dde:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008de0:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008de2:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8008de4:	436f      	muls	r7, r5
 8008de6:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 8008dea:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8008dec:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 8008dee:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 8008df2:	f024 0407 	bic.w	r4, r4, #7
 8008df6:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 8008df8:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8008dfa:	5883      	ldr	r3, [r0, r2]
 8008dfc:	f043 0301 	orr.w	r3, r3, #1
 8008e00:	5083      	str	r3, [r0, r2]
}
 8008e02:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 8008e04:	2504      	movs	r5, #4
 8008e06:	e7e4      	b.n	8008dd2 <LTDC_SetConfig+0xc4>
    tmp = 3U;
 8008e08:	2503      	movs	r5, #3
 8008e0a:	e7e2      	b.n	8008dd2 <LTDC_SetConfig+0xc4>
    tmp = 2U;
 8008e0c:	2502      	movs	r5, #2
 8008e0e:	e7e0      	b.n	8008dd2 <LTDC_SetConfig+0xc4>

08008e10 <HAL_LTDC_Init>:
{
 8008e10:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 8008e12:	4604      	mov	r4, r0
 8008e14:	2800      	cmp	r0, #0
 8008e16:	d04e      	beq.n	8008eb6 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8008e18:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 8008e1c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8008e20:	b91b      	cbnz	r3, 8008e2a <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 8008e22:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 8008e26:	f7f8 fc03 	bl	8001630 <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008e2a:	2302      	movs	r3, #2
 8008e2c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8008e30:	6823      	ldr	r3, [r4, #0]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8008e38:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e3a:	6999      	ldr	r1, [r3, #24]
 8008e3c:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 8008e40:	4302      	orrs	r2, r0
 8008e42:	68e0      	ldr	r0, [r4, #12]
 8008e44:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8008e46:	6920      	ldr	r0, [r4, #16]
 8008e48:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8008e4a:	430a      	orrs	r2, r1
 8008e4c:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8008e4e:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 8008e52:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e56:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8008e58:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8008e5c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e60:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8008e62:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8008e66:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e6a:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8008e6c:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 8008e70:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e74:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008e76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8008e78:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008e7c:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8008e80:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8008e84:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008e86:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8008e88:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8008e8c:	432a      	orrs	r2, r5
 8008e8e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008e92:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8008e94:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8008e98:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8008e9a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008e9c:	f042 0206 	orr.w	r2, r2, #6
 8008ea0:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 8008ea2:	699a      	ldr	r2, [r3, #24]
 8008ea4:	f042 0201 	orr.w	r2, r2, #1
 8008ea8:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8008eaa:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8008eac:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 8008eb0:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8008eb4:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7fc      	b.n	8008eb4 <HAL_LTDC_Init+0xa4>

08008eba <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8008eba:	4770      	bx	lr

08008ebc <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8008ebc:	4770      	bx	lr

08008ebe <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 8008ebe:	4770      	bx	lr

08008ec0 <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ec0:	6803      	ldr	r3, [r0, #0]
{
 8008ec2:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8008ec4:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8008ec6:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8008ec8:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8008eca:	0772      	lsls	r2, r6, #29
 8008ecc:	d514      	bpl.n	8008ef8 <HAL_LTDC_IRQHandler+0x38>
 8008ece:	0769      	lsls	r1, r5, #29
 8008ed0:	d512      	bpl.n	8008ef8 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 8008ed2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008ed4:	f022 0204 	bic.w	r2, r2, #4
 8008ed8:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 8008eda:	2204      	movs	r2, #4
 8008edc:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 8008ede:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 8008ee2:	f043 0301 	orr.w	r3, r3, #1
 8008ee6:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 8008eea:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008eec:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008ef0:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008ef4:	f7ff ffe1 	bl	8008eba <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 8008ef8:	07b2      	lsls	r2, r6, #30
 8008efa:	d516      	bpl.n	8008f2a <HAL_LTDC_IRQHandler+0x6a>
 8008efc:	07ab      	lsls	r3, r5, #30
 8008efe:	d514      	bpl.n	8008f2a <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008f00:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 8008f02:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 8008f04:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f06:	f022 0202 	bic.w	r2, r2, #2
 8008f0a:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 8008f0c:	2202      	movs	r2, #2
 8008f0e:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 8008f10:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 8008f14:	4313      	orrs	r3, r2
 8008f16:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 8008f1a:	2304      	movs	r3, #4
 8008f1c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008f20:	2300      	movs	r3, #0
 8008f22:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 8008f26:	f7ff ffc8 	bl	8008eba <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 8008f2a:	07f0      	lsls	r0, r6, #31
 8008f2c:	d510      	bpl.n	8008f50 <HAL_LTDC_IRQHandler+0x90>
 8008f2e:	07e9      	lsls	r1, r5, #31
 8008f30:	d50e      	bpl.n	8008f50 <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008f32:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8008f34:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8008f36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f38:	f022 0201 	bic.w	r2, r2, #1
 8008f3c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 8008f3e:	2201      	movs	r2, #1
 8008f40:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 8008f42:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8008f44:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008f48:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8008f4c:	f7ff ffb6 	bl	8008ebc <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 8008f50:	0732      	lsls	r2, r6, #28
 8008f52:	d511      	bpl.n	8008f78 <HAL_LTDC_IRQHandler+0xb8>
 8008f54:	072b      	lsls	r3, r5, #28
 8008f56:	d50f      	bpl.n	8008f78 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008f58:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008f5a:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8008f5c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008f5e:	f022 0208 	bic.w	r2, r2, #8
 8008f62:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8008f64:	2208      	movs	r2, #8
 8008f66:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8008f68:	2301      	movs	r3, #1
 8008f6a:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8008f6e:	2300      	movs	r3, #0
 8008f70:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8008f74:	f7ff ffa3 	bl	8008ebe <HAL_LTDC_ReloadEventCallback>
}
 8008f78:	bd70      	pop	{r4, r5, r6, pc}

08008f7a <HAL_LTDC_ConfigLayer>:
{
 8008f7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 8008f7e:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 8008f82:	4606      	mov	r6, r0
 8008f84:	460f      	mov	r7, r1
 8008f86:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8008f88:	2b01      	cmp	r3, #1
 8008f8a:	f04f 0002 	mov.w	r0, #2
 8008f8e:	d01f      	beq.n	8008fd0 <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008f90:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 8008f92:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008f96:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008f98:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008f9c:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 8008fa0:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008fa4:	3438      	adds	r4, #56	@ 0x38
 8008fa6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fa8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008faa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8008fb0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8008fb2:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008fb4:	4630      	mov	r0, r6
 8008fb6:	4662      	mov	r2, ip
 8008fb8:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8008fba:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8008fbc:	f7ff fea7 	bl	8008d0e <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008fc0:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 8008fc2:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8008fc4:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8008fc8:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8008fcc:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 8008fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08008fd4 <HAL_LTDC_SetPitch>:
{
 8008fd4:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 8008fd6:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 8008fda:	2b01      	cmp	r3, #1
 8008fdc:	f04f 0302 	mov.w	r3, #2
 8008fe0:	d02c      	beq.n	800903c <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008fe2:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8008fe4:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 8008fe8:	fb04 0402 	mla	r4, r4, r2, r0
 8008fec:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008fee:	b33c      	cbz	r4, 8009040 <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8008ff0:	2c01      	cmp	r4, #1
 8008ff2:	d027      	beq.n	8009044 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8008ff4:	1ea5      	subs	r5, r4, #2
 8008ff6:	429d      	cmp	r5, r3
 8008ff8:	d902      	bls.n	8009000 <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 8008ffa:	2c07      	cmp	r4, #7
 8008ffc:	bf18      	it	ne
 8008ffe:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009000:	01d2      	lsls	r2, r2, #7
 8009002:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 8009004:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 8009006:	3284      	adds	r2, #132	@ 0x84
 8009008:	4422      	add	r2, r4
 800900a:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 800900c:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 8009010:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 8009014:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009016:	4c0c      	ldr	r4, [pc, #48]	@ (8009048 <HAL_LTDC_SetPitch+0x74>)
 8009018:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 800901a:	f045 0501 	orr.w	r5, r5, #1
 800901e:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 8009020:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 8009022:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 8009026:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 8009028:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800902a:	f043 0301 	orr.w	r3, r3, #1
 800902e:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 8009030:	2301      	movs	r3, #1
 8009032:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009036:	2300      	movs	r3, #0
 8009038:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 800903c:	4618      	mov	r0, r3
 800903e:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 8009040:	2304      	movs	r3, #4
 8009042:	e7dd      	b.n	8009000 <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8009044:	2303      	movs	r3, #3
 8009046:	e7db      	b.n	8009000 <HAL_LTDC_SetPitch+0x2c>
 8009048:	50001000 	.word	0x50001000

0800904c <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 800904c:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800904e:	6804      	ldr	r4, [r0, #0]
 8009050:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009054:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009058:	6965      	ldr	r5, [r4, #20]
 800905a:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800905e:	ea4f 4545 	mov.w	r5, r5, lsl #17
 8009062:	ea45 0503 	orr.w	r5, r5, r3
 8009066:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009068:	9d03      	ldr	r5, [sp, #12]
 800906a:	6963      	ldr	r3, [r4, #20]
 800906c:	f105 35ff 	add.w	r5, r5, #4294967295
 8009070:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009074:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009078:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 800907a:	f04f 031f 	mov.w	r3, #31
 800907e:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 8009080:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 8009082:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8009084:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009086:	bf0c      	ite	eq
 8009088:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 800908c:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009090:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009094:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8009096:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009098:	bf0c      	ite	eq
 800909a:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800909e:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 80090a2:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 80090a4:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 80090a6:	6263      	str	r3, [r4, #36]	@ 0x24
}
 80090a8:	bd30      	pop	{r4, r5, pc}

080090aa <HAL_MDMA_Init>:
{
 80090aa:	b538      	push	{r3, r4, r5, lr}
 80090ac:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 80090ae:	f7fd f8fd 	bl	80062ac <HAL_GetTick>
 80090b2:	4605      	mov	r5, r0
  if(hmdma == NULL)
 80090b4:	2c00      	cmp	r4, #0
 80090b6:	d061      	beq.n	800917c <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 80090b8:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 80090ba:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 80090bc:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80090c0:	2302      	movs	r3, #2
 80090c2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 80090c6:	68d3      	ldr	r3, [r2, #12]
 80090c8:	f023 0301 	bic.w	r3, r3, #1
 80090cc:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80090ce:	6823      	ldr	r3, [r4, #0]
 80090d0:	68da      	ldr	r2, [r3, #12]
 80090d2:	07d2      	lsls	r2, r2, #31
 80090d4:	d448      	bmi.n	8009168 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80090d6:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80090da:	430a      	orrs	r2, r1
 80090dc:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80090de:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80090e2:	430a      	orrs	r2, r1
 80090e4:	69e1      	ldr	r1, [r4, #28]
 80090e6:	430a      	orrs	r2, r1
 80090e8:	6a21      	ldr	r1, [r4, #32]
 80090ea:	430a      	orrs	r2, r1
 80090ec:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80090ee:	430a      	orrs	r2, r1
 80090f0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80090f2:	430a      	orrs	r2, r1
 80090f4:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80090f6:	430a      	orrs	r2, r1
 80090f8:	68a1      	ldr	r1, [r4, #8]
 80090fa:	430a      	orrs	r2, r1
 80090fc:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80090fe:	3901      	subs	r1, #1
 8009100:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009104:	6861      	ldr	r1, [r4, #4]
 8009106:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800910a:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800910c:	d103      	bne.n	8009116 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800910e:	691a      	ldr	r2, [r3, #16]
 8009110:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8009114:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8009116:	2200      	movs	r2, #0
 8009118:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800911a:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800911c:	2a00      	cmp	r2, #0
 800911e:	da04      	bge.n	800912a <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009120:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8009122:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8009124:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 8009128:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800912a:	b292      	uxth	r2, r2
 800912c:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800912e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009130:	2a00      	cmp	r2, #0
 8009132:	da25      	bge.n	8009180 <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009134:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009136:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009138:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 800913c:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800913e:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009140:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009144:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009148:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800914a:	f04f 0200 	mov.w	r2, #0
 800914e:	d019      	beq.n	8009184 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 8009150:	b2c9      	uxtb	r1, r1
 8009152:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009154:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009156:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009158:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 800915a:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 800915c:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800915e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 8009162:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009166:	e00a      	b.n	800917e <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009168:	f7fd f8a0 	bl	80062ac <HAL_GetTick>
 800916c:	1b40      	subs	r0, r0, r5
 800916e:	2805      	cmp	r0, #5
 8009170:	d9ad      	bls.n	80090ce <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8009172:	2340      	movs	r3, #64	@ 0x40
 8009174:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009176:	2303      	movs	r3, #3
 8009178:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 800917c:	2001      	movs	r0, #1
}
 800917e:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009180:	6a18      	ldr	r0, [r3, #32]
 8009182:	e7dd      	b.n	8009140 <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8009184:	629a      	str	r2, [r3, #40]	@ 0x28
 8009186:	e7e5      	b.n	8009154 <HAL_MDMA_Init+0xaa>

08009188 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009188:	b1d8      	cbz	r0, 80091c2 <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 800918a:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800918c:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800918e:	68d3      	ldr	r3, [r2, #12]
 8009190:	f023 0301 	bic.w	r3, r3, #1
 8009194:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8009196:	2300      	movs	r3, #0
 8009198:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 800919a:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 800919c:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800919e:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 80091a0:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 80091a2:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 80091a4:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80091a6:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80091a8:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80091aa:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80091ac:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80091ae:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 80091b0:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 80091b2:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 80091b6:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 80091ba:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 80091be:	4618      	mov	r0, r3
 80091c0:	4770      	bx	lr
    return HAL_ERROR;
 80091c2:	2001      	movs	r0, #1
}
 80091c4:	4770      	bx	lr

080091c6 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 80091c6:	4603      	mov	r3, r0
{
 80091c8:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 80091ca:	b300      	cbz	r0, 800920e <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 80091cc:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 80091d0:	2801      	cmp	r0, #1
 80091d2:	d01e      	beq.n	8009212 <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80091d4:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80091d6:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80091da:	42a5      	cmp	r5, r4
 80091dc:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80091de:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80091e2:	d112      	bne.n	800920a <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80091e4:	681c      	ldr	r4, [r3, #0]
 80091e6:	6925      	ldr	r5, [r4, #16]
 80091e8:	006d      	lsls	r5, r5, #1
 80091ea:	d407      	bmi.n	80091fc <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 80091ec:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80091ee:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80091f0:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80091f2:	b939      	cbnz	r1, 8009204 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80091f4:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 80091f8:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80091fa:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 80091fc:	2200      	movs	r2, #0
 80091fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 8009202:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 8009204:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 8009208:	e7f6      	b.n	80091f8 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 800920a:	4620      	mov	r0, r4
 800920c:	e7f6      	b.n	80091fc <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 800920e:	2001      	movs	r0, #1
 8009210:	e7f7      	b.n	8009202 <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 8009212:	2002      	movs	r0, #2
 8009214:	e7f5      	b.n	8009202 <HAL_MDMA_ConfigPostRequestMask+0x3c>

08009216 <HAL_MDMA_Start_IT>:
{
 8009216:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 8009218:	4604      	mov	r4, r0
 800921a:	2800      	cmp	r0, #0
 800921c:	d042      	beq.n	80092a4 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 800921e:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 8009222:	2d01      	cmp	r5, #1
 8009224:	d03c      	beq.n	80092a0 <HAL_MDMA_Start_IT+0x8a>
 8009226:	2501      	movs	r5, #1
 8009228:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 800922c:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 8009230:	2d01      	cmp	r5, #1
 8009232:	f04f 0500 	mov.w	r5, #0
 8009236:	d131      	bne.n	800929c <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009238:	2602      	movs	r6, #2
 800923a:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800923e:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 8009240:	6805      	ldr	r5, [r0, #0]
 8009242:	68ee      	ldr	r6, [r5, #12]
 8009244:	f026 0601 	bic.w	r6, r6, #1
 8009248:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 800924a:	9e06      	ldr	r6, [sp, #24]
 800924c:	9600      	str	r6, [sp, #0]
 800924e:	f7ff fefd 	bl	800904c <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 8009252:	68eb      	ldr	r3, [r5, #12]
 8009254:	f043 0306 	orr.w	r3, r3, #6
 8009258:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 800925a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800925c:	b11b      	cbz	r3, 8009266 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800925e:	68eb      	ldr	r3, [r5, #12]
 8009260:	f043 0310 	orr.w	r3, r3, #16
 8009264:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009266:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009268:	b11b      	cbz	r3, 8009272 <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 800926a:	68eb      	ldr	r3, [r5, #12]
 800926c:	f043 0308 	orr.w	r3, r3, #8
 8009270:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 8009272:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009274:	b11b      	cbz	r3, 800927e <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8009276:	68eb      	ldr	r3, [r5, #12]
 8009278:	f043 0320 	orr.w	r3, r3, #32
 800927c:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800927e:	68eb      	ldr	r3, [r5, #12]
 8009280:	f043 0301 	orr.w	r3, r3, #1
 8009284:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009286:	6863      	ldr	r3, [r4, #4]
 8009288:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800928c:	d103      	bne.n	8009296 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800928e:	68eb      	ldr	r3, [r5, #12]
 8009290:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009294:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8009296:	2000      	movs	r0, #0
}
 8009298:	b002      	add	sp, #8
 800929a:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 800929c:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 80092a0:	2002      	movs	r0, #2
 80092a2:	e7f9      	b.n	8009298 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 80092a4:	2001      	movs	r0, #1
 80092a6:	e7f7      	b.n	8009298 <HAL_MDMA_Start_IT+0x82>

080092a8 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 80092a8:	b128      	cbz	r0, 80092b6 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 80092aa:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80092ae:	2b02      	cmp	r3, #2
 80092b0:	d003      	beq.n	80092ba <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 80092b2:	2380      	movs	r3, #128	@ 0x80
 80092b4:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 80092b6:	2001      	movs	r0, #1
 80092b8:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 80092ba:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80092bc:	2304      	movs	r3, #4
 80092be:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 80092c2:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 80092c4:	68d3      	ldr	r3, [r2, #12]
 80092c6:	f023 0301 	bic.w	r3, r3, #1
 80092ca:	60d3      	str	r3, [r2, #12]
}
 80092cc:	4770      	bx	lr
	...

080092d0 <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 80092d0:	2300      	movs	r3, #0
{
 80092d2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 80092d4:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80092d6:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 80092da:	4b58      	ldr	r3, [pc, #352]	@ (800943c <HAL_MDMA_IRQHandler+0x16c>)
{
 80092dc:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80092de:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80092e0:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80092e2:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80092e4:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80092e6:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 80092ea:	3a40      	subs	r2, #64	@ 0x40
 80092ec:	f3c2 1284 	ubfx	r2, r2, #6, #5
 80092f0:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80092f4:	4202      	tst	r2, r0
 80092f6:	f000 809e 	beq.w	8009436 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80092fa:	681a      	ldr	r2, [r3, #0]
 80092fc:	07d1      	lsls	r1, r2, #31
 80092fe:	d529      	bpl.n	8009354 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8009300:	68da      	ldr	r2, [r3, #12]
 8009302:	0792      	lsls	r2, r2, #30
 8009304:	d526      	bpl.n	8009354 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8009306:	68da      	ldr	r2, [r3, #12]
 8009308:	f022 0202 	bic.w	r2, r2, #2
 800930c:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 800930e:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009310:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 8009312:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8009314:	bf54      	ite	pl
 8009316:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800931a:	f041 0102 	orrmi.w	r1, r1, #2
 800931e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 8009320:	0591      	lsls	r1, r2, #22
 8009322:	d503      	bpl.n	800932c <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 8009324:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009326:	f041 0104 	orr.w	r1, r1, #4
 800932a:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800932c:	05d0      	lsls	r0, r2, #23
 800932e:	d503      	bpl.n	8009338 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 8009330:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 8009332:	f041 0108 	orr.w	r1, r1, #8
 8009336:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009338:	0551      	lsls	r1, r2, #21
 800933a:	d503      	bpl.n	8009344 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800933c:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800933e:	f041 0110 	orr.w	r1, r1, #16
 8009342:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009344:	0512      	lsls	r2, r2, #20
 8009346:	d503      	bpl.n	8009350 <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009348:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 800934a:	f042 0220 	orr.w	r2, r2, #32
 800934e:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 8009350:	2201      	movs	r2, #1
 8009352:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009354:	681a      	ldr	r2, [r3, #0]
 8009356:	06d0      	lsls	r0, r2, #27
 8009358:	d508      	bpl.n	800936c <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800935a:	68da      	ldr	r2, [r3, #12]
 800935c:	0691      	lsls	r1, r2, #26
 800935e:	d505      	bpl.n	800936c <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 8009360:	2210      	movs	r2, #16
 8009362:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009364:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009366:	b10b      	cbz	r3, 800936c <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009368:	4620      	mov	r0, r4
 800936a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800936c:	6823      	ldr	r3, [r4, #0]
 800936e:	681a      	ldr	r2, [r3, #0]
 8009370:	0712      	lsls	r2, r2, #28
 8009372:	d508      	bpl.n	8009386 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009374:	68da      	ldr	r2, [r3, #12]
 8009376:	06d0      	lsls	r0, r2, #27
 8009378:	d505      	bpl.n	8009386 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800937a:	2208      	movs	r2, #8
 800937c:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800937e:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8009380:	b10b      	cbz	r3, 8009386 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 8009382:	4620      	mov	r0, r4
 8009384:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009386:	6823      	ldr	r3, [r4, #0]
 8009388:	681a      	ldr	r2, [r3, #0]
 800938a:	0751      	lsls	r1, r2, #29
 800938c:	d508      	bpl.n	80093a0 <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800938e:	68da      	ldr	r2, [r3, #12]
 8009390:	0712      	lsls	r2, r2, #28
 8009392:	d505      	bpl.n	80093a0 <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009394:	2204      	movs	r2, #4
 8009396:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009398:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800939a:	b10b      	cbz	r3, 80093a0 <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800939c:	4620      	mov	r0, r4
 800939e:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80093a0:	6823      	ldr	r3, [r4, #0]
 80093a2:	681a      	ldr	r2, [r3, #0]
 80093a4:	0790      	lsls	r0, r2, #30
 80093a6:	d524      	bpl.n	80093f2 <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80093a8:	68da      	ldr	r2, [r3, #12]
 80093aa:	0751      	lsls	r1, r2, #29
 80093ac:	d521      	bpl.n	80093f2 <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80093ae:	68da      	ldr	r2, [r3, #12]
 80093b0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80093b4:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80093b6:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 80093ba:	2a04      	cmp	r2, #4
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	d10c      	bne.n	80093dc <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 80093c2:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 80093c4:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 80093c8:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 80093cc:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d031      	beq.n	8009436 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 80093d2:	4620      	mov	r0, r4
}
 80093d4:	b003      	add	sp, #12
 80093d6:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 80093da:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80093dc:	2102      	movs	r1, #2
 80093de:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 80093e0:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 80093e2:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 80093e6:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 80093ea:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80093ec:	b10b      	cbz	r3, 80093f2 <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 80093ee:	4620      	mov	r0, r4
 80093f0:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80093f2:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80093f4:	b1fb      	cbz	r3, 8009436 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 80093f6:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80093fa:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80093fe:	2304      	movs	r3, #4
 8009400:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 8009404:	6823      	ldr	r3, [r4, #0]
 8009406:	68da      	ldr	r2, [r3, #12]
 8009408:	f022 0201 	bic.w	r2, r2, #1
 800940c:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 800940e:	9a01      	ldr	r2, [sp, #4]
 8009410:	3201      	adds	r2, #1
 8009412:	42aa      	cmp	r2, r5
 8009414:	9201      	str	r2, [sp, #4]
 8009416:	d802      	bhi.n	800941e <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 8009418:	68da      	ldr	r2, [r3, #12]
 800941a:	07d2      	lsls	r2, r2, #31
 800941c:	d4f7      	bmi.n	800940e <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 800941e:	2200      	movs	r2, #0
 8009420:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8009424:	68db      	ldr	r3, [r3, #12]
 8009426:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009428:	bf4c      	ite	mi
 800942a:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 800942c:	2301      	movpl	r3, #1
 800942e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 8009432:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009434:	e7cb      	b.n	80093ce <HAL_MDMA_IRQHandler+0xfe>
}
 8009436:	b003      	add	sp, #12
 8009438:	bd30      	pop	{r4, r5, pc}
 800943a:	bf00      	nop
 800943c:	2400006c 	.word	0x2400006c

08009440 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 8009440:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009442:	4d1c      	ldr	r5, [pc, #112]	@ (80094b4 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009444:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009446:	68eb      	ldr	r3, [r5, #12]
 8009448:	f003 0307 	and.w	r3, r3, #7
 800944c:	2b06      	cmp	r3, #6
 800944e:	d006      	beq.n	800945e <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 8009450:	68e8      	ldr	r0, [r5, #12]
 8009452:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8009456:	1b00      	subs	r0, r0, r4
 8009458:	bf18      	it	ne
 800945a:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 800945c:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800945e:	68eb      	ldr	r3, [r5, #12]
 8009460:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009464:	4303      	orrs	r3, r0
 8009466:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009468:	f7fc ff20 	bl	80062ac <HAL_GetTick>
 800946c:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800946e:	686b      	ldr	r3, [r5, #4]
 8009470:	049a      	lsls	r2, r3, #18
 8009472:	d508      	bpl.n	8009486 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009474:	f1a4 031d 	sub.w	r3, r4, #29
 8009478:	2b01      	cmp	r3, #1
 800947a:	d90c      	bls.n	8009496 <HAL_PWREx_ConfigSupply+0x56>
 800947c:	3c2d      	subs	r4, #45	@ 0x2d
 800947e:	2c01      	cmp	r4, #1
 8009480:	d909      	bls.n	8009496 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 8009482:	2000      	movs	r0, #0
 8009484:	e7ea      	b.n	800945c <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009486:	f7fc ff11 	bl	80062ac <HAL_GetTick>
 800948a:	1b80      	subs	r0, r0, r6
 800948c:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8009490:	d9ed      	bls.n	800946e <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 8009492:	2001      	movs	r0, #1
 8009494:	e7e2      	b.n	800945c <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8009496:	f7fc ff09 	bl	80062ac <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800949a:	4d06      	ldr	r5, [pc, #24]	@ (80094b4 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 800949c:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800949e:	68eb      	ldr	r3, [r5, #12]
 80094a0:	03db      	lsls	r3, r3, #15
 80094a2:	d4ee      	bmi.n	8009482 <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 80094a4:	f7fc ff02 	bl	80062ac <HAL_GetTick>
 80094a8:	1b00      	subs	r0, r0, r4
 80094aa:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80094ae:	d9f6      	bls.n	800949e <HAL_PWREx_ConfigSupply+0x5e>
 80094b0:	e7ef      	b.n	8009492 <HAL_PWREx_ConfigSupply+0x52>
 80094b2:	bf00      	nop
 80094b4:	58024800 	.word	0x58024800

080094b8 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 80094b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 80094bc:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80094be:	b135      	cbz	r5, 80094ce <QSPI_Config+0x16>
 80094c0:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 80094c4:	d003      	beq.n	80094ce <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80094c6:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 80094c8:	6804      	ldr	r4, [r0, #0]
 80094ca:	3b01      	subs	r3, #1
 80094cc:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80094ce:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80094d2:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80094d6:	f1ba 0f00 	cmp.w	sl, #0
 80094da:	d04c      	beq.n	8009576 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80094dc:	694c      	ldr	r4, [r1, #20]
 80094de:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80094e2:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80094e4:	680b      	ldr	r3, [r1, #0]
 80094e6:	04a4      	lsls	r4, r4, #18
 80094e8:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 80094ec:	ea4a 0a02 	orr.w	sl, sl, r2
 80094f0:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80094f4:	f1b8 0f00 	cmp.w	r8, #0
 80094f8:	d026      	beq.n	8009548 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80094fa:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80094fc:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009500:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009502:	ea4a 0508 	orr.w	r5, sl, r8
 8009506:	b19f      	cbz	r7, 8009530 <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009508:	433b      	orrs	r3, r7
 800950a:	4303      	orrs	r3, r0
 800950c:	68c8      	ldr	r0, [r1, #12]
 800950e:	ea43 030e 	orr.w	r3, r3, lr
 8009512:	ea43 030c 	orr.w	r3, r3, ip
 8009516:	ea43 0309 	orr.w	r3, r3, r9
 800951a:	4303      	orrs	r3, r0
 800951c:	4323      	orrs	r3, r4
 800951e:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009520:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009524:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009526:	d001      	beq.n	800952c <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009528:	684b      	ldr	r3, [r1, #4]
 800952a:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 800952c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009530:	4303      	orrs	r3, r0
 8009532:	ea43 030e 	orr.w	r3, r3, lr
 8009536:	ea43 030c 	orr.w	r3, r3, ip
 800953a:	ea43 0309 	orr.w	r3, r3, r9
 800953e:	4323      	orrs	r3, r4
 8009540:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009542:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009544:	61b7      	str	r7, [r6, #24]
 8009546:	e7f1      	b.n	800952c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009548:	b15f      	cbz	r7, 8009562 <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800954a:	433b      	orrs	r3, r7
 800954c:	4303      	orrs	r3, r0
 800954e:	68c8      	ldr	r0, [r1, #12]
 8009550:	ea43 030e 	orr.w	r3, r3, lr
 8009554:	ea43 030c 	orr.w	r3, r3, ip
 8009558:	4303      	orrs	r3, r0
 800955a:	4323      	orrs	r3, r4
 800955c:	ea43 030a 	orr.w	r3, r3, sl
 8009560:	e7de      	b.n	8009520 <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009562:	4303      	orrs	r3, r0
 8009564:	ea43 030e 	orr.w	r3, r3, lr
 8009568:	ea43 050c 	orr.w	r5, r3, ip
 800956c:	ea45 0304 	orr.w	r3, r5, r4
 8009570:	ea43 030a 	orr.w	r3, r3, sl
 8009574:	e7e5      	b.n	8009542 <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009576:	f1b8 0f00 	cmp.w	r8, #0
 800957a:	d02d      	beq.n	80095d8 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 800957c:	688b      	ldr	r3, [r1, #8]
 800957e:	ea45 0508 	orr.w	r5, r5, r8
 8009582:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009584:	694e      	ldr	r6, [r1, #20]
 8009586:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009588:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800958a:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800958e:	04b6      	lsls	r6, r6, #18
 8009590:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009592:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009596:	b1a7      	cbz	r7, 80095c2 <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009598:	433b      	orrs	r3, r7
 800959a:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 800959c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095a0:	ea43 0309 	orr.w	r3, r3, r9
 80095a4:	ea43 030e 	orr.w	r3, r3, lr
 80095a8:	ea43 030c 	orr.w	r3, r3, ip
 80095ac:	ea43 0300 	orr.w	r3, r3, r0
 80095b0:	ea43 0306 	orr.w	r3, r3, r6
 80095b4:	ea43 0305 	orr.w	r3, r3, r5
 80095b8:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80095ba:	d0b7      	beq.n	800952c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80095bc:	684b      	ldr	r3, [r1, #4]
 80095be:	61a3      	str	r3, [r4, #24]
 80095c0:	e7b4      	b.n	800952c <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095c2:	ea43 0209 	orr.w	r2, r3, r9
 80095c6:	ea42 020e 	orr.w	r2, r2, lr
 80095ca:	ea42 020c 	orr.w	r2, r2, ip
 80095ce:	4332      	orrs	r2, r6
 80095d0:	432a      	orrs	r2, r5
 80095d2:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80095d4:	61a7      	str	r7, [r4, #24]
 80095d6:	e7a9      	b.n	800952c <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80095d8:	b1d7      	cbz	r7, 8009610 <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095da:	ea45 0307 	orr.w	r3, r5, r7
 80095de:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80095e0:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80095e2:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80095e6:	ea43 0302 	orr.w	r3, r3, r2
 80095ea:	ea43 0304 	orr.w	r3, r3, r4
 80095ee:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 80095f0:	ea43 0304 	orr.w	r3, r3, r4
 80095f4:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 80095f6:	ea43 0304 	orr.w	r3, r3, r4
 80095fa:	68cc      	ldr	r4, [r1, #12]
 80095fc:	ea43 0304 	orr.w	r3, r3, r4
 8009600:	694c      	ldr	r4, [r1, #20]
 8009602:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 8009606:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009608:	d090      	beq.n	800952c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 800960a:	684b      	ldr	r3, [r1, #4]
 800960c:	6183      	str	r3, [r0, #24]
 800960e:	e78d      	b.n	800952c <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 8009610:	2d00      	cmp	r5, #0
 8009612:	d08b      	beq.n	800952c <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009614:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 8009616:	6800      	ldr	r0, [r0, #0]
 8009618:	432b      	orrs	r3, r5
 800961a:	431a      	orrs	r2, r3
 800961c:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 800961e:	431a      	orrs	r2, r3
 8009620:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 8009622:	431a      	orrs	r2, r3
 8009624:	694b      	ldr	r3, [r1, #20]
 8009626:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 800962a:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 800962c:	6187      	str	r7, [r0, #24]
}
 800962e:	e77d      	b.n	800952c <QSPI_Config+0x74>

08009630 <QSPI_WaitFlagStateUntilTimeout>:
{
 8009630:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009634:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009638:	4604      	mov	r4, r0
 800963a:	460e      	mov	r6, r1
 800963c:	4615      	mov	r5, r2
 800963e:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009640:	6822      	ldr	r2, [r4, #0]
 8009642:	6893      	ldr	r3, [r2, #8]
 8009644:	4233      	tst	r3, r6
 8009646:	bf14      	ite	ne
 8009648:	2301      	movne	r3, #1
 800964a:	2300      	moveq	r3, #0
 800964c:	42ab      	cmp	r3, r5
 800964e:	d101      	bne.n	8009654 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009650:	2000      	movs	r0, #0
 8009652:	e012      	b.n	800967a <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009654:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009658:	d0f3      	beq.n	8009642 <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800965a:	f7fc fe27 	bl	80062ac <HAL_GetTick>
 800965e:	1bc0      	subs	r0, r0, r7
 8009660:	4540      	cmp	r0, r8
 8009662:	d802      	bhi.n	800966a <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009664:	f1b8 0f00 	cmp.w	r8, #0
 8009668:	d1ea      	bne.n	8009640 <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800966a:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 800966c:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 800966e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009672:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009674:	f043 0301 	orr.w	r3, r3, #1
 8009678:	6463      	str	r3, [r4, #68]	@ 0x44
}
 800967a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009680 <HAL_QSPI_Init>:
{
 8009680:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009682:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009684:	f7fc fe12 	bl	80062ac <HAL_GetTick>
 8009688:	4605      	mov	r5, r0
  if(hqspi == NULL)
 800968a:	2c00      	cmp	r4, #0
 800968c:	d03f      	beq.n	800970e <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 800968e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009692:	b92b      	cbnz	r3, 80096a0 <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009694:	4620      	mov	r0, r4
 8009696:	f7f8 f809 	bl	80016ac <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 800969a:	f241 3388 	movw	r3, #5000	@ 0x1388
 800969e:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80096a0:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80096a2:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80096a4:	68a3      	ldr	r3, [r4, #8]
 80096a6:	680a      	ldr	r2, [r1, #0]
 80096a8:	3b01      	subs	r3, #1
 80096aa:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 80096ae:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80096b2:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 80096b4:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80096b6:	2200      	movs	r2, #0
 80096b8:	9300      	str	r3, [sp, #0]
 80096ba:	2120      	movs	r1, #32
 80096bc:	462b      	mov	r3, r5
 80096be:	f7ff ffb7 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 80096c2:	bb10      	cbnz	r0, 800970a <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 80096c4:	6822      	ldr	r2, [r4, #0]
 80096c6:	69e5      	ldr	r5, [r4, #28]
 80096c8:	68e3      	ldr	r3, [r4, #12]
 80096ca:	6811      	ldr	r1, [r2, #0]
 80096cc:	432b      	orrs	r3, r5
 80096ce:	6a25      	ldr	r5, [r4, #32]
 80096d0:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80096d4:	432b      	orrs	r3, r5
 80096d6:	6865      	ldr	r5, [r4, #4]
 80096d8:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 80096dc:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 80096e0:	430b      	orrs	r3, r1
 80096e2:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80096e4:	6855      	ldr	r5, [r2, #4]
 80096e6:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 80096ea:	430b      	orrs	r3, r1
 80096ec:	6921      	ldr	r1, [r4, #16]
 80096ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80096f2:	4908      	ldr	r1, [pc, #32]	@ (8009714 <HAL_QSPI_Init+0x94>)
 80096f4:	4029      	ands	r1, r5
 80096f6:	430b      	orrs	r3, r1
 80096f8:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 80096fa:	6813      	ldr	r3, [r2, #0]
 80096fc:	f043 0301 	orr.w	r3, r3, #1
 8009700:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009702:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009704:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009706:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 800970a:	b003      	add	sp, #12
 800970c:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 800970e:	2001      	movs	r0, #1
 8009710:	e7fb      	b.n	800970a <HAL_QSPI_Init+0x8a>
 8009712:	bf00      	nop
 8009714:	ffe0f8fe 	.word	0xffe0f8fe

08009718 <HAL_QSPI_Command>:
{
 8009718:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 800971c:	4604      	mov	r4, r0
 800971e:	468a      	mov	sl, r1
 8009720:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009722:	f7fc fdc3 	bl	80062ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009726:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800972a:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 800972c:	2b01      	cmp	r3, #1
 800972e:	d036      	beq.n	800979e <HAL_QSPI_Command+0x86>
 8009730:	2301      	movs	r3, #1
 8009732:	2602      	movs	r6, #2
 8009734:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009738:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800973c:	2b01      	cmp	r3, #1
 800973e:	fa5f f983 	uxtb.w	r9, r3
 8009742:	d128      	bne.n	8009796 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009744:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009746:	4603      	mov	r3, r0
 8009748:	2120      	movs	r1, #32
 800974a:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800974c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 800974e:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009752:	f8cd 8000 	str.w	r8, [sp]
 8009756:	f7ff ff6b 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800975a:	4605      	mov	r5, r0
 800975c:	b9a0      	cbnz	r0, 8009788 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 800975e:	4602      	mov	r2, r0
 8009760:	4651      	mov	r1, sl
 8009762:	4620      	mov	r0, r4
 8009764:	f7ff fea8 	bl	80094b8 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009768:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 800976c:	b953      	cbnz	r3, 8009784 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 800976e:	463b      	mov	r3, r7
 8009770:	464a      	mov	r2, r9
 8009772:	4631      	mov	r1, r6
 8009774:	4620      	mov	r0, r4
 8009776:	f8cd 8000 	str.w	r8, [sp]
 800977a:	f7ff ff59 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 800977e:	b960      	cbnz	r0, 800979a <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009780:	6823      	ldr	r3, [r4, #0]
 8009782:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009784:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009788:	2300      	movs	r3, #0
 800978a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800978e:	4628      	mov	r0, r5
 8009790:	b002      	add	sp, #8
 8009792:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009796:	4635      	mov	r5, r6
 8009798:	e7f6      	b.n	8009788 <HAL_QSPI_Command+0x70>
 800979a:	4605      	mov	r5, r0
 800979c:	e7f4      	b.n	8009788 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 800979e:	2502      	movs	r5, #2
 80097a0:	e7f5      	b.n	800978e <HAL_QSPI_Command+0x76>

080097a2 <HAL_QSPI_Transmit>:
{
 80097a2:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 80097a6:	4604      	mov	r4, r0
 80097a8:	4688      	mov	r8, r1
 80097aa:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 80097ac:	f7fc fd7e 	bl	80062ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80097b0:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80097b4:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 80097b6:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 80097b8:	2b01      	cmp	r3, #1
 80097ba:	d04c      	beq.n	8009856 <HAL_QSPI_Transmit+0xb4>
 80097bc:	2301      	movs	r3, #1
 80097be:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80097c2:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 80097c6:	2b01      	cmp	r3, #1
 80097c8:	b2d8      	uxtb	r0, r3
 80097ca:	d142      	bne.n	8009852 <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80097cc:	2300      	movs	r3, #0
 80097ce:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 80097d0:	f1b8 0f00 	cmp.w	r8, #0
 80097d4:	d038      	beq.n	8009848 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80097d6:	2312      	movs	r3, #18
 80097d8:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80097dc:	692b      	ldr	r3, [r5, #16]
 80097de:	3301      	adds	r3, #1
 80097e0:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80097e2:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 80097e4:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80097e8:	3301      	adds	r3, #1
 80097ea:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80097ec:	696b      	ldr	r3, [r5, #20]
 80097ee:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80097f2:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 80097f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 80097f6:	b99b      	cbnz	r3, 8009820 <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80097f8:	4633      	mov	r3, r6
 80097fa:	2201      	movs	r2, #1
 80097fc:	2102      	movs	r1, #2
 80097fe:	4620      	mov	r0, r4
 8009800:	9700      	str	r7, [sp, #0]
 8009802:	f7ff ff15 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009806:	b910      	cbnz	r0, 800980e <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009808:	6823      	ldr	r3, [r4, #0]
 800980a:	2202      	movs	r2, #2
 800980c:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 800980e:	2301      	movs	r3, #1
 8009810:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009814:	2300      	movs	r3, #0
 8009816:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 800981a:	b002      	add	sp, #8
 800981c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009820:	4633      	mov	r3, r6
 8009822:	2201      	movs	r2, #1
 8009824:	2104      	movs	r1, #4
 8009826:	4620      	mov	r0, r4
 8009828:	9700      	str	r7, [sp, #0]
 800982a:	f7ff ff01 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 800982e:	2800      	cmp	r0, #0
 8009830:	d1ed      	bne.n	800980e <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009832:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009834:	781b      	ldrb	r3, [r3, #0]
 8009836:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 800983a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800983c:	3301      	adds	r3, #1
 800983e:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009840:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009842:	3b01      	subs	r3, #1
 8009844:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009846:	e7d5      	b.n	80097f4 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009848:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800984a:	f043 0308 	orr.w	r3, r3, #8
 800984e:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009850:	e7e0      	b.n	8009814 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8009852:	2002      	movs	r0, #2
 8009854:	e7de      	b.n	8009814 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009856:	2002      	movs	r0, #2
 8009858:	e7df      	b.n	800981a <HAL_QSPI_Transmit+0x78>

0800985a <HAL_QSPI_Receive>:
{
 800985a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800985e:	4604      	mov	r4, r0
 8009860:	4617      	mov	r7, r2
 8009862:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009864:	f7fc fd22 	bl	80062ac <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009868:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 800986a:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 800986c:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 800986e:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009872:	2b01      	cmp	r3, #1
 8009874:	d04f      	beq.n	8009916 <HAL_QSPI_Receive+0xbc>
 8009876:	2301      	movs	r3, #1
 8009878:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800987c:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009880:	2b01      	cmp	r3, #1
 8009882:	b2d8      	uxtb	r0, r3
 8009884:	d145      	bne.n	8009912 <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009886:	2300      	movs	r3, #0
 8009888:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 800988a:	f1b8 0f00 	cmp.w	r8, #0
 800988e:	d03b      	beq.n	8009908 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009890:	2322      	movs	r3, #34	@ 0x22
 8009892:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009896:	692b      	ldr	r3, [r5, #16]
 8009898:	3301      	adds	r3, #1
 800989a:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 800989c:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 800989e:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80098a2:	3301      	adds	r3, #1
 80098a4:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 80098a6:	6969      	ldr	r1, [r5, #20]
 80098a8:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 80098ac:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 80098b0:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 80098b2:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 80098b4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80098b6:	b99b      	cbnz	r3, 80098e0 <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 80098b8:	4633      	mov	r3, r6
 80098ba:	2201      	movs	r2, #1
 80098bc:	2102      	movs	r1, #2
 80098be:	4620      	mov	r0, r4
 80098c0:	9700      	str	r7, [sp, #0]
 80098c2:	f7ff feb5 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 80098c6:	b910      	cbnz	r0, 80098ce <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 80098c8:	6823      	ldr	r3, [r4, #0]
 80098ca:	2202      	movs	r2, #2
 80098cc:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 80098ce:	2301      	movs	r3, #1
 80098d0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80098d4:	2300      	movs	r3, #0
 80098d6:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80098da:	b002      	add	sp, #8
 80098dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 80098e0:	4633      	mov	r3, r6
 80098e2:	2201      	movs	r2, #1
 80098e4:	2106      	movs	r1, #6
 80098e6:	4620      	mov	r0, r4
 80098e8:	9700      	str	r7, [sp, #0]
 80098ea:	f7ff fea1 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 80098ee:	2800      	cmp	r0, #0
 80098f0:	d1ed      	bne.n	80098ce <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 80098f2:	f895 2020 	ldrb.w	r2, [r5, #32]
 80098f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098f8:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 80098fa:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80098fc:	3301      	adds	r3, #1
 80098fe:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009900:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009902:	3b01      	subs	r3, #1
 8009904:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009906:	e7d5      	b.n	80098b4 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009908:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800990a:	f043 0308 	orr.w	r3, r3, #8
 800990e:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009910:	e7e0      	b.n	80098d4 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009912:	2002      	movs	r0, #2
 8009914:	e7de      	b.n	80098d4 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009916:	2002      	movs	r0, #2
 8009918:	e7df      	b.n	80098da <HAL_QSPI_Receive+0x80>

0800991a <HAL_QSPI_AutoPolling>:
{
 800991a:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800991e:	4604      	mov	r4, r0
 8009920:	461f      	mov	r7, r3
 8009922:	4689      	mov	r9, r1
 8009924:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009926:	f7fc fcc1 	bl	80062ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 800992a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 800992e:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009930:	2b01      	cmp	r3, #1
 8009932:	d041      	beq.n	80099b8 <HAL_QSPI_AutoPolling+0x9e>
 8009934:	2301      	movs	r3, #1
 8009936:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 800993a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 800993e:	2b01      	cmp	r3, #1
 8009940:	fa5f f883 	uxtb.w	r8, r3
 8009944:	d136      	bne.n	80099b4 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009946:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009948:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 800994a:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 800994c:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 800994e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009952:	4603      	mov	r3, r0
 8009954:	9700      	str	r7, [sp, #0]
 8009956:	4620      	mov	r0, r4
 8009958:	f7ff fe6a 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 800995c:	bb20      	cbnz	r0, 80099a8 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 800995e:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009960:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009962:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009964:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009966:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009968:	686b      	ldr	r3, [r5, #4]
 800996a:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 800996c:	68ab      	ldr	r3, [r5, #8]
 800996e:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009970:	6813      	ldr	r3, [r2, #0]
 8009972:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009976:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009978:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 800997a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800997e:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009980:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8009984:	68eb      	ldr	r3, [r5, #12]
 8009986:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 800998a:	f7ff fd95 	bl	80094b8 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 800998e:	4633      	mov	r3, r6
 8009990:	4642      	mov	r2, r8
 8009992:	2108      	movs	r1, #8
 8009994:	4620      	mov	r0, r4
 8009996:	9700      	str	r7, [sp, #0]
 8009998:	f7ff fe4a 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 800999c:	b920      	cbnz	r0, 80099a8 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 800999e:	6823      	ldr	r3, [r4, #0]
 80099a0:	2208      	movs	r2, #8
 80099a2:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 80099a4:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 80099a8:	2300      	movs	r3, #0
 80099aa:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 80099ae:	b003      	add	sp, #12
 80099b0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 80099b4:	2002      	movs	r0, #2
 80099b6:	e7f7      	b.n	80099a8 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 80099b8:	2002      	movs	r0, #2
 80099ba:	e7f8      	b.n	80099ae <HAL_QSPI_AutoPolling+0x94>

080099bc <HAL_QSPI_MemoryMapped>:
{
 80099bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80099be:	4604      	mov	r4, r0
 80099c0:	4616      	mov	r6, r2
 80099c2:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 80099c4:	f7fc fc72 	bl	80062ac <HAL_GetTick>
  __HAL_LOCK(hqspi);
 80099c8:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 80099cc:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 80099ce:	2a01      	cmp	r2, #1
 80099d0:	d033      	beq.n	8009a3a <HAL_QSPI_MemoryMapped+0x7e>
 80099d2:	2201      	movs	r2, #1
 80099d4:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 80099d8:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 80099dc:	2a01      	cmp	r2, #1
 80099de:	d12a      	bne.n	8009a36 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80099e0:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80099e2:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80099e4:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80099e6:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 80099e8:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 80099ec:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80099ee:	9100      	str	r1, [sp, #0]
 80099f0:	2120      	movs	r1, #32
 80099f2:	f7ff fe1d 	bl	8009630 <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 80099f6:	4605      	mov	r5, r0
 80099f8:	b9b8      	cbnz	r0, 8009a2a <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 80099fa:	6823      	ldr	r3, [r4, #0]
 80099fc:	6872      	ldr	r2, [r6, #4]
 80099fe:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009a00:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009a02:	f020 0008 	bic.w	r0, r0, #8
 8009a06:	ea40 0002 	orr.w	r0, r0, r2
 8009a0a:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009a0c:	d107      	bne.n	8009a1e <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009a0e:	6832      	ldr	r2, [r6, #0]
 8009a10:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009a12:	2210      	movs	r2, #16
 8009a14:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009a16:	681a      	ldr	r2, [r3, #0]
 8009a18:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009a1c:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009a1e:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8009a22:	4639      	mov	r1, r7
 8009a24:	4620      	mov	r0, r4
 8009a26:	f7ff fd47 	bl	80094b8 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009a2a:	2300      	movs	r3, #0
 8009a2c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009a30:	4628      	mov	r0, r5
 8009a32:	b003      	add	sp, #12
 8009a34:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009a36:	2502      	movs	r5, #2
 8009a38:	e7f7      	b.n	8009a2a <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009a3a:	2502      	movs	r5, #2
 8009a3c:	e7f8      	b.n	8009a30 <HAL_QSPI_MemoryMapped+0x74>
	...

08009a40 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009a40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009a42:	4604      	mov	r4, r0
 8009a44:	2800      	cmp	r0, #0
 8009a46:	d074      	beq.n	8009b32 <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009a48:	6803      	ldr	r3, [r0, #0]
 8009a4a:	07d8      	lsls	r0, r3, #31
 8009a4c:	d45e      	bmi.n	8009b0c <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009a4e:	6823      	ldr	r3, [r4, #0]
 8009a50:	0799      	lsls	r1, r3, #30
 8009a52:	f100 80ad 	bmi.w	8009bb0 <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009a56:	6823      	ldr	r3, [r4, #0]
 8009a58:	06da      	lsls	r2, r3, #27
 8009a5a:	d527      	bpl.n	8009aac <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a5c:	4a9c      	ldr	r2, [pc, #624]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009a5e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009a60:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009a62:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009a66:	2b08      	cmp	r3, #8
 8009a68:	d007      	beq.n	8009a7a <HAL_RCC_OscConfig+0x3a>
 8009a6a:	2b18      	cmp	r3, #24
 8009a6c:	f040 8103 	bne.w	8009c76 <HAL_RCC_OscConfig+0x236>
 8009a70:	f001 0303 	and.w	r3, r1, #3
 8009a74:	2b01      	cmp	r3, #1
 8009a76:	f040 80fe 	bne.w	8009c76 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009a7a:	6813      	ldr	r3, [r2, #0]
 8009a7c:	05db      	lsls	r3, r3, #23
 8009a7e:	d502      	bpl.n	8009a86 <HAL_RCC_OscConfig+0x46>
 8009a80:	69e3      	ldr	r3, [r4, #28]
 8009a82:	2b80      	cmp	r3, #128	@ 0x80
 8009a84:	d155      	bne.n	8009b32 <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009a86:	f7fc fc29 	bl	80062dc <HAL_GetREVID>
 8009a8a:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009a8e:	6a21      	ldr	r1, [r4, #32]
 8009a90:	4298      	cmp	r0, r3
 8009a92:	4b8f      	ldr	r3, [pc, #572]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009a94:	f200 80e8 	bhi.w	8009c68 <HAL_RCC_OscConfig+0x228>
 8009a98:	685a      	ldr	r2, [r3, #4]
 8009a9a:	2920      	cmp	r1, #32
 8009a9c:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009aa0:	bf0c      	ite	eq
 8009aa2:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8009aa6:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009aaa:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009aac:	6823      	ldr	r3, [r4, #0]
 8009aae:	0719      	lsls	r1, r3, #28
 8009ab0:	f100 8123 	bmi.w	8009cfa <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009ab4:	6823      	ldr	r3, [r4, #0]
 8009ab6:	069a      	lsls	r2, r3, #26
 8009ab8:	f100 8144 	bmi.w	8009d44 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009abc:	6823      	ldr	r3, [r4, #0]
 8009abe:	075d      	lsls	r5, r3, #29
 8009ac0:	d51e      	bpl.n	8009b00 <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009ac2:	4d84      	ldr	r5, [pc, #528]	@ (8009cd4 <HAL_RCC_OscConfig+0x294>)
 8009ac4:	682b      	ldr	r3, [r5, #0]
 8009ac6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009aca:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009acc:	f7fc fbee 	bl	80062ac <HAL_GetTick>
 8009ad0:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009ad2:	682b      	ldr	r3, [r5, #0]
 8009ad4:	05da      	lsls	r2, r3, #23
 8009ad6:	f140 815a 	bpl.w	8009d8e <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ada:	68a3      	ldr	r3, [r4, #8]
 8009adc:	4d7c      	ldr	r5, [pc, #496]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009ade:	2b01      	cmp	r3, #1
 8009ae0:	f040 815c 	bne.w	8009d9c <HAL_RCC_OscConfig+0x35c>
 8009ae4:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009ae6:	f043 0301 	orr.w	r3, r3, #1
 8009aea:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009aec:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009af0:	f7fc fbdc 	bl	80062ac <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af4:	4e76      	ldr	r6, [pc, #472]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009af6:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009af8:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8009afa:	079b      	lsls	r3, r3, #30
 8009afc:	f140 8174 	bpl.w	8009de8 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009b00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009b02:	2900      	cmp	r1, #0
 8009b04:	f040 8177 	bne.w	8009df6 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009b08:	2000      	movs	r0, #0
 8009b0a:	e02b      	b.n	8009b64 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b0c:	4a70      	ldr	r2, [pc, #448]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009b0e:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009b10:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009b12:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009b16:	2b10      	cmp	r3, #16
 8009b18:	d005      	beq.n	8009b26 <HAL_RCC_OscConfig+0xe6>
 8009b1a:	2b18      	cmp	r3, #24
 8009b1c:	d10b      	bne.n	8009b36 <HAL_RCC_OscConfig+0xf6>
 8009b1e:	f001 0303 	and.w	r3, r1, #3
 8009b22:	2b02      	cmp	r3, #2
 8009b24:	d107      	bne.n	8009b36 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009b26:	6813      	ldr	r3, [r2, #0]
 8009b28:	039a      	lsls	r2, r3, #14
 8009b2a:	d590      	bpl.n	8009a4e <HAL_RCC_OscConfig+0xe>
 8009b2c:	6863      	ldr	r3, [r4, #4]
 8009b2e:	2b00      	cmp	r3, #0
 8009b30:	d18d      	bne.n	8009a4e <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009b32:	2001      	movs	r0, #1
 8009b34:	e016      	b.n	8009b64 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	4d65      	ldr	r5, [pc, #404]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009b3a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009b3e:	d112      	bne.n	8009b66 <HAL_RCC_OscConfig+0x126>
 8009b40:	682b      	ldr	r3, [r5, #0]
 8009b42:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009b46:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009b48:	f7fc fbb0 	bl	80062ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b4c:	4e60      	ldr	r6, [pc, #384]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009b4e:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009b50:	6833      	ldr	r3, [r6, #0]
 8009b52:	039b      	lsls	r3, r3, #14
 8009b54:	f53f af7b 	bmi.w	8009a4e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b58:	f7fc fba8 	bl	80062ac <HAL_GetTick>
 8009b5c:	1b40      	subs	r0, r0, r5
 8009b5e:	2864      	cmp	r0, #100	@ 0x64
 8009b60:	d9f6      	bls.n	8009b50 <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8009b62:	2003      	movs	r0, #3
}
 8009b64:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b66:	b9a3      	cbnz	r3, 8009b92 <HAL_RCC_OscConfig+0x152>
 8009b68:	682b      	ldr	r3, [r5, #0]
 8009b6a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009b6e:	602b      	str	r3, [r5, #0]
 8009b70:	682b      	ldr	r3, [r5, #0]
 8009b72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009b76:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009b78:	f7fc fb98 	bl	80062ac <HAL_GetTick>
 8009b7c:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009b7e:	682b      	ldr	r3, [r5, #0]
 8009b80:	039f      	lsls	r7, r3, #14
 8009b82:	f57f af64 	bpl.w	8009a4e <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009b86:	f7fc fb91 	bl	80062ac <HAL_GetTick>
 8009b8a:	1b80      	subs	r0, r0, r6
 8009b8c:	2864      	cmp	r0, #100	@ 0x64
 8009b8e:	d9f6      	bls.n	8009b7e <HAL_RCC_OscConfig+0x13e>
 8009b90:	e7e7      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009b92:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009b96:	682b      	ldr	r3, [r5, #0]
 8009b98:	d103      	bne.n	8009ba2 <HAL_RCC_OscConfig+0x162>
 8009b9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009b9e:	602b      	str	r3, [r5, #0]
 8009ba0:	e7ce      	b.n	8009b40 <HAL_RCC_OscConfig+0x100>
 8009ba2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009ba6:	602b      	str	r3, [r5, #0]
 8009ba8:	682b      	ldr	r3, [r5, #0]
 8009baa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009bae:	e7ca      	b.n	8009b46 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009bb0:	4947      	ldr	r1, [pc, #284]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009bb2:	68e2      	ldr	r2, [r4, #12]
 8009bb4:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009bb6:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009bb8:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009bbc:	d003      	beq.n	8009bc6 <HAL_RCC_OscConfig+0x186>
 8009bbe:	2b18      	cmp	r3, #24
 8009bc0:	d12a      	bne.n	8009c18 <HAL_RCC_OscConfig+0x1d8>
 8009bc2:	0780      	lsls	r0, r0, #30
 8009bc4:	d128      	bne.n	8009c18 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009bc6:	680b      	ldr	r3, [r1, #0]
 8009bc8:	075b      	lsls	r3, r3, #29
 8009bca:	d501      	bpl.n	8009bd0 <HAL_RCC_OscConfig+0x190>
 8009bcc:	2a00      	cmp	r2, #0
 8009bce:	d0b0      	beq.n	8009b32 <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009bd0:	4d3f      	ldr	r5, [pc, #252]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009bd2:	682b      	ldr	r3, [r5, #0]
 8009bd4:	f023 0319 	bic.w	r3, r3, #25
 8009bd8:	4313      	orrs	r3, r2
 8009bda:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009bdc:	f7fc fb66 	bl	80062ac <HAL_GetTick>
 8009be0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009be2:	682b      	ldr	r3, [r5, #0]
 8009be4:	075f      	lsls	r7, r3, #29
 8009be6:	d511      	bpl.n	8009c0c <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009be8:	f7fc fb78 	bl	80062dc <HAL_GetREVID>
 8009bec:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009bf0:	6922      	ldr	r2, [r4, #16]
 8009bf2:	4298      	cmp	r0, r3
 8009bf4:	686b      	ldr	r3, [r5, #4]
 8009bf6:	d822      	bhi.n	8009c3e <HAL_RCC_OscConfig+0x1fe>
 8009bf8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009bfc:	2a40      	cmp	r2, #64	@ 0x40
 8009bfe:	bf0c      	ite	eq
 8009c00:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8009c04:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009c08:	606b      	str	r3, [r5, #4]
 8009c0a:	e724      	b.n	8009a56 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c0c:	f7fc fb4e 	bl	80062ac <HAL_GetTick>
 8009c10:	1b80      	subs	r0, r0, r6
 8009c12:	2802      	cmp	r0, #2
 8009c14:	d9e5      	bls.n	8009be2 <HAL_RCC_OscConfig+0x1a2>
 8009c16:	e7a4      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c18:	4d2d      	ldr	r5, [pc, #180]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c1a:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009c1c:	b1a2      	cbz	r2, 8009c48 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009c1e:	f023 0319 	bic.w	r3, r3, #25
 8009c22:	4313      	orrs	r3, r2
 8009c24:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009c26:	f7fc fb41 	bl	80062ac <HAL_GetTick>
 8009c2a:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009c2c:	682b      	ldr	r3, [r5, #0]
 8009c2e:	0758      	lsls	r0, r3, #29
 8009c30:	d4da      	bmi.n	8009be8 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c32:	f7fc fb3b 	bl	80062ac <HAL_GetTick>
 8009c36:	1b80      	subs	r0, r0, r6
 8009c38:	2802      	cmp	r0, #2
 8009c3a:	d9f7      	bls.n	8009c2c <HAL_RCC_OscConfig+0x1ec>
 8009c3c:	e791      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009c3e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8009c42:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009c46:	e7df      	b.n	8009c08 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 8009c48:	f023 0301 	bic.w	r3, r3, #1
 8009c4c:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009c4e:	f7fc fb2d 	bl	80062ac <HAL_GetTick>
 8009c52:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8009c54:	682b      	ldr	r3, [r5, #0]
 8009c56:	0759      	lsls	r1, r3, #29
 8009c58:	f57f aefd 	bpl.w	8009a56 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009c5c:	f7fc fb26 	bl	80062ac <HAL_GetTick>
 8009c60:	1b80      	subs	r0, r0, r6
 8009c62:	2802      	cmp	r0, #2
 8009c64:	d9f6      	bls.n	8009c54 <HAL_RCC_OscConfig+0x214>
 8009c66:	e77c      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c68:	68da      	ldr	r2, [r3, #12]
 8009c6a:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 8009c6e:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8009c72:	60da      	str	r2, [r3, #12]
 8009c74:	e71a      	b.n	8009aac <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8009c76:	69e3      	ldr	r3, [r4, #28]
 8009c78:	4d15      	ldr	r5, [pc, #84]	@ (8009cd0 <HAL_RCC_OscConfig+0x290>)
 8009c7a:	b36b      	cbz	r3, 8009cd8 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 8009c7c:	682b      	ldr	r3, [r5, #0]
 8009c7e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009c82:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009c84:	f7fc fb12 	bl	80062ac <HAL_GetTick>
 8009c88:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8009c8a:	682b      	ldr	r3, [r5, #0]
 8009c8c:	05df      	lsls	r7, r3, #23
 8009c8e:	d511      	bpl.n	8009cb4 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009c90:	f7fc fb24 	bl	80062dc <HAL_GetREVID>
 8009c94:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009c98:	6a22      	ldr	r2, [r4, #32]
 8009c9a:	4298      	cmp	r0, r3
 8009c9c:	d810      	bhi.n	8009cc0 <HAL_RCC_OscConfig+0x280>
 8009c9e:	686b      	ldr	r3, [r5, #4]
 8009ca0:	2a20      	cmp	r2, #32
 8009ca2:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 8009ca6:	bf0c      	ite	eq
 8009ca8:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 8009cac:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 8009cb0:	606b      	str	r3, [r5, #4]
 8009cb2:	e6fb      	b.n	8009aac <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cb4:	f7fc fafa 	bl	80062ac <HAL_GetTick>
 8009cb8:	1b80      	subs	r0, r0, r6
 8009cba:	2802      	cmp	r0, #2
 8009cbc:	d9e5      	bls.n	8009c8a <HAL_RCC_OscConfig+0x24a>
 8009cbe:	e750      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009cc0:	68eb      	ldr	r3, [r5, #12]
 8009cc2:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 8009cc6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 8009cca:	60eb      	str	r3, [r5, #12]
 8009ccc:	e6ee      	b.n	8009aac <HAL_RCC_OscConfig+0x6c>
 8009cce:	bf00      	nop
 8009cd0:	58024400 	.word	0x58024400
 8009cd4:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 8009cd8:	682b      	ldr	r3, [r5, #0]
 8009cda:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8009cde:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009ce0:	f7fc fae4 	bl	80062ac <HAL_GetTick>
 8009ce4:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8009ce6:	682b      	ldr	r3, [r5, #0]
 8009ce8:	05d8      	lsls	r0, r3, #23
 8009cea:	f57f aedf 	bpl.w	8009aac <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8009cee:	f7fc fadd 	bl	80062ac <HAL_GetTick>
 8009cf2:	1b80      	subs	r0, r0, r6
 8009cf4:	2802      	cmp	r0, #2
 8009cf6:	d9f6      	bls.n	8009ce6 <HAL_RCC_OscConfig+0x2a6>
 8009cf8:	e733      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8009cfa:	6963      	ldr	r3, [r4, #20]
 8009cfc:	4da5      	ldr	r5, [pc, #660]	@ (8009f94 <HAL_RCC_OscConfig+0x554>)
 8009cfe:	b183      	cbz	r3, 8009d22 <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 8009d00:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009d02:	f043 0301 	orr.w	r3, r3, #1
 8009d06:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009d08:	f7fc fad0 	bl	80062ac <HAL_GetTick>
 8009d0c:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8009d0e:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009d10:	079b      	lsls	r3, r3, #30
 8009d12:	f53f aecf 	bmi.w	8009ab4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d16:	f7fc fac9 	bl	80062ac <HAL_GetTick>
 8009d1a:	1b80      	subs	r0, r0, r6
 8009d1c:	2802      	cmp	r0, #2
 8009d1e:	d9f6      	bls.n	8009d0e <HAL_RCC_OscConfig+0x2ce>
 8009d20:	e71f      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 8009d22:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009d24:	f023 0301 	bic.w	r3, r3, #1
 8009d28:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 8009d2a:	f7fc fabf 	bl	80062ac <HAL_GetTick>
 8009d2e:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8009d30:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 8009d32:	079f      	lsls	r7, r3, #30
 8009d34:	f57f aebe 	bpl.w	8009ab4 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8009d38:	f7fc fab8 	bl	80062ac <HAL_GetTick>
 8009d3c:	1b80      	subs	r0, r0, r6
 8009d3e:	2802      	cmp	r0, #2
 8009d40:	d9f6      	bls.n	8009d30 <HAL_RCC_OscConfig+0x2f0>
 8009d42:	e70e      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8009d44:	69a3      	ldr	r3, [r4, #24]
 8009d46:	4d93      	ldr	r5, [pc, #588]	@ (8009f94 <HAL_RCC_OscConfig+0x554>)
 8009d48:	b183      	cbz	r3, 8009d6c <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 8009d4a:	682b      	ldr	r3, [r5, #0]
 8009d4c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8009d50:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009d52:	f7fc faab 	bl	80062ac <HAL_GetTick>
 8009d56:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8009d58:	682b      	ldr	r3, [r5, #0]
 8009d5a:	0498      	lsls	r0, r3, #18
 8009d5c:	f53f aeae 	bmi.w	8009abc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d60:	f7fc faa4 	bl	80062ac <HAL_GetTick>
 8009d64:	1b80      	subs	r0, r0, r6
 8009d66:	2802      	cmp	r0, #2
 8009d68:	d9f6      	bls.n	8009d58 <HAL_RCC_OscConfig+0x318>
 8009d6a:	e6fa      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 8009d6c:	682b      	ldr	r3, [r5, #0]
 8009d6e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8009d72:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 8009d74:	f7fc fa9a 	bl	80062ac <HAL_GetTick>
 8009d78:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8009d7a:	682b      	ldr	r3, [r5, #0]
 8009d7c:	0499      	lsls	r1, r3, #18
 8009d7e:	f57f ae9d 	bpl.w	8009abc <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8009d82:	f7fc fa93 	bl	80062ac <HAL_GetTick>
 8009d86:	1b80      	subs	r0, r0, r6
 8009d88:	2802      	cmp	r0, #2
 8009d8a:	d9f6      	bls.n	8009d7a <HAL_RCC_OscConfig+0x33a>
 8009d8c:	e6e9      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009d8e:	f7fc fa8d 	bl	80062ac <HAL_GetTick>
 8009d92:	1b80      	subs	r0, r0, r6
 8009d94:	2864      	cmp	r0, #100	@ 0x64
 8009d96:	f67f ae9c 	bls.w	8009ad2 <HAL_RCC_OscConfig+0x92>
 8009d9a:	e6e2      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009d9c:	b9b3      	cbnz	r3, 8009dcc <HAL_RCC_OscConfig+0x38c>
 8009d9e:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009da0:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009da4:	f023 0301 	bic.w	r3, r3, #1
 8009da8:	672b      	str	r3, [r5, #112]	@ 0x70
 8009daa:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009dac:	f023 0304 	bic.w	r3, r3, #4
 8009db0:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 8009db2:	f7fc fa7b 	bl	80062ac <HAL_GetTick>
 8009db6:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8009db8:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009dba:	0798      	lsls	r0, r3, #30
 8009dbc:	f57f aea0 	bpl.w	8009b00 <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009dc0:	f7fc fa74 	bl	80062ac <HAL_GetTick>
 8009dc4:	1b80      	subs	r0, r0, r6
 8009dc6:	42b8      	cmp	r0, r7
 8009dc8:	d9f6      	bls.n	8009db8 <HAL_RCC_OscConfig+0x378>
 8009dca:	e6ca      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009dcc:	2b05      	cmp	r3, #5
 8009dce:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009dd0:	d103      	bne.n	8009dda <HAL_RCC_OscConfig+0x39a>
 8009dd2:	f043 0304 	orr.w	r3, r3, #4
 8009dd6:	672b      	str	r3, [r5, #112]	@ 0x70
 8009dd8:	e684      	b.n	8009ae4 <HAL_RCC_OscConfig+0xa4>
 8009dda:	f023 0301 	bic.w	r3, r3, #1
 8009dde:	672b      	str	r3, [r5, #112]	@ 0x70
 8009de0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009de2:	f023 0304 	bic.w	r3, r3, #4
 8009de6:	e680      	b.n	8009aea <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009de8:	f7fc fa60 	bl	80062ac <HAL_GetTick>
 8009dec:	1b40      	subs	r0, r0, r5
 8009dee:	42b8      	cmp	r0, r7
 8009df0:	f67f ae82 	bls.w	8009af8 <HAL_RCC_OscConfig+0xb8>
 8009df4:	e6b5      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8009df6:	4d67      	ldr	r5, [pc, #412]	@ (8009f94 <HAL_RCC_OscConfig+0x554>)
 8009df8:	692b      	ldr	r3, [r5, #16]
 8009dfa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8009dfe:	2b18      	cmp	r3, #24
 8009e00:	d07a      	beq.n	8009ef8 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 8009e02:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e04:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 8009e06:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8009e0a:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009e0c:	d167      	bne.n	8009ede <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 8009e0e:	f7fc fa4d 	bl	80062ac <HAL_GetTick>
 8009e12:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009e14:	682b      	ldr	r3, [r5, #0]
 8009e16:	0199      	lsls	r1, r3, #6
 8009e18:	d45b      	bmi.n	8009ed2 <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8009e1a:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 8009e1c:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8009e1e:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 8009e22:	f023 0303 	bic.w	r3, r3, #3
 8009e26:	4313      	orrs	r3, r2
 8009e28:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8009e2a:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 8009e2e:	62ab      	str	r3, [r5, #40]	@ 0x28
 8009e30:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009e32:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009e34:	3b01      	subs	r3, #1
 8009e36:	3a01      	subs	r2, #1
 8009e38:	025b      	lsls	r3, r3, #9
 8009e3a:	0412      	lsls	r2, r2, #16
 8009e3c:	b29b      	uxth	r3, r3
 8009e3e:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 8009e42:	4313      	orrs	r3, r2
 8009e44:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009e46:	3a01      	subs	r2, #1
 8009e48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009e4c:	4313      	orrs	r3, r2
 8009e4e:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009e50:	3a01      	subs	r2, #1
 8009e52:	0612      	lsls	r2, r2, #24
 8009e54:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 8009e5c:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009e5e:	f023 0301 	bic.w	r3, r3, #1
 8009e62:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009e64:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009e66:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009e68:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009e6c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009e70:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009e74:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8009e76:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009e78:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8009e7a:	f023 030c 	bic.w	r3, r3, #12
 8009e7e:	4313      	orrs	r3, r2
 8009e80:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8009e82:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009e84:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8009e86:	f023 0302 	bic.w	r3, r3, #2
 8009e8a:	4313      	orrs	r3, r2
 8009e8c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8009e8e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009e90:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009e94:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8009e96:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009e98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8009e9c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8009e9e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009ea0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009ea4:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 8009ea6:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009ea8:	f043 0301 	orr.w	r3, r3, #1
 8009eac:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 8009eae:	682b      	ldr	r3, [r5, #0]
 8009eb0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8009eb4:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009eb6:	f7fc f9f9 	bl	80062ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009eba:	4d36      	ldr	r5, [pc, #216]	@ (8009f94 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 8009ebc:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8009ebe:	682b      	ldr	r3, [r5, #0]
 8009ec0:	019a      	lsls	r2, r3, #6
 8009ec2:	f53f ae21 	bmi.w	8009b08 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ec6:	f7fc f9f1 	bl	80062ac <HAL_GetTick>
 8009eca:	1b00      	subs	r0, r0, r4
 8009ecc:	2802      	cmp	r0, #2
 8009ece:	d9f6      	bls.n	8009ebe <HAL_RCC_OscConfig+0x47e>
 8009ed0:	e647      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009ed2:	f7fc f9eb 	bl	80062ac <HAL_GetTick>
 8009ed6:	1b80      	subs	r0, r0, r6
 8009ed8:	2802      	cmp	r0, #2
 8009eda:	d99b      	bls.n	8009e14 <HAL_RCC_OscConfig+0x3d4>
 8009edc:	e641      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 8009ede:	f7fc f9e5 	bl	80062ac <HAL_GetTick>
 8009ee2:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8009ee4:	682b      	ldr	r3, [r5, #0]
 8009ee6:	019b      	lsls	r3, r3, #6
 8009ee8:	f57f ae0e 	bpl.w	8009b08 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009eec:	f7fc f9de 	bl	80062ac <HAL_GetTick>
 8009ef0:	1b00      	subs	r0, r0, r4
 8009ef2:	2802      	cmp	r0, #2
 8009ef4:	d9f6      	bls.n	8009ee4 <HAL_RCC_OscConfig+0x4a4>
 8009ef6:	e634      	b.n	8009b62 <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009ef8:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 8009efa:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 8009efc:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009efe:	f43f ae18 	beq.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f02:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009f06:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 8009f08:	4281      	cmp	r1, r0
 8009f0a:	f47f ae12 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f0e:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009f12:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8009f14:	428a      	cmp	r2, r1
 8009f16:	f47f ae0c 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f1a:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8009f1c:	f3c3 0108 	ubfx	r1, r3, #0, #9
 8009f20:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8009f22:	4291      	cmp	r1, r2
 8009f24:	f47f ae05 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f28:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8009f2a:	f3c3 2146 	ubfx	r1, r3, #9, #7
 8009f2e:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8009f30:	4291      	cmp	r1, r2
 8009f32:	f47f adfe 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f36:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 8009f38:	f3c3 4106 	ubfx	r1, r3, #16, #7
 8009f3c:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8009f3e:	4291      	cmp	r1, r2
 8009f40:	f47f adf7 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8009f44:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 8009f46:	f3c3 6306 	ubfx	r3, r3, #24, #7
 8009f4a:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8009f4c:	4293      	cmp	r3, r2
 8009f4e:	f47f adf0 	bne.w	8009b32 <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f52:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f54:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8009f56:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8009f5a:	429a      	cmp	r2, r3
 8009f5c:	f43f add4 	beq.w	8009b08 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 8009f60:	4d0c      	ldr	r5, [pc, #48]	@ (8009f94 <HAL_RCC_OscConfig+0x554>)
 8009f62:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009f64:	f023 0301 	bic.w	r3, r3, #1
 8009f68:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 8009f6a:	f7fc f99f 	bl	80062ac <HAL_GetTick>
 8009f6e:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8009f70:	f7fc f99c 	bl	80062ac <HAL_GetTick>
 8009f74:	42b0      	cmp	r0, r6
 8009f76:	d0fb      	beq.n	8009f70 <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8009f78:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 8009f7a:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 8009f7c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8009f80:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 8009f84:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 8009f88:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 8009f8a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 8009f8c:	f043 0301 	orr.w	r3, r3, #1
 8009f90:	62eb      	str	r3, [r5, #44]	@ 0x2c
 8009f92:	e5b9      	b.n	8009b08 <HAL_RCC_OscConfig+0xc8>
 8009f94:	58024400 	.word	0x58024400

08009f98 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 8009f98:	b570      	push	{r4, r5, r6, lr}
 8009f9a:	4c23      	ldr	r4, [pc, #140]	@ (800a028 <HAL_RCC_MCOConfig+0x90>)
 8009f9c:	b088      	sub	sp, #32
 8009f9e:	460e      	mov	r6, r1
 8009fa0:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 8009fa2:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 8009fa6:	b9f8      	cbnz	r0, 8009fe8 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 8009fa8:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fac:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009fb0:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 8009fb2:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009fb6:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8009fba:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 8009fbc:	f003 0301 	and.w	r3, r3, #1
 8009fc0:	9301      	str	r3, [sp, #4]
 8009fc2:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fc4:	2302      	movs	r3, #2
 8009fc6:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8009fca:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009fcc:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 8009fd0:	4816      	ldr	r0, [pc, #88]	@ (800a02c <HAL_RCC_MCOConfig+0x94>)
 8009fd2:	f7fd fa27 	bl	8007424 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 8009fd6:	6923      	ldr	r3, [r4, #16]
 8009fd8:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 8009fdc:	ea43 0106 	orr.w	r1, r3, r6
 8009fe0:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 8009fe2:	6121      	str	r1, [r4, #16]
  }
}
 8009fe4:	b008      	add	sp, #32
 8009fe6:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 8009fe8:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8009fec:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8009ff0:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 8009ff2:	480f      	ldr	r0, [pc, #60]	@ (800a030 <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 8009ff4:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8009ff8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8009ffc:	f003 0304 	and.w	r3, r3, #4
 800a000:	9302      	str	r3, [sp, #8]
 800a002:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a004:	2302      	movs	r3, #2
 800a006:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a00a:	2300      	movs	r3, #0
 800a00c:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a010:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a012:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a014:	f7fd fa06 	bl	8007424 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a018:	6923      	ldr	r3, [r4, #16]
 800a01a:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a01e:	ea43 0106 	orr.w	r1, r3, r6
 800a022:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a026:	e7dc      	b.n	8009fe2 <HAL_RCC_MCOConfig+0x4a>
 800a028:	58024400 	.word	0x58024400
 800a02c:	58020000 	.word	0x58020000
 800a030:	58020800 	.word	0x58020800

0800a034 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a034:	4b49      	ldr	r3, [pc, #292]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x128>)
 800a036:	691a      	ldr	r2, [r3, #16]
 800a038:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a03c:	2a10      	cmp	r2, #16
{
 800a03e:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a040:	f000 8088 	beq.w	800a154 <HAL_RCC_GetSysClockFreq+0x120>
 800a044:	2a18      	cmp	r2, #24
 800a046:	d00c      	beq.n	800a062 <HAL_RCC_GetSysClockFreq+0x2e>
 800a048:	2a00      	cmp	r2, #0
 800a04a:	f040 8085 	bne.w	800a158 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a04e:	681a      	ldr	r2, [r3, #0]
 800a050:	4843      	ldr	r0, [pc, #268]	@ (800a160 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a052:	f012 0f20 	tst.w	r2, #32
 800a056:	d003      	beq.n	800a060 <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a05e:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a060:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a062:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a064:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a066:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a068:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a06c:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a070:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a072:	d0f5      	beq.n	800a060 <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a074:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a078:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a07c:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a080:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a084:	4362      	muls	r2, r4
 800a086:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a08a:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a08c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a090:	ee06 2a90 	vmov	s13, r2
 800a094:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a098:	d04e      	beq.n	800a138 <HAL_RCC_GetSysClockFreq+0x104>
 800a09a:	2902      	cmp	r1, #2
 800a09c:	d03e      	beq.n	800a11c <HAL_RCC_GetSysClockFreq+0xe8>
 800a09e:	2900      	cmp	r1, #0
 800a0a0:	d14a      	bne.n	800a138 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a0a2:	681a      	ldr	r2, [r3, #0]
 800a0a4:	0692      	lsls	r2, r2, #26
 800a0a6:	d527      	bpl.n	800a0f8 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0a8:	6819      	ldr	r1, [r3, #0]
 800a0aa:	4a2d      	ldr	r2, [pc, #180]	@ (800a160 <HAL_RCC_GetSysClockFreq+0x12c>)
 800a0ac:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a0b2:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0b4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0b8:	ee07 2a90 	vmov	s15, r2
 800a0bc:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a0c0:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a0c4:	ee07 3a10 	vmov	s14, r3
 800a0c8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a0cc:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a0d0:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a0d4:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a0d8:	4b20      	ldr	r3, [pc, #128]	@ (800a15c <HAL_RCC_GetSysClockFreq+0x128>)
 800a0da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0dc:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a0e0:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a0e2:	ee07 3a10 	vmov	s14, r3
 800a0e6:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a0ea:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a0ee:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a0f2:	ee17 0a90 	vmov	r0, s15
 800a0f6:	e7b3      	b.n	800a060 <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a0f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a0fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a0fe:	ee07 3a90 	vmov	s15, r3
 800a102:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a106:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a10a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a10e:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a164 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a112:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a116:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a11a:	e7dd      	b.n	800a0d8 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a11c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a11e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a122:	ee07 3a90 	vmov	s15, r3
 800a126:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a12a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a12e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a132:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a168 <HAL_RCC_GetSysClockFreq+0x134>
 800a136:	e7ec      	b.n	800a112 <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a138:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a13a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a13e:	ee07 3a90 	vmov	s15, r3
 800a142:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a146:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a14a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a14e:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a16c <HAL_RCC_GetSysClockFreq+0x138>
 800a152:	e7de      	b.n	800a112 <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a154:	4806      	ldr	r0, [pc, #24]	@ (800a170 <HAL_RCC_GetSysClockFreq+0x13c>)
 800a156:	e783      	b.n	800a060 <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a158:	4806      	ldr	r0, [pc, #24]	@ (800a174 <HAL_RCC_GetSysClockFreq+0x140>)
 800a15a:	e781      	b.n	800a060 <HAL_RCC_GetSysClockFreq+0x2c>
 800a15c:	58024400 	.word	0x58024400
 800a160:	03d09000 	.word	0x03d09000
 800a164:	4c742400 	.word	0x4c742400
 800a168:	4bbebc20 	.word	0x4bbebc20
 800a16c:	4a742400 	.word	0x4a742400
 800a170:	017d7840 	.word	0x017d7840
 800a174:	003d0900 	.word	0x003d0900

0800a178 <HAL_RCC_ClockConfig>:
{
 800a178:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a17c:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a17e:	4604      	mov	r4, r0
 800a180:	b910      	cbnz	r0, 800a188 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a182:	2001      	movs	r0, #1
}
 800a184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a188:	4a88      	ldr	r2, [pc, #544]	@ (800a3ac <HAL_RCC_ClockConfig+0x234>)
 800a18a:	6813      	ldr	r3, [r2, #0]
 800a18c:	f003 030f 	and.w	r3, r3, #15
 800a190:	428b      	cmp	r3, r1
 800a192:	f0c0 8093 	bcc.w	800a2bc <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a196:	6823      	ldr	r3, [r4, #0]
 800a198:	075f      	lsls	r7, r3, #29
 800a19a:	f100 809b 	bmi.w	800a2d4 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a19e:	071e      	lsls	r6, r3, #28
 800a1a0:	d50b      	bpl.n	800a1ba <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a1a2:	4983      	ldr	r1, [pc, #524]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a1a4:	6960      	ldr	r0, [r4, #20]
 800a1a6:	69ca      	ldr	r2, [r1, #28]
 800a1a8:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a1ac:	4290      	cmp	r0, r2
 800a1ae:	d904      	bls.n	800a1ba <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a1b0:	69ca      	ldr	r2, [r1, #28]
 800a1b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a1b6:	4302      	orrs	r2, r0
 800a1b8:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a1ba:	06d8      	lsls	r0, r3, #27
 800a1bc:	d50b      	bpl.n	800a1d6 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a1be:	497c      	ldr	r1, [pc, #496]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a1c0:	69a0      	ldr	r0, [r4, #24]
 800a1c2:	69ca      	ldr	r2, [r1, #28]
 800a1c4:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a1c8:	4290      	cmp	r0, r2
 800a1ca:	d904      	bls.n	800a1d6 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a1cc:	69ca      	ldr	r2, [r1, #28]
 800a1ce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a1d2:	4302      	orrs	r2, r0
 800a1d4:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a1d6:	0699      	lsls	r1, r3, #26
 800a1d8:	d50b      	bpl.n	800a1f2 <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a1da:	4975      	ldr	r1, [pc, #468]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a1dc:	69e0      	ldr	r0, [r4, #28]
 800a1de:	6a0a      	ldr	r2, [r1, #32]
 800a1e0:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a1e4:	4290      	cmp	r0, r2
 800a1e6:	d904      	bls.n	800a1f2 <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a1e8:	6a0a      	ldr	r2, [r1, #32]
 800a1ea:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a1ee:	4302      	orrs	r2, r0
 800a1f0:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a1f2:	079a      	lsls	r2, r3, #30
 800a1f4:	d50b      	bpl.n	800a20e <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a1f6:	496e      	ldr	r1, [pc, #440]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a1f8:	68e0      	ldr	r0, [r4, #12]
 800a1fa:	698a      	ldr	r2, [r1, #24]
 800a1fc:	f002 020f 	and.w	r2, r2, #15
 800a200:	4290      	cmp	r0, r2
 800a202:	d904      	bls.n	800a20e <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a204:	698a      	ldr	r2, [r1, #24]
 800a206:	f022 020f 	bic.w	r2, r2, #15
 800a20a:	4302      	orrs	r2, r0
 800a20c:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a20e:	07df      	lsls	r7, r3, #31
 800a210:	d46e      	bmi.n	800a2f0 <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a212:	6823      	ldr	r3, [r4, #0]
 800a214:	079e      	lsls	r6, r3, #30
 800a216:	f100 80a1 	bmi.w	800a35c <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a21a:	4964      	ldr	r1, [pc, #400]	@ (800a3ac <HAL_RCC_ClockConfig+0x234>)
 800a21c:	680a      	ldr	r2, [r1, #0]
 800a21e:	f002 020f 	and.w	r2, r2, #15
 800a222:	42aa      	cmp	r2, r5
 800a224:	f200 80a8 	bhi.w	800a378 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a228:	0758      	lsls	r0, r3, #29
 800a22a:	f100 80b1 	bmi.w	800a390 <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a22e:	0719      	lsls	r1, r3, #28
 800a230:	d50b      	bpl.n	800a24a <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a232:	495f      	ldr	r1, [pc, #380]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a234:	6960      	ldr	r0, [r4, #20]
 800a236:	69ca      	ldr	r2, [r1, #28]
 800a238:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a23c:	4290      	cmp	r0, r2
 800a23e:	d204      	bcs.n	800a24a <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a240:	69ca      	ldr	r2, [r1, #28]
 800a242:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a246:	4302      	orrs	r2, r0
 800a248:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a24a:	06da      	lsls	r2, r3, #27
 800a24c:	d50b      	bpl.n	800a266 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a24e:	4958      	ldr	r1, [pc, #352]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a250:	69a0      	ldr	r0, [r4, #24]
 800a252:	69ca      	ldr	r2, [r1, #28]
 800a254:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a258:	4290      	cmp	r0, r2
 800a25a:	d204      	bcs.n	800a266 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a25c:	69ca      	ldr	r2, [r1, #28]
 800a25e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a262:	4302      	orrs	r2, r0
 800a264:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a266:	069b      	lsls	r3, r3, #26
 800a268:	d50b      	bpl.n	800a282 <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a26a:	4a51      	ldr	r2, [pc, #324]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a26c:	69e1      	ldr	r1, [r4, #28]
 800a26e:	6a13      	ldr	r3, [r2, #32]
 800a270:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a274:	4299      	cmp	r1, r3
 800a276:	d204      	bcs.n	800a282 <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a278:	6a13      	ldr	r3, [r2, #32]
 800a27a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a27e:	430b      	orrs	r3, r1
 800a280:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a282:	f7ff fed7 	bl	800a034 <HAL_RCC_GetSysClockFreq>
 800a286:	494a      	ldr	r1, [pc, #296]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a288:	4a4a      	ldr	r2, [pc, #296]	@ (800a3b4 <HAL_RCC_ClockConfig+0x23c>)
 800a28a:	698b      	ldr	r3, [r1, #24]
 800a28c:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a290:	5cd3      	ldrb	r3, [r2, r3]
 800a292:	f003 031f 	and.w	r3, r3, #31
 800a296:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a298:	698b      	ldr	r3, [r1, #24]
 800a29a:	f003 030f 	and.w	r3, r3, #15
 800a29e:	5cd3      	ldrb	r3, [r2, r3]
 800a2a0:	4a45      	ldr	r2, [pc, #276]	@ (800a3b8 <HAL_RCC_ClockConfig+0x240>)
 800a2a2:	f003 031f 	and.w	r3, r3, #31
 800a2a6:	fa20 f303 	lsr.w	r3, r0, r3
 800a2aa:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a2ac:	4b43      	ldr	r3, [pc, #268]	@ (800a3bc <HAL_RCC_ClockConfig+0x244>)
 800a2ae:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a2b0:	4b43      	ldr	r3, [pc, #268]	@ (800a3c0 <HAL_RCC_ClockConfig+0x248>)
}
 800a2b2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a2b6:	6818      	ldr	r0, [r3, #0]
 800a2b8:	f7f7 bbf2 	b.w	8001aa0 <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a2bc:	6813      	ldr	r3, [r2, #0]
 800a2be:	f023 030f 	bic.w	r3, r3, #15
 800a2c2:	430b      	orrs	r3, r1
 800a2c4:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a2c6:	6813      	ldr	r3, [r2, #0]
 800a2c8:	f003 030f 	and.w	r3, r3, #15
 800a2cc:	428b      	cmp	r3, r1
 800a2ce:	f47f af58 	bne.w	800a182 <HAL_RCC_ClockConfig+0xa>
 800a2d2:	e760      	b.n	800a196 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a2d4:	4936      	ldr	r1, [pc, #216]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a2d6:	6920      	ldr	r0, [r4, #16]
 800a2d8:	698a      	ldr	r2, [r1, #24]
 800a2da:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a2de:	4290      	cmp	r0, r2
 800a2e0:	f67f af5d 	bls.w	800a19e <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a2e4:	698a      	ldr	r2, [r1, #24]
 800a2e6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a2ea:	4302      	orrs	r2, r0
 800a2ec:	618a      	str	r2, [r1, #24]
 800a2ee:	e756      	b.n	800a19e <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a2f0:	4b2f      	ldr	r3, [pc, #188]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a2f2:	68a1      	ldr	r1, [r4, #8]
 800a2f4:	699a      	ldr	r2, [r3, #24]
 800a2f6:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a2fa:	430a      	orrs	r2, r1
 800a2fc:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a2fe:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a300:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a302:	2902      	cmp	r1, #2
 800a304:	d11d      	bne.n	800a342 <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a306:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a30a:	f43f af3a 	beq.w	800a182 <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a30e:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a310:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a314:	4f26      	ldr	r7, [pc, #152]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a316:	f022 0207 	bic.w	r2, r2, #7
 800a31a:	430a      	orrs	r2, r1
 800a31c:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a31e:	f7fb ffc5 	bl	80062ac <HAL_GetTick>
 800a322:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a324:	693b      	ldr	r3, [r7, #16]
 800a326:	6862      	ldr	r2, [r4, #4]
 800a328:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a32c:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a330:	f43f af6f 	beq.w	800a212 <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a334:	f7fb ffba 	bl	80062ac <HAL_GetTick>
 800a338:	1b80      	subs	r0, r0, r6
 800a33a:	4540      	cmp	r0, r8
 800a33c:	d9f2      	bls.n	800a324 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a33e:	2003      	movs	r0, #3
 800a340:	e720      	b.n	800a184 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a342:	2903      	cmp	r1, #3
 800a344:	d102      	bne.n	800a34c <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a346:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a34a:	e7de      	b.n	800a30a <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a34c:	2901      	cmp	r1, #1
 800a34e:	d102      	bne.n	800a356 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a350:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a354:	e7d9      	b.n	800a30a <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a356:	f012 0f04 	tst.w	r2, #4
 800a35a:	e7d6      	b.n	800a30a <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a35c:	4914      	ldr	r1, [pc, #80]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a35e:	68e0      	ldr	r0, [r4, #12]
 800a360:	698a      	ldr	r2, [r1, #24]
 800a362:	f002 020f 	and.w	r2, r2, #15
 800a366:	4290      	cmp	r0, r2
 800a368:	f4bf af57 	bcs.w	800a21a <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a36c:	698a      	ldr	r2, [r1, #24]
 800a36e:	f022 020f 	bic.w	r2, r2, #15
 800a372:	4302      	orrs	r2, r0
 800a374:	618a      	str	r2, [r1, #24]
 800a376:	e750      	b.n	800a21a <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a378:	680a      	ldr	r2, [r1, #0]
 800a37a:	f022 020f 	bic.w	r2, r2, #15
 800a37e:	432a      	orrs	r2, r5
 800a380:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a382:	680a      	ldr	r2, [r1, #0]
 800a384:	f002 020f 	and.w	r2, r2, #15
 800a388:	42aa      	cmp	r2, r5
 800a38a:	f47f aefa 	bne.w	800a182 <HAL_RCC_ClockConfig+0xa>
 800a38e:	e74b      	b.n	800a228 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a390:	4907      	ldr	r1, [pc, #28]	@ (800a3b0 <HAL_RCC_ClockConfig+0x238>)
 800a392:	6920      	ldr	r0, [r4, #16]
 800a394:	698a      	ldr	r2, [r1, #24]
 800a396:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a39a:	4290      	cmp	r0, r2
 800a39c:	f4bf af47 	bcs.w	800a22e <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a3a0:	698a      	ldr	r2, [r1, #24]
 800a3a2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a3a6:	4302      	orrs	r2, r0
 800a3a8:	618a      	str	r2, [r1, #24]
 800a3aa:	e740      	b.n	800a22e <HAL_RCC_ClockConfig+0xb6>
 800a3ac:	52002000 	.word	0x52002000
 800a3b0:	58024400 	.word	0x58024400
 800a3b4:	08024120 	.word	0x08024120
 800a3b8:	24000068 	.word	0x24000068
 800a3bc:	2400006c 	.word	0x2400006c
 800a3c0:	24000074 	.word	0x24000074

0800a3c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a3c4:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3c6:	f7ff fe35 	bl	800a034 <HAL_RCC_GetSysClockFreq>
 800a3ca:	4a0b      	ldr	r2, [pc, #44]	@ (800a3f8 <HAL_RCC_GetHCLKFreq+0x34>)
 800a3cc:	490b      	ldr	r1, [pc, #44]	@ (800a3fc <HAL_RCC_GetHCLKFreq+0x38>)
 800a3ce:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3d0:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3d2:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3d6:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a3da:	5ccb      	ldrb	r3, [r1, r3]
 800a3dc:	f003 031f 	and.w	r3, r3, #31
 800a3e0:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a3e4:	5c88      	ldrb	r0, [r1, r2]
 800a3e6:	4a06      	ldr	r2, [pc, #24]	@ (800a400 <HAL_RCC_GetHCLKFreq+0x3c>)
 800a3e8:	f000 001f 	and.w	r0, r0, #31
 800a3ec:	fa23 f000 	lsr.w	r0, r3, r0
 800a3f0:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a3f2:	4a04      	ldr	r2, [pc, #16]	@ (800a404 <HAL_RCC_GetHCLKFreq+0x40>)
 800a3f4:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a3f6:	bd08      	pop	{r3, pc}
 800a3f8:	58024400 	.word	0x58024400
 800a3fc:	08024120 	.word	0x08024120
 800a400:	24000068 	.word	0x24000068
 800a404:	2400006c 	.word	0x2400006c

0800a408 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a408:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a40a:	f7ff ffdb 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800a40e:	4b05      	ldr	r3, [pc, #20]	@ (800a424 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a410:	4a05      	ldr	r2, [pc, #20]	@ (800a428 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a412:	69db      	ldr	r3, [r3, #28]
 800a414:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a418:	5cd3      	ldrb	r3, [r2, r3]
 800a41a:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a41e:	40d8      	lsrs	r0, r3
 800a420:	bd08      	pop	{r3, pc}
 800a422:	bf00      	nop
 800a424:	58024400 	.word	0x58024400
 800a428:	08024120 	.word	0x08024120

0800a42c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a42c:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a42e:	f7ff ffc9 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800a432:	4b05      	ldr	r3, [pc, #20]	@ (800a448 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a434:	4a05      	ldr	r2, [pc, #20]	@ (800a44c <HAL_RCC_GetPCLK2Freq+0x20>)
 800a436:	69db      	ldr	r3, [r3, #28]
 800a438:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a43c:	5cd3      	ldrb	r3, [r2, r3]
 800a43e:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a442:	40d8      	lsrs	r0, r3
 800a444:	bd08      	pop	{r3, pc}
 800a446:	bf00      	nop
 800a448:	58024400 	.word	0x58024400
 800a44c:	08024120 	.word	0x08024120

0800a450 <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a450:	233f      	movs	r3, #63	@ 0x3f
 800a452:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a454:	4b11      	ldr	r3, [pc, #68]	@ (800a49c <HAL_RCC_GetClockConfig+0x4c>)
 800a456:	691a      	ldr	r2, [r3, #16]
 800a458:	f002 0207 	and.w	r2, r2, #7
 800a45c:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a45e:	699a      	ldr	r2, [r3, #24]
 800a460:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a464:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a466:	699a      	ldr	r2, [r3, #24]
 800a468:	f002 020f 	and.w	r2, r2, #15
 800a46c:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a46e:	699a      	ldr	r2, [r3, #24]
 800a470:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a474:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a476:	69da      	ldr	r2, [r3, #28]
 800a478:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a47c:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a47e:	69da      	ldr	r2, [r3, #28]
 800a480:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a484:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a486:	6a1b      	ldr	r3, [r3, #32]
 800a488:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a48c:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a48e:	4b04      	ldr	r3, [pc, #16]	@ (800a4a0 <HAL_RCC_GetClockConfig+0x50>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f003 030f 	and.w	r3, r3, #15
 800a496:	600b      	str	r3, [r1, #0]
}
 800a498:	4770      	bx	lr
 800a49a:	bf00      	nop
 800a49c:	58024400 	.word	0x58024400
 800a4a0:	52002000 	.word	0x52002000

0800a4a4 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a4a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4a6:	4c3a      	ldr	r4, [pc, #232]	@ (800a590 <RCCEx_PLL2_Config+0xec>)
{
 800a4a8:	4606      	mov	r6, r0
 800a4aa:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a4ac:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a4ae:	f003 0303 	and.w	r3, r3, #3
 800a4b2:	2b03      	cmp	r3, #3
 800a4b4:	d069      	beq.n	800a58a <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a4b6:	6823      	ldr	r3, [r4, #0]
 800a4b8:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a4bc:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a4be:	f7fb fef5 	bl	80062ac <HAL_GetTick>
 800a4c2:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a4c4:	6823      	ldr	r3, [r4, #0]
 800a4c6:	011a      	lsls	r2, r3, #4
 800a4c8:	d44b      	bmi.n	800a562 <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a4ca:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a4cc:	6832      	ldr	r2, [r6, #0]
 800a4ce:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a4d2:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a4d6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a4d8:	68b3      	ldr	r3, [r6, #8]
 800a4da:	68f2      	ldr	r2, [r6, #12]
 800a4dc:	3b01      	subs	r3, #1
 800a4de:	3a01      	subs	r2, #1
 800a4e0:	025b      	lsls	r3, r3, #9
 800a4e2:	0412      	lsls	r2, r2, #16
 800a4e4:	b29b      	uxth	r3, r3
 800a4e6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a4ea:	4313      	orrs	r3, r2
 800a4ec:	6872      	ldr	r2, [r6, #4]
 800a4ee:	3a01      	subs	r2, #1
 800a4f0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a4f4:	4313      	orrs	r3, r2
 800a4f6:	6932      	ldr	r2, [r6, #16]
 800a4f8:	3a01      	subs	r2, #1
 800a4fa:	0612      	lsls	r2, r2, #24
 800a4fc:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a500:	4313      	orrs	r3, r2
 800a502:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a504:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a506:	6972      	ldr	r2, [r6, #20]
 800a508:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a50c:	4313      	orrs	r3, r2
 800a50e:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a510:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a512:	69b2      	ldr	r2, [r6, #24]
 800a514:	f023 0320 	bic.w	r3, r3, #32
 800a518:	4313      	orrs	r3, r2
 800a51a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a51c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a51e:	f023 0310 	bic.w	r3, r3, #16
 800a522:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a524:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a526:	69f2      	ldr	r2, [r6, #28]
 800a528:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a52c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a530:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a534:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a536:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a538:	f043 0310 	orr.w	r3, r3, #16
 800a53c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a53e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a540:	b9b5      	cbnz	r5, 800a570 <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a542:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a546:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a548:	4c11      	ldr	r4, [pc, #68]	@ (800a590 <RCCEx_PLL2_Config+0xec>)
 800a54a:	6823      	ldr	r3, [r4, #0]
 800a54c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a550:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a552:	f7fb feab 	bl	80062ac <HAL_GetTick>
 800a556:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a558:	6823      	ldr	r3, [r4, #0]
 800a55a:	011b      	lsls	r3, r3, #4
 800a55c:	d50f      	bpl.n	800a57e <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800a55e:	2000      	movs	r0, #0
 800a560:	e005      	b.n	800a56e <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a562:	f7fb fea3 	bl	80062ac <HAL_GetTick>
 800a566:	1bc0      	subs	r0, r0, r7
 800a568:	2802      	cmp	r0, #2
 800a56a:	d9ab      	bls.n	800a4c4 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a56c:	2003      	movs	r0, #3
}
 800a56e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a570:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a572:	bf0c      	ite	eq
 800a574:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a578:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a57c:	e7e3      	b.n	800a546 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a57e:	f7fb fe95 	bl	80062ac <HAL_GetTick>
 800a582:	1b40      	subs	r0, r0, r5
 800a584:	2802      	cmp	r0, #2
 800a586:	d9e7      	bls.n	800a558 <RCCEx_PLL2_Config+0xb4>
 800a588:	e7f0      	b.n	800a56c <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800a58a:	2001      	movs	r0, #1
 800a58c:	e7ef      	b.n	800a56e <RCCEx_PLL2_Config+0xca>
 800a58e:	bf00      	nop
 800a590:	58024400 	.word	0x58024400

0800a594 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a594:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a596:	4c3a      	ldr	r4, [pc, #232]	@ (800a680 <RCCEx_PLL3_Config+0xec>)
{
 800a598:	4606      	mov	r6, r0
 800a59a:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a59c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a59e:	f003 0303 	and.w	r3, r3, #3
 800a5a2:	2b03      	cmp	r3, #3
 800a5a4:	d069      	beq.n	800a67a <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a5a6:	6823      	ldr	r3, [r4, #0]
 800a5a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a5ac:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a5ae:	f7fb fe7d 	bl	80062ac <HAL_GetTick>
 800a5b2:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a5b4:	6823      	ldr	r3, [r4, #0]
 800a5b6:	009a      	lsls	r2, r3, #2
 800a5b8:	d44b      	bmi.n	800a652 <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a5ba:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a5bc:	6832      	ldr	r2, [r6, #0]
 800a5be:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a5c2:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a5c6:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a5c8:	68b3      	ldr	r3, [r6, #8]
 800a5ca:	68f2      	ldr	r2, [r6, #12]
 800a5cc:	3b01      	subs	r3, #1
 800a5ce:	3a01      	subs	r2, #1
 800a5d0:	025b      	lsls	r3, r3, #9
 800a5d2:	0412      	lsls	r2, r2, #16
 800a5d4:	b29b      	uxth	r3, r3
 800a5d6:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a5da:	4313      	orrs	r3, r2
 800a5dc:	6872      	ldr	r2, [r6, #4]
 800a5de:	3a01      	subs	r2, #1
 800a5e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a5e4:	4313      	orrs	r3, r2
 800a5e6:	6932      	ldr	r2, [r6, #16]
 800a5e8:	3a01      	subs	r2, #1
 800a5ea:	0612      	lsls	r2, r2, #24
 800a5ec:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a5f0:	4313      	orrs	r3, r2
 800a5f2:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a5f4:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a5f6:	6972      	ldr	r2, [r6, #20]
 800a5f8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a5fc:	4313      	orrs	r3, r2
 800a5fe:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a600:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a602:	69b2      	ldr	r2, [r6, #24]
 800a604:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a608:	4313      	orrs	r3, r2
 800a60a:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a60c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a60e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a612:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a614:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a616:	69f2      	ldr	r2, [r6, #28]
 800a618:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a61c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a620:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a624:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a626:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a628:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a62c:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a62e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a630:	b9b5      	cbnz	r5, 800a660 <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a632:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a636:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800a638:	4c11      	ldr	r4, [pc, #68]	@ (800a680 <RCCEx_PLL3_Config+0xec>)
 800a63a:	6823      	ldr	r3, [r4, #0]
 800a63c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800a640:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a642:	f7fb fe33 	bl	80062ac <HAL_GetTick>
 800a646:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800a648:	6823      	ldr	r3, [r4, #0]
 800a64a:	009b      	lsls	r3, r3, #2
 800a64c:	d50f      	bpl.n	800a66e <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800a64e:	2000      	movs	r0, #0
 800a650:	e005      	b.n	800a65e <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a652:	f7fb fe2b 	bl	80062ac <HAL_GetTick>
 800a656:	1bc0      	subs	r0, r0, r7
 800a658:	2802      	cmp	r0, #2
 800a65a:	d9ab      	bls.n	800a5b4 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800a65c:	2003      	movs	r0, #3
}
 800a65e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a660:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800a662:	bf0c      	ite	eq
 800a664:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800a668:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800a66c:	e7e3      	b.n	800a636 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800a66e:	f7fb fe1d 	bl	80062ac <HAL_GetTick>
 800a672:	1b40      	subs	r0, r0, r5
 800a674:	2802      	cmp	r0, #2
 800a676:	d9e7      	bls.n	800a648 <RCCEx_PLL3_Config+0xb4>
 800a678:	e7f0      	b.n	800a65c <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800a67a:	2001      	movs	r0, #1
 800a67c:	e7ef      	b.n	800a65e <RCCEx_PLL3_Config+0xca>
 800a67e:	bf00      	nop
 800a680:	58024400 	.word	0x58024400

0800a684 <HAL_RCCEx_PeriphCLKConfig>:
{
 800a684:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a688:	6803      	ldr	r3, [r0, #0]
{
 800a68a:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800a68c:	011c      	lsls	r4, r3, #4
 800a68e:	d51e      	bpl.n	800a6ce <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a690:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800a692:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a696:	d02a      	beq.n	800a6ee <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800a698:	d80f      	bhi.n	800a6ba <HAL_RCCEx_PeriphCLKConfig+0x36>
 800a69a:	b1d3      	cbz	r3, 800a6d2 <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800a69c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800a6a0:	d01d      	beq.n	800a6de <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800a6a2:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800a6a4:	682b      	ldr	r3, [r5, #0]
 800a6a6:	05d8      	lsls	r0, r3, #23
 800a6a8:	d54f      	bpl.n	800a74a <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a6aa:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800a6ac:	2b04      	cmp	r3, #4
 800a6ae:	d84b      	bhi.n	800a748 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800a6b0:	e8df f003 	tbb	[pc, r3]
 800a6b4:	27443d22 	.word	0x27443d22
 800a6b8:	27          	.byte	0x27
 800a6b9:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a6ba:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800a6be:	d1f0      	bne.n	800a6a2 <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800a6c0:	4a86      	ldr	r2, [pc, #536]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a6c2:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800a6c4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a6c6:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800a6ca:	430b      	orrs	r3, r1
 800a6cc:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800a6ce:	2600      	movs	r6, #0
 800a6d0:	e7e8      	b.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6d2:	4a82      	ldr	r2, [pc, #520]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a6d4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a6d6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a6da:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800a6dc:	e7f0      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a6de:	2102      	movs	r1, #2
 800a6e0:	3008      	adds	r0, #8
 800a6e2:	f7ff fedf 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6e6:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800a6e8:	2800      	cmp	r0, #0
 800a6ea:	d1db      	bne.n	800a6a4 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800a6ec:	e7e8      	b.n	800a6c0 <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800a6ee:	2102      	movs	r1, #2
 800a6f0:	3028      	adds	r0, #40	@ 0x28
 800a6f2:	f7ff ff4f 	bl	800a594 <RCCEx_PLL3_Config>
 800a6f6:	e7f6      	b.n	800a6e6 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a6f8:	4a78      	ldr	r2, [pc, #480]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a6fa:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a6fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a700:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800a702:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800a704:	bb1c      	cbnz	r4, 800a74e <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800a706:	4a75      	ldr	r2, [pc, #468]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a708:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800a70a:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a70c:	f023 0307 	bic.w	r3, r3, #7
 800a710:	430b      	orrs	r3, r1
 800a712:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800a714:	682b      	ldr	r3, [r5, #0]
 800a716:	0599      	lsls	r1, r3, #22
 800a718:	d528      	bpl.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a71a:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800a71c:	2b80      	cmp	r3, #128	@ 0x80
 800a71e:	d043      	beq.n	800a7a8 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800a720:	d817      	bhi.n	800a752 <HAL_RCCEx_PeriphCLKConfig+0xce>
 800a722:	b3a3      	cbz	r3, 800a78e <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800a724:	2b40      	cmp	r3, #64	@ 0x40
 800a726:	d038      	beq.n	800a79a <HAL_RCCEx_PeriphCLKConfig+0x116>
 800a728:	2601      	movs	r6, #1
 800a72a:	4634      	mov	r4, r6
 800a72c:	e01e      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a72e:	2100      	movs	r1, #0
 800a730:	f105 0008 	add.w	r0, r5, #8
 800a734:	f7ff feb6 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a738:	4604      	mov	r4, r0
        break;
 800a73a:	e7e3      	b.n	800a704 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a73c:	2100      	movs	r1, #0
 800a73e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a742:	f7ff ff27 	bl	800a594 <RCCEx_PLL3_Config>
 800a746:	e7f7      	b.n	800a738 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800a748:	2601      	movs	r6, #1
 800a74a:	4634      	mov	r4, r6
 800a74c:	e7e2      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800a74e:	4626      	mov	r6, r4
 800a750:	e7e0      	b.n	800a714 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800a752:	2bc0      	cmp	r3, #192	@ 0xc0
 800a754:	d002      	beq.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800a756:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a75a:	d1e5      	bne.n	800a728 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800a75c:	bb54      	cbnz	r4, 800a7b4 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800a75e:	4a5f      	ldr	r2, [pc, #380]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a760:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800a762:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a764:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800a768:	430b      	orrs	r3, r1
 800a76a:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800a76c:	682b      	ldr	r3, [r5, #0]
 800a76e:	055a      	lsls	r2, r3, #21
 800a770:	d531      	bpl.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a772:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800a776:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800a77a:	d049      	beq.n	800a810 <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800a77c:	d81c      	bhi.n	800a7b8 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d039      	beq.n	800a7f6 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800a782:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800a786:	d03c      	beq.n	800a802 <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800a788:	2601      	movs	r6, #1
 800a78a:	4634      	mov	r4, r6
 800a78c:	e023      	b.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a78e:	4a53      	ldr	r2, [pc, #332]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a790:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a796:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a798:	e7e0      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a79a:	2100      	movs	r1, #0
 800a79c:	f105 0008 	add.w	r0, r5, #8
 800a7a0:	f7ff fe80 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7a4:	4604      	mov	r4, r0
        break;
 800a7a6:	e7d9      	b.n	800a75c <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a7a8:	2100      	movs	r1, #0
 800a7aa:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a7ae:	f7ff fef1 	bl	800a594 <RCCEx_PLL3_Config>
 800a7b2:	e7f7      	b.n	800a7a4 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800a7b4:	4626      	mov	r6, r4
 800a7b6:	e7d9      	b.n	800a76c <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800a7b8:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800a7bc:	d002      	beq.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800a7be:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800a7c2:	d1e1      	bne.n	800a788 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800a7c4:	bb54      	cbnz	r4, 800a81c <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800a7c6:	4a45      	ldr	r2, [pc, #276]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a7c8:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800a7cc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a7ce:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800a7d2:	430b      	orrs	r3, r1
 800a7d4:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	051b      	lsls	r3, r3, #20
 800a7da:	d530      	bpl.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a7dc:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800a7e0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800a7e4:	d045      	beq.n	800a872 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800a7e6:	d81b      	bhi.n	800a820 <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800a7e8:	b3b3      	cbz	r3, 800a858 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800a7ea:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800a7ee:	d039      	beq.n	800a864 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800a7f0:	2601      	movs	r6, #1
 800a7f2:	4634      	mov	r4, r6
 800a7f4:	e023      	b.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a7f6:	4a39      	ldr	r2, [pc, #228]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a7f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a7fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a7fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a800:	e7e0      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a802:	2100      	movs	r1, #0
 800a804:	f105 0008 	add.w	r0, r5, #8
 800a808:	f7ff fe4c 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a80c:	4604      	mov	r4, r0
        break;
 800a80e:	e7d9      	b.n	800a7c4 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a810:	2100      	movs	r1, #0
 800a812:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a816:	f7ff febd 	bl	800a594 <RCCEx_PLL3_Config>
 800a81a:	e7f7      	b.n	800a80c <HAL_RCCEx_PeriphCLKConfig+0x188>
 800a81c:	4626      	mov	r6, r4
 800a81e:	e7da      	b.n	800a7d6 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800a820:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800a824:	d002      	beq.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800a826:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800a82a:	d1e1      	bne.n	800a7f0 <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800a82c:	bb3c      	cbnz	r4, 800a87e <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800a82e:	4a2b      	ldr	r2, [pc, #172]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a830:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800a834:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800a836:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800a83a:	430b      	orrs	r3, r1
 800a83c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800a83e:	682b      	ldr	r3, [r5, #0]
 800a840:	019f      	lsls	r7, r3, #6
 800a842:	d528      	bpl.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800a844:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800a846:	2b20      	cmp	r3, #32
 800a848:	d03e      	beq.n	800a8c8 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800a84a:	d81a      	bhi.n	800a882 <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800a84c:	b1db      	cbz	r3, 800a886 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a84e:	2b10      	cmp	r3, #16
 800a850:	d034      	beq.n	800a8bc <HAL_RCCEx_PeriphCLKConfig+0x238>
 800a852:	2601      	movs	r6, #1
 800a854:	4634      	mov	r4, r6
 800a856:	e01e      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a858:	4a20      	ldr	r2, [pc, #128]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a85a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a85c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a860:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a862:	e7e3      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a864:	2100      	movs	r1, #0
 800a866:	f105 0008 	add.w	r0, r5, #8
 800a86a:	f7ff fe1b 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a86e:	4604      	mov	r4, r0
        break;
 800a870:	e7dc      	b.n	800a82c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a872:	2100      	movs	r1, #0
 800a874:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a878:	f7ff fe8c 	bl	800a594 <RCCEx_PLL3_Config>
 800a87c:	e7f7      	b.n	800a86e <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800a87e:	4626      	mov	r6, r4
 800a880:	e7dd      	b.n	800a83e <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800a882:	2b30      	cmp	r3, #48	@ 0x30
 800a884:	d1e5      	bne.n	800a852 <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800a886:	bb34      	cbnz	r4, 800a8d6 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800a888:	4a14      	ldr	r2, [pc, #80]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a88a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800a88c:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a88e:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800a892:	430b      	orrs	r3, r1
 800a894:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800a896:	682b      	ldr	r3, [r5, #0]
 800a898:	04d8      	lsls	r0, r3, #19
 800a89a:	d530      	bpl.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800a89c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a89e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a8a2:	f000 8097 	beq.w	800a9d4 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800a8a6:	d81b      	bhi.n	800a8e0 <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	f000 8086 	beq.w	800a9ba <HAL_RCCEx_PeriphCLKConfig+0x336>
 800a8ae:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800a8b2:	f000 8088 	beq.w	800a9c6 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800a8b6:	2601      	movs	r6, #1
 800a8b8:	4634      	mov	r4, r6
 800a8ba:	e020      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a8bc:	4a07      	ldr	r2, [pc, #28]	@ (800a8dc <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800a8be:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a8c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a8c4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a8c6:	e7de      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800a8c8:	2102      	movs	r1, #2
 800a8ca:	f105 0008 	add.w	r0, r5, #8
 800a8ce:	f7ff fde9 	bl	800a4a4 <RCCEx_PLL2_Config>
 800a8d2:	4604      	mov	r4, r0
        break;
 800a8d4:	e7d7      	b.n	800a886 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800a8d6:	4626      	mov	r6, r4
 800a8d8:	e7dd      	b.n	800a896 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800a8da:	bf00      	nop
 800a8dc:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800a8e0:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800a8e4:	d002      	beq.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x268>
 800a8e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800a8ea:	d1e4      	bne.n	800a8b6 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800a8ec:	2c00      	cmp	r4, #0
 800a8ee:	d177      	bne.n	800a9e0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800a8f0:	4a9e      	ldr	r2, [pc, #632]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a8f2:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800a8f4:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a8f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800a8fa:	430b      	orrs	r3, r1
 800a8fc:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800a8fe:	682b      	ldr	r3, [r5, #0]
 800a900:	0499      	lsls	r1, r3, #18
 800a902:	d50c      	bpl.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a904:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800a906:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800a90a:	f000 8083 	beq.w	800aa14 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800a90e:	d869      	bhi.n	800a9e4 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800a910:	2b00      	cmp	r3, #0
 800a912:	d06f      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a914:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800a918:	d075      	beq.n	800aa06 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800a91a:	2601      	movs	r6, #1
 800a91c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800a91e:	682b      	ldr	r3, [r5, #0]
 800a920:	045a      	lsls	r2, r3, #17
 800a922:	d50e      	bpl.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800a924:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800a928:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a92c:	f000 8093 	beq.w	800aa56 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800a930:	d878      	bhi.n	800aa24 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800a932:	2b00      	cmp	r3, #0
 800a934:	d07e      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800a936:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a93a:	f000 8085 	beq.w	800aa48 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800a93e:	2601      	movs	r6, #1
 800a940:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800a942:	682b      	ldr	r3, [r5, #0]
 800a944:	015b      	lsls	r3, r3, #5
 800a946:	d515      	bpl.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800a948:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800a94a:	b14b      	cbz	r3, 800a960 <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800a94c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800a950:	f040 8089 	bne.w	800aa66 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800a954:	2101      	movs	r1, #1
 800a956:	f105 0008 	add.w	r0, r5, #8
 800a95a:	f7ff fda3 	bl	800a4a4 <RCCEx_PLL2_Config>
 800a95e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800a960:	2c00      	cmp	r4, #0
 800a962:	f040 8083 	bne.w	800aa6c <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800a966:	4a81      	ldr	r2, [pc, #516]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a968:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800a96a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800a96c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a970:	430b      	orrs	r3, r1
 800a972:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800a974:	682b      	ldr	r3, [r5, #0]
 800a976:	041f      	lsls	r7, r3, #16
 800a978:	d511      	bpl.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800a97a:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a97c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800a980:	d076      	beq.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800a982:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800a986:	d079      	beq.n	800aa7c <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d17e      	bne.n	800aa8a <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800a98c:	2c00      	cmp	r4, #0
 800a98e:	d17f      	bne.n	800aa90 <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800a990:	4a76      	ldr	r2, [pc, #472]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a992:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800a994:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a996:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800a99a:	430b      	orrs	r3, r1
 800a99c:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800a99e:	682b      	ldr	r3, [r5, #0]
 800a9a0:	01d8      	lsls	r0, r3, #7
 800a9a2:	f140 8085 	bpl.w	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800a9a6:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800a9a8:	2b03      	cmp	r3, #3
 800a9aa:	f200 80e5 	bhi.w	800ab78 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800a9ae:	e8df f013 	tbh	[pc, r3, lsl #1]
 800a9b2:	0076      	.short	0x0076
 800a9b4:	00d50071 	.word	0x00d50071
 800a9b8:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a9ba:	4a6c      	ldr	r2, [pc, #432]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a9bc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800a9be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a9c2:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800a9c4:	e792      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800a9c6:	2100      	movs	r1, #0
 800a9c8:	f105 0008 	add.w	r0, r5, #8
 800a9cc:	f7ff fd6a 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9d0:	4604      	mov	r4, r0
        break;
 800a9d2:	e78b      	b.n	800a8ec <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800a9d4:	2100      	movs	r1, #0
 800a9d6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800a9da:	f7ff fddb 	bl	800a594 <RCCEx_PLL3_Config>
 800a9de:	e7f7      	b.n	800a9d0 <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800a9e0:	4626      	mov	r6, r4
 800a9e2:	e78c      	b.n	800a8fe <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800a9e4:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800a9e8:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800a9ec:	d002      	beq.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800a9ee:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800a9f2:	d192      	bne.n	800a91a <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800a9f4:	b9a4      	cbnz	r4, 800aa20 <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800a9f6:	4a5d      	ldr	r2, [pc, #372]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800a9f8:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800a9fa:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800a9fc:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800aa00:	430b      	orrs	r3, r1
 800aa02:	6513      	str	r3, [r2, #80]	@ 0x50
 800aa04:	e78b      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa06:	2101      	movs	r1, #1
 800aa08:	f105 0008 	add.w	r0, r5, #8
 800aa0c:	f7ff fd4a 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa10:	4604      	mov	r4, r0
        break;
 800aa12:	e7ef      	b.n	800a9f4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa14:	2101      	movs	r1, #1
 800aa16:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa1a:	f7ff fdbb 	bl	800a594 <RCCEx_PLL3_Config>
 800aa1e:	e7f7      	b.n	800aa10 <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800aa20:	4626      	mov	r6, r4
 800aa22:	e77c      	b.n	800a91e <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800aa24:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800aa28:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800aa2c:	d002      	beq.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800aa2e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800aa32:	d184      	bne.n	800a93e <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800aa34:	b9ac      	cbnz	r4, 800aa62 <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800aa36:	4a4d      	ldr	r2, [pc, #308]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aa38:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800aa3c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800aa3e:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800aa42:	430b      	orrs	r3, r1
 800aa44:	6593      	str	r3, [r2, #88]	@ 0x58
 800aa46:	e77c      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa48:	2101      	movs	r1, #1
 800aa4a:	f105 0008 	add.w	r0, r5, #8
 800aa4e:	f7ff fd29 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa52:	4604      	mov	r4, r0
        break;
 800aa54:	e7ee      	b.n	800aa34 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aa56:	2101      	movs	r1, #1
 800aa58:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aa5c:	f7ff fd9a 	bl	800a594 <RCCEx_PLL3_Config>
 800aa60:	e7f7      	b.n	800aa52 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800aa62:	4626      	mov	r6, r4
 800aa64:	e76d      	b.n	800a942 <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800aa66:	2601      	movs	r6, #1
 800aa68:	4634      	mov	r4, r6
 800aa6a:	e783      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800aa6c:	4626      	mov	r6, r4
 800aa6e:	e781      	b.n	800a974 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa70:	4a3e      	ldr	r2, [pc, #248]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aa72:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aa74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa78:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800aa7a:	e787      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800aa7c:	2101      	movs	r1, #1
 800aa7e:	f105 0008 	add.w	r0, r5, #8
 800aa82:	f7ff fd0f 	bl	800a4a4 <RCCEx_PLL2_Config>
 800aa86:	4604      	mov	r4, r0
        break;
 800aa88:	e780      	b.n	800a98c <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800aa8a:	2601      	movs	r6, #1
 800aa8c:	4634      	mov	r4, r6
 800aa8e:	e786      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800aa90:	4626      	mov	r6, r4
 800aa92:	e784      	b.n	800a99e <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa94:	4a35      	ldr	r2, [pc, #212]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aa96:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aa98:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aa9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aa9e:	2c00      	cmp	r4, #0
 800aaa0:	d16d      	bne.n	800ab7e <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800aaa2:	4a32      	ldr	r2, [pc, #200]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aaa4:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800aaa6:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800aaa8:	f023 0303 	bic.w	r3, r3, #3
 800aaac:	430b      	orrs	r3, r1
 800aaae:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800aab0:	682b      	ldr	r3, [r5, #0]
 800aab2:	0259      	lsls	r1, r3, #9
 800aab4:	d539      	bpl.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800aab6:	4f2e      	ldr	r7, [pc, #184]	@ (800ab70 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800aab8:	683b      	ldr	r3, [r7, #0]
 800aaba:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800aabe:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800aac0:	f7fb fbf4 	bl	80062ac <HAL_GetTick>
 800aac4:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800aac6:	683b      	ldr	r3, [r7, #0]
 800aac8:	05da      	lsls	r2, r3, #23
 800aaca:	d55a      	bpl.n	800ab82 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800aacc:	2c00      	cmp	r4, #0
 800aace:	d176      	bne.n	800abbe <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800aad0:	4b26      	ldr	r3, [pc, #152]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aad2:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800aad6:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aad8:	4042      	eors	r2, r0
 800aada:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800aade:	d00b      	beq.n	800aaf8 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aae0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800aae2:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aae4:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800aae8:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800aaec:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aaee:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aaf0:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800aaf4:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800aaf6:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aaf8:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800aafc:	d04a      	beq.n	800ab94 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aafe:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800ab02:	491a      	ldr	r1, [pc, #104]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ab04:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800ab08:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800ab0c:	d153      	bne.n	800abb6 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800ab0e:	6908      	ldr	r0, [r1, #16]
 800ab10:	4a18      	ldr	r2, [pc, #96]	@ (800ab74 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800ab12:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800ab16:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800ab1a:	4302      	orrs	r2, r0
 800ab1c:	610a      	str	r2, [r1, #16]
 800ab1e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800ab22:	4a12      	ldr	r2, [pc, #72]	@ (800ab6c <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ab24:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800ab26:	430b      	orrs	r3, r1
 800ab28:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800ab2a:	682b      	ldr	r3, [r5, #0]
 800ab2c:	07d8      	lsls	r0, r3, #31
 800ab2e:	d50a      	bpl.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800ab30:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800ab34:	2b10      	cmp	r3, #16
 800ab36:	d05b      	beq.n	800abf0 <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800ab38:	d843      	bhi.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	d047      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800ab3e:	2b08      	cmp	r3, #8
 800ab40:	d04f      	beq.n	800abe2 <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800ab42:	2601      	movs	r6, #1
 800ab44:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800ab46:	682b      	ldr	r3, [r5, #0]
 800ab48:	0799      	lsls	r1, r3, #30
 800ab4a:	d567      	bpl.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ab4c:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800ab4e:	2b05      	cmp	r3, #5
 800ab50:	d87a      	bhi.n	800ac48 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800ab52:	e8df f003 	tbb	[pc, r3]
 800ab56:	555b      	.short	0x555b
 800ab58:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ab5c:	2102      	movs	r1, #2
 800ab5e:	f105 0008 	add.w	r0, r5, #8
 800ab62:	f7ff fc9f 	bl	800a4a4 <RCCEx_PLL2_Config>
 800ab66:	4604      	mov	r4, r0
        break;
 800ab68:	e799      	b.n	800aa9e <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800ab6a:	bf00      	nop
 800ab6c:	58024400 	.word	0x58024400
 800ab70:	58024800 	.word	0x58024800
 800ab74:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800ab78:	2601      	movs	r6, #1
 800ab7a:	4634      	mov	r4, r6
 800ab7c:	e798      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800ab7e:	4626      	mov	r6, r4
 800ab80:	e796      	b.n	800aab0 <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800ab82:	f7fb fb93 	bl	80062ac <HAL_GetTick>
 800ab86:	eba0 0008 	sub.w	r0, r0, r8
 800ab8a:	2864      	cmp	r0, #100	@ 0x64
 800ab8c:	d99b      	bls.n	800aac6 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800ab8e:	2603      	movs	r6, #3
 800ab90:	4634      	mov	r4, r6
 800ab92:	e7ca      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800ab94:	f7fb fb8a 	bl	80062ac <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800ab98:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800ac54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800ab9c:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800ab9e:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800aba2:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800aba6:	079b      	lsls	r3, r3, #30
 800aba8:	d4a9      	bmi.n	800aafe <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800abaa:	f7fb fb7f 	bl	80062ac <HAL_GetTick>
 800abae:	1bc0      	subs	r0, r0, r7
 800abb0:	4548      	cmp	r0, r9
 800abb2:	d9f6      	bls.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800abb4:	e7eb      	b.n	800ab8e <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800abb6:	690a      	ldr	r2, [r1, #16]
 800abb8:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800abbc:	e7ae      	b.n	800ab1c <HAL_RCCEx_PeriphCLKConfig+0x498>
 800abbe:	4626      	mov	r6, r4
 800abc0:	e7b3      	b.n	800ab2a <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800abc2:	f023 0208 	bic.w	r2, r3, #8
 800abc6:	2a20      	cmp	r2, #32
 800abc8:	d001      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800abca:	2b18      	cmp	r3, #24
 800abcc:	d1b9      	bne.n	800ab42 <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800abce:	b9ac      	cbnz	r4, 800abfc <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800abd0:	4a20      	ldr	r2, [pc, #128]	@ (800ac54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800abd2:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800abd6:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800abd8:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800abdc:	430b      	orrs	r3, r1
 800abde:	6553      	str	r3, [r2, #84]	@ 0x54
 800abe0:	e7b1      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800abe2:	2101      	movs	r1, #1
 800abe4:	f105 0008 	add.w	r0, r5, #8
 800abe8:	f7ff fc5c 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abec:	4604      	mov	r4, r0
        break;
 800abee:	e7ee      	b.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800abf0:	2101      	movs	r1, #1
 800abf2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800abf6:	f7ff fccd 	bl	800a594 <RCCEx_PLL3_Config>
 800abfa:	e7f7      	b.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x568>
 800abfc:	4626      	mov	r6, r4
 800abfe:	e7a2      	b.n	800ab46 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac00:	2101      	movs	r1, #1
 800ac02:	f105 0008 	add.w	r0, r5, #8
 800ac06:	f7ff fc4d 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac0a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ac0c:	b9fc      	cbnz	r4, 800ac4e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800ac0e:	4a11      	ldr	r2, [pc, #68]	@ (800ac54 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800ac10:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800ac12:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ac14:	f023 0307 	bic.w	r3, r3, #7
 800ac18:	430b      	orrs	r3, r1
 800ac1a:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800ac1c:	682b      	ldr	r3, [r5, #0]
 800ac1e:	075a      	lsls	r2, r3, #29
 800ac20:	d52b      	bpl.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800ac22:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800ac26:	2b05      	cmp	r3, #5
 800ac28:	f200 816e 	bhi.w	800af08 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800ac2c:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ac30:	0014001a 	.word	0x0014001a
 800ac34:	001a0166 	.word	0x001a0166
 800ac38:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac3c:	2101      	movs	r1, #1
 800ac3e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ac42:	f7ff fca7 	bl	800a594 <RCCEx_PLL3_Config>
 800ac46:	e7e0      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800ac48:	2601      	movs	r6, #1
 800ac4a:	4634      	mov	r4, r6
 800ac4c:	e7e6      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ac4e:	4626      	mov	r6, r4
 800ac50:	e7e4      	b.n	800ac1c <HAL_RCCEx_PeriphCLKConfig+0x598>
 800ac52:	bf00      	nop
 800ac54:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ac58:	2101      	movs	r1, #1
 800ac5a:	f105 0008 	add.w	r0, r5, #8
 800ac5e:	f7ff fc21 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ac62:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ac64:	2c00      	cmp	r4, #0
 800ac66:	f040 8152 	bne.w	800af0e <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800ac6a:	4aaa      	ldr	r2, [pc, #680]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ac6c:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800ac70:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ac72:	f023 0307 	bic.w	r3, r3, #7
 800ac76:	430b      	orrs	r3, r1
 800ac78:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800ac7a:	682b      	ldr	r3, [r5, #0]
 800ac7c:	069b      	lsls	r3, r3, #26
 800ac7e:	d510      	bpl.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800ac80:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800ac84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ac88:	f000 8160 	beq.w	800af4c <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800ac8c:	f200 8144 	bhi.w	800af18 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800ac90:	2b00      	cmp	r3, #0
 800ac92:	f000 814a 	beq.w	800af2a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800ac96:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ac9a:	f000 8150 	beq.w	800af3e <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800ac9e:	2601      	movs	r6, #1
 800aca0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800aca2:	682b      	ldr	r3, [r5, #0]
 800aca4:	065f      	lsls	r7, r3, #25
 800aca6:	d510      	bpl.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800aca8:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800acac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800acb0:	f000 816e 	beq.w	800af90 <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800acb4:	f200 8152 	bhi.w	800af5c <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800acb8:	2b00      	cmp	r3, #0
 800acba:	f000 8158 	beq.w	800af6e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800acbe:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800acc2:	f000 815e 	beq.w	800af82 <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800acc6:	2601      	movs	r6, #1
 800acc8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	0618      	lsls	r0, r3, #24
 800acce:	d510      	bpl.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800acd0:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800acd4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acd8:	f000 817c 	beq.w	800afd4 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800acdc:	f200 8160 	bhi.w	800afa0 <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	f000 8166 	beq.w	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800ace6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800acea:	f000 816c 	beq.w	800afc6 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800acee:	2601      	movs	r6, #1
 800acf0:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800acf2:	682b      	ldr	r3, [r5, #0]
 800acf4:	0719      	lsls	r1, r3, #28
 800acf6:	d514      	bpl.n	800ad22 <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800acf8:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800acfc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ad00:	d107      	bne.n	800ad12 <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad02:	2102      	movs	r1, #2
 800ad04:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad08:	f7ff fc44 	bl	800a594 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ad0c:	2800      	cmp	r0, #0
 800ad0e:	bf18      	it	ne
 800ad10:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800ad12:	4a80      	ldr	r2, [pc, #512]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ad14:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800ad18:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ad1a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800ad1e:	430b      	orrs	r3, r1
 800ad20:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800ad22:	682b      	ldr	r3, [r5, #0]
 800ad24:	06da      	lsls	r2, r3, #27
 800ad26:	d514      	bpl.n	800ad52 <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800ad28:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800ad2c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad30:	d107      	bne.n	800ad42 <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800ad32:	2102      	movs	r1, #2
 800ad34:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ad38:	f7ff fc2c 	bl	800a594 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800ad3c:	2800      	cmp	r0, #0
 800ad3e:	bf18      	it	ne
 800ad40:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800ad42:	4a74      	ldr	r2, [pc, #464]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ad44:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800ad48:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ad4a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800ad4e:	430b      	orrs	r3, r1
 800ad50:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800ad52:	682b      	ldr	r3, [r5, #0]
 800ad54:	031b      	lsls	r3, r3, #12
 800ad56:	d51b      	bpl.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800ad58:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ad5c:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800ad60:	f000 8140 	beq.w	800afe4 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800ad64:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800ad68:	d007      	beq.n	800ad7a <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800ad6a:	2900      	cmp	r1, #0
 800ad6c:	f040 8140 	bne.w	800aff0 <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad70:	f105 0008 	add.w	r0, r5, #8
 800ad74:	f7ff fb96 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800ad78:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ad7a:	2c00      	cmp	r4, #0
 800ad7c:	f040 813b 	bne.w	800aff6 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800ad80:	4a64      	ldr	r2, [pc, #400]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ad82:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800ad86:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ad88:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800ad8c:	430b      	orrs	r3, r1
 800ad8e:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800ad90:	682b      	ldr	r3, [r5, #0]
 800ad92:	035f      	lsls	r7, r3, #13
 800ad94:	d50f      	bpl.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800ad96:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800ad9a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ad9e:	f000 813b 	beq.w	800b018 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800ada2:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800ada6:	f000 812d 	beq.w	800b004 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800adaa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800adae:	f000 8124 	beq.w	800affa <HAL_RCCEx_PeriphCLKConfig+0x976>
 800adb2:	2601      	movs	r6, #1
 800adb4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800adb6:	682b      	ldr	r3, [r5, #0]
 800adb8:	03d8      	lsls	r0, r3, #15
 800adba:	d509      	bpl.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800adbc:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	f000 8133 	beq.w	800b02a <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800adc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800adc8:	f000 813d 	beq.w	800b046 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800adcc:	2601      	movs	r6, #1
 800adce:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800add0:	682b      	ldr	r3, [r5, #0]
 800add2:	0099      	lsls	r1, r3, #2
 800add4:	d507      	bpl.n	800ade6 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800add6:	2102      	movs	r1, #2
 800add8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800addc:	f7ff fbda 	bl	800a594 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800ade0:	2800      	cmp	r0, #0
 800ade2:	bf18      	it	ne
 800ade4:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800ade6:	e9d5 3100 	ldrd	r3, r1, [r5]
 800adea:	039a      	lsls	r2, r3, #14
 800adec:	f140 8143 	bpl.w	800b076 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800adf0:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800adf4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800adf8:	f000 813f 	beq.w	800b07a <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800adfc:	f200 812c 	bhi.w	800b058 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800ae00:	2800      	cmp	r0, #0
 800ae02:	f000 812f 	beq.w	800b064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800ae06:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800ae08:	02df      	lsls	r7, r3, #11
 800ae0a:	d506      	bpl.n	800ae1a <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800ae0c:	4841      	ldr	r0, [pc, #260]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae0e:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800ae10:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ae12:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800ae16:	4332      	orrs	r2, r6
 800ae18:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800ae1a:	00de      	lsls	r6, r3, #3
 800ae1c:	d507      	bpl.n	800ae2e <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800ae1e:	483d      	ldr	r0, [pc, #244]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae20:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800ae24:	6902      	ldr	r2, [r0, #16]
 800ae26:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800ae2a:	4332      	orrs	r2, r6
 800ae2c:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800ae2e:	0298      	lsls	r0, r3, #10
 800ae30:	d506      	bpl.n	800ae40 <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800ae32:	4838      	ldr	r0, [pc, #224]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae34:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800ae36:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800ae38:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800ae3c:	4332      	orrs	r2, r6
 800ae3e:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800ae40:	005a      	lsls	r2, r3, #1
 800ae42:	d509      	bpl.n	800ae58 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800ae44:	4a33      	ldr	r2, [pc, #204]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae46:	6910      	ldr	r0, [r2, #16]
 800ae48:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800ae4c:	6110      	str	r0, [r2, #16]
 800ae4e:	6910      	ldr	r0, [r2, #16]
 800ae50:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800ae54:	4330      	orrs	r0, r6
 800ae56:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800ae58:	2b00      	cmp	r3, #0
 800ae5a:	da06      	bge.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ae5c:	482d      	ldr	r0, [pc, #180]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae5e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800ae60:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800ae62:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800ae66:	4332      	orrs	r2, r6
 800ae68:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800ae6a:	021f      	lsls	r7, r3, #8
 800ae6c:	d507      	bpl.n	800ae7e <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800ae6e:	4a29      	ldr	r2, [pc, #164]	@ (800af14 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800ae70:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800ae74:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800ae76:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800ae7a:	4303      	orrs	r3, r0
 800ae7c:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800ae7e:	07ce      	lsls	r6, r1, #31
 800ae80:	d506      	bpl.n	800ae90 <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ae82:	2100      	movs	r1, #0
 800ae84:	f105 0008 	add.w	r0, r5, #8
 800ae88:	f7ff fb0c 	bl	800a4a4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800ae8c:	4607      	mov	r7, r0
 800ae8e:	b900      	cbnz	r0, 800ae92 <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800ae90:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800ae92:	686b      	ldr	r3, [r5, #4]
 800ae94:	079c      	lsls	r4, r3, #30
 800ae96:	d506      	bpl.n	800aea6 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae98:	2101      	movs	r1, #1
 800ae9a:	f105 0008 	add.w	r0, r5, #8
 800ae9e:	f7ff fb01 	bl	800a4a4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800aea2:	4606      	mov	r6, r0
 800aea4:	b900      	cbnz	r0, 800aea8 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800aea6:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800aea8:	686b      	ldr	r3, [r5, #4]
 800aeaa:	0758      	lsls	r0, r3, #29
 800aeac:	d506      	bpl.n	800aebc <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aeae:	2102      	movs	r1, #2
 800aeb0:	f105 0008 	add.w	r0, r5, #8
 800aeb4:	f7ff faf6 	bl	800a4a4 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800aeb8:	4604      	mov	r4, r0
 800aeba:	b900      	cbnz	r0, 800aebe <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800aebc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800aebe:	686b      	ldr	r3, [r5, #4]
 800aec0:	0719      	lsls	r1, r3, #28
 800aec2:	d506      	bpl.n	800aed2 <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800aec4:	2100      	movs	r1, #0
 800aec6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aeca:	f7ff fb63 	bl	800a594 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aece:	4606      	mov	r6, r0
 800aed0:	b900      	cbnz	r0, 800aed4 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800aed2:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800aed4:	686b      	ldr	r3, [r5, #4]
 800aed6:	06da      	lsls	r2, r3, #27
 800aed8:	d506      	bpl.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aeda:	2101      	movs	r1, #1
 800aedc:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800aee0:	f7ff fb58 	bl	800a594 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800aee4:	4604      	mov	r4, r0
 800aee6:	b900      	cbnz	r0, 800aeea <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800aee8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800aeea:	686b      	ldr	r3, [r5, #4]
 800aeec:	069b      	lsls	r3, r3, #26
 800aeee:	f100 80ca 	bmi.w	800b086 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800aef2:	1e20      	subs	r0, r4, #0
 800aef4:	bf18      	it	ne
 800aef6:	2001      	movne	r0, #1
}
 800aef8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800aefc:	2101      	movs	r1, #1
 800aefe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af02:	f7ff fb47 	bl	800a594 <RCCEx_PLL3_Config>
 800af06:	e6ac      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800af08:	2601      	movs	r6, #1
 800af0a:	4634      	mov	r4, r6
 800af0c:	e6b5      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800af0e:	4626      	mov	r6, r4
 800af10:	e6b3      	b.n	800ac7a <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800af12:	bf00      	nop
 800af14:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800af18:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800af1c:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800af20:	d003      	beq.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800af22:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800af26:	f47f aeba 	bne.w	800ac9e <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800af2a:	b9ac      	cbnz	r4, 800af58 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800af2c:	4a5b      	ldr	r2, [pc, #364]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800af2e:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800af32:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800af34:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800af38:	430b      	orrs	r3, r1
 800af3a:	6553      	str	r3, [r2, #84]	@ 0x54
 800af3c:	e6b1      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af3e:	2100      	movs	r1, #0
 800af40:	f105 0008 	add.w	r0, r5, #8
 800af44:	f7ff faae 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af48:	4604      	mov	r4, r0
        break;
 800af4a:	e7ee      	b.n	800af2a <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af4c:	2102      	movs	r1, #2
 800af4e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af52:	f7ff fb1f 	bl	800a594 <RCCEx_PLL3_Config>
 800af56:	e7f7      	b.n	800af48 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800af58:	4626      	mov	r6, r4
 800af5a:	e6a2      	b.n	800aca2 <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800af5c:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800af60:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800af64:	d003      	beq.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800af66:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800af6a:	f47f aeac 	bne.w	800acc6 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800af6e:	b9ac      	cbnz	r4, 800af9c <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800af70:	4a4a      	ldr	r2, [pc, #296]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800af72:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800af76:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800af78:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800af7c:	430b      	orrs	r3, r1
 800af7e:	6593      	str	r3, [r2, #88]	@ 0x58
 800af80:	e6a3      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800af82:	2100      	movs	r1, #0
 800af84:	f105 0008 	add.w	r0, r5, #8
 800af88:	f7ff fa8c 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af8c:	4604      	mov	r4, r0
        break;
 800af8e:	e7ee      	b.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800af90:	2102      	movs	r1, #2
 800af92:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800af96:	f7ff fafd 	bl	800a594 <RCCEx_PLL3_Config>
 800af9a:	e7f7      	b.n	800af8c <HAL_RCCEx_PeriphCLKConfig+0x908>
 800af9c:	4626      	mov	r6, r4
 800af9e:	e694      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800afa0:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800afa4:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800afa8:	d003      	beq.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800afaa:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800afae:	f47f ae9e 	bne.w	800acee <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800afb2:	b9ac      	cbnz	r4, 800afe0 <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800afb4:	4a39      	ldr	r2, [pc, #228]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800afb6:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800afba:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800afbc:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800afc0:	430b      	orrs	r3, r1
 800afc2:	6593      	str	r3, [r2, #88]	@ 0x58
 800afc4:	e695      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800afc6:	2100      	movs	r1, #0
 800afc8:	f105 0008 	add.w	r0, r5, #8
 800afcc:	f7ff fa6a 	bl	800a4a4 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afd0:	4604      	mov	r4, r0
        break;
 800afd2:	e7ee      	b.n	800afb2 <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afd4:	2102      	movs	r1, #2
 800afd6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afda:	f7ff fadb 	bl	800a594 <RCCEx_PLL3_Config>
 800afde:	e7f7      	b.n	800afd0 <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800afe0:	4626      	mov	r6, r4
 800afe2:	e686      	b.n	800acf2 <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800afe4:	2102      	movs	r1, #2
 800afe6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afea:	f7ff fad3 	bl	800a594 <RCCEx_PLL3_Config>
 800afee:	e6c3      	b.n	800ad78 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800aff0:	2601      	movs	r6, #1
 800aff2:	4634      	mov	r4, r6
 800aff4:	e6cc      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800aff6:	4626      	mov	r6, r4
 800aff8:	e6ca      	b.n	800ad90 <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800affa:	4a28      	ldr	r2, [pc, #160]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800affc:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800affe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b002:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b004:	b97c      	cbnz	r4, 800b026 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b006:	4a25      	ldr	r2, [pc, #148]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b008:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b00c:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b00e:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b012:	430b      	orrs	r3, r1
 800b014:	6553      	str	r3, [r2, #84]	@ 0x54
 800b016:	e6ce      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b018:	2101      	movs	r1, #1
 800b01a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b01e:	f7ff fab9 	bl	800a594 <RCCEx_PLL3_Config>
 800b022:	4604      	mov	r4, r0
        break;
 800b024:	e7ee      	b.n	800b004 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b026:	4626      	mov	r6, r4
 800b028:	e6c5      	b.n	800adb6 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b02a:	4a1c      	ldr	r2, [pc, #112]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b02c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b02e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b032:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b034:	b974      	cbnz	r4, 800b054 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b036:	4a19      	ldr	r2, [pc, #100]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b038:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b03a:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b03c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b040:	430b      	orrs	r3, r1
 800b042:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b044:	e6c4      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b046:	2102      	movs	r1, #2
 800b048:	f105 0008 	add.w	r0, r5, #8
 800b04c:	f7ff fa2a 	bl	800a4a4 <RCCEx_PLL2_Config>
 800b050:	4604      	mov	r4, r0
        break;
 800b052:	e7ef      	b.n	800b034 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800b054:	4626      	mov	r6, r4
 800b056:	e6bb      	b.n	800add0 <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800b058:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b05c:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b060:	f47f aed1 	bne.w	800ae06 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800b064:	2c00      	cmp	r4, #0
 800b066:	f47f aecf 	bne.w	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b06a:	4c0c      	ldr	r4, [pc, #48]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b06c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b06e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b072:	4302      	orrs	r2, r0
 800b074:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b076:	4634      	mov	r4, r6
 800b078:	e6c6      	b.n	800ae08 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b07a:	4f08      	ldr	r7, [pc, #32]	@ (800b09c <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b07c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b07e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b082:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b084:	e7ee      	b.n	800b064 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b086:	2102      	movs	r1, #2
 800b088:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b08c:	f7ff fa82 	bl	800a594 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b090:	2800      	cmp	r0, #0
 800b092:	f43f af2e 	beq.w	800aef2 <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800b096:	2001      	movs	r0, #1
 800b098:	e72e      	b.n	800aef8 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800b09a:	bf00      	nop
 800b09c:	58024400 	.word	0x58024400

0800b0a0 <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800b0a0:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b0a2:	f7ff f98f 	bl	800a3c4 <HAL_RCC_GetHCLKFreq>
 800b0a6:	4b05      	ldr	r3, [pc, #20]	@ (800b0bc <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800b0a8:	4a05      	ldr	r2, [pc, #20]	@ (800b0c0 <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800b0aa:	6a1b      	ldr	r3, [r3, #32]
 800b0ac:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b0b0:	5cd3      	ldrb	r3, [r2, r3]
 800b0b2:	f003 031f 	and.w	r3, r3, #31
}
 800b0b6:	40d8      	lsrs	r0, r3
 800b0b8:	bd08      	pop	{r3, pc}
 800b0ba:	bf00      	nop
 800b0bc:	58024400 	.word	0x58024400
 800b0c0:	08024120 	.word	0x08024120

0800b0c4 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0c4:	494f      	ldr	r1, [pc, #316]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b0c6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0c8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0ca:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0cc:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800b0ce:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b0d2:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0d6:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800b0d8:	f000 8090 	beq.w	800b1fc <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0dc:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0e0:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b0e4:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b0e8:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0ec:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b0f0:	4353      	muls	r3, r2
    switch (pllsource)
 800b0f2:	2c01      	cmp	r4, #1
 800b0f4:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b0f8:	ee06 3a90 	vmov	s13, r3
 800b0fc:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b100:	d06e      	beq.n	800b1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800b102:	2c02      	cmp	r4, #2
 800b104:	d05e      	beq.n	800b1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800b106:	2c00      	cmp	r4, #0
 800b108:	d16a      	bne.n	800b1e0 <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b10a:	680b      	ldr	r3, [r1, #0]
 800b10c:	069b      	lsls	r3, r3, #26
 800b10e:	d547      	bpl.n	800b1a0 <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b110:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b112:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b114:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b118:	4a3b      	ldr	r2, [pc, #236]	@ (800b208 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b11a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b11e:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b120:	ee07 2a90 	vmov	s15, r2
 800b124:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b128:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b12c:	ee07 3a10 	vmov	s14, r3
 800b130:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b134:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b138:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b13c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b140:	4a30      	ldr	r2, [pc, #192]	@ (800b204 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b142:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b144:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b148:	ee07 3a10 	vmov	s14, r3
 800b14c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b150:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b154:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b158:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b15c:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b160:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b162:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b166:	ee07 3a10 	vmov	s14, r3
 800b16a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b16e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b172:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b176:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b17a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b17e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b180:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b184:	ee06 3a90 	vmov	s13, r3
 800b188:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b18c:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b190:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b194:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b198:	ee17 3a90 	vmov	r3, s15
 800b19c:	6083      	str	r3, [r0, #8]
}
 800b19e:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1a0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b1a2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b20c <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b1a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1aa:	ee07 3a90 	vmov	s15, r3
 800b1ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1b6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1ba:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b1be:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b1c2:	e7bd      	b.n	800b140 <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1c4:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b1c6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b210 <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800b1ca:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ce:	ee07 3a90 	vmov	s15, r3
 800b1d2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1da:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b1de:	e7ec      	b.n	800b1ba <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b1e0:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b1e2:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b214 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b1e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b1ea:	ee07 3a90 	vmov	s15, r3
 800b1ee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b1f2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b1f6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b1fa:	e7de      	b.n	800b1ba <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b1fc:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b200:	e7cc      	b.n	800b19c <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800b202:	bf00      	nop
 800b204:	58024400 	.word	0x58024400
 800b208:	03d09000 	.word	0x03d09000
 800b20c:	4c742400 	.word	0x4c742400
 800b210:	4bbebc20 	.word	0x4bbebc20
 800b214:	4a742400 	.word	0x4a742400

0800b218 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b218:	494f      	ldr	r1, [pc, #316]	@ (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b21a:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b21c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b21e:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b220:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800b222:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b226:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b22a:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800b22c:	f000 8090 	beq.w	800b350 <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b230:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b234:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b238:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b23c:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b240:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b244:	4353      	muls	r3, r2
    switch (pllsource)
 800b246:	2c01      	cmp	r4, #1
 800b248:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b24c:	ee06 3a90 	vmov	s13, r3
 800b250:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b254:	d06e      	beq.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800b256:	2c02      	cmp	r4, #2
 800b258:	d05e      	beq.n	800b318 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800b25a:	2c00      	cmp	r4, #0
 800b25c:	d16a      	bne.n	800b334 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b25e:	680b      	ldr	r3, [r1, #0]
 800b260:	069b      	lsls	r3, r3, #26
 800b262:	d547      	bpl.n	800b2f4 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b264:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b266:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b268:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b26c:	4a3b      	ldr	r2, [pc, #236]	@ (800b35c <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b26e:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b272:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b274:	ee07 2a90 	vmov	s15, r2
 800b278:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b27c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b280:	ee07 3a10 	vmov	s14, r3
 800b284:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b288:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b28c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b290:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b294:	4a30      	ldr	r2, [pc, #192]	@ (800b358 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b296:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b298:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b29c:	ee07 3a10 	vmov	s14, r3
 800b2a0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2a4:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b2a8:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b2ac:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b2b0:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b2b4:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b2b6:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b2ba:	ee07 3a10 	vmov	s14, r3
 800b2be:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b2c2:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b2c6:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b2ca:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b2ce:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b2d2:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b2d4:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b2d8:	ee06 3a90 	vmov	s13, r3
 800b2dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b2e0:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b2e4:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b2e8:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b2ec:	ee17 3a90 	vmov	r3, s15
 800b2f0:	6083      	str	r3, [r0, #8]
}
 800b2f2:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b2f4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b2f6:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b360 <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b2fa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b2fe:	ee07 3a90 	vmov	s15, r3
 800b302:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b306:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b30a:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b30e:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b312:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b316:	e7bd      	b.n	800b294 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b318:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b31a:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b364 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800b31e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b322:	ee07 3a90 	vmov	s15, r3
 800b326:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b32a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b32e:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b332:	e7ec      	b.n	800b30e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b334:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b336:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b368 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b33a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b33e:	ee07 3a90 	vmov	s15, r3
 800b342:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b346:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b34a:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b34e:	e7de      	b.n	800b30e <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b350:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b354:	e7cc      	b.n	800b2f0 <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800b356:	bf00      	nop
 800b358:	58024400 	.word	0x58024400
 800b35c:	03d09000 	.word	0x03d09000
 800b360:	4c742400 	.word	0x4c742400
 800b364:	4bbebc20 	.word	0x4bbebc20
 800b368:	4a742400 	.word	0x4a742400

0800b36c <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b36c:	b538      	push	{r3, r4, r5, lr}
 800b36e:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b370:	4604      	mov	r4, r0
 800b372:	b1f0      	cbz	r0, 800b3b2 <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b374:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b378:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b37c:	b91b      	cbnz	r3, 800b386 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b37e:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b382:	f7f6 faa9 	bl	80018d8 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b386:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b388:	1d21      	adds	r1, r4, #4
 800b38a:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b38c:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b390:	f000 ff8a 	bl	800c2a8 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b394:	6862      	ldr	r2, [r4, #4]
 800b396:	4629      	mov	r1, r5
 800b398:	6820      	ldr	r0, [r4, #0]
 800b39a:	f000 ffbd 	bl	800c318 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b39e:	4a06      	ldr	r2, [pc, #24]	@ (800b3b8 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800b3a0:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800b3a2:	6813      	ldr	r3, [r2, #0]
 800b3a4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b3a8:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b3aa:	2301      	movs	r3, #1
 800b3ac:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800b3b0:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b3b2:	2001      	movs	r0, #1
 800b3b4:	e7fc      	b.n	800b3b0 <HAL_SDRAM_Init+0x44>
 800b3b6:	bf00      	nop
 800b3b8:	52004000 	.word	0x52004000

0800b3bc <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800b3bc:	b510      	push	{r4, lr}
 800b3be:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800b3c0:	f7f6 fb24 	bl	8001a0c <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800b3c4:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b3c8:	f000 ffdc 	bl	800c384 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800b3cc:	2000      	movs	r0, #0
 800b3ce:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800b3d2:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800b3d6:	bd10      	pop	{r4, pc}

0800b3d8 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b3d8:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b3da:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b3de:	4605      	mov	r5, r0
 800b3e0:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b3e2:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b3e4:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b3e6:	d010      	beq.n	800b40a <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b3e8:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800b3ec:	2c01      	cmp	r4, #1
 800b3ee:	d110      	bne.n	800b412 <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b3f0:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b3f2:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b3f4:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b3f8:	f000 ffd3 	bl	800c3a2 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b3fc:	6833      	ldr	r3, [r6, #0]
 800b3fe:	2b02      	cmp	r3, #2
 800b400:	d104      	bne.n	800b40c <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b402:	2305      	movs	r3, #5
 800b404:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b408:	2000      	movs	r0, #0
}
 800b40a:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b40c:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800b410:	e7fa      	b.n	800b408 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b412:	2001      	movs	r0, #1
 800b414:	e7f9      	b.n	800b40a <HAL_SDRAM_SendCommand+0x32>

0800b416 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b416:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b418:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b41c:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b41e:	2b02      	cmp	r3, #2
 800b420:	b2d8      	uxtb	r0, r3
 800b422:	d00d      	beq.n	800b440 <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b424:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b428:	2b01      	cmp	r3, #1
 800b42a:	b2dd      	uxtb	r5, r3
 800b42c:	d109      	bne.n	800b442 <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b42e:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b430:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b432:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b436:	f000 ffc6 	bl	800c3c6 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b43a:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b43c:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800b440:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b442:	2001      	movs	r0, #1
 800b444:	e7fc      	b.n	800b440 <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800b446 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b446:	4770      	bx	lr

0800b448 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b448:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b44c:	2b01      	cmp	r3, #1
 800b44e:	d12f      	bne.n	800b4b0 <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b450:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b452:	4a18      	ldr	r2, [pc, #96]	@ (800b4b4 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b454:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b458:	6803      	ldr	r3, [r0, #0]
 800b45a:	4293      	cmp	r3, r2
 800b45c:	d01a      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b45e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b462:	d017      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b464:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b468:	4293      	cmp	r3, r2
 800b46a:	d013      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b46c:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b470:	4293      	cmp	r3, r2
 800b472:	d00f      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b474:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b478:	4293      	cmp	r3, r2
 800b47a:	d00b      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b47c:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b480:	4293      	cmp	r3, r2
 800b482:	d007      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b484:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b488:	4293      	cmp	r3, r2
 800b48a:	d003      	beq.n	800b494 <HAL_TIM_Base_Start+0x4c>
 800b48c:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b490:	4293      	cmp	r3, r2
 800b492:	d107      	bne.n	800b4a4 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b494:	6899      	ldr	r1, [r3, #8]
 800b496:	4a08      	ldr	r2, [pc, #32]	@ (800b4b8 <HAL_TIM_Base_Start+0x70>)
 800b498:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b49a:	2a06      	cmp	r2, #6
 800b49c:	d006      	beq.n	800b4ac <HAL_TIM_Base_Start+0x64>
 800b49e:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b4a2:	d003      	beq.n	800b4ac <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800b4a4:	681a      	ldr	r2, [r3, #0]
 800b4a6:	f042 0201 	orr.w	r2, r2, #1
 800b4aa:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b4ac:	2000      	movs	r0, #0
 800b4ae:	4770      	bx	lr
    return HAL_ERROR;
 800b4b0:	2001      	movs	r0, #1
}
 800b4b2:	4770      	bx	lr
 800b4b4:	40010000 	.word	0x40010000
 800b4b8:	00010007 	.word	0x00010007

0800b4bc <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b4bc:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b4c0:	2b01      	cmp	r3, #1
 800b4c2:	d133      	bne.n	800b52c <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b4c4:	2302      	movs	r3, #2
 800b4c6:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b4ca:	6803      	ldr	r3, [r0, #0]
 800b4cc:	68da      	ldr	r2, [r3, #12]
 800b4ce:	f042 0201 	orr.w	r2, r2, #1
 800b4d2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b4d4:	4a16      	ldr	r2, [pc, #88]	@ (800b530 <HAL_TIM_Base_Start_IT+0x74>)
 800b4d6:	4293      	cmp	r3, r2
 800b4d8:	d01a      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b4da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b4de:	d017      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b4e0:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b4e4:	4293      	cmp	r3, r2
 800b4e6:	d013      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b4e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b4ec:	4293      	cmp	r3, r2
 800b4ee:	d00f      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b4f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b4f4:	4293      	cmp	r3, r2
 800b4f6:	d00b      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b4f8:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d007      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b500:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b504:	4293      	cmp	r3, r2
 800b506:	d003      	beq.n	800b510 <HAL_TIM_Base_Start_IT+0x54>
 800b508:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b50c:	4293      	cmp	r3, r2
 800b50e:	d107      	bne.n	800b520 <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b510:	6899      	ldr	r1, [r3, #8]
 800b512:	4a08      	ldr	r2, [pc, #32]	@ (800b534 <HAL_TIM_Base_Start_IT+0x78>)
 800b514:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b516:	2a06      	cmp	r2, #6
 800b518:	d006      	beq.n	800b528 <HAL_TIM_Base_Start_IT+0x6c>
 800b51a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b51e:	d003      	beq.n	800b528 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800b520:	681a      	ldr	r2, [r3, #0]
 800b522:	f042 0201 	orr.w	r2, r2, #1
 800b526:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b528:	2000      	movs	r0, #0
 800b52a:	4770      	bx	lr
    return HAL_ERROR;
 800b52c:	2001      	movs	r0, #1
}
 800b52e:	4770      	bx	lr
 800b530:	40010000 	.word	0x40010000
 800b534:	00010007 	.word	0x00010007

0800b538 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800b538:	4770      	bx	lr

0800b53a <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800b53a:	4770      	bx	lr

0800b53c <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800b53c:	4770      	bx	lr

0800b53e <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800b53e:	4770      	bx	lr

0800b540 <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800b540:	6803      	ldr	r3, [r0, #0]
{
 800b542:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800b544:	68dd      	ldr	r5, [r3, #12]
{
 800b546:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800b548:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b54a:	07b2      	lsls	r2, r6, #30
 800b54c:	d50d      	bpl.n	800b56a <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b54e:	07a9      	lsls	r1, r5, #30
 800b550:	d50b      	bpl.n	800b56a <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b552:	f06f 0202 	mvn.w	r2, #2
 800b556:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b558:	2201      	movs	r2, #1
 800b55a:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b55c:	699b      	ldr	r3, [r3, #24]
 800b55e:	079a      	lsls	r2, r3, #30
 800b560:	d075      	beq.n	800b64e <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b562:	f7ff ffea 	bl	800b53a <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b566:	2300      	movs	r3, #0
 800b568:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b56a:	0773      	lsls	r3, r6, #29
 800b56c:	d510      	bpl.n	800b590 <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b56e:	0768      	lsls	r0, r5, #29
 800b570:	d50e      	bpl.n	800b590 <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b572:	6823      	ldr	r3, [r4, #0]
 800b574:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b578:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b57a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b57c:	2202      	movs	r2, #2
 800b57e:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b580:	699b      	ldr	r3, [r3, #24]
 800b582:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b586:	d068      	beq.n	800b65a <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b588:	f7ff ffd7 	bl	800b53a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b58c:	2300      	movs	r3, #0
 800b58e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b590:	0731      	lsls	r1, r6, #28
 800b592:	d50f      	bpl.n	800b5b4 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b594:	072a      	lsls	r2, r5, #28
 800b596:	d50d      	bpl.n	800b5b4 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b598:	6823      	ldr	r3, [r4, #0]
 800b59a:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b59e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b5a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b5a2:	2204      	movs	r2, #4
 800b5a4:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b5a6:	69db      	ldr	r3, [r3, #28]
 800b5a8:	079b      	lsls	r3, r3, #30
 800b5aa:	d05c      	beq.n	800b666 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800b5ac:	f7ff ffc5 	bl	800b53a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5b0:	2300      	movs	r3, #0
 800b5b2:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b5b4:	06f1      	lsls	r1, r6, #27
 800b5b6:	d510      	bpl.n	800b5da <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b5b8:	06ea      	lsls	r2, r5, #27
 800b5ba:	d50e      	bpl.n	800b5da <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5bc:	6823      	ldr	r3, [r4, #0]
 800b5be:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800b5c2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b5c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b5c6:	2208      	movs	r2, #8
 800b5c8:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b5ca:	69db      	ldr	r3, [r3, #28]
 800b5cc:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b5d0:	d04f      	beq.n	800b672 <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800b5d2:	f7ff ffb2 	bl	800b53a <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b5d6:	2300      	movs	r3, #0
 800b5d8:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b5da:	07f3      	lsls	r3, r6, #31
 800b5dc:	d508      	bpl.n	800b5f0 <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b5de:	07e8      	lsls	r0, r5, #31
 800b5e0:	d506      	bpl.n	800b5f0 <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b5e2:	6823      	ldr	r3, [r4, #0]
 800b5e4:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5e8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b5ea:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b5ec:	f7f5 feea 	bl	80013c4 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b5f0:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800b5f4:	d008      	beq.n	800b608 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b5f6:	0629      	lsls	r1, r5, #24
 800b5f8:	d506      	bpl.n	800b608 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b5fa:	6823      	ldr	r3, [r4, #0]
 800b5fc:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800b600:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b602:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b604:	f000 f8d7 	bl	800b7b6 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b608:	05f2      	lsls	r2, r6, #23
 800b60a:	d508      	bpl.n	800b61e <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b60c:	062b      	lsls	r3, r5, #24
 800b60e:	d506      	bpl.n	800b61e <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b610:	6823      	ldr	r3, [r4, #0]
 800b612:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b616:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b618:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b61a:	f000 f8cd 	bl	800b7b8 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b61e:	0670      	lsls	r0, r6, #25
 800b620:	d508      	bpl.n	800b634 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b622:	0669      	lsls	r1, r5, #25
 800b624:	d506      	bpl.n	800b634 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800b62c:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b62e:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b630:	f7ff ff85 	bl	800b53e <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800b634:	06b2      	lsls	r2, r6, #26
 800b636:	d522      	bpl.n	800b67e <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800b638:	06ab      	lsls	r3, r5, #26
 800b63a:	d520      	bpl.n	800b67e <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b63c:	6823      	ldr	r3, [r4, #0]
 800b63e:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800b642:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800b644:	611a      	str	r2, [r3, #16]
}
 800b646:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800b64a:	f000 b8b3 	b.w	800b7b4 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b64e:	f7ff ff73 	bl	800b538 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b652:	4620      	mov	r0, r4
 800b654:	f7ff ff72 	bl	800b53c <HAL_TIM_PWM_PulseFinishedCallback>
 800b658:	e785      	b.n	800b566 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b65a:	f7ff ff6d 	bl	800b538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b65e:	4620      	mov	r0, r4
 800b660:	f7ff ff6c 	bl	800b53c <HAL_TIM_PWM_PulseFinishedCallback>
 800b664:	e792      	b.n	800b58c <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b666:	f7ff ff67 	bl	800b538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b66a:	4620      	mov	r0, r4
 800b66c:	f7ff ff66 	bl	800b53c <HAL_TIM_PWM_PulseFinishedCallback>
 800b670:	e79e      	b.n	800b5b0 <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b672:	f7ff ff61 	bl	800b538 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b676:	4620      	mov	r0, r4
 800b678:	f7ff ff60 	bl	800b53c <HAL_TIM_PWM_PulseFinishedCallback>
 800b67c:	e7ab      	b.n	800b5d6 <HAL_TIM_IRQHandler+0x96>
}
 800b67e:	bd70      	pop	{r4, r5, r6, pc}

0800b680 <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b680:	4a32      	ldr	r2, [pc, #200]	@ (800b74c <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800b682:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800b684:	4290      	cmp	r0, r2
 800b686:	d012      	beq.n	800b6ae <TIM_Base_SetConfig+0x2e>
 800b688:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b68c:	d00f      	beq.n	800b6ae <TIM_Base_SetConfig+0x2e>
 800b68e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b692:	4290      	cmp	r0, r2
 800b694:	d00b      	beq.n	800b6ae <TIM_Base_SetConfig+0x2e>
 800b696:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b69a:	4290      	cmp	r0, r2
 800b69c:	d007      	beq.n	800b6ae <TIM_Base_SetConfig+0x2e>
 800b69e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b6a2:	4290      	cmp	r0, r2
 800b6a4:	d003      	beq.n	800b6ae <TIM_Base_SetConfig+0x2e>
 800b6a6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b6aa:	4290      	cmp	r0, r2
 800b6ac:	d119      	bne.n	800b6e2 <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800b6ae:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800b6b0:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800b6b4:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800b6b6:	4a25      	ldr	r2, [pc, #148]	@ (800b74c <TIM_Base_SetConfig+0xcc>)
 800b6b8:	4290      	cmp	r0, r2
 800b6ba:	d01d      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6bc:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800b6c0:	d01a      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6c2:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b6c6:	4290      	cmp	r0, r2
 800b6c8:	d016      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6ca:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b6ce:	4290      	cmp	r0, r2
 800b6d0:	d012      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6d2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b6d6:	4290      	cmp	r0, r2
 800b6d8:	d00e      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6da:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b6de:	4290      	cmp	r0, r2
 800b6e0:	d00a      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6e2:	4a1b      	ldr	r2, [pc, #108]	@ (800b750 <TIM_Base_SetConfig+0xd0>)
 800b6e4:	4290      	cmp	r0, r2
 800b6e6:	d007      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6e8:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b6ec:	4290      	cmp	r0, r2
 800b6ee:	d003      	beq.n	800b6f8 <TIM_Base_SetConfig+0x78>
 800b6f0:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b6f4:	4290      	cmp	r0, r2
 800b6f6:	d103      	bne.n	800b700 <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800b6f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800b6fc:	68ca      	ldr	r2, [r1, #12]
 800b6fe:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800b700:	694a      	ldr	r2, [r1, #20]
 800b702:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800b706:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800b708:	688a      	ldr	r2, [r1, #8]
 800b70a:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800b70c:	680a      	ldr	r2, [r1, #0]
 800b70e:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800b710:	4a0e      	ldr	r2, [pc, #56]	@ (800b74c <TIM_Base_SetConfig+0xcc>)
 800b712:	4290      	cmp	r0, r2
 800b714:	d00f      	beq.n	800b736 <TIM_Base_SetConfig+0xb6>
 800b716:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b71a:	4290      	cmp	r0, r2
 800b71c:	d00b      	beq.n	800b736 <TIM_Base_SetConfig+0xb6>
 800b71e:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800b722:	4290      	cmp	r0, r2
 800b724:	d007      	beq.n	800b736 <TIM_Base_SetConfig+0xb6>
 800b726:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b72a:	4290      	cmp	r0, r2
 800b72c:	d003      	beq.n	800b736 <TIM_Base_SetConfig+0xb6>
 800b72e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b732:	4290      	cmp	r0, r2
 800b734:	d101      	bne.n	800b73a <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800b736:	690a      	ldr	r2, [r1, #16]
 800b738:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800b73a:	6802      	ldr	r2, [r0, #0]
 800b73c:	f042 0204 	orr.w	r2, r2, #4
 800b740:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800b742:	2201      	movs	r2, #1
 800b744:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800b746:	6003      	str	r3, [r0, #0]
}
 800b748:	4770      	bx	lr
 800b74a:	bf00      	nop
 800b74c:	40010000 	.word	0x40010000
 800b750:	40014000 	.word	0x40014000

0800b754 <HAL_TIM_Base_Init>:
{
 800b754:	b510      	push	{r4, lr}
  if (htim == NULL)
 800b756:	4604      	mov	r4, r0
 800b758:	b350      	cbz	r0, 800b7b0 <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800b75a:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b75e:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b762:	b91b      	cbnz	r3, 800b76c <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800b764:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800b768:	f7ff fe6d 	bl	800b446 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800b76c:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b76e:	6820      	ldr	r0, [r4, #0]
 800b770:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800b772:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b776:	f7ff ff83 	bl	800b680 <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b77a:	2301      	movs	r3, #1
  return HAL_OK;
 800b77c:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b77e:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b782:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800b786:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800b78a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800b78e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800b792:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b796:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b79a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800b79e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800b7a2:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800b7a6:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800b7aa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800b7ae:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800b7b0:	2001      	movs	r0, #1
 800b7b2:	e7fc      	b.n	800b7ae <HAL_TIM_Base_Init+0x5a>

0800b7b4 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800b7b4:	4770      	bx	lr

0800b7b6 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800b7b6:	4770      	bx	lr

0800b7b8 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800b7b8:	4770      	bx	lr
	...

0800b7bc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b7bc:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800b7be:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7c0:	e852 3f00 	ldrex	r3, [r2]
 800b7c4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7c8:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800b7cc:	6802      	ldr	r2, [r0, #0]
 800b7ce:	2900      	cmp	r1, #0
 800b7d0:	d1f5      	bne.n	800b7be <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800b7d2:	4c0f      	ldr	r4, [pc, #60]	@ (800b810 <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7d4:	f102 0308 	add.w	r3, r2, #8
 800b7d8:	e853 3f00 	ldrex	r3, [r3]
 800b7dc:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7de:	f102 0c08 	add.w	ip, r2, #8
 800b7e2:	e84c 3100 	strex	r1, r3, [ip]
 800b7e6:	2900      	cmp	r1, #0
 800b7e8:	d1f4      	bne.n	800b7d4 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b7ea:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800b7ec:	2b01      	cmp	r3, #1
 800b7ee:	d107      	bne.n	800b800 <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b7f0:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800b7f4:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b7f8:	e842 3100 	strex	r1, r3, [r2]
 800b7fc:	2900      	cmp	r1, #0
 800b7fe:	d1f7      	bne.n	800b7f0 <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b800:	2320      	movs	r3, #32
 800b802:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800b806:	2300      	movs	r3, #0
 800b808:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800b80a:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800b80c:	bd10      	pop	{r4, pc}
 800b80e:	bf00      	nop
 800b810:	effffffe 	.word	0xeffffffe

0800b814 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800b814:	4770      	bx	lr

0800b816 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800b816:	4770      	bx	lr

0800b818 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b818:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800b81a:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800b81c:	2300      	movs	r3, #0
 800b81e:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b822:	f7ff fff8 	bl	800b816 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b826:	bd08      	pop	{r3, pc}

0800b828 <HAL_UARTEx_RxEventCallback>:
}
 800b828:	4770      	bx	lr
	...

0800b82c <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b82c:	6803      	ldr	r3, [r0, #0]
{
 800b82e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800b832:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 800b834:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800b838:	681a      	ldr	r2, [r3, #0]
{
 800b83a:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800b83c:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800b83e:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800b840:	d110      	bne.n	800b864 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b842:	068e      	lsls	r6, r1, #26
 800b844:	f140 8097 	bpl.w	800b976 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b848:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b84c:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 800b850:	433e      	orrs	r6, r7
 800b852:	f000 8090 	beq.w	800b976 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 800b856:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800b858:	2b00      	cmp	r3, #0
 800b85a:	f000 8085 	beq.w	800b968 <HAL_UART_IRQHandler+0x13c>
}
 800b85e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b862:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b864:	4ea6      	ldr	r6, [pc, #664]	@ (800bb00 <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b866:	48a7      	ldr	r0, [pc, #668]	@ (800bb04 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800b868:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800b86a:	4010      	ands	r0, r2
 800b86c:	4330      	orrs	r0, r6
 800b86e:	f000 8082 	beq.w	800b976 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800b872:	07cf      	lsls	r7, r1, #31
 800b874:	d509      	bpl.n	800b88a <HAL_UART_IRQHandler+0x5e>
 800b876:	05d0      	lsls	r0, r2, #23
 800b878:	d507      	bpl.n	800b88a <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800b87a:	2001      	movs	r0, #1
 800b87c:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800b87e:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b882:	f040 0001 	orr.w	r0, r0, #1
 800b886:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b88a:	078f      	lsls	r7, r1, #30
 800b88c:	d509      	bpl.n	800b8a2 <HAL_UART_IRQHandler+0x76>
 800b88e:	07e8      	lsls	r0, r5, #31
 800b890:	d507      	bpl.n	800b8a2 <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800b892:	2002      	movs	r0, #2
 800b894:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800b896:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b89a:	f040 0004 	orr.w	r0, r0, #4
 800b89e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800b8a2:	074f      	lsls	r7, r1, #29
 800b8a4:	d509      	bpl.n	800b8ba <HAL_UART_IRQHandler+0x8e>
 800b8a6:	07e8      	lsls	r0, r5, #31
 800b8a8:	d507      	bpl.n	800b8ba <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800b8aa:	2004      	movs	r0, #4
 800b8ac:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800b8ae:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b8b2:	f040 0002 	orr.w	r0, r0, #2
 800b8b6:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800b8ba:	070f      	lsls	r7, r1, #28
 800b8bc:	d50b      	bpl.n	800b8d6 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800b8be:	f002 0020 	and.w	r0, r2, #32
 800b8c2:	4330      	orrs	r0, r6
 800b8c4:	d007      	beq.n	800b8d6 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800b8c6:	2008      	movs	r0, #8
 800b8c8:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800b8ca:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800b8ce:	f040 0008 	orr.w	r0, r0, #8
 800b8d2:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800b8d6:	050e      	lsls	r6, r1, #20
 800b8d8:	d50a      	bpl.n	800b8f0 <HAL_UART_IRQHandler+0xc4>
 800b8da:	0150      	lsls	r0, r2, #5
 800b8dc:	d508      	bpl.n	800b8f0 <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800b8de:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800b8e2:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800b8e4:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800b8e8:	f043 0320 	orr.w	r3, r3, #32
 800b8ec:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800b8f0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800b8f4:	2b00      	cmp	r3, #0
 800b8f6:	d037      	beq.n	800b968 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800b8f8:	068b      	lsls	r3, r1, #26
 800b8fa:	d509      	bpl.n	800b910 <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800b8fc:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800b900:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800b904:	432a      	orrs	r2, r5
 800b906:	d003      	beq.n	800b910 <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 800b908:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800b90a:	b10b      	cbz	r3, 800b910 <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800b90c:	4620      	mov	r0, r4
 800b90e:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b910:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800b912:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800b914:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b918:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800b91a:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800b91e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800b922:	ea53 0502 	orrs.w	r5, r3, r2
 800b926:	d021      	beq.n	800b96c <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 800b928:	f7ff ff48 	bl	800b7bc <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b92c:	68b3      	ldr	r3, [r6, #8]
 800b92e:	065f      	lsls	r7, r3, #25
 800b930:	d517      	bpl.n	800b962 <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800b932:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b934:	f102 0308 	add.w	r3, r2, #8
 800b938:	e853 3f00 	ldrex	r3, [r3]
 800b93c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800b940:	3208      	adds	r2, #8
 800b942:	e842 3100 	strex	r1, r3, [r2]
 800b946:	2900      	cmp	r1, #0
 800b948:	d1f3      	bne.n	800b932 <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800b94a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800b94e:	b140      	cbz	r0, 800b962 <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800b950:	4b6d      	ldr	r3, [pc, #436]	@ (800bb08 <HAL_UART_IRQHandler+0x2dc>)
 800b952:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800b954:	f7fa ff7e 	bl	8006854 <HAL_DMA_Abort_IT>
 800b958:	b130      	cbz	r0, 800b968 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800b95a:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800b95e:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800b960:	e77d      	b.n	800b85e <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 800b962:	4620      	mov	r0, r4
 800b964:	f7ff ff57 	bl	800b816 <HAL_UART_ErrorCallback>
}
 800b968:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800b96c:	f7ff ff53 	bl	800b816 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800b970:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 800b974:	e7f8      	b.n	800b968 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800b976:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800b978:	2801      	cmp	r0, #1
 800b97a:	f040 80b5 	bne.w	800bae8 <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800b97e:	06ce      	lsls	r6, r1, #27
 800b980:	f140 80b2 	bpl.w	800bae8 <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800b984:	06d0      	lsls	r0, r2, #27
 800b986:	f140 80af 	bpl.w	800bae8 <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b98a:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b98c:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800b990:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800b992:	689a      	ldr	r2, [r3, #8]
 800b994:	0652      	lsls	r2, r2, #25
 800b996:	d577      	bpl.n	800ba88 <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800b998:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800b99c:	495b      	ldr	r1, [pc, #364]	@ (800bb0c <HAL_UART_IRQHandler+0x2e0>)
 800b99e:	682a      	ldr	r2, [r5, #0]
 800b9a0:	428a      	cmp	r2, r1
 800b9a2:	d01e      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9a4:	3118      	adds	r1, #24
 800b9a6:	428a      	cmp	r2, r1
 800b9a8:	d01b      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9aa:	3118      	adds	r1, #24
 800b9ac:	428a      	cmp	r2, r1
 800b9ae:	d018      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9b0:	3118      	adds	r1, #24
 800b9b2:	428a      	cmp	r2, r1
 800b9b4:	d015      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9b6:	3118      	adds	r1, #24
 800b9b8:	428a      	cmp	r2, r1
 800b9ba:	d012      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9bc:	3118      	adds	r1, #24
 800b9be:	428a      	cmp	r2, r1
 800b9c0:	d00f      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9c2:	3118      	adds	r1, #24
 800b9c4:	428a      	cmp	r2, r1
 800b9c6:	d00c      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9c8:	3118      	adds	r1, #24
 800b9ca:	428a      	cmp	r2, r1
 800b9cc:	d009      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9ce:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800b9d2:	428a      	cmp	r2, r1
 800b9d4:	d005      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9d6:	3118      	adds	r1, #24
 800b9d8:	428a      	cmp	r2, r1
 800b9da:	d002      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9dc:	3118      	adds	r1, #24
 800b9de:	428a      	cmp	r2, r1
 800b9e0:	d0ff      	beq.n	800b9e2 <HAL_UART_IRQHandler+0x1b6>
 800b9e2:	6851      	ldr	r1, [r2, #4]
 800b9e4:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800b9e6:	2900      	cmp	r1, #0
 800b9e8:	d043      	beq.n	800ba72 <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800b9ea:	4281      	cmp	r1, r0
 800b9ec:	d241      	bcs.n	800ba72 <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9ee:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800b9f0:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800b9f4:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800b9f8:	d02f      	beq.n	800ba5a <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800b9fa:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800b9fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba02:	e843 2100 	strex	r1, r2, [r3]
 800ba06:	2900      	cmp	r1, #0
 800ba08:	d1f7      	bne.n	800b9fa <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba0a:	f103 0208 	add.w	r2, r3, #8
 800ba0e:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ba12:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba16:	f103 0008 	add.w	r0, r3, #8
 800ba1a:	e840 2100 	strex	r1, r2, [r0]
 800ba1e:	2900      	cmp	r1, #0
 800ba20:	d1f3      	bne.n	800ba0a <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba22:	f103 0208 	add.w	r2, r3, #8
 800ba26:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800ba2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba2e:	f103 0008 	add.w	r0, r3, #8
 800ba32:	e840 2100 	strex	r1, r2, [r0]
 800ba36:	2900      	cmp	r1, #0
 800ba38:	d1f3      	bne.n	800ba22 <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800ba3a:	2220      	movs	r2, #32
 800ba3c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ba40:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ba42:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ba46:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ba4a:	e843 2100 	strex	r1, r2, [r3]
 800ba4e:	2900      	cmp	r1, #0
 800ba50:	d1f7      	bne.n	800ba42 <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800ba52:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800ba56:	f7fa fd57 	bl	8006508 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba5a:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba5c:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba60:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ba62:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800ba66:	1ac9      	subs	r1, r1, r3
 800ba68:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800ba6a:	4620      	mov	r0, r4
 800ba6c:	f7ff fedc 	bl	800b828 <HAL_UARTEx_RxEventCallback>
 800ba70:	e77a      	b.n	800b968 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800ba72:	4281      	cmp	r1, r0
 800ba74:	f47f af78 	bne.w	800b968 <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800ba78:	69eb      	ldr	r3, [r5, #28]
 800ba7a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ba7e:	f47f af73 	bne.w	800b968 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ba82:	2302      	movs	r3, #2
 800ba84:	6723      	str	r3, [r4, #112]	@ 0x70
 800ba86:	e7f0      	b.n	800ba6a <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba88:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800ba8c:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba90:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800ba92:	b289      	uxth	r1, r1
 800ba94:	2900      	cmp	r1, #0
 800ba96:	f43f af67 	beq.w	800b968 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ba9a:	1a80      	subs	r0, r0, r2
 800ba9c:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 800ba9e:	2900      	cmp	r1, #0
 800baa0:	f43f af62 	beq.w	800b968 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800baa4:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800baa8:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800baac:	e843 2000 	strex	r0, r2, [r3]
 800bab0:	2800      	cmp	r0, #0
 800bab2:	d1f7      	bne.n	800baa4 <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bab4:	4d16      	ldr	r5, [pc, #88]	@ (800bb10 <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bab6:	f103 0208 	add.w	r2, r3, #8
 800baba:	e852 2f00 	ldrex	r2, [r2]
 800babe:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bac0:	f103 0608 	add.w	r6, r3, #8
 800bac4:	e846 2000 	strex	r0, r2, [r6]
 800bac8:	2800      	cmp	r0, #0
 800baca:	d1f4      	bne.n	800bab6 <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 800bacc:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800bace:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800bad0:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bad4:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bad6:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bada:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bade:	e843 2000 	strex	r0, r2, [r3]
 800bae2:	2800      	cmp	r0, #0
 800bae4:	d1f7      	bne.n	800bad6 <HAL_UART_IRQHandler+0x2aa>
 800bae6:	e7cc      	b.n	800ba82 <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800bae8:	02cf      	lsls	r7, r1, #11
 800baea:	d513      	bpl.n	800bb14 <HAL_UART_IRQHandler+0x2e8>
 800baec:	026e      	lsls	r6, r5, #9
 800baee:	d511      	bpl.n	800bb14 <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800baf0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800baf4:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800baf6:	621a      	str	r2, [r3, #32]
}
 800baf8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800bafc:	f000 bb76 	b.w	800c1ec <HAL_UARTEx_WakeupCallback>
 800bb00:	10000001 	.word	0x10000001
 800bb04:	04000120 	.word	0x04000120
 800bb08:	0800b819 	.word	0x0800b819
 800bb0c:	40020010 	.word	0x40020010
 800bb10:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bb14:	0608      	lsls	r0, r1, #24
 800bb16:	d50b      	bpl.n	800bb30 <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bb18:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bb1c:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 800bb20:	4328      	orrs	r0, r5
 800bb22:	d005      	beq.n	800bb30 <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 800bb24:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bb26:	2b00      	cmp	r3, #0
 800bb28:	f43f af1e 	beq.w	800b968 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800bb2c:	4620      	mov	r0, r4
 800bb2e:	e696      	b.n	800b85e <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800bb30:	064f      	lsls	r7, r1, #25
 800bb32:	d511      	bpl.n	800bb58 <HAL_UART_IRQHandler+0x32c>
 800bb34:	0656      	lsls	r6, r2, #25
 800bb36:	d50f      	bpl.n	800bb58 <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb38:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bb3c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb40:	e843 2100 	strex	r1, r2, [r3]
 800bb44:	2900      	cmp	r1, #0
 800bb46:	d1f7      	bne.n	800bb38 <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bb48:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bb4a:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800bb4c:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 800bb4e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 800bb52:	f7ff fe5f 	bl	800b814 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bb56:	e707      	b.n	800b968 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bb58:	020d      	lsls	r5, r1, #8
 800bb5a:	d506      	bpl.n	800bb6a <HAL_UART_IRQHandler+0x33e>
 800bb5c:	0050      	lsls	r0, r2, #1
 800bb5e:	d504      	bpl.n	800bb6a <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb60:	4620      	mov	r0, r4
}
 800bb62:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bb66:	f000 bb43 	b.w	800c1f0 <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bb6a:	01cb      	lsls	r3, r1, #7
 800bb6c:	f57f aefc 	bpl.w	800b968 <HAL_UART_IRQHandler+0x13c>
 800bb70:	2a00      	cmp	r2, #0
 800bb72:	f6bf aef9 	bge.w	800b968 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb76:	4620      	mov	r0, r4
}
 800bb78:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bb7c:	f000 bb37 	b.w	800c1ee <HAL_UARTEx_RxFifoFullCallback>

0800bb80 <UART_SetConfig>:
{
 800bb80:	b530      	push	{r4, r5, lr}
 800bb82:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bb84:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb86:	69c0      	ldr	r0, [r0, #28]
{
 800bb88:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb8a:	6921      	ldr	r1, [r4, #16]
 800bb8c:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb8e:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb90:	430a      	orrs	r2, r1
 800bb92:	6961      	ldr	r1, [r4, #20]
 800bb94:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb96:	499c      	ldr	r1, [pc, #624]	@ (800be08 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bb98:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bb9a:	4029      	ands	r1, r5
 800bb9c:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bb9e:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bba0:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bba2:	685a      	ldr	r2, [r3, #4]
 800bba4:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800bba8:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bbaa:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bbac:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bbae:	4a97      	ldr	r2, [pc, #604]	@ (800be0c <UART_SetConfig+0x28c>)
 800bbb0:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800bbb2:	bf1c      	itt	ne
 800bbb4:	6a22      	ldrne	r2, [r4, #32]
 800bbb6:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbb8:	689a      	ldr	r2, [r3, #8]
 800bbba:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800bbbe:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800bbc2:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbc4:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bbc6:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bbc8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbca:	f022 020f 	bic.w	r2, r2, #15
 800bbce:	430a      	orrs	r2, r1
 800bbd0:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bbd2:	4a8f      	ldr	r2, [pc, #572]	@ (800be10 <UART_SetConfig+0x290>)
 800bbd4:	4293      	cmp	r3, r2
 800bbd6:	d128      	bne.n	800bc2a <UART_SetConfig+0xaa>
 800bbd8:	4b8e      	ldr	r3, [pc, #568]	@ (800be14 <UART_SetConfig+0x294>)
 800bbda:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bbdc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bbe0:	2b18      	cmp	r3, #24
 800bbe2:	f000 812f 	beq.w	800be44 <UART_SetConfig+0x2c4>
 800bbe6:	d814      	bhi.n	800bc12 <UART_SetConfig+0x92>
 800bbe8:	2b08      	cmp	r3, #8
 800bbea:	f000 8154 	beq.w	800be96 <UART_SetConfig+0x316>
 800bbee:	2b10      	cmp	r3, #16
 800bbf0:	f000 8102 	beq.w	800bdf8 <UART_SetConfig+0x278>
 800bbf4:	2b00      	cmp	r3, #0
 800bbf6:	f000 80f9 	beq.w	800bdec <UART_SetConfig+0x26c>
 800bbfa:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bbfc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bc00:	f040 80b4 	bne.w	800bd6c <UART_SetConfig+0x1ec>
    switch (clocksource)
 800bc04:	2b08      	cmp	r3, #8
 800bc06:	d846      	bhi.n	800bc96 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bc08:	4668      	mov	r0, sp
 800bc0a:	f7ff fa5b 	bl	800b0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bc0e:	9801      	ldr	r0, [sp, #4]
        break;
 800bc10:	e0e9      	b.n	800bde6 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc12:	2b20      	cmp	r3, #32
 800bc14:	f000 80dd 	beq.w	800bdd2 <UART_SetConfig+0x252>
 800bc18:	2b28      	cmp	r3, #40	@ 0x28
 800bc1a:	d1ee      	bne.n	800bbfa <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bc1c:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bc20:	f000 811d 	beq.w	800be5e <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 800bc24:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bc28:	e0be      	b.n	800bda8 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc2a:	4a7b      	ldr	r2, [pc, #492]	@ (800be18 <UART_SetConfig+0x298>)
 800bc2c:	4293      	cmp	r3, r2
 800bc2e:	d115      	bne.n	800bc5c <UART_SetConfig+0xdc>
 800bc30:	4b78      	ldr	r3, [pc, #480]	@ (800be14 <UART_SetConfig+0x294>)
 800bc32:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc34:	f003 0307 	and.w	r3, r3, #7
 800bc38:	2b05      	cmp	r3, #5
 800bc3a:	d82c      	bhi.n	800bc96 <UART_SetConfig+0x116>
 800bc3c:	a201      	add	r2, pc, #4	@ (adr r2, 800bc44 <UART_SetConfig+0xc4>)
 800bc3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bc42:	bf00      	nop
 800bc44:	0800bddd 	.word	0x0800bddd
 800bc48:	0800bd69 	.word	0x0800bd69
 800bc4c:	0800bdf9 	.word	0x0800bdf9
 800bc50:	0800be45 	.word	0x0800be45
 800bc54:	0800bdd3 	.word	0x0800bdd3
 800bc58:	0800bc1d 	.word	0x0800bc1d
 800bc5c:	4a6f      	ldr	r2, [pc, #444]	@ (800be1c <UART_SetConfig+0x29c>)
 800bc5e:	4293      	cmp	r3, r2
 800bc60:	d0e6      	beq.n	800bc30 <UART_SetConfig+0xb0>
 800bc62:	4a6f      	ldr	r2, [pc, #444]	@ (800be20 <UART_SetConfig+0x2a0>)
 800bc64:	4293      	cmp	r3, r2
 800bc66:	d0e3      	beq.n	800bc30 <UART_SetConfig+0xb0>
 800bc68:	4a6e      	ldr	r2, [pc, #440]	@ (800be24 <UART_SetConfig+0x2a4>)
 800bc6a:	4293      	cmp	r3, r2
 800bc6c:	d0e0      	beq.n	800bc30 <UART_SetConfig+0xb0>
 800bc6e:	4a6e      	ldr	r2, [pc, #440]	@ (800be28 <UART_SetConfig+0x2a8>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d118      	bne.n	800bca6 <UART_SetConfig+0x126>
 800bc74:	4b67      	ldr	r3, [pc, #412]	@ (800be14 <UART_SetConfig+0x294>)
 800bc76:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bc78:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc7c:	2b18      	cmp	r3, #24
 800bc7e:	f000 80e1 	beq.w	800be44 <UART_SetConfig+0x2c4>
 800bc82:	d80a      	bhi.n	800bc9a <UART_SetConfig+0x11a>
 800bc84:	2b08      	cmp	r3, #8
 800bc86:	f000 8106 	beq.w	800be96 <UART_SetConfig+0x316>
 800bc8a:	2b10      	cmp	r3, #16
 800bc8c:	f000 80b4 	beq.w	800bdf8 <UART_SetConfig+0x278>
 800bc90:	2b00      	cmp	r3, #0
 800bc92:	f000 80ab 	beq.w	800bdec <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 800bc96:	2001      	movs	r0, #1
 800bc98:	e049      	b.n	800bd2e <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bc9a:	2b20      	cmp	r3, #32
 800bc9c:	f000 8099 	beq.w	800bdd2 <UART_SetConfig+0x252>
 800bca0:	2b28      	cmp	r3, #40	@ 0x28
 800bca2:	d0bb      	beq.n	800bc1c <UART_SetConfig+0x9c>
 800bca4:	e7f7      	b.n	800bc96 <UART_SetConfig+0x116>
 800bca6:	4a61      	ldr	r2, [pc, #388]	@ (800be2c <UART_SetConfig+0x2ac>)
 800bca8:	4293      	cmp	r3, r2
 800bcaa:	d0c1      	beq.n	800bc30 <UART_SetConfig+0xb0>
 800bcac:	4a60      	ldr	r2, [pc, #384]	@ (800be30 <UART_SetConfig+0x2b0>)
 800bcae:	4293      	cmp	r3, r2
 800bcb0:	d0be      	beq.n	800bc30 <UART_SetConfig+0xb0>
 800bcb2:	4a56      	ldr	r2, [pc, #344]	@ (800be0c <UART_SetConfig+0x28c>)
 800bcb4:	4293      	cmp	r3, r2
 800bcb6:	d1ee      	bne.n	800bc96 <UART_SetConfig+0x116>
 800bcb8:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800bcbc:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800bcbe:	f003 0307 	and.w	r3, r3, #7
 800bcc2:	2b05      	cmp	r3, #5
 800bcc4:	d8e7      	bhi.n	800bc96 <UART_SetConfig+0x116>
 800bcc6:	e8df f003 	tbb	[pc, r3]
 800bcca:	2b49      	.short	0x2b49
 800bccc:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 800bcd0:	4858      	ldr	r0, [pc, #352]	@ (800be34 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcd2:	4b59      	ldr	r3, [pc, #356]	@ (800be38 <UART_SetConfig+0x2b8>)
 800bcd4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcd6:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bcd8:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bcdc:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800bce0:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800bce4:	4299      	cmp	r1, r3
 800bce6:	d8d6      	bhi.n	800bc96 <UART_SetConfig+0x116>
 800bce8:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800bcec:	d8d3      	bhi.n	800bc96 <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	f7f4 fd09 	bl	8000708 <__aeabi_uldivmod>
 800bcf6:	462a      	mov	r2, r5
 800bcf8:	0209      	lsls	r1, r1, #8
 800bcfa:	086b      	lsrs	r3, r5, #1
 800bcfc:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800bd00:	0200      	lsls	r0, r0, #8
 800bd02:	18c0      	adds	r0, r0, r3
 800bd04:	f04f 0300 	mov.w	r3, #0
 800bd08:	f141 0100 	adc.w	r1, r1, #0
 800bd0c:	f7f4 fcfc 	bl	8000708 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800bd10:	4b4a      	ldr	r3, [pc, #296]	@ (800be3c <UART_SetConfig+0x2bc>)
 800bd12:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800bd16:	429a      	cmp	r2, r3
 800bd18:	d8bd      	bhi.n	800bc96 <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 800bd1a:	6823      	ldr	r3, [r4, #0]
 800bd1c:	60d8      	str	r0, [r3, #12]
 800bd1e:	e005      	b.n	800bd2c <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd20:	4668      	mov	r0, sp
 800bd22:	f7ff f9cf 	bl	800b0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd26:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800bd28:	2800      	cmp	r0, #0
 800bd2a:	d1d2      	bne.n	800bcd2 <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800bd2c:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800bd2e:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800bd32:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800bd34:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800bd36:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800bd3a:	b007      	add	sp, #28
 800bd3c:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd3e:	a803      	add	r0, sp, #12
 800bd40:	f7ff fa6a 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd44:	9804      	ldr	r0, [sp, #16]
        break;
 800bd46:	e7ef      	b.n	800bd28 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd48:	6813      	ldr	r3, [r2, #0]
 800bd4a:	483d      	ldr	r0, [pc, #244]	@ (800be40 <UART_SetConfig+0x2c0>)
 800bd4c:	f013 0f20 	tst.w	r3, #32
 800bd50:	d0bf      	beq.n	800bcd2 <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bd52:	6813      	ldr	r3, [r2, #0]
 800bd54:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bd58:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800bd5a:	e7ba      	b.n	800bcd2 <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800bd5c:	f7ff f9a0 	bl	800b0a0 <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800bd60:	e7e2      	b.n	800bd28 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bd62:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bd66:	e7b4      	b.n	800bcd2 <UART_SetConfig+0x152>
 800bd68:	2304      	movs	r3, #4
 800bd6a:	e747      	b.n	800bbfc <UART_SetConfig+0x7c>
    switch (clocksource)
 800bd6c:	2b08      	cmp	r3, #8
 800bd6e:	d892      	bhi.n	800bc96 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bd70:	4668      	mov	r0, sp
 800bd72:	f7ff f9a7 	bl	800b0c4 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bd76:	9801      	ldr	r0, [sp, #4]
        break;
 800bd78:	e001      	b.n	800bd7e <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bd7a:	f7fe fb45 	bl	800a408 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bd7e:	2800      	cmp	r0, #0
 800bd80:	d0d4      	beq.n	800bd2c <UART_SetConfig+0x1ac>
 800bd82:	e011      	b.n	800bda8 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bd84:	f7fe fb52 	bl	800a42c <HAL_RCC_GetPCLK2Freq>
        break;
 800bd88:	e7f9      	b.n	800bd7e <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bd8a:	a803      	add	r0, sp, #12
 800bd8c:	f7ff fa44 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800bd90:	9804      	ldr	r0, [sp, #16]
        break;
 800bd92:	e7f4      	b.n	800bd7e <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800bd94:	4b1f      	ldr	r3, [pc, #124]	@ (800be14 <UART_SetConfig+0x294>)
 800bd96:	482a      	ldr	r0, [pc, #168]	@ (800be40 <UART_SetConfig+0x2c0>)
 800bd98:	681a      	ldr	r2, [r3, #0]
 800bd9a:	f012 0f20 	tst.w	r2, #32
 800bd9e:	d003      	beq.n	800bda8 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800bda6:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800bda8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800bdaa:	4b23      	ldr	r3, [pc, #140]	@ (800be38 <UART_SetConfig+0x2b8>)
 800bdac:	6862      	ldr	r2, [r4, #4]
 800bdae:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800bdb2:	fbb0 f3f3 	udiv	r3, r0, r3
 800bdb6:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800bdba:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800bdbe:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800bdc2:	f1a3 0110 	sub.w	r1, r3, #16
 800bdc6:	4291      	cmp	r1, r2
 800bdc8:	f63f af65 	bhi.w	800bc96 <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800bdcc:	6822      	ldr	r2, [r4, #0]
 800bdce:	60d3      	str	r3, [r2, #12]
 800bdd0:	e7ac      	b.n	800bd2c <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdd2:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bdd6:	4817      	ldr	r0, [pc, #92]	@ (800be34 <UART_SetConfig+0x2b4>)
 800bdd8:	d1e6      	bne.n	800bda8 <UART_SetConfig+0x228>
 800bdda:	e040      	b.n	800be5e <UART_SetConfig+0x2de>
 800bddc:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bde0:	d1cb      	bne.n	800bd7a <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800bde2:	f7fe fb11 	bl	800a408 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800bde6:	2800      	cmp	r0, #0
 800bde8:	d0a0      	beq.n	800bd2c <UART_SetConfig+0x1ac>
 800bdea:	e038      	b.n	800be5e <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdec:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bdf0:	d1c8      	bne.n	800bd84 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800bdf2:	f7fe fb1b 	bl	800a42c <HAL_RCC_GetPCLK2Freq>
        break;
 800bdf6:	e7f6      	b.n	800bde6 <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bdf8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bdfc:	d1c5      	bne.n	800bd8a <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800bdfe:	a803      	add	r0, sp, #12
 800be00:	f7ff fa0a 	bl	800b218 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800be04:	9804      	ldr	r0, [sp, #16]
        break;
 800be06:	e7ee      	b.n	800bde6 <UART_SetConfig+0x266>
 800be08:	cfff69f3 	.word	0xcfff69f3
 800be0c:	58000c00 	.word	0x58000c00
 800be10:	40011000 	.word	0x40011000
 800be14:	58024400 	.word	0x58024400
 800be18:	40004400 	.word	0x40004400
 800be1c:	40004800 	.word	0x40004800
 800be20:	40004c00 	.word	0x40004c00
 800be24:	40005000 	.word	0x40005000
 800be28:	40011400 	.word	0x40011400
 800be2c:	40007800 	.word	0x40007800
 800be30:	40007c00 	.word	0x40007c00
 800be34:	003d0900 	.word	0x003d0900
 800be38:	0802438c 	.word	0x0802438c
 800be3c:	000ffcff 	.word	0x000ffcff
 800be40:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be44:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800be48:	d1a4      	bne.n	800bd94 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800be4a:	4b15      	ldr	r3, [pc, #84]	@ (800bea0 <UART_SetConfig+0x320>)
 800be4c:	4815      	ldr	r0, [pc, #84]	@ (800bea4 <UART_SetConfig+0x324>)
 800be4e:	681a      	ldr	r2, [r3, #0]
 800be50:	f012 0f20 	tst.w	r2, #32
 800be54:	d003      	beq.n	800be5e <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800be56:	681b      	ldr	r3, [r3, #0]
 800be58:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800be5c:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be5e:	4b12      	ldr	r3, [pc, #72]	@ (800bea8 <UART_SetConfig+0x328>)
 800be60:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800be62:	6861      	ldr	r1, [r4, #4]
 800be64:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800be68:	084b      	lsrs	r3, r1, #1
 800be6a:	fbb0 f2f2 	udiv	r2, r0, r2
 800be6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be72:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800be76:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800be7a:	f1a3 0110 	sub.w	r1, r3, #16
 800be7e:	4291      	cmp	r1, r2
 800be80:	f63f af09 	bhi.w	800bc96 <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be84:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800be88:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800be8c:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800be8e:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800be90:	4313      	orrs	r3, r2
 800be92:	60cb      	str	r3, [r1, #12]
 800be94:	e74a      	b.n	800bd2c <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800be96:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800be9a:	f47f af69 	bne.w	800bd70 <UART_SetConfig+0x1f0>
 800be9e:	e6b3      	b.n	800bc08 <UART_SetConfig+0x88>
 800bea0:	58024400 	.word	0x58024400
 800bea4:	03d09000 	.word	0x03d09000
 800bea8:	0802438c 	.word	0x0802438c

0800beac <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beac:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800beae:	071a      	lsls	r2, r3, #28
{
 800beb0:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800beb2:	d506      	bpl.n	800bec2 <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800beb4:	6801      	ldr	r1, [r0, #0]
 800beb6:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800beb8:	684a      	ldr	r2, [r1, #4]
 800beba:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800bebe:	4322      	orrs	r2, r4
 800bec0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800bec2:	07dc      	lsls	r4, r3, #31
 800bec4:	d506      	bpl.n	800bed4 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800bec6:	6801      	ldr	r1, [r0, #0]
 800bec8:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800beca:	684a      	ldr	r2, [r1, #4]
 800becc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800bed0:	4322      	orrs	r2, r4
 800bed2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800bed4:	0799      	lsls	r1, r3, #30
 800bed6:	d506      	bpl.n	800bee6 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800bed8:	6801      	ldr	r1, [r0, #0]
 800beda:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800bedc:	684a      	ldr	r2, [r1, #4]
 800bede:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bee2:	4322      	orrs	r2, r4
 800bee4:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800bee6:	075a      	lsls	r2, r3, #29
 800bee8:	d506      	bpl.n	800bef8 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800beea:	6801      	ldr	r1, [r0, #0]
 800beec:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800beee:	684a      	ldr	r2, [r1, #4]
 800bef0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800bef4:	4322      	orrs	r2, r4
 800bef6:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800bef8:	06dc      	lsls	r4, r3, #27
 800befa:	d506      	bpl.n	800bf0a <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800befc:	6801      	ldr	r1, [r0, #0]
 800befe:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800bf00:	688a      	ldr	r2, [r1, #8]
 800bf02:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bf06:	4322      	orrs	r2, r4
 800bf08:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800bf0a:	0699      	lsls	r1, r3, #26
 800bf0c:	d506      	bpl.n	800bf1c <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800bf0e:	6801      	ldr	r1, [r0, #0]
 800bf10:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800bf12:	688a      	ldr	r2, [r1, #8]
 800bf14:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800bf18:	4322      	orrs	r2, r4
 800bf1a:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800bf1c:	065a      	lsls	r2, r3, #25
 800bf1e:	d510      	bpl.n	800bf42 <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf20:	6801      	ldr	r1, [r0, #0]
 800bf22:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800bf24:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf26:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800bf2a:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800bf2e:	ea42 0204 	orr.w	r2, r2, r4
 800bf32:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800bf34:	d105      	bne.n	800bf42 <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800bf36:	684a      	ldr	r2, [r1, #4]
 800bf38:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800bf3a:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800bf3e:	4322      	orrs	r2, r4
 800bf40:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800bf42:	061b      	lsls	r3, r3, #24
 800bf44:	d506      	bpl.n	800bf54 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800bf46:	6802      	ldr	r2, [r0, #0]
 800bf48:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800bf4a:	6853      	ldr	r3, [r2, #4]
 800bf4c:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800bf50:	430b      	orrs	r3, r1
 800bf52:	6053      	str	r3, [r2, #4]
}
 800bf54:	bd10      	pop	{r4, pc}

0800bf56 <UART_WaitOnFlagUntilTimeout>:
{
 800bf56:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bf5a:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800bf5e:	4604      	mov	r4, r0
 800bf60:	460d      	mov	r5, r1
 800bf62:	4617      	mov	r7, r2
 800bf64:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800bf66:	6822      	ldr	r2, [r4, #0]
 800bf68:	69d3      	ldr	r3, [r2, #28]
 800bf6a:	ea35 0303 	bics.w	r3, r5, r3
 800bf6e:	bf0c      	ite	eq
 800bf70:	2301      	moveq	r3, #1
 800bf72:	2300      	movne	r3, #0
 800bf74:	42bb      	cmp	r3, r7
 800bf76:	d001      	beq.n	800bf7c <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800bf78:	2000      	movs	r0, #0
 800bf7a:	e022      	b.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800bf7c:	f1b9 3fff 	cmp.w	r9, #4294967295
 800bf80:	d0f2      	beq.n	800bf68 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800bf82:	f7fa f993 	bl	80062ac <HAL_GetTick>
 800bf86:	eba0 0008 	sub.w	r0, r0, r8
 800bf8a:	4548      	cmp	r0, r9
 800bf8c:	d829      	bhi.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0x8c>
 800bf8e:	f1b9 0f00 	cmp.w	r9, #0
 800bf92:	d026      	beq.n	800bfe2 <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800bf94:	6821      	ldr	r1, [r4, #0]
 800bf96:	680b      	ldr	r3, [r1, #0]
 800bf98:	075a      	lsls	r2, r3, #29
 800bf9a:	d5e4      	bpl.n	800bf66 <UART_WaitOnFlagUntilTimeout+0x10>
 800bf9c:	2d80      	cmp	r5, #128	@ 0x80
 800bf9e:	d0e2      	beq.n	800bf66 <UART_WaitOnFlagUntilTimeout+0x10>
 800bfa0:	2d40      	cmp	r5, #64	@ 0x40
 800bfa2:	d0e0      	beq.n	800bf66 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800bfa4:	69ce      	ldr	r6, [r1, #28]
 800bfa6:	f016 0608 	ands.w	r6, r6, #8
 800bfaa:	d00c      	beq.n	800bfc6 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfac:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800bfae:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bfb0:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800bfb2:	f7ff fc03 	bl	800b7bc <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800bfb6:	2300      	movs	r3, #0
          return HAL_ERROR;
 800bfb8:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800bfba:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800bfbe:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800bfc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800bfc6:	69cb      	ldr	r3, [r1, #28]
 800bfc8:	051b      	lsls	r3, r3, #20
 800bfca:	d5cc      	bpl.n	800bf66 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800bfd0:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bfd2:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800bfd4:	f7ff fbf2 	bl	800b7bc <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfd8:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800bfda:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800bfde:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800bfe2:	2003      	movs	r0, #3
 800bfe4:	e7ed      	b.n	800bfc2 <UART_WaitOnFlagUntilTimeout+0x6c>

0800bfe6 <HAL_UART_Transmit>:
{
 800bfe6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bfea:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800bfec:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800bff0:	4604      	mov	r4, r0
 800bff2:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800bff4:	2b20      	cmp	r3, #32
{
 800bff6:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800bff8:	d146      	bne.n	800c088 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800bffa:	2900      	cmp	r1, #0
 800bffc:	d046      	beq.n	800c08c <HAL_UART_Transmit+0xa6>
 800bffe:	2a00      	cmp	r2, #0
 800c000:	d044      	beq.n	800c08c <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c002:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c004:	2500      	movs	r5, #0
 800c006:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c00a:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800c00e:	f7fa f94d 	bl	80062ac <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c012:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c014:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800c016:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c01a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800c01e:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c022:	d103      	bne.n	800c02c <HAL_UART_Transmit+0x46>
 800c024:	6923      	ldr	r3, [r4, #16]
 800c026:	b90b      	cbnz	r3, 800c02c <HAL_UART_Transmit+0x46>
 800c028:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c02a:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800c02c:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c030:	464b      	mov	r3, r9
 800c032:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c036:	b292      	uxth	r2, r2
 800c038:	b942      	cbnz	r2, 800c04c <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c03a:	2140      	movs	r1, #64	@ 0x40
 800c03c:	4620      	mov	r0, r4
 800c03e:	f7ff ff8a 	bl	800bf56 <UART_WaitOnFlagUntilTimeout>
 800c042:	2320      	movs	r3, #32
 800c044:	b948      	cbnz	r0, 800c05a <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800c046:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800c04a:	e009      	b.n	800c060 <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c04c:	2200      	movs	r2, #0
 800c04e:	2180      	movs	r1, #128	@ 0x80
 800c050:	4620      	mov	r0, r4
 800c052:	f7ff ff80 	bl	800bf56 <UART_WaitOnFlagUntilTimeout>
 800c056:	b130      	cbz	r0, 800c066 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800c058:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800c05a:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800c05c:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800c060:	b003      	add	sp, #12
 800c062:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c066:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c068:	b95e      	cbnz	r6, 800c082 <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c06a:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c06e:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c072:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800c074:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800c078:	3a01      	subs	r2, #1
 800c07a:	b292      	uxth	r2, r2
 800c07c:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 800c080:	e7d4      	b.n	800c02c <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c082:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c086:	e7f4      	b.n	800c072 <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800c088:	2002      	movs	r0, #2
 800c08a:	e7e9      	b.n	800c060 <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800c08c:	2001      	movs	r0, #1
 800c08e:	e7e7      	b.n	800c060 <HAL_UART_Transmit+0x7a>

0800c090 <UART_CheckIdleState>:
{
 800c090:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c092:	2600      	movs	r6, #0
{
 800c094:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c096:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800c09a:	f7fa f907 	bl	80062ac <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c09e:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c0a0:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	071a      	lsls	r2, r3, #28
 800c0a6:	d51c      	bpl.n	800c0e2 <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0a8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0ac:	4632      	mov	r2, r6
 800c0ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c0b2:	9300      	str	r3, [sp, #0]
 800c0b4:	4603      	mov	r3, r0
 800c0b6:	4620      	mov	r0, r4
 800c0b8:	f7ff ff4d 	bl	800bf56 <UART_WaitOnFlagUntilTimeout>
 800c0bc:	b188      	cbz	r0, 800c0e2 <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c0be:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0c0:	e852 3f00 	ldrex	r3, [r2]
 800c0c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0c8:	e842 3100 	strex	r1, r3, [r2]
 800c0cc:	2900      	cmp	r1, #0
 800c0ce:	d1f6      	bne.n	800c0be <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800c0d0:	2320      	movs	r3, #32
 800c0d2:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800c0d6:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c0d8:	2300      	movs	r3, #0
 800c0da:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c0de:	b002      	add	sp, #8
 800c0e0:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c0e2:	6823      	ldr	r3, [r4, #0]
 800c0e4:	681b      	ldr	r3, [r3, #0]
 800c0e6:	075b      	lsls	r3, r3, #29
 800c0e8:	d524      	bpl.n	800c134 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c0ea:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c0ee:	2200      	movs	r2, #0
 800c0f0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c0f4:	4620      	mov	r0, r4
 800c0f6:	9300      	str	r3, [sp, #0]
 800c0f8:	462b      	mov	r3, r5
 800c0fa:	f7ff ff2c 	bl	800bf56 <UART_WaitOnFlagUntilTimeout>
 800c0fe:	b1c8      	cbz	r0, 800c134 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c100:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c102:	e852 3f00 	ldrex	r3, [r2]
 800c106:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c10a:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c10e:	6822      	ldr	r2, [r4, #0]
 800c110:	2900      	cmp	r1, #0
 800c112:	d1f5      	bne.n	800c100 <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c114:	f102 0308 	add.w	r3, r2, #8
 800c118:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c11c:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c120:	f102 0008 	add.w	r0, r2, #8
 800c124:	e840 3100 	strex	r1, r3, [r0]
 800c128:	2900      	cmp	r1, #0
 800c12a:	d1f3      	bne.n	800c114 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800c12c:	2320      	movs	r3, #32
 800c12e:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800c132:	e7d0      	b.n	800c0d6 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800c134:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c136:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c138:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c13c:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c140:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c142:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800c144:	e7c8      	b.n	800c0d8 <UART_CheckIdleState+0x48>

0800c146 <HAL_UART_Init>:
{
 800c146:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c148:	4604      	mov	r4, r0
 800c14a:	b350      	cbz	r0, 800c1a2 <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c14c:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800c150:	b91b      	cbnz	r3, 800c15a <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c152:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800c156:	f7f5 fb6d 	bl	8001834 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800c15a:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800c15c:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c15e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800c162:	6813      	ldr	r3, [r2, #0]
 800c164:	f023 0301 	bic.w	r3, r3, #1
 800c168:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c16a:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c16c:	b113      	cbz	r3, 800c174 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800c16e:	4620      	mov	r0, r4
 800c170:	f7ff fe9c 	bl	800beac <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c174:	4620      	mov	r0, r4
 800c176:	f7ff fd03 	bl	800bb80 <UART_SetConfig>
 800c17a:	2801      	cmp	r0, #1
 800c17c:	d011      	beq.n	800c1a2 <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c17e:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c180:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c182:	685a      	ldr	r2, [r3, #4]
 800c184:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c188:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c18a:	689a      	ldr	r2, [r3, #8]
 800c18c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c190:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c192:	681a      	ldr	r2, [r3, #0]
 800c194:	f042 0201 	orr.w	r2, r2, #1
}
 800c198:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c19c:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c19e:	f7ff bf77 	b.w	800c090 <UART_CheckIdleState>
}
 800c1a2:	2001      	movs	r0, #1
 800c1a4:	bd10      	pop	{r4, pc}
	...

0800c1a8 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1a8:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800c1aa:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c1ac:	b92b      	cbnz	r3, 800c1ba <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800c1ae:	2301      	movs	r3, #1
 800c1b0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c1b4:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c1b8:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1ba:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1bc:	4d09      	ldr	r5, [pc, #36]	@ (800c1e4 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c1be:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1c0:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1c2:	4c09      	ldr	r4, [pc, #36]	@ (800c1e8 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1c4:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c1c8:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ca:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c1cc:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c1ce:	011b      	lsls	r3, r3, #4
 800c1d0:	fbb3 f3f1 	udiv	r3, r3, r1
 800c1d4:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1d8:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800c1da:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c1dc:	011b      	lsls	r3, r3, #4
 800c1de:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800c1e2:	e7e7      	b.n	800c1b4 <UARTEx_SetNbDataToProcess+0xc>
 800c1e4:	080243ac 	.word	0x080243ac
 800c1e8:	080243a4 	.word	0x080243a4

0800c1ec <HAL_UARTEx_WakeupCallback>:
}
 800c1ec:	4770      	bx	lr

0800c1ee <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800c1ee:	4770      	bx	lr

0800c1f0 <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800c1f0:	4770      	bx	lr

0800c1f2 <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c1f2:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d014      	beq.n	800c224 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c1fa:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c1fc:	2324      	movs	r3, #36	@ 0x24
 800c1fe:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c202:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c204:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c206:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800c20a:	f023 0301 	bic.w	r3, r3, #1
 800c20e:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c210:	2300      	movs	r3, #0
 800c212:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c214:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c216:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c218:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c21c:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800c220:	4618      	mov	r0, r3
 800c222:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c224:	2002      	movs	r0, #2
}
 800c226:	4770      	bx	lr

0800c228 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c228:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c22a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c22e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c230:	2b01      	cmp	r3, #1
 800c232:	d017      	beq.n	800c264 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c234:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c236:	2324      	movs	r3, #36	@ 0x24
 800c238:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c23c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c23e:	682b      	ldr	r3, [r5, #0]
 800c240:	f023 0301 	bic.w	r3, r3, #1
 800c244:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c246:	68ab      	ldr	r3, [r5, #8]
 800c248:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800c24c:	4319      	orrs	r1, r3
 800c24e:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c250:	f7ff ffaa 	bl	800c1a8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c254:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c256:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c258:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c25c:	2000      	movs	r0, #0
 800c25e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c262:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c264:	2002      	movs	r0, #2
 800c266:	e7fc      	b.n	800c262 <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800c268 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c268:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c26a:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c26e:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c270:	2b01      	cmp	r3, #1
 800c272:	d017      	beq.n	800c2a4 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c274:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c276:	2324      	movs	r3, #36	@ 0x24
 800c278:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c27c:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c27e:	682b      	ldr	r3, [r5, #0]
 800c280:	f023 0301 	bic.w	r3, r3, #1
 800c284:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c286:	68ab      	ldr	r3, [r5, #8]
 800c288:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800c28c:	4319      	orrs	r1, r3
 800c28e:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c290:	f7ff ff8a 	bl	800c1a8 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c294:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c296:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c298:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c29c:	2000      	movs	r0, #0
 800c29e:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c2a2:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c2a4:	2002      	movs	r0, #2
 800c2a6:	e7fc      	b.n	800c2a2 <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800c2a8 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c2a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2ac:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800c2b0:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800c2b4:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800c2b8:	ea43 0308 	orr.w	r3, r3, r8
 800c2bc:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800c2c0:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c2c4:	6809      	ldr	r1, [r1, #0]
 800c2c6:	b991      	cbnz	r1, 800c2ee <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2c8:	ea43 030e 	orr.w	r3, r3, lr
 800c2cc:	6801      	ldr	r1, [r0, #0]
 800c2ce:	4313      	orrs	r3, r2
 800c2d0:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800c2d4:	ea43 030c 	orr.w	r3, r3, ip
 800c2d8:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800c2dc:	433b      	orrs	r3, r7
 800c2de:	4333      	orrs	r3, r6
 800c2e0:	432b      	orrs	r3, r5
 800c2e2:	4323      	orrs	r3, r4
 800c2e4:	430b      	orrs	r3, r1
 800c2e6:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800c2e8:	2000      	movs	r0, #0
 800c2ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c2ee:	6801      	ldr	r1, [r0, #0]
 800c2f0:	ea43 030e 	orr.w	r3, r3, lr
 800c2f4:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800c2f8:	430b      	orrs	r3, r1
 800c2fa:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c2fc:	ea42 030c 	orr.w	r3, r2, ip
 800c300:	6841      	ldr	r1, [r0, #4]
 800c302:	433b      	orrs	r3, r7
 800c304:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800c308:	4333      	orrs	r3, r6
 800c30a:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800c30e:	432b      	orrs	r3, r5
 800c310:	4323      	orrs	r3, r4
 800c312:	4313      	orrs	r3, r2
 800c314:	6043      	str	r3, [r0, #4]
 800c316:	e7e7      	b.n	800c2e8 <FMC_SDRAM_Init+0x40>

0800c318 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c318:	68cb      	ldr	r3, [r1, #12]
 800c31a:	f103 3cff 	add.w	ip, r3, #4294967295
 800c31e:	694b      	ldr	r3, [r1, #20]
{
 800c320:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c322:	3b01      	subs	r3, #1
 800c324:	680f      	ldr	r7, [r1, #0]
 800c326:	684c      	ldr	r4, [r1, #4]
 800c328:	688e      	ldr	r6, [r1, #8]
 800c32a:	051b      	lsls	r3, r3, #20
 800c32c:	690d      	ldr	r5, [r1, #16]
 800c32e:	3c01      	subs	r4, #1
 800c330:	6989      	ldr	r1, [r1, #24]
 800c332:	3e01      	subs	r6, #1
 800c334:	3d01      	subs	r5, #1
 800c336:	3f01      	subs	r7, #1
 800c338:	3901      	subs	r1, #1
 800c33a:	0124      	lsls	r4, r4, #4
 800c33c:	0236      	lsls	r6, r6, #8
 800c33e:	042d      	lsls	r5, r5, #16
 800c340:	0609      	lsls	r1, r1, #24
 800c342:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800c346:	b95a      	cbnz	r2, 800c360 <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c348:	433b      	orrs	r3, r7
 800c34a:	6882      	ldr	r2, [r0, #8]
 800c34c:	4323      	orrs	r3, r4
 800c34e:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c352:	4333      	orrs	r3, r6
 800c354:	432b      	orrs	r3, r5
 800c356:	430b      	orrs	r3, r1
 800c358:	4313      	orrs	r3, r2
 800c35a:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800c35c:	2000      	movs	r0, #0
 800c35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c360:	6882      	ldr	r2, [r0, #8]
 800c362:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c366:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800c36a:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c36c:	ea44 0306 	orr.w	r3, r4, r6
 800c370:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c372:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c374:	68c2      	ldr	r2, [r0, #12]
 800c376:	432b      	orrs	r3, r5
 800c378:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c37c:	430b      	orrs	r3, r1
 800c37e:	4313      	orrs	r3, r2
 800c380:	60c3      	str	r3, [r0, #12]
 800c382:	e7eb      	b.n	800c35c <FMC_SDRAM_Timing_Init+0x44>

0800c384 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800c384:	4603      	mov	r3, r0
 800c386:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800c38a:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800c38e:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800c392:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800c394:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c398:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800c39a:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800c39c:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800c39e:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800c3a0:	4770      	bx	lr

0800c3a2 <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c3a2:	6902      	ldr	r2, [r0, #16]
{
 800c3a4:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c3a6:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c3aa:	0d92      	lsrs	r2, r2, #22
 800c3ac:	4323      	orrs	r3, r4
 800c3ae:	68cc      	ldr	r4, [r1, #12]
 800c3b0:	0592      	lsls	r2, r2, #22
 800c3b2:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800c3b6:	4313      	orrs	r3, r2
 800c3b8:	688a      	ldr	r2, [r1, #8]
 800c3ba:	3a01      	subs	r2, #1
 800c3bc:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c3c0:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800c3c2:	2000      	movs	r0, #0
 800c3c4:	bd10      	pop	{r4, pc}

0800c3c6 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c3c6:	6943      	ldr	r3, [r0, #20]
 800c3c8:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800c3cc:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800c3d0:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c3d4:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800c3d6:	2000      	movs	r0, #0
 800c3d8:	4770      	bx	lr

0800c3da <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c3da:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c3dc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c3e0:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c3e2:	f001 fb4d 	bl	800da80 <xTaskGetSchedulerState>
 800c3e6:	2801      	cmp	r0, #1
 800c3e8:	d003      	beq.n	800c3f2 <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c3ea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800c3ee:	f000 bb69 	b.w	800cac4 <xPortSysTickHandler>
}
 800c3f2:	bd08      	pop	{r3, pc}

0800c3f4 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c3f4:	b570      	push	{r4, r5, r6, lr}
 800c3f6:	4605      	mov	r5, r0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c3f8:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800c3fc:	b116      	cbz	r6, 800c404 <osMutexNew+0x10>
  hMutex = NULL;
 800c3fe:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800c400:	4620      	mov	r0, r4
 800c402:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800c404:	b110      	cbz	r0, 800c40c <osMutexNew+0x18>
      type = attr->attr_bits;
 800c406:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800c408:	0733      	lsls	r3, r6, #28
 800c40a:	d4f8      	bmi.n	800c3fe <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c40c:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800c410:	b17d      	cbz	r5, 800c432 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c412:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c416:	b151      	cbz	r1, 800c42e <osMutexNew+0x3a>
 800c418:	2b4f      	cmp	r3, #79	@ 0x4f
 800c41a:	d9f0      	bls.n	800c3fe <osMutexNew+0xa>
          if (rmtx != 0U) {
 800c41c:	b1de      	cbz	r6, 800c456 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c41e:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c420:	f000 fdc5 	bl	800cfae <xQueueCreateMutexStatic>
 800c424:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c426:	2800      	cmp	r0, #0
 800c428:	d0e9      	beq.n	800c3fe <osMutexNew+0xa>
          name = attr->name;
 800c42a:	682d      	ldr	r5, [r5, #0]
 800c42c:	e00a      	b.n	800c444 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d1e5      	bne.n	800c3fe <osMutexNew+0xa>
            if (rmtx != 0U) {
 800c432:	b196      	cbz	r6, 800c45a <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c434:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800c436:	f000 fdee 	bl	800d016 <xQueueCreateMutex>
 800c43a:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c43c:	2800      	cmp	r0, #0
 800c43e:	d0de      	beq.n	800c3fe <osMutexNew+0xa>
        if (attr != NULL) {
 800c440:	2d00      	cmp	r5, #0
 800c442:	d1f2      	bne.n	800c42a <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800c444:	4629      	mov	r1, r5
 800c446:	4620      	mov	r0, r4
 800c448:	f001 f87a 	bl	800d540 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c44c:	2e00      	cmp	r6, #0
 800c44e:	d0d7      	beq.n	800c400 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c450:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800c454:	e7d4      	b.n	800c400 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c456:	2001      	movs	r0, #1
 800c458:	e7e2      	b.n	800c420 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800c45a:	2001      	movs	r0, #1
 800c45c:	e7eb      	b.n	800c436 <osMutexNew+0x42>

0800c45e <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c45e:	b538      	push	{r3, r4, r5, lr}
 800c460:	4603      	mov	r3, r0
 800c462:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c464:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800c468:	f003 0201 	and.w	r2, r3, #1
 800c46c:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c470:	b995      	cbnz	r5, 800c498 <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c472:	2b01      	cmp	r3, #1
 800c474:	d913      	bls.n	800c49e <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c476:	b162      	cbz	r2, 800c492 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c478:	f000 fff3 	bl	800d462 <xQueueTakeMutexRecursive>
 800c47c:	2801      	cmp	r0, #1
 800c47e:	d101      	bne.n	800c484 <osMutexAcquire+0x26>
  stat = osOK;
 800c480:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c482:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800c484:	2c00      	cmp	r4, #0
 800c486:	bf14      	ite	ne
 800c488:	f06f 0001 	mvnne.w	r0, #1
 800c48c:	f06f 0002 	mvneq.w	r0, #2
 800c490:	e7f7      	b.n	800c482 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c492:	f000 ff29 	bl	800d2e8 <xQueueSemaphoreTake>
 800c496:	e7f1      	b.n	800c47c <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800c498:	f06f 0005 	mvn.w	r0, #5
 800c49c:	e7f1      	b.n	800c482 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800c49e:	f06f 0003 	mvn.w	r0, #3
 800c4a2:	e7ee      	b.n	800c482 <osMutexAcquire+0x24>

0800c4a4 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c4a4:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c4a6:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c4aa:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800c4ac:	f002 0301 	and.w	r3, r2, #1
 800c4b0:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c4b4:	b979      	cbnz	r1, 800c4d6 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c4b6:	2a01      	cmp	r2, #1
 800c4b8:	d910      	bls.n	800c4dc <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c4ba:	b13b      	cbz	r3, 800c4cc <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c4bc:	f000 fd8c 	bl	800cfd8 <xQueueGiveMutexRecursive>
 800c4c0:	2801      	cmp	r0, #1
  stat = osOK;
 800c4c2:	bf0c      	ite	eq
 800c4c4:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800c4c6:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c4ca:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c4cc:	461a      	mov	r2, r3
 800c4ce:	4619      	mov	r1, r3
 800c4d0:	f000 fcbb 	bl	800ce4a <xQueueGenericSend>
 800c4d4:	e7f4      	b.n	800c4c0 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800c4d6:	f06f 0005 	mvn.w	r0, #5
 800c4da:	e7f6      	b.n	800c4ca <osMutexRelease+0x26>
    stat = osErrorParameter;
 800c4dc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c4e0:	e7f3      	b.n	800c4ca <osMutexRelease+0x26>

0800c4e2 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c4e2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c4e4:	4604      	mov	r4, r0
 800c4e6:	460e      	mov	r6, r1
 800c4e8:	4615      	mov	r5, r2
 800c4ea:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c4ee:	b942      	cbnz	r2, 800c502 <osSemaphoreNew+0x20>
 800c4f0:	b138      	cbz	r0, 800c502 <osSemaphoreNew+0x20>
 800c4f2:	4288      	cmp	r0, r1
 800c4f4:	d305      	bcc.n	800c502 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800c4f6:	b155      	cbz	r5, 800c50e <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c4f8:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800c4fc:	b12b      	cbz	r3, 800c50a <osSemaphoreNew+0x28>
 800c4fe:	2f4f      	cmp	r7, #79	@ 0x4f
 800c500:	d822      	bhi.n	800c548 <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800c502:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c504:	4620      	mov	r0, r4
 800c506:	b003      	add	sp, #12
 800c508:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c50a:	2f00      	cmp	r7, #0
 800c50c:	d1f9      	bne.n	800c502 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800c50e:	2c01      	cmp	r4, #1
 800c510:	d00c      	beq.n	800c52c <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c512:	4620      	mov	r0, r4
 800c514:	4631      	mov	r1, r6
 800c516:	f000 fc7a 	bl	800ce0e <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800c51a:	4604      	mov	r4, r0
 800c51c:	2800      	cmp	r0, #0
 800c51e:	d0f0      	beq.n	800c502 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800c520:	b985      	cbnz	r5, 800c544 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800c522:	4629      	mov	r1, r5
 800c524:	4620      	mov	r0, r4
 800c526:	f001 f80b 	bl	800d540 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800c52a:	e7eb      	b.n	800c504 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800c52c:	2203      	movs	r2, #3
 800c52e:	2100      	movs	r1, #0
 800c530:	2001      	movs	r0, #1
 800c532:	f000 fc23 	bl	800cd7c <xQueueGenericCreate>
 800c536:	e00e      	b.n	800c556 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c538:	461a      	mov	r2, r3
 800c53a:	f000 fc46 	bl	800cdca <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800c53e:	4604      	mov	r4, r0
 800c540:	2800      	cmp	r0, #0
 800c542:	d0de      	beq.n	800c502 <osSemaphoreNew+0x20>
          name = attr->name;
 800c544:	682d      	ldr	r5, [r5, #0]
 800c546:	e7ec      	b.n	800c522 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800c548:	2801      	cmp	r0, #1
 800c54a:	d1f5      	bne.n	800c538 <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c54c:	2103      	movs	r1, #3
 800c54e:	9100      	str	r1, [sp, #0]
 800c550:	4611      	mov	r1, r2
 800c552:	f000 fbc5 	bl	800cce0 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800c556:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800c558:	2800      	cmp	r0, #0
 800c55a:	d0d2      	beq.n	800c502 <osSemaphoreNew+0x20>
 800c55c:	2e00      	cmp	r6, #0
 800c55e:	d0df      	beq.n	800c520 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c560:	2300      	movs	r3, #0
 800c562:	461a      	mov	r2, r3
 800c564:	4619      	mov	r1, r3
 800c566:	f000 fc70 	bl	800ce4a <xQueueGenericSend>
 800c56a:	2801      	cmp	r0, #1
 800c56c:	d0d8      	beq.n	800c520 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800c56e:	4620      	mov	r0, r4
 800c570:	f001 f810 	bl	800d594 <vQueueDelete>
      if (hSemaphore != NULL) {
 800c574:	e7c5      	b.n	800c502 <osSemaphoreNew+0x20>

0800c576 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800c576:	b513      	push	{r0, r1, r4, lr}
 800c578:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c57a:	b328      	cbz	r0, 800c5c8 <osSemaphoreAcquire+0x52>
 800c57c:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c580:	b1cb      	cbz	r3, 800c5b6 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800c582:	bb09      	cbnz	r1, 800c5c8 <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c584:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c586:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800c588:	f000 ff8c 	bl	800d4a4 <xQueueReceiveFromISR>
 800c58c:	2801      	cmp	r0, #1
 800c58e:	d003      	beq.n	800c598 <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800c590:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c594:	b002      	add	sp, #8
 800c596:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800c598:	9b01      	ldr	r3, [sp, #4]
 800c59a:	b90b      	cbnz	r3, 800c5a0 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800c59c:	2000      	movs	r0, #0
 800c59e:	e7f9      	b.n	800c594 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800c5a0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5a4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5a8:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c5ac:	f3bf 8f4f 	dsb	sy
 800c5b0:	f3bf 8f6f 	isb	sy
 800c5b4:	e7f2      	b.n	800c59c <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800c5b6:	f000 fe97 	bl	800d2e8 <xQueueSemaphoreTake>
 800c5ba:	2801      	cmp	r0, #1
 800c5bc:	d0ee      	beq.n	800c59c <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800c5be:	2c00      	cmp	r4, #0
 800c5c0:	d0e6      	beq.n	800c590 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800c5c2:	f06f 0001 	mvn.w	r0, #1
 800c5c6:	e7e5      	b.n	800c594 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800c5c8:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c5cc:	e7e2      	b.n	800c594 <osSemaphoreAcquire+0x1e>

0800c5ce <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800c5ce:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800c5d0:	b318      	cbz	r0, 800c61a <osSemaphoreRelease+0x4c>
 800c5d2:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800c5d6:	b1cb      	cbz	r3, 800c60c <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800c5d8:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c5da:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800c5dc:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800c5de:	f000 fd94 	bl	800d10a <xQueueGiveFromISR>
 800c5e2:	2801      	cmp	r0, #1
 800c5e4:	d004      	beq.n	800c5f0 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800c5e6:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800c5ea:	b003      	add	sp, #12
 800c5ec:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800c5f0:	9b01      	ldr	r3, [sp, #4]
 800c5f2:	b14b      	cbz	r3, 800c608 <osSemaphoreRelease+0x3a>
 800c5f4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c5f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c5fc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c600:	f3bf 8f4f 	dsb	sy
 800c604:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800c608:	2000      	movs	r0, #0
 800c60a:	e7ee      	b.n	800c5ea <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800c60c:	461a      	mov	r2, r3
 800c60e:	4619      	mov	r1, r3
 800c610:	f000 fc1b 	bl	800ce4a <xQueueGenericSend>
 800c614:	2801      	cmp	r0, #1
 800c616:	d0f7      	beq.n	800c608 <osSemaphoreRelease+0x3a>
 800c618:	e7e5      	b.n	800c5e6 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800c61a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c61e:	e7e4      	b.n	800c5ea <osSemaphoreRelease+0x1c>

0800c620 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800c620:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c622:	4605      	mov	r5, r0
 800c624:	460e      	mov	r6, r1
 800c626:	4614      	mov	r4, r2
 800c628:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c62c:	b11f      	cbz	r7, 800c636 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800c62e:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800c630:	4628      	mov	r0, r5
 800c632:	b003      	add	sp, #12
 800c634:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800c636:	2800      	cmp	r0, #0
 800c638:	d0f9      	beq.n	800c62e <osMessageQueueNew+0xe>
 800c63a:	2900      	cmp	r1, #0
 800c63c:	d0f7      	beq.n	800c62e <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800c63e:	b1da      	cbz	r2, 800c678 <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c640:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800c644:	b183      	cbz	r3, 800c668 <osMessageQueueNew+0x48>
 800c646:	2a4f      	cmp	r2, #79	@ 0x4f
 800c648:	d9f1      	bls.n	800c62e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c64a:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800c64c:	2a00      	cmp	r2, #0
 800c64e:	d0ee      	beq.n	800c62e <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800c650:	434d      	muls	r5, r1
 800c652:	6966      	ldr	r6, [r4, #20]
 800c654:	42ae      	cmp	r6, r5
 800c656:	d3ea      	bcc.n	800c62e <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800c658:	9700      	str	r7, [sp, #0]
 800c65a:	f000 fb41 	bl	800cce0 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800c65e:	4605      	mov	r5, r0
 800c660:	2800      	cmp	r0, #0
 800c662:	d0e4      	beq.n	800c62e <osMessageQueueNew+0xe>
        name = attr->name;
 800c664:	6824      	ldr	r4, [r4, #0]
 800c666:	e011      	b.n	800c68c <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800c668:	2a00      	cmp	r2, #0
 800c66a:	d1e0      	bne.n	800c62e <osMessageQueueNew+0xe>
 800c66c:	6923      	ldr	r3, [r4, #16]
 800c66e:	2b00      	cmp	r3, #0
 800c670:	d1dd      	bne.n	800c62e <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800c672:	6963      	ldr	r3, [r4, #20]
 800c674:	2b00      	cmp	r3, #0
 800c676:	d1da      	bne.n	800c62e <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800c678:	4628      	mov	r0, r5
 800c67a:	2200      	movs	r2, #0
 800c67c:	4631      	mov	r1, r6
 800c67e:	f000 fb7d 	bl	800cd7c <xQueueGenericCreate>
    if (hQueue != NULL) {
 800c682:	4605      	mov	r5, r0
 800c684:	2800      	cmp	r0, #0
 800c686:	d0d2      	beq.n	800c62e <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800c688:	2c00      	cmp	r4, #0
 800c68a:	d1eb      	bne.n	800c664 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800c68c:	4621      	mov	r1, r4
 800c68e:	4628      	mov	r0, r5
 800c690:	f000 ff56 	bl	800d540 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800c694:	e7cc      	b.n	800c630 <osMessageQueueNew+0x10>

0800c696 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800c696:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c698:	461c      	mov	r4, r3
 800c69a:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c69e:	b1de      	cbz	r6, 800c6d8 <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c6a0:	b338      	cbz	r0, 800c6f2 <osMessageQueuePut+0x5c>
 800c6a2:	b331      	cbz	r1, 800c6f2 <osMessageQueuePut+0x5c>
 800c6a4:	bb2b      	cbnz	r3, 800c6f2 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c6a6:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c6a8:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800c6aa:	f000 fcd1 	bl	800d050 <xQueueGenericSendFromISR>
 800c6ae:	2801      	cmp	r0, #1
 800c6b0:	d003      	beq.n	800c6ba <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800c6b2:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c6b6:	b002      	add	sp, #8
 800c6b8:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800c6ba:	9b01      	ldr	r3, [sp, #4]
 800c6bc:	b90b      	cbnz	r3, 800c6c2 <osMessageQueuePut+0x2c>
  stat = osOK;
 800c6be:	2000      	movs	r0, #0
 800c6c0:	e7f9      	b.n	800c6b6 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800c6c2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c6c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c6ca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c6ce:	f3bf 8f4f 	dsb	sy
 800c6d2:	f3bf 8f6f 	isb	sy
 800c6d6:	e7f2      	b.n	800c6be <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c6d8:	b158      	cbz	r0, 800c6f2 <osMessageQueuePut+0x5c>
 800c6da:	b151      	cbz	r1, 800c6f2 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c6dc:	4633      	mov	r3, r6
 800c6de:	4622      	mov	r2, r4
 800c6e0:	f000 fbb3 	bl	800ce4a <xQueueGenericSend>
 800c6e4:	2801      	cmp	r0, #1
 800c6e6:	d0ea      	beq.n	800c6be <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800c6e8:	2c00      	cmp	r4, #0
 800c6ea:	d0e2      	beq.n	800c6b2 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800c6ec:	f06f 0001 	mvn.w	r0, #1
 800c6f0:	e7e1      	b.n	800c6b6 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800c6f2:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c6f6:	e7de      	b.n	800c6b6 <osMessageQueuePut+0x20>

0800c6f8 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800c6f8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c6fa:	461c      	mov	r4, r3
 800c6fc:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800c700:	b1db      	cbz	r3, 800c73a <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800c702:	b330      	cbz	r0, 800c752 <osMessageQueueGet+0x5a>
 800c704:	b329      	cbz	r1, 800c752 <osMessageQueueGet+0x5a>
 800c706:	bb24      	cbnz	r4, 800c752 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c708:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800c70a:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800c70c:	f000 feca 	bl	800d4a4 <xQueueReceiveFromISR>
 800c710:	2801      	cmp	r0, #1
 800c712:	d003      	beq.n	800c71c <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800c714:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c718:	b003      	add	sp, #12
 800c71a:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800c71c:	9b01      	ldr	r3, [sp, #4]
 800c71e:	b90b      	cbnz	r3, 800c724 <osMessageQueueGet+0x2c>
  stat = osOK;
 800c720:	2000      	movs	r0, #0
 800c722:	e7f9      	b.n	800c718 <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800c724:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c728:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c72c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800c730:	f3bf 8f4f 	dsb	sy
 800c734:	f3bf 8f6f 	isb	sy
 800c738:	e7f2      	b.n	800c720 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800c73a:	b150      	cbz	r0, 800c752 <osMessageQueueGet+0x5a>
 800c73c:	b149      	cbz	r1, 800c752 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800c73e:	4622      	mov	r2, r4
 800c740:	f000 fd34 	bl	800d1ac <xQueueReceive>
 800c744:	2801      	cmp	r0, #1
 800c746:	d0eb      	beq.n	800c720 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800c748:	2c00      	cmp	r4, #0
 800c74a:	d0e3      	beq.n	800c714 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800c74c:	f06f 0001 	mvn.w	r0, #1
 800c750:	e7e2      	b.n	800c718 <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800c752:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c756:	e7df      	b.n	800c718 <osMessageQueueGet+0x20>

0800c758 <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c758:	4b10      	ldr	r3, [pc, #64]	@ (800c79c <prvInsertBlockIntoFreeList+0x44>)
{
 800c75a:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c75c:	461a      	mov	r2, r3
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	4283      	cmp	r3, r0
 800c762:	d3fb      	bcc.n	800c75c <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800c764:	6854      	ldr	r4, [r2, #4]
 800c766:	1911      	adds	r1, r2, r4
 800c768:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800c76a:	bf01      	itttt	eq
 800c76c:	6841      	ldreq	r1, [r0, #4]
 800c76e:	4610      	moveq	r0, r2
 800c770:	1909      	addeq	r1, r1, r4
 800c772:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800c774:	6844      	ldr	r4, [r0, #4]
 800c776:	1901      	adds	r1, r0, r4
 800c778:	428b      	cmp	r3, r1
 800c77a:	d10c      	bne.n	800c796 <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800c77c:	4908      	ldr	r1, [pc, #32]	@ (800c7a0 <prvInsertBlockIntoFreeList+0x48>)
 800c77e:	6809      	ldr	r1, [r1, #0]
 800c780:	428b      	cmp	r3, r1
 800c782:	d003      	beq.n	800c78c <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800c784:	6859      	ldr	r1, [r3, #4]
 800c786:	4421      	add	r1, r4
 800c788:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800c78a:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800c78c:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800c78e:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800c790:	bf18      	it	ne
 800c792:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c794:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800c796:	4619      	mov	r1, r3
 800c798:	e7f8      	b.n	800c78c <prvInsertBlockIntoFreeList+0x34>
 800c79a:	bf00      	nop
 800c79c:	2400bd48 	.word	0x2400bd48
 800c7a0:	2400bd44 	.word	0x2400bd44

0800c7a4 <pvPortMalloc>:
{
 800c7a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c7a8:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800c7aa:	f000 ff53 	bl	800d654 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800c7ae:	4940      	ldr	r1, [pc, #256]	@ (800c8b0 <pvPortMalloc+0x10c>)
 800c7b0:	4d40      	ldr	r5, [pc, #256]	@ (800c8b4 <pvPortMalloc+0x110>)
 800c7b2:	680b      	ldr	r3, [r1, #0]
 800c7b4:	b9f3      	cbnz	r3, 800c7f4 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800c7b6:	4a40      	ldr	r2, [pc, #256]	@ (800c8b8 <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800c7b8:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800c7ba:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7bc:	4e3f      	ldr	r6, [pc, #252]	@ (800c8bc <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800c7be:	bf1b      	ittet	ne
 800c7c0:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7c2:	4b3f      	ldrne	r3, [pc, #252]	@ (800c8c0 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800c7c4:	4b3f      	ldreq	r3, [pc, #252]	@ (800c8c4 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7c6:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800c7ca:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800c7cc:	bf18      	it	ne
 800c7ce:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800c7d0:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800c7d2:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800c7d4:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800c7d6:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800c7da:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800c7de:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800c7e0:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800c7e2:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7e6:	4b38      	ldr	r3, [pc, #224]	@ (800c8c8 <pvPortMalloc+0x124>)
 800c7e8:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800c7ea:	4b38      	ldr	r3, [pc, #224]	@ (800c8cc <pvPortMalloc+0x128>)
 800c7ec:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800c7ee:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800c7f2:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c7f4:	682e      	ldr	r6, [r5, #0]
 800c7f6:	4226      	tst	r6, r4
 800c7f8:	d155      	bne.n	800c8a6 <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800c7fa:	2c00      	cmp	r4, #0
 800c7fc:	d046      	beq.n	800c88c <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800c7fe:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c802:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c804:	bf1c      	itt	ne
 800c806:	f023 0307 	bicne.w	r3, r3, #7
 800c80a:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	d04a      	beq.n	800c8a6 <pvPortMalloc+0x102>
 800c810:	4f2e      	ldr	r7, [pc, #184]	@ (800c8cc <pvPortMalloc+0x128>)
 800c812:	683c      	ldr	r4, [r7, #0]
 800c814:	429c      	cmp	r4, r3
 800c816:	d346      	bcc.n	800c8a6 <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800c818:	4a28      	ldr	r2, [pc, #160]	@ (800c8bc <pvPortMalloc+0x118>)
 800c81a:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c81c:	6868      	ldr	r0, [r5, #4]
 800c81e:	4298      	cmp	r0, r3
 800c820:	d204      	bcs.n	800c82c <pvPortMalloc+0x88>
 800c822:	f8d5 c000 	ldr.w	ip, [r5]
 800c826:	f1bc 0f00 	cmp.w	ip, #0
 800c82a:	d115      	bne.n	800c858 <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800c82c:	6809      	ldr	r1, [r1, #0]
 800c82e:	42a9      	cmp	r1, r5
 800c830:	d039      	beq.n	800c8a6 <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c832:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c834:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c838:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c83a:	1ac2      	subs	r2, r0, r3
 800c83c:	2a10      	cmp	r2, #16
 800c83e:	d912      	bls.n	800c866 <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c840:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c842:	0741      	lsls	r1, r0, #29
 800c844:	d00b      	beq.n	800c85e <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800c846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c84a:	f383 8811 	msr	BASEPRI, r3
 800c84e:	f3bf 8f6f 	isb	sy
 800c852:	f3bf 8f4f 	dsb	sy
 800c856:	e7fe      	b.n	800c856 <pvPortMalloc+0xb2>
 800c858:	462a      	mov	r2, r5
 800c85a:	4665      	mov	r5, ip
 800c85c:	e7de      	b.n	800c81c <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c85e:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c860:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c862:	f7ff ff79 	bl	800c758 <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c866:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c868:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c86a:	4917      	ldr	r1, [pc, #92]	@ (800c8c8 <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c86c:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c86e:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c870:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800c872:	4a17      	ldr	r2, [pc, #92]	@ (800c8d0 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c874:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800c876:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800c878:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c87a:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800c87c:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c880:	bf38      	it	cc
 800c882:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c884:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c888:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800c88a:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800c88c:	f000 ff80 	bl	800d790 <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c890:	0763      	lsls	r3, r4, #29
 800c892:	d00a      	beq.n	800c8aa <pvPortMalloc+0x106>
 800c894:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c898:	f383 8811 	msr	BASEPRI, r3
 800c89c:	f3bf 8f6f 	isb	sy
 800c8a0:	f3bf 8f4f 	dsb	sy
 800c8a4:	e7fe      	b.n	800c8a4 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800c8a6:	2400      	movs	r4, #0
 800c8a8:	e7f0      	b.n	800c88c <pvPortMalloc+0xe8>
}
 800c8aa:	4620      	mov	r0, r4
 800c8ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c8b0:	2400bd44 	.word	0x2400bd44
 800c8b4:	2400bd30 	.word	0x2400bd30
 800c8b8:	2400bd50 	.word	0x2400bd50
 800c8bc:	2400bd48 	.word	0x2400bd48
 800c8c0:	240243f0 	.word	0x240243f0
 800c8c4:	000186a0 	.word	0x000186a0
 800c8c8:	2400bd3c 	.word	0x2400bd3c
 800c8cc:	2400bd40 	.word	0x2400bd40
 800c8d0:	2400bd38 	.word	0x2400bd38

0800c8d4 <vPortFree>:
{
 800c8d4:	b510      	push	{r4, lr}
	if( pv != NULL )
 800c8d6:	4604      	mov	r4, r0
 800c8d8:	b390      	cbz	r0, 800c940 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c8da:	4a1a      	ldr	r2, [pc, #104]	@ (800c944 <vPortFree+0x70>)
 800c8dc:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800c8e0:	6812      	ldr	r2, [r2, #0]
 800c8e2:	4213      	tst	r3, r2
 800c8e4:	d108      	bne.n	800c8f8 <vPortFree+0x24>
 800c8e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c8ea:	f383 8811 	msr	BASEPRI, r3
 800c8ee:	f3bf 8f6f 	isb	sy
 800c8f2:	f3bf 8f4f 	dsb	sy
 800c8f6:	e7fe      	b.n	800c8f6 <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800c8f8:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800c8fc:	b141      	cbz	r1, 800c910 <vPortFree+0x3c>
 800c8fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c902:	f383 8811 	msr	BASEPRI, r3
 800c906:	f3bf 8f6f 	isb	sy
 800c90a:	f3bf 8f4f 	dsb	sy
 800c90e:	e7fe      	b.n	800c90e <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800c910:	ea23 0302 	bic.w	r3, r3, r2
 800c914:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800c918:	f000 fe9c 	bl	800d654 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c91c:	4a0a      	ldr	r2, [pc, #40]	@ (800c948 <vPortFree+0x74>)
 800c91e:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c922:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800c926:	6811      	ldr	r1, [r2, #0]
 800c928:	440b      	add	r3, r1
 800c92a:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800c92c:	f7ff ff14 	bl	800c758 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800c930:	4a06      	ldr	r2, [pc, #24]	@ (800c94c <vPortFree+0x78>)
 800c932:	6813      	ldr	r3, [r2, #0]
 800c934:	3301      	adds	r3, #1
}
 800c936:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800c93a:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800c93c:	f000 bf28 	b.w	800d790 <xTaskResumeAll>
}
 800c940:	bd10      	pop	{r4, pc}
 800c942:	bf00      	nop
 800c944:	2400bd30 	.word	0x2400bd30
 800c948:	2400bd40 	.word	0x2400bd40
 800c94c:	2400bd34 	.word	0x2400bd34

0800c950 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c950:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800c954:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c958:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c95a:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800c95c:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800c960:	2300      	movs	r3, #0
 800c962:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800c964:	4770      	bx	lr

0800c966 <vListInsertEnd>:
}
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800c966:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c968:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800c96a:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800c96c:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800c96e:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800c970:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c972:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c974:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c976:	3301      	adds	r3, #1
 800c978:	6003      	str	r3, [r0, #0]
}
 800c97a:	4770      	bx	lr

0800c97c <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800c97c:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800c97e:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800c980:	1c63      	adds	r3, r4, #1
 800c982:	d10a      	bne.n	800c99a <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800c984:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800c986:	685a      	ldr	r2, [r3, #4]
 800c988:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800c98a:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800c98c:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800c98e:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800c990:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800c992:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800c994:	3301      	adds	r3, #1
 800c996:	6003      	str	r3, [r0, #0]
}
 800c998:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800c99a:	f100 0208 	add.w	r2, r0, #8
 800c99e:	4613      	mov	r3, r2
 800c9a0:	6852      	ldr	r2, [r2, #4]
 800c9a2:	6815      	ldr	r5, [r2, #0]
 800c9a4:	42a5      	cmp	r5, r4
 800c9a6:	d9fa      	bls.n	800c99e <vListInsert+0x22>
 800c9a8:	e7ed      	b.n	800c986 <vListInsert+0xa>

0800c9aa <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800c9aa:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800c9ac:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800c9b0:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800c9b2:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800c9b4:	6859      	ldr	r1, [r3, #4]
 800c9b6:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800c9b8:	bf08      	it	eq
 800c9ba:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800c9bc:	2200      	movs	r2, #0
 800c9be:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800c9c0:	681a      	ldr	r2, [r3, #0]
 800c9c2:	3a01      	subs	r2, #1
 800c9c4:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800c9c6:	6818      	ldr	r0, [r3, #0]
}
 800c9c8:	4770      	bx	lr
 800c9ca:	0000      	movs	r0, r0
 800c9cc:	0000      	movs	r0, r0
	...

0800c9d0 <SVC_Handler>:
}
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c9d0:	4b07      	ldr	r3, [pc, #28]	@ (800c9f0 <pxCurrentTCBConst2>)
 800c9d2:	6819      	ldr	r1, [r3, #0]
 800c9d4:	6808      	ldr	r0, [r1, #0]
 800c9d6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9da:	f380 8809 	msr	PSP, r0
 800c9de:	f3bf 8f6f 	isb	sy
 800c9e2:	f04f 0000 	mov.w	r0, #0
 800c9e6:	f380 8811 	msr	BASEPRI, r0
 800c9ea:	4770      	bx	lr
 800c9ec:	f3af 8000 	nop.w

0800c9f0 <pxCurrentTCBConst2>:
 800c9f0:	240248ec 	.word	0x240248ec

0800c9f4 <vPortEnterCritical>:
 800c9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9f8:	f383 8811 	msr	BASEPRI, r3
 800c9fc:	f3bf 8f6f 	isb	sy
 800ca00:	f3bf 8f4f 	dsb	sy
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800ca04:	4a0a      	ldr	r2, [pc, #40]	@ (800ca30 <vPortEnterCritical+0x3c>)
 800ca06:	6813      	ldr	r3, [r2, #0]
 800ca08:	3301      	adds	r3, #1
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800ca0a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800ca0c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800ca0e:	d10e      	bne.n	800ca2e <vPortEnterCritical+0x3a>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800ca10:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca14:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800ca18:	b2db      	uxtb	r3, r3
 800ca1a:	b143      	cbz	r3, 800ca2e <vPortEnterCritical+0x3a>
 800ca1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca20:	f383 8811 	msr	BASEPRI, r3
 800ca24:	f3bf 8f6f 	isb	sy
 800ca28:	f3bf 8f4f 	dsb	sy
 800ca2c:	e7fe      	b.n	800ca2c <vPortEnterCritical+0x38>
	}
}
 800ca2e:	4770      	bx	lr
 800ca30:	24000078 	.word	0x24000078

0800ca34 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
	configASSERT( uxCriticalNesting );
 800ca34:	4a08      	ldr	r2, [pc, #32]	@ (800ca58 <vPortExitCritical+0x24>)
 800ca36:	6813      	ldr	r3, [r2, #0]
 800ca38:	b943      	cbnz	r3, 800ca4c <vPortExitCritical+0x18>
 800ca3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca3e:	f383 8811 	msr	BASEPRI, r3
 800ca42:	f3bf 8f6f 	isb	sy
 800ca46:	f3bf 8f4f 	dsb	sy
 800ca4a:	e7fe      	b.n	800ca4a <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800ca4c:	3b01      	subs	r3, #1
 800ca4e:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800ca50:	b90b      	cbnz	r3, 800ca56 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800ca52:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800ca56:	4770      	bx	lr
 800ca58:	24000078 	.word	0x24000078
 800ca5c:	00000000 	.word	0x00000000

0800ca60 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ca60:	f3ef 8009 	mrs	r0, PSP
 800ca64:	f3bf 8f6f 	isb	sy
 800ca68:	4b15      	ldr	r3, [pc, #84]	@ (800cac0 <pxCurrentTCBConst>)
 800ca6a:	681a      	ldr	r2, [r3, #0]
 800ca6c:	f01e 0f10 	tst.w	lr, #16
 800ca70:	bf08      	it	eq
 800ca72:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ca76:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca7a:	6010      	str	r0, [r2, #0]
 800ca7c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800ca80:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800ca84:	f380 8811 	msr	BASEPRI, r0
 800ca88:	f3bf 8f4f 	dsb	sy
 800ca8c:	f3bf 8f6f 	isb	sy
 800ca90:	f000 fefe 	bl	800d890 <vTaskSwitchContext>
 800ca94:	f04f 0000 	mov.w	r0, #0
 800ca98:	f380 8811 	msr	BASEPRI, r0
 800ca9c:	bc09      	pop	{r0, r3}
 800ca9e:	6819      	ldr	r1, [r3, #0]
 800caa0:	6808      	ldr	r0, [r1, #0]
 800caa2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800caa6:	f01e 0f10 	tst.w	lr, #16
 800caaa:	bf08      	it	eq
 800caac:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800cab0:	f380 8809 	msr	PSP, r0
 800cab4:	f3bf 8f6f 	isb	sy
 800cab8:	4770      	bx	lr
 800caba:	bf00      	nop
 800cabc:	f3af 8000 	nop.w

0800cac0 <pxCurrentTCBConst>:
 800cac0:	240248ec 	.word	0x240248ec

0800cac4 <xPortSysTickHandler>:
	);
}
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800cac4:	b508      	push	{r3, lr}
	__asm volatile
 800cac6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800caca:	f383 8811 	msr	BASEPRI, r3
 800cace:	f3bf 8f6f 	isb	sy
 800cad2:	f3bf 8f4f 	dsb	sy
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800cad6:	f000 fdc5 	bl	800d664 <xTaskIncrementTick>
 800cada:	b128      	cbz	r0, 800cae8 <xPortSysTickHandler+0x24>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800cadc:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cae0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cae4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800cae8:	2300      	movs	r3, #0
 800caea:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800caee:	bd08      	pop	{r3, pc}

0800caf0 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800caf0:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800caf4:	2b0f      	cmp	r3, #15
 800caf6:	d90e      	bls.n	800cb16 <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800caf8:	4a11      	ldr	r2, [pc, #68]	@ (800cb40 <vPortValidateInterruptPriority+0x50>)
 800cafa:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800cafc:	4a11      	ldr	r2, [pc, #68]	@ (800cb44 <vPortValidateInterruptPriority+0x54>)
 800cafe:	7812      	ldrb	r2, [r2, #0]
 800cb00:	429a      	cmp	r2, r3
 800cb02:	d908      	bls.n	800cb16 <vPortValidateInterruptPriority+0x26>
	__asm volatile
 800cb04:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb08:	f383 8811 	msr	BASEPRI, r3
 800cb0c:	f3bf 8f6f 	isb	sy
 800cb10:	f3bf 8f4f 	dsb	sy
 800cb14:	e7fe      	b.n	800cb14 <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800cb16:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb1a:	4a0b      	ldr	r2, [pc, #44]	@ (800cb48 <vPortValidateInterruptPriority+0x58>)
 800cb1c:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800cb20:	6812      	ldr	r2, [r2, #0]
 800cb22:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800cb26:	4293      	cmp	r3, r2
 800cb28:	d908      	bls.n	800cb3c <vPortValidateInterruptPriority+0x4c>
 800cb2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb2e:	f383 8811 	msr	BASEPRI, r3
 800cb32:	f3bf 8f6f 	isb	sy
 800cb36:	f3bf 8f4f 	dsb	sy
 800cb3a:	e7fe      	b.n	800cb3a <vPortValidateInterruptPriority+0x4a>
	}
 800cb3c:	4770      	bx	lr
 800cb3e:	bf00      	nop
 800cb40:	e000e3f0 	.word	0xe000e3f0
 800cb44:	240243f4 	.word	0x240243f4
 800cb48:	240243f0 	.word	0x240243f0

0800cb4c <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800cb4c:	b510      	push	{r4, lr}
 800cb4e:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cb50:	f7ff ff50 	bl	800c9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800cb54:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800cb56:	f7ff ff6d 	bl	800ca34 <vPortExitCritical>

	return xReturn;
}
 800cb5a:	fab4 f084 	clz	r0, r4
 800cb5e:	0940      	lsrs	r0, r0, #5
 800cb60:	bd10      	pop	{r4, pc}

0800cb62 <prvCopyDataToQueue>:
{
 800cb62:	b570      	push	{r4, r5, r6, lr}
 800cb64:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb66:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800cb68:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800cb6a:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800cb6c:	b942      	cbnz	r2, 800cb80 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800cb6e:	6806      	ldr	r6, [r0, #0]
 800cb70:	b99e      	cbnz	r6, 800cb9a <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800cb72:	6880      	ldr	r0, [r0, #8]
 800cb74:	f000 ffd2 	bl	800db1c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800cb78:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800cb7a:	3501      	adds	r5, #1
 800cb7c:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800cb7e:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800cb80:	b96e      	cbnz	r6, 800cb9e <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cb82:	6840      	ldr	r0, [r0, #4]
 800cb84:	f014 f9d1 	bl	8020f2a <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb88:	6863      	ldr	r3, [r4, #4]
 800cb8a:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800cb8c:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cb8e:	68a2      	ldr	r2, [r4, #8]
 800cb90:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cb92:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800cb94:	bf24      	itt	cs
 800cb96:	6823      	ldrcs	r3, [r4, #0]
 800cb98:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800cb9a:	2000      	movs	r0, #0
 800cb9c:	e7ed      	b.n	800cb7a <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800cb9e:	68c0      	ldr	r0, [r0, #12]
 800cba0:	f014 f9c3 	bl	8020f2a <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cba4:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800cba6:	68e3      	ldr	r3, [r4, #12]
 800cba8:	4251      	negs	r1, r2
 800cbaa:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800cbac:	6822      	ldr	r2, [r4, #0]
 800cbae:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800cbb0:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800cbb2:	bf3e      	ittt	cc
 800cbb4:	68a3      	ldrcc	r3, [r4, #8]
 800cbb6:	185b      	addcc	r3, r3, r1
 800cbb8:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800cbba:	2e02      	cmp	r6, #2
 800cbbc:	d1ed      	bne.n	800cb9a <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800cbbe:	b10d      	cbz	r5, 800cbc4 <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800cbc0:	3d01      	subs	r5, #1
 800cbc2:	e7ea      	b.n	800cb9a <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800cbc4:	4628      	mov	r0, r5
 800cbc6:	e7d8      	b.n	800cb7a <prvCopyDataToQueue+0x18>

0800cbc8 <prvCopyDataFromQueue>:
{
 800cbc8:	4603      	mov	r3, r0
 800cbca:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800cbce:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800cbd0:	b162      	cbz	r2, 800cbec <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd2:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbd4:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbd6:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800cbd8:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800cbda:	60dc      	str	r4, [r3, #12]
}
 800cbdc:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800cbe0:	bf24      	itt	cs
 800cbe2:	6819      	ldrcs	r1, [r3, #0]
 800cbe4:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800cbe6:	68d9      	ldr	r1, [r3, #12]
 800cbe8:	f014 b99f 	b.w	8020f2a <memcpy>
}
 800cbec:	f85d 4b04 	ldr.w	r4, [sp], #4
 800cbf0:	4770      	bx	lr

0800cbf2 <prvUnlockQueue>:
{
 800cbf2:	b570      	push	{r4, r5, r6, lr}
 800cbf4:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800cbf6:	f7ff fefd 	bl	800c9f4 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800cbfa:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cbfe:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800cc02:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800cc04:	2d00      	cmp	r5, #0
 800cc06:	dc14      	bgt.n	800cc32 <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800cc08:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc0a:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800cc0e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800cc12:	f7ff ff0f 	bl	800ca34 <vPortExitCritical>
	taskENTER_CRITICAL();
 800cc16:	f7ff feed 	bl	800c9f4 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800cc1a:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800cc1e:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800cc20:	2d00      	cmp	r5, #0
 800cc22:	dc12      	bgt.n	800cc4a <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800cc24:	23ff      	movs	r3, #255	@ 0xff
 800cc26:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800cc2a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800cc2e:	f7ff bf01 	b.w	800ca34 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cc32:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cc34:	2b00      	cmp	r3, #0
 800cc36:	d0e7      	beq.n	800cc08 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800cc38:	4630      	mov	r0, r6
 800cc3a:	f000 fe8b 	bl	800d954 <xTaskRemoveFromEventList>
 800cc3e:	b108      	cbz	r0, 800cc44 <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800cc40:	f000 ff12 	bl	800da68 <vTaskMissedYield>
			--cTxLock;
 800cc44:	3d01      	subs	r5, #1
 800cc46:	b26d      	sxtb	r5, r5
 800cc48:	e7dc      	b.n	800cc04 <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cc4a:	6923      	ldr	r3, [r4, #16]
 800cc4c:	2b00      	cmp	r3, #0
 800cc4e:	d0e9      	beq.n	800cc24 <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cc50:	4630      	mov	r0, r6
 800cc52:	f000 fe7f 	bl	800d954 <xTaskRemoveFromEventList>
 800cc56:	b108      	cbz	r0, 800cc5c <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800cc58:	f000 ff06 	bl	800da68 <vTaskMissedYield>
				--cRxLock;
 800cc5c:	3d01      	subs	r5, #1
 800cc5e:	b26d      	sxtb	r5, r5
 800cc60:	e7de      	b.n	800cc20 <prvUnlockQueue+0x2e>

0800cc62 <xQueueGenericReset>:
{
 800cc62:	b538      	push	{r3, r4, r5, lr}
 800cc64:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800cc66:	4604      	mov	r4, r0
 800cc68:	b940      	cbnz	r0, 800cc7c <xQueueGenericReset+0x1a>
 800cc6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cc6e:	f383 8811 	msr	BASEPRI, r3
 800cc72:	f3bf 8f6f 	isb	sy
 800cc76:	f3bf 8f4f 	dsb	sy
 800cc7a:	e7fe      	b.n	800cc7a <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800cc7c:	f7ff feba 	bl	800c9f4 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc80:	6822      	ldr	r2, [r4, #0]
 800cc82:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800cc86:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc88:	434b      	muls	r3, r1
 800cc8a:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc8c:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc8e:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc90:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc92:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800cc94:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cc96:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800cc98:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800cc9a:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800cc9e:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800cca2:	b9a5      	cbnz	r5, 800ccce <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800cca4:	6923      	ldr	r3, [r4, #16]
 800cca6:	b173      	cbz	r3, 800ccc6 <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800cca8:	f104 0010 	add.w	r0, r4, #16
 800ccac:	f000 fe52 	bl	800d954 <xTaskRemoveFromEventList>
 800ccb0:	b148      	cbz	r0, 800ccc6 <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800ccb2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ccb6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ccba:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ccbe:	f3bf 8f4f 	dsb	sy
 800ccc2:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800ccc6:	f7ff feb5 	bl	800ca34 <vPortExitCritical>
}
 800ccca:	2001      	movs	r0, #1
 800cccc:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800ccce:	f104 0010 	add.w	r0, r4, #16
 800ccd2:	f7ff fe3d 	bl	800c950 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800ccd6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800ccda:	f7ff fe39 	bl	800c950 <vListInitialise>
 800ccde:	e7f2      	b.n	800ccc6 <xQueueGenericReset+0x64>

0800cce0 <xQueueGenericCreateStatic>:
	{
 800cce0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cce2:	460d      	mov	r5, r1
 800cce4:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cce6:	b940      	cbnz	r0, 800ccfa <xQueueGenericCreateStatic+0x1a>
 800cce8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ccec:	f383 8811 	msr	BASEPRI, r3
 800ccf0:	f3bf 8f6f 	isb	sy
 800ccf4:	f3bf 8f4f 	dsb	sy
 800ccf8:	e7fe      	b.n	800ccf8 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800ccfa:	b943      	cbnz	r3, 800cd0e <xQueueGenericCreateStatic+0x2e>
 800ccfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd00:	f383 8811 	msr	BASEPRI, r3
 800cd04:	f3bf 8f6f 	isb	sy
 800cd08:	f3bf 8f4f 	dsb	sy
 800cd0c:	e7fe      	b.n	800cd0c <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800cd0e:	b14a      	cbz	r2, 800cd24 <xQueueGenericCreateStatic+0x44>
 800cd10:	b991      	cbnz	r1, 800cd38 <xQueueGenericCreateStatic+0x58>
 800cd12:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd16:	f383 8811 	msr	BASEPRI, r3
 800cd1a:	f3bf 8f6f 	isb	sy
 800cd1e:	f3bf 8f4f 	dsb	sy
 800cd22:	e7fe      	b.n	800cd22 <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800cd24:	b141      	cbz	r1, 800cd38 <xQueueGenericCreateStatic+0x58>
 800cd26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2a:	f383 8811 	msr	BASEPRI, r3
 800cd2e:	f3bf 8f6f 	isb	sy
 800cd32:	f3bf 8f4f 	dsb	sy
 800cd36:	e7fe      	b.n	800cd36 <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800cd38:	2350      	movs	r3, #80	@ 0x50
 800cd3a:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800cd3c:	9b01      	ldr	r3, [sp, #4]
 800cd3e:	2b50      	cmp	r3, #80	@ 0x50
 800cd40:	d008      	beq.n	800cd54 <xQueueGenericCreateStatic+0x74>
 800cd42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd46:	f383 8811 	msr	BASEPRI, r3
 800cd4a:	f3bf 8f6f 	isb	sy
 800cd4e:	f3bf 8f4f 	dsb	sy
 800cd52:	e7fe      	b.n	800cd52 <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd54:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cd56:	2d00      	cmp	r5, #0
 800cd58:	bf08      	it	eq
 800cd5a:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800cd5c:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800cd5e:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800cd62:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800cd64:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cd68:	4620      	mov	r0, r4
 800cd6a:	f7ff ff7a 	bl	800cc62 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800cd6e:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800cd72:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800cd74:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800cd78:	b003      	add	sp, #12
 800cd7a:	bd30      	pop	{r4, r5, pc}

0800cd7c <xQueueGenericCreate>:
	{
 800cd7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cd7e:	460d      	mov	r5, r1
 800cd80:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800cd82:	4606      	mov	r6, r0
 800cd84:	b940      	cbnz	r0, 800cd98 <xQueueGenericCreate+0x1c>
 800cd86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd8a:	f383 8811 	msr	BASEPRI, r3
 800cd8e:	f3bf 8f6f 	isb	sy
 800cd92:	f3bf 8f4f 	dsb	sy
 800cd96:	e7fe      	b.n	800cd96 <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800cd98:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800cd9a:	3050      	adds	r0, #80	@ 0x50
 800cd9c:	f7ff fd02 	bl	800c7a4 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800cda0:	4604      	mov	r4, r0
 800cda2:	b170      	cbz	r0, 800cdc2 <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800cda4:	2300      	movs	r3, #0
 800cda6:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800cdaa:	b165      	cbz	r5, 800cdc6 <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800cdac:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdb0:	2101      	movs	r1, #1
 800cdb2:	4620      	mov	r0, r4
 800cdb4:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800cdb6:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800cdba:	f7ff ff52 	bl	800cc62 <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800cdbe:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800cdc2:	4620      	mov	r0, r4
 800cdc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800cdc6:	4603      	mov	r3, r0
 800cdc8:	e7f2      	b.n	800cdb0 <xQueueGenericCreate+0x34>

0800cdca <xQueueCreateCountingSemaphoreStatic>:
	{
 800cdca:	b513      	push	{r0, r1, r4, lr}
 800cdcc:	4613      	mov	r3, r2
 800cdce:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800cdd0:	b940      	cbnz	r0, 800cde4 <xQueueCreateCountingSemaphoreStatic+0x1a>
 800cdd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdd6:	f383 8811 	msr	BASEPRI, r3
 800cdda:	f3bf 8f6f 	isb	sy
 800cdde:	f3bf 8f4f 	dsb	sy
 800cde2:	e7fe      	b.n	800cde2 <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800cde4:	4288      	cmp	r0, r1
 800cde6:	d208      	bcs.n	800cdfa <xQueueCreateCountingSemaphoreStatic+0x30>
 800cde8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdec:	f383 8811 	msr	BASEPRI, r3
 800cdf0:	f3bf 8f6f 	isb	sy
 800cdf4:	f3bf 8f4f 	dsb	sy
 800cdf8:	e7fe      	b.n	800cdf8 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800cdfa:	2202      	movs	r2, #2
 800cdfc:	9200      	str	r2, [sp, #0]
 800cdfe:	2200      	movs	r2, #0
 800ce00:	4611      	mov	r1, r2
 800ce02:	f7ff ff6d 	bl	800cce0 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800ce06:	b100      	cbz	r0, 800ce0a <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ce08:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ce0a:	b002      	add	sp, #8
 800ce0c:	bd10      	pop	{r4, pc}

0800ce0e <xQueueCreateCountingSemaphore>:
	{
 800ce0e:	b510      	push	{r4, lr}
 800ce10:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800ce12:	b940      	cbnz	r0, 800ce26 <xQueueCreateCountingSemaphore+0x18>
 800ce14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce18:	f383 8811 	msr	BASEPRI, r3
 800ce1c:	f3bf 8f6f 	isb	sy
 800ce20:	f3bf 8f4f 	dsb	sy
 800ce24:	e7fe      	b.n	800ce24 <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800ce26:	4288      	cmp	r0, r1
 800ce28:	d208      	bcs.n	800ce3c <xQueueCreateCountingSemaphore+0x2e>
 800ce2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce2e:	f383 8811 	msr	BASEPRI, r3
 800ce32:	f3bf 8f6f 	isb	sy
 800ce36:	f3bf 8f4f 	dsb	sy
 800ce3a:	e7fe      	b.n	800ce3a <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800ce3c:	2202      	movs	r2, #2
 800ce3e:	2100      	movs	r1, #0
 800ce40:	f7ff ff9c 	bl	800cd7c <xQueueGenericCreate>
		if( xHandle != NULL )
 800ce44:	b100      	cbz	r0, 800ce48 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800ce46:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800ce48:	bd10      	pop	{r4, pc}

0800ce4a <xQueueGenericSend>:
{
 800ce4a:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800ce4e:	460f      	mov	r7, r1
 800ce50:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800ce52:	4604      	mov	r4, r0
{
 800ce54:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800ce56:	b940      	cbnz	r0, 800ce6a <xQueueGenericSend+0x20>
 800ce58:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce5c:	f383 8811 	msr	BASEPRI, r3
 800ce60:	f3bf 8f6f 	isb	sy
 800ce64:	f3bf 8f4f 	dsb	sy
 800ce68:	e7fe      	b.n	800ce68 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800ce6a:	b951      	cbnz	r1, 800ce82 <xQueueGenericSend+0x38>
 800ce6c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800ce6e:	b143      	cbz	r3, 800ce82 <xQueueGenericSend+0x38>
 800ce70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce74:	f383 8811 	msr	BASEPRI, r3
 800ce78:	f3bf 8f6f 	isb	sy
 800ce7c:	f3bf 8f4f 	dsb	sy
 800ce80:	e7fe      	b.n	800ce80 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800ce82:	2e02      	cmp	r6, #2
 800ce84:	d10b      	bne.n	800ce9e <xQueueGenericSend+0x54>
 800ce86:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ce88:	2b01      	cmp	r3, #1
 800ce8a:	d008      	beq.n	800ce9e <xQueueGenericSend+0x54>
 800ce8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ce90:	f383 8811 	msr	BASEPRI, r3
 800ce94:	f3bf 8f6f 	isb	sy
 800ce98:	f3bf 8f4f 	dsb	sy
 800ce9c:	e7fe      	b.n	800ce9c <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800ce9e:	f000 fdef 	bl	800da80 <xTaskGetSchedulerState>
 800cea2:	4605      	mov	r5, r0
 800cea4:	b330      	cbz	r0, 800cef4 <xQueueGenericSend+0xaa>
 800cea6:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800cea8:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800ceac:	f7ff fda2 	bl	800c9f4 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800ceb0:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800ceb2:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800ceb4:	429a      	cmp	r2, r3
 800ceb6:	d301      	bcc.n	800cebc <xQueueGenericSend+0x72>
 800ceb8:	2e02      	cmp	r6, #2
 800ceba:	d127      	bne.n	800cf0c <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800cebc:	4632      	mov	r2, r6
 800cebe:	4639      	mov	r1, r7
 800cec0:	4620      	mov	r0, r4
 800cec2:	f7ff fe4e 	bl	800cb62 <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800cec6:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800cec8:	b11b      	cbz	r3, 800ced2 <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ceca:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800cece:	f000 fd41 	bl	800d954 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800ced2:	b148      	cbz	r0, 800cee8 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800ced4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ced8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cedc:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cee0:	f3bf 8f4f 	dsb	sy
 800cee4:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800cee8:	f7ff fda4 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800ceec:	2001      	movs	r0, #1
}
 800ceee:	b004      	add	sp, #16
 800cef0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800cef4:	9b01      	ldr	r3, [sp, #4]
 800cef6:	2b00      	cmp	r3, #0
 800cef8:	d0d6      	beq.n	800cea8 <xQueueGenericSend+0x5e>
 800cefa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cefe:	f383 8811 	msr	BASEPRI, r3
 800cf02:	f3bf 8f6f 	isb	sy
 800cf06:	f3bf 8f4f 	dsb	sy
 800cf0a:	e7fe      	b.n	800cf0a <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800cf0c:	9b01      	ldr	r3, [sp, #4]
 800cf0e:	b91b      	cbnz	r3, 800cf18 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800cf10:	f7ff fd90 	bl	800ca34 <vPortExitCritical>
					return errQUEUE_FULL;
 800cf14:	2000      	movs	r0, #0
 800cf16:	e7ea      	b.n	800ceee <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800cf18:	b915      	cbnz	r5, 800cf20 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800cf1a:	a802      	add	r0, sp, #8
 800cf1c:	f000 fd5c 	bl	800d9d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800cf20:	f7ff fd88 	bl	800ca34 <vPortExitCritical>
		vTaskSuspendAll();
 800cf24:	f000 fb96 	bl	800d654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800cf28:	f7ff fd64 	bl	800c9f4 <vPortEnterCritical>
 800cf2c:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800cf30:	2bff      	cmp	r3, #255	@ 0xff
 800cf32:	d101      	bne.n	800cf38 <xQueueGenericSend+0xee>
 800cf34:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800cf38:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800cf3c:	2bff      	cmp	r3, #255	@ 0xff
 800cf3e:	d101      	bne.n	800cf44 <xQueueGenericSend+0xfa>
 800cf40:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800cf44:	f7ff fd76 	bl	800ca34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800cf48:	a901      	add	r1, sp, #4
 800cf4a:	a802      	add	r0, sp, #8
 800cf4c:	f000 fd50 	bl	800d9f0 <xTaskCheckForTimeOut>
 800cf50:	bb38      	cbnz	r0, 800cfa2 <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800cf52:	f7ff fd4f 	bl	800c9f4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800cf56:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800cf58:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800cf5a:	429a      	cmp	r2, r3
 800cf5c:	d10e      	bne.n	800cf7c <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800cf5e:	f7ff fd69 	bl	800ca34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800cf62:	9901      	ldr	r1, [sp, #4]
 800cf64:	f104 0010 	add.w	r0, r4, #16
 800cf68:	f000 fcda 	bl	800d920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800cf6c:	4620      	mov	r0, r4
 800cf6e:	f7ff fe40 	bl	800cbf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800cf72:	f000 fc0d 	bl	800d790 <xTaskResumeAll>
 800cf76:	b148      	cbz	r0, 800cf8c <xQueueGenericSend+0x142>
 800cf78:	2501      	movs	r5, #1
 800cf7a:	e797      	b.n	800ceac <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800cf7c:	f7ff fd5a 	bl	800ca34 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800cf80:	4620      	mov	r0, r4
 800cf82:	f7ff fe36 	bl	800cbf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800cf86:	f000 fc03 	bl	800d790 <xTaskResumeAll>
 800cf8a:	e7f5      	b.n	800cf78 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800cf8c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cf90:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cf94:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cf98:	f3bf 8f4f 	dsb	sy
 800cf9c:	f3bf 8f6f 	isb	sy
 800cfa0:	e7ea      	b.n	800cf78 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800cfa2:	4620      	mov	r0, r4
 800cfa4:	f7ff fe25 	bl	800cbf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800cfa8:	f000 fbf2 	bl	800d790 <xTaskResumeAll>
			return errQUEUE_FULL;
 800cfac:	e7b2      	b.n	800cf14 <xQueueGenericSend+0xca>

0800cfae <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cfae:	2200      	movs	r2, #0
	{
 800cfb0:	460b      	mov	r3, r1
 800cfb2:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800cfb4:	4611      	mov	r1, r2
 800cfb6:	9000      	str	r0, [sp, #0]
 800cfb8:	2001      	movs	r0, #1
 800cfba:	f7ff fe91 	bl	800cce0 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800cfbe:	4604      	mov	r4, r0
 800cfc0:	b138      	cbz	r0, 800cfd2 <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfc2:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cfc4:	461a      	mov	r2, r3
 800cfc6:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800cfc8:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800cfca:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800cfcc:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800cfce:	f7ff ff3c 	bl	800ce4a <xQueueGenericSend>
	}
 800cfd2:	4620      	mov	r0, r4
 800cfd4:	b002      	add	sp, #8
 800cfd6:	bd10      	pop	{r4, pc}

0800cfd8 <xQueueGiveMutexRecursive>:
	{
 800cfd8:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800cfda:	4604      	mov	r4, r0
 800cfdc:	b940      	cbnz	r0, 800cff0 <xQueueGiveMutexRecursive+0x18>
 800cfde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfe2:	f383 8811 	msr	BASEPRI, r3
 800cfe6:	f3bf 8f6f 	isb	sy
 800cfea:	f3bf 8f4f 	dsb	sy
 800cfee:	e7fe      	b.n	800cfee <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800cff0:	6885      	ldr	r5, [r0, #8]
 800cff2:	f000 fd3f 	bl	800da74 <xTaskGetCurrentTaskHandle>
 800cff6:	4285      	cmp	r5, r0
 800cff8:	d10b      	bne.n	800d012 <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800cffa:	68e3      	ldr	r3, [r4, #12]
 800cffc:	3b01      	subs	r3, #1
 800cffe:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d000:	b10b      	cbz	r3, 800d006 <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800d002:	2001      	movs	r0, #1
	}
 800d004:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d006:	461a      	mov	r2, r3
 800d008:	4619      	mov	r1, r3
 800d00a:	4620      	mov	r0, r4
 800d00c:	f7ff ff1d 	bl	800ce4a <xQueueGenericSend>
 800d010:	e7f7      	b.n	800d002 <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800d012:	2000      	movs	r0, #0
		return xReturn;
 800d014:	e7f6      	b.n	800d004 <xQueueGiveMutexRecursive+0x2c>

0800d016 <xQueueCreateMutex>:
	{
 800d016:	b570      	push	{r4, r5, r6, lr}
 800d018:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d01a:	2050      	movs	r0, #80	@ 0x50
 800d01c:	f7ff fbc2 	bl	800c7a4 <pvPortMalloc>
 800d020:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800d022:	b198      	cbz	r0, 800d04c <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d024:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800d026:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d028:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d02a:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d02e:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d032:	f7ff fe16 	bl	800cc62 <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d036:	462b      	mov	r3, r5
 800d038:	462a      	mov	r2, r5
 800d03a:	4629      	mov	r1, r5
 800d03c:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d03e:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d042:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d044:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d046:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d048:	f7ff feff 	bl	800ce4a <xQueueGenericSend>
	}
 800d04c:	4620      	mov	r0, r4
 800d04e:	bd70      	pop	{r4, r5, r6, pc}

0800d050 <xQueueGenericSendFromISR>:
{
 800d050:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d054:	4689      	mov	r9, r1
 800d056:	4617      	mov	r7, r2
 800d058:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d05a:	4604      	mov	r4, r0
 800d05c:	b940      	cbnz	r0, 800d070 <xQueueGenericSendFromISR+0x20>
 800d05e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d062:	f383 8811 	msr	BASEPRI, r3
 800d066:	f3bf 8f6f 	isb	sy
 800d06a:	f3bf 8f4f 	dsb	sy
 800d06e:	e7fe      	b.n	800d06e <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d070:	b951      	cbnz	r1, 800d088 <xQueueGenericSendFromISR+0x38>
 800d072:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d074:	b143      	cbz	r3, 800d088 <xQueueGenericSendFromISR+0x38>
 800d076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d07a:	f383 8811 	msr	BASEPRI, r3
 800d07e:	f3bf 8f6f 	isb	sy
 800d082:	f3bf 8f4f 	dsb	sy
 800d086:	e7fe      	b.n	800d086 <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d088:	2e02      	cmp	r6, #2
 800d08a:	d10b      	bne.n	800d0a4 <xQueueGenericSendFromISR+0x54>
 800d08c:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d08e:	2b01      	cmp	r3, #1
 800d090:	d008      	beq.n	800d0a4 <xQueueGenericSendFromISR+0x54>
 800d092:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d096:	f383 8811 	msr	BASEPRI, r3
 800d09a:	f3bf 8f6f 	isb	sy
 800d09e:	f3bf 8f4f 	dsb	sy
 800d0a2:	e7fe      	b.n	800d0a2 <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d0a4:	f7ff fd24 	bl	800caf0 <vPortValidateInterruptPriority>
	__asm volatile
 800d0a8:	f3ef 8811 	mrs	r8, BASEPRI
 800d0ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b0:	f383 8811 	msr	BASEPRI, r3
 800d0b4:	f3bf 8f6f 	isb	sy
 800d0b8:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d0bc:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d0be:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d0c0:	429a      	cmp	r2, r3
 800d0c2:	d301      	bcc.n	800d0c8 <xQueueGenericSendFromISR+0x78>
 800d0c4:	2e02      	cmp	r6, #2
 800d0c6:	d11e      	bne.n	800d106 <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0c8:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0cc:	4632      	mov	r2, r6
 800d0ce:	4649      	mov	r1, r9
 800d0d0:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d0d2:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d0d4:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d0d6:	f7ff fd44 	bl	800cb62 <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d0da:	1c6b      	adds	r3, r5, #1
 800d0dc:	d10e      	bne.n	800d0fc <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d0de:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d0e0:	b13b      	cbz	r3, 800d0f2 <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d0e2:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d0e6:	f000 fc35 	bl	800d954 <xTaskRemoveFromEventList>
 800d0ea:	b110      	cbz	r0, 800d0f2 <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d0ec:	b10f      	cbz	r7, 800d0f2 <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d0ee:	2301      	movs	r3, #1
 800d0f0:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800d0f2:	2001      	movs	r0, #1
	__asm volatile
 800d0f4:	f388 8811 	msr	BASEPRI, r8
}
 800d0f8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d0fc:	3501      	adds	r5, #1
 800d0fe:	b26d      	sxtb	r5, r5
 800d100:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800d104:	e7f5      	b.n	800d0f2 <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800d106:	2000      	movs	r0, #0
 800d108:	e7f4      	b.n	800d0f4 <xQueueGenericSendFromISR+0xa4>

0800d10a <xQueueGiveFromISR>:
{
 800d10a:	b570      	push	{r4, r5, r6, lr}
 800d10c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d10e:	4604      	mov	r4, r0
 800d110:	b940      	cbnz	r0, 800d124 <xQueueGiveFromISR+0x1a>
	__asm volatile
 800d112:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d116:	f383 8811 	msr	BASEPRI, r3
 800d11a:	f3bf 8f6f 	isb	sy
 800d11e:	f3bf 8f4f 	dsb	sy
 800d122:	e7fe      	b.n	800d122 <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d124:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d126:	b143      	cbz	r3, 800d13a <xQueueGiveFromISR+0x30>
 800d128:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d12c:	f383 8811 	msr	BASEPRI, r3
 800d130:	f3bf 8f6f 	isb	sy
 800d134:	f3bf 8f4f 	dsb	sy
 800d138:	e7fe      	b.n	800d138 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d13a:	6803      	ldr	r3, [r0, #0]
 800d13c:	b953      	cbnz	r3, 800d154 <xQueueGiveFromISR+0x4a>
 800d13e:	6883      	ldr	r3, [r0, #8]
 800d140:	b143      	cbz	r3, 800d154 <xQueueGiveFromISR+0x4a>
 800d142:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d146:	f383 8811 	msr	BASEPRI, r3
 800d14a:	f3bf 8f6f 	isb	sy
 800d14e:	f3bf 8f4f 	dsb	sy
 800d152:	e7fe      	b.n	800d152 <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d154:	f7ff fccc 	bl	800caf0 <vPortValidateInterruptPriority>
	__asm volatile
 800d158:	f3ef 8611 	mrs	r6, BASEPRI
 800d15c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d160:	f383 8811 	msr	BASEPRI, r3
 800d164:	f3bf 8f6f 	isb	sy
 800d168:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d16c:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d16e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d170:	4293      	cmp	r3, r2
 800d172:	d919      	bls.n	800d1a8 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d174:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d178:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800d17a:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800d17c:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d17e:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d180:	d10d      	bne.n	800d19e <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d182:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d184:	b13b      	cbz	r3, 800d196 <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d186:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d18a:	f000 fbe3 	bl	800d954 <xTaskRemoveFromEventList>
 800d18e:	b110      	cbz	r0, 800d196 <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800d190:	b10d      	cbz	r5, 800d196 <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d192:	2301      	movs	r3, #1
 800d194:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800d196:	2001      	movs	r0, #1
	__asm volatile
 800d198:	f386 8811 	msr	BASEPRI, r6
}
 800d19c:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d19e:	3301      	adds	r3, #1
 800d1a0:	b25b      	sxtb	r3, r3
 800d1a2:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d1a6:	e7f6      	b.n	800d196 <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800d1a8:	2000      	movs	r0, #0
 800d1aa:	e7f5      	b.n	800d198 <xQueueGiveFromISR+0x8e>

0800d1ac <xQueueReceive>:
{
 800d1ac:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d1b0:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800d1b2:	4604      	mov	r4, r0
{
 800d1b4:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d1b6:	b940      	cbnz	r0, 800d1ca <xQueueReceive+0x1e>
	__asm volatile
 800d1b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1bc:	f383 8811 	msr	BASEPRI, r3
 800d1c0:	f3bf 8f6f 	isb	sy
 800d1c4:	f3bf 8f4f 	dsb	sy
 800d1c8:	e7fe      	b.n	800d1c8 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d1ca:	b951      	cbnz	r1, 800d1e2 <xQueueReceive+0x36>
 800d1cc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d1ce:	b143      	cbz	r3, 800d1e2 <xQueueReceive+0x36>
 800d1d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1d4:	f383 8811 	msr	BASEPRI, r3
 800d1d8:	f3bf 8f6f 	isb	sy
 800d1dc:	f3bf 8f4f 	dsb	sy
 800d1e0:	e7fe      	b.n	800d1e0 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d1e2:	f000 fc4d 	bl	800da80 <xTaskGetSchedulerState>
 800d1e6:	4605      	mov	r5, r0
 800d1e8:	b318      	cbz	r0, 800d232 <xQueueReceive+0x86>
 800d1ea:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d1ec:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d1f0:	f7ff fc00 	bl	800c9f4 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d1f4:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d1f6:	b347      	cbz	r7, 800d24a <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d1f8:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f7ff fce3 	bl	800cbc8 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d202:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d204:	6923      	ldr	r3, [r4, #16]
 800d206:	b173      	cbz	r3, 800d226 <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d208:	f104 0010 	add.w	r0, r4, #16
 800d20c:	f000 fba2 	bl	800d954 <xTaskRemoveFromEventList>
 800d210:	b148      	cbz	r0, 800d226 <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800d212:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d216:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d21a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d21e:	f3bf 8f4f 	dsb	sy
 800d222:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d226:	f7ff fc05 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800d22a:	2001      	movs	r0, #1
}
 800d22c:	b004      	add	sp, #16
 800d22e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d232:	9b01      	ldr	r3, [sp, #4]
 800d234:	2b00      	cmp	r3, #0
 800d236:	d0d9      	beq.n	800d1ec <xQueueReceive+0x40>
 800d238:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d23c:	f383 8811 	msr	BASEPRI, r3
 800d240:	f3bf 8f6f 	isb	sy
 800d244:	f3bf 8f4f 	dsb	sy
 800d248:	e7fe      	b.n	800d248 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d24a:	9b01      	ldr	r3, [sp, #4]
 800d24c:	b91b      	cbnz	r3, 800d256 <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800d24e:	f7ff fbf1 	bl	800ca34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d252:	2000      	movs	r0, #0
 800d254:	e7ea      	b.n	800d22c <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800d256:	b915      	cbnz	r5, 800d25e <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d258:	a802      	add	r0, sp, #8
 800d25a:	f000 fbbd 	bl	800d9d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d25e:	f7ff fbe9 	bl	800ca34 <vPortExitCritical>
		vTaskSuspendAll();
 800d262:	f000 f9f7 	bl	800d654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d266:	f7ff fbc5 	bl	800c9f4 <vPortEnterCritical>
 800d26a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d26e:	2bff      	cmp	r3, #255	@ 0xff
 800d270:	d101      	bne.n	800d276 <xQueueReceive+0xca>
 800d272:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d276:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d27a:	2bff      	cmp	r3, #255	@ 0xff
 800d27c:	d101      	bne.n	800d282 <xQueueReceive+0xd6>
 800d27e:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d282:	f7ff fbd7 	bl	800ca34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d286:	a901      	add	r1, sp, #4
 800d288:	a802      	add	r0, sp, #8
 800d28a:	f000 fbb1 	bl	800d9f0 <xTaskCheckForTimeOut>
 800d28e:	bb00      	cbnz	r0, 800d2d2 <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d290:	4620      	mov	r0, r4
 800d292:	f7ff fc5b 	bl	800cb4c <prvIsQueueEmpty>
 800d296:	b1b0      	cbz	r0, 800d2c6 <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d298:	9901      	ldr	r1, [sp, #4]
 800d29a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d29e:	f000 fb3f 	bl	800d920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d2a2:	4620      	mov	r0, r4
 800d2a4:	f7ff fca5 	bl	800cbf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d2a8:	f000 fa72 	bl	800d790 <xTaskResumeAll>
 800d2ac:	b948      	cbnz	r0, 800d2c2 <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800d2ae:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d2b2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d2b6:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d2ba:	f3bf 8f4f 	dsb	sy
 800d2be:	f3bf 8f6f 	isb	sy
 800d2c2:	2501      	movs	r5, #1
 800d2c4:	e794      	b.n	800d1f0 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f7ff fc93 	bl	800cbf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d2cc:	f000 fa60 	bl	800d790 <xTaskResumeAll>
 800d2d0:	e7f7      	b.n	800d2c2 <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800d2d2:	4620      	mov	r0, r4
 800d2d4:	f7ff fc8d 	bl	800cbf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d2d8:	f000 fa5a 	bl	800d790 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d2dc:	4620      	mov	r0, r4
 800d2de:	f7ff fc35 	bl	800cb4c <prvIsQueueEmpty>
 800d2e2:	2800      	cmp	r0, #0
 800d2e4:	d0ed      	beq.n	800d2c2 <xQueueReceive+0x116>
 800d2e6:	e7b4      	b.n	800d252 <xQueueReceive+0xa6>

0800d2e8 <xQueueSemaphoreTake>:
{
 800d2e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d2ea:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800d2ec:	4604      	mov	r4, r0
{
 800d2ee:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d2f0:	b940      	cbnz	r0, 800d304 <xQueueSemaphoreTake+0x1c>
 800d2f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d2f6:	f383 8811 	msr	BASEPRI, r3
 800d2fa:	f3bf 8f6f 	isb	sy
 800d2fe:	f3bf 8f4f 	dsb	sy
 800d302:	e7fe      	b.n	800d302 <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d304:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800d306:	b145      	cbz	r5, 800d31a <xQueueSemaphoreTake+0x32>
 800d308:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d30c:	f383 8811 	msr	BASEPRI, r3
 800d310:	f3bf 8f6f 	isb	sy
 800d314:	f3bf 8f4f 	dsb	sy
 800d318:	e7fe      	b.n	800d318 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d31a:	f000 fbb1 	bl	800da80 <xTaskGetSchedulerState>
 800d31e:	4606      	mov	r6, r0
 800d320:	b320      	cbz	r0, 800d36c <xQueueSemaphoreTake+0x84>
 800d322:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d324:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800d326:	f7ff fb65 	bl	800c9f4 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d32a:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d32c:	b353      	cbz	r3, 800d384 <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d32e:	3b01      	subs	r3, #1
 800d330:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d332:	6823      	ldr	r3, [r4, #0]
 800d334:	b913      	cbnz	r3, 800d33c <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d336:	f000 fc81 	bl	800dc3c <pvTaskIncrementMutexHeldCount>
 800d33a:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d33c:	6923      	ldr	r3, [r4, #16]
 800d33e:	b173      	cbz	r3, 800d35e <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d340:	f104 0010 	add.w	r0, r4, #16
 800d344:	f000 fb06 	bl	800d954 <xTaskRemoveFromEventList>
 800d348:	b148      	cbz	r0, 800d35e <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800d34a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d34e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d352:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d356:	f3bf 8f4f 	dsb	sy
 800d35a:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d35e:	f7ff fb69 	bl	800ca34 <vPortExitCritical>
				return pdPASS;
 800d362:	2001      	movs	r0, #1
}
 800d364:	b005      	add	sp, #20
 800d366:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d368:	4635      	mov	r5, r6
 800d36a:	e7db      	b.n	800d324 <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d36c:	9b01      	ldr	r3, [sp, #4]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d0fa      	beq.n	800d368 <xQueueSemaphoreTake+0x80>
 800d372:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	e7fe      	b.n	800d382 <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d384:	9b01      	ldr	r3, [sp, #4]
 800d386:	b953      	cbnz	r3, 800d39e <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800d388:	2d00      	cmp	r5, #0
 800d38a:	d066      	beq.n	800d45a <xQueueSemaphoreTake+0x172>
 800d38c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d390:	f383 8811 	msr	BASEPRI, r3
 800d394:	f3bf 8f6f 	isb	sy
 800d398:	f3bf 8f4f 	dsb	sy
 800d39c:	e7fe      	b.n	800d39c <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800d39e:	b916      	cbnz	r6, 800d3a6 <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d3a0:	a802      	add	r0, sp, #8
 800d3a2:	f000 fb19 	bl	800d9d8 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d3a6:	f7ff fb45 	bl	800ca34 <vPortExitCritical>
		vTaskSuspendAll();
 800d3aa:	f000 f953 	bl	800d654 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d3ae:	f7ff fb21 	bl	800c9f4 <vPortEnterCritical>
 800d3b2:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d3b6:	2bff      	cmp	r3, #255	@ 0xff
 800d3b8:	d101      	bne.n	800d3be <xQueueSemaphoreTake+0xd6>
 800d3ba:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800d3be:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d3c2:	2bff      	cmp	r3, #255	@ 0xff
 800d3c4:	d101      	bne.n	800d3ca <xQueueSemaphoreTake+0xe2>
 800d3c6:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3ca:	f7ff fb33 	bl	800ca34 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d3ce:	a901      	add	r1, sp, #4
 800d3d0:	a802      	add	r0, sp, #8
 800d3d2:	f000 fb0d 	bl	800d9f0 <xTaskCheckForTimeOut>
 800d3d6:	bb50      	cbnz	r0, 800d42e <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d3d8:	4620      	mov	r0, r4
 800d3da:	f7ff fbb7 	bl	800cb4c <prvIsQueueEmpty>
 800d3de:	b300      	cbz	r0, 800d422 <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d3e0:	6823      	ldr	r3, [r4, #0]
 800d3e2:	b93b      	cbnz	r3, 800d3f4 <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800d3e4:	f7ff fb06 	bl	800c9f4 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d3e8:	68a0      	ldr	r0, [r4, #8]
 800d3ea:	f000 fb59 	bl	800daa0 <xTaskPriorityInherit>
 800d3ee:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800d3f0:	f7ff fb20 	bl	800ca34 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d3f4:	9901      	ldr	r1, [sp, #4]
 800d3f6:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d3fa:	f000 fa91 	bl	800d920 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d3fe:	4620      	mov	r0, r4
 800d400:	f7ff fbf7 	bl	800cbf2 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d404:	f000 f9c4 	bl	800d790 <xTaskResumeAll>
 800d408:	b948      	cbnz	r0, 800d41e <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800d40a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d40e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d412:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d416:	f3bf 8f4f 	dsb	sy
 800d41a:	f3bf 8f6f 	isb	sy
 800d41e:	2601      	movs	r6, #1
 800d420:	e781      	b.n	800d326 <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800d422:	4620      	mov	r0, r4
 800d424:	f7ff fbe5 	bl	800cbf2 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d428:	f000 f9b2 	bl	800d790 <xTaskResumeAll>
 800d42c:	e7f7      	b.n	800d41e <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800d42e:	4620      	mov	r0, r4
 800d430:	f7ff fbdf 	bl	800cbf2 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d434:	f000 f9ac 	bl	800d790 <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d438:	4620      	mov	r0, r4
 800d43a:	f7ff fb87 	bl	800cb4c <prvIsQueueEmpty>
 800d43e:	2800      	cmp	r0, #0
 800d440:	d0ed      	beq.n	800d41e <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800d442:	b165      	cbz	r5, 800d45e <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800d444:	f7ff fad6 	bl	800c9f4 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800d448:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800d44a:	b119      	cbz	r1, 800d454 <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800d44c:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800d44e:	6819      	ldr	r1, [r3, #0]
 800d450:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800d454:	68a0      	ldr	r0, [r4, #8]
 800d456:	f000 fba3 	bl	800dba0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800d45a:	f7ff faeb 	bl	800ca34 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d45e:	2000      	movs	r0, #0
 800d460:	e780      	b.n	800d364 <xQueueSemaphoreTake+0x7c>

0800d462 <xQueueTakeMutexRecursive>:
	{
 800d462:	b570      	push	{r4, r5, r6, lr}
 800d464:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800d466:	4604      	mov	r4, r0
 800d468:	b940      	cbnz	r0, 800d47c <xQueueTakeMutexRecursive+0x1a>
 800d46a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d46e:	f383 8811 	msr	BASEPRI, r3
 800d472:	f3bf 8f6f 	isb	sy
 800d476:	f3bf 8f4f 	dsb	sy
 800d47a:	e7fe      	b.n	800d47a <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d47c:	6886      	ldr	r6, [r0, #8]
 800d47e:	f000 faf9 	bl	800da74 <xTaskGetCurrentTaskHandle>
 800d482:	4286      	cmp	r6, r0
 800d484:	d104      	bne.n	800d490 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d486:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800d488:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d48a:	3301      	adds	r3, #1
 800d48c:	60e3      	str	r3, [r4, #12]
	}
 800d48e:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800d490:	4629      	mov	r1, r5
 800d492:	4620      	mov	r0, r4
 800d494:	f7ff ff28 	bl	800d2e8 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800d498:	2800      	cmp	r0, #0
 800d49a:	d0f8      	beq.n	800d48e <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800d49c:	68e3      	ldr	r3, [r4, #12]
 800d49e:	3301      	adds	r3, #1
 800d4a0:	60e3      	str	r3, [r4, #12]
 800d4a2:	e7f4      	b.n	800d48e <xQueueTakeMutexRecursive+0x2c>

0800d4a4 <xQueueReceiveFromISR>:
{
 800d4a4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d4a8:	4689      	mov	r9, r1
 800d4aa:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800d4ac:	4604      	mov	r4, r0
 800d4ae:	b940      	cbnz	r0, 800d4c2 <xQueueReceiveFromISR+0x1e>
 800d4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4b4:	f383 8811 	msr	BASEPRI, r3
 800d4b8:	f3bf 8f6f 	isb	sy
 800d4bc:	f3bf 8f4f 	dsb	sy
 800d4c0:	e7fe      	b.n	800d4c0 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4c2:	b951      	cbnz	r1, 800d4da <xQueueReceiveFromISR+0x36>
 800d4c4:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d4c6:	b143      	cbz	r3, 800d4da <xQueueReceiveFromISR+0x36>
 800d4c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4cc:	f383 8811 	msr	BASEPRI, r3
 800d4d0:	f3bf 8f6f 	isb	sy
 800d4d4:	f3bf 8f4f 	dsb	sy
 800d4d8:	e7fe      	b.n	800d4d8 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d4da:	f7ff fb09 	bl	800caf0 <vPortValidateInterruptPriority>
	__asm volatile
 800d4de:	f3ef 8711 	mrs	r7, BASEPRI
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d4f2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d4f4:	b30d      	cbz	r5, 800d53a <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800d4f6:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d4fa:	4649      	mov	r1, r9
 800d4fc:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d4fe:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800d500:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d502:	f7ff fb61 	bl	800cbc8 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d506:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800d508:	1c73      	adds	r3, r6, #1
 800d50a:	d111      	bne.n	800d530 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d50c:	6923      	ldr	r3, [r4, #16]
 800d50e:	b153      	cbz	r3, 800d526 <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d510:	f104 0010 	add.w	r0, r4, #16
 800d514:	f000 fa1e 	bl	800d954 <xTaskRemoveFromEventList>
 800d518:	b128      	cbz	r0, 800d526 <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800d51a:	f1b8 0f00 	cmp.w	r8, #0
 800d51e:	d002      	beq.n	800d526 <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800d520:	2301      	movs	r3, #1
 800d522:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800d526:	2001      	movs	r0, #1
	__asm volatile
 800d528:	f387 8811 	msr	BASEPRI, r7
}
 800d52c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800d530:	3601      	adds	r6, #1
 800d532:	b276      	sxtb	r6, r6
 800d534:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800d538:	e7f5      	b.n	800d526 <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800d53a:	4628      	mov	r0, r5
 800d53c:	e7f4      	b.n	800d528 <xQueueReceiveFromISR+0x84>
	...

0800d540 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d540:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d542:	4a07      	ldr	r2, [pc, #28]	@ (800d560 <vQueueAddToRegistry+0x20>)
	{
 800d544:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800d546:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800d54a:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800d54e:	b91d      	cbnz	r5, 800d558 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800d550:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800d554:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800d556:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d558:	3301      	adds	r3, #1
 800d55a:	2b08      	cmp	r3, #8
 800d55c:	d1f3      	bne.n	800d546 <vQueueAddToRegistry+0x6>
 800d55e:	e7fa      	b.n	800d556 <vQueueAddToRegistry+0x16>
 800d560:	240243f8 	.word	0x240243f8

0800d564 <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d564:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d566:	4a09      	ldr	r2, [pc, #36]	@ (800d58c <vQueueUnregisterQueue+0x28>)
	{
 800d568:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800d56a:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800d56e:	00dc      	lsls	r4, r3, #3
 800d570:	4281      	cmp	r1, r0
 800d572:	d106      	bne.n	800d582 <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800d574:	4a06      	ldr	r2, [pc, #24]	@ (800d590 <vQueueUnregisterQueue+0x2c>)
 800d576:	2100      	movs	r1, #0
 800d578:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800d57c:	4422      	add	r2, r4
 800d57e:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800d580:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800d582:	3301      	adds	r3, #1
 800d584:	2b08      	cmp	r3, #8
 800d586:	d1f0      	bne.n	800d56a <vQueueUnregisterQueue+0x6>
 800d588:	e7fa      	b.n	800d580 <vQueueUnregisterQueue+0x1c>
 800d58a:	bf00      	nop
 800d58c:	240243fc 	.word	0x240243fc
 800d590:	240243f8 	.word	0x240243f8

0800d594 <vQueueDelete>:
{
 800d594:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800d596:	b940      	cbnz	r0, 800d5aa <vQueueDelete+0x16>
	__asm volatile
 800d598:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d59c:	f383 8811 	msr	BASEPRI, r3
 800d5a0:	f3bf 8f6f 	isb	sy
 800d5a4:	f3bf 8f4f 	dsb	sy
 800d5a8:	e7fe      	b.n	800d5a8 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800d5aa:	f7ff ffdb 	bl	800d564 <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800d5ae:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800d5b2:	b91b      	cbnz	r3, 800d5bc <vQueueDelete+0x28>
}
 800d5b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800d5b8:	f7ff b98c 	b.w	800c8d4 <vPortFree>
}
 800d5bc:	bd10      	pop	{r4, pc}
	...

0800d5c0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d5c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d5c2:	4b15      	ldr	r3, [pc, #84]	@ (800d618 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800d5c4:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5c6:	4d15      	ldr	r5, [pc, #84]	@ (800d61c <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800d5c8:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800d5ca:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d5cc:	6828      	ldr	r0, [r5, #0]
 800d5ce:	3004      	adds	r0, #4
 800d5d0:	f7ff f9eb 	bl	800c9aa <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d5d4:	1c73      	adds	r3, r6, #1
 800d5d6:	d107      	bne.n	800d5e8 <prvAddCurrentTaskToDelayedList+0x28>
 800d5d8:	b137      	cbz	r7, 800d5e8 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5da:	6829      	ldr	r1, [r5, #0]
 800d5dc:	4810      	ldr	r0, [pc, #64]	@ (800d620 <prvAddCurrentTaskToDelayedList+0x60>)
 800d5de:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d5e0:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5e4:	f7ff b9bf 	b.w	800c966 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d5e8:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d5ea:	682b      	ldr	r3, [r5, #0]
 800d5ec:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d5ee:	d307      	bcc.n	800d600 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5f0:	4b0c      	ldr	r3, [pc, #48]	@ (800d624 <prvAddCurrentTaskToDelayedList+0x64>)
 800d5f2:	6818      	ldr	r0, [r3, #0]
 800d5f4:	6829      	ldr	r1, [r5, #0]
}
 800d5f6:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d5fa:	3104      	adds	r1, #4
 800d5fc:	f7ff b9be 	b.w	800c97c <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d600:	4b09      	ldr	r3, [pc, #36]	@ (800d628 <prvAddCurrentTaskToDelayedList+0x68>)
 800d602:	6818      	ldr	r0, [r3, #0]
 800d604:	6829      	ldr	r1, [r5, #0]
 800d606:	3104      	adds	r1, #4
 800d608:	f7ff f9b8 	bl	800c97c <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d60c:	4b07      	ldr	r3, [pc, #28]	@ (800d62c <prvAddCurrentTaskToDelayedList+0x6c>)
 800d60e:	681a      	ldr	r2, [r3, #0]
 800d610:	42a2      	cmp	r2, r4
 800d612:	d900      	bls.n	800d616 <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800d614:	601c      	str	r4, [r3, #0]
}
 800d616:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d618:	24024454 	.word	0x24024454
 800d61c:	240248ec 	.word	0x240248ec
 800d620:	2402445c 	.word	0x2402445c
 800d624:	24024484 	.word	0x24024484
 800d628:	24024488 	.word	0x24024488
 800d62c:	2402443c 	.word	0x2402443c

0800d630 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d630:	4a06      	ldr	r2, [pc, #24]	@ (800d64c <prvResetNextTaskUnblockTime+0x1c>)
 800d632:	6813      	ldr	r3, [r2, #0]
 800d634:	6819      	ldr	r1, [r3, #0]
 800d636:	4b06      	ldr	r3, [pc, #24]	@ (800d650 <prvResetNextTaskUnblockTime+0x20>)
 800d638:	b919      	cbnz	r1, 800d642 <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800d63a:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d63e:	601a      	str	r2, [r3, #0]
}
 800d640:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d642:	6812      	ldr	r2, [r2, #0]
 800d644:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d646:	68d2      	ldr	r2, [r2, #12]
 800d648:	6852      	ldr	r2, [r2, #4]
 800d64a:	e7f8      	b.n	800d63e <prvResetNextTaskUnblockTime+0xe>
 800d64c:	24024488 	.word	0x24024488
 800d650:	2402443c 	.word	0x2402443c

0800d654 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800d654:	4a02      	ldr	r2, [pc, #8]	@ (800d660 <vTaskSuspendAll+0xc>)
 800d656:	6813      	ldr	r3, [r2, #0]
 800d658:	3301      	adds	r3, #1
 800d65a:	6013      	str	r3, [r2, #0]
}
 800d65c:	4770      	bx	lr
 800d65e:	bf00      	nop
 800d660:	24024438 	.word	0x24024438

0800d664 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d664:	4b3f      	ldr	r3, [pc, #252]	@ (800d764 <xTaskIncrementTick+0x100>)
 800d666:	681b      	ldr	r3, [r3, #0]
{
 800d668:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d66c:	2b00      	cmp	r3, #0
 800d66e:	d172      	bne.n	800d756 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800d670:	4b3d      	ldr	r3, [pc, #244]	@ (800d768 <xTaskIncrementTick+0x104>)
 800d672:	681c      	ldr	r4, [r3, #0]
 800d674:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800d676:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800d678:	b9bc      	cbnz	r4, 800d6aa <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800d67a:	4b3c      	ldr	r3, [pc, #240]	@ (800d76c <xTaskIncrementTick+0x108>)
 800d67c:	681a      	ldr	r2, [r3, #0]
 800d67e:	6812      	ldr	r2, [r2, #0]
 800d680:	b142      	cbz	r2, 800d694 <xTaskIncrementTick+0x30>
 800d682:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d686:	f383 8811 	msr	BASEPRI, r3
 800d68a:	f3bf 8f6f 	isb	sy
 800d68e:	f3bf 8f4f 	dsb	sy
 800d692:	e7fe      	b.n	800d692 <xTaskIncrementTick+0x2e>
 800d694:	4a36      	ldr	r2, [pc, #216]	@ (800d770 <xTaskIncrementTick+0x10c>)
 800d696:	6819      	ldr	r1, [r3, #0]
 800d698:	6810      	ldr	r0, [r2, #0]
 800d69a:	6018      	str	r0, [r3, #0]
 800d69c:	6011      	str	r1, [r2, #0]
 800d69e:	4a35      	ldr	r2, [pc, #212]	@ (800d774 <xTaskIncrementTick+0x110>)
 800d6a0:	6813      	ldr	r3, [r2, #0]
 800d6a2:	3301      	adds	r3, #1
 800d6a4:	6013      	str	r3, [r2, #0]
 800d6a6:	f7ff ffc3 	bl	800d630 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6aa:	4d33      	ldr	r5, [pc, #204]	@ (800d778 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800d6ac:	f04f 0b00 	mov.w	fp, #0
 800d6b0:	4e32      	ldr	r6, [pc, #200]	@ (800d77c <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800d6b2:	682b      	ldr	r3, [r5, #0]
 800d6b4:	4f32      	ldr	r7, [pc, #200]	@ (800d780 <xTaskIncrementTick+0x11c>)
 800d6b6:	429c      	cmp	r4, r3
 800d6b8:	d212      	bcs.n	800d6e0 <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800d6ba:	683a      	ldr	r2, [r7, #0]
 800d6bc:	2114      	movs	r1, #20
 800d6be:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800d6c0:	434a      	muls	r2, r1
 800d6c2:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800d6c4:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800d6c6:	4a2f      	ldr	r2, [pc, #188]	@ (800d784 <xTaskIncrementTick+0x120>)
 800d6c8:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800d6ca:	bf28      	it	cs
 800d6cc:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800d6d0:	2a00      	cmp	r2, #0
 800d6d2:	bf18      	it	ne
 800d6d4:	f04f 0b01 	movne.w	fp, #1
}
 800d6d8:	4658      	mov	r0, fp
 800d6da:	b003      	add	sp, #12
 800d6dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6e0:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800d76c <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800d6e4:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800d78c <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d6e8:	f8d9 2000 	ldr.w	r2, [r9]
 800d6ec:	6812      	ldr	r2, [r2, #0]
 800d6ee:	b91a      	cbnz	r2, 800d6f8 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d6f0:	f04f 32ff 	mov.w	r2, #4294967295
 800d6f4:	602a      	str	r2, [r5, #0]
					break;
 800d6f6:	e7e0      	b.n	800d6ba <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d6f8:	f8d9 2000 	ldr.w	r2, [r9]
 800d6fc:	68d2      	ldr	r2, [r2, #12]
 800d6fe:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800d702:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800d706:	428c      	cmp	r4, r1
 800d708:	d201      	bcs.n	800d70e <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800d70a:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800d70c:	e7d5      	b.n	800d6ba <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d70e:	f108 0304 	add.w	r3, r8, #4
 800d712:	4618      	mov	r0, r3
 800d714:	9301      	str	r3, [sp, #4]
 800d716:	f7ff f948 	bl	800c9aa <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800d71a:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800d71e:	b119      	cbz	r1, 800d728 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d720:	f108 0018 	add.w	r0, r8, #24
 800d724:	f7ff f941 	bl	800c9aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d728:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800d72c:	f8da 1000 	ldr.w	r1, [sl]
 800d730:	4288      	cmp	r0, r1
 800d732:	d901      	bls.n	800d738 <xTaskIncrementTick+0xd4>
 800d734:	f8ca 0000 	str.w	r0, [sl]
 800d738:	2314      	movs	r3, #20
 800d73a:	9901      	ldr	r1, [sp, #4]
 800d73c:	fb03 6000 	mla	r0, r3, r0, r6
 800d740:	f7ff f911 	bl	800c966 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d744:	6838      	ldr	r0, [r7, #0]
 800d746:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800d74a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800d74c:	4291      	cmp	r1, r2
 800d74e:	bf28      	it	cs
 800d750:	f04f 0b01 	movcs.w	fp, #1
 800d754:	e7c8      	b.n	800d6e8 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800d756:	4a0c      	ldr	r2, [pc, #48]	@ (800d788 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800d758:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800d75c:	6813      	ldr	r3, [r2, #0]
 800d75e:	3301      	adds	r3, #1
 800d760:	6013      	str	r3, [r2, #0]
 800d762:	e7b9      	b.n	800d6d8 <xTaskIncrementTick+0x74>
 800d764:	24024438 	.word	0x24024438
 800d768:	24024454 	.word	0x24024454
 800d76c:	24024488 	.word	0x24024488
 800d770:	24024484 	.word	0x24024484
 800d774:	24024440 	.word	0x24024440
 800d778:	2402443c 	.word	0x2402443c
 800d77c:	2402448c 	.word	0x2402448c
 800d780:	240248ec 	.word	0x240248ec
 800d784:	24024444 	.word	0x24024444
 800d788:	24024448 	.word	0x24024448
 800d78c:	24024450 	.word	0x24024450

0800d790 <xTaskResumeAll>:
{
 800d790:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800d794:	4c30      	ldr	r4, [pc, #192]	@ (800d858 <xTaskResumeAll+0xc8>)
 800d796:	6823      	ldr	r3, [r4, #0]
 800d798:	b943      	cbnz	r3, 800d7ac <xTaskResumeAll+0x1c>
 800d79a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d79e:	f383 8811 	msr	BASEPRI, r3
 800d7a2:	f3bf 8f6f 	isb	sy
 800d7a6:	f3bf 8f4f 	dsb	sy
 800d7aa:	e7fe      	b.n	800d7aa <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800d7ac:	f7ff f922 	bl	800c9f4 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800d7b0:	6823      	ldr	r3, [r4, #0]
 800d7b2:	3b01      	subs	r3, #1
 800d7b4:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d7b6:	6824      	ldr	r4, [r4, #0]
 800d7b8:	b12c      	cbz	r4, 800d7c6 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800d7ba:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800d7bc:	f7ff f93a 	bl	800ca34 <vPortExitCritical>
}
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800d7c6:	4b25      	ldr	r3, [pc, #148]	@ (800d85c <xTaskResumeAll+0xcc>)
 800d7c8:	681b      	ldr	r3, [r3, #0]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d0f5      	beq.n	800d7ba <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d7ce:	4d24      	ldr	r5, [pc, #144]	@ (800d860 <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800d7d0:	4e24      	ldr	r6, [pc, #144]	@ (800d864 <xTaskResumeAll+0xd4>)
 800d7d2:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800d874 <xTaskResumeAll+0xe4>
 800d7d6:	e01d      	b.n	800d814 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d7d8:	68eb      	ldr	r3, [r5, #12]
 800d7da:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7dc:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800d7de:	f104 0018 	add.w	r0, r4, #24
 800d7e2:	f7ff f8e2 	bl	800c9aa <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d7e6:	4638      	mov	r0, r7
 800d7e8:	f7ff f8df 	bl	800c9aa <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800d7ec:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d7ee:	6832      	ldr	r2, [r6, #0]
 800d7f0:	4293      	cmp	r3, r2
 800d7f2:	d900      	bls.n	800d7f6 <xTaskResumeAll+0x66>
 800d7f4:	6033      	str	r3, [r6, #0]
 800d7f6:	2014      	movs	r0, #20
 800d7f8:	4639      	mov	r1, r7
 800d7fa:	fb00 8003 	mla	r0, r0, r3, r8
 800d7fe:	f7ff f8b2 	bl	800c966 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800d802:	4b19      	ldr	r3, [pc, #100]	@ (800d868 <xTaskResumeAll+0xd8>)
 800d804:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d806:	681b      	ldr	r3, [r3, #0]
 800d808:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d80a:	429a      	cmp	r2, r3
 800d80c:	d302      	bcc.n	800d814 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800d80e:	4b17      	ldr	r3, [pc, #92]	@ (800d86c <xTaskResumeAll+0xdc>)
 800d810:	2201      	movs	r2, #1
 800d812:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800d814:	682b      	ldr	r3, [r5, #0]
 800d816:	2b00      	cmp	r3, #0
 800d818:	d1de      	bne.n	800d7d8 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800d81a:	b10c      	cbz	r4, 800d820 <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800d81c:	f7ff ff08 	bl	800d630 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800d820:	4d13      	ldr	r5, [pc, #76]	@ (800d870 <xTaskResumeAll+0xe0>)
 800d822:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800d824:	b144      	cbz	r4, 800d838 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800d826:	4e11      	ldr	r6, [pc, #68]	@ (800d86c <xTaskResumeAll+0xdc>)
 800d828:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800d82a:	f7ff ff1b 	bl	800d664 <xTaskIncrementTick>
 800d82e:	b100      	cbz	r0, 800d832 <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800d830:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800d832:	3c01      	subs	r4, #1
 800d834:	d1f9      	bne.n	800d82a <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800d836:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800d838:	4b0c      	ldr	r3, [pc, #48]	@ (800d86c <xTaskResumeAll+0xdc>)
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	2b00      	cmp	r3, #0
 800d83e:	d0bc      	beq.n	800d7ba <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800d840:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d844:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d848:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d84c:	f3bf 8f4f 	dsb	sy
 800d850:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800d854:	2401      	movs	r4, #1
 800d856:	e7b1      	b.n	800d7bc <xTaskResumeAll+0x2c>
 800d858:	24024438 	.word	0x24024438
 800d85c:	24024458 	.word	0x24024458
 800d860:	24024470 	.word	0x24024470
 800d864:	24024450 	.word	0x24024450
 800d868:	240248ec 	.word	0x240248ec
 800d86c:	24024444 	.word	0x24024444
 800d870:	24024448 	.word	0x24024448
 800d874:	2402448c 	.word	0x2402448c

0800d878 <xTaskCallApplicationTaskHook>:
	{
 800d878:	4603      	mov	r3, r0
 800d87a:	4608      	mov	r0, r1
		if( xTask == NULL )
 800d87c:	b90b      	cbnz	r3, 800d882 <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800d87e:	4b03      	ldr	r3, [pc, #12]	@ (800d88c <xTaskCallApplicationTaskHook+0x14>)
 800d880:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800d882:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d884:	b103      	cbz	r3, 800d888 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800d886:	4718      	bx	r3
	}
 800d888:	4618      	mov	r0, r3
 800d88a:	4770      	bx	lr
 800d88c:	240248ec 	.word	0x240248ec

0800d890 <vTaskSwitchContext>:
{
 800d890:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800d892:	4b1d      	ldr	r3, [pc, #116]	@ (800d908 <vTaskSwitchContext+0x78>)
 800d894:	681a      	ldr	r2, [r3, #0]
 800d896:	4b1d      	ldr	r3, [pc, #116]	@ (800d90c <vTaskSwitchContext+0x7c>)
 800d898:	b112      	cbz	r2, 800d8a0 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800d89a:	2201      	movs	r2, #1
 800d89c:	601a      	str	r2, [r3, #0]
}
 800d89e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800d8a0:	4c1b      	ldr	r4, [pc, #108]	@ (800d910 <vTaskSwitchContext+0x80>)
 800d8a2:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8a4:	4e1b      	ldr	r6, [pc, #108]	@ (800d914 <vTaskSwitchContext+0x84>)
 800d8a6:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800d8a8:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800d8aa:	6820      	ldr	r0, [r4, #0]
 800d8ac:	f7ff ffe4 	bl	800d878 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8b0:	6832      	ldr	r2, [r6, #0]
 800d8b2:	4919      	ldr	r1, [pc, #100]	@ (800d918 <vTaskSwitchContext+0x88>)
 800d8b4:	fb07 f302 	mul.w	r3, r7, r2
 800d8b8:	58cd      	ldr	r5, [r1, r3]
 800d8ba:	18c8      	adds	r0, r1, r3
 800d8bc:	b1c5      	cbz	r5, 800d8f0 <vTaskSwitchContext+0x60>
 800d8be:	6845      	ldr	r5, [r0, #4]
 800d8c0:	3308      	adds	r3, #8
 800d8c2:	686d      	ldr	r5, [r5, #4]
 800d8c4:	440b      	add	r3, r1
 800d8c6:	429d      	cmp	r5, r3
 800d8c8:	6045      	str	r5, [r0, #4]
 800d8ca:	bf04      	itt	eq
 800d8cc:	686b      	ldreq	r3, [r5, #4]
 800d8ce:	6043      	streq	r3, [r0, #4]
 800d8d0:	2314      	movs	r3, #20
 800d8d2:	fb03 1102 	mla	r1, r3, r2, r1
 800d8d6:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800d8d8:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8da:	68db      	ldr	r3, [r3, #12]
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800d8e0:	6820      	ldr	r0, [r4, #0]
 800d8e2:	f7ff ffc9 	bl	800d878 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800d8e6:	6823      	ldr	r3, [r4, #0]
 800d8e8:	4a0c      	ldr	r2, [pc, #48]	@ (800d91c <vTaskSwitchContext+0x8c>)
 800d8ea:	3358      	adds	r3, #88	@ 0x58
 800d8ec:	6013      	str	r3, [r2, #0]
}
 800d8ee:	e7d6      	b.n	800d89e <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d8f0:	b942      	cbnz	r2, 800d904 <vTaskSwitchContext+0x74>
 800d8f2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f6:	f383 8811 	msr	BASEPRI, r3
 800d8fa:	f3bf 8f6f 	isb	sy
 800d8fe:	f3bf 8f4f 	dsb	sy
 800d902:	e7fe      	b.n	800d902 <vTaskSwitchContext+0x72>
 800d904:	3a01      	subs	r2, #1
 800d906:	e7d5      	b.n	800d8b4 <vTaskSwitchContext+0x24>
 800d908:	24024438 	.word	0x24024438
 800d90c:	24024444 	.word	0x24024444
 800d910:	240248ec 	.word	0x240248ec
 800d914:	24024450 	.word	0x24024450
 800d918:	2402448c 	.word	0x2402448c
 800d91c:	240000e8 	.word	0x240000e8

0800d920 <vTaskPlaceOnEventList>:
{
 800d920:	b510      	push	{r4, lr}
 800d922:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800d924:	b940      	cbnz	r0, 800d938 <vTaskPlaceOnEventList+0x18>
 800d926:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d92a:	f383 8811 	msr	BASEPRI, r3
 800d92e:	f3bf 8f6f 	isb	sy
 800d932:	f3bf 8f4f 	dsb	sy
 800d936:	e7fe      	b.n	800d936 <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800d938:	4b05      	ldr	r3, [pc, #20]	@ (800d950 <vTaskPlaceOnEventList+0x30>)
 800d93a:	6819      	ldr	r1, [r3, #0]
 800d93c:	3118      	adds	r1, #24
 800d93e:	f7ff f81d 	bl	800c97c <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d942:	4620      	mov	r0, r4
 800d944:	2101      	movs	r1, #1
}
 800d946:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800d94a:	f7ff be39 	b.w	800d5c0 <prvAddCurrentTaskToDelayedList>
 800d94e:	bf00      	nop
 800d950:	240248ec 	.word	0x240248ec

0800d954 <xTaskRemoveFromEventList>:
{
 800d954:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d956:	68c3      	ldr	r3, [r0, #12]
 800d958:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800d95a:	b944      	cbnz	r4, 800d96e <xTaskRemoveFromEventList+0x1a>
 800d95c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d960:	f383 8811 	msr	BASEPRI, r3
 800d964:	f3bf 8f6f 	isb	sy
 800d968:	f3bf 8f4f 	dsb	sy
 800d96c:	e7fe      	b.n	800d96c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800d96e:	f104 0518 	add.w	r5, r4, #24
 800d972:	4628      	mov	r0, r5
 800d974:	f7ff f819 	bl	800c9aa <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d978:	4b11      	ldr	r3, [pc, #68]	@ (800d9c0 <xTaskRemoveFromEventList+0x6c>)
 800d97a:	681b      	ldr	r3, [r3, #0]
 800d97c:	b9d3      	cbnz	r3, 800d9b4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800d97e:	1d25      	adds	r5, r4, #4
 800d980:	4628      	mov	r0, r5
 800d982:	f7ff f812 	bl	800c9aa <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800d986:	4a0f      	ldr	r2, [pc, #60]	@ (800d9c4 <xTaskRemoveFromEventList+0x70>)
 800d988:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800d98a:	6811      	ldr	r1, [r2, #0]
 800d98c:	428b      	cmp	r3, r1
 800d98e:	d900      	bls.n	800d992 <xTaskRemoveFromEventList+0x3e>
 800d990:	6013      	str	r3, [r2, #0]
 800d992:	2014      	movs	r0, #20
 800d994:	4a0c      	ldr	r2, [pc, #48]	@ (800d9c8 <xTaskRemoveFromEventList+0x74>)
 800d996:	4629      	mov	r1, r5
 800d998:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d99c:	f7fe ffe3 	bl	800c966 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800d9a0:	4b0a      	ldr	r3, [pc, #40]	@ (800d9cc <xTaskRemoveFromEventList+0x78>)
 800d9a2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800d9a4:	681b      	ldr	r3, [r3, #0]
 800d9a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d9a8:	429a      	cmp	r2, r3
 800d9aa:	d906      	bls.n	800d9ba <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800d9ac:	2001      	movs	r0, #1
 800d9ae:	4b08      	ldr	r3, [pc, #32]	@ (800d9d0 <xTaskRemoveFromEventList+0x7c>)
 800d9b0:	6018      	str	r0, [r3, #0]
}
 800d9b2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800d9b4:	4629      	mov	r1, r5
 800d9b6:	4807      	ldr	r0, [pc, #28]	@ (800d9d4 <xTaskRemoveFromEventList+0x80>)
 800d9b8:	e7f0      	b.n	800d99c <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800d9ba:	2000      	movs	r0, #0
	return xReturn;
 800d9bc:	e7f9      	b.n	800d9b2 <xTaskRemoveFromEventList+0x5e>
 800d9be:	bf00      	nop
 800d9c0:	24024438 	.word	0x24024438
 800d9c4:	24024450 	.word	0x24024450
 800d9c8:	2402448c 	.word	0x2402448c
 800d9cc:	240248ec 	.word	0x240248ec
 800d9d0:	24024444 	.word	0x24024444
 800d9d4:	24024470 	.word	0x24024470

0800d9d8 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800d9d8:	4b03      	ldr	r3, [pc, #12]	@ (800d9e8 <vTaskInternalSetTimeOutState+0x10>)
 800d9da:	681b      	ldr	r3, [r3, #0]
 800d9dc:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800d9de:	4b03      	ldr	r3, [pc, #12]	@ (800d9ec <vTaskInternalSetTimeOutState+0x14>)
 800d9e0:	681b      	ldr	r3, [r3, #0]
 800d9e2:	6043      	str	r3, [r0, #4]
}
 800d9e4:	4770      	bx	lr
 800d9e6:	bf00      	nop
 800d9e8:	24024440 	.word	0x24024440
 800d9ec:	24024454 	.word	0x24024454

0800d9f0 <xTaskCheckForTimeOut>:
{
 800d9f0:	b570      	push	{r4, r5, r6, lr}
 800d9f2:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800d9f4:	4605      	mov	r5, r0
 800d9f6:	b940      	cbnz	r0, 800da0a <xTaskCheckForTimeOut+0x1a>
 800d9f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9fc:	f383 8811 	msr	BASEPRI, r3
 800da00:	f3bf 8f6f 	isb	sy
 800da04:	f3bf 8f4f 	dsb	sy
 800da08:	e7fe      	b.n	800da08 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800da0a:	b941      	cbnz	r1, 800da1e <xTaskCheckForTimeOut+0x2e>
 800da0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da10:	f383 8811 	msr	BASEPRI, r3
 800da14:	f3bf 8f6f 	isb	sy
 800da18:	f3bf 8f4f 	dsb	sy
 800da1c:	e7fe      	b.n	800da1c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800da1e:	f7fe ffe9 	bl	800c9f4 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800da22:	4b0f      	ldr	r3, [pc, #60]	@ (800da60 <xTaskCheckForTimeOut+0x70>)
 800da24:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800da26:	6823      	ldr	r3, [r4, #0]
 800da28:	1c5a      	adds	r2, r3, #1
 800da2a:	d010      	beq.n	800da4e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da2c:	480d      	ldr	r0, [pc, #52]	@ (800da64 <xTaskCheckForTimeOut+0x74>)
 800da2e:	682e      	ldr	r6, [r5, #0]
 800da30:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da32:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800da34:	4286      	cmp	r6, r0
 800da36:	d001      	beq.n	800da3c <xTaskCheckForTimeOut+0x4c>
 800da38:	428a      	cmp	r2, r1
 800da3a:	d90f      	bls.n	800da5c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800da3c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800da3e:	4283      	cmp	r3, r0
 800da40:	d90a      	bls.n	800da58 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800da42:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da44:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800da46:	4413      	add	r3, r2
 800da48:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800da4a:	f7ff ffc5 	bl	800d9d8 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800da4e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800da50:	f7fe fff0 	bl	800ca34 <vPortExitCritical>
}
 800da54:	4620      	mov	r0, r4
 800da56:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800da58:	2300      	movs	r3, #0
 800da5a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800da5c:	2401      	movs	r4, #1
 800da5e:	e7f7      	b.n	800da50 <xTaskCheckForTimeOut+0x60>
 800da60:	24024454 	.word	0x24024454
 800da64:	24024440 	.word	0x24024440

0800da68 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800da68:	4b01      	ldr	r3, [pc, #4]	@ (800da70 <vTaskMissedYield+0x8>)
 800da6a:	2201      	movs	r2, #1
 800da6c:	601a      	str	r2, [r3, #0]
}
 800da6e:	4770      	bx	lr
 800da70:	24024444 	.word	0x24024444

0800da74 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800da74:	4b01      	ldr	r3, [pc, #4]	@ (800da7c <xTaskGetCurrentTaskHandle+0x8>)
 800da76:	6818      	ldr	r0, [r3, #0]
	}
 800da78:	4770      	bx	lr
 800da7a:	bf00      	nop
 800da7c:	240248ec 	.word	0x240248ec

0800da80 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800da80:	4b05      	ldr	r3, [pc, #20]	@ (800da98 <xTaskGetSchedulerState+0x18>)
 800da82:	681b      	ldr	r3, [r3, #0]
 800da84:	b133      	cbz	r3, 800da94 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800da86:	4b05      	ldr	r3, [pc, #20]	@ (800da9c <xTaskGetSchedulerState+0x1c>)
 800da88:	6818      	ldr	r0, [r3, #0]
 800da8a:	fab0 f080 	clz	r0, r0
 800da8e:	0940      	lsrs	r0, r0, #5
 800da90:	0040      	lsls	r0, r0, #1
 800da92:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800da94:	2001      	movs	r0, #1
	}
 800da96:	4770      	bx	lr
 800da98:	2402444c 	.word	0x2402444c
 800da9c:	24024438 	.word	0x24024438

0800daa0 <xTaskPriorityInherit>:
	{
 800daa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800daa2:	4604      	mov	r4, r0
 800daa4:	b338      	cbz	r0, 800daf6 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800daa6:	4d1a      	ldr	r5, [pc, #104]	@ (800db10 <xTaskPriorityInherit+0x70>)
 800daa8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800daaa:	682a      	ldr	r2, [r5, #0]
 800daac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800daae:	4293      	cmp	r3, r2
 800dab0:	d226      	bcs.n	800db00 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dab2:	6982      	ldr	r2, [r0, #24]
 800dab4:	2a00      	cmp	r2, #0
 800dab6:	db04      	blt.n	800dac2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dab8:	682a      	ldr	r2, [r5, #0]
 800daba:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dabc:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800dac0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800dac2:	2214      	movs	r2, #20
 800dac4:	4e13      	ldr	r6, [pc, #76]	@ (800db14 <xTaskPriorityInherit+0x74>)
 800dac6:	fb02 6303 	mla	r3, r2, r3, r6
 800daca:	6962      	ldr	r2, [r4, #20]
 800dacc:	429a      	cmp	r2, r3
 800dace:	d113      	bne.n	800daf8 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dad0:	1d27      	adds	r7, r4, #4
 800dad2:	4638      	mov	r0, r7
 800dad4:	f7fe ff69 	bl	800c9aa <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dad8:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dada:	4a0f      	ldr	r2, [pc, #60]	@ (800db18 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dadc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dade:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800dae0:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800dae2:	428b      	cmp	r3, r1
 800dae4:	d900      	bls.n	800dae8 <xTaskPriorityInherit+0x48>
 800dae6:	6013      	str	r3, [r2, #0]
 800dae8:	2014      	movs	r0, #20
 800daea:	4639      	mov	r1, r7
 800daec:	fb00 6003 	mla	r0, r0, r3, r6
 800daf0:	f7fe ff39 	bl	800c966 <vListInsertEnd>
				xReturn = pdTRUE;
 800daf4:	2001      	movs	r0, #1
	}
 800daf6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800daf8:	682b      	ldr	r3, [r5, #0]
 800dafa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dafc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800dafe:	e7f9      	b.n	800daf4 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800db00:	682b      	ldr	r3, [r5, #0]
 800db02:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800db04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db06:	4298      	cmp	r0, r3
 800db08:	bf2c      	ite	cs
 800db0a:	2000      	movcs	r0, #0
 800db0c:	2001      	movcc	r0, #1
 800db0e:	e7f2      	b.n	800daf6 <xTaskPriorityInherit+0x56>
 800db10:	240248ec 	.word	0x240248ec
 800db14:	2402448c 	.word	0x2402448c
 800db18:	24024450 	.word	0x24024450

0800db1c <xTaskPriorityDisinherit>:
	{
 800db1c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800db1e:	b908      	cbnz	r0, 800db24 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800db20:	2000      	movs	r0, #0
	}
 800db22:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800db24:	4b1b      	ldr	r3, [pc, #108]	@ (800db94 <xTaskPriorityDisinherit+0x78>)
 800db26:	681c      	ldr	r4, [r3, #0]
 800db28:	4284      	cmp	r4, r0
 800db2a:	d008      	beq.n	800db3e <xTaskPriorityDisinherit+0x22>
 800db2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db30:	f383 8811 	msr	BASEPRI, r3
 800db34:	f3bf 8f6f 	isb	sy
 800db38:	f3bf 8f4f 	dsb	sy
 800db3c:	e7fe      	b.n	800db3c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800db3e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800db40:	b943      	cbnz	r3, 800db54 <xTaskPriorityDisinherit+0x38>
 800db42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db46:	f383 8811 	msr	BASEPRI, r3
 800db4a:	f3bf 8f6f 	isb	sy
 800db4e:	f3bf 8f4f 	dsb	sy
 800db52:	e7fe      	b.n	800db52 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db54:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800db56:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db58:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800db5a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800db5c:	4291      	cmp	r1, r2
 800db5e:	d0df      	beq.n	800db20 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800db60:	2b00      	cmp	r3, #0
 800db62:	d1dd      	bne.n	800db20 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800db64:	1d25      	adds	r5, r4, #4
 800db66:	4628      	mov	r0, r5
 800db68:	f7fe ff1f 	bl	800c9aa <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db6c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db6e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800db72:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800db74:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800db76:	4a08      	ldr	r2, [pc, #32]	@ (800db98 <xTaskPriorityDisinherit+0x7c>)
 800db78:	6811      	ldr	r1, [r2, #0]
 800db7a:	428b      	cmp	r3, r1
 800db7c:	d900      	bls.n	800db80 <xTaskPriorityDisinherit+0x64>
 800db7e:	6013      	str	r3, [r2, #0]
 800db80:	4a06      	ldr	r2, [pc, #24]	@ (800db9c <xTaskPriorityDisinherit+0x80>)
 800db82:	2014      	movs	r0, #20
 800db84:	4629      	mov	r1, r5
 800db86:	fb00 2003 	mla	r0, r0, r3, r2
 800db8a:	f7fe feec 	bl	800c966 <vListInsertEnd>
					xReturn = pdTRUE;
 800db8e:	2001      	movs	r0, #1
		return xReturn;
 800db90:	e7c7      	b.n	800db22 <xTaskPriorityDisinherit+0x6>
 800db92:	bf00      	nop
 800db94:	240248ec 	.word	0x240248ec
 800db98:	24024450 	.word	0x24024450
 800db9c:	2402448c 	.word	0x2402448c

0800dba0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800dba0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800dba2:	4604      	mov	r4, r0
 800dba4:	2800      	cmp	r0, #0
 800dba6:	d042      	beq.n	800dc2e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800dba8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800dbaa:	b942      	cbnz	r2, 800dbbe <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800dbac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbb0:	f383 8811 	msr	BASEPRI, r3
 800dbb4:	f3bf 8f6f 	isb	sy
 800dbb8:	f3bf 8f4f 	dsb	sy
 800dbbc:	e7fe      	b.n	800dbbc <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800dbbe:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800dbc0:	4299      	cmp	r1, r3
 800dbc2:	bf38      	it	cc
 800dbc4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800dbc6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800dbc8:	428b      	cmp	r3, r1
 800dbca:	d030      	beq.n	800dc2e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800dbcc:	2a01      	cmp	r2, #1
 800dbce:	d12e      	bne.n	800dc2e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800dbd0:	4a17      	ldr	r2, [pc, #92]	@ (800dc30 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800dbd2:	6812      	ldr	r2, [r2, #0]
 800dbd4:	4282      	cmp	r2, r0
 800dbd6:	d108      	bne.n	800dbea <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800dbd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dbdc:	f383 8811 	msr	BASEPRI, r3
 800dbe0:	f3bf 8f6f 	isb	sy
 800dbe4:	f3bf 8f4f 	dsb	sy
 800dbe8:	e7fe      	b.n	800dbe8 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbea:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbec:	4d11      	ldr	r5, [pc, #68]	@ (800dc34 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800dbee:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbf0:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800dbf4:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dbf6:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dbfa:	bfa8      	it	ge
 800dbfc:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc00:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800dc02:	bfa8      	it	ge
 800dc04:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800dc06:	429a      	cmp	r2, r3
 800dc08:	d111      	bne.n	800dc2e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800dc0a:	1d06      	adds	r6, r0, #4
 800dc0c:	4630      	mov	r0, r6
 800dc0e:	f7fe fecc 	bl	800c9aa <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800dc12:	4a09      	ldr	r2, [pc, #36]	@ (800dc38 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800dc14:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dc16:	6811      	ldr	r1, [r2, #0]
 800dc18:	428b      	cmp	r3, r1
 800dc1a:	d900      	bls.n	800dc1e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800dc1c:	6013      	str	r3, [r2, #0]
 800dc1e:	2014      	movs	r0, #20
 800dc20:	4631      	mov	r1, r6
 800dc22:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800dc26:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800dc2a:	f7fe be9c 	b.w	800c966 <vListInsertEnd>
	}
 800dc2e:	bd70      	pop	{r4, r5, r6, pc}
 800dc30:	240248ec 	.word	0x240248ec
 800dc34:	2402448c 	.word	0x2402448c
 800dc38:	24024450 	.word	0x24024450

0800dc3c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800dc3c:	4b04      	ldr	r3, [pc, #16]	@ (800dc50 <pvTaskIncrementMutexHeldCount+0x14>)
 800dc3e:	681a      	ldr	r2, [r3, #0]
 800dc40:	b11a      	cbz	r2, 800dc4a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800dc42:	6819      	ldr	r1, [r3, #0]
 800dc44:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800dc46:	3201      	adds	r2, #1
 800dc48:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800dc4a:	6818      	ldr	r0, [r3, #0]
	}
 800dc4c:	4770      	bx	lr
 800dc4e:	bf00      	nop
 800dc50:	240248ec 	.word	0x240248ec

0800dc54 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800dc54:	8880      	ldrh	r0, [r0, #4]
 800dc56:	4770      	bx	lr

0800dc58 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800dc58:	b570      	push	{r4, r5, r6, lr}
 800dc5a:	6803      	ldr	r3, [r0, #0]
 800dc5c:	460c      	mov	r4, r1
 800dc5e:	2100      	movs	r1, #0
 800dc60:	4605      	mov	r5, r0
 800dc62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc64:	4798      	blx	r3
 800dc66:	4606      	mov	r6, r0
 800dc68:	682b      	ldr	r3, [r5, #0]
 800dc6a:	4628      	mov	r0, r5
 800dc6c:	1ba4      	subs	r4, r4, r6
 800dc6e:	6a1b      	ldr	r3, [r3, #32]
 800dc70:	b2a4      	uxth	r4, r4
 800dc72:	4798      	blx	r3
 800dc74:	fbb4 f0f0 	udiv	r0, r4, r0
 800dc78:	bd70      	pop	{r4, r5, r6, pc}

0800dc7a <_ZN8touchgfx17AbstractPartition5clearEv>:
 800dc7a:	2300      	movs	r3, #0
 800dc7c:	8083      	strh	r3, [r0, #4]
 800dc7e:	4770      	bx	lr

0800dc80 <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800dc80:	b510      	push	{r4, lr}
 800dc82:	6803      	ldr	r3, [r0, #0]
 800dc84:	4604      	mov	r4, r0
 800dc86:	8881      	ldrh	r1, [r0, #4]
 800dc88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc8a:	4798      	blx	r3
 800dc8c:	88a3      	ldrh	r3, [r4, #4]
 800dc8e:	3301      	adds	r3, #1
 800dc90:	80a3      	strh	r3, [r4, #4]
 800dc92:	bd10      	pop	{r4, pc}

0800dc94 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800dc94:	6803      	ldr	r3, [r0, #0]
 800dc96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dc98:	4718      	bx	r3

0800dc9a <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800dc9a:	4770      	bx	lr

0800dc9c <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800dc9c:	4a02      	ldr	r2, [pc, #8]	@ (800dca8 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800dc9e:	6002      	str	r2, [r0, #0]
 800dca0:	2200      	movs	r2, #0
 800dca2:	8082      	strh	r2, [r0, #4]
 800dca4:	4770      	bx	lr
 800dca6:	bf00      	nop
 800dca8:	080243bc 	.word	0x080243bc

0800dcac <_ZN8touchgfx9Container13getFirstChildEv>:
 800dcac:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 800dcae:	4770      	bx	lr

0800dcb0 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800dcb0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800dcb2:	2000      	movs	r0, #0
 800dcb4:	b12b      	cbz	r3, 800dcc2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dcb6:	b920      	cbnz	r0, 800dcc2 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800dcb8:	1a5a      	subs	r2, r3, r1
 800dcba:	699b      	ldr	r3, [r3, #24]
 800dcbc:	4250      	negs	r0, r2
 800dcbe:	4150      	adcs	r0, r2
 800dcc0:	e7f8      	b.n	800dcb4 <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800dcc2:	4770      	bx	lr

0800dcc4 <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800dcc4:	2300      	movs	r3, #0
 800dcc6:	6148      	str	r0, [r1, #20]
 800dcc8:	618b      	str	r3, [r1, #24]
 800dcca:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800dccc:	b913      	cbnz	r3, 800dcd4 <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800dcce:	6281      	str	r1, [r0, #40]	@ 0x28
 800dcd0:	4770      	bx	lr
 800dcd2:	4613      	mov	r3, r2
 800dcd4:	699a      	ldr	r2, [r3, #24]
 800dcd6:	2a00      	cmp	r2, #0
 800dcd8:	d1fb      	bne.n	800dcd2 <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800dcda:	6199      	str	r1, [r3, #24]
 800dcdc:	4770      	bx	lr

0800dcde <_ZN8touchgfx9Container9removeAllEv>:
 800dcde:	2200      	movs	r2, #0
 800dce0:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800dce2:	b123      	cbz	r3, 800dcee <_ZN8touchgfx9Container9removeAllEv+0x10>
 800dce4:	6999      	ldr	r1, [r3, #24]
 800dce6:	6281      	str	r1, [r0, #40]	@ 0x28
 800dce8:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800dcec:	e7f8      	b.n	800dce0 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800dcee:	4770      	bx	lr

0800dcf0 <_ZN8touchgfx9Container6unlinkEv>:
 800dcf0:	2300      	movs	r3, #0
 800dcf2:	6283      	str	r3, [r0, #40]	@ 0x28
 800dcf4:	4770      	bx	lr

0800dcf6 <_ZNK8touchgfx9Container12getSolidRectEv>:
 800dcf6:	2200      	movs	r2, #0
 800dcf8:	8002      	strh	r2, [r0, #0]
 800dcfa:	8042      	strh	r2, [r0, #2]
 800dcfc:	8082      	strh	r2, [r0, #4]
 800dcfe:	80c2      	strh	r2, [r0, #6]
 800dd00:	4770      	bx	lr

0800dd02 <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800dd02:	b570      	push	{r4, r5, r6, lr}
 800dd04:	460d      	mov	r5, r1
 800dd06:	4616      	mov	r6, r2
 800dd08:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dd0a:	b13c      	cbz	r4, 800dd1c <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800dd0c:	6823      	ldr	r3, [r4, #0]
 800dd0e:	4620      	mov	r0, r4
 800dd10:	4632      	mov	r2, r6
 800dd12:	4629      	mov	r1, r5
 800dd14:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd16:	4798      	blx	r3
 800dd18:	69a4      	ldr	r4, [r4, #24]
 800dd1a:	e7f6      	b.n	800dd0a <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800dd1c:	bd70      	pop	{r4, r5, r6, pc}

0800dd1e <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800dd1e:	b538      	push	{r3, r4, r5, lr}
 800dd20:	460d      	mov	r5, r1
 800dd22:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800dd24:	b134      	cbz	r4, 800dd34 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800dd26:	682b      	ldr	r3, [r5, #0]
 800dd28:	4621      	mov	r1, r4
 800dd2a:	4628      	mov	r0, r5
 800dd2c:	689b      	ldr	r3, [r3, #8]
 800dd2e:	4798      	blx	r3
 800dd30:	69a4      	ldr	r4, [r4, #24]
 800dd32:	e7f7      	b.n	800dd24 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800dd34:	bd38      	pop	{r3, r4, r5, pc}

0800dd36 <_ZN8touchgfx9ContainerD1Ev>:
 800dd36:	4770      	bx	lr

0800dd38 <_ZN8touchgfx9ContainerD0Ev>:
 800dd38:	b510      	push	{r4, lr}
 800dd3a:	4604      	mov	r4, r0
 800dd3c:	212c      	movs	r1, #44	@ 0x2c
 800dd3e:	f012 f9de 	bl	80200fe <_ZdlPvj>
 800dd42:	4620      	mov	r0, r4
 800dd44:	bd10      	pop	{r4, pc}

0800dd46 <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800dd46:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800dd48:	b19b      	cbz	r3, 800dd72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800dd4a:	428b      	cmp	r3, r1
 800dd4c:	d109      	bne.n	800dd62 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800dd4e:	699a      	ldr	r2, [r3, #24]
 800dd50:	2100      	movs	r1, #0
 800dd52:	6159      	str	r1, [r3, #20]
 800dd54:	6282      	str	r2, [r0, #40]	@ 0x28
 800dd56:	b902      	cbnz	r2, 800dd5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800dd58:	4770      	bx	lr
 800dd5a:	6199      	str	r1, [r3, #24]
 800dd5c:	4770      	bx	lr
 800dd5e:	4613      	mov	r3, r2
 800dd60:	b13a      	cbz	r2, 800dd72 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800dd62:	699a      	ldr	r2, [r3, #24]
 800dd64:	428a      	cmp	r2, r1
 800dd66:	d1fa      	bne.n	800dd5e <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800dd68:	698a      	ldr	r2, [r1, #24]
 800dd6a:	619a      	str	r2, [r3, #24]
 800dd6c:	2300      	movs	r3, #0
 800dd6e:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800dd72:	4770      	bx	lr

0800dd74 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800dd74:	b410      	push	{r4}
 800dd76:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800dd78:	4604      	mov	r4, r0
 800dd7a:	b92b      	cbnz	r3, 800dd88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800dd7c:	6803      	ldr	r3, [r0, #0]
 800dd7e:	4611      	mov	r1, r2
 800dd80:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd84:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800dd86:	4718      	bx	r3
 800dd88:	b941      	cbnz	r1, 800dd9c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800dd8a:	6193      	str	r3, [r2, #24]
 800dd8c:	6282      	str	r2, [r0, #40]	@ 0x28
 800dd8e:	6154      	str	r4, [r2, #20]
 800dd90:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd94:	4770      	bx	lr
 800dd96:	4603      	mov	r3, r0
 800dd98:	2800      	cmp	r0, #0
 800dd9a:	d0f9      	beq.n	800dd90 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800dd9c:	4299      	cmp	r1, r3
 800dd9e:	6998      	ldr	r0, [r3, #24]
 800dda0:	d1f9      	bne.n	800dd96 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800dda2:	6190      	str	r0, [r2, #24]
 800dda4:	618a      	str	r2, [r1, #24]
 800dda6:	e7f2      	b.n	800dd8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800dda8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800dda8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddac:	461f      	mov	r7, r3
 800ddae:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ddb2:	460d      	mov	r5, r1
 800ddb4:	4616      	mov	r6, r2
 800ddb6:	b103      	cbz	r3, 800ddba <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ddb8:	6038      	str	r0, [r7, #0]
 800ddba:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ddbc:	b314      	cbz	r4, 800de04 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ddbe:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ddc2:	b1eb      	cbz	r3, 800de00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ddc4:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ddc8:	428d      	cmp	r5, r1
 800ddca:	db19      	blt.n	800de00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ddcc:	b289      	uxth	r1, r1
 800ddce:	8923      	ldrh	r3, [r4, #8]
 800ddd0:	440b      	add	r3, r1
 800ddd2:	b21b      	sxth	r3, r3
 800ddd4:	429d      	cmp	r5, r3
 800ddd6:	da13      	bge.n	800de00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ddd8:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800dddc:	4296      	cmp	r6, r2
 800ddde:	db0f      	blt.n	800de00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800dde0:	b292      	uxth	r2, r2
 800dde2:	8963      	ldrh	r3, [r4, #10]
 800dde4:	4413      	add	r3, r2
 800dde6:	b21b      	sxth	r3, r3
 800dde8:	429e      	cmp	r6, r3
 800ddea:	da09      	bge.n	800de00 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ddec:	6823      	ldr	r3, [r4, #0]
 800ddee:	1ab2      	subs	r2, r6, r2
 800ddf0:	1a69      	subs	r1, r5, r1
 800ddf2:	4620      	mov	r0, r4
 800ddf4:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800ddf8:	b212      	sxth	r2, r2
 800ddfa:	463b      	mov	r3, r7
 800ddfc:	b209      	sxth	r1, r1
 800ddfe:	47c0      	blx	r8
 800de00:	69a4      	ldr	r4, [r4, #24]
 800de02:	e7db      	b.n	800ddbc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800de04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800de08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800de08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de0c:	4c6d      	ldr	r4, [pc, #436]	@ (800dfc4 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800de0e:	b0a1      	sub	sp, #132	@ 0x84
 800de10:	4606      	mov	r6, r0
 800de12:	6824      	ldr	r4, [r4, #0]
 800de14:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800de16:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800de1a:	2400      	movs	r4, #0
 800de1c:	9303      	str	r3, [sp, #12]
 800de1e:	802c      	strh	r4, [r5, #0]
 800de20:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800de22:	802c      	strh	r4, [r5, #0]
 800de24:	601c      	str	r4, [r3, #0]
 800de26:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800de2a:	f7ff ffbd 	bl	800dda8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800de2e:	f1b9 0f03 	cmp.w	r9, #3
 800de32:	f340 80c1 	ble.w	800dfb8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800de36:	4631      	mov	r1, r6
 800de38:	a80c      	add	r0, sp, #48	@ 0x30
 800de3a:	f005 fc75 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de3e:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800de42:	9306      	str	r3, [sp, #24]
 800de44:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800de48:	9307      	str	r3, [sp, #28]
 800de4a:	9b03      	ldr	r3, [sp, #12]
 800de4c:	f8d3 a000 	ldr.w	sl, [r3]
 800de50:	f1ba 0f00 	cmp.w	sl, #0
 800de54:	f000 80b3 	beq.w	800dfbe <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800de58:	4651      	mov	r1, sl
 800de5a:	a810      	add	r0, sp, #64	@ 0x40
 800de5c:	f005 fc64 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800de60:	2002      	movs	r0, #2
 800de62:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800de66:	9b01      	ldr	r3, [sp, #4]
 800de68:	9a06      	ldr	r2, [sp, #24]
 800de6a:	fb91 f1f0 	sdiv	r1, r1, r0
 800de6e:	189d      	adds	r5, r3, r2
 800de70:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800de74:	9a07      	ldr	r2, [sp, #28]
 800de76:	4419      	add	r1, r3
 800de78:	9b02      	ldr	r3, [sp, #8]
 800de7a:	4413      	add	r3, r2
 800de7c:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800de80:	1a6d      	subs	r5, r5, r1
 800de82:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800de86:	fb92 f2f0 	sdiv	r2, r2, r0
 800de8a:	440a      	add	r2, r1
 800de8c:	1a9b      	subs	r3, r3, r2
 800de8e:	435b      	muls	r3, r3
 800de90:	fb05 3505 	mla	r5, r5, r5, r3
 800de94:	4f4c      	ldr	r7, [pc, #304]	@ (800dfc8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800de96:	ac10      	add	r4, sp, #64	@ 0x40
 800de98:	f1b9 0f0c 	cmp.w	r9, #12
 800de9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800de9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dea0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dea2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dea4:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800dea6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800dea8:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800deac:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800deb0:	f04f 0303 	mov.w	r3, #3
 800deb4:	bfd8      	it	le
 800deb6:	f109 32ff 	addle.w	r2, r9, #4294967295
 800deba:	f04f 0400 	mov.w	r4, #0
 800debe:	f8cd 9000 	str.w	r9, [sp]
 800dec2:	bfcc      	ite	gt
 800dec4:	4698      	movgt	r8, r3
 800dec6:	fb92 f8f3 	sdivle	r8, r2, r3
 800deca:	1c63      	adds	r3, r4, #1
 800decc:	aa10      	add	r2, sp, #64	@ 0x40
 800dece:	f004 0401 	and.w	r4, r4, #1
 800ded2:	f04f 0b00 	mov.w	fp, #0
 800ded6:	9308      	str	r3, [sp, #32]
 800ded8:	9b00      	ldr	r3, [sp, #0]
 800deda:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800dede:	fb93 f3f8 	sdiv	r3, r3, r8
 800dee2:	3404      	adds	r4, #4
 800dee4:	b29b      	uxth	r3, r3
 800dee6:	9304      	str	r3, [sp, #16]
 800dee8:	9a04      	ldr	r2, [sp, #16]
 800deea:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800deee:	fb13 f302 	smulbb	r3, r3, r2
 800def2:	9a01      	ldr	r2, [sp, #4]
 800def4:	b29b      	uxth	r3, r3
 800def6:	1899      	adds	r1, r3, r2
 800def8:	9305      	str	r3, [sp, #20]
 800defa:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800defe:	b209      	sxth	r1, r1
 800df00:	4299      	cmp	r1, r3
 800df02:	db4d      	blt.n	800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df04:	8932      	ldrh	r2, [r6, #8]
 800df06:	4413      	add	r3, r2
 800df08:	b21b      	sxth	r3, r3
 800df0a:	4299      	cmp	r1, r3
 800df0c:	da48      	bge.n	800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df0e:	9b04      	ldr	r3, [sp, #16]
 800df10:	6827      	ldr	r7, [r4, #0]
 800df12:	fb17 f703 	smulbb	r7, r7, r3
 800df16:	9b02      	ldr	r3, [sp, #8]
 800df18:	b2bf      	uxth	r7, r7
 800df1a:	18fa      	adds	r2, r7, r3
 800df1c:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800df20:	b212      	sxth	r2, r2
 800df22:	429a      	cmp	r2, r3
 800df24:	db3c      	blt.n	800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df26:	8970      	ldrh	r0, [r6, #10]
 800df28:	4403      	add	r3, r0
 800df2a:	b21b      	sxth	r3, r3
 800df2c:	429a      	cmp	r2, r3
 800df2e:	da37      	bge.n	800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df30:	2300      	movs	r3, #0
 800df32:	4630      	mov	r0, r6
 800df34:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df36:	ab0b      	add	r3, sp, #44	@ 0x2c
 800df38:	f7ff ff36 	bl	800dda8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800df3c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800df3e:	b37a      	cbz	r2, 800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df40:	4552      	cmp	r2, sl
 800df42:	d02d      	beq.n	800dfa0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800df44:	4611      	mov	r1, r2
 800df46:	a80e      	add	r0, sp, #56	@ 0x38
 800df48:	9209      	str	r2, [sp, #36]	@ 0x24
 800df4a:	f005 fbed 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800df4e:	f04f 0e02 	mov.w	lr, #2
 800df52:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800df56:	9a06      	ldr	r2, [sp, #24]
 800df58:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800df5c:	9b01      	ldr	r3, [sp, #4]
 800df5e:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800df62:	4413      	add	r3, r2
 800df64:	9a07      	ldr	r2, [sp, #28]
 800df66:	fb91 f1fe 	sdiv	r1, r1, lr
 800df6a:	fb9c fcfe 	sdiv	ip, ip, lr
 800df6e:	4401      	add	r1, r0
 800df70:	1a58      	subs	r0, r3, r1
 800df72:	9b02      	ldr	r3, [sp, #8]
 800df74:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800df78:	4413      	add	r3, r2
 800df7a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800df7c:	448c      	add	ip, r1
 800df7e:	eba3 030c 	sub.w	r3, r3, ip
 800df82:	435b      	muls	r3, r3
 800df84:	fb00 3300 	mla	r3, r0, r0, r3
 800df88:	42ab      	cmp	r3, r5
 800df8a:	d208      	bcs.n	800df9e <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800df8c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800df8e:	461d      	mov	r5, r3
 800df90:	9803      	ldr	r0, [sp, #12]
 800df92:	6001      	str	r1, [r0, #0]
 800df94:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800df96:	9805      	ldr	r0, [sp, #20]
 800df98:	8008      	strh	r0, [r1, #0]
 800df9a:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800df9c:	800f      	strh	r7, [r1, #0]
 800df9e:	4692      	mov	sl, r2
 800dfa0:	f10b 0b01 	add.w	fp, fp, #1
 800dfa4:	3408      	adds	r4, #8
 800dfa6:	f1bb 0f04 	cmp.w	fp, #4
 800dfaa:	d19d      	bne.n	800dee8 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800dfac:	9b00      	ldr	r3, [sp, #0]
 800dfae:	9c08      	ldr	r4, [sp, #32]
 800dfb0:	444b      	add	r3, r9
 800dfb2:	4544      	cmp	r4, r8
 800dfb4:	9300      	str	r3, [sp, #0]
 800dfb6:	d188      	bne.n	800deca <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800dfb8:	b021      	add	sp, #132	@ 0x84
 800dfba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dfbe:	f04f 35ff 	mov.w	r5, #4294967295
 800dfc2:	e767      	b.n	800de94 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800dfc4:	240248fc 	.word	0x240248fc
 800dfc8:	08021c00 	.word	0x08021c00

0800dfcc <_ZN8touchgfx4RectaNERKS0_>:
 800dfcc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800dfd0:	f9b1 7000 	ldrsh.w	r7, [r1]
 800dfd4:	888c      	ldrh	r4, [r1, #4]
 800dfd6:	f9b0 9000 	ldrsh.w	r9, [r0]
 800dfda:	443c      	add	r4, r7
 800dfdc:	b2a4      	uxth	r4, r4
 800dfde:	fa0f f884 	sxth.w	r8, r4
 800dfe2:	45c1      	cmp	r9, r8
 800dfe4:	da2f      	bge.n	800e046 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dfe6:	8882      	ldrh	r2, [r0, #4]
 800dfe8:	444a      	add	r2, r9
 800dfea:	b292      	uxth	r2, r2
 800dfec:	fa0f fe82 	sxth.w	lr, r2
 800dff0:	4577      	cmp	r7, lr
 800dff2:	da28      	bge.n	800e046 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800dff4:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800dff8:	88cb      	ldrh	r3, [r1, #6]
 800dffa:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800dffe:	442b      	add	r3, r5
 800e000:	b21b      	sxth	r3, r3
 800e002:	429e      	cmp	r6, r3
 800e004:	da1f      	bge.n	800e046 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e006:	88c3      	ldrh	r3, [r0, #6]
 800e008:	4433      	add	r3, r6
 800e00a:	b29b      	uxth	r3, r3
 800e00c:	fa0f fc83 	sxth.w	ip, r3
 800e010:	4565      	cmp	r5, ip
 800e012:	da18      	bge.n	800e046 <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800e014:	454f      	cmp	r7, r9
 800e016:	bfb8      	it	lt
 800e018:	464f      	movlt	r7, r9
 800e01a:	42b5      	cmp	r5, r6
 800e01c:	bfb8      	it	lt
 800e01e:	4635      	movlt	r5, r6
 800e020:	45f0      	cmp	r8, lr
 800e022:	bfd8      	it	le
 800e024:	4622      	movle	r2, r4
 800e026:	1bd2      	subs	r2, r2, r7
 800e028:	8082      	strh	r2, [r0, #4]
 800e02a:	884a      	ldrh	r2, [r1, #2]
 800e02c:	88c9      	ldrh	r1, [r1, #6]
 800e02e:	8007      	strh	r7, [r0, #0]
 800e030:	440a      	add	r2, r1
 800e032:	8045      	strh	r5, [r0, #2]
 800e034:	b292      	uxth	r2, r2
 800e036:	b211      	sxth	r1, r2
 800e038:	458c      	cmp	ip, r1
 800e03a:	bfa8      	it	ge
 800e03c:	4613      	movge	r3, r2
 800e03e:	1b5b      	subs	r3, r3, r5
 800e040:	80c3      	strh	r3, [r0, #6]
 800e042:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e046:	2300      	movs	r3, #0
 800e048:	8003      	strh	r3, [r0, #0]
 800e04a:	8043      	strh	r3, [r0, #2]
 800e04c:	8083      	strh	r3, [r0, #4]
 800e04e:	80c3      	strh	r3, [r0, #6]
 800e050:	e7f7      	b.n	800e042 <_ZN8touchgfx4RectaNERKS0_+0x76>

0800e052 <_ZNK8touchgfx4Rect7isEmptyEv>:
 800e052:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800e056:	2b00      	cmp	r3, #0
 800e058:	dd06      	ble.n	800e068 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800e05a:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800e05e:	2800      	cmp	r0, #0
 800e060:	bfcc      	ite	gt
 800e062:	2000      	movgt	r0, #0
 800e064:	2001      	movle	r0, #1
 800e066:	4770      	bx	lr
 800e068:	2001      	movs	r0, #1
 800e06a:	4770      	bx	lr

0800e06c <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800e06c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e070:	2300      	movs	r3, #0
 800e072:	4604      	mov	r4, r0
 800e074:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800e076:	8003      	strh	r3, [r0, #0]
 800e078:	8043      	strh	r3, [r0, #2]
 800e07a:	8083      	strh	r3, [r0, #4]
 800e07c:	80c3      	strh	r3, [r0, #6]
 800e07e:	2d00      	cmp	r5, #0
 800e080:	d040      	beq.n	800e104 <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800e082:	1d28      	adds	r0, r5, #4
 800e084:	f7ff ffe5 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e088:	b988      	cbnz	r0, 800e0ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e08a:	4620      	mov	r0, r4
 800e08c:	f7ff ffe1 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e090:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800e094:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800e098:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800e09c:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800e0a0:	b138      	cbz	r0, 800e0b2 <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800e0a2:	8022      	strh	r2, [r4, #0]
 800e0a4:	8063      	strh	r3, [r4, #2]
 800e0a6:	f8a4 e004 	strh.w	lr, [r4, #4]
 800e0aa:	f8a4 c006 	strh.w	ip, [r4, #6]
 800e0ae:	69ad      	ldr	r5, [r5, #24]
 800e0b0:	e7e5      	b.n	800e07e <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800e0b2:	f9b4 0000 	ldrsh.w	r0, [r4]
 800e0b6:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800e0ba:	4290      	cmp	r0, r2
 800e0bc:	4607      	mov	r7, r0
 800e0be:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800e0c2:	460e      	mov	r6, r1
 800e0c4:	bfa8      	it	ge
 800e0c6:	4617      	movge	r7, r2
 800e0c8:	4299      	cmp	r1, r3
 800e0ca:	4472      	add	r2, lr
 800e0cc:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800e0d0:	bfa8      	it	ge
 800e0d2:	461e      	movge	r6, r3
 800e0d4:	4440      	add	r0, r8
 800e0d6:	4471      	add	r1, lr
 800e0d8:	4463      	add	r3, ip
 800e0da:	b200      	sxth	r0, r0
 800e0dc:	8027      	strh	r7, [r4, #0]
 800e0de:	b212      	sxth	r2, r2
 800e0e0:	8066      	strh	r6, [r4, #2]
 800e0e2:	b209      	sxth	r1, r1
 800e0e4:	b21b      	sxth	r3, r3
 800e0e6:	4290      	cmp	r0, r2
 800e0e8:	bfac      	ite	ge
 800e0ea:	ebc7 0200 	rsbge	r2, r7, r0
 800e0ee:	ebc7 0202 	rsblt	r2, r7, r2
 800e0f2:	4299      	cmp	r1, r3
 800e0f4:	bfac      	ite	ge
 800e0f6:	ebc6 0301 	rsbge	r3, r6, r1
 800e0fa:	ebc6 0303 	rsblt	r3, r6, r3
 800e0fe:	80a2      	strh	r2, [r4, #4]
 800e100:	80e3      	strh	r3, [r4, #6]
 800e102:	e7d4      	b.n	800e0ae <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800e104:	4620      	mov	r0, r4
 800e106:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e10a <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800e10a:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800e10e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e112:	b383      	cbz	r3, 800e176 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e114:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e116:	b374      	cbz	r4, 800e176 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800e118:	f9b1 5000 	ldrsh.w	r5, [r1]
 800e11c:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800e120:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800e124:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800e128:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e12c:	b303      	cbz	r3, 800e170 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e12e:	4668      	mov	r0, sp
 800e130:	1d21      	adds	r1, r4, #4
 800e132:	f8ad 5000 	strh.w	r5, [sp]
 800e136:	f8ad 6002 	strh.w	r6, [sp, #2]
 800e13a:	f8ad 7004 	strh.w	r7, [sp, #4]
 800e13e:	f8ad 8006 	strh.w	r8, [sp, #6]
 800e142:	f7ff ff43 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 800e146:	4668      	mov	r0, sp
 800e148:	f7ff ff83 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e14c:	b980      	cbnz	r0, 800e170 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800e14e:	f8bd 3000 	ldrh.w	r3, [sp]
 800e152:	4669      	mov	r1, sp
 800e154:	88a2      	ldrh	r2, [r4, #4]
 800e156:	4620      	mov	r0, r4
 800e158:	1a9b      	subs	r3, r3, r2
 800e15a:	88e2      	ldrh	r2, [r4, #6]
 800e15c:	f8ad 3000 	strh.w	r3, [sp]
 800e160:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e164:	1a9b      	subs	r3, r3, r2
 800e166:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e16a:	6823      	ldr	r3, [r4, #0]
 800e16c:	689b      	ldr	r3, [r3, #8]
 800e16e:	4798      	blx	r3
 800e170:	69a4      	ldr	r4, [r4, #24]
 800e172:	2c00      	cmp	r4, #0
 800e174:	d1d8      	bne.n	800e128 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800e176:	b002      	add	sp, #8
 800e178:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e17c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800e17c:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e17e:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800e182:	460d      	mov	r5, r1
 800e184:	4616      	mov	r6, r2
 800e186:	b323      	cbz	r3, 800e1d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e188:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800e18a:	b314      	cbz	r4, 800e1d2 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800e18c:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800e190:	b1eb      	cbz	r3, 800e1ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e192:	6828      	ldr	r0, [r5, #0]
 800e194:	466b      	mov	r3, sp
 800e196:	6869      	ldr	r1, [r5, #4]
 800e198:	c303      	stmia	r3!, {r0, r1}
 800e19a:	4668      	mov	r0, sp
 800e19c:	1d21      	adds	r1, r4, #4
 800e19e:	f7ff ff15 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 800e1a2:	4668      	mov	r0, sp
 800e1a4:	f7ff ff55 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 800e1a8:	b988      	cbnz	r0, 800e1ce <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800e1aa:	f8bd 3000 	ldrh.w	r3, [sp]
 800e1ae:	4669      	mov	r1, sp
 800e1b0:	88a2      	ldrh	r2, [r4, #4]
 800e1b2:	4620      	mov	r0, r4
 800e1b4:	1a9b      	subs	r3, r3, r2
 800e1b6:	88e2      	ldrh	r2, [r4, #6]
 800e1b8:	f8ad 3000 	strh.w	r3, [sp]
 800e1bc:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800e1c0:	1a9b      	subs	r3, r3, r2
 800e1c2:	4632      	mov	r2, r6
 800e1c4:	f8ad 3002 	strh.w	r3, [sp, #2]
 800e1c8:	6823      	ldr	r3, [r4, #0]
 800e1ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800e1cc:	4798      	blx	r3
 800e1ce:	69a4      	ldr	r4, [r4, #24]
 800e1d0:	e7db      	b.n	800e18a <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800e1d2:	b002      	add	sp, #8
 800e1d4:	bd70      	pop	{r4, r5, r6, pc}

0800e1d6 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800e1d6:	6803      	ldr	r3, [r0, #0]
 800e1d8:	b513      	push	{r0, r1, r4, lr}
 800e1da:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800e1de:	2300      	movs	r3, #0
 800e1e0:	e9cd 3300 	strd	r3, r3, [sp]
 800e1e4:	466b      	mov	r3, sp
 800e1e6:	47a0      	blx	r4
 800e1e8:	b002      	add	sp, #8
 800e1ea:	bd10      	pop	{r4, pc}

0800e1ec <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800e1ec:	2301      	movs	r3, #1
 800e1ee:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e1f2:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e1f6:	4770      	bx	lr

0800e1f8 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800e1f8:	2301      	movs	r3, #1
 800e1fa:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800e1fe:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800e202:	4770      	bx	lr

0800e204 <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800e204:	6843      	ldr	r3, [r0, #4]
 800e206:	2201      	movs	r2, #1
 800e208:	725a      	strb	r2, [r3, #9]
 800e20a:	6840      	ldr	r0, [r0, #4]
 800e20c:	6803      	ldr	r3, [r0, #0]
 800e20e:	691b      	ldr	r3, [r3, #16]
 800e210:	4718      	bx	r3

0800e212 <_ZN8touchgfx3HAL8flushDMAEv>:
 800e212:	6840      	ldr	r0, [r0, #4]
 800e214:	6803      	ldr	r3, [r0, #0]
 800e216:	689b      	ldr	r3, [r3, #8]
 800e218:	4718      	bx	r3

0800e21a <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800e21a:	b530      	push	{r4, r5, lr}
 800e21c:	b08b      	sub	sp, #44	@ 0x2c
 800e21e:	6804      	ldr	r4, [r0, #0]
 800e220:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800e224:	9509      	str	r5, [sp, #36]	@ 0x24
 800e226:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800e22a:	9508      	str	r5, [sp, #32]
 800e22c:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800e230:	9507      	str	r5, [sp, #28]
 800e232:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800e236:	9506      	str	r5, [sp, #24]
 800e238:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800e23c:	9505      	str	r5, [sp, #20]
 800e23e:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800e242:	9504      	str	r5, [sp, #16]
 800e244:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800e248:	9503      	str	r5, [sp, #12]
 800e24a:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800e24e:	9502      	str	r5, [sp, #8]
 800e250:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800e254:	e9cd 3500 	strd	r3, r5, [sp]
 800e258:	4613      	mov	r3, r2
 800e25a:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800e25c:	2200      	movs	r2, #0
 800e25e:	47a0      	blx	r4
 800e260:	b00b      	add	sp, #44	@ 0x2c
 800e262:	bd30      	pop	{r4, r5, pc}

0800e264 <_ZN8touchgfx3HAL10beginFrameEv>:
 800e264:	4b04      	ldr	r3, [pc, #16]	@ (800e278 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800e266:	781b      	ldrb	r3, [r3, #0]
 800e268:	b123      	cbz	r3, 800e274 <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800e26a:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800e26e:	f080 0001 	eor.w	r0, r0, #1
 800e272:	4770      	bx	lr
 800e274:	2001      	movs	r0, #1
 800e276:	4770      	bx	lr
 800e278:	240248fa 	.word	0x240248fa

0800e27c <_ZN8touchgfx3HAL8endFrameEv>:
 800e27c:	b510      	push	{r4, lr}
 800e27e:	4604      	mov	r4, r0
 800e280:	6840      	ldr	r0, [r0, #4]
 800e282:	6803      	ldr	r3, [r0, #0]
 800e284:	689b      	ldr	r3, [r3, #8]
 800e286:	4798      	blx	r3
 800e288:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800e28c:	b113      	cbz	r3, 800e294 <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800e28e:	2301      	movs	r3, #1
 800e290:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800e294:	bd10      	pop	{r4, pc}

0800e296 <_ZN8touchgfx3HAL10initializeEv>:
 800e296:	b510      	push	{r4, lr}
 800e298:	4604      	mov	r4, r0
 800e29a:	f7f4 fdff 	bl	8002e9c <_ZN8touchgfx10OSWrappers10initializeEv>
 800e29e:	f7f3 fe61 	bl	8001f64 <_ZN8touchgfx4GPIO4initEv>
 800e2a2:	6860      	ldr	r0, [r4, #4]
 800e2a4:	6803      	ldr	r3, [r0, #0]
 800e2a6:	68db      	ldr	r3, [r3, #12]
 800e2a8:	4798      	blx	r3
 800e2aa:	68e0      	ldr	r0, [r4, #12]
 800e2ac:	6803      	ldr	r3, [r0, #0]
 800e2ae:	689b      	ldr	r3, [r3, #8]
 800e2b0:	4798      	blx	r3
 800e2b2:	6823      	ldr	r3, [r4, #0]
 800e2b4:	4620      	mov	r0, r4
 800e2b6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800e2b8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e2bc:	4718      	bx	r3
	...

0800e2c0 <_ZN8touchgfx3HAL4tickEv>:
 800e2c0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e2c2:	6803      	ldr	r3, [r0, #0]
 800e2c4:	4604      	mov	r4, r0
 800e2c6:	4d5b      	ldr	r5, [pc, #364]	@ (800e434 <_ZN8touchgfx3HAL4tickEv+0x174>)
 800e2c8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800e2cc:	4798      	blx	r3
 800e2ce:	2800      	cmp	r0, #0
 800e2d0:	f000 8095 	beq.w	800e3fe <_ZN8touchgfx3HAL4tickEv+0x13e>
 800e2d4:	2001      	movs	r0, #1
 800e2d6:	2600      	movs	r6, #0
 800e2d8:	f7f3 fdaa 	bl	8001e30 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800e2dc:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800e2e0:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800e2e4:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e2e8:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800e2ec:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800e2f0:	b133      	cbz	r3, 800e300 <_ZN8touchgfx3HAL4tickEv+0x40>
 800e2f2:	6823      	ldr	r3, [r4, #0]
 800e2f4:	4620      	mov	r0, r4
 800e2f6:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800e2fa:	4798      	blx	r3
 800e2fc:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800e300:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800e304:	2601      	movs	r6, #1
 800e306:	6862      	ldr	r2, [r4, #4]
 800e308:	f083 0301 	eor.w	r3, r3, #1
 800e30c:	702e      	strb	r6, [r5, #0]
 800e30e:	7253      	strb	r3, [r2, #9]
 800e310:	f004 f8f6 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 800e314:	6803      	ldr	r3, [r0, #0]
 800e316:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e318:	4798      	blx	r3
 800e31a:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e31e:	b90b      	cbnz	r3, 800e324 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e320:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800e324:	f004 f8ec 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 800e328:	6803      	ldr	r3, [r0, #0]
 800e32a:	695b      	ldr	r3, [r3, #20]
 800e32c:	4798      	blx	r3
 800e32e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e330:	6803      	ldr	r3, [r0, #0]
 800e332:	691b      	ldr	r3, [r3, #16]
 800e334:	4798      	blx	r3
 800e336:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800e33a:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800e33e:	3b01      	subs	r3, #1
 800e340:	b2db      	uxtb	r3, r3
 800e342:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800e346:	b10a      	cbz	r2, 800e34c <_ZN8touchgfx3HAL4tickEv+0x8c>
 800e348:	2b00      	cmp	r3, #0
 800e34a:	d1eb      	bne.n	800e324 <_ZN8touchgfx3HAL4tickEv+0x64>
 800e34c:	4a3a      	ldr	r2, [pc, #232]	@ (800e438 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800e34e:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800e352:	7813      	ldrb	r3, [r2, #0]
 800e354:	3301      	adds	r3, #1
 800e356:	b25b      	sxtb	r3, r3
 800e358:	4299      	cmp	r1, r3
 800e35a:	7013      	strb	r3, [r2, #0]
 800e35c:	dc10      	bgt.n	800e380 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e35e:	2300      	movs	r3, #0
 800e360:	68e0      	ldr	r0, [r4, #12]
 800e362:	a902      	add	r1, sp, #8
 800e364:	7013      	strb	r3, [r2, #0]
 800e366:	aa03      	add	r2, sp, #12
 800e368:	6803      	ldr	r3, [r0, #0]
 800e36a:	68db      	ldr	r3, [r3, #12]
 800e36c:	4798      	blx	r3
 800e36e:	6823      	ldr	r3, [r4, #0]
 800e370:	2800      	cmp	r0, #0
 800e372:	d050      	beq.n	800e416 <_ZN8touchgfx3HAL4tickEv+0x156>
 800e374:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800e378:	4620      	mov	r0, r4
 800e37a:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800e37e:	4798      	blx	r3
 800e380:	2300      	movs	r3, #0
 800e382:	6960      	ldr	r0, [r4, #20]
 800e384:	f88d 3007 	strb.w	r3, [sp, #7]
 800e388:	b158      	cbz	r0, 800e3a2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e38a:	6803      	ldr	r3, [r0, #0]
 800e38c:	f10d 0107 	add.w	r1, sp, #7
 800e390:	68db      	ldr	r3, [r3, #12]
 800e392:	4798      	blx	r3
 800e394:	b128      	cbz	r0, 800e3a2 <_ZN8touchgfx3HAL4tickEv+0xe2>
 800e396:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800e398:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800e39c:	6803      	ldr	r3, [r0, #0]
 800e39e:	68db      	ldr	r3, [r3, #12]
 800e3a0:	4798      	blx	r3
 800e3a2:	f104 001c 	add.w	r0, r4, #28
 800e3a6:	f011 f8ad 	bl	801f504 <_ZN8touchgfx8Gestures4tickEv>
 800e3aa:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800e3ae:	b30b      	cbz	r3, 800e3f4 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e3b0:	6920      	ldr	r0, [r4, #16]
 800e3b2:	6803      	ldr	r3, [r0, #0]
 800e3b4:	691b      	ldr	r3, [r3, #16]
 800e3b6:	4798      	blx	r3
 800e3b8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e3ba:	4606      	mov	r6, r0
 800e3bc:	b903      	cbnz	r3, 800e3c0 <_ZN8touchgfx3HAL4tickEv+0x100>
 800e3be:	6760      	str	r0, [r4, #116]	@ 0x74
 800e3c0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e3c2:	4a1e      	ldr	r2, [pc, #120]	@ (800e43c <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800e3c4:	1af3      	subs	r3, r6, r3
 800e3c6:	4293      	cmp	r3, r2
 800e3c8:	d914      	bls.n	800e3f4 <_ZN8touchgfx3HAL4tickEv+0x134>
 800e3ca:	6920      	ldr	r0, [r4, #16]
 800e3cc:	6803      	ldr	r3, [r0, #0]
 800e3ce:	699b      	ldr	r3, [r3, #24]
 800e3d0:	4798      	blx	r3
 800e3d2:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800e3d4:	2264      	movs	r2, #100	@ 0x64
 800e3d6:	1af3      	subs	r3, r6, r3
 800e3d8:	fbb3 f3f2 	udiv	r3, r3, r2
 800e3dc:	fbb0 f0f3 	udiv	r0, r0, r3
 800e3e0:	2800      	cmp	r0, #0
 800e3e2:	dc1d      	bgt.n	800e420 <_ZN8touchgfx3HAL4tickEv+0x160>
 800e3e4:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800e3e8:	6920      	ldr	r0, [r4, #16]
 800e3ea:	2100      	movs	r1, #0
 800e3ec:	6803      	ldr	r3, [r0, #0]
 800e3ee:	69db      	ldr	r3, [r3, #28]
 800e3f0:	4798      	blx	r3
 800e3f2:	6766      	str	r6, [r4, #116]	@ 0x74
 800e3f4:	f004 f884 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 800e3f8:	6803      	ldr	r3, [r0, #0]
 800e3fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e3fc:	4798      	blx	r3
 800e3fe:	6823      	ldr	r3, [r4, #0]
 800e400:	4620      	mov	r0, r4
 800e402:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800e406:	4798      	blx	r3
 800e408:	2001      	movs	r0, #1
 800e40a:	f7f3 fd41 	bl	8001e90 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800e40e:	2300      	movs	r3, #0
 800e410:	702b      	strb	r3, [r5, #0]
 800e412:	b004      	add	sp, #16
 800e414:	bd70      	pop	{r4, r5, r6, pc}
 800e416:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800e41a:	4620      	mov	r0, r4
 800e41c:	4798      	blx	r3
 800e41e:	e7af      	b.n	800e380 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800e420:	2863      	cmp	r0, #99	@ 0x63
 800e422:	bfcb      	itete	gt
 800e424:	2300      	movgt	r3, #0
 800e426:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800e42a:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800e42e:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800e432:	e7d9      	b.n	800e3e8 <_ZN8touchgfx3HAL4tickEv+0x128>
 800e434:	24024900 	.word	0x24024900
 800e438:	24024901 	.word	0x24024901
 800e43c:	05f5e100 	.word	0x05f5e100

0800e440 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800e440:	b510      	push	{r4, lr}
 800e442:	4604      	mov	r4, r0
 800e444:	f7f4 fd5a 	bl	8002efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800e448:	2200      	movs	r2, #0
 800e44a:	6863      	ldr	r3, [r4, #4]
 800e44c:	729a      	strb	r2, [r3, #10]
 800e44e:	bd10      	pop	{r4, pc}

0800e450 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800e450:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800e452:	301c      	adds	r0, #28
 800e454:	f011 b854 	b.w	801f500 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800e458 <_ZN8touchgfx3HAL5touchEll>:
 800e458:	b530      	push	{r4, r5, lr}
 800e45a:	b087      	sub	sp, #28
 800e45c:	4604      	mov	r4, r0
 800e45e:	a804      	add	r0, sp, #16
 800e460:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800e464:	f003 fe34 	bl	80120d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800e468:	9b04      	ldr	r3, [sp, #16]
 800e46a:	a906      	add	r1, sp, #24
 800e46c:	a803      	add	r0, sp, #12
 800e46e:	f8ad 300c 	strh.w	r3, [sp, #12]
 800e472:	9b05      	ldr	r3, [sp, #20]
 800e474:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800e478:	f003 fe7c 	bl	8012174 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800e47c:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800e480:	f104 001c 	add.w	r0, r4, #28
 800e484:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800e488:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800e48c:	b189      	cbz	r1, 800e4b2 <_ZN8touchgfx3HAL5touchEll+0x5a>
 800e48e:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800e492:	9300      	str	r3, [sp, #0]
 800e494:	4613      	mov	r3, r2
 800e496:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800e49a:	462a      	mov	r2, r5
 800e49c:	f011 f840 	bl	801f520 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800e4a0:	b128      	cbz	r0, 800e4ae <_ZN8touchgfx3HAL5touchEll+0x56>
 800e4a2:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800e4a6:	6623      	str	r3, [r4, #96]	@ 0x60
 800e4a8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800e4ac:	6663      	str	r3, [r4, #100]	@ 0x64
 800e4ae:	b007      	add	sp, #28
 800e4b0:	bd30      	pop	{r4, r5, pc}
 800e4b2:	f011 f875 	bl	801f5a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e4bc:	e7f1      	b.n	800e4a2 <_ZN8touchgfx3HAL5touchEll+0x4a>

0800e4be <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800e4be:	b510      	push	{r4, lr}
 800e4c0:	2b00      	cmp	r3, #0
 800e4c2:	d046      	beq.n	800e552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e4c4:	ea81 0002 	eor.w	r0, r1, r2
 800e4c8:	07c4      	lsls	r4, r0, #31
 800e4ca:	d508      	bpl.n	800e4de <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800e4cc:	440b      	add	r3, r1
 800e4ce:	3a01      	subs	r2, #1
 800e4d0:	428b      	cmp	r3, r1
 800e4d2:	d93e      	bls.n	800e552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e4d4:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e4d8:	f801 0b01 	strb.w	r0, [r1], #1
 800e4dc:	e7f8      	b.n	800e4d0 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800e4de:	07d0      	lsls	r0, r2, #31
 800e4e0:	bf42      	ittt	mi
 800e4e2:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800e4e6:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800e4ea:	f801 0b01 	strbmi.w	r0, [r1], #1
 800e4ee:	2b01      	cmp	r3, #1
 800e4f0:	d911      	bls.n	800e516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e4f2:	ea81 0402 	eor.w	r4, r1, r2
 800e4f6:	4610      	mov	r0, r2
 800e4f8:	07a4      	lsls	r4, r4, #30
 800e4fa:	d022      	beq.n	800e542 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800e4fc:	f023 0401 	bic.w	r4, r3, #1
 800e500:	440c      	add	r4, r1
 800e502:	428c      	cmp	r4, r1
 800e504:	4602      	mov	r2, r0
 800e506:	d904      	bls.n	800e512 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800e508:	8812      	ldrh	r2, [r2, #0]
 800e50a:	3002      	adds	r0, #2
 800e50c:	f821 2b02 	strh.w	r2, [r1], #2
 800e510:	e7f7      	b.n	800e502 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800e512:	f003 0301 	and.w	r3, r3, #1
 800e516:	f023 0003 	bic.w	r0, r3, #3
 800e51a:	4408      	add	r0, r1
 800e51c:	4288      	cmp	r0, r1
 800e51e:	4614      	mov	r4, r2
 800e520:	d904      	bls.n	800e52c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800e522:	6824      	ldr	r4, [r4, #0]
 800e524:	3204      	adds	r2, #4
 800e526:	f841 4b04 	str.w	r4, [r1], #4
 800e52a:	e7f7      	b.n	800e51c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800e52c:	f003 0303 	and.w	r3, r3, #3
 800e530:	3a01      	subs	r2, #1
 800e532:	440b      	add	r3, r1
 800e534:	428b      	cmp	r3, r1
 800e536:	d90c      	bls.n	800e552 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800e538:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800e53c:	f801 0b01 	strb.w	r0, [r1], #1
 800e540:	e7f8      	b.n	800e534 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800e542:	0790      	lsls	r0, r2, #30
 800e544:	d0e7      	beq.n	800e516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e546:	f832 0b02 	ldrh.w	r0, [r2], #2
 800e54a:	3b02      	subs	r3, #2
 800e54c:	f821 0b02 	strh.w	r0, [r1], #2
 800e550:	e7e1      	b.n	800e516 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800e552:	2001      	movs	r0, #1
 800e554:	bd10      	pop	{r4, pc}

0800e556 <_ZN8touchgfx3HAL7noTouchEv>:
 800e556:	b510      	push	{r4, lr}
 800e558:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800e55c:	4604      	mov	r4, r0
 800e55e:	b153      	cbz	r3, 800e576 <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800e560:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800e564:	2101      	movs	r1, #1
 800e566:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800e56a:	301c      	adds	r0, #28
 800e56c:	f011 f818 	bl	801f5a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800e570:	2300      	movs	r3, #0
 800e572:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800e576:	bd10      	pop	{r4, pc}

0800e578 <_ZN8touchgfx8Drawable5setXYEss>:
 800e578:	b570      	push	{r4, r5, r6, lr}
 800e57a:	6803      	ldr	r3, [r0, #0]
 800e57c:	4604      	mov	r4, r0
 800e57e:	4615      	mov	r5, r2
 800e580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e582:	4798      	blx	r3
 800e584:	6823      	ldr	r3, [r4, #0]
 800e586:	4629      	mov	r1, r5
 800e588:	4620      	mov	r0, r4
 800e58a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e58c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800e590:	4718      	bx	r3
	...

0800e594 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800e594:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e598:	b085      	sub	sp, #20
 800e59a:	4604      	mov	r4, r0
 800e59c:	2000      	movs	r0, #0
 800e59e:	4699      	mov	r9, r3
 800e5a0:	ad04      	add	r5, sp, #16
 800e5a2:	460f      	mov	r7, r1
 800e5a4:	4690      	mov	r8, r2
 800e5a6:	f845 0d04 	str.w	r0, [r5, #-4]!
 800e5aa:	69a0      	ldr	r0, [r4, #24]
 800e5ac:	6806      	ldr	r6, [r0, #0]
 800e5ae:	9501      	str	r5, [sp, #4]
 800e5b0:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800e5b4:	9500      	str	r5, [sp, #0]
 800e5b6:	6835      	ldr	r5, [r6, #0]
 800e5b8:	47a8      	blx	r5
 800e5ba:	4d10      	ldr	r5, [pc, #64]	@ (800e5fc <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800e5bc:	4606      	mov	r6, r0
 800e5be:	f8a5 9000 	strh.w	r9, [r5]
 800e5c2:	f7f5 fd35 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800e5c6:	6803      	ldr	r3, [r0, #0]
 800e5c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e5ca:	4798      	blx	r3
 800e5cc:	b128      	cbz	r0, 800e5da <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800e5ce:	2801      	cmp	r0, #1
 800e5d0:	d00b      	beq.n	800e5ea <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800e5d2:	4630      	mov	r0, r6
 800e5d4:	b005      	add	sp, #20
 800e5d6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e5da:	882b      	ldrh	r3, [r5, #0]
 800e5dc:	fb08 7203 	mla	r2, r8, r3, r7
 800e5e0:	9b03      	ldr	r3, [sp, #12]
 800e5e2:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800e5e6:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800e5e8:	e7f3      	b.n	800e5d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e5ea:	882a      	ldrh	r2, [r5, #0]
 800e5ec:	9b03      	ldr	r3, [sp, #12]
 800e5ee:	fb08 7202 	mla	r2, r8, r2, r7
 800e5f2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800e5f6:	1a9a      	subs	r2, r3, r2
 800e5f8:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800e5fa:	e7ea      	b.n	800e5d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800e5fc:	240248f6 	.word	0x240248f6

0800e600 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800e600:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e602:	b08b      	sub	sp, #44	@ 0x2c
 800e604:	4617      	mov	r7, r2
 800e606:	4604      	mov	r4, r0
 800e608:	460e      	mov	r6, r1
 800e60a:	461d      	mov	r5, r3
 800e60c:	f7f5 fd10 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800e610:	6803      	ldr	r3, [r0, #0]
 800e612:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e614:	4798      	blx	r3
 800e616:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e61a:	9007      	str	r0, [sp, #28]
 800e61c:	4631      	mov	r1, r6
 800e61e:	6822      	ldr	r2, [r4, #0]
 800e620:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e624:	4b0c      	ldr	r3, [pc, #48]	@ (800e658 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800e626:	4620      	mov	r0, r4
 800e628:	881b      	ldrh	r3, [r3, #0]
 800e62a:	9306      	str	r3, [sp, #24]
 800e62c:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800e630:	9305      	str	r3, [sp, #20]
 800e632:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800e636:	9304      	str	r3, [sp, #16]
 800e638:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e63c:	9303      	str	r3, [sp, #12]
 800e63e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e642:	9302      	str	r3, [sp, #8]
 800e644:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e648:	e9cd 5300 	strd	r5, r3, [sp]
 800e64c:	463b      	mov	r3, r7
 800e64e:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800e650:	2200      	movs	r2, #0
 800e652:	47a8      	blx	r5
 800e654:	b00b      	add	sp, #44	@ 0x2c
 800e656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800e658:	240248f6 	.word	0x240248f6

0800e65c <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800e65c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e660:	4698      	mov	r8, r3
 800e662:	6803      	ldr	r3, [r0, #0]
 800e664:	b08b      	sub	sp, #44	@ 0x2c
 800e666:	4617      	mov	r7, r2
 800e668:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800e66a:	460e      	mov	r6, r1
 800e66c:	4b13      	ldr	r3, [pc, #76]	@ (800e6bc <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800e66e:	4604      	mov	r4, r0
 800e670:	f8b3 9000 	ldrh.w	r9, [r3]
 800e674:	f7f5 fcdc 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800e678:	6803      	ldr	r3, [r0, #0]
 800e67a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e67c:	4798      	blx	r3
 800e67e:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800e682:	2200      	movs	r2, #0
 800e684:	4631      	mov	r1, r6
 800e686:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800e68a:	2302      	movs	r3, #2
 800e68c:	4620      	mov	r0, r4
 800e68e:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800e692:	2301      	movs	r3, #1
 800e694:	9305      	str	r3, [sp, #20]
 800e696:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800e69a:	9304      	str	r3, [sp, #16]
 800e69c:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800e6a0:	9303      	str	r3, [sp, #12]
 800e6a2:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e6a6:	9302      	str	r3, [sp, #8]
 800e6a8:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e6ac:	e9cd 8300 	strd	r8, r3, [sp]
 800e6b0:	463b      	mov	r3, r7
 800e6b2:	47a8      	blx	r5
 800e6b4:	b00b      	add	sp, #44	@ 0x2c
 800e6b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e6ba:	bf00      	nop
 800e6bc:	240248f6 	.word	0x240248f6

0800e6c0 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800e6c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e6c4:	4698      	mov	r8, r3
 800e6c6:	6803      	ldr	r3, [r0, #0]
 800e6c8:	b087      	sub	sp, #28
 800e6ca:	460e      	mov	r6, r1
 800e6cc:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800e6ce:	4617      	mov	r7, r2
 800e6d0:	4b0f      	ldr	r3, [pc, #60]	@ (800e710 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	f8b3 9000 	ldrh.w	r9, [r3]
 800e6d8:	f7f5 fcaa 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800e6dc:	6803      	ldr	r3, [r0, #0]
 800e6de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e6e0:	4798      	blx	r3
 800e6e2:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800e6e6:	463a      	mov	r2, r7
 800e6e8:	4631      	mov	r1, r6
 800e6ea:	f8cd 900c 	str.w	r9, [sp, #12]
 800e6ee:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800e6f2:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800e6f6:	4620      	mov	r0, r4
 800e6f8:	9302      	str	r3, [sp, #8]
 800e6fa:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800e6fe:	9301      	str	r3, [sp, #4]
 800e700:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800e704:	9300      	str	r3, [sp, #0]
 800e706:	4643      	mov	r3, r8
 800e708:	47a8      	blx	r5
 800e70a:	b007      	add	sp, #28
 800e70c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e710:	240248f6 	.word	0x240248f6

0800e714 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800e714:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e718:	4604      	mov	r4, r0
 800e71a:	b08f      	sub	sp, #60	@ 0x3c
 800e71c:	4610      	mov	r0, r2
 800e71e:	460d      	mov	r5, r1
 800e720:	4691      	mov	r9, r2
 800e722:	461e      	mov	r6, r3
 800e724:	f006 fe2a 	bl	801537c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e728:	2800      	cmp	r0, #0
 800e72a:	f000 809d 	beq.w	800e868 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800e72e:	6823      	ldr	r3, [r4, #0]
 800e730:	4620      	mov	r0, r4
 800e732:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800e8cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800e736:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800e73a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e73c:	4798      	blx	r3
 800e73e:	6823      	ldr	r3, [r4, #0]
 800e740:	4620      	mov	r0, r4
 800e742:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800e8d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800e746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e748:	4798      	blx	r3
 800e74a:	f8bb 3000 	ldrh.w	r3, [fp]
 800e74e:	4f5c      	ldr	r7, [pc, #368]	@ (800e8c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e750:	9301      	str	r3, [sp, #4]
 800e752:	f8ba 3000 	ldrh.w	r3, [sl]
 800e756:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800e75a:	4640      	mov	r0, r8
 800e75c:	9302      	str	r3, [sp, #8]
 800e75e:	883b      	ldrh	r3, [r7, #0]
 800e760:	9303      	str	r3, [sp, #12]
 800e762:	4b58      	ldr	r3, [pc, #352]	@ (800e8c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e764:	881a      	ldrh	r2, [r3, #0]
 800e766:	9305      	str	r3, [sp, #20]
 800e768:	9204      	str	r2, [sp, #16]
 800e76a:	f006 ff57 	bl	801561c <_ZNK8touchgfx6Bitmap8getWidthEv>
 800e76e:	8038      	strh	r0, [r7, #0]
 800e770:	4640      	mov	r0, r8
 800e772:	f006 ff87 	bl	8015684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 800e776:	9b05      	ldr	r3, [sp, #20]
 800e778:	b280      	uxth	r0, r0
 800e77a:	8018      	strh	r0, [r3, #0]
 800e77c:	4b52      	ldr	r3, [pc, #328]	@ (800e8c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800e77e:	781b      	ldrb	r3, [r3, #0]
 800e780:	2b00      	cmp	r3, #0
 800e782:	d174      	bne.n	800e86e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800e784:	883b      	ldrh	r3, [r7, #0]
 800e786:	f8aa 0000 	strh.w	r0, [sl]
 800e78a:	f8ab 3000 	strh.w	r3, [fp]
 800e78e:	4648      	mov	r0, r9
 800e790:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800e794:	f006 fdf2 	bl	801537c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800e798:	2200      	movs	r2, #0
 800e79a:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800e79e:	4611      	mov	r1, r2
 800e7a0:	4628      	mov	r0, r5
 800e7a2:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800e7a6:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800e7aa:	f7ff fee5 	bl	800e578 <_ZN8touchgfx8Drawable5setXYEss>
 800e7ae:	2301      	movs	r3, #1
 800e7b0:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800e7b4:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800e7b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800e7bc:	2b00      	cmp	r3, #0
 800e7be:	dd5c      	ble.n	800e87a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e7c0:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800e7c4:	2b00      	cmp	r3, #0
 800e7c6:	dd58      	ble.n	800e87a <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800e7c8:	462a      	mov	r2, r5
 800e7ca:	ab0a      	add	r3, sp, #40	@ 0x28
 800e7cc:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e7d0:	6851      	ldr	r1, [r2, #4]
 800e7d2:	c303      	stmia	r3!, {r0, r1}
 800e7d4:	4631      	mov	r1, r6
 800e7d6:	a80a      	add	r0, sp, #40	@ 0x28
 800e7d8:	f7ff fbf8 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 800e7dc:	4b38      	ldr	r3, [pc, #224]	@ (800e8c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e7de:	2100      	movs	r1, #0
 800e7e0:	f9b3 2000 	ldrsh.w	r2, [r3]
 800e7e4:	4b37      	ldr	r3, [pc, #220]	@ (800e8c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e7e6:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800e7ea:	aa0a      	add	r2, sp, #40	@ 0x28
 800e7ec:	f9b3 3000 	ldrsh.w	r3, [r3]
 800e7f0:	910c      	str	r1, [sp, #48]	@ 0x30
 800e7f2:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800e7f6:	ab08      	add	r3, sp, #32
 800e7f8:	e892 0003 	ldmia.w	r2, {r0, r1}
 800e7fc:	e883 0003 	stmia.w	r3, {r0, r1}
 800e800:	4618      	mov	r0, r3
 800e802:	a90c      	add	r1, sp, #48	@ 0x30
 800e804:	f7ff fbe2 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 800e808:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800e80a:	2b00      	cmp	r3, #0
 800e80c:	d13c      	bne.n	800e888 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800e80e:	2000      	movs	r0, #0
 800e810:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800e814:	2600      	movs	r6, #0
 800e816:	696b      	ldr	r3, [r5, #20]
 800e818:	a908      	add	r1, sp, #32
 800e81a:	682a      	ldr	r2, [r5, #0]
 800e81c:	4628      	mov	r0, r5
 800e81e:	9305      	str	r3, [sp, #20]
 800e820:	616e      	str	r6, [r5, #20]
 800e822:	6892      	ldr	r2, [r2, #8]
 800e824:	4790      	blx	r2
 800e826:	9b05      	ldr	r3, [sp, #20]
 800e828:	4652      	mov	r2, sl
 800e82a:	4649      	mov	r1, r9
 800e82c:	616b      	str	r3, [r5, #20]
 800e82e:	4628      	mov	r0, r5
 800e830:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800e834:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800e838:	f7ff fe9e 	bl	800e578 <_ZN8touchgfx8Drawable5setXYEss>
 800e83c:	9a01      	ldr	r2, [sp, #4]
 800e83e:	4b23      	ldr	r3, [pc, #140]	@ (800e8cc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800e840:	4620      	mov	r0, r4
 800e842:	801a      	strh	r2, [r3, #0]
 800e844:	9a02      	ldr	r2, [sp, #8]
 800e846:	4b22      	ldr	r3, [pc, #136]	@ (800e8d0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800e848:	801a      	strh	r2, [r3, #0]
 800e84a:	9a03      	ldr	r2, [sp, #12]
 800e84c:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800e84e:	801a      	strh	r2, [r3, #0]
 800e850:	4b1c      	ldr	r3, [pc, #112]	@ (800e8c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800e852:	9a04      	ldr	r2, [sp, #16]
 800e854:	801a      	strh	r2, [r3, #0]
 800e856:	6823      	ldr	r3, [r4, #0]
 800e858:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800e85c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e85e:	4798      	blx	r3
 800e860:	6823      	ldr	r3, [r4, #0]
 800e862:	4620      	mov	r0, r4
 800e864:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e866:	4798      	blx	r3
 800e868:	b00f      	add	sp, #60	@ 0x3c
 800e86a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e86e:	883b      	ldrh	r3, [r7, #0]
 800e870:	f8ab 0000 	strh.w	r0, [fp]
 800e874:	f8aa 3000 	strh.w	r3, [sl]
 800e878:	e789      	b.n	800e78e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800e87a:	462a      	mov	r2, r5
 800e87c:	ab0a      	add	r3, sp, #40	@ 0x28
 800e87e:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800e882:	6851      	ldr	r1, [r2, #4]
 800e884:	c303      	stmia	r3!, {r0, r1}
 800e886:	e7a9      	b.n	800e7dc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800e888:	a807      	add	r0, sp, #28
 800e88a:	f006 ffb3 	bl	80157f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e88e:	4606      	mov	r6, r0
 800e890:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800e892:	6803      	ldr	r3, [r0, #0]
 800e894:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e896:	4798      	blx	r3
 800e898:	4286      	cmp	r6, r0
 800e89a:	d1b8      	bne.n	800e80e <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800e89c:	f7f5 fbc8 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800e8a0:	6803      	ldr	r3, [r0, #0]
 800e8a2:	4606      	mov	r6, r0
 800e8a4:	a807      	add	r0, sp, #28
 800e8a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800e8a8:	9305      	str	r3, [sp, #20]
 800e8aa:	f006 ffa3 	bl	80157f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 800e8ae:	9b05      	ldr	r3, [sp, #20]
 800e8b0:	4601      	mov	r1, r0
 800e8b2:	4630      	mov	r0, r6
 800e8b4:	4798      	blx	r3
 800e8b6:	f080 0001 	eor.w	r0, r0, #1
 800e8ba:	b2c0      	uxtb	r0, r0
 800e8bc:	e7a8      	b.n	800e810 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800e8be:	bf00      	nop
 800e8c0:	240248f0 	.word	0x240248f0
 800e8c4:	240248f2 	.word	0x240248f2
 800e8c8:	240248f4 	.word	0x240248f4
 800e8cc:	240248f6 	.word	0x240248f6
 800e8d0:	240248f8 	.word	0x240248f8

0800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800e8d4:	4b07      	ldr	r3, [pc, #28]	@ (800e8f4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800e8d6:	b510      	push	{r4, lr}
 800e8d8:	781b      	ldrb	r3, [r3, #0]
 800e8da:	4604      	mov	r4, r0
 800e8dc:	b13b      	cbz	r3, 800e8ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e8de:	6803      	ldr	r3, [r0, #0]
 800e8e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800e8e2:	4798      	blx	r3
 800e8e4:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800e8e6:	4283      	cmp	r3, r0
 800e8e8:	d101      	bne.n	800e8ee <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800e8ea:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800e8ec:	bd10      	pop	{r4, pc}
 800e8ee:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800e8f0:	e7fc      	b.n	800e8ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800e8f2:	bf00      	nop
 800e8f4:	240248fa 	.word	0x240248fa

0800e8f8 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800e8f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e8fc:	461d      	mov	r5, r3
 800e8fe:	b08a      	sub	sp, #40	@ 0x28
 800e900:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e904:	4690      	mov	r8, r2
 800e906:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800e90a:	2400      	movs	r4, #0
 800e90c:	4607      	mov	r7, r0
 800e90e:	fb06 8505 	mla	r5, r6, r5, r8
 800e912:	9404      	str	r4, [sp, #16]
 800e914:	f88d 4020 	strb.w	r4, [sp, #32]
 800e918:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800e91c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800e920:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e924:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800e928:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e92c:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e930:	f8ad 301c 	strh.w	r3, [sp, #28]
 800e934:	f7ff ffce 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e938:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e93c:	6878      	ldr	r0, [r7, #4]
 800e93e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e942:	a901      	add	r1, sp, #4
 800e944:	9505      	str	r5, [sp, #20]
 800e946:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e94a:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800e94e:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e952:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e956:	6803      	ldr	r3, [r0, #0]
 800e958:	685b      	ldr	r3, [r3, #4]
 800e95a:	4798      	blx	r3
 800e95c:	b00a      	add	sp, #40	@ 0x28
 800e95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800e962 <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800e962:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e966:	b08b      	sub	sp, #44	@ 0x2c
 800e968:	2400      	movs	r4, #0
 800e96a:	4691      	mov	r9, r2
 800e96c:	461d      	mov	r5, r3
 800e96e:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800e972:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800e976:	4688      	mov	r8, r1
 800e978:	4607      	mov	r7, r0
 800e97a:	9404      	str	r4, [sp, #16]
 800e97c:	fb06 9505 	mla	r5, r6, r5, r9
 800e980:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e984:	f7ff ffa6 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800e988:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800e98c:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800e990:	6878      	ldr	r0, [r7, #4]
 800e992:	f8ad 3018 	strh.w	r3, [sp, #24]
 800e996:	a901      	add	r1, sp, #4
 800e998:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800e99c:	9505      	str	r5, [sp, #20]
 800e99e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800e9a2:	f8ad 401c 	strh.w	r4, [sp, #28]
 800e9a6:	f8ad 601e 	strh.w	r6, [sp, #30]
 800e9aa:	f8cd 8010 	str.w	r8, [sp, #16]
 800e9ae:	f8ad 4020 	strh.w	r4, [sp, #32]
 800e9b2:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800e9b6:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800e9ba:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800e9be:	6803      	ldr	r3, [r0, #0]
 800e9c0:	685b      	ldr	r3, [r3, #4]
 800e9c2:	4798      	blx	r3
 800e9c4:	b00b      	add	sp, #44	@ 0x2c
 800e9c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800e9cc <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800e9cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e9d0:	b08a      	sub	sp, #40	@ 0x28
 800e9d2:	4698      	mov	r8, r3
 800e9d4:	2300      	movs	r3, #0
 800e9d6:	4606      	mov	r6, r0
 800e9d8:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800e9dc:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800e9e0:	2d0b      	cmp	r5, #11
 800e9e2:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800e9e6:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800e9ea:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800e9ee:	9304      	str	r3, [sp, #16]
 800e9f0:	d137      	bne.n	800ea62 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800e9f2:	2380      	movs	r3, #128	@ 0x80
 800e9f4:	f88d 0020 	strb.w	r0, [sp, #32]
 800e9f8:	4630      	mov	r0, r6
 800e9fa:	9203      	str	r2, [sp, #12]
 800e9fc:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800ea00:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800ea04:	f8ad 3018 	strh.w	r3, [sp, #24]
 800ea08:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800ea0c:	f8ad 301a 	strh.w	r3, [sp, #26]
 800ea10:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800ea14:	f8ad 301c 	strh.w	r3, [sp, #28]
 800ea18:	f7ff ff5c 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ea1c:	2c0b      	cmp	r4, #11
 800ea1e:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800ea22:	f8ad 701e 	strh.w	r7, [sp, #30]
 800ea26:	bf94      	ite	ls
 800ea28:	4b19      	ldrls	r3, [pc, #100]	@ (800ea90 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800ea2a:	2100      	movhi	r1, #0
 800ea2c:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800ea30:	bf98      	it	ls
 800ea32:	5d19      	ldrbls	r1, [r3, r4]
 800ea34:	fb02 8307 	mla	r3, r2, r7, r8
 800ea38:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800ea3c:	10c9      	asrs	r1, r1, #3
 800ea3e:	fb01 0003 	mla	r0, r1, r3, r0
 800ea42:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800ea46:	a901      	add	r1, sp, #4
 800ea48:	9005      	str	r0, [sp, #20]
 800ea4a:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800ea4e:	2300      	movs	r3, #0
 800ea50:	6870      	ldr	r0, [r6, #4]
 800ea52:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800ea56:	6803      	ldr	r3, [r0, #0]
 800ea58:	685b      	ldr	r3, [r3, #4]
 800ea5a:	4798      	blx	r3
 800ea5c:	b00a      	add	sp, #40	@ 0x28
 800ea5e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ea62:	2d02      	cmp	r5, #2
 800ea64:	d109      	bne.n	800ea7a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800ea66:	28ff      	cmp	r0, #255	@ 0xff
 800ea68:	d105      	bne.n	800ea76 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800ea6a:	f1bc 0f00 	cmp.w	ip, #0
 800ea6e:	bf14      	ite	ne
 800ea70:	2340      	movne	r3, #64	@ 0x40
 800ea72:	2320      	moveq	r3, #32
 800ea74:	e7be      	b.n	800e9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ea76:	2340      	movs	r3, #64	@ 0x40
 800ea78:	e7bc      	b.n	800e9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ea7a:	28ff      	cmp	r0, #255	@ 0xff
 800ea7c:	d105      	bne.n	800ea8a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800ea7e:	f1bc 0f00 	cmp.w	ip, #0
 800ea82:	bf14      	ite	ne
 800ea84:	2304      	movne	r3, #4
 800ea86:	2301      	moveq	r3, #1
 800ea88:	e7b4      	b.n	800e9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ea8a:	2304      	movs	r3, #4
 800ea8c:	e7b2      	b.n	800e9f4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800ea8e:	bf00      	nop
 800ea90:	08024478 	.word	0x08024478

0800ea94 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800ea94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea98:	b08b      	sub	sp, #44	@ 0x2c
 800ea9a:	461d      	mov	r5, r3
 800ea9c:	2400      	movs	r4, #0
 800ea9e:	4688      	mov	r8, r1
 800eaa0:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800eaa4:	4693      	mov	fp, r2
 800eaa6:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800eaaa:	4607      	mov	r7, r0
 800eaac:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800eab0:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800eab4:	9404      	str	r4, [sp, #16]
 800eab6:	bf14      	ite	ne
 800eab8:	2308      	movne	r3, #8
 800eaba:	2302      	moveq	r3, #2
 800eabc:	fb05 b50a 	mla	r5, r5, sl, fp
 800eac0:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800eac4:	f7ff ff06 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eac8:	2e0b      	cmp	r6, #11
 800eaca:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800eace:	a901      	add	r1, sp, #4
 800ead0:	bf98      	it	ls
 800ead2:	4b13      	ldrls	r3, [pc, #76]	@ (800eb20 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800ead4:	f8ad a01e 	strh.w	sl, [sp, #30]
 800ead8:	bf98      	it	ls
 800eada:	5d9c      	ldrbls	r4, [r3, r6]
 800eadc:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800eae0:	10e4      	asrs	r4, r4, #3
 800eae2:	f8cd 8010 	str.w	r8, [sp, #16]
 800eae6:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eaea:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800eaee:	fb04 0405 	mla	r4, r4, r5, r0
 800eaf2:	6878      	ldr	r0, [r7, #4]
 800eaf4:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eaf8:	2300      	movs	r3, #0
 800eafa:	9405      	str	r4, [sp, #20]
 800eafc:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb00:	f88d 9020 	strb.w	r9, [sp, #32]
 800eb04:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800eb08:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800eb0c:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800eb10:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800eb14:	6803      	ldr	r3, [r0, #0]
 800eb16:	685b      	ldr	r3, [r3, #4]
 800eb18:	4798      	blx	r3
 800eb1a:	b00b      	add	sp, #44	@ 0x2c
 800eb1c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb20:	08024478 	.word	0x08024478

0800eb24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800eb24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eb28:	461e      	mov	r6, r3
 800eb2a:	4b0a      	ldr	r3, [pc, #40]	@ (800eb54 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800eb2c:	460f      	mov	r7, r1
 800eb2e:	4690      	mov	r8, r2
 800eb30:	881d      	ldrh	r5, [r3, #0]
 800eb32:	f7f5 fa7d 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800eb3a:	4798      	blx	r3
 800eb3c:	280b      	cmp	r0, #11
 800eb3e:	bf96      	itet	ls
 800eb40:	4b05      	ldrls	r3, [pc, #20]	@ (800eb58 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800eb42:	2400      	movhi	r4, #0
 800eb44:	5c1c      	ldrbls	r4, [r3, r0]
 800eb46:	fb08 7005 	mla	r0, r8, r5, r7
 800eb4a:	10e4      	asrs	r4, r4, #3
 800eb4c:	fb04 6000 	mla	r0, r4, r0, r6
 800eb50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eb54:	240248f6 	.word	0x240248f6
 800eb58:	08024478 	.word	0x08024478

0800eb5c <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800eb5c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800eb5e:	b08b      	sub	sp, #44	@ 0x2c
 800eb60:	461f      	mov	r7, r3
 800eb62:	4604      	mov	r4, r0
 800eb64:	4616      	mov	r6, r2
 800eb66:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800eb6a:	2500      	movs	r5, #0
 800eb6c:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800eb70:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800eb74:	9504      	str	r5, [sp, #16]
 800eb76:	f8ad 3018 	strh.w	r3, [sp, #24]
 800eb7a:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800eb7e:	f8ad 301a 	strh.w	r3, [sp, #26]
 800eb82:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800eb86:	f8ad 301c 	strh.w	r3, [sp, #28]
 800eb8a:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800eb8e:	f88d 3020 	strb.w	r3, [sp, #32]
 800eb92:	f7ff fe9f 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800eb96:	463a      	mov	r2, r7
 800eb98:	4631      	mov	r1, r6
 800eb9a:	4603      	mov	r3, r0
 800eb9c:	4620      	mov	r0, r4
 800eb9e:	f7ff ffc1 	bl	800eb24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800eba2:	4b0e      	ldr	r3, [pc, #56]	@ (800ebdc <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800eba4:	9005      	str	r0, [sp, #20]
 800eba6:	881b      	ldrh	r3, [r3, #0]
 800eba8:	f8ad 301e 	strh.w	r3, [sp, #30]
 800ebac:	f7f5 fa40 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800ebb0:	6803      	ldr	r3, [r0, #0]
 800ebb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ebb4:	4798      	blx	r3
 800ebb6:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800ebb8:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800ebbc:	a901      	add	r1, sp, #4
 800ebbe:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800ebc2:	9304      	str	r3, [sp, #16]
 800ebc4:	6860      	ldr	r0, [r4, #4]
 800ebc6:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800ebca:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800ebce:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800ebd2:	6803      	ldr	r3, [r0, #0]
 800ebd4:	685b      	ldr	r3, [r3, #4]
 800ebd6:	4798      	blx	r3
 800ebd8:	b00b      	add	sp, #44	@ 0x2c
 800ebda:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ebdc:	240248f6 	.word	0x240248f6

0800ebe0 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800ebe0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ebe2:	b08d      	sub	sp, #52	@ 0x34
 800ebe4:	2501      	movs	r5, #1
 800ebe6:	4604      	mov	r4, r0
 800ebe8:	466b      	mov	r3, sp
 800ebea:	9503      	str	r5, [sp, #12]
 800ebec:	e883 0006 	stmia.w	r3, {r1, r2}
 800ebf0:	2300      	movs	r3, #0
 800ebf2:	f8bd 6000 	ldrh.w	r6, [sp]
 800ebf6:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800ebfa:	9306      	str	r3, [sp, #24]
 800ebfc:	6803      	ldr	r3, [r0, #0]
 800ebfe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec00:	4798      	blx	r3
 800ec02:	463a      	mov	r2, r7
 800ec04:	4631      	mov	r1, r6
 800ec06:	4603      	mov	r3, r0
 800ec08:	4620      	mov	r0, r4
 800ec0a:	f7ff ff8b 	bl	800eb24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ec0e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800ec10:	9004      	str	r0, [sp, #16]
 800ec12:	9307      	str	r3, [sp, #28]
 800ec14:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ec18:	f8ad 3020 	strh.w	r3, [sp, #32]
 800ec1c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800ec20:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800ec24:	4b0e      	ldr	r3, [pc, #56]	@ (800ec60 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800ec26:	881b      	ldrh	r3, [r3, #0]
 800ec28:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800ec2c:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800ec30:	f7f5 f9fe 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800ec34:	6803      	ldr	r3, [r0, #0]
 800ec36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec38:	4798      	blx	r3
 800ec3a:	23ff      	movs	r3, #255	@ 0xff
 800ec3c:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800ec40:	a903      	add	r1, sp, #12
 800ec42:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800ec46:	6860      	ldr	r0, [r4, #4]
 800ec48:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800ec4c:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800ec50:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800ec54:	6803      	ldr	r3, [r0, #0]
 800ec56:	685b      	ldr	r3, [r3, #4]
 800ec58:	4798      	blx	r3
 800ec5a:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800ec5c:	b00d      	add	sp, #52	@ 0x34
 800ec5e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ec60:	240248f6 	.word	0x240248f6

0800ec64 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800ec64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ec68:	b08c      	sub	sp, #48	@ 0x30
 800ec6a:	461e      	mov	r6, r3
 800ec6c:	2300      	movs	r3, #0
 800ec6e:	4604      	mov	r4, r0
 800ec70:	466d      	mov	r5, sp
 800ec72:	9306      	str	r3, [sp, #24]
 800ec74:	6803      	ldr	r3, [r0, #0]
 800ec76:	e885 0006 	stmia.w	r5, {r1, r2}
 800ec7a:	2501      	movs	r5, #1
 800ec7c:	f8bd 7000 	ldrh.w	r7, [sp]
 800ec80:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800ec84:	9503      	str	r5, [sp, #12]
 800ec86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec88:	4798      	blx	r3
 800ec8a:	4642      	mov	r2, r8
 800ec8c:	4639      	mov	r1, r7
 800ec8e:	4603      	mov	r3, r0
 800ec90:	4620      	mov	r0, r4
 800ec92:	f7ff ff47 	bl	800eb24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ec96:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800ec9a:	9004      	str	r0, [sp, #16]
 800ec9c:	f8ad 3020 	strh.w	r3, [sp, #32]
 800eca0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800eca4:	9607      	str	r6, [sp, #28]
 800eca6:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800ecaa:	4b10      	ldr	r3, [pc, #64]	@ (800ecec <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800ecac:	881b      	ldrh	r3, [r3, #0]
 800ecae:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800ecb2:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800ecb4:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800ecb8:	f7f5 f9ba 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 800ecbc:	6803      	ldr	r3, [r0, #0]
 800ecbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ecc0:	4798      	blx	r3
 800ecc2:	23ff      	movs	r3, #255	@ 0xff
 800ecc4:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800ecc8:	a903      	add	r1, sp, #12
 800ecca:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800ecce:	6860      	ldr	r0, [r4, #4]
 800ecd0:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800ecd4:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800ecd8:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800ecdc:	6803      	ldr	r3, [r0, #0]
 800ecde:	685b      	ldr	r3, [r3, #4]
 800ece0:	4798      	blx	r3
 800ece2:	4630      	mov	r0, r6
 800ece4:	b00c      	add	sp, #48	@ 0x30
 800ece6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ecea:	bf00      	nop
 800ecec:	240248f6 	.word	0x240248f6

0800ecf0 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800ecf0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ecf2:	b085      	sub	sp, #20
 800ecf4:	4605      	mov	r5, r0
 800ecf6:	ac02      	add	r4, sp, #8
 800ecf8:	e884 0006 	stmia.w	r4, {r1, r2}
 800ecfc:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800ed00:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800ed04:	f7ff fde6 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed08:	4631      	mov	r1, r6
 800ed0a:	4603      	mov	r3, r0
 800ed0c:	463a      	mov	r2, r7
 800ed0e:	4628      	mov	r0, r5
 800ed10:	f7ff ff08 	bl	800eb24 <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800ed14:	4a05      	ldr	r2, [pc, #20]	@ (800ed2c <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800ed16:	682b      	ldr	r3, [r5, #0]
 800ed18:	8812      	ldrh	r2, [r2, #0]
 800ed1a:	9200      	str	r2, [sp, #0]
 800ed1c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800ed1e:	4603      	mov	r3, r0
 800ed20:	4628      	mov	r0, r5
 800ed22:	e894 0006 	ldmia.w	r4, {r1, r2}
 800ed26:	47b0      	blx	r6
 800ed28:	b005      	add	sp, #20
 800ed2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ed2c:	240248f6 	.word	0x240248f6

0800ed30 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800ed30:	b570      	push	{r4, r5, r6, lr}
 800ed32:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800ed36:	4604      	mov	r4, r0
 800ed38:	b19b      	cbz	r3, 800ed62 <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800ed3a:	2002      	movs	r0, #2
 800ed3c:	f7f3 f8d8 	bl	8001ef0 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800ed40:	2300      	movs	r3, #0
 800ed42:	4620      	mov	r0, r4
 800ed44:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800ed48:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800ed4c:	6823      	ldr	r3, [r4, #0]
 800ed4e:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800ed52:	f7ff fdbf 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800ed56:	4601      	mov	r1, r0
 800ed58:	4620      	mov	r0, r4
 800ed5a:	462b      	mov	r3, r5
 800ed5c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ed60:	4718      	bx	r3
 800ed62:	bd70      	pop	{r4, r5, r6, pc}

0800ed64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800ed64:	b538      	push	{r3, r4, r5, lr}
 800ed66:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800ed6a:	4604      	mov	r4, r0
 800ed6c:	460d      	mov	r5, r1
 800ed6e:	428b      	cmp	r3, r1
 800ed70:	d006      	beq.n	800ed80 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800ed72:	6803      	ldr	r3, [r0, #0]
 800ed74:	b929      	cbnz	r1, 800ed82 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800ed76:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800ed7a:	4798      	blx	r3
 800ed7c:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800ed80:	bd38      	pop	{r3, r4, r5, pc}
 800ed82:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800ed86:	e7f8      	b.n	800ed7a <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800ed88 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800ed88:	4b0d      	ldr	r3, [pc, #52]	@ (800edc0 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800ed8a:	b510      	push	{r4, lr}
 800ed8c:	781b      	ldrb	r3, [r3, #0]
 800ed8e:	4604      	mov	r4, r0
 800ed90:	b95b      	cbnz	r3, 800edaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ed92:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800ed96:	2b02      	cmp	r3, #2
 800ed98:	d007      	beq.n	800edaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800ed9a:	6840      	ldr	r0, [r0, #4]
 800ed9c:	f000 f91a 	bl	800efd4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800eda0:	b118      	cbz	r0, 800edaa <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800eda2:	6862      	ldr	r2, [r4, #4]
 800eda4:	7a53      	ldrb	r3, [r2, #9]
 800eda6:	2b00      	cmp	r3, #0
 800eda8:	d0fc      	beq.n	800eda4 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800edaa:	f7f4 f89f 	bl	8002eec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800edae:	4620      	mov	r0, r4
 800edb0:	2100      	movs	r1, #0
 800edb2:	f7ff ffd7 	bl	800ed64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800edb6:	4620      	mov	r0, r4
 800edb8:	f7ff fd8c 	bl	800e8d4 <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800edbc:	bd10      	pop	{r4, pc}
 800edbe:	bf00      	nop
 800edc0:	240248fa 	.word	0x240248fa

0800edc4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800edc4:	b570      	push	{r4, r5, r6, lr}
 800edc6:	4604      	mov	r4, r0
 800edc8:	6803      	ldr	r3, [r0, #0]
 800edca:	b919      	cbnz	r1, 800edd4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800edcc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800edce:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800edd2:	4718      	bx	r3
 800edd4:	2200      	movs	r2, #0
 800edd6:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800edda:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800edde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ede0:	4798      	blx	r3
 800ede2:	6863      	ldr	r3, [r4, #4]
 800ede4:	2101      	movs	r1, #1
 800ede6:	4605      	mov	r5, r0
 800ede8:	4620      	mov	r0, r4
 800edea:	7299      	strb	r1, [r3, #10]
 800edec:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800edf0:	f7ff ffb8 	bl	800ed64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800edf4:	4628      	mov	r0, r5
 800edf6:	bd70      	pop	{r4, r5, r6, pc}

0800edf8 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800edf8:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800edfc:	1a13      	subs	r3, r2, r0
 800edfe:	4258      	negs	r0, r3
 800ee00:	4158      	adcs	r0, r3
 800ee02:	4770      	bx	lr

0800ee04 <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800ee04:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800ee08:	1a9b      	subs	r3, r3, r2
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	bfdc      	itt	le
 800ee0e:	6882      	ldrle	r2, [r0, #8]
 800ee10:	189b      	addle	r3, r3, r2
 800ee12:	2b01      	cmp	r3, #1
 800ee14:	bfcc      	ite	gt
 800ee16:	2000      	movgt	r0, #0
 800ee18:	2001      	movle	r0, #1
 800ee1a:	4770      	bx	lr

0800ee1c <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800ee1c:	6902      	ldr	r2, [r0, #16]
 800ee1e:	6843      	ldr	r3, [r0, #4]
 800ee20:	2024      	movs	r0, #36	@ 0x24
 800ee22:	fb00 3002 	mla	r0, r0, r2, r3
 800ee26:	4770      	bx	lr

0800ee28 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800ee28:	6803      	ldr	r3, [r0, #0]
 800ee2a:	691b      	ldr	r3, [r3, #16]
 800ee2c:	4718      	bx	r3

0800ee2e <_ZN8touchgfx13DMA_Interface7executeEv>:
 800ee2e:	2301      	movs	r3, #1
 800ee30:	b570      	push	{r4, r5, r6, lr}
 800ee32:	7203      	strb	r3, [r0, #8]
 800ee34:	4604      	mov	r4, r0
 800ee36:	6840      	ldr	r0, [r0, #4]
 800ee38:	6803      	ldr	r3, [r0, #0]
 800ee3a:	699b      	ldr	r3, [r3, #24]
 800ee3c:	4798      	blx	r3
 800ee3e:	6803      	ldr	r3, [r0, #0]
 800ee40:	4605      	mov	r5, r0
 800ee42:	2b40      	cmp	r3, #64	@ 0x40
 800ee44:	d00c      	beq.n	800ee60 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ee46:	d810      	bhi.n	800ee6a <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800ee48:	2b04      	cmp	r3, #4
 800ee4a:	d01d      	beq.n	800ee88 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800ee4c:	d804      	bhi.n	800ee58 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800ee4e:	2b01      	cmp	r3, #1
 800ee50:	d006      	beq.n	800ee60 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ee52:	2b02      	cmp	r3, #2
 800ee54:	d02c      	beq.n	800eeb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800ee56:	bd70      	pop	{r4, r5, r6, pc}
 800ee58:	2b08      	cmp	r3, #8
 800ee5a:	d01d      	beq.n	800ee98 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800ee5c:	2b20      	cmp	r3, #32
 800ee5e:	d1fa      	bne.n	800ee56 <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800ee60:	6823      	ldr	r3, [r4, #0]
 800ee62:	4620      	mov	r0, r4
 800ee64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ee66:	4798      	blx	r3
 800ee68:	e013      	b.n	800ee92 <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800ee6a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800ee6e:	d0f7      	beq.n	800ee60 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ee70:	d804      	bhi.n	800ee7c <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800ee72:	2b80      	cmp	r3, #128	@ 0x80
 800ee74:	d0f4      	beq.n	800ee60 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ee76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee7a:	e7f0      	b.n	800ee5e <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800ee7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800ee80:	d0ee      	beq.n	800ee60 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800ee82:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800ee86:	e7e5      	b.n	800ee54 <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800ee88:	6823      	ldr	r3, [r4, #0]
 800ee8a:	7f01      	ldrb	r1, [r0, #28]
 800ee8c:	4620      	mov	r0, r4
 800ee8e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ee90:	4798      	blx	r3
 800ee92:	6823      	ldr	r3, [r4, #0]
 800ee94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ee96:	e006      	b.n	800eea6 <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800ee98:	6823      	ldr	r3, [r4, #0]
 800ee9a:	7f01      	ldrb	r1, [r0, #28]
 800ee9c:	4620      	mov	r0, r4
 800ee9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eea0:	4798      	blx	r3
 800eea2:	6823      	ldr	r3, [r4, #0]
 800eea4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800eea6:	4629      	mov	r1, r5
 800eea8:	4620      	mov	r0, r4
 800eeaa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800eeae:	4718      	bx	r3
 800eeb0:	6823      	ldr	r3, [r4, #0]
 800eeb2:	4620      	mov	r0, r4
 800eeb4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800eeb6:	4798      	blx	r3
 800eeb8:	e7f3      	b.n	800eea2 <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800eeba <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800eeba:	4770      	bx	lr

0800eebc <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800eebc:	4770      	bx	lr

0800eebe <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800eebe:	4770      	bx	lr

0800eec0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800eec0:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800eec4:	b510      	push	{r4, lr}
 800eec6:	1ad2      	subs	r2, r2, r3
 800eec8:	2a00      	cmp	r2, #0
 800eeca:	bfdc      	itt	le
 800eecc:	6884      	ldrle	r4, [r0, #8]
 800eece:	1912      	addle	r2, r2, r4
 800eed0:	2a01      	cmp	r2, #1
 800eed2:	dd16      	ble.n	800ef02 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800eed4:	6842      	ldr	r2, [r0, #4]
 800eed6:	2424      	movs	r4, #36	@ 0x24
 800eed8:	fb04 2303 	mla	r3, r4, r3, r2
 800eedc:	f101 0220 	add.w	r2, r1, #32
 800eee0:	f851 4b04 	ldr.w	r4, [r1], #4
 800eee4:	4291      	cmp	r1, r2
 800eee6:	f843 4b04 	str.w	r4, [r3], #4
 800eeea:	d1f9      	bne.n	800eee0 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800eeec:	780a      	ldrb	r2, [r1, #0]
 800eeee:	701a      	strb	r2, [r3, #0]
 800eef0:	68c3      	ldr	r3, [r0, #12]
 800eef2:	6882      	ldr	r2, [r0, #8]
 800eef4:	f3bf 8f5b 	dmb	ish
 800eef8:	3301      	adds	r3, #1
 800eefa:	429a      	cmp	r2, r3
 800eefc:	bfd8      	it	le
 800eefe:	1a9b      	suble	r3, r3, r2
 800ef00:	60c3      	str	r3, [r0, #12]
 800ef02:	bd10      	pop	{r4, pc}

0800ef04 <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800ef04:	6903      	ldr	r3, [r0, #16]
 800ef06:	6882      	ldr	r2, [r0, #8]
 800ef08:	f3bf 8f5b 	dmb	ish
 800ef0c:	3301      	adds	r3, #1
 800ef0e:	429a      	cmp	r2, r3
 800ef10:	bfd8      	it	le
 800ef12:	1a9b      	suble	r3, r3, r2
 800ef14:	6103      	str	r3, [r0, #16]
 800ef16:	4770      	bx	lr

0800ef18 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800ef18:	b570      	push	{r4, r5, r6, lr}
 800ef1a:	4604      	mov	r4, r0
 800ef1c:	460e      	mov	r6, r1
 800ef1e:	6860      	ldr	r0, [r4, #4]
 800ef20:	6803      	ldr	r3, [r0, #0]
 800ef22:	685b      	ldr	r3, [r3, #4]
 800ef24:	4798      	blx	r3
 800ef26:	2800      	cmp	r0, #0
 800ef28:	d1f9      	bne.n	800ef1e <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800ef2a:	4d0d      	ldr	r5, [pc, #52]	@ (800ef60 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800ef2c:	6828      	ldr	r0, [r5, #0]
 800ef2e:	6803      	ldr	r3, [r0, #0]
 800ef30:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800ef32:	4798      	blx	r3
 800ef34:	f7f3 ffe8 	bl	8002f08 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800ef38:	6828      	ldr	r0, [r5, #0]
 800ef3a:	2101      	movs	r1, #1
 800ef3c:	f7ff ff12 	bl	800ed64 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800ef40:	6860      	ldr	r0, [r4, #4]
 800ef42:	4631      	mov	r1, r6
 800ef44:	6803      	ldr	r3, [r0, #0]
 800ef46:	689b      	ldr	r3, [r3, #8]
 800ef48:	4798      	blx	r3
 800ef4a:	6823      	ldr	r3, [r4, #0]
 800ef4c:	4620      	mov	r0, r4
 800ef4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef50:	4798      	blx	r3
 800ef52:	6828      	ldr	r0, [r5, #0]
 800ef54:	6803      	ldr	r3, [r0, #0]
 800ef56:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ef5a:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ef5c:	4718      	bx	r3
 800ef5e:	bf00      	nop
 800ef60:	240248fc 	.word	0x240248fc

0800ef64 <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800ef64:	b508      	push	{r3, lr}
 800ef66:	f7f3 ffc1 	bl	8002eec <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800ef6a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800ef6e:	f7f3 bfc5 	b.w	8002efc <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800ef72 <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800ef72:	b510      	push	{r4, lr}
 800ef74:	4604      	mov	r4, r0
 800ef76:	2114      	movs	r1, #20
 800ef78:	f011 f8c1 	bl	80200fe <_ZdlPvj>
 800ef7c:	4620      	mov	r0, r4
 800ef7e:	bd10      	pop	{r4, pc}

0800ef80 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800ef80:	b570      	push	{r4, r5, r6, lr}
 800ef82:	4604      	mov	r4, r0
 800ef84:	6840      	ldr	r0, [r0, #4]
 800ef86:	6803      	ldr	r3, [r0, #0]
 800ef88:	681b      	ldr	r3, [r3, #0]
 800ef8a:	4798      	blx	r3
 800ef8c:	4605      	mov	r5, r0
 800ef8e:	b930      	cbnz	r0, 800ef9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ef90:	7a23      	ldrb	r3, [r4, #8]
 800ef92:	b123      	cbz	r3, 800ef9e <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800ef94:	6860      	ldr	r0, [r4, #4]
 800ef96:	6803      	ldr	r3, [r0, #0]
 800ef98:	695b      	ldr	r3, [r3, #20]
 800ef9a:	4798      	blx	r3
 800ef9c:	7225      	strb	r5, [r4, #8]
 800ef9e:	6860      	ldr	r0, [r4, #4]
 800efa0:	6803      	ldr	r3, [r0, #0]
 800efa2:	681b      	ldr	r3, [r3, #0]
 800efa4:	4798      	blx	r3
 800efa6:	b928      	cbnz	r0, 800efb4 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800efa8:	6823      	ldr	r3, [r4, #0]
 800efaa:	4620      	mov	r0, r4
 800efac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800efae:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb2:	4718      	bx	r3
 800efb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800efb8:	f7f3 bfae 	b.w	8002f18 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800efbc <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800efbc:	b510      	push	{r4, lr}
 800efbe:	6082      	str	r2, [r0, #8]
 800efc0:	2200      	movs	r2, #0
 800efc2:	4c03      	ldr	r4, [pc, #12]	@ (800efd0 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800efc4:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800efc8:	e9c0 4100 	strd	r4, r1, [r0]
 800efcc:	bd10      	pop	{r4, pc}
 800efce:	bf00      	nop
 800efd0:	0802448c 	.word	0x0802448c

0800efd4 <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800efd4:	6840      	ldr	r0, [r0, #4]
 800efd6:	6803      	ldr	r3, [r0, #0]
 800efd8:	681b      	ldr	r3, [r3, #0]
 800efda:	4718      	bx	r3

0800efdc <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800efdc:	2300      	movs	r3, #0
 800efde:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800efe0:	8503      	strh	r3, [r0, #40]	@ 0x28
 800efe2:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800efe4:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800efe6:	6980      	ldr	r0, [r0, #24]
 800efe8:	b110      	cbz	r0, 800eff0 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800efea:	6803      	ldr	r3, [r0, #0]
 800efec:	691b      	ldr	r3, [r3, #16]
 800efee:	4718      	bx	r3
 800eff0:	4770      	bx	lr

0800eff2 <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800eff2:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800eff6:	4770      	bx	lr

0800eff8 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800eff8:	b538      	push	{r3, r4, r5, lr}
 800effa:	0e0b      	lsrs	r3, r1, #24
 800effc:	4604      	mov	r4, r0
 800effe:	460d      	mov	r5, r1
 800f000:	7783      	strb	r3, [r0, #30]
 800f002:	6803      	ldr	r3, [r0, #0]
 800f004:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800f006:	4798      	blx	r3
 800f008:	6803      	ldr	r3, [r0, #0]
 800f00a:	4629      	mov	r1, r5
 800f00c:	689b      	ldr	r3, [r3, #8]
 800f00e:	4798      	blx	r3
 800f010:	6823      	ldr	r3, [r4, #0]
 800f012:	4620      	mov	r0, r4
 800f014:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f016:	4798      	blx	r3
 800f018:	61a0      	str	r0, [r4, #24]
 800f01a:	bd38      	pop	{r3, r4, r5, pc}

0800f01c <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800f01c:	7741      	strb	r1, [r0, #29]
 800f01e:	4770      	bx	lr

0800f020 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800f020:	b530      	push	{r4, r5, lr}
 800f022:	460d      	mov	r5, r1
 800f024:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800f028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f02a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f02c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800f02e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800f030:	682b      	ldr	r3, [r5, #0]
 800f032:	6023      	str	r3, [r4, #0]
 800f034:	bd30      	pop	{r4, r5, pc}

0800f036 <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800f036:	b538      	push	{r3, r4, r5, lr}
 800f038:	4604      	mov	r4, r0
 800f03a:	1d03      	adds	r3, r0, #4
 800f03c:	6808      	ldr	r0, [r1, #0]
 800f03e:	2500      	movs	r5, #0
 800f040:	6849      	ldr	r1, [r1, #4]
 800f042:	c303      	stmia	r3!, {r0, r1}
 800f044:	6813      	ldr	r3, [r2, #0]
 800f046:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800f04a:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800f04e:	6853      	ldr	r3, [r2, #4]
 800f050:	61a5      	str	r5, [r4, #24]
 800f052:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800f056:	f004 fdd3 	bl	8013c00 <_ZN8touchgfx9Matrix3x35resetEv>
 800f05a:	23ff      	movs	r3, #255	@ 0xff
 800f05c:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800f060:	7763      	strb	r3, [r4, #29]
 800f062:	77a3      	strb	r3, [r4, #30]
 800f064:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800f068:	6323      	str	r3, [r4, #48]	@ 0x30
 800f06a:	2301      	movs	r3, #1
 800f06c:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800f070:	bd38      	pop	{r3, r4, r5, pc}
	...

0800f074 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800f074:	ee70 7a41 	vsub.f32	s15, s0, s2
 800f078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f07c:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f080:	4605      	mov	r5, r0
 800f082:	ed2d 8b0a 	vpush	{d8-d12}
 800f086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f08a:	b086      	sub	sp, #24
 800f08c:	eeb0 ba40 	vmov.f32	s22, s0
 800f090:	6802      	ldr	r2, [r0, #0]
 800f092:	eef0 ba60 	vmov.f32	s23, s1
 800f096:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800f09a:	eef0 aa41 	vmov.f32	s21, s2
 800f09e:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800f0a0:	eeb0 aa61 	vmov.f32	s20, s3
 800f0a4:	eeb0 ca42 	vmov.f32	s24, s4
 800f0a8:	eef0 ca62 	vmov.f32	s25, s5
 800f0ac:	d112      	bne.n	800f0d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800f0ae:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800f0b2:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f0b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f0ba:	d10b      	bne.n	800f0d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800f0bc:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800f0c0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800f0c2:	3901      	subs	r1, #1
 800f0c4:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800f0c8:	b006      	add	sp, #24
 800f0ca:	ecbd 8b0a 	vpop	{d8-d12}
 800f0ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f0d2:	4710      	bx	r2
 800f0d4:	23ff      	movs	r3, #255	@ 0xff
 800f0d6:	4628      	mov	r0, r5
 800f0d8:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 800f0dc:	77ab      	strb	r3, [r5, #30]
 800f0de:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800f0e0:	4798      	blx	r3
 800f0e2:	eeb0 0a4b 	vmov.f32	s0, s22
 800f0e6:	eef0 0a6b 	vmov.f32	s1, s23
 800f0ea:	4604      	mov	r4, r0
 800f0ec:	4640      	mov	r0, r8
 800f0ee:	f004 fe36 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f0f2:	eef0 8a40 	vmov.f32	s17, s0
 800f0f6:	ed8d 0a00 	vstr	s0, [sp]
 800f0fa:	eeb0 0a6a 	vmov.f32	s0, s21
 800f0fe:	eef0 9a60 	vmov.f32	s19, s1
 800f102:	edcd 0a01 	vstr	s1, [sp, #4]
 800f106:	4640      	mov	r0, r8
 800f108:	eef0 0a4a 	vmov.f32	s1, s20
 800f10c:	f004 fe27 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f110:	eef4 8a40 	vcmp.f32	s17, s0
 800f114:	eeb0 8a40 	vmov.f32	s16, s0
 800f118:	ed8d 0a02 	vstr	s0, [sp, #8]
 800f11c:	eeb0 9a60 	vmov.f32	s18, s1
 800f120:	edcd 0a03 	vstr	s1, [sp, #12]
 800f124:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f128:	eef4 9a60 	vcmp.f32	s19, s1
 800f12c:	bf0c      	ite	eq
 800f12e:	2301      	moveq	r3, #1
 800f130:	2300      	movne	r3, #0
 800f132:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f136:	eef4 8a40 	vcmp.f32	s17, s0
 800f13a:	7463      	strb	r3, [r4, #17]
 800f13c:	bf0c      	ite	eq
 800f13e:	2301      	moveq	r3, #1
 800f140:	2300      	movne	r3, #0
 800f142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f146:	74a3      	strb	r3, [r4, #18]
 800f148:	d024      	beq.n	800f194 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f14a:	eef4 9a60 	vcmp.f32	s19, s1
 800f14e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f152:	d01f      	beq.n	800f194 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f154:	ee3a aa6b 	vsub.f32	s20, s20, s23
 800f158:	4640      	mov	r0, r8
 800f15a:	ee7a aacb 	vsub.f32	s21, s21, s22
 800f15e:	eeb0 0a4b 	vmov.f32	s0, s22
 800f162:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 800f166:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 800f16a:	eef0 0a6b 	vmov.f32	s1, s23
 800f16e:	eea7 0acc 	vfms.f32	s0, s15, s24
 800f172:	eeec 0a87 	vfma.f32	s1, s25, s14
 800f176:	f004 fdf2 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f17a:	ed8d 0a04 	vstr	s0, [sp, #16]
 800f17e:	ee30 0a68 	vsub.f32	s0, s0, s17
 800f182:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f186:	edcd 0a05 	vstr	s1, [sp, #20]
 800f18a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f18e:	d121      	bne.n	800f1d4 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 800f190:	2301      	movs	r3, #1
 800f192:	74a3      	strb	r3, [r4, #18]
 800f194:	7c63      	ldrb	r3, [r4, #17]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d051      	beq.n	800f23e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 800f19a:	ee39 7a69 	vsub.f32	s14, s18, s19
 800f19e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f294 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800f1a2:	eef4 9ac9 	vcmpe.f32	s19, s18
 800f1a6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f1aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1ae:	edc4 7a08 	vstr	s15, [r4, #32]
 800f1b2:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 800f1b6:	ee17 3a90 	vmov	r3, s15
 800f1ba:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 800f1be:	b21a      	sxth	r2, r3
 800f1c0:	ee17 3a90 	vmov	r3, s15
 800f1c4:	bf48      	it	mi
 800f1c6:	8122      	strhmi	r2, [r4, #8]
 800f1c8:	b21b      	sxth	r3, r3
 800f1ca:	bf56      	itet	pl
 800f1cc:	80e2      	strhpl	r2, [r4, #6]
 800f1ce:	80e3      	strhmi	r3, [r4, #6]
 800f1d0:	8123      	strhpl	r3, [r4, #8]
 800f1d2:	e02c      	b.n	800f22e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f1d4:	ee70 0ae9 	vsub.f32	s1, s1, s19
 800f1d8:	eec0 7a80 	vdiv.f32	s15, s1, s0
 800f1dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 800f1e0:	edc4 7a05 	vstr	s15, [r4, #20]
 800f1e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f1e8:	d102      	bne.n	800f1f0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 800f1ea:	2301      	movs	r3, #1
 800f1ec:	7463      	strb	r3, [r4, #17]
 800f1ee:	e7d1      	b.n	800f194 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 800f1f0:	eeb0 7a69 	vmov.f32	s14, s19
 800f1f4:	ee39 9a69 	vsub.f32	s18, s18, s19
 800f1f8:	ee38 8a68 	vsub.f32	s16, s16, s17
 800f1fc:	eea8 7ae7 	vfms.f32	s14, s17, s15
 800f200:	ed84 7a06 	vstr	s14, [r4, #24]
 800f204:	ee89 7a27 	vdiv.f32	s14, s18, s15
 800f208:	ee38 8a47 	vsub.f32	s16, s16, s14
 800f20c:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 800f298 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 800f210:	eec7 7a08 	vdiv.f32	s15, s14, s16
 800f214:	ed84 8a07 	vstr	s16, [r4, #28]
 800f218:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 800f21c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f220:	edc4 7a08 	vstr	s15, [r4, #32]
 800f224:	d503      	bpl.n	800f22e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f226:	eeb1 8a48 	vneg.f32	s16, s16
 800f22a:	ed84 8a07 	vstr	s16, [r4, #28]
 800f22e:	60e7      	str	r7, [r4, #12]
 800f230:	7426      	strb	r6, [r4, #16]
 800f232:	61ac      	str	r4, [r5, #24]
 800f234:	b006      	add	sp, #24
 800f236:	ecbd 8b0a 	vpop	{d8-d12}
 800f23a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f23e:	7ca3      	ldrb	r3, [r4, #18]
 800f240:	2b00      	cmp	r3, #0
 800f242:	d0f4      	beq.n	800f22e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f244:	ee38 7a68 	vsub.f32	s14, s16, s17
 800f248:	eddf 6a12 	vldr	s13, [pc, #72]	@ 800f294 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 800f24c:	eef4 8ac8 	vcmpe.f32	s17, s16
 800f250:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f254:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f258:	edc4 7a08 	vstr	s15, [r4, #32]
 800f25c:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 800f260:	ee17 3a90 	vmov	r3, s15
 800f264:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 800f268:	b21a      	sxth	r2, r3
 800f26a:	ee17 3a90 	vmov	r3, s15
 800f26e:	bf48      	it	mi
 800f270:	8122      	strhmi	r2, [r4, #8]
 800f272:	b21b      	sxth	r3, r3
 800f274:	bf56      	itet	pl
 800f276:	80e2      	strhpl	r2, [r4, #6]
 800f278:	80e3      	strhmi	r3, [r4, #6]
 800f27a:	8123      	strhpl	r3, [r4, #8]
 800f27c:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800f280:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 800f284:	1a9b      	subs	r3, r3, r2
 800f286:	ee07 3a90 	vmov	s15, r3
 800f28a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800f28e:	edc4 7a07 	vstr	s15, [r4, #28]
 800f292:	e7cc      	b.n	800f22e <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 800f294:	447ffffe 	.word	0x447ffffe
 800f298:	44800000 	.word	0x44800000

0800f29c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 800f29c:	b510      	push	{r4, lr}
 800f29e:	ed2d 8b02 	vpush	{d8}
 800f2a2:	eef0 8a62 	vmov.f32	s17, s5
 800f2a6:	2100      	movs	r1, #0
 800f2a8:	4604      	mov	r4, r0
 800f2aa:	eeb0 8a42 	vmov.f32	s16, s4
 800f2ae:	f010 fcb7 	bl	801fc20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 800f2b2:	eef0 7a68 	vmov.f32	s15, s17
 800f2b6:	6823      	ldr	r3, [r4, #0]
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	689b      	ldr	r3, [r3, #8]
 800f2bc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f2c0:	ee17 2a90 	vmov	r2, s15
 800f2c4:	eef0 7a48 	vmov.f32	s15, s16
 800f2c8:	ecbd 8b02 	vpop	{d8}
 800f2cc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f2d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f2d4:	ee17 1a90 	vmov	r1, s15
 800f2d8:	4718      	bx	r3

0800f2da <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 800f2da:	b510      	push	{r4, lr}
 800f2dc:	ed2d 8b02 	vpush	{d8}
 800f2e0:	eef0 8a63 	vmov.f32	s17, s7
 800f2e4:	2100      	movs	r1, #0
 800f2e6:	4604      	mov	r4, r0
 800f2e8:	eeb0 8a43 	vmov.f32	s16, s6
 800f2ec:	f010 fd5a 	bl	801fda4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 800f2f0:	eef0 7a68 	vmov.f32	s15, s17
 800f2f4:	6823      	ldr	r3, [r4, #0]
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	689b      	ldr	r3, [r3, #8]
 800f2fa:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f2fe:	ee17 2a90 	vmov	r2, s15
 800f302:	eef0 7a48 	vmov.f32	s15, s16
 800f306:	ecbd 8b02 	vpop	{d8}
 800f30a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f30e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f312:	ee17 1a90 	vmov	r1, s15
 800f316:	4718      	bx	r3

0800f318 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 800f318:	b513      	push	{r0, r1, r4, lr}
 800f31a:	4604      	mov	r4, r0
 800f31c:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f31e:	f004 fd1e 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f322:	eef0 7a60 	vmov.f32	s15, s1
 800f326:	4620      	mov	r0, r4
 800f328:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f32c:	ee17 2a90 	vmov	r2, s15
 800f330:	eef0 7a40 	vmov.f32	s15, s0
 800f334:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f338:	ee17 1a90 	vmov	r1, s15
 800f33c:	b002      	add	sp, #8
 800f33e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f342:	f010 bbc7 	b.w	801fad4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 800f346:	b513      	push	{r0, r1, r4, lr}
 800f348:	4604      	mov	r4, r0
 800f34a:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 800f34c:	f004 fd07 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800f350:	eef0 7a60 	vmov.f32	s15, s1
 800f354:	4620      	mov	r0, r4
 800f356:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f35a:	ee17 2a90 	vmov	r2, s15
 800f35e:	eef0 7a40 	vmov.f32	s15, s0
 800f362:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800f366:	ee17 1a90 	vmov	r1, s15
 800f36a:	b002      	add	sp, #8
 800f36c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f370:	f010 bbfd 	b.w	801fb6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0800f374 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 800f374:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f376:	2400      	movs	r4, #0
 800f378:	9f07      	ldr	r7, [sp, #28]
 800f37a:	f04f 0e01 	mov.w	lr, #1
 800f37e:	4626      	mov	r6, r4
 800f380:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 800f384:	4463      	add	r3, ip
 800f386:	4563      	cmp	r3, ip
 800f388:	d02d      	beq.n	800f3e6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 800f38a:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 800f38e:	2d06      	cmp	r5, #6
 800f390:	d8f9      	bhi.n	800f386 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f392:	fa0e f505 	lsl.w	r5, lr, r5
 800f396:	f015 0f66 	tst.w	r5, #102	@ 0x66
 800f39a:	d10d      	bne.n	800f3b8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 800f39c:	f015 0f10 	tst.w	r5, #16
 800f3a0:	d117      	bne.n	800f3d2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 800f3a2:	072d      	lsls	r5, r5, #28
 800f3a4:	d5ef      	bpl.n	800f386 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f3a6:	3801      	subs	r0, #1
 800f3a8:	b91e      	cbnz	r6, 800f3b2 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 800f3aa:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 800f3ae:	682d      	ldr	r5, [r5, #0]
 800f3b0:	600d      	str	r5, [r1, #0]
 800f3b2:	b96c      	cbnz	r4, 800f3d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f3b4:	2601      	movs	r6, #1
 800f3b6:	e7e6      	b.n	800f386 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f3b8:	b926      	cbnz	r6, 800f3c4 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 800f3ba:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 800f3be:	f853 3c08 	ldr.w	r3, [r3, #-8]
 800f3c2:	600b      	str	r3, [r1, #0]
 800f3c4:	b924      	cbnz	r4, 800f3d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f3c6:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 800f3ca:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800f3ce:	6013      	str	r3, [r2, #0]
 800f3d0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f3d2:	3801      	subs	r0, #1
 800f3d4:	b91c      	cbnz	r4, 800f3de <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 800f3d6:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 800f3da:	6824      	ldr	r4, [r4, #0]
 800f3dc:	6014      	str	r4, [r2, #0]
 800f3de:	2e00      	cmp	r6, #0
 800f3e0:	d1f6      	bne.n	800f3d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f3e2:	2401      	movs	r4, #1
 800f3e4:	e7cf      	b.n	800f386 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 800f3e6:	b90e      	cbnz	r6, 800f3ec <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 800f3e8:	2300      	movs	r3, #0
 800f3ea:	600b      	str	r3, [r1, #0]
 800f3ec:	2c00      	cmp	r4, #0
 800f3ee:	d1ef      	bne.n	800f3d0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 800f3f0:	2300      	movs	r3, #0
 800f3f2:	e7ec      	b.n	800f3ce <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0800f3f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 800f3f4:	b538      	push	{r3, r4, r5, lr}
 800f3f6:	ed2d 8b0a 	vpush	{d8-d12}
 800f3fa:	eef0 ba40 	vmov.f32	s23, s0
 800f3fe:	4604      	mov	r4, r0
 800f400:	eeb0 ca60 	vmov.f32	s24, s1
 800f404:	460d      	mov	r5, r1
 800f406:	eef0 aa41 	vmov.f32	s21, s2
 800f40a:	eeb0 ba61 	vmov.f32	s22, s3
 800f40e:	eeb0 9a42 	vmov.f32	s18, s4
 800f412:	eef0 9a62 	vmov.f32	s19, s5
 800f416:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 800f41a:	ee7b 8a29 	vadd.f32	s17, s22, s19
 800f41e:	ee3a 8a89 	vadd.f32	s16, s21, s18
 800f422:	ee68 8a8a 	vmul.f32	s17, s17, s20
 800f426:	ee28 8a0a 	vmul.f32	s16, s16, s20
 800f42a:	ee3c 0a68 	vsub.f32	s0, s24, s17
 800f42e:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 800f432:	ee20 0a00 	vmul.f32	s0, s0, s0
 800f436:	eea7 0aa7 	vfma.f32	s0, s15, s15
 800f43a:	f010 fe8b 	bl	8020154 <sqrtf>
 800f43e:	eeb5 0a40 	vcmp.f32	s0, #0.0
 800f442:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f446:	d12e      	bne.n	800f4a6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 800f448:	ee79 7a6a 	vsub.f32	s15, s18, s21
 800f44c:	ee39 7acb 	vsub.f32	s14, s19, s22
 800f450:	eeb0 8a6a 	vmov.f32	s16, s21
 800f454:	eef0 8a4b 	vmov.f32	s17, s22
 800f458:	eea7 8a8a 	vfma.f32	s16, s15, s20
 800f45c:	eee7 8a0a 	vfma.f32	s17, s14, s20
 800f460:	eea7 8a0a 	vfma.f32	s16, s14, s20
 800f464:	eee7 8aca 	vfms.f32	s17, s15, s20
 800f468:	2d02      	cmp	r5, #2
 800f46a:	dc2f      	bgt.n	800f4cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 800f46c:	3501      	adds	r5, #1
 800f46e:	eef0 1a4b 	vmov.f32	s3, s22
 800f472:	eeb0 1a6a 	vmov.f32	s2, s21
 800f476:	4620      	mov	r0, r4
 800f478:	4629      	mov	r1, r5
 800f47a:	eef0 2a68 	vmov.f32	s5, s17
 800f47e:	eeb0 2a48 	vmov.f32	s4, s16
 800f482:	eef0 0a4c 	vmov.f32	s1, s24
 800f486:	eeb0 0a6b 	vmov.f32	s0, s23
 800f48a:	f7ff ffb3 	bl	800f3f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f48e:	eef0 0a68 	vmov.f32	s1, s17
 800f492:	eeb0 0a48 	vmov.f32	s0, s16
 800f496:	4620      	mov	r0, r4
 800f498:	f7ff ff55 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f49c:	eeb0 ba68 	vmov.f32	s22, s17
 800f4a0:	eef0 aa48 	vmov.f32	s21, s16
 800f4a4:	e7b9      	b.n	800f41a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 800f4a6:	ee38 8a6b 	vsub.f32	s16, s16, s23
 800f4aa:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f4ae:	ee78 8acc 	vsub.f32	s17, s17, s24
 800f4b2:	ee28 7a27 	vmul.f32	s14, s16, s15
 800f4b6:	ee68 7aa7 	vmul.f32	s15, s17, s15
 800f4ba:	ee87 8a00 	vdiv.f32	s16, s14, s0
 800f4be:	eec7 8a80 	vdiv.f32	s17, s15, s0
 800f4c2:	ee3b 8a88 	vadd.f32	s16, s23, s16
 800f4c6:	ee7c 8a28 	vadd.f32	s17, s24, s17
 800f4ca:	e7cd      	b.n	800f468 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 800f4cc:	eef0 0a68 	vmov.f32	s1, s17
 800f4d0:	4620      	mov	r0, r4
 800f4d2:	eeb0 0a48 	vmov.f32	s0, s16
 800f4d6:	f7ff ff36 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f4da:	ecbd 8b0a 	vpop	{d8-d12}
 800f4de:	bd38      	pop	{r3, r4, r5, pc}

0800f4e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 800f4e0:	b510      	push	{r4, lr}
 800f4e2:	ed2d 8b0a 	vpush	{d8-d12}
 800f4e6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800f4ea:	4604      	mov	r4, r0
 800f4ec:	eeb0 ca40 	vmov.f32	s24, s0
 800f4f0:	2b02      	cmp	r3, #2
 800f4f2:	eeb0 9a60 	vmov.f32	s18, s1
 800f4f6:	eef0 9a41 	vmov.f32	s19, s2
 800f4fa:	eef0 8a61 	vmov.f32	s17, s3
 800f4fe:	eeb0 ba42 	vmov.f32	s22, s4
 800f502:	eef0 ba62 	vmov.f32	s23, s5
 800f506:	eeb0 aa43 	vmov.f32	s20, s6
 800f50a:	eef0 aa63 	vmov.f32	s21, s7
 800f50e:	eeb0 8a44 	vmov.f32	s16, s8
 800f512:	eef0 ca64 	vmov.f32	s25, s9
 800f516:	d12c      	bne.n	800f572 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 800f518:	eef0 0a62 	vmov.f32	s1, s5
 800f51c:	eeb0 0a42 	vmov.f32	s0, s4
 800f520:	f7ff ff11 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f524:	ee79 9acb 	vsub.f32	s19, s19, s22
 800f528:	ee7a caec 	vsub.f32	s25, s21, s25
 800f52c:	ee78 8aeb 	vsub.f32	s17, s17, s23
 800f530:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f534:	ee69 9aac 	vmul.f32	s19, s19, s25
 800f538:	ee28 8a88 	vmul.f32	s16, s17, s16
 800f53c:	eef4 9ac8 	vcmpe.f32	s19, s16
 800f540:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f544:	db0f      	blt.n	800f566 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 800f546:	2101      	movs	r1, #1
 800f548:	eef0 2a6a 	vmov.f32	s5, s21
 800f54c:	eeb0 2a4a 	vmov.f32	s4, s20
 800f550:	4620      	mov	r0, r4
 800f552:	eef0 1a6b 	vmov.f32	s3, s23
 800f556:	eeb0 1a4b 	vmov.f32	s2, s22
 800f55a:	eef0 0a49 	vmov.f32	s1, s18
 800f55e:	eeb0 0a4c 	vmov.f32	s0, s24
 800f562:	f7ff ff47 	bl	800f3f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 800f566:	eef0 0a6a 	vmov.f32	s1, s21
 800f56a:	4620      	mov	r0, r4
 800f56c:	eeb0 0a4a 	vmov.f32	s0, s20
 800f570:	e035      	b.n	800f5de <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 800f572:	2b01      	cmp	r3, #1
 800f574:	d138      	bne.n	800f5e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f576:	ee31 4ae2 	vsub.f32	s8, s3, s5
 800f57a:	ee33 6a48 	vsub.f32	s12, s6, s16
 800f57e:	ee71 7a42 	vsub.f32	s15, s2, s4
 800f582:	ee73 6ae4 	vsub.f32	s13, s7, s9
 800f586:	ee26 7a44 	vnmul.f32	s14, s12, s8
 800f58a:	eea7 7aa6 	vfma.f32	s14, s15, s13
 800f58e:	eeb5 7a40 	vcmp.f32	s14, #0.0
 800f592:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f596:	d027      	beq.n	800f5e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f598:	ee28 8a63 	vnmul.f32	s16, s16, s7
 800f59c:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 800f5a0:	eea4 8a83 	vfma.f32	s16, s9, s6
 800f5a4:	eee1 8a22 	vfma.f32	s17, s2, s5
 800f5a8:	ee68 7a67 	vnmul.f32	s15, s16, s15
 800f5ac:	ee28 8a44 	vnmul.f32	s16, s16, s8
 800f5b0:	eee6 7a28 	vfma.f32	s15, s12, s17
 800f5b4:	eea6 8aa8 	vfma.f32	s16, s13, s17
 800f5b8:	ee87 0a87 	vdiv.f32	s0, s15, s14
 800f5bc:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 800f5c0:	eec8 0a07 	vdiv.f32	s1, s16, s14
 800f5c4:	ee3c ca40 	vsub.f32	s24, s24, s0
 800f5c8:	ee39 9a60 	vsub.f32	s18, s18, s1
 800f5cc:	ee29 9a09 	vmul.f32	s18, s18, s18
 800f5d0:	eeac 9a0c 	vfma.f32	s18, s24, s24
 800f5d4:	eef4 7ac9 	vcmpe.f32	s15, s18
 800f5d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f5dc:	db04      	blt.n	800f5e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 800f5de:	f7ff feb2 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f5e2:	ecbd 8b0a 	vpop	{d8-d12}
 800f5e6:	bd10      	pop	{r4, pc}
 800f5e8:	eef0 0a6b 	vmov.f32	s1, s23
 800f5ec:	4620      	mov	r0, r4
 800f5ee:	eeb0 0a4b 	vmov.f32	s0, s22
 800f5f2:	f7ff fea8 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f5f6:	e7b6      	b.n	800f566 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

0800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 800f5f8:	b510      	push	{r4, lr}
 800f5fa:	ed2d 8b0c 	vpush	{d8-d13}
 800f5fe:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 800f602:	4604      	mov	r4, r0
 800f604:	eeb0 9a40 	vmov.f32	s18, s0
 800f608:	eef0 9a60 	vmov.f32	s19, s1
 800f60c:	eef0 aa41 	vmov.f32	s21, s2
 800f610:	eeb0 ba61 	vmov.f32	s22, s3
 800f614:	b933      	cbnz	r3, 800f624 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 800f616:	f7ff fe96 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f61a:	eef0 0a4b 	vmov.f32	s1, s22
 800f61e:	eeb0 0a6a 	vmov.f32	s0, s21
 800f622:	e015      	b.n	800f650 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 800f624:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 800f628:	2b02      	cmp	r3, #2
 800f62a:	ee71 8a40 	vsub.f32	s17, s2, s0
 800f62e:	ee31 8ae0 	vsub.f32	s16, s3, s1
 800f632:	ee68 8aa7 	vmul.f32	s17, s17, s15
 800f636:	ee28 8a27 	vmul.f32	s16, s16, s15
 800f63a:	d10f      	bne.n	800f65c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 800f63c:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f640:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f644:	f7ff fe7f 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f648:	ee7b 0a68 	vsub.f32	s1, s22, s17
 800f64c:	ee3a 0a88 	vadd.f32	s0, s21, s16
 800f650:	4620      	mov	r0, r4
 800f652:	f7ff fe78 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f656:	ecbd 8b0c 	vpop	{d8-d13}
 800f65a:	bd10      	pop	{r4, pc}
 800f65c:	f7ff fe73 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f660:	eef0 0a69 	vmov.f32	s1, s19
 800f664:	eeb0 0a49 	vmov.f32	s0, s18
 800f668:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 800f798 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 800f66c:	eeb1 aa68 	vneg.f32	s20, s17
 800f670:	eddf ba4a 	vldr	s23, [pc, #296]	@ 800f79c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 800f674:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f678:	4620      	mov	r0, r4
 800f67a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f67e:	ed9f ca48 	vldr	s24, [pc, #288]	@ 800f7a0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 800f682:	eddf ca48 	vldr	s25, [pc, #288]	@ 800f7a4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 800f686:	ed9f da48 	vldr	s26, [pc, #288]	@ 800f7a8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 800f68a:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f68e:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f692:	f7ff fe58 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f696:	eef0 0a69 	vmov.f32	s1, s19
 800f69a:	eeb0 0a49 	vmov.f32	s0, s18
 800f69e:	eddf 7a43 	vldr	s15, [pc, #268]	@ 800f7ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 800f6a2:	4620      	mov	r0, r4
 800f6a4:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f6a8:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f6ac:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f6b0:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f6b4:	f7ff fe47 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f6b8:	eef0 0a69 	vmov.f32	s1, s19
 800f6bc:	eeb0 0a49 	vmov.f32	s0, s18
 800f6c0:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 800f7b0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 800f6c4:	4620      	mov	r0, r4
 800f6c6:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f6ca:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f6ce:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f6d2:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f6d6:	f7ff fe36 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f6da:	eef0 0a69 	vmov.f32	s1, s19
 800f6de:	eeb0 0a49 	vmov.f32	s0, s18
 800f6e2:	eddf 7a34 	vldr	s15, [pc, #208]	@ 800f7b4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 800f6e6:	4620      	mov	r0, r4
 800f6e8:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f6ec:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f6f0:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f6f4:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f6f8:	f7ff fe25 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f6fc:	ee79 0a88 	vadd.f32	s1, s19, s16
 800f700:	ee39 0a28 	vadd.f32	s0, s18, s17
 800f704:	4620      	mov	r0, r4
 800f706:	ee70 0ae8 	vsub.f32	s1, s1, s17
 800f70a:	ee30 0a08 	vadd.f32	s0, s0, s16
 800f70e:	f7ff fe1a 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f712:	eef0 0a69 	vmov.f32	s1, s19
 800f716:	eeb0 0a49 	vmov.f32	s0, s18
 800f71a:	eddf 7a27 	vldr	s15, [pc, #156]	@ 800f7b8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 800f71e:	4620      	mov	r0, r4
 800f720:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f724:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f728:	eeea 0a0d 	vfma.f32	s1, s20, s26
 800f72c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 800f730:	f7ff fe09 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f734:	eef0 0a69 	vmov.f32	s1, s19
 800f738:	eeb0 0a49 	vmov.f32	s0, s18
 800f73c:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 800f7bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 800f740:	4620      	mov	r0, r4
 800f742:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f746:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f74a:	eeea 0a2c 	vfma.f32	s1, s20, s25
 800f74e:	eea8 0a2c 	vfma.f32	s0, s16, s25
 800f752:	f7ff fdf8 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f756:	eef0 0a69 	vmov.f32	s1, s19
 800f75a:	eeb0 0a49 	vmov.f32	s0, s18
 800f75e:	eddf 7a18 	vldr	s15, [pc, #96]	@ 800f7c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 800f762:	4620      	mov	r0, r4
 800f764:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f768:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f76c:	eeea 0a0c 	vfma.f32	s1, s20, s24
 800f770:	eea8 0a0c 	vfma.f32	s0, s16, s24
 800f774:	f7ff fde7 	bl	800f346 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 800f778:	eef0 0a69 	vmov.f32	s1, s19
 800f77c:	eeb0 0a49 	vmov.f32	s0, s18
 800f780:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800f7c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 800f784:	4620      	mov	r0, r4
 800f786:	eee8 0a27 	vfma.f32	s1, s16, s15
 800f78a:	eea8 0aa7 	vfma.f32	s0, s17, s15
 800f78e:	eeea 0a2b 	vfma.f32	s1, s20, s23
 800f792:	eea8 0a2b 	vfma.f32	s0, s16, s23
 800f796:	e73e      	b.n	800f616 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 800f798:	3d23d70a 	.word	0x3d23d70a
 800f79c:	3e8f5c29 	.word	0x3e8f5c29
 800f7a0:	3f19999a 	.word	0x3f19999a
 800f7a4:	3f4ccccd 	.word	0x3f4ccccd
 800f7a8:	3f75c28f 	.word	0x3f75c28f
 800f7ac:	3e4ccccd 	.word	0x3e4ccccd
 800f7b0:	3ecccccd 	.word	0x3ecccccd
 800f7b4:	3f3851ec 	.word	0x3f3851ec
 800f7b8:	3fa3d70a 	.word	0x3fa3d70a
 800f7bc:	3fcccccd 	.word	0x3fcccccd
 800f7c0:	3fe66666 	.word	0x3fe66666
 800f7c4:	3ffae148 	.word	0x3ffae148

0800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 800f7c8:	b570      	push	{r4, r5, r6, lr}
 800f7ca:	ed2d 8b06 	vpush	{d8-d10}
 800f7ce:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f7d2:	eef0 aa40 	vmov.f32	s21, s0
 800f7d6:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 800f7da:	4604      	mov	r4, r0
 800f7dc:	ee30 8ac8 	vsub.f32	s16, s1, s16
 800f7e0:	ee30 9a49 	vsub.f32	s18, s0, s18
 800f7e4:	eeb0 aa60 	vmov.f32	s20, s1
 800f7e8:	ee28 0a08 	vmul.f32	s0, s16, s16
 800f7ec:	eea9 0a09 	vfma.f32	s0, s18, s18
 800f7f0:	f010 fcb0 	bl	8020154 <sqrtf>
 800f7f4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 800f7f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800f7fc:	dd36      	ble.n	800f86c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 800f7fe:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 800f802:	2600      	movs	r6, #0
 800f804:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 800f808:	eec0 6a27 	vdiv.f32	s13, s0, s15
 800f80c:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 800f810:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 800f814:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f818:	eec8 8a26 	vdiv.f32	s17, s16, s13
 800f81c:	ee89 8a26 	vdiv.f32	s16, s18, s13
 800f820:	ee70 9a28 	vadd.f32	s19, s0, s17
 800f824:	ee78 8aaa 	vadd.f32	s17, s17, s21
 800f828:	ee30 9ac8 	vsub.f32	s18, s1, s16
 800f82c:	ee3a 8a48 	vsub.f32	s16, s20, s16
 800f830:	b1fd      	cbz	r5, 800f872 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 800f832:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 800f836:	eef0 0a49 	vmov.f32	s1, s18
 800f83a:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 800f83e:	eeb0 0a69 	vmov.f32	s0, s19
 800f842:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 800f846:	4620      	mov	r0, r4
 800f848:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 800f84c:	f7ff fd64 	bl	800f318 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f850:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 800f854:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 800f858:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 800f85c:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 800f860:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 800f864:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 800f868:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 800f86c:	ecbd 8b06 	vpop	{d8-d10}
 800f870:	bd70      	pop	{r4, r5, r6, pc}
 800f872:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 800f876:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f87a:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f87e:	b16b      	cbz	r3, 800f89c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 800f880:	eef0 1a49 	vmov.f32	s3, s18
 800f884:	4620      	mov	r0, r4
 800f886:	eeb0 1a69 	vmov.f32	s2, s19
 800f88a:	eef0 0a62 	vmov.f32	s1, s5
 800f88e:	eeb0 0a42 	vmov.f32	s0, s4
 800f892:	f7ff feb1 	bl	800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f896:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 800f89a:	e7db      	b.n	800f854 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 800f89c:	eef0 4a48 	vmov.f32	s9, s16
 800f8a0:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f8a4:	eeb0 4a68 	vmov.f32	s8, s17
 800f8a8:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f8ac:	eef0 3a49 	vmov.f32	s7, s18
 800f8b0:	4620      	mov	r0, r4
 800f8b2:	eeb0 3a69 	vmov.f32	s6, s19
 800f8b6:	f7ff fe13 	bl	800f4e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f8ba:	e7cb      	b.n	800f854 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

0800f8bc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 800f8bc:	ee07 2a90 	vmov	s15, r2
 800f8c0:	ee07 1a10 	vmov	s14, r1
 800f8c4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 800f8c8:	eddf 7a04 	vldr	s15, [pc, #16]	@ 800f8dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 800f8cc:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 800f8d0:	ee60 0aa7 	vmul.f32	s1, s1, s15
 800f8d4:	ee20 0a27 	vmul.f32	s0, s0, s15
 800f8d8:	f7ff bf76 	b.w	800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800f8dc:	3d000000 	.word	0x3d000000

0800f8e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 800f8e0:	b538      	push	{r3, r4, r5, lr}
 800f8e2:	ed2d 8b02 	vpush	{d8}
 800f8e6:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 800f8ea:	4604      	mov	r4, r0
 800f8ec:	b31d      	cbz	r5, 800f936 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 800f8ee:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 800f8f2:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 800f8f6:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 800f8fa:	ee78 8a67 	vsub.f32	s17, s16, s15
 800f8fe:	ee38 8a27 	vadd.f32	s16, s16, s15
 800f902:	eef0 0a68 	vmov.f32	s1, s17
 800f906:	f7ff fd07 	bl	800f318 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 800f90a:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f90e:	eef0 1a48 	vmov.f32	s3, s16
 800f912:	4620      	mov	r0, r4
 800f914:	eeb0 0a41 	vmov.f32	s0, s2
 800f918:	eef0 0a68 	vmov.f32	s1, s17
 800f91c:	f7ff fe6c 	bl	800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f920:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 800f924:	eef0 1a68 	vmov.f32	s3, s17
 800f928:	4620      	mov	r0, r4
 800f92a:	eef0 0a48 	vmov.f32	s1, s16
 800f92e:	eeb0 0a41 	vmov.f32	s0, s2
 800f932:	f7ff fe61 	bl	800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 800f936:	4628      	mov	r0, r5
 800f938:	ecbd 8b02 	vpop	{d8}
 800f93c:	bd38      	pop	{r3, r4, r5, pc}

0800f93e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 800f93e:	b510      	push	{r4, lr}
 800f940:	ed2d 8b02 	vpush	{d8}
 800f944:	4604      	mov	r4, r0
 800f946:	eeb0 8a40 	vmov.f32	s16, s0
 800f94a:	eef0 8a60 	vmov.f32	s17, s1
 800f94e:	f7ff ffc7 	bl	800f8e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800f952:	b9d0      	cbnz	r0, 800f98a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 800f954:	4620      	mov	r0, r4
 800f956:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 800f95a:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 800f95e:	eef0 0a68 	vmov.f32	s1, s17
 800f962:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 800f966:	eeb0 0a48 	vmov.f32	s0, s16
 800f96a:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 800f96e:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 800f972:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 800f976:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 800f97a:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 800f97e:	f7ff fdaf 	bl	800f4e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 800f982:	2001      	movs	r0, #1
 800f984:	ecbd 8b02 	vpop	{d8}
 800f988:	bd10      	pop	{r4, pc}
 800f98a:	2000      	movs	r0, #0
 800f98c:	e7fa      	b.n	800f984 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

0800f98e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 800f98e:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 800f992:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 800f996:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 800f99a:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 800f99e:	f7ff be2b 	b.w	800f5f8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

0800f9a4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 800f9a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f9a8:	b089      	sub	sp, #36	@ 0x24
 800f9aa:	461c      	mov	r4, r3
 800f9ac:	4682      	mov	sl, r0
 800f9ae:	4615      	mov	r5, r2
 800f9b0:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f9b4:	f10d 0820 	add.w	r8, sp, #32
 800f9b8:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800f9ba:	9304      	str	r3, [sp, #16]
 800f9bc:	2300      	movs	r3, #0
 800f9be:	9105      	str	r1, [sp, #20]
 800f9c0:	9306      	str	r3, [sp, #24]
 800f9c2:	f848 3d04 	str.w	r3, [r8, #-4]!
 800f9c6:	9b04      	ldr	r3, [sp, #16]
 800f9c8:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 800f9cc:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 800f9d0:	9b05      	ldr	r3, [sp, #20]
 800f9d2:	429d      	cmp	r5, r3
 800f9d4:	d96d      	bls.n	800fab2 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 800f9d6:	3d01      	subs	r5, #1
 800f9d8:	f819 3005 	ldrb.w	r3, [r9, r5]
 800f9dc:	2b06      	cmp	r3, #6
 800f9de:	d8f7      	bhi.n	800f9d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800f9e0:	a201      	add	r2, pc, #4	@ (adr r2, 800f9e8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 800f9e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800f9e6:	bf00      	nop
 800f9e8:	0800fa07 	.word	0x0800fa07
 800f9ec:	0800f9d1 	.word	0x0800f9d1
 800f9f0:	0800fa05 	.word	0x0800fa05
 800f9f4:	0800fa29 	.word	0x0800fa29
 800f9f8:	0800fa29 	.word	0x0800fa29
 800f9fc:	0800fa2d 	.word	0x0800fa2d
 800fa00:	0800fa6d 	.word	0x0800fa6d
 800fa04:	3c02      	subs	r4, #2
 800fa06:	4650      	mov	r0, sl
 800fa08:	9400      	str	r4, [sp, #0]
 800fa0a:	462b      	mov	r3, r5
 800fa0c:	4642      	mov	r2, r8
 800fa0e:	a906      	add	r1, sp, #24
 800fa10:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fa14:	f7ff fcae 	bl	800f374 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800fa18:	eddd 0a07 	vldr	s1, [sp, #28]
 800fa1c:	ed9d 0a06 	vldr	s0, [sp, #24]
 800fa20:	4630      	mov	r0, r6
 800fa22:	f7ff fed1 	bl	800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fa26:	e7d3      	b.n	800f9d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800fa28:	3c01      	subs	r4, #1
 800fa2a:	e7ec      	b.n	800fa06 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 800fa2c:	f1a4 0b04 	sub.w	fp, r4, #4
 800fa30:	3c02      	subs	r4, #2
 800fa32:	4650      	mov	r0, sl
 800fa34:	462b      	mov	r3, r5
 800fa36:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800fa3a:	f8cd b000 	str.w	fp, [sp]
 800fa3e:	4642      	mov	r2, r8
 800fa40:	a906      	add	r1, sp, #24
 800fa42:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fa46:	f7ff fc95 	bl	800f374 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800fa4a:	eddd 2a07 	vldr	s5, [sp, #28]
 800fa4e:	ed9d 2a06 	vldr	s4, [sp, #24]
 800fa52:	4630      	mov	r0, r6
 800fa54:	ed54 1a01 	vldr	s3, [r4, #-4]
 800fa58:	ed14 1a02 	vldr	s2, [r4, #-8]
 800fa5c:	edd4 0a01 	vldr	s1, [r4, #4]
 800fa60:	ed94 0a00 	vldr	s0, [r4]
 800fa64:	f7ff fc1a 	bl	800f29c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fa68:	465c      	mov	r4, fp
 800fa6a:	e7b1      	b.n	800f9d0 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 800fa6c:	f1a4 0b06 	sub.w	fp, r4, #6
 800fa70:	3c02      	subs	r4, #2
 800fa72:	4650      	mov	r0, sl
 800fa74:	462b      	mov	r3, r5
 800fa76:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 800fa7a:	f8cd b000 	str.w	fp, [sp]
 800fa7e:	4642      	mov	r2, r8
 800fa80:	a906      	add	r1, sp, #24
 800fa82:	e9cd 9701 	strd	r9, r7, [sp, #4]
 800fa86:	f7ff fc75 	bl	800f374 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 800fa8a:	eddd 3a07 	vldr	s7, [sp, #28]
 800fa8e:	ed9d 3a06 	vldr	s6, [sp, #24]
 800fa92:	4630      	mov	r0, r6
 800fa94:	ed54 2a03 	vldr	s5, [r4, #-12]
 800fa98:	ed14 2a04 	vldr	s4, [r4, #-16]
 800fa9c:	ed54 1a01 	vldr	s3, [r4, #-4]
 800faa0:	ed14 1a02 	vldr	s2, [r4, #-8]
 800faa4:	edd4 0a01 	vldr	s1, [r4, #4]
 800faa8:	ed94 0a00 	vldr	s0, [r4]
 800faac:	f7ff fc15 	bl	800f2da <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800fab0:	e7da      	b.n	800fa68 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 800fab2:	9b04      	ldr	r3, [sp, #16]
 800fab4:	b113      	cbz	r3, 800fabc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 800fab6:	4630      	mov	r0, r6
 800fab8:	f7ff ff69 	bl	800f98e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 800fabc:	b009      	add	sp, #36	@ 0x24
 800fabe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fac2:	bf00      	nop

0800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 800fac4:	eef0 7a60 	vmov.f32	s15, s1
 800fac8:	6803      	ldr	r3, [r0, #0]
 800faca:	689b      	ldr	r3, [r3, #8]
 800facc:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fad0:	ee17 2a90 	vmov	r2, s15
 800fad4:	eef0 7a40 	vmov.f32	s15, s0
 800fad8:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fadc:	ee17 1a90 	vmov	r1, s15
 800fae0:	4718      	bx	r3
	...

0800fae4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 800fae4:	4b04      	ldr	r3, [pc, #16]	@ (800faf8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 800fae6:	b510      	push	{r4, lr}
 800fae8:	4604      	mov	r4, r0
 800faea:	f840 3b14 	str.w	r3, [r0], #20
 800faee:	f000 fe45 	bl	801077c <_ZN8touchgfx7OutlineD1Ev>
 800faf2:	4620      	mov	r0, r4
 800faf4:	bd10      	pop	{r4, pc}
 800faf6:	bf00      	nop
 800faf8:	080249e0 	.word	0x080249e0

0800fafc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 800fafc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fb00:	ed2d 8b04 	vpush	{d8-d9}
 800fb04:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 800fb08:	b0b5      	sub	sp, #212	@ 0xd4
 800fb0a:	4605      	mov	r5, r0
 800fb0c:	468b      	mov	fp, r1
 800fb0e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb12:	9206      	str	r2, [sp, #24]
 800fb14:	461e      	mov	r6, r3
 800fb16:	2400      	movs	r4, #0
 800fb18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb1c:	f240 814f 	bls.w	800fdbe <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 800fb20:	23ff      	movs	r3, #255	@ 0xff
 800fb22:	1d02      	adds	r2, r0, #4
 800fb24:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 800fdc4 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 800fb28:	f04f 0800 	mov.w	r8, #0
 800fb2c:	9300      	str	r3, [sp, #0]
 800fb2e:	af08      	add	r7, sp, #32
 800fb30:	6981      	ldr	r1, [r0, #24]
 800fb32:	a808      	add	r0, sp, #32
 800fb34:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 800fb36:	eef0 9a49 	vmov.f32	s19, s18
 800fb3a:	f00f fe7f 	bl	801f83c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800fb3e:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 800fb42:	4ba1      	ldr	r3, [pc, #644]	@ (800fdc8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 800fb44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800fb48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800fb4c:	2201      	movs	r2, #1
 800fb4e:	9308      	str	r3, [sp, #32]
 800fb50:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 800fb54:	edd5 6a08 	vldr	s13, [r5, #32]
 800fb58:	eeb0 8a49 	vmov.f32	s16, s18
 800fb5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800fb60:	9325      	str	r3, [sp, #148]	@ 0x94
 800fb62:	f04f 0300 	mov.w	r3, #0
 800fb66:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 800fb6a:	7f6a      	ldrb	r2, [r5, #29]
 800fb6c:	eef0 8a49 	vmov.f32	s17, s18
 800fb70:	bf48      	it	mi
 800fb72:	eef1 7a67 	vnegmi.f32	s15, s15
 800fb76:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 800fb7a:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 800fb7e:	46c1      	mov	r9, r8
 800fb80:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 800fb84:	f04f 0a01 	mov.w	sl, #1
 800fb88:	ee67 7a87 	vmul.f32	s15, s15, s14
 800fb8c:	7fab      	ldrb	r3, [r5, #30]
 800fb8e:	942a      	str	r4, [sp, #168]	@ 0xa8
 800fb90:	435a      	muls	r2, r3
 800fb92:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 800fb96:	ee26 7aa7 	vmul.f32	s14, s13, s15
 800fb9a:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 800fb9e:	1c53      	adds	r3, r2, #1
 800fba0:	942b      	str	r4, [sp, #172]	@ 0xac
 800fba2:	942c      	str	r4, [sp, #176]	@ 0xb0
 800fba4:	ee27 7a26 	vmul.f32	s14, s14, s13
 800fba8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 800fbac:	942d      	str	r4, [sp, #180]	@ 0xb4
 800fbae:	942e      	str	r4, [sp, #184]	@ 0xb8
 800fbb0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 800fbb4:	ee67 7a27 	vmul.f32	s15, s14, s15
 800fbb8:	942f      	str	r4, [sp, #188]	@ 0xbc
 800fbba:	9430      	str	r4, [sp, #192]	@ 0xc0
 800fbbc:	9431      	str	r4, [sp, #196]	@ 0xc4
 800fbbe:	9432      	str	r4, [sp, #200]	@ 0xc8
 800fbc0:	9433      	str	r4, [sp, #204]	@ 0xcc
 800fbc2:	4644      	mov	r4, r8
 800fbc4:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 800fbc8:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 800fbcc:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 800fbd0:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 800fbd4:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 800fbd8:	9b06      	ldr	r3, [sp, #24]
 800fbda:	454b      	cmp	r3, r9
 800fbdc:	f000 80cc 	beq.w	800fd78 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 800fbe0:	f109 0301 	add.w	r3, r9, #1
 800fbe4:	9305      	str	r3, [sp, #20]
 800fbe6:	f81b 3009 	ldrb.w	r3, [fp, r9]
 800fbea:	2b06      	cmp	r3, #6
 800fbec:	d839      	bhi.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fbee:	e8df f003 	tbb	[pc, r3]
 800fbf2:	3b04      	.short	0x3b04
 800fbf4:	817c6f60 	.word	0x817c6f60
 800fbf8:	a0          	.byte	0xa0
 800fbf9:	00          	.byte	0x00
 800fbfa:	45c1      	cmp	r9, r8
 800fbfc:	d92b      	bls.n	800fc56 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800fbfe:	eef0 0a49 	vmov.f32	s1, s18
 800fc02:	4638      	mov	r0, r7
 800fc04:	eeb0 0a69 	vmov.f32	s0, s19
 800fc08:	f7ff fdde 	bl	800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fc0c:	4638      	mov	r0, r7
 800fc0e:	f7ff fe67 	bl	800f8e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fc12:	4681      	mov	r9, r0
 800fc14:	b9f8      	cbnz	r0, 800fc56 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 800fc16:	eef0 0a49 	vmov.f32	s1, s18
 800fc1a:	4638      	mov	r0, r7
 800fc1c:	eeb0 0a69 	vmov.f32	s0, s19
 800fc20:	f7ff fe8d 	bl	800f93e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800fc24:	4628      	mov	r0, r5
 800fc26:	4623      	mov	r3, r4
 800fc28:	9a05      	ldr	r2, [sp, #20]
 800fc2a:	4641      	mov	r1, r8
 800fc2c:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 800fc30:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 800fc34:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800fc38:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800fc3c:	e9cd 9702 	strd	r9, r7, [sp, #8]
 800fc40:	e9cd b600 	strd	fp, r6, [sp]
 800fc44:	f7ff feae 	bl	800f9a4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fc48:	eef0 0a49 	vmov.f32	s1, s18
 800fc4c:	eeb0 0a69 	vmov.f32	s0, s19
 800fc50:	4638      	mov	r0, r7
 800fc52:	f7ff fe74 	bl	800f93e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 800fc56:	eeb0 8a49 	vmov.f32	s16, s18
 800fc5a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 800fc5e:	eef0 8a69 	vmov.f32	s17, s19
 800fc62:	f8dd 9014 	ldr.w	r9, [sp, #20]
 800fc66:	e7b7      	b.n	800fbd8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 800fc68:	45c1      	cmp	r9, r8
 800fc6a:	d90d      	bls.n	800fc88 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800fc6c:	4638      	mov	r0, r7
 800fc6e:	f7ff fe37 	bl	800f8e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fc72:	b948      	cbnz	r0, 800fc88 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 800fc74:	4623      	mov	r3, r4
 800fc76:	464a      	mov	r2, r9
 800fc78:	4641      	mov	r1, r8
 800fc7a:	4628      	mov	r0, r5
 800fc7c:	e9cd a702 	strd	sl, r7, [sp, #8]
 800fc80:	e9cd b600 	strd	fp, r6, [sp]
 800fc84:	f7ff fe8e 	bl	800f9a4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fc88:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fc8c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 800fc90:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 800fc94:	3402      	adds	r4, #2
 800fc96:	edd3 8a00 	vldr	s17, [r3]
 800fc9a:	46c8      	mov	r8, r9
 800fc9c:	ed93 8a01 	vldr	s16, [r3, #4]
 800fca0:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 800fca4:	eef0 9a68 	vmov.f32	s19, s17
 800fca8:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 800fcac:	eeb0 9a48 	vmov.f32	s18, s16
 800fcb0:	e7d7      	b.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fcb2:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fcb6:	4638      	mov	r0, r7
 800fcb8:	3402      	adds	r4, #2
 800fcba:	edd3 8a00 	vldr	s17, [r3]
 800fcbe:	ed93 8a01 	vldr	s16, [r3, #4]
 800fcc2:	eeb0 0a68 	vmov.f32	s0, s17
 800fcc6:	eef0 0a48 	vmov.f32	s1, s16
 800fcca:	f7ff fd7d 	bl	800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fcce:	e7c8      	b.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fcd0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fcd4:	edd3 8a00 	vldr	s17, [r3]
 800fcd8:	eef0 0a48 	vmov.f32	s1, s16
 800fcdc:	4638      	mov	r0, r7
 800fcde:	eeb0 0a68 	vmov.f32	s0, s17
 800fce2:	3401      	adds	r4, #1
 800fce4:	f7ff fd70 	bl	800f7c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 800fce8:	e7bb      	b.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fcea:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 800fcee:	ed93 8a00 	vldr	s16, [r3]
 800fcf2:	e7f1      	b.n	800fcd8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 800fcf4:	00a3      	lsls	r3, r4, #2
 800fcf6:	eef0 0a48 	vmov.f32	s1, s16
 800fcfa:	eeb0 0a68 	vmov.f32	s0, s17
 800fcfe:	4638      	mov	r0, r7
 800fd00:	f103 0208 	add.w	r2, r3, #8
 800fd04:	f103 090c 	add.w	r9, r3, #12
 800fd08:	4433      	add	r3, r6
 800fd0a:	3404      	adds	r4, #4
 800fd0c:	4432      	add	r2, r6
 800fd0e:	44b1      	add	r9, r6
 800fd10:	edd3 1a01 	vldr	s3, [r3, #4]
 800fd14:	ed92 2a00 	vldr	s4, [r2]
 800fd18:	edd9 2a00 	vldr	s5, [r9]
 800fd1c:	ed93 1a00 	vldr	s2, [r3]
 800fd20:	9207      	str	r2, [sp, #28]
 800fd22:	f7ff fabb 	bl	800f29c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800fd26:	9a07      	ldr	r2, [sp, #28]
 800fd28:	ed99 8a00 	vldr	s16, [r9]
 800fd2c:	edd2 8a00 	vldr	s17, [r2]
 800fd30:	e797      	b.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fd32:	00a3      	lsls	r3, r4, #2
 800fd34:	eef0 0a48 	vmov.f32	s1, s16
 800fd38:	eeb0 0a68 	vmov.f32	s0, s17
 800fd3c:	4638      	mov	r0, r7
 800fd3e:	f103 0210 	add.w	r2, r3, #16
 800fd42:	f103 0914 	add.w	r9, r3, #20
 800fd46:	4433      	add	r3, r6
 800fd48:	3406      	adds	r4, #6
 800fd4a:	4432      	add	r2, r6
 800fd4c:	44b1      	add	r9, r6
 800fd4e:	edd3 2a03 	vldr	s5, [r3, #12]
 800fd52:	ed92 3a00 	vldr	s6, [r2]
 800fd56:	edd9 3a00 	vldr	s7, [r9]
 800fd5a:	ed93 2a02 	vldr	s4, [r3, #8]
 800fd5e:	edd3 1a01 	vldr	s3, [r3, #4]
 800fd62:	ed93 1a00 	vldr	s2, [r3]
 800fd66:	9207      	str	r2, [sp, #28]
 800fd68:	f7ff fab7 	bl	800f2da <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800fd6c:	9a07      	ldr	r2, [sp, #28]
 800fd6e:	ed99 8a00 	vldr	s16, [r9]
 800fd72:	edd2 8a00 	vldr	s17, [r2]
 800fd76:	e774      	b.n	800fc62 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 800fd78:	9b06      	ldr	r3, [sp, #24]
 800fd7a:	af08      	add	r7, sp, #32
 800fd7c:	4543      	cmp	r3, r8
 800fd7e:	d90f      	bls.n	800fda0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800fd80:	4638      	mov	r0, r7
 800fd82:	f7ff fdad 	bl	800f8e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 800fd86:	b958      	cbnz	r0, 800fda0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 800fd88:	2301      	movs	r3, #1
 800fd8a:	9703      	str	r7, [sp, #12]
 800fd8c:	f8cd b000 	str.w	fp, [sp]
 800fd90:	4641      	mov	r1, r8
 800fd92:	9a06      	ldr	r2, [sp, #24]
 800fd94:	4628      	mov	r0, r5
 800fd96:	e9cd 6301 	strd	r6, r3, [sp, #4]
 800fd9a:	4623      	mov	r3, r4
 800fd9c:	f7ff fe02 	bl	800f9a4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 800fda0:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 800fda4:	4638      	mov	r0, r7
 800fda6:	f00f fddd 	bl	801f964 <_ZN8touchgfx6Canvas6renderEh>
 800fdaa:	4604      	mov	r4, r0
 800fdac:	4638      	mov	r0, r7
 800fdae:	f7ff fe99 	bl	800fae4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fdb2:	4620      	mov	r0, r4
 800fdb4:	b035      	add	sp, #212	@ 0xd4
 800fdb6:	ecbd 8b04 	vpop	{d8-d9}
 800fdba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fdbe:	2401      	movs	r4, #1
 800fdc0:	e7f7      	b.n	800fdb2 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 800fdc2:	bf00      	nop
 800fdc4:	00000000 	.word	0x00000000
 800fdc8:	080244b0 	.word	0x080244b0

0800fdcc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 800fdcc:	b510      	push	{r4, lr}
 800fdce:	4604      	mov	r4, r0
 800fdd0:	f7ff fe88 	bl	800fae4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 800fdd4:	21b0      	movs	r1, #176	@ 0xb0
 800fdd6:	4620      	mov	r0, r4
 800fdd8:	f010 f991 	bl	80200fe <_ZdlPvj>
 800fddc:	4620      	mov	r0, r4
 800fdde:	bd10      	pop	{r4, pc}

0800fde0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 800fde0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fde4:	4698      	mov	r8, r3
 800fde6:	23ff      	movs	r3, #255	@ 0xff
 800fde8:	4607      	mov	r7, r0
 800fdea:	4689      	mov	r9, r1
 800fdec:	4692      	mov	sl, r2
 800fdee:	1d02      	adds	r2, r0, #4
 800fdf0:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 800fdf4:	2400      	movs	r4, #0
 800fdf6:	44ca      	add	sl, r9
 800fdf8:	ed2d 8b06 	vpush	{d8-d10}
 800fdfc:	b0aa      	sub	sp, #168	@ 0xa8
 800fdfe:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010004 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fe02:	9300      	str	r3, [sp, #0]
 800fe04:	eef0 8a48 	vmov.f32	s17, s16
 800fe08:	6981      	ldr	r1, [r0, #24]
 800fe0a:	a80d      	add	r0, sp, #52	@ 0x34
 800fe0c:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 800fe0e:	f00f fd15 	bl	801f83c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 800fe12:	7f3b      	ldrb	r3, [r7, #28]
 800fe14:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010004 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 800fe18:	4628      	mov	r0, r5
 800fe1a:	1e5a      	subs	r2, r3, #1
 800fe1c:	eeb0 0a60 	vmov.f32	s0, s1
 800fe20:	4253      	negs	r3, r2
 800fe22:	4153      	adcs	r3, r2
 800fe24:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 800fe28:	f003 ff99 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fe2c:	eeb0 9a40 	vmov.f32	s18, s0
 800fe30:	eef0 9a60 	vmov.f32	s19, s1
 800fe34:	45ca      	cmp	sl, r9
 800fe36:	f000 80cd 	beq.w	800ffd4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 800fe3a:	f819 3b01 	ldrb.w	r3, [r9], #1
 800fe3e:	2b06      	cmp	r3, #6
 800fe40:	d8f8      	bhi.n	800fe34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fe42:	e8df f003 	tbb	[pc, r3]
 800fe46:	0804      	.short	0x0804
 800fe48:	58533f2a 	.word	0x58533f2a
 800fe4c:	8a          	.byte	0x8a
 800fe4d:	00          	.byte	0x00
 800fe4e:	a80d      	add	r0, sp, #52	@ 0x34
 800fe50:	f00f fd66 	bl	801f920 <_ZN8touchgfx6Canvas5closeEv>
 800fe54:	e7ee      	b.n	800fe34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fe56:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fe5a:	4628      	mov	r0, r5
 800fe5c:	ed93 8a01 	vldr	s16, [r3, #4]
 800fe60:	edd3 8a00 	vldr	s17, [r3]
 800fe64:	eef0 0a48 	vmov.f32	s1, s16
 800fe68:	eeb0 0a68 	vmov.f32	s0, s17
 800fe6c:	f003 ff77 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fe70:	a80d      	add	r0, sp, #52	@ 0x34
 800fe72:	eef0 7a60 	vmov.f32	s15, s1
 800fe76:	eeb0 9a40 	vmov.f32	s18, s0
 800fe7a:	eef0 9a60 	vmov.f32	s19, s1
 800fe7e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fe82:	ee17 2a90 	vmov	r2, s15
 800fe86:	eef0 7a40 	vmov.f32	s15, s0
 800fe8a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 800fe8e:	ee17 1a90 	vmov	r1, s15
 800fe92:	f00f fe1f 	bl	801fad4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 800fe96:	3402      	adds	r4, #2
 800fe98:	e7cc      	b.n	800fe34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800fe9a:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fe9e:	4628      	mov	r0, r5
 800fea0:	edd3 8a00 	vldr	s17, [r3]
 800fea4:	ed93 8a01 	vldr	s16, [r3, #4]
 800fea8:	eeb0 0a68 	vmov.f32	s0, s17
 800feac:	eef0 0a48 	vmov.f32	s1, s16
 800feb0:	f003 ff55 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800feb4:	a80d      	add	r0, sp, #52	@ 0x34
 800feb6:	eeb0 9a40 	vmov.f32	s18, s0
 800feba:	eef0 9a60 	vmov.f32	s19, s1
 800febe:	f7ff fe01 	bl	800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800fec2:	e7e8      	b.n	800fe96 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 800fec4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fec8:	edd3 8a00 	vldr	s17, [r3]
 800fecc:	eef0 0a48 	vmov.f32	s1, s16
 800fed0:	4628      	mov	r0, r5
 800fed2:	eeb0 0a68 	vmov.f32	s0, s17
 800fed6:	3401      	adds	r4, #1
 800fed8:	f003 ff41 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800fedc:	a80d      	add	r0, sp, #52	@ 0x34
 800fede:	eef0 9a60 	vmov.f32	s19, s1
 800fee2:	eeb0 9a40 	vmov.f32	s18, s0
 800fee6:	f7ff fded 	bl	800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 800feea:	e7a3      	b.n	800fe34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800feec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 800fef0:	ed93 8a00 	vldr	s16, [r3]
 800fef4:	e7ea      	b.n	800fecc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 800fef6:	1ca3      	adds	r3, r4, #2
 800fef8:	4628      	mov	r0, r5
 800fefa:	3404      	adds	r4, #4
 800fefc:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 800ff00:	ed53 0a01 	vldr	s1, [r3, #-4]
 800ff04:	ed13 0a02 	vldr	s0, [r3, #-8]
 800ff08:	edd3 8a00 	vldr	s17, [r3]
 800ff0c:	ed93 8a01 	vldr	s16, [r3, #4]
 800ff10:	f003 ff25 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff14:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800ff18:	eeb0 0a68 	vmov.f32	s0, s17
 800ff1c:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800ff20:	eef0 0a48 	vmov.f32	s1, s16
 800ff24:	4628      	mov	r0, r5
 800ff26:	f003 ff1a 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff2a:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 800ff2e:	eef0 2a60 	vmov.f32	s5, s1
 800ff32:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 800ff36:	eeb0 2a40 	vmov.f32	s4, s0
 800ff3a:	a80d      	add	r0, sp, #52	@ 0x34
 800ff3c:	eeb0 aa40 	vmov.f32	s20, s0
 800ff40:	eef0 aa60 	vmov.f32	s21, s1
 800ff44:	eeb0 0a49 	vmov.f32	s0, s18
 800ff48:	eef0 0a69 	vmov.f32	s1, s19
 800ff4c:	f7ff f9a6 	bl	800f29c <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 800ff50:	eef0 9a6a 	vmov.f32	s19, s21
 800ff54:	eeb0 9a4a 	vmov.f32	s18, s20
 800ff58:	e76c      	b.n	800fe34 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 800ff5a:	1d26      	adds	r6, r4, #4
 800ff5c:	4628      	mov	r0, r5
 800ff5e:	3406      	adds	r4, #6
 800ff60:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800ff64:	ed56 0a03 	vldr	s1, [r6, #-12]
 800ff68:	ed16 0a04 	vldr	s0, [r6, #-16]
 800ff6c:	edd6 8a00 	vldr	s17, [r6]
 800ff70:	ed96 8a01 	vldr	s16, [r6, #4]
 800ff74:	f003 fef3 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff78:	ed8d 0a07 	vstr	s0, [sp, #28]
 800ff7c:	4628      	mov	r0, r5
 800ff7e:	ed16 0a02 	vldr	s0, [r6, #-8]
 800ff82:	edcd 0a08 	vstr	s1, [sp, #32]
 800ff86:	ed56 0a01 	vldr	s1, [r6, #-4]
 800ff8a:	f003 fee8 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ff8e:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 800ff92:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 800ff96:	eeb0 0a68 	vmov.f32	s0, s17
 800ff9a:	eef0 0a48 	vmov.f32	s1, s16
 800ff9e:	4628      	mov	r0, r5
 800ffa0:	f003 fedd 	bl	8013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 800ffa4:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 800ffa8:	eeb0 3a40 	vmov.f32	s6, s0
 800ffac:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 800ffb0:	eef0 3a60 	vmov.f32	s7, s1
 800ffb4:	eddd 1a08 	vldr	s3, [sp, #32]
 800ffb8:	eeb0 aa40 	vmov.f32	s20, s0
 800ffbc:	ed9d 1a07 	vldr	s2, [sp, #28]
 800ffc0:	eef0 aa60 	vmov.f32	s21, s1
 800ffc4:	a80d      	add	r0, sp, #52	@ 0x34
 800ffc6:	eef0 0a69 	vmov.f32	s1, s19
 800ffca:	eeb0 0a49 	vmov.f32	s0, s18
 800ffce:	f7ff f984 	bl	800f2da <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 800ffd2:	e7bd      	b.n	800ff50 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 800ffd4:	7f7b      	ldrb	r3, [r7, #29]
 800ffd6:	a80d      	add	r0, sp, #52	@ 0x34
 800ffd8:	7fb9      	ldrb	r1, [r7, #30]
 800ffda:	4359      	muls	r1, r3
 800ffdc:	1c4b      	adds	r3, r1, #1
 800ffde:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 800ffe2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 800ffe6:	f00f fcbd 	bl	801f964 <_ZN8touchgfx6Canvas6renderEh>
 800ffea:	4b07      	ldr	r3, [pc, #28]	@ (8010008 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 800ffec:	4604      	mov	r4, r0
 800ffee:	a812      	add	r0, sp, #72	@ 0x48
 800fff0:	930d      	str	r3, [sp, #52]	@ 0x34
 800fff2:	f000 fbc3 	bl	801077c <_ZN8touchgfx7OutlineD1Ev>
 800fff6:	4620      	mov	r0, r4
 800fff8:	b02a      	add	sp, #168	@ 0xa8
 800fffa:	ecbd 8b06 	vpop	{d8-d10}
 800fffe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010002:	bf00      	nop
 8010004:	00000000 	.word	0x00000000
 8010008:	080249e0 	.word	0x080249e0

0801000c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 801000c:	b410      	push	{r4}
 801000e:	7f04      	ldrb	r4, [r0, #28]
 8010010:	b11c      	cbz	r4, 801001a <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010012:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010016:	f7ff bee3 	b.w	800fde0 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 801001a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801001e:	f7ff bd6d 	b.w	800fafc <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08010022 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010022:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010026:	4691      	mov	r9, r2
 8010028:	4602      	mov	r2, r0
 801002a:	4606      	mov	r6, r0
 801002c:	4688      	mov	r8, r1
 801002e:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010032:	469a      	mov	sl, r3
 8010034:	ab02      	add	r3, sp, #8
 8010036:	af02      	add	r7, sp, #8
 8010038:	6851      	ldr	r1, [r2, #4]
 801003a:	c303      	stmia	r3!, {r0, r1}
 801003c:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010040:	2b00      	cmp	r3, #0
 8010042:	dd2f      	ble.n	80100a4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8010044:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010048:	2c00      	cmp	r4, #0
 801004a:	dd2b      	ble.n	80100a4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801004c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010050:	441c      	add	r4, r3
 8010052:	b2a4      	uxth	r4, r4
 8010054:	b225      	sxth	r5, r4
 8010056:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 801005a:	42ab      	cmp	r3, r5
 801005c:	da22      	bge.n	80100a4 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 801005e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010060:	464a      	mov	r2, r9
 8010062:	9701      	str	r7, [sp, #4]
 8010064:	4641      	mov	r1, r8
 8010066:	9300      	str	r3, [sp, #0]
 8010068:	4630      	mov	r0, r6
 801006a:	4653      	mov	r3, sl
 801006c:	f7ff ffce 	bl	801000c <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010070:	b940      	cbnz	r0, 8010084 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8010072:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010076:	2b01      	cmp	r3, #1
 8010078:	d004      	beq.n	8010084 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 801007a:	3301      	adds	r3, #1
 801007c:	105b      	asrs	r3, r3, #1
 801007e:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010082:	e7ec      	b.n	801005e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8010084:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010088:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 801008c:	4413      	add	r3, r2
 801008e:	b29b      	uxth	r3, r3
 8010090:	441a      	add	r2, r3
 8010092:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010096:	b212      	sxth	r2, r2
 8010098:	4295      	cmp	r5, r2
 801009a:	dadc      	bge.n	8010056 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 801009c:	1ae3      	subs	r3, r4, r3
 801009e:	f8ad 300e 	strh.w	r3, [sp, #14]
 80100a2:	e7d8      	b.n	8010056 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 80100a4:	b004      	add	sp, #16
 80100a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080100aa <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80100aa:	0c0b      	lsrs	r3, r1, #16
 80100ac:	60c1      	str	r1, [r0, #12]
 80100ae:	7481      	strb	r1, [r0, #18]
 80100b0:	7403      	strb	r3, [r0, #16]
 80100b2:	0a0b      	lsrs	r3, r1, #8
 80100b4:	7443      	strb	r3, [r0, #17]
 80100b6:	4770      	bx	lr

080100b8 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 80100b8:	f1a0 0008 	sub.w	r0, r0, #8
 80100bc:	e7f5      	b.n	80100aa <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

080100c0 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 80100c0:	b508      	push	{r3, lr}
 80100c2:	4b05      	ldr	r3, [pc, #20]	@ (80100d8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 80100c4:	6818      	ldr	r0, [r3, #0]
 80100c6:	6803      	ldr	r3, [r0, #0]
 80100c8:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80100cc:	4798      	blx	r3
 80100ce:	1e43      	subs	r3, r0, #1
 80100d0:	4258      	negs	r0, r3
 80100d2:	4158      	adcs	r0, r3
 80100d4:	bd08      	pop	{r3, pc}
 80100d6:	bf00      	nop
 80100d8:	240248fc 	.word	0x240248fc

080100dc <_ZN8touchgfx13PainterRGB888D1Ev>:
 80100dc:	4770      	bx	lr

080100de <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 80100de:	3808      	subs	r0, #8
 80100e0:	4770      	bx	lr

080100e2 <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 80100e2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80100e6:	b410      	push	{r4}
 80100e8:	188c      	adds	r4, r1, r2
 80100ea:	f89d 300c 	ldrb.w	r3, [sp, #12]
 80100ee:	68c2      	ldr	r2, [r0, #12]
 80100f0:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 80100f4:	4620      	mov	r0, r4
 80100f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80100fa:	f7f3 b96b 	b.w	80033d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

080100fe <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 80100fe:	f7f3 b945 	b.w	800338c <_ZN8touchgfx5paint8tearDownEv>

08010102 <_ZN8touchgfx13PainterRGB888D0Ev>:
 8010102:	b510      	push	{r4, lr}
 8010104:	4604      	mov	r4, r0
 8010106:	2114      	movs	r1, #20
 8010108:	f00f fff9 	bl	80200fe <_ZdlPvj>
 801010c:	4620      	mov	r0, r4
 801010e:	bd10      	pop	{r4, pc}

08010110 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8010110:	f1a0 0008 	sub.w	r0, r0, #8
 8010114:	e7f5      	b.n	8010102 <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08010118 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8010118:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801011c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010120:	4411      	add	r1, r2
 8010122:	7c42      	ldrb	r2, [r0, #17]
 8010124:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8010128:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801012c:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8010130:	2a00      	cmp	r2, #0
 8010132:	f000 8084 	beq.w	801023e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 8010136:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 801013a:	ed90 7a08 	vldr	s14, [r0, #32]
 801013e:	42a2      	cmp	r2, r4
 8010140:	68c3      	ldr	r3, [r0, #12]
 8010142:	db20      	blt.n	8010186 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 8010144:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010148:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801014c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010150:	bfc8      	it	gt
 8010152:	2200      	movgt	r2, #0
 8010154:	589a      	ldr	r2, [r3, r2]
 8010156:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801015a:	7c03      	ldrb	r3, [r0, #16]
 801015c:	fa5f fc82 	uxtb.w	ip, r2
 8010160:	f3c2 2707 	ubfx	r7, r2, #8, #8
 8010164:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8010168:	440e      	add	r6, r1
 801016a:	b36b      	cbz	r3, 80101c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 801016c:	2dff      	cmp	r5, #255	@ 0xff
 801016e:	d12b      	bne.n	80101c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8010170:	42b1      	cmp	r1, r6
 8010172:	f080 8204 	bcs.w	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010176:	f881 c000 	strb.w	ip, [r1]
 801017a:	3103      	adds	r1, #3
 801017c:	f801 7c02 	strb.w	r7, [r1, #-2]
 8010180:	f801 4c01 	strb.w	r4, [r1, #-1]
 8010184:	e7f4      	b.n	8010170 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 8010186:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 801018a:	42a7      	cmp	r7, r4
 801018c:	dc08      	bgt.n	80101a0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 801018e:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8010192:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8010196:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801019a:	bfd8      	it	le
 801019c:	2200      	movle	r2, #0
 801019e:	e7d9      	b.n	8010154 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80101a0:	1aa2      	subs	r2, r4, r2
 80101a2:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80101a6:	ee07 2a90 	vmov	s15, r2
 80101aa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80101ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101b2:	ee67 7a87 	vmul.f32	s15, s15, s14
 80101b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80101ba:	ee17 2a90 	vmov	r2, s15
 80101be:	bfd8      	it	le
 80101c0:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80101c4:	0092      	lsls	r2, r2, #2
 80101c6:	e7c5      	b.n	8010154 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80101c8:	0e12      	lsrs	r2, r2, #24
 80101ca:	4355      	muls	r5, r2
 80101cc:	1c6a      	adds	r2, r5, #1
 80101ce:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80101d2:	122d      	asrs	r5, r5, #8
 80101d4:	43e8      	mvns	r0, r5
 80101d6:	b2ad      	uxth	r5, r5
 80101d8:	fb1c fc05 	smulbb	ip, ip, r5
 80101dc:	b2c0      	uxtb	r0, r0
 80101de:	fb17 f705 	smulbb	r7, r7, r5
 80101e2:	fb14 f505 	smulbb	r5, r4, r5
 80101e6:	fa1f fc8c 	uxth.w	ip, ip
 80101ea:	b2bf      	uxth	r7, r7
 80101ec:	b2ad      	uxth	r5, r5
 80101ee:	428e      	cmp	r6, r1
 80101f0:	f101 0303 	add.w	r3, r1, #3
 80101f4:	f240 81c3 	bls.w	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80101f8:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 80101fc:	fb02 c200 	mla	r2, r2, r0, ip
 8010200:	b292      	uxth	r2, r2
 8010202:	1c51      	adds	r1, r2, #1
 8010204:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010208:	1212      	asrs	r2, r2, #8
 801020a:	f803 2c03 	strb.w	r2, [r3, #-3]
 801020e:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 8010212:	fb02 7200 	mla	r2, r2, r0, r7
 8010216:	b292      	uxth	r2, r2
 8010218:	1c51      	adds	r1, r2, #1
 801021a:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801021e:	1212      	asrs	r2, r2, #8
 8010220:	f803 2c02 	strb.w	r2, [r3, #-2]
 8010224:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8010228:	fb02 5200 	mla	r2, r2, r0, r5
 801022c:	b292      	uxth	r2, r2
 801022e:	1c51      	adds	r1, r2, #1
 8010230:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8010234:	4619      	mov	r1, r3
 8010236:	1212      	asrs	r2, r2, #8
 8010238:	f803 2c01 	strb.w	r2, [r3, #-1]
 801023c:	e7d7      	b.n	80101ee <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 801023e:	7c82      	ldrb	r2, [r0, #18]
 8010240:	2a00      	cmp	r2, #0
 8010242:	d047      	beq.n	80102d4 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 8010244:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8010248:	ee07 2a10 	vmov	s14, r2
 801024c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8010250:	ee07 3a90 	vmov	s15, r3
 8010254:	461a      	mov	r2, r3
 8010256:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 801025a:	eef4 6ac7 	vcmpe.f32	s13, s14
 801025e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010262:	f200 808e 	bhi.w	8010382 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 8010266:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801026a:	f640 72fc 	movw	r2, #4092	@ 0xffc
 801026e:	68c7      	ldr	r7, [r0, #12]
 8010270:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010274:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8010278:	ee06 6a90 	vmov	s13, r6
 801027c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8010280:	eef4 7ae6 	vcmpe.f32	s15, s13
 8010284:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010288:	bf4a      	itet	mi
 801028a:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 801028e:	4634      	movpl	r4, r6
 8010290:	ee17 4a90 	vmovmi	r4, s15
 8010294:	edd0 7a08 	vldr	s15, [r0, #32]
 8010298:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801029c:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80102a0:	448e      	add	lr, r1
 80102a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102a6:	bfc8      	it	gt
 80102a8:	2200      	movgt	r2, #0
 80102aa:	58bf      	ldr	r7, [r7, r2]
 80102ac:	7c02      	ldrb	r2, [r0, #16]
 80102ae:	fa5f f987 	uxtb.w	r9, r7
 80102b2:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80102b6:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80102ba:	b31a      	cbz	r2, 8010304 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80102bc:	2dff      	cmp	r5, #255	@ 0xff
 80102be:	d121      	bne.n	8010304 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80102c0:	4571      	cmp	r1, lr
 80102c2:	d25d      	bcs.n	8010380 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80102c4:	f881 9000 	strb.w	r9, [r1]
 80102c8:	3103      	adds	r1, #3
 80102ca:	f801 8c02 	strb.w	r8, [r1, #-2]
 80102ce:	f801 cc01 	strb.w	ip, [r1, #-1]
 80102d2:	e7f5      	b.n	80102c0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 80102d4:	ee07 4a90 	vmov	s15, r4
 80102d8:	ed90 7a06 	vldr	s14, [r0, #24]
 80102dc:	edd0 6a05 	vldr	s13, [r0, #20]
 80102e0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80102e4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80102e8:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80102ec:	edd0 7a08 	vldr	s15, [r0, #32]
 80102f0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80102f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80102f8:	bf44      	itt	mi
 80102fa:	edd0 7a07 	vldrmi	s15, [r0, #28]
 80102fe:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 8010302:	e7a5      	b.n	8010250 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 8010304:	0e3f      	lsrs	r7, r7, #24
 8010306:	436f      	muls	r7, r5
 8010308:	1c7a      	adds	r2, r7, #1
 801030a:	eb02 2227 	add.w	r2, r2, r7, asr #8
 801030e:	1212      	asrs	r2, r2, #8
 8010310:	ea6f 0a02 	mvn.w	sl, r2
 8010314:	b292      	uxth	r2, r2
 8010316:	fb19 f902 	smulbb	r9, r9, r2
 801031a:	fa5f fa8a 	uxtb.w	sl, sl
 801031e:	fb18 f802 	smulbb	r8, r8, r2
 8010322:	fb1c fc02 	smulbb	ip, ip, r2
 8010326:	fa1f f989 	uxth.w	r9, r9
 801032a:	fa1f f888 	uxth.w	r8, r8
 801032e:	fa1f fc8c 	uxth.w	ip, ip
 8010332:	458e      	cmp	lr, r1
 8010334:	f101 0203 	add.w	r2, r1, #3
 8010338:	d922      	bls.n	8010380 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 801033a:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801033e:	fb01 910a 	mla	r1, r1, sl, r9
 8010342:	b289      	uxth	r1, r1
 8010344:	1c4f      	adds	r7, r1, #1
 8010346:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801034a:	1209      	asrs	r1, r1, #8
 801034c:	f802 1c03 	strb.w	r1, [r2, #-3]
 8010350:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010354:	fb01 810a 	mla	r1, r1, sl, r8
 8010358:	b289      	uxth	r1, r1
 801035a:	1c4f      	adds	r7, r1, #1
 801035c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010360:	1209      	asrs	r1, r1, #8
 8010362:	f802 1c02 	strb.w	r1, [r2, #-2]
 8010366:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 801036a:	fb01 c10a 	mla	r1, r1, sl, ip
 801036e:	b289      	uxth	r1, r1
 8010370:	1c4f      	adds	r7, r1, #1
 8010372:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010376:	1209      	asrs	r1, r1, #8
 8010378:	f802 1c01 	strb.w	r1, [r2, #-1]
 801037c:	4611      	mov	r1, r2
 801037e:	e7d8      	b.n	8010332 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 8010380:	191a      	adds	r2, r3, r4
 8010382:	4433      	add	r3, r6
 8010384:	b21b      	sxth	r3, r3
 8010386:	4293      	cmp	r3, r2
 8010388:	f340 80f9 	ble.w	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801038c:	edd0 7a07 	vldr	s15, [r0, #28]
 8010390:	ee06 2a90 	vmov	s13, r2
 8010394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8010398:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801039c:	eef4 7ae6 	vcmpe.f32	s15, s13
 80103a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103a4:	f340 80b0 	ble.w	8010508 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80103a8:	ee06 3a10 	vmov	s12, r3
 80103ac:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80103b0:	eddf 5a74 	vldr	s11, [pc, #464]	@ 8010584 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80103b4:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80103b8:	eef4 7ac6 	vcmpe.f32	s15, s12
 80103bc:	ed90 6a08 	vldr	s12, [r0, #32]
 80103c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103c4:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80103c8:	bfd6      	itet	le
 80103ca:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80103ce:	469c      	movgt	ip, r3
 80103d0:	ee17 ca90 	vmovle	ip, s15
 80103d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80103d8:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 8010588 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 80103dc:	ebac 0202 	sub.w	r2, ip, r2
 80103e0:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 80103e4:	eee6 7a07 	vfma.f32	s15, s12, s14
 80103e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80103ec:	188c      	adds	r4, r1, r2
 80103ee:	7c02      	ldrb	r2, [r0, #16]
 80103f0:	b1d2      	cbz	r2, 8010428 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80103f2:	2dff      	cmp	r5, #255	@ 0xff
 80103f4:	d118      	bne.n	8010428 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 80103f6:	42a1      	cmp	r1, r4
 80103f8:	d261      	bcs.n	80104be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 80103fa:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 80103fe:	68c6      	ldr	r6, [r0, #12]
 8010400:	3103      	adds	r1, #3
 8010402:	ee17 7a10 	vmov	r7, s14
 8010406:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 801040a:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 801040e:	f801 6c03 	strb.w	r6, [r1, #-3]
 8010412:	7856      	ldrb	r6, [r2, #1]
 8010414:	f801 6c02 	strb.w	r6, [r1, #-2]
 8010418:	7892      	ldrb	r2, [r2, #2]
 801041a:	f801 2c01 	strb.w	r2, [r1, #-1]
 801041e:	ed90 7a08 	vldr	s14, [r0, #32]
 8010422:	ee77 7a87 	vadd.f32	s15, s15, s14
 8010426:	e7e6      	b.n	80103f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8010428:	68c2      	ldr	r2, [r0, #12]
 801042a:	428c      	cmp	r4, r1
 801042c:	f101 0e03 	add.w	lr, r1, #3
 8010430:	d945      	bls.n	80104be <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8010432:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8010436:	ee17 9a10 	vmov	r9, s14
 801043a:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 801043e:	f898 7003 	ldrb.w	r7, [r8, #3]
 8010442:	fb07 f605 	mul.w	r6, r7, r5
 8010446:	1c77      	adds	r7, r6, #1
 8010448:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 801044c:	123f      	asrs	r7, r7, #8
 801044e:	b2b9      	uxth	r1, r7
 8010450:	43ff      	mvns	r7, r7
 8010452:	b2fe      	uxtb	r6, r7
 8010454:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8010458:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 801045c:	fb19 f906 	smulbb	r9, r9, r6
 8010460:	fb07 9701 	mla	r7, r7, r1, r9
 8010464:	b2bf      	uxth	r7, r7
 8010466:	f107 0901 	add.w	r9, r7, #1
 801046a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801046e:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 8010472:	fb19 f906 	smulbb	r9, r9, r6
 8010476:	123f      	asrs	r7, r7, #8
 8010478:	f80e 7c03 	strb.w	r7, [lr, #-3]
 801047c:	f898 7001 	ldrb.w	r7, [r8, #1]
 8010480:	fb07 9701 	mla	r7, r7, r1, r9
 8010484:	b2bf      	uxth	r7, r7
 8010486:	f107 0901 	add.w	r9, r7, #1
 801048a:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 801048e:	123f      	asrs	r7, r7, #8
 8010490:	f80e 7c02 	strb.w	r7, [lr, #-2]
 8010494:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 8010498:	f898 8002 	ldrb.w	r8, [r8, #2]
 801049c:	fb17 f606 	smulbb	r6, r7, r6
 80104a0:	fb08 6601 	mla	r6, r8, r1, r6
 80104a4:	b2b6      	uxth	r6, r6
 80104a6:	1c71      	adds	r1, r6, #1
 80104a8:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80104ac:	4671      	mov	r1, lr
 80104ae:	1236      	asrs	r6, r6, #8
 80104b0:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80104b4:	ed90 7a08 	vldr	s14, [r0, #32]
 80104b8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80104bc:	e7b5      	b.n	801042a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80104be:	4563      	cmp	r3, ip
 80104c0:	dd5d      	ble.n	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80104c2:	edd0 7a08 	vldr	s15, [r0, #32]
 80104c6:	eba3 030c 	sub.w	r3, r3, ip
 80104ca:	68c4      	ldr	r4, [r0, #12]
 80104cc:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80104d0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80104d4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80104d8:	7c00      	ldrb	r0, [r0, #16]
 80104da:	440b      	add	r3, r1
 80104dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104e0:	bfd8      	it	le
 80104e2:	2200      	movle	r2, #0
 80104e4:	58a2      	ldr	r2, [r4, r2]
 80104e6:	b2d4      	uxtb	r4, r2
 80104e8:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 80104ec:	f3c2 4707 	ubfx	r7, r2, #16, #8
 80104f0:	b160      	cbz	r0, 801050c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80104f2:	2dff      	cmp	r5, #255	@ 0xff
 80104f4:	d10a      	bne.n	801050c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 80104f6:	4299      	cmp	r1, r3
 80104f8:	d241      	bcs.n	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80104fa:	700c      	strb	r4, [r1, #0]
 80104fc:	3103      	adds	r1, #3
 80104fe:	f801 cc02 	strb.w	ip, [r1, #-2]
 8010502:	f801 7c01 	strb.w	r7, [r1, #-1]
 8010506:	e7f6      	b.n	80104f6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8010508:	4694      	mov	ip, r2
 801050a:	e7da      	b.n	80104c2 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 801050c:	0e12      	lsrs	r2, r2, #24
 801050e:	436a      	muls	r2, r5
 8010510:	1c55      	adds	r5, r2, #1
 8010512:	eb05 2522 	add.w	r5, r5, r2, asr #8
 8010516:	122d      	asrs	r5, r5, #8
 8010518:	43ee      	mvns	r6, r5
 801051a:	b2ad      	uxth	r5, r5
 801051c:	fb14 f405 	smulbb	r4, r4, r5
 8010520:	b2f6      	uxtb	r6, r6
 8010522:	fb1c f005 	smulbb	r0, ip, r5
 8010526:	fb17 f505 	smulbb	r5, r7, r5
 801052a:	b2a4      	uxth	r4, r4
 801052c:	b280      	uxth	r0, r0
 801052e:	b2ad      	uxth	r5, r5
 8010530:	428b      	cmp	r3, r1
 8010532:	f101 0203 	add.w	r2, r1, #3
 8010536:	d922      	bls.n	801057e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8010538:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 801053c:	fb01 4106 	mla	r1, r1, r6, r4
 8010540:	b289      	uxth	r1, r1
 8010542:	1c4f      	adds	r7, r1, #1
 8010544:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010548:	1209      	asrs	r1, r1, #8
 801054a:	f802 1c03 	strb.w	r1, [r2, #-3]
 801054e:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 8010552:	fb01 0106 	mla	r1, r1, r6, r0
 8010556:	b289      	uxth	r1, r1
 8010558:	1c4f      	adds	r7, r1, #1
 801055a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801055e:	1209      	asrs	r1, r1, #8
 8010560:	f802 1c02 	strb.w	r1, [r2, #-2]
 8010564:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8010568:	fb01 5106 	mla	r1, r1, r6, r5
 801056c:	b289      	uxth	r1, r1
 801056e:	1c4f      	adds	r7, r1, #1
 8010570:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8010574:	1209      	asrs	r1, r1, #8
 8010576:	f802 1c01 	strb.w	r1, [r2, #-1]
 801057a:	4611      	mov	r1, r2
 801057c:	e7d8      	b.n	8010530 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 801057e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010582:	bf00      	nop
 8010584:	447ffffe 	.word	0x447ffffe
 8010588:	00000000 	.word	0x00000000

0801058c <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 801058c:	4770      	bx	lr

0801058e <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 801058e:	4770      	bx	lr

08010590 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 8010590:	b510      	push	{r4, lr}
 8010592:	4604      	mov	r4, r0
 8010594:	2124      	movs	r1, #36	@ 0x24
 8010596:	f00f fdb2 	bl	80200fe <_ZdlPvj>
 801059a:	4620      	mov	r0, r4
 801059c:	bd10      	pop	{r4, pc}
	...

080105a0 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80105a0:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80105a2:	6803      	ldr	r3, [r0, #0]
 80105a4:	460d      	mov	r5, r1
 80105a6:	4604      	mov	r4, r0
 80105a8:	4601      	mov	r1, r0
 80105aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80105ac:	a802      	add	r0, sp, #8
 80105ae:	4798      	blx	r3
 80105b0:	6828      	ldr	r0, [r5, #0]
 80105b2:	6869      	ldr	r1, [r5, #4]
 80105b4:	466b      	mov	r3, sp
 80105b6:	c303      	stmia	r3!, {r0, r1}
 80105b8:	4668      	mov	r0, sp
 80105ba:	4619      	mov	r1, r3
 80105bc:	f7fd fd06 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80105c0:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80105c2:	b188      	cbz	r0, 80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80105c4:	6803      	ldr	r3, [r0, #0]
 80105c6:	1d21      	adds	r1, r4, #4
 80105c8:	68db      	ldr	r3, [r3, #12]
 80105ca:	4798      	blx	r3
 80105cc:	b160      	cbz	r0, 80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80105ce:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80105d2:	2b00      	cmp	r3, #0
 80105d4:	dd08      	ble.n	80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80105d6:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 80105da:	2d00      	cmp	r5, #0
 80105dc:	dd04      	ble.n	80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80105de:	4a2b      	ldr	r2, [pc, #172]	@ (801068c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 80105e0:	7812      	ldrb	r2, [r2, #0]
 80105e2:	b11a      	cbz	r2, 80105ec <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 80105e4:	2a01      	cmp	r2, #1
 80105e6:	d029      	beq.n	801063c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 80105e8:	b004      	add	sp, #16
 80105ea:	bd70      	pop	{r4, r5, r6, pc}
 80105ec:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80105f0:	441d      	add	r5, r3
 80105f2:	b2ad      	uxth	r5, r5
 80105f4:	b22e      	sxth	r6, r5
 80105f6:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80105fa:	42b3      	cmp	r3, r6
 80105fc:	daf4      	bge.n	80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80105fe:	6823      	ldr	r3, [r4, #0]
 8010600:	4669      	mov	r1, sp
 8010602:	4620      	mov	r0, r4
 8010604:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010606:	4798      	blx	r3
 8010608:	b940      	cbnz	r0, 801061c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801060a:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801060e:	2b01      	cmp	r3, #1
 8010610:	d004      	beq.n	801061c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8010612:	3301      	adds	r3, #1
 8010614:	105b      	asrs	r3, r3, #1
 8010616:	f8ad 3006 	strh.w	r3, [sp, #6]
 801061a:	e7f0      	b.n	80105fe <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 801061c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8010620:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8010624:	4413      	add	r3, r2
 8010626:	b29b      	uxth	r3, r3
 8010628:	441a      	add	r2, r3
 801062a:	f8ad 3002 	strh.w	r3, [sp, #2]
 801062e:	b212      	sxth	r2, r2
 8010630:	4296      	cmp	r6, r2
 8010632:	dae0      	bge.n	80105f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8010634:	1aeb      	subs	r3, r5, r3
 8010636:	f8ad 3006 	strh.w	r3, [sp, #6]
 801063a:	e7dc      	b.n	80105f6 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801063c:	f8bd 5000 	ldrh.w	r5, [sp]
 8010640:	441d      	add	r5, r3
 8010642:	b2ad      	uxth	r5, r5
 8010644:	b22e      	sxth	r6, r5
 8010646:	f9bd 3000 	ldrsh.w	r3, [sp]
 801064a:	42b3      	cmp	r3, r6
 801064c:	dacc      	bge.n	80105e8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 801064e:	6823      	ldr	r3, [r4, #0]
 8010650:	4669      	mov	r1, sp
 8010652:	4620      	mov	r0, r4
 8010654:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8010656:	4798      	blx	r3
 8010658:	b940      	cbnz	r0, 801066c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801065a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801065e:	2b01      	cmp	r3, #1
 8010660:	d004      	beq.n	801066c <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8010662:	3301      	adds	r3, #1
 8010664:	105b      	asrs	r3, r3, #1
 8010666:	f8ad 3004 	strh.w	r3, [sp, #4]
 801066a:	e7f0      	b.n	801064e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 801066c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8010670:	f8bd 3000 	ldrh.w	r3, [sp]
 8010674:	4413      	add	r3, r2
 8010676:	b29b      	uxth	r3, r3
 8010678:	441a      	add	r2, r3
 801067a:	f8ad 3000 	strh.w	r3, [sp]
 801067e:	b212      	sxth	r2, r2
 8010680:	4296      	cmp	r6, r2
 8010682:	dae0      	bge.n	8010646 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 8010684:	1aeb      	subs	r3, r5, r3
 8010686:	f8ad 3004 	strh.w	r3, [sp, #4]
 801068a:	e7dc      	b.n	8010646 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 801068c:	240248f4 	.word	0x240248f4

08010690 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 8010690:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8010692:	6803      	ldr	r3, [r0, #0]
 8010694:	4604      	mov	r4, r0
 8010696:	4601      	mov	r1, r0
 8010698:	4668      	mov	r0, sp
 801069a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801069c:	4798      	blx	r3
 801069e:	2100      	movs	r1, #0
 80106a0:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80106a4:	4668      	mov	r0, sp
 80106a6:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80106aa:	9102      	str	r1, [sp, #8]
 80106ac:	a902      	add	r1, sp, #8
 80106ae:	f8ad 200c 	strh.w	r2, [sp, #12]
 80106b2:	f8ad 300e 	strh.w	r3, [sp, #14]
 80106b6:	f7fd fc89 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80106ba:	6823      	ldr	r3, [r4, #0]
 80106bc:	4669      	mov	r1, sp
 80106be:	4620      	mov	r0, r4
 80106c0:	691b      	ldr	r3, [r3, #16]
 80106c2:	4798      	blx	r3
 80106c4:	b004      	add	sp, #16
 80106c6:	bd10      	pop	{r4, pc}

080106c8 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80106c8:	2101      	movs	r1, #1
 80106ca:	2200      	movs	r2, #0
 80106cc:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80106d0:	490a      	ldr	r1, [pc, #40]	@ (80106fc <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80106d2:	8082      	strh	r2, [r0, #4]
 80106d4:	6001      	str	r1, [r0, #0]
 80106d6:	21ff      	movs	r1, #255	@ 0xff
 80106d8:	80c2      	strh	r2, [r0, #6]
 80106da:	8102      	strh	r2, [r0, #8]
 80106dc:	8142      	strh	r2, [r0, #10]
 80106de:	8182      	strh	r2, [r0, #12]
 80106e0:	81c2      	strh	r2, [r0, #14]
 80106e2:	8202      	strh	r2, [r0, #16]
 80106e4:	8242      	strh	r2, [r0, #18]
 80106e6:	61c2      	str	r2, [r0, #28]
 80106e8:	8402      	strh	r2, [r0, #32]
 80106ea:	8442      	strh	r2, [r0, #34]	@ 0x22
 80106ec:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 80106f0:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 80106f4:	6282      	str	r2, [r0, #40]	@ 0x28
 80106f6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80106fa:	4770      	bx	lr
 80106fc:	08024568 	.word	0x08024568

08010700 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8010700:	2300      	movs	r3, #0
 8010702:	8083      	strh	r3, [r0, #4]
 8010704:	80c3      	strh	r3, [r0, #6]
 8010706:	8003      	strh	r3, [r0, #0]
 8010708:	8043      	strh	r3, [r0, #2]
 801070a:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 801070e:	2bff      	cmp	r3, #255	@ 0xff
 8010710:	bf01      	itttt	eq
 8010712:	890b      	ldrheq	r3, [r1, #8]
 8010714:	8083      	strheq	r3, [r0, #4]
 8010716:	894b      	ldrheq	r3, [r1, #10]
 8010718:	80c3      	strheq	r3, [r0, #6]
 801071a:	4770      	bx	lr

0801071c <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 801071c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801071e:	4604      	mov	r4, r0
 8010720:	466b      	mov	r3, sp
 8010722:	6808      	ldr	r0, [r1, #0]
 8010724:	6849      	ldr	r1, [r1, #4]
 8010726:	c303      	stmia	r3!, {r0, r1}
 8010728:	6823      	ldr	r3, [r4, #0]
 801072a:	4669      	mov	r1, sp
 801072c:	4620      	mov	r0, r4
 801072e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010730:	4798      	blx	r3
 8010732:	4b08      	ldr	r3, [pc, #32]	@ (8010754 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 8010734:	681b      	ldr	r3, [r3, #0]
 8010736:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 801073a:	b10a      	cbz	r2, 8010740 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 801073c:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 801073e:	b900      	cbnz	r0, 8010742 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8010740:	6898      	ldr	r0, [r3, #8]
 8010742:	6803      	ldr	r3, [r0, #0]
 8010744:	4669      	mov	r1, sp
 8010746:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8010748:	6a1d      	ldr	r5, [r3, #32]
 801074a:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 801074e:	47a8      	blx	r5
 8010750:	b003      	add	sp, #12
 8010752:	bd30      	pop	{r4, r5, pc}
 8010754:	240248fc 	.word	0x240248fc

08010758 <_ZN8touchgfx3BoxD1Ev>:
 8010758:	4770      	bx	lr

0801075a <_ZN8touchgfx3BoxD0Ev>:
 801075a:	b510      	push	{r4, lr}
 801075c:	4604      	mov	r4, r0
 801075e:	212c      	movs	r1, #44	@ 0x2c
 8010760:	f00f fccd 	bl	80200fe <_ZdlPvj>
 8010764:	4620      	mov	r0, r4
 8010766:	bd10      	pop	{r4, pc}

08010768 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8010768:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 801076c:	b12a      	cbz	r2, 801077a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801076e:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 8010772:	b112      	cbz	r2, 801077a <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8010774:	6803      	ldr	r3, [r0, #0]
 8010776:	695b      	ldr	r3, [r3, #20]
 8010778:	4718      	bx	r3
 801077a:	4770      	bx	lr

0801077c <_ZN8touchgfx7OutlineD1Ev>:
 801077c:	4770      	bx	lr

0801077e <_ZN8touchgfx7OutlineD0Ev>:
 801077e:	b510      	push	{r4, lr}
 8010780:	4604      	mov	r4, r0
 8010782:	2130      	movs	r1, #48	@ 0x30
 8010784:	f00f fcbb 	bl	80200fe <_ZdlPvj>
 8010788:	4620      	mov	r0, r4
 801078a:	bd10      	pop	{r4, pc}

0801078c <_ZN8touchgfx7Outline5resetEv>:
 801078c:	b510      	push	{r4, lr}
 801078e:	4604      	mov	r4, r0
 8010790:	f000 fe72 	bl	8011478 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8010794:	60e0      	str	r0, [r4, #12]
 8010796:	f000 fe75 	bl	8011484 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801079a:	68e3      	ldr	r3, [r4, #12]
 801079c:	08c0      	lsrs	r0, r0, #3
 801079e:	2200      	movs	r2, #0
 80107a0:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 80107a4:	6123      	str	r3, [r4, #16]
 80107a6:	3801      	subs	r0, #1
 80107a8:	60a2      	str	r2, [r4, #8]
 80107aa:	6060      	str	r0, [r4, #4]
 80107ac:	8019      	strh	r1, [r3, #0]
 80107ae:	8059      	strh	r1, [r3, #2]
 80107b0:	809a      	strh	r2, [r3, #4]
 80107b2:	80da      	strh	r2, [r3, #6]
 80107b4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80107b6:	f023 0301 	bic.w	r3, r3, #1
 80107ba:	f043 0302 	orr.w	r3, r3, #2
 80107be:	6263      	str	r3, [r4, #36]	@ 0x24
 80107c0:	bd10      	pop	{r4, pc}
	...

080107c4 <_ZN8touchgfx7OutlineC1Ev>:
 80107c4:	4b0a      	ldr	r3, [pc, #40]	@ (80107f0 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 80107c6:	b510      	push	{r4, lr}
 80107c8:	6003      	str	r3, [r0, #0]
 80107ca:	2300      	movs	r3, #0
 80107cc:	4604      	mov	r4, r0
 80107ce:	6243      	str	r3, [r0, #36]	@ 0x24
 80107d0:	e9c0 3301 	strd	r3, r3, [r0, #4]
 80107d4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80107d8:	e9c0 3305 	strd	r3, r3, [r0, #20]
 80107dc:	e9c0 3307 	strd	r3, r3, [r0, #28]
 80107e0:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 80107e4:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 80107e8:	f7ff ffd0 	bl	801078c <_ZN8touchgfx7Outline5resetEv>
 80107ec:	4620      	mov	r0, r4
 80107ee:	bd10      	pop	{r4, pc}
 80107f0:	08024648 	.word	0x08024648

080107f4 <_ZN8touchgfx7Outline10renderLineEiiii>:
 80107f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107f8:	b093      	sub	sp, #76	@ 0x4c
 80107fa:	1156      	asrs	r6, r2, #5
 80107fc:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 80107fe:	9305      	str	r3, [sp, #20]
 8010800:	1153      	asrs	r3, r2, #5
 8010802:	f004 051f 	and.w	r5, r4, #31
 8010806:	9303      	str	r3, [sp, #12]
 8010808:	1163      	asrs	r3, r4, #5
 801080a:	9504      	str	r5, [sp, #16]
 801080c:	1165      	asrs	r5, r4, #5
 801080e:	9306      	str	r3, [sp, #24]
 8010810:	f002 031f 	and.w	r3, r2, #31
 8010814:	42ae      	cmp	r6, r5
 8010816:	f040 80f4 	bne.w	8010a02 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801081a:	9c04      	ldr	r4, [sp, #16]
 801081c:	9a05      	ldr	r2, [sp, #20]
 801081e:	42a3      	cmp	r3, r4
 8010820:	ea4f 1e62 	mov.w	lr, r2, asr #5
 8010824:	6902      	ldr	r2, [r0, #16]
 8010826:	d125      	bne.n	8010874 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 8010828:	f9b2 3000 	ldrsh.w	r3, [r2]
 801082c:	459e      	cmp	lr, r3
 801082e:	d103      	bne.n	8010838 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 8010830:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010834:	429e      	cmp	r6, r3
 8010836:	d035      	beq.n	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010838:	88d1      	ldrh	r1, [r2, #6]
 801083a:	8893      	ldrh	r3, [r2, #4]
 801083c:	430b      	orrs	r3, r1
 801083e:	d010      	beq.n	8010862 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010840:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 8010844:	2b00      	cmp	r3, #0
 8010846:	db0c      	blt.n	8010862 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 8010848:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 801084a:	428b      	cmp	r3, r1
 801084c:	da09      	bge.n	8010862 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 801084e:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010852:	428b      	cmp	r3, r1
 8010854:	f103 0301 	add.w	r3, r3, #1
 8010858:	bf38      	it	cc
 801085a:	3208      	addcc	r2, #8
 801085c:	6083      	str	r3, [r0, #8]
 801085e:	bf38      	it	cc
 8010860:	6102      	strcc	r2, [r0, #16]
 8010862:	6903      	ldr	r3, [r0, #16]
 8010864:	9a03      	ldr	r2, [sp, #12]
 8010866:	f8a3 e000 	strh.w	lr, [r3]
 801086a:	805a      	strh	r2, [r3, #2]
 801086c:	2200      	movs	r2, #0
 801086e:	809a      	strh	r2, [r3, #4]
 8010870:	80da      	strh	r2, [r3, #6]
 8010872:	e017      	b.n	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010874:	9c05      	ldr	r4, [sp, #20]
 8010876:	114e      	asrs	r6, r1, #5
 8010878:	f001 0c1f 	and.w	ip, r1, #31
 801087c:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8010880:	f004 041f 	and.w	r4, r4, #31
 8010884:	4576      	cmp	r6, lr
 8010886:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801088a:	9402      	str	r4, [sp, #8]
 801088c:	9c04      	ldr	r4, [sp, #16]
 801088e:	eba4 0403 	sub.w	r4, r4, r3
 8010892:	d10a      	bne.n	80108aa <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8010894:	9b02      	ldr	r3, [sp, #8]
 8010896:	44a0      	add	r8, r4
 8010898:	449c      	add	ip, r3
 801089a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801089e:	fb04 a40c 	mla	r4, r4, ip, sl
 80108a2:	80d4      	strh	r4, [r2, #6]
 80108a4:	b013      	add	sp, #76	@ 0x4c
 80108a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80108aa:	9d05      	ldr	r5, [sp, #20]
 80108ac:	1a69      	subs	r1, r5, r1
 80108ae:	bf51      	iteee	pl
 80108b0:	f1cc 0520 	rsbpl	r5, ip, #32
 80108b4:	fb04 f40c 	mulmi.w	r4, r4, ip
 80108b8:	4249      	negmi	r1, r1
 80108ba:	2500      	movmi	r5, #0
 80108bc:	bf5d      	ittte	pl
 80108be:	436c      	mulpl	r4, r5
 80108c0:	2520      	movpl	r5, #32
 80108c2:	f04f 0901 	movpl.w	r9, #1
 80108c6:	f04f 39ff 	movmi.w	r9, #4294967295
 80108ca:	9501      	str	r5, [sp, #4]
 80108cc:	9f01      	ldr	r7, [sp, #4]
 80108ce:	444e      	add	r6, r9
 80108d0:	fb94 f5f1 	sdiv	r5, r4, r1
 80108d4:	fb01 4415 	mls	r4, r1, r5, r4
 80108d8:	44bc      	add	ip, r7
 80108da:	2c00      	cmp	r4, #0
 80108dc:	bfbc      	itt	lt
 80108de:	f105 35ff 	addlt.w	r5, r5, #4294967295
 80108e2:	1864      	addlt	r4, r4, r1
 80108e4:	44a8      	add	r8, r5
 80108e6:	fb05 ac0c 	mla	ip, r5, ip, sl
 80108ea:	f8a2 8004 	strh.w	r8, [r2, #4]
 80108ee:	f8a2 c006 	strh.w	ip, [r2, #6]
 80108f2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80108f6:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 80108fa:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 80108fe:	ea58 0202 	orrs.w	r2, r8, r2
 8010902:	d011      	beq.n	8010928 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010904:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8010908:	f1b8 0f00 	cmp.w	r8, #0
 801090c:	db0c      	blt.n	8010928 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801090e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010910:	4590      	cmp	r8, r2
 8010912:	da09      	bge.n	8010928 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8010914:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8010918:	4590      	cmp	r8, r2
 801091a:	bf3c      	itt	cc
 801091c:	f10c 0208 	addcc.w	r2, ip, #8
 8010920:	6102      	strcc	r2, [r0, #16]
 8010922:	f108 0201 	add.w	r2, r8, #1
 8010926:	6082      	str	r2, [r0, #8]
 8010928:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801092c:	2700      	movs	r7, #0
 801092e:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 8010932:	45b6      	cmp	lr, r6
 8010934:	f8ac 6000 	strh.w	r6, [ip]
 8010938:	442b      	add	r3, r5
 801093a:	f8ac 2002 	strh.w	r2, [ip, #2]
 801093e:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010942:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010946:	d04b      	beq.n	80109e0 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 8010948:	9f04      	ldr	r7, [sp, #16]
 801094a:	1a64      	subs	r4, r4, r1
 801094c:	f04f 0a00 	mov.w	sl, #0
 8010950:	1aff      	subs	r7, r7, r3
 8010952:	443d      	add	r5, r7
 8010954:	016d      	lsls	r5, r5, #5
 8010956:	fb95 f8f1 	sdiv	r8, r5, r1
 801095a:	fb01 5518 	mls	r5, r1, r8, r5
 801095e:	2d00      	cmp	r5, #0
 8010960:	bfbc      	itt	lt
 8010962:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010966:	186d      	addlt	r5, r5, r1
 8010968:	f108 0701 	add.w	r7, r8, #1
 801096c:	9703      	str	r7, [sp, #12]
 801096e:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010972:	1964      	adds	r4, r4, r5
 8010974:	444e      	add	r6, r9
 8010976:	bf54      	ite	pl
 8010978:	9f03      	ldrpl	r7, [sp, #12]
 801097a:	4647      	movmi	r7, r8
 801097c:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8010980:	bf58      	it	pl
 8010982:	1a64      	subpl	r4, r4, r1
 8010984:	443b      	add	r3, r7
 8010986:	44bb      	add	fp, r7
 8010988:	f8ac b004 	strh.w	fp, [ip, #4]
 801098c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010990:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010994:	f8ac b006 	strh.w	fp, [ip, #6]
 8010998:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801099c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80109a0:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80109a4:	ea5b 0707 	orrs.w	r7, fp, r7
 80109a8:	d011      	beq.n	80109ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80109aa:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80109ae:	f1bb 0f00 	cmp.w	fp, #0
 80109b2:	db0c      	blt.n	80109ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80109b4:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80109b6:	45bb      	cmp	fp, r7
 80109b8:	da09      	bge.n	80109ce <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 80109ba:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80109be:	45bb      	cmp	fp, r7
 80109c0:	bf3c      	itt	cc
 80109c2:	f10c 0708 	addcc.w	r7, ip, #8
 80109c6:	6107      	strcc	r7, [r0, #16]
 80109c8:	f10b 0701 	add.w	r7, fp, #1
 80109cc:	6087      	str	r7, [r0, #8]
 80109ce:	6907      	ldr	r7, [r0, #16]
 80109d0:	45b6      	cmp	lr, r6
 80109d2:	803e      	strh	r6, [r7, #0]
 80109d4:	807a      	strh	r2, [r7, #2]
 80109d6:	f8a7 a004 	strh.w	sl, [r7, #4]
 80109da:	f8a7 a006 	strh.w	sl, [r7, #6]
 80109de:	d1c6      	bne.n	801096e <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 80109e0:	9a04      	ldr	r2, [sp, #16]
 80109e2:	1ad3      	subs	r3, r2, r3
 80109e4:	6902      	ldr	r2, [r0, #16]
 80109e6:	8891      	ldrh	r1, [r2, #4]
 80109e8:	88d6      	ldrh	r6, [r2, #6]
 80109ea:	4419      	add	r1, r3
 80109ec:	8091      	strh	r1, [r2, #4]
 80109ee:	9902      	ldr	r1, [sp, #8]
 80109f0:	f101 0c20 	add.w	ip, r1, #32
 80109f4:	9901      	ldr	r1, [sp, #4]
 80109f6:	ebac 0c01 	sub.w	ip, ip, r1
 80109fa:	fb03 630c 	mla	r3, r3, ip, r6
 80109fe:	80d3      	strh	r3, [r2, #6]
 8010a00:	e750      	b.n	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010a02:	9d05      	ldr	r5, [sp, #20]
 8010a04:	1aa2      	subs	r2, r4, r2
 8010a06:	eba5 0501 	sub.w	r5, r5, r1
 8010a0a:	9202      	str	r2, [sp, #8]
 8010a0c:	9508      	str	r5, [sp, #32]
 8010a0e:	f140 8128 	bpl.w	8010c62 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8010a12:	9a03      	ldr	r2, [sp, #12]
 8010a14:	2a00      	cmp	r2, #0
 8010a16:	f6ff af45 	blt.w	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010a1a:	9a02      	ldr	r2, [sp, #8]
 8010a1c:	f04f 34ff 	mov.w	r4, #4294967295
 8010a20:	4252      	negs	r2, r2
 8010a22:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010a24:	2400      	movs	r4, #0
 8010a26:	9202      	str	r2, [sp, #8]
 8010a28:	9a06      	ldr	r2, [sp, #24]
 8010a2a:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 8010a2e:	9206      	str	r2, [sp, #24]
 8010a30:	462a      	mov	r2, r5
 8010a32:	435a      	muls	r2, r3
 8010a34:	9401      	str	r4, [sp, #4]
 8010a36:	9c02      	ldr	r4, [sp, #8]
 8010a38:	9d02      	ldr	r5, [sp, #8]
 8010a3a:	fb92 f4f4 	sdiv	r4, r2, r4
 8010a3e:	fb05 2214 	mls	r2, r5, r4, r2
 8010a42:	2a00      	cmp	r2, #0
 8010a44:	9207      	str	r2, [sp, #28]
 8010a46:	bfbc      	itt	lt
 8010a48:	1952      	addlt	r2, r2, r5
 8010a4a:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010a4e:	6905      	ldr	r5, [r0, #16]
 8010a50:	bfb8      	it	lt
 8010a52:	9207      	strlt	r2, [sp, #28]
 8010a54:	eb04 0901 	add.w	r9, r4, r1
 8010a58:	9a01      	ldr	r2, [sp, #4]
 8010a5a:	ea4f 1669 	mov.w	r6, r9, asr #5
 8010a5e:	429a      	cmp	r2, r3
 8010a60:	f040 8111 	bne.w	8010c86 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 8010a64:	f9b5 3000 	ldrsh.w	r3, [r5]
 8010a68:	429e      	cmp	r6, r3
 8010a6a:	d104      	bne.n	8010a76 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 8010a6c:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8010a70:	9a03      	ldr	r2, [sp, #12]
 8010a72:	429a      	cmp	r2, r3
 8010a74:	d01b      	beq.n	8010aae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010a76:	88ea      	ldrh	r2, [r5, #6]
 8010a78:	88ab      	ldrh	r3, [r5, #4]
 8010a7a:	4313      	orrs	r3, r2
 8010a7c:	d010      	beq.n	8010aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010a7e:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8010a82:	2a00      	cmp	r2, #0
 8010a84:	db0c      	blt.n	8010aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010a86:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010a88:	429a      	cmp	r2, r3
 8010a8a:	da09      	bge.n	8010aa0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8010a8c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8010a90:	429a      	cmp	r2, r3
 8010a92:	f102 0201 	add.w	r2, r2, #1
 8010a96:	bf38      	it	cc
 8010a98:	3508      	addcc	r5, #8
 8010a9a:	6082      	str	r2, [r0, #8]
 8010a9c:	bf38      	it	cc
 8010a9e:	6105      	strcc	r5, [r0, #16]
 8010aa0:	6903      	ldr	r3, [r0, #16]
 8010aa2:	9a03      	ldr	r2, [sp, #12]
 8010aa4:	801e      	strh	r6, [r3, #0]
 8010aa6:	805a      	strh	r2, [r3, #2]
 8010aa8:	2200      	movs	r2, #0
 8010aaa:	809a      	strh	r2, [r3, #4]
 8010aac:	80da      	strh	r2, [r3, #6]
 8010aae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010ab0:	9a03      	ldr	r2, [sp, #12]
 8010ab2:	6901      	ldr	r1, [r0, #16]
 8010ab4:	441a      	add	r2, r3
 8010ab6:	f9b1 3000 	ldrsh.w	r3, [r1]
 8010aba:	42b3      	cmp	r3, r6
 8010abc:	d103      	bne.n	8010ac6 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8010abe:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8010ac2:	429a      	cmp	r2, r3
 8010ac4:	d01a      	beq.n	8010afc <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8010ac6:	88cc      	ldrh	r4, [r1, #6]
 8010ac8:	888b      	ldrh	r3, [r1, #4]
 8010aca:	4323      	orrs	r3, r4
 8010acc:	d010      	beq.n	8010af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010ace:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010ad2:	2c00      	cmp	r4, #0
 8010ad4:	db0c      	blt.n	8010af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010ad6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010ad8:	429c      	cmp	r4, r3
 8010ada:	da09      	bge.n	8010af0 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8010adc:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010ae0:	429c      	cmp	r4, r3
 8010ae2:	f104 0401 	add.w	r4, r4, #1
 8010ae6:	bf38      	it	cc
 8010ae8:	3108      	addcc	r1, #8
 8010aea:	6084      	str	r4, [r0, #8]
 8010aec:	bf38      	it	cc
 8010aee:	6101      	strcc	r1, [r0, #16]
 8010af0:	6903      	ldr	r3, [r0, #16]
 8010af2:	2100      	movs	r1, #0
 8010af4:	801e      	strh	r6, [r3, #0]
 8010af6:	805a      	strh	r2, [r3, #2]
 8010af8:	8099      	strh	r1, [r3, #4]
 8010afa:	80d9      	strh	r1, [r3, #6]
 8010afc:	9b06      	ldr	r3, [sp, #24]
 8010afe:	4293      	cmp	r3, r2
 8010b00:	f000 8082 	beq.w	8010c08 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8010b04:	9b08      	ldr	r3, [sp, #32]
 8010b06:	9902      	ldr	r1, [sp, #8]
 8010b08:	015b      	lsls	r3, r3, #5
 8010b0a:	9c02      	ldr	r4, [sp, #8]
 8010b0c:	fb93 f1f1 	sdiv	r1, r3, r1
 8010b10:	fb04 3311 	mls	r3, r4, r1, r3
 8010b14:	9103      	str	r1, [sp, #12]
 8010b16:	2b00      	cmp	r3, #0
 8010b18:	9308      	str	r3, [sp, #32]
 8010b1a:	da04      	bge.n	8010b26 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8010b1c:	1e4b      	subs	r3, r1, #1
 8010b1e:	9303      	str	r3, [sp, #12]
 8010b20:	9b08      	ldr	r3, [sp, #32]
 8010b22:	4423      	add	r3, r4
 8010b24:	9308      	str	r3, [sp, #32]
 8010b26:	9b07      	ldr	r3, [sp, #28]
 8010b28:	464f      	mov	r7, r9
 8010b2a:	9902      	ldr	r1, [sp, #8]
 8010b2c:	2600      	movs	r6, #0
 8010b2e:	1a5b      	subs	r3, r3, r1
 8010b30:	9307      	str	r3, [sp, #28]
 8010b32:	9b01      	ldr	r3, [sp, #4]
 8010b34:	f1c3 0320 	rsb	r3, r3, #32
 8010b38:	930e      	str	r3, [sp, #56]	@ 0x38
 8010b3a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8010b3c:	9b01      	ldr	r3, [sp, #4]
 8010b3e:	1a5b      	subs	r3, r3, r1
 8010b40:	930a      	str	r3, [sp, #40]	@ 0x28
 8010b42:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8010b46:	185b      	adds	r3, r3, r1
 8010b48:	bf58      	it	pl
 8010b4a:	9902      	ldrpl	r1, [sp, #8]
 8010b4c:	9307      	str	r3, [sp, #28]
 8010b4e:	bf57      	itett	pl
 8010b50:	1a5b      	subpl	r3, r3, r1
 8010b52:	9903      	ldrmi	r1, [sp, #12]
 8010b54:	9307      	strpl	r3, [sp, #28]
 8010b56:	9b03      	ldrpl	r3, [sp, #12]
 8010b58:	bf58      	it	pl
 8010b5a:	1c59      	addpl	r1, r3, #1
 8010b5c:	2a00      	cmp	r2, #0
 8010b5e:	4489      	add	r9, r1
 8010b60:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8010b64:	db2e      	blt.n	8010bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010b66:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010b68:	4293      	cmp	r3, r2
 8010b6a:	dd2b      	ble.n	8010bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010b6c:	9c01      	ldr	r4, [sp, #4]
 8010b6e:	6905      	ldr	r5, [r0, #16]
 8010b70:	46a0      	mov	r8, r4
 8010b72:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8010b74:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8010b78:	45a0      	cmp	r8, r4
 8010b7a:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8010b7e:	f040 814c 	bne.w	8010e1a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8010b82:	f9b5 1000 	ldrsh.w	r1, [r5]
 8010b86:	4551      	cmp	r1, sl
 8010b88:	d103      	bne.n	8010b92 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8010b8a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010b8e:	4291      	cmp	r1, r2
 8010b90:	d018      	beq.n	8010bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010b92:	ea5c 010e 	orrs.w	r1, ip, lr
 8010b96:	d00f      	beq.n	8010bb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010b98:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8010b9c:	2900      	cmp	r1, #0
 8010b9e:	db0b      	blt.n	8010bb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010ba0:	428b      	cmp	r3, r1
 8010ba2:	dd09      	ble.n	8010bb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8010ba4:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8010ba8:	4299      	cmp	r1, r3
 8010baa:	f101 0101 	add.w	r1, r1, #1
 8010bae:	bf38      	it	cc
 8010bb0:	3508      	addcc	r5, #8
 8010bb2:	6081      	str	r1, [r0, #8]
 8010bb4:	bf38      	it	cc
 8010bb6:	6105      	strcc	r5, [r0, #16]
 8010bb8:	6903      	ldr	r3, [r0, #16]
 8010bba:	f8a3 a000 	strh.w	sl, [r3]
 8010bbe:	805a      	strh	r2, [r3, #2]
 8010bc0:	809e      	strh	r6, [r3, #4]
 8010bc2:	80de      	strh	r6, [r3, #6]
 8010bc4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8010bc6:	6901      	ldr	r1, [r0, #16]
 8010bc8:	441a      	add	r2, r3
 8010bca:	88cc      	ldrh	r4, [r1, #6]
 8010bcc:	888b      	ldrh	r3, [r1, #4]
 8010bce:	4323      	orrs	r3, r4
 8010bd0:	d010      	beq.n	8010bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010bd2:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8010bd6:	2c00      	cmp	r4, #0
 8010bd8:	db0c      	blt.n	8010bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010bda:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8010bdc:	429c      	cmp	r4, r3
 8010bde:	da09      	bge.n	8010bf4 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8010be0:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8010be4:	429c      	cmp	r4, r3
 8010be6:	f104 0401 	add.w	r4, r4, #1
 8010bea:	bf38      	it	cc
 8010bec:	3108      	addcc	r1, #8
 8010bee:	6084      	str	r4, [r0, #8]
 8010bf0:	bf38      	it	cc
 8010bf2:	6101      	strcc	r1, [r0, #16]
 8010bf4:	6903      	ldr	r3, [r0, #16]
 8010bf6:	464f      	mov	r7, r9
 8010bf8:	f8a3 a000 	strh.w	sl, [r3]
 8010bfc:	805a      	strh	r2, [r3, #2]
 8010bfe:	809e      	strh	r6, [r3, #4]
 8010c00:	80de      	strh	r6, [r3, #6]
 8010c02:	9b06      	ldr	r3, [sp, #24]
 8010c04:	4293      	cmp	r3, r2
 8010c06:	d19c      	bne.n	8010b42 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8010c08:	9b01      	ldr	r3, [sp, #4]
 8010c0a:	6907      	ldr	r7, [r0, #16]
 8010c0c:	f1c3 0620 	rsb	r6, r3, #32
 8010c10:	9b05      	ldr	r3, [sp, #20]
 8010c12:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8010c16:	9b04      	ldr	r3, [sp, #16]
 8010c18:	429e      	cmp	r6, r3
 8010c1a:	f040 81c7 	bne.w	8010fac <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8010c1e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8010c22:	459e      	cmp	lr, r3
 8010c24:	d104      	bne.n	8010c30 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8010c26:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c2a:	429a      	cmp	r2, r3
 8010c2c:	f43f ae3a 	beq.w	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010c30:	88f9      	ldrh	r1, [r7, #6]
 8010c32:	88bb      	ldrh	r3, [r7, #4]
 8010c34:	430b      	orrs	r3, r1
 8010c36:	d010      	beq.n	8010c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010c38:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8010c3c:	2b00      	cmp	r3, #0
 8010c3e:	db0c      	blt.n	8010c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010c40:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8010c42:	428b      	cmp	r3, r1
 8010c44:	da09      	bge.n	8010c5a <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8010c46:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8010c4a:	428b      	cmp	r3, r1
 8010c4c:	f103 0301 	add.w	r3, r3, #1
 8010c50:	bf38      	it	cc
 8010c52:	3708      	addcc	r7, #8
 8010c54:	6083      	str	r3, [r0, #8]
 8010c56:	bf38      	it	cc
 8010c58:	6107      	strcc	r7, [r0, #16]
 8010c5a:	6903      	ldr	r3, [r0, #16]
 8010c5c:	f8a3 e000 	strh.w	lr, [r3]
 8010c60:	e603      	b.n	801086a <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8010c62:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8010c64:	9c03      	ldr	r4, [sp, #12]
 8010c66:	42a2      	cmp	r2, r4
 8010c68:	f6ff ae1c 	blt.w	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010c6c:	9c06      	ldr	r4, [sp, #24]
 8010c6e:	42a2      	cmp	r2, r4
 8010c70:	9c08      	ldr	r4, [sp, #32]
 8010c72:	bfbc      	itt	lt
 8010c74:	3201      	addlt	r2, #1
 8010c76:	9206      	strlt	r2, [sp, #24]
 8010c78:	f1c3 0220 	rsb	r2, r3, #32
 8010c7c:	4362      	muls	r2, r4
 8010c7e:	2401      	movs	r4, #1
 8010c80:	940b      	str	r4, [sp, #44]	@ 0x2c
 8010c82:	2420      	movs	r4, #32
 8010c84:	e6d6      	b.n	8010a34 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8010c86:	ea4f 1861 	mov.w	r8, r1, asr #5
 8010c8a:	f009 021f 	and.w	r2, r9, #31
 8010c8e:	f001 011f 	and.w	r1, r1, #31
 8010c92:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8010c96:	920c      	str	r2, [sp, #48]	@ 0x30
 8010c98:	45b0      	cmp	r8, r6
 8010c9a:	9a01      	ldr	r2, [sp, #4]
 8010c9c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8010ca0:	eba2 0203 	sub.w	r2, r2, r3
 8010ca4:	d108      	bne.n	8010cb8 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8010ca6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010ca8:	4496      	add	lr, r2
 8010caa:	4419      	add	r1, r3
 8010cac:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010cb0:	fb02 a101 	mla	r1, r2, r1, sl
 8010cb4:	80e9      	strh	r1, [r5, #6]
 8010cb6:	e6fa      	b.n	8010aae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010cb8:	2c00      	cmp	r4, #0
 8010cba:	f2c0 80a7 	blt.w	8010e0c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8010cbe:	2701      	movs	r7, #1
 8010cc0:	f1c1 0c20 	rsb	ip, r1, #32
 8010cc4:	970a      	str	r7, [sp, #40]	@ 0x28
 8010cc6:	2720      	movs	r7, #32
 8010cc8:	fb02 f20c 	mul.w	r2, r2, ip
 8010ccc:	9709      	str	r7, [sp, #36]	@ 0x24
 8010cce:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8010cd0:	fb92 fcf4 	sdiv	ip, r2, r4
 8010cd4:	fb04 221c 	mls	r2, r4, ip, r2
 8010cd8:	4439      	add	r1, r7
 8010cda:	2a00      	cmp	r2, #0
 8010cdc:	bfbc      	itt	lt
 8010cde:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8010ce2:	1912      	addlt	r2, r2, r4
 8010ce4:	fb0c a101 	mla	r1, ip, r1, sl
 8010ce8:	44e6      	add	lr, ip
 8010cea:	80e9      	strh	r1, [r5, #6]
 8010cec:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8010cee:	f8a5 e004 	strh.w	lr, [r5, #4]
 8010cf2:	eb08 0501 	add.w	r5, r8, r1
 8010cf6:	6901      	ldr	r1, [r0, #16]
 8010cf8:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8010cfc:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8010d00:	ea58 070e 	orrs.w	r7, r8, lr
 8010d04:	d010      	beq.n	8010d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010d06:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8010d0a:	f1be 0f00 	cmp.w	lr, #0
 8010d0e:	db0b      	blt.n	8010d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010d10:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010d12:	45be      	cmp	lr, r7
 8010d14:	da08      	bge.n	8010d28 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8010d16:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010d1a:	45be      	cmp	lr, r7
 8010d1c:	bf3c      	itt	cc
 8010d1e:	3108      	addcc	r1, #8
 8010d20:	6101      	strcc	r1, [r0, #16]
 8010d22:	f10e 0101 	add.w	r1, lr, #1
 8010d26:	6081      	str	r1, [r0, #8]
 8010d28:	6901      	ldr	r1, [r0, #16]
 8010d2a:	f04f 0e00 	mov.w	lr, #0
 8010d2e:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8010d32:	42ae      	cmp	r6, r5
 8010d34:	800d      	strh	r5, [r1, #0]
 8010d36:	4463      	add	r3, ip
 8010d38:	f8a1 8002 	strh.w	r8, [r1, #2]
 8010d3c:	f8a1 e004 	strh.w	lr, [r1, #4]
 8010d40:	f8a1 e006 	strh.w	lr, [r1, #6]
 8010d44:	d053      	beq.n	8010dee <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8010d46:	9901      	ldr	r1, [sp, #4]
 8010d48:	1b12      	subs	r2, r2, r4
 8010d4a:	1ac9      	subs	r1, r1, r3
 8010d4c:	4461      	add	r1, ip
 8010d4e:	0149      	lsls	r1, r1, #5
 8010d50:	fb91 fef4 	sdiv	lr, r1, r4
 8010d54:	fb04 111e 	mls	r1, r4, lr, r1
 8010d58:	2900      	cmp	r1, #0
 8010d5a:	bfbc      	itt	lt
 8010d5c:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8010d60:	1909      	addlt	r1, r1, r4
 8010d62:	f10e 0701 	add.w	r7, lr, #1
 8010d66:	970d      	str	r7, [sp, #52]	@ 0x34
 8010d68:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8010d6c:	1852      	adds	r2, r2, r1
 8010d6e:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8010d70:	bf54      	ite	pl
 8010d72:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8010d76:	46f4      	movmi	ip, lr
 8010d78:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8010d7c:	bf58      	it	pl
 8010d7e:	1b12      	subpl	r2, r2, r4
 8010d80:	4463      	add	r3, ip
 8010d82:	443d      	add	r5, r7
 8010d84:	44e3      	add	fp, ip
 8010d86:	f8aa b004 	strh.w	fp, [sl, #4]
 8010d8a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8010d8e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8010d92:	f8aa b006 	strh.w	fp, [sl, #6]
 8010d96:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010d9a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8010d9e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8010da2:	ea5b 070a 	orrs.w	r7, fp, sl
 8010da6:	d014      	beq.n	8010dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010da8:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8010dac:	f1ba 0f00 	cmp.w	sl, #0
 8010db0:	db0f      	blt.n	8010dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010db2:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010db4:	45ba      	cmp	sl, r7
 8010db6:	da0c      	bge.n	8010dd2 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8010db8:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8010dbc:	45ba      	cmp	sl, r7
 8010dbe:	f10a 0a01 	add.w	sl, sl, #1
 8010dc2:	bf38      	it	cc
 8010dc4:	f10c 0c08 	addcc.w	ip, ip, #8
 8010dc8:	f8c0 a008 	str.w	sl, [r0, #8]
 8010dcc:	bf38      	it	cc
 8010dce:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8010dd2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010dd6:	f04f 0700 	mov.w	r7, #0
 8010dda:	42ae      	cmp	r6, r5
 8010ddc:	f8ac 5000 	strh.w	r5, [ip]
 8010de0:	f8ac 8002 	strh.w	r8, [ip, #2]
 8010de4:	f8ac 7004 	strh.w	r7, [ip, #4]
 8010de8:	f8ac 7006 	strh.w	r7, [ip, #6]
 8010dec:	d1bc      	bne.n	8010d68 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8010dee:	6904      	ldr	r4, [r0, #16]
 8010df0:	9a01      	ldr	r2, [sp, #4]
 8010df2:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010df4:	1ad3      	subs	r3, r2, r3
 8010df6:	88a2      	ldrh	r2, [r4, #4]
 8010df8:	3120      	adds	r1, #32
 8010dfa:	441a      	add	r2, r3
 8010dfc:	80a2      	strh	r2, [r4, #4]
 8010dfe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8010e00:	1a89      	subs	r1, r1, r2
 8010e02:	88e2      	ldrh	r2, [r4, #6]
 8010e04:	fb03 2301 	mla	r3, r3, r1, r2
 8010e08:	80e3      	strh	r3, [r4, #6]
 8010e0a:	e650      	b.n	8010aae <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8010e0c:	f04f 37ff 	mov.w	r7, #4294967295
 8010e10:	434a      	muls	r2, r1
 8010e12:	4264      	negs	r4, r4
 8010e14:	970a      	str	r7, [sp, #40]	@ 0x28
 8010e16:	2700      	movs	r7, #0
 8010e18:	e758      	b.n	8010ccc <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8010e1a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8010e1e:	f009 031f 	and.w	r3, r9, #31
 8010e22:	f007 071f 	and.w	r7, r7, #31
 8010e26:	fa1f fc8c 	uxth.w	ip, ip
 8010e2a:	45d0      	cmp	r8, sl
 8010e2c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8010e2e:	fa1f fe8e 	uxth.w	lr, lr
 8010e32:	d10a      	bne.n	8010e4a <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8010e34:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e36:	449c      	add	ip, r3
 8010e38:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8010e3a:	441f      	add	r7, r3
 8010e3c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010e3e:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010e42:	fb03 e707 	mla	r7, r3, r7, lr
 8010e46:	80ef      	strh	r7, [r5, #6]
 8010e48:	e6bc      	b.n	8010bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010e4a:	2900      	cmp	r1, #0
 8010e4c:	f2c0 80a6 	blt.w	8010f9c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8010e50:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8010e52:	f1c7 0320 	rsb	r3, r7, #32
 8010e56:	4363      	muls	r3, r4
 8010e58:	2401      	movs	r4, #1
 8010e5a:	940d      	str	r4, [sp, #52]	@ 0x34
 8010e5c:	2420      	movs	r4, #32
 8010e5e:	940c      	str	r4, [sp, #48]	@ 0x30
 8010e60:	fb93 f4f1 	sdiv	r4, r3, r1
 8010e64:	fb01 3b14 	mls	fp, r1, r4, r3
 8010e68:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010e6a:	f1bb 0f00 	cmp.w	fp, #0
 8010e6e:	441f      	add	r7, r3
 8010e70:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8010e72:	bfbc      	itt	lt
 8010e74:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8010e78:	448b      	addlt	fp, r1
 8010e7a:	fb04 e707 	mla	r7, r4, r7, lr
 8010e7e:	44a4      	add	ip, r4
 8010e80:	80ef      	strh	r7, [r5, #6]
 8010e82:	f8a5 c004 	strh.w	ip, [r5, #4]
 8010e86:	eb08 0503 	add.w	r5, r8, r3
 8010e8a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8010e8e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8010e92:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8010e96:	ea5e 0307 	orrs.w	r3, lr, r7
 8010e9a:	d011      	beq.n	8010ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010e9c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8010ea0:	f1be 0f00 	cmp.w	lr, #0
 8010ea4:	db0c      	blt.n	8010ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010ea6:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010ea8:	45be      	cmp	lr, r7
 8010eaa:	da09      	bge.n	8010ec0 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8010eac:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8010eb0:	45be      	cmp	lr, r7
 8010eb2:	bf3c      	itt	cc
 8010eb4:	f10c 0708 	addcc.w	r7, ip, #8
 8010eb8:	6107      	strcc	r7, [r0, #16]
 8010eba:	f10e 0701 	add.w	r7, lr, #1
 8010ebe:	6087      	str	r7, [r0, #8]
 8010ec0:	6907      	ldr	r7, [r0, #16]
 8010ec2:	b213      	sxth	r3, r2
 8010ec4:	4555      	cmp	r5, sl
 8010ec6:	9310      	str	r3, [sp, #64]	@ 0x40
 8010ec8:	807b      	strh	r3, [r7, #2]
 8010eca:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8010ecc:	803d      	strh	r5, [r7, #0]
 8010ece:	80be      	strh	r6, [r7, #4]
 8010ed0:	eb04 0c03 	add.w	ip, r4, r3
 8010ed4:	80fe      	strh	r6, [r7, #6]
 8010ed6:	d050      	beq.n	8010f7a <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8010ed8:	9b01      	ldr	r3, [sp, #4]
 8010eda:	eba3 070c 	sub.w	r7, r3, ip
 8010ede:	ebab 0301 	sub.w	r3, fp, r1
 8010ee2:	443c      	add	r4, r7
 8010ee4:	9309      	str	r3, [sp, #36]	@ 0x24
 8010ee6:	0164      	lsls	r4, r4, #5
 8010ee8:	fb94 f8f1 	sdiv	r8, r4, r1
 8010eec:	fb01 4418 	mls	r4, r1, r8, r4
 8010ef0:	2c00      	cmp	r4, #0
 8010ef2:	bfbc      	itt	lt
 8010ef4:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8010ef8:	1864      	addlt	r4, r4, r1
 8010efa:	f108 0701 	add.w	r7, r8, #1
 8010efe:	9711      	str	r7, [sp, #68]	@ 0x44
 8010f00:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010f02:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010f06:	191b      	adds	r3, r3, r4
 8010f08:	f8be b004 	ldrh.w	fp, [lr, #4]
 8010f0c:	bf54      	ite	pl
 8010f0e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8010f10:	4647      	movmi	r7, r8
 8010f12:	9309      	str	r3, [sp, #36]	@ 0x24
 8010f14:	bf58      	it	pl
 8010f16:	1a5b      	subpl	r3, r3, r1
 8010f18:	44bb      	add	fp, r7
 8010f1a:	44bc      	add	ip, r7
 8010f1c:	bf58      	it	pl
 8010f1e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8010f20:	f8ae b004 	strh.w	fp, [lr, #4]
 8010f24:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010f28:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8010f2c:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8010f2e:	f8ae b006 	strh.w	fp, [lr, #6]
 8010f32:	443d      	add	r5, r7
 8010f34:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8010f38:	f8be b006 	ldrh.w	fp, [lr, #6]
 8010f3c:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8010f40:	ea5b 0307 	orrs.w	r3, fp, r7
 8010f44:	d011      	beq.n	8010f6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010f46:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8010f4a:	f1bb 0f00 	cmp.w	fp, #0
 8010f4e:	db0c      	blt.n	8010f6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010f50:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8010f52:	45bb      	cmp	fp, r7
 8010f54:	da09      	bge.n	8010f6a <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8010f56:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8010f5a:	45bb      	cmp	fp, r7
 8010f5c:	bf3c      	itt	cc
 8010f5e:	f10e 0708 	addcc.w	r7, lr, #8
 8010f62:	6107      	strcc	r7, [r0, #16]
 8010f64:	f10b 0701 	add.w	r7, fp, #1
 8010f68:	6087      	str	r7, [r0, #8]
 8010f6a:	6907      	ldr	r7, [r0, #16]
 8010f6c:	4555      	cmp	r5, sl
 8010f6e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8010f70:	803d      	strh	r5, [r7, #0]
 8010f72:	807b      	strh	r3, [r7, #2]
 8010f74:	80be      	strh	r6, [r7, #4]
 8010f76:	80fe      	strh	r6, [r7, #6]
 8010f78:	d1c2      	bne.n	8010f00 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8010f7a:	9b01      	ldr	r3, [sp, #4]
 8010f7c:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8010f7e:	eba3 0c0c 	sub.w	ip, r3, ip
 8010f82:	6903      	ldr	r3, [r0, #16]
 8010f84:	3720      	adds	r7, #32
 8010f86:	8899      	ldrh	r1, [r3, #4]
 8010f88:	4461      	add	r1, ip
 8010f8a:	8099      	strh	r1, [r3, #4]
 8010f8c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8010f8e:	1a7f      	subs	r7, r7, r1
 8010f90:	88d9      	ldrh	r1, [r3, #6]
 8010f92:	fb0c 1c07 	mla	ip, ip, r7, r1
 8010f96:	f8a3 c006 	strh.w	ip, [r3, #6]
 8010f9a:	e613      	b.n	8010bc4 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8010f9c:	f04f 34ff 	mov.w	r4, #4294967295
 8010fa0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8010fa2:	4249      	negs	r1, r1
 8010fa4:	940d      	str	r4, [sp, #52]	@ 0x34
 8010fa6:	2400      	movs	r4, #0
 8010fa8:	437b      	muls	r3, r7
 8010faa:	e758      	b.n	8010e5e <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8010fac:	9905      	ldr	r1, [sp, #20]
 8010fae:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8010fb2:	f009 0c1f 	and.w	ip, r9, #31
 8010fb6:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8010fba:	f001 011f 	and.w	r1, r1, #31
 8010fbe:	45f3      	cmp	fp, lr
 8010fc0:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8010fc4:	9102      	str	r1, [sp, #8]
 8010fc6:	9904      	ldr	r1, [sp, #16]
 8010fc8:	eba1 0406 	sub.w	r4, r1, r6
 8010fcc:	d108      	bne.n	8010fe0 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8010fce:	9b02      	ldr	r3, [sp, #8]
 8010fd0:	44a0      	add	r8, r4
 8010fd2:	449c      	add	ip, r3
 8010fd4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8010fd8:	fb04 a40c 	mla	r4, r4, ip, sl
 8010fdc:	80fc      	strh	r4, [r7, #6]
 8010fde:	e461      	b.n	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8010fe0:	9905      	ldr	r1, [sp, #20]
 8010fe2:	ebb1 0109 	subs.w	r1, r1, r9
 8010fe6:	bf51      	iteee	pl
 8010fe8:	f1cc 0520 	rsbpl	r5, ip, #32
 8010fec:	fb04 f40c 	mulmi.w	r4, r4, ip
 8010ff0:	4249      	negmi	r1, r1
 8010ff2:	2500      	movmi	r5, #0
 8010ff4:	bf5d      	ittte	pl
 8010ff6:	436c      	mulpl	r4, r5
 8010ff8:	2520      	movpl	r5, #32
 8010ffa:	f04f 0901 	movpl.w	r9, #1
 8010ffe:	f04f 39ff 	movmi.w	r9, #4294967295
 8011002:	9501      	str	r5, [sp, #4]
 8011004:	9b01      	ldr	r3, [sp, #4]
 8011006:	fb94 f5f1 	sdiv	r5, r4, r1
 801100a:	fb01 4415 	mls	r4, r1, r5, r4
 801100e:	449c      	add	ip, r3
 8011010:	eb0b 0309 	add.w	r3, fp, r9
 8011014:	2c00      	cmp	r4, #0
 8011016:	bfbc      	itt	lt
 8011018:	f105 35ff 	addlt.w	r5, r5, #4294967295
 801101c:	1864      	addlt	r4, r4, r1
 801101e:	44a8      	add	r8, r5
 8011020:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011024:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011028:	f8a7 c006 	strh.w	ip, [r7, #6]
 801102c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011030:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011034:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011038:	ea58 0707 	orrs.w	r7, r8, r7
 801103c:	d011      	beq.n	8011062 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801103e:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011042:	f1b8 0f00 	cmp.w	r8, #0
 8011046:	db0c      	blt.n	8011062 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011048:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801104a:	45b8      	cmp	r8, r7
 801104c:	da09      	bge.n	8011062 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 801104e:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8011052:	45b8      	cmp	r8, r7
 8011054:	bf3c      	itt	cc
 8011056:	f10c 0708 	addcc.w	r7, ip, #8
 801105a:	6107      	strcc	r7, [r0, #16]
 801105c:	f108 0701 	add.w	r7, r8, #1
 8011060:	6087      	str	r7, [r0, #8]
 8011062:	6907      	ldr	r7, [r0, #16]
 8011064:	f04f 0c00 	mov.w	ip, #0
 8011068:	b212      	sxth	r2, r2
 801106a:	459e      	cmp	lr, r3
 801106c:	803b      	strh	r3, [r7, #0]
 801106e:	442e      	add	r6, r5
 8011070:	807a      	strh	r2, [r7, #2]
 8011072:	f8a7 c004 	strh.w	ip, [r7, #4]
 8011076:	f8a7 c006 	strh.w	ip, [r7, #6]
 801107a:	d04b      	beq.n	8011114 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 801107c:	9f04      	ldr	r7, [sp, #16]
 801107e:	1a64      	subs	r4, r4, r1
 8011080:	f04f 0a00 	mov.w	sl, #0
 8011084:	1bbf      	subs	r7, r7, r6
 8011086:	443d      	add	r5, r7
 8011088:	016d      	lsls	r5, r5, #5
 801108a:	fb95 f8f1 	sdiv	r8, r5, r1
 801108e:	fb01 5518 	mls	r5, r1, r8, r5
 8011092:	4565      	cmp	r5, ip
 8011094:	bfbc      	itt	lt
 8011096:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801109a:	186d      	addlt	r5, r5, r1
 801109c:	f108 0701 	add.w	r7, r8, #1
 80110a0:	9703      	str	r7, [sp, #12]
 80110a2:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80110a6:	1964      	adds	r4, r4, r5
 80110a8:	444b      	add	r3, r9
 80110aa:	bf54      	ite	pl
 80110ac:	9f03      	ldrpl	r7, [sp, #12]
 80110ae:	4647      	movmi	r7, r8
 80110b0:	f8bc b004 	ldrh.w	fp, [ip, #4]
 80110b4:	bf58      	it	pl
 80110b6:	1a64      	subpl	r4, r4, r1
 80110b8:	443e      	add	r6, r7
 80110ba:	44bb      	add	fp, r7
 80110bc:	f8ac b004 	strh.w	fp, [ip, #4]
 80110c0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80110c4:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 80110c8:	f8ac b006 	strh.w	fp, [ip, #6]
 80110cc:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80110d0:	f8bc b006 	ldrh.w	fp, [ip, #6]
 80110d4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 80110d8:	ea5b 0707 	orrs.w	r7, fp, r7
 80110dc:	d011      	beq.n	8011102 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80110de:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 80110e2:	f1bb 0f00 	cmp.w	fp, #0
 80110e6:	db0c      	blt.n	8011102 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80110e8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 80110ea:	45bb      	cmp	fp, r7
 80110ec:	da09      	bge.n	8011102 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 80110ee:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 80110f2:	45bb      	cmp	fp, r7
 80110f4:	bf3c      	itt	cc
 80110f6:	f10c 0708 	addcc.w	r7, ip, #8
 80110fa:	6107      	strcc	r7, [r0, #16]
 80110fc:	f10b 0701 	add.w	r7, fp, #1
 8011100:	6087      	str	r7, [r0, #8]
 8011102:	6907      	ldr	r7, [r0, #16]
 8011104:	459e      	cmp	lr, r3
 8011106:	803b      	strh	r3, [r7, #0]
 8011108:	807a      	strh	r2, [r7, #2]
 801110a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801110e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8011112:	d1c6      	bne.n	80110a2 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8011114:	9b04      	ldr	r3, [sp, #16]
 8011116:	1b9e      	subs	r6, r3, r6
 8011118:	6903      	ldr	r3, [r0, #16]
 801111a:	889a      	ldrh	r2, [r3, #4]
 801111c:	4432      	add	r2, r6
 801111e:	809a      	strh	r2, [r3, #4]
 8011120:	9a02      	ldr	r2, [sp, #8]
 8011122:	f102 0c20 	add.w	ip, r2, #32
 8011126:	9a01      	ldr	r2, [sp, #4]
 8011128:	ebac 0c02 	sub.w	ip, ip, r2
 801112c:	88da      	ldrh	r2, [r3, #6]
 801112e:	fb06 260c 	mla	r6, r6, ip, r2
 8011132:	80de      	strh	r6, [r3, #6]
 8011134:	f7ff bbb6 	b.w	80108a4 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

08011138 <_ZN8touchgfx7Outline6lineToEii>:
 8011138:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801113a:	079b      	lsls	r3, r3, #30
 801113c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801113e:	460e      	mov	r6, r1
 8011140:	4615      	mov	r5, r2
 8011142:	d511      	bpl.n	8011168 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011144:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 8011148:	ea86 0701 	eor.w	r7, r6, r1
 801114c:	ea85 0302 	eor.w	r3, r5, r2
 8011150:	433b      	orrs	r3, r7
 8011152:	d009      	beq.n	8011168 <_ZN8touchgfx7Outline6lineToEii+0x30>
 8011154:	4633      	mov	r3, r6
 8011156:	9500      	str	r5, [sp, #0]
 8011158:	f7ff fb4c 	bl	80107f4 <_ZN8touchgfx7Outline10renderLineEiiii>
 801115c:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801115e:	f043 0301 	orr.w	r3, r3, #1
 8011162:	e9c0 6505 	strd	r6, r5, [r0, #20]
 8011166:	6243      	str	r3, [r0, #36]	@ 0x24
 8011168:	b003      	add	sp, #12
 801116a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801116c <_ZN8touchgfx7Outline6moveToEii>:
 801116c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801116e:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011170:	4615      	mov	r5, r2
 8011172:	4604      	mov	r4, r0
 8011174:	460e      	mov	r6, r1
 8011176:	079a      	lsls	r2, r3, #30
 8011178:	d401      	bmi.n	801117e <_ZN8touchgfx7Outline6moveToEii+0x12>
 801117a:	f7ff fb07 	bl	801078c <_ZN8touchgfx7Outline5resetEv>
 801117e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011180:	07db      	lsls	r3, r3, #31
 8011182:	d504      	bpl.n	801118e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8011184:	4620      	mov	r0, r4
 8011186:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801118a:	f7ff ffd5 	bl	8011138 <_ZN8touchgfx7Outline6lineToEii>
 801118e:	6923      	ldr	r3, [r4, #16]
 8011190:	1170      	asrs	r0, r6, #5
 8011192:	1169      	asrs	r1, r5, #5
 8011194:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011198:	4290      	cmp	r0, r2
 801119a:	d103      	bne.n	80111a4 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801119c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80111a0:	4291      	cmp	r1, r2
 80111a2:	d01a      	beq.n	80111da <_ZN8touchgfx7Outline6moveToEii+0x6e>
 80111a4:	88df      	ldrh	r7, [r3, #6]
 80111a6:	889a      	ldrh	r2, [r3, #4]
 80111a8:	433a      	orrs	r2, r7
 80111aa:	d010      	beq.n	80111ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80111ac:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80111b0:	2a00      	cmp	r2, #0
 80111b2:	db0c      	blt.n	80111ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80111b4:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 80111b6:	42ba      	cmp	r2, r7
 80111b8:	da09      	bge.n	80111ce <_ZN8touchgfx7Outline6moveToEii+0x62>
 80111ba:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 80111be:	42ba      	cmp	r2, r7
 80111c0:	f102 0201 	add.w	r2, r2, #1
 80111c4:	bf38      	it	cc
 80111c6:	3308      	addcc	r3, #8
 80111c8:	60a2      	str	r2, [r4, #8]
 80111ca:	bf38      	it	cc
 80111cc:	6123      	strcc	r3, [r4, #16]
 80111ce:	6923      	ldr	r3, [r4, #16]
 80111d0:	2200      	movs	r2, #0
 80111d2:	8018      	strh	r0, [r3, #0]
 80111d4:	8059      	strh	r1, [r3, #2]
 80111d6:	809a      	strh	r2, [r3, #4]
 80111d8:	80da      	strh	r2, [r3, #6]
 80111da:	6166      	str	r6, [r4, #20]
 80111dc:	6225      	str	r5, [r4, #32]
 80111de:	e9c4 5606 	strd	r5, r6, [r4, #24]
 80111e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080111e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 80111e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80111e8:	b0d0      	sub	sp, #320	@ 0x140
 80111ea:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 80111ee:	466c      	mov	r4, sp
 80111f0:	4627      	mov	r7, r4
 80111f2:	1a0d      	subs	r5, r1, r0
 80111f4:	f100 0308 	add.w	r3, r0, #8
 80111f8:	2d48      	cmp	r5, #72	@ 0x48
 80111fa:	f340 80d5 	ble.w	80113a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80111fe:	112d      	asrs	r5, r5, #4
 8011200:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8011204:	f9b0 9000 	ldrsh.w	r9, [r0]
 8011208:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801120c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8011210:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011214:	6816      	ldr	r6, [r2, #0]
 8011216:	6006      	str	r6, [r0, #0]
 8011218:	6856      	ldr	r6, [r2, #4]
 801121a:	6046      	str	r6, [r0, #4]
 801121c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8011220:	f8a2 8002 	strh.w	r8, [r2, #2]
 8011224:	f8a2 e004 	strh.w	lr, [r2, #4]
 8011228:	f8a2 c006 	strh.w	ip, [r2, #6]
 801122c:	f1a1 0208 	sub.w	r2, r1, #8
 8011230:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8011234:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 8011238:	4565      	cmp	r5, ip
 801123a:	db06      	blt.n	801124a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 801123c:	d119      	bne.n	8011272 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801123e:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 8011242:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 8011246:	42ae      	cmp	r6, r5
 8011248:	dd13      	ble.n	8011272 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 801124a:	460e      	mov	r6, r1
 801124c:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 8011250:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 8011254:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8011258:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 801125c:	601d      	str	r5, [r3, #0]
 801125e:	6875      	ldr	r5, [r6, #4]
 8011260:	605d      	str	r5, [r3, #4]
 8011262:	f821 9c08 	strh.w	r9, [r1, #-8]
 8011266:	f821 cc06 	strh.w	ip, [r1, #-6]
 801126a:	f821 8c04 	strh.w	r8, [r1, #-4]
 801126e:	f821 ec02 	strh.w	lr, [r1, #-2]
 8011272:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 8011276:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 801127a:	42ae      	cmp	r6, r5
 801127c:	db06      	blt.n	801128c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 801127e:	d116      	bne.n	80112ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8011280:	f9b0 c000 	ldrsh.w	ip, [r0]
 8011284:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8011288:	45ac      	cmp	ip, r5
 801128a:	da10      	bge.n	80112ae <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801128c:	681d      	ldr	r5, [r3, #0]
 801128e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8011292:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8011296:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801129a:	6005      	str	r5, [r0, #0]
 801129c:	685d      	ldr	r5, [r3, #4]
 801129e:	f8a0 8008 	strh.w	r8, [r0, #8]
 80112a2:	6045      	str	r5, [r0, #4]
 80112a4:	8146      	strh	r6, [r0, #10]
 80112a6:	f8a0 e00c 	strh.w	lr, [r0, #12]
 80112aa:	f8a0 c00e 	strh.w	ip, [r0, #14]
 80112ae:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80112b2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80112b6:	4565      	cmp	r5, ip
 80112b8:	db06      	blt.n	80112c8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 80112ba:	d119      	bne.n	80112f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80112bc:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 80112c0:	f9b0 5000 	ldrsh.w	r5, [r0]
 80112c4:	42ae      	cmp	r6, r5
 80112c6:	da13      	bge.n	80112f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80112c8:	460e      	mov	r6, r1
 80112ca:	f9b0 9000 	ldrsh.w	r9, [r0]
 80112ce:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 80112d2:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80112d6:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 80112da:	6005      	str	r5, [r0, #0]
 80112dc:	6875      	ldr	r5, [r6, #4]
 80112de:	6045      	str	r5, [r0, #4]
 80112e0:	f821 9c08 	strh.w	r9, [r1, #-8]
 80112e4:	f821 cc06 	strh.w	ip, [r1, #-6]
 80112e8:	f821 8c04 	strh.w	r8, [r1, #-4]
 80112ec:	f821 ec02 	strh.w	lr, [r1, #-2]
 80112f0:	3308      	adds	r3, #8
 80112f2:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 80112f6:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 80112fa:	45e6      	cmp	lr, ip
 80112fc:	dbf8      	blt.n	80112f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80112fe:	d105      	bne.n	801130c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011300:	f9b3 6000 	ldrsh.w	r6, [r3]
 8011304:	f9b0 5000 	ldrsh.w	r5, [r0]
 8011308:	42ae      	cmp	r6, r5
 801130a:	dbf1      	blt.n	80112f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801130c:	4615      	mov	r5, r2
 801130e:	3a08      	subs	r2, #8
 8011310:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8011314:	45b4      	cmp	ip, r6
 8011316:	dbf9      	blt.n	801130c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011318:	d105      	bne.n	8011326 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801131a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801131e:	f9b2 6000 	ldrsh.w	r6, [r2]
 8011322:	45b0      	cmp	r8, r6
 8011324:	dbf2      	blt.n	801130c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8011326:	4293      	cmp	r3, r2
 8011328:	f1a5 0608 	sub.w	r6, r5, #8
 801132c:	d816      	bhi.n	801135c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 801132e:	f8d6 c000 	ldr.w	ip, [r6]
 8011332:	f9b3 a000 	ldrsh.w	sl, [r3]
 8011336:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 801133a:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 801133e:	f8c3 c000 	str.w	ip, [r3]
 8011342:	f8d6 c004 	ldr.w	ip, [r6, #4]
 8011346:	f8c3 c004 	str.w	ip, [r3, #4]
 801134a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801134e:	f825 ec06 	strh.w	lr, [r5, #-6]
 8011352:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011356:	f825 8c02 	strh.w	r8, [r5, #-2]
 801135a:	e7c9      	b.n	80112f0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801135c:	f8d6 e000 	ldr.w	lr, [r6]
 8011360:	f9b0 a000 	ldrsh.w	sl, [r0]
 8011364:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 8011368:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 801136c:	f8c0 e000 	str.w	lr, [r0]
 8011370:	f8d6 e004 	ldr.w	lr, [r6, #4]
 8011374:	1a16      	subs	r6, r2, r0
 8011376:	f8c0 e004 	str.w	lr, [r0, #4]
 801137a:	f825 ac08 	strh.w	sl, [r5, #-8]
 801137e:	f825 cc06 	strh.w	ip, [r5, #-6]
 8011382:	f825 9c04 	strh.w	r9, [r5, #-4]
 8011386:	f825 8c02 	strh.w	r8, [r5, #-2]
 801138a:	1acd      	subs	r5, r1, r3
 801138c:	10ed      	asrs	r5, r5, #3
 801138e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8011392:	bfb5      	itete	lt
 8011394:	e9c4 0200 	strdlt	r0, r2, [r4]
 8011398:	e9c4 3100 	strdge	r3, r1, [r4]
 801139c:	460a      	movlt	r2, r1
 801139e:	4603      	movge	r3, r0
 80113a0:	3408      	adds	r4, #8
 80113a2:	4618      	mov	r0, r3
 80113a4:	4611      	mov	r1, r2
 80113a6:	e724      	b.n	80111f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 80113a8:	4299      	cmp	r1, r3
 80113aa:	d927      	bls.n	80113fc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 80113ac:	f1a3 0210 	sub.w	r2, r3, #16
 80113b0:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 80113b4:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 80113b8:	45ac      	cmp	ip, r5
 80113ba:	db06      	blt.n	80113ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 80113bc:	d11c      	bne.n	80113f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80113be:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 80113c2:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 80113c6:	42ae      	cmp	r6, r5
 80113c8:	da16      	bge.n	80113f8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 80113ca:	4615      	mov	r5, r2
 80113cc:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 80113d0:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 80113d4:	3a08      	subs	r2, #8
 80113d6:	f855 6f08 	ldr.w	r6, [r5, #8]!
 80113da:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 80113de:	6196      	str	r6, [r2, #24]
 80113e0:	42a8      	cmp	r0, r5
 80113e2:	686e      	ldr	r6, [r5, #4]
 80113e4:	f8a2 9010 	strh.w	r9, [r2, #16]
 80113e8:	61d6      	str	r6, [r2, #28]
 80113ea:	f8a2 c012 	strh.w	ip, [r2, #18]
 80113ee:	f8a2 8014 	strh.w	r8, [r2, #20]
 80113f2:	f8a2 e016 	strh.w	lr, [r2, #22]
 80113f6:	d1db      	bne.n	80113b0 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 80113f8:	3308      	adds	r3, #8
 80113fa:	e7d5      	b.n	80113a8 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 80113fc:	42bc      	cmp	r4, r7
 80113fe:	d903      	bls.n	8011408 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8011400:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8011404:	3c08      	subs	r4, #8
 8011406:	e6f4      	b.n	80111f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8011408:	b050      	add	sp, #320	@ 0x140
 801140a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801140e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801140e:	b510      	push	{r4, lr}
 8011410:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011412:	4604      	mov	r4, r0
 8011414:	07da      	lsls	r2, r3, #31
 8011416:	d507      	bpl.n	8011428 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8011418:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801141c:	f7ff fe8c 	bl	8011138 <_ZN8touchgfx7Outline6lineToEii>
 8011420:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8011422:	f023 0301 	bic.w	r3, r3, #1
 8011426:	6243      	str	r3, [r0, #36]	@ 0x24
 8011428:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801142a:	079b      	lsls	r3, r3, #30
 801142c:	d521      	bpl.n	8011472 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 801142e:	6923      	ldr	r3, [r4, #16]
 8011430:	88d9      	ldrh	r1, [r3, #6]
 8011432:	889a      	ldrh	r2, [r3, #4]
 8011434:	430a      	orrs	r2, r1
 8011436:	d010      	beq.n	801145a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011438:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 801143c:	2a00      	cmp	r2, #0
 801143e:	db0c      	blt.n	801145a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011440:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8011442:	428a      	cmp	r2, r1
 8011444:	da09      	bge.n	801145a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 8011446:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 801144a:	4291      	cmp	r1, r2
 801144c:	f102 0201 	add.w	r2, r2, #1
 8011450:	bf88      	it	hi
 8011452:	3308      	addhi	r3, #8
 8011454:	60a2      	str	r2, [r4, #8]
 8011456:	bf88      	it	hi
 8011458:	6123      	strhi	r3, [r4, #16]
 801145a:	68a1      	ldr	r1, [r4, #8]
 801145c:	b129      	cbz	r1, 801146a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 801145e:	6863      	ldr	r3, [r4, #4]
 8011460:	4299      	cmp	r1, r3
 8011462:	d802      	bhi.n	801146a <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 8011464:	68e0      	ldr	r0, [r4, #12]
 8011466:	f7ff febd 	bl	80111e4 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 801146a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 801146c:	f023 0302 	bic.w	r3, r3, #2
 8011470:	6263      	str	r3, [r4, #36]	@ 0x24
 8011472:	68e0      	ldr	r0, [r4, #12]
 8011474:	bd10      	pop	{r4, pc}
	...

08011478 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 8011478:	4b01      	ldr	r3, [pc, #4]	@ (8011480 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 801147a:	6818      	ldr	r0, [r3, #0]
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop
 8011480:	24024904 	.word	0x24024904

08011484 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8011484:	4b01      	ldr	r3, [pc, #4]	@ (801148c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8011486:	6818      	ldr	r0, [r3, #0]
 8011488:	4770      	bx	lr
 801148a:	bf00      	nop
 801148c:	24024908 	.word	0x24024908

08011490 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8011490:	b510      	push	{r4, lr}
 8011492:	6803      	ldr	r3, [r0, #0]
 8011494:	460c      	mov	r4, r1
 8011496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011498:	4798      	blx	r3
 801149a:	1b03      	subs	r3, r0, r4
 801149c:	4258      	negs	r0, r3
 801149e:	4158      	adcs	r0, r3
 80114a0:	bd10      	pop	{r4, pc}
	...

080114a4 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 80114a4:	4b01      	ldr	r3, [pc, #4]	@ (80114ac <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 80114a6:	6019      	str	r1, [r3, #0]
 80114a8:	4770      	bx	lr
 80114aa:	bf00      	nop
 80114ac:	2402490c 	.word	0x2402490c

080114b0 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80114b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114b4:	4696      	mov	lr, r2
 80114b6:	b097      	sub	sp, #92	@ 0x5c
 80114b8:	4605      	mov	r5, r0
 80114ba:	4614      	mov	r4, r2
 80114bc:	460e      	mov	r6, r1
 80114be:	461f      	mov	r7, r3
 80114c0:	f10d 0c1c 	add.w	ip, sp, #28
 80114c4:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 80114c8:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 80114cc:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 80114d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80114d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114d8:	f8de 3000 	ldr.w	r3, [lr]
 80114dc:	f104 0e14 	add.w	lr, r4, #20
 80114e0:	f8cc 3000 	str.w	r3, [ip]
 80114e4:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80114e8:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80114ec:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80114f0:	f8de 3000 	ldr.w	r3, [lr]
 80114f4:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80114f8:	f8cc 3000 	str.w	r3, [ip]
 80114fc:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011500:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011504:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011508:	f8de 3000 	ldr.w	r3, [lr]
 801150c:	4631      	mov	r1, r6
 801150e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8011510:	4628      	mov	r0, r5
 8011512:	f8cc 3000 	str.w	r3, [ip]
 8011516:	682b      	ldr	r3, [r5, #0]
 8011518:	9201      	str	r2, [sp, #4]
 801151a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801151c:	f8cd 8008 	str.w	r8, [sp, #8]
 8011520:	9200      	str	r2, [sp, #0]
 8011522:	aa07      	add	r2, sp, #28
 8011524:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 8011528:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 801152c:	463b      	mov	r3, r7
 801152e:	47d8      	blx	fp
 8011530:	46a6      	mov	lr, r4
 8011532:	f10d 0c1c 	add.w	ip, sp, #28
 8011536:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801153a:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801153e:	f8de 3000 	ldr.w	r3, [lr]
 8011542:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8011546:	343c      	adds	r4, #60	@ 0x3c
 8011548:	f8cc 3000 	str.w	r3, [ip]
 801154c:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8011550:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8011554:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8011558:	f8de 3000 	ldr.w	r3, [lr]
 801155c:	f8cc 3000 	str.w	r3, [ip]
 8011560:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8011564:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8011566:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 801156a:	6823      	ldr	r3, [r4, #0]
 801156c:	4631      	mov	r1, r6
 801156e:	4628      	mov	r0, r5
 8011570:	f8cc 3000 	str.w	r3, [ip]
 8011574:	682b      	ldr	r3, [r5, #0]
 8011576:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 801157a:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801157c:	f8cd 8008 	str.w	r8, [sp, #8]
 8011580:	9201      	str	r2, [sp, #4]
 8011582:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8011584:	9200      	str	r2, [sp, #0]
 8011586:	aa07      	add	r2, sp, #28
 8011588:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801158a:	463b      	mov	r3, r7
 801158c:	47a0      	blx	r4
 801158e:	b017      	add	sp, #92	@ 0x5c
 8011590:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011594 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8011594:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011598:	b08d      	sub	sp, #52	@ 0x34
 801159a:	4688      	mov	r8, r1
 801159c:	f8d3 c000 	ldr.w	ip, [r3]
 80115a0:	9916      	ldr	r1, [sp, #88]	@ 0x58
 80115a2:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 80115a6:	680f      	ldr	r7, [r1, #0]
 80115a8:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 80115ac:	eba7 070c 	sub.w	r7, r7, ip
 80115b0:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 80115b4:	edd3 6a07 	vldr	s13, [r3, #28]
 80115b8:	42bc      	cmp	r4, r7
 80115ba:	9918      	ldr	r1, [sp, #96]	@ 0x60
 80115bc:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 80115c0:	bfa8      	it	ge
 80115c2:	463c      	movge	r4, r7
 80115c4:	f9b1 9000 	ldrsh.w	r9, [r1]
 80115c8:	f9ba 1000 	ldrsh.w	r1, [sl]
 80115cc:	ee07 4a90 	vmov	s15, r4
 80115d0:	eb09 0e0c 	add.w	lr, r9, ip
 80115d4:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 80115d8:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 80115dc:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 80115e0:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 80115e4:	4571      	cmp	r1, lr
 80115e6:	ee25 4a04 	vmul.f32	s8, s10, s8
 80115ea:	ee65 4a24 	vmul.f32	s9, s10, s9
 80115ee:	ee25 5a27 	vmul.f32	s10, s10, s15
 80115f2:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80115f6:	ee71 0aa4 	vadd.f32	s1, s3, s9
 80115fa:	ee32 1a05 	vadd.f32	s2, s4, s10
 80115fe:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011602:	ee36 0a84 	vadd.f32	s0, s13, s8
 8011606:	ee61 1a87 	vmul.f32	s3, s3, s14
 801160a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801160e:	f340 808c 	ble.w	801172a <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8011612:	eba1 060e 	sub.w	r6, r1, lr
 8011616:	fb96 f5f4 	sdiv	r5, r6, r4
 801161a:	ee07 5a10 	vmov	s14, r5
 801161e:	2d00      	cmp	r5, #0
 8011620:	fb04 6615 	mls	r6, r4, r5, r6
 8011624:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011628:	eea7 0a04 	vfma.f32	s0, s14, s8
 801162c:	eee7 0a24 	vfma.f32	s1, s14, s9
 8011630:	eea7 1a05 	vfma.f32	s2, s14, s10
 8011634:	dd12      	ble.n	801165c <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 8011636:	ee70 6a44 	vsub.f32	s13, s0, s8
 801163a:	ee70 1ae4 	vsub.f32	s3, s1, s9
 801163e:	ee31 2a45 	vsub.f32	s4, s2, s10
 8011642:	eef5 6a40 	vcmp.f32	s13, #0.0
 8011646:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801164a:	bf14      	ite	ne
 801164c:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 8011650:	eeb0 7a67 	vmoveq.f32	s14, s15
 8011654:	ee61 1a87 	vmul.f32	s3, s3, s14
 8011658:	ee22 2a07 	vmul.f32	s4, s4, s14
 801165c:	fb05 f204 	mul.w	r2, r5, r4
 8011660:	1abf      	subs	r7, r7, r2
 8011662:	4494      	add	ip, r2
 8011664:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 8011668:	4411      	add	r1, r2
 801166a:	eb09 020c 	add.w	r2, r9, ip
 801166e:	b209      	sxth	r1, r1
 8011670:	443a      	add	r2, r7
 8011672:	428a      	cmp	r2, r1
 8011674:	bfc4      	itt	gt
 8011676:	eba1 0209 	subgt.w	r2, r1, r9
 801167a:	eba2 070c 	subgt.w	r7, r2, ip
 801167e:	2f00      	cmp	r7, #0
 8011680:	dd50      	ble.n	8011724 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8011682:	fb97 f1f4 	sdiv	r1, r7, r4
 8011686:	fb04 7211 	mls	r2, r4, r1, r7
 801168a:	b90a      	cbnz	r2, 8011690 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801168c:	3901      	subs	r1, #1
 801168e:	4622      	mov	r2, r4
 8011690:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8011694:	6840      	ldr	r0, [r0, #4]
 8011696:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801169a:	44b6      	add	lr, r6
 801169c:	f8d0 a000 	ldr.w	sl, [r0]
 80116a0:	2900      	cmp	r1, #0
 80116a2:	bfcc      	ite	gt
 80116a4:	46a1      	movgt	r9, r4
 80116a6:	4691      	movle	r9, r2
 80116a8:	900b      	str	r0, [sp, #44]	@ 0x2c
 80116aa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 80116ac:	fb04 e505 	mla	r5, r4, r5, lr
 80116b0:	eef0 6a42 	vmov.f32	s13, s4
 80116b4:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 80116b8:	9008      	str	r0, [sp, #32]
 80116ba:	eeb0 7a61 	vmov.f32	s14, s3
 80116be:	9818      	ldr	r0, [sp, #96]	@ 0x60
 80116c0:	695b      	ldr	r3, [r3, #20]
 80116c2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80116c6:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 80116ca:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 80116ce:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 80116d0:	445b      	add	r3, fp
 80116d2:	9307      	str	r3, [sp, #28]
 80116d4:	ee16 3a90 	vmov	r3, s13
 80116d8:	e9cd 8505 	strd	r8, r5, [sp, #20]
 80116dc:	ee60 2aa3 	vmul.f32	s5, s1, s7
 80116e0:	ee21 3a23 	vmul.f32	s6, s2, s7
 80116e4:	ee72 7ae1 	vsub.f32	s15, s5, s3
 80116e8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80116ec:	ee17 7a90 	vmov	r7, s15
 80116f0:	ee73 7a42 	vsub.f32	s15, s6, s4
 80116f4:	fb97 f7f4 	sdiv	r7, r7, r4
 80116f8:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 80116fc:	ee17 ca90 	vmov	ip, s15
 8011700:	fb9c fcf4 	sdiv	ip, ip, r4
 8011704:	fb0c 3306 	mla	r3, ip, r6, r3
 8011708:	9302      	str	r3, [sp, #8]
 801170a:	ee17 3a10 	vmov	r3, s14
 801170e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8011712:	fb07 3706 	mla	r7, r7, r6, r3
 8011716:	eba9 0306 	sub.w	r3, r9, r6
 801171a:	e9cd 4700 	strd	r4, r7, [sp]
 801171e:	f8da 4008 	ldr.w	r4, [sl, #8]
 8011722:	47a0      	blx	r4
 8011724:	b00d      	add	sp, #52	@ 0x34
 8011726:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801172a:	2500      	movs	r5, #0
 801172c:	462e      	mov	r6, r5
 801172e:	e799      	b.n	8011664 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

08011730 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8011730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011734:	b0db      	sub	sp, #364	@ 0x16c
 8011736:	461d      	mov	r5, r3
 8011738:	4614      	mov	r4, r2
 801173a:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 801173e:	910f      	str	r1, [sp, #60]	@ 0x3c
 8011740:	4629      	mov	r1, r5
 8011742:	930a      	str	r3, [sp, #40]	@ 0x28
 8011744:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 8011748:	9009      	str	r0, [sp, #36]	@ 0x24
 801174a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801174c:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 8011750:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 8011754:	9310      	str	r3, [sp, #64]	@ 0x40
 8011756:	6803      	ldr	r3, [r0, #0]
 8011758:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 801175a:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 801175e:	47b8      	blx	r7
 8011760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011762:	6058      	str	r0, [r3, #4]
 8011764:	2800      	cmp	r0, #0
 8011766:	f000 83a1 	beq.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801176a:	682b      	ldr	r3, [r5, #0]
 801176c:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 8011770:	ed94 7a02 	vldr	s14, [r4, #8]
 8011774:	9314      	str	r3, [sp, #80]	@ 0x50
 8011776:	686b      	ldr	r3, [r5, #4]
 8011778:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801177c:	9315      	str	r3, [sp, #84]	@ 0x54
 801177e:	4bc1      	ldr	r3, [pc, #772]	@ (8011a84 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8011780:	7819      	ldrb	r1, [r3, #0]
 8011782:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8011786:	2900      	cmp	r1, #0
 8011788:	bf16      	itet	ne
 801178a:	4619      	movne	r1, r3
 801178c:	4611      	moveq	r1, r2
 801178e:	4613      	movne	r3, r2
 8011790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011794:	9116      	str	r1, [sp, #88]	@ 0x58
 8011796:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801179a:	f240 8387 	bls.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801179e:	ed94 7a07 	vldr	s14, [r4, #28]
 80117a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80117a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117aa:	f240 837f 	bls.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117ae:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 80117b2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80117b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80117ba:	f240 8377 	bls.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117be:	6822      	ldr	r2, [r4, #0]
 80117c0:	4bb1      	ldr	r3, [pc, #708]	@ (8011a88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 80117c2:	429a      	cmp	r2, r3
 80117c4:	f2c0 8372 	blt.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117c8:	49b0      	ldr	r1, [pc, #704]	@ (8011a8c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 80117ca:	6963      	ldr	r3, [r4, #20]
 80117cc:	428a      	cmp	r2, r1
 80117ce:	f300 836d 	bgt.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117d2:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80117d6:	48ae      	ldr	r0, [pc, #696]	@ (8011a90 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 80117d8:	33ff      	adds	r3, #255	@ 0xff
 80117da:	4283      	cmp	r3, r0
 80117dc:	f200 8366 	bhi.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117e0:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80117e2:	4dac      	ldr	r5, [pc, #688]	@ (8011a94 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 80117e4:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 80117e8:	33ff      	adds	r3, #255	@ 0xff
 80117ea:	42ab      	cmp	r3, r5
 80117ec:	f200 835e 	bhi.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117f0:	6862      	ldr	r2, [r4, #4]
 80117f2:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 80117f6:	33ff      	adds	r3, #255	@ 0xff
 80117f8:	4283      	cmp	r3, r0
 80117fa:	f200 8357 	bhi.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80117fe:	69a1      	ldr	r1, [r4, #24]
 8011800:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8011804:	33ff      	adds	r3, #255	@ 0xff
 8011806:	4283      	cmp	r3, r0
 8011808:	f200 8350 	bhi.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801180c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801180e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8011812:	30ff      	adds	r0, #255	@ 0xff
 8011814:	42a8      	cmp	r0, r5
 8011816:	f200 8349 	bhi.w	8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801181a:	428a      	cmp	r2, r1
 801181c:	f280 8110 	bge.w	8011a40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 8011820:	429a      	cmp	r2, r3
 8011822:	f300 8119 	bgt.w	8011a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 8011826:	4299      	cmp	r1, r3
 8011828:	f280 811d 	bge.w	8011a66 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 801182c:	2502      	movs	r5, #2
 801182e:	2701      	movs	r7, #1
 8011830:	46a9      	mov	r9, r5
 8011832:	46b8      	mov	r8, r7
 8011834:	f04f 0a00 	mov.w	sl, #0
 8011838:	4621      	mov	r1, r4
 801183a:	a849      	add	r0, sp, #292	@ 0x124
 801183c:	f003 fb6a 	bl	8014f14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 8011840:	4622      	mov	r2, r4
 8011842:	4653      	mov	r3, sl
 8011844:	a949      	add	r1, sp, #292	@ 0x124
 8011846:	f8cd 9000 	str.w	r9, [sp]
 801184a:	a819      	add	r0, sp, #100	@ 0x64
 801184c:	f003 fc92 	bl	8015174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011850:	4622      	mov	r2, r4
 8011852:	4653      	mov	r3, sl
 8011854:	a949      	add	r1, sp, #292	@ 0x124
 8011856:	f8cd 8000 	str.w	r8, [sp]
 801185a:	a829      	add	r0, sp, #164	@ 0xa4
 801185c:	f003 fc8a 	bl	8015174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011860:	4643      	mov	r3, r8
 8011862:	4622      	mov	r2, r4
 8011864:	a949      	add	r1, sp, #292	@ 0x124
 8011866:	f8cd 9000 	str.w	r9, [sp]
 801186a:	a839      	add	r0, sp, #228	@ 0xe4
 801186c:	f003 fc82 	bl	8015174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 8011870:	42af      	cmp	r7, r5
 8011872:	af12      	add	r7, sp, #72	@ 0x48
 8011874:	bfb7      	itett	lt
 8011876:	2300      	movlt	r3, #0
 8011878:	2301      	movge	r3, #1
 801187a:	ad29      	addlt	r5, sp, #164	@ 0xa4
 801187c:	ac19      	addlt	r4, sp, #100	@ 0x64
 801187e:	bfb1      	iteee	lt
 8011880:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8011882:	ad19      	addge	r5, sp, #100	@ 0x64
 8011884:	930e      	strge	r3, [sp, #56]	@ 0x38
 8011886:	ac29      	addge	r4, sp, #164	@ 0xa4
 8011888:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801188a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801188e:	e887 0003 	stmia.w	r7, {r0, r1}
 8011892:	b928      	cbnz	r0, 80118a0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8011894:	4b80      	ldr	r3, [pc, #512]	@ (8011a98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8011896:	6818      	ldr	r0, [r3, #0]
 8011898:	6803      	ldr	r3, [r0, #0]
 801189a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801189c:	4798      	blx	r3
 801189e:	6038      	str	r0, [r7, #0]
 80118a0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80118a2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 80118a6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80118aa:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 80118ac:	930c      	str	r3, [sp, #48]	@ 0x30
 80118ae:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80118b0:	6963      	ldr	r3, [r4, #20]
 80118b2:	440b      	add	r3, r1
 80118b4:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 80118b8:	4408      	add	r0, r1
 80118ba:	b200      	sxth	r0, r0
 80118bc:	4283      	cmp	r3, r0
 80118be:	900d      	str	r0, [sp, #52]	@ 0x34
 80118c0:	f280 80dd 	bge.w	8011a7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 80118c4:	428b      	cmp	r3, r1
 80118c6:	da08      	bge.n	80118da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80118c8:	2a00      	cmp	r2, #0
 80118ca:	dd06      	ble.n	80118da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 80118cc:	1acb      	subs	r3, r1, r3
 80118ce:	429a      	cmp	r2, r3
 80118d0:	f2c0 80e4 	blt.w	8011a9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	f300 80e2 	bgt.w	8011a9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 80118da:	6967      	ldr	r7, [r4, #20]
 80118dc:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 80118e0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80118e2:	443b      	add	r3, r7
 80118e4:	461f      	mov	r7, r3
 80118e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80118e8:	1bdf      	subs	r7, r3, r7
 80118ea:	4297      	cmp	r7, r2
 80118ec:	bfa8      	it	ge
 80118ee:	4617      	movge	r7, r2
 80118f0:	2f00      	cmp	r7, #0
 80118f2:	f340 8166 	ble.w	8011bc2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 80118f6:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 80118f8:	6829      	ldr	r1, [r5, #0]
 80118fa:	f9b3 2000 	ldrsh.w	r2, [r3]
 80118fe:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011902:	4411      	add	r1, r2
 8011904:	6820      	ldr	r0, [r4, #0]
 8011906:	4299      	cmp	r1, r3
 8011908:	dd1a      	ble.n	8011940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801190a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801190e:	4402      	add	r2, r0
 8011910:	440b      	add	r3, r1
 8011912:	b21b      	sxth	r3, r3
 8011914:	429a      	cmp	r2, r3
 8011916:	dc13      	bgt.n	8011940 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8011918:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801191a:	a912      	add	r1, sp, #72	@ 0x48
 801191c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801191e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011920:	681b      	ldr	r3, [r3, #0]
 8011922:	9206      	str	r2, [sp, #24]
 8011924:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011926:	9500      	str	r5, [sp, #0]
 8011928:	9205      	str	r2, [sp, #20]
 801192a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801192c:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011930:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011932:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011936:	aa49      	add	r2, sp, #292	@ 0x124
 8011938:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 801193c:	4623      	mov	r3, r4
 801193e:	47c8      	blx	r9
 8011940:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011944:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011948:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 801194c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011950:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8011954:	68a1      	ldr	r1, [r4, #8]
 8011956:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801195a:	ed94 6a08 	vldr	s12, [r4, #32]
 801195e:	edd4 6a07 	vldr	s13, [r4, #28]
 8011962:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011966:	ee76 6a86 	vadd.f32	s13, s13, s12
 801196a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801196e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011972:	edc4 6a07 	vstr	s13, [r4, #28]
 8011976:	441a      	add	r2, r3
 8011978:	6963      	ldr	r3, [r4, #20]
 801197a:	3301      	adds	r3, #1
 801197c:	6022      	str	r2, [r4, #0]
 801197e:	6163      	str	r3, [r4, #20]
 8011980:	69a3      	ldr	r3, [r4, #24]
 8011982:	3b01      	subs	r3, #1
 8011984:	61a3      	str	r3, [r4, #24]
 8011986:	6923      	ldr	r3, [r4, #16]
 8011988:	440b      	add	r3, r1
 801198a:	68e1      	ldr	r1, [r4, #12]
 801198c:	428b      	cmp	r3, r1
 801198e:	6123      	str	r3, [r4, #16]
 8011990:	db15      	blt.n	80119be <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8011992:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011996:	3201      	adds	r2, #1
 8011998:	1a5b      	subs	r3, r3, r1
 801199a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801199e:	6022      	str	r2, [r4, #0]
 80119a0:	6123      	str	r3, [r4, #16]
 80119a2:	edc4 6a07 	vstr	s13, [r4, #28]
 80119a6:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 80119aa:	ee36 7a87 	vadd.f32	s14, s13, s14
 80119ae:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80119b2:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 80119b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80119ba:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80119be:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 80119c2:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 80119c6:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 80119ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80119ce:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 80119d2:	68a9      	ldr	r1, [r5, #8]
 80119d4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80119d8:	ed95 6a08 	vldr	s12, [r5, #32]
 80119dc:	edd5 6a07 	vldr	s13, [r5, #28]
 80119e0:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80119e4:	ee76 6a86 	vadd.f32	s13, s13, s12
 80119e8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80119ec:	e9d5 2300 	ldrd	r2, r3, [r5]
 80119f0:	edc5 6a07 	vstr	s13, [r5, #28]
 80119f4:	441a      	add	r2, r3
 80119f6:	696b      	ldr	r3, [r5, #20]
 80119f8:	3301      	adds	r3, #1
 80119fa:	602a      	str	r2, [r5, #0]
 80119fc:	616b      	str	r3, [r5, #20]
 80119fe:	69ab      	ldr	r3, [r5, #24]
 8011a00:	3b01      	subs	r3, #1
 8011a02:	61ab      	str	r3, [r5, #24]
 8011a04:	692b      	ldr	r3, [r5, #16]
 8011a06:	440b      	add	r3, r1
 8011a08:	68e9      	ldr	r1, [r5, #12]
 8011a0a:	428b      	cmp	r3, r1
 8011a0c:	612b      	str	r3, [r5, #16]
 8011a0e:	db15      	blt.n	8011a3c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8011a10:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011a14:	3201      	adds	r2, #1
 8011a16:	1a5b      	subs	r3, r3, r1
 8011a18:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011a1c:	602a      	str	r2, [r5, #0]
 8011a1e:	612b      	str	r3, [r5, #16]
 8011a20:	edc5 6a07 	vstr	s13, [r5, #28]
 8011a24:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011a28:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011a2c:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011a30:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011a38:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011a3c:	3f01      	subs	r7, #1
 8011a3e:	e757      	b.n	80118f0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 8011a40:	4299      	cmp	r1, r3
 8011a42:	dc13      	bgt.n	8011a6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 8011a44:	429a      	cmp	r2, r3
 8011a46:	da14      	bge.n	8011a72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 8011a48:	2502      	movs	r5, #2
 8011a4a:	2703      	movs	r7, #3
 8011a4c:	f04f 0800 	mov.w	r8, #0
 8011a50:	46a9      	mov	r9, r5
 8011a52:	f04f 0a01 	mov.w	sl, #1
 8011a56:	e6ef      	b.n	8011838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011a58:	2501      	movs	r5, #1
 8011a5a:	2700      	movs	r7, #0
 8011a5c:	46a9      	mov	r9, r5
 8011a5e:	46b8      	mov	r8, r7
 8011a60:	f04f 0a02 	mov.w	sl, #2
 8011a64:	e6e8      	b.n	8011838 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 8011a66:	2501      	movs	r5, #1
 8011a68:	2702      	movs	r7, #2
 8011a6a:	e6e1      	b.n	8011830 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 8011a6c:	2500      	movs	r5, #0
 8011a6e:	2701      	movs	r7, #1
 8011a70:	e7f4      	b.n	8011a5c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 8011a72:	2702      	movs	r7, #2
 8011a74:	2503      	movs	r5, #3
 8011a76:	f04f 0900 	mov.w	r9, #0
 8011a7a:	46b8      	mov	r8, r7
 8011a7c:	e7e9      	b.n	8011a52 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 8011a7e:	4613      	mov	r3, r2
 8011a80:	e728      	b.n	80118d4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8011a82:	bf00      	nop
 8011a84:	240248f4 	.word	0x240248f4
 8011a88:	fffd8f01 	.word	0xfffd8f01
 8011a8c:	00027100 	.word	0x00027100
 8011a90:	0004e1ff 	.word	0x0004e1ff
 8011a94:	0004e1fe 	.word	0x0004e1fe
 8011a98:	240248fc 	.word	0x240248fc
 8011a9c:	4613      	mov	r3, r2
 8011a9e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8011aa0:	469e      	mov	lr, r3
 8011aa2:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8011aa4:	469c      	mov	ip, r3
 8011aa6:	9111      	str	r1, [sp, #68]	@ 0x44
 8011aa8:	f04f 0900 	mov.w	r9, #0
 8011aac:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8011ab0:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8011ab4:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8011ab8:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8011abc:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8011ac0:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8011ac4:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8011ac8:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8011acc:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8011ad0:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8011ad4:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8011ad8:	f1bc 0f00 	cmp.w	ip, #0
 8011adc:	d147      	bne.n	8011b6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8011ade:	eb03 0c07 	add.w	ip, r3, r7
 8011ae2:	1ad7      	subs	r7, r2, r3
 8011ae4:	f1b9 0f00 	cmp.w	r9, #0
 8011ae8:	d009      	beq.n	8011afe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8011aea:	9029      	str	r0, [sp, #164]	@ 0xa4
 8011aec:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8011af0:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8011af4:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8011af8:	912d      	str	r1, [sp, #180]	@ 0xb4
 8011afa:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8011afe:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011b00:	f04f 0800 	mov.w	r8, #0
 8011b04:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011b08:	9111      	str	r1, [sp, #68]	@ 0x44
 8011b0a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8011b0e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8011b12:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011b16:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011b1a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011b1e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8011b22:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011b26:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011b2a:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011b2e:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8011b32:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8011b36:	f1be 0f00 	cmp.w	lr, #0
 8011b3a:	d031      	beq.n	8011ba0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8011b3c:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011b3e:	4450      	add	r0, sl
 8011b40:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011b44:	4431      	add	r1, r6
 8011b46:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011b4a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011b4e:	4549      	cmp	r1, r9
 8011b50:	db08      	blt.n	8011b64 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8011b52:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011b56:	3001      	adds	r0, #1
 8011b58:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011b5c:	eba1 0109 	sub.w	r1, r1, r9
 8011b60:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011b64:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011b68:	f04f 0801 	mov.w	r8, #1
 8011b6c:	e7e3      	b.n	8011b36 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8011b6e:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8011b70:	4450      	add	r0, sl
 8011b72:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011b76:	4431      	add	r1, r6
 8011b78:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011b7c:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011b80:	4541      	cmp	r1, r8
 8011b82:	db08      	blt.n	8011b96 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8011b84:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011b88:	3001      	adds	r0, #1
 8011b8a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011b8e:	eba1 0108 	sub.w	r1, r1, r8
 8011b92:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011b96:	f10c 3cff 	add.w	ip, ip, #4294967295
 8011b9a:	f04f 0901 	mov.w	r9, #1
 8011b9e:	e79b      	b.n	8011ad8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8011ba0:	449c      	add	ip, r3
 8011ba2:	1aff      	subs	r7, r7, r3
 8011ba4:	f1b8 0f00 	cmp.w	r8, #0
 8011ba8:	d009      	beq.n	8011bbe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8011baa:	9019      	str	r0, [sp, #100]	@ 0x64
 8011bac:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011bb0:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011bb4:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011bb8:	911d      	str	r1, [sp, #116]	@ 0x74
 8011bba:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011bbe:	1ad2      	subs	r2, r2, r3
 8011bc0:	e68b      	b.n	80118da <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8011bc2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011bc4:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8011bc6:	2b00      	cmp	r3, #0
 8011bc8:	f000 80d1 	beq.w	8011d6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8011bcc:	ad19      	add	r5, sp, #100	@ 0x64
 8011bce:	ac39      	add	r4, sp, #228	@ 0xe4
 8011bd0:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011bd2:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8011bd6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8011bda:	930c      	str	r3, [sp, #48]	@ 0x30
 8011bdc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011bde:	6963      	ldr	r3, [r4, #20]
 8011be0:	440b      	add	r3, r1
 8011be2:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8011be6:	4408      	add	r0, r1
 8011be8:	b200      	sxth	r0, r0
 8011bea:	4283      	cmp	r3, r0
 8011bec:	900d      	str	r0, [sp, #52]	@ 0x34
 8011bee:	f280 80c1 	bge.w	8011d74 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8011bf2:	428b      	cmp	r3, r1
 8011bf4:	da08      	bge.n	8011c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011bf6:	2a00      	cmp	r2, #0
 8011bf8:	dd06      	ble.n	8011c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011bfa:	1acb      	subs	r3, r1, r3
 8011bfc:	429a      	cmp	r2, r3
 8011bfe:	f2c0 80bb 	blt.w	8011d78 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8011c02:	2b00      	cmp	r3, #0
 8011c04:	f300 80b9 	bgt.w	8011d7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8011c08:	6967      	ldr	r7, [r4, #20]
 8011c0a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8011c0e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c10:	443b      	add	r3, r7
 8011c12:	461f      	mov	r7, r3
 8011c14:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011c16:	1bdf      	subs	r7, r3, r7
 8011c18:	4297      	cmp	r7, r2
 8011c1a:	bfa8      	it	ge
 8011c1c:	4617      	movge	r7, r2
 8011c1e:	2f00      	cmp	r7, #0
 8011c20:	f340 813c 	ble.w	8011e9c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8011c24:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8011c26:	6829      	ldr	r1, [r5, #0]
 8011c28:	f9b3 2000 	ldrsh.w	r2, [r3]
 8011c2c:	f9bb 3000 	ldrsh.w	r3, [fp]
 8011c30:	4411      	add	r1, r2
 8011c32:	6820      	ldr	r0, [r4, #0]
 8011c34:	4299      	cmp	r1, r3
 8011c36:	dd1a      	ble.n	8011c6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011c38:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8011c3c:	4402      	add	r2, r0
 8011c3e:	440b      	add	r3, r1
 8011c40:	b21b      	sxth	r3, r3
 8011c42:	429a      	cmp	r2, r3
 8011c44:	dc13      	bgt.n	8011c6e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8011c46:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8011c48:	a912      	add	r1, sp, #72	@ 0x48
 8011c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011c4c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8011c4e:	681b      	ldr	r3, [r3, #0]
 8011c50:	9206      	str	r2, [sp, #24]
 8011c52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011c54:	9500      	str	r5, [sp, #0]
 8011c56:	9205      	str	r2, [sp, #20]
 8011c58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8011c5a:	e9cd b203 	strd	fp, r2, [sp, #12]
 8011c5e:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8011c60:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8011c64:	aa49      	add	r2, sp, #292	@ 0x124
 8011c66:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8011c6a:	4623      	mov	r3, r4
 8011c6c:	47c8      	blx	r9
 8011c6e:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8011c72:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8011c76:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8011c7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011c7e:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8011c82:	68a1      	ldr	r1, [r4, #8]
 8011c84:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011c88:	ed94 6a08 	vldr	s12, [r4, #32]
 8011c8c:	edd4 6a07 	vldr	s13, [r4, #28]
 8011c90:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011c94:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011c98:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011c9c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8011ca0:	edc4 6a07 	vstr	s13, [r4, #28]
 8011ca4:	441a      	add	r2, r3
 8011ca6:	6963      	ldr	r3, [r4, #20]
 8011ca8:	3301      	adds	r3, #1
 8011caa:	6022      	str	r2, [r4, #0]
 8011cac:	6163      	str	r3, [r4, #20]
 8011cae:	69a3      	ldr	r3, [r4, #24]
 8011cb0:	3b01      	subs	r3, #1
 8011cb2:	61a3      	str	r3, [r4, #24]
 8011cb4:	6923      	ldr	r3, [r4, #16]
 8011cb6:	440b      	add	r3, r1
 8011cb8:	68e1      	ldr	r1, [r4, #12]
 8011cba:	428b      	cmp	r3, r1
 8011cbc:	6123      	str	r3, [r4, #16]
 8011cbe:	db15      	blt.n	8011cec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8011cc0:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8011cc4:	3201      	adds	r2, #1
 8011cc6:	1a5b      	subs	r3, r3, r1
 8011cc8:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011ccc:	6022      	str	r2, [r4, #0]
 8011cce:	6123      	str	r3, [r4, #16]
 8011cd0:	edc4 6a07 	vstr	s13, [r4, #28]
 8011cd4:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8011cd8:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011cdc:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8011ce0:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8011ce4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011ce8:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8011cec:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8011cf0:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8011cf4:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8011cf8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8011cfc:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8011d00:	68a9      	ldr	r1, [r5, #8]
 8011d02:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8011d06:	ed95 6a08 	vldr	s12, [r5, #32]
 8011d0a:	edd5 6a07 	vldr	s13, [r5, #28]
 8011d0e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011d12:	ee76 6a86 	vadd.f32	s13, s13, s12
 8011d16:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011d1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8011d1e:	edc5 6a07 	vstr	s13, [r5, #28]
 8011d22:	441a      	add	r2, r3
 8011d24:	696b      	ldr	r3, [r5, #20]
 8011d26:	3301      	adds	r3, #1
 8011d28:	602a      	str	r2, [r5, #0]
 8011d2a:	616b      	str	r3, [r5, #20]
 8011d2c:	69ab      	ldr	r3, [r5, #24]
 8011d2e:	3b01      	subs	r3, #1
 8011d30:	61ab      	str	r3, [r5, #24]
 8011d32:	692b      	ldr	r3, [r5, #16]
 8011d34:	440b      	add	r3, r1
 8011d36:	68e9      	ldr	r1, [r5, #12]
 8011d38:	428b      	cmp	r3, r1
 8011d3a:	612b      	str	r3, [r5, #16]
 8011d3c:	db15      	blt.n	8011d6a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8011d3e:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8011d42:	3201      	adds	r2, #1
 8011d44:	1a5b      	subs	r3, r3, r1
 8011d46:	ee76 6a26 	vadd.f32	s13, s12, s13
 8011d4a:	602a      	str	r2, [r5, #0]
 8011d4c:	612b      	str	r3, [r5, #16]
 8011d4e:	edc5 6a07 	vstr	s13, [r5, #28]
 8011d52:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8011d56:	ee36 7a87 	vadd.f32	s14, s13, s14
 8011d5a:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8011d5e:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8011d62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8011d66:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8011d6a:	3f01      	subs	r7, #1
 8011d6c:	e757      	b.n	8011c1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8011d6e:	ad39      	add	r5, sp, #228	@ 0xe4
 8011d70:	ac19      	add	r4, sp, #100	@ 0x64
 8011d72:	e72d      	b.n	8011bd0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8011d74:	4613      	mov	r3, r2
 8011d76:	e744      	b.n	8011c02 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8011d78:	4613      	mov	r3, r2
 8011d7a:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8011d7c:	469e      	mov	lr, r3
 8011d7e:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8011d82:	461f      	mov	r7, r3
 8011d84:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8011d88:	f04f 0900 	mov.w	r9, #0
 8011d8c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8011d90:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8011d94:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8011d98:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8011d9c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8011da0:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8011da2:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8011da6:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8011daa:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8011dae:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8011db2:	960e      	str	r6, [sp, #56]	@ 0x38
 8011db4:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8011db8:	2f00      	cmp	r7, #0
 8011dba:	d146      	bne.n	8011e4a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8011dbc:	449c      	add	ip, r3
 8011dbe:	1ad7      	subs	r7, r2, r3
 8011dc0:	f1b9 0f00 	cmp.w	r9, #0
 8011dc4:	d009      	beq.n	8011dda <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8011dc6:	9039      	str	r0, [sp, #228]	@ 0xe4
 8011dc8:	913d      	str	r1, [sp, #244]	@ 0xf4
 8011dca:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8011dce:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8011dd2:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8011dd6:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8011dda:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8011ddc:	f04f 0800 	mov.w	r8, #0
 8011de0:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8011de4:	910e      	str	r1, [sp, #56]	@ 0x38
 8011de6:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8011dea:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8011dee:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8011df2:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8011df6:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8011dfa:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8011dfe:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8011e02:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8011e06:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8011e0a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8011e0e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8011e12:	f1be 0f00 	cmp.w	lr, #0
 8011e16:	d030      	beq.n	8011e7a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8011e18:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011e1a:	4450      	add	r0, sl
 8011e1c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8011e20:	4431      	add	r1, r6
 8011e22:	ee37 7a04 	vadd.f32	s14, s14, s8
 8011e26:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8011e2a:	4549      	cmp	r1, r9
 8011e2c:	db08      	blt.n	8011e40 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8011e2e:	ee77 7a85 	vadd.f32	s15, s15, s10
 8011e32:	3001      	adds	r0, #1
 8011e34:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8011e38:	eba1 0109 	sub.w	r1, r1, r9
 8011e3c:	ee37 7a06 	vadd.f32	s14, s14, s12
 8011e40:	f10e 3eff 	add.w	lr, lr, #4294967295
 8011e44:	f04f 0801 	mov.w	r8, #1
 8011e48:	e7e3      	b.n	8011e12 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8011e4a:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8011e4c:	4450      	add	r0, sl
 8011e4e:	ee37 7a24 	vadd.f32	s14, s14, s9
 8011e52:	4431      	add	r1, r6
 8011e54:	ee77 7a84 	vadd.f32	s15, s15, s8
 8011e58:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8011e5c:	4541      	cmp	r1, r8
 8011e5e:	db08      	blt.n	8011e72 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8011e60:	ee76 6a85 	vadd.f32	s13, s13, s10
 8011e64:	3001      	adds	r0, #1
 8011e66:	ee37 7a25 	vadd.f32	s14, s14, s11
 8011e6a:	eba1 0108 	sub.w	r1, r1, r8
 8011e6e:	ee77 7a86 	vadd.f32	s15, s15, s12
 8011e72:	3f01      	subs	r7, #1
 8011e74:	f04f 0901 	mov.w	r9, #1
 8011e78:	e79e      	b.n	8011db8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8011e7a:	449c      	add	ip, r3
 8011e7c:	1aff      	subs	r7, r7, r3
 8011e7e:	f1b8 0f00 	cmp.w	r8, #0
 8011e82:	d009      	beq.n	8011e98 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8011e84:	9019      	str	r0, [sp, #100]	@ 0x64
 8011e86:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8011e8a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8011e8e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8011e92:	911d      	str	r1, [sp, #116]	@ 0x74
 8011e94:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8011e98:	1ad2      	subs	r2, r2, r3
 8011e9a:	e6b5      	b.n	8011c08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8011e9c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011e9e:	681b      	ldr	r3, [r3, #0]
 8011ea0:	b923      	cbnz	r3, 8011eac <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8011ea2:	4b04      	ldr	r3, [pc, #16]	@ (8011eb4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8011ea4:	6818      	ldr	r0, [r3, #0]
 8011ea6:	6803      	ldr	r3, [r0, #0]
 8011ea8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011eaa:	4798      	blx	r3
 8011eac:	b05b      	add	sp, #364	@ 0x16c
 8011eae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011eb2:	bf00      	nop
 8011eb4:	240248fc 	.word	0x240248fc

08011eb8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8011eb8:	2b03      	cmp	r3, #3
 8011eba:	d818      	bhi.n	8011eee <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8011ebc:	e8df f003 	tbb	[pc, r3]
 8011ec0:	130d0602 	.word	0x130d0602
 8011ec4:	f9b0 2000 	ldrsh.w	r2, [r0]
 8011ec8:	1850      	adds	r0, r2, r1
 8011eca:	4770      	bx	lr
 8011ecc:	8803      	ldrh	r3, [r0, #0]
 8011ece:	8880      	ldrh	r0, [r0, #4]
 8011ed0:	4418      	add	r0, r3
 8011ed2:	b200      	sxth	r0, r0
 8011ed4:	1a80      	subs	r0, r0, r2
 8011ed6:	3801      	subs	r0, #1
 8011ed8:	4770      	bx	lr
 8011eda:	8803      	ldrh	r3, [r0, #0]
 8011edc:	8880      	ldrh	r0, [r0, #4]
 8011ede:	4418      	add	r0, r3
 8011ee0:	b200      	sxth	r0, r0
 8011ee2:	1a40      	subs	r0, r0, r1
 8011ee4:	e7f7      	b.n	8011ed6 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8011ee6:	f9b0 0000 	ldrsh.w	r0, [r0]
 8011eea:	4410      	add	r0, r2
 8011eec:	4770      	bx	lr
 8011eee:	2000      	movs	r0, #0
 8011ef0:	4770      	bx	lr

08011ef2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8011ef2:	2b03      	cmp	r3, #3
 8011ef4:	d817      	bhi.n	8011f26 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8011ef6:	e8df f003 	tbb	[pc, r3]
 8011efa:	0602      	.short	0x0602
 8011efc:	1009      	.short	0x1009
 8011efe:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8011f02:	1850      	adds	r0, r2, r1
 8011f04:	4770      	bx	lr
 8011f06:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8011f0a:	e7fa      	b.n	8011f02 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8011f0c:	8843      	ldrh	r3, [r0, #2]
 8011f0e:	88c0      	ldrh	r0, [r0, #6]
 8011f10:	4418      	add	r0, r3
 8011f12:	b200      	sxth	r0, r0
 8011f14:	1a80      	subs	r0, r0, r2
 8011f16:	3801      	subs	r0, #1
 8011f18:	4770      	bx	lr
 8011f1a:	8843      	ldrh	r3, [r0, #2]
 8011f1c:	88c0      	ldrh	r0, [r0, #6]
 8011f1e:	4418      	add	r0, r3
 8011f20:	b200      	sxth	r0, r0
 8011f22:	1a40      	subs	r0, r0, r1
 8011f24:	e7f7      	b.n	8011f16 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8011f26:	2000      	movs	r0, #0
 8011f28:	4770      	bx	lr
	...

08011f2c <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8011f2c:	4b01      	ldr	r3, [pc, #4]	@ (8011f34 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8011f2e:	2200      	movs	r2, #0
 8011f30:	601a      	str	r2, [r3, #0]
 8011f32:	4770      	bx	lr
 8011f34:	2402490c 	.word	0x2402490c

08011f38 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8011f38:	4603      	mov	r3, r0
 8011f3a:	b1c8      	cbz	r0, 8011f70 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8011f3c:	0c02      	lsrs	r2, r0, #16
 8011f3e:	0412      	lsls	r2, r2, #16
 8011f40:	b9a2      	cbnz	r2, 8011f6c <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8011f42:	0403      	lsls	r3, r0, #16
 8011f44:	2010      	movs	r0, #16
 8011f46:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8011f4a:	bf04      	itt	eq
 8011f4c:	021b      	lsleq	r3, r3, #8
 8011f4e:	3008      	addeq	r0, #8
 8011f50:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8011f54:	bf04      	itt	eq
 8011f56:	011b      	lsleq	r3, r3, #4
 8011f58:	3004      	addeq	r0, #4
 8011f5a:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8011f5e:	bf04      	itt	eq
 8011f60:	009b      	lsleq	r3, r3, #2
 8011f62:	3002      	addeq	r0, #2
 8011f64:	2b00      	cmp	r3, #0
 8011f66:	db04      	blt.n	8011f72 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8011f68:	3001      	adds	r0, #1
 8011f6a:	4770      	bx	lr
 8011f6c:	2000      	movs	r0, #0
 8011f6e:	e7ea      	b.n	8011f46 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8011f70:	2020      	movs	r0, #32
 8011f72:	4770      	bx	lr

08011f74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8011f74:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011f78:	b087      	sub	sp, #28
 8011f7a:	460d      	mov	r5, r1
 8011f7c:	4616      	mov	r6, r2
 8011f7e:	4698      	mov	r8, r3
 8011f80:	4601      	mov	r1, r0
 8011f82:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8011f86:	b120      	cbz	r0, 8011f92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011f88:	b11a      	cbz	r2, 8011f92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011f8a:	2d1f      	cmp	r5, #31
 8011f8c:	d801      	bhi.n	8011f92 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8011f8e:	2b1f      	cmp	r3, #31
 8011f90:	d904      	bls.n	8011f9c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8011f92:	2000      	movs	r0, #0
 8011f94:	6038      	str	r0, [r7, #0]
 8011f96:	b007      	add	sp, #28
 8011f98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011f9c:	b97d      	cbnz	r5, 8011fbe <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8011f9e:	b143      	cbz	r3, 8011fb2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8011fa0:	4602      	mov	r2, r0
 8011fa2:	462b      	mov	r3, r5
 8011fa4:	4641      	mov	r1, r8
 8011fa6:	4630      	mov	r0, r6
 8011fa8:	e9cd 4700 	strd	r4, r7, [sp]
 8011fac:	f7ff ffe2 	bl	8011f74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8011fb0:	e7f1      	b.n	8011f96 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011fb2:	f04f 33ff 	mov.w	r3, #4294967295
 8011fb6:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8011fba:	603b      	str	r3, [r7, #0]
 8011fbc:	e7eb      	b.n	8011f96 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011fbe:	fa32 fa05 	lsrs.w	sl, r2, r5
 8011fc2:	d106      	bne.n	8011fd2 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8011fc4:	4346      	muls	r6, r0
 8011fc6:	fbb6 f0f4 	udiv	r0, r6, r4
 8011fca:	fb04 6610 	mls	r6, r4, r0, r6
 8011fce:	603e      	str	r6, [r7, #0]
 8011fd0:	e7e1      	b.n	8011f96 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8011fd2:	2201      	movs	r2, #1
 8011fd4:	fa00 fb05 	lsl.w	fp, r0, r5
 8011fd8:	40aa      	lsls	r2, r5
 8011fda:	fbbb f9f4 	udiv	r9, fp, r4
 8011fde:	3a01      	subs	r2, #1
 8011fe0:	fb0a f309 	mul.w	r3, sl, r9
 8011fe4:	fb04 b919 	mls	r9, r4, r9, fp
 8011fe8:	4016      	ands	r6, r2
 8011fea:	9303      	str	r3, [sp, #12]
 8011fec:	4630      	mov	r0, r6
 8011fee:	f7ff ffa3 	bl	8011f38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8011ff2:	462b      	mov	r3, r5
 8011ff4:	460a      	mov	r2, r1
 8011ff6:	4601      	mov	r1, r0
 8011ff8:	4630      	mov	r0, r6
 8011ffa:	e9cd 4700 	strd	r4, r7, [sp]
 8011ffe:	f7ff ffb9 	bl	8011f74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012002:	4606      	mov	r6, r0
 8012004:	4648      	mov	r0, r9
 8012006:	eb05 0108 	add.w	r1, r5, r8
 801200a:	f7ff ff95 	bl	8011f38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801200e:	ab05      	add	r3, sp, #20
 8012010:	464a      	mov	r2, r9
 8012012:	e9cd 4300 	strd	r4, r3, [sp]
 8012016:	4603      	mov	r3, r0
 8012018:	4650      	mov	r0, sl
 801201a:	f7ff ffab 	bl	8011f74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801201e:	6839      	ldr	r1, [r7, #0]
 8012020:	9a05      	ldr	r2, [sp, #20]
 8012022:	9b03      	ldr	r3, [sp, #12]
 8012024:	4411      	add	r1, r2
 8012026:	fbb1 f2f4 	udiv	r2, r1, r4
 801202a:	18d3      	adds	r3, r2, r3
 801202c:	fb04 1412 	mls	r4, r4, r2, r1
 8012030:	441e      	add	r6, r3
 8012032:	603c      	str	r4, [r7, #0]
 8012034:	4430      	add	r0, r6
 8012036:	e7ae      	b.n	8011f96 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012038 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012038:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801203c:	b085      	sub	sp, #20
 801203e:	f1b0 0900 	subs.w	r9, r0, #0
 8012042:	461d      	mov	r5, r3
 8012044:	4617      	mov	r7, r2
 8012046:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012048:	bfbb      	ittet	lt
 801204a:	f1c9 0900 	rsblt	r9, r9, #0
 801204e:	f04f 36ff 	movlt.w	r6, #4294967295
 8012052:	2601      	movge	r6, #1
 8012054:	6823      	ldrlt	r3, [r4, #0]
 8012056:	bfbc      	itt	lt
 8012058:	425b      	neglt	r3, r3
 801205a:	6023      	strlt	r3, [r4, #0]
 801205c:	2a00      	cmp	r2, #0
 801205e:	da04      	bge.n	801206a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012060:	6823      	ldr	r3, [r4, #0]
 8012062:	4257      	negs	r7, r2
 8012064:	4276      	negs	r6, r6
 8012066:	425b      	negs	r3, r3
 8012068:	6023      	str	r3, [r4, #0]
 801206a:	2d00      	cmp	r5, #0
 801206c:	4638      	mov	r0, r7
 801206e:	bfba      	itte	lt
 8012070:	426d      	neglt	r5, r5
 8012072:	f04f 38ff 	movlt.w	r8, #4294967295
 8012076:	f04f 0801 	movge.w	r8, #1
 801207a:	f7ff ff5d 	bl	8011f38 <_ZN8touchgfx16TouchCalibration4clzuEm>
 801207e:	ab03      	add	r3, sp, #12
 8012080:	463a      	mov	r2, r7
 8012082:	e9cd 5300 	strd	r5, r3, [sp]
 8012086:	4603      	mov	r3, r0
 8012088:	4648      	mov	r0, r9
 801208a:	f7ff ff73 	bl	8011f74 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801208e:	6823      	ldr	r3, [r4, #0]
 8012090:	9a03      	ldr	r2, [sp, #12]
 8012092:	4546      	cmp	r6, r8
 8012094:	441a      	add	r2, r3
 8012096:	fb92 f3f5 	sdiv	r3, r2, r5
 801209a:	4418      	add	r0, r3
 801209c:	fb05 2313 	mls	r3, r5, r3, r2
 80120a0:	bf18      	it	ne
 80120a2:	4240      	negne	r0, r0
 80120a4:	1c72      	adds	r2, r6, #1
 80120a6:	6023      	str	r3, [r4, #0]
 80120a8:	d105      	bne.n	80120b6 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	f1c3 0200 	rsb	r2, r3, #0
 80120b0:	db0b      	blt.n	80120ca <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 80120b2:	6022      	str	r2, [r4, #0]
 80120b4:	e006      	b.n	80120c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80120b6:	2e01      	cmp	r6, #1
 80120b8:	d104      	bne.n	80120c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80120ba:	2b00      	cmp	r3, #0
 80120bc:	da02      	bge.n	80120c4 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 80120be:	442b      	add	r3, r5
 80120c0:	3801      	subs	r0, #1
 80120c2:	6023      	str	r3, [r4, #0]
 80120c4:	b005      	add	sp, #20
 80120c6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80120ca:	3801      	subs	r0, #1
 80120cc:	1b52      	subs	r2, r2, r5
 80120ce:	e7f0      	b.n	80120b2 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

080120d0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 80120d0:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 80120d4:	4c1c      	ldr	r4, [pc, #112]	@ (8012148 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 80120d6:	4605      	mov	r5, r0
 80120d8:	6807      	ldr	r7, [r0, #0]
 80120da:	69a3      	ldr	r3, [r4, #24]
 80120dc:	b92b      	cbnz	r3, 80120ea <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 80120de:	6840      	ldr	r0, [r0, #4]
 80120e0:	e9c5 7000 	strd	r7, r0, [r5]
 80120e4:	b004      	add	sp, #16
 80120e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80120ea:	f04f 0802 	mov.w	r8, #2
 80120ee:	68a2      	ldr	r2, [r4, #8]
 80120f0:	ae04      	add	r6, sp, #16
 80120f2:	6820      	ldr	r0, [r4, #0]
 80120f4:	fb93 f1f8 	sdiv	r1, r3, r8
 80120f8:	440a      	add	r2, r1
 80120fa:	69e1      	ldr	r1, [r4, #28]
 80120fc:	f846 2d04 	str.w	r2, [r6, #-4]!
 8012100:	463a      	mov	r2, r7
 8012102:	9600      	str	r6, [sp, #0]
 8012104:	f7ff ff98 	bl	8012038 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012108:	69a3      	ldr	r3, [r4, #24]
 801210a:	4607      	mov	r7, r0
 801210c:	686a      	ldr	r2, [r5, #4]
 801210e:	6a21      	ldr	r1, [r4, #32]
 8012110:	9600      	str	r6, [sp, #0]
 8012112:	6860      	ldr	r0, [r4, #4]
 8012114:	f7ff ff90 	bl	8012038 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012118:	69a3      	ldr	r3, [r4, #24]
 801211a:	6962      	ldr	r2, [r4, #20]
 801211c:	4407      	add	r7, r0
 801211e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8012120:	9600      	str	r6, [sp, #0]
 8012122:	68e0      	ldr	r0, [r4, #12]
 8012124:	fb93 f8f8 	sdiv	r8, r3, r8
 8012128:	4442      	add	r2, r8
 801212a:	9203      	str	r2, [sp, #12]
 801212c:	682a      	ldr	r2, [r5, #0]
 801212e:	f7ff ff83 	bl	8012038 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012132:	4680      	mov	r8, r0
 8012134:	9600      	str	r6, [sp, #0]
 8012136:	69a3      	ldr	r3, [r4, #24]
 8012138:	686a      	ldr	r2, [r5, #4]
 801213a:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 801213c:	6920      	ldr	r0, [r4, #16]
 801213e:	f7ff ff7b 	bl	8012038 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8012142:	4440      	add	r0, r8
 8012144:	e7cc      	b.n	80120e0 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 8012146:	bf00      	nop
 8012148:	24024910 	.word	0x24024910

0801214c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 801214c:	4b07      	ldr	r3, [pc, #28]	@ (801216c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 801214e:	781b      	ldrb	r3, [r3, #0]
 8012150:	2b01      	cmp	r3, #1
 8012152:	d109      	bne.n	8012168 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 8012154:	f9b1 3000 	ldrsh.w	r3, [r1]
 8012158:	f9b0 2000 	ldrsh.w	r2, [r0]
 801215c:	8003      	strh	r3, [r0, #0]
 801215e:	4b04      	ldr	r3, [pc, #16]	@ (8012170 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 8012160:	881b      	ldrh	r3, [r3, #0]
 8012162:	3b01      	subs	r3, #1
 8012164:	1a9b      	subs	r3, r3, r2
 8012166:	800b      	strh	r3, [r1, #0]
 8012168:	4770      	bx	lr
 801216a:	bf00      	nop
 801216c:	240248f4 	.word	0x240248f4
 8012170:	240248f0 	.word	0x240248f0

08012174 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 8012174:	4b07      	ldr	r3, [pc, #28]	@ (8012194 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 8012176:	b510      	push	{r4, lr}
 8012178:	781b      	ldrb	r3, [r3, #0]
 801217a:	2b01      	cmp	r3, #1
 801217c:	d108      	bne.n	8012190 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 801217e:	4b06      	ldr	r3, [pc, #24]	@ (8012198 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8012180:	880c      	ldrh	r4, [r1, #0]
 8012182:	881b      	ldrh	r3, [r3, #0]
 8012184:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012188:	3b01      	subs	r3, #1
 801218a:	1b1b      	subs	r3, r3, r4
 801218c:	8003      	strh	r3, [r0, #0]
 801218e:	800a      	strh	r2, [r1, #0]
 8012190:	bd10      	pop	{r4, pc}
 8012192:	bf00      	nop
 8012194:	240248f4 	.word	0x240248f4
 8012198:	240248f0 	.word	0x240248f0

0801219c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801219c:	4b0a      	ldr	r3, [pc, #40]	@ (80121c8 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801219e:	b510      	push	{r4, lr}
 80121a0:	781b      	ldrb	r3, [r3, #0]
 80121a2:	2b01      	cmp	r3, #1
 80121a4:	d10e      	bne.n	80121c4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 80121a6:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 80121aa:	8843      	ldrh	r3, [r0, #2]
 80121ac:	f9b0 4000 	ldrsh.w	r4, [r0]
 80121b0:	18ca      	adds	r2, r1, r3
 80121b2:	4b06      	ldr	r3, [pc, #24]	@ (80121cc <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 80121b4:	8044      	strh	r4, [r0, #2]
 80121b6:	881b      	ldrh	r3, [r3, #0]
 80121b8:	1a9b      	subs	r3, r3, r2
 80121ba:	8003      	strh	r3, [r0, #0]
 80121bc:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80121c0:	8081      	strh	r1, [r0, #4]
 80121c2:	80c3      	strh	r3, [r0, #6]
 80121c4:	bd10      	pop	{r4, pc}
 80121c6:	bf00      	nop
 80121c8:	240248f4 	.word	0x240248f4
 80121cc:	240248f0 	.word	0x240248f0

080121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 80121d0:	4b08      	ldr	r3, [pc, #32]	@ (80121f4 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 80121d2:	781b      	ldrb	r3, [r3, #0]
 80121d4:	2b01      	cmp	r3, #1
 80121d6:	d10c      	bne.n	80121f2 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 80121d8:	8803      	ldrh	r3, [r0, #0]
 80121da:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 80121de:	8842      	ldrh	r2, [r0, #2]
 80121e0:	8002      	strh	r2, [r0, #0]
 80121e2:	185a      	adds	r2, r3, r1
 80121e4:	4b04      	ldr	r3, [pc, #16]	@ (80121f8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 80121e6:	881b      	ldrh	r3, [r3, #0]
 80121e8:	1a9b      	subs	r3, r3, r2
 80121ea:	8043      	strh	r3, [r0, #2]
 80121ec:	88c3      	ldrh	r3, [r0, #6]
 80121ee:	80c1      	strh	r1, [r0, #6]
 80121f0:	8083      	strh	r3, [r0, #4]
 80121f2:	4770      	bx	lr
 80121f4:	240248f4 	.word	0x240248f4
 80121f8:	240248f0 	.word	0x240248f0

080121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 80121fc:	4b07      	ldr	r3, [pc, #28]	@ (801221c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 80121fe:	b510      	push	{r4, lr}
 8012200:	781b      	ldrb	r3, [r3, #0]
 8012202:	2b01      	cmp	r3, #1
 8012204:	d108      	bne.n	8012218 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8012206:	f9b1 3000 	ldrsh.w	r3, [r1]
 801220a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801220e:	8003      	strh	r3, [r0, #0]
 8012210:	8893      	ldrh	r3, [r2, #4]
 8012212:	3b01      	subs	r3, #1
 8012214:	1b1b      	subs	r3, r3, r4
 8012216:	800b      	strh	r3, [r1, #0]
 8012218:	bd10      	pop	{r4, pc}
 801221a:	bf00      	nop
 801221c:	240248f4 	.word	0x240248f4

08012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 8012220:	4b0a      	ldr	r3, [pc, #40]	@ (801224c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 8012222:	460a      	mov	r2, r1
 8012224:	b510      	push	{r4, lr}
 8012226:	781b      	ldrb	r3, [r3, #0]
 8012228:	2b01      	cmp	r3, #1
 801222a:	d10d      	bne.n	8012248 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 801222c:	8881      	ldrh	r1, [r0, #4]
 801222e:	8803      	ldrh	r3, [r0, #0]
 8012230:	440b      	add	r3, r1
 8012232:	4601      	mov	r1, r0
 8012234:	3b01      	subs	r3, #1
 8012236:	f821 3b02 	strh.w	r3, [r1], #2
 801223a:	f7ff ffdf 	bl	80121fc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 801223e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8012242:	88c2      	ldrh	r2, [r0, #6]
 8012244:	80c3      	strh	r3, [r0, #6]
 8012246:	8082      	strh	r2, [r0, #4]
 8012248:	bd10      	pop	{r4, pc}
 801224a:	bf00      	nop
 801224c:	240248f4 	.word	0x240248f4

08012250 <_ZN8touchgfx11Application13requestRedrawEv>:
 8012250:	4b06      	ldr	r3, [pc, #24]	@ (801226c <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 8012252:	2100      	movs	r1, #0
 8012254:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012258:	4b05      	ldr	r3, [pc, #20]	@ (8012270 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 801225a:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 801225e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012262:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 8012266:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 801226a:	4770      	bx	lr
 801226c:	240248f0 	.word	0x240248f0
 8012270:	240248f2 	.word	0x240248f2

08012274 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 8012274:	4b03      	ldr	r3, [pc, #12]	@ (8012284 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 8012276:	6818      	ldr	r0, [r3, #0]
 8012278:	b110      	cbz	r0, 8012280 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 801227a:	6803      	ldr	r3, [r0, #0]
 801227c:	699b      	ldr	r3, [r3, #24]
 801227e:	4718      	bx	r3
 8012280:	4770      	bx	lr
 8012282:	bf00      	nop
 8012284:	24024940 	.word	0x24024940

08012288 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8012288:	4770      	bx	lr
	...

0801228c <_ZN8touchgfx11Application4drawEv>:
 801228c:	4b09      	ldr	r3, [pc, #36]	@ (80122b4 <_ZN8touchgfx11Application4drawEv+0x28>)
 801228e:	b507      	push	{r0, r1, r2, lr}
 8012290:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012294:	2100      	movs	r1, #0
 8012296:	4b08      	ldr	r3, [pc, #32]	@ (80122b8 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8012298:	9100      	str	r1, [sp, #0]
 801229a:	4669      	mov	r1, sp
 801229c:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122a0:	f8ad 2004 	strh.w	r2, [sp, #4]
 80122a4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80122a8:	6803      	ldr	r3, [r0, #0]
 80122aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80122ac:	4798      	blx	r3
 80122ae:	b003      	add	sp, #12
 80122b0:	f85d fb04 	ldr.w	pc, [sp], #4
 80122b4:	240248f0 	.word	0x240248f0
 80122b8:	240248f2 	.word	0x240248f2

080122bc <_ZN8touchgfx11Application10invalidateEv>:
 80122bc:	4b09      	ldr	r3, [pc, #36]	@ (80122e4 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 80122be:	b082      	sub	sp, #8
 80122c0:	2100      	movs	r1, #0
 80122c2:	f9b3 2000 	ldrsh.w	r2, [r3]
 80122c6:	4b08      	ldr	r3, [pc, #32]	@ (80122e8 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 80122c8:	f8ad 2004 	strh.w	r2, [sp, #4]
 80122cc:	aa02      	add	r2, sp, #8
 80122ce:	f9b3 3000 	ldrsh.w	r3, [r3]
 80122d2:	9100      	str	r1, [sp, #0]
 80122d4:	f8ad 3006 	strh.w	r3, [sp, #6]
 80122d8:	6803      	ldr	r3, [r0, #0]
 80122da:	e912 0006 	ldmdb	r2, {r1, r2}
 80122de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80122e0:	b002      	add	sp, #8
 80122e2:	4718      	bx	r3
 80122e4:	240248f0 	.word	0x240248f0
 80122e8:	240248f2 	.word	0x240248f2

080122ec <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 80122ec:	4b03      	ldr	r3, [pc, #12]	@ (80122fc <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 80122ee:	6818      	ldr	r0, [r3, #0]
 80122f0:	b110      	cbz	r0, 80122f8 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 80122f2:	6803      	ldr	r3, [r0, #0]
 80122f4:	69db      	ldr	r3, [r3, #28]
 80122f6:	4718      	bx	r3
 80122f8:	4770      	bx	lr
 80122fa:	bf00      	nop
 80122fc:	24024940 	.word	0x24024940

08012300 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8012300:	4b03      	ldr	r3, [pc, #12]	@ (8012310 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8012302:	6818      	ldr	r0, [r3, #0]
 8012304:	b110      	cbz	r0, 801230c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8012306:	6803      	ldr	r3, [r0, #0]
 8012308:	6a1b      	ldr	r3, [r3, #32]
 801230a:	4718      	bx	r3
 801230c:	4770      	bx	lr
 801230e:	bf00      	nop
 8012310:	24024940 	.word	0x24024940

08012314 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8012314:	2300      	movs	r3, #0
 8012316:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801231a:	4770      	bx	lr

0801231c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801231c:	4b03      	ldr	r3, [pc, #12]	@ (801232c <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801231e:	6818      	ldr	r0, [r3, #0]
 8012320:	b110      	cbz	r0, 8012328 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 8012322:	6803      	ldr	r3, [r0, #0]
 8012324:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012326:	4718      	bx	r3
 8012328:	4770      	bx	lr
 801232a:	bf00      	nop
 801232c:	24024940 	.word	0x24024940

08012330 <_ZN8touchgfx11ApplicationD1Ev>:
 8012330:	4770      	bx	lr

08012332 <_ZN8touchgfx11ApplicationD0Ev>:
 8012332:	b510      	push	{r4, lr}
 8012334:	4604      	mov	r4, r0
 8012336:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 801233a:	f00d fee0 	bl	80200fe <_ZdlPvj>
 801233e:	4620      	mov	r0, r4
 8012340:	bd10      	pop	{r4, pc}

08012342 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 8012342:	b510      	push	{r4, lr}
 8012344:	f9b1 4000 	ldrsh.w	r4, [r1]
 8012348:	888a      	ldrh	r2, [r1, #4]
 801234a:	f9b0 3000 	ldrsh.w	r3, [r0]
 801234e:	4422      	add	r2, r4
 8012350:	b212      	sxth	r2, r2
 8012352:	4293      	cmp	r3, r2
 8012354:	da15      	bge.n	8012382 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012356:	8882      	ldrh	r2, [r0, #4]
 8012358:	4413      	add	r3, r2
 801235a:	b21b      	sxth	r3, r3
 801235c:	429c      	cmp	r4, r3
 801235e:	da10      	bge.n	8012382 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012360:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8012364:	88c9      	ldrh	r1, [r1, #6]
 8012366:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 801236a:	4419      	add	r1, r3
 801236c:	b209      	sxth	r1, r1
 801236e:	428a      	cmp	r2, r1
 8012370:	da07      	bge.n	8012382 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 8012372:	88c0      	ldrh	r0, [r0, #6]
 8012374:	4410      	add	r0, r2
 8012376:	b200      	sxth	r0, r0
 8012378:	4283      	cmp	r3, r0
 801237a:	bfac      	ite	ge
 801237c:	2000      	movge	r0, #0
 801237e:	2001      	movlt	r0, #1
 8012380:	bd10      	pop	{r4, pc}
 8012382:	2000      	movs	r0, #0
 8012384:	e7fc      	b.n	8012380 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

08012386 <_ZN8touchgfx4Rect10restrictToEss>:
 8012386:	f9b0 3000 	ldrsh.w	r3, [r0]
 801238a:	2b00      	cmp	r3, #0
 801238c:	b510      	push	{r4, lr}
 801238e:	da04      	bge.n	801239a <_ZN8touchgfx4Rect10restrictToEss+0x14>
 8012390:	8884      	ldrh	r4, [r0, #4]
 8012392:	4423      	add	r3, r4
 8012394:	8083      	strh	r3, [r0, #4]
 8012396:	2300      	movs	r3, #0
 8012398:	8003      	strh	r3, [r0, #0]
 801239a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801239e:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80123a2:	1b09      	subs	r1, r1, r4
 80123a4:	428b      	cmp	r3, r1
 80123a6:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80123aa:	bfc8      	it	gt
 80123ac:	8081      	strhgt	r1, [r0, #4]
 80123ae:	2b00      	cmp	r3, #0
 80123b0:	da04      	bge.n	80123bc <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80123b2:	88c1      	ldrh	r1, [r0, #6]
 80123b4:	440b      	add	r3, r1
 80123b6:	80c3      	strh	r3, [r0, #6]
 80123b8:	2300      	movs	r3, #0
 80123ba:	8043      	strh	r3, [r0, #2]
 80123bc:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80123c0:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 80123c4:	1a52      	subs	r2, r2, r1
 80123c6:	4293      	cmp	r3, r2
 80123c8:	bfc8      	it	gt
 80123ca:	80c2      	strhgt	r2, [r0, #6]
 80123cc:	bd10      	pop	{r4, pc}
	...

080123d0 <_ZN8touchgfx11Application4drawERNS_4RectE>:
 80123d0:	4b10      	ldr	r3, [pc, #64]	@ (8012414 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 80123d2:	b510      	push	{r4, lr}
 80123d4:	460c      	mov	r4, r1
 80123d6:	f9b3 2000 	ldrsh.w	r2, [r3]
 80123da:	4b0f      	ldr	r3, [pc, #60]	@ (8012418 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 80123dc:	4620      	mov	r0, r4
 80123de:	f9b3 1000 	ldrsh.w	r1, [r3]
 80123e2:	f7ff ffd0 	bl	8012386 <_ZN8touchgfx4Rect10restrictToEss>
 80123e6:	4b0d      	ldr	r3, [pc, #52]	@ (801241c <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 80123e8:	6818      	ldr	r0, [r3, #0]
 80123ea:	b190      	cbz	r0, 8012412 <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 80123ec:	6803      	ldr	r3, [r0, #0]
 80123ee:	4621      	mov	r1, r4
 80123f0:	689b      	ldr	r3, [r3, #8]
 80123f2:	4798      	blx	r3
 80123f4:	4b0a      	ldr	r3, [pc, #40]	@ (8012420 <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 80123f6:	6818      	ldr	r0, [r3, #0]
 80123f8:	b118      	cbz	r0, 8012402 <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 80123fa:	6803      	ldr	r3, [r0, #0]
 80123fc:	4621      	mov	r1, r4
 80123fe:	689b      	ldr	r3, [r3, #8]
 8012400:	4798      	blx	r3
 8012402:	4b08      	ldr	r3, [pc, #32]	@ (8012424 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8012404:	4621      	mov	r1, r4
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	6803      	ldr	r3, [r0, #0]
 801240a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801240e:	69db      	ldr	r3, [r3, #28]
 8012410:	4718      	bx	r3
 8012412:	bd10      	pop	{r4, pc}
 8012414:	240248f2 	.word	0x240248f2
 8012418:	240248f0 	.word	0x240248f0
 801241c:	24024940 	.word	0x24024940
 8012420:	2402493c 	.word	0x2402493c
 8012424:	240248fc 	.word	0x240248fc

08012428 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8012428:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801242a:	4606      	mov	r6, r0
 801242c:	4608      	mov	r0, r1
 801242e:	460f      	mov	r7, r1
 8012430:	f7fb fe0f 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012434:	b9e8      	cbnz	r0, 8012472 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012436:	f9b7 5000 	ldrsh.w	r5, [r7]
 801243a:	f9b6 4000 	ldrsh.w	r4, [r6]
 801243e:	42a5      	cmp	r5, r4
 8012440:	db17      	blt.n	8012472 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8012442:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8012446:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 801244a:	429a      	cmp	r2, r3
 801244c:	db11      	blt.n	8012472 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801244e:	88b9      	ldrh	r1, [r7, #4]
 8012450:	440d      	add	r5, r1
 8012452:	88b1      	ldrh	r1, [r6, #4]
 8012454:	440c      	add	r4, r1
 8012456:	b22d      	sxth	r5, r5
 8012458:	b224      	sxth	r4, r4
 801245a:	42a5      	cmp	r5, r4
 801245c:	dc09      	bgt.n	8012472 <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801245e:	88f8      	ldrh	r0, [r7, #6]
 8012460:	4410      	add	r0, r2
 8012462:	88f2      	ldrh	r2, [r6, #6]
 8012464:	4413      	add	r3, r2
 8012466:	b200      	sxth	r0, r0
 8012468:	b21b      	sxth	r3, r3
 801246a:	4298      	cmp	r0, r3
 801246c:	bfcc      	ite	gt
 801246e:	2000      	movgt	r0, #0
 8012470:	2001      	movle	r0, #1
 8012472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 8012474:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8012476:	4604      	mov	r4, r0
 8012478:	4608      	mov	r0, r1
 801247a:	460d      	mov	r5, r1
 801247c:	f7fb fde9 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012480:	b978      	cbnz	r0, 80124a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 8012482:	4620      	mov	r0, r4
 8012484:	f7fb fde5 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012488:	f9b5 6000 	ldrsh.w	r6, [r5]
 801248c:	b150      	cbz	r0, 80124a4 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 801248e:	8026      	strh	r6, [r4, #0]
 8012490:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 8012494:	8063      	strh	r3, [r4, #2]
 8012496:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 801249a:	80a3      	strh	r3, [r4, #4]
 801249c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80124a0:	80e3      	strh	r3, [r4, #6]
 80124a2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80124a4:	f9b4 1000 	ldrsh.w	r1, [r4]
 80124a8:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80124ac:	42b1      	cmp	r1, r6
 80124ae:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80124b2:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80124b6:	460f      	mov	r7, r1
 80124b8:	88ed      	ldrh	r5, [r5, #6]
 80124ba:	bfa8      	it	ge
 80124bc:	4637      	movge	r7, r6
 80124be:	4293      	cmp	r3, r2
 80124c0:	4618      	mov	r0, r3
 80124c2:	4466      	add	r6, ip
 80124c4:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 80124c8:	bfa8      	it	ge
 80124ca:	4610      	movge	r0, r2
 80124cc:	442a      	add	r2, r5
 80124ce:	88e5      	ldrh	r5, [r4, #6]
 80124d0:	4461      	add	r1, ip
 80124d2:	b236      	sxth	r6, r6
 80124d4:	8027      	strh	r7, [r4, #0]
 80124d6:	442b      	add	r3, r5
 80124d8:	b209      	sxth	r1, r1
 80124da:	b212      	sxth	r2, r2
 80124dc:	8060      	strh	r0, [r4, #2]
 80124de:	b21b      	sxth	r3, r3
 80124e0:	428e      	cmp	r6, r1
 80124e2:	bfac      	ite	ge
 80124e4:	ebc7 0106 	rsbge	r1, r7, r6
 80124e8:	ebc7 0101 	rsblt	r1, r7, r1
 80124ec:	429a      	cmp	r2, r3
 80124ee:	bfac      	ite	ge
 80124f0:	ebc0 0202 	rsbge	r2, r0, r2
 80124f4:	ebc0 0203 	rsblt	r2, r0, r3
 80124f8:	80a1      	strh	r1, [r4, #4]
 80124fa:	80e2      	strh	r2, [r4, #6]
 80124fc:	e7d1      	b.n	80124a2 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

08012500 <_ZN8touchgfx11Application11getInstanceEv>:
 8012500:	4b01      	ldr	r3, [pc, #4]	@ (8012508 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 8012502:	6818      	ldr	r0, [r3, #0]
 8012504:	4770      	bx	lr
 8012506:	bf00      	nop
 8012508:	24024950 	.word	0x24024950

0801250c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 801250c:	2300      	movs	r3, #0
 801250e:	b510      	push	{r4, lr}
 8012510:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8012514:	4604      	mov	r4, r0
 8012516:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 801251a:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801251e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8012522:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8012526:	429a      	cmp	r2, r3
 8012528:	d90e      	bls.n	8012548 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 801252a:	18e2      	adds	r2, r4, r3
 801252c:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 8012530:	b122      	cbz	r2, 801253c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 8012532:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8012536:	6803      	ldr	r3, [r0, #0]
 8012538:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801253a:	4798      	blx	r3
 801253c:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 8012540:	3301      	adds	r3, #1
 8012542:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012546:	e7ea      	b.n	801251e <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8012548:	bd10      	pop	{r4, pc}

0801254a <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 801254a:	2300      	movs	r3, #0
 801254c:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 8012550:	30a4      	adds	r0, #164	@ 0xa4
 8012552:	f820 3c24 	strh.w	r3, [r0, #-36]
 8012556:	f802 3b01 	strb.w	r3, [r2], #1
 801255a:	4282      	cmp	r2, r0
 801255c:	d1fb      	bne.n	8012556 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801255e:	4770      	bx	lr

08012560 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 8012560:	b570      	push	{r4, r5, r6, lr}
 8012562:	4c0b      	ldr	r4, [pc, #44]	@ (8012590 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 8012564:	4605      	mov	r5, r0
 8012566:	460e      	mov	r6, r1
 8012568:	6820      	ldr	r0, [r4, #0]
 801256a:	b110      	cbz	r0, 8012572 <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 801256c:	6803      	ldr	r3, [r0, #0]
 801256e:	695b      	ldr	r3, [r3, #20]
 8012570:	4798      	blx	r3
 8012572:	1d28      	adds	r0, r5, #4
 8012574:	f7ff ffe9 	bl	801254a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 8012578:	6026      	str	r6, [r4, #0]
 801257a:	6833      	ldr	r3, [r6, #0]
 801257c:	4630      	mov	r0, r6
 801257e:	68db      	ldr	r3, [r3, #12]
 8012580:	4798      	blx	r3
 8012582:	682b      	ldr	r3, [r5, #0]
 8012584:	4628      	mov	r0, r5
 8012586:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012588:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801258c:	4718      	bx	r3
 801258e:	bf00      	nop
 8012590:	24024940 	.word	0x24024940

08012594 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 8012594:	2300      	movs	r3, #0
 8012596:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 801259a:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 801259e:	461a      	mov	r2, r3
 80125a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80125a2:	461c      	mov	r4, r3
 80125a4:	461d      	mov	r5, r3
 80125a6:	459c      	cmp	ip, r3
 80125a8:	dd1a      	ble.n	80125e0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80125aa:	18c6      	adds	r6, r0, r3
 80125ac:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80125b0:	b16e      	cbz	r6, 80125ce <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d008      	beq.n	80125c8 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80125b6:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80125ba:	fa1f fe82 	uxth.w	lr, r2
 80125be:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80125c2:	1887      	adds	r7, r0, r2
 80125c4:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 80125c8:	3201      	adds	r2, #1
 80125ca:	3301      	adds	r3, #1
 80125cc:	e7eb      	b.n	80125a6 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 80125ce:	4299      	cmp	r1, r3
 80125d0:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 80125d4:	bfa8      	it	ge
 80125d6:	3501      	addge	r5, #1
 80125d8:	429e      	cmp	r6, r3
 80125da:	bfc8      	it	gt
 80125dc:	3401      	addgt	r4, #1
 80125de:	e7f4      	b.n	80125ca <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 80125e0:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 80125e4:	1b49      	subs	r1, r1, r5
 80125e6:	1b1b      	subs	r3, r3, r4
 80125e8:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 80125ec:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 80125f0:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 80125f4:	4293      	cmp	r3, r2
 80125f6:	dd03      	ble.n	8012600 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 80125f8:	3b01      	subs	r3, #1
 80125fa:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 80125fe:	e7f7      	b.n	80125f0 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 8012600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08012604 <_ZN8touchgfx11Application15handleTickEventEv>:
 8012604:	b570      	push	{r4, r5, r6, lr}
 8012606:	4d16      	ldr	r5, [pc, #88]	@ (8012660 <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8012608:	4604      	mov	r4, r0
 801260a:	6828      	ldr	r0, [r5, #0]
 801260c:	b140      	cbz	r0, 8012620 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801260e:	7a03      	ldrb	r3, [r0, #8]
 8012610:	b933      	cbnz	r3, 8012620 <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 8012612:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012616:	6803      	ldr	r3, [r0, #0]
 8012618:	689b      	ldr	r3, [r3, #8]
 801261a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801261e:	4718      	bx	r3
 8012620:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8012624:	4e0f      	ldr	r6, [pc, #60]	@ (8012664 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8012626:	b973      	cbnz	r3, 8012646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8012628:	b168      	cbz	r0, 8012646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801262a:	7a03      	ldrb	r3, [r0, #8]
 801262c:	b15b      	cbz	r3, 8012646 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801262e:	6830      	ldr	r0, [r6, #0]
 8012630:	b110      	cbz	r0, 8012638 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 8012632:	6803      	ldr	r3, [r0, #0]
 8012634:	691b      	ldr	r3, [r3, #16]
 8012636:	4798      	blx	r3
 8012638:	6828      	ldr	r0, [r5, #0]
 801263a:	6803      	ldr	r3, [r0, #0]
 801263c:	68db      	ldr	r3, [r3, #12]
 801263e:	4798      	blx	r3
 8012640:	2301      	movs	r3, #1
 8012642:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8012646:	3404      	adds	r4, #4
 8012648:	4620      	mov	r0, r4
 801264a:	f7ff ff5f 	bl	801250c <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801264e:	4620      	mov	r0, r4
 8012650:	f7ff ffa0 	bl	8012594 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8012654:	6830      	ldr	r0, [r6, #0]
 8012656:	b110      	cbz	r0, 801265e <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8012658:	6803      	ldr	r3, [r0, #0]
 801265a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801265c:	e7dd      	b.n	801261a <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801265e:	bd70      	pop	{r4, r5, r6, pc}
 8012660:	24024944 	.word	0x24024944
 8012664:	24024940 	.word	0x24024940

08012668 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 8012668:	4603      	mov	r3, r0
 801266a:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 801266e:	2200      	movs	r2, #0
 8012670:	801a      	strh	r2, [r3, #0]
 8012672:	3308      	adds	r3, #8
 8012674:	f823 2c06 	strh.w	r2, [r3, #-6]
 8012678:	f823 2c04 	strh.w	r2, [r3, #-4]
 801267c:	f823 2c02 	strh.w	r2, [r3, #-2]
 8012680:	428b      	cmp	r3, r1
 8012682:	d1f5      	bne.n	8012670 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 8012684:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 8012688:	4770      	bx	lr
	...

0801268c <_ZN8touchgfx11ApplicationC1Ev>:
 801268c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801268e:	4b1d      	ldr	r3, [pc, #116]	@ (8012704 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 8012690:	4606      	mov	r6, r0
 8012692:	4604      	mov	r4, r0
 8012694:	2500      	movs	r5, #0
 8012696:	f846 3b04 	str.w	r3, [r6], #4
 801269a:	22a8      	movs	r2, #168	@ 0xa8
 801269c:	2100      	movs	r1, #0
 801269e:	4630      	mov	r0, r6
 80126a0:	f00e fb62 	bl	8020d68 <memset>
 80126a4:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80126a8:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80126ac:	4f16      	ldr	r7, [pc, #88]	@ (8012708 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80126ae:	f7ff ffdb 	bl	8012668 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80126b2:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80126b6:	f7ff ffd7 	bl	8012668 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80126ba:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80126be:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80126c2:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 80126c6:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 80126ca:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 80126ce:	490f      	ldr	r1, [pc, #60]	@ (801270c <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 80126d0:	480f      	ldr	r0, [pc, #60]	@ (8012710 <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 80126d2:	f00c fea3 	bl	801f41c <CRC_Lock>
 80126d6:	4b0f      	ldr	r3, [pc, #60]	@ (8012714 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 80126d8:	b158      	cbz	r0, 80126f2 <_ZN8touchgfx11ApplicationC1Ev+0x66>
 80126da:	801d      	strh	r5, [r3, #0]
 80126dc:	2300      	movs	r3, #0
 80126de:	4a0e      	ldr	r2, [pc, #56]	@ (8012718 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 80126e0:	4630      	mov	r0, r6
 80126e2:	6013      	str	r3, [r2, #0]
 80126e4:	4a0d      	ldr	r2, [pc, #52]	@ (801271c <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 80126e6:	603b      	str	r3, [r7, #0]
 80126e8:	6013      	str	r3, [r2, #0]
 80126ea:	f7ff ff2e 	bl	801254a <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80126ee:	4620      	mov	r0, r4
 80126f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80126f2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80126f6:	2002      	movs	r0, #2
 80126f8:	801a      	strh	r2, [r3, #0]
 80126fa:	6038      	str	r0, [r7, #0]
 80126fc:	f001 fd7c 	bl	80141f8 <_ZN8touchgfx6Screen4drawEv>
 8012700:	e7ec      	b.n	80126dc <_ZN8touchgfx11ApplicationC1Ev+0x50>
 8012702:	bf00      	nop
 8012704:	08024658 	.word	0x08024658
 8012708:	24024940 	.word	0x24024940
 801270c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012710:	f407a5c2 	.word	0xf407a5c2
 8012714:	2400007c 	.word	0x2400007c
 8012718:	24024950 	.word	0x24024950
 801271c:	24024944 	.word	0x24024944

08012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 8012720:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8012724:	3b01      	subs	r3, #1
 8012726:	b29b      	uxth	r3, r3
 8012728:	428b      	cmp	r3, r1
 801272a:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801272e:	b510      	push	{r4, lr}
 8012730:	d908      	bls.n	8012744 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 8012732:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8012736:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 801273a:	681a      	ldr	r2, [r3, #0]
 801273c:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 8012740:	685a      	ldr	r2, [r3, #4]
 8012742:	6062      	str	r2, [r4, #4]
 8012744:	bd10      	pop	{r4, pc}
	...

08012748 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8012748:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801274c:	b08f      	sub	sp, #60	@ 0x3c
 801274e:	4b8f      	ldr	r3, [pc, #572]	@ (801298c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 8012750:	4683      	mov	fp, r0
 8012752:	ac0a      	add	r4, sp, #40	@ 0x28
 8012754:	e884 0006 	stmia.w	r4, {r1, r2}
 8012758:	f9b3 2000 	ldrsh.w	r2, [r3]
 801275c:	4620      	mov	r0, r4
 801275e:	4b8c      	ldr	r3, [pc, #560]	@ (8012990 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 8012760:	f9b3 1000 	ldrsh.w	r1, [r3]
 8012764:	f7ff fe0f 	bl	8012386 <_ZN8touchgfx4Rect10restrictToEss>
 8012768:	4620      	mov	r0, r4
 801276a:	f7fb fc72 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 801276e:	2800      	cmp	r0, #0
 8012770:	d16a      	bne.n	8012848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012772:	9403      	str	r4, [sp, #12]
 8012774:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012778:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 801277c:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 8012780:	9301      	str	r3, [sp, #4]
 8012782:	35a4      	adds	r5, #164	@ 0xa4
 8012784:	b15c      	cbz	r4, 801279e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 8012786:	4629      	mov	r1, r5
 8012788:	9803      	ldr	r0, [sp, #12]
 801278a:	f7ff fe4d 	bl	8012428 <_ZNK8touchgfx4Rect8includesERKS0_>
 801278e:	3c01      	subs	r4, #1
 8012790:	b118      	cbz	r0, 801279a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 8012792:	b2a1      	uxth	r1, r4
 8012794:	9801      	ldr	r0, [sp, #4]
 8012796:	f7ff ffc3 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801279a:	3d08      	subs	r5, #8
 801279c:	e7f2      	b.n	8012784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 801279e:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80127a2:	f10a 33ff 	add.w	r3, sl, #4294967295
 80127a6:	f8cd a010 	str.w	sl, [sp, #16]
 80127aa:	9302      	str	r3, [sp, #8]
 80127ac:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80127b0:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80127b4:	9306      	str	r3, [sp, #24]
 80127b6:	445c      	add	r4, fp
 80127b8:	2500      	movs	r5, #0
 80127ba:	4626      	mov	r6, r4
 80127bc:	f8cd a014 	str.w	sl, [sp, #20]
 80127c0:	462f      	mov	r7, r5
 80127c2:	9b05      	ldr	r3, [sp, #20]
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d073      	beq.n	80128b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 80127c8:	9903      	ldr	r1, [sp, #12]
 80127ca:	4630      	mov	r0, r6
 80127cc:	f7ff fdb9 	bl	8012342 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80127d0:	b350      	cbz	r0, 8012828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80127d2:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 80127d6:	f9b6 c000 	ldrsh.w	ip, [r6]
 80127da:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 80127de:	45e6      	cmp	lr, ip
 80127e0:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 80127e4:	db33      	blt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80127e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 80127ea:	88b3      	ldrh	r3, [r6, #4]
 80127ec:	4472      	add	r2, lr
 80127ee:	4463      	add	r3, ip
 80127f0:	b212      	sxth	r2, r2
 80127f2:	b21b      	sxth	r3, r3
 80127f4:	429a      	cmp	r2, r3
 80127f6:	dc2a      	bgt.n	801284e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 80127f8:	fa1f f289 	uxth.w	r2, r9
 80127fc:	88f3      	ldrh	r3, [r6, #6]
 80127fe:	45c8      	cmp	r8, r9
 8012800:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012804:	4413      	add	r3, r2
 8012806:	fa1f fc88 	uxth.w	ip, r8
 801280a:	b29b      	uxth	r3, r3
 801280c:	fa0f fe83 	sxth.w	lr, r3
 8012810:	db0f      	blt.n	8012832 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 8012812:	eba3 030c 	sub.w	r3, r3, ip
 8012816:	1ac9      	subs	r1, r1, r3
 8012818:	b209      	sxth	r1, r1
 801281a:	2900      	cmp	r1, #0
 801281c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012820:	dd12      	ble.n	8012848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012822:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8012826:	4605      	mov	r5, r0
 8012828:	9b05      	ldr	r3, [sp, #20]
 801282a:	3e08      	subs	r6, #8
 801282c:	3b01      	subs	r3, #1
 801282e:	9305      	str	r3, [sp, #20]
 8012830:	e7c7      	b.n	80127c2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 8012832:	4461      	add	r1, ip
 8012834:	b209      	sxth	r1, r1
 8012836:	4571      	cmp	r1, lr
 8012838:	dc38      	bgt.n	80128ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801283a:	eba2 020c 	sub.w	r2, r2, ip
 801283e:	b212      	sxth	r2, r2
 8012840:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8012844:	2a00      	cmp	r2, #0
 8012846:	dcee      	bgt.n	8012826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012848:	b00f      	add	sp, #60	@ 0x3c
 801284a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801284e:	45c8      	cmp	r8, r9
 8012850:	db2c      	blt.n	80128ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012852:	88f3      	ldrh	r3, [r6, #6]
 8012854:	4499      	add	r9, r3
 8012856:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 801285a:	4498      	add	r8, r3
 801285c:	fa0f f989 	sxth.w	r9, r9
 8012860:	fa0f f888 	sxth.w	r8, r8
 8012864:	45c1      	cmp	r9, r8
 8012866:	db21      	blt.n	80128ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8012868:	fa1f f28c 	uxth.w	r2, ip
 801286c:	88b3      	ldrh	r3, [r6, #4]
 801286e:	45e6      	cmp	lr, ip
 8012870:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8012874:	4413      	add	r3, r2
 8012876:	fa1f f88e 	uxth.w	r8, lr
 801287a:	b29b      	uxth	r3, r3
 801287c:	fa0f f983 	sxth.w	r9, r3
 8012880:	db0a      	blt.n	8012898 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 8012882:	eba3 0308 	sub.w	r3, r3, r8
 8012886:	1ac9      	subs	r1, r1, r3
 8012888:	b209      	sxth	r1, r1
 801288a:	2900      	cmp	r1, #0
 801288c:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 8012890:	ddda      	ble.n	8012848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012892:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012896:	e7c6      	b.n	8012826 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8012898:	4441      	add	r1, r8
 801289a:	b209      	sxth	r1, r1
 801289c:	4549      	cmp	r1, r9
 801289e:	dc05      	bgt.n	80128ac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80128a0:	eba2 0208 	sub.w	r2, r2, r8
 80128a4:	b212      	sxth	r2, r2
 80128a6:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80128aa:	e7cb      	b.n	8012844 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80128ac:	4607      	mov	r7, r0
 80128ae:	e7bb      	b.n	8012828 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80128b0:	2d00      	cmp	r5, #0
 80128b2:	d181      	bne.n	80127b8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80128b4:	2f00      	cmp	r7, #0
 80128b6:	f000 81dd 	beq.w	8012c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80128ba:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80128be:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80128c2:	b2b3      	uxth	r3, r6
 80128c4:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 80128c8:	9305      	str	r3, [sp, #20]
 80128ca:	9a05      	ldr	r2, [sp, #20]
 80128cc:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 80128d0:	4413      	add	r3, r2
 80128d2:	b2ba      	uxth	r2, r7
 80128d4:	4492      	add	sl, r2
 80128d6:	b29b      	uxth	r3, r3
 80128d8:	fa1f fa8a 	uxth.w	sl, sl
 80128dc:	fa0f f883 	sxth.w	r8, r3
 80128e0:	fa0f f98a 	sxth.w	r9, sl
 80128e4:	e9cd 2307 	strd	r2, r3, [sp, #28]
 80128e8:	9b04      	ldr	r3, [sp, #16]
 80128ea:	2b00      	cmp	r3, #0
 80128ec:	d052      	beq.n	8012994 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 80128ee:	9903      	ldr	r1, [sp, #12]
 80128f0:	4620      	mov	r0, r4
 80128f2:	f7ff fd26 	bl	8012342 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80128f6:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 80128fa:	b1c0      	cbz	r0, 801292e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80128fc:	f9b4 e000 	ldrsh.w	lr, [r4]
 8012900:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8012904:	4576      	cmp	r6, lr
 8012906:	dc22      	bgt.n	801294e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012908:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 801290c:	44f4      	add	ip, lr
 801290e:	fa0f fc8c 	sxth.w	ip, ip
 8012912:	45e0      	cmp	r8, ip
 8012914:	db1b      	blt.n	801294e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8012916:	428f      	cmp	r7, r1
 8012918:	fa1f fc81 	uxth.w	ip, r1
 801291c:	88e1      	ldrh	r1, [r4, #6]
 801291e:	dc0d      	bgt.n	801293c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 8012920:	ebaa 0c0c 	sub.w	ip, sl, ip
 8012924:	f8a4 9002 	strh.w	r9, [r4, #2]
 8012928:	eba1 010c 	sub.w	r1, r1, ip
 801292c:	80e1      	strh	r1, [r4, #6]
 801292e:	4628      	mov	r0, r5
 8012930:	9904      	ldr	r1, [sp, #16]
 8012932:	3c08      	subs	r4, #8
 8012934:	4605      	mov	r5, r0
 8012936:	3901      	subs	r1, #1
 8012938:	9104      	str	r1, [sp, #16]
 801293a:	e7d3      	b.n	80128e4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 801293c:	4461      	add	r1, ip
 801293e:	b209      	sxth	r1, r1
 8012940:	4549      	cmp	r1, r9
 8012942:	dcf5      	bgt.n	8012930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012944:	eba2 0c0c 	sub.w	ip, r2, ip
 8012948:	f8a4 c006 	strh.w	ip, [r4, #6]
 801294c:	e7ef      	b.n	801292e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801294e:	428f      	cmp	r7, r1
 8012950:	dcee      	bgt.n	8012930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012952:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8012956:	4461      	add	r1, ip
 8012958:	b209      	sxth	r1, r1
 801295a:	4589      	cmp	r9, r1
 801295c:	dbe8      	blt.n	8012930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801295e:	4576      	cmp	r6, lr
 8012960:	fa1f fc8e 	uxth.w	ip, lr
 8012964:	88a1      	ldrh	r1, [r4, #4]
 8012966:	dc07      	bgt.n	8012978 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 8012968:	eba3 0c0c 	sub.w	ip, r3, ip
 801296c:	f8a4 8000 	strh.w	r8, [r4]
 8012970:	eba1 010c 	sub.w	r1, r1, ip
 8012974:	80a1      	strh	r1, [r4, #4]
 8012976:	e7da      	b.n	801292e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8012978:	4461      	add	r1, ip
 801297a:	b209      	sxth	r1, r1
 801297c:	4588      	cmp	r8, r1
 801297e:	dbd7      	blt.n	8012930 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8012980:	9905      	ldr	r1, [sp, #20]
 8012982:	eba1 0c0c 	sub.w	ip, r1, ip
 8012986:	f8a4 c004 	strh.w	ip, [r4, #4]
 801298a:	e7d0      	b.n	801292e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801298c:	240248f2 	.word	0x240248f2
 8012990:	240248f0 	.word	0x240248f0
 8012994:	2d00      	cmp	r5, #0
 8012996:	f000 816d 	beq.w	8012c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 801299a:	9b06      	ldr	r3, [sp, #24]
 801299c:	445b      	add	r3, fp
 801299e:	461c      	mov	r4, r3
 80129a0:	9b02      	ldr	r3, [sp, #8]
 80129a2:	3301      	adds	r3, #1
 80129a4:	f000 8166 	beq.w	8012c74 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80129a8:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80129ac:	9803      	ldr	r0, [sp, #12]
 80129ae:	4629      	mov	r1, r5
 80129b0:	f7ff fd3a 	bl	8012428 <_ZNK8touchgfx4Rect8includesERKS0_>
 80129b4:	b120      	cbz	r0, 80129c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80129b6:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80129ba:	9801      	ldr	r0, [sp, #4]
 80129bc:	f7ff feb0 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80129c0:	9903      	ldr	r1, [sp, #12]
 80129c2:	4628      	mov	r0, r5
 80129c4:	f7ff fcbd 	bl	8012342 <_ZNK8touchgfx4Rect9intersectERKS0_>
 80129c8:	2800      	cmp	r0, #0
 80129ca:	f000 809c 	beq.w	8012b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 80129ce:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 80129d2:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 80129d6:	fa1f f189 	uxth.w	r1, r9
 80129da:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 80129de:	9309      	str	r3, [sp, #36]	@ 0x24
 80129e0:	eb01 0c03 	add.w	ip, r1, r3
 80129e4:	b283      	uxth	r3, r0
 80129e6:	4548      	cmp	r0, r9
 80129e8:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 80129ec:	fa1f fa8c 	uxth.w	sl, ip
 80129f0:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 80129f4:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 80129f8:	eb03 050c 	add.w	r5, r3, ip
 80129fc:	b2ad      	uxth	r5, r5
 80129fe:	9505      	str	r5, [sp, #20]
 8012a00:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8012a04:	9504      	str	r5, [sp, #16]
 8012a06:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8012a0a:	f340 8099 	ble.w	8012b40 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 8012a0e:	1a5b      	subs	r3, r3, r1
 8012a10:	4596      	cmp	lr, r2
 8012a12:	fa0f f08a 	sxth.w	r0, sl
 8012a16:	b29b      	uxth	r3, r3
 8012a18:	b21e      	sxth	r6, r3
 8012a1a:	dd2e      	ble.n	8012a7a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8012a1c:	9f02      	ldr	r7, [sp, #8]
 8012a1e:	fa1f fe8e 	uxth.w	lr, lr
 8012a22:	b292      	uxth	r2, r2
 8012a24:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8012a28:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8012a2c:	9f04      	ldr	r7, [sp, #16]
 8012a2e:	ebae 0102 	sub.w	r1, lr, r2
 8012a32:	44a6      	add	lr, r4
 8012a34:	1a3f      	subs	r7, r7, r0
 8012a36:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8012a3a:	b289      	uxth	r1, r1
 8012a3c:	4402      	add	r2, r0
 8012a3e:	fa0f fe8e 	sxth.w	lr, lr
 8012a42:	b20d      	sxth	r5, r1
 8012a44:	b212      	sxth	r2, r2
 8012a46:	436f      	muls	r7, r5
 8012a48:	ebae 0202 	sub.w	r2, lr, r2
 8012a4c:	4372      	muls	r2, r6
 8012a4e:	4297      	cmp	r7, r2
 8012a50:	db09      	blt.n	8012a66 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 8012a52:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8012a56:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8012a5a:	449c      	add	ip, r3
 8012a5c:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 8012a60:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012a64:	e686      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012a66:	4421      	add	r1, r4
 8012a68:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 8012a6c:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 8012a70:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012a74:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012a78:	e67c      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012a7a:	9f04      	ldr	r7, [sp, #16]
 8012a7c:	42b8      	cmp	r0, r7
 8012a7e:	da27      	bge.n	8012ad0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 8012a80:	9902      	ldr	r1, [sp, #8]
 8012a82:	1a3f      	subs	r7, r7, r0
 8012a84:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 8012a88:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 8012a8c:	eb05 010e 	add.w	r1, r5, lr
 8012a90:	fa1f f881 	uxth.w	r8, r1
 8012a94:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 8012a98:	4411      	add	r1, r2
 8012a9a:	fa0f f988 	sxth.w	r9, r8
 8012a9e:	eba2 020e 	sub.w	r2, r2, lr
 8012aa2:	eba1 0108 	sub.w	r1, r1, r8
 8012aa6:	4372      	muls	r2, r6
 8012aa8:	b289      	uxth	r1, r1
 8012aaa:	fa0f f881 	sxth.w	r8, r1
 8012aae:	fb08 f707 	mul.w	r7, r8, r7
 8012ab2:	42ba      	cmp	r2, r7
 8012ab4:	dc06      	bgt.n	8012ac4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 8012ab6:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 8012aba:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 8012abe:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 8012ac2:	e7ca      	b.n	8012a5a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8012ac4:	4429      	add	r1, r5
 8012ac6:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8012aca:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012ace:	e651      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012ad0:	9805      	ldr	r0, [sp, #20]
 8012ad2:	2d06      	cmp	r5, #6
 8012ad4:	ebaa 0000 	sub.w	r0, sl, r0
 8012ad8:	b280      	uxth	r0, r0
 8012ada:	fa0f fe80 	sxth.w	lr, r0
 8012ade:	d817      	bhi.n	8012b10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8012ae0:	9b04      	ldr	r3, [sp, #16]
 8012ae2:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8012ae6:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8012aea:	1c6b      	adds	r3, r5, #1
 8012aec:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8012af0:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012af4:	9b01      	ldr	r3, [sp, #4]
 8012af6:	9801      	ldr	r0, [sp, #4]
 8012af8:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012afc:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8012b00:	805a      	strh	r2, [r3, #2]
 8012b02:	809e      	strh	r6, [r3, #4]
 8012b04:	80d9      	strh	r1, [r3, #6]
 8012b06:	9b02      	ldr	r3, [sp, #8]
 8012b08:	3c08      	subs	r4, #8
 8012b0a:	3b01      	subs	r3, #1
 8012b0c:	9302      	str	r3, [sp, #8]
 8012b0e:	e747      	b.n	80129a0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8012b10:	9a02      	ldr	r2, [sp, #8]
 8012b12:	45b6      	cmp	lr, r6
 8012b14:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012b18:	db0d      	blt.n	8012b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8012b1a:	449c      	add	ip, r3
 8012b1c:	445a      	add	r2, fp
 8012b1e:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8012b22:	fa1f fc8c 	uxth.w	ip, ip
 8012b26:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8012b2a:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8012b2e:	448c      	add	ip, r1
 8012b30:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8012b34:	e61e      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012b36:	445a      	add	r2, fp
 8012b38:	4484      	add	ip, r0
 8012b3a:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8012b3e:	e78f      	b.n	8012a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012b40:	fa1f f18e 	uxth.w	r1, lr
 8012b44:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8012b48:	b293      	uxth	r3, r2
 8012b4a:	4596      	cmp	lr, r2
 8012b4c:	eb01 0806 	add.w	r8, r1, r6
 8012b50:	9306      	str	r3, [sp, #24]
 8012b52:	fa1f f888 	uxth.w	r8, r8
 8012b56:	9f06      	ldr	r7, [sp, #24]
 8012b58:	fa0f f388 	sxth.w	r3, r8
 8012b5c:	9307      	str	r3, [sp, #28]
 8012b5e:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012b62:	443b      	add	r3, r7
 8012b64:	b29b      	uxth	r3, r3
 8012b66:	9308      	str	r3, [sp, #32]
 8012b68:	da24      	bge.n	8012bb4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8012b6a:	9905      	ldr	r1, [sp, #20]
 8012b6c:	eba3 0308 	sub.w	r3, r3, r8
 8012b70:	eba2 020e 	sub.w	r2, r2, lr
 8012b74:	eba9 0000 	sub.w	r0, r9, r0
 8012b78:	ebaa 0401 	sub.w	r4, sl, r1
 8012b7c:	b29b      	uxth	r3, r3
 8012b7e:	b2a4      	uxth	r4, r4
 8012b80:	b219      	sxth	r1, r3
 8012b82:	b225      	sxth	r5, r4
 8012b84:	4348      	muls	r0, r1
 8012b86:	436a      	muls	r2, r5
 8012b88:	4282      	cmp	r2, r0
 8012b8a:	9a02      	ldr	r2, [sp, #8]
 8012b8c:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8012b90:	445a      	add	r2, fp
 8012b92:	dc06      	bgt.n	8012ba2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8012b94:	9b07      	ldr	r3, [sp, #28]
 8012b96:	44a4      	add	ip, r4
 8012b98:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8012b9c:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8012ba0:	e75e      	b.n	8012a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012ba2:	9904      	ldr	r1, [sp, #16]
 8012ba4:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8012ba8:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8012bac:	4433      	add	r3, r6
 8012bae:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012bb2:	e5df      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012bb4:	9f06      	ldr	r7, [sp, #24]
 8012bb6:	9b04      	ldr	r3, [sp, #16]
 8012bb8:	1bc9      	subs	r1, r1, r7
 8012bba:	fa0f f78a 	sxth.w	r7, sl
 8012bbe:	b289      	uxth	r1, r1
 8012bc0:	429f      	cmp	r7, r3
 8012bc2:	fa0f fe81 	sxth.w	lr, r1
 8012bc6:	dd23      	ble.n	8012c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8012bc8:	9a05      	ldr	r2, [sp, #20]
 8012bca:	eba9 0000 	sub.w	r0, r9, r0
 8012bce:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8012bd2:	ebaa 0202 	sub.w	r2, sl, r2
 8012bd6:	9d07      	ldr	r5, [sp, #28]
 8012bd8:	fb0e f000 	mul.w	r0, lr, r0
 8012bdc:	b292      	uxth	r2, r2
 8012bde:	eba5 0a03 	sub.w	sl, r5, r3
 8012be2:	9b02      	ldr	r3, [sp, #8]
 8012be4:	b214      	sxth	r4, r2
 8012be6:	00db      	lsls	r3, r3, #3
 8012be8:	fb04 fa0a 	mul.w	sl, r4, sl
 8012bec:	445b      	add	r3, fp
 8012bee:	4550      	cmp	r0, sl
 8012bf0:	db03      	blt.n	8012bfa <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8012bf2:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8012bf6:	4494      	add	ip, r2
 8012bf8:	e732      	b.n	8012a60 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8012bfa:	9a04      	ldr	r2, [sp, #16]
 8012bfc:	4431      	add	r1, r6
 8012bfe:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8012c02:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8012c06:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8012c0a:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8012c0e:	e75c      	b.n	8012aca <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8012c10:	9b08      	ldr	r3, [sp, #32]
 8012c12:	2d06      	cmp	r5, #6
 8012c14:	eba3 0308 	sub.w	r3, r3, r8
 8012c18:	b29b      	uxth	r3, r3
 8012c1a:	b218      	sxth	r0, r3
 8012c1c:	d813      	bhi.n	8012c46 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8012c1e:	9b07      	ldr	r3, [sp, #28]
 8012c20:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8012c24:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8012c28:	1c6b      	adds	r3, r5, #1
 8012c2a:	9901      	ldr	r1, [sp, #4]
 8012c2c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8012c30:	9b01      	ldr	r3, [sp, #4]
 8012c32:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8012c36:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8012c3a:	805a      	strh	r2, [r3, #2]
 8012c3c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8012c3e:	f8a3 e006 	strh.w	lr, [r3, #6]
 8012c42:	809a      	strh	r2, [r3, #4]
 8012c44:	e75f      	b.n	8012b06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8012c46:	9c02      	ldr	r4, [sp, #8]
 8012c48:	4570      	cmp	r0, lr
 8012c4a:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8012c4e:	db0d      	blt.n	8012c6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8012c50:	4431      	add	r1, r6
 8012c52:	9b06      	ldr	r3, [sp, #24]
 8012c54:	445c      	add	r4, fp
 8012c56:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8012c5a:	b289      	uxth	r1, r1
 8012c5c:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8012c60:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8012c64:	4419      	add	r1, r3
 8012c66:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8012c6a:	e583      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012c6c:	445c      	add	r4, fp
 8012c6e:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8012c72:	e79b      	b.n	8012bac <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8012c74:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8012c78:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8012c7c:	1e65      	subs	r5, r4, #1
 8012c7e:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8012c82:	b2ad      	uxth	r5, r5
 8012c84:	42b5      	cmp	r5, r6
 8012c86:	d044      	beq.n	8012d12 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8012c88:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8012c8c:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8012c90:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8012c94:	4282      	cmp	r2, r0
 8012c96:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8012c9a:	d11f      	bne.n	8012cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8012c9c:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8012ca0:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012ca4:	459c      	cmp	ip, r3
 8012ca6:	d119      	bne.n	8012cdc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8012ca8:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8012cac:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8012cb0:	19d8      	adds	r0, r3, r7
 8012cb2:	b200      	sxth	r0, r0
 8012cb4:	4288      	cmp	r0, r1
 8012cb6:	d109      	bne.n	8012ccc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8012cb8:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8012cbc:	4413      	add	r3, r2
 8012cbe:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8012cc2:	4629      	mov	r1, r5
 8012cc4:	9801      	ldr	r0, [sp, #4]
 8012cc6:	f7ff fd2b 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012cca:	e003      	b.n	8012cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012ccc:	4411      	add	r1, r2
 8012cce:	b209      	sxth	r1, r1
 8012cd0:	42b9      	cmp	r1, r7
 8012cd2:	d0f3      	beq.n	8012cbc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8012cd4:	3d01      	subs	r5, #1
 8012cd6:	3c08      	subs	r4, #8
 8012cd8:	b2ad      	uxth	r5, r5
 8012cda:	e7d3      	b.n	8012c84 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8012cdc:	42b9      	cmp	r1, r7
 8012cde:	d1f9      	bne.n	8012cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012ce0:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8012ce4:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012ce8:	4299      	cmp	r1, r3
 8012cea:	d1f3      	bne.n	8012cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012cec:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8012cf0:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8012cf4:	181f      	adds	r7, r3, r0
 8012cf6:	b23f      	sxth	r7, r7
 8012cf8:	42ba      	cmp	r2, r7
 8012cfa:	d105      	bne.n	8012d08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8012cfc:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8012d00:	440b      	add	r3, r1
 8012d02:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8012d06:	e7dc      	b.n	8012cc2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8012d08:	440a      	add	r2, r1
 8012d0a:	b212      	sxth	r2, r2
 8012d0c:	4290      	cmp	r0, r2
 8012d0e:	d1e1      	bne.n	8012cd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8012d10:	e7f6      	b.n	8012d00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8012d12:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8012d16:	2e07      	cmp	r6, #7
 8012d18:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8012d1c:	d812      	bhi.n	8012d44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8012d1e:	1c75      	adds	r5, r6, #1
 8012d20:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8012d24:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8012d28:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8012d2c:	9d01      	ldr	r5, [sp, #4]
 8012d2e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8012d32:	442c      	add	r4, r5
 8012d34:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8012d38:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8012d3c:	8061      	strh	r1, [r4, #2]
 8012d3e:	80a2      	strh	r2, [r4, #4]
 8012d40:	80e3      	strh	r3, [r4, #6]
 8012d42:	e581      	b.n	8012848 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8012d44:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8012d48:	3e01      	subs	r6, #1
 8012d4a:	445c      	add	r4, fp
 8012d4c:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8012d50:	f04f 37ff 	mov.w	r7, #4294967295
 8012d54:	2500      	movs	r5, #0
 8012d56:	9305      	str	r3, [sp, #20]
 8012d58:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8012d5c:	1e72      	subs	r2, r6, #1
 8012d5e:	9302      	str	r3, [sp, #8]
 8012d60:	4691      	mov	r9, r2
 8012d62:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8012d66:	9304      	str	r3, [sp, #16]
 8012d68:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8012d6c:	f1b9 3fff 	cmp.w	r9, #4294967295
 8012d70:	6818      	ldr	r0, [r3, #0]
 8012d72:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012d76:	9207      	str	r2, [sp, #28]
 8012d78:	bf16      	itet	ne
 8012d7a:	9905      	ldrne	r1, [sp, #20]
 8012d7c:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8012d80:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8012d84:	9306      	str	r3, [sp, #24]
 8012d86:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8012d8a:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8012d8e:	fb18 f801 	smulbb	r8, r8, r1
 8012d92:	6859      	ldr	r1, [r3, #4]
 8012d94:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8012d98:	4671      	mov	r1, lr
 8012d9a:	a80c      	add	r0, sp, #48	@ 0x30
 8012d9c:	f7ff fb6a 	bl	8012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012da0:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8012da4:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8012da8:	f04f 0c08 	mov.w	ip, #8
 8012dac:	9b04      	ldr	r3, [sp, #16]
 8012dae:	9a02      	ldr	r2, [sp, #8]
 8012db0:	fb10 f001 	smulbb	r0, r0, r1
 8012db4:	fb02 8803 	mla	r8, r2, r3, r8
 8012db8:	eba0 0108 	sub.w	r1, r0, r8
 8012dbc:	fb90 f0fc 	sdiv	r0, r0, ip
 8012dc0:	4288      	cmp	r0, r1
 8012dc2:	dc20      	bgt.n	8012e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8012dc4:	4551      	cmp	r1, sl
 8012dc6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8012dca:	da03      	bge.n	8012dd4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8012dcc:	b1d9      	cbz	r1, 8012e06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8012dce:	468a      	mov	sl, r1
 8012dd0:	464f      	mov	r7, r9
 8012dd2:	4635      	mov	r5, r6
 8012dd4:	f109 39ff 	add.w	r9, r9, #4294967295
 8012dd8:	f119 0f02 	cmn.w	r9, #2
 8012ddc:	d1c6      	bne.n	8012d6c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8012dde:	4616      	mov	r6, r2
 8012de0:	3201      	adds	r2, #1
 8012de2:	f1a4 0408 	sub.w	r4, r4, #8
 8012de6:	d1b7      	bne.n	8012d58 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8012de8:	9b01      	ldr	r3, [sp, #4]
 8012dea:	b2ac      	uxth	r4, r5
 8012dec:	00ed      	lsls	r5, r5, #3
 8012dee:	1958      	adds	r0, r3, r5
 8012df0:	1c7b      	adds	r3, r7, #1
 8012df2:	d10b      	bne.n	8012e0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8012df4:	4601      	mov	r1, r0
 8012df6:	9803      	ldr	r0, [sp, #12]
 8012df8:	f7ff fb3c 	bl	8012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012dfc:	4621      	mov	r1, r4
 8012dfe:	9801      	ldr	r0, [sp, #4]
 8012e00:	f7ff fc8e 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8012e04:	e4b6      	b.n	8012774 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8012e06:	464f      	mov	r7, r9
 8012e08:	4635      	mov	r5, r6
 8012e0a:	e7ed      	b.n	8012de8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8012e0c:	9b01      	ldr	r3, [sp, #4]
 8012e0e:	00ff      	lsls	r7, r7, #3
 8012e10:	445d      	add	r5, fp
 8012e12:	19d9      	adds	r1, r3, r7
 8012e14:	445f      	add	r7, fp
 8012e16:	f7ff fb2d 	bl	8012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8012e1a:	9b03      	ldr	r3, [sp, #12]
 8012e1c:	cb03      	ldmia	r3!, {r0, r1}
 8012e1e:	9b03      	ldr	r3, [sp, #12]
 8012e20:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8012e24:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8012e28:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8012e2c:	6869      	ldr	r1, [r5, #4]
 8012e2e:	c303      	stmia	r3!, {r0, r1}
 8012e30:	e7e4      	b.n	8012dfc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8012e32:	bf00      	nop

08012e34 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8012e34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012e38:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8012e3c:	b09b      	sub	sp, #108	@ 0x6c
 8012e3e:	4604      	mov	r4, r0
 8012e40:	4630      	mov	r0, r6
 8012e42:	f7fb f906 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e46:	4605      	mov	r5, r0
 8012e48:	b948      	cbnz	r0, 8012e5e <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8012e4a:	6823      	ldr	r3, [r4, #0]
 8012e4c:	4620      	mov	r0, r4
 8012e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e50:	e896 0006 	ldmia.w	r6, {r1, r2}
 8012e54:	4798      	blx	r3
 8012e56:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8012e5a:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8012e5e:	4bc5      	ldr	r3, [pc, #788]	@ (8013174 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8012e60:	681b      	ldr	r3, [r3, #0]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	d03f      	beq.n	8012ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012e66:	4dc4      	ldr	r5, [pc, #784]	@ (8013178 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8012e68:	4628      	mov	r0, r5
 8012e6a:	f7fb f8f2 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8012e6e:	4606      	mov	r6, r0
 8012e70:	2800      	cmp	r0, #0
 8012e72:	d138      	bne.n	8012ee6 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8012e74:	4628      	mov	r0, r5
 8012e76:	f7ff f991 	bl	801219c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8012e7a:	6823      	ldr	r3, [r4, #0]
 8012e7c:	6829      	ldr	r1, [r5, #0]
 8012e7e:	4620      	mov	r0, r4
 8012e80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e82:	686a      	ldr	r2, [r5, #4]
 8012e84:	4798      	blx	r3
 8012e86:	802e      	strh	r6, [r5, #0]
 8012e88:	806e      	strh	r6, [r5, #2]
 8012e8a:	80ae      	strh	r6, [r5, #4]
 8012e8c:	80ee      	strh	r6, [r5, #6]
 8012e8e:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8012e92:	4dba      	ldr	r5, [pc, #744]	@ (801317c <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8012e94:	4640      	mov	r0, r8
 8012e96:	f7ff fbe7 	bl	8012668 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8012e9a:	882e      	ldrh	r6, [r5, #0]
 8012e9c:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8012ea0:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8012ea4:	4633      	mov	r3, r6
 8012ea6:	42bb      	cmp	r3, r7
 8012ea8:	d224      	bcs.n	8012ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012eaa:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8012eae:	2907      	cmp	r1, #7
 8012eb0:	d816      	bhi.n	8012ee0 <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8012eb2:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8012eb6:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8012eba:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8012ebe:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8012ec2:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8012ec6:	1c4a      	adds	r2, r1, #1
 8012ec8:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8012ecc:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8012ed0:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8012ed4:	f8a2 a002 	strh.w	sl, [r2, #2]
 8012ed8:	f8a2 e004 	strh.w	lr, [r2, #4]
 8012edc:	f8a2 c006 	strh.w	ip, [r2, #6]
 8012ee0:	3301      	adds	r3, #1
 8012ee2:	b29b      	uxth	r3, r3
 8012ee4:	e7df      	b.n	8012ea6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8012ee6:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012eea:	2b00      	cmp	r3, #0
 8012eec:	d1cf      	bne.n	8012e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8012eee:	b01b      	add	sp, #108	@ 0x6c
 8012ef0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012ef4:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8012ef8:	42b3      	cmp	r3, r6
 8012efa:	d90c      	bls.n	8012f16 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8012efc:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8012f00:	6822      	ldr	r2, [r4, #0]
 8012f02:	3601      	adds	r6, #1
 8012f04:	4620      	mov	r0, r4
 8012f06:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8012f08:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8012f0c:	b2b6      	uxth	r6, r6
 8012f0e:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8012f12:	47b8      	blx	r7
 8012f14:	e7ee      	b.n	8012ef4 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8012f16:	4a9a      	ldr	r2, [pc, #616]	@ (8013180 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012f18:	6813      	ldr	r3, [r2, #0]
 8012f1a:	4691      	mov	r9, r2
 8012f1c:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8012f20:	2b01      	cmp	r3, #1
 8012f22:	f040 80e0 	bne.w	80130e6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8012f26:	8829      	ldrh	r1, [r5, #0]
 8012f28:	2600      	movs	r6, #0
 8012f2a:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8012f2e:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8012f32:	33ae      	adds	r3, #174	@ 0xae
 8012f34:	428f      	cmp	r7, r1
 8012f36:	f103 0308 	add.w	r3, r3, #8
 8012f3a:	dd0a      	ble.n	8012f52 <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8012f3c:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8012f40:	3101      	adds	r1, #1
 8012f42:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8012f46:	4402      	add	r2, r0
 8012f48:	b212      	sxth	r2, r2
 8012f4a:	4296      	cmp	r6, r2
 8012f4c:	bfb8      	it	lt
 8012f4e:	4616      	movlt	r6, r2
 8012f50:	e7f0      	b.n	8012f34 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8012f52:	4b8c      	ldr	r3, [pc, #560]	@ (8013184 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8012f54:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 8013180 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8012f58:	881b      	ldrh	r3, [r3, #0]
 8012f5a:	2b0f      	cmp	r3, #15
 8012f5c:	bf8c      	ite	hi
 8012f5e:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8012f62:	f04f 0b01 	movls.w	fp, #1
 8012f66:	2300      	movs	r3, #0
 8012f68:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8012f6c:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8012f70:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8012f74:	4b82      	ldr	r3, [pc, #520]	@ (8013180 <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8012f76:	4438      	add	r0, r7
 8012f78:	b207      	sxth	r7, r0
 8012f7a:	6818      	ldr	r0, [r3, #0]
 8012f7c:	42b7      	cmp	r7, r6
 8012f7e:	6803      	ldr	r3, [r0, #0]
 8012f80:	f280 8083 	bge.w	801308a <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8012f84:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8012f88:	4798      	blx	r3
 8012f8a:	eb07 030b 	add.w	r3, r7, fp
 8012f8e:	4298      	cmp	r0, r3
 8012f90:	da07      	bge.n	8012fa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8012f92:	42b0      	cmp	r0, r6
 8012f94:	da05      	bge.n	8012fa2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8012f96:	4287      	cmp	r7, r0
 8012f98:	dd6c      	ble.n	8013074 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012f9a:	2f00      	cmp	r7, #0
 8012f9c:	dd6a      	ble.n	8013074 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8012f9e:	4630      	mov	r0, r6
 8012fa0:	e004      	b.n	8012fac <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8012fa2:	4287      	cmp	r7, r0
 8012fa4:	dcfb      	bgt.n	8012f9e <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8012fa6:	42b0      	cmp	r0, r6
 8012fa8:	bfa8      	it	ge
 8012faa:	4630      	movge	r0, r6
 8012fac:	4b76      	ldr	r3, [pc, #472]	@ (8013188 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8012fae:	1bc0      	subs	r0, r0, r7
 8012fb0:	2200      	movs	r2, #0
 8012fb2:	f8ad 7016 	strh.w	r7, [sp, #22]
 8012fb6:	f9b3 3000 	ldrsh.w	r3, [r3]
 8012fba:	882f      	ldrh	r7, [r5, #0]
 8012fbc:	f8ad 2014 	strh.w	r2, [sp, #20]
 8012fc0:	f8ad 3018 	strh.w	r3, [sp, #24]
 8012fc4:	f8ad 001a 	strh.w	r0, [sp, #26]
 8012fc8:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8012fcc:	42bb      	cmp	r3, r7
 8012fce:	d9cd      	bls.n	8012f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8012fd0:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8012fd4:	ab07      	add	r3, sp, #28
 8012fd6:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8012fda:	6851      	ldr	r1, [r2, #4]
 8012fdc:	c303      	stmia	r3!, {r0, r1}
 8012fde:	a905      	add	r1, sp, #20
 8012fe0:	a807      	add	r0, sp, #28
 8012fe2:	f7ff f9ae 	bl	8012342 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8012fe6:	2800      	cmp	r0, #0
 8012fe8:	d04c      	beq.n	8013084 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8012fea:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8012fee:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8012ff2:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8012ff6:	4686      	mov	lr, r0
 8012ff8:	4290      	cmp	r0, r2
 8012ffa:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8012ffe:	4450      	add	r0, sl
 8013000:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013004:	bfb8      	it	lt
 8013006:	4696      	movlt	lr, r2
 8013008:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 801300c:	4452      	add	r2, sl
 801300e:	b280      	uxth	r0, r0
 8013010:	4299      	cmp	r1, r3
 8013012:	468c      	mov	ip, r1
 8013014:	b292      	uxth	r2, r2
 8013016:	9302      	str	r3, [sp, #8]
 8013018:	bfb8      	it	lt
 801301a:	469c      	movlt	ip, r3
 801301c:	b203      	sxth	r3, r0
 801301e:	fa0f fa82 	sxth.w	sl, r2
 8013022:	f8ad e01c 	strh.w	lr, [sp, #28]
 8013026:	f8ad c01e 	strh.w	ip, [sp, #30]
 801302a:	4553      	cmp	r3, sl
 801302c:	bfb8      	it	lt
 801302e:	4602      	movlt	r2, r0
 8013030:	9b02      	ldr	r3, [sp, #8]
 8013032:	eba2 020e 	sub.w	r2, r2, lr
 8013036:	f8ad 2020 	strh.w	r2, [sp, #32]
 801303a:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 801303e:	4411      	add	r1, r2
 8013040:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013044:	4413      	add	r3, r2
 8013046:	b289      	uxth	r1, r1
 8013048:	b29b      	uxth	r3, r3
 801304a:	b208      	sxth	r0, r1
 801304c:	b21a      	sxth	r2, r3
 801304e:	4290      	cmp	r0, r2
 8013050:	bfb8      	it	lt
 8013052:	460b      	movlt	r3, r1
 8013054:	eba3 030c 	sub.w	r3, r3, ip
 8013058:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801305c:	a807      	add	r0, sp, #28
 801305e:	f7fa fff8 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013062:	b920      	cbnz	r0, 801306e <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8013064:	6823      	ldr	r3, [r4, #0]
 8013066:	a907      	add	r1, sp, #28
 8013068:	4620      	mov	r0, r4
 801306a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801306c:	4798      	blx	r3
 801306e:	3701      	adds	r7, #1
 8013070:	b2bf      	uxth	r7, r7
 8013072:	e7a9      	b.n	8012fc8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013074:	f8d9 0000 	ldr.w	r0, [r9]
 8013078:	2101      	movs	r1, #1
 801307a:	6803      	ldr	r3, [r0, #0]
 801307c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013080:	4798      	blx	r3
 8013082:	e773      	b.n	8012f6c <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013084:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013088:	e7e8      	b.n	801305c <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 801308a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801308c:	4798      	blx	r3
 801308e:	4b3f      	ldr	r3, [pc, #252]	@ (801318c <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013090:	781b      	ldrb	r3, [r3, #0]
 8013092:	2b00      	cmp	r3, #0
 8013094:	f43f af2b 	beq.w	8012eee <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013098:	2300      	movs	r3, #0
 801309a:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 801309e:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 80130a2:	882b      	ldrh	r3, [r5, #0]
 80130a4:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80130a8:	42ab      	cmp	r3, r5
 80130aa:	f4bf af20 	bcs.w	8012eee <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 80130ae:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 80130b2:	2907      	cmp	r1, #7
 80130b4:	d814      	bhi.n	80130e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 80130b6:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 80130ba:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 80130be:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 80130c2:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 80130c6:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 80130ca:	1c4a      	adds	r2, r1, #1
 80130cc:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 80130d0:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 80130d4:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 80130d8:	f8a2 c002 	strh.w	ip, [r2, #2]
 80130dc:	8097      	strh	r7, [r2, #4]
 80130de:	80d6      	strh	r6, [r2, #6]
 80130e0:	3301      	adds	r3, #1
 80130e2:	b29b      	uxth	r3, r3
 80130e4:	e7e0      	b.n	80130a8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 80130e6:	2b02      	cmp	r3, #2
 80130e8:	f040 8133 	bne.w	8013352 <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 80130ec:	4b28      	ldr	r3, [pc, #160]	@ (8013190 <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 80130ee:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 80130f2:	781b      	ldrb	r3, [r3, #0]
 80130f4:	2b01      	cmp	r3, #1
 80130f6:	f000 8098 	beq.w	801322a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80130fa:	882a      	ldrh	r2, [r5, #0]
 80130fc:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 8013100:	3201      	adds	r2, #1
 8013102:	b292      	uxth	r2, r2
 8013104:	2900      	cmp	r1, #0
 8013106:	d0c2      	beq.n	801308e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013108:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 801310c:	4694      	mov	ip, r2
 801310e:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 8013112:	f04f 0900 	mov.w	r9, #0
 8013116:	441e      	add	r6, r3
 8013118:	b236      	sxth	r6, r6
 801311a:	fa1f f38c 	uxth.w	r3, ip
 801311e:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 8013122:	4299      	cmp	r1, r3
 8013124:	f240 80be 	bls.w	80132a4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8013128:	4427      	add	r7, r4
 801312a:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801312e:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 8013132:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8013136:	4283      	cmp	r3, r0
 8013138:	f340 80a0 	ble.w	801327c <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 801313c:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 8013140:	46e1      	mov	r9, ip
 8013142:	4406      	add	r6, r0
 8013144:	b236      	sxth	r6, r6
 8013146:	429e      	cmp	r6, r3
 8013148:	bfa8      	it	ge
 801314a:	461e      	movge	r6, r3
 801314c:	f10c 0c01 	add.w	ip, ip, #1
 8013150:	e7e3      	b.n	801311a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 8013152:	d10a      	bne.n	801316a <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8013154:	4562      	cmp	r2, ip
 8013156:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 801315a:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801315e:	bfb8      	it	lt
 8013160:	4662      	movlt	r2, ip
 8013162:	4288      	cmp	r0, r1
 8013164:	bfb8      	it	lt
 8013166:	461f      	movlt	r7, r3
 8013168:	e086      	b.n	8013278 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 801316a:	428a      	cmp	r2, r1
 801316c:	bfb8      	it	lt
 801316e:	460a      	movlt	r2, r1
 8013170:	e082      	b.n	8013278 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 8013172:	bf00      	nop
 8013174:	2402493c 	.word	0x2402493c
 8013178:	24024948 	.word	0x24024948
 801317c:	2400007c 	.word	0x2400007c
 8013180:	240248fc 	.word	0x240248fc
 8013184:	240248f2 	.word	0x240248f2
 8013188:	240248f0 	.word	0x240248f0
 801318c:	240248fa 	.word	0x240248fa
 8013190:	240248f4 	.word	0x240248f4
 8013194:	19a1      	adds	r1, r4, r6
 8013196:	ab07      	add	r3, sp, #28
 8013198:	f851 0fac 	ldr.w	r0, [r1, #172]!
 801319c:	6849      	ldr	r1, [r1, #4]
 801319e:	c303      	stmia	r3!, {r0, r1}
 80131a0:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80131a4:	a807      	add	r0, sp, #28
 80131a6:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80131aa:	2b13      	cmp	r3, #19
 80131ac:	440b      	add	r3, r1
 80131ae:	bfd8      	it	le
 80131b0:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80131b4:	1a9b      	subs	r3, r3, r2
 80131b6:	f8ad 201c 	strh.w	r2, [sp, #28]
 80131ba:	f8ad 3020 	strh.w	r3, [sp, #32]
 80131be:	f7ff f807 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80131c2:	a807      	add	r0, sp, #28
 80131c4:	f7fa ff45 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 80131c8:	bb78      	cbnz	r0, 801322a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 80131ca:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 80131ce:	4426      	add	r6, r4
 80131d0:	f8d9 0000 	ldr.w	r0, [r9]
 80131d4:	f1bc 0f14 	cmp.w	ip, #20
 80131d8:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 80131dc:	f8d0 e000 	ldr.w	lr, [r0]
 80131e0:	bfa8      	it	ge
 80131e2:	f04f 0c14 	movge.w	ip, #20
 80131e6:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 80131ea:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80131ee:	fa1f fc8c 	uxth.w	ip, ip
 80131f2:	f8cd c000 	str.w	ip, [sp]
 80131f6:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 80131fa:	47d8      	blx	fp
 80131fc:	4683      	mov	fp, r0
 80131fe:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8013202:	a807      	add	r0, sp, #28
 8013204:	f7fe ffca 	bl	801219c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013208:	6823      	ldr	r3, [r4, #0]
 801320a:	4620      	mov	r0, r4
 801320c:	a907      	add	r1, sp, #28
 801320e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013210:	4798      	blx	r3
 8013212:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013216:	eba0 000b 	sub.w	r0, r0, fp
 801321a:	b200      	sxth	r0, r0
 801321c:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 8013220:	b918      	cbnz	r0, 801322a <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8013222:	b2b9      	uxth	r1, r7
 8013224:	4650      	mov	r0, sl
 8013226:	f7ff fa7b 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801322a:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801322e:	f1bb 0f00 	cmp.w	fp, #0
 8013232:	f43f af2c 	beq.w	801308e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8013236:	882b      	ldrh	r3, [r5, #0]
 8013238:	2700      	movs	r7, #0
 801323a:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801323e:	3301      	adds	r3, #1
 8013240:	b29b      	uxth	r3, r3
 8013242:	b299      	uxth	r1, r3
 8013244:	00fe      	lsls	r6, r7, #3
 8013246:	458b      	cmp	fp, r1
 8013248:	d9a4      	bls.n	8013194 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 801324a:	4426      	add	r6, r4
 801324c:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 8013250:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8013254:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8013258:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 801325c:	4408      	add	r0, r1
 801325e:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 8013262:	4461      	add	r1, ip
 8013264:	b200      	sxth	r0, r0
 8013266:	b209      	sxth	r1, r1
 8013268:	4288      	cmp	r0, r1
 801326a:	f6bf af72 	bge.w	8013152 <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 801326e:	4584      	cmp	ip, r0
 8013270:	4662      	mov	r2, ip
 8013272:	461f      	mov	r7, r3
 8013274:	bfb8      	it	lt
 8013276:	4602      	movlt	r2, r0
 8013278:	3301      	adds	r3, #1
 801327a:	e7e2      	b.n	8013242 <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 801327c:	d10e      	bne.n	801329c <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 801327e:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 8013282:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 8013286:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 801328a:	4473      	add	r3, lr
 801328c:	b21b      	sxth	r3, r3
 801328e:	429e      	cmp	r6, r3
 8013290:	bfa8      	it	ge
 8013292:	461e      	movge	r6, r3
 8013294:	4287      	cmp	r7, r0
 8013296:	bfb8      	it	lt
 8013298:	46e1      	movlt	r9, ip
 801329a:	e757      	b.n	801314c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 801329c:	4286      	cmp	r6, r0
 801329e:	bfa8      	it	ge
 80132a0:	4606      	movge	r6, r0
 80132a2:	e753      	b.n	801314c <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80132a4:	eb0a 0007 	add.w	r0, sl, r7
 80132a8:	4427      	add	r7, r4
 80132aa:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80132ae:	f1bb 0f13 	cmp.w	fp, #19
 80132b2:	bfdc      	itt	le
 80132b4:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80132b8:	445e      	addle	r6, fp
 80132ba:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80132be:	bfd8      	it	le
 80132c0:	b236      	sxthle	r6, r6
 80132c2:	f7fa fec6 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 80132c6:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 80132ca:	2800      	cmp	r0, #0
 80132cc:	f47f af1a 	bne.w	8013104 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 80132d0:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 80132d4:	fa1f fb8b 	uxth.w	fp, fp
 80132d8:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 80132dc:	1ab6      	subs	r6, r6, r2
 80132de:	4829      	ldr	r0, [pc, #164]	@ (8013384 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 80132e0:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 80132e4:	2e14      	cmp	r6, #20
 80132e6:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 80132ea:	6800      	ldr	r0, [r0, #0]
 80132ec:	bfa8      	it	ge
 80132ee:	2614      	movge	r6, #20
 80132f0:	f8ad 101c 	strh.w	r1, [sp, #28]
 80132f4:	f8ad 201e 	strh.w	r2, [sp, #30]
 80132f8:	b289      	uxth	r1, r1
 80132fa:	f8ad 3020 	strh.w	r3, [sp, #32]
 80132fe:	b2b6      	uxth	r6, r6
 8013300:	f8d0 c000 	ldr.w	ip, [r0]
 8013304:	b292      	uxth	r2, r2
 8013306:	455e      	cmp	r6, fp
 8013308:	bf94      	ite	ls
 801330a:	9600      	strls	r6, [sp, #0]
 801330c:	f8cd b000 	strhi.w	fp, [sp]
 8013310:	b29b      	uxth	r3, r3
 8013312:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8013316:	47b0      	blx	r6
 8013318:	6823      	ldr	r3, [r4, #0]
 801331a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801331e:	a907      	add	r1, sp, #28
 8013320:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013322:	4620      	mov	r0, r4
 8013324:	4798      	blx	r3
 8013326:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 801332a:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801332e:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 8013332:	1a5b      	subs	r3, r3, r1
 8013334:	440a      	add	r2, r1
 8013336:	b21b      	sxth	r3, r3
 8013338:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 801333c:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 8013340:	2b00      	cmp	r3, #0
 8013342:	f47f aeda 	bne.w	80130fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013346:	fa1f f189 	uxth.w	r1, r9
 801334a:	4650      	mov	r0, sl
 801334c:	f7ff f9e8 	bl	8012720 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013350:	e6d3      	b.n	80130fa <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8013352:	882e      	ldrh	r6, [r5, #0]
 8013354:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013358:	42b3      	cmp	r3, r6
 801335a:	f67f ae98 	bls.w	801308e <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801335e:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 8013362:	ab07      	add	r3, sp, #28
 8013364:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013368:	6851      	ldr	r1, [r2, #4]
 801336a:	c303      	stmia	r3!, {r0, r1}
 801336c:	a807      	add	r0, sp, #28
 801336e:	f7fa fe70 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8013372:	b920      	cbnz	r0, 801337e <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 8013374:	6823      	ldr	r3, [r4, #0]
 8013376:	a907      	add	r1, sp, #28
 8013378:	4620      	mov	r0, r4
 801337a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801337c:	4798      	blx	r3
 801337e:	3601      	adds	r6, #1
 8013380:	b2b6      	uxth	r6, r6
 8013382:	e7e7      	b.n	8013354 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 8013384:	240248fc 	.word	0x240248fc

08013388 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 8013388:	4b03      	ldr	r3, [pc, #12]	@ (8013398 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 801338a:	2200      	movs	r2, #0
 801338c:	801a      	strh	r2, [r3, #0]
 801338e:	805a      	strh	r2, [r3, #2]
 8013390:	809a      	strh	r2, [r3, #4]
 8013392:	80da      	strh	r2, [r3, #6]
 8013394:	4770      	bx	lr
 8013396:	bf00      	nop
 8013398:	24024948 	.word	0x24024948

0801339c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 801339c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133a0:	b09d      	sub	sp, #116	@ 0x74
 80133a2:	4606      	mov	r6, r0
 80133a4:	4614      	mov	r4, r2
 80133a6:	468a      	mov	sl, r1
 80133a8:	a803      	add	r0, sp, #12
 80133aa:	461d      	mov	r5, r3
 80133ac:	f001 f89e 	bl	80144ec <_ZN8touchgfx12TextProviderC1Ev>
 80133b0:	6833      	ldr	r3, [r6, #0]
 80133b2:	4630      	mov	r0, r6
 80133b4:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80133b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80133ba:	4798      	blx	r3
 80133bc:	6833      	ldr	r3, [r6, #0]
 80133be:	4607      	mov	r7, r0
 80133c0:	4630      	mov	r0, r6
 80133c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80133c4:	4798      	blx	r3
 80133c6:	462a      	mov	r2, r5
 80133c8:	2500      	movs	r5, #0
 80133ca:	4621      	mov	r1, r4
 80133cc:	9000      	str	r0, [sp, #0]
 80133ce:	463b      	mov	r3, r7
 80133d0:	462c      	mov	r4, r5
 80133d2:	46a9      	mov	r9, r5
 80133d4:	46a8      	mov	r8, r5
 80133d6:	a803      	add	r0, sp, #12
 80133d8:	f001 f8db 	bl	8014592 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80133dc:	2300      	movs	r3, #0
 80133de:	9302      	str	r3, [sp, #8]
 80133e0:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 80133e4:	429c      	cmp	r4, r3
 80133e6:	d002      	beq.n	80133ee <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 80133e8:	455c      	cmp	r4, fp
 80133ea:	bf18      	it	ne
 80133ec:	4625      	movne	r5, r4
 80133ee:	ab02      	add	r3, sp, #8
 80133f0:	4632      	mov	r2, r6
 80133f2:	4651      	mov	r1, sl
 80133f4:	a803      	add	r0, sp, #12
 80133f6:	f001 fbef 	bl	8014bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80133fa:	4604      	mov	r4, r0
 80133fc:	b108      	cbz	r0, 8013402 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 80133fe:	280a      	cmp	r0, #10
 8013400:	d10a      	bne.n	8013418 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 8013402:	45c1      	cmp	r9, r8
 8013404:	bf38      	it	cc
 8013406:	46c1      	movcc	r9, r8
 8013408:	f04f 0800 	mov.w	r8, #0
 801340c:	2c00      	cmp	r4, #0
 801340e:	d1e5      	bne.n	80133dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 8013410:	4648      	mov	r0, r9
 8013412:	b01d      	add	sp, #116	@ 0x74
 8013414:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013418:	9a02      	ldr	r2, [sp, #8]
 801341a:	2a00      	cmp	r2, #0
 801341c:	d0de      	beq.n	80133dc <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801341e:	7b57      	ldrb	r7, [r2, #13]
 8013420:	4629      	mov	r1, r5
 8013422:	6833      	ldr	r3, [r6, #0]
 8013424:	007f      	lsls	r7, r7, #1
 8013426:	8894      	ldrh	r4, [r2, #4]
 8013428:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801342a:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801342e:	7a97      	ldrb	r7, [r2, #10]
 8013430:	4307      	orrs	r7, r0
 8013432:	4630      	mov	r0, r6
 8013434:	4798      	blx	r3
 8013436:	4438      	add	r0, r7
 8013438:	4480      	add	r8, r0
 801343a:	fa1f f888 	uxth.w	r8, r8
 801343e:	e7e5      	b.n	801340c <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

08013440 <_ZNK8touchgfx4Font12getCharWidthEt>:
 8013440:	b508      	push	{r3, lr}
 8013442:	6803      	ldr	r3, [r0, #0]
 8013444:	68db      	ldr	r3, [r3, #12]
 8013446:	4798      	blx	r3
 8013448:	b128      	cbz	r0, 8013456 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 801344a:	7b43      	ldrb	r3, [r0, #13]
 801344c:	7a80      	ldrb	r0, [r0, #10]
 801344e:	005b      	lsls	r3, r3, #1
 8013450:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013454:	4318      	orrs	r0, r3
 8013456:	bd08      	pop	{r3, pc}

08013458 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8013458:	b40e      	push	{r1, r2, r3}
 801345a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801345c:	b09e      	sub	sp, #120	@ 0x78
 801345e:	4605      	mov	r5, r0
 8013460:	ab23      	add	r3, sp, #140	@ 0x8c
 8013462:	a805      	add	r0, sp, #20
 8013464:	f853 4b04 	ldr.w	r4, [r3], #4
 8013468:	9303      	str	r3, [sp, #12]
 801346a:	f001 f83f 	bl	80144ec <_ZN8touchgfx12TextProviderC1Ev>
 801346e:	682b      	ldr	r3, [r5, #0]
 8013470:	4628      	mov	r0, r5
 8013472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013474:	4798      	blx	r3
 8013476:	682b      	ldr	r3, [r5, #0]
 8013478:	4606      	mov	r6, r0
 801347a:	4628      	mov	r0, r5
 801347c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801347e:	4798      	blx	r3
 8013480:	4633      	mov	r3, r6
 8013482:	4621      	mov	r1, r4
 8013484:	ae1e      	add	r6, sp, #120	@ 0x78
 8013486:	2400      	movs	r4, #0
 8013488:	9000      	str	r0, [sp, #0]
 801348a:	9a03      	ldr	r2, [sp, #12]
 801348c:	a805      	add	r0, sp, #20
 801348e:	f001 f880 	bl	8014592 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013492:	f846 4d68 	str.w	r4, [r6, #-104]!
 8013496:	462a      	mov	r2, r5
 8013498:	4633      	mov	r3, r6
 801349a:	4621      	mov	r1, r4
 801349c:	a805      	add	r0, sp, #20
 801349e:	f001 fb9b 	bl	8014bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80134a2:	b300      	cbz	r0, 80134e6 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80134a4:	280a      	cmp	r0, #10
 80134a6:	d01a      	beq.n	80134de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80134a8:	9f04      	ldr	r7, [sp, #16]
 80134aa:	b1c7      	cbz	r7, 80134de <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80134ac:	7b78      	ldrb	r0, [r7, #13]
 80134ae:	7a3b      	ldrb	r3, [r7, #8]
 80134b0:	00c1      	lsls	r1, r0, #3
 80134b2:	88ea      	ldrh	r2, [r5, #6]
 80134b4:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80134b8:	4319      	orrs	r1, r3
 80134ba:	0643      	lsls	r3, r0, #25
 80134bc:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80134c0:	bf48      	it	mi
 80134c2:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 80134c6:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 80134ca:	bf48      	it	mi
 80134cc:	b219      	sxthmi	r1, r3
 80134ce:	79fb      	ldrb	r3, [r7, #7]
 80134d0:	4303      	orrs	r3, r0
 80134d2:	4413      	add	r3, r2
 80134d4:	1a5b      	subs	r3, r3, r1
 80134d6:	b21b      	sxth	r3, r3
 80134d8:	429c      	cmp	r4, r3
 80134da:	bfb8      	it	lt
 80134dc:	461c      	movlt	r4, r3
 80134de:	4633      	mov	r3, r6
 80134e0:	462a      	mov	r2, r5
 80134e2:	2100      	movs	r1, #0
 80134e4:	e7da      	b.n	801349c <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 80134e6:	b2a0      	uxth	r0, r4
 80134e8:	b01e      	add	sp, #120	@ 0x78
 80134ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80134ee:	b003      	add	sp, #12
 80134f0:	4770      	bx	lr

080134f2 <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 80134f2:	7a43      	ldrb	r3, [r0, #9]
 80134f4:	8880      	ldrh	r0, [r0, #4]
 80134f6:	4418      	add	r0, r3
 80134f8:	b280      	uxth	r0, r0
 80134fa:	4770      	bx	lr

080134fc <_ZNK8touchgfx4Font13getFontHeightEv>:
 80134fc:	6803      	ldr	r3, [r0, #0]
 80134fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013500:	4718      	bx	r3

08013502 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 8013502:	b40e      	push	{r1, r2, r3}
 8013504:	b570      	push	{r4, r5, r6, lr}
 8013506:	b09d      	sub	sp, #116	@ 0x74
 8013508:	4604      	mov	r4, r0
 801350a:	ab21      	add	r3, sp, #132	@ 0x84
 801350c:	a803      	add	r0, sp, #12
 801350e:	f853 5b04 	ldr.w	r5, [r3], #4
 8013512:	9302      	str	r3, [sp, #8]
 8013514:	f000 ffea 	bl	80144ec <_ZN8touchgfx12TextProviderC1Ev>
 8013518:	6823      	ldr	r3, [r4, #0]
 801351a:	4620      	mov	r0, r4
 801351c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801351e:	4798      	blx	r3
 8013520:	6823      	ldr	r3, [r4, #0]
 8013522:	4606      	mov	r6, r0
 8013524:	4620      	mov	r0, r4
 8013526:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013528:	2401      	movs	r4, #1
 801352a:	4798      	blx	r3
 801352c:	4633      	mov	r3, r6
 801352e:	9000      	str	r0, [sp, #0]
 8013530:	4629      	mov	r1, r5
 8013532:	9a02      	ldr	r2, [sp, #8]
 8013534:	a803      	add	r0, sp, #12
 8013536:	f001 f82c 	bl	8014592 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 801353a:	a803      	add	r0, sp, #12
 801353c:	f001 fbcc 	bl	8014cd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013540:	b2a3      	uxth	r3, r4
 8013542:	b138      	cbz	r0, 8013554 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8013544:	280a      	cmp	r0, #10
 8013546:	a803      	add	r0, sp, #12
 8013548:	bf04      	itt	eq
 801354a:	3301      	addeq	r3, #1
 801354c:	b21c      	sxtheq	r4, r3
 801354e:	f001 fbc3 	bl	8014cd8 <_ZN8touchgfx12TextProvider11getNextCharEv>
 8013552:	e7f5      	b.n	8013540 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8013554:	4618      	mov	r0, r3
 8013556:	b01d      	add	sp, #116	@ 0x74
 8013558:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801355c:	b003      	add	sp, #12
 801355e:	4770      	bx	lr

08013560 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 8013560:	b40e      	push	{r1, r2, r3}
 8013562:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013564:	b09e      	sub	sp, #120	@ 0x78
 8013566:	4604      	mov	r4, r0
 8013568:	ab23      	add	r3, sp, #140	@ 0x8c
 801356a:	a805      	add	r0, sp, #20
 801356c:	f853 5b04 	ldr.w	r5, [r3], #4
 8013570:	9303      	str	r3, [sp, #12]
 8013572:	f000 ffbb 	bl	80144ec <_ZN8touchgfx12TextProviderC1Ev>
 8013576:	6823      	ldr	r3, [r4, #0]
 8013578:	4620      	mov	r0, r4
 801357a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801357c:	4798      	blx	r3
 801357e:	6823      	ldr	r3, [r4, #0]
 8013580:	4606      	mov	r6, r0
 8013582:	4620      	mov	r0, r4
 8013584:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013586:	4798      	blx	r3
 8013588:	4633      	mov	r3, r6
 801358a:	4629      	mov	r1, r5
 801358c:	9000      	str	r0, [sp, #0]
 801358e:	9a03      	ldr	r2, [sp, #12]
 8013590:	a805      	add	r0, sp, #20
 8013592:	f000 fffe 	bl	8014592 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8013596:	ad1e      	add	r5, sp, #120	@ 0x78
 8013598:	2100      	movs	r1, #0
 801359a:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 801359e:	4622      	mov	r2, r4
 80135a0:	a805      	add	r0, sp, #20
 80135a2:	f845 1d68 	str.w	r1, [r5, #-104]!
 80135a6:	462b      	mov	r3, r5
 80135a8:	f001 fb16 	bl	8014bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80135ac:	b1d8      	cbz	r0, 80135e6 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80135ae:	280a      	cmp	r0, #10
 80135b0:	d012      	beq.n	80135d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80135b2:	9804      	ldr	r0, [sp, #16]
 80135b4:	b180      	cbz	r0, 80135d8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80135b6:	7b47      	ldrb	r7, [r0, #13]
 80135b8:	88e2      	ldrh	r2, [r4, #6]
 80135ba:	00fb      	lsls	r3, r7, #3
 80135bc:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80135c0:	7a03      	ldrb	r3, [r0, #8]
 80135c2:	430b      	orrs	r3, r1
 80135c4:	0679      	lsls	r1, r7, #25
 80135c6:	bf44      	itt	mi
 80135c8:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80135cc:	b21b      	sxthmi	r3, r3
 80135ce:	1ad3      	subs	r3, r2, r3
 80135d0:	b21b      	sxth	r3, r3
 80135d2:	429e      	cmp	r6, r3
 80135d4:	bfa8      	it	ge
 80135d6:	461e      	movge	r6, r3
 80135d8:	462b      	mov	r3, r5
 80135da:	4622      	mov	r2, r4
 80135dc:	2100      	movs	r1, #0
 80135de:	a805      	add	r0, sp, #20
 80135e0:	f001 fafa 	bl	8014bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80135e4:	e7e2      	b.n	80135ac <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 80135e6:	4630      	mov	r0, r6
 80135e8:	b01e      	add	sp, #120	@ 0x78
 80135ea:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 80135ee:	b003      	add	sp, #12
 80135f0:	4770      	bx	lr

080135f2 <_ZNK8touchgfx8Drawable10invalidateEv>:
 80135f2:	b513      	push	{r0, r1, r4, lr}
 80135f4:	6803      	ldr	r3, [r0, #0]
 80135f6:	2400      	movs	r4, #0
 80135f8:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 80135fc:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8013600:	f8ad 1004 	strh.w	r1, [sp, #4]
 8013604:	4669      	mov	r1, sp
 8013606:	691b      	ldr	r3, [r3, #16]
 8013608:	9400      	str	r4, [sp, #0]
 801360a:	f8ad 2006 	strh.w	r2, [sp, #6]
 801360e:	4798      	blx	r3
 8013610:	b002      	add	sp, #8
 8013612:	bd10      	pop	{r4, pc}

08013614 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8013614:	b538      	push	{r3, r4, r5, lr}
 8013616:	680b      	ldr	r3, [r1, #0]
 8013618:	460c      	mov	r4, r1
 801361a:	4605      	mov	r5, r0
 801361c:	68db      	ldr	r3, [r3, #12]
 801361e:	4798      	blx	r3
 8013620:	6823      	ldr	r3, [r4, #0]
 8013622:	4620      	mov	r0, r4
 8013624:	4629      	mov	r1, r5
 8013626:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013628:	4798      	blx	r3
 801362a:	4628      	mov	r0, r5
 801362c:	bd38      	pop	{r3, r4, r5, pc}

0801362e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801362e:	b410      	push	{r4}
 8013630:	880a      	ldrh	r2, [r1, #0]
 8013632:	8884      	ldrh	r4, [r0, #4]
 8013634:	4422      	add	r2, r4
 8013636:	800a      	strh	r2, [r1, #0]
 8013638:	884a      	ldrh	r2, [r1, #2]
 801363a:	88c4      	ldrh	r4, [r0, #6]
 801363c:	4422      	add	r2, r4
 801363e:	804a      	strh	r2, [r1, #2]
 8013640:	6940      	ldr	r0, [r0, #20]
 8013642:	b120      	cbz	r0, 801364e <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8013644:	6803      	ldr	r3, [r0, #0]
 8013646:	f85d 4b04 	ldr.w	r4, [sp], #4
 801364a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801364c:	4718      	bx	r3
 801364e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8013652:	4770      	bx	lr

08013654 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8013654:	b570      	push	{r4, r5, r6, lr}
 8013656:	8882      	ldrh	r2, [r0, #4]
 8013658:	460c      	mov	r4, r1
 801365a:	880b      	ldrh	r3, [r1, #0]
 801365c:	4605      	mov	r5, r0
 801365e:	4413      	add	r3, r2
 8013660:	800b      	strh	r3, [r1, #0]
 8013662:	884b      	ldrh	r3, [r1, #2]
 8013664:	88c2      	ldrh	r2, [r0, #6]
 8013666:	4413      	add	r3, r2
 8013668:	804b      	strh	r3, [r1, #2]
 801366a:	1d01      	adds	r1, r0, #4
 801366c:	4620      	mov	r0, r4
 801366e:	f7fa fcad 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 8013672:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 8013676:	2b00      	cmp	r3, #0
 8013678:	dd0b      	ble.n	8013692 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 801367a:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801367e:	2b00      	cmp	r3, #0
 8013680:	dd07      	ble.n	8013692 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013682:	6968      	ldr	r0, [r5, #20]
 8013684:	b128      	cbz	r0, 8013692 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 8013686:	6803      	ldr	r3, [r0, #0]
 8013688:	4621      	mov	r1, r4
 801368a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801368c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013690:	4718      	bx	r3
 8013692:	bd70      	pop	{r4, r5, r6, pc}

08013694 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 8013694:	b570      	push	{r4, r5, r6, lr}
 8013696:	8882      	ldrh	r2, [r0, #4]
 8013698:	460c      	mov	r4, r1
 801369a:	880b      	ldrh	r3, [r1, #0]
 801369c:	4605      	mov	r5, r0
 801369e:	4413      	add	r3, r2
 80136a0:	800b      	strh	r3, [r1, #0]
 80136a2:	884b      	ldrh	r3, [r1, #2]
 80136a4:	88c2      	ldrh	r2, [r0, #6]
 80136a6:	4413      	add	r3, r2
 80136a8:	804b      	strh	r3, [r1, #2]
 80136aa:	1d01      	adds	r1, r0, #4
 80136ac:	4620      	mov	r0, r4
 80136ae:	f7fa fc8d 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80136b2:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80136b6:	2b00      	cmp	r3, #0
 80136b8:	dd19      	ble.n	80136ee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80136ba:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80136be:	2b00      	cmp	r3, #0
 80136c0:	dd15      	ble.n	80136ee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80136c2:	6968      	ldr	r0, [r5, #20]
 80136c4:	b128      	cbz	r0, 80136d2 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 80136c6:	6803      	ldr	r3, [r0, #0]
 80136c8:	4621      	mov	r1, r4
 80136ca:	691b      	ldr	r3, [r3, #16]
 80136cc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136d0:	4718      	bx	r3
 80136d2:	4b07      	ldr	r3, [pc, #28]	@ (80136f0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 80136d4:	681b      	ldr	r3, [r3, #0]
 80136d6:	3304      	adds	r3, #4
 80136d8:	429d      	cmp	r5, r3
 80136da:	d108      	bne.n	80136ee <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80136dc:	f7fe ff10 	bl	8012500 <_ZN8touchgfx11Application11getInstanceEv>
 80136e0:	6803      	ldr	r3, [r0, #0]
 80136e2:	6821      	ldr	r1, [r4, #0]
 80136e4:	6862      	ldr	r2, [r4, #4]
 80136e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80136e8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80136ec:	4718      	bx	r3
 80136ee:	bd70      	pop	{r4, r5, r6, pc}
 80136f0:	24024940 	.word	0x24024940

080136f4 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 80136f4:	b570      	push	{r4, r5, r6, lr}
 80136f6:	4604      	mov	r4, r0
 80136f8:	4616      	mov	r6, r2
 80136fa:	460d      	mov	r5, r1
 80136fc:	b901      	cbnz	r1, 8013700 <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 80136fe:	b192      	cbz	r2, 8013726 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 8013700:	6823      	ldr	r3, [r4, #0]
 8013702:	4620      	mov	r0, r4
 8013704:	699b      	ldr	r3, [r3, #24]
 8013706:	4798      	blx	r3
 8013708:	88e2      	ldrh	r2, [r4, #6]
 801370a:	88a1      	ldrh	r1, [r4, #4]
 801370c:	4620      	mov	r0, r4
 801370e:	4432      	add	r2, r6
 8013710:	4429      	add	r1, r5
 8013712:	b212      	sxth	r2, r2
 8013714:	b209      	sxth	r1, r1
 8013716:	f7fa ff2f 	bl	800e578 <_ZN8touchgfx8Drawable5setXYEss>
 801371a:	6823      	ldr	r3, [r4, #0]
 801371c:	4620      	mov	r0, r4
 801371e:	699b      	ldr	r3, [r3, #24]
 8013720:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8013724:	4718      	bx	r3
 8013726:	bd70      	pop	{r4, r5, r6, pc}

08013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8013728:	b510      	push	{r4, lr}
 801372a:	2300      	movs	r3, #0
 801372c:	4604      	mov	r4, r0
 801372e:	4608      	mov	r0, r1
 8013730:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8013734:	8023      	strh	r3, [r4, #0]
 8013736:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801373a:	8063      	strh	r3, [r4, #2]
 801373c:	6803      	ldr	r3, [r0, #0]
 801373e:	80a1      	strh	r1, [r4, #4]
 8013740:	4621      	mov	r1, r4
 8013742:	80e2      	strh	r2, [r4, #6]
 8013744:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013746:	4798      	blx	r3
 8013748:	4620      	mov	r0, r4
 801374a:	bd10      	pop	{r4, pc}

0801374c <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 801374c:	4770      	bx	lr

0801374e <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801374e:	b510      	push	{r4, lr}
 8013750:	4604      	mov	r4, r0
 8013752:	211c      	movs	r1, #28
 8013754:	f00c fcd3 	bl	80200fe <_ZdlPvj>
 8013758:	4620      	mov	r0, r4
 801375a:	bd10      	pop	{r4, pc}

0801375c <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 801375c:	4a04      	ldr	r2, [pc, #16]	@ (8013770 <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801375e:	6002      	str	r2, [r0, #0]
 8013760:	2200      	movs	r2, #0
 8013762:	e9c0 2201 	strd	r2, r2, [r0, #4]
 8013766:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801376a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801376e:	4770      	bx	lr
 8013770:	080246ac 	.word	0x080246ac

08013774 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 8013774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013778:	4604      	mov	r4, r0
 801377a:	b087      	sub	sp, #28
 801377c:	4696      	mov	lr, r2
 801377e:	6880      	ldr	r0, [r0, #8]
 8013780:	8b22      	ldrh	r2, [r4, #24]
 8013782:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8013786:	9105      	str	r1, [sp, #20]
 8013788:	1c51      	adds	r1, r2, #1
 801378a:	8321      	strh	r1, [r4, #24]
 801378c:	2101      	movs	r1, #1
 801378e:	5481      	strb	r1, [r0, r2]
 8013790:	4689      	mov	r9, r1
 8013792:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013796:	8b60      	ldrh	r0, [r4, #26]
 8013798:	ee06 2a90 	vmov	s13, r2
 801379c:	68e2      	ldr	r2, [r4, #12]
 801379e:	1845      	adds	r5, r0, r1
 80137a0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80137a4:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80137a8:	8365      	strh	r5, [r4, #26]
 80137aa:	edc2 6a00 	vstr	s13, [r2]
 80137ae:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80137b2:	8b60      	ldrh	r0, [r4, #26]
 80137b4:	ee07 2a10 	vmov	s14, r2
 80137b8:	68e2      	ldr	r2, [r4, #12]
 80137ba:	1845      	adds	r5, r0, r1
 80137bc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80137c0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80137c4:	8365      	strh	r5, [r4, #26]
 80137c6:	1d18      	adds	r0, r3, #4
 80137c8:	460d      	mov	r5, r1
 80137ca:	ed82 7a00 	vstr	s14, [r2]
 80137ce:	f8be 2000 	ldrh.w	r2, [lr]
 80137d2:	9203      	str	r2, [sp, #12]
 80137d4:	2200      	movs	r2, #0
 80137d6:	4613      	mov	r3, r2
 80137d8:	4694      	mov	ip, r2
 80137da:	9201      	str	r2, [sp, #4]
 80137dc:	9202      	str	r2, [sp, #8]
 80137de:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 80137e2:	9e05      	ldr	r6, [sp, #20]
 80137e4:	f108 0701 	add.w	r7, r8, #1
 80137e8:	f8d4 a008 	ldr.w	sl, [r4, #8]
 80137ec:	428e      	cmp	r6, r1
 80137ee:	b2bf      	uxth	r7, r7
 80137f0:	eb0a 0b08 	add.w	fp, sl, r8
 80137f4:	f340 80b6 	ble.w	8013964 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 80137f8:	9b03      	ldr	r3, [sp, #12]
 80137fa:	f9b0 c000 	ldrsh.w	ip, [r0]
 80137fe:	fa43 fb05 	asr.w	fp, r3, r5
 8013802:	f00b 0b01 	and.w	fp, fp, #1
 8013806:	fa5f f38b 	uxtb.w	r3, fp
 801380a:	9304      	str	r3, [sp, #16]
 801380c:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 8013810:	f1bb 0f00 	cmp.w	fp, #0
 8013814:	d057      	beq.n	80138c6 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8013816:	ee07 ca90 	vmov	s15, ip
 801381a:	8327      	strh	r7, [r4, #24]
 801381c:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 8013820:	ee07 3a90 	vmov	s15, r3
 8013824:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013828:	f1b9 0f00 	cmp.w	r9, #0
 801382c:	d028      	beq.n	8013880 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801382e:	f04f 0602 	mov.w	r6, #2
 8013832:	f80a 6008 	strb.w	r6, [sl, r8]
 8013836:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801383a:	68e7      	ldr	r7, [r4, #12]
 801383c:	f108 0901 	add.w	r9, r8, #1
 8013840:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013844:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013848:	edc7 5a00 	vstr	s11, [r7]
 801384c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013850:	68e7      	ldr	r7, [r4, #12]
 8013852:	f108 0901 	add.w	r9, r8, #1
 8013856:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801385a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801385e:	edc7 7a00 	vstr	s15, [r7]
 8013862:	3501      	adds	r5, #1
 8013864:	2d10      	cmp	r5, #16
 8013866:	d106      	bne.n	8013876 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 8013868:	9d02      	ldr	r5, [sp, #8]
 801386a:	3501      	adds	r5, #1
 801386c:	9502      	str	r5, [sp, #8]
 801386e:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 8013872:	9503      	str	r5, [sp, #12]
 8013874:	2500      	movs	r5, #0
 8013876:	3101      	adds	r1, #1
 8013878:	3004      	adds	r0, #4
 801387a:	f8dd 9010 	ldr.w	r9, [sp, #16]
 801387e:	e7ae      	b.n	80137de <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 8013880:	f04f 0605 	mov.w	r6, #5
 8013884:	ed9d 5a01 	vldr	s10, [sp, #4]
 8013888:	f80a 6008 	strb.w	r6, [sl, r8]
 801388c:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 8013890:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013894:	68e7      	ldr	r7, [r4, #12]
 8013896:	f108 0901 	add.w	r9, r8, #1
 801389a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801389e:	f8a4 901a 	strh.w	r9, [r4, #26]
 80138a2:	ed87 5a00 	vstr	s10, [r7]
 80138a6:	ee05 2a10 	vmov	s10, r2
 80138aa:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80138ae:	68e7      	ldr	r7, [r4, #12]
 80138b0:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80138b4:	f108 0901 	add.w	r9, r8, #1
 80138b8:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80138bc:	f8a4 901a 	strh.w	r9, [r4, #26]
 80138c0:	ed87 5a00 	vstr	s10, [r7]
 80138c4:	e7b7      	b.n	8013836 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 80138c6:	f1b9 0f00 	cmp.w	r9, #0
 80138ca:	d147      	bne.n	801395c <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 80138cc:	f04f 0605 	mov.w	r6, #5
 80138d0:	eddd 7a01 	vldr	s15, [sp, #4]
 80138d4:	8327      	strh	r7, [r4, #24]
 80138d6:	f80a 6008 	strb.w	r6, [sl, r8]
 80138da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80138de:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80138e2:	68e7      	ldr	r7, [r4, #12]
 80138e4:	f108 0901 	add.w	r9, r8, #1
 80138e8:	9e01      	ldr	r6, [sp, #4]
 80138ea:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80138ee:	f8a4 901a 	strh.w	r9, [r4, #26]
 80138f2:	4466      	add	r6, ip
 80138f4:	edc7 7a00 	vstr	s15, [r7]
 80138f8:	ee07 2a90 	vmov	s15, r2
 80138fc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013900:	441a      	add	r2, r3
 8013902:	68e7      	ldr	r7, [r4, #12]
 8013904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013908:	f108 0901 	add.w	r9, r8, #1
 801390c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013910:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013914:	edc7 7a00 	vstr	s15, [r7]
 8013918:	ee07 6a90 	vmov	s15, r6
 801391c:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013924:	68e7      	ldr	r7, [r4, #12]
 8013926:	f108 0901 	add.w	r9, r8, #1
 801392a:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801392e:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013932:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013936:	edc7 7a00 	vstr	s15, [r7]
 801393a:	ee07 2a90 	vmov	s15, r2
 801393e:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8013942:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013946:	68e7      	ldr	r7, [r4, #12]
 8013948:	f108 0901 	add.w	r9, r8, #1
 801394c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8013950:	ee67 7a86 	vmul.f32	s15, s15, s12
 8013954:	f8a4 901a 	strh.w	r9, [r4, #26]
 8013958:	edc7 7a00 	vstr	s15, [r7]
 801395c:	461a      	mov	r2, r3
 801395e:	f8cd c004 	str.w	ip, [sp, #4]
 8013962:	e77e      	b.n	8013862 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 8013964:	f1b9 0f00 	cmp.w	r9, #0
 8013968:	d028      	beq.n	80139bc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801396a:	ee07 ca90 	vmov	s15, ip
 801396e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013972:	eef4 6a67 	vcmp.f32	s13, s15
 8013976:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801397a:	d108      	bne.n	801398e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 801397c:	ee07 3a90 	vmov	s15, r3
 8013980:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8013984:	eeb4 7a67 	vcmp.f32	s14, s15
 8013988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398c:	d016      	beq.n	80139bc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 801398e:	2302      	movs	r3, #2
 8013990:	8327      	strh	r7, [r4, #24]
 8013992:	f88b 3000 	strb.w	r3, [fp]
 8013996:	8b62      	ldrh	r2, [r4, #26]
 8013998:	68e3      	ldr	r3, [r4, #12]
 801399a:	1c51      	adds	r1, r2, #1
 801399c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80139a0:	8361      	strh	r1, [r4, #26]
 80139a2:	edc3 6a00 	vstr	s13, [r3]
 80139a6:	8b62      	ldrh	r2, [r4, #26]
 80139a8:	68e3      	ldr	r3, [r4, #12]
 80139aa:	1c51      	adds	r1, r2, #1
 80139ac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80139b0:	8361      	strh	r1, [r4, #26]
 80139b2:	ed83 7a00 	vstr	s14, [r3]
 80139b6:	b007      	add	sp, #28
 80139b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80139bc:	2305      	movs	r3, #5
 80139be:	eddd 7a01 	vldr	s15, [sp, #4]
 80139c2:	8327      	strh	r7, [r4, #24]
 80139c4:	f88b 3000 	strb.w	r3, [fp]
 80139c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139cc:	8b61      	ldrh	r1, [r4, #26]
 80139ce:	68e3      	ldr	r3, [r4, #12]
 80139d0:	1c4d      	adds	r5, r1, #1
 80139d2:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80139d6:	8365      	strh	r5, [r4, #26]
 80139d8:	edc3 7a00 	vstr	s15, [r3]
 80139dc:	ee07 2a90 	vmov	s15, r2
 80139e0:	8b61      	ldrh	r1, [r4, #26]
 80139e2:	68e3      	ldr	r3, [r4, #12]
 80139e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80139e8:	1c4d      	adds	r5, r1, #1
 80139ea:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80139ee:	8365      	strh	r5, [r4, #26]
 80139f0:	edc3 7a00 	vstr	s15, [r3]
 80139f4:	e7cf      	b.n	8013996 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

080139f8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 80139f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80139fc:	4604      	mov	r4, r0
 80139fe:	b08e      	sub	sp, #56	@ 0x38
 8013a00:	4699      	mov	r9, r3
 8013a02:	4688      	mov	r8, r1
 8013a04:	4615      	mov	r5, r2
 8013a06:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8013a08:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8013a0c:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 8013a0e:	f7f0 f929 	bl	8003c64 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 8013a12:	6060      	str	r0, [r4, #4]
 8013a14:	f1b9 0f00 	cmp.w	r9, #0
 8013a18:	f000 80e8 	beq.w	8013bec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013a1c:	2800      	cmp	r0, #0
 8013a1e:	f000 80e5 	beq.w	8013bec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8013a22:	a805      	add	r0, sp, #20
 8013a24:	f000 f8f9 	bl	8013c1a <_ZN8touchgfx9Matrix3x3C1Ev>
 8013a28:	6833      	ldr	r3, [r6, #0]
 8013a2a:	4630      	mov	r0, r6
 8013a2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013a2e:	4798      	blx	r3
 8013a30:	a805      	add	r0, sp, #20
 8013a32:	eef0 0a40 	vmov.f32	s1, s0
 8013a36:	f000 f8f4 	bl	8013c22 <_ZN8touchgfx9Matrix3x35scaleEff>
 8013a3a:	6860      	ldr	r0, [r4, #4]
 8013a3c:	f1ba 0f03 	cmp.w	sl, #3
 8013a40:	d83b      	bhi.n	8013aba <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 8013a42:	e8df f00a 	tbb	[pc, sl]
 8013a46:	1002      	.short	0x1002
 8013a48:	9f71      	.short	0x9f71
 8013a4a:	6803      	ldr	r3, [r0, #0]
 8013a4c:	462a      	mov	r2, r5
 8013a4e:	4641      	mov	r1, r8
 8013a50:	689b      	ldr	r3, [r3, #8]
 8013a52:	4798      	blx	r3
 8013a54:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013a58:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013a5c:	ee07 7a90 	vmov	s15, r7
 8013a60:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 8013a64:	e026      	b.n	8013ab4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 8013a66:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 8013a6a:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013a6e:	8869      	ldrh	r1, [r5, #2]
 8013a70:	1a9b      	subs	r3, r3, r2
 8013a72:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013a76:	aa03      	add	r2, sp, #12
 8013a78:	1a5b      	subs	r3, r3, r1
 8013a7a:	4641      	mov	r1, r8
 8013a7c:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013a80:	882b      	ldrh	r3, [r5, #0]
 8013a82:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013a86:	88ab      	ldrh	r3, [r5, #4]
 8013a88:	f8ad 3012 	strh.w	r3, [sp, #18]
 8013a8c:	6803      	ldr	r3, [r0, #0]
 8013a8e:	689b      	ldr	r3, [r3, #8]
 8013a90:	4798      	blx	r3
 8013a92:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8013bf4 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 8013a96:	a805      	add	r0, sp, #20
 8013a98:	f000 f8e8 	bl	8013c6c <_ZN8touchgfx9Matrix3x36rotateEf>
 8013a9c:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013aa0:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013aa2:	ee07 7a90 	vmov	s15, r7
 8013aa6:	1a9b      	subs	r3, r3, r2
 8013aa8:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8013aac:	ee00 3a10 	vmov	s0, r3
 8013ab0:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 8013ab4:	a805      	add	r0, sp, #20
 8013ab6:	f000 f927 	bl	8013d08 <_ZN8touchgfx9Matrix3x39translateEff>
 8013aba:	6860      	ldr	r0, [r4, #4]
 8013abc:	a905      	add	r1, sp, #20
 8013abe:	2500      	movs	r5, #0
 8013ac0:	f109 0602 	add.w	r6, r9, #2
 8013ac4:	6803      	ldr	r3, [r0, #0]
 8013ac6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ac8:	4798      	blx	r3
 8013aca:	6860      	ldr	r0, [r4, #4]
 8013acc:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8013ace:	6803      	ldr	r3, [r0, #0]
 8013ad0:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8013ad4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013ad6:	4798      	blx	r3
 8013ad8:	6860      	ldr	r0, [r4, #4]
 8013ada:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8013ade:	6803      	ldr	r3, [r0, #0]
 8013ae0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ae2:	4798      	blx	r3
 8013ae4:	6860      	ldr	r0, [r4, #4]
 8013ae6:	2101      	movs	r1, #1
 8013ae8:	6803      	ldr	r3, [r0, #0]
 8013aea:	68db      	ldr	r3, [r3, #12]
 8013aec:	4798      	blx	r3
 8013aee:	f8b9 7000 	ldrh.w	r7, [r9]
 8013af2:	f104 0310 	add.w	r3, r4, #16
 8013af6:	61a5      	str	r5, [r4, #24]
 8013af8:	f104 0208 	add.w	r2, r4, #8
 8013afc:	f104 0114 	add.w	r1, r4, #20
 8013b00:	f104 000c 	add.w	r0, r4, #12
 8013b04:	f7f0 fcae 	bl	8004464 <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8013b08:	42af      	cmp	r7, r5
 8013b0a:	dd60      	ble.n	8013bce <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8013b0c:	8831      	ldrh	r1, [r6, #0]
 8013b0e:	1cb2      	adds	r2, r6, #2
 8013b10:	4620      	mov	r0, r4
 8013b12:	3501      	adds	r5, #1
 8013b14:	f101 030f 	add.w	r3, r1, #15
 8013b18:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8013b1c:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8013b20:	f7ff fe28 	bl	8013774 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8013b24:	4606      	mov	r6, r0
 8013b26:	e7ef      	b.n	8013b08 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8013b28:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013b2c:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8013b30:	8829      	ldrh	r1, [r5, #0]
 8013b32:	1a9b      	subs	r3, r3, r2
 8013b34:	f8ad 2010 	strh.w	r2, [sp, #16]
 8013b38:	aa03      	add	r2, sp, #12
 8013b3a:	1a5b      	subs	r3, r3, r1
 8013b3c:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013b40:	886d      	ldrh	r5, [r5, #2]
 8013b42:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013b46:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013b4a:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013b4e:	1a5b      	subs	r3, r3, r1
 8013b50:	4641      	mov	r1, r8
 8013b52:	1b5b      	subs	r3, r3, r5
 8013b54:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013b58:	6803      	ldr	r3, [r0, #0]
 8013b5a:	689b      	ldr	r3, [r3, #8]
 8013b5c:	4798      	blx	r3
 8013b5e:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8013bf8 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8013b62:	a805      	add	r0, sp, #20
 8013b64:	f000 f882 	bl	8013c6c <_ZN8touchgfx9Matrix3x36rotateEf>
 8013b68:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013b6c:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8013b6e:	1a9b      	subs	r3, r3, r2
 8013b70:	ee00 3a90 	vmov	s1, r3
 8013b74:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8013b78:	1bdb      	subs	r3, r3, r7
 8013b7a:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013b7e:	ee00 3a10 	vmov	s0, r3
 8013b82:	e795      	b.n	8013ab0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8013b84:	886b      	ldrh	r3, [r5, #2]
 8013b86:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8013b8a:	f8ad 300c 	strh.w	r3, [sp, #12]
 8013b8e:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8013b92:	8829      	ldrh	r1, [r5, #0]
 8013b94:	1a9b      	subs	r3, r3, r2
 8013b96:	f8ad 2012 	strh.w	r2, [sp, #18]
 8013b9a:	aa03      	add	r2, sp, #12
 8013b9c:	1a5b      	subs	r3, r3, r1
 8013b9e:	4641      	mov	r1, r8
 8013ba0:	f8ad 300e 	strh.w	r3, [sp, #14]
 8013ba4:	88eb      	ldrh	r3, [r5, #6]
 8013ba6:	f8ad 3010 	strh.w	r3, [sp, #16]
 8013baa:	6803      	ldr	r3, [r0, #0]
 8013bac:	689b      	ldr	r3, [r3, #8]
 8013bae:	4798      	blx	r3
 8013bb0:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8013bfc <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8013bb4:	a805      	add	r0, sp, #20
 8013bb6:	f000 f859 	bl	8013c6c <_ZN8touchgfx9Matrix3x36rotateEf>
 8013bba:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8013bbe:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8013bc2:	1bdb      	subs	r3, r3, r7
 8013bc4:	ee00 3a90 	vmov	s1, r3
 8013bc8:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8013bcc:	e748      	b.n	8013a60 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8013bce:	6860      	ldr	r0, [r4, #4]
 8013bd0:	2100      	movs	r1, #0
 8013bd2:	8b22      	ldrh	r2, [r4, #24]
 8013bd4:	6803      	ldr	r3, [r0, #0]
 8013bd6:	9101      	str	r1, [sp, #4]
 8013bd8:	8b61      	ldrh	r1, [r4, #26]
 8013bda:	9100      	str	r1, [sp, #0]
 8013bdc:	6a1d      	ldr	r5, [r3, #32]
 8013bde:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8013be2:	47a8      	blx	r5
 8013be4:	6860      	ldr	r0, [r4, #4]
 8013be6:	6803      	ldr	r3, [r0, #0]
 8013be8:	69db      	ldr	r3, [r3, #28]
 8013bea:	4798      	blx	r3
 8013bec:	b00e      	add	sp, #56	@ 0x38
 8013bee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8013bf2:	bf00      	nop
 8013bf4:	42b40000 	.word	0x42b40000
 8013bf8:	43340000 	.word	0x43340000
 8013bfc:	43870000 	.word	0x43870000

08013c00 <_ZN8touchgfx9Matrix3x35resetEv>:
 8013c00:	2300      	movs	r3, #0
 8013c02:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8013c06:	6043      	str	r3, [r0, #4]
 8013c08:	6002      	str	r2, [r0, #0]
 8013c0a:	6083      	str	r3, [r0, #8]
 8013c0c:	60c3      	str	r3, [r0, #12]
 8013c0e:	6102      	str	r2, [r0, #16]
 8013c10:	6143      	str	r3, [r0, #20]
 8013c12:	6183      	str	r3, [r0, #24]
 8013c14:	61c3      	str	r3, [r0, #28]
 8013c16:	6202      	str	r2, [r0, #32]
 8013c18:	4770      	bx	lr

08013c1a <_ZN8touchgfx9Matrix3x3C1Ev>:
 8013c1a:	b508      	push	{r3, lr}
 8013c1c:	f7ff fff0 	bl	8013c00 <_ZN8touchgfx9Matrix3x35resetEv>
 8013c20:	bd08      	pop	{r3, pc}

08013c22 <_ZN8touchgfx9Matrix3x35scaleEff>:
 8013c22:	edd0 7a00 	vldr	s15, [r0]
 8013c26:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c2a:	edc0 7a00 	vstr	s15, [r0]
 8013c2e:	edd0 7a01 	vldr	s15, [r0, #4]
 8013c32:	ee67 7a80 	vmul.f32	s15, s15, s0
 8013c36:	edc0 7a01 	vstr	s15, [r0, #4]
 8013c3a:	edd0 7a02 	vldr	s15, [r0, #8]
 8013c3e:	ee27 0a80 	vmul.f32	s0, s15, s0
 8013c42:	edd0 7a03 	vldr	s15, [r0, #12]
 8013c46:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013c4a:	ed80 0a02 	vstr	s0, [r0, #8]
 8013c4e:	edc0 7a03 	vstr	s15, [r0, #12]
 8013c52:	edd0 7a04 	vldr	s15, [r0, #16]
 8013c56:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8013c5a:	edc0 7a04 	vstr	s15, [r0, #16]
 8013c5e:	edd0 7a05 	vldr	s15, [r0, #20]
 8013c62:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8013c66:	edc0 0a05 	vstr	s1, [r0, #20]
 8013c6a:	4770      	bx	lr

08013c6c <_ZN8touchgfx9Matrix3x36rotateEf>:
 8013c6c:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8013d00 <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8013c70:	ee20 0a27 	vmul.f32	s0, s0, s15
 8013c74:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8013d04 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8013c78:	b510      	push	{r4, lr}
 8013c7a:	ed2d 8b02 	vpush	{d8}
 8013c7e:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8013c82:	4604      	mov	r4, r0
 8013c84:	eeb0 0a68 	vmov.f32	s0, s17
 8013c88:	f00c fb72 	bl	8020370 <cosf>
 8013c8c:	eeb0 8a40 	vmov.f32	s16, s0
 8013c90:	eeb0 0a68 	vmov.f32	s0, s17
 8013c94:	f00c faa8 	bl	80201e8 <sinf>
 8013c98:	edd4 6a03 	vldr	s13, [r4, #12]
 8013c9c:	edd4 4a00 	vldr	s9, [r4]
 8013ca0:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8013ca4:	ed94 7a04 	vldr	s14, [r4, #16]
 8013ca8:	ed94 5a01 	vldr	s10, [r4, #4]
 8013cac:	ee66 6a88 	vmul.f32	s13, s13, s16
 8013cb0:	edd4 5a02 	vldr	s11, [r4, #8]
 8013cb4:	eee8 7a24 	vfma.f32	s15, s16, s9
 8013cb8:	eee0 6a24 	vfma.f32	s13, s0, s9
 8013cbc:	edc4 7a00 	vstr	s15, [r4]
 8013cc0:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8013cc4:	ee27 7a08 	vmul.f32	s14, s14, s16
 8013cc8:	edc4 6a03 	vstr	s13, [r4, #12]
 8013ccc:	eee8 7a05 	vfma.f32	s15, s16, s10
 8013cd0:	eea0 7a05 	vfma.f32	s14, s0, s10
 8013cd4:	edc4 7a01 	vstr	s15, [r4, #4]
 8013cd8:	edd4 7a05 	vldr	s15, [r4, #20]
 8013cdc:	ed84 7a04 	vstr	s14, [r4, #16]
 8013ce0:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8013ce4:	ee67 7a88 	vmul.f32	s15, s15, s16
 8013ce8:	eea8 6a25 	vfma.f32	s12, s16, s11
 8013cec:	eee0 7a25 	vfma.f32	s15, s0, s11
 8013cf0:	ecbd 8b02 	vpop	{d8}
 8013cf4:	ed84 6a02 	vstr	s12, [r4, #8]
 8013cf8:	edc4 7a05 	vstr	s15, [r4, #20]
 8013cfc:	bd10      	pop	{r4, pc}
 8013cfe:	bf00      	nop
 8013d00:	40490fdb 	.word	0x40490fdb
 8013d04:	43340000 	.word	0x43340000

08013d08 <_ZN8touchgfx9Matrix3x39translateEff>:
 8013d08:	ed90 6a06 	vldr	s12, [r0, #24]
 8013d0c:	edd0 7a00 	vldr	s15, [r0]
 8013d10:	edd0 6a07 	vldr	s13, [r0, #28]
 8013d14:	eee6 7a00 	vfma.f32	s15, s12, s0
 8013d18:	ed90 7a08 	vldr	s14, [r0, #32]
 8013d1c:	edc0 7a00 	vstr	s15, [r0]
 8013d20:	edd0 7a01 	vldr	s15, [r0, #4]
 8013d24:	eee6 7a80 	vfma.f32	s15, s13, s0
 8013d28:	edc0 7a01 	vstr	s15, [r0, #4]
 8013d2c:	edd0 7a02 	vldr	s15, [r0, #8]
 8013d30:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013d34:	edc0 7a02 	vstr	s15, [r0, #8]
 8013d38:	edd0 7a03 	vldr	s15, [r0, #12]
 8013d3c:	eee6 7a20 	vfma.f32	s15, s12, s1
 8013d40:	edc0 7a03 	vstr	s15, [r0, #12]
 8013d44:	edd0 7a04 	vldr	s15, [r0, #16]
 8013d48:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8013d4c:	edc0 7a04 	vstr	s15, [r0, #16]
 8013d50:	edd0 7a05 	vldr	s15, [r0, #20]
 8013d54:	eee7 7a20 	vfma.f32	s15, s14, s1
 8013d58:	edc0 7a05 	vstr	s15, [r0, #20]
 8013d5c:	4770      	bx	lr

08013d5e <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8013d5e:	edd0 6a01 	vldr	s13, [r0, #4]
 8013d62:	b084      	sub	sp, #16
 8013d64:	edd0 7a04 	vldr	s15, [r0, #16]
 8013d68:	ed90 7a03 	vldr	s14, [r0, #12]
 8013d6c:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8013d70:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8013d74:	edd0 6a00 	vldr	s13, [r0]
 8013d78:	eee7 7a00 	vfma.f32	s15, s14, s0
 8013d7c:	ed90 7a05 	vldr	s14, [r0, #20]
 8013d80:	eee6 0a80 	vfma.f32	s1, s13, s0
 8013d84:	ed90 0a02 	vldr	s0, [r0, #8]
 8013d88:	ee30 0a80 	vadd.f32	s0, s1, s0
 8013d8c:	ee77 0a87 	vadd.f32	s1, s15, s14
 8013d90:	b004      	add	sp, #16
 8013d92:	4770      	bx	lr

08013d94 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8013d94:	b530      	push	{r4, r5, lr}
 8013d96:	8083      	strh	r3, [r0, #4]
 8013d98:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8013d9c:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8013da0:	80c3      	strh	r3, [r0, #6]
 8013da2:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8013da6:	6141      	str	r1, [r0, #20]
 8013da8:	7203      	strb	r3, [r0, #8]
 8013daa:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8013dae:	8302      	strh	r2, [r0, #24]
 8013db0:	7243      	strb	r3, [r0, #9]
 8013db2:	7a83      	ldrb	r3, [r0, #10]
 8013db4:	f365 0306 	bfi	r3, r5, #0, #7
 8013db8:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8013dbc:	f365 13c7 	bfi	r3, r5, #7, #1
 8013dc0:	7283      	strb	r3, [r0, #10]
 8013dc2:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8013dc6:	72c3      	strb	r3, [r0, #11]
 8013dc8:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8013dcc:	7303      	strb	r3, [r0, #12]
 8013dce:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8013dd2:	81c3      	strh	r3, [r0, #14]
 8013dd4:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8013dd8:	8203      	strh	r3, [r0, #16]
 8013dda:	4b01      	ldr	r3, [pc, #4]	@ (8013de0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8013ddc:	6003      	str	r3, [r0, #0]
 8013dde:	bd30      	pop	{r4, r5, pc}
 8013de0:	080246c0 	.word	0x080246c0

08013de4 <_ZNK8touchgfx9ConstFont4findEt>:
 8013de4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8013de6:	6944      	ldr	r4, [r0, #20]
 8013de8:	b3bc      	cbz	r4, 8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013dea:	88a3      	ldrh	r3, [r4, #4]
 8013dec:	8b02      	ldrh	r2, [r0, #24]
 8013dee:	1acb      	subs	r3, r1, r3
 8013df0:	f102 32ff 	add.w	r2, r2, #4294967295
 8013df4:	d431      	bmi.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013df6:	4293      	cmp	r3, r2
 8013df8:	dd0c      	ble.n	8013e14 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8013dfa:	230e      	movs	r3, #14
 8013dfc:	fb03 4302 	mla	r3, r3, r2, r4
 8013e00:	889b      	ldrh	r3, [r3, #4]
 8013e02:	1a5b      	subs	r3, r3, r1
 8013e04:	1ad3      	subs	r3, r2, r3
 8013e06:	429a      	cmp	r2, r3
 8013e08:	db27      	blt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e0a:	2b00      	cmp	r3, #0
 8013e0c:	bfbc      	itt	lt
 8013e0e:	2302      	movlt	r3, #2
 8013e10:	fb92 f3f3 	sdivlt	r3, r2, r3
 8013e14:	2500      	movs	r5, #0
 8013e16:	260e      	movs	r6, #14
 8013e18:	4295      	cmp	r5, r2
 8013e1a:	dc1e      	bgt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e1c:	fb06 4003 	mla	r0, r6, r3, r4
 8013e20:	8887      	ldrh	r7, [r0, #4]
 8013e22:	42b9      	cmp	r1, r7
 8013e24:	d01a      	beq.n	8013e5c <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8013e26:	d20d      	bcs.n	8013e44 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8013e28:	1e5a      	subs	r2, r3, #1
 8013e2a:	4295      	cmp	r5, r2
 8013e2c:	dc15      	bgt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e2e:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8013e32:	1a5b      	subs	r3, r3, r1
 8013e34:	1ad3      	subs	r3, r2, r3
 8013e36:	429a      	cmp	r2, r3
 8013e38:	db0f      	blt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e3a:	429d      	cmp	r5, r3
 8013e3c:	ddec      	ble.n	8013e18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e3e:	1953      	adds	r3, r2, r5
 8013e40:	105b      	asrs	r3, r3, #1
 8013e42:	e7e9      	b.n	8013e18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e44:	1c5d      	adds	r5, r3, #1
 8013e46:	42aa      	cmp	r2, r5
 8013e48:	db07      	blt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e4a:	8a43      	ldrh	r3, [r0, #18]
 8013e4c:	1acb      	subs	r3, r1, r3
 8013e4e:	442b      	add	r3, r5
 8013e50:	429d      	cmp	r5, r3
 8013e52:	dc02      	bgt.n	8013e5a <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8013e54:	429a      	cmp	r2, r3
 8013e56:	dadf      	bge.n	8013e18 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8013e58:	e7f1      	b.n	8013e3e <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8013e5a:	2000      	movs	r0, #0
 8013e5c:	bdf0      	pop	{r4, r5, r6, r7, pc}

08013e5e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8013e5e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013e60:	4604      	mov	r4, r0
 8013e62:	4617      	mov	r7, r2
 8013e64:	461e      	mov	r6, r3
 8013e66:	b911      	cbnz	r1, 8013e6e <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8013e68:	2500      	movs	r5, #0
 8013e6a:	4628      	mov	r0, r5
 8013e6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8013e6e:	290a      	cmp	r1, #10
 8013e70:	d0fa      	beq.n	8013e68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e72:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8013e76:	4291      	cmp	r1, r2
 8013e78:	d0f6      	beq.n	8013e68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e7a:	f242 020b 	movw	r2, #8203	@ 0x200b
 8013e7e:	4291      	cmp	r1, r2
 8013e80:	d0f2      	beq.n	8013e68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013e82:	f7ff ffaf 	bl	8013de4 <_ZNK8touchgfx9ConstFont4findEt>
 8013e86:	4605      	mov	r5, r0
 8013e88:	b950      	cbnz	r0, 8013ea0 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8013e8a:	6823      	ldr	r3, [r4, #0]
 8013e8c:	4620      	mov	r0, r4
 8013e8e:	691b      	ldr	r3, [r3, #16]
 8013e90:	4798      	blx	r3
 8013e92:	4601      	mov	r1, r0
 8013e94:	4620      	mov	r0, r4
 8013e96:	f7ff ffa5 	bl	8013de4 <_ZNK8touchgfx9ConstFont4findEt>
 8013e9a:	4605      	mov	r5, r0
 8013e9c:	2800      	cmp	r0, #0
 8013e9e:	d0e3      	beq.n	8013e68 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8013ea0:	6823      	ldr	r3, [r4, #0]
 8013ea2:	4629      	mov	r1, r5
 8013ea4:	4620      	mov	r0, r4
 8013ea6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013ea8:	4798      	blx	r3
 8013eaa:	6038      	str	r0, [r7, #0]
 8013eac:	6823      	ldr	r3, [r4, #0]
 8013eae:	4620      	mov	r0, r4
 8013eb0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013eb2:	4798      	blx	r3
 8013eb4:	7030      	strb	r0, [r6, #0]
 8013eb6:	e7d8      	b.n	8013e6a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08013eb8 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 8013eb8:	2000      	movs	r0, #0
 8013eba:	4770      	bx	lr

08013ebc <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8013ebc:	2001      	movs	r0, #1
 8013ebe:	4770      	bx	lr

08013ec0 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8013ec0:	2002      	movs	r0, #2
 8013ec2:	4770      	bx	lr

08013ec4 <_ZN8touchgfx6ScreenD1Ev>:
 8013ec4:	4770      	bx	lr

08013ec6 <_ZN8touchgfx12GestureEventD1Ev>:
 8013ec6:	4770      	bx	lr

08013ec8 <_ZN8touchgfx9DragEventD1Ev>:
 8013ec8:	4770      	bx	lr

08013eca <_ZN8touchgfx10ClickEventD1Ev>:
 8013eca:	4770      	bx	lr

08013ecc <_ZN8touchgfx10ClickEventD0Ev>:
 8013ecc:	b510      	push	{r4, lr}
 8013ece:	4604      	mov	r4, r0
 8013ed0:	210c      	movs	r1, #12
 8013ed2:	f00c f914 	bl	80200fe <_ZdlPvj>
 8013ed6:	4620      	mov	r0, r4
 8013ed8:	bd10      	pop	{r4, pc}

08013eda <_ZN8touchgfx9DragEventD0Ev>:
 8013eda:	b510      	push	{r4, lr}
 8013edc:	4604      	mov	r4, r0
 8013ede:	2110      	movs	r1, #16
 8013ee0:	f00c f90d 	bl	80200fe <_ZdlPvj>
 8013ee4:	4620      	mov	r0, r4
 8013ee6:	bd10      	pop	{r4, pc}

08013ee8 <_ZN8touchgfx12GestureEventD0Ev>:
 8013ee8:	b510      	push	{r4, lr}
 8013eea:	4604      	mov	r4, r0
 8013eec:	210c      	movs	r1, #12
 8013eee:	f00c f906 	bl	80200fe <_ZdlPvj>
 8013ef2:	4620      	mov	r0, r4
 8013ef4:	bd10      	pop	{r4, pc}

08013ef6 <_ZN8touchgfx6ScreenD0Ev>:
 8013ef6:	b510      	push	{r4, lr}
 8013ef8:	4604      	mov	r4, r0
 8013efa:	213c      	movs	r1, #60	@ 0x3c
 8013efc:	f00c f8ff 	bl	80200fe <_ZdlPvj>
 8013f00:	4620      	mov	r0, r4
 8013f02:	bd10      	pop	{r4, pc}

08013f04 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8013f04:	b530      	push	{r4, r5, lr}
 8013f06:	460d      	mov	r5, r1
 8013f08:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8013f0a:	b087      	sub	sp, #28
 8013f0c:	4604      	mov	r4, r0
 8013f0e:	b301      	cbz	r1, 8013f52 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8013f10:	a801      	add	r0, sp, #4
 8013f12:	f7ff fc09 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f16:	892a      	ldrh	r2, [r5, #8]
 8013f18:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8013f1c:	7928      	ldrb	r0, [r5, #4]
 8013f1e:	1ad2      	subs	r2, r2, r3
 8013f20:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8013f22:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8013f26:	441a      	add	r2, r3
 8013f28:	896b      	ldrh	r3, [r5, #10]
 8013f2a:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8013f2e:	f88d 0010 	strb.w	r0, [sp, #16]
 8013f32:	1b5b      	subs	r3, r3, r5
 8013f34:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8013f36:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013f38:	442b      	add	r3, r5
 8013f3a:	4d07      	ldr	r5, [pc, #28]	@ (8013f58 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8013f3c:	f8ad 1012 	strh.w	r1, [sp, #18]
 8013f40:	a903      	add	r1, sp, #12
 8013f42:	9503      	str	r5, [sp, #12]
 8013f44:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013f48:	f8ad 3016 	strh.w	r3, [sp, #22]
 8013f4c:	6803      	ldr	r3, [r0, #0]
 8013f4e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013f50:	4798      	blx	r3
 8013f52:	b007      	add	sp, #28
 8013f54:	bd30      	pop	{r4, r5, pc}
 8013f56:	bf00      	nop
 8013f58:	08024750 	.word	0x08024750

08013f5c <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8013f5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013f60:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8013f62:	b08a      	sub	sp, #40	@ 0x28
 8013f64:	4604      	mov	r4, r0
 8013f66:	460d      	mov	r5, r1
 8013f68:	b113      	cbz	r3, 8013f70 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8013f6a:	790b      	ldrb	r3, [r1, #4]
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	d044      	beq.n	8013ffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013f70:	f104 0804 	add.w	r8, r4, #4
 8013f74:	a803      	add	r0, sp, #12
 8013f76:	4641      	mov	r1, r8
 8013f78:	f7ff fbd6 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013f7c:	792b      	ldrb	r3, [r5, #4]
 8013f7e:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8013f82:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8013f86:	b983      	cbnz	r3, 8013faa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8013f88:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8013f8c:	892a      	ldrh	r2, [r5, #8]
 8013f8e:	88e9      	ldrh	r1, [r5, #6]
 8013f90:	4640      	mov	r0, r8
 8013f92:	1b92      	subs	r2, r2, r6
 8013f94:	9301      	str	r3, [sp, #4]
 8013f96:	1bc9      	subs	r1, r1, r7
 8013f98:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8013f9c:	b212      	sxth	r2, r2
 8013f9e:	9300      	str	r3, [sp, #0]
 8013fa0:	b209      	sxth	r1, r1
 8013fa2:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8013fa6:	f7f9 ff2f 	bl	800de08 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8013faa:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8013fac:	b329      	cbz	r1, 8013ffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013fae:	a805      	add	r0, sp, #20
 8013fb0:	f7ff fbba 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8013fb4:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8013fb8:	792b      	ldrb	r3, [r5, #4]
 8013fba:	a907      	add	r1, sp, #28
 8013fbc:	1abf      	subs	r7, r7, r2
 8013fbe:	88ea      	ldrh	r2, [r5, #6]
 8013fc0:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8013fc2:	4417      	add	r7, r2
 8013fc4:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8013fc6:	f88d 3020 	strb.w	r3, [sp, #32]
 8013fca:	4417      	add	r7, r2
 8013fcc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8013fd0:	1ab6      	subs	r6, r6, r2
 8013fd2:	892a      	ldrh	r2, [r5, #8]
 8013fd4:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8013fd8:	4416      	add	r6, r2
 8013fda:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8013fdc:	4416      	add	r6, r2
 8013fde:	4a08      	ldr	r2, [pc, #32]	@ (8014000 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8013fe0:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8013fe4:	2600      	movs	r6, #0
 8013fe6:	9207      	str	r2, [sp, #28]
 8013fe8:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8013fec:	6803      	ldr	r3, [r0, #0]
 8013fee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013ff0:	4798      	blx	r3
 8013ff2:	792b      	ldrb	r3, [r5, #4]
 8013ff4:	b10b      	cbz	r3, 8013ffa <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8013ff6:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8013ffa:	b00a      	add	sp, #40	@ 0x28
 8013ffc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014000:	08024728 	.word	0x08024728

08014004 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014008:	460c      	mov	r4, r1
 801400a:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 801400c:	b088      	sub	sp, #32
 801400e:	4605      	mov	r5, r0
 8014010:	2900      	cmp	r1, #0
 8014012:	d06d      	beq.n	80140f0 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014014:	4668      	mov	r0, sp
 8014016:	f7ff fb87 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801401a:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 801401c:	88e3      	ldrh	r3, [r4, #6]
 801401e:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014022:	440b      	add	r3, r1
 8014024:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014028:	b21b      	sxth	r3, r3
 801402a:	4543      	cmp	r3, r8
 801402c:	db31      	blt.n	8014092 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801402e:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014032:	44c4      	add	ip, r8
 8014034:	fa0f fc8c 	sxth.w	ip, ip
 8014038:	4563      	cmp	r3, ip
 801403a:	da2a      	bge.n	8014092 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 801403c:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 801403e:	8926      	ldrh	r6, [r4, #8]
 8014040:	4416      	add	r6, r2
 8014042:	b236      	sxth	r6, r6
 8014044:	42be      	cmp	r6, r7
 8014046:	db24      	blt.n	8014092 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014048:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 801404c:	4438      	add	r0, r7
 801404e:	b200      	sxth	r0, r0
 8014050:	4286      	cmp	r6, r0
 8014052:	da1e      	bge.n	8014092 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014054:	8963      	ldrh	r3, [r4, #10]
 8014056:	4419      	add	r1, r3
 8014058:	b209      	sxth	r1, r1
 801405a:	4541      	cmp	r1, r8
 801405c:	db08      	blt.n	8014070 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801405e:	4561      	cmp	r1, ip
 8014060:	da06      	bge.n	8014070 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014062:	89a3      	ldrh	r3, [r4, #12]
 8014064:	441a      	add	r2, r3
 8014066:	b212      	sxth	r2, r2
 8014068:	42ba      	cmp	r2, r7
 801406a:	db01      	blt.n	8014070 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 801406c:	4282      	cmp	r2, r0
 801406e:	db10      	blt.n	8014092 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014070:	4b21      	ldr	r3, [pc, #132]	@ (80140f8 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014072:	a904      	add	r1, sp, #16
 8014074:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014076:	9304      	str	r3, [sp, #16]
 8014078:	2302      	movs	r3, #2
 801407a:	f88d 3014 	strb.w	r3, [sp, #20]
 801407e:	2300      	movs	r3, #0
 8014080:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014084:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014088:	f8ad 301a 	strh.w	r3, [sp, #26]
 801408c:	6803      	ldr	r3, [r0, #0]
 801408e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014090:	4798      	blx	r3
 8014092:	1d29      	adds	r1, r5, #4
 8014094:	a802      	add	r0, sp, #8
 8014096:	f7ff fb47 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801409a:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801409e:	88e0      	ldrh	r0, [r4, #6]
 80140a0:	eba3 0808 	sub.w	r8, r3, r8
 80140a4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80140a8:	7921      	ldrb	r1, [r4, #4]
 80140aa:	fa1f f888 	uxth.w	r8, r8
 80140ae:	1bdf      	subs	r7, r3, r7
 80140b0:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 80140b4:	b2bb      	uxth	r3, r7
 80140b6:	4440      	add	r0, r8
 80140b8:	8922      	ldrh	r2, [r4, #8]
 80140ba:	8967      	ldrh	r7, [r4, #10]
 80140bc:	4460      	add	r0, ip
 80140be:	89a4      	ldrh	r4, [r4, #12]
 80140c0:	441a      	add	r2, r3
 80140c2:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 80140c4:	44b8      	add	r8, r7
 80140c6:	4423      	add	r3, r4
 80140c8:	f8ad 0016 	strh.w	r0, [sp, #22]
 80140cc:	4432      	add	r2, r6
 80140ce:	44e0      	add	r8, ip
 80140d0:	4433      	add	r3, r6
 80140d2:	4c0a      	ldr	r4, [pc, #40]	@ (80140fc <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 80140d4:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 80140d6:	f88d 1014 	strb.w	r1, [sp, #20]
 80140da:	a904      	add	r1, sp, #16
 80140dc:	9404      	str	r4, [sp, #16]
 80140de:	f8ad 2018 	strh.w	r2, [sp, #24]
 80140e2:	f8ad 801a 	strh.w	r8, [sp, #26]
 80140e6:	f8ad 301c 	strh.w	r3, [sp, #28]
 80140ea:	6803      	ldr	r3, [r0, #0]
 80140ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80140ee:	4798      	blx	r3
 80140f0:	b008      	add	sp, #32
 80140f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140f6:	bf00      	nop
 80140f8:	08024728 	.word	0x08024728
 80140fc:	0802473c 	.word	0x0802473c

08014100 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8014100:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8014102:	4604      	mov	r4, r0
 8014104:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8014108:	3201      	adds	r2, #1
 801410a:	d112      	bne.n	8014132 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 801410c:	2500      	movs	r5, #0
 801410e:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014112:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014116:	6803      	ldr	r3, [r0, #0]
 8014118:	9500      	str	r5, [sp, #0]
 801411a:	466d      	mov	r5, sp
 801411c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014120:	f8ad 2006 	strh.w	r2, [sp, #6]
 8014124:	4629      	mov	r1, r5
 8014126:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014128:	4798      	blx	r3
 801412a:	e895 0003 	ldmia.w	r5, {r0, r1}
 801412e:	e884 0003 	stmia.w	r4, {r0, r1}
 8014132:	4620      	mov	r0, r4
 8014134:	b003      	add	sp, #12
 8014136:	bd30      	pop	{r4, r5, pc}

08014138 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8014138:	b513      	push	{r0, r1, r4, lr}
 801413a:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 801413e:	4604      	mov	r4, r0
 8014140:	3301      	adds	r3, #1
 8014142:	d109      	bne.n	8014158 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 8014144:	4601      	mov	r1, r0
 8014146:	4668      	mov	r0, sp
 8014148:	f7ff faee 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801414c:	f8bd 3000 	ldrh.w	r3, [sp]
 8014150:	8423      	strh	r3, [r4, #32]
 8014152:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8014156:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014158:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 801415c:	b002      	add	sp, #8
 801415e:	bd10      	pop	{r4, pc}

08014160 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8014160:	b513      	push	{r0, r1, r4, lr}
 8014162:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 8014166:	4604      	mov	r4, r0
 8014168:	3301      	adds	r3, #1
 801416a:	d109      	bne.n	8014180 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 801416c:	4601      	mov	r1, r0
 801416e:	4668      	mov	r0, sp
 8014170:	f7ff fada 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014174:	f8bd 3000 	ldrh.w	r3, [sp]
 8014178:	8423      	strh	r3, [r4, #32]
 801417a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801417e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8014180:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 8014184:	b002      	add	sp, #8
 8014186:	bd10      	pop	{r4, pc}

08014188 <_ZN8touchgfx6ScreenC1Ev>:
 8014188:	b570      	push	{r4, r5, r6, lr}
 801418a:	4b17      	ldr	r3, [pc, #92]	@ (80141e8 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 801418c:	4605      	mov	r5, r0
 801418e:	4a17      	ldr	r2, [pc, #92]	@ (80141ec <_ZN8touchgfx6ScreenC1Ev+0x64>)
 8014190:	2101      	movs	r1, #1
 8014192:	f845 3b04 	str.w	r3, [r5], #4
 8014196:	2300      	movs	r3, #0
 8014198:	6042      	str	r2, [r0, #4]
 801419a:	4604      	mov	r4, r0
 801419c:	8103      	strh	r3, [r0, #8]
 801419e:	8143      	strh	r3, [r0, #10]
 80141a0:	8183      	strh	r3, [r0, #12]
 80141a2:	81c3      	strh	r3, [r0, #14]
 80141a4:	8203      	strh	r3, [r0, #16]
 80141a6:	8243      	strh	r3, [r0, #18]
 80141a8:	8283      	strh	r3, [r0, #20]
 80141aa:	82c3      	strh	r3, [r0, #22]
 80141ac:	6203      	str	r3, [r0, #32]
 80141ae:	8483      	strh	r3, [r0, #36]	@ 0x24
 80141b0:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80141b2:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80141b6:	6343      	str	r3, [r0, #52]	@ 0x34
 80141b8:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80141bc:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80141c0:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80141c4:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80141c8:	4b09      	ldr	r3, [pc, #36]	@ (80141f0 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80141ca:	4628      	mov	r0, r5
 80141cc:	f9b3 6000 	ldrsh.w	r6, [r3]
 80141d0:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80141d2:	4a08      	ldr	r2, [pc, #32]	@ (80141f4 <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80141d4:	f9b2 1000 	ldrsh.w	r1, [r2]
 80141d8:	4798      	blx	r3
 80141da:	6863      	ldr	r3, [r4, #4]
 80141dc:	4628      	mov	r0, r5
 80141de:	4631      	mov	r1, r6
 80141e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80141e2:	4798      	blx	r3
 80141e4:	4620      	mov	r0, r4
 80141e6:	bd70      	pop	{r4, r5, r6, pc}
 80141e8:	08024764 	.word	0x08024764
 80141ec:	080243f0 	.word	0x080243f0
 80141f0:	240248f2 	.word	0x240248f2
 80141f4:	240248f0 	.word	0x240248f0

080141f8 <_ZN8touchgfx6Screen4drawEv>:
 80141f8:	4b09      	ldr	r3, [pc, #36]	@ (8014220 <_ZN8touchgfx6Screen4drawEv+0x28>)
 80141fa:	b507      	push	{r0, r1, r2, lr}
 80141fc:	f9b3 2000 	ldrsh.w	r2, [r3]
 8014200:	2100      	movs	r1, #0
 8014202:	4b08      	ldr	r3, [pc, #32]	@ (8014224 <_ZN8touchgfx6Screen4drawEv+0x2c>)
 8014204:	9100      	str	r1, [sp, #0]
 8014206:	4669      	mov	r1, sp
 8014208:	f9b3 3000 	ldrsh.w	r3, [r3]
 801420c:	f8ad 2004 	strh.w	r2, [sp, #4]
 8014210:	f8ad 3006 	strh.w	r3, [sp, #6]
 8014214:	6803      	ldr	r3, [r0, #0]
 8014216:	689b      	ldr	r3, [r3, #8]
 8014218:	4798      	blx	r3
 801421a:	b003      	add	sp, #12
 801421c:	f85d fb04 	ldr.w	pc, [sp], #4
 8014220:	240248f0 	.word	0x240248f0
 8014224:	240248f2 	.word	0x240248f2

08014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8014228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801422c:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8014230:	b089      	sub	sp, #36	@ 0x24
 8014232:	4680      	mov	r8, r0
 8014234:	460c      	mov	r4, r1
 8014236:	2b00      	cmp	r3, #0
 8014238:	4615      	mov	r5, r2
 801423a:	dd0e      	ble.n	801425a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801423c:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8014240:	2b00      	cmp	r3, #0
 8014242:	dd0a      	ble.n	801425a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8014244:	4628      	mov	r0, r5
 8014246:	f7ff ff5b 	bl	8014100 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 801424a:	4621      	mov	r1, r4
 801424c:	f7fe f879 	bl	8012342 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8014250:	69eb      	ldr	r3, [r5, #28]
 8014252:	b928      	cbnz	r0, 8014260 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 8014254:	461d      	mov	r5, r3
 8014256:	2b00      	cmp	r3, #0
 8014258:	d1f4      	bne.n	8014244 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 801425a:	b009      	add	sp, #36	@ 0x24
 801425c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014260:	ae04      	add	r6, sp, #16
 8014262:	2b00      	cmp	r3, #0
 8014264:	f000 80b5 	beq.w	80143d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8014268:	682b      	ldr	r3, [r5, #0]
 801426a:	4629      	mov	r1, r5
 801426c:	a802      	add	r0, sp, #8
 801426e:	68db      	ldr	r3, [r3, #12]
 8014270:	4798      	blx	r3
 8014272:	4628      	mov	r0, r5
 8014274:	f7ff ff60 	bl	8014138 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014278:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 801427c:	4407      	add	r7, r0
 801427e:	4628      	mov	r0, r5
 8014280:	f7ff ff6e 	bl	8014160 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014284:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014288:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 801428c:	b23f      	sxth	r7, r7
 801428e:	4418      	add	r0, r3
 8014290:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8014294:	4621      	mov	r1, r4
 8014296:	f8ad 2014 	strh.w	r2, [sp, #20]
 801429a:	f8ad 0012 	strh.w	r0, [sp, #18]
 801429e:	4630      	mov	r0, r6
 80142a0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80142a4:	f8ad 7010 	strh.w	r7, [sp, #16]
 80142a8:	f7f9 fe90 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80142ac:	4628      	mov	r0, r5
 80142ae:	f7ff ff27 	bl	8014100 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80142b2:	ab06      	add	r3, sp, #24
 80142b4:	4602      	mov	r2, r0
 80142b6:	e896 0003 	ldmia.w	r6, {r0, r1}
 80142ba:	e883 0003 	stmia.w	r3, {r0, r1}
 80142be:	4611      	mov	r1, r2
 80142c0:	4618      	mov	r0, r3
 80142c2:	f7f9 fe83 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80142c6:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80142ca:	f9b4 1000 	ldrsh.w	r1, [r4]
 80142ce:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80142d2:	4299      	cmp	r1, r3
 80142d4:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 80142d8:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 80142dc:	d10b      	bne.n	80142f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80142de:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 80142e2:	4552      	cmp	r2, sl
 80142e4:	d107      	bne.n	80142f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80142e6:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80142ea:	455a      	cmp	r2, fp
 80142ec:	d103      	bne.n	80142f6 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 80142ee:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80142f2:	454a      	cmp	r2, r9
 80142f4:	d06d      	beq.n	80143d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80142f6:	f1bb 0f00 	cmp.w	fp, #0
 80142fa:	dd65      	ble.n	80143c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 80142fc:	f1b9 0f00 	cmp.w	r9, #0
 8014300:	dd62      	ble.n	80143c8 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8014302:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 8014306:	fa1f f08a 	uxth.w	r0, sl
 801430a:	4552      	cmp	r2, sl
 801430c:	9000      	str	r0, [sp, #0]
 801430e:	da12      	bge.n	8014336 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8014310:	9301      	str	r3, [sp, #4]
 8014312:	9b00      	ldr	r3, [sp, #0]
 8014314:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014318:	f8ad 2012 	strh.w	r2, [sp, #18]
 801431c:	1a9a      	subs	r2, r3, r2
 801431e:	f8ad 1010 	strh.w	r1, [sp, #16]
 8014322:	4631      	mov	r1, r6
 8014324:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014328:	4640      	mov	r0, r8
 801432a:	f8ad 2016 	strh.w	r2, [sp, #22]
 801432e:	69ea      	ldr	r2, [r5, #28]
 8014330:	f7ff ff7a 	bl	8014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8014334:	9b01      	ldr	r3, [sp, #4]
 8014336:	f9b4 2000 	ldrsh.w	r2, [r4]
 801433a:	b29f      	uxth	r7, r3
 801433c:	429a      	cmp	r2, r3
 801433e:	da0d      	bge.n	801435c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8014340:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014344:	1aba      	subs	r2, r7, r2
 8014346:	f8ad a012 	strh.w	sl, [sp, #18]
 801434a:	4631      	mov	r1, r6
 801434c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014350:	4640      	mov	r0, r8
 8014352:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014356:	69ea      	ldr	r2, [r5, #28]
 8014358:	f7ff ff66 	bl	8014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801435c:	8822      	ldrh	r2, [r4, #0]
 801435e:	445f      	add	r7, fp
 8014360:	88a3      	ldrh	r3, [r4, #4]
 8014362:	b2bf      	uxth	r7, r7
 8014364:	4413      	add	r3, r2
 8014366:	b23a      	sxth	r2, r7
 8014368:	b29b      	uxth	r3, r3
 801436a:	b219      	sxth	r1, r3
 801436c:	4291      	cmp	r1, r2
 801436e:	dd0d      	ble.n	801438c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8014370:	1bdb      	subs	r3, r3, r7
 8014372:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014376:	f8ad a012 	strh.w	sl, [sp, #18]
 801437a:	4631      	mov	r1, r6
 801437c:	f8ad 3014 	strh.w	r3, [sp, #20]
 8014380:	4640      	mov	r0, r8
 8014382:	f8ad 9016 	strh.w	r9, [sp, #22]
 8014386:	69ea      	ldr	r2, [r5, #28]
 8014388:	f7ff ff4e 	bl	8014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801438c:	88e2      	ldrh	r2, [r4, #6]
 801438e:	8863      	ldrh	r3, [r4, #2]
 8014390:	4413      	add	r3, r2
 8014392:	9a00      	ldr	r2, [sp, #0]
 8014394:	444a      	add	r2, r9
 8014396:	b29b      	uxth	r3, r3
 8014398:	fa1f f982 	uxth.w	r9, r2
 801439c:	b219      	sxth	r1, r3
 801439e:	fa0f f289 	sxth.w	r2, r9
 80143a2:	428a      	cmp	r2, r1
 80143a4:	da15      	bge.n	80143d2 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80143a6:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80143aa:	eba3 0309 	sub.w	r3, r3, r9
 80143ae:	f9b4 0000 	ldrsh.w	r0, [r4]
 80143b2:	f8ad 1014 	strh.w	r1, [sp, #20]
 80143b6:	4631      	mov	r1, r6
 80143b8:	f8ad 0010 	strh.w	r0, [sp, #16]
 80143bc:	f8ad 2012 	strh.w	r2, [sp, #18]
 80143c0:	f8ad 3016 	strh.w	r3, [sp, #22]
 80143c4:	69ea      	ldr	r2, [r5, #28]
 80143c6:	e001      	b.n	80143cc <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80143c8:	69ea      	ldr	r2, [r5, #28]
 80143ca:	4621      	mov	r1, r4
 80143cc:	4640      	mov	r0, r8
 80143ce:	f7ff ff2b 	bl	8014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80143d2:	4628      	mov	r0, r5
 80143d4:	f7ff fe94 	bl	8014100 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80143d8:	6861      	ldr	r1, [r4, #4]
 80143da:	4602      	mov	r2, r0
 80143dc:	4633      	mov	r3, r6
 80143de:	6820      	ldr	r0, [r4, #0]
 80143e0:	c303      	stmia	r3!, {r0, r1}
 80143e2:	4611      	mov	r1, r2
 80143e4:	4630      	mov	r0, r6
 80143e6:	f7f9 fdf1 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 80143ea:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	f77f af33 	ble.w	801425a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80143f4:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 80143f8:	2b00      	cmp	r3, #0
 80143fa:	f77f af2e 	ble.w	801425a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 80143fe:	4628      	mov	r0, r5
 8014400:	f7ff fe9a 	bl	8014138 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 8014404:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8014408:	1a18      	subs	r0, r3, r0
 801440a:	f8ad 0010 	strh.w	r0, [sp, #16]
 801440e:	4628      	mov	r0, r5
 8014410:	f7ff fea6 	bl	8014160 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 8014414:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8014418:	4631      	mov	r1, r6
 801441a:	1a18      	subs	r0, r3, r0
 801441c:	f8ad 0012 	strh.w	r0, [sp, #18]
 8014420:	4628      	mov	r0, r5
 8014422:	682b      	ldr	r3, [r5, #0]
 8014424:	689b      	ldr	r3, [r3, #8]
 8014426:	4798      	blx	r3
 8014428:	e717      	b.n	801425a <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

0801442a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 801442a:	b570      	push	{r4, r5, r6, lr}
 801442c:	1d06      	adds	r6, r0, #4
 801442e:	b086      	sub	sp, #24
 8014430:	460c      	mov	r4, r1
 8014432:	2300      	movs	r3, #0
 8014434:	4631      	mov	r1, r6
 8014436:	4605      	mov	r5, r0
 8014438:	a802      	add	r0, sp, #8
 801443a:	9301      	str	r3, [sp, #4]
 801443c:	f7ff f974 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014440:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014444:	8822      	ldrh	r2, [r4, #0]
 8014446:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 801444a:	1ad2      	subs	r2, r2, r3
 801444c:	8863      	ldrh	r3, [r4, #2]
 801444e:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8014452:	1a5b      	subs	r3, r3, r1
 8014454:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8014458:	f8ad 2010 	strh.w	r2, [sp, #16]
 801445c:	aa01      	add	r2, sp, #4
 801445e:	f8ad 0014 	strh.w	r0, [sp, #20]
 8014462:	4630      	mov	r0, r6
 8014464:	f8ad 1016 	strh.w	r1, [sp, #22]
 8014468:	a904      	add	r1, sp, #16
 801446a:	f8ad 3012 	strh.w	r3, [sp, #18]
 801446e:	f7f9 fe85 	bl	800e17c <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 8014472:	9a01      	ldr	r2, [sp, #4]
 8014474:	b11a      	cbz	r2, 801447e <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 8014476:	4621      	mov	r1, r4
 8014478:	4628      	mov	r0, r5
 801447a:	f7ff fed5 	bl	8014228 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801447e:	b006      	add	sp, #24
 8014480:	bd70      	pop	{r4, r5, r6, pc}

08014482 <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 8014482:	4602      	mov	r2, r0
 8014484:	b530      	push	{r4, r5, lr}
 8014486:	4604      	mov	r4, r0
 8014488:	b085      	sub	sp, #20
 801448a:	f852 0f08 	ldr.w	r0, [r2, #8]!
 801448e:	460d      	mov	r5, r1
 8014490:	466b      	mov	r3, sp
 8014492:	6851      	ldr	r1, [r2, #4]
 8014494:	c303      	stmia	r3!, {r0, r1}
 8014496:	4629      	mov	r1, r5
 8014498:	4668      	mov	r0, sp
 801449a:	f7f9 fd97 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 801449e:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80144a2:	b12b      	cbz	r3, 80144b0 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80144a4:	4669      	mov	r1, sp
 80144a6:	4620      	mov	r0, r4
 80144a8:	f7ff ffbf 	bl	801442a <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80144ac:	b005      	add	sp, #20
 80144ae:	bd30      	pop	{r4, r5, pc}
 80144b0:	3404      	adds	r4, #4
 80144b2:	a802      	add	r0, sp, #8
 80144b4:	4621      	mov	r1, r4
 80144b6:	f7ff f937 	bl	8013728 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80144ba:	f8bd 3000 	ldrh.w	r3, [sp]
 80144be:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80144c2:	4669      	mov	r1, sp
 80144c4:	4620      	mov	r0, r4
 80144c6:	1a9b      	subs	r3, r3, r2
 80144c8:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80144cc:	f8ad 3000 	strh.w	r3, [sp]
 80144d0:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80144d4:	1a9b      	subs	r3, r3, r2
 80144d6:	f8ad 3002 	strh.w	r3, [sp, #2]
 80144da:	f7f9 fe16 	bl	800e10a <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 80144de:	e7e5      	b.n	80144ac <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

080144e0 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 80144e0:	460b      	mov	r3, r1
 80144e2:	680a      	ldr	r2, [r1, #0]
 80144e4:	1d01      	adds	r1, r0, #4
 80144e6:	6992      	ldr	r2, [r2, #24]
 80144e8:	4618      	mov	r0, r3
 80144ea:	4710      	bx	r2

080144ec <_ZN8touchgfx12TextProviderC1Ev>:
 80144ec:	b538      	push	{r3, r4, r5, lr}
 80144ee:	2500      	movs	r5, #0
 80144f0:	2302      	movs	r3, #2
 80144f2:	4604      	mov	r4, r0
 80144f4:	220e      	movs	r2, #14
 80144f6:	7403      	strb	r3, [r0, #16]
 80144f8:	4629      	mov	r1, r5
 80144fa:	6145      	str	r5, [r0, #20]
 80144fc:	7605      	strb	r5, [r0, #24]
 80144fe:	83c5      	strh	r5, [r0, #30]
 8014500:	8405      	strh	r5, [r0, #32]
 8014502:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8014504:	8705      	strh	r5, [r0, #56]	@ 0x38
 8014506:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8014508:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 801450c:	e9c0 5500 	strd	r5, r5, [r0]
 8014510:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 8014514:	304c      	adds	r0, #76	@ 0x4c
 8014516:	f00c fc27 	bl	8020d68 <memset>
 801451a:	2301      	movs	r3, #1
 801451c:	4620      	mov	r0, r4
 801451e:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 8014522:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014526:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 801452a:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 801452e:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 8014532:	f7ef ff45 	bl	80043c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 8014536:	4620      	mov	r0, r4
 8014538:	bd38      	pop	{r3, r4, r5, pc}

0801453a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 801453a:	b530      	push	{r4, r5, lr}
 801453c:	2500      	movs	r5, #0
 801453e:	2401      	movs	r4, #1
 8014540:	6843      	ldr	r3, [r0, #4]
 8014542:	b913      	cbnz	r3, 801454a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 8014544:	6803      	ldr	r3, [r0, #0]
 8014546:	b313      	cbz	r3, 801458e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014548:	6043      	str	r3, [r0, #4]
 801454a:	7e03      	ldrb	r3, [r0, #24]
 801454c:	b143      	cbz	r3, 8014560 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 801454e:	6943      	ldr	r3, [r0, #20]
 8014550:	b12b      	cbz	r3, 801455e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014552:	881a      	ldrh	r2, [r3, #0]
 8014554:	b11a      	cbz	r2, 801455e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 8014556:	1c9a      	adds	r2, r3, #2
 8014558:	6142      	str	r2, [r0, #20]
 801455a:	8818      	ldrh	r0, [r3, #0]
 801455c:	bd30      	pop	{r4, r5, pc}
 801455e:	7605      	strb	r5, [r0, #24]
 8014560:	6843      	ldr	r3, [r0, #4]
 8014562:	8819      	ldrh	r1, [r3, #0]
 8014564:	b199      	cbz	r1, 801458e <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8014566:	1c9a      	adds	r2, r3, #2
 8014568:	2902      	cmp	r1, #2
 801456a:	6042      	str	r2, [r0, #4]
 801456c:	d1f5      	bne.n	801455a <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 801456e:	7c03      	ldrb	r3, [r0, #16]
 8014570:	2b01      	cmp	r3, #1
 8014572:	d8e5      	bhi.n	8014540 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014574:	1c5a      	adds	r2, r3, #1
 8014576:	3302      	adds	r3, #2
 8014578:	7402      	strb	r2, [r0, #16]
 801457a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 801457e:	6143      	str	r3, [r0, #20]
 8014580:	2b00      	cmp	r3, #0
 8014582:	d0dd      	beq.n	8014540 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 8014584:	881b      	ldrh	r3, [r3, #0]
 8014586:	2b00      	cmp	r3, #0
 8014588:	d0da      	beq.n	8014540 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801458a:	7604      	strb	r4, [r0, #24]
 801458c:	e7d8      	b.n	8014540 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801458e:	2000      	movs	r0, #0
 8014590:	e7e4      	b.n	801455c <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

08014592 <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 8014592:	6001      	str	r1, [r0, #0]
 8014594:	2100      	movs	r1, #0
 8014596:	b430      	push	{r4, r5}
 8014598:	6041      	str	r1, [r0, #4]
 801459a:	6815      	ldr	r5, [r2, #0]
 801459c:	6085      	str	r5, [r0, #8]
 801459e:	6852      	ldr	r2, [r2, #4]
 80145a0:	6443      	str	r3, [r0, #68]	@ 0x44
 80145a2:	9b02      	ldr	r3, [sp, #8]
 80145a4:	60c2      	str	r2, [r0, #12]
 80145a6:	7401      	strb	r1, [r0, #16]
 80145a8:	6141      	str	r1, [r0, #20]
 80145aa:	7601      	strb	r1, [r0, #24]
 80145ac:	8701      	strh	r1, [r0, #56]	@ 0x38
 80145ae:	8401      	strh	r1, [r0, #32]
 80145b0:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80145b4:	6483      	str	r3, [r0, #72]	@ 0x48
 80145b6:	bc30      	pop	{r4, r5}
 80145b8:	f7ef bf02 	b.w	80043c0 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080145bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80145bc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80145be:	4605      	mov	r5, r0
 80145c0:	4608      	mov	r0, r1
 80145c2:	b1f1      	cbz	r1, 8014602 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80145c4:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80145c8:	460b      	mov	r3, r1
 80145ca:	f101 0708 	add.w	r7, r1, #8
 80145ce:	4622      	mov	r2, r4
 80145d0:	6818      	ldr	r0, [r3, #0]
 80145d2:	3308      	adds	r3, #8
 80145d4:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80145d8:	4626      	mov	r6, r4
 80145da:	42bb      	cmp	r3, r7
 80145dc:	c603      	stmia	r6!, {r0, r1}
 80145de:	4634      	mov	r4, r6
 80145e0:	d1f6      	bne.n	80145d0 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 80145e2:	6818      	ldr	r0, [r3, #0]
 80145e4:	6030      	str	r0, [r6, #0]
 80145e6:	4610      	mov	r0, r2
 80145e8:	889b      	ldrh	r3, [r3, #4]
 80145ea:	80b3      	strh	r3, [r6, #4]
 80145ec:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80145f0:	015b      	lsls	r3, r3, #5
 80145f2:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80145f6:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 80145fa:	430b      	orrs	r3, r1
 80145fc:	425b      	negs	r3, r3
 80145fe:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8014602:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014604 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 8014604:	b538      	push	{r3, r4, r5, lr}
 8014606:	460c      	mov	r4, r1
 8014608:	6811      	ldr	r1, [r2, #0]
 801460a:	4610      	mov	r0, r2
 801460c:	68cd      	ldr	r5, [r1, #12]
 801460e:	4619      	mov	r1, r3
 8014610:	47a8      	blx	r5
 8014612:	2800      	cmp	r0, #0
 8014614:	bf08      	it	eq
 8014616:	4620      	moveq	r0, r4
 8014618:	bd38      	pop	{r3, r4, r5, pc}
	...

0801461c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 801461c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014620:	468c      	mov	ip, r1
 8014622:	4605      	mov	r5, r0
 8014624:	4614      	mov	r4, r2
 8014626:	b942      	cbnz	r2, 801463a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8014628:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 801462c:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8014630:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 8014634:	4620      	mov	r0, r4
 8014636:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801463a:	7b50      	ldrb	r0, [r2, #13]
 801463c:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8014640:	8893      	ldrh	r3, [r2, #4]
 8014642:	0106      	lsls	r6, r0, #4
 8014644:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8014648:	79e6      	ldrb	r6, [r4, #7]
 801464a:	4316      	orrs	r6, r2
 801464c:	185a      	adds	r2, r3, r1
 801464e:	b291      	uxth	r1, r2
 8014650:	b2b7      	uxth	r7, r6
 8014652:	291d      	cmp	r1, #29
 8014654:	d87f      	bhi.n	8014756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8014656:	2201      	movs	r2, #1
 8014658:	10f6      	asrs	r6, r6, #3
 801465a:	408a      	lsls	r2, r1
 801465c:	498b      	ldr	r1, [pc, #556]	@ (801488c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 801465e:	420a      	tst	r2, r1
 8014660:	d12e      	bne.n	80146c0 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 8014662:	f412 7f60 	tst.w	r2, #896	@ 0x380
 8014666:	d076      	beq.n	8014756 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8014668:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801466c:	4623      	mov	r3, r4
 801466e:	f104 0e08 	add.w	lr, r4, #8
 8014672:	4614      	mov	r4, r2
 8014674:	6818      	ldr	r0, [r3, #0]
 8014676:	3308      	adds	r3, #8
 8014678:	f853 1c04 	ldr.w	r1, [r3, #-4]
 801467c:	4694      	mov	ip, r2
 801467e:	4573      	cmp	r3, lr
 8014680:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8014684:	4662      	mov	r2, ip
 8014686:	d1f5      	bne.n	8014674 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 8014688:	6818      	ldr	r0, [r3, #0]
 801468a:	f8cc 0000 	str.w	r0, [ip]
 801468e:	889b      	ldrh	r3, [r3, #4]
 8014690:	f8ac 3004 	strh.w	r3, [ip, #4]
 8014694:	b2b3      	uxth	r3, r6
 8014696:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 801469a:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 801469e:	1aca      	subs	r2, r1, r3
 80146a0:	1bcf      	subs	r7, r1, r7
 80146a2:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80146a6:	b292      	uxth	r2, r2
 80146a8:	1afb      	subs	r3, r7, r3
 80146aa:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80146ae:	10d2      	asrs	r2, r2, #3
 80146b0:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80146b4:	4302      	orrs	r2, r0
 80146b6:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80146ba:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80146be:	e7b9      	b.n	8014634 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80146c0:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80146c4:	4623      	mov	r3, r4
 80146c6:	f104 0808 	add.w	r8, r4, #8
 80146ca:	4614      	mov	r4, r2
 80146cc:	6818      	ldr	r0, [r3, #0]
 80146ce:	3308      	adds	r3, #8
 80146d0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80146d4:	4696      	mov	lr, r2
 80146d6:	4543      	cmp	r3, r8
 80146d8:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80146dc:	4672      	mov	r2, lr
 80146de:	d1f5      	bne.n	80146cc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 80146e0:	6818      	ldr	r0, [r3, #0]
 80146e2:	f8ce 0000 	str.w	r0, [lr]
 80146e6:	889b      	ldrh	r3, [r3, #4]
 80146e8:	f8ae 3004 	strh.w	r3, [lr, #4]
 80146ec:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 80146ee:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 80146f2:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 80146f4:	f640 6333 	movw	r3, #3635	@ 0xe33
 80146f8:	4299      	cmp	r1, r3
 80146fa:	d111      	bne.n	8014720 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 80146fc:	f8dc 3000 	ldr.w	r3, [ip]
 8014700:	4660      	mov	r0, ip
 8014702:	68db      	ldr	r3, [r3, #12]
 8014704:	4798      	blx	r3
 8014706:	7b41      	ldrb	r1, [r0, #13]
 8014708:	00cb      	lsls	r3, r1, #3
 801470a:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801470e:	7a03      	ldrb	r3, [r0, #8]
 8014710:	4313      	orrs	r3, r2
 8014712:	064a      	lsls	r2, r1, #25
 8014714:	bf44      	itt	mi
 8014716:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801471a:	b21b      	sxthmi	r3, r3
 801471c:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8014720:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 8014724:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8014728:	443b      	add	r3, r7
 801472a:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801472e:	4433      	add	r3, r6
 8014730:	b29b      	uxth	r3, r3
 8014732:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8014736:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 801473a:	10db      	asrs	r3, r3, #3
 801473c:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014740:	4313      	orrs	r3, r2
 8014742:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 8014746:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 801474a:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 801474e:	1a9b      	subs	r3, r3, r2
 8014750:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 8014754:	e76e      	b.n	8014634 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 8014756:	f023 0204 	bic.w	r2, r3, #4
 801475a:	f640 611b 	movw	r1, #3611	@ 0xe1b
 801475e:	428a      	cmp	r2, r1
 8014760:	d003      	beq.n	801476a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 8014762:	f640 621d 	movw	r2, #3613	@ 0xe1d
 8014766:	4293      	cmp	r3, r2
 8014768:	d138      	bne.n	80147dc <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 801476a:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 801476e:	4622      	mov	r2, r4
 8014770:	f104 0808 	add.w	r8, r4, #8
 8014774:	4634      	mov	r4, r6
 8014776:	6810      	ldr	r0, [r2, #0]
 8014778:	3208      	adds	r2, #8
 801477a:	f852 1c04 	ldr.w	r1, [r2, #-4]
 801477e:	46b6      	mov	lr, r6
 8014780:	4542      	cmp	r2, r8
 8014782:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014786:	4676      	mov	r6, lr
 8014788:	d1f5      	bne.n	8014776 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 801478a:	6810      	ldr	r0, [r2, #0]
 801478c:	3b01      	subs	r3, #1
 801478e:	4621      	mov	r1, r4
 8014790:	f8ce 0000 	str.w	r0, [lr]
 8014794:	b29b      	uxth	r3, r3
 8014796:	8892      	ldrh	r2, [r2, #4]
 8014798:	4628      	mov	r0, r5
 801479a:	f8ae 2004 	strh.w	r2, [lr, #4]
 801479e:	4662      	mov	r2, ip
 80147a0:	f7ff ff30 	bl	8014604 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80147a4:	7b41      	ldrb	r1, [r0, #13]
 80147a6:	00cb      	lsls	r3, r1, #3
 80147a8:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80147ac:	7a03      	ldrb	r3, [r0, #8]
 80147ae:	0648      	lsls	r0, r1, #25
 80147b0:	ea43 0302 	orr.w	r3, r3, r2
 80147b4:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80147b8:	bf44      	itt	mi
 80147ba:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80147be:	b21b      	sxthmi	r3, r3
 80147c0:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80147c4:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80147c8:	005b      	lsls	r3, r3, #1
 80147ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80147ce:	4313      	orrs	r3, r2
 80147d0:	115a      	asrs	r2, r3, #5
 80147d2:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80147d6:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 80147da:	e047      	b.n	801486c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 80147dc:	00c2      	lsls	r2, r0, #3
 80147de:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 80147e2:	7a22      	ldrb	r2, [r4, #8]
 80147e4:	430a      	orrs	r2, r1
 80147e6:	0641      	lsls	r1, r0, #25
 80147e8:	f640 6109 	movw	r1, #3593	@ 0xe09
 80147ec:	bf44      	itt	mi
 80147ee:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 80147f2:	b212      	sxthmi	r2, r2
 80147f4:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 80147f8:	f023 0210 	bic.w	r2, r3, #16
 80147fc:	428a      	cmp	r2, r1
 80147fe:	d003      	beq.n	8014808 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8014800:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014804:	4293      	cmp	r3, r2
 8014806:	d13e      	bne.n	8014886 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8014808:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 801480c:	f104 0808 	add.w	r8, r4, #8
 8014810:	4696      	mov	lr, r2
 8014812:	6820      	ldr	r0, [r4, #0]
 8014814:	3408      	adds	r4, #8
 8014816:	f854 1c04 	ldr.w	r1, [r4, #-4]
 801481a:	4616      	mov	r6, r2
 801481c:	4544      	cmp	r4, r8
 801481e:	c603      	stmia	r6!, {r0, r1}
 8014820:	4632      	mov	r2, r6
 8014822:	d1f6      	bne.n	8014812 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 8014824:	6820      	ldr	r0, [r4, #0]
 8014826:	6030      	str	r0, [r6, #0]
 8014828:	4628      	mov	r0, r5
 801482a:	88a1      	ldrh	r1, [r4, #4]
 801482c:	4674      	mov	r4, lr
 801482e:	80b1      	strh	r1, [r6, #4]
 8014830:	4671      	mov	r1, lr
 8014832:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 8014836:	0076      	lsls	r6, r6, #1
 8014838:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 801483c:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8014840:	4316      	orrs	r6, r2
 8014842:	f640 6213 	movw	r2, #3603	@ 0xe13
 8014846:	4293      	cmp	r3, r2
 8014848:	4662      	mov	r2, ip
 801484a:	bf16      	itet	ne
 801484c:	f103 33ff 	addne.w	r3, r3, #4294967295
 8014850:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 8014854:	b29b      	uxthne	r3, r3
 8014856:	f7ff fed5 	bl	8014604 <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 801485a:	7b43      	ldrb	r3, [r0, #13]
 801485c:	7a82      	ldrb	r2, [r0, #10]
 801485e:	005b      	lsls	r3, r3, #1
 8014860:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014864:	4313      	orrs	r3, r2
 8014866:	1af6      	subs	r6, r6, r3
 8014868:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 801486c:	7b61      	ldrb	r1, [r4, #13]
 801486e:	00cb      	lsls	r3, r1, #3
 8014870:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014874:	7a23      	ldrb	r3, [r4, #8]
 8014876:	4313      	orrs	r3, r2
 8014878:	064a      	lsls	r2, r1, #25
 801487a:	bf44      	itt	mi
 801487c:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014880:	b21b      	sxthmi	r3, r3
 8014882:	1bdb      	subs	r3, r3, r7
 8014884:	e719      	b.n	80146ba <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 8014886:	2300      	movs	r3, #0
 8014888:	e7a5      	b.n	80147d6 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 801488a:	bf00      	nop
 801488c:	3fc00079 	.word	0x3fc00079

08014890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 8014890:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8014894:	4604      	mov	r4, r0
 8014896:	b942      	cbnz	r2, 80148aa <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 8014898:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801489c:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80148a0:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80148a4:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80148a8:	e047      	b.n	801493a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80148aa:	7b51      	ldrb	r1, [r2, #13]
 80148ac:	8893      	ldrh	r3, [r2, #4]
 80148ae:	010d      	lsls	r5, r1, #4
 80148b0:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80148b4:	79d5      	ldrb	r5, [r2, #7]
 80148b6:	4305      	orrs	r5, r0
 80148b8:	2d04      	cmp	r5, #4
 80148ba:	bfcc      	ite	gt
 80148bc:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80148c0:	f04f 0e01 	movle.w	lr, #1
 80148c4:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80148c8:	f200 80ab 	bhi.w	8014a22 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80148cc:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80148d0:	4283      	cmp	r3, r0
 80148d2:	d216      	bcs.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148d4:	f240 605b 	movw	r0, #1627	@ 0x65b
 80148d8:	4283      	cmp	r3, r0
 80148da:	d859      	bhi.n	8014990 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 80148dc:	f240 6057 	movw	r0, #1623	@ 0x657
 80148e0:	4283      	cmp	r3, r0
 80148e2:	d20e      	bcs.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148e4:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80148e8:	d24a      	bcs.n	8014980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 80148ea:	f240 604e 	movw	r0, #1614	@ 0x64e
 80148ee:	4283      	cmp	r3, r0
 80148f0:	d207      	bcs.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80148f2:	f240 601a 	movw	r0, #1562	@ 0x61a
 80148f6:	4283      	cmp	r3, r0
 80148f8:	d02a      	beq.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80148fa:	d821      	bhi.n	8014940 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 80148fc:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8014900:	d35b      	bcc.n	80149ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014902:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 8014906:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801490a:	f040 80d0 	bne.w	8014aae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801490e:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 8014912:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014916:	f040 80ca 	bne.w	8014aae <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 801491a:	00cb      	lsls	r3, r1, #3
 801491c:	0649      	lsls	r1, r1, #25
 801491e:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014922:	7a13      	ldrb	r3, [r2, #8]
 8014924:	ea43 0300 	orr.w	r3, r3, r0
 8014928:	bf44      	itt	mi
 801492a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801492e:	b21b      	sxthmi	r3, r3
 8014930:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014934:	1b5d      	subs	r5, r3, r5
 8014936:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801493a:	4610      	mov	r0, r2
 801493c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014940:	f240 604b 	movw	r0, #1611	@ 0x64b
 8014944:	4283      	cmp	r3, r0
 8014946:	d338      	bcc.n	80149ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014948:	f240 604c 	movw	r0, #1612	@ 0x64c
 801494c:	4283      	cmp	r3, r0
 801494e:	d9d8      	bls.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014950:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 8014954:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8014958:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801495c:	f040 80f3 	bne.w	8014b46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014960:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014964:	f040 80ef 	bne.w	8014b46 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8014968:	00cb      	lsls	r3, r1, #3
 801496a:	064e      	lsls	r6, r1, #25
 801496c:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8014970:	7a13      	ldrb	r3, [r2, #8]
 8014972:	ea43 0300 	orr.w	r3, r3, r0
 8014976:	bf44      	itt	mi
 8014978:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 801497c:	b21b      	sxthmi	r3, r3
 801497e:	e7d9      	b.n	8014934 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 8014980:	f240 6054 	movw	r0, #1620	@ 0x654
 8014984:	4283      	cmp	r3, r0
 8014986:	d8e3      	bhi.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014988:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 801498c:	d9e0      	bls.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 801498e:	e7b8      	b.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014990:	f240 6074 	movw	r0, #1652	@ 0x674
 8014994:	4283      	cmp	r3, r0
 8014996:	d0b4      	beq.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014998:	d82d      	bhi.n	80149f6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 801499a:	f240 605e 	movw	r0, #1630	@ 0x65e
 801499e:	4283      	cmp	r3, r0
 80149a0:	d804      	bhi.n	80149ac <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80149a2:	f240 605d 	movw	r0, #1629	@ 0x65d
 80149a6:	4283      	cmp	r3, r0
 80149a8:	d3d2      	bcc.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80149aa:	e7aa      	b.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149ac:	f240 605f 	movw	r0, #1631	@ 0x65f
 80149b0:	4283      	cmp	r3, r0
 80149b2:	d0cd      	beq.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80149b4:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80149b8:	d0a3      	beq.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80149ba:	00cb      	lsls	r3, r1, #3
 80149bc:	0649      	lsls	r1, r1, #25
 80149be:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80149c2:	7a13      	ldrb	r3, [r2, #8]
 80149c4:	ea43 0300 	orr.w	r3, r3, r0
 80149c8:	bf44      	itt	mi
 80149ca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80149ce:	b21b      	sxthmi	r3, r3
 80149d0:	1b5d      	subs	r5, r3, r5
 80149d2:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80149d6:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 80149da:	7b53      	ldrb	r3, [r2, #13]
 80149dc:	015b      	lsls	r3, r3, #5
 80149de:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80149e2:	7993      	ldrb	r3, [r2, #6]
 80149e4:	430b      	orrs	r3, r1
 80149e6:	2105      	movs	r1, #5
 80149e8:	005b      	lsls	r3, r3, #1
 80149ea:	fb93 f3f1 	sdiv	r3, r3, r1
 80149ee:	f992 1009 	ldrsb.w	r1, [r2, #9]
 80149f2:	440b      	add	r3, r1
 80149f4:	e756      	b.n	80148a4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 80149f6:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 80149fa:	4283      	cmp	r3, r0
 80149fc:	d809      	bhi.n	8014a12 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 80149fe:	f240 60df 	movw	r0, #1759	@ 0x6df
 8014a02:	4283      	cmp	r3, r0
 8014a04:	f4bf af7d 	bcs.w	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a08:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8014a0c:	2b05      	cmp	r3, #5
 8014a0e:	d8d4      	bhi.n	80149ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014a10:	e777      	b.n	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a12:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 8014a16:	4283      	cmp	r3, r0
 8014a18:	d09a      	beq.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a1a:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8014a1e:	4283      	cmp	r3, r0
 8014a20:	e7ca      	b.n	80149b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 8014a22:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 8014a26:	d22b      	bcs.n	8014a80 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8014a28:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8014a2c:	4283      	cmp	r3, r0
 8014a2e:	d28f      	bcs.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a30:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 8014a34:	4283      	cmp	r3, r0
 8014a36:	d816      	bhi.n	8014a66 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8014a38:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8014a3c:	4283      	cmp	r3, r0
 8014a3e:	f4bf af60 	bcs.w	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a42:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 8014a46:	4283      	cmp	r3, r0
 8014a48:	d80a      	bhi.n	8014a60 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8014a4a:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8014a4e:	4283      	cmp	r3, r0
 8014a50:	f4bf af57 	bcs.w	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a54:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8014a58:	4283      	cmp	r3, r0
 8014a5a:	f43f af79 	beq.w	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a5e:	e7ac      	b.n	80149ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8014a60:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 8014a64:	e7f8      	b.n	8014a58 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 8014a66:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8014a6a:	4283      	cmp	r3, r0
 8014a6c:	d802      	bhi.n	8014a74 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8014a6e:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 8014a72:	e798      	b.n	80149a6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 8014a74:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 8014a78:	4283      	cmp	r3, r0
 8014a7a:	f47f af42 	bne.w	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014a7e:	e767      	b.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a80:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 8014a84:	4283      	cmp	r3, r0
 8014a86:	f43f af63 	beq.w	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014a8a:	d802      	bhi.n	8014a92 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 8014a8c:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 8014a90:	e7f2      	b.n	8014a78 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 8014a92:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 8014a96:	4283      	cmp	r3, r0
 8014a98:	d805      	bhi.n	8014aa6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 8014a9a:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 8014a9e:	4283      	cmp	r3, r0
 8014aa0:	f4ff af2f 	bcc.w	8014902 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8014aa4:	e754      	b.n	8014950 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8014aa6:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 8014aaa:	4283      	cmp	r3, r0
 8014aac:	e7af      	b.n	8014a0e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 8014aae:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014ab2:	4617      	mov	r7, r2
 8014ab4:	f102 0808 	add.w	r8, r2, #8
 8014ab8:	4666      	mov	r6, ip
 8014aba:	6838      	ldr	r0, [r7, #0]
 8014abc:	3708      	adds	r7, #8
 8014abe:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014ac2:	46e6      	mov	lr, ip
 8014ac4:	4547      	cmp	r7, r8
 8014ac6:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8014aca:	46f4      	mov	ip, lr
 8014acc:	d1f5      	bne.n	8014aba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 8014ace:	6838      	ldr	r0, [r7, #0]
 8014ad0:	f8ce 0000 	str.w	r0, [lr]
 8014ad4:	88b9      	ldrh	r1, [r7, #4]
 8014ad6:	f8ae 1004 	strh.w	r1, [lr, #4]
 8014ada:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014ade:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014ae2:	d009      	beq.n	8014af8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8014ae4:	7b51      	ldrb	r1, [r2, #13]
 8014ae6:	7992      	ldrb	r2, [r2, #6]
 8014ae8:	0149      	lsls	r1, r1, #5
 8014aea:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014aee:	4311      	orrs	r1, r2
 8014af0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014af4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014af8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014afc:	b2ad      	uxth	r5, r5
 8014afe:	d00d      	beq.n	8014b1c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8014b00:	442b      	add	r3, r5
 8014b02:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014b06:	b29b      	uxth	r3, r3
 8014b08:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014b0c:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014b10:	10db      	asrs	r3, r3, #3
 8014b12:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014b16:	4313      	orrs	r3, r2
 8014b18:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014b1c:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014b20:	00cb      	lsls	r3, r1, #3
 8014b22:	064f      	lsls	r7, r1, #25
 8014b24:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014b28:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014b2c:	ea43 0302 	orr.w	r3, r3, r2
 8014b30:	bf44      	itt	mi
 8014b32:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014b36:	b21b      	sxthmi	r3, r3
 8014b38:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8014b3c:	1b5b      	subs	r3, r3, r5
 8014b3e:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8014b42:	4632      	mov	r2, r6
 8014b44:	e6f9      	b.n	801493a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8014b46:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8014b4a:	4617      	mov	r7, r2
 8014b4c:	f102 0908 	add.w	r9, r2, #8
 8014b50:	4666      	mov	r6, ip
 8014b52:	6838      	ldr	r0, [r7, #0]
 8014b54:	3708      	adds	r7, #8
 8014b56:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8014b5a:	46e0      	mov	r8, ip
 8014b5c:	454f      	cmp	r7, r9
 8014b5e:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8014b62:	46c4      	mov	ip, r8
 8014b64:	d1f5      	bne.n	8014b52 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8014b66:	6838      	ldr	r0, [r7, #0]
 8014b68:	f8c8 0000 	str.w	r0, [r8]
 8014b6c:	88b9      	ldrh	r1, [r7, #4]
 8014b6e:	f8a8 1004 	strh.w	r1, [r8, #4]
 8014b72:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8014b76:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8014b7a:	d009      	beq.n	8014b90 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8014b7c:	7b51      	ldrb	r1, [r2, #13]
 8014b7e:	7992      	ldrb	r2, [r2, #6]
 8014b80:	0149      	lsls	r1, r1, #5
 8014b82:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8014b86:	4311      	orrs	r1, r2
 8014b88:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8014b8c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8014b90:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8014b94:	d00e      	beq.n	8014bb4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8014b96:	eba3 030e 	sub.w	r3, r3, lr
 8014b9a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8014b9e:	b29b      	uxth	r3, r3
 8014ba0:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8014ba4:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8014ba8:	10db      	asrs	r3, r3, #3
 8014baa:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8014bae:	4313      	orrs	r3, r2
 8014bb0:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8014bb4:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8014bb8:	00cb      	lsls	r3, r1, #3
 8014bba:	0648      	lsls	r0, r1, #25
 8014bbc:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8014bc0:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8014bc4:	ea43 0302 	orr.w	r3, r3, r2
 8014bc8:	bf44      	itt	mi
 8014bca:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014bce:	b21b      	sxthmi	r3, r3
 8014bd0:	1b5d      	subs	r5, r3, r5
 8014bd2:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8014bd6:	e7b4      	b.n	8014b42 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08014bd8 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8014bd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014bdc:	461e      	mov	r6, r3
 8014bde:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014be0:	4604      	mov	r4, r0
 8014be2:	4617      	mov	r7, r2
 8014be4:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8014be8:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014bec:	f7ef fba6 	bl	800433c <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8014bf0:	4605      	mov	r5, r0
 8014bf2:	b918      	cbnz	r0, 8014bfc <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8014bf4:	6030      	str	r0, [r6, #0]
 8014bf6:	4628      	mov	r0, r5
 8014bf8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014bfc:	683b      	ldr	r3, [r7, #0]
 8014bfe:	4601      	mov	r1, r0
 8014c00:	4638      	mov	r0, r7
 8014c02:	68db      	ldr	r3, [r3, #12]
 8014c04:	4798      	blx	r3
 8014c06:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8014c0a:	4602      	mov	r2, r0
 8014c0c:	6030      	str	r0, [r6, #0]
 8014c0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014c12:	d213      	bcs.n	8014c3c <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8014c14:	4643      	mov	r3, r8
 8014c16:	4639      	mov	r1, r7
 8014c18:	4620      	mov	r0, r4
 8014c1a:	f7ff fe39 	bl	8014890 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8014c1e:	6030      	str	r0, [r6, #0]
 8014c20:	6833      	ldr	r3, [r6, #0]
 8014c22:	b143      	cbz	r3, 8014c36 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8014c24:	7b5a      	ldrb	r2, [r3, #13]
 8014c26:	7a9b      	ldrb	r3, [r3, #10]
 8014c28:	0052      	lsls	r2, r2, #1
 8014c2a:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8014c2e:	4313      	orrs	r3, r2
 8014c30:	bf0c      	ite	eq
 8014c32:	2301      	moveq	r3, #1
 8014c34:	2300      	movne	r3, #0
 8014c36:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8014c3a:	e7dc      	b.n	8014bf6 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8014c3c:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8014c40:	b29b      	uxth	r3, r3
 8014c42:	2b7f      	cmp	r3, #127	@ 0x7f
 8014c44:	d804      	bhi.n	8014c50 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8014c46:	4639      	mov	r1, r7
 8014c48:	4620      	mov	r0, r4
 8014c4a:	f7ff fce7 	bl	801461c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8014c4e:	e7e6      	b.n	8014c1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8014c50:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d0e3      	beq.n	8014c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c58:	f640 1302 	movw	r3, #2306	@ 0x902
 8014c5c:	429d      	cmp	r5, r3
 8014c5e:	d1df      	bne.n	8014c20 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8014c60:	4601      	mov	r1, r0
 8014c62:	4620      	mov	r0, r4
 8014c64:	f7ff fcaa 	bl	80145bc <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8014c68:	e7d9      	b.n	8014c1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08014c6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8014c6a:	b510      	push	{r4, lr}
 8014c6c:	4604      	mov	r4, r0
 8014c6e:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8014c72:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014c74:	b1e1      	cbz	r1, 8014cb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014c76:	2b0a      	cmp	r3, #10
 8014c78:	d02d      	beq.n	8014cd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014c7a:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8014c7c:	3901      	subs	r1, #1
 8014c7e:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8014c82:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8014c84:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8014c88:	1c51      	adds	r1, r2, #1
 8014c8a:	b289      	uxth	r1, r1
 8014c8c:	2901      	cmp	r1, #1
 8014c8e:	bf8a      	itet	hi
 8014c90:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8014c94:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8014c96:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8014c98:	1c5a      	adds	r2, r3, #1
 8014c9a:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014c9c:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014c9e:	4413      	add	r3, r2
 8014ca0:	b29b      	uxth	r3, r3
 8014ca2:	2b09      	cmp	r3, #9
 8014ca4:	bf88      	it	hi
 8014ca6:	3b0a      	subhi	r3, #10
 8014ca8:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014cac:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014cae:	e7de      	b.n	8014c6e <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8014cb0:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014cb2:	2b0a      	cmp	r3, #10
 8014cb4:	d00f      	beq.n	8014cd6 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8014cb6:	4620      	mov	r0, r4
 8014cb8:	f7ff fc3f 	bl	801453a <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8014cbc:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8014cbe:	1c5a      	adds	r2, r3, #1
 8014cc0:	8722      	strh	r2, [r4, #56]	@ 0x38
 8014cc2:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014cc4:	4413      	add	r3, r2
 8014cc6:	b29b      	uxth	r3, r3
 8014cc8:	2b09      	cmp	r3, #9
 8014cca:	bf88      	it	hi
 8014ccc:	3b0a      	subhi	r3, #10
 8014cce:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014cd2:	8458      	strh	r0, [r3, #34]	@ 0x22
 8014cd4:	e7ec      	b.n	8014cb0 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8014cd6:	bd10      	pop	{r4, pc}

08014cd8 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8014cd8:	b538      	push	{r3, r4, r5, lr}
 8014cda:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8014cdc:	4604      	mov	r4, r0
 8014cde:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8014ce2:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8014ce4:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8014ce6:	3a01      	subs	r2, #1
 8014ce8:	8702      	strh	r2, [r0, #56]	@ 0x38
 8014cea:	1c5a      	adds	r2, r3, #1
 8014cec:	b292      	uxth	r2, r2
 8014cee:	2a09      	cmp	r2, #9
 8014cf0:	bf8a      	itet	hi
 8014cf2:	3b09      	subhi	r3, #9
 8014cf4:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8014cf6:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8014cf8:	f7ff ffb7 	bl	8014c6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8014cfc:	8c23      	ldrh	r3, [r4, #32]
 8014cfe:	2b01      	cmp	r3, #1
 8014d00:	bf9c      	itt	ls
 8014d02:	3301      	addls	r3, #1
 8014d04:	8423      	strhls	r3, [r4, #32]
 8014d06:	8be3      	ldrh	r3, [r4, #30]
 8014d08:	b90b      	cbnz	r3, 8014d0e <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8014d0a:	2302      	movs	r3, #2
 8014d0c:	83e3      	strh	r3, [r4, #30]
 8014d0e:	8be3      	ldrh	r3, [r4, #30]
 8014d10:	4628      	mov	r0, r5
 8014d12:	3b01      	subs	r3, #1
 8014d14:	b29b      	uxth	r3, r3
 8014d16:	83e3      	strh	r3, [r4, #30]
 8014d18:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8014d1c:	8365      	strh	r5, [r4, #26]
 8014d1e:	bd38      	pop	{r3, r4, r5, pc}

08014d20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8014d20:	428a      	cmp	r2, r1
 8014d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014d26:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8014d28:	d932      	bls.n	8014d90 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8014d2a:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8014d2c:	1a54      	subs	r4, r2, r1
 8014d2e:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8014d32:	19ee      	adds	r6, r5, r7
 8014d34:	fa1f fe84 	uxth.w	lr, r4
 8014d38:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8014d3c:	3e01      	subs	r6, #1
 8014d3e:	b2b4      	uxth	r4, r6
 8014d40:	eba4 090e 	sub.w	r9, r4, lr
 8014d44:	fa1f f989 	uxth.w	r9, r9
 8014d48:	2c09      	cmp	r4, #9
 8014d4a:	4626      	mov	r6, r4
 8014d4c:	bf88      	it	hi
 8014d4e:	f1a4 060a 	subhi.w	r6, r4, #10
 8014d52:	f1bc 0f00 	cmp.w	ip, #0
 8014d56:	f104 34ff 	add.w	r4, r4, #4294967295
 8014d5a:	bf08      	it	eq
 8014d5c:	f04f 0c02 	moveq.w	ip, #2
 8014d60:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8014d64:	b2a4      	uxth	r4, r4
 8014d66:	f10c 3cff 	add.w	ip, ip, #4294967295
 8014d6a:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8014d6e:	454c      	cmp	r4, r9
 8014d70:	fa1f fc8c 	uxth.w	ip, ip
 8014d74:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8014d78:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8014d7c:	d1e4      	bne.n	8014d48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8014d7e:	eba5 050e 	sub.w	r5, r5, lr
 8014d82:	eb0e 0408 	add.w	r4, lr, r8
 8014d86:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8014d8a:	8705      	strh	r5, [r0, #56]	@ 0x38
 8014d8c:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8014d90:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8014d92:	250a      	movs	r5, #10
 8014d94:	1a64      	subs	r4, r4, r1
 8014d96:	4439      	add	r1, r7
 8014d98:	b289      	uxth	r1, r1
 8014d9a:	8704      	strh	r4, [r0, #56]	@ 0x38
 8014d9c:	2909      	cmp	r1, #9
 8014d9e:	bf88      	it	hi
 8014da0:	390a      	subhi	r1, #10
 8014da2:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014da4:	b18a      	cbz	r2, 8014dca <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8014da6:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8014da8:	3a01      	subs	r2, #1
 8014daa:	3101      	adds	r1, #1
 8014dac:	b292      	uxth	r2, r2
 8014dae:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8014db2:	8701      	strh	r1, [r0, #56]	@ 0x38
 8014db4:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014db6:	b901      	cbnz	r1, 8014dba <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8014db8:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8014dba:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8014dbc:	3901      	subs	r1, #1
 8014dbe:	b289      	uxth	r1, r1
 8014dc0:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8014dc2:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8014dc6:	844c      	strh	r4, [r1, #34]	@ 0x22
 8014dc8:	e7ec      	b.n	8014da4 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8014dca:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014dce:	f7ff bf4c 	b.w	8014c6a <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08014dd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8014dd2:	b570      	push	{r4, r5, r6, lr}
 8014dd4:	2500      	movs	r5, #0
 8014dd6:	4295      	cmp	r5, r2
 8014dd8:	d011      	beq.n	8014dfe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8014dda:	8bc4      	ldrh	r4, [r0, #30]
 8014ddc:	f831 6b02 	ldrh.w	r6, [r1], #2
 8014de0:	4414      	add	r4, r2
 8014de2:	3c01      	subs	r4, #1
 8014de4:	1b64      	subs	r4, r4, r5
 8014de6:	b2a4      	uxth	r4, r4
 8014de8:	2c01      	cmp	r4, #1
 8014dea:	bf88      	it	hi
 8014dec:	3c02      	subhi	r4, #2
 8014dee:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8014df2:	8b64      	ldrh	r4, [r4, #26]
 8014df4:	42b4      	cmp	r4, r6
 8014df6:	d117      	bne.n	8014e28 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8014df8:	3501      	adds	r5, #1
 8014dfa:	b2ad      	uxth	r5, r5
 8014dfc:	e7eb      	b.n	8014dd6 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8014dfe:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8014e02:	2400      	movs	r4, #0
 8014e04:	4413      	add	r3, r2
 8014e06:	b2a2      	uxth	r2, r4
 8014e08:	429a      	cmp	r2, r3
 8014e0a:	da0f      	bge.n	8014e2c <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8014e0c:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8014e0e:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8014e12:	3401      	adds	r4, #1
 8014e14:	4432      	add	r2, r6
 8014e16:	b292      	uxth	r2, r2
 8014e18:	2a09      	cmp	r2, #9
 8014e1a:	bf88      	it	hi
 8014e1c:	3a0a      	subhi	r2, #10
 8014e1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8014e22:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8014e24:	42aa      	cmp	r2, r5
 8014e26:	d0ee      	beq.n	8014e06 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8014e28:	2000      	movs	r0, #0
 8014e2a:	bd70      	pop	{r4, r5, r6, pc}
 8014e2c:	2001      	movs	r0, #1
 8014e2e:	e7fc      	b.n	8014e2a <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08014e30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8014e30:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014e34:	4605      	mov	r5, r0
 8014e36:	4616      	mov	r6, r2
 8014e38:	1c8c      	adds	r4, r1, #2
 8014e3a:	8809      	ldrh	r1, [r1, #0]
 8014e3c:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8014e40:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8014e44:	42b3      	cmp	r3, r6
 8014e46:	d124      	bne.n	8014e92 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8014e48:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8014e4c:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8014e50:	f001 070f 	and.w	r7, r1, #15
 8014e54:	4652      	mov	r2, sl
 8014e56:	f8cd 8000 	str.w	r8, [sp]
 8014e5a:	464b      	mov	r3, r9
 8014e5c:	4621      	mov	r1, r4
 8014e5e:	4628      	mov	r0, r5
 8014e60:	f7ff ffb7 	bl	8014dd2 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8014e64:	4683      	mov	fp, r0
 8014e66:	b168      	cbz	r0, 8014e84 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8014e68:	eb0a 0109 	add.w	r1, sl, r9
 8014e6c:	463a      	mov	r2, r7
 8014e6e:	4628      	mov	r0, r5
 8014e70:	4441      	add	r1, r8
 8014e72:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8014e76:	4649      	mov	r1, r9
 8014e78:	f7ff ff52 	bl	8014d20 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8014e7c:	4658      	mov	r0, fp
 8014e7e:	b003      	add	sp, #12
 8014e80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014e84:	eb07 010a 	add.w	r1, r7, sl
 8014e88:	4449      	add	r1, r9
 8014e8a:	4441      	add	r1, r8
 8014e8c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8014e90:	e7d2      	b.n	8014e38 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8014e92:	f04f 0b00 	mov.w	fp, #0
 8014e96:	e7f1      	b.n	8014e7c <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08014e98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8014e98:	b570      	push	{r4, r5, r6, lr}
 8014e9a:	8810      	ldrh	r0, [r2, #0]
 8014e9c:	4298      	cmp	r0, r3
 8014e9e:	d817      	bhi.n	8014ed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014ea0:	1e48      	subs	r0, r1, #1
 8014ea2:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8014ea6:	4298      	cmp	r0, r3
 8014ea8:	d312      	bcc.n	8014ed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014eaa:	2400      	movs	r4, #0
 8014eac:	428c      	cmp	r4, r1
 8014eae:	d20f      	bcs.n	8014ed0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8014eb0:	1860      	adds	r0, r4, r1
 8014eb2:	1040      	asrs	r0, r0, #1
 8014eb4:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8014eb8:	0085      	lsls	r5, r0, #2
 8014eba:	42b3      	cmp	r3, r6
 8014ebc:	d902      	bls.n	8014ec4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8014ebe:	3001      	adds	r0, #1
 8014ec0:	b284      	uxth	r4, r0
 8014ec2:	e7f3      	b.n	8014eac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014ec4:	d201      	bcs.n	8014eca <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8014ec6:	b281      	uxth	r1, r0
 8014ec8:	e7f0      	b.n	8014eac <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8014eca:	442a      	add	r2, r5
 8014ecc:	8850      	ldrh	r0, [r2, #2]
 8014ece:	bd70      	pop	{r4, r5, r6, pc}
 8014ed0:	2000      	movs	r0, #0
 8014ed2:	e7fc      	b.n	8014ece <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08014ed4 <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8014ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014ed8:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8014eda:	4604      	mov	r4, r0
 8014edc:	260b      	movs	r6, #11
 8014ede:	886f      	ldrh	r7, [r5, #2]
 8014ee0:	087f      	lsrs	r7, r7, #1
 8014ee2:	3e01      	subs	r6, #1
 8014ee4:	d013      	beq.n	8014f0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014ee6:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8014ee8:	462a      	mov	r2, r5
 8014eea:	4639      	mov	r1, r7
 8014eec:	4620      	mov	r0, r4
 8014eee:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8014ef2:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8014ef6:	4643      	mov	r3, r8
 8014ef8:	f7ff ffce 	bl	8014e98 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8014efc:	b138      	cbz	r0, 8014f0e <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8014efe:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8014f02:	4642      	mov	r2, r8
 8014f04:	4620      	mov	r0, r4
 8014f06:	f7ff ff93 	bl	8014e30 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8014f0a:	2800      	cmp	r0, #0
 8014f0c:	d1e9      	bne.n	8014ee2 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8014f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08014f14 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8014f14:	b570      	push	{r4, r5, r6, lr}
 8014f16:	694a      	ldr	r2, [r1, #20]
 8014f18:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8014f1a:	684b      	ldr	r3, [r1, #4]
 8014f1c:	1b54      	subs	r4, r2, r5
 8014f1e:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8014f20:	f000 8106 	beq.w	8015130 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8014f24:	1b9b      	subs	r3, r3, r6
 8014f26:	d003      	beq.n	8014f30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8014f28:	4363      	muls	r3, r4
 8014f2a:	2210      	movs	r2, #16
 8014f2c:	fb93 f3f2 	sdiv	r3, r3, r2
 8014f30:	680c      	ldr	r4, [r1, #0]
 8014f32:	698a      	ldr	r2, [r1, #24]
 8014f34:	1b65      	subs	r5, r4, r5
 8014f36:	f000 80fd 	beq.w	8015134 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8014f3a:	1b92      	subs	r2, r2, r6
 8014f3c:	d003      	beq.n	8014f46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8014f3e:	436a      	muls	r2, r5
 8014f40:	2410      	movs	r4, #16
 8014f42:	fb92 f2f4 	sdiv	r2, r2, r4
 8014f46:	1a9b      	subs	r3, r3, r2
 8014f48:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8015170 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8014f4c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8014f50:	460a      	mov	r2, r1
 8014f52:	ee07 3a90 	vmov	s15, r3
 8014f56:	f100 040c 	add.w	r4, r0, #12
 8014f5a:	4603      	mov	r3, r0
 8014f5c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014f60:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014f64:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8014f68:	eeb1 6a43 	vneg.f32	s12, s6
 8014f6c:	edd2 7a02 	vldr	s15, [r2, #8]
 8014f70:	3214      	adds	r2, #20
 8014f72:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8014f76:	ece3 6a01 	vstmia	r3!, {s13}
 8014f7a:	429c      	cmp	r4, r3
 8014f7c:	ed52 7a02 	vldr	s15, [r2, #-8]
 8014f80:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f84:	edc3 7a02 	vstr	s15, [r3, #8]
 8014f88:	ed52 7a01 	vldr	s15, [r2, #-4]
 8014f8c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8014f90:	edc3 7a05 	vstr	s15, [r3, #20]
 8014f94:	d1ea      	bne.n	8014f6c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8014f96:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8014f98:	698b      	ldr	r3, [r1, #24]
 8014f9a:	edd0 4a02 	vldr	s9, [r0, #8]
 8014f9e:	1a9b      	subs	r3, r3, r2
 8014fa0:	edd0 3a00 	vldr	s7, [r0]
 8014fa4:	edd0 6a01 	vldr	s13, [r0, #4]
 8014fa8:	ee07 3a90 	vmov	s15, r3
 8014fac:	684b      	ldr	r3, [r1, #4]
 8014fae:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8014fb2:	ed90 5a05 	vldr	s10, [r0, #20]
 8014fb6:	1a9b      	subs	r3, r3, r2
 8014fb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014fbc:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8014fc0:	ed90 2a03 	vldr	s4, [r0, #12]
 8014fc4:	ee07 3a10 	vmov	s14, r3
 8014fc8:	edd0 5a04 	vldr	s11, [r0, #16]
 8014fcc:	ee67 7a84 	vmul.f32	s15, s15, s8
 8014fd0:	ed90 1a07 	vldr	s2, [r0, #28]
 8014fd4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8014fd8:	edd0 2a06 	vldr	s5, [r0, #24]
 8014fdc:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8014fe0:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8014fe4:	ee27 7a04 	vmul.f32	s14, s14, s8
 8014fe8:	ee32 5a45 	vsub.f32	s10, s4, s10
 8014fec:	eee6 7a87 	vfma.f32	s15, s13, s14
 8014ff0:	ee67 7a83 	vmul.f32	s15, s15, s6
 8014ff4:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8014ff8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8014ffa:	694a      	ldr	r2, [r1, #20]
 8014ffc:	1b13      	subs	r3, r2, r4
 8014ffe:	ee07 3a10 	vmov	s14, r3
 8015002:	680b      	ldr	r3, [r1, #0]
 8015004:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015008:	1b1b      	subs	r3, r3, r4
 801500a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801500e:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015012:	ee07 3a10 	vmov	s14, r3
 8015016:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801501a:	ee27 7a04 	vmul.f32	s14, s14, s8
 801501e:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015022:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015026:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 801502a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801502c:	698b      	ldr	r3, [r1, #24]
 801502e:	1a9b      	subs	r3, r3, r2
 8015030:	ee06 3a90 	vmov	s13, r3
 8015034:	684b      	ldr	r3, [r1, #4]
 8015036:	1a9b      	subs	r3, r3, r2
 8015038:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 801503c:	ee07 3a10 	vmov	s14, r3
 8015040:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015044:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015048:	ee65 6a66 	vnmul.f32	s13, s10, s13
 801504c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015050:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015054:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015058:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 801505c:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 801505e:	694a      	ldr	r2, [r1, #20]
 8015060:	1b13      	subs	r3, r2, r4
 8015062:	ee07 3a10 	vmov	s14, r3
 8015066:	680b      	ldr	r3, [r1, #0]
 8015068:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801506c:	1b1b      	subs	r3, r3, r4
 801506e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015072:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015076:	ee07 3a10 	vmov	s14, r3
 801507a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 801507e:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015082:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015086:	edd0 5a08 	vldr	s11, [r0, #32]
 801508a:	ee31 1a65 	vsub.f32	s2, s2, s11
 801508e:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015092:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015096:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 801509a:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801509c:	698b      	ldr	r3, [r1, #24]
 801509e:	1a9b      	subs	r3, r3, r2
 80150a0:	ee07 3a10 	vmov	s14, r3
 80150a4:	684b      	ldr	r3, [r1, #4]
 80150a6:	1a9b      	subs	r3, r3, r2
 80150a8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80150ac:	ee01 3a90 	vmov	s3, r3
 80150b0:	ee27 7a04 	vmul.f32	s14, s14, s8
 80150b4:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 80150b8:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 80150bc:	ee61 1a84 	vmul.f32	s3, s3, s8
 80150c0:	eea1 7a21 	vfma.f32	s14, s2, s3
 80150c4:	ee27 7a03 	vmul.f32	s14, s14, s6
 80150c8:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80150cc:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 80150ce:	694a      	ldr	r2, [r1, #20]
 80150d0:	1b13      	subs	r3, r2, r4
 80150d2:	ee03 3a10 	vmov	s6, r3
 80150d6:	680b      	ldr	r3, [r1, #0]
 80150d8:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80150dc:	1b1b      	subs	r3, r3, r4
 80150de:	ee23 3a04 	vmul.f32	s6, s6, s8
 80150e2:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 80150e6:	ee03 3a10 	vmov	s6, r3
 80150ea:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 80150ee:	ee23 4a04 	vmul.f32	s8, s6, s8
 80150f2:	eee1 5a04 	vfma.f32	s11, s2, s8
 80150f6:	ee25 6a86 	vmul.f32	s12, s11, s12
 80150fa:	ee62 5a67 	vnmul.f32	s11, s4, s15
 80150fe:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 8015102:	eee3 5aa6 	vfma.f32	s11, s7, s13
 8015106:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 801510a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801510e:	dd13      	ble.n	8015138 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8015110:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015114:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8015118:	63c3      	str	r3, [r0, #60]	@ 0x3c
 801511a:	eee3 7a87 	vfma.f32	s15, s7, s14
 801511e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8015122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015126:	dd15      	ble.n	8015154 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8015128:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801512c:	6403      	str	r3, [r0, #64]	@ 0x40
 801512e:	bd70      	pop	{r4, r5, r6, pc}
 8015130:	4623      	mov	r3, r4
 8015132:	e6fd      	b.n	8014f30 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015134:	462a      	mov	r2, r5
 8015136:	e706      	b.n	8014f46 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015138:	d502      	bpl.n	8015140 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 801513a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801513e:	e7e9      	b.n	8015114 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8015140:	ee22 2a64 	vnmul.f32	s4, s4, s9
 8015144:	eea3 2a85 	vfma.f32	s4, s7, s10
 8015148:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 801514c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8015150:	dade      	bge.n	8015110 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 8015152:	e7f2      	b.n	801513a <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 8015154:	d502      	bpl.n	801515c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 8015156:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801515a:	e7e7      	b.n	801512c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 801515c:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8015160:	eee3 4a86 	vfma.f32	s9, s7, s12
 8015164:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8015168:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801516c:	dadc      	bge.n	8015128 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 801516e:	e7f2      	b.n	8015156 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8015170:	3d800000 	.word	0x3d800000

08015174 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 8015174:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015178:	2714      	movs	r7, #20
 801517a:	435f      	muls	r7, r3
 801517c:	eb02 0c07 	add.w	ip, r2, r7
 8015180:	f8dc 5004 	ldr.w	r5, [ip, #4]
 8015184:	f115 0e0f 	adds.w	lr, r5, #15
 8015188:	f100 80a2 	bmi.w	80152d0 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 801518c:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 8015190:	9c08      	ldr	r4, [sp, #32]
 8015192:	2614      	movs	r6, #20
 8015194:	f8c0 e014 	str.w	lr, [r0, #20]
 8015198:	4366      	muls	r6, r4
 801519a:	eb02 0806 	add.w	r8, r2, r6
 801519e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80151a2:	f115 040f 	adds.w	r4, r5, #15
 80151a6:	f100 809f 	bmi.w	80152e8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80151aa:	1124      	asrs	r4, r4, #4
 80151ac:	eba4 040e 	sub.w	r4, r4, lr
 80151b0:	6184      	str	r4, [r0, #24]
 80151b2:	2c00      	cmp	r4, #0
 80151b4:	f000 808a 	beq.w	80152cc <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80151b8:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80151bc:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80151c0:	5995      	ldr	r5, [r2, r6]
 80151c2:	eba4 0809 	sub.w	r8, r4, r9
 80151c6:	59d4      	ldr	r4, [r2, r7]
 80151c8:	eba5 0a04 	sub.w	sl, r5, r4
 80151cc:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80151d0:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80151d4:	fb0e fe05 	mul.w	lr, lr, r5
 80151d8:	fb0a ee19 	mls	lr, sl, r9, lr
 80151dc:	fb08 e404 	mla	r4, r8, r4, lr
 80151e0:	3c01      	subs	r4, #1
 80151e2:	19a4      	adds	r4, r4, r6
 80151e4:	f100 808c 	bmi.w	8015300 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 80151e8:	fb94 fef6 	sdiv	lr, r4, r6
 80151ec:	fb06 441e 	mls	r4, r6, lr, r4
 80151f0:	f8c0 e000 	str.w	lr, [r0]
 80151f4:	6104      	str	r4, [r0, #16]
 80151f6:	2d00      	cmp	r5, #0
 80151f8:	f2c0 8095 	blt.w	8015326 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 80151fc:	fb95 f4f6 	sdiv	r4, r5, r6
 8015200:	fb06 5514 	mls	r5, r6, r4, r5
 8015204:	6044      	str	r4, [r0, #4]
 8015206:	6085      	str	r5, [r0, #8]
 8015208:	60c6      	str	r6, [r0, #12]
 801520a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801520e:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8015212:	6945      	ldr	r5, [r0, #20]
 8015214:	59d2      	ldr	r2, [r2, r7]
 8015216:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 801521a:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8015348 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 801521e:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8015222:	ee07 4a10 	vmov	s14, r4
 8015226:	6804      	ldr	r4, [r0, #0]
 8015228:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 801522c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015230:	ee07 2a90 	vmov	s15, r2
 8015234:	ee27 7a26 	vmul.f32	s14, s14, s13
 8015238:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801523c:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015240:	edd3 6a00 	vldr	s13, [r3]
 8015244:	eee6 6a07 	vfma.f32	s13, s12, s14
 8015248:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 801524c:	eee6 6a27 	vfma.f32	s13, s12, s15
 8015250:	edc0 6a07 	vstr	s13, [r0, #28]
 8015254:	edd0 6a01 	vldr	s13, [r0, #4]
 8015258:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 801525c:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015260:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 8015264:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015268:	ed80 6a08 	vstr	s12, [r0, #32]
 801526c:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 801526e:	6242      	str	r2, [r0, #36]	@ 0x24
 8015270:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 8015274:	ed93 6a03 	vldr	s12, [r3, #12]
 8015278:	eea5 6a87 	vfma.f32	s12, s11, s14
 801527c:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 8015280:	eea5 6aa7 	vfma.f32	s12, s11, s15
 8015284:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 8015288:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 801528c:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 8015290:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8015294:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 8015298:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 801529a:	6302      	str	r2, [r0, #48]	@ 0x30
 801529c:	ed93 6a06 	vldr	s12, [r3, #24]
 80152a0:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80152a4:	eea5 6a87 	vfma.f32	s12, s11, s14
 80152a8:	eeb0 7a46 	vmov.f32	s14, s12
 80152ac:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80152b0:	eea6 7a27 	vfma.f32	s14, s12, s15
 80152b4:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80152b8:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80152bc:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80152c0:	eee6 7a87 	vfma.f32	s15, s13, s14
 80152c4:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80152c8:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80152ca:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80152cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80152d0:	2410      	movs	r4, #16
 80152d2:	f1c5 0501 	rsb	r5, r5, #1
 80152d6:	fb9e fef4 	sdiv	lr, lr, r4
 80152da:	f015 050f 	ands.w	r5, r5, #15
 80152de:	bf18      	it	ne
 80152e0:	2501      	movne	r5, #1
 80152e2:	ebae 0e05 	sub.w	lr, lr, r5
 80152e6:	e753      	b.n	8015190 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 80152e8:	f04f 0910 	mov.w	r9, #16
 80152ec:	f1c5 0501 	rsb	r5, r5, #1
 80152f0:	fb94 f4f9 	sdiv	r4, r4, r9
 80152f4:	f015 050f 	ands.w	r5, r5, #15
 80152f8:	bf18      	it	ne
 80152fa:	2501      	movne	r5, #1
 80152fc:	1b64      	subs	r4, r4, r5
 80152fe:	e755      	b.n	80151ac <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8015300:	4264      	negs	r4, r4
 8015302:	fb94 fef6 	sdiv	lr, r4, r6
 8015306:	f1ce 0800 	rsb	r8, lr, #0
 801530a:	fb06 441e 	mls	r4, r6, lr, r4
 801530e:	f8c0 8000 	str.w	r8, [r0]
 8015312:	6104      	str	r4, [r0, #16]
 8015314:	2c00      	cmp	r4, #0
 8015316:	f43f af6e 	beq.w	80151f6 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 801531a:	ea6f 0e0e 	mvn.w	lr, lr
 801531e:	1b34      	subs	r4, r6, r4
 8015320:	f8c0 e000 	str.w	lr, [r0]
 8015324:	e766      	b.n	80151f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 8015326:	426d      	negs	r5, r5
 8015328:	fb95 f4f6 	sdiv	r4, r5, r6
 801532c:	f1c4 0e00 	rsb	lr, r4, #0
 8015330:	fb06 5514 	mls	r5, r6, r4, r5
 8015334:	f8c0 e004 	str.w	lr, [r0, #4]
 8015338:	6085      	str	r5, [r0, #8]
 801533a:	2d00      	cmp	r5, #0
 801533c:	f43f af64 	beq.w	8015208 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8015340:	43e4      	mvns	r4, r4
 8015342:	1b75      	subs	r5, r6, r5
 8015344:	6044      	str	r4, [r0, #4]
 8015346:	e75e      	b.n	8015206 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8015348:	3d800000 	.word	0x3d800000

0801534c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 801534c:	4b01      	ldr	r3, [pc, #4]	@ (8015354 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 801534e:	6018      	str	r0, [r3, #0]
 8015350:	4770      	bx	lr
 8015352:	bf00      	nop
 8015354:	24024964 	.word	0x24024964

08015358 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8015358:	4b06      	ldr	r3, [pc, #24]	@ (8015374 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 801535a:	881a      	ldrh	r2, [r3, #0]
 801535c:	4282      	cmp	r2, r0
 801535e:	d807      	bhi.n	8015370 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8015360:	4b05      	ldr	r3, [pc, #20]	@ (8015378 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 8015362:	881b      	ldrh	r3, [r3, #0]
 8015364:	4413      	add	r3, r2
 8015366:	4298      	cmp	r0, r3
 8015368:	bfac      	ite	ge
 801536a:	2000      	movge	r0, #0
 801536c:	2001      	movlt	r0, #1
 801536e:	4770      	bx	lr
 8015370:	2000      	movs	r0, #0
 8015372:	4770      	bx	lr
 8015374:	24024984 	.word	0x24024984
 8015378:	24024988 	.word	0x24024988

0801537c <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 801537c:	b508      	push	{r3, lr}
 801537e:	4601      	mov	r1, r0
 8015380:	f7ff ffea 	bl	8015358 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8015384:	b118      	cbz	r0, 801538e <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 8015386:	4b02      	ldr	r3, [pc, #8]	@ (8015390 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 8015388:	681b      	ldr	r3, [r3, #0]
 801538a:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 801538e:	bd08      	pop	{r3, pc}
 8015390:	24024968 	.word	0x24024968

08015394 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 8015394:	b538      	push	{r3, r4, r5, lr}
 8015396:	4604      	mov	r4, r0
 8015398:	f7ff ffde 	bl	8015358 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 801539c:	b1d8      	cbz	r0, 80153d6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 801539e:	4b0f      	ldr	r3, [pc, #60]	@ (80153dc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 80153a0:	881b      	ldrh	r3, [r3, #0]
 80153a2:	1ae4      	subs	r4, r4, r3
 80153a4:	230e      	movs	r3, #14
 80153a6:	4363      	muls	r3, r4
 80153a8:	4c0d      	ldr	r4, [pc, #52]	@ (80153e0 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 80153aa:	6825      	ldr	r5, [r4, #0]
 80153ac:	18ea      	adds	r2, r5, r3
 80153ae:	7b12      	ldrb	r2, [r2, #12]
 80153b0:	f012 0220 	ands.w	r2, r2, #32
 80153b4:	d010      	beq.n	80153d8 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80153b6:	f9b1 2000 	ldrsh.w	r2, [r1]
 80153ba:	52ea      	strh	r2, [r5, r3]
 80153bc:	6822      	ldr	r2, [r4, #0]
 80153be:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80153c2:	441a      	add	r2, r3
 80153c4:	8055      	strh	r5, [r2, #2]
 80153c6:	6822      	ldr	r2, [r4, #0]
 80153c8:	4413      	add	r3, r2
 80153ca:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80153ce:	809a      	strh	r2, [r3, #4]
 80153d0:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80153d4:	80da      	strh	r2, [r3, #6]
 80153d6:	bd38      	pop	{r3, r4, r5, pc}
 80153d8:	4610      	mov	r0, r2
 80153da:	e7fc      	b.n	80153d6 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80153dc:	24024984 	.word	0x24024984
 80153e0:	2402496c 	.word	0x2402496c

080153e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 80153e4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 80153e8:	4606      	mov	r6, r0
 80153ea:	460c      	mov	r4, r1
 80153ec:	f7ff ffb4 	bl	8015358 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80153f0:	b918      	cbnz	r0, 80153fa <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 80153f2:	2000      	movs	r0, #0
 80153f4:	b002      	add	sp, #8
 80153f6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80153fa:	4608      	mov	r0, r1
 80153fc:	f7f8 fe29 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 8015400:	2800      	cmp	r0, #0
 8015402:	d1f6      	bne.n	80153f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015404:	4b3f      	ldr	r3, [pc, #252]	@ (8015504 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 8015406:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8015508 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 801540a:	881d      	ldrh	r5, [r3, #0]
 801540c:	f8d9 a000 	ldr.w	sl, [r9]
 8015410:	46c8      	mov	r8, r9
 8015412:	1b73      	subs	r3, r6, r5
 8015414:	250e      	movs	r5, #14
 8015416:	435d      	muls	r5, r3
 8015418:	eb0a 0705 	add.w	r7, sl, r5
 801541c:	7b3b      	ldrb	r3, [r7, #12]
 801541e:	f013 0f20 	tst.w	r3, #32
 8015422:	d0e6      	beq.n	80153f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8015424:	4621      	mov	r1, r4
 8015426:	4638      	mov	r0, r7
 8015428:	f7fc fffe 	bl	8012428 <_ZNK8touchgfx4Rect8includesERKS0_>
 801542c:	2800      	cmp	r0, #0
 801542e:	d1e1      	bne.n	80153f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015430:	4639      	mov	r1, r7
 8015432:	4620      	mov	r0, r4
 8015434:	f7fc fff8 	bl	8012428 <_ZNK8touchgfx4Rect8includesERKS0_>
 8015438:	b108      	cbz	r0, 801543e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 801543a:	4621      	mov	r1, r4
 801543c:	e020      	b.n	8015480 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 801543e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015442:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 8015446:	429a      	cmp	r2, r3
 8015448:	d11e      	bne.n	8015488 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801544a:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 801544e:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8015452:	429a      	cmp	r2, r3
 8015454:	d118      	bne.n	8015488 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8015456:	6820      	ldr	r0, [r4, #0]
 8015458:	466b      	mov	r3, sp
 801545a:	6861      	ldr	r1, [r4, #4]
 801545c:	c303      	stmia	r3!, {r0, r1}
 801545e:	4639      	mov	r1, r7
 8015460:	4668      	mov	r0, sp
 8015462:	f7fd f807 	bl	8012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8015466:	f8d9 3000 	ldr.w	r3, [r9]
 801546a:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801546e:	442b      	add	r3, r5
 8015470:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8015474:	4413      	add	r3, r2
 8015476:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 801547a:	4293      	cmp	r3, r2
 801547c:	dc04      	bgt.n	8015488 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801547e:	4669      	mov	r1, sp
 8015480:	4630      	mov	r0, r6
 8015482:	f7ff ff87 	bl	8015394 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 8015486:	e7b5      	b.n	80153f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8015488:	f8d8 3000 	ldr.w	r3, [r8]
 801548c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8015490:	442b      	add	r3, r5
 8015492:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8015496:	4291      	cmp	r1, r2
 8015498:	d119      	bne.n	80154ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 801549a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801549e:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80154a2:	4291      	cmp	r1, r2
 80154a4:	d113      	bne.n	80154ce <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80154a6:	6820      	ldr	r0, [r4, #0]
 80154a8:	466a      	mov	r2, sp
 80154aa:	6861      	ldr	r1, [r4, #4]
 80154ac:	c203      	stmia	r2!, {r0, r1}
 80154ae:	4619      	mov	r1, r3
 80154b0:	4668      	mov	r0, sp
 80154b2:	f7fc ffdf 	bl	8012474 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80154b6:	f8d8 3000 	ldr.w	r3, [r8]
 80154ba:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80154be:	442b      	add	r3, r5
 80154c0:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80154c4:	4413      	add	r3, r2
 80154c6:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80154ca:	4293      	cmp	r3, r2
 80154cc:	ddd7      	ble.n	801547e <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80154ce:	4620      	mov	r0, r4
 80154d0:	f7f8 fdbf 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154d4:	b990      	cbnz	r0, 80154fc <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80154d6:	88a7      	ldrh	r7, [r4, #4]
 80154d8:	88e3      	ldrh	r3, [r4, #6]
 80154da:	fb17 f703 	smulbb	r7, r7, r3
 80154de:	f8d8 3000 	ldr.w	r3, [r8]
 80154e2:	441d      	add	r5, r3
 80154e4:	4628      	mov	r0, r5
 80154e6:	f7f8 fdb4 	bl	800e052 <_ZNK8touchgfx4Rect7isEmptyEv>
 80154ea:	b948      	cbnz	r0, 8015500 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 80154ec:	88ab      	ldrh	r3, [r5, #4]
 80154ee:	88ea      	ldrh	r2, [r5, #6]
 80154f0:	fb13 f302 	smulbb	r3, r3, r2
 80154f4:	42bb      	cmp	r3, r7
 80154f6:	f6bf af7c 	bge.w	80153f2 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 80154fa:	e79e      	b.n	801543a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 80154fc:	2700      	movs	r7, #0
 80154fe:	e7ee      	b.n	80154de <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8015500:	2300      	movs	r3, #0
 8015502:	e7f7      	b.n	80154f4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 8015504:	24024984 	.word	0x24024984
 8015508:	2402496c 	.word	0x2402496c

0801550c <_ZN8touchgfx6Bitmap10clearCacheEv>:
 801550c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801550e:	4c24      	ldr	r4, [pc, #144]	@ (80155a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8015510:	6823      	ldr	r3, [r4, #0]
 8015512:	2b00      	cmp	r3, #0
 8015514:	d042      	beq.n	801559c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 8015516:	4a23      	ldr	r2, [pc, #140]	@ (80155a4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8015518:	4d23      	ldr	r5, [pc, #140]	@ (80155a8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 801551a:	8811      	ldrh	r1, [r2, #0]
 801551c:	f8b5 c000 	ldrh.w	ip, [r5]
 8015520:	4822      	ldr	r0, [pc, #136]	@ (80155ac <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 8015522:	4461      	add	r1, ip
 8015524:	1c4a      	adds	r2, r1, #1
 8015526:	008f      	lsls	r7, r1, #2
 8015528:	f022 0201 	bic.w	r2, r2, #1
 801552c:	19de      	adds	r6, r3, r7
 801552e:	0412      	lsls	r2, r2, #16
 8015530:	6006      	str	r6, [r0, #0]
 8015532:	4e1f      	ldr	r6, [pc, #124]	@ (80155b0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 8015534:	0c12      	lsrs	r2, r2, #16
 8015536:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 801553a:	19da      	adds	r2, r3, r7
 801553c:	6032      	str	r2, [r6, #0]
 801553e:	220e      	movs	r2, #14
 8015540:	fb02 f20c 	mul.w	r2, r2, ip
 8015544:	3203      	adds	r2, #3
 8015546:	f022 0203 	bic.w	r2, r2, #3
 801554a:	443a      	add	r2, r7
 801554c:	4f19      	ldr	r7, [pc, #100]	@ (80155b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 801554e:	4413      	add	r3, r2
 8015550:	603b      	str	r3, [r7, #0]
 8015552:	2300      	movs	r3, #0
 8015554:	4f18      	ldr	r7, [pc, #96]	@ (80155b8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 8015556:	469c      	mov	ip, r3
 8015558:	803b      	strh	r3, [r7, #0]
 801555a:	4f18      	ldr	r7, [pc, #96]	@ (80155bc <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 801555c:	683f      	ldr	r7, [r7, #0]
 801555e:	1aba      	subs	r2, r7, r2
 8015560:	4f17      	ldr	r7, [pc, #92]	@ (80155c0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 8015562:	603a      	str	r2, [r7, #0]
 8015564:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8015568:	4a16      	ldr	r2, [pc, #88]	@ (80155c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 801556a:	8013      	strh	r3, [r2, #0]
 801556c:	428b      	cmp	r3, r1
 801556e:	d10d      	bne.n	801558c <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8015570:	882d      	ldrh	r5, [r5, #0]
 8015572:	2300      	movs	r3, #0
 8015574:	6830      	ldr	r0, [r6, #0]
 8015576:	240e      	movs	r4, #14
 8015578:	429d      	cmp	r5, r3
 801557a:	d90f      	bls.n	801559c <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801557c:	fb04 0203 	mla	r2, r4, r3, r0
 8015580:	3301      	adds	r3, #1
 8015582:	7b11      	ldrb	r1, [r2, #12]
 8015584:	f36f 1145 	bfc	r1, #5, #1
 8015588:	7311      	strb	r1, [r2, #12]
 801558a:	e7f5      	b.n	8015578 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 801558c:	6822      	ldr	r2, [r4, #0]
 801558e:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 8015592:	6802      	ldr	r2, [r0, #0]
 8015594:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 8015598:	3301      	adds	r3, #1
 801559a:	e7e7      	b.n	801556c <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 801559c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801559e:	bf00      	nop
 80155a0:	24024968 	.word	0x24024968
 80155a4:	24024984 	.word	0x24024984
 80155a8:	24024988 	.word	0x24024988
 80155ac:	2402497c 	.word	0x2402497c
 80155b0:	2402496c 	.word	0x2402496c
 80155b4:	24024974 	.word	0x24024974
 80155b8:	24024986 	.word	0x24024986
 80155bc:	24024970 	.word	0x24024970
 80155c0:	24024980 	.word	0x24024980
 80155c4:	24024978 	.word	0x24024978

080155c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80155c8:	4b06      	ldr	r3, [pc, #24]	@ (80155e4 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80155ca:	681b      	ldr	r3, [r3, #0]
 80155cc:	b943      	cbnz	r3, 80155e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80155ce:	b139      	cbz	r1, 80155e0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80155d0:	4b05      	ldr	r3, [pc, #20]	@ (80155e8 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80155d2:	801a      	strh	r2, [r3, #0]
 80155d4:	4b05      	ldr	r3, [pc, #20]	@ (80155ec <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80155d6:	6019      	str	r1, [r3, #0]
 80155d8:	4b05      	ldr	r3, [pc, #20]	@ (80155f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 80155da:	6018      	str	r0, [r3, #0]
 80155dc:	f7ff bf96 	b.w	801550c <_ZN8touchgfx6Bitmap10clearCacheEv>
 80155e0:	4770      	bx	lr
 80155e2:	bf00      	nop
 80155e4:	24024974 	.word	0x24024974
 80155e8:	24024988 	.word	0x24024988
 80155ec:	24024970 	.word	0x24024970
 80155f0:	24024968 	.word	0x24024968

080155f4 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 80155f4:	b470      	push	{r4, r5, r6}
 80155f6:	4c07      	ldr	r4, [pc, #28]	@ (8015614 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 80155f8:	4605      	mov	r5, r0
 80155fa:	4610      	mov	r0, r2
 80155fc:	9a03      	ldr	r2, [sp, #12]
 80155fe:	6826      	ldr	r6, [r4, #0]
 8015600:	b936      	cbnz	r6, 8015610 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 8015602:	6025      	str	r5, [r4, #0]
 8015604:	4c04      	ldr	r4, [pc, #16]	@ (8015618 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 8015606:	8021      	strh	r1, [r4, #0]
 8015608:	4619      	mov	r1, r3
 801560a:	bc70      	pop	{r4, r5, r6}
 801560c:	f7ff bfdc 	b.w	80155c8 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8015610:	bc70      	pop	{r4, r5, r6}
 8015612:	4770      	bx	lr
 8015614:	2402498c 	.word	0x2402498c
 8015618:	24024984 	.word	0x24024984

0801561c <_ZNK8touchgfx6Bitmap8getWidthEv>:
 801561c:	4a12      	ldr	r2, [pc, #72]	@ (8015668 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 801561e:	8803      	ldrh	r3, [r0, #0]
 8015620:	8812      	ldrh	r2, [r2, #0]
 8015622:	4293      	cmp	r3, r2
 8015624:	d207      	bcs.n	8015636 <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 8015626:	4a11      	ldr	r2, [pc, #68]	@ (801566c <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8015628:	2114      	movs	r1, #20
 801562a:	6812      	ldr	r2, [r2, #0]
 801562c:	fb01 2303 	mla	r3, r1, r3, r2
 8015630:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 8015634:	4770      	bx	lr
 8015636:	490e      	ldr	r1, [pc, #56]	@ (8015670 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8015638:	8809      	ldrh	r1, [r1, #0]
 801563a:	4411      	add	r1, r2
 801563c:	428b      	cmp	r3, r1
 801563e:	da04      	bge.n	801564a <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8015640:	1a9b      	subs	r3, r3, r2
 8015642:	4a0c      	ldr	r2, [pc, #48]	@ (8015674 <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 8015644:	210e      	movs	r1, #14
 8015646:	6812      	ldr	r2, [r2, #0]
 8015648:	e7f0      	b.n	801562c <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 801564a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801564e:	4293      	cmp	r3, r2
 8015650:	d108      	bne.n	8015664 <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 8015652:	4b09      	ldr	r3, [pc, #36]	@ (8015678 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 8015654:	781b      	ldrb	r3, [r3, #0]
 8015656:	b91b      	cbnz	r3, 8015660 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8015658:	4b08      	ldr	r3, [pc, #32]	@ (801567c <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 801565a:	f9b3 0000 	ldrsh.w	r0, [r3]
 801565e:	4770      	bx	lr
 8015660:	4b07      	ldr	r3, [pc, #28]	@ (8015680 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 8015662:	e7fa      	b.n	801565a <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 8015664:	2000      	movs	r0, #0
 8015666:	4770      	bx	lr
 8015668:	24024984 	.word	0x24024984
 801566c:	2402498c 	.word	0x2402498c
 8015670:	24024988 	.word	0x24024988
 8015674:	2402496c 	.word	0x2402496c
 8015678:	240248f4 	.word	0x240248f4
 801567c:	240248f6 	.word	0x240248f6
 8015680:	240248f8 	.word	0x240248f8

08015684 <_ZNK8touchgfx6Bitmap9getHeightEv>:
 8015684:	4a12      	ldr	r2, [pc, #72]	@ (80156d0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 8015686:	8803      	ldrh	r3, [r0, #0]
 8015688:	8812      	ldrh	r2, [r2, #0]
 801568a:	4293      	cmp	r3, r2
 801568c:	d207      	bcs.n	801569e <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 801568e:	4a11      	ldr	r2, [pc, #68]	@ (80156d4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 8015690:	2114      	movs	r1, #20
 8015692:	6812      	ldr	r2, [r2, #0]
 8015694:	fb01 2303 	mla	r3, r1, r3, r2
 8015698:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 801569c:	4770      	bx	lr
 801569e:	490e      	ldr	r1, [pc, #56]	@ (80156d8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80156a0:	8809      	ldrh	r1, [r1, #0]
 80156a2:	4411      	add	r1, r2
 80156a4:	428b      	cmp	r3, r1
 80156a6:	da04      	bge.n	80156b2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80156a8:	1a9b      	subs	r3, r3, r2
 80156aa:	4a0c      	ldr	r2, [pc, #48]	@ (80156dc <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80156ac:	210e      	movs	r1, #14
 80156ae:	6812      	ldr	r2, [r2, #0]
 80156b0:	e7f0      	b.n	8015694 <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80156b2:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80156b6:	4293      	cmp	r3, r2
 80156b8:	d108      	bne.n	80156cc <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80156ba:	4b09      	ldr	r3, [pc, #36]	@ (80156e0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80156bc:	781b      	ldrb	r3, [r3, #0]
 80156be:	b91b      	cbnz	r3, 80156c8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80156c0:	4b08      	ldr	r3, [pc, #32]	@ (80156e4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80156c2:	f9b3 0000 	ldrsh.w	r0, [r3]
 80156c6:	4770      	bx	lr
 80156c8:	4b07      	ldr	r3, [pc, #28]	@ (80156e8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80156ca:	e7fa      	b.n	80156c2 <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80156cc:	2000      	movs	r0, #0
 80156ce:	4770      	bx	lr
 80156d0:	24024984 	.word	0x24024984
 80156d4:	2402498c 	.word	0x2402498c
 80156d8:	24024988 	.word	0x24024988
 80156dc:	2402496c 	.word	0x2402496c
 80156e0:	240248f4 	.word	0x240248f4
 80156e4:	240248f8 	.word	0x240248f8
 80156e8:	240248f6 	.word	0x240248f6

080156ec <_ZNK8touchgfx6Bitmap7getDataEv>:
 80156ec:	4a12      	ldr	r2, [pc, #72]	@ (8015738 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 80156ee:	8803      	ldrh	r3, [r0, #0]
 80156f0:	8811      	ldrh	r1, [r2, #0]
 80156f2:	428b      	cmp	r3, r1
 80156f4:	d20b      	bcs.n	801570e <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 80156f6:	4a11      	ldr	r2, [pc, #68]	@ (801573c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 80156f8:	6812      	ldr	r2, [r2, #0]
 80156fa:	b112      	cbz	r2, 8015702 <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 80156fc:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015700:	b9c0      	cbnz	r0, 8015734 <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 8015702:	4a0f      	ldr	r2, [pc, #60]	@ (8015740 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 8015704:	6811      	ldr	r1, [r2, #0]
 8015706:	2214      	movs	r2, #20
 8015708:	4353      	muls	r3, r2
 801570a:	58c8      	ldr	r0, [r1, r3]
 801570c:	4770      	bx	lr
 801570e:	4a0d      	ldr	r2, [pc, #52]	@ (8015744 <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8015710:	8812      	ldrh	r2, [r2, #0]
 8015712:	440a      	add	r2, r1
 8015714:	4293      	cmp	r3, r2
 8015716:	da04      	bge.n	8015722 <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8015718:	4a08      	ldr	r2, [pc, #32]	@ (801573c <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 801571a:	6812      	ldr	r2, [r2, #0]
 801571c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8015720:	4770      	bx	lr
 8015722:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8015726:	4293      	cmp	r3, r2
 8015728:	d103      	bne.n	8015732 <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 801572a:	4b07      	ldr	r3, [pc, #28]	@ (8015748 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 801572c:	681b      	ldr	r3, [r3, #0]
 801572e:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8015730:	4770      	bx	lr
 8015732:	2000      	movs	r0, #0
 8015734:	4770      	bx	lr
 8015736:	bf00      	nop
 8015738:	24024984 	.word	0x24024984
 801573c:	24024968 	.word	0x24024968
 8015740:	2402498c 	.word	0x2402498c
 8015744:	24024988 	.word	0x24024988
 8015748:	240248fc 	.word	0x240248fc

0801574c <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 801574c:	4b24      	ldr	r3, [pc, #144]	@ (80157e0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 801574e:	8802      	ldrh	r2, [r0, #0]
 8015750:	8818      	ldrh	r0, [r3, #0]
 8015752:	4282      	cmp	r2, r0
 8015754:	d221      	bcs.n	801579a <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 8015756:	4b23      	ldr	r3, [pc, #140]	@ (80157e4 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8015758:	6819      	ldr	r1, [r3, #0]
 801575a:	2314      	movs	r3, #20
 801575c:	fb03 1302 	mla	r3, r3, r2, r1
 8015760:	6858      	ldr	r0, [r3, #4]
 8015762:	2800      	cmp	r0, #0
 8015764:	d03a      	beq.n	80157dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015766:	4920      	ldr	r1, [pc, #128]	@ (80157e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8015768:	6809      	ldr	r1, [r1, #0]
 801576a:	2900      	cmp	r1, #0
 801576c:	d036      	beq.n	80157dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801576e:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 8015772:	2900      	cmp	r1, #0
 8015774:	d032      	beq.n	80157dc <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8015776:	891a      	ldrh	r2, [r3, #8]
 8015778:	8958      	ldrh	r0, [r3, #10]
 801577a:	4350      	muls	r0, r2
 801577c:	7c5a      	ldrb	r2, [r3, #17]
 801577e:	7cdb      	ldrb	r3, [r3, #19]
 8015780:	0952      	lsrs	r2, r2, #5
 8015782:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015786:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 801578a:	2b0b      	cmp	r3, #11
 801578c:	bf18      	it	ne
 801578e:	0040      	lslne	r0, r0, #1
 8015790:	3003      	adds	r0, #3
 8015792:	f020 0003 	bic.w	r0, r0, #3
 8015796:	4408      	add	r0, r1
 8015798:	4770      	bx	lr
 801579a:	4b14      	ldr	r3, [pc, #80]	@ (80157ec <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 801579c:	881b      	ldrh	r3, [r3, #0]
 801579e:	4403      	add	r3, r0
 80157a0:	429a      	cmp	r2, r3
 80157a2:	da1a      	bge.n	80157da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80157a4:	4b12      	ldr	r3, [pc, #72]	@ (80157f0 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80157a6:	1a10      	subs	r0, r2, r0
 80157a8:	210e      	movs	r1, #14
 80157aa:	681b      	ldr	r3, [r3, #0]
 80157ac:	fb01 3000 	mla	r0, r1, r0, r3
 80157b0:	7b03      	ldrb	r3, [r0, #12]
 80157b2:	f003 031f 	and.w	r3, r3, #31
 80157b6:	2b0b      	cmp	r3, #11
 80157b8:	d10b      	bne.n	80157d2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80157ba:	8903      	ldrh	r3, [r0, #8]
 80157bc:	8940      	ldrh	r0, [r0, #10]
 80157be:	4358      	muls	r0, r3
 80157c0:	4b09      	ldr	r3, [pc, #36]	@ (80157e8 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80157c2:	3003      	adds	r0, #3
 80157c4:	6819      	ldr	r1, [r3, #0]
 80157c6:	f020 0303 	bic.w	r3, r0, #3
 80157ca:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80157ce:	4418      	add	r0, r3
 80157d0:	4770      	bx	lr
 80157d2:	2b0d      	cmp	r3, #13
 80157d4:	d101      	bne.n	80157da <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80157d6:	300d      	adds	r0, #13
 80157d8:	4770      	bx	lr
 80157da:	2000      	movs	r0, #0
 80157dc:	4770      	bx	lr
 80157de:	bf00      	nop
 80157e0:	24024984 	.word	0x24024984
 80157e4:	2402498c 	.word	0x2402498c
 80157e8:	24024968 	.word	0x24024968
 80157ec:	24024988 	.word	0x24024988
 80157f0:	2402496c 	.word	0x2402496c

080157f4 <_ZNK8touchgfx6Bitmap9getFormatEv>:
 80157f4:	4b1f      	ldr	r3, [pc, #124]	@ (8015874 <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 80157f6:	b510      	push	{r4, lr}
 80157f8:	8802      	ldrh	r2, [r0, #0]
 80157fa:	881b      	ldrh	r3, [r3, #0]
 80157fc:	429a      	cmp	r2, r3
 80157fe:	d21a      	bcs.n	8015836 <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8015800:	4b1d      	ldr	r3, [pc, #116]	@ (8015878 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 8015802:	2114      	movs	r1, #20
 8015804:	681b      	ldr	r3, [r3, #0]
 8015806:	fb01 3102 	mla	r1, r1, r2, r3
 801580a:	7c4b      	ldrb	r3, [r1, #17]
 801580c:	0958      	lsrs	r0, r3, #5
 801580e:	7ccb      	ldrb	r3, [r1, #19]
 8015810:	491a      	ldr	r1, [pc, #104]	@ (801587c <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 8015812:	f3c3 1342 	ubfx	r3, r3, #5, #3
 8015816:	6809      	ldr	r1, [r1, #0]
 8015818:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 801581c:	b2d8      	uxtb	r0, r3
 801581e:	b149      	cbz	r1, 8015834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015820:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8015824:	b132      	cbz	r2, 8015834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015826:	2b0e      	cmp	r3, #14
 8015828:	d021      	beq.n	801586e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801582a:	280f      	cmp	r0, #15
 801582c:	d01d      	beq.n	801586a <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 801582e:	2810      	cmp	r0, #16
 8015830:	bf08      	it	eq
 8015832:	2002      	moveq	r0, #2
 8015834:	bd10      	pop	{r4, pc}
 8015836:	4912      	ldr	r1, [pc, #72]	@ (8015880 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8015838:	8809      	ldrh	r1, [r1, #0]
 801583a:	4419      	add	r1, r3
 801583c:	428a      	cmp	r2, r1
 801583e:	da09      	bge.n	8015854 <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8015840:	1ad3      	subs	r3, r2, r3
 8015842:	4a10      	ldr	r2, [pc, #64]	@ (8015884 <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 8015844:	210e      	movs	r1, #14
 8015846:	6812      	ldr	r2, [r2, #0]
 8015848:	fb01 2303 	mla	r3, r1, r3, r2
 801584c:	7b18      	ldrb	r0, [r3, #12]
 801584e:	f000 001f 	and.w	r0, r0, #31
 8015852:	e7ef      	b.n	8015834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015854:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8015858:	429a      	cmp	r2, r3
 801585a:	d108      	bne.n	801586e <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 801585c:	f7ee fbe8 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 8015860:	6803      	ldr	r3, [r0, #0]
 8015862:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8015866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015868:	4718      	bx	r3
 801586a:	2001      	movs	r0, #1
 801586c:	e7e2      	b.n	8015834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801586e:	2000      	movs	r0, #0
 8015870:	e7e0      	b.n	8015834 <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8015872:	bf00      	nop
 8015874:	24024984 	.word	0x24024984
 8015878:	2402498c 	.word	0x2402498c
 801587c:	24024968 	.word	0x24024968
 8015880:	24024988 	.word	0x24024988
 8015884:	2402496c 	.word	0x2402496c

08015888 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 8015888:	2018      	movs	r0, #24
 801588a:	4770      	bx	lr

0801588c <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 801588c:	2001      	movs	r0, #1
 801588e:	4770      	bx	lr

08015890 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 8015890:	4b02      	ldr	r3, [pc, #8]	@ (801589c <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 8015892:	8818      	ldrh	r0, [r3, #0]
 8015894:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8015898:	b280      	uxth	r0, r0
 801589a:	4770      	bx	lr
 801589c:	240248f6 	.word	0x240248f6

080158a0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80158a0:	2bff      	cmp	r3, #255	@ 0xff
 80158a2:	d04c      	beq.n	801593e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80158a4:	2a2c      	cmp	r2, #44	@ 0x2c
 80158a6:	d030      	beq.n	801590a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 80158a8:	d80f      	bhi.n	80158ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80158aa:	2a08      	cmp	r2, #8
 80158ac:	d043      	beq.n	8015936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80158ae:	d805      	bhi.n	80158bc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80158b0:	2a04      	cmp	r2, #4
 80158b2:	d03e      	beq.n	8015932 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80158b4:	2a05      	cmp	r2, #5
 80158b6:	d03a      	beq.n	801592e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80158b8:	2300      	movs	r3, #0
 80158ba:	e024      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158bc:	2a0a      	cmp	r2, #10
 80158be:	d03a      	beq.n	8015936 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80158c0:	d301      	bcc.n	80158c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80158c2:	2a0b      	cmp	r2, #11
 80158c4:	d1f8      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158c6:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80158c8:	e01d      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158ca:	2a30      	cmp	r2, #48	@ 0x30
 80158cc:	d035      	beq.n	801593a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80158ce:	d80a      	bhi.n	80158e6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80158d0:	2a2e      	cmp	r2, #46	@ 0x2e
 80158d2:	684b      	ldr	r3, [r1, #4]
 80158d4:	d023      	beq.n	801591e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80158d6:	d90d      	bls.n	80158f4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 80158d8:	781a      	ldrb	r2, [r3, #0]
 80158da:	785b      	ldrb	r3, [r3, #1]
 80158dc:	2b00      	cmp	r3, #0
 80158de:	d1eb      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158e0:	b98a      	cbnz	r2, 8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158e2:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80158e4:	e00f      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158e6:	2a32      	cmp	r2, #50	@ 0x32
 80158e8:	d027      	beq.n	801593a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80158ea:	d301      	bcc.n	80158f0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 80158ec:	2a33      	cmp	r2, #51	@ 0x33
 80158ee:	d1e3      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158f0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80158f2:	e008      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80158f4:	781a      	ldrb	r2, [r3, #0]
 80158f6:	785b      	ldrb	r3, [r3, #1]
 80158f8:	2b00      	cmp	r3, #0
 80158fa:	d1dd      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80158fc:	2a00      	cmp	r2, #0
 80158fe:	d0f0      	beq.n	80158e2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8015900:	2a01      	cmp	r2, #1
 8015902:	d1d9      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015904:	6943      	ldr	r3, [r0, #20]
 8015906:	4618      	mov	r0, r3
 8015908:	4770      	bx	lr
 801590a:	684b      	ldr	r3, [r1, #4]
 801590c:	781a      	ldrb	r2, [r3, #0]
 801590e:	785b      	ldrb	r3, [r3, #1]
 8015910:	2b00      	cmp	r3, #0
 8015912:	d1d1      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015914:	b14a      	cbz	r2, 801592a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 8015916:	2a01      	cmp	r2, #1
 8015918:	bf08      	it	eq
 801591a:	68c3      	ldreq	r3, [r0, #12]
 801591c:	e7f3      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801591e:	781a      	ldrb	r2, [r3, #0]
 8015920:	785b      	ldrb	r3, [r3, #1]
 8015922:	2b00      	cmp	r3, #0
 8015924:	d1c8      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015926:	2a00      	cmp	r2, #0
 8015928:	d1ed      	bne.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801592a:	69c3      	ldr	r3, [r0, #28]
 801592c:	e7eb      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801592e:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8015930:	e7e9      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015932:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8015934:	e7e7      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015936:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8015938:	e7e5      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801593a:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 801593c:	e7e3      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801593e:	2a2c      	cmp	r2, #44	@ 0x2c
 8015940:	d030      	beq.n	80159a4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 8015942:	d80f      	bhi.n	8015964 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 8015944:	2a08      	cmp	r2, #8
 8015946:	d042      	beq.n	80159ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8015948:	d805      	bhi.n	8015956 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 801594a:	2a04      	cmp	r2, #4
 801594c:	d03d      	beq.n	80159ca <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 801594e:	2a05      	cmp	r2, #5
 8015950:	d1b2      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015952:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8015954:	e7d7      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015956:	2a0a      	cmp	r2, #10
 8015958:	d039      	beq.n	80159ce <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 801595a:	d301      	bcc.n	8015960 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 801595c:	2a0b      	cmp	r2, #11
 801595e:	d1ab      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015960:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 8015962:	e7d0      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015964:	2a30      	cmp	r2, #48	@ 0x30
 8015966:	d034      	beq.n	80159d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015968:	d80b      	bhi.n	8015982 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 801596a:	2a2e      	cmp	r2, #46	@ 0x2e
 801596c:	684b      	ldr	r3, [r1, #4]
 801596e:	d023      	beq.n	80159b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8015970:	d90e      	bls.n	8015990 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 8015972:	781a      	ldrb	r2, [r3, #0]
 8015974:	785b      	ldrb	r3, [r3, #1]
 8015976:	2b00      	cmp	r3, #0
 8015978:	d19e      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801597a:	2a00      	cmp	r2, #0
 801597c:	d1c3      	bne.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801597e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 8015980:	e7c1      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015982:	2a32      	cmp	r2, #50	@ 0x32
 8015984:	d025      	beq.n	80159d2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8015986:	d301      	bcc.n	801598c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 8015988:	2a33      	cmp	r2, #51	@ 0x33
 801598a:	d195      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801598c:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 801598e:	e7ba      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8015990:	781a      	ldrb	r2, [r3, #0]
 8015992:	785b      	ldrb	r3, [r3, #1]
 8015994:	2b00      	cmp	r3, #0
 8015996:	d18f      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8015998:	2a00      	cmp	r2, #0
 801599a:	d0f0      	beq.n	801597e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 801599c:	2a01      	cmp	r2, #1
 801599e:	d18b      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159a0:	6983      	ldr	r3, [r0, #24]
 80159a2:	e7b0      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159a4:	684b      	ldr	r3, [r1, #4]
 80159a6:	781a      	ldrb	r2, [r3, #0]
 80159a8:	785b      	ldrb	r3, [r3, #1]
 80159aa:	2b00      	cmp	r3, #0
 80159ac:	d184      	bne.n	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159ae:	b152      	cbz	r2, 80159c6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80159b0:	2a01      	cmp	r2, #1
 80159b2:	bf08      	it	eq
 80159b4:	6903      	ldreq	r3, [r0, #16]
 80159b6:	e7a6      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159b8:	781a      	ldrb	r2, [r3, #0]
 80159ba:	785b      	ldrb	r3, [r3, #1]
 80159bc:	2b00      	cmp	r3, #0
 80159be:	f47f af7b 	bne.w	80158b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80159c2:	2a00      	cmp	r2, #0
 80159c4:	d19f      	bne.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159c6:	6a03      	ldr	r3, [r0, #32]
 80159c8:	e79d      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159ca:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80159cc:	e79b      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159ce:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80159d0:	e799      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80159d2:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80159d4:	e797      	b.n	8015906 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080159d6 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80159d6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80159da:	b085      	sub	sp, #20
 80159dc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80159de:	9203      	str	r2, [sp, #12]
 80159e0:	6870      	ldr	r0, [r6, #4]
 80159e2:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80159e6:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 80159ea:	9101      	str	r1, [sp, #4]
 80159ec:	fa1f f885 	uxth.w	r8, r5
 80159f0:	43ed      	mvns	r5, r5
 80159f2:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80159f6:	b2ed      	uxtb	r5, r5
 80159f8:	fb00 2404 	mla	r4, r0, r4, r2
 80159fc:	6832      	ldr	r2, [r6, #0]
 80159fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015a02:	4414      	add	r4, r2
 8015a04:	f8dc 2000 	ldr.w	r2, [ip]
 8015a08:	9202      	str	r2, [sp, #8]
 8015a0a:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015a0e:	f102 0e04 	add.w	lr, r2, #4
 8015a12:	9a01      	ldr	r2, [sp, #4]
 8015a14:	2a00      	cmp	r2, #0
 8015a16:	dc03      	bgt.n	8015a20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8015a18:	9a03      	ldr	r2, [sp, #12]
 8015a1a:	2a00      	cmp	r2, #0
 8015a1c:	f340 8116 	ble.w	8015c4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015a20:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015a22:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 8015a26:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015a2a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015a2c:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8015a30:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015a34:	2b00      	cmp	r3, #0
 8015a36:	dd0e      	ble.n	8015a56 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8015a38:	1406      	asrs	r6, r0, #16
 8015a3a:	d405      	bmi.n	8015a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a3c:	4556      	cmp	r6, sl
 8015a3e:	da03      	bge.n	8015a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a40:	1416      	asrs	r6, r2, #16
 8015a42:	d401      	bmi.n	8015a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8015a44:	454e      	cmp	r6, r9
 8015a46:	db07      	blt.n	8015a58 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8015a48:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8015a4a:	3b01      	subs	r3, #1
 8015a4c:	3403      	adds	r4, #3
 8015a4e:	4430      	add	r0, r6
 8015a50:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015a52:	4432      	add	r2, r6
 8015a54:	e7ee      	b.n	8015a34 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 8015a56:	d063      	beq.n	8015b20 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8015a58:	1e5e      	subs	r6, r3, #1
 8015a5a:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8015a5c:	fb07 0706 	mla	r7, r7, r6, r0
 8015a60:	143f      	asrs	r7, r7, #16
 8015a62:	d454      	bmi.n	8015b0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a64:	4557      	cmp	r7, sl
 8015a66:	da52      	bge.n	8015b0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a68:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8015a6a:	fb07 2606 	mla	r6, r7, r6, r2
 8015a6e:	1436      	asrs	r6, r6, #16
 8015a70:	d44d      	bmi.n	8015b0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a72:	454e      	cmp	r6, r9
 8015a74:	da4b      	bge.n	8015b0e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8015a76:	1ce6      	adds	r6, r4, #3
 8015a78:	4699      	mov	r9, r3
 8015a7a:	f1b9 0f00 	cmp.w	r9, #0
 8015a7e:	f106 0603 	add.w	r6, r6, #3
 8015a82:	dd48      	ble.n	8015b16 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 8015a84:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8015a88:	1417      	asrs	r7, r2, #16
 8015a8a:	9902      	ldr	r1, [sp, #8]
 8015a8c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8015a90:	f109 39ff 	add.w	r9, r9, #4294967295
 8015a94:	fb0b 1707 	mla	r7, fp, r7, r1
 8015a98:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8015a9c:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015a9e:	f817 700a 	ldrb.w	r7, [r7, sl]
 8015aa2:	fb1b fb05 	smulbb	fp, fp, r5
 8015aa6:	4408      	add	r0, r1
 8015aa8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015aaa:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8015aae:	440a      	add	r2, r1
 8015ab0:	eb0e 0a07 	add.w	sl, lr, r7
 8015ab4:	f81e 7007 	ldrb.w	r7, [lr, r7]
 8015ab8:	fb07 b708 	mla	r7, r7, r8, fp
 8015abc:	b2bf      	uxth	r7, r7
 8015abe:	f107 0b01 	add.w	fp, r7, #1
 8015ac2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ac6:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8015aca:	fb1b fb05 	smulbb	fp, fp, r5
 8015ace:	123f      	asrs	r7, r7, #8
 8015ad0:	f806 7c06 	strb.w	r7, [r6, #-6]
 8015ad4:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8015ad8:	fb07 b708 	mla	r7, r7, r8, fp
 8015adc:	b2bf      	uxth	r7, r7
 8015ade:	f107 0b01 	add.w	fp, r7, #1
 8015ae2:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8015ae6:	123f      	asrs	r7, r7, #8
 8015ae8:	f806 7c05 	strb.w	r7, [r6, #-5]
 8015aec:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8015af0:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8015af4:	fb1a fa05 	smulbb	sl, sl, r5
 8015af8:	fb07 a708 	mla	r7, r7, r8, sl
 8015afc:	b2bf      	uxth	r7, r7
 8015afe:	f107 0a01 	add.w	sl, r7, #1
 8015b02:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8015b06:	123f      	asrs	r7, r7, #8
 8015b08:	f806 7c04 	strb.w	r7, [r6, #-4]
 8015b0c:	e7b5      	b.n	8015a7a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8015b0e:	2700      	movs	r7, #0
 8015b10:	1bde      	subs	r6, r3, r7
 8015b12:	2e00      	cmp	r6, #0
 8015b14:	dc42      	bgt.n	8015b9c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8015b16:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015b1a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015b1e:	441c      	add	r4, r3
 8015b20:	9b01      	ldr	r3, [sp, #4]
 8015b22:	2b00      	cmp	r3, #0
 8015b24:	f340 8092 	ble.w	8015c4c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8015b28:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015b2c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b2e:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015b32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015b36:	eef0 6a62 	vmov.f32	s13, s5
 8015b3a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8015b3e:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015b42:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b46:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8015b4a:	eef0 6a43 	vmov.f32	s13, s6
 8015b4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8015b52:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8015b56:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015b5a:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015b5e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015b62:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015b66:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015b6a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015b6e:	ee12 2a90 	vmov	r2, s5
 8015b72:	eef0 2a47 	vmov.f32	s5, s14
 8015b76:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b7a:	ee13 2a10 	vmov	r2, s6
 8015b7e:	9311      	str	r3, [sp, #68]	@ 0x44
 8015b80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b82:	eeb0 3a67 	vmov.f32	s6, s15
 8015b86:	fb92 f3f3 	sdiv	r3, r2, r3
 8015b8a:	9312      	str	r3, [sp, #72]	@ 0x48
 8015b8c:	9b01      	ldr	r3, [sp, #4]
 8015b8e:	9a03      	ldr	r2, [sp, #12]
 8015b90:	3b01      	subs	r3, #1
 8015b92:	9301      	str	r3, [sp, #4]
 8015b94:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015b96:	bf08      	it	eq
 8015b98:	4613      	moveq	r3, r2
 8015b9a:	e73a      	b.n	8015a12 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015b9c:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8015ba0:	d44e      	bmi.n	8015c40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015ba2:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015ba6:	4556      	cmp	r6, sl
 8015ba8:	dd4a      	ble.n	8015c40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015baa:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8015bae:	d447      	bmi.n	8015c40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015bb0:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8015bb4:	4559      	cmp	r1, fp
 8015bb6:	dd43      	ble.n	8015c40 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8015bb8:	fa0f f986 	sxth.w	r9, r6
 8015bbc:	9902      	ldr	r1, [sp, #8]
 8015bbe:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8015bc2:	fb0b 1909 	mla	r9, fp, r9, r1
 8015bc6:	f814 b006 	ldrb.w	fp, [r4, r6]
 8015bca:	f819 900a 	ldrb.w	r9, [r9, sl]
 8015bce:	fb1b fb05 	smulbb	fp, fp, r5
 8015bd2:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015bd6:	eb0e 0a09 	add.w	sl, lr, r9
 8015bda:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8015bde:	fb09 b908 	mla	r9, r9, r8, fp
 8015be2:	fa1f f989 	uxth.w	r9, r9
 8015be6:	f109 0b01 	add.w	fp, r9, #1
 8015bea:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015bee:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015bf2:	f804 9006 	strb.w	r9, [r4, r6]
 8015bf6:	4426      	add	r6, r4
 8015bf8:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015bfc:	f896 b001 	ldrb.w	fp, [r6, #1]
 8015c00:	fb1b fb05 	smulbb	fp, fp, r5
 8015c04:	fb09 b908 	mla	r9, r9, r8, fp
 8015c08:	fa1f f989 	uxth.w	r9, r9
 8015c0c:	f109 0b01 	add.w	fp, r9, #1
 8015c10:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8015c14:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c18:	f886 9001 	strb.w	r9, [r6, #1]
 8015c1c:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015c20:	f896 a002 	ldrb.w	sl, [r6, #2]
 8015c24:	fb1a fa05 	smulbb	sl, sl, r5
 8015c28:	fb09 a908 	mla	r9, r9, r8, sl
 8015c2c:	fa1f f989 	uxth.w	r9, r9
 8015c30:	f109 0a01 	add.w	sl, r9, #1
 8015c34:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8015c38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8015c3c:	f886 9002 	strb.w	r9, [r6, #2]
 8015c40:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8015c42:	3701      	adds	r7, #1
 8015c44:	4408      	add	r0, r1
 8015c46:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8015c48:	440a      	add	r2, r1
 8015c4a:	e761      	b.n	8015b10 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8015c4c:	b005      	add	sp, #20
 8015c4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015c52 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015c52:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015c56:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8015c58:	4693      	mov	fp, r2
 8015c5a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8015c5c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015c60:	6868      	ldr	r0, [r5, #4]
 8015c62:	6877      	ldr	r7, [r6, #4]
 8015c64:	9100      	str	r1, [sp, #0]
 8015c66:	3704      	adds	r7, #4
 8015c68:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8015c6c:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8015c70:	fb00 2404 	mla	r4, r0, r4, r2
 8015c74:	682a      	ldr	r2, [r5, #0]
 8015c76:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8015c7a:	4414      	add	r4, r2
 8015c7c:	6832      	ldr	r2, [r6, #0]
 8015c7e:	9201      	str	r2, [sp, #4]
 8015c80:	9a00      	ldr	r2, [sp, #0]
 8015c82:	2a00      	cmp	r2, #0
 8015c84:	dc03      	bgt.n	8015c8e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015c86:	f1bb 0f00 	cmp.w	fp, #0
 8015c8a:	f340 80bc 	ble.w	8015e06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015c8e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8015c90:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8015c94:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015c98:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8015c9a:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8015c9e:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8015ca2:	2b00      	cmp	r3, #0
 8015ca4:	dd0c      	ble.n	8015cc0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8015ca6:	1405      	asrs	r5, r0, #16
 8015ca8:	d405      	bmi.n	8015cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015caa:	4555      	cmp	r5, sl
 8015cac:	da03      	bge.n	8015cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015cae:	1415      	asrs	r5, r2, #16
 8015cb0:	d401      	bmi.n	8015cb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8015cb2:	454d      	cmp	r5, r9
 8015cb4:	db05      	blt.n	8015cc2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015cb6:	4440      	add	r0, r8
 8015cb8:	4472      	add	r2, lr
 8015cba:	3b01      	subs	r3, #1
 8015cbc:	3403      	adds	r4, #3
 8015cbe:	e7f0      	b.n	8015ca2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8015cc0:	d03f      	beq.n	8015d42 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8015cc2:	1e5d      	subs	r5, r3, #1
 8015cc4:	fb08 0c05 	mla	ip, r8, r5, r0
 8015cc8:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8015ccc:	d42e      	bmi.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cce:	45d4      	cmp	ip, sl
 8015cd0:	da2c      	bge.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cd2:	fb0e 2505 	mla	r5, lr, r5, r2
 8015cd6:	142d      	asrs	r5, r5, #16
 8015cd8:	d428      	bmi.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cda:	454d      	cmp	r5, r9
 8015cdc:	da26      	bge.n	8015d2c <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8015cde:	1ce5      	adds	r5, r4, #3
 8015ce0:	469c      	mov	ip, r3
 8015ce2:	f1bc 0f00 	cmp.w	ip, #0
 8015ce6:	f105 0503 	add.w	r5, r5, #3
 8015cea:	dd25      	ble.n	8015d38 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8015cec:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8015cf0:	ea4f 4922 	mov.w	r9, r2, asr #16
 8015cf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015cf8:	4472      	add	r2, lr
 8015cfa:	468a      	mov	sl, r1
 8015cfc:	9901      	ldr	r1, [sp, #4]
 8015cfe:	fb0a 1909 	mla	r9, sl, r9, r1
 8015d02:	1401      	asrs	r1, r0, #16
 8015d04:	4440      	add	r0, r8
 8015d06:	f819 9001 	ldrb.w	r9, [r9, r1]
 8015d0a:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8015d0e:	eb07 0a09 	add.w	sl, r7, r9
 8015d12:	f817 9009 	ldrb.w	r9, [r7, r9]
 8015d16:	f805 9c06 	strb.w	r9, [r5, #-6]
 8015d1a:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8015d1e:	f805 9c05 	strb.w	r9, [r5, #-5]
 8015d22:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8015d26:	f805 9c04 	strb.w	r9, [r5, #-4]
 8015d2a:	e7da      	b.n	8015ce2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8015d2c:	2500      	movs	r5, #0
 8015d2e:	eba3 0c05 	sub.w	ip, r3, r5
 8015d32:	f1bc 0f00 	cmp.w	ip, #0
 8015d36:	dc3b      	bgt.n	8015db0 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8015d38:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015d3c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015d40:	441c      	add	r4, r3
 8015d42:	9b00      	ldr	r3, [sp, #0]
 8015d44:	2b00      	cmp	r3, #0
 8015d46:	dd5e      	ble.n	8015e06 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8015d48:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015d4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015d4e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015d52:	eeb0 6a62 	vmov.f32	s12, s5
 8015d56:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015d5a:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015d5e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d62:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8015d66:	eeb0 6a43 	vmov.f32	s12, s6
 8015d6a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015d6e:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8015d72:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015d76:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015d7a:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015d7e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015d82:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015d86:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015d8a:	ee12 2a90 	vmov	r2, s5
 8015d8e:	eef0 2a47 	vmov.f32	s5, s14
 8015d92:	fb92 f8f3 	sdiv	r8, r2, r3
 8015d96:	ee13 2a10 	vmov	r2, s6
 8015d9a:	eeb0 3a67 	vmov.f32	s6, s15
 8015d9e:	fb92 fef3 	sdiv	lr, r2, r3
 8015da2:	9b00      	ldr	r3, [sp, #0]
 8015da4:	3b01      	subs	r3, #1
 8015da6:	9300      	str	r3, [sp, #0]
 8015da8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8015daa:	bf08      	it	eq
 8015dac:	465b      	moveq	r3, fp
 8015dae:	e767      	b.n	8015c80 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8015db0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015db4:	d423      	bmi.n	8015dfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015db6:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8015dba:	45cc      	cmp	ip, r9
 8015dbc:	dd1f      	ble.n	8015dfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dbe:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8015dc2:	d41c      	bmi.n	8015dfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dc4:	68f1      	ldr	r1, [r6, #12]
 8015dc6:	4551      	cmp	r1, sl
 8015dc8:	dd19      	ble.n	8015dfe <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8015dca:	fa0f fc8c 	sxth.w	ip, ip
 8015dce:	9901      	ldr	r1, [sp, #4]
 8015dd0:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8015dd4:	f81c c009 	ldrb.w	ip, [ip, r9]
 8015dd8:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8015ddc:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8015de0:	eb07 090c 	add.w	r9, r7, ip
 8015de4:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8015de8:	f804 a00c 	strb.w	sl, [r4, ip]
 8015dec:	44a4      	add	ip, r4
 8015dee:	f899 a001 	ldrb.w	sl, [r9, #1]
 8015df2:	f88c a001 	strb.w	sl, [ip, #1]
 8015df6:	f899 9002 	ldrb.w	r9, [r9, #2]
 8015dfa:	f88c 9002 	strb.w	r9, [ip, #2]
 8015dfe:	4440      	add	r0, r8
 8015e00:	4472      	add	r2, lr
 8015e02:	3501      	adds	r5, #1
 8015e04:	e793      	b.n	8015d2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8015e06:	b003      	add	sp, #12
 8015e08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08015e0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8015e0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015e10:	b085      	sub	sp, #20
 8015e12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8015e16:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8015e18:	9202      	str	r2, [sp, #8]
 8015e1a:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8015e1e:	6860      	ldr	r0, [r4, #4]
 8015e20:	9203      	str	r2, [sp, #12]
 8015e22:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8015e26:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8015e2a:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8015e2e:	fb00 2505 	mla	r5, r0, r5, r2
 8015e32:	6822      	ldr	r2, [r4, #0]
 8015e34:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8015e38:	4415      	add	r5, r2
 8015e3a:	f8dc 2000 	ldr.w	r2, [ip]
 8015e3e:	9200      	str	r2, [sp, #0]
 8015e40:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8015e44:	3204      	adds	r2, #4
 8015e46:	9201      	str	r2, [sp, #4]
 8015e48:	2900      	cmp	r1, #0
 8015e4a:	dc03      	bgt.n	8015e54 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8015e4c:	9a02      	ldr	r2, [sp, #8]
 8015e4e:	2a00      	cmp	r2, #0
 8015e50:	f340 8127 	ble.w	80160a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015e54:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8015e56:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015e5a:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8015e5e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8015e60:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8015e64:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8015e68:	2b00      	cmp	r3, #0
 8015e6a:	dd0d      	ble.n	8015e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8015e6c:	1422      	asrs	r2, r4, #16
 8015e6e:	d405      	bmi.n	8015e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e70:	4542      	cmp	r2, r8
 8015e72:	da03      	bge.n	8015e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e74:	1402      	asrs	r2, r0, #16
 8015e76:	d401      	bmi.n	8015e7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8015e78:	42ba      	cmp	r2, r7
 8015e7a:	db06      	blt.n	8015e8a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8015e7c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015e7e:	4474      	add	r4, lr
 8015e80:	3b01      	subs	r3, #1
 8015e82:	3503      	adds	r5, #3
 8015e84:	4410      	add	r0, r2
 8015e86:	e7ef      	b.n	8015e68 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8015e88:	d075      	beq.n	8015f76 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8015e8a:	1e5a      	subs	r2, r3, #1
 8015e8c:	fb0e 4602 	mla	r6, lr, r2, r4
 8015e90:	1436      	asrs	r6, r6, #16
 8015e92:	d465      	bmi.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e94:	4546      	cmp	r6, r8
 8015e96:	da63      	bge.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015e98:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8015e9a:	fb06 0202 	mla	r2, r6, r2, r0
 8015e9e:	1412      	asrs	r2, r2, #16
 8015ea0:	d45e      	bmi.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ea2:	42ba      	cmp	r2, r7
 8015ea4:	da5c      	bge.n	8015f60 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8015ea6:	1cef      	adds	r7, r5, #3
 8015ea8:	4699      	mov	r9, r3
 8015eaa:	f1b9 0f00 	cmp.w	r9, #0
 8015eae:	dd5d      	ble.n	8015f6c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8015eb0:	1402      	asrs	r2, r0, #16
 8015eb2:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8015eb6:	1426      	asrs	r6, r4, #16
 8015eb8:	4692      	mov	sl, r2
 8015eba:	9a00      	ldr	r2, [sp, #0]
 8015ebc:	fb08 220a 	mla	r2, r8, sl, r2
 8015ec0:	5d92      	ldrb	r2, [r2, r6]
 8015ec2:	9e01      	ldr	r6, [sp, #4]
 8015ec4:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8015ec8:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8015ecc:	d041      	beq.n	8015f52 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8015ece:	9a03      	ldr	r2, [sp, #12]
 8015ed0:	fa5f fb86 	uxtb.w	fp, r6
 8015ed4:	fb02 f808 	mul.w	r8, r2, r8
 8015ed8:	f108 0201 	add.w	r2, r8, #1
 8015edc:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8015ee0:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8015ee4:	1212      	asrs	r2, r2, #8
 8015ee6:	fa1f fa82 	uxth.w	sl, r2
 8015eea:	43d2      	mvns	r2, r2
 8015eec:	fb1b fb0a 	smulbb	fp, fp, sl
 8015ef0:	b2d2      	uxtb	r2, r2
 8015ef2:	fb08 b802 	mla	r8, r8, r2, fp
 8015ef6:	fa1f f888 	uxth.w	r8, r8
 8015efa:	f108 0b01 	add.w	fp, r8, #1
 8015efe:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015f02:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8015f06:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8015f0a:	fb1b fb0a 	smulbb	fp, fp, sl
 8015f0e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015f12:	fb16 fa0a 	smulbb	sl, r6, sl
 8015f16:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8015f1a:	f807 8c03 	strb.w	r8, [r7, #-3]
 8015f1e:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8015f22:	fb06 aa02 	mla	sl, r6, r2, sl
 8015f26:	fb08 b802 	mla	r8, r8, r2, fp
 8015f2a:	fa1f fa8a 	uxth.w	sl, sl
 8015f2e:	fa1f f888 	uxth.w	r8, r8
 8015f32:	f10a 0601 	add.w	r6, sl, #1
 8015f36:	f108 0b01 	add.w	fp, r8, #1
 8015f3a:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8015f3e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8015f42:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8015f46:	ea4f 2828 	mov.w	r8, r8, asr #8
 8015f4a:	f807 ac01 	strb.w	sl, [r7, #-1]
 8015f4e:	f807 8c02 	strb.w	r8, [r7, #-2]
 8015f52:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8015f54:	4474      	add	r4, lr
 8015f56:	3703      	adds	r7, #3
 8015f58:	f109 39ff 	add.w	r9, r9, #4294967295
 8015f5c:	4410      	add	r0, r2
 8015f5e:	e7a4      	b.n	8015eaa <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8015f60:	f04f 0800 	mov.w	r8, #0
 8015f64:	eba3 0208 	sub.w	r2, r3, r8
 8015f68:	2a00      	cmp	r2, #0
 8015f6a:	dc3b      	bgt.n	8015fe4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8015f6c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8015f70:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8015f74:	441d      	add	r5, r3
 8015f76:	2900      	cmp	r1, #0
 8015f78:	f340 8093 	ble.w	80160a2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8015f7c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8015f80:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015f82:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8015f86:	3901      	subs	r1, #1
 8015f88:	eeb0 6a62 	vmov.f32	s12, s5
 8015f8c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8015f90:	ee31 1a05 	vadd.f32	s2, s2, s10
 8015f94:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015f98:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8015f9c:	eeb0 6a43 	vmov.f32	s12, s6
 8015fa0:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8015fa4:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8015fa8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8015fac:	ee61 7a27 	vmul.f32	s15, s2, s15
 8015fb0:	ee77 2a62 	vsub.f32	s5, s14, s5
 8015fb4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8015fb8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8015fbc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8015fc0:	ee12 2a90 	vmov	r2, s5
 8015fc4:	eef0 2a47 	vmov.f32	s5, s14
 8015fc8:	fb92 fef3 	sdiv	lr, r2, r3
 8015fcc:	ee13 2a10 	vmov	r2, s6
 8015fd0:	eeb0 3a67 	vmov.f32	s6, s15
 8015fd4:	fb92 f3f3 	sdiv	r3, r2, r3
 8015fd8:	9a02      	ldr	r2, [sp, #8]
 8015fda:	9312      	str	r3, [sp, #72]	@ 0x48
 8015fdc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8015fde:	bf08      	it	eq
 8015fe0:	4613      	moveq	r3, r2
 8015fe2:	e731      	b.n	8015e48 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8015fe4:	1427      	asrs	r7, r4, #16
 8015fe6:	d456      	bmi.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015fe8:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8015fec:	42be      	cmp	r6, r7
 8015fee:	dd52      	ble.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015ff0:	ea5f 4920 	movs.w	r9, r0, asr #16
 8015ff4:	d44f      	bmi.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015ff6:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8015ffa:	454a      	cmp	r2, r9
 8015ffc:	dd4b      	ble.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8015ffe:	9a00      	ldr	r2, [sp, #0]
 8016000:	b236      	sxth	r6, r6
 8016002:	fb09 2606 	mla	r6, r9, r6, r2
 8016006:	5df2      	ldrb	r2, [r6, r7]
 8016008:	9e01      	ldr	r6, [sp, #4]
 801600a:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 801600e:	0e3a      	lsrs	r2, r7, #24
 8016010:	d041      	beq.n	8016096 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016012:	9e03      	ldr	r6, [sp, #12]
 8016014:	fa5f fb87 	uxtb.w	fp, r7
 8016018:	4372      	muls	r2, r6
 801601a:	1c56      	adds	r6, r2, #1
 801601c:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016020:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016024:	1212      	asrs	r2, r2, #8
 8016026:	f815 9006 	ldrb.w	r9, [r5, r6]
 801602a:	fa1f fa82 	uxth.w	sl, r2
 801602e:	43d2      	mvns	r2, r2
 8016030:	fb1b fb0a 	smulbb	fp, fp, sl
 8016034:	b2d2      	uxtb	r2, r2
 8016036:	fb09 b902 	mla	r9, r9, r2, fp
 801603a:	fa1f f989 	uxth.w	r9, r9
 801603e:	f109 0b01 	add.w	fp, r9, #1
 8016042:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016046:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801604a:	f3c7 4707 	ubfx	r7, r7, #16, #8
 801604e:	fb1b fb0a 	smulbb	fp, fp, sl
 8016052:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016056:	fb17 fa0a 	smulbb	sl, r7, sl
 801605a:	f805 9006 	strb.w	r9, [r5, r6]
 801605e:	442e      	add	r6, r5
 8016060:	78b7      	ldrb	r7, [r6, #2]
 8016062:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016066:	fb07 aa02 	mla	sl, r7, r2, sl
 801606a:	fb09 b902 	mla	r9, r9, r2, fp
 801606e:	fa1f fa8a 	uxth.w	sl, sl
 8016072:	fa1f f989 	uxth.w	r9, r9
 8016076:	f10a 0701 	add.w	r7, sl, #1
 801607a:	f109 0b01 	add.w	fp, r9, #1
 801607e:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016082:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016086:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801608a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801608e:	f886 a002 	strb.w	sl, [r6, #2]
 8016092:	f886 9001 	strb.w	r9, [r6, #1]
 8016096:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016098:	4474      	add	r4, lr
 801609a:	f108 0801 	add.w	r8, r8, #1
 801609e:	4410      	add	r0, r2
 80160a0:	e760      	b.n	8015f64 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 80160a2:	b005      	add	sp, #20
 80160a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080160a8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80160a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80160ac:	b085      	sub	sp, #20
 80160ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80160b2:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 80160b4:	9203      	str	r2, [sp, #12]
 80160b6:	6868      	ldr	r0, [r5, #4]
 80160b8:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 80160bc:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 80160c0:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 80160c4:	fb00 2404 	mla	r4, r0, r4, r2
 80160c8:	682a      	ldr	r2, [r5, #0]
 80160ca:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80160ce:	4414      	add	r4, r2
 80160d0:	f8dc 2000 	ldr.w	r2, [ip]
 80160d4:	9201      	str	r2, [sp, #4]
 80160d6:	f8dc 2004 	ldr.w	r2, [ip, #4]
 80160da:	3204      	adds	r2, #4
 80160dc:	9202      	str	r2, [sp, #8]
 80160de:	2900      	cmp	r1, #0
 80160e0:	dc03      	bgt.n	80160ea <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 80160e2:	9a03      	ldr	r2, [sp, #12]
 80160e4:	2a00      	cmp	r2, #0
 80160e6:	f340 8137 	ble.w	8016358 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 80160ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80160ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80160f0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80160f4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80160f6:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80160fa:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80160fe:	2b00      	cmp	r3, #0
 8016100:	dd0d      	ble.n	801611e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 8016102:	1405      	asrs	r5, r0, #16
 8016104:	d405      	bmi.n	8016112 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016106:	4545      	cmp	r5, r8
 8016108:	da03      	bge.n	8016112 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801610a:	1415      	asrs	r5, r2, #16
 801610c:	d401      	bmi.n	8016112 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801610e:	42bd      	cmp	r5, r7
 8016110:	db06      	blt.n	8016120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016112:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016114:	4470      	add	r0, lr
 8016116:	3b01      	subs	r3, #1
 8016118:	3403      	adds	r4, #3
 801611a:	442a      	add	r2, r5
 801611c:	e7ef      	b.n	80160fe <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801611e:	d070      	beq.n	8016202 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016120:	1e5d      	subs	r5, r3, #1
 8016122:	fb0e 0605 	mla	r6, lr, r5, r0
 8016126:	1436      	asrs	r6, r6, #16
 8016128:	d462      	bmi.n	80161f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801612a:	4546      	cmp	r6, r8
 801612c:	da60      	bge.n	80161f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801612e:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016130:	fb06 2505 	mla	r5, r6, r5, r2
 8016134:	142d      	asrs	r5, r5, #16
 8016136:	d45b      	bmi.n	80161f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8016138:	42bd      	cmp	r5, r7
 801613a:	da59      	bge.n	80161f0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 801613c:	1ce5      	adds	r5, r4, #3
 801613e:	469a      	mov	sl, r3
 8016140:	f1ba 0f00 	cmp.w	sl, #0
 8016144:	dd58      	ble.n	80161f8 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 8016146:	1416      	asrs	r6, r2, #16
 8016148:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 801614c:	1407      	asrs	r7, r0, #16
 801614e:	46b1      	mov	r9, r6
 8016150:	9e01      	ldr	r6, [sp, #4]
 8016152:	fb08 6609 	mla	r6, r8, r9, r6
 8016156:	5df6      	ldrb	r6, [r6, r7]
 8016158:	9f02      	ldr	r7, [sp, #8]
 801615a:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 801615e:	0e37      	lsrs	r7, r6, #24
 8016160:	2fff      	cmp	r7, #255	@ 0xff
 8016162:	f000 80f0 	beq.w	8016346 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 8016166:	fa5f f887 	uxtb.w	r8, r7
 801616a:	b3d7      	cbz	r7, 80161e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 801616c:	fa1f f788 	uxth.w	r7, r8
 8016170:	ea6f 0808 	mvn.w	r8, r8
 8016174:	fa5f fb86 	uxtb.w	fp, r6
 8016178:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 801617c:	fa5f f888 	uxtb.w	r8, r8
 8016180:	fb1b fb07 	smulbb	fp, fp, r7
 8016184:	fb09 b908 	mla	r9, r9, r8, fp
 8016188:	fa1f f989 	uxth.w	r9, r9
 801618c:	f109 0b01 	add.w	fp, r9, #1
 8016190:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016194:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 8016198:	fb1b fb08 	smulbb	fp, fp, r8
 801619c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161a0:	f805 9c03 	strb.w	r9, [r5, #-3]
 80161a4:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80161a8:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80161ac:	fb09 b907 	mla	r9, r9, r7, fp
 80161b0:	fa1f f989 	uxth.w	r9, r9
 80161b4:	f109 0b01 	add.w	fp, r9, #1
 80161b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80161bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80161c0:	f805 9c02 	strb.w	r9, [r5, #-2]
 80161c4:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80161c8:	fb19 f808 	smulbb	r8, r9, r8
 80161cc:	fb06 8607 	mla	r6, r6, r7, r8
 80161d0:	b2b6      	uxth	r6, r6
 80161d2:	f106 0801 	add.w	r8, r6, #1
 80161d6:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 80161da:	ea4f 2828 	mov.w	r8, r8, asr #8
 80161de:	f805 8c01 	strb.w	r8, [r5, #-1]
 80161e2:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80161e4:	4470      	add	r0, lr
 80161e6:	3503      	adds	r5, #3
 80161e8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80161ec:	4432      	add	r2, r6
 80161ee:	e7a7      	b.n	8016140 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 80161f0:	2600      	movs	r6, #0
 80161f2:	1b9d      	subs	r5, r3, r6
 80161f4:	2d00      	cmp	r5, #0
 80161f6:	dc3b      	bgt.n	8016270 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 80161f8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80161fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016200:	441c      	add	r4, r3
 8016202:	2900      	cmp	r1, #0
 8016204:	f340 80a8 	ble.w	8016358 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016208:	ee30 0a04 	vadd.f32	s0, s0, s8
 801620c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801620e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016212:	3901      	subs	r1, #1
 8016214:	eeb0 6a62 	vmov.f32	s12, s5
 8016218:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801621c:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016220:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016224:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016228:	eeb0 6a43 	vmov.f32	s12, s6
 801622c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016230:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016234:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016238:	ee61 7a27 	vmul.f32	s15, s2, s15
 801623c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016240:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016244:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016248:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801624c:	ee12 2a90 	vmov	r2, s5
 8016250:	eef0 2a47 	vmov.f32	s5, s14
 8016254:	fb92 fef3 	sdiv	lr, r2, r3
 8016258:	ee13 2a10 	vmov	r2, s6
 801625c:	eeb0 3a67 	vmov.f32	s6, s15
 8016260:	fb92 f3f3 	sdiv	r3, r2, r3
 8016264:	9a03      	ldr	r2, [sp, #12]
 8016266:	9312      	str	r3, [sp, #72]	@ 0x48
 8016268:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801626a:	bf08      	it	eq
 801626c:	4613      	moveq	r3, r2
 801626e:	e736      	b.n	80160de <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8016270:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016274:	d457      	bmi.n	8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016276:	f8dc 7008 	ldr.w	r7, [ip, #8]
 801627a:	4547      	cmp	r7, r8
 801627c:	dd53      	ble.n	8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801627e:	ea5f 4922 	movs.w	r9, r2, asr #16
 8016282:	d450      	bmi.n	8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016284:	f8dc 500c 	ldr.w	r5, [ip, #12]
 8016288:	454d      	cmp	r5, r9
 801628a:	dd4c      	ble.n	8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801628c:	9d01      	ldr	r5, [sp, #4]
 801628e:	b23f      	sxth	r7, r7
 8016290:	fb09 5707 	mla	r7, r9, r7, r5
 8016294:	f817 5008 	ldrb.w	r5, [r7, r8]
 8016298:	9f02      	ldr	r7, [sp, #8]
 801629a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801629e:	0e2f      	lsrs	r7, r5, #24
 80162a0:	2fff      	cmp	r7, #255	@ 0xff
 80162a2:	d045      	beq.n	8016330 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80162a4:	fa5f f987 	uxtb.w	r9, r7
 80162a8:	b3ef      	cbz	r7, 8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80162aa:	fa1f f889 	uxth.w	r8, r9
 80162ae:	ea6f 0909 	mvn.w	r9, r9
 80162b2:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80162b6:	fa5f fb85 	uxtb.w	fp, r5
 80162ba:	f814 a007 	ldrb.w	sl, [r4, r7]
 80162be:	fa5f f989 	uxtb.w	r9, r9
 80162c2:	fb1b fb08 	smulbb	fp, fp, r8
 80162c6:	fb0a ba09 	mla	sl, sl, r9, fp
 80162ca:	fa1f fa8a 	uxth.w	sl, sl
 80162ce:	f10a 0b01 	add.w	fp, sl, #1
 80162d2:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80162d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80162da:	f804 a007 	strb.w	sl, [r4, r7]
 80162de:	4427      	add	r7, r4
 80162e0:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 80162e4:	f3c5 4507 	ubfx	r5, r5, #16, #8
 80162e8:	f897 b001 	ldrb.w	fp, [r7, #1]
 80162ec:	fb1b fb09 	smulbb	fp, fp, r9
 80162f0:	fb0a ba08 	mla	sl, sl, r8, fp
 80162f4:	fa1f fa8a 	uxth.w	sl, sl
 80162f8:	f10a 0b01 	add.w	fp, sl, #1
 80162fc:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8016300:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016304:	f887 a001 	strb.w	sl, [r7, #1]
 8016308:	f897 a002 	ldrb.w	sl, [r7, #2]
 801630c:	fb1a f909 	smulbb	r9, sl, r9
 8016310:	fb05 9508 	mla	r5, r5, r8, r9
 8016314:	b2ad      	uxth	r5, r5
 8016316:	f105 0901 	add.w	r9, r5, #1
 801631a:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 801631e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016322:	f887 9002 	strb.w	r9, [r7, #2]
 8016326:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8016328:	4470      	add	r0, lr
 801632a:	3601      	adds	r6, #1
 801632c:	442a      	add	r2, r5
 801632e:	e760      	b.n	80161f2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016330:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 8016334:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8016338:	55e5      	strb	r5, [r4, r7]
 801633a:	4427      	add	r7, r4
 801633c:	0c2d      	lsrs	r5, r5, #16
 801633e:	f887 8001 	strb.w	r8, [r7, #1]
 8016342:	70bd      	strb	r5, [r7, #2]
 8016344:	e7ef      	b.n	8016326 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 8016346:	0a37      	lsrs	r7, r6, #8
 8016348:	f805 6c03 	strb.w	r6, [r5, #-3]
 801634c:	0c36      	lsrs	r6, r6, #16
 801634e:	f805 7c02 	strb.w	r7, [r5, #-2]
 8016352:	f805 6c01 	strb.w	r6, [r5, #-1]
 8016356:	e744      	b.n	80161e2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016358:	b005      	add	sp, #20
 801635a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801635e <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801635e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016362:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016364:	9201      	str	r2, [sp, #4]
 8016366:	6870      	ldr	r0, [r6, #4]
 8016368:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 801636c:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8016370:	fa1f fe85 	uxth.w	lr, r5
 8016374:	43ed      	mvns	r5, r5
 8016376:	f8dc 8000 	ldr.w	r8, [ip]
 801637a:	b2ed      	uxtb	r5, r5
 801637c:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016380:	fb00 2404 	mla	r4, r0, r4, r2
 8016384:	6832      	ldr	r2, [r6, #0]
 8016386:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801638a:	4414      	add	r4, r2
 801638c:	2900      	cmp	r1, #0
 801638e:	dc03      	bgt.n	8016398 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 8016390:	9a01      	ldr	r2, [sp, #4]
 8016392:	2a00      	cmp	r2, #0
 8016394:	f340 810d 	ble.w	80165b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016398:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801639a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801639e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80163a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80163a4:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80163a8:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80163ac:	2b00      	cmp	r3, #0
 80163ae:	dd0e      	ble.n	80163ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80163b0:	1406      	asrs	r6, r0, #16
 80163b2:	d405      	bmi.n	80163c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163b4:	4556      	cmp	r6, sl
 80163b6:	da03      	bge.n	80163c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163b8:	1416      	asrs	r6, r2, #16
 80163ba:	d401      	bmi.n	80163c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80163bc:	454e      	cmp	r6, r9
 80163be:	db07      	blt.n	80163d0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80163c0:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80163c2:	3b01      	subs	r3, #1
 80163c4:	3403      	adds	r4, #3
 80163c6:	4430      	add	r0, r6
 80163c8:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80163ca:	4432      	add	r2, r6
 80163cc:	e7ee      	b.n	80163ac <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80163ce:	d060      	beq.n	8016492 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80163d0:	1e5e      	subs	r6, r3, #1
 80163d2:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80163d4:	fb07 0706 	mla	r7, r7, r6, r0
 80163d8:	143f      	asrs	r7, r7, #16
 80163da:	d451      	bmi.n	8016480 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163dc:	4557      	cmp	r7, sl
 80163de:	da4f      	bge.n	8016480 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163e0:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80163e2:	fb07 2606 	mla	r6, r7, r6, r2
 80163e6:	1436      	asrs	r6, r6, #16
 80163e8:	d44a      	bmi.n	8016480 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163ea:	454e      	cmp	r6, r9
 80163ec:	da48      	bge.n	8016480 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 80163ee:	1ce6      	adds	r6, r4, #3
 80163f0:	4699      	mov	r9, r3
 80163f2:	f1b9 0f00 	cmp.w	r9, #0
 80163f6:	f106 0603 	add.w	r6, r6, #3
 80163fa:	dd45      	ble.n	8016488 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 80163fc:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8016400:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016404:	1417      	asrs	r7, r2, #16
 8016406:	f109 39ff 	add.w	r9, r9, #4294967295
 801640a:	fb0b a707 	mla	r7, fp, r7, sl
 801640e:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 8016412:	fb1b fb05 	smulbb	fp, fp, r5
 8016416:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801641a:	eb08 0a07 	add.w	sl, r8, r7
 801641e:	f818 7007 	ldrb.w	r7, [r8, r7]
 8016422:	fb07 b70e 	mla	r7, r7, lr, fp
 8016426:	b2bf      	uxth	r7, r7
 8016428:	f107 0b01 	add.w	fp, r7, #1
 801642c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016430:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 8016434:	fb1b fb05 	smulbb	fp, fp, r5
 8016438:	123f      	asrs	r7, r7, #8
 801643a:	f806 7c06 	strb.w	r7, [r6, #-6]
 801643e:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016442:	fb07 b70e 	mla	r7, r7, lr, fp
 8016446:	b2bf      	uxth	r7, r7
 8016448:	f107 0b01 	add.w	fp, r7, #1
 801644c:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016450:	123f      	asrs	r7, r7, #8
 8016452:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016456:	f89a 7002 	ldrb.w	r7, [sl, #2]
 801645a:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 801645e:	fb1a fa05 	smulbb	sl, sl, r5
 8016462:	fb07 a70e 	mla	r7, r7, lr, sl
 8016466:	b2bf      	uxth	r7, r7
 8016468:	f107 0a01 	add.w	sl, r7, #1
 801646c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016470:	123f      	asrs	r7, r7, #8
 8016472:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016476:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8016478:	4438      	add	r0, r7
 801647a:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801647c:	443a      	add	r2, r7
 801647e:	e7b8      	b.n	80163f2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 8016480:	2700      	movs	r7, #0
 8016482:	1bde      	subs	r6, r3, r7
 8016484:	2e00      	cmp	r6, #0
 8016486:	dc3f      	bgt.n	8016508 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 8016488:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801648c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016490:	441c      	add	r4, r3
 8016492:	2900      	cmp	r1, #0
 8016494:	f340 808d 	ble.w	80165b2 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 8016498:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801649c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801649e:	ee30 0a04 	vadd.f32	s0, s0, s8
 80164a2:	3901      	subs	r1, #1
 80164a4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80164a8:	eef0 6a62 	vmov.f32	s13, s5
 80164ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80164b0:	ee31 1a05 	vadd.f32	s2, s2, s10
 80164b4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164b8:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 80164bc:	eef0 6a43 	vmov.f32	s13, s6
 80164c0:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80164c4:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80164c8:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80164cc:	ee61 7a27 	vmul.f32	s15, s2, s15
 80164d0:	ee77 2a62 	vsub.f32	s5, s14, s5
 80164d4:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80164d8:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80164dc:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80164e0:	ee12 2a90 	vmov	r2, s5
 80164e4:	eef0 2a47 	vmov.f32	s5, s14
 80164e8:	fb92 f3f3 	sdiv	r3, r2, r3
 80164ec:	ee13 2a10 	vmov	r2, s6
 80164f0:	930f      	str	r3, [sp, #60]	@ 0x3c
 80164f2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80164f4:	eeb0 3a67 	vmov.f32	s6, s15
 80164f8:	fb92 f3f3 	sdiv	r3, r2, r3
 80164fc:	9a01      	ldr	r2, [sp, #4]
 80164fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8016500:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016502:	bf08      	it	eq
 8016504:	4613      	moveq	r3, r2
 8016506:	e741      	b.n	801638c <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016508:	ea5f 4920 	movs.w	r9, r0, asr #16
 801650c:	d44b      	bmi.n	80165a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801650e:	f8dc b008 	ldr.w	fp, [ip, #8]
 8016512:	45cb      	cmp	fp, r9
 8016514:	dd47      	ble.n	80165a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016516:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801651a:	d444      	bmi.n	80165a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801651c:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8016520:	4556      	cmp	r6, sl
 8016522:	dd40      	ble.n	80165a6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8016524:	fa0f f68b 	sxth.w	r6, fp
 8016528:	fb0a 9906 	mla	r9, sl, r6, r9
 801652c:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016530:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016534:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016538:	fb1b fb05 	smulbb	fp, fp, r5
 801653c:	eb08 0a09 	add.w	sl, r8, r9
 8016540:	f818 9009 	ldrb.w	r9, [r8, r9]
 8016544:	fb09 b90e 	mla	r9, r9, lr, fp
 8016548:	fa1f f989 	uxth.w	r9, r9
 801654c:	f109 0b01 	add.w	fp, r9, #1
 8016550:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016554:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016558:	f804 9006 	strb.w	r9, [r4, r6]
 801655c:	4426      	add	r6, r4
 801655e:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016562:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016566:	fb1b fb05 	smulbb	fp, fp, r5
 801656a:	fb09 b90e 	mla	r9, r9, lr, fp
 801656e:	fa1f f989 	uxth.w	r9, r9
 8016572:	f109 0b01 	add.w	fp, r9, #1
 8016576:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801657a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801657e:	f886 9001 	strb.w	r9, [r6, #1]
 8016582:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016586:	f896 a002 	ldrb.w	sl, [r6, #2]
 801658a:	fb1a fa05 	smulbb	sl, sl, r5
 801658e:	fb09 a90e 	mla	r9, r9, lr, sl
 8016592:	fa1f f989 	uxth.w	r9, r9
 8016596:	f109 0a01 	add.w	sl, r9, #1
 801659a:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 801659e:	ea4f 2929 	mov.w	r9, r9, asr #8
 80165a2:	f886 9002 	strb.w	r9, [r6, #2]
 80165a6:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80165a8:	3701      	adds	r7, #1
 80165aa:	4430      	add	r0, r6
 80165ac:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80165ae:	4432      	add	r2, r6
 80165b0:	e767      	b.n	8016482 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80165b2:	b003      	add	sp, #12
 80165b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080165b8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80165b8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80165bc:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80165be:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80165c2:	9201      	str	r2, [sp, #4]
 80165c4:	6868      	ldr	r0, [r5, #4]
 80165c6:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80165c8:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80165cc:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80165d0:	fb00 2404 	mla	r4, r0, r4, r2
 80165d4:	682a      	ldr	r2, [r5, #0]
 80165d6:	f8d7 8000 	ldr.w	r8, [r7]
 80165da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80165de:	4414      	add	r4, r2
 80165e0:	2900      	cmp	r1, #0
 80165e2:	dc03      	bgt.n	80165ec <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 80165e4:	9a01      	ldr	r2, [sp, #4]
 80165e6:	2a00      	cmp	r2, #0
 80165e8:	f340 80af 	ble.w	801674a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80165ec:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80165ee:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 80165f2:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80165f6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80165f8:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 80165fc:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016600:	2b00      	cmp	r3, #0
 8016602:	dd0c      	ble.n	801661e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 8016604:	1405      	asrs	r5, r0, #16
 8016606:	d405      	bmi.n	8016614 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016608:	4555      	cmp	r5, sl
 801660a:	da03      	bge.n	8016614 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801660c:	1415      	asrs	r5, r2, #16
 801660e:	d401      	bmi.n	8016614 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016610:	454d      	cmp	r5, r9
 8016612:	db05      	blt.n	8016620 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 8016614:	4470      	add	r0, lr
 8016616:	4462      	add	r2, ip
 8016618:	3b01      	subs	r3, #1
 801661a:	3403      	adds	r4, #3
 801661c:	e7f0      	b.n	8016600 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801661e:	d038      	beq.n	8016692 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016620:	1e5d      	subs	r5, r3, #1
 8016622:	fb0e 0605 	mla	r6, lr, r5, r0
 8016626:	1436      	asrs	r6, r6, #16
 8016628:	d42a      	bmi.n	8016680 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801662a:	4556      	cmp	r6, sl
 801662c:	da28      	bge.n	8016680 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801662e:	fb0c 2505 	mla	r5, ip, r5, r2
 8016632:	142d      	asrs	r5, r5, #16
 8016634:	d424      	bmi.n	8016680 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8016636:	454d      	cmp	r5, r9
 8016638:	da22      	bge.n	8016680 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801663a:	1ce6      	adds	r6, r4, #3
 801663c:	4699      	mov	r9, r3
 801663e:	f1b9 0f00 	cmp.w	r9, #0
 8016642:	f106 0603 	add.w	r6, r6, #3
 8016646:	dd1f      	ble.n	8016688 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8016648:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 801664c:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8016650:	1415      	asrs	r5, r2, #16
 8016652:	4470      	add	r0, lr
 8016654:	4462      	add	r2, ip
 8016656:	f109 39ff 	add.w	r9, r9, #4294967295
 801665a:	fb0b a505 	mla	r5, fp, r5, sl
 801665e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016662:	eb08 0a05 	add.w	sl, r8, r5
 8016666:	f818 5005 	ldrb.w	r5, [r8, r5]
 801666a:	f806 5c06 	strb.w	r5, [r6, #-6]
 801666e:	f89a 5001 	ldrb.w	r5, [sl, #1]
 8016672:	f806 5c05 	strb.w	r5, [r6, #-5]
 8016676:	f89a 5002 	ldrb.w	r5, [sl, #2]
 801667a:	f806 5c04 	strb.w	r5, [r6, #-4]
 801667e:	e7de      	b.n	801663e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016680:	2600      	movs	r6, #0
 8016682:	1b9d      	subs	r5, r3, r6
 8016684:	2d00      	cmp	r5, #0
 8016686:	dc38      	bgt.n	80166fa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016688:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801668c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016690:	441c      	add	r4, r3
 8016692:	2900      	cmp	r1, #0
 8016694:	dd59      	ble.n	801674a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8016696:	ee30 0a04 	vadd.f32	s0, s0, s8
 801669a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801669c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80166a0:	3901      	subs	r1, #1
 80166a2:	eeb0 6a62 	vmov.f32	s12, s5
 80166a6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80166aa:	ee31 1a05 	vadd.f32	s2, s2, s10
 80166ae:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80166b2:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80166b6:	eeb0 6a43 	vmov.f32	s12, s6
 80166ba:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80166be:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80166c2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80166c6:	ee61 7a27 	vmul.f32	s15, s2, s15
 80166ca:	ee77 2a62 	vsub.f32	s5, s14, s5
 80166ce:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80166d2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80166d6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80166da:	ee12 2a90 	vmov	r2, s5
 80166de:	eef0 2a47 	vmov.f32	s5, s14
 80166e2:	fb92 fef3 	sdiv	lr, r2, r3
 80166e6:	ee13 2a10 	vmov	r2, s6
 80166ea:	eeb0 3a67 	vmov.f32	s6, s15
 80166ee:	fb92 fcf3 	sdiv	ip, r2, r3
 80166f2:	9a01      	ldr	r2, [sp, #4]
 80166f4:	bf08      	it	eq
 80166f6:	4613      	moveq	r3, r2
 80166f8:	e772      	b.n	80165e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 80166fa:	ea5f 4920 	movs.w	r9, r0, asr #16
 80166fe:	d420      	bmi.n	8016742 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016700:	f8d7 b008 	ldr.w	fp, [r7, #8]
 8016704:	45cb      	cmp	fp, r9
 8016706:	dd1c      	ble.n	8016742 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016708:	ea5f 4a22 	movs.w	sl, r2, asr #16
 801670c:	d419      	bmi.n	8016742 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801670e:	68fd      	ldr	r5, [r7, #12]
 8016710:	4555      	cmp	r5, sl
 8016712:	dd16      	ble.n	8016742 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8016714:	fa0f f58b 	sxth.w	r5, fp
 8016718:	fb0a 9505 	mla	r5, sl, r5, r9
 801671c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016720:	f818 9005 	ldrb.w	r9, [r8, r5]
 8016724:	eb08 0b05 	add.w	fp, r8, r5
 8016728:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801672c:	f804 9005 	strb.w	r9, [r4, r5]
 8016730:	4425      	add	r5, r4
 8016732:	f89b 9001 	ldrb.w	r9, [fp, #1]
 8016736:	f885 9001 	strb.w	r9, [r5, #1]
 801673a:	f89b 9002 	ldrb.w	r9, [fp, #2]
 801673e:	f885 9002 	strb.w	r9, [r5, #2]
 8016742:	4470      	add	r0, lr
 8016744:	4462      	add	r2, ip
 8016746:	3601      	adds	r6, #1
 8016748:	e79b      	b.n	8016682 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 801674a:	b003      	add	sp, #12
 801674c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016750 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016750:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016754:	b085      	sub	sp, #20
 8016756:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801675a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801675c:	9202      	str	r2, [sp, #8]
 801675e:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016762:	6860      	ldr	r0, [r4, #4]
 8016764:	9203      	str	r2, [sp, #12]
 8016766:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801676a:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 801676e:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016772:	fb00 2505 	mla	r5, r0, r5, r2
 8016776:	6822      	ldr	r2, [r4, #0]
 8016778:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801677c:	4415      	add	r5, r2
 801677e:	f8dc 2000 	ldr.w	r2, [ip]
 8016782:	9201      	str	r2, [sp, #4]
 8016784:	2900      	cmp	r1, #0
 8016786:	dc03      	bgt.n	8016790 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 8016788:	9a02      	ldr	r2, [sp, #8]
 801678a:	2a00      	cmp	r2, #0
 801678c:	f340 8122 	ble.w	80169d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 8016790:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016792:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016796:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 801679a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801679c:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80167a0:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80167a4:	2b00      	cmp	r3, #0
 80167a6:	dd0d      	ble.n	80167c4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80167a8:	1422      	asrs	r2, r4, #16
 80167aa:	d405      	bmi.n	80167b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167ac:	4542      	cmp	r2, r8
 80167ae:	da03      	bge.n	80167b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167b0:	1402      	asrs	r2, r0, #16
 80167b2:	d401      	bmi.n	80167b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80167b4:	42ba      	cmp	r2, r7
 80167b6:	db06      	blt.n	80167c6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80167b8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80167ba:	4474      	add	r4, lr
 80167bc:	3b01      	subs	r3, #1
 80167be:	3503      	adds	r5, #3
 80167c0:	4410      	add	r0, r2
 80167c2:	e7ef      	b.n	80167a4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80167c4:	d072      	beq.n	80168ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80167c6:	1e5a      	subs	r2, r3, #1
 80167c8:	fb0e 4602 	mla	r6, lr, r2, r4
 80167cc:	1436      	asrs	r6, r6, #16
 80167ce:	d462      	bmi.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167d0:	4546      	cmp	r6, r8
 80167d2:	da60      	bge.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167d4:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80167d6:	fb06 0202 	mla	r2, r6, r2, r0
 80167da:	1412      	asrs	r2, r2, #16
 80167dc:	d45b      	bmi.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167de:	42ba      	cmp	r2, r7
 80167e0:	da59      	bge.n	8016896 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80167e2:	1cef      	adds	r7, r5, #3
 80167e4:	4699      	mov	r9, r3
 80167e6:	f1b9 0f00 	cmp.w	r9, #0
 80167ea:	dd5a      	ble.n	80168a2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 80167ec:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80167f0:	1426      	asrs	r6, r4, #16
 80167f2:	1402      	asrs	r2, r0, #16
 80167f4:	fb08 6202 	mla	r2, r8, r2, r6
 80167f8:	9e01      	ldr	r6, [sp, #4]
 80167fa:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 80167fe:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016802:	d041      	beq.n	8016888 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016804:	9a03      	ldr	r2, [sp, #12]
 8016806:	fa5f fb86 	uxtb.w	fp, r6
 801680a:	fb02 f808 	mul.w	r8, r2, r8
 801680e:	f108 0201 	add.w	r2, r8, #1
 8016812:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016816:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 801681a:	1212      	asrs	r2, r2, #8
 801681c:	fa1f fa82 	uxth.w	sl, r2
 8016820:	43d2      	mvns	r2, r2
 8016822:	fb1b fb0a 	smulbb	fp, fp, sl
 8016826:	b2d2      	uxtb	r2, r2
 8016828:	fb08 b802 	mla	r8, r8, r2, fp
 801682c:	fa1f f888 	uxth.w	r8, r8
 8016830:	f108 0b01 	add.w	fp, r8, #1
 8016834:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016838:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 801683c:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016840:	fb1b fb0a 	smulbb	fp, fp, sl
 8016844:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016848:	fb16 fa0a 	smulbb	sl, r6, sl
 801684c:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016850:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016854:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016858:	fb06 aa02 	mla	sl, r6, r2, sl
 801685c:	fb08 b802 	mla	r8, r8, r2, fp
 8016860:	fa1f fa8a 	uxth.w	sl, sl
 8016864:	fa1f f888 	uxth.w	r8, r8
 8016868:	f10a 0601 	add.w	r6, sl, #1
 801686c:	f108 0b01 	add.w	fp, r8, #1
 8016870:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016874:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016878:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801687c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016880:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016884:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016888:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801688a:	4474      	add	r4, lr
 801688c:	3703      	adds	r7, #3
 801688e:	f109 39ff 	add.w	r9, r9, #4294967295
 8016892:	4410      	add	r0, r2
 8016894:	e7a7      	b.n	80167e6 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 8016896:	f04f 0800 	mov.w	r8, #0
 801689a:	eba3 0208 	sub.w	r2, r3, r8
 801689e:	2a00      	cmp	r2, #0
 80168a0:	dc3b      	bgt.n	801691a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80168a2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80168a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80168aa:	441d      	add	r5, r3
 80168ac:	2900      	cmp	r1, #0
 80168ae:	f340 8091 	ble.w	80169d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80168b2:	ee30 0a04 	vadd.f32	s0, s0, s8
 80168b6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80168b8:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80168bc:	3901      	subs	r1, #1
 80168be:	eeb0 6a62 	vmov.f32	s12, s5
 80168c2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80168c6:	ee31 1a05 	vadd.f32	s2, s2, s10
 80168ca:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168ce:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80168d2:	eeb0 6a43 	vmov.f32	s12, s6
 80168d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80168da:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80168de:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80168e2:	ee61 7a27 	vmul.f32	s15, s2, s15
 80168e6:	ee77 2a62 	vsub.f32	s5, s14, s5
 80168ea:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80168ee:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80168f2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80168f6:	ee12 2a90 	vmov	r2, s5
 80168fa:	eef0 2a47 	vmov.f32	s5, s14
 80168fe:	fb92 fef3 	sdiv	lr, r2, r3
 8016902:	ee13 2a10 	vmov	r2, s6
 8016906:	eeb0 3a67 	vmov.f32	s6, s15
 801690a:	fb92 f3f3 	sdiv	r3, r2, r3
 801690e:	9a02      	ldr	r2, [sp, #8]
 8016910:	9312      	str	r3, [sp, #72]	@ 0x48
 8016912:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016914:	bf08      	it	eq
 8016916:	4613      	moveq	r3, r2
 8016918:	e734      	b.n	8016784 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801691a:	1427      	asrs	r7, r4, #16
 801691c:	d454      	bmi.n	80169c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801691e:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016922:	42be      	cmp	r6, r7
 8016924:	dd50      	ble.n	80169c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016926:	ea5f 4920 	movs.w	r9, r0, asr #16
 801692a:	d44d      	bmi.n	80169c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801692c:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016930:	454a      	cmp	r2, r9
 8016932:	dd49      	ble.n	80169c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016934:	b236      	sxth	r6, r6
 8016936:	9a01      	ldr	r2, [sp, #4]
 8016938:	fb09 7606 	mla	r6, r9, r6, r7
 801693c:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016940:	0e3a      	lsrs	r2, r7, #24
 8016942:	d041      	beq.n	80169c8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8016944:	9e03      	ldr	r6, [sp, #12]
 8016946:	fa5f fb87 	uxtb.w	fp, r7
 801694a:	4372      	muls	r2, r6
 801694c:	1c56      	adds	r6, r2, #1
 801694e:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016952:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016956:	1212      	asrs	r2, r2, #8
 8016958:	f815 9006 	ldrb.w	r9, [r5, r6]
 801695c:	fa1f fa82 	uxth.w	sl, r2
 8016960:	43d2      	mvns	r2, r2
 8016962:	fb1b fb0a 	smulbb	fp, fp, sl
 8016966:	b2d2      	uxtb	r2, r2
 8016968:	fb09 b902 	mla	r9, r9, r2, fp
 801696c:	fa1f f989 	uxth.w	r9, r9
 8016970:	f109 0b01 	add.w	fp, r9, #1
 8016974:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016978:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 801697c:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016980:	fb1b fb0a 	smulbb	fp, fp, sl
 8016984:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016988:	fb17 fa0a 	smulbb	sl, r7, sl
 801698c:	f805 9006 	strb.w	r9, [r5, r6]
 8016990:	442e      	add	r6, r5
 8016992:	78b7      	ldrb	r7, [r6, #2]
 8016994:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016998:	fb07 aa02 	mla	sl, r7, r2, sl
 801699c:	fb09 b902 	mla	r9, r9, r2, fp
 80169a0:	fa1f fa8a 	uxth.w	sl, sl
 80169a4:	fa1f f989 	uxth.w	r9, r9
 80169a8:	f10a 0701 	add.w	r7, sl, #1
 80169ac:	f109 0b01 	add.w	fp, r9, #1
 80169b0:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80169b4:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80169b8:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80169bc:	ea4f 2929 	mov.w	r9, r9, asr #8
 80169c0:	f886 a002 	strb.w	sl, [r6, #2]
 80169c4:	f886 9001 	strb.w	r9, [r6, #1]
 80169c8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80169ca:	4474      	add	r4, lr
 80169cc:	f108 0801 	add.w	r8, r8, #1
 80169d0:	4410      	add	r0, r2
 80169d2:	e762      	b.n	801689a <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80169d4:	b005      	add	sp, #20
 80169d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080169da <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80169da:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80169de:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 80169e0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80169e4:	9201      	str	r2, [sp, #4]
 80169e6:	6860      	ldr	r0, [r4, #4]
 80169e8:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 80169ec:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 80169f0:	fb00 2505 	mla	r5, r0, r5, r2
 80169f4:	6822      	ldr	r2, [r4, #0]
 80169f6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80169fa:	4415      	add	r5, r2
 80169fc:	f8dc 2000 	ldr.w	r2, [ip]
 8016a00:	9200      	str	r2, [sp, #0]
 8016a02:	2900      	cmp	r1, #0
 8016a04:	dc03      	bgt.n	8016a0e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8016a06:	9a01      	ldr	r2, [sp, #4]
 8016a08:	2a00      	cmp	r2, #0
 8016a0a:	f340 812b 	ble.w	8016c64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016a0e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016a10:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016a14:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016a18:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016a1a:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016a1e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	dd0e      	ble.n	8016a44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8016a26:	1422      	asrs	r2, r4, #16
 8016a28:	d405      	bmi.n	8016a36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a2a:	4572      	cmp	r2, lr
 8016a2c:	da03      	bge.n	8016a36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a2e:	1402      	asrs	r2, r0, #16
 8016a30:	d401      	bmi.n	8016a36 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016a32:	42ba      	cmp	r2, r7
 8016a34:	db07      	blt.n	8016a46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 8016a36:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016a38:	3b01      	subs	r3, #1
 8016a3a:	3503      	adds	r5, #3
 8016a3c:	4414      	add	r4, r2
 8016a3e:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016a40:	4410      	add	r0, r2
 8016a42:	e7ee      	b.n	8016a22 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016a44:	d06f      	beq.n	8016b26 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 8016a46:	1e5a      	subs	r2, r3, #1
 8016a48:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8016a4a:	fb06 4602 	mla	r6, r6, r2, r4
 8016a4e:	1436      	asrs	r6, r6, #16
 8016a50:	d45e      	bmi.n	8016b10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a52:	4576      	cmp	r6, lr
 8016a54:	da5c      	bge.n	8016b10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a56:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8016a58:	fb06 0202 	mla	r2, r6, r2, r0
 8016a5c:	1412      	asrs	r2, r2, #16
 8016a5e:	d457      	bmi.n	8016b10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a60:	42ba      	cmp	r2, r7
 8016a62:	da55      	bge.n	8016b10 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8016a64:	1cee      	adds	r6, r5, #3
 8016a66:	469a      	mov	sl, r3
 8016a68:	f1ba 0f00 	cmp.w	sl, #0
 8016a6c:	dd56      	ble.n	8016b1c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016a6e:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016a72:	1427      	asrs	r7, r4, #16
 8016a74:	1402      	asrs	r2, r0, #16
 8016a76:	fb0e 7202 	mla	r2, lr, r2, r7
 8016a7a:	9f00      	ldr	r7, [sp, #0]
 8016a7c:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 8016a80:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 8016a84:	d03c      	beq.n	8016b00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016a86:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 8016a8a:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016a8e:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8016a92:	fa5f f28e 	uxtb.w	r2, lr
 8016a96:	b2ff      	uxtb	r7, r7
 8016a98:	f000 80dd 	beq.w	8016c56 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 8016a9c:	fa1f f882 	uxth.w	r8, r2
 8016aa0:	43d2      	mvns	r2, r2
 8016aa2:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 8016aa6:	fb17 f708 	smulbb	r7, r7, r8
 8016aaa:	b2d2      	uxtb	r2, r2
 8016aac:	fb19 f908 	smulbb	r9, r9, r8
 8016ab0:	fb0e 7702 	mla	r7, lr, r2, r7
 8016ab4:	fb1b f808 	smulbb	r8, fp, r8
 8016ab8:	b2bf      	uxth	r7, r7
 8016aba:	f107 0e01 	add.w	lr, r7, #1
 8016abe:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8016ac2:	123f      	asrs	r7, r7, #8
 8016ac4:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016ac8:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 8016acc:	fb07 9902 	mla	r9, r7, r2, r9
 8016ad0:	fa1f f989 	uxth.w	r9, r9
 8016ad4:	f109 0701 	add.w	r7, r9, #1
 8016ad8:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8016adc:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016ae0:	fb07 8802 	mla	r8, r7, r2, r8
 8016ae4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016ae8:	fa1f f888 	uxth.w	r8, r8
 8016aec:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016af0:	f108 0201 	add.w	r2, r8, #1
 8016af4:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8016af8:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016afc:	f806 8c01 	strb.w	r8, [r6, #-1]
 8016b00:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016b02:	3603      	adds	r6, #3
 8016b04:	f10a 3aff 	add.w	sl, sl, #4294967295
 8016b08:	4414      	add	r4, r2
 8016b0a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016b0c:	4410      	add	r0, r2
 8016b0e:	e7ab      	b.n	8016a68 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8016b10:	f04f 0e00 	mov.w	lr, #0
 8016b14:	eba3 020e 	sub.w	r2, r3, lr
 8016b18:	2a00      	cmp	r2, #0
 8016b1a:	dc3d      	bgt.n	8016b98 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8016b1c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016b20:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016b24:	441d      	add	r5, r3
 8016b26:	2900      	cmp	r1, #0
 8016b28:	f340 809c 	ble.w	8016c64 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016b2c:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016b30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b32:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016b36:	3901      	subs	r1, #1
 8016b38:	eeb0 6a62 	vmov.f32	s12, s5
 8016b3c:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016b40:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016b44:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b48:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016b4c:	eeb0 6a43 	vmov.f32	s12, s6
 8016b50:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016b54:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016b58:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016b5c:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016b60:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016b64:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016b68:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016b6c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016b70:	ee12 2a90 	vmov	r2, s5
 8016b74:	eef0 2a47 	vmov.f32	s5, s14
 8016b78:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b7c:	ee13 2a10 	vmov	r2, s6
 8016b80:	930f      	str	r3, [sp, #60]	@ 0x3c
 8016b82:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b84:	eeb0 3a67 	vmov.f32	s6, s15
 8016b88:	fb92 f3f3 	sdiv	r3, r2, r3
 8016b8c:	9a01      	ldr	r2, [sp, #4]
 8016b8e:	9310      	str	r3, [sp, #64]	@ 0x40
 8016b90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016b92:	bf08      	it	eq
 8016b94:	4613      	moveq	r3, r2
 8016b96:	e734      	b.n	8016a02 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8016b98:	1427      	asrs	r7, r4, #16
 8016b9a:	d44d      	bmi.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016b9c:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016ba0:	42be      	cmp	r6, r7
 8016ba2:	dd49      	ble.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016ba4:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016ba8:	d446      	bmi.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016baa:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016bae:	4542      	cmp	r2, r8
 8016bb0:	dd42      	ble.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bb2:	b236      	sxth	r6, r6
 8016bb4:	9a00      	ldr	r2, [sp, #0]
 8016bb6:	fb08 7606 	mla	r6, r8, r6, r7
 8016bba:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8016bbe:	0e3a      	lsrs	r2, r7, #24
 8016bc0:	d03a      	beq.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016bc2:	2aff      	cmp	r2, #255	@ 0xff
 8016bc4:	b2d6      	uxtb	r6, r2
 8016bc6:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8016bca:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8016bce:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8016bd2:	b2ff      	uxtb	r7, r7
 8016bd4:	d037      	beq.n	8016c46 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8016bd6:	fa1f f986 	uxth.w	r9, r6
 8016bda:	4472      	add	r2, lr
 8016bdc:	43f6      	mvns	r6, r6
 8016bde:	f815 8002 	ldrb.w	r8, [r5, r2]
 8016be2:	fb17 f709 	smulbb	r7, r7, r9
 8016be6:	fb1a fa09 	smulbb	sl, sl, r9
 8016bea:	b2f6      	uxtb	r6, r6
 8016bec:	fb1b f909 	smulbb	r9, fp, r9
 8016bf0:	fb08 7706 	mla	r7, r8, r6, r7
 8016bf4:	b2bf      	uxth	r7, r7
 8016bf6:	f107 0801 	add.w	r8, r7, #1
 8016bfa:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8016bfe:	123f      	asrs	r7, r7, #8
 8016c00:	54af      	strb	r7, [r5, r2]
 8016c02:	442a      	add	r2, r5
 8016c04:	7857      	ldrb	r7, [r2, #1]
 8016c06:	fb07 aa06 	mla	sl, r7, r6, sl
 8016c0a:	fa1f fa8a 	uxth.w	sl, sl
 8016c0e:	f10a 0701 	add.w	r7, sl, #1
 8016c12:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016c16:	7897      	ldrb	r7, [r2, #2]
 8016c18:	fb07 9906 	mla	r9, r7, r6, r9
 8016c1c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016c20:	fa1f f989 	uxth.w	r9, r9
 8016c24:	f882 a001 	strb.w	sl, [r2, #1]
 8016c28:	f109 0601 	add.w	r6, r9, #1
 8016c2c:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8016c30:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016c34:	f882 9002 	strb.w	r9, [r2, #2]
 8016c38:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016c3a:	f10e 0e01 	add.w	lr, lr, #1
 8016c3e:	4414      	add	r4, r2
 8016c40:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016c42:	4410      	add	r0, r2
 8016c44:	e766      	b.n	8016b14 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016c46:	4472      	add	r2, lr
 8016c48:	54af      	strb	r7, [r5, r2]
 8016c4a:	442a      	add	r2, r5
 8016c4c:	f882 a001 	strb.w	sl, [r2, #1]
 8016c50:	f882 b002 	strb.w	fp, [r2, #2]
 8016c54:	e7f0      	b.n	8016c38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8016c56:	f806 7c03 	strb.w	r7, [r6, #-3]
 8016c5a:	f806 9c02 	strb.w	r9, [r6, #-2]
 8016c5e:	f806 bc01 	strb.w	fp, [r6, #-1]
 8016c62:	e74d      	b.n	8016b00 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8016c64:	b003      	add	sp, #12
 8016c66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08016c6c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016c70:	b087      	sub	sp, #28
 8016c72:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016c76:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8016c78:	9204      	str	r2, [sp, #16]
 8016c7a:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8016c7e:	6860      	ldr	r0, [r4, #4]
 8016c80:	9205      	str	r2, [sp, #20]
 8016c82:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8016c86:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8016c8a:	9101      	str	r1, [sp, #4]
 8016c8c:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8016c90:	fb00 2505 	mla	r5, r0, r5, r2
 8016c94:	6822      	ldr	r2, [r4, #0]
 8016c96:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016c9a:	4415      	add	r5, r2
 8016c9c:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016ca0:	3201      	adds	r2, #1
 8016ca2:	f022 0201 	bic.w	r2, r2, #1
 8016ca6:	9202      	str	r2, [sp, #8]
 8016ca8:	f8dc 2000 	ldr.w	r2, [ip]
 8016cac:	9203      	str	r2, [sp, #12]
 8016cae:	9a01      	ldr	r2, [sp, #4]
 8016cb0:	2a00      	cmp	r2, #0
 8016cb2:	dc03      	bgt.n	8016cbc <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016cb4:	9a04      	ldr	r2, [sp, #16]
 8016cb6:	2a00      	cmp	r2, #0
 8016cb8:	f340 8135 	ble.w	8016f26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016cbc:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016cbe:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016cc2:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016cc6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016cc8:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016ccc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016cd0:	2b00      	cmp	r3, #0
 8016cd2:	dd0d      	ble.n	8016cf0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8016cd4:	1422      	asrs	r2, r4, #16
 8016cd6:	d405      	bmi.n	8016ce4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016cd8:	4542      	cmp	r2, r8
 8016cda:	da03      	bge.n	8016ce4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016cdc:	1402      	asrs	r2, r0, #16
 8016cde:	d401      	bmi.n	8016ce4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8016ce0:	42ba      	cmp	r2, r7
 8016ce2:	db06      	blt.n	8016cf2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8016ce4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016ce6:	4474      	add	r4, lr
 8016ce8:	3b01      	subs	r3, #1
 8016cea:	3503      	adds	r5, #3
 8016cec:	4410      	add	r0, r2
 8016cee:	e7ef      	b.n	8016cd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016cf0:	d077      	beq.n	8016de2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8016cf2:	1e5a      	subs	r2, r3, #1
 8016cf4:	fb0e 4602 	mla	r6, lr, r2, r4
 8016cf8:	1436      	asrs	r6, r6, #16
 8016cfa:	d469      	bmi.n	8016dd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016cfc:	4546      	cmp	r6, r8
 8016cfe:	da67      	bge.n	8016dd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d00:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016d02:	fb06 0202 	mla	r2, r6, r2, r0
 8016d06:	1412      	asrs	r2, r2, #16
 8016d08:	d462      	bmi.n	8016dd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d0a:	42ba      	cmp	r2, r7
 8016d0c:	da60      	bge.n	8016dd0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016d0e:	1cee      	adds	r6, r5, #3
 8016d10:	4699      	mov	r9, r3
 8016d12:	f1b9 0f00 	cmp.w	r9, #0
 8016d16:	dd5f      	ble.n	8016dd8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8016d18:	1422      	asrs	r2, r4, #16
 8016d1a:	9902      	ldr	r1, [sp, #8]
 8016d1c:	1407      	asrs	r7, r0, #16
 8016d1e:	fb01 2707 	mla	r7, r1, r7, r2
 8016d22:	9903      	ldr	r1, [sp, #12]
 8016d24:	087a      	lsrs	r2, r7, #1
 8016d26:	5c8a      	ldrb	r2, [r1, r2]
 8016d28:	07f9      	lsls	r1, r7, #31
 8016d2a:	bf54      	ite	pl
 8016d2c:	f002 020f 	andpl.w	r2, r2, #15
 8016d30:	1112      	asrmi	r2, r2, #4
 8016d32:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016d36:	b2d2      	uxtb	r2, r2
 8016d38:	2a00      	cmp	r2, #0
 8016d3a:	d042      	beq.n	8016dc2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8016d3c:	497b      	ldr	r1, [pc, #492]	@ (8016f2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016d3e:	680f      	ldr	r7, [r1, #0]
 8016d40:	9905      	ldr	r1, [sp, #20]
 8016d42:	fa5f fb87 	uxtb.w	fp, r7
 8016d46:	434a      	muls	r2, r1
 8016d48:	f102 0801 	add.w	r8, r2, #1
 8016d4c:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8016d50:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8016d54:	1212      	asrs	r2, r2, #8
 8016d56:	fa1f fa82 	uxth.w	sl, r2
 8016d5a:	43d2      	mvns	r2, r2
 8016d5c:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d60:	b2d2      	uxtb	r2, r2
 8016d62:	fb08 b802 	mla	r8, r8, r2, fp
 8016d66:	fa1f f888 	uxth.w	r8, r8
 8016d6a:	f108 0b01 	add.w	fp, r8, #1
 8016d6e:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016d72:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016d76:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016d7a:	fb1b fb0a 	smulbb	fp, fp, sl
 8016d7e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016d82:	fb17 fa0a 	smulbb	sl, r7, sl
 8016d86:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8016d8a:	f806 8c03 	strb.w	r8, [r6, #-3]
 8016d8e:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8016d92:	fb07 aa02 	mla	sl, r7, r2, sl
 8016d96:	fb08 b802 	mla	r8, r8, r2, fp
 8016d9a:	fa1f fa8a 	uxth.w	sl, sl
 8016d9e:	fa1f f888 	uxth.w	r8, r8
 8016da2:	f10a 0701 	add.w	r7, sl, #1
 8016da6:	f108 0b01 	add.w	fp, r8, #1
 8016daa:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016dae:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016db2:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016db6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016dba:	f806 ac01 	strb.w	sl, [r6, #-1]
 8016dbe:	f806 8c02 	strb.w	r8, [r6, #-2]
 8016dc2:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016dc4:	4474      	add	r4, lr
 8016dc6:	3603      	adds	r6, #3
 8016dc8:	f109 39ff 	add.w	r9, r9, #4294967295
 8016dcc:	4410      	add	r0, r2
 8016dce:	e7a0      	b.n	8016d12 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8016dd0:	2700      	movs	r7, #0
 8016dd2:	1bda      	subs	r2, r3, r7
 8016dd4:	2a00      	cmp	r2, #0
 8016dd6:	dc3e      	bgt.n	8016e56 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8016dd8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016ddc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016de0:	441d      	add	r5, r3
 8016de2:	9b01      	ldr	r3, [sp, #4]
 8016de4:	2b00      	cmp	r3, #0
 8016de6:	f340 809e 	ble.w	8016f26 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8016dea:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016dee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016df0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016df4:	eeb0 6a62 	vmov.f32	s12, s5
 8016df8:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016dfc:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016e00:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e04:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8016e08:	eeb0 6a43 	vmov.f32	s12, s6
 8016e0c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016e10:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8016e14:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016e18:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016e1c:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016e20:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016e24:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016e28:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016e2c:	ee12 2a90 	vmov	r2, s5
 8016e30:	eef0 2a47 	vmov.f32	s5, s14
 8016e34:	fb92 fef3 	sdiv	lr, r2, r3
 8016e38:	ee13 2a10 	vmov	r2, s6
 8016e3c:	eeb0 3a67 	vmov.f32	s6, s15
 8016e40:	fb92 f3f3 	sdiv	r3, r2, r3
 8016e44:	9314      	str	r3, [sp, #80]	@ 0x50
 8016e46:	9b01      	ldr	r3, [sp, #4]
 8016e48:	9a04      	ldr	r2, [sp, #16]
 8016e4a:	3b01      	subs	r3, #1
 8016e4c:	9301      	str	r3, [sp, #4]
 8016e4e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8016e50:	bf08      	it	eq
 8016e52:	4613      	moveq	r3, r2
 8016e54:	e72b      	b.n	8016cae <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8016e56:	1426      	asrs	r6, r4, #16
 8016e58:	d460      	bmi.n	8016f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e5a:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016e5e:	42b2      	cmp	r2, r6
 8016e60:	dd5c      	ble.n	8016f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e62:	ea5f 4820 	movs.w	r8, r0, asr #16
 8016e66:	d459      	bmi.n	8016f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e68:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016e6c:	4542      	cmp	r2, r8
 8016e6e:	dd55      	ble.n	8016f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e70:	9a02      	ldr	r2, [sp, #8]
 8016e72:	9903      	ldr	r1, [sp, #12]
 8016e74:	fb08 6602 	mla	r6, r8, r2, r6
 8016e78:	0872      	lsrs	r2, r6, #1
 8016e7a:	07f6      	lsls	r6, r6, #31
 8016e7c:	5c8a      	ldrb	r2, [r1, r2]
 8016e7e:	bf54      	ite	pl
 8016e80:	f002 020f 	andpl.w	r2, r2, #15
 8016e84:	1112      	asrmi	r2, r2, #4
 8016e86:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016e8a:	b2d2      	uxtb	r2, r2
 8016e8c:	2a00      	cmp	r2, #0
 8016e8e:	d045      	beq.n	8016f1c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8016e90:	4926      	ldr	r1, [pc, #152]	@ (8016f2c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8016e92:	f8d1 8000 	ldr.w	r8, [r1]
 8016e96:	9905      	ldr	r1, [sp, #20]
 8016e98:	fa5f fb88 	uxtb.w	fp, r8
 8016e9c:	434a      	muls	r2, r1
 8016e9e:	1c56      	adds	r6, r2, #1
 8016ea0:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016ea4:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016ea8:	1212      	asrs	r2, r2, #8
 8016eaa:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016eae:	fa1f fa82 	uxth.w	sl, r2
 8016eb2:	43d2      	mvns	r2, r2
 8016eb4:	fb1b fb0a 	smulbb	fp, fp, sl
 8016eb8:	b2d2      	uxtb	r2, r2
 8016eba:	fb09 b902 	mla	r9, r9, r2, fp
 8016ebe:	fa1f f989 	uxth.w	r9, r9
 8016ec2:	f109 0b01 	add.w	fp, r9, #1
 8016ec6:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016eca:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8016ece:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8016ed2:	fb1b fb0a 	smulbb	fp, fp, sl
 8016ed6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016eda:	fb18 fa0a 	smulbb	sl, r8, sl
 8016ede:	f805 9006 	strb.w	r9, [r5, r6]
 8016ee2:	442e      	add	r6, r5
 8016ee4:	f896 8002 	ldrb.w	r8, [r6, #2]
 8016ee8:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016eec:	fb08 aa02 	mla	sl, r8, r2, sl
 8016ef0:	fb09 b902 	mla	r9, r9, r2, fp
 8016ef4:	fa1f fa8a 	uxth.w	sl, sl
 8016ef8:	fa1f f989 	uxth.w	r9, r9
 8016efc:	f10a 0801 	add.w	r8, sl, #1
 8016f00:	f109 0b01 	add.w	fp, r9, #1
 8016f04:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8016f08:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016f0c:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016f10:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f14:	f886 a002 	strb.w	sl, [r6, #2]
 8016f18:	f886 9001 	strb.w	r9, [r6, #1]
 8016f1c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8016f1e:	4474      	add	r4, lr
 8016f20:	3701      	adds	r7, #1
 8016f22:	4410      	add	r0, r2
 8016f24:	e755      	b.n	8016dd2 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8016f26:	b007      	add	sp, #28
 8016f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8016f2c:	2402490c 	.word	0x2402490c

08016f30 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016f30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016f34:	b085      	sub	sp, #20
 8016f36:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016f3a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016f3c:	9203      	str	r2, [sp, #12]
 8016f3e:	6860      	ldr	r0, [r4, #4]
 8016f40:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016f44:	9100      	str	r1, [sp, #0]
 8016f46:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8016f4a:	fb00 2606 	mla	r6, r0, r6, r2
 8016f4e:	6822      	ldr	r2, [r4, #0]
 8016f50:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8016f54:	4416      	add	r6, r2
 8016f56:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8016f5a:	3201      	adds	r2, #1
 8016f5c:	f022 0201 	bic.w	r2, r2, #1
 8016f60:	9201      	str	r2, [sp, #4]
 8016f62:	f8dc 2000 	ldr.w	r2, [ip]
 8016f66:	9202      	str	r2, [sp, #8]
 8016f68:	9a00      	ldr	r2, [sp, #0]
 8016f6a:	2a00      	cmp	r2, #0
 8016f6c:	dc03      	bgt.n	8016f76 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8016f6e:	9a03      	ldr	r2, [sp, #12]
 8016f70:	2a00      	cmp	r2, #0
 8016f72:	f340 8140 	ble.w	80171f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8016f76:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016f78:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8016f7c:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8016f80:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016f82:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016f86:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016f8a:	2b00      	cmp	r3, #0
 8016f8c:	dd0e      	ble.n	8016fac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016f8e:	142a      	asrs	r2, r5, #16
 8016f90:	d405      	bmi.n	8016f9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f92:	4572      	cmp	r2, lr
 8016f94:	da03      	bge.n	8016f9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f96:	1422      	asrs	r2, r4, #16
 8016f98:	d401      	bmi.n	8016f9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016f9a:	42ba      	cmp	r2, r7
 8016f9c:	db07      	blt.n	8016fae <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016f9e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8016fa0:	3b01      	subs	r3, #1
 8016fa2:	3603      	adds	r6, #3
 8016fa4:	4415      	add	r5, r2
 8016fa6:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016fa8:	4414      	add	r4, r2
 8016faa:	e7ee      	b.n	8016f8a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8016fac:	d072      	beq.n	8017094 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8016fae:	1e5a      	subs	r2, r3, #1
 8016fb0:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8016fb2:	fb00 5002 	mla	r0, r0, r2, r5
 8016fb6:	1400      	asrs	r0, r0, #16
 8016fb8:	d463      	bmi.n	8017082 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fba:	4570      	cmp	r0, lr
 8016fbc:	da61      	bge.n	8017082 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fbe:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8016fc0:	fb00 4202 	mla	r2, r0, r2, r4
 8016fc4:	1412      	asrs	r2, r2, #16
 8016fc6:	d45c      	bmi.n	8017082 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fc8:	42ba      	cmp	r2, r7
 8016fca:	da5a      	bge.n	8017082 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8016fcc:	1cf0      	adds	r0, r6, #3
 8016fce:	469a      	mov	sl, r3
 8016fd0:	f1ba 0f00 	cmp.w	sl, #0
 8016fd4:	dd59      	ble.n	801708a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8016fd6:	142a      	asrs	r2, r5, #16
 8016fd8:	9901      	ldr	r1, [sp, #4]
 8016fda:	1427      	asrs	r7, r4, #16
 8016fdc:	fb01 2707 	mla	r7, r1, r7, r2
 8016fe0:	9902      	ldr	r1, [sp, #8]
 8016fe2:	087a      	lsrs	r2, r7, #1
 8016fe4:	5c8a      	ldrb	r2, [r1, r2]
 8016fe6:	07f9      	lsls	r1, r7, #31
 8016fe8:	bf54      	ite	pl
 8016fea:	f002 020f 	andpl.w	r2, r2, #15
 8016fee:	1112      	asrmi	r2, r2, #4
 8016ff0:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8016ff4:	b2d2      	uxtb	r2, r2
 8016ff6:	2a00      	cmp	r2, #0
 8016ff8:	d03b      	beq.n	8017072 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8016ffa:	4980      	ldr	r1, [pc, #512]	@ (80171fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8016ffc:	2aff      	cmp	r2, #255	@ 0xff
 8016ffe:	680f      	ldr	r7, [r1, #0]
 8017000:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017004:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017008:	b2ff      	uxtb	r7, r7
 801700a:	f000 80ed 	beq.w	80171e8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 801700e:	fa1f f882 	uxth.w	r8, r2
 8017012:	43d2      	mvns	r2, r2
 8017014:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017018:	fb17 f708 	smulbb	r7, r7, r8
 801701c:	b2d2      	uxtb	r2, r2
 801701e:	fb19 f908 	smulbb	r9, r9, r8
 8017022:	fb0e 7702 	mla	r7, lr, r2, r7
 8017026:	fb1b f808 	smulbb	r8, fp, r8
 801702a:	b2bf      	uxth	r7, r7
 801702c:	f107 0e01 	add.w	lr, r7, #1
 8017030:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017034:	123f      	asrs	r7, r7, #8
 8017036:	f800 7c03 	strb.w	r7, [r0, #-3]
 801703a:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 801703e:	fb07 9902 	mla	r9, r7, r2, r9
 8017042:	fa1f f989 	uxth.w	r9, r9
 8017046:	f109 0701 	add.w	r7, r9, #1
 801704a:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 801704e:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017052:	fb07 8802 	mla	r8, r7, r2, r8
 8017056:	ea4f 2929 	mov.w	r9, r9, asr #8
 801705a:	fa1f f888 	uxth.w	r8, r8
 801705e:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017062:	f108 0201 	add.w	r2, r8, #1
 8017066:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801706a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801706e:	f800 8c01 	strb.w	r8, [r0, #-1]
 8017072:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017074:	3003      	adds	r0, #3
 8017076:	f10a 3aff 	add.w	sl, sl, #4294967295
 801707a:	4415      	add	r5, r2
 801707c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801707e:	4414      	add	r4, r2
 8017080:	e7a6      	b.n	8016fd0 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017082:	2700      	movs	r7, #0
 8017084:	1bda      	subs	r2, r3, r7
 8017086:	2a00      	cmp	r2, #0
 8017088:	dc40      	bgt.n	801710c <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 801708a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801708e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017092:	441e      	add	r6, r3
 8017094:	9b00      	ldr	r3, [sp, #0]
 8017096:	2b00      	cmp	r3, #0
 8017098:	f340 80ad 	ble.w	80171f6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 801709c:	ee30 0a04 	vadd.f32	s0, s0, s8
 80170a0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170a2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80170a6:	eeb0 6a62 	vmov.f32	s12, s5
 80170aa:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80170ae:	ee31 1a05 	vadd.f32	s2, s2, s10
 80170b2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170b6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80170ba:	eeb0 6a43 	vmov.f32	s12, s6
 80170be:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80170c2:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 80170c6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80170ca:	ee61 7a27 	vmul.f32	s15, s2, s15
 80170ce:	ee77 2a62 	vsub.f32	s5, s14, s5
 80170d2:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80170d6:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80170da:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 80170de:	ee12 2a90 	vmov	r2, s5
 80170e2:	eef0 2a47 	vmov.f32	s5, s14
 80170e6:	fb92 f3f3 	sdiv	r3, r2, r3
 80170ea:	ee13 2a10 	vmov	r2, s6
 80170ee:	9311      	str	r3, [sp, #68]	@ 0x44
 80170f0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80170f2:	eeb0 3a67 	vmov.f32	s6, s15
 80170f6:	fb92 f3f3 	sdiv	r3, r2, r3
 80170fa:	9312      	str	r3, [sp, #72]	@ 0x48
 80170fc:	9b00      	ldr	r3, [sp, #0]
 80170fe:	9a03      	ldr	r2, [sp, #12]
 8017100:	3b01      	subs	r3, #1
 8017102:	9300      	str	r3, [sp, #0]
 8017104:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017106:	bf08      	it	eq
 8017108:	4613      	moveq	r3, r2
 801710a:	e72d      	b.n	8016f68 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 801710c:	1428      	asrs	r0, r5, #16
 801710e:	d45c      	bmi.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017110:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017114:	4282      	cmp	r2, r0
 8017116:	dd58      	ble.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017118:	ea5f 4e24 	movs.w	lr, r4, asr #16
 801711c:	d455      	bmi.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801711e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017122:	4572      	cmp	r2, lr
 8017124:	dd51      	ble.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017126:	9a01      	ldr	r2, [sp, #4]
 8017128:	9902      	ldr	r1, [sp, #8]
 801712a:	fb0e 0002 	mla	r0, lr, r2, r0
 801712e:	0842      	lsrs	r2, r0, #1
 8017130:	07c0      	lsls	r0, r0, #31
 8017132:	5c8a      	ldrb	r2, [r1, r2]
 8017134:	bf54      	ite	pl
 8017136:	f002 020f 	andpl.w	r2, r2, #15
 801713a:	1112      	asrmi	r2, r2, #4
 801713c:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017140:	b2d2      	uxtb	r2, r2
 8017142:	2a00      	cmp	r2, #0
 8017144:	d041      	beq.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8017146:	492d      	ldr	r1, [pc, #180]	@ (80171fc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017148:	2aff      	cmp	r2, #255	@ 0xff
 801714a:	6808      	ldr	r0, [r1, #0]
 801714c:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8017150:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 8017154:	fa5f fe80 	uxtb.w	lr, r0
 8017158:	ea4f 0047 	mov.w	r0, r7, lsl #1
 801715c:	d03b      	beq.n	80171d6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 801715e:	fa1f f982 	uxth.w	r9, r2
 8017162:	4438      	add	r0, r7
 8017164:	43d2      	mvns	r2, r2
 8017166:	f816 8000 	ldrb.w	r8, [r6, r0]
 801716a:	fb1e fe09 	smulbb	lr, lr, r9
 801716e:	fb1a fa09 	smulbb	sl, sl, r9
 8017172:	b2d2      	uxtb	r2, r2
 8017174:	fb1b f909 	smulbb	r9, fp, r9
 8017178:	fb08 ee02 	mla	lr, r8, r2, lr
 801717c:	fa1f fe8e 	uxth.w	lr, lr
 8017180:	f10e 0801 	add.w	r8, lr, #1
 8017184:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 8017188:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801718c:	f806 e000 	strb.w	lr, [r6, r0]
 8017190:	4430      	add	r0, r6
 8017192:	f890 e001 	ldrb.w	lr, [r0, #1]
 8017196:	fb0e aa02 	mla	sl, lr, r2, sl
 801719a:	fa1f fa8a 	uxth.w	sl, sl
 801719e:	f10a 0e01 	add.w	lr, sl, #1
 80171a2:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80171a6:	f890 e002 	ldrb.w	lr, [r0, #2]
 80171aa:	fb0e 9902 	mla	r9, lr, r2, r9
 80171ae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80171b2:	fa1f f989 	uxth.w	r9, r9
 80171b6:	f880 a001 	strb.w	sl, [r0, #1]
 80171ba:	f109 0201 	add.w	r2, r9, #1
 80171be:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80171c2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80171c6:	f880 9002 	strb.w	r9, [r0, #2]
 80171ca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80171cc:	3701      	adds	r7, #1
 80171ce:	4415      	add	r5, r2
 80171d0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80171d2:	4414      	add	r4, r2
 80171d4:	e756      	b.n	8017084 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80171d6:	4438      	add	r0, r7
 80171d8:	f806 e000 	strb.w	lr, [r6, r0]
 80171dc:	4430      	add	r0, r6
 80171de:	f880 a001 	strb.w	sl, [r0, #1]
 80171e2:	f880 b002 	strb.w	fp, [r0, #2]
 80171e6:	e7f0      	b.n	80171ca <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 80171e8:	f800 7c03 	strb.w	r7, [r0, #-3]
 80171ec:	f800 9c02 	strb.w	r9, [r0, #-2]
 80171f0:	f800 bc01 	strb.w	fp, [r0, #-1]
 80171f4:	e73d      	b.n	8017072 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80171f6:	b005      	add	sp, #20
 80171f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80171fc:	2402490c 	.word	0x2402490c

08017200 <_ZN8touchgfx8LCD24bppD1Ev>:
 8017200:	4770      	bx	lr

08017202 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 8017202:	4770      	bx	lr

08017204 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 8017204:	4770      	bx	lr

08017206 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 8017206:	4770      	bx	lr

08017208 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8017208:	4770      	bx	lr

0801720a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 801720a:	4770      	bx	lr

0801720c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 801720c:	4770      	bx	lr

0801720e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 801720e:	4770      	bx	lr

08017210 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8017210:	4770      	bx	lr

08017212 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017212:	4770      	bx	lr

08017214 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017214:	4770      	bx	lr

08017216 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017216:	4770      	bx	lr

08017218 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017218:	4770      	bx	lr

0801721a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801721a:	4770      	bx	lr

0801721c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801721c:	4770      	bx	lr

0801721e <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801721e:	4770      	bx	lr

08017220 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017220:	4770      	bx	lr

08017222 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 8017222:	4770      	bx	lr

08017224 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 8017224:	4770      	bx	lr

08017226 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 8017226:	4770      	bx	lr

08017228 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8017228:	4770      	bx	lr

0801722a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 801722a:	4770      	bx	lr

0801722c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 801722c:	4770      	bx	lr

0801722e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 801722e:	4770      	bx	lr

08017230 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8017230:	4770      	bx	lr
	...

08017234 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 8017234:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017236:	4606      	mov	r6, r0
 8017238:	b087      	sub	sp, #28
 801723a:	4615      	mov	r5, r2
 801723c:	461f      	mov	r7, r3
 801723e:	b353      	cbz	r3, 8017296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017240:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8017244:	2b00      	cmp	r3, #0
 8017246:	dd26      	ble.n	8017296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017248:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 801724c:	2b00      	cmp	r3, #0
 801724e:	dd22      	ble.n	8017296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8017250:	6808      	ldr	r0, [r1, #0]
 8017252:	aa04      	add	r2, sp, #16
 8017254:	6849      	ldr	r1, [r1, #4]
 8017256:	4c1b      	ldr	r4, [pc, #108]	@ (80172c4 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8017258:	c203      	stmia	r2!, {r0, r1}
 801725a:	a804      	add	r0, sp, #16
 801725c:	f7fa ffb8 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017260:	6820      	ldr	r0, [r4, #0]
 8017262:	6803      	ldr	r3, [r0, #0]
 8017264:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017266:	4798      	blx	r3
 8017268:	2fff      	cmp	r7, #255	@ 0xff
 801726a:	d016      	beq.n	801729a <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 801726c:	f010 0f08 	tst.w	r0, #8
 8017270:	6820      	ldr	r0, [r4, #0]
 8017272:	d015      	beq.n	80172a0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 8017274:	2400      	movs	r4, #0
 8017276:	6801      	ldr	r1, [r0, #0]
 8017278:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 801727c:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8017280:	e9cd 7402 	strd	r7, r4, [sp, #8]
 8017284:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 8017288:	9401      	str	r4, [sp, #4]
 801728a:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 801728e:	9400      	str	r4, [sp, #0]
 8017290:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 8017292:	4629      	mov	r1, r5
 8017294:	47a0      	blx	r4
 8017296:	b007      	add	sp, #28
 8017298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801729a:	f010 0f02 	tst.w	r0, #2
 801729e:	e7e7      	b.n	8017270 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80172a0:	6803      	ldr	r3, [r0, #0]
 80172a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80172a4:	4798      	blx	r3
 80172a6:	4b08      	ldr	r3, [pc, #32]	@ (80172c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80172a8:	4601      	mov	r1, r0
 80172aa:	4630      	mov	r0, r6
 80172ac:	881a      	ldrh	r2, [r3, #0]
 80172ae:	6833      	ldr	r3, [r6, #0]
 80172b0:	e9cd 5700 	strd	r5, r7, [sp]
 80172b4:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80172b6:	ab04      	add	r3, sp, #16
 80172b8:	47a8      	blx	r5
 80172ba:	6820      	ldr	r0, [r4, #0]
 80172bc:	6803      	ldr	r3, [r0, #0]
 80172be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80172c0:	4798      	blx	r3
 80172c2:	e7e8      	b.n	8017296 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80172c4:	240248fc 	.word	0x240248fc
 80172c8:	240248f6 	.word	0x240248f6

080172cc <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80172cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80172d0:	b08b      	sub	sp, #44	@ 0x2c
 80172d2:	460d      	mov	r5, r1
 80172d4:	4616      	mov	r6, r2
 80172d6:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 80172da:	f1b8 0f00 	cmp.w	r8, #0
 80172de:	d047      	beq.n	8017370 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 80172e0:	6810      	ldr	r0, [r2, #0]
 80172e2:	ac06      	add	r4, sp, #24
 80172e4:	6851      	ldr	r1, [r2, #4]
 80172e6:	4f51      	ldr	r7, [pc, #324]	@ (801742c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 80172e8:	c403      	stmia	r4!, {r0, r1}
 80172ea:	6818      	ldr	r0, [r3, #0]
 80172ec:	ac08      	add	r4, sp, #32
 80172ee:	6859      	ldr	r1, [r3, #4]
 80172f0:	c403      	stmia	r4!, {r0, r1}
 80172f2:	a806      	add	r0, sp, #24
 80172f4:	f7fa ff6c 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80172f8:	4631      	mov	r1, r6
 80172fa:	a808      	add	r0, sp, #32
 80172fc:	f7fa ff90 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017300:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8017304:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8017308:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801730c:	6838      	ldr	r0, [r7, #0]
 801730e:	fb11 2103 	smlabb	r1, r1, r3, r2
 8017312:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8017316:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 801731a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801731e:	440d      	add	r5, r1
 8017320:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8017324:	440a      	add	r2, r1
 8017326:	f8ad 2020 	strh.w	r2, [sp, #32]
 801732a:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801732e:	4413      	add	r3, r2
 8017330:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8017334:	6803      	ldr	r3, [r0, #0]
 8017336:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017338:	4798      	blx	r3
 801733a:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801733e:	d01a      	beq.n	8017376 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8017340:	f010 0f04 	tst.w	r0, #4
 8017344:	6838      	ldr	r0, [r7, #0]
 8017346:	d019      	beq.n	801737c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8017348:	2100      	movs	r1, #0
 801734a:	6807      	ldr	r7, [r0, #0]
 801734c:	b2a4      	uxth	r4, r4
 801734e:	f8cd 800c 	str.w	r8, [sp, #12]
 8017352:	b2b6      	uxth	r6, r6
 8017354:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8017358:	9401      	str	r4, [sp, #4]
 801735a:	9600      	str	r6, [sp, #0]
 801735c:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8017360:	e9cd 1104 	strd	r1, r1, [sp, #16]
 8017364:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8017368:	9102      	str	r1, [sp, #8]
 801736a:	4629      	mov	r1, r5
 801736c:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801736e:	47a0      	blx	r4
 8017370:	b00b      	add	sp, #44	@ 0x2c
 8017372:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017376:	f010 0f01 	tst.w	r0, #1
 801737a:	e7e3      	b.n	8017344 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 801737c:	6803      	ldr	r3, [r0, #0]
 801737e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017380:	4798      	blx	r3
 8017382:	4a2b      	ldr	r2, [pc, #172]	@ (8017430 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 8017384:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 8017388:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 801738c:	8813      	ldrh	r3, [r2, #0]
 801738e:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 8017392:	fb03 f404 	mul.w	r4, r3, r4
 8017396:	fb03 c101 	mla	r1, r3, r1, ip
 801739a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801739e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80173a2:	4408      	add	r0, r1
 80173a4:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80173a8:	4404      	add	r4, r0
 80173aa:	d02e      	beq.n	801740a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80173ac:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80173b0:	1b9b      	subs	r3, r3, r6
 80173b2:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 80173b6:	1b96      	subs	r6, r2, r6
 80173b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173bc:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80173c0:	42a0      	cmp	r0, r4
 80173c2:	d22d      	bcs.n	8017420 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80173c4:	eb00 0e01 	add.w	lr, r0, r1
 80173c8:	4570      	cmp	r0, lr
 80173ca:	d210      	bcs.n	80173ee <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80173cc:	f890 9000 	ldrb.w	r9, [r0]
 80173d0:	f815 2b01 	ldrb.w	r2, [r5], #1
 80173d4:	fb19 f90c 	smulbb	r9, r9, ip
 80173d8:	fb02 9208 	mla	r2, r2, r8, r9
 80173dc:	b292      	uxth	r2, r2
 80173de:	f102 0901 	add.w	r9, r2, #1
 80173e2:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 80173e6:	1212      	asrs	r2, r2, #8
 80173e8:	f800 2b01 	strb.w	r2, [r0], #1
 80173ec:	e7ec      	b.n	80173c8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 80173ee:	4418      	add	r0, r3
 80173f0:	4435      	add	r5, r6
 80173f2:	e7e5      	b.n	80173c0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 80173f4:	8813      	ldrh	r3, [r2, #0]
 80173f6:	1b9b      	subs	r3, r3, r6
 80173f8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173fc:	4418      	add	r0, r3
 80173fe:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8017402:	1b9b      	subs	r3, r3, r6
 8017404:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017408:	441d      	add	r5, r3
 801740a:	42a0      	cmp	r0, r4
 801740c:	d208      	bcs.n	8017420 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 801740e:	eb00 0c01 	add.w	ip, r0, r1
 8017412:	4560      	cmp	r0, ip
 8017414:	d2ee      	bcs.n	80173f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 8017416:	f815 3b01 	ldrb.w	r3, [r5], #1
 801741a:	f800 3b01 	strb.w	r3, [r0], #1
 801741e:	e7f8      	b.n	8017412 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8017420:	6838      	ldr	r0, [r7, #0]
 8017422:	6803      	ldr	r3, [r0, #0]
 8017424:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017426:	4798      	blx	r3
 8017428:	e7a2      	b.n	8017370 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 801742a:	bf00      	nop
 801742c:	240248fc 	.word	0x240248fc
 8017430:	240248f6 	.word	0x240248f6

08017434 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 8017434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8017436:	2300      	movs	r3, #0
 8017438:	b085      	sub	sp, #20
 801743a:	9300      	str	r3, [sp, #0]
 801743c:	4b41      	ldr	r3, [pc, #260]	@ (8017544 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 801743e:	781b      	ldrb	r3, [r3, #0]
 8017440:	2b00      	cmp	r3, #0
 8017442:	d136      	bne.n	80174b2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 8017444:	4a40      	ldr	r2, [pc, #256]	@ (8017548 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8017446:	f9b2 2000 	ldrsh.w	r2, [r2]
 801744a:	f8ad 2004 	strh.w	r2, [sp, #4]
 801744e:	2b00      	cmp	r3, #0
 8017450:	d131      	bne.n	80174b6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 8017452:	4b3e      	ldr	r3, [pc, #248]	@ (801754c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 8017454:	f9b3 3000 	ldrsh.w	r3, [r3]
 8017458:	ac02      	add	r4, sp, #8
 801745a:	6808      	ldr	r0, [r1, #0]
 801745c:	f8ad 3006 	strh.w	r3, [sp, #6]
 8017460:	ab02      	add	r3, sp, #8
 8017462:	6849      	ldr	r1, [r1, #4]
 8017464:	4d3a      	ldr	r5, [pc, #232]	@ (8017550 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 8017466:	c303      	stmia	r3!, {r0, r1}
 8017468:	4669      	mov	r1, sp
 801746a:	4620      	mov	r0, r4
 801746c:	f7fa fed8 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017470:	4668      	mov	r0, sp
 8017472:	f7fa fead 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017476:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801747a:	f8bd 2000 	ldrh.w	r2, [sp]
 801747e:	462e      	mov	r6, r5
 8017480:	6828      	ldr	r0, [r5, #0]
 8017482:	4413      	add	r3, r2
 8017484:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 8017488:	f8ad 3008 	strh.w	r3, [sp, #8]
 801748c:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8017490:	4413      	add	r3, r2
 8017492:	f8ad 300a 	strh.w	r3, [sp, #10]
 8017496:	6803      	ldr	r3, [r0, #0]
 8017498:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801749a:	4798      	blx	r3
 801749c:	f010 0f01 	tst.w	r0, #1
 80174a0:	d00b      	beq.n	80174ba <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80174a2:	6828      	ldr	r0, [r5, #0]
 80174a4:	6803      	ldr	r3, [r0, #0]
 80174a6:	e894 0006 	ldmia.w	r4, {r1, r2}
 80174aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80174ac:	4798      	blx	r3
 80174ae:	b005      	add	sp, #20
 80174b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80174b2:	4a26      	ldr	r2, [pc, #152]	@ (801754c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80174b4:	e7c7      	b.n	8017446 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80174b6:	4b24      	ldr	r3, [pc, #144]	@ (8017548 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80174b8:	e7cc      	b.n	8017454 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80174ba:	6830      	ldr	r0, [r6, #0]
 80174bc:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80174c0:	6803      	ldr	r3, [r0, #0]
 80174c2:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80174c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80174c8:	4798      	blx	r3
 80174ca:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80174ce:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80174d2:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80174d6:	fb14 3402 	smlabb	r4, r4, r2, r3
 80174da:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80174de:	4404      	add	r4, r0
 80174e0:	6830      	ldr	r0, [r6, #0]
 80174e2:	6803      	ldr	r3, [r0, #0]
 80174e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80174e6:	4798      	blx	r3
 80174e8:	4917      	ldr	r1, [pc, #92]	@ (8017548 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80174ea:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 80174ee:	880b      	ldrh	r3, [r1, #0]
 80174f0:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 80174f4:	fb03 c202 	mla	r2, r3, r2, ip
 80174f8:	437b      	muls	r3, r7
 80174fa:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 80174fe:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017502:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017506:	4410      	add	r0, r2
 8017508:	18c2      	adds	r2, r0, r3
 801750a:	4290      	cmp	r0, r2
 801750c:	d214      	bcs.n	8017538 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 801750e:	eb00 0c07 	add.w	ip, r0, r7
 8017512:	4560      	cmp	r0, ip
 8017514:	d204      	bcs.n	8017520 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 8017516:	f814 3b01 	ldrb.w	r3, [r4], #1
 801751a:	f800 3b01 	strb.w	r3, [r0], #1
 801751e:	e7f8      	b.n	8017512 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8017520:	880b      	ldrh	r3, [r1, #0]
 8017522:	1b5b      	subs	r3, r3, r5
 8017524:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017528:	4418      	add	r0, r3
 801752a:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801752e:	1b5b      	subs	r3, r3, r5
 8017530:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017534:	441c      	add	r4, r3
 8017536:	e7e8      	b.n	801750a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8017538:	6830      	ldr	r0, [r6, #0]
 801753a:	6803      	ldr	r3, [r0, #0]
 801753c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801753e:	4798      	blx	r3
 8017540:	e7b5      	b.n	80174ae <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 8017542:	bf00      	nop
 8017544:	240248f4 	.word	0x240248f4
 8017548:	240248f6 	.word	0x240248f6
 801754c:	240248f8 	.word	0x240248f8
 8017550:	240248fc 	.word	0x240248fc

08017554 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8017554:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017558:	b08f      	sub	sp, #60	@ 0x3c
 801755a:	461c      	mov	r4, r3
 801755c:	9203      	str	r2, [sp, #12]
 801755e:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017562:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8017564:	6820      	ldr	r0, [r4, #0]
 8017566:	9100      	str	r1, [sp, #0]
 8017568:	9204      	str	r2, [sp, #16]
 801756a:	aa0a      	add	r2, sp, #40	@ 0x28
 801756c:	6861      	ldr	r1, [r4, #4]
 801756e:	c203      	stmia	r2!, {r0, r1}
 8017570:	6818      	ldr	r0, [r3, #0]
 8017572:	aa0c      	add	r2, sp, #48	@ 0x30
 8017574:	6859      	ldr	r1, [r3, #4]
 8017576:	c203      	stmia	r2!, {r0, r1}
 8017578:	a80a      	add	r0, sp, #40	@ 0x28
 801757a:	f7fa fe29 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801757e:	4621      	mov	r1, r4
 8017580:	a80c      	add	r0, sp, #48	@ 0x30
 8017582:	f7fa fe4d 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017586:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 801758a:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 801758e:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8017592:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8017596:	bfdb      	ittet	le
 8017598:	b2b3      	uxthle	r3, r6
 801759a:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 801759e:	2301      	movgt	r3, #1
 80175a0:	fb92 f3f3 	sdivle	r3, r2, r3
 80175a4:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80175a8:	441d      	add	r5, r3
 80175aa:	fb92 f1f3 	sdiv	r1, r2, r3
 80175ae:	fa1f fc81 	uxth.w	ip, r1
 80175b2:	3d01      	subs	r5, #1
 80175b4:	fb0c 2413 	mls	r4, ip, r3, r2
 80175b8:	4661      	mov	r1, ip
 80175ba:	fb14 f406 	smulbb	r4, r4, r6
 80175be:	4404      	add	r4, r0
 80175c0:	fb95 f5f3 	sdiv	r5, r5, r3
 80175c4:	b2a4      	uxth	r4, r4
 80175c6:	b131      	cbz	r1, 80175d6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80175c8:	9b03      	ldr	r3, [sp, #12]
 80175ca:	9900      	ldr	r1, [sp, #0]
 80175cc:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80175d0:	ba1b      	rev	r3, r3
 80175d2:	4419      	add	r1, r3
 80175d4:	9100      	str	r1, [sp, #0]
 80175d6:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 80175da:	b2ad      	uxth	r5, r5
 80175dc:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 80175e0:	4418      	add	r0, r3
 80175e2:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 80175e6:	00ad      	lsls	r5, r5, #2
 80175e8:	441a      	add	r2, r3
 80175ea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80175ee:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 80175f2:	9301      	str	r3, [sp, #4]
 80175f4:	4b79      	ldr	r3, [pc, #484]	@ (80177dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80175f6:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 80175fa:	6818      	ldr	r0, [r3, #0]
 80175fc:	6803      	ldr	r3, [r0, #0]
 80175fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017600:	4798      	blx	r3
 8017602:	4a77      	ldr	r2, [pc, #476]	@ (80177e0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 8017604:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017608:	2c00      	cmp	r4, #0
 801760a:	8813      	ldrh	r3, [r2, #0]
 801760c:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017610:	9209      	str	r2, [sp, #36]	@ 0x24
 8017612:	fb03 c101 	mla	r1, r3, r1, ip
 8017616:	fb06 f303 	mul.w	r3, r6, r3
 801761a:	bf18      	it	ne
 801761c:	2600      	movne	r6, #0
 801761e:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017622:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017626:	4408      	add	r0, r1
 8017628:	4403      	add	r3, r0
 801762a:	9306      	str	r3, [sp, #24]
 801762c:	f105 0304 	add.w	r3, r5, #4
 8017630:	9305      	str	r3, [sp, #20]
 8017632:	9b01      	ldr	r3, [sp, #4]
 8017634:	bf08      	it	eq
 8017636:	461e      	moveq	r6, r3
 8017638:	2300      	movs	r3, #0
 801763a:	b2b6      	uxth	r6, r6
 801763c:	9302      	str	r3, [sp, #8]
 801763e:	9a06      	ldr	r2, [sp, #24]
 8017640:	4290      	cmp	r0, r2
 8017642:	f080 80c2 	bcs.w	80177ca <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 8017646:	b963      	cbnz	r3, 8017662 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017648:	9b00      	ldr	r3, [sp, #0]
 801764a:	781a      	ldrb	r2, [r3, #0]
 801764c:	0993      	lsrs	r3, r2, #6
 801764e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017652:	9202      	str	r2, [sp, #8]
 8017654:	1e5a      	subs	r2, r3, #1
 8017656:	2a02      	cmp	r2, #2
 8017658:	d815      	bhi.n	8017686 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 801765a:	9a00      	ldr	r2, [sp, #0]
 801765c:	b29b      	uxth	r3, r3
 801765e:	3201      	adds	r2, #1
 8017660:	9200      	str	r2, [sp, #0]
 8017662:	b1b4      	cbz	r4, 8017692 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 8017664:	429c      	cmp	r4, r3
 8017666:	bf91      	iteee	ls
 8017668:	1b1c      	subls	r4, r3, r4
 801766a:	1ae4      	subhi	r4, r4, r3
 801766c:	4635      	movhi	r5, r6
 801766e:	f04f 0e00 	movhi.w	lr, #0
 8017672:	bf9b      	ittet	ls
 8017674:	fa1f fe84 	uxthls.w	lr, r4
 8017678:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 801767c:	b2a4      	uxthhi	r4, r4
 801767e:	2400      	movls	r4, #0
 8017680:	4673      	mov	r3, lr
 8017682:	462e      	mov	r6, r5
 8017684:	e7db      	b.n	801763e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 8017686:	9a00      	ldr	r2, [sp, #0]
 8017688:	9b00      	ldr	r3, [sp, #0]
 801768a:	3202      	adds	r2, #2
 801768c:	785b      	ldrb	r3, [r3, #1]
 801768e:	9200      	str	r2, [sp, #0]
 8017690:	e7e7      	b.n	8017662 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8017692:	2204      	movs	r2, #4
 8017694:	9905      	ldr	r1, [sp, #20]
 8017696:	429e      	cmp	r6, r3
 8017698:	4615      	mov	r5, r2
 801769a:	9a02      	ldr	r2, [sp, #8]
 801769c:	bf94      	ite	ls
 801769e:	eba3 0e06 	subls.w	lr, r3, r6
 80176a2:	46a6      	movhi	lr, r4
 80176a4:	fb15 1202 	smlabb	r2, r5, r2, r1
 80176a8:	9903      	ldr	r1, [sp, #12]
 80176aa:	bf8c      	ite	hi
 80176ac:	1af5      	subhi	r5, r6, r3
 80176ae:	fa1f fe8e 	uxthls.w	lr, lr
 80176b2:	f851 c002 	ldr.w	ip, [r1, r2]
 80176b6:	bf9a      	itte	ls
 80176b8:	4625      	movls	r5, r4
 80176ba:	4632      	movls	r2, r6
 80176bc:	b2ad      	uxthhi	r5, r5
 80176be:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80176c2:	bf88      	it	hi
 80176c4:	461a      	movhi	r2, r3
 80176c6:	b179      	cbz	r1, 80176e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80176c8:	29ff      	cmp	r1, #255	@ 0xff
 80176ca:	fa5f f98c 	uxtb.w	r9, ip
 80176ce:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80176d2:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80176d6:	d126      	bne.n	8017726 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80176d8:	9f04      	ldr	r7, [sp, #16]
 80176da:	2fff      	cmp	r7, #255	@ 0xff
 80176dc:	d123      	bne.n	8017726 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 80176de:	4682      	mov	sl, r0
 80176e0:	4611      	mov	r1, r2
 80176e2:	f10a 0a03 	add.w	sl, sl, #3
 80176e6:	b9a9      	cbnz	r1, 8017714 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 80176e8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80176ec:	429e      	cmp	r6, r3
 80176ee:	4410      	add	r0, r2
 80176f0:	d8c6      	bhi.n	8017680 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 80176f2:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 80176f6:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 80176fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80176fc:	1b64      	subs	r4, r4, r5
 80176fe:	9a01      	ldr	r2, [sp, #4]
 8017700:	881b      	ldrh	r3, [r3, #0]
 8017702:	b2a4      	uxth	r4, r4
 8017704:	1a9b      	subs	r3, r3, r2
 8017706:	2c00      	cmp	r4, #0
 8017708:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801770c:	bf18      	it	ne
 801770e:	2500      	movne	r5, #0
 8017710:	4418      	add	r0, r3
 8017712:	e7b5      	b.n	8017680 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 8017714:	3901      	subs	r1, #1
 8017716:	f80a 9c03 	strb.w	r9, [sl, #-3]
 801771a:	f80a 8c02 	strb.w	r8, [sl, #-2]
 801771e:	f80a cc01 	strb.w	ip, [sl, #-1]
 8017722:	b289      	uxth	r1, r1
 8017724:	e7dd      	b.n	80176e2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 8017726:	9f04      	ldr	r7, [sp, #16]
 8017728:	fb07 fa01 	mul.w	sl, r7, r1
 801772c:	f10a 0101 	add.w	r1, sl, #1
 8017730:	eb01 212a 	add.w	r1, r1, sl, asr #8
 8017734:	1209      	asrs	r1, r1, #8
 8017736:	ea6f 0a01 	mvn.w	sl, r1
 801773a:	b289      	uxth	r1, r1
 801773c:	fb19 f901 	smulbb	r9, r9, r1
 8017740:	fa5f fa8a 	uxtb.w	sl, sl
 8017744:	fb18 f801 	smulbb	r8, r8, r1
 8017748:	fb1c f101 	smulbb	r1, ip, r1
 801774c:	fa1f f789 	uxth.w	r7, r9
 8017750:	4684      	mov	ip, r0
 8017752:	4691      	mov	r9, r2
 8017754:	9707      	str	r7, [sp, #28]
 8017756:	b289      	uxth	r1, r1
 8017758:	fa1f f788 	uxth.w	r7, r8
 801775c:	9708      	str	r7, [sp, #32]
 801775e:	f10c 0c03 	add.w	ip, ip, #3
 8017762:	f1b9 0f00 	cmp.w	r9, #0
 8017766:	d0bf      	beq.n	80176e8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8017768:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 801776c:	f109 39ff 	add.w	r9, r9, #4294967295
 8017770:	9f07      	ldr	r7, [sp, #28]
 8017772:	fa1f f989 	uxth.w	r9, r9
 8017776:	fb08 780a 	mla	r8, r8, sl, r7
 801777a:	9f08      	ldr	r7, [sp, #32]
 801777c:	fa1f f888 	uxth.w	r8, r8
 8017780:	f108 0b01 	add.w	fp, r8, #1
 8017784:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017788:	ea4f 2828 	mov.w	r8, r8, asr #8
 801778c:	f80c 8c03 	strb.w	r8, [ip, #-3]
 8017790:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 8017794:	fb08 780a 	mla	r8, r8, sl, r7
 8017798:	fa1f f888 	uxth.w	r8, r8
 801779c:	f108 0b01 	add.w	fp, r8, #1
 80177a0:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80177a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80177a8:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80177ac:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80177b0:	fb08 180a 	mla	r8, r8, sl, r1
 80177b4:	fa1f f888 	uxth.w	r8, r8
 80177b8:	f108 0b01 	add.w	fp, r8, #1
 80177bc:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80177c0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80177c4:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80177c8:	e7c9      	b.n	801775e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80177ca:	4b04      	ldr	r3, [pc, #16]	@ (80177dc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80177cc:	6818      	ldr	r0, [r3, #0]
 80177ce:	6803      	ldr	r3, [r0, #0]
 80177d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80177d2:	4798      	blx	r3
 80177d4:	b00f      	add	sp, #60	@ 0x3c
 80177d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80177da:	bf00      	nop
 80177dc:	240248fc 	.word	0x240248fc
 80177e0:	240248f6 	.word	0x240248f6

080177e4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 80177e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80177e8:	b089      	sub	sp, #36	@ 0x24
 80177ea:	4607      	mov	r7, r0
 80177ec:	4689      	mov	r9, r1
 80177ee:	4692      	mov	sl, r2
 80177f0:	ac08      	add	r4, sp, #32
 80177f2:	461e      	mov	r6, r3
 80177f4:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 80177f8:	4620      	mov	r0, r4
 80177fa:	f7fd ff77 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 80177fe:	683b      	ldr	r3, [r7, #0]
 8017800:	4605      	mov	r5, r0
 8017802:	4620      	mov	r0, r4
 8017804:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8017808:	f7fd ff08 	bl	801561c <_ZNK8touchgfx6Bitmap8getWidthEv>
 801780c:	4683      	mov	fp, r0
 801780e:	4620      	mov	r0, r4
 8017810:	f7fd ff38 	bl	8015684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 8017814:	4653      	mov	r3, sl
 8017816:	464a      	mov	r2, r9
 8017818:	4639      	mov	r1, r7
 801781a:	9500      	str	r5, [sp, #0]
 801781c:	e9cd b001 	strd	fp, r0, [sp, #4]
 8017820:	a806      	add	r0, sp, #24
 8017822:	47c0      	blx	r8
 8017824:	a906      	add	r1, sp, #24
 8017826:	4630      	mov	r0, r6
 8017828:	f7fd fddc 	bl	80153e4 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 801782c:	4628      	mov	r0, r5
 801782e:	b009      	add	sp, #36	@ 0x24
 8017830:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017834 <_ZN8touchgfx8LCD24bppD0Ev>:
 8017834:	b510      	push	{r4, lr}
 8017836:	4604      	mov	r4, r0
 8017838:	216c      	movs	r1, #108	@ 0x6c
 801783a:	f008 fc60 	bl	80200fe <_ZdlPvj>
 801783e:	4620      	mov	r0, r4
 8017840:	bd10      	pop	{r4, pc}

08017842 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 8017842:	b510      	push	{r4, lr}
 8017844:	4604      	mov	r4, r0
 8017846:	2104      	movs	r1, #4
 8017848:	f008 fc59 	bl	80200fe <_ZdlPvj>
 801784c:	4620      	mov	r0, r4
 801784e:	bd10      	pop	{r4, pc}

08017850 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8017850:	b510      	push	{r4, lr}
 8017852:	4604      	mov	r4, r0
 8017854:	2104      	movs	r1, #4
 8017856:	f008 fc52 	bl	80200fe <_ZdlPvj>
 801785a:	4620      	mov	r0, r4
 801785c:	bd10      	pop	{r4, pc}

0801785e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 801785e:	b510      	push	{r4, lr}
 8017860:	4604      	mov	r4, r0
 8017862:	f640 0144 	movw	r1, #2116	@ 0x844
 8017866:	f008 fc4a 	bl	80200fe <_ZdlPvj>
 801786a:	4620      	mov	r0, r4
 801786c:	bd10      	pop	{r4, pc}

0801786e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 801786e:	b510      	push	{r4, lr}
 8017870:	4604      	mov	r4, r0
 8017872:	f44f 7182 	mov.w	r1, #260	@ 0x104
 8017876:	f008 fc42 	bl	80200fe <_ZdlPvj>
 801787a:	4620      	mov	r0, r4
 801787c:	bd10      	pop	{r4, pc}

0801787e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 801787e:	b510      	push	{r4, lr}
 8017880:	4604      	mov	r4, r0
 8017882:	2104      	movs	r1, #4
 8017884:	f008 fc3b 	bl	80200fe <_ZdlPvj>
 8017888:	4620      	mov	r0, r4
 801788a:	bd10      	pop	{r4, pc}

0801788c <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 801788c:	b510      	push	{r4, lr}
 801788e:	4604      	mov	r4, r0
 8017890:	2104      	movs	r1, #4
 8017892:	f008 fc34 	bl	80200fe <_ZdlPvj>
 8017896:	4620      	mov	r0, r4
 8017898:	bd10      	pop	{r4, pc}

0801789a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801789a:	b510      	push	{r4, lr}
 801789c:	4604      	mov	r4, r0
 801789e:	2104      	movs	r1, #4
 80178a0:	f008 fc2d 	bl	80200fe <_ZdlPvj>
 80178a4:	4620      	mov	r0, r4
 80178a6:	bd10      	pop	{r4, pc}

080178a8 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80178a8:	b510      	push	{r4, lr}
 80178aa:	4604      	mov	r4, r0
 80178ac:	2104      	movs	r1, #4
 80178ae:	f008 fc26 	bl	80200fe <_ZdlPvj>
 80178b2:	4620      	mov	r0, r4
 80178b4:	bd10      	pop	{r4, pc}

080178b6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80178b6:	b510      	push	{r4, lr}
 80178b8:	4604      	mov	r4, r0
 80178ba:	2104      	movs	r1, #4
 80178bc:	f008 fc1f 	bl	80200fe <_ZdlPvj>
 80178c0:	4620      	mov	r0, r4
 80178c2:	bd10      	pop	{r4, pc}

080178c4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80178c4:	b510      	push	{r4, lr}
 80178c6:	4604      	mov	r4, r0
 80178c8:	2104      	movs	r1, #4
 80178ca:	f008 fc18 	bl	80200fe <_ZdlPvj>
 80178ce:	4620      	mov	r0, r4
 80178d0:	bd10      	pop	{r4, pc}

080178d2 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80178d2:	b510      	push	{r4, lr}
 80178d4:	4604      	mov	r4, r0
 80178d6:	2104      	movs	r1, #4
 80178d8:	f008 fc11 	bl	80200fe <_ZdlPvj>
 80178dc:	4620      	mov	r0, r4
 80178de:	bd10      	pop	{r4, pc}

080178e0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 80178e0:	b510      	push	{r4, lr}
 80178e2:	4604      	mov	r4, r0
 80178e4:	2104      	movs	r1, #4
 80178e6:	f008 fc0a 	bl	80200fe <_ZdlPvj>
 80178ea:	4620      	mov	r0, r4
 80178ec:	bd10      	pop	{r4, pc}

080178ee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80178ee:	b510      	push	{r4, lr}
 80178f0:	4604      	mov	r4, r0
 80178f2:	2104      	movs	r1, #4
 80178f4:	f008 fc03 	bl	80200fe <_ZdlPvj>
 80178f8:	4620      	mov	r0, r4
 80178fa:	bd10      	pop	{r4, pc}

080178fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80178fc:	b510      	push	{r4, lr}
 80178fe:	4604      	mov	r4, r0
 8017900:	2104      	movs	r1, #4
 8017902:	f008 fbfc 	bl	80200fe <_ZdlPvj>
 8017906:	4620      	mov	r0, r4
 8017908:	bd10      	pop	{r4, pc}

0801790a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 801790a:	b510      	push	{r4, lr}
 801790c:	4604      	mov	r4, r0
 801790e:	2104      	movs	r1, #4
 8017910:	f008 fbf5 	bl	80200fe <_ZdlPvj>
 8017914:	4620      	mov	r0, r4
 8017916:	bd10      	pop	{r4, pc}

08017918 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8017918:	b510      	push	{r4, lr}
 801791a:	4604      	mov	r4, r0
 801791c:	2104      	movs	r1, #4
 801791e:	f008 fbee 	bl	80200fe <_ZdlPvj>
 8017922:	4620      	mov	r0, r4
 8017924:	bd10      	pop	{r4, pc}

08017926 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 8017926:	b510      	push	{r4, lr}
 8017928:	4604      	mov	r4, r0
 801792a:	2104      	movs	r1, #4
 801792c:	f008 fbe7 	bl	80200fe <_ZdlPvj>
 8017930:	4620      	mov	r0, r4
 8017932:	bd10      	pop	{r4, pc}

08017934 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 8017934:	b510      	push	{r4, lr}
 8017936:	4604      	mov	r4, r0
 8017938:	2104      	movs	r1, #4
 801793a:	f008 fbe0 	bl	80200fe <_ZdlPvj>
 801793e:	4620      	mov	r0, r4
 8017940:	bd10      	pop	{r4, pc}

08017942 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 8017942:	b510      	push	{r4, lr}
 8017944:	4604      	mov	r4, r0
 8017946:	2104      	movs	r1, #4
 8017948:	f008 fbd9 	bl	80200fe <_ZdlPvj>
 801794c:	4620      	mov	r0, r4
 801794e:	bd10      	pop	{r4, pc}

08017950 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8017950:	b510      	push	{r4, lr}
 8017952:	4604      	mov	r4, r0
 8017954:	2104      	movs	r1, #4
 8017956:	f008 fbd2 	bl	80200fe <_ZdlPvj>
 801795a:	4620      	mov	r0, r4
 801795c:	bd10      	pop	{r4, pc}

0801795e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 801795e:	b510      	push	{r4, lr}
 8017960:	4604      	mov	r4, r0
 8017962:	2104      	movs	r1, #4
 8017964:	f008 fbcb 	bl	80200fe <_ZdlPvj>
 8017968:	4620      	mov	r0, r4
 801796a:	bd10      	pop	{r4, pc}

0801796c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 801796c:	b510      	push	{r4, lr}
 801796e:	4604      	mov	r4, r0
 8017970:	2104      	movs	r1, #4
 8017972:	f008 fbc4 	bl	80200fe <_ZdlPvj>
 8017976:	4620      	mov	r0, r4
 8017978:	bd10      	pop	{r4, pc}

0801797a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 801797a:	b510      	push	{r4, lr}
 801797c:	4604      	mov	r4, r0
 801797e:	2104      	movs	r1, #4
 8017980:	f008 fbbd 	bl	80200fe <_ZdlPvj>
 8017984:	4620      	mov	r0, r4
 8017986:	bd10      	pop	{r4, pc}

08017988 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 8017988:	b510      	push	{r4, lr}
 801798a:	4604      	mov	r4, r0
 801798c:	2104      	movs	r1, #4
 801798e:	f008 fbb6 	bl	80200fe <_ZdlPvj>
 8017992:	4620      	mov	r0, r4
 8017994:	bd10      	pop	{r4, pc}
	...

08017998 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017998:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801799c:	b08f      	sub	sp, #60	@ 0x3c
 801799e:	461c      	mov	r4, r3
 80179a0:	460e      	mov	r6, r1
 80179a2:	9206      	str	r2, [sp, #24]
 80179a4:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80179a8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80179aa:	9202      	str	r2, [sp, #8]
 80179ac:	2a00      	cmp	r2, #0
 80179ae:	f000 8128 	beq.w	8017c02 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80179b2:	6820      	ldr	r0, [r4, #0]
 80179b4:	aa0a      	add	r2, sp, #40	@ 0x28
 80179b6:	6861      	ldr	r1, [r4, #4]
 80179b8:	c203      	stmia	r2!, {r0, r1}
 80179ba:	6818      	ldr	r0, [r3, #0]
 80179bc:	aa0c      	add	r2, sp, #48	@ 0x30
 80179be:	6859      	ldr	r1, [r3, #4]
 80179c0:	c203      	stmia	r2!, {r0, r1}
 80179c2:	a80a      	add	r0, sp, #40	@ 0x28
 80179c4:	f7fa fc04 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80179c8:	4621      	mov	r1, r4
 80179ca:	a80c      	add	r0, sp, #48	@ 0x30
 80179cc:	f7fa fc28 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80179d0:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80179d4:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80179d8:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 80179dc:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80179e0:	bfdb      	ittet	le
 80179e2:	b2bb      	uxthle	r3, r7
 80179e4:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80179e8:	2301      	movgt	r3, #1
 80179ea:	fb92 f3f3 	sdivle	r3, r2, r3
 80179ee:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80179f2:	441d      	add	r5, r3
 80179f4:	fb92 f1f3 	sdiv	r1, r2, r3
 80179f8:	fa1f fc81 	uxth.w	ip, r1
 80179fc:	3d01      	subs	r5, #1
 80179fe:	fb0c 2413 	mls	r4, ip, r3, r2
 8017a02:	4661      	mov	r1, ip
 8017a04:	fb14 f407 	smulbb	r4, r4, r7
 8017a08:	4404      	add	r4, r0
 8017a0a:	fb95 f5f3 	sdiv	r5, r5, r3
 8017a0e:	b2a4      	uxth	r4, r4
 8017a10:	b121      	cbz	r1, 8017a1c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 8017a12:	9b06      	ldr	r3, [sp, #24]
 8017a14:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8017a18:	ba1b      	rev	r3, r3
 8017a1a:	441e      	add	r6, r3
 8017a1c:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8017a20:	b2ad      	uxth	r5, r5
 8017a22:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 8017a26:	4418      	add	r0, r3
 8017a28:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8017a2c:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8017a30:	00ad      	lsls	r5, r5, #2
 8017a32:	441a      	add	r2, r3
 8017a34:	4b74      	ldr	r3, [pc, #464]	@ (8017c08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017a36:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8017a3a:	6818      	ldr	r0, [r3, #0]
 8017a3c:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8017a40:	6803      	ldr	r3, [r0, #0]
 8017a42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017a44:	4798      	blx	r3
 8017a46:	4a71      	ldr	r2, [pc, #452]	@ (8017c0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8017a48:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8017a4c:	2c00      	cmp	r4, #0
 8017a4e:	8813      	ldrh	r3, [r2, #0]
 8017a50:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8017a54:	9209      	str	r2, [sp, #36]	@ 0x24
 8017a56:	fb03 c101 	mla	r1, r3, r1, ip
 8017a5a:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8017a5e:	fb03 f307 	mul.w	r3, r3, r7
 8017a62:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017a66:	9204      	str	r2, [sp, #16]
 8017a68:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a6c:	9a02      	ldr	r2, [sp, #8]
 8017a6e:	4408      	add	r0, r1
 8017a70:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 8017a74:	4403      	add	r3, r0
 8017a76:	b292      	uxth	r2, r2
 8017a78:	9307      	str	r3, [sp, #28]
 8017a7a:	f105 0304 	add.w	r3, r5, #4
 8017a7e:	bf0c      	ite	eq
 8017a80:	4645      	moveq	r5, r8
 8017a82:	2500      	movne	r5, #0
 8017a84:	9308      	str	r3, [sp, #32]
 8017a86:	2300      	movs	r3, #0
 8017a88:	b2ad      	uxth	r5, r5
 8017a8a:	9205      	str	r2, [sp, #20]
 8017a8c:	9303      	str	r3, [sp, #12]
 8017a8e:	9a07      	ldr	r2, [sp, #28]
 8017a90:	4282      	cmp	r2, r0
 8017a92:	f240 80b1 	bls.w	8017bf8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 8017a96:	b95b      	cbnz	r3, 8017ab0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 8017a98:	7832      	ldrb	r2, [r6, #0]
 8017a9a:	0993      	lsrs	r3, r2, #6
 8017a9c:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8017aa0:	9203      	str	r2, [sp, #12]
 8017aa2:	1e5a      	subs	r2, r3, #1
 8017aa4:	2a02      	cmp	r2, #2
 8017aa6:	bf8d      	iteet	hi
 8017aa8:	7873      	ldrbhi	r3, [r6, #1]
 8017aaa:	3601      	addls	r6, #1
 8017aac:	b29b      	uxthls	r3, r3
 8017aae:	3602      	addhi	r6, #2
 8017ab0:	b184      	cbz	r4, 8017ad4 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 8017ab2:	429c      	cmp	r4, r3
 8017ab4:	bf91      	iteee	ls
 8017ab6:	1b1c      	subls	r4, r3, r4
 8017ab8:	1ae4      	subhi	r4, r4, r3
 8017aba:	4629      	movhi	r1, r5
 8017abc:	f04f 0e00 	movhi.w	lr, #0
 8017ac0:	bf9b      	ittet	ls
 8017ac2:	fa1f fe84 	uxthls.w	lr, r4
 8017ac6:	2400      	movls	r4, #0
 8017ac8:	b2a4      	uxthhi	r4, r4
 8017aca:	fa1f f188 	uxthls.w	r1, r8
 8017ace:	4673      	mov	r3, lr
 8017ad0:	460d      	mov	r5, r1
 8017ad2:	e7dc      	b.n	8017a8e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 8017ad4:	2203      	movs	r2, #3
 8017ad6:	9908      	ldr	r1, [sp, #32]
 8017ad8:	42ab      	cmp	r3, r5
 8017ada:	4617      	mov	r7, r2
 8017adc:	9a03      	ldr	r2, [sp, #12]
 8017ade:	bf24      	itt	cs
 8017ae0:	eba3 0e05 	subcs.w	lr, r3, r5
 8017ae4:	9501      	strcs	r5, [sp, #4]
 8017ae6:	fb17 1702 	smlabb	r7, r7, r2, r1
 8017aea:	9a06      	ldr	r2, [sp, #24]
 8017aec:	bf34      	ite	cc
 8017aee:	1ae9      	subcc	r1, r5, r3
 8017af0:	fa1f fe8e 	uxthcs.w	lr, lr
 8017af4:	4417      	add	r7, r2
 8017af6:	9a02      	ldr	r2, [sp, #8]
 8017af8:	bf2f      	iteee	cs
 8017afa:	4621      	movcs	r1, r4
 8017afc:	b289      	uxthcc	r1, r1
 8017afe:	9301      	strcc	r3, [sp, #4]
 8017b00:	46a6      	movcc	lr, r4
 8017b02:	2aff      	cmp	r2, #255	@ 0xff
 8017b04:	d11e      	bne.n	8017b44 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8017b06:	4681      	mov	r9, r0
 8017b08:	f8dd c004 	ldr.w	ip, [sp, #4]
 8017b0c:	f109 0903 	add.w	r9, r9, #3
 8017b10:	f1bc 0f00 	cmp.w	ip, #0
 8017b14:	d15f      	bne.n	8017bd6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8017b16:	9a01      	ldr	r2, [sp, #4]
 8017b18:	42ab      	cmp	r3, r5
 8017b1a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017b1e:	4410      	add	r0, r2
 8017b20:	d3d5      	bcc.n	8017ace <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017b22:	fa1f f188 	uxth.w	r1, r8
 8017b26:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8017b2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017b2c:	1a64      	subs	r4, r4, r1
 8017b2e:	881b      	ldrh	r3, [r3, #0]
 8017b30:	b2a4      	uxth	r4, r4
 8017b32:	eba3 0308 	sub.w	r3, r3, r8
 8017b36:	2c00      	cmp	r4, #0
 8017b38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017b3c:	bf18      	it	ne
 8017b3e:	2100      	movne	r1, #0
 8017b40:	4418      	add	r0, r3
 8017b42:	e7c4      	b.n	8017ace <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8017b44:	4684      	mov	ip, r0
 8017b46:	f8dd a004 	ldr.w	sl, [sp, #4]
 8017b4a:	f10c 0c03 	add.w	ip, ip, #3
 8017b4e:	f1ba 0f00 	cmp.w	sl, #0
 8017b52:	d0e0      	beq.n	8017b16 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8017b54:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8017b58:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017b5c:	9a05      	ldr	r2, [sp, #20]
 8017b5e:	f897 9000 	ldrb.w	r9, [r7]
 8017b62:	fa1f fa8a 	uxth.w	sl, sl
 8017b66:	fb1b fb02 	smulbb	fp, fp, r2
 8017b6a:	9a04      	ldr	r2, [sp, #16]
 8017b6c:	fb09 b902 	mla	r9, r9, r2, fp
 8017b70:	9a05      	ldr	r2, [sp, #20]
 8017b72:	fa1f f989 	uxth.w	r9, r9
 8017b76:	f109 0b01 	add.w	fp, r9, #1
 8017b7a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017b7e:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8017b82:	fb1b fb02 	smulbb	fp, fp, r2
 8017b86:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b8a:	9a04      	ldr	r2, [sp, #16]
 8017b8c:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8017b90:	f897 9001 	ldrb.w	r9, [r7, #1]
 8017b94:	fb09 b902 	mla	r9, r9, r2, fp
 8017b98:	9a05      	ldr	r2, [sp, #20]
 8017b9a:	fa1f f989 	uxth.w	r9, r9
 8017b9e:	f109 0b01 	add.w	fp, r9, #1
 8017ba2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017ba6:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8017baa:	fb1b fb02 	smulbb	fp, fp, r2
 8017bae:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017bb2:	9a04      	ldr	r2, [sp, #16]
 8017bb4:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8017bb8:	f897 9002 	ldrb.w	r9, [r7, #2]
 8017bbc:	fb09 b902 	mla	r9, r9, r2, fp
 8017bc0:	fa1f f989 	uxth.w	r9, r9
 8017bc4:	f109 0b01 	add.w	fp, r9, #1
 8017bc8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017bcc:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017bd0:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8017bd4:	e7b9      	b.n	8017b4a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8017bd6:	f897 a000 	ldrb.w	sl, [r7]
 8017bda:	f10c 3cff 	add.w	ip, ip, #4294967295
 8017bde:	f809 ac03 	strb.w	sl, [r9, #-3]
 8017be2:	fa1f fc8c 	uxth.w	ip, ip
 8017be6:	f897 a001 	ldrb.w	sl, [r7, #1]
 8017bea:	f809 ac02 	strb.w	sl, [r9, #-2]
 8017bee:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017bf2:	f809 ac01 	strb.w	sl, [r9, #-1]
 8017bf6:	e789      	b.n	8017b0c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8017bf8:	4b03      	ldr	r3, [pc, #12]	@ (8017c08 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8017bfa:	6818      	ldr	r0, [r3, #0]
 8017bfc:	6803      	ldr	r3, [r0, #0]
 8017bfe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017c00:	4798      	blx	r3
 8017c02:	b00f      	add	sp, #60	@ 0x3c
 8017c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017c08:	240248fc 	.word	0x240248fc
 8017c0c:	240248f6 	.word	0x240248f6

08017c10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8017c10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c14:	b09b      	sub	sp, #108	@ 0x6c
 8017c16:	461d      	mov	r5, r3
 8017c18:	4604      	mov	r4, r0
 8017c1a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8017c1c:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8017c20:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8017c24:	9208      	str	r2, [sp, #32]
 8017c26:	2a00      	cmp	r2, #0
 8017c28:	f000 81f3 	beq.w	8018012 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8017c2c:	6828      	ldr	r0, [r5, #0]
 8017c2e:	aa16      	add	r2, sp, #88	@ 0x58
 8017c30:	6869      	ldr	r1, [r5, #4]
 8017c32:	c203      	stmia	r2!, {r0, r1}
 8017c34:	6818      	ldr	r0, [r3, #0]
 8017c36:	aa18      	add	r2, sp, #96	@ 0x60
 8017c38:	6859      	ldr	r1, [r3, #4]
 8017c3a:	c203      	stmia	r2!, {r0, r1}
 8017c3c:	a816      	add	r0, sp, #88	@ 0x58
 8017c3e:	f7fa fac7 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8017c42:	4629      	mov	r1, r5
 8017c44:	a818      	add	r0, sp, #96	@ 0x60
 8017c46:	f7fa faeb 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8017c4a:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8017c4e:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8017c52:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017c56:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8017c5a:	bfdb      	ittet	le
 8017c5c:	b29a      	uxthle	r2, r3
 8017c5e:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8017c62:	f04f 0a01 	movgt.w	sl, #1
 8017c66:	fb91 faf2 	sdivle	sl, r1, r2
 8017c6a:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8017c6e:	4456      	add	r6, sl
 8017c70:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8017c74:	3e01      	subs	r6, #1
 8017c76:	fb92 f0fa 	sdiv	r0, r2, sl
 8017c7a:	b280      	uxth	r0, r0
 8017c7c:	fb00 281a 	mls	r8, r0, sl, r2
 8017c80:	900e      	str	r0, [sp, #56]	@ 0x38
 8017c82:	fb18 f803 	smulbb	r8, r8, r3
 8017c86:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8017c8a:	4488      	add	r8, r1
 8017c8c:	4419      	add	r1, r3
 8017c8e:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8017c92:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8017c96:	fa1f f888 	uxth.w	r8, r8
 8017c9a:	441a      	add	r2, r3
 8017c9c:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8017ca0:	9303      	str	r3, [sp, #12]
 8017ca2:	4b9c      	ldr	r3, [pc, #624]	@ (8017f14 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8017ca4:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8017ca8:	6818      	ldr	r0, [r3, #0]
 8017caa:	6803      	ldr	r3, [r0, #0]
 8017cac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017cae:	4798      	blx	r3
 8017cb0:	4b99      	ldr	r3, [pc, #612]	@ (8017f18 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8017cb2:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8017cb6:	f1b8 0f00 	cmp.w	r8, #0
 8017cba:	881a      	ldrh	r2, [r3, #0]
 8017cbc:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8017cc0:	fb02 f505 	mul.w	r5, r2, r5
 8017cc4:	fb02 7101 	mla	r1, r2, r1, r7
 8017cc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017ccc:	9314      	str	r3, [sp, #80]	@ 0x50
 8017cce:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8017cd2:	9b08      	ldr	r3, [sp, #32]
 8017cd4:	fb96 f6fa 	sdiv	r6, r6, sl
 8017cd8:	4408      	add	r0, r1
 8017cda:	f106 0601 	add.w	r6, r6, #1
 8017cde:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8017ce2:	f04f 0100 	mov.w	r1, #0
 8017ce6:	eb00 0205 	add.w	r2, r0, r5
 8017cea:	b2b6      	uxth	r6, r6
 8017cec:	b29b      	uxth	r3, r3
 8017cee:	910b      	str	r1, [sp, #44]	@ 0x2c
 8017cf0:	9209      	str	r2, [sp, #36]	@ 0x24
 8017cf2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017cf4:	930d      	str	r3, [sp, #52]	@ 0x34
 8017cf6:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8017cfa:	4b88      	ldr	r3, [pc, #544]	@ (8017f1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8017cfc:	f106 0204 	add.w	r2, r6, #4
 8017d00:	eba3 0304 	sub.w	r3, r3, r4
 8017d04:	9205      	str	r2, [sp, #20]
 8017d06:	9a03      	ldr	r2, [sp, #12]
 8017d08:	bf18      	it	ne
 8017d0a:	2200      	movne	r2, #0
 8017d0c:	9315      	str	r3, [sp, #84]	@ 0x54
 8017d0e:	b292      	uxth	r2, r2
 8017d10:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8017d12:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017d14:	fa11 f383 	uxtah	r3, r1, r3
 8017d18:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8017d1a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8017d1e:	3304      	adds	r3, #4
 8017d20:	9306      	str	r3, [sp, #24]
 8017d22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d24:	4283      	cmp	r3, r0
 8017d26:	f240 816f 	bls.w	8018008 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8017d2a:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8017d2e:	f04f 0900 	mov.w	r9, #0
 8017d32:	9d06      	ldr	r5, [sp, #24]
 8017d34:	fbb8 f3f3 	udiv	r3, r8, r3
 8017d38:	ebaa 0303 	sub.w	r3, sl, r3
 8017d3c:	782d      	ldrb	r5, [r5, #0]
 8017d3e:	b29b      	uxth	r3, r3
 8017d40:	950f      	str	r5, [sp, #60]	@ 0x3c
 8017d42:	3501      	adds	r5, #1
 8017d44:	9312      	str	r3, [sp, #72]	@ 0x48
 8017d46:	9b06      	ldr	r3, [sp, #24]
 8017d48:	9504      	str	r5, [sp, #16]
 8017d4a:	7859      	ldrb	r1, [r3, #1]
 8017d4c:	789b      	ldrb	r3, [r3, #2]
 8017d4e:	021b      	lsls	r3, r3, #8
 8017d50:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8017d54:	9906      	ldr	r1, [sp, #24]
 8017d56:	78c9      	ldrb	r1, [r1, #3]
 8017d58:	430b      	orrs	r3, r1
 8017d5a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8017d5c:	4419      	add	r1, r3
 8017d5e:	1c4d      	adds	r5, r1, #1
 8017d60:	7849      	ldrb	r1, [r1, #1]
 8017d62:	9502      	str	r5, [sp, #8]
 8017d64:	0209      	lsls	r1, r1, #8
 8017d66:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8017d68:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8017d6c:	5ceb      	ldrb	r3, [r5, r3]
 8017d6e:	4319      	orrs	r1, r3
 8017d70:	b28b      	uxth	r3, r1
 8017d72:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8017d76:	930a      	str	r3, [sp, #40]	@ 0x28
 8017d78:	2300      	movs	r3, #0
 8017d7a:	9307      	str	r3, [sp, #28]
 8017d7c:	2301      	movs	r3, #1
 8017d7e:	e9cd 3300 	strd	r3, r3, [sp]
 8017d82:	469c      	mov	ip, r3
 8017d84:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8017d88:	930c      	str	r3, [sp, #48]	@ 0x30
 8017d8a:	f1b8 0f00 	cmp.w	r8, #0
 8017d8e:	f000 8082 	beq.w	8017e96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8017d92:	45c4      	cmp	ip, r8
 8017d94:	d270      	bcs.n	8017e78 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8017d96:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8017d98:	eba8 080c 	sub.w	r8, r8, ip
 8017d9c:	4611      	mov	r1, r2
 8017d9e:	4283      	cmp	r3, r0
 8017da0:	fa1f f888 	uxth.w	r8, r8
 8017da4:	d802      	bhi.n	8017dac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8017da6:	e074      	b.n	8017e92 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d15f      	bne.n	8017e6c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8017dac:	9b02      	ldr	r3, [sp, #8]
 8017dae:	9a01      	ldr	r2, [sp, #4]
 8017db0:	785b      	ldrb	r3, [r3, #1]
 8017db2:	f1c2 0207 	rsb	r2, r2, #7
 8017db6:	9d01      	ldr	r5, [sp, #4]
 8017db8:	4093      	lsls	r3, r2
 8017dba:	005b      	lsls	r3, r3, #1
 8017dbc:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8017dc0:	9b02      	ldr	r3, [sp, #8]
 8017dc2:	781b      	ldrb	r3, [r3, #0]
 8017dc4:	412b      	asrs	r3, r5
 8017dc6:	b2db      	uxtb	r3, r3
 8017dc8:	4313      	orrs	r3, r2
 8017dca:	462a      	mov	r2, r5
 8017dcc:	3201      	adds	r2, #1
 8017dce:	b29e      	uxth	r6, r3
 8017dd0:	b2d2      	uxtb	r2, r2
 8017dd2:	2a08      	cmp	r2, #8
 8017dd4:	9201      	str	r2, [sp, #4]
 8017dd6:	9a02      	ldr	r2, [sp, #8]
 8017dd8:	bf09      	itett	eq
 8017dda:	3202      	addeq	r2, #2
 8017ddc:	3201      	addne	r2, #1
 8017dde:	9202      	streq	r2, [sp, #8]
 8017de0:	2200      	moveq	r2, #0
 8017de2:	bf14      	ite	ne
 8017de4:	9202      	strne	r2, [sp, #8]
 8017de6:	9201      	streq	r2, [sp, #4]
 8017de8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017dea:	42b2      	cmp	r2, r6
 8017dec:	d309      	bcc.n	8017e02 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8017dee:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8017df2:	2301      	movs	r3, #1
 8017df4:	9a04      	ldr	r2, [sp, #16]
 8017df6:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8017dfa:	d30e      	bcc.n	8017e1a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8017dfc:	9300      	str	r3, [sp, #0]
 8017dfe:	2500      	movs	r5, #0
 8017e00:	e035      	b.n	8017e6e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8017e02:	9b04      	ldr	r3, [sp, #16]
 8017e04:	429e      	cmp	r6, r3
 8017e06:	d318      	bcc.n	8017e3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8017e08:	9b00      	ldr	r3, [sp, #0]
 8017e0a:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8017e0e:	18e3      	adds	r3, r4, r3
 8017e10:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8017e14:	9b00      	ldr	r3, [sp, #0]
 8017e16:	3301      	adds	r3, #1
 8017e18:	b29b      	uxth	r3, r3
 8017e1a:	9a04      	ldr	r2, [sp, #16]
 8017e1c:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8017e20:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017e24:	9f00      	ldr	r7, [sp, #0]
 8017e26:	7115      	strb	r5, [r2, #4]
 8017e28:	3701      	adds	r7, #1
 8017e2a:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8017e2c:	7157      	strb	r7, [r2, #5]
 8017e2e:	80d5      	strh	r5, [r2, #6]
 8017e30:	9a04      	ldr	r2, [sp, #16]
 8017e32:	3201      	adds	r2, #1
 8017e34:	b292      	uxth	r2, r2
 8017e36:	9204      	str	r2, [sp, #16]
 8017e38:	e7e0      	b.n	8017dfc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8017e3a:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8017e3e:	4632      	mov	r2, r6
 8017e40:	795b      	ldrb	r3, [r3, #5]
 8017e42:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8017e46:	4425      	add	r5, r4
 8017e48:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8017e4a:	eb07 0c05 	add.w	ip, r7, r5
 8017e4e:	f1bc 0f00 	cmp.w	ip, #0
 8017e52:	dd07      	ble.n	8017e64 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8017e54:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8017e58:	f892 c004 	ldrb.w	ip, [r2, #4]
 8017e5c:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8017e60:	88d2      	ldrh	r2, [r2, #6]
 8017e62:	e7f1      	b.n	8017e48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8017e64:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8017e68:	b29b      	uxth	r3, r3
 8017e6a:	e7c3      	b.n	8017df4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8017e6c:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8017e6e:	460a      	mov	r2, r1
 8017e70:	960a      	str	r6, [sp, #40]	@ 0x28
 8017e72:	46a9      	mov	r9, r5
 8017e74:	469c      	mov	ip, r3
 8017e76:	e788      	b.n	8017d8a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8017e78:	ebac 0308 	sub.w	r3, ip, r8
 8017e7c:	eb09 0508 	add.w	r5, r9, r8
 8017e80:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017e84:	b29b      	uxth	r3, r3
 8017e86:	b2ad      	uxth	r5, r5
 8017e88:	f04f 0800 	mov.w	r8, #0
 8017e8c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8017e8e:	4282      	cmp	r2, r0
 8017e90:	d88a      	bhi.n	8017da8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8017e92:	460a      	mov	r2, r1
 8017e94:	e745      	b.n	8017d22 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8017e96:	4594      	cmp	ip, r2
 8017e98:	9d08      	ldr	r5, [sp, #32]
 8017e9a:	4686      	mov	lr, r0
 8017e9c:	bf27      	ittee	cs
 8017e9e:	ebac 0302 	subcs.w	r3, ip, r2
 8017ea2:	4616      	movcs	r6, r2
 8017ea4:	eba2 010c 	subcc.w	r1, r2, ip
 8017ea8:	4666      	movcc	r6, ip
 8017eaa:	bf27      	ittee	cs
 8017eac:	b29b      	uxthcs	r3, r3
 8017eae:	4641      	movcs	r1, r8
 8017eb0:	b289      	uxthcc	r1, r1
 8017eb2:	4643      	movcc	r3, r8
 8017eb4:	2dff      	cmp	r5, #255	@ 0xff
 8017eb6:	eb09 0506 	add.w	r5, r9, r6
 8017eba:	b2ad      	uxth	r5, r5
 8017ebc:	d130      	bne.n	8017f20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8017ebe:	45a9      	cmp	r9, r5
 8017ec0:	f10e 0e03 	add.w	lr, lr, #3
 8017ec4:	d17a      	bne.n	8017fbc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8017ec6:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017eca:	4594      	cmp	ip, r2
 8017ecc:	4430      	add	r0, r6
 8017ece:	d3db      	bcc.n	8017e88 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8017ed0:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017ed2:	9903      	ldr	r1, [sp, #12]
 8017ed4:	8812      	ldrh	r2, [r2, #0]
 8017ed6:	1a52      	subs	r2, r2, r1
 8017ed8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8017eda:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8017ede:	4410      	add	r0, r2
 8017ee0:	9a07      	ldr	r2, [sp, #28]
 8017ee2:	3201      	adds	r2, #1
 8017ee4:	428a      	cmp	r2, r1
 8017ee6:	9207      	str	r2, [sp, #28]
 8017ee8:	f040 8081 	bne.w	8017fee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8017eec:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8017ef0:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8017ef4:	9b03      	ldr	r3, [sp, #12]
 8017ef6:	eba8 080c 	sub.w	r8, r8, ip
 8017efa:	fa1f f888 	uxth.w	r8, r8
 8017efe:	f1b8 0f00 	cmp.w	r8, #0
 8017f02:	bf08      	it	eq
 8017f04:	461a      	moveq	r2, r3
 8017f06:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8017f08:	bf18      	it	ne
 8017f0a:	2200      	movne	r2, #0
 8017f0c:	3301      	adds	r3, #1
 8017f0e:	b292      	uxth	r2, r2
 8017f10:	930b      	str	r3, [sp, #44]	@ 0x2c
 8017f12:	e6fd      	b.n	8017d10 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8017f14:	240248fc 	.word	0x240248fc
 8017f18:	240248f6 	.word	0x240248f6
 8017f1c:	fffff7fb 	.word	0xfffff7fb
 8017f20:	45a9      	cmp	r9, r5
 8017f22:	f10e 0e03 	add.w	lr, lr, #3
 8017f26:	d0ce      	beq.n	8017ec6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8017f28:	f109 0701 	add.w	r7, r9, #1
 8017f2c:	44a1      	add	r9, r4
 8017f2e:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8017f32:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8017f36:	9713      	str	r7, [sp, #76]	@ 0x4c
 8017f38:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017f3c:	9f05      	ldr	r7, [sp, #20]
 8017f3e:	eb07 0908 	add.w	r9, r7, r8
 8017f42:	f817 8008 	ldrb.w	r8, [r7, r8]
 8017f46:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017f48:	fb1b fb07 	smulbb	fp, fp, r7
 8017f4c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017f4e:	fb08 b807 	mla	r8, r8, r7, fp
 8017f52:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017f54:	fa1f f888 	uxth.w	r8, r8
 8017f58:	f108 0b01 	add.w	fp, r8, #1
 8017f5c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017f60:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8017f64:	fb1b fb07 	smulbb	fp, fp, r7
 8017f68:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f6c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017f6e:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8017f72:	f899 8001 	ldrb.w	r8, [r9, #1]
 8017f76:	fb08 b807 	mla	r8, r8, r7, fp
 8017f7a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8017f7c:	fa1f f888 	uxth.w	r8, r8
 8017f80:	f108 0b01 	add.w	fp, r8, #1
 8017f84:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017f88:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f8c:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8017f90:	f899 8002 	ldrb.w	r8, [r9, #2]
 8017f94:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8017f98:	fb19 f907 	smulbb	r9, r9, r7
 8017f9c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8017f9e:	fb08 9807 	mla	r8, r8, r7, r9
 8017fa2:	fa1f f888 	uxth.w	r8, r8
 8017fa6:	f108 0901 	add.w	r9, r8, #1
 8017faa:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8017fae:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8017fb2:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017fb6:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8017fba:	e7b1      	b.n	8017f20 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8017fbc:	f109 0b01 	add.w	fp, r9, #1
 8017fc0:	44a1      	add	r9, r4
 8017fc2:	9f05      	ldr	r7, [sp, #20]
 8017fc4:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8017fc8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8017fcc:	eb07 0908 	add.w	r9, r7, r8
 8017fd0:	f817 8008 	ldrb.w	r8, [r7, r8]
 8017fd4:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8017fd8:	f899 8001 	ldrb.w	r8, [r9, #1]
 8017fdc:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8017fe0:	f899 8002 	ldrb.w	r8, [r9, #2]
 8017fe4:	fa1f f98b 	uxth.w	r9, fp
 8017fe8:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8017fec:	e767      	b.n	8017ebe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8017fee:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8017ff2:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8017ff6:	eba8 0801 	sub.w	r8, r8, r1
 8017ffa:	fa1f f888 	uxth.w	r8, r8
 8017ffe:	f1b8 0f00 	cmp.w	r8, #0
 8018002:	bf18      	it	ne
 8018004:	2100      	movne	r1, #0
 8018006:	e741      	b.n	8017e8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018008:	4b03      	ldr	r3, [pc, #12]	@ (8018018 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 801800a:	6818      	ldr	r0, [r3, #0]
 801800c:	6803      	ldr	r3, [r0, #0]
 801800e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018010:	4798      	blx	r3
 8018012:	b01b      	add	sp, #108	@ 0x6c
 8018014:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018018:	240248fc 	.word	0x240248fc

0801801c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801801c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018020:	b09d      	sub	sp, #116	@ 0x74
 8018022:	461d      	mov	r5, r3
 8018024:	4604      	mov	r4, r0
 8018026:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018028:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 801802c:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018030:	920c      	str	r2, [sp, #48]	@ 0x30
 8018032:	2a00      	cmp	r2, #0
 8018034:	f000 81de 	beq.w	80183f4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8018038:	6828      	ldr	r0, [r5, #0]
 801803a:	aa18      	add	r2, sp, #96	@ 0x60
 801803c:	6869      	ldr	r1, [r5, #4]
 801803e:	c203      	stmia	r2!, {r0, r1}
 8018040:	6818      	ldr	r0, [r3, #0]
 8018042:	aa1a      	add	r2, sp, #104	@ 0x68
 8018044:	6859      	ldr	r1, [r3, #4]
 8018046:	c203      	stmia	r2!, {r0, r1}
 8018048:	a818      	add	r0, sp, #96	@ 0x60
 801804a:	f7fa f8c1 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801804e:	4629      	mov	r1, r5
 8018050:	a81a      	add	r0, sp, #104	@ 0x68
 8018052:	f7fa f8e5 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018056:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 801805a:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 801805e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018062:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8018066:	bfdb      	ittet	le
 8018068:	b29a      	uxthle	r2, r3
 801806a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801806e:	2201      	movgt	r2, #1
 8018070:	fb91 f2f2 	sdivle	r2, r1, r2
 8018074:	9201      	str	r2, [sp, #4]
 8018076:	9801      	ldr	r0, [sp, #4]
 8018078:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 801807c:	9901      	ldr	r1, [sp, #4]
 801807e:	fb92 f0f0 	sdiv	r0, r2, r0
 8018082:	b280      	uxth	r0, r0
 8018084:	440f      	add	r7, r1
 8018086:	900d      	str	r0, [sp, #52]	@ 0x34
 8018088:	3f01      	subs	r7, #1
 801808a:	9801      	ldr	r0, [sp, #4]
 801808c:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801808e:	fb05 2510 	mls	r5, r5, r0, r2
 8018092:	fb97 f7f1 	sdiv	r7, r7, r1
 8018096:	fb15 f503 	smulbb	r5, r5, r3
 801809a:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 801809e:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 80180a2:	3701      	adds	r7, #1
 80180a4:	440d      	add	r5, r1
 80180a6:	4419      	add	r1, r3
 80180a8:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 80180ac:	b2bf      	uxth	r7, r7
 80180ae:	441a      	add	r2, r3
 80180b0:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 80180b4:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 80180b8:	00bf      	lsls	r7, r7, #2
 80180ba:	9304      	str	r3, [sp, #16]
 80180bc:	b2ad      	uxth	r5, r5
 80180be:	4bb0      	ldr	r3, [pc, #704]	@ (8018380 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 80180c0:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 80180c4:	6818      	ldr	r0, [r3, #0]
 80180c6:	6803      	ldr	r3, [r0, #0]
 80180c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80180ca:	4798      	blx	r3
 80180cc:	4bad      	ldr	r3, [pc, #692]	@ (8018384 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 80180ce:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 80180d2:	2d00      	cmp	r5, #0
 80180d4:	881a      	ldrh	r2, [r3, #0]
 80180d6:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 80180da:	fb02 f606 	mul.w	r6, r2, r6
 80180de:	fb02 c101 	mla	r1, r2, r1, ip
 80180e2:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80180e6:	9316      	str	r3, [sp, #88]	@ 0x58
 80180e8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80180ec:	4ba6      	ldr	r3, [pc, #664]	@ (8018388 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 80180ee:	eb00 0801 	add.w	r8, r0, r1
 80180f2:	bf18      	it	ne
 80180f4:	2100      	movne	r1, #0
 80180f6:	eba3 0304 	sub.w	r3, r3, r4
 80180fa:	eb08 0206 	add.w	r2, r8, r6
 80180fe:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018100:	9208      	str	r2, [sp, #32]
 8018102:	f107 0204 	add.w	r2, r7, #4
 8018106:	9211      	str	r2, [sp, #68]	@ 0x44
 8018108:	9a04      	ldr	r2, [sp, #16]
 801810a:	bf08      	it	eq
 801810c:	4611      	moveq	r1, r2
 801810e:	2200      	movs	r2, #0
 8018110:	b289      	uxth	r1, r1
 8018112:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018114:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018116:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018118:	fa12 f383 	uxtah	r3, r2, r3
 801811c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801811e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018122:	3304      	adds	r3, #4
 8018124:	9306      	str	r3, [sp, #24]
 8018126:	9b08      	ldr	r3, [sp, #32]
 8018128:	4543      	cmp	r3, r8
 801812a:	f240 815e 	bls.w	80183ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 801812e:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 8018132:	f04f 0b01 	mov.w	fp, #1
 8018136:	9a01      	ldr	r2, [sp, #4]
 8018138:	9806      	ldr	r0, [sp, #24]
 801813a:	465e      	mov	r6, fp
 801813c:	f8cd b008 	str.w	fp, [sp, #8]
 8018140:	7800      	ldrb	r0, [r0, #0]
 8018142:	fbb5 f3f3 	udiv	r3, r5, r3
 8018146:	1ad3      	subs	r3, r2, r3
 8018148:	900e      	str	r0, [sp, #56]	@ 0x38
 801814a:	3001      	adds	r0, #1
 801814c:	b29b      	uxth	r3, r3
 801814e:	9005      	str	r0, [sp, #20]
 8018150:	9312      	str	r3, [sp, #72]	@ 0x48
 8018152:	9b06      	ldr	r3, [sp, #24]
 8018154:	785a      	ldrb	r2, [r3, #1]
 8018156:	789b      	ldrb	r3, [r3, #2]
 8018158:	021b      	lsls	r3, r3, #8
 801815a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801815e:	9a06      	ldr	r2, [sp, #24]
 8018160:	78d2      	ldrb	r2, [r2, #3]
 8018162:	4313      	orrs	r3, r2
 8018164:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018166:	441a      	add	r2, r3
 8018168:	1c50      	adds	r0, r2, #1
 801816a:	7852      	ldrb	r2, [r2, #1]
 801816c:	9003      	str	r0, [sp, #12]
 801816e:	0212      	lsls	r2, r2, #8
 8018170:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8018172:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 8018176:	5cc3      	ldrb	r3, [r0, r3]
 8018178:	431a      	orrs	r2, r3
 801817a:	b293      	uxth	r3, r2
 801817c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8018180:	930a      	str	r3, [sp, #40]	@ 0x28
 8018182:	2300      	movs	r3, #0
 8018184:	461a      	mov	r2, r3
 8018186:	9307      	str	r3, [sp, #28]
 8018188:	2d00      	cmp	r5, #0
 801818a:	d07c      	beq.n	8018286 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 801818c:	42ae      	cmp	r6, r5
 801818e:	d26c      	bcs.n	801826a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 8018190:	9b08      	ldr	r3, [sp, #32]
 8018192:	1bad      	subs	r5, r5, r6
 8018194:	4608      	mov	r0, r1
 8018196:	4543      	cmp	r3, r8
 8018198:	b2ad      	uxth	r5, r5
 801819a:	d802      	bhi.n	80181a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 801819c:	e071      	b.n	8018282 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d15d      	bne.n	801825e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80181a2:	9b03      	ldr	r3, [sp, #12]
 80181a4:	9a02      	ldr	r2, [sp, #8]
 80181a6:	785b      	ldrb	r3, [r3, #1]
 80181a8:	f1c2 0207 	rsb	r2, r2, #7
 80181ac:	9902      	ldr	r1, [sp, #8]
 80181ae:	4093      	lsls	r3, r2
 80181b0:	005b      	lsls	r3, r3, #1
 80181b2:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80181b6:	9b03      	ldr	r3, [sp, #12]
 80181b8:	781b      	ldrb	r3, [r3, #0]
 80181ba:	410b      	asrs	r3, r1
 80181bc:	3101      	adds	r1, #1
 80181be:	b2c9      	uxtb	r1, r1
 80181c0:	b2db      	uxtb	r3, r3
 80181c2:	2908      	cmp	r1, #8
 80181c4:	9102      	str	r1, [sp, #8]
 80181c6:	9903      	ldr	r1, [sp, #12]
 80181c8:	ea43 0302 	orr.w	r3, r3, r2
 80181cc:	bf0c      	ite	eq
 80181ce:	3102      	addeq	r1, #2
 80181d0:	3101      	addne	r1, #1
 80181d2:	b29a      	uxth	r2, r3
 80181d4:	bf05      	ittet	eq
 80181d6:	9103      	streq	r1, [sp, #12]
 80181d8:	2100      	moveq	r1, #0
 80181da:	9103      	strne	r1, [sp, #12]
 80181dc:	9102      	streq	r1, [sp, #8]
 80181de:	990e      	ldr	r1, [sp, #56]	@ 0x38
 80181e0:	4291      	cmp	r1, r2
 80181e2:	d30a      	bcc.n	80181fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 80181e4:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 80181e8:	2301      	movs	r3, #1
 80181ea:	9905      	ldr	r1, [sp, #20]
 80181ec:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 80181f0:	d30f      	bcc.n	8018212 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 80181f2:	469b      	mov	fp, r3
 80181f4:	f04f 0c00 	mov.w	ip, #0
 80181f8:	e032      	b.n	8018260 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 80181fa:	9b05      	ldr	r3, [sp, #20]
 80181fc:	429a      	cmp	r2, r3
 80181fe:	d318      	bcc.n	8018232 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8018200:	eb04 030b 	add.w	r3, r4, fp
 8018204:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8018208:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 801820c:	f10b 0301 	add.w	r3, fp, #1
 8018210:	b29b      	uxth	r3, r3
 8018212:	9905      	ldr	r1, [sp, #20]
 8018214:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8018218:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801821c:	710e      	strb	r6, [r1, #4]
 801821e:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018220:	80ce      	strh	r6, [r1, #6]
 8018222:	f10b 0601 	add.w	r6, fp, #1
 8018226:	714e      	strb	r6, [r1, #5]
 8018228:	9905      	ldr	r1, [sp, #20]
 801822a:	3101      	adds	r1, #1
 801822c:	b289      	uxth	r1, r1
 801822e:	9105      	str	r1, [sp, #20]
 8018230:	e7df      	b.n	80181f2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 8018232:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8018236:	4611      	mov	r1, r2
 8018238:	795b      	ldrb	r3, [r3, #5]
 801823a:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 801823e:	4426      	add	r6, r4
 8018240:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 8018242:	4437      	add	r7, r6
 8018244:	2f00      	cmp	r7, #0
 8018246:	dd06      	ble.n	8018256 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8018248:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 801824c:	790f      	ldrb	r7, [r1, #4]
 801824e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8018252:	88c9      	ldrh	r1, [r1, #6]
 8018254:	e7f4      	b.n	8018240 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 8018256:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 801825a:	b29b      	uxth	r3, r3
 801825c:	e7c5      	b.n	80181ea <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 801825e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018260:	920a      	str	r2, [sp, #40]	@ 0x28
 8018262:	4601      	mov	r1, r0
 8018264:	4662      	mov	r2, ip
 8018266:	461e      	mov	r6, r3
 8018268:	e78e      	b.n	8018188 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 801826a:	1b73      	subs	r3, r6, r5
 801826c:	eb02 0c05 	add.w	ip, r2, r5
 8018270:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8018274:	b29b      	uxth	r3, r3
 8018276:	fa1f fc8c 	uxth.w	ip, ip
 801827a:	2500      	movs	r5, #0
 801827c:	9a08      	ldr	r2, [sp, #32]
 801827e:	4542      	cmp	r2, r8
 8018280:	d88d      	bhi.n	801819e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 8018282:	4601      	mov	r1, r0
 8018284:	e74f      	b.n	8018126 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 8018286:	428e      	cmp	r6, r1
 8018288:	bf2b      	itete	cs
 801828a:	468e      	movcs	lr, r1
 801828c:	46b6      	movcc	lr, r6
 801828e:	1a73      	subcs	r3, r6, r1
 8018290:	1b88      	subcc	r0, r1, r6
 8018292:	eb02 0c0e 	add.w	ip, r2, lr
 8018296:	bf2b      	itete	cs
 8018298:	4628      	movcs	r0, r5
 801829a:	462b      	movcc	r3, r5
 801829c:	b29b      	uxthcs	r3, r3
 801829e:	b280      	uxthcc	r0, r0
 80182a0:	f108 0503 	add.w	r5, r8, #3
 80182a4:	fa1f fc8c 	uxth.w	ip, ip
 80182a8:	4562      	cmp	r2, ip
 80182aa:	d06f      	beq.n	801838c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80182ac:	1c57      	adds	r7, r2, #1
 80182ae:	4422      	add	r2, r4
 80182b0:	b2bf      	uxth	r7, r7
 80182b2:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80182b6:	9713      	str	r7, [sp, #76]	@ 0x4c
 80182b8:	2704      	movs	r7, #4
 80182ba:	46b9      	mov	r9, r7
 80182bc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80182be:	fb19 7202 	smlabb	r2, r9, r2, r7
 80182c2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80182c4:	58bf      	ldr	r7, [r7, r2]
 80182c6:	0e3a      	lsrs	r2, r7, #24
 80182c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80182ca:	d016      	beq.n	80182fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80182cc:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80182d0:	fa5f fa87 	uxtb.w	sl, r7
 80182d4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80182d8:	fa5f f289 	uxtb.w	r2, r9
 80182dc:	9214      	str	r2, [sp, #80]	@ 0x50
 80182de:	b2fa      	uxtb	r2, r7
 80182e0:	9215      	str	r2, [sp, #84]	@ 0x54
 80182e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80182e4:	2aff      	cmp	r2, #255	@ 0xff
 80182e6:	d10b      	bne.n	8018300 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80182e8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80182ea:	2aff      	cmp	r2, #255	@ 0xff
 80182ec:	d108      	bne.n	8018300 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 80182ee:	f805 ac03 	strb.w	sl, [r5, #-3]
 80182f2:	f805 9c02 	strb.w	r9, [r5, #-2]
 80182f6:	f805 7c01 	strb.w	r7, [r5, #-1]
 80182fa:	3503      	adds	r5, #3
 80182fc:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80182fe:	e7d3      	b.n	80182a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8018300:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8018302:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018304:	437a      	muls	r2, r7
 8018306:	1c57      	adds	r7, r2, #1
 8018308:	eb07 2222 	add.w	r2, r7, r2, asr #8
 801830c:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8018310:	1212      	asrs	r2, r2, #8
 8018312:	fa1f f982 	uxth.w	r9, r2
 8018316:	43d2      	mvns	r2, r2
 8018318:	fb1a fa09 	smulbb	sl, sl, r9
 801831c:	b2d2      	uxtb	r2, r2
 801831e:	fb07 a702 	mla	r7, r7, r2, sl
 8018322:	9209      	str	r2, [sp, #36]	@ 0x24
 8018324:	b2bf      	uxth	r7, r7
 8018326:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018328:	f107 0a01 	add.w	sl, r7, #1
 801832c:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8018330:	fb12 fa09 	smulbb	sl, r2, r9
 8018334:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018336:	123f      	asrs	r7, r7, #8
 8018338:	f805 7c03 	strb.w	r7, [r5, #-3]
 801833c:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8018340:	fb07 aa02 	mla	sl, r7, r2, sl
 8018344:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 8018346:	fb12 f909 	smulbb	r9, r2, r9
 801834a:	fa1f fa8a 	uxth.w	sl, sl
 801834e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018350:	f10a 0701 	add.w	r7, sl, #1
 8018354:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8018358:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 801835c:	fb07 9902 	mla	r9, r7, r2, r9
 8018360:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8018364:	fa1f f989 	uxth.w	r9, r9
 8018368:	f805 ac02 	strb.w	sl, [r5, #-2]
 801836c:	f109 0201 	add.w	r2, r9, #1
 8018370:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 8018374:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018378:	f805 9c01 	strb.w	r9, [r5, #-1]
 801837c:	e7bd      	b.n	80182fa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 801837e:	bf00      	nop
 8018380:	240248fc 	.word	0x240248fc
 8018384:	240248f6 	.word	0x240248f6
 8018388:	fffff7fb 	.word	0xfffff7fb
 801838c:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 8018390:	428e      	cmp	r6, r1
 8018392:	44f0      	add	r8, lr
 8018394:	f4ff af71 	bcc.w	801827a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018398:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801839a:	9904      	ldr	r1, [sp, #16]
 801839c:	8812      	ldrh	r2, [r2, #0]
 801839e:	1a52      	subs	r2, r2, r1
 80183a0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80183a2:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80183a6:	4490      	add	r8, r2
 80183a8:	9a07      	ldr	r2, [sp, #28]
 80183aa:	3201      	adds	r2, #1
 80183ac:	428a      	cmp	r2, r1
 80183ae:	9207      	str	r2, [sp, #28]
 80183b0:	d111      	bne.n	80183d6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 80183b2:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 80183b6:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 80183ba:	9b04      	ldr	r3, [sp, #16]
 80183bc:	eba5 050c 	sub.w	r5, r5, ip
 80183c0:	b2ad      	uxth	r5, r5
 80183c2:	2d00      	cmp	r5, #0
 80183c4:	bf08      	it	eq
 80183c6:	4619      	moveq	r1, r3
 80183c8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80183ca:	bf18      	it	ne
 80183cc:	2100      	movne	r1, #0
 80183ce:	3301      	adds	r3, #1
 80183d0:	b289      	uxth	r1, r1
 80183d2:	930b      	str	r3, [sp, #44]	@ 0x2c
 80183d4:	e69e      	b.n	8018114 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80183d6:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 80183da:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 80183de:	1a2d      	subs	r5, r5, r0
 80183e0:	b2ad      	uxth	r5, r5
 80183e2:	2d00      	cmp	r5, #0
 80183e4:	bf18      	it	ne
 80183e6:	2000      	movne	r0, #0
 80183e8:	e748      	b.n	801827c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 80183ea:	4b04      	ldr	r3, [pc, #16]	@ (80183fc <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 80183ec:	6818      	ldr	r0, [r3, #0]
 80183ee:	6803      	ldr	r3, [r0, #0]
 80183f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80183f2:	4798      	blx	r3
 80183f4:	b01d      	add	sp, #116	@ 0x74
 80183f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80183fa:	bf00      	nop
 80183fc:	240248fc 	.word	0x240248fc

08018400 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8018400:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018404:	b08f      	sub	sp, #60	@ 0x3c
 8018406:	4616      	mov	r6, r2
 8018408:	4681      	mov	r9, r0
 801840a:	460d      	mov	r5, r1
 801840c:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8018410:	9205      	str	r2, [sp, #20]
 8018412:	2a00      	cmp	r2, #0
 8018414:	f000 82a8 	beq.w	8018968 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8018418:	6830      	ldr	r0, [r6, #0]
 801841a:	ac0a      	add	r4, sp, #40	@ 0x28
 801841c:	6871      	ldr	r1, [r6, #4]
 801841e:	c403      	stmia	r4!, {r0, r1}
 8018420:	6818      	ldr	r0, [r3, #0]
 8018422:	ac0c      	add	r4, sp, #48	@ 0x30
 8018424:	6859      	ldr	r1, [r3, #4]
 8018426:	c403      	stmia	r4!, {r0, r1}
 8018428:	a80a      	add	r0, sp, #40	@ 0x28
 801842a:	f7f9 fed1 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801842e:	4631      	mov	r1, r6
 8018430:	a80c      	add	r0, sp, #48	@ 0x30
 8018432:	f7f9 fef5 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018436:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 801843a:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 801843e:	bfdb      	ittet	le
 8018440:	b293      	uxthle	r3, r2
 8018442:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018446:	2301      	movgt	r3, #1
 8018448:	fb91 f3f3 	sdivle	r3, r1, r3
 801844c:	9300      	str	r3, [sp, #0]
 801844e:	f105 0308 	add.w	r3, r5, #8
 8018452:	9900      	ldr	r1, [sp, #0]
 8018454:	9306      	str	r3, [sp, #24]
 8018456:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 801845a:	440b      	add	r3, r1
 801845c:	3b01      	subs	r3, #1
 801845e:	fb93 f3f1 	sdiv	r3, r3, r1
 8018462:	3b01      	subs	r3, #1
 8018464:	9906      	ldr	r1, [sp, #24]
 8018466:	b29b      	uxth	r3, r3
 8018468:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801846c:	9900      	ldr	r1, [sp, #0]
 801846e:	9307      	str	r3, [sp, #28]
 8018470:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8018474:	fb93 f0f1 	sdiv	r0, r3, r1
 8018478:	b284      	uxth	r4, r0
 801847a:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801847e:	b280      	uxth	r0, r0
 8018480:	9402      	str	r4, [sp, #8]
 8018482:	9d02      	ldr	r5, [sp, #8]
 8018484:	9c00      	ldr	r4, [sp, #0]
 8018486:	fb05 3514 	mls	r5, r5, r4, r3
 801848a:	fb15 f502 	smulbb	r5, r5, r2
 801848e:	440d      	add	r5, r1
 8018490:	b2ad      	uxth	r5, r5
 8018492:	2800      	cmp	r0, #0
 8018494:	d071      	beq.n	801857a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 8018496:	1e42      	subs	r2, r0, #1
 8018498:	9806      	ldr	r0, [sp, #24]
 801849a:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 801849e:	9a07      	ldr	r2, [sp, #28]
 80184a0:	fa98 f888 	rev.w	r8, r8
 80184a4:	4490      	add	r8, r2
 80184a6:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80184aa:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80184ae:	4411      	add	r1, r2
 80184b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80184b4:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8018800 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80184b8:	4413      	add	r3, r2
 80184ba:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80184be:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80184c2:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80184c6:	9301      	str	r3, [sp, #4]
 80184c8:	4bcb      	ldr	r3, [pc, #812]	@ (80187f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 80184ca:	6818      	ldr	r0, [r3, #0]
 80184cc:	6803      	ldr	r3, [r0, #0]
 80184ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80184d0:	4798      	blx	r3
 80184d2:	4bca      	ldr	r3, [pc, #808]	@ (80187fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 80184d4:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80184d8:	881b      	ldrh	r3, [r3, #0]
 80184da:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 80184de:	fb03 2707 	mla	r7, r3, r7, r2
 80184e2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80184e6:	4363      	muls	r3, r4
 80184e8:	2400      	movs	r4, #0
 80184ea:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80184ee:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80184f2:	4621      	mov	r1, r4
 80184f4:	4407      	add	r7, r0
 80184f6:	18fb      	adds	r3, r7, r3
 80184f8:	9309      	str	r3, [sp, #36]	@ 0x24
 80184fa:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 80184fe:	fb95 f3f3 	sdiv	r3, r5, r3
 8018502:	9304      	str	r3, [sp, #16]
 8018504:	f109 0304 	add.w	r3, r9, #4
 8018508:	4618      	mov	r0, r3
 801850a:	9308      	str	r3, [sp, #32]
 801850c:	f008 fc2c 	bl	8020d68 <memset>
 8018510:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018512:	42bb      	cmp	r3, r7
 8018514:	f240 8223 	bls.w	801895e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8018518:	2003      	movs	r0, #3
 801851a:	f04f 0c07 	mov.w	ip, #7
 801851e:	f04f 0e0b 	mov.w	lr, #11
 8018522:	2d00      	cmp	r5, #0
 8018524:	f000 813c 	beq.w	80187a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8018528:	f898 3000 	ldrb.w	r3, [r8]
 801852c:	b2db      	uxtb	r3, r3
 801852e:	2bfe      	cmp	r3, #254	@ 0xfe
 8018530:	d126      	bne.n	8018580 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 8018532:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018536:	f108 0604 	add.w	r6, r8, #4
 801853a:	f898 2002 	ldrb.w	r2, [r8, #2]
 801853e:	3d01      	subs	r5, #1
 8018540:	b2c9      	uxtb	r1, r1
 8018542:	f898 8003 	ldrb.w	r8, [r8, #3]
 8018546:	b2d2      	uxtb	r2, r2
 8018548:	f361 0407 	bfi	r4, r1, #0, #8
 801854c:	fa5f f888 	uxtb.w	r8, r8
 8018550:	b2ad      	uxth	r5, r5
 8018552:	f362 240f 	bfi	r4, r2, #8, #8
 8018556:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801855a:	fb10 2208 	smlabb	r2, r0, r8, r2
 801855e:	f368 4417 	bfi	r4, r8, #16, #8
 8018562:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8018566:	0e23      	lsrs	r3, r4, #24
 8018568:	fb1e 2303 	smlabb	r3, lr, r3, r2
 801856c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018570:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8018574:	605c      	str	r4, [r3, #4]
 8018576:	46b0      	mov	r8, r6
 8018578:	e7d3      	b.n	8018522 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 801857a:	f8dd 801c 	ldr.w	r8, [sp, #28]
 801857e:	e792      	b.n	80184a6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 8018580:	2bff      	cmp	r3, #255	@ 0xff
 8018582:	d127      	bne.n	80185d4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 8018584:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018588:	f108 0605 	add.w	r6, r8, #5
 801858c:	f898 3002 	ldrb.w	r3, [r8, #2]
 8018590:	3d01      	subs	r5, #1
 8018592:	b2d2      	uxtb	r2, r2
 8018594:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018598:	b2db      	uxtb	r3, r3
 801859a:	f898 8004 	ldrb.w	r8, [r8, #4]
 801859e:	f362 0407 	bfi	r4, r2, #0, #8
 80185a2:	b2c9      	uxtb	r1, r1
 80185a4:	fa5f f888 	uxtb.w	r8, r8
 80185a8:	f363 240f 	bfi	r4, r3, #8, #8
 80185ac:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80185b0:	b2ad      	uxth	r5, r5
 80185b2:	fb10 3301 	smlabb	r3, r0, r1, r3
 80185b6:	f361 4417 	bfi	r4, r1, #16, #8
 80185ba:	fb1c 3302 	smlabb	r3, ip, r2, r3
 80185be:	f368 641f 	bfi	r4, r8, #24, #8
 80185c2:	fb1e 3808 	smlabb	r8, lr, r8, r3
 80185c6:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80185ca:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80185ce:	f8c8 4004 	str.w	r4, [r8, #4]
 80185d2:	e7d0      	b.n	8018576 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80185d4:	119a      	asrs	r2, r3, #6
 80185d6:	f108 0601 	add.w	r6, r8, #1
 80185da:	d107      	bne.n	80185ec <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 80185dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80185e0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80185e4:	685c      	ldr	r4, [r3, #4]
 80185e6:	3d01      	subs	r5, #1
 80185e8:	b2ad      	uxth	r5, r5
 80185ea:	e7c4      	b.n	8018576 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80185ec:	2a01      	cmp	r2, #1
 80185ee:	d129      	bne.n	8018644 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 80185f0:	f003 0203 	and.w	r2, r3, #3
 80185f4:	1ea1      	subs	r1, r4, #2
 80185f6:	4411      	add	r1, r2
 80185f8:	f3c3 0281 	ubfx	r2, r3, #2, #2
 80185fc:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018600:	b2c9      	uxtb	r1, r1
 8018602:	3a02      	subs	r2, #2
 8018604:	3b02      	subs	r3, #2
 8018606:	f361 0407 	bfi	r4, r1, #0, #8
 801860a:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801860e:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018612:	f362 240f 	bfi	r4, r2, #8, #8
 8018616:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 801861a:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801861e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018622:	fb10 2203 	smlabb	r2, r0, r3, r2
 8018626:	f363 4417 	bfi	r4, r3, #16, #8
 801862a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801862e:	ea4f 6814 	mov.w	r8, r4, lsr #24
 8018632:	fb1e 2808 	smlabb	r8, lr, r8, r2
 8018636:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 801863a:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 801863e:	f8c8 4004 	str.w	r4, [r8, #4]
 8018642:	e7d0      	b.n	80185e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 8018644:	2a02      	cmp	r2, #2
 8018646:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801864a:	d12e      	bne.n	80186aa <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 801864c:	f898 2001 	ldrb.w	r2, [r8, #1]
 8018650:	f1a3 0a20 	sub.w	sl, r3, #32
 8018654:	f108 0602 	add.w	r6, r8, #2
 8018658:	b2d2      	uxtb	r2, r2
 801865a:	f002 010f 	and.w	r1, r2, #15
 801865e:	1112      	asrs	r2, r2, #4
 8018660:	3908      	subs	r1, #8
 8018662:	3a08      	subs	r2, #8
 8018664:	4451      	add	r1, sl
 8018666:	4492      	add	sl, r2
 8018668:	4421      	add	r1, r4
 801866a:	b2c9      	uxtb	r1, r1
 801866c:	f361 0407 	bfi	r4, r1, #0, #8
 8018670:	f3c4 2807 	ubfx	r8, r4, #8, #8
 8018674:	f1a8 0820 	sub.w	r8, r8, #32
 8018678:	4443      	add	r3, r8
 801867a:	b2db      	uxtb	r3, r3
 801867c:	f363 240f 	bfi	r4, r3, #8, #8
 8018680:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018684:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 8018688:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 801868c:	fb10 330a 	smlabb	r3, r0, sl, r3
 8018690:	f36a 4417 	bfi	r4, sl, #16, #8
 8018694:	fb1c 3301 	smlabb	r3, ip, r1, r3
 8018698:	0e22      	lsrs	r2, r4, #24
 801869a:	fb1e 3202 	smlabb	r2, lr, r2, r3
 801869e:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80186a2:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80186a6:	6054      	str	r4, [r2, #4]
 80186a8:	e79d      	b.n	80185e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80186aa:	3301      	adds	r3, #1
 80186ac:	42ab      	cmp	r3, r5
 80186ae:	dd59      	ble.n	8018764 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 80186b0:	1b5d      	subs	r5, r3, r5
 80186b2:	2d00      	cmp	r5, #0
 80186b4:	dc58      	bgt.n	8018768 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80186b6:	f8dd a004 	ldr.w	sl, [sp, #4]
 80186ba:	f04f 0800 	mov.w	r8, #0
 80186be:	f1ba 0f00 	cmp.w	sl, #0
 80186c2:	f340 8108 	ble.w	80188d6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 80186c6:	1c73      	adds	r3, r6, #1
 80186c8:	9303      	str	r3, [sp, #12]
 80186ca:	7833      	ldrb	r3, [r6, #0]
 80186cc:	b2db      	uxtb	r3, r3
 80186ce:	2bfe      	cmp	r3, #254	@ 0xfe
 80186d0:	d16a      	bne.n	80187a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 80186d2:	7871      	ldrb	r1, [r6, #1]
 80186d4:	1d33      	adds	r3, r6, #4
 80186d6:	78b2      	ldrb	r2, [r6, #2]
 80186d8:	b2c9      	uxtb	r1, r1
 80186da:	78f0      	ldrb	r0, [r6, #3]
 80186dc:	b2d2      	uxtb	r2, r2
 80186de:	9303      	str	r3, [sp, #12]
 80186e0:	f361 0407 	bfi	r4, r1, #0, #8
 80186e4:	b2c0      	uxtb	r0, r0
 80186e6:	2303      	movs	r3, #3
 80186e8:	f362 240f 	bfi	r4, r2, #8, #8
 80186ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80186f0:	fb13 2200 	smlabb	r2, r3, r0, r2
 80186f4:	f360 4417 	bfi	r4, r0, #16, #8
 80186f8:	2307      	movs	r3, #7
 80186fa:	0e25      	lsrs	r5, r4, #24
 80186fc:	fb13 2101 	smlabb	r1, r3, r1, r2
 8018700:	230b      	movs	r3, #11
 8018702:	fb13 1305 	smlabb	r3, r3, r5, r1
 8018706:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801870a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801870e:	605c      	str	r4, [r3, #4]
 8018710:	2501      	movs	r5, #1
 8018712:	462e      	mov	r6, r5
 8018714:	eb06 0308 	add.w	r3, r6, r8
 8018718:	ebaa 0a06 	sub.w	sl, sl, r6
 801871c:	1bad      	subs	r5, r5, r6
 801871e:	2b40      	cmp	r3, #64	@ 0x40
 8018720:	dd16      	ble.n	8018750 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 8018722:	4658      	mov	r0, fp
 8018724:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8018728:	f7ea fe3a 	bl	80033a0 <_ZN8touchgfx5paint9flushLineEPmi>
 801872c:	4659      	mov	r1, fp
 801872e:	9b05      	ldr	r3, [sp, #20]
 8018730:	4642      	mov	r2, r8
 8018732:	4638      	mov	r0, r7
 8018734:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018738:	f7ea fe9a 	bl	8003470 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 801873c:	4b30      	ldr	r3, [pc, #192]	@ (8018800 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 801873e:	4447      	add	r7, r8
 8018740:	f04f 0800 	mov.w	r8, #0
 8018744:	459b      	cmp	fp, r3
 8018746:	bf0c      	ite	eq
 8018748:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 8018804 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 801874c:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8018800 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8018750:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 8018754:	4633      	mov	r3, r6
 8018756:	3b01      	subs	r3, #1
 8018758:	f842 4b04 	str.w	r4, [r2], #4
 801875c:	d1fb      	bne.n	8018756 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 801875e:	44b0      	add	r8, r6
 8018760:	9e03      	ldr	r6, [sp, #12]
 8018762:	e7ac      	b.n	80186be <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 8018764:	1aed      	subs	r5, r5, r3
 8018766:	e73f      	b.n	80185e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8018768:	9b01      	ldr	r3, [sp, #4]
 801876a:	42ab      	cmp	r3, r5
 801876c:	bfa8      	it	ge
 801876e:	462b      	movge	r3, r5
 8018770:	4698      	mov	r8, r3
 8018772:	9b01      	ldr	r3, [sp, #4]
 8018774:	eba3 0a08 	sub.w	sl, r3, r8
 8018778:	0e23      	lsrs	r3, r4, #24
 801877a:	eba5 0508 	sub.w	r5, r5, r8
 801877e:	d00b      	beq.n	8018798 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 8018780:	9a05      	ldr	r2, [sp, #20]
 8018782:	4641      	mov	r1, r8
 8018784:	4638      	mov	r0, r7
 8018786:	4353      	muls	r3, r2
 8018788:	1c5a      	adds	r2, r3, #1
 801878a:	eb02 2323 	add.w	r3, r2, r3, asr #8
 801878e:	4622      	mov	r2, r4
 8018790:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8018794:	f7ea fe1e 	bl	80033d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018798:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801879c:	4447      	add	r7, r8
 801879e:	e78c      	b.n	80186ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80187a0:	f8dd a004 	ldr.w	sl, [sp, #4]
 80187a4:	4646      	mov	r6, r8
 80187a6:	e788      	b.n	80186ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80187a8:	2bff      	cmp	r3, #255	@ 0xff
 80187aa:	d11d      	bne.n	80187e8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 80187ac:	7870      	ldrb	r0, [r6, #1]
 80187ae:	1d73      	adds	r3, r6, #5
 80187b0:	78b2      	ldrb	r2, [r6, #2]
 80187b2:	b2c0      	uxtb	r0, r0
 80187b4:	78f5      	ldrb	r5, [r6, #3]
 80187b6:	b2d2      	uxtb	r2, r2
 80187b8:	9303      	str	r3, [sp, #12]
 80187ba:	f360 0407 	bfi	r4, r0, #0, #8
 80187be:	7933      	ldrb	r3, [r6, #4]
 80187c0:	b2ed      	uxtb	r5, r5
 80187c2:	b2d9      	uxtb	r1, r3
 80187c4:	f362 240f 	bfi	r4, r2, #8, #8
 80187c8:	2303      	movs	r3, #3
 80187ca:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80187ce:	f365 4417 	bfi	r4, r5, #16, #8
 80187d2:	fb13 2205 	smlabb	r2, r3, r5, r2
 80187d6:	2307      	movs	r3, #7
 80187d8:	f361 641f 	bfi	r4, r1, #24, #8
 80187dc:	fb13 2000 	smlabb	r0, r3, r0, r2
 80187e0:	230b      	movs	r3, #11
 80187e2:	fb13 0301 	smlabb	r3, r3, r1, r0
 80187e6:	e78e      	b.n	8018706 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 80187e8:	119d      	asrs	r5, r3, #6
 80187ea:	d10d      	bne.n	8018808 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 80187ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80187f0:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80187f4:	685c      	ldr	r4, [r3, #4]
 80187f6:	e78b      	b.n	8018710 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80187f8:	240248fc 	.word	0x240248fc
 80187fc:	240248f6 	.word	0x240248f6
 8018800:	24000140 	.word	0x24000140
 8018804:	24000240 	.word	0x24000240
 8018808:	2d01      	cmp	r5, #1
 801880a:	d12a      	bne.n	8018862 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 801880c:	f003 0203 	and.w	r2, r3, #3
 8018810:	1ea1      	subs	r1, r4, #2
 8018812:	2603      	movs	r6, #3
 8018814:	4411      	add	r1, r2
 8018816:	f3c3 0281 	ubfx	r2, r3, #2, #2
 801881a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 801881e:	b2c9      	uxtb	r1, r1
 8018820:	3a02      	subs	r2, #2
 8018822:	3b02      	subs	r3, #2
 8018824:	f361 0407 	bfi	r4, r1, #0, #8
 8018828:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801882c:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018830:	f362 240f 	bfi	r4, r2, #8, #8
 8018834:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018838:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 801883c:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018840:	fb16 2203 	smlabb	r2, r6, r3, r2
 8018844:	f363 4417 	bfi	r4, r3, #16, #8
 8018848:	2307      	movs	r3, #7
 801884a:	0e20      	lsrs	r0, r4, #24
 801884c:	fb13 2101 	smlabb	r1, r3, r1, r2
 8018850:	230b      	movs	r3, #11
 8018852:	fb13 1300 	smlabb	r3, r3, r0, r1
 8018856:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801885a:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801885e:	605c      	str	r4, [r3, #4]
 8018860:	e757      	b.n	8018712 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 8018862:	2d02      	cmp	r5, #2
 8018864:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018868:	d12f      	bne.n	80188ca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 801886a:	1cb2      	adds	r2, r6, #2
 801886c:	f1a3 0020 	sub.w	r0, r3, #32
 8018870:	9203      	str	r2, [sp, #12]
 8018872:	7872      	ldrb	r2, [r6, #1]
 8018874:	b2d2      	uxtb	r2, r2
 8018876:	f002 010f 	and.w	r1, r2, #15
 801887a:	1112      	asrs	r2, r2, #4
 801887c:	3908      	subs	r1, #8
 801887e:	3a08      	subs	r2, #8
 8018880:	4401      	add	r1, r0
 8018882:	4402      	add	r2, r0
 8018884:	4421      	add	r1, r4
 8018886:	b2c9      	uxtb	r1, r1
 8018888:	f361 0407 	bfi	r4, r1, #0, #8
 801888c:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8018890:	3d20      	subs	r5, #32
 8018892:	442b      	add	r3, r5
 8018894:	2503      	movs	r5, #3
 8018896:	b2db      	uxtb	r3, r3
 8018898:	f363 240f 	bfi	r4, r3, #8, #8
 801889c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80188a0:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 80188a4:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80188a8:	fb15 3302 	smlabb	r3, r5, r2, r3
 80188ac:	f362 4417 	bfi	r4, r2, #16, #8
 80188b0:	2207      	movs	r2, #7
 80188b2:	0e20      	lsrs	r0, r4, #24
 80188b4:	fb12 3201 	smlabb	r2, r2, r1, r3
 80188b8:	210b      	movs	r1, #11
 80188ba:	fb11 2100 	smlabb	r1, r1, r0, r2
 80188be:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80188c2:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80188c6:	604c      	str	r4, [r1, #4]
 80188c8:	e722      	b.n	8018710 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80188ca:	1c5d      	adds	r5, r3, #1
 80188cc:	4656      	mov	r6, sl
 80188ce:	45aa      	cmp	sl, r5
 80188d0:	bfa8      	it	ge
 80188d2:	462e      	movge	r6, r5
 80188d4:	e71e      	b.n	8018714 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 80188d6:	f1b8 0f00 	cmp.w	r8, #0
 80188da:	d00d      	beq.n	80188f8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 80188dc:	ea4f 0188 	mov.w	r1, r8, lsl #2
 80188e0:	4658      	mov	r0, fp
 80188e2:	f7ea fd5d 	bl	80033a0 <_ZN8touchgfx5paint9flushLineEPmi>
 80188e6:	4642      	mov	r2, r8
 80188e8:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80188ec:	4638      	mov	r0, r7
 80188ee:	9b05      	ldr	r3, [sp, #20]
 80188f0:	4659      	mov	r1, fp
 80188f2:	4447      	add	r7, r8
 80188f4:	f7ea fdbc 	bl	8003470 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 80188f8:	4b1d      	ldr	r3, [pc, #116]	@ (8018970 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 80188fa:	9a01      	ldr	r2, [sp, #4]
 80188fc:	881b      	ldrh	r3, [r3, #0]
 80188fe:	1a9b      	subs	r3, r3, r2
 8018900:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018904:	441f      	add	r7, r3
 8018906:	9b04      	ldr	r3, [sp, #16]
 8018908:	3301      	adds	r3, #1
 801890a:	9304      	str	r3, [sp, #16]
 801890c:	9a04      	ldr	r2, [sp, #16]
 801890e:	9b00      	ldr	r3, [sp, #0]
 8018910:	4293      	cmp	r3, r2
 8018912:	d11d      	bne.n	8018950 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 8018914:	9b02      	ldr	r3, [sp, #8]
 8018916:	2400      	movs	r4, #0
 8018918:	9a02      	ldr	r2, [sp, #8]
 801891a:	f103 0801 	add.w	r8, r3, #1
 801891e:	9b06      	ldr	r3, [sp, #24]
 8018920:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 8018924:	4621      	mov	r1, r4
 8018926:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801892a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801892e:	9b07      	ldr	r3, [sp, #28]
 8018930:	ba36      	rev	r6, r6
 8018932:	9808      	ldr	r0, [sp, #32]
 8018934:	441e      	add	r6, r3
 8018936:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801893a:	1aed      	subs	r5, r5, r3
 801893c:	f008 fa14 	bl	8020d68 <memset>
 8018940:	f8cd 8008 	str.w	r8, [sp, #8]
 8018944:	b2ad      	uxth	r5, r5
 8018946:	9404      	str	r4, [sp, #16]
 8018948:	f7ea fd20 	bl	800338c <_ZN8touchgfx5paint8tearDownEv>
 801894c:	46b0      	mov	r8, r6
 801894e:	e5df      	b.n	8018510 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8018950:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8018954:	9a01      	ldr	r2, [sp, #4]
 8018956:	1a9b      	subs	r3, r3, r2
 8018958:	1b5d      	subs	r5, r3, r5
 801895a:	b2ad      	uxth	r5, r5
 801895c:	e7f4      	b.n	8018948 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 801895e:	4b05      	ldr	r3, [pc, #20]	@ (8018974 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8018960:	6818      	ldr	r0, [r3, #0]
 8018962:	6803      	ldr	r3, [r0, #0]
 8018964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018966:	4798      	blx	r3
 8018968:	b00f      	add	sp, #60	@ 0x3c
 801896a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801896e:	bf00      	nop
 8018970:	240248f6 	.word	0x240248f6
 8018974:	240248fc 	.word	0x240248fc

08018978 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 8018978:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801897c:	b093      	sub	sp, #76	@ 0x4c
 801897e:	460d      	mov	r5, r1
 8018980:	4616      	mov	r6, r2
 8018982:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 8018986:	9000      	str	r0, [sp, #0]
 8018988:	f1bb 0f00 	cmp.w	fp, #0
 801898c:	f000 82ac 	beq.w	8018ee8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 8018990:	6810      	ldr	r0, [r2, #0]
 8018992:	ac0e      	add	r4, sp, #56	@ 0x38
 8018994:	6851      	ldr	r1, [r2, #4]
 8018996:	c403      	stmia	r4!, {r0, r1}
 8018998:	6818      	ldr	r0, [r3, #0]
 801899a:	ac10      	add	r4, sp, #64	@ 0x40
 801899c:	6859      	ldr	r1, [r3, #4]
 801899e:	c403      	stmia	r4!, {r0, r1}
 80189a0:	a80e      	add	r0, sp, #56	@ 0x38
 80189a2:	f7f9 fc15 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80189a6:	4631      	mov	r1, r6
 80189a8:	a810      	add	r0, sp, #64	@ 0x40
 80189aa:	f7f9 fc39 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80189ae:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80189b2:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80189b6:	bfdb      	ittet	le
 80189b8:	b293      	uxthle	r3, r2
 80189ba:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80189be:	2301      	movgt	r3, #1
 80189c0:	fb91 f3f3 	sdivle	r3, r1, r3
 80189c4:	9301      	str	r3, [sp, #4]
 80189c6:	f105 0308 	add.w	r3, r5, #8
 80189ca:	9901      	ldr	r1, [sp, #4]
 80189cc:	9305      	str	r3, [sp, #20]
 80189ce:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80189d2:	440b      	add	r3, r1
 80189d4:	3b01      	subs	r3, #1
 80189d6:	fb93 f3f1 	sdiv	r3, r3, r1
 80189da:	3b01      	subs	r3, #1
 80189dc:	9905      	ldr	r1, [sp, #20]
 80189de:	b29b      	uxth	r3, r3
 80189e0:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 80189e4:	9901      	ldr	r1, [sp, #4]
 80189e6:	9306      	str	r3, [sp, #24]
 80189e8:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 80189ec:	fb93 f0f1 	sdiv	r0, r3, r1
 80189f0:	b284      	uxth	r4, r0
 80189f2:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 80189f6:	9403      	str	r4, [sp, #12]
 80189f8:	9d03      	ldr	r5, [sp, #12]
 80189fa:	9c01      	ldr	r4, [sp, #4]
 80189fc:	fb05 3714 	mls	r7, r5, r4, r3
 8018a00:	fb17 f702 	smulbb	r7, r7, r2
 8018a04:	440f      	add	r7, r1
 8018a06:	b2bf      	uxth	r7, r7
 8018a08:	2d00      	cmp	r5, #0
 8018a0a:	d06b      	beq.n	8018ae4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8018a0c:	1e6a      	subs	r2, r5, #1
 8018a0e:	9805      	ldr	r0, [sp, #20]
 8018a10:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 8018a14:	9a06      	ldr	r2, [sp, #24]
 8018a16:	fa99 f989 	rev.w	r9, r9
 8018a1a:	4491      	add	r9, r2
 8018a1c:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8018a20:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 8018a24:	4411      	add	r1, r2
 8018a26:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8018a2a:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8018d88 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8018a2e:	4413      	add	r3, r2
 8018a30:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 8018a34:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8018a38:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8018a3c:	9302      	str	r3, [sp, #8]
 8018a3e:	4bd0      	ldr	r3, [pc, #832]	@ (8018d80 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8018a40:	6818      	ldr	r0, [r3, #0]
 8018a42:	6803      	ldr	r3, [r0, #0]
 8018a44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a46:	4798      	blx	r3
 8018a48:	4bce      	ldr	r3, [pc, #824]	@ (8018d84 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8018a4a:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8018a4e:	881b      	ldrh	r3, [r3, #0]
 8018a50:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 8018a54:	fb03 2404 	mla	r4, r3, r4, r2
 8018a58:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018a5c:	436b      	muls	r3, r5
 8018a5e:	2500      	movs	r5, #0
 8018a60:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018a64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a68:	4629      	mov	r1, r5
 8018a6a:	4404      	add	r4, r0
 8018a6c:	18e3      	adds	r3, r4, r3
 8018a6e:	930d      	str	r3, [sp, #52]	@ 0x34
 8018a70:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 8018a74:	fb97 f3f3 	sdiv	r3, r7, r3
 8018a78:	9304      	str	r3, [sp, #16]
 8018a7a:	9b00      	ldr	r3, [sp, #0]
 8018a7c:	3304      	adds	r3, #4
 8018a7e:	4618      	mov	r0, r3
 8018a80:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a82:	f008 f971 	bl	8020d68 <memset>
 8018a86:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8018a88:	42a3      	cmp	r3, r4
 8018a8a:	f240 8228 	bls.w	8018ede <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 8018a8e:	2003      	movs	r0, #3
 8018a90:	2607      	movs	r6, #7
 8018a92:	2f00      	cmp	r7, #0
 8018a94:	f000 80cb 	beq.w	8018c2e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 8018a98:	f899 3000 	ldrb.w	r3, [r9]
 8018a9c:	b2db      	uxtb	r3, r3
 8018a9e:	2bfe      	cmp	r3, #254	@ 0xfe
 8018aa0:	d123      	bne.n	8018aea <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 8018aa2:	f899 3001 	ldrb.w	r3, [r9, #1]
 8018aa6:	3f01      	subs	r7, #1
 8018aa8:	f899 2002 	ldrb.w	r2, [r9, #2]
 8018aac:	f109 0804 	add.w	r8, r9, #4
 8018ab0:	b2db      	uxtb	r3, r3
 8018ab2:	f899 1003 	ldrb.w	r1, [r9, #3]
 8018ab6:	b2d2      	uxtb	r2, r2
 8018ab8:	f363 0507 	bfi	r5, r3, #0, #8
 8018abc:	b2c9      	uxtb	r1, r1
 8018abe:	b2bf      	uxth	r7, r7
 8018ac0:	f362 250f 	bfi	r5, r2, #8, #8
 8018ac4:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8018ac8:	fb10 2201 	smlabb	r2, r0, r1, r2
 8018acc:	f361 4517 	bfi	r5, r1, #16, #8
 8018ad0:	fb16 2303 	smlabb	r3, r6, r3, r2
 8018ad4:	9a00      	ldr	r2, [sp, #0]
 8018ad6:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018ada:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018ade:	605d      	str	r5, [r3, #4]
 8018ae0:	46c1      	mov	r9, r8
 8018ae2:	e7d6      	b.n	8018a92 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8018ae4:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8018ae8:	e798      	b.n	8018a1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8018aea:	119a      	asrs	r2, r3, #6
 8018aec:	f109 0801 	add.w	r8, r9, #1
 8018af0:	d108      	bne.n	8018b04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8018af2:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018af6:	9a00      	ldr	r2, [sp, #0]
 8018af8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018afc:	685d      	ldr	r5, [r3, #4]
 8018afe:	3f01      	subs	r7, #1
 8018b00:	b2bf      	uxth	r7, r7
 8018b02:	e7ed      	b.n	8018ae0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8018b04:	2a01      	cmp	r2, #1
 8018b06:	d125      	bne.n	8018b54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8018b08:	f003 0103 	and.w	r1, r3, #3
 8018b0c:	1eaa      	subs	r2, r5, #2
 8018b0e:	440a      	add	r2, r1
 8018b10:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018b14:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018b18:	b2d2      	uxtb	r2, r2
 8018b1a:	3902      	subs	r1, #2
 8018b1c:	3b02      	subs	r3, #2
 8018b1e:	f362 0507 	bfi	r5, r2, #0, #8
 8018b22:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018b26:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018b2a:	f361 250f 	bfi	r5, r1, #8, #8
 8018b2e:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8018b32:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018b36:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8018b3a:	fb10 1103 	smlabb	r1, r0, r3, r1
 8018b3e:	f363 4517 	bfi	r5, r3, #16, #8
 8018b42:	9b00      	ldr	r3, [sp, #0]
 8018b44:	fb16 1202 	smlabb	r2, r6, r2, r1
 8018b48:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8018b4c:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8018b50:	6055      	str	r5, [r2, #4]
 8018b52:	e7d4      	b.n	8018afe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018b54:	2a02      	cmp	r2, #2
 8018b56:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018b5a:	d12c      	bne.n	8018bb6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8018b5c:	f899 2001 	ldrb.w	r2, [r9, #1]
 8018b60:	f1a3 0c20 	sub.w	ip, r3, #32
 8018b64:	f109 0802 	add.w	r8, r9, #2
 8018b68:	b2d2      	uxtb	r2, r2
 8018b6a:	f002 010f 	and.w	r1, r2, #15
 8018b6e:	1112      	asrs	r2, r2, #4
 8018b70:	3908      	subs	r1, #8
 8018b72:	3a08      	subs	r2, #8
 8018b74:	4461      	add	r1, ip
 8018b76:	4494      	add	ip, r2
 8018b78:	4429      	add	r1, r5
 8018b7a:	b2c9      	uxtb	r1, r1
 8018b7c:	f361 0507 	bfi	r5, r1, #0, #8
 8018b80:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8018b84:	f1ae 0e20 	sub.w	lr, lr, #32
 8018b88:	4473      	add	r3, lr
 8018b8a:	b2db      	uxtb	r3, r3
 8018b8c:	f363 250f 	bfi	r5, r3, #8, #8
 8018b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8018b94:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8018b98:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8018b9c:	fb10 330c 	smlabb	r3, r0, ip, r3
 8018ba0:	f36c 4517 	bfi	r5, ip, #16, #8
 8018ba4:	fb16 3101 	smlabb	r1, r6, r1, r3
 8018ba8:	9b00      	ldr	r3, [sp, #0]
 8018baa:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8018bae:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8018bb2:	604d      	str	r5, [r1, #4]
 8018bb4:	e7a3      	b.n	8018afe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8018bb6:	3301      	adds	r3, #1
 8018bb8:	42bb      	cmp	r3, r7
 8018bba:	dd23      	ble.n	8018c04 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8018bbc:	eba3 0907 	sub.w	r9, r3, r7
 8018bc0:	f1b9 0f00 	cmp.w	r9, #0
 8018bc4:	dc20      	bgt.n	8018c08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8018bc6:	9e02      	ldr	r6, [sp, #8]
 8018bc8:	2700      	movs	r7, #0
 8018bca:	2e00      	cmp	r6, #0
 8018bcc:	f340 8142 	ble.w	8018e54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8018bd0:	f108 0301 	add.w	r3, r8, #1
 8018bd4:	9307      	str	r3, [sp, #28]
 8018bd6:	f898 3000 	ldrb.w	r3, [r8]
 8018bda:	b2db      	uxtb	r3, r3
 8018bdc:	119a      	asrs	r2, r3, #6
 8018bde:	d12a      	bne.n	8018c36 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8018be0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018be4:	9a00      	ldr	r2, [sp, #0]
 8018be6:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018bea:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8018bee:	685d      	ldr	r5, [r3, #4]
 8018bf0:	f040 811f 	bne.w	8018e32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018bf4:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018bf8:	7025      	strb	r5, [r4, #0]
 8018bfa:	7063      	strb	r3, [r4, #1]
 8018bfc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018c00:	70a3      	strb	r3, [r4, #2]
 8018c02:	e04e      	b.n	8018ca2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018c04:	1aff      	subs	r7, r7, r3
 8018c06:	e77b      	b.n	8018b00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8018c08:	9b02      	ldr	r3, [sp, #8]
 8018c0a:	4620      	mov	r0, r4
 8018c0c:	462a      	mov	r2, r5
 8018c0e:	454b      	cmp	r3, r9
 8018c10:	bfa8      	it	ge
 8018c12:	464b      	movge	r3, r9
 8018c14:	461f      	mov	r7, r3
 8018c16:	9b02      	ldr	r3, [sp, #8]
 8018c18:	4639      	mov	r1, r7
 8018c1a:	1bde      	subs	r6, r3, r7
 8018c1c:	eba9 0907 	sub.w	r9, r9, r7
 8018c20:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8018c24:	465b      	mov	r3, fp
 8018c26:	f7ea fbd5 	bl	80033d4 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8018c2a:	443c      	add	r4, r7
 8018c2c:	e7cc      	b.n	8018bc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018c2e:	46c8      	mov	r8, r9
 8018c30:	9e02      	ldr	r6, [sp, #8]
 8018c32:	46b9      	mov	r9, r7
 8018c34:	e7c8      	b.n	8018bc8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8018c36:	2a01      	cmp	r2, #1
 8018c38:	d136      	bne.n	8018ca8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8018c3a:	f003 0103 	and.w	r1, r3, #3
 8018c3e:	1ea8      	subs	r0, r5, #2
 8018c40:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018c44:	4408      	add	r0, r1
 8018c46:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8018c4a:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8018c4e:	b2c0      	uxtb	r0, r0
 8018c50:	f1a1 0102 	sub.w	r1, r1, #2
 8018c54:	f1a3 0302 	sub.w	r3, r3, #2
 8018c58:	f360 0507 	bfi	r5, r0, #0, #8
 8018c5c:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8018c60:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8018c64:	f361 250f 	bfi	r5, r1, #8, #8
 8018c68:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8018c6c:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8018c70:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8018c74:	f04f 0303 	mov.w	r3, #3
 8018c78:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8018c7c:	f04f 0c07 	mov.w	ip, #7
 8018c80:	9b00      	ldr	r3, [sp, #0]
 8018c82:	f368 4517 	bfi	r5, r8, #16, #8
 8018c86:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8018c8a:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8018c8e:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8018c92:	f8cc 5004 	str.w	r5, [ip, #4]
 8018c96:	f040 80cd 	bne.w	8018e34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018c9a:	7020      	strb	r0, [r4, #0]
 8018c9c:	7061      	strb	r1, [r4, #1]
 8018c9e:	f884 8002 	strb.w	r8, [r4, #2]
 8018ca2:	3e01      	subs	r6, #1
 8018ca4:	3403      	adds	r4, #3
 8018ca6:	e0c1      	b.n	8018e2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018ca8:	2a02      	cmp	r2, #2
 8018caa:	d13d      	bne.n	8018d28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8018cac:	f898 1001 	ldrb.w	r1, [r8, #1]
 8018cb0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018cb4:	f108 0202 	add.w	r2, r8, #2
 8018cb8:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018cbc:	b2c9      	uxtb	r1, r1
 8018cbe:	f1a3 0c20 	sub.w	ip, r3, #32
 8018cc2:	9207      	str	r2, [sp, #28]
 8018cc4:	f001 000f 	and.w	r0, r1, #15
 8018cc8:	f1a0 0008 	sub.w	r0, r0, #8
 8018ccc:	4460      	add	r0, ip
 8018cce:	4428      	add	r0, r5
 8018cd0:	b2c0      	uxtb	r0, r0
 8018cd2:	f360 0507 	bfi	r5, r0, #0, #8
 8018cd6:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018cda:	f1a2 0220 	sub.w	r2, r2, #32
 8018cde:	4413      	add	r3, r2
 8018ce0:	ea4f 1221 	mov.w	r2, r1, asr #4
 8018ce4:	b2db      	uxtb	r3, r3
 8018ce6:	f1a2 0208 	sub.w	r2, r2, #8
 8018cea:	f363 250f 	bfi	r5, r3, #8, #8
 8018cee:	4462      	add	r2, ip
 8018cf0:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8018cf4:	f04f 0c03 	mov.w	ip, #3
 8018cf8:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8018cfc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8018d00:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8018d04:	f04f 0107 	mov.w	r1, #7
 8018d08:	f362 4517 	bfi	r5, r2, #16, #8
 8018d0c:	fb11 c100 	smlabb	r1, r1, r0, ip
 8018d10:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8018d14:	9900      	ldr	r1, [sp, #0]
 8018d16:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8018d1a:	604d      	str	r5, [r1, #4]
 8018d1c:	f040 8089 	bne.w	8018e32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018d20:	7020      	strb	r0, [r4, #0]
 8018d22:	7063      	strb	r3, [r4, #1]
 8018d24:	70a2      	strb	r2, [r4, #2]
 8018d26:	e7bc      	b.n	8018ca2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018d28:	2bfe      	cmp	r3, #254	@ 0xfe
 8018d2a:	d12f      	bne.n	8018d8c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8018d2c:	f898 0001 	ldrb.w	r0, [r8, #1]
 8018d30:	f108 0304 	add.w	r3, r8, #4
 8018d34:	f898 2002 	ldrb.w	r2, [r8, #2]
 8018d38:	f04f 0c03 	mov.w	ip, #3
 8018d3c:	f898 1003 	ldrb.w	r1, [r8, #3]
 8018d40:	b2c0      	uxtb	r0, r0
 8018d42:	b2d2      	uxtb	r2, r2
 8018d44:	9307      	str	r3, [sp, #28]
 8018d46:	b2c9      	uxtb	r1, r1
 8018d48:	f360 0507 	bfi	r5, r0, #0, #8
 8018d4c:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8018d50:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018d54:	f362 250f 	bfi	r5, r2, #8, #8
 8018d58:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8018d5c:	f04f 0307 	mov.w	r3, #7
 8018d60:	f361 4517 	bfi	r5, r1, #16, #8
 8018d64:	fb13 c300 	smlabb	r3, r3, r0, ip
 8018d68:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8018d6c:	9b00      	ldr	r3, [sp, #0]
 8018d6e:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8018d72:	605d      	str	r5, [r3, #4]
 8018d74:	d15d      	bne.n	8018e32 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8018d76:	7020      	strb	r0, [r4, #0]
 8018d78:	7062      	strb	r2, [r4, #1]
 8018d7a:	70a1      	strb	r1, [r4, #2]
 8018d7c:	e791      	b.n	8018ca2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8018d7e:	bf00      	nop
 8018d80:	240248fc 	.word	0x240248fc
 8018d84:	240248f6 	.word	0x240248f6
 8018d88:	24000140 	.word	0x24000140
 8018d8c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8018d90:	1c5a      	adds	r2, r3, #1
 8018d92:	b94b      	cbnz	r3, 8018da8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8018d94:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018d98:	d14c      	bne.n	8018e34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8018d9a:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8018d9e:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018da2:	7025      	strb	r5, [r4, #0]
 8018da4:	7062      	strb	r2, [r4, #1]
 8018da6:	e72b      	b.n	8018c00 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8018da8:	4296      	cmp	r6, r2
 8018daa:	46b0      	mov	r8, r6
 8018dac:	bfa8      	it	ge
 8018dae:	4690      	movge	r8, r2
 8018db0:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8018db4:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018db8:	eba6 0608 	sub.w	r6, r6, r8
 8018dbc:	eba2 0908 	sub.w	r9, r2, r8
 8018dc0:	9308      	str	r3, [sp, #32]
 8018dc2:	b2eb      	uxtb	r3, r5
 8018dc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8018dc6:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8018dca:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018dcc:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8018dd0:	930a      	str	r3, [sp, #40]	@ 0x28
 8018dd2:	9b08      	ldr	r3, [sp, #32]
 8018dd4:	d030      	beq.n	8018e38 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8018dd6:	18fb      	adds	r3, r7, r3
 8018dd8:	2bc0      	cmp	r3, #192	@ 0xc0
 8018dda:	dd15      	ble.n	8018e08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8018ddc:	4650      	mov	r0, sl
 8018dde:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018de2:	f7ea fadd 	bl	80033a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8018de6:	2203      	movs	r2, #3
 8018de8:	4651      	mov	r1, sl
 8018dea:	465b      	mov	r3, fp
 8018dec:	4620      	mov	r0, r4
 8018dee:	443c      	add	r4, r7
 8018df0:	fb97 f2f2 	sdiv	r2, r7, r2
 8018df4:	f7ea fb18 	bl	8003428 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018df8:	4b3d      	ldr	r3, [pc, #244]	@ (8018ef0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8018dfa:	2700      	movs	r7, #0
 8018dfc:	459a      	cmp	sl, r3
 8018dfe:	bf0c      	ite	eq
 8018e00:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8018efc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8018e04:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8018ef0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8018e08:	eb0a 0307 	add.w	r3, sl, r7
 8018e0c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018e0e:	f1b8 0801 	subs.w	r8, r8, #1
 8018e12:	f103 0303 	add.w	r3, r3, #3
 8018e16:	f803 2c03 	strb.w	r2, [r3, #-3]
 8018e1a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018e1c:	f803 2c02 	strb.w	r2, [r3, #-2]
 8018e20:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e22:	f803 2c01 	strb.w	r2, [r3, #-1]
 8018e26:	d1f1      	bne.n	8018e0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8018e28:	9b08      	ldr	r3, [sp, #32]
 8018e2a:	441f      	add	r7, r3
 8018e2c:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8018e30:	e6cb      	b.n	8018bca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8018e32:	2201      	movs	r2, #1
 8018e34:	4690      	mov	r8, r2
 8018e36:	e7bb      	b.n	8018db0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8018e38:	4423      	add	r3, r4
 8018e3a:	42a3      	cmp	r3, r4
 8018e3c:	d9f6      	bls.n	8018e2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8018e3e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8018e40:	3403      	adds	r4, #3
 8018e42:	f804 2c03 	strb.w	r2, [r4, #-3]
 8018e46:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018e48:	f804 2c02 	strb.w	r2, [r4, #-2]
 8018e4c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8018e4e:	f804 2c01 	strb.w	r2, [r4, #-1]
 8018e52:	e7f2      	b.n	8018e3a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8018e54:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8018e58:	d00e      	beq.n	8018e78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018e5a:	b16f      	cbz	r7, 8018e78 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8018e5c:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8018e60:	4650      	mov	r0, sl
 8018e62:	f7ea fa9d 	bl	80033a0 <_ZN8touchgfx5paint9flushLineEPmi>
 8018e66:	2203      	movs	r2, #3
 8018e68:	4620      	mov	r0, r4
 8018e6a:	443c      	add	r4, r7
 8018e6c:	465b      	mov	r3, fp
 8018e6e:	4651      	mov	r1, sl
 8018e70:	fb97 f2f2 	sdiv	r2, r7, r2
 8018e74:	f7ea fad8 	bl	8003428 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8018e78:	4b1e      	ldr	r3, [pc, #120]	@ (8018ef4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8018e7a:	9a02      	ldr	r2, [sp, #8]
 8018e7c:	881b      	ldrh	r3, [r3, #0]
 8018e7e:	1a9b      	subs	r3, r3, r2
 8018e80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018e84:	441c      	add	r4, r3
 8018e86:	9b04      	ldr	r3, [sp, #16]
 8018e88:	3301      	adds	r3, #1
 8018e8a:	9304      	str	r3, [sp, #16]
 8018e8c:	9a04      	ldr	r2, [sp, #16]
 8018e8e:	9b01      	ldr	r3, [sp, #4]
 8018e90:	4293      	cmp	r3, r2
 8018e92:	d11c      	bne.n	8018ece <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8018e94:	9b03      	ldr	r3, [sp, #12]
 8018e96:	2500      	movs	r5, #0
 8018e98:	9a03      	ldr	r2, [sp, #12]
 8018e9a:	1c5e      	adds	r6, r3, #1
 8018e9c:	9b05      	ldr	r3, [sp, #20]
 8018e9e:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8018ea2:	4629      	mov	r1, r5
 8018ea4:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8018ea8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8018eac:	9b06      	ldr	r3, [sp, #24]
 8018eae:	fa98 f888 	rev.w	r8, r8
 8018eb2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8018eb4:	4498      	add	r8, r3
 8018eb6:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8018eba:	1aff      	subs	r7, r7, r3
 8018ebc:	f007 ff54 	bl	8020d68 <memset>
 8018ec0:	b2bf      	uxth	r7, r7
 8018ec2:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8018ec6:	f7ea fa61 	bl	800338c <_ZN8touchgfx5paint8tearDownEv>
 8018eca:	46c1      	mov	r9, r8
 8018ecc:	e5db      	b.n	8018a86 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8018ece:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8018ed2:	9b02      	ldr	r3, [sp, #8]
 8018ed4:	1aff      	subs	r7, r7, r3
 8018ed6:	eba7 0709 	sub.w	r7, r7, r9
 8018eda:	b2bf      	uxth	r7, r7
 8018edc:	e7f3      	b.n	8018ec6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8018ede:	4b06      	ldr	r3, [pc, #24]	@ (8018ef8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8018ee0:	6818      	ldr	r0, [r3, #0]
 8018ee2:	6803      	ldr	r3, [r0, #0]
 8018ee4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018ee6:	4798      	blx	r3
 8018ee8:	b013      	add	sp, #76	@ 0x4c
 8018eea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018eee:	bf00      	nop
 8018ef0:	24000140 	.word	0x24000140
 8018ef4:	240248f6 	.word	0x240248f6
 8018ef8:	240248fc 	.word	0x240248fc
 8018efc:	24000240 	.word	0x24000240

08018f00 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8018f00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8018f04:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8018f08:	9c06      	ldr	r4, [sp, #24]
 8018f0a:	2800      	cmp	r0, #0
 8018f0c:	d06e      	beq.n	8018fec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018f0e:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8018f12:	2d00      	cmp	r5, #0
 8018f14:	dd6a      	ble.n	8018fec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018f16:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8018f1a:	f1bc 0f00 	cmp.w	ip, #0
 8018f1e:	dd65      	ble.n	8018fec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018f20:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8018f24:	28ff      	cmp	r0, #255	@ 0xff
 8018f26:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018f2a:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8018f2e:	fb02 3306 	mla	r3, r2, r6, r3
 8018f32:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8018f36:	b2e4      	uxtb	r4, r4
 8018f38:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f3c:	4419      	add	r1, r3
 8018f3e:	fb02 f30c 	mul.w	r3, r2, ip
 8018f42:	eba2 0205 	sub.w	r2, r2, r5
 8018f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018f4a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018f4e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018f52:	440b      	add	r3, r1
 8018f54:	d03e      	beq.n	8018fd4 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8018f56:	fa1f fc80 	uxth.w	ip, r0
 8018f5a:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8018f5e:	fb06 f60c 	mul.w	r6, r6, ip
 8018f62:	b280      	uxth	r0, r0
 8018f64:	fb07 f70c 	mul.w	r7, r7, ip
 8018f68:	fb04 f40c 	mul.w	r4, r4, ip
 8018f6c:	4299      	cmp	r1, r3
 8018f6e:	d23d      	bcs.n	8018fec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018f70:	eb01 0c05 	add.w	ip, r1, r5
 8018f74:	458c      	cmp	ip, r1
 8018f76:	f101 0e03 	add.w	lr, r1, #3
 8018f7a:	d928      	bls.n	8018fce <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8018f7c:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8018f80:	fb11 f100 	smulbb	r1, r1, r0
 8018f84:	4421      	add	r1, r4
 8018f86:	b289      	uxth	r1, r1
 8018f88:	f101 0801 	add.w	r8, r1, #1
 8018f8c:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018f90:	1209      	asrs	r1, r1, #8
 8018f92:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8018f96:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8018f9a:	fb11 f100 	smulbb	r1, r1, r0
 8018f9e:	4439      	add	r1, r7
 8018fa0:	b289      	uxth	r1, r1
 8018fa2:	f101 0801 	add.w	r8, r1, #1
 8018fa6:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018faa:	1209      	asrs	r1, r1, #8
 8018fac:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8018fb0:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8018fb4:	fb11 f100 	smulbb	r1, r1, r0
 8018fb8:	4431      	add	r1, r6
 8018fba:	b289      	uxth	r1, r1
 8018fbc:	f101 0801 	add.w	r8, r1, #1
 8018fc0:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8018fc4:	1209      	asrs	r1, r1, #8
 8018fc6:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8018fca:	4671      	mov	r1, lr
 8018fcc:	e7d2      	b.n	8018f74 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8018fce:	4411      	add	r1, r2
 8018fd0:	e7cc      	b.n	8018f6c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8018fd2:	4411      	add	r1, r2
 8018fd4:	4299      	cmp	r1, r3
 8018fd6:	d209      	bcs.n	8018fec <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8018fd8:	1948      	adds	r0, r1, r5
 8018fda:	4281      	cmp	r1, r0
 8018fdc:	d2f9      	bcs.n	8018fd2 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8018fde:	700c      	strb	r4, [r1, #0]
 8018fe0:	3103      	adds	r1, #3
 8018fe2:	f801 7c02 	strb.w	r7, [r1, #-2]
 8018fe6:	f801 6c01 	strb.w	r6, [r1, #-1]
 8018fea:	e7f6      	b.n	8018fda <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8018fec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08018ff0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8018ff0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018ff4:	b093      	sub	sp, #76	@ 0x4c
 8018ff6:	4699      	mov	r9, r3
 8018ff8:	4617      	mov	r7, r2
 8018ffa:	f9b3 2000 	ldrsh.w	r2, [r3]
 8018ffe:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8019002:	4604      	mov	r4, r0
 8019004:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019008:	a80c      	add	r0, sp, #48	@ 0x30
 801900a:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 801900e:	460d      	mov	r5, r1
 8019010:	4649      	mov	r1, r9
 8019012:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019016:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801901a:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 801901e:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8019022:	f7f4 ffd3 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 8019026:	4639      	mov	r1, r7
 8019028:	a80c      	add	r0, sp, #48	@ 0x30
 801902a:	f7f4 ffcf 	bl	800dfcc <_ZN8touchgfx4RectaNERKS0_>
 801902e:	4b78      	ldr	r3, [pc, #480]	@ (8019210 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8019030:	8818      	ldrh	r0, [r3, #0]
 8019032:	4b78      	ldr	r3, [pc, #480]	@ (8019214 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8019034:	b202      	sxth	r2, r0
 8019036:	8819      	ldrh	r1, [r3, #0]
 8019038:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 801903c:	b20f      	sxth	r7, r1
 801903e:	2b00      	cmp	r3, #0
 8019040:	da07      	bge.n	8019052 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8019042:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8019046:	4463      	add	r3, ip
 8019048:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 801904c:	2300      	movs	r3, #0
 801904e:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8019052:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8019056:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 801905a:	1ad2      	subs	r2, r2, r3
 801905c:	4594      	cmp	ip, r2
 801905e:	bfc4      	itt	gt
 8019060:	1ac2      	subgt	r2, r0, r3
 8019062:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8019066:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801906a:	2a00      	cmp	r2, #0
 801906c:	da07      	bge.n	801907e <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 801906e:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8019072:	4462      	add	r2, ip
 8019074:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8019078:	2200      	movs	r2, #0
 801907a:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 801907e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019082:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8019086:	1abf      	subs	r7, r7, r2
 8019088:	45bc      	cmp	ip, r7
 801908a:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801921c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 801908e:	bfc8      	it	gt
 8019090:	1a8f      	subgt	r7, r1, r2
 8019092:	f89c c000 	ldrb.w	ip, [ip]
 8019096:	bfc8      	it	gt
 8019098:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 801909c:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 80190a0:	f1bc 0f00 	cmp.w	ip, #0
 80190a4:	d176      	bne.n	8019194 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 80190a6:	4287      	cmp	r7, r0
 80190a8:	bf14      	ite	ne
 80190aa:	2100      	movne	r1, #0
 80190ac:	2101      	moveq	r1, #1
 80190ae:	2f00      	cmp	r7, #0
 80190b0:	9107      	str	r1, [sp, #28]
 80190b2:	dd73      	ble.n	801919c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80190b4:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 80190b8:	2900      	cmp	r1, #0
 80190ba:	9104      	str	r1, [sp, #16]
 80190bc:	dd6e      	ble.n	801919c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 80190be:	f8b9 1000 	ldrh.w	r1, [r9]
 80190c2:	a80e      	add	r0, sp, #56	@ 0x38
 80190c4:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 80190c8:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 80190cc:	1a5b      	subs	r3, r3, r1
 80190ce:	a910      	add	r1, sp, #64	@ 0x40
 80190d0:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 80190d4:	b21b      	sxth	r3, r3
 80190d6:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 80190da:	f8df a144 	ldr.w	sl, [pc, #324]	@ 8019220 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80190de:	9305      	str	r3, [sp, #20]
 80190e0:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 80190e4:	1ad2      	subs	r2, r2, r3
 80190e6:	b213      	sxth	r3, r2
 80190e8:	9306      	str	r3, [sp, #24]
 80190ea:	9b05      	ldr	r3, [sp, #20]
 80190ec:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 80190f0:	9b06      	ldr	r3, [sp, #24]
 80190f2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80190f6:	9b04      	ldr	r3, [sp, #16]
 80190f8:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 80190fc:	2300      	movs	r3, #0
 80190fe:	9310      	str	r3, [sp, #64]	@ 0x40
 8019100:	f7f9 f88e 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019104:	4640      	mov	r0, r8
 8019106:	f7f9 f863 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801910a:	a810      	add	r0, sp, #64	@ 0x40
 801910c:	f7f9 f860 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019110:	4b41      	ldr	r3, [pc, #260]	@ (8019218 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 8019112:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 8019116:	4628      	mov	r0, r5
 8019118:	881b      	ldrh	r3, [r3, #0]
 801911a:	9308      	str	r3, [sp, #32]
 801911c:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 8019120:	b21b      	sxth	r3, r3
 8019122:	9303      	str	r3, [sp, #12]
 8019124:	682b      	ldr	r3, [r5, #0]
 8019126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019128:	4798      	blx	r3
 801912a:	9a03      	ldr	r2, [sp, #12]
 801912c:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 8019130:	4681      	mov	r9, r0
 8019132:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 8019136:	fb13 f302 	smulbb	r3, r3, r2
 801913a:	2203      	movs	r2, #3
 801913c:	f8da 0000 	ldr.w	r0, [sl]
 8019140:	fb15 3302 	smlabb	r3, r5, r2, r3
 8019144:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 8019146:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019148:	441d      	add	r5, r3
 801914a:	6803      	ldr	r3, [r0, #0]
 801914c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801914e:	4798      	blx	r3
 8019150:	9009      	str	r0, [sp, #36]	@ 0x24
 8019152:	f8da 0000 	ldr.w	r0, [sl]
 8019156:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801915a:	6803      	ldr	r3, [r0, #0]
 801915c:	910a      	str	r1, [sp, #40]	@ 0x28
 801915e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019160:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 8019164:	4798      	blx	r3
 8019166:	f010 0f01 	tst.w	r0, #1
 801916a:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801916e:	d01e      	beq.n	80191ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 8019170:	f8da 0000 	ldr.w	r0, [sl]
 8019174:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 8019178:	6803      	ldr	r3, [r0, #0]
 801917a:	9200      	str	r2, [sp, #0]
 801917c:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801917e:	462b      	mov	r3, r5
 8019180:	e898 0006 	ldmia.w	r8, {r1, r2}
 8019184:	47b0      	blx	r6
 8019186:	9b05      	ldr	r3, [sp, #20]
 8019188:	80a7      	strh	r7, [r4, #4]
 801918a:	8023      	strh	r3, [r4, #0]
 801918c:	9b06      	ldr	r3, [sp, #24]
 801918e:	8063      	strh	r3, [r4, #2]
 8019190:	9b04      	ldr	r3, [sp, #16]
 8019192:	e007      	b.n	80191a4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 8019194:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 8019198:	4288      	cmp	r0, r1
 801919a:	e785      	b.n	80190a8 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801919c:	2300      	movs	r3, #0
 801919e:	8023      	strh	r3, [r4, #0]
 80191a0:	8063      	strh	r3, [r4, #2]
 80191a2:	80a3      	strh	r3, [r4, #4]
 80191a4:	4620      	mov	r0, r4
 80191a6:	80e3      	strh	r3, [r4, #6]
 80191a8:	b013      	add	sp, #76	@ 0x4c
 80191aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80191ae:	fb09 f606 	mul.w	r6, r9, r6
 80191b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80191b4:	fb11 6602 	smlabb	r6, r1, r2, r6
 80191b8:	9a07      	ldr	r2, [sp, #28]
 80191ba:	4433      	add	r3, r6
 80191bc:	461e      	mov	r6, r3
 80191be:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80191c2:	b16a      	cbz	r2, 80191e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80191c4:	9a08      	ldr	r2, [sp, #32]
 80191c6:	4593      	cmp	fp, r2
 80191c8:	d10a      	bne.n	80191e0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 80191ca:	f8da 0000 	ldr.w	r0, [sl]
 80191ce:	fb09 f303 	mul.w	r3, r9, r3
 80191d2:	4629      	mov	r1, r5
 80191d4:	6802      	ldr	r2, [r0, #0]
 80191d6:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 80191da:	4632      	mov	r2, r6
 80191dc:	47d0      	blx	sl
 80191de:	e7d2      	b.n	8019186 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80191e0:	9a03      	ldr	r2, [sp, #12]
 80191e2:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 8019220 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 80191e6:	fb02 5803 	mla	r8, r2, r3, r5
 80191ea:	4545      	cmp	r5, r8
 80191ec:	d2cb      	bcs.n	8019186 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 80191ee:	f8db 0000 	ldr.w	r0, [fp]
 80191f2:	4629      	mov	r1, r5
 80191f4:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 80191f8:	6802      	ldr	r2, [r0, #0]
 80191fa:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80191fe:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 8019202:	4632      	mov	r2, r6
 8019204:	47d0      	blx	sl
 8019206:	9b03      	ldr	r3, [sp, #12]
 8019208:	444e      	add	r6, r9
 801920a:	441d      	add	r5, r3
 801920c:	e7ed      	b.n	80191ea <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801920e:	bf00      	nop
 8019210:	240248f0 	.word	0x240248f0
 8019214:	240248f2 	.word	0x240248f2
 8019218:	240248f6 	.word	0x240248f6
 801921c:	240248f4 	.word	0x240248f4
 8019220:	240248fc 	.word	0x240248fc

08019224 <_ZN8touchgfx8LCD24bppC1Ev>:
 8019224:	2200      	movs	r2, #0
 8019226:	490e      	ldr	r1, [pc, #56]	@ (8019260 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 8019228:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801922c:	6001      	str	r1, [r0, #0]
 801922e:	e9c0 2203 	strd	r2, r2, [r0, #12]
 8019232:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8019236:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801923a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801923e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8019242:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 8019246:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801924a:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801924e:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 8019252:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 8019256:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801925a:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801925e:	4770      	bx	lr
 8019260:	08024988 	.word	0x08024988

08019264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 8019264:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019268:	b091      	sub	sp, #68	@ 0x44
 801926a:	4607      	mov	r7, r0
 801926c:	4688      	mov	r8, r1
 801926e:	6810      	ldr	r0, [r2, #0]
 8019270:	6851      	ldr	r1, [r2, #4]
 8019272:	ac0c      	add	r4, sp, #48	@ 0x30
 8019274:	4616      	mov	r6, r2
 8019276:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801927a:	4d64      	ldr	r5, [pc, #400]	@ (801940c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801927c:	f8df a190 	ldr.w	sl, [pc, #400]	@ 8019410 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 8019280:	c403      	stmia	r4!, {r0, r1}
 8019282:	6818      	ldr	r0, [r3, #0]
 8019284:	ac0e      	add	r4, sp, #56	@ 0x38
 8019286:	6859      	ldr	r1, [r3, #4]
 8019288:	c403      	stmia	r4!, {r0, r1}
 801928a:	a80c      	add	r0, sp, #48	@ 0x30
 801928c:	f7f8 ffa0 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019290:	4631      	mov	r1, r6
 8019292:	a80e      	add	r0, sp, #56	@ 0x38
 8019294:	f7f8 ffc4 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019298:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801929c:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80192a0:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 80192a4:	6828      	ldr	r0, [r5, #0]
 80192a6:	fb11 2103 	smlabb	r1, r1, r3, r2
 80192aa:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 80192ae:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 80192b2:	440f      	add	r7, r1
 80192b4:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80192b8:	440a      	add	r2, r1
 80192ba:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 80192be:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 80192c2:	4413      	add	r3, r2
 80192c4:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 80192c8:	6803      	ldr	r3, [r0, #0]
 80192ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80192cc:	4798      	blx	r3
 80192ce:	f010 0f80 	tst.w	r0, #128	@ 0x80
 80192d2:	6828      	ldr	r0, [r5, #0]
 80192d4:	d01f      	beq.n	8019316 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 80192d6:	2201      	movs	r2, #1
 80192d8:	2500      	movs	r5, #0
 80192da:	6801      	ldr	r1, [r0, #0]
 80192dc:	b2a4      	uxth	r4, r4
 80192de:	b2b6      	uxth	r6, r6
 80192e0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 80192e4:	e9cd 2508 	strd	r2, r5, [sp, #32]
 80192e8:	250b      	movs	r5, #11
 80192ea:	9507      	str	r5, [sp, #28]
 80192ec:	f8ba 5000 	ldrh.w	r5, [sl]
 80192f0:	f8cd 9010 	str.w	r9, [sp, #16]
 80192f4:	9602      	str	r6, [sp, #8]
 80192f6:	9401      	str	r4, [sp, #4]
 80192f8:	e9cd 2505 	strd	r2, r5, [sp, #20]
 80192fc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 8019300:	9203      	str	r2, [sp, #12]
 8019302:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019306:	9200      	str	r2, [sp, #0]
 8019308:	4642      	mov	r2, r8
 801930a:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801930c:	4639      	mov	r1, r7
 801930e:	47a0      	blx	r4
 8019310:	b011      	add	sp, #68	@ 0x44
 8019312:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019316:	6803      	ldr	r3, [r0, #0]
 8019318:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801931a:	4798      	blx	r3
 801931c:	f8ba 5000 	ldrh.w	r5, [sl]
 8019320:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 8019324:	f04f 0e04 	mov.w	lr, #4
 8019328:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801932c:	436e      	muls	r6, r5
 801932e:	fb05 2303 	mla	r3, r5, r3, r2
 8019332:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8019336:	1b2d      	subs	r5, r5, r4
 8019338:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801933c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019340:	4418      	add	r0, r3
 8019342:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8019346:	1982      	adds	r2, r0, r6
 8019348:	1b1b      	subs	r3, r3, r4
 801934a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801934e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019350:	4290      	cmp	r0, r2
 8019352:	d254      	bcs.n	80193fe <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 8019354:	eb00 0a04 	add.w	sl, r0, r4
 8019358:	4550      	cmp	r0, sl
 801935a:	d24c      	bcs.n	80193f6 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801935c:	f817 1b01 	ldrb.w	r1, [r7], #1
 8019360:	fb1e e101 	smlabb	r1, lr, r1, lr
 8019364:	eb08 0c01 	add.w	ip, r8, r1
 8019368:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801936c:	b173      	cbz	r3, 801938c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801936e:	2bff      	cmp	r3, #255	@ 0xff
 8019370:	f818 b001 	ldrb.w	fp, [r8, r1]
 8019374:	d10c      	bne.n	8019390 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 8019376:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801937a:	d109      	bne.n	8019390 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801937c:	f880 b000 	strb.w	fp, [r0]
 8019380:	f89c 3001 	ldrb.w	r3, [ip, #1]
 8019384:	7043      	strb	r3, [r0, #1]
 8019386:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801938a:	7083      	strb	r3, [r0, #2]
 801938c:	3003      	adds	r0, #3
 801938e:	e7e3      	b.n	8019358 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 8019390:	fb09 f103 	mul.w	r1, r9, r3
 8019394:	1c4b      	adds	r3, r1, #1
 8019396:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801939a:	7801      	ldrb	r1, [r0, #0]
 801939c:	121b      	asrs	r3, r3, #8
 801939e:	b29e      	uxth	r6, r3
 80193a0:	43db      	mvns	r3, r3
 80193a2:	fb1b fb06 	smulbb	fp, fp, r6
 80193a6:	b2db      	uxtb	r3, r3
 80193a8:	fb01 b103 	mla	r1, r1, r3, fp
 80193ac:	b289      	uxth	r1, r1
 80193ae:	f101 0b01 	add.w	fp, r1, #1
 80193b2:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80193b6:	f890 b001 	ldrb.w	fp, [r0, #1]
 80193ba:	fb1b fb03 	smulbb	fp, fp, r3
 80193be:	1209      	asrs	r1, r1, #8
 80193c0:	7001      	strb	r1, [r0, #0]
 80193c2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 80193c6:	fb01 b106 	mla	r1, r1, r6, fp
 80193ca:	b289      	uxth	r1, r1
 80193cc:	f101 0b01 	add.w	fp, r1, #1
 80193d0:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 80193d4:	1209      	asrs	r1, r1, #8
 80193d6:	7041      	strb	r1, [r0, #1]
 80193d8:	f89c 1002 	ldrb.w	r1, [ip, #2]
 80193dc:	f890 c002 	ldrb.w	ip, [r0, #2]
 80193e0:	fb1c f303 	smulbb	r3, ip, r3
 80193e4:	fb01 3606 	mla	r6, r1, r6, r3
 80193e8:	b2b6      	uxth	r6, r6
 80193ea:	1c73      	adds	r3, r6, #1
 80193ec:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 80193f0:	1236      	asrs	r6, r6, #8
 80193f2:	7086      	strb	r6, [r0, #2]
 80193f4:	e7ca      	b.n	801938c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 80193f6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80193f8:	4428      	add	r0, r5
 80193fa:	441f      	add	r7, r3
 80193fc:	e7a8      	b.n	8019350 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 80193fe:	4b03      	ldr	r3, [pc, #12]	@ (801940c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 8019400:	6818      	ldr	r0, [r3, #0]
 8019402:	6803      	ldr	r3, [r0, #0]
 8019404:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019406:	4798      	blx	r3
 8019408:	e782      	b.n	8019310 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801940a:	bf00      	nop
 801940c:	240248fc 	.word	0x240248fc
 8019410:	240248f6 	.word	0x240248f6

08019414 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 8019414:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019418:	b091      	sub	sp, #68	@ 0x44
 801941a:	4680      	mov	r8, r0
 801941c:	460e      	mov	r6, r1
 801941e:	6810      	ldr	r0, [r2, #0]
 8019420:	6851      	ldr	r1, [r2, #4]
 8019422:	ad0c      	add	r5, sp, #48	@ 0x30
 8019424:	4614      	mov	r4, r2
 8019426:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801942a:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 80195c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801942e:	f8df a198 	ldr.w	sl, [pc, #408]	@ 80195c8 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 8019432:	c503      	stmia	r5!, {r0, r1}
 8019434:	6818      	ldr	r0, [r3, #0]
 8019436:	ad0e      	add	r5, sp, #56	@ 0x38
 8019438:	6859      	ldr	r1, [r3, #4]
 801943a:	c503      	stmia	r5!, {r0, r1}
 801943c:	a80c      	add	r0, sp, #48	@ 0x30
 801943e:	f7f8 fec7 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019442:	4621      	mov	r1, r4
 8019444:	a80e      	add	r0, sp, #56	@ 0x38
 8019446:	f7f8 feeb 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801944a:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801944e:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 8019452:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019456:	f8d9 0000 	ldr.w	r0, [r9]
 801945a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801945e:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 8019462:	eb08 0401 	add.w	r4, r8, r1
 8019466:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801946a:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801946e:	440a      	add	r2, r1
 8019470:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 8019474:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 8019478:	4413      	add	r3, r2
 801947a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801947e:	6803      	ldr	r3, [r0, #0]
 8019480:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019482:	4798      	blx	r3
 8019484:	f010 0f80 	tst.w	r0, #128	@ 0x80
 8019488:	f8d9 0000 	ldr.w	r0, [r9]
 801948c:	d022      	beq.n	80194d4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801948e:	2200      	movs	r2, #0
 8019490:	f04f 0c01 	mov.w	ip, #1
 8019494:	6801      	ldr	r1, [r0, #0]
 8019496:	b2ad      	uxth	r5, r5
 8019498:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801949c:	e9cd c208 	strd	ip, r2, [sp, #32]
 80194a0:	f04f 0c0b 	mov.w	ip, #11
 80194a4:	f8cd c01c 	str.w	ip, [sp, #28]
 80194a8:	f8ba c000 	ldrh.w	ip, [sl]
 80194ac:	9704      	str	r7, [sp, #16]
 80194ae:	9502      	str	r5, [sp, #8]
 80194b0:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 80194b4:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 80194b8:	9203      	str	r2, [sp, #12]
 80194ba:	fa1f f288 	uxth.w	r2, r8
 80194be:	9201      	str	r2, [sp, #4]
 80194c0:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 80194c4:	9200      	str	r2, [sp, #0]
 80194c6:	4632      	mov	r2, r6
 80194c8:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 80194ca:	4621      	mov	r1, r4
 80194cc:	47a8      	blx	r5
 80194ce:	b011      	add	sp, #68	@ 0x44
 80194d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194d4:	6803      	ldr	r3, [r0, #0]
 80194d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80194d8:	4798      	blx	r3
 80194da:	f8ba 2000 	ldrh.w	r2, [sl]
 80194de:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 80194e2:	f04f 0e03 	mov.w	lr, #3
 80194e6:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 80194ea:	4355      	muls	r5, r2
 80194ec:	fa1f fc87 	uxth.w	ip, r7
 80194f0:	fb02 1303 	mla	r3, r2, r3, r1
 80194f4:	eba2 0208 	sub.w	r2, r2, r8
 80194f8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80194fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019500:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019504:	4418      	add	r0, r3
 8019506:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019508:	1943      	adds	r3, r0, r5
 801950a:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801950e:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 8019512:	eba2 0208 	sub.w	r2, r2, r8
 8019516:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801951a:	b2ad      	uxth	r5, r5
 801951c:	4298      	cmp	r0, r3
 801951e:	d24a      	bcs.n	80195b6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 8019520:	eb00 0908 	add.w	r9, r0, r8
 8019524:	4621      	mov	r1, r4
 8019526:	4548      	cmp	r0, r9
 8019528:	460c      	mov	r4, r1
 801952a:	d240      	bcs.n	80195ae <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801952c:	f04f 0a04 	mov.w	sl, #4
 8019530:	7824      	ldrb	r4, [r4, #0]
 8019532:	2fff      	cmp	r7, #255	@ 0xff
 8019534:	f101 0101 	add.w	r1, r1, #1
 8019538:	fb1e a404 	smlabb	r4, lr, r4, sl
 801953c:	eb06 0a04 	add.w	sl, r6, r4
 8019540:	f816 b004 	ldrb.w	fp, [r6, r4]
 8019544:	d02b      	beq.n	801959e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 8019546:	7804      	ldrb	r4, [r0, #0]
 8019548:	fb14 f405 	smulbb	r4, r4, r5
 801954c:	fb0b 440c 	mla	r4, fp, ip, r4
 8019550:	b2a4      	uxth	r4, r4
 8019552:	f104 0b01 	add.w	fp, r4, #1
 8019556:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801955a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801955e:	fb1b fb05 	smulbb	fp, fp, r5
 8019562:	1224      	asrs	r4, r4, #8
 8019564:	7004      	strb	r4, [r0, #0]
 8019566:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801956a:	fb04 b40c 	mla	r4, r4, ip, fp
 801956e:	b2a4      	uxth	r4, r4
 8019570:	f104 0b01 	add.w	fp, r4, #1
 8019574:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 8019578:	1224      	asrs	r4, r4, #8
 801957a:	7044      	strb	r4, [r0, #1]
 801957c:	f89a 4002 	ldrb.w	r4, [sl, #2]
 8019580:	f890 a002 	ldrb.w	sl, [r0, #2]
 8019584:	fb1a fa05 	smulbb	sl, sl, r5
 8019588:	fb04 a40c 	mla	r4, r4, ip, sl
 801958c:	b2a4      	uxth	r4, r4
 801958e:	f104 0a01 	add.w	sl, r4, #1
 8019592:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 8019596:	1224      	asrs	r4, r4, #8
 8019598:	7084      	strb	r4, [r0, #2]
 801959a:	3003      	adds	r0, #3
 801959c:	e7c3      	b.n	8019526 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801959e:	f880 b000 	strb.w	fp, [r0]
 80195a2:	f89a 4001 	ldrb.w	r4, [sl, #1]
 80195a6:	7044      	strb	r4, [r0, #1]
 80195a8:	f89a 4002 	ldrb.w	r4, [sl, #2]
 80195ac:	e7f4      	b.n	8019598 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 80195ae:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 80195b0:	4420      	add	r0, r4
 80195b2:	188c      	adds	r4, r1, r2
 80195b4:	e7b2      	b.n	801951c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 80195b6:	4b03      	ldr	r3, [pc, #12]	@ (80195c4 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 80195b8:	6818      	ldr	r0, [r3, #0]
 80195ba:	6803      	ldr	r3, [r0, #0]
 80195bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80195be:	4798      	blx	r3
 80195c0:	e785      	b.n	80194ce <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 80195c2:	bf00      	nop
 80195c4:	240248fc 	.word	0x240248fc
 80195c8:	240248f6 	.word	0x240248f6

080195cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 80195cc:	b4f0      	push	{r4, r5, r6, r7}
 80195ce:	460c      	mov	r4, r1
 80195d0:	4611      	mov	r1, r2
 80195d2:	f89d 5014 	ldrb.w	r5, [sp, #20]
 80195d6:	461a      	mov	r2, r3
 80195d8:	780f      	ldrb	r7, [r1, #0]
 80195da:	9b04      	ldr	r3, [sp, #16]
 80195dc:	784e      	ldrb	r6, [r1, #1]
 80195de:	b11f      	cbz	r7, 80195e8 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 80195e0:	2f01      	cmp	r7, #1
 80195e2:	d01d      	beq.n	8019620 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 80195e4:	bcf0      	pop	{r4, r5, r6, r7}
 80195e6:	4770      	bx	lr
 80195e8:	2e03      	cmp	r6, #3
 80195ea:	d8fb      	bhi.n	80195e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 80195ec:	e8df f006 	tbb	[pc, r6]
 80195f0:	16140702 	.word	0x16140702
 80195f4:	9504      	str	r5, [sp, #16]
 80195f6:	4620      	mov	r0, r4
 80195f8:	bcf0      	pop	{r4, r5, r6, r7}
 80195fa:	f7ff be33 	b.w	8019264 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 80195fe:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019600:	2800      	cmp	r0, #0
 8019602:	d0ef      	beq.n	80195e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019604:	6806      	ldr	r6, [r0, #0]
 8019606:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801960a:	68f5      	ldr	r5, [r6, #12]
 801960c:	4613      	mov	r3, r2
 801960e:	46ac      	mov	ip, r5
 8019610:	460a      	mov	r2, r1
 8019612:	4621      	mov	r1, r4
 8019614:	bcf0      	pop	{r4, r5, r6, r7}
 8019616:	4760      	bx	ip
 8019618:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801961a:	e7f1      	b.n	8019600 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801961c:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801961e:	e7ef      	b.n	8019600 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 8019620:	2e03      	cmp	r6, #3
 8019622:	d8df      	bhi.n	80195e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 8019624:	e8df f006 	tbb	[pc, r6]
 8019628:	110f0702 	.word	0x110f0702
 801962c:	9504      	str	r5, [sp, #16]
 801962e:	4620      	mov	r0, r4
 8019630:	bcf0      	pop	{r4, r5, r6, r7}
 8019632:	f7ff beef 	b.w	8019414 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 8019636:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 8019638:	2800      	cmp	r0, #0
 801963a:	d0d3      	beq.n	80195e4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801963c:	6806      	ldr	r6, [r0, #0]
 801963e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 8019642:	68b5      	ldr	r5, [r6, #8]
 8019644:	e7e2      	b.n	801960c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 8019646:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 8019648:	e7f6      	b.n	8019638 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801964a:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801964c:	e7f4      	b.n	8019638 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

08019650 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 8019650:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019654:	4605      	mov	r5, r0
 8019656:	b08f      	sub	sp, #60	@ 0x3c
 8019658:	460c      	mov	r4, r1
 801965a:	461f      	mov	r7, r3
 801965c:	2b00      	cmp	r3, #0
 801965e:	d052      	beq.n	8019706 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019660:	6808      	ldr	r0, [r1, #0]
 8019662:	ab0a      	add	r3, sp, #40	@ 0x28
 8019664:	6849      	ldr	r1, [r1, #4]
 8019666:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 8019830 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801966a:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 8019834 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801966e:	c303      	stmia	r3!, {r0, r1}
 8019670:	6810      	ldr	r0, [r2, #0]
 8019672:	ab0c      	add	r3, sp, #48	@ 0x30
 8019674:	6851      	ldr	r1, [r2, #4]
 8019676:	c303      	stmia	r3!, {r0, r1}
 8019678:	a80a      	add	r0, sp, #40	@ 0x28
 801967a:	f7f8 fda9 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801967e:	4621      	mov	r1, r4
 8019680:	a80c      	add	r0, sp, #48	@ 0x30
 8019682:	f7f8 fdcd 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019686:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801968a:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801968e:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 8019692:	f8d8 0000 	ldr.w	r0, [r8]
 8019696:	fb11 2103 	smlabb	r1, r1, r3, r2
 801969a:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801969e:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80196a2:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 80196a6:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 80196aa:	440a      	add	r2, r1
 80196ac:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 80196b0:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80196b4:	4413      	add	r3, r2
 80196b6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80196ba:	6803      	ldr	r3, [r0, #0]
 80196bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80196be:	4798      	blx	r3
 80196c0:	2fff      	cmp	r7, #255	@ 0xff
 80196c2:	d023      	beq.n	801970c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 80196c4:	f010 0f04 	tst.w	r0, #4
 80196c8:	f8d8 0000 	ldr.w	r0, [r8]
 80196cc:	d021      	beq.n	8019712 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 80196ce:	2100      	movs	r1, #0
 80196d0:	f04f 0e01 	mov.w	lr, #1
 80196d4:	f8d0 c000 	ldr.w	ip, [r0]
 80196d8:	b2a4      	uxth	r4, r4
 80196da:	9106      	str	r1, [sp, #24]
 80196dc:	b2b6      	uxth	r6, r6
 80196de:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 80196e2:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 80196e6:	e9cd e107 	strd	lr, r1, [sp, #28]
 80196ea:	f8b9 e000 	ldrh.w	lr, [r9]
 80196ee:	9703      	str	r7, [sp, #12]
 80196f0:	9401      	str	r4, [sp, #4]
 80196f2:	9600      	str	r6, [sp, #0]
 80196f4:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 80196f8:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80196fc:	9102      	str	r1, [sp, #8]
 80196fe:	4629      	mov	r1, r5
 8019700:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 8019704:	47a0      	blx	r4
 8019706:	b00f      	add	sp, #60	@ 0x3c
 8019708:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801970c:	f010 0f01 	tst.w	r0, #1
 8019710:	e7da      	b.n	80196c8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 8019712:	6803      	ldr	r3, [r0, #0]
 8019714:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019716:	4798      	blx	r3
 8019718:	f8b9 1000 	ldrh.w	r1, [r9]
 801971c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 8019720:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 8019724:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019728:	434c      	muls	r4, r1
 801972a:	2fff      	cmp	r7, #255	@ 0xff
 801972c:	fb01 2303 	mla	r3, r1, r3, r2
 8019730:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8019734:	eba1 0106 	sub.w	r1, r1, r6
 8019738:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801973c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019740:	4418      	add	r0, r3
 8019742:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019746:	eba3 0606 	sub.w	r6, r3, r6
 801974a:	4404      	add	r4, r0
 801974c:	ea4f 0646 	mov.w	r6, r6, lsl #1
 8019750:	d04a      	beq.n	80197e8 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 8019752:	43fa      	mvns	r2, r7
 8019754:	b2bb      	uxth	r3, r7
 8019756:	b2d7      	uxtb	r7, r2
 8019758:	42a0      	cmp	r0, r4
 801975a:	d263      	bcs.n	8019824 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801975c:	eb00 0e0c 	add.w	lr, r0, ip
 8019760:	4586      	cmp	lr, r0
 8019762:	f100 0803 	add.w	r8, r0, #3
 8019766:	d93a      	bls.n	80197de <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 8019768:	f835 2b02 	ldrh.w	r2, [r5], #2
 801976c:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 8019770:	00d0      	lsls	r0, r2, #3
 8019772:	fb19 f907 	smulbb	r9, r9, r7
 8019776:	b2c0      	uxtb	r0, r0
 8019778:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801977c:	fb00 9003 	mla	r0, r0, r3, r9
 8019780:	b280      	uxth	r0, r0
 8019782:	f100 0901 	add.w	r9, r0, #1
 8019786:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801978a:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801978e:	fb19 f907 	smulbb	r9, r9, r7
 8019792:	1200      	asrs	r0, r0, #8
 8019794:	f808 0c03 	strb.w	r0, [r8, #-3]
 8019798:	10d0      	asrs	r0, r2, #3
 801979a:	1212      	asrs	r2, r2, #8
 801979c:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 80197a0:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 80197a4:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 80197a8:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 80197ac:	fb00 9003 	mla	r0, r0, r3, r9
 80197b0:	b280      	uxth	r0, r0
 80197b2:	f100 0901 	add.w	r9, r0, #1
 80197b6:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 80197ba:	1200      	asrs	r0, r0, #8
 80197bc:	f808 0c02 	strb.w	r0, [r8, #-2]
 80197c0:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 80197c4:	fb10 f007 	smulbb	r0, r0, r7
 80197c8:	fb02 0203 	mla	r2, r2, r3, r0
 80197cc:	b292      	uxth	r2, r2
 80197ce:	1c50      	adds	r0, r2, #1
 80197d0:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 80197d4:	4640      	mov	r0, r8
 80197d6:	1212      	asrs	r2, r2, #8
 80197d8:	f808 2c01 	strb.w	r2, [r8, #-1]
 80197dc:	e7c0      	b.n	8019760 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 80197de:	4408      	add	r0, r1
 80197e0:	4435      	add	r5, r6
 80197e2:	e7b9      	b.n	8019758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 80197e4:	4408      	add	r0, r1
 80197e6:	4435      	add	r5, r6
 80197e8:	42a0      	cmp	r0, r4
 80197ea:	d21b      	bcs.n	8019824 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 80197ec:	eb00 070c 	add.w	r7, r0, ip
 80197f0:	42b8      	cmp	r0, r7
 80197f2:	d2f7      	bcs.n	80197e4 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 80197f4:	f835 3b02 	ldrh.w	r3, [r5], #2
 80197f8:	3003      	adds	r0, #3
 80197fa:	00da      	lsls	r2, r3, #3
 80197fc:	b2d2      	uxtb	r2, r2
 80197fe:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 8019802:	f800 2c03 	strb.w	r2, [r0, #-3]
 8019806:	10da      	asrs	r2, r3, #3
 8019808:	121b      	asrs	r3, r3, #8
 801980a:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801980e:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 8019812:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 8019816:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801981a:	f800 2c02 	strb.w	r2, [r0, #-2]
 801981e:	f800 3c01 	strb.w	r3, [r0, #-1]
 8019822:	e7e5      	b.n	80197f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 8019824:	4b02      	ldr	r3, [pc, #8]	@ (8019830 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 8019826:	6818      	ldr	r0, [r3, #0]
 8019828:	6803      	ldr	r3, [r0, #0]
 801982a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801982c:	4798      	blx	r3
 801982e:	e76a      	b.n	8019706 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 8019830:	240248fc 	.word	0x240248fc
 8019834:	240248f6 	.word	0x240248f6

08019838 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 8019838:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801983c:	b08a      	sub	sp, #40	@ 0x28
 801983e:	460d      	mov	r5, r1
 8019840:	4604      	mov	r4, r0
 8019842:	461e      	mov	r6, r3
 8019844:	6808      	ldr	r0, [r1, #0]
 8019846:	ab06      	add	r3, sp, #24
 8019848:	6849      	ldr	r1, [r1, #4]
 801984a:	4f5d      	ldr	r7, [pc, #372]	@ (80199c0 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801984c:	c303      	stmia	r3!, {r0, r1}
 801984e:	6810      	ldr	r0, [r2, #0]
 8019850:	ab08      	add	r3, sp, #32
 8019852:	6851      	ldr	r1, [r2, #4]
 8019854:	c303      	stmia	r3!, {r0, r1}
 8019856:	a806      	add	r0, sp, #24
 8019858:	f7f8 fcba 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801985c:	4629      	mov	r1, r5
 801985e:	a808      	add	r0, sp, #32
 8019860:	f7f8 fcde 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8019864:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 8019868:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801986c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8019870:	6838      	ldr	r0, [r7, #0]
 8019872:	fb11 2103 	smlabb	r1, r1, r3, r2
 8019876:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801987a:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801987e:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 8019882:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 8019886:	440a      	add	r2, r1
 8019888:	f8ad 2020 	strh.w	r2, [sp, #32]
 801988c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8019890:	4413      	add	r3, r2
 8019892:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8019896:	6803      	ldr	r3, [r0, #0]
 8019898:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801989a:	4798      	blx	r3
 801989c:	2eff      	cmp	r6, #255	@ 0xff
 801989e:	d119      	bne.n	80198d4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 80198a0:	f010 0f20 	tst.w	r0, #32
 80198a4:	6838      	ldr	r0, [r7, #0]
 80198a6:	d018      	beq.n	80198da <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 80198a8:	b2ad      	uxth	r5, r5
 80198aa:	2700      	movs	r7, #0
 80198ac:	6801      	ldr	r1, [r0, #0]
 80198ae:	9501      	str	r5, [sp, #4]
 80198b0:	fa1f f588 	uxth.w	r5, r8
 80198b4:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 80198b8:	9500      	str	r5, [sp, #0]
 80198ba:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 80198be:	e9cd 6703 	strd	r6, r7, [sp, #12]
 80198c2:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 80198c6:	9602      	str	r6, [sp, #8]
 80198c8:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 80198ca:	4621      	mov	r1, r4
 80198cc:	47a8      	blx	r5
 80198ce:	b00a      	add	sp, #40	@ 0x28
 80198d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80198d4:	f010 0f40 	tst.w	r0, #64	@ 0x40
 80198d8:	e7e4      	b.n	80198a4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 80198da:	6803      	ldr	r3, [r0, #0]
 80198dc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80198de:	4798      	blx	r3
 80198e0:	4b38      	ldr	r3, [pc, #224]	@ (80199c4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 80198e2:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 80198e6:	f8b3 c000 	ldrh.w	ip, [r3]
 80198ea:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 80198ee:	fb0c f505 	mul.w	r5, ip, r5
 80198f2:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 80198f6:	fb0c 2303 	mla	r3, ip, r3, r2
 80198fa:	ebac 0c08 	sub.w	ip, ip, r8
 80198fe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019902:	ebae 0e08 	sub.w	lr, lr, r8
 8019906:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801990a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801990e:	4418      	add	r0, r3
 8019910:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 8019914:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019918:	4405      	add	r5, r0
 801991a:	42a8      	cmp	r0, r5
 801991c:	d24a      	bcs.n	80199b4 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801991e:	eb00 0803 	add.w	r8, r0, r3
 8019922:	4540      	cmp	r0, r8
 8019924:	d243      	bcs.n	80199ae <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 8019926:	78e2      	ldrb	r2, [r4, #3]
 8019928:	b15a      	cbz	r2, 8019942 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801992a:	2aff      	cmp	r2, #255	@ 0xff
 801992c:	f894 9000 	ldrb.w	r9, [r4]
 8019930:	d10a      	bne.n	8019948 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019932:	2eff      	cmp	r6, #255	@ 0xff
 8019934:	d108      	bne.n	8019948 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 8019936:	f880 9000 	strb.w	r9, [r0]
 801993a:	7862      	ldrb	r2, [r4, #1]
 801993c:	7042      	strb	r2, [r0, #1]
 801993e:	78a2      	ldrb	r2, [r4, #2]
 8019940:	7082      	strb	r2, [r0, #2]
 8019942:	3003      	adds	r0, #3
 8019944:	3404      	adds	r4, #4
 8019946:	e7ec      	b.n	8019922 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 8019948:	4372      	muls	r2, r6
 801994a:	1c51      	adds	r1, r2, #1
 801994c:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 8019950:	1209      	asrs	r1, r1, #8
 8019952:	fa1f fa81 	uxth.w	sl, r1
 8019956:	43c9      	mvns	r1, r1
 8019958:	fb19 f90a 	smulbb	r9, r9, sl
 801995c:	b2ca      	uxtb	r2, r1
 801995e:	7801      	ldrb	r1, [r0, #0]
 8019960:	fb01 9902 	mla	r9, r1, r2, r9
 8019964:	fa1f f989 	uxth.w	r9, r9
 8019968:	f109 0101 	add.w	r1, r9, #1
 801996c:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 8019970:	ea4f 2929 	mov.w	r9, r9, asr #8
 8019974:	f880 9000 	strb.w	r9, [r0]
 8019978:	f890 9001 	ldrb.w	r9, [r0, #1]
 801997c:	7861      	ldrb	r1, [r4, #1]
 801997e:	fb19 f902 	smulbb	r9, r9, r2
 8019982:	fb01 910a 	mla	r1, r1, sl, r9
 8019986:	b289      	uxth	r1, r1
 8019988:	f101 0901 	add.w	r9, r1, #1
 801998c:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 8019990:	1209      	asrs	r1, r1, #8
 8019992:	7041      	strb	r1, [r0, #1]
 8019994:	7881      	ldrb	r1, [r0, #2]
 8019996:	f894 9002 	ldrb.w	r9, [r4, #2]
 801999a:	fb11 f202 	smulbb	r2, r1, r2
 801999e:	fb09 220a 	mla	r2, r9, sl, r2
 80199a2:	b292      	uxth	r2, r2
 80199a4:	1c51      	adds	r1, r2, #1
 80199a6:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 80199aa:	1212      	asrs	r2, r2, #8
 80199ac:	e7c8      	b.n	8019940 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 80199ae:	4460      	add	r0, ip
 80199b0:	4474      	add	r4, lr
 80199b2:	e7b2      	b.n	801991a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 80199b4:	6838      	ldr	r0, [r7, #0]
 80199b6:	6803      	ldr	r3, [r0, #0]
 80199b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80199ba:	4798      	blx	r3
 80199bc:	e787      	b.n	80198ce <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 80199be:	bf00      	nop
 80199c0:	240248fc 	.word	0x240248fc
 80199c4:	240248f6 	.word	0x240248f6

080199c8 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 80199c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80199cc:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 80199d0:	4607      	mov	r7, r0
 80199d2:	460c      	mov	r4, r1
 80199d4:	4692      	mov	sl, r2
 80199d6:	4699      	mov	r9, r3
 80199d8:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80199da:	b335      	cbz	r5, 8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 80199dc:	4608      	mov	r0, r1
 80199de:	f7fb fe1d 	bl	801561c <_ZNK8touchgfx6Bitmap8getWidthEv>
 80199e2:	4680      	mov	r8, r0
 80199e4:	4620      	mov	r0, r4
 80199e6:	f7fb fe4d 	bl	8015684 <_ZNK8touchgfx6Bitmap9getHeightEv>
 80199ea:	f8ad 000e 	strh.w	r0, [sp, #14]
 80199ee:	4620      	mov	r0, r4
 80199f0:	f8ad a008 	strh.w	sl, [sp, #8]
 80199f4:	f8ad 900a 	strh.w	r9, [sp, #10]
 80199f8:	f8ad 800c 	strh.w	r8, [sp, #12]
 80199fc:	f7fb fefa 	bl	80157f4 <_ZNK8touchgfx6Bitmap9getFormatEv>
 8019a00:	2810      	cmp	r0, #16
 8019a02:	d812      	bhi.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a04:	e8df f000 	tbb	[pc, r0]
 8019a08:	11092d24 	.word	0x11092d24
 8019a0c:	11111111 	.word	0x11111111
 8019a10:	14111111 	.word	0x14111111
 8019a14:	4c111111 	.word	0x4c111111
 8019a18:	3c          	.byte	0x3c
 8019a19:	00          	.byte	0x00
 8019a1a:	4620      	mov	r0, r4
 8019a1c:	f7fb fe66 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a20:	462b      	mov	r3, r5
 8019a22:	4632      	mov	r2, r6
 8019a24:	a902      	add	r1, sp, #8
 8019a26:	f7ff ff07 	bl	8019838 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019a2a:	b004      	add	sp, #16
 8019a2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019a30:	4620      	mov	r0, r4
 8019a32:	f7fb fe5b 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a36:	4680      	mov	r8, r0
 8019a38:	4620      	mov	r0, r4
 8019a3a:	f7fb fe87 	bl	801574c <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 8019a3e:	ab02      	add	r3, sp, #8
 8019a40:	4602      	mov	r2, r0
 8019a42:	4641      	mov	r1, r8
 8019a44:	4638      	mov	r0, r7
 8019a46:	e9cd 6500 	strd	r6, r5, [sp]
 8019a4a:	f7ff fdbf 	bl	80195cc <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 8019a4e:	e7ec      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a50:	4620      	mov	r0, r4
 8019a52:	f7fb fe4b 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a56:	462b      	mov	r3, r5
 8019a58:	4632      	mov	r2, r6
 8019a5a:	a902      	add	r1, sp, #8
 8019a5c:	f7ff fdf8 	bl	8019650 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019a60:	e7e3      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a62:	683b      	ldr	r3, [r7, #0]
 8019a64:	4620      	mov	r0, r4
 8019a66:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019a6a:	f7fb fe3f 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a6e:	2300      	movs	r3, #0
 8019a70:	4601      	mov	r1, r0
 8019a72:	aa02      	add	r2, sp, #8
 8019a74:	4638      	mov	r0, r7
 8019a76:	e9cd 5300 	strd	r5, r3, [sp]
 8019a7a:	4633      	mov	r3, r6
 8019a7c:	47c0      	blx	r8
 8019a7e:	e7d4      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a80:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8019a82:	2f00      	cmp	r7, #0
 8019a84:	d0d1      	beq.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019a86:	683b      	ldr	r3, [r7, #0]
 8019a88:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8019a8c:	4620      	mov	r0, r4
 8019a8e:	f7fb fe2d 	bl	80156ec <_ZNK8touchgfx6Bitmap7getDataEv>
 8019a92:	9500      	str	r5, [sp, #0]
 8019a94:	4601      	mov	r1, r0
 8019a96:	4633      	mov	r3, r6
 8019a98:	aa02      	add	r2, sp, #8
 8019a9a:	4638      	mov	r0, r7
 8019a9c:	47c0      	blx	r8
 8019a9e:	e7c4      	b.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019aa0:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 8019aa2:	2f00      	cmp	r7, #0
 8019aa4:	d0c1      	beq.n	8019a2a <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 8019aa6:	683b      	ldr	r3, [r7, #0]
 8019aa8:	f8d3 800c 	ldr.w	r8, [r3, #12]
 8019aac:	e7ee      	b.n	8019a8c <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

08019aae <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 8019aae:	b4f0      	push	{r4, r5, r6, r7}
 8019ab0:	4616      	mov	r6, r2
 8019ab2:	461c      	mov	r4, r3
 8019ab4:	460d      	mov	r5, r1
 8019ab6:	9a04      	ldr	r2, [sp, #16]
 8019ab8:	2e01      	cmp	r6, #1
 8019aba:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8019abe:	d00e      	beq.n	8019ade <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 8019ac0:	d303      	bcc.n	8019aca <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 8019ac2:	2e02      	cmp	r6, #2
 8019ac4:	d006      	beq.n	8019ad4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 8019ac6:	bcf0      	pop	{r4, r5, r6, r7}
 8019ac8:	4770      	bx	lr
 8019aca:	4621      	mov	r1, r4
 8019acc:	4628      	mov	r0, r5
 8019ace:	bcf0      	pop	{r4, r5, r6, r7}
 8019ad0:	f7ff bdbe 	b.w	8019650 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 8019ad4:	4621      	mov	r1, r4
 8019ad6:	4628      	mov	r0, r5
 8019ad8:	bcf0      	pop	{r4, r5, r6, r7}
 8019ada:	f7ff bead 	b.w	8019838 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 8019ade:	6805      	ldr	r5, [r0, #0]
 8019ae0:	2600      	movs	r6, #0
 8019ae2:	e9cd 3604 	strd	r3, r6, [sp, #16]
 8019ae6:	68ed      	ldr	r5, [r5, #12]
 8019ae8:	4613      	mov	r3, r2
 8019aea:	4622      	mov	r2, r4
 8019aec:	46ac      	mov	ip, r5
 8019aee:	bcf0      	pop	{r4, r5, r6, r7}
 8019af0:	4760      	bx	ip
	...

08019af4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 8019af4:	b160      	cbz	r0, 8019b10 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 8019af6:	2903      	cmp	r1, #3
 8019af8:	d818      	bhi.n	8019b2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019afa:	e8df f001 	tbb	[pc, r1]
 8019afe:	1902      	.short	0x1902
 8019b00:	1b06      	.short	0x1b06
 8019b02:	4b0e      	ldr	r3, [pc, #56]	@ (8019b3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019b04:	8818      	ldrh	r0, [r3, #0]
 8019b06:	4240      	negs	r0, r0
 8019b08:	4770      	bx	lr
 8019b0a:	4b0c      	ldr	r3, [pc, #48]	@ (8019b3c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 8019b0c:	8818      	ldrh	r0, [r3, #0]
 8019b0e:	4770      	bx	lr
 8019b10:	2903      	cmp	r1, #3
 8019b12:	d80b      	bhi.n	8019b2c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 8019b14:	a301      	add	r3, pc, #4	@ (adr r3, 8019b1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 8019b16:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019b1a:	bf00      	nop
 8019b1c:	08019b31 	.word	0x08019b31
 8019b20:	08019b0b 	.word	0x08019b0b
 8019b24:	08019b35 	.word	0x08019b35
 8019b28:	08019b03 	.word	0x08019b03
 8019b2c:	2000      	movs	r0, #0
 8019b2e:	4770      	bx	lr
 8019b30:	2001      	movs	r0, #1
 8019b32:	4770      	bx	lr
 8019b34:	f04f 30ff 	mov.w	r0, #4294967295
 8019b38:	4770      	bx	lr
 8019b3a:	bf00      	nop
 8019b3c:	240248f6 	.word	0x240248f6

08019b40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 8019b40:	b160      	cbz	r0, 8019b5c <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 8019b42:	2903      	cmp	r1, #3
 8019b44:	d818      	bhi.n	8019b78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019b46:	e8df f001 	tbb	[pc, r1]
 8019b4a:	0219      	.short	0x0219
 8019b4c:	051b      	.short	0x051b
 8019b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8019b88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019b50:	8818      	ldrh	r0, [r3, #0]
 8019b52:	4770      	bx	lr
 8019b54:	4b0c      	ldr	r3, [pc, #48]	@ (8019b88 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 8019b56:	8818      	ldrh	r0, [r3, #0]
 8019b58:	4240      	negs	r0, r0
 8019b5a:	4770      	bx	lr
 8019b5c:	2903      	cmp	r1, #3
 8019b5e:	d80b      	bhi.n	8019b78 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 8019b60:	a301      	add	r3, pc, #4	@ (adr r3, 8019b68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 8019b62:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 8019b66:	bf00      	nop
 8019b68:	08019b4f 	.word	0x08019b4f
 8019b6c:	08019b81 	.word	0x08019b81
 8019b70:	08019b55 	.word	0x08019b55
 8019b74:	08019b7d 	.word	0x08019b7d
 8019b78:	2000      	movs	r0, #0
 8019b7a:	4770      	bx	lr
 8019b7c:	2001      	movs	r0, #1
 8019b7e:	4770      	bx	lr
 8019b80:	f04f 30ff 	mov.w	r0, #4294967295
 8019b84:	4770      	bx	lr
 8019b86:	bf00      	nop
 8019b88:	240248f6 	.word	0x240248f6

08019b8c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 8019b8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019b90:	b097      	sub	sp, #92	@ 0x5c
 8019b92:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019b94:	a912      	add	r1, sp, #72	@ 0x48
 8019b96:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 8019b9a:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 8019b9e:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 8019ba2:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 8019ba6:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 8019baa:	e881 000c 	stmia.w	r1, {r2, r3}
 8019bae:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 8019bb2:	930a      	str	r3, [sp, #40]	@ 0x28
 8019bb4:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 8019bb8:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 8019bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8019bbe:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 8019bc2:	798d      	ldrb	r5, [r1, #6]
 8019bc4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019bc6:	7b4b      	ldrb	r3, [r1, #13]
 8019bc8:	0158      	lsls	r0, r3, #5
 8019bca:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8019bce:	4328      	orrs	r0, r5
 8019bd0:	9009      	str	r0, [sp, #36]	@ 0x24
 8019bd2:	f000 817c 	beq.w	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019bd6:	011b      	lsls	r3, r3, #4
 8019bd8:	79c8      	ldrb	r0, [r1, #7]
 8019bda:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8019bde:	4303      	orrs	r3, r0
 8019be0:	930e      	str	r3, [sp, #56]	@ 0x38
 8019be2:	f000 8174 	beq.w	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019be6:	f991 3009 	ldrsb.w	r3, [r1, #9]
 8019bea:	b29b      	uxth	r3, r3
 8019bec:	2f00      	cmp	r7, #0
 8019bee:	f000 8116 	beq.w	8019e1e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 8019bf2:	1aff      	subs	r7, r7, r3
 8019bf4:	b2bf      	uxth	r7, r7
 8019bf6:	043b      	lsls	r3, r7, #16
 8019bf8:	d502      	bpl.n	8019c00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019bfa:	1bf6      	subs	r6, r6, r7
 8019bfc:	2700      	movs	r7, #0
 8019bfe:	b236      	sxth	r6, r6
 8019c00:	f9b2 1000 	ldrsh.w	r1, [r2]
 8019c04:	a812      	add	r0, sp, #72	@ 0x48
 8019c06:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 8019c0a:	428e      	cmp	r6, r1
 8019c0c:	b28b      	uxth	r3, r1
 8019c0e:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 8019c12:	bfbf      	itttt	lt
 8019c14:	18ff      	addlt	r7, r7, r3
 8019c16:	1bbe      	sublt	r6, r7, r6
 8019c18:	b2b7      	uxthlt	r7, r6
 8019c1a:	460e      	movlt	r6, r1
 8019c1c:	8891      	ldrh	r1, [r2, #4]
 8019c1e:	440b      	add	r3, r1
 8019c20:	4631      	mov	r1, r6
 8019c22:	b21b      	sxth	r3, r3
 8019c24:	9310      	str	r3, [sp, #64]	@ 0x40
 8019c26:	88d3      	ldrh	r3, [r2, #6]
 8019c28:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c2a:	449a      	add	sl, r3
 8019c2c:	fa0f f38a 	sxth.w	r3, sl
 8019c30:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 8019c34:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019c36:	4bb5      	ldr	r3, [pc, #724]	@ (8019f0c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 8019c38:	f893 b000 	ldrb.w	fp, [r3]
 8019c3c:	f10b 3cff 	add.w	ip, fp, #4294967295
 8019c40:	f1dc 0300 	rsbs	r3, ip, #0
 8019c44:	eb43 030c 	adc.w	r3, r3, ip
 8019c48:	930d      	str	r3, [sp, #52]	@ 0x34
 8019c4a:	464b      	mov	r3, r9
 8019c4c:	f7f8 f934 	bl	8011eb8 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 8019c50:	4631      	mov	r1, r6
 8019c52:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 8019c56:	464b      	mov	r3, r9
 8019c58:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019c5a:	a812      	add	r0, sp, #72	@ 0x48
 8019c5c:	f7f8 f949 	bl	8011ef2 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 8019c60:	a916      	add	r1, sp, #88	@ 0x58
 8019c62:	f821 0d02 	strh.w	r0, [r1, #-2]!
 8019c66:	a815      	add	r0, sp, #84	@ 0x54
 8019c68:	f7f8 fa70 	bl	801214c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 8019c6c:	f1b9 0f00 	cmp.w	r9, #0
 8019c70:	f040 80d8 	bne.w	8019e24 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 8019c74:	f1bb 0f01 	cmp.w	fp, #1
 8019c78:	f040 80dc 	bne.w	8019e34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 8019c7c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019c7e:	b153      	cbz	r3, 8019c96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 8019c80:	2508      	movs	r5, #8
 8019c82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019c84:	fb95 f3f8 	sdiv	r3, r5, r8
 8019c88:	1e5d      	subs	r5, r3, #1
 8019c8a:	4415      	add	r5, r2
 8019c8c:	fb95 f5f3 	sdiv	r5, r5, r3
 8019c90:	fb15 f503 	smulbb	r5, r5, r3
 8019c94:	b2ad      	uxth	r5, r5
 8019c96:	b907      	cbnz	r7, 8019c9a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 8019c98:	b16c      	cbz	r4, 8019cb6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 8019c9a:	fb04 7305 	mla	r3, r4, r5, r7
 8019c9e:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8019ca0:	ebaa 0a04 	sub.w	sl, sl, r4
 8019ca4:	fb08 f303 	mul.w	r3, r8, r3
 8019ca8:	fa1f fa8a 	uxth.w	sl, sl
 8019cac:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 8019cb0:	f003 0407 	and.w	r4, r3, #7
 8019cb4:	9226      	str	r2, [sp, #152]	@ 0x98
 8019cb6:	4649      	mov	r1, r9
 8019cb8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019cba:	f7ff ff1b 	bl	8019af4 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 8019cbe:	4683      	mov	fp, r0
 8019cc0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8019cc2:	f7ff ff3d 	bl	8019b40 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 8019cc6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019cc8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019cca:	4681      	mov	r9, r0
 8019ccc:	1a9b      	subs	r3, r3, r2
 8019cce:	459a      	cmp	sl, r3
 8019cd0:	bfa8      	it	ge
 8019cd2:	469a      	movge	sl, r3
 8019cd4:	f1ba 0f00 	cmp.w	sl, #0
 8019cd8:	f340 80f9 	ble.w	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019cdc:	1bf6      	subs	r6, r6, r7
 8019cde:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019ce0:	1b9e      	subs	r6, r3, r6
 8019ce2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019ce4:	429e      	cmp	r6, r3
 8019ce6:	bfd4      	ite	le
 8019ce8:	ebc7 0706 	rsble	r7, r7, r6
 8019cec:	ebc7 0703 	rsbgt	r7, r7, r3
 8019cf0:	2f00      	cmp	r7, #0
 8019cf2:	f340 80ec 	ble.w	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019cf6:	1bed      	subs	r5, r5, r7
 8019cf8:	fb08 f305 	mul.w	r3, r8, r5
 8019cfc:	930d      	str	r3, [sp, #52]	@ 0x34
 8019cfe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019d00:	f3c3 4307 	ubfx	r3, r3, #16, #8
 8019d04:	930e      	str	r3, [sp, #56]	@ 0x38
 8019d06:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019d08:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019d0c:	930f      	str	r3, [sp, #60]	@ 0x3c
 8019d0e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019d10:	b2db      	uxtb	r3, r3
 8019d12:	9310      	str	r3, [sp, #64]	@ 0x40
 8019d14:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019d16:	2b00      	cmp	r3, #0
 8019d18:	f040 80de 	bne.w	8019ed8 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 8019d1c:	4b7c      	ldr	r3, [pc, #496]	@ (8019f10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 8019d1e:	6818      	ldr	r0, [r3, #0]
 8019d20:	6803      	ldr	r3, [r0, #0]
 8019d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d24:	4798      	blx	r3
 8019d26:	2301      	movs	r3, #1
 8019d28:	4a7a      	ldr	r2, [pc, #488]	@ (8019f14 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 8019d2a:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 8019d2e:	fb07 9b1b 	mls	fp, r7, fp, r9
 8019d32:	fa03 f308 	lsl.w	r3, r3, r8
 8019d36:	8811      	ldrh	r1, [r2, #0]
 8019d38:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 8019d3c:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 8019d40:	3b01      	subs	r3, #1
 8019d42:	fb06 bb07 	mla	fp, r6, r7, fp
 8019d46:	b2db      	uxtb	r3, r3
 8019d48:	930a      	str	r3, [sp, #40]	@ 0x28
 8019d4a:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 8019d4e:	fb01 2303 	mla	r3, r1, r3, r2
 8019d52:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019d56:	18c3      	adds	r3, r0, r3
 8019d58:	9309      	str	r3, [sp, #36]	@ 0x24
 8019d5a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019d5c:	781a      	ldrb	r2, [r3, #0]
 8019d5e:	4122      	asrs	r2, r4
 8019d60:	b2d2      	uxtb	r2, r2
 8019d62:	f11a 3aff 	adds.w	sl, sl, #4294967295
 8019d66:	f0c0 80d7 	bcc.w	8019f18 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 8019d6a:	46be      	mov	lr, r7
 8019d6c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8019d6e:	f11e 3eff 	adds.w	lr, lr, #4294967295
 8019d72:	f0c0 80ba 	bcc.w	8019eea <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 8019d76:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d78:	4013      	ands	r3, r2
 8019d7a:	d041      	beq.n	8019e00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019d7c:	20ff      	movs	r0, #255	@ 0xff
 8019d7e:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8019d80:	fb90 f5f5 	sdiv	r5, r0, r5
 8019d84:	436b      	muls	r3, r5
 8019d86:	2bfe      	cmp	r3, #254	@ 0xfe
 8019d88:	dd03      	ble.n	8019d92 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 8019d8a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019d8c:	4285      	cmp	r5, r0
 8019d8e:	f000 80a5 	beq.w	8019edc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 8019d92:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019d94:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019d96:	fb15 f303 	smulbb	r3, r5, r3
 8019d9a:	b29b      	uxth	r3, r3
 8019d9c:	1c5d      	adds	r5, r3, #1
 8019d9e:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 8019da2:	780d      	ldrb	r5, [r1, #0]
 8019da4:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8019da8:	fa1f fc83 	uxth.w	ip, r3
 8019dac:	43db      	mvns	r3, r3
 8019dae:	fb10 f90c 	smulbb	r9, r0, ip
 8019db2:	b2db      	uxtb	r3, r3
 8019db4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019db6:	fb05 9503 	mla	r5, r5, r3, r9
 8019dba:	b2ad      	uxth	r5, r5
 8019dbc:	f105 0901 	add.w	r9, r5, #1
 8019dc0:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019dc4:	fb10 f90c 	smulbb	r9, r0, ip
 8019dc8:	980e      	ldr	r0, [sp, #56]	@ 0x38
 8019dca:	122d      	asrs	r5, r5, #8
 8019dcc:	fb10 fc0c 	smulbb	ip, r0, ip
 8019dd0:	700d      	strb	r5, [r1, #0]
 8019dd2:	784d      	ldrb	r5, [r1, #1]
 8019dd4:	fb05 9503 	mla	r5, r5, r3, r9
 8019dd8:	b2ad      	uxth	r5, r5
 8019dda:	f105 0901 	add.w	r9, r5, #1
 8019dde:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 8019de2:	122d      	asrs	r5, r5, #8
 8019de4:	704d      	strb	r5, [r1, #1]
 8019de6:	788d      	ldrb	r5, [r1, #2]
 8019de8:	fb05 cc03 	mla	ip, r5, r3, ip
 8019dec:	fa1f fc8c 	uxth.w	ip, ip
 8019df0:	f10c 0301 	add.w	r3, ip, #1
 8019df4:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 8019df8:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 8019dfc:	f881 c002 	strb.w	ip, [r1, #2]
 8019e00:	4444      	add	r4, r8
 8019e02:	4431      	add	r1, r6
 8019e04:	b2a4      	uxth	r4, r4
 8019e06:	2c07      	cmp	r4, #7
 8019e08:	bf89      	itett	hi
 8019e0a:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 8019e0c:	fa42 f208 	asrls.w	r2, r2, r8
 8019e10:	2400      	movhi	r4, #0
 8019e12:	785a      	ldrbhi	r2, [r3, #1]
 8019e14:	bf8a      	itet	hi
 8019e16:	3301      	addhi	r3, #1
 8019e18:	b2d2      	uxtbls	r2, r2
 8019e1a:	9326      	strhi	r3, [sp, #152]	@ 0x98
 8019e1c:	e7a7      	b.n	8019d6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 8019e1e:	441e      	add	r6, r3
 8019e20:	b236      	sxth	r6, r6
 8019e22:	e6ed      	b.n	8019c00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 8019e24:	f1b9 0f01 	cmp.w	r9, #1
 8019e28:	f47f af28 	bne.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e2c:	f1bb 0f01 	cmp.w	fp, #1
 8019e30:	f47f af24 	bne.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e34:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 8019f10 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 8019e38:	f8db 0000 	ldr.w	r0, [fp]
 8019e3c:	6803      	ldr	r3, [r0, #0]
 8019e3e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019e40:	4798      	blx	r3
 8019e42:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 8019e46:	465a      	mov	r2, fp
 8019e48:	d006      	beq.n	8019e58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019e4a:	f1b8 0f04 	cmp.w	r8, #4
 8019e4e:	d141      	bne.n	8019ed4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 8019e50:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019e52:	3300      	adds	r3, #0
 8019e54:	bf18      	it	ne
 8019e56:	2301      	movne	r3, #1
 8019e58:	0580      	lsls	r0, r0, #22
 8019e5a:	d566      	bpl.n	8019f2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019e5c:	f1b8 0f08 	cmp.w	r8, #8
 8019e60:	d163      	bne.n	8019f2a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 8019e62:	2b00      	cmp	r3, #0
 8019e64:	bf0c      	ite	eq
 8019e66:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 8019e6a:	f44f 7180 	movne.w	r1, #256	@ 0x100
 8019e6e:	2f00      	cmp	r7, #0
 8019e70:	f47f af04 	bne.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e74:	2c00      	cmp	r4, #0
 8019e76:	f47f af01 	bne.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019e7c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 8019e7e:	18f3      	adds	r3, r6, r3
 8019e80:	4283      	cmp	r3, r0
 8019e82:	f73f aefb 	bgt.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e86:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8019e88:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019e8a:	4403      	add	r3, r0
 8019e8c:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 8019e8e:	4283      	cmp	r3, r0
 8019e90:	f73f aef4 	bgt.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019e94:	f1b8 0f08 	cmp.w	r8, #8
 8019e98:	6810      	ldr	r0, [r2, #0]
 8019e9a:	f04f 0600 	mov.w	r6, #0
 8019e9e:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 8019ea2:	bf18      	it	ne
 8019ea4:	3501      	addne	r5, #1
 8019ea6:	6804      	ldr	r4, [r0, #0]
 8019ea8:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 8019eac:	bf18      	it	ne
 8019eae:	f025 0501 	bicne.w	r5, r5, #1
 8019eb2:	e9cd 1605 	strd	r1, r6, [sp, #20]
 8019eb6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019eb8:	bf18      	it	ne
 8019eba:	b2ad      	uxthne	r5, r5
 8019ebc:	9104      	str	r1, [sp, #16]
 8019ebe:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 8019ec0:	e9cd 5a00 	strd	r5, sl, [sp]
 8019ec4:	e9cd 5102 	strd	r5, r1, [sp, #8]
 8019ec8:	9926      	ldr	r1, [sp, #152]	@ 0x98
 8019eca:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 8019ecc:	47a0      	blx	r4
 8019ece:	b017      	add	sp, #92	@ 0x5c
 8019ed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019ed4:	2300      	movs	r3, #0
 8019ed6:	e7bf      	b.n	8019e58 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 8019ed8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019eda:	e724      	b.n	8019d26 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 8019edc:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8019ede:	700b      	strb	r3, [r1, #0]
 8019ee0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8019ee2:	704b      	strb	r3, [r1, #1]
 8019ee4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019ee6:	708b      	strb	r3, [r1, #2]
 8019ee8:	e78a      	b.n	8019e00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 8019eea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019eec:	b153      	cbz	r3, 8019f04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 8019eee:	441c      	add	r4, r3
 8019ef0:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8019ef2:	b2a4      	uxth	r4, r4
 8019ef4:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 8019ef8:	f004 0407 	and.w	r4, r4, #7
 8019efc:	781a      	ldrb	r2, [r3, #0]
 8019efe:	9326      	str	r3, [sp, #152]	@ 0x98
 8019f00:	4122      	asrs	r2, r4
 8019f02:	b2d2      	uxtb	r2, r2
 8019f04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f06:	445b      	add	r3, fp
 8019f08:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f0a:	e72a      	b.n	8019d62 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 8019f0c:	240248f4 	.word	0x240248f4
 8019f10:	240248fc 	.word	0x240248fc
 8019f14:	240248f6 	.word	0x240248f6
 8019f18:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019f1a:	2b00      	cmp	r3, #0
 8019f1c:	d1d7      	bne.n	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019f1e:	4b06      	ldr	r3, [pc, #24]	@ (8019f38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 8019f20:	6818      	ldr	r0, [r3, #0]
 8019f22:	6803      	ldr	r3, [r0, #0]
 8019f24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019f26:	4798      	blx	r3
 8019f28:	e7d1      	b.n	8019ece <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 8019f2a:	2b00      	cmp	r3, #0
 8019f2c:	f43f aea6 	beq.w	8019c7c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 8019f30:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8019f34:	e79b      	b.n	8019e6e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 8019f36:	bf00      	nop
 8019f38:	240248fc 	.word	0x240248fc

08019f3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 8019f3c:	b538      	push	{r3, r4, r5, lr}
 8019f3e:	4c15      	ldr	r4, [pc, #84]	@ (8019f94 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 8019f40:	4605      	mov	r5, r0
 8019f42:	7823      	ldrb	r3, [r4, #0]
 8019f44:	f3bf 8f5b 	dmb	ish
 8019f48:	07da      	lsls	r2, r3, #31
 8019f4a:	d40b      	bmi.n	8019f64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019f4c:	4620      	mov	r0, r4
 8019f4e:	f006 f8d8 	bl	8020102 <__cxa_guard_acquire>
 8019f52:	b138      	cbz	r0, 8019f64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 8019f54:	4620      	mov	r0, r4
 8019f56:	f006 f8e0 	bl	802011a <__cxa_guard_release>
 8019f5a:	4a0f      	ldr	r2, [pc, #60]	@ (8019f98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019f5c:	490f      	ldr	r1, [pc, #60]	@ (8019f9c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 8019f5e:	4810      	ldr	r0, [pc, #64]	@ (8019fa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019f60:	f006 f8c8 	bl	80200f4 <__aeabi_atexit>
 8019f64:	4c0f      	ldr	r4, [pc, #60]	@ (8019fa4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 8019f66:	7823      	ldrb	r3, [r4, #0]
 8019f68:	f3bf 8f5b 	dmb	ish
 8019f6c:	07db      	lsls	r3, r3, #31
 8019f6e:	d40b      	bmi.n	8019f88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019f70:	4620      	mov	r0, r4
 8019f72:	f006 f8c6 	bl	8020102 <__cxa_guard_acquire>
 8019f76:	b138      	cbz	r0, 8019f88 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 8019f78:	4620      	mov	r0, r4
 8019f7a:	f006 f8ce 	bl	802011a <__cxa_guard_release>
 8019f7e:	4a06      	ldr	r2, [pc, #24]	@ (8019f98 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 8019f80:	4909      	ldr	r1, [pc, #36]	@ (8019fa8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 8019f82:	480a      	ldr	r0, [pc, #40]	@ (8019fac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019f84:	f006 f8b6 	bl	80200f4 <__aeabi_atexit>
 8019f88:	4b05      	ldr	r3, [pc, #20]	@ (8019fa0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 8019f8a:	616b      	str	r3, [r5, #20]
 8019f8c:	4b07      	ldr	r3, [pc, #28]	@ (8019fac <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 8019f8e:	61ab      	str	r3, [r5, #24]
 8019f90:	bd38      	pop	{r3, r4, r5, pc}
 8019f92:	bf00      	nop
 8019f94:	240249e0 	.word	0x240249e0
 8019f98:	24000000 	.word	0x24000000
 8019f9c:	0801722d 	.word	0x0801722d
 8019fa0:	240000c8 	.word	0x240000c8
 8019fa4:	240249e4 	.word	0x240249e4
 8019fa8:	0801722b 	.word	0x0801722b
 8019fac:	240000cc 	.word	0x240000cc

08019fb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 8019fb0:	b538      	push	{r3, r4, r5, lr}
 8019fb2:	4c15      	ldr	r4, [pc, #84]	@ (801a008 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 8019fb4:	4605      	mov	r5, r0
 8019fb6:	7823      	ldrb	r3, [r4, #0]
 8019fb8:	f3bf 8f5b 	dmb	ish
 8019fbc:	07da      	lsls	r2, r3, #31
 8019fbe:	d40b      	bmi.n	8019fd8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019fc0:	4620      	mov	r0, r4
 8019fc2:	f006 f89e 	bl	8020102 <__cxa_guard_acquire>
 8019fc6:	b138      	cbz	r0, 8019fd8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 8019fc8:	4620      	mov	r0, r4
 8019fca:	f006 f8a6 	bl	802011a <__cxa_guard_release>
 8019fce:	4a0f      	ldr	r2, [pc, #60]	@ (801a00c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019fd0:	490f      	ldr	r1, [pc, #60]	@ (801a010 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 8019fd2:	4810      	ldr	r0, [pc, #64]	@ (801a014 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019fd4:	f006 f88e 	bl	80200f4 <__aeabi_atexit>
 8019fd8:	4c0f      	ldr	r4, [pc, #60]	@ (801a018 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 8019fda:	7823      	ldrb	r3, [r4, #0]
 8019fdc:	f3bf 8f5b 	dmb	ish
 8019fe0:	07db      	lsls	r3, r3, #31
 8019fe2:	d40b      	bmi.n	8019ffc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019fe4:	4620      	mov	r0, r4
 8019fe6:	f006 f88c 	bl	8020102 <__cxa_guard_acquire>
 8019fea:	b138      	cbz	r0, 8019ffc <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 8019fec:	4620      	mov	r0, r4
 8019fee:	f006 f894 	bl	802011a <__cxa_guard_release>
 8019ff2:	4a06      	ldr	r2, [pc, #24]	@ (801a00c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 8019ff4:	4909      	ldr	r1, [pc, #36]	@ (801a01c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 8019ff6:	480a      	ldr	r0, [pc, #40]	@ (801a020 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 8019ff8:	f006 f87c 	bl	80200f4 <__aeabi_atexit>
 8019ffc:	4b05      	ldr	r3, [pc, #20]	@ (801a014 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 8019ffe:	60eb      	str	r3, [r5, #12]
 801a000:	4b07      	ldr	r3, [pc, #28]	@ (801a020 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801a002:	612b      	str	r3, [r5, #16]
 801a004:	bd38      	pop	{r3, r4, r5, pc}
 801a006:	bf00      	nop
 801a008:	240249c0 	.word	0x240249c0
 801a00c:	24000000 	.word	0x24000000
 801a010:	08017231 	.word	0x08017231
 801a014:	240000a8 	.word	0x240000a8
 801a018:	240249c4 	.word	0x240249c4
 801a01c:	0801722f 	.word	0x0801722f
 801a020:	240000ac 	.word	0x240000ac

0801a024 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801a024:	b510      	push	{r4, lr}
 801a026:	4604      	mov	r4, r0
 801a028:	f7ff ff88 	bl	8019f3c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801a02c:	4620      	mov	r0, r4
 801a02e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a032:	f7ff bfbd 	b.w	8019fb0 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801a038 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801a038:	b538      	push	{r3, r4, r5, lr}
 801a03a:	4c15      	ldr	r4, [pc, #84]	@ (801a090 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801a03c:	4605      	mov	r5, r0
 801a03e:	7823      	ldrb	r3, [r4, #0]
 801a040:	f3bf 8f5b 	dmb	ish
 801a044:	07da      	lsls	r2, r3, #31
 801a046:	d40b      	bmi.n	801a060 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801a048:	4620      	mov	r0, r4
 801a04a:	f006 f85a 	bl	8020102 <__cxa_guard_acquire>
 801a04e:	b138      	cbz	r0, 801a060 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801a050:	4620      	mov	r0, r4
 801a052:	f006 f862 	bl	802011a <__cxa_guard_release>
 801a056:	4a0f      	ldr	r2, [pc, #60]	@ (801a094 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a058:	490f      	ldr	r1, [pc, #60]	@ (801a098 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801a05a:	4810      	ldr	r0, [pc, #64]	@ (801a09c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a05c:	f006 f84a 	bl	80200f4 <__aeabi_atexit>
 801a060:	4c0f      	ldr	r4, [pc, #60]	@ (801a0a0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801a062:	7823      	ldrb	r3, [r4, #0]
 801a064:	f3bf 8f5b 	dmb	ish
 801a068:	07db      	lsls	r3, r3, #31
 801a06a:	d40b      	bmi.n	801a084 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801a06c:	4620      	mov	r0, r4
 801a06e:	f006 f848 	bl	8020102 <__cxa_guard_acquire>
 801a072:	b138      	cbz	r0, 801a084 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801a074:	4620      	mov	r0, r4
 801a076:	f006 f850 	bl	802011a <__cxa_guard_release>
 801a07a:	4a06      	ldr	r2, [pc, #24]	@ (801a094 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801a07c:	4909      	ldr	r1, [pc, #36]	@ (801a0a4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801a07e:	480a      	ldr	r0, [pc, #40]	@ (801a0a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801a080:	f006 f838 	bl	80200f4 <__aeabi_atexit>
 801a084:	4b05      	ldr	r3, [pc, #20]	@ (801a09c <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801a086:	626b      	str	r3, [r5, #36]	@ 0x24
 801a088:	4b07      	ldr	r3, [pc, #28]	@ (801a0a8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801a08a:	62ab      	str	r3, [r5, #40]	@ 0x28
 801a08c:	bd38      	pop	{r3, r4, r5, pc}
 801a08e:	bf00      	nop
 801a090:	240249e8 	.word	0x240249e8
 801a094:	24000000 	.word	0x24000000
 801a098:	08017225 	.word	0x08017225
 801a09c:	240000d0 	.word	0x240000d0
 801a0a0:	240249ec 	.word	0x240249ec
 801a0a4:	08017223 	.word	0x08017223
 801a0a8:	240000d4 	.word	0x240000d4

0801a0ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801a0ac:	b538      	push	{r3, r4, r5, lr}
 801a0ae:	4c15      	ldr	r4, [pc, #84]	@ (801a104 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801a0b0:	4605      	mov	r5, r0
 801a0b2:	7823      	ldrb	r3, [r4, #0]
 801a0b4:	f3bf 8f5b 	dmb	ish
 801a0b8:	07da      	lsls	r2, r3, #31
 801a0ba:	d40b      	bmi.n	801a0d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a0bc:	4620      	mov	r0, r4
 801a0be:	f006 f820 	bl	8020102 <__cxa_guard_acquire>
 801a0c2:	b138      	cbz	r0, 801a0d4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801a0c4:	4620      	mov	r0, r4
 801a0c6:	f006 f828 	bl	802011a <__cxa_guard_release>
 801a0ca:	4a0f      	ldr	r2, [pc, #60]	@ (801a108 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a0cc:	490f      	ldr	r1, [pc, #60]	@ (801a10c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801a0ce:	4810      	ldr	r0, [pc, #64]	@ (801a110 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a0d0:	f006 f810 	bl	80200f4 <__aeabi_atexit>
 801a0d4:	4c0f      	ldr	r4, [pc, #60]	@ (801a114 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801a0d6:	7823      	ldrb	r3, [r4, #0]
 801a0d8:	f3bf 8f5b 	dmb	ish
 801a0dc:	07db      	lsls	r3, r3, #31
 801a0de:	d40b      	bmi.n	801a0f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a0e0:	4620      	mov	r0, r4
 801a0e2:	f006 f80e 	bl	8020102 <__cxa_guard_acquire>
 801a0e6:	b138      	cbz	r0, 801a0f8 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801a0e8:	4620      	mov	r0, r4
 801a0ea:	f006 f816 	bl	802011a <__cxa_guard_release>
 801a0ee:	4a06      	ldr	r2, [pc, #24]	@ (801a108 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801a0f0:	4909      	ldr	r1, [pc, #36]	@ (801a118 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801a0f2:	480a      	ldr	r0, [pc, #40]	@ (801a11c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a0f4:	f005 fffe 	bl	80200f4 <__aeabi_atexit>
 801a0f8:	4b05      	ldr	r3, [pc, #20]	@ (801a110 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801a0fa:	61eb      	str	r3, [r5, #28]
 801a0fc:	4b07      	ldr	r3, [pc, #28]	@ (801a11c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801a0fe:	622b      	str	r3, [r5, #32]
 801a100:	bd38      	pop	{r3, r4, r5, pc}
 801a102:	bf00      	nop
 801a104:	240249c8 	.word	0x240249c8
 801a108:	24000000 	.word	0x24000000
 801a10c:	08017229 	.word	0x08017229
 801a110:	240000b0 	.word	0x240000b0
 801a114:	240249cc 	.word	0x240249cc
 801a118:	08017227 	.word	0x08017227
 801a11c:	240000b4 	.word	0x240000b4

0801a120 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801a120:	b510      	push	{r4, lr}
 801a122:	4604      	mov	r4, r0
 801a124:	f7ff ff88 	bl	801a038 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801a128:	4620      	mov	r0, r4
 801a12a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a12e:	f7ff bfbd 	b.w	801a0ac <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801a134 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801a134:	b538      	push	{r3, r4, r5, lr}
 801a136:	4c15      	ldr	r4, [pc, #84]	@ (801a18c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801a138:	4605      	mov	r5, r0
 801a13a:	7823      	ldrb	r3, [r4, #0]
 801a13c:	f3bf 8f5b 	dmb	ish
 801a140:	07da      	lsls	r2, r3, #31
 801a142:	d40b      	bmi.n	801a15c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a144:	4620      	mov	r0, r4
 801a146:	f005 ffdc 	bl	8020102 <__cxa_guard_acquire>
 801a14a:	b138      	cbz	r0, 801a15c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801a14c:	4620      	mov	r0, r4
 801a14e:	f005 ffe4 	bl	802011a <__cxa_guard_release>
 801a152:	4a0f      	ldr	r2, [pc, #60]	@ (801a190 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a154:	490f      	ldr	r1, [pc, #60]	@ (801a194 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801a156:	4810      	ldr	r0, [pc, #64]	@ (801a198 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a158:	f005 ffcc 	bl	80200f4 <__aeabi_atexit>
 801a15c:	4c0f      	ldr	r4, [pc, #60]	@ (801a19c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801a15e:	7823      	ldrb	r3, [r4, #0]
 801a160:	f3bf 8f5b 	dmb	ish
 801a164:	07db      	lsls	r3, r3, #31
 801a166:	d40b      	bmi.n	801a180 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a168:	4620      	mov	r0, r4
 801a16a:	f005 ffca 	bl	8020102 <__cxa_guard_acquire>
 801a16e:	b138      	cbz	r0, 801a180 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801a170:	4620      	mov	r0, r4
 801a172:	f005 ffd2 	bl	802011a <__cxa_guard_release>
 801a176:	4a06      	ldr	r2, [pc, #24]	@ (801a190 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801a178:	4909      	ldr	r1, [pc, #36]	@ (801a1a0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801a17a:	480a      	ldr	r0, [pc, #40]	@ (801a1a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a17c:	f005 ffba 	bl	80200f4 <__aeabi_atexit>
 801a180:	4b05      	ldr	r3, [pc, #20]	@ (801a198 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801a182:	636b      	str	r3, [r5, #52]	@ 0x34
 801a184:	4b07      	ldr	r3, [pc, #28]	@ (801a1a4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801a186:	63ab      	str	r3, [r5, #56]	@ 0x38
 801a188:	bd38      	pop	{r3, r4, r5, pc}
 801a18a:	bf00      	nop
 801a18c:	240249d0 	.word	0x240249d0
 801a190:	24000000 	.word	0x24000000
 801a194:	0801721d 	.word	0x0801721d
 801a198:	240000b8 	.word	0x240000b8
 801a19c:	240249d4 	.word	0x240249d4
 801a1a0:	0801721b 	.word	0x0801721b
 801a1a4:	240000bc 	.word	0x240000bc

0801a1a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801a1a8:	b538      	push	{r3, r4, r5, lr}
 801a1aa:	4c15      	ldr	r4, [pc, #84]	@ (801a200 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801a1ac:	4605      	mov	r5, r0
 801a1ae:	7823      	ldrb	r3, [r4, #0]
 801a1b0:	f3bf 8f5b 	dmb	ish
 801a1b4:	07da      	lsls	r2, r3, #31
 801a1b6:	d40b      	bmi.n	801a1d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a1b8:	4620      	mov	r0, r4
 801a1ba:	f005 ffa2 	bl	8020102 <__cxa_guard_acquire>
 801a1be:	b138      	cbz	r0, 801a1d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801a1c0:	4620      	mov	r0, r4
 801a1c2:	f005 ffaa 	bl	802011a <__cxa_guard_release>
 801a1c6:	4a0f      	ldr	r2, [pc, #60]	@ (801a204 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a1c8:	490f      	ldr	r1, [pc, #60]	@ (801a208 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801a1ca:	4810      	ldr	r0, [pc, #64]	@ (801a20c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a1cc:	f005 ff92 	bl	80200f4 <__aeabi_atexit>
 801a1d0:	4c0f      	ldr	r4, [pc, #60]	@ (801a210 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801a1d2:	7823      	ldrb	r3, [r4, #0]
 801a1d4:	f3bf 8f5b 	dmb	ish
 801a1d8:	07db      	lsls	r3, r3, #31
 801a1da:	d40b      	bmi.n	801a1f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a1dc:	4620      	mov	r0, r4
 801a1de:	f005 ff90 	bl	8020102 <__cxa_guard_acquire>
 801a1e2:	b138      	cbz	r0, 801a1f4 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801a1e4:	4620      	mov	r0, r4
 801a1e6:	f005 ff98 	bl	802011a <__cxa_guard_release>
 801a1ea:	4a06      	ldr	r2, [pc, #24]	@ (801a204 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801a1ec:	4909      	ldr	r1, [pc, #36]	@ (801a214 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801a1ee:	480a      	ldr	r0, [pc, #40]	@ (801a218 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a1f0:	f005 ff80 	bl	80200f4 <__aeabi_atexit>
 801a1f4:	4b05      	ldr	r3, [pc, #20]	@ (801a20c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801a1f6:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801a1f8:	4b07      	ldr	r3, [pc, #28]	@ (801a218 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801a1fa:	632b      	str	r3, [r5, #48]	@ 0x30
 801a1fc:	bd38      	pop	{r3, r4, r5, pc}
 801a1fe:	bf00      	nop
 801a200:	240249a8 	.word	0x240249a8
 801a204:	24000000 	.word	0x24000000
 801a208:	08017221 	.word	0x08017221
 801a20c:	24000090 	.word	0x24000090
 801a210:	240249ac 	.word	0x240249ac
 801a214:	0801721f 	.word	0x0801721f
 801a218:	24000094 	.word	0x24000094

0801a21c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801a21c:	b510      	push	{r4, lr}
 801a21e:	4604      	mov	r4, r0
 801a220:	f7ff ff88 	bl	801a134 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801a224:	4620      	mov	r0, r4
 801a226:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a22a:	f7ff bfbd 	b.w	801a1a8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801a230 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801a230:	b538      	push	{r3, r4, r5, lr}
 801a232:	4c15      	ldr	r4, [pc, #84]	@ (801a288 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801a234:	4605      	mov	r5, r0
 801a236:	7823      	ldrb	r3, [r4, #0]
 801a238:	f3bf 8f5b 	dmb	ish
 801a23c:	07da      	lsls	r2, r3, #31
 801a23e:	d40b      	bmi.n	801a258 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a240:	4620      	mov	r0, r4
 801a242:	f005 ff5e 	bl	8020102 <__cxa_guard_acquire>
 801a246:	b138      	cbz	r0, 801a258 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801a248:	4620      	mov	r0, r4
 801a24a:	f005 ff66 	bl	802011a <__cxa_guard_release>
 801a24e:	4a0f      	ldr	r2, [pc, #60]	@ (801a28c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a250:	490f      	ldr	r1, [pc, #60]	@ (801a290 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801a252:	4810      	ldr	r0, [pc, #64]	@ (801a294 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a254:	f005 ff4e 	bl	80200f4 <__aeabi_atexit>
 801a258:	4c0f      	ldr	r4, [pc, #60]	@ (801a298 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801a25a:	7823      	ldrb	r3, [r4, #0]
 801a25c:	f3bf 8f5b 	dmb	ish
 801a260:	07db      	lsls	r3, r3, #31
 801a262:	d40b      	bmi.n	801a27c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a264:	4620      	mov	r0, r4
 801a266:	f005 ff4c 	bl	8020102 <__cxa_guard_acquire>
 801a26a:	b138      	cbz	r0, 801a27c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801a26c:	4620      	mov	r0, r4
 801a26e:	f005 ff54 	bl	802011a <__cxa_guard_release>
 801a272:	4a06      	ldr	r2, [pc, #24]	@ (801a28c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801a274:	4909      	ldr	r1, [pc, #36]	@ (801a29c <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801a276:	480a      	ldr	r0, [pc, #40]	@ (801a2a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a278:	f005 ff3c 	bl	80200f4 <__aeabi_atexit>
 801a27c:	4b05      	ldr	r3, [pc, #20]	@ (801a294 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801a27e:	646b      	str	r3, [r5, #68]	@ 0x44
 801a280:	4b07      	ldr	r3, [pc, #28]	@ (801a2a0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801a282:	64ab      	str	r3, [r5, #72]	@ 0x48
 801a284:	bd38      	pop	{r3, r4, r5, pc}
 801a286:	bf00      	nop
 801a288:	240249d8 	.word	0x240249d8
 801a28c:	24000000 	.word	0x24000000
 801a290:	08017215 	.word	0x08017215
 801a294:	240000c0 	.word	0x240000c0
 801a298:	240249dc 	.word	0x240249dc
 801a29c:	08017213 	.word	0x08017213
 801a2a0:	240000c4 	.word	0x240000c4

0801a2a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801a2a4:	b538      	push	{r3, r4, r5, lr}
 801a2a6:	4c15      	ldr	r4, [pc, #84]	@ (801a2fc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801a2a8:	4605      	mov	r5, r0
 801a2aa:	7823      	ldrb	r3, [r4, #0]
 801a2ac:	f3bf 8f5b 	dmb	ish
 801a2b0:	07da      	lsls	r2, r3, #31
 801a2b2:	d40b      	bmi.n	801a2cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a2b4:	4620      	mov	r0, r4
 801a2b6:	f005 ff24 	bl	8020102 <__cxa_guard_acquire>
 801a2ba:	b138      	cbz	r0, 801a2cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801a2bc:	4620      	mov	r0, r4
 801a2be:	f005 ff2c 	bl	802011a <__cxa_guard_release>
 801a2c2:	4a0f      	ldr	r2, [pc, #60]	@ (801a300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a2c4:	490f      	ldr	r1, [pc, #60]	@ (801a304 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801a2c6:	4810      	ldr	r0, [pc, #64]	@ (801a308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a2c8:	f005 ff14 	bl	80200f4 <__aeabi_atexit>
 801a2cc:	4c0f      	ldr	r4, [pc, #60]	@ (801a30c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801a2ce:	7823      	ldrb	r3, [r4, #0]
 801a2d0:	f3bf 8f5b 	dmb	ish
 801a2d4:	07db      	lsls	r3, r3, #31
 801a2d6:	d40b      	bmi.n	801a2f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a2d8:	4620      	mov	r0, r4
 801a2da:	f005 ff12 	bl	8020102 <__cxa_guard_acquire>
 801a2de:	b138      	cbz	r0, 801a2f0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801a2e0:	4620      	mov	r0, r4
 801a2e2:	f005 ff1a 	bl	802011a <__cxa_guard_release>
 801a2e6:	4a06      	ldr	r2, [pc, #24]	@ (801a300 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801a2e8:	4909      	ldr	r1, [pc, #36]	@ (801a310 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801a2ea:	480a      	ldr	r0, [pc, #40]	@ (801a314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a2ec:	f005 ff02 	bl	80200f4 <__aeabi_atexit>
 801a2f0:	4b05      	ldr	r3, [pc, #20]	@ (801a308 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801a2f2:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801a2f4:	4b07      	ldr	r3, [pc, #28]	@ (801a314 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801a2f6:	642b      	str	r3, [r5, #64]	@ 0x40
 801a2f8:	bd38      	pop	{r3, r4, r5, pc}
 801a2fa:	bf00      	nop
 801a2fc:	240249b8 	.word	0x240249b8
 801a300:	24000000 	.word	0x24000000
 801a304:	08017219 	.word	0x08017219
 801a308:	240000a0 	.word	0x240000a0
 801a30c:	240249bc 	.word	0x240249bc
 801a310:	08017217 	.word	0x08017217
 801a314:	240000a4 	.word	0x240000a4

0801a318 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801a318:	b510      	push	{r4, lr}
 801a31a:	4604      	mov	r4, r0
 801a31c:	f7ff ff88 	bl	801a230 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801a320:	4620      	mov	r0, r4
 801a322:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a326:	f7ff bfbd 	b.w	801a2a4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801a32c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801a32c:	b538      	push	{r3, r4, r5, lr}
 801a32e:	4c15      	ldr	r4, [pc, #84]	@ (801a384 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801a330:	4605      	mov	r5, r0
 801a332:	7823      	ldrb	r3, [r4, #0]
 801a334:	f3bf 8f5b 	dmb	ish
 801a338:	07da      	lsls	r2, r3, #31
 801a33a:	d40b      	bmi.n	801a354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a33c:	4620      	mov	r0, r4
 801a33e:	f005 fee0 	bl	8020102 <__cxa_guard_acquire>
 801a342:	b138      	cbz	r0, 801a354 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801a344:	4620      	mov	r0, r4
 801a346:	f005 fee8 	bl	802011a <__cxa_guard_release>
 801a34a:	4a0f      	ldr	r2, [pc, #60]	@ (801a388 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a34c:	490f      	ldr	r1, [pc, #60]	@ (801a38c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801a34e:	4810      	ldr	r0, [pc, #64]	@ (801a390 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a350:	f005 fed0 	bl	80200f4 <__aeabi_atexit>
 801a354:	4c0f      	ldr	r4, [pc, #60]	@ (801a394 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801a356:	7823      	ldrb	r3, [r4, #0]
 801a358:	f3bf 8f5b 	dmb	ish
 801a35c:	07db      	lsls	r3, r3, #31
 801a35e:	d40b      	bmi.n	801a378 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a360:	4620      	mov	r0, r4
 801a362:	f005 fece 	bl	8020102 <__cxa_guard_acquire>
 801a366:	b138      	cbz	r0, 801a378 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801a368:	4620      	mov	r0, r4
 801a36a:	f005 fed6 	bl	802011a <__cxa_guard_release>
 801a36e:	4a06      	ldr	r2, [pc, #24]	@ (801a388 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801a370:	4909      	ldr	r1, [pc, #36]	@ (801a398 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801a372:	480a      	ldr	r0, [pc, #40]	@ (801a39c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a374:	f005 febe 	bl	80200f4 <__aeabi_atexit>
 801a378:	4b05      	ldr	r3, [pc, #20]	@ (801a390 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801a37a:	656b      	str	r3, [r5, #84]	@ 0x54
 801a37c:	4b07      	ldr	r3, [pc, #28]	@ (801a39c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801a37e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801a380:	bd38      	pop	{r3, r4, r5, pc}
 801a382:	bf00      	nop
 801a384:	240249b0 	.word	0x240249b0
 801a388:	24000000 	.word	0x24000000
 801a38c:	0801720d 	.word	0x0801720d
 801a390:	24000098 	.word	0x24000098
 801a394:	240249b4 	.word	0x240249b4
 801a398:	0801720b 	.word	0x0801720b
 801a39c:	2400009c 	.word	0x2400009c

0801a3a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801a3a0:	b538      	push	{r3, r4, r5, lr}
 801a3a2:	4c15      	ldr	r4, [pc, #84]	@ (801a3f8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801a3a4:	4605      	mov	r5, r0
 801a3a6:	7823      	ldrb	r3, [r4, #0]
 801a3a8:	f3bf 8f5b 	dmb	ish
 801a3ac:	07da      	lsls	r2, r3, #31
 801a3ae:	d40b      	bmi.n	801a3c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a3b0:	4620      	mov	r0, r4
 801a3b2:	f005 fea6 	bl	8020102 <__cxa_guard_acquire>
 801a3b6:	b138      	cbz	r0, 801a3c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801a3b8:	4620      	mov	r0, r4
 801a3ba:	f005 feae 	bl	802011a <__cxa_guard_release>
 801a3be:	4a0f      	ldr	r2, [pc, #60]	@ (801a3fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a3c0:	490f      	ldr	r1, [pc, #60]	@ (801a400 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801a3c2:	4810      	ldr	r0, [pc, #64]	@ (801a404 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a3c4:	f005 fe96 	bl	80200f4 <__aeabi_atexit>
 801a3c8:	4c0f      	ldr	r4, [pc, #60]	@ (801a408 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801a3ca:	7823      	ldrb	r3, [r4, #0]
 801a3cc:	f3bf 8f5b 	dmb	ish
 801a3d0:	07db      	lsls	r3, r3, #31
 801a3d2:	d40b      	bmi.n	801a3ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a3d4:	4620      	mov	r0, r4
 801a3d6:	f005 fe94 	bl	8020102 <__cxa_guard_acquire>
 801a3da:	b138      	cbz	r0, 801a3ec <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801a3dc:	4620      	mov	r0, r4
 801a3de:	f005 fe9c 	bl	802011a <__cxa_guard_release>
 801a3e2:	4a06      	ldr	r2, [pc, #24]	@ (801a3fc <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801a3e4:	4909      	ldr	r1, [pc, #36]	@ (801a40c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801a3e6:	480a      	ldr	r0, [pc, #40]	@ (801a410 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a3e8:	f005 fe84 	bl	80200f4 <__aeabi_atexit>
 801a3ec:	4b05      	ldr	r3, [pc, #20]	@ (801a404 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801a3ee:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801a3f0:	4b07      	ldr	r3, [pc, #28]	@ (801a410 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801a3f2:	652b      	str	r3, [r5, #80]	@ 0x50
 801a3f4:	bd38      	pop	{r3, r4, r5, pc}
 801a3f6:	bf00      	nop
 801a3f8:	240249a0 	.word	0x240249a0
 801a3fc:	24000000 	.word	0x24000000
 801a400:	08017211 	.word	0x08017211
 801a404:	24000088 	.word	0x24000088
 801a408:	240249a4 	.word	0x240249a4
 801a40c:	0801720f 	.word	0x0801720f
 801a410:	2400008c 	.word	0x2400008c

0801a414 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801a414:	b510      	push	{r4, lr}
 801a416:	4604      	mov	r4, r0
 801a418:	f7ff ff88 	bl	801a32c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801a41c:	4620      	mov	r0, r4
 801a41e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a422:	f7ff bfbd 	b.w	801a3a0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801a426 <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801a426:	b510      	push	{r4, lr}
 801a428:	4604      	mov	r4, r0
 801a42a:	f7ff fff3 	bl	801a414 <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801a42e:	4620      	mov	r0, r4
 801a430:	f7ff ff72 	bl	801a318 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801a434:	4620      	mov	r0, r4
 801a436:	f7ff fe73 	bl	801a120 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801a43a:	4620      	mov	r0, r4
 801a43c:	f7ff fdf2 	bl	801a024 <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801a440:	4620      	mov	r0, r4
 801a442:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a446:	f7ff bee9 	b.w	801a21c <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801a44c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801a44c:	b538      	push	{r3, r4, r5, lr}
 801a44e:	4c0b      	ldr	r4, [pc, #44]	@ (801a47c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801a450:	4605      	mov	r5, r0
 801a452:	7823      	ldrb	r3, [r4, #0]
 801a454:	f3bf 8f5b 	dmb	ish
 801a458:	07db      	lsls	r3, r3, #31
 801a45a:	d40b      	bmi.n	801a474 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a45c:	4620      	mov	r0, r4
 801a45e:	f005 fe50 	bl	8020102 <__cxa_guard_acquire>
 801a462:	b138      	cbz	r0, 801a474 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801a464:	4620      	mov	r0, r4
 801a466:	f005 fe58 	bl	802011a <__cxa_guard_release>
 801a46a:	4a05      	ldr	r2, [pc, #20]	@ (801a480 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801a46c:	4905      	ldr	r1, [pc, #20]	@ (801a484 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801a46e:	4806      	ldr	r0, [pc, #24]	@ (801a488 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a470:	f005 fe40 	bl	80200f4 <__aeabi_atexit>
 801a474:	4b04      	ldr	r3, [pc, #16]	@ (801a488 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801a476:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801a478:	bd38      	pop	{r3, r4, r5, pc}
 801a47a:	bf00      	nop
 801a47c:	24024994 	.word	0x24024994
 801a480:	24000000 	.word	0x24000000
 801a484:	08017209 	.word	0x08017209
 801a488:	24000080 	.word	0x24000080

0801a48c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801a48c:	b538      	push	{r3, r4, r5, lr}
 801a48e:	4c0b      	ldr	r4, [pc, #44]	@ (801a4bc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801a490:	4605      	mov	r5, r0
 801a492:	7823      	ldrb	r3, [r4, #0]
 801a494:	f3bf 8f5b 	dmb	ish
 801a498:	07db      	lsls	r3, r3, #31
 801a49a:	d40b      	bmi.n	801a4b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a49c:	4620      	mov	r0, r4
 801a49e:	f005 fe30 	bl	8020102 <__cxa_guard_acquire>
 801a4a2:	b138      	cbz	r0, 801a4b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801a4a4:	4620      	mov	r0, r4
 801a4a6:	f005 fe38 	bl	802011a <__cxa_guard_release>
 801a4aa:	4a05      	ldr	r2, [pc, #20]	@ (801a4c0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801a4ac:	4905      	ldr	r1, [pc, #20]	@ (801a4c4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801a4ae:	4806      	ldr	r0, [pc, #24]	@ (801a4c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a4b0:	f005 fe20 	bl	80200f4 <__aeabi_atexit>
 801a4b4:	4b04      	ldr	r3, [pc, #16]	@ (801a4c8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801a4b6:	662b      	str	r3, [r5, #96]	@ 0x60
 801a4b8:	bd38      	pop	{r3, r4, r5, pc}
 801a4ba:	bf00      	nop
 801a4bc:	24024998 	.word	0x24024998
 801a4c0:	24000000 	.word	0x24000000
 801a4c4:	08017207 	.word	0x08017207
 801a4c8:	24000084 	.word	0x24000084

0801a4cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801a4cc:	b570      	push	{r4, r5, r6, lr}
 801a4ce:	4d0c      	ldr	r5, [pc, #48]	@ (801a500 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801a4d0:	4606      	mov	r6, r0
 801a4d2:	4c0c      	ldr	r4, [pc, #48]	@ (801a504 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801a4d4:	782b      	ldrb	r3, [r5, #0]
 801a4d6:	f3bf 8f5b 	dmb	ish
 801a4da:	f013 0f01 	tst.w	r3, #1
 801a4de:	d10d      	bne.n	801a4fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a4e0:	4628      	mov	r0, r5
 801a4e2:	f005 fe0e 	bl	8020102 <__cxa_guard_acquire>
 801a4e6:	b148      	cbz	r0, 801a4fc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801a4e8:	4b07      	ldr	r3, [pc, #28]	@ (801a508 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801a4ea:	4628      	mov	r0, r5
 801a4ec:	6023      	str	r3, [r4, #0]
 801a4ee:	f005 fe14 	bl	802011a <__cxa_guard_release>
 801a4f2:	4a06      	ldr	r2, [pc, #24]	@ (801a50c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801a4f4:	4620      	mov	r0, r4
 801a4f6:	4906      	ldr	r1, [pc, #24]	@ (801a510 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801a4f8:	f005 fdfc 	bl	80200f4 <__aeabi_atexit>
 801a4fc:	6674      	str	r4, [r6, #100]	@ 0x64
 801a4fe:	bd70      	pop	{r4, r5, r6, pc}
 801a500:	2402499c 	.word	0x2402499c
 801a504:	24024af4 	.word	0x24024af4
 801a508:	080247c8 	.word	0x080247c8
 801a50c:	24000000 	.word	0x24000000
 801a510:	08017205 	.word	0x08017205

0801a514 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801a514:	b510      	push	{r4, lr}
 801a516:	4604      	mov	r4, r0
 801a518:	f7ff ff98 	bl	801a44c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801a51c:	4620      	mov	r0, r4
 801a51e:	f7ff ffb5 	bl	801a48c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801a522:	4620      	mov	r0, r4
 801a524:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801a528:	f7ff bfd0 	b.w	801a4cc <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801a52c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801a52c:	b570      	push	{r4, r5, r6, lr}
 801a52e:	4d0c      	ldr	r5, [pc, #48]	@ (801a560 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801a530:	4606      	mov	r6, r0
 801a532:	4c0c      	ldr	r4, [pc, #48]	@ (801a564 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801a534:	782b      	ldrb	r3, [r5, #0]
 801a536:	f3bf 8f5b 	dmb	ish
 801a53a:	f013 0f01 	tst.w	r3, #1
 801a53e:	d10d      	bne.n	801a55c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a540:	4628      	mov	r0, r5
 801a542:	f005 fdde 	bl	8020102 <__cxa_guard_acquire>
 801a546:	b148      	cbz	r0, 801a55c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801a548:	4b07      	ldr	r3, [pc, #28]	@ (801a568 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801a54a:	4628      	mov	r0, r5
 801a54c:	6023      	str	r3, [r4, #0]
 801a54e:	f005 fde4 	bl	802011a <__cxa_guard_release>
 801a552:	4a06      	ldr	r2, [pc, #24]	@ (801a56c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801a554:	4620      	mov	r0, r4
 801a556:	4906      	ldr	r1, [pc, #24]	@ (801a570 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801a558:	f005 fdcc 	bl	80200f4 <__aeabi_atexit>
 801a55c:	66b4      	str	r4, [r6, #104]	@ 0x68
 801a55e:	bd70      	pop	{r4, r5, r6, pc}
 801a560:	24024990 	.word	0x24024990
 801a564:	240249f0 	.word	0x240249f0
 801a568:	080247e0 	.word	0x080247e0
 801a56c:	24000000 	.word	0x24000000
 801a570:	08017203 	.word	0x08017203

0801a574 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801a574:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a578:	b087      	sub	sp, #28
 801a57a:	788d      	ldrb	r5, [r1, #2]
 801a57c:	f891 9000 	ldrb.w	r9, [r1]
 801a580:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801a584:	9501      	str	r5, [sp, #4]
 801a586:	784d      	ldrb	r5, [r1, #1]
 801a588:	9203      	str	r2, [sp, #12]
 801a58a:	9502      	str	r5, [sp, #8]
 801a58c:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a590:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801a594:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801a598:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801a59c:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801a5a0:	fb06 0708 	mla	r7, r6, r8, r0
 801a5a4:	2e00      	cmp	r6, #0
 801a5a6:	eb02 0a07 	add.w	sl, r2, r7
 801a5aa:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801a5ae:	9d01      	ldr	r5, [sp, #4]
 801a5b0:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801a5b4:	ea45 0509 	orr.w	r5, r5, r9
 801a5b8:	9505      	str	r5, [sp, #20]
 801a5ba:	f2c0 80b2 	blt.w	801a722 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a5be:	45b3      	cmp	fp, r6
 801a5c0:	f340 80af 	ble.w	801a722 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801a5c4:	2800      	cmp	r0, #0
 801a5c6:	f2c0 80aa 	blt.w	801a71e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a5ca:	4580      	cmp	r8, r0
 801a5cc:	f340 80a7 	ble.w	801a71e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801a5d0:	9a03      	ldr	r2, [sp, #12]
 801a5d2:	5dd7      	ldrb	r7, [r2, r7]
 801a5d4:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a5d8:	441f      	add	r7, r3
 801a5da:	1c42      	adds	r2, r0, #1
 801a5dc:	f100 80a4 	bmi.w	801a728 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a5e0:	4590      	cmp	r8, r2
 801a5e2:	f340 80a1 	ble.w	801a728 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a5e6:	2c00      	cmp	r4, #0
 801a5e8:	f000 809e 	beq.w	801a728 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801a5ec:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801a5f0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a5f4:	441d      	add	r5, r3
 801a5f6:	3601      	adds	r6, #1
 801a5f8:	f100 809a 	bmi.w	801a730 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a5fc:	45b3      	cmp	fp, r6
 801a5fe:	f340 8097 	ble.w	801a730 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a602:	f1bc 0f00 	cmp.w	ip, #0
 801a606:	f000 8093 	beq.w	801a730 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801a60a:	2800      	cmp	r0, #0
 801a60c:	f2c0 808e 	blt.w	801a72c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a610:	4580      	cmp	r8, r0
 801a612:	f340 808b 	ble.w	801a72c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801a616:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801a61a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a61e:	441e      	add	r6, r3
 801a620:	3001      	adds	r0, #1
 801a622:	f100 8088 	bmi.w	801a736 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a626:	4580      	cmp	r8, r0
 801a628:	f340 8085 	ble.w	801a736 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a62c:	2c00      	cmp	r4, #0
 801a62e:	f000 8082 	beq.w	801a736 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801a632:	44d0      	add	r8, sl
 801a634:	f898 2001 	ldrb.w	r2, [r8, #1]
 801a638:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a63c:	4413      	add	r3, r2
 801a63e:	b2a4      	uxth	r4, r4
 801a640:	f895 a000 	ldrb.w	sl, [r5]
 801a644:	fa1f fc8c 	uxth.w	ip, ip
 801a648:	fb04 fb0c 	mul.w	fp, r4, ip
 801a64c:	0124      	lsls	r4, r4, #4
 801a64e:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801a652:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801a656:	eba4 040b 	sub.w	r4, r4, fp
 801a65a:	fa1f f08c 	uxth.w	r0, ip
 801a65e:	b2a2      	uxth	r2, r4
 801a660:	783c      	ldrb	r4, [r7, #0]
 801a662:	eba8 0800 	sub.w	r8, r8, r0
 801a666:	fa1f fc8e 	uxth.w	ip, lr
 801a66a:	fb02 fa0a 	mul.w	sl, r2, sl
 801a66e:	ea6f 0e0e 	mvn.w	lr, lr
 801a672:	fa1f f888 	uxth.w	r8, r8
 801a676:	fa5f fe8e 	uxtb.w	lr, lr
 801a67a:	fb08 aa04 	mla	sl, r8, r4, sl
 801a67e:	7834      	ldrb	r4, [r6, #0]
 801a680:	fb19 f90e 	smulbb	r9, r9, lr
 801a684:	fb00 aa04 	mla	sl, r0, r4, sl
 801a688:	781c      	ldrb	r4, [r3, #0]
 801a68a:	fb0b a404 	mla	r4, fp, r4, sl
 801a68e:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801a692:	fb04 990c 	mla	r9, r4, ip, r9
 801a696:	fa1f f989 	uxth.w	r9, r9
 801a69a:	f109 0401 	add.w	r4, r9, #1
 801a69e:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801a6a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a6a6:	f881 9000 	strb.w	r9, [r1]
 801a6aa:	f895 9001 	ldrb.w	r9, [r5, #1]
 801a6ae:	787c      	ldrb	r4, [r7, #1]
 801a6b0:	fb02 f909 	mul.w	r9, r2, r9
 801a6b4:	fb08 9904 	mla	r9, r8, r4, r9
 801a6b8:	7874      	ldrb	r4, [r6, #1]
 801a6ba:	fb00 9904 	mla	r9, r0, r4, r9
 801a6be:	785c      	ldrb	r4, [r3, #1]
 801a6c0:	fb0b 9404 	mla	r4, fp, r4, r9
 801a6c4:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801a6c8:	9c02      	ldr	r4, [sp, #8]
 801a6ca:	fb14 f90e 	smulbb	r9, r4, lr
 801a6ce:	fb0a 940c 	mla	r4, sl, ip, r9
 801a6d2:	b2a4      	uxth	r4, r4
 801a6d4:	f104 0901 	add.w	r9, r4, #1
 801a6d8:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801a6dc:	1224      	asrs	r4, r4, #8
 801a6de:	704c      	strb	r4, [r1, #1]
 801a6e0:	78ad      	ldrb	r5, [r5, #2]
 801a6e2:	78bc      	ldrb	r4, [r7, #2]
 801a6e4:	436a      	muls	r2, r5
 801a6e6:	789b      	ldrb	r3, [r3, #2]
 801a6e8:	fb08 2204 	mla	r2, r8, r4, r2
 801a6ec:	78b4      	ldrb	r4, [r6, #2]
 801a6ee:	fb00 2004 	mla	r0, r0, r4, r2
 801a6f2:	fb0b 0b03 	mla	fp, fp, r3, r0
 801a6f6:	9b01      	ldr	r3, [sp, #4]
 801a6f8:	fb13 fe0e 	smulbb	lr, r3, lr
 801a6fc:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801a700:	fb0b ec0c 	mla	ip, fp, ip, lr
 801a704:	fa1f fc8c 	uxth.w	ip, ip
 801a708:	f10c 0e01 	add.w	lr, ip, #1
 801a70c:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801a710:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a714:	f881 c002 	strb.w	ip, [r1, #2]
 801a718:	b007      	add	sp, #28
 801a71a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a71e:	af05      	add	r7, sp, #20
 801a720:	e75b      	b.n	801a5da <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801a722:	ad05      	add	r5, sp, #20
 801a724:	462f      	mov	r7, r5
 801a726:	e766      	b.n	801a5f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a728:	ad05      	add	r5, sp, #20
 801a72a:	e764      	b.n	801a5f6 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801a72c:	ae05      	add	r6, sp, #20
 801a72e:	e777      	b.n	801a620 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801a730:	ab05      	add	r3, sp, #20
 801a732:	461e      	mov	r6, r3
 801a734:	e783      	b.n	801a63e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801a736:	ab05      	add	r3, sp, #20
 801a738:	e781      	b.n	801a63e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801a73a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801a73a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a73e:	b093      	sub	sp, #76	@ 0x4c
 801a740:	9210      	str	r2, [sp, #64]	@ 0x40
 801a742:	9309      	str	r3, [sp, #36]	@ 0x24
 801a744:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a746:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801a74a:	9011      	str	r0, [sp, #68]	@ 0x44
 801a74c:	930e      	str	r3, [sp, #56]	@ 0x38
 801a74e:	6850      	ldr	r0, [r2, #4]
 801a750:	910d      	str	r1, [sp, #52]	@ 0x34
 801a752:	6812      	ldr	r2, [r2, #0]
 801a754:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801a758:	fb00 1303 	mla	r3, r0, r3, r1
 801a75c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a760:	18d3      	adds	r3, r2, r3
 801a762:	930a      	str	r3, [sp, #40]	@ 0x28
 801a764:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a766:	681b      	ldr	r3, [r3, #0]
 801a768:	930c      	str	r3, [sp, #48]	@ 0x30
 801a76a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a76c:	685c      	ldr	r4, [r3, #4]
 801a76e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a770:	3404      	adds	r4, #4
 801a772:	43db      	mvns	r3, r3
 801a774:	b2db      	uxtb	r3, r3
 801a776:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a778:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a77a:	2b00      	cmp	r3, #0
 801a77c:	dc03      	bgt.n	801a786 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801a77e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a780:	2b00      	cmp	r3, #0
 801a782:	f340 8250 	ble.w	801ac26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a786:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a788:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801a78c:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801a790:	1e48      	subs	r0, r1, #1
 801a792:	1e55      	subs	r5, r2, #1
 801a794:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a796:	2b00      	cmp	r3, #0
 801a798:	f340 80ee 	ble.w	801a978 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801a79c:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801a79e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a7a0:	1436      	asrs	r6, r6, #16
 801a7a2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801a7a6:	d406      	bmi.n	801a7b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a7a8:	4286      	cmp	r6, r0
 801a7aa:	da04      	bge.n	801a7b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a7ac:	2b00      	cmp	r3, #0
 801a7ae:	db02      	blt.n	801a7b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801a7b0:	42ab      	cmp	r3, r5
 801a7b2:	f2c0 80e2 	blt.w	801a97a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801a7b6:	3601      	adds	r6, #1
 801a7b8:	f100 80cf 	bmi.w	801a95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a7bc:	42b1      	cmp	r1, r6
 801a7be:	f2c0 80cc 	blt.w	801a95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a7c2:	3301      	adds	r3, #1
 801a7c4:	f100 80c9 	bmi.w	801a95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a7c8:	429a      	cmp	r2, r3
 801a7ca:	f2c0 80c6 	blt.w	801a95a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801a7ce:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801a7d2:	f1bb 0f00 	cmp.w	fp, #0
 801a7d6:	f340 80f1 	ble.w	801a9bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801a7da:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a7dc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801a7de:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801a7e0:	141d      	asrs	r5, r3, #16
 801a7e2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a7e4:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801a7e8:	68c7      	ldr	r7, [r0, #12]
 801a7ea:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801a7ec:	1418      	asrs	r0, r3, #16
 801a7ee:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801a7f2:	6892      	ldr	r2, [r2, #8]
 801a7f4:	f100 8137 	bmi.w	801aa66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a7f8:	f102 3cff 	add.w	ip, r2, #4294967295
 801a7fc:	4560      	cmp	r0, ip
 801a7fe:	f280 8132 	bge.w	801aa66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a802:	2d00      	cmp	r5, #0
 801a804:	f2c0 812f 	blt.w	801aa66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a808:	f107 3cff 	add.w	ip, r7, #4294967295
 801a80c:	4565      	cmp	r5, ip
 801a80e:	f280 812a 	bge.w	801aa66 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801a812:	b212      	sxth	r2, r2
 801a814:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801a816:	fb05 0002 	mla	r0, r5, r2, r0
 801a81a:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801a81c:	f817 c000 	ldrb.w	ip, [r7, r0]
 801a820:	4405      	add	r5, r0
 801a822:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a826:	eb04 0e0c 	add.w	lr, r4, ip
 801a82a:	f1b8 0f00 	cmp.w	r8, #0
 801a82e:	f000 810c 	beq.w	801aa4a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801a832:	786f      	ldrb	r7, [r5, #1]
 801a834:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801a838:	4427      	add	r7, r4
 801a83a:	2900      	cmp	r1, #0
 801a83c:	f000 810d 	beq.w	801aa5a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801a840:	18a8      	adds	r0, r5, r2
 801a842:	5caa      	ldrb	r2, [r5, r2]
 801a844:	7840      	ldrb	r0, [r0, #1]
 801a846:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a84a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801a84e:	4422      	add	r2, r4
 801a850:	4420      	add	r0, r4
 801a852:	fa1f f388 	uxth.w	r3, r8
 801a856:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801a85a:	b289      	uxth	r1, r1
 801a85c:	f897 c000 	ldrb.w	ip, [r7]
 801a860:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a864:	fb03 f901 	mul.w	r9, r3, r1
 801a868:	011b      	lsls	r3, r3, #4
 801a86a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801a86e:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801a872:	eba3 0309 	sub.w	r3, r3, r9
 801a876:	b289      	uxth	r1, r1
 801a878:	b29b      	uxth	r3, r3
 801a87a:	eba8 0801 	sub.w	r8, r8, r1
 801a87e:	fb03 fc0c 	mul.w	ip, r3, ip
 801a882:	fa1f f888 	uxth.w	r8, r8
 801a886:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a888:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a88a:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a88e:	f892 a000 	ldrb.w	sl, [r2]
 801a892:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a896:	f890 a000 	ldrb.w	sl, [r0]
 801a89a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a89e:	f896 a000 	ldrb.w	sl, [r6]
 801a8a2:	fb1a fa03 	smulbb	sl, sl, r3
 801a8a6:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a8aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8ac:	fb0c ac05 	mla	ip, ip, r5, sl
 801a8b0:	fa1f fc8c 	uxth.w	ip, ip
 801a8b4:	f10c 0a01 	add.w	sl, ip, #1
 801a8b8:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801a8bc:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801a8c0:	f886 a000 	strb.w	sl, [r6]
 801a8c4:	f897 c001 	ldrb.w	ip, [r7, #1]
 801a8c8:	f89e a001 	ldrb.w	sl, [lr, #1]
 801a8cc:	fb03 fc0c 	mul.w	ip, r3, ip
 801a8d0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a8d2:	fb08 cc0a 	mla	ip, r8, sl, ip
 801a8d6:	f892 a001 	ldrb.w	sl, [r2, #1]
 801a8da:	fb01 cc0a 	mla	ip, r1, sl, ip
 801a8de:	f890 a001 	ldrb.w	sl, [r0, #1]
 801a8e2:	fb09 cc0a 	mla	ip, r9, sl, ip
 801a8e6:	f896 a001 	ldrb.w	sl, [r6, #1]
 801a8ea:	fb1a fa03 	smulbb	sl, sl, r3
 801a8ee:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801a8f2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8f4:	fb0c ac05 	mla	ip, ip, r5, sl
 801a8f8:	fa1f fc8c 	uxth.w	ip, ip
 801a8fc:	f10c 0a01 	add.w	sl, ip, #1
 801a900:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801a904:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801a908:	f886 c001 	strb.w	ip, [r6, #1]
 801a90c:	78bf      	ldrb	r7, [r7, #2]
 801a90e:	f89e c002 	ldrb.w	ip, [lr, #2]
 801a912:	437b      	muls	r3, r7
 801a914:	fb08 330c 	mla	r3, r8, ip, r3
 801a918:	f892 c002 	ldrb.w	ip, [r2, #2]
 801a91c:	7882      	ldrb	r2, [r0, #2]
 801a91e:	fb01 310c 	mla	r1, r1, ip, r3
 801a922:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a924:	fb09 1902 	mla	r9, r9, r2, r1
 801a928:	78b1      	ldrb	r1, [r6, #2]
 801a92a:	fb11 f103 	smulbb	r1, r1, r3
 801a92e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801a932:	fb09 1505 	mla	r5, r9, r5, r1
 801a936:	b2ad      	uxth	r5, r5
 801a938:	1c6b      	adds	r3, r5, #1
 801a93a:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801a93e:	122d      	asrs	r5, r5, #8
 801a940:	70b5      	strb	r5, [r6, #2]
 801a942:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a944:	3603      	adds	r6, #3
 801a946:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801a948:	f10b 3bff 	add.w	fp, fp, #4294967295
 801a94c:	4413      	add	r3, r2
 801a94e:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801a950:	931d      	str	r3, [sp, #116]	@ 0x74
 801a952:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a954:	4413      	add	r3, r2
 801a956:	931e      	str	r3, [sp, #120]	@ 0x78
 801a958:	e73b      	b.n	801a7d2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801a95a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801a95c:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801a95e:	4433      	add	r3, r6
 801a960:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801a962:	931d      	str	r3, [sp, #116]	@ 0x74
 801a964:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801a966:	4433      	add	r3, r6
 801a968:	931e      	str	r3, [sp, #120]	@ 0x78
 801a96a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a96c:	3b01      	subs	r3, #1
 801a96e:	9309      	str	r3, [sp, #36]	@ 0x24
 801a970:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a972:	3303      	adds	r3, #3
 801a974:	930a      	str	r3, [sp, #40]	@ 0x28
 801a976:	e70d      	b.n	801a794 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801a978:	d028      	beq.n	801a9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801a97a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a97c:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801a97e:	3b01      	subs	r3, #1
 801a980:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801a982:	fb00 5003 	mla	r0, r0, r3, r5
 801a986:	1400      	asrs	r0, r0, #16
 801a988:	f53f af21 	bmi.w	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a98c:	3901      	subs	r1, #1
 801a98e:	4288      	cmp	r0, r1
 801a990:	f6bf af1d 	bge.w	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a994:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801a996:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801a998:	fb01 0303 	mla	r3, r1, r3, r0
 801a99c:	141b      	asrs	r3, r3, #16
 801a99e:	f53f af16 	bmi.w	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a9a2:	3a01      	subs	r2, #1
 801a9a4:	4293      	cmp	r3, r2
 801a9a6:	f6bf af12 	bge.w	801a7ce <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801a9aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a9ac:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801a9b0:	1cdf      	adds	r7, r3, #3
 801a9b2:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801a9b6:	f1b9 0f00 	cmp.w	r9, #0
 801a9ba:	dc73      	bgt.n	801aaa4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801a9bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a9be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a9c0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801a9c4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a9c8:	441a      	add	r2, r3
 801a9ca:	920a      	str	r2, [sp, #40]	@ 0x28
 801a9cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a9ce:	2b00      	cmp	r3, #0
 801a9d0:	f340 8129 	ble.w	801ac26 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801a9d4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801a9d8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801a9da:	ee30 0a04 	vadd.f32	s0, s0, s8
 801a9de:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801a9e2:	eef0 6a62 	vmov.f32	s13, s5
 801a9e6:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801a9ea:	ee31 1a05 	vadd.f32	s2, s2, s10
 801a9ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9f2:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801a9f6:	eef0 6a43 	vmov.f32	s13, s6
 801a9fa:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801a9fe:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801aa02:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801aa06:	ee61 7a27 	vmul.f32	s15, s2, s15
 801aa0a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801aa0e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801aa12:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801aa16:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801aa1a:	ee12 2a90 	vmov	r2, s5
 801aa1e:	eef0 2a47 	vmov.f32	s5, s14
 801aa22:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa26:	ee13 2a10 	vmov	r2, s6
 801aa2a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801aa2c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801aa2e:	eeb0 3a67 	vmov.f32	s6, s15
 801aa32:	fb92 f3f3 	sdiv	r3, r2, r3
 801aa36:	9320      	str	r3, [sp, #128]	@ 0x80
 801aa38:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801aa3a:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aa3c:	3b01      	subs	r3, #1
 801aa3e:	930d      	str	r3, [sp, #52]	@ 0x34
 801aa40:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801aa42:	bf08      	it	eq
 801aa44:	4613      	moveq	r3, r2
 801aa46:	9309      	str	r3, [sp, #36]	@ 0x24
 801aa48:	e696      	b.n	801a778 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801aa4a:	b149      	cbz	r1, 801aa60 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801aa4c:	5caa      	ldrb	r2, [r5, r2]
 801aa4e:	4670      	mov	r0, lr
 801aa50:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aa54:	4422      	add	r2, r4
 801aa56:	4677      	mov	r7, lr
 801aa58:	e6fb      	b.n	801a852 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801aa5a:	4670      	mov	r0, lr
 801aa5c:	4672      	mov	r2, lr
 801aa5e:	e6f8      	b.n	801a852 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801aa60:	4670      	mov	r0, lr
 801aa62:	4672      	mov	r2, lr
 801aa64:	e7f7      	b.n	801aa56 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801aa66:	f110 0c01 	adds.w	ip, r0, #1
 801aa6a:	f53f af6a 	bmi.w	801a942 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aa6e:	4562      	cmp	r2, ip
 801aa70:	f6ff af67 	blt.w	801a942 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aa74:	f115 0c01 	adds.w	ip, r5, #1
 801aa78:	f53f af63 	bmi.w	801a942 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aa7c:	4567      	cmp	r7, ip
 801aa7e:	f6ff af60 	blt.w	801a942 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aa82:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801aa84:	b23f      	sxth	r7, r7
 801aa86:	b212      	sxth	r2, r2
 801aa88:	9002      	str	r0, [sp, #8]
 801aa8a:	9701      	str	r7, [sp, #4]
 801aa8c:	9200      	str	r2, [sp, #0]
 801aa8e:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801aa90:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aa92:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801aa96:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801aa9a:	4623      	mov	r3, r4
 801aa9c:	4631      	mov	r1, r6
 801aa9e:	f7ff fd69 	bl	801a574 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801aaa2:	e74e      	b.n	801a942 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801aaa4:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801aaa6:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801aaa8:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801aaac:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801aaae:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801aab0:	1400      	asrs	r0, r0, #16
 801aab2:	142d      	asrs	r5, r5, #16
 801aab4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aab6:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801aaba:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801aabe:	fb02 5000 	mla	r0, r2, r0, r5
 801aac2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801aac4:	f815 e000 	ldrb.w	lr, [r5, r0]
 801aac8:	eb05 0c00 	add.w	ip, r5, r0
 801aacc:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801aad0:	eb04 060e 	add.w	r6, r4, lr
 801aad4:	2b00      	cmp	r3, #0
 801aad6:	f000 8097 	beq.w	801ac08 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801aada:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801aade:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801aae2:	4425      	add	r5, r4
 801aae4:	2900      	cmp	r1, #0
 801aae6:	f000 8098 	beq.w	801ac1a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801aaea:	eb0c 0002 	add.w	r0, ip, r2
 801aaee:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801aaf2:	7840      	ldrb	r0, [r0, #1]
 801aaf4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801aaf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801aafc:	4422      	add	r2, r4
 801aafe:	4420      	add	r0, r4
 801ab00:	b29b      	uxth	r3, r3
 801ab02:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ab06:	b289      	uxth	r1, r1
 801ab08:	f895 e000 	ldrb.w	lr, [r5]
 801ab0c:	3703      	adds	r7, #3
 801ab0e:	f109 39ff 	add.w	r9, r9, #4294967295
 801ab12:	fb03 f801 	mul.w	r8, r3, r1
 801ab16:	011b      	lsls	r3, r3, #4
 801ab18:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ab1c:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ab20:	eba3 0308 	sub.w	r3, r3, r8
 801ab24:	b289      	uxth	r1, r1
 801ab26:	b29b      	uxth	r3, r3
 801ab28:	ebac 0c01 	sub.w	ip, ip, r1
 801ab2c:	fb03 fe0e 	mul.w	lr, r3, lr
 801ab30:	fa1f fc8c 	uxth.w	ip, ip
 801ab34:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ab36:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab38:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ab3c:	f892 b000 	ldrb.w	fp, [r2]
 801ab40:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ab44:	f890 b000 	ldrb.w	fp, [r0]
 801ab48:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ab4c:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ab50:	fb1b fb03 	smulbb	fp, fp, r3
 801ab54:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ab58:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ab5a:	fb0e be0a 	mla	lr, lr, sl, fp
 801ab5e:	fa1f fe8e 	uxth.w	lr, lr
 801ab62:	f10e 0b01 	add.w	fp, lr, #1
 801ab66:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ab6a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ab6e:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ab72:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ab76:	f896 b001 	ldrb.w	fp, [r6, #1]
 801ab7a:	fb03 fe0e 	mul.w	lr, r3, lr
 801ab7e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ab80:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ab84:	f892 b001 	ldrb.w	fp, [r2, #1]
 801ab88:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ab8c:	f890 b001 	ldrb.w	fp, [r0, #1]
 801ab90:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ab94:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801ab98:	fb1b fb03 	smulbb	fp, fp, r3
 801ab9c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801aba0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801aba2:	fb0e be0a 	mla	lr, lr, sl, fp
 801aba6:	fa1f fe8e 	uxth.w	lr, lr
 801abaa:	f10e 0b01 	add.w	fp, lr, #1
 801abae:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801abb2:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801abb6:	f807 ec05 	strb.w	lr, [r7, #-5]
 801abba:	78ad      	ldrb	r5, [r5, #2]
 801abbc:	78b6      	ldrb	r6, [r6, #2]
 801abbe:	436b      	muls	r3, r5
 801abc0:	7895      	ldrb	r5, [r2, #2]
 801abc2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801abc4:	fb0c 3306 	mla	r3, ip, r6, r3
 801abc8:	fb01 3305 	mla	r3, r1, r5, r3
 801abcc:	7885      	ldrb	r5, [r0, #2]
 801abce:	fb08 3805 	mla	r8, r8, r5, r3
 801abd2:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801abd6:	fb13 f302 	smulbb	r3, r3, r2
 801abda:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801abde:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801abe0:	fb08 380a 	mla	r8, r8, sl, r3
 801abe4:	fa1f f888 	uxth.w	r8, r8
 801abe8:	f108 0301 	add.w	r3, r8, #1
 801abec:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801abf0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801abf2:	4413      	add	r3, r2
 801abf4:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801abf6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801abfa:	931d      	str	r3, [sp, #116]	@ 0x74
 801abfc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801abfe:	f807 8c04 	strb.w	r8, [r7, #-4]
 801ac02:	4413      	add	r3, r2
 801ac04:	931e      	str	r3, [sp, #120]	@ 0x78
 801ac06:	e6d6      	b.n	801a9b6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801ac08:	b151      	cbz	r1, 801ac20 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801ac0a:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ac0e:	4630      	mov	r0, r6
 801ac10:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ac14:	4422      	add	r2, r4
 801ac16:	4635      	mov	r5, r6
 801ac18:	e772      	b.n	801ab00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ac1a:	4630      	mov	r0, r6
 801ac1c:	4632      	mov	r2, r6
 801ac1e:	e76f      	b.n	801ab00 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801ac20:	4630      	mov	r0, r6
 801ac22:	4632      	mov	r2, r6
 801ac24:	e7f7      	b.n	801ac16 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801ac26:	b013      	add	sp, #76	@ 0x4c
 801ac28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ac2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801ac2c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801ac30:	784c      	ldrb	r4, [r1, #1]
 801ac32:	f891 a002 	ldrb.w	sl, [r1, #2]
 801ac36:	0224      	lsls	r4, r4, #8
 801ac38:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801ac3c:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801ac40:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801ac44:	f891 a000 	ldrb.w	sl, [r1]
 801ac48:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801ac4c:	ea44 040a 	orr.w	r4, r4, sl
 801ac50:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801ac54:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801ac58:	9401      	str	r4, [sp, #4]
 801ac5a:	fb05 c70e 	mla	r7, r5, lr, ip
 801ac5e:	2d00      	cmp	r5, #0
 801ac60:	eb02 0807 	add.w	r8, r2, r7
 801ac64:	db72      	blt.n	801ad4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ac66:	45a9      	cmp	r9, r5
 801ac68:	dd70      	ble.n	801ad4c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801ac6a:	f1bc 0f00 	cmp.w	ip, #0
 801ac6e:	db6b      	blt.n	801ad48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ac70:	45e6      	cmp	lr, ip
 801ac72:	dd69      	ble.n	801ad48 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801ac74:	5dd7      	ldrb	r7, [r2, r7]
 801ac76:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ac7a:	441f      	add	r7, r3
 801ac7c:	f11c 0201 	adds.w	r2, ip, #1
 801ac80:	d467      	bmi.n	801ad52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ac82:	4596      	cmp	lr, r2
 801ac84:	dd65      	ble.n	801ad52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ac86:	2800      	cmp	r0, #0
 801ac88:	d063      	beq.n	801ad52 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801ac8a:	f898 4001 	ldrb.w	r4, [r8, #1]
 801ac8e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ac92:	441c      	add	r4, r3
 801ac94:	3501      	adds	r5, #1
 801ac96:	d460      	bmi.n	801ad5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ac98:	45a9      	cmp	r9, r5
 801ac9a:	dd5e      	ble.n	801ad5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801ac9c:	2e00      	cmp	r6, #0
 801ac9e:	d05c      	beq.n	801ad5a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801aca0:	f1bc 0f00 	cmp.w	ip, #0
 801aca4:	db57      	blt.n	801ad56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801aca6:	45e6      	cmp	lr, ip
 801aca8:	dd55      	ble.n	801ad56 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801acaa:	f818 500e 	ldrb.w	r5, [r8, lr]
 801acae:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801acb2:	441d      	add	r5, r3
 801acb4:	f11c 0201 	adds.w	r2, ip, #1
 801acb8:	d452      	bmi.n	801ad60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801acba:	4596      	cmp	lr, r2
 801acbc:	dd50      	ble.n	801ad60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801acbe:	2800      	cmp	r0, #0
 801acc0:	d04e      	beq.n	801ad60 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801acc2:	44c6      	add	lr, r8
 801acc4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801acc8:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801accc:	4413      	add	r3, r2
 801acce:	b280      	uxth	r0, r0
 801acd0:	f897 8000 	ldrb.w	r8, [r7]
 801acd4:	b2b2      	uxth	r2, r6
 801acd6:	fb00 f602 	mul.w	r6, r0, r2
 801acda:	0100      	lsls	r0, r0, #4
 801acdc:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801ace0:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801ace4:	1b80      	subs	r0, r0, r6
 801ace6:	fa1f fc82 	uxth.w	ip, r2
 801acea:	b282      	uxth	r2, r0
 801acec:	7820      	ldrb	r0, [r4, #0]
 801acee:	ebae 0e0c 	sub.w	lr, lr, ip
 801acf2:	4350      	muls	r0, r2
 801acf4:	fa1f fe8e 	uxth.w	lr, lr
 801acf8:	fb0e 0808 	mla	r8, lr, r8, r0
 801acfc:	7828      	ldrb	r0, [r5, #0]
 801acfe:	fb0c 8800 	mla	r8, ip, r0, r8
 801ad02:	7818      	ldrb	r0, [r3, #0]
 801ad04:	fb06 8000 	mla	r0, r6, r0, r8
 801ad08:	1200      	asrs	r0, r0, #8
 801ad0a:	7008      	strb	r0, [r1, #0]
 801ad0c:	7860      	ldrb	r0, [r4, #1]
 801ad0e:	f897 8001 	ldrb.w	r8, [r7, #1]
 801ad12:	4350      	muls	r0, r2
 801ad14:	fb0e 0808 	mla	r8, lr, r8, r0
 801ad18:	7868      	ldrb	r0, [r5, #1]
 801ad1a:	fb0c 8800 	mla	r8, ip, r0, r8
 801ad1e:	7858      	ldrb	r0, [r3, #1]
 801ad20:	fb06 8000 	mla	r0, r6, r0, r8
 801ad24:	1200      	asrs	r0, r0, #8
 801ad26:	7048      	strb	r0, [r1, #1]
 801ad28:	78a0      	ldrb	r0, [r4, #2]
 801ad2a:	78bf      	ldrb	r7, [r7, #2]
 801ad2c:	4350      	muls	r0, r2
 801ad2e:	78aa      	ldrb	r2, [r5, #2]
 801ad30:	fb0e 0007 	mla	r0, lr, r7, r0
 801ad34:	fb0c 0c02 	mla	ip, ip, r2, r0
 801ad38:	789a      	ldrb	r2, [r3, #2]
 801ad3a:	fb06 c202 	mla	r2, r6, r2, ip
 801ad3e:	1212      	asrs	r2, r2, #8
 801ad40:	708a      	strb	r2, [r1, #2]
 801ad42:	b002      	add	sp, #8
 801ad44:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801ad48:	af01      	add	r7, sp, #4
 801ad4a:	e797      	b.n	801ac7c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801ad4c:	ac01      	add	r4, sp, #4
 801ad4e:	4627      	mov	r7, r4
 801ad50:	e7a0      	b.n	801ac94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ad52:	ac01      	add	r4, sp, #4
 801ad54:	e79e      	b.n	801ac94 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801ad56:	ad01      	add	r5, sp, #4
 801ad58:	e7ac      	b.n	801acb4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801ad5a:	ab01      	add	r3, sp, #4
 801ad5c:	461d      	mov	r5, r3
 801ad5e:	e7b6      	b.n	801acce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801ad60:	ab01      	add	r3, sp, #4
 801ad62:	e7b4      	b.n	801acce <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801ad64 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad68:	b08d      	sub	sp, #52	@ 0x34
 801ad6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ad6e:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801ad72:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ad74:	900b      	str	r0, [sp, #44]	@ 0x2c
 801ad76:	9306      	str	r3, [sp, #24]
 801ad78:	6850      	ldr	r0, [r2, #4]
 801ad7a:	6812      	ldr	r2, [r2, #0]
 801ad7c:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801ad7e:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801ad82:	fb00 1303 	mla	r3, r0, r3, r1
 801ad86:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ad8a:	18d3      	adds	r3, r2, r3
 801ad8c:	9307      	str	r3, [sp, #28]
 801ad8e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	9308      	str	r3, [sp, #32]
 801ad94:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801ad96:	685d      	ldr	r5, [r3, #4]
 801ad98:	3504      	adds	r5, #4
 801ad9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad9c:	2b00      	cmp	r3, #0
 801ad9e:	dc03      	bgt.n	801ada8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ada0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	f340 81e6 	ble.w	801b174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801ada8:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801adaa:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801adae:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801adb2:	1e48      	subs	r0, r1, #1
 801adb4:	1e56      	subs	r6, r2, #1
 801adb6:	9b06      	ldr	r3, [sp, #24]
 801adb8:	2b00      	cmp	r3, #0
 801adba:	f340 80bd 	ble.w	801af38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801adbe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801adc0:	1427      	asrs	r7, r4, #16
 801adc2:	ea4f 4323 	mov.w	r3, r3, asr #16
 801adc6:	d406      	bmi.n	801add6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801adc8:	4287      	cmp	r7, r0
 801adca:	da04      	bge.n	801add6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801adcc:	2b00      	cmp	r3, #0
 801adce:	db02      	blt.n	801add6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801add0:	42b3      	cmp	r3, r6
 801add2:	f2c0 80b2 	blt.w	801af3a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801add6:	3701      	adds	r7, #1
 801add8:	f100 80a1 	bmi.w	801af1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801addc:	42b9      	cmp	r1, r7
 801adde:	f2c0 809e 	blt.w	801af1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ade2:	3301      	adds	r3, #1
 801ade4:	f100 809b 	bmi.w	801af1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801ade8:	429a      	cmp	r2, r3
 801adea:	f2c0 8098 	blt.w	801af1e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801adee:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801adf2:	f1bb 0f00 	cmp.w	fp, #0
 801adf6:	f340 80bf 	ble.w	801af78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801adfa:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801adfc:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801adfe:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ae00:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801ae04:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801ae08:	1420      	asrs	r0, r4, #16
 801ae0a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801ae0c:	ea4f 4723 	mov.w	r7, r3, asr #16
 801ae10:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801ae14:	6892      	ldr	r2, [r2, #8]
 801ae16:	f100 8103 	bmi.w	801b020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ae1a:	f102 3eff 	add.w	lr, r2, #4294967295
 801ae1e:	4570      	cmp	r0, lr
 801ae20:	f280 80fe 	bge.w	801b020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ae24:	2f00      	cmp	r7, #0
 801ae26:	f2c0 80fb 	blt.w	801b020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ae2a:	f10c 3eff 	add.w	lr, ip, #4294967295
 801ae2e:	4577      	cmp	r7, lr
 801ae30:	f280 80f6 	bge.w	801b020 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801ae34:	b212      	sxth	r2, r2
 801ae36:	fb07 0002 	mla	r0, r7, r2, r0
 801ae3a:	9f08      	ldr	r7, [sp, #32]
 801ae3c:	f817 8000 	ldrb.w	r8, [r7, r0]
 801ae40:	eb07 0e00 	add.w	lr, r7, r0
 801ae44:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801ae48:	eb05 0c08 	add.w	ip, r5, r8
 801ae4c:	2b00      	cmp	r3, #0
 801ae4e:	f000 80d8 	beq.w	801b002 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801ae52:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801ae56:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801ae5a:	442f      	add	r7, r5
 801ae5c:	2900      	cmp	r1, #0
 801ae5e:	f000 80d9 	beq.w	801b014 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801ae62:	eb0e 0002 	add.w	r0, lr, r2
 801ae66:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801ae6a:	7840      	ldrb	r0, [r0, #1]
 801ae6c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ae70:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ae74:	442a      	add	r2, r5
 801ae76:	4428      	add	r0, r5
 801ae78:	b29b      	uxth	r3, r3
 801ae7a:	f815 a008 	ldrb.w	sl, [r5, r8]
 801ae7e:	b289      	uxth	r1, r1
 801ae80:	f897 8000 	ldrb.w	r8, [r7]
 801ae84:	fb03 f901 	mul.w	r9, r3, r1
 801ae88:	011b      	lsls	r3, r3, #4
 801ae8a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801ae8e:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801ae92:	eba3 0309 	sub.w	r3, r3, r9
 801ae96:	b289      	uxth	r1, r1
 801ae98:	b29b      	uxth	r3, r3
 801ae9a:	ebae 0e01 	sub.w	lr, lr, r1
 801ae9e:	fb03 f808 	mul.w	r8, r3, r8
 801aea2:	fa1f fe8e 	uxth.w	lr, lr
 801aea6:	fb0e 880a 	mla	r8, lr, sl, r8
 801aeaa:	f892 a000 	ldrb.w	sl, [r2]
 801aeae:	fb01 880a 	mla	r8, r1, sl, r8
 801aeb2:	f890 a000 	ldrb.w	sl, [r0]
 801aeb6:	fb09 880a 	mla	r8, r9, sl, r8
 801aeba:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aebe:	f886 8000 	strb.w	r8, [r6]
 801aec2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801aec6:	f89c a001 	ldrb.w	sl, [ip, #1]
 801aeca:	fb03 f808 	mul.w	r8, r3, r8
 801aece:	fb0e 880a 	mla	r8, lr, sl, r8
 801aed2:	f892 a001 	ldrb.w	sl, [r2, #1]
 801aed6:	fb01 880a 	mla	r8, r1, sl, r8
 801aeda:	f890 a001 	ldrb.w	sl, [r0, #1]
 801aede:	fb09 880a 	mla	r8, r9, sl, r8
 801aee2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801aee6:	f886 8001 	strb.w	r8, [r6, #1]
 801aeea:	78bf      	ldrb	r7, [r7, #2]
 801aeec:	f89c c002 	ldrb.w	ip, [ip, #2]
 801aef0:	437b      	muls	r3, r7
 801aef2:	7892      	ldrb	r2, [r2, #2]
 801aef4:	fb0e 330c 	mla	r3, lr, ip, r3
 801aef8:	fb01 3102 	mla	r1, r1, r2, r3
 801aefc:	7882      	ldrb	r2, [r0, #2]
 801aefe:	fb09 1902 	mla	r9, r9, r2, r1
 801af02:	ea4f 2929 	mov.w	r9, r9, asr #8
 801af06:	f886 9002 	strb.w	r9, [r6, #2]
 801af0a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801af0c:	3603      	adds	r6, #3
 801af0e:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801af10:	f10b 3bff 	add.w	fp, fp, #4294967295
 801af14:	441c      	add	r4, r3
 801af16:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801af18:	4413      	add	r3, r2
 801af1a:	9318      	str	r3, [sp, #96]	@ 0x60
 801af1c:	e769      	b.n	801adf2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801af1e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801af20:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801af22:	441c      	add	r4, r3
 801af24:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801af26:	443b      	add	r3, r7
 801af28:	9318      	str	r3, [sp, #96]	@ 0x60
 801af2a:	9b06      	ldr	r3, [sp, #24]
 801af2c:	3b01      	subs	r3, #1
 801af2e:	9306      	str	r3, [sp, #24]
 801af30:	9b07      	ldr	r3, [sp, #28]
 801af32:	3303      	adds	r3, #3
 801af34:	9307      	str	r3, [sp, #28]
 801af36:	e73e      	b.n	801adb6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801af38:	d026      	beq.n	801af88 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801af3a:	9b06      	ldr	r3, [sp, #24]
 801af3c:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801af3e:	3b01      	subs	r3, #1
 801af40:	fb00 4003 	mla	r0, r0, r3, r4
 801af44:	1400      	asrs	r0, r0, #16
 801af46:	f53f af52 	bmi.w	801adee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801af4a:	3901      	subs	r1, #1
 801af4c:	4288      	cmp	r0, r1
 801af4e:	f6bf af4e 	bge.w	801adee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801af52:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801af54:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801af56:	fb01 0303 	mla	r3, r1, r3, r0
 801af5a:	141b      	asrs	r3, r3, #16
 801af5c:	f53f af47 	bmi.w	801adee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801af60:	3a01      	subs	r2, #1
 801af62:	4293      	cmp	r3, r2
 801af64:	f6bf af43 	bge.w	801adee <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801af68:	9b07      	ldr	r3, [sp, #28]
 801af6a:	f8dd a018 	ldr.w	sl, [sp, #24]
 801af6e:	f103 0803 	add.w	r8, r3, #3
 801af72:	f1ba 0f00 	cmp.w	sl, #0
 801af76:	dc71      	bgt.n	801b05c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801af78:	9b06      	ldr	r3, [sp, #24]
 801af7a:	9a07      	ldr	r2, [sp, #28]
 801af7c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801af80:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801af84:	441a      	add	r2, r3
 801af86:	9207      	str	r2, [sp, #28]
 801af88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801af8a:	2b00      	cmp	r3, #0
 801af8c:	f340 80f2 	ble.w	801b174 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801af90:	ee30 0a04 	vadd.f32	s0, s0, s8
 801af94:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801af96:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801af9a:	eeb0 6a62 	vmov.f32	s12, s5
 801af9e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801afa2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801afa6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afaa:	ee16 4a10 	vmov	r4, s12
 801afae:	eeb0 6a43 	vmov.f32	s12, s6
 801afb2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801afb6:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801afba:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801afbe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801afc2:	ee77 2a62 	vsub.f32	s5, s14, s5
 801afc6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801afca:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801afce:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801afd2:	ee12 2a90 	vmov	r2, s5
 801afd6:	eef0 2a47 	vmov.f32	s5, s14
 801afda:	fb92 f3f3 	sdiv	r3, r2, r3
 801afde:	ee13 2a10 	vmov	r2, s6
 801afe2:	9319      	str	r3, [sp, #100]	@ 0x64
 801afe4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801afe6:	eeb0 3a67 	vmov.f32	s6, s15
 801afea:	fb92 f3f3 	sdiv	r3, r2, r3
 801afee:	931a      	str	r3, [sp, #104]	@ 0x68
 801aff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801aff2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801aff4:	3b01      	subs	r3, #1
 801aff6:	9309      	str	r3, [sp, #36]	@ 0x24
 801aff8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801affa:	bf08      	it	eq
 801affc:	4613      	moveq	r3, r2
 801affe:	9306      	str	r3, [sp, #24]
 801b000:	e6cb      	b.n	801ad9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801b002:	b151      	cbz	r1, 801b01a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801b004:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801b008:	4660      	mov	r0, ip
 801b00a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b00e:	442a      	add	r2, r5
 801b010:	4667      	mov	r7, ip
 801b012:	e731      	b.n	801ae78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b014:	4660      	mov	r0, ip
 801b016:	4662      	mov	r2, ip
 801b018:	e72e      	b.n	801ae78 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801b01a:	4660      	mov	r0, ip
 801b01c:	4662      	mov	r2, ip
 801b01e:	e7f7      	b.n	801b010 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801b020:	f110 0e01 	adds.w	lr, r0, #1
 801b024:	f53f af71 	bmi.w	801af0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b028:	4572      	cmp	r2, lr
 801b02a:	f6ff af6e 	blt.w	801af0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b02e:	f117 0e01 	adds.w	lr, r7, #1
 801b032:	f53f af6a 	bmi.w	801af0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b036:	45f4      	cmp	ip, lr
 801b038:	f6ff af67 	blt.w	801af0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b03c:	b212      	sxth	r2, r2
 801b03e:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801b042:	fa0f f38c 	sxth.w	r3, ip
 801b046:	9200      	str	r2, [sp, #0]
 801b048:	4631      	mov	r1, r6
 801b04a:	9a08      	ldr	r2, [sp, #32]
 801b04c:	9301      	str	r3, [sp, #4]
 801b04e:	462b      	mov	r3, r5
 801b050:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801b054:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801b056:	f7ff fde9 	bl	801ac2c <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801b05a:	e756      	b.n	801af0a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801b05c:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b05e:	1426      	asrs	r6, r4, #16
 801b060:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801b062:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801b066:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b06a:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b06c:	1400      	asrs	r0, r0, #16
 801b06e:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b072:	fb02 6000 	mla	r0, r2, r0, r6
 801b076:	9e08      	ldr	r6, [sp, #32]
 801b078:	f816 e000 	ldrb.w	lr, [r6, r0]
 801b07c:	eb06 0c00 	add.w	ip, r6, r0
 801b080:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b084:	eb05 070e 	add.w	r7, r5, lr
 801b088:	2b00      	cmp	r3, #0
 801b08a:	d064      	beq.n	801b156 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801b08c:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801b090:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b094:	442e      	add	r6, r5
 801b096:	2900      	cmp	r1, #0
 801b098:	d066      	beq.n	801b168 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801b09a:	eb0c 0002 	add.w	r0, ip, r2
 801b09e:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b0a2:	7840      	ldrb	r0, [r0, #1]
 801b0a4:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b0a8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b0ac:	442a      	add	r2, r5
 801b0ae:	4428      	add	r0, r5
 801b0b0:	b29b      	uxth	r3, r3
 801b0b2:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801b0b6:	b289      	uxth	r1, r1
 801b0b8:	f896 e000 	ldrb.w	lr, [r6]
 801b0bc:	f108 0803 	add.w	r8, r8, #3
 801b0c0:	f10a 3aff 	add.w	sl, sl, #4294967295
 801b0c4:	fb03 f901 	mul.w	r9, r3, r1
 801b0c8:	011b      	lsls	r3, r3, #4
 801b0ca:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b0ce:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801b0d2:	eba3 0309 	sub.w	r3, r3, r9
 801b0d6:	b289      	uxth	r1, r1
 801b0d8:	b29b      	uxth	r3, r3
 801b0da:	ebac 0c01 	sub.w	ip, ip, r1
 801b0de:	fb03 fe0e 	mul.w	lr, r3, lr
 801b0e2:	fa1f fc8c 	uxth.w	ip, ip
 801b0e6:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b0ea:	f892 b000 	ldrb.w	fp, [r2]
 801b0ee:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b0f2:	f890 b000 	ldrb.w	fp, [r0]
 801b0f6:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b0fa:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b0fe:	f808 ec06 	strb.w	lr, [r8, #-6]
 801b102:	f896 e001 	ldrb.w	lr, [r6, #1]
 801b106:	f897 b001 	ldrb.w	fp, [r7, #1]
 801b10a:	fb03 fe0e 	mul.w	lr, r3, lr
 801b10e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801b112:	f892 b001 	ldrb.w	fp, [r2, #1]
 801b116:	fb01 ee0b 	mla	lr, r1, fp, lr
 801b11a:	f890 b001 	ldrb.w	fp, [r0, #1]
 801b11e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801b122:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801b126:	f808 ec05 	strb.w	lr, [r8, #-5]
 801b12a:	78b6      	ldrb	r6, [r6, #2]
 801b12c:	78bf      	ldrb	r7, [r7, #2]
 801b12e:	4373      	muls	r3, r6
 801b130:	7896      	ldrb	r6, [r2, #2]
 801b132:	7882      	ldrb	r2, [r0, #2]
 801b134:	fb0c 3307 	mla	r3, ip, r7, r3
 801b138:	fb01 3306 	mla	r3, r1, r6, r3
 801b13c:	fb09 3902 	mla	r9, r9, r2, r3
 801b140:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b142:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b144:	441c      	add	r4, r3
 801b146:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801b148:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b14c:	4413      	add	r3, r2
 801b14e:	f808 9c04 	strb.w	r9, [r8, #-4]
 801b152:	9318      	str	r3, [sp, #96]	@ 0x60
 801b154:	e70d      	b.n	801af72 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801b156:	b151      	cbz	r1, 801b16e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801b158:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801b15c:	4638      	mov	r0, r7
 801b15e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b162:	442a      	add	r2, r5
 801b164:	463e      	mov	r6, r7
 801b166:	e7a3      	b.n	801b0b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b168:	4638      	mov	r0, r7
 801b16a:	463a      	mov	r2, r7
 801b16c:	e7a0      	b.n	801b0b0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801b16e:	4638      	mov	r0, r7
 801b170:	463a      	mov	r2, r7
 801b172:	e7f7      	b.n	801b164 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801b174:	b00d      	add	sp, #52	@ 0x34
 801b176:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801b17a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801b17a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b17e:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801b182:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801b186:	2d00      	cmp	r5, #0
 801b188:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801b18c:	fb05 700c 	mla	r0, r5, ip, r7
 801b190:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801b194:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801b198:	eb02 0800 	add.w	r8, r2, r0
 801b19c:	f2c0 8118 	blt.w	801b3d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b1a0:	45a9      	cmp	r9, r5
 801b1a2:	f340 8115 	ble.w	801b3d0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801b1a6:	2f00      	cmp	r7, #0
 801b1a8:	f2c0 8110 	blt.w	801b3cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b1ac:	45bc      	cmp	ip, r7
 801b1ae:	f340 810d 	ble.w	801b3cc <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801b1b2:	5c12      	ldrb	r2, [r2, r0]
 801b1b4:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801b1b8:	1c7a      	adds	r2, r7, #1
 801b1ba:	f100 810c 	bmi.w	801b3d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b1be:	4594      	cmp	ip, r2
 801b1c0:	f340 8109 	ble.w	801b3d6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801b1c4:	2c00      	cmp	r4, #0
 801b1c6:	f000 8108 	beq.w	801b3da <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801b1ca:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b1ce:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801b1d2:	3501      	adds	r5, #1
 801b1d4:	f100 8105 	bmi.w	801b3e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b1d8:	45a9      	cmp	r9, r5
 801b1da:	f340 8102 	ble.w	801b3e2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801b1de:	f1be 0f00 	cmp.w	lr, #0
 801b1e2:	f000 8101 	beq.w	801b3e8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801b1e6:	2f00      	cmp	r7, #0
 801b1e8:	f2c0 80f9 	blt.w	801b3de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b1ec:	45bc      	cmp	ip, r7
 801b1ee:	f340 80f6 	ble.w	801b3de <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801b1f2:	f818 200c 	ldrb.w	r2, [r8, ip]
 801b1f6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801b1fa:	3701      	adds	r7, #1
 801b1fc:	f100 80f7 	bmi.w	801b3ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b200:	45bc      	cmp	ip, r7
 801b202:	f340 80f4 	ble.w	801b3ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801b206:	2c00      	cmp	r4, #0
 801b208:	f000 80f3 	beq.w	801b3f2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801b20c:	44c4      	add	ip, r8
 801b20e:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801b212:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801b216:	fa1f fc84 	uxth.w	ip, r4
 801b21a:	fa1f f48e 	uxth.w	r4, lr
 801b21e:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801b222:	fb04 fe0c 	mul.w	lr, r4, ip
 801b226:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801b22a:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801b22e:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801b232:	ebac 070e 	sub.w	r7, ip, lr
 801b236:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801b23a:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801b23e:	b2a4      	uxth	r4, r4
 801b240:	b2bf      	uxth	r7, r7
 801b242:	1b1b      	subs	r3, r3, r4
 801b244:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801b248:	fb07 fc0a 	mul.w	ip, r7, sl
 801b24c:	b29b      	uxth	r3, r3
 801b24e:	fb03 cc0b 	mla	ip, r3, fp, ip
 801b252:	9300      	str	r3, [sp, #0]
 801b254:	fb04 cc09 	mla	ip, r4, r9, ip
 801b258:	fb0e cc08 	mla	ip, lr, r8, ip
 801b25c:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b260:	9301      	str	r3, [sp, #4]
 801b262:	2b00      	cmp	r3, #0
 801b264:	f000 80af 	beq.w	801b3c6 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801b268:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801b26c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b270:	fb0b fc0c 	mul.w	ip, fp, ip
 801b274:	fb0b f606 	mul.w	r6, fp, r6
 801b278:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801b27c:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801b280:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801b284:	44dc      	add	ip, fp
 801b286:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801b28a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b28e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b292:	fb0a fb0b 	mul.w	fp, sl, fp
 801b296:	fb0a fa00 	mul.w	sl, sl, r0
 801b29a:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801b29e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801b2a2:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801b2a6:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801b2aa:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801b2ae:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b2b2:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801b2b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b2ba:	0a36      	lsrs	r6, r6, #8
 801b2bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b2c0:	44dc      	add	ip, fp
 801b2c2:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801b2c6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801b2ca:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801b2ce:	fb09 fb0b 	mul.w	fp, r9, fp
 801b2d2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b2d6:	fb09 f905 	mul.w	r9, r9, r5
 801b2da:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801b2de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b2e2:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801b2e6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b2ea:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b2ee:	fb0c fc07 	mul.w	ip, ip, r7
 801b2f2:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801b2f6:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801b2fa:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801b2fe:	4458      	add	r0, fp
 801b300:	fb08 f505 	mul.w	r5, r8, r5
 801b304:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b308:	fb08 f802 	mul.w	r8, r8, r2
 801b30c:	0a00      	lsrs	r0, r0, #8
 801b30e:	0a2a      	lsrs	r2, r5, #8
 801b310:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801b314:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801b318:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801b31c:	4415      	add	r5, r2
 801b31e:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801b322:	0a2d      	lsrs	r5, r5, #8
 801b324:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801b328:	9a00      	ldr	r2, [sp, #0]
 801b32a:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801b32e:	fb03 cc02 	mla	ip, r3, r2, ip
 801b332:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801b336:	9b01      	ldr	r3, [sp, #4]
 801b338:	fb05 c50e 	mla	r5, r5, lr, ip
 801b33c:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801b340:	fb00 5004 	mla	r0, r0, r4, r5
 801b344:	0a00      	lsrs	r0, r0, #8
 801b346:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801b34a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801b34e:	4378      	muls	r0, r7
 801b350:	fb02 0006 	mla	r0, r2, r6, r0
 801b354:	fb0e 0e08 	mla	lr, lr, r8, r0
 801b358:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801b35c:	fb04 e000 	mla	r0, r4, r0, lr
 801b360:	0a00      	lsrs	r0, r0, #8
 801b362:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801b366:	4328      	orrs	r0, r5
 801b368:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801b36c:	b2ad      	uxth	r5, r5
 801b36e:	b2c4      	uxtb	r4, r0
 801b370:	436b      	muls	r3, r5
 801b372:	fb14 f405 	smulbb	r4, r4, r5
 801b376:	1c5a      	adds	r2, r3, #1
 801b378:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801b37c:	780b      	ldrb	r3, [r1, #0]
 801b37e:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801b382:	b2d2      	uxtb	r2, r2
 801b384:	fb03 4302 	mla	r3, r3, r2, r4
 801b388:	b29b      	uxth	r3, r3
 801b38a:	1c5c      	adds	r4, r3, #1
 801b38c:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b390:	784c      	ldrb	r4, [r1, #1]
 801b392:	fb14 f402 	smulbb	r4, r4, r2
 801b396:	121b      	asrs	r3, r3, #8
 801b398:	700b      	strb	r3, [r1, #0]
 801b39a:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801b39e:	fb03 4305 	mla	r3, r3, r5, r4
 801b3a2:	b29b      	uxth	r3, r3
 801b3a4:	1c5c      	adds	r4, r3, #1
 801b3a6:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801b3aa:	0c04      	lsrs	r4, r0, #16
 801b3ac:	7888      	ldrb	r0, [r1, #2]
 801b3ae:	121b      	asrs	r3, r3, #8
 801b3b0:	fb10 f002 	smulbb	r0, r0, r2
 801b3b4:	704b      	strb	r3, [r1, #1]
 801b3b6:	fb04 0005 	mla	r0, r4, r5, r0
 801b3ba:	b280      	uxth	r0, r0
 801b3bc:	1c43      	adds	r3, r0, #1
 801b3be:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801b3c2:	1200      	asrs	r0, r0, #8
 801b3c4:	7088      	strb	r0, [r1, #2]
 801b3c6:	b003      	add	sp, #12
 801b3c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b3cc:	2600      	movs	r6, #0
 801b3ce:	e6f3      	b.n	801b1b8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801b3d0:	2000      	movs	r0, #0
 801b3d2:	4606      	mov	r6, r0
 801b3d4:	e6fd      	b.n	801b1d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b3d6:	2000      	movs	r0, #0
 801b3d8:	e6fb      	b.n	801b1d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b3da:	4620      	mov	r0, r4
 801b3dc:	e6f9      	b.n	801b1d2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801b3de:	2500      	movs	r5, #0
 801b3e0:	e70b      	b.n	801b1fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801b3e2:	2200      	movs	r2, #0
 801b3e4:	4615      	mov	r5, r2
 801b3e6:	e716      	b.n	801b216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b3e8:	4672      	mov	r2, lr
 801b3ea:	4675      	mov	r5, lr
 801b3ec:	e713      	b.n	801b216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b3ee:	2200      	movs	r2, #0
 801b3f0:	e711      	b.n	801b216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801b3f2:	4622      	mov	r2, r4
 801b3f4:	e70f      	b.n	801b216 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801b3f6 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b3f6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b3fa:	b09f      	sub	sp, #124	@ 0x7c
 801b3fc:	921b      	str	r2, [sp, #108]	@ 0x6c
 801b3fe:	9309      	str	r3, [sp, #36]	@ 0x24
 801b400:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801b402:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801b406:	901d      	str	r0, [sp, #116]	@ 0x74
 801b408:	931c      	str	r3, [sp, #112]	@ 0x70
 801b40a:	6850      	ldr	r0, [r2, #4]
 801b40c:	9119      	str	r1, [sp, #100]	@ 0x64
 801b40e:	6812      	ldr	r2, [r2, #0]
 801b410:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801b412:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801b416:	fb00 1303 	mla	r3, r0, r3, r1
 801b41a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b41e:	18d3      	adds	r3, r2, r3
 801b420:	930c      	str	r3, [sp, #48]	@ 0x30
 801b422:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b424:	681b      	ldr	r3, [r3, #0]
 801b426:	9312      	str	r3, [sp, #72]	@ 0x48
 801b428:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b42a:	685e      	ldr	r6, [r3, #4]
 801b42c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801b430:	3604      	adds	r6, #4
 801b432:	930d      	str	r3, [sp, #52]	@ 0x34
 801b434:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b436:	2b00      	cmp	r3, #0
 801b438:	dc03      	bgt.n	801b442 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b43a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801b43c:	2b00      	cmp	r3, #0
 801b43e:	f340 8378 	ble.w	801bb32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b442:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b444:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b448:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b44c:	1e48      	subs	r0, r1, #1
 801b44e:	1e57      	subs	r7, r2, #1
 801b450:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b452:	2b00      	cmp	r3, #0
 801b454:	f340 818c 	ble.w	801b770 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801b458:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b45a:	142b      	asrs	r3, r5, #16
 801b45c:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801b460:	d406      	bmi.n	801b470 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b462:	4584      	cmp	ip, r0
 801b464:	da04      	bge.n	801b470 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b466:	2b00      	cmp	r3, #0
 801b468:	db02      	blt.n	801b470 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801b46a:	42bb      	cmp	r3, r7
 801b46c:	f2c0 8181 	blt.w	801b772 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801b470:	f11c 0c01 	adds.w	ip, ip, #1
 801b474:	f100 816f 	bmi.w	801b756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b478:	4561      	cmp	r1, ip
 801b47a:	f2c0 816c 	blt.w	801b756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b47e:	3301      	adds	r3, #1
 801b480:	f100 8169 	bmi.w	801b756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b484:	429a      	cmp	r2, r3
 801b486:	f2c0 8166 	blt.w	801b756 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801b48a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b48c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b48e:	931a      	str	r3, [sp, #104]	@ 0x68
 801b490:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b492:	2b00      	cmp	r3, #0
 801b494:	f340 818c 	ble.w	801b7b0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801b498:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b49a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801b49e:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801b4a2:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b4a6:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b4a8:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801b4ac:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b4ae:	141b      	asrs	r3, r3, #16
 801b4b0:	f100 81d0 	bmi.w	801b854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b4b4:	f100 38ff 	add.w	r8, r0, #4294967295
 801b4b8:	4543      	cmp	r3, r8
 801b4ba:	f280 81cb 	bge.w	801b854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b4be:	f1bc 0f00 	cmp.w	ip, #0
 801b4c2:	f2c0 81c7 	blt.w	801b854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b4c6:	f10e 38ff 	add.w	r8, lr, #4294967295
 801b4ca:	45c4      	cmp	ip, r8
 801b4cc:	f280 81c2 	bge.w	801b854 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801b4d0:	b200      	sxth	r0, r0
 801b4d2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b4d4:	fb0c 3300 	mla	r3, ip, r0, r3
 801b4d8:	eb04 0803 	add.w	r8, r4, r3
 801b4dc:	5ce3      	ldrb	r3, [r4, r3]
 801b4de:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b4e2:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801b4e6:	2a00      	cmp	r2, #0
 801b4e8:	f000 81a9 	beq.w	801b83e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801b4ec:	f898 c001 	ldrb.w	ip, [r8, #1]
 801b4f0:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801b4f4:	940e      	str	r4, [sp, #56]	@ 0x38
 801b4f6:	0e24      	lsrs	r4, r4, #24
 801b4f8:	9415      	str	r4, [sp, #84]	@ 0x54
 801b4fa:	b179      	cbz	r1, 801b51c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b4fc:	eb08 0c00 	add.w	ip, r8, r0
 801b500:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b504:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b508:	900a      	str	r0, [sp, #40]	@ 0x28
 801b50a:	0e00      	lsrs	r0, r0, #24
 801b50c:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b50e:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801b512:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b516:	900f      	str	r0, [sp, #60]	@ 0x3c
 801b518:	0e00      	lsrs	r0, r0, #24
 801b51a:	9016      	str	r0, [sp, #88]	@ 0x58
 801b51c:	b292      	uxth	r2, r2
 801b51e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801b520:	b289      	uxth	r1, r1
 801b522:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b524:	fb02 f901 	mul.w	r9, r2, r1
 801b528:	0112      	lsls	r2, r2, #4
 801b52a:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b52e:	eba2 0809 	sub.w	r8, r2, r9
 801b532:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b536:	b289      	uxth	r1, r1
 801b538:	fa1f f888 	uxth.w	r8, r8
 801b53c:	1a52      	subs	r2, r2, r1
 801b53e:	fb08 f000 	mul.w	r0, r8, r0
 801b542:	b292      	uxth	r2, r2
 801b544:	fb02 000e 	mla	r0, r2, lr, r0
 801b548:	fb01 0004 	mla	r0, r1, r4, r0
 801b54c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b54e:	fb09 0004 	mla	r0, r9, r4, r0
 801b552:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801b556:	2800      	cmp	r0, #0
 801b558:	f000 80f2 	beq.w	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b55c:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801b560:	d01b      	beq.n	801b59a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801b562:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b566:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b56a:	fb0e fa0a 	mul.w	sl, lr, sl
 801b56e:	fb0e fe03 	mul.w	lr, lr, r3
 801b572:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b576:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b57a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801b57e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b582:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801b586:	4453      	add	r3, sl
 801b588:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b58c:	0a1b      	lsrs	r3, r3, #8
 801b58e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801b592:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b596:	ea43 030c 	orr.w	r3, r3, ip
 801b59a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b59c:	2cff      	cmp	r4, #255	@ 0xff
 801b59e:	d021      	beq.n	801b5e4 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801b5a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b5a2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b5a6:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b5a8:	fb04 fb0b 	mul.w	fp, r4, fp
 801b5ac:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b5ae:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b5b2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801b5b4:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b5b8:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b5bc:	fb04 fa0a 	mul.w	sl, r4, sl
 801b5c0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b5c4:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b5c8:	44de      	add	lr, fp
 801b5ca:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b5ce:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b5d2:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b5d6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b5da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b5de:	ea4e 040a 	orr.w	r4, lr, sl
 801b5e2:	940e      	str	r4, [sp, #56]	@ 0x38
 801b5e4:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b5e6:	2cff      	cmp	r4, #255	@ 0xff
 801b5e8:	d021      	beq.n	801b62e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801b5ea:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b5ec:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b5f0:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b5f2:	fb04 fb0b 	mul.w	fp, r4, fp
 801b5f6:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b5f8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b5fc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801b5fe:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b602:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b606:	fb04 fa0a 	mul.w	sl, r4, sl
 801b60a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b60e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b612:	44de      	add	lr, fp
 801b614:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b618:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b61c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b620:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b624:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b628:	ea4e 040a 	orr.w	r4, lr, sl
 801b62c:	940a      	str	r4, [sp, #40]	@ 0x28
 801b62e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b630:	2cff      	cmp	r4, #255	@ 0xff
 801b632:	d021      	beq.n	801b678 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b634:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b636:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801b63a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b63c:	fb04 fb0b 	mul.w	fp, r4, fp
 801b640:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b642:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b646:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801b648:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801b64c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801b650:	fb04 fa0a 	mul.w	sl, r4, sl
 801b654:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b658:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801b65c:	44de      	add	lr, fp
 801b65e:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801b662:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801b666:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b66a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801b66e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b672:	ea4e 040a 	orr.w	r4, lr, sl
 801b676:	940f      	str	r4, [sp, #60]	@ 0x3c
 801b678:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b67a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801b67e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b682:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801b686:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801b688:	fb08 fc0c 	mul.w	ip, r8, ip
 801b68c:	fb02 cc0e 	mla	ip, r2, lr, ip
 801b690:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b694:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801b696:	fb01 cc0e 	mla	ip, r1, lr, ip
 801b69a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801b69e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801b6a0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801b6a4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801b6a8:	fb08 f80e 	mul.w	r8, r8, lr
 801b6ac:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b6b0:	fb02 8303 	mla	r3, r2, r3, r8
 801b6b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b6b6:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b6ba:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801b6be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801b6c0:	fb01 330a 	mla	r3, r1, sl, r3
 801b6c4:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801b6c8:	fb09 3901 	mla	r9, r9, r1, r3
 801b6cc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b6ce:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b6d0:	4343      	muls	r3, r0
 801b6d2:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801b6d6:	1c58      	adds	r0, r3, #1
 801b6d8:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801b6dc:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801b6e0:	ea4c 0c09 	orr.w	ip, ip, r9
 801b6e4:	783b      	ldrb	r3, [r7, #0]
 801b6e6:	fa5f f28c 	uxtb.w	r2, ip
 801b6ea:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801b6ee:	fb12 f201 	smulbb	r2, r2, r1
 801b6f2:	b2c0      	uxtb	r0, r0
 801b6f4:	fb03 2300 	mla	r3, r3, r0, r2
 801b6f8:	b29b      	uxth	r3, r3
 801b6fa:	1c5a      	adds	r2, r3, #1
 801b6fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b700:	787a      	ldrb	r2, [r7, #1]
 801b702:	fb12 f200 	smulbb	r2, r2, r0
 801b706:	121b      	asrs	r3, r3, #8
 801b708:	703b      	strb	r3, [r7, #0]
 801b70a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801b70e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801b712:	fb03 2301 	mla	r3, r3, r1, r2
 801b716:	b29b      	uxth	r3, r3
 801b718:	1c5a      	adds	r2, r3, #1
 801b71a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801b71e:	121b      	asrs	r3, r3, #8
 801b720:	707b      	strb	r3, [r7, #1]
 801b722:	78bb      	ldrb	r3, [r7, #2]
 801b724:	fb13 f000 	smulbb	r0, r3, r0
 801b728:	fb0c 0c01 	mla	ip, ip, r1, r0
 801b72c:	fa1f fc8c 	uxth.w	ip, ip
 801b730:	f10c 0301 	add.w	r3, ip, #1
 801b734:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801b738:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b73c:	f887 c002 	strb.w	ip, [r7, #2]
 801b740:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b742:	3703      	adds	r7, #3
 801b744:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801b746:	441a      	add	r2, r3
 801b748:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b74a:	441d      	add	r5, r3
 801b74c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801b74e:	9229      	str	r2, [sp, #164]	@ 0xa4
 801b750:	3b01      	subs	r3, #1
 801b752:	931a      	str	r3, [sp, #104]	@ 0x68
 801b754:	e69c      	b.n	801b490 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801b756:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801b758:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b75a:	441c      	add	r4, r3
 801b75c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801b75e:	441d      	add	r5, r3
 801b760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b762:	9429      	str	r4, [sp, #164]	@ 0xa4
 801b764:	3b01      	subs	r3, #1
 801b766:	9309      	str	r3, [sp, #36]	@ 0x24
 801b768:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b76a:	3303      	adds	r3, #3
 801b76c:	930c      	str	r3, [sp, #48]	@ 0x30
 801b76e:	e66f      	b.n	801b450 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b770:	d026      	beq.n	801b7c0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801b772:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b774:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801b776:	3b01      	subs	r3, #1
 801b778:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b77a:	fb00 4003 	mla	r0, r0, r3, r4
 801b77e:	1400      	asrs	r0, r0, #16
 801b780:	f53f ae83 	bmi.w	801b48a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b784:	3901      	subs	r1, #1
 801b786:	4288      	cmp	r0, r1
 801b788:	f6bf ae7f 	bge.w	801b48a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b78c:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801b78e:	fb01 5303 	mla	r3, r1, r3, r5
 801b792:	141b      	asrs	r3, r3, #16
 801b794:	f53f ae79 	bmi.w	801b48a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b798:	3a01      	subs	r2, #1
 801b79a:	4293      	cmp	r3, r2
 801b79c:	f6bf ae75 	bge.w	801b48a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b7a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b7a2:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801b7a6:	f103 0e03 	add.w	lr, r3, #3
 801b7aa:	f1bb 0f00 	cmp.w	fp, #0
 801b7ae:	dc71      	bgt.n	801b894 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801b7b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b7b2:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801b7b6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b7b8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801b7bc:	4423      	add	r3, r4
 801b7be:	930c      	str	r3, [sp, #48]	@ 0x30
 801b7c0:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b7c2:	2b00      	cmp	r3, #0
 801b7c4:	f340 81b5 	ble.w	801bb32 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801b7c8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b7cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b7ce:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b7d2:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b7d6:	eef0 6a62 	vmov.f32	s13, s5
 801b7da:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b7de:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b7e2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7e6:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801b7ea:	eef0 6a43 	vmov.f32	s13, s6
 801b7ee:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b7f2:	ee16 5a90 	vmov	r5, s13
 801b7f6:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b7fa:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b7fe:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b802:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b806:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b80a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b80e:	ee12 2a90 	vmov	r2, s5
 801b812:	eef0 2a47 	vmov.f32	s5, s14
 801b816:	fb92 f3f3 	sdiv	r3, r2, r3
 801b81a:	ee13 2a10 	vmov	r2, s6
 801b81e:	932b      	str	r3, [sp, #172]	@ 0xac
 801b820:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b822:	eeb0 3a67 	vmov.f32	s6, s15
 801b826:	fb92 f3f3 	sdiv	r3, r2, r3
 801b82a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801b82c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b82e:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801b830:	3b01      	subs	r3, #1
 801b832:	9319      	str	r3, [sp, #100]	@ 0x64
 801b834:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801b836:	bf08      	it	eq
 801b838:	4613      	moveq	r3, r2
 801b83a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b83c:	e5fa      	b.n	801b434 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b83e:	2900      	cmp	r1, #0
 801b840:	f43f ae6c 	beq.w	801b51c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b844:	f818 0000 	ldrb.w	r0, [r8, r0]
 801b848:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801b84c:	900a      	str	r0, [sp, #40]	@ 0x28
 801b84e:	0e00      	lsrs	r0, r0, #24
 801b850:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b852:	e663      	b.n	801b51c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801b854:	f113 0801 	adds.w	r8, r3, #1
 801b858:	f53f af72 	bmi.w	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b85c:	4540      	cmp	r0, r8
 801b85e:	f6ff af6f 	blt.w	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b862:	f11c 0801 	adds.w	r8, ip, #1
 801b866:	f53f af6b 	bmi.w	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b86a:	45c6      	cmp	lr, r8
 801b86c:	f6ff af68 	blt.w	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b870:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801b872:	b200      	sxth	r0, r0
 801b874:	9302      	str	r3, [sp, #8]
 801b876:	fa0f f38e 	sxth.w	r3, lr
 801b87a:	9000      	str	r0, [sp, #0]
 801b87c:	9301      	str	r3, [sp, #4]
 801b87e:	4633      	mov	r3, r6
 801b880:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801b882:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801b886:	e9cd c203 	strd	ip, r2, [sp, #12]
 801b88a:	4639      	mov	r1, r7
 801b88c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b88e:	f7ff fc74 	bl	801b17a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801b892:	e755      	b.n	801b740 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801b894:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801b896:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801b89a:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801b89c:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801b8a0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801b8a2:	1427      	asrs	r7, r4, #16
 801b8a4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801b8a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b8aa:	142b      	asrs	r3, r5, #16
 801b8ac:	fb01 7303 	mla	r3, r1, r3, r7
 801b8b0:	18e7      	adds	r7, r4, r3
 801b8b2:	5ce3      	ldrb	r3, [r4, r3]
 801b8b4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801b8b8:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b8bc:	2a00      	cmp	r2, #0
 801b8be:	f000 812e 	beq.w	801bb1e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801b8c2:	f897 8001 	ldrb.w	r8, [r7, #1]
 801b8c6:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801b8ca:	9410      	str	r4, [sp, #64]	@ 0x40
 801b8cc:	0e24      	lsrs	r4, r4, #24
 801b8ce:	9417      	str	r4, [sp, #92]	@ 0x5c
 801b8d0:	b170      	cbz	r0, 801b8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801b8d2:	eb07 0801 	add.w	r8, r7, r1
 801b8d6:	5c79      	ldrb	r1, [r7, r1]
 801b8d8:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b8dc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801b8de:	0e09      	lsrs	r1, r1, #24
 801b8e0:	9114      	str	r1, [sp, #80]	@ 0x50
 801b8e2:	f898 1001 	ldrb.w	r1, [r8, #1]
 801b8e6:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801b8ea:	9111      	str	r1, [sp, #68]	@ 0x44
 801b8ec:	0e09      	lsrs	r1, r1, #24
 801b8ee:	9118      	str	r1, [sp, #96]	@ 0x60
 801b8f0:	b292      	uxth	r2, r2
 801b8f2:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801b8f4:	b280      	uxth	r0, r0
 801b8f6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b8f8:	fb02 f900 	mul.w	r9, r2, r0
 801b8fc:	0112      	lsls	r2, r2, #4
 801b8fe:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801b902:	eba2 0809 	sub.w	r8, r2, r9
 801b906:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801b90a:	b280      	uxth	r0, r0
 801b90c:	fa1f f888 	uxth.w	r8, r8
 801b910:	1a12      	subs	r2, r2, r0
 801b912:	fb08 f101 	mul.w	r1, r8, r1
 801b916:	b292      	uxth	r2, r2
 801b918:	fb02 110c 	mla	r1, r2, ip, r1
 801b91c:	fb00 1104 	mla	r1, r0, r4, r1
 801b920:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b922:	fb09 1104 	mla	r1, r9, r4, r1
 801b926:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801b92a:	2900      	cmp	r1, #0
 801b92c:	f000 80ec 	beq.w	801bb08 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801b930:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801b934:	d019      	beq.n	801b96a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801b936:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801b93a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801b93e:	fb0c fa0a 	mul.w	sl, ip, sl
 801b942:	fb0c fc03 	mul.w	ip, ip, r3
 801b946:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801b94a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801b94e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801b952:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b956:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801b95a:	4453      	add	r3, sl
 801b95c:	0a3f      	lsrs	r7, r7, #8
 801b95e:	0a1b      	lsrs	r3, r3, #8
 801b960:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801b964:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801b968:	433b      	orrs	r3, r7
 801b96a:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b96c:	2cff      	cmp	r4, #255	@ 0xff
 801b96e:	d020      	beq.n	801b9b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801b970:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b972:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b976:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b978:	4367      	muls	r7, r4
 801b97a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801b97c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b980:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b984:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801b986:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b98a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b98e:	fb04 fa0a 	mul.w	sl, r4, sl
 801b992:	44bc      	add	ip, r7
 801b994:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b998:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b99c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b9a0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b9a4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b9a8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b9ac:	ea4c 040a 	orr.w	r4, ip, sl
 801b9b0:	9410      	str	r4, [sp, #64]	@ 0x40
 801b9b2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b9b4:	2cff      	cmp	r4, #255	@ 0xff
 801b9b6:	d020      	beq.n	801b9fa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801b9b8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9ba:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801b9be:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b9c0:	4367      	muls	r7, r4
 801b9c2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801b9c4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801b9c8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801b9cc:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801b9ce:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801b9d2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b9d6:	fb04 fa0a 	mul.w	sl, r4, sl
 801b9da:	44bc      	add	ip, r7
 801b9dc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801b9e0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801b9e4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801b9e8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801b9ec:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801b9f0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801b9f4:	ea4c 040a 	orr.w	r4, ip, sl
 801b9f8:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b9fa:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801b9fc:	2cff      	cmp	r4, #255	@ 0xff
 801b9fe:	d020      	beq.n	801ba42 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801ba00:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba02:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ba06:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ba08:	4367      	muls	r7, r4
 801ba0a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba0c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801ba10:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ba14:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801ba16:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801ba1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ba1e:	fb04 fa0a 	mul.w	sl, r4, sl
 801ba22:	44bc      	add	ip, r7
 801ba24:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801ba28:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba2c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801ba30:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ba34:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ba38:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ba3c:	ea4c 040a 	orr.w	r4, ip, sl
 801ba40:	9411      	str	r4, [sp, #68]	@ 0x44
 801ba42:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ba44:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801ba48:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ba4c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801ba50:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ba52:	fb08 f707 	mul.w	r7, r8, r7
 801ba56:	fb02 770c 	mla	r7, r2, ip, r7
 801ba5a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ba5e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ba60:	fb00 770c 	mla	r7, r0, ip, r7
 801ba64:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ba68:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ba6a:	fb09 770c 	mla	r7, r9, ip, r7
 801ba6e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801ba72:	fb08 f80c 	mul.w	r8, r8, ip
 801ba76:	0a3f      	lsrs	r7, r7, #8
 801ba78:	fb02 8303 	mla	r3, r2, r3, r8
 801ba7c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ba7e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801ba82:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801ba86:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801ba88:	fb00 330a 	mla	r3, r0, sl, r3
 801ba8c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801ba90:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ba92:	fb09 3c0c 	mla	ip, r9, ip, r3
 801ba96:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ba98:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ba9c:	434b      	muls	r3, r1
 801ba9e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801baa2:	1c59      	adds	r1, r3, #1
 801baa4:	ea47 070c 	orr.w	r7, r7, ip
 801baa8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801baac:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801bab0:	b2fa      	uxtb	r2, r7
 801bab2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801bab6:	fb12 f200 	smulbb	r2, r2, r0
 801baba:	b2c9      	uxtb	r1, r1
 801babc:	fb03 2301 	mla	r3, r3, r1, r2
 801bac0:	b29b      	uxth	r3, r3
 801bac2:	1c5a      	adds	r2, r3, #1
 801bac4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bac8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801bacc:	fb12 f201 	smulbb	r2, r2, r1
 801bad0:	121b      	asrs	r3, r3, #8
 801bad2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801bad6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801bada:	0c3f      	lsrs	r7, r7, #16
 801badc:	fb03 2300 	mla	r3, r3, r0, r2
 801bae0:	b29b      	uxth	r3, r3
 801bae2:	1c5a      	adds	r2, r3, #1
 801bae4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bae8:	121b      	asrs	r3, r3, #8
 801baea:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801baee:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801baf2:	fb13 f101 	smulbb	r1, r3, r1
 801baf6:	fb07 1700 	mla	r7, r7, r0, r1
 801bafa:	b2bf      	uxth	r7, r7
 801bafc:	1c7b      	adds	r3, r7, #1
 801bafe:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801bb02:	123f      	asrs	r7, r7, #8
 801bb04:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801bb08:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801bb0a:	f10e 0e03 	add.w	lr, lr, #3
 801bb0e:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bb10:	f10b 3bff 	add.w	fp, fp, #4294967295
 801bb14:	441a      	add	r2, r3
 801bb16:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bb18:	9229      	str	r2, [sp, #164]	@ 0xa4
 801bb1a:	441d      	add	r5, r3
 801bb1c:	e645      	b.n	801b7aa <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801bb1e:	2800      	cmp	r0, #0
 801bb20:	f43f aee6 	beq.w	801b8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801bb24:	5c79      	ldrb	r1, [r7, r1]
 801bb26:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bb2a:	910b      	str	r1, [sp, #44]	@ 0x2c
 801bb2c:	0e09      	lsrs	r1, r1, #24
 801bb2e:	9114      	str	r1, [sp, #80]	@ 0x50
 801bb30:	e6de      	b.n	801b8f0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801bb32:	b01f      	add	sp, #124	@ 0x7c
 801bb34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb38 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801bb38:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bb3c:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801bb40:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801bb44:	2d00      	cmp	r5, #0
 801bb46:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801bb4a:	fb05 700e 	mla	r0, r5, lr, r7
 801bb4e:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801bb52:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801bb56:	eb02 0800 	add.w	r8, r2, r0
 801bb5a:	f2c0 8105 	blt.w	801bd68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bb5e:	45a9      	cmp	r9, r5
 801bb60:	f340 8102 	ble.w	801bd68 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801bb64:	2f00      	cmp	r7, #0
 801bb66:	f2c0 80fd 	blt.w	801bd64 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801bb6a:	45be      	cmp	lr, r7
 801bb6c:	f340 80fa 	ble.w	801bd64 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801bb70:	5c12      	ldrb	r2, [r2, r0]
 801bb72:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801bb76:	1c7a      	adds	r2, r7, #1
 801bb78:	f100 80f9 	bmi.w	801bd6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801bb7c:	4596      	cmp	lr, r2
 801bb7e:	f340 80f6 	ble.w	801bd6e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801bb82:	2c00      	cmp	r4, #0
 801bb84:	f000 80f5 	beq.w	801bd72 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801bb88:	f898 2001 	ldrb.w	r2, [r8, #1]
 801bb8c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801bb90:	3501      	adds	r5, #1
 801bb92:	f100 80f2 	bmi.w	801bd7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bb96:	45a9      	cmp	r9, r5
 801bb98:	f340 80ef 	ble.w	801bd7a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801bb9c:	f1bc 0f00 	cmp.w	ip, #0
 801bba0:	f000 80ee 	beq.w	801bd80 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801bba4:	2f00      	cmp	r7, #0
 801bba6:	f2c0 80e6 	blt.w	801bd76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bbaa:	45be      	cmp	lr, r7
 801bbac:	f340 80e3 	ble.w	801bd76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801bbb0:	f818 200e 	ldrb.w	r2, [r8, lr]
 801bbb4:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801bbb8:	3701      	adds	r7, #1
 801bbba:	f100 80e4 	bmi.w	801bd86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bbbe:	45be      	cmp	lr, r7
 801bbc0:	f340 80e1 	ble.w	801bd86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801bbc4:	2c00      	cmp	r4, #0
 801bbc6:	f000 80e0 	beq.w	801bd8a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801bbca:	44c6      	add	lr, r8
 801bbcc:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bbd0:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801bbd4:	b2a3      	uxth	r3, r4
 801bbd6:	fa1f fc8c 	uxth.w	ip, ip
 801bbda:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801bbde:	fb0c fe03 	mul.w	lr, ip, r3
 801bbe2:	011b      	lsls	r3, r3, #4
 801bbe4:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801bbe8:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801bbec:	eba3 070e 	sub.w	r7, r3, lr
 801bbf0:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801bbf4:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801bbf8:	fa1f f48c 	uxth.w	r4, ip
 801bbfc:	b2bf      	uxth	r7, r7
 801bbfe:	1b1b      	subs	r3, r3, r4
 801bc00:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801bc04:	fb07 fc0a 	mul.w	ip, r7, sl
 801bc08:	b29b      	uxth	r3, r3
 801bc0a:	fb03 cc0b 	mla	ip, r3, fp, ip
 801bc0e:	9300      	str	r3, [sp, #0]
 801bc10:	fb04 cc09 	mla	ip, r4, r9, ip
 801bc14:	fb0e cc08 	mla	ip, lr, r8, ip
 801bc18:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801bc1c:	9301      	str	r3, [sp, #4]
 801bc1e:	2b00      	cmp	r3, #0
 801bc20:	f000 809d 	beq.w	801bd5e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801bc24:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801bc28:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bc2c:	fb0b fc0c 	mul.w	ip, fp, ip
 801bc30:	fb0b f606 	mul.w	r6, fp, r6
 801bc34:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801bc38:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801bc3c:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801bc40:	44dc      	add	ip, fp
 801bc42:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801bc46:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801bc4a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc4e:	fb0a fb0b 	mul.w	fp, sl, fp
 801bc52:	fb0a fa00 	mul.w	sl, sl, r0
 801bc56:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801bc5a:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801bc5e:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801bc62:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801bc66:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801bc6a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bc6e:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801bc72:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc76:	0a36      	lsrs	r6, r6, #8
 801bc78:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bc7c:	44dc      	add	ip, fp
 801bc7e:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801bc82:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801bc86:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801bc8a:	fb09 fb0b 	mul.w	fp, r9, fp
 801bc8e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bc92:	fb09 f905 	mul.w	r9, r9, r5
 801bc96:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801bc9a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801bc9e:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801bca2:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bca6:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bcaa:	fb0c fc07 	mul.w	ip, ip, r7
 801bcae:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801bcb2:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801bcb6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801bcba:	4458      	add	r0, fp
 801bcbc:	fb08 f505 	mul.w	r5, r8, r5
 801bcc0:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801bcc4:	fb08 f802 	mul.w	r8, r8, r2
 801bcc8:	0a00      	lsrs	r0, r0, #8
 801bcca:	0a2a      	lsrs	r2, r5, #8
 801bccc:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801bcd0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801bcd4:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801bcd8:	4415      	add	r5, r2
 801bcda:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801bcde:	0a2d      	lsrs	r5, r5, #8
 801bce0:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801bce4:	9a00      	ldr	r2, [sp, #0]
 801bce6:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801bcea:	fb03 cc02 	mla	ip, r3, r2, ip
 801bcee:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801bcf2:	9b01      	ldr	r3, [sp, #4]
 801bcf4:	fb05 c50e 	mla	r5, r5, lr, ip
 801bcf8:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801bcfc:	43db      	mvns	r3, r3
 801bcfe:	fb00 5004 	mla	r0, r0, r4, r5
 801bd02:	b2db      	uxtb	r3, r3
 801bd04:	0a00      	lsrs	r0, r0, #8
 801bd06:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801bd0a:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801bd0e:	4378      	muls	r0, r7
 801bd10:	fb02 0006 	mla	r0, r2, r6, r0
 801bd14:	780a      	ldrb	r2, [r1, #0]
 801bd16:	fb0e 0e08 	mla	lr, lr, r8, r0
 801bd1a:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801bd1e:	fb04 e000 	mla	r0, r4, r0, lr
 801bd22:	fb02 f403 	mul.w	r4, r2, r3
 801bd26:	0a00      	lsrs	r0, r0, #8
 801bd28:	1c62      	adds	r2, r4, #1
 801bd2a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801bd2e:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801bd32:	4328      	orrs	r0, r5
 801bd34:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801bd38:	700a      	strb	r2, [r1, #0]
 801bd3a:	784a      	ldrb	r2, [r1, #1]
 801bd3c:	435a      	muls	r2, r3
 801bd3e:	1c54      	adds	r4, r2, #1
 801bd40:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801bd44:	0a02      	lsrs	r2, r0, #8
 801bd46:	0c00      	lsrs	r0, r0, #16
 801bd48:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801bd4c:	704a      	strb	r2, [r1, #1]
 801bd4e:	788a      	ldrb	r2, [r1, #2]
 801bd50:	4353      	muls	r3, r2
 801bd52:	1c5a      	adds	r2, r3, #1
 801bd54:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801bd58:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801bd5c:	7088      	strb	r0, [r1, #2]
 801bd5e:	b003      	add	sp, #12
 801bd60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bd64:	2600      	movs	r6, #0
 801bd66:	e706      	b.n	801bb76 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801bd68:	2000      	movs	r0, #0
 801bd6a:	4606      	mov	r6, r0
 801bd6c:	e710      	b.n	801bb90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bd6e:	2000      	movs	r0, #0
 801bd70:	e70e      	b.n	801bb90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bd72:	4620      	mov	r0, r4
 801bd74:	e70c      	b.n	801bb90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801bd76:	2500      	movs	r5, #0
 801bd78:	e71e      	b.n	801bbb8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801bd7a:	2200      	movs	r2, #0
 801bd7c:	4615      	mov	r5, r2
 801bd7e:	e729      	b.n	801bbd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bd80:	4662      	mov	r2, ip
 801bd82:	4665      	mov	r5, ip
 801bd84:	e726      	b.n	801bbd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bd86:	2200      	movs	r2, #0
 801bd88:	e724      	b.n	801bbd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801bd8a:	4622      	mov	r2, r4
 801bd8c:	e722      	b.n	801bbd4 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801bd8e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bd8e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd92:	b09b      	sub	sp, #108	@ 0x6c
 801bd94:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bd98:	9218      	str	r2, [sp, #96]	@ 0x60
 801bd9a:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801bd9c:	9019      	str	r0, [sp, #100]	@ 0x64
 801bd9e:	9116      	str	r1, [sp, #88]	@ 0x58
 801bda0:	6850      	ldr	r0, [r2, #4]
 801bda2:	9307      	str	r3, [sp, #28]
 801bda4:	6812      	ldr	r2, [r2, #0]
 801bda6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801bda8:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801bdac:	fb00 1303 	mla	r3, r0, r3, r1
 801bdb0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bdb4:	18d3      	adds	r3, r2, r3
 801bdb6:	930a      	str	r3, [sp, #40]	@ 0x28
 801bdb8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bdba:	681b      	ldr	r3, [r3, #0]
 801bdbc:	930f      	str	r3, [sp, #60]	@ 0x3c
 801bdbe:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bdc0:	685e      	ldr	r6, [r3, #4]
 801bdc2:	3604      	adds	r6, #4
 801bdc4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bdc6:	2b00      	cmp	r3, #0
 801bdc8:	dc03      	bgt.n	801bdd2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bdca:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	f340 834f 	ble.w	801c470 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801bdd2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801bdd4:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bdd8:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bddc:	1e48      	subs	r0, r1, #1
 801bdde:	1e57      	subs	r7, r2, #1
 801bde0:	9b07      	ldr	r3, [sp, #28]
 801bde2:	2b00      	cmp	r3, #0
 801bde4:	f340 8178 	ble.w	801c0d8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801bde8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801bdea:	142b      	asrs	r3, r5, #16
 801bdec:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801bdf0:	d406      	bmi.n	801be00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdf2:	4584      	cmp	ip, r0
 801bdf4:	da04      	bge.n	801be00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdf6:	2b00      	cmp	r3, #0
 801bdf8:	db02      	blt.n	801be00 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bdfa:	42bb      	cmp	r3, r7
 801bdfc:	f2c0 816d 	blt.w	801c0da <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801be00:	f11c 0c01 	adds.w	ip, ip, #1
 801be04:	f100 815b 	bmi.w	801c0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801be08:	4561      	cmp	r1, ip
 801be0a:	f2c0 8158 	blt.w	801c0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801be0e:	3301      	adds	r3, #1
 801be10:	f100 8155 	bmi.w	801c0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801be14:	429a      	cmp	r2, r3
 801be16:	f2c0 8152 	blt.w	801c0be <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801be1a:	9b07      	ldr	r3, [sp, #28]
 801be1c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801be1e:	9317      	str	r3, [sp, #92]	@ 0x5c
 801be20:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801be22:	2b00      	cmp	r3, #0
 801be24:	f340 8178 	ble.w	801c118 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801be28:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801be2a:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801be2e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801be32:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801be36:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801be38:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801be3c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801be3e:	141b      	asrs	r3, r3, #16
 801be40:	f100 81ba 	bmi.w	801c1b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801be44:	f101 38ff 	add.w	r8, r1, #4294967295
 801be48:	4543      	cmp	r3, r8
 801be4a:	f280 81b5 	bge.w	801c1b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801be4e:	f1bc 0f00 	cmp.w	ip, #0
 801be52:	f2c0 81b1 	blt.w	801c1b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801be56:	f10e 38ff 	add.w	r8, lr, #4294967295
 801be5a:	45c4      	cmp	ip, r8
 801be5c:	f280 81ac 	bge.w	801c1b8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801be60:	b209      	sxth	r1, r1
 801be62:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801be64:	fb0c 3301 	mla	r3, ip, r1, r3
 801be68:	eb04 0803 	add.w	r8, r4, r3
 801be6c:	5ce3      	ldrb	r3, [r4, r3]
 801be6e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801be72:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801be76:	2a00      	cmp	r2, #0
 801be78:	f000 8193 	beq.w	801c1a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801be7c:	f898 c001 	ldrb.w	ip, [r8, #1]
 801be80:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801be84:	940b      	str	r4, [sp, #44]	@ 0x2c
 801be86:	0e24      	lsrs	r4, r4, #24
 801be88:	9412      	str	r4, [sp, #72]	@ 0x48
 801be8a:	b178      	cbz	r0, 801beac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801be8c:	eb08 0c01 	add.w	ip, r8, r1
 801be90:	f818 1001 	ldrb.w	r1, [r8, r1]
 801be94:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801be98:	9108      	str	r1, [sp, #32]
 801be9a:	0e09      	lsrs	r1, r1, #24
 801be9c:	9110      	str	r1, [sp, #64]	@ 0x40
 801be9e:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801bea2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801bea6:	910c      	str	r1, [sp, #48]	@ 0x30
 801bea8:	0e09      	lsrs	r1, r1, #24
 801beaa:	9113      	str	r1, [sp, #76]	@ 0x4c
 801beac:	b292      	uxth	r2, r2
 801beae:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801beb0:	b280      	uxth	r0, r0
 801beb2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801beb4:	fb02 f900 	mul.w	r9, r2, r0
 801beb8:	0112      	lsls	r2, r2, #4
 801beba:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801bebe:	eba2 0809 	sub.w	r8, r2, r9
 801bec2:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801bec6:	b280      	uxth	r0, r0
 801bec8:	fa1f f888 	uxth.w	r8, r8
 801becc:	1a12      	subs	r2, r2, r0
 801bece:	fb08 f101 	mul.w	r1, r8, r1
 801bed2:	b292      	uxth	r2, r2
 801bed4:	fb02 110e 	mla	r1, r2, lr, r1
 801bed8:	fb00 1104 	mla	r1, r0, r4, r1
 801bedc:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bede:	fb09 1104 	mla	r1, r9, r4, r1
 801bee2:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801bee6:	2900      	cmp	r1, #0
 801bee8:	f000 80de 	beq.w	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801beec:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801bef0:	d01b      	beq.n	801bf2a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801bef2:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801bef6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801befa:	fb0e fa0a 	mul.w	sl, lr, sl
 801befe:	fb0e fe03 	mul.w	lr, lr, r3
 801bf02:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801bf06:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801bf0a:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801bf0e:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bf12:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801bf16:	4453      	add	r3, sl
 801bf18:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801bf1c:	0a1b      	lsrs	r3, r3, #8
 801bf1e:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801bf22:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801bf26:	ea43 030c 	orr.w	r3, r3, ip
 801bf2a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bf2c:	2cff      	cmp	r4, #255	@ 0xff
 801bf2e:	d021      	beq.n	801bf74 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801bf30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bf32:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801bf36:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bf38:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf3c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bf3e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bf42:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801bf44:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf48:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bf4c:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf50:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf54:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bf58:	44de      	add	lr, fp
 801bf5a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bf5e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bf62:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bf66:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf6a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bf6e:	ea4e 040a 	orr.w	r4, lr, sl
 801bf72:	940b      	str	r4, [sp, #44]	@ 0x2c
 801bf74:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bf76:	2cff      	cmp	r4, #255	@ 0xff
 801bf78:	d021      	beq.n	801bfbe <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801bf7a:	9c08      	ldr	r4, [sp, #32]
 801bf7c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801bf80:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bf82:	fb04 fb0b 	mul.w	fp, r4, fp
 801bf86:	9c08      	ldr	r4, [sp, #32]
 801bf88:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bf8c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801bf8e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bf92:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bf96:	fb04 fa0a 	mul.w	sl, r4, sl
 801bf9a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bf9e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bfa2:	44de      	add	lr, fp
 801bfa4:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bfa8:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bfac:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bfb0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bfb4:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801bfb8:	ea4e 040a 	orr.w	r4, lr, sl
 801bfbc:	9408      	str	r4, [sp, #32]
 801bfbe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bfc0:	2cff      	cmp	r4, #255	@ 0xff
 801bfc2:	d021      	beq.n	801c008 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801bfc4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bfc6:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801bfca:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bfcc:	fb04 fb0b 	mul.w	fp, r4, fp
 801bfd0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bfd2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801bfd6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bfd8:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801bfdc:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801bfe0:	fb04 fa0a 	mul.w	sl, r4, sl
 801bfe4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bfe8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801bfec:	44de      	add	lr, fp
 801bfee:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801bff2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801bff6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801bffa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801bffe:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c002:	ea4e 040a 	orr.w	r4, lr, sl
 801c006:	940c      	str	r4, [sp, #48]	@ 0x30
 801c008:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c00a:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c00e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c012:	43c9      	mvns	r1, r1
 801c014:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c018:	9c08      	ldr	r4, [sp, #32]
 801c01a:	b2c9      	uxtb	r1, r1
 801c01c:	fb08 fc0c 	mul.w	ip, r8, ip
 801c020:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c024:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c028:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801c02a:	fb00 cc0e 	mla	ip, r0, lr, ip
 801c02e:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c032:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c034:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c038:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c03c:	fb08 f80e 	mul.w	r8, r8, lr
 801c040:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c044:	fb02 8303 	mla	r3, r2, r3, r8
 801c048:	9a08      	ldr	r2, [sp, #32]
 801c04a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c04e:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c052:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801c054:	fb00 330a 	mla	r3, r0, sl, r3
 801c058:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801c05c:	fb09 3900 	mla	r9, r9, r0, r3
 801c060:	783b      	ldrb	r3, [r7, #0]
 801c062:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c066:	fb03 f201 	mul.w	r2, r3, r1
 801c06a:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c06e:	1c53      	adds	r3, r2, #1
 801c070:	ea4c 0c09 	orr.w	ip, ip, r9
 801c074:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c078:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801c07c:	703b      	strb	r3, [r7, #0]
 801c07e:	787b      	ldrb	r3, [r7, #1]
 801c080:	434b      	muls	r3, r1
 801c082:	1c5a      	adds	r2, r3, #1
 801c084:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c088:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801c08c:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c090:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801c094:	707b      	strb	r3, [r7, #1]
 801c096:	78bb      	ldrb	r3, [r7, #2]
 801c098:	4359      	muls	r1, r3
 801c09a:	1c4b      	adds	r3, r1, #1
 801c09c:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801c0a0:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801c0a4:	f887 c002 	strb.w	ip, [r7, #2]
 801c0a8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c0aa:	3703      	adds	r7, #3
 801c0ac:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c0ae:	441a      	add	r2, r3
 801c0b0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c0b2:	441d      	add	r5, r3
 801c0b4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801c0b6:	9225      	str	r2, [sp, #148]	@ 0x94
 801c0b8:	3b01      	subs	r3, #1
 801c0ba:	9317      	str	r3, [sp, #92]	@ 0x5c
 801c0bc:	e6b0      	b.n	801be20 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801c0be:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c0c0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c0c2:	441c      	add	r4, r3
 801c0c4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c0c6:	441d      	add	r5, r3
 801c0c8:	9b07      	ldr	r3, [sp, #28]
 801c0ca:	9425      	str	r4, [sp, #148]	@ 0x94
 801c0cc:	3b01      	subs	r3, #1
 801c0ce:	9307      	str	r3, [sp, #28]
 801c0d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c0d2:	3303      	adds	r3, #3
 801c0d4:	930a      	str	r3, [sp, #40]	@ 0x28
 801c0d6:	e683      	b.n	801bde0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801c0d8:	d026      	beq.n	801c128 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801c0da:	9b07      	ldr	r3, [sp, #28]
 801c0dc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801c0de:	3b01      	subs	r3, #1
 801c0e0:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c0e2:	fb00 4003 	mla	r0, r0, r3, r4
 801c0e6:	1400      	asrs	r0, r0, #16
 801c0e8:	f53f ae97 	bmi.w	801be1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c0ec:	3901      	subs	r1, #1
 801c0ee:	4288      	cmp	r0, r1
 801c0f0:	f6bf ae93 	bge.w	801be1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c0f4:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801c0f6:	fb01 5303 	mla	r3, r1, r3, r5
 801c0fa:	141b      	asrs	r3, r3, #16
 801c0fc:	f53f ae8d 	bmi.w	801be1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c100:	3a01      	subs	r2, #1
 801c102:	4293      	cmp	r3, r2
 801c104:	f6bf ae89 	bge.w	801be1a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801c108:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c10a:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801c10e:	f103 0e03 	add.w	lr, r3, #3
 801c112:	f1bb 0f00 	cmp.w	fp, #0
 801c116:	dc6d      	bgt.n	801c1f4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801c118:	9b07      	ldr	r3, [sp, #28]
 801c11a:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c11e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c120:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c124:	4423      	add	r3, r4
 801c126:	930a      	str	r3, [sp, #40]	@ 0x28
 801c128:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c12a:	2b00      	cmp	r3, #0
 801c12c:	f340 81a0 	ble.w	801c470 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801c130:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c134:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c136:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c13a:	eeb0 6a62 	vmov.f32	s12, s5
 801c13e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801c142:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c146:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c14a:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801c14e:	eeb0 6a43 	vmov.f32	s12, s6
 801c152:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801c156:	ee16 5a10 	vmov	r5, s12
 801c15a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c15e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c162:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c166:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c16a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c16e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c172:	ee12 2a90 	vmov	r2, s5
 801c176:	eef0 2a47 	vmov.f32	s5, s14
 801c17a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c17e:	ee13 2a10 	vmov	r2, s6
 801c182:	9327      	str	r3, [sp, #156]	@ 0x9c
 801c184:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c186:	eeb0 3a67 	vmov.f32	s6, s15
 801c18a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c18e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801c190:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801c192:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801c194:	3b01      	subs	r3, #1
 801c196:	9316      	str	r3, [sp, #88]	@ 0x58
 801c198:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801c19a:	bf08      	it	eq
 801c19c:	4613      	moveq	r3, r2
 801c19e:	9307      	str	r3, [sp, #28]
 801c1a0:	e610      	b.n	801bdc4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801c1a2:	2800      	cmp	r0, #0
 801c1a4:	f43f ae82 	beq.w	801beac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c1a8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801c1ac:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c1b0:	9108      	str	r1, [sp, #32]
 801c1b2:	0e09      	lsrs	r1, r1, #24
 801c1b4:	9110      	str	r1, [sp, #64]	@ 0x40
 801c1b6:	e679      	b.n	801beac <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801c1b8:	f113 0801 	adds.w	r8, r3, #1
 801c1bc:	f53f af74 	bmi.w	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c1c0:	4541      	cmp	r1, r8
 801c1c2:	f6ff af71 	blt.w	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c1c6:	f11c 0801 	adds.w	r8, ip, #1
 801c1ca:	f53f af6d 	bmi.w	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c1ce:	45c6      	cmp	lr, r8
 801c1d0:	f6ff af6a 	blt.w	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c1d4:	b209      	sxth	r1, r1
 801c1d6:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801c1da:	fa0f f38e 	sxth.w	r3, lr
 801c1de:	9100      	str	r1, [sp, #0]
 801c1e0:	4639      	mov	r1, r7
 801c1e2:	9301      	str	r3, [sp, #4]
 801c1e4:	4633      	mov	r3, r6
 801c1e6:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801c1ea:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c1ec:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801c1ee:	f7ff fca3 	bl	801bb38 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801c1f2:	e759      	b.n	801c0a8 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801c1f4:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801c1f6:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c1fa:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801c1fc:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c200:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c202:	1427      	asrs	r7, r4, #16
 801c204:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c206:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c20a:	142b      	asrs	r3, r5, #16
 801c20c:	fb01 7303 	mla	r3, r1, r3, r7
 801c210:	18e7      	adds	r7, r4, r3
 801c212:	5ce3      	ldrb	r3, [r4, r3]
 801c214:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c218:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c21c:	2a00      	cmp	r2, #0
 801c21e:	f000 811d 	beq.w	801c45c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801c222:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c226:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801c22a:	940d      	str	r4, [sp, #52]	@ 0x34
 801c22c:	0e24      	lsrs	r4, r4, #24
 801c22e:	9414      	str	r4, [sp, #80]	@ 0x50
 801c230:	b170      	cbz	r0, 801c250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c232:	eb07 0801 	add.w	r8, r7, r1
 801c236:	5c79      	ldrb	r1, [r7, r1]
 801c238:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c23c:	9109      	str	r1, [sp, #36]	@ 0x24
 801c23e:	0e09      	lsrs	r1, r1, #24
 801c240:	9111      	str	r1, [sp, #68]	@ 0x44
 801c242:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c246:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c24a:	910e      	str	r1, [sp, #56]	@ 0x38
 801c24c:	0e09      	lsrs	r1, r1, #24
 801c24e:	9115      	str	r1, [sp, #84]	@ 0x54
 801c250:	b292      	uxth	r2, r2
 801c252:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c254:	b280      	uxth	r0, r0
 801c256:	fb02 f900 	mul.w	r9, r2, r0
 801c25a:	0112      	lsls	r2, r2, #4
 801c25c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c260:	eba2 0809 	sub.w	r8, r2, r9
 801c264:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801c268:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801c26a:	b280      	uxth	r0, r0
 801c26c:	fa1f f888 	uxth.w	r8, r8
 801c270:	1a09      	subs	r1, r1, r0
 801c272:	fb08 f202 	mul.w	r2, r8, r2
 801c276:	b289      	uxth	r1, r1
 801c278:	fb01 220c 	mla	r2, r1, ip, r2
 801c27c:	fb00 2204 	mla	r2, r0, r4, r2
 801c280:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c282:	fb09 2204 	mla	r2, r9, r4, r2
 801c286:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801c28a:	2a00      	cmp	r2, #0
 801c28c:	f000 80db 	beq.w	801c446 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801c290:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c294:	d019      	beq.n	801c2ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801c296:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c29a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c29e:	fb0c fa0a 	mul.w	sl, ip, sl
 801c2a2:	fb0c fc03 	mul.w	ip, ip, r3
 801c2a6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c2aa:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c2ae:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c2b2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c2b6:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c2ba:	4453      	add	r3, sl
 801c2bc:	0a3f      	lsrs	r7, r7, #8
 801c2be:	0a1b      	lsrs	r3, r3, #8
 801c2c0:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c2c4:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c2c8:	433b      	orrs	r3, r7
 801c2ca:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c2cc:	2cff      	cmp	r4, #255	@ 0xff
 801c2ce:	d020      	beq.n	801c312 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801c2d0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c2d2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c2d6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c2d8:	4367      	muls	r7, r4
 801c2da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c2dc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c2e0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c2e4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c2e6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c2ea:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c2ee:	fb04 fa0a 	mul.w	sl, r4, sl
 801c2f2:	44bc      	add	ip, r7
 801c2f4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c2f8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c2fc:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c300:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c304:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c308:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c30c:	ea4c 040a 	orr.w	r4, ip, sl
 801c310:	940d      	str	r4, [sp, #52]	@ 0x34
 801c312:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c314:	2cff      	cmp	r4, #255	@ 0xff
 801c316:	d020      	beq.n	801c35a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801c318:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c31a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c31e:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c320:	4367      	muls	r7, r4
 801c322:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c324:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c328:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c32c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c32e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c332:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c336:	fb04 fa0a 	mul.w	sl, r4, sl
 801c33a:	44bc      	add	ip, r7
 801c33c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c340:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c344:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c348:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c34c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c350:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c354:	ea4c 040a 	orr.w	r4, ip, sl
 801c358:	9409      	str	r4, [sp, #36]	@ 0x24
 801c35a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c35c:	2cff      	cmp	r4, #255	@ 0xff
 801c35e:	d020      	beq.n	801c3a2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801c360:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c362:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c366:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c368:	4367      	muls	r7, r4
 801c36a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c36c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c370:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c374:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c376:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c37a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c37e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c382:	44bc      	add	ip, r7
 801c384:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c388:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c38c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c390:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c394:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c398:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c39c:	ea4c 040a 	orr.w	r4, ip, sl
 801c3a0:	940e      	str	r4, [sp, #56]	@ 0x38
 801c3a2:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c3a4:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801c3a8:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c3ac:	43d2      	mvns	r2, r2
 801c3ae:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c3b2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801c3b4:	b2d2      	uxtb	r2, r2
 801c3b6:	fb08 f707 	mul.w	r7, r8, r7
 801c3ba:	fb01 770c 	mla	r7, r1, ip, r7
 801c3be:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c3c2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c3c4:	fb00 770c 	mla	r7, r0, ip, r7
 801c3c8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c3cc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801c3ce:	fb09 770c 	mla	r7, r9, ip, r7
 801c3d2:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801c3d6:	fb08 f80c 	mul.w	r8, r8, ip
 801c3da:	0a3f      	lsrs	r7, r7, #8
 801c3dc:	fb01 8303 	mla	r3, r1, r3, r8
 801c3e0:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c3e2:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801c3e6:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801c3ea:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801c3ec:	fb00 330a 	mla	r3, r0, sl, r3
 801c3f0:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801c3f4:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c3f8:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c3fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c400:	fb03 f102 	mul.w	r1, r3, r2
 801c404:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c408:	1c4b      	adds	r3, r1, #1
 801c40a:	ea47 070c 	orr.w	r7, r7, ip
 801c40e:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c412:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801c416:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c41a:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801c41e:	4353      	muls	r3, r2
 801c420:	1c59      	adds	r1, r3, #1
 801c422:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c426:	0a3b      	lsrs	r3, r7, #8
 801c428:	0c3f      	lsrs	r7, r7, #16
 801c42a:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801c42e:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801c432:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801c436:	435a      	muls	r2, r3
 801c438:	1c53      	adds	r3, r2, #1
 801c43a:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801c43e:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801c442:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801c446:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801c448:	f10e 0e03 	add.w	lr, lr, #3
 801c44c:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801c44e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801c452:	441a      	add	r2, r3
 801c454:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c456:	9225      	str	r2, [sp, #148]	@ 0x94
 801c458:	441d      	add	r5, r3
 801c45a:	e65a      	b.n	801c112 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801c45c:	2800      	cmp	r0, #0
 801c45e:	f43f aef7 	beq.w	801c250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c462:	5c79      	ldrb	r1, [r7, r1]
 801c464:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c468:	9109      	str	r1, [sp, #36]	@ 0x24
 801c46a:	0e09      	lsrs	r1, r1, #24
 801c46c:	9111      	str	r1, [sp, #68]	@ 0x44
 801c46e:	e6ef      	b.n	801c250 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801c470:	b01b      	add	sp, #108	@ 0x6c
 801c472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c476 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801c476:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c47a:	b08d      	sub	sp, #52	@ 0x34
 801c47c:	468b      	mov	fp, r1
 801c47e:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801c482:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801c486:	fb0c 5703 	mla	r7, ip, r3, r5
 801c48a:	f1bc 0f00 	cmp.w	ip, #0
 801c48e:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c490:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801c494:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801c498:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801c49c:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801c4a0:	eb02 0607 	add.w	r6, r2, r7
 801c4a4:	f89b 4000 	ldrb.w	r4, [fp]
 801c4a8:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801c4ac:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801c4b0:	f2c0 80c1 	blt.w	801c636 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c4b4:	45e6      	cmp	lr, ip
 801c4b6:	f340 80be 	ble.w	801c636 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801c4ba:	2d00      	cmp	r5, #0
 801c4bc:	f2c0 80b7 	blt.w	801c62e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c4c0:	42ab      	cmp	r3, r5
 801c4c2:	f340 80b4 	ble.w	801c62e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801c4c6:	5dd2      	ldrb	r2, [r2, r7]
 801c4c8:	9205      	str	r2, [sp, #20]
 801c4ca:	7872      	ldrb	r2, [r6, #1]
 801c4cc:	9206      	str	r2, [sp, #24]
 801c4ce:	78b2      	ldrb	r2, [r6, #2]
 801c4d0:	9207      	str	r2, [sp, #28]
 801c4d2:	1c6a      	adds	r2, r5, #1
 801c4d4:	f100 80b6 	bmi.w	801c644 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c4d8:	4293      	cmp	r3, r2
 801c4da:	f340 80b3 	ble.w	801c644 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c4de:	f1b8 0f00 	cmp.w	r8, #0
 801c4e2:	f000 80af 	beq.w	801c644 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801c4e6:	78f2      	ldrb	r2, [r6, #3]
 801c4e8:	9201      	str	r2, [sp, #4]
 801c4ea:	7932      	ldrb	r2, [r6, #4]
 801c4ec:	9202      	str	r2, [sp, #8]
 801c4ee:	7972      	ldrb	r2, [r6, #5]
 801c4f0:	9203      	str	r2, [sp, #12]
 801c4f2:	f11c 0c01 	adds.w	ip, ip, #1
 801c4f6:	f100 80ad 	bmi.w	801c654 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c4fa:	45e6      	cmp	lr, ip
 801c4fc:	f340 80aa 	ble.w	801c654 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c500:	f1ba 0f00 	cmp.w	sl, #0
 801c504:	f000 80a6 	beq.w	801c654 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801c508:	2d00      	cmp	r5, #0
 801c50a:	f2c0 809f 	blt.w	801c64c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c50e:	42ab      	cmp	r3, r5
 801c510:	f340 809c 	ble.w	801c64c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801c514:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801c518:	f816 9002 	ldrb.w	r9, [r6, r2]
 801c51c:	2203      	movs	r2, #3
 801c51e:	fb03 6c02 	mla	ip, r3, r2, r6
 801c522:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801c526:	f89c e002 	ldrb.w	lr, [ip, #2]
 801c52a:	9704      	str	r7, [sp, #16]
 801c52c:	3501      	adds	r5, #1
 801c52e:	f100 8098 	bmi.w	801c662 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c532:	42ab      	cmp	r3, r5
 801c534:	f340 8095 	ble.w	801c662 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c538:	f1b8 0f00 	cmp.w	r8, #0
 801c53c:	f000 8091 	beq.w	801c662 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801c540:	f04f 0c03 	mov.w	ip, #3
 801c544:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801c548:	5cb5      	ldrb	r5, [r6, r2]
 801c54a:	fb03 620c 	mla	r2, r3, ip, r6
 801c54e:	fb03 630c 	mla	r3, r3, ip, r6
 801c552:	7912      	ldrb	r2, [r2, #4]
 801c554:	795e      	ldrb	r6, [r3, #5]
 801c556:	fa1f f388 	uxth.w	r3, r8
 801c55a:	fa1f fc8a 	uxth.w	ip, sl
 801c55e:	fb03 f70c 	mul.w	r7, r3, ip
 801c562:	011b      	lsls	r3, r3, #4
 801c564:	9708      	str	r7, [sp, #32]
 801c566:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801c56a:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801c56e:	1bdb      	subs	r3, r3, r7
 801c570:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801c574:	fa1f fc8c 	uxth.w	ip, ip
 801c578:	b29b      	uxth	r3, r3
 801c57a:	9709      	str	r7, [sp, #36]	@ 0x24
 801c57c:	ebaa 0a0c 	sub.w	sl, sl, ip
 801c580:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c582:	930a      	str	r3, [sp, #40]	@ 0x28
 801c584:	fa1f fa8a 	uxth.w	sl, sl
 801c588:	ea6f 0807 	mvn.w	r8, r7
 801c58c:	9f01      	ldr	r7, [sp, #4]
 801c58e:	435f      	muls	r7, r3
 801c590:	9b05      	ldr	r3, [sp, #20]
 801c592:	fa5f f888 	uxtb.w	r8, r8
 801c596:	fb0a 7703 	mla	r7, sl, r3, r7
 801c59a:	9b08      	ldr	r3, [sp, #32]
 801c59c:	fb14 f408 	smulbb	r4, r4, r8
 801c5a0:	fb0c 7709 	mla	r7, ip, r9, r7
 801c5a4:	fb10 f008 	smulbb	r0, r0, r8
 801c5a8:	fb11 f108 	smulbb	r1, r1, r8
 801c5ac:	fb03 7705 	mla	r7, r3, r5, r7
 801c5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5b2:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801c5b6:	fb07 4703 	mla	r7, r7, r3, r4
 801c5ba:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801c5bc:	b2bf      	uxth	r7, r7
 801c5be:	1c7c      	adds	r4, r7, #1
 801c5c0:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801c5c4:	1224      	asrs	r4, r4, #8
 801c5c6:	f88b 4000 	strb.w	r4, [fp]
 801c5ca:	9c02      	ldr	r4, [sp, #8]
 801c5cc:	435c      	muls	r4, r3
 801c5ce:	9b06      	ldr	r3, [sp, #24]
 801c5d0:	fb0a 4403 	mla	r4, sl, r3, r4
 801c5d4:	9b04      	ldr	r3, [sp, #16]
 801c5d6:	fb0c 4403 	mla	r4, ip, r3, r4
 801c5da:	9b08      	ldr	r3, [sp, #32]
 801c5dc:	fb03 4402 	mla	r4, r3, r2, r4
 801c5e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c5e2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c5e4:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c5e8:	fb04 0403 	mla	r4, r4, r3, r0
 801c5ec:	9b03      	ldr	r3, [sp, #12]
 801c5ee:	435a      	muls	r2, r3
 801c5f0:	b2a4      	uxth	r4, r4
 801c5f2:	4613      	mov	r3, r2
 801c5f4:	9a07      	ldr	r2, [sp, #28]
 801c5f6:	1c60      	adds	r0, r4, #1
 801c5f8:	fb0a 3a02 	mla	sl, sl, r2, r3
 801c5fc:	9b08      	ldr	r3, [sp, #32]
 801c5fe:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801c602:	fb0c ac0e 	mla	ip, ip, lr, sl
 801c606:	1224      	asrs	r4, r4, #8
 801c608:	fb03 c606 	mla	r6, r3, r6, ip
 801c60c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c60e:	f88b 4001 	strb.w	r4, [fp, #1]
 801c612:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c616:	fb06 1103 	mla	r1, r6, r3, r1
 801c61a:	b289      	uxth	r1, r1
 801c61c:	1c4e      	adds	r6, r1, #1
 801c61e:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801c622:	1209      	asrs	r1, r1, #8
 801c624:	f88b 1002 	strb.w	r1, [fp, #2]
 801c628:	b00d      	add	sp, #52	@ 0x34
 801c62a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c62e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c632:	9405      	str	r4, [sp, #20]
 801c634:	e74d      	b.n	801c4d2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801c636:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c63a:	9401      	str	r4, [sp, #4]
 801c63c:	9405      	str	r4, [sp, #20]
 801c63e:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801c642:	e756      	b.n	801c4f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c644:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801c648:	9401      	str	r4, [sp, #4]
 801c64a:	e752      	b.n	801c4f2 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801c64c:	468e      	mov	lr, r1
 801c64e:	9004      	str	r0, [sp, #16]
 801c650:	46a1      	mov	r9, r4
 801c652:	e76b      	b.n	801c52c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801c654:	460e      	mov	r6, r1
 801c656:	4602      	mov	r2, r0
 801c658:	4625      	mov	r5, r4
 801c65a:	468e      	mov	lr, r1
 801c65c:	9004      	str	r0, [sp, #16]
 801c65e:	46a1      	mov	r9, r4
 801c660:	e779      	b.n	801c556 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801c662:	460e      	mov	r6, r1
 801c664:	4602      	mov	r2, r0
 801c666:	4625      	mov	r5, r4
 801c668:	e775      	b.n	801c556 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801c66a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c66a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c66e:	b09f      	sub	sp, #124	@ 0x7c
 801c670:	920e      	str	r2, [sp, #56]	@ 0x38
 801c672:	9307      	str	r3, [sp, #28]
 801c674:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c676:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c67a:	901d      	str	r0, [sp, #116]	@ 0x74
 801c67c:	930c      	str	r3, [sp, #48]	@ 0x30
 801c67e:	6850      	ldr	r0, [r2, #4]
 801c680:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c682:	6812      	ldr	r2, [r2, #0]
 801c684:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c688:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801c68c:	fb00 1303 	mla	r3, r0, r3, r1
 801c690:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c694:	18d3      	adds	r3, r2, r3
 801c696:	9308      	str	r3, [sp, #32]
 801c698:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c69a:	681b      	ldr	r3, [r3, #0]
 801c69c:	930a      	str	r3, [sp, #40]	@ 0x28
 801c69e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6a0:	43db      	mvns	r3, r3
 801c6a2:	b2db      	uxtb	r3, r3
 801c6a4:	9309      	str	r3, [sp, #36]	@ 0x24
 801c6a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c6a8:	2b00      	cmp	r3, #0
 801c6aa:	dc03      	bgt.n	801c6b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801c6ac:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801c6ae:	2b00      	cmp	r3, #0
 801c6b0:	f340 81f5 	ble.w	801ca9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c6b4:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c6b6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c6ba:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c6be:	1e48      	subs	r0, r1, #1
 801c6c0:	1e54      	subs	r4, r2, #1
 801c6c2:	9b07      	ldr	r3, [sp, #28]
 801c6c4:	2b00      	cmp	r3, #0
 801c6c6:	f340 80d5 	ble.w	801c874 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801c6ca:	ea5f 452a 	movs.w	r5, sl, asr #16
 801c6ce:	ea4f 4328 	mov.w	r3, r8, asr #16
 801c6d2:	d406      	bmi.n	801c6e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6d4:	4285      	cmp	r5, r0
 801c6d6:	da04      	bge.n	801c6e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6d8:	2b00      	cmp	r3, #0
 801c6da:	db02      	blt.n	801c6e2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801c6dc:	42a3      	cmp	r3, r4
 801c6de:	f2c0 80ca 	blt.w	801c876 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801c6e2:	3501      	adds	r5, #1
 801c6e4:	f100 80bb 	bmi.w	801c85e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c6e8:	42a9      	cmp	r1, r5
 801c6ea:	f2c0 80b8 	blt.w	801c85e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c6ee:	3301      	adds	r3, #1
 801c6f0:	f100 80b5 	bmi.w	801c85e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c6f4:	429a      	cmp	r2, r3
 801c6f6:	f2c0 80b2 	blt.w	801c85e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801c6fa:	9b07      	ldr	r3, [sp, #28]
 801c6fc:	9d08      	ldr	r5, [sp, #32]
 801c6fe:	930d      	str	r3, [sp, #52]	@ 0x34
 801c700:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c702:	2b00      	cmp	r3, #0
 801c704:	f340 80d6 	ble.w	801c8b4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801c708:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801c70a:	ea4f 4428 	mov.w	r4, r8, asr #16
 801c70e:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c710:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801c714:	68c6      	ldr	r6, [r0, #12]
 801c716:	ea5f 402a 	movs.w	r0, sl, asr #16
 801c71a:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801c71e:	689b      	ldr	r3, [r3, #8]
 801c720:	f100 810f 	bmi.w	801c942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c724:	1e5f      	subs	r7, r3, #1
 801c726:	42b8      	cmp	r0, r7
 801c728:	f280 810b 	bge.w	801c942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c72c:	2c00      	cmp	r4, #0
 801c72e:	f2c0 8108 	blt.w	801c942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c732:	1e77      	subs	r7, r6, #1
 801c734:	42bc      	cmp	r4, r7
 801c736:	f280 8104 	bge.w	801c942 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801c73a:	b21b      	sxth	r3, r3
 801c73c:	fb04 0003 	mla	r0, r4, r3, r0
 801c740:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c742:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801c746:	1826      	adds	r6, r4, r0
 801c748:	5c24      	ldrb	r4, [r4, r0]
 801c74a:	78b7      	ldrb	r7, [r6, #2]
 801c74c:	7870      	ldrb	r0, [r6, #1]
 801c74e:	970f      	str	r7, [sp, #60]	@ 0x3c
 801c750:	7977      	ldrb	r7, [r6, #5]
 801c752:	f896 e003 	ldrb.w	lr, [r6, #3]
 801c756:	f896 c004 	ldrb.w	ip, [r6, #4]
 801c75a:	9710      	str	r7, [sp, #64]	@ 0x40
 801c75c:	b1c9      	cbz	r1, 801c792 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801c75e:	f04f 0b03 	mov.w	fp, #3
 801c762:	f06f 0904 	mvn.w	r9, #4
 801c766:	3605      	adds	r6, #5
 801c768:	fb13 930b 	smlabb	r3, r3, fp, r9
 801c76c:	eb06 0b03 	add.w	fp, r6, r3
 801c770:	5cf3      	ldrb	r3, [r6, r3]
 801c772:	9311      	str	r3, [sp, #68]	@ 0x44
 801c774:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801c778:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c77a:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801c77e:	9315      	str	r3, [sp, #84]	@ 0x54
 801c780:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801c784:	9312      	str	r3, [sp, #72]	@ 0x48
 801c786:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801c78a:	9314      	str	r3, [sp, #80]	@ 0x50
 801c78c:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801c790:	9316      	str	r3, [sp, #88]	@ 0x58
 801c792:	b292      	uxth	r2, r2
 801c794:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801c796:	b289      	uxth	r1, r1
 801c798:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801c79c:	fb02 f601 	mul.w	r6, r2, r1
 801c7a0:	0112      	lsls	r2, r2, #4
 801c7a2:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801c7a6:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801c7aa:	1b92      	subs	r2, r2, r6
 801c7ac:	b289      	uxth	r1, r1
 801c7ae:	b292      	uxth	r2, r2
 801c7b0:	eba9 0901 	sub.w	r9, r9, r1
 801c7b4:	fb02 fe0e 	mul.w	lr, r2, lr
 801c7b8:	fa1f f989 	uxth.w	r9, r9
 801c7bc:	fb02 fc0c 	mul.w	ip, r2, ip
 801c7c0:	fb09 e404 	mla	r4, r9, r4, lr
 801c7c4:	f895 e000 	ldrb.w	lr, [r5]
 801c7c8:	fb09 c000 	mla	r0, r9, r0, ip
 801c7cc:	fb01 4407 	mla	r4, r1, r7, r4
 801c7d0:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801c7d2:	fb06 4407 	mla	r4, r6, r7, r4
 801c7d6:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801c7d8:	fb1e fe07 	smulbb	lr, lr, r7
 801c7dc:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801c7e0:	fb04 e403 	mla	r4, r4, r3, lr
 801c7e4:	b2a4      	uxth	r4, r4
 801c7e6:	f104 0e01 	add.w	lr, r4, #1
 801c7ea:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801c7ee:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c7f0:	fb01 0004 	mla	r0, r1, r4, r0
 801c7f4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c7f6:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c7fa:	fb06 0004 	mla	r0, r6, r4, r0
 801c7fe:	786c      	ldrb	r4, [r5, #1]
 801c800:	f885 e000 	strb.w	lr, [r5]
 801c804:	fb14 f407 	smulbb	r4, r4, r7
 801c808:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c80c:	fb00 4003 	mla	r0, r0, r3, r4
 801c810:	b280      	uxth	r0, r0
 801c812:	1c44      	adds	r4, r0, #1
 801c814:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801c818:	1200      	asrs	r0, r0, #8
 801c81a:	7068      	strb	r0, [r5, #1]
 801c81c:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801c81e:	4342      	muls	r2, r0
 801c820:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801c822:	fb09 2200 	mla	r2, r9, r0, r2
 801c826:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c828:	fb01 2100 	mla	r1, r1, r0, r2
 801c82c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801c82e:	fb06 1602 	mla	r6, r6, r2, r1
 801c832:	78a9      	ldrb	r1, [r5, #2]
 801c834:	fb11 f107 	smulbb	r1, r1, r7
 801c838:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801c83c:	fb06 1303 	mla	r3, r6, r3, r1
 801c840:	b29b      	uxth	r3, r3
 801c842:	1c5e      	adds	r6, r3, #1
 801c844:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801c848:	121b      	asrs	r3, r3, #8
 801c84a:	70ab      	strb	r3, [r5, #2]
 801c84c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c84e:	3503      	adds	r5, #3
 801c850:	449a      	add	sl, r3
 801c852:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c854:	4498      	add	r8, r3
 801c856:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c858:	3b01      	subs	r3, #1
 801c85a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c85c:	e750      	b.n	801c700 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801c85e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c860:	449a      	add	sl, r3
 801c862:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c864:	4498      	add	r8, r3
 801c866:	9b07      	ldr	r3, [sp, #28]
 801c868:	3b01      	subs	r3, #1
 801c86a:	9307      	str	r3, [sp, #28]
 801c86c:	9b08      	ldr	r3, [sp, #32]
 801c86e:	3303      	adds	r3, #3
 801c870:	9308      	str	r3, [sp, #32]
 801c872:	e726      	b.n	801c6c2 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801c874:	d026      	beq.n	801c8c4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801c876:	9b07      	ldr	r3, [sp, #28]
 801c878:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c87a:	3b01      	subs	r3, #1
 801c87c:	fb00 a003 	mla	r0, r0, r3, sl
 801c880:	1400      	asrs	r0, r0, #16
 801c882:	f53f af3a 	bmi.w	801c6fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c886:	3901      	subs	r1, #1
 801c888:	4288      	cmp	r0, r1
 801c88a:	f6bf af36 	bge.w	801c6fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c88e:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c890:	fb01 8303 	mla	r3, r1, r3, r8
 801c894:	141b      	asrs	r3, r3, #16
 801c896:	f53f af30 	bmi.w	801c6fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c89a:	3a01      	subs	r2, #1
 801c89c:	4293      	cmp	r3, r2
 801c89e:	f6bf af2c 	bge.w	801c6fa <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801c8a2:	9b08      	ldr	r3, [sp, #32]
 801c8a4:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801c8a8:	1cdd      	adds	r5, r3, #3
 801c8aa:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801c8ae:	f1bc 0f00 	cmp.w	ip, #0
 801c8b2:	dc5f      	bgt.n	801c974 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801c8b4:	9b07      	ldr	r3, [sp, #28]
 801c8b6:	9a08      	ldr	r2, [sp, #32]
 801c8b8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801c8bc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c8c0:	441a      	add	r2, r3
 801c8c2:	9208      	str	r2, [sp, #32]
 801c8c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c8c6:	2b00      	cmp	r3, #0
 801c8c8:	f340 80e9 	ble.w	801ca9e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801c8cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c8d0:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c8d2:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c8d6:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c8da:	eef0 6a62 	vmov.f32	s13, s5
 801c8de:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c8e2:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c8e6:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8ea:	ee16 aa90 	vmov	sl, s13
 801c8ee:	eef0 6a43 	vmov.f32	s13, s6
 801c8f2:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c8f6:	ee16 8a90 	vmov	r8, s13
 801c8fa:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c8fe:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c902:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c906:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c90a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c90e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c912:	ee12 2a90 	vmov	r2, s5
 801c916:	eef0 2a47 	vmov.f32	s5, s14
 801c91a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c91e:	ee13 2a10 	vmov	r2, s6
 801c922:	932b      	str	r3, [sp, #172]	@ 0xac
 801c924:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c926:	eeb0 3a67 	vmov.f32	s6, s15
 801c92a:	fb92 f3f3 	sdiv	r3, r2, r3
 801c92e:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c930:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c932:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801c934:	3b01      	subs	r3, #1
 801c936:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c938:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c93a:	bf08      	it	eq
 801c93c:	4613      	moveq	r3, r2
 801c93e:	9307      	str	r3, [sp, #28]
 801c940:	e6b1      	b.n	801c6a6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801c942:	1c47      	adds	r7, r0, #1
 801c944:	d482      	bmi.n	801c84c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c946:	42bb      	cmp	r3, r7
 801c948:	db80      	blt.n	801c84c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c94a:	1c67      	adds	r7, r4, #1
 801c94c:	f53f af7e 	bmi.w	801c84c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c950:	42be      	cmp	r6, r7
 801c952:	f6ff af7b 	blt.w	801c84c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c956:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c958:	b236      	sxth	r6, r6
 801c95a:	9001      	str	r0, [sp, #4]
 801c95c:	b21b      	sxth	r3, r3
 801c95e:	9600      	str	r6, [sp, #0]
 801c960:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c962:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801c966:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801c96a:	4629      	mov	r1, r5
 801c96c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c96e:	f7ff fd82 	bl	801c476 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801c972:	e76b      	b.n	801c84c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801c974:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801c976:	ea4f 402a 	mov.w	r0, sl, asr #16
 801c97a:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801c97e:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801c982:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801c986:	ea4f 4128 	mov.w	r1, r8, asr #16
 801c98a:	fb07 0101 	mla	r1, r7, r1, r0
 801c98e:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801c990:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801c994:	1844      	adds	r4, r0, r1
 801c996:	5c40      	ldrb	r0, [r0, r1]
 801c998:	78a6      	ldrb	r6, [r4, #2]
 801c99a:	7861      	ldrb	r1, [r4, #1]
 801c99c:	960f      	str	r6, [sp, #60]	@ 0x3c
 801c99e:	78e6      	ldrb	r6, [r4, #3]
 801c9a0:	910d      	str	r1, [sp, #52]	@ 0x34
 801c9a2:	9610      	str	r6, [sp, #64]	@ 0x40
 801c9a4:	f894 9004 	ldrb.w	r9, [r4, #4]
 801c9a8:	f894 b005 	ldrb.w	fp, [r4, #5]
 801c9ac:	b192      	cbz	r2, 801c9d4 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801c9ae:	f06f 0604 	mvn.w	r6, #4
 801c9b2:	2103      	movs	r1, #3
 801c9b4:	3405      	adds	r4, #5
 801c9b6:	fb17 6701 	smlabb	r7, r7, r1, r6
 801c9ba:	19e6      	adds	r6, r4, r7
 801c9bc:	5de4      	ldrb	r4, [r4, r7]
 801c9be:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c9c0:	7874      	ldrb	r4, [r6, #1]
 801c9c2:	9419      	str	r4, [sp, #100]	@ 0x64
 801c9c4:	78b4      	ldrb	r4, [r6, #2]
 801c9c6:	941b      	str	r4, [sp, #108]	@ 0x6c
 801c9c8:	78f4      	ldrb	r4, [r6, #3]
 801c9ca:	9418      	str	r4, [sp, #96]	@ 0x60
 801c9cc:	7934      	ldrb	r4, [r6, #4]
 801c9ce:	941a      	str	r4, [sp, #104]	@ 0x68
 801c9d0:	7974      	ldrb	r4, [r6, #5]
 801c9d2:	941c      	str	r4, [sp, #112]	@ 0x70
 801c9d4:	b29b      	uxth	r3, r3
 801c9d6:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801c9d8:	b292      	uxth	r2, r2
 801c9da:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801c9dc:	3503      	adds	r5, #3
 801c9de:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c9e2:	fb03 f402 	mul.w	r4, r3, r2
 801c9e6:	011b      	lsls	r3, r3, #4
 801c9e8:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801c9ec:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801c9f0:	1b1b      	subs	r3, r3, r4
 801c9f2:	b292      	uxth	r2, r2
 801c9f4:	b29b      	uxth	r3, r3
 801c9f6:	1ab6      	subs	r6, r6, r2
 801c9f8:	435f      	muls	r7, r3
 801c9fa:	b2b6      	uxth	r6, r6
 801c9fc:	fb03 f909 	mul.w	r9, r3, r9
 801ca00:	fb03 fb0b 	mul.w	fp, r3, fp
 801ca04:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ca06:	fb06 7000 	mla	r0, r6, r0, r7
 801ca0a:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801ca0c:	fb06 bb03 	mla	fp, r6, r3, fp
 801ca10:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ca12:	fb02 0007 	mla	r0, r2, r7, r0
 801ca16:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801ca18:	fb02 bb03 	mla	fp, r2, r3, fp
 801ca1c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ca1e:	fb04 0007 	mla	r0, r4, r7, r0
 801ca22:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801ca26:	fb17 f701 	smulbb	r7, r7, r1
 801ca2a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801ca2e:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ca30:	fb00 700e 	mla	r0, r0, lr, r7
 801ca34:	fb06 9101 	mla	r1, r6, r1, r9
 801ca38:	b280      	uxth	r0, r0
 801ca3a:	1c47      	adds	r7, r0, #1
 801ca3c:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801ca40:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801ca42:	1200      	asrs	r0, r0, #8
 801ca44:	f805 0c06 	strb.w	r0, [r5, #-6]
 801ca48:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ca4a:	fb02 1100 	mla	r1, r2, r0, r1
 801ca4e:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801ca50:	fb04 1100 	mla	r1, r4, r0, r1
 801ca54:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801ca58:	fb04 b403 	mla	r4, r4, r3, fp
 801ca5c:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801ca60:	fb10 f007 	smulbb	r0, r0, r7
 801ca64:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ca68:	fb13 f307 	smulbb	r3, r3, r7
 801ca6c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801ca70:	fb01 010e 	mla	r1, r1, lr, r0
 801ca74:	fb04 340e 	mla	r4, r4, lr, r3
 801ca78:	b289      	uxth	r1, r1
 801ca7a:	b2a4      	uxth	r4, r4
 801ca7c:	1c48      	adds	r0, r1, #1
 801ca7e:	1c63      	adds	r3, r4, #1
 801ca80:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801ca84:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801ca88:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ca8a:	1209      	asrs	r1, r1, #8
 801ca8c:	1224      	asrs	r4, r4, #8
 801ca8e:	449a      	add	sl, r3
 801ca90:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ca92:	f805 1c05 	strb.w	r1, [r5, #-5]
 801ca96:	f805 4c04 	strb.w	r4, [r5, #-4]
 801ca9a:	4498      	add	r8, r3
 801ca9c:	e707      	b.n	801c8ae <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801ca9e:	b01f      	add	sp, #124	@ 0x7c
 801caa0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801caa4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801caa4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801caa8:	b087      	sub	sp, #28
 801caaa:	780d      	ldrb	r5, [r1, #0]
 801caac:	784c      	ldrb	r4, [r1, #1]
 801caae:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801cab2:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801cab6:	9004      	str	r0, [sp, #16]
 801cab8:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801cabc:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801cac0:	9005      	str	r0, [sp, #20]
 801cac2:	fb06 bc03 	mla	ip, r6, r3, fp
 801cac6:	2e00      	cmp	r6, #0
 801cac8:	7888      	ldrb	r0, [r1, #2]
 801caca:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801cace:	eb02 090c 	add.w	r9, r2, ip
 801cad2:	f2c0 8084 	blt.w	801cbde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801cad6:	42b7      	cmp	r7, r6
 801cad8:	f340 8081 	ble.w	801cbde <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801cadc:	f1bb 0f00 	cmp.w	fp, #0
 801cae0:	db79      	blt.n	801cbd6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801cae2:	455b      	cmp	r3, fp
 801cae4:	dd77      	ble.n	801cbd6 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801cae6:	f812 200c 	ldrb.w	r2, [r2, ip]
 801caea:	9201      	str	r2, [sp, #4]
 801caec:	f899 2001 	ldrb.w	r2, [r9, #1]
 801caf0:	9202      	str	r2, [sp, #8]
 801caf2:	f899 2002 	ldrb.w	r2, [r9, #2]
 801caf6:	9203      	str	r2, [sp, #12]
 801caf8:	f11b 0201 	adds.w	r2, fp, #1
 801cafc:	d476      	bmi.n	801cbec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cafe:	4293      	cmp	r3, r2
 801cb00:	dd74      	ble.n	801cbec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cb02:	9a04      	ldr	r2, [sp, #16]
 801cb04:	2a00      	cmp	r2, #0
 801cb06:	d071      	beq.n	801cbec <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801cb08:	f899 8003 	ldrb.w	r8, [r9, #3]
 801cb0c:	f899 c004 	ldrb.w	ip, [r9, #4]
 801cb10:	f899 a005 	ldrb.w	sl, [r9, #5]
 801cb14:	3601      	adds	r6, #1
 801cb16:	d471      	bmi.n	801cbfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cb18:	42b7      	cmp	r7, r6
 801cb1a:	dd6f      	ble.n	801cbfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cb1c:	9a05      	ldr	r2, [sp, #20]
 801cb1e:	2a00      	cmp	r2, #0
 801cb20:	d06c      	beq.n	801cbfc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801cb22:	f1bb 0f00 	cmp.w	fp, #0
 801cb26:	db65      	blt.n	801cbf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801cb28:	455b      	cmp	r3, fp
 801cb2a:	dd63      	ble.n	801cbf4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801cb2c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801cb30:	f819 e002 	ldrb.w	lr, [r9, r2]
 801cb34:	2203      	movs	r2, #3
 801cb36:	fb03 9602 	mla	r6, r3, r2, r9
 801cb3a:	7877      	ldrb	r7, [r6, #1]
 801cb3c:	78b6      	ldrb	r6, [r6, #2]
 801cb3e:	f11b 0b01 	adds.w	fp, fp, #1
 801cb42:	d40c      	bmi.n	801cb5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cb44:	455b      	cmp	r3, fp
 801cb46:	dd0a      	ble.n	801cb5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cb48:	9a04      	ldr	r2, [sp, #16]
 801cb4a:	b142      	cbz	r2, 801cb5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801cb4c:	2203      	movs	r2, #3
 801cb4e:	fb13 2002 	smlabb	r0, r3, r2, r2
 801cb52:	f819 5000 	ldrb.w	r5, [r9, r0]
 801cb56:	fb03 9002 	mla	r0, r3, r2, r9
 801cb5a:	7904      	ldrb	r4, [r0, #4]
 801cb5c:	7940      	ldrb	r0, [r0, #5]
 801cb5e:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801cb62:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801cb66:	fb03 fb02 	mul.w	fp, r3, r2
 801cb6a:	011b      	lsls	r3, r3, #4
 801cb6c:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801cb70:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801cb74:	eba3 030b 	sub.w	r3, r3, fp
 801cb78:	b292      	uxth	r2, r2
 801cb7a:	b29b      	uxth	r3, r3
 801cb7c:	eba9 0902 	sub.w	r9, r9, r2
 801cb80:	9304      	str	r3, [sp, #16]
 801cb82:	fa1f f989 	uxth.w	r9, r9
 801cb86:	fb03 f808 	mul.w	r8, r3, r8
 801cb8a:	9b01      	ldr	r3, [sp, #4]
 801cb8c:	fb09 8803 	mla	r8, r9, r3, r8
 801cb90:	9b04      	ldr	r3, [sp, #16]
 801cb92:	fb03 fc0c 	mul.w	ip, r3, ip
 801cb96:	9b02      	ldr	r3, [sp, #8]
 801cb98:	fb02 880e 	mla	r8, r2, lr, r8
 801cb9c:	fb09 cc03 	mla	ip, r9, r3, ip
 801cba0:	9b04      	ldr	r3, [sp, #16]
 801cba2:	fb0b 8805 	mla	r8, fp, r5, r8
 801cba6:	fb02 c707 	mla	r7, r2, r7, ip
 801cbaa:	fb03 f30a 	mul.w	r3, r3, sl
 801cbae:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cbb2:	fb0b 7404 	mla	r4, fp, r4, r7
 801cbb6:	f881 8000 	strb.w	r8, [r1]
 801cbba:	1224      	asrs	r4, r4, #8
 801cbbc:	704c      	strb	r4, [r1, #1]
 801cbbe:	9c03      	ldr	r4, [sp, #12]
 801cbc0:	fb09 3904 	mla	r9, r9, r4, r3
 801cbc4:	fb02 9206 	mla	r2, r2, r6, r9
 801cbc8:	fb0b 2000 	mla	r0, fp, r0, r2
 801cbcc:	1200      	asrs	r0, r0, #8
 801cbce:	7088      	strb	r0, [r1, #2]
 801cbd0:	b007      	add	sp, #28
 801cbd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cbd6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801cbda:	9501      	str	r5, [sp, #4]
 801cbdc:	e78c      	b.n	801caf8 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801cbde:	4682      	mov	sl, r0
 801cbe0:	46a4      	mov	ip, r4
 801cbe2:	46a8      	mov	r8, r5
 801cbe4:	9501      	str	r5, [sp, #4]
 801cbe6:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801cbea:	e793      	b.n	801cb14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801cbec:	4682      	mov	sl, r0
 801cbee:	46a4      	mov	ip, r4
 801cbf0:	46a8      	mov	r8, r5
 801cbf2:	e78f      	b.n	801cb14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801cbf4:	4606      	mov	r6, r0
 801cbf6:	4627      	mov	r7, r4
 801cbf8:	46ae      	mov	lr, r5
 801cbfa:	e7a0      	b.n	801cb3e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801cbfc:	4606      	mov	r6, r0
 801cbfe:	4627      	mov	r7, r4
 801cc00:	46ae      	mov	lr, r5
 801cc02:	e7ac      	b.n	801cb5e <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801cc04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801cc04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cc08:	b09b      	sub	sp, #108	@ 0x6c
 801cc0a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801cc0c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801cc0e:	9019      	str	r0, [sp, #100]	@ 0x64
 801cc10:	9109      	str	r1, [sp, #36]	@ 0x24
 801cc12:	6850      	ldr	r0, [r2, #4]
 801cc14:	9306      	str	r3, [sp, #24]
 801cc16:	6812      	ldr	r2, [r2, #0]
 801cc18:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801cc1c:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801cc20:	fb00 1303 	mla	r3, r0, r3, r1
 801cc24:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801cc28:	18d3      	adds	r3, r2, r3
 801cc2a:	9307      	str	r3, [sp, #28]
 801cc2c:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cc2e:	681b      	ldr	r3, [r3, #0]
 801cc30:	9308      	str	r3, [sp, #32]
 801cc32:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc34:	2b00      	cmp	r3, #0
 801cc36:	dc03      	bgt.n	801cc40 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801cc38:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cc3a:	2b00      	cmp	r3, #0
 801cc3c:	f340 81ab 	ble.w	801cf96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801cc40:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cc42:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cc46:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cc4a:	1e48      	subs	r0, r1, #1
 801cc4c:	1e55      	subs	r5, r2, #1
 801cc4e:	9b06      	ldr	r3, [sp, #24]
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	f340 80b1 	ble.w	801cdb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801cc56:	ea5f 462b 	movs.w	r6, fp, asr #16
 801cc5a:	ea4f 4324 	mov.w	r3, r4, asr #16
 801cc5e:	d406      	bmi.n	801cc6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cc60:	4286      	cmp	r6, r0
 801cc62:	da04      	bge.n	801cc6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cc64:	2b00      	cmp	r3, #0
 801cc66:	db02      	blt.n	801cc6e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801cc68:	42ab      	cmp	r3, r5
 801cc6a:	f2c0 80a6 	blt.w	801cdba <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801cc6e:	3601      	adds	r6, #1
 801cc70:	f100 8097 	bmi.w	801cda2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc74:	42b1      	cmp	r1, r6
 801cc76:	f2c0 8094 	blt.w	801cda2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc7a:	3301      	adds	r3, #1
 801cc7c:	f100 8091 	bmi.w	801cda2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc80:	429a      	cmp	r2, r3
 801cc82:	f2c0 808e 	blt.w	801cda2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801cc86:	9b06      	ldr	r3, [sp, #24]
 801cc88:	9e07      	ldr	r6, [sp, #28]
 801cc8a:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc8c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cc8e:	2b00      	cmp	r3, #0
 801cc90:	f340 80b0 	ble.w	801cdf4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801cc94:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801cc96:	1425      	asrs	r5, r4, #16
 801cc98:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cc9a:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801cc9e:	68c7      	ldr	r7, [r0, #12]
 801cca0:	ea5f 402b 	movs.w	r0, fp, asr #16
 801cca4:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801cca8:	689b      	ldr	r3, [r3, #8]
 801ccaa:	f100 80ea 	bmi.w	801ce82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ccae:	f103 3cff 	add.w	ip, r3, #4294967295
 801ccb2:	4560      	cmp	r0, ip
 801ccb4:	f280 80e5 	bge.w	801ce82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ccb8:	2d00      	cmp	r5, #0
 801ccba:	f2c0 80e2 	blt.w	801ce82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ccbe:	f107 3cff 	add.w	ip, r7, #4294967295
 801ccc2:	4565      	cmp	r5, ip
 801ccc4:	f280 80dd 	bge.w	801ce82 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801ccc8:	b21b      	sxth	r3, r3
 801ccca:	fb05 0003 	mla	r0, r5, r3, r0
 801ccce:	9d08      	ldr	r5, [sp, #32]
 801ccd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ccd4:	182f      	adds	r7, r5, r0
 801ccd6:	5c2d      	ldrb	r5, [r5, r0]
 801ccd8:	7878      	ldrb	r0, [r7, #1]
 801ccda:	f897 e002 	ldrb.w	lr, [r7, #2]
 801ccde:	900c      	str	r0, [sp, #48]	@ 0x30
 801cce0:	f897 9003 	ldrb.w	r9, [r7, #3]
 801cce4:	f897 8004 	ldrb.w	r8, [r7, #4]
 801cce8:	f897 a005 	ldrb.w	sl, [r7, #5]
 801ccec:	b1c9      	cbz	r1, 801cd22 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801ccee:	f04f 0c03 	mov.w	ip, #3
 801ccf2:	f06f 0004 	mvn.w	r0, #4
 801ccf6:	3705      	adds	r7, #5
 801ccf8:	fb13 030c 	smlabb	r3, r3, ip, r0
 801ccfc:	eb07 0c03 	add.w	ip, r7, r3
 801cd00:	5cfb      	ldrb	r3, [r7, r3]
 801cd02:	930d      	str	r3, [sp, #52]	@ 0x34
 801cd04:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801cd08:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cd0a:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801cd0e:	9311      	str	r3, [sp, #68]	@ 0x44
 801cd10:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801cd14:	930e      	str	r3, [sp, #56]	@ 0x38
 801cd16:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801cd1a:	9310      	str	r3, [sp, #64]	@ 0x40
 801cd1c:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801cd20:	9312      	str	r3, [sp, #72]	@ 0x48
 801cd22:	b292      	uxth	r2, r2
 801cd24:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801cd26:	b289      	uxth	r1, r1
 801cd28:	fb02 f301 	mul.w	r3, r2, r1
 801cd2c:	0112      	lsls	r2, r2, #4
 801cd2e:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801cd32:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801cd36:	1ad2      	subs	r2, r2, r3
 801cd38:	b289      	uxth	r1, r1
 801cd3a:	b292      	uxth	r2, r2
 801cd3c:	1a7f      	subs	r7, r7, r1
 801cd3e:	fb02 f909 	mul.w	r9, r2, r9
 801cd42:	b2bf      	uxth	r7, r7
 801cd44:	fb02 f808 	mul.w	r8, r2, r8
 801cd48:	fb02 fa0a 	mul.w	sl, r2, sl
 801cd4c:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd4e:	fb07 9905 	mla	r9, r7, r5, r9
 801cd52:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801cd54:	fb07 8800 	mla	r8, r7, r0, r8
 801cd58:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801cd5a:	fb07 aa0e 	mla	sl, r7, lr, sl
 801cd5e:	fb01 9905 	mla	r9, r1, r5, r9
 801cd62:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801cd64:	fb01 8800 	mla	r8, r1, r0, r8
 801cd68:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801cd6a:	fb01 a102 	mla	r1, r1, r2, sl
 801cd6e:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801cd70:	fb03 9905 	mla	r9, r3, r5, r9
 801cd74:	fb03 8800 	mla	r8, r3, r0, r8
 801cd78:	fb03 1302 	mla	r3, r3, r2, r1
 801cd7c:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cd80:	ea4f 2828 	mov.w	r8, r8, asr #8
 801cd84:	121b      	asrs	r3, r3, #8
 801cd86:	f886 9000 	strb.w	r9, [r6]
 801cd8a:	f886 8001 	strb.w	r8, [r6, #1]
 801cd8e:	70b3      	strb	r3, [r6, #2]
 801cd90:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cd92:	3603      	adds	r6, #3
 801cd94:	449b      	add	fp, r3
 801cd96:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cd98:	441c      	add	r4, r3
 801cd9a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cd9c:	3b01      	subs	r3, #1
 801cd9e:	930a      	str	r3, [sp, #40]	@ 0x28
 801cda0:	e774      	b.n	801cc8c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801cda2:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cda4:	449b      	add	fp, r3
 801cda6:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cda8:	441c      	add	r4, r3
 801cdaa:	9b06      	ldr	r3, [sp, #24]
 801cdac:	3b01      	subs	r3, #1
 801cdae:	9306      	str	r3, [sp, #24]
 801cdb0:	9b07      	ldr	r3, [sp, #28]
 801cdb2:	3303      	adds	r3, #3
 801cdb4:	9307      	str	r3, [sp, #28]
 801cdb6:	e74a      	b.n	801cc4e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801cdb8:	d024      	beq.n	801ce04 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801cdba:	9b06      	ldr	r3, [sp, #24]
 801cdbc:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801cdbe:	3b01      	subs	r3, #1
 801cdc0:	fb00 b003 	mla	r0, r0, r3, fp
 801cdc4:	1400      	asrs	r0, r0, #16
 801cdc6:	f53f af5e 	bmi.w	801cc86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cdca:	3901      	subs	r1, #1
 801cdcc:	4288      	cmp	r0, r1
 801cdce:	f6bf af5a 	bge.w	801cc86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cdd2:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801cdd4:	fb01 4303 	mla	r3, r1, r3, r4
 801cdd8:	141b      	asrs	r3, r3, #16
 801cdda:	f53f af54 	bmi.w	801cc86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cdde:	3a01      	subs	r2, #1
 801cde0:	4293      	cmp	r3, r2
 801cde2:	f6bf af50 	bge.w	801cc86 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801cde6:	9b07      	ldr	r3, [sp, #28]
 801cde8:	f8dd e018 	ldr.w	lr, [sp, #24]
 801cdec:	1cde      	adds	r6, r3, #3
 801cdee:	f1be 0f00 	cmp.w	lr, #0
 801cdf2:	dc5f      	bgt.n	801ceb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801cdf4:	9b06      	ldr	r3, [sp, #24]
 801cdf6:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801cdfa:	9b07      	ldr	r3, [sp, #28]
 801cdfc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ce00:	4423      	add	r3, r4
 801ce02:	9307      	str	r3, [sp, #28]
 801ce04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce06:	2b00      	cmp	r3, #0
 801ce08:	f340 80c5 	ble.w	801cf96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801ce0c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ce10:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce12:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ce16:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ce1a:	eef0 6a62 	vmov.f32	s13, s5
 801ce1e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ce22:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ce26:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce2a:	ee16 ba90 	vmov	fp, s13
 801ce2e:	eef0 6a43 	vmov.f32	s13, s6
 801ce32:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ce36:	ee16 4a90 	vmov	r4, s13
 801ce3a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ce3e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ce42:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ce46:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ce4a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ce4e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ce52:	ee12 2a90 	vmov	r2, s5
 801ce56:	eef0 2a47 	vmov.f32	s5, s14
 801ce5a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce5e:	ee13 2a10 	vmov	r2, s6
 801ce62:	9327      	str	r3, [sp, #156]	@ 0x9c
 801ce64:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce66:	eeb0 3a67 	vmov.f32	s6, s15
 801ce6a:	fb92 f3f3 	sdiv	r3, r2, r3
 801ce6e:	9328      	str	r3, [sp, #160]	@ 0xa0
 801ce70:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce72:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801ce74:	3b01      	subs	r3, #1
 801ce76:	9309      	str	r3, [sp, #36]	@ 0x24
 801ce78:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801ce7a:	bf08      	it	eq
 801ce7c:	4613      	moveq	r3, r2
 801ce7e:	9306      	str	r3, [sp, #24]
 801ce80:	e6d7      	b.n	801cc32 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ce82:	f110 0c01 	adds.w	ip, r0, #1
 801ce86:	d483      	bmi.n	801cd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce88:	4563      	cmp	r3, ip
 801ce8a:	db81      	blt.n	801cd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce8c:	f115 0c01 	adds.w	ip, r5, #1
 801ce90:	f53f af7e 	bmi.w	801cd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce94:	4567      	cmp	r7, ip
 801ce96:	f6ff af7b 	blt.w	801cd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ce9a:	b23f      	sxth	r7, r7
 801ce9c:	b21b      	sxth	r3, r3
 801ce9e:	9700      	str	r7, [sp, #0]
 801cea0:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801cea4:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801cea8:	9a08      	ldr	r2, [sp, #32]
 801ceaa:	4631      	mov	r1, r6
 801ceac:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ceae:	f7ff fdf9 	bl	801caa4 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ceb2:	e76d      	b.n	801cd90 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ceb4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ceb6:	ea4f 402b 	mov.w	r0, fp, asr #16
 801ceba:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801cebe:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801cec2:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801cec6:	1421      	asrs	r1, r4, #16
 801cec8:	930a      	str	r3, [sp, #40]	@ 0x28
 801ceca:	fb0c 0101 	mla	r1, ip, r1, r0
 801cece:	9808      	ldr	r0, [sp, #32]
 801ced0:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ced4:	1845      	adds	r5, r0, r1
 801ced6:	5c40      	ldrb	r0, [r0, r1]
 801ced8:	796f      	ldrb	r7, [r5, #5]
 801ceda:	7869      	ldrb	r1, [r5, #1]
 801cedc:	f895 8002 	ldrb.w	r8, [r5, #2]
 801cee0:	f895 a003 	ldrb.w	sl, [r5, #3]
 801cee4:	f895 9004 	ldrb.w	r9, [r5, #4]
 801cee8:	970c      	str	r7, [sp, #48]	@ 0x30
 801ceea:	b1a2      	cbz	r2, 801cf16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801ceec:	2703      	movs	r7, #3
 801ceee:	f06f 0304 	mvn.w	r3, #4
 801cef2:	3505      	adds	r5, #5
 801cef4:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801cef8:	eb05 070c 	add.w	r7, r5, ip
 801cefc:	f815 500c 	ldrb.w	r5, [r5, ip]
 801cf00:	9513      	str	r5, [sp, #76]	@ 0x4c
 801cf02:	787d      	ldrb	r5, [r7, #1]
 801cf04:	9515      	str	r5, [sp, #84]	@ 0x54
 801cf06:	78bd      	ldrb	r5, [r7, #2]
 801cf08:	9517      	str	r5, [sp, #92]	@ 0x5c
 801cf0a:	78fd      	ldrb	r5, [r7, #3]
 801cf0c:	9514      	str	r5, [sp, #80]	@ 0x50
 801cf0e:	793d      	ldrb	r5, [r7, #4]
 801cf10:	9516      	str	r5, [sp, #88]	@ 0x58
 801cf12:	797d      	ldrb	r5, [r7, #5]
 801cf14:	9518      	str	r5, [sp, #96]	@ 0x60
 801cf16:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801cf1a:	b292      	uxth	r2, r2
 801cf1c:	3603      	adds	r6, #3
 801cf1e:	f10e 3eff 	add.w	lr, lr, #4294967295
 801cf22:	fb03 f502 	mul.w	r5, r3, r2
 801cf26:	011b      	lsls	r3, r3, #4
 801cf28:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801cf2c:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801cf30:	1b5b      	subs	r3, r3, r5
 801cf32:	b292      	uxth	r2, r2
 801cf34:	b29b      	uxth	r3, r3
 801cf36:	1abf      	subs	r7, r7, r2
 801cf38:	fb03 f909 	mul.w	r9, r3, r9
 801cf3c:	b2bf      	uxth	r7, r7
 801cf3e:	fb03 fa0a 	mul.w	sl, r3, sl
 801cf42:	fb07 9901 	mla	r9, r7, r1, r9
 801cf46:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801cf48:	fb07 aa00 	mla	sl, r7, r0, sl
 801cf4c:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801cf4e:	fb02 9901 	mla	r9, r2, r1, r9
 801cf52:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801cf54:	fb02 aa00 	mla	sl, r2, r0, sl
 801cf58:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801cf5a:	fb05 9901 	mla	r9, r5, r1, r9
 801cf5e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801cf60:	fb05 aa00 	mla	sl, r5, r0, sl
 801cf64:	434b      	muls	r3, r1
 801cf66:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801cf68:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801cf6c:	fb07 3308 	mla	r3, r7, r8, r3
 801cf70:	ea4f 2929 	mov.w	r9, r9, asr #8
 801cf74:	f806 ac06 	strb.w	sl, [r6, #-6]
 801cf78:	fb02 3201 	mla	r2, r2, r1, r3
 801cf7c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801cf7e:	f806 9c05 	strb.w	r9, [r6, #-5]
 801cf82:	fb05 2503 	mla	r5, r5, r3, r2
 801cf86:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cf88:	122d      	asrs	r5, r5, #8
 801cf8a:	449b      	add	fp, r3
 801cf8c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cf8e:	f806 5c04 	strb.w	r5, [r6, #-4]
 801cf92:	441c      	add	r4, r3
 801cf94:	e72b      	b.n	801cdee <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801cf96:	b01b      	add	sp, #108	@ 0x6c
 801cf98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801cf9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801cf9c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cfa0:	b087      	sub	sp, #28
 801cfa2:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801cfa6:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801cfaa:	fb05 7003 	mla	r0, r5, r3, r7
 801cfae:	2d00      	cmp	r5, #0
 801cfb0:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801cfb4:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801cfb8:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801cfbc:	f2c0 811f 	blt.w	801d1fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801cfc0:	45a8      	cmp	r8, r5
 801cfc2:	f340 811c 	ble.w	801d1fe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801cfc6:	2f00      	cmp	r7, #0
 801cfc8:	f2c0 8117 	blt.w	801d1fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801cfcc:	42bb      	cmp	r3, r7
 801cfce:	f340 8114 	ble.w	801d1fa <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801cfd2:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801cfd6:	1c7a      	adds	r2, r7, #1
 801cfd8:	f100 8114 	bmi.w	801d204 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801cfdc:	4293      	cmp	r3, r2
 801cfde:	f340 8111 	ble.w	801d204 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801cfe2:	2c00      	cmp	r4, #0
 801cfe4:	f000 8110 	beq.w	801d208 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801cfe8:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801cfec:	3501      	adds	r5, #1
 801cfee:	f100 810f 	bmi.w	801d210 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801cff2:	45a8      	cmp	r8, r5
 801cff4:	f340 810c 	ble.w	801d210 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801cff8:	f1be 0f00 	cmp.w	lr, #0
 801cffc:	f000 810b 	beq.w	801d216 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801d000:	2f00      	cmp	r7, #0
 801d002:	f2c0 8103 	blt.w	801d20c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801d006:	42bb      	cmp	r3, r7
 801d008:	f340 8100 	ble.w	801d20c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801d00c:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d010:	3701      	adds	r7, #1
 801d012:	f100 8103 	bmi.w	801d21c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801d016:	42bb      	cmp	r3, r7
 801d018:	f340 8100 	ble.w	801d21c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801d01c:	2c00      	cmp	r4, #0
 801d01e:	f000 80ff 	beq.w	801d220 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801d022:	3301      	adds	r3, #1
 801d024:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d028:	fa1f fc84 	uxth.w	ip, r4
 801d02c:	fa1f fe8e 	uxth.w	lr, lr
 801d030:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d034:	fb0c f90e 	mul.w	r9, ip, lr
 801d038:	0e13      	lsrs	r3, r2, #24
 801d03a:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d03e:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d042:	9302      	str	r3, [sp, #8]
 801d044:	ebac 0709 	sub.w	r7, ip, r9
 801d048:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d04c:	fa1f f48e 	uxth.w	r4, lr
 801d050:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d054:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d058:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801d05c:	fb0a fe0e 	mul.w	lr, sl, lr
 801d060:	1b1b      	subs	r3, r3, r4
 801d062:	fb0a f606 	mul.w	r6, sl, r6
 801d066:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801d06a:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801d06e:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801d072:	b29b      	uxth	r3, r3
 801d074:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d078:	b2bf      	uxth	r7, r7
 801d07a:	9301      	str	r3, [sp, #4]
 801d07c:	44e6      	add	lr, ip
 801d07e:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801d082:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d086:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801d08a:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801d08e:	9303      	str	r3, [sp, #12]
 801d090:	0a33      	lsrs	r3, r6, #8
 801d092:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801d096:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801d09a:	9304      	str	r3, [sp, #16]
 801d09c:	fb0b f606 	mul.w	r6, fp, r6
 801d0a0:	fb0b f000 	mul.w	r0, fp, r0
 801d0a4:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801d0a8:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d0ac:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0b0:	44b6      	add	lr, r6
 801d0b2:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801d0b6:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801d0ba:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801d0be:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801d0c2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d0c6:	fb08 f606 	mul.w	r6, r8, r6
 801d0ca:	0a03      	lsrs	r3, r0, #8
 801d0cc:	fb08 f505 	mul.w	r5, r8, r5
 801d0d0:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d0d4:	0a30      	lsrs	r0, r6, #8
 801d0d6:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d0da:	9305      	str	r3, [sp, #20]
 801d0dc:	0e13      	lsrs	r3, r2, #24
 801d0de:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d0e2:	fb0e fe07 	mul.w	lr, lr, r7
 801d0e6:	4430      	add	r0, r6
 801d0e8:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801d0ec:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801d0f0:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801d0f4:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d0f8:	0a00      	lsrs	r0, r0, #8
 801d0fa:	435e      	muls	r6, r3
 801d0fc:	0a2d      	lsrs	r5, r5, #8
 801d0fe:	435a      	muls	r2, r3
 801d100:	9b03      	ldr	r3, [sp, #12]
 801d102:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801d106:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801d10a:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801d10e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d112:	44b4      	add	ip, r6
 801d114:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801d118:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d11c:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801d120:	9e01      	ldr	r6, [sp, #4]
 801d122:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d126:	fb03 ee06 	mla	lr, r3, r6, lr
 801d12a:	9b04      	ldr	r3, [sp, #16]
 801d12c:	0a12      	lsrs	r2, r2, #8
 801d12e:	fb0c ee09 	mla	lr, ip, r9, lr
 801d132:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801d136:	9b05      	ldr	r3, [sp, #20]
 801d138:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d13c:	fb00 ee04 	mla	lr, r0, r4, lr
 801d140:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d144:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801d148:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801d14c:	9b01      	ldr	r3, [sp, #4]
 801d14e:	fb07 fe0e 	mul.w	lr, r7, lr
 801d152:	fb07 f70b 	mul.w	r7, r7, fp
 801d156:	fb03 ee06 	mla	lr, r3, r6, lr
 801d15a:	fb03 730a 	mla	r3, r3, sl, r7
 801d15e:	fb09 e202 	mla	r2, r9, r2, lr
 801d162:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801d166:	fb04 2e0e 	mla	lr, r4, lr, r2
 801d16a:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801d16e:	fb04 3408 	mla	r4, r4, r8, r3
 801d172:	9b02      	ldr	r3, [sp, #8]
 801d174:	b292      	uxth	r2, r2
 801d176:	fb09 4903 	mla	r9, r9, r3, r4
 801d17a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d17e:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801d182:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801d186:	fb09 f902 	mul.w	r9, r9, r2
 801d18a:	ea40 0e0e 	orr.w	lr, r0, lr
 801d18e:	f109 0301 	add.w	r3, r9, #1
 801d192:	fa5f f08e 	uxtb.w	r0, lr
 801d196:	fb10 f002 	smulbb	r0, r0, r2
 801d19a:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801d19e:	780b      	ldrb	r3, [r1, #0]
 801d1a0:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801d1a4:	fa5f f989 	uxtb.w	r9, r9
 801d1a8:	fb03 0309 	mla	r3, r3, r9, r0
 801d1ac:	b29b      	uxth	r3, r3
 801d1ae:	1c58      	adds	r0, r3, #1
 801d1b0:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d1b4:	7848      	ldrb	r0, [r1, #1]
 801d1b6:	fb10 f009 	smulbb	r0, r0, r9
 801d1ba:	121b      	asrs	r3, r3, #8
 801d1bc:	700b      	strb	r3, [r1, #0]
 801d1be:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801d1c2:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801d1c6:	fb03 0302 	mla	r3, r3, r2, r0
 801d1ca:	b29b      	uxth	r3, r3
 801d1cc:	1c58      	adds	r0, r3, #1
 801d1ce:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801d1d2:	121b      	asrs	r3, r3, #8
 801d1d4:	704b      	strb	r3, [r1, #1]
 801d1d6:	788b      	ldrb	r3, [r1, #2]
 801d1d8:	fb13 f909 	smulbb	r9, r3, r9
 801d1dc:	fb0e 9e02 	mla	lr, lr, r2, r9
 801d1e0:	fa1f fe8e 	uxth.w	lr, lr
 801d1e4:	f10e 0301 	add.w	r3, lr, #1
 801d1e8:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801d1ec:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d1f0:	f881 e002 	strb.w	lr, [r1, #2]
 801d1f4:	b007      	add	sp, #28
 801d1f6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d1fa:	2600      	movs	r6, #0
 801d1fc:	e6eb      	b.n	801cfd6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801d1fe:	2000      	movs	r0, #0
 801d200:	4606      	mov	r6, r0
 801d202:	e6f3      	b.n	801cfec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d204:	2000      	movs	r0, #0
 801d206:	e6f1      	b.n	801cfec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d208:	4620      	mov	r0, r4
 801d20a:	e6ef      	b.n	801cfec <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801d20c:	2500      	movs	r5, #0
 801d20e:	e6ff      	b.n	801d010 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801d210:	2200      	movs	r2, #0
 801d212:	4615      	mov	r5, r2
 801d214:	e708      	b.n	801d028 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d216:	4672      	mov	r2, lr
 801d218:	4675      	mov	r5, lr
 801d21a:	e705      	b.n	801d028 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d21c:	2200      	movs	r2, #0
 801d21e:	e703      	b.n	801d028 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801d220:	4622      	mov	r2, r4
 801d222:	e701      	b.n	801d028 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801d224 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d224:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d228:	b09d      	sub	sp, #116	@ 0x74
 801d22a:	9219      	str	r2, [sp, #100]	@ 0x64
 801d22c:	9307      	str	r3, [sp, #28]
 801d22e:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801d230:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801d234:	901b      	str	r0, [sp, #108]	@ 0x6c
 801d236:	931a      	str	r3, [sp, #104]	@ 0x68
 801d238:	6850      	ldr	r0, [r2, #4]
 801d23a:	9117      	str	r1, [sp, #92]	@ 0x5c
 801d23c:	6812      	ldr	r2, [r2, #0]
 801d23e:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801d242:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801d246:	fb00 1303 	mla	r3, r0, r3, r1
 801d24a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d24e:	18d3      	adds	r3, r2, r3
 801d250:	930a      	str	r3, [sp, #40]	@ 0x28
 801d252:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d254:	681b      	ldr	r3, [r3, #0]
 801d256:	9310      	str	r3, [sp, #64]	@ 0x40
 801d258:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801d25c:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d25e:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d260:	2b00      	cmp	r3, #0
 801d262:	dc03      	bgt.n	801d26c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801d264:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801d266:	2b00      	cmp	r3, #0
 801d268:	f340 8368 	ble.w	801d93c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d26c:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d26e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d272:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d276:	1e48      	subs	r0, r1, #1
 801d278:	1e57      	subs	r7, r2, #1
 801d27a:	9b07      	ldr	r3, [sp, #28]
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	f340 8187 	ble.w	801d590 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801d282:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801d286:	ea4f 4326 	mov.w	r3, r6, asr #16
 801d28a:	d406      	bmi.n	801d29a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d28c:	4584      	cmp	ip, r0
 801d28e:	da04      	bge.n	801d29a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d290:	2b00      	cmp	r3, #0
 801d292:	db02      	blt.n	801d29a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801d294:	42bb      	cmp	r3, r7
 801d296:	f2c0 817c 	blt.w	801d592 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801d29a:	f11c 0c01 	adds.w	ip, ip, #1
 801d29e:	f100 816c 	bmi.w	801d57a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d2a2:	4561      	cmp	r1, ip
 801d2a4:	f2c0 8169 	blt.w	801d57a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d2a8:	3301      	adds	r3, #1
 801d2aa:	f100 8166 	bmi.w	801d57a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d2ae:	429a      	cmp	r2, r3
 801d2b0:	f2c0 8163 	blt.w	801d57a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801d2b4:	9b07      	ldr	r3, [sp, #28]
 801d2b6:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801d2b8:	9318      	str	r3, [sp, #96]	@ 0x60
 801d2ba:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d2bc:	2b00      	cmp	r3, #0
 801d2be:	f340 8186 	ble.w	801d5ce <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801d2c2:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d2c4:	142a      	asrs	r2, r5, #16
 801d2c6:	ea4f 4026 	mov.w	r0, r6, asr #16
 801d2ca:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d2ce:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801d2d2:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801d2d6:	f100 81cb 	bmi.w	801d670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d2da:	f10e 38ff 	add.w	r8, lr, #4294967295
 801d2de:	4542      	cmp	r2, r8
 801d2e0:	f280 81c6 	bge.w	801d670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d2e4:	2800      	cmp	r0, #0
 801d2e6:	f2c0 81c3 	blt.w	801d670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d2ea:	f103 38ff 	add.w	r8, r3, #4294967295
 801d2ee:	4540      	cmp	r0, r8
 801d2f0:	f280 81be 	bge.w	801d670 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801d2f4:	fa0f f38e 	sxth.w	r3, lr
 801d2f8:	fb00 2203 	mla	r2, r0, r3, r2
 801d2fc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d2fe:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801d302:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801d306:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801d30a:	2900      	cmp	r1, #0
 801d30c:	f000 81a6 	beq.w	801d65c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801d310:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801d314:	900c      	str	r0, [sp, #48]	@ 0x30
 801d316:	0e00      	lsrs	r0, r0, #24
 801d318:	9013      	str	r0, [sp, #76]	@ 0x4c
 801d31a:	f1bc 0f00 	cmp.w	ip, #0
 801d31e:	d00f      	beq.n	801d340 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d320:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801d324:	3b01      	subs	r3, #1
 801d326:	009b      	lsls	r3, r3, #2
 801d328:	3304      	adds	r3, #4
 801d32a:	eb08 0003 	add.w	r0, r8, r3
 801d32e:	f858 3003 	ldr.w	r3, [r8, r3]
 801d332:	9308      	str	r3, [sp, #32]
 801d334:	0e1b      	lsrs	r3, r3, #24
 801d336:	9311      	str	r3, [sp, #68]	@ 0x44
 801d338:	6843      	ldr	r3, [r0, #4]
 801d33a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d33c:	0e1b      	lsrs	r3, r3, #24
 801d33e:	9314      	str	r3, [sp, #80]	@ 0x50
 801d340:	b289      	uxth	r1, r1
 801d342:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d344:	fa1f fc8c 	uxth.w	ip, ip
 801d348:	0108      	lsls	r0, r1, #4
 801d34a:	fb01 f90c 	mul.w	r9, r1, ip
 801d34e:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801d352:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801d356:	eba0 0809 	sub.w	r8, r0, r9
 801d35a:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801d35c:	fa1f f18c 	uxth.w	r1, ip
 801d360:	fa1f f888 	uxth.w	r8, r8
 801d364:	1a5b      	subs	r3, r3, r1
 801d366:	fb08 f000 	mul.w	r0, r8, r0
 801d36a:	b29b      	uxth	r3, r3
 801d36c:	fb03 000e 	mla	r0, r3, lr, r0
 801d370:	fb01 0004 	mla	r0, r1, r4, r0
 801d374:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d376:	fb09 0004 	mla	r0, r9, r4, r0
 801d37a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d37e:	2800      	cmp	r0, #0
 801d380:	f000 80f2 	beq.w	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d384:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801d388:	d01b      	beq.n	801d3c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801d38a:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801d38e:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d392:	fb0e fa0a 	mul.w	sl, lr, sl
 801d396:	fb0e fe02 	mul.w	lr, lr, r2
 801d39a:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801d39e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d3a2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801d3a6:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d3aa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801d3ae:	4452      	add	r2, sl
 801d3b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d3b4:	0a12      	lsrs	r2, r2, #8
 801d3b6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d3ba:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801d3be:	ea42 020c 	orr.w	r2, r2, ip
 801d3c2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d3c4:	2cff      	cmp	r4, #255	@ 0xff
 801d3c6:	d021      	beq.n	801d40c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801d3c8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d3ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d3ce:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d3d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801d3d4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d3d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d3da:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d3dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d3e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d3e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801d3e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d3ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d3f0:	44de      	add	lr, fp
 801d3f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d3f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d3fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d3fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d402:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d406:	ea4e 040a 	orr.w	r4, lr, sl
 801d40a:	940c      	str	r4, [sp, #48]	@ 0x30
 801d40c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d40e:	2cff      	cmp	r4, #255	@ 0xff
 801d410:	d021      	beq.n	801d456 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801d412:	9c08      	ldr	r4, [sp, #32]
 801d414:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d418:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d41a:	fb04 fb0b 	mul.w	fp, r4, fp
 801d41e:	9c08      	ldr	r4, [sp, #32]
 801d420:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d424:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d426:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d42a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d42e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d432:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d436:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d43a:	44de      	add	lr, fp
 801d43c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d440:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d444:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d448:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d44c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d450:	ea4e 040a 	orr.w	r4, lr, sl
 801d454:	9408      	str	r4, [sp, #32]
 801d456:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d458:	2cff      	cmp	r4, #255	@ 0xff
 801d45a:	d021      	beq.n	801d4a0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801d45c:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d45e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801d462:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d464:	fb04 fb0b 	mul.w	fp, r4, fp
 801d468:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d46a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d46e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d470:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801d474:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801d478:	fb04 fa0a 	mul.w	sl, r4, sl
 801d47c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d480:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801d484:	44de      	add	lr, fp
 801d486:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801d48a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801d48e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d492:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801d496:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d49a:	ea4e 040a 	orr.w	r4, lr, sl
 801d49e:	940d      	str	r4, [sp, #52]	@ 0x34
 801d4a0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d4a2:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801d4a6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801d4aa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d4ae:	9c08      	ldr	r4, [sp, #32]
 801d4b0:	fb08 fc0c 	mul.w	ip, r8, ip
 801d4b4:	fb03 cc0e 	mla	ip, r3, lr, ip
 801d4b8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d4bc:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d4be:	fb01 cc0e 	mla	ip, r1, lr, ip
 801d4c2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801d4c6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801d4c8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801d4cc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801d4d0:	fb08 f80e 	mul.w	r8, r8, lr
 801d4d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d4d8:	fb03 8202 	mla	r2, r3, r2, r8
 801d4dc:	9b08      	ldr	r3, [sp, #32]
 801d4de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d4e2:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801d4e6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d4e8:	fb01 220a 	mla	r2, r1, sl, r2
 801d4ec:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801d4f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d4f2:	fb09 2901 	mla	r9, r9, r1, r2
 801d4f6:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801d4f8:	4343      	muls	r3, r0
 801d4fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801d4fe:	1c58      	adds	r0, r3, #1
 801d500:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801d504:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801d508:	783b      	ldrb	r3, [r7, #0]
 801d50a:	ea4c 0c09 	orr.w	ip, ip, r9
 801d50e:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801d512:	fa5f f28c 	uxtb.w	r2, ip
 801d516:	b2c0      	uxtb	r0, r0
 801d518:	fb12 f201 	smulbb	r2, r2, r1
 801d51c:	fb03 2300 	mla	r3, r3, r0, r2
 801d520:	b29b      	uxth	r3, r3
 801d522:	1c5a      	adds	r2, r3, #1
 801d524:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d528:	787a      	ldrb	r2, [r7, #1]
 801d52a:	fb12 f200 	smulbb	r2, r2, r0
 801d52e:	121b      	asrs	r3, r3, #8
 801d530:	703b      	strb	r3, [r7, #0]
 801d532:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801d536:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801d53a:	fb03 2301 	mla	r3, r3, r1, r2
 801d53e:	b29b      	uxth	r3, r3
 801d540:	1c5a      	adds	r2, r3, #1
 801d542:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d546:	121b      	asrs	r3, r3, #8
 801d548:	707b      	strb	r3, [r7, #1]
 801d54a:	78bb      	ldrb	r3, [r7, #2]
 801d54c:	fb13 f000 	smulbb	r0, r3, r0
 801d550:	fb0c 0c01 	mla	ip, ip, r1, r0
 801d554:	fa1f fc8c 	uxth.w	ip, ip
 801d558:	f10c 0301 	add.w	r3, ip, #1
 801d55c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801d560:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801d564:	f887 c002 	strb.w	ip, [r7, #2]
 801d568:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d56a:	3703      	adds	r7, #3
 801d56c:	441d      	add	r5, r3
 801d56e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d570:	441e      	add	r6, r3
 801d572:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801d574:	3b01      	subs	r3, #1
 801d576:	9318      	str	r3, [sp, #96]	@ 0x60
 801d578:	e69f      	b.n	801d2ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d57a:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d57c:	441d      	add	r5, r3
 801d57e:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d580:	441e      	add	r6, r3
 801d582:	9b07      	ldr	r3, [sp, #28]
 801d584:	3b01      	subs	r3, #1
 801d586:	9307      	str	r3, [sp, #28]
 801d588:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d58a:	3303      	adds	r3, #3
 801d58c:	930a      	str	r3, [sp, #40]	@ 0x28
 801d58e:	e674      	b.n	801d27a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801d590:	d025      	beq.n	801d5de <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801d592:	9b07      	ldr	r3, [sp, #28]
 801d594:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801d596:	3b01      	subs	r3, #1
 801d598:	fb00 5003 	mla	r0, r0, r3, r5
 801d59c:	1400      	asrs	r0, r0, #16
 801d59e:	f53f ae89 	bmi.w	801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d5a2:	3901      	subs	r1, #1
 801d5a4:	4288      	cmp	r0, r1
 801d5a6:	f6bf ae85 	bge.w	801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d5aa:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801d5ac:	fb01 6303 	mla	r3, r1, r3, r6
 801d5b0:	141b      	asrs	r3, r3, #16
 801d5b2:	f53f ae7f 	bmi.w	801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d5b6:	3a01      	subs	r2, #1
 801d5b8:	4293      	cmp	r3, r2
 801d5ba:	f6bf ae7b 	bge.w	801d2b4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d5be:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5c0:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d5c4:	f103 0e03 	add.w	lr, r3, #3
 801d5c8:	f1bb 0f00 	cmp.w	fp, #0
 801d5cc:	dc6e      	bgt.n	801d6ac <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801d5ce:	9b07      	ldr	r3, [sp, #28]
 801d5d0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d5d4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d5d6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d5da:	4423      	add	r3, r4
 801d5dc:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5de:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d5e0:	2b00      	cmp	r3, #0
 801d5e2:	f340 81ab 	ble.w	801d93c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801d5e6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d5ea:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d5ec:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d5f0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d5f4:	eef0 6a62 	vmov.f32	s13, s5
 801d5f8:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d5fc:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d600:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d604:	ee16 5a90 	vmov	r5, s13
 801d608:	eef0 6a43 	vmov.f32	s13, s6
 801d60c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d610:	ee16 6a90 	vmov	r6, s13
 801d614:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d618:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d61c:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d620:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d624:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d628:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d62c:	ee12 2a90 	vmov	r2, s5
 801d630:	eef0 2a47 	vmov.f32	s5, s14
 801d634:	fb92 f3f3 	sdiv	r3, r2, r3
 801d638:	ee13 2a10 	vmov	r2, s6
 801d63c:	9329      	str	r3, [sp, #164]	@ 0xa4
 801d63e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d640:	eeb0 3a67 	vmov.f32	s6, s15
 801d644:	fb92 f3f3 	sdiv	r3, r2, r3
 801d648:	932a      	str	r3, [sp, #168]	@ 0xa8
 801d64a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801d64c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801d64e:	3b01      	subs	r3, #1
 801d650:	9317      	str	r3, [sp, #92]	@ 0x5c
 801d652:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801d654:	bf08      	it	eq
 801d656:	4613      	moveq	r3, r2
 801d658:	9307      	str	r3, [sp, #28]
 801d65a:	e600      	b.n	801d25e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801d65c:	f1bc 0f00 	cmp.w	ip, #0
 801d660:	f43f ae6e 	beq.w	801d340 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d664:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801d668:	9308      	str	r3, [sp, #32]
 801d66a:	0e1b      	lsrs	r3, r3, #24
 801d66c:	9311      	str	r3, [sp, #68]	@ 0x44
 801d66e:	e667      	b.n	801d340 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801d670:	f112 0801 	adds.w	r8, r2, #1
 801d674:	f53f af78 	bmi.w	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d678:	45c6      	cmp	lr, r8
 801d67a:	f6ff af75 	blt.w	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d67e:	f110 0801 	adds.w	r8, r0, #1
 801d682:	f53f af71 	bmi.w	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d686:	4543      	cmp	r3, r8
 801d688:	f6ff af6e 	blt.w	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d68c:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801d68e:	b21b      	sxth	r3, r3
 801d690:	9201      	str	r2, [sp, #4]
 801d692:	9300      	str	r3, [sp, #0]
 801d694:	fa0f f38e 	sxth.w	r3, lr
 801d698:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801d69a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d69e:	e9cd c404 	strd	ip, r4, [sp, #16]
 801d6a2:	4639      	mov	r1, r7
 801d6a4:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801d6a6:	f7ff fc79 	bl	801cf9c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801d6aa:	e75d      	b.n	801d568 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801d6ac:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801d6ae:	142f      	asrs	r7, r5, #16
 801d6b0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801d6b2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801d6b6:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801d6ba:	1433      	asrs	r3, r6, #16
 801d6bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801d6c0:	fb02 7303 	mla	r3, r2, r3, r7
 801d6c4:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801d6c8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801d6cc:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d6d0:	2900      	cmp	r1, #0
 801d6d2:	f000 812a 	beq.w	801d92a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801d6d6:	687c      	ldr	r4, [r7, #4]
 801d6d8:	940e      	str	r4, [sp, #56]	@ 0x38
 801d6da:	0e24      	lsrs	r4, r4, #24
 801d6dc:	9415      	str	r4, [sp, #84]	@ 0x54
 801d6de:	b178      	cbz	r0, 801d700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d6e0:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801d6e4:	3a01      	subs	r2, #1
 801d6e6:	0092      	lsls	r2, r2, #2
 801d6e8:	3204      	adds	r2, #4
 801d6ea:	eb07 0802 	add.w	r8, r7, r2
 801d6ee:	58ba      	ldr	r2, [r7, r2]
 801d6f0:	9209      	str	r2, [sp, #36]	@ 0x24
 801d6f2:	0e12      	lsrs	r2, r2, #24
 801d6f4:	9212      	str	r2, [sp, #72]	@ 0x48
 801d6f6:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801d6fa:	920f      	str	r2, [sp, #60]	@ 0x3c
 801d6fc:	0e12      	lsrs	r2, r2, #24
 801d6fe:	9216      	str	r2, [sp, #88]	@ 0x58
 801d700:	b289      	uxth	r1, r1
 801d702:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d704:	b280      	uxth	r0, r0
 801d706:	fb01 f900 	mul.w	r9, r1, r0
 801d70a:	0109      	lsls	r1, r1, #4
 801d70c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d710:	eba1 0809 	sub.w	r8, r1, r9
 801d714:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801d718:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801d71a:	b280      	uxth	r0, r0
 801d71c:	fa1f f888 	uxth.w	r8, r8
 801d720:	1a12      	subs	r2, r2, r0
 801d722:	fb08 f101 	mul.w	r1, r8, r1
 801d726:	b292      	uxth	r2, r2
 801d728:	fb02 110c 	mla	r1, r2, ip, r1
 801d72c:	fb00 1104 	mla	r1, r0, r4, r1
 801d730:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d732:	fb09 1104 	mla	r1, r9, r4, r1
 801d736:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d73a:	2900      	cmp	r1, #0
 801d73c:	f000 80ec 	beq.w	801d918 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801d740:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d744:	d019      	beq.n	801d77a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801d746:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d74a:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d74e:	fb0c fa0a 	mul.w	sl, ip, sl
 801d752:	fb0c fc03 	mul.w	ip, ip, r3
 801d756:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d75a:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d75e:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d762:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d766:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d76a:	4453      	add	r3, sl
 801d76c:	0a3f      	lsrs	r7, r7, #8
 801d76e:	0a1b      	lsrs	r3, r3, #8
 801d770:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d774:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d778:	433b      	orrs	r3, r7
 801d77a:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d77c:	2cff      	cmp	r4, #255	@ 0xff
 801d77e:	d020      	beq.n	801d7c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801d780:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d782:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d786:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d788:	4367      	muls	r7, r4
 801d78a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d78c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d790:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d794:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d796:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d79a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d79e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d7a2:	44bc      	add	ip, r7
 801d7a4:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d7a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d7ac:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d7b0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d7b4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d7b8:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d7bc:	ea4c 040a 	orr.w	r4, ip, sl
 801d7c0:	940e      	str	r4, [sp, #56]	@ 0x38
 801d7c2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d7c4:	2cff      	cmp	r4, #255	@ 0xff
 801d7c6:	d020      	beq.n	801d80a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801d7c8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d7ca:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d7ce:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d7d0:	4367      	muls	r7, r4
 801d7d2:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d7d4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d7d8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d7dc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801d7de:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d7e2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d7e6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d7ea:	44bc      	add	ip, r7
 801d7ec:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d7f0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d7f4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d7f8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d7fc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d800:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d804:	ea4c 040a 	orr.w	r4, ip, sl
 801d808:	9409      	str	r4, [sp, #36]	@ 0x24
 801d80a:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d80c:	2cff      	cmp	r4, #255	@ 0xff
 801d80e:	d020      	beq.n	801d852 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801d810:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d812:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d816:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d818:	4367      	muls	r7, r4
 801d81a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d81c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d820:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d824:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801d826:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d82a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d82e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d832:	44bc      	add	ip, r7
 801d834:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d838:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d83c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d840:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d844:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d848:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d84c:	ea4c 040a 	orr.w	r4, ip, sl
 801d850:	940f      	str	r4, [sp, #60]	@ 0x3c
 801d852:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d854:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d858:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d85c:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d860:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d862:	fb08 f707 	mul.w	r7, r8, r7
 801d866:	fb02 770c 	mla	r7, r2, ip, r7
 801d86a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d86e:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d870:	fb00 770c 	mla	r7, r0, ip, r7
 801d874:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d878:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d87a:	fb09 770c 	mla	r7, r9, ip, r7
 801d87e:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d882:	fb08 f80c 	mul.w	r8, r8, ip
 801d886:	0a3f      	lsrs	r7, r7, #8
 801d888:	fb02 8303 	mla	r3, r2, r3, r8
 801d88c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d88e:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d892:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801d896:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d898:	fb00 330a 	mla	r3, r0, sl, r3
 801d89c:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801d8a0:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801d8a2:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d8a6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d8a8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d8ac:	434b      	muls	r3, r1
 801d8ae:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d8b2:	1c59      	adds	r1, r3, #1
 801d8b4:	ea47 070c 	orr.w	r7, r7, ip
 801d8b8:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d8bc:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d8c0:	b2fa      	uxtb	r2, r7
 801d8c2:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801d8c6:	fb12 f200 	smulbb	r2, r2, r0
 801d8ca:	b2c9      	uxtb	r1, r1
 801d8cc:	fb03 2301 	mla	r3, r3, r1, r2
 801d8d0:	b29b      	uxth	r3, r3
 801d8d2:	1c5a      	adds	r2, r3, #1
 801d8d4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d8d8:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801d8dc:	fb12 f201 	smulbb	r2, r2, r1
 801d8e0:	121b      	asrs	r3, r3, #8
 801d8e2:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d8e6:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801d8ea:	0c3f      	lsrs	r7, r7, #16
 801d8ec:	fb03 2300 	mla	r3, r3, r0, r2
 801d8f0:	b29b      	uxth	r3, r3
 801d8f2:	1c5a      	adds	r2, r3, #1
 801d8f4:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801d8f8:	121b      	asrs	r3, r3, #8
 801d8fa:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d8fe:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d902:	fb13 f101 	smulbb	r1, r3, r1
 801d906:	fb07 1700 	mla	r7, r7, r0, r1
 801d90a:	b2bf      	uxth	r7, r7
 801d90c:	1c79      	adds	r1, r7, #1
 801d90e:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801d912:	123f      	asrs	r7, r7, #8
 801d914:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d918:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801d91a:	f10e 0e03 	add.w	lr, lr, #3
 801d91e:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d922:	441d      	add	r5, r3
 801d924:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801d926:	441e      	add	r6, r3
 801d928:	e64e      	b.n	801d5c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801d92a:	2800      	cmp	r0, #0
 801d92c:	f43f aee8 	beq.w	801d700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d930:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801d934:	9209      	str	r2, [sp, #36]	@ 0x24
 801d936:	0e12      	lsrs	r2, r2, #24
 801d938:	9212      	str	r2, [sp, #72]	@ 0x48
 801d93a:	e6e1      	b.n	801d700 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801d93c:	b01d      	add	sp, #116	@ 0x74
 801d93e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d942 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801d942:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d946:	b087      	sub	sp, #28
 801d948:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801d94c:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801d950:	fb05 7003 	mla	r0, r5, r3, r7
 801d954:	2d00      	cmp	r5, #0
 801d956:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801d95a:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801d95e:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801d962:	f2c0 810a 	blt.w	801db7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d966:	45a8      	cmp	r8, r5
 801d968:	f340 8107 	ble.w	801db7a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801d96c:	2f00      	cmp	r7, #0
 801d96e:	f2c0 8102 	blt.w	801db76 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d972:	42bb      	cmp	r3, r7
 801d974:	f340 80ff 	ble.w	801db76 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801d978:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801d97c:	1c7a      	adds	r2, r7, #1
 801d97e:	f100 80ff 	bmi.w	801db80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d982:	4293      	cmp	r3, r2
 801d984:	f340 80fc 	ble.w	801db80 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801d988:	2c00      	cmp	r4, #0
 801d98a:	f000 80fb 	beq.w	801db84 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801d98e:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801d992:	3501      	adds	r5, #1
 801d994:	f100 80fa 	bmi.w	801db8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d998:	45a8      	cmp	r8, r5
 801d99a:	f340 80f7 	ble.w	801db8c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801d99e:	f1be 0f00 	cmp.w	lr, #0
 801d9a2:	f000 80f6 	beq.w	801db92 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801d9a6:	2f00      	cmp	r7, #0
 801d9a8:	f2c0 80ee 	blt.w	801db88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d9ac:	42bb      	cmp	r3, r7
 801d9ae:	f340 80eb 	ble.w	801db88 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801d9b2:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801d9b6:	3701      	adds	r7, #1
 801d9b8:	f100 80ee 	bmi.w	801db98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d9bc:	42bb      	cmp	r3, r7
 801d9be:	f340 80eb 	ble.w	801db98 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801d9c2:	2c00      	cmp	r4, #0
 801d9c4:	f000 80ea 	beq.w	801db9c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801d9c8:	3301      	adds	r3, #1
 801d9ca:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801d9ce:	fa1f fc84 	uxth.w	ip, r4
 801d9d2:	fa1f fe8e 	uxth.w	lr, lr
 801d9d6:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801d9da:	fb0c f90e 	mul.w	r9, ip, lr
 801d9de:	0e13      	lsrs	r3, r2, #24
 801d9e0:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801d9e4:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801d9e8:	9302      	str	r3, [sp, #8]
 801d9ea:	ebac 0709 	sub.w	r7, ip, r9
 801d9ee:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801d9f2:	fa1f f48e 	uxth.w	r4, lr
 801d9f6:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801d9fa:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801d9fe:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801da02:	fb0a fe0e 	mul.w	lr, sl, lr
 801da06:	1b1b      	subs	r3, r3, r4
 801da08:	fb0a f606 	mul.w	r6, sl, r6
 801da0c:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801da10:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801da14:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801da18:	b29b      	uxth	r3, r3
 801da1a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801da1e:	b2bf      	uxth	r7, r7
 801da20:	9301      	str	r3, [sp, #4]
 801da22:	44e6      	add	lr, ip
 801da24:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801da28:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da2c:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801da30:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801da34:	9303      	str	r3, [sp, #12]
 801da36:	0a33      	lsrs	r3, r6, #8
 801da38:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801da3c:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801da40:	9304      	str	r3, [sp, #16]
 801da42:	fb0b f606 	mul.w	r6, fp, r6
 801da46:	fb0b f000 	mul.w	r0, fp, r0
 801da4a:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801da4e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801da52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da56:	44b6      	add	lr, r6
 801da58:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801da5c:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801da60:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801da64:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801da68:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801da6c:	fb08 f606 	mul.w	r6, r8, r6
 801da70:	0a03      	lsrs	r3, r0, #8
 801da72:	fb08 f505 	mul.w	r5, r8, r5
 801da76:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801da7a:	0a30      	lsrs	r0, r6, #8
 801da7c:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801da80:	9305      	str	r3, [sp, #20]
 801da82:	0e13      	lsrs	r3, r2, #24
 801da84:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801da88:	fb0e fe07 	mul.w	lr, lr, r7
 801da8c:	4430      	add	r0, r6
 801da8e:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801da92:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801da96:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801da9a:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801da9e:	0a00      	lsrs	r0, r0, #8
 801daa0:	435e      	muls	r6, r3
 801daa2:	0a2d      	lsrs	r5, r5, #8
 801daa4:	435a      	muls	r2, r3
 801daa6:	9b03      	ldr	r3, [sp, #12]
 801daa8:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801daac:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801dab0:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801dab4:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dab8:	44b4      	add	ip, r6
 801daba:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801dabe:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dac2:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801dac6:	9e01      	ldr	r6, [sp, #4]
 801dac8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dacc:	fb03 ee06 	mla	lr, r3, r6, lr
 801dad0:	9b04      	ldr	r3, [sp, #16]
 801dad2:	0a12      	lsrs	r2, r2, #8
 801dad4:	fb0c ee09 	mla	lr, ip, r9, lr
 801dad8:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801dadc:	9b05      	ldr	r3, [sp, #20]
 801dade:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dae2:	fb00 ee04 	mla	lr, r0, r4, lr
 801dae6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801daea:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801daee:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801daf2:	9b01      	ldr	r3, [sp, #4]
 801daf4:	fb07 fe0e 	mul.w	lr, r7, lr
 801daf8:	fb07 f70b 	mul.w	r7, r7, fp
 801dafc:	fb03 ee06 	mla	lr, r3, r6, lr
 801db00:	fb03 730a 	mla	r3, r3, sl, r7
 801db04:	fb09 e202 	mla	r2, r9, r2, lr
 801db08:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801db0c:	fb04 2e0e 	mla	lr, r4, lr, r2
 801db10:	fb04 3408 	mla	r4, r4, r8, r3
 801db14:	9b02      	ldr	r3, [sp, #8]
 801db16:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801db1a:	fb09 4903 	mla	r9, r9, r3, r4
 801db1e:	780b      	ldrb	r3, [r1, #0]
 801db20:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801db24:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801db28:	ea40 0e0e 	orr.w	lr, r0, lr
 801db2c:	fa5f f989 	uxtb.w	r9, r9
 801db30:	fb03 f209 	mul.w	r2, r3, r9
 801db34:	1c53      	adds	r3, r2, #1
 801db36:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db3a:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801db3e:	700b      	strb	r3, [r1, #0]
 801db40:	784b      	ldrb	r3, [r1, #1]
 801db42:	fb03 f309 	mul.w	r3, r3, r9
 801db46:	1c5a      	adds	r2, r3, #1
 801db48:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801db4c:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801db50:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801db54:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801db58:	704b      	strb	r3, [r1, #1]
 801db5a:	788b      	ldrb	r3, [r1, #2]
 801db5c:	fb03 f909 	mul.w	r9, r3, r9
 801db60:	f109 0301 	add.w	r3, r9, #1
 801db64:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801db68:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801db6c:	f881 e002 	strb.w	lr, [r1, #2]
 801db70:	b007      	add	sp, #28
 801db72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801db76:	2600      	movs	r6, #0
 801db78:	e700      	b.n	801d97c <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801db7a:	2000      	movs	r0, #0
 801db7c:	4606      	mov	r6, r0
 801db7e:	e708      	b.n	801d992 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801db80:	2000      	movs	r0, #0
 801db82:	e706      	b.n	801d992 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801db84:	4620      	mov	r0, r4
 801db86:	e704      	b.n	801d992 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801db88:	2500      	movs	r5, #0
 801db8a:	e714      	b.n	801d9b6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801db8c:	2200      	movs	r2, #0
 801db8e:	4615      	mov	r5, r2
 801db90:	e71d      	b.n	801d9ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db92:	4672      	mov	r2, lr
 801db94:	4675      	mov	r5, lr
 801db96:	e71a      	b.n	801d9ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db98:	2200      	movs	r2, #0
 801db9a:	e718      	b.n	801d9ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801db9c:	4622      	mov	r2, r4
 801db9e:	e716      	b.n	801d9ce <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801dba0 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801dba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dba4:	b099      	sub	sp, #100	@ 0x64
 801dba6:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801dbaa:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801dbac:	9017      	str	r0, [sp, #92]	@ 0x5c
 801dbae:	9306      	str	r3, [sp, #24]
 801dbb0:	6850      	ldr	r0, [r2, #4]
 801dbb2:	6812      	ldr	r2, [r2, #0]
 801dbb4:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801dbb8:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801dbbc:	fb00 1303 	mla	r3, r0, r3, r1
 801dbc0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801dbc4:	18d3      	adds	r3, r2, r3
 801dbc6:	9309      	str	r3, [sp, #36]	@ 0x24
 801dbc8:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dbca:	681b      	ldr	r3, [r3, #0]
 801dbcc:	930e      	str	r3, [sp, #56]	@ 0x38
 801dbce:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dbd0:	2b00      	cmp	r3, #0
 801dbd2:	dc03      	bgt.n	801dbdc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801dbd4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801dbd6:	2b00      	cmp	r3, #0
 801dbd8:	f340 8360 	ble.w	801e29c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801dbdc:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dbde:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801dbe2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801dbe6:	1e48      	subs	r0, r1, #1
 801dbe8:	1e57      	subs	r7, r2, #1
 801dbea:	9b06      	ldr	r3, [sp, #24]
 801dbec:	2b00      	cmp	r3, #0
 801dbee:	f340 817b 	ble.w	801dee8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801dbf2:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801dbf6:	ea4f 4326 	mov.w	r3, r6, asr #16
 801dbfa:	d406      	bmi.n	801dc0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dbfc:	4584      	cmp	ip, r0
 801dbfe:	da04      	bge.n	801dc0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc00:	2b00      	cmp	r3, #0
 801dc02:	db02      	blt.n	801dc0a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801dc04:	42bb      	cmp	r3, r7
 801dc06:	f2c0 8170 	blt.w	801deea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801dc0a:	f11c 0c01 	adds.w	ip, ip, #1
 801dc0e:	f100 8160 	bmi.w	801ded2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dc12:	4561      	cmp	r1, ip
 801dc14:	f2c0 815d 	blt.w	801ded2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dc18:	3301      	adds	r3, #1
 801dc1a:	f100 815a 	bmi.w	801ded2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dc1e:	429a      	cmp	r2, r3
 801dc20:	f2c0 8157 	blt.w	801ded2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801dc24:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801dc28:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801dc2a:	f1b8 0f00 	cmp.w	r8, #0
 801dc2e:	f340 8179 	ble.w	801df24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801dc32:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801dc34:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801dc38:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801dc3a:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801dc3e:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801dc42:	142a      	asrs	r2, r5, #16
 801dc44:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801dc48:	689b      	ldr	r3, [r3, #8]
 801dc4a:	f100 81be 	bmi.w	801dfca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dc4e:	f103 39ff 	add.w	r9, r3, #4294967295
 801dc52:	454a      	cmp	r2, r9
 801dc54:	f280 81b9 	bge.w	801dfca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dc58:	f1bc 0f00 	cmp.w	ip, #0
 801dc5c:	f2c0 81b5 	blt.w	801dfca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dc60:	f10e 39ff 	add.w	r9, lr, #4294967295
 801dc64:	45cc      	cmp	ip, r9
 801dc66:	f280 81b0 	bge.w	801dfca <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801dc6a:	b21b      	sxth	r3, r3
 801dc6c:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801dc6e:	fb0c 2203 	mla	r2, ip, r3, r2
 801dc72:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801dc76:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801dc7a:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801dc7e:	2900      	cmp	r1, #0
 801dc80:	f000 8197 	beq.w	801dfb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801dc84:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801dc88:	940a      	str	r4, [sp, #40]	@ 0x28
 801dc8a:	0e24      	lsrs	r4, r4, #24
 801dc8c:	9411      	str	r4, [sp, #68]	@ 0x44
 801dc8e:	b180      	cbz	r0, 801dcb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dc90:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801dc94:	3b01      	subs	r3, #1
 801dc96:	009b      	lsls	r3, r3, #2
 801dc98:	3304      	adds	r3, #4
 801dc9a:	eb09 0c03 	add.w	ip, r9, r3
 801dc9e:	f859 3003 	ldr.w	r3, [r9, r3]
 801dca2:	9307      	str	r3, [sp, #28]
 801dca4:	0e1b      	lsrs	r3, r3, #24
 801dca6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dca8:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801dcac:	930b      	str	r3, [sp, #44]	@ 0x2c
 801dcae:	0e1b      	lsrs	r3, r3, #24
 801dcb0:	9312      	str	r3, [sp, #72]	@ 0x48
 801dcb2:	b289      	uxth	r1, r1
 801dcb4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801dcb6:	b280      	uxth	r0, r0
 801dcb8:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dcba:	fb01 fa00 	mul.w	sl, r1, r0
 801dcbe:	0109      	lsls	r1, r1, #4
 801dcc0:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801dcc4:	eba1 090a 	sub.w	r9, r1, sl
 801dcc8:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801dccc:	b280      	uxth	r0, r0
 801dcce:	fa1f f989 	uxth.w	r9, r9
 801dcd2:	1a09      	subs	r1, r1, r0
 801dcd4:	fb09 f303 	mul.w	r3, r9, r3
 801dcd8:	b289      	uxth	r1, r1
 801dcda:	fb01 330e 	mla	r3, r1, lr, r3
 801dcde:	fb00 3304 	mla	r3, r0, r4, r3
 801dce2:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dce4:	fb0a 3304 	mla	r3, sl, r4, r3
 801dce8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801dcec:	2b00      	cmp	r3, #0
 801dcee:	f000 80e8 	beq.w	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dcf2:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801dcf6:	d01b      	beq.n	801dd30 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801dcf8:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801dcfc:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801dd00:	fb0e fb0b 	mul.w	fp, lr, fp
 801dd04:	fb0e fe02 	mul.w	lr, lr, r2
 801dd08:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801dd0c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801dd10:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801dd14:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801dd18:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801dd1c:	445a      	add	r2, fp
 801dd1e:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801dd22:	0a12      	lsrs	r2, r2, #8
 801dd24:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801dd28:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801dd2c:	ea42 020c 	orr.w	r2, r2, ip
 801dd30:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dd32:	2cff      	cmp	r4, #255	@ 0xff
 801dd34:	d021      	beq.n	801dd7a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801dd36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd38:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd3c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dd3e:	fb04 fc0c 	mul.w	ip, r4, ip
 801dd42:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801dd44:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dd48:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dd4c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801dd4e:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dd52:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd56:	fb04 fb0b 	mul.w	fp, r4, fp
 801dd5a:	44e6      	add	lr, ip
 801dd5c:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801dd60:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dd64:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801dd68:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dd6c:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801dd70:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801dd74:	ea4e 040b 	orr.w	r4, lr, fp
 801dd78:	940a      	str	r4, [sp, #40]	@ 0x28
 801dd7a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd7c:	2cff      	cmp	r4, #255	@ 0xff
 801dd7e:	d021      	beq.n	801ddc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801dd80:	9c07      	ldr	r4, [sp, #28]
 801dd82:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801dd86:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd88:	fb04 fc0c 	mul.w	ip, r4, ip
 801dd8c:	9c07      	ldr	r4, [sp, #28]
 801dd8e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dd92:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dd96:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801dd98:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dd9c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dda0:	fb04 fb0b 	mul.w	fp, r4, fp
 801dda4:	44e6      	add	lr, ip
 801dda6:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ddaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddae:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ddb2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ddb6:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ddba:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ddbe:	ea4e 040b 	orr.w	r4, lr, fp
 801ddc2:	9407      	str	r4, [sp, #28]
 801ddc4:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ddc6:	2cff      	cmp	r4, #255	@ 0xff
 801ddc8:	d021      	beq.n	801de0e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ddca:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ddcc:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ddd0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ddd2:	fb04 fc0c 	mul.w	ip, r4, ip
 801ddd6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ddd8:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801dddc:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801dde0:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801dde2:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801dde6:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ddea:	fb04 fb0b 	mul.w	fp, r4, fp
 801ddee:	44e6      	add	lr, ip
 801ddf0:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ddf4:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ddf8:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ddfc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801de00:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801de04:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801de08:	ea4e 040b 	orr.w	r4, lr, fp
 801de0c:	940b      	str	r4, [sp, #44]	@ 0x2c
 801de0e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801de10:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801de14:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801de18:	2bff      	cmp	r3, #255	@ 0xff
 801de1a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801de1e:	9c07      	ldr	r4, [sp, #28]
 801de20:	fb09 fc0c 	mul.w	ip, r9, ip
 801de24:	fb01 cc0e 	mla	ip, r1, lr, ip
 801de28:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801de2c:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801de2e:	fb00 cc0e 	mla	ip, r0, lr, ip
 801de32:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801de36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801de38:	fb0a cc0e 	mla	ip, sl, lr, ip
 801de3c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801de40:	fb09 f90e 	mul.w	r9, r9, lr
 801de44:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801de48:	fb01 9202 	mla	r2, r1, r2, r9
 801de4c:	9907      	ldr	r1, [sp, #28]
 801de4e:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801de52:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801de56:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801de58:	fb00 220b 	mla	r2, r0, fp, r2
 801de5c:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801de60:	fb0a 2a00 	mla	sl, sl, r0, r2
 801de64:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801de68:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801de6c:	ea4c 0c0a 	orr.w	ip, ip, sl
 801de70:	fa5f f08c 	uxtb.w	r0, ip
 801de74:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801de78:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801de7c:	f000 80a2 	beq.w	801dfc4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801de80:	43db      	mvns	r3, r3
 801de82:	783a      	ldrb	r2, [r7, #0]
 801de84:	f897 a002 	ldrb.w	sl, [r7, #2]
 801de88:	b2db      	uxtb	r3, r3
 801de8a:	fb02 fe03 	mul.w	lr, r2, r3
 801de8e:	fb0a fa03 	mul.w	sl, sl, r3
 801de92:	f10e 0201 	add.w	r2, lr, #1
 801de96:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801de9a:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801de9e:	703a      	strb	r2, [r7, #0]
 801dea0:	787a      	ldrb	r2, [r7, #1]
 801dea2:	fb02 f003 	mul.w	r0, r2, r3
 801dea6:	f10a 0301 	add.w	r3, sl, #1
 801deaa:	1c42      	adds	r2, r0, #1
 801deac:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801deb0:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801deb4:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801deb8:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801debc:	707a      	strb	r2, [r7, #1]
 801debe:	f887 c002 	strb.w	ip, [r7, #2]
 801dec2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801dec4:	3703      	adds	r7, #3
 801dec6:	f108 38ff 	add.w	r8, r8, #4294967295
 801deca:	441d      	add	r5, r3
 801decc:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801dece:	441e      	add	r6, r3
 801ded0:	e6ab      	b.n	801dc2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801ded2:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801ded4:	441d      	add	r5, r3
 801ded6:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ded8:	441e      	add	r6, r3
 801deda:	9b06      	ldr	r3, [sp, #24]
 801dedc:	3b01      	subs	r3, #1
 801dede:	9306      	str	r3, [sp, #24]
 801dee0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dee2:	3303      	adds	r3, #3
 801dee4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dee6:	e680      	b.n	801dbea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dee8:	d024      	beq.n	801df34 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801deea:	9b06      	ldr	r3, [sp, #24]
 801deec:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801deee:	3b01      	subs	r3, #1
 801def0:	fb00 5003 	mla	r0, r0, r3, r5
 801def4:	1400      	asrs	r0, r0, #16
 801def6:	f53f ae95 	bmi.w	801dc24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801defa:	3901      	subs	r1, #1
 801defc:	4288      	cmp	r0, r1
 801defe:	f6bf ae91 	bge.w	801dc24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801df02:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801df04:	fb01 6303 	mla	r3, r1, r3, r6
 801df08:	141b      	asrs	r3, r3, #16
 801df0a:	f53f ae8b 	bmi.w	801dc24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801df0e:	3a01      	subs	r2, #1
 801df10:	4293      	cmp	r3, r2
 801df12:	f6bf ae87 	bge.w	801dc24 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801df16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df18:	f8dd b018 	ldr.w	fp, [sp, #24]
 801df1c:	1cdf      	adds	r7, r3, #3
 801df1e:	f1bb 0f00 	cmp.w	fp, #0
 801df22:	dc6e      	bgt.n	801e002 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801df24:	9b06      	ldr	r3, [sp, #24]
 801df26:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801df2a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801df2c:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801df30:	4423      	add	r3, r4
 801df32:	9309      	str	r3, [sp, #36]	@ 0x24
 801df34:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801df36:	2b00      	cmp	r3, #0
 801df38:	f340 81b0 	ble.w	801e29c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801df3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801df40:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801df42:	ee30 0a04 	vadd.f32	s0, s0, s8
 801df46:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801df4a:	eef0 6a62 	vmov.f32	s13, s5
 801df4e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801df52:	ee31 1a05 	vadd.f32	s2, s2, s10
 801df56:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df5a:	ee16 5a90 	vmov	r5, s13
 801df5e:	eef0 6a43 	vmov.f32	s13, s6
 801df62:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801df66:	ee16 6a90 	vmov	r6, s13
 801df6a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801df6e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801df72:	ee77 2a62 	vsub.f32	s5, s14, s5
 801df76:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801df7a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801df7e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801df82:	ee12 2a90 	vmov	r2, s5
 801df86:	eef0 2a47 	vmov.f32	s5, s14
 801df8a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df8e:	ee13 2a10 	vmov	r2, s6
 801df92:	9325      	str	r3, [sp, #148]	@ 0x94
 801df94:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801df96:	eeb0 3a67 	vmov.f32	s6, s15
 801df9a:	fb92 f3f3 	sdiv	r3, r2, r3
 801df9e:	9326      	str	r3, [sp, #152]	@ 0x98
 801dfa0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801dfa2:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801dfa4:	3b01      	subs	r3, #1
 801dfa6:	9315      	str	r3, [sp, #84]	@ 0x54
 801dfa8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801dfaa:	bf08      	it	eq
 801dfac:	4613      	moveq	r3, r2
 801dfae:	9306      	str	r3, [sp, #24]
 801dfb0:	e60d      	b.n	801dbce <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801dfb2:	2800      	cmp	r0, #0
 801dfb4:	f43f ae7d 	beq.w	801dcb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dfb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801dfbc:	9307      	str	r3, [sp, #28]
 801dfbe:	0e1b      	lsrs	r3, r3, #24
 801dfc0:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dfc2:	e676      	b.n	801dcb2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801dfc4:	7038      	strb	r0, [r7, #0]
 801dfc6:	7079      	strb	r1, [r7, #1]
 801dfc8:	e779      	b.n	801debe <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801dfca:	f112 0901 	adds.w	r9, r2, #1
 801dfce:	f53f af78 	bmi.w	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dfd2:	454b      	cmp	r3, r9
 801dfd4:	f6ff af75 	blt.w	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dfd8:	f11c 0901 	adds.w	r9, ip, #1
 801dfdc:	f53f af71 	bmi.w	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dfe0:	45ce      	cmp	lr, r9
 801dfe2:	f6ff af6e 	blt.w	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801dfe6:	b21b      	sxth	r3, r3
 801dfe8:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801dfec:	fa0f f28e 	sxth.w	r2, lr
 801dff0:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801dff4:	9200      	str	r2, [sp, #0]
 801dff6:	4639      	mov	r1, r7
 801dff8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801dffa:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801dffc:	f7ff fca1 	bl	801d942 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801e000:	e75f      	b.n	801dec2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801e002:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e004:	1429      	asrs	r1, r5, #16
 801e006:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e008:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e00c:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801e010:	1433      	asrs	r3, r6, #16
 801e012:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e016:	fb0c 1303 	mla	r3, ip, r3, r1
 801e01a:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801e01c:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801e020:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e024:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801e028:	2a00      	cmp	r2, #0
 801e02a:	f000 8129 	beq.w	801e280 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801e02e:	684c      	ldr	r4, [r1, #4]
 801e030:	940c      	str	r4, [sp, #48]	@ 0x30
 801e032:	0e24      	lsrs	r4, r4, #24
 801e034:	9413      	str	r4, [sp, #76]	@ 0x4c
 801e036:	b198      	cbz	r0, 801e060 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e038:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801e03c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801e040:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801e044:	f10c 0c04 	add.w	ip, ip, #4
 801e048:	eb01 080c 	add.w	r8, r1, ip
 801e04c:	f851 100c 	ldr.w	r1, [r1, ip]
 801e050:	9108      	str	r1, [sp, #32]
 801e052:	0e09      	lsrs	r1, r1, #24
 801e054:	9110      	str	r1, [sp, #64]	@ 0x40
 801e056:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801e05a:	910d      	str	r1, [sp, #52]	@ 0x34
 801e05c:	0e09      	lsrs	r1, r1, #24
 801e05e:	9114      	str	r1, [sp, #80]	@ 0x50
 801e060:	b292      	uxth	r2, r2
 801e062:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e064:	b280      	uxth	r0, r0
 801e066:	fb02 f900 	mul.w	r9, r2, r0
 801e06a:	0112      	lsls	r2, r2, #4
 801e06c:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e070:	eba2 0809 	sub.w	r8, r2, r9
 801e074:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801e078:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e07a:	b280      	uxth	r0, r0
 801e07c:	fa1f f888 	uxth.w	r8, r8
 801e080:	1a09      	subs	r1, r1, r0
 801e082:	fb08 f202 	mul.w	r2, r8, r2
 801e086:	b289      	uxth	r1, r1
 801e088:	fb01 220e 	mla	r2, r1, lr, r2
 801e08c:	fb00 2204 	mla	r2, r0, r4, r2
 801e090:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e092:	fb09 2204 	mla	r2, r9, r4, r2
 801e096:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e09a:	2a00      	cmp	r2, #0
 801e09c:	f000 80e8 	beq.w	801e270 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801e0a0:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e0a4:	d01b      	beq.n	801e0de <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801e0a6:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e0aa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e0ae:	fb0e fa0a 	mul.w	sl, lr, sl
 801e0b2:	fb0e fe03 	mul.w	lr, lr, r3
 801e0b6:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e0ba:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e0be:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e0c2:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e0c6:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e0ca:	4453      	add	r3, sl
 801e0cc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e0d0:	0a1b      	lsrs	r3, r3, #8
 801e0d2:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e0d6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e0da:	ea43 030c 	orr.w	r3, r3, ip
 801e0de:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e0e0:	2cff      	cmp	r4, #255	@ 0xff
 801e0e2:	d021      	beq.n	801e128 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801e0e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e0e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e0ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e0ec:	fb04 fc0c 	mul.w	ip, r4, ip
 801e0f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e0f2:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e0f6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e0fa:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e0fc:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e100:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e104:	fb04 fa0a 	mul.w	sl, r4, sl
 801e108:	44e6      	add	lr, ip
 801e10a:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e10e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e112:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e116:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e11a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e11e:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e122:	ea4e 040a 	orr.w	r4, lr, sl
 801e126:	940c      	str	r4, [sp, #48]	@ 0x30
 801e128:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e12a:	2cff      	cmp	r4, #255	@ 0xff
 801e12c:	d021      	beq.n	801e172 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801e12e:	9c08      	ldr	r4, [sp, #32]
 801e130:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e134:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e136:	fb04 fc0c 	mul.w	ip, r4, ip
 801e13a:	9c08      	ldr	r4, [sp, #32]
 801e13c:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e140:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e142:	fb04 fa0e 	mul.w	sl, r4, lr
 801e146:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e14a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e14e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e152:	44e6      	add	lr, ip
 801e154:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e158:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e15c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e160:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e164:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e168:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e16c:	ea4e 040a 	orr.w	r4, lr, sl
 801e170:	9408      	str	r4, [sp, #32]
 801e172:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e174:	2cff      	cmp	r4, #255	@ 0xff
 801e176:	d021      	beq.n	801e1bc <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801e178:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e17a:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e17e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e180:	fb04 fc0c 	mul.w	ip, r4, ip
 801e184:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e186:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801e18a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e18e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e190:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801e194:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e198:	fb04 fa0a 	mul.w	sl, r4, sl
 801e19c:	44e6      	add	lr, ip
 801e19e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e1a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e1a6:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e1aa:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e1ae:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e1b2:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e1b6:	ea4e 040a 	orr.w	r4, lr, sl
 801e1ba:	940d      	str	r4, [sp, #52]	@ 0x34
 801e1bc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e1be:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801e1c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e1c6:	2aff      	cmp	r2, #255	@ 0xff
 801e1c8:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e1cc:	9c08      	ldr	r4, [sp, #32]
 801e1ce:	fb08 fc0c 	mul.w	ip, r8, ip
 801e1d2:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e1d6:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e1da:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e1dc:	fb00 cc0e 	mla	ip, r0, lr, ip
 801e1e0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e1e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e1e6:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e1ea:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e1ee:	fb08 f80e 	mul.w	r8, r8, lr
 801e1f2:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e1f6:	fb01 8303 	mla	r3, r1, r3, r8
 801e1fa:	9908      	ldr	r1, [sp, #32]
 801e1fc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e200:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801e204:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801e206:	fb00 330a 	mla	r3, r0, sl, r3
 801e20a:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801e20e:	fb09 3e0e 	mla	lr, r9, lr, r3
 801e212:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e216:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e21a:	ea4c 0c0e 	orr.w	ip, ip, lr
 801e21e:	fa5f f08c 	uxtb.w	r0, ip
 801e222:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801e226:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e22a:	d032      	beq.n	801e292 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801e22c:	43d2      	mvns	r2, r2
 801e22e:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801e232:	b2d2      	uxtb	r2, r2
 801e234:	fb0e fe02 	mul.w	lr, lr, r2
 801e238:	f10e 0301 	add.w	r3, lr, #1
 801e23c:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801e240:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e244:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801e248:	4350      	muls	r0, r2
 801e24a:	f807 3c03 	strb.w	r3, [r7, #-3]
 801e24e:	1c43      	adds	r3, r0, #1
 801e250:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801e254:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e258:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801e25c:	4353      	muls	r3, r2
 801e25e:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e262:	1c5a      	adds	r2, r3, #1
 801e264:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e268:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801e26c:	f807 cc01 	strb.w	ip, [r7, #-1]
 801e270:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801e272:	3703      	adds	r7, #3
 801e274:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e278:	441d      	add	r5, r3
 801e27a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e27c:	441e      	add	r6, r3
 801e27e:	e64e      	b.n	801df1e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801e280:	2800      	cmp	r0, #0
 801e282:	f43f aeed 	beq.w	801e060 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e286:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801e28a:	9108      	str	r1, [sp, #32]
 801e28c:	0e09      	lsrs	r1, r1, #24
 801e28e:	9110      	str	r1, [sp, #64]	@ 0x40
 801e290:	e6e6      	b.n	801e060 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801e292:	f807 0c03 	strb.w	r0, [r7, #-3]
 801e296:	f807 1c02 	strb.w	r1, [r7, #-2]
 801e29a:	e7e7      	b.n	801e26c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801e29c:	b019      	add	sp, #100	@ 0x64
 801e29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801e2a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801e2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e2a8:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801e2ac:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e2b0:	2c00      	cmp	r4, #0
 801e2b2:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e2b6:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801e2ba:	fb00 4e03 	mla	lr, r0, r3, r4
 801e2be:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e2c2:	f2c0 80b8 	blt.w	801e436 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e2c6:	45a1      	cmp	r9, r4
 801e2c8:	f340 80b5 	ble.w	801e436 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e2cc:	2800      	cmp	r0, #0
 801e2ce:	f2c0 80b2 	blt.w	801e436 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e2d2:	4580      	cmp	r8, r0
 801e2d4:	f340 80af 	ble.w	801e436 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801e2d8:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801e2dc:	f01e 0f01 	tst.w	lr, #1
 801e2e0:	5d56      	ldrb	r6, [r2, r5]
 801e2e2:	bf0c      	ite	eq
 801e2e4:	f006 060f 	andeq.w	r6, r6, #15
 801e2e8:	1136      	asrne	r6, r6, #4
 801e2ea:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e2ee:	b2f6      	uxtb	r6, r6
 801e2f0:	f114 0a01 	adds.w	sl, r4, #1
 801e2f4:	f100 80a1 	bmi.w	801e43a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e2f8:	45d1      	cmp	r9, sl
 801e2fa:	f340 809e 	ble.w	801e43a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e2fe:	2800      	cmp	r0, #0
 801e300:	f2c0 809b 	blt.w	801e43a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e304:	4580      	cmp	r8, r0
 801e306:	f340 8098 	ble.w	801e43a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801e30a:	2f00      	cmp	r7, #0
 801e30c:	f000 8097 	beq.w	801e43e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801e310:	f10e 0b01 	add.w	fp, lr, #1
 801e314:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e318:	f01b 0f01 	tst.w	fp, #1
 801e31c:	5d55      	ldrb	r5, [r2, r5]
 801e31e:	bf0c      	ite	eq
 801e320:	f005 050f 	andeq.w	r5, r5, #15
 801e324:	112d      	asrne	r5, r5, #4
 801e326:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e32a:	b2ed      	uxtb	r5, r5
 801e32c:	f1bc 0f00 	cmp.w	ip, #0
 801e330:	f000 8089 	beq.w	801e446 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801e334:	2c00      	cmp	r4, #0
 801e336:	f100 0001 	add.w	r0, r0, #1
 801e33a:	f2c0 8082 	blt.w	801e442 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e33e:	45a1      	cmp	r9, r4
 801e340:	dd7f      	ble.n	801e442 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e342:	2800      	cmp	r0, #0
 801e344:	db7d      	blt.n	801e442 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e346:	4580      	cmp	r8, r0
 801e348:	dd7b      	ble.n	801e442 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801e34a:	eb03 0b0e 	add.w	fp, r3, lr
 801e34e:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801e352:	f01b 0f01 	tst.w	fp, #1
 801e356:	5d14      	ldrb	r4, [r2, r4]
 801e358:	bf0c      	ite	eq
 801e35a:	f004 040f 	andeq.w	r4, r4, #15
 801e35e:	1124      	asrne	r4, r4, #4
 801e360:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801e364:	b2e4      	uxtb	r4, r4
 801e366:	f1ba 0f00 	cmp.w	sl, #0
 801e36a:	db6f      	blt.n	801e44c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e36c:	45d1      	cmp	r9, sl
 801e36e:	dd6d      	ble.n	801e44c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e370:	2800      	cmp	r0, #0
 801e372:	db6b      	blt.n	801e44c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e374:	4580      	cmp	r8, r0
 801e376:	dd69      	ble.n	801e44c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801e378:	2f00      	cmp	r7, #0
 801e37a:	d069      	beq.n	801e450 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801e37c:	3301      	adds	r3, #1
 801e37e:	449e      	add	lr, r3
 801e380:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801e384:	f01e 0f01 	tst.w	lr, #1
 801e388:	5cd0      	ldrb	r0, [r2, r3]
 801e38a:	bf0c      	ite	eq
 801e38c:	f000 000f 	andeq.w	r0, r0, #15
 801e390:	1100      	asrne	r0, r0, #4
 801e392:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e396:	b2c3      	uxtb	r3, r0
 801e398:	b2ba      	uxth	r2, r7
 801e39a:	fa1f fc8c 	uxth.w	ip, ip
 801e39e:	fb02 f00c 	mul.w	r0, r2, ip
 801e3a2:	0112      	lsls	r2, r2, #4
 801e3a4:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801e3a8:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801e3ac:	1a12      	subs	r2, r2, r0
 801e3ae:	fa1f fc8c 	uxth.w	ip, ip
 801e3b2:	b292      	uxth	r2, r2
 801e3b4:	eba7 070c 	sub.w	r7, r7, ip
 801e3b8:	436a      	muls	r2, r5
 801e3ba:	b2bf      	uxth	r7, r7
 801e3bc:	fb06 2207 	mla	r2, r6, r7, r2
 801e3c0:	fb0c 2404 	mla	r4, ip, r4, r2
 801e3c4:	fb00 4303 	mla	r3, r0, r3, r4
 801e3c8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e3cc:	b38b      	cbz	r3, 801e432 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801e3ce:	4a21      	ldr	r2, [pc, #132]	@ (801e454 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801e3d0:	6814      	ldr	r4, [r2, #0]
 801e3d2:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801e3d6:	b2e5      	uxtb	r5, r4
 801e3d8:	4353      	muls	r3, r2
 801e3da:	1c5a      	adds	r2, r3, #1
 801e3dc:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801e3e0:	1212      	asrs	r2, r2, #8
 801e3e2:	b290      	uxth	r0, r2
 801e3e4:	43d2      	mvns	r2, r2
 801e3e6:	fb15 f500 	smulbb	r5, r5, r0
 801e3ea:	b2d3      	uxtb	r3, r2
 801e3ec:	780a      	ldrb	r2, [r1, #0]
 801e3ee:	fb02 5203 	mla	r2, r2, r3, r5
 801e3f2:	b292      	uxth	r2, r2
 801e3f4:	1c55      	adds	r5, r2, #1
 801e3f6:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e3fa:	784d      	ldrb	r5, [r1, #1]
 801e3fc:	fb15 f503 	smulbb	r5, r5, r3
 801e400:	1212      	asrs	r2, r2, #8
 801e402:	700a      	strb	r2, [r1, #0]
 801e404:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801e408:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801e40c:	fb02 5200 	mla	r2, r2, r0, r5
 801e410:	b292      	uxth	r2, r2
 801e412:	1c55      	adds	r5, r2, #1
 801e414:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801e418:	1212      	asrs	r2, r2, #8
 801e41a:	704a      	strb	r2, [r1, #1]
 801e41c:	788a      	ldrb	r2, [r1, #2]
 801e41e:	fb12 f303 	smulbb	r3, r2, r3
 801e422:	fb04 3300 	mla	r3, r4, r0, r3
 801e426:	b29b      	uxth	r3, r3
 801e428:	1c5a      	adds	r2, r3, #1
 801e42a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e42e:	121b      	asrs	r3, r3, #8
 801e430:	708b      	strb	r3, [r1, #2]
 801e432:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e436:	2600      	movs	r6, #0
 801e438:	e75a      	b.n	801e2f0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801e43a:	2500      	movs	r5, #0
 801e43c:	e776      	b.n	801e32c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e43e:	463d      	mov	r5, r7
 801e440:	e774      	b.n	801e32c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801e442:	2400      	movs	r4, #0
 801e444:	e78f      	b.n	801e366 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801e446:	4663      	mov	r3, ip
 801e448:	4664      	mov	r4, ip
 801e44a:	e7a5      	b.n	801e398 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e44c:	2300      	movs	r3, #0
 801e44e:	e7a3      	b.n	801e398 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e450:	463b      	mov	r3, r7
 801e452:	e7a1      	b.n	801e398 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801e454:	2402490c 	.word	0x2402490c

0801e458 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e458:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e45c:	b097      	sub	sp, #92	@ 0x5c
 801e45e:	9214      	str	r2, [sp, #80]	@ 0x50
 801e460:	9309      	str	r3, [sp, #36]	@ 0x24
 801e462:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801e464:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801e468:	9015      	str	r0, [sp, #84]	@ 0x54
 801e46a:	910c      	str	r1, [sp, #48]	@ 0x30
 801e46c:	6850      	ldr	r0, [r2, #4]
 801e46e:	930e      	str	r3, [sp, #56]	@ 0x38
 801e470:	6812      	ldr	r2, [r2, #0]
 801e472:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801e476:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801e47a:	fb00 1303 	mla	r3, r0, r3, r1
 801e47e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e482:	eb02 0a03 	add.w	sl, r2, r3
 801e486:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e488:	689b      	ldr	r3, [r3, #8]
 801e48a:	3301      	adds	r3, #1
 801e48c:	f023 0301 	bic.w	r3, r3, #1
 801e490:	930f      	str	r3, [sp, #60]	@ 0x3c
 801e492:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e494:	681f      	ldr	r7, [r3, #0]
 801e496:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e498:	2b00      	cmp	r3, #0
 801e49a:	dc03      	bgt.n	801e4a4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801e49c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801e49e:	2b00      	cmp	r3, #0
 801e4a0:	f340 8247 	ble.w	801e932 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e4a4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e4a6:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e4aa:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e4ae:	1e48      	subs	r0, r1, #1
 801e4b0:	f102 3cff 	add.w	ip, r2, #4294967295
 801e4b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4b6:	2b00      	cmp	r3, #0
 801e4b8:	f340 80e5 	ble.w	801e686 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801e4bc:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801e4c0:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e4c4:	d406      	bmi.n	801e4d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4c6:	4586      	cmp	lr, r0
 801e4c8:	da04      	bge.n	801e4d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4ca:	2b00      	cmp	r3, #0
 801e4cc:	db02      	blt.n	801e4d4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801e4ce:	4563      	cmp	r3, ip
 801e4d0:	f2c0 80da 	blt.w	801e688 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801e4d4:	f11e 0e01 	adds.w	lr, lr, #1
 801e4d8:	f100 80cb 	bmi.w	801e672 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e4dc:	4571      	cmp	r1, lr
 801e4de:	f2c0 80c8 	blt.w	801e672 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e4e2:	3301      	adds	r3, #1
 801e4e4:	f100 80c5 	bmi.w	801e672 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e4e8:	429a      	cmp	r2, r3
 801e4ea:	f2c0 80c2 	blt.w	801e672 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801e4ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4f0:	46d0      	mov	r8, sl
 801e4f2:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e4f6:	930d      	str	r3, [sp, #52]	@ 0x34
 801e4f8:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e4fa:	2b00      	cmp	r3, #0
 801e4fc:	f340 80e3 	ble.w	801e6c6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801e500:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801e502:	1430      	asrs	r0, r6, #16
 801e504:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801e508:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801e50c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801e510:	142b      	asrs	r3, r5, #16
 801e512:	f100 812e 	bmi.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e516:	f10c 3bff 	add.w	fp, ip, #4294967295
 801e51a:	455b      	cmp	r3, fp
 801e51c:	f280 8129 	bge.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e520:	2800      	cmp	r0, #0
 801e522:	f2c0 8126 	blt.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e526:	f10e 3bff 	add.w	fp, lr, #4294967295
 801e52a:	4558      	cmp	r0, fp
 801e52c:	f280 8121 	bge.w	801e772 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801e530:	fb00 3309 	mla	r3, r0, r9, r3
 801e534:	0858      	lsrs	r0, r3, #1
 801e536:	07dc      	lsls	r4, r3, #31
 801e538:	f817 c000 	ldrb.w	ip, [r7, r0]
 801e53c:	bf54      	ite	pl
 801e53e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e542:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e546:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e54a:	fa5f fc8c 	uxtb.w	ip, ip
 801e54e:	2a00      	cmp	r2, #0
 801e550:	f000 80fe 	beq.w	801e750 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801e554:	1c58      	adds	r0, r3, #1
 801e556:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801e55a:	07c0      	lsls	r0, r0, #31
 801e55c:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801e560:	bf54      	ite	pl
 801e562:	f00e 0e0f 	andpl.w	lr, lr, #15
 801e566:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801e56a:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801e56e:	fa5f f08e 	uxtb.w	r0, lr
 801e572:	9010      	str	r0, [sp, #64]	@ 0x40
 801e574:	b1d9      	cbz	r1, 801e5ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e576:	444b      	add	r3, r9
 801e578:	0858      	lsrs	r0, r3, #1
 801e57a:	07dc      	lsls	r4, r3, #31
 801e57c:	f103 0301 	add.w	r3, r3, #1
 801e580:	5c38      	ldrb	r0, [r7, r0]
 801e582:	bf54      	ite	pl
 801e584:	f000 000f 	andpl.w	r0, r0, #15
 801e588:	1100      	asrmi	r0, r0, #4
 801e58a:	07dc      	lsls	r4, r3, #31
 801e58c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801e590:	b2c0      	uxtb	r0, r0
 801e592:	900a      	str	r0, [sp, #40]	@ 0x28
 801e594:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801e598:	f817 e000 	ldrb.w	lr, [r7, r0]
 801e59c:	bf54      	ite	pl
 801e59e:	f00e 030f 	andpl.w	r3, lr, #15
 801e5a2:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801e5a6:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e5aa:	b2db      	uxtb	r3, r3
 801e5ac:	9311      	str	r3, [sp, #68]	@ 0x44
 801e5ae:	b292      	uxth	r2, r2
 801e5b0:	b289      	uxth	r1, r1
 801e5b2:	0113      	lsls	r3, r2, #4
 801e5b4:	fb02 f001 	mul.w	r0, r2, r1
 801e5b8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e5ba:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801e5be:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801e5c2:	1a1b      	subs	r3, r3, r0
 801e5c4:	b289      	uxth	r1, r1
 801e5c6:	b29b      	uxth	r3, r3
 801e5c8:	ebae 0e01 	sub.w	lr, lr, r1
 801e5cc:	4353      	muls	r3, r2
 801e5ce:	fa1f fe8e 	uxth.w	lr, lr
 801e5d2:	fb0c 320e 	mla	r2, ip, lr, r3
 801e5d6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e5d8:	fb01 2203 	mla	r2, r1, r3, r2
 801e5dc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801e5de:	fb00 2203 	mla	r2, r0, r3, r2
 801e5e2:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801e5e6:	2a00      	cmp	r2, #0
 801e5e8:	d039      	beq.n	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e5ea:	4bc7      	ldr	r3, [pc, #796]	@ (801e908 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e5ec:	6819      	ldr	r1, [r3, #0]
 801e5ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801e5f0:	fa5f fc81 	uxtb.w	ip, r1
 801e5f4:	435a      	muls	r2, r3
 801e5f6:	1c53      	adds	r3, r2, #1
 801e5f8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801e5fc:	1212      	asrs	r2, r2, #8
 801e5fe:	b290      	uxth	r0, r2
 801e600:	43d2      	mvns	r2, r2
 801e602:	fb1c fc00 	smulbb	ip, ip, r0
 801e606:	b2d3      	uxtb	r3, r2
 801e608:	f898 2000 	ldrb.w	r2, [r8]
 801e60c:	fb02 c203 	mla	r2, r2, r3, ip
 801e610:	b292      	uxth	r2, r2
 801e612:	f102 0c01 	add.w	ip, r2, #1
 801e616:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e61a:	f898 c001 	ldrb.w	ip, [r8, #1]
 801e61e:	fb1c fc03 	smulbb	ip, ip, r3
 801e622:	1212      	asrs	r2, r2, #8
 801e624:	f888 2000 	strb.w	r2, [r8]
 801e628:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801e62c:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801e630:	fb02 c200 	mla	r2, r2, r0, ip
 801e634:	b292      	uxth	r2, r2
 801e636:	f102 0c01 	add.w	ip, r2, #1
 801e63a:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801e63e:	1212      	asrs	r2, r2, #8
 801e640:	f888 2001 	strb.w	r2, [r8, #1]
 801e644:	f898 2002 	ldrb.w	r2, [r8, #2]
 801e648:	fb12 f303 	smulbb	r3, r2, r3
 801e64c:	fb01 3300 	mla	r3, r1, r0, r3
 801e650:	b29b      	uxth	r3, r3
 801e652:	1c5a      	adds	r2, r3, #1
 801e654:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e658:	121b      	asrs	r3, r3, #8
 801e65a:	f888 3002 	strb.w	r3, [r8, #2]
 801e65e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e660:	f108 0803 	add.w	r8, r8, #3
 801e664:	441d      	add	r5, r3
 801e666:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e668:	441e      	add	r6, r3
 801e66a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e66c:	3b01      	subs	r3, #1
 801e66e:	930d      	str	r3, [sp, #52]	@ 0x34
 801e670:	e742      	b.n	801e4f8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801e672:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e674:	f10a 0a03 	add.w	sl, sl, #3
 801e678:	441d      	add	r5, r3
 801e67a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e67c:	441e      	add	r6, r3
 801e67e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e680:	3b01      	subs	r3, #1
 801e682:	9309      	str	r3, [sp, #36]	@ 0x24
 801e684:	e716      	b.n	801e4b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801e686:	d024      	beq.n	801e6d2 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801e688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e68a:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801e68c:	3b01      	subs	r3, #1
 801e68e:	fb00 5003 	mla	r0, r0, r3, r5
 801e692:	1400      	asrs	r0, r0, #16
 801e694:	f53f af2b 	bmi.w	801e4ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e698:	3901      	subs	r1, #1
 801e69a:	4288      	cmp	r0, r1
 801e69c:	f6bf af27 	bge.w	801e4ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e6a0:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801e6a2:	fb01 6303 	mla	r3, r1, r3, r6
 801e6a6:	141b      	asrs	r3, r3, #16
 801e6a8:	f53f af21 	bmi.w	801e4ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e6ac:	3a01      	subs	r2, #1
 801e6ae:	4293      	cmp	r3, r2
 801e6b0:	f6bf af1d 	bge.w	801e4ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e6b4:	f10a 0e03 	add.w	lr, sl, #3
 801e6b8:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801e6bc:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801e6c0:	f1b8 0f00 	cmp.w	r8, #0
 801e6c4:	dc76      	bgt.n	801e7b4 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801e6c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e6c8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e6cc:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e6d0:	44a2      	add	sl, r4
 801e6d2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e6d4:	2b00      	cmp	r3, #0
 801e6d6:	f340 812c 	ble.w	801e932 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801e6da:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e6de:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e6e0:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e6e4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e6e8:	eef0 6a62 	vmov.f32	s13, s5
 801e6ec:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e6f0:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e6f4:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e6f8:	ee16 5a90 	vmov	r5, s13
 801e6fc:	eef0 6a43 	vmov.f32	s13, s6
 801e700:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e704:	ee16 6a90 	vmov	r6, s13
 801e708:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e70c:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e710:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e714:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e718:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e71c:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e720:	ee12 2a90 	vmov	r2, s5
 801e724:	eef0 2a47 	vmov.f32	s5, s14
 801e728:	fb92 f3f3 	sdiv	r3, r2, r3
 801e72c:	ee13 2a10 	vmov	r2, s6
 801e730:	9323      	str	r3, [sp, #140]	@ 0x8c
 801e732:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e734:	eeb0 3a67 	vmov.f32	s6, s15
 801e738:	fb92 f3f3 	sdiv	r3, r2, r3
 801e73c:	9324      	str	r3, [sp, #144]	@ 0x90
 801e73e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801e740:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801e742:	3b01      	subs	r3, #1
 801e744:	930c      	str	r3, [sp, #48]	@ 0x30
 801e746:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801e748:	bf08      	it	eq
 801e74a:	4613      	moveq	r3, r2
 801e74c:	9309      	str	r3, [sp, #36]	@ 0x24
 801e74e:	e6a2      	b.n	801e496 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801e750:	2900      	cmp	r1, #0
 801e752:	f43f af2c 	beq.w	801e5ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e756:	eb09 0003 	add.w	r0, r9, r3
 801e75a:	0843      	lsrs	r3, r0, #1
 801e75c:	07c0      	lsls	r0, r0, #31
 801e75e:	5cfb      	ldrb	r3, [r7, r3]
 801e760:	bf54      	ite	pl
 801e762:	f003 030f 	andpl.w	r3, r3, #15
 801e766:	111b      	asrmi	r3, r3, #4
 801e768:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801e76c:	b2db      	uxtb	r3, r3
 801e76e:	930a      	str	r3, [sp, #40]	@ 0x28
 801e770:	e71d      	b.n	801e5ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801e772:	f113 0b01 	adds.w	fp, r3, #1
 801e776:	f53f af72 	bmi.w	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e77a:	45dc      	cmp	ip, fp
 801e77c:	f6ff af6f 	blt.w	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e780:	f110 0b01 	adds.w	fp, r0, #1
 801e784:	f53f af6b 	bmi.w	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e788:	45de      	cmp	lr, fp
 801e78a:	f6ff af68 	blt.w	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e78e:	9302      	str	r3, [sp, #8]
 801e790:	fa0f f38e 	sxth.w	r3, lr
 801e794:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e796:	9301      	str	r3, [sp, #4]
 801e798:	fa0f f38c 	sxth.w	r3, ip
 801e79c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801e7a0:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801e7a4:	9300      	str	r3, [sp, #0]
 801e7a6:	463a      	mov	r2, r7
 801e7a8:	464b      	mov	r3, r9
 801e7aa:	4641      	mov	r1, r8
 801e7ac:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801e7ae:	f7ff fd79 	bl	801e2a4 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801e7b2:	e754      	b.n	801e65e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801e7b4:	142a      	asrs	r2, r5, #16
 801e7b6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e7ba:	1433      	asrs	r3, r6, #16
 801e7bc:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e7c0:	fb09 2303 	mla	r3, r9, r3, r2
 801e7c4:	085a      	lsrs	r2, r3, #1
 801e7c6:	07dc      	lsls	r4, r3, #31
 801e7c8:	5cba      	ldrb	r2, [r7, r2]
 801e7ca:	bf54      	ite	pl
 801e7cc:	f002 020f 	andpl.w	r2, r2, #15
 801e7d0:	1112      	asrmi	r2, r2, #4
 801e7d2:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801e7d6:	b2d2      	uxtb	r2, r2
 801e7d8:	2900      	cmp	r1, #0
 801e7da:	f000 8097 	beq.w	801e90c <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801e7de:	f103 0b01 	add.w	fp, r3, #1
 801e7e2:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801e7e6:	f01b 0f01 	tst.w	fp, #1
 801e7ea:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e7ee:	bf0c      	ite	eq
 801e7f0:	f00c 0c0f 	andeq.w	ip, ip, #15
 801e7f4:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801e7f8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e7fc:	fa5f f48c 	uxtb.w	r4, ip
 801e800:	9412      	str	r4, [sp, #72]	@ 0x48
 801e802:	b300      	cbz	r0, 801e846 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e804:	444b      	add	r3, r9
 801e806:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e80a:	07dc      	lsls	r4, r3, #31
 801e80c:	f103 0301 	add.w	r3, r3, #1
 801e810:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e814:	bf54      	ite	pl
 801e816:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e81a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e81e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e822:	fa5f f48c 	uxtb.w	r4, ip
 801e826:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e82a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801e82c:	07dc      	lsls	r4, r3, #31
 801e82e:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e832:	bf54      	ite	pl
 801e834:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e838:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e83c:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e840:	fa5f f38c 	uxtb.w	r3, ip
 801e844:	9313      	str	r3, [sp, #76]	@ 0x4c
 801e846:	b289      	uxth	r1, r1
 801e848:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e84a:	b280      	uxth	r0, r0
 801e84c:	fb01 f300 	mul.w	r3, r1, r0
 801e850:	0109      	lsls	r1, r1, #4
 801e852:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801e856:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801e85a:	1ac9      	subs	r1, r1, r3
 801e85c:	b280      	uxth	r0, r0
 801e85e:	b289      	uxth	r1, r1
 801e860:	ebac 0c00 	sub.w	ip, ip, r0
 801e864:	4361      	muls	r1, r4
 801e866:	fa1f fc8c 	uxth.w	ip, ip
 801e86a:	fb02 120c 	mla	r2, r2, ip, r1
 801e86e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e870:	fb00 2001 	mla	r0, r0, r1, r2
 801e874:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801e876:	fb03 0302 	mla	r3, r3, r2, r0
 801e87a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801e87e:	2b00      	cmp	r3, #0
 801e880:	d039      	beq.n	801e8f6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801e882:	4a21      	ldr	r2, [pc, #132]	@ (801e908 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801e884:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801e888:	6810      	ldr	r0, [r2, #0]
 801e88a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801e88c:	fa5f fc80 	uxtb.w	ip, r0
 801e890:	4353      	muls	r3, r2
 801e892:	1c5a      	adds	r2, r3, #1
 801e894:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e898:	121b      	asrs	r3, r3, #8
 801e89a:	b29a      	uxth	r2, r3
 801e89c:	43db      	mvns	r3, r3
 801e89e:	fb1c fc02 	smulbb	ip, ip, r2
 801e8a2:	b2db      	uxtb	r3, r3
 801e8a4:	fb01 c103 	mla	r1, r1, r3, ip
 801e8a8:	b289      	uxth	r1, r1
 801e8aa:	f101 0c01 	add.w	ip, r1, #1
 801e8ae:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e8b2:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801e8b6:	fb1c fc03 	smulbb	ip, ip, r3
 801e8ba:	1209      	asrs	r1, r1, #8
 801e8bc:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801e8c0:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801e8c4:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801e8c8:	fb01 c102 	mla	r1, r1, r2, ip
 801e8cc:	b289      	uxth	r1, r1
 801e8ce:	f101 0c01 	add.w	ip, r1, #1
 801e8d2:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801e8d6:	1209      	asrs	r1, r1, #8
 801e8d8:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801e8dc:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801e8e0:	fb11 f303 	smulbb	r3, r1, r3
 801e8e4:	fb00 3002 	mla	r0, r0, r2, r3
 801e8e8:	b280      	uxth	r0, r0
 801e8ea:	1c42      	adds	r2, r0, #1
 801e8ec:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801e8f0:	1200      	asrs	r0, r0, #8
 801e8f2:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801e8f6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801e8f8:	f10e 0e03 	add.w	lr, lr, #3
 801e8fc:	f108 38ff 	add.w	r8, r8, #4294967295
 801e900:	441d      	add	r5, r3
 801e902:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801e904:	441e      	add	r6, r3
 801e906:	e6db      	b.n	801e6c0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801e908:	2402490c 	.word	0x2402490c
 801e90c:	2800      	cmp	r0, #0
 801e90e:	d09a      	beq.n	801e846 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e910:	444b      	add	r3, r9
 801e912:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801e916:	07db      	lsls	r3, r3, #31
 801e918:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801e91c:	bf54      	ite	pl
 801e91e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801e922:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801e926:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801e92a:	fa5f f38c 	uxtb.w	r3, ip
 801e92e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e930:	e789      	b.n	801e846 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801e932:	b017      	add	sp, #92	@ 0x5c
 801e934:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e938 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801e938:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e93c:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801e940:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801e944:	2d00      	cmp	r5, #0
 801e946:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801e94a:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801e94e:	fb04 5e03 	mla	lr, r4, r3, r5
 801e952:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801e956:	f2c0 80b1 	blt.w	801eabc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e95a:	45a9      	cmp	r9, r5
 801e95c:	f340 80ae 	ble.w	801eabc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e960:	2c00      	cmp	r4, #0
 801e962:	f2c0 80ab 	blt.w	801eabc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e966:	45a0      	cmp	r8, r4
 801e968:	f340 80a8 	ble.w	801eabc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801e96c:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801e970:	f01e 0f01 	tst.w	lr, #1
 801e974:	5d97      	ldrb	r7, [r2, r6]
 801e976:	bf0c      	ite	eq
 801e978:	f007 070f 	andeq.w	r7, r7, #15
 801e97c:	113f      	asrne	r7, r7, #4
 801e97e:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801e982:	b2ff      	uxtb	r7, r7
 801e984:	f115 0a01 	adds.w	sl, r5, #1
 801e988:	f100 809a 	bmi.w	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e98c:	45d1      	cmp	r9, sl
 801e98e:	f340 8097 	ble.w	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e992:	2c00      	cmp	r4, #0
 801e994:	f2c0 8094 	blt.w	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e998:	45a0      	cmp	r8, r4
 801e99a:	f340 8091 	ble.w	801eac0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801e99e:	2800      	cmp	r0, #0
 801e9a0:	f000 8090 	beq.w	801eac4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801e9a4:	f10e 0b01 	add.w	fp, lr, #1
 801e9a8:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801e9ac:	f01b 0f01 	tst.w	fp, #1
 801e9b0:	5d96      	ldrb	r6, [r2, r6]
 801e9b2:	bf0c      	ite	eq
 801e9b4:	f006 060f 	andeq.w	r6, r6, #15
 801e9b8:	1136      	asrne	r6, r6, #4
 801e9ba:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801e9be:	b2f6      	uxtb	r6, r6
 801e9c0:	f1bc 0f00 	cmp.w	ip, #0
 801e9c4:	f000 8082 	beq.w	801eacc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801e9c8:	2d00      	cmp	r5, #0
 801e9ca:	f104 0401 	add.w	r4, r4, #1
 801e9ce:	db7b      	blt.n	801eac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e9d0:	45a9      	cmp	r9, r5
 801e9d2:	dd79      	ble.n	801eac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e9d4:	2c00      	cmp	r4, #0
 801e9d6:	db77      	blt.n	801eac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e9d8:	45a0      	cmp	r8, r4
 801e9da:	dd75      	ble.n	801eac8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801e9dc:	eb03 0b0e 	add.w	fp, r3, lr
 801e9e0:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801e9e4:	f01b 0f01 	tst.w	fp, #1
 801e9e8:	5d55      	ldrb	r5, [r2, r5]
 801e9ea:	bf0c      	ite	eq
 801e9ec:	f005 050f 	andeq.w	r5, r5, #15
 801e9f0:	112d      	asrne	r5, r5, #4
 801e9f2:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801e9f6:	b2ed      	uxtb	r5, r5
 801e9f8:	f1ba 0f00 	cmp.w	sl, #0
 801e9fc:	db69      	blt.n	801ead2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801e9fe:	45d1      	cmp	r9, sl
 801ea00:	dd67      	ble.n	801ead2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ea02:	2c00      	cmp	r4, #0
 801ea04:	db65      	blt.n	801ead2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ea06:	45a0      	cmp	r8, r4
 801ea08:	dd63      	ble.n	801ead2 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801ea0a:	2800      	cmp	r0, #0
 801ea0c:	d063      	beq.n	801ead6 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801ea0e:	3301      	adds	r3, #1
 801ea10:	449e      	add	lr, r3
 801ea12:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801ea16:	f01e 0f01 	tst.w	lr, #1
 801ea1a:	5cd4      	ldrb	r4, [r2, r3]
 801ea1c:	bf0c      	ite	eq
 801ea1e:	f004 040f 	andeq.w	r4, r4, #15
 801ea22:	1124      	asrne	r4, r4, #4
 801ea24:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801ea28:	b2e3      	uxtb	r3, r4
 801ea2a:	b282      	uxth	r2, r0
 801ea2c:	fa1f fc8c 	uxth.w	ip, ip
 801ea30:	fb02 f40c 	mul.w	r4, r2, ip
 801ea34:	0112      	lsls	r2, r2, #4
 801ea36:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801ea3a:	fa1f f08c 	uxth.w	r0, ip
 801ea3e:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801ea42:	1b12      	subs	r2, r2, r4
 801ea44:	ebac 0c00 	sub.w	ip, ip, r0
 801ea48:	b292      	uxth	r2, r2
 801ea4a:	fa1f fc8c 	uxth.w	ip, ip
 801ea4e:	4372      	muls	r2, r6
 801ea50:	fb07 220c 	mla	r2, r7, ip, r2
 801ea54:	fb00 2005 	mla	r0, r0, r5, r2
 801ea58:	fb04 0303 	mla	r3, r4, r3, r0
 801ea5c:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ea60:	b353      	cbz	r3, 801eab8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801ea62:	4a1e      	ldr	r2, [pc, #120]	@ (801eadc <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801ea64:	7808      	ldrb	r0, [r1, #0]
 801ea66:	6814      	ldr	r4, [r2, #0]
 801ea68:	b29a      	uxth	r2, r3
 801ea6a:	43db      	mvns	r3, r3
 801ea6c:	b2e5      	uxtb	r5, r4
 801ea6e:	b2db      	uxtb	r3, r3
 801ea70:	fb15 f502 	smulbb	r5, r5, r2
 801ea74:	fb00 5003 	mla	r0, r0, r3, r5
 801ea78:	b280      	uxth	r0, r0
 801ea7a:	1c45      	adds	r5, r0, #1
 801ea7c:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ea80:	784d      	ldrb	r5, [r1, #1]
 801ea82:	fb15 f503 	smulbb	r5, r5, r3
 801ea86:	1200      	asrs	r0, r0, #8
 801ea88:	7008      	strb	r0, [r1, #0]
 801ea8a:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801ea8e:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801ea92:	fb00 5002 	mla	r0, r0, r2, r5
 801ea96:	b280      	uxth	r0, r0
 801ea98:	1c45      	adds	r5, r0, #1
 801ea9a:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801ea9e:	1200      	asrs	r0, r0, #8
 801eaa0:	7048      	strb	r0, [r1, #1]
 801eaa2:	7888      	ldrb	r0, [r1, #2]
 801eaa4:	fb10 f303 	smulbb	r3, r0, r3
 801eaa8:	fb04 3202 	mla	r2, r4, r2, r3
 801eaac:	b292      	uxth	r2, r2
 801eaae:	1c53      	adds	r3, r2, #1
 801eab0:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801eab4:	1212      	asrs	r2, r2, #8
 801eab6:	708a      	strb	r2, [r1, #2]
 801eab8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801eabc:	2700      	movs	r7, #0
 801eabe:	e761      	b.n	801e984 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801eac0:	2600      	movs	r6, #0
 801eac2:	e77d      	b.n	801e9c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801eac4:	4606      	mov	r6, r0
 801eac6:	e77b      	b.n	801e9c0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801eac8:	2500      	movs	r5, #0
 801eaca:	e795      	b.n	801e9f8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801eacc:	4663      	mov	r3, ip
 801eace:	4665      	mov	r5, ip
 801ead0:	e7ab      	b.n	801ea2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ead2:	2300      	movs	r3, #0
 801ead4:	e7a9      	b.n	801ea2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801ead6:	4603      	mov	r3, r0
 801ead8:	e7a7      	b.n	801ea2a <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801eada:	bf00      	nop
 801eadc:	2402490c 	.word	0x2402490c

0801eae0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eae0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eae4:	b093      	sub	sp, #76	@ 0x4c
 801eae6:	461c      	mov	r4, r3
 801eae8:	920c      	str	r2, [sp, #48]	@ 0x30
 801eaea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801eaec:	9011      	str	r0, [sp, #68]	@ 0x44
 801eaee:	9107      	str	r1, [sp, #28]
 801eaf0:	6850      	ldr	r0, [r2, #4]
 801eaf2:	6812      	ldr	r2, [r2, #0]
 801eaf4:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801eaf8:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801eafc:	fb00 1303 	mla	r3, r0, r3, r1
 801eb00:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eb04:	eb02 0b03 	add.w	fp, r2, r3
 801eb08:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb0a:	689b      	ldr	r3, [r3, #8]
 801eb0c:	3301      	adds	r3, #1
 801eb0e:	f023 0301 	bic.w	r3, r3, #1
 801eb12:	9309      	str	r3, [sp, #36]	@ 0x24
 801eb14:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb16:	f8d3 8000 	ldr.w	r8, [r3]
 801eb1a:	9b07      	ldr	r3, [sp, #28]
 801eb1c:	2b00      	cmp	r3, #0
 801eb1e:	dc03      	bgt.n	801eb28 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801eb20:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801eb22:	2b00      	cmp	r3, #0
 801eb24:	f340 822b 	ble.w	801ef7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801eb28:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb2a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eb2e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eb32:	1e48      	subs	r0, r1, #1
 801eb34:	1e57      	subs	r7, r2, #1
 801eb36:	2c00      	cmp	r4, #0
 801eb38:	f340 80d7 	ble.w	801ecea <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801eb3c:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801eb40:	ea4f 4326 	mov.w	r3, r6, asr #16
 801eb44:	d406      	bmi.n	801eb54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb46:	4584      	cmp	ip, r0
 801eb48:	da04      	bge.n	801eb54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb4a:	2b00      	cmp	r3, #0
 801eb4c:	db02      	blt.n	801eb54 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801eb4e:	42bb      	cmp	r3, r7
 801eb50:	f2c0 80cc 	blt.w	801ecec <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801eb54:	f11c 0c01 	adds.w	ip, ip, #1
 801eb58:	f100 80bf 	bmi.w	801ecda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eb5c:	4561      	cmp	r1, ip
 801eb5e:	f2c0 80bc 	blt.w	801ecda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eb62:	3301      	adds	r3, #1
 801eb64:	f100 80b9 	bmi.w	801ecda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eb68:	429a      	cmp	r2, r3
 801eb6a:	f2c0 80b6 	blt.w	801ecda <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801eb6e:	46a2      	mov	sl, r4
 801eb70:	465f      	mov	r7, fp
 801eb72:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801eb76:	f1ba 0f00 	cmp.w	sl, #0
 801eb7a:	f340 80d4 	ble.w	801ed26 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801eb7e:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801eb82:	1430      	asrs	r0, r6, #16
 801eb84:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801eb88:	9308      	str	r3, [sp, #32]
 801eb8a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801eb8c:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801eb90:	142b      	asrs	r3, r5, #16
 801eb92:	f100 8124 	bmi.w	801edde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eb96:	f10c 32ff 	add.w	r2, ip, #4294967295
 801eb9a:	4293      	cmp	r3, r2
 801eb9c:	f280 811f 	bge.w	801edde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eba0:	2800      	cmp	r0, #0
 801eba2:	f2c0 811c 	blt.w	801edde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801eba6:	f10e 32ff 	add.w	r2, lr, #4294967295
 801ebaa:	4290      	cmp	r0, r2
 801ebac:	f280 8117 	bge.w	801edde <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801ebb0:	fb00 3309 	mla	r3, r0, r9, r3
 801ebb4:	0858      	lsrs	r0, r3, #1
 801ebb6:	07da      	lsls	r2, r3, #31
 801ebb8:	9a08      	ldr	r2, [sp, #32]
 801ebba:	f818 c000 	ldrb.w	ip, [r8, r0]
 801ebbe:	bf54      	ite	pl
 801ebc0:	f00c 0c0f 	andpl.w	ip, ip, #15
 801ebc4:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801ebc8:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801ebcc:	fa5f fc8c 	uxtb.w	ip, ip
 801ebd0:	2a00      	cmp	r2, #0
 801ebd2:	f000 80ed 	beq.w	801edb0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801ebd6:	1c58      	adds	r0, r3, #1
 801ebd8:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801ebdc:	07c0      	lsls	r0, r0, #31
 801ebde:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801ebe2:	bf54      	ite	pl
 801ebe4:	f00e 0e0f 	andpl.w	lr, lr, #15
 801ebe8:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801ebec:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801ebf0:	fa5f fe8e 	uxtb.w	lr, lr
 801ebf4:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801ebf8:	b1c9      	cbz	r1, 801ec2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801ebfa:	444b      	add	r3, r9
 801ebfc:	0858      	lsrs	r0, r3, #1
 801ebfe:	07da      	lsls	r2, r3, #31
 801ec00:	f818 0000 	ldrb.w	r0, [r8, r0]
 801ec04:	bf54      	ite	pl
 801ec06:	f000 000f 	andpl.w	r0, r0, #15
 801ec0a:	1100      	asrmi	r0, r0, #4
 801ec0c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801ec10:	b2c0      	uxtb	r0, r0
 801ec12:	900a      	str	r0, [sp, #40]	@ 0x28
 801ec14:	1c58      	adds	r0, r3, #1
 801ec16:	0843      	lsrs	r3, r0, #1
 801ec18:	07c2      	lsls	r2, r0, #31
 801ec1a:	f818 3003 	ldrb.w	r3, [r8, r3]
 801ec1e:	bf54      	ite	pl
 801ec20:	f003 030f 	andpl.w	r3, r3, #15
 801ec24:	111b      	asrmi	r3, r3, #4
 801ec26:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801ec2a:	b2db      	uxtb	r3, r3
 801ec2c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ec2e:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801ec32:	b289      	uxth	r1, r1
 801ec34:	fb02 f301 	mul.w	r3, r2, r1
 801ec38:	0112      	lsls	r2, r2, #4
 801ec3a:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801ec3e:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801ec42:	1ad2      	subs	r2, r2, r3
 801ec44:	b289      	uxth	r1, r1
 801ec46:	b292      	uxth	r2, r2
 801ec48:	1a40      	subs	r0, r0, r1
 801ec4a:	fa1f fe80 	uxth.w	lr, r0
 801ec4e:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801ec50:	4342      	muls	r2, r0
 801ec52:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801ec56:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ec58:	fb01 c102 	mla	r1, r1, r2, ip
 801ec5c:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ec5e:	fb03 1302 	mla	r3, r3, r2, r1
 801ec62:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ec66:	b383      	cbz	r3, 801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ec68:	4ac6      	ldr	r2, [pc, #792]	@ (801ef84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801ec6a:	2bff      	cmp	r3, #255	@ 0xff
 801ec6c:	6812      	ldr	r2, [r2, #0]
 801ec6e:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801ec72:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801ec76:	b2d2      	uxtb	r2, r2
 801ec78:	f000 80ac 	beq.w	801edd4 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801ec7c:	b299      	uxth	r1, r3
 801ec7e:	43db      	mvns	r3, r3
 801ec80:	f897 c000 	ldrb.w	ip, [r7]
 801ec84:	fb12 f201 	smulbb	r2, r2, r1
 801ec88:	b2db      	uxtb	r3, r3
 801ec8a:	fb10 f001 	smulbb	r0, r0, r1
 801ec8e:	fb0c 2203 	mla	r2, ip, r3, r2
 801ec92:	fb1e f101 	smulbb	r1, lr, r1
 801ec96:	b292      	uxth	r2, r2
 801ec98:	f102 0c01 	add.w	ip, r2, #1
 801ec9c:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801eca0:	1212      	asrs	r2, r2, #8
 801eca2:	703a      	strb	r2, [r7, #0]
 801eca4:	787a      	ldrb	r2, [r7, #1]
 801eca6:	fb02 0003 	mla	r0, r2, r3, r0
 801ecaa:	b280      	uxth	r0, r0
 801ecac:	1c42      	adds	r2, r0, #1
 801ecae:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801ecb2:	78ba      	ldrb	r2, [r7, #2]
 801ecb4:	fb02 1303 	mla	r3, r2, r3, r1
 801ecb8:	1200      	asrs	r0, r0, #8
 801ecba:	b29b      	uxth	r3, r3
 801ecbc:	7078      	strb	r0, [r7, #1]
 801ecbe:	f103 0e01 	add.w	lr, r3, #1
 801ecc2:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ecc6:	121b      	asrs	r3, r3, #8
 801ecc8:	70bb      	strb	r3, [r7, #2]
 801ecca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801eccc:	3703      	adds	r7, #3
 801ecce:	f10a 3aff 	add.w	sl, sl, #4294967295
 801ecd2:	441d      	add	r5, r3
 801ecd4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ecd6:	441e      	add	r6, r3
 801ecd8:	e74d      	b.n	801eb76 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801ecda:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ecdc:	3c01      	subs	r4, #1
 801ecde:	f10b 0b03 	add.w	fp, fp, #3
 801ece2:	441d      	add	r5, r3
 801ece4:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ece6:	441e      	add	r6, r3
 801ece8:	e725      	b.n	801eb36 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801ecea:	d021      	beq.n	801ed30 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801ecec:	1e63      	subs	r3, r4, #1
 801ecee:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801ecf0:	fb00 5003 	mla	r0, r0, r3, r5
 801ecf4:	1400      	asrs	r0, r0, #16
 801ecf6:	f53f af3a 	bmi.w	801eb6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ecfa:	3901      	subs	r1, #1
 801ecfc:	4288      	cmp	r0, r1
 801ecfe:	f6bf af36 	bge.w	801eb6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ed02:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801ed04:	fb01 6303 	mla	r3, r1, r3, r6
 801ed08:	141b      	asrs	r3, r3, #16
 801ed0a:	f53f af30 	bmi.w	801eb6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ed0e:	3a01      	subs	r2, #1
 801ed10:	4293      	cmp	r3, r2
 801ed12:	f6bf af2c 	bge.w	801eb6e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801ed16:	f10b 0c03 	add.w	ip, fp, #3
 801ed1a:	46a6      	mov	lr, r4
 801ed1c:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801ed20:	f1be 0f00 	cmp.w	lr, #0
 801ed24:	dc79      	bgt.n	801ee1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801ed26:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801ed2a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ed2e:	44a3      	add	fp, r4
 801ed30:	9b07      	ldr	r3, [sp, #28]
 801ed32:	2b00      	cmp	r3, #0
 801ed34:	f340 8123 	ble.w	801ef7e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801ed38:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ed3c:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ed3e:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ed42:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ed46:	eef0 6a62 	vmov.f32	s13, s5
 801ed4a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ed4e:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ed52:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed56:	ee16 5a90 	vmov	r5, s13
 801ed5a:	eef0 6a43 	vmov.f32	s13, s6
 801ed5e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ed62:	ee16 6a90 	vmov	r6, s13
 801ed66:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ed6a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ed6e:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ed72:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801ed76:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801ed7a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801ed7e:	ee12 2a90 	vmov	r2, s5
 801ed82:	eef0 2a47 	vmov.f32	s5, s14
 801ed86:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed8a:	ee13 2a10 	vmov	r2, s6
 801ed8e:	931f      	str	r3, [sp, #124]	@ 0x7c
 801ed90:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801ed92:	eeb0 3a67 	vmov.f32	s6, s15
 801ed96:	fb92 f3f3 	sdiv	r3, r2, r3
 801ed9a:	9320      	str	r3, [sp, #128]	@ 0x80
 801ed9c:	9b07      	ldr	r3, [sp, #28]
 801ed9e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801eda0:	3b01      	subs	r3, #1
 801eda2:	9307      	str	r3, [sp, #28]
 801eda4:	bf08      	it	eq
 801eda6:	4614      	moveq	r4, r2
 801eda8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801edaa:	bf18      	it	ne
 801edac:	461c      	movne	r4, r3
 801edae:	e6b4      	b.n	801eb1a <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801edb0:	2900      	cmp	r1, #0
 801edb2:	f43f af3c 	beq.w	801ec2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801edb6:	eb09 0003 	add.w	r0, r9, r3
 801edba:	0843      	lsrs	r3, r0, #1
 801edbc:	07c0      	lsls	r0, r0, #31
 801edbe:	f818 3003 	ldrb.w	r3, [r8, r3]
 801edc2:	bf54      	ite	pl
 801edc4:	f003 030f 	andpl.w	r3, r3, #15
 801edc8:	111b      	asrmi	r3, r3, #4
 801edca:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801edce:	b2db      	uxtb	r3, r3
 801edd0:	930a      	str	r3, [sp, #40]	@ 0x28
 801edd2:	e72c      	b.n	801ec2e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801edd4:	703a      	strb	r2, [r7, #0]
 801edd6:	7078      	strb	r0, [r7, #1]
 801edd8:	f887 e002 	strb.w	lr, [r7, #2]
 801eddc:	e775      	b.n	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801edde:	1c5a      	adds	r2, r3, #1
 801ede0:	f53f af73 	bmi.w	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ede4:	4594      	cmp	ip, r2
 801ede6:	f6ff af70 	blt.w	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801edea:	1c42      	adds	r2, r0, #1
 801edec:	f53f af6d 	bmi.w	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801edf0:	4596      	cmp	lr, r2
 801edf2:	f6ff af6a 	blt.w	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801edf6:	9302      	str	r3, [sp, #8]
 801edf8:	fa0f f38e 	sxth.w	r3, lr
 801edfc:	9a08      	ldr	r2, [sp, #32]
 801edfe:	9301      	str	r3, [sp, #4]
 801ee00:	fa0f f38c 	sxth.w	r3, ip
 801ee04:	9105      	str	r1, [sp, #20]
 801ee06:	4639      	mov	r1, r7
 801ee08:	9300      	str	r3, [sp, #0]
 801ee0a:	464b      	mov	r3, r9
 801ee0c:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801ee10:	4642      	mov	r2, r8
 801ee12:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801ee14:	f7ff fd90 	bl	801e938 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801ee18:	e757      	b.n	801ecca <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801ee1a:	142a      	asrs	r2, r5, #16
 801ee1c:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801ee20:	1433      	asrs	r3, r6, #16
 801ee22:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801ee26:	fb09 2303 	mla	r3, r9, r3, r2
 801ee2a:	085a      	lsrs	r2, r3, #1
 801ee2c:	07d9      	lsls	r1, r3, #31
 801ee2e:	f818 2002 	ldrb.w	r2, [r8, r2]
 801ee32:	bf54      	ite	pl
 801ee34:	f002 020f 	andpl.w	r2, r2, #15
 801ee38:	1112      	asrmi	r2, r2, #4
 801ee3a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801ee3e:	b2d2      	uxtb	r2, r2
 801ee40:	2800      	cmp	r0, #0
 801ee42:	f000 8085 	beq.w	801ef50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801ee46:	f103 0a01 	add.w	sl, r3, #1
 801ee4a:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801ee4e:	f01a 0f01 	tst.w	sl, #1
 801ee52:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ee56:	bf0c      	ite	eq
 801ee58:	f001 010f 	andeq.w	r1, r1, #15
 801ee5c:	1109      	asrne	r1, r1, #4
 801ee5e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ee62:	b2c9      	uxtb	r1, r1
 801ee64:	910f      	str	r1, [sp, #60]	@ 0x3c
 801ee66:	b1df      	cbz	r7, 801eea0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ee68:	444b      	add	r3, r9
 801ee6a:	0859      	lsrs	r1, r3, #1
 801ee6c:	f013 0f01 	tst.w	r3, #1
 801ee70:	f103 0301 	add.w	r3, r3, #1
 801ee74:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ee78:	bf0c      	ite	eq
 801ee7a:	f001 010f 	andeq.w	r1, r1, #15
 801ee7e:	1109      	asrne	r1, r1, #4
 801ee80:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ee84:	b2c9      	uxtb	r1, r1
 801ee86:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ee88:	0859      	lsrs	r1, r3, #1
 801ee8a:	07db      	lsls	r3, r3, #31
 801ee8c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ee90:	bf54      	ite	pl
 801ee92:	f001 010f 	andpl.w	r1, r1, #15
 801ee96:	1109      	asrmi	r1, r1, #4
 801ee98:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ee9c:	b2c9      	uxtb	r1, r1
 801ee9e:	9110      	str	r1, [sp, #64]	@ 0x40
 801eea0:	b280      	uxth	r0, r0
 801eea2:	b2bf      	uxth	r7, r7
 801eea4:	fb00 f307 	mul.w	r3, r0, r7
 801eea8:	0100      	lsls	r0, r0, #4
 801eeaa:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801eeae:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801eeb2:	1ac0      	subs	r0, r0, r3
 801eeb4:	b2bf      	uxth	r7, r7
 801eeb6:	b280      	uxth	r0, r0
 801eeb8:	1bc9      	subs	r1, r1, r7
 801eeba:	fa1f fa81 	uxth.w	sl, r1
 801eebe:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801eec0:	4348      	muls	r0, r1
 801eec2:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801eec4:	fb02 020a 	mla	r2, r2, sl, r0
 801eec8:	fb07 2701 	mla	r7, r7, r1, r2
 801eecc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801eece:	fb03 7302 	mla	r3, r3, r2, r7
 801eed2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801eed6:	b393      	cbz	r3, 801ef3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801eed8:	4a2a      	ldr	r2, [pc, #168]	@ (801ef84 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801eeda:	2bff      	cmp	r3, #255	@ 0xff
 801eedc:	6811      	ldr	r1, [r2, #0]
 801eede:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801eee2:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801eee6:	b2c9      	uxtb	r1, r1
 801eee8:	d042      	beq.n	801ef70 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801eeea:	b298      	uxth	r0, r3
 801eeec:	43db      	mvns	r3, r3
 801eeee:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801eef2:	fb11 f100 	smulbb	r1, r1, r0
 801eef6:	b2db      	uxtb	r3, r3
 801eef8:	fb17 f700 	smulbb	r7, r7, r0
 801eefc:	fb02 1103 	mla	r1, r2, r3, r1
 801ef00:	fb1a f000 	smulbb	r0, sl, r0
 801ef04:	b289      	uxth	r1, r1
 801ef06:	1c4a      	adds	r2, r1, #1
 801ef08:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801ef0c:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801ef10:	fb02 7703 	mla	r7, r2, r3, r7
 801ef14:	1209      	asrs	r1, r1, #8
 801ef16:	b2bf      	uxth	r7, r7
 801ef18:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ef1c:	1c7a      	adds	r2, r7, #1
 801ef1e:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801ef22:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801ef26:	fb02 0303 	mla	r3, r2, r3, r0
 801ef2a:	123f      	asrs	r7, r7, #8
 801ef2c:	b29b      	uxth	r3, r3
 801ef2e:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ef32:	1c5a      	adds	r2, r3, #1
 801ef34:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ef38:	121b      	asrs	r3, r3, #8
 801ef3a:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801ef3e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801ef40:	f10c 0c03 	add.w	ip, ip, #3
 801ef44:	f10e 3eff 	add.w	lr, lr, #4294967295
 801ef48:	441d      	add	r5, r3
 801ef4a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801ef4c:	441e      	add	r6, r3
 801ef4e:	e6e7      	b.n	801ed20 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801ef50:	2f00      	cmp	r7, #0
 801ef52:	d0a5      	beq.n	801eea0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ef54:	444b      	add	r3, r9
 801ef56:	0859      	lsrs	r1, r3, #1
 801ef58:	07db      	lsls	r3, r3, #31
 801ef5a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801ef5e:	bf54      	ite	pl
 801ef60:	f001 010f 	andpl.w	r1, r1, #15
 801ef64:	1109      	asrmi	r1, r1, #4
 801ef66:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801ef6a:	b2c9      	uxtb	r1, r1
 801ef6c:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ef6e:	e797      	b.n	801eea0 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801ef70:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801ef74:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801ef78:	f80c ac01 	strb.w	sl, [ip, #-1]
 801ef7c:	e7df      	b.n	801ef3e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801ef7e:	b013      	add	sp, #76	@ 0x4c
 801ef80:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ef84:	2402490c 	.word	0x2402490c

0801ef88 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801ef88:	b530      	push	{r4, r5, lr}
 801ef8a:	b29d      	uxth	r5, r3
 801ef8c:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801ef90:	780c      	ldrb	r4, [r1, #0]
 801ef92:	b298      	uxth	r0, r3
 801ef94:	7813      	ldrb	r3, [r2, #0]
 801ef96:	fb14 f405 	smulbb	r4, r4, r5
 801ef9a:	fb13 f300 	smulbb	r3, r3, r0
 801ef9e:	441c      	add	r4, r3
 801efa0:	b2a4      	uxth	r4, r4
 801efa2:	1c63      	adds	r3, r4, #1
 801efa4:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801efa8:	7853      	ldrb	r3, [r2, #1]
 801efaa:	fb13 f300 	smulbb	r3, r3, r0
 801efae:	1224      	asrs	r4, r4, #8
 801efb0:	7014      	strb	r4, [r2, #0]
 801efb2:	784c      	ldrb	r4, [r1, #1]
 801efb4:	fb14 f405 	smulbb	r4, r4, r5
 801efb8:	441c      	add	r4, r3
 801efba:	b2a4      	uxth	r4, r4
 801efbc:	1c63      	adds	r3, r4, #1
 801efbe:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801efc2:	1224      	asrs	r4, r4, #8
 801efc4:	7054      	strb	r4, [r2, #1]
 801efc6:	788b      	ldrb	r3, [r1, #2]
 801efc8:	7891      	ldrb	r1, [r2, #2]
 801efca:	fb13 f305 	smulbb	r3, r3, r5
 801efce:	fb11 f000 	smulbb	r0, r1, r0
 801efd2:	4403      	add	r3, r0
 801efd4:	b29b      	uxth	r3, r3
 801efd6:	1c59      	adds	r1, r3, #1
 801efd8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801efdc:	121b      	asrs	r3, r3, #8
 801efde:	7093      	strb	r3, [r2, #2]
 801efe0:	bd30      	pop	{r4, r5, pc}
	...

0801efe4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801efe4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801efe8:	461c      	mov	r4, r3
 801efea:	b08b      	sub	sp, #44	@ 0x2c
 801efec:	460e      	mov	r6, r1
 801efee:	4615      	mov	r5, r2
 801eff0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801eff2:	4682      	mov	sl, r0
 801eff4:	6861      	ldr	r1, [r4, #4]
 801eff6:	aa06      	add	r2, sp, #24
 801eff8:	6820      	ldr	r0, [r4, #0]
 801effa:	2702      	movs	r7, #2
 801effc:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801f000:	3504      	adds	r5, #4
 801f002:	c203      	stmia	r2!, {r0, r1}
 801f004:	6818      	ldr	r0, [r3, #0]
 801f006:	aa08      	add	r2, sp, #32
 801f008:	6859      	ldr	r1, [r3, #4]
 801f00a:	c203      	stmia	r2!, {r0, r1}
 801f00c:	a806      	add	r0, sp, #24
 801f00e:	f7f3 f8df 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f012:	4621      	mov	r1, r4
 801f014:	a808      	add	r0, sp, #32
 801f016:	f7f3 f903 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f01a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801f01e:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801f022:	f002 0301 	and.w	r3, r2, #1
 801f026:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801f02a:	9302      	str	r3, [sp, #8]
 801f02c:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f030:	f003 0101 	and.w	r1, r3, #1
 801f034:	9101      	str	r1, [sp, #4]
 801f036:	9801      	ldr	r0, [sp, #4]
 801f038:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801f03c:	4403      	add	r3, r0
 801f03e:	fb01 2303 	mla	r3, r1, r3, r2
 801f042:	fb93 f3f7 	sdiv	r3, r3, r7
 801f046:	441e      	add	r6, r3
 801f048:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801f04c:	441a      	add	r2, r3
 801f04e:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801f052:	4419      	add	r1, r3
 801f054:	4b70      	ldr	r3, [pc, #448]	@ (801f218 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801f056:	f8ad 2020 	strh.w	r2, [sp, #32]
 801f05a:	6818      	ldr	r0, [r3, #0]
 801f05c:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801f060:	6803      	ldr	r3, [r0, #0]
 801f062:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f064:	4798      	blx	r3
 801f066:	4a6d      	ldr	r2, [pc, #436]	@ (801f21c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801f068:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801f06c:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801f070:	8813      	ldrh	r3, [r2, #0]
 801f072:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801f076:	fb03 1404 	mla	r4, r3, r4, r1
 801f07a:	4611      	mov	r1, r2
 801f07c:	fb0b f303 	mul.w	r3, fp, r3
 801f080:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f084:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f088:	4404      	add	r4, r0
 801f08a:	4423      	add	r3, r4
 801f08c:	d073      	beq.n	801f176 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801f08e:	9705      	str	r7, [sp, #20]
 801f090:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801f094:	9b03      	ldr	r3, [sp, #12]
 801f096:	429c      	cmp	r4, r3
 801f098:	f080 80b5 	bcs.w	801f206 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f09c:	9b02      	ldr	r3, [sp, #8]
 801f09e:	b35b      	cbz	r3, 801f0f8 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801f0a0:	7831      	ldrb	r1, [r6, #0]
 801f0a2:	4622      	mov	r2, r4
 801f0a4:	1c77      	adds	r7, r6, #1
 801f0a6:	3403      	adds	r4, #3
 801f0a8:	f001 010f 	and.w	r1, r1, #15
 801f0ac:	f108 3bff 	add.w	fp, r8, #4294967295
 801f0b0:	464b      	mov	r3, r9
 801f0b2:	4650      	mov	r0, sl
 801f0b4:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f0b8:	4429      	add	r1, r5
 801f0ba:	f7ff ff65 	bl	801ef88 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f0be:	f1bb 0f01 	cmp.w	fp, #1
 801f0c2:	dd1c      	ble.n	801f0fe <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801f0c4:	7839      	ldrb	r1, [r7, #0]
 801f0c6:	4622      	mov	r2, r4
 801f0c8:	464b      	mov	r3, r9
 801f0ca:	4650      	mov	r0, sl
 801f0cc:	0909      	lsrs	r1, r1, #4
 801f0ce:	f1ab 0b02 	sub.w	fp, fp, #2
 801f0d2:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f0d6:	4429      	add	r1, r5
 801f0d8:	f7ff ff56 	bl	801ef88 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f0dc:	f817 1b01 	ldrb.w	r1, [r7], #1
 801f0e0:	1ce2      	adds	r2, r4, #3
 801f0e2:	464b      	mov	r3, r9
 801f0e4:	f001 010f 	and.w	r1, r1, #15
 801f0e8:	4650      	mov	r0, sl
 801f0ea:	3406      	adds	r4, #6
 801f0ec:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f0f0:	4429      	add	r1, r5
 801f0f2:	f7ff ff49 	bl	801ef88 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f0f6:	e7e2      	b.n	801f0be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f0f8:	4637      	mov	r7, r6
 801f0fa:	46c3      	mov	fp, r8
 801f0fc:	e7df      	b.n	801f0be <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 801f0fe:	d10a      	bne.n	801f116 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 801f100:	7839      	ldrb	r1, [r7, #0]
 801f102:	4622      	mov	r2, r4
 801f104:	3403      	adds	r4, #3
 801f106:	464b      	mov	r3, r9
 801f108:	0909      	lsrs	r1, r1, #4
 801f10a:	4650      	mov	r0, sl
 801f10c:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801f110:	4429      	add	r1, r5
 801f112:	f7ff ff39 	bl	801ef88 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801f116:	9b04      	ldr	r3, [sp, #16]
 801f118:	9a01      	ldr	r2, [sp, #4]
 801f11a:	881b      	ldrh	r3, [r3, #0]
 801f11c:	eba3 0308 	sub.w	r3, r3, r8
 801f120:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f124:	441c      	add	r4, r3
 801f126:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801f12a:	4413      	add	r3, r2
 801f12c:	9a05      	ldr	r2, [sp, #20]
 801f12e:	fb93 f3f2 	sdiv	r3, r3, r2
 801f132:	441e      	add	r6, r3
 801f134:	e7ae      	b.n	801f094 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 801f136:	4632      	mov	r2, r6
 801f138:	46c4      	mov	ip, r8
 801f13a:	e037      	b.n	801f1ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f13c:	d10e      	bne.n	801f15c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 801f13e:	7812      	ldrb	r2, [r2, #0]
 801f140:	3003      	adds	r0, #3
 801f142:	0912      	lsrs	r2, r2, #4
 801f144:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801f148:	18ac      	adds	r4, r5, r2
 801f14a:	5caa      	ldrb	r2, [r5, r2]
 801f14c:	f800 2c03 	strb.w	r2, [r0, #-3]
 801f150:	7862      	ldrb	r2, [r4, #1]
 801f152:	f800 2c02 	strb.w	r2, [r0, #-2]
 801f156:	78a2      	ldrb	r2, [r4, #2]
 801f158:	f800 2c01 	strb.w	r2, [r0, #-1]
 801f15c:	880c      	ldrh	r4, [r1, #0]
 801f15e:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 801f162:	eba4 0408 	sub.w	r4, r4, r8
 801f166:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f16a:	4404      	add	r4, r0
 801f16c:	9801      	ldr	r0, [sp, #4]
 801f16e:	4402      	add	r2, r0
 801f170:	fb92 f2f7 	sdiv	r2, r2, r7
 801f174:	4416      	add	r6, r2
 801f176:	429c      	cmp	r4, r3
 801f178:	d245      	bcs.n	801f206 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801f17a:	9a02      	ldr	r2, [sp, #8]
 801f17c:	2a00      	cmp	r2, #0
 801f17e:	d0da      	beq.n	801f136 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 801f180:	7830      	ldrb	r0, [r6, #0]
 801f182:	1c72      	adds	r2, r6, #1
 801f184:	3403      	adds	r4, #3
 801f186:	f000 000f 	and.w	r0, r0, #15
 801f18a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f18e:	eb05 0c00 	add.w	ip, r5, r0
 801f192:	5c28      	ldrb	r0, [r5, r0]
 801f194:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f198:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801f19c:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f1a0:	f89c 0002 	ldrb.w	r0, [ip, #2]
 801f1a4:	f108 3cff 	add.w	ip, r8, #4294967295
 801f1a8:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f1ac:	f1bc 0f01 	cmp.w	ip, #1
 801f1b0:	4620      	mov	r0, r4
 801f1b2:	f104 0406 	add.w	r4, r4, #6
 801f1b6:	ddc1      	ble.n	801f13c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 801f1b8:	7810      	ldrb	r0, [r2, #0]
 801f1ba:	f1ac 0c02 	sub.w	ip, ip, #2
 801f1be:	0900      	lsrs	r0, r0, #4
 801f1c0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1c4:	eb05 0e00 	add.w	lr, r5, r0
 801f1c8:	5c28      	ldrb	r0, [r5, r0]
 801f1ca:	f804 0c06 	strb.w	r0, [r4, #-6]
 801f1ce:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f1d2:	f804 0c05 	strb.w	r0, [r4, #-5]
 801f1d6:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f1da:	f804 0c04 	strb.w	r0, [r4, #-4]
 801f1de:	f812 0b01 	ldrb.w	r0, [r2], #1
 801f1e2:	f000 000f 	and.w	r0, r0, #15
 801f1e6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801f1ea:	eb05 0e00 	add.w	lr, r5, r0
 801f1ee:	5c28      	ldrb	r0, [r5, r0]
 801f1f0:	f804 0c03 	strb.w	r0, [r4, #-3]
 801f1f4:	f89e 0001 	ldrb.w	r0, [lr, #1]
 801f1f8:	f804 0c02 	strb.w	r0, [r4, #-2]
 801f1fc:	f89e 0002 	ldrb.w	r0, [lr, #2]
 801f200:	f804 0c01 	strb.w	r0, [r4, #-1]
 801f204:	e7d2      	b.n	801f1ac <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 801f206:	4b04      	ldr	r3, [pc, #16]	@ (801f218 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801f208:	6818      	ldr	r0, [r3, #0]
 801f20a:	6803      	ldr	r3, [r0, #0]
 801f20c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f20e:	4798      	blx	r3
 801f210:	b00b      	add	sp, #44	@ 0x2c
 801f212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f216:	bf00      	nop
 801f218:	240248fc 	.word	0x240248fc
 801f21c:	240248f6 	.word	0x240248f6

0801f220 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 801f220:	b530      	push	{r4, r5, lr}
 801f222:	f89d 000c 	ldrb.w	r0, [sp, #12]
 801f226:	780d      	ldrb	r5, [r1, #0]
 801f228:	28ff      	cmp	r0, #255	@ 0xff
 801f22a:	d107      	bne.n	801f23c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f22c:	2bff      	cmp	r3, #255	@ 0xff
 801f22e:	d105      	bne.n	801f23c <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 801f230:	7015      	strb	r5, [r2, #0]
 801f232:	784b      	ldrb	r3, [r1, #1]
 801f234:	7053      	strb	r3, [r2, #1]
 801f236:	788b      	ldrb	r3, [r1, #2]
 801f238:	7093      	strb	r3, [r2, #2]
 801f23a:	bd30      	pop	{r4, r5, pc}
 801f23c:	fb10 f003 	smulbb	r0, r0, r3
 801f240:	b283      	uxth	r3, r0
 801f242:	1c58      	adds	r0, r3, #1
 801f244:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801f248:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801f24c:	b284      	uxth	r4, r0
 801f24e:	43c0      	mvns	r0, r0
 801f250:	fb15 f504 	smulbb	r5, r5, r4
 801f254:	b2c3      	uxtb	r3, r0
 801f256:	7810      	ldrb	r0, [r2, #0]
 801f258:	fb00 5003 	mla	r0, r0, r3, r5
 801f25c:	b280      	uxth	r0, r0
 801f25e:	1c45      	adds	r5, r0, #1
 801f260:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f264:	7855      	ldrb	r5, [r2, #1]
 801f266:	fb15 f503 	smulbb	r5, r5, r3
 801f26a:	1200      	asrs	r0, r0, #8
 801f26c:	7010      	strb	r0, [r2, #0]
 801f26e:	7848      	ldrb	r0, [r1, #1]
 801f270:	fb00 5004 	mla	r0, r0, r4, r5
 801f274:	b280      	uxth	r0, r0
 801f276:	1c45      	adds	r5, r0, #1
 801f278:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f27c:	1200      	asrs	r0, r0, #8
 801f27e:	7050      	strb	r0, [r2, #1]
 801f280:	7888      	ldrb	r0, [r1, #2]
 801f282:	7891      	ldrb	r1, [r2, #2]
 801f284:	fb11 f303 	smulbb	r3, r1, r3
 801f288:	fb00 3304 	mla	r3, r0, r4, r3
 801f28c:	b29b      	uxth	r3, r3
 801f28e:	1c59      	adds	r1, r3, #1
 801f290:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801f294:	121b      	asrs	r3, r3, #8
 801f296:	e7cf      	b.n	801f238 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

0801f298 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801f298:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f29c:	461d      	mov	r5, r3
 801f29e:	b08f      	sub	sp, #60	@ 0x3c
 801f2a0:	460c      	mov	r4, r1
 801f2a2:	4616      	mov	r6, r2
 801f2a4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801f2a6:	4680      	mov	r8, r0
 801f2a8:	6869      	ldr	r1, [r5, #4]
 801f2aa:	aa0a      	add	r2, sp, #40	@ 0x28
 801f2ac:	6828      	ldr	r0, [r5, #0]
 801f2ae:	3604      	adds	r6, #4
 801f2b0:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 801f2b4:	4f57      	ldr	r7, [pc, #348]	@ (801f414 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 801f2b6:	c203      	stmia	r2!, {r0, r1}
 801f2b8:	6818      	ldr	r0, [r3, #0]
 801f2ba:	aa0c      	add	r2, sp, #48	@ 0x30
 801f2bc:	6859      	ldr	r1, [r3, #4]
 801f2be:	c203      	stmia	r2!, {r0, r1}
 801f2c0:	a80a      	add	r0, sp, #40	@ 0x28
 801f2c2:	f7f2 ff85 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f2c6:	4629      	mov	r1, r5
 801f2c8:	a80c      	add	r0, sp, #48	@ 0x30
 801f2ca:	2502      	movs	r5, #2
 801f2cc:	f7f2 ffa8 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f2d0:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801f2d4:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 801f2d8:	f002 0301 	and.w	r3, r2, #1
 801f2dc:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 801f2e0:	9304      	str	r3, [sp, #16]
 801f2e2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f2e6:	f003 0101 	and.w	r1, r3, #1
 801f2ea:	9103      	str	r1, [sp, #12]
 801f2ec:	9803      	ldr	r0, [sp, #12]
 801f2ee:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 801f2f2:	4403      	add	r3, r0
 801f2f4:	6838      	ldr	r0, [r7, #0]
 801f2f6:	fb01 2303 	mla	r3, r1, r3, r2
 801f2fa:	fb93 f3f5 	sdiv	r3, r3, r5
 801f2fe:	18e5      	adds	r5, r4, r3
 801f300:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801f304:	441a      	add	r2, r3
 801f306:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801f30a:	4419      	add	r1, r3
 801f30c:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801f310:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 801f314:	6803      	ldr	r3, [r0, #0]
 801f316:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801f318:	4798      	blx	r3
 801f31a:	4a3f      	ldr	r2, [pc, #252]	@ (801f418 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 801f31c:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 801f320:	8813      	ldrh	r3, [r2, #0]
 801f322:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801f326:	9207      	str	r2, [sp, #28]
 801f328:	fb03 1404 	mla	r4, r3, r4, r1
 801f32c:	fb0a f303 	mul.w	r3, sl, r3
 801f330:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f334:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f338:	4404      	add	r4, r0
 801f33a:	18e3      	adds	r3, r4, r3
 801f33c:	e9cd 3705 	strd	r3, r7, [sp, #20]
 801f340:	9b05      	ldr	r3, [sp, #20]
 801f342:	429c      	cmp	r4, r3
 801f344:	d25d      	bcs.n	801f402 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 801f346:	9b04      	ldr	r3, [sp, #16]
 801f348:	2b00      	cmp	r3, #0
 801f34a:	d037      	beq.n	801f3bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 801f34c:	782b      	ldrb	r3, [r5, #0]
 801f34e:	1c6f      	adds	r7, r5, #1
 801f350:	f003 030f 	and.w	r3, r3, #15
 801f354:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f358:	9309      	str	r3, [sp, #36]	@ 0x24
 801f35a:	0e1b      	lsrs	r3, r3, #24
 801f35c:	d006      	beq.n	801f36c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 801f35e:	9300      	str	r3, [sp, #0]
 801f360:	4622      	mov	r2, r4
 801f362:	464b      	mov	r3, r9
 801f364:	a909      	add	r1, sp, #36	@ 0x24
 801f366:	4640      	mov	r0, r8
 801f368:	f7ff ff5a 	bl	801f220 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f36c:	3403      	adds	r4, #3
 801f36e:	f10b 3aff 	add.w	sl, fp, #4294967295
 801f372:	f1ba 0f01 	cmp.w	sl, #1
 801f376:	dd24      	ble.n	801f3c2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 801f378:	783b      	ldrb	r3, [r7, #0]
 801f37a:	091b      	lsrs	r3, r3, #4
 801f37c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f380:	9308      	str	r3, [sp, #32]
 801f382:	0e1b      	lsrs	r3, r3, #24
 801f384:	d006      	beq.n	801f394 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 801f386:	9300      	str	r3, [sp, #0]
 801f388:	4622      	mov	r2, r4
 801f38a:	464b      	mov	r3, r9
 801f38c:	a908      	add	r1, sp, #32
 801f38e:	4640      	mov	r0, r8
 801f390:	f7ff ff46 	bl	801f220 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f394:	f817 3b01 	ldrb.w	r3, [r7], #1
 801f398:	f003 030f 	and.w	r3, r3, #15
 801f39c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f3a0:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3a2:	0e1b      	lsrs	r3, r3, #24
 801f3a4:	d006      	beq.n	801f3b4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 801f3a6:	9300      	str	r3, [sp, #0]
 801f3a8:	1ce2      	adds	r2, r4, #3
 801f3aa:	464b      	mov	r3, r9
 801f3ac:	a909      	add	r1, sp, #36	@ 0x24
 801f3ae:	4640      	mov	r0, r8
 801f3b0:	f7ff ff36 	bl	801f220 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f3b4:	3406      	adds	r4, #6
 801f3b6:	f1aa 0a02 	sub.w	sl, sl, #2
 801f3ba:	e7da      	b.n	801f372 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f3bc:	462f      	mov	r7, r5
 801f3be:	46da      	mov	sl, fp
 801f3c0:	e7d7      	b.n	801f372 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 801f3c2:	d10e      	bne.n	801f3e2 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 801f3c4:	783b      	ldrb	r3, [r7, #0]
 801f3c6:	091b      	lsrs	r3, r3, #4
 801f3c8:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801f3cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f3ce:	0e1b      	lsrs	r3, r3, #24
 801f3d0:	d006      	beq.n	801f3e0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 801f3d2:	9300      	str	r3, [sp, #0]
 801f3d4:	4622      	mov	r2, r4
 801f3d6:	464b      	mov	r3, r9
 801f3d8:	a909      	add	r1, sp, #36	@ 0x24
 801f3da:	4640      	mov	r0, r8
 801f3dc:	f7ff ff20 	bl	801f220 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 801f3e0:	3403      	adds	r4, #3
 801f3e2:	9b07      	ldr	r3, [sp, #28]
 801f3e4:	9a03      	ldr	r2, [sp, #12]
 801f3e6:	881b      	ldrh	r3, [r3, #0]
 801f3e8:	eba3 030b 	sub.w	r3, r3, fp
 801f3ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3f0:	441c      	add	r4, r3
 801f3f2:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801f3f6:	4413      	add	r3, r2
 801f3f8:	2202      	movs	r2, #2
 801f3fa:	fb93 f3f2 	sdiv	r3, r3, r2
 801f3fe:	441d      	add	r5, r3
 801f400:	e79e      	b.n	801f340 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 801f402:	9b06      	ldr	r3, [sp, #24]
 801f404:	6818      	ldr	r0, [r3, #0]
 801f406:	6803      	ldr	r3, [r0, #0]
 801f408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f40a:	4798      	blx	r3
 801f40c:	b00f      	add	sp, #60	@ 0x3c
 801f40e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f412:	bf00      	nop
 801f414:	240248fc 	.word	0x240248fc
 801f418:	240248f6 	.word	0x240248f6

0801f41c <CRC_Lock>:
 801f41c:	4a2d      	ldr	r2, [pc, #180]	@ (801f4d4 <CRC_Lock+0xb8>)
 801f41e:	b530      	push	{r4, r5, lr}
 801f420:	6813      	ldr	r3, [r2, #0]
 801f422:	f24c 2540 	movw	r5, #49728	@ 0xc240
 801f426:	f023 0301 	bic.w	r3, r3, #1
 801f42a:	6013      	str	r3, [r2, #0]
 801f42c:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 801f430:	4b29      	ldr	r3, [pc, #164]	@ (801f4d8 <CRC_Lock+0xbc>)
 801f432:	681c      	ldr	r4, [r3, #0]
 801f434:	4014      	ands	r4, r2
 801f436:	42ac      	cmp	r4, r5
 801f438:	d005      	beq.n	801f446 <CRC_Lock+0x2a>
 801f43a:	681c      	ldr	r4, [r3, #0]
 801f43c:	f24c 2570 	movw	r5, #49776	@ 0xc270
 801f440:	4014      	ands	r4, r2
 801f442:	42ac      	cmp	r4, r5
 801f444:	d125      	bne.n	801f492 <CRC_Lock+0x76>
 801f446:	4b25      	ldr	r3, [pc, #148]	@ (801f4dc <CRC_Lock+0xc0>)
 801f448:	681b      	ldr	r3, [r3, #0]
 801f44a:	2b00      	cmp	r3, #0
 801f44c:	d139      	bne.n	801f4c2 <CRC_Lock+0xa6>
 801f44e:	4b24      	ldr	r3, [pc, #144]	@ (801f4e0 <CRC_Lock+0xc4>)
 801f450:	681a      	ldr	r2, [r3, #0]
 801f452:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f456:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 801f45a:	d00d      	beq.n	801f478 <CRC_Lock+0x5c>
 801f45c:	681a      	ldr	r2, [r3, #0]
 801f45e:	f240 4483 	movw	r4, #1155	@ 0x483
 801f462:	f3c2 020b 	ubfx	r2, r2, #0, #12
 801f466:	42a2      	cmp	r2, r4
 801f468:	d006      	beq.n	801f478 <CRC_Lock+0x5c>
 801f46a:	681b      	ldr	r3, [r3, #0]
 801f46c:	f240 4285 	movw	r2, #1157	@ 0x485
 801f470:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f474:	4293      	cmp	r3, r2
 801f476:	d124      	bne.n	801f4c2 <CRC_Lock+0xa6>
 801f478:	4b1a      	ldr	r3, [pc, #104]	@ (801f4e4 <CRC_Lock+0xc8>)
 801f47a:	2201      	movs	r2, #1
 801f47c:	601a      	str	r2, [r3, #0]
 801f47e:	681a      	ldr	r2, [r3, #0]
 801f480:	2a00      	cmp	r2, #0
 801f482:	d1fc      	bne.n	801f47e <CRC_Lock+0x62>
 801f484:	4b18      	ldr	r3, [pc, #96]	@ (801f4e8 <CRC_Lock+0xcc>)
 801f486:	6018      	str	r0, [r3, #0]
 801f488:	6818      	ldr	r0, [r3, #0]
 801f48a:	1a43      	subs	r3, r0, r1
 801f48c:	4258      	negs	r0, r3
 801f48e:	4158      	adcs	r0, r3
 801f490:	e00e      	b.n	801f4b0 <CRC_Lock+0x94>
 801f492:	681b      	ldr	r3, [r3, #0]
 801f494:	4013      	ands	r3, r2
 801f496:	f24d 2220 	movw	r2, #53792	@ 0xd220
 801f49a:	4293      	cmp	r3, r2
 801f49c:	d111      	bne.n	801f4c2 <CRC_Lock+0xa6>
 801f49e:	4b13      	ldr	r3, [pc, #76]	@ (801f4ec <CRC_Lock+0xd0>)
 801f4a0:	f240 4286 	movw	r2, #1158	@ 0x486
 801f4a4:	681b      	ldr	r3, [r3, #0]
 801f4a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801f4aa:	4293      	cmp	r3, r2
 801f4ac:	d001      	beq.n	801f4b2 <CRC_Lock+0x96>
 801f4ae:	2000      	movs	r0, #0
 801f4b0:	bd30      	pop	{r4, r5, pc}
 801f4b2:	4b0f      	ldr	r3, [pc, #60]	@ (801f4f0 <CRC_Lock+0xd4>)
 801f4b4:	2201      	movs	r2, #1
 801f4b6:	601a      	str	r2, [r3, #0]
 801f4b8:	681a      	ldr	r2, [r3, #0]
 801f4ba:	2a00      	cmp	r2, #0
 801f4bc:	d1fc      	bne.n	801f4b8 <CRC_Lock+0x9c>
 801f4be:	4b0d      	ldr	r3, [pc, #52]	@ (801f4f4 <CRC_Lock+0xd8>)
 801f4c0:	e7e1      	b.n	801f486 <CRC_Lock+0x6a>
 801f4c2:	4b0d      	ldr	r3, [pc, #52]	@ (801f4f8 <CRC_Lock+0xdc>)
 801f4c4:	2201      	movs	r2, #1
 801f4c6:	601a      	str	r2, [r3, #0]
 801f4c8:	681a      	ldr	r2, [r3, #0]
 801f4ca:	2a00      	cmp	r2, #0
 801f4cc:	d1fc      	bne.n	801f4c8 <CRC_Lock+0xac>
 801f4ce:	4b0b      	ldr	r3, [pc, #44]	@ (801f4fc <CRC_Lock+0xe0>)
 801f4d0:	e7d9      	b.n	801f486 <CRC_Lock+0x6a>
 801f4d2:	bf00      	nop
 801f4d4:	e0002000 	.word	0xe0002000
 801f4d8:	e000ed00 	.word	0xe000ed00
 801f4dc:	e0042000 	.word	0xe0042000
 801f4e0:	5c001000 	.word	0x5c001000
 801f4e4:	58024c08 	.word	0x58024c08
 801f4e8:	58024c00 	.word	0x58024c00
 801f4ec:	46008ff0 	.word	0x46008ff0
 801f4f0:	46024c08 	.word	0x46024c08
 801f4f4:	46024c00 	.word	0x46024c00
 801f4f8:	40023008 	.word	0x40023008
 801f4fc:	40023000 	.word	0x40023000

0801f500 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 801f500:	6101      	str	r1, [r0, #16]
 801f502:	4770      	bx	lr

0801f504 <_ZN8touchgfx8Gestures4tickEv>:
 801f504:	7b83      	ldrb	r3, [r0, #14]
 801f506:	b14b      	cbz	r3, 801f51c <_ZN8touchgfx8Gestures4tickEv+0x18>
 801f508:	8903      	ldrh	r3, [r0, #8]
 801f50a:	3301      	adds	r3, #1
 801f50c:	b29b      	uxth	r3, r3
 801f50e:	2b07      	cmp	r3, #7
 801f510:	8103      	strh	r3, [r0, #8]
 801f512:	bf81      	itttt	hi
 801f514:	2300      	movhi	r3, #0
 801f516:	8143      	strhhi	r3, [r0, #10]
 801f518:	8183      	strhhi	r3, [r0, #12]
 801f51a:	7383      	strbhi	r3, [r0, #14]
 801f51c:	4770      	bx	lr
	...

0801f520 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 801f520:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 801f524:	4698      	mov	r8, r3
 801f526:	8883      	ldrh	r3, [r0, #4]
 801f528:	4604      	mov	r4, r0
 801f52a:	4617      	mov	r7, r2
 801f52c:	f8ad 3006 	strh.w	r3, [sp, #6]
 801f530:	eba8 0303 	sub.w	r3, r8, r3
 801f534:	4a19      	ldr	r2, [pc, #100]	@ (801f59c <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 801f536:	460e      	mov	r6, r1
 801f538:	b21b      	sxth	r3, r3
 801f53a:	88c1      	ldrh	r1, [r0, #6]
 801f53c:	9200      	str	r2, [sp, #0]
 801f53e:	2000      	movs	r0, #0
 801f540:	2b00      	cmp	r3, #0
 801f542:	8aa2      	ldrh	r2, [r4, #20]
 801f544:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 801f548:	bfb8      	it	lt
 801f54a:	425b      	neglt	r3, r3
 801f54c:	f88d 0004 	strb.w	r0, [sp, #4]
 801f550:	f8ad 1008 	strh.w	r1, [sp, #8]
 801f554:	b21b      	sxth	r3, r3
 801f556:	f8ad 800a 	strh.w	r8, [sp, #10]
 801f55a:	f8ad 500c 	strh.w	r5, [sp, #12]
 801f55e:	4293      	cmp	r3, r2
 801f560:	dc07      	bgt.n	801f572 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 801f562:	1a69      	subs	r1, r5, r1
 801f564:	b209      	sxth	r1, r1
 801f566:	2900      	cmp	r1, #0
 801f568:	bfb8      	it	lt
 801f56a:	4249      	neglt	r1, r1
 801f56c:	b209      	sxth	r1, r1
 801f56e:	428a      	cmp	r2, r1
 801f570:	da10      	bge.n	801f594 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 801f572:	6920      	ldr	r0, [r4, #16]
 801f574:	4669      	mov	r1, sp
 801f576:	eba8 0606 	sub.w	r6, r8, r6
 801f57a:	1bef      	subs	r7, r5, r7
 801f57c:	6803      	ldr	r3, [r0, #0]
 801f57e:	685b      	ldr	r3, [r3, #4]
 801f580:	4798      	blx	r3
 801f582:	2300      	movs	r3, #0
 801f584:	2001      	movs	r0, #1
 801f586:	8166      	strh	r6, [r4, #10]
 801f588:	8123      	strh	r3, [r4, #8]
 801f58a:	81a7      	strh	r7, [r4, #12]
 801f58c:	f8a4 8004 	strh.w	r8, [r4, #4]
 801f590:	80e5      	strh	r5, [r4, #6]
 801f592:	73a0      	strb	r0, [r4, #14]
 801f594:	b004      	add	sp, #16
 801f596:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f59a:	bf00      	nop
 801f59c:	0802473c 	.word	0x0802473c

0801f5a0 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 801f5a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801f5a2:	461e      	mov	r6, r3
 801f5a4:	1e4b      	subs	r3, r1, #1
 801f5a6:	b085      	sub	sp, #20
 801f5a8:	4604      	mov	r4, r0
 801f5aa:	2b01      	cmp	r3, #1
 801f5ac:	460d      	mov	r5, r1
 801f5ae:	4617      	mov	r7, r2
 801f5b0:	d84b      	bhi.n	801f64a <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 801f5b2:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801f5b6:	1cd3      	adds	r3, r2, #3
 801f5b8:	b29b      	uxth	r3, r3
 801f5ba:	2b06      	cmp	r3, #6
 801f5bc:	d916      	bls.n	801f5ec <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 801f5be:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 801f660 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f5c2:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f5c6:	f8cd c004 	str.w	ip, [sp, #4]
 801f5ca:	f04f 0c00 	mov.w	ip, #0
 801f5ce:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f5d2:	6900      	ldr	r0, [r0, #16]
 801f5d4:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f5d8:	a901      	add	r1, sp, #4
 801f5da:	f88d c008 	strb.w	ip, [sp, #8]
 801f5de:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f5e2:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f5e6:	6803      	ldr	r3, [r0, #0]
 801f5e8:	689b      	ldr	r3, [r3, #8]
 801f5ea:	4798      	blx	r3
 801f5ec:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801f5f0:	1cd3      	adds	r3, r2, #3
 801f5f2:	b29b      	uxth	r3, r3
 801f5f4:	2b06      	cmp	r3, #6
 801f5f6:	d916      	bls.n	801f626 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f5f8:	f8df c064 	ldr.w	ip, [pc, #100]	@ 801f660 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 801f5fc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 801f600:	f8cd c004 	str.w	ip, [sp, #4]
 801f604:	f04f 0c01 	mov.w	ip, #1
 801f608:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 801f60c:	6920      	ldr	r0, [r4, #16]
 801f60e:	f8ad 100c 	strh.w	r1, [sp, #12]
 801f612:	a901      	add	r1, sp, #4
 801f614:	f88d c008 	strb.w	ip, [sp, #8]
 801f618:	f8ad 200a 	strh.w	r2, [sp, #10]
 801f61c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f620:	6803      	ldr	r3, [r0, #0]
 801f622:	689b      	ldr	r3, [r3, #8]
 801f624:	4798      	blx	r3
 801f626:	4b0d      	ldr	r3, [pc, #52]	@ (801f65c <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 801f628:	a901      	add	r1, sp, #4
 801f62a:	6920      	ldr	r0, [r4, #16]
 801f62c:	9301      	str	r3, [sp, #4]
 801f62e:	2300      	movs	r3, #0
 801f630:	f88d 5008 	strb.w	r5, [sp, #8]
 801f634:	f8ad 700a 	strh.w	r7, [sp, #10]
 801f638:	f8ad 600c 	strh.w	r6, [sp, #12]
 801f63c:	f8ad 300e 	strh.w	r3, [sp, #14]
 801f640:	6803      	ldr	r3, [r0, #0]
 801f642:	681b      	ldr	r3, [r3, #0]
 801f644:	4798      	blx	r3
 801f646:	b005      	add	sp, #20
 801f648:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801f64a:	2900      	cmp	r1, #0
 801f64c:	d1eb      	bne.n	801f626 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f64e:	80a2      	strh	r2, [r4, #4]
 801f650:	80c6      	strh	r6, [r0, #6]
 801f652:	60a1      	str	r1, [r4, #8]
 801f654:	81a1      	strh	r1, [r4, #12]
 801f656:	73a1      	strb	r1, [r4, #14]
 801f658:	e7e5      	b.n	801f626 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 801f65a:	bf00      	nop
 801f65c:	08024728 	.word	0x08024728
 801f660:	08024750 	.word	0x08024750

0801f664 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 801f664:	10c9      	asrs	r1, r1, #3
 801f666:	2900      	cmp	r1, #0
 801f668:	bfb8      	it	lt
 801f66a:	4249      	neglt	r1, r1
 801f66c:	2801      	cmp	r0, #1
 801f66e:	d108      	bne.n	801f682 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f670:	f3c1 0008 	ubfx	r0, r1, #0, #9
 801f674:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 801f678:	4601      	mov	r1, r0
 801f67a:	dd02      	ble.n	801f682 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 801f67c:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 801f680:	4770      	bx	lr
 801f682:	29ff      	cmp	r1, #255	@ 0xff
 801f684:	bfa8      	it	ge
 801f686:	21ff      	movge	r1, #255	@ 0xff
 801f688:	4608      	mov	r0, r1
 801f68a:	4770      	bx	lr

0801f68c <_ZN8touchgfx10Rasterizer6lineToEii>:
 801f68c:	b410      	push	{r4}
 801f68e:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 801f692:	429c      	cmp	r4, r3
 801f694:	d803      	bhi.n	801f69e <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 801f696:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f69a:	f7f1 bd4d 	b.w	8011138 <_ZN8touchgfx7Outline6lineToEii>
 801f69e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801f6a2:	4770      	bx	lr

0801f6a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 801f6a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f6a8:	b08b      	sub	sp, #44	@ 0x2c
 801f6aa:	4606      	mov	r6, r0
 801f6ac:	468a      	mov	sl, r1
 801f6ae:	e9cd 2306 	strd	r2, r3, [sp, #24]
 801f6b2:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 801f6b6:	9308      	str	r3, [sp, #32]
 801f6b8:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 801f6bc:	9309      	str	r3, [sp, #36]	@ 0x24
 801f6be:	f7f1 fea6 	bl	801140e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 801f6c2:	68b5      	ldr	r5, [r6, #8]
 801f6c4:	4604      	mov	r4, r0
 801f6c6:	2d00      	cmp	r5, #0
 801f6c8:	d044      	beq.n	801f754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f6ca:	6873      	ldr	r3, [r6, #4]
 801f6cc:	42ab      	cmp	r3, r5
 801f6ce:	d33d      	bcc.n	801f74c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 801f6d0:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801f6d4:	f04f 0800 	mov.w	r8, #0
 801f6d8:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 801f6dc:	eb02 0b03 	add.w	fp, r2, r3
 801f6e0:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 801f6e4:	fb02 1203 	mla	r2, r2, r3, r1
 801f6e8:	9205      	str	r2, [sp, #20]
 801f6ea:	1e6a      	subs	r2, r5, #1
 801f6ec:	9204      	str	r2, [sp, #16]
 801f6ee:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 801f6f2:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f6f6:	454b      	cmp	r3, r9
 801f6f8:	463a      	mov	r2, r7
 801f6fa:	d008      	beq.n	801f70e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 801f6fc:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 801f700:	eb03 0b09 	add.w	fp, r3, r9
 801f704:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 801f708:	fb03 1309 	mla	r3, r3, r9, r1
 801f70c:	9305      	str	r3, [sp, #20]
 801f70e:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 801f712:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 801f716:	4498      	add	r8, r3
 801f718:	9b04      	ldr	r3, [sp, #16]
 801f71a:	3b01      	subs	r3, #1
 801f71c:	9304      	str	r3, [sp, #16]
 801f71e:	9b04      	ldr	r3, [sp, #16]
 801f720:	3301      	adds	r3, #1
 801f722:	d015      	beq.n	801f750 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 801f724:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 801f728:	42bb      	cmp	r3, r7
 801f72a:	d117      	bne.n	801f75c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 801f72c:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 801f730:	9b04      	ldr	r3, [sp, #16]
 801f732:	4548      	cmp	r0, r9
 801f734:	f103 33ff 	add.w	r3, r3, #4294967295
 801f738:	d17d      	bne.n	801f836 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 801f73a:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 801f73e:	4401      	add	r1, r0
 801f740:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801f744:	4480      	add	r8, r0
 801f746:	e7e9      	b.n	801f71c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 801f748:	461f      	mov	r7, r3
 801f74a:	e042      	b.n	801f7d2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 801f74c:	2000      	movs	r0, #0
 801f74e:	e002      	b.n	801f756 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 801f750:	2900      	cmp	r1, #0
 801f752:	d16d      	bne.n	801f830 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 801f754:	2001      	movs	r0, #1
 801f756:	b00b      	add	sp, #44	@ 0x2c
 801f758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f75c:	b379      	cbz	r1, 801f7be <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 801f75e:	2f00      	cmp	r7, #0
 801f760:	db29      	blt.n	801f7b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f762:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f766:	42bb      	cmp	r3, r7
 801f768:	dd25      	ble.n	801f7b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f76a:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 801f76e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f772:	f7ff ff77 	bl	801f664 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f776:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f778:	fb10 f003 	smulbb	r0, r0, r3
 801f77c:	b280      	uxth	r0, r0
 801f77e:	1c41      	adds	r1, r0, #1
 801f780:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f784:	1209      	asrs	r1, r1, #8
 801f786:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f78a:	d014      	beq.n	801f7b6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 801f78c:	b2c9      	uxtb	r1, r1
 801f78e:	9808      	ldr	r0, [sp, #32]
 801f790:	b2ba      	uxth	r2, r7
 801f792:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f794:	9102      	str	r1, [sp, #8]
 801f796:	2101      	movs	r1, #1
 801f798:	4413      	add	r3, r2
 801f79a:	4402      	add	r2, r0
 801f79c:	9101      	str	r1, [sp, #4]
 801f79e:	fa0f f18b 	sxth.w	r1, fp
 801f7a2:	f8da 0000 	ldr.w	r0, [sl]
 801f7a6:	b21b      	sxth	r3, r3
 801f7a8:	9100      	str	r1, [sp, #0]
 801f7aa:	b212      	sxth	r2, r2
 801f7ac:	6941      	ldr	r1, [r0, #20]
 801f7ae:	4650      	mov	r0, sl
 801f7b0:	460d      	mov	r5, r1
 801f7b2:	9905      	ldr	r1, [sp, #20]
 801f7b4:	47a8      	blx	r5
 801f7b6:	9b04      	ldr	r3, [sp, #16]
 801f7b8:	1c7a      	adds	r2, r7, #1
 801f7ba:	3301      	adds	r3, #1
 801f7bc:	d0ca      	beq.n	801f754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f7be:	f9b4 7000 	ldrsh.w	r7, [r4]
 801f7c2:	1abb      	subs	r3, r7, r2
 801f7c4:	2b00      	cmp	r3, #0
 801f7c6:	dd31      	ble.n	801f82c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f7c8:	2a00      	cmp	r2, #0
 801f7ca:	dabd      	bge.n	801f748 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 801f7cc:	2f00      	cmp	r7, #0
 801f7ce:	dd2d      	ble.n	801f82c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f7d0:	2200      	movs	r2, #0
 801f7d2:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 801f7d6:	19d1      	adds	r1, r2, r7
 801f7d8:	4299      	cmp	r1, r3
 801f7da:	db02      	blt.n	801f7e2 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 801f7dc:	1a9f      	subs	r7, r3, r2
 801f7de:	2f00      	cmp	r7, #0
 801f7e0:	dd24      	ble.n	801f82c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f7e2:	ea4f 1188 	mov.w	r1, r8, lsl #6
 801f7e6:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 801f7ea:	f7ff ff3b 	bl	801f664 <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 801f7ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f7f0:	fb10 f003 	smulbb	r0, r0, r3
 801f7f4:	b280      	uxth	r0, r0
 801f7f6:	1c41      	adds	r1, r0, #1
 801f7f8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 801f7fc:	1209      	asrs	r1, r1, #8
 801f7fe:	f011 0fff 	tst.w	r1, #255	@ 0xff
 801f802:	d013      	beq.n	801f82c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f804:	b292      	uxth	r2, r2
 801f806:	9808      	ldr	r0, [sp, #32]
 801f808:	b2c9      	uxtb	r1, r1
 801f80a:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 801f80c:	b23f      	sxth	r7, r7
 801f80e:	4413      	add	r3, r2
 801f810:	9102      	str	r1, [sp, #8]
 801f812:	4402      	add	r2, r0
 801f814:	fa0f f18b 	sxth.w	r1, fp
 801f818:	f8da 0000 	ldr.w	r0, [sl]
 801f81c:	b21b      	sxth	r3, r3
 801f81e:	9100      	str	r1, [sp, #0]
 801f820:	b212      	sxth	r2, r2
 801f822:	9701      	str	r7, [sp, #4]
 801f824:	9905      	ldr	r1, [sp, #20]
 801f826:	6947      	ldr	r7, [r0, #20]
 801f828:	4650      	mov	r0, sl
 801f82a:	47b8      	blx	r7
 801f82c:	464b      	mov	r3, r9
 801f82e:	e75e      	b.n	801f6ee <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 801f830:	2f00      	cmp	r7, #0
 801f832:	da96      	bge.n	801f762 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 801f834:	e78e      	b.n	801f754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 801f836:	2900      	cmp	r1, #0
 801f838:	d0f8      	beq.n	801f82c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 801f83a:	e790      	b.n	801f75e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

0801f83c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 801f83c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f840:	461e      	mov	r6, r3
 801f842:	4b36      	ldr	r3, [pc, #216]	@ (801f91c <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 801f844:	2500      	movs	r5, #0
 801f846:	f100 0814 	add.w	r8, r0, #20
 801f84a:	4604      	mov	r4, r0
 801f84c:	4617      	mov	r7, r2
 801f84e:	e9c0 3100 	strd	r3, r1, [r0]
 801f852:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 801f856:	8185      	strh	r5, [r0, #12]
 801f858:	8103      	strh	r3, [r0, #8]
 801f85a:	f89d 3020 	ldrb.w	r3, [sp, #32]
 801f85e:	81c5      	strh	r5, [r0, #14]
 801f860:	7283      	strb	r3, [r0, #10]
 801f862:	8205      	strh	r5, [r0, #16]
 801f864:	8245      	strh	r5, [r0, #18]
 801f866:	4640      	mov	r0, r8
 801f868:	f7f0 ffac 	bl	80107c4 <_ZN8touchgfx7OutlineC1Ev>
 801f86c:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 801f870:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 801f874:	466b      	mov	r3, sp
 801f876:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 801f87a:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 801f87e:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 801f882:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 801f886:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 801f88a:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 801f88e:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 801f892:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 801f896:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 801f89a:	6830      	ldr	r0, [r6, #0]
 801f89c:	6871      	ldr	r1, [r6, #4]
 801f89e:	8872      	ldrh	r2, [r6, #2]
 801f8a0:	8835      	ldrh	r5, [r6, #0]
 801f8a2:	c303      	stmia	r3!, {r0, r1}
 801f8a4:	887b      	ldrh	r3, [r7, #2]
 801f8a6:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 801f8aa:	4413      	add	r3, r2
 801f8ac:	883a      	ldrh	r2, [r7, #0]
 801f8ae:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 801f8b2:	442a      	add	r2, r5
 801f8b4:	81e3      	strh	r3, [r4, #14]
 801f8b6:	8220      	strh	r0, [r4, #16]
 801f8b8:	4668      	mov	r0, sp
 801f8ba:	81a2      	strh	r2, [r4, #12]
 801f8bc:	8261      	strh	r1, [r4, #18]
 801f8be:	4639      	mov	r1, r7
 801f8c0:	f7f2 fcae 	bl	8012220 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801f8c4:	f104 000c 	add.w	r0, r4, #12
 801f8c8:	f7f2 fc82 	bl	80121d0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801f8cc:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f8d0:	f8bd 2000 	ldrh.w	r2, [sp]
 801f8d4:	4640      	mov	r0, r8
 801f8d6:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 801f8da:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 801f8de:	f7f0 ff55 	bl	801078c <_ZN8touchgfx7Outline5resetEv>
 801f8e2:	f9bd 3000 	ldrsh.w	r3, [sp]
 801f8e6:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 801f8ea:	4620      	mov	r0, r4
 801f8ec:	015b      	lsls	r3, r3, #5
 801f8ee:	64e3      	str	r3, [r4, #76]	@ 0x4c
 801f8f0:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 801f8f4:	015b      	lsls	r3, r3, #5
 801f8f6:	6523      	str	r3, [r4, #80]	@ 0x50
 801f8f8:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 801f8fc:	015b      	lsls	r3, r3, #5
 801f8fe:	6563      	str	r3, [r4, #84]	@ 0x54
 801f900:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 801f904:	015b      	lsls	r3, r3, #5
 801f906:	65a3      	str	r3, [r4, #88]	@ 0x58
 801f908:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 801f90c:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 801f910:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 801f914:	b002      	add	sp, #8
 801f916:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801f91a:	bf00      	nop
 801f91c:	080249e0 	.word	0x080249e0

0801f920 <_ZN8touchgfx6Canvas5closeEv>:
 801f920:	b538      	push	{r3, r4, r5, lr}
 801f922:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801f926:	4604      	mov	r4, r0
 801f928:	b193      	cbz	r3, 801f950 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f92a:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 801f92e:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 801f932:	4213      	tst	r3, r2
 801f934:	d10c      	bne.n	801f950 <_ZN8touchgfx6Canvas5closeEv+0x30>
 801f936:	f100 0514 	add.w	r5, r0, #20
 801f93a:	b123      	cbz	r3, 801f946 <_ZN8touchgfx6Canvas5closeEv+0x26>
 801f93c:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 801f940:	4628      	mov	r0, r5
 801f942:	f7ff fea3 	bl	801f68c <_ZN8touchgfx10Rasterizer6lineToEii>
 801f946:	4628      	mov	r0, r5
 801f948:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 801f94c:	f7ff fe9e 	bl	801f68c <_ZN8touchgfx10Rasterizer6lineToEii>
 801f950:	2300      	movs	r3, #0
 801f952:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801f956:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 801f95a:	4298      	cmp	r0, r3
 801f95c:	bf34      	ite	cc
 801f95e:	2000      	movcc	r0, #0
 801f960:	2001      	movcs	r0, #1
 801f962:	bd38      	pop	{r3, r4, r5, pc}

0801f964 <_ZN8touchgfx6Canvas6renderEh>:
 801f964:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 801f968:	7a85      	ldrb	r5, [r0, #10]
 801f96a:	4604      	mov	r4, r0
 801f96c:	4369      	muls	r1, r5
 801f96e:	1c4d      	adds	r5, r1, #1
 801f970:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 801f974:	122d      	asrs	r5, r5, #8
 801f976:	f000 8098 	beq.w	801faaa <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f97a:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 801f97e:	2b00      	cmp	r3, #0
 801f980:	f000 8093 	beq.w	801faaa <_ZN8touchgfx6Canvas6renderEh+0x146>
 801f984:	f7ff ffcc 	bl	801f920 <_ZN8touchgfx6Canvas5closeEv>
 801f988:	4607      	mov	r7, r0
 801f98a:	2800      	cmp	r0, #0
 801f98c:	d045      	beq.n	801fa1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801f98e:	6860      	ldr	r0, [r4, #4]
 801f990:	4e47      	ldr	r6, [pc, #284]	@ (801fab0 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 801f992:	6803      	ldr	r3, [r0, #0]
 801f994:	6837      	ldr	r7, [r6, #0]
 801f996:	689b      	ldr	r3, [r3, #8]
 801f998:	4798      	blx	r3
 801f99a:	4601      	mov	r1, r0
 801f99c:	4638      	mov	r0, r7
 801f99e:	f7ef fa11 	bl	800edc4 <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 801f9a2:	4607      	mov	r7, r0
 801f9a4:	f7e4 fb44 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 801f9a8:	6803      	ldr	r3, [r0, #0]
 801f9aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801f9ac:	4798      	blx	r3
 801f9ae:	4680      	mov	r8, r0
 801f9b0:	f7e4 fb3e 	bl	8004030 <_ZN8touchgfx3HAL3lcdEv>
 801f9b4:	6803      	ldr	r3, [r0, #0]
 801f9b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801f9b8:	4798      	blx	r3
 801f9ba:	280b      	cmp	r0, #11
 801f9bc:	d85a      	bhi.n	801fa74 <_ZN8touchgfx6Canvas6renderEh+0x110>
 801f9be:	e8df f000 	tbb	[pc, r0]
 801f9c2:	5b50      	.short	0x5b50
 801f9c4:	3059066b 	.word	0x3059066b
 801f9c8:	64646440 	.word	0x64646440
 801f9cc:	6464      	.short	0x6464
 801f9ce:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801f9d2:	2208      	movs	r2, #8
 801f9d4:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801f9d8:	fb91 f2f2 	sdiv	r2, r1, r2
 801f9dc:	fb08 2303 	mla	r3, r8, r3, r2
 801f9e0:	441f      	add	r7, r3
 801f9e2:	424b      	negs	r3, r1
 801f9e4:	f001 0107 	and.w	r1, r1, #7
 801f9e8:	f003 0307 	and.w	r3, r3, #7
 801f9ec:	bf58      	it	pl
 801f9ee:	4259      	negpl	r1, r3
 801f9f0:	b2c9      	uxtb	r1, r1
 801f9f2:	b2ed      	uxtb	r5, r5
 801f9f4:	463a      	mov	r2, r7
 801f9f6:	fa0f f388 	sxth.w	r3, r8
 801f9fa:	f104 0014 	add.w	r0, r4, #20
 801f9fe:	e9cd 1500 	strd	r1, r5, [sp]
 801fa02:	6861      	ldr	r1, [r4, #4]
 801fa04:	f7ff fe4e 	bl	801f6a4 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 801fa08:	4607      	mov	r7, r0
 801fa0a:	6860      	ldr	r0, [r4, #4]
 801fa0c:	6803      	ldr	r3, [r0, #0]
 801fa0e:	691b      	ldr	r3, [r3, #16]
 801fa10:	4798      	blx	r3
 801fa12:	6830      	ldr	r0, [r6, #0]
 801fa14:	6803      	ldr	r3, [r0, #0]
 801fa16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fa18:	4798      	blx	r3
 801fa1a:	4638      	mov	r0, r7
 801fa1c:	b002      	add	sp, #8
 801fa1e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801fa22:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801fa26:	2204      	movs	r2, #4
 801fa28:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa2c:	fb91 f2f2 	sdiv	r2, r1, r2
 801fa30:	fb08 2303 	mla	r3, r8, r3, r2
 801fa34:	441f      	add	r7, r3
 801fa36:	424b      	negs	r3, r1
 801fa38:	f001 0103 	and.w	r1, r1, #3
 801fa3c:	f003 0303 	and.w	r3, r3, #3
 801fa40:	e7d4      	b.n	801f9ec <_ZN8touchgfx6Canvas6renderEh+0x88>
 801fa42:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 801fa46:	2202      	movs	r2, #2
 801fa48:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa4c:	2900      	cmp	r1, #0
 801fa4e:	fb91 f2f2 	sdiv	r2, r1, r2
 801fa52:	f001 0101 	and.w	r1, r1, #1
 801fa56:	fb08 2303 	mla	r3, r8, r3, r2
 801fa5a:	bfb8      	it	lt
 801fa5c:	4249      	neglt	r1, r1
 801fa5e:	441f      	add	r7, r3
 801fa60:	e7c6      	b.n	801f9f0 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 801fa62:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa66:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa6a:	fb08 f303 	mul.w	r3, r8, r3
 801fa6e:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 801fa72:	441f      	add	r7, r3
 801fa74:	2100      	movs	r1, #0
 801fa76:	e7bc      	b.n	801f9f2 <_ZN8touchgfx6Canvas6renderEh+0x8e>
 801fa78:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa7c:	2103      	movs	r1, #3
 801fa7e:	fb08 f203 	mul.w	r2, r8, r3
 801fa82:	89a3      	ldrh	r3, [r4, #12]
 801fa84:	fb13 2301 	smlabb	r3, r3, r1, r2
 801fa88:	e7f3      	b.n	801fa72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fa8a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa8e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801fa92:	fb08 2303 	mla	r3, r8, r3, r2
 801fa96:	e7ec      	b.n	801fa72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801fa98:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 801fa9c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801faa0:	fb08 f303 	mul.w	r3, r8, r3
 801faa4:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 801faa8:	e7e3      	b.n	801fa72 <_ZN8touchgfx6Canvas6renderEh+0x10e>
 801faaa:	2701      	movs	r7, #1
 801faac:	e7b5      	b.n	801fa1a <_ZN8touchgfx6Canvas6renderEh+0xb6>
 801faae:	bf00      	nop
 801fab0:	240248fc 	.word	0x240248fc

0801fab4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 801fab4:	4b06      	ldr	r3, [pc, #24]	@ (801fad0 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 801fab6:	b510      	push	{r4, lr}
 801fab8:	781b      	ldrb	r3, [r3, #0]
 801faba:	2b01      	cmp	r3, #1
 801fabc:	d107      	bne.n	801face <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 801fabe:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801fac2:	680b      	ldr	r3, [r1, #0]
 801fac4:	6814      	ldr	r4, [r2, #0]
 801fac6:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 801faca:	6013      	str	r3, [r2, #0]
 801facc:	600c      	str	r4, [r1, #0]
 801face:	bd10      	pop	{r4, pc}
 801fad0:	240248f4 	.word	0x240248f4

0801fad4 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 801fad4:	b513      	push	{r0, r1, r4, lr}
 801fad6:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 801fada:	4604      	mov	r4, r0
 801fadc:	e9cd 2100 	strd	r2, r1, [sp]
 801fae0:	b9a3      	cbnz	r3, 801fb0c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 801fae2:	466a      	mov	r2, sp
 801fae4:	a901      	add	r1, sp, #4
 801fae6:	4620      	mov	r0, r4
 801fae8:	f7ff ffe4 	bl	801fab4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801faec:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801faee:	9901      	ldr	r1, [sp, #4]
 801faf0:	9a00      	ldr	r2, [sp, #0]
 801faf2:	1ac9      	subs	r1, r1, r3
 801faf4:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801faf6:	1ad2      	subs	r2, r2, r3
 801faf8:	9101      	str	r1, [sp, #4]
 801fafa:	2a00      	cmp	r2, #0
 801fafc:	9200      	str	r2, [sp, #0]
 801fafe:	da0b      	bge.n	801fb18 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 801fb00:	2301      	movs	r3, #1
 801fb02:	2900      	cmp	r1, #0
 801fb04:	da0e      	bge.n	801fb24 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 801fb06:	f043 0304 	orr.w	r3, r3, #4
 801fb0a:	e013      	b.n	801fb34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 801fb0c:	f7ff ff08 	bl	801f920 <_ZN8touchgfx6Canvas5closeEv>
 801fb10:	2800      	cmp	r0, #0
 801fb12:	d1e6      	bne.n	801fae2 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 801fb14:	b002      	add	sp, #8
 801fb16:	bd10      	pop	{r4, pc}
 801fb18:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fb1a:	429a      	cmp	r2, r3
 801fb1c:	bfac      	ite	ge
 801fb1e:	2302      	movge	r3, #2
 801fb20:	2300      	movlt	r3, #0
 801fb22:	e7ee      	b.n	801fb02 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 801fb24:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 801fb26:	4281      	cmp	r1, r0
 801fb28:	bfac      	ite	ge
 801fb2a:	2008      	movge	r0, #8
 801fb2c:	2000      	movlt	r0, #0
 801fb2e:	4318      	orrs	r0, r3
 801fb30:	b2c3      	uxtb	r3, r0
 801fb32:	b158      	cbz	r0, 801fb4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 801fb34:	2200      	movs	r2, #0
 801fb36:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 801fb3a:	9901      	ldr	r1, [sp, #4]
 801fb3c:	9a00      	ldr	r2, [sp, #0]
 801fb3e:	66e1      	str	r1, [r4, #108]	@ 0x6c
 801fb40:	6722      	str	r2, [r4, #112]	@ 0x70
 801fb42:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 801fb46:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 801fb4a:	e7e3      	b.n	801fb14 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 801fb4c:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801fb50:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fb54:	4298      	cmp	r0, r3
 801fb56:	d803      	bhi.n	801fb60 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 801fb58:	f104 0014 	add.w	r0, r4, #20
 801fb5c:	f7f1 fb06 	bl	801116c <_ZN8touchgfx7Outline6moveToEii>
 801fb60:	2301      	movs	r3, #1
 801fb62:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fb66:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fb6a:	2300      	movs	r3, #0
 801fb6c:	e7e5      	b.n	801fb3a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

0801fb6e <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 801fb6e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801fb70:	ab02      	add	r3, sp, #8
 801fb72:	4604      	mov	r4, r0
 801fb74:	9101      	str	r1, [sp, #4]
 801fb76:	a901      	add	r1, sp, #4
 801fb78:	f843 2d08 	str.w	r2, [r3, #-8]!
 801fb7c:	461a      	mov	r2, r3
 801fb7e:	f7ff ff99 	bl	801fab4 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 801fb82:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 801fb84:	9901      	ldr	r1, [sp, #4]
 801fb86:	9a00      	ldr	r2, [sp, #0]
 801fb88:	1ac9      	subs	r1, r1, r3
 801fb8a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 801fb8c:	1ad2      	subs	r2, r2, r3
 801fb8e:	9101      	str	r1, [sp, #4]
 801fb90:	2a00      	cmp	r2, #0
 801fb92:	9200      	str	r2, [sp, #0]
 801fb94:	db1c      	blt.n	801fbd0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 801fb96:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 801fb98:	429a      	cmp	r2, r3
 801fb9a:	bfac      	ite	ge
 801fb9c:	2002      	movge	r0, #2
 801fb9e:	2000      	movlt	r0, #0
 801fba0:	2900      	cmp	r1, #0
 801fba2:	db17      	blt.n	801fbd4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 801fba4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801fba6:	4299      	cmp	r1, r3
 801fba8:	bfac      	ite	ge
 801fbaa:	2308      	movge	r3, #8
 801fbac:	2300      	movlt	r3, #0
 801fbae:	4303      	orrs	r3, r0
 801fbb0:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 801fbb4:	b2dd      	uxtb	r5, r3
 801fbb6:	b978      	cbnz	r0, 801fbd8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 801fbb8:	f104 0014 	add.w	r0, r4, #20
 801fbbc:	f7ff fd66 	bl	801f68c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fbc0:	9b01      	ldr	r3, [sp, #4]
 801fbc2:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 801fbc6:	6623      	str	r3, [r4, #96]	@ 0x60
 801fbc8:	9b00      	ldr	r3, [sp, #0]
 801fbca:	6663      	str	r3, [r4, #100]	@ 0x64
 801fbcc:	b002      	add	sp, #8
 801fbce:	bd70      	pop	{r4, r5, r6, pc}
 801fbd0:	2001      	movs	r0, #1
 801fbd2:	e7e5      	b.n	801fba0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 801fbd4:	2304      	movs	r3, #4
 801fbd6:	e7ea      	b.n	801fbae <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 801fbd8:	b113      	cbz	r3, 801fbe0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 801fbda:	ea10 0305 	ands.w	r3, r0, r5
 801fbde:	d11c      	bne.n	801fc1a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 801fbe0:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 801fbe4:	f104 0614 	add.w	r6, r4, #20
 801fbe8:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 801fbec:	b98b      	cbnz	r3, 801fc12 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 801fbee:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 801fbf2:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 801fbf6:	4298      	cmp	r0, r3
 801fbf8:	d802      	bhi.n	801fc00 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 801fbfa:	4630      	mov	r0, r6
 801fbfc:	f7f1 fab6 	bl	801116c <_ZN8touchgfx7Outline6moveToEii>
 801fc00:	2301      	movs	r3, #1
 801fc02:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 801fc06:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 801fc0a:	4630      	mov	r0, r6
 801fc0c:	e9dd 2100 	ldrd	r2, r1, [sp]
 801fc10:	e7d4      	b.n	801fbbc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 801fc12:	4630      	mov	r0, r6
 801fc14:	f7ff fd3a 	bl	801f68c <_ZN8touchgfx10Rasterizer6lineToEii>
 801fc18:	e7f7      	b.n	801fc0a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 801fc1a:	461d      	mov	r5, r3
 801fc1c:	e7d0      	b.n	801fbc0 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

0801fc20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 801fc20:	b538      	push	{r3, r4, r5, lr}
 801fc22:	ed2d 8b10 	vpush	{d8-d15}
 801fc26:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 801fc2a:	4605      	mov	r5, r0
 801fc2c:	eeb0 ca40 	vmov.f32	s24, s0
 801fc30:	460c      	mov	r4, r1
 801fc32:	eef0 ca60 	vmov.f32	s25, s1
 801fc36:	ed9f ba57 	vldr	s22, [pc, #348]	@ 801fd94 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 801fc3a:	eeb0 da41 	vmov.f32	s26, s2
 801fc3e:	eef0 da61 	vmov.f32	s27, s3
 801fc42:	eeb0 ea42 	vmov.f32	s28, s4
 801fc46:	eef0 ea62 	vmov.f32	s29, s5
 801fc4a:	eef0 aa6b 	vmov.f32	s21, s23
 801fc4e:	2c08      	cmp	r4, #8
 801fc50:	d86e      	bhi.n	801fd30 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 801fc52:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 801fc56:	ee7d 7aee 	vsub.f32	s15, s27, s29
 801fc5a:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 801fc5e:	ee3e 7aec 	vsub.f32	s14, s29, s25
 801fc62:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 801fc66:	ee3c fa0d 	vadd.f32	s30, s24, s26
 801fc6a:	ee7c faad 	vadd.f32	s31, s25, s27
 801fc6e:	eee6 7a07 	vfma.f32	s15, s12, s14
 801fc72:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 801fc76:	ee3d aaae 	vadd.f32	s20, s27, s29
 801fc7a:	ee2f fa2b 	vmul.f32	s30, s30, s23
 801fc7e:	ee6f faab 	vmul.f32	s31, s31, s23
 801fc82:	ee69 9aab 	vmul.f32	s19, s19, s23
 801fc86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801fc8a:	ee2a aa2b 	vmul.f32	s20, s20, s23
 801fc8e:	ee7f 8a29 	vadd.f32	s17, s30, s19
 801fc92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fc96:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 801fc9a:	ee68 8aab 	vmul.f32	s17, s17, s23
 801fc9e:	bf48      	it	mi
 801fca0:	eef1 7a67 	vnegmi.f32	s15, s15
 801fca4:	ee29 9a2b 	vmul.f32	s18, s18, s23
 801fca8:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 801fcac:	eef4 7acb 	vcmpe.f32	s15, s22
 801fcb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcb4:	dd3f      	ble.n	801fd36 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 801fcb6:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fcba:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801fcbe:	eea6 7aa6 	vfma.f32	s14, s13, s13
 801fcc2:	ee27 7a06 	vmul.f32	s14, s14, s12
 801fcc6:	eef4 7ac7 	vcmpe.f32	s15, s14
 801fcca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcce:	d847      	bhi.n	801fd60 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fcd0:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 801fcd4:	ee3e 0aed 	vsub.f32	s0, s29, s27
 801fcd8:	f000 fa39 	bl	802014e <atan2f>
 801fcdc:	eeb0 8a40 	vmov.f32	s16, s0
 801fce0:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 801fce4:	ee3d 0aec 	vsub.f32	s0, s27, s25
 801fce8:	f000 fa31 	bl	802014e <atan2f>
 801fcec:	ee38 0a40 	vsub.f32	s0, s16, s0
 801fcf0:	eddf 7a29 	vldr	s15, [pc, #164]	@ 801fd98 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 801fcf4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801fcf8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fcfc:	bf48      	it	mi
 801fcfe:	eeb1 0a40 	vnegmi.f32	s0, s0
 801fd02:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fd06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd0a:	bfa4      	itt	ge
 801fd0c:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 801fd9c <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 801fd10:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801fd14:	eddf 7a22 	vldr	s15, [pc, #136]	@ 801fda0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 801fd18:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801fd1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd20:	d51e      	bpl.n	801fd60 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 801fd22:	eef0 0a49 	vmov.f32	s1, s18
 801fd26:	4628      	mov	r0, r5
 801fd28:	eeb0 0a68 	vmov.f32	s0, s17
 801fd2c:	f7ef feca 	bl	800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801fd30:	ecbd 8b10 	vpop	{d8-d15}
 801fd34:	bd38      	pop	{r3, r4, r5, pc}
 801fd36:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 801fd3a:	eeb0 7a68 	vmov.f32	s14, s17
 801fd3e:	eef0 6a49 	vmov.f32	s13, s18
 801fd42:	eea7 7aea 	vfms.f32	s14, s15, s21
 801fd46:	ee7c 7aae 	vadd.f32	s15, s25, s29
 801fd4a:	eee7 6aea 	vfms.f32	s13, s15, s21
 801fd4e:	ee66 7aa6 	vmul.f32	s15, s13, s13
 801fd52:	eee7 7a07 	vfma.f32	s15, s14, s14
 801fd56:	eef4 7ac6 	vcmpe.f32	s15, s12
 801fd5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fd5e:	d9e0      	bls.n	801fd22 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 801fd60:	3401      	adds	r4, #1
 801fd62:	eef0 0a6c 	vmov.f32	s1, s25
 801fd66:	eeb0 0a4c 	vmov.f32	s0, s24
 801fd6a:	4628      	mov	r0, r5
 801fd6c:	4621      	mov	r1, r4
 801fd6e:	eef0 2a49 	vmov.f32	s5, s18
 801fd72:	eeb0 2a68 	vmov.f32	s4, s17
 801fd76:	eef0 1a6f 	vmov.f32	s3, s31
 801fd7a:	eeb0 1a4f 	vmov.f32	s2, s30
 801fd7e:	f7ff ff4f 	bl	801fc20 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 801fd82:	eef0 da4a 	vmov.f32	s27, s20
 801fd86:	eeb0 da69 	vmov.f32	s26, s19
 801fd8a:	eef0 ca49 	vmov.f32	s25, s18
 801fd8e:	eeb0 ca68 	vmov.f32	s24, s17
 801fd92:	e75c      	b.n	801fc4e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 801fd94:	2edbe6ff 	.word	0x2edbe6ff
 801fd98:	40490fdb 	.word	0x40490fdb
 801fd9c:	40c90fdb 	.word	0x40c90fdb
 801fda0:	3dcccccd 	.word	0x3dcccccd

0801fda4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 801fda4:	b530      	push	{r4, r5, lr}
 801fda6:	ed2d 8b10 	vpush	{d8-d15}
 801fdaa:	eef0 8a40 	vmov.f32	s17, s0
 801fdae:	b085      	sub	sp, #20
 801fdb0:	eef0 9a60 	vmov.f32	s19, s1
 801fdb4:	4604      	mov	r4, r0
 801fdb6:	eef0 fa41 	vmov.f32	s31, s2
 801fdba:	460d      	mov	r5, r1
 801fdbc:	eeb0 fa61 	vmov.f32	s30, s3
 801fdc0:	eef0 ba42 	vmov.f32	s23, s4
 801fdc4:	eeb0 ca62 	vmov.f32	s24, s5
 801fdc8:	eef0 aa43 	vmov.f32	s21, s6
 801fdcc:	eeb0 ba63 	vmov.f32	s22, s7
 801fdd0:	2d08      	cmp	r5, #8
 801fdd2:	f200 8113 	bhi.w	801fffc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 801fdd6:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 801fdda:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 801fdde:	ee7f 6aab 	vadd.f32	s13, s31, s23
 801fde2:	ee38 daaf 	vadd.f32	s26, s17, s31
 801fde6:	ee26 6a27 	vmul.f32	s12, s12, s15
 801fdea:	ee7c ca0b 	vadd.f32	s25, s24, s22
 801fdee:	ee2d da27 	vmul.f32	s26, s26, s15
 801fdf2:	ed8d 6a01 	vstr	s12, [sp, #4]
 801fdf6:	eea6 6aa7 	vfma.f32	s12, s13, s15
 801fdfa:	ee6c caa7 	vmul.f32	s25, s25, s15
 801fdfe:	eeb0 ea4d 	vmov.f32	s28, s26
 801fe02:	ee79 da8f 	vadd.f32	s27, s19, s30
 801fe06:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 801fe0a:	eea6 eaa7 	vfma.f32	s28, s13, s15
 801fe0e:	ee66 6a27 	vmul.f32	s13, s12, s15
 801fe12:	ee6d daa7 	vmul.f32	s27, s27, s15
 801fe16:	edcd 6a03 	vstr	s13, [sp, #12]
 801fe1a:	eef0 6a6c 	vmov.f32	s13, s25
 801fe1e:	eef0 ea6d 	vmov.f32	s29, s27
 801fe22:	ee2e ea27 	vmul.f32	s28, s28, s15
 801fe26:	eee7 6a27 	vfma.f32	s13, s14, s15
 801fe2a:	eee7 ea27 	vfma.f32	s29, s14, s15
 801fe2e:	ee26 7aa7 	vmul.f32	s14, s13, s15
 801fe32:	ee6e eaa7 	vmul.f32	s29, s29, s15
 801fe36:	eef0 6a67 	vmov.f32	s13, s15
 801fe3a:	ed8d 7a02 	vstr	s14, [sp, #8]
 801fe3e:	ed9d 7a03 	vldr	s14, [sp, #12]
 801fe42:	ee3e 9a07 	vadd.f32	s18, s28, s14
 801fe46:	ed9d 7a02 	vldr	s14, [sp, #8]
 801fe4a:	ee3e aa87 	vadd.f32	s20, s29, s14
 801fe4e:	ee29 9a27 	vmul.f32	s18, s18, s15
 801fe52:	ee2a aa27 	vmul.f32	s20, s20, s15
 801fe56:	2d00      	cmp	r5, #0
 801fe58:	f000 810b 	beq.w	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801fe5c:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 801fe60:	eddf 4a95 	vldr	s9, [pc, #596]	@ 80200b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 801fe64:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 801fe68:	ee7b 7a69 	vsub.f32	s15, s22, s19
 801fe6c:	ee3f 6aea 	vsub.f32	s12, s31, s21
 801fe70:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 801fe74:	ee3b 5aea 	vsub.f32	s10, s23, s21
 801fe78:	eea6 7a27 	vfma.f32	s14, s12, s15
 801fe7c:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 801fe80:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 801fe84:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 801fe88:	eea5 6a27 	vfma.f32	s12, s10, s15
 801fe8c:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 801fe90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fe94:	bf48      	it	mi
 801fe96:	eeb1 7a47 	vnegmi.f32	s14, s14
 801fe9a:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 801fe9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801fea2:	eeb4 7ae4 	vcmpe.f32	s14, s9
 801fea6:	bf48      	it	mi
 801fea8:	eeb1 6a46 	vnegmi.f32	s12, s12
 801feac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feb0:	f340 80a8 	ble.w	8020004 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 801feb4:	eeb4 6ae4 	vcmpe.f32	s12, s9
 801feb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801febc:	dd5a      	ble.n	801ff74 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 801febe:	ee65 5aa5 	vmul.f32	s11, s11, s11
 801fec2:	ee37 7a06 	vadd.f32	s14, s14, s12
 801fec6:	eee7 5aa7 	vfma.f32	s11, s15, s15
 801feca:	ee27 7a07 	vmul.f32	s14, s14, s14
 801fece:	ee65 7a85 	vmul.f32	s15, s11, s10
 801fed2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801fed6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801feda:	f200 80ca 	bhi.w	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801fede:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801fee2:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801fee6:	f000 f932 	bl	802014e <atan2f>
 801feea:	eeb0 8a40 	vmov.f32	s16, s0
 801feee:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801fef2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801fef6:	f000 f92a 	bl	802014e <atan2f>
 801fefa:	ee38 fa40 	vsub.f32	s30, s16, s0
 801fefe:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 801ff02:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 801ff06:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 801ff0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff0e:	bf48      	it	mi
 801ff10:	eeb1 fa4f 	vnegmi.f32	s30, s30
 801ff14:	f000 f91b 	bl	802014e <atan2f>
 801ff18:	ee30 0a48 	vsub.f32	s0, s0, s16
 801ff1c:	eddf 7a67 	vldr	s15, [pc, #412]	@ 80200bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801ff20:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ff24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff28:	eeb4 fae7 	vcmpe.f32	s30, s15
 801ff2c:	eddf 7a63 	vldr	s15, [pc, #396]	@ 80200bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801ff30:	bf48      	it	mi
 801ff32:	eeb1 0a40 	vnegmi.f32	s0, s0
 801ff36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff3a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ff3e:	eddf 7a60 	vldr	s15, [pc, #384]	@ 80200c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801ff42:	bfa4      	itt	ge
 801ff44:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 80200c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ff48:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 801ff4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff50:	bfa4      	itt	ge
 801ff52:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 80200c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ff56:	ee37 0a40 	vsubge.f32	s0, s14, s0
 801ff5a:	ee3f 0a00 	vadd.f32	s0, s30, s0
 801ff5e:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ff62:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff66:	f140 8084 	bpl.w	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ff6a:	eef0 0a4a 	vmov.f32	s1, s20
 801ff6e:	eeb0 0a49 	vmov.f32	s0, s18
 801ff72:	e040      	b.n	801fff6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 801ff74:	ee67 7aa7 	vmul.f32	s15, s15, s15
 801ff78:	ee27 7a07 	vmul.f32	s14, s14, s14
 801ff7c:	eee5 7aa5 	vfma.f32	s15, s11, s11
 801ff80:	ee67 7a85 	vmul.f32	s15, s15, s10
 801ff84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801ff88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ff8c:	d871      	bhi.n	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ff8e:	ee7b 0aef 	vsub.f32	s1, s23, s31
 801ff92:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 801ff96:	f000 f8da 	bl	802014e <atan2f>
 801ff9a:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 801ff9e:	eeb0 8a40 	vmov.f32	s16, s0
 801ffa2:	ee3f 0a69 	vsub.f32	s0, s30, s19
 801ffa6:	f000 f8d2 	bl	802014e <atan2f>
 801ffaa:	ee38 0a40 	vsub.f32	s0, s16, s0
 801ffae:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80200bc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 801ffb2:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 801ffb6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffba:	bf48      	it	mi
 801ffbc:	eeb1 0a40 	vnegmi.f32	s0, s0
 801ffc0:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ffc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffc8:	bfa4      	itt	ge
 801ffca:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 80200c4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 801ffce:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 801ffd2:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80200c0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 801ffd6:	eeb4 0ae7 	vcmpe.f32	s0, s15
 801ffda:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ffde:	d548      	bpl.n	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 801ffe0:	eef0 0a4f 	vmov.f32	s1, s30
 801ffe4:	4620      	mov	r0, r4
 801ffe6:	eeb0 0a6f 	vmov.f32	s0, s31
 801ffea:	f7ef fd6b 	bl	800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801ffee:	eef0 0a4c 	vmov.f32	s1, s24
 801fff2:	eeb0 0a6b 	vmov.f32	s0, s23
 801fff6:	4620      	mov	r0, r4
 801fff8:	f7ef fd64 	bl	800fac4 <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 801fffc:	b005      	add	sp, #20
 801fffe:	ecbd 8b10 	vpop	{d8-d15}
 8020002:	bd30      	pop	{r4, r5, pc}
 8020004:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 80200b8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020008:	eeb4 6ac7 	vcmpe.f32	s12, s14
 802000c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020010:	dd19      	ble.n	8020046 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8020012:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020016:	ee26 7a06 	vmul.f32	s14, s12, s12
 802001a:	eee5 7aa5 	vfma.f32	s15, s11, s11
 802001e:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020022:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020026:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802002a:	d822      	bhi.n	8020072 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 802002c:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020030:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020034:	f000 f88b 	bl	802014e <atan2f>
 8020038:	ee7b 0aef 	vsub.f32	s1, s23, s31
 802003c:	eeb0 8a40 	vmov.f32	s16, s0
 8020040:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020044:	e7af      	b.n	801ffa6 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8020046:	ee78 7aaa 	vadd.f32	s15, s17, s21
 802004a:	eeb0 7a49 	vmov.f32	s14, s18
 802004e:	eeb0 6a4a 	vmov.f32	s12, s20
 8020052:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8020056:	ee79 7a8b 	vadd.f32	s15, s19, s22
 802005a:	eea7 6ae6 	vfms.f32	s12, s15, s13
 802005e:	ee66 7a06 	vmul.f32	s15, s12, s12
 8020062:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020066:	eef4 7ac5 	vcmpe.f32	s15, s10
 802006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802006e:	f67f af7c 	bls.w	801ff6a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8020072:	3501      	adds	r5, #1
 8020074:	eef0 0a69 	vmov.f32	s1, s19
 8020078:	eeb0 0a68 	vmov.f32	s0, s17
 802007c:	4620      	mov	r0, r4
 802007e:	4629      	mov	r1, r5
 8020080:	eef0 3a4a 	vmov.f32	s7, s20
 8020084:	eeb0 3a49 	vmov.f32	s6, s18
 8020088:	eef0 2a6e 	vmov.f32	s5, s29
 802008c:	eeb0 2a4e 	vmov.f32	s4, s28
 8020090:	eef0 1a6d 	vmov.f32	s3, s27
 8020094:	eeb0 1a4d 	vmov.f32	s2, s26
 8020098:	f7ff fe84 	bl	801fda4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 802009c:	eeb0 ca6c 	vmov.f32	s24, s25
 80200a0:	eddd ba01 	vldr	s23, [sp, #4]
 80200a4:	eef0 9a4a 	vmov.f32	s19, s20
 80200a8:	ed9d fa02 	vldr	s30, [sp, #8]
 80200ac:	eef0 8a49 	vmov.f32	s17, s18
 80200b0:	eddd fa03 	vldr	s31, [sp, #12]
 80200b4:	e68c      	b.n	801fdd0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 80200b6:	bf00      	nop
 80200b8:	2edbe6ff 	.word	0x2edbe6ff
 80200bc:	40490fdb 	.word	0x40490fdb
 80200c0:	3dcccccd 	.word	0x3dcccccd
 80200c4:	40c90fdb 	.word	0x40c90fdb

080200c8 <_ZN8touchgfx6CanvasD1Ev>:
 80200c8:	4b04      	ldr	r3, [pc, #16]	@ (80200dc <_ZN8touchgfx6CanvasD1Ev+0x14>)
 80200ca:	b510      	push	{r4, lr}
 80200cc:	4604      	mov	r4, r0
 80200ce:	f840 3b14 	str.w	r3, [r0], #20
 80200d2:	f7f0 fb53 	bl	801077c <_ZN8touchgfx7OutlineD1Ev>
 80200d6:	4620      	mov	r0, r4
 80200d8:	bd10      	pop	{r4, pc}
 80200da:	bf00      	nop
 80200dc:	080249e0 	.word	0x080249e0

080200e0 <_ZN8touchgfx6CanvasD0Ev>:
 80200e0:	b510      	push	{r4, lr}
 80200e2:	4604      	mov	r4, r0
 80200e4:	f7ff fff0 	bl	80200c8 <_ZN8touchgfx6CanvasD1Ev>
 80200e8:	2174      	movs	r1, #116	@ 0x74
 80200ea:	4620      	mov	r0, r4
 80200ec:	f000 f807 	bl	80200fe <_ZdlPvj>
 80200f0:	4620      	mov	r0, r4
 80200f2:	bd10      	pop	{r4, pc}

080200f4 <__aeabi_atexit>:
 80200f4:	460b      	mov	r3, r1
 80200f6:	4601      	mov	r1, r0
 80200f8:	4618      	mov	r0, r3
 80200fa:	f000 bc5b 	b.w	80209b4 <__cxa_atexit>

080200fe <_ZdlPvj>:
 80200fe:	f000 b812 	b.w	8020126 <_ZdlPv>

08020102 <__cxa_guard_acquire>:
 8020102:	6802      	ldr	r2, [r0, #0]
 8020104:	07d2      	lsls	r2, r2, #31
 8020106:	4603      	mov	r3, r0
 8020108:	d405      	bmi.n	8020116 <__cxa_guard_acquire+0x14>
 802010a:	7842      	ldrb	r2, [r0, #1]
 802010c:	b102      	cbz	r2, 8020110 <__cxa_guard_acquire+0xe>
 802010e:	deff      	udf	#255	@ 0xff
 8020110:	2001      	movs	r0, #1
 8020112:	7058      	strb	r0, [r3, #1]
 8020114:	4770      	bx	lr
 8020116:	2000      	movs	r0, #0
 8020118:	4770      	bx	lr

0802011a <__cxa_guard_release>:
 802011a:	2301      	movs	r3, #1
 802011c:	6003      	str	r3, [r0, #0]
 802011e:	4770      	bx	lr

08020120 <__cxa_pure_virtual>:
 8020120:	b508      	push	{r3, lr}
 8020122:	f000 f80f 	bl	8020144 <_ZSt9terminatev>

08020126 <_ZdlPv>:
 8020126:	f000 bb8f 	b.w	8020848 <free>

0802012a <_ZN10__cxxabiv111__terminateEPFvvE>:
 802012a:	b508      	push	{r3, lr}
 802012c:	4780      	blx	r0
 802012e:	f000 fb58 	bl	80207e2 <abort>
	...

08020134 <_ZSt13get_terminatev>:
 8020134:	4b02      	ldr	r3, [pc, #8]	@ (8020140 <_ZSt13get_terminatev+0xc>)
 8020136:	6818      	ldr	r0, [r3, #0]
 8020138:	f3bf 8f5b 	dmb	ish
 802013c:	4770      	bx	lr
 802013e:	bf00      	nop
 8020140:	240000d8 	.word	0x240000d8

08020144 <_ZSt9terminatev>:
 8020144:	b508      	push	{r3, lr}
 8020146:	f7ff fff5 	bl	8020134 <_ZSt13get_terminatev>
 802014a:	f7ff ffee 	bl	802012a <_ZN10__cxxabiv111__terminateEPFvvE>

0802014e <atan2f>:
 802014e:	f000 b9cf 	b.w	80204f0 <__ieee754_atan2f>
	...

08020154 <sqrtf>:
 8020154:	b508      	push	{r3, lr}
 8020156:	ed2d 8b02 	vpush	{d8}
 802015a:	eeb0 8a40 	vmov.f32	s16, s0
 802015e:	f000 f9c4 	bl	80204ea <__ieee754_sqrtf>
 8020162:	eeb4 8a48 	vcmp.f32	s16, s16
 8020166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 802016a:	d60c      	bvs.n	8020186 <sqrtf+0x32>
 802016c:	eddf 8a07 	vldr	s17, [pc, #28]	@ 802018c <sqrtf+0x38>
 8020170:	eeb4 8ae8 	vcmpe.f32	s16, s17
 8020174:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020178:	d505      	bpl.n	8020186 <sqrtf+0x32>
 802017a:	f000 fea9 	bl	8020ed0 <__errno>
 802017e:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 8020182:	2321      	movs	r3, #33	@ 0x21
 8020184:	6003      	str	r3, [r0, #0]
 8020186:	ecbd 8b02 	vpop	{d8}
 802018a:	bd08      	pop	{r3, pc}
 802018c:	00000000 	.word	0x00000000

08020190 <sinf_poly>:
 8020190:	07cb      	lsls	r3, r1, #31
 8020192:	d412      	bmi.n	80201ba <sinf_poly+0x2a>
 8020194:	ee21 5b00 	vmul.f64	d5, d1, d0
 8020198:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802019c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80201a0:	eea6 7b01 	vfma.f64	d7, d6, d1
 80201a4:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80201a8:	ee21 1b05 	vmul.f64	d1, d1, d5
 80201ac:	eea6 0b05 	vfma.f64	d0, d6, d5
 80201b0:	eea7 0b01 	vfma.f64	d0, d7, d1
 80201b4:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80201b8:	4770      	bx	lr
 80201ba:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80201be:	ee21 5b01 	vmul.f64	d5, d1, d1
 80201c2:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80201c6:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80201ca:	eea1 7b06 	vfma.f64	d7, d1, d6
 80201ce:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80201d2:	eea1 0b06 	vfma.f64	d0, d1, d6
 80201d6:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 80201da:	ee21 1b05 	vmul.f64	d1, d1, d5
 80201de:	eea5 0b06 	vfma.f64	d0, d5, d6
 80201e2:	e7e5      	b.n	80201b0 <sinf_poly+0x20>
 80201e4:	0000      	movs	r0, r0
	...

080201e8 <sinf>:
 80201e8:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80201ea:	ee10 4a10 	vmov	r4, s0
 80201ee:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80201f2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80201f6:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 80201fa:	eef0 7a40 	vmov.f32	s15, s0
 80201fe:	ea4f 5214 	mov.w	r2, r4, lsr #20
 8020202:	d218      	bcs.n	8020236 <sinf+0x4e>
 8020204:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020208:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802020c:	d20a      	bcs.n	8020224 <sinf+0x3c>
 802020e:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 8020212:	d103      	bne.n	802021c <sinf+0x34>
 8020214:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8020218:	ed8d 1a01 	vstr	s2, [sp, #4]
 802021c:	eeb0 0a67 	vmov.f32	s0, s15
 8020220:	b003      	add	sp, #12
 8020222:	bd30      	pop	{r4, r5, pc}
 8020224:	483a      	ldr	r0, [pc, #232]	@ (8020310 <sinf+0x128>)
 8020226:	eeb0 0b46 	vmov.f64	d0, d6
 802022a:	2100      	movs	r1, #0
 802022c:	b003      	add	sp, #12
 802022e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020232:	f7ff bfad 	b.w	8020190 <sinf_poly>
 8020236:	f240 422e 	movw	r2, #1070	@ 0x42e
 802023a:	4293      	cmp	r3, r2
 802023c:	d824      	bhi.n	8020288 <sinf+0xa0>
 802023e:	4b34      	ldr	r3, [pc, #208]	@ (8020310 <sinf+0x128>)
 8020240:	ed93 7b08 	vldr	d7, [r3, #32]
 8020244:	ee26 7b07 	vmul.f64	d7, d6, d7
 8020248:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 802024c:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8020250:	ee17 1a90 	vmov	r1, s15
 8020254:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8020258:	1609      	asrs	r1, r1, #24
 802025a:	ee07 1a90 	vmov	s15, r1
 802025e:	f001 0203 	and.w	r2, r1, #3
 8020262:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8020266:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 802026a:	ed92 0b00 	vldr	d0, [r2]
 802026e:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8020272:	f011 0f02 	tst.w	r1, #2
 8020276:	eea5 6b47 	vfms.f64	d6, d5, d7
 802027a:	bf08      	it	eq
 802027c:	4618      	moveq	r0, r3
 802027e:	ee26 1b06 	vmul.f64	d1, d6, d6
 8020282:	ee20 0b06 	vmul.f64	d0, d0, d6
 8020286:	e7d1      	b.n	802022c <sinf+0x44>
 8020288:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802028c:	d237      	bcs.n	80202fe <sinf+0x116>
 802028e:	4921      	ldr	r1, [pc, #132]	@ (8020314 <sinf+0x12c>)
 8020290:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8020294:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8020298:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802029c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80202a0:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80202a4:	6a10      	ldr	r0, [r2, #32]
 80202a6:	6912      	ldr	r2, [r2, #16]
 80202a8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80202ac:	40ab      	lsls	r3, r5
 80202ae:	fba0 5003 	umull	r5, r0, r0, r3
 80202b2:	4359      	muls	r1, r3
 80202b4:	fbe3 0102 	umlal	r0, r1, r3, r2
 80202b8:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80202bc:	0f9d      	lsrs	r5, r3, #30
 80202be:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80202c2:	1ac9      	subs	r1, r1, r3
 80202c4:	f7e0 f9f2 	bl	80006ac <__aeabi_l2d>
 80202c8:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80202cc:	4b10      	ldr	r3, [pc, #64]	@ (8020310 <sinf+0x128>)
 80202ce:	f004 0203 	and.w	r2, r4, #3
 80202d2:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80202d6:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8020308 <sinf+0x120>
 80202da:	ed92 0b00 	vldr	d0, [r2]
 80202de:	ec41 0b17 	vmov	d7, r0, r1
 80202e2:	f014 0f02 	tst.w	r4, #2
 80202e6:	ee27 7b06 	vmul.f64	d7, d7, d6
 80202ea:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80202ee:	4629      	mov	r1, r5
 80202f0:	bf08      	it	eq
 80202f2:	4618      	moveq	r0, r3
 80202f4:	ee27 1b07 	vmul.f64	d1, d7, d7
 80202f8:	ee20 0b07 	vmul.f64	d0, d0, d7
 80202fc:	e796      	b.n	802022c <sinf+0x44>
 80202fe:	b003      	add	sp, #12
 8020300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8020304:	f000 b8e2 	b.w	80204cc <__math_invalidf>
 8020308:	54442d18 	.word	0x54442d18
 802030c:	3c1921fb 	.word	0x3c1921fb
 8020310:	08024a50 	.word	0x08024a50
 8020314:	080249ec 	.word	0x080249ec

08020318 <sinf_poly>:
 8020318:	07cb      	lsls	r3, r1, #31
 802031a:	d412      	bmi.n	8020342 <sinf_poly+0x2a>
 802031c:	ee21 5b00 	vmul.f64	d5, d1, d0
 8020320:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 8020324:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8020328:	eea6 7b01 	vfma.f64	d7, d6, d1
 802032c:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8020330:	ee21 1b05 	vmul.f64	d1, d1, d5
 8020334:	eea6 0b05 	vfma.f64	d0, d6, d5
 8020338:	eea7 0b01 	vfma.f64	d0, d7, d1
 802033c:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8020340:	4770      	bx	lr
 8020342:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 8020346:	ee21 5b01 	vmul.f64	d5, d1, d1
 802034a:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 802034e:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 8020352:	eea1 7b06 	vfma.f64	d7, d1, d6
 8020356:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 802035a:	eea1 0b06 	vfma.f64	d0, d1, d6
 802035e:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8020362:	ee21 1b05 	vmul.f64	d1, d1, d5
 8020366:	eea5 0b06 	vfma.f64	d0, d5, d6
 802036a:	e7e5      	b.n	8020338 <sinf_poly+0x20>
 802036c:	0000      	movs	r0, r0
	...

08020370 <cosf>:
 8020370:	b538      	push	{r3, r4, r5, lr}
 8020372:	ee10 4a10 	vmov	r4, s0
 8020376:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802037a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802037e:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 8020382:	d21f      	bcs.n	80203c4 <cosf+0x54>
 8020384:	ee27 7b07 	vmul.f64	d7, d7, d7
 8020388:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 802038c:	f0c0 8082 	bcc.w	8020494 <cosf+0x124>
 8020390:	ee27 4b07 	vmul.f64	d4, d7, d7
 8020394:	4b44      	ldr	r3, [pc, #272]	@ (80204a8 <cosf+0x138>)
 8020396:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 802039a:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 802039e:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80203a2:	eea7 6b05 	vfma.f64	d6, d7, d5
 80203a6:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80203aa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80203ae:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80203b2:	ee27 7b04 	vmul.f64	d7, d7, d4
 80203b6:	eea4 0b05 	vfma.f64	d0, d4, d5
 80203ba:	eea6 0b07 	vfma.f64	d0, d6, d7
 80203be:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80203c2:	bd38      	pop	{r3, r4, r5, pc}
 80203c4:	f240 422e 	movw	r2, #1070	@ 0x42e
 80203c8:	4293      	cmp	r3, r2
 80203ca:	d829      	bhi.n	8020420 <cosf+0xb0>
 80203cc:	4b36      	ldr	r3, [pc, #216]	@ (80204a8 <cosf+0x138>)
 80203ce:	ed93 6b08 	vldr	d6, [r3, #32]
 80203d2:	ee27 6b06 	vmul.f64	d6, d7, d6
 80203d6:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 80203da:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80203de:	ee16 1a90 	vmov	r1, s13
 80203e2:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 80203e6:	1609      	asrs	r1, r1, #24
 80203e8:	ee06 1a90 	vmov	s13, r1
 80203ec:	f001 0203 	and.w	r2, r1, #3
 80203f0:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80203f4:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 80203f8:	ed92 0b00 	vldr	d0, [r2]
 80203fc:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8020400:	f011 0f02 	tst.w	r1, #2
 8020404:	f081 0101 	eor.w	r1, r1, #1
 8020408:	eea5 7b46 	vfms.f64	d7, d5, d6
 802040c:	bf08      	it	eq
 802040e:	4618      	moveq	r0, r3
 8020410:	ee27 1b07 	vmul.f64	d1, d7, d7
 8020414:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020418:	ee20 0b07 	vmul.f64	d0, d0, d7
 802041c:	f7ff bf7c 	b.w	8020318 <sinf_poly>
 8020420:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 8020424:	d232      	bcs.n	802048c <cosf+0x11c>
 8020426:	4921      	ldr	r1, [pc, #132]	@ (80204ac <cosf+0x13c>)
 8020428:	f3c4 6083 	ubfx	r0, r4, #26, #4
 802042c:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8020430:	f3c4 0316 	ubfx	r3, r4, #0, #23
 8020434:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8020438:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 802043c:	6a10      	ldr	r0, [r2, #32]
 802043e:	6912      	ldr	r2, [r2, #16]
 8020440:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 8020444:	40ab      	lsls	r3, r5
 8020446:	fba0 5003 	umull	r5, r0, r0, r3
 802044a:	4359      	muls	r1, r3
 802044c:	fbe3 0102 	umlal	r0, r1, r3, r2
 8020450:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 8020454:	0f9d      	lsrs	r5, r3, #30
 8020456:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 802045a:	1ac9      	subs	r1, r1, r3
 802045c:	f7e0 f926 	bl	80006ac <__aeabi_l2d>
 8020460:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 8020464:	4b10      	ldr	r3, [pc, #64]	@ (80204a8 <cosf+0x138>)
 8020466:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80204a0 <cosf+0x130>
 802046a:	ec41 0b17 	vmov	d7, r0, r1
 802046e:	f004 0203 	and.w	r2, r4, #3
 8020472:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 8020476:	ed92 0b00 	vldr	d0, [r2]
 802047a:	ee27 7b06 	vmul.f64	d7, d7, d6
 802047e:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8020482:	f014 0f02 	tst.w	r4, #2
 8020486:	f085 0101 	eor.w	r1, r5, #1
 802048a:	e7bf      	b.n	802040c <cosf+0x9c>
 802048c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020490:	f000 b81c 	b.w	80204cc <__math_invalidf>
 8020494:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8020498:	e793      	b.n	80203c2 <cosf+0x52>
 802049a:	bf00      	nop
 802049c:	f3af 8000 	nop.w
 80204a0:	54442d18 	.word	0x54442d18
 80204a4:	3c1921fb 	.word	0x3c1921fb
 80204a8:	08024a50 	.word	0x08024a50
 80204ac:	080249ec 	.word	0x080249ec

080204b0 <with_errnof>:
 80204b0:	b510      	push	{r4, lr}
 80204b2:	ed2d 8b02 	vpush	{d8}
 80204b6:	eeb0 8a40 	vmov.f32	s16, s0
 80204ba:	4604      	mov	r4, r0
 80204bc:	f000 fd08 	bl	8020ed0 <__errno>
 80204c0:	eeb0 0a48 	vmov.f32	s0, s16
 80204c4:	ecbd 8b02 	vpop	{d8}
 80204c8:	6004      	str	r4, [r0, #0]
 80204ca:	bd10      	pop	{r4, pc}

080204cc <__math_invalidf>:
 80204cc:	eef0 7a40 	vmov.f32	s15, s0
 80204d0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80204d4:	eef4 7a67 	vcmp.f32	s15, s15
 80204d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80204dc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80204e0:	d602      	bvs.n	80204e8 <__math_invalidf+0x1c>
 80204e2:	2021      	movs	r0, #33	@ 0x21
 80204e4:	f7ff bfe4 	b.w	80204b0 <with_errnof>
 80204e8:	4770      	bx	lr

080204ea <__ieee754_sqrtf>:
 80204ea:	eeb1 0ac0 	vsqrt.f32	s0, s0
 80204ee:	4770      	bx	lr

080204f0 <__ieee754_atan2f>:
 80204f0:	ee10 2a90 	vmov	r2, s1
 80204f4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 80204f8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 80204fc:	b510      	push	{r4, lr}
 80204fe:	eef0 7a40 	vmov.f32	s15, s0
 8020502:	d806      	bhi.n	8020512 <__ieee754_atan2f+0x22>
 8020504:	ee10 0a10 	vmov	r0, s0
 8020508:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 802050c:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020510:	d904      	bls.n	802051c <__ieee754_atan2f+0x2c>
 8020512:	ee77 7aa0 	vadd.f32	s15, s15, s1
 8020516:	eeb0 0a67 	vmov.f32	s0, s15
 802051a:	bd10      	pop	{r4, pc}
 802051c:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8020520:	d103      	bne.n	802052a <__ieee754_atan2f+0x3a>
 8020522:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020526:	f000 b881 	b.w	802062c <atanf>
 802052a:	1794      	asrs	r4, r2, #30
 802052c:	f004 0402 	and.w	r4, r4, #2
 8020530:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 8020534:	b93b      	cbnz	r3, 8020546 <__ieee754_atan2f+0x56>
 8020536:	2c02      	cmp	r4, #2
 8020538:	d05c      	beq.n	80205f4 <__ieee754_atan2f+0x104>
 802053a:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8020608 <__ieee754_atan2f+0x118>
 802053e:	2c03      	cmp	r4, #3
 8020540:	fe47 7a00 	vseleq.f32	s15, s14, s0
 8020544:	e7e7      	b.n	8020516 <__ieee754_atan2f+0x26>
 8020546:	b939      	cbnz	r1, 8020558 <__ieee754_atan2f+0x68>
 8020548:	eddf 7a30 	vldr	s15, [pc, #192]	@ 802060c <__ieee754_atan2f+0x11c>
 802054c:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8020610 <__ieee754_atan2f+0x120>
 8020550:	2800      	cmp	r0, #0
 8020552:	fe67 7a87 	vselge.f32	s15, s15, s14
 8020556:	e7de      	b.n	8020516 <__ieee754_atan2f+0x26>
 8020558:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 802055c:	d110      	bne.n	8020580 <__ieee754_atan2f+0x90>
 802055e:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020562:	f104 34ff 	add.w	r4, r4, #4294967295
 8020566:	d107      	bne.n	8020578 <__ieee754_atan2f+0x88>
 8020568:	2c02      	cmp	r4, #2
 802056a:	d846      	bhi.n	80205fa <__ieee754_atan2f+0x10a>
 802056c:	4b29      	ldr	r3, [pc, #164]	@ (8020614 <__ieee754_atan2f+0x124>)
 802056e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8020572:	edd3 7a00 	vldr	s15, [r3]
 8020576:	e7ce      	b.n	8020516 <__ieee754_atan2f+0x26>
 8020578:	2c02      	cmp	r4, #2
 802057a:	d841      	bhi.n	8020600 <__ieee754_atan2f+0x110>
 802057c:	4b26      	ldr	r3, [pc, #152]	@ (8020618 <__ieee754_atan2f+0x128>)
 802057e:	e7f6      	b.n	802056e <__ieee754_atan2f+0x7e>
 8020580:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8020584:	d0e0      	beq.n	8020548 <__ieee754_atan2f+0x58>
 8020586:	1a5b      	subs	r3, r3, r1
 8020588:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 802058c:	ea4f 51e3 	mov.w	r1, r3, asr #23
 8020590:	da1a      	bge.n	80205c8 <__ieee754_atan2f+0xd8>
 8020592:	2a00      	cmp	r2, #0
 8020594:	da01      	bge.n	802059a <__ieee754_atan2f+0xaa>
 8020596:	313c      	adds	r1, #60	@ 0x3c
 8020598:	db19      	blt.n	80205ce <__ieee754_atan2f+0xde>
 802059a:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 802059e:	f000 f919 	bl	80207d4 <fabsf>
 80205a2:	f000 f843 	bl	802062c <atanf>
 80205a6:	eef0 7a40 	vmov.f32	s15, s0
 80205aa:	2c01      	cmp	r4, #1
 80205ac:	d012      	beq.n	80205d4 <__ieee754_atan2f+0xe4>
 80205ae:	2c02      	cmp	r4, #2
 80205b0:	d017      	beq.n	80205e2 <__ieee754_atan2f+0xf2>
 80205b2:	2c00      	cmp	r4, #0
 80205b4:	d0af      	beq.n	8020516 <__ieee754_atan2f+0x26>
 80205b6:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 802061c <__ieee754_atan2f+0x12c>
 80205ba:	ee77 7a87 	vadd.f32	s15, s15, s14
 80205be:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8020620 <__ieee754_atan2f+0x130>
 80205c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80205c6:	e7a6      	b.n	8020516 <__ieee754_atan2f+0x26>
 80205c8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 802060c <__ieee754_atan2f+0x11c>
 80205cc:	e7ed      	b.n	80205aa <__ieee754_atan2f+0xba>
 80205ce:	eddf 7a15 	vldr	s15, [pc, #84]	@ 8020624 <__ieee754_atan2f+0x134>
 80205d2:	e7ea      	b.n	80205aa <__ieee754_atan2f+0xba>
 80205d4:	ee17 3a90 	vmov	r3, s15
 80205d8:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 80205dc:	ee07 3a90 	vmov	s15, r3
 80205e0:	e799      	b.n	8020516 <__ieee754_atan2f+0x26>
 80205e2:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 802061c <__ieee754_atan2f+0x12c>
 80205e6:	ee77 7a87 	vadd.f32	s15, s15, s14
 80205ea:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8020620 <__ieee754_atan2f+0x130>
 80205ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80205f2:	e790      	b.n	8020516 <__ieee754_atan2f+0x26>
 80205f4:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8020620 <__ieee754_atan2f+0x130>
 80205f8:	e78d      	b.n	8020516 <__ieee754_atan2f+0x26>
 80205fa:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8020628 <__ieee754_atan2f+0x138>
 80205fe:	e78a      	b.n	8020516 <__ieee754_atan2f+0x26>
 8020600:	eddf 7a08 	vldr	s15, [pc, #32]	@ 8020624 <__ieee754_atan2f+0x134>
 8020604:	e787      	b.n	8020516 <__ieee754_atan2f+0x26>
 8020606:	bf00      	nop
 8020608:	c0490fdb 	.word	0xc0490fdb
 802060c:	3fc90fdb 	.word	0x3fc90fdb
 8020610:	bfc90fdb 	.word	0xbfc90fdb
 8020614:	08024b3c 	.word	0x08024b3c
 8020618:	08024b30 	.word	0x08024b30
 802061c:	33bbbd2e 	.word	0x33bbbd2e
 8020620:	40490fdb 	.word	0x40490fdb
 8020624:	00000000 	.word	0x00000000
 8020628:	3f490fdb 	.word	0x3f490fdb

0802062c <atanf>:
 802062c:	b538      	push	{r3, r4, r5, lr}
 802062e:	ee10 5a10 	vmov	r5, s0
 8020632:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 8020636:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 802063a:	eef0 7a40 	vmov.f32	s15, s0
 802063e:	d30f      	bcc.n	8020660 <atanf+0x34>
 8020640:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 8020644:	d904      	bls.n	8020650 <atanf+0x24>
 8020646:	ee70 7a00 	vadd.f32	s15, s0, s0
 802064a:	eeb0 0a67 	vmov.f32	s0, s15
 802064e:	bd38      	pop	{r3, r4, r5, pc}
 8020650:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 8020788 <atanf+0x15c>
 8020654:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 802078c <atanf+0x160>
 8020658:	2d00      	cmp	r5, #0
 802065a:	fe77 7a27 	vselgt.f32	s15, s14, s15
 802065e:	e7f4      	b.n	802064a <atanf+0x1e>
 8020660:	4b4b      	ldr	r3, [pc, #300]	@ (8020790 <atanf+0x164>)
 8020662:	429c      	cmp	r4, r3
 8020664:	d810      	bhi.n	8020688 <atanf+0x5c>
 8020666:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 802066a:	d20a      	bcs.n	8020682 <atanf+0x56>
 802066c:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8020794 <atanf+0x168>
 8020670:	ee30 7a07 	vadd.f32	s14, s0, s14
 8020674:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8020678:	eeb4 7ae6 	vcmpe.f32	s14, s13
 802067c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020680:	dce3      	bgt.n	802064a <atanf+0x1e>
 8020682:	f04f 33ff 	mov.w	r3, #4294967295
 8020686:	e013      	b.n	80206b0 <atanf+0x84>
 8020688:	f000 f8a4 	bl	80207d4 <fabsf>
 802068c:	4b42      	ldr	r3, [pc, #264]	@ (8020798 <atanf+0x16c>)
 802068e:	429c      	cmp	r4, r3
 8020690:	d84f      	bhi.n	8020732 <atanf+0x106>
 8020692:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 8020696:	429c      	cmp	r4, r3
 8020698:	d841      	bhi.n	802071e <atanf+0xf2>
 802069a:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 802069e:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80206a2:	eea0 7a27 	vfma.f32	s14, s0, s15
 80206a6:	2300      	movs	r3, #0
 80206a8:	ee30 0a27 	vadd.f32	s0, s0, s15
 80206ac:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80206b0:	1c5a      	adds	r2, r3, #1
 80206b2:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80206b6:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 802079c <atanf+0x170>
 80206ba:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80207a0 <atanf+0x174>
 80206be:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80207a4 <atanf+0x178>
 80206c2:	ee66 6a06 	vmul.f32	s13, s12, s12
 80206c6:	eee6 5a87 	vfma.f32	s11, s13, s14
 80206ca:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80207a8 <atanf+0x17c>
 80206ce:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80206d2:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80207ac <atanf+0x180>
 80206d6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80206da:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80207b0 <atanf+0x184>
 80206de:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80206e2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80207b4 <atanf+0x188>
 80206e6:	eee7 5a26 	vfma.f32	s11, s14, s13
 80206ea:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80207b8 <atanf+0x18c>
 80206ee:	eea6 5a87 	vfma.f32	s10, s13, s14
 80206f2:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80207bc <atanf+0x190>
 80206f6:	eea5 7a26 	vfma.f32	s14, s10, s13
 80206fa:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80207c0 <atanf+0x194>
 80206fe:	eea7 5a26 	vfma.f32	s10, s14, s13
 8020702:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80207c4 <atanf+0x198>
 8020706:	eea5 7a26 	vfma.f32	s14, s10, s13
 802070a:	ee27 7a26 	vmul.f32	s14, s14, s13
 802070e:	eea5 7a86 	vfma.f32	s14, s11, s12
 8020712:	ee27 7a87 	vmul.f32	s14, s15, s14
 8020716:	d121      	bne.n	802075c <atanf+0x130>
 8020718:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802071c:	e795      	b.n	802064a <atanf+0x1e>
 802071e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8020722:	ee30 7a67 	vsub.f32	s14, s0, s15
 8020726:	ee30 0a27 	vadd.f32	s0, s0, s15
 802072a:	2301      	movs	r3, #1
 802072c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020730:	e7be      	b.n	80206b0 <atanf+0x84>
 8020732:	4b25      	ldr	r3, [pc, #148]	@ (80207c8 <atanf+0x19c>)
 8020734:	429c      	cmp	r4, r3
 8020736:	d80b      	bhi.n	8020750 <atanf+0x124>
 8020738:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 802073c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8020740:	eea0 7a27 	vfma.f32	s14, s0, s15
 8020744:	2302      	movs	r3, #2
 8020746:	ee70 6a67 	vsub.f32	s13, s0, s15
 802074a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802074e:	e7af      	b.n	80206b0 <atanf+0x84>
 8020750:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8020754:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8020758:	2303      	movs	r3, #3
 802075a:	e7a9      	b.n	80206b0 <atanf+0x84>
 802075c:	4a1b      	ldr	r2, [pc, #108]	@ (80207cc <atanf+0x1a0>)
 802075e:	491c      	ldr	r1, [pc, #112]	@ (80207d0 <atanf+0x1a4>)
 8020760:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 8020764:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8020768:	edd3 6a00 	vldr	s13, [r3]
 802076c:	ee37 7a66 	vsub.f32	s14, s14, s13
 8020770:	2d00      	cmp	r5, #0
 8020772:	ee37 7a67 	vsub.f32	s14, s14, s15
 8020776:	edd2 7a00 	vldr	s15, [r2]
 802077a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 802077e:	bfb8      	it	lt
 8020780:	eef1 7a67 	vneglt.f32	s15, s15
 8020784:	e761      	b.n	802064a <atanf+0x1e>
 8020786:	bf00      	nop
 8020788:	bfc90fdb 	.word	0xbfc90fdb
 802078c:	3fc90fdb 	.word	0x3fc90fdb
 8020790:	3edfffff 	.word	0x3edfffff
 8020794:	7149f2ca 	.word	0x7149f2ca
 8020798:	3f97ffff 	.word	0x3f97ffff
 802079c:	3c8569d7 	.word	0x3c8569d7
 80207a0:	3d4bda59 	.word	0x3d4bda59
 80207a4:	bd6ef16b 	.word	0xbd6ef16b
 80207a8:	3d886b35 	.word	0x3d886b35
 80207ac:	3dba2e6e 	.word	0x3dba2e6e
 80207b0:	3e124925 	.word	0x3e124925
 80207b4:	3eaaaaab 	.word	0x3eaaaaab
 80207b8:	bd15a221 	.word	0xbd15a221
 80207bc:	bd9d8795 	.word	0xbd9d8795
 80207c0:	bde38e38 	.word	0xbde38e38
 80207c4:	be4ccccd 	.word	0xbe4ccccd
 80207c8:	401bffff 	.word	0x401bffff
 80207cc:	08024b58 	.word	0x08024b58
 80207d0:	08024b48 	.word	0x08024b48

080207d4 <fabsf>:
 80207d4:	ee10 3a10 	vmov	r3, s0
 80207d8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80207dc:	ee00 3a10 	vmov	s0, r3
 80207e0:	4770      	bx	lr

080207e2 <abort>:
 80207e2:	b508      	push	{r3, lr}
 80207e4:	2006      	movs	r0, #6
 80207e6:	f000 fb01 	bl	8020dec <raise>
 80207ea:	2001      	movs	r0, #1
 80207ec:	f7e1 f9e6 	bl	8001bbc <_exit>

080207f0 <__assert_func>:
 80207f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80207f2:	4614      	mov	r4, r2
 80207f4:	461a      	mov	r2, r3
 80207f6:	4b09      	ldr	r3, [pc, #36]	@ (802081c <__assert_func+0x2c>)
 80207f8:	681b      	ldr	r3, [r3, #0]
 80207fa:	4605      	mov	r5, r0
 80207fc:	68d8      	ldr	r0, [r3, #12]
 80207fe:	b954      	cbnz	r4, 8020816 <__assert_func+0x26>
 8020800:	4b07      	ldr	r3, [pc, #28]	@ (8020820 <__assert_func+0x30>)
 8020802:	461c      	mov	r4, r3
 8020804:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8020808:	9100      	str	r1, [sp, #0]
 802080a:	462b      	mov	r3, r5
 802080c:	4905      	ldr	r1, [pc, #20]	@ (8020824 <__assert_func+0x34>)
 802080e:	f000 f983 	bl	8020b18 <fiprintf>
 8020812:	f7ff ffe6 	bl	80207e2 <abort>
 8020816:	4b04      	ldr	r3, [pc, #16]	@ (8020828 <__assert_func+0x38>)
 8020818:	e7f4      	b.n	8020804 <__assert_func+0x14>
 802081a:	bf00      	nop
 802081c:	240000e8 	.word	0x240000e8
 8020820:	08021c5a 	.word	0x08021c5a
 8020824:	08024b75 	.word	0x08024b75
 8020828:	08024b68 	.word	0x08024b68

0802082c <atexit>:
 802082c:	2300      	movs	r3, #0
 802082e:	4601      	mov	r1, r0
 8020830:	461a      	mov	r2, r3
 8020832:	4618      	mov	r0, r3
 8020834:	f000 bb88 	b.w	8020f48 <__register_exitproc>

08020838 <malloc>:
 8020838:	4b02      	ldr	r3, [pc, #8]	@ (8020844 <malloc+0xc>)
 802083a:	4601      	mov	r1, r0
 802083c:	6818      	ldr	r0, [r3, #0]
 802083e:	f000 b82d 	b.w	802089c <_malloc_r>
 8020842:	bf00      	nop
 8020844:	240000e8 	.word	0x240000e8

08020848 <free>:
 8020848:	4b02      	ldr	r3, [pc, #8]	@ (8020854 <free+0xc>)
 802084a:	4601      	mov	r1, r0
 802084c:	6818      	ldr	r0, [r3, #0]
 802084e:	f000 bbd7 	b.w	8021000 <_free_r>
 8020852:	bf00      	nop
 8020854:	240000e8 	.word	0x240000e8

08020858 <sbrk_aligned>:
 8020858:	b570      	push	{r4, r5, r6, lr}
 802085a:	4e0f      	ldr	r6, [pc, #60]	@ (8020898 <sbrk_aligned+0x40>)
 802085c:	460c      	mov	r4, r1
 802085e:	6831      	ldr	r1, [r6, #0]
 8020860:	4605      	mov	r5, r0
 8020862:	b911      	cbnz	r1, 802086a <sbrk_aligned+0x12>
 8020864:	f000 fb12 	bl	8020e8c <_sbrk_r>
 8020868:	6030      	str	r0, [r6, #0]
 802086a:	4621      	mov	r1, r4
 802086c:	4628      	mov	r0, r5
 802086e:	f000 fb0d 	bl	8020e8c <_sbrk_r>
 8020872:	1c43      	adds	r3, r0, #1
 8020874:	d103      	bne.n	802087e <sbrk_aligned+0x26>
 8020876:	f04f 34ff 	mov.w	r4, #4294967295
 802087a:	4620      	mov	r0, r4
 802087c:	bd70      	pop	{r4, r5, r6, pc}
 802087e:	1cc4      	adds	r4, r0, #3
 8020880:	f024 0403 	bic.w	r4, r4, #3
 8020884:	42a0      	cmp	r0, r4
 8020886:	d0f8      	beq.n	802087a <sbrk_aligned+0x22>
 8020888:	1a21      	subs	r1, r4, r0
 802088a:	4628      	mov	r0, r5
 802088c:	f000 fafe 	bl	8020e8c <_sbrk_r>
 8020890:	3001      	adds	r0, #1
 8020892:	d1f2      	bne.n	802087a <sbrk_aligned+0x22>
 8020894:	e7ef      	b.n	8020876 <sbrk_aligned+0x1e>
 8020896:	bf00      	nop
 8020898:	24025338 	.word	0x24025338

0802089c <_malloc_r>:
 802089c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80208a0:	1ccd      	adds	r5, r1, #3
 80208a2:	f025 0503 	bic.w	r5, r5, #3
 80208a6:	3508      	adds	r5, #8
 80208a8:	2d0c      	cmp	r5, #12
 80208aa:	bf38      	it	cc
 80208ac:	250c      	movcc	r5, #12
 80208ae:	2d00      	cmp	r5, #0
 80208b0:	4606      	mov	r6, r0
 80208b2:	db01      	blt.n	80208b8 <_malloc_r+0x1c>
 80208b4:	42a9      	cmp	r1, r5
 80208b6:	d904      	bls.n	80208c2 <_malloc_r+0x26>
 80208b8:	230c      	movs	r3, #12
 80208ba:	6033      	str	r3, [r6, #0]
 80208bc:	2000      	movs	r0, #0
 80208be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80208c2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8020998 <_malloc_r+0xfc>
 80208c6:	f000 f869 	bl	802099c <__malloc_lock>
 80208ca:	f8d8 3000 	ldr.w	r3, [r8]
 80208ce:	461c      	mov	r4, r3
 80208d0:	bb44      	cbnz	r4, 8020924 <_malloc_r+0x88>
 80208d2:	4629      	mov	r1, r5
 80208d4:	4630      	mov	r0, r6
 80208d6:	f7ff ffbf 	bl	8020858 <sbrk_aligned>
 80208da:	1c43      	adds	r3, r0, #1
 80208dc:	4604      	mov	r4, r0
 80208de:	d158      	bne.n	8020992 <_malloc_r+0xf6>
 80208e0:	f8d8 4000 	ldr.w	r4, [r8]
 80208e4:	4627      	mov	r7, r4
 80208e6:	2f00      	cmp	r7, #0
 80208e8:	d143      	bne.n	8020972 <_malloc_r+0xd6>
 80208ea:	2c00      	cmp	r4, #0
 80208ec:	d04b      	beq.n	8020986 <_malloc_r+0xea>
 80208ee:	6823      	ldr	r3, [r4, #0]
 80208f0:	4639      	mov	r1, r7
 80208f2:	4630      	mov	r0, r6
 80208f4:	eb04 0903 	add.w	r9, r4, r3
 80208f8:	f000 fac8 	bl	8020e8c <_sbrk_r>
 80208fc:	4581      	cmp	r9, r0
 80208fe:	d142      	bne.n	8020986 <_malloc_r+0xea>
 8020900:	6821      	ldr	r1, [r4, #0]
 8020902:	1a6d      	subs	r5, r5, r1
 8020904:	4629      	mov	r1, r5
 8020906:	4630      	mov	r0, r6
 8020908:	f7ff ffa6 	bl	8020858 <sbrk_aligned>
 802090c:	3001      	adds	r0, #1
 802090e:	d03a      	beq.n	8020986 <_malloc_r+0xea>
 8020910:	6823      	ldr	r3, [r4, #0]
 8020912:	442b      	add	r3, r5
 8020914:	6023      	str	r3, [r4, #0]
 8020916:	f8d8 3000 	ldr.w	r3, [r8]
 802091a:	685a      	ldr	r2, [r3, #4]
 802091c:	bb62      	cbnz	r2, 8020978 <_malloc_r+0xdc>
 802091e:	f8c8 7000 	str.w	r7, [r8]
 8020922:	e00f      	b.n	8020944 <_malloc_r+0xa8>
 8020924:	6822      	ldr	r2, [r4, #0]
 8020926:	1b52      	subs	r2, r2, r5
 8020928:	d420      	bmi.n	802096c <_malloc_r+0xd0>
 802092a:	2a0b      	cmp	r2, #11
 802092c:	d917      	bls.n	802095e <_malloc_r+0xc2>
 802092e:	1961      	adds	r1, r4, r5
 8020930:	42a3      	cmp	r3, r4
 8020932:	6025      	str	r5, [r4, #0]
 8020934:	bf18      	it	ne
 8020936:	6059      	strne	r1, [r3, #4]
 8020938:	6863      	ldr	r3, [r4, #4]
 802093a:	bf08      	it	eq
 802093c:	f8c8 1000 	streq.w	r1, [r8]
 8020940:	5162      	str	r2, [r4, r5]
 8020942:	604b      	str	r3, [r1, #4]
 8020944:	4630      	mov	r0, r6
 8020946:	f000 f82f 	bl	80209a8 <__malloc_unlock>
 802094a:	f104 000b 	add.w	r0, r4, #11
 802094e:	1d23      	adds	r3, r4, #4
 8020950:	f020 0007 	bic.w	r0, r0, #7
 8020954:	1ac2      	subs	r2, r0, r3
 8020956:	bf1c      	itt	ne
 8020958:	1a1b      	subne	r3, r3, r0
 802095a:	50a3      	strne	r3, [r4, r2]
 802095c:	e7af      	b.n	80208be <_malloc_r+0x22>
 802095e:	6862      	ldr	r2, [r4, #4]
 8020960:	42a3      	cmp	r3, r4
 8020962:	bf0c      	ite	eq
 8020964:	f8c8 2000 	streq.w	r2, [r8]
 8020968:	605a      	strne	r2, [r3, #4]
 802096a:	e7eb      	b.n	8020944 <_malloc_r+0xa8>
 802096c:	4623      	mov	r3, r4
 802096e:	6864      	ldr	r4, [r4, #4]
 8020970:	e7ae      	b.n	80208d0 <_malloc_r+0x34>
 8020972:	463c      	mov	r4, r7
 8020974:	687f      	ldr	r7, [r7, #4]
 8020976:	e7b6      	b.n	80208e6 <_malloc_r+0x4a>
 8020978:	461a      	mov	r2, r3
 802097a:	685b      	ldr	r3, [r3, #4]
 802097c:	42a3      	cmp	r3, r4
 802097e:	d1fb      	bne.n	8020978 <_malloc_r+0xdc>
 8020980:	2300      	movs	r3, #0
 8020982:	6053      	str	r3, [r2, #4]
 8020984:	e7de      	b.n	8020944 <_malloc_r+0xa8>
 8020986:	230c      	movs	r3, #12
 8020988:	6033      	str	r3, [r6, #0]
 802098a:	4630      	mov	r0, r6
 802098c:	f000 f80c 	bl	80209a8 <__malloc_unlock>
 8020990:	e794      	b.n	80208bc <_malloc_r+0x20>
 8020992:	6005      	str	r5, [r0, #0]
 8020994:	e7d6      	b.n	8020944 <_malloc_r+0xa8>
 8020996:	bf00      	nop
 8020998:	2402533c 	.word	0x2402533c

0802099c <__malloc_lock>:
 802099c:	4801      	ldr	r0, [pc, #4]	@ (80209a4 <__malloc_lock+0x8>)
 802099e:	f000 bac2 	b.w	8020f26 <__retarget_lock_acquire_recursive>
 80209a2:	bf00      	nop
 80209a4:	24025480 	.word	0x24025480

080209a8 <__malloc_unlock>:
 80209a8:	4801      	ldr	r0, [pc, #4]	@ (80209b0 <__malloc_unlock+0x8>)
 80209aa:	f000 babd 	b.w	8020f28 <__retarget_lock_release_recursive>
 80209ae:	bf00      	nop
 80209b0:	24025480 	.word	0x24025480

080209b4 <__cxa_atexit>:
 80209b4:	b510      	push	{r4, lr}
 80209b6:	4604      	mov	r4, r0
 80209b8:	4804      	ldr	r0, [pc, #16]	@ (80209cc <__cxa_atexit+0x18>)
 80209ba:	4613      	mov	r3, r2
 80209bc:	b120      	cbz	r0, 80209c8 <__cxa_atexit+0x14>
 80209be:	460a      	mov	r2, r1
 80209c0:	2002      	movs	r0, #2
 80209c2:	4621      	mov	r1, r4
 80209c4:	f000 fac0 	bl	8020f48 <__register_exitproc>
 80209c8:	bd10      	pop	{r4, pc}
 80209ca:	bf00      	nop
 80209cc:	08020f49 	.word	0x08020f49

080209d0 <std>:
 80209d0:	2300      	movs	r3, #0
 80209d2:	b510      	push	{r4, lr}
 80209d4:	4604      	mov	r4, r0
 80209d6:	e9c0 3300 	strd	r3, r3, [r0]
 80209da:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80209de:	6083      	str	r3, [r0, #8]
 80209e0:	8181      	strh	r1, [r0, #12]
 80209e2:	6643      	str	r3, [r0, #100]	@ 0x64
 80209e4:	81c2      	strh	r2, [r0, #14]
 80209e6:	6183      	str	r3, [r0, #24]
 80209e8:	4619      	mov	r1, r3
 80209ea:	2208      	movs	r2, #8
 80209ec:	305c      	adds	r0, #92	@ 0x5c
 80209ee:	f000 f9bb 	bl	8020d68 <memset>
 80209f2:	4b0d      	ldr	r3, [pc, #52]	@ (8020a28 <std+0x58>)
 80209f4:	6263      	str	r3, [r4, #36]	@ 0x24
 80209f6:	4b0d      	ldr	r3, [pc, #52]	@ (8020a2c <std+0x5c>)
 80209f8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80209fa:	4b0d      	ldr	r3, [pc, #52]	@ (8020a30 <std+0x60>)
 80209fc:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80209fe:	4b0d      	ldr	r3, [pc, #52]	@ (8020a34 <std+0x64>)
 8020a00:	6323      	str	r3, [r4, #48]	@ 0x30
 8020a02:	4b0d      	ldr	r3, [pc, #52]	@ (8020a38 <std+0x68>)
 8020a04:	6224      	str	r4, [r4, #32]
 8020a06:	429c      	cmp	r4, r3
 8020a08:	d006      	beq.n	8020a18 <std+0x48>
 8020a0a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8020a0e:	4294      	cmp	r4, r2
 8020a10:	d002      	beq.n	8020a18 <std+0x48>
 8020a12:	33d0      	adds	r3, #208	@ 0xd0
 8020a14:	429c      	cmp	r4, r3
 8020a16:	d105      	bne.n	8020a24 <std+0x54>
 8020a18:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8020a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a20:	f000 ba80 	b.w	8020f24 <__retarget_lock_init_recursive>
 8020a24:	bd10      	pop	{r4, pc}
 8020a26:	bf00      	nop
 8020a28:	08020bb9 	.word	0x08020bb9
 8020a2c:	08020bdb 	.word	0x08020bdb
 8020a30:	08020c13 	.word	0x08020c13
 8020a34:	08020c37 	.word	0x08020c37
 8020a38:	24025340 	.word	0x24025340

08020a3c <stdio_exit_handler>:
 8020a3c:	4a02      	ldr	r2, [pc, #8]	@ (8020a48 <stdio_exit_handler+0xc>)
 8020a3e:	4903      	ldr	r1, [pc, #12]	@ (8020a4c <stdio_exit_handler+0x10>)
 8020a40:	4803      	ldr	r0, [pc, #12]	@ (8020a50 <stdio_exit_handler+0x14>)
 8020a42:	f000 b87b 	b.w	8020b3c <_fwalk_sglue>
 8020a46:	bf00      	nop
 8020a48:	240000dc 	.word	0x240000dc
 8020a4c:	080219ed 	.word	0x080219ed
 8020a50:	240000ec 	.word	0x240000ec

08020a54 <cleanup_stdio>:
 8020a54:	6841      	ldr	r1, [r0, #4]
 8020a56:	4b0c      	ldr	r3, [pc, #48]	@ (8020a88 <cleanup_stdio+0x34>)
 8020a58:	4299      	cmp	r1, r3
 8020a5a:	b510      	push	{r4, lr}
 8020a5c:	4604      	mov	r4, r0
 8020a5e:	d001      	beq.n	8020a64 <cleanup_stdio+0x10>
 8020a60:	f000 ffc4 	bl	80219ec <_fflush_r>
 8020a64:	68a1      	ldr	r1, [r4, #8]
 8020a66:	4b09      	ldr	r3, [pc, #36]	@ (8020a8c <cleanup_stdio+0x38>)
 8020a68:	4299      	cmp	r1, r3
 8020a6a:	d002      	beq.n	8020a72 <cleanup_stdio+0x1e>
 8020a6c:	4620      	mov	r0, r4
 8020a6e:	f000 ffbd 	bl	80219ec <_fflush_r>
 8020a72:	68e1      	ldr	r1, [r4, #12]
 8020a74:	4b06      	ldr	r3, [pc, #24]	@ (8020a90 <cleanup_stdio+0x3c>)
 8020a76:	4299      	cmp	r1, r3
 8020a78:	d004      	beq.n	8020a84 <cleanup_stdio+0x30>
 8020a7a:	4620      	mov	r0, r4
 8020a7c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020a80:	f000 bfb4 	b.w	80219ec <_fflush_r>
 8020a84:	bd10      	pop	{r4, pc}
 8020a86:	bf00      	nop
 8020a88:	24025340 	.word	0x24025340
 8020a8c:	240253a8 	.word	0x240253a8
 8020a90:	24025410 	.word	0x24025410

08020a94 <global_stdio_init.part.0>:
 8020a94:	b510      	push	{r4, lr}
 8020a96:	4b0b      	ldr	r3, [pc, #44]	@ (8020ac4 <global_stdio_init.part.0+0x30>)
 8020a98:	4c0b      	ldr	r4, [pc, #44]	@ (8020ac8 <global_stdio_init.part.0+0x34>)
 8020a9a:	4a0c      	ldr	r2, [pc, #48]	@ (8020acc <global_stdio_init.part.0+0x38>)
 8020a9c:	601a      	str	r2, [r3, #0]
 8020a9e:	4620      	mov	r0, r4
 8020aa0:	2200      	movs	r2, #0
 8020aa2:	2104      	movs	r1, #4
 8020aa4:	f7ff ff94 	bl	80209d0 <std>
 8020aa8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8020aac:	2201      	movs	r2, #1
 8020aae:	2109      	movs	r1, #9
 8020ab0:	f7ff ff8e 	bl	80209d0 <std>
 8020ab4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8020ab8:	2202      	movs	r2, #2
 8020aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020abe:	2112      	movs	r1, #18
 8020ac0:	f7ff bf86 	b.w	80209d0 <std>
 8020ac4:	24025478 	.word	0x24025478
 8020ac8:	24025340 	.word	0x24025340
 8020acc:	08020a3d 	.word	0x08020a3d

08020ad0 <__sfp_lock_acquire>:
 8020ad0:	4801      	ldr	r0, [pc, #4]	@ (8020ad8 <__sfp_lock_acquire+0x8>)
 8020ad2:	f000 ba28 	b.w	8020f26 <__retarget_lock_acquire_recursive>
 8020ad6:	bf00      	nop
 8020ad8:	24025482 	.word	0x24025482

08020adc <__sfp_lock_release>:
 8020adc:	4801      	ldr	r0, [pc, #4]	@ (8020ae4 <__sfp_lock_release+0x8>)
 8020ade:	f000 ba23 	b.w	8020f28 <__retarget_lock_release_recursive>
 8020ae2:	bf00      	nop
 8020ae4:	24025482 	.word	0x24025482

08020ae8 <__sinit>:
 8020ae8:	b510      	push	{r4, lr}
 8020aea:	4604      	mov	r4, r0
 8020aec:	f7ff fff0 	bl	8020ad0 <__sfp_lock_acquire>
 8020af0:	6a23      	ldr	r3, [r4, #32]
 8020af2:	b11b      	cbz	r3, 8020afc <__sinit+0x14>
 8020af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8020af8:	f7ff bff0 	b.w	8020adc <__sfp_lock_release>
 8020afc:	4b04      	ldr	r3, [pc, #16]	@ (8020b10 <__sinit+0x28>)
 8020afe:	6223      	str	r3, [r4, #32]
 8020b00:	4b04      	ldr	r3, [pc, #16]	@ (8020b14 <__sinit+0x2c>)
 8020b02:	681b      	ldr	r3, [r3, #0]
 8020b04:	2b00      	cmp	r3, #0
 8020b06:	d1f5      	bne.n	8020af4 <__sinit+0xc>
 8020b08:	f7ff ffc4 	bl	8020a94 <global_stdio_init.part.0>
 8020b0c:	e7f2      	b.n	8020af4 <__sinit+0xc>
 8020b0e:	bf00      	nop
 8020b10:	08020a55 	.word	0x08020a55
 8020b14:	24025478 	.word	0x24025478

08020b18 <fiprintf>:
 8020b18:	b40e      	push	{r1, r2, r3}
 8020b1a:	b503      	push	{r0, r1, lr}
 8020b1c:	4601      	mov	r1, r0
 8020b1e:	ab03      	add	r3, sp, #12
 8020b20:	4805      	ldr	r0, [pc, #20]	@ (8020b38 <fiprintf+0x20>)
 8020b22:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b26:	6800      	ldr	r0, [r0, #0]
 8020b28:	9301      	str	r3, [sp, #4]
 8020b2a:	f000 fc35 	bl	8021398 <_vfiprintf_r>
 8020b2e:	b002      	add	sp, #8
 8020b30:	f85d eb04 	ldr.w	lr, [sp], #4
 8020b34:	b003      	add	sp, #12
 8020b36:	4770      	bx	lr
 8020b38:	240000e8 	.word	0x240000e8

08020b3c <_fwalk_sglue>:
 8020b3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020b40:	4607      	mov	r7, r0
 8020b42:	4688      	mov	r8, r1
 8020b44:	4614      	mov	r4, r2
 8020b46:	2600      	movs	r6, #0
 8020b48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8020b4c:	f1b9 0901 	subs.w	r9, r9, #1
 8020b50:	d505      	bpl.n	8020b5e <_fwalk_sglue+0x22>
 8020b52:	6824      	ldr	r4, [r4, #0]
 8020b54:	2c00      	cmp	r4, #0
 8020b56:	d1f7      	bne.n	8020b48 <_fwalk_sglue+0xc>
 8020b58:	4630      	mov	r0, r6
 8020b5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020b5e:	89ab      	ldrh	r3, [r5, #12]
 8020b60:	2b01      	cmp	r3, #1
 8020b62:	d907      	bls.n	8020b74 <_fwalk_sglue+0x38>
 8020b64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8020b68:	3301      	adds	r3, #1
 8020b6a:	d003      	beq.n	8020b74 <_fwalk_sglue+0x38>
 8020b6c:	4629      	mov	r1, r5
 8020b6e:	4638      	mov	r0, r7
 8020b70:	47c0      	blx	r8
 8020b72:	4306      	orrs	r6, r0
 8020b74:	3568      	adds	r5, #104	@ 0x68
 8020b76:	e7e9      	b.n	8020b4c <_fwalk_sglue+0x10>

08020b78 <siprintf>:
 8020b78:	b40e      	push	{r1, r2, r3}
 8020b7a:	b500      	push	{lr}
 8020b7c:	b09c      	sub	sp, #112	@ 0x70
 8020b7e:	ab1d      	add	r3, sp, #116	@ 0x74
 8020b80:	9002      	str	r0, [sp, #8]
 8020b82:	9006      	str	r0, [sp, #24]
 8020b84:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8020b88:	4809      	ldr	r0, [pc, #36]	@ (8020bb0 <siprintf+0x38>)
 8020b8a:	9107      	str	r1, [sp, #28]
 8020b8c:	9104      	str	r1, [sp, #16]
 8020b8e:	4909      	ldr	r1, [pc, #36]	@ (8020bb4 <siprintf+0x3c>)
 8020b90:	f853 2b04 	ldr.w	r2, [r3], #4
 8020b94:	9105      	str	r1, [sp, #20]
 8020b96:	6800      	ldr	r0, [r0, #0]
 8020b98:	9301      	str	r3, [sp, #4]
 8020b9a:	a902      	add	r1, sp, #8
 8020b9c:	f000 fad6 	bl	802114c <_svfiprintf_r>
 8020ba0:	9b02      	ldr	r3, [sp, #8]
 8020ba2:	2200      	movs	r2, #0
 8020ba4:	701a      	strb	r2, [r3, #0]
 8020ba6:	b01c      	add	sp, #112	@ 0x70
 8020ba8:	f85d eb04 	ldr.w	lr, [sp], #4
 8020bac:	b003      	add	sp, #12
 8020bae:	4770      	bx	lr
 8020bb0:	240000e8 	.word	0x240000e8
 8020bb4:	ffff0208 	.word	0xffff0208

08020bb8 <__sread>:
 8020bb8:	b510      	push	{r4, lr}
 8020bba:	460c      	mov	r4, r1
 8020bbc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bc0:	f000 f93e 	bl	8020e40 <_read_r>
 8020bc4:	2800      	cmp	r0, #0
 8020bc6:	bfab      	itete	ge
 8020bc8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8020bca:	89a3      	ldrhlt	r3, [r4, #12]
 8020bcc:	181b      	addge	r3, r3, r0
 8020bce:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8020bd2:	bfac      	ite	ge
 8020bd4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8020bd6:	81a3      	strhlt	r3, [r4, #12]
 8020bd8:	bd10      	pop	{r4, pc}

08020bda <__swrite>:
 8020bda:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8020bde:	461f      	mov	r7, r3
 8020be0:	898b      	ldrh	r3, [r1, #12]
 8020be2:	05db      	lsls	r3, r3, #23
 8020be4:	4605      	mov	r5, r0
 8020be6:	460c      	mov	r4, r1
 8020be8:	4616      	mov	r6, r2
 8020bea:	d505      	bpl.n	8020bf8 <__swrite+0x1e>
 8020bec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020bf0:	2302      	movs	r3, #2
 8020bf2:	2200      	movs	r2, #0
 8020bf4:	f000 f912 	bl	8020e1c <_lseek_r>
 8020bf8:	89a3      	ldrh	r3, [r4, #12]
 8020bfa:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8020bfe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8020c02:	81a3      	strh	r3, [r4, #12]
 8020c04:	4632      	mov	r2, r6
 8020c06:	463b      	mov	r3, r7
 8020c08:	4628      	mov	r0, r5
 8020c0a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8020c0e:	f000 b94d 	b.w	8020eac <_write_r>

08020c12 <__sseek>:
 8020c12:	b510      	push	{r4, lr}
 8020c14:	460c      	mov	r4, r1
 8020c16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c1a:	f000 f8ff 	bl	8020e1c <_lseek_r>
 8020c1e:	1c43      	adds	r3, r0, #1
 8020c20:	89a3      	ldrh	r3, [r4, #12]
 8020c22:	bf15      	itete	ne
 8020c24:	6560      	strne	r0, [r4, #84]	@ 0x54
 8020c26:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8020c2a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8020c2e:	81a3      	strheq	r3, [r4, #12]
 8020c30:	bf18      	it	ne
 8020c32:	81a3      	strhne	r3, [r4, #12]
 8020c34:	bd10      	pop	{r4, pc}

08020c36 <__sclose>:
 8020c36:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8020c3a:	f000 b8df 	b.w	8020dfc <_close_r>

08020c3e <__swbuf_r>:
 8020c3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8020c40:	460e      	mov	r6, r1
 8020c42:	4614      	mov	r4, r2
 8020c44:	4605      	mov	r5, r0
 8020c46:	b118      	cbz	r0, 8020c50 <__swbuf_r+0x12>
 8020c48:	6a03      	ldr	r3, [r0, #32]
 8020c4a:	b90b      	cbnz	r3, 8020c50 <__swbuf_r+0x12>
 8020c4c:	f7ff ff4c 	bl	8020ae8 <__sinit>
 8020c50:	69a3      	ldr	r3, [r4, #24]
 8020c52:	60a3      	str	r3, [r4, #8]
 8020c54:	89a3      	ldrh	r3, [r4, #12]
 8020c56:	071a      	lsls	r2, r3, #28
 8020c58:	d501      	bpl.n	8020c5e <__swbuf_r+0x20>
 8020c5a:	6923      	ldr	r3, [r4, #16]
 8020c5c:	b943      	cbnz	r3, 8020c70 <__swbuf_r+0x32>
 8020c5e:	4621      	mov	r1, r4
 8020c60:	4628      	mov	r0, r5
 8020c62:	f000 f82b 	bl	8020cbc <__swsetup_r>
 8020c66:	b118      	cbz	r0, 8020c70 <__swbuf_r+0x32>
 8020c68:	f04f 37ff 	mov.w	r7, #4294967295
 8020c6c:	4638      	mov	r0, r7
 8020c6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8020c70:	6823      	ldr	r3, [r4, #0]
 8020c72:	6922      	ldr	r2, [r4, #16]
 8020c74:	1a98      	subs	r0, r3, r2
 8020c76:	6963      	ldr	r3, [r4, #20]
 8020c78:	b2f6      	uxtb	r6, r6
 8020c7a:	4283      	cmp	r3, r0
 8020c7c:	4637      	mov	r7, r6
 8020c7e:	dc05      	bgt.n	8020c8c <__swbuf_r+0x4e>
 8020c80:	4621      	mov	r1, r4
 8020c82:	4628      	mov	r0, r5
 8020c84:	f000 feb2 	bl	80219ec <_fflush_r>
 8020c88:	2800      	cmp	r0, #0
 8020c8a:	d1ed      	bne.n	8020c68 <__swbuf_r+0x2a>
 8020c8c:	68a3      	ldr	r3, [r4, #8]
 8020c8e:	3b01      	subs	r3, #1
 8020c90:	60a3      	str	r3, [r4, #8]
 8020c92:	6823      	ldr	r3, [r4, #0]
 8020c94:	1c5a      	adds	r2, r3, #1
 8020c96:	6022      	str	r2, [r4, #0]
 8020c98:	701e      	strb	r6, [r3, #0]
 8020c9a:	6962      	ldr	r2, [r4, #20]
 8020c9c:	1c43      	adds	r3, r0, #1
 8020c9e:	429a      	cmp	r2, r3
 8020ca0:	d004      	beq.n	8020cac <__swbuf_r+0x6e>
 8020ca2:	89a3      	ldrh	r3, [r4, #12]
 8020ca4:	07db      	lsls	r3, r3, #31
 8020ca6:	d5e1      	bpl.n	8020c6c <__swbuf_r+0x2e>
 8020ca8:	2e0a      	cmp	r6, #10
 8020caa:	d1df      	bne.n	8020c6c <__swbuf_r+0x2e>
 8020cac:	4621      	mov	r1, r4
 8020cae:	4628      	mov	r0, r5
 8020cb0:	f000 fe9c 	bl	80219ec <_fflush_r>
 8020cb4:	2800      	cmp	r0, #0
 8020cb6:	d0d9      	beq.n	8020c6c <__swbuf_r+0x2e>
 8020cb8:	e7d6      	b.n	8020c68 <__swbuf_r+0x2a>
	...

08020cbc <__swsetup_r>:
 8020cbc:	b538      	push	{r3, r4, r5, lr}
 8020cbe:	4b29      	ldr	r3, [pc, #164]	@ (8020d64 <__swsetup_r+0xa8>)
 8020cc0:	4605      	mov	r5, r0
 8020cc2:	6818      	ldr	r0, [r3, #0]
 8020cc4:	460c      	mov	r4, r1
 8020cc6:	b118      	cbz	r0, 8020cd0 <__swsetup_r+0x14>
 8020cc8:	6a03      	ldr	r3, [r0, #32]
 8020cca:	b90b      	cbnz	r3, 8020cd0 <__swsetup_r+0x14>
 8020ccc:	f7ff ff0c 	bl	8020ae8 <__sinit>
 8020cd0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020cd4:	0719      	lsls	r1, r3, #28
 8020cd6:	d422      	bmi.n	8020d1e <__swsetup_r+0x62>
 8020cd8:	06da      	lsls	r2, r3, #27
 8020cda:	d407      	bmi.n	8020cec <__swsetup_r+0x30>
 8020cdc:	2209      	movs	r2, #9
 8020cde:	602a      	str	r2, [r5, #0]
 8020ce0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8020ce4:	81a3      	strh	r3, [r4, #12]
 8020ce6:	f04f 30ff 	mov.w	r0, #4294967295
 8020cea:	e033      	b.n	8020d54 <__swsetup_r+0x98>
 8020cec:	0758      	lsls	r0, r3, #29
 8020cee:	d512      	bpl.n	8020d16 <__swsetup_r+0x5a>
 8020cf0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8020cf2:	b141      	cbz	r1, 8020d06 <__swsetup_r+0x4a>
 8020cf4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8020cf8:	4299      	cmp	r1, r3
 8020cfa:	d002      	beq.n	8020d02 <__swsetup_r+0x46>
 8020cfc:	4628      	mov	r0, r5
 8020cfe:	f000 f97f 	bl	8021000 <_free_r>
 8020d02:	2300      	movs	r3, #0
 8020d04:	6363      	str	r3, [r4, #52]	@ 0x34
 8020d06:	89a3      	ldrh	r3, [r4, #12]
 8020d08:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8020d0c:	81a3      	strh	r3, [r4, #12]
 8020d0e:	2300      	movs	r3, #0
 8020d10:	6063      	str	r3, [r4, #4]
 8020d12:	6923      	ldr	r3, [r4, #16]
 8020d14:	6023      	str	r3, [r4, #0]
 8020d16:	89a3      	ldrh	r3, [r4, #12]
 8020d18:	f043 0308 	orr.w	r3, r3, #8
 8020d1c:	81a3      	strh	r3, [r4, #12]
 8020d1e:	6923      	ldr	r3, [r4, #16]
 8020d20:	b94b      	cbnz	r3, 8020d36 <__swsetup_r+0x7a>
 8020d22:	89a3      	ldrh	r3, [r4, #12]
 8020d24:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8020d28:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020d2c:	d003      	beq.n	8020d36 <__swsetup_r+0x7a>
 8020d2e:	4621      	mov	r1, r4
 8020d30:	4628      	mov	r0, r5
 8020d32:	f000 fea9 	bl	8021a88 <__smakebuf_r>
 8020d36:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8020d3a:	f013 0201 	ands.w	r2, r3, #1
 8020d3e:	d00a      	beq.n	8020d56 <__swsetup_r+0x9a>
 8020d40:	2200      	movs	r2, #0
 8020d42:	60a2      	str	r2, [r4, #8]
 8020d44:	6962      	ldr	r2, [r4, #20]
 8020d46:	4252      	negs	r2, r2
 8020d48:	61a2      	str	r2, [r4, #24]
 8020d4a:	6922      	ldr	r2, [r4, #16]
 8020d4c:	b942      	cbnz	r2, 8020d60 <__swsetup_r+0xa4>
 8020d4e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8020d52:	d1c5      	bne.n	8020ce0 <__swsetup_r+0x24>
 8020d54:	bd38      	pop	{r3, r4, r5, pc}
 8020d56:	0799      	lsls	r1, r3, #30
 8020d58:	bf58      	it	pl
 8020d5a:	6962      	ldrpl	r2, [r4, #20]
 8020d5c:	60a2      	str	r2, [r4, #8]
 8020d5e:	e7f4      	b.n	8020d4a <__swsetup_r+0x8e>
 8020d60:	2000      	movs	r0, #0
 8020d62:	e7f7      	b.n	8020d54 <__swsetup_r+0x98>
 8020d64:	240000e8 	.word	0x240000e8

08020d68 <memset>:
 8020d68:	4402      	add	r2, r0
 8020d6a:	4603      	mov	r3, r0
 8020d6c:	4293      	cmp	r3, r2
 8020d6e:	d100      	bne.n	8020d72 <memset+0xa>
 8020d70:	4770      	bx	lr
 8020d72:	f803 1b01 	strb.w	r1, [r3], #1
 8020d76:	e7f9      	b.n	8020d6c <memset+0x4>

08020d78 <strncmp>:
 8020d78:	b510      	push	{r4, lr}
 8020d7a:	b16a      	cbz	r2, 8020d98 <strncmp+0x20>
 8020d7c:	3901      	subs	r1, #1
 8020d7e:	1884      	adds	r4, r0, r2
 8020d80:	f810 2b01 	ldrb.w	r2, [r0], #1
 8020d84:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8020d88:	429a      	cmp	r2, r3
 8020d8a:	d103      	bne.n	8020d94 <strncmp+0x1c>
 8020d8c:	42a0      	cmp	r0, r4
 8020d8e:	d001      	beq.n	8020d94 <strncmp+0x1c>
 8020d90:	2a00      	cmp	r2, #0
 8020d92:	d1f5      	bne.n	8020d80 <strncmp+0x8>
 8020d94:	1ad0      	subs	r0, r2, r3
 8020d96:	bd10      	pop	{r4, pc}
 8020d98:	4610      	mov	r0, r2
 8020d9a:	e7fc      	b.n	8020d96 <strncmp+0x1e>

08020d9c <_raise_r>:
 8020d9c:	291f      	cmp	r1, #31
 8020d9e:	b538      	push	{r3, r4, r5, lr}
 8020da0:	4605      	mov	r5, r0
 8020da2:	460c      	mov	r4, r1
 8020da4:	d904      	bls.n	8020db0 <_raise_r+0x14>
 8020da6:	2316      	movs	r3, #22
 8020da8:	6003      	str	r3, [r0, #0]
 8020daa:	f04f 30ff 	mov.w	r0, #4294967295
 8020dae:	bd38      	pop	{r3, r4, r5, pc}
 8020db0:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8020db2:	b112      	cbz	r2, 8020dba <_raise_r+0x1e>
 8020db4:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8020db8:	b94b      	cbnz	r3, 8020dce <_raise_r+0x32>
 8020dba:	4628      	mov	r0, r5
 8020dbc:	f000 f864 	bl	8020e88 <_getpid_r>
 8020dc0:	4622      	mov	r2, r4
 8020dc2:	4601      	mov	r1, r0
 8020dc4:	4628      	mov	r0, r5
 8020dc6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8020dca:	f000 b84b 	b.w	8020e64 <_kill_r>
 8020dce:	2b01      	cmp	r3, #1
 8020dd0:	d00a      	beq.n	8020de8 <_raise_r+0x4c>
 8020dd2:	1c59      	adds	r1, r3, #1
 8020dd4:	d103      	bne.n	8020dde <_raise_r+0x42>
 8020dd6:	2316      	movs	r3, #22
 8020dd8:	6003      	str	r3, [r0, #0]
 8020dda:	2001      	movs	r0, #1
 8020ddc:	e7e7      	b.n	8020dae <_raise_r+0x12>
 8020dde:	2100      	movs	r1, #0
 8020de0:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8020de4:	4620      	mov	r0, r4
 8020de6:	4798      	blx	r3
 8020de8:	2000      	movs	r0, #0
 8020dea:	e7e0      	b.n	8020dae <_raise_r+0x12>

08020dec <raise>:
 8020dec:	4b02      	ldr	r3, [pc, #8]	@ (8020df8 <raise+0xc>)
 8020dee:	4601      	mov	r1, r0
 8020df0:	6818      	ldr	r0, [r3, #0]
 8020df2:	f7ff bfd3 	b.w	8020d9c <_raise_r>
 8020df6:	bf00      	nop
 8020df8:	240000e8 	.word	0x240000e8

08020dfc <_close_r>:
 8020dfc:	b538      	push	{r3, r4, r5, lr}
 8020dfe:	4d06      	ldr	r5, [pc, #24]	@ (8020e18 <_close_r+0x1c>)
 8020e00:	2300      	movs	r3, #0
 8020e02:	4604      	mov	r4, r0
 8020e04:	4608      	mov	r0, r1
 8020e06:	602b      	str	r3, [r5, #0]
 8020e08:	f7e0 fefa 	bl	8001c00 <_close>
 8020e0c:	1c43      	adds	r3, r0, #1
 8020e0e:	d102      	bne.n	8020e16 <_close_r+0x1a>
 8020e10:	682b      	ldr	r3, [r5, #0]
 8020e12:	b103      	cbz	r3, 8020e16 <_close_r+0x1a>
 8020e14:	6023      	str	r3, [r4, #0]
 8020e16:	bd38      	pop	{r3, r4, r5, pc}
 8020e18:	2402547c 	.word	0x2402547c

08020e1c <_lseek_r>:
 8020e1c:	b538      	push	{r3, r4, r5, lr}
 8020e1e:	4d07      	ldr	r5, [pc, #28]	@ (8020e3c <_lseek_r+0x20>)
 8020e20:	4604      	mov	r4, r0
 8020e22:	4608      	mov	r0, r1
 8020e24:	4611      	mov	r1, r2
 8020e26:	2200      	movs	r2, #0
 8020e28:	602a      	str	r2, [r5, #0]
 8020e2a:	461a      	mov	r2, r3
 8020e2c:	f7e0 fef2 	bl	8001c14 <_lseek>
 8020e30:	1c43      	adds	r3, r0, #1
 8020e32:	d102      	bne.n	8020e3a <_lseek_r+0x1e>
 8020e34:	682b      	ldr	r3, [r5, #0]
 8020e36:	b103      	cbz	r3, 8020e3a <_lseek_r+0x1e>
 8020e38:	6023      	str	r3, [r4, #0]
 8020e3a:	bd38      	pop	{r3, r4, r5, pc}
 8020e3c:	2402547c 	.word	0x2402547c

08020e40 <_read_r>:
 8020e40:	b538      	push	{r3, r4, r5, lr}
 8020e42:	4d07      	ldr	r5, [pc, #28]	@ (8020e60 <_read_r+0x20>)
 8020e44:	4604      	mov	r4, r0
 8020e46:	4608      	mov	r0, r1
 8020e48:	4611      	mov	r1, r2
 8020e4a:	2200      	movs	r2, #0
 8020e4c:	602a      	str	r2, [r5, #0]
 8020e4e:	461a      	mov	r2, r3
 8020e50:	f7e0 feba 	bl	8001bc8 <_read>
 8020e54:	1c43      	adds	r3, r0, #1
 8020e56:	d102      	bne.n	8020e5e <_read_r+0x1e>
 8020e58:	682b      	ldr	r3, [r5, #0]
 8020e5a:	b103      	cbz	r3, 8020e5e <_read_r+0x1e>
 8020e5c:	6023      	str	r3, [r4, #0]
 8020e5e:	bd38      	pop	{r3, r4, r5, pc}
 8020e60:	2402547c 	.word	0x2402547c

08020e64 <_kill_r>:
 8020e64:	b538      	push	{r3, r4, r5, lr}
 8020e66:	4d07      	ldr	r5, [pc, #28]	@ (8020e84 <_kill_r+0x20>)
 8020e68:	2300      	movs	r3, #0
 8020e6a:	4604      	mov	r4, r0
 8020e6c:	4608      	mov	r0, r1
 8020e6e:	4611      	mov	r1, r2
 8020e70:	602b      	str	r3, [r5, #0]
 8020e72:	f7e0 fe9b 	bl	8001bac <_kill>
 8020e76:	1c43      	adds	r3, r0, #1
 8020e78:	d102      	bne.n	8020e80 <_kill_r+0x1c>
 8020e7a:	682b      	ldr	r3, [r5, #0]
 8020e7c:	b103      	cbz	r3, 8020e80 <_kill_r+0x1c>
 8020e7e:	6023      	str	r3, [r4, #0]
 8020e80:	bd38      	pop	{r3, r4, r5, pc}
 8020e82:	bf00      	nop
 8020e84:	2402547c 	.word	0x2402547c

08020e88 <_getpid_r>:
 8020e88:	f7e0 be8e 	b.w	8001ba8 <_getpid>

08020e8c <_sbrk_r>:
 8020e8c:	b538      	push	{r3, r4, r5, lr}
 8020e8e:	4d06      	ldr	r5, [pc, #24]	@ (8020ea8 <_sbrk_r+0x1c>)
 8020e90:	2300      	movs	r3, #0
 8020e92:	4604      	mov	r4, r0
 8020e94:	4608      	mov	r0, r1
 8020e96:	602b      	str	r3, [r5, #0]
 8020e98:	f7e0 febe 	bl	8001c18 <_sbrk>
 8020e9c:	1c43      	adds	r3, r0, #1
 8020e9e:	d102      	bne.n	8020ea6 <_sbrk_r+0x1a>
 8020ea0:	682b      	ldr	r3, [r5, #0]
 8020ea2:	b103      	cbz	r3, 8020ea6 <_sbrk_r+0x1a>
 8020ea4:	6023      	str	r3, [r4, #0]
 8020ea6:	bd38      	pop	{r3, r4, r5, pc}
 8020ea8:	2402547c 	.word	0x2402547c

08020eac <_write_r>:
 8020eac:	b538      	push	{r3, r4, r5, lr}
 8020eae:	4d07      	ldr	r5, [pc, #28]	@ (8020ecc <_write_r+0x20>)
 8020eb0:	4604      	mov	r4, r0
 8020eb2:	4608      	mov	r0, r1
 8020eb4:	4611      	mov	r1, r2
 8020eb6:	2200      	movs	r2, #0
 8020eb8:	602a      	str	r2, [r5, #0]
 8020eba:	461a      	mov	r2, r3
 8020ebc:	f7e0 fe92 	bl	8001be4 <_write>
 8020ec0:	1c43      	adds	r3, r0, #1
 8020ec2:	d102      	bne.n	8020eca <_write_r+0x1e>
 8020ec4:	682b      	ldr	r3, [r5, #0]
 8020ec6:	b103      	cbz	r3, 8020eca <_write_r+0x1e>
 8020ec8:	6023      	str	r3, [r4, #0]
 8020eca:	bd38      	pop	{r3, r4, r5, pc}
 8020ecc:	2402547c 	.word	0x2402547c

08020ed0 <__errno>:
 8020ed0:	4b01      	ldr	r3, [pc, #4]	@ (8020ed8 <__errno+0x8>)
 8020ed2:	6818      	ldr	r0, [r3, #0]
 8020ed4:	4770      	bx	lr
 8020ed6:	bf00      	nop
 8020ed8:	240000e8 	.word	0x240000e8

08020edc <__libc_init_array>:
 8020edc:	b570      	push	{r4, r5, r6, lr}
 8020ede:	4d0d      	ldr	r5, [pc, #52]	@ (8020f14 <__libc_init_array+0x38>)
 8020ee0:	4c0d      	ldr	r4, [pc, #52]	@ (8020f18 <__libc_init_array+0x3c>)
 8020ee2:	1b64      	subs	r4, r4, r5
 8020ee4:	10a4      	asrs	r4, r4, #2
 8020ee6:	2600      	movs	r6, #0
 8020ee8:	42a6      	cmp	r6, r4
 8020eea:	d109      	bne.n	8020f00 <__libc_init_array+0x24>
 8020eec:	4d0b      	ldr	r5, [pc, #44]	@ (8020f1c <__libc_init_array+0x40>)
 8020eee:	4c0c      	ldr	r4, [pc, #48]	@ (8020f20 <__libc_init_array+0x44>)
 8020ef0:	f000 fe78 	bl	8021be4 <_init>
 8020ef4:	1b64      	subs	r4, r4, r5
 8020ef6:	10a4      	asrs	r4, r4, #2
 8020ef8:	2600      	movs	r6, #0
 8020efa:	42a6      	cmp	r6, r4
 8020efc:	d105      	bne.n	8020f0a <__libc_init_array+0x2e>
 8020efe:	bd70      	pop	{r4, r5, r6, pc}
 8020f00:	f855 3b04 	ldr.w	r3, [r5], #4
 8020f04:	4798      	blx	r3
 8020f06:	3601      	adds	r6, #1
 8020f08:	e7ee      	b.n	8020ee8 <__libc_init_array+0xc>
 8020f0a:	f855 3b04 	ldr.w	r3, [r5], #4
 8020f0e:	4798      	blx	r3
 8020f10:	3601      	adds	r6, #1
 8020f12:	e7f2      	b.n	8020efa <__libc_init_array+0x1e>
 8020f14:	08024da4 	.word	0x08024da4
 8020f18:	08024da4 	.word	0x08024da4
 8020f1c:	08024da4 	.word	0x08024da4
 8020f20:	08024dc0 	.word	0x08024dc0

08020f24 <__retarget_lock_init_recursive>:
 8020f24:	4770      	bx	lr

08020f26 <__retarget_lock_acquire_recursive>:
 8020f26:	4770      	bx	lr

08020f28 <__retarget_lock_release_recursive>:
 8020f28:	4770      	bx	lr

08020f2a <memcpy>:
 8020f2a:	440a      	add	r2, r1
 8020f2c:	4291      	cmp	r1, r2
 8020f2e:	f100 33ff 	add.w	r3, r0, #4294967295
 8020f32:	d100      	bne.n	8020f36 <memcpy+0xc>
 8020f34:	4770      	bx	lr
 8020f36:	b510      	push	{r4, lr}
 8020f38:	f811 4b01 	ldrb.w	r4, [r1], #1
 8020f3c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8020f40:	4291      	cmp	r1, r2
 8020f42:	d1f9      	bne.n	8020f38 <memcpy+0xe>
 8020f44:	bd10      	pop	{r4, pc}
	...

08020f48 <__register_exitproc>:
 8020f48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8020f4c:	4d27      	ldr	r5, [pc, #156]	@ (8020fec <__register_exitproc+0xa4>)
 8020f4e:	4607      	mov	r7, r0
 8020f50:	6828      	ldr	r0, [r5, #0]
 8020f52:	4691      	mov	r9, r2
 8020f54:	460e      	mov	r6, r1
 8020f56:	4698      	mov	r8, r3
 8020f58:	f7ff ffe5 	bl	8020f26 <__retarget_lock_acquire_recursive>
 8020f5c:	4a24      	ldr	r2, [pc, #144]	@ (8020ff0 <__register_exitproc+0xa8>)
 8020f5e:	6814      	ldr	r4, [r2, #0]
 8020f60:	b93c      	cbnz	r4, 8020f72 <__register_exitproc+0x2a>
 8020f62:	4b24      	ldr	r3, [pc, #144]	@ (8020ff4 <__register_exitproc+0xac>)
 8020f64:	6013      	str	r3, [r2, #0]
 8020f66:	4a24      	ldr	r2, [pc, #144]	@ (8020ff8 <__register_exitproc+0xb0>)
 8020f68:	b112      	cbz	r2, 8020f70 <__register_exitproc+0x28>
 8020f6a:	6812      	ldr	r2, [r2, #0]
 8020f6c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8020f70:	4c20      	ldr	r4, [pc, #128]	@ (8020ff4 <__register_exitproc+0xac>)
 8020f72:	6863      	ldr	r3, [r4, #4]
 8020f74:	2b1f      	cmp	r3, #31
 8020f76:	dd06      	ble.n	8020f86 <__register_exitproc+0x3e>
 8020f78:	6828      	ldr	r0, [r5, #0]
 8020f7a:	f7ff ffd5 	bl	8020f28 <__retarget_lock_release_recursive>
 8020f7e:	f04f 30ff 	mov.w	r0, #4294967295
 8020f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8020f86:	b32f      	cbz	r7, 8020fd4 <__register_exitproc+0x8c>
 8020f88:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8020f8c:	b968      	cbnz	r0, 8020faa <__register_exitproc+0x62>
 8020f8e:	4b1b      	ldr	r3, [pc, #108]	@ (8020ffc <__register_exitproc+0xb4>)
 8020f90:	2b00      	cmp	r3, #0
 8020f92:	d0f1      	beq.n	8020f78 <__register_exitproc+0x30>
 8020f94:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8020f98:	f7ff fc4e 	bl	8020838 <malloc>
 8020f9c:	2800      	cmp	r0, #0
 8020f9e:	d0eb      	beq.n	8020f78 <__register_exitproc+0x30>
 8020fa0:	2300      	movs	r3, #0
 8020fa2:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8020fa6:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8020faa:	6863      	ldr	r3, [r4, #4]
 8020fac:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8020fb0:	2201      	movs	r2, #1
 8020fb2:	409a      	lsls	r2, r3
 8020fb4:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8020fb8:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8020fbc:	4313      	orrs	r3, r2
 8020fbe:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8020fc2:	2f02      	cmp	r7, #2
 8020fc4:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8020fc8:	bf02      	ittt	eq
 8020fca:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8020fce:	4313      	orreq	r3, r2
 8020fd0:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8020fd4:	6863      	ldr	r3, [r4, #4]
 8020fd6:	6828      	ldr	r0, [r5, #0]
 8020fd8:	1c5a      	adds	r2, r3, #1
 8020fda:	3302      	adds	r3, #2
 8020fdc:	6062      	str	r2, [r4, #4]
 8020fde:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8020fe2:	f7ff ffa1 	bl	8020f28 <__retarget_lock_release_recursive>
 8020fe6:	2000      	movs	r0, #0
 8020fe8:	e7cb      	b.n	8020f82 <__register_exitproc+0x3a>
 8020fea:	bf00      	nop
 8020fec:	24000138 	.word	0x24000138
 8020ff0:	24025510 	.word	0x24025510
 8020ff4:	24025484 	.word	0x24025484
 8020ff8:	08024ba4 	.word	0x08024ba4
 8020ffc:	08020839 	.word	0x08020839

08021000 <_free_r>:
 8021000:	b538      	push	{r3, r4, r5, lr}
 8021002:	4605      	mov	r5, r0
 8021004:	2900      	cmp	r1, #0
 8021006:	d041      	beq.n	802108c <_free_r+0x8c>
 8021008:	f851 3c04 	ldr.w	r3, [r1, #-4]
 802100c:	1f0c      	subs	r4, r1, #4
 802100e:	2b00      	cmp	r3, #0
 8021010:	bfb8      	it	lt
 8021012:	18e4      	addlt	r4, r4, r3
 8021014:	f7ff fcc2 	bl	802099c <__malloc_lock>
 8021018:	4a1d      	ldr	r2, [pc, #116]	@ (8021090 <_free_r+0x90>)
 802101a:	6813      	ldr	r3, [r2, #0]
 802101c:	b933      	cbnz	r3, 802102c <_free_r+0x2c>
 802101e:	6063      	str	r3, [r4, #4]
 8021020:	6014      	str	r4, [r2, #0]
 8021022:	4628      	mov	r0, r5
 8021024:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021028:	f7ff bcbe 	b.w	80209a8 <__malloc_unlock>
 802102c:	42a3      	cmp	r3, r4
 802102e:	d908      	bls.n	8021042 <_free_r+0x42>
 8021030:	6820      	ldr	r0, [r4, #0]
 8021032:	1821      	adds	r1, r4, r0
 8021034:	428b      	cmp	r3, r1
 8021036:	bf01      	itttt	eq
 8021038:	6819      	ldreq	r1, [r3, #0]
 802103a:	685b      	ldreq	r3, [r3, #4]
 802103c:	1809      	addeq	r1, r1, r0
 802103e:	6021      	streq	r1, [r4, #0]
 8021040:	e7ed      	b.n	802101e <_free_r+0x1e>
 8021042:	461a      	mov	r2, r3
 8021044:	685b      	ldr	r3, [r3, #4]
 8021046:	b10b      	cbz	r3, 802104c <_free_r+0x4c>
 8021048:	42a3      	cmp	r3, r4
 802104a:	d9fa      	bls.n	8021042 <_free_r+0x42>
 802104c:	6811      	ldr	r1, [r2, #0]
 802104e:	1850      	adds	r0, r2, r1
 8021050:	42a0      	cmp	r0, r4
 8021052:	d10b      	bne.n	802106c <_free_r+0x6c>
 8021054:	6820      	ldr	r0, [r4, #0]
 8021056:	4401      	add	r1, r0
 8021058:	1850      	adds	r0, r2, r1
 802105a:	4283      	cmp	r3, r0
 802105c:	6011      	str	r1, [r2, #0]
 802105e:	d1e0      	bne.n	8021022 <_free_r+0x22>
 8021060:	6818      	ldr	r0, [r3, #0]
 8021062:	685b      	ldr	r3, [r3, #4]
 8021064:	6053      	str	r3, [r2, #4]
 8021066:	4408      	add	r0, r1
 8021068:	6010      	str	r0, [r2, #0]
 802106a:	e7da      	b.n	8021022 <_free_r+0x22>
 802106c:	d902      	bls.n	8021074 <_free_r+0x74>
 802106e:	230c      	movs	r3, #12
 8021070:	602b      	str	r3, [r5, #0]
 8021072:	e7d6      	b.n	8021022 <_free_r+0x22>
 8021074:	6820      	ldr	r0, [r4, #0]
 8021076:	1821      	adds	r1, r4, r0
 8021078:	428b      	cmp	r3, r1
 802107a:	bf04      	itt	eq
 802107c:	6819      	ldreq	r1, [r3, #0]
 802107e:	685b      	ldreq	r3, [r3, #4]
 8021080:	6063      	str	r3, [r4, #4]
 8021082:	bf04      	itt	eq
 8021084:	1809      	addeq	r1, r1, r0
 8021086:	6021      	streq	r1, [r4, #0]
 8021088:	6054      	str	r4, [r2, #4]
 802108a:	e7ca      	b.n	8021022 <_free_r+0x22>
 802108c:	bd38      	pop	{r3, r4, r5, pc}
 802108e:	bf00      	nop
 8021090:	2402533c 	.word	0x2402533c

08021094 <__ssputs_r>:
 8021094:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8021098:	688e      	ldr	r6, [r1, #8]
 802109a:	461f      	mov	r7, r3
 802109c:	42be      	cmp	r6, r7
 802109e:	680b      	ldr	r3, [r1, #0]
 80210a0:	4682      	mov	sl, r0
 80210a2:	460c      	mov	r4, r1
 80210a4:	4690      	mov	r8, r2
 80210a6:	d82d      	bhi.n	8021104 <__ssputs_r+0x70>
 80210a8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80210ac:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80210b0:	d026      	beq.n	8021100 <__ssputs_r+0x6c>
 80210b2:	6965      	ldr	r5, [r4, #20]
 80210b4:	6909      	ldr	r1, [r1, #16]
 80210b6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80210ba:	eba3 0901 	sub.w	r9, r3, r1
 80210be:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80210c2:	1c7b      	adds	r3, r7, #1
 80210c4:	444b      	add	r3, r9
 80210c6:	106d      	asrs	r5, r5, #1
 80210c8:	429d      	cmp	r5, r3
 80210ca:	bf38      	it	cc
 80210cc:	461d      	movcc	r5, r3
 80210ce:	0553      	lsls	r3, r2, #21
 80210d0:	d527      	bpl.n	8021122 <__ssputs_r+0x8e>
 80210d2:	4629      	mov	r1, r5
 80210d4:	f7ff fbe2 	bl	802089c <_malloc_r>
 80210d8:	4606      	mov	r6, r0
 80210da:	b360      	cbz	r0, 8021136 <__ssputs_r+0xa2>
 80210dc:	6921      	ldr	r1, [r4, #16]
 80210de:	464a      	mov	r2, r9
 80210e0:	f7ff ff23 	bl	8020f2a <memcpy>
 80210e4:	89a3      	ldrh	r3, [r4, #12]
 80210e6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80210ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80210ee:	81a3      	strh	r3, [r4, #12]
 80210f0:	6126      	str	r6, [r4, #16]
 80210f2:	6165      	str	r5, [r4, #20]
 80210f4:	444e      	add	r6, r9
 80210f6:	eba5 0509 	sub.w	r5, r5, r9
 80210fa:	6026      	str	r6, [r4, #0]
 80210fc:	60a5      	str	r5, [r4, #8]
 80210fe:	463e      	mov	r6, r7
 8021100:	42be      	cmp	r6, r7
 8021102:	d900      	bls.n	8021106 <__ssputs_r+0x72>
 8021104:	463e      	mov	r6, r7
 8021106:	6820      	ldr	r0, [r4, #0]
 8021108:	4632      	mov	r2, r6
 802110a:	4641      	mov	r1, r8
 802110c:	f000 fcf8 	bl	8021b00 <memmove>
 8021110:	68a3      	ldr	r3, [r4, #8]
 8021112:	1b9b      	subs	r3, r3, r6
 8021114:	60a3      	str	r3, [r4, #8]
 8021116:	6823      	ldr	r3, [r4, #0]
 8021118:	4433      	add	r3, r6
 802111a:	6023      	str	r3, [r4, #0]
 802111c:	2000      	movs	r0, #0
 802111e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021122:	462a      	mov	r2, r5
 8021124:	f000 fd28 	bl	8021b78 <_realloc_r>
 8021128:	4606      	mov	r6, r0
 802112a:	2800      	cmp	r0, #0
 802112c:	d1e0      	bne.n	80210f0 <__ssputs_r+0x5c>
 802112e:	6921      	ldr	r1, [r4, #16]
 8021130:	4650      	mov	r0, sl
 8021132:	f7ff ff65 	bl	8021000 <_free_r>
 8021136:	230c      	movs	r3, #12
 8021138:	f8ca 3000 	str.w	r3, [sl]
 802113c:	89a3      	ldrh	r3, [r4, #12]
 802113e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021142:	81a3      	strh	r3, [r4, #12]
 8021144:	f04f 30ff 	mov.w	r0, #4294967295
 8021148:	e7e9      	b.n	802111e <__ssputs_r+0x8a>
	...

0802114c <_svfiprintf_r>:
 802114c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8021150:	4698      	mov	r8, r3
 8021152:	898b      	ldrh	r3, [r1, #12]
 8021154:	061b      	lsls	r3, r3, #24
 8021156:	b09d      	sub	sp, #116	@ 0x74
 8021158:	4607      	mov	r7, r0
 802115a:	460d      	mov	r5, r1
 802115c:	4614      	mov	r4, r2
 802115e:	d510      	bpl.n	8021182 <_svfiprintf_r+0x36>
 8021160:	690b      	ldr	r3, [r1, #16]
 8021162:	b973      	cbnz	r3, 8021182 <_svfiprintf_r+0x36>
 8021164:	2140      	movs	r1, #64	@ 0x40
 8021166:	f7ff fb99 	bl	802089c <_malloc_r>
 802116a:	6028      	str	r0, [r5, #0]
 802116c:	6128      	str	r0, [r5, #16]
 802116e:	b930      	cbnz	r0, 802117e <_svfiprintf_r+0x32>
 8021170:	230c      	movs	r3, #12
 8021172:	603b      	str	r3, [r7, #0]
 8021174:	f04f 30ff 	mov.w	r0, #4294967295
 8021178:	b01d      	add	sp, #116	@ 0x74
 802117a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802117e:	2340      	movs	r3, #64	@ 0x40
 8021180:	616b      	str	r3, [r5, #20]
 8021182:	2300      	movs	r3, #0
 8021184:	9309      	str	r3, [sp, #36]	@ 0x24
 8021186:	2320      	movs	r3, #32
 8021188:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 802118c:	f8cd 800c 	str.w	r8, [sp, #12]
 8021190:	2330      	movs	r3, #48	@ 0x30
 8021192:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8021330 <_svfiprintf_r+0x1e4>
 8021196:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802119a:	f04f 0901 	mov.w	r9, #1
 802119e:	4623      	mov	r3, r4
 80211a0:	469a      	mov	sl, r3
 80211a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80211a6:	b10a      	cbz	r2, 80211ac <_svfiprintf_r+0x60>
 80211a8:	2a25      	cmp	r2, #37	@ 0x25
 80211aa:	d1f9      	bne.n	80211a0 <_svfiprintf_r+0x54>
 80211ac:	ebba 0b04 	subs.w	fp, sl, r4
 80211b0:	d00b      	beq.n	80211ca <_svfiprintf_r+0x7e>
 80211b2:	465b      	mov	r3, fp
 80211b4:	4622      	mov	r2, r4
 80211b6:	4629      	mov	r1, r5
 80211b8:	4638      	mov	r0, r7
 80211ba:	f7ff ff6b 	bl	8021094 <__ssputs_r>
 80211be:	3001      	adds	r0, #1
 80211c0:	f000 80a7 	beq.w	8021312 <_svfiprintf_r+0x1c6>
 80211c4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80211c6:	445a      	add	r2, fp
 80211c8:	9209      	str	r2, [sp, #36]	@ 0x24
 80211ca:	f89a 3000 	ldrb.w	r3, [sl]
 80211ce:	2b00      	cmp	r3, #0
 80211d0:	f000 809f 	beq.w	8021312 <_svfiprintf_r+0x1c6>
 80211d4:	2300      	movs	r3, #0
 80211d6:	f04f 32ff 	mov.w	r2, #4294967295
 80211da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80211de:	f10a 0a01 	add.w	sl, sl, #1
 80211e2:	9304      	str	r3, [sp, #16]
 80211e4:	9307      	str	r3, [sp, #28]
 80211e6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80211ea:	931a      	str	r3, [sp, #104]	@ 0x68
 80211ec:	4654      	mov	r4, sl
 80211ee:	2205      	movs	r2, #5
 80211f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80211f4:	484e      	ldr	r0, [pc, #312]	@ (8021330 <_svfiprintf_r+0x1e4>)
 80211f6:	f7df f87b 	bl	80002f0 <memchr>
 80211fa:	9a04      	ldr	r2, [sp, #16]
 80211fc:	b9d8      	cbnz	r0, 8021236 <_svfiprintf_r+0xea>
 80211fe:	06d0      	lsls	r0, r2, #27
 8021200:	bf44      	itt	mi
 8021202:	2320      	movmi	r3, #32
 8021204:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021208:	0711      	lsls	r1, r2, #28
 802120a:	bf44      	itt	mi
 802120c:	232b      	movmi	r3, #43	@ 0x2b
 802120e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021212:	f89a 3000 	ldrb.w	r3, [sl]
 8021216:	2b2a      	cmp	r3, #42	@ 0x2a
 8021218:	d015      	beq.n	8021246 <_svfiprintf_r+0xfa>
 802121a:	9a07      	ldr	r2, [sp, #28]
 802121c:	4654      	mov	r4, sl
 802121e:	2000      	movs	r0, #0
 8021220:	f04f 0c0a 	mov.w	ip, #10
 8021224:	4621      	mov	r1, r4
 8021226:	f811 3b01 	ldrb.w	r3, [r1], #1
 802122a:	3b30      	subs	r3, #48	@ 0x30
 802122c:	2b09      	cmp	r3, #9
 802122e:	d94b      	bls.n	80212c8 <_svfiprintf_r+0x17c>
 8021230:	b1b0      	cbz	r0, 8021260 <_svfiprintf_r+0x114>
 8021232:	9207      	str	r2, [sp, #28]
 8021234:	e014      	b.n	8021260 <_svfiprintf_r+0x114>
 8021236:	eba0 0308 	sub.w	r3, r0, r8
 802123a:	fa09 f303 	lsl.w	r3, r9, r3
 802123e:	4313      	orrs	r3, r2
 8021240:	9304      	str	r3, [sp, #16]
 8021242:	46a2      	mov	sl, r4
 8021244:	e7d2      	b.n	80211ec <_svfiprintf_r+0xa0>
 8021246:	9b03      	ldr	r3, [sp, #12]
 8021248:	1d19      	adds	r1, r3, #4
 802124a:	681b      	ldr	r3, [r3, #0]
 802124c:	9103      	str	r1, [sp, #12]
 802124e:	2b00      	cmp	r3, #0
 8021250:	bfbb      	ittet	lt
 8021252:	425b      	neglt	r3, r3
 8021254:	f042 0202 	orrlt.w	r2, r2, #2
 8021258:	9307      	strge	r3, [sp, #28]
 802125a:	9307      	strlt	r3, [sp, #28]
 802125c:	bfb8      	it	lt
 802125e:	9204      	strlt	r2, [sp, #16]
 8021260:	7823      	ldrb	r3, [r4, #0]
 8021262:	2b2e      	cmp	r3, #46	@ 0x2e
 8021264:	d10a      	bne.n	802127c <_svfiprintf_r+0x130>
 8021266:	7863      	ldrb	r3, [r4, #1]
 8021268:	2b2a      	cmp	r3, #42	@ 0x2a
 802126a:	d132      	bne.n	80212d2 <_svfiprintf_r+0x186>
 802126c:	9b03      	ldr	r3, [sp, #12]
 802126e:	1d1a      	adds	r2, r3, #4
 8021270:	681b      	ldr	r3, [r3, #0]
 8021272:	9203      	str	r2, [sp, #12]
 8021274:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8021278:	3402      	adds	r4, #2
 802127a:	9305      	str	r3, [sp, #20]
 802127c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8021340 <_svfiprintf_r+0x1f4>
 8021280:	7821      	ldrb	r1, [r4, #0]
 8021282:	2203      	movs	r2, #3
 8021284:	4650      	mov	r0, sl
 8021286:	f7df f833 	bl	80002f0 <memchr>
 802128a:	b138      	cbz	r0, 802129c <_svfiprintf_r+0x150>
 802128c:	9b04      	ldr	r3, [sp, #16]
 802128e:	eba0 000a 	sub.w	r0, r0, sl
 8021292:	2240      	movs	r2, #64	@ 0x40
 8021294:	4082      	lsls	r2, r0
 8021296:	4313      	orrs	r3, r2
 8021298:	3401      	adds	r4, #1
 802129a:	9304      	str	r3, [sp, #16]
 802129c:	f814 1b01 	ldrb.w	r1, [r4], #1
 80212a0:	4824      	ldr	r0, [pc, #144]	@ (8021334 <_svfiprintf_r+0x1e8>)
 80212a2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80212a6:	2206      	movs	r2, #6
 80212a8:	f7df f822 	bl	80002f0 <memchr>
 80212ac:	2800      	cmp	r0, #0
 80212ae:	d036      	beq.n	802131e <_svfiprintf_r+0x1d2>
 80212b0:	4b21      	ldr	r3, [pc, #132]	@ (8021338 <_svfiprintf_r+0x1ec>)
 80212b2:	bb1b      	cbnz	r3, 80212fc <_svfiprintf_r+0x1b0>
 80212b4:	9b03      	ldr	r3, [sp, #12]
 80212b6:	3307      	adds	r3, #7
 80212b8:	f023 0307 	bic.w	r3, r3, #7
 80212bc:	3308      	adds	r3, #8
 80212be:	9303      	str	r3, [sp, #12]
 80212c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80212c2:	4433      	add	r3, r6
 80212c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80212c6:	e76a      	b.n	802119e <_svfiprintf_r+0x52>
 80212c8:	fb0c 3202 	mla	r2, ip, r2, r3
 80212cc:	460c      	mov	r4, r1
 80212ce:	2001      	movs	r0, #1
 80212d0:	e7a8      	b.n	8021224 <_svfiprintf_r+0xd8>
 80212d2:	2300      	movs	r3, #0
 80212d4:	3401      	adds	r4, #1
 80212d6:	9305      	str	r3, [sp, #20]
 80212d8:	4619      	mov	r1, r3
 80212da:	f04f 0c0a 	mov.w	ip, #10
 80212de:	4620      	mov	r0, r4
 80212e0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80212e4:	3a30      	subs	r2, #48	@ 0x30
 80212e6:	2a09      	cmp	r2, #9
 80212e8:	d903      	bls.n	80212f2 <_svfiprintf_r+0x1a6>
 80212ea:	2b00      	cmp	r3, #0
 80212ec:	d0c6      	beq.n	802127c <_svfiprintf_r+0x130>
 80212ee:	9105      	str	r1, [sp, #20]
 80212f0:	e7c4      	b.n	802127c <_svfiprintf_r+0x130>
 80212f2:	fb0c 2101 	mla	r1, ip, r1, r2
 80212f6:	4604      	mov	r4, r0
 80212f8:	2301      	movs	r3, #1
 80212fa:	e7f0      	b.n	80212de <_svfiprintf_r+0x192>
 80212fc:	ab03      	add	r3, sp, #12
 80212fe:	9300      	str	r3, [sp, #0]
 8021300:	462a      	mov	r2, r5
 8021302:	4b0e      	ldr	r3, [pc, #56]	@ (802133c <_svfiprintf_r+0x1f0>)
 8021304:	a904      	add	r1, sp, #16
 8021306:	4638      	mov	r0, r7
 8021308:	f3af 8000 	nop.w
 802130c:	1c42      	adds	r2, r0, #1
 802130e:	4606      	mov	r6, r0
 8021310:	d1d6      	bne.n	80212c0 <_svfiprintf_r+0x174>
 8021312:	89ab      	ldrh	r3, [r5, #12]
 8021314:	065b      	lsls	r3, r3, #25
 8021316:	f53f af2d 	bmi.w	8021174 <_svfiprintf_r+0x28>
 802131a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 802131c:	e72c      	b.n	8021178 <_svfiprintf_r+0x2c>
 802131e:	ab03      	add	r3, sp, #12
 8021320:	9300      	str	r3, [sp, #0]
 8021322:	462a      	mov	r2, r5
 8021324:	4b05      	ldr	r3, [pc, #20]	@ (802133c <_svfiprintf_r+0x1f0>)
 8021326:	a904      	add	r1, sp, #16
 8021328:	4638      	mov	r0, r7
 802132a:	f000 f9bb 	bl	80216a4 <_printf_i>
 802132e:	e7ed      	b.n	802130c <_svfiprintf_r+0x1c0>
 8021330:	08024ba8 	.word	0x08024ba8
 8021334:	08024bb2 	.word	0x08024bb2
 8021338:	00000000 	.word	0x00000000
 802133c:	08021095 	.word	0x08021095
 8021340:	08024bae 	.word	0x08024bae

08021344 <__sfputc_r>:
 8021344:	6893      	ldr	r3, [r2, #8]
 8021346:	3b01      	subs	r3, #1
 8021348:	2b00      	cmp	r3, #0
 802134a:	b410      	push	{r4}
 802134c:	6093      	str	r3, [r2, #8]
 802134e:	da08      	bge.n	8021362 <__sfputc_r+0x1e>
 8021350:	6994      	ldr	r4, [r2, #24]
 8021352:	42a3      	cmp	r3, r4
 8021354:	db01      	blt.n	802135a <__sfputc_r+0x16>
 8021356:	290a      	cmp	r1, #10
 8021358:	d103      	bne.n	8021362 <__sfputc_r+0x1e>
 802135a:	f85d 4b04 	ldr.w	r4, [sp], #4
 802135e:	f7ff bc6e 	b.w	8020c3e <__swbuf_r>
 8021362:	6813      	ldr	r3, [r2, #0]
 8021364:	1c58      	adds	r0, r3, #1
 8021366:	6010      	str	r0, [r2, #0]
 8021368:	7019      	strb	r1, [r3, #0]
 802136a:	4608      	mov	r0, r1
 802136c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8021370:	4770      	bx	lr

08021372 <__sfputs_r>:
 8021372:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021374:	4606      	mov	r6, r0
 8021376:	460f      	mov	r7, r1
 8021378:	4614      	mov	r4, r2
 802137a:	18d5      	adds	r5, r2, r3
 802137c:	42ac      	cmp	r4, r5
 802137e:	d101      	bne.n	8021384 <__sfputs_r+0x12>
 8021380:	2000      	movs	r0, #0
 8021382:	e007      	b.n	8021394 <__sfputs_r+0x22>
 8021384:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021388:	463a      	mov	r2, r7
 802138a:	4630      	mov	r0, r6
 802138c:	f7ff ffda 	bl	8021344 <__sfputc_r>
 8021390:	1c43      	adds	r3, r0, #1
 8021392:	d1f3      	bne.n	802137c <__sfputs_r+0xa>
 8021394:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08021398 <_vfiprintf_r>:
 8021398:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 802139c:	460d      	mov	r5, r1
 802139e:	b09d      	sub	sp, #116	@ 0x74
 80213a0:	4614      	mov	r4, r2
 80213a2:	4698      	mov	r8, r3
 80213a4:	4606      	mov	r6, r0
 80213a6:	b118      	cbz	r0, 80213b0 <_vfiprintf_r+0x18>
 80213a8:	6a03      	ldr	r3, [r0, #32]
 80213aa:	b90b      	cbnz	r3, 80213b0 <_vfiprintf_r+0x18>
 80213ac:	f7ff fb9c 	bl	8020ae8 <__sinit>
 80213b0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80213b2:	07d9      	lsls	r1, r3, #31
 80213b4:	d405      	bmi.n	80213c2 <_vfiprintf_r+0x2a>
 80213b6:	89ab      	ldrh	r3, [r5, #12]
 80213b8:	059a      	lsls	r2, r3, #22
 80213ba:	d402      	bmi.n	80213c2 <_vfiprintf_r+0x2a>
 80213bc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80213be:	f7ff fdb2 	bl	8020f26 <__retarget_lock_acquire_recursive>
 80213c2:	89ab      	ldrh	r3, [r5, #12]
 80213c4:	071b      	lsls	r3, r3, #28
 80213c6:	d501      	bpl.n	80213cc <_vfiprintf_r+0x34>
 80213c8:	692b      	ldr	r3, [r5, #16]
 80213ca:	b99b      	cbnz	r3, 80213f4 <_vfiprintf_r+0x5c>
 80213cc:	4629      	mov	r1, r5
 80213ce:	4630      	mov	r0, r6
 80213d0:	f7ff fc74 	bl	8020cbc <__swsetup_r>
 80213d4:	b170      	cbz	r0, 80213f4 <_vfiprintf_r+0x5c>
 80213d6:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80213d8:	07dc      	lsls	r4, r3, #31
 80213da:	d504      	bpl.n	80213e6 <_vfiprintf_r+0x4e>
 80213dc:	f04f 30ff 	mov.w	r0, #4294967295
 80213e0:	b01d      	add	sp, #116	@ 0x74
 80213e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80213e6:	89ab      	ldrh	r3, [r5, #12]
 80213e8:	0598      	lsls	r0, r3, #22
 80213ea:	d4f7      	bmi.n	80213dc <_vfiprintf_r+0x44>
 80213ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80213ee:	f7ff fd9b 	bl	8020f28 <__retarget_lock_release_recursive>
 80213f2:	e7f3      	b.n	80213dc <_vfiprintf_r+0x44>
 80213f4:	2300      	movs	r3, #0
 80213f6:	9309      	str	r3, [sp, #36]	@ 0x24
 80213f8:	2320      	movs	r3, #32
 80213fa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80213fe:	f8cd 800c 	str.w	r8, [sp, #12]
 8021402:	2330      	movs	r3, #48	@ 0x30
 8021404:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80215b4 <_vfiprintf_r+0x21c>
 8021408:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 802140c:	f04f 0901 	mov.w	r9, #1
 8021410:	4623      	mov	r3, r4
 8021412:	469a      	mov	sl, r3
 8021414:	f813 2b01 	ldrb.w	r2, [r3], #1
 8021418:	b10a      	cbz	r2, 802141e <_vfiprintf_r+0x86>
 802141a:	2a25      	cmp	r2, #37	@ 0x25
 802141c:	d1f9      	bne.n	8021412 <_vfiprintf_r+0x7a>
 802141e:	ebba 0b04 	subs.w	fp, sl, r4
 8021422:	d00b      	beq.n	802143c <_vfiprintf_r+0xa4>
 8021424:	465b      	mov	r3, fp
 8021426:	4622      	mov	r2, r4
 8021428:	4629      	mov	r1, r5
 802142a:	4630      	mov	r0, r6
 802142c:	f7ff ffa1 	bl	8021372 <__sfputs_r>
 8021430:	3001      	adds	r0, #1
 8021432:	f000 80a7 	beq.w	8021584 <_vfiprintf_r+0x1ec>
 8021436:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8021438:	445a      	add	r2, fp
 802143a:	9209      	str	r2, [sp, #36]	@ 0x24
 802143c:	f89a 3000 	ldrb.w	r3, [sl]
 8021440:	2b00      	cmp	r3, #0
 8021442:	f000 809f 	beq.w	8021584 <_vfiprintf_r+0x1ec>
 8021446:	2300      	movs	r3, #0
 8021448:	f04f 32ff 	mov.w	r2, #4294967295
 802144c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8021450:	f10a 0a01 	add.w	sl, sl, #1
 8021454:	9304      	str	r3, [sp, #16]
 8021456:	9307      	str	r3, [sp, #28]
 8021458:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 802145c:	931a      	str	r3, [sp, #104]	@ 0x68
 802145e:	4654      	mov	r4, sl
 8021460:	2205      	movs	r2, #5
 8021462:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021466:	4853      	ldr	r0, [pc, #332]	@ (80215b4 <_vfiprintf_r+0x21c>)
 8021468:	f7de ff42 	bl	80002f0 <memchr>
 802146c:	9a04      	ldr	r2, [sp, #16]
 802146e:	b9d8      	cbnz	r0, 80214a8 <_vfiprintf_r+0x110>
 8021470:	06d1      	lsls	r1, r2, #27
 8021472:	bf44      	itt	mi
 8021474:	2320      	movmi	r3, #32
 8021476:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802147a:	0713      	lsls	r3, r2, #28
 802147c:	bf44      	itt	mi
 802147e:	232b      	movmi	r3, #43	@ 0x2b
 8021480:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8021484:	f89a 3000 	ldrb.w	r3, [sl]
 8021488:	2b2a      	cmp	r3, #42	@ 0x2a
 802148a:	d015      	beq.n	80214b8 <_vfiprintf_r+0x120>
 802148c:	9a07      	ldr	r2, [sp, #28]
 802148e:	4654      	mov	r4, sl
 8021490:	2000      	movs	r0, #0
 8021492:	f04f 0c0a 	mov.w	ip, #10
 8021496:	4621      	mov	r1, r4
 8021498:	f811 3b01 	ldrb.w	r3, [r1], #1
 802149c:	3b30      	subs	r3, #48	@ 0x30
 802149e:	2b09      	cmp	r3, #9
 80214a0:	d94b      	bls.n	802153a <_vfiprintf_r+0x1a2>
 80214a2:	b1b0      	cbz	r0, 80214d2 <_vfiprintf_r+0x13a>
 80214a4:	9207      	str	r2, [sp, #28]
 80214a6:	e014      	b.n	80214d2 <_vfiprintf_r+0x13a>
 80214a8:	eba0 0308 	sub.w	r3, r0, r8
 80214ac:	fa09 f303 	lsl.w	r3, r9, r3
 80214b0:	4313      	orrs	r3, r2
 80214b2:	9304      	str	r3, [sp, #16]
 80214b4:	46a2      	mov	sl, r4
 80214b6:	e7d2      	b.n	802145e <_vfiprintf_r+0xc6>
 80214b8:	9b03      	ldr	r3, [sp, #12]
 80214ba:	1d19      	adds	r1, r3, #4
 80214bc:	681b      	ldr	r3, [r3, #0]
 80214be:	9103      	str	r1, [sp, #12]
 80214c0:	2b00      	cmp	r3, #0
 80214c2:	bfbb      	ittet	lt
 80214c4:	425b      	neglt	r3, r3
 80214c6:	f042 0202 	orrlt.w	r2, r2, #2
 80214ca:	9307      	strge	r3, [sp, #28]
 80214cc:	9307      	strlt	r3, [sp, #28]
 80214ce:	bfb8      	it	lt
 80214d0:	9204      	strlt	r2, [sp, #16]
 80214d2:	7823      	ldrb	r3, [r4, #0]
 80214d4:	2b2e      	cmp	r3, #46	@ 0x2e
 80214d6:	d10a      	bne.n	80214ee <_vfiprintf_r+0x156>
 80214d8:	7863      	ldrb	r3, [r4, #1]
 80214da:	2b2a      	cmp	r3, #42	@ 0x2a
 80214dc:	d132      	bne.n	8021544 <_vfiprintf_r+0x1ac>
 80214de:	9b03      	ldr	r3, [sp, #12]
 80214e0:	1d1a      	adds	r2, r3, #4
 80214e2:	681b      	ldr	r3, [r3, #0]
 80214e4:	9203      	str	r2, [sp, #12]
 80214e6:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80214ea:	3402      	adds	r4, #2
 80214ec:	9305      	str	r3, [sp, #20]
 80214ee:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80215c4 <_vfiprintf_r+0x22c>
 80214f2:	7821      	ldrb	r1, [r4, #0]
 80214f4:	2203      	movs	r2, #3
 80214f6:	4650      	mov	r0, sl
 80214f8:	f7de fefa 	bl	80002f0 <memchr>
 80214fc:	b138      	cbz	r0, 802150e <_vfiprintf_r+0x176>
 80214fe:	9b04      	ldr	r3, [sp, #16]
 8021500:	eba0 000a 	sub.w	r0, r0, sl
 8021504:	2240      	movs	r2, #64	@ 0x40
 8021506:	4082      	lsls	r2, r0
 8021508:	4313      	orrs	r3, r2
 802150a:	3401      	adds	r4, #1
 802150c:	9304      	str	r3, [sp, #16]
 802150e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8021512:	4829      	ldr	r0, [pc, #164]	@ (80215b8 <_vfiprintf_r+0x220>)
 8021514:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8021518:	2206      	movs	r2, #6
 802151a:	f7de fee9 	bl	80002f0 <memchr>
 802151e:	2800      	cmp	r0, #0
 8021520:	d03f      	beq.n	80215a2 <_vfiprintf_r+0x20a>
 8021522:	4b26      	ldr	r3, [pc, #152]	@ (80215bc <_vfiprintf_r+0x224>)
 8021524:	bb1b      	cbnz	r3, 802156e <_vfiprintf_r+0x1d6>
 8021526:	9b03      	ldr	r3, [sp, #12]
 8021528:	3307      	adds	r3, #7
 802152a:	f023 0307 	bic.w	r3, r3, #7
 802152e:	3308      	adds	r3, #8
 8021530:	9303      	str	r3, [sp, #12]
 8021532:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8021534:	443b      	add	r3, r7
 8021536:	9309      	str	r3, [sp, #36]	@ 0x24
 8021538:	e76a      	b.n	8021410 <_vfiprintf_r+0x78>
 802153a:	fb0c 3202 	mla	r2, ip, r2, r3
 802153e:	460c      	mov	r4, r1
 8021540:	2001      	movs	r0, #1
 8021542:	e7a8      	b.n	8021496 <_vfiprintf_r+0xfe>
 8021544:	2300      	movs	r3, #0
 8021546:	3401      	adds	r4, #1
 8021548:	9305      	str	r3, [sp, #20]
 802154a:	4619      	mov	r1, r3
 802154c:	f04f 0c0a 	mov.w	ip, #10
 8021550:	4620      	mov	r0, r4
 8021552:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021556:	3a30      	subs	r2, #48	@ 0x30
 8021558:	2a09      	cmp	r2, #9
 802155a:	d903      	bls.n	8021564 <_vfiprintf_r+0x1cc>
 802155c:	2b00      	cmp	r3, #0
 802155e:	d0c6      	beq.n	80214ee <_vfiprintf_r+0x156>
 8021560:	9105      	str	r1, [sp, #20]
 8021562:	e7c4      	b.n	80214ee <_vfiprintf_r+0x156>
 8021564:	fb0c 2101 	mla	r1, ip, r1, r2
 8021568:	4604      	mov	r4, r0
 802156a:	2301      	movs	r3, #1
 802156c:	e7f0      	b.n	8021550 <_vfiprintf_r+0x1b8>
 802156e:	ab03      	add	r3, sp, #12
 8021570:	9300      	str	r3, [sp, #0]
 8021572:	462a      	mov	r2, r5
 8021574:	4b12      	ldr	r3, [pc, #72]	@ (80215c0 <_vfiprintf_r+0x228>)
 8021576:	a904      	add	r1, sp, #16
 8021578:	4630      	mov	r0, r6
 802157a:	f3af 8000 	nop.w
 802157e:	4607      	mov	r7, r0
 8021580:	1c78      	adds	r0, r7, #1
 8021582:	d1d6      	bne.n	8021532 <_vfiprintf_r+0x19a>
 8021584:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8021586:	07d9      	lsls	r1, r3, #31
 8021588:	d405      	bmi.n	8021596 <_vfiprintf_r+0x1fe>
 802158a:	89ab      	ldrh	r3, [r5, #12]
 802158c:	059a      	lsls	r2, r3, #22
 802158e:	d402      	bmi.n	8021596 <_vfiprintf_r+0x1fe>
 8021590:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8021592:	f7ff fcc9 	bl	8020f28 <__retarget_lock_release_recursive>
 8021596:	89ab      	ldrh	r3, [r5, #12]
 8021598:	065b      	lsls	r3, r3, #25
 802159a:	f53f af1f 	bmi.w	80213dc <_vfiprintf_r+0x44>
 802159e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80215a0:	e71e      	b.n	80213e0 <_vfiprintf_r+0x48>
 80215a2:	ab03      	add	r3, sp, #12
 80215a4:	9300      	str	r3, [sp, #0]
 80215a6:	462a      	mov	r2, r5
 80215a8:	4b05      	ldr	r3, [pc, #20]	@ (80215c0 <_vfiprintf_r+0x228>)
 80215aa:	a904      	add	r1, sp, #16
 80215ac:	4630      	mov	r0, r6
 80215ae:	f000 f879 	bl	80216a4 <_printf_i>
 80215b2:	e7e4      	b.n	802157e <_vfiprintf_r+0x1e6>
 80215b4:	08024ba8 	.word	0x08024ba8
 80215b8:	08024bb2 	.word	0x08024bb2
 80215bc:	00000000 	.word	0x00000000
 80215c0:	08021373 	.word	0x08021373
 80215c4:	08024bae 	.word	0x08024bae

080215c8 <_printf_common>:
 80215c8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80215cc:	4616      	mov	r6, r2
 80215ce:	4698      	mov	r8, r3
 80215d0:	688a      	ldr	r2, [r1, #8]
 80215d2:	690b      	ldr	r3, [r1, #16]
 80215d4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80215d8:	4293      	cmp	r3, r2
 80215da:	bfb8      	it	lt
 80215dc:	4613      	movlt	r3, r2
 80215de:	6033      	str	r3, [r6, #0]
 80215e0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80215e4:	4607      	mov	r7, r0
 80215e6:	460c      	mov	r4, r1
 80215e8:	b10a      	cbz	r2, 80215ee <_printf_common+0x26>
 80215ea:	3301      	adds	r3, #1
 80215ec:	6033      	str	r3, [r6, #0]
 80215ee:	6823      	ldr	r3, [r4, #0]
 80215f0:	0699      	lsls	r1, r3, #26
 80215f2:	bf42      	ittt	mi
 80215f4:	6833      	ldrmi	r3, [r6, #0]
 80215f6:	3302      	addmi	r3, #2
 80215f8:	6033      	strmi	r3, [r6, #0]
 80215fa:	6825      	ldr	r5, [r4, #0]
 80215fc:	f015 0506 	ands.w	r5, r5, #6
 8021600:	d106      	bne.n	8021610 <_printf_common+0x48>
 8021602:	f104 0a19 	add.w	sl, r4, #25
 8021606:	68e3      	ldr	r3, [r4, #12]
 8021608:	6832      	ldr	r2, [r6, #0]
 802160a:	1a9b      	subs	r3, r3, r2
 802160c:	42ab      	cmp	r3, r5
 802160e:	dc26      	bgt.n	802165e <_printf_common+0x96>
 8021610:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8021614:	6822      	ldr	r2, [r4, #0]
 8021616:	3b00      	subs	r3, #0
 8021618:	bf18      	it	ne
 802161a:	2301      	movne	r3, #1
 802161c:	0692      	lsls	r2, r2, #26
 802161e:	d42b      	bmi.n	8021678 <_printf_common+0xb0>
 8021620:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8021624:	4641      	mov	r1, r8
 8021626:	4638      	mov	r0, r7
 8021628:	47c8      	blx	r9
 802162a:	3001      	adds	r0, #1
 802162c:	d01e      	beq.n	802166c <_printf_common+0xa4>
 802162e:	6823      	ldr	r3, [r4, #0]
 8021630:	6922      	ldr	r2, [r4, #16]
 8021632:	f003 0306 	and.w	r3, r3, #6
 8021636:	2b04      	cmp	r3, #4
 8021638:	bf02      	ittt	eq
 802163a:	68e5      	ldreq	r5, [r4, #12]
 802163c:	6833      	ldreq	r3, [r6, #0]
 802163e:	1aed      	subeq	r5, r5, r3
 8021640:	68a3      	ldr	r3, [r4, #8]
 8021642:	bf0c      	ite	eq
 8021644:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8021648:	2500      	movne	r5, #0
 802164a:	4293      	cmp	r3, r2
 802164c:	bfc4      	itt	gt
 802164e:	1a9b      	subgt	r3, r3, r2
 8021650:	18ed      	addgt	r5, r5, r3
 8021652:	2600      	movs	r6, #0
 8021654:	341a      	adds	r4, #26
 8021656:	42b5      	cmp	r5, r6
 8021658:	d11a      	bne.n	8021690 <_printf_common+0xc8>
 802165a:	2000      	movs	r0, #0
 802165c:	e008      	b.n	8021670 <_printf_common+0xa8>
 802165e:	2301      	movs	r3, #1
 8021660:	4652      	mov	r2, sl
 8021662:	4641      	mov	r1, r8
 8021664:	4638      	mov	r0, r7
 8021666:	47c8      	blx	r9
 8021668:	3001      	adds	r0, #1
 802166a:	d103      	bne.n	8021674 <_printf_common+0xac>
 802166c:	f04f 30ff 	mov.w	r0, #4294967295
 8021670:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8021674:	3501      	adds	r5, #1
 8021676:	e7c6      	b.n	8021606 <_printf_common+0x3e>
 8021678:	18e1      	adds	r1, r4, r3
 802167a:	1c5a      	adds	r2, r3, #1
 802167c:	2030      	movs	r0, #48	@ 0x30
 802167e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8021682:	4422      	add	r2, r4
 8021684:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8021688:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 802168c:	3302      	adds	r3, #2
 802168e:	e7c7      	b.n	8021620 <_printf_common+0x58>
 8021690:	2301      	movs	r3, #1
 8021692:	4622      	mov	r2, r4
 8021694:	4641      	mov	r1, r8
 8021696:	4638      	mov	r0, r7
 8021698:	47c8      	blx	r9
 802169a:	3001      	adds	r0, #1
 802169c:	d0e6      	beq.n	802166c <_printf_common+0xa4>
 802169e:	3601      	adds	r6, #1
 80216a0:	e7d9      	b.n	8021656 <_printf_common+0x8e>
	...

080216a4 <_printf_i>:
 80216a4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80216a8:	7e0f      	ldrb	r7, [r1, #24]
 80216aa:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80216ac:	2f78      	cmp	r7, #120	@ 0x78
 80216ae:	4691      	mov	r9, r2
 80216b0:	4680      	mov	r8, r0
 80216b2:	460c      	mov	r4, r1
 80216b4:	469a      	mov	sl, r3
 80216b6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80216ba:	d807      	bhi.n	80216cc <_printf_i+0x28>
 80216bc:	2f62      	cmp	r7, #98	@ 0x62
 80216be:	d80a      	bhi.n	80216d6 <_printf_i+0x32>
 80216c0:	2f00      	cmp	r7, #0
 80216c2:	f000 80d2 	beq.w	802186a <_printf_i+0x1c6>
 80216c6:	2f58      	cmp	r7, #88	@ 0x58
 80216c8:	f000 80b9 	beq.w	802183e <_printf_i+0x19a>
 80216cc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80216d0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80216d4:	e03a      	b.n	802174c <_printf_i+0xa8>
 80216d6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80216da:	2b15      	cmp	r3, #21
 80216dc:	d8f6      	bhi.n	80216cc <_printf_i+0x28>
 80216de:	a101      	add	r1, pc, #4	@ (adr r1, 80216e4 <_printf_i+0x40>)
 80216e0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80216e4:	0802173d 	.word	0x0802173d
 80216e8:	08021751 	.word	0x08021751
 80216ec:	080216cd 	.word	0x080216cd
 80216f0:	080216cd 	.word	0x080216cd
 80216f4:	080216cd 	.word	0x080216cd
 80216f8:	080216cd 	.word	0x080216cd
 80216fc:	08021751 	.word	0x08021751
 8021700:	080216cd 	.word	0x080216cd
 8021704:	080216cd 	.word	0x080216cd
 8021708:	080216cd 	.word	0x080216cd
 802170c:	080216cd 	.word	0x080216cd
 8021710:	08021851 	.word	0x08021851
 8021714:	0802177b 	.word	0x0802177b
 8021718:	0802180b 	.word	0x0802180b
 802171c:	080216cd 	.word	0x080216cd
 8021720:	080216cd 	.word	0x080216cd
 8021724:	08021873 	.word	0x08021873
 8021728:	080216cd 	.word	0x080216cd
 802172c:	0802177b 	.word	0x0802177b
 8021730:	080216cd 	.word	0x080216cd
 8021734:	080216cd 	.word	0x080216cd
 8021738:	08021813 	.word	0x08021813
 802173c:	6833      	ldr	r3, [r6, #0]
 802173e:	1d1a      	adds	r2, r3, #4
 8021740:	681b      	ldr	r3, [r3, #0]
 8021742:	6032      	str	r2, [r6, #0]
 8021744:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8021748:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 802174c:	2301      	movs	r3, #1
 802174e:	e09d      	b.n	802188c <_printf_i+0x1e8>
 8021750:	6833      	ldr	r3, [r6, #0]
 8021752:	6820      	ldr	r0, [r4, #0]
 8021754:	1d19      	adds	r1, r3, #4
 8021756:	6031      	str	r1, [r6, #0]
 8021758:	0606      	lsls	r6, r0, #24
 802175a:	d501      	bpl.n	8021760 <_printf_i+0xbc>
 802175c:	681d      	ldr	r5, [r3, #0]
 802175e:	e003      	b.n	8021768 <_printf_i+0xc4>
 8021760:	0645      	lsls	r5, r0, #25
 8021762:	d5fb      	bpl.n	802175c <_printf_i+0xb8>
 8021764:	f9b3 5000 	ldrsh.w	r5, [r3]
 8021768:	2d00      	cmp	r5, #0
 802176a:	da03      	bge.n	8021774 <_printf_i+0xd0>
 802176c:	232d      	movs	r3, #45	@ 0x2d
 802176e:	426d      	negs	r5, r5
 8021770:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021774:	4859      	ldr	r0, [pc, #356]	@ (80218dc <_printf_i+0x238>)
 8021776:	230a      	movs	r3, #10
 8021778:	e011      	b.n	802179e <_printf_i+0xfa>
 802177a:	6821      	ldr	r1, [r4, #0]
 802177c:	6833      	ldr	r3, [r6, #0]
 802177e:	0608      	lsls	r0, r1, #24
 8021780:	f853 5b04 	ldr.w	r5, [r3], #4
 8021784:	d402      	bmi.n	802178c <_printf_i+0xe8>
 8021786:	0649      	lsls	r1, r1, #25
 8021788:	bf48      	it	mi
 802178a:	b2ad      	uxthmi	r5, r5
 802178c:	2f6f      	cmp	r7, #111	@ 0x6f
 802178e:	4853      	ldr	r0, [pc, #332]	@ (80218dc <_printf_i+0x238>)
 8021790:	6033      	str	r3, [r6, #0]
 8021792:	bf14      	ite	ne
 8021794:	230a      	movne	r3, #10
 8021796:	2308      	moveq	r3, #8
 8021798:	2100      	movs	r1, #0
 802179a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 802179e:	6866      	ldr	r6, [r4, #4]
 80217a0:	60a6      	str	r6, [r4, #8]
 80217a2:	2e00      	cmp	r6, #0
 80217a4:	bfa2      	ittt	ge
 80217a6:	6821      	ldrge	r1, [r4, #0]
 80217a8:	f021 0104 	bicge.w	r1, r1, #4
 80217ac:	6021      	strge	r1, [r4, #0]
 80217ae:	b90d      	cbnz	r5, 80217b4 <_printf_i+0x110>
 80217b0:	2e00      	cmp	r6, #0
 80217b2:	d04b      	beq.n	802184c <_printf_i+0x1a8>
 80217b4:	4616      	mov	r6, r2
 80217b6:	fbb5 f1f3 	udiv	r1, r5, r3
 80217ba:	fb03 5711 	mls	r7, r3, r1, r5
 80217be:	5dc7      	ldrb	r7, [r0, r7]
 80217c0:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80217c4:	462f      	mov	r7, r5
 80217c6:	42bb      	cmp	r3, r7
 80217c8:	460d      	mov	r5, r1
 80217ca:	d9f4      	bls.n	80217b6 <_printf_i+0x112>
 80217cc:	2b08      	cmp	r3, #8
 80217ce:	d10b      	bne.n	80217e8 <_printf_i+0x144>
 80217d0:	6823      	ldr	r3, [r4, #0]
 80217d2:	07df      	lsls	r7, r3, #31
 80217d4:	d508      	bpl.n	80217e8 <_printf_i+0x144>
 80217d6:	6923      	ldr	r3, [r4, #16]
 80217d8:	6861      	ldr	r1, [r4, #4]
 80217da:	4299      	cmp	r1, r3
 80217dc:	bfde      	ittt	le
 80217de:	2330      	movle	r3, #48	@ 0x30
 80217e0:	f806 3c01 	strble.w	r3, [r6, #-1]
 80217e4:	f106 36ff 	addle.w	r6, r6, #4294967295
 80217e8:	1b92      	subs	r2, r2, r6
 80217ea:	6122      	str	r2, [r4, #16]
 80217ec:	f8cd a000 	str.w	sl, [sp]
 80217f0:	464b      	mov	r3, r9
 80217f2:	aa03      	add	r2, sp, #12
 80217f4:	4621      	mov	r1, r4
 80217f6:	4640      	mov	r0, r8
 80217f8:	f7ff fee6 	bl	80215c8 <_printf_common>
 80217fc:	3001      	adds	r0, #1
 80217fe:	d14a      	bne.n	8021896 <_printf_i+0x1f2>
 8021800:	f04f 30ff 	mov.w	r0, #4294967295
 8021804:	b004      	add	sp, #16
 8021806:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 802180a:	6823      	ldr	r3, [r4, #0]
 802180c:	f043 0320 	orr.w	r3, r3, #32
 8021810:	6023      	str	r3, [r4, #0]
 8021812:	4833      	ldr	r0, [pc, #204]	@ (80218e0 <_printf_i+0x23c>)
 8021814:	2778      	movs	r7, #120	@ 0x78
 8021816:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 802181a:	6823      	ldr	r3, [r4, #0]
 802181c:	6831      	ldr	r1, [r6, #0]
 802181e:	061f      	lsls	r7, r3, #24
 8021820:	f851 5b04 	ldr.w	r5, [r1], #4
 8021824:	d402      	bmi.n	802182c <_printf_i+0x188>
 8021826:	065f      	lsls	r7, r3, #25
 8021828:	bf48      	it	mi
 802182a:	b2ad      	uxthmi	r5, r5
 802182c:	6031      	str	r1, [r6, #0]
 802182e:	07d9      	lsls	r1, r3, #31
 8021830:	bf44      	itt	mi
 8021832:	f043 0320 	orrmi.w	r3, r3, #32
 8021836:	6023      	strmi	r3, [r4, #0]
 8021838:	b11d      	cbz	r5, 8021842 <_printf_i+0x19e>
 802183a:	2310      	movs	r3, #16
 802183c:	e7ac      	b.n	8021798 <_printf_i+0xf4>
 802183e:	4827      	ldr	r0, [pc, #156]	@ (80218dc <_printf_i+0x238>)
 8021840:	e7e9      	b.n	8021816 <_printf_i+0x172>
 8021842:	6823      	ldr	r3, [r4, #0]
 8021844:	f023 0320 	bic.w	r3, r3, #32
 8021848:	6023      	str	r3, [r4, #0]
 802184a:	e7f6      	b.n	802183a <_printf_i+0x196>
 802184c:	4616      	mov	r6, r2
 802184e:	e7bd      	b.n	80217cc <_printf_i+0x128>
 8021850:	6833      	ldr	r3, [r6, #0]
 8021852:	6825      	ldr	r5, [r4, #0]
 8021854:	6961      	ldr	r1, [r4, #20]
 8021856:	1d18      	adds	r0, r3, #4
 8021858:	6030      	str	r0, [r6, #0]
 802185a:	062e      	lsls	r6, r5, #24
 802185c:	681b      	ldr	r3, [r3, #0]
 802185e:	d501      	bpl.n	8021864 <_printf_i+0x1c0>
 8021860:	6019      	str	r1, [r3, #0]
 8021862:	e002      	b.n	802186a <_printf_i+0x1c6>
 8021864:	0668      	lsls	r0, r5, #25
 8021866:	d5fb      	bpl.n	8021860 <_printf_i+0x1bc>
 8021868:	8019      	strh	r1, [r3, #0]
 802186a:	2300      	movs	r3, #0
 802186c:	6123      	str	r3, [r4, #16]
 802186e:	4616      	mov	r6, r2
 8021870:	e7bc      	b.n	80217ec <_printf_i+0x148>
 8021872:	6833      	ldr	r3, [r6, #0]
 8021874:	1d1a      	adds	r2, r3, #4
 8021876:	6032      	str	r2, [r6, #0]
 8021878:	681e      	ldr	r6, [r3, #0]
 802187a:	6862      	ldr	r2, [r4, #4]
 802187c:	2100      	movs	r1, #0
 802187e:	4630      	mov	r0, r6
 8021880:	f7de fd36 	bl	80002f0 <memchr>
 8021884:	b108      	cbz	r0, 802188a <_printf_i+0x1e6>
 8021886:	1b80      	subs	r0, r0, r6
 8021888:	6060      	str	r0, [r4, #4]
 802188a:	6863      	ldr	r3, [r4, #4]
 802188c:	6123      	str	r3, [r4, #16]
 802188e:	2300      	movs	r3, #0
 8021890:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8021894:	e7aa      	b.n	80217ec <_printf_i+0x148>
 8021896:	6923      	ldr	r3, [r4, #16]
 8021898:	4632      	mov	r2, r6
 802189a:	4649      	mov	r1, r9
 802189c:	4640      	mov	r0, r8
 802189e:	47d0      	blx	sl
 80218a0:	3001      	adds	r0, #1
 80218a2:	d0ad      	beq.n	8021800 <_printf_i+0x15c>
 80218a4:	6823      	ldr	r3, [r4, #0]
 80218a6:	079b      	lsls	r3, r3, #30
 80218a8:	d413      	bmi.n	80218d2 <_printf_i+0x22e>
 80218aa:	68e0      	ldr	r0, [r4, #12]
 80218ac:	9b03      	ldr	r3, [sp, #12]
 80218ae:	4298      	cmp	r0, r3
 80218b0:	bfb8      	it	lt
 80218b2:	4618      	movlt	r0, r3
 80218b4:	e7a6      	b.n	8021804 <_printf_i+0x160>
 80218b6:	2301      	movs	r3, #1
 80218b8:	4632      	mov	r2, r6
 80218ba:	4649      	mov	r1, r9
 80218bc:	4640      	mov	r0, r8
 80218be:	47d0      	blx	sl
 80218c0:	3001      	adds	r0, #1
 80218c2:	d09d      	beq.n	8021800 <_printf_i+0x15c>
 80218c4:	3501      	adds	r5, #1
 80218c6:	68e3      	ldr	r3, [r4, #12]
 80218c8:	9903      	ldr	r1, [sp, #12]
 80218ca:	1a5b      	subs	r3, r3, r1
 80218cc:	42ab      	cmp	r3, r5
 80218ce:	dcf2      	bgt.n	80218b6 <_printf_i+0x212>
 80218d0:	e7eb      	b.n	80218aa <_printf_i+0x206>
 80218d2:	2500      	movs	r5, #0
 80218d4:	f104 0619 	add.w	r6, r4, #25
 80218d8:	e7f5      	b.n	80218c6 <_printf_i+0x222>
 80218da:	bf00      	nop
 80218dc:	08024bb9 	.word	0x08024bb9
 80218e0:	08024bca 	.word	0x08024bca

080218e4 <__sflush_r>:
 80218e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80218e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80218ec:	0716      	lsls	r6, r2, #28
 80218ee:	4605      	mov	r5, r0
 80218f0:	460c      	mov	r4, r1
 80218f2:	d454      	bmi.n	802199e <__sflush_r+0xba>
 80218f4:	684b      	ldr	r3, [r1, #4]
 80218f6:	2b00      	cmp	r3, #0
 80218f8:	dc02      	bgt.n	8021900 <__sflush_r+0x1c>
 80218fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80218fc:	2b00      	cmp	r3, #0
 80218fe:	dd48      	ble.n	8021992 <__sflush_r+0xae>
 8021900:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8021902:	2e00      	cmp	r6, #0
 8021904:	d045      	beq.n	8021992 <__sflush_r+0xae>
 8021906:	2300      	movs	r3, #0
 8021908:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 802190c:	682f      	ldr	r7, [r5, #0]
 802190e:	6a21      	ldr	r1, [r4, #32]
 8021910:	602b      	str	r3, [r5, #0]
 8021912:	d030      	beq.n	8021976 <__sflush_r+0x92>
 8021914:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8021916:	89a3      	ldrh	r3, [r4, #12]
 8021918:	0759      	lsls	r1, r3, #29
 802191a:	d505      	bpl.n	8021928 <__sflush_r+0x44>
 802191c:	6863      	ldr	r3, [r4, #4]
 802191e:	1ad2      	subs	r2, r2, r3
 8021920:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8021922:	b10b      	cbz	r3, 8021928 <__sflush_r+0x44>
 8021924:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8021926:	1ad2      	subs	r2, r2, r3
 8021928:	2300      	movs	r3, #0
 802192a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 802192c:	6a21      	ldr	r1, [r4, #32]
 802192e:	4628      	mov	r0, r5
 8021930:	47b0      	blx	r6
 8021932:	1c43      	adds	r3, r0, #1
 8021934:	89a3      	ldrh	r3, [r4, #12]
 8021936:	d106      	bne.n	8021946 <__sflush_r+0x62>
 8021938:	6829      	ldr	r1, [r5, #0]
 802193a:	291d      	cmp	r1, #29
 802193c:	d82b      	bhi.n	8021996 <__sflush_r+0xb2>
 802193e:	4a2a      	ldr	r2, [pc, #168]	@ (80219e8 <__sflush_r+0x104>)
 8021940:	410a      	asrs	r2, r1
 8021942:	07d6      	lsls	r6, r2, #31
 8021944:	d427      	bmi.n	8021996 <__sflush_r+0xb2>
 8021946:	2200      	movs	r2, #0
 8021948:	6062      	str	r2, [r4, #4]
 802194a:	04d9      	lsls	r1, r3, #19
 802194c:	6922      	ldr	r2, [r4, #16]
 802194e:	6022      	str	r2, [r4, #0]
 8021950:	d504      	bpl.n	802195c <__sflush_r+0x78>
 8021952:	1c42      	adds	r2, r0, #1
 8021954:	d101      	bne.n	802195a <__sflush_r+0x76>
 8021956:	682b      	ldr	r3, [r5, #0]
 8021958:	b903      	cbnz	r3, 802195c <__sflush_r+0x78>
 802195a:	6560      	str	r0, [r4, #84]	@ 0x54
 802195c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 802195e:	602f      	str	r7, [r5, #0]
 8021960:	b1b9      	cbz	r1, 8021992 <__sflush_r+0xae>
 8021962:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021966:	4299      	cmp	r1, r3
 8021968:	d002      	beq.n	8021970 <__sflush_r+0x8c>
 802196a:	4628      	mov	r0, r5
 802196c:	f7ff fb48 	bl	8021000 <_free_r>
 8021970:	2300      	movs	r3, #0
 8021972:	6363      	str	r3, [r4, #52]	@ 0x34
 8021974:	e00d      	b.n	8021992 <__sflush_r+0xae>
 8021976:	2301      	movs	r3, #1
 8021978:	4628      	mov	r0, r5
 802197a:	47b0      	blx	r6
 802197c:	4602      	mov	r2, r0
 802197e:	1c50      	adds	r0, r2, #1
 8021980:	d1c9      	bne.n	8021916 <__sflush_r+0x32>
 8021982:	682b      	ldr	r3, [r5, #0]
 8021984:	2b00      	cmp	r3, #0
 8021986:	d0c6      	beq.n	8021916 <__sflush_r+0x32>
 8021988:	2b1d      	cmp	r3, #29
 802198a:	d001      	beq.n	8021990 <__sflush_r+0xac>
 802198c:	2b16      	cmp	r3, #22
 802198e:	d11e      	bne.n	80219ce <__sflush_r+0xea>
 8021990:	602f      	str	r7, [r5, #0]
 8021992:	2000      	movs	r0, #0
 8021994:	e022      	b.n	80219dc <__sflush_r+0xf8>
 8021996:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802199a:	b21b      	sxth	r3, r3
 802199c:	e01b      	b.n	80219d6 <__sflush_r+0xf2>
 802199e:	690f      	ldr	r7, [r1, #16]
 80219a0:	2f00      	cmp	r7, #0
 80219a2:	d0f6      	beq.n	8021992 <__sflush_r+0xae>
 80219a4:	0793      	lsls	r3, r2, #30
 80219a6:	680e      	ldr	r6, [r1, #0]
 80219a8:	bf08      	it	eq
 80219aa:	694b      	ldreq	r3, [r1, #20]
 80219ac:	600f      	str	r7, [r1, #0]
 80219ae:	bf18      	it	ne
 80219b0:	2300      	movne	r3, #0
 80219b2:	eba6 0807 	sub.w	r8, r6, r7
 80219b6:	608b      	str	r3, [r1, #8]
 80219b8:	f1b8 0f00 	cmp.w	r8, #0
 80219bc:	dde9      	ble.n	8021992 <__sflush_r+0xae>
 80219be:	6a21      	ldr	r1, [r4, #32]
 80219c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80219c2:	4643      	mov	r3, r8
 80219c4:	463a      	mov	r2, r7
 80219c6:	4628      	mov	r0, r5
 80219c8:	47b0      	blx	r6
 80219ca:	2800      	cmp	r0, #0
 80219cc:	dc08      	bgt.n	80219e0 <__sflush_r+0xfc>
 80219ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80219d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80219d6:	81a3      	strh	r3, [r4, #12]
 80219d8:	f04f 30ff 	mov.w	r0, #4294967295
 80219dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80219e0:	4407      	add	r7, r0
 80219e2:	eba8 0800 	sub.w	r8, r8, r0
 80219e6:	e7e7      	b.n	80219b8 <__sflush_r+0xd4>
 80219e8:	dfbffffe 	.word	0xdfbffffe

080219ec <_fflush_r>:
 80219ec:	b538      	push	{r3, r4, r5, lr}
 80219ee:	690b      	ldr	r3, [r1, #16]
 80219f0:	4605      	mov	r5, r0
 80219f2:	460c      	mov	r4, r1
 80219f4:	b913      	cbnz	r3, 80219fc <_fflush_r+0x10>
 80219f6:	2500      	movs	r5, #0
 80219f8:	4628      	mov	r0, r5
 80219fa:	bd38      	pop	{r3, r4, r5, pc}
 80219fc:	b118      	cbz	r0, 8021a06 <_fflush_r+0x1a>
 80219fe:	6a03      	ldr	r3, [r0, #32]
 8021a00:	b90b      	cbnz	r3, 8021a06 <_fflush_r+0x1a>
 8021a02:	f7ff f871 	bl	8020ae8 <__sinit>
 8021a06:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021a0a:	2b00      	cmp	r3, #0
 8021a0c:	d0f3      	beq.n	80219f6 <_fflush_r+0xa>
 8021a0e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8021a10:	07d0      	lsls	r0, r2, #31
 8021a12:	d404      	bmi.n	8021a1e <_fflush_r+0x32>
 8021a14:	0599      	lsls	r1, r3, #22
 8021a16:	d402      	bmi.n	8021a1e <_fflush_r+0x32>
 8021a18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021a1a:	f7ff fa84 	bl	8020f26 <__retarget_lock_acquire_recursive>
 8021a1e:	4628      	mov	r0, r5
 8021a20:	4621      	mov	r1, r4
 8021a22:	f7ff ff5f 	bl	80218e4 <__sflush_r>
 8021a26:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8021a28:	07da      	lsls	r2, r3, #31
 8021a2a:	4605      	mov	r5, r0
 8021a2c:	d4e4      	bmi.n	80219f8 <_fflush_r+0xc>
 8021a2e:	89a3      	ldrh	r3, [r4, #12]
 8021a30:	059b      	lsls	r3, r3, #22
 8021a32:	d4e1      	bmi.n	80219f8 <_fflush_r+0xc>
 8021a34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8021a36:	f7ff fa77 	bl	8020f28 <__retarget_lock_release_recursive>
 8021a3a:	e7dd      	b.n	80219f8 <_fflush_r+0xc>

08021a3c <__swhatbuf_r>:
 8021a3c:	b570      	push	{r4, r5, r6, lr}
 8021a3e:	460c      	mov	r4, r1
 8021a40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021a44:	2900      	cmp	r1, #0
 8021a46:	b096      	sub	sp, #88	@ 0x58
 8021a48:	4615      	mov	r5, r2
 8021a4a:	461e      	mov	r6, r3
 8021a4c:	da0d      	bge.n	8021a6a <__swhatbuf_r+0x2e>
 8021a4e:	89a3      	ldrh	r3, [r4, #12]
 8021a50:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8021a54:	f04f 0100 	mov.w	r1, #0
 8021a58:	bf14      	ite	ne
 8021a5a:	2340      	movne	r3, #64	@ 0x40
 8021a5c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8021a60:	2000      	movs	r0, #0
 8021a62:	6031      	str	r1, [r6, #0]
 8021a64:	602b      	str	r3, [r5, #0]
 8021a66:	b016      	add	sp, #88	@ 0x58
 8021a68:	bd70      	pop	{r4, r5, r6, pc}
 8021a6a:	466a      	mov	r2, sp
 8021a6c:	f000 f862 	bl	8021b34 <_fstat_r>
 8021a70:	2800      	cmp	r0, #0
 8021a72:	dbec      	blt.n	8021a4e <__swhatbuf_r+0x12>
 8021a74:	9901      	ldr	r1, [sp, #4]
 8021a76:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8021a7a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8021a7e:	4259      	negs	r1, r3
 8021a80:	4159      	adcs	r1, r3
 8021a82:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8021a86:	e7eb      	b.n	8021a60 <__swhatbuf_r+0x24>

08021a88 <__smakebuf_r>:
 8021a88:	898b      	ldrh	r3, [r1, #12]
 8021a8a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8021a8c:	079d      	lsls	r5, r3, #30
 8021a8e:	4606      	mov	r6, r0
 8021a90:	460c      	mov	r4, r1
 8021a92:	d507      	bpl.n	8021aa4 <__smakebuf_r+0x1c>
 8021a94:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8021a98:	6023      	str	r3, [r4, #0]
 8021a9a:	6123      	str	r3, [r4, #16]
 8021a9c:	2301      	movs	r3, #1
 8021a9e:	6163      	str	r3, [r4, #20]
 8021aa0:	b003      	add	sp, #12
 8021aa2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8021aa4:	ab01      	add	r3, sp, #4
 8021aa6:	466a      	mov	r2, sp
 8021aa8:	f7ff ffc8 	bl	8021a3c <__swhatbuf_r>
 8021aac:	9f00      	ldr	r7, [sp, #0]
 8021aae:	4605      	mov	r5, r0
 8021ab0:	4639      	mov	r1, r7
 8021ab2:	4630      	mov	r0, r6
 8021ab4:	f7fe fef2 	bl	802089c <_malloc_r>
 8021ab8:	b948      	cbnz	r0, 8021ace <__smakebuf_r+0x46>
 8021aba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021abe:	059a      	lsls	r2, r3, #22
 8021ac0:	d4ee      	bmi.n	8021aa0 <__smakebuf_r+0x18>
 8021ac2:	f023 0303 	bic.w	r3, r3, #3
 8021ac6:	f043 0302 	orr.w	r3, r3, #2
 8021aca:	81a3      	strh	r3, [r4, #12]
 8021acc:	e7e2      	b.n	8021a94 <__smakebuf_r+0xc>
 8021ace:	89a3      	ldrh	r3, [r4, #12]
 8021ad0:	6020      	str	r0, [r4, #0]
 8021ad2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8021ad6:	81a3      	strh	r3, [r4, #12]
 8021ad8:	9b01      	ldr	r3, [sp, #4]
 8021ada:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8021ade:	b15b      	cbz	r3, 8021af8 <__smakebuf_r+0x70>
 8021ae0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ae4:	4630      	mov	r0, r6
 8021ae6:	f000 f837 	bl	8021b58 <_isatty_r>
 8021aea:	b128      	cbz	r0, 8021af8 <__smakebuf_r+0x70>
 8021aec:	89a3      	ldrh	r3, [r4, #12]
 8021aee:	f023 0303 	bic.w	r3, r3, #3
 8021af2:	f043 0301 	orr.w	r3, r3, #1
 8021af6:	81a3      	strh	r3, [r4, #12]
 8021af8:	89a3      	ldrh	r3, [r4, #12]
 8021afa:	431d      	orrs	r5, r3
 8021afc:	81a5      	strh	r5, [r4, #12]
 8021afe:	e7cf      	b.n	8021aa0 <__smakebuf_r+0x18>

08021b00 <memmove>:
 8021b00:	4288      	cmp	r0, r1
 8021b02:	b510      	push	{r4, lr}
 8021b04:	eb01 0402 	add.w	r4, r1, r2
 8021b08:	d902      	bls.n	8021b10 <memmove+0x10>
 8021b0a:	4284      	cmp	r4, r0
 8021b0c:	4623      	mov	r3, r4
 8021b0e:	d807      	bhi.n	8021b20 <memmove+0x20>
 8021b10:	1e43      	subs	r3, r0, #1
 8021b12:	42a1      	cmp	r1, r4
 8021b14:	d008      	beq.n	8021b28 <memmove+0x28>
 8021b16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8021b1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8021b1e:	e7f8      	b.n	8021b12 <memmove+0x12>
 8021b20:	4402      	add	r2, r0
 8021b22:	4601      	mov	r1, r0
 8021b24:	428a      	cmp	r2, r1
 8021b26:	d100      	bne.n	8021b2a <memmove+0x2a>
 8021b28:	bd10      	pop	{r4, pc}
 8021b2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8021b2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8021b32:	e7f7      	b.n	8021b24 <memmove+0x24>

08021b34 <_fstat_r>:
 8021b34:	b538      	push	{r3, r4, r5, lr}
 8021b36:	4d07      	ldr	r5, [pc, #28]	@ (8021b54 <_fstat_r+0x20>)
 8021b38:	2300      	movs	r3, #0
 8021b3a:	4604      	mov	r4, r0
 8021b3c:	4608      	mov	r0, r1
 8021b3e:	4611      	mov	r1, r2
 8021b40:	602b      	str	r3, [r5, #0]
 8021b42:	f7e0 f860 	bl	8001c06 <_fstat>
 8021b46:	1c43      	adds	r3, r0, #1
 8021b48:	d102      	bne.n	8021b50 <_fstat_r+0x1c>
 8021b4a:	682b      	ldr	r3, [r5, #0]
 8021b4c:	b103      	cbz	r3, 8021b50 <_fstat_r+0x1c>
 8021b4e:	6023      	str	r3, [r4, #0]
 8021b50:	bd38      	pop	{r3, r4, r5, pc}
 8021b52:	bf00      	nop
 8021b54:	2402547c 	.word	0x2402547c

08021b58 <_isatty_r>:
 8021b58:	b538      	push	{r3, r4, r5, lr}
 8021b5a:	4d06      	ldr	r5, [pc, #24]	@ (8021b74 <_isatty_r+0x1c>)
 8021b5c:	2300      	movs	r3, #0
 8021b5e:	4604      	mov	r4, r0
 8021b60:	4608      	mov	r0, r1
 8021b62:	602b      	str	r3, [r5, #0]
 8021b64:	f7e0 f854 	bl	8001c10 <_isatty>
 8021b68:	1c43      	adds	r3, r0, #1
 8021b6a:	d102      	bne.n	8021b72 <_isatty_r+0x1a>
 8021b6c:	682b      	ldr	r3, [r5, #0]
 8021b6e:	b103      	cbz	r3, 8021b72 <_isatty_r+0x1a>
 8021b70:	6023      	str	r3, [r4, #0]
 8021b72:	bd38      	pop	{r3, r4, r5, pc}
 8021b74:	2402547c 	.word	0x2402547c

08021b78 <_realloc_r>:
 8021b78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021b7c:	4680      	mov	r8, r0
 8021b7e:	4615      	mov	r5, r2
 8021b80:	460c      	mov	r4, r1
 8021b82:	b921      	cbnz	r1, 8021b8e <_realloc_r+0x16>
 8021b84:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021b88:	4611      	mov	r1, r2
 8021b8a:	f7fe be87 	b.w	802089c <_malloc_r>
 8021b8e:	b92a      	cbnz	r2, 8021b9c <_realloc_r+0x24>
 8021b90:	f7ff fa36 	bl	8021000 <_free_r>
 8021b94:	2400      	movs	r4, #0
 8021b96:	4620      	mov	r0, r4
 8021b98:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8021b9c:	f000 f81a 	bl	8021bd4 <_malloc_usable_size_r>
 8021ba0:	4285      	cmp	r5, r0
 8021ba2:	4606      	mov	r6, r0
 8021ba4:	d802      	bhi.n	8021bac <_realloc_r+0x34>
 8021ba6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8021baa:	d8f4      	bhi.n	8021b96 <_realloc_r+0x1e>
 8021bac:	4629      	mov	r1, r5
 8021bae:	4640      	mov	r0, r8
 8021bb0:	f7fe fe74 	bl	802089c <_malloc_r>
 8021bb4:	4607      	mov	r7, r0
 8021bb6:	2800      	cmp	r0, #0
 8021bb8:	d0ec      	beq.n	8021b94 <_realloc_r+0x1c>
 8021bba:	42b5      	cmp	r5, r6
 8021bbc:	462a      	mov	r2, r5
 8021bbe:	4621      	mov	r1, r4
 8021bc0:	bf28      	it	cs
 8021bc2:	4632      	movcs	r2, r6
 8021bc4:	f7ff f9b1 	bl	8020f2a <memcpy>
 8021bc8:	4621      	mov	r1, r4
 8021bca:	4640      	mov	r0, r8
 8021bcc:	f7ff fa18 	bl	8021000 <_free_r>
 8021bd0:	463c      	mov	r4, r7
 8021bd2:	e7e0      	b.n	8021b96 <_realloc_r+0x1e>

08021bd4 <_malloc_usable_size_r>:
 8021bd4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021bd8:	1f18      	subs	r0, r3, #4
 8021bda:	2b00      	cmp	r3, #0
 8021bdc:	bfbc      	itt	lt
 8021bde:	580b      	ldrlt	r3, [r1, r0]
 8021be0:	18c0      	addlt	r0, r0, r3
 8021be2:	4770      	bx	lr

08021be4 <_init>:
 8021be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021be6:	bf00      	nop
 8021be8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021bea:	bc08      	pop	{r3}
 8021bec:	469e      	mov	lr, r3
 8021bee:	4770      	bx	lr

08021bf0 <_fini>:
 8021bf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021bf2:	bf00      	nop
 8021bf4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8021bf6:	bc08      	pop	{r3}
 8021bf8:	469e      	mov	lr, r3
 8021bfa:	4770      	bx	lr
