
STM32H747I-DISCO_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000225a0  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003084  08022840  08022840  00023840  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 FontFlashSection 000026a6  080258c4  080258c4  000268c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 FontSearchFlashSection 000001fc  08027f6c  08027f6c  00028f6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 ExtFlashSection 00048354  90000000  90000000  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 TextFlashSection 0000002a  90048354  90048354  00073354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .ARM.extab    00000000  08028168  08028168  0007337e  2**0
                  CONTENTS
  8 .ARM          00000008  08028168  08028168  00029168  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .preinit_array 00000000  08028170  08028170  0007337e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .init_array   00000020  08028170  08028170  00029170  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .fini_array   00000008  08028190  08028190  00029190  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data         0000016c  24000000  08028198  0002a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 TouchGFX_ScratchbufferA 00000100  24000180  08028304  0002a180  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 14 TouchGFX_ScratchbufferB 00000100  24000280  08028404  0002a280  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 15 .bss          00025d48  24000380  08028504  0002a380  2**2
                  ALLOC
 16 ._user_heap_stack 00002000  240260c8  08028504  0002b0c8  2**0
                  ALLOC
 17 .ARM.attributes 0000002e  00000000  00000000  0007337e  2**0
                  CONTENTS, READONLY
 18 BufferSection 00232800  d0000000  d0000000  00074000  2**2
                  ALLOC
 19 .debug_info   000d6de4  00000000  00000000  000733ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_abbrev 00018335  00000000  00000000  0014a190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_aranges 00003f70  00000000  00000000  001624c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_rnglists 00004447  00000000  00000000  00166438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_macro  00054417  00000000  00000000  0016a87f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_line   000758db  00000000  00000000  001bec96  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_str    001eb1f9  00000000  00000000  00234571  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .comment      000000c2  00000000  00000000  0041f76a  2**0
                  CONTENTS, READONLY
 27 .debug_frame  0000b218  00000000  00000000  0041f82c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .debug_loclists 00025717  00000000  00000000  0042aa44  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 29 .debug_line_str 00000099  00000000  00000000  0045015b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000380 	.word	0x24000380
 80002bc:	00000000 	.word	0x00000000
 80002c0:	08022828 	.word	0x08022828

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000384 	.word	0x24000384
 80002dc:	08022828 	.word	0x08022828

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_drsub>:
 8000380:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000384:	e002      	b.n	800038c <__adddf3>
 8000386:	bf00      	nop

08000388 <__aeabi_dsub>:
 8000388:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800038c <__adddf3>:
 800038c:	b530      	push	{r4, r5, lr}
 800038e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000392:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000396:	ea94 0f05 	teq	r4, r5
 800039a:	bf08      	it	eq
 800039c:	ea90 0f02 	teqeq	r0, r2
 80003a0:	bf1f      	itttt	ne
 80003a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80003a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80003aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80003ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003b2:	f000 80e2 	beq.w	800057a <__adddf3+0x1ee>
 80003b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80003ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80003be:	bfb8      	it	lt
 80003c0:	426d      	neglt	r5, r5
 80003c2:	dd0c      	ble.n	80003de <__adddf3+0x52>
 80003c4:	442c      	add	r4, r5
 80003c6:	ea80 0202 	eor.w	r2, r0, r2
 80003ca:	ea81 0303 	eor.w	r3, r1, r3
 80003ce:	ea82 0000 	eor.w	r0, r2, r0
 80003d2:	ea83 0101 	eor.w	r1, r3, r1
 80003d6:	ea80 0202 	eor.w	r2, r0, r2
 80003da:	ea81 0303 	eor.w	r3, r1, r3
 80003de:	2d36      	cmp	r5, #54	@ 0x36
 80003e0:	bf88      	it	hi
 80003e2:	bd30      	pophi	{r4, r5, pc}
 80003e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80003e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80003ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80003f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80003f4:	d002      	beq.n	80003fc <__adddf3+0x70>
 80003f6:	4240      	negs	r0, r0
 80003f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80003fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000400:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000404:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000408:	d002      	beq.n	8000410 <__adddf3+0x84>
 800040a:	4252      	negs	r2, r2
 800040c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000410:	ea94 0f05 	teq	r4, r5
 8000414:	f000 80a7 	beq.w	8000566 <__adddf3+0x1da>
 8000418:	f1a4 0401 	sub.w	r4, r4, #1
 800041c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000420:	db0d      	blt.n	800043e <__adddf3+0xb2>
 8000422:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000426:	fa22 f205 	lsr.w	r2, r2, r5
 800042a:	1880      	adds	r0, r0, r2
 800042c:	f141 0100 	adc.w	r1, r1, #0
 8000430:	fa03 f20e 	lsl.w	r2, r3, lr
 8000434:	1880      	adds	r0, r0, r2
 8000436:	fa43 f305 	asr.w	r3, r3, r5
 800043a:	4159      	adcs	r1, r3
 800043c:	e00e      	b.n	800045c <__adddf3+0xd0>
 800043e:	f1a5 0520 	sub.w	r5, r5, #32
 8000442:	f10e 0e20 	add.w	lr, lr, #32
 8000446:	2a01      	cmp	r2, #1
 8000448:	fa03 fc0e 	lsl.w	ip, r3, lr
 800044c:	bf28      	it	cs
 800044e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000452:	fa43 f305 	asr.w	r3, r3, r5
 8000456:	18c0      	adds	r0, r0, r3
 8000458:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800045c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000460:	d507      	bpl.n	8000472 <__adddf3+0xe6>
 8000462:	f04f 0e00 	mov.w	lr, #0
 8000466:	f1dc 0c00 	rsbs	ip, ip, #0
 800046a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800046e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000472:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000476:	d31b      	bcc.n	80004b0 <__adddf3+0x124>
 8000478:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800047c:	d30c      	bcc.n	8000498 <__adddf3+0x10c>
 800047e:	0849      	lsrs	r1, r1, #1
 8000480:	ea5f 0030 	movs.w	r0, r0, rrx
 8000484:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000488:	f104 0401 	add.w	r4, r4, #1
 800048c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000490:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000494:	f080 809a 	bcs.w	80005cc <__adddf3+0x240>
 8000498:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800049c:	bf08      	it	eq
 800049e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80004a2:	f150 0000 	adcs.w	r0, r0, #0
 80004a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80004aa:	ea41 0105 	orr.w	r1, r1, r5
 80004ae:	bd30      	pop	{r4, r5, pc}
 80004b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80004b4:	4140      	adcs	r0, r0
 80004b6:	eb41 0101 	adc.w	r1, r1, r1
 80004ba:	3c01      	subs	r4, #1
 80004bc:	bf28      	it	cs
 80004be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80004c2:	d2e9      	bcs.n	8000498 <__adddf3+0x10c>
 80004c4:	f091 0f00 	teq	r1, #0
 80004c8:	bf04      	itt	eq
 80004ca:	4601      	moveq	r1, r0
 80004cc:	2000      	moveq	r0, #0
 80004ce:	fab1 f381 	clz	r3, r1
 80004d2:	bf08      	it	eq
 80004d4:	3320      	addeq	r3, #32
 80004d6:	f1a3 030b 	sub.w	r3, r3, #11
 80004da:	f1b3 0220 	subs.w	r2, r3, #32
 80004de:	da0c      	bge.n	80004fa <__adddf3+0x16e>
 80004e0:	320c      	adds	r2, #12
 80004e2:	dd08      	ble.n	80004f6 <__adddf3+0x16a>
 80004e4:	f102 0c14 	add.w	ip, r2, #20
 80004e8:	f1c2 020c 	rsb	r2, r2, #12
 80004ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80004f0:	fa21 f102 	lsr.w	r1, r1, r2
 80004f4:	e00c      	b.n	8000510 <__adddf3+0x184>
 80004f6:	f102 0214 	add.w	r2, r2, #20
 80004fa:	bfd8      	it	le
 80004fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000500:	fa01 f102 	lsl.w	r1, r1, r2
 8000504:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000508:	bfdc      	itt	le
 800050a:	ea41 010c 	orrle.w	r1, r1, ip
 800050e:	4090      	lslle	r0, r2
 8000510:	1ae4      	subs	r4, r4, r3
 8000512:	bfa2      	ittt	ge
 8000514:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000518:	4329      	orrge	r1, r5
 800051a:	bd30      	popge	{r4, r5, pc}
 800051c:	ea6f 0404 	mvn.w	r4, r4
 8000520:	3c1f      	subs	r4, #31
 8000522:	da1c      	bge.n	800055e <__adddf3+0x1d2>
 8000524:	340c      	adds	r4, #12
 8000526:	dc0e      	bgt.n	8000546 <__adddf3+0x1ba>
 8000528:	f104 0414 	add.w	r4, r4, #20
 800052c:	f1c4 0220 	rsb	r2, r4, #32
 8000530:	fa20 f004 	lsr.w	r0, r0, r4
 8000534:	fa01 f302 	lsl.w	r3, r1, r2
 8000538:	ea40 0003 	orr.w	r0, r0, r3
 800053c:	fa21 f304 	lsr.w	r3, r1, r4
 8000540:	ea45 0103 	orr.w	r1, r5, r3
 8000544:	bd30      	pop	{r4, r5, pc}
 8000546:	f1c4 040c 	rsb	r4, r4, #12
 800054a:	f1c4 0220 	rsb	r2, r4, #32
 800054e:	fa20 f002 	lsr.w	r0, r0, r2
 8000552:	fa01 f304 	lsl.w	r3, r1, r4
 8000556:	ea40 0003 	orr.w	r0, r0, r3
 800055a:	4629      	mov	r1, r5
 800055c:	bd30      	pop	{r4, r5, pc}
 800055e:	fa21 f004 	lsr.w	r0, r1, r4
 8000562:	4629      	mov	r1, r5
 8000564:	bd30      	pop	{r4, r5, pc}
 8000566:	f094 0f00 	teq	r4, #0
 800056a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800056e:	bf06      	itte	eq
 8000570:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000574:	3401      	addeq	r4, #1
 8000576:	3d01      	subne	r5, #1
 8000578:	e74e      	b.n	8000418 <__adddf3+0x8c>
 800057a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800057e:	bf18      	it	ne
 8000580:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000584:	d029      	beq.n	80005da <__adddf3+0x24e>
 8000586:	ea94 0f05 	teq	r4, r5
 800058a:	bf08      	it	eq
 800058c:	ea90 0f02 	teqeq	r0, r2
 8000590:	d005      	beq.n	800059e <__adddf3+0x212>
 8000592:	ea54 0c00 	orrs.w	ip, r4, r0
 8000596:	bf04      	itt	eq
 8000598:	4619      	moveq	r1, r3
 800059a:	4610      	moveq	r0, r2
 800059c:	bd30      	pop	{r4, r5, pc}
 800059e:	ea91 0f03 	teq	r1, r3
 80005a2:	bf1e      	ittt	ne
 80005a4:	2100      	movne	r1, #0
 80005a6:	2000      	movne	r0, #0
 80005a8:	bd30      	popne	{r4, r5, pc}
 80005aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80005ae:	d105      	bne.n	80005bc <__adddf3+0x230>
 80005b0:	0040      	lsls	r0, r0, #1
 80005b2:	4149      	adcs	r1, r1
 80005b4:	bf28      	it	cs
 80005b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80005ba:	bd30      	pop	{r4, r5, pc}
 80005bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80005c0:	bf3c      	itt	cc
 80005c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80005c6:	bd30      	popcc	{r4, r5, pc}
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80005d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80005d4:	f04f 0000 	mov.w	r0, #0
 80005d8:	bd30      	pop	{r4, r5, pc}
 80005da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80005de:	bf1a      	itte	ne
 80005e0:	4619      	movne	r1, r3
 80005e2:	4610      	movne	r0, r2
 80005e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80005e8:	bf1c      	itt	ne
 80005ea:	460b      	movne	r3, r1
 80005ec:	4602      	movne	r2, r0
 80005ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80005f2:	bf06      	itte	eq
 80005f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80005f8:	ea91 0f03 	teqeq	r1, r3
 80005fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	bf00      	nop

08000604 <__aeabi_ui2d>:
 8000604:	f090 0f00 	teq	r0, #0
 8000608:	bf04      	itt	eq
 800060a:	2100      	moveq	r1, #0
 800060c:	4770      	bxeq	lr
 800060e:	b530      	push	{r4, r5, lr}
 8000610:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000614:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000618:	f04f 0500 	mov.w	r5, #0
 800061c:	f04f 0100 	mov.w	r1, #0
 8000620:	e750      	b.n	80004c4 <__adddf3+0x138>
 8000622:	bf00      	nop

08000624 <__aeabi_i2d>:
 8000624:	f090 0f00 	teq	r0, #0
 8000628:	bf04      	itt	eq
 800062a:	2100      	moveq	r1, #0
 800062c:	4770      	bxeq	lr
 800062e:	b530      	push	{r4, r5, lr}
 8000630:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000634:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000638:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800063c:	bf48      	it	mi
 800063e:	4240      	negmi	r0, r0
 8000640:	f04f 0100 	mov.w	r1, #0
 8000644:	e73e      	b.n	80004c4 <__adddf3+0x138>
 8000646:	bf00      	nop

08000648 <__aeabi_f2d>:
 8000648:	0042      	lsls	r2, r0, #1
 800064a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800064e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000652:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000656:	bf1f      	itttt	ne
 8000658:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800065c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000660:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000664:	4770      	bxne	lr
 8000666:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800066a:	bf08      	it	eq
 800066c:	4770      	bxeq	lr
 800066e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000672:	bf04      	itt	eq
 8000674:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000678:	4770      	bxeq	lr
 800067a:	b530      	push	{r4, r5, lr}
 800067c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000680:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000684:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000688:	e71c      	b.n	80004c4 <__adddf3+0x138>
 800068a:	bf00      	nop

0800068c <__aeabi_ul2d>:
 800068c:	ea50 0201 	orrs.w	r2, r0, r1
 8000690:	bf08      	it	eq
 8000692:	4770      	bxeq	lr
 8000694:	b530      	push	{r4, r5, lr}
 8000696:	f04f 0500 	mov.w	r5, #0
 800069a:	e00a      	b.n	80006b2 <__aeabi_l2d+0x16>

0800069c <__aeabi_l2d>:
 800069c:	ea50 0201 	orrs.w	r2, r0, r1
 80006a0:	bf08      	it	eq
 80006a2:	4770      	bxeq	lr
 80006a4:	b530      	push	{r4, r5, lr}
 80006a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80006aa:	d502      	bpl.n	80006b2 <__aeabi_l2d+0x16>
 80006ac:	4240      	negs	r0, r0
 80006ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80006b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80006b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80006ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80006be:	f43f aed8 	beq.w	8000472 <__adddf3+0xe6>
 80006c2:	f04f 0203 	mov.w	r2, #3
 80006c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006ca:	bf18      	it	ne
 80006cc:	3203      	addne	r2, #3
 80006ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80006d2:	bf18      	it	ne
 80006d4:	3203      	addne	r2, #3
 80006d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80006da:	f1c2 0320 	rsb	r3, r2, #32
 80006de:	fa00 fc03 	lsl.w	ip, r0, r3
 80006e2:	fa20 f002 	lsr.w	r0, r0, r2
 80006e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80006ea:	ea40 000e 	orr.w	r0, r0, lr
 80006ee:	fa21 f102 	lsr.w	r1, r1, r2
 80006f2:	4414      	add	r4, r2
 80006f4:	e6bd      	b.n	8000472 <__adddf3+0xe6>
 80006f6:	bf00      	nop

080006f8 <__aeabi_uldivmod>:
 80006f8:	b953      	cbnz	r3, 8000710 <__aeabi_uldivmod+0x18>
 80006fa:	b94a      	cbnz	r2, 8000710 <__aeabi_uldivmod+0x18>
 80006fc:	2900      	cmp	r1, #0
 80006fe:	bf08      	it	eq
 8000700:	2800      	cmpeq	r0, #0
 8000702:	bf1c      	itt	ne
 8000704:	f04f 31ff 	movne.w	r1, #4294967295
 8000708:	f04f 30ff 	movne.w	r0, #4294967295
 800070c:	f000 b96a 	b.w	80009e4 <__aeabi_idiv0>
 8000710:	f1ad 0c08 	sub.w	ip, sp, #8
 8000714:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000718:	f000 f806 	bl	8000728 <__udivmoddi4>
 800071c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000720:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000724:	b004      	add	sp, #16
 8000726:	4770      	bx	lr

08000728 <__udivmoddi4>:
 8000728:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800072c:	9d08      	ldr	r5, [sp, #32]
 800072e:	460c      	mov	r4, r1
 8000730:	2b00      	cmp	r3, #0
 8000732:	d14e      	bne.n	80007d2 <__udivmoddi4+0xaa>
 8000734:	4694      	mov	ip, r2
 8000736:	458c      	cmp	ip, r1
 8000738:	4686      	mov	lr, r0
 800073a:	fab2 f282 	clz	r2, r2
 800073e:	d962      	bls.n	8000806 <__udivmoddi4+0xde>
 8000740:	b14a      	cbz	r2, 8000756 <__udivmoddi4+0x2e>
 8000742:	f1c2 0320 	rsb	r3, r2, #32
 8000746:	4091      	lsls	r1, r2
 8000748:	fa20 f303 	lsr.w	r3, r0, r3
 800074c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000750:	4319      	orrs	r1, r3
 8000752:	fa00 fe02 	lsl.w	lr, r0, r2
 8000756:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800075a:	fa1f f68c 	uxth.w	r6, ip
 800075e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000762:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000766:	fb07 1114 	mls	r1, r7, r4, r1
 800076a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800076e:	fb04 f106 	mul.w	r1, r4, r6
 8000772:	4299      	cmp	r1, r3
 8000774:	d90a      	bls.n	800078c <__udivmoddi4+0x64>
 8000776:	eb1c 0303 	adds.w	r3, ip, r3
 800077a:	f104 30ff 	add.w	r0, r4, #4294967295
 800077e:	f080 8112 	bcs.w	80009a6 <__udivmoddi4+0x27e>
 8000782:	4299      	cmp	r1, r3
 8000784:	f240 810f 	bls.w	80009a6 <__udivmoddi4+0x27e>
 8000788:	3c02      	subs	r4, #2
 800078a:	4463      	add	r3, ip
 800078c:	1a59      	subs	r1, r3, r1
 800078e:	fa1f f38e 	uxth.w	r3, lr
 8000792:	fbb1 f0f7 	udiv	r0, r1, r7
 8000796:	fb07 1110 	mls	r1, r7, r0, r1
 800079a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800079e:	fb00 f606 	mul.w	r6, r0, r6
 80007a2:	429e      	cmp	r6, r3
 80007a4:	d90a      	bls.n	80007bc <__udivmoddi4+0x94>
 80007a6:	eb1c 0303 	adds.w	r3, ip, r3
 80007aa:	f100 31ff 	add.w	r1, r0, #4294967295
 80007ae:	f080 80fc 	bcs.w	80009aa <__udivmoddi4+0x282>
 80007b2:	429e      	cmp	r6, r3
 80007b4:	f240 80f9 	bls.w	80009aa <__udivmoddi4+0x282>
 80007b8:	4463      	add	r3, ip
 80007ba:	3802      	subs	r0, #2
 80007bc:	1b9b      	subs	r3, r3, r6
 80007be:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80007c2:	2100      	movs	r1, #0
 80007c4:	b11d      	cbz	r5, 80007ce <__udivmoddi4+0xa6>
 80007c6:	40d3      	lsrs	r3, r2
 80007c8:	2200      	movs	r2, #0
 80007ca:	e9c5 3200 	strd	r3, r2, [r5]
 80007ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80007d2:	428b      	cmp	r3, r1
 80007d4:	d905      	bls.n	80007e2 <__udivmoddi4+0xba>
 80007d6:	b10d      	cbz	r5, 80007dc <__udivmoddi4+0xb4>
 80007d8:	e9c5 0100 	strd	r0, r1, [r5]
 80007dc:	2100      	movs	r1, #0
 80007de:	4608      	mov	r0, r1
 80007e0:	e7f5      	b.n	80007ce <__udivmoddi4+0xa6>
 80007e2:	fab3 f183 	clz	r1, r3
 80007e6:	2900      	cmp	r1, #0
 80007e8:	d146      	bne.n	8000878 <__udivmoddi4+0x150>
 80007ea:	42a3      	cmp	r3, r4
 80007ec:	d302      	bcc.n	80007f4 <__udivmoddi4+0xcc>
 80007ee:	4290      	cmp	r0, r2
 80007f0:	f0c0 80f0 	bcc.w	80009d4 <__udivmoddi4+0x2ac>
 80007f4:	1a86      	subs	r6, r0, r2
 80007f6:	eb64 0303 	sbc.w	r3, r4, r3
 80007fa:	2001      	movs	r0, #1
 80007fc:	2d00      	cmp	r5, #0
 80007fe:	d0e6      	beq.n	80007ce <__udivmoddi4+0xa6>
 8000800:	e9c5 6300 	strd	r6, r3, [r5]
 8000804:	e7e3      	b.n	80007ce <__udivmoddi4+0xa6>
 8000806:	2a00      	cmp	r2, #0
 8000808:	f040 8090 	bne.w	800092c <__udivmoddi4+0x204>
 800080c:	eba1 040c 	sub.w	r4, r1, ip
 8000810:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000814:	fa1f f78c 	uxth.w	r7, ip
 8000818:	2101      	movs	r1, #1
 800081a:	fbb4 f6f8 	udiv	r6, r4, r8
 800081e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000822:	fb08 4416 	mls	r4, r8, r6, r4
 8000826:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800082a:	fb07 f006 	mul.w	r0, r7, r6
 800082e:	4298      	cmp	r0, r3
 8000830:	d908      	bls.n	8000844 <__udivmoddi4+0x11c>
 8000832:	eb1c 0303 	adds.w	r3, ip, r3
 8000836:	f106 34ff 	add.w	r4, r6, #4294967295
 800083a:	d202      	bcs.n	8000842 <__udivmoddi4+0x11a>
 800083c:	4298      	cmp	r0, r3
 800083e:	f200 80cd 	bhi.w	80009dc <__udivmoddi4+0x2b4>
 8000842:	4626      	mov	r6, r4
 8000844:	1a1c      	subs	r4, r3, r0
 8000846:	fa1f f38e 	uxth.w	r3, lr
 800084a:	fbb4 f0f8 	udiv	r0, r4, r8
 800084e:	fb08 4410 	mls	r4, r8, r0, r4
 8000852:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000856:	fb00 f707 	mul.w	r7, r0, r7
 800085a:	429f      	cmp	r7, r3
 800085c:	d908      	bls.n	8000870 <__udivmoddi4+0x148>
 800085e:	eb1c 0303 	adds.w	r3, ip, r3
 8000862:	f100 34ff 	add.w	r4, r0, #4294967295
 8000866:	d202      	bcs.n	800086e <__udivmoddi4+0x146>
 8000868:	429f      	cmp	r7, r3
 800086a:	f200 80b0 	bhi.w	80009ce <__udivmoddi4+0x2a6>
 800086e:	4620      	mov	r0, r4
 8000870:	1bdb      	subs	r3, r3, r7
 8000872:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000876:	e7a5      	b.n	80007c4 <__udivmoddi4+0x9c>
 8000878:	f1c1 0620 	rsb	r6, r1, #32
 800087c:	408b      	lsls	r3, r1
 800087e:	fa22 f706 	lsr.w	r7, r2, r6
 8000882:	431f      	orrs	r7, r3
 8000884:	fa20 fc06 	lsr.w	ip, r0, r6
 8000888:	fa04 f301 	lsl.w	r3, r4, r1
 800088c:	ea43 030c 	orr.w	r3, r3, ip
 8000890:	40f4      	lsrs	r4, r6
 8000892:	fa00 f801 	lsl.w	r8, r0, r1
 8000896:	0c38      	lsrs	r0, r7, #16
 8000898:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800089c:	fbb4 fef0 	udiv	lr, r4, r0
 80008a0:	fa1f fc87 	uxth.w	ip, r7
 80008a4:	fb00 441e 	mls	r4, r0, lr, r4
 80008a8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008ac:	fb0e f90c 	mul.w	r9, lr, ip
 80008b0:	45a1      	cmp	r9, r4
 80008b2:	fa02 f201 	lsl.w	r2, r2, r1
 80008b6:	d90a      	bls.n	80008ce <__udivmoddi4+0x1a6>
 80008b8:	193c      	adds	r4, r7, r4
 80008ba:	f10e 3aff 	add.w	sl, lr, #4294967295
 80008be:	f080 8084 	bcs.w	80009ca <__udivmoddi4+0x2a2>
 80008c2:	45a1      	cmp	r9, r4
 80008c4:	f240 8081 	bls.w	80009ca <__udivmoddi4+0x2a2>
 80008c8:	f1ae 0e02 	sub.w	lr, lr, #2
 80008cc:	443c      	add	r4, r7
 80008ce:	eba4 0409 	sub.w	r4, r4, r9
 80008d2:	fa1f f983 	uxth.w	r9, r3
 80008d6:	fbb4 f3f0 	udiv	r3, r4, r0
 80008da:	fb00 4413 	mls	r4, r0, r3, r4
 80008de:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80008e2:	fb03 fc0c 	mul.w	ip, r3, ip
 80008e6:	45a4      	cmp	ip, r4
 80008e8:	d907      	bls.n	80008fa <__udivmoddi4+0x1d2>
 80008ea:	193c      	adds	r4, r7, r4
 80008ec:	f103 30ff 	add.w	r0, r3, #4294967295
 80008f0:	d267      	bcs.n	80009c2 <__udivmoddi4+0x29a>
 80008f2:	45a4      	cmp	ip, r4
 80008f4:	d965      	bls.n	80009c2 <__udivmoddi4+0x29a>
 80008f6:	3b02      	subs	r3, #2
 80008f8:	443c      	add	r4, r7
 80008fa:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80008fe:	fba0 9302 	umull	r9, r3, r0, r2
 8000902:	eba4 040c 	sub.w	r4, r4, ip
 8000906:	429c      	cmp	r4, r3
 8000908:	46ce      	mov	lr, r9
 800090a:	469c      	mov	ip, r3
 800090c:	d351      	bcc.n	80009b2 <__udivmoddi4+0x28a>
 800090e:	d04e      	beq.n	80009ae <__udivmoddi4+0x286>
 8000910:	b155      	cbz	r5, 8000928 <__udivmoddi4+0x200>
 8000912:	ebb8 030e 	subs.w	r3, r8, lr
 8000916:	eb64 040c 	sbc.w	r4, r4, ip
 800091a:	fa04 f606 	lsl.w	r6, r4, r6
 800091e:	40cb      	lsrs	r3, r1
 8000920:	431e      	orrs	r6, r3
 8000922:	40cc      	lsrs	r4, r1
 8000924:	e9c5 6400 	strd	r6, r4, [r5]
 8000928:	2100      	movs	r1, #0
 800092a:	e750      	b.n	80007ce <__udivmoddi4+0xa6>
 800092c:	f1c2 0320 	rsb	r3, r2, #32
 8000930:	fa20 f103 	lsr.w	r1, r0, r3
 8000934:	fa0c fc02 	lsl.w	ip, ip, r2
 8000938:	fa24 f303 	lsr.w	r3, r4, r3
 800093c:	4094      	lsls	r4, r2
 800093e:	430c      	orrs	r4, r1
 8000940:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000944:	fa00 fe02 	lsl.w	lr, r0, r2
 8000948:	fa1f f78c 	uxth.w	r7, ip
 800094c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000950:	fb08 3110 	mls	r1, r8, r0, r3
 8000954:	0c23      	lsrs	r3, r4, #16
 8000956:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800095a:	fb00 f107 	mul.w	r1, r0, r7
 800095e:	4299      	cmp	r1, r3
 8000960:	d908      	bls.n	8000974 <__udivmoddi4+0x24c>
 8000962:	eb1c 0303 	adds.w	r3, ip, r3
 8000966:	f100 36ff 	add.w	r6, r0, #4294967295
 800096a:	d22c      	bcs.n	80009c6 <__udivmoddi4+0x29e>
 800096c:	4299      	cmp	r1, r3
 800096e:	d92a      	bls.n	80009c6 <__udivmoddi4+0x29e>
 8000970:	3802      	subs	r0, #2
 8000972:	4463      	add	r3, ip
 8000974:	1a5b      	subs	r3, r3, r1
 8000976:	b2a4      	uxth	r4, r4
 8000978:	fbb3 f1f8 	udiv	r1, r3, r8
 800097c:	fb08 3311 	mls	r3, r8, r1, r3
 8000980:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000984:	fb01 f307 	mul.w	r3, r1, r7
 8000988:	42a3      	cmp	r3, r4
 800098a:	d908      	bls.n	800099e <__udivmoddi4+0x276>
 800098c:	eb1c 0404 	adds.w	r4, ip, r4
 8000990:	f101 36ff 	add.w	r6, r1, #4294967295
 8000994:	d213      	bcs.n	80009be <__udivmoddi4+0x296>
 8000996:	42a3      	cmp	r3, r4
 8000998:	d911      	bls.n	80009be <__udivmoddi4+0x296>
 800099a:	3902      	subs	r1, #2
 800099c:	4464      	add	r4, ip
 800099e:	1ae4      	subs	r4, r4, r3
 80009a0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 80009a4:	e739      	b.n	800081a <__udivmoddi4+0xf2>
 80009a6:	4604      	mov	r4, r0
 80009a8:	e6f0      	b.n	800078c <__udivmoddi4+0x64>
 80009aa:	4608      	mov	r0, r1
 80009ac:	e706      	b.n	80007bc <__udivmoddi4+0x94>
 80009ae:	45c8      	cmp	r8, r9
 80009b0:	d2ae      	bcs.n	8000910 <__udivmoddi4+0x1e8>
 80009b2:	ebb9 0e02 	subs.w	lr, r9, r2
 80009b6:	eb63 0c07 	sbc.w	ip, r3, r7
 80009ba:	3801      	subs	r0, #1
 80009bc:	e7a8      	b.n	8000910 <__udivmoddi4+0x1e8>
 80009be:	4631      	mov	r1, r6
 80009c0:	e7ed      	b.n	800099e <__udivmoddi4+0x276>
 80009c2:	4603      	mov	r3, r0
 80009c4:	e799      	b.n	80008fa <__udivmoddi4+0x1d2>
 80009c6:	4630      	mov	r0, r6
 80009c8:	e7d4      	b.n	8000974 <__udivmoddi4+0x24c>
 80009ca:	46d6      	mov	lr, sl
 80009cc:	e77f      	b.n	80008ce <__udivmoddi4+0x1a6>
 80009ce:	4463      	add	r3, ip
 80009d0:	3802      	subs	r0, #2
 80009d2:	e74d      	b.n	8000870 <__udivmoddi4+0x148>
 80009d4:	4606      	mov	r6, r0
 80009d6:	4623      	mov	r3, r4
 80009d8:	4608      	mov	r0, r1
 80009da:	e70f      	b.n	80007fc <__udivmoddi4+0xd4>
 80009dc:	3e02      	subs	r6, #2
 80009de:	4463      	add	r3, ip
 80009e0:	e730      	b.n	8000844 <__udivmoddi4+0x11c>
 80009e2:	bf00      	nop

080009e4 <__aeabi_idiv0>:
 80009e4:	4770      	bx	lr
 80009e6:	bf00      	nop

080009e8 <vApplicationIdleHook>:
   specified, or call vTaskDelay()). If the application makes use of the
   vTaskDelete() API function (as this demo application does) then it is also
   important that vApplicationIdleHook() is permitted to return to its calling
   function, because it is the responsibility of the idle task to clean up
   memory allocated by the kernel to any task that has since been deleted. */
vTaskSetApplicationTaskTag(NULL, IdleTaskHook);
 80009e8:	4901      	ldr	r1, [pc, #4]	@ (80009f0 <vApplicationIdleHook+0x8>)
 80009ea:	2000      	movs	r0, #0
 80009ec:	f00d bc5a 	b.w	800e2a4 <vTaskSetApplicationTaskTag>
 80009f0:	08002461 	.word	0x08002461

080009f4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80009f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80009f6:	b09d      	sub	sp, #116	@ 0x74
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80009f8:	224c      	movs	r2, #76	@ 0x4c
 80009fa:	2100      	movs	r1, #0
 80009fc:	a809      	add	r0, sp, #36	@ 0x24
 80009fe:	f021 f927 	bl	8021c50 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a02:	2220      	movs	r2, #32
 8000a04:	2100      	movs	r1, #0
 8000a06:	a801      	add	r0, sp, #4
 8000a08:	f021 f922 	bl	8021c50 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 8000a0c:	2004      	movs	r0, #4
 8000a0e:	f008 fefd 	bl	800980c <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a12:	2300      	movs	r3, #0
 8000a14:	9300      	str	r3, [sp, #0]
 8000a16:	4b26      	ldr	r3, [pc, #152]	@ (8000ab0 <SystemClock_Config+0xbc>)
 8000a18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8000a1a:	f022 0201 	bic.w	r2, r2, #1
 8000a1e:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000a20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000a22:	f003 0301 	and.w	r3, r3, #1
 8000a26:	9300      	str	r3, [sp, #0]
 8000a28:	4b22      	ldr	r3, [pc, #136]	@ (8000ab4 <SystemClock_Config+0xc0>)
 8000a2a:	699a      	ldr	r2, [r3, #24]
 8000a2c:	f442 4240 	orr.w	r2, r2, #49152	@ 0xc000
 8000a30:	619a      	str	r2, [r3, #24]
 8000a32:	699a      	ldr	r2, [r3, #24]
 8000a34:	f402 4240 	and.w	r2, r2, #49152	@ 0xc000
 8000a38:	9200      	str	r2, [sp, #0]
 8000a3a:	9a00      	ldr	r2, [sp, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000a3c:	699a      	ldr	r2, [r3, #24]
 8000a3e:	0491      	lsls	r1, r2, #18
 8000a40:	d5fc      	bpl.n	8000a3c <SystemClock_Config+0x48>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a42:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000a46:	2703      	movs	r7, #3
  RCC_OscInitStruct.HSIState = RCC_HSI_DIV1;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a48:	2540      	movs	r5, #64	@ 0x40
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 5;
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a4a:	2205      	movs	r2, #5
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000a4c:	2402      	movs	r4, #2
  RCC_OscInitStruct.PLL.PLLP = 2;
  RCC_OscInitStruct.PLL.PLLQ = 2;
  RCC_OscInitStruct.PLL.PLLR = 2;
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a4e:	2608      	movs	r6, #8
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a50:	a809      	add	r0, sp, #36	@ 0x24
  RCC_OscInitStruct.PLL.PLLR = 2;
 8000a52:	9418      	str	r4, [sp, #96]	@ 0x60
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000a54:	e9cd 7309 	strd	r7, r3, [sp, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000a58:	2301      	movs	r3, #1
 8000a5a:	e9cd 350c 	strd	r3, r5, [sp, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLN = 160;
 8000a5e:	23a0      	movs	r3, #160	@ 0xa0
 8000a60:	e9cd 2314 	strd	r2, r3, [sp, #80]	@ 0x50
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a64:	2300      	movs	r3, #0
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000a66:	e9cd 4412 	strd	r4, r4, [sp, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000a6a:	e9cd 4416 	strd	r4, r4, [sp, #88]	@ 0x58
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8000a6e:	e9cd 6319 	strd	r6, r3, [sp, #100]	@ 0x64
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000a72:	931b      	str	r3, [sp, #108]	@ 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000a74:	f009 f9ca 	bl	8009e0c <HAL_RCC_OscConfig>
 8000a78:	b108      	cbz	r0, 8000a7e <SystemClock_Config+0x8a>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a7a:	b672      	cpsid	i
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <SystemClock_Config+0x88>
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000a7e:	233f      	movs	r3, #63	@ 0x3f
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a80:	4621      	mov	r1, r4
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000a82:	e9cd 3701 	strd	r3, r7, [sp, #4]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a86:	f44f 6380 	mov.w	r3, #1024	@ 0x400
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a8a:	e9cd 0603 	strd	r0, r6, [sp, #12]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a8e:	a801      	add	r0, sp, #4
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a90:	e9cd 5505 	strd	r5, r5, [sp, #20]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a94:	e9cd 3507 	strd	r3, r5, [sp, #28]
  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000a98:	f009 fd54 	bl	800a544 <HAL_RCC_ClockConfig>
 8000a9c:	4601      	mov	r1, r0
 8000a9e:	b108      	cbz	r0, 8000aa4 <SystemClock_Config+0xb0>
 8000aa0:	b672      	cpsid	i
  while (1)
 8000aa2:	e7fe      	b.n	8000aa2 <SystemClock_Config+0xae>
  HAL_RCC_MCOConfig(RCC_MCO1, RCC_MCO1SOURCE_HSI, RCC_MCODIV_1);
 8000aa4:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8000aa8:	f009 fc5c 	bl	800a364 <HAL_RCC_MCOConfig>
}
 8000aac:	b01d      	add	sp, #116	@ 0x74
 8000aae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000ab0:	58000400 	.word	0x58000400
 8000ab4:	58024800 	.word	0x58024800

08000ab8 <main>:
{
 8000ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000abc:	b0ba      	sub	sp, #232	@ 0xe8
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000abe:	2210      	movs	r2, #16
 8000ac0:	2100      	movs	r1, #0
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ac2:	2401      	movs	r4, #1
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac4:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000ac6:	2504      	movs	r5, #4
  MPU_Region_InitTypeDef MPU_InitStruct = {0};
 8000ac8:	f021 f8c2 	bl	8021c50 <memset>
  HAL_MPU_Disable();
 8000acc:	f005 fe56 	bl	800677c <HAL_MPU_Disable>
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ad0:	f04f 4110 	mov.w	r1, #2415919104	@ 0x90000000
 8000ad4:	4bbe      	ldr	r3, [pc, #760]	@ (8000dd0 <main+0x318>)
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ad6:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8000ad8:	f8ad 40b4 	strh.w	r4, [sp, #180]	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000adc:	9430      	str	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Size = MPU_REGION_SIZE_256MB;
 8000ade:	e9cd 132e 	strd	r1, r3, [sp, #184]	@ 0xb8
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae2:	f005 fe69 	bl	80067b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000ae6:	231a      	movs	r3, #26
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000ae8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8000aea:	f88d 40b5 	strb.w	r4, [sp, #181]	@ 0xb5
  MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8000aee:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af2:	f005 fe61 	bl	80067b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000af6:	2302      	movs	r3, #2
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000af8:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8000afa:	f88d 40c2 	strb.w	r4, [sp, #194]	@ 0xc2
  MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8000afe:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0xD0000000;
 8000b02:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8000b06:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8000b08:	2318      	movs	r3, #24
 8000b0a:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b0e:	f005 fe53 	bl	80067b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b12:	2303      	movs	r3, #3
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b14:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER3;
 8000b16:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x24000000;
 8000b1a:	f04f 5310 	mov.w	r3, #603979776	@ 0x24000000
 8000b1e:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_512KB;
 8000b20:	2312      	movs	r3, #18
 8000b22:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8000b26:	2300      	movs	r3, #0
 8000b28:	f88d 30c0 	strb.w	r3, [sp, #192]	@ 0xc0
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b2c:	f005 fe44 	bl	80067b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b30:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b34:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.Number = MPU_REGION_NUMBER4;
 8000b36:	f88d 50b5 	strb.w	r5, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10000000;
 8000b3a:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_256KB;
 8000b3c:	2311      	movs	r3, #17
 8000b3e:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b42:	f005 fe39 	bl	80067b8 <HAL_MPU_ConfigRegion>
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b46:	2305      	movs	r3, #5
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b48:	a82d      	add	r0, sp, #180	@ 0xb4
  MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8000b4a:	f88d 40c0 	strb.w	r4, [sp, #192]	@ 0xc0
  MPU_InitStruct.Number = MPU_REGION_NUMBER5;
 8000b4e:	f88d 30b5 	strb.w	r3, [sp, #181]	@ 0xb5
  MPU_InitStruct.BaseAddress = 0x10040000;
 8000b52:	4ba0      	ldr	r3, [pc, #640]	@ (8000dd4 <main+0x31c>)
 8000b54:	932e      	str	r3, [sp, #184]	@ 0xb8
  MPU_InitStruct.Size = MPU_REGION_SIZE_32KB;
 8000b56:	230e      	movs	r3, #14
 8000b58:	f88d 30bc 	strb.w	r3, [sp, #188]	@ 0xbc
  HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8000b5c:	f005 fe2c 	bl	80067b8 <HAL_MPU_ConfigRegion>
  HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8000b60:	4628      	mov	r0, r5
 8000b62:	f005 fe19 	bl	8006798 <HAL_MPU_Enable>
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000b66:	4b9c      	ldr	r3, [pc, #624]	@ (8000dd8 <main+0x320>)
 8000b68:	695a      	ldr	r2, [r3, #20]
 8000b6a:	f412 3200 	ands.w	r2, r2, #131072	@ 0x20000
 8000b6e:	d111      	bne.n	8000b94 <main+0xdc>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8000b70:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b74:	f3bf 8f6f 	isb	sy

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000b78:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8000b7c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b80:	f3bf 8f6f 	isb	sy
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8000b84:	695a      	ldr	r2, [r3, #20]
 8000b86:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8000b8a:	615a      	str	r2, [r3, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000b8c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000b90:	f3bf 8f6f 	isb	sy
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000b94:	4a90      	ldr	r2, [pc, #576]	@ (8000dd8 <main+0x320>)
 8000b96:	6953      	ldr	r3, [r2, #20]
 8000b98:	f413 3380 	ands.w	r3, r3, #65536	@ 0x10000
 8000b9c:	d123      	bne.n	8000be6 <main+0x12e>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000b9e:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000ba2:	f3bf 8f4f 	dsb	sy
    __DSB();

    ccsidr = SCB->CCSIDR;
 8000ba6:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000baa:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bae:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000bb2:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8000bb6:	015b      	lsls	r3, r3, #5
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bb8:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000bbc:	4601      	mov	r1, r0
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bbe:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 8000bc2:	3901      	subs	r1, #1
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000bc4:	f8c2 5260 	str.w	r5, [r2, #608]	@ 0x260
      } while (ways-- != 0U);
 8000bc8:	d2f9      	bcs.n	8000bbe <main+0x106>
    } while(sets-- != 0U);
 8000bca:	3b20      	subs	r3, #32
 8000bcc:	f113 0f20 	cmn.w	r3, #32
 8000bd0:	d1f2      	bne.n	8000bb8 <main+0x100>
 8000bd2:	f3bf 8f4f 	dsb	sy
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000bd6:	6953      	ldr	r3, [r2, #20]
 8000bd8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000bdc:	6153      	str	r3, [r2, #20]
 8000bde:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8000be2:	f3bf 8f6f 	isb	sy
  timeout = 0xFFFF;
 8000be6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 8000bea:	4d7c      	ldr	r5, [pc, #496]	@ (8000ddc <main+0x324>)
 8000bec:	682c      	ldr	r4, [r5, #0]
 8000bee:	f414 4400 	ands.w	r4, r4, #32768	@ 0x8000
 8000bf2:	f000 8337 	beq.w	8001264 <main+0x7ac>
 8000bf6:	3b01      	subs	r3, #1
 8000bf8:	d2f8      	bcs.n	8000bec <main+0x134>
  __ASM volatile ("cpsid i" : : : "memory");
 8000bfa:	b672      	cpsid	i
  while (1)
 8000bfc:	e7fe      	b.n	8000bfc <main+0x144>
 8000bfe:	b672      	cpsid	i
 8000c00:	e7fe      	b.n	8000c00 <main+0x148>
  hqspi.Instance = QUADSPI;
 8000c02:	4877      	ldr	r0, [pc, #476]	@ (8000de0 <main+0x328>)
 8000c04:	4a77      	ldr	r2, [pc, #476]	@ (8000de4 <main+0x32c>)
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 8000c06:	6183      	str	r3, [r0, #24]
  hqspi.Init.DualFlash = QSPI_DUALFLASH_ENABLE;
 8000c08:	6204      	str	r4, [r0, #32]
  hqspi.Init.ClockPrescaler = 3;
 8000c0a:	e9c0 2700 	strd	r2, r7, [r0]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_NONE;
 8000c0e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 8000c12:	e9c0 5304 	strd	r5, r3, [r0, #16]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 8000c16:	f008 ff19 	bl	8009a4c <HAL_QSPI_Init>
 8000c1a:	b108      	cbz	r0, 8000c20 <main+0x168>
 8000c1c:	b672      	cpsid	i
  while (1)
 8000c1e:	e7fe      	b.n	8000c1e <main+0x166>
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c20:	f240 1303 	movw	r3, #259	@ 0x103
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c24:	a92d      	add	r1, sp, #180	@ 0xb4
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 8000c26:	f88d 40b6 	strb.w	r4, [sp, #182]	@ 0xb6
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 8000c2a:	f8ad 30b4 	strh.w	r3, [sp, #180]	@ 0xb4
  if (BSP_QSPI_Init(0,&init) != BSP_ERROR_NONE)
 8000c2e:	f005 f885 	bl	8005d3c <BSP_QSPI_Init>
 8000c32:	b108      	cbz	r0, 8000c38 <main+0x180>
 8000c34:	b672      	cpsid	i
  while (1)
 8000c36:	e7fe      	b.n	8000c36 <main+0x17e>
  if (BSP_QSPI_EnableMemoryMappedMode(0) != BSP_ERROR_NONE)
 8000c38:	f005 f82c 	bl	8005c94 <BSP_QSPI_EnableMemoryMappedMode>
 8000c3c:	4603      	mov	r3, r0
 8000c3e:	b108      	cbz	r0, 8000c44 <main+0x18c>
 8000c40:	b672      	cpsid	i
  while (1)
 8000c42:	e7fe      	b.n	8000c42 <main+0x18a>
  hdma2d.Instance = DMA2D;
 8000c44:	4868      	ldr	r0, [pc, #416]	@ (8000de8 <main+0x330>)
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c46:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c4a:	f8df c1a8 	ldr.w	ip, [pc, #424]	@ 8000df4 <main+0x33c>
  hdma2d.Init.OutputOffset = 0;
 8000c4e:	e9c0 5302 	strd	r5, r3, [r0, #8]
  hdma2d.Init.Mode = DMA2D_R2M;
 8000c52:	e9c0 c200 	strd	ip, r2, [r0]
  if (HAL_DMA2D_Init(&hdma2d) != HAL_OK)
 8000c56:	f006 f873 	bl	8006d40 <HAL_DMA2D_Init>
 8000c5a:	4604      	mov	r4, r0
 8000c5c:	b108      	cbz	r0, 8000c62 <main+0x1aa>
 8000c5e:	b672      	cpsid	i
  while (1)
 8000c60:	e7fe      	b.n	8000c60 <main+0x1a8>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3 , GPIO_PIN_RESET);
 8000c62:	4602      	mov	r2, r0
 8000c64:	4649      	mov	r1, r9
 8000c66:	4861      	ldr	r0, [pc, #388]	@ (8000dec <main+0x334>)
 8000c68:	f006 ff4c 	bl	8007b04 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8000c6c:	2014      	movs	r0, #20
 8000c6e:	f005 fd09 	bl	8006684 <HAL_Delay>
  HAL_GPIO_WritePin(GPIOG , GPIO_PIN_3, GPIO_PIN_SET);/* Deactivate XRES */
 8000c72:	462a      	mov	r2, r5
 8000c74:	4649      	mov	r1, r9
 8000c76:	485d      	ldr	r0, [pc, #372]	@ (8000dec <main+0x334>)
 8000c78:	f006 ff44 	bl	8007b04 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8000c7c:	200a      	movs	r0, #10
 8000c7e:	f005 fd01 	bl	8006684 <HAL_Delay>
  DSI_HOST_TimeoutTypeDef HostTimeouts = {0};
 8000c82:	2224      	movs	r2, #36	@ 0x24
 8000c84:	4621      	mov	r1, r4
 8000c86:	a817      	add	r0, sp, #92	@ 0x5c
 8000c88:	f020 ffe2 	bl	8021c50 <memset>
  DSI_PHY_TimerTypeDef PhyTimings = {0};
 8000c8c:	2218      	movs	r2, #24
 8000c8e:	4621      	mov	r1, r4
 8000c90:	a811      	add	r0, sp, #68	@ 0x44
 8000c92:	f020 ffdd 	bl	8021c50 <memset>
  DSI_LPCmdTypeDef LPCmd = {0};
 8000c96:	2234      	movs	r2, #52	@ 0x34
 8000c98:	4621      	mov	r1, r4
 8000c9a:	a82d      	add	r0, sp, #180	@ 0xb4
 8000c9c:	f020 ffd8 	bl	8021c50 <memset>
  DSI_CmdCfgTypeDef CmdCfg = {0};
 8000ca0:	4621      	mov	r1, r4
 8000ca2:	222c      	movs	r2, #44	@ 0x2c
 8000ca4:	a820      	add	r0, sp, #128	@ 0x80
 8000ca6:	f020 ffd3 	bl	8021c50 <memset>
  hdsi.Instance = DSI;
 8000caa:	4e51      	ldr	r6, [pc, #324]	@ (8000df0 <main+0x338>)
 8000cac:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cb0:	a90e      	add	r1, sp, #56	@ 0x38
 8000cb2:	4630      	mov	r0, r6
  PLLInit.PLLODF = DSI_PLL_OUT_DIV2;
 8000cb4:	9510      	str	r5, [sp, #64]	@ 0x40
  hdsi.Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8000cb6:	e9c6 3400 	strd	r3, r4, [r6]
  PLLInit.PLLNDIV = 119;
 8000cba:	2377      	movs	r3, #119	@ 0x77
  hdsi.Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8000cbc:	e9c6 8502 	strd	r8, r5, [r6, #8]
  PLLInit.PLLIDF = DSI_PLL_IN_DIV3;
 8000cc0:	e9cd 370e 	strd	r3, r7, [sp, #56]	@ 0x38
  if (HAL_DSI_Init(&hdsi, &PLLInit) != HAL_OK)
 8000cc4:	f006 f988 	bl	8006fd8 <HAL_DSI_Init>
 8000cc8:	b108      	cbz	r0, 8000cce <main+0x216>
 8000cca:	b672      	cpsid	i
  while (1)
 8000ccc:	e7fe      	b.n	8000ccc <main+0x214>
  HostTimeouts.HighSpeedTransmissionTimeout = 0;
 8000cce:	e9cd 5017 	strd	r5, r0, [sp, #92]	@ 0x5c
  HostTimeouts.HighSpeedReadTimeout = 0;
 8000cd2:	e9cd 0019 	strd	r0, r0, [sp, #100]	@ 0x64
  HostTimeouts.HighSpeedWriteTimeout = 0;
 8000cd6:	e9cd 001b 	strd	r0, r0, [sp, #108]	@ 0x6c
  HostTimeouts.LowPowerWriteTimeout = 0;
 8000cda:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  HostTimeouts.BTATimeout = 0;
 8000cde:	901f      	str	r0, [sp, #124]	@ 0x7c
  if (HAL_DSI_ConfigHostTimeouts(&hdsi, &HostTimeouts) != HAL_OK)
 8000ce0:	a917      	add	r1, sp, #92	@ 0x5c
 8000ce2:	4630      	mov	r0, r6
 8000ce4:	f006 fbe4 	bl	80074b0 <HAL_DSI_ConfigHostTimeouts>
 8000ce8:	b108      	cbz	r0, 8000cee <main+0x236>
 8000cea:	b672      	cpsid	i
  while (1)
 8000cec:	e7fe      	b.n	8000cec <main+0x234>
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cee:	2321      	movs	r3, #33	@ 0x21
 8000cf0:	251c      	movs	r5, #28
  PhyTimings.DataLaneLP2HSTime = 25;
 8000cf2:	270f      	movs	r7, #15
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000cf4:	a911      	add	r1, sp, #68	@ 0x44
  PhyTimings.ClockLaneLP2HSTime = 33;
 8000cf6:	e9cd 5311 	strd	r5, r3, [sp, #68]	@ 0x44
  PhyTimings.DataLaneLP2HSTime = 25;
 8000cfa:	2319      	movs	r3, #25
  PhyTimings.StopWaitTime = 0;
 8000cfc:	e9cd 0015 	strd	r0, r0, [sp, #84]	@ 0x54
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d00:	4630      	mov	r0, r6
  PhyTimings.DataLaneLP2HSTime = 25;
 8000d02:	e9cd 7313 	strd	r7, r3, [sp, #76]	@ 0x4c
  if (HAL_DSI_ConfigPhyTimer(&hdsi, &PhyTimings) != HAL_OK)
 8000d06:	f006 fb96 	bl	8007436 <HAL_DSI_ConfigPhyTimer>
 8000d0a:	b108      	cbz	r0, 8000d10 <main+0x258>
 8000d0c:	b672      	cpsid	i
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <main+0x256>
  if (HAL_DSI_ConfigFlowControl(&hdsi, DSI_FLOW_CONTROL_BTA) != HAL_OK)
 8000d10:	2104      	movs	r1, #4
 8000d12:	4837      	ldr	r0, [pc, #220]	@ (8000df0 <main+0x338>)
 8000d14:	f006 fb7e 	bl	8007414 <HAL_DSI_ConfigFlowControl>
 8000d18:	b108      	cbz	r0, 8000d1e <main+0x266>
 8000d1a:	b672      	cpsid	i
  while (1)
 8000d1c:	e7fe      	b.n	8000d1c <main+0x264>
  if (HAL_DSI_SetLowPowerRXFilter(&hdsi, 10000) != HAL_OK)
 8000d1e:	f242 7110 	movw	r1, #10000	@ 0x2710
 8000d22:	4833      	ldr	r0, [pc, #204]	@ (8000df0 <main+0x338>)
 8000d24:	f006 fd4d 	bl	80077c2 <HAL_DSI_SetLowPowerRXFilter>
 8000d28:	4601      	mov	r1, r0
 8000d2a:	b108      	cbz	r0, 8000d30 <main+0x278>
 8000d2c:	b672      	cpsid	i
  while (1)
 8000d2e:	e7fe      	b.n	8000d2e <main+0x276>
  if (HAL_DSI_ConfigErrorMonitor(&hdsi, HAL_DSI_ERROR_NONE) != HAL_OK)
 8000d30:	482f      	ldr	r0, [pc, #188]	@ (8000df0 <main+0x338>)
 8000d32:	f006 f8ef 	bl	8006f14 <HAL_DSI_ConfigErrorMonitor>
 8000d36:	b108      	cbz	r0, 8000d3c <main+0x284>
 8000d38:	b672      	cpsid	i
  while (1)
 8000d3a:	e7fe      	b.n	8000d3a <main+0x282>
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d3c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000d40:	f44f 7980 	mov.w	r9, #256	@ 0x100
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d44:	f44f 6a80 	mov.w	sl, #1024	@ 0x400
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d48:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d4c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d50:	f44f 3000 	mov.w	r0, #131072	@ 0x20000
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d54:	f44f 2400 	mov.w	r4, #524288	@ 0x80000
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d58:	f04f 0802 	mov.w	r8, #2
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_ENABLE;
 8000d5c:	e9cd 932d 	strd	r9, r3, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  LPCmd.AcknowledgeRequest = DSI_ACKNOWLEDGE_ENABLE;
 8000d64:	f8cd 80e4 	str.w	r8, [sp, #228]	@ 0xe4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_ENABLE;
 8000d68:	e9cd a32f 	strd	sl, r3, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_ENABLE;
 8000d6c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d70:	e9cd 2331 	strd	r2, r3, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_ENABLE;
 8000d74:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000d78:	e9cd 1333 	strd	r1, r3, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d7c:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d80:	a92d      	add	r1, sp, #180	@ 0xb4
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_ENABLE;
 8000d82:	e9cd 0335 	strd	r0, r3, [sp, #212]	@ 0xd4
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d86:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d8a:	4819      	ldr	r0, [pc, #100]	@ (8000df0 <main+0x338>)
  LPCmd.LPMaxReadPacket = DSI_LP_MRDP_ENABLE;
 8000d8c:	e9cd 4337 	strd	r4, r3, [sp, #220]	@ 0xdc
  if (HAL_DSI_ConfigCommand(&hdsi, &LPCmd) != HAL_OK)
 8000d90:	f006 fb0c 	bl	80073ac <HAL_DSI_ConfigCommand>
 8000d94:	b108      	cbz	r0, 8000d9a <main+0x2e2>
 8000d96:	b672      	cpsid	i
  while (1)
 8000d98:	e7fe      	b.n	8000d98 <main+0x2e0>
  CmdCfg.CommandSize = 400;
 8000d9a:	2305      	movs	r3, #5
 8000d9c:	f44f 77c8 	mov.w	r7, #400	@ 0x190
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000da0:	2601      	movs	r6, #1
  CmdCfg.VirtualChannelID = 0;
 8000da2:	9020      	str	r0, [sp, #128]	@ 0x80
  CmdCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8000da4:	9027      	str	r0, [sp, #156]	@ 0x9c
  CmdCfg.TEAcknowledgeRequest = DSI_TE_ACKNOWLEDGE_ENABLE;
 8000da6:	962a      	str	r6, [sp, #168]	@ 0xa8
  CmdCfg.CommandSize = 400;
 8000da8:	e9cd 3721 	strd	r3, r7, [sp, #132]	@ 0x84
  CmdCfg.TearingEffectSource = DSI_TE_EXTERNAL;
 8000dac:	2310      	movs	r3, #16
  CmdCfg.TearingEffectPolarity = DSI_TE_RISING_EDGE;
 8000dae:	e9cd 3023 	strd	r3, r0, [sp, #140]	@ 0x8c
  CmdCfg.VSyncPol = DSI_VSYNC_RISING;
 8000db2:	2380      	movs	r3, #128	@ 0x80
  CmdCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8000db4:	e9cd 0025 	strd	r0, r0, [sp, #148]	@ 0x94
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000db8:	eb0d 0103 	add.w	r1, sp, r3
  CmdCfg.AutomaticRefresh = DSI_AR_DISABLE;
 8000dbc:	e9cd 3028 	strd	r3, r0, [sp, #160]	@ 0xa0
  if (HAL_DSI_ConfigAdaptedCommandMode(&hdsi, &CmdCfg) != HAL_OK)
 8000dc0:	480b      	ldr	r0, [pc, #44]	@ (8000df0 <main+0x338>)
 8000dc2:	f006 fa81 	bl	80072c8 <HAL_DSI_ConfigAdaptedCommandMode>
 8000dc6:	4601      	mov	r1, r0
 8000dc8:	b1b0      	cbz	r0, 8000df8 <main+0x340>
 8000dca:	b672      	cpsid	i
  while (1)
 8000dcc:	e7fe      	b.n	8000dcc <main+0x314>
 8000dce:	bf00      	nop
 8000dd0:	0300001b 	.word	0x0300001b
 8000dd4:	10040000 	.word	0x10040000
 8000dd8:	e000ed00 	.word	0xe000ed00
 8000ddc:	58024400 	.word	0x58024400
 8000de0:	2400049c 	.word	0x2400049c
 8000de4:	52005000 	.word	0x52005000
 8000de8:	240006dc 	.word	0x240006dc
 8000dec:	58021800 	.word	0x58021800
 8000df0:	240006c0 	.word	0x240006c0
 8000df4:	52001000 	.word	0x52001000
  if (HAL_DSI_SetGenericVCID(&hdsi, 0) != HAL_OK)
 8000df8:	4875      	ldr	r0, [pc, #468]	@ (8000fd0 <main+0x518>)
 8000dfa:	f006 fa54 	bl	80072a6 <HAL_DSI_SetGenericVCID>
 8000dfe:	4604      	mov	r4, r0
 8000e00:	b108      	cbz	r0, 8000e06 <main+0x34e>
 8000e02:	b672      	cpsid	i
  while (1)
 8000e04:	e7fe      	b.n	8000e04 <main+0x34c>
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e06:	2234      	movs	r2, #52	@ 0x34
 8000e08:	4601      	mov	r1, r0
 8000e0a:	a820      	add	r0, sp, #128	@ 0x80
  hltdc.Instance = LTDC;
 8000e0c:	4d71      	ldr	r5, [pc, #452]	@ (8000fd4 <main+0x51c>)
  LTDC_LayerCfgTypeDef pLayerCfg = {0};
 8000e0e:	f020 ff1f 	bl	8021c50 <memset>
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e12:	f8df c20c 	ldr.w	ip, [pc, #524]	@ 8001020 <main+0x568>
 8000e16:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
  hltdc.Init.AccumulatedActiveH = 482;
 8000e1a:	f44f 7ec9 	mov.w	lr, #402	@ 0x192
  hltdc.Init.AccumulatedVBP = 2;
 8000e1e:	f8c5 8020 	str.w	r8, [r5, #32]
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e22:	4628      	mov	r0, r5
  hltdc.Init.Backcolor.Blue = 0;
 8000e24:	86ac      	strh	r4, [r5, #52]	@ 0x34
  hltdc.Init.Backcolor.Red = 0;
 8000e26:	f885 4036 	strb.w	r4, [r5, #54]	@ 0x36
  hltdc.Init.HSPolarity = LTDC_HSPOLARITY_AH;
 8000e2a:	e9c5 c300 	strd	ip, r3, [r5]
  hltdc.Init.VSPolarity = LTDC_VSPOLARITY_AH;
 8000e2e:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
  hltdc.Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8000e32:	e9c5 3402 	strd	r3, r4, [r5, #8]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e36:	f44f 73f1 	mov.w	r3, #482	@ 0x1e2
  hltdc.Init.AccumulatedHBP = 2;
 8000e3a:	e9c5 4806 	strd	r4, r8, [r5, #24]
  hltdc.Init.AccumulatedActiveH = 482;
 8000e3e:	e9c5 e309 	strd	lr, r3, [r5, #36]	@ 0x24
  hltdc.Init.TotalHeigh = 483;
 8000e42:	f240 1893 	movw	r8, #403	@ 0x193
 8000e46:	f240 13e3 	movw	r3, #483	@ 0x1e3
  hltdc.Init.HorizontalSync = 0;
 8000e4a:	e9c5 4404 	strd	r4, r4, [r5, #16]
  hltdc.Init.TotalHeigh = 483;
 8000e4e:	e9c5 830b 	strd	r8, r3, [r5, #44]	@ 0x2c
  if (HAL_LTDC_Init(&hltdc) != HAL_OK)
 8000e52:	f008 f9c3 	bl	80091dc <HAL_LTDC_Init>
 8000e56:	4602      	mov	r2, r0
 8000e58:	b108      	cbz	r0, 8000e5e <main+0x3a6>
 8000e5a:	b672      	cpsid	i
  while (1)
 8000e5c:	e7fe      	b.n	8000e5c <main+0x3a4>
  pLayerCfg.Alpha = 255;
 8000e5e:	21ff      	movs	r1, #255	@ 0xff
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e60:	f44f 64c0 	mov.w	r4, #1536	@ 0x600
  pLayerCfg.WindowY1 = 480;
 8000e64:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
  pLayerCfg.WindowY0 = 0;
 8000e68:	9022      	str	r0, [sp, #136]	@ 0x88
  pLayerCfg.Backcolor.Blue = 0;
 8000e6a:	f8ad 00b0 	strh.w	r0, [sp, #176]	@ 0xb0
  pLayerCfg.Backcolor.Red = 0;
 8000e6e:	f88d 00b2 	strb.w	r0, [sp, #178]	@ 0xb2
  pLayerCfg.ImageHeight = 480;
 8000e72:	932b      	str	r3, [sp, #172]	@ 0xac
  pLayerCfg.Alpha0 = 0;
 8000e74:	e9cd 1025 	strd	r1, r0, [sp, #148]	@ 0x94
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8000e78:	2107      	movs	r1, #7
 8000e7a:	e9cd 4127 	strd	r4, r1, [sp, #156]	@ 0x9c
  pLayerCfg.FBStartAdress = 0xD0000000;
 8000e7e:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
  pLayerCfg.WindowX1 = 400;
 8000e82:	e9cd 0720 	strd	r0, r7, [sp, #128]	@ 0x80
  pLayerCfg.ImageWidth = 400;
 8000e86:	e9cd 1729 	strd	r1, r7, [sp, #164]	@ 0xa4
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e8a:	4628      	mov	r0, r5
 8000e8c:	a920      	add	r1, sp, #128	@ 0x80
  pLayerCfg.PixelFormat = LTDC_PIXEL_FORMAT_RGB888;
 8000e8e:	e9cd 3623 	strd	r3, r6, [sp, #140]	@ 0x8c
  if (HAL_LTDC_ConfigLayer(&hltdc, &pLayerCfg, 0) != HAL_OK)
 8000e92:	f008 fa58 	bl	8009346 <HAL_LTDC_ConfigLayer>
 8000e96:	4604      	mov	r4, r0
 8000e98:	b108      	cbz	r0, 8000e9e <main+0x3e6>
 8000e9a:	b672      	cpsid	i
  while (1)
 8000e9c:	e7fe      	b.n	8000e9c <main+0x3e4>
  __HAL_LTDC_DISABLE(&hltdc);
 8000e9e:	682a      	ldr	r2, [r5, #0]
  HAL_DSI_Start(&hdsi);
 8000ea0:	484b      	ldr	r0, [pc, #300]	@ (8000fd0 <main+0x518>)
  __HAL_LTDC_DISABLE(&hltdc);
 8000ea2:	6993      	ldr	r3, [r2, #24]
 8000ea4:	f023 0301 	bic.w	r3, r3, #1
 8000ea8:	6193      	str	r3, [r2, #24]
  HAL_DSI_Start(&hdsi);
 8000eaa:	f006 fb67 	bl	800757c <HAL_DSI_Start>
  IOCtx.Address     = 0;
 8000eae:	494a      	ldr	r1, [pc, #296]	@ (8000fd8 <main+0x520>)
  IOCtx.GetTick     = BSP_GetTick;
 8000eb0:	4b4a      	ldr	r3, [pc, #296]	@ (8000fdc <main+0x524>)
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000eb2:	484b      	ldr	r0, [pc, #300]	@ (8000fe0 <main+0x528>)
  IOCtx.GetTick     = BSP_GetTick;
 8000eb4:	60cb      	str	r3, [r1, #12]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8000fe4 <main+0x52c>)
  IOCtx.Address     = 0;
 8000eb8:	800c      	strh	r4, [r1, #0]
  IOCtx.WriteReg    = DSI_IO_Write;
 8000eba:	604b      	str	r3, [r1, #4]
  IOCtx.ReadReg     = DSI_IO_Read;
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <main+0x530>)
 8000ebe:	608b      	str	r3, [r1, #8]
  OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx);
 8000ec0:	f004 fce0 	bl	8005884 <OTM8009A_RegisterBusIO>
  OTM8009A_Init(&OTM8009AObj ,OTM8009A_FORMAT_RGB888, OTM8009A_ORIENTATION_LANDSCAPE);
 8000ec4:	4632      	mov	r2, r6
 8000ec6:	4621      	mov	r1, r4
 8000ec8:	4845      	ldr	r0, [pc, #276]	@ (8000fe0 <main+0x528>)
 8000eca:	f004 f94b 	bl	8005164 <OTM8009A_Init>
  HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPOFF, 0x00);
 8000ece:	2328      	movs	r3, #40	@ 0x28
 8000ed0:	2215      	movs	r2, #21
 8000ed2:	4621      	mov	r1, r4
 8000ed4:	483e      	ldr	r0, [pc, #248]	@ (8000fd0 <main+0x518>)
 8000ed6:	9400      	str	r4, [sp, #0]
 8000ed8:	f006 fb83 	bl	80075e2 <HAL_DSI_ShortWrite>
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000edc:	a92d      	add	r1, sp, #180	@ 0xb4
 8000ede:	483c      	ldr	r0, [pc, #240]	@ (8000fd0 <main+0x518>)
  LPCmd.LPDcsLongWrite = DSI_LP_DLW_DISABLE;
 8000ee0:	9437      	str	r4, [sp, #220]	@ 0xdc
  LPCmd.LPGenShortWriteOneP = DSI_LP_GSW1P_DISABLE;
 8000ee2:	e9cd 442d 	strd	r4, r4, [sp, #180]	@ 0xb4
  LPCmd.LPGenShortReadNoP = DSI_LP_GSR0P_DISABLE;
 8000ee6:	e9cd 442f 	strd	r4, r4, [sp, #188]	@ 0xbc
  LPCmd.LPGenShortReadTwoP = DSI_LP_GSR2P_DISABLE;
 8000eea:	e9cd 4431 	strd	r4, r4, [sp, #196]	@ 0xc4
  LPCmd.LPDcsShortWriteNoP = DSI_LP_DSW0P_DISABLE;
 8000eee:	e9cd 4433 	strd	r4, r4, [sp, #204]	@ 0xcc
  LPCmd.LPDcsShortReadNoP = DSI_LP_DSR0P_DISABLE;
 8000ef2:	e9cd 4435 	strd	r4, r4, [sp, #212]	@ 0xd4
  HAL_DSI_ConfigCommand(&hdsi, &LPCmd);
 8000ef6:	f006 fa59 	bl	80073ac <HAL_DSI_ConfigCommand>
  HAL_LTDC_SetPitch(&hltdc, 800, 0);
 8000efa:	4622      	mov	r2, r4
 8000efc:	f44f 7148 	mov.w	r1, #800	@ 0x320
 8000f00:	4628      	mov	r0, r5
 8000f02:	f008 fa4d 	bl	80093a0 <HAL_LTDC_SetPitch>
  __HAL_LTDC_ENABLE(&hltdc);
 8000f06:	682a      	ldr	r2, [r5, #0]
  hcrc.Instance = CRC;
 8000f08:	4838      	ldr	r0, [pc, #224]	@ (8000fec <main+0x534>)
  __HAL_LTDC_ENABLE(&hltdc);
 8000f0a:	6993      	ldr	r3, [r2, #24]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000f0c:	8084      	strh	r4, [r0, #4]
  __HAL_LTDC_ENABLE(&hltdc);
 8000f0e:	f043 0301 	orr.w	r3, r3, #1
 8000f12:	6193      	str	r3, [r2, #24]
  hcrc.Instance = CRC;
 8000f14:	4b36      	ldr	r3, [pc, #216]	@ (8000ff0 <main+0x538>)
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000f16:	6206      	str	r6, [r0, #32]
  hcrc.Instance = CRC;
 8000f18:	6003      	str	r3, [r0, #0]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000f1a:	e9c0 4405 	strd	r4, r4, [r0, #20]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000f1e:	f005 fc77 	bl	8006810 <HAL_CRC_Init>
 8000f22:	b108      	cbz	r0, 8000f28 <main+0x470>
 8000f24:	b672      	cpsid	i
  while (1)
 8000f26:	e7fe      	b.n	8000f26 <main+0x46e>
  hjpeg.Instance = JPEG;
 8000f28:	4832      	ldr	r0, [pc, #200]	@ (8000ff4 <main+0x53c>)
 8000f2a:	4b33      	ldr	r3, [pc, #204]	@ (8000ff8 <main+0x540>)
 8000f2c:	6003      	str	r3, [r0, #0]
  if (HAL_JPEG_Init(&hjpeg) != HAL_OK)
 8000f2e:	f007 fb43 	bl	80085b8 <HAL_JPEG_Init>
 8000f32:	b108      	cbz	r0, 8000f38 <main+0x480>
 8000f34:	b672      	cpsid	i
  while (1)
 8000f36:	e7fe      	b.n	8000f36 <main+0x47e>
  huart1.Instance = USART1;
 8000f38:	4c30      	ldr	r4, [pc, #192]	@ (8000ffc <main+0x544>)
  huart1.Init.BaudRate = 115200;
 8000f3a:	f44f 33e1 	mov.w	r3, #115200	@ 0x1c200
 8000f3e:	4830      	ldr	r0, [pc, #192]	@ (8001000 <main+0x548>)
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f40:	220c      	movs	r2, #12
  huart1.Init.BaudRate = 115200;
 8000f42:	e9c4 0300 	strd	r0, r3, [r4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000f46:	2300      	movs	r3, #0
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f48:	4620      	mov	r0, r4
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000f4a:	e9c4 3302 	strd	r3, r3, [r4, #8]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000f4e:	6123      	str	r3, [r4, #16]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f50:	e9c4 2305 	strd	r2, r3, [r4, #20]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000f54:	e9c4 3307 	strd	r3, r3, [r4, #28]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000f58:	e9c4 3309 	strd	r3, r3, [r4, #36]	@ 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f5c:	f00b fad9 	bl	800c512 <HAL_UART_Init>
 8000f60:	4601      	mov	r1, r0
 8000f62:	b108      	cbz	r0, 8000f68 <main+0x4b0>
 8000f64:	b672      	cpsid	i
  while (1)
 8000f66:	e7fe      	b.n	8000f66 <main+0x4ae>
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f68:	4620      	mov	r0, r4
 8000f6a:	f00b fb43 	bl	800c5f4 <HAL_UARTEx_SetTxFifoThreshold>
 8000f6e:	4601      	mov	r1, r0
 8000f70:	b108      	cbz	r0, 8000f76 <main+0x4be>
 8000f72:	b672      	cpsid	i
  while (1)
 8000f74:	e7fe      	b.n	8000f74 <main+0x4bc>
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000f76:	4620      	mov	r0, r4
 8000f78:	f00b fb5c 	bl	800c634 <HAL_UARTEx_SetRxFifoThreshold>
 8000f7c:	b108      	cbz	r0, 8000f82 <main+0x4ca>
 8000f7e:	b672      	cpsid	i
  while (1)
 8000f80:	e7fe      	b.n	8000f80 <main+0x4c8>
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000f82:	4620      	mov	r0, r4
 8000f84:	f00b fb1b 	bl	800c5be <HAL_UARTEx_DisableFifoMode>
 8000f88:	4605      	mov	r5, r0
 8000f8a:	b108      	cbz	r0, 8000f90 <main+0x4d8>
 8000f8c:	b672      	cpsid	i
  while (1)
 8000f8e:	e7fe      	b.n	8000f8e <main+0x4d6>
  MX_TouchGFX_Init();
 8000f90:	f000 fe12 	bl	8001bb8 <MX_TouchGFX_Init>
  MX_TouchGFX_PreOSInit();
 8000f94:	f000 fe0f 	bl	8001bb6 <MX_TouchGFX_PreOSInit>
  HAL_UART_Transmit(&huart1, (uint8_t *)"Hell", strlen("Hell"), HAL_MAX_DELAY);
 8000f98:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9c:	2204      	movs	r2, #4
 8000f9e:	4919      	ldr	r1, [pc, #100]	@ (8001004 <main+0x54c>)
 8000fa0:	4620      	mov	r0, r4
 8000fa2:	f00b fa06 	bl	800c3b2 <HAL_UART_Transmit>
  (void)BSP_I2C4_Init();
 8000fa6:	f004 fcd5 	bl	8005954 <BSP_I2C4_Init>
  osKernelInitialize();
 8000faa:	f00b fc09 	bl	800c7c0 <osKernelInitialize>
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fae:	4a16      	ldr	r2, [pc, #88]	@ (8001008 <main+0x550>)
 8000fb0:	4629      	mov	r1, r5
 8000fb2:	4816      	ldr	r0, [pc, #88]	@ (800100c <main+0x554>)
 8000fb4:	f00b fc30 	bl	800c818 <osThreadNew>
 8000fb8:	4b15      	ldr	r3, [pc, #84]	@ (8001010 <main+0x558>)
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fba:	4a16      	ldr	r2, [pc, #88]	@ (8001014 <main+0x55c>)
 8000fbc:	4629      	mov	r1, r5
  TouchGFXTaskHandle = osThreadNew(TouchGFX_Task, NULL, &TouchGFXTask_attributes);
 8000fbe:	6018      	str	r0, [r3, #0]
  videoTaskHandle = osThreadNew(videoTaskFunc, NULL, &videoTask_attributes);
 8000fc0:	4815      	ldr	r0, [pc, #84]	@ (8001018 <main+0x560>)
 8000fc2:	f00b fc29 	bl	800c818 <osThreadNew>
 8000fc6:	4b15      	ldr	r3, [pc, #84]	@ (800101c <main+0x564>)
 8000fc8:	6018      	str	r0, [r3, #0]
  osKernelStart();
 8000fca:	f00b fc0b 	bl	800c7e4 <osKernelStart>
  while (1)
 8000fce:	e7fe      	b.n	8000fce <main+0x516>
 8000fd0:	240006c0 	.word	0x240006c0
 8000fd4:	240004e8 	.word	0x240004e8
 8000fd8:	2400039c 	.word	0x2400039c
 8000fdc:	08005c65 	.word	0x08005c65
 8000fe0:	240003ac 	.word	0x240003ac
 8000fe4:	08002161 	.word	0x08002161
 8000fe8:	08002199 	.word	0x08002199
 8000fec:	24000744 	.word	0x24000744
 8000ff0:	58024c00 	.word	0x58024c00
 8000ff4:	24000668 	.word	0x24000668
 8000ff8:	52003000 	.word	0x52003000
 8000ffc:	24000408 	.word	0x24000408
 8001000:	40011000 	.word	0x40011000
 8001004:	08022880 	.word	0x08022880
 8001008:	080228c0 	.word	0x080228c0
 800100c:	08001bc7 	.word	0x08001bc7
 8001010:	240003d0 	.word	0x240003d0
 8001014:	0802289c 	.word	0x0802289c
 8001018:	08003cf5 	.word	0x08003cf5
 800101c:	240003cc 	.word	0x240003cc
 8001020:	50001000 	.word	0x50001000
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001024:	2214      	movs	r2, #20
 8001026:	2100      	movs	r1, #0
 8001028:	a82d      	add	r0, sp, #180	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800102a:	2600      	movs	r6, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800102c:	f020 fe10 	bl	8021c50 <memset>
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001030:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001034:	2200      	movs	r2, #0
 8001036:	f241 3108 	movw	r1, #4872	@ 0x1308
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800103a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 800103e:	489a      	ldr	r0, [pc, #616]	@ (80012a8 <main+0x7f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2501      	movs	r5, #1
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001042:	2703      	movs	r7, #3
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001044:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001048:	f44f 7880 	mov.w	r8, #256	@ 0x100
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800104c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001050:	f04f 0a02 	mov.w	sl, #2
  GPIO_InitStruct.Pin = LCD_RESET_Pin;
 8001054:	f04f 0908 	mov.w	r9, #8
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8001058:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800105c:	9304      	str	r3, [sp, #16]
 800105e:	9b04      	ldr	r3, [sp, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001060:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001064:	f043 0302 	orr.w	r3, r3, #2
 8001068:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800106c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001070:	f003 0302 	and.w	r3, r3, #2
 8001074:	9305      	str	r3, [sp, #20]
 8001076:	9b05      	ldr	r3, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001078:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800107c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001080:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001084:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800108c:	9306      	str	r3, [sp, #24]
 800108e:	9b06      	ldr	r3, [sp, #24]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001090:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001094:	f043 0310 	orr.w	r3, r3, #16
 8001098:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800109c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010a0:	f003 0310 	and.w	r3, r3, #16
 80010a4:	9307      	str	r3, [sp, #28]
 80010a6:	9b07      	ldr	r3, [sp, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80010a8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010ac:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80010b0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010b4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010b8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80010bc:	9308      	str	r3, [sp, #32]
 80010be:	9b08      	ldr	r3, [sp, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010c0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010c4:	f043 0304 	orr.w	r3, r3, #4
 80010c8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010cc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010d0:	f003 0304 	and.w	r3, r3, #4
 80010d4:	9309      	str	r3, [sp, #36]	@ 0x24
 80010d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
  __HAL_RCC_GPIOJ_CLK_ENABLE();
 80010d8:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010dc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80010e0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010e4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010ec:	930a      	str	r3, [sp, #40]	@ 0x28
 80010ee:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80010f0:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 80010f4:	f043 0308 	orr.w	r3, r3, #8
 80010f8:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 80010fc:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001100:	f003 0308 	and.w	r3, r3, #8
 8001104:	930b      	str	r3, [sp, #44]	@ 0x2c
 8001106:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001108:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800110c:	f043 0301 	orr.w	r3, r3, #1
 8001110:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 8001114:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	930c      	str	r3, [sp, #48]	@ 0x30
 800111e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001120:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001124:	f043 0320 	orr.w	r3, r3, #32
 8001128:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800112c:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 8001130:	f003 0320 	and.w	r3, r3, #32
 8001134:	930d      	str	r3, [sp, #52]	@ 0x34
 8001136:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
  HAL_GPIO_WritePin(GPIOJ, LCD_BL_Pin|FRAME_RATE_Pin|RENDER_TIME_Pin|VSYNC_FREQ_Pin, GPIO_PIN_RESET);
 8001138:	f006 fce4 	bl	8007b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(GPIOI, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);
 800113c:	2200      	movs	r2, #0
 800113e:	f44f 4170 	mov.w	r1, #61440	@ 0xf000
 8001142:	485a      	ldr	r0, [pc, #360]	@ (80012ac <main+0x7f4>)
 8001144:	f006 fcde 	bl	8007b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_Port, LCD_RESET_Pin, GPIO_PIN_RESET);
 8001148:	2200      	movs	r2, #0
 800114a:	2108      	movs	r1, #8
 800114c:	4858      	ldr	r0, [pc, #352]	@ (80012b0 <main+0x7f8>)
 800114e:	f006 fcd9 	bl	8007b04 <HAL_GPIO_WritePin>
  HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, GPIO_PIN_RESET);
 8001152:	2200      	movs	r2, #0
 8001154:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001158:	4856      	ldr	r0, [pc, #344]	@ (80012b4 <main+0x7fc>)
 800115a:	f006 fcd3 	bl	8007b04 <HAL_GPIO_WritePin>
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800115e:	f241 3308 	movw	r3, #4872	@ 0x1308
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001162:	a92d      	add	r1, sp, #180	@ 0xb4
 8001164:	4850      	ldr	r0, [pc, #320]	@ (80012a8 <main+0x7f0>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001166:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800116a:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 800116e:	f006 fb3f 	bl	80077f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001172:	a92d      	add	r1, sp, #180	@ 0xb4
 8001174:	4850      	ldr	r0, [pc, #320]	@ (80012b8 <main+0x800>)
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8001176:	9631      	str	r6, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	e9cd 8a2d 	strd	r8, sl, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117c:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001180:	f006 fb36 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8001184:	f44f 4370 	mov.w	r3, #61440	@ 0xf000
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001188:	a92d      	add	r1, sp, #180	@ 0xb4
 800118a:	4848      	ldr	r0, [pc, #288]	@ (80012ac <main+0x7f4>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800118c:	e9cd 352d 	strd	r3, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001190:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001194:	f006 fb2c 	bl	80077f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 8001198:	a92d      	add	r1, sp, #180	@ 0xb4
 800119a:	4845      	ldr	r0, [pc, #276]	@ (80012b0 <main+0x7f8>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800119c:	e9cd 952d 	strd	r9, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011a0:	e9cd 572f 	strd	r5, r7, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(LCD_RESET_GPIO_Port, &GPIO_InitStruct);
 80011a4:	f006 fb24 	bl	80077f0 <HAL_GPIO_Init>
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011a8:	a92d      	add	r1, sp, #180	@ 0xb4
 80011aa:	4842      	ldr	r0, [pc, #264]	@ (80012b4 <main+0x7fc>)
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ac:	e9cd 852d 	strd	r8, r5, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80011b0:	e9cd 672f 	strd	r6, r7, [sp, #188]	@ 0xbc
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011b4:	f04f 0804 	mov.w	r8, #4
  HAL_GPIO_Init(MCU_ACTIVE_GPIO_Port, &GPIO_InitStruct);
 80011b8:	f006 fb1a 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011bc:	f44f 5240 	mov.w	r2, #12288	@ 0x3000
 80011c0:	2312      	movs	r3, #18
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011c2:	a92d      	add	r1, sp, #180	@ 0xb4
 80011c4:	483d      	ldr	r0, [pc, #244]	@ (80012bc <main+0x804>)
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 80011c6:	f8cd 80c4 	str.w	r8, [sp, #196]	@ 0xc4
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80011ca:	e9cd 232d 	strd	r2, r3, [sp, #180]	@ 0xb4
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ce:	e9cd 662f 	strd	r6, r6, [sp, #188]	@ 0xbc
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80011d2:	f006 fb0d 	bl	80077f0 <HAL_GPIO_Init>
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011d6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011da:	4632      	mov	r2, r6
 80011dc:	2105      	movs	r1, #5
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011de:	432b      	orrs	r3, r5
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011e0:	207a      	movs	r0, #122	@ 0x7a
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011e2:	f8c4 30d4 	str.w	r3, [r4, #212]	@ 0xd4
 80011e6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	@ 0xd4
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 80011ea:	2440      	movs	r4, #64	@ 0x40
  __HAL_RCC_MDMA_CLK_ENABLE();
 80011ec:	402b      	ands	r3, r5
 80011ee:	9303      	str	r3, [sp, #12]
 80011f0:	9b03      	ldr	r3, [sp, #12]
  HAL_NVIC_SetPriority(MDMA_IRQn, 5, 0);
 80011f2:	f005 fa71 	bl	80066d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(MDMA_IRQn);
 80011f6:	207a      	movs	r0, #122	@ 0x7a
 80011f8:	f005 faa0 	bl	800673c <HAL_NVIC_EnableIRQ>
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 80011fc:	4a30      	ldr	r2, [pc, #192]	@ (80012c0 <main+0x808>)
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 80011fe:	4831      	ldr	r0, [pc, #196]	@ (80012c4 <main+0x80c>)
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001200:	f44f 6100 	mov.w	r1, #2048	@ 0x800
  FMC_Bank1_R->BTCR[0] &= ~FMC_BCRx_MBKEN;
 8001204:	6813      	ldr	r3, [r2, #0]
 8001206:	f023 0301 	bic.w	r3, r3, #1
 800120a:	6013      	str	r3, [r2, #0]
  hsdram1.Instance = FMC_SDRAM_DEVICE;
 800120c:	4b2e      	ldr	r3, [pc, #184]	@ (80012c8 <main+0x810>)
  hsdram1.Init.ReadPipeDelay = FMC_SDRAM_RPIPE_DELAY_0;
 800120e:	6286      	str	r6, [r0, #40]	@ 0x28
  SdramTiming.LoadToActiveDelay = 2;
 8001210:	f8cd a0b4 	str.w	sl, [sp, #180]	@ 0xb4
  hsdram1.Init.SDBank = FMC_SDRAM_BANK2;
 8001214:	e9c0 3500 	strd	r3, r5, [r0]
  hsdram1.Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8001218:	2320      	movs	r3, #32
 800121a:	e9c0 3404 	strd	r3, r4, [r0, #16]
  hsdram1.Init.CASLatency = FMC_SDRAM_CAS_LATENCY_3;
 800121e:	f44f 73c0 	mov.w	r3, #384	@ 0x180
  hsdram1.Init.WriteProtection = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8001222:	e9c0 3606 	strd	r3, r6, [r0, #24]
  hsdram1.Init.ReadBurst = FMC_SDRAM_RBURST_ENABLE;
 8001226:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800122a:	e9c0 1308 	strd	r1, r3, [r0, #32]
  SdramTiming.ExitSelfRefreshDelay = 7;
 800122e:	2307      	movs	r3, #7
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001230:	a92d      	add	r1, sp, #180	@ 0xb4
  hsdram1.Init.RowBitsNumber = FMC_SDRAM_ROW_BITS_NUM_12;
 8001232:	e9c0 5802 	strd	r5, r8, [r0, #8]
  SdramTiming.SelfRefreshTime = 4;
 8001236:	e9cd 382e 	strd	r3, r8, [sp, #184]	@ 0xb8
  SdramTiming.WriteRecoveryTime = 3;
 800123a:	e9cd 3730 	strd	r3, r7, [sp, #192]	@ 0xc0
  SdramTiming.RCDDelay = 2;
 800123e:	e9cd aa32 	strd	sl, sl, [sp, #200]	@ 0xc8
  if (HAL_SDRAM_Init(&hsdram1, &SdramTiming) != HAL_OK)
 8001242:	f00a fa79 	bl	800b738 <HAL_SDRAM_Init>
 8001246:	4606      	mov	r6, r0
 8001248:	2800      	cmp	r0, #0
 800124a:	f47f acd8 	bne.w	8000bfe <main+0x146>
  BSP_SDRAM_DeInit(0);
 800124e:	f004 ff2f 	bl	80060b0 <BSP_SDRAM_DeInit>
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8001252:	4630      	mov	r0, r6
 8001254:	f004 ff7a 	bl	800614c <BSP_SDRAM_Init>
 8001258:	4603      	mov	r3, r0
 800125a:	2800      	cmp	r0, #0
 800125c:	f43f acd1 	beq.w	8000c02 <main+0x14a>
 8001260:	b672      	cpsid	i
  while (1)
 8001262:	e7fe      	b.n	8001262 <main+0x7aa>
  HAL_Init();
 8001264:	f005 f9ce 	bl	8006604 <HAL_Init>
  SystemClock_Config();
 8001268:	f7ff fbc4 	bl	80009f4 <SystemClock_Config>
__HAL_RCC_HSEM_CLK_ENABLE();
 800126c:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
HAL_HSEM_FastTake(HSEM_ID_0);
 8001270:	4620      	mov	r0, r4
__HAL_RCC_HSEM_CLK_ENABLE();
 8001272:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001276:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 800127a:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 800127e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001282:	9302      	str	r3, [sp, #8]
 8001284:	9b02      	ldr	r3, [sp, #8]
HAL_HSEM_FastTake(HSEM_ID_0);
 8001286:	f006 fc4b 	bl	8007b20 <HAL_HSEM_FastTake>
HAL_HSEM_Release(HSEM_ID_0,0);
 800128a:	4621      	mov	r1, r4
 800128c:	4620      	mov	r0, r4
 800128e:	f006 fc55 	bl	8007b3c <HAL_HSEM_Release>
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001292:	4c0e      	ldr	r4, [pc, #56]	@ (80012cc <main+0x814>)
timeout = 0xFFFF;
 8001294:	f64f 73ff 	movw	r3, #65535	@ 0xffff
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8001298:	6822      	ldr	r2, [r4, #0]
 800129a:	0412      	lsls	r2, r2, #16
 800129c:	f53f aec2 	bmi.w	8001024 <main+0x56c>
 80012a0:	3b01      	subs	r3, #1
 80012a2:	d2f9      	bcs.n	8001298 <main+0x7e0>
 80012a4:	b672      	cpsid	i
  while (1)
 80012a6:	e7fe      	b.n	80012a6 <main+0x7ee>
 80012a8:	58022400 	.word	0x58022400
 80012ac:	58022000 	.word	0x58022000
 80012b0:	58021800 	.word	0x58021800
 80012b4:	58021400 	.word	0x58021400
 80012b8:	58020000 	.word	0x58020000
 80012bc:	58020c00 	.word	0x58020c00
 80012c0:	52004000 	.word	0x52004000
 80012c4:	240003d4 	.word	0x240003d4
 80012c8:	52004140 	.word	0x52004140
 80012cc:	58024400 	.word	0x58024400

080012d0 <HAL_TIM_PeriodElapsedCallback>:
  if (htim->Instance == TIM6) {
 80012d0:	6802      	ldr	r2, [r0, #0]
 80012d2:	4b03      	ldr	r3, [pc, #12]	@ (80012e0 <HAL_TIM_PeriodElapsedCallback+0x10>)
 80012d4:	429a      	cmp	r2, r3
 80012d6:	d101      	bne.n	80012dc <HAL_TIM_PeriodElapsedCallback+0xc>
    HAL_IncTick();
 80012d8:	f005 b9c2 	b.w	8006660 <HAL_IncTick>
}
 80012dc:	4770      	bx	lr
 80012de:	bf00      	nop
 80012e0:	40001000 	.word	0x40001000

080012e4 <Error_Handler>:
 80012e4:	b672      	cpsid	i
  while (1)
 80012e6:	e7fe      	b.n	80012e6 <Error_Handler+0x2>

080012e8 <HAL_MspInit>:

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e8:	4b0a      	ldr	r3, [pc, #40]	@ (8001314 <HAL_MspInit+0x2c>)
{
 80012ea:	b082      	sub	sp, #8

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012ec:	210f      	movs	r1, #15
 80012ee:	f06f 0001 	mvn.w	r0, #1
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012f2:	f8d3 20f4 	ldr.w	r2, [r3, #244]	@ 0xf4
 80012f6:	f042 0202 	orr.w	r2, r2, #2
 80012fa:	f8c3 20f4 	str.w	r2, [r3, #244]	@ 0xf4
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80012fe:	2200      	movs	r2, #0
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001300:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8001304:	f003 0302 	and.w	r3, r3, #2
 8001308:	9301      	str	r3, [sp, #4]
 800130a:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800130c:	b002      	add	sp, #8
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800130e:	f005 b9e3 	b.w	80066d8 <HAL_NVIC_SetPriority>
 8001312:	bf00      	nop
 8001314:	58024400 	.word	0x58024400

08001318 <HAL_CRC_MspInit>:
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
  if(hcrc->Instance==CRC)
 8001318:	6802      	ldr	r2, [r0, #0]
{
 800131a:	b082      	sub	sp, #8
  if(hcrc->Instance==CRC)
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <HAL_CRC_MspInit+0x2c>)
 800131e:	429a      	cmp	r2, r3
 8001320:	d10d      	bne.n	800133e <HAL_CRC_MspInit+0x26>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001322:	f5a3 6300 	sub.w	r3, r3, #2048	@ 0x800
 8001326:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800132a:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800132e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001332:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001336:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800133a:	9301      	str	r3, [sp, #4]
 800133c:	9b01      	ldr	r3, [sp, #4]

  /* USER CODE END CRC_MspInit 1 */

  }

}
 800133e:	b002      	add	sp, #8
 8001340:	4770      	bx	lr
 8001342:	bf00      	nop
 8001344:	58024c00 	.word	0x58024c00

08001348 <HAL_DMA2D_MspInit>:
* @param hdma2d: DMA2D handle pointer
* @retval None
*/
void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef* hdma2d)
{
  if(hdma2d->Instance==DMA2D)
 8001348:	4b0f      	ldr	r3, [pc, #60]	@ (8001388 <HAL_DMA2D_MspInit+0x40>)
{
 800134a:	b507      	push	{r0, r1, r2, lr}
  if(hdma2d->Instance==DMA2D)
 800134c:	6802      	ldr	r2, [r0, #0]
 800134e:	429a      	cmp	r2, r3
 8001350:	d117      	bne.n	8001382 <HAL_DMA2D_MspInit+0x3a>
  {
  /* USER CODE BEGIN DMA2D_MspInit 0 */

  /* USER CODE END DMA2D_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001352:	4b0e      	ldr	r3, [pc, #56]	@ (800138c <HAL_DMA2D_MspInit+0x44>)
    /* DMA2D interrupt Init */
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001354:	2107      	movs	r1, #7
 8001356:	205a      	movs	r0, #90	@ 0x5a
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001358:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800135c:	f042 0210 	orr.w	r2, r2, #16
 8001360:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001364:	2200      	movs	r2, #0
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8001366:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800136a:	f003 0310 	and.w	r3, r3, #16
 800136e:	9301      	str	r3, [sp, #4]
 8001370:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(DMA2D_IRQn, 7, 0);
 8001372:	f005 f9b1 	bl	80066d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8001376:	205a      	movs	r0, #90	@ 0x5a

  /* USER CODE END DMA2D_MspInit 1 */

  }

}
 8001378:	b003      	add	sp, #12
 800137a:	f85d eb04 	ldr.w	lr, [sp], #4
    HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800137e:	f005 b9dd 	b.w	800673c <HAL_NVIC_EnableIRQ>
}
 8001382:	b003      	add	sp, #12
 8001384:	f85d fb04 	ldr.w	pc, [sp], #4
 8001388:	52001000 	.word	0x52001000
 800138c:	58024400 	.word	0x58024400

08001390 <HAL_DSI_MspInit>:
* This function configures the hardware resources used in this example
* @param hdsi: DSI handle pointer
* @retval None
*/
void HAL_DSI_MspInit(DSI_HandleTypeDef* hdsi)
{
 8001390:	b510      	push	{r4, lr}
 8001392:	b0ba      	sub	sp, #232	@ 0xe8
 8001394:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001396:	2214      	movs	r2, #20
 8001398:	2100      	movs	r1, #0
 800139a:	a803      	add	r0, sp, #12
 800139c:	f020 fc58 	bl	8021c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80013a0:	22c8      	movs	r2, #200	@ 0xc8
 80013a2:	2100      	movs	r1, #0
 80013a4:	a808      	add	r0, sp, #32
 80013a6:	f020 fc53 	bl	8021c50 <memset>
  if(hdsi->Instance==DSI)
 80013aa:	6823      	ldr	r3, [r4, #0]
 80013ac:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80013b0:	d138      	bne.n	8001424 <HAL_DSI_MspInit+0x94>

  /* USER CODE END DSI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013b2:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 80013b6:	2300      	movs	r3, #0
    PeriphClkInitStruct.DsiClockSelection = RCC_DSICLKSOURCE_PHY;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013b8:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_DSI;
 80013ba:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80013be:	f009 fb47 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 80013c2:	b108      	cbz	r0, 80013c8 <HAL_DSI_MspInit+0x38>
    {
      Error_Handler();
 80013c4:	f7ff ff8e 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_DSI_CLK_ENABLE();
 80013c8:	4b17      	ldr	r3, [pc, #92]	@ (8001428 <HAL_DSI_MspInit+0x98>)
    DSI_D0N     ------> DSIHOST_D0N
    PJ2     ------> DSIHOST_TE
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 80013cc:	a903      	add	r1, sp, #12
 80013ce:	4817      	ldr	r0, [pc, #92]	@ (800142c <HAL_DSI_MspInit+0x9c>)
    __HAL_RCC_DSI_CLK_ENABLE();
 80013d0:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013d4:	f042 0210 	orr.w	r2, r2, #16
 80013d8:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
 80013dc:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 80013e0:	f002 0210 	and.w	r2, r2, #16
 80013e4:	9201      	str	r2, [sp, #4]
 80013e6:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80013ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80013f0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013f4:	2204      	movs	r2, #4
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 80013f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80013fa:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fe:	9302      	str	r3, [sp, #8]
 8001400:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001402:	2302      	movs	r3, #2
 8001404:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 8001408:	230d      	movs	r3, #13
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800140a:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF13_DSI;
 800140e:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOJ, &GPIO_InitStruct);
 8001410:	f006 f9ee 	bl	80077f0 <HAL_GPIO_Init>

    /* DSI interrupt Init */
    HAL_NVIC_SetPriority(DSI_IRQn, 7, 0);
 8001414:	207b      	movs	r0, #123	@ 0x7b
 8001416:	4622      	mov	r2, r4
 8001418:	2107      	movs	r1, #7
 800141a:	f005 f95d 	bl	80066d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(DSI_IRQn);
 800141e:	207b      	movs	r0, #123	@ 0x7b
 8001420:	f005 f98c 	bl	800673c <HAL_NVIC_EnableIRQ>

  /* USER CODE END DSI_MspInit 1 */

  }

}
 8001424:	b03a      	add	sp, #232	@ 0xe8
 8001426:	bd10      	pop	{r4, pc}
 8001428:	58024400 	.word	0x58024400
 800142c:	58022400 	.word	0x58022400

08001430 <HAL_JPEG_MspInit>:
* This function configures the hardware resources used in this example
* @param hjpeg: JPEG handle pointer
* @retval None
*/
void HAL_JPEG_MspInit(JPEG_HandleTypeDef* hjpeg)
{
 8001430:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(hjpeg->Instance==JPEG)
 8001432:	4b3c      	ldr	r3, [pc, #240]	@ (8001524 <HAL_JPEG_MspInit+0xf4>)
{
 8001434:	4605      	mov	r5, r0
  if(hjpeg->Instance==JPEG)
 8001436:	6802      	ldr	r2, [r0, #0]
 8001438:	429a      	cmp	r2, r3
 800143a:	d170      	bne.n	800151e <HAL_JPEG_MspInit+0xee>
  {
  /* USER CODE BEGIN JPEG_MspInit 0 */

  /* USER CODE END JPEG_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_JPEG_CLK_ENABLE();
 800143c:	4b3a      	ldr	r3, [pc, #232]	@ (8001528 <HAL_JPEG_MspInit+0xf8>)
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
    hmdma_jpeg_infifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_infifo_th.Init.SourceInc = MDMA_SRC_INC_BYTE;
 800143e:	2102      	movs	r1, #2
    hmdma_jpeg_infifo_th.Instance = MDMA_Channel7;
 8001440:	4c3a      	ldr	r4, [pc, #232]	@ (800152c <HAL_JPEG_MspInit+0xfc>)
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
    hmdma_jpeg_infifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_BYTE;
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
    hmdma_jpeg_infifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001442:	f04f 7e00 	mov.w	lr, #33554432	@ 0x2000000
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001446:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 800144a:	f8df c0ec 	ldr.w	ip, [pc, #236]	@ 8001538 <HAL_JPEG_MspInit+0x108>
    hmdma_jpeg_infifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
    hmdma_jpeg_infifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 800144e:	4620      	mov	r0, r4
    __HAL_RCC_JPEG_CLK_ENABLE();
 8001450:	f042 0220 	orr.w	r2, r2, #32
 8001454:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 8001458:	2280      	movs	r2, #128	@ 0x80
    __HAL_RCC_JPEG_CLK_ENABLE();
 800145a:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800145e:	f003 0320 	and.w	r3, r3, #32
 8001462:	9301      	str	r3, [sp, #4]
 8001464:	9b01      	ldr	r3, [sp, #4]
    hmdma_jpeg_infifo_th.Init.Request = MDMA_REQUEST_JPEG_INFIFO_TH;
 8001466:	2311      	movs	r3, #17
 8001468:	e9c4 c300 	strd	ip, r3, [r4]
    hmdma_jpeg_infifo_th.Init.Priority = MDMA_PRIORITY_HIGH;
 800146c:	2300      	movs	r3, #0
 800146e:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_infifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_WORD;
 8001472:	e9c4 3207 	strd	r3, r2, [r4, #28]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 8001476:	2220      	movs	r2, #32
    hmdma_jpeg_infifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8001478:	6123      	str	r3, [r4, #16]
    hmdma_jpeg_infifo_th.Init.DestinationInc = MDMA_DEST_INC_DISABLE;
 800147a:	e9c4 1305 	strd	r1, r3, [r4, #20]
    hmdma_jpeg_infifo_th.Init.BufferTransferLength = 32;
 800147e:	e9c4 e209 	strd	lr, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 8001482:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001486:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
    hmdma_jpeg_infifo_th.Init.DestBlockAddressOffset = 0;
 800148a:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    hmdma_jpeg_infifo_th.Init.DestBurst = MDMA_DEST_BURST_16BEATS;
 800148e:	e9c4 120b 	strd	r1, r2, [r4, #44]	@ 0x2c
    if (HAL_MDMA_Init(&hmdma_jpeg_infifo_th) != HAL_OK)
 8001492:	f007 fff0 	bl	8009476 <HAL_MDMA_Init>
 8001496:	b108      	cbz	r0, 800149c <HAL_JPEG_MspInit+0x6c>
    {
      Error_Handler();
 8001498:	f7ff ff24 	bl	80012e4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_infifo_th, 0, 0) != HAL_OK)
 800149c:	2200      	movs	r2, #0
 800149e:	4823      	ldr	r0, [pc, #140]	@ (800152c <HAL_JPEG_MspInit+0xfc>)
 80014a0:	4611      	mov	r1, r2
 80014a2:	f008 f876 	bl	8009592 <HAL_MDMA_ConfigPostRequestMask>
 80014a6:	b108      	cbz	r0, 80014ac <HAL_JPEG_MspInit+0x7c>
    {
      Error_Handler();
 80014a8:	f7ff ff1c 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014ac:	632c      	str	r4, [r5, #48]	@ 0x30

    /* JPEG_OUTFIFO_TH Init */
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014ae:	2313      	movs	r3, #19
 80014b0:	4a1f      	ldr	r2, [pc, #124]	@ (8001530 <HAL_JPEG_MspInit+0x100>)
    hmdma_jpeg_outfifo_th.Init.TransferTriggerMode = MDMA_BUFFER_TRANSFER;
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
    hmdma_jpeg_outfifo_th.Init.Endianness = MDMA_LITTLE_ENDIANNESS_PRESERVE;
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
    hmdma_jpeg_outfifo_th.Init.DestinationInc = MDMA_DEST_INC_BYTE;
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014b2:	2108      	movs	r1, #8
    __HAL_LINKDMA(hjpeg,hdmain,hmdma_jpeg_infifo_th);
 80014b4:	6425      	str	r5, [r4, #64]	@ 0x40
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
    hmdma_jpeg_outfifo_th.Init.SourceBurst = MDMA_SOURCE_BURST_32BEATS;
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014b6:	f44f 40a0 	mov.w	r0, #20480	@ 0x5000
    hmdma_jpeg_outfifo_th.Instance = MDMA_Channel6;
 80014ba:	4c1e      	ldr	r4, [pc, #120]	@ (8001534 <HAL_JPEG_MspInit+0x104>)
    hmdma_jpeg_outfifo_th.Init.Request = MDMA_REQUEST_JPEG_OUTFIFO_TH;
 80014bc:	e9c4 2300 	strd	r2, r3, [r4]
    hmdma_jpeg_outfifo_th.Init.Priority = MDMA_PRIORITY_VERY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	22c0      	movs	r2, #192	@ 0xc0
 80014c4:	e9c4 3202 	strd	r3, r2, [r4, #8]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014c8:	2220      	movs	r2, #32
    hmdma_jpeg_outfifo_th.Init.DestDataSize = MDMA_DEST_DATASIZE_BYTE;
 80014ca:	6223      	str	r3, [r4, #32]
    hmdma_jpeg_outfifo_th.Init.SourceDataSize = MDMA_SRC_DATASIZE_WORD;
 80014cc:	e9c4 1206 	strd	r1, r2, [r4, #24]
    hmdma_jpeg_outfifo_th.Init.DataAlignment = MDMA_DATAALIGN_PACKENABLE;
 80014d0:	f04f 7100 	mov.w	r1, #33554432	@ 0x2000000
    hmdma_jpeg_outfifo_th.Init.BufferTransferLength = 32;
 80014d4:	e9c4 1209 	strd	r1, r2, [r4, #36]	@ 0x24
    hmdma_jpeg_outfifo_th.Init.DestBurst = MDMA_DEST_BURST_32BEATS;
 80014d8:	f44f 3220 	mov.w	r2, #163840	@ 0x28000
 80014dc:	e9c4 020b 	strd	r0, r2, [r4, #44]	@ 0x2c
    hmdma_jpeg_outfifo_th.Init.SourceBlockAddressOffset = 0;
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014e0:	4620      	mov	r0, r4
    hmdma_jpeg_outfifo_th.Init.SourceInc = MDMA_SRC_INC_DISABLE;
 80014e2:	e9c4 3304 	strd	r3, r3, [r4, #16]
    hmdma_jpeg_outfifo_th.Init.DestBlockAddressOffset = 0;
 80014e6:	e9c4 330d 	strd	r3, r3, [r4, #52]	@ 0x34
    if (HAL_MDMA_Init(&hmdma_jpeg_outfifo_th) != HAL_OK)
 80014ea:	f007 ffc4 	bl	8009476 <HAL_MDMA_Init>
 80014ee:	b108      	cbz	r0, 80014f4 <HAL_JPEG_MspInit+0xc4>
    {
      Error_Handler();
 80014f0:	f7ff fef8 	bl	80012e4 <Error_Handler>
    }

    if (HAL_MDMA_ConfigPostRequestMask(&hmdma_jpeg_outfifo_th, 0, 0) != HAL_OK)
 80014f4:	2200      	movs	r2, #0
 80014f6:	480f      	ldr	r0, [pc, #60]	@ (8001534 <HAL_JPEG_MspInit+0x104>)
 80014f8:	4611      	mov	r1, r2
 80014fa:	f008 f84a 	bl	8009592 <HAL_MDMA_ConfigPostRequestMask>
 80014fe:	b108      	cbz	r0, 8001504 <HAL_JPEG_MspInit+0xd4>
    {
      Error_Handler();
 8001500:	f7ff fef0 	bl	80012e4 <Error_Handler>
    }

    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 8001504:	636c      	str	r4, [r5, #52]	@ 0x34

    /* JPEG interrupt Init */
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 8001506:	2200      	movs	r2, #0
 8001508:	2105      	movs	r1, #5
 800150a:	2079      	movs	r0, #121	@ 0x79
    __HAL_LINKDMA(hjpeg,hdmaout,hmdma_jpeg_outfifo_th);
 800150c:	6425      	str	r5, [r4, #64]	@ 0x40
    HAL_NVIC_SetPriority(JPEG_IRQn, 5, 0);
 800150e:	f005 f8e3 	bl	80066d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 8001512:	2079      	movs	r0, #121	@ 0x79

  /* USER CODE END JPEG_MspInit 1 */

  }

}
 8001514:	b003      	add	sp, #12
 8001516:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_NVIC_EnableIRQ(JPEG_IRQn);
 800151a:	f005 b90f 	b.w	800673c <HAL_NVIC_EnableIRQ>
}
 800151e:	b003      	add	sp, #12
 8001520:	bd30      	pop	{r4, r5, pc}
 8001522:	bf00      	nop
 8001524:	52003000 	.word	0x52003000
 8001528:	58024400 	.word	0x58024400
 800152c:	240005fc 	.word	0x240005fc
 8001530:	520001c0 	.word	0x520001c0
 8001534:	24000590 	.word	0x24000590
 8001538:	52000200 	.word	0x52000200

0800153c <HAL_LTDC_MspInit>:
* This function configures the hardware resources used in this example
* @param hltdc: LTDC handle pointer
* @retval None
*/
void HAL_LTDC_MspInit(LTDC_HandleTypeDef* hltdc)
{
 800153c:	b510      	push	{r4, lr}
 800153e:	b0b4      	sub	sp, #208	@ 0xd0
 8001540:	4604      	mov	r4, r0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001542:	22c8      	movs	r2, #200	@ 0xc8
 8001544:	2100      	movs	r1, #0
 8001546:	a802      	add	r0, sp, #8
 8001548:	f020 fb82 	bl	8021c50 <memset>
  if(hltdc->Instance==LTDC)
 800154c:	6822      	ldr	r2, [r4, #0]
 800154e:	4b18      	ldr	r3, [pc, #96]	@ (80015b0 <HAL_LTDC_MspInit+0x74>)
 8001550:	429a      	cmp	r2, r3
 8001552:	d12b      	bne.n	80015ac <HAL_LTDC_MspInit+0x70>

  /* USER CODE END LTDC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 8001554:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8001558:	2300      	movs	r3, #0
    PeriphClkInitStruct.PLL3.PLL3M = 5;
    PeriphClkInitStruct.PLL3.PLL3N = 161;
    PeriphClkInitStruct.PLL3.PLL3P = 2;
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
    PeriphClkInitStruct.PLL3.PLL3R = 21;
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 800155a:	2115      	movs	r1, #21
    PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
    PeriphClkInitStruct.PLL3.PLL3FRACN = 0;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800155c:	a802      	add	r0, sp, #8
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_LTDC;
 800155e:	e9cd 2302 	strd	r2, r3, [sp, #8]
    PeriphClkInitStruct.PLL3.PLL3N = 161;
 8001562:	23a1      	movs	r3, #161	@ 0xa1
 8001564:	2205      	movs	r2, #5
 8001566:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    PeriphClkInitStruct.PLL3.PLL3P = 2;
 800156a:	2302      	movs	r3, #2
    PeriphClkInitStruct.PLL3.PLL3Q = 2;
 800156c:	e9cd 330e 	strd	r3, r3, [sp, #56]	@ 0x38
    PeriphClkInitStruct.PLL3.PLL3RGE = RCC_PLL3VCIRANGE_2;
 8001570:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001574:	e9cd 1310 	strd	r1, r3, [sp, #64]	@ 0x40
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001578:	f009 fa6a 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 800157c:	b108      	cbz	r0, 8001582 <HAL_LTDC_MspInit+0x46>
    {
      Error_Handler();
 800157e:	f7ff feb1 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001582:	4b0c      	ldr	r3, [pc, #48]	@ (80015b4 <HAL_LTDC_MspInit+0x78>)
    /* LTDC interrupt Init */
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001584:	2058      	movs	r0, #88	@ 0x58
 8001586:	2107      	movs	r1, #7
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001588:	f8d3 20e4 	ldr.w	r2, [r3, #228]	@ 0xe4
 800158c:	f042 0208 	orr.w	r2, r2, #8
 8001590:	f8c3 20e4 	str.w	r2, [r3, #228]	@ 0xe4
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 8001594:	2200      	movs	r2, #0
    __HAL_RCC_LTDC_CLK_ENABLE();
 8001596:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800159a:	f003 0308 	and.w	r3, r3, #8
 800159e:	9301      	str	r3, [sp, #4]
 80015a0:	9b01      	ldr	r3, [sp, #4]
    HAL_NVIC_SetPriority(LTDC_IRQn, 7, 0);
 80015a2:	f005 f899 	bl	80066d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LTDC_IRQn);
 80015a6:	2058      	movs	r0, #88	@ 0x58
 80015a8:	f005 f8c8 	bl	800673c <HAL_NVIC_EnableIRQ>

  /* USER CODE END LTDC_MspInit 1 */

  }

}
 80015ac:	b034      	add	sp, #208	@ 0xd0
 80015ae:	bd10      	pop	{r4, pc}
 80015b0:	50001000 	.word	0x50001000
 80015b4:	58024400 	.word	0x58024400

080015b8 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 80015b8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80015ba:	b0bf      	sub	sp, #252	@ 0xfc
 80015bc:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015be:	2214      	movs	r2, #20
 80015c0:	2100      	movs	r1, #0
 80015c2:	a807      	add	r0, sp, #28
 80015c4:	f020 fb44 	bl	8021c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80015c8:	22c8      	movs	r2, #200	@ 0xc8
 80015ca:	2100      	movs	r1, #0
 80015cc:	a80c      	add	r0, sp, #48	@ 0x30
 80015ce:	f020 fb3f 	bl	8021c50 <memset>
  if(hqspi->Instance==QUADSPI)
 80015d2:	6822      	ldr	r2, [r4, #0]
 80015d4:	4b53      	ldr	r3, [pc, #332]	@ (8001724 <HAL_QSPI_MspInit+0x16c>)
 80015d6:	429a      	cmp	r2, r3
 80015d8:	f040 80a1 	bne.w	800171e <HAL_QSPI_MspInit+0x166>

  /* USER CODE END QUADSPI_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015dc:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80015e0:	2300      	movs	r3, #0
    PeriphClkInitStruct.QspiClockSelection = RCC_QSPICLKSOURCE_D1HCLK;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e2:	a80c      	add	r0, sp, #48	@ 0x30
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_QSPI;
 80015e4:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80015e8:	f009 fa32 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 80015ec:	b108      	cbz	r0, 80015f2 <HAL_QSPI_MspInit+0x3a>
    {
      Error_Handler();
 80015ee:	f7ff fe79 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015f2:	4b4d      	ldr	r3, [pc, #308]	@ (8001728 <HAL_QSPI_MspInit+0x170>)
    PH3     ------> QUADSPI_BK2_IO1
    PB2     ------> QUADSPI_CLK
    PD11     ------> QUADSPI_BK1_IO0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_14;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f4:	2502      	movs	r5, #2
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80015f8:	2609      	movs	r6, #9
    __HAL_RCC_QSPI_CLK_ENABLE();
 80015fa:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80015fe:	a907      	add	r1, sp, #28
 8001600:	484a      	ldr	r0, [pc, #296]	@ (800172c <HAL_QSPI_MspInit+0x174>)

    GPIO_InitStruct.Pin = GPIO_PIN_6;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001602:	270a      	movs	r7, #10
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001604:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8001608:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 800160c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8001610:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8001614:	9201      	str	r2, [sp, #4]
 8001616:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 8001618:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800161c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001620:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001624:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001628:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 800162c:	9202      	str	r2, [sp, #8]
 800162e:	9a02      	ldr	r2, [sp, #8]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001630:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001634:	f042 0220 	orr.w	r2, r2, #32
 8001638:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800163c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001640:	f002 0220 	and.w	r2, r2, #32
 8001644:	9203      	str	r2, [sp, #12]
 8001646:	9a03      	ldr	r2, [sp, #12]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8001648:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800164c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001650:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001654:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001658:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 800165c:	9204      	str	r2, [sp, #16]
 800165e:	9a04      	ldr	r2, [sp, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001660:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001664:	f042 0202 	orr.w	r2, r2, #2
 8001668:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 800166c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8001670:	f002 0202 	and.w	r2, r2, #2
 8001674:	9205      	str	r2, [sp, #20]
 8001676:	9a05      	ldr	r2, [sp, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001678:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800167c:	f042 0208 	orr.w	r2, r2, #8
 8001680:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8001684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8001688:	f003 0308 	and.w	r3, r3, #8
 800168c:	9306      	str	r3, [sp, #24]
 800168e:	9b06      	ldr	r3, [sp, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001690:	f44f 4384 	mov.w	r3, #16896	@ 0x4200
 8001694:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001698:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 800169c:	960b      	str	r6, [sp, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800169e:	f006 f8a7 	bl	80077f0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80016a2:	2340      	movs	r3, #64	@ 0x40
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016a4:	a907      	add	r1, sp, #28
 80016a6:	4821      	ldr	r0, [pc, #132]	@ (800172c <HAL_QSPI_MspInit+0x174>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016a8:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016aa:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ae:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80016b2:	f006 f89d 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80016b6:	23c0      	movs	r3, #192	@ 0xc0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016b8:	a907      	add	r1, sp, #28
 80016ba:	481d      	ldr	r0, [pc, #116]	@ (8001730 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016bc:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016be:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c2:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016c6:	f006 f893 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80016ca:	f44f 7300 	mov.w	r3, #512	@ 0x200
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016ce:	a907      	add	r1, sp, #28
 80016d0:	4817      	ldr	r0, [pc, #92]	@ (8001730 <HAL_QSPI_MspInit+0x178>)
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 80016d2:	970b      	str	r7, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d4:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016d8:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80016dc:	f006 f888 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80016e0:	230c      	movs	r3, #12
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016e2:	a907      	add	r1, sp, #28
 80016e4:	4813      	ldr	r0, [pc, #76]	@ (8001734 <HAL_QSPI_MspInit+0x17c>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016e6:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016ec:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80016f0:	f006 f87e 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80016f4:	2304      	movs	r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f6:	a907      	add	r1, sp, #28
 80016f8:	480f      	ldr	r0, [pc, #60]	@ (8001738 <HAL_QSPI_MspInit+0x180>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 80016fa:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fc:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001700:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001704:	f006 f874 	bl	80077f0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001708:	f44f 6300 	mov.w	r3, #2048	@ 0x800
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800170c:	a907      	add	r1, sp, #28
 800170e:	480b      	ldr	r0, [pc, #44]	@ (800173c <HAL_QSPI_MspInit+0x184>)
    GPIO_InitStruct.Alternate = GPIO_AF9_QUADSPI;
 8001710:	960b      	str	r6, [sp, #44]	@ 0x2c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001712:	e9cd 3507 	strd	r3, r5, [sp, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001716:	e9cd 4409 	strd	r4, r4, [sp, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800171a:	f006 f869 	bl	80077f0 <HAL_GPIO_Init>

  /* USER CODE END QUADSPI_MspInit 1 */

  }

}
 800171e:	b03f      	add	sp, #252	@ 0xfc
 8001720:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001722:	bf00      	nop
 8001724:	52005000 	.word	0x52005000
 8001728:	58024400 	.word	0x58024400
 800172c:	58021800 	.word	0x58021800
 8001730:	58021400 	.word	0x58021400
 8001734:	58021c00 	.word	0x58021c00
 8001738:	58020400 	.word	0x58020400
 800173c:	58020c00 	.word	0x58020c00

08001740 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001740:	b510      	push	{r4, lr}
 8001742:	b0ba      	sub	sp, #232	@ 0xe8
 8001744:	4604      	mov	r4, r0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001746:	2214      	movs	r2, #20
 8001748:	2100      	movs	r1, #0
 800174a:	a803      	add	r0, sp, #12
 800174c:	f020 fa80 	bl	8021c50 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001750:	22c8      	movs	r2, #200	@ 0xc8
 8001752:	2100      	movs	r1, #0
 8001754:	a808      	add	r0, sp, #32
 8001756:	f020 fa7b 	bl	8021c50 <memset>
  if(huart->Instance==USART1)
 800175a:	6822      	ldr	r2, [r4, #0]
 800175c:	4b1e      	ldr	r3, [pc, #120]	@ (80017d8 <HAL_UART_MspInit+0x98>)
 800175e:	429a      	cmp	r2, r3
 8001760:	d138      	bne.n	80017d4 <HAL_UART_MspInit+0x94>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001762:	2201      	movs	r2, #1
 8001764:	2300      	movs	r3, #0
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001766:	a808      	add	r0, sp, #32
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8001768:	e9cd 2308 	strd	r2, r3, [sp, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800176c:	f009 f970 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8001770:	b108      	cbz	r0, 8001776 <HAL_UART_MspInit+0x36>
    {
      Error_Handler();
 8001772:	f7ff fdb7 	bl	80012e4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001776:	4b19      	ldr	r3, [pc, #100]	@ (80017dc <HAL_UART_MspInit+0x9c>)
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_9;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2400      	movs	r4, #0
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800177a:	a903      	add	r1, sp, #12
 800177c:	4818      	ldr	r0, [pc, #96]	@ (80017e0 <HAL_UART_MspInit+0xa0>)
    __HAL_RCC_USART1_CLK_ENABLE();
 800177e:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 8001782:	f042 0210 	orr.w	r2, r2, #16
 8001786:	f8c3 20f0 	str.w	r2, [r3, #240]	@ 0xf0
 800178a:	f8d3 20f0 	ldr.w	r2, [r3, #240]	@ 0xf0
 800178e:	f002 0210 	and.w	r2, r2, #16
 8001792:	9201      	str	r2, [sp, #4]
 8001794:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001796:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 800179a:	f042 0201 	orr.w	r2, r2, #1
 800179e:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a2:	f44f 62c0 	mov.w	r2, #1536	@ 0x600
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80017aa:	f003 0301 	and.w	r3, r3, #1
 80017ae:	9302      	str	r3, [sp, #8]
 80017b0:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017b2:	2302      	movs	r3, #2
 80017b4:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017b8:	2307      	movs	r3, #7
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017ba:	e9cd 4405 	strd	r4, r4, [sp, #20]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017be:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017c0:	f006 f816 	bl	80077f0 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80017c4:	2025      	movs	r0, #37	@ 0x25
 80017c6:	4622      	mov	r2, r4
 80017c8:	2105      	movs	r1, #5
 80017ca:	f004 ff85 	bl	80066d8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017ce:	2025      	movs	r0, #37	@ 0x25
 80017d0:	f004 ffb4 	bl	800673c <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 80017d4:	b03a      	add	sp, #232	@ 0xe8
 80017d6:	bd10      	pop	{r4, pc}
 80017d8:	40011000 	.word	0x40011000
 80017dc:	58024400 	.word	0x58024400
 80017e0:	58020000 	.word	0x58020000

080017e4 <HAL_SDRAM_MspInit>:
  /* USER CODE BEGIN FMC_MspInit 1 */

  /* USER CODE END FMC_MspInit 1 */
}

void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef* hsdram){
 80017e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017e6:	b0b9      	sub	sp, #228	@ 0xe4
  GPIO_InitTypeDef GPIO_InitStruct ={0};
 80017e8:	2100      	movs	r1, #0
 80017ea:	2214      	movs	r2, #20
 80017ec:	a801      	add	r0, sp, #4
 80017ee:	f020 fa2f 	bl	8021c50 <memset>
  if (FMC_Initialized) {
 80017f2:	4b3f      	ldr	r3, [pc, #252]	@ (80018f0 <HAL_SDRAM_MspInit+0x10c>)
 80017f4:	6819      	ldr	r1, [r3, #0]
 80017f6:	2900      	cmp	r1, #0
 80017f8:	d177      	bne.n	80018ea <HAL_SDRAM_MspInit+0x106>
  FMC_Initialized = 1;
 80017fa:	2201      	movs	r2, #1
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80017fc:	a808      	add	r0, sp, #32
  FMC_Initialized = 1;
 80017fe:	601a      	str	r2, [r3, #0]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001800:	22c0      	movs	r2, #192	@ 0xc0
 8001802:	f020 fa25 	bl	8021c50 <memset>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 8001806:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800180a:	2300      	movs	r3, #0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800180c:	a806      	add	r0, sp, #24
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_FMC;
 800180e:	e9cd 2306 	strd	r2, r3, [sp, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001812:	f009 f91d 	bl	800aa50 <HAL_RCCEx_PeriphCLKConfig>
 8001816:	b108      	cbz	r0, 800181c <HAL_SDRAM_MspInit+0x38>
      Error_Handler();
 8001818:	f7ff fd64 	bl	80012e4 <Error_Handler>
  __HAL_RCC_FMC_CLK_ENABLE();
 800181c:	4b35      	ldr	r3, [pc, #212]	@ (80018f4 <HAL_SDRAM_MspInit+0x110>)
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800181e:	2702      	movs	r7, #2
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001820:	2600      	movs	r6, #0
 8001822:	2503      	movs	r5, #3
  __HAL_RCC_FMC_CLK_ENABLE();
 8001824:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001828:	240c      	movs	r4, #12
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 800182a:	a901      	add	r1, sp, #4
 800182c:	4832      	ldr	r0, [pc, #200]	@ (80018f8 <HAL_SDRAM_MspInit+0x114>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800182e:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8001832:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8001836:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800183a:	9405      	str	r4, [sp, #20]
  __HAL_RCC_FMC_CLK_ENABLE();
 800183c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001840:	9300      	str	r3, [sp, #0]
 8001842:	9b00      	ldr	r3, [sp, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001844:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001848:	e9cd 6503 	strd	r6, r5, [sp, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800184c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  HAL_GPIO_Init(GPIOI, &GPIO_InitStruct);
 8001850:	f005 ffce 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6;
 8001854:	2360      	movs	r3, #96	@ 0x60
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001856:	a901      	add	r1, sp, #4
 8001858:	4828      	ldr	r0, [pc, #160]	@ (80018fc <HAL_SDRAM_MspInit+0x118>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800185a:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800185c:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001860:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001864:	f005 ffc4 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001868:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800186c:	a901      	add	r1, sp, #4
 800186e:	4824      	ldr	r0, [pc, #144]	@ (8001900 <HAL_SDRAM_MspInit+0x11c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001870:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001872:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001876:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800187a:	f005 ffb9 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800187e:	f44f 437f 	mov.w	r3, #65280	@ 0xff00
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001882:	a901      	add	r1, sp, #4
 8001884:	481f      	ldr	r0, [pc, #124]	@ (8001904 <HAL_SDRAM_MspInit+0x120>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001886:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800188c:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 8001890:	f005 ffae 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001894:	f248 1333 	movw	r3, #33075	@ 0x8133
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001898:	a901      	add	r1, sp, #4
 800189a:	481b      	ldr	r0, [pc, #108]	@ (8001908 <HAL_SDRAM_MspInit+0x124>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800189c:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800189e:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018a2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80018a6:	f005 ffa3 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 80018aa:	f24c 7303 	movw	r3, #50947	@ 0xc703
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018ae:	a901      	add	r1, sp, #4
 80018b0:	4816      	ldr	r0, [pc, #88]	@ (800190c <HAL_SDRAM_MspInit+0x128>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018b2:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018b4:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b8:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80018bc:	f005 ff98 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 80018c0:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018c4:	a901      	add	r1, sp, #4
 80018c6:	4812      	ldr	r0, [pc, #72]	@ (8001910 <HAL_SDRAM_MspInit+0x12c>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018c8:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018ca:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018ce:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80018d2:	f005 ff8d 	bl	80077f0 <HAL_GPIO_Init>
  GPIO_InitStruct.Pin = GPIO_PIN_0;
 80018d6:	2301      	movs	r3, #1
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018d8:	a901      	add	r1, sp, #4
 80018da:	480e      	ldr	r0, [pc, #56]	@ (8001914 <HAL_SDRAM_MspInit+0x130>)
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80018dc:	9405      	str	r4, [sp, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018de:	e9cd 3701 	strd	r3, r7, [sp, #4]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018e2:	e9cd 6503 	strd	r6, r5, [sp, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80018e6:	f005 ff83 	bl	80077f0 <HAL_GPIO_Init>
  /* USER CODE END SDRAM_MspInit 0 */
  HAL_FMC_MspInit();
  /* USER CODE BEGIN SDRAM_MspInit 1 */

  /* USER CODE END SDRAM_MspInit 1 */
}
 80018ea:	b039      	add	sp, #228	@ 0xe4
 80018ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80018ee:	bf00      	nop
 80018f0:	2400076c 	.word	0x2400076c
 80018f4:	58024400 	.word	0x58024400
 80018f8:	58022000 	.word	0x58022000
 80018fc:	58020400 	.word	0x58020400
 8001900:	58021000 	.word	0x58021000
 8001904:	58021c00 	.word	0x58021c00
 8001908:	58021800 	.word	0x58021800
 800190c:	58020c00 	.word	0x58020c00
 8001910:	58021400 	.word	0x58021400
 8001914:	58020800 	.word	0x58020800

08001918 <HAL_SDRAM_MspDeInit>:

static void HAL_FMC_MspDeInit(void){
  /* USER CODE BEGIN FMC_MspDeInit 0 */

  /* USER CODE END FMC_MspDeInit 0 */
  if (FMC_DeInitialized) {
 8001918:	4b1a      	ldr	r3, [pc, #104]	@ (8001984 <HAL_SDRAM_MspDeInit+0x6c>)
 800191a:	681a      	ldr	r2, [r3, #0]
  /* USER CODE BEGIN FMC_MspDeInit 1 */

  /* USER CODE END FMC_MspDeInit 1 */
}

void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef* hsdram){
 800191c:	b510      	push	{r4, lr}
  if (FMC_DeInitialized) {
 800191e:	bb82      	cbnz	r2, 8001982 <HAL_SDRAM_MspDeInit+0x6a>
  __HAL_RCC_FMC_CLK_DISABLE();
 8001920:	4a19      	ldr	r2, [pc, #100]	@ (8001988 <HAL_SDRAM_MspDeInit+0x70>)
  FMC_DeInitialized = 1;
 8001922:	2401      	movs	r4, #1
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001924:	f240 61ff 	movw	r1, #1791	@ 0x6ff
 8001928:	4818      	ldr	r0, [pc, #96]	@ (800198c <HAL_SDRAM_MspDeInit+0x74>)
  FMC_DeInitialized = 1;
 800192a:	601c      	str	r4, [r3, #0]
  __HAL_RCC_FMC_CLK_DISABLE();
 800192c:	f8d2 30d4 	ldr.w	r3, [r2, #212]	@ 0xd4
 8001930:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001934:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
  HAL_GPIO_DeInit(GPIOI, GPIO_PIN_6|GPIO_PIN_5|GPIO_PIN_4|GPIO_PIN_1
 8001938:	f006 f842 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOB, GPIO_PIN_5|GPIO_PIN_6);
 800193c:	2160      	movs	r1, #96	@ 0x60
 800193e:	4814      	ldr	r0, [pc, #80]	@ (8001990 <HAL_SDRAM_MspDeInit+0x78>)
 8001940:	f006 f83e 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOE, GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_10|GPIO_PIN_9
 8001944:	f64f 7183 	movw	r1, #65411	@ 0xff83
 8001948:	4812      	ldr	r0, [pc, #72]	@ (8001994 <HAL_SDRAM_MspDeInit+0x7c>)
 800194a:	f006 f839 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOH, GPIO_PIN_15|GPIO_PIN_14|GPIO_PIN_13|GPIO_PIN_10
 800194e:	f44f 417f 	mov.w	r1, #65280	@ 0xff00
 8001952:	4811      	ldr	r0, [pc, #68]	@ (8001998 <HAL_SDRAM_MspDeInit+0x80>)
 8001954:	f006 f834 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOG, GPIO_PIN_15|GPIO_PIN_8|GPIO_PIN_5|GPIO_PIN_4
 8001958:	f248 1133 	movw	r1, #33075	@ 0x8133
 800195c:	480f      	ldr	r0, [pc, #60]	@ (800199c <HAL_SDRAM_MspDeInit+0x84>)
 800195e:	f006 f82f 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_15|GPIO_PIN_14
 8001962:	f24c 7103 	movw	r1, #50947	@ 0xc703
 8001966:	480e      	ldr	r0, [pc, #56]	@ (80019a0 <HAL_SDRAM_MspDeInit+0x88>)
 8001968:	f006 f82a 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOF, GPIO_PIN_2|GPIO_PIN_1|GPIO_PIN_0|GPIO_PIN_3
 800196c:	f64f 013f 	movw	r1, #63551	@ 0xf83f
 8001970:	480c      	ldr	r0, [pc, #48]	@ (80019a4 <HAL_SDRAM_MspDeInit+0x8c>)
 8001972:	f006 f825 	bl	80079c0 <HAL_GPIO_DeInit>
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 8001976:	4621      	mov	r1, r4
 8001978:	480b      	ldr	r0, [pc, #44]	@ (80019a8 <HAL_SDRAM_MspDeInit+0x90>)
  /* USER CODE END SDRAM_MspDeInit 0 */
  HAL_FMC_MspDeInit();
  /* USER CODE BEGIN SDRAM_MspDeInit 1 */

  /* USER CODE END SDRAM_MspDeInit 1 */
}
 800197a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  HAL_GPIO_DeInit(GPIOC, GPIO_PIN_0);
 800197e:	f006 b81f 	b.w	80079c0 <HAL_GPIO_DeInit>
}
 8001982:	bd10      	pop	{r4, pc}
 8001984:	24000768 	.word	0x24000768
 8001988:	58024400 	.word	0x58024400
 800198c:	58022000 	.word	0x58022000
 8001990:	58020400 	.word	0x58020400
 8001994:	58021000 	.word	0x58021000
 8001998:	58021c00 	.word	0x58021c00
 800199c:	58021800 	.word	0x58021800
 80019a0:	58020c00 	.word	0x58020c00
 80019a4:	58021400 	.word	0x58021400
 80019a8:	58020800 	.word	0x58020800

080019ac <HAL_InitTick>:
  uint32_t              uwTimclock, uwAPB1Prescaler;
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;

  /*Configure the TIM6 IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019ac:	280f      	cmp	r0, #15
{
 80019ae:	b510      	push	{r4, lr}
 80019b0:	4604      	mov	r4, r0
 80019b2:	b08a      	sub	sp, #40	@ 0x28
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019b4:	d902      	bls.n	80019bc <HAL_InitTick+0x10>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
     uwTickPrio = TickPriority;
    }
  else
  {
    return HAL_ERROR;
 80019b6:	2001      	movs	r0, #1
    return HAL_TIM_Base_Start_IT(&htim6);
  }

  /* Return function status */
  return HAL_ERROR;
}
 80019b8:	b00a      	add	sp, #40	@ 0x28
 80019ba:	bd10      	pop	{r4, pc}
     HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0);
 80019bc:	4601      	mov	r1, r0
 80019be:	2200      	movs	r2, #0
 80019c0:	2036      	movs	r0, #54	@ 0x36
 80019c2:	f004 fe89 	bl	80066d8 <HAL_NVIC_SetPriority>
     HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80019c6:	2036      	movs	r0, #54	@ 0x36
 80019c8:	f004 feb8 	bl	800673c <HAL_NVIC_EnableIRQ>
     uwTickPrio = TickPriority;
 80019cc:	4b18      	ldr	r3, [pc, #96]	@ (8001a30 <HAL_InitTick+0x84>)
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ce:	4669      	mov	r1, sp
 80019d0:	a802      	add	r0, sp, #8
     uwTickPrio = TickPriority;
 80019d2:	601c      	str	r4, [r3, #0]
  __HAL_RCC_TIM6_CLK_ENABLE();
 80019d4:	4b17      	ldr	r3, [pc, #92]	@ (8001a34 <HAL_InitTick+0x88>)
 80019d6:	f8d3 20e8 	ldr.w	r2, [r3, #232]	@ 0xe8
 80019da:	f042 0210 	orr.w	r2, r2, #16
 80019de:	f8c3 20e8 	str.w	r2, [r3, #232]	@ 0xe8
 80019e2:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 80019e6:	f003 0310 	and.w	r3, r3, #16
 80019ea:	9301      	str	r3, [sp, #4]
 80019ec:	9b01      	ldr	r3, [sp, #4]
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80019ee:	f008 ff15 	bl	800a81c <HAL_RCC_GetClockConfig>
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 80019f2:	9b07      	ldr	r3, [sp, #28]
 80019f4:	b9c3      	cbnz	r3, 8001a28 <HAL_InitTick+0x7c>
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 80019f6:	f008 feed 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
  htim6.Instance = TIM6;
 80019fa:	4c0f      	ldr	r4, [pc, #60]	@ (8001a38 <HAL_InitTick+0x8c>)
 80019fc:	4b0f      	ldr	r3, [pc, #60]	@ (8001a3c <HAL_InitTick+0x90>)
 80019fe:	6023      	str	r3, [r4, #0]
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8001a00:	f240 33e7 	movw	r3, #999	@ 0x3e7
 8001a04:	60e3      	str	r3, [r4, #12]
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001a06:	4b0e      	ldr	r3, [pc, #56]	@ (8001a40 <HAL_InitTick+0x94>)
 8001a08:	fbb0 f0f3 	udiv	r0, r0, r3
 8001a0c:	3801      	subs	r0, #1
  htim6.Init.ClockDivision = 0;
 8001a0e:	2300      	movs	r3, #0
  htim6.Init.Prescaler = uwPrescalerValue;
 8001a10:	6060      	str	r0, [r4, #4]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a12:	4620      	mov	r0, r4
  htim6.Init.ClockDivision = 0;
 8001a14:	6123      	str	r3, [r4, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001a16:	60a3      	str	r3, [r4, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8001a18:	f00a f882 	bl	800bb20 <HAL_TIM_Base_Init>
 8001a1c:	2800      	cmp	r0, #0
 8001a1e:	d1ca      	bne.n	80019b6 <HAL_InitTick+0xa>
    return HAL_TIM_Base_Start_IT(&htim6);
 8001a20:	4620      	mov	r0, r4
 8001a22:	f009 ff31 	bl	800b888 <HAL_TIM_Base_Start_IT>
 8001a26:	e7c7      	b.n	80019b8 <HAL_InitTick+0xc>
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8001a28:	f008 fed4 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 8001a2c:	0040      	lsls	r0, r0, #1
 8001a2e:	e7e4      	b.n	80019fa <HAL_InitTick+0x4e>
 8001a30:	240000a4 	.word	0x240000a4
 8001a34:	58024400 	.word	0x58024400
 8001a38:	24000770 	.word	0x24000770
 8001a3c:	40001000 	.word	0x40001000
 8001a40:	000f4240 	.word	0x000f4240

08001a44 <NMI_Handler>:
{
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001a44:	e7fe      	b.n	8001a44 <NMI_Handler>

08001a46 <HardFault_Handler>:
void HardFault_Handler(void)
{
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a46:	e7fe      	b.n	8001a46 <HardFault_Handler>

08001a48 <MemManage_Handler>:
void MemManage_Handler(void)
{
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a48:	e7fe      	b.n	8001a48 <MemManage_Handler>

08001a4a <BusFault_Handler>:
void BusFault_Handler(void)
{
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a4a:	e7fe      	b.n	8001a4a <BusFault_Handler>

08001a4c <UsageFault_Handler>:
void UsageFault_Handler(void)
{
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a4c:	e7fe      	b.n	8001a4c <UsageFault_Handler>

08001a4e <DebugMon_Handler>:

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a4e:	4770      	bx	lr

08001a50 <USART1_IRQHandler>:
void USART1_IRQHandler(void)
{
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001a50:	4801      	ldr	r0, [pc, #4]	@ (8001a58 <USART1_IRQHandler+0x8>)
 8001a52:	f00a b8d1 	b.w	800bbf8 <HAL_UART_IRQHandler>
 8001a56:	bf00      	nop
 8001a58:	24000408 	.word	0x24000408

08001a5c <TIM6_DAC_IRQHandler>:
void TIM6_DAC_IRQHandler(void)
{
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a5c:	4801      	ldr	r0, [pc, #4]	@ (8001a64 <TIM6_DAC_IRQHandler+0x8>)
 8001a5e:	f009 bf55 	b.w	800b90c <HAL_TIM_IRQHandler>
 8001a62:	bf00      	nop
 8001a64:	24000770 	.word	0x24000770

08001a68 <LTDC_IRQHandler>:
void LTDC_IRQHandler(void)
{
  /* USER CODE BEGIN LTDC_IRQn 0 */

  /* USER CODE END LTDC_IRQn 0 */
  HAL_LTDC_IRQHandler(&hltdc);
 8001a68:	4801      	ldr	r0, [pc, #4]	@ (8001a70 <LTDC_IRQHandler+0x8>)
 8001a6a:	f007 bc0f 	b.w	800928c <HAL_LTDC_IRQHandler>
 8001a6e:	bf00      	nop
 8001a70:	240004e8 	.word	0x240004e8

08001a74 <DMA2D_IRQHandler>:
void DMA2D_IRQHandler(void)
{
  /* USER CODE BEGIN DMA2D_IRQn 0 */

  /* USER CODE END DMA2D_IRQn 0 */
  HAL_DMA2D_IRQHandler(&hdma2d);
 8001a74:	4801      	ldr	r0, [pc, #4]	@ (8001a7c <DMA2D_IRQHandler+0x8>)
 8001a76:	f005 b9a2 	b.w	8006dbe <HAL_DMA2D_IRQHandler>
 8001a7a:	bf00      	nop
 8001a7c:	240006dc 	.word	0x240006dc

08001a80 <JPEG_IRQHandler>:
void JPEG_IRQHandler(void)
{
  /* USER CODE BEGIN JPEG_IRQn 0 */

  /* USER CODE END JPEG_IRQn 0 */
  HAL_JPEG_IRQHandler(&hjpeg);
 8001a80:	4801      	ldr	r0, [pc, #4]	@ (8001a88 <JPEG_IRQHandler+0x8>)
 8001a82:	f007 bad1 	b.w	8009028 <HAL_JPEG_IRQHandler>
 8001a86:	bf00      	nop
 8001a88:	24000668 	.word	0x24000668

08001a8c <MDMA_IRQHandler>:
void MDMA_IRQHandler(void)
{
  /* USER CODE BEGIN MDMA_IRQn 0 */

  /* USER CODE END MDMA_IRQn 0 */
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a8c:	4804      	ldr	r0, [pc, #16]	@ (8001aa0 <MDMA_IRQHandler+0x14>)
{
 8001a8e:	b508      	push	{r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_outfifo_th);
 8001a90:	f007 fe04 	bl	800969c <HAL_MDMA_IRQHandler>
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a94:	4803      	ldr	r0, [pc, #12]	@ (8001aa4 <MDMA_IRQHandler+0x18>)
  /* USER CODE BEGIN MDMA_IRQn 1 */

  /* USER CODE END MDMA_IRQn 1 */
}
 8001a96:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  HAL_MDMA_IRQHandler(&hmdma_jpeg_infifo_th);
 8001a9a:	f007 bdff 	b.w	800969c <HAL_MDMA_IRQHandler>
 8001a9e:	bf00      	nop
 8001aa0:	24000590 	.word	0x24000590
 8001aa4:	240005fc 	.word	0x240005fc

08001aa8 <DSI_IRQHandler>:
void DSI_IRQHandler(void)
{
  /* USER CODE BEGIN DSI_IRQn 0 */

  /* USER CODE END DSI_IRQn 0 */
  HAL_DSI_IRQHandler(&hdsi);
 8001aa8:	4801      	ldr	r0, [pc, #4]	@ (8001ab0 <DSI_IRQHandler+0x8>)
 8001aaa:	f005 bb8a 	b.w	80071c2 <HAL_DSI_IRQHandler>
 8001aae:	bf00      	nop
 8001ab0:	240006c0 	.word	0x240006c0

08001ab4 <_getpid>:
}

int _getpid(void)
{
	return 1;
}
 8001ab4:	2001      	movs	r0, #1
 8001ab6:	4770      	bx	lr

08001ab8 <_kill>:

int _kill(int pid, int sig)
{
 8001ab8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aba:	f020 f9d3 	bl	8021e64 <__errno>
 8001abe:	2316      	movs	r3, #22
 8001ac0:	6003      	str	r3, [r0, #0]
	return -1;
}
 8001ac2:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac6:	bd08      	pop	{r3, pc}

08001ac8 <_exit>:

void _exit (int status)
{
 8001ac8:	b508      	push	{r3, lr}
	errno = EINVAL;
 8001aca:	f020 f9cb 	bl	8021e64 <__errno>
 8001ace:	2316      	movs	r3, #22
 8001ad0:	6003      	str	r3, [r0, #0]
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
 8001ad2:	e7fe      	b.n	8001ad2 <_exit+0xa>

08001ad4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ad4:	b570      	push	{r4, r5, r6, lr}
 8001ad6:	460d      	mov	r5, r1
 8001ad8:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ada:	460e      	mov	r6, r1
 8001adc:	1b73      	subs	r3, r6, r5
 8001ade:	429c      	cmp	r4, r3
 8001ae0:	dc01      	bgt.n	8001ae6 <_read+0x12>
	{
		*ptr++ = __io_getchar();
	}

return len;
}
 8001ae2:	4620      	mov	r0, r4
 8001ae4:	bd70      	pop	{r4, r5, r6, pc}
		*ptr++ = __io_getchar();
 8001ae6:	f3af 8000 	nop.w
 8001aea:	f806 0b01 	strb.w	r0, [r6], #1
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	e7f5      	b.n	8001adc <_read+0x8>

08001af0 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001af0:	b570      	push	{r4, r5, r6, lr}
 8001af2:	460d      	mov	r5, r1
 8001af4:	4614      	mov	r4, r2
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001af6:	460e      	mov	r6, r1
 8001af8:	1b73      	subs	r3, r6, r5
 8001afa:	429c      	cmp	r4, r3
 8001afc:	dc01      	bgt.n	8001b02 <_write+0x12>
	{
		__io_putchar(*ptr++);
	}
	return len;
}
 8001afe:	4620      	mov	r0, r4
 8001b00:	bd70      	pop	{r4, r5, r6, pc}
		__io_putchar(*ptr++);
 8001b02:	f816 0b01 	ldrb.w	r0, [r6], #1
 8001b06:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b0a:	e7f5      	b.n	8001af8 <_write+0x8>

08001b0c <_close>:

int _close(int file)
{
	return -1;
}
 8001b0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001b10:	4770      	bx	lr

08001b12 <_fstat>:


int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
 8001b12:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
	return 0;
}
 8001b16:	2000      	movs	r0, #0
	st->st_mode = S_IFCHR;
 8001b18:	604b      	str	r3, [r1, #4]
}
 8001b1a:	4770      	bx	lr

08001b1c <_isatty>:

int _isatty(int file)
{
	return 1;
}
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	4770      	bx	lr

08001b20 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
	return 0;
}
 8001b20:	2000      	movs	r0, #0
 8001b22:	4770      	bx	lr

08001b24 <_sbrk>:
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
  const uint8_t *max_heap = (uint8_t *)stack_limit;
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b24:	4a0b      	ldr	r2, [pc, #44]	@ (8001b54 <_sbrk+0x30>)
{
 8001b26:	4603      	mov	r3, r0
  if (NULL == __sbrk_heap_end)
 8001b28:	6811      	ldr	r1, [r2, #0]
{
 8001b2a:	b510      	push	{r4, lr}
  if (NULL == __sbrk_heap_end)
 8001b2c:	b909      	cbnz	r1, 8001b32 <_sbrk+0xe>
  {
    __sbrk_heap_end = &_end;
 8001b2e:	490a      	ldr	r1, [pc, #40]	@ (8001b58 <_sbrk+0x34>)
 8001b30:	6011      	str	r1, [r2, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b32:	6810      	ldr	r0, [r2, #0]
 8001b34:	4909      	ldr	r1, [pc, #36]	@ (8001b5c <_sbrk+0x38>)
 8001b36:	4c0a      	ldr	r4, [pc, #40]	@ (8001b60 <_sbrk+0x3c>)
 8001b38:	4403      	add	r3, r0
 8001b3a:	1b09      	subs	r1, r1, r4
 8001b3c:	428b      	cmp	r3, r1
 8001b3e:	d906      	bls.n	8001b4e <_sbrk+0x2a>
  {
    errno = ENOMEM;
 8001b40:	f020 f990 	bl	8021e64 <__errno>
 8001b44:	230c      	movs	r3, #12
 8001b46:	6003      	str	r3, [r0, #0]
    return (void *)-1;
 8001b48:	f04f 30ff 	mov.w	r0, #4294967295

  prev_heap_end = __sbrk_heap_end;
  __sbrk_heap_end += incr;

  return (void *)prev_heap_end;
}
 8001b4c:	bd10      	pop	{r4, pc}
  __sbrk_heap_end += incr;
 8001b4e:	6013      	str	r3, [r2, #0]
  return (void *)prev_heap_end;
 8001b50:	e7fc      	b.n	8001b4c <_sbrk+0x28>
 8001b52:	bf00      	nop
 8001b54:	240007bc 	.word	0x240007bc
 8001b58:	240260c8 	.word	0x240260c8
 8001b5c:	24080000 	.word	0x24080000
 8001b60:	00001000 	.word	0x00001000

08001b64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8001b64:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001b9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8001b68:	f004 fcdc 	bl	8006524 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001b6c:	480c      	ldr	r0, [pc, #48]	@ (8001ba0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b6e:	490d      	ldr	r1, [pc, #52]	@ (8001ba4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b70:	4a0d      	ldr	r2, [pc, #52]	@ (8001ba8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b74:	e002      	b.n	8001b7c <LoopCopyDataInit>

08001b76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001b78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001b7a:	3304      	adds	r3, #4

08001b7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001b7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001b7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001b80:	d3f9      	bcc.n	8001b76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001b82:	4a0a      	ldr	r2, [pc, #40]	@ (8001bac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001b84:	4c0a      	ldr	r4, [pc, #40]	@ (8001bb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001b86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001b88:	e001      	b.n	8001b8e <LoopFillZerobss>

08001b8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001b8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001b8c:	3204      	adds	r2, #4

08001b8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001b8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001b90:	d3fb      	bcc.n	8001b8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001b92:	f020 f96d 	bl	8021e70 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b96:	f7fe ff8f 	bl	8000ab8 <main>
  bx  lr
 8001b9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001b9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8001ba0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8001ba4:	2400016c 	.word	0x2400016c
  ldr r2, =_sidata
 8001ba8:	08028198 	.word	0x08028198
  ldr r2, =_sbss
 8001bac:	24000380 	.word	0x24000380
  ldr r4, =_ebss
 8001bb0:	240260c8 	.word	0x240260c8

08001bb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bb4:	e7fe      	b.n	8001bb4 <ADC3_IRQHandler>

08001bb6 <MX_TouchGFX_PreOSInit>:
/**
 * PreOS Initialization function
 */
void MX_TouchGFX_PreOSInit(void)
{
}
 8001bb6:	4770      	bx	lr

08001bb8 <MX_TouchGFX_Init>:

/**
 * Initialize TouchGFX application
 */
void MX_TouchGFX_Init(void)
{
 8001bb8:	b508      	push	{r3, lr}
    // Calling forward to touchgfx_init in C++ domain
    touchgfx_components_init();
 8001bba:	f001 fd11 	bl	80035e0 <touchgfx_components_init>
    touchgfx_init();
}
 8001bbe:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    touchgfx_init();
 8001bc2:	f001 bc95 	b.w	80034f0 <touchgfx_init>

08001bc6 <TouchGFX_Task>:
 * TouchGFX application thread
 */
void TouchGFX_Task(void* argument)
{
    // Calling forward to touchgfx_taskEntry in C++ domain
    touchgfx_taskEntry();
 8001bc6:	f001 bd0d 	b.w	80035e4 <touchgfx_taskEntry>

08001bca <_ZN8touchgfx18MCUInstrumentation13getCCConsumedEv>:
     *
     * @return clock cycles.
     */
    virtual uint32_t getCCConsumed()
    {
        return cc_consumed;
 8001bca:	6840      	ldr	r0, [r0, #4]
    }
 8001bcc:	4770      	bx	lr

08001bce <_ZN8touchgfx18MCUInstrumentation13setCCConsumedEm>:
     *
     * @param  val number of clock cycles.
     */
    virtual void setCCConsumed(uint32_t val)
    {
        cc_consumed = val;
 8001bce:	6041      	str	r1, [r0, #4]
    }
 8001bd0:	4770      	bx	lr

08001bd2 <_ZN8touchgfx22STM32H7Instrumentation12getElapsedUSEjjj>:
    HAL_TIM_Base_Start(&tim);
}

unsigned int STM32H7Instrumentation::getElapsedUS(unsigned int start, unsigned int now, unsigned int clockfrequency)
{
    return ((now - start) + (clockfrequency / 2)) / clockfrequency;
 8001bd2:	1a52      	subs	r2, r2, r1
 8001bd4:	eb02 0253 	add.w	r2, r2, r3, lsr #1
}
 8001bd8:	fbb2 f0f3 	udiv	r0, r2, r3
 8001bdc:	4770      	bx	lr
	...

08001be0 <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv>:

unsigned int STM32H7Instrumentation::getCPUCycles()
{
    return __HAL_TIM_GET_COUNTER(&tim) * m_sysclkRatio;
 8001be0:	4b02      	ldr	r3, [pc, #8]	@ (8001bec <_ZN8touchgfx22STM32H7Instrumentation12getCPUCyclesEv+0xc>)
 8001be2:	68c0      	ldr	r0, [r0, #12]
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8001be8:	4358      	muls	r0, r3
 8001bea:	4770      	bx	lr
 8001bec:	240007c0 	.word	0x240007c0

08001bf0 <_ZN8touchgfx22STM32H7InstrumentationD1Ev>:
#include <platform/core/MCUInstrumentation.hpp>
#include <stdint.h>

namespace touchgfx
{
class STM32H7Instrumentation: public MCUInstrumentation
 8001bf0:	4770      	bx	lr
	...

08001bf4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>:
{
 8001bf4:	b537      	push	{r0, r1, r2, r4, r5, lr}
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001bf6:	4a1e      	ldr	r2, [pc, #120]	@ (8001c70 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x7c>)
    tim.Instance = TIM2;
 8001bf8:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
{
 8001bfc:	4605      	mov	r5, r0
    tim.Init.Period = 0xFFFFFFFF;
 8001bfe:	f04f 30ff 	mov.w	r0, #4294967295
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001c02:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c06:	f043 0301 	orr.w	r3, r3, #1
 8001c0a:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8001c0e:	f8d2 30e8 	ldr.w	r3, [r2, #232]	@ 0xe8
 8001c12:	f003 0301 	and.w	r3, r3, #1
 8001c16:	9301      	str	r3, [sp, #4]
 8001c18:	9b01      	ldr	r3, [sp, #4]
    tim.Instance = TIM2;
 8001c1a:	4b16      	ldr	r3, [pc, #88]	@ (8001c74 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c1c:	6019      	str	r1, [r3, #0]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c1e:	2100      	movs	r1, #0
    tim.Init.Period = 0xFFFFFFFF;
 8001c20:	60d8      	str	r0, [r3, #12]
    tim.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c22:	6119      	str	r1, [r3, #16]
    tim.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001c24:	6099      	str	r1, [r3, #8]
    tim.Init.Prescaler = 0;
 8001c26:	6059      	str	r1, [r3, #4]
    tim.Init.RepetitionCounter = 1;
 8001c28:	2101      	movs	r1, #1
 8001c2a:	6159      	str	r1, [r3, #20]
    uwD2Prescaler = D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> POSITION_VAL(RCC_D2CFGR_D2PPRE1_0)];
 8001c2c:	69d3      	ldr	r3, [r2, #28]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001c2e:	2210      	movs	r2, #16
 8001c30:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001c34:	fa92 f2a2 	rbit	r2, r2
   */
  if (value == 0U)
  {
    return 32U;
  }
  return __builtin_clz(value);
 8001c38:	fab2 f282 	clz	r2, r2
 8001c3c:	40d3      	lsrs	r3, r2
    if (!uwD2Prescaler)
 8001c3e:	4a0e      	ldr	r2, [pc, #56]	@ (8001c78 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x84>)
 8001c40:	5cd3      	ldrb	r3, [r2, r3]
 8001c42:	b983      	cbnz	r3, 8001c66 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x72>
        uwTimclock = HAL_RCC_GetHCLKFreq();
 8001c44:	f008 fda4 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 8001c48:	4604      	mov	r4, r0
    m_sysclkRatio = HAL_RCC_GetSysClockFreq() / uwTimclock;
 8001c4a:	f008 fbd9 	bl	800a400 <HAL_RCC_GetSysClockFreq>
 8001c4e:	fbb0 f0f4 	udiv	r0, r0, r4
 8001c52:	60e8      	str	r0, [r5, #12]
    HAL_TIM_Base_Init(&tim);
 8001c54:	4807      	ldr	r0, [pc, #28]	@ (8001c74 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
 8001c56:	f009 ff63 	bl	800bb20 <HAL_TIM_Base_Init>
    HAL_TIM_Base_Start(&tim);
 8001c5a:	4806      	ldr	r0, [pc, #24]	@ (8001c74 <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x80>)
}
 8001c5c:	b003      	add	sp, #12
 8001c5e:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
    HAL_TIM_Base_Start(&tim);
 8001c62:	f009 bdd7 	b.w	800b814 <HAL_TIM_Base_Start>
        uwTimclock = 2 * HAL_RCC_GetPCLK1Freq();
 8001c66:	f008 fdb5 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
 8001c6a:	0044      	lsls	r4, r0, #1
 8001c6c:	e7ed      	b.n	8001c4a <_ZN8touchgfx22STM32H7Instrumentation4initEv+0x56>
 8001c6e:	bf00      	nop
 8001c70:	58024400 	.word	0x58024400
 8001c74:	240007c0 	.word	0x240007c0
 8001c78:	08024df4 	.word	0x08024df4

08001c7c <_ZN8touchgfx22STM32H7InstrumentationD0Ev>:
 8001c7c:	b510      	push	{r4, lr}
 8001c7e:	4604      	mov	r4, r0
 8001c80:	2110      	movs	r1, #16
 8001c82:	f01f f9d0 	bl	8021026 <_ZdlPvj>
 8001c86:	4620      	mov	r0, r4
 8001c88:	bd10      	pop	{r4, pc}

08001c8a <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb>:

void STM32H7Instrumentation::setMCUActive(bool active)
{
 8001c8a:	b538      	push	{r3, r4, r5, lr}
    if (active) //idle task sched out
    {
        uint32_t current_cc = cc_in;
        cc_consumed += getCPUCycles() - current_cc;
 8001c8c:	6803      	ldr	r3, [r0, #0]
{
 8001c8e:	4604      	mov	r4, r0
        cc_consumed += getCPUCycles() - current_cc;
 8001c90:	691b      	ldr	r3, [r3, #16]
    if (active) //idle task sched out
 8001c92:	b131      	cbz	r1, 8001ca2 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x18>
        uint32_t current_cc = cc_in;
 8001c94:	6885      	ldr	r5, [r0, #8]
        cc_consumed += getCPUCycles() - current_cc;
 8001c96:	4798      	blx	r3
 8001c98:	6863      	ldr	r3, [r4, #4]
 8001c9a:	1b5b      	subs	r3, r3, r5
 8001c9c:	4403      	add	r3, r0
 8001c9e:	6063      	str	r3, [r4, #4]
    }
    else //idle task sched in
    {
        cc_in = getCPUCycles();
    }
}
 8001ca0:	bd38      	pop	{r3, r4, r5, pc}
        cc_in = getCPUCycles();
 8001ca2:	4798      	blx	r3
 8001ca4:	60a0      	str	r0, [r4, #8]
}
 8001ca6:	e7fb      	b.n	8001ca0 <_ZN8touchgfx22STM32H7Instrumentation12setMCUActiveEb+0x16>

08001ca8 <_ZN20STM32TouchControllerD1Ev>:
 * @brief This class specializes TouchController Interface.
 *
 * @sa touchgfx::TouchController
 */

class STM32TouchController : public touchgfx::TouchController
 8001ca8:	4770      	bx	lr
	...

08001cac <_ZN20STM32TouchController11sampleTouchERlS0_>:

    assert(bsp_ts_initialized);
}

bool STM32TouchController::sampleTouch(int32_t& x, int32_t& y)
{
 8001cac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
     *
     * This function is called by the TouchGFX framework.
     * By default sampleTouch is called every tick, this can be adjusted by HAL::setTouchSampleRate(int8_t);
     *
     */
    if (bsp_ts_initialized)
 8001cae:	4b0a      	ldr	r3, [pc, #40]	@ (8001cd8 <_ZN20STM32TouchController11sampleTouchERlS0_+0x2c>)
{
 8001cb0:	460f      	mov	r7, r1
 8001cb2:	4616      	mov	r6, r2
    if (bsp_ts_initialized)
 8001cb4:	781d      	ldrb	r5, [r3, #0]
 8001cb6:	b915      	cbnz	r5, 8001cbe <_ZN20STM32TouchController11sampleTouchERlS0_+0x12>
            x = TS_State.TouchX;
            y = TS_State.TouchY;
            return true;
        }
    }
    return false;
 8001cb8:	2500      	movs	r5, #0
}
 8001cba:	4628      	mov	r0, r5
 8001cbc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
        BSP_TS_GetState(0, &TS_State);
 8001cbe:	4c07      	ldr	r4, [pc, #28]	@ (8001cdc <_ZN20STM32TouchController11sampleTouchERlS0_+0x30>)
 8001cc0:	2000      	movs	r0, #0
 8001cc2:	4621      	mov	r1, r4
 8001cc4:	f004 fbd2 	bl	800646c <BSP_TS_GetState>
        if (TS_State.TouchDetected)
 8001cc8:	6823      	ldr	r3, [r4, #0]
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d0f4      	beq.n	8001cb8 <_ZN20STM32TouchController11sampleTouchERlS0_+0xc>
            x = TS_State.TouchX;
 8001cce:	6863      	ldr	r3, [r4, #4]
 8001cd0:	603b      	str	r3, [r7, #0]
            y = TS_State.TouchY;
 8001cd2:	68a3      	ldr	r3, [r4, #8]
 8001cd4:	6033      	str	r3, [r6, #0]
            return true;
 8001cd6:	e7f0      	b.n	8001cba <_ZN20STM32TouchController11sampleTouchERlS0_+0xe>
 8001cd8:	2400081c 	.word	0x2400081c
 8001cdc:	2400080c 	.word	0x2400080c

08001ce0 <_ZN20STM32TouchControllerD0Ev>:
 8001ce0:	b510      	push	{r4, lr}
 8001ce2:	4604      	mov	r4, r0
 8001ce4:	2104      	movs	r1, #4
 8001ce6:	f01f f99e 	bl	8021026 <_ZdlPvj>
 8001cea:	4620      	mov	r0, r4
 8001cec:	bd10      	pop	{r4, pc}
	...

08001cf0 <_ZN20STM32TouchController4initEv>:
{
 8001cf0:	b508      	push	{r3, lr}
    hTS->Width = 800;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	@ (8001d2c <_ZN20STM32TouchController4initEv+0x3c>)
    hTS->Height = 480;
 8001cf4:	f44f 7248 	mov.w	r2, #800	@ 0x320
    hTS->Accuracy = 0;
 8001cf8:	2000      	movs	r0, #0
    hTS->Width = 800;
 8001cfa:	6819      	ldr	r1, [r3, #0]
    hTS->Height = 480;
 8001cfc:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8001d00:	e9c1 2300 	strd	r2, r3, [r1]
    hTS->Accuracy = 0;
 8001d04:	230c      	movs	r3, #12
 8001d06:	e9c1 3002 	strd	r3, r0, [r1, #8]
    if (BSP_TS_Init(0, hTS) == BSP_ERROR_NONE)
 8001d0a:	f004 fb1f 	bl	800634c <BSP_TS_Init>
 8001d0e:	4b08      	ldr	r3, [pc, #32]	@ (8001d30 <_ZN20STM32TouchController4initEv+0x40>)
 8001d10:	b910      	cbnz	r0, 8001d18 <_ZN20STM32TouchController4initEv+0x28>
        bsp_ts_initialized = true;
 8001d12:	2201      	movs	r2, #1
 8001d14:	701a      	strb	r2, [r3, #0]
}
 8001d16:	bd08      	pop	{r3, pc}
    assert(bsp_ts_initialized);
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d1fb      	bne.n	8001d16 <_ZN20STM32TouchController4initEv+0x26>
 8001d1e:	4b05      	ldr	r3, [pc, #20]	@ (8001d34 <_ZN20STM32TouchController4initEv+0x44>)
 8001d20:	212e      	movs	r1, #46	@ 0x2e
 8001d22:	4a05      	ldr	r2, [pc, #20]	@ (8001d38 <_ZN20STM32TouchController4initEv+0x48>)
 8001d24:	4805      	ldr	r0, [pc, #20]	@ (8001d3c <_ZN20STM32TouchController4initEv+0x4c>)
 8001d26:	f01f fcf7 	bl	8021718 <__assert_func>
 8001d2a:	bf00      	nop
 8001d2c:	24000818 	.word	0x24000818
 8001d30:	2400081c 	.word	0x2400081c
 8001d34:	0802290c 	.word	0x0802290c
 8001d38:	0802291f 	.word	0x0802291f
 8001d3c:	08022949 	.word	0x08022949

08001d40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>:
/*
 * Sets a pin high.
 */
void GPIO::set(GPIO_ID id)
{
    switch (id)
 8001d40:	2803      	cmp	r0, #3
 8001d42:	d825      	bhi.n	8001d90 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x50>
 8001d44:	e8df f000 	tbb	[pc, r0]
 8001d48:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_SET(id));
 8001d4c:	4b11      	ldr	r3, [pc, #68]	@ (8001d94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d4e:	2108      	movs	r1, #8
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	fab2 f282 	clz	r2, r2
 8001d56:	0952      	lsrs	r2, r2, #5
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d58:	480f      	ldr	r0, [pc, #60]	@ (8001d98 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d5a:	f005 bed3 	b.w	8007b04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_SET(id));
 8001d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8001d94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d60:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	fab2 f282 	clz	r2, r2
 8001d6a:	0952      	lsrs	r2, r2, #5
 8001d6c:	e7f4      	b.n	8001d58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_SET(id));
 8001d6e:	4b09      	ldr	r3, [pc, #36]	@ (8001d94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d70:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001d74:	689a      	ldr	r2, [r3, #8]
 8001d76:	fab2 f282 	clz	r2, r2
 8001d7a:	0952      	lsrs	r2, r2, #5
 8001d7c:	e7ec      	b.n	8001d58 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_SET(id));
 8001d7e:	4b05      	ldr	r3, [pc, #20]	@ (8001d94 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x54>)
 8001d80:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001d84:	4805      	ldr	r0, [pc, #20]	@ (8001d9c <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x5c>)
 8001d86:	68da      	ldr	r2, [r3, #12]
 8001d88:	fab2 f282 	clz	r2, r2
 8001d8c:	0952      	lsrs	r2, r2, #5
 8001d8e:	e7e4      	b.n	8001d5a <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001d90:	4770      	bx	lr
 8001d92:	bf00      	nop
 8001d94:	24000820 	.word	0x24000820
 8001d98:	58022400 	.word	0x58022400
 8001d9c:	58021400 	.word	0x58021400

08001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>:
/*
 * Sets a pin low.
 */
void GPIO::clear(GPIO_ID id)
{
    switch (id)
 8001da0:	2803      	cmp	r0, #3
 8001da2:	d825      	bhi.n	8001df0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x50>
 8001da4:	e8df f000 	tbb	[pc, r0]
 8001da8:	1b130b02 	.word	0x1b130b02
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_WritePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin, M_GPIO_PIN_RESET(id));
 8001dac:	4b11      	ldr	r3, [pc, #68]	@ (8001df4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dae:	2108      	movs	r1, #8
 8001db0:	681a      	ldr	r2, [r3, #0]
 8001db2:	3a00      	subs	r2, #0
 8001db4:	bf18      	it	ne
 8001db6:	2201      	movne	r2, #1
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001db8:	480f      	ldr	r0, [pc, #60]	@ (8001df8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x58>)
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001dba:	f005 bea3 	b.w	8007b04 <HAL_GPIO_WritePin>
        HAL_GPIO_WritePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin, M_GPIO_PIN_RESET(id));
 8001dbe:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dc0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001dc4:	685a      	ldr	r2, [r3, #4]
 8001dc6:	3a00      	subs	r2, #0
 8001dc8:	bf18      	it	ne
 8001dca:	2201      	movne	r2, #1
 8001dcc:	e7f4      	b.n	8001db8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin, M_GPIO_PIN_RESET(id));
 8001dce:	4b09      	ldr	r3, [pc, #36]	@ (8001df4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001dd0:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001dd4:	689a      	ldr	r2, [r3, #8]
 8001dd6:	3a00      	subs	r2, #0
 8001dd8:	bf18      	it	ne
 8001dda:	2201      	movne	r2, #1
 8001ddc:	e7ec      	b.n	8001db8 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x18>
        HAL_GPIO_WritePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin, M_GPIO_PIN_RESET(id));
 8001dde:	4b05      	ldr	r3, [pc, #20]	@ (8001df4 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x54>)
 8001de0:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001de4:	4805      	ldr	r0, [pc, #20]	@ (8001dfc <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x5c>)
 8001de6:	68da      	ldr	r2, [r3, #12]
 8001de8:	3a00      	subs	r2, #0
 8001dea:	bf18      	it	ne
 8001dec:	2201      	movne	r2, #1
 8001dee:	e7e4      	b.n	8001dba <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE+0x1a>
#endif
        break;
    }
}
 8001df0:	4770      	bx	lr
 8001df2:	bf00      	nop
 8001df4:	24000820 	.word	0x24000820
 8001df8:	58022400 	.word	0x58022400
 8001dfc:	58021400 	.word	0x58021400

08001e00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>:
/*
 * Toggles a pin.
 */
void GPIO::toggle(GPIO_ID id)
{
    switch (id)
 8001e00:	2803      	cmp	r0, #3
 8001e02:	d811      	bhi.n	8001e28 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x28>
 8001e04:	e8df f000 	tbb	[pc, r0]
 8001e08:	0c090602 	.word	0x0c090602
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        HAL_GPIO_TogglePin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e0c:	2108      	movs	r1, #8
#endif
        break;
    case GPIO::RENDER_TIME:
#if defined(RENDER_TIME_GPIO_Port) && defined(RENDER_TIME_Pin)
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e0e:	4807      	ldr	r0, [pc, #28]	@ (8001e2c <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x2c>)
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e10:	f005 be7d 	b.w	8007b0e <HAL_GPIO_TogglePin>
        HAL_GPIO_TogglePin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e14:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e18:	e7f9      	b.n	8001e0e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e1a:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e1e:	e7f6      	b.n	8001e0e <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0xe>
        HAL_GPIO_TogglePin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e20:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e24:	4802      	ldr	r0, [pc, #8]	@ (8001e30 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x30>)
 8001e26:	e7f3      	b.n	8001e10 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE+0x10>
#endif
        break;
    }
}
 8001e28:	4770      	bx	lr
 8001e2a:	bf00      	nop
 8001e2c:	58022400 	.word	0x58022400
 8001e30:	58021400 	.word	0x58021400

08001e34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>:

/*
 * Gets the state of a pin.
 */
bool GPIO::get(GPIO_ID id)
{
 8001e34:	b508      	push	{r3, lr}
    GPIO_PinState bitstatus = GPIO_PIN_RESET;
    switch (id)
 8001e36:	2803      	cmp	r0, #3
 8001e38:	d815      	bhi.n	8001e66 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x32>
 8001e3a:	e8df f000 	tbb	[pc, r0]
 8001e3e:	0a02      	.short	0x0a02
 8001e40:	100d      	.short	0x100d
    {
    case GPIO::VSYNC_FREQ:
#if defined(VSYNC_FREQ_GPIO_Port) && defined(VSYNC_FREQ_Pin)
        bitstatus = HAL_GPIO_ReadPin(VSYNC_FREQ_GPIO_Port, VSYNC_FREQ_Pin);
 8001e42:	2108      	movs	r1, #8
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
#endif
        break;
    case GPIO::FRAME_RATE:
#if defined(FRAME_RATE_GPIO_Port) && defined(FRAME_RATE_Pin)
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e44:	4809      	ldr	r0, [pc, #36]	@ (8001e6c <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x38>)
#endif
        break;
    case GPIO::MCU_ACTIVE:
#if defined(MCU_ACTIVE_GPIO_Port) && defined(MCU_ACTIVE_Pin)
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e46:	f005 fe57 	bl	8007af8 <HAL_GPIO_ReadPin>
#endif
        break;
    }
    return (bitstatus == GPIO_PIN_SET);
}
 8001e4a:	1e43      	subs	r3, r0, #1
 8001e4c:	4258      	negs	r0, r3
 8001e4e:	4158      	adcs	r0, r3
 8001e50:	bd08      	pop	{r3, pc}
        bitstatus = HAL_GPIO_ReadPin(RENDER_TIME_GPIO_Port, RENDER_TIME_Pin);
 8001e52:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e56:	e7f5      	b.n	8001e44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(FRAME_RATE_GPIO_Port, FRAME_RATE_Pin);
 8001e58:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8001e5c:	e7f2      	b.n	8001e44 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x10>
        bitstatus = HAL_GPIO_ReadPin(MCU_ACTIVE_GPIO_Port, MCU_ACTIVE_Pin);
 8001e5e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001e62:	4803      	ldr	r0, [pc, #12]	@ (8001e70 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x3c>)
 8001e64:	e7ef      	b.n	8001e46 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x12>
    switch (id)
 8001e66:	2000      	movs	r0, #0
 8001e68:	e7ef      	b.n	8001e4a <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE+0x16>
 8001e6a:	bf00      	nop
 8001e6c:	58022400 	.word	0x58022400
 8001e70:	58021400 	.word	0x58021400

08001e74 <_ZN8touchgfx4GPIO4initEv>:
{
 8001e74:	b570      	push	{r4, r5, r6, lr}
 8001e76:	4d08      	ldr	r5, [pc, #32]	@ (8001e98 <_ZN8touchgfx4GPIO4initEv+0x24>)
    for (int id = 0; id <= 4; id++)
 8001e78:	2400      	movs	r4, #0
                GPIO_InvertedLevels[id] = 1;
 8001e7a:	2601      	movs	r6, #1
        if (GPIO::get(static_cast<GPIO_ID>(id)))
 8001e7c:	b2e0      	uxtb	r0, r4
 8001e7e:	f7ff ffd9 	bl	8001e34 <_ZN8touchgfx4GPIO3getENS0_7GPIO_IDE>
 8001e82:	b118      	cbz	r0, 8001e8c <_ZN8touchgfx4GPIO4initEv+0x18>
            if (GPIO_InvertedLevels[id] != 1)
 8001e84:	682b      	ldr	r3, [r5, #0]
 8001e86:	2b01      	cmp	r3, #1
                GPIO_InvertedLevels[id] = 1;
 8001e88:	bf18      	it	ne
 8001e8a:	602e      	strne	r6, [r5, #0]
    for (int id = 0; id <= 4; id++)
 8001e8c:	3401      	adds	r4, #1
 8001e8e:	3504      	adds	r5, #4
 8001e90:	2c05      	cmp	r4, #5
 8001e92:	d1f3      	bne.n	8001e7c <_ZN8touchgfx4GPIO4initEv+0x8>
}
 8001e94:	bd70      	pop	{r4, r5, r6, pc}
 8001e96:	bf00      	nop
 8001e98:	24000820 	.word	0x24000820

08001e9c <_ZN8touchgfx3HAL21setDisplayOrientationENS_18DisplayOrientationE>:
     * @note A screen transition must occur before this takes effect!
     */
    virtual void setDisplayOrientation(DisplayOrientation orientation)
    {
        requestedOrientation = orientation;
        displayOrientationChangeRequested = true;
 8001e9c:	2301      	movs	r3, #1
        requestedOrientation = orientation;
 8001e9e:	f880 1078 	strb.w	r1, [r0, #120]	@ 0x78
        displayOrientationChangeRequested = true;
 8001ea2:	f880 3079 	strb.w	r3, [r0, #121]	@ 0x79
    }
 8001ea6:	4770      	bx	lr

08001ea8 <_ZN8touchgfx3HAL9sampleKeyERh>:
     */
    virtual bool sampleKey(uint8_t& key)
    {
        (void)key; // Unused variable
        return false;
    }
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	4770      	bx	lr

08001eac <_ZN8touchgfx3HAL19setAnimationStorageEPv>:
     *
     * @see setFrameBufferStartAddresses
     */
    virtual void setAnimationStorage(void* animationStorage)
    {
        frameBuffer2 = reinterpret_cast<uint16_t*>(animationStorage);
 8001eac:	6441      	str	r1, [r0, #68]	@ 0x44
        USE_ANIMATION_STORAGE = animationStorage != 0;
 8001eae:	3900      	subs	r1, #0
 8001eb0:	4b02      	ldr	r3, [pc, #8]	@ (8001ebc <_ZN8touchgfx3HAL19setAnimationStorageEPv+0x10>)
 8001eb2:	bf18      	it	ne
 8001eb4:	2101      	movne	r1, #1
 8001eb6:	7019      	strb	r1, [r3, #0]
    }
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	240253a7 	.word	0x240253a7

08001ec0 <_ZNK8touchgfx3HAL18getFlashDataReaderEv>:
     * @return the FlashDataReader.
     */
    virtual FlashDataReader* getFlashDataReader() const
    {
        return 0;
    }
 8001ec0:	2000      	movs	r0, #0
 8001ec2:	4770      	bx	lr

08001ec4 <_ZN8touchgfx3HAL9taskDelayEt>:
     *
     * @see registerTaskDelayFunction
     */
    virtual void taskDelay(uint16_t ms)
    {
        if (taskDelayFunc)
 8001ec4:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 8001ec6:	b10b      	cbz	r3, 8001ecc <_ZN8touchgfx3HAL9taskDelayEt+0x8>
        {
            taskDelayFunc(ms);
 8001ec8:	4608      	mov	r0, r1
 8001eca:	4718      	bx	r3
        }
    }
 8001ecc:	4770      	bx	lr

08001ece <_ZN8touchgfx3HAL17getTFTCurrentLineEv>:
     *         implemented".
     */
    virtual uint16_t getTFTCurrentLine()
    {
        return 0xFFFFu;
    }
 8001ece:	f64f 70ff 	movw	r0, #65535	@ 0xffff
 8001ed2:	4770      	bx	lr

08001ed4 <_ZN8touchgfx3HAL10getDMATypeEv>:
     *
     * @return a DMAType value of the concrete DMA implementation.
     */
    virtual DMAType getDMAType()
    {
        return dma.getDMAType();
 8001ed4:	6840      	ldr	r0, [r0, #4]
 8001ed6:	6803      	ldr	r3, [r0, #0]
 8001ed8:	699b      	ldr	r3, [r3, #24]
 8001eda:	4718      	bx	r3

08001edc <_ZNK11TouchGFXHAL17getTFTFrameBufferEv>:
    // and implemented needed functionality here.

    /* USER CODE BEGIN getTFTFrameBuffer */
    return currFbBase;
    /* USER CODE END getTFTFrameBuffer */
}
 8001edc:	4b01      	ldr	r3, [pc, #4]	@ (8001ee4 <_ZNK11TouchGFXHAL17getTFTFrameBufferEv+0x8>)
 8001ede:	6818      	ldr	r0, [r3, #0]
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	24000844 	.word	0x24000844

08001ee8 <_ZN11TouchGFXHALD1Ev>:
 *
 * @brief HAL implementation for TouchGFX.
 *
 * @sa HAL
 */
class TouchGFXHAL : public TouchGFXGeneratedHAL
 8001ee8:	4770      	bx	lr

08001eea <_ZN11TouchGFXHAL16flushFrameBufferERKN8touchgfx4RectE>:
    // and implemented needed functionality here.
    // Please note, HAL::flushFrameBuffer(const touchgfx::Rect& rect) must
    // be called to notify the touchgfx framework that flush has been performed.

    /* USER CODE BEGIN flushFrameBuffer step 1 */
    TouchGFXGeneratedHAL::flushFrameBuffer(rect);
 8001eea:	f001 bc78 	b.w	80037de <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>

08001eee <_ZN11TouchGFXHAL19configureInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN configureInterrupts */
    TouchGFXGeneratedHAL::configureInterrupts();
 8001eee:	f001 bc07 	b.w	8003700 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>

08001ef2 <_ZN11TouchGFXHAL16enableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN enableInterrupts */
    TouchGFXGeneratedHAL::enableInterrupts();
 8001ef2:	f001 bdd9 	b.w	8003aa8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>

08001ef6 <_ZN11TouchGFXHAL17disableInterruptsEv>:
    //
    // To overwrite the generated implementation, omit call to parent function
    // and implemented needed functionality here.

    /* USER CODE BEGIN disableInterrupts */
    TouchGFXGeneratedHAL::disableInterrupts();
 8001ef6:	f001 bdcb 	b.w	8003a90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>
	...

08001efc <_ZN11TouchGFXHAL8endFrameEv>:
    refreshRequested = false;
    return HAL::beginFrame();
}

void TouchGFXHAL::endFrame()
{
 8001efc:	b510      	push	{r4, lr}
 8001efe:	4604      	mov	r4, r0
    TouchGFXGeneratedHAL::endFrame();
 8001f00:	f001 fd8e 	bl	8003a20 <_ZN20TouchGFXGeneratedHAL8endFrameEv>
    if (frameBufferUpdatedThisFrame)
 8001f04:	f894 304b 	ldrb.w	r3, [r4, #75]	@ 0x4b
 8001f08:	b113      	cbz	r3, 8001f10 <_ZN11TouchGFXHAL8endFrameEv+0x14>
    {
        refreshRequested = true;
 8001f0a:	4b02      	ldr	r3, [pc, #8]	@ (8001f14 <_ZN11TouchGFXHAL8endFrameEv+0x18>)
 8001f0c:	2201      	movs	r2, #1
 8001f0e:	701a      	strb	r2, [r3, #0]
    }
}
 8001f10:	bd10      	pop	{r4, pc}
 8001f12:	bf00      	nop
 8001f14:	2400000c 	.word	0x2400000c

08001f18 <_ZN11TouchGFXHAL17setTFTFrameBufferEPt>:
    TouchGFXGeneratedHAL::setTFTFrameBuffer(address);
 8001f18:	f001 bbfa 	b.w	8003710 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>

08001f1c <_ZN8touchgfx3HAL15backPorchExitedEv>:
    virtual void backPorchExited()
 8001f1c:	b510      	push	{r4, lr}
 8001f1e:	4604      	mov	r4, r0
        swapFrameBuffers();
 8001f20:	f00d fe82 	bl	800fc28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>
        tick();
 8001f24:	6823      	ldr	r3, [r4, #0]
 8001f26:	4620      	mov	r0, r4
 8001f28:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
    }
 8001f2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        tick();
 8001f30:	4718      	bx	r3

08001f32 <_ZN20TouchGFXGeneratedHAL17unlockFrameBufferEv>:
     * @brief Unlocks the framebuffer.
     *
     * This specialization is marks DMA2D as un-reserved by the framwork.
     * @see HAL::unlockFrameBuffer
     */
    virtual void unlockFrameBuffer()
 8001f32:	b510      	push	{r4, lr}
 8001f34:	4604      	mov	r4, r0
    {
        HAL::unlockFrameBuffer();
 8001f36:	f00d f9ff 	bl	800f338 <_ZN8touchgfx3HAL17unlockFrameBufferEv>
        dma.start();
 8001f3a:	6860      	ldr	r0, [r4, #4]
 8001f3c:	6803      	ldr	r3, [r0, #0]
    }
 8001f3e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        dma.start();
 8001f42:	691b      	ldr	r3, [r3, #16]
 8001f44:	4718      	bx	r3

08001f46 <_ZN11TouchGFXHAL16flushFrameBufferEv>:
        HAL::flushFrameBuffer();
 8001f46:	f00d b8cd 	b.w	800f0e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>

08001f4a <_ZN11TouchGFXHALD0Ev>:
 8001f4a:	b510      	push	{r4, lr}
 8001f4c:	4604      	mov	r4, r0
 8001f4e:	217c      	movs	r1, #124	@ 0x7c
 8001f50:	f01f f869 	bl	8021026 <_ZdlPvj>
 8001f54:	4620      	mov	r0, r4
 8001f56:	bd10      	pop	{r4, pc}

08001f58 <_ZN11TouchGFXHAL10beginFrameEv>:
    refreshRequested = false;
 8001f58:	4b02      	ldr	r3, [pc, #8]	@ (8001f64 <_ZN11TouchGFXHAL10beginFrameEv+0xc>)
 8001f5a:	2200      	movs	r2, #0
 8001f5c:	701a      	strb	r2, [r3, #0]
    return HAL::beginFrame();
 8001f5e:	f00d b8fd 	b.w	800f15c <_ZN8touchgfx3HAL10beginFrameEv>
 8001f62:	bf00      	nop
 8001f64:	2400000c 	.word	0x2400000c

08001f68 <_ZN11TouchGFXHAL10initializeEv>:
{
 8001f68:	b538      	push	{r3, r4, r5, lr}
 8001f6a:	4604      	mov	r4, r0
    mcuInstr.init();
 8001f6c:	4d06      	ldr	r5, [pc, #24]	@ (8001f88 <_ZN11TouchGFXHAL10initializeEv+0x20>)
    TouchGFXGeneratedHAL::initialize();
 8001f6e:	f001 fbf7 	bl	8003760 <_ZN20TouchGFXGeneratedHAL10initializeEv>
        lockDMAToPorch = enableLock;
 8001f72:	2300      	movs	r3, #0
    mcuInstr.init();
 8001f74:	4628      	mov	r0, r5
 8001f76:	f884 304a 	strb.w	r3, [r4, #74]	@ 0x4a
 8001f7a:	f7ff fe3b 	bl	8001bf4 <_ZN8touchgfx22STM32H7Instrumentation4initEv>
        updateMCULoad = enabled;
 8001f7e:	2301      	movs	r3, #1
        mcuInstrumentation = mcuInstr;
 8001f80:	6125      	str	r5, [r4, #16]
        updateMCULoad = enabled;
 8001f82:	f884 3070 	strb.w	r3, [r4, #112]	@ 0x70
}
 8001f86:	bd38      	pop	{r3, r4, r5, pc}
 8001f88:	24000834 	.word	0x24000834

08001f8c <_ZN11TouchGFXHAL9taskEntryEv>:
    enableLCDControllerInterrupt();
 8001f8c:	6803      	ldr	r3, [r0, #0]
{
 8001f8e:	4604      	mov	r4, r0
 8001f90:	b507      	push	{r0, r1, r2, lr}
    enableLCDControllerInterrupt();
 8001f92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8001f96:	4798      	blx	r3
    enableInterrupts();
 8001f98:	6823      	ldr	r3, [r4, #0]
 8001f9a:	4620      	mov	r0, r4
 8001f9c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8001f9e:	4798      	blx	r3
    OSWrappers::waitForVSync();
 8001fa0:	f000 ff5c 	bl	8002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
    backPorchExited();
 8001fa4:	6823      	ldr	r3, [r4, #0]
 8001fa6:	4620      	mov	r0, r4
 8001fa8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001faa:	4798      	blx	r3
    HAL_DSI_ShortWrite(&hdsi, LCD_OTM8009A_ID, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_DISPON, 0x00);
 8001fac:	2100      	movs	r1, #0
 8001fae:	2329      	movs	r3, #41	@ 0x29
 8001fb0:	2215      	movs	r2, #21
 8001fb2:	4805      	ldr	r0, [pc, #20]	@ (8001fc8 <_ZN11TouchGFXHAL9taskEntryEv+0x3c>)
 8001fb4:	9100      	str	r1, [sp, #0]
 8001fb6:	f005 fb14 	bl	80075e2 <HAL_DSI_ShortWrite>
        OSWrappers::waitForVSync();
 8001fba:	f000 ff4f 	bl	8002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>
        backPorchExited();
 8001fbe:	6823      	ldr	r3, [r4, #0]
 8001fc0:	4620      	mov	r0, r4
 8001fc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001fc4:	4798      	blx	r3
    for (;;)
 8001fc6:	e7f8      	b.n	8001fba <_ZN11TouchGFXHAL9taskEntryEv+0x2e>
 8001fc8:	240006c0 	.word	0x240006c0

08001fcc <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv>:
    virtual void noTouch();

    /** Perform the actual display orientation change. */
    virtual void performDisplayOrientationChange()
    {
        if (requestedOrientation != nativeDisplayOrientation)
 8001fcc:	f890 1034 	ldrb.w	r1, [r0, #52]	@ 0x34
        {
            if (DISPLAY_ROTATION == rotate0)
 8001fd0:	4b0d      	ldr	r3, [pc, #52]	@ (8002008 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x3c>)
    virtual void performDisplayOrientationChange()
 8001fd2:	b510      	push	{r4, lr}
        if (requestedOrientation != nativeDisplayOrientation)
 8001fd4:	f890 4078 	ldrb.w	r4, [r0, #120]	@ 0x78
            if (DISPLAY_ROTATION == rotate0)
 8001fd8:	781a      	ldrb	r2, [r3, #0]
        if (requestedOrientation != nativeDisplayOrientation)
 8001fda:	428c      	cmp	r4, r1
 8001fdc:	d009      	beq.n	8001ff2 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x26>
            if (DISPLAY_ROTATION == rotate0)
 8001fde:	b93a      	cbnz	r2, 8001ff0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            {
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fe0:	490a      	ldr	r1, [pc, #40]	@ (800200c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fe2:	4a0b      	ldr	r2, [pc, #44]	@ (8002010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
                const uint16_t tmp = DISPLAY_HEIGHT;
 8001fe4:	8808      	ldrh	r0, [r1, #0]
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fe6:	8814      	ldrh	r4, [r2, #0]
                DISPLAY_WIDTH = tmp;
 8001fe8:	8010      	strh	r0, [r2, #0]
                DISPLAY_ROTATION = rotate90;
 8001fea:	2201      	movs	r2, #1
                DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001fec:	800c      	strh	r4, [r1, #0]
        else if (DISPLAY_ROTATION != rotate0)
        {
            const uint16_t tmp = DISPLAY_HEIGHT;
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
            DISPLAY_WIDTH = tmp;
            DISPLAY_ROTATION = rotate0;
 8001fee:	701a      	strb	r2, [r3, #0]
        }
    }
 8001ff0:	bd10      	pop	{r4, pc}
        else if (DISPLAY_ROTATION != rotate0)
 8001ff2:	2a00      	cmp	r2, #0
 8001ff4:	d0fc      	beq.n	8001ff0 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x24>
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ff6:	4a06      	ldr	r2, [pc, #24]	@ (8002010 <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x44>)
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ff8:	4904      	ldr	r1, [pc, #16]	@ (800200c <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x40>)
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ffa:	8814      	ldrh	r4, [r2, #0]
            const uint16_t tmp = DISPLAY_HEIGHT;
 8001ffc:	8808      	ldrh	r0, [r1, #0]
            DISPLAY_HEIGHT = DISPLAY_WIDTH;
 8001ffe:	800c      	strh	r4, [r1, #0]
            DISPLAY_WIDTH = tmp;
 8002000:	8010      	strh	r0, [r2, #0]
            DISPLAY_ROTATION = rotate0;
 8002002:	2200      	movs	r2, #0
 8002004:	e7f3      	b.n	8001fee <_ZN8touchgfx3HAL31performDisplayOrientationChangeEv+0x22>
 8002006:	bf00      	nop
 8002008:	240253a0 	.word	0x240253a0
 800200c:	2402539e 	.word	0x2402539e
 8002010:	2402539c 	.word	0x2402539c

08002014 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt>:
    virtual void setFrameBufferSize(uint16_t width, uint16_t height)
 8002014:	b508      	push	{r3, lr}
        assert(width >= DISPLAY_WIDTH && height >= DISPLAY_HEIGHT && "Framebuffer cannot be smaller than display");
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x28>)
 8002018:	881b      	ldrh	r3, [r3, #0]
 800201a:	428b      	cmp	r3, r1
 800201c:	d803      	bhi.n	8002026 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x12>
 800201e:	4b08      	ldr	r3, [pc, #32]	@ (8002040 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x2c>)
 8002020:	881b      	ldrh	r3, [r3, #0]
 8002022:	4293      	cmp	r3, r2
 8002024:	d905      	bls.n	8002032 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x1e>
 8002026:	4b07      	ldr	r3, [pc, #28]	@ (8002044 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x30>)
 8002028:	219e      	movs	r1, #158	@ 0x9e
 800202a:	4a07      	ldr	r2, [pc, #28]	@ (8002048 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x34>)
 800202c:	4807      	ldr	r0, [pc, #28]	@ (800204c <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x38>)
 800202e:	f01f fb73 	bl	8021718 <__assert_func>
        FRAME_BUFFER_WIDTH = width;
 8002032:	4b07      	ldr	r3, [pc, #28]	@ (8002050 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x3c>)
 8002034:	8019      	strh	r1, [r3, #0]
        FRAME_BUFFER_HEIGHT = height;
 8002036:	4b07      	ldr	r3, [pc, #28]	@ (8002054 <_ZN8touchgfx3HAL18setFrameBufferSizeEtt+0x40>)
 8002038:	801a      	strh	r2, [r3, #0]
    }
 800203a:	bd08      	pop	{r3, pc}
 800203c:	2402539c 	.word	0x2402539c
 8002040:	2402539e 	.word	0x2402539e
 8002044:	080229dc 	.word	0x080229dc
 8002048:	08022a3f 	.word	0x08022a3f
 800204c:	08022a82 	.word	0x08022a82
 8002050:	240253a2 	.word	0x240253a2
 8002054:	240253a4 	.word	0x240253a4

08002058 <_ZN8touchgfx3HAL11getBlitCapsEv>:
    virtual BlitOperations getBlitCaps()
 8002058:	4603      	mov	r3, r0
        if (useDMAAcceleration)
 800205a:	f890 007a 	ldrb.w	r0, [r0, #122]	@ 0x7a
 800205e:	b118      	cbz	r0, 8002068 <_ZN8touchgfx3HAL11getBlitCapsEv+0x10>
 8002060:	6858      	ldr	r0, [r3, #4]
            return dma.getBlitCaps();
 8002062:	6803      	ldr	r3, [r0, #0]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	4718      	bx	r3
    }
 8002068:	4770      	bx	lr
	...

0800206c <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_>:
{
 800206c:	b570      	push	{r4, r5, r6, lr}
 800206e:	460d      	mov	r5, r1
 8002070:	4619      	mov	r1, r3
    currFbBase = (uint16_t*)frameBuffer;
 8002072:	4b0b      	ldr	r3, [pc, #44]	@ (80020a0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x34>)
 8002074:	601d      	str	r5, [r3, #0]
        assert(frameBuffer != 0 && "A framebuffer address must be set");
 8002076:	b935      	cbnz	r5, 8002086 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x1a>
 8002078:	4b0a      	ldr	r3, [pc, #40]	@ (80020a4 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x38>)
 800207a:	f240 21d2 	movw	r1, #722	@ 0x2d2
 800207e:	4a0a      	ldr	r2, [pc, #40]	@ (80020a8 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x3c>)
 8002080:	480a      	ldr	r0, [pc, #40]	@ (80020ac <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x40>)
 8002082:	f01f fb49 	bl	8021718 <__assert_func>
        frameBuffer1 = reinterpret_cast<uint16_t*>(doubleBuffer);
 8002086:	e9c0 520f 	strd	r5, r2, [r0, #60]	@ 0x3c
        USE_DOUBLE_BUFFERING = doubleBuffer != 0;
 800208a:	3a00      	subs	r2, #0
 800208c:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <_ZN11TouchGFXHAL28setFrameBufferStartAddressesEPvS0_S0_+0x44>)
 800208e:	bf18      	it	ne
 8002090:	2201      	movne	r2, #1
 8002092:	701a      	strb	r2, [r3, #0]
        setAnimationStorage(animationStorage);
 8002094:	6803      	ldr	r3, [r0, #0]
}
 8002096:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800209a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209e:	4718      	bx	r3
 80020a0:	24000844 	.word	0x24000844
 80020a4:	08022ad5 	.word	0x08022ad5
 80020a8:	08022b0d 	.word	0x08022b0d
 80020ac:	08022a82 	.word	0x08022a82
 80020b0:	240253a6 	.word	0x240253a6

080020b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>:
          lcdRef(display),
 80020b4:	e9c0 1201 	strd	r1, r2, [r0, #4]
          touchController(touchCtrl),
 80020b8:	60c3      	str	r3, [r0, #12]
          refreshStrategy(REFRESH_STRATEGY_DEFAULT),
 80020ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
          mcuInstrumentation(0),
 80020be:	2300      	movs	r3, #0
          auxiliaryLCD(0),
 80020c0:	e9c0 2312 	strd	r2, r3, [r0, #72]	@ 0x48
          touchSampleRate(1),
 80020c4:	4a1d      	ldr	r2, [pc, #116]	@ (800213c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x88>)
              startY(0),
              downX(0),
              downY(0),
              tickCount(0),
              velocityX(0),
              velocityY(0),
 80020c6:	8503      	strh	r3, [r0, #40]	@ 0x28
              inProgress(false)
 80020c8:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
    };

public:
    /** Default constructor. Does nothing. */
    Gestures()
        : drag(), listener(0), dragThresholdValue(0)
 80020cc:	62c3      	str	r3, [r0, #44]	@ 0x2c
 80020ce:	8603      	strh	r3, [r0, #48]	@ 0x30
          useAuxiliaryLCD(false),
 80020d0:	f880 3058 	strb.w	r3, [r0, #88]	@ 0x58
          lastY(0),
 80020d4:	6643      	str	r3, [r0, #100]	@ 0x64
          updateMCULoad(0),
 80020d6:	f880 3070 	strb.w	r3, [r0, #112]	@ 0x70
          cc_begin(0),
 80020da:	6743      	str	r3, [r0, #116]	@ 0x74
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020dc:	b570      	push	{r4, r5, r6, lr}
          vSyncCompensationEnabled(false),
 80020de:	e9c0 231a 	strd	r2, r3, [r0, #104]	@ 0x68
                           height)
 80020e2:	f8bd 5010 	ldrh.w	r5, [sp, #16]
          requestedOrientation(ORIENTATION_LANDSCAPE),
 80020e6:	4a16      	ldr	r2, [pc, #88]	@ (8002140 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x8c>)
TouchGFXHAL::TouchGFXHAL(touchgfx::DMA_Interface& dma, touchgfx::LCD& display, touchgfx::TouchController& tc, uint16_t width, uint16_t height)
 80020e8:	f8bd 6014 	ldrh.w	r6, [sp, #20]
                           height)
 80020ec:	3520      	adds	r5, #32
          buttonController(0),
 80020ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
            : startX(0),
 80020f2:	e9c0 3306 	strd	r3, r3, [r0, #24]
              tickCount(0),
 80020f6:	e9c0 3308 	strd	r3, r3, [r0, #32]
          frameBuffer0(0),
 80020fa:	e9c0 330e 	strd	r3, r3, [r0, #56]	@ 0x38
          frameBuffer2(0),
 80020fe:	e9c0 3310 	strd	r3, r3, [r0, #64]	@ 0x40
class Rect
{
public:
    /** Default constructor. Resulting in an empty Rect with coordinates 0,0. */
    Rect()
        : x(0), y(0), width(0), height(0)
 8002102:	e9c0 3314 	strd	r3, r3, [r0, #80]	@ 0x50
          lastX(0),
 8002106:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
          requestedOrientation(ORIENTATION_LANDSCAPE),
 800210a:	6782      	str	r2, [r0, #120]	@ 0x78
 800210c:	b2ad      	uxth	r5, r5
        instance = this;
 800210e:	4a0d      	ldr	r2, [pc, #52]	@ (8002144 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x90>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002110:	42b5      	cmp	r5, r6
        instance = this;
 8002112:	6010      	str	r0, [r2, #0]
        FRAME_BUFFER_WIDTH = DISPLAY_WIDTH = width;
 8002114:	4a0c      	ldr	r2, [pc, #48]	@ (8002148 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x94>)
 8002116:	8015      	strh	r5, [r2, #0]
 8002118:	4a0c      	ldr	r2, [pc, #48]	@ (800214c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x98>)
 800211a:	8015      	strh	r5, [r2, #0]
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800211c:	bf28      	it	cs
 800211e:	2500      	movcs	r5, #0
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002120:	4a0b      	ldr	r2, [pc, #44]	@ (8002150 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0x9c>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 8002122:	bf38      	it	cc
 8002124:	2501      	movcc	r5, #1
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 8002126:	8016      	strh	r6, [r2, #0]
 8002128:	4a0a      	ldr	r2, [pc, #40]	@ (8002154 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa0>)
        nativeDisplayOrientation = ((width >= height) ? ORIENTATION_LANDSCAPE : ORIENTATION_PORTRAIT);
 800212a:	f880 5034 	strb.w	r5, [r0, #52]	@ 0x34
        FRAME_BUFFER_HEIGHT = DISPLAY_HEIGHT = height;
 800212e:	8016      	strh	r6, [r2, #0]
        DISPLAY_ROTATION = rotate0;
 8002130:	4a09      	ldr	r2, [pc, #36]	@ (8002158 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa4>)
 8002132:	7013      	strb	r3, [r2, #0]
 8002134:	4b09      	ldr	r3, [pc, #36]	@ (800215c <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt+0xa8>)
 8002136:	6003      	str	r3, [r0, #0]
}
 8002138:	bd70      	pop	{r4, r5, r6, pc}
 800213a:	bf00      	nop
 800213c:	01000001 	.word	0x01000001
 8002140:	01010000 	.word	0x01010000
 8002144:	240253a8 	.word	0x240253a8
 8002148:	2402539c 	.word	0x2402539c
 800214c:	240253a2 	.word	0x240253a2
 8002150:	2402539e 	.word	0x2402539e
 8002154:	240253a4 	.word	0x240253a4
 8002158:	240253a0 	.word	0x240253a0
 800215c:	08022b64 	.word	0x08022b64

08002160 <DSI_IO_Write>:
      */
    int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
        int32_t ret = BSP_ERROR_NONE;

        if (Size <= 1U)
 8002160:	2b01      	cmp	r3, #1
    {
 8002162:	b513      	push	{r0, r1, r4, lr}
        if (Size <= 1U)
 8002164:	d80e      	bhi.n	8002184 <DSI_IO_Write+0x24>
        {
            if (HAL_DSI_ShortWrite(&hdsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 8002166:	5cd3      	ldrb	r3, [r2, r3]
 8002168:	2215      	movs	r2, #21
 800216a:	9300      	str	r3, [sp, #0]
 800216c:	460b      	mov	r3, r1
 800216e:	4601      	mov	r1, r0
 8002170:	4808      	ldr	r0, [pc, #32]	@ (8002194 <DSI_IO_Write+0x34>)
 8002172:	f005 fa36 	bl	80075e2 <HAL_DSI_ShortWrite>
 8002176:	b118      	cbz	r0, 8002180 <DSI_IO_Write+0x20>
            {
                ret = BSP_ERROR_BUS_FAILURE;
 8002178:	f06f 0007 	mvn.w	r0, #7
                ret = BSP_ERROR_BUS_FAILURE;
            }
        }

        return ret;
    }
 800217c:	b002      	add	sp, #8
 800217e:	bd10      	pop	{r4, pc}
        int32_t ret = BSP_ERROR_NONE;
 8002180:	2000      	movs	r0, #0
 8002182:	e7fb      	b.n	800217c <DSI_IO_Write+0x1c>
            if (HAL_DSI_LongWrite(&hdsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8002184:	e9cd 1200 	strd	r1, r2, [sp]
 8002188:	4601      	mov	r1, r0
 800218a:	2239      	movs	r2, #57	@ 0x39
 800218c:	4801      	ldr	r0, [pc, #4]	@ (8002194 <DSI_IO_Write+0x34>)
 800218e:	f005 fa39 	bl	8007604 <HAL_DSI_LongWrite>
 8002192:	e7f0      	b.n	8002176 <DSI_IO_Write+0x16>
 8002194:	240006c0 	.word	0x240006c0

08002198 <DSI_IO_Read>:
      * @param  pData pointer to a buffer to store the payload of a read back operation.
      * @param  Size  Data size to be read (in byte).
      * @retval BSP status
      */
    int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t* pData, uint16_t Size)
    {
 8002198:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        int32_t ret = BSP_ERROR_NONE;

        if (HAL_DSI_Read(&hdsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800219a:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800219e:	2106      	movs	r1, #6
 80021a0:	9100      	str	r1, [sp, #0]
 80021a2:	4601      	mov	r1, r0
 80021a4:	4805      	ldr	r0, [pc, #20]	@ (80021bc <DSI_IO_Read+0x24>)
 80021a6:	f005 fa8d 	bl	80076c4 <HAL_DSI_Read>
        int32_t ret = BSP_ERROR_NONE;
 80021aa:	2800      	cmp	r0, #0
        {
            ret = BSP_ERROR_BUS_FAILURE;
        }

        return ret;
    }
 80021ac:	bf14      	ite	ne
 80021ae:	f06f 0007 	mvnne.w	r0, #7
 80021b2:	2000      	moveq	r0, #0
 80021b4:	b005      	add	sp, #20
 80021b6:	f85d fb04 	ldr.w	pc, [sp], #4
 80021ba:	bf00      	nop
 80021bc:	240006c0 	.word	0x240006c0

080021c0 <LCD_ReqTear>:

    /**
     * Request TE at scanline.
     */
    void LCD_ReqTear(void)
    {
 80021c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
        uint8_t ScanLineParams[2];
        uint16_t scanline = 500;

        ScanLineParams[0] = scanline >> 8;
 80021c2:	f24f 4301 	movw	r3, #62465	@ 0xf401
        ScanLineParams[1] = scanline & 0x00FF;

        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021c6:	4c0b      	ldr	r4, [pc, #44]	@ (80021f4 <LCD_ReqTear+0x34>)
 80021c8:	2239      	movs	r2, #57	@ 0x39
 80021ca:	2100      	movs	r1, #0
        ScanLineParams[0] = scanline >> 8;
 80021cc:	f8ad 300c 	strh.w	r3, [sp, #12]
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 2, 0x44, ScanLineParams);
 80021d0:	ab03      	add	r3, sp, #12
 80021d2:	4620      	mov	r0, r4
 80021d4:	9301      	str	r3, [sp, #4]
 80021d6:	2344      	movs	r3, #68	@ 0x44
 80021d8:	9300      	str	r3, [sp, #0]
 80021da:	2302      	movs	r3, #2
 80021dc:	f005 fa12 	bl	8007604 <HAL_DSI_LongWrite>
        HAL_DSI_ShortWrite(&hdsi, 0, DSI_DCS_SHORT_PKT_WRITE_P1, OTM8009A_CMD_TEEON, 0x00);
 80021e0:	2100      	movs	r1, #0
 80021e2:	2335      	movs	r3, #53	@ 0x35
 80021e4:	2215      	movs	r2, #21
 80021e6:	4620      	mov	r0, r4
 80021e8:	9100      	str	r1, [sp, #0]
 80021ea:	f005 f9fa 	bl	80075e2 <HAL_DSI_ShortWrite>
    }
 80021ee:	b004      	add	sp, #16
 80021f0:	bd10      	pop	{r4, pc}
 80021f2:	bf00      	nop
 80021f4:	240006c0 	.word	0x240006c0

080021f8 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv>:
{
 80021f8:	b508      	push	{r3, lr}
    LCD_ReqTear();
 80021fa:	f7ff ffe1 	bl	80021c0 <LCD_ReqTear>
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_ER);
 80021fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002230 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x38>)
 8002200:	2202      	movs	r2, #2
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_CLEAR_FLAG(&hdsi, DSI_IT_TE);
 8002208:	2201      	movs	r2, #1
 800220a:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_TE);
 800220e:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 8002212:	f042 0201 	orr.w	r2, r2, #1
 8002216:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    __HAL_DSI_ENABLE_IT(&hdsi, DSI_IT_ER);
 800221a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800221e:	f042 0202 	orr.w	r2, r2, #2
 8002222:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
    LTDC->IER = 3; /* Enable line and FIFO underrun interrupts */
 8002226:	2203      	movs	r2, #3
 8002228:	4b02      	ldr	r3, [pc, #8]	@ (8002234 <_ZN11TouchGFXHAL28enableLCDControllerInterruptEv+0x3c>)
 800222a:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800222c:	bd08      	pop	{r3, pc}
 800222e:	bf00      	nop
 8002230:	240006c0 	.word	0x240006c0
 8002234:	50001000 	.word	0x50001000

08002238 <LCD_ReqEnable>:
    void LCD_ReqEnable(void)
    {
        static bool firstRefreshRequested = false;

        // Enable DSI interface once the very first framebuffer is ready for display
        if (!firstRefreshRequested)
 8002238:	4b07      	ldr	r3, [pc, #28]	@ (8002258 <LCD_ReqEnable+0x20>)
    {
 800223a:	b507      	push	{r0, r1, r2, lr}
        if (!firstRefreshRequested)
 800223c:	7819      	ldrb	r1, [r3, #0]
 800223e:	b939      	cbnz	r1, 8002250 <LCD_ReqEnable+0x18>
        {
            firstRefreshRequested = true;
 8002240:	2201      	movs	r2, #1

            /* Send Display on DCS Command to display */
            HAL_DSI_ShortWrite(&(hdsi),
 8002242:	4806      	ldr	r0, [pc, #24]	@ (800225c <LCD_ReqEnable+0x24>)
            firstRefreshRequested = true;
 8002244:	701a      	strb	r2, [r3, #0]
            HAL_DSI_ShortWrite(&(hdsi),
 8002246:	2329      	movs	r3, #41	@ 0x29
 8002248:	2215      	movs	r2, #21
 800224a:	9100      	str	r1, [sp, #0]
 800224c:	f005 f9c9 	bl	80075e2 <HAL_DSI_ShortWrite>
                               0,
                               DSI_DCS_SHORT_PKT_WRITE_P1,
                               OTM8009A_CMD_DISPON,
                               0x00);
        }
    }
 8002250:	b003      	add	sp, #12
 8002252:	f85d fb04 	ldr.w	pc, [sp], #4
 8002256:	bf00      	nop
 8002258:	24000830 	.word	0x24000830
 800225c:	240006c0 	.word	0x240006c0

08002260 <LCD_SetUpdateRegionLeft>:
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pCols[idx]);
    }

    void LCD_SetUpdateRegionLeft()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002260:	4b06      	ldr	r3, [pc, #24]	@ (800227c <LCD_SetUpdateRegionLeft+0x1c>)
    {
 8002262:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColLeft);
 8002264:	9301      	str	r3, [sp, #4]
 8002266:	232a      	movs	r3, #42	@ 0x2a
 8002268:	2239      	movs	r2, #57	@ 0x39
 800226a:	2100      	movs	r1, #0
 800226c:	9300      	str	r3, [sp, #0]
 800226e:	2304      	movs	r3, #4
 8002270:	4803      	ldr	r0, [pc, #12]	@ (8002280 <LCD_SetUpdateRegionLeft+0x20>)
 8002272:	f005 f9c7 	bl	8007604 <HAL_DSI_LongWrite>
    }
 8002276:	b003      	add	sp, #12
 8002278:	f85d fb04 	ldr.w	pc, [sp], #4
 800227c:	24000008 	.word	0x24000008
 8002280:	240006c0 	.word	0x240006c0

08002284 <LCD_SetUpdateRegionRight>:

    void LCD_SetUpdateRegionRight()
    {
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002284:	4b06      	ldr	r3, [pc, #24]	@ (80022a0 <LCD_SetUpdateRegionRight+0x1c>)
    {
 8002286:	b507      	push	{r0, r1, r2, lr}
        HAL_DSI_LongWrite(&hdsi, 0, DSI_DCS_LONG_PKT_WRITE, 4, OTM8009A_CMD_CASET, pColRight);
 8002288:	9301      	str	r3, [sp, #4]
 800228a:	232a      	movs	r3, #42	@ 0x2a
 800228c:	2239      	movs	r2, #57	@ 0x39
 800228e:	2100      	movs	r1, #0
 8002290:	9300      	str	r3, [sp, #0]
 8002292:	2304      	movs	r3, #4
 8002294:	4803      	ldr	r0, [pc, #12]	@ (80022a4 <LCD_SetUpdateRegionRight+0x20>)
 8002296:	f005 f9b5 	bl	8007604 <HAL_DSI_LongWrite>
    }
 800229a:	b003      	add	sp, #12
 800229c:	f85d fb04 	ldr.w	pc, [sp], #4
 80022a0:	24000004 	.word	0x24000004
 80022a4:	240006c0 	.word	0x240006c0

080022a8 <HAL_DSI_TearingEffectCallback>:
                           0, DSI_DCS_SHORT_PKT_WRITE_P1,
                           OTM8009A_CMD_WRDISBV, (uint16_t)(value * 255) / 100);
    }

    void HAL_DSI_TearingEffectCallback(DSI_HandleTypeDef* hdsi)
    {
 80022a8:	b538      	push	{r3, r4, r5, lr}
        return instance;
 80022aa:	4d14      	ldr	r5, [pc, #80]	@ (80022fc <HAL_DSI_TearingEffectCallback+0x54>)
 80022ac:	4604      	mov	r4, r0
        GPIO::set(GPIO::VSYNC_FREQ);
 80022ae:	2000      	movs	r0, #0
 80022b0:	f7ff fd46 	bl	8001d40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 80022b4:	682a      	ldr	r2, [r5, #0]
        vSyncCnt++;
 80022b6:	f892 306a 	ldrb.w	r3, [r2, #106]	@ 0x6a
 80022ba:	3301      	adds	r3, #1
 80022bc:	f882 306a 	strb.w	r3, [r2, #106]	@ 0x6a

        HAL::getInstance()->vSync();
        OSWrappers::signalVSync();
 80022c0:	f000 fdc0 	bl	8002e44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>

        // In single buffering, only require that the system waits for display update to be finished if we
        // actually intend to update the display in this frame.
        HAL::getInstance()->lockDMAToFrontPorch(refreshRequested);
 80022c4:	4b0e      	ldr	r3, [pc, #56]	@ (8002300 <HAL_DSI_TearingEffectCallback+0x58>)
        lockDMAToPorch = enableLock;
 80022c6:	682a      	ldr	r2, [r5, #0]
 80022c8:	7819      	ldrb	r1, [r3, #0]

        if (refreshRequested && !displayRefreshing)
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	f882 104a 	strb.w	r1, [r2, #74]	@ 0x4a
 80022d0:	b173      	cbz	r3, 80022f0 <HAL_DSI_TearingEffectCallback+0x48>
 80022d2:	4d0c      	ldr	r5, [pc, #48]	@ (8002304 <HAL_DSI_TearingEffectCallback+0x5c>)
 80022d4:	782b      	ldrb	r3, [r5, #0]
 80022d6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80022da:	b94b      	cbnz	r3, 80022f0 <HAL_DSI_TearingEffectCallback+0x48>
        {

            // Update region 0 = first area of display (First quarter for 16bpp, first half for 24bpp)
            updateRegion = 0;
 80022dc:	4b0a      	ldr	r3, [pc, #40]	@ (8002308 <HAL_DSI_TearingEffectCallback+0x60>)
 80022de:	601a      	str	r2, [r3, #0]
            LCD_SetUpdateRegionLeft();
 80022e0:	f7ff ffbe 	bl	8002260 <LCD_SetUpdateRegionLeft>

            // Transfer a quarter screen of pixel data.
            HAL_DSI_Refresh(hdsi);
 80022e4:	4620      	mov	r0, r4
 80022e6:	f005 f96c 	bl	80075c2 <HAL_DSI_Refresh>
            displayRefreshing = true;
 80022ea:	2301      	movs	r3, #1
 80022ec:	702b      	strb	r3, [r5, #0]
        }
        else
        {
            GPIO::clear(GPIO::VSYNC_FREQ);
        }
    }
 80022ee:	bd38      	pop	{r3, r4, r5, pc}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022f0:	2000      	movs	r0, #0
    }
 80022f2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
            GPIO::clear(GPIO::VSYNC_FREQ);
 80022f6:	f7ff bd53 	b.w	8001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 80022fa:	bf00      	nop
 80022fc:	240253a8 	.word	0x240253a8
 8002300:	2400000c 	.word	0x2400000c
 8002304:	2400084c 	.word	0x2400084c
 8002308:	24000848 	.word	0x24000848

0800230c <HAL_DSI_EndOfRefreshCallback>:

    void HAL_DSI_EndOfRefreshCallback(DSI_HandleTypeDef* hdsi)
    {
 800230c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
        if (displayRefreshing)
 8002310:	4e48      	ldr	r6, [pc, #288]	@ (8002434 <HAL_DSI_EndOfRefreshCallback+0x128>)
    {
 8002312:	b085      	sub	sp, #20
 8002314:	4604      	mov	r4, r0
        if (displayRefreshing)
 8002316:	7833      	ldrb	r3, [r6, #0]
 8002318:	2b00      	cmp	r3, #0
 800231a:	f000 8088 	beq.w	800242e <HAL_DSI_EndOfRefreshCallback+0x122>
        {
            if (updateRegion == 0)
 800231e:	f8df 9138 	ldr.w	r9, [pc, #312]	@ 8002458 <HAL_DSI_EndOfRefreshCallback+0x14c>
 8002322:	f8df 8138 	ldr.w	r8, [pc, #312]	@ 800245c <HAL_DSI_EndOfRefreshCallback+0x150>
 8002326:	f8d9 5000 	ldr.w	r5, [r9]
 800232a:	4f43      	ldr	r7, [pc, #268]	@ (8002438 <HAL_DSI_EndOfRefreshCallback+0x12c>)
 800232c:	2d00      	cmp	r5, #0
 800232e:	d13e      	bne.n	80023ae <HAL_DSI_EndOfRefreshCallback+0xa2>
            {
                HAL_Delay(1);
 8002330:	2001      	movs	r0, #1
                // If we transferred the left half, also transfer right half.
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
                uint16_t ADJUSTED_WIDTH = 432; //64-byte aligned width
                uint16_t REAL_WIDTH = 400; //we only actually have this amount of pixels on display
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002332:	4e42      	ldr	r6, [pc, #264]	@ (800243c <HAL_DSI_EndOfRefreshCallback+0x130>)
                HAL_Delay(1);
 8002334:	f004 f9a6 	bl	8006684 <HAL_Delay>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002338:	6823      	ldr	r3, [r4, #0]
 800233a:	9500      	str	r5, [sp, #0]
 800233c:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002340:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 8002342:	f022 0208 	bic.w	r2, r2, #8
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 8002346:	f500 6096 	add.w	r0, r0, #1200	@ 0x4b0
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 800234a:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800234e:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002352:	f002 0208 	and.w	r2, r2, #8
 8002356:	9200      	str	r2, [sp, #0]
 8002358:	9a00      	ldr	r2, [sp, #0]
                LTDC_LAYER(&hltdc, 0)->CFBAR = ((uint32_t)currFbBase) + 400 * 3;
 800235a:	f8d8 2000 	ldr.w	r2, [r8]
 800235e:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((ADJUSTED_WIDTH + 2) << 16) | 0x1E2;
 8002362:	4837      	ldr	r0, [pc, #220]	@ (8002440 <HAL_DSI_EndOfRefreshCallback+0x134>)
 8002364:	6106      	str	r6, [r0, #16]
                LTDC->TWCR = ((REAL_WIDTH + 2 + 1 - 1) << 16) | 0x1E3;
 8002366:	4e37      	ldr	r6, [pc, #220]	@ (8002444 <HAL_DSI_EndOfRefreshCallback+0x138>)
 8002368:	6146      	str	r6, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((REAL_WIDTH + 2) << 16) | 3;
 800236a:	4837      	ldr	r0, [pc, #220]	@ (8002448 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 800236c:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = ((832 * 3) << 16) | ((REAL_WIDTH) * 3 + 3);
 8002370:	4836      	ldr	r0, [pc, #216]	@ (800244c <HAL_DSI_EndOfRefreshCallback+0x140>)
 8002372:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 8002376:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 8002378:	f041 0101 	orr.w	r1, r1, #1
 800237c:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800237e:	9501      	str	r5, [sp, #4]
 8002380:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 8002384:	f042 0208 	orr.w	r2, r2, #8
 8002388:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800238c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8002390:	f003 0308 	and.w	r3, r3, #8
 8002394:	9301      	str	r3, [sp, #4]
 8002396:	9b01      	ldr	r3, [sp, #4]

                LCD_SetUpdateRegionRight(); //Set display column to 448-799
 8002398:	f7ff ff74 	bl	8002284 <LCD_SetUpdateRegionRight>
                updateRegion = 1;
 800239c:	2301      	movs	r3, #1

                HAL_DSI_Refresh(hdsi);
 800239e:	4620      	mov	r0, r4
                updateRegion = 1;
 80023a0:	f8c9 3000 	str.w	r3, [r9]
                    // Signal to the framework that display update has finished.
                    HAL::getInstance()->frontPorchEntered();
                }
            }
        }
    }
 80023a4:	b005      	add	sp, #20
 80023a6:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
                HAL_DSI_Refresh(hdsi);
 80023aa:	f005 b90a 	b.w	80075c2 <HAL_DSI_Refresh>
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023ae:	6803      	ldr	r3, [r0, #0]
 80023b0:	2500      	movs	r5, #0
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023b2:	6838      	ldr	r0, [r7, #0]
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023b4:	9502      	str	r5, [sp, #8]
 80023b6:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023ba:	4c25      	ldr	r4, [pc, #148]	@ (8002450 <HAL_DSI_EndOfRefreshCallback+0x144>)
                __HAL_DSI_WRAPPER_DISABLE(hdsi);
 80023bc:	f022 0208 	bic.w	r2, r2, #8
 80023c0:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 80023c4:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023c8:	f002 0208 	and.w	r2, r2, #8
 80023cc:	9202      	str	r2, [sp, #8]
 80023ce:	9a02      	ldr	r2, [sp, #8]
                LTDC_LAYER(&hltdc, 0)->CFBAR = (uint32_t)currFbBase;
 80023d0:	f8d8 2000 	ldr.w	r2, [r8]
 80023d4:	f8c2 00ac 	str.w	r0, [r2, #172]	@ 0xac
                LTDC->AWCR = ((WIDTH + 2) << 16) | 0x1E2;
 80023d8:	4819      	ldr	r0, [pc, #100]	@ (8002440 <HAL_DSI_EndOfRefreshCallback+0x134>)
 80023da:	6104      	str	r4, [r0, #16]
                LTDC->TWCR = ((WIDTH + 2 + 1) << 16) | 0x1E3;
 80023dc:	f104 1401 	add.w	r4, r4, #65537	@ 0x10001
 80023e0:	6144      	str	r4, [r0, #20]
                LTDC_LAYER(&hltdc, 0)->WHPCR = ((WIDTH + 2) << 16) | 3;
 80023e2:	4819      	ldr	r0, [pc, #100]	@ (8002448 <HAL_DSI_EndOfRefreshCallback+0x13c>)
 80023e4:	f8c2 0088 	str.w	r0, [r2, #136]	@ 0x88
                LTDC_LAYER(&hltdc, 0)->CFBLR = (((832 * 3) << 16) | ((WIDTH * 3) + 3));
 80023e8:	4818      	ldr	r0, [pc, #96]	@ (800244c <HAL_DSI_EndOfRefreshCallback+0x140>)
 80023ea:	f8c2 00b0 	str.w	r0, [r2, #176]	@ 0xb0
                GPIO::clear(GPIO::VSYNC_FREQ);
 80023ee:	4628      	mov	r0, r5
                __HAL_LTDC_RELOAD_IMMEDIATE_CONFIG(&hltdc);
 80023f0:	6a51      	ldr	r1, [r2, #36]	@ 0x24
 80023f2:	f041 0101 	orr.w	r1, r1, #1
 80023f6:	6251      	str	r1, [r2, #36]	@ 0x24
                __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80023f8:	9503      	str	r5, [sp, #12]
 80023fa:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80023fe:	f042 0208 	orr.w	r2, r2, #8
 8002402:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8002406:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800240a:	f003 0308 	and.w	r3, r3, #8
 800240e:	9303      	str	r3, [sp, #12]
 8002410:	9b03      	ldr	r3, [sp, #12]
                GPIO::clear(GPIO::VSYNC_FREQ);
 8002412:	f7ff fcc5 	bl	8001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
                LCD_ReqEnable();
 8002416:	f7ff ff0f 	bl	8002238 <LCD_ReqEnable>
        return instance;
 800241a:	4b0e      	ldr	r3, [pc, #56]	@ (8002454 <HAL_DSI_EndOfRefreshCallback+0x148>)
                displayRefreshing = false;
 800241c:	7035      	strb	r5, [r6, #0]
 800241e:	6818      	ldr	r0, [r3, #0]
                if (HAL::getInstance())
 8002420:	b128      	cbz	r0, 800242e <HAL_DSI_EndOfRefreshCallback+0x122>
        allowDMATransfers();
 8002422:	6803      	ldr	r3, [r0, #0]
 8002424:	6a1b      	ldr	r3, [r3, #32]
    }
 8002426:	b005      	add	sp, #20
 8002428:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800242c:	4718      	bx	r3
 800242e:	b005      	add	sp, #20
 8002430:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002434:	2400084c 	.word	0x2400084c
 8002438:	24000844 	.word	0x24000844
 800243c:	01b201e2 	.word	0x01b201e2
 8002440:	50001000 	.word	0x50001000
 8002444:	019201e3 	.word	0x019201e3
 8002448:	01920003 	.word	0x01920003
 800244c:	09c004b3 	.word	0x09c004b3
 8002450:	019201e2 	.word	0x019201e2
 8002454:	240253a8 	.word	0x240253a8
 8002458:	24000848 	.word	0x24000848
 800245c:	240004e8 	.word	0x240004e8

08002460 <IdleTaskHook>:

    portBASE_TYPE IdleTaskHook(void* p)
    {
 8002460:	4601      	mov	r1, r0
 8002462:	b508      	push	{r3, lr}
        return instance;
 8002464:	4b03      	ldr	r3, [pc, #12]	@ (8002474 <IdleTaskHook+0x14>)
 8002466:	6818      	ldr	r0, [r3, #0]
        if ((int)p) //idle task sched out
 8002468:	b101      	cbz	r1, 800246c <IdleTaskHook+0xc>
        {
            touchgfx::HAL::getInstance()->setMCUActive(true);
 800246a:	2101      	movs	r1, #1
        }
        else //idle task sched in
        {
            touchgfx::HAL::getInstance()->setMCUActive(false);
 800246c:	f00d fbf6 	bl	800fc5c <_ZN8touchgfx3HAL12setMCUActiveEb>
        }
        return pdTRUE;
    }
 8002470:	2001      	movs	r0, #1
 8002472:	bd08      	pop	{r3, pc}
 8002474:	240253a8 	.word	0x240253a8

08002478 <_GLOBAL__sub_I_displayRefreshing>:
        : cc_consumed(0),
 8002478:	4b03      	ldr	r3, [pc, #12]	@ (8002488 <_GLOBAL__sub_I_displayRefreshing+0x10>)
 800247a:	2200      	movs	r2, #0
 800247c:	605a      	str	r2, [r3, #4]
          cc_in(0)
 800247e:	609a      	str	r2, [r3, #8]
 8002480:	4a02      	ldr	r2, [pc, #8]	@ (800248c <_GLOBAL__sub_I_displayRefreshing+0x14>)
 8002482:	601a      	str	r2, [r3, #0]

}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	24000834 	.word	0x24000834
 800248c:	080228ec 	.word	0x080228ec

08002490 <_ZNK20HardwareMJPEGDecoder21getCurrentFrameNumberEv>:
    virtual bool decodeThumbnail(uint32_t frameno, uint8_t* buffer, uint16_t width, uint16_t height);
    virtual void gotoFrame(uint32_t frameno);
    virtual uint32_t getCurrentFrameNumber() const
    {
        return frameNumber;
    }
 8002490:	6940      	ldr	r0, [r0, #20]
 8002492:	4770      	bx	lr

08002494 <_ZN20HardwareMJPEGDecoder12getLastErrorEv>:
    }

    virtual AVIErrors getLastError()
    {
        return lastError;
    }
 8002494:	f890 0040 	ldrb.w	r0, [r0, #64]	@ 0x40
 8002498:	4770      	bx	lr

0800249a <_ZN20HardwareMJPEGDecoder8hasVideoEv>:
    readVideoHeader();
}

bool HardwareMJPEGDecoder::hasVideo()
{
    return (reader != 0) || (movieData != 0);
 800249a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800249c:	b923      	cbnz	r3, 80024a8 <_ZN20HardwareMJPEGDecoder8hasVideoEv+0xe>
 800249e:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 80024a0:	3800      	subs	r0, #0
 80024a2:	bf18      	it	ne
 80024a4:	2001      	movne	r0, #1
 80024a6:	4770      	bx	lr
 80024a8:	2001      	movs	r0, #1
}
 80024aa:	4770      	bx	lr

080024ac <_ZN20HardwareMJPEGDecoder17getNumberOfFramesEv>:
}

uint32_t HardwareMJPEGDecoder::getNumberOfFrames()
{
    return videoInfo.number_of_frames;
}
 80024ac:	6880      	ldr	r0, [r0, #8]
 80024ae:	4770      	bx	lr

080024b0 <_ZN20HardwareMJPEGDecoder14setRepeatVideoEb>:

void HardwareMJPEGDecoder::setRepeatVideo(bool repeat)
{

}
 80024b0:	4770      	bx	lr

080024b2 <_ZN20HardwareMJPEGDecoder12getVideoInfoEPN8touchgfx16VideoInformationE>:

void HardwareMJPEGDecoder::getVideoInfo(touchgfx::VideoInformation* data)
{
    *data = videoInfo;
 80024b2:	3004      	adds	r0, #4
{
 80024b4:	b510      	push	{r4, lr}
 80024b6:	460c      	mov	r4, r1
    *data = videoInfo;
 80024b8:	c80f      	ldmia	r0, {r0, r1, r2, r3}
 80024ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 80024be:	bd10      	pop	{r4, pc}

080024c0 <_ZN20HardwareMJPEGDecoderD1Ev>:
class HardwareMJPEGDecoder : public MJPEGDecoder
 80024c0:	4770      	bx	lr
	...

080024c4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt>:
{
 80024c4:	b508      	push	{r3, lr}
    assert(0);
 80024c6:	4a03      	ldr	r2, [pc, #12]	@ (80024d4 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x10>)
 80024c8:	f44f 71e2 	mov.w	r1, #452	@ 0x1c4
 80024cc:	4b02      	ldr	r3, [pc, #8]	@ (80024d8 <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x14>)
 80024ce:	4803      	ldr	r0, [pc, #12]	@ (80024dc <_ZN20HardwareMJPEGDecoder15decodeThumbnailEmPhtt+0x18>)
 80024d0:	f01f f922 	bl	8021718 <__assert_func>
 80024d4:	08022c34 	.word	0x08022c34
 80024d8:	080249db 	.word	0x080249db
 80024dc:	08022c8f 	.word	0x08022c8f

080024e0 <_ZN20HardwareMJPEGDecoderD0Ev>:
 80024e0:	b510      	push	{r4, lr}
 80024e2:	4604      	mov	r4, r0
 80024e4:	2148      	movs	r1, #72	@ 0x48
 80024e6:	f01e fd9e 	bl	8021026 <_ZdlPvj>
 80024ea:	4620      	mov	r0, r4
 80024ec:	bd10      	pop	{r4, pc}
	...

080024f0 <_ZN20HardwareMJPEGDecoderC1Ev>:
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 80024f0:	2200      	movs	r2, #0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80024f2:	4b0e      	ldr	r3, [pc, #56]	@ (800252c <_ZN20HardwareMJPEGDecoderC1Ev+0x3c>)
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80024f4:	b510      	push	{r4, lr}
    semDecodingDone = SEM_CREATE();
 80024f6:	4611      	mov	r1, r2
HardwareMJPEGDecoder::HardwareMJPEGDecoder()
 80024f8:	4604      	mov	r4, r0
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 80024fa:	6003      	str	r3, [r0, #0]
 80024fc:	63c2      	str	r2, [r0, #60]	@ 0x3c
 80024fe:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    : frameNumber(0), currentMovieOffset(0), indexOffset(0), firstFrameOffset(0), lastFrameEnd(0), movieLength(0), movieData(0),
 8002502:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8002506:	e9c0 2207 	strd	r2, r2, [r0, #28]
 800250a:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
      reader(0), aviBuffer(0), aviBufferLength(0), aviBufferStartOffset(0), lastError(AVI_NO_ERROR)
 800250e:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 8002512:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
    videoInfo.frame_width = 0;
 8002516:	e9c0 2203 	strd	r2, r2, [r0, #12]
    videoInfo.number_of_frames = 0;
 800251a:	e9c0 2201 	strd	r2, r2, [r0, #4]
    semDecodingDone = SEM_CREATE();
 800251e:	2001      	movs	r0, #1
 8002520:	f00a fa38 	bl	800c994 <osSemaphoreNew>
 8002524:	4b02      	ldr	r3, [pc, #8]	@ (8002530 <_ZN20HardwareMJPEGDecoderC1Ev+0x40>)
 8002526:	6018      	str	r0, [r3, #0]
}
 8002528:	4620      	mov	r0, r4
 800252a:	bd10      	pop	{r4, pc}
 800252c:	08022eec 	.word	0x08022eec
 8002530:	2400086c 	.word	0x2400086c

08002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>:
{
 8002534:	b410      	push	{r4}
 8002536:	460c      	mov	r4, r1
 8002538:	4611      	mov	r1, r2
 800253a:	461a      	mov	r2, r3
    if (reader != 0)
 800253c:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800253e:	b13b      	cbz	r3, 8002550 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x1c>
        src = reinterpret_cast<const char*>(aviBuffer + (offset - aviBufferStartOffset));
 8002540:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002542:	6b40      	ldr	r0, [r0, #52]	@ 0x34
 8002544:	1ae4      	subs	r4, r4, r3
        src = (const char*)movieData + offset;
 8002546:	4420      	add	r0, r4
}
 8002548:	f85d 4b04 	ldr.w	r4, [sp], #4
    return strncmp(src, str, num);
 800254c:	f01f bb88 	b.w	8021c60 <strncmp>
        src = (const char*)movieData + offset;
 8002550:	6ac0      	ldr	r0, [r0, #44]	@ 0x2c
 8002552:	e7f8      	b.n	8002546 <_ZN20HardwareMJPEGDecoder7compareEmPKcm+0x12>

08002554 <_ZN20HardwareMJPEGDecoder6getU32Em>:
    if (reader != 0)
 8002554:	6b03      	ldr	r3, [r0, #48]	@ 0x30
{
 8002556:	b510      	push	{r4, lr}
    if (reader != 0)
 8002558:	b173      	cbz	r3, 8002578 <_ZN20HardwareMJPEGDecoder6getU32Em+0x24>
        const uint32_t index = offset - aviBufferStartOffset;
 800255a:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 800255c:	6b42      	ldr	r2, [r0, #52]	@ 0x34
        const uint32_t index = offset - aviBufferStartOffset;
 800255e:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8) | (aviBuffer[index + 2] << 16) | (aviBuffer[index + 3] << 24);
 8002560:	1853      	adds	r3, r2, r1
 8002562:	5c52      	ldrb	r2, [r2, r1]
 8002564:	7898      	ldrb	r0, [r3, #2]
 8002566:	785c      	ldrb	r4, [r3, #1]
 8002568:	0400      	lsls	r0, r0, #16
 800256a:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
        val |= d[2] << 16;
 800256e:	4310      	orrs	r0, r2
        val |= d[3] << 24;
 8002570:	78db      	ldrb	r3, [r3, #3]
 8002572:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
}
 8002576:	bd10      	pop	{r4, pc}
        volatile const uint8_t* const d = movieData + offset;
 8002578:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 800257a:	1853      	adds	r3, r2, r1
        val |= d[0];
 800257c:	5c52      	ldrb	r2, [r2, r1]
        val |= d[1] << 8;
 800257e:	7859      	ldrb	r1, [r3, #1]
        val |= d[2] << 16;
 8002580:	7898      	ldrb	r0, [r3, #2]
 8002582:	0400      	lsls	r0, r0, #16
 8002584:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8002588:	e7f1      	b.n	800256e <_ZN20HardwareMJPEGDecoder6getU32Em+0x1a>

0800258a <_ZN20HardwareMJPEGDecoder6getU16Em>:
    if (reader != 0)
 800258a:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 800258c:	b143      	cbz	r3, 80025a0 <_ZN20HardwareMJPEGDecoder6getU16Em+0x16>
        const uint32_t index = offset - aviBufferStartOffset;
 800258e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8002590:	1ac9      	subs	r1, r1, r3
        return aviBuffer[index + 0] | (aviBuffer[index + 1] << 8);
 8002592:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8002594:	185a      	adds	r2, r3, r1
 8002596:	5c58      	ldrb	r0, [r3, r1]
 8002598:	7852      	ldrb	r2, [r2, #1]
 800259a:	ea40 2002 	orr.w	r0, r0, r2, lsl #8
 800259e:	4770      	bx	lr
        volatile const uint8_t* const d = movieData + offset;
 80025a0:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 80025a2:	185a      	adds	r2, r3, r1
        val |= d[0];
 80025a4:	5c58      	ldrb	r0, [r3, r1]
        val |= d[1] << 8;
 80025a6:	7853      	ldrb	r3, [r2, #1]
 80025a8:	ea40 2003 	orr.w	r0, r0, r3, lsl #8
}
 80025ac:	4770      	bx	lr
	...

080025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>:
{
 80025b0:	b570      	push	{r4, r5, r6, lr}
 80025b2:	4604      	mov	r4, r0
    if (reader != 0)
 80025b4:	6b00      	ldr	r0, [r0, #48]	@ 0x30
{
 80025b6:	460d      	mov	r5, r1
 80025b8:	4616      	mov	r6, r2
    if (reader != 0)
 80025ba:	b1d8      	cbz	r0, 80025f4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x44>
        if (length > aviBufferLength)
 80025bc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 80025be:	4293      	cmp	r3, r2
 80025c0:	d208      	bcs.n	80025d4 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x24>
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025c2:	2309      	movs	r3, #9
            assert(!"Buffer to small");
 80025c4:	4a0d      	ldr	r2, [pc, #52]	@ (80025fc <_ZN20HardwareMJPEGDecoder8readDataEmm+0x4c>)
 80025c6:	219e      	movs	r1, #158	@ 0x9e
 80025c8:	480d      	ldr	r0, [pc, #52]	@ (8002600 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x50>)
            lastError = AVI_ERROR_FILE_BUFFER_TO_SMALL;
 80025ca:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
            assert(!"Buffer to small");
 80025ce:	4b0d      	ldr	r3, [pc, #52]	@ (8002604 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x54>)
 80025d0:	f01f f8a2 	bl	8021718 <__assert_func>
        reader->seek(offset);
 80025d4:	6803      	ldr	r3, [r0, #0]
 80025d6:	68db      	ldr	r3, [r3, #12]
 80025d8:	4798      	blx	r3
        if (!reader->readData(aviBuffer, length))
 80025da:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 80025dc:	4632      	mov	r2, r6
 80025de:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80025e0:	6803      	ldr	r3, [r0, #0]
 80025e2:	691b      	ldr	r3, [r3, #16]
 80025e4:	4798      	blx	r3
 80025e6:	b910      	cbnz	r0, 80025ee <_ZN20HardwareMJPEGDecoder8readDataEmm+0x3e>
            lastError = AVI_ERROR_EOF_REACHED;
 80025e8:	230d      	movs	r3, #13
 80025ea:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return aviBuffer;
 80025ee:	6b60      	ldr	r0, [r4, #52]	@ 0x34
        aviBufferStartOffset = offset;
 80025f0:	63e5      	str	r5, [r4, #60]	@ 0x3c
}
 80025f2:	bd70      	pop	{r4, r5, r6, pc}
    return movieData + offset;
 80025f4:	6ae0      	ldr	r0, [r4, #44]	@ 0x2c
 80025f6:	4408      	add	r0, r1
 80025f8:	e7fb      	b.n	80025f2 <_ZN20HardwareMJPEGDecoder8readDataEmm+0x42>
 80025fa:	bf00      	nop
 80025fc:	08022d27 	.word	0x08022d27
 8002600:	08022c8f 	.word	0x08022c8f
 8002604:	08022d14 	.word	0x08022d14

08002608 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv>:
{
 8002608:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 800260c:	6943      	ldr	r3, [r0, #20]
{
 800260e:	4604      	mov	r4, r0
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002610:	b92b      	cbnz	r3, 800261e <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x16>
 8002612:	4b22      	ldr	r3, [pc, #136]	@ (800269c <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x94>)
 8002614:	21e4      	movs	r1, #228	@ 0xe4
 8002616:	4a22      	ldr	r2, [pc, #136]	@ (80026a0 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x98>)
 8002618:	4822      	ldr	r0, [pc, #136]	@ (80026a4 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x9c>)
 800261a:	f01f f87d 	bl	8021718 <__assert_func>
    readData(currentMovieOffset, 8);
 800261e:	2208      	movs	r2, #8
 8002620:	6981      	ldr	r1, [r0, #24]
 8002622:	f7ff ffc5 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002626:	69a1      	ldr	r1, [r4, #24]
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002628:	f243 0630 	movw	r6, #12336	@ 0x3030
 800262c:	f246 3764 	movw	r7, #25444	@ 0x6364
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002630:	3104      	adds	r1, #4
 8002632:	4620      	mov	r0, r4
 8002634:	f7ff ff8e 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
    while (currentMovieOffset + 8 + chunkSize < movieLength)
 8002638:	69a3      	ldr	r3, [r4, #24]
 800263a:	4418      	add	r0, r3
 800263c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800263e:	f100 0208 	add.w	r2, r0, #8
 8002642:	429a      	cmp	r2, r3
 8002644:	d306      	bcc.n	8002654 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x4c>
    frameNumber = 1;
 8002646:	2301      	movs	r3, #1
    return false;
 8002648:	2000      	movs	r0, #0
    frameNumber = 1;
 800264a:	6163      	str	r3, [r4, #20]
    currentMovieOffset = firstFrameOffset; /* start over */
 800264c:	6a23      	ldr	r3, [r4, #32]
 800264e:	61a3      	str	r3, [r4, #24]
}
 8002650:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        frameNumber++;
 8002654:	6963      	ldr	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002656:	f100 0109 	add.w	r1, r0, #9
        readData(currentMovieOffset, 8);
 800265a:	2208      	movs	r2, #8
 800265c:	4620      	mov	r0, r4
        frameNumber++;
 800265e:	3301      	adds	r3, #1
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002660:	f021 0101 	bic.w	r1, r1, #1
        frameNumber++;
 8002664:	6163      	str	r3, [r4, #20]
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002666:	61a1      	str	r1, [r4, #24]
        readData(currentMovieOffset, 8);
 8002668:	f7ff ffa2 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
        uint32_t streamNo  = getU16(currentMovieOffset);
 800266c:	f8d4 9018 	ldr.w	r9, [r4, #24]
 8002670:	4620      	mov	r0, r4
 8002672:	4649      	mov	r1, r9
 8002674:	f7ff ff89 	bl	800258a <_ZN20HardwareMJPEGDecoder6getU16Em>
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002678:	f109 0102 	add.w	r1, r9, #2
        uint32_t streamNo  = getU16(currentMovieOffset);
 800267c:	4680      	mov	r8, r0
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 800267e:	4620      	mov	r0, r4
 8002680:	f7ff ff83 	bl	800258a <_ZN20HardwareMJPEGDecoder6getU16Em>
        chunkSize = getU32(currentMovieOffset + 4);
 8002684:	f109 0104 	add.w	r1, r9, #4
        uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002688:	4605      	mov	r5, r0
        chunkSize = getU32(currentMovieOffset + 4);
 800268a:	4620      	mov	r0, r4
 800268c:	f7ff ff62 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
        if (streamNo == STREAM0 && chunkType == TYPEDC)
 8002690:	45b0      	cmp	r8, r6
 8002692:	d1d1      	bne.n	8002638 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
 8002694:	42bd      	cmp	r5, r7
 8002696:	d1cf      	bne.n	8002638 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x30>
            return true;
 8002698:	2001      	movs	r0, #1
 800269a:	e7d9      	b.n	8002650 <_ZN20HardwareMJPEGDecoder13gotoNextFrameEv+0x48>
 800269c:	08022d69 	.word	0x08022d69
 80026a0:	08022db2 	.word	0x08022db2
 80026a4:	08022c8f 	.word	0x08022c8f

080026a8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm>:
    if (frameNumber == 0)
 80026a8:	2901      	cmp	r1, #1
    if (frameNumber > getNumberOfFrames())
 80026aa:	6803      	ldr	r3, [r0, #0]
 80026ac:	bf38      	it	cc
 80026ae:	2101      	movcc	r1, #1
 80026b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
{
 80026b2:	b570      	push	{r4, r5, r6, lr}
 80026b4:	460d      	mov	r5, r1
 80026b6:	4604      	mov	r4, r0
    if (frameNumber > getNumberOfFrames())
 80026b8:	4798      	blx	r3
 80026ba:	42a8      	cmp	r0, r5
 80026bc:	d204      	bcs.n	80026c8 <_ZN20HardwareMJPEGDecoder9gotoFrameEm+0x20>
        frameNumber = getNumberOfFrames();
 80026be:	6823      	ldr	r3, [r4, #0]
 80026c0:	4620      	mov	r0, r4
 80026c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026c4:	4798      	blx	r3
 80026c6:	4605      	mov	r5, r0
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026c8:	1e6b      	subs	r3, r5, #1
 80026ca:	69e6      	ldr	r6, [r4, #28]
    readData(offset, 16);
 80026cc:	2210      	movs	r2, #16
 80026ce:	4620      	mov	r0, r4
    uint32_t offset = indexOffset + 8 + (frameNumber - 1) * 16;
 80026d0:	eb06 1603 	add.w	r6, r6, r3, lsl #4
    readData(offset, 16);
 80026d4:	f106 0108 	add.w	r1, r6, #8
 80026d8:	f7ff ff6a 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    currentMovieOffset = getU32(offset + 8) + firstFrameOffset - 4;
 80026dc:	f106 0110 	add.w	r1, r6, #16
 80026e0:	4620      	mov	r0, r4
 80026e2:	f7ff ff37 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80026e6:	6a23      	ldr	r3, [r4, #32]
 80026e8:	3b04      	subs	r3, #4
 80026ea:	4403      	add	r3, r0
    this->frameNumber = frameNumber;
 80026ec:	e9c4 5305 	strd	r5, r3, [r4, #20]
}
 80026f0:	bd70      	pop	{r4, r5, r6, pc}
	...

080026f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>:
    currentMovieOffset = 0;
 80026f4:	2100      	movs	r1, #0
    readData(0, 72);
 80026f6:	2248      	movs	r2, #72	@ 0x48
{
 80026f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80026fc:	4604      	mov	r4, r0
    currentMovieOffset = 0;
 80026fe:	6181      	str	r1, [r0, #24]
    lastError = AVI_NO_ERROR;
 8002700:	f880 1040 	strb.w	r1, [r0, #64]	@ 0x40
    readData(0, 72);
 8002704:	f7ff ff54 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (compare(currentMovieOffset, "RIFF", 4))
 8002708:	69a6      	ldr	r6, [r4, #24]
 800270a:	2304      	movs	r3, #4
 800270c:	4a63      	ldr	r2, [pc, #396]	@ (800289c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a8>)
 800270e:	4631      	mov	r1, r6
 8002710:	4620      	mov	r0, r4
 8002712:	f7ff ff0f 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002716:	b148      	cbz	r0, 800272c <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x38>
        lastError = AVI_ERROR_NOT_RIFF;
 8002718:	2303      	movs	r3, #3
        assert(!"RIFF header not found");
 800271a:	4a61      	ldr	r2, [pc, #388]	@ (80028a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 800271c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
        lastError = AVI_ERROR_NOT_RIFF;
 8002720:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"RIFF header not found");
 8002724:	4b5f      	ldr	r3, [pc, #380]	@ (80028a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b0>)
        assert(!"AVI header not found");
 8002726:	4860      	ldr	r0, [pc, #384]	@ (80028a8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b4>)
 8002728:	f01e fff6 	bl	8021718 <__assert_func>
    currentMovieOffset += 8;
 800272c:	f106 0108 	add.w	r1, r6, #8
    if (compare(currentMovieOffset, "AVI ", 4))
 8002730:	2304      	movs	r3, #4
 8002732:	4a5e      	ldr	r2, [pc, #376]	@ (80028ac <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1b8>)
 8002734:	4620      	mov	r0, r4
    currentMovieOffset += 8;
 8002736:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "AVI ", 4))
 8002738:	f7ff fefc 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800273c:	b138      	cbz	r0, 800274e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x5a>
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 800273e:	2304      	movs	r3, #4
        assert(!"AVI header not found");
 8002740:	4a57      	ldr	r2, [pc, #348]	@ (80028a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002742:	f44f 719a 	mov.w	r1, #308	@ 0x134
        lastError = AVI_ERROR_AVI_HEADER_NOT_FOUND;
 8002746:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI header not found");
 800274a:	4b59      	ldr	r3, [pc, #356]	@ (80028b0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1bc>)
 800274c:	e7eb      	b.n	8002726 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    currentMovieOffset += 4;
 800274e:	f106 010c 	add.w	r1, r6, #12
    if (compare(currentMovieOffset, "LIST", 4))
 8002752:	2304      	movs	r3, #4
 8002754:	4a57      	ldr	r2, [pc, #348]	@ (80028b4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c0>)
 8002756:	4620      	mov	r0, r4
    currentMovieOffset += 4;
 8002758:	61a1      	str	r1, [r4, #24]
    if (compare(currentMovieOffset, "LIST", 4))
 800275a:	f7ff feeb 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800275e:	4607      	mov	r7, r0
 8002760:	b138      	cbz	r0, 8002772 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x7e>
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 8002762:	2305      	movs	r3, #5
        assert(!"AVI LIST not found");
 8002764:	4a4e      	ldr	r2, [pc, #312]	@ (80028a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002766:	f240 113b 	movw	r1, #315	@ 0x13b
        lastError = AVI_ERROR_AVI_LIST_NOT_FOUND;
 800276a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        assert(!"AVI LIST not found");
 800276e:	4b52      	ldr	r3, [pc, #328]	@ (80028b8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c4>)
 8002770:	e7d9      	b.n	8002726 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    const uint32_t aviListSize = getU32(currentMovieOffset + 4);
 8002772:	f106 0110 	add.w	r1, r6, #16
 8002776:	4620      	mov	r0, r4
 8002778:	f7ff feec 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
    assert(aviListSize);
 800277c:	4605      	mov	r5, r0
 800277e:	b920      	cbnz	r0, 800278a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x96>
 8002780:	4b4e      	ldr	r3, [pc, #312]	@ (80028bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1c8>)
 8002782:	f240 1141 	movw	r1, #321	@ 0x141
 8002786:	4a46      	ldr	r2, [pc, #280]	@ (80028a0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1ac>)
 8002788:	e7cd      	b.n	8002726 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x32>
    uint32_t offset =  currentMovieOffset + 8;
 800278a:	f106 0814 	add.w	r8, r6, #20
    if (compare(offset, "hdrl", 4))
 800278e:	2304      	movs	r3, #4
 8002790:	4a4b      	ldr	r2, [pc, #300]	@ (80028c0 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1cc>)
 8002792:	4620      	mov	r0, r4
 8002794:	4641      	mov	r1, r8
 8002796:	f7ff fecd 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 800279a:	2800      	cmp	r0, #0
 800279c:	d049      	beq.n	8002832 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13e>
        lastError = AVI_ERROR_AVI_HDRL_NOT_FOUND;
 800279e:	2306      	movs	r3, #6
 80027a0:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    if (compare(offset, "avih", 4))
 80027a4:	2304      	movs	r3, #4
 80027a6:	4a47      	ldr	r2, [pc, #284]	@ (80028c4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d0>)
 80027a8:	f106 0118 	add.w	r1, r6, #24
 80027ac:	4620      	mov	r0, r4
 80027ae:	f7ff fec1 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027b2:	2800      	cmp	r0, #0
 80027b4:	d03f      	beq.n	8002836 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x142>
        lastError = AVI_ERROR_AVI_AVIH_NOT_FOUND;
 80027b6:	2307      	movs	r3, #7
 80027b8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
    uint32_t listOffset = aviListOffset + aviListSize + 8;
 80027bc:	4445      	add	r5, r8
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027be:	4f42      	ldr	r7, [pc, #264]	@ (80028c8 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d4>)
    readData(listOffset, 12);
 80027c0:	220c      	movs	r2, #12
 80027c2:	4620      	mov	r0, r4
 80027c4:	4629      	mov	r1, r5
 80027c6:	f7ff fef3 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    while (compare(listOffset + 8, "movi", 4) && (lastError == AVI_NO_ERROR) && listOffset < movieLength)
 80027ca:	f105 0608 	add.w	r6, r5, #8
 80027ce:	2304      	movs	r3, #4
 80027d0:	463a      	mov	r2, r7
 80027d2:	4620      	mov	r0, r4
 80027d4:	4631      	mov	r1, r6
 80027d6:	f7ff fead 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 80027da:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 80027de:	2800      	cmp	r0, #0
 80027e0:	d048      	beq.n	8002874 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x180>
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d148      	bne.n	8002878 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x184>
 80027e6:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 80027e8:	42ab      	cmp	r3, r5
 80027ea:	d849      	bhi.n	8002880 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x18c>
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80027ec:	f105 030c 	add.w	r3, r5, #12
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027f0:	3504      	adds	r5, #4
 80027f2:	4620      	mov	r0, r4
    currentMovieOffset = listOffset + 8 + 4; /* skip LIST and 'movi' */
 80027f4:	61a3      	str	r3, [r4, #24]
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 80027f6:	4629      	mov	r1, r5
 80027f8:	f7ff feac 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
 80027fc:	4430      	add	r0, r6
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 80027fe:	4629      	mov	r1, r5
    lastFrameEnd = listOffset + 8 + getU32(listOffset + 4);
 8002800:	6260      	str	r0, [r4, #36]	@ 0x24
    const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002802:	4620      	mov	r0, r4
 8002804:	f7ff fea6 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
    listOffset += listSize;
 8002808:	4406      	add	r6, r0
    readData(listOffset, 4);
 800280a:	2204      	movs	r2, #4
 800280c:	4620      	mov	r0, r4
 800280e:	4631      	mov	r1, r6
 8002810:	f7ff fece 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    if (!compare(listOffset, "idx1", 4))
 8002814:	2304      	movs	r3, #4
 8002816:	4a2d      	ldr	r2, [pc, #180]	@ (80028cc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1d8>)
 8002818:	4631      	mov	r1, r6
 800281a:	4620      	mov	r0, r4
 800281c:	f7ff fe8a 	bl	8002534 <_ZN20HardwareMJPEGDecoder7compareEmPKcm>
 8002820:	2800      	cmp	r0, #0
 8002822:	d138      	bne.n	8002896 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x1a2>
    frameNumber = 1; /* next frame number is 1 */
 8002824:	2301      	movs	r3, #1
        indexOffset = listOffset;
 8002826:	61e6      	str	r6, [r4, #28]
    frameNumber = 1; /* next frame number is 1 */
 8002828:	6163      	str	r3, [r4, #20]
    firstFrameOffset = currentMovieOffset;
 800282a:	69a3      	ldr	r3, [r4, #24]
 800282c:	6223      	str	r3, [r4, #32]
}
 800282e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    bool foundFrame = true;
 8002832:	2701      	movs	r7, #1
 8002834:	e7b6      	b.n	80027a4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xb0>
    if (foundFrame)
 8002836:	2f00      	cmp	r7, #0
 8002838:	d0c0      	beq.n	80027bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800283a:	f106 0120 	add.w	r1, r6, #32
 800283e:	4620      	mov	r0, r4
 8002840:	f7ff fe88 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002844:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
        videoInfo.number_of_frames = getU32(offset + 16);
 8002848:	f106 0130 	add.w	r1, r6, #48	@ 0x30
        videoInfo.ms_between_frames = getU32(offset) / 1000;
 800284c:	fbb0 f0f3 	udiv	r0, r0, r3
 8002850:	6060      	str	r0, [r4, #4]
        videoInfo.number_of_frames = getU32(offset + 16);
 8002852:	4620      	mov	r0, r4
 8002854:	f7ff fe7e 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_width = getU32(offset + 32);
 8002858:	f106 0140 	add.w	r1, r6, #64	@ 0x40
        videoInfo.number_of_frames = getU32(offset + 16);
 800285c:	60a0      	str	r0, [r4, #8]
        videoInfo.frame_width = getU32(offset + 32);
 800285e:	4620      	mov	r0, r4
 8002860:	f7ff fe78 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
        videoInfo.frame_height = getU32(offset + 36);
 8002864:	f106 0144 	add.w	r1, r6, #68	@ 0x44
        videoInfo.frame_width = getU32(offset + 32);
 8002868:	60e0      	str	r0, [r4, #12]
        videoInfo.frame_height = getU32(offset + 36);
 800286a:	4620      	mov	r0, r4
 800286c:	f7ff fe72 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002870:	6120      	str	r0, [r4, #16]
 8002872:	e7a3      	b.n	80027bc <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xc8>
    if (lastError != AVI_NO_ERROR)
 8002874:	2b00      	cmp	r3, #0
 8002876:	d0b9      	beq.n	80027ec <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xf8>
        lastError = AVI_ERROR_MOVI_NOT_FOUND;
 8002878:	230a      	movs	r3, #10
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 800287a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        return;
 800287e:	e7d6      	b.n	800282e <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x13a>
        const uint32_t listSize = getU32(listOffset + 4) + 8;
 8002880:	1d29      	adds	r1, r5, #4
 8002882:	4620      	mov	r0, r4
 8002884:	f7ff fe66 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
        listOffset += listSize;
 8002888:	1985      	adds	r5, r0, r6
        readData(listOffset, 12);
 800288a:	220c      	movs	r2, #12
 800288c:	4620      	mov	r0, r4
 800288e:	4629      	mov	r1, r5
 8002890:	f7ff fe8e 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002894:	e799      	b.n	80027ca <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0xd6>
        lastError = AVI_ERROR_IDX1_NOT_FOUND;
 8002896:	230b      	movs	r3, #11
 8002898:	e7ef      	b.n	800287a <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv+0x186>
 800289a:	bf00      	nop
 800289c:	08022de5 	.word	0x08022de5
 80028a0:	08022e03 	.word	0x08022e03
 80028a4:	08022dea 	.word	0x08022dea
 80028a8:	08022c8f 	.word	0x08022c8f
 80028ac:	08022e30 	.word	0x08022e30
 80028b0:	08022e35 	.word	0x08022e35
 80028b4:	08022e4d 	.word	0x08022e4d
 80028b8:	08022e52 	.word	0x08022e52
 80028bc:	08022e68 	.word	0x08022e68
 80028c0:	08022e74 	.word	0x08022e74
 80028c4:	08022e79 	.word	0x08022e79
 80028c8:	08022e7e 	.word	0x08022e7e
 80028cc:	08022e83 	.word	0x08022e83

080028d0 <_ZN20HardwareMJPEGDecoder12setVideoDataEPKhm>:
    movieLength = length;
 80028d0:	e9c0 210a 	strd	r2, r1, [r0, #40]	@ 0x28
    reader = 0; /* not using reader */
 80028d4:	2200      	movs	r2, #0
 80028d6:	6302      	str	r2, [r0, #48]	@ 0x30
    readVideoHeader();
 80028d8:	f7ff bf0c 	b.w	80026f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>

080028dc <_ZN20HardwareMJPEGDecoder12setVideoDataERN8touchgfx15VideoDataReaderE>:
{
 80028dc:	b510      	push	{r4, lr}
    movieData = 0;
 80028de:	2300      	movs	r3, #0
{
 80028e0:	4604      	mov	r4, r0
 80028e2:	4608      	mov	r0, r1
    movieData = 0;
 80028e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
    movieLength = reader.getDataLength();
 80028e6:	680b      	ldr	r3, [r1, #0]
    this->reader = &reader;
 80028e8:	6321      	str	r1, [r4, #48]	@ 0x30
    movieLength = reader.getDataLength();
 80028ea:	689b      	ldr	r3, [r3, #8]
 80028ec:	4798      	blx	r3
 80028ee:	62a0      	str	r0, [r4, #40]	@ 0x28
    readVideoHeader();
 80028f0:	4620      	mov	r0, r4
}
 80028f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    readVideoHeader();
 80028f6:	f7ff befd 	b.w	80026f4 <_ZN20HardwareMJPEGDecoder15readVideoHeaderEv>
	...

080028fc <JPEG_Decode_DMA>:
     * @param  JPEGImageSize_Bytes    : jpg image size in bytes.
     * @param  DestAddress : ARGB8888 destination Frame Buffer Address.
     * @retval None
     */
    uint32_t JPEG_Decode_DMA(JPEG_HandleTypeDef* hjpeg, uint8_t* input, uint32_t chunkSizeIn /* length */, uint8_t* output)
    {
 80028fc:	b537      	push	{r0, r1, r2, r4, r5, lr}
        FrameBufferAddress = output;
 80028fe:	4c14      	ldr	r4, [pc, #80]	@ (8002950 <JPEG_Decode_DMA+0x54>)
        JPEG_output_is_paused = 0;
        JPEG_OUT_Read_BufferIndex = 0;
        JPEG_OUT_Write_BufferIndex = 0;
 8002900:	4d14      	ldr	r5, [pc, #80]	@ (8002954 <JPEG_Decode_DMA+0x58>)
        FrameBufferAddress = output;
 8002902:	6023      	str	r3, [r4, #0]
        JPEG_output_is_paused = 0;
 8002904:	2400      	movs	r4, #0
 8002906:	4b14      	ldr	r3, [pc, #80]	@ (8002958 <JPEG_Decode_DMA+0x5c>)
 8002908:	601c      	str	r4, [r3, #0]
        JPEG_OUT_Read_BufferIndex = 0;
 800290a:	4b14      	ldr	r3, [pc, #80]	@ (800295c <JPEG_Decode_DMA+0x60>)
 800290c:	601c      	str	r4, [r3, #0]
        JPEG_InputImageIndex = 0;
 800290e:	4b14      	ldr	r3, [pc, #80]	@ (8002960 <JPEG_Decode_DMA+0x64>)
        JPEG_OUT_Write_BufferIndex = 0;
 8002910:	602c      	str	r4, [r5, #0]
        JPEG_InputImageIndex = 0;
 8002912:	601c      	str	r4, [r3, #0]
        JPEG_InputImageAddress = (uint32_t)input;
 8002914:	4b13      	ldr	r3, [pc, #76]	@ (8002964 <JPEG_Decode_DMA+0x68>)
 8002916:	6019      	str	r1, [r3, #0]
        JPEG_InputImageSize_Bytes = chunkSizeIn;
 8002918:	4b13      	ldr	r3, [pc, #76]	@ (8002968 <JPEG_Decode_DMA+0x6c>)
 800291a:	601a      	str	r2, [r3, #0]
        MCU_BlockIndex = 0;
 800291c:	4b13      	ldr	r3, [pc, #76]	@ (800296c <JPEG_Decode_DMA+0x70>)
 800291e:	601c      	str	r4, [r3, #0]

        /* Init buffers */
        for (uint32_t i = 0; i < NB_OUTPUT_DATA_BUFFERS; ++i)
        {
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002920:	4b13      	ldr	r3, [pc, #76]	@ (8002970 <JPEG_Decode_DMA+0x74>)
            Jpeg_OUT_BufferTab[i].DataBufferSize = 0;
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
        }

        /* Do not return from this function until done with decoding all chunks. */
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002922:	682a      	ldr	r2, [r5, #0]
 8002924:	f44f 75c0 	mov.w	r5, #384	@ 0x180
            Jpeg_OUT_BufferTab[i].State = JPEG_BUFFER_EMPTY;
 8002928:	701c      	strb	r4, [r3, #0]
 800292a:	741c      	strb	r4, [r3, #16]
            Jpeg_OUT_BufferTab[i].MCU_index = 0;
 800292c:	e9c3 4402 	strd	r4, r4, [r3, #8]
 8002930:	e9c3 4406 	strd	r4, r4, [r3, #24]
        HAL_JPEG_Decode_DMA(hjpeg, input, CHUNK_SIZE_IN, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002934:	eb03 1302 	add.w	r3, r3, r2, lsl #4
 8002938:	4a0e      	ldr	r2, [pc, #56]	@ (8002974 <JPEG_Decode_DMA+0x78>)
 800293a:	68d2      	ldr	r2, [r2, #12]
 800293c:	436a      	muls	r2, r5
 800293e:	9200      	str	r2, [sp, #0]
 8002940:	f44f 4250 	mov.w	r2, #53248	@ 0xd000
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	f005 ffe5 	bl	8008914 <HAL_JPEG_Decode_DMA>

        return 0;
    }
 800294a:	4620      	mov	r0, r4
 800294c:	b003      	add	sp, #12
 800294e:	bd30      	pop	{r4, r5, pc}
 8002950:	24009e98 	.word	0x24009e98
 8002954:	24009e74 	.word	0x24009e74
 8002958:	24009e84 	.word	0x24009e84
 800295c:	24000868 	.word	0x24000868
 8002960:	24009e94 	.word	0x24009e94
 8002964:	24009e8c 	.word	0x24009e8c
 8002968:	24009e90 	.word	0x24009e90
 800296c:	24000870 	.word	0x24000870
 8002970:	24000010 	.word	0x24000010
 8002974:	24000850 	.word	0x24000850

08002978 <HAL_JPEG_InfoReadyCallback>:
     */
    void HAL_JPEG_InfoReadyCallback(JPEG_HandleTypeDef* hjpeg, JPEG_ConfTypeDef* pInfo)
    {
        uint32_t hMCU, vMCU;

        if (pInfo->ChromaSubsampling == JPEG_420_SUBSAMPLING)
 8002978:	684b      	ldr	r3, [r1, #4]
 800297a:	2b01      	cmp	r3, #1
 800297c:	d115      	bne.n	80029aa <HAL_JPEG_InfoReadyCallback+0x32>
        {
            if ((pInfo->ImageWidth % 16) != 0)
 800297e:	68cb      	ldr	r3, [r1, #12]
 8002980:	071a      	lsls	r2, r3, #28
            {
                pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 8002982:	bf1e      	ittt	ne
 8002984:	f023 030f 	bicne.w	r3, r3, #15
 8002988:	3310      	addne	r3, #16
 800298a:	60cb      	strne	r3, [r1, #12]
            }

            if ((pInfo->ImageHeight % 16) != 0)
 800298c:	688b      	ldr	r3, [r1, #8]
 800298e:	0718      	lsls	r0, r3, #28
            {
                pInfo->ImageHeight += (16 - (pInfo->ImageHeight % 16));
 8002990:	bf1e      	ittt	ne
 8002992:	f023 030f 	bicne.w	r3, r3, #15
 8002996:	3310      	addne	r3, #16
 8002998:	608b      	strne	r3, [r1, #8]
            }

            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800299a:	68cb      	ldr	r3, [r1, #12]
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 800299c:	688a      	ldr	r2, [r1, #8]
            hMCU = (pInfo->ImageWidth / MCU_WIDTH_PIXELS);
 800299e:	091b      	lsrs	r3, r3, #4
            vMCU = (pInfo->ImageHeight / MCU_HEIGHT_PIXELS);
 80029a0:	0912      	lsrs	r2, r2, #4
            MCU_TotalNb = (hMCU * vMCU);
 80029a2:	4353      	muls	r3, r2
 80029a4:	4a0e      	ldr	r2, [pc, #56]	@ (80029e0 <HAL_JPEG_InfoReadyCallback+0x68>)
 80029a6:	6013      	str	r3, [r2, #0]
 80029a8:	4770      	bx	lr
        }
        else
        {
            if (pInfo->ChromaSubsampling == JPEG_422_SUBSAMPLING)
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d10e      	bne.n	80029cc <HAL_JPEG_InfoReadyCallback+0x54>
            {
                if ((pInfo->ImageWidth % 16) != 0)
 80029ae:	68cb      	ldr	r3, [r1, #12]
 80029b0:	071a      	lsls	r2, r3, #28
 80029b2:	d003      	beq.n	80029bc <HAL_JPEG_InfoReadyCallback+0x44>
                {
                    pInfo->ImageWidth += (16 - (pInfo->ImageWidth % 16));
 80029b4:	f023 030f 	bic.w	r3, r3, #15
 80029b8:	3310      	adds	r3, #16

            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
            {
                if ((pInfo->ImageWidth % 8) != 0)
                {
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029ba:	60cb      	str	r3, [r1, #12]
                }

                if ((pInfo->ImageHeight % 8) != 0)
 80029bc:	688b      	ldr	r3, [r1, #8]
 80029be:	075a      	lsls	r2, r3, #29
                {
                    pInfo->ImageHeight += (8 - (pInfo->ImageHeight % 8));
 80029c0:	bf1e      	ittt	ne
 80029c2:	f023 0307 	bicne.w	r3, r3, #7
 80029c6:	3308      	addne	r3, #8
 80029c8:	608b      	strne	r3, [r1, #8]
                }
            }
        }
    }
 80029ca:	4770      	bx	lr
            if (pInfo->ChromaSubsampling == JPEG_444_SUBSAMPLING)
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	d1fc      	bne.n	80029ca <HAL_JPEG_InfoReadyCallback+0x52>
                if ((pInfo->ImageWidth % 8) != 0)
 80029d0:	68cb      	ldr	r3, [r1, #12]
 80029d2:	0758      	lsls	r0, r3, #29
 80029d4:	d0f2      	beq.n	80029bc <HAL_JPEG_InfoReadyCallback+0x44>
                    pInfo->ImageWidth += (8 - (pInfo->ImageWidth % 8));
 80029d6:	f023 0307 	bic.w	r3, r3, #7
 80029da:	3308      	adds	r3, #8
 80029dc:	e7ed      	b.n	80029ba <HAL_JPEG_InfoReadyCallback+0x42>
 80029de:	bf00      	nop
 80029e0:	24009e7c 	.word	0x24009e7c

080029e4 <HAL_JPEG_GetDataCallback>:
     * @retval None
     */
    void HAL_JPEG_GetDataCallback(JPEG_HandleTypeDef* hjpeg, uint32_t NbDecodedData)
    {
        /* Input buffer has been consumed by the peripheral and to ask for a new data chunk if the operation (encoding/decoding) has not been complete yet. */
        JPEG_InputImageIndex += NbDecodedData;
 80029e4:	4a0b      	ldr	r2, [pc, #44]	@ (8002a14 <HAL_JPEG_GetDataCallback+0x30>)
 80029e6:	6813      	ldr	r3, [r2, #0]
 80029e8:	440b      	add	r3, r1
    {
 80029ea:	b430      	push	{r4, r5}
        JPEG_InputImageIndex += NbDecodedData;
 80029ec:	6013      	str	r3, [r2, #0]
        if (JPEG_InputImageIndex < JPEG_InputImageSize_Bytes)
 80029ee:	4a0a      	ldr	r2, [pc, #40]	@ (8002a18 <HAL_JPEG_GetDataCallback+0x34>)
 80029f0:	6812      	ldr	r2, [r2, #0]
 80029f2:	4293      	cmp	r3, r2
 80029f4:	d20c      	bcs.n	8002a10 <HAL_JPEG_GetDataCallback+0x2c>
        {
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029f6:	4c09      	ldr	r4, [pc, #36]	@ (8002a1c <HAL_JPEG_GetDataCallback+0x38>)
            uint32_t inDataLength = JPEG_InputImageSize_Bytes - JPEG_InputImageIndex;
 80029f8:	1ad2      	subs	r2, r2, r3
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 80029fa:	6825      	ldr	r5, [r4, #0]
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 80029fc:	f5b2 4f50 	cmp.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a00:	4429      	add	r1, r5
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a02:	bf28      	it	cs
 8002a04:	f44f 4250 	movcs.w	r2, #53248	@ 0xd000
            JPEG_InputImageAddress = JPEG_InputImageAddress + NbDecodedData;
 8002a08:	6021      	str	r1, [r4, #0]
        }
    }
 8002a0a:	bc30      	pop	{r4, r5}
            HAL_JPEG_ConfigInputBuffer(hjpeg, (uint8_t*)JPEG_InputImageAddress, inDataLength >= CHUNK_SIZE_IN ? CHUNK_SIZE_IN : inDataLength);
 8002a0c:	f005 bfe4 	b.w	80089d8 <HAL_JPEG_ConfigInputBuffer>
    }
 8002a10:	bc30      	pop	{r4, r5}
 8002a12:	4770      	bx	lr
 8002a14:	24009e94 	.word	0x24009e94
 8002a18:	24009e90 	.word	0x24009e90
 8002a1c:	24009e8c 	.word	0x24009e8c

08002a20 <HAL_JPEG_DataReadyCallback>:
     * @param pDataOut: pointer to the output data buffer
     * @param OutDataLength: length of output buffer in bytes
     * @retval None
     */
    void HAL_JPEG_DataReadyCallback(JPEG_HandleTypeDef* hjpeg, uint8_t* pDataOut, uint32_t OutDataLength)
    {
 8002a20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a22:	4c20      	ldr	r4, [pc, #128]	@ (8002aa4 <HAL_JPEG_DataReadyCallback+0x84>)
 8002a24:	2101      	movs	r1, #1
 8002a26:	4d20      	ldr	r5, [pc, #128]	@ (8002aa8 <HAL_JPEG_DataReadyCallback+0x88>)
    {
 8002a28:	4606      	mov	r6, r0
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a2a:	6823      	ldr	r3, [r4, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
        const uint32_t MCU = MCU_BlockIndex;
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;

        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a2c:	4f1f      	ldr	r7, [pc, #124]	@ (8002aac <HAL_JPEG_DataReadyCallback+0x8c>)
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State = JPEG_BUFFER_FULL;
 8002a2e:	011b      	lsls	r3, r3, #4
 8002a30:	54e9      	strb	r1, [r5, r3]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBufferSize = OutDataLength;
 8002a32:	6823      	ldr	r3, [r4, #0]
 8002a34:	eb05 1303 	add.w	r3, r5, r3, lsl #4
 8002a38:	609a      	str	r2, [r3, #8]
        const uint32_t MCU = MCU_BlockIndex;
 8002a3a:	4b1d      	ldr	r3, [pc, #116]	@ (8002ab0 <HAL_JPEG_DataReadyCallback+0x90>)
 8002a3c:	6819      	ldr	r1, [r3, #0]
        Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].MCU_index = MCU;
 8002a3e:	6822      	ldr	r2, [r4, #0]
 8002a40:	eb05 1202 	add.w	r2, r5, r2, lsl #4
 8002a44:	60d1      	str	r1, [r2, #12]
        MCU_BlockIndex += JPEG_ConvertorParams.MCU_pr_line;
 8002a46:	681a      	ldr	r2, [r3, #0]
 8002a48:	68f9      	ldr	r1, [r7, #12]
 8002a4a:	440a      	add	r2, r1
 8002a4c:	601a      	str	r2, [r3, #0]

        JPEG_OUT_Write_BufferIndex++;
 8002a4e:	6823      	ldr	r3, [r4, #0]
 8002a50:	3301      	adds	r3, #1
 8002a52:	6023      	str	r3, [r4, #0]
        if (JPEG_OUT_Write_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002a54:	6823      	ldr	r3, [r4, #0]
 8002a56:	2b01      	cmp	r3, #1
 8002a58:	d901      	bls.n	8002a5e <HAL_JPEG_DataReadyCallback+0x3e>
        {
            JPEG_OUT_Write_BufferIndex = 0;
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	6023      	str	r3, [r4, #0]
        }

        /* if the other buffer is full, then ui thread might be converting it */
        if (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State != JPEG_BUFFER_EMPTY)
 8002a5e:	6823      	ldr	r3, [r4, #0]
 8002a60:	011b      	lsls	r3, r3, #4
 8002a62:	5ceb      	ldrb	r3, [r5, r3]
 8002a64:	b133      	cbz	r3, 8002a74 <HAL_JPEG_DataReadyCallback+0x54>
        {
            HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002a66:	2102      	movs	r1, #2
 8002a68:	4630      	mov	r0, r6
 8002a6a:	f005 ff87 	bl	800897c <HAL_JPEG_Pause>
            JPEG_output_is_paused = 1;
 8002a6e:	4b11      	ldr	r3, [pc, #68]	@ (8002ab4 <HAL_JPEG_DataReadyCallback+0x94>)
 8002a70:	2201      	movs	r2, #1
 8002a72:	601a      	str	r2, [r3, #0]
        }
        HAL_JPEG_ConfigOutputBuffer(hjpeg, Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].DataBuffer, MCU_CHROMA_420_SIZE_BYTES * JPEG_ConvertorParams.MCU_pr_line);
 8002a74:	6822      	ldr	r2, [r4, #0]
 8002a76:	4630      	mov	r0, r6
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	eb05 1502 	add.w	r5, r5, r2, lsl #4
 8002a7e:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8002a82:	6869      	ldr	r1, [r5, #4]
 8002a84:	435a      	muls	r2, r3
 8002a86:	f005 ffaa 	bl	80089de <HAL_JPEG_ConfigOutputBuffer>

        /* Signal Hardware Decoding to wake up */
        if (!DMA2D_reference->isDMARunning() && !DMA2D_reference->getReserved())
 8002a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8002ab8 <HAL_JPEG_DataReadyCallback+0x98>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	7a1a      	ldrb	r2, [r3, #8]
 8002a90:	b93a      	cbnz	r2, 8002aa2 <HAL_JPEG_DataReadyCallback+0x82>
     *
     * @return true if DMA is reserved by rendering, false if not.
     */
    bool getReserved() const
    {
        return isReserved;
 8002a92:	7a9b      	ldrb	r3, [r3, #10]
 8002a94:	b92b      	cbnz	r3, 8002aa2 <HAL_JPEG_DataReadyCallback+0x82>
        {
            SEM_POST(semDecodingDone);
 8002a96:	4b09      	ldr	r3, [pc, #36]	@ (8002abc <HAL_JPEG_DataReadyCallback+0x9c>)
 8002a98:	6818      	ldr	r0, [r3, #0]
        }
    }
 8002a9a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
            SEM_POST(semDecodingDone);
 8002a9e:	f009 bfef 	b.w	800ca80 <osSemaphoreRelease>
    }
 8002aa2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002aa4:	24009e74 	.word	0x24009e74
 8002aa8:	24000010 	.word	0x24000010
 8002aac:	24000850 	.word	0x24000850
 8002ab0:	24000870 	.word	0x24000870
 8002ab4:	24009e84 	.word	0x24009e84
 8002ab8:	24009e78 	.word	0x24009e78
 8002abc:	2400086c 	.word	0x2400086c

08002ac0 <HAL_JPEG_ErrorCallback>:
  __ASM volatile ("cpsid i" : : : "memory");
 8002ac0:	b672      	cpsid	i
     * @retval None
     */
    void HAL_JPEG_ErrorCallback(JPEG_HandleTypeDef* hjpeg)
    {
        __disable_irq();
        while (1)
 8002ac2:	e7fe      	b.n	8002ac2 <HAL_JPEG_ErrorCallback+0x2>

08002ac4 <HAL_JPEG_DecodeCpltCallback>:
     * @param hjpeg: JPEG handle pointer
     * @retval None
     */
    void HAL_JPEG_DecodeCpltCallback(JPEG_HandleTypeDef* hjpeg)
    {
        Jpeg_HWDecodingEnd = 1;
 8002ac4:	4b01      	ldr	r3, [pc, #4]	@ (8002acc <HAL_JPEG_DecodeCpltCallback+0x8>)
 8002ac6:	2201      	movs	r2, #1
 8002ac8:	601a      	str	r2, [r3, #0]
    }
 8002aca:	4770      	bx	lr
 8002acc:	24009e88 	.word	0x24009e88

08002ad0 <JPEG_OutputHandler>:
 * @brief  JPEG Ouput Data BackGround Postprocessing .
 * @param hjpeg: JPEG handle pointer
 * @retval 1 : if JPEG processing has finished, 0 : if JPEG processing still ongoing
 */
uint32_t JPEG_OutputHandler(JPEG_HandleTypeDef* hjpeg)
{
 8002ad0:	b538      	push	{r3, r4, r5, lr}
    /* Decode frame complete */
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ad2:	4d16      	ldr	r5, [pc, #88]	@ (8002b2c <JPEG_OutputHandler+0x5c>)
{
 8002ad4:	4604      	mov	r4, r0
    if (Jpeg_HWDecodingEnd && DMA2D_CopyBufferEnd)
 8002ad6:	682b      	ldr	r3, [r5, #0]
 8002ad8:	b113      	cbz	r3, 8002ae0 <JPEG_OutputHandler+0x10>
 8002ada:	4b15      	ldr	r3, [pc, #84]	@ (8002b30 <JPEG_OutputHandler+0x60>)
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	bb1b      	cbnz	r3, 8002b28 <JPEG_OutputHandler+0x58>
    {
        return 1;
    }

    /* Try to start DMA2D video transfer if next buffer if full */
    if (!DMA2D_reference->isDMARunning() && (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && (DMA2D_CopyBufferEnd == 0))
 8002ae0:	4b14      	ldr	r3, [pc, #80]	@ (8002b34 <JPEG_OutputHandler+0x64>)
 8002ae2:	6818      	ldr	r0, [r3, #0]
 8002ae4:	7a03      	ldrb	r3, [r0, #8]
 8002ae6:	b963      	cbnz	r3, 8002b02 <JPEG_OutputHandler+0x32>
 8002ae8:	4b13      	ldr	r3, [pc, #76]	@ (8002b38 <JPEG_OutputHandler+0x68>)
 8002aea:	4a14      	ldr	r2, [pc, #80]	@ (8002b3c <JPEG_OutputHandler+0x6c>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	011b      	lsls	r3, r3, #4
 8002af0:	5cd3      	ldrb	r3, [r2, r3]
 8002af2:	2b01      	cmp	r3, #1
 8002af4:	d105      	bne.n	8002b02 <JPEG_OutputHandler+0x32>
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <JPEG_OutputHandler+0x60>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	b913      	cbnz	r3, 8002b02 <JPEG_OutputHandler+0x32>
    {
        DMA2D_reference->start();
 8002afc:	6803      	ldr	r3, [r0, #0]
 8002afe:	691b      	ldr	r3, [r3, #16]
 8002b00:	4798      	blx	r3
    }

    /* Start JPEG IP if paused and next buffer is empty */
    if ((JPEG_output_is_paused == 1) && (Jpeg_OUT_BufferTab[JPEG_OUT_Write_BufferIndex].State == JPEG_BUFFER_EMPTY) && (Jpeg_HWDecodingEnd == 0))
 8002b02:	4a0f      	ldr	r2, [pc, #60]	@ (8002b40 <JPEG_OutputHandler+0x70>)
 8002b04:	6813      	ldr	r3, [r2, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d10c      	bne.n	8002b24 <JPEG_OutputHandler+0x54>
 8002b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002b44 <JPEG_OutputHandler+0x74>)
 8002b0c:	490b      	ldr	r1, [pc, #44]	@ (8002b3c <JPEG_OutputHandler+0x6c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	011b      	lsls	r3, r3, #4
 8002b12:	5ccb      	ldrb	r3, [r1, r3]
 8002b14:	b933      	cbnz	r3, 8002b24 <JPEG_OutputHandler+0x54>
 8002b16:	682b      	ldr	r3, [r5, #0]
 8002b18:	b923      	cbnz	r3, 8002b24 <JPEG_OutputHandler+0x54>
    {
        JPEG_output_is_paused = 0;
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b1a:	2102      	movs	r1, #2
 8002b1c:	4620      	mov	r0, r4
        JPEG_output_is_paused = 0;
 8002b1e:	6013      	str	r3, [r2, #0]
        HAL_JPEG_Resume(hjpeg, JPEG_PAUSE_RESUME_OUTPUT);
 8002b20:	f006 f98b 	bl	8008e3a <HAL_JPEG_Resume>
        return 1;
 8002b24:	2002      	movs	r0, #2
    }

    return 2;
}
 8002b26:	bd38      	pop	{r3, r4, r5, pc}
        return 1;
 8002b28:	2001      	movs	r0, #1
 8002b2a:	e7fc      	b.n	8002b26 <JPEG_OutputHandler+0x56>
 8002b2c:	24009e88 	.word	0x24009e88
 8002b30:	24000864 	.word	0x24000864
 8002b34:	24009e78 	.word	0x24009e78
 8002b38:	24000868 	.word	0x24000868
 8002b3c:	24000010 	.word	0x24000010
 8002b40:	24009e84 	.word	0x24009e84
 8002b44:	24009e74 	.word	0x24009e74

08002b48 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>:
{
 8002b48:	b570      	push	{r4, r5, r6, lr}
 8002b4a:	4605      	mov	r5, r0
    if (length == 0)
 8002b4c:	2a00      	cmp	r2, #0
 8002b4e:	d035      	beq.n	8002bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
    if (outputBuffer) /* only decode if buffers are assigned. */
 8002b50:	2b00      	cmp	r3, #0
 8002b52:	d033      	beq.n	8002bbc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x74>
        JPEG_ConvertorParams.bytes_pr_pixel = 3;
 8002b54:	481a      	ldr	r0, [pc, #104]	@ (8002bc0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x78>)
 8002b56:	2403      	movs	r4, #3
 8002b58:	6104      	str	r4, [r0, #16]
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b5a:	68ec      	ldr	r4, [r5, #12]
        if ((JPEG_ConvertorParams.WidthExtend % 16) != 0)
 8002b5c:	0726      	lsls	r6, r4, #28
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b5e:	f44f 6616 	mov.w	r6, #2400	@ 0x960
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b62:	bf18      	it	ne
 8002b64:	f024 040f 	bicne.w	r4, r4, #15
        JPEG_ConvertorParams.ScaledWidth = 800 * JPEG_ConvertorParams.bytes_pr_pixel;
 8002b68:	6046      	str	r6, [r0, #4]
            JPEG_ConvertorParams.WidthExtend += 16 - (JPEG_ConvertorParams.WidthExtend % 16);
 8002b6a:	bf18      	it	ne
 8002b6c:	3410      	addne	r4, #16
        JPEG_ConvertorParams.WidthExtend = videoInfo.frame_width;
 8002b6e:	6004      	str	r4, [r0, #0]
        JPEG_ConvertorParams.MCU_pr_line = JPEG_ConvertorParams.WidthExtend / MCU_WIDTH_PIXELS;
 8002b70:	0924      	lsrs	r4, r4, #4
 8002b72:	60c4      	str	r4, [r0, #12]
        JPEG_ConvertorParams.LastLineHeight = (videoInfo.frame_height % MCU_HEIGHT_PIXELS) == 0 ? 0 : MCU_HEIGHT_PIXELS - (videoInfo.frame_height % MCU_HEIGHT_PIXELS);
 8002b74:	692c      	ldr	r4, [r5, #16]
 8002b76:	f014 040f 	ands.w	r4, r4, #15
 8002b7a:	bf18      	it	ne
 8002b7c:	f1c4 0410 	rsbne	r4, r4, #16
 8002b80:	6084      	str	r4, [r0, #8]
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, outputBuffer);
 8002b82:	4810      	ldr	r0, [pc, #64]	@ (8002bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
 8002b84:	f7ff feba 	bl	80028fc <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b88:	4c0f      	ldr	r4, [pc, #60]	@ (8002bc8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x80>)
        DMA2D_reference = dma;
 8002b8a:	6c6a      	ldr	r2, [r5, #68]	@ 0x44
 8002b8c:	4b0f      	ldr	r3, [pc, #60]	@ (8002bcc <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x84>)
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b8e:	4d0d      	ldr	r5, [pc, #52]	@ (8002bc4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x7c>)
        DMA2D_reference = dma;
 8002b90:	601a      	str	r2, [r3, #0]
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002b92:	4628      	mov	r0, r5
 8002b94:	f7ff ff9c 	bl	8002ad0 <JPEG_OutputHandler>
 8002b98:	6020      	str	r0, [r4, #0]
            if (JpegProcessing_End == 2)
 8002b9a:	6823      	ldr	r3, [r4, #0]
 8002b9c:	2b02      	cmp	r3, #2
 8002b9e:	d105      	bne.n	8002bac <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x64>
                SEM_WAIT(semDecodingDone);
 8002ba0:	4b0b      	ldr	r3, [pc, #44]	@ (8002bd0 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x88>)
 8002ba2:	f04f 31ff 	mov.w	r1, #4294967295
 8002ba6:	6818      	ldr	r0, [r3, #0]
 8002ba8:	f009 ff3e 	bl	800ca28 <osSemaphoreAcquire>
        } while (JpegProcessing_End != 1);
 8002bac:	6823      	ldr	r3, [r4, #0]
 8002bae:	2b01      	cmp	r3, #1
 8002bb0:	d1ef      	bne.n	8002b92 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x4a>
        Jpeg_HWDecodingEnd = 0;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	4a07      	ldr	r2, [pc, #28]	@ (8002bd4 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x8c>)
 8002bb6:	6013      	str	r3, [r2, #0]
        DMA2D_CopyBufferEnd = 0;
 8002bb8:	4a07      	ldr	r2, [pc, #28]	@ (8002bd8 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm+0x90>)
 8002bba:	6013      	str	r3, [r2, #0]
}
 8002bbc:	bd70      	pop	{r4, r5, r6, pc}
 8002bbe:	bf00      	nop
 8002bc0:	24000850 	.word	0x24000850
 8002bc4:	24000668 	.word	0x24000668
 8002bc8:	24009e80 	.word	0x24009e80
 8002bcc:	24009e78 	.word	0x24009e78
 8002bd0:	2400086c 	.word	0x2400086c
 8002bd4:	24009e88 	.word	0x24009e88
 8002bd8:	24000864 	.word	0x24000864

08002bdc <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm>:
{
 8002bdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002be0:	4699      	mov	r9, r3
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002be2:	6943      	ldr	r3, [r0, #20]
{
 8002be4:	b085      	sub	sp, #20
 8002be6:	4604      	mov	r4, r0
 8002be8:	460f      	mov	r7, r1
 8002bea:	4690      	mov	r8, r2
    assert((frameNumber > 0) && "HardwareMJPEGDecoder decoding without frame data!");
 8002bec:	b92b      	cbnz	r3, 8002bfa <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x1e>
 8002bee:	4b29      	ldr	r3, [pc, #164]	@ (8002c94 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb8>)
 8002bf0:	21b0      	movs	r1, #176	@ 0xb0
 8002bf2:	4a29      	ldr	r2, [pc, #164]	@ (8002c98 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xbc>)
 8002bf4:	4829      	ldr	r0, [pc, #164]	@ (8002c9c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xc0>)
 8002bf6:	f01e fd8f 	bl	8021718 <__assert_func>
    readData(currentMovieOffset, 8);
 8002bfa:	2208      	movs	r2, #8
 8002bfc:	6981      	ldr	r1, [r0, #24]
 8002bfe:	f7ff fcd7 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c02:	69a6      	ldr	r6, [r4, #24]
 8002c04:	4620      	mov	r0, r4
 8002c06:	4631      	mov	r1, r6
 8002c08:	f7ff fcbf 	bl	800258a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c0c:	1cb1      	adds	r1, r6, #2
    uint32_t streamNo  = getU16(currentMovieOffset);
 8002c0e:	4683      	mov	fp, r0
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c10:	4620      	mov	r0, r4
 8002c12:	f7ff fcba 	bl	800258a <_ZN20HardwareMJPEGDecoder6getU16Em>
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c16:	1d31      	adds	r1, r6, #4
    uint32_t chunkType = getU16(currentMovieOffset + 2);
 8002c18:	4682      	mov	sl, r0
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c1a:	4620      	mov	r0, r4
 8002c1c:	f7ff fc9a 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
 8002c20:	f106 0108 	add.w	r1, r6, #8
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c24:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
    uint32_t chunkSize = getU32(currentMovieOffset + 4);
 8002c26:	4605      	mov	r5, r0
    if (currentMovieOffset + 8 + chunkSize < movieLength)
 8002c28:	1842      	adds	r2, r0, r1
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d226      	bcs.n	8002c7c <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xa0>
        if (streamNo == STREAM0 && chunkType == TYPEDC && chunkSize > 0)
 8002c2e:	f243 0330 	movw	r3, #12336	@ 0x3030
 8002c32:	459b      	cmp	fp, r3
 8002c34:	d117      	bne.n	8002c66 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c36:	f246 3364 	movw	r3, #25444	@ 0x6364
 8002c3a:	459a      	cmp	sl, r3
 8002c3c:	d113      	bne.n	8002c66 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
 8002c3e:	b190      	cbz	r0, 8002c66 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x8a>
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c40:	4602      	mov	r2, r0
            currentMovieOffset += 8;
 8002c42:	61a1      	str	r1, [r4, #24]
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c44:	4620      	mov	r0, r4
 8002c46:	f7ff fcb3 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
            const uint8_t* chunk = readData(currentMovieOffset, chunkSize);
 8002c4c:	4601      	mov	r1, r0
            decodeMJPEGFrame(chunk, chunkSize, buffer, buffer_width, buffer_height, buffer_stride);
 8002c4e:	462a      	mov	r2, r5
 8002c50:	4620      	mov	r0, r4
 8002c52:	f8cd 8000 	str.w	r8, [sp]
 8002c56:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8002c5a:	463b      	mov	r3, r7
 8002c5c:	f7ff ff74 	bl	8002b48 <_ZN20HardwareMJPEGDecoder16decodeMJPEGFrameEPKhmPhttm>
            frameNumber++;
 8002c60:	6963      	ldr	r3, [r4, #20]
 8002c62:	3301      	adds	r3, #1
 8002c64:	6163      	str	r3, [r4, #20]
        currentMovieOffset += chunkSize;
 8002c66:	69a3      	ldr	r3, [r4, #24]
 8002c68:	442b      	add	r3, r5
        if (chunkSize == 0) /* Empty frame - Skip */
 8002c6a:	b905      	cbnz	r5, 8002c6e <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0x92>
            currentMovieOffset += 8;
 8002c6c:	3308      	adds	r3, #8
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c6e:	3301      	adds	r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c70:	6a62      	ldr	r2, [r4, #36]	@ 0x24
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c72:	f023 0301 	bic.w	r3, r3, #1
        if (currentMovieOffset == lastFrameEnd)
 8002c76:	4293      	cmp	r3, r2
        currentMovieOffset = (currentMovieOffset + 1) & 0xFFFFFFFE; /* pad to next word */
 8002c78:	61a3      	str	r3, [r4, #24]
        if (currentMovieOffset == lastFrameEnd)
 8002c7a:	d109      	bne.n	8002c90 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xb4>
        frameNumber = 1;
 8002c7c:	2301      	movs	r3, #1
            isCurrentFrameLast = true;
 8002c7e:	2001      	movs	r0, #1
        frameNumber = 1;
 8002c80:	6163      	str	r3, [r4, #20]
        currentMovieOffset = firstFrameOffset; /* start over */
 8002c82:	6a23      	ldr	r3, [r4, #32]
 8002c84:	61a3      	str	r3, [r4, #24]
}
 8002c86:	f080 0001 	eor.w	r0, r0, #1
 8002c8a:	b005      	add	sp, #20
 8002c8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
        isCurrentFrameLast = false;
 8002c90:	2000      	movs	r0, #0
 8002c92:	e7f8      	b.n	8002c86 <_ZN20HardwareMJPEGDecoder15decodeNextFrameEPhttm+0xaa>
 8002c94:	08022d69 	.word	0x08022d69
 8002c98:	08022e88 	.word	0x08022e88
 8002c9c:	08022c8f 	.word	0x08022c8f

08002ca0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm>:
{
 8002ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ca2:	4604      	mov	r4, r0
    readData(currentMovieOffset, 8);
 8002ca4:	6981      	ldr	r1, [r0, #24]
{
 8002ca6:	4616      	mov	r6, r2
    readData(currentMovieOffset, 8);
 8002ca8:	2208      	movs	r2, #8
 8002caa:	f7ff fc81 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cae:	69a7      	ldr	r7, [r4, #24]
 8002cb0:	4620      	mov	r0, r4
 8002cb2:	1d39      	adds	r1, r7, #4
 8002cb4:	f7ff fc4e 	bl	8002554 <_ZN20HardwareMJPEGDecoder6getU32Em>
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002cb8:	f107 0108 	add.w	r1, r7, #8
 8002cbc:	4602      	mov	r2, r0
    const uint32_t length = getU32(currentMovieOffset + 4);
 8002cbe:	4605      	mov	r5, r0
    const uint8_t* mjpgdata = readData(currentMovieOffset + 8, length);
 8002cc0:	4620      	mov	r0, r4
 8002cc2:	f7ff fc75 	bl	80025b0 <_ZN20HardwareMJPEGDecoder8readDataEmm>
 8002cc6:	4601      	mov	r1, r0
    if (frameBuffer) /* only decode if buffers are assigned. */
 8002cc8:	b16e      	cbz	r6, 8002ce6 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x46>
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002cca:	462a      	mov	r2, r5
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002ccc:	4c07      	ldr	r4, [pc, #28]	@ (8002cec <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x4c>)
 8002cce:	4d08      	ldr	r5, [pc, #32]	@ (8002cf0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
        JPEG_Decode_DMA(&hjpeg, const_cast<uint8_t*>(mjpgdata), length, frameBuffer);
 8002cd0:	4633      	mov	r3, r6
 8002cd2:	4807      	ldr	r0, [pc, #28]	@ (8002cf0 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x50>)
 8002cd4:	f7ff fe12 	bl	80028fc <JPEG_Decode_DMA>
            JpegProcessing_End = JPEG_OutputHandler(&hjpeg);
 8002cd8:	4628      	mov	r0, r5
 8002cda:	f7ff fef9 	bl	8002ad0 <JPEG_OutputHandler>
 8002cde:	6020      	str	r0, [r4, #0]
        } while (JpegProcessing_End == 0);
 8002ce0:	6823      	ldr	r3, [r4, #0]
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d0f8      	beq.n	8002cd8 <_ZN20HardwareMJPEGDecoder11decodeFrameERKN8touchgfx4RectEPhm+0x38>
}
 8002ce6:	2001      	movs	r0, #1
 8002ce8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002cea:	bf00      	nop
 8002cec:	24009e80 	.word	0x24009e80
 8002cf0:	24000668 	.word	0x24000668

08002cf4 <DMA2D_CopyBuffer>:
 */
void DMA2D_CopyBuffer(JPEG_Data_BufferTypeDef& job)
{
    uint32_t xRef, yRef, refline;

    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002cf4:	4a1b      	ldr	r2, [pc, #108]	@ (8002d64 <DMA2D_CopyBuffer+0x70>)
 8002cf6:	f8d0 c00c 	ldr.w	ip, [r0, #12]
{
 8002cfa:	b5f0      	push	{r4, r5, r6, r7, lr}
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002cfc:	ea4f 130c 	mov.w	r3, ip, lsl #4
 8002d00:	6814      	ldr	r4, [r2, #0]
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);

    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d02:	6855      	ldr	r5, [r2, #4]

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d04:	4e18      	ldr	r6, [pc, #96]	@ (8002d68 <DMA2D_CopyBuffer+0x74>)

    /* Configure DMA2D data size */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d06:	4f19      	ldr	r7, [pc, #100]	@ (8002d6c <DMA2D_CopyBuffer+0x78>)
    yRef = ((job.MCU_index * MCU_WIDTH_PIXELS) / JPEG_ConvertorParams.WidthExtend) * MCU_WIDTH_PIXELS;
 8002d08:	fbb3 f1f4 	udiv	r1, r3, r4
    xRef = ((job.MCU_index * MCU_WIDTH_PIXELS) % JPEG_ConvertorParams.WidthExtend);
 8002d0c:	fb04 3311 	mls	r3, r4, r1, r3
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d10:	434d      	muls	r5, r1
 8002d12:	6911      	ldr	r1, [r2, #16]
 8002d14:	fb01 f403 	mul.w	r4, r1, r3
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d18:	2301      	movs	r3, #1
    refline = (JPEG_ConvertorParams.ScaledWidth) * yRef + (JPEG_ConvertorParams.bytes_pr_pixel * xRef);
 8002d1a:	012d      	lsls	r5, r5, #4
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8002d1c:	6373      	str	r3, [r6, #52]	@ 0x34
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d1e:	683f      	ldr	r7, [r7, #0]
 8002d20:	68d3      	ldr	r3, [r2, #12]
 8002d22:	1aff      	subs	r7, r7, r3
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d24:	0519      	lsls	r1, r3, #20
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))  /*  Last line of frame */
 8002d26:	45bc      	cmp	ip, r7
 8002d28:	d317      	bcc.n	8002d5a <DMA2D_CopyBuffer+0x66>
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS - JPEG_ConvertorParams.LastLineHeight | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d2a:	6892      	ldr	r2, [r2, #8]
 8002d2c:	f1c2 0210 	rsb	r2, r2, #16
 8002d30:	430a      	orrs	r2, r1
 8002d32:	6472      	str	r2, [r6, #68]	@ 0x44
    {
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
    }

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d34:	4a0e      	ldr	r2, [pc, #56]	@ (8002d70 <DMA2D_CopyBuffer+0x7c>)

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d36:	f1c3 0332 	rsb	r3, r3, #50	@ 0x32
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d3a:	6811      	ldr	r1, [r2, #0]
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d3c:	011b      	lsls	r3, r3, #4
    WRITE_REG(DMA2D->OMAR, (reinterpret_cast<uint32_t>(FrameBufferAddress) + refline));
 8002d3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002d68 <DMA2D_CopyBuffer+0x74>)
 8002d40:	4421      	add	r1, r4
 8002d42:	4429      	add	r1, r5
 8002d44:	63d1      	str	r1, [r2, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, 800 - (MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line));
 8002d46:	6413      	str	r3, [r2, #64]	@ 0x40

    /* DMA2D FGOR register configuration */
    WRITE_REG(DMA2D->FGOR, 0);
 8002d48:	2300      	movs	r3, #0
 8002d4a:	6113      	str	r3, [r2, #16]

    /* DMA2D FGPFCCR register configuration */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_YCBCR | (DMA2D_CSS_420 << DMA2D_FGPFCCR_CSS_Pos) | (DMA2D_REPLACE_ALPHA << DMA2D_BGPFCCR_AM_Pos) | (0xFFU << DMA2D_FGPFCCR_ALPHA_Pos));
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <DMA2D_CopyBuffer+0x80>)
 8002d4e:	61d3      	str	r3, [r2, #28]

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(job.DataBuffer));
 8002d50:	6843      	ldr	r3, [r0, #4]
 8002d52:	60d3      	str	r3, [r2, #12]

    /* Configure DMA2D contol register */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8002d54:	4b08      	ldr	r3, [pc, #32]	@ (8002d78 <DMA2D_CopyBuffer+0x84>)
 8002d56:	6013      	str	r3, [r2, #0]
}
 8002d58:	bdf0      	pop	{r4, r5, r6, r7, pc}
        WRITE_REG(DMA2D->NLR, (MCU_HEIGHT_PIXELS | ((MCU_WIDTH_PIXELS * JPEG_ConvertorParams.MCU_pr_line) << DMA2D_NLR_PL_Pos)));
 8002d5a:	f041 0110 	orr.w	r1, r1, #16
 8002d5e:	6471      	str	r1, [r6, #68]	@ 0x44
 8002d60:	e7e8      	b.n	8002d34 <DMA2D_CopyBuffer+0x40>
 8002d62:	bf00      	nop
 8002d64:	24000850 	.word	0x24000850
 8002d68:	52001000 	.word	0x52001000
 8002d6c:	24009e7c 	.word	0x24009e7c
 8002d70:	24009e98 	.word	0x24009e98
 8002d74:	ff09000b 	.word	0xff09000b
 8002d78:	00012301 	.word	0x00012301

08002d7c <DMA2D_ExternalJobCompleted>:
void DMA2D_ExternalJobCompleted(JPEG_Data_BufferTypeDef& job)
{
    job.State = JPEG_BUFFER_EMPTY;
    job.DataBufferSize = 0;

    JPEG_OUT_Read_BufferIndex++;
 8002d7c:	4b0c      	ldr	r3, [pc, #48]	@ (8002db0 <DMA2D_ExternalJobCompleted+0x34>)
    job.State = JPEG_BUFFER_EMPTY;
 8002d7e:	2200      	movs	r2, #0
 8002d80:	7002      	strb	r2, [r0, #0]
    JPEG_OUT_Read_BufferIndex++;
 8002d82:	6819      	ldr	r1, [r3, #0]
    job.DataBufferSize = 0;
 8002d84:	6082      	str	r2, [r0, #8]
    JPEG_OUT_Read_BufferIndex++;
 8002d86:	3101      	adds	r1, #1
 8002d88:	6019      	str	r1, [r3, #0]
    if (JPEG_OUT_Read_BufferIndex >= NB_OUTPUT_DATA_BUFFERS)
 8002d8a:	6819      	ldr	r1, [r3, #0]
 8002d8c:	2901      	cmp	r1, #1
 8002d8e:	d900      	bls.n	8002d92 <DMA2D_ExternalJobCompleted+0x16>
    {
        JPEG_OUT_Read_BufferIndex = 0;
 8002d90:	601a      	str	r2, [r3, #0]
    }

    /* Check if last line */
    if (job.MCU_index >= (MCU_TotalNb - JPEG_ConvertorParams.MCU_pr_line))
 8002d92:	4b08      	ldr	r3, [pc, #32]	@ (8002db4 <DMA2D_ExternalJobCompleted+0x38>)
 8002d94:	4a08      	ldr	r2, [pc, #32]	@ (8002db8 <DMA2D_ExternalJobCompleted+0x3c>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	68d2      	ldr	r2, [r2, #12]
 8002d9a:	1a9b      	subs	r3, r3, r2
 8002d9c:	68c2      	ldr	r2, [r0, #12]
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d302      	bcc.n	8002da8 <DMA2D_ExternalJobCompleted+0x2c>
    {
        DMA2D_CopyBufferEnd = 1;
 8002da2:	4b06      	ldr	r3, [pc, #24]	@ (8002dbc <DMA2D_ExternalJobCompleted+0x40>)
 8002da4:	2201      	movs	r2, #1
 8002da6:	601a      	str	r2, [r3, #0]
    }

    /* Signal decoder thread to wake up and continue decoding */
    SEM_POST(semDecodingDone);
 8002da8:	4b05      	ldr	r3, [pc, #20]	@ (8002dc0 <DMA2D_ExternalJobCompleted+0x44>)
 8002daa:	6818      	ldr	r0, [r3, #0]
 8002dac:	f009 be68 	b.w	800ca80 <osSemaphoreRelease>
 8002db0:	24000868 	.word	0x24000868
 8002db4:	24009e7c 	.word	0x24009e7c
 8002db8:	24000850 	.word	0x24000850
 8002dbc:	24000864 	.word	0x24000864
 8002dc0:	2400086c 	.word	0x2400086c

08002dc4 <_ZN8touchgfx10OSWrappers10initializeEv>:
 * Initialize frame buffer semaphore and queue/mutex for VSYNC signal.
 */
void OSWrappers::initialize()
{
    // Create a queue of length 1
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dc4:	2101      	movs	r1, #1
 8002dc6:	2200      	movs	r2, #0
{
 8002dc8:	b508      	push	{r3, lr}
    frame_buffer_sem = osSemaphoreNew(1, 1, NULL); // Binary semaphore
 8002dca:	4608      	mov	r0, r1
 8002dcc:	f009 fde2 	bl	800c994 <osSemaphoreNew>
 8002dd0:	4b0a      	ldr	r3, [pc, #40]	@ (8002dfc <_ZN8touchgfx10OSWrappers10initializeEv+0x38>)
 8002dd2:	6018      	str	r0, [r3, #0]
    assert((frame_buffer_sem != NULL) && "Creation of framebuffer semaphore failed");
 8002dd4:	b928      	cbnz	r0, 8002de2 <_ZN8touchgfx10OSWrappers10initializeEv+0x1e>
 8002dd6:	4b0a      	ldr	r3, [pc, #40]	@ (8002e00 <_ZN8touchgfx10OSWrappers10initializeEv+0x3c>)
 8002dd8:	2128      	movs	r1, #40	@ 0x28
 8002dda:	4a0a      	ldr	r2, [pc, #40]	@ (8002e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)

    // Create a queue of length 1
    vsync_queue = osMessageQueueNew(1, 4, NULL);
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002ddc:	480a      	ldr	r0, [pc, #40]	@ (8002e08 <_ZN8touchgfx10OSWrappers10initializeEv+0x44>)
 8002dde:	f01e fc9b 	bl	8021718 <__assert_func>
    vsync_queue = osMessageQueueNew(1, 4, NULL);
 8002de2:	2200      	movs	r2, #0
 8002de4:	2104      	movs	r1, #4
 8002de6:	2001      	movs	r0, #1
 8002de8:	f009 fe73 	bl	800cad2 <osMessageQueueNew>
 8002dec:	4b07      	ldr	r3, [pc, #28]	@ (8002e0c <_ZN8touchgfx10OSWrappers10initializeEv+0x48>)
 8002dee:	6018      	str	r0, [r3, #0]
    assert((vsync_queue != NULL) && "Creation of vsync message queue failed");
 8002df0:	b918      	cbnz	r0, 8002dfa <_ZN8touchgfx10OSWrappers10initializeEv+0x36>
 8002df2:	4b07      	ldr	r3, [pc, #28]	@ (8002e10 <_ZN8touchgfx10OSWrappers10initializeEv+0x4c>)
 8002df4:	212c      	movs	r1, #44	@ 0x2c
 8002df6:	4a03      	ldr	r2, [pc, #12]	@ (8002e04 <_ZN8touchgfx10OSWrappers10initializeEv+0x40>)
 8002df8:	e7f0      	b.n	8002ddc <_ZN8touchgfx10OSWrappers10initializeEv+0x18>
}
 8002dfa:	bd08      	pop	{r3, pc}
 8002dfc:	24009ea0 	.word	0x24009ea0
 8002e00:	08022f28 	.word	0x08022f28
 8002e04:	08022f71 	.word	0x08022f71
 8002e08:	08022fa0 	.word	0x08022fa0
 8002e0c:	24009e9c 	.word	0x24009e9c
 8002e10:	0802301b 	.word	0x0802301b

08002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>:
/*
 * Take the frame buffer semaphore. Blocks until semaphore is available.
 */
void OSWrappers::takeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, osWaitForever);
 8002e14:	4b02      	ldr	r3, [pc, #8]	@ (8002e20 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv+0xc>)
 8002e16:	f04f 31ff 	mov.w	r1, #4294967295
 8002e1a:	6818      	ldr	r0, [r3, #0]
 8002e1c:	f009 be04 	b.w	800ca28 <osSemaphoreAcquire>
 8002e20:	24009ea0 	.word	0x24009ea0

08002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>:
/*
 * Release the frame buffer semaphore.
 */
void OSWrappers::giveFrameBufferSemaphore()
{
    osSemaphoreRelease(frame_buffer_sem);
 8002e24:	4b01      	ldr	r3, [pc, #4]	@ (8002e2c <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv+0x8>)
 8002e26:	6818      	ldr	r0, [r3, #0]
 8002e28:	f009 be2a 	b.w	800ca80 <osSemaphoreRelease>
 8002e2c:	24009ea0 	.word	0x24009ea0

08002e30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>:
 * Note must return immediately! This function does not care who has the taken the semaphore,
 * it only serves to make sure that the semaphore is taken by someone.
 */
void OSWrappers::tryTakeFrameBufferSemaphore()
{
    osSemaphoreAcquire(frame_buffer_sem, 0);
 8002e30:	4b02      	ldr	r3, [pc, #8]	@ (8002e3c <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv+0xc>)
 8002e32:	2100      	movs	r1, #0
 8002e34:	6818      	ldr	r0, [r3, #0]
 8002e36:	f009 bdf7 	b.w	800ca28 <osSemaphoreAcquire>
 8002e3a:	bf00      	nop
 8002e3c:	24009ea0 	.word	0x24009ea0

08002e40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>:
 * from ISR.
 *
 * Release the frame buffer semaphore in a way that is safe in interrupt context.
 * Called from ISR.
 */
void OSWrappers::giveFrameBufferSemaphoreFromISR()
 8002e40:	f7ff bff0 	b.w	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

08002e44 <_ZN8touchgfx10OSWrappers11signalVSyncEv>:
 * Note This function is called from an ISR, and should (depending on OS) trigger a
 * scheduling.
 */
void OSWrappers::signalVSync()
{
    osMessageQueuePut(vsync_queue, &dummy, 0, 0);
 8002e44:	2300      	movs	r3, #0
 8002e46:	4803      	ldr	r0, [pc, #12]	@ (8002e54 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x10>)
 8002e48:	4903      	ldr	r1, [pc, #12]	@ (8002e58 <_ZN8touchgfx10OSWrappers11signalVSyncEv+0x14>)
 8002e4a:	461a      	mov	r2, r3
 8002e4c:	6800      	ldr	r0, [r0, #0]
 8002e4e:	f009 be7b 	b.w	800cb48 <osMessageQueuePut>
 8002e52:	bf00      	nop
 8002e54:	24009e9c 	.word	0x24009e9c
 8002e58:	24000030 	.word	0x24000030

08002e5c <_ZN8touchgfx10OSWrappers12waitForVSyncEv>:
 *
 * Note This function must first clear the mutex/queue and then wait for the next one to
 * occur.
 */
void OSWrappers::waitForVSync()
{
 8002e5c:	b513      	push	{r0, r1, r4, lr}
    uint32_t dummyGet;
    // First make sure the queue is empty, by trying to remove an element with 0 timeout.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, 0);
 8002e5e:	2300      	movs	r3, #0
 8002e60:	4c07      	ldr	r4, [pc, #28]	@ (8002e80 <_ZN8touchgfx10OSWrappers12waitForVSyncEv+0x24>)
 8002e62:	a901      	add	r1, sp, #4
 8002e64:	461a      	mov	r2, r3
 8002e66:	6820      	ldr	r0, [r4, #0]
 8002e68:	f009 fe9f 	bl	800cbaa <osMessageQueueGet>

    // Then, wait for next VSYNC to occur.
    osMessageQueueGet(vsync_queue, &dummyGet, 0, osWaitForever);
 8002e6c:	f04f 33ff 	mov.w	r3, #4294967295
 8002e70:	2200      	movs	r2, #0
 8002e72:	a901      	add	r1, sp, #4
 8002e74:	6820      	ldr	r0, [r4, #0]
 8002e76:	f009 fe98 	bl	800cbaa <osMessageQueueGet>
}
 8002e7a:	b002      	add	sp, #8
 8002e7c:	bd10      	pop	{r4, pc}
 8002e7e:	bf00      	nop
 8002e80:	24009e9c 	.word	0x24009e9c

08002e84 <_ZN8touchgfx13DMA_Interface5flushEv>:
        waitForFrameBufferSemaphore();
 8002e84:	6803      	ldr	r3, [r0, #0]
 8002e86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e88:	4718      	bx	r3

08002e8a <_ZN8STM32DMA10getDMATypeEv>:
     * @return a DMAType value of the concrete DMA_Interface implementation.
     */
    virtual touchgfx::DMAType getDMAType(void)
    {
        return touchgfx::DMA_TYPE_CHROMART;
    }
 8002e8a:	2001      	movs	r0, #1
 8002e8c:	4770      	bx	lr

08002e8e <DMA2D_XferErrorCallback>:
    }

    static void DMA2D_XferErrorCallback(DMA2D_HandleTypeDef* handle)
    {
        (void)handle; // Unused argument
        while (1)
 8002e8e:	e7fe      	b.n	8002e8e <DMA2D_XferErrorCallback>

08002e90 <_ZN8STM32DMA11getBlitCapsEv>:
                                       | BLIT_OP_COPY_WITH_ALPHA
                                       | BLIT_OP_COPY_ARGB8888
                                       | BLIT_OP_COPY_ARGB8888_WITH_ALPHA
                                       | BLIT_OP_COPY_A4
                                       | BLIT_OP_COPY_A8);
}
 8002e90:	f240 30ef 	movw	r0, #1007	@ 0x3ef
 8002e94:	4770      	bx	lr
	...

08002e98 <_ZN8STM32DMA5startEv>:
                execute();
            }
        }
    }

    virtual void start()
 8002e98:	b510      	push	{r4, lr}
 8002e9a:	4604      	mov	r4, r0
    {
        MUTEX_LOCK(mutexIsRunning);
 8002e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8002ea0:	f8d0 0da4 	ldr.w	r0, [r0, #3492]	@ 0xda4
 8002ea4:	f009 fd34 	bl	800c910 <osMutexAcquire>
        if (!queue.isEmpty() && isAllowed && !isRunning)
 8002ea8:	6860      	ldr	r0, [r4, #4]
 8002eaa:	6803      	ldr	r3, [r0, #0]
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4798      	blx	r3
 8002eb0:	b978      	cbnz	r0, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
 8002eb2:	7a63      	ldrb	r3, [r4, #9]
 8002eb4:	b16b      	cbz	r3, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
 8002eb6:	7a23      	ldrb	r3, [r4, #8]
 8002eb8:	b95b      	cbnz	r3, 8002ed2 <_ZN8STM32DMA5startEv+0x3a>
        {
            started_by_external_job = false;
 8002eba:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
            execute();
 8002ebe:	4620      	mov	r0, r4
 8002ec0:	6823      	ldr	r3, [r4, #0]
 8002ec2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ec4:	4798      	blx	r3
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
        {
            started_by_external_job = true;
            externalJobExecute();
        }
        MUTEX_UNLOCK(mutexIsRunning);
 8002ec6:	f8d4 0da4 	ldr.w	r0, [r4, #3492]	@ 0xda4
    }
 8002eca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        MUTEX_UNLOCK(mutexIsRunning);
 8002ece:	f009 bd42 	b.w	800c956 <osMutexRelease>
        else if ((Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL) && !isRunning && !isReserved)
 8002ed2:	490b      	ldr	r1, [pc, #44]	@ (8002f00 <_ZN8STM32DMA5startEv+0x68>)
 8002ed4:	4a0b      	ldr	r2, [pc, #44]	@ (8002f04 <_ZN8STM32DMA5startEv+0x6c>)
 8002ed6:	680b      	ldr	r3, [r1, #0]
 8002ed8:	011b      	lsls	r3, r3, #4
 8002eda:	5cd3      	ldrb	r3, [r2, r3]
 8002edc:	2b01      	cmp	r3, #1
 8002ede:	d1f2      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002ee0:	7a20      	ldrb	r0, [r4, #8]
 8002ee2:	2800      	cmp	r0, #0
 8002ee4:	d1ef      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002ee6:	7aa0      	ldrb	r0, [r4, #10]
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	d1ec      	bne.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
     * @param None
     */
    void externalJobExecute()
    {
        isRunning = true;
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002eec:	6808      	ldr	r0, [r1, #0]
            started_by_external_job = true;
 8002eee:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ef2:	eb02 1000 	add.w	r0, r2, r0, lsl #4
        isRunning = true;
 8002ef6:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8002ef8:	f7ff fefc 	bl	8002cf4 <DMA2D_CopyBuffer>
    }
 8002efc:	e7e3      	b.n	8002ec6 <_ZN8STM32DMA5startEv+0x2e>
 8002efe:	bf00      	nop
 8002f00:	24000868 	.word	0x24000868
 8002f04:	24000010 	.word	0x24000010

08002f08 <_ZN8STM32DMAD1Ev>:
STM32DMA::~STM32DMA()
 8002f08:	4b05      	ldr	r3, [pc, #20]	@ (8002f20 <_ZN8STM32DMAD1Ev+0x18>)
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f0a:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f0e:	6003      	str	r3, [r0, #0]
 8002f10:	4b04      	ldr	r3, [pc, #16]	@ (8002f24 <_ZN8STM32DMAD1Ev+0x1c>)
 8002f12:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8002f16:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8002f1a:	f3bf 8f6f 	isb	sy
}
 8002f1e:	4770      	bx	lr
 8002f20:	080231e8 	.word	0x080231e8
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <_ZN8STM32DMAD0Ev>:
STM32DMA::~STM32DMA()
 8002f28:	b510      	push	{r4, lr}
 8002f2a:	4604      	mov	r4, r0
}
 8002f2c:	f640 51a8 	movw	r1, #3496	@ 0xda8
 8002f30:	f7ff ffea 	bl	8002f08 <_ZN8STM32DMAD1Ev>
 8002f34:	4620      	mov	r0, r4
 8002f36:	f01e f876 	bl	8021026 <_ZdlPvj>
 8002f3a:	4620      	mov	r0, r4
 8002f3c:	bd10      	pop	{r4, pc}
	...

08002f40 <_ZN8STM32DMA10initializeEv>:
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f40:	4b10      	ldr	r3, [pc, #64]	@ (8002f84 <_ZN8STM32DMA10initializeEv+0x44>)
{
 8002f42:	b082      	sub	sp, #8
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8002f44:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f48:	f042 0210 	orr.w	r2, r2, #16
 8002f4c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8002f50:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8002f54:	f002 0210 	and.w	r2, r2, #16
 8002f58:	9201      	str	r2, [sp, #4]
 8002f5a:	9a01      	ldr	r2, [sp, #4]
    __HAL_RCC_DMA2D_FORCE_RESET();
 8002f5c:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f5e:	f042 0210 	orr.w	r2, r2, #16
 8002f62:	67da      	str	r2, [r3, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 8002f64:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8002f66:	f022 0210 	bic.w	r2, r2, #16
 8002f6a:	67da      	str	r2, [r3, #124]	@ 0x7c
    hdma2d.XferCpltCallback = DMA2D_XferCpltCallback;
 8002f6c:	4b06      	ldr	r3, [pc, #24]	@ (8002f88 <_ZN8STM32DMA10initializeEv+0x48>)
 8002f6e:	4a07      	ldr	r2, [pc, #28]	@ (8002f8c <_ZN8STM32DMA10initializeEv+0x4c>)
 8002f70:	621a      	str	r2, [r3, #32]
    hdma2d.XferErrorCallback = DMA2D_XferErrorCallback;
 8002f72:	4a07      	ldr	r2, [pc, #28]	@ (8002f90 <_ZN8STM32DMA10initializeEv+0x50>)
 8002f74:	625a      	str	r2, [r3, #36]	@ 0x24
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002f76:	4b07      	ldr	r3, [pc, #28]	@ (8002f94 <_ZN8STM32DMA10initializeEv+0x54>)
 8002f78:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8002f7c:	609a      	str	r2, [r3, #8]
}
 8002f7e:	b002      	add	sp, #8
 8002f80:	4770      	bx	lr
 8002f82:	bf00      	nop
 8002f84:	58024400 	.word	0x58024400
 8002f88:	240006dc 	.word	0x240006dc
 8002f8c:	080031dd 	.word	0x080031dd
 8002f90:	08002e8f 	.word	0x08002e8f
 8002f94:	e000e100 	.word	0xe000e100

08002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTOutputFormat(Bitmap::BitmapFormat format)
 8002f98:	b508      	push	{r3, lr}
    switch (format)
 8002f9a:	280a      	cmp	r0, #10
 8002f9c:	d809      	bhi.n	8002fb2 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1a>
 8002f9e:	e8df f000 	tbb	[pc, r0]
 8002fa2:	1006      	.short	0x1006
 8002fa4:	0808080e 	.word	0x0808080e
 8002fa8:	10101008 	.word	0x10101008
 8002fac:	10          	.byte	0x10
 8002fad:	00          	.byte	0x00
        dma2dColorMode = DMA2D_OUTPUT_RGB565;
 8002fae:	2002      	movs	r0, #2
}
 8002fb0:	bd08      	pop	{r3, pc}
        assert(0 && "Unsupported Format!");
 8002fb2:	4b05      	ldr	r3, [pc, #20]	@ (8002fc8 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x30>)
 8002fb4:	2191      	movs	r1, #145	@ 0x91
 8002fb6:	4a05      	ldr	r2, [pc, #20]	@ (8002fcc <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8002fb8:	4805      	ldr	r0, [pc, #20]	@ (8002fd0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 8002fba:	f01e fbad 	bl	8021718 <__assert_func>
        dma2dColorMode = DMA2D_OUTPUT_ARGB8888;
 8002fbe:	2000      	movs	r0, #0
 8002fc0:	e7f6      	b.n	8002fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8002fc2:	2001      	movs	r0, #1
    return dma2dColorMode;
 8002fc4:	e7f4      	b.n	8002fb0 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 8002fc6:	bf00      	nop
 8002fc8:	0802305d 	.word	0x0802305d
 8002fcc:	08023078 	.word	0x08023078
 8002fd0:	080230c3 	.word	0x080230c3

08002fd4 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE>:
 * void STM32DMA::setupDataFill(const BlitOp& blitOp) handles blit operation of
 * BLIT_OP_FILL
 * BLIT_OP_FILL_WITH_ALPHA
 */
void STM32DMA::setupDataFill(const BlitOp& blitOp)
{
 8002fd4:	b538      	push	{r3, r4, r5, lr}
 8002fd6:	460c      	mov	r4, r1
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8002fd8:	7f88      	ldrb	r0, [r1, #30]
 8002fda:	f7ff ffdd 	bl	8002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fde:	4b12      	ldr	r3, [pc, #72]	@ (8003028 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x54>)

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fe0:	8aa5      	ldrh	r5, [r4, #20]
 8002fe2:	8ae2      	ldrh	r2, [r4, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 8002fe4:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fe6:	ea42 4205 	orr.w	r2, r2, r5, lsl #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002fea:	6921      	ldr	r1, [r4, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44

    /* DMA2D OOR register configuration */
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002fee:	8b62      	ldrh	r2, [r4, #26]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8002ff0:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ff2:	1b52      	subs	r2, r2, r5
 8002ff4:	641a      	str	r2, [r3, #64]	@ 0x40

    if (blitOp.operation == BLIT_OP_FILL_WITH_ALPHA)
 8002ff6:	6825      	ldr	r5, [r4, #0]
 8002ff8:	2d08      	cmp	r5, #8
 8002ffa:	d10e      	bne.n	800301a <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x46>
    {
        /* DMA2D BGOR register configuration */
        WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ffc:	619a      	str	r2, [r3, #24]

        /* DMA2D FGOR register configuration */
        WRITE_REG(DMA2D->FGOR, blitOp.dstLoopStride - blitOp.nSteps);
 8002ffe:	611a      	str	r2, [r3, #16]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003000:	6258      	str	r0, [r3, #36]	@ 0x24

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | ((blitOp.alpha << 24) & DMA2D_FGPFCCR_ALPHA));
 8003002:	4a0a      	ldr	r2, [pc, #40]	@ (800302c <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x58>)
 8003004:	7f20      	ldrb	r0, [r4, #28]
 8003006:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
 800300a:	61da      	str	r2, [r3, #28]
        return color;
 800300c:	68e2      	ldr	r2, [r4, #12]

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 800300e:	621a      	str	r2, [r3, #32]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_M2M_BLEND | DMA2D_IT_CE | DMA2D_IT_TE));
 8003010:	4a07      	ldr	r2, [pc, #28]	@ (8003030 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x5c>)
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003012:	6159      	str	r1, [r3, #20]
        WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003014:	60d9      	str	r1, [r3, #12]

        /* Set color */
        WRITE_REG(DMA2D->OCOLR, blitOp.color);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003016:	601a      	str	r2, [r3, #0]
    }
}
 8003018:	bd38      	pop	{r3, r4, r5, pc}
        WRITE_REG(DMA2D->FGOR, 0);
 800301a:	2200      	movs	r2, #0
        WRITE_REG(DMA2D->FGPFCCR, dma2dOutputColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 800301c:	61d8      	str	r0, [r3, #28]
        WRITE_REG(DMA2D->FGOR, 0);
 800301e:	611a      	str	r2, [r3, #16]
 8003020:	68e2      	ldr	r2, [r4, #12]
        WRITE_REG(DMA2D->OCOLR, blitOp.color);
 8003022:	639a      	str	r2, [r3, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_IT_TC | DMA2D_CR_START | DMA2D_R2M | DMA2D_IT_CE | DMA2D_IT_TE));
 8003024:	4a03      	ldr	r2, [pc, #12]	@ (8003034 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x60>)
 8003026:	e7f6      	b.n	8003016 <_ZN8STM32DMA13setupDataFillERKN8touchgfx6BlitOpE+0x42>
 8003028:	52001000 	.word	0x52001000
 800302c:	00010009 	.word	0x00010009
 8003030:	00022301 	.word	0x00022301
 8003034:	00032301 	.word	0x00032301

08003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>:
inline uint32_t STM32DMA::getChromARTInputFormat(Bitmap::BitmapFormat format)
 8003038:	b508      	push	{r3, lr}
    switch (format)
 800303a:	280b      	cmp	r0, #11
 800303c:	d80b      	bhi.n	8003056 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x1e>
 800303e:	e8df f000 	tbb	[pc, r0]
 8003042:	1206      	.short	0x1206
 8003044:	0a0a0a10 	.word	0x0a0a0a10
 8003048:	0808080a 	.word	0x0808080a
 800304c:	0808      	.short	0x0808
        dma2dColorMode = DMA2D_INPUT_RGB565;
 800304e:	2002      	movs	r0, #2
}
 8003050:	bd08      	pop	{r3, pc}
        dma2dColorMode = DMA2D_INPUT_L8;
 8003052:	2005      	movs	r0, #5
        break;
 8003054:	e7fc      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
        assert(0 && "Unsupported Format!");
 8003056:	4b05      	ldr	r3, [pc, #20]	@ (800306c <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x34>)
 8003058:	2170      	movs	r1, #112	@ 0x70
 800305a:	4a05      	ldr	r2, [pc, #20]	@ (8003070 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x38>)
 800305c:	4805      	ldr	r0, [pc, #20]	@ (8003074 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x3c>)
 800305e:	f01e fb5b 	bl	8021718 <__assert_func>
        dma2dColorMode = DMA2D_INPUT_ARGB8888;
 8003062:	2000      	movs	r0, #0
 8003064:	e7f4      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
    switch (format)
 8003066:	2001      	movs	r0, #1
    return dma2dColorMode;
 8003068:	e7f2      	b.n	8003050 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0+0x18>
 800306a:	bf00      	nop
 800306c:	0802305d 	.word	0x0802305d
 8003070:	0802313c 	.word	0x0802313c
 8003074:	080230c3 	.word	0x080230c3

08003078 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE>:
{
 8003078:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800307c:	7f4f      	ldrb	r7, [r1, #29]
{
 800307e:	4689      	mov	r9, r1
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 8003080:	4638      	mov	r0, r7
 8003082:	f7ff ffd9 	bl	8003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003086:	f899 501e 	ldrb.w	r5, [r9, #30]
    uint32_t dma2dForegroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.srcFormat));
 800308a:	4680      	mov	r8, r0
    uint32_t dma2dBackgroundColorMode = getChromARTInputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 800308c:	4628      	mov	r0, r5
 800308e:	f7ff ffd3 	bl	8003038 <_ZN8STM32DMA22getChromARTInputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
 8003092:	4606      	mov	r6, r0
    uint32_t dma2dOutputColorMode = getChromARTOutputFormat(static_cast<Bitmap::BitmapFormat>(blitOp.dstFormat));
 8003094:	4628      	mov	r0, r5
 8003096:	f7ff ff7f 	bl	8002f98 <_ZN8STM32DMA23getChromARTOutputFormatEN8touchgfx6Bitmap12BitmapFormatE.isra.0>
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 800309a:	f8b9 1014 	ldrh.w	r1, [r9, #20]
 800309e:	f8b9 401a 	ldrh.w	r4, [r9, #26]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030a2:	f8b9 2018 	ldrh.w	r2, [r9, #24]
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030a6:	4b45      	ldr	r3, [pc, #276]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80030a8:	1a64      	subs	r4, r4, r1
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030aa:	1a52      	subs	r2, r2, r1
    WRITE_REG(DMA2D->OOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030ac:	641c      	str	r4, [r3, #64]	@ 0x40
    WRITE_REG(DMA2D->BGOR, blitOp.dstLoopStride - blitOp.nSteps);
 80030ae:	619c      	str	r4, [r3, #24]
    WRITE_REG(DMA2D->FGOR, blitOp.srcLoopStride - blitOp.nSteps);
 80030b0:	611a      	str	r2, [r3, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030b2:	f8b9 2016 	ldrh.w	r2, [r9, #22]
    WRITE_REG(DMA2D->OPFCCR, dma2dOutputColorMode);
 80030b6:	6358      	str	r0, [r3, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030b8:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030bc:	f8d9 1010 	ldr.w	r1, [r9, #16]
    WRITE_REG(DMA2D->NLR, (blitOp.nLoops | (blitOp.nSteps << DMA2D_NLR_PL_Pos)));
 80030c0:	645a      	str	r2, [r3, #68]	@ 0x44
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030c2:	f8d9 2004 	ldr.w	r2, [r9, #4]
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 80030c6:	63d9      	str	r1, [r3, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(blitOp.pSrc));
 80030c8:	60da      	str	r2, [r3, #12]
    switch (blitOp.operation)
 80030ca:	f8d9 4000 	ldr.w	r4, [r9]
 80030ce:	f899 201c 	ldrb.w	r2, [r9, #28]
 80030d2:	2c80      	cmp	r4, #128	@ 0x80
 80030d4:	d022      	beq.n	800311c <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xa4>
 80030d6:	d80f      	bhi.n	80030f8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x80>
 80030d8:	2c20      	cmp	r4, #32
 80030da:	d066      	beq.n	80031aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030dc:	2c40      	cmp	r4, #64	@ 0x40
 80030de:	d064      	beq.n	80031aa <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x132>
 80030e0:	2c04      	cmp	r4, #4
 80030e2:	d05c      	beq.n	800319e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x126>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030e4:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
 80030e8:	4b34      	ldr	r3, [pc, #208]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030ea:	42af      	cmp	r7, r5
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80030ec:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 80030f0:	61d8      	str	r0, [r3, #28]
        if (blitOp.srcFormat != blitOp.dstFormat)
 80030f2:	d060      	beq.n	80031b6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x13e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M_PFC | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80030f4:	4a32      	ldr	r2, [pc, #200]	@ (80031c0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x148>)
 80030f6:	e03f      	b.n	8003178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
    switch (blitOp.operation)
 80030f8:	f5b4 7f80 	cmp.w	r4, #256	@ 0x100
 80030fc:	d004      	beq.n	8003108 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x90>
 80030fe:	f5b4 7f00 	cmp.w	r4, #512	@ 0x200
 8003102:	d1ef      	bne.n	80030e4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x6c>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003104:	482f      	ldr	r0, [pc, #188]	@ (80031c4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x14c>)
 8003106:	e000      	b.n	800310a <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x92>
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A4 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003108:	482f      	ldr	r0, [pc, #188]	@ (80031c8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x150>)
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800310a:	ea40 6202 	orr.w	r2, r0, r2, lsl #24
 800310e:	61da      	str	r2, [r3, #28]
 8003110:	f8d9 200c 	ldr.w	r2, [r9, #12]
        WRITE_REG(DMA2D->FGCOLR, blitOp.color);
 8003114:	621a      	str	r2, [r3, #32]
        WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003116:	625e      	str	r6, [r3, #36]	@ 0x24
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 8003118:	6159      	str	r1, [r3, #20]
 800311a:	e02c      	b.n	8003176 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xfe>
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800311c:	ea48 6002 	orr.w	r0, r8, r2, lsl #24
            const clutData_t* const palette = reinterpret_cast<const clutData_t*>(blitOp.pClut);
 8003120:	f8d9 4008 	ldr.w	r4, [r9, #8]
            WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 8003124:	f440 3000 	orr.w	r0, r0, #131072	@ 0x20000
 8003128:	61d8      	str	r0, [r3, #28]
            WRITE_REG(DMA2D->BGPFCCR, dma2dBackgroundColorMode | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800312a:	625e      	str	r6, [r3, #36]	@ 0x24
            WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(blitOp.pDst));
 800312c:	6159      	str	r1, [r3, #20]
            WRITE_REG(DMA2D->FGCMAR, reinterpret_cast<uint32_t>(&palette->data));
 800312e:	1d21      	adds	r1, r4, #4
 8003130:	62d9      	str	r1, [r3, #44]	@ 0x2c
            switch ((Bitmap::ClutFormat)palette->format)
 8003132:	7821      	ldrb	r1, [r4, #0]
 8003134:	b141      	cbz	r1, 8003148 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xd0>
 8003136:	2901      	cmp	r1, #1
 8003138:	d021      	beq.n	800317e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x106>
                assert(0 && "Unsupported format");
 800313a:	4b24      	ldr	r3, [pc, #144]	@ (80031cc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x154>)
 800313c:	f240 110b 	movw	r1, #267	@ 0x10b
 8003140:	4a23      	ldr	r2, [pc, #140]	@ (80031d0 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x158>)
 8003142:	4824      	ldr	r0, [pc, #144]	@ (80031d4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x15c>)
 8003144:	f01e fae8 	bl	8021718 <__assert_func>
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_ARGB8888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003148:	69da      	ldr	r2, [r3, #28]
 800314a:	8861      	ldrh	r1, [r4, #2]
 800314c:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8003150:	3901      	subs	r1, #1
 8003152:	f022 0210 	bic.w	r2, r2, #16
 8003156:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 800315a:	61da      	str	r2, [r3, #28]
            bool blend = true;
 800315c:	2201      	movs	r2, #1
            SET_BIT(DMA2D->FGPFCCR, DMA2D_FGPFCCR_START);
 800315e:	4b17      	ldr	r3, [pc, #92]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 8003160:	69d9      	ldr	r1, [r3, #28]
 8003162:	f041 0120 	orr.w	r1, r1, #32
 8003166:	61d9      	str	r1, [r3, #28]
            while ((READ_REG(DMA2D->FGPFCCR) & DMA2D_FGPFCCR_START) != 0U)
 8003168:	69d9      	ldr	r1, [r3, #28]
 800316a:	0689      	lsls	r1, r1, #26
 800316c:	d4fc      	bmi.n	8003168 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xf0>
            DMA2D->IFCR = (DMA2D_FLAG_CTC);
 800316e:	2110      	movs	r1, #16
 8003170:	6099      	str	r1, [r3, #8]
            if (blend)
 8003172:	2a00      	cmp	r2, #0
 8003174:	d0be      	beq.n	80030f4 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x7c>
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003176:	4a18      	ldr	r2, [pc, #96]	@ (80031d8 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x160>)
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 8003178:	601a      	str	r2, [r3, #0]
}
 800317a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800317e:	69d9      	ldr	r1, [r3, #28]
                if (blitOp.alpha == 255)
 8003180:	3aff      	subs	r2, #255	@ 0xff
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 8003182:	8860      	ldrh	r0, [r4, #2]
 8003184:	f421 417f 	bic.w	r1, r1, #65280	@ 0xff00
                if (blitOp.alpha == 255)
 8003188:	bf18      	it	ne
 800318a:	2201      	movne	r2, #1
                MODIFY_REG(DMA2D->FGPFCCR, (DMA2D_FGPFCCR_CS | DMA2D_FGPFCCR_CCM), (((palette->size - 1) << DMA2D_FGPFCCR_CS_Pos) | (DMA2D_CCM_RGB888 << DMA2D_FGPFCCR_CCM_Pos)));
 800318c:	3801      	subs	r0, #1
 800318e:	f021 0110 	bic.w	r1, r1, #16
 8003192:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
 8003196:	f041 0110 	orr.w	r1, r1, #16
 800319a:	61d9      	str	r1, [r3, #28]
                break;
 800319c:	e7df      	b.n	800315e <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0xe6>
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 800319e:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031a2:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
        WRITE_REG(DMA2D->FGPFCCR, dma2dForegroundColorMode | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (blitOp.alpha << 24));
 80031a6:	61da      	str	r2, [r3, #28]
 80031a8:	e7b5      	b.n	8003116 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x9e>
 80031aa:	ea48 6202 	orr.w	r2, r8, r2, lsl #24
 80031ae:	4b03      	ldr	r3, [pc, #12]	@ (80031bc <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x144>)
 80031b0:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 80031b4:	e7f7      	b.n	80031a6 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x12e>
            WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_IT_TC | DMA2D_CR_START | DMA2D_IT_CE | DMA2D_IT_TE);
 80031b6:	f242 3201 	movw	r2, #8961	@ 0x2301
 80031ba:	e7dd      	b.n	8003178 <_ZN8STM32DMA13setupDataCopyERKN8touchgfx6BlitOpE+0x100>
 80031bc:	52001000 	.word	0x52001000
 80031c0:	00012301 	.word	0x00012301
 80031c4:	00020009 	.word	0x00020009
 80031c8:	0002000a 	.word	0x0002000a
 80031cc:	08023186 	.word	0x08023186
 80031d0:	080231a0 	.word	0x080231a0
 80031d4:	080230c3 	.word	0x080230c3
 80031d8:	00022301 	.word	0x00022301

080031dc <DMA2D_XferCpltCallback>:
 80031dc:	4b02      	ldr	r3, [pc, #8]	@ (80031e8 <DMA2D_XferCpltCallback+0xc>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	6858      	ldr	r0, [r3, #4]
        dma.signalDMAInterrupt();
 80031e2:	6803      	ldr	r3, [r0, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	4718      	bx	r3
 80031e8:	240253a8 	.word	0x240253a8

080031ec <_ZN8STM32DMA18signalDMAInterruptEv>:
        if (!started_by_external_job)
 80031ec:	f890 3da0 	ldrb.w	r3, [r0, #3488]	@ 0xda0
    virtual void signalDMAInterrupt()
 80031f0:	b510      	push	{r4, lr}
 80031f2:	4604      	mov	r4, r0
        if (!started_by_external_job)
 80031f4:	b9d3      	cbnz	r3, 800322c <_ZN8STM32DMA18signalDMAInterruptEv+0x40>
            executeCompleted();
 80031f6:	6803      	ldr	r3, [r0, #0]
 80031f8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031fa:	4798      	blx	r3
            if (Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex].State == JPEG_BUFFER_FULL && !DMA2D_CopyBufferEnd && !isRunning && !isReserved)
 80031fc:	4919      	ldr	r1, [pc, #100]	@ (8003264 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 80031fe:	4a1a      	ldr	r2, [pc, #104]	@ (8003268 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 8003200:	680b      	ldr	r3, [r1, #0]
 8003202:	011b      	lsls	r3, r3, #4
 8003204:	5cd3      	ldrb	r3, [r2, r3]
 8003206:	2b01      	cmp	r3, #1
 8003208:	d12a      	bne.n	8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800320a:	4818      	ldr	r0, [pc, #96]	@ (800326c <_ZN8STM32DMA18signalDMAInterruptEv+0x80>)
 800320c:	6800      	ldr	r0, [r0, #0]
 800320e:	bb38      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003210:	7a20      	ldrb	r0, [r4, #8]
 8003212:	bb28      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 8003214:	7aa0      	ldrb	r0, [r4, #10]
 8003216:	bb18      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003218:	6808      	ldr	r0, [r1, #0]
                started_by_external_job = true;
 800321a:	f884 3da0 	strb.w	r3, [r4, #3488]	@ 0xda0
        isRunning = true;
 800321e:	7223      	strb	r3, [r4, #8]
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003220:	eb02 1000 	add.w	r0, r2, r0, lsl #4
    }
 8003224:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        DMA2D_CopyBuffer(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003228:	f7ff bd64 	b.w	8002cf4 <DMA2D_CopyBuffer>
        if (isRunning)
 800322c:	7a03      	ldrb	r3, [r0, #8]
 800322e:	b143      	cbz	r3, 8003242 <_ZN8STM32DMA18signalDMAInterruptEv+0x56>
            isRunning = false;
 8003230:	2300      	movs	r3, #0
 8003232:	7203      	strb	r3, [r0, #8]
            DMA2D_ExternalJobCompleted(Jpeg_OUT_BufferTab[JPEG_OUT_Read_BufferIndex]);
 8003234:	4b0b      	ldr	r3, [pc, #44]	@ (8003264 <_ZN8STM32DMA18signalDMAInterruptEv+0x78>)
 8003236:	6818      	ldr	r0, [r3, #0]
 8003238:	4b0b      	ldr	r3, [pc, #44]	@ (8003268 <_ZN8STM32DMA18signalDMAInterruptEv+0x7c>)
 800323a:	eb03 1000 	add.w	r0, r3, r0, lsl #4
 800323e:	f7ff fd9d 	bl	8002d7c <DMA2D_ExternalJobCompleted>
            if (!queue.isEmpty() && isAllowed)
 8003242:	6860      	ldr	r0, [r4, #4]
 8003244:	6803      	ldr	r3, [r0, #0]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4798      	blx	r3
 800324a:	b948      	cbnz	r0, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
 800324c:	7a63      	ldrb	r3, [r4, #9]
 800324e:	b13b      	cbz	r3, 8003260 <_ZN8STM32DMA18signalDMAInterruptEv+0x74>
                execute();
 8003250:	6823      	ldr	r3, [r4, #0]
                started_by_external_job = false;
 8003252:	f884 0da0 	strb.w	r0, [r4, #3488]	@ 0xda0
                execute();
 8003256:	4620      	mov	r0, r4
 8003258:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
    }
 800325a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
                execute();
 800325e:	4718      	bx	r3
    }
 8003260:	bd10      	pop	{r4, pc}
 8003262:	bf00      	nop
 8003264:	24000868 	.word	0x24000868
 8003268:	24000010 	.word	0x24000010
 800326c:	24000864 	.word	0x24000864

08003270 <_ZN8STM32DMAC1Ev>:
STM32DMA::STM32DMA()
 8003270:	b570      	push	{r4, r5, r6, lr}
 8003272:	4604      	mov	r4, r0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 8003274:	4b0e      	ldr	r3, [pc, #56]	@ (80032b0 <_ZN8STM32DMAC1Ev+0x40>)
 8003276:	300c      	adds	r0, #12
     * Constructs a DMA Interface object.
     *
     * @param [in] dmaQueue Reference to the queue of DMA operations.
     */
    DMA_Interface(DMA_Queue& dmaQueue)
        : queue(dmaQueue), isRunning(false), isAllowed(false)
 8003278:	2600      	movs	r6, #0
 800327a:	4625      	mov	r5, r4
 800327c:	2260      	movs	r2, #96	@ 0x60
 800327e:	6060      	str	r0, [r4, #4]
 8003280:	7226      	strb	r6, [r4, #8]
 8003282:	7266      	strb	r6, [r4, #9]
 8003284:	f845 3b20 	str.w	r3, [r5], #32
 8003288:	4629      	mov	r1, r5
 800328a:	f00c fe2b 	bl	800fee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>
 800328e:	f504 635a 	add.w	r3, r4, #3488	@ 0xda0
        : color(0)
 8003292:	60ee      	str	r6, [r5, #12]
 8003294:	3524      	adds	r5, #36	@ 0x24
 8003296:	429d      	cmp	r5, r3
 8003298:	d1fb      	bne.n	8003292 <_ZN8STM32DMAC1Ev+0x22>
 800329a:	f884 6da0 	strb.w	r6, [r4, #3488]	@ 0xda0
    mutexIsRunning = MUTEX_CREATE();
 800329e:	2000      	movs	r0, #0
    : DMA_Interface(dma_queue), dma_queue(queue_storage, sizeof(queue_storage) / sizeof(queue_storage[0])), started_by_external_job(false), mutexIsRunning(0)
 80032a0:	f8c4 6da4 	str.w	r6, [r4, #3492]	@ 0xda4
    mutexIsRunning = MUTEX_CREATE();
 80032a4:	f009 faff 	bl	800c8a6 <osMutexNew>
 80032a8:	f8c4 0da4 	str.w	r0, [r4, #3492]	@ 0xda4
}
 80032ac:	4620      	mov	r0, r4
 80032ae:	bd70      	pop	{r4, r5, r6, pc}
 80032b0:	080231e8 	.word	0x080231e8

080032b4 <_ZN8touchgfx5paint8tearDownEv>:
 * @brief Waits until previous DMA drawing operation has finished
 */
void tearDown()
{
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032b4:	4b03      	ldr	r3, [pc, #12]	@ (80032c4 <_ZN8touchgfx5paint8tearDownEv+0x10>)
 80032b6:	681a      	ldr	r2, [r3, #0]
 80032b8:	07d2      	lsls	r2, r2, #31
 80032ba:	d4fc      	bmi.n	80032b6 <_ZN8touchgfx5paint8tearDownEv+0x2>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80032bc:	2223      	movs	r2, #35	@ 0x23
 80032be:	609a      	str	r2, [r3, #8]
}
 80032c0:	4770      	bx	lr
 80032c2:	bf00      	nop
 80032c4:	52001000 	.word	0x52001000

080032c8 <_ZN8touchgfx5paint9flushLineEPmi>:
void flushLine(uint32_t* addr, int sizebytes)
{
    // This funciton is used when decompressing RGB images to flush
    // the currently decoded pixels in the cache to allow the DMA2D
    // to blend the pixels correcly.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80032c8:	4a0b      	ldr	r2, [pc, #44]	@ (80032f8 <_ZN8touchgfx5paint9flushLineEPmi+0x30>)
 80032ca:	6953      	ldr	r3, [r2, #20]
 80032cc:	03db      	lsls	r3, r3, #15
 80032ce:	d511      	bpl.n	80032f4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80032d0:	2900      	cmp	r1, #0
 80032d2:	dd0f      	ble.n	80032f4 <_ZN8touchgfx5paint9flushLineEPmi+0x2c>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80032d4:	f000 031f 	and.w	r3, r0, #31
 80032d8:	4419      	add	r1, r3
  __ASM volatile ("dsb 0xF":::"memory");
 80032da:	f3bf 8f4f 	dsb	sy

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
        op_addr += __SCB_DCACHE_LINE_SIZE;
        op_size -= __SCB_DCACHE_LINE_SIZE;
      } while ( op_size > 0 );
 80032de:	4401      	add	r1, r0
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80032e0:	f8c2 0268 	str.w	r0, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80032e4:	3020      	adds	r0, #32
      } while ( op_size > 0 );
 80032e6:	1a0b      	subs	r3, r1, r0
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	dcf9      	bgt.n	80032e0 <_ZN8touchgfx5paint9flushLineEPmi+0x18>
 80032ec:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80032f0:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanDCache_by_Addr(addr, sizebytes);
    }
}
 80032f4:	4770      	bx	lr
 80032f6:	bf00      	nop
 80032f8:	e000ed00 	.word	0xe000ed00

080032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>:
 *
 * @brief Renders Canvas Widget chunks using DMA.
 * This functions will not generate an interrupt, and will not affect the DMA queue.
 */
void lineFromColor(uint8_t* const ptr, const unsigned count, const uint32_t color, const uint8_t alpha)
{
 80032fc:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 80032fe:	4c10      	ldr	r4, [pc, #64]	@ (8003340 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x44>)
 8003300:	6825      	ldr	r5, [r4, #0]
 8003302:	07ed      	lsls	r5, r5, #31
 8003304:	d4fc      	bmi.n	8003300 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003306:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003308:	0409      	lsls	r1, r1, #16

    /* Configure DMA2D destination address */
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    if (alpha < 0xFF)
 800330a:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800330c:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800330e:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003312:	ea41 0105 	orr.w	r1, r1, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003316:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003318:	6461      	str	r1, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800331a:	63e0      	str	r0, [r4, #60]	@ 0x3c
    if (alpha < 0xFF)
 800331c:	d00c      	beq.n	8003338 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x3c>
    {
        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));

        /* Write DMA2D FGPFCCR register */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 800331e:	4909      	ldr	r1, [pc, #36]	@ (8003344 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x48>)

        /* DMA2D FGCOLR register configuration */
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 8003320:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 8003324:	6265      	str	r5, [r4, #36]	@ 0x24
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_A8 | (DMA2D_REPLACE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003326:	ea41 6303 	orr.w	r3, r1, r3, lsl #24
 800332a:	61e3      	str	r3, [r4, #28]

        /* Configure DMA2D source address */
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);

        /* Enable the Peripheral and Enable the transfer complete interrupt */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_M2M_BLEND));
 800332c:	4b06      	ldr	r3, [pc, #24]	@ (8003348 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x4c>)
        WRITE_REG(DMA2D->FGCOLR, color & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | DMA2D_FGCOLR_RED));
 800332e:	6222      	str	r2, [r4, #32]
        WRITE_REG(DMA2D->BGMAR, (uint32_t)ptr);
 8003330:	6160      	str	r0, [r4, #20]
        WRITE_REG(DMA2D->FGMAR, (uint32_t)ptr);
 8003332:	60e0      	str	r0, [r4, #12]

        /* Set Output Color */
        WRITE_REG(DMA2D->OCOLR, color);

        /* Start DMA2D */
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 8003334:	6023      	str	r3, [r4, #0]
    }
}
 8003336:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_OUTPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_FGPFCCR_AM_Pos));
 8003338:	61e5      	str	r5, [r4, #28]
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800333a:	4b04      	ldr	r3, [pc, #16]	@ (800334c <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x50>)
        WRITE_REG(DMA2D->OCOLR, color);
 800333c:	63a2      	str	r2, [r4, #56]	@ 0x38
        WRITE_REG(DMA2D->CR, (DMA2D_CR_START | DMA2D_R2M));
 800333e:	e7f9      	b.n	8003334 <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh+0x38>
 8003340:	52001000 	.word	0x52001000
 8003344:	00010009 	.word	0x00010009
 8003348:	00020001 	.word	0x00020001
 800334c:	00030001 	.word	0x00030001

08003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>:

void lineFromRGB888(uint8_t* const ptr, const uint8_t* const data, const unsigned count, const uint8_t alpha)
{
 8003350:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 8003352:	4c0e      	ldr	r4, [pc, #56]	@ (800338c <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x3c>)
 8003354:	6825      	ldr	r5, [r4, #0]
 8003356:	07ed      	lsls	r5, r5, #31
 8003358:	d4fc      	bmi.n	8003354 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x4>

    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800335a:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800335c:	0412      	lsls	r2, r2, #16
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    if (alpha < 0xFF)
 800335e:	2bff      	cmp	r3, #255	@ 0xff
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8003360:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 8003362:	f04f 0501 	mov.w	r5, #1
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 8003366:	ea42 0205 	orr.w	r2, r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 800336a:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 800336c:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 800336e:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 8003370:	60e1      	str	r1, [r4, #12]
    if (alpha < 0xFF)
 8003372:	d007      	beq.n	8003384 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x34>
    {
        /* Set DMA2D color mode and alpha mode */
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003374:	4a06      	ldr	r2, [pc, #24]	@ (8003390 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x40>)
 8003376:	ea42 6303 	orr.w	r3, r2, r3, lsl #24
 800337a:	61e3      	str	r3, [r4, #28]

        /* Write DMA2D BGPFCCR register */
        WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 800337c:	6265      	str	r5, [r4, #36]	@ 0x24

        /* Configure DMA2D Stream source2 address */
        WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 800337e:	6160      	str	r0, [r4, #20]

        /* Set DMA2D mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 8003380:	6022      	str	r2, [r4, #0]
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));

        /* Start DMA2D : M2M Mode */
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
    }
}
 8003382:	bd30      	pop	{r4, r5, pc}
        WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 8003384:	4b03      	ldr	r3, [pc, #12]	@ (8003394 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x44>)
 8003386:	61e3      	str	r3, [r4, #28]
        WRITE_REG(DMA2D->CR, DMA2D_M2M | DMA2D_CR_START);
 8003388:	6025      	str	r5, [r4, #0]
}
 800338a:	e7fa      	b.n	8003382 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh+0x32>
 800338c:	52001000 	.word	0x52001000
 8003390:	00020001 	.word	0x00020001
 8003394:	ff020001 	.word	0xff020001

08003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>:

void lineFromARGB8888(uint8_t* const ptr, const uint32_t* const data, const unsigned count, const uint8_t alpha)
{
 8003398:	b530      	push	{r4, r5, lr}
    /* Wait for DMA2D to finish last run */
    while ((READ_REG(DMA2D->CR) & DMA2D_CR_START) != 0U);
 800339a:	4c0b      	ldr	r4, [pc, #44]	@ (80033c8 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x30>)
 800339c:	6825      	ldr	r5, [r4, #0]
 800339e:	07ed      	lsls	r5, r5, #31
 80033a0:	d4fc      	bmi.n	800339c <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x4>
    /* Clear transfer flags */
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033a2:	2523      	movs	r5, #35	@ 0x23

    /* DMA2D OPFCCR register configuration */
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);

    /* Configure DMA2D data size */
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033a4:	0412      	lsls	r2, r2, #16

    /* Configure DMA2D source address */
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));

    /* Set DMA2D color mode and alpha mode */
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033a6:	061b      	lsls	r3, r3, #24
    WRITE_REG(DMA2D->IFCR, DMA2D_FLAG_TC | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 80033a8:	60a5      	str	r5, [r4, #8]
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033aa:	2501      	movs	r5, #1
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ac:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033b0:	432a      	orrs	r2, r5
    WRITE_REG(DMA2D->OPFCCR, DMA2D_OUTPUT_RGB888);
 80033b2:	6365      	str	r5, [r4, #52]	@ 0x34
    WRITE_REG(DMA2D->NLR, (1 | (count << DMA2D_NLR_PL_Pos)));
 80033b4:	6462      	str	r2, [r4, #68]	@ 0x44
    WRITE_REG(DMA2D->OMAR, reinterpret_cast<uint32_t>(ptr));
 80033b6:	63e0      	str	r0, [r4, #60]	@ 0x3c
    WRITE_REG(DMA2D->FGMAR, reinterpret_cast<uint32_t>(data));
 80033b8:	60e1      	str	r1, [r4, #12]
    WRITE_REG(DMA2D->FGPFCCR, DMA2D_INPUT_ARGB8888 | (DMA2D_COMBINE_ALPHA << DMA2D_FGPFCCR_AM_Pos) | (alpha << DMA2D_FGPFCCR_ALPHA_Pos));
 80033ba:	61e3      	str	r3, [r4, #28]

    /* Configure DMA2D Stream source2 address */
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));

    /* Set DMA2D mode */
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033bc:	4b03      	ldr	r3, [pc, #12]	@ (80033cc <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh+0x34>)
    WRITE_REG(DMA2D->BGPFCCR, DMA2D_INPUT_RGB888 | (DMA2D_NO_MODIF_ALPHA << DMA2D_BGPFCCR_AM_Pos));
 80033be:	6265      	str	r5, [r4, #36]	@ 0x24
    WRITE_REG(DMA2D->BGMAR, reinterpret_cast<uint32_t>(ptr));
 80033c0:	6160      	str	r0, [r4, #20]
    WRITE_REG(DMA2D->CR, DMA2D_M2M_BLEND | DMA2D_CR_START);
 80033c2:	6023      	str	r3, [r4, #0]
}
 80033c4:	bd30      	pop	{r4, r5, pc}
 80033c6:	bf00      	nop
 80033c8:	52001000 	.word	0x52001000
 80033cc:	00020001 	.word	0x00020001

080033d0 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    };

    virtual uint16_t capacity() const
    {
        return NUMBER_OF_ELEMENTS;
    }
 80033d0:	2001      	movs	r0, #1
 80033d2:	4770      	bx	lr

080033d4 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:

    virtual uint32_t element_size()
    {
        return sizeof(stBlocks[0]);
    }
 80033d4:	200c      	movs	r0, #12
 80033d6:	4770      	bx	lr

080033d8 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

protected:
    virtual void* element(uint16_t index)
    {
        return &stBlocks[index];
 80033d8:	230c      	movs	r3, #12
 80033da:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033de:	3008      	adds	r0, #8
 80033e0:	4770      	bx	lr

080033e2 <_ZNK8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EE7elementEt>:

    virtual const void* element(uint16_t index) const
    {
        return &stBlocks[index];
 80033e2:	230c      	movs	r3, #12
 80033e4:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033e8:	3008      	adds	r0, #8
 80033ea:	4770      	bx	lr

080033ec <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 80033ec:	2001      	movs	r0, #1
 80033ee:	4770      	bx	lr

080033f0 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 80033f0:	206c      	movs	r0, #108	@ 0x6c
 80033f2:	4770      	bx	lr

080033f4 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033f4:	236c      	movs	r3, #108	@ 0x6c
 80033f6:	fb03 0001 	mla	r0, r3, r1, r0
    }
 80033fa:	3008      	adds	r0, #8
 80033fc:	4770      	bx	lr

080033fe <_ZNK8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 80033fe:	236c      	movs	r3, #108	@ 0x6c
 8003400:	fb03 0001 	mla	r0, r3, r1, r0
    }
 8003404:	3008      	adds	r0, #8
 8003406:	4770      	bx	lr

08003408 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE8capacityEv>:
    }
 8003408:	2001      	movs	r0, #1
 800340a:	4770      	bx	lr

0800340c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE12element_sizeEv>:
    }
 800340c:	2010      	movs	r0, #16
 800340e:	4770      	bx	lr

08003410 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003410:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 8003414:	3008      	adds	r0, #8
 8003416:	4770      	bx	lr

08003418 <_ZNK8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EE7elementEt>:
        return &stBlocks[index];
 8003418:	eb00 1001 	add.w	r0, r0, r1, lsl #4
    }
 800341c:	3008      	adds	r0, #8
 800341e:	4770      	bx	lr

08003420 <_ZN16FrontendHeapBase15gotoStartScreenER19FrontendApplication>:
     */
    typedef touchgfx::meta::select_type_maxsize< GeneratedTransitionTypes >::type MaxGeneratedTransitionType;

    virtual void gotoStartScreen(FrontendApplication& app)
    {
        app.gotoWelcomeScreenScreenNoTransition();
 8003420:	4608      	mov	r0, r1
 8003422:	f000 be43 	b.w	80040ac <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>
	...

08003428 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>:
class Partition : public AbstractPartition
 8003428:	4b03      	ldr	r3, [pc, #12]	@ (8003438 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800342a:	b510      	push	{r4, lr}
 800342c:	4604      	mov	r4, r0
 800342e:	6003      	str	r3, [r0, #0]
 8003430:	f00b fbb1 	bl	800eb96 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003434:	4620      	mov	r0, r4
 8003436:	bd10      	pop	{r4, pc}
 8003438:	080232a0 	.word	0x080232a0

0800343c <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800343c:	b510      	push	{r4, lr}
 800343e:	4604      	mov	r4, r0
 8003440:	f7ff fff2 	bl	8003428 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003444:	2114      	movs	r1, #20
 8003446:	4620      	mov	r0, r4
 8003448:	f01d fded 	bl	8021026 <_ZdlPvj>
 800344c:	4620      	mov	r0, r4
 800344e:	bd10      	pop	{r4, pc}

08003450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003450:	4b03      	ldr	r3, [pc, #12]	@ (8003460 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 8003452:	b510      	push	{r4, lr}
 8003454:	4604      	mov	r4, r0
 8003456:	6003      	str	r3, [r0, #0]
 8003458:	f00b fb9d 	bl	800eb96 <_ZN8touchgfx17AbstractPartitionD1Ev>
 800345c:	4620      	mov	r0, r4
 800345e:	bd10      	pop	{r4, pc}
 8003460:	0802326c 	.word	0x0802326c

08003464 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 8003464:	b510      	push	{r4, lr}
 8003466:	4604      	mov	r4, r0
 8003468:	f7ff fff2 	bl	8003450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 800346c:	2174      	movs	r1, #116	@ 0x74
 800346e:	4620      	mov	r0, r4
 8003470:	f01d fdd9 	bl	8021026 <_ZdlPvj>
 8003474:	4620      	mov	r0, r4
 8003476:	bd10      	pop	{r4, pc}

08003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>:
 8003478:	4b03      	ldr	r3, [pc, #12]	@ (8003488 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev+0x10>)
 800347a:	b510      	push	{r4, lr}
 800347c:	4604      	mov	r4, r0
 800347e:	6003      	str	r3, [r0, #0]
 8003480:	f00b fb89 	bl	800eb96 <_ZN8touchgfx17AbstractPartitionD1Ev>
 8003484:	4620      	mov	r0, r4
 8003486:	bd10      	pop	{r4, pc}
 8003488:	08023238 	.word	0x08023238

0800348c <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED0Ev>:
 800348c:	b510      	push	{r4, lr}
 800348e:	4604      	mov	r4, r0
 8003490:	f7ff fff2 	bl	8003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 8003494:	2118      	movs	r1, #24
 8003496:	4620      	mov	r0, r4
 8003498:	f01d fdc5 	bl	8021026 <_ZdlPvj>
 800349c:	4620      	mov	r0, r4
 800349e:	bd10      	pop	{r4, pc}

080034a0 <_ZN12FrontendHeapD1Ev>:
#ifndef FRONTENDHEAP_HPP
#define FRONTENDHEAP_HPP

#include <gui_generated/common/FrontendHeapBase.hpp>

class FrontendHeap : public FrontendHeapBase
 80034a0:	4b08      	ldr	r3, [pc, #32]	@ (80034c4 <_ZN12FrontendHeapD1Ev+0x24>)
 80034a2:	b510      	push	{r4, lr}
 80034a4:	4604      	mov	r4, r0
 80034a6:	f840 3ba0 	str.w	r3, [r0], #160
 80034aa:	f7ff ffbd 	bl	8003428 <_ZN8touchgfx9PartitionINS_4meta8TypeListINS_12NoTransitionENS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034ae:	f104 002c 	add.w	r0, r4, #44	@ 0x2c
 80034b2:	f7ff ffcd 	bl	8003450 <_ZN8touchgfx9PartitionINS_4meta8TypeListI12Screen10ViewNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034b6:	f104 0014 	add.w	r0, r4, #20
 80034ba:	f7ff ffdd 	bl	8003478 <_ZN8touchgfx9PartitionINS_4meta8TypeListI17Screen10PresenterNS2_INS1_3NilES4_EEEELt1EED1Ev>
 80034be:	4620      	mov	r0, r4
 80034c0:	bd10      	pop	{r4, pc}
 80034c2:	bf00      	nop
 80034c4:	080232d4 	.word	0x080232d4

080034c8 <__tcf_0>:
                            > > CombinedTransitionTypes;
    typedef touchgfx::meta::select_type_maxsize< CombinedTransitionTypes >::type MaxTransitionType;

    static FrontendHeap& getInstance()
    {
        static FrontendHeap instance;
 80034c8:	b508      	push	{r3, lr}
 80034ca:	4802      	ldr	r0, [pc, #8]	@ (80034d4 <__tcf_0+0xc>)
 80034cc:	f7ff ffe8 	bl	80034a0 <_ZN12FrontendHeapD1Ev>
 80034d0:	bd08      	pop	{r3, pc}
 80034d2:	bf00      	nop
 80034d4:	2400ad5c 	.word	0x2400ad5c

080034d8 <_ZN12FrontendHeapD0Ev>:
class FrontendHeap : public FrontendHeapBase
 80034d8:	b510      	push	{r4, lr}
 80034da:	4604      	mov	r4, r0
 80034dc:	f7ff ffe0 	bl	80034a0 <_ZN12FrontendHeapD1Ev>
 80034e0:	f44f 7105 	mov.w	r1, #532	@ 0x214
 80034e4:	4620      	mov	r0, r4
 80034e6:	f01d fd9e 	bl	8021026 <_ZdlPvj>
 80034ea:	4620      	mov	r0, r4
 80034ec:	bd10      	pop	{r4, pc}
	...

080034f0 <touchgfx_init>:
static ApplicationFontProvider fontProvider;
static Texts texts;
static TouchGFXHAL hal(dma, display, tc, 800, 480);

void touchgfx_init()
{
 80034f0:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
    Bitmap::registerBitmapDatabase(BitmapDatabase::getInstance(), BitmapDatabase::getInstanceSize());
 80034f4:	f000 fc52 	bl	8003d9c <_ZN14BitmapDatabase11getInstanceEv>
 80034f8:	2400      	movs	r4, #0
 80034fa:	4605      	mov	r5, r0
 80034fc:	f000 fc52 	bl	8003da4 <_ZN14BitmapDatabase15getInstanceSizeEv>
 8003500:	4623      	mov	r3, r4
 8003502:	4601      	mov	r1, r0
 8003504:	4622      	mov	r2, r4
 8003506:	4628      	mov	r0, r5
 8003508:	9400      	str	r4, [sp, #0]
 800350a:	f013 f807 	bl	801651c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>
     *
     * @param  t The array of texts.
     */
    static void registerTexts(const Texts* t)
    {
        texts = t;
 800350e:	4b27      	ldr	r3, [pc, #156]	@ (80035ac <touchgfx_init+0xbc>)
 8003510:	4a27      	ldr	r2, [pc, #156]	@ (80035b0 <touchgfx_init+0xc0>)
    TypedText::registerTexts(&texts);
    Texts::setLanguage(0);
 8003512:	4620      	mov	r0, r4
        static FrontendHeap instance;
 8003514:	4d27      	ldr	r5, [pc, #156]	@ (80035b4 <touchgfx_init+0xc4>)
 8003516:	601a      	str	r2, [r3, #0]
 8003518:	f000 ff58 	bl	80043cc <_ZN8touchgfx5Texts11setLanguageEt>
     *
     * @param renderer  The renderer to be used by LCD when dealing with vector fonts.
     */
    void setVectorFontRenderer(VectorFontRenderer* renderer)
    {
        vectorFontRenderer = renderer;
 800351c:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <touchgfx_init+0xc8>)
 800351e:	4a27      	ldr	r2, [pc, #156]	@ (80035bc <touchgfx_init+0xcc>)

    display.setVectorFontRenderer(&vectorFontRenderer);

    FontManager::setFontProvider(&fontProvider);
 8003520:	4827      	ldr	r0, [pc, #156]	@ (80035c0 <touchgfx_init+0xd0>)
 8003522:	609a      	str	r2, [r3, #8]
 8003524:	f012 fea6 	bl	8016274 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>
 8003528:	682b      	ldr	r3, [r5, #0]
 800352a:	f3bf 8f5b 	dmb	ish
 800352e:	07db      	lsls	r3, r3, #31
 8003530:	d435      	bmi.n	800359e <touchgfx_init+0xae>
 8003532:	4628      	mov	r0, r5
 8003534:	f01d fd79 	bl	802102a <__cxa_guard_acquire>
 8003538:	b388      	cbz	r0, 800359e <touchgfx_init+0xae>
     */
    MVPHeap(AbstractPartition& pres,
            AbstractPartition& scr,
            AbstractPartition& tra,
            MVPApplication& app)
        : presenterStorage(pres),
 800353a:	4c22      	ldr	r4, [pc, #136]	@ (80035c4 <touchgfx_init+0xd4>)
    Model model;
    FrontendApplication app;

private:
    FrontendHeap() : FrontendHeapBase(presenters, views, transitions, app),
                     app(model, *this)
 800353c:	4b22      	ldr	r3, [pc, #136]	@ (80035c8 <touchgfx_init+0xd8>)
          screenStorage(scr),
          transitionStorage(tra),
          frontendApplication(app)
 800353e:	f104 06b8 	add.w	r6, r4, #184	@ 0xb8
        : presenterStorage(pres),
 8003542:	f104 0014 	add.w	r0, r4, #20
          screenStorage(scr),
 8003546:	f104 082c 	add.w	r8, r4, #44	@ 0x2c
          transitionStorage(tra),
 800354a:	f104 07a0 	add.w	r7, r4, #160	@ 0xa0
 800354e:	6023      	str	r3, [r4, #0]
        : presenterStorage(pres),
 8003550:	6060      	str	r0, [r4, #4]
          screenStorage(scr),
 8003552:	f8c4 8008 	str.w	r8, [r4, #8]
          transitionStorage(tra),
 8003556:	60e7      	str	r7, [r4, #12]
          frontendApplication(app)
 8003558:	6126      	str	r6, [r4, #16]
 800355a:	f00b fb1d 	bl	800eb98 <_ZN8touchgfx17AbstractPartitionC1Ev>
 800355e:	4b1b      	ldr	r3, [pc, #108]	@ (80035cc <touchgfx_init+0xdc>)
 8003560:	4640      	mov	r0, r8
 8003562:	6163      	str	r3, [r4, #20]
 8003564:	f00b fb18 	bl	800eb98 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003568:	4b19      	ldr	r3, [pc, #100]	@ (80035d0 <touchgfx_init+0xe0>)
 800356a:	4638      	mov	r0, r7
 800356c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800356e:	f00b fb13 	bl	800eb98 <_ZN8touchgfx17AbstractPartitionC1Ev>
 8003572:	4b18      	ldr	r3, [pc, #96]	@ (80035d4 <touchgfx_init+0xe4>)
 8003574:	f104 00b4 	add.w	r0, r4, #180	@ 0xb4
 8003578:	f8c4 30a0 	str.w	r3, [r4, #160]	@ 0xa0
 800357c:	f001 f9ba 	bl	80048f4 <_ZN5ModelC1Ev>
 8003580:	4622      	mov	r2, r4
 8003582:	f104 01b4 	add.w	r1, r4, #180	@ 0xb4
 8003586:	4630      	mov	r0, r6
 8003588:	f001 f9aa 	bl	80048e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>
 800358c:	4630      	mov	r0, r6
 800358e:	f000 fd8d 	bl	80040ac <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>
        static FrontendHeap instance;
 8003592:	4811      	ldr	r0, [pc, #68]	@ (80035d8 <touchgfx_init+0xe8>)
 8003594:	f01e f8de 	bl	8021754 <atexit>
 8003598:	4628      	mov	r0, r5
 800359a:	f01d fd52 	bl	8021042 <__cxa_guard_release>
    (void)heap;

    /*
     * Initialize TouchGFX
     */
    hal.initialize();
 800359e:	480f      	ldr	r0, [pc, #60]	@ (80035dc <touchgfx_init+0xec>)
}
 80035a0:	b002      	add	sp, #8
 80035a2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    hal.initialize();
 80035a6:	f7fe bcdf 	b.w	8001f68 <_ZN11TouchGFXHAL10initializeEv>
 80035aa:	bf00      	nop
 80035ac:	2402540c 	.word	0x2402540c
 80035b0:	24009f20 	.word	0x24009f20
 80035b4:	2400ad58 	.word	0x2400ad58
 80035b8:	24009f40 	.word	0x24009f40
 80035bc:	24009f24 	.word	0x24009f24
 80035c0:	24000034 	.word	0x24000034
 80035c4:	2400ad5c 	.word	0x2400ad5c
 80035c8:	080232d4 	.word	0x080232d4
 80035cc:	08023238 	.word	0x08023238
 80035d0:	0802326c 	.word	0x0802326c
 80035d4:	080232a0 	.word	0x080232a0
 80035d8:	080034c9 	.word	0x080034c9
 80035dc:	24009ea4 	.word	0x24009ea4

080035e0 <touchgfx_components_init>:

void touchgfx_components_init()
{
}
 80035e0:	4770      	bx	lr
	...

080035e4 <touchgfx_taskEntry>:
     * Main event loop. Will wait for VSYNC signal, and then process next frame. Call
     * this function from your GUI task.
     *
     * Note This function never returns
     */
    hal.taskEntry();
 80035e4:	4801      	ldr	r0, [pc, #4]	@ (80035ec <touchgfx_taskEntry+0x8>)
 80035e6:	f7fe bcd1 	b.w	8001f8c <_ZN11TouchGFXHAL9taskEntryEv>
 80035ea:	bf00      	nop
 80035ec:	24009ea4 	.word	0x24009ea4

080035f0 <_GLOBAL__sub_I_touchgfx_init>:
}
 80035f0:	b573      	push	{r0, r1, r4, r5, r6, lr}
static STM32DMA dma;
 80035f2:	4c0e      	ldr	r4, [pc, #56]	@ (800362c <_GLOBAL__sub_I_touchgfx_init+0x3c>)
{
public:

    STM32TouchController() {}
 80035f4:	4b0e      	ldr	r3, [pc, #56]	@ (8003630 <_GLOBAL__sub_I_touchgfx_init+0x40>)
 80035f6:	4e0f      	ldr	r6, [pc, #60]	@ (8003634 <_GLOBAL__sub_I_touchgfx_init+0x44>)
 80035f8:	4620      	mov	r0, r4
static LCD24bpp display;
 80035fa:	4d0f      	ldr	r5, [pc, #60]	@ (8003638 <_GLOBAL__sub_I_touchgfx_init+0x48>)
 80035fc:	6033      	str	r3, [r6, #0]
static STM32DMA dma;
 80035fe:	f7ff fe37 	bl	8003270 <_ZN8STM32DMAC1Ev>
static LCD24bpp display;
 8003602:	4628      	mov	r0, r5
 8003604:	f016 fda2 	bl	801a14c <_ZN8touchgfx8LCD24bppC1Ev>
static VectorFontRendererImpl vectorFontRenderer;
 8003608:	480c      	ldr	r0, [pc, #48]	@ (800363c <_GLOBAL__sub_I_touchgfx_init+0x4c>)
 800360a:	f011 f845 	bl	8014698 <_ZN8touchgfx22VectorFontRendererImplC1Ev>
static TouchGFXHAL hal(dma, display, tc, 800, 480);
 800360e:	f44f 7348 	mov.w	r3, #800	@ 0x320
 8003612:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8003616:	4621      	mov	r1, r4
 8003618:	4809      	ldr	r0, [pc, #36]	@ (8003640 <_GLOBAL__sub_I_touchgfx_init+0x50>)
 800361a:	e9cd 3200 	strd	r3, r2, [sp]
 800361e:	4633      	mov	r3, r6
 8003620:	462a      	mov	r2, r5
 8003622:	f7fe fd47 	bl	80020b4 <_ZN11TouchGFXHALC1ERN8touchgfx13DMA_InterfaceERNS0_3LCDERNS0_15TouchControllerEtt>
}
 8003626:	b002      	add	sp, #8
 8003628:	bd70      	pop	{r4, r5, r6, pc}
 800362a:	bf00      	nop
 800362c:	24009fac 	.word	0x24009fac
 8003630:	080229cc 	.word	0x080229cc
 8003634:	2400ad54 	.word	0x2400ad54
 8003638:	24009f40 	.word	0x24009f40
 800363c:	24009f24 	.word	0x24009f24
 8003640:	24009ea4 	.word	0x24009ea4

08003644 <_GLOBAL__sub_D_touchgfx_init>:
static STM32DMA dma;
 8003644:	4801      	ldr	r0, [pc, #4]	@ (800364c <_GLOBAL__sub_D_touchgfx_init+0x8>)
 8003646:	f7ff bc5f 	b.w	8002f08 <_ZN8STM32DMAD1Ev>
 800364a:	bf00      	nop
 800364c:	24009fac 	.word	0x24009fac

08003650 <_ZN8touchgfx8Drawable13getFirstChildEv>:
     * @see Container::getFirstChild
     */
    virtual Drawable* getFirstChild()
    {
        return 0;
    }
 8003650:	2000      	movs	r0, #0
 8003652:	4770      	bx	lr

08003654 <_ZN8touchgfx8Drawable4setXEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setX(int16_t x)
    {
        rect.x = x;
 8003654:	8081      	strh	r1, [r0, #4]
    }
 8003656:	4770      	bx	lr

08003658 <_ZN8touchgfx8Drawable4setYEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setY(int16_t y)
    {
        rect.y = y;
 8003658:	80c1      	strh	r1, [r0, #6]
    }
 800365a:	4770      	bx	lr

0800365c <_ZN8touchgfx8Drawable8setWidthEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setWidth(int16_t width)
    {
        rect.width = width;
 800365c:	8101      	strh	r1, [r0, #8]
    }
 800365e:	4770      	bx	lr

08003660 <_ZN8touchgfx8Drawable9setHeightEs>:
     *
     * @note For most Drawable widgets, changing this does normally not automatically yield a redraw.
     */
    virtual void setHeight(int16_t height)
    {
        rect.height = height;
 8003660:	8141      	strh	r1, [r0, #10]
    }
 8003662:	4770      	bx	lr

08003664 <_ZN8touchgfx8Drawable20childGeometryChangedEv>:
     * one or more of its children has changed. Currently only used in ScrollableContainer
     * to redraw scrollbars when the size of the scrolling contents changes.
     */
    virtual void childGeometryChanged()
    {
    }
 8003664:	4770      	bx	lr

08003666 <_ZN8touchgfx8Drawable16handleClickEventERKNS_10ClickEventE>:
     * @param  event The ClickEvent received from the HAL.
     */
    virtual void handleClickEvent(const ClickEvent& event)
    {
        (void)event; // Unused variable
    }
 8003666:	4770      	bx	lr

08003668 <_ZN8touchgfx8Drawable18handleGestureEventERKNS_12GestureEventE>:
     * @param  event The GestureEvent received from the HAL.
     */
    virtual void handleGestureEvent(const GestureEvent& event)
    {
        (void)event; // Unused variable
    }
 8003668:	4770      	bx	lr

0800366a <_ZN8touchgfx8Drawable15handleDragEventERKNS_9DragEventE>:
     * @param  event The DragEvent received from the HAL.
     */
    virtual void handleDragEvent(const DragEvent& event)
    {
        (void)event; // Unused variable
    }
 800366a:	4770      	bx	lr

0800366c <_ZN8touchgfx8Drawable15handleTickEventEv>:
     *
     * @see Application::registerTimerWidget
     */
    virtual void handleTickEvent()
    {
    }
 800366c:	4770      	bx	lr

0800366e <_ZN8touchgfx8Drawable6moveToEss>:
     *
     * @see moveRelative, setXY
     *
     * @note Will redraw the appropriate areas of the screen.
     */
    virtual void moveTo(int16_t x, int16_t y)
 800366e:	b410      	push	{r4}
    {
        moveRelative(x - rect.x, y - rect.y);
 8003670:	88c4      	ldrh	r4, [r0, #6]
 8003672:	6803      	ldr	r3, [r0, #0]
 8003674:	1b12      	subs	r2, r2, r4
 8003676:	8884      	ldrh	r4, [r0, #4]
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	1b09      	subs	r1, r1, r4
 800367c:	b212      	sxth	r2, r2
    }
 800367e:	f85d 4b04 	ldr.w	r4, [sp], #4
        moveRelative(x - rect.x, y - rect.y);
 8003682:	b209      	sxth	r1, r1
 8003684:	4718      	bx	r3

08003686 <_ZN8touchgfx8Drawable14setupDrawChainERKNS_4RectEPPS0_>:
     * @note For TouchGFX internal use only.
     */
    void resetDrawChainCache()
    {
        // Resetting the cached indicators
        cachedVisibleRect.x = UNCACHED_INDICATOR;
 8003686:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800368a:	8183      	strh	r3, [r0, #12]
        cachedAbsX = UNCACHED_INDICATOR;
 800368c:	f04f 33ff 	mov.w	r3, #4294967295
 8003690:	6203      	str	r3, [r0, #32]
     */
    virtual void setupDrawChain(const Rect& invalidatedArea, Drawable** nextPreviousElement)
    {
        (void)invalidatedArea; // Unused variable
        resetDrawChainCache();
        nextDrawChainElement = *nextPreviousElement;
 8003692:	6813      	ldr	r3, [r2, #0]
 8003694:	61c3      	str	r3, [r0, #28]
        *nextPreviousElement = this;
 8003696:	6010      	str	r0, [r2, #0]
    }
 8003698:	4770      	bx	lr

0800369a <_ZNK8touchgfx15AbstractPainter18getRenderingMethodEv>:
     * @return HARDWARE if painter uses hardware based drawing, SOFTWARE otherwise.
     */
    virtual HAL::RenderingMethod getRenderingMethod() const
    {
        return HAL::SOFTWARE;
    }
 800369a:	2000      	movs	r0, #0
 800369c:	4770      	bx	lr

0800369e <_ZNK8touchgfx15AbstractPainter5setupERKNS_4RectE>:
     *
     * @see AbstractPainter::paint, AbstractPainter::tearDown
     */
    virtual bool setup(const Rect& widgetRect) const
    {
        widgetWidth = widgetRect.width;
 800369e:	888b      	ldrh	r3, [r1, #4]
 80036a0:	8083      	strh	r3, [r0, #4]
        return true;
    }
 80036a2:	2001      	movs	r0, #1
 80036a4:	4770      	bx	lr

080036a6 <_ZNK8touchgfx15AbstractPainter8tearDownEv>:
     * @see AbstractPainter::paint, AbstractPainter::setup
     */
    virtual void tearDown() const
    {
        return;
    }
 80036a6:	4770      	bx	lr

080036a8 <_ZN8touchgfx12CanvasWidget8setAlphaEh>:
    }

    /** @copydoc Image::setAlpha */
    virtual void setAlpha(uint8_t newAlpha)
    {
        alpha = newAlpha;
 80036a8:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
    }
 80036ac:	4770      	bx	lr

080036ae <_ZNK8touchgfx12CanvasWidget8getAlphaEv>:

    /** @copydoc Image::getAlpha() */
    virtual uint8_t getAlpha() const
    {
        return alpha;
    }
 80036ae:	f890 0026 	ldrb.w	r0, [r0, #38]	@ 0x26
 80036b2:	4770      	bx	lr

080036b4 <_ZNK8touchgfx12CanvasWidget14getMinimalRectEv>:
     * @param  rectY      The y coordinate.
     * @param  rectWidth  The width.
     * @param  rectHeight The height.
     */
    Rect(int16_t rectX, int16_t rectY, int16_t rectWidth, int16_t rectHeight)
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80036b4:	2200      	movs	r2, #0
     * overwritten in subclasses and return the minimal rectangle containing the shape. See
     * classes such as Circle for example implementations.
     *
     * @return The minimal rectangle containing the shape drawn.
     */
    virtual Rect getMinimalRect() const
 80036b6:	b510      	push	{r4, lr}
        return rect.width;
 80036b8:	f9b1 4008 	ldrsh.w	r4, [r1, #8]
        return rect.height;
 80036bc:	f9b1 100a 	ldrsh.w	r1, [r1, #10]
 80036c0:	8002      	strh	r2, [r0, #0]
 80036c2:	8042      	strh	r2, [r0, #2]
 80036c4:	8084      	strh	r4, [r0, #4]
 80036c6:	80c1      	strh	r1, [r0, #6]
    {
        return Rect(0, 0, getWidth(), getHeight());
    }
 80036c8:	bd10      	pop	{r4, pc}

080036ca <_ZNK8touchgfx12CanvasWidget12getSolidRectEv>:
        : x(0), y(0), width(0), height(0)
 80036ca:	2200      	movs	r2, #0
 80036cc:	8002      	strh	r2, [r0, #0]
 80036ce:	8042      	strh	r2, [r0, #2]
 80036d0:	8082      	strh	r2, [r0, #4]
 80036d2:	80c2      	strh	r2, [r0, #6]
     *       lines will not be drawn and may cause strange display artifacts.
     */
    virtual Rect getSolidRect() const
    {
        return Rect();
    }
 80036d4:	4770      	bx	lr

080036d6 <_ZN8touchgfx17CWRVectorRenderer7setModeENS_14VectorRenderer8DrawModeE>:
     *
     * @param mode The filling mode.
     */
    virtual void setMode(DrawMode mode)
    {
        drawMode = mode;
 80036d6:	7701      	strb	r1, [r0, #28]
    }
 80036d8:	4770      	bx	lr

080036da <_ZN8touchgfx17CWRVectorRenderer19setStrokeMiterLimitEf>:

    virtual void setStrokeMiterLimit(float miterLimit)
    {
        strokeMiterLimit = miterLimit;
 80036da:	ed80 0a08 	vstr	s0, [r0, #32]
    }
 80036de:	4770      	bx	lr

080036e0 <_ZN8touchgfx17CWRVectorRenderer17setStrokeLineJoinENS_16VGStrokeLineJoinE>:

    virtual void setStrokeLineJoin(VGStrokeLineJoin lineJoin)
    {
        strokeLineJoin = lineJoin;
 80036e0:	f880 1024 	strb.w	r1, [r0, #36]	@ 0x24
    }
 80036e4:	4770      	bx	lr

080036e6 <_ZN8touchgfx17CWRVectorRenderer16setStrokeLineCapENS_15VGStrokeLineCapE>:

    virtual void setStrokeLineCap(VGStrokeLineCap lineCap)
    {
        strokeLineCap = lineCap;
 80036e6:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
    }
 80036ea:	4770      	bx	lr

080036ec <_ZNK8touchgfx17CWRVectorRenderer17CanvasWidgetProxy16drawCanvasWidgetERKNS_4RectE>:
    class CanvasWidgetProxy : public CanvasWidget
    {
        virtual bool drawCanvasWidget(const Rect& invalidatedArea) const
        {
            return true;
        }
 80036ec:	2001      	movs	r0, #1
 80036ee:	4770      	bx	lr

080036f0 <_ZN8touchgfx23CWRVectorRendererRGB88816getLinearPainterEv>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
{
    virtual AbstractPainterLinearGradient& getLinearPainter()
    {
        return linearPainter;
    }
 80036f0:	3098      	adds	r0, #152	@ 0x98
 80036f2:	4770      	bx	lr

080036f4 <_ZN8touchgfx23CWRVectorRendererRGB88820getColorPainterColorEv>:

    virtual AbstractPainterColor& getColorPainterColor()
    {
        return colorPainter;
    }
 80036f4:	308c      	adds	r0, #140	@ 0x8c
 80036f6:	4770      	bx	lr

080036f8 <_ZN8touchgfx23CWRVectorRendererRGB88815getColorPainterEv>:

    virtual AbstractPainter& getColorPainter()
    {
        return colorPainter;
    }
 80036f8:	3084      	adds	r0, #132	@ 0x84
 80036fa:	4770      	bx	lr

080036fc <__tcf_1>:

namespace touchgfx
{
VectorRenderer* VectorRenderer::getInstance()
{
    static CWRVectorRendererRGB888 renderer;
 80036fc:	4770      	bx	lr
	...

08003700 <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv>:
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003700:	4b02      	ldr	r3, [pc, #8]	@ (800370c <_ZN20TouchGFXGeneratedHAL19configureInterruptsEv+0xc>)
 8003702:	2290      	movs	r2, #144	@ 0x90
 8003704:	f883 235a 	strb.w	r2, [r3, #858]	@ 0x35a
}

void TouchGFXGeneratedHAL::configureInterrupts()
{
    NVIC_SetPriority(DMA2D_IRQn, 9);
}
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	e000e100 	.word	0xe000e100

08003710 <_ZN20TouchGFXGeneratedHAL17setTFTFrameBufferEPt>:
}

void TouchGFXGeneratedHAL::setTFTFrameBuffer(uint16_t* adr)
{
    //setTFTFrameBuffer() not used for selected display interface
}
 8003710:	4770      	bx	lr

08003712 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setRGBBufferEPhj>:

    virtual void setRGBBuffer(uint8_t* buffer, size_t sizeOfBuffer)
    {
        // Running in UI thread / main

        bufferRGB = buffer;
 8003712:	6301      	str	r1, [r0, #48]	@ 0x30
        topBufferRGB = bufferRGB;
        sizeBufferRGB = sizeOfBuffer;
 8003714:	e9c0 210d 	strd	r2, r1, [r0, #52]	@ 0x34
    }
 8003718:	4770      	bx	lr

0800371a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED1Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 800371a:	4770      	bx	lr

0800371c <_ZN8touchgfx23CWRVectorRendererRGB888D1Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 800371c:	4770      	bx	lr

0800371e <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD1Ev>:
    class CanvasWidgetProxy : public CanvasWidget
 800371e:	4770      	bx	lr

08003720 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmRNS0_15VideoDataReaderE>:
        mjpegDecoders[handle]->setVideoData(reader);
 8003720:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8003724:	4611      	mov	r1, r2
 8003726:	6840      	ldr	r0, [r0, #4]
 8003728:	6803      	ldr	r3, [r0, #0]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	4718      	bx	r3

0800372e <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE29setVideoFrameRateCompensationEb>:
        return stream.isPlaying;
    }

    virtual void setVideoFrameRateCompensation(bool allow)
    {
        allowSkipFrames = allow;
 800372e:	f880 103c 	strb.w	r1, [r0, #60]	@ 0x3c
    }
 8003732:	4770      	bx	lr

08003734 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EED0Ev>:
class DedicatedBufferController : public touchgfx::VideoController
 8003734:	b510      	push	{r4, lr}
 8003736:	4604      	mov	r4, r0
 8003738:	2148      	movs	r1, #72	@ 0x48
 800373a:	f01d fc74 	bl	8021026 <_ZdlPvj>
 800373e:	4620      	mov	r0, r4
 8003740:	bd10      	pop	{r4, pc}

08003742 <_ZN8touchgfx17CWRVectorRenderer17CanvasWidgetProxyD0Ev>:
 8003742:	b510      	push	{r4, lr}
 8003744:	4604      	mov	r4, r0
 8003746:	212c      	movs	r1, #44	@ 0x2c
 8003748:	f01d fc6d 	bl	8021026 <_ZdlPvj>
 800374c:	4620      	mov	r0, r4
 800374e:	bd10      	pop	{r4, pc}

08003750 <_ZN8touchgfx23CWRVectorRendererRGB888D0Ev>:
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003750:	b510      	push	{r4, lr}
 8003752:	4604      	mov	r4, r0
 8003754:	21bc      	movs	r1, #188	@ 0xbc
 8003756:	f01d fc66 	bl	8021026 <_ZdlPvj>
 800375a:	4620      	mov	r0, r4
 800375c:	bd10      	pop	{r4, pc}
	...

08003760 <_ZN20TouchGFXGeneratedHAL10initializeEv>:
{
 8003760:	b538      	push	{r3, r4, r5, lr}
 8003762:	4604      	mov	r4, r0
    HAL::initialize();
 8003764:	f00b fd13 	bl	800f18e <_ZN8touchgfx3HAL10initializeEv>
    registerEventListener(*(Application::getInstance()));
 8003768:	6823      	ldr	r3, [r4, #0]
 800376a:	6e5d      	ldr	r5, [r3, #100]	@ 0x64
 800376c:	f00f fe66 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 8003770:	4601      	mov	r1, r0
 8003772:	4620      	mov	r0, r4
 8003774:	47a8      	blx	r5
    setFrameBufferStartAddresses((void*)frameBuf, (void*)0, (void*)0);
 8003776:	6823      	ldr	r3, [r4, #0]
 8003778:	4908      	ldr	r1, [pc, #32]	@ (800379c <_ZN20TouchGFXGeneratedHAL10initializeEv+0x3c>)
 800377a:	4620      	mov	r0, r4
 800377c:	f8d3 5088 	ldr.w	r5, [r3, #136]	@ 0x88
 8003780:	2300      	movs	r3, #0
 8003782:	461a      	mov	r2, r3
 8003784:	47a8      	blx	r5
    void addDMA(touchgfx::DMA_Interface& dma)
    {
        this->dma = &dma;
 8003786:	6863      	ldr	r3, [r4, #4]
 8003788:	4a05      	ldr	r2, [pc, #20]	@ (80037a0 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x40>)
 800378a:	6453      	str	r3, [r2, #68]	@ 0x44
        mjpegDecoders[index] = &decoder;
 800378c:	4b05      	ldr	r3, [pc, #20]	@ (80037a4 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x44>)
 800378e:	605a      	str	r2, [r3, #4]
        bufferRGB = buffer;
 8003790:	4a05      	ldr	r2, [pc, #20]	@ (80037a8 <_ZN20TouchGFXGeneratedHAL10initializeEv+0x48>)
 8003792:	631a      	str	r2, [r3, #48]	@ 0x30
        topBufferRGB = bufferRGB;
 8003794:	639a      	str	r2, [r3, #56]	@ 0x38
        sizeBufferRGB = sizeOfBuffer;
 8003796:	4a05      	ldr	r2, [pc, #20]	@ (80037ac <_ZN20TouchGFXGeneratedHAL10initializeEv+0x4c>)
 8003798:	635a      	str	r2, [r3, #52]	@ 0x34
}
 800379a:	bd38      	pop	{r3, r4, r5, pc}
 800379c:	d0119400 	.word	0xd0119400
 80037a0:	2400b078 	.word	0x2400b078
 80037a4:	2400b030 	.word	0x2400b030
 80037a8:	d0000000 	.word	0xd0000000
 80037ac:	00119400 	.word	0x00119400

080037b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm>:
    virtual void unregisterVideoWidget(const Handle handle)
 80037b0:	b538      	push	{r3, r4, r5, lr}
 80037b2:	4604      	mov	r4, r0
 80037b4:	460d      	mov	r5, r1
        MUTEX_LOCK(mutexBuffers);
 80037b6:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 80037b8:	f04f 31ff 	mov.w	r1, #4294967295
 80037bc:	f009 f8a8 	bl	800c910 <osMutexAcquire>
        MUTEX_UNLOCK(mutexBuffers);
 80037c0:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 80037c2:	f009 f8c8 	bl	800c956 <osMutexRelease>
        streams[handle].isActive = false;
 80037c6:	2324      	movs	r3, #36	@ 0x24
 80037c8:	fb03 4505 	mla	r5, r3, r5, r4
 80037cc:	2300      	movs	r3, #0
 80037ce:	f885 3028 	strb.w	r3, [r5, #40]	@ 0x28
        if (oneIsActive == false)
 80037d2:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 80037d6:	b90b      	cbnz	r3, 80037dc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21unregisterVideoWidgetEm+0x2c>
            topBufferRGB = bufferRGB;
 80037d8:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80037da:	63a3      	str	r3, [r4, #56]	@ 0x38
    }
 80037dc:	bd38      	pop	{r3, r4, r5, pc}

080037de <_ZN20TouchGFXGeneratedHAL16flushFrameBufferERKN8touchgfx4RectE>:

void TouchGFXGeneratedHAL::flushFrameBuffer(const touchgfx::Rect& rect)
{
    HAL::flushFrameBuffer(rect);
 80037de:	f00b bc87 	b.w	800f0f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>

080037e2 <_ZN20TouchGFXGeneratedHAL9blockCopyEPvPKvm>:
}

bool TouchGFXGeneratedHAL::blockCopy(void* RESTRICT dest, const void* RESTRICT src, uint32_t numBytes)
{
    return HAL::blockCopy(dest, src, numBytes);
 80037e2:	f00b bde8 	b.w	800f3b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>

080037e6 <_ZNK8touchgfx8Drawable17invalidateContentEv>:
        if (visible)
 80037e6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80037ea:	b112      	cbz	r2, 80037f2 <_ZNK8touchgfx8Drawable17invalidateContentEv+0xc>
            invalidate();
 80037ec:	6803      	ldr	r3, [r0, #0]
 80037ee:	695b      	ldr	r3, [r3, #20]
 80037f0:	4718      	bx	r3
    }
 80037f2:	4770      	bx	lr

080037f4 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv>:
    // Because DMA2D access main memory directly, the DCache must be invalidated
    // becuase it could hold a wrong image of the framebuffer. That's done
    // using the function SCB_CleanInvalidateDCache(). Remember to enable
    // "CPU Cache" in the "System Core" settings for "Cortex M7" in CubeMX
    // in order for this function call to work.
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037f4:	4a12      	ldr	r2, [pc, #72]	@ (8003840 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x4c>)
 80037f6:	6953      	ldr	r3, [r2, #20]
 80037f8:	03db      	lsls	r3, r3, #15
{
 80037fa:	b570      	push	{r4, r5, r6, lr}
    if (SCB->CCR & SCB_CCR_DC_Msk)
 80037fc:	d51e      	bpl.n	800383c <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x48>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 80037fe:	2300      	movs	r3, #0
 8003800:	f8c2 3084 	str.w	r3, [r2, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8003804:	f3bf 8f4f 	dsb	sy
    ccsidr = SCB->CCSIDR;
 8003808:	f8d2 3080 	ldr.w	r3, [r2, #128]	@ 0x80
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800380c:	f643 74e0 	movw	r4, #16352	@ 0x3fe0
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8003810:	f3c3 00c9 	ubfx	r0, r3, #3, #10
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8003814:	f3c3 334e 	ubfx	r3, r3, #13, #15
 8003818:	015b      	lsls	r3, r3, #5
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 800381a:	ea03 0604 	and.w	r6, r3, r4
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800381e:	4601      	mov	r1, r0
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003820:	ea46 7581 	orr.w	r5, r6, r1, lsl #30
      } while (ways-- != 0U);
 8003824:	3901      	subs	r1, #1
        SCB->DCCISW = (((sets << SCB_DCCISW_SET_Pos) & SCB_DCCISW_SET_Msk) |
 8003826:	f8c2 5274 	str.w	r5, [r2, #628]	@ 0x274
      } while (ways-- != 0U);
 800382a:	d2f9      	bcs.n	8003820 <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x2c>
    } while(sets-- != 0U);
 800382c:	3b20      	subs	r3, #32
 800382e:	f113 0f20 	cmn.w	r3, #32
 8003832:	d1f2      	bne.n	800381a <_ZN20TouchGFXGeneratedHAL10FlushCacheEv+0x26>
 8003834:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003838:	f3bf 8f6f 	isb	sy
    {
        SCB_CleanInvalidateDCache();
    }
}
 800383c:	bd70      	pop	{r4, r5, r6, pc}
 800383e:	bf00      	nop
 8003840:	e000ed00 	.word	0xe000ed00

08003844 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm>:
    virtual bool getIsPlaying(const Handle handle)
 8003844:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003846:	b131      	cbz	r1, 8003856 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x12>
 8003848:	4b04      	ldr	r3, [pc, #16]	@ (800385c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x18>)
 800384a:	f44f 71b8 	mov.w	r1, #368	@ 0x170
 800384e:	4a04      	ldr	r2, [pc, #16]	@ (8003860 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x1c>)
 8003850:	4804      	ldr	r0, [pc, #16]	@ (8003864 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12getIsPlayingEm+0x20>)
 8003852:	f01d ff61 	bl	8021718 <__assert_func>
    }
 8003856:	f890 0029 	ldrb.w	r0, [r0, #41]	@ 0x29
 800385a:	bd08      	pop	{r3, pc}
 800385c:	080232e0 	.word	0x080232e0
 8003860:	080232f4 	.word	0x080232f4
 8003864:	0802347e 	.word	0x0802347e

08003868 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE>:
    virtual void getVideoInformation(const Handle handle, touchgfx::VideoInformation* data)
 8003868:	b510      	push	{r4, lr}
        assert(handle < no_streams);
 800386a:	b131      	cbz	r1, 800387a <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x12>
 800386c:	4b06      	ldr	r3, [pc, #24]	@ (8003888 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x20>)
 800386e:	f44f 71b5 	mov.w	r1, #362	@ 0x16a
 8003872:	4a06      	ldr	r2, [pc, #24]	@ (800388c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x24>)
 8003874:	4806      	ldr	r0, [pc, #24]	@ (8003890 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19getVideoInformationEmPNS0_16VideoInformationE+0x28>)
 8003876:	f01d ff4f 	bl	8021718 <__assert_func>
        mjpegDecoders[handle]->getVideoInfo(data);
 800387a:	6840      	ldr	r0, [r0, #4]
 800387c:	4611      	mov	r1, r2
 800387e:	6803      	ldr	r3, [r0, #0]
    }
 8003880:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->getVideoInfo(data);
 8003884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003886:	4718      	bx	r3
 8003888:	080232e0 	.word	0x080232e0
 800388c:	080234c8 	.word	0x080234c8
 8003890:	0802347e 	.word	0x0802347e

08003894 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm>:
    virtual uint32_t getCurrentFrameNumber(const Handle handle)
 8003894:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 8003896:	b129      	cbz	r1, 80038a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x10>
 8003898:	4b03      	ldr	r3, [pc, #12]	@ (80038a8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x14>)
 800389a:	2179      	movs	r1, #121	@ 0x79
 800389c:	4a03      	ldr	r2, [pc, #12]	@ (80038ac <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x18>)
 800389e:	4804      	ldr	r0, [pc, #16]	@ (80038b0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE21getCurrentFrameNumberEm+0x1c>)
 80038a0:	f01d ff3a 	bl	8021718 <__assert_func>
    }
 80038a4:	68c0      	ldr	r0, [r0, #12]
 80038a6:	bd08      	pop	{r3, pc}
 80038a8:	080232e0 	.word	0x080232e0
 80038ac:	08023676 	.word	0x08023676
 80038b0:	0802347e 	.word	0x0802347e

080038b4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm>:
    virtual void setCommand(const Handle handle, Command cmd, uint32_t param)
 80038b4:	b510      	push	{r4, lr}
 80038b6:	4604      	mov	r4, r0
        assert(handle < no_streams);
 80038b8:	b129      	cbz	r1, 80038c6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x12>
 80038ba:	4b19      	ldr	r3, [pc, #100]	@ (8003920 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x6c>)
 80038bc:	21a2      	movs	r1, #162	@ 0xa2
 80038be:	4a19      	ldr	r2, [pc, #100]	@ (8003924 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x70>)
 80038c0:	4819      	ldr	r0, [pc, #100]	@ (8003928 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x74>)
 80038c2:	f01d ff29 	bl	8021718 <__assert_func>
        switch (cmd)
 80038c6:	2a05      	cmp	r2, #5
 80038c8:	d815      	bhi.n	80038f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 80038ca:	e8df f002 	tbb	[pc, r2]
 80038ce:	1103      	.short	0x1103
 80038d0:	221c1715 	.word	0x221c1715
            if (mjpegDecoders[handle]->hasVideo())
 80038d4:	6840      	ldr	r0, [r0, #4]
 80038d6:	6803      	ldr	r3, [r0, #0]
 80038d8:	691b      	ldr	r3, [r3, #16]
 80038da:	4798      	blx	r3
 80038dc:	b158      	cbz	r0, 80038f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
                stream.isPlaying = true;
 80038de:	2301      	movs	r3, #1
 80038e0:	f884 3029 	strb.w	r3, [r4, #41]	@ 0x29
                stream.hasMoreFrames = true; // Assume more frames, lowered on end
 80038e4:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
            stream.frameCount = 0;
 80038e8:	2300      	movs	r3, #0
            stream.tickCount = 0;
 80038ea:	e9c4 3304 	strd	r3, r3, [r4, #16]
            break;
 80038ee:	e002      	b.n	80038f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.isPlaying = false;
 80038f0:	2300      	movs	r3, #0
 80038f2:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
    }
 80038f6:	bd10      	pop	{r4, pc}
            stream.seek_to_frame = param;
 80038f8:	6203      	str	r3, [r0, #32]
 80038fa:	e7f5      	b.n	80038e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.seek_to_frame = param;
 80038fc:	6203      	str	r3, [r0, #32]
            stream.isShowingOneFrame = true;
 80038fe:	2301      	movs	r3, #1
 8003900:	f880 302a 	strb.w	r3, [r0, #42]	@ 0x2a
 8003904:	e7f0      	b.n	80038e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x34>
            stream.isPlaying = false;
 8003906:	2300      	movs	r3, #0
 8003908:	f880 3029 	strb.w	r3, [r0, #41]	@ 0x29
            stream.seek_to_frame = 1;
 800390c:	2301      	movs	r3, #1
 800390e:	6203      	str	r3, [r0, #32]
            break;
 8003910:	e7f1      	b.n	80038f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
            stream.repeat = (param > 0);
 8003912:	3b00      	subs	r3, #0
 8003914:	bf18      	it	ne
 8003916:	2301      	movne	r3, #1
 8003918:	f880 302d 	strb.w	r3, [r0, #45]	@ 0x2d
    }
 800391c:	e7eb      	b.n	80038f6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE10setCommandEmNS0_15VideoController7CommandEm+0x42>
 800391e:	bf00      	nop
 8003920:	080232e0 	.word	0x080232e0
 8003924:	0802382b 	.word	0x0802382b
 8003928:	0802347e 	.word	0x0802347e

0800392c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm>:
    virtual void setVideoData(const Handle handle, const uint8_t* movie, const uint32_t length)
 800392c:	b510      	push	{r4, lr}
 800392e:	460c      	mov	r4, r1
 8003930:	4611      	mov	r1, r2
 8003932:	461a      	mov	r2, r3
        assert(handle < no_streams);
 8003934:	b12c      	cbz	r4, 8003942 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x16>
 8003936:	4b06      	ldr	r3, [pc, #24]	@ (8003950 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x24>)
 8003938:	2190      	movs	r1, #144	@ 0x90
 800393a:	4a06      	ldr	r2, [pc, #24]	@ (8003954 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x28>)
 800393c:	4806      	ldr	r0, [pc, #24]	@ (8003958 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setVideoDataEmPKhm+0x2c>)
 800393e:	f01d feeb 	bl	8021718 <__assert_func>
        stream.frameNumber = 0;
 8003942:	60c4      	str	r4, [r0, #12]
        mjpegDecoders[handle]->setVideoData(movie, length);
 8003944:	6840      	ldr	r0, [r0, #4]
 8003946:	6803      	ldr	r3, [r0, #0]
    }
 8003948:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        mjpegDecoders[handle]->setVideoData(movie, length);
 800394c:	689b      	ldr	r3, [r3, #8]
 800394e:	4718      	bx	r3
 8003950:	080232e0 	.word	0x080232e0
 8003954:	080239ff 	.word	0x080239ff
 8003958:	0802347e 	.word	0x0802347e

0800395c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm>:
    virtual void setFrameRate(const Handle handle, uint32_t ui_frames, uint32_t video_frames)
 800395c:	b508      	push	{r3, lr}
        assert(handle < no_streams);
 800395e:	b129      	cbz	r1, 800396c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x10>
 8003960:	4b05      	ldr	r3, [pc, #20]	@ (8003978 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x1c>)
 8003962:	2182      	movs	r1, #130	@ 0x82
 8003964:	4a05      	ldr	r2, [pc, #20]	@ (800397c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x20>)
 8003966:	4806      	ldr	r0, [pc, #24]	@ (8003980 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE12setFrameRateEmmm+0x24>)
 8003968:	f01d fed6 	bl	8021718 <__assert_func>
        stream.tickCount = 0;
 800396c:	e9c0 1104 	strd	r1, r1, [r0, #16]
        stream.frame_rate_video = video_frames;
 8003970:	e9c0 3206 	strd	r3, r2, [r0, #24]
    }
 8003974:	bd08      	pop	{r3, pc}
 8003976:	bf00      	nop
 8003978:	080232e0 	.word	0x080232e0
 800397c:	08023bda 	.word	0x08023bda
 8003980:	0802347e 	.word	0x0802347e

08003984 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE>:
        if (firstDrawThisFrame)
 8003984:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
    virtual void draw(const Handle handle, const touchgfx::Rect& invalidatedArea, const touchgfx::VideoWidget& widget)
 8003988:	b510      	push	{r4, lr}
 800398a:	4604      	mov	r4, r0
        if (firstDrawThisFrame)
 800398c:	b153      	cbz	r3, 80039a4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE4drawEmRKNS0_4RectERKNS0_11VideoWidgetE+0x20>
            MUTEX_LOCK(mutexBuffers);
 800398e:	f04f 31ff 	mov.w	r1, #4294967295
 8003992:	6c40      	ldr	r0, [r0, #68]	@ 0x44
 8003994:	f008 ffbc 	bl	800c910 <osMutexAcquire>
            firstDrawThisFrame = false;
 8003998:	2300      	movs	r3, #0
 800399a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
            uiHasMutex = true;
 800399e:	2301      	movs	r3, #1
 80039a0:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    }
 80039a4:	bd10      	pop	{r4, pc}

080039a6 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE>:
     *
     * @param [out] last Result, the address of the actual instance of the Widget.
     */
    virtual void getLastChild(int16_t /*x*/, int16_t /*y*/, Drawable** last)
    {
        if (isVisible() && isTouchable())
 80039a6:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 80039aa:	b11a      	cbz	r2, 80039b4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
 80039ac:	f890 2024 	ldrb.w	r2, [r0, #36]	@ 0x24
 80039b0:	b102      	cbz	r2, 80039b4 <_ZN8touchgfx6Widget12getLastChildEssPPNS_8DrawableE+0xe>
        {
            *last = this;
 80039b2:	6018      	str	r0, [r3, #0]
        }
    }
 80039b4:	4770      	bx	lr
	...

080039b8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE>:
    virtual bool updateFrame(const Handle handle, touchgfx::VideoWidget& widget)
 80039b8:	b510      	push	{r4, lr}
 80039ba:	4604      	mov	r4, r0
 80039bc:	4610      	mov	r0, r2
        assert(handle < no_streams);
 80039be:	b129      	cbz	r1, 80039cc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x14>
 80039c0:	4b13      	ldr	r3, [pc, #76]	@ (8003a10 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x58>)
 80039c2:	21d0      	movs	r1, #208	@ 0xd0
 80039c4:	4a13      	ldr	r2, [pc, #76]	@ (8003a14 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x5c>)
 80039c6:	4814      	ldr	r0, [pc, #80]	@ (8003a18 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x60>)
 80039c8:	f01d fea6 	bl	8021718 <__assert_func>
        if (stream.isPlaying)
 80039cc:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 80039d0:	b133      	cbz	r3, 80039e0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x28>
        return vSyncForFrame;
 80039d2:	4b12      	ldr	r3, [pc, #72]	@ (8003a1c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x64>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	f893 206b 	ldrb.w	r2, [r3, #107]	@ 0x6b
            stream.tickCount += HAL::getInstance()->getLCDRefreshCount();
 80039da:	6963      	ldr	r3, [r4, #20]
 80039dc:	4413      	add	r3, r2
 80039de:	6163      	str	r3, [r4, #20]
        if (stream.doInvalidateOnNextTick)
 80039e0:	f894 302b 	ldrb.w	r3, [r4, #43]	@ 0x2b
 80039e4:	b90b      	cbnz	r3, 80039ea <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x32>
        return true;
 80039e6:	2001      	movs	r0, #1
    }
 80039e8:	bd10      	pop	{r4, pc}
     *
     * @param [in] videoBuffer Video buffer.
     */
    void setVideoBuffer(uint8_t* const videoBuffer)
    {
        buffer = videoBuffer;
 80039ea:	68a3      	ldr	r3, [r4, #8]
 80039ec:	6303      	str	r3, [r0, #48]	@ 0x30
            widget.invalidate();
 80039ee:	6803      	ldr	r3, [r0, #0]
 80039f0:	695b      	ldr	r3, [r3, #20]
 80039f2:	4798      	blx	r3
            stream.doInvalidateOnNextTick = false;
 80039f4:	2300      	movs	r3, #0
            if (!stream.hasMoreFrames && !stream.repeat)
 80039f6:	f894 002c 	ldrb.w	r0, [r4, #44]	@ 0x2c
            stream.doInvalidateOnNextTick = false;
 80039fa:	f884 302b 	strb.w	r3, [r4, #43]	@ 0x2b
            if (!stream.hasMoreFrames && !stream.repeat)
 80039fe:	2800      	cmp	r0, #0
 8003a00:	d1f1      	bne.n	80039e6 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x2e>
 8003a02:	f894 302d 	ldrb.w	r3, [r4, #45]	@ 0x2d
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d1ee      	bne.n	80039e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
                stream.isPlaying = false;
 8003a0a:	f884 0029 	strb.w	r0, [r4, #41]	@ 0x29
 8003a0e:	e7eb      	b.n	80039e8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE11updateFrameEmRNS0_11VideoWidgetE+0x30>
 8003a10:	080232e0 	.word	0x080232e0
 8003a14:	08023d96 	.word	0x08023d96
 8003a18:	0802347e 	.word	0x0802347e
 8003a1c:	240253a8 	.word	0x240253a8

08003a20 <_ZN20TouchGFXGeneratedHAL8endFrameEv>:
{
 8003a20:	b570      	push	{r4, r5, r6, lr}
            if (stream.isPlaying || stream.isShowingOneFrame)
 8003a22:	4c1a      	ldr	r4, [pc, #104]	@ (8003a8c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x6c>)
 8003a24:	4605      	mov	r5, r0
    HAL::endFrame();
 8003a26:	f00b fba5 	bl	800f174 <_ZN8touchgfx3HAL8endFrameEv>
 8003a2a:	f894 3029 	ldrb.w	r3, [r4, #41]	@ 0x29
 8003a2e:	b913      	cbnz	r3, 8003a36 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x16>
 8003a30:	f894 302a 	ldrb.w	r3, [r4, #42]	@ 0x2a
 8003a34:	b1ab      	cbz	r3, 8003a62 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
    bool decodeForNextTick(Stream& stream)
    {
        // Running in UI thread

        // Compare tickCount/frameCount to frame_rate_ticks/frame_rate_video
        if ((stream.tickCount * stream.frame_rate_video) >= (stream.frame_rate_ticks * stream.frameCount))
 8003a36:	69e1      	ldr	r1, [r4, #28]
 8003a38:	e9d4 3205 	ldrd	r3, r2, [r4, #20]
 8003a3c:	4353      	muls	r3, r2
 8003a3e:	6922      	ldr	r2, [r4, #16]
 8003a40:	434a      	muls	r2, r1
 8003a42:	4293      	cmp	r3, r2
 8003a44:	d30d      	bcc.n	8003a62 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x42>
        {
            if (allowSkipFrames)
 8003a46:	f894 003c 	ldrb.w	r0, [r4, #60]	@ 0x3c
 8003a4a:	b138      	cbz	r0, 8003a5c <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x3c>
            {
                stream.skip_frames = (stream.tickCount * stream.frame_rate_video - stream.frame_rate_ticks * stream.frameCount) / stream.frame_rate_ticks;
 8003a4c:	1a9b      	subs	r3, r3, r2
 8003a4e:	fbb3 f2f1 	udiv	r2, r3, r1
                if (stream.skip_frames > 0)
 8003a52:	4299      	cmp	r1, r3
                {
                    stream.skip_frames--;
 8003a54:	bf98      	it	ls
 8003a56:	f102 32ff 	addls.w	r2, r2, #4294967295
 8003a5a:	6262      	str	r2, [r4, #36]	@ 0x24
                    stream.doDecode = true;
 8003a5c:	2301      	movs	r3, #1
 8003a5e:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
        firstDrawThisFrame = true;
 8003a62:	2301      	movs	r3, #1
        SEM_POST(semDecode);
 8003a64:	6c20      	ldr	r0, [r4, #64]	@ 0x40
        firstDrawThisFrame = true;
 8003a66:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        SEM_POST(semDecode);
 8003a6a:	f009 f809 	bl	800ca80 <osSemaphoreRelease>
        if (uiHasMutex)
 8003a6e:	f894 303e 	ldrb.w	r3, [r4, #62]	@ 0x3e
 8003a72:	b12b      	cbz	r3, 8003a80 <_ZN20TouchGFXGeneratedHAL8endFrameEv+0x60>
            MUTEX_UNLOCK(mutexBuffers);
 8003a74:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003a76:	f008 ff6e 	bl	800c956 <osMutexRelease>
            uiHasMutex = false;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
    dma.start();
 8003a80:	6868      	ldr	r0, [r5, #4]
 8003a82:	6803      	ldr	r3, [r0, #0]
}
 8003a84:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    dma.start();
 8003a88:	691b      	ldr	r3, [r3, #16]
 8003a8a:	4718      	bx	r3
 8003a8c:	2400b030 	.word	0x2400b030

08003a90 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv>:
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003a90:	4b04      	ldr	r3, [pc, #16]	@ (8003aa4 <_ZN20TouchGFXGeneratedHAL17disableInterruptsEv+0x14>)
 8003a92:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003a96:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  __ASM volatile ("dsb 0xF":::"memory");
 8003a9a:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8003a9e:	f3bf 8f6f 	isb	sy
}
 8003aa2:	4770      	bx	lr
 8003aa4:	e000e100 	.word	0xe000e100

08003aa8 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv>:
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003aa8:	4b02      	ldr	r3, [pc, #8]	@ (8003ab4 <_ZN20TouchGFXGeneratedHAL16enableInterruptsEv+0xc>)
 8003aaa:	f04f 6280 	mov.w	r2, #67108864	@ 0x4000000
 8003aae:	609a      	str	r2, [r3, #8]
}
 8003ab0:	4770      	bx	lr
 8003ab2:	bf00      	nop
 8003ab4:	e000e100 	.word	0xe000e100

08003ab8 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE>:
    virtual Handle registerVideoWidget(touchgfx::VideoWidget& widget)
 8003ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003aba:	4603      	mov	r3, r0
    {
        // Running in UI thread

        for (uint32_t i = 0; i < no_streams; i++)
        {
            if (streams[i].isActive == false)
 8003abc:	f890 0028 	ldrb.w	r0, [r0, #40]	@ 0x28
 8003ac0:	b9d8      	cbnz	r0, 8003afa <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x42>
            {
                // Reset stream parameters
                streams[i] = Stream();
 8003ac2:	f44f 7280 	mov.w	r2, #256	@ 0x100
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ac6:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
        streams[handle].isActive = true;
 8003ac8:	2501      	movs	r5, #1
                streams[i] = Stream();
 8003aca:	60d8      	str	r0, [r3, #12]
 8003acc:	859a      	strh	r2, [r3, #44]	@ 0x2c
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ace:	f506 128c 	add.w	r2, r6, #1146880	@ 0x118000
                streams[i] = Stream();
 8003ad2:	6118      	str	r0, [r3, #16]
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ad4:	f502 52a0 	add.w	r2, r2, #5120	@ 0x1400
                streams[i] = Stream();
 8003ad8:	6158      	str	r0, [r3, #20]
 8003ada:	6198      	str	r0, [r3, #24]
 8003adc:	61d8      	str	r0, [r3, #28]
 8003ade:	6218      	str	r0, [r3, #32]
 8003ae0:	6258      	str	r0, [r3, #36]	@ 0x24
        streams[handle].isActive = true;
 8003ae2:	629d      	str	r5, [r3, #40]	@ 0x28
                streams[i] = Stream();
 8003ae4:	f883 002e 	strb.w	r0, [r3, #46]	@ 0x2e
        if (topBufferRGB + sizeOfOneDecodeBuffer > (bufferRGB + sizeBufferRGB))
 8003ae8:	e9d3 470c 	ldrd	r4, r7, [r3, #48]	@ 0x30
 8003aec:	443c      	add	r4, r7
 8003aee:	42a2      	cmp	r2, r4
 8003af0:	d90a      	bls.n	8003b08 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x50>
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003af2:	4b0b      	ldr	r3, [pc, #44]	@ (8003b20 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x68>)
 8003af4:	2152      	movs	r1, #82	@ 0x52
 8003af6:	4a0b      	ldr	r2, [pc, #44]	@ (8003b24 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x6c>)
 8003af8:	e003      	b.n	8003b02 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x4a>

                return static_cast<VideoController::Handle>(i);
            }
        }

        assert(0 && "Unable to find free video stream handle!");
 8003afa:	4b0b      	ldr	r3, [pc, #44]	@ (8003b28 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x70>)
 8003afc:	f240 11c5 	movw	r1, #453	@ 0x1c5
 8003b00:	4a0a      	ldr	r2, [pc, #40]	@ (8003b2c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x74>)
            assert(0 && "registerVideoWidget: Unable to allocate RGB buffer!");
 8003b02:	480b      	ldr	r0, [pc, #44]	@ (8003b30 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE19registerVideoWidgetERNS0_11VideoWidgetE+0x78>)
 8003b04:	f01d fe08 	bl	8021718 <__assert_func>
        decodeBuffers[handle] = (uint32_t*)topBufferRGB;
 8003b08:	609e      	str	r6, [r3, #8]
        topBufferRGB += sizeOfOneDecodeBuffer;
 8003b0a:	639a      	str	r2, [r3, #56]	@ 0x38
     * @param height Height of the videoBuffer in pixels
     */
    void setVideoBufferFormat(Bitmap::BitmapFormat bufferFormat, int16_t width, int16_t height)
    {
        format = bufferFormat;
        bufferWidth = width;
 8003b0c:	f44f 7348 	mov.w	r3, #800	@ 0x320
        format = bufferFormat;
 8003b10:	f881 5034 	strb.w	r5, [r1, #52]	@ 0x34
        bufferWidth = width;
 8003b14:	86cb      	strh	r3, [r1, #54]	@ 0x36
        bufferHeight = height;
 8003b16:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
        buffer = videoBuffer;
 8003b1a:	6308      	str	r0, [r1, #48]	@ 0x30
        bufferHeight = height;
 8003b1c:	870b      	strh	r3, [r1, #56]	@ 0x38
    }
 8003b1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003b20:	080240ee 	.word	0x080240ee
 8003b24:	08024129 	.word	0x08024129
 8003b28:	08023f37 	.word	0x08023f37
 8003b2c:	08023f67 	.word	0x08023f67
 8003b30:	0802347e 	.word	0x0802347e

08003b34 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>:
        : widgetWidth(0)
 8003b34:	2300      	movs	r3, #0
 * @see AbstractPainter
 */
class AbstractPainterRGB888 : public AbstractPainter
{
public:
    AbstractPainterRGB888()
 8003b36:	b570      	push	{r4, r5, r6, lr}
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 8003b38:	4e12      	ldr	r6, [pc, #72]	@ (8003b84 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x50>)
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	8083      	strh	r3, [r0, #4]
        : AbstractPainter()
 8003b3e:	4b12      	ldr	r3, [pc, #72]	@ (8003b88 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x54>)
 8003b40:	6003      	str	r3, [r0, #0]
 8003b42:	6833      	ldr	r3, [r6, #0]
 8003b44:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8003b48:	b10a      	cbz	r2, 8003b4e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1a>
 8003b4a:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8003b4c:	b900      	cbnz	r0, 8003b50 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x1c>
        return instance->lcdRef;
 8003b4e:	6898      	ldr	r0, [r3, #8]
     *
     * @return True if the format matches the framebuffer format, false otherwise.
     */
    FORCE_INLINE_FUNCTION static bool compatibleFramebuffer(Bitmap::BitmapFormat format)
    {
        bool compat = HAL::lcd().framebufferFormat() == format;
 8003b50:	6803      	ldr	r3, [r0, #0]
 8003b52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b54:	4798      	blx	r3
 8003b56:	1e43      	subs	r3, r0, #1
 8003b58:	425d      	negs	r5, r3
 8003b5a:	415d      	adcs	r5, r3
        return auxiliaryLCD;
 8003b5c:	6833      	ldr	r3, [r6, #0]
 8003b5e:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
        if (HAL::getInstance()->getAuxiliaryLCD())
 8003b60:	b130      	cbz	r0, 8003b70 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x3c>
        {
            compat |= HAL::getInstance()->getAuxiliaryLCD()->framebufferFormat() == format;
 8003b62:	6803      	ldr	r3, [r0, #0]
 8003b64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003b66:	4798      	blx	r3
 8003b68:	2801      	cmp	r0, #1
 8003b6a:	bf08      	it	eq
 8003b6c:	f045 0501 	orreq.w	r5, r5, #1
    {
        assert(compatibleFramebuffer(Bitmap::RGB888) && "The chosen painter only works with RGB888 displays");
 8003b70:	b92d      	cbnz	r5, 8003b7e <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x4a>
 8003b72:	4b06      	ldr	r3, [pc, #24]	@ (8003b8c <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x58>)
 8003b74:	2127      	movs	r1, #39	@ 0x27
 8003b76:	4a06      	ldr	r2, [pc, #24]	@ (8003b90 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x5c>)
 8003b78:	4806      	ldr	r0, [pc, #24]	@ (8003b94 <_ZN8touchgfx21AbstractPainterRGB888C1Ev+0x60>)
 8003b7a:	f01d fdcd 	bl	8021718 <__assert_func>
    }
 8003b7e:	4620      	mov	r0, r4
 8003b80:	bd70      	pop	{r4, r5, r6, pc}
 8003b82:	bf00      	nop
 8003b84:	240253a8 	.word	0x240253a8
 8003b88:	080243dc 	.word	0x080243dc
 8003b8c:	080242cc 	.word	0x080242cc
 8003b90:	0802432a 	.word	0x0802432a
 8003b94:	08024363 	.word	0x08024363

08003b98 <_ZN8touchgfx14VectorRenderer11getInstanceEv>:
{
 8003b98:	b570      	push	{r4, r5, r6, lr}
    static CWRVectorRendererRGB888 renderer;
 8003b9a:	4e24      	ldr	r6, [pc, #144]	@ (8003c2c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x94>)
 8003b9c:	6835      	ldr	r5, [r6, #0]
 8003b9e:	f3bf 8f5b 	dmb	ish
 8003ba2:	f015 0501 	ands.w	r5, r5, #1
 8003ba6:	d13f      	bne.n	8003c28 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
 8003ba8:	4630      	mov	r0, r6
 8003baa:	f01d fa3e 	bl	802102a <__cxa_guard_acquire>
 8003bae:	2800      	cmp	r0, #0
 8003bb0:	d03a      	beq.n	8003c28 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x90>
class CWRVectorRenderer : public VectorRenderer
 8003bb2:	4c1f      	ldr	r4, [pc, #124]	@ (8003c30 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003bb4:	4b1f      	ldr	r3, [pc, #124]	@ (8003c34 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x9c>)
 8003bb6:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 8003bba:	6125      	str	r5, [r4, #16]
 8003bbc:	84e5      	strh	r5, [r4, #38]	@ 0x26
 8003bbe:	62a5      	str	r5, [r4, #40]	@ 0x28
 8003bc0:	85a5      	strh	r5, [r4, #44]	@ 0x2c
 8003bc2:	e9c4 3500 	strd	r3, r5, [r4]
 8003bc6:	e9c4 5502 	strd	r5, r5, [r4, #8]
 8003bca:	f010 ffc4 	bl	8014b56 <_ZN8touchgfx9Matrix3x3C1Ev>
    class CanvasWidgetProxy : public CanvasWidget
 8003bce:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003bd2:	f00d fd0d 	bl	80115f0 <_ZN8touchgfx12CanvasWidgetC1Ev>
 8003bd6:	4b18      	ldr	r3, [pc, #96]	@ (8003c38 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa0>)
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bd8:	4620      	mov	r0, r4
    class CanvasWidgetProxy : public CanvasWidget
 8003bda:	65a3      	str	r3, [r4, #88]	@ 0x58
class CWRVectorRendererRGB888 : public CWRVectorRenderer
 8003bdc:	4b17      	ldr	r3, [pc, #92]	@ (8003c3c <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa4>)
 8003bde:	f840 3b84 	str.w	r3, [r0], #132
     * Initializes a new instance of the PainterRGB888 class.
     *
     * @param  color (Optional) the color, default is black.
     */
    PainterRGB888(colortype color = 0)
        : AbstractPainterRGB888(), AbstractPainterColor(color)
 8003be2:	f7ff ffa7 	bl	8003b34 <_ZN8touchgfx21AbstractPainterRGB888C1Ev>
 8003be6:	4b16      	ldr	r3, [pc, #88]	@ (8003c40 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xa8>)
 8003be8:	4816      	ldr	r0, [pc, #88]	@ (8003c44 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xac>)
 8003bea:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
 8003bee:	3324      	adds	r3, #36	@ 0x24
     *
     * @param  color The color.
     */
    virtual void setColor(colortype color)
    {
        painterColor = color;
 8003bf0:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 8003bf4:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
class AbstractPainterLinearGradient : public AbstractPainter
{
public:
    /** Constructor. */
    AbstractPainterLinearGradient()
        : AbstractPainter(),
 8003bf8:	2364      	movs	r3, #100	@ 0x64
 8003bfa:	f8c4 509c 	str.w	r5, [r4, #156]	@ 0x9c
 8003bfe:	f8c4 50a8 	str.w	r5, [r4, #168]	@ 0xa8
          coord0(0), coord1(100), texture(0), isSolid(false), isVertical(false), isHorizontal(false), clSlope(0.0f), clOffset(0.0f), horizontalDistance(0.0f), deltaColor(0.0f)
 8003c02:	e9c4 3528 	strd	r3, r5, [r4, #160]	@ 0xa0
 8003c06:	2300      	movs	r3, #0
 8003c08:	f8c4 30ac 	str.w	r3, [r4, #172]	@ 0xac
 8003c0c:	f8c4 30b0 	str.w	r3, [r4, #176]	@ 0xb0
 8003c10:	f8c4 30b4 	str.w	r3, [r4, #180]	@ 0xb4
 8003c14:	f8c4 30b8 	str.w	r3, [r4, #184]	@ 0xb8
 * An abstract class for creating painter classes for drawing canvas widgets. All canvas widgets
 * need a painter to fill the shape drawn with a CanvasWidgetRenderer. The painter must provide
 * the color of a pixel on a given coordinate, which will the be blended into the framebuffer
 * depending on the position of the canvas widget and the transparency of the given pixel.
 */
class PainterRGB888LinearGradient : public AbstractPainterLinearGradient
 8003c18:	4b0b      	ldr	r3, [pc, #44]	@ (8003c48 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0xb0>)
 8003c1a:	f8c4 3098 	str.w	r3, [r4, #152]	@ 0x98
 8003c1e:	f01d fd99 	bl	8021754 <atexit>
 8003c22:	4630      	mov	r0, r6
 8003c24:	f01d fa0d 	bl	8021042 <__cxa_guard_release>
}
 8003c28:	4801      	ldr	r0, [pc, #4]	@ (8003c30 <_ZN8touchgfx14VectorRenderer11getInstanceEv+0x98>)
 8003c2a:	bd70      	pop	{r4, r5, r6, pc}
 8003c2c:	2400af70 	.word	0x2400af70
 8003c30:	2400af74 	.word	0x2400af74
 8003c34:	080251ac 	.word	0x080251ac
 8003c38:	080243fc 	.word	0x080243fc
 8003c3c:	08024474 	.word	0x08024474
 8003c40:	080251f8 	.word	0x080251f8
 8003c44:	080036fd 	.word	0x080036fd
 8003c48:	08025230 	.word	0x08025230

08003c4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>:
    void decoderTaskEntry()
 8003c4c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8003c50:	4604      	mov	r4, r0
                    stream.doInvalidateOnNextTick = true;
 8003c52:	2601      	movs	r6, #1
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c54:	f44f 6716 	mov.w	r7, #2400	@ 0x960
            SEM_WAIT(semDecode);
 8003c58:	f04f 31ff 	mov.w	r1, #4294967295
 8003c5c:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 8003c5e:	f008 fee3 	bl	800ca28 <osSemaphoreAcquire>
            MUTEX_LOCK(mutexBuffers);
 8003c62:	f04f 31ff 	mov.w	r1, #4294967295
 8003c66:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003c68:	f008 fe52 	bl	800c910 <osMutexAcquire>
                if (stream.doDecode)
 8003c6c:	f894 302e 	ldrb.w	r3, [r4, #46]	@ 0x2e
 8003c70:	b343      	cbz	r3, 8003cc4 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x78>
                    MJPEGDecoder* const decoder = mjpegDecoders[i];
 8003c72:	6865      	ldr	r5, [r4, #4]
                    if (stream.seek_to_frame > 0)
 8003c74:	f8d4 8020 	ldr.w	r8, [r4, #32]
                        decoder->gotoFrame(stream.seek_to_frame);
 8003c78:	682b      	ldr	r3, [r5, #0]
                    stream.doInvalidateOnNextTick = true;
 8003c7a:	f884 602b 	strb.w	r6, [r4, #43]	@ 0x2b
                    if (stream.seek_to_frame > 0)
 8003c7e:	f1b8 0f00 	cmp.w	r8, #0
 8003c82:	d023      	beq.n	8003ccc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x80>
                        decoder->gotoFrame(stream.seek_to_frame);
 8003c84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c86:	4641      	mov	r1, r8
 8003c88:	4628      	mov	r0, r5
 8003c8a:	4798      	blx	r3
                        stream.seek_to_frame = 0;
 8003c8c:	2300      	movs	r3, #0
 8003c8e:	6223      	str	r3, [r4, #32]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003c90:	682b      	ldr	r3, [r5, #0]
 8003c92:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8003c96:	9700      	str	r7, [sp, #0]
 8003c98:	4628      	mov	r0, r5
 8003c9a:	f8d3 8014 	ldr.w	r8, [r3, #20]
 8003c9e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8003ca2:	68a1      	ldr	r1, [r4, #8]
 8003ca4:	47c0      	blx	r8
                    stream.frameCount++;
 8003ca6:	6923      	ldr	r3, [r4, #16]
                    stream.hasMoreFrames = decoder->decodeNextFrame((uint8_t*)decodeBuffers[i], width, height, stride);
 8003ca8:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c
                    stream.frameCount++;
 8003cac:	3301      	adds	r3, #1
 8003cae:	6123      	str	r3, [r4, #16]
                    if (stream.hasMoreFrames)
 8003cb0:	b1f0      	cbz	r0, 8003cf0 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xa4>
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003cb2:	682b      	ldr	r3, [r5, #0]
 8003cb4:	4628      	mov	r0, r5
 8003cb6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cb8:	4798      	blx	r3
 8003cba:	3801      	subs	r0, #1
                    stream.doDecode = false;
 8003cbc:	2300      	movs	r3, #0
                        stream.frameNumber = decoder->getCurrentFrameNumber() - 1; // Points to frame after this
 8003cbe:	60e0      	str	r0, [r4, #12]
                    stream.doDecode = false;
 8003cc0:	f884 302e 	strb.w	r3, [r4, #46]	@ 0x2e
            MUTEX_UNLOCK(mutexBuffers);
 8003cc4:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 8003cc6:	f008 fe46 	bl	800c956 <osMutexRelease>
        while (1)
 8003cca:	e7c5      	b.n	8003c58 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0xc>
                        if (stream.skip_frames > 0)
 8003ccc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8003cce:	2a00      	cmp	r2, #0
 8003cd0:	d0de      	beq.n	8003c90 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
                            decoder->gotoFrame(decoder->getCurrentFrameNumber() + stream.skip_frames);
 8003cd2:	4628      	mov	r0, r5
 8003cd4:	e9d3 9309 	ldrd	r9, r3, [r3, #36]	@ 0x24
 8003cd8:	4798      	blx	r3
 8003cda:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8003cdc:	4401      	add	r1, r0
 8003cde:	4628      	mov	r0, r5
 8003ce0:	47c8      	blx	r9
                            stream.frameCount += stream.skip_frames;
 8003ce2:	6923      	ldr	r3, [r4, #16]
 8003ce4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
                            stream.skip_frames = 0;
 8003ce6:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
                            stream.frameCount += stream.skip_frames;
 8003cea:	4413      	add	r3, r2
 8003cec:	6123      	str	r3, [r4, #16]
 8003cee:	e7cf      	b.n	8003c90 <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x44>
 8003cf0:	2001      	movs	r0, #1
 8003cf2:	e7e3      	b.n	8003cbc <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv+0x70>

08003cf4 <videoTaskFunc>:
    }
}

extern "C" void videoTaskFunc(void* argument)
{
    videoController.decoderTaskEntry();
 8003cf4:	4801      	ldr	r0, [pc, #4]	@ (8003cfc <videoTaskFunc+0x8>)
{
 8003cf6:	b508      	push	{r3, lr}
    videoController.decoderTaskEntry();
 8003cf8:	f7ff ffa8 	bl	8003c4c <_ZN25DedicatedBufferControllerILm1ELm800ELm480ELm2400ELN8touchgfx6Bitmap12BitmapFormatE1EE16decoderTaskEntryEv>
 8003cfc:	2400b030 	.word	0x2400b030

08003d00 <_GLOBAL__sub_I_mjpegdecoder1>:
}
 8003d00:	b538      	push	{r3, r4, r5, lr}
HardwareMJPEGDecoder mjpegdecoder1;
 8003d02:	4814      	ldr	r0, [pc, #80]	@ (8003d54 <_GLOBAL__sub_I_mjpegdecoder1+0x54>)
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d04:	2500      	movs	r5, #0
 8003d06:	f7fe fbf3 	bl	80024f0 <_ZN20HardwareMJPEGDecoderC1Ev>
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d0a:	4c13      	ldr	r4, [pc, #76]	@ (8003d58 <_GLOBAL__sub_I_mjpegdecoder1+0x58>)
 8003d0c:	4b13      	ldr	r3, [pc, #76]	@ (8003d5c <_GLOBAL__sub_I_mjpegdecoder1+0x5c>)
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d0e:	462a      	mov	r2, r5
 8003d10:	4629      	mov	r1, r5
 8003d12:	2001      	movs	r0, #1
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d14:	6023      	str	r3, [r4, #0]
 8003d16:	f44f 7380 	mov.w	r3, #256	@ 0x100
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d1a:	63a5      	str	r5, [r4, #56]	@ 0x38
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d1c:	87a3      	strh	r3, [r4, #60]	@ 0x3c
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d1e:	85a3      	strh	r3, [r4, #44]	@ 0x2c
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d20:	f884 503e 	strb.w	r5, [r4, #62]	@ 0x3e
            doInvalidateOnNextTick(false), hasMoreFrames(false), repeat(true), doDecode(false) {}
 8003d24:	f884 502e 	strb.w	r5, [r4, #46]	@ 0x2e
        : VideoController(), bufferRGB(0), sizeBufferRGB(0), topBufferRGB(0),
 8003d28:	e9c4 550c 	strd	r5, r5, [r4, #48]	@ 0x30
          allowSkipFrames(false), firstDrawThisFrame(true), uiHasMutex(false), semDecode(0), mutexBuffers(0)
 8003d2c:	e9c4 5510 	strd	r5, r5, [r4, #64]	@ 0x40
        memset(decodeBuffers, 0, sizeof(decodeBuffers));
 8003d30:	e9c4 5501 	strd	r5, r5, [r4, #4]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d34:	e9c4 5503 	strd	r5, r5, [r4, #12]
 8003d38:	e9c4 5505 	strd	r5, r5, [r4, #20]
            seek_to_frame(0), skip_frames(0),
 8003d3c:	e9c4 5507 	strd	r5, r5, [r4, #28]
        Stream() : frameNumber(0), frameCount(0), tickCount(0), frame_rate_video(0), frame_rate_ticks(0),
 8003d40:	e9c4 5509 	strd	r5, r5, [r4, #36]	@ 0x24
        semDecode = SEM_CREATE(); // Binary semaphore
 8003d44:	f008 fe26 	bl	800c994 <osSemaphoreNew>
 8003d48:	6420      	str	r0, [r4, #64]	@ 0x40
        mutexBuffers = MUTEX_CREATE();
 8003d4a:	4628      	mov	r0, r5
 8003d4c:	f008 fdab 	bl	800c8a6 <osMutexNew>
 8003d50:	6460      	str	r0, [r4, #68]	@ 0x44
}
 8003d52:	bd38      	pop	{r3, r4, r5, pc}
 8003d54:	2400b078 	.word	0x2400b078
 8003d58:	2400b030 	.word	0x2400b030
 8003d5c:	080244c0 	.word	0x080244c0

08003d60 <_ZN23ApplicationFontProviderD1Ev>:
    static const touchgfx::FontId MODE = 0;     // verdana_20_4bpp
    static const touchgfx::FontId KEYBOARD = 0; // verdana_20_4bpp
    static const uint16_t NUMBER_OF_FONTS = 3;
};

class ApplicationFontProvider : public touchgfx::FontProvider
 8003d60:	4770      	bx	lr

08003d62 <_ZN23ApplicationFontProvider7getFontEt>:
#include <fonts/ApplicationFontProvider.hpp>
#include <fonts/GeneratedFont.hpp>
#include <texts/TypedTextDatabase.hpp>

touchgfx::Font* ApplicationFontProvider::getFont(touchgfx::FontId typography)
{
 8003d62:	b508      	push	{r3, lr}
    switch (typography)
 8003d64:	2905      	cmp	r1, #5
 8003d66:	d810      	bhi.n	8003d8a <_ZN23ApplicationFontProvider7getFontEt+0x28>
 8003d68:	e8df f001 	tbb	[pc, r1]
 8003d6c:	0b07030b 	.word	0x0b07030b
 8003d70:	0b0b      	.short	0x0b0b
    case Typography::DEFAULT:
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    case Typography::LARGE:
        // verdana_40_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[1]);
 8003d72:	f000 fb69 	bl	8004448 <_ZN17TypedTextDatabase8getFontsEv>
 8003d76:	6840      	ldr	r0, [r0, #4]
        // verdana_20_4bpp
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
    default:
        return 0;
    }
}
 8003d78:	bd08      	pop	{r3, pc}
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[2]);
 8003d7a:	f000 fb65 	bl	8004448 <_ZN17TypedTextDatabase8getFontsEv>
 8003d7e:	6880      	ldr	r0, [r0, #8]
 8003d80:	e7fa      	b.n	8003d78 <_ZN23ApplicationFontProvider7getFontEt+0x16>
        return const_cast<touchgfx::Font*>(TypedTextDatabase::getFonts()[0]);
 8003d82:	f000 fb61 	bl	8004448 <_ZN17TypedTextDatabase8getFontsEv>
 8003d86:	6800      	ldr	r0, [r0, #0]
 8003d88:	e7f6      	b.n	8003d78 <_ZN23ApplicationFontProvider7getFontEt+0x16>
    switch (typography)
 8003d8a:	2000      	movs	r0, #0
 8003d8c:	e7f4      	b.n	8003d78 <_ZN23ApplicationFontProvider7getFontEt+0x16>

08003d8e <_ZN23ApplicationFontProviderD0Ev>:
 8003d8e:	b510      	push	{r4, lr}
 8003d90:	4604      	mov	r4, r0
 8003d92:	2104      	movs	r1, #4
 8003d94:	f01d f947 	bl	8021026 <_ZdlPvj>
 8003d98:	4620      	mov	r0, r4
 8003d9a:	bd10      	pop	{r4, pc}

08003d9c <_ZN14BitmapDatabase11getInstanceEv>:
namespace BitmapDatabase
{
const touchgfx::Bitmap::BitmapData* getInstance()
{
    return bitmap_database;
}
 8003d9c:	4800      	ldr	r0, [pc, #0]	@ (8003da0 <_ZN14BitmapDatabase11getInstanceEv+0x4>)
 8003d9e:	4770      	bx	lr
 8003da0:	08024510 	.word	0x08024510

08003da4 <_ZN14BitmapDatabase15getInstanceSizeEv>:

uint16_t getInstanceSize()
{
    return (uint16_t)(sizeof(bitmap_database) / sizeof(touchgfx::Bitmap::BitmapData));
}
 8003da4:	2009      	movs	r0, #9
 8003da6:	4770      	bx	lr

08003da8 <_ZNK8touchgfx4Font8getGlyphEt>:
     *
     * @return A pointer to the glyph node or null if the glyph was not found.
     *
     * @see TextProvider::getNextLigature
     */
    virtual const GlyphNode* getGlyph(Unicode::UnicodeChar unicode) const
 8003da8:	b513      	push	{r0, r1, r4, lr}
 8003daa:	2400      	movs	r4, #0
    {
        if (unicode == 0)
 8003dac:	b151      	cbz	r1, 8003dc4 <_ZNK8touchgfx4Font8getGlyphEt+0x1c>
        {
            return 0;
        }
        const uint8_t* dummyPixelDataPointer = 0;
        uint8_t bitsPerPixelDummy = 0;
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003dae:	6803      	ldr	r3, [r0, #0]
 8003db0:	aa01      	add	r2, sp, #4
        const uint8_t* dummyPixelDataPointer = 0;
 8003db2:	9401      	str	r4, [sp, #4]
        uint8_t bitsPerPixelDummy = 0;
 8003db4:	f88d 4003 	strb.w	r4, [sp, #3]
        const GlyphNode* glyph = getGlyph(unicode, dummyPixelDataPointer, bitsPerPixelDummy);
 8003db8:	689c      	ldr	r4, [r3, #8]
 8003dba:	f10d 0303 	add.w	r3, sp, #3
 8003dbe:	47a0      	blx	r4
        return glyph;
    }
 8003dc0:	b002      	add	sp, #8
 8003dc2:	bd10      	pop	{r4, pc}
            return 0;
 8003dc4:	4608      	mov	r0, r1
 8003dc6:	e7fb      	b.n	8003dc0 <_ZNK8touchgfx4Font8getGlyphEt+0x18>

08003dc8 <_ZNK8touchgfx4Font15getFallbackCharEv>:
     * @return The default character for the typography in case no glyph is available.
     */
    virtual Unicode::UnicodeChar getFallbackChar() const
    {
        return fallbackCharacter;
    }
 8003dc8:	89c0      	ldrh	r0, [r0, #14]
 8003dca:	4770      	bx	lr

08003dcc <_ZNK8touchgfx4Font15getEllipsisCharEv>:
     * @see TextArea::setWideTextAction
     */
    virtual Unicode::UnicodeChar getEllipsisChar() const
    {
        return ellipsisCharacter;
    }
 8003dcc:	8a00      	ldrh	r0, [r0, #16]
 8003dce:	4770      	bx	lr

08003dd0 <_ZNK8touchgfx4Font11getBaselineEv>:
     *       getHeight for this.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getBaseline() const
    {
        return baselineHeight;
    }
 8003dd0:	88c0      	ldrh	r0, [r0, #6]
 8003dd2:	4770      	bx	lr

08003dd4 <_ZNK8touchgfx4Font9getHeightEv>:
     * @return The font height.
     */
    FORCE_INLINE_FUNCTION virtual uint16_t getHeight() const
    {
        return fontHeight;
    }
 8003dd4:	8880      	ldrh	r0, [r0, #4]
 8003dd6:	4770      	bx	lr

08003dd8 <_ZNK8touchgfx4Font15getBitsPerPixelEv>:
     *
     * @return The number of bits used per pixel in this font.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getBitsPerPixel() const
    {
        return bPerPixel;
 8003dd8:	7a80      	ldrb	r0, [r0, #10]
    }
 8003dda:	f000 007f 	and.w	r0, r0, #127	@ 0x7f
 8003dde:	4770      	bx	lr

08003de0 <_ZNK8touchgfx4Font15getByteAlignRowEv>:
     *
     * @return True if each glyph row is stored byte aligned, false otherwise.
     */
    FORCE_INLINE_FUNCTION virtual uint8_t getByteAlignRow() const
    {
        return bAlignRow;
 8003de0:	7a80      	ldrb	r0, [r0, #10]
    }
 8003de2:	09c0      	lsrs	r0, r0, #7
 8003de4:	4770      	bx	lr

08003de6 <_ZNK8touchgfx4Font17isVectorBasedFontEv>:
     * @return True if this Font is vector based.
     */
    virtual bool isVectorBasedFont() const
    {
        return false;
    }
 8003de6:	2000      	movs	r0, #0
 8003de8:	4770      	bx	lr
	...

08003dec <_ZNK8touchgfx4Font14getScaleFactorEv>:
     * @return The scale factor
     */
    virtual float getScaleFactor() const
    {
        return 0;
    }
 8003dec:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8003df4 <_ZNK8touchgfx4Font14getScaleFactorEv+0x8>
 8003df0:	4770      	bx	lr
 8003df2:	bf00      	nop
 8003df4:	00000000 	.word	0x00000000

08003df8 <_ZN8touchgfx9TypedTextD1Ev>:
    }
 8003df8:	4770      	bx	lr

08003dfa <_ZN8touchgfx9TypedTextD0Ev>:
    virtual ~TypedText()
 8003dfa:	b510      	push	{r4, lr}
 8003dfc:	4604      	mov	r4, r0
    }
 8003dfe:	2108      	movs	r1, #8
 8003e00:	f01d f911 	bl	8021026 <_ZdlPvj>
 8003e04:	4620      	mov	r0, r4
 8003e06:	bd10      	pop	{r4, pc}

08003e08 <_ZN8touchgfx11Application19changeToStartScreenEv>:
     *       this is explicitly done in your
     *       FrontendApplication::changeToStartScreen().
     */
    virtual void changeToStartScreen()
    {
    }
 8003e08:	4770      	bx	lr

08003e0a <_ZN8touchgfx11Application15appSwitchScreenEh>:
     * @param screenId An id that maps to the desired screen.
     */
    virtual void appSwitchScreen(uint8_t screenId)
    {
        (void)screenId; // Unused variable
    }
 8003e0a:	4770      	bx	lr

08003e0c <_ZN8touchgfx11Application13requestRedrawERNS_4RectE>:
     *
     * @param [in,out] rect The Rect that must be redrawn.
     */
    virtual void requestRedraw(Rect& rect)
    {
        redraw = rect;
 8003e0c:	f500 7398 	add.w	r3, r0, #304	@ 0x130
 8003e10:	6808      	ldr	r0, [r1, #0]
 8003e12:	6849      	ldr	r1, [r1, #4]
 8003e14:	c303      	stmia	r3!, {r0, r1}
    }
 8003e16:	4770      	bx	lr

08003e18 <_ZN8touchgfx10Transition8tearDownEv>:
     * Tears down the Animation. Called before the destructor is called, when the
     * application changes the transition.
     */
    virtual void tearDown()
    {
    }
 8003e18:	4770      	bx	lr

08003e1a <_ZN8touchgfx10Transition4initEv>:
     * Initializes the transition. Called after the constructor is called, when the
     * application changes the transition.
     */
    virtual void init()
    {
    }
 8003e1a:	4770      	bx	lr

08003e1c <_ZN8touchgfx10Transition18setScreenContainerERNS_9ContainerE>:
     *
     * @param [in] cont The Container the transition should have access to.
     */
    virtual void setScreenContainer(Container& cont)
    {
        screenContainer = &cont;
 8003e1c:	6041      	str	r1, [r0, #4]
    }
 8003e1e:	4770      	bx	lr

08003e20 <_ZN23FrontendApplicationBaseD1Ev>:

class FrontendApplicationBase : public touchgfx::MVPApplication
{
public:
    FrontendApplicationBase(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplicationBase() { }
 8003e20:	4770      	bx	lr
	...

08003e24 <_ZN23FrontendApplicationBase19changeToStartScreenEv>:
 *
 * @note The member function to call must return void. The function can have zero, one, two or
 *       three arguments of any type.
 */
template <class dest_type>
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e24:	4b06      	ldr	r3, [pc, #24]	@ (8003e40 <_ZN23FrontendApplicationBase19changeToStartScreenEv+0x1c>)
 8003e26:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 8003e2a:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 8003e2e:	2300      	movs	r3, #0
 8003e30:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
// WelcomeScreen

void FrontendApplicationBase::gotoWelcomeScreenScreenNoTransition()
{
    transitionCallback = touchgfx::Callback<FrontendApplicationBase>(this, &FrontendApplicationBase::gotoWelcomeScreenScreenNoTransitionImpl);
    pendingScreenTransitionCallback = &transitionCallback;
 8003e34:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 8003e38:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140

    virtual void changeToStartScreen()
    {
        gotoWelcomeScreenScreenNoTransition();
    }
 8003e3c:	4770      	bx	lr
 8003e3e:	bf00      	nop
 8003e40:	08003ee5 	.word	0x08003ee5

08003e44 <_ZN8touchgfx12NoTransition15handleTickEventEv>:
{
public:
    /** Indicates that the transition is done after the first tick. */
    virtual void handleTickEvent()
    {
        done = true;
 8003e44:	2301      	movs	r3, #1
 8003e46:	7203      	strb	r3, [r0, #8]
    }
 8003e48:	4770      	bx	lr

08003e4a <_ZN8touchgfx12NoTransitionD1Ev>:
class NoTransition : public Transition
 8003e4a:	4770      	bx	lr

08003e4c <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED1Ev>:
 8003e4c:	4770      	bx	lr

08003e4e <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvE7executeEv>:

    /**
     * Calls the member function. Do not call execute unless isValid() returns true (ie. a
     * pointer to the object and the function has been set).
     */
    virtual void execute()
 8003e4e:	b410      	push	{r4}
    {
        (pobject->*pmemfun)();
 8003e50:	6841      	ldr	r1, [r0, #4]
    virtual void execute()
 8003e52:	4603      	mov	r3, r0
        (pobject->*pmemfun)();
 8003e54:	68c2      	ldr	r2, [r0, #12]
 8003e56:	689b      	ldr	r3, [r3, #8]
 8003e58:	1054      	asrs	r4, r2, #1
 8003e5a:	eb01 0062 	add.w	r0, r1, r2, asr #1
 8003e5e:	07d2      	lsls	r2, r2, #31
 8003e60:	bf48      	it	mi
 8003e62:	590a      	ldrmi	r2, [r1, r4]
    }
 8003e64:	f85d 4b04 	ldr.w	r4, [sp], #4
        (pobject->*pmemfun)();
 8003e68:	bf48      	it	mi
 8003e6a:	58d3      	ldrmi	r3, [r2, r3]
 8003e6c:	4718      	bx	r3

08003e6e <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv>:
    /**
     * Function to check whether the Callback has been initialized with values.
     *
     * @return true If the callback is valid (i.e. safe to call execute).
     */
    virtual bool isValid() const
 8003e6e:	4603      	mov	r3, r0
    {
        return (pobject != 0) && (pmemfun != 0);
 8003e70:	6840      	ldr	r0, [r0, #4]
 8003e72:	b130      	cbz	r0, 8003e82 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x14>
 8003e74:	689a      	ldr	r2, [r3, #8]
 8003e76:	b91a      	cbnz	r2, 8003e80 <_ZNK8touchgfx8CallbackI23FrontendApplicationBasevvvE7isValidEv+0x12>
 8003e78:	68d8      	ldr	r0, [r3, #12]
 8003e7a:	f000 0001 	and.w	r0, r0, #1
 8003e7e:	4770      	bx	lr
 8003e80:	2001      	movs	r0, #1
    }
 8003e82:	4770      	bx	lr

08003e84 <_ZN8touchgfx12NoTransitionD0Ev>:
 8003e84:	b510      	push	{r4, lr}
 8003e86:	4604      	mov	r4, r0
 8003e88:	210c      	movs	r1, #12
 8003e8a:	f01d f8cc 	bl	8021026 <_ZdlPvj>
 8003e8e:	4620      	mov	r0, r4
 8003e90:	bd10      	pop	{r4, pc}

08003e92 <_ZN8touchgfx8CallbackI23FrontendApplicationBasevvvED0Ev>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 8003e92:	b510      	push	{r4, lr}
 8003e94:	4604      	mov	r4, r0
 8003e96:	2110      	movs	r1, #16
 8003e98:	f01d f8c5 	bl	8021026 <_ZdlPvj>
 8003e9c:	4620      	mov	r0, r4
 8003e9e:	bd10      	pop	{r4, pc}

08003ea0 <_ZN23FrontendApplicationBaseD0Ev>:
    virtual ~FrontendApplicationBase() { }
 8003ea0:	b510      	push	{r4, lr}
 8003ea2:	4604      	mov	r4, r0
 8003ea4:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 8003ea8:	f01d f8bd 	bl	8021026 <_ZdlPvj>
 8003eac:	4620      	mov	r0, r4
 8003eae:	bd10      	pop	{r4, pc}

08003eb0 <_ZN8touchgfx10Transition10invalidateEv>:
    virtual void invalidate()
 8003eb0:	b510      	push	{r4, lr}
        Application::getInstance()->invalidate();
 8003eb2:	f00f fac3 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 8003eb6:	6803      	ldr	r3, [r0, #0]
    }
 8003eb8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        Application::getInstance()->invalidate();
 8003ebc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ebe:	4718      	bx	r3

08003ec0 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv>:
    /**
     * Handles the pending screen transition.
     *
     * Delegates the work to evaluatePendingScreenTransition()
     */
    virtual void handlePendingScreenTransition()
 8003ec0:	b510      	push	{r4, lr}
 8003ec2:	4604      	mov	r4, r0
     * Evaluates the pending Callback instances. If a callback is valid, it is executed and
     * a Screen transition is executed.
     */
    void evaluatePendingScreenTransition()
    {
        if (pendingScreenTransitionCallback && pendingScreenTransitionCallback->isValid())
 8003ec4:	f8d0 0140 	ldr.w	r0, [r0, #320]	@ 0x140
 8003ec8:	b158      	cbz	r0, 8003ee2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
 8003eca:	6803      	ldr	r3, [r0, #0]
 8003ecc:	68db      	ldr	r3, [r3, #12]
 8003ece:	4798      	blx	r3
 8003ed0:	b138      	cbz	r0, 8003ee2 <_ZN8touchgfx14MVPApplication29handlePendingScreenTransitionEv+0x22>
        {
            pendingScreenTransitionCallback->execute();
 8003ed2:	f8d4 0140 	ldr.w	r0, [r4, #320]	@ 0x140
 8003ed6:	6803      	ldr	r3, [r0, #0]
 8003ed8:	689b      	ldr	r3, [r3, #8]
 8003eda:	4798      	blx	r3
            pendingScreenTransitionCallback = 0;
 8003edc:	2300      	movs	r3, #0
 8003ede:	f8c4 3140 	str.w	r3, [r4, #320]	@ 0x140
    }
 8003ee2:	bd10      	pop	{r4, pc}

08003ee4 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv>:
}

void FrontendApplicationBase::gotoWelcomeScreenScreenNoTransitionImpl()
{
 8003ee4:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    touchgfx::makeTransition<WelcomeScreenView, WelcomeScreenPresenter, touchgfx::NoTransition, Model >(&currentScreen, &currentPresenter, frontendHeap, &currentTransition, &model);
 8003ee8:	e9d0 6a55 	ldrd	r6, sl, [r0, #340]	@ 0x154
{
 8003eec:	4607      	mov	r7, r0
 *         value as the old presenter due to memory reuse.
 */
template <class ScreenType, class PresenterType, class TransType, class ModelType>
PresenterType* makeTransition(Screen** currentScreen, Presenter** currentPresenter, MVPHeap& heap, Transition** currentTrans, ModelType* model)
{
    assert(sizeof(ScreenType) <= heap.screenStorage.element_size() && "View allocation error: Check that all views are added to FrontendHeap::ViewTypes");
 8003eee:	68b0      	ldr	r0, [r6, #8]
 8003ef0:	6803      	ldr	r3, [r0, #0]
 8003ef2:	6a1b      	ldr	r3, [r3, #32]
 8003ef4:	4798      	blx	r3
 8003ef6:	286b      	cmp	r0, #107	@ 0x6b
 8003ef8:	d805      	bhi.n	8003f06 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x22>
 8003efa:	4b44      	ldr	r3, [pc, #272]	@ (800400c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x128>)
 8003efc:	21a3      	movs	r1, #163	@ 0xa3
 8003efe:	4a44      	ldr	r2, [pc, #272]	@ (8004010 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
    assert(sizeof(PresenterType) <= heap.presenterStorage.element_size() && "Presenter allocation error: Check that all presenters are added to FrontendHeap::PresenterTypes");
 8003f00:	4844      	ldr	r0, [pc, #272]	@ (8004014 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x130>)
 8003f02:	f01d fc09 	bl	8021718 <__assert_func>
 8003f06:	6870      	ldr	r0, [r6, #4]
 8003f08:	6803      	ldr	r3, [r0, #0]
 8003f0a:	6a1b      	ldr	r3, [r3, #32]
 8003f0c:	4798      	blx	r3
 8003f0e:	280f      	cmp	r0, #15
 8003f10:	d803      	bhi.n	8003f1a <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x36>
 8003f12:	4b41      	ldr	r3, [pc, #260]	@ (8004018 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x134>)
 8003f14:	21a4      	movs	r1, #164	@ 0xa4
 8003f16:	4a3e      	ldr	r2, [pc, #248]	@ (8004010 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
 8003f18:	e7f2      	b.n	8003f00 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x1c>
    assert(sizeof(TransType) <= heap.transitionStorage.element_size() && "Transition allocation error: Check that all transitions are added to FrontendHeap::TransitionTypes");
 8003f1a:	68f0      	ldr	r0, [r6, #12]
 8003f1c:	6803      	ldr	r3, [r0, #0]
 8003f1e:	6a1b      	ldr	r3, [r3, #32]
 8003f20:	4798      	blx	r3
 8003f22:	280b      	cmp	r0, #11
 8003f24:	d803      	bhi.n	8003f2e <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x4a>
 8003f26:	4b3d      	ldr	r3, [pc, #244]	@ (800401c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x138>)
 8003f28:	21a5      	movs	r1, #165	@ 0xa5
 8003f2a:	4a39      	ldr	r2, [pc, #228]	@ (8004010 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x12c>)
 8003f2c:	e7e8      	b.n	8003f00 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x1c>
    if (*currentTrans)
 8003f2e:	f8df 90f4 	ldr.w	r9, [pc, #244]	@ 8004024 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x140>
    Application::getInstance()->clearAllTimerWidgets();
 8003f32:	f00f fa83 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>

    /** Clears all currently registered timer widgets. */

    void clearAllTimerWidgets()
    {
        timerWidgets.clear();
 8003f36:	3004      	adds	r0, #4
 8003f38:	f00f faa5 	bl	8013486 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
    if (*currentTrans)
 8003f3c:	f8d9 0000 	ldr.w	r0, [r9]
 8003f40:	b110      	cbz	r0, 8003f48 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x64>
        (*currentTrans)->tearDown();
 8003f42:	6803      	ldr	r3, [r0, #0]
 8003f44:	68db      	ldr	r3, [r3, #12]
 8003f46:	4798      	blx	r3
    if (*currentTrans)
 8003f48:	f8d9 0000 	ldr.w	r0, [r9]
 8003f4c:	b110      	cbz	r0, 8003f54 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x70>
        (*currentTrans)->~Transition();
 8003f4e:	6803      	ldr	r3, [r0, #0]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	4798      	blx	r3
    if (*currentScreen)
 8003f54:	f8df 80d0 	ldr.w	r8, [pc, #208]	@ 8004028 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x144>
 8003f58:	f8d8 0000 	ldr.w	r0, [r8]
 8003f5c:	b110      	cbz	r0, 8003f64 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x80>
        (*currentScreen)->tearDownScreen();
 8003f5e:	6803      	ldr	r3, [r0, #0]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4798      	blx	r3
    if (*currentPresenter)
 8003f64:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f68:	b110      	cbz	r0, 8003f70 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x8c>
        (*currentPresenter)->deactivate();
 8003f6a:	6803      	ldr	r3, [r0, #0]
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	4798      	blx	r3
    if (*currentScreen)
 8003f70:	f8d8 0000 	ldr.w	r0, [r8]
 8003f74:	b110      	cbz	r0, 8003f7c <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x98>
        (*currentScreen)->~Screen();
 8003f76:	6803      	ldr	r3, [r0, #0]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	4798      	blx	r3
    if (*currentPresenter)
 8003f7c:	f8d7 013c 	ldr.w	r0, [r7, #316]	@ 0x13c
 8003f80:	b110      	cbz	r0, 8003f88 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0xa4>
        (*currentPresenter)->~Presenter();
 8003f82:	6803      	ldr	r3, [r0, #0]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	4798      	blx	r3

    prepareTransition(currentScreen, currentPresenter, currentTrans);

    TransType* newTransition = new (&heap.transitionStorage.at<TransType>(0)) TransType;
 8003f88:	68f0      	ldr	r0, [r6, #12]
     * @return A typed reference to the object at the specified index.
     */
    template <typename T>
    T& at(const uint16_t index)
    {
        return *static_cast<T*>(element(index));
 8003f8a:	2100      	movs	r1, #0
        : screenContainer(0), done(false)
 8003f8c:	f04f 0b00 	mov.w	fp, #0
 8003f90:	6803      	ldr	r3, [r0, #0]
 8003f92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f94:	4798      	blx	r3
 8003f96:	4b22      	ldr	r3, [pc, #136]	@ (8004020 <_ZN23FrontendApplicationBase39gotoWelcomeScreenScreenNoTransitionImplEv+0x13c>)
 8003f98:	4604      	mov	r4, r0
 8003f9a:	f8c0 b004 	str.w	fp, [r0, #4]
 8003f9e:	f880 b008 	strb.w	fp, [r0, #8]
 8003fa2:	4659      	mov	r1, fp
 8003fa4:	6003      	str	r3, [r0, #0]
    ScreenType* newScreen = new (&heap.screenStorage.at<ScreenType>(0)) ScreenType;
 8003fa6:	68b0      	ldr	r0, [r6, #8]
 8003fa8:	6803      	ldr	r3, [r0, #0]
 8003faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fac:	4798      	blx	r3
 8003fae:	4605      	mov	r5, r0
 8003fb0:	f000 fcd2 	bl	8004958 <_ZN17WelcomeScreenViewC1Ev>
    PresenterType* newPresenter = new (&heap.presenterStorage.at<PresenterType>(0)) PresenterType(*newScreen);
 8003fb4:	6870      	ldr	r0, [r6, #4]
 8003fb6:	4659      	mov	r1, fp
 8003fb8:	6803      	ldr	r3, [r0, #0]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fbc:	4798      	blx	r3
 8003fbe:	4606      	mov	r6, r0
 8003fc0:	4629      	mov	r1, r5
 8003fc2:	f000 fca9 	bl	8004918 <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView>
    *currentTrans = newTransition;
    *currentPresenter = newPresenter;
    *currentScreen = newScreen;
    model->bind(newPresenter);
 8003fc6:	1d33      	adds	r3, r6, #4
    *currentPresenter = newPresenter;
 8003fc8:	f8c7 613c 	str.w	r6, [r7, #316]	@ 0x13c
    newScreen->setupScreen();
 8003fcc:	4628      	mov	r0, r5
    *currentTrans = newTransition;
 8003fce:	f8c9 4000 	str.w	r4, [r9]
    *currentScreen = newScreen;
 8003fd2:	f8c8 5000 	str.w	r5, [r8]
public:
    Model();

    void bind(ModelListener* listener)
    {
        modelListener = listener;
 8003fd6:	f8ca 3000 	str.w	r3, [sl]
    newScreen->setupScreen();
 8003fda:	682b      	ldr	r3, [r5, #0]
    
    virtual ~ModelListener() {}

    void bind(Model* m)
    {
        model = m;
 8003fdc:	f8c6 a008 	str.w	sl, [r6, #8]
 8003fe0:	68db      	ldr	r3, [r3, #12]
     *
     * @param [in] newPresenter The specific Presenter to be associated with the View.
     */
    void bind(T& newPresenter)
    {
        presenter = &newPresenter;
 8003fe2:	63ee      	str	r6, [r5, #60]	@ 0x3c
 8003fe4:	4798      	blx	r3
    newPresenter->activate();
 8003fe6:	6833      	ldr	r3, [r6, #0]
 8003fe8:	4630      	mov	r0, r6
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4798      	blx	r3
    newScreen->bindTransition(*newTransition);
 8003fee:	4621      	mov	r1, r4
 8003ff0:	4628      	mov	r0, r5
 8003ff2:	f011 fa09 	bl	8015408 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>
    newTransition->init();
 8003ff6:	6823      	ldr	r3, [r4, #0]
 8003ff8:	4620      	mov	r0, r4
 8003ffa:	691b      	ldr	r3, [r3, #16]
 8003ffc:	4798      	blx	r3
    newTransition->invalidate();
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	4620      	mov	r0, r4
 8004002:	695b      	ldr	r3, [r3, #20]
}
 8004004:	b001      	add	sp, #4
 8004006:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800400a:	4718      	bx	r3
 800400c:	080245d4 	.word	0x080245d4
 8004010:	08024662 	.word	0x08024662
 8004014:	08024740 	.word	0x08024740
 8004018:	08024795 	.word	0x08024795
 800401c:	08024838 	.word	0x08024838
 8004020:	08024950 	.word	0x08024950
 8004024:	240253f0 	.word	0x240253f0
 8004028:	240253ec 	.word	0x240253ec

0800402c <_ZN8touchgfx3HAL3lcdEv>:
        if (instance->useAuxiliaryLCD && instance->auxiliaryLCD)
 800402c:	4b04      	ldr	r3, [pc, #16]	@ (8004040 <_ZN8touchgfx3HAL3lcdEv+0x14>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8004034:	b10a      	cbz	r2, 800403a <_ZN8touchgfx3HAL3lcdEv+0xe>
 8004036:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8004038:	b900      	cbnz	r0, 800403c <_ZN8touchgfx3HAL3lcdEv+0x10>
        return instance->lcdRef;
 800403a:	6898      	ldr	r0, [r3, #8]
    }
 800403c:	4770      	bx	lr
 800403e:	bf00      	nop
 8004040:	240253a8 	.word	0x240253a8

08004044 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>:
FrontendApplicationBase::FrontendApplicationBase(Model& m, FrontendHeap& heap)
 8004044:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004046:	4617      	mov	r7, r2
 8004048:	4604      	mov	r4, r0
 800404a:	460e      	mov	r6, r1
          pendingScreenTransitionCallback(0)
 800404c:	f00f fabc 	bl	80135c8 <_ZN8touchgfx11ApplicationC1Ev>
        instance = this;
 8004050:	4b12      	ldr	r3, [pc, #72]	@ (800409c <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x58>)
        : currentPresenter(0),
 8004052:	2500      	movs	r5, #0
        instance = this;
 8004054:	601c      	str	r4, [r3, #0]
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004056:	4629      	mov	r1, r5
      model(m)
 8004058:	4b11      	ldr	r3, [pc, #68]	@ (80040a0 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x5c>)
 800405a:	6023      	str	r3, [r4, #0]
        : pobject(0), pmemfun(0)
 800405c:	4b11      	ldr	r3, [pc, #68]	@ (80040a4 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x60>)
 800405e:	e9c4 3551 	strd	r3, r5, [r4, #324]	@ 0x144
        return instance;
 8004062:	4b11      	ldr	r3, [pc, #68]	@ (80040a8 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap+0x64>)
 8004064:	6818      	ldr	r0, [r3, #0]
 8004066:	e9c4 5553 	strd	r5, r5, [r4, #332]	@ 0x14c
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 800406a:	6803      	ldr	r3, [r0, #0]
          pendingScreenTransitionCallback(0)
 800406c:	e9c4 554f 	strd	r5, r5, [r4, #316]	@ 0x13c
 8004070:	689b      	ldr	r3, [r3, #8]
      model(m)
 8004072:	e9c4 7655 	strd	r7, r6, [r4, #340]	@ 0x154
    touchgfx::HAL::getInstance()->setDisplayOrientation(touchgfx::ORIENTATION_LANDSCAPE);
 8004076:	4798      	blx	r3
    touchgfx::Texts::setLanguage(GB);
 8004078:	4628      	mov	r0, r5
 800407a:	f000 f9a7 	bl	80043cc <_ZN8touchgfx5Texts11setLanguageEt>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableTextureMapperAll();
 800407e:	f7ff ffd5 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 8004082:	f017 f964 	bl	801b34e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorL8_All();
 8004086:	f7ff ffd1 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800408a:	f017 f9d7 	bl	801b43c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>
    reinterpret_cast<touchgfx::LCD24bpp&>(touchgfx::HAL::lcd()).enableDecompressorRGB();
 800408e:	f7ff ffcd 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 8004092:	f017 f9df 	bl	801b454 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>
}
 8004096:	4620      	mov	r0, r4
 8004098:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800409a:	bf00      	nop
 800409c:	240253fc 	.word	0x240253fc
 80040a0:	080248fc 	.word	0x080248fc
 80040a4:	080248e4 	.word	0x080248e4
 80040a8:	240253a8 	.word	0x240253a8

080040ac <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv>:
struct Callback<dest_type, void, void, void> : public GenericCallback<>
 80040ac:	4b06      	ldr	r3, [pc, #24]	@ (80040c8 <_ZN23FrontendApplicationBase35gotoWelcomeScreenScreenNoTransitionEv+0x1c>)
 80040ae:	f8c0 0148 	str.w	r0, [r0, #328]	@ 0x148
 80040b2:	f8c0 314c 	str.w	r3, [r0, #332]	@ 0x14c
 80040b6:	2300      	movs	r3, #0
 80040b8:	f8c0 3150 	str.w	r3, [r0, #336]	@ 0x150
    pendingScreenTransitionCallback = &transitionCallback;
 80040bc:	f500 73a2 	add.w	r3, r0, #324	@ 0x144
 80040c0:	f8c0 3140 	str.w	r3, [r0, #320]	@ 0x140
}
 80040c4:	4770      	bx	lr
 80040c6:	bf00      	nop
 80040c8:	08003ee5 	.word	0x08003ee5

080040cc <_ZNK8touchgfx13GeneratedFont12getGSUBTableEv>:
    virtual int8_t getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const;

    virtual const uint16_t* getGSUBTable() const
    {
        return gsubTable;
    }
 80040cc:	6a40      	ldr	r0, [r0, #36]	@ 0x24
 80040ce:	4770      	bx	lr

080040d0 <_ZNK8touchgfx13GeneratedFont23getContextualFormsTableEv>:

    virtual const FontContextualFormsTable* getContextualFormsTable() const
    {
        return arabicTable;
    }
 80040d0:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80040d2:	4770      	bx	lr

080040d4 <_ZN8touchgfx13GeneratedFontD1Ev>:
class GeneratedFont : public ConstFont
 80040d4:	4770      	bx	lr

080040d6 <_ZNK8touchgfx13GeneratedFont12getPixelDataEPKNS_9GlyphNodeE>:
}

const uint8_t* GeneratedFont::getPixelData(const GlyphNode* glyph) const
{
    const uint8_t* const* table = (const uint8_t* const*)glyphData;
    return &(table[glyph->unicode / 2048][glyph->dataOffset]);
 80040d6:	888b      	ldrh	r3, [r1, #4]
 80040d8:	69c0      	ldr	r0, [r0, #28]
 80040da:	0adb      	lsrs	r3, r3, #11
 80040dc:	680a      	ldr	r2, [r1, #0]
 80040de:	f850 0023 	ldr.w	r0, [r0, r3, lsl #2]
}
 80040e2:	4410      	add	r0, r2
 80040e4:	4770      	bx	lr

080040e6 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE>:

int8_t GeneratedFont::getKerning(Unicode::UnicodeChar prevChar, const GlyphNode* glyph) const
{
 80040e6:	b510      	push	{r4, lr}
 80040e8:	4604      	mov	r4, r0
    if (!glyph || glyph->kerningTableSize == 0)
 80040ea:	b1ba      	cbz	r2, 800411c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
 80040ec:	7b10      	ldrb	r0, [r2, #12]
 80040ee:	b168      	cbz	r0, 800410c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return ((flags & GLYPH_DATA_KERNINGTABLEPOS_BIT8_10) << 8) | _kerningTablePos;
 80040f0:	7b53      	ldrb	r3, [r2, #13]
 80040f2:	7ad2      	ldrb	r2, [r2, #11]
 80040f4:	021b      	lsls	r3, r3, #8
 80040f6:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
    {
        return 0;
    }

    const KerningNode* kerndata = kerningData + glyph->kerningTablePos();
 80040fa:	431a      	orrs	r2, r3
 80040fc:	6a23      	ldr	r3, [r4, #32]
 80040fe:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
    {
        if (prevChar == kerndata->unicodePrevChar)
 8004102:	881a      	ldrh	r2, [r3, #0]
 8004104:	428a      	cmp	r2, r1
 8004106:	d102      	bne.n	800410e <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x28>
        {
            return kerndata->distance;
 8004108:	f993 0002 	ldrsb.w	r0, [r3, #2]
        {
            break;
        }
    }
    return 0;
}
 800410c:	bd10      	pop	{r4, pc}
        if (prevChar < kerndata->unicodePrevChar)
 800410e:	d805      	bhi.n	800411c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x36>
    for (uint16_t i = glyph->kerningTableSize; i > 0; i--, kerndata++)
 8004110:	3801      	subs	r0, #1
 8004112:	3304      	adds	r3, #4
 8004114:	b280      	uxth	r0, r0
 8004116:	2800      	cmp	r0, #0
 8004118:	d1f3      	bne.n	8004102 <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x1c>
 800411a:	e7f7      	b.n	800410c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>
        return 0;
 800411c:	2000      	movs	r0, #0
 800411e:	e7f5      	b.n	800410c <_ZNK8touchgfx13GeneratedFont10getKerningEtPKNS_9GlyphNodeE+0x26>

08004120 <_ZN8touchgfx13GeneratedFontD0Ev>:
 8004120:	b510      	push	{r4, lr}
 8004122:	4604      	mov	r4, r0
 8004124:	212c      	movs	r1, #44	@ 0x2c
 8004126:	f01c ff7e 	bl	8021026 <_ZdlPvj>
 800412a:	4620      	mov	r0, r4
 800412c:	bd10      	pop	{r4, pc}
	...

08004130 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>:
GeneratedFont::GeneratedFont(const GlyphNode* glyphs, uint16_t numGlyphs, uint16_t height, uint16_t baseline, uint8_t pixAboveTop, uint8_t pixBelowBottom, uint8_t bitsPerPixel, uint8_t byteAlignRow, uint8_t maxLeft, uint8_t maxRight, const uint8_t* const* glyphDataInternalFlash, const KerningNode* kerningList, const Unicode::UnicodeChar fallbackChar, const Unicode::UnicodeChar ellipsisChar, const uint16_t* const gsubData, const FontContextualFormsTable* formsTable)
 8004130:	b530      	push	{r4, r5, lr}
 8004132:	b08b      	sub	sp, #44	@ 0x2c
 8004134:	4604      	mov	r4, r0
      arabicTable(formsTable)
 8004136:	f8bd 5060 	ldrh.w	r5, [sp, #96]	@ 0x60
 800413a:	9508      	str	r5, [sp, #32]
 800413c:	f8bd 505c 	ldrh.w	r5, [sp, #92]	@ 0x5c
 8004140:	9507      	str	r5, [sp, #28]
 8004142:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 8004146:	9506      	str	r5, [sp, #24]
 8004148:	f89d 504c 	ldrb.w	r5, [sp, #76]	@ 0x4c
 800414c:	9505      	str	r5, [sp, #20]
 800414e:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 8004152:	9504      	str	r5, [sp, #16]
 8004154:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 8004158:	9503      	str	r5, [sp, #12]
 800415a:	f89d 5040 	ldrb.w	r5, [sp, #64]	@ 0x40
 800415e:	9502      	str	r5, [sp, #8]
 8004160:	f89d 503c 	ldrb.w	r5, [sp, #60]	@ 0x3c
 8004164:	9501      	str	r5, [sp, #4]
 8004166:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800416a:	9500      	str	r5, [sp, #0]
 800416c:	f010 fdb0 	bl	8014cd0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>
 8004170:	4b06      	ldr	r3, [pc, #24]	@ (800418c <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE+0x5c>)
}
 8004172:	4620      	mov	r0, r4
      arabicTable(formsTable)
 8004174:	6023      	str	r3, [r4, #0]
      glyphData(glyphDataInternalFlash),
 8004176:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004178:	61e3      	str	r3, [r4, #28]
      kerningData(kerningList),
 800417a:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800417c:	6223      	str	r3, [r4, #32]
      gsubTable(gsubData),
 800417e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8004180:	6263      	str	r3, [r4, #36]	@ 0x24
      arabicTable(formsTable)
 8004182:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8004184:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004186:	b00b      	add	sp, #44	@ 0x2c
 8004188:	bd30      	pop	{r4, r5, pc}
 800418a:	bf00      	nop
 800418c:	08024974 	.word	0x08024974

08004190 <_ZN8touchgfx6Screen11setupScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void setupScreen()
    {
    }
 8004190:	4770      	bx	lr

08004192 <_ZN8touchgfx6Screen15afterTransitionEv>:
     *
     * @see Application::handleTickEvent
     */
    virtual void afterTransition()
    {
    }
 8004192:	4770      	bx	lr

08004194 <_ZN8touchgfx6Screen14tearDownScreenEv>:
     *
     * @see Application::switchScreen
     */
    virtual void tearDownScreen()
    {
    }
 8004194:	4770      	bx	lr

08004196 <_ZN8touchgfx6Screen15handleTickEventEv>:
     * Called by the Application on the current screen with a frequency of
     * Application::TICK_INTERVAL_MS.
     */
    virtual void handleTickEvent()
    {
    }
 8004196:	4770      	bx	lr

08004198 <_ZN8touchgfx6Screen14handleKeyEventEh>:
     * @param  key The key to handle.
     */
    virtual void handleKeyEvent(uint8_t key)
    {
        (void)key; // Unused variable
    }
 8004198:	4770      	bx	lr

0800419a <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_10_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_10_4bpp();

touchgfx::GeneratedFont& getFont_verdana_10_4bpp()
{
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800419a:	4770      	bx	lr

0800419c <_Z23getFont_verdana_10_4bppv>:
{
 800419c:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 800419e:	4d16      	ldr	r5, [pc, #88]	@ (80041f8 <_Z23getFont_verdana_10_4bppv+0x5c>)
{
 80041a0:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_10_4bpp(glyphs_verdana_10_4bpp, 1, 10, 10, 0, 0, 4, 1, 0, 0, unicodes_verdana_10_4bpp, kerning_verdana_10_4bpp, 63, 0, 0, 0);
 80041a2:	682c      	ldr	r4, [r5, #0]
 80041a4:	f3bf 8f5b 	dmb	ish
 80041a8:	f014 0401 	ands.w	r4, r4, #1
 80041ac:	d120      	bne.n	80041f0 <_Z23getFont_verdana_10_4bppv+0x54>
 80041ae:	4628      	mov	r0, r5
 80041b0:	f01c ff3b 	bl	802102a <__cxa_guard_acquire>
 80041b4:	b1e0      	cbz	r0, 80041f0 <_Z23getFont_verdana_10_4bppv+0x54>
 80041b6:	233f      	movs	r3, #63	@ 0x3f
 80041b8:	2201      	movs	r2, #1
 80041ba:	4910      	ldr	r1, [pc, #64]	@ (80041fc <_Z23getFont_verdana_10_4bppv+0x60>)
 80041bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80041be:	4b10      	ldr	r3, [pc, #64]	@ (8004200 <_Z23getFont_verdana_10_4bppv+0x64>)
 80041c0:	4810      	ldr	r0, [pc, #64]	@ (8004204 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041c2:	9308      	str	r3, [sp, #32]
 80041c4:	4b10      	ldr	r3, [pc, #64]	@ (8004208 <_Z23getFont_verdana_10_4bppv+0x6c>)
 80041c6:	940a      	str	r4, [sp, #40]	@ 0x28
 80041c8:	9405      	str	r4, [sp, #20]
 80041ca:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80041ce:	2304      	movs	r3, #4
 80041d0:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80041d4:	230a      	movs	r3, #10
 80041d6:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80041da:	9300      	str	r3, [sp, #0]
 80041dc:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80041e0:	f7ff ffa6 	bl	8004130 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80041e4:	4809      	ldr	r0, [pc, #36]	@ (800420c <_Z23getFont_verdana_10_4bppv+0x70>)
 80041e6:	f01d fab5 	bl	8021754 <atexit>
 80041ea:	4628      	mov	r0, r5
 80041ec:	f01c ff29 	bl	8021042 <__cxa_guard_release>
    return verdana_10_4bpp;
}
 80041f0:	4804      	ldr	r0, [pc, #16]	@ (8004204 <_Z23getFont_verdana_10_4bppv+0x68>)
 80041f2:	b00f      	add	sp, #60	@ 0x3c
 80041f4:	bd30      	pop	{r4, r5, pc}
 80041f6:	bf00      	nop
 80041f8:	2400b0c0 	.word	0x2400b0c0
 80041fc:	08027948 	.word	0x08027948
 8004200:	08027f6c 	.word	0x08027f6c
 8004204:	2400b0c4 	.word	0x2400b0c4
 8004208:	0802814c 	.word	0x0802814c
 800420c:	0800419b 	.word	0x0800419b

08004210 <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_20_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_20_4bpp();

touchgfx::GeneratedFont& getFont_verdana_20_4bpp()
{
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004210:	4770      	bx	lr
	...

08004214 <_Z23getFont_verdana_20_4bppv>:
{
 8004214:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 8004216:	4d17      	ldr	r5, [pc, #92]	@ (8004274 <_Z23getFont_verdana_20_4bppv+0x60>)
{
 8004218:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_20_4bpp(glyphs_verdana_20_4bpp, 110, 24, 20, 0, 0, 4, 1, 1, 1, unicodes_verdana_20_4bpp, kerning_verdana_20_4bpp, 63, 0, 0, 0);
 800421a:	682c      	ldr	r4, [r5, #0]
 800421c:	f3bf 8f5b 	dmb	ish
 8004220:	f014 0401 	ands.w	r4, r4, #1
 8004224:	d122      	bne.n	800426c <_Z23getFont_verdana_20_4bppv+0x58>
 8004226:	4628      	mov	r0, r5
 8004228:	f01c feff 	bl	802102a <__cxa_guard_acquire>
 800422c:	b1f0      	cbz	r0, 800426c <_Z23getFont_verdana_20_4bppv+0x58>
 800422e:	233f      	movs	r3, #63	@ 0x3f
 8004230:	226e      	movs	r2, #110	@ 0x6e
 8004232:	4911      	ldr	r1, [pc, #68]	@ (8004278 <_Z23getFont_verdana_20_4bppv+0x64>)
 8004234:	9309      	str	r3, [sp, #36]	@ 0x24
 8004236:	4b11      	ldr	r3, [pc, #68]	@ (800427c <_Z23getFont_verdana_20_4bppv+0x68>)
 8004238:	4811      	ldr	r0, [pc, #68]	@ (8004280 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800423a:	9308      	str	r3, [sp, #32]
 800423c:	4b11      	ldr	r3, [pc, #68]	@ (8004284 <_Z23getFont_verdana_20_4bppv+0x70>)
 800423e:	940a      	str	r4, [sp, #40]	@ 0x28
 8004240:	9307      	str	r3, [sp, #28]
 8004242:	2301      	movs	r3, #1
 8004244:	9401      	str	r4, [sp, #4]
 8004246:	9304      	str	r3, [sp, #16]
 8004248:	e9cd 3305 	strd	r3, r3, [sp, #20]
 800424c:	2304      	movs	r3, #4
 800424e:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8004252:	2314      	movs	r3, #20
 8004254:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	2318      	movs	r3, #24
 800425c:	f7ff ff68 	bl	8004130 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 8004260:	4809      	ldr	r0, [pc, #36]	@ (8004288 <_Z23getFont_verdana_20_4bppv+0x74>)
 8004262:	f01d fa77 	bl	8021754 <atexit>
 8004266:	4628      	mov	r0, r5
 8004268:	f01c feeb 	bl	8021042 <__cxa_guard_release>
    return verdana_20_4bpp;
}
 800426c:	4804      	ldr	r0, [pc, #16]	@ (8004280 <_Z23getFont_verdana_20_4bppv+0x6c>)
 800426e:	b00f      	add	sp, #60	@ 0x3c
 8004270:	bd30      	pop	{r4, r5, pc}
 8004272:	bf00      	nop
 8004274:	2400b0f0 	.word	0x2400b0f0
 8004278:	08027958 	.word	0x08027958
 800427c:	08027f70 	.word	0x08027f70
 8004280:	2400b0f4 	.word	0x2400b0f4
 8004284:	08028150 	.word	0x08028150
 8004288:	08004211 	.word	0x08004211

0800428c <__tcf_0>:
KEEP extern const touchgfx::KerningNode kerning_verdana_40_4bpp[] FONT_KERNING_LOCATION_FLASH_ATTRIBUTE;
touchgfx::GeneratedFont& getFont_verdana_40_4bpp();

touchgfx::GeneratedFont& getFont_verdana_40_4bpp()
{
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 800428c:	4770      	bx	lr
	...

08004290 <_Z23getFont_verdana_40_4bppv>:
{
 8004290:	b530      	push	{r4, r5, lr}
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004292:	4d16      	ldr	r5, [pc, #88]	@ (80042ec <_Z23getFont_verdana_40_4bppv+0x5c>)
{
 8004294:	b08f      	sub	sp, #60	@ 0x3c
    static touchgfx::GeneratedFont verdana_40_4bpp(glyphs_verdana_40_4bpp, 1, 40, 40, 0, 0, 4, 1, 0, 0, unicodes_verdana_40_4bpp, kerning_verdana_40_4bpp, 63, 0, 0, 0);
 8004296:	682c      	ldr	r4, [r5, #0]
 8004298:	f3bf 8f5b 	dmb	ish
 800429c:	f014 0401 	ands.w	r4, r4, #1
 80042a0:	d120      	bne.n	80042e4 <_Z23getFont_verdana_40_4bppv+0x54>
 80042a2:	4628      	mov	r0, r5
 80042a4:	f01c fec1 	bl	802102a <__cxa_guard_acquire>
 80042a8:	b1e0      	cbz	r0, 80042e4 <_Z23getFont_verdana_40_4bppv+0x54>
 80042aa:	233f      	movs	r3, #63	@ 0x3f
 80042ac:	2201      	movs	r2, #1
 80042ae:	4910      	ldr	r1, [pc, #64]	@ (80042f0 <_Z23getFont_verdana_40_4bppv+0x60>)
 80042b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80042b2:	4b10      	ldr	r3, [pc, #64]	@ (80042f4 <_Z23getFont_verdana_40_4bppv+0x64>)
 80042b4:	4810      	ldr	r0, [pc, #64]	@ (80042f8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042b6:	9308      	str	r3, [sp, #32]
 80042b8:	4b10      	ldr	r3, [pc, #64]	@ (80042fc <_Z23getFont_verdana_40_4bppv+0x6c>)
 80042ba:	940a      	str	r4, [sp, #40]	@ 0x28
 80042bc:	9405      	str	r4, [sp, #20]
 80042be:	e9cd 4306 	strd	r4, r3, [sp, #24]
 80042c2:	2304      	movs	r3, #4
 80042c4:	e9cd 3203 	strd	r3, r2, [sp, #12]
 80042c8:	2328      	movs	r3, #40	@ 0x28
 80042ca:	e9cd 440b 	strd	r4, r4, [sp, #44]	@ 0x2c
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	e9cd 4401 	strd	r4, r4, [sp, #4]
 80042d4:	f7ff ff2c 	bl	8004130 <_ZN8touchgfx13GeneratedFontC1EPKNS_9GlyphNodeEttthhhhhhPKPKhPKNS_11KerningNodeEttPKtPKNS_24FontContextualFormsTableE>
 80042d8:	4809      	ldr	r0, [pc, #36]	@ (8004300 <_Z23getFont_verdana_40_4bppv+0x70>)
 80042da:	f01d fa3b 	bl	8021754 <atexit>
 80042de:	4628      	mov	r0, r5
 80042e0:	f01c feaf 	bl	8021042 <__cxa_guard_release>
    return verdana_40_4bpp;
}
 80042e4:	4804      	ldr	r0, [pc, #16]	@ (80042f8 <_Z23getFont_verdana_40_4bppv+0x68>)
 80042e6:	b00f      	add	sp, #60	@ 0x3c
 80042e8:	bd30      	pop	{r4, r5, pc}
 80042ea:	bf00      	nop
 80042ec:	2400b120 	.word	0x2400b120
 80042f0:	08027f5c 	.word	0x08027f5c
 80042f4:	08028148 	.word	0x08028148
 80042f8:	2400b124 	.word	0x2400b124
 80042fc:	08028164 	.word	0x08028164
 8004300:	0800428d 	.word	0x0800428d

08004304 <_ZNK8touchgfx4Font12getGSUBTableEv>:
    }
 8004304:	2000      	movs	r0, #0
 8004306:	4770      	bx	lr

08004308 <_ZNK8touchgfx4Font23getContextualFormsTableEv>:
    }
 8004308:	2000      	movs	r0, #0
 800430a:	4770      	bx	lr

0800430c <_ZNK8touchgfx4Font14getStringWidthEPKtz>:
#include <touchgfx/hal/HAL.hpp>
#include <touchgfx/lcd/LCD.hpp>
#include <texts/TypedTextDatabase.hpp>

uint16_t touchgfx::Font::getStringWidth(const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 800430c:	b40e      	push	{r1, r2, r3}
 800430e:	b503      	push	{r0, r1, lr}
 8004310:	ab03      	add	r3, sp, #12
    va_list pArg;
    va_start(pArg, text);
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 8004312:	2100      	movs	r1, #0
{
 8004314:	f853 2b04 	ldr.w	r2, [r3], #4
    va_start(pArg, text);
 8004318:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(TEXT_DIRECTION_LTR, text, pArg);
 800431a:	f00f ffdd 	bl	80142d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 800431e:	b002      	add	sp, #8
 8004320:	f85d eb04 	ldr.w	lr, [sp], #4
 8004324:	b003      	add	sp, #12
 8004326:	4770      	bx	lr

08004328 <_ZNK8touchgfx4Font14getStringWidthEhPKtz>:

uint16_t touchgfx::Font::getStringWidth(touchgfx::TextDirection textDirection, const touchgfx::Unicode::UnicodeChar* text, ...) const
{
 8004328:	b40c      	push	{r2, r3}
 800432a:	b507      	push	{r0, r1, r2, lr}
 800432c:	ab04      	add	r3, sp, #16
 800432e:	f853 2b04 	ldr.w	r2, [r3], #4
    va_list pArg;
    va_start(pArg, text);
 8004332:	9301      	str	r3, [sp, #4]
    uint16_t width = getStringWidthLTR(textDirection, text, pArg);
 8004334:	f00f ffd0 	bl	80142d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>
    va_end(pArg);
    return width;
}
 8004338:	b003      	add	sp, #12
 800433a:	f85d eb04 	ldr.w	lr, [sp], #4
 800433e:	b002      	add	sp, #8
 8004340:	4770      	bx	lr
	...

08004344 <_ZN8touchgfx12TextProvider15getNextLigatureEh>:

touchgfx::Unicode::UnicodeChar touchgfx::TextProvider::getNextLigature(TextDirection direction)
{
    if (fontGsubTable && nextCharacters.peekChar())
 8004344:	6c43      	ldr	r3, [r0, #68]	@ 0x44
{
 8004346:	b510      	push	{r4, lr}
 8004348:	4604      	mov	r4, r0
    if (fontGsubTable && nextCharacters.peekChar())
 800434a:	b373      	cbz	r3, 80043aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
            return used == size;
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
        {
            assert(used > 0);
 800434c:	8f03      	ldrh	r3, [r0, #56]	@ 0x38
 800434e:	b92b      	cbnz	r3, 800435c <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x18>
 8004350:	4b18      	ldr	r3, [pc, #96]	@ (80043b4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x70>)
 8004352:	21c5      	movs	r1, #197	@ 0xc5
 8004354:	4a18      	ldr	r2, [pc, #96]	@ (80043b8 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x74>)
            return buffer[pos];
        }

        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar(uint16_t offset)
        {
            assert(offset < used);
 8004356:	4819      	ldr	r0, [pc, #100]	@ (80043bc <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x78>)
 8004358:	f01d f9de 	bl	8021718 <__assert_func>
            return buffer[pos];
 800435c:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 800435e:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8004362:	8c5b      	ldrh	r3, [r3, #34]	@ 0x22
 8004364:	b30b      	cbz	r3, 80043aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
    {
        substituteGlyphs();
 8004366:	f011 fd49 	bl	8015dfc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>
            assert(offset < used);
 800436a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 800436c:	2b01      	cmp	r3, #1
 800436e:	d803      	bhi.n	8004378 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x34>
 8004370:	4b13      	ldr	r3, [pc, #76]	@ (80043c0 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x7c>)
 8004372:	21cb      	movs	r1, #203	@ 0xcb
 8004374:	4a13      	ldr	r2, [pc, #76]	@ (80043c4 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x80>)
 8004376:	e7ee      	b.n	8004356 <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x12>
            const uint16_t index = pos + offset;
 8004378:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
        if (nextCharacters.peekChar(1) == 0x093F) // Hindi I-matra
 800437a:	f640 103f 	movw	r0, #2367	@ 0x93f
 800437e:	1c53      	adds	r3, r2, #1
 8004380:	b29b      	uxth	r3, r3
            return buffer[index < size ? index : index - size];
 8004382:	2b09      	cmp	r3, #9
 8004384:	4619      	mov	r1, r3
 8004386:	bf88      	it	hi
 8004388:	f1a3 010a 	subhi.w	r1, r3, #10
 800438c:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8004390:	8c49      	ldrh	r1, [r1, #34]	@ 0x22
 8004392:	4281      	cmp	r1, r0
 8004394:	d109      	bne.n	80043aa <_ZN8touchgfx12TextProvider15getNextLigatureEh+0x66>
        FORCE_INLINE_FUNCTION Unicode::UnicodeChar peekChar()
 8004396:	2b0a      	cmp	r3, #10
 8004398:	eb04 0242 	add.w	r2, r4, r2, lsl #1
 800439c:	bf28      	it	cs
 800439e:	2300      	movcs	r3, #0
            return buffer[pos];
 80043a0:	8c50      	ldrh	r0, [r2, #34]	@ 0x22

        FORCE_INLINE_FUNCTION void replaceAt1(Unicode::UnicodeChar newChar)
        {
            assert(used > 1);
            const uint16_t index = pos + 1;
            buffer[index < size ? index : 0] = newChar;
 80043a2:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 80043a6:	8458      	strh	r0, [r3, #34]	@ 0x22
            buffer[pos] = newChar;
 80043a8:	8451      	strh	r1, [r2, #34]	@ 0x22
        {
            nextCharacters.replaceAt1(nextCharacters.peekChar());
            nextCharacters.replaceAt0(0x093F);
        }
    }
    return getNextChar();
 80043aa:	4620      	mov	r0, r4
}
 80043ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return getNextChar();
 80043b0:	f011 bc26 	b.w	8015c00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 80043b4:	080249d4 	.word	0x080249d4
 80043b8:	080249dd 	.word	0x080249dd
 80043bc:	08024a88 	.word	0x08024a88
 80043c0:	08024ae0 	.word	0x08024ae0
 80043c4:	08024aee 	.word	0x08024aee

080043c8 <_ZN8touchgfx12TextProvider18initializeInternalEv>:

void touchgfx::TextProvider::initializeInternal()
{
    fillInputBuffer();
 80043c8:	f011 bbe3 	b.w	8015b92 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

080043cc <_ZN8touchgfx5Texts11setLanguageEt>:
touchgfx::LanguageId touchgfx::Texts::currentLanguage = static_cast<touchgfx::LanguageId>(0);
static const touchgfx::Unicode::UnicodeChar* currentLanguagePtr = 0;
static const uint32_t* currentLanguageIndices = 0;

void touchgfx::Texts::setLanguage(touchgfx::LanguageId id)
{
 80043cc:	b538      	push	{r3, r4, r5, lr}
    const touchgfx::TypedText::TypedTextData* currentLanguageTypedText = 0;
    if (id < 1)
 80043ce:	bb18      	cbnz	r0, 8004418 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
    {
        if (languagesArray[id] != 0)
 80043d0:	4b12      	ldr	r3, [pc, #72]	@ (800441c <_ZN8touchgfx5Texts11setLanguageEt+0x50>)
 80043d2:	4813      	ldr	r0, [pc, #76]	@ (8004420 <_ZN8touchgfx5Texts11setLanguageEt+0x54>)
 80043d4:	681c      	ldr	r4, [r3, #0]
 80043d6:	4913      	ldr	r1, [pc, #76]	@ (8004424 <_ZN8touchgfx5Texts11setLanguageEt+0x58>)
 80043d8:	b1b4      	cbz	r4, 8004408 <_ZN8touchgfx5Texts11setLanguageEt+0x3c>
        {
            // Dynamic translation is added
            const TranslationHeader* translation = languagesArray[id];
            currentLanguagePtr = (const touchgfx::Unicode::UnicodeChar*)(((const uint8_t*)translation) + translation->offset_to_texts);
 80043da:	6822      	ldr	r2, [r4, #0]
 80043dc:	4422      	add	r2, r4
 80043de:	6002      	str	r2, [r0, #0]
            currentLanguageIndices = (const uint32_t*)(((const uint8_t*)translation) + translation->offset_to_indices);
 80043e0:	6862      	ldr	r2, [r4, #4]
 80043e2:	4422      	add	r2, r4
 80043e4:	600a      	str	r2, [r1, #0]
            currentLanguageTypedText = (const touchgfx::TypedText::TypedTextData*)(((const uint8_t*)translation) + translation->offset_to_typedtext);
 80043e6:	68a2      	ldr	r2, [r4, #8]
 80043e8:	4414      	add	r4, r2
        }
    }

    if (currentLanguageTypedText)
    {
        currentLanguage = id;
 80043ea:	4b0f      	ldr	r3, [pc, #60]	@ (8004428 <_ZN8touchgfx5Texts11setLanguageEt+0x5c>)
 80043ec:	2200      	movs	r2, #0
 80043ee:	801a      	strh	r2, [r3, #0]
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
                                                       TypedTextDatabase::getFonts(), TypedTextDatabase::getInstanceSize());
 80043f0:	f000 f82a 	bl	8004448 <_ZN17TypedTextDatabase8getFontsEv>
 80043f4:	4605      	mov	r5, r0
        touchgfx::TypedText::registerTypedTextDatabase(currentLanguageTypedText,
 80043f6:	f000 f825 	bl	8004444 <_ZN17TypedTextDatabase15getInstanceSizeEv>
        typedTexts = data;
 80043fa:	4b0c      	ldr	r3, [pc, #48]	@ (800442c <_ZN8touchgfx5Texts11setLanguageEt+0x60>)
 80043fc:	601c      	str	r4, [r3, #0]
        fonts = f;
 80043fe:	4b0c      	ldr	r3, [pc, #48]	@ (8004430 <_ZN8touchgfx5Texts11setLanguageEt+0x64>)
 8004400:	601d      	str	r5, [r3, #0]
        numberOfTypedTexts = n;
 8004402:	4b0c      	ldr	r3, [pc, #48]	@ (8004434 <_ZN8touchgfx5Texts11setLanguageEt+0x68>)
 8004404:	8018      	strh	r0, [r3, #0]
    }
}
 8004406:	e007      	b.n	8004418 <_ZN8touchgfx5Texts11setLanguageEt+0x4c>
            currentLanguagePtr = texts_all_languages;
 8004408:	4b0b      	ldr	r3, [pc, #44]	@ (8004438 <_ZN8touchgfx5Texts11setLanguageEt+0x6c>)
 800440a:	6003      	str	r3, [r0, #0]
            currentLanguageIndices = staticLanguageIndices[id];
 800440c:	4b0b      	ldr	r3, [pc, #44]	@ (800443c <_ZN8touchgfx5Texts11setLanguageEt+0x70>)
 800440e:	600b      	str	r3, [r1, #0]
            currentLanguageTypedText = typedTextDatabaseArray[id];
 8004410:	4b0b      	ldr	r3, [pc, #44]	@ (8004440 <_ZN8touchgfx5Texts11setLanguageEt+0x74>)
 8004412:	681c      	ldr	r4, [r3, #0]
    if (currentLanguageTypedText)
 8004414:	2c00      	cmp	r4, #0
 8004416:	d1e8      	bne.n	80043ea <_ZN8touchgfx5Texts11setLanguageEt+0x1e>
}
 8004418:	bd38      	pop	{r3, r4, r5, pc}
 800441a:	bf00      	nop
 800441c:	2400b15c 	.word	0x2400b15c
 8004420:	2400b154 	.word	0x2400b154
 8004424:	2400b150 	.word	0x2400b150
 8004428:	2400b158 	.word	0x2400b158
 800442c:	24025400 	.word	0x24025400
 8004430:	24025408 	.word	0x24025408
 8004434:	24025404 	.word	0x24025404
 8004438:	90048360 	.word	0x90048360
 800443c:	90048354 	.word	0x90048354
 8004440:	90048374 	.word	0x90048374

08004444 <_ZN17TypedTextDatabase15getInstanceSizeEv>:
}

uint16_t getInstanceSize()
{
    return sizeof(typedText_database_DEFAULT) / sizeof(touchgfx::TypedText::TypedTextData);
}
 8004444:	2003      	movs	r0, #3
 8004446:	4770      	bx	lr

08004448 <_ZN17TypedTextDatabase8getFontsEv>:

const touchgfx::Font** getFonts()
{
    return touchgfx_fonts;
}
 8004448:	4800      	ldr	r0, [pc, #0]	@ (800444c <_ZN17TypedTextDatabase8getFontsEv+0x4>)
 800444a:	4770      	bx	lr
 800444c:	2400b160 	.word	0x2400b160

08004450 <_GLOBAL__sub_I_touchgfx_fonts>:
    case 2:
        touchgfx_fonts[2] = &(getFont_verdana_10_4bpp());
        break;
    }
}
} // namespace TypedTextDatabase
 8004450:	b510      	push	{r4, lr}
};
 8004452:	4c05      	ldr	r4, [pc, #20]	@ (8004468 <_GLOBAL__sub_I_touchgfx_fonts+0x18>)
    &(getFont_verdana_20_4bpp()),
 8004454:	f7ff fede 	bl	8004214 <_Z23getFont_verdana_20_4bppv>
};
 8004458:	6020      	str	r0, [r4, #0]
    &(getFont_verdana_40_4bpp()),
 800445a:	f7ff ff19 	bl	8004290 <_Z23getFont_verdana_40_4bppv>
};
 800445e:	6060      	str	r0, [r4, #4]
    &(getFont_verdana_10_4bpp())
 8004460:	f7ff fe9c 	bl	800419c <_Z23getFont_verdana_10_4bppv>
};
 8004464:	60a0      	str	r0, [r4, #8]
} // namespace TypedTextDatabase
 8004466:	bd10      	pop	{r4, pc}
 8004468:	2400b160 	.word	0x2400b160

0800446c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>:
/* DO NOT EDIT THIS FILE */
/* This file is autogenerated by the text-database code generator */
#include <touchgfx/VectorFontRendererImpl.hpp>

void touchgfx::VectorFontRendererImpl::getVectorFontBuffers(float*& pointArray, int& pointArraySize, uint8_t*& commandArray, int& commandArraySize)
{
 800446c:	b510      	push	{r4, lr}
    pointArray = 0;
 800446e:	2400      	movs	r4, #0
 8004470:	6004      	str	r4, [r0, #0]
    pointArraySize = 0;
 8004472:	600c      	str	r4, [r1, #0]
    commandArray = 0;
 8004474:	6014      	str	r4, [r2, #0]
    commandArraySize = 0;
 8004476:	601c      	str	r4, [r3, #0]
}
 8004478:	bd10      	pop	{r4, pc}

0800447a <_ZN21WelcomeScreenViewBaseD1Ev>:
}

WelcomeScreenViewBase::~WelcomeScreenViewBase()
{

}
 800447a:	4770      	bx	lr

0800447c <_ZN21WelcomeScreenViewBase11setupScreenEv>:

void WelcomeScreenViewBase::setupScreen()
{

}
 800447c:	4770      	bx	lr

0800447e <_ZN21WelcomeScreenViewBaseD0Ev>:
WelcomeScreenViewBase::~WelcomeScreenViewBase()
 800447e:	b510      	push	{r4, lr}
 8004480:	4604      	mov	r4, r0
}
 8004482:	216c      	movs	r1, #108	@ 0x6c
 8004484:	f01c fdcf 	bl	8021026 <_ZdlPvj>
 8004488:	4620      	mov	r0, r4
 800448a:	bd10      	pop	{r4, pc}

0800448c <_ZN21WelcomeScreenViewBaseC1Ev>:
WelcomeScreenViewBase::WelcomeScreenViewBase()
 800448c:	b538      	push	{r3, r4, r5, lr}
 800448e:	4604      	mov	r4, r0
        : presenter(0)
 8004490:	f010 fe0e 	bl	80150b0 <_ZN8touchgfx6ScreenC1Ev>
 8004494:	2300      	movs	r3, #0
 8004496:	4a15      	ldr	r2, [pc, #84]	@ (80044ec <_ZN21WelcomeScreenViewBaseC1Ev+0x60>)
 8004498:	4625      	mov	r5, r4
        setWidth(width);
 800449a:	f44f 7148 	mov.w	r1, #800	@ 0x320
 800449e:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80044a0:	f845 2b40 	str.w	r2, [r5], #64
 80044a4:	4628      	mov	r0, r5
        : color(col)
 80044a6:	66a3      	str	r3, [r4, #104]	@ 0x68
class Box : public Widget
{
public:
    /** Construct a new Box with a default alpha value of 255 (solid) */
    Box()
        : Widget(), alpha(255), color(0)
 80044a8:	4a11      	ldr	r2, [pc, #68]	@ (80044f0 <_ZN21WelcomeScreenViewBaseC1Ev+0x64>)
        : x(0), y(0), width(0), height(0)
 80044aa:	e9c4 3311 	strd	r3, r3, [r4, #68]	@ 0x44
 80044ae:	e9c4 3313 	strd	r3, r3, [r4, #76]	@ 0x4c
          nextSibling(0),
 80044b2:	e9c4 3315 	strd	r3, r3, [r4, #84]	@ 0x54
          cachedAbsX(0),
 80044b6:	e9c4 3317 	strd	r3, r3, [r4, #92]	@ 0x5c
          touchable(false),
 80044ba:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80044be:	6422      	str	r2, [r4, #64]	@ 0x40
 80044c0:	f8a4 3064 	strh.w	r3, [r4, #100]	@ 0x64
 80044c4:	23ff      	movs	r3, #255	@ 0xff
 80044c6:	f884 3066 	strb.w	r3, [r4, #102]	@ 0x66
        setWidth(width);
 80044ca:	f7ff f8c7 	bl	800365c <_ZN8touchgfx8Drawable8setWidthEs>
        setHeight(height);
 80044ce:	4628      	mov	r0, r5
 80044d0:	f44f 71f0 	mov.w	r1, #480	@ 0x1e0
 80044d4:	f7ff f8c4 	bl	8003660 <_ZN8touchgfx8Drawable9setHeightEs>
     *
     * @see getColor, Color::getColorFromRGB
     */
    void setColor(colortype newColor)
    {
        color = newColor;
 80044d8:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
     * @note Must not be called with a Drawable that was already added to the screen. If in doubt,
     *       call remove() first.
     */
    void add(Drawable& d)
    {
        container.add(d);
 80044dc:	1d20      	adds	r0, r4, #4
 80044de:	4629      	mov	r1, r5
 80044e0:	66a3      	str	r3, [r4, #104]	@ 0x68
 80044e2:	f00a fb6b 	bl	800ebbc <_ZN8touchgfx9Container3addERNS_8DrawableE>
}
 80044e6:	4620      	mov	r0, r4
 80044e8:	bd38      	pop	{r3, r4, r5, pc}
 80044ea:	bf00      	nop
 80044ec:	08024bc8 	.word	0x08024bc8
 80044f0:	080252c8 	.word	0x080252c8

080044f4 <_ZN8touchgfx9Container13getFirstChildEv>:
     * @see getNextSibling
     */
    virtual Drawable* getFirstChild()
    {
        return firstChild;
    }
 80044f4:	6a80      	ldr	r0, [r0, #40]	@ 0x28
 80044f6:	4770      	bx	lr

080044f8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev>:
    {26, Rect(63 + 28 * 3, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {27, Rect(63 + 28 * 4, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {28, Rect(63 + 28 * 5, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {29, Rect(63 + 28 * 6, 149, 26, 40), BITMAP_KEYBOARD_KEY_HIGHLIGHTED_ID},
    {30, Rect(62, 193, 252, 40), BITMAP_KEYBOARD_SPACE_HIGHLIGHTED_ID}
};
 80044f8:	4be6      	ldr	r3, [pc, #920]	@ (8004894 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x39c>)
 80044fa:	2201      	movs	r2, #1
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 80044fc:	201a      	movs	r0, #26
 80044fe:	2105      	movs	r1, #5
 8004500:	f04f 0c5b 	mov.w	ip, #91	@ 0x5b
	memset(buffer, 0, BUFFER_SIZE+1);
	keyboard.setBufferPosition(0);
    firstCharacterEntry = true;
    uppercaseKeys = true;
    setKeyMappingList();
 8004504:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004508:	2602      	movs	r6, #2
 800450a:	f04f 0706 	mov.w	r7, #6
 800450e:	243d      	movs	r4, #61	@ 0x3d
 8004510:	2507      	movs	r5, #7
 8004512:	731e      	strb	r6, [r3, #12]
 8004514:	2603      	movs	r6, #3
 8004516:	f04f 0e3f 	mov.w	lr, #63	@ 0x3f
 800451a:	f04f 0823 	mov.w	r8, #35	@ 0x23
 800451e:	761e      	strb	r6, [r3, #24]
 8004520:	f04f 0604 	mov.w	r6, #4
 8004524:	701a      	strb	r2, [r3, #0]
 8004526:	f04f 09af 	mov.w	r9, #175	@ 0xaf
 800452a:	2228      	movs	r2, #40	@ 0x28
 800452c:	f883 6024 	strb.w	r6, [r3, #36]	@ 0x24
 8004530:	f883 703c 	strb.w	r7, [r3, #60]	@ 0x3c
 8004534:	f04f 0677 	mov.w	r6, #119	@ 0x77
 8004538:	f04f 0793 	mov.w	r7, #147	@ 0x93
 800453c:	809c      	strh	r4, [r3, #4]
 800453e:	80d8      	strh	r0, [r3, #6]
 8004540:	f04f 0a08 	mov.w	sl, #8
 8004544:	811a      	strh	r2, [r3, #8]
 8004546:	f04f 0b0d 	mov.w	fp, #13
 800454a:	8159      	strh	r1, [r3, #10]
 800454c:	f8a3 800e 	strh.w	r8, [r3, #14]
 8004550:	821c      	strh	r4, [r3, #16]
 8004552:	8258      	strh	r0, [r3, #18]
 8004554:	829a      	strh	r2, [r3, #20]
 8004556:	82d9      	strh	r1, [r3, #22]
 8004558:	f8a3 e01a 	strh.w	lr, [r3, #26]
 800455c:	839c      	strh	r4, [r3, #28]
 800455e:	83d8      	strh	r0, [r3, #30]
 8004560:	841a      	strh	r2, [r3, #32]
 8004562:	8459      	strh	r1, [r3, #34]	@ 0x22
 8004564:	f8a3 c026 	strh.w	ip, [r3, #38]	@ 0x26
 8004568:	851c      	strh	r4, [r3, #40]	@ 0x28
 800456a:	8558      	strh	r0, [r3, #42]	@ 0x2a
 800456c:	859a      	strh	r2, [r3, #44]	@ 0x2c
 800456e:	85d9      	strh	r1, [r3, #46]	@ 0x2e
 8004570:	f883 1030 	strb.w	r1, [r3, #48]	@ 0x30
 8004574:	865e      	strh	r6, [r3, #50]	@ 0x32
 8004576:	2609      	movs	r6, #9
 8004578:	869c      	strh	r4, [r3, #52]	@ 0x34
 800457a:	86d8      	strh	r0, [r3, #54]	@ 0x36
 800457c:	871a      	strh	r2, [r3, #56]	@ 0x38
 800457e:	8759      	strh	r1, [r3, #58]	@ 0x3a
 8004580:	805d      	strh	r5, [r3, #2]
 8004582:	87df      	strh	r7, [r3, #62]	@ 0x3e
 8004584:	27cb      	movs	r7, #203	@ 0xcb
 8004586:	f8a3 904a 	strh.w	r9, [r3, #74]	@ 0x4a
 800458a:	f04f 090a 	mov.w	r9, #10
 800458e:	f883 a054 	strb.w	sl, [r3, #84]	@ 0x54
 8004592:	f240 1a03 	movw	sl, #259	@ 0x103
 8004596:	f883 906c 	strb.w	r9, [r3, #108]	@ 0x6c
 800459a:	f04f 090b 	mov.w	r9, #11
 800459e:	f883 6060 	strb.w	r6, [r3, #96]	@ 0x60
 80045a2:	26e7      	movs	r6, #231	@ 0xe7
 80045a4:	f883 9078 	strb.w	r9, [r3, #120]	@ 0x78
 80045a8:	f240 191f 	movw	r9, #287	@ 0x11f
 80045ac:	f8a3 4040 	strh.w	r4, [r3, #64]	@ 0x40
 80045b0:	f8a3 0042 	strh.w	r0, [r3, #66]	@ 0x42
 80045b4:	f8a3 2044 	strh.w	r2, [r3, #68]	@ 0x44
 80045b8:	f8a3 1046 	strh.w	r1, [r3, #70]	@ 0x46
 80045bc:	f8a3 404c 	strh.w	r4, [r3, #76]	@ 0x4c
 80045c0:	f8a3 004e 	strh.w	r0, [r3, #78]	@ 0x4e
 80045c4:	f8a3 2050 	strh.w	r2, [r3, #80]	@ 0x50
 80045c8:	f8a3 1052 	strh.w	r1, [r3, #82]	@ 0x52
 80045cc:	f8a3 7056 	strh.w	r7, [r3, #86]	@ 0x56
 80045d0:	f8a3 4058 	strh.w	r4, [r3, #88]	@ 0x58
 80045d4:	f8a3 005a 	strh.w	r0, [r3, #90]	@ 0x5a
 80045d8:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
 80045dc:	f8a3 105e 	strh.w	r1, [r3, #94]	@ 0x5e
 80045e0:	f8a3 4064 	strh.w	r4, [r3, #100]	@ 0x64
 80045e4:	f8a3 0066 	strh.w	r0, [r3, #102]	@ 0x66
 80045e8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
 80045ec:	f8a3 106a 	strh.w	r1, [r3, #106]	@ 0x6a
 80045f0:	f8a3 a06e 	strh.w	sl, [r3, #110]	@ 0x6e
 80045f4:	f8a3 4070 	strh.w	r4, [r3, #112]	@ 0x70
 80045f8:	f8a3 0072 	strh.w	r0, [r3, #114]	@ 0x72
 80045fc:	f8a3 2074 	strh.w	r2, [r3, #116]	@ 0x74
 8004600:	f8a3 1076 	strh.w	r1, [r3, #118]	@ 0x76
 8004604:	f8a3 407c 	strh.w	r4, [r3, #124]	@ 0x7c
 8004608:	240c      	movs	r4, #12
 800460a:	f8a3 007e 	strh.w	r0, [r3, #126]	@ 0x7e
 800460e:	f883 5048 	strb.w	r5, [r3, #72]	@ 0x48
 8004612:	f8a3 6062 	strh.w	r6, [r3, #98]	@ 0x62
 8004616:	f8a3 907a 	strh.w	r9, [r3, #122]	@ 0x7a
 800461a:	f8a3 2080 	strh.w	r2, [r3, #128]	@ 0x80
 800461e:	f883 b090 	strb.w	fp, [r3, #144]	@ 0x90
 8004622:	f04f 0b10 	mov.w	fp, #16
 8004626:	f8a3 8092 	strh.w	r8, [r3, #146]	@ 0x92
 800462a:	f04f 080e 	mov.w	r8, #14
 800462e:	f883 b0b4 	strb.w	fp, [r3, #180]	@ 0xb4
 8004632:	f04f 0b77 	mov.w	fp, #119	@ 0x77
 8004636:	f883 4084 	strb.w	r4, [r3, #132]	@ 0x84
 800463a:	2469      	movs	r4, #105	@ 0x69
 800463c:	f8a3 b0b6 	strh.w	fp, [r3, #182]	@ 0xb6
 8004640:	f04f 0b11 	mov.w	fp, #17
 8004644:	f883 809c 	strb.w	r8, [r3, #156]	@ 0x9c
 8004648:	f04f 080f 	mov.w	r8, #15
 800464c:	f883 b0c0 	strb.w	fp, [r3, #192]	@ 0xc0
 8004650:	f04f 0b93 	mov.w	fp, #147	@ 0x93
 8004654:	f8a3 1082 	strh.w	r1, [r3, #130]	@ 0x82
 8004658:	f8a3 4088 	strh.w	r4, [r3, #136]	@ 0x88
 800465c:	f8a3 008a 	strh.w	r0, [r3, #138]	@ 0x8a
 8004660:	f8a3 208c 	strh.w	r2, [r3, #140]	@ 0x8c
 8004664:	f8a3 108e 	strh.w	r1, [r3, #142]	@ 0x8e
 8004668:	f8a3 4094 	strh.w	r4, [r3, #148]	@ 0x94
 800466c:	f8a3 0096 	strh.w	r0, [r3, #150]	@ 0x96
 8004670:	f8a3 2098 	strh.w	r2, [r3, #152]	@ 0x98
 8004674:	f8a3 109a 	strh.w	r1, [r3, #154]	@ 0x9a
 8004678:	f8a3 e09e 	strh.w	lr, [r3, #158]	@ 0x9e
 800467c:	f8a3 40a0 	strh.w	r4, [r3, #160]	@ 0xa0
 8004680:	f8a3 00a2 	strh.w	r0, [r3, #162]	@ 0xa2
 8004684:	f8a3 20a4 	strh.w	r2, [r3, #164]	@ 0xa4
 8004688:	f8a3 10a6 	strh.w	r1, [r3, #166]	@ 0xa6
 800468c:	f8a3 c0aa 	strh.w	ip, [r3, #170]	@ 0xaa
 8004690:	f8a3 40ac 	strh.w	r4, [r3, #172]	@ 0xac
 8004694:	f8a3 00ae 	strh.w	r0, [r3, #174]	@ 0xae
 8004698:	f8a3 20b0 	strh.w	r2, [r3, #176]	@ 0xb0
 800469c:	f8a3 10b2 	strh.w	r1, [r3, #178]	@ 0xb2
 80046a0:	f8a3 40b8 	strh.w	r4, [r3, #184]	@ 0xb8
 80046a4:	f8a3 00ba 	strh.w	r0, [r3, #186]	@ 0xba
 80046a8:	f8a3 20bc 	strh.w	r2, [r3, #188]	@ 0xbc
 80046ac:	f8a3 10be 	strh.w	r1, [r3, #190]	@ 0xbe
 80046b0:	f8a3 5086 	strh.w	r5, [r3, #134]	@ 0x86
 80046b4:	f883 80a8 	strb.w	r8, [r3, #168]	@ 0xa8
 80046b8:	f8a3 b0c2 	strh.w	fp, [r3, #194]	@ 0xc2
 80046bc:	f04f 0b12 	mov.w	fp, #18
 80046c0:	f8a3 a0f2 	strh.w	sl, [r3, #242]	@ 0xf2
 80046c4:	f04f 0a16 	mov.w	sl, #22
 80046c8:	f883 b0cc 	strb.w	fp, [r3, #204]	@ 0xcc
 80046cc:	f04f 0baf 	mov.w	fp, #175	@ 0xaf
 80046d0:	f8a3 40c4 	strh.w	r4, [r3, #196]	@ 0xc4
 80046d4:	f8a3 b0ce 	strh.w	fp, [r3, #206]	@ 0xce
 80046d8:	f04f 0b13 	mov.w	fp, #19
 80046dc:	f8a3 00c6 	strh.w	r0, [r3, #198]	@ 0xc6
 80046e0:	f883 b0d8 	strb.w	fp, [r3, #216]	@ 0xd8
 80046e4:	f04f 0b14 	mov.w	fp, #20
 80046e8:	f8a3 20c8 	strh.w	r2, [r3, #200]	@ 0xc8
 80046ec:	f883 b0e4 	strb.w	fp, [r3, #228]	@ 0xe4
 80046f0:	f04f 0b15 	mov.w	fp, #21
 80046f4:	f8a3 10ca 	strh.w	r1, [r3, #202]	@ 0xca
 80046f8:	f8a3 40d0 	strh.w	r4, [r3, #208]	@ 0xd0
 80046fc:	f8a3 00d2 	strh.w	r0, [r3, #210]	@ 0xd2
 8004700:	f8a3 20d4 	strh.w	r2, [r3, #212]	@ 0xd4
 8004704:	f8a3 10d6 	strh.w	r1, [r3, #214]	@ 0xd6
 8004708:	f8a3 70da 	strh.w	r7, [r3, #218]	@ 0xda
 800470c:	f8a3 40dc 	strh.w	r4, [r3, #220]	@ 0xdc
 8004710:	f8a3 00de 	strh.w	r0, [r3, #222]	@ 0xde
 8004714:	f8a3 20e0 	strh.w	r2, [r3, #224]	@ 0xe0
 8004718:	f8a3 10e2 	strh.w	r1, [r3, #226]	@ 0xe2
 800471c:	f8a3 40e8 	strh.w	r4, [r3, #232]	@ 0xe8
 8004720:	f8a3 00ea 	strh.w	r0, [r3, #234]	@ 0xea
 8004724:	f8a3 20ec 	strh.w	r2, [r3, #236]	@ 0xec
 8004728:	f8a3 10ee 	strh.w	r1, [r3, #238]	@ 0xee
 800472c:	f883 b0f0 	strb.w	fp, [r3, #240]	@ 0xf0
 8004730:	f04f 0b77 	mov.w	fp, #119	@ 0x77
 8004734:	f8a3 40f4 	strh.w	r4, [r3, #244]	@ 0xf4
 8004738:	f8a3 00f6 	strh.w	r0, [r3, #246]	@ 0xf6
 800473c:	f8a3 20f8 	strh.w	r2, [r3, #248]	@ 0xf8
 8004740:	f8a3 10fa 	strh.w	r1, [r3, #250]	@ 0xfa
 8004744:	f8a3 4100 	strh.w	r4, [r3, #256]	@ 0x100
 8004748:	2417      	movs	r4, #23
 800474a:	f8a3 0102 	strh.w	r0, [r3, #258]	@ 0x102
 800474e:	f8a3 60e6 	strh.w	r6, [r3, #230]	@ 0xe6
 8004752:	f883 a0fc 	strb.w	sl, [r3, #252]	@ 0xfc
 8004756:	f8a3 90fe 	strh.w	r9, [r3, #254]	@ 0xfe
 800475a:	f8a3 2104 	strh.w	r2, [r3, #260]	@ 0x104
 800475e:	f8a3 c116 	strh.w	ip, [r3, #278]	@ 0x116
 8004762:	f04f 0c19 	mov.w	ip, #25
 8004766:	f8a3 b122 	strh.w	fp, [r3, #290]	@ 0x122
 800476a:	f04f 0b93 	mov.w	fp, #147	@ 0x93
 800476e:	f883 c120 	strb.w	ip, [r3, #288]	@ 0x120
 8004772:	f04f 0c1b 	mov.w	ip, #27
 8004776:	f883 4108 	strb.w	r4, [r3, #264]	@ 0x108
 800477a:	2495      	movs	r4, #149	@ 0x95
 800477c:	f8a3 e10a 	strh.w	lr, [r3, #266]	@ 0x10a
 8004780:	f04f 0e18 	mov.w	lr, #24
 8004784:	f8a3 b12e 	strh.w	fp, [r3, #302]	@ 0x12e
 8004788:	f04f 0baf 	mov.w	fp, #175	@ 0xaf
 800478c:	f883 c138 	strb.w	ip, [r3, #312]	@ 0x138
 8004790:	f04f 0c1c 	mov.w	ip, #28
 8004794:	f8a3 1106 	strh.w	r1, [r3, #262]	@ 0x106
 8004798:	f8a3 410c 	strh.w	r4, [r3, #268]	@ 0x10c
 800479c:	f8a3 010e 	strh.w	r0, [r3, #270]	@ 0x10e
 80047a0:	f8a3 2110 	strh.w	r2, [r3, #272]	@ 0x110
 80047a4:	f8a3 1112 	strh.w	r1, [r3, #274]	@ 0x112
 80047a8:	f8a3 4118 	strh.w	r4, [r3, #280]	@ 0x118
 80047ac:	f8a3 011a 	strh.w	r0, [r3, #282]	@ 0x11a
 80047b0:	f8a3 211c 	strh.w	r2, [r3, #284]	@ 0x11c
 80047b4:	f8a3 111e 	strh.w	r1, [r3, #286]	@ 0x11e
 80047b8:	f8a3 4124 	strh.w	r4, [r3, #292]	@ 0x124
 80047bc:	f8a3 0126 	strh.w	r0, [r3, #294]	@ 0x126
 80047c0:	f8a3 2128 	strh.w	r2, [r3, #296]	@ 0x128
 80047c4:	f8a3 112a 	strh.w	r1, [r3, #298]	@ 0x12a
 80047c8:	f883 012c 	strb.w	r0, [r3, #300]	@ 0x12c
 80047cc:	f8a3 4130 	strh.w	r4, [r3, #304]	@ 0x130
 80047d0:	f8a3 0132 	strh.w	r0, [r3, #306]	@ 0x132
 80047d4:	f8a3 2134 	strh.w	r2, [r3, #308]	@ 0x134
 80047d8:	f8a3 1136 	strh.w	r1, [r3, #310]	@ 0x136
 80047dc:	f8a3 413c 	strh.w	r4, [r3, #316]	@ 0x13c
 80047e0:	f8a3 013e 	strh.w	r0, [r3, #318]	@ 0x13e
 80047e4:	f8a3 2140 	strh.w	r2, [r3, #320]	@ 0x140
 80047e8:	f8a3 1142 	strh.w	r1, [r3, #322]	@ 0x142
 80047ec:	f883 e114 	strb.w	lr, [r3, #276]	@ 0x114
 80047f0:	f8a3 b13a 	strh.w	fp, [r3, #314]	@ 0x13a
 80047f4:	f883 c144 	strb.w	ip, [r3, #324]	@ 0x144
 80047f8:	f8a3 7146 	strh.w	r7, [r3, #326]	@ 0x146
 80047fc:	271d      	movs	r7, #29
 80047fe:	f8a3 114e 	strh.w	r1, [r3, #334]	@ 0x14e
 8004802:	f8a3 115a 	strh.w	r1, [r3, #346]	@ 0x15a
 8004806:	211e      	movs	r1, #30
 8004808:	f8a3 4148 	strh.w	r4, [r3, #328]	@ 0x148
 800480c:	f883 115c 	strb.w	r1, [r3, #348]	@ 0x15c
 8004810:	213e      	movs	r1, #62	@ 0x3e
 8004812:	f8a3 014a 	strh.w	r0, [r3, #330]	@ 0x14a
 8004816:	f8a3 115e 	strh.w	r1, [r3, #350]	@ 0x15e
 800481a:	21c1      	movs	r1, #193	@ 0xc1
 800481c:	f8a3 214c 	strh.w	r2, [r3, #332]	@ 0x14c
 8004820:	f8a3 1160 	strh.w	r1, [r3, #352]	@ 0x160
 8004824:	21fc      	movs	r1, #252	@ 0xfc
 8004826:	f8a3 4154 	strh.w	r4, [r3, #340]	@ 0x154
 800482a:	f8a3 1162 	strh.w	r1, [r3, #354]	@ 0x162
 800482e:	f04f 0108 	mov.w	r1, #8
 8004832:	f8a3 0156 	strh.w	r0, [r3, #342]	@ 0x156
 8004836:	f8a3 2158 	strh.w	r2, [r3, #344]	@ 0x158
 800483a:	4817      	ldr	r0, [pc, #92]	@ (8004898 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a0>)
 800483c:	f8a3 2164 	strh.w	r2, [r3, #356]	@ 0x164
 8004840:	f8a3 1166 	strh.w	r1, [r3, #358]	@ 0x166
 8004844:	4c15      	ldr	r4, [pc, #84]	@ (800489c <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a4>)
 8004846:	f883 7150 	strb.w	r7, [r3, #336]	@ 0x150
 800484a:	f8a3 6152 	strh.w	r6, [r3, #338]	@ 0x152
 800484e:	4b14      	ldr	r3, [pc, #80]	@ (80048a0 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3a8>)
 8004850:	4914      	ldr	r1, [pc, #80]	@ (80048a4 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3ac>)
static Keyboard::CallbackArea callbackAreas[3] =
{
    {Rect(5, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_SHIFT_HIGHLIGHTED_ID},     // caps-lock
    {Rect(258, 149, 56, 40), 0, BITMAP_KEYBOARD_KEY_DELETE_HIGHLIGHTED_ID},  // backspace
    {Rect(5, 193, 56, 40), 0, BITMAP_KEYBOARD_KEY_NUM_HIGHLIGHTED_ID},       // mode
};
 8004852:	819d      	strh	r5, [r3, #12]
 8004854:	e9c3 4004 	strd	r4, r0, [r3, #16]
 8004858:	f04f 0404 	mov.w	r4, #4
 800485c:	839c      	strh	r4, [r3, #28]
 800485e:	4c12      	ldr	r4, [pc, #72]	@ (80048a8 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b0>)
 8004860:	e9c3 1000 	strd	r1, r0, [r3]
 8004864:	e9c3 4008 	strd	r4, r0, [r3, #32]
 8004868:	2100      	movs	r1, #0
 800486a:	f04f 0006 	mov.w	r0, #6
 800486e:	6199      	str	r1, [r3, #24]
 8004870:	8598      	strh	r0, [r3, #44]	@ 0x2c
 8004872:	6099      	str	r1, [r3, #8]
 8004874:	6299      	str	r1, [r3, #40]	@ 0x28
 8004876:	4b0d      	ldr	r3, [pc, #52]	@ (80048ac <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b4>)
 8004878:	480d      	ldr	r0, [pc, #52]	@ (80048b0 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3b8>)
 800487a:	831a      	strh	r2, [r3, #24]
        : typedTextId(id)
 800487c:	4a0d      	ldr	r2, [pc, #52]	@ (80048b4 <_GLOBAL__sub_I__ZN14CustomKeyboardC2Ev+0x3bc>)
 800487e:	f8a3 8012 	strh.w	r8, [r3, #18]
 8004882:	61da      	str	r2, [r3, #28]
        : color(col)
 8004884:	f06f 427f 	mvn.w	r2, #4278190080	@ 0xff000000
        : x(rectX), y(rectY), width(rectWidth), height(rectHeight)
 8004888:	6158      	str	r0, [r3, #20]
 800488a:	8419      	strh	r1, [r3, #32]
        : color(col)
 800488c:	625a      	str	r2, [r3, #36]	@ 0x24
 800488e:	62d9      	str	r1, [r3, #44]	@ 0x2c
 8004890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004894:	2400b19c 	.word	0x2400b19c
 8004898:	00280038 	.word	0x00280038
 800489c:	00950102 	.word	0x00950102
 80048a0:	2400b16c 	.word	0x2400b16c
 80048a4:	00950005 	.word	0x00950005
 80048a8:	00c10005 	.word	0x00c10005
 80048ac:	24000038 	.word	0x24000038
 80048b0:	0134000a 	.word	0x0134000a
 80048b4:	080245cc 	.word	0x080245cc

080048b8 <_ZN19FrontendApplicationD1Ev>:

class FrontendApplication : public FrontendApplicationBase
{
public:
    FrontendApplication(Model& m, FrontendHeap& heap);
    virtual ~FrontendApplication() { }
 80048b8:	4770      	bx	lr

080048ba <_ZN19FrontendApplicationD0Ev>:
 80048ba:	b510      	push	{r4, lr}
 80048bc:	4604      	mov	r4, r0
 80048be:	f44f 71ae 	mov.w	r1, #348	@ 0x15c
 80048c2:	f01c fbb0 	bl	8021026 <_ZdlPvj>
 80048c6:	4620      	mov	r0, r4
 80048c8:	bd10      	pop	{r4, pc}

080048ca <_ZN19FrontendApplication15handleTickEventEv>:

    virtual void handleTickEvent()
 80048ca:	b510      	push	{r4, lr}
 80048cc:	4604      	mov	r4, r0
    {
        model.tick();
 80048ce:	f8d0 0158 	ldr.w	r0, [r0, #344]	@ 0x158
 80048d2:	f000 f812 	bl	80048fa <_ZN5Model4tickEv>
        FrontendApplicationBase::handleTickEvent();
 80048d6:	4620      	mov	r0, r4
    }
 80048d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        FrontendApplicationBase::handleTickEvent();
 80048dc:	f00e be30 	b.w	8013540 <_ZN8touchgfx11Application15handleTickEventEv>

080048e0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap>:
#include <gui/common/FrontendApplication.hpp>

FrontendApplication::FrontendApplication(Model& m, FrontendHeap& heap)
 80048e0:	b510      	push	{r4, lr}
 80048e2:	4604      	mov	r4, r0
    : FrontendApplicationBase(m, heap)
 80048e4:	f7ff fbae 	bl	8004044 <_ZN23FrontendApplicationBaseC1ER5ModelR12FrontendHeap>
 80048e8:	4b01      	ldr	r3, [pc, #4]	@ (80048f0 <_ZN19FrontendApplicationC1ER5ModelR12FrontendHeap+0x10>)
{

}
 80048ea:	4620      	mov	r0, r4
    : FrontendApplicationBase(m, heap)
 80048ec:	6023      	str	r3, [r4, #0]
}
 80048ee:	bd10      	pop	{r4, pc}
 80048f0:	08024bfc 	.word	0x08024bfc

080048f4 <_ZN5ModelC1Ev>:
#include <gui/model/Model.hpp>
#include <gui/model/ModelListener.hpp>

Model::Model() : modelListener(0)
 80048f4:	2200      	movs	r2, #0
 80048f6:	6002      	str	r2, [r0, #0]
{

}
 80048f8:	4770      	bx	lr

080048fa <_ZN5Model4tickEv>:

void Model::tick()
{

}
 80048fa:	4770      	bx	lr

080048fc <_ZN22WelcomeScreenPresenterD1Ev>:
     * The deactivate function is called automatically when this screen is "switched out"
     * (ie. made inactive). Teardown functionality can be placed here.
     */
    virtual void deactivate();

    virtual ~WelcomeScreenPresenter() {}
 80048fc:	4770      	bx	lr

080048fe <_ZThn4_N22WelcomeScreenPresenterD1Ev>:
 80048fe:	3804      	subs	r0, #4
 8004900:	4770      	bx	lr

08004902 <_ZN22WelcomeScreenPresenter10deactivateEv>:
}

void WelcomeScreenPresenter::activate()
{

}
 8004902:	4770      	bx	lr

08004904 <_ZN22WelcomeScreenPresenterD0Ev>:
 8004904:	b510      	push	{r4, lr}
 8004906:	4604      	mov	r4, r0
 8004908:	2110      	movs	r1, #16
 800490a:	f01c fb8c 	bl	8021026 <_ZdlPvj>
 800490e:	4620      	mov	r0, r4
 8004910:	bd10      	pop	{r4, pc}

08004912 <_ZThn4_N22WelcomeScreenPresenterD0Ev>:
 8004912:	f1a0 0004 	sub.w	r0, r0, #4
 8004916:	e7f5      	b.n	8004904 <_ZN22WelcomeScreenPresenterD0Ev>

08004918 <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView>:
    ModelListener() : model(0) {}
 8004918:	2200      	movs	r2, #0
    : view(v)
 800491a:	60c1      	str	r1, [r0, #12]
 800491c:	6082      	str	r2, [r0, #8]
 800491e:	4a02      	ldr	r2, [pc, #8]	@ (8004928 <_ZN22WelcomeScreenPresenterC1ER17WelcomeScreenView+0x10>)
 8004920:	6002      	str	r2, [r0, #0]
 8004922:	3218      	adds	r2, #24
 8004924:	6042      	str	r2, [r0, #4]
}
 8004926:	4770      	bx	lr
 8004928:	08024c50 	.word	0x08024c50

0800492c <_ZN17WelcomeScreenView14tearDownScreenEv>:
}

void WelcomeScreenView::tearDownScreen()
{
    WelcomeScreenViewBase::tearDownScreen();
}
 800492c:	4770      	bx	lr
	...

08004930 <_ZN17WelcomeScreenViewD1Ev>:

class WelcomeScreenView : public WelcomeScreenViewBase
{
public:
    WelcomeScreenView();
    virtual ~WelcomeScreenView() {}
 8004930:	4b03      	ldr	r3, [pc, #12]	@ (8004940 <_ZN17WelcomeScreenViewD1Ev+0x10>)
 8004932:	b510      	push	{r4, lr}
 8004934:	4604      	mov	r4, r0
 8004936:	6003      	str	r3, [r0, #0]
 8004938:	f7ff fd9f 	bl	800447a <_ZN21WelcomeScreenViewBaseD1Ev>
 800493c:	4620      	mov	r0, r4
 800493e:	bd10      	pop	{r4, pc}
 8004940:	08024c78 	.word	0x08024c78

08004944 <_ZN17WelcomeScreenViewD0Ev>:
 8004944:	b510      	push	{r4, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	f7ff fff2 	bl	8004930 <_ZN17WelcomeScreenViewD1Ev>
 800494c:	216c      	movs	r1, #108	@ 0x6c
 800494e:	4620      	mov	r0, r4
 8004950:	f01c fb69 	bl	8021026 <_ZdlPvj>
 8004954:	4620      	mov	r0, r4
 8004956:	bd10      	pop	{r4, pc}

08004958 <_ZN17WelcomeScreenViewC1Ev>:
WelcomeScreenView::WelcomeScreenView()
 8004958:	b510      	push	{r4, lr}
 800495a:	4604      	mov	r4, r0
 800495c:	f7ff fd96 	bl	800448c <_ZN21WelcomeScreenViewBaseC1Ev>
 8004960:	4b01      	ldr	r3, [pc, #4]	@ (8004968 <_ZN17WelcomeScreenViewC1Ev+0x10>)
}
 8004962:	4620      	mov	r0, r4
WelcomeScreenView::WelcomeScreenView()
 8004964:	6023      	str	r3, [r4, #0]
}
 8004966:	bd10      	pop	{r4, pc}
 8004968:	08024c78 	.word	0x08024c78

0800496c <_ZN17WelcomeScreenView11setupScreenEv>:
    WelcomeScreenViewBase::setupScreen();
 800496c:	f7ff bd86 	b.w	800447c <_ZN21WelcomeScreenViewBase11setupScreenEv>

08004970 <FT6X06_GetCapabilities>:
{
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 8004970:	2301      	movs	r3, #1
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8004972:	f44f 7248 	mov.w	r2, #800	@ 0x320
  
  return FT6X06_OK;
}
 8004976:	2000      	movs	r0, #0
  Capabilities->MultiTouch = 1;
 8004978:	800b      	strh	r3, [r1, #0]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 800497a:	2302      	movs	r3, #2
 800497c:	708b      	strb	r3, [r1, #2]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 800497e:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8004982:	e9c1 2301 	strd	r2, r3, [r1, #4]
}
 8004986:	4770      	bx	lr

08004988 <FT6X06_DeInit>:
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
  if(pObj->IsInitialized == 1U)
 8004988:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800498c:	2b01      	cmp	r3, #1
  {
    pObj->IsInitialized = 0;
 800498e:	bf04      	itt	eq
 8004990:	2300      	moveq	r3, #0
 8004992:	f880 3024 	strbeq.w	r3, [r0, #36]	@ 0x24
  }
  
  return FT6X06_OK;
}
 8004996:	2000      	movs	r0, #0
 8004998:	4770      	bx	lr

0800499a <FT6X06_ITStatus>:
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
}
 800499a:	2000      	movs	r0, #0
 800499c:	4770      	bx	lr

0800499e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800499e:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049a0:	6904      	ldr	r4, [r0, #16]
 80049a2:	8900      	ldrh	r0, [r0, #8]
 80049a4:	46a4      	mov	ip, r4
}
 80049a6:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80049aa:	4760      	bx	ip

080049ac <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80049ac:	b410      	push	{r4}
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049ae:	68c4      	ldr	r4, [r0, #12]
 80049b0:	8900      	ldrh	r0, [r0, #8]
 80049b2:	46a4      	mov	ip, r4
}
 80049b4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80049b8:	4760      	bx	ip

080049ba <FT6X06_GestureConfig>:
{
 80049ba:	b570      	push	{r4, r5, r6, lr}
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80049bc:	f100 0518 	add.w	r5, r0, #24
{
 80049c0:	460e      	mov	r6, r1
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80049c2:	7809      	ldrb	r1, [r1, #0]
 80049c4:	4628      	mov	r0, r5
 80049c6:	f000 f911 	bl	8004bec <ft6x06_radian_value>
 80049ca:	4604      	mov	r4, r0
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80049cc:	7931      	ldrb	r1, [r6, #4]
 80049ce:	4628      	mov	r0, r5
 80049d0:	f000 f918 	bl	8004c04 <ft6x06_offset_left_right>
 80049d4:	4404      	add	r4, r0
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80049d6:	7a31      	ldrb	r1, [r6, #8]
 80049d8:	4628      	mov	r0, r5
 80049da:	f000 f91f 	bl	8004c1c <ft6x06_offset_up_down>
 80049de:	4404      	add	r4, r0
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80049e0:	7b31      	ldrb	r1, [r6, #12]
 80049e2:	4628      	mov	r0, r5
 80049e4:	f000 f926 	bl	8004c34 <ft6x06_disatnce_left_right>
 80049e8:	4404      	add	r4, r0
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 80049ea:	7c31      	ldrb	r1, [r6, #16]
 80049ec:	4628      	mov	r0, r5
 80049ee:	f000 f92d 	bl	8004c4c <ft6x06_distance_up_down>
 80049f2:	4404      	add	r4, r0
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 80049f4:	7d31      	ldrb	r1, [r6, #20]
 80049f6:	4628      	mov	r0, r5
 80049f8:	f000 f934 	bl	8004c64 <ft6x06_distance_zoom>
  if(ret != FT6X06_OK)
 80049fc:	42c4      	cmn	r4, r0
}
 80049fe:	bf14      	ite	ne
 8004a00:	f04f 30ff 	movne.w	r0, #4294967295
 8004a04:	2000      	moveq	r0, #0
 8004a06:	bd70      	pop	{r4, r5, r6, pc}

08004a08 <FT6X06_ReadID>:
{
 8004a08:	b513      	push	{r0, r1, r4, lr}
 8004a0a:	460c      	mov	r4, r1
  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8004a0c:	3018      	adds	r0, #24
 8004a0e:	f10d 0107 	add.w	r1, sp, #7
 8004a12:	f000 f93f 	bl	8004c94 <ft6x06_chip_id>
  *Id = (uint32_t) ft6x06_id;
 8004a16:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8004a1a:	6023      	str	r3, [r4, #0]
}
 8004a1c:	b002      	add	sp, #8
 8004a1e:	bd10      	pop	{r4, pc}

08004a20 <FT6X06_GetState>:
{
 8004a20:	b537      	push	{r0, r1, r2, r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004a22:	f100 0518 	add.w	r5, r0, #24
{
 8004a26:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004a28:	a901      	add	r1, sp, #4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 f8d1 	bl	8004bd2 <ft6x06_td_status>
 8004a30:	bb08      	cbnz	r0, 8004a76 <FT6X06_GetState+0x56>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004a32:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004a36:	2b02      	cmp	r3, #2
 8004a38:	bf98      	it	ls
 8004a3a:	4618      	movls	r0, r3
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004a3c:	2304      	movs	r3, #4
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004a3e:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004a40:	2103      	movs	r1, #3
 8004a42:	4628      	mov	r0, r5
 8004a44:	eb0d 0203 	add.w	r2, sp, r3
 8004a48:	f000 f8b0 	bl	8004bac <ft6x06_read_reg>
 8004a4c:	b9b0      	cbnz	r0, 8004a7c <FT6X06_GetState+0x5c>
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004a4e:	f89d 3004 	ldrb.w	r3, [sp, #4]
 8004a52:	f89d 2005 	ldrb.w	r2, [sp, #5]
 8004a56:	021b      	lsls	r3, r3, #8
 8004a58:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a5c:	4313      	orrs	r3, r2
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004a5e:	f89d 2007 	ldrb.w	r2, [sp, #7]
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004a62:	6063      	str	r3, [r4, #4]
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004a64:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004a68:	021b      	lsls	r3, r3, #8
 8004a6a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	60a3      	str	r3, [r4, #8]
}
 8004a72:	b003      	add	sp, #12
 8004a74:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004a76:	f04f 30ff 	mov.w	r0, #4294967295
 8004a7a:	e7df      	b.n	8004a3c <FT6X06_GetState+0x1c>
    ret = FT6X06_ERROR;
 8004a7c:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 8004a80:	e7f7      	b.n	8004a72 <FT6X06_GetState+0x52>

08004a82 <FT6X06_GetGesture>:
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 8004a82:	3018      	adds	r0, #24
 8004a84:	f000 b8a0 	b.w	8004bc8 <ft6x06_gest_id>

08004a88 <FT6X06_EnableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 8004a88:	2101      	movs	r1, #1
 8004a8a:	3018      	adds	r0, #24
 8004a8c:	f000 b8f6 	b.w	8004c7c <ft6x06_g_mode>

08004a90 <FT6X06_DisableIT>:
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 8004a90:	2100      	movs	r1, #0
 8004a92:	3018      	adds	r0, #24
 8004a94:	f000 b8f2 	b.w	8004c7c <ft6x06_g_mode>

08004a98 <FT6X06_Init>:
{
 8004a98:	b510      	push	{r4, lr}
  if(pObj->IsInitialized == 0U)
 8004a9a:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
{
 8004a9e:	4604      	mov	r4, r0
  if(pObj->IsInitialized == 0U)
 8004aa0:	b96b      	cbnz	r3, 8004abe <FT6X06_Init+0x26>
    pObj->IO.Init();
 8004aa2:	6803      	ldr	r3, [r0, #0]
 8004aa4:	4798      	blx	r3
    ret += FT6X06_DisableIT(pObj);
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7ff fff2 	bl	8004a90 <FT6X06_DisableIT>
  if(ret != FT6X06_OK)
 8004aac:	3800      	subs	r0, #0
    pObj->IsInitialized = 1;
 8004aae:	f04f 0301 	mov.w	r3, #1
  if(ret != FT6X06_OK)
 8004ab2:	bf18      	it	ne
 8004ab4:	2001      	movne	r0, #1
    pObj->IsInitialized = 1;
 8004ab6:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
  if(ret != FT6X06_OK)
 8004aba:	4240      	negs	r0, r0
}
 8004abc:	bd10      	pop	{r4, pc}
    ret += FT6X06_DisableIT(pObj);
 8004abe:	2000      	movs	r0, #0
  return ret;
 8004ac0:	e7fc      	b.n	8004abc <FT6X06_Init+0x24>

08004ac2 <FT6X06_ClearIT>:
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
 8004ac2:	2000      	movs	r0, #0
 8004ac4:	4770      	bx	lr

08004ac6 <FT6X06_GetMultiTouchState>:
{
 8004ac6:	b530      	push	{r4, r5, lr}
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004ac8:	f100 0518 	add.w	r5, r0, #24
{
 8004acc:	b085      	sub	sp, #20
 8004ace:	460c      	mov	r4, r1
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8004ad0:	4628      	mov	r0, r5
 8004ad2:	a901      	add	r1, sp, #4
 8004ad4:	f000 f87d 	bl	8004bd2 <ft6x06_td_status>
 8004ad8:	2800      	cmp	r0, #0
 8004ada:	d145      	bne.n	8004b68 <FT6X06_GetMultiTouchState+0xa2>
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8004adc:	f89d 3004 	ldrb.w	r3, [sp, #4]
      ret = (int32_t)nb_touch;
 8004ae0:	2b02      	cmp	r3, #2
 8004ae2:	bf98      	it	ls
 8004ae4:	4618      	movls	r0, r3
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8004ae6:	6020      	str	r0, [r4, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 8004ae8:	230c      	movs	r3, #12
 8004aea:	aa01      	add	r2, sp, #4
 8004aec:	2103      	movs	r1, #3
 8004aee:	4628      	mov	r0, r5
 8004af0:	f000 f85c 	bl	8004bac <ft6x06_read_reg>
 8004af4:	2800      	cmp	r0, #0
 8004af6:	d13a      	bne.n	8004b6e <FT6X06_GetMultiTouchState+0xa8>
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004af8:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8004afc:	f89d 1005 	ldrb.w	r1, [sp, #5]
 8004b00:	0213      	lsls	r3, r2, #8
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004b02:	0992      	lsrs	r2, r2, #6
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b04:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 8004b08:	61e2      	str	r2, [r4, #28]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b0a:	430b      	orrs	r3, r1
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004b0c:	f89d 1007 	ldrb.w	r1, [sp, #7]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b10:	f89d 200a 	ldrb.w	r2, [sp, #10]
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 8004b14:	6063      	str	r3, [r4, #4]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004b16:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8004b1a:	021b      	lsls	r3, r3, #8
 8004b1c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b20:	430b      	orrs	r3, r1
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b22:	f89d 100b 	ldrb.w	r1, [sp, #11]
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 8004b26:	60e3      	str	r3, [r4, #12]
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8004b28:	f89d 3008 	ldrb.w	r3, [sp, #8]
 8004b2c:	6163      	str	r3, [r4, #20]
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8004b2e:	f89d 3009 	ldrb.w	r3, [sp, #9]
 8004b32:	091b      	lsrs	r3, r3, #4
 8004b34:	6263      	str	r3, [r4, #36]	@ 0x24
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b36:	0213      	lsls	r3, r2, #8
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004b38:	0992      	lsrs	r2, r2, #6
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b3a:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 8004b3e:	6222      	str	r2, [r4, #32]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b40:	430b      	orrs	r3, r1
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004b42:	f89d 100d 	ldrb.w	r1, [sp, #13]
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 8004b46:	60a3      	str	r3, [r4, #8]
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 8004b48:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8004b4c:	021b      	lsls	r3, r3, #8
 8004b4e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004b52:	430b      	orrs	r3, r1
 8004b54:	6123      	str	r3, [r4, #16]
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8004b56:	f89d 300e 	ldrb.w	r3, [sp, #14]
 8004b5a:	61a3      	str	r3, [r4, #24]
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 8004b5c:	f89d 300f 	ldrb.w	r3, [sp, #15]
 8004b60:	091b      	lsrs	r3, r3, #4
 8004b62:	62a3      	str	r3, [r4, #40]	@ 0x28
}
 8004b64:	b005      	add	sp, #20
 8004b66:	bd30      	pop	{r4, r5, pc}
    ret = FT6X06_ERROR;
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e7bb      	b.n	8004ae6 <FT6X06_GetMultiTouchState+0x20>
    ret = FT6X06_ERROR;
 8004b6e:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;  
 8004b72:	e7f7      	b.n	8004b64 <FT6X06_GetMultiTouchState+0x9e>

08004b74 <FT6X06_RegisterBusIO>:
  if (pObj == NULL)
 8004b74:	b190      	cbz	r0, 8004b9c <FT6X06_RegisterBusIO+0x28>
    pObj->IO.DeInit    = pIO->DeInit;
 8004b76:	684a      	ldr	r2, [r1, #4]
    pObj->IO.Init      = pIO->Init;
 8004b78:	680b      	ldr	r3, [r1, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004b7a:	6042      	str	r2, [r0, #4]
    pObj->IO.Address   = pIO->Address;
 8004b7c:	890a      	ldrh	r2, [r1, #8]
    pObj->IO.Init      = pIO->Init;
 8004b7e:	6003      	str	r3, [r0, #0]
    pObj->IO.Address   = pIO->Address;
 8004b80:	8102      	strh	r2, [r0, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b82:	68ca      	ldr	r2, [r1, #12]
 8004b84:	60c2      	str	r2, [r0, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004b86:	690a      	ldr	r2, [r1, #16]
 8004b88:	6102      	str	r2, [r0, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b8a:	694a      	ldr	r2, [r1, #20]
    pObj->Ctx.handle   = pObj;
 8004b8c:	6200      	str	r0, [r0, #32]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b8e:	6142      	str	r2, [r0, #20]
    pObj->Ctx.ReadReg  = ReadRegWrap;
 8004b90:	4a04      	ldr	r2, [pc, #16]	@ (8004ba4 <FT6X06_RegisterBusIO+0x30>)
 8004b92:	61c2      	str	r2, [r0, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 8004b94:	4a04      	ldr	r2, [pc, #16]	@ (8004ba8 <FT6X06_RegisterBusIO+0x34>)
 8004b96:	6182      	str	r2, [r0, #24]
    if(pObj->IO.Init != NULL)
 8004b98:	b103      	cbz	r3, 8004b9c <FT6X06_RegisterBusIO+0x28>
      ret = pObj->IO.Init();
 8004b9a:	4718      	bx	r3
}
 8004b9c:	f04f 30ff 	mov.w	r0, #4294967295
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	0800499f 	.word	0x0800499f
 8004ba8:	080049ad 	.word	0x080049ad

08004bac <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 8004bac:	b410      	push	{r4}
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004bae:	e9d0 4001 	ldrd	r4, r0, [r0, #4]
 8004bb2:	46a4      	mov	ip, r4
}
 8004bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004bb8:	4760      	bx	ip

08004bba <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8004bba:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004bbc:	6804      	ldr	r4, [r0, #0]
 8004bbe:	6880      	ldr	r0, [r0, #8]
 8004bc0:	46a4      	mov	ip, r4
}
 8004bc2:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8004bc6:	4760      	bx	ip

08004bc8 <ft6x06_gest_id>:
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004bc8:	2301      	movs	r3, #1
{
 8004bca:	460a      	mov	r2, r1
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 8004bcc:	4619      	mov	r1, r3
 8004bce:	f7ff bfed 	b.w	8004bac <ft6x06_read_reg>

08004bd2 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004bd2:	b510      	push	{r4, lr}
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004bd4:	460a      	mov	r2, r1
{
 8004bd6:	460c      	mov	r4, r1
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 8004bd8:	2301      	movs	r3, #1
 8004bda:	2102      	movs	r1, #2
 8004bdc:	f7ff ffe6 	bl	8004bac <ft6x06_read_reg>
  
  if(ret == 0)
 8004be0:	b918      	cbnz	r0, 8004bea <ft6x06_td_status+0x18>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8004be2:	7823      	ldrb	r3, [r4, #0]
 8004be4:	f003 030f 	and.w	r3, r3, #15
 8004be8:	7023      	strb	r3, [r4, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
  }
  
  return ret;
}
 8004bea:	bd10      	pop	{r4, pc}

08004bec <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004bec:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004bee:	2301      	movs	r3, #1
{
 8004bf0:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 8004bf4:	f10d 0207 	add.w	r2, sp, #7
 8004bf8:	2191      	movs	r1, #145	@ 0x91
 8004bfa:	f7ff ffde 	bl	8004bba <ft6x06_write_reg>
}
 8004bfe:	b003      	add	sp, #12
 8004c00:	f85d fb04 	ldr.w	pc, [sp], #4

08004c04 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c04:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004c06:	2301      	movs	r3, #1
{
 8004c08:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 8004c0c:	f10d 0207 	add.w	r2, sp, #7
 8004c10:	2192      	movs	r1, #146	@ 0x92
 8004c12:	f7ff ffd2 	bl	8004bba <ft6x06_write_reg>
}
 8004c16:	b003      	add	sp, #12
 8004c18:	f85d fb04 	ldr.w	pc, [sp], #4

08004c1c <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c1c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004c1e:	2301      	movs	r3, #1
{
 8004c20:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 8004c24:	f10d 0207 	add.w	r2, sp, #7
 8004c28:	2193      	movs	r1, #147	@ 0x93
 8004c2a:	f7ff ffc6 	bl	8004bba <ft6x06_write_reg>
}
 8004c2e:	b003      	add	sp, #12
 8004c30:	f85d fb04 	ldr.w	pc, [sp], #4

08004c34 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c34:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004c36:	2301      	movs	r3, #1
{
 8004c38:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8004c3c:	f10d 0207 	add.w	r2, sp, #7
 8004c40:	2194      	movs	r1, #148	@ 0x94
 8004c42:	f7ff ffba 	bl	8004bba <ft6x06_write_reg>
}
 8004c46:	b003      	add	sp, #12
 8004c48:	f85d fb04 	ldr.w	pc, [sp], #4

08004c4c <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c4c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004c4e:	2301      	movs	r3, #1
{
 8004c50:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8004c54:	f10d 0207 	add.w	r2, sp, #7
 8004c58:	2195      	movs	r1, #149	@ 0x95
 8004c5a:	f7ff ffae 	bl	8004bba <ft6x06_write_reg>
}
 8004c5e:	b003      	add	sp, #12
 8004c60:	f85d fb04 	ldr.w	pc, [sp], #4

08004c64 <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c64:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004c66:	2301      	movs	r3, #1
{
 8004c68:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8004c6c:	f10d 0207 	add.w	r2, sp, #7
 8004c70:	2196      	movs	r1, #150	@ 0x96
 8004c72:	f7ff ffa2 	bl	8004bba <ft6x06_write_reg>
}
 8004c76:	b003      	add	sp, #12
 8004c78:	f85d fb04 	ldr.w	pc, [sp], #4

08004c7c <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8004c7c:	b507      	push	{r0, r1, r2, lr}
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004c7e:	2301      	movs	r3, #1
{
 8004c80:	f88d 1007 	strb.w	r1, [sp, #7]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8004c84:	f10d 0207 	add.w	r2, sp, #7
 8004c88:	21a4      	movs	r1, #164	@ 0xa4
 8004c8a:	f7ff ff96 	bl	8004bba <ft6x06_write_reg>
}
 8004c8e:	b003      	add	sp, #12
 8004c90:	f85d fb04 	ldr.w	pc, [sp], #4

08004c94 <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8004c94:	460a      	mov	r2, r1
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8004c96:	2301      	movs	r3, #1
 8004c98:	21a8      	movs	r1, #168	@ 0xa8
 8004c9a:	f7ff bf87 	b.w	8004bac <ft6x06_read_reg>
	...

08004ca0 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004ca0:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8004ca2:	2201      	movs	r2, #1
 8004ca4:	4b07      	ldr	r3, [pc, #28]	@ (8004cc4 <IS42S32800J_ClockEnable+0x24>)
  Command.CommandTarget          = Interface;
 8004ca6:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
 8004caa:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8004cac:	2200      	movs	r2, #0

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004cae:	4619      	mov	r1, r3
  Command.ModeRegisterDefinition = 0;
 8004cb0:	60da      	str	r2, [r3, #12]
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004cb2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cb6:	f006 fd75 	bl	800b7a4 <HAL_SDRAM_SendCommand>
 8004cba:	3800      	subs	r0, #0
 8004cbc:	bf18      	it	ne
 8004cbe:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004cc0:	4240      	negs	r0, r0
 8004cc2:	bd08      	pop	{r3, pc}
 8004cc4:	2400b304 	.word	0x2400b304

08004cc8 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8004cc8:	b508      	push	{r3, lr}
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8004cca:	2202      	movs	r2, #2
 8004ccc:	4b08      	ldr	r3, [pc, #32]	@ (8004cf0 <IS42S32800J_Precharge+0x28>)
  Command.CommandTarget          = Interface;
 8004cce:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 1;
  Command.ModeRegisterDefinition = 0;
 8004cd2:	2101      	movs	r1, #1
 8004cd4:	2200      	movs	r2, #0
 8004cd6:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004cda:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004cde:	4619      	mov	r1, r3
 8004ce0:	f006 fd60 	bl	800b7a4 <HAL_SDRAM_SendCommand>
 8004ce4:	3800      	subs	r0, #0
 8004ce6:	bf18      	it	ne
 8004ce8:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004cea:	4240      	negs	r0, r0
 8004cec:	bd08      	pop	{r3, pc}
 8004cee:	bf00      	nop
 8004cf0:	2400b304 	.word	0x2400b304

08004cf4 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8004cf4:	460a      	mov	r2, r1
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004cf6:	e9d1 3103 	ldrd	r3, r1, [r1, #12]
{
 8004cfa:	b510      	push	{r4, lr}
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004cfc:	430b      	orrs	r3, r1
                     pRegMode->BurstType     |\
 8004cfe:	6951      	ldr	r1, [r2, #20]
                     pRegMode->CASLatency    |\
                     pRegMode->OperationMode |\
                     pRegMode->WriteBurstMode;
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d00:	2404      	movs	r4, #4
                     pRegMode->BurstType     |\
 8004d02:	430b      	orrs	r3, r1
                     pRegMode->CASLatency    |\
 8004d04:	6991      	ldr	r1, [r2, #24]
 8004d06:	430b      	orrs	r3, r1
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d08:	69d1      	ldr	r1, [r2, #28]
  Command.CommandTarget          = pRegMode->TargetBank;
 8004d0a:	6812      	ldr	r2, [r2, #0]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8004d0c:	430b      	orrs	r3, r1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d0e:	4907      	ldr	r1, [pc, #28]	@ (8004d2c <IS42S32800J_ModeRegConfig+0x38>)
  Command.CommandTarget          = pRegMode->TargetBank;
 8004d10:	604a      	str	r2, [r1, #4]
  Command.AutoRefreshNumber      = 1;
 8004d12:	2201      	movs	r2, #1
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8004d14:	600c      	str	r4, [r1, #0]
  Command.ModeRegisterDefinition = tmpmrd;
 8004d16:	e9c1 2302 	strd	r2, r3, [r1, #8]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d1a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d1e:	f006 fd41 	bl	800b7a4 <HAL_SDRAM_SendCommand>
 8004d22:	3800      	subs	r0, #0
 8004d24:	bf18      	it	ne
 8004d26:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d28:	4240      	negs	r0, r0
 8004d2a:	bd10      	pop	{r4, pc}
 8004d2c:	2400b304 	.word	0x2400b304

08004d30 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8004d30:	b508      	push	{r3, lr}
  Command.CommandMode            = RefreshMode;
 8004d32:	4b08      	ldr	r3, [pc, #32]	@ (8004d54 <IS42S32800J_RefreshMode+0x24>)
  Command.CommandTarget          = Interface;
 8004d34:	e9c3 2100 	strd	r2, r1, [r3]
  Command.AutoRefreshNumber      = 8;
  Command.ModeRegisterDefinition = 0;
 8004d38:	2108      	movs	r1, #8
 8004d3a:	2200      	movs	r2, #0
 8004d3c:	e9c3 1202 	strd	r1, r2, [r3, #8]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8004d40:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8004d44:	4619      	mov	r1, r3
 8004d46:	f006 fd2d 	bl	800b7a4 <HAL_SDRAM_SendCommand>
 8004d4a:	3800      	subs	r0, #0
 8004d4c:	bf18      	it	ne
 8004d4e:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d50:	4240      	negs	r0, r0
 8004d52:	bd08      	pop	{r3, pc}
 8004d54:	2400b304 	.word	0x2400b304

08004d58 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8004d58:	b508      	push	{r3, lr}
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8004d5a:	f006 fd42 	bl	800b7e2 <HAL_SDRAM_ProgramRefreshRate>
 8004d5e:	3800      	subs	r0, #0
 8004d60:	bf18      	it	ne
 8004d62:	2001      	movne	r0, #1
  }
  else
  {
    return IS42S32800J_OK;
  }
}
 8004d64:	4240      	negs	r0, r0
 8004d66:	bd08      	pop	{r3, pc}

08004d68 <IS42S32800J_Init>:
{
 8004d68:	b570      	push	{r4, r5, r6, lr}
 8004d6a:	460c      	mov	r4, r1
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004d6c:	6809      	ldr	r1, [r1, #0]
{
 8004d6e:	4605      	mov	r5, r0
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004d70:	f7ff ff96 	bl	8004ca0 <IS42S32800J_ClockEnable>
 8004d74:	b110      	cbz	r0, 8004d7c <IS42S32800J_Init+0x14>
  int32_t ret = IS42S32800J_ERROR;
 8004d76:	f04f 30ff 	mov.w	r0, #4294967295
}
 8004d7a:	bd70      	pop	{r4, r5, r6, pc}
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8004d7c:	f001 fc7c 	bl	8006678 <HAL_GetTick>
 8004d80:	4606      	mov	r6, r0
  while((HAL_GetTick() - tickstart) < Delay)
 8004d82:	f001 fc79 	bl	8006678 <HAL_GetTick>
 8004d86:	4286      	cmp	r6, r0
 8004d88:	d0fb      	beq.n	8004d82 <IS42S32800J_Init+0x1a>
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8004d8a:	6821      	ldr	r1, [r4, #0]
 8004d8c:	4628      	mov	r0, r5
 8004d8e:	f7ff ff9b 	bl	8004cc8 <IS42S32800J_Precharge>
 8004d92:	2800      	cmp	r0, #0
 8004d94:	d1ef      	bne.n	8004d76 <IS42S32800J_Init+0xe>
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8004d96:	4628      	mov	r0, r5
 8004d98:	e9d4 1200 	ldrd	r1, r2, [r4]
 8004d9c:	f7ff ffc8 	bl	8004d30 <IS42S32800J_RefreshMode>
 8004da0:	2800      	cmp	r0, #0
 8004da2:	d1e8      	bne.n	8004d76 <IS42S32800J_Init+0xe>
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8004da4:	4621      	mov	r1, r4
 8004da6:	4628      	mov	r0, r5
 8004da8:	f7ff ffa4 	bl	8004cf4 <IS42S32800J_ModeRegConfig>
 8004dac:	2800      	cmp	r0, #0
 8004dae:	d1e2      	bne.n	8004d76 <IS42S32800J_Init+0xe>
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8004db0:	68a1      	ldr	r1, [r4, #8]
 8004db2:	4628      	mov	r0, r5
 8004db4:	f7ff ffd0 	bl	8004d58 <IS42S32800J_RefreshRate>
 8004db8:	3800      	subs	r0, #0
 8004dba:	bf18      	it	ne
 8004dbc:	2001      	movne	r0, #1
 8004dbe:	4240      	negs	r0, r0
  return ret;
 8004dc0:	e7db      	b.n	8004d7a <IS42S32800J_Init+0x12>

08004dc2 <MT25TL01G_GetFlashInfo>:
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004dc2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8004dc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004dca:	f44f 7180 	mov.w	r1, #256	@ 0x100
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8004dce:	e9c0 2300 	strd	r2, r3, [r0]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8004dd2:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8004dd6:	e9c0 3102 	strd	r3, r1, [r0, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8004dda:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8004dde:	6103      	str	r3, [r0, #16]
  return MT25TL01G_OK;
}
 8004de0:	2000      	movs	r0, #0
 8004de2:	4770      	bx	lr

08004de4 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004de4:	b500      	push	{lr}

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004de6:	f44f 7340 	mov.w	r3, #768	@ 0x300
{
 8004dea:	b095      	sub	sp, #84	@ 0x54
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004dec:	f04f 7240 	mov.w	r2, #50331648	@ 0x3000000
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8004df0:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004df2:	2305      	movs	r3, #5
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8004df4:	920f      	str	r2, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 2;
 8004df6:	2202      	movs	r2, #2
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8004df8:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004dfa:	2300      	movs	r3, #0
  s_command.DummyCycles       = 2;
 8004dfc:	920b      	str	r2, [sp, #44]	@ 0x2c
  s_config.Interval        = 0x10;
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
  s_config.StatusBytesSize = 2;

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004dfe:	a906      	add	r1, sp, #24
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e00:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_config.Match           = 0;
 8004e02:	9300      	str	r3, [sp, #0]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004e04:	9304      	str	r3, [sp, #16]
  s_config.StatusBytesSize = 2;
 8004e06:	9203      	str	r2, [sp, #12]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e08:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e0a:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e0e:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  s_config.Interval        = 0x10;
 8004e12:	2310      	movs	r3, #16
 8004e14:	9302      	str	r3, [sp, #8]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8004e16:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8004e1a:	9305      	str	r3, [sp, #20]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8004e1c:	f240 1301 	movw	r3, #257	@ 0x101
 8004e20:	9301      	str	r3, [sp, #4]
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e22:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004e26:	f004 ff5e 	bl	8009ce6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004e2a:	2800      	cmp	r0, #0

}
 8004e2c:	bf14      	ite	ne
 8004e2e:	f06f 0004 	mvnne.w	r0, #4
 8004e32:	2000      	moveq	r0, #0
 8004e34:	b015      	add	sp, #84	@ 0x54
 8004e36:	f85d fb04 	ldr.w	pc, [sp], #4

08004e3a <MT25TL01G_WriteEnable>:
{
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e3a:	2903      	cmp	r1, #3
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e3c:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 8004e40:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e42:	bf08      	it	eq
 8004e44:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004e48:	b095      	sub	sp, #84	@ 0x54
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e4a:	bf18      	it	ne
 8004e4c:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004e50:	460c      	mov	r4, r1
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e52:	a906      	add	r1, sp, #24
{
 8004e54:	4605      	mov	r5, r0
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004e56:	930c      	str	r3, [sp, #48]	@ 0x30
  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8004e58:	2306      	movs	r3, #6
 8004e5a:	9306      	str	r3, [sp, #24]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004e5c:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004e5e:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_command.DataMode          = QSPI_DATA_NONE;
 8004e62:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DummyCycles       = 0;
 8004e64:	930b      	str	r3, [sp, #44]	@ 0x2c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004e66:	9313      	str	r3, [sp, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004e68:	e9cd 3311 	strd	r3, r3, [sp, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e6c:	f004 fe3a 	bl	8009ae4 <HAL_QSPI_Command>
 8004e70:	bb20      	cbnz	r0, 8004ebc <MT25TL01G_WriteEnable+0x82>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004e72:	f240 2302 	movw	r3, #514	@ 0x202
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
  s_config.StatusBytesSize = 2;
  s_config.Interval        = 0x10;
 8004e76:	2202      	movs	r2, #2
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004e78:	2c03      	cmp	r4, #3
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004e7a:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8004e7e:	9004      	str	r0, [sp, #16]


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e80:	4628      	mov	r0, r5
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8004e82:	e9cd 3300 	strd	r3, r3, [sp]
  s_config.Interval        = 0x10;
 8004e86:	f04f 0310 	mov.w	r3, #16
 8004e8a:	e9cd 3202 	strd	r3, r2, [sp, #8]
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004e8e:	f04f 0305 	mov.w	r3, #5
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004e92:	466a      	mov	r2, sp
  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8004e94:	e9cd 1305 	strd	r1, r3, [sp, #20]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004e98:	bf14      	ite	ne
 8004e9a:	f04f 7380 	movne.w	r3, #16777216	@ 0x1000000
 8004e9e:	f04f 7340 	moveq.w	r3, #50331648	@ 0x3000000
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ea2:	a906      	add	r1, sp, #24
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8004ea4:	930f      	str	r3, [sp, #60]	@ 0x3c
  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004ea6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8004eaa:	f004 ff1c 	bl	8009ce6 <HAL_QSPI_AutoPolling>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
  }

  return MT25TL01G_OK;
 8004eae:	2800      	cmp	r0, #0
 8004eb0:	bf14      	ite	ne
 8004eb2:	f06f 0004 	mvnne.w	r0, #4
 8004eb6:	2000      	moveq	r0, #0
}
 8004eb8:	b015      	add	sp, #84	@ 0x54
 8004eba:	bd30      	pop	{r4, r5, pc}
    return MT25TL01G_ERROR_COMMAND;
 8004ebc:	f06f 0001 	mvn.w	r0, #1
 8004ec0:	e7fa      	b.n	8004eb8 <MT25TL01G_WriteEnable+0x7e>

08004ec2 <MT25TL01G_Enter4BytesAddressMode>:
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ec2:	2903      	cmp	r1, #3
{
 8004ec4:	b530      	push	{r4, r5, lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ec6:	bf08      	it	eq
 8004ec8:	f44f 7340 	moveq.w	r3, #768	@ 0x300
{
 8004ecc:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ece:	bf18      	it	ne
 8004ed0:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 8004ed4:	4604      	mov	r4, r0
 8004ed6:	460d      	mov	r5, r1
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8004ed8:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8004eda:	23b7      	movs	r3, #183	@ 0xb7
 8004edc:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004ede:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004ee0:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004ee4:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004ee6:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004ee8:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004eea:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8004eee:	f7ff ffa4 	bl	8004e3a <MT25TL01G_WriteEnable>
 8004ef2:	b118      	cbz	r0, 8004efc <MT25TL01G_Enter4BytesAddressMode+0x3a>
    return MT25TL01G_ERROR_COMMAND;
 8004ef4:	f06f 0001 	mvn.w	r0, #1
}
 8004ef8:	b00f      	add	sp, #60	@ 0x3c
 8004efa:	bd30      	pop	{r4, r5, pc}
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004efc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004f00:	4669      	mov	r1, sp
 8004f02:	4620      	mov	r0, r4
 8004f04:	f004 fdee 	bl	8009ae4 <HAL_QSPI_Command>
 8004f08:	2800      	cmp	r0, #0
 8004f0a:	d1f3      	bne.n	8004ef4 <MT25TL01G_Enter4BytesAddressMode+0x32>
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8004f0c:	4629      	mov	r1, r5
 8004f0e:	4620      	mov	r0, r4
 8004f10:	f7ff ff68 	bl	8004de4 <MT25TL01G_AutoPollingMemReady>
 8004f14:	2800      	cmp	r0, #0
 8004f16:	d0ef      	beq.n	8004ef8 <MT25TL01G_Enter4BytesAddressMode+0x36>
 8004f18:	e7ec      	b.n	8004ef4 <MT25TL01G_Enter4BytesAddressMode+0x32>

08004f1a <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004f1a:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f1c:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004f20:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f22:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f26:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004f28:	2335      	movs	r3, #53	@ 0x35
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f2a:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 8004f2c:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004f2e:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f30:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004f34:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004f36:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004f38:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f3a:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f3e:	f004 fdd1 	bl	8009ae4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004f42:	2800      	cmp	r0, #0
}
 8004f44:	bf14      	ite	ne
 8004f46:	f06f 0001 	mvnne.w	r0, #1
 8004f4a:	2000      	moveq	r0, #0
 8004f4c:	b00f      	add	sp, #60	@ 0x3c
 8004f4e:	f85d fb04 	ldr.w	pc, [sp], #4

08004f52 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8004f52:	b500      	push	{lr}
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f54:	f44f 7380 	mov.w	r3, #256	@ 0x100
{
 8004f58:	b08f      	sub	sp, #60	@ 0x3c
  s_command.DummyCycles       = 0;
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f5a:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f5e:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004f60:	23f5      	movs	r3, #245	@ 0xf5
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f62:	4669      	mov	r1, sp
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8004f64:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8004f66:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004f68:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8004f6c:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8004f6e:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004f70:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8004f72:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8004f76:	f004 fdb5 	bl	8009ae4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 8004f7a:	2800      	cmp	r0, #0
}
 8004f7c:	bf14      	ite	ne
 8004f7e:	f06f 0001 	mvnne.w	r0, #1
 8004f82:	2000      	moveq	r0, #0
 8004f84:	b00f      	add	sp, #60	@ 0x3c
 8004f86:	f85d fb04 	ldr.w	pc, [sp], #4

08004f8a <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8004f8a:	b500      	push	{lr}
 8004f8c:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8004f8e:	2903      	cmp	r1, #3
 8004f90:	d80e      	bhi.n	8004fb0 <MT25TL01G_EnableMemoryMappedModeDTR+0x26>
 8004f92:	e8df f001 	tbb	[pc, r1]
 8004f96:	2902      	.short	0x2902
 8004f98:	3f34      	.short	0x3f34
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004f9a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f9e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8004fa0:	230e      	movs	r3, #14
 8004fa2:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004fa8:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8004faa:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
    break;
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8004fae:	930b      	str	r3, [sp, #44]	@ 0x2c
    break;
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004fb0:	2208      	movs	r2, #8
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004fb2:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004fb6:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004fba:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8004fbc:	9207      	str	r2, [sp, #28]
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004fbe:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8004fc2:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fc4:	2300      	movs	r3, #0
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8004fc6:	e9cd c20d 	strd	ip, r2, [sp, #52]	@ 0x34
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004fca:	466a      	mov	r2, sp
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8004fcc:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8004fce:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8004fd0:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8004fd4:	f004 fed8 	bl	8009d88 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8004fd8:	2800      	cmp	r0, #0
}
 8004fda:	bf14      	ite	ne
 8004fdc:	f06f 0005 	mvnne.w	r0, #5
 8004fe0:	2000      	moveq	r0, #0
 8004fe2:	b011      	add	sp, #68	@ 0x44
 8004fe4:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004fe8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004fec:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 8004fee:	233d      	movs	r3, #61	@ 0x3d
 8004ff0:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8004ff2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004ff6:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8004ff8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8004ffc:	e7d7      	b.n	8004fae <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8004ffe:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005002:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8005004:	23ee      	movs	r3, #238	@ 0xee
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 8005006:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005008:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800500c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800500e:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005012:	e7cc      	b.n	8004fae <MT25TL01G_EnableMemoryMappedModeDTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005014:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8005018:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800501a:	23ed      	movs	r3, #237	@ 0xed
 800501c:	e7f3      	b.n	8005006 <MT25TL01G_EnableMemoryMappedModeDTR+0x7c>

0800501e <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800501e:	b500      	push	{lr}
 8005020:	b091      	sub	sp, #68	@ 0x44
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8005022:	2903      	cmp	r1, #3
 8005024:	d80e      	bhi.n	8005044 <MT25TL01G_EnableMemoryMappedModeSTR+0x26>
 8005026:	e8df f001 	tbb	[pc, r1]
 800502a:	2502      	.short	0x2502
 800502c:	3b30      	.short	0x3b30
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800502e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005032:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 8005034:	230c      	movs	r3, #12
 8005036:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8005038:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800503c:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_1_LINE;
 800503e:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8005042:	930b      	str	r3, [sp, #44]	@ 0x2c

    break;

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8005044:	2308      	movs	r3, #8

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
  s_mem_mapped_cfg.TimeOutPeriod     = 0;

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005046:	466a      	mov	r2, sp
 8005048:	a902      	add	r1, sp, #8
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 800504a:	9307      	str	r3, [sp, #28]
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800504c:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8005050:	9305      	str	r3, [sp, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8005052:	2300      	movs	r3, #0
 8005054:	930a      	str	r3, [sp, #40]	@ 0x28
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005056:	930f      	str	r3, [sp, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005058:	e9cd 330d 	strd	r3, r3, [sp, #52]	@ 0x34
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 800505c:	e9cd 3300 	strd	r3, r3, [sp]
  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8005060:	f004 fe92 	bl	8009d88 <HAL_QSPI_MemoryMapped>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
  }

  return MT25TL01G_OK;
 8005064:	2800      	cmp	r0, #0
}
 8005066:	bf14      	ite	ne
 8005068:	f06f 0005 	mvnne.w	r0, #5
 800506c:	2000      	moveq	r0, #0
 800506e:	b011      	add	sp, #68	@ 0x44
 8005070:	f85d fb04 	ldr.w	pc, [sp], #4
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8005074:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8005078:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800507a:	23bc      	movs	r3, #188	@ 0xbc
 800507c:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 800507e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8005082:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8005084:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8005088:	e7db      	b.n	8005042 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800508a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800508e:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8005090:	23ec      	movs	r3, #236	@ 0xec
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 8005092:	9302      	str	r3, [sp, #8]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8005094:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8005098:	9309      	str	r3, [sp, #36]	@ 0x24
    s_command.DataMode          = QSPI_DATA_4_LINES;
 800509a:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800509e:	e7d0      	b.n	8005042 <MT25TL01G_EnableMemoryMappedModeSTR+0x24>
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80050a0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80050a4:	9308      	str	r3, [sp, #32]
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80050a6:	23eb      	movs	r3, #235	@ 0xeb
 80050a8:	e7f3      	b.n	8005092 <MT25TL01G_EnableMemoryMappedModeSTR+0x74>

080050aa <MT25TL01G_ResetEnable>:
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050aa:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050ac:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80050b0:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050b2:	bf18      	it	ne
 80050b4:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80050b8:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050ba:	bf08      	it	eq
 80050bc:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050c0:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050c2:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 80050c4:	2366      	movs	r3, #102	@ 0x66
 80050c6:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80050c8:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80050ca:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 80050ce:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 80050d0:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80050d2:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80050d4:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050d8:	f004 fd04 	bl	8009ae4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 80050dc:	2800      	cmp	r0, #0
}
 80050de:	bf14      	ite	ne
 80050e0:	f06f 0001 	mvnne.w	r0, #1
 80050e4:	2000      	moveq	r0, #0
 80050e6:	b00f      	add	sp, #60	@ 0x3c
 80050e8:	f85d fb04 	ldr.w	pc, [sp], #4

080050ec <MT25TL01G_ResetMemory>:
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050ec:	2903      	cmp	r1, #3
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80050ee:	f241 3288 	movw	r2, #5000	@ 0x1388
{
 80050f2:	b500      	push	{lr}
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050f4:	bf18      	it	ne
 80050f6:	f44f 7380 	movne.w	r3, #256	@ 0x100
{
 80050fa:	b08f      	sub	sp, #60	@ 0x3c
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80050fc:	bf08      	it	eq
 80050fe:	f44f 7340 	moveq.w	r3, #768	@ 0x300
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005102:	4669      	mov	r1, sp
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8005104:	9306      	str	r3, [sp, #24]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 8005106:	2399      	movs	r3, #153	@ 0x99
 8005108:	9300      	str	r3, [sp, #0]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800510a:	2300      	movs	r3, #0
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800510c:	e9cd 3307 	strd	r3, r3, [sp, #28]
  s_command.DataMode          = QSPI_DATA_NONE;
 8005110:	9309      	str	r3, [sp, #36]	@ 0x24
  s_command.DummyCycles       = 0;
 8005112:	9305      	str	r3, [sp, #20]
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8005114:	930d      	str	r3, [sp, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8005116:	e9cd 330b 	strd	r3, r3, [sp, #44]	@ 0x2c
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800511a:	f004 fce3 	bl	8009ae4 <HAL_QSPI_Command>
  {
    return MT25TL01G_ERROR_COMMAND;
  }

  return MT25TL01G_OK;
 800511e:	2800      	cmp	r0, #0
}
 8005120:	bf14      	ite	ne
 8005122:	f06f 0001 	mvnne.w	r0, #1
 8005126:	2000      	moveq	r0, #0
 8005128:	b00f      	add	sp, #60	@ 0x3c
 800512a:	f85d fb04 	ldr.w	pc, [sp], #4

0800512e <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800512e:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8005130:	6884      	ldr	r4, [r0, #8]
 8005132:	8800      	ldrh	r0, [r0, #0]
 8005134:	46a4      	mov	ip, r4
}
 8005136:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 800513a:	4760      	bx	ip

0800513c <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800513c:	b410      	push	{r4}
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 800513e:	6844      	ldr	r4, [r0, #4]
 8005140:	8800      	ldrh	r0, [r0, #0]
 8005142:	46a4      	mov	ip, r4
}
 8005144:	f85d 4b04 	ldr.w	r4, [sp], #4
  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005148:	4760      	bx	ip

0800514a <OTM8009A_IO_Delay.isra.0>:

/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800514a:	b570      	push	{r4, r5, r6, lr}
{
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 800514c:	68c3      	ldr	r3, [r0, #12]
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
 800514e:	4604      	mov	r4, r0
 8005150:	460d      	mov	r5, r1
  tickstart = pObj->IO.GetTick();
 8005152:	4798      	blx	r3
 8005154:	4606      	mov	r6, r0
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8005156:	68e3      	ldr	r3, [r4, #12]
 8005158:	4798      	blx	r3
 800515a:	1b83      	subs	r3, r0, r6
 800515c:	42ab      	cmp	r3, r5
 800515e:	d3fa      	bcc.n	8005156 <OTM8009A_IO_Delay.isra.0+0xc>
  {
  }
  return OTM8009A_OK;
}
 8005160:	bd70      	pop	{r4, r5, r6, pc}
	...

08005164 <OTM8009A_Init>:
{
 8005164:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005168:	2300      	movs	r3, #0
 800516a:	f100 0510 	add.w	r5, r0, #16
{
 800516e:	4607      	mov	r7, r0
 8005170:	460e      	mov	r6, r1
 8005172:	4690      	mov	r8, r2
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005174:	4619      	mov	r1, r3
 8005176:	4ade      	ldr	r2, [pc, #888]	@ (80054f0 <OTM8009A_Init+0x38c>)
 8005178:	4628      	mov	r0, r5
 800517a:	f000 fb99 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800517e:	2303      	movs	r3, #3
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005180:	4604      	mov	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 8005182:	4adc      	ldr	r2, [pc, #880]	@ (80054f4 <OTM8009A_Init+0x390>)
 8005184:	21ff      	movs	r1, #255	@ 0xff
 8005186:	4628      	mov	r0, r5
 8005188:	f000 fb92 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800518c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800518e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005190:	4ad9      	ldr	r2, [pc, #868]	@ (80054f8 <OTM8009A_Init+0x394>)
 8005192:	4619      	mov	r1, r3
 8005194:	4628      	mov	r0, r5
 8005196:	f000 fb8b 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800519a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800519c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800519e:	4ad7      	ldr	r2, [pc, #860]	@ (80054fc <OTM8009A_Init+0x398>)
 80051a0:	21ff      	movs	r1, #255	@ 0xff
 80051a2:	4628      	mov	r0, r5
 80051a4:	f000 fb84 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051a8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80051aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80051ac:	4ad2      	ldr	r2, [pc, #840]	@ (80054f8 <OTM8009A_Init+0x394>)
 80051ae:	4619      	mov	r1, r3
 80051b0:	4628      	mov	r0, r5
 80051b2:	f000 fb7d 	bl	80058b0 <otm8009a_write_reg>
 80051b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80051b8:	2300      	movs	r3, #0
 80051ba:	4ad1      	ldr	r2, [pc, #836]	@ (8005500 <OTM8009A_Init+0x39c>)
 80051bc:	21c4      	movs	r1, #196	@ 0xc4
 80051be:	4628      	mov	r0, r5
 80051c0:	f000 fb76 	bl	80058b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80051c4:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80051c6:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80051c8:	4638      	mov	r0, r7
 80051ca:	f7ff ffbe 	bl	800514a <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80051ce:	2300      	movs	r3, #0
 80051d0:	4acc      	ldr	r2, [pc, #816]	@ (8005504 <OTM8009A_Init+0x3a0>)
 80051d2:	4628      	mov	r0, r5
 80051d4:	4619      	mov	r1, r3
 80051d6:	f000 fb6b 	bl	80058b0 <otm8009a_write_reg>
 80051da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80051dc:	2300      	movs	r3, #0
 80051de:	4aca      	ldr	r2, [pc, #808]	@ (8005508 <OTM8009A_Init+0x3a4>)
 80051e0:	21c4      	movs	r1, #196	@ 0xc4
 80051e2:	4628      	mov	r0, r5
 80051e4:	f000 fb64 	bl	80058b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 10);
 80051e8:	210a      	movs	r1, #10
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80051ea:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 10);
 80051ec:	4638      	mov	r0, r7
 80051ee:	f7ff ffac 	bl	800514a <OTM8009A_IO_Delay.isra.0>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80051f2:	2300      	movs	r3, #0
 80051f4:	4ac5      	ldr	r2, [pc, #788]	@ (800550c <OTM8009A_Init+0x3a8>)
 80051f6:	4628      	mov	r0, r5
 80051f8:	4619      	mov	r1, r3
 80051fa:	f000 fb59 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 80051fe:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8005200:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 8005202:	4ac3      	ldr	r2, [pc, #780]	@ (8005510 <OTM8009A_Init+0x3ac>)
 8005204:	21c5      	movs	r1, #197	@ 0xc5
 8005206:	4628      	mov	r0, r5
 8005208:	f000 fb52 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800520c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800520e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8005210:	4ac0      	ldr	r2, [pc, #768]	@ (8005514 <OTM8009A_Init+0x3b0>)
 8005212:	4619      	mov	r1, r3
 8005214:	4628      	mov	r0, r5
 8005216:	f000 fb4b 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800521a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 800521c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800521e:	4abe      	ldr	r2, [pc, #760]	@ (8005518 <OTM8009A_Init+0x3b4>)
 8005220:	21c5      	movs	r1, #197	@ 0xc5
 8005222:	4628      	mov	r0, r5
 8005224:	f000 fb44 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005228:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800522a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 800522c:	4abb      	ldr	r2, [pc, #748]	@ (800551c <OTM8009A_Init+0x3b8>)
 800522e:	4619      	mov	r1, r3
 8005230:	4628      	mov	r0, r5
 8005232:	f000 fb3d 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005236:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8005238:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800523a:	4ab9      	ldr	r2, [pc, #740]	@ (8005520 <OTM8009A_Init+0x3bc>)
 800523c:	21c0      	movs	r1, #192	@ 0xc0
 800523e:	4628      	mov	r0, r5
 8005240:	f000 fb36 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005244:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 8005246:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005248:	4aa9      	ldr	r2, [pc, #676]	@ (80054f0 <OTM8009A_Init+0x38c>)
 800524a:	4619      	mov	r1, r3
 800524c:	4628      	mov	r0, r5
 800524e:	f000 fb2f 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005252:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8005254:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005256:	4ab3      	ldr	r2, [pc, #716]	@ (8005524 <OTM8009A_Init+0x3c0>)
 8005258:	21d9      	movs	r1, #217	@ 0xd9
 800525a:	4628      	mov	r0, r5
 800525c:	f000 fb28 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005260:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 8005262:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005264:	4ab0      	ldr	r2, [pc, #704]	@ (8005528 <OTM8009A_Init+0x3c4>)
 8005266:	4619      	mov	r1, r3
 8005268:	4628      	mov	r0, r5
 800526a:	f000 fb21 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800526e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005270:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 8005272:	4aae      	ldr	r2, [pc, #696]	@ (800552c <OTM8009A_Init+0x3c8>)
 8005274:	21c1      	movs	r1, #193	@ 0xc1
 8005276:	4628      	mov	r0, r5
 8005278:	f000 fb1a 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800527c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800527e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8005280:	4aab      	ldr	r2, [pc, #684]	@ (8005530 <OTM8009A_Init+0x3cc>)
 8005282:	4619      	mov	r1, r3
 8005284:	4628      	mov	r0, r5
 8005286:	f000 fb13 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800528a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 800528c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800528e:	4aa9      	ldr	r2, [pc, #676]	@ (8005534 <OTM8009A_Init+0x3d0>)
 8005290:	21c5      	movs	r1, #197	@ 0xc5
 8005292:	4628      	mov	r0, r5
 8005294:	f000 fb0c 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8005298:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800529a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 800529c:	4aa6      	ldr	r2, [pc, #664]	@ (8005538 <OTM8009A_Init+0x3d4>)
 800529e:	4619      	mov	r1, r3
 80052a0:	4628      	mov	r0, r5
 80052a2:	f000 fb05 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80052a6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 80052a8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80052aa:	4a9b      	ldr	r2, [pc, #620]	@ (8005518 <OTM8009A_Init+0x3b4>)
 80052ac:	21c5      	movs	r1, #197	@ 0xc5
 80052ae:	4628      	mov	r0, r5
 80052b0:	f000 fafe 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 80052b6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052b8:	4a8d      	ldr	r2, [pc, #564]	@ (80054f0 <OTM8009A_Init+0x38c>)
 80052ba:	4619      	mov	r1, r3
 80052bc:	4628      	mov	r0, r5
 80052be:	f000 faf7 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80052c2:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80052c4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80052c6:	4a9d      	ldr	r2, [pc, #628]	@ (800553c <OTM8009A_Init+0x3d8>)
 80052c8:	21d8      	movs	r1, #216	@ 0xd8
 80052ca:	4628      	mov	r0, r5
 80052cc:	f000 faf0 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80052d0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80052d2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80052d4:	4a9a      	ldr	r2, [pc, #616]	@ (8005540 <OTM8009A_Init+0x3dc>)
 80052d6:	4619      	mov	r1, r3
 80052d8:	4628      	mov	r0, r5
 80052da:	f000 fae9 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80052de:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80052e0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80052e2:	4a98      	ldr	r2, [pc, #608]	@ (8005544 <OTM8009A_Init+0x3e0>)
 80052e4:	21c5      	movs	r1, #197	@ 0xc5
 80052e6:	4628      	mov	r0, r5
 80052e8:	f000 fae2 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80052ec:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80052ee:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80052f0:	4a95      	ldr	r2, [pc, #596]	@ (8005548 <OTM8009A_Init+0x3e4>)
 80052f2:	4619      	mov	r1, r3
 80052f4:	4628      	mov	r0, r5
 80052f6:	f000 fadb 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80052fa:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80052fc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80052fe:	4a93      	ldr	r2, [pc, #588]	@ (800554c <OTM8009A_Init+0x3e8>)
 8005300:	21c0      	movs	r1, #192	@ 0xc0
 8005302:	4628      	mov	r0, r5
 8005304:	f000 fad4 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005308:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800530a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 800530c:	4a90      	ldr	r2, [pc, #576]	@ (8005550 <OTM8009A_Init+0x3ec>)
 800530e:	4619      	mov	r1, r3
 8005310:	4628      	mov	r0, r5
 8005312:	f000 facd 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005316:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8005318:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800531a:	4a8e      	ldr	r2, [pc, #568]	@ (8005554 <OTM8009A_Init+0x3f0>)
 800531c:	21c5      	movs	r1, #197	@ 0xc5
 800531e:	4628      	mov	r0, r5
 8005320:	f000 fac6 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005324:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 8005326:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005328:	4a8b      	ldr	r2, [pc, #556]	@ (8005558 <OTM8009A_Init+0x3f4>)
 800532a:	4619      	mov	r1, r3
 800532c:	4628      	mov	r0, r5
 800532e:	f000 fabf 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005332:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8005334:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005336:	4a89      	ldr	r2, [pc, #548]	@ (800555c <OTM8009A_Init+0x3f8>)
 8005338:	21c4      	movs	r1, #196	@ 0xc4
 800533a:	4628      	mov	r0, r5
 800533c:	f000 fab8 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005340:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 8005342:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005344:	4a78      	ldr	r2, [pc, #480]	@ (8005528 <OTM8009A_Init+0x3c4>)
 8005346:	4619      	mov	r1, r3
 8005348:	4628      	mov	r0, r5
 800534a:	f000 fab1 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800534e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8005350:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 8005352:	4a83      	ldr	r2, [pc, #524]	@ (8005560 <OTM8009A_Init+0x3fc>)
 8005354:	21c1      	movs	r1, #193	@ 0xc1
 8005356:	4628      	mov	r0, r5
 8005358:	f000 faaa 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800535c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800535e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8005360:	4a80      	ldr	r2, [pc, #512]	@ (8005564 <OTM8009A_Init+0x400>)
 8005362:	4619      	mov	r1, r3
 8005364:	4628      	mov	r0, r5
 8005366:	f000 faa3 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800536a:	2302      	movs	r3, #2
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800536c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800536e:	4a7e      	ldr	r2, [pc, #504]	@ (8005568 <OTM8009A_Init+0x404>)
 8005370:	21b3      	movs	r1, #179	@ 0xb3
 8005372:	4628      	mov	r0, r5
 8005374:	f000 fa9c 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005378:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800537a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800537c:	4a5e      	ldr	r2, [pc, #376]	@ (80054f8 <OTM8009A_Init+0x394>)
 800537e:	4619      	mov	r1, r3
 8005380:	4628      	mov	r0, r5
 8005382:	f000 fa95 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005386:	2306      	movs	r3, #6
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005388:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800538a:	4a78      	ldr	r2, [pc, #480]	@ (800556c <OTM8009A_Init+0x408>)
 800538c:	21ce      	movs	r1, #206	@ 0xce
 800538e:	4628      	mov	r0, r5
 8005390:	f000 fa8e 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005394:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8005396:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005398:	4a75      	ldr	r2, [pc, #468]	@ (8005570 <OTM8009A_Init+0x40c>)
 800539a:	4619      	mov	r1, r3
 800539c:	4628      	mov	r0, r5
 800539e:	f000 fa87 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80053a2:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80053a4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80053a6:	4a73      	ldr	r2, [pc, #460]	@ (8005574 <OTM8009A_Init+0x410>)
 80053a8:	21ce      	movs	r1, #206	@ 0xce
 80053aa:	4628      	mov	r0, r5
 80053ac:	f000 fa80 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053b0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80053b2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053b4:	4a70      	ldr	r2, [pc, #448]	@ (8005578 <OTM8009A_Init+0x414>)
 80053b6:	4619      	mov	r1, r3
 80053b8:	4628      	mov	r0, r5
 80053ba:	f000 fa79 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80053be:	230e      	movs	r3, #14
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80053c0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80053c2:	4a6e      	ldr	r2, [pc, #440]	@ (800557c <OTM8009A_Init+0x418>)
 80053c4:	21ce      	movs	r1, #206	@ 0xce
 80053c6:	4628      	mov	r0, r5
 80053c8:	f000 fa72 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053cc:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80053ce:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053d0:	4a6b      	ldr	r2, [pc, #428]	@ (8005580 <OTM8009A_Init+0x41c>)
 80053d2:	4619      	mov	r1, r3
 80053d4:	4628      	mov	r0, r5
 80053d6:	f000 fa6b 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80053da:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80053dc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80053de:	4a69      	ldr	r2, [pc, #420]	@ (8005584 <OTM8009A_Init+0x420>)
 80053e0:	21cf      	movs	r1, #207	@ 0xcf
 80053e2:	4628      	mov	r0, r5
 80053e4:	f000 fa64 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053e8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80053ea:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053ec:	4a66      	ldr	r2, [pc, #408]	@ (8005588 <OTM8009A_Init+0x424>)
 80053ee:	4619      	mov	r1, r3
 80053f0:	4628      	mov	r0, r5
 80053f2:	f000 fa5d 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80053f6:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80053f8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 80053fa:	4a64      	ldr	r2, [pc, #400]	@ (800558c <OTM8009A_Init+0x428>)
 80053fc:	21cf      	movs	r1, #207	@ 0xcf
 80053fe:	4628      	mov	r0, r5
 8005400:	f000 fa56 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005404:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8005406:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005408:	4a3b      	ldr	r2, [pc, #236]	@ (80054f8 <OTM8009A_Init+0x394>)
 800540a:	4619      	mov	r1, r3
 800540c:	4628      	mov	r0, r5
 800540e:	f000 fa4f 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005412:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8005414:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005416:	4a5e      	ldr	r2, [pc, #376]	@ (8005590 <OTM8009A_Init+0x42c>)
 8005418:	21cb      	movs	r1, #203	@ 0xcb
 800541a:	4628      	mov	r0, r5
 800541c:	f000 fa48 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005420:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8005422:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005424:	4a5b      	ldr	r2, [pc, #364]	@ (8005594 <OTM8009A_Init+0x430>)
 8005426:	4619      	mov	r1, r3
 8005428:	4628      	mov	r0, r5
 800542a:	f000 fa41 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800542e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8005430:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8005432:	4a59      	ldr	r2, [pc, #356]	@ (8005598 <OTM8009A_Init+0x434>)
 8005434:	21cb      	movs	r1, #203	@ 0xcb
 8005436:	4628      	mov	r0, r5
 8005438:	f000 fa3a 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800543c:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 800543e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8005440:	4a4b      	ldr	r2, [pc, #300]	@ (8005570 <OTM8009A_Init+0x40c>)
 8005442:	4619      	mov	r1, r3
 8005444:	4628      	mov	r0, r5
 8005446:	f000 fa33 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800544a:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800544c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800544e:	4a53      	ldr	r2, [pc, #332]	@ (800559c <OTM8009A_Init+0x438>)
 8005450:	21cb      	movs	r1, #203	@ 0xcb
 8005452:	4628      	mov	r0, r5
 8005454:	f000 fa2c 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005458:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 800545a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800545c:	4a46      	ldr	r2, [pc, #280]	@ (8005578 <OTM8009A_Init+0x414>)
 800545e:	4619      	mov	r1, r3
 8005460:	4628      	mov	r0, r5
 8005462:	f000 fa25 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005466:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005468:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 800546a:	4a4d      	ldr	r2, [pc, #308]	@ (80055a0 <OTM8009A_Init+0x43c>)
 800546c:	21cb      	movs	r1, #203	@ 0xcb
 800546e:	4628      	mov	r0, r5
 8005470:	f000 fa1e 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005474:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8005476:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005478:	4a41      	ldr	r2, [pc, #260]	@ (8005580 <OTM8009A_Init+0x41c>)
 800547a:	4619      	mov	r1, r3
 800547c:	4628      	mov	r0, r5
 800547e:	f000 fa17 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005482:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005484:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005486:	4a47      	ldr	r2, [pc, #284]	@ (80055a4 <OTM8009A_Init+0x440>)
 8005488:	21cb      	movs	r1, #203	@ 0xcb
 800548a:	4628      	mov	r0, r5
 800548c:	f000 fa10 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005490:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8005492:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005494:	4a3c      	ldr	r2, [pc, #240]	@ (8005588 <OTM8009A_Init+0x424>)
 8005496:	4619      	mov	r1, r3
 8005498:	4628      	mov	r0, r5
 800549a:	f000 fa09 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 800549e:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80054a0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80054a2:	4a41      	ldr	r2, [pc, #260]	@ (80055a8 <OTM8009A_Init+0x444>)
 80054a4:	21cb      	movs	r1, #203	@ 0xcb
 80054a6:	4628      	mov	r0, r5
 80054a8:	f000 fa02 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80054ac:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 80054ae:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80054b0:	4a3e      	ldr	r2, [pc, #248]	@ (80055ac <OTM8009A_Init+0x448>)
 80054b2:	4619      	mov	r1, r3
 80054b4:	4628      	mov	r0, r5
 80054b6:	f000 f9fb 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80054ba:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 80054bc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80054be:	4a3c      	ldr	r2, [pc, #240]	@ (80055b0 <OTM8009A_Init+0x44c>)
 80054c0:	21cb      	movs	r1, #203	@ 0xcb
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f9f4 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80054c8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 80054ca:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80054cc:	4a39      	ldr	r2, [pc, #228]	@ (80055b4 <OTM8009A_Init+0x450>)
 80054ce:	4619      	mov	r1, r3
 80054d0:	4628      	mov	r0, r5
 80054d2:	f000 f9ed 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80054d6:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 80054d8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80054da:	4a37      	ldr	r2, [pc, #220]	@ (80055b8 <OTM8009A_Init+0x454>)
 80054dc:	21cb      	movs	r1, #203	@ 0xcb
 80054de:	4628      	mov	r0, r5
 80054e0:	f000 f9e6 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80054e4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 80054e6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80054e8:	4a03      	ldr	r2, [pc, #12]	@ (80054f8 <OTM8009A_Init+0x394>)
 80054ea:	4619      	mov	r1, r3
 80054ec:	4628      	mov	r0, r5
 80054ee:	e065      	b.n	80055bc <OTM8009A_Init+0x458>
 80054f0:	08024db1 	.word	0x08024db1
 80054f4:	08024dad 	.word	0x08024dad
 80054f8:	08024db2 	.word	0x08024db2
 80054fc:	08024dab 	.word	0x08024dab
 8005500:	08024db3 	.word	0x08024db3
 8005504:	08024db4 	.word	0x08024db4
 8005508:	08024db5 	.word	0x08024db5
 800550c:	08024db6 	.word	0x08024db6
 8005510:	08024db7 	.word	0x08024db7
 8005514:	08024db8 	.word	0x08024db8
 8005518:	08024db9 	.word	0x08024db9
 800551c:	08024dba 	.word	0x08024dba
 8005520:	08024dbb 	.word	0x08024dbb
 8005524:	08024dbc 	.word	0x08024dbc
 8005528:	08024dbf 	.word	0x08024dbf
 800552c:	08024dc0 	.word	0x08024dc0
 8005530:	08024dc1 	.word	0x08024dc1
 8005534:	08024dc2 	.word	0x08024dc2
 8005538:	08024dc3 	.word	0x08024dc3
 800553c:	08024da9 	.word	0x08024da9
 8005540:	08024dc4 	.word	0x08024dc4
 8005544:	08024dc5 	.word	0x08024dc5
 8005548:	08024dc6 	.word	0x08024dc6
 800554c:	08024dc7 	.word	0x08024dc7
 8005550:	08024dc8 	.word	0x08024dc8
 8005554:	08024dc9 	.word	0x08024dc9
 8005558:	08024dbd 	.word	0x08024dbd
 800555c:	08024dca 	.word	0x08024dca
 8005560:	08024dcb 	.word	0x08024dcb
 8005564:	08024dcc 	.word	0x08024dcc
 8005568:	08024da7 	.word	0x08024da7
 800556c:	08024da1 	.word	0x08024da1
 8005570:	08024dcd 	.word	0x08024dcd
 8005574:	08024d93 	.word	0x08024d93
 8005578:	08024dce 	.word	0x08024dce
 800557c:	08024d85 	.word	0x08024d85
 8005580:	08024dcf 	.word	0x08024dcf
 8005584:	08024d7b 	.word	0x08024d7b
 8005588:	08024dd0 	.word	0x08024dd0
 800558c:	08024ddd 	.word	0x08024ddd
 8005590:	08024d71 	.word	0x08024d71
 8005594:	08024dd1 	.word	0x08024dd1
 8005598:	08024d62 	.word	0x08024d62
 800559c:	08024d53 	.word	0x08024d53
 80055a0:	08024d49 	.word	0x08024d49
 80055a4:	08024d3a 	.word	0x08024d3a
 80055a8:	08024d2b 	.word	0x08024d2b
 80055ac:	08024dd2 	.word	0x08024dd2
 80055b0:	08024d21 	.word	0x08024d21
 80055b4:	08024dd3 	.word	0x08024dd3
 80055b8:	08024d17 	.word	0x08024d17
 80055bc:	f000 f978 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80055c0:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80055c2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80055c4:	4a8e      	ldr	r2, [pc, #568]	@ (8005800 <OTM8009A_Init+0x69c>)
 80055c6:	21cc      	movs	r1, #204	@ 0xcc
 80055c8:	4628      	mov	r0, r5
 80055ca:	f000 f971 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80055ce:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 80055d0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80055d2:	4a8c      	ldr	r2, [pc, #560]	@ (8005804 <OTM8009A_Init+0x6a0>)
 80055d4:	4619      	mov	r1, r3
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 f96a 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80055dc:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 80055de:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80055e0:	4a89      	ldr	r2, [pc, #548]	@ (8005808 <OTM8009A_Init+0x6a4>)
 80055e2:	21cc      	movs	r1, #204	@ 0xcc
 80055e4:	4628      	mov	r0, r5
 80055e6:	f000 f963 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80055ea:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 80055ec:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80055ee:	4a87      	ldr	r2, [pc, #540]	@ (800580c <OTM8009A_Init+0x6a8>)
 80055f0:	4619      	mov	r1, r3
 80055f2:	4628      	mov	r0, r5
 80055f4:	f000 f95c 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80055f8:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80055fa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 80055fc:	4a84      	ldr	r2, [pc, #528]	@ (8005810 <OTM8009A_Init+0x6ac>)
 80055fe:	21cc      	movs	r1, #204	@ 0xcc
 8005600:	4628      	mov	r0, r5
 8005602:	f000 f955 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005606:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8005608:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800560a:	4a82      	ldr	r2, [pc, #520]	@ (8005814 <OTM8009A_Init+0x6b0>)
 800560c:	4619      	mov	r1, r3
 800560e:	4628      	mov	r0, r5
 8005610:	f000 f94e 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005614:	230a      	movs	r3, #10
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8005616:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005618:	4a7f      	ldr	r2, [pc, #508]	@ (8005818 <OTM8009A_Init+0x6b4>)
 800561a:	21cc      	movs	r1, #204	@ 0xcc
 800561c:	4628      	mov	r0, r5
 800561e:	f000 f947 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005622:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8005624:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005626:	4a7d      	ldr	r2, [pc, #500]	@ (800581c <OTM8009A_Init+0x6b8>)
 8005628:	4619      	mov	r1, r3
 800562a:	4628      	mov	r0, r5
 800562c:	f000 f940 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005630:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8005632:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005634:	4a7a      	ldr	r2, [pc, #488]	@ (8005820 <OTM8009A_Init+0x6bc>)
 8005636:	21cc      	movs	r1, #204	@ 0xcc
 8005638:	4628      	mov	r0, r5
 800563a:	f000 f939 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800563e:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8005640:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8005642:	4a78      	ldr	r2, [pc, #480]	@ (8005824 <OTM8009A_Init+0x6c0>)
 8005644:	4619      	mov	r1, r3
 8005646:	4628      	mov	r0, r5
 8005648:	f000 f932 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800564c:	230f      	movs	r3, #15
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800564e:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8005650:	4a75      	ldr	r2, [pc, #468]	@ (8005828 <OTM8009A_Init+0x6c4>)
 8005652:	21cc      	movs	r1, #204	@ 0xcc
 8005654:	4628      	mov	r0, r5
 8005656:	f000 f92b 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800565a:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 800565c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800565e:	4a73      	ldr	r2, [pc, #460]	@ (800582c <OTM8009A_Init+0x6c8>)
 8005660:	4619      	mov	r1, r3
 8005662:	4628      	mov	r0, r5
 8005664:	f000 f924 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005668:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 800566a:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 800566c:	4a70      	ldr	r2, [pc, #448]	@ (8005830 <OTM8009A_Init+0x6cc>)
 800566e:	21c5      	movs	r1, #197	@ 0xc5
 8005670:	4628      	mov	r0, r5
 8005672:	f000 f91d 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005676:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8005678:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 800567a:	4a6e      	ldr	r2, [pc, #440]	@ (8005834 <OTM8009A_Init+0x6d0>)
 800567c:	4619      	mov	r1, r3
 800567e:	4628      	mov	r0, r5
 8005680:	f000 f916 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005684:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8005686:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005688:	4a6b      	ldr	r2, [pc, #428]	@ (8005838 <OTM8009A_Init+0x6d4>)
 800568a:	21f5      	movs	r1, #245	@ 0xf5
 800568c:	4628      	mov	r0, r5
 800568e:	f000 f90f 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005692:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8005694:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8005696:	4a69      	ldr	r2, [pc, #420]	@ (800583c <OTM8009A_Init+0x6d8>)
 8005698:	4619      	mov	r1, r3
 800569a:	4628      	mov	r0, r5
 800569c:	f000 f908 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80056a0:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 80056a2:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80056a4:	4a66      	ldr	r2, [pc, #408]	@ (8005840 <OTM8009A_Init+0x6dc>)
 80056a6:	21c6      	movs	r1, #198	@ 0xc6
 80056a8:	4628      	mov	r0, r5
 80056aa:	f000 f901 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056ae:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80056b0:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056b2:	4a64      	ldr	r2, [pc, #400]	@ (8005844 <OTM8009A_Init+0x6e0>)
 80056b4:	4619      	mov	r1, r3
 80056b6:	4628      	mov	r0, r5
 80056b8:	f000 f8fa 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80056bc:	2303      	movs	r3, #3
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056be:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80056c0:	4a61      	ldr	r2, [pc, #388]	@ (8005848 <OTM8009A_Init+0x6e4>)
 80056c2:	21ff      	movs	r1, #255	@ 0xff
 80056c4:	4628      	mov	r0, r5
 80056c6:	f000 f8f3 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056ca:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80056cc:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056ce:	4a5d      	ldr	r2, [pc, #372]	@ (8005844 <OTM8009A_Init+0x6e0>)
 80056d0:	4619      	mov	r1, r3
 80056d2:	4628      	mov	r0, r5
 80056d4:	f000 f8ec 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056d8:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056da:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056dc:	4a59      	ldr	r2, [pc, #356]	@ (8005844 <OTM8009A_Init+0x6e0>)
 80056de:	4619      	mov	r1, r3
 80056e0:	4628      	mov	r0, r5
 80056e2:	f000 f8e5 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80056e6:	2310      	movs	r3, #16
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056e8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80056ea:	4a58      	ldr	r2, [pc, #352]	@ (800584c <OTM8009A_Init+0x6e8>)
 80056ec:	21e1      	movs	r1, #225	@ 0xe1
 80056ee:	4628      	mov	r0, r5
 80056f0:	f000 f8de 	bl	80058b0 <otm8009a_write_reg>
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056f4:	2300      	movs	r3, #0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 80056f6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80056f8:	4a52      	ldr	r2, [pc, #328]	@ (8005844 <OTM8009A_Init+0x6e0>)
 80056fa:	4619      	mov	r1, r3
 80056fc:	4628      	mov	r0, r5
 80056fe:	f000 f8d7 	bl	80058b0 <otm8009a_write_reg>
 8005702:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8005704:	2310      	movs	r3, #16
 8005706:	4a52      	ldr	r2, [pc, #328]	@ (8005850 <OTM8009A_Init+0x6ec>)
 8005708:	21e2      	movs	r1, #226	@ 0xe2
 800570a:	4628      	mov	r0, r5
 800570c:	f000 f8d0 	bl	80058b0 <otm8009a_write_reg>
 8005710:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005712:	2300      	movs	r3, #0
 8005714:	4a4f      	ldr	r2, [pc, #316]	@ (8005854 <OTM8009A_Init+0x6f0>)
 8005716:	2111      	movs	r1, #17
 8005718:	4628      	mov	r0, r5
 800571a:	f000 f8c9 	bl	80058b0 <otm8009a_write_reg>
  (void)OTM8009A_IO_Delay(pObj, 120);
 800571e:	2178      	movs	r1, #120	@ 0x78
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8005720:	4404      	add	r4, r0
  (void)OTM8009A_IO_Delay(pObj, 120);
 8005722:	4638      	mov	r0, r7
 8005724:	f7ff fd11 	bl	800514a <OTM8009A_IO_Delay.isra.0>
  switch(ColorCoding)
 8005728:	4f4b      	ldr	r7, [pc, #300]	@ (8005858 <OTM8009A_Init+0x6f4>)
 800572a:	2e00      	cmp	r6, #0
 800572c:	d061      	beq.n	80057f2 <OTM8009A_Init+0x68e>
 800572e:	2e02      	cmp	r6, #2
 8005730:	d107      	bne.n	8005742 <OTM8009A_Init+0x5de>
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8005732:	2300      	movs	r3, #0
 8005734:	4a49      	ldr	r2, [pc, #292]	@ (800585c <OTM8009A_Init+0x6f8>)
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8005736:	213a      	movs	r1, #58	@ 0x3a
 8005738:	4628      	mov	r0, r5
 800573a:	f000 f8b9 	bl	80058b0 <otm8009a_write_reg>
 800573e:	4404      	add	r4, r0
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8005740:	607e      	str	r6, [r7, #4]
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8005742:	f1b8 0f01 	cmp.w	r8, #1
 8005746:	d157      	bne.n	80057f8 <OTM8009A_Init+0x694>
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005748:	2360      	movs	r3, #96	@ 0x60
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 800574a:	f10d 0207 	add.w	r2, sp, #7
 800574e:	2136      	movs	r1, #54	@ 0x36
 8005750:	4628      	mov	r0, r5
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8005752:	f88d 3007 	strb.w	r3, [sp, #7]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8005756:	2300      	movs	r3, #0
 8005758:	f000 f8aa 	bl	80058b0 <otm8009a_write_reg>
 800575c:	1826      	adds	r6, r4, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 800575e:	2304      	movs	r3, #4
 8005760:	4a3f      	ldr	r2, [pc, #252]	@ (8005860 <OTM8009A_Init+0x6fc>)
 8005762:	212a      	movs	r1, #42	@ 0x2a
 8005764:	4628      	mov	r0, r5
 8005766:	f000 f8a3 	bl	80058b0 <otm8009a_write_reg>
 800576a:	4406      	add	r6, r0
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800576c:	2304      	movs	r3, #4
 800576e:	4a3d      	ldr	r2, [pc, #244]	@ (8005864 <OTM8009A_Init+0x700>)
 8005770:	212b      	movs	r1, #43	@ 0x2b
 8005772:	4628      	mov	r0, r5
 8005774:	f000 f89c 	bl	80058b0 <otm8009a_write_reg>
 8005778:	1834      	adds	r4, r6, r0
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 800577a:	f8c7 8000 	str.w	r8, [r7]
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 800577e:	2600      	movs	r6, #0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8005780:	2300      	movs	r3, #0
 8005782:	4a39      	ldr	r2, [pc, #228]	@ (8005868 <OTM8009A_Init+0x704>)
 8005784:	2151      	movs	r1, #81	@ 0x51
 8005786:	4628      	mov	r0, r5
 8005788:	f000 f892 	bl	80058b0 <otm8009a_write_reg>
 800578c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 800578e:	4633      	mov	r3, r6
 8005790:	4a36      	ldr	r2, [pc, #216]	@ (800586c <OTM8009A_Init+0x708>)
 8005792:	2153      	movs	r1, #83	@ 0x53
 8005794:	4628      	mov	r0, r5
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8005796:	60be      	str	r6, [r7, #8]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8005798:	f000 f88a 	bl	80058b0 <otm8009a_write_reg>
 800579c:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 800579e:	4633      	mov	r3, r6
 80057a0:	4a33      	ldr	r2, [pc, #204]	@ (8005870 <OTM8009A_Init+0x70c>)
 80057a2:	2155      	movs	r1, #85	@ 0x55
 80057a4:	4628      	mov	r0, r5
 80057a6:	f000 f883 	bl	80058b0 <otm8009a_write_reg>
 80057aa:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 80057ac:	4633      	mov	r3, r6
 80057ae:	4a31      	ldr	r2, [pc, #196]	@ (8005874 <OTM8009A_Init+0x710>)
 80057b0:	215e      	movs	r1, #94	@ 0x5e
 80057b2:	4628      	mov	r0, r5
 80057b4:	f000 f87c 	bl	80058b0 <otm8009a_write_reg>
 80057b8:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 80057ba:	4633      	mov	r3, r6
 80057bc:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <OTM8009A_Init+0x714>)
 80057be:	2129      	movs	r1, #41	@ 0x29
 80057c0:	4628      	mov	r0, r5
 80057c2:	f000 f875 	bl	80058b0 <otm8009a_write_reg>
 80057c6:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80057c8:	4633      	mov	r3, r6
 80057ca:	4631      	mov	r1, r6
 80057cc:	4a1d      	ldr	r2, [pc, #116]	@ (8005844 <OTM8009A_Init+0x6e0>)
 80057ce:	4628      	mov	r0, r5
 80057d0:	f000 f86e 	bl	80058b0 <otm8009a_write_reg>
 80057d4:	4404      	add	r4, r0
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 80057d6:	4633      	mov	r3, r6
 80057d8:	4a28      	ldr	r2, [pc, #160]	@ (800587c <OTM8009A_Init+0x718>)
 80057da:	212c      	movs	r1, #44	@ 0x2c
 80057dc:	4628      	mov	r0, r5
 80057de:	f000 f867 	bl	80058b0 <otm8009a_write_reg>
  if(ret != OTM8009A_OK)
 80057e2:	42c4      	cmn	r4, r0
}
 80057e4:	bf14      	ite	ne
 80057e6:	f04f 30ff 	movne.w	r0, #4294967295
 80057ea:	4630      	moveq	r0, r6
 80057ec:	b002      	add	sp, #8
 80057ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80057f2:	4633      	mov	r3, r6
 80057f4:	4a22      	ldr	r2, [pc, #136]	@ (8005880 <OTM8009A_Init+0x71c>)
 80057f6:	e79e      	b.n	8005736 <OTM8009A_Init+0x5d2>
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80057f8:	2300      	movs	r3, #0
 80057fa:	603b      	str	r3, [r7, #0]
 80057fc:	e7bf      	b.n	800577e <OTM8009A_Init+0x61a>
 80057fe:	bf00      	nop
 8005800:	08024d0d 	.word	0x08024d0d
 8005804:	08024dd1 	.word	0x08024dd1
 8005808:	08024cfe 	.word	0x08024cfe
 800580c:	08024dcd 	.word	0x08024dcd
 8005810:	08024cef 	.word	0x08024cef
 8005814:	08024dce 	.word	0x08024dce
 8005818:	08024ce5 	.word	0x08024ce5
 800581c:	08024dcf 	.word	0x08024dcf
 8005820:	08024cd6 	.word	0x08024cd6
 8005824:	08024dd0 	.word	0x08024dd0
 8005828:	08024cc7 	.word	0x08024cc7
 800582c:	08024dbd 	.word	0x08024dbd
 8005830:	08024dde 	.word	0x08024dde
 8005834:	08024ddf 	.word	0x08024ddf
 8005838:	08024de0 	.word	0x08024de0
 800583c:	08024de1 	.word	0x08024de1
 8005840:	08024de2 	.word	0x08024de2
 8005844:	08024db1 	.word	0x08024db1
 8005848:	08024cc4 	.word	0x08024cc4
 800584c:	08024cb4 	.word	0x08024cb4
 8005850:	08024ca4 	.word	0x08024ca4
 8005854:	08024dd4 	.word	0x08024dd4
 8005858:	2400b314 	.word	0x2400b314
 800585c:	08024dd5 	.word	0x08024dd5
 8005860:	08024de7 	.word	0x08024de7
 8005864:	08024de3 	.word	0x08024de3
 8005868:	08024dd7 	.word	0x08024dd7
 800586c:	08024dd8 	.word	0x08024dd8
 8005870:	08024dd9 	.word	0x08024dd9
 8005874:	08024dda 	.word	0x08024dda
 8005878:	08024ddb 	.word	0x08024ddb
 800587c:	08024ddc 	.word	0x08024ddc
 8005880:	08024dd6 	.word	0x08024dd6

08005884 <OTM8009A_RegisterBusIO>:
  if(pObj == NULL)
 8005884:	b160      	cbz	r0, 80058a0 <OTM8009A_RegisterBusIO+0x1c>
    pObj->IO.WriteReg  = pIO->WriteReg;
 8005886:	684b      	ldr	r3, [r1, #4]
 8005888:	6043      	str	r3, [r0, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 800588a:	688b      	ldr	r3, [r1, #8]
 800588c:	6083      	str	r3, [r0, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800588e:	68cb      	ldr	r3, [r1, #12]
    pObj->Ctx.handle   = pObj;
 8005890:	6180      	str	r0, [r0, #24]
    pObj->IO.GetTick   = pIO->GetTick;
 8005892:	60c3      	str	r3, [r0, #12]
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8005894:	4b04      	ldr	r3, [pc, #16]	@ (80058a8 <OTM8009A_RegisterBusIO+0x24>)
 8005896:	6143      	str	r3, [r0, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8005898:	4b04      	ldr	r3, [pc, #16]	@ (80058ac <OTM8009A_RegisterBusIO+0x28>)
 800589a:	6103      	str	r3, [r0, #16]
  int32_t ret = OTM8009A_OK;
 800589c:	2000      	movs	r0, #0
 800589e:	4770      	bx	lr
    ret = OTM8009A_ERROR;
 80058a0:	f04f 30ff 	mov.w	r0, #4294967295
}
 80058a4:	4770      	bx	lr
 80058a6:	bf00      	nop
 80058a8:	0800512f 	.word	0x0800512f
 80058ac:	0800513d 	.word	0x0800513d

080058b0 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80058b0:	b410      	push	{r4}
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80058b2:	6804      	ldr	r4, [r0, #0]
 80058b4:	6880      	ldr	r0, [r0, #8]
 80058b6:	46a4      	mov	ip, r4
}
 80058b8:	f85d 4b04 	ldr.w	r4, [sp], #4
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80058bc:	4760      	bx	ip
	...

080058c0 <BSP_I2C4_DeInit>:
  */
int32_t BSP_I2C4_DeInit(void)
{
  int32_t ret  = BSP_ERROR_NONE;

  I2c4InitCounter--;
 80058c0:	4a10      	ldr	r2, [pc, #64]	@ (8005904 <BSP_I2C4_DeInit+0x44>)
{
 80058c2:	b508      	push	{r3, lr}
  I2c4InitCounter--;
 80058c4:	6813      	ldr	r3, [r2, #0]
 80058c6:	3b01      	subs	r3, #1
 80058c8:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 80058ca:	b10b      	cbz	r3, 80058d0 <BSP_I2C4_DeInit+0x10>
  int32_t ret  = BSP_ERROR_NONE;
 80058cc:	2000      	movs	r0, #0
      ret = BSP_ERROR_BUS_FAILURE;
    }
  }

  return ret;
}
 80058ce:	bd08      	pop	{r3, pc}
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80058d0:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80058d4:	480c      	ldr	r0, [pc, #48]	@ (8005908 <BSP_I2C4_DeInit+0x48>)
 80058d6:	f002 f873 	bl	80079c0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80058da:	480b      	ldr	r0, [pc, #44]	@ (8005908 <BSP_I2C4_DeInit+0x48>)
 80058dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80058e0:	f002 f86e 	bl	80079c0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80058e4:	4a09      	ldr	r2, [pc, #36]	@ (800590c <BSP_I2C4_DeInit+0x4c>)
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80058e6:	480a      	ldr	r0, [pc, #40]	@ (8005910 <BSP_I2C4_DeInit+0x50>)
  BUS_I2C4_CLK_DISABLE();
 80058e8:	f8d2 30f4 	ldr.w	r3, [r2, #244]	@ 0xf4
 80058ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80058f0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 80058f4:	f002 fab4 	bl	8007e60 <HAL_I2C_DeInit>
 80058f8:	2800      	cmp	r0, #0
 80058fa:	d0e7      	beq.n	80058cc <BSP_I2C4_DeInit+0xc>
      ret = BSP_ERROR_BUS_FAILURE;
 80058fc:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005900:	e7e5      	b.n	80058ce <BSP_I2C4_DeInit+0xe>
 8005902:	bf00      	nop
 8005904:	2400bd78 	.word	0x2400bd78
 8005908:	58020c00 	.word	0x58020c00
 800590c:	58024400 	.word	0x58024400
 8005910:	2400b320 	.word	0x2400b320

08005914 <MX_I2C4_Init>:
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005914:	2300      	movs	r3, #0
 8005916:	2201      	movs	r2, #1
{
 8005918:	b510      	push	{r4, lr}
  hI2c->Init.Timing           = timing;
 800591a:	6041      	str	r1, [r0, #4]
{
 800591c:	4604      	mov	r4, r0
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800591e:	6203      	str	r3, [r0, #32]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8005920:	e9c0 3202 	strd	r3, r2, [r0, #8]
  hI2c->Init.OwnAddress2      = 0;
 8005924:	e9c0 3304 	strd	r3, r3, [r0, #16]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8005928:	e9c0 3306 	strd	r3, r3, [r0, #24]
  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800592c:	f002 fa42 	bl	8007db4 <HAL_I2C_Init>
 8005930:	4601      	mov	r1, r0
 8005932:	b108      	cbz	r0, 8005938 <MX_I2C4_Init+0x24>
    status = HAL_ERROR;
 8005934:	2001      	movs	r0, #1
}
 8005936:	bd10      	pop	{r4, pc}
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8005938:	4620      	mov	r0, r4
 800593a:	f002 fc68 	bl	800820e <HAL_I2CEx_ConfigAnalogFilter>
 800593e:	4601      	mov	r1, r0
 8005940:	2800      	cmp	r0, #0
 8005942:	d1f7      	bne.n	8005934 <MX_I2C4_Init+0x20>
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8005944:	4620      	mov	r0, r4
 8005946:	f002 fc88 	bl	800825a <HAL_I2CEx_ConfigDigitalFilter>
 800594a:	3800      	subs	r0, #0
 800594c:	bf18      	it	ne
 800594e:	2001      	movne	r0, #1
 8005950:	e7f1      	b.n	8005936 <MX_I2C4_Init+0x22>
	...

08005954 <BSP_I2C4_Init>:
  hbus_i2c4.Instance = BUS_I2C4;
 8005954:	4ba1      	ldr	r3, [pc, #644]	@ (8005bdc <BSP_I2C4_Init+0x288>)
 8005956:	48a2      	ldr	r0, [pc, #648]	@ (8005be0 <BSP_I2C4_Init+0x28c>)
{
 8005958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  hbus_i2c4.Instance = BUS_I2C4;
 800595c:	6003      	str	r3, [r0, #0]
{
 800595e:	b093      	sub	sp, #76	@ 0x4c
  if (I2c4InitCounter == 0U)
 8005960:	4ba0      	ldr	r3, [pc, #640]	@ (8005be4 <BSP_I2C4_Init+0x290>)
 8005962:	681c      	ldr	r4, [r3, #0]
 8005964:	b11c      	cbz	r4, 800596e <BSP_I2C4_Init+0x1a>
  int32_t ret = BSP_ERROR_NONE;
 8005966:	2000      	movs	r0, #0
}
 8005968:	b013      	add	sp, #76	@ 0x4c
 800596a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    I2c4InitCounter++;
 800596e:	2201      	movs	r2, #1
 8005970:	601a      	str	r2, [r3, #0]
    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8005972:	f002 fc47 	bl	8008204 <HAL_I2C_GetState>
 8005976:	2800      	cmp	r0, #0
 8005978:	d1f5      	bne.n	8005966 <BSP_I2C4_Init+0x12>
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800597a:	4d9b      	ldr	r5, [pc, #620]	@ (8005be8 <BSP_I2C4_Init+0x294>)
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800597c:	f04f 0812 	mov.w	r8, #18
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005980:	2702      	movs	r7, #2
 8005982:	2604      	movs	r6, #4
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8005984:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005988:	a90d      	add	r1, sp, #52	@ 0x34
 800598a:	4898      	ldr	r0, [pc, #608]	@ (8005bec <BSP_I2C4_Init+0x298>)
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800598c:	f043 0308 	orr.w	r3, r3, #8
 8005990:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 8005994:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 8005998:	f003 0308 	and.w	r3, r3, #8
 800599c:	930a      	str	r3, [sp, #40]	@ 0x28
 800599e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80059a0:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
 80059a4:	f043 0308 	orr.w	r3, r3, #8
 80059a8:	f8c5 30e0 	str.w	r3, [r5, #224]	@ 0xe0
 80059ac:	f8d5 30e0 	ldr.w	r3, [r5, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80059b0:	940f      	str	r4, [sp, #60]	@ 0x3c
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 80059b2:	f003 0308 	and.w	r3, r3, #8
 80059b6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80059b8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80059ba:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80059be:	e9cd 7610 	strd	r7, r6, [sp, #64]	@ 0x40
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80059c2:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80059c6:	f001 ff13 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80059ca:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80059ce:	a90d      	add	r1, sp, #52	@ 0x34
 80059d0:	4886      	ldr	r0, [pc, #536]	@ (8005bec <BSP_I2C4_Init+0x298>)
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80059d2:	9611      	str	r6, [sp, #68]	@ 0x44
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80059d4:	e9cd 380d 	strd	r3, r8, [sp, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80059d8:	e9cd 470f 	strd	r4, r7, [sp, #60]	@ 0x3c
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80059dc:	f001 ff08 	bl	80077f0 <HAL_GPIO_Init>
  BUS_I2C4_CLK_ENABLE();
 80059e0:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80059e4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80059e8:	f8c5 30f4 	str.w	r3, [r5, #244]	@ 0xf4
 80059ec:	f8d5 30f4 	ldr.w	r3, [r5, #244]	@ 0xf4
 80059f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059f4:	930c      	str	r3, [sp, #48]	@ 0x30
 80059f6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  BUS_I2C4_FORCE_RESET();
 80059f8:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 80059fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005a00:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
  BUS_I2C4_RELEASE_RESET();
 8005a04:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 8005a08:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a0c:	f8c5 309c 	str.w	r3, [r5, #156]	@ 0x9c
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005a10:	f004 fef2 	bl	800a7f8 <HAL_RCC_GetPCLK2Freq>
  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8005a14:	2800      	cmp	r0, #0
 8005a16:	d06f      	beq.n	8005af8 <BSP_I2C4_Init+0x1a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a18:	4b75      	ldr	r3, [pc, #468]	@ (8005bf0 <BSP_I2C4_Init+0x29c>)
  if (tsdadel_max <= 0)
 8005a1a:	4622      	mov	r2, r4
 8005a1c:	46a2      	mov	sl, r4
  uint32_t prev_presc = I2C_PRESC_MAX;
 8005a1e:	f04f 0910 	mov.w	r9, #16
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a22:	eb03 0350 	add.w	r3, r3, r0, lsr #1
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005a26:	f8df b1d0 	ldr.w	fp, [pc, #464]	@ 8005bf8 <BSP_I2C4_Init+0x2a4>
  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8005a2a:	fbb3 f0f0 	udiv	r0, r3, r0
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8005a2e:	eb00 0540 	add.w	r5, r0, r0, lsl #1
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8005a32:	fa00 f607 	lsl.w	r6, r0, r7
  if (tsdadel_max <= 0)
 8005a36:	4601      	mov	r1, r0
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8005a38:	f1c5 0332 	rsb	r3, r5, #50	@ 0x32
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8005a3c:	f5c6 76c3 	rsb	r6, r6, #390	@ 0x186
  if (tsdadel_min <= 0)
 8005a40:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
  if (tsdadel_max <= 0)
 8005a44:	ea26 76e6 	bic.w	r6, r6, r6, asr #31
  if (tsdadel_min <= 0)
 8005a48:	9300      	str	r3, [sp, #0]
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005a4a:	4b6a      	ldr	r3, [pc, #424]	@ (8005bf4 <BSP_I2C4_Init+0x2a0>)
 8005a4c:	681b      	ldr	r3, [r3, #0]
{
 8005a4e:	4688      	mov	r8, r1
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005a50:	f04f 0c00 	mov.w	ip, #0
      if (tscldel >= (uint32_t)tscldel_min)
 8005a54:	f5b8 7faf 	cmp.w	r8, #350	@ 0x15e
 8005a58:	f8cd c004 	str.w	ip, [sp, #4]
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8005a5c:	f10c 0c01 	add.w	ip, ip, #1
      if (tscldel >= (uint32_t)tscldel_min)
 8005a60:	d35d      	bcc.n	8005b1e <BSP_I2C4_Init+0x1ca>
 8005a62:	2700      	movs	r7, #0
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005a64:	46be      	mov	lr, r7
          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8005a66:	9d00      	ldr	r5, [sp, #0]
 8005a68:	42bd      	cmp	r5, r7
 8005a6a:	d852      	bhi.n	8005b12 <BSP_I2C4_Init+0x1be>
 8005a6c:	42be      	cmp	r6, r7
 8005a6e:	d350      	bcc.n	8005b12 <BSP_I2C4_Init+0x1be>
            if(presc != prev_presc)
 8005a70:	4591      	cmp	r9, r2
 8005a72:	d04e      	beq.n	8005b12 <BSP_I2C4_Init+0x1be>
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005a74:	2514      	movs	r5, #20
 8005a76:	fb05 fa03 	mul.w	sl, r5, r3
              I2c_valid_timing_nbr ++;
 8005a7a:	3301      	adds	r3, #1
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8005a7c:	9d01      	ldr	r5, [sp, #4]
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005a7e:	eb0b 090a 	add.w	r9, fp, sl
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005a82:	2b7f      	cmp	r3, #127	@ 0x7f
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8005a84:	f84b 200a 	str.w	r2, [fp, sl]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8005a88:	e9c9 5e01 	strd	r5, lr, [r9, #4]
              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8005a8c:	d93e      	bls.n	8005b0c <BSP_I2C4_Init+0x1b8>
 8005a8e:	4a59      	ldr	r2, [pc, #356]	@ (8005bf4 <BSP_I2C4_Init+0x2a0>)
 8005a90:	6013      	str	r3, [r2, #0]
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a92:	4b58      	ldr	r3, [pc, #352]	@ (8005bf4 <BSP_I2C4_Init+0x2a0>)
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005a94:	f640 15c4 	movw	r5, #2500	@ 0x9c4
 8005a98:	f04f 32ff 	mov.w	r2, #4294967295
 8005a9c:	4956      	ldr	r1, [pc, #344]	@ (8005bf8 <BSP_I2C4_Init+0x2a4>)
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005a9e:	681b      	ldr	r3, [r3, #0]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005aa0:	2700      	movs	r7, #0
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005aa2:	9305      	str	r3, [sp, #20]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005aa4:	0043      	lsls	r3, r0, #1
 8005aa6:	f5c3 6b80 	rsb	fp, r3, #1024	@ 0x400
 8005aaa:	e9cd 2501 	strd	r2, r5, [sp, #4]
 8005aae:	f10b 0b01 	add.w	fp, fp, #1
 8005ab2:	f103 0532 	add.w	r5, r3, #50	@ 0x32
 8005ab6:	f6a3 0334 	subw	r3, r3, #2100	@ 0x834
 8005aba:	9508      	str	r5, [sp, #32]
 8005abc:	9309      	str	r3, [sp, #36]	@ 0x24
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005abe:	9b05      	ldr	r3, [sp, #20]
 8005ac0:	429f      	cmp	r7, r3
 8005ac2:	d138      	bne.n	8005b36 <BSP_I2C4_Init+0x1e2>
        if (idx < I2C_VALID_TIMING_NBR)
 8005ac4:	9b01      	ldr	r3, [sp, #4]
 8005ac6:	2b7f      	cmp	r3, #127	@ 0x7f
 8005ac8:	d816      	bhi.n	8005af8 <BSP_I2C4_Init+0x1a4>
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005aca:	2114      	movs	r1, #20
 8005acc:	9a01      	ldr	r2, [sp, #4]
 8005ace:	4b4a      	ldr	r3, [pc, #296]	@ (8005bf8 <BSP_I2C4_Init+0x2a4>)
 8005ad0:	434a      	muls	r2, r1
 8005ad2:	1899      	adds	r1, r3, r2
 8005ad4:	589b      	ldr	r3, [r3, r2]
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8005ad6:	7c0c      	ldrb	r4, [r1, #16]
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005ad8:	ea44 7403 	orr.w	r4, r4, r3, lsl #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8005adc:	684b      	ldr	r3, [r1, #4]
 8005ade:	051b      	lsls	r3, r3, #20
 8005ae0:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005ae4:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8005ae6:	688b      	ldr	r3, [r1, #8]
 8005ae8:	041b      	lsls	r3, r3, #16
 8005aea:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005aee:	431c      	orrs	r4, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8005af0:	68cb      	ldr	r3, [r1, #12]
 8005af2:	021b      	lsls	r3, r3, #8
 8005af4:	b29b      	uxth	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8005af6:	431c      	orrs	r4, r3
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8005af8:	4621      	mov	r1, r4
 8005afa:	4839      	ldr	r0, [pc, #228]	@ (8005be0 <BSP_I2C4_Init+0x28c>)
 8005afc:	f7ff ff0a 	bl	8005914 <MX_I2C4_Init>
 8005b00:	2800      	cmp	r0, #0
 8005b02:	f43f af30 	beq.w	8005966 <BSP_I2C4_Init+0x12>
          ret = BSP_ERROR_BUS_FAILURE;
 8005b06:	f06f 0007 	mvn.w	r0, #7
  return ret;
 8005b0a:	e72d      	b.n	8005968 <BSP_I2C4_Init+0x14>
 8005b0c:	4691      	mov	r9, r2
 8005b0e:	f04f 0a01 	mov.w	sl, #1
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8005b12:	f10e 0e01 	add.w	lr, lr, #1
 8005b16:	440f      	add	r7, r1
 8005b18:	f1be 0f10 	cmp.w	lr, #16
 8005b1c:	d1a3      	bne.n	8005a66 <BSP_I2C4_Init+0x112>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8005b1e:	f1bc 0f10 	cmp.w	ip, #16
 8005b22:	4488      	add	r8, r1
 8005b24:	d196      	bne.n	8005a54 <BSP_I2C4_Init+0x100>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8005b26:	3201      	adds	r2, #1
 8005b28:	4401      	add	r1, r0
 8005b2a:	2a10      	cmp	r2, #16
 8005b2c:	d18f      	bne.n	8005a4e <BSP_I2C4_Init+0xfa>
 8005b2e:	f1ba 0f00 	cmp.w	sl, #0
 8005b32:	d1ac      	bne.n	8005a8e <BSP_I2C4_Init+0x13a>
 8005b34:	e7ad      	b.n	8005a92 <BSP_I2C4_Init+0x13e>
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005b36:	680b      	ldr	r3, [r1, #0]
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005b38:	f04f 0c00 	mov.w	ip, #0
 8005b3c:	9d08      	ldr	r5, [sp, #32]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005b3e:	fb03 0300 	mla	r3, r3, r0, r0
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005b42:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 8005b44:	441d      	add	r5, r3
 8005b46:	441e      	add	r6, r3
 8005b48:	9503      	str	r5, [sp, #12]
 8005b4a:	ebab 0503 	sub.w	r5, fp, r3
 8005b4e:	9607      	str	r6, [sp, #28]
 8005b50:	006d      	lsls	r5, r5, #1
 8005b52:	9500      	str	r5, [sp, #0]
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 8005b54:	9d03      	ldr	r5, [sp, #12]
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005b56:	f240 5214 	movw	r2, #1300	@ 0x514
 8005b5a:	f8cd c010 	str.w	ip, [sp, #16]
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005b5e:	f10c 0c01 	add.w	ip, ip, #1
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005b62:	4295      	cmp	r5, r2
 8005b64:	d92f      	bls.n	8005bc6 <BSP_I2C4_Init+0x272>
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8005b66:	f1a5 0632 	sub.w	r6, r5, #50	@ 0x32
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005b6a:	ebb0 0f96 	cmp.w	r0, r6, lsr #2
 8005b6e:	d22a      	bcs.n	8005bc6 <BSP_I2C4_Init+0x272>
 8005b70:	9e07      	ldr	r6, [sp, #28]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005b72:	f04f 0e00 	mov.w	lr, #0
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8005b76:	f8dd 9000 	ldr.w	r9, [sp]
 8005b7a:	442e      	add	r6, r5
 8005b7c:	f8dd 800c 	ldr.w	r8, [sp, #12]
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005b80:	f206 1aa1 	addw	sl, r6, #417	@ 0x1a1
 8005b84:	f240 4212 	movw	r2, #1042	@ 0x412
 8005b88:	f8cd e018 	str.w	lr, [sp, #24]
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 8005b8c:	f10e 0e01 	add.w	lr, lr, #1
          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005b90:	4592      	cmp	sl, r2
 8005b92:	d811      	bhi.n	8005bb8 <BSP_I2C4_Init+0x264>
 8005b94:	f5b8 7f16 	cmp.w	r8, #600	@ 0x258
 8005b98:	d30e      	bcc.n	8005bb8 <BSP_I2C4_Init+0x264>
 8005b9a:	4580      	cmp	r8, r0
 8005b9c:	d90c      	bls.n	8005bb8 <BSP_I2C4_Init+0x264>
              error = -error;
 8005b9e:	ea36 0a26 	bics.w	sl, r6, r6, asr #32
 8005ba2:	bf28      	it	cs
 8005ba4:	46ca      	movcs	sl, r9
            if ((uint32_t)error < prev_error)
 8005ba6:	9a02      	ldr	r2, [sp, #8]
 8005ba8:	4592      	cmp	sl, r2
 8005baa:	d205      	bcs.n	8005bb8 <BSP_I2C4_Init+0x264>
              I2c_valid_timing[count].scll = scll;
 8005bac:	9a04      	ldr	r2, [sp, #16]
 8005bae:	610a      	str	r2, [r1, #16]
              I2c_valid_timing[count].sclh = sclh;
 8005bb0:	9a06      	ldr	r2, [sp, #24]
 8005bb2:	e9cd 7a01 	strd	r7, sl, [sp, #4]
 8005bb6:	60ca      	str	r2, [r1, #12]
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005bb8:	f5be 7f80 	cmp.w	lr, #256	@ 0x100
 8005bbc:	4498      	add	r8, r3
 8005bbe:	441e      	add	r6, r3
 8005bc0:	eba9 0903 	sub.w	r9, r9, r3
 8005bc4:	d1dc      	bne.n	8005b80 <BSP_I2C4_Init+0x22c>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005bc6:	9a00      	ldr	r2, [sp, #0]
 8005bc8:	f5bc 7f80 	cmp.w	ip, #256	@ 0x100
 8005bcc:	441d      	add	r5, r3
 8005bce:	eba2 0203 	sub.w	r2, r2, r3
 8005bd2:	9200      	str	r2, [sp, #0]
 8005bd4:	d1bf      	bne.n	8005b56 <BSP_I2C4_Init+0x202>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005bd6:	3701      	adds	r7, #1
 8005bd8:	3114      	adds	r1, #20
 8005bda:	e770      	b.n	8005abe <BSP_I2C4_Init+0x16a>
 8005bdc:	58001c00 	.word	0x58001c00
 8005be0:	2400b320 	.word	0x2400b320
 8005be4:	2400bd78 	.word	0x2400bd78
 8005be8:	58024400 	.word	0x58024400
 8005bec:	58020c00 	.word	0x58020c00
 8005bf0:	3b9aca00 	.word	0x3b9aca00
 8005bf4:	2400b374 	.word	0x2400b374
 8005bf8:	2400b378 	.word	0x2400b378

08005bfc <BSP_I2C4_WriteReg>:
{
 8005bfc:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005bfe:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005c02:	9200      	str	r2, [sp, #0]
 8005c04:	460a      	mov	r2, r1
 8005c06:	4601      	mov	r1, r0
 8005c08:	4808      	ldr	r0, [pc, #32]	@ (8005c2c <BSP_I2C4_WriteReg+0x30>)
 8005c0a:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c0e:	2301      	movs	r3, #1
 8005c10:	f002 f940 	bl	8007e94 <HAL_I2C_Mem_Write>
 8005c14:	b140      	cbz	r0, 8005c28 <BSP_I2C4_WriteReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005c16:	4805      	ldr	r0, [pc, #20]	@ (8005c2c <BSP_I2C4_WriteReg+0x30>)
 8005c18:	f002 faf7 	bl	800820a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005c1c:	2804      	cmp	r0, #4
 8005c1e:	bf14      	ite	ne
 8005c20:	f06f 0003 	mvnne.w	r0, #3
 8005c24:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005c28:	b004      	add	sp, #16
 8005c2a:	bd10      	pop	{r4, pc}
 8005c2c:	2400b320 	.word	0x2400b320

08005c30 <BSP_I2C4_ReadReg>:
{
 8005c30:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005c32:	f44f 747a 	mov.w	r4, #1000	@ 0x3e8
 8005c36:	9200      	str	r2, [sp, #0]
 8005c38:	460a      	mov	r2, r1
 8005c3a:	4601      	mov	r1, r0
 8005c3c:	4808      	ldr	r0, [pc, #32]	@ (8005c60 <BSP_I2C4_ReadReg+0x30>)
 8005c3e:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8005c42:	2301      	movs	r3, #1
 8005c44:	f002 fa00 	bl	8008048 <HAL_I2C_Mem_Read>
 8005c48:	b140      	cbz	r0, 8005c5c <BSP_I2C4_ReadReg+0x2c>
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8005c4a:	4805      	ldr	r0, [pc, #20]	@ (8005c60 <BSP_I2C4_ReadReg+0x30>)
 8005c4c:	f002 fadd 	bl	800820a <HAL_I2C_GetError>
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8005c50:	2804      	cmp	r0, #4
 8005c52:	bf14      	ite	ne
 8005c54:	f06f 0003 	mvnne.w	r0, #3
 8005c58:	f06f 0065 	mvneq.w	r0, #101	@ 0x65
}
 8005c5c:	b004      	add	sp, #16
 8005c5e:	bd10      	pop	{r4, pc}
 8005c60:	2400b320 	.word	0x2400b320

08005c64 <BSP_GetTick>:
  return (int32_t)HAL_GetTick();
 8005c64:	f000 bd08 	b.w	8006678 <HAL_GetTick>

08005c68 <MX_QSPI_Init>:
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 8005c68:	4a09      	ldr	r2, [pc, #36]	@ (8005c90 <MX_QSPI_Init+0x28>)
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
  hQspi->Init.FifoThreshold      = 1;
  hQspi->Init.SampleShifting     = Config->SampleShifting;
  hQspi->Init.FlashSize          = Config->FlashSize;
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005c6a:	f44f 7c40 	mov.w	ip, #768	@ 0x300
  hQspi->Instance                = QUADSPI;
 8005c6e:	6002      	str	r2, [r0, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 8005c70:	684a      	ldr	r2, [r1, #4]
 8005c72:	6042      	str	r2, [r0, #4]
  hQspi->Init.FifoThreshold      = 1;
 8005c74:	2201      	movs	r2, #1
 8005c76:	6082      	str	r2, [r0, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 8005c78:	688a      	ldr	r2, [r1, #8]
 8005c7a:	60c2      	str	r2, [r0, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 8005c7c:	680a      	ldr	r2, [r1, #0]
 8005c7e:	6102      	str	r2, [r0, #16]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 8005c80:	2200      	movs	r2, #0
 8005c82:	e9c0 c205 	strd	ip, r2, [r0, #20]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 8005c86:	61c2      	str	r2, [r0, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 8005c88:	68ca      	ldr	r2, [r1, #12]
 8005c8a:	6202      	str	r2, [r0, #32]

  return HAL_QSPI_Init(hQspi);
 8005c8c:	f003 bede 	b.w	8009a4c <HAL_QSPI_Init>
 8005c90:	52005000 	.word	0x52005000

08005c94 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 8005c94:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005c96:	b988      	cbnz	r0, 8005cbc <BSP_QSPI_EnableMemoryMappedMode+0x28>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c98:	4c0a      	ldr	r4, [pc, #40]	@ (8005cc4 <BSP_QSPI_EnableMemoryMappedMode+0x30>)
 8005c9a:	480b      	ldr	r0, [pc, #44]	@ (8005cc8 <BSP_QSPI_EnableMemoryMappedMode+0x34>)
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005c9c:	78a3      	ldrb	r3, [r4, #2]
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005c9e:	7861      	ldrb	r1, [r4, #1]
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 8005ca0:	b94b      	cbnz	r3, 8005cb6 <BSP_QSPI_EnableMemoryMappedMode+0x22>
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005ca2:	f7ff f9bc 	bl	800501e <MT25TL01G_EnableMemoryMappedModeSTR>
 8005ca6:	b110      	cbz	r0, 8005cae <BSP_QSPI_EnableMemoryMappedMode+0x1a>
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005ca8:	f06f 0004 	mvn.w	r0, #4
    }
  }

  /* Return BSP status */
  return ret;
}
 8005cac:	bd10      	pop	{r4, pc}
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005cae:	2302      	movs	r3, #2
  int32_t ret = BSP_ERROR_NONE;
 8005cb0:	2000      	movs	r0, #0
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8005cb2:	7023      	strb	r3, [r4, #0]
 8005cb4:	e7fa      	b.n	8005cac <BSP_QSPI_EnableMemoryMappedMode+0x18>
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005cb6:	f7ff f968 	bl	8004f8a <MT25TL01G_EnableMemoryMappedModeDTR>
 8005cba:	e7f4      	b.n	8005ca6 <BSP_QSPI_EnableMemoryMappedMode+0x12>
    ret = BSP_ERROR_WRONG_PARAM;
 8005cbc:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8005cc0:	e7f4      	b.n	8005cac <BSP_QSPI_EnableMemoryMappedMode+0x18>
 8005cc2:	bf00      	nop
 8005cc4:	2400bd7c 	.word	0x2400bd7c
 8005cc8:	2400049c 	.word	0x2400049c

08005ccc <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8005ccc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005cce:	460c      	mov	r4, r1
 8005cd0:	4617      	mov	r7, r2
  int32_t ret = BSP_ERROR_NONE;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005cd2:	bb30      	cbnz	r0, 8005d22 <BSP_QSPI_ConfigFlash+0x56>
    ret = BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 8005cd4:	4d17      	ldr	r5, [pc, #92]	@ (8005d34 <BSP_QSPI_ConfigFlash+0x68>)
 8005cd6:	782b      	ldrb	r3, [r5, #0]
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d025      	beq.n	8005d28 <BSP_QSPI_ConfigFlash+0x5c>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005cdc:	fab2 f382 	clz	r3, r2
 8005ce0:	4e15      	ldr	r6, [pc, #84]	@ (8005d38 <BSP_QSPI_ConfigFlash+0x6c>)
 8005ce2:	095b      	lsrs	r3, r3, #5

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005ce4:	4630      	mov	r0, r6
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	60f3      	str	r3, [r6, #12]
      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 8005cea:	f003 feaf 	bl	8009a4c <HAL_QSPI_Init>
 8005cee:	b9f0      	cbnz	r0, 8005d2e <BSP_QSPI_ConfigFlash+0x62>
        ret = BSP_ERROR_PERIPH_FAILURE;
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 8005cf0:	786b      	ldrb	r3, [r5, #1]
 8005cf2:	2b03      	cmp	r3, #3
 8005cf4:	d10f      	bne.n	8005d16 <BSP_QSPI_ConfigFlash+0x4a>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8005cf6:	2c03      	cmp	r4, #3
 8005cf8:	d105      	bne.n	8005d06 <BSP_QSPI_ConfigFlash+0x3a>

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005cfa:	2301      	movs	r3, #1
          QSPI_Ctx[Instance].InterfaceMode = Mode;
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005cfc:	2000      	movs	r0, #0
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8005cfe:	706c      	strb	r4, [r5, #1]
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8005d00:	702b      	strb	r3, [r5, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8005d02:	70af      	strb	r7, [r5, #2]
    }
  }

  /* Return BSP status */
  return ret;
}
 8005d04:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8005d06:	4630      	mov	r0, r6
 8005d08:	f7ff f923 	bl	8004f52 <MT25TL01G_ExitQPIMode>
 8005d0c:	2800      	cmp	r0, #0
 8005d0e:	d0f4      	beq.n	8005cfa <BSP_QSPI_ConfigFlash+0x2e>
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d10:	f06f 0004 	mvn.w	r0, #4
 8005d14:	e7f6      	b.n	8005d04 <BSP_QSPI_ConfigFlash+0x38>
          if(Mode == MT25TL01G_QPI_MODE)
 8005d16:	2c03      	cmp	r4, #3
 8005d18:	d1ef      	bne.n	8005cfa <BSP_QSPI_ConfigFlash+0x2e>
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8005d1a:	4630      	mov	r0, r6
 8005d1c:	f7ff f8fd 	bl	8004f1a <MT25TL01G_EnterQPIMode>
 8005d20:	e7f4      	b.n	8005d0c <BSP_QSPI_ConfigFlash+0x40>
    ret = BSP_ERROR_WRONG_PARAM;
 8005d22:	f06f 0001 	mvn.w	r0, #1
 8005d26:	e7ed      	b.n	8005d04 <BSP_QSPI_ConfigFlash+0x38>
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 8005d28:	f06f 0019 	mvn.w	r0, #25
 8005d2c:	e7ea      	b.n	8005d04 <BSP_QSPI_ConfigFlash+0x38>
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005d2e:	f06f 0003 	mvn.w	r0, #3
  return ret;
 8005d32:	e7e7      	b.n	8005d04 <BSP_QSPI_ConfigFlash+0x38>
 8005d34:	2400bd7c 	.word	0x2400bd7c
 8005d38:	2400049c 	.word	0x2400049c

08005d3c <BSP_QSPI_Init>:
{
 8005d3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005d40:	460c      	mov	r4, r1
 8005d42:	b0a4      	sub	sp, #144	@ 0x90
  if(Instance >= QSPI_INSTANCES_NUMBER)
 8005d44:	2800      	cmp	r0, #0
 8005d46:	f040 81ac 	bne.w	80060a2 <BSP_QSPI_Init+0x366>
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 8005d4a:	4d03      	ldr	r5, [pc, #12]	@ (8005d58 <BSP_QSPI_Init+0x1c>)
 8005d4c:	782f      	ldrb	r7, [r5, #0]
 8005d4e:	b12f      	cbz	r7, 8005d5c <BSP_QSPI_Init+0x20>
  int32_t ret = BSP_ERROR_NONE;
 8005d50:	2000      	movs	r0, #0
}
 8005d52:	b024      	add	sp, #144	@ 0x90
 8005d54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d58:	2400bd7c 	.word	0x2400bd7c
{
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8005d5c:	4bc3      	ldr	r3, [pc, #780]	@ (800606c <BSP_QSPI_Init+0x330>)
  QSPI_BK2_D3_GPIO_CLK_ENABLE();

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005d5e:	f04f 0904 	mov.w	r9, #4
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005d62:	2609      	movs	r6, #9
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005d64:	a916      	add	r1, sp, #88	@ 0x58
  QSPI_CLK_ENABLE();
 8005d66:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005d6a:	f04f 0840 	mov.w	r8, #64	@ 0x40
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005d6e:	48c0      	ldr	r0, [pc, #768]	@ (8006070 <BSP_QSPI_Init+0x334>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005d70:	f04f 0a0a 	mov.w	sl, #10
  QSPI_CLK_ENABLE();
 8005d74:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d78:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8005d7c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8005d80:	f402 4280 	and.w	r2, r2, #16384	@ 0x4000
 8005d84:	9201      	str	r2, [sp, #4]
 8005d86:	9a01      	ldr	r2, [sp, #4]
  QSPI_FORCE_RESET();
 8005d88:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005d8a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005d8e:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 8005d90:	6fda      	ldr	r2, [r3, #124]	@ 0x7c
 8005d92:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8005d96:	67da      	str	r2, [r3, #124]	@ 0x7c
  QSPI_CLK_GPIO_CLK_ENABLE();
 8005d98:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005d9c:	f042 0202 	orr.w	r2, r2, #2
 8005da0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005da4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005da8:	f002 0202 	and.w	r2, r2, #2
 8005dac:	9202      	str	r2, [sp, #8]
 8005dae:	9a02      	ldr	r2, [sp, #8]
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 8005db0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005db4:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005db8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dbc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dc0:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005dc4:	9203      	str	r2, [sp, #12]
 8005dc6:	9a03      	ldr	r2, [sp, #12]
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8005dc8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dcc:	f042 0208 	orr.w	r2, r2, #8
 8005dd0:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dd4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dd8:	f002 0208 	and.w	r2, r2, #8
 8005ddc:	9204      	str	r2, [sp, #16]
 8005dde:	9a04      	ldr	r2, [sp, #16]
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8005de0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005de4:	f042 0220 	orr.w	r2, r2, #32
 8005de8:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005dec:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005df0:	f002 0220 	and.w	r2, r2, #32
 8005df4:	9205      	str	r2, [sp, #20]
 8005df6:	9a05      	ldr	r2, [sp, #20]
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8005df8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005dfc:	f042 0220 	orr.w	r2, r2, #32
 8005e00:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e04:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e08:	f002 0220 	and.w	r2, r2, #32
 8005e0c:	9206      	str	r2, [sp, #24]
 8005e0e:	9a06      	ldr	r2, [sp, #24]
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8005e10:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e14:	f042 0220 	orr.w	r2, r2, #32
 8005e18:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e1c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e20:	f002 0220 	and.w	r2, r2, #32
 8005e24:	9207      	str	r2, [sp, #28]
 8005e26:	9a07      	ldr	r2, [sp, #28]
  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 8005e28:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e2c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e30:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e34:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e38:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005e3c:	9208      	str	r2, [sp, #32]
 8005e3e:	9a08      	ldr	r2, [sp, #32]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 8005e40:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e48:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e4c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e50:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005e54:	9209      	str	r2, [sp, #36]	@ 0x24
 8005e56:	9a09      	ldr	r2, [sp, #36]	@ 0x24
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 8005e58:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e5c:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8005e60:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e64:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e68:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8005e6c:	920a      	str	r2, [sp, #40]	@ 0x28
 8005e6e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 8005e70:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e74:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e78:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e7c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e80:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 8005e84:	920b      	str	r2, [sp, #44]	@ 0x2c
 8005e86:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 8005e88:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8005e8c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005e90:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8005e94:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005e98:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005e9c:	930c      	str	r3, [sp, #48]	@ 0x30
 8005e9e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8005ea0:	2302      	movs	r3, #2
 8005ea2:	e9cd 9316 	strd	r9, r3, [sp, #88]	@ 0x58
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8005ea6:	2303      	movs	r3, #3
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ea8:	961a      	str	r6, [sp, #104]	@ 0x68
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005eaa:	e9cd 7318 	strd	r7, r3, [sp, #96]	@ 0x60
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8005eae:	f001 fc9f 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005eb2:	2301      	movs	r3, #1
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005eb4:	a916      	add	r1, sp, #88	@ 0x58
 8005eb6:	486f      	ldr	r0, [pc, #444]	@ (8006074 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8005eb8:	9318      	str	r3, [sp, #96]	@ 0x60
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8005eba:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005ebe:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8005ec2:	f001 fc95 	bl	80077f0 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005ec6:	f44f 6300 	mov.w	r3, #2048	@ 0x800
  gpio_init_structure.Pull      = GPIO_NOPULL;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005eca:	a916      	add	r1, sp, #88	@ 0x58
 8005ecc:	486a      	ldr	r0, [pc, #424]	@ (8006078 <BSP_QSPI_Init+0x33c>)
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 8005ece:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8005ed0:	9718      	str	r7, [sp, #96]	@ 0x60
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ed2:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 8005ed4:	f001 fc8c 	bl	80077f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ed8:	a916      	add	r1, sp, #88	@ 0x58
  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8005eda:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ede:	4867      	ldr	r0, [pc, #412]	@ (800607c <BSP_QSPI_Init+0x340>)

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005ee0:	f44f 7900 	mov.w	r9, #512	@ 0x200
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005ee4:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 8005ee6:	f001 fc83 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005eea:	a916      	add	r1, sp, #88	@ 0x58
 8005eec:	4864      	ldr	r0, [pc, #400]	@ (8006080 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 8005eee:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8005ef2:	f8cd a068 	str.w	sl, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8005ef6:	f001 fc7b 	bl	80077f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005efa:	2308      	movs	r3, #8
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005efc:	a916      	add	r1, sp, #88	@ 0x58
 8005efe:	485f      	ldr	r0, [pc, #380]	@ (800607c <BSP_QSPI_Init+0x340>)
  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8005f00:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f02:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8005f04:	f001 fc74 	bl	80077f0 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005f08:	2380      	movs	r3, #128	@ 0x80
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005f0a:	a916      	add	r1, sp, #88	@ 0x58
 8005f0c:	485c      	ldr	r0, [pc, #368]	@ (8006080 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 8005f0e:	9316      	str	r3, [sp, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8005f10:	961a      	str	r6, [sp, #104]	@ 0x68
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 8005f12:	f001 fc6d 	bl	80077f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005f16:	a916      	add	r1, sp, #88	@ 0x58
 8005f18:	4856      	ldr	r0, [pc, #344]	@ (8006074 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 8005f1a:	f8cd 9058 	str.w	r9, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 8005f1e:	f001 fc67 	bl	80077f0 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005f22:	a916      	add	r1, sp, #88	@ 0x58
 8005f24:	4856      	ldr	r0, [pc, #344]	@ (8006080 <BSP_QSPI_Init+0x344>)
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 8005f26:	f8cd 8058 	str.w	r8, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 8005f2a:	f001 fc61 	bl	80077f0 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005f2e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005f32:	a916      	add	r1, sp, #88	@ 0x58
 8005f34:	484f      	ldr	r0, [pc, #316]	@ (8006074 <BSP_QSPI_Init+0x338>)
  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 8005f36:	9316      	str	r3, [sp, #88]	@ 0x58
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 8005f38:	f001 fc5a 	bl	80077f0 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 8005f3c:	463a      	mov	r2, r7
 8005f3e:	210f      	movs	r1, #15
 8005f40:	205c      	movs	r0, #92	@ 0x5c
 8005f42:	f000 fbc9 	bl	80066d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 8005f46:	205c      	movs	r0, #92	@ 0x5c
 8005f48:	f000 fbf8 	bl	800673c <HAL_NVIC_EnableIRQ>
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 8005f4c:	a811      	add	r0, sp, #68	@ 0x44
 8005f4e:	f7fe ff38 	bl	8004dc2 <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005f52:	7863      	ldrb	r3, [r4, #1]
 8005f54:	4a4b      	ldr	r2, [pc, #300]	@ (8006084 <BSP_QSPI_Init+0x348>)
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 8005f56:	f8cd 8040 	str.w	r8, [sp, #64]	@ 0x40
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 8005f5a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8005f5e:	920e      	str	r2, [sp, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8005f60:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8005f62:	fa92 f2a2 	rbit	r2, r2
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005f66:	fab3 f383 	clz	r3, r3
  return __builtin_clz(value);
 8005f6a:	fab2 f282 	clz	r2, r2
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005f6e:	a90d      	add	r1, sp, #52	@ 0x34
 8005f70:	4845      	ldr	r0, [pc, #276]	@ (8006088 <BSP_QSPI_Init+0x34c>)
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005f72:	095b      	lsrs	r3, r3, #5
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005f74:	3a01      	subs	r2, #1
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005f76:	011b      	lsls	r3, r3, #4
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 8005f78:	920d      	str	r2, [sp, #52]	@ 0x34
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 8005f7a:	930f      	str	r3, [sp, #60]	@ 0x3c
        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 8005f7c:	f7ff fe74 	bl	8005c68 <MX_QSPI_Init>
 8005f80:	2800      	cmp	r0, #0
 8005f82:	f040 8091 	bne.w	80060a8 <BSP_QSPI_Init+0x36c>
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
  int32_t ret = BSP_ERROR_NONE;

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005f86:	2103      	movs	r1, #3
 8005f88:	483f      	ldr	r0, [pc, #252]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005f8a:	f7ff f88e 	bl	80050aa <MT25TL01G_ResetEnable>
 8005f8e:	2800      	cmp	r0, #0
 8005f90:	f040 8084 	bne.w	800609c <BSP_QSPI_Init+0x360>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8005f94:	2103      	movs	r1, #3
 8005f96:	483c      	ldr	r0, [pc, #240]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005f98:	f7ff f8a8 	bl	80050ec <MT25TL01G_ResetMemory>
 8005f9c:	2800      	cmp	r0, #0
 8005f9e:	d17d      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005fa0:	7869      	ldrb	r1, [r5, #1]
 8005fa2:	4839      	ldr	r0, [pc, #228]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005fa4:	f7fe ff1e 	bl	8004de4 <MT25TL01G_AutoPollingMemReady>
 8005fa8:	4601      	mov	r1, r0
 8005faa:	2800      	cmp	r0, #0
 8005fac:	d176      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005fae:	4836      	ldr	r0, [pc, #216]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005fb0:	f7ff f87b 	bl	80050aa <MT25TL01G_ResetEnable>
 8005fb4:	4601      	mov	r1, r0
 8005fb6:	2800      	cmp	r0, #0
 8005fb8:	d170      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8005fba:	4833      	ldr	r0, [pc, #204]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005fbc:	f7ff f896 	bl	80050ec <MT25TL01G_ResetMemory>
 8005fc0:	4601      	mov	r1, r0
 8005fc2:	2800      	cmp	r0, #0
 8005fc4:	d16a      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005fc6:	2301      	movs	r3, #1
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 8005fc8:	70a8      	strb	r0, [r5, #2]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005fca:	482f      	ldr	r0, [pc, #188]	@ (8006088 <BSP_QSPI_Init+0x34c>)
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 8005fcc:	802b      	strh	r3, [r5, #0]
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005fce:	f7fe ff09 	bl	8004de4 <MT25TL01G_AutoPollingMemReady>
 8005fd2:	2800      	cmp	r0, #0
 8005fd4:	d162      	bne.n	800609c <BSP_QSPI_Init+0x360>
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8005fd6:	7869      	ldrb	r1, [r5, #1]
 8005fd8:	482b      	ldr	r0, [pc, #172]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8005fda:	f7fe ff72 	bl	8004ec2 <MT25TL01G_Enter4BytesAddressMode>
 8005fde:	2800      	cmp	r0, #0
 8005fe0:	d15c      	bne.n	800609c <BSP_QSPI_Init+0x360>
    int32_t ret= BSP_ERROR_NONE;
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005fe2:	f44f 7340 	mov.w	r3, #768	@ 0x300
  uint16_t reg=0;
 8005fe6:	f8ad 0002 	strh.w	r0, [sp, #2]
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
  s_command.DataMode          = QSPI_DATA_4_LINES;
  s_command.DummyCycles       = 0;
 8005fea:	901b      	str	r0, [sp, #108]	@ 0x6c
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005fec:	f241 3288 	movw	r2, #5000	@ 0x1388
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8005ff0:	931c      	str	r3, [sp, #112]	@ 0x70
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005ff2:	2385      	movs	r3, #133	@ 0x85
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8005ff4:	a916      	add	r1, sp, #88	@ 0x58
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 8005ff6:	9316      	str	r3, [sp, #88]	@ 0x58
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8005ff8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8005ffc:	931f      	str	r3, [sp, #124]	@ 0x7c
  s_command.NbData            = 2;
 8005ffe:	2302      	movs	r3, #2
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8006000:	e9cd 001d 	strd	r0, r0, [sp, #116]	@ 0x74
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8006004:	e9cd 3020 	strd	r3, r0, [sp, #128]	@ 0x80
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8006008:	e9cd 0022 	strd	r0, r0, [sp, #136]	@ 0x88
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800600c:	481e      	ldr	r0, [pc, #120]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 800600e:	f003 fd69 	bl	8009ae4 <HAL_QSPI_Command>
 8006012:	2800      	cmp	r0, #0
 8006014:	d142      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006016:	f241 3288 	movw	r2, #5000	@ 0x1388
 800601a:	f10d 0102 	add.w	r1, sp, #2
 800601e:	481a      	ldr	r0, [pc, #104]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8006020:	f003 fe01 	bl	8009c26 <HAL_QSPI_Receive>
 8006024:	2800      	cmp	r0, #0
 8006026:	d139      	bne.n	800609c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8006028:	7869      	ldrb	r1, [r5, #1]
 800602a:	4817      	ldr	r0, [pc, #92]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 800602c:	f7fe ff05 	bl	8004e3a <MT25TL01G_WriteEnable>
 8006030:	bba0      	cbnz	r0, 800609c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 8006032:	2381      	movs	r3, #129	@ 0x81
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006038:	a916      	add	r1, sp, #88	@ 0x58
 800603a:	4813      	ldr	r0, [pc, #76]	@ (8006088 <BSP_QSPI_Init+0x34c>)
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 800603c:	9316      	str	r3, [sp, #88]	@ 0x58
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 800603e:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8006042:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8006046:	051b      	lsls	r3, r3, #20
 8006048:	0d1b      	lsrs	r3, r3, #20
 800604a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800604e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006052:	f8ad 3002 	strh.w	r3, [sp, #2]
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8006056:	f003 fd45 	bl	8009ae4 <HAL_QSPI_Command>
 800605a:	b9f8      	cbnz	r0, 800609c <BSP_QSPI_Init+0x360>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800605c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006060:	f10d 0102 	add.w	r1, sp, #2
 8006064:	4808      	ldr	r0, [pc, #32]	@ (8006088 <BSP_QSPI_Init+0x34c>)
 8006066:	f003 fd82 	bl	8009b6e <HAL_QSPI_Transmit>
 800606a:	e00f      	b.n	800608c <BSP_QSPI_Init+0x350>
 800606c:	58024400 	.word	0x58024400
 8006070:	58020400 	.word	0x58020400
 8006074:	58021800 	.word	0x58021800
 8006078:	58020c00 	.word	0x58020c00
 800607c:	58021c00 	.word	0x58021c00
 8006080:	58021400 	.word	0x58021400
 8006084:	08024dec 	.word	0x08024dec
 8006088:	2400049c 	.word	0x2400049c
 800608c:	b930      	cbnz	r0, 800609c <BSP_QSPI_Init+0x360>
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 800608e:	7862      	ldrb	r2, [r4, #1]
 8006090:	7821      	ldrb	r1, [r4, #0]
 8006092:	f7ff fe1b 	bl	8005ccc <BSP_QSPI_ConfigFlash>
 8006096:	2800      	cmp	r0, #0
 8006098:	f43f ae5a 	beq.w	8005d50 <BSP_QSPI_Init+0x14>
            ret = BSP_ERROR_COMPONENT_FAILURE;
 800609c:	f06f 0004 	mvn.w	r0, #4
 80060a0:	e657      	b.n	8005d52 <BSP_QSPI_Init+0x16>
    ret = BSP_ERROR_WRONG_PARAM;
 80060a2:	f06f 0001 	mvn.w	r0, #1
 80060a6:	e654      	b.n	8005d52 <BSP_QSPI_Init+0x16>
          ret = BSP_ERROR_PERIPH_FAILURE;
 80060a8:	f06f 0003 	mvn.w	r0, #3
  return ret;
 80060ac:	e651      	b.n	8005d52 <BSP_QSPI_Init+0x16>
 80060ae:	bf00      	nop

080060b0 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 80060b0:	b510      	push	{r4, lr}
  int32_t ret = BSP_ERROR_NONE;

  if(Instance >=SDRAM_INSTANCES_NBR)
 80060b2:	4604      	mov	r4, r0
 80060b4:	b970      	cbnz	r0, 80060d4 <BSP_SDRAM_DeInit+0x24>
    ret =  BSP_ERROR_WRONG_PARAM;
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 80060b6:	4b09      	ldr	r3, [pc, #36]	@ (80060dc <BSP_SDRAM_DeInit+0x2c>)
 80060b8:	4809      	ldr	r0, [pc, #36]	@ (80060e0 <BSP_SDRAM_DeInit+0x30>)
 80060ba:	6003      	str	r3, [r0, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 80060bc:	f005 fb64 	bl	800b788 <HAL_SDRAM_DeInit>
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 80060c0:	207a      	movs	r0, #122	@ 0x7a
 80060c2:	f000 fb49 	bl	8006758 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 80060c6:	4807      	ldr	r0, [pc, #28]	@ (80060e4 <BSP_SDRAM_DeInit+0x34>)
 80060c8:	4b07      	ldr	r3, [pc, #28]	@ (80060e8 <BSP_SDRAM_DeInit+0x38>)
 80060ca:	6003      	str	r3, [r0, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80060cc:	f003 fa42 	bl	8009554 <HAL_MDMA_DeInit>
    ret = BSP_ERROR_NONE;
 80060d0:	4620      	mov	r0, r4
}
 80060d2:	bd10      	pop	{r4, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 80060d4:	f06f 0001 	mvn.w	r0, #1
  return ret;
 80060d8:	e7fb      	b.n	80060d2 <BSP_SDRAM_DeInit+0x22>
 80060da:	bf00      	nop
 80060dc:	52004140 	.word	0x52004140
 80060e0:	2400be80 	.word	0x2400be80
 80060e4:	2400bd88 	.word	0x2400bd88
 80060e8:	52000040 	.word	0x52000040

080060ec <MX_SDRAM_Init>:
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80060ec:	2201      	movs	r2, #1
 80060ee:	4915      	ldr	r1, [pc, #84]	@ (8006144 <MX_SDRAM_Init+0x58>)
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80060f0:	4b15      	ldr	r3, [pc, #84]	@ (8006148 <MX_SDRAM_Init+0x5c>)
{
 80060f2:	b510      	push	{r4, lr}
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 80060f4:	e9c0 1200 	strd	r1, r2, [r0]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 80060f8:	6082      	str	r2, [r0, #8]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 80060fa:	2104      	movs	r1, #4
 80060fc:	2220      	movs	r2, #32
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 80060fe:	2440      	movs	r4, #64	@ 0x40
{
 8006100:	b088      	sub	sp, #32
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8006102:	e9c0 1203 	strd	r1, r2, [r0, #12]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8006106:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 800610a:	e9c0 4205 	strd	r4, r2, [r0, #20]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 800610e:	2200      	movs	r2, #0
 8006110:	f44f 6400 	mov.w	r4, #2048	@ 0x800
 8006114:	e9c0 2407 	strd	r2, r4, [r0, #28]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8006118:	f44f 5480 	mov.w	r4, #4096	@ 0x1000
 800611c:	6244      	str	r4, [r0, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 800611e:	629a      	str	r2, [r3, #40]	@ 0x28
  sdram_timing.ExitSelfRefreshDelay = 7;
 8006120:	2207      	movs	r2, #7
 8006122:	2302      	movs	r3, #2
  sdram_timing.RowCycleDelay        = 7;
 8006124:	e9cd 1203 	strd	r1, r2, [sp, #12]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006128:	4469      	add	r1, sp
  sdram_timing.RCDDelay             = 2;
 800612a:	9307      	str	r3, [sp, #28]
  sdram_timing.ExitSelfRefreshDelay = 7;
 800612c:	e9cd 3201 	strd	r3, r2, [sp, #4]
  sdram_timing.RPDelay              = 2;
 8006130:	e9cd 3305 	strd	r3, r3, [sp, #20]
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8006134:	f005 fb00 	bl	800b738 <HAL_SDRAM_Init>
}
 8006138:	3800      	subs	r0, #0
 800613a:	bf18      	it	ne
 800613c:	2001      	movne	r0, #1
 800613e:	b008      	add	sp, #32
 8006140:	bd10      	pop	{r4, pc}
 8006142:	bf00      	nop
 8006144:	52004140 	.word	0x52004140
 8006148:	2400be80 	.word	0x2400be80

0800614c <BSP_SDRAM_Init>:
{
 800614c:	b5f0      	push	{r4, r5, r6, r7, lr}
  if(Instance >=SDRAM_INSTANCES_NBR)
 800614e:	4605      	mov	r5, r0
{
 8006150:	b08f      	sub	sp, #60	@ 0x3c
  if(Instance >=SDRAM_INSTANCES_NBR)
 8006152:	2800      	cmp	r0, #0
 8006154:	f040 80dd 	bne.w	8006312 <BSP_SDRAM_Init+0x1c6>
  __HAL_RCC_FMC_CLK_ENABLE();
 8006158:	4b71      	ldr	r3, [pc, #452]	@ (8006320 <BSP_SDRAM_Init+0x1d4>)
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800615a:	2703      	movs	r7, #3
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800615c:	a909      	add	r1, sp, #36	@ 0x24
 800615e:	4871      	ldr	r0, [pc, #452]	@ (8006324 <BSP_SDRAM_Init+0x1d8>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006160:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8006164:	4c70      	ldr	r4, [pc, #448]	@ (8006328 <BSP_SDRAM_Init+0x1dc>)
  __HAL_RCC_FMC_CLK_ENABLE();
 8006166:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 800616a:	4e70      	ldr	r6, [pc, #448]	@ (800632c <BSP_SDRAM_Init+0x1e0>)
  __HAL_RCC_FMC_CLK_ENABLE();
 800616c:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006170:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006174:	f402 5280 	and.w	r2, r2, #4096	@ 0x1000
 8006178:	9201      	str	r2, [sp, #4]
 800617a:	9a01      	ldr	r2, [sp, #4]
  SDRAM_MDMAx_CLK_ENABLE();
 800617c:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 8006180:	f042 0201 	orr.w	r2, r2, #1
 8006184:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
 8006188:	f8d3 20d4 	ldr.w	r2, [r3, #212]	@ 0xd4
 800618c:	f002 0201 	and.w	r2, r2, #1
 8006190:	9202      	str	r2, [sp, #8]
 8006192:	9a02      	ldr	r2, [sp, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006194:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006198:	f042 0208 	orr.w	r2, r2, #8
 800619c:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80061a0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061a4:	f002 0208 	and.w	r2, r2, #8
 80061a8:	9203      	str	r2, [sp, #12]
 80061aa:	9a03      	ldr	r2, [sp, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80061ac:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061b0:	f042 0210 	orr.w	r2, r2, #16
 80061b4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80061b8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061bc:	f002 0210 	and.w	r2, r2, #16
 80061c0:	9204      	str	r2, [sp, #16]
 80061c2:	9a04      	ldr	r2, [sp, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80061c4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061c8:	f042 0220 	orr.w	r2, r2, #32
 80061cc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80061d0:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061d4:	f002 0220 	and.w	r2, r2, #32
 80061d8:	9205      	str	r2, [sp, #20]
 80061da:	9a05      	ldr	r2, [sp, #20]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80061dc:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061e0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80061e4:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 80061e8:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061ec:	f002 0240 	and.w	r2, r2, #64	@ 0x40
 80061f0:	9206      	str	r2, [sp, #24]
 80061f2:	9a06      	ldr	r2, [sp, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80061f4:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 80061f8:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80061fc:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
 8006200:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006204:	f002 0280 	and.w	r2, r2, #128	@ 0x80
 8006208:	9207      	str	r2, [sp, #28]
 800620a:	9a07      	ldr	r2, [sp, #28]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800620c:	f8d3 20e0 	ldr.w	r2, [r3, #224]	@ 0xe0
 8006210:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006214:	f8c3 20e0 	str.w	r2, [r3, #224]	@ 0xe0
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006218:	2202      	movs	r2, #2
  __HAL_RCC_GPIOI_CLK_ENABLE();
 800621a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800621e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006222:	9308      	str	r3, [sp, #32]
 8006224:	9b08      	ldr	r3, [sp, #32]
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8006226:	2301      	movs	r3, #1
 8006228:	e9cd 230a 	strd	r2, r3, [sp, #40]	@ 0x28
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 800622c:	230c      	movs	r3, #12
 800622e:	e9cd 730c 	strd	r7, r3, [sp, #48]	@ 0x30
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8006232:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8006236:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8006238:	f001 fada 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 800623c:	f64f 7383 	movw	r3, #65411	@ 0xff83
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006240:	a909      	add	r1, sp, #36	@ 0x24
 8006242:	483b      	ldr	r0, [pc, #236]	@ (8006330 <BSP_SDRAM_Init+0x1e4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8006244:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006246:	f001 fad3 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 800624a:	f64f 033f 	movw	r3, #63551	@ 0xf83f
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 800624e:	a909      	add	r1, sp, #36	@ 0x24
 8006250:	4838      	ldr	r0, [pc, #224]	@ (8006334 <BSP_SDRAM_Init+0x1e8>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8006252:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8006254:	f001 facc 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006258:	f248 1337 	movw	r3, #33079	@ 0x8137
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800625c:	a909      	add	r1, sp, #36	@ 0x24
 800625e:	4836      	ldr	r0, [pc, #216]	@ (8006338 <BSP_SDRAM_Init+0x1ec>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8006260:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006262:	f001 fac5 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8006266:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 800626a:	a909      	add	r1, sp, #36	@ 0x24
 800626c:	4833      	ldr	r0, [pc, #204]	@ (800633c <BSP_SDRAM_Init+0x1f0>)
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 800626e:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8006270:	f001 fabe 	bl	80077f0 <HAL_GPIO_Init>
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8006274:	f240 63ff 	movw	r3, #1791	@ 0x6ff
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8006278:	a909      	add	r1, sp, #36	@ 0x24
 800627a:	4831      	ldr	r0, [pc, #196]	@ (8006340 <BSP_SDRAM_Init+0x1f4>)
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 800627c:	9309      	str	r3, [sp, #36]	@ 0x24
  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 800627e:	f001 fab7 	bl	80077f0 <HAL_GPIO_Init>
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006282:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8006286:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800628a:	f240 2002 	movw	r0, #514	@ 0x202
 800628e:	f640 0208 	movw	r2, #2056	@ 0x808
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8006292:	6334      	str	r4, [r6, #48]	@ 0x30
 8006294:	6426      	str	r6, [r4, #64]	@ 0x40
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8006296:	e9c4 1301 	strd	r1, r3, [r4, #4]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 800629a:	e9c4 0205 	strd	r0, r2, [r4, #20]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 800629e:	2380      	movs	r3, #128	@ 0x80
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80062a0:	2220      	movs	r2, #32
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80062a2:	4620      	mov	r0, r4
  mdma_handle.Init.BufferTransferLength     = 128;
 80062a4:	62a3      	str	r3, [r4, #40]	@ 0x28
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80062a6:	e9c4 2307 	strd	r2, r3, [r4, #28]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80062aa:	e9c4 3503 	strd	r3, r5, [r4, #12]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80062ae:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80062b2:	4b24      	ldr	r3, [pc, #144]	@ (8006344 <BSP_SDRAM_Init+0x1f8>)
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80062b4:	6262      	str	r2, [r4, #36]	@ 0x24
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80062b6:	6023      	str	r3, [r4, #0]
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80062b8:	e9c4 550b 	strd	r5, r5, [r4, #44]	@ 0x2c
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80062bc:	e9c4 550d 	strd	r5, r5, [r4, #52]	@ 0x34
  (void)HAL_MDMA_DeInit(&mdma_handle);
 80062c0:	f003 f948 	bl	8009554 <HAL_MDMA_DeInit>
  (void)HAL_MDMA_Init(&mdma_handle);
 80062c4:	4620      	mov	r0, r4
 80062c6:	f003 f8d6 	bl	8009476 <HAL_MDMA_Init>
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 80062ca:	462a      	mov	r2, r5
 80062cc:	210f      	movs	r1, #15
 80062ce:	207a      	movs	r0, #122	@ 0x7a
 80062d0:	f000 fa02 	bl	80066d8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 80062d4:	207a      	movs	r0, #122	@ 0x7a
 80062d6:	f000 fa31 	bl	800673c <HAL_NVIC_EnableIRQ>
    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 80062da:	4630      	mov	r0, r6
 80062dc:	f7ff ff06 	bl	80060ec <MX_SDRAM_Init>
 80062e0:	b9d0      	cbnz	r0, 8006318 <BSP_SDRAM_Init+0x1cc>
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80062e2:	4919      	ldr	r1, [pc, #100]	@ (8006348 <BSP_SDRAM_Init+0x1fc>)
 80062e4:	2308      	movs	r3, #8
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80062e6:	e9c1 3700 	strd	r3, r7, [r1]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80062ea:	f240 6303 	movw	r3, #1539	@ 0x603
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80062ee:	6108      	str	r0, [r1, #16]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80062f0:	e9c1 3002 	strd	r3, r0, [r1, #8]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80062f4:	2330      	movs	r3, #48	@ 0x30
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80062f6:	e9c1 3005 	strd	r3, r0, [r1, #20]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80062fa:	f44f 7300 	mov.w	r3, #512	@ 0x200
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80062fe:	4630      	mov	r0, r6
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8006300:	61cb      	str	r3, [r1, #28]
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8006302:	f7fe fd31 	bl	8004d68 <IS42S32800J_Init>
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8006306:	2800      	cmp	r0, #0
 8006308:	bf18      	it	ne
 800630a:	f06f 0004 	mvnne.w	r0, #4
}
 800630e:	b00f      	add	sp, #60	@ 0x3c
 8006310:	bdf0      	pop	{r4, r5, r6, r7, pc}
    ret =  BSP_ERROR_WRONG_PARAM;
 8006312:	f06f 0001 	mvn.w	r0, #1
 8006316:	e7fa      	b.n	800630e <BSP_SDRAM_Init+0x1c2>
      ret = BSP_ERROR_NO_INIT;
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
  return ret;
 800631c:	e7f7      	b.n	800630e <BSP_SDRAM_Init+0x1c2>
 800631e:	bf00      	nop
 8006320:	58024400 	.word	0x58024400
 8006324:	58020c00 	.word	0x58020c00
 8006328:	2400bdf4 	.word	0x2400bdf4
 800632c:	2400be80 	.word	0x2400be80
 8006330:	58021000 	.word	0x58021000
 8006334:	58021400 	.word	0x58021400
 8006338:	58021800 	.word	0x58021800
 800633c:	58021c00 	.word	0x58021c00
 8006340:	58022000 	.word	0x58022000
 8006344:	52000040 	.word	0x52000040
 8006348:	2400be60 	.word	0x2400be60

0800634c <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 800634c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006350:	460c      	mov	r4, r1
 8006352:	b08c      	sub	sp, #48	@ 0x30
  int32_t ret = BSP_ERROR_NONE;

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006354:	4606      	mov	r6, r0
 8006356:	2800      	cmp	r0, #0
 8006358:	d15c      	bne.n	8006414 <BSP_TS_Init+0xc8>
 800635a:	680b      	ldr	r3, [r1, #0]
 800635c:	1e5a      	subs	r2, r3, #1
 800635e:	f5b2 7f48 	cmp.w	r2, #800	@ 0x320
 8006362:	d257      	bcs.n	8006414 <BSP_TS_Init+0xc8>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006364:	684a      	ldr	r2, [r1, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8006366:	1e51      	subs	r1, r2, #1
 8006368:	f5b1 7ff0 	cmp.w	r1, #480	@ 0x1e0
 800636c:	d252      	bcs.n	8006414 <BSP_TS_Init+0xc8>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 800636e:	4293      	cmp	r3, r2
 8006370:	bf28      	it	cs
 8006372:	4613      	movcs	r3, r2
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 8006374:	68e2      	ldr	r2, [r4, #12]
 8006376:	429a      	cmp	r2, r3
 8006378:	d84c      	bhi.n	8006414 <BSP_TS_Init+0xc8>
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 800637a:	2370      	movs	r3, #112	@ 0x70
 800637c:	2254      	movs	r2, #84	@ 0x54
 800637e:	f10d 0904 	add.w	r9, sp, #4

  for(i = 0; i < 2UL; i++)
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8006382:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006458 <BSP_TS_Init+0x10c>
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8006386:	e9cd 2301 	strd	r2, r3, [sp, #4]
  IOCtx.Init        = BSP_I2C4_Init;
 800638a:	4b2e      	ldr	r3, [pc, #184]	@ (8006444 <BSP_TS_Init+0xf8>)
 800638c:	9306      	str	r3, [sp, #24]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800638e:	4b2e      	ldr	r3, [pc, #184]	@ (8006448 <BSP_TS_Init+0xfc>)
 8006390:	9307      	str	r3, [sp, #28]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8006392:	4b2e      	ldr	r3, [pc, #184]	@ (800644c <BSP_TS_Init+0x100>)
 8006394:	930a      	str	r3, [sp, #40]	@ 0x28
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8006396:	4b2e      	ldr	r3, [pc, #184]	@ (8006450 <BSP_TS_Init+0x104>)
 8006398:	9309      	str	r3, [sp, #36]	@ 0x24
  IOCtx.GetTick     = BSP_GetTick;
 800639a:	4b2e      	ldr	r3, [pc, #184]	@ (8006454 <BSP_TS_Init+0x108>)
 800639c:	930b      	str	r3, [sp, #44]	@ 0x2c
    IOCtx.Address     = (uint16_t)i2c_address[i];
 800639e:	f859 3b04 	ldr.w	r3, [r9], #4
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80063a2:	a906      	add	r1, sp, #24
 80063a4:	482c      	ldr	r0, [pc, #176]	@ (8006458 <BSP_TS_Init+0x10c>)
    IOCtx.Address     = (uint16_t)i2c_address[i];
 80063a6:	f8ad 3020 	strh.w	r3, [sp, #32]
    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 80063aa:	f7fe fbe3 	bl	8004b74 <FT6X06_RegisterBusIO>
 80063ae:	b9c0      	cbnz	r0, 80063e2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_BUS_FAILURE;
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 80063b0:	4669      	mov	r1, sp
 80063b2:	4829      	ldr	r0, [pc, #164]	@ (8006458 <BSP_TS_Init+0x10c>)
 80063b4:	f7fe fb28 	bl	8004a08 <FT6X06_ReadID>
 80063b8:	b998      	cbnz	r0, 80063e2 <BSP_TS_Init+0x96>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
    }
    else if(id != FT6X06_ID)
 80063ba:	9b00      	ldr	r3, [sp, #0]
 80063bc:	2b11      	cmp	r3, #17
 80063be:	d110      	bne.n	80063e2 <BSP_TS_Init+0x96>
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 80063c0:	a903      	add	r1, sp, #12
 80063c2:	4825      	ldr	r0, [pc, #148]	@ (8006458 <BSP_TS_Init+0x10c>)
 80063c4:	f7fe fad4 	bl	8004970 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 80063c8:	4f24      	ldr	r7, [pc, #144]	@ (800645c <BSP_TS_Init+0x110>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80063ca:	4b25      	ldr	r3, [pc, #148]	@ (8006460 <BSP_TS_Init+0x114>)
 80063cc:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 8006468 <BSP_TS_Init+0x11c>

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80063d0:	4821      	ldr	r0, [pc, #132]	@ (8006458 <BSP_TS_Init+0x10c>)
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 80063d2:	f8c8 3000 	str.w	r3, [r8]
      Ts_CompObj[Instance] = &FT6X06Obj;
 80063d6:	f8c7 a000 	str.w	sl, [r7]
      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	4798      	blx	r3
 80063de:	4605      	mov	r5, r0
 80063e0:	b1d8      	cbz	r0, 800641a <BSP_TS_Init+0xce>
  for(i = 0; i < 2UL; i++)
 80063e2:	b116      	cbz	r6, 80063ea <BSP_TS_Init+0x9e>
      ret = BSP_ERROR_NO_INIT;
 80063e4:	f04f 35ff 	mov.w	r5, #4294967295
 80063e8:	e010      	b.n	800640c <BSP_TS_Init+0xc0>
  for(i = 0; i < 2UL; i++)
 80063ea:	2601      	movs	r6, #1
 80063ec:	e7d7      	b.n	800639e <BSP_TS_Init+0x52>
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80063ee:	9b07      	ldr	r3, [sp, #28]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80063f0:	6822      	ldr	r2, [r4, #0]
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 80063f2:	6133      	str	r3, [r6, #16]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80063f4:	9b08      	ldr	r3, [sp, #32]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80063f6:	6861      	ldr	r1, [r4, #4]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 80063f8:	6173      	str	r3, [r6, #20]
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 80063fa:	68e3      	ldr	r3, [r4, #12]
 80063fc:	441a      	add	r2, r3
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80063fe:	440b      	add	r3, r1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006400:	3201      	adds	r2, #1
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006402:	3301      	adds	r3, #1
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006404:	61b2      	str	r2, [r6, #24]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 8006406:	6273      	str	r3, [r6, #36]	@ 0x24
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8006408:	e9c6 2307 	strd	r2, r3, [r6, #28]
}
 800640c:	4628      	mov	r0, r5
 800640e:	b00c      	add	sp, #48	@ 0x30
 8006410:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    ret = BSP_ERROR_WRONG_PARAM;
 8006414:	f06f 0501 	mvn.w	r5, #1
  return ret;
 8006418:	e7f8      	b.n	800640c <BSP_TS_Init+0xc0>
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800641a:	6823      	ldr	r3, [r4, #0]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 800641c:	a906      	add	r1, sp, #24
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 800641e:	4e11      	ldr	r6, [pc, #68]	@ (8006464 <BSP_TS_Init+0x118>)
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006420:	6838      	ldr	r0, [r7, #0]
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 8006422:	6033      	str	r3, [r6, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8006424:	6863      	ldr	r3, [r4, #4]
 8006426:	6073      	str	r3, [r6, #4]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8006428:	68a3      	ldr	r3, [r4, #8]
 800642a:	60b3      	str	r3, [r6, #8]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 800642c:	68e3      	ldr	r3, [r4, #12]
 800642e:	60f3      	str	r3, [r6, #12]
      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8006430:	f8d8 3000 	ldr.w	r3, [r8]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	4798      	blx	r3
 8006438:	2800      	cmp	r0, #0
 800643a:	dad8      	bge.n	80063ee <BSP_TS_Init+0xa2>
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800643c:	f06f 0504 	mvn.w	r5, #4
 8006440:	e7e4      	b.n	800640c <BSP_TS_Init+0xc0>
 8006442:	bf00      	nop
 8006444:	08005955 	.word	0x08005955
 8006448:	080058c1 	.word	0x080058c1
 800644c:	08005c31 	.word	0x08005c31
 8006450:	08005bfd 	.word	0x08005bfd
 8006454:	08005c65 	.word	0x08005c65
 8006458:	2400beb4 	.word	0x2400beb4
 800645c:	2400bedc 	.word	0x2400bedc
 8006460:	24000068 	.word	0x24000068
 8006464:	2400bee0 	.word	0x2400bee0
 8006468:	2400bf08 	.word	0x2400bf08

0800646c <BSP_TS_GetState>:
{
 800646c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800646e:	460c      	mov	r4, r1
 8006470:	b085      	sub	sp, #20
  if(Instance >= TS_INSTANCES_NBR)
 8006472:	2800      	cmp	r0, #0
 8006474:	d14d      	bne.n	8006512 <BSP_TS_GetState+0xa6>
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8006476:	4b28      	ldr	r3, [pc, #160]	@ (8006518 <BSP_TS_GetState+0xac>)
 8006478:	a901      	add	r1, sp, #4
 800647a:	4a28      	ldr	r2, [pc, #160]	@ (800651c <BSP_TS_GetState+0xb0>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6810      	ldr	r0, [r2, #0]
 8006480:	691b      	ldr	r3, [r3, #16]
 8006482:	4798      	blx	r3
 8006484:	2800      	cmp	r0, #0
 8006486:	db41      	blt.n	800650c <BSP_TS_GetState+0xa0>
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 8006488:	4925      	ldr	r1, [pc, #148]	@ (8006520 <BSP_TS_GetState+0xb4>)
    else if(state.TouchDetected != 0U)
 800648a:	9e01      	ldr	r6, [sp, #4]
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 800648c:	698d      	ldr	r5, [r1, #24]
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 800648e:	6a08      	ldr	r0, [r1, #32]
    else if(state.TouchDetected != 0U)
 8006490:	2e00      	cmp	r6, #0
 8006492:	d037      	beq.n	8006504 <BSP_TS_GetState+0x98>
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8006494:	688f      	ldr	r7, [r1, #8]
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 8006496:	f8d1 e010 	ldr.w	lr, [r1, #16]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 800649a:	f017 0f08 	tst.w	r7, #8
      y_oriented = state.TouchY;
 800649e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 80064a2:	bf1e      	ittt	ne
 80064a4:	4694      	movne	ip, r2
        x_oriented = state.TouchY;
 80064a6:	461a      	movne	r2, r3
        y_oriented = state.TouchX;
 80064a8:	4663      	movne	r3, ip
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80064aa:	f017 0f02 	tst.w	r7, #2
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80064ae:	bf1c      	itt	ne
 80064b0:	f10e 3cff 	addne.w	ip, lr, #4294967295
 80064b4:	ebac 0202 	subne.w	r2, ip, r2
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80064b8:	f8d1 c014 	ldr.w	ip, [r1, #20]
      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80064bc:	077f      	lsls	r7, r7, #29
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 80064be:	bf44      	itt	mi
 80064c0:	f10c 37ff 	addmi.w	r7, ip, #4294967295
 80064c4:	1afb      	submi	r3, r7, r3
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80064c6:	680f      	ldr	r7, [r1, #0]
 80064c8:	437a      	muls	r2, r7
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80064ca:	684f      	ldr	r7, [r1, #4]
      TS_State->TouchDetected = state.TouchDetected;
 80064cc:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80064ce:	437b      	muls	r3, r7
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80064d0:	68cf      	ldr	r7, [r1, #12]
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80064d2:	fbb2 f2fe 	udiv	r2, r2, lr
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80064d6:	fbb3 f3fc 	udiv	r3, r3, ip
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80064da:	42aa      	cmp	r2, r5
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 80064dc:	6062      	str	r2, [r4, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 80064de:	60a3      	str	r3, [r4, #8]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80064e0:	bf8c      	ite	hi
 80064e2:	eba2 0c05 	subhi.w	ip, r2, r5
 80064e6:	eba5 0c02 	subls.w	ip, r5, r2
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80064ea:	4283      	cmp	r3, r0
 80064ec:	bf8c      	ite	hi
 80064ee:	1a1e      	subhi	r6, r3, r0
 80064f0:	1ac6      	subls	r6, r0, r3
      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 80064f2:	4567      	cmp	r7, ip
 80064f4:	d301      	bcc.n	80064fa <BSP_TS_GetState+0x8e>
 80064f6:	42b7      	cmp	r7, r6
 80064f8:	d205      	bcs.n	8006506 <BSP_TS_GetState+0x9a>
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 80064fa:	618a      	str	r2, [r1, #24]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 80064fc:	620b      	str	r3, [r1, #32]
  int32_t ret = BSP_ERROR_NONE;
 80064fe:	2000      	movs	r0, #0
}
 8006500:	b005      	add	sp, #20
 8006502:	bdf0      	pop	{r4, r5, r6, r7, pc}
      TS_State->TouchDetected = 0U;
 8006504:	6026      	str	r6, [r4, #0]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 8006506:	e9c4 5001 	strd	r5, r0, [r4, #4]
 800650a:	e7f8      	b.n	80064fe <BSP_TS_GetState+0x92>
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800650c:	f06f 0004 	mvn.w	r0, #4
 8006510:	e7f6      	b.n	8006500 <BSP_TS_GetState+0x94>
    ret = BSP_ERROR_WRONG_PARAM;
 8006512:	f06f 0001 	mvn.w	r0, #1
  return ret;
 8006516:	e7f3      	b.n	8006500 <BSP_TS_GetState+0x94>
 8006518:	2400bf08 	.word	0x2400bf08
 800651c:	2400bedc 	.word	0x2400bedc
 8006520:	2400bee0 	.word	0x2400bee0

08006524 <SystemInit>:
  */
void SystemInit (void)
{
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8006524:	4b2d      	ldr	r3, [pc, #180]	@ (80065dc <SystemInit+0xb8>)
 8006526:	f8d3 2088 	ldr.w	r2, [r3, #136]	@ 0x88
 800652a:	f442 0270 	orr.w	r2, r2, #15728640	@ 0xf00000
 800652e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8006532:	691a      	ldr	r2, [r3, #16]
 8006534:	f042 0210 	orr.w	r2, r2, #16
 8006538:	611a      	str	r2, [r3, #16]

#ifdef CORE_CM7
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800653a:	4a29      	ldr	r2, [pc, #164]	@ (80065e0 <SystemInit+0xbc>)
 800653c:	6813      	ldr	r3, [r2, #0]
 800653e:	f003 030f 	and.w	r3, r3, #15
 8006542:	2b06      	cmp	r3, #6
 8006544:	d805      	bhi.n	8006552 <SystemInit+0x2e>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006546:	6813      	ldr	r3, [r2, #0]
 8006548:	f023 030f 	bic.w	r3, r3, #15
 800654c:	f043 0307 	orr.w	r3, r3, #7
 8006550:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8006552:	4b24      	ldr	r3, [pc, #144]	@ (80065e4 <SystemInit+0xc0>)
 8006554:	681a      	ldr	r2, [r3, #0]
 8006556:	f042 0201 	orr.w	r2, r2, #1
 800655a:	601a      	str	r2, [r3, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 800655c:	2200      	movs	r2, #0
 800655e:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, RC48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 8006560:	4a21      	ldr	r2, [pc, #132]	@ (80065e8 <SystemInit+0xc4>)
 8006562:	6819      	ldr	r1, [r3, #0]
 8006564:	400a      	ands	r2, r1

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8006566:	491e      	ldr	r1, [pc, #120]	@ (80065e0 <SystemInit+0xbc>)
  RCC->CR &= 0xEAF6ED7FU;
 8006568:	601a      	str	r2, [r3, #0]
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 800656a:	680a      	ldr	r2, [r1, #0]
 800656c:	0712      	lsls	r2, r2, #28
 800656e:	d505      	bpl.n	800657c <SystemInit+0x58>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
	MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8006570:	680a      	ldr	r2, [r1, #0]
 8006572:	f022 020f 	bic.w	r2, r2, #15
 8006576:	f042 0207 	orr.w	r2, r2, #7
 800657a:	600a      	str	r2, [r1, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 800657c:	2200      	movs	r2, #0

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 800657e:	491b      	ldr	r1, [pc, #108]	@ (80065ec <SystemInit+0xc8>)
  RCC->D1CFGR = 0x00000000;
 8006580:	619a      	str	r2, [r3, #24]
  RCC->D2CFGR = 0x00000000;
 8006582:	61da      	str	r2, [r3, #28]
  RCC->D3CFGR = 0x00000000;
 8006584:	621a      	str	r2, [r3, #32]
  RCC->PLLCKSELR = 0x02020200;
 8006586:	6299      	str	r1, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 8006588:	4919      	ldr	r1, [pc, #100]	@ (80065f0 <SystemInit+0xcc>)
 800658a:	62d9      	str	r1, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 800658c:	4919      	ldr	r1, [pc, #100]	@ (80065f4 <SystemInit+0xd0>)
 800658e:	6319      	str	r1, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8006590:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 8006592:	6399      	str	r1, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8006594:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8006596:	6419      	str	r1, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 8006598:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 800659a:	6819      	ldr	r1, [r3, #0]
 800659c:	f421 2180 	bic.w	r1, r1, #262144	@ 0x40000
 80065a0:	6019      	str	r1, [r3, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80065a2:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80065a4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 80065a8:	f8d2 30e4 	ldr.w	r3, [r2, #228]	@ 0xe4
 80065ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80065b0:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4


  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80065b4:	4b10      	ldr	r3, [pc, #64]	@ (80065f8 <SystemInit+0xd4>)
 80065b6:	681b      	ldr	r3, [r3, #0]
 80065b8:	0c1b      	lsrs	r3, r3, #16
 80065ba:	041b      	lsls	r3, r3, #16
 80065bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80065c0:	d203      	bcs.n	80065ca <SystemInit+0xa6>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80065c2:	4b0e      	ldr	r3, [pc, #56]	@ (80065fc <SystemInit+0xd8>)
 80065c4:	2201      	movs	r2, #1
 80065c6:	f8c3 2108 	str.w	r2, [r3, #264]	@ 0x108
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80065ca:	4b0d      	ldr	r3, [pc, #52]	@ (8006600 <SystemInit+0xdc>)
 80065cc:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80065d0:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal D1 AXI-RAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 80065d2:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80065d6:	4b01      	ldr	r3, [pc, #4]	@ (80065dc <SystemInit+0xb8>)
 80065d8:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif
#endif

}
 80065da:	4770      	bx	lr
 80065dc:	e000ed00 	.word	0xe000ed00
 80065e0:	52002000 	.word	0x52002000
 80065e4:	58024400 	.word	0x58024400
 80065e8:	eaf6ed7f 	.word	0xeaf6ed7f
 80065ec:	02020200 	.word	0x02020200
 80065f0:	01ff0000 	.word	0x01ff0000
 80065f4:	01010280 	.word	0x01010280
 80065f8:	5c001000 	.word	0x5c001000
 80065fc:	51008000 	.word	0x51008000
 8006600:	52004000 	.word	0x52004000

08006604 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006604:	b510      	push	{r4, lr}
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006606:	2003      	movs	r0, #3
 8006608:	f000 f854 	bl	80066b4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800660c:	f003 fef8 	bl	800a400 <HAL_RCC_GetSysClockFreq>
 8006610:	490f      	ldr	r1, [pc, #60]	@ (8006650 <HAL_Init+0x4c>)
 8006612:	4a10      	ldr	r2, [pc, #64]	@ (8006654 <HAL_Init+0x50>)
 8006614:	698b      	ldr	r3, [r1, #24]
 8006616:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800661a:	5cd3      	ldrb	r3, [r2, r3]
 800661c:	f003 031f 	and.w	r3, r3, #31
 8006620:	40d8      	lsrs	r0, r3
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8006622:	698b      	ldr	r3, [r1, #24]
 8006624:	f003 030f 	and.w	r3, r3, #15
 8006628:	5cd3      	ldrb	r3, [r2, r3]
 800662a:	4a0b      	ldr	r2, [pc, #44]	@ (8006658 <HAL_Init+0x54>)
 800662c:	f003 031f 	and.w	r3, r3, #31
 8006630:	fa20 f303 	lsr.w	r3, r0, r3
 8006634:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8006636:	4b09      	ldr	r3, [pc, #36]	@ (800665c <HAL_Init+0x58>)
 8006638:	6018      	str	r0, [r3, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800663a:	2000      	movs	r0, #0
 800663c:	f7fb f9b6 	bl	80019ac <HAL_InitTick>
 8006640:	4604      	mov	r4, r0
 8006642:	b918      	cbnz	r0, 800664c <HAL_Init+0x48>
  {
    return HAL_ERROR;
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8006644:	f7fa fe50 	bl	80012e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
}
 8006648:	4620      	mov	r0, r4
 800664a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800664c:	2401      	movs	r4, #1
 800664e:	e7fb      	b.n	8006648 <HAL_Init+0x44>
 8006650:	58024400 	.word	0x58024400
 8006654:	08024df4 	.word	0x08024df4
 8006658:	24000098 	.word	0x24000098
 800665c:	2400009c 	.word	0x2400009c

08006660 <HAL_IncTick>:
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
  uwTick += (uint32_t)uwTickFreq;
 8006660:	4a03      	ldr	r2, [pc, #12]	@ (8006670 <HAL_IncTick+0x10>)
 8006662:	4b04      	ldr	r3, [pc, #16]	@ (8006674 <HAL_IncTick+0x14>)
 8006664:	6811      	ldr	r1, [r2, #0]
 8006666:	781b      	ldrb	r3, [r3, #0]
 8006668:	440b      	add	r3, r1
 800666a:	6013      	str	r3, [r2, #0]
}
 800666c:	4770      	bx	lr
 800666e:	bf00      	nop
 8006670:	2400bf0c 	.word	0x2400bf0c
 8006674:	240000a0 	.word	0x240000a0

08006678 <HAL_GetTick>:
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
  return uwTick;
 8006678:	4b01      	ldr	r3, [pc, #4]	@ (8006680 <HAL_GetTick+0x8>)
 800667a:	6818      	ldr	r0, [r3, #0]
}
 800667c:	4770      	bx	lr
 800667e:	bf00      	nop
 8006680:	2400bf0c 	.word	0x2400bf0c

08006684 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8006688:	f7ff fff6 	bl	8006678 <HAL_GetTick>
 800668c:	4605      	mov	r5, r0
  uint32_t wait = Delay;

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800668e:	1c63      	adds	r3, r4, #1
  {
    wait += (uint32_t)(uwTickFreq);
 8006690:	bf1e      	ittt	ne
 8006692:	4b04      	ldrne	r3, [pc, #16]	@ (80066a4 <HAL_Delay+0x20>)
 8006694:	781b      	ldrbne	r3, [r3, #0]
 8006696:	18e4      	addne	r4, r4, r3
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8006698:	f7ff ffee 	bl	8006678 <HAL_GetTick>
 800669c:	1b43      	subs	r3, r0, r5
 800669e:	42a3      	cmp	r3, r4
 80066a0:	d3fa      	bcc.n	8006698 <HAL_Delay+0x14>
  {
  }
}
 80066a2:	bd38      	pop	{r3, r4, r5, pc}
 80066a4:	240000a0 	.word	0x240000a0

080066a8 <HAL_GetREVID>:
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
   return((DBGMCU->IDCODE) >> 16);
 80066a8:	4b01      	ldr	r3, [pc, #4]	@ (80066b0 <HAL_GetREVID+0x8>)
 80066aa:	6818      	ldr	r0, [r3, #0]
}
 80066ac:	0c00      	lsrs	r0, r0, #16
 80066ae:	4770      	bx	lr
 80066b0:	5c001000 	.word	0x5c001000

080066b4 <HAL_NVIC_SetPriorityGrouping>:
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b4:	4907      	ldr	r1, [pc, #28]	@ (80066d4 <HAL_NVIC_SetPriorityGrouping+0x20>)
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066b6:	0203      	lsls	r3, r0, #8
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80066b8:	68ca      	ldr	r2, [r1, #12]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80066ba:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80066be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80066c2:	0412      	lsls	r2, r2, #16
 80066c4:	0c12      	lsrs	r2, r2, #16
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80066c6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80066c8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80066cc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
  SCB->AIRCR =  reg_value;
 80066d0:	60cb      	str	r3, [r1, #12]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
}
 80066d2:	4770      	bx	lr
 80066d4:	e000ed00 	.word	0xe000ed00

080066d8 <HAL_NVIC_SetPriority>:
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80066d8:	4b16      	ldr	r3, [pc, #88]	@ (8006734 <HAL_NVIC_SetPriority+0x5c>)
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80066da:	b530      	push	{r4, r5, lr}
 80066dc:	68dc      	ldr	r4, [r3, #12]
 80066de:	f3c4 2402 	ubfx	r4, r4, #8, #3
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e2:	f1c4 0307 	rsb	r3, r4, #7
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066e6:	1d25      	adds	r5, r4, #4
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80066e8:	2b04      	cmp	r3, #4
 80066ea:	bf28      	it	cs
 80066ec:	2304      	movcs	r3, #4
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066ee:	2d06      	cmp	r5, #6
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066f0:	f04f 35ff 	mov.w	r5, #4294967295
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80066f4:	bf8c      	ite	hi
 80066f6:	3c03      	subhi	r4, #3
 80066f8:	2400      	movls	r4, #0
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80066fa:	fa05 f303 	lsl.w	r3, r5, r3
  if ((int32_t)(IRQn) >= 0)
 80066fe:	2800      	cmp	r0, #0
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006700:	fa05 f504 	lsl.w	r5, r5, r4
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006704:	ea21 0303 	bic.w	r3, r1, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006708:	ea22 0205 	bic.w	r2, r2, r5
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800670c:	fa03 f304 	lsl.w	r3, r3, r4
 8006710:	ea43 0302 	orr.w	r3, r3, r2
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006714:	ea4f 1303 	mov.w	r3, r3, lsl #4
 8006718:	b2db      	uxtb	r3, r3
  if ((int32_t)(IRQn) >= 0)
 800671a:	db06      	blt.n	800672a <HAL_NVIC_SetPriority+0x52>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800671c:	f100 4060 	add.w	r0, r0, #3758096384	@ 0xe0000000
 8006720:	f500 4061 	add.w	r0, r0, #57600	@ 0xe100
 8006724:	f880 3300 	strb.w	r3, [r0, #768]	@ 0x300
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
}
 8006728:	bd30      	pop	{r4, r5, pc}
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800672a:	f000 000f 	and.w	r0, r0, #15
 800672e:	4a02      	ldr	r2, [pc, #8]	@ (8006738 <HAL_NVIC_SetPriority+0x60>)
 8006730:	5413      	strb	r3, [r2, r0]
 8006732:	e7f9      	b.n	8006728 <HAL_NVIC_SetPriority+0x50>
 8006734:	e000ed00 	.word	0xe000ed00
 8006738:	e000ed14 	.word	0xe000ed14

0800673c <HAL_NVIC_EnableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 800673c:	2800      	cmp	r0, #0
 800673e:	db07      	blt.n	8006750 <HAL_NVIC_EnableIRQ+0x14>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006740:	2301      	movs	r3, #1
 8006742:	0941      	lsrs	r1, r0, #5
 8006744:	f000 001f 	and.w	r0, r0, #31
 8006748:	4a02      	ldr	r2, [pc, #8]	@ (8006754 <HAL_NVIC_EnableIRQ+0x18>)
 800674a:	4083      	lsls	r3, r0
 800674c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
}
 8006750:	4770      	bx	lr
 8006752:	bf00      	nop
 8006754:	e000e100 	.word	0xe000e100

08006758 <HAL_NVIC_DisableIRQ>:
  if ((int32_t)(IRQn) >= 0)
 8006758:	2800      	cmp	r0, #0
 800675a:	db0c      	blt.n	8006776 <HAL_NVIC_DisableIRQ+0x1e>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800675c:	0943      	lsrs	r3, r0, #5
 800675e:	2201      	movs	r2, #1
 8006760:	f000 001f 	and.w	r0, r0, #31
 8006764:	4904      	ldr	r1, [pc, #16]	@ (8006778 <HAL_NVIC_DisableIRQ+0x20>)
 8006766:	3320      	adds	r3, #32
 8006768:	4082      	lsls	r2, r0
 800676a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800676e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 8006772:	f3bf 8f6f 	isb	sy
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
}
 8006776:	4770      	bx	lr
 8006778:	e000e100 	.word	0xe000e100

0800677c <HAL_MPU_Disable>:
  __ASM volatile ("dmb 0xF":::"memory");
 800677c:	f3bf 8f5f 	dmb	sy
{
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 8006780:	4b04      	ldr	r3, [pc, #16]	@ (8006794 <HAL_MPU_Disable+0x18>)
 8006782:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006784:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006788:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800678a:	2200      	movs	r2, #0
 800678c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
}
 8006790:	4770      	bx	lr
 8006792:	bf00      	nop
 8006794:	e000ed00 	.word	0xe000ed00

08006798 <HAL_MPU_Enable>:
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8006798:	4b06      	ldr	r3, [pc, #24]	@ (80067b4 <HAL_MPU_Enable+0x1c>)
 800679a:	f040 0001 	orr.w	r0, r0, #1
 800679e:	f8c3 0094 	str.w	r0, [r3, #148]	@ 0x94

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80067a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80067a4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80067a8:	625a      	str	r2, [r3, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80067aa:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
 80067ae:	f3bf 8f6f 	isb	sy

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80067b2:	4770      	bx	lr
 80067b4:	e000ed00 	.word	0xe000ed00

080067b8 <HAL_MPU_ConfigRegion>:
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80067b8:	7843      	ldrb	r3, [r0, #1]
 80067ba:	4a14      	ldr	r2, [pc, #80]	@ (800680c <HAL_MPU_ConfigRegion+0x54>)
 80067bc:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80067c0:	f8d2 30a0 	ldr.w	r3, [r2, #160]	@ 0xa0
 80067c4:	f023 0301 	bic.w	r3, r3, #1
 80067c8:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80067cc:	6843      	ldr	r3, [r0, #4]
 80067ce:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80067d2:	7ac3      	ldrb	r3, [r0, #11]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80067d4:	7b01      	ldrb	r1, [r0, #12]
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80067d6:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80067d8:	ea43 7301 	orr.w	r3, r3, r1, lsl #28
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80067dc:	7801      	ldrb	r1, [r0, #0]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067de:	430b      	orrs	r3, r1
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 80067e0:	7a81      	ldrb	r1, [r0, #10]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067e2:	ea43 43c1 	orr.w	r3, r3, r1, lsl #19
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 80067e6:	7b41      	ldrb	r1, [r0, #13]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067e8:	ea43 4381 	orr.w	r3, r3, r1, lsl #18
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 80067ec:	7b81      	ldrb	r1, [r0, #14]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067ee:	ea43 4341 	orr.w	r3, r3, r1, lsl #17
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 80067f2:	7bc1      	ldrb	r1, [r0, #15]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067f4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80067f8:	7a41      	ldrb	r1, [r0, #9]
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80067fa:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
 80067fe:	7a01      	ldrb	r1, [r0, #8]
 8006800:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8006804:	f8c2 30a0 	str.w	r3, [r2, #160]	@ 0xa0
}
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	e000ed00 	.word	0xe000ed00

08006810 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 8006810:	b510      	push	{r4, lr}
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 8006812:	4604      	mov	r4, r0
 8006814:	b908      	cbnz	r0, 800681a <HAL_CRC_Init+0xa>
  {
    return HAL_ERROR;
 8006816:	2001      	movs	r0, #1
  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;

  /* Return function status */
  return HAL_OK;
}
 8006818:	bd10      	pop	{r4, pc}
  if (hcrc->State == HAL_CRC_STATE_RESET)
 800681a:	7f43      	ldrb	r3, [r0, #29]
 800681c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006820:	b913      	cbnz	r3, 8006828 <HAL_CRC_Init+0x18>
    hcrc->Lock = HAL_UNLOCKED;
 8006822:	7702      	strb	r2, [r0, #28]
    HAL_CRC_MspInit(hcrc);
 8006824:	f7fa fd78 	bl	8001318 <HAL_CRC_MspInit>
  hcrc->State = HAL_CRC_STATE_BUSY;
 8006828:	2302      	movs	r3, #2
 800682a:	7763      	strb	r3, [r4, #29]
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 800682c:	7923      	ldrb	r3, [r4, #4]
 800682e:	b9e3      	cbnz	r3, 800686a <HAL_CRC_Init+0x5a>
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 8006830:	6823      	ldr	r3, [r4, #0]
 8006832:	4a13      	ldr	r2, [pc, #76]	@ (8006880 <HAL_CRC_Init+0x70>)
 8006834:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 8006836:	689a      	ldr	r2, [r3, #8]
 8006838:	f022 0218 	bic.w	r2, r2, #24
 800683c:	609a      	str	r2, [r3, #8]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 800683e:	7962      	ldrb	r2, [r4, #5]
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006840:	6823      	ldr	r3, [r4, #0]
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8006842:	b9d2      	cbnz	r2, 800687a <HAL_CRC_Init+0x6a>
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8006844:	f04f 32ff 	mov.w	r2, #4294967295
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8006848:	611a      	str	r2, [r3, #16]
  return HAL_OK;
 800684a:	2000      	movs	r0, #0
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 800684c:	689a      	ldr	r2, [r3, #8]
 800684e:	6961      	ldr	r1, [r4, #20]
 8006850:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8006854:	430a      	orrs	r2, r1
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8006856:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8006858:	609a      	str	r2, [r3, #8]
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 800685a:	689a      	ldr	r2, [r3, #8]
 800685c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006860:	430a      	orrs	r2, r1
 8006862:	609a      	str	r2, [r3, #8]
  hcrc->State = HAL_CRC_STATE_READY;
 8006864:	2301      	movs	r3, #1
 8006866:	7763      	strb	r3, [r4, #29]
  return HAL_OK;
 8006868:	e7d6      	b.n	8006818 <HAL_CRC_Init+0x8>
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 800686a:	e9d4 1202 	ldrd	r1, r2, [r4, #8]
 800686e:	4620      	mov	r0, r4
 8006870:	f000 f808 	bl	8006884 <HAL_CRCEx_Polynomial_Set>
 8006874:	2800      	cmp	r0, #0
 8006876:	d0e2      	beq.n	800683e <HAL_CRC_Init+0x2e>
 8006878:	e7cd      	b.n	8006816 <HAL_CRC_Init+0x6>
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 800687a:	6922      	ldr	r2, [r4, #16]
 800687c:	e7e4      	b.n	8006848 <HAL_CRC_Init+0x38>
 800687e:	bf00      	nop
 8006880:	04c11db7 	.word	0x04c11db7

08006884 <HAL_CRCEx_Polynomial_Set>:

  /* Check the parameters */
  assert_param(IS_CRC_POL_LENGTH(PolyLength));

  /* Ensure that the generating polynomial is odd */
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006884:	07cb      	lsls	r3, r1, #31
{
 8006886:	b510      	push	{r4, lr}
  if ((Pol & (uint32_t)(0x1U)) ==  0U)
 8006888:	d50d      	bpl.n	80068a6 <HAL_CRCEx_Polynomial_Set+0x22>
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 800688a:	231f      	movs	r3, #31
     * definition. HAL_ERROR is reported if Pol degree is
     * larger than that indicated by PolyLength.
     * Look for MSB position: msb will contain the degree of
     *  the second to the largest polynomial member. E.g., for
     *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
    while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 800688c:	3b01      	subs	r3, #1
 800688e:	d31d      	bcc.n	80068cc <HAL_CRCEx_Polynomial_Set+0x48>
 8006890:	fa21 f403 	lsr.w	r4, r1, r3
 8006894:	07e4      	lsls	r4, r4, #31
 8006896:	d5f9      	bpl.n	800688c <HAL_CRCEx_Polynomial_Set+0x8>
    {
    }

    switch (PolyLength)
 8006898:	2a10      	cmp	r2, #16
 800689a:	d013      	beq.n	80068c4 <HAL_CRCEx_Polynomial_Set+0x40>
 800689c:	2a10      	cmp	r2, #16
 800689e:	d804      	bhi.n	80068aa <HAL_CRCEx_Polynomial_Set+0x26>
 80068a0:	b13a      	cbz	r2, 80068b2 <HAL_CRCEx_Polynomial_Set+0x2e>
 80068a2:	2a08      	cmp	r2, #8
 80068a4:	d010      	beq.n	80068c8 <HAL_CRCEx_Polynomial_Set+0x44>
 80068a6:	2001      	movs	r0, #1

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
  }
  /* Return function status */
  return status;
 80068a8:	e00b      	b.n	80068c2 <HAL_CRCEx_Polynomial_Set+0x3e>
    switch (PolyLength)
 80068aa:	2a18      	cmp	r2, #24
 80068ac:	d1fb      	bne.n	80068a6 <HAL_CRCEx_Polynomial_Set+0x22>
        if (msb >= HAL_CRC_LENGTH_7B)
 80068ae:	2b06      	cmp	r3, #6
        if (msb >= HAL_CRC_LENGTH_16B)
 80068b0:	d8f9      	bhi.n	80068a6 <HAL_CRCEx_Polynomial_Set+0x22>
    WRITE_REG(hcrc->Instance->POL, Pol);
 80068b2:	6800      	ldr	r0, [r0, #0]
 80068b4:	6141      	str	r1, [r0, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 80068b6:	6883      	ldr	r3, [r0, #8]
 80068b8:	f023 0318 	bic.w	r3, r3, #24
 80068bc:	4313      	orrs	r3, r2
 80068be:	6083      	str	r3, [r0, #8]
 80068c0:	2000      	movs	r0, #0
}
 80068c2:	bd10      	pop	{r4, pc}
        if (msb >= HAL_CRC_LENGTH_8B)
 80068c4:	2b07      	cmp	r3, #7
 80068c6:	e7f3      	b.n	80068b0 <HAL_CRCEx_Polynomial_Set+0x2c>
        if (msb >= HAL_CRC_LENGTH_16B)
 80068c8:	2b0f      	cmp	r3, #15
 80068ca:	e7f1      	b.n	80068b0 <HAL_CRCEx_Polynomial_Set+0x2c>
    switch (PolyLength)
 80068cc:	2a10      	cmp	r2, #16
 80068ce:	d1e5      	bne.n	800689c <HAL_CRCEx_Polynomial_Set+0x18>
 80068d0:	e7e9      	b.n	80068a6 <HAL_CRCEx_Polynomial_Set+0x22>
	...

080068d4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80068d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068d6:	4605      	mov	r5, r0
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 80068d8:	f7ff fece 	bl	8006678 <HAL_GetTick>
 80068dc:	4607      	mov	r7, r0

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80068de:	b145      	cbz	r5, 80068f2 <HAL_DMA_Abort+0x1e>
  {
    return HAL_ERROR;
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80068e0:	f895 3035 	ldrb.w	r3, [r5, #53]	@ 0x35
 80068e4:	2b02      	cmp	r3, #2
 80068e6:	d006      	beq.n	80068f6 <HAL_DMA_Abort+0x22>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80068e8:	2380      	movs	r3, #128	@ 0x80
 80068ea:	656b      	str	r3, [r5, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80068ec:	2300      	movs	r3, #0
 80068ee:	f885 3034 	strb.w	r3, [r5, #52]	@ 0x34
    return HAL_ERROR;
 80068f2:	2001      	movs	r0, #1
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
  }

  return HAL_OK;
}
 80068f4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80068f6:	682c      	ldr	r4, [r5, #0]
 80068f8:	4ea9      	ldr	r6, [pc, #676]	@ (8006ba0 <HAL_DMA_Abort+0x2cc>)
 80068fa:	42b4      	cmp	r4, r6
 80068fc:	d04a      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 80068fe:	4ba9      	ldr	r3, [pc, #676]	@ (8006ba4 <HAL_DMA_Abort+0x2d0>)
 8006900:	429c      	cmp	r4, r3
 8006902:	d047      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006904:	3318      	adds	r3, #24
 8006906:	429c      	cmp	r4, r3
 8006908:	d044      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 800690a:	3318      	adds	r3, #24
 800690c:	429c      	cmp	r4, r3
 800690e:	d041      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006910:	3318      	adds	r3, #24
 8006912:	429c      	cmp	r4, r3
 8006914:	d03e      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006916:	3318      	adds	r3, #24
 8006918:	429c      	cmp	r4, r3
 800691a:	d03b      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 800691c:	3318      	adds	r3, #24
 800691e:	429c      	cmp	r4, r3
 8006920:	d038      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006922:	3318      	adds	r3, #24
 8006924:	429c      	cmp	r4, r3
 8006926:	d035      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006928:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 800692c:	429c      	cmp	r4, r3
 800692e:	d031      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006930:	3318      	adds	r3, #24
 8006932:	429c      	cmp	r4, r3
 8006934:	d02e      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006936:	3318      	adds	r3, #24
 8006938:	429c      	cmp	r4, r3
 800693a:	d02b      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 800693c:	3318      	adds	r3, #24
 800693e:	429c      	cmp	r4, r3
 8006940:	d028      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006942:	3318      	adds	r3, #24
 8006944:	429c      	cmp	r4, r3
 8006946:	d025      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006948:	3318      	adds	r3, #24
 800694a:	429c      	cmp	r4, r3
 800694c:	d022      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 800694e:	3318      	adds	r3, #24
 8006950:	429c      	cmp	r4, r3
 8006952:	d01f      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
 8006954:	3318      	adds	r3, #24
 8006956:	429c      	cmp	r4, r3
 8006958:	d01c      	beq.n	8006994 <HAL_DMA_Abort+0xc0>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800695a:	6823      	ldr	r3, [r4, #0]
 800695c:	f023 030e 	bic.w	r3, r3, #14
 8006960:	6023      	str	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006962:	4b91      	ldr	r3, [pc, #580]	@ (8006ba8 <HAL_DMA_Abort+0x2d4>)
 8006964:	429c      	cmp	r4, r3
 8006966:	d01f      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006968:	3314      	adds	r3, #20
 800696a:	429c      	cmp	r4, r3
 800696c:	d01c      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 800696e:	3314      	adds	r3, #20
 8006970:	429c      	cmp	r4, r3
 8006972:	d019      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006974:	3314      	adds	r3, #20
 8006976:	429c      	cmp	r4, r3
 8006978:	d016      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 800697a:	3314      	adds	r3, #20
 800697c:	429c      	cmp	r4, r3
 800697e:	d013      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006980:	3314      	adds	r3, #20
 8006982:	429c      	cmp	r4, r3
 8006984:	d010      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006986:	3314      	adds	r3, #20
 8006988:	429c      	cmp	r4, r3
 800698a:	d00d      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 800698c:	3314      	adds	r3, #20
 800698e:	429c      	cmp	r4, r3
 8006990:	d112      	bne.n	80069b8 <HAL_DMA_Abort+0xe4>
 8006992:	e009      	b.n	80069a8 <HAL_DMA_Abort+0xd4>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006994:	6823      	ldr	r3, [r4, #0]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006996:	42b4      	cmp	r4, r6
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8006998:	f023 031e 	bic.w	r3, r3, #30
 800699c:	6023      	str	r3, [r4, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800699e:	6963      	ldr	r3, [r4, #20]
 80069a0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80069a4:	6163      	str	r3, [r4, #20]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80069a6:	d176      	bne.n	8006a96 <HAL_DMA_Abort+0x1c2>
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069a8:	6e2a      	ldr	r2, [r5, #96]	@ 0x60
    __HAL_DMA_DISABLE(hdma);
 80069aa:	42b4      	cmp	r4, r6
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80069ac:	6813      	ldr	r3, [r2, #0]
 80069ae:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80069b2:	6013      	str	r3, [r2, #0]
    __HAL_DMA_DISABLE(hdma);
 80069b4:	f040 80ab 	bne.w	8006b0e <HAL_DMA_Abort+0x23a>
 80069b8:	6823      	ldr	r3, [r4, #0]
 80069ba:	f023 0301 	bic.w	r3, r3, #1
 80069be:	6023      	str	r3, [r4, #0]
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 80069c0:	6823      	ldr	r3, [r4, #0]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	f100 80cd 	bmi.w	8006b62 <HAL_DMA_Abort+0x28e>
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069c8:	682b      	ldr	r3, [r5, #0]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069ca:	6dea      	ldr	r2, [r5, #92]	@ 0x5c
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069cc:	42b3      	cmp	r3, r6
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80069ce:	6da8      	ldr	r0, [r5, #88]	@ 0x58
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 80069d0:	f002 021f 	and.w	r2, r2, #31
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80069d4:	f000 80d1 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 80069d8:	4972      	ldr	r1, [pc, #456]	@ (8006ba4 <HAL_DMA_Abort+0x2d0>)
 80069da:	428b      	cmp	r3, r1
 80069dc:	f000 80cd 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 80069e0:	3118      	adds	r1, #24
 80069e2:	428b      	cmp	r3, r1
 80069e4:	f000 80c9 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 80069e8:	3118      	adds	r1, #24
 80069ea:	428b      	cmp	r3, r1
 80069ec:	f000 80c5 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 80069f0:	3118      	adds	r1, #24
 80069f2:	428b      	cmp	r3, r1
 80069f4:	f000 80c1 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 80069f8:	3118      	adds	r1, #24
 80069fa:	428b      	cmp	r3, r1
 80069fc:	f000 80bd 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a00:	3118      	adds	r1, #24
 8006a02:	428b      	cmp	r3, r1
 8006a04:	f000 80b9 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a08:	3118      	adds	r1, #24
 8006a0a:	428b      	cmp	r3, r1
 8006a0c:	f000 80b5 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a10:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 8006a14:	428b      	cmp	r3, r1
 8006a16:	f000 80b0 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a1a:	3118      	adds	r1, #24
 8006a1c:	428b      	cmp	r3, r1
 8006a1e:	f000 80ac 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a22:	3118      	adds	r1, #24
 8006a24:	428b      	cmp	r3, r1
 8006a26:	f000 80a8 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a2a:	3118      	adds	r1, #24
 8006a2c:	428b      	cmp	r3, r1
 8006a2e:	f000 80a4 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a32:	3118      	adds	r1, #24
 8006a34:	428b      	cmp	r3, r1
 8006a36:	f000 80a0 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a3a:	3118      	adds	r1, #24
 8006a3c:	428b      	cmp	r3, r1
 8006a3e:	f000 809c 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a42:	3118      	adds	r1, #24
 8006a44:	428b      	cmp	r3, r1
 8006a46:	f000 8098 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
 8006a4a:	3118      	adds	r1, #24
 8006a4c:	428b      	cmp	r3, r1
 8006a4e:	f000 8094 	beq.w	8006b7a <HAL_DMA_Abort+0x2a6>
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006a52:	2101      	movs	r1, #1
 8006a54:	fa01 f202 	lsl.w	r2, r1, r2
 8006a58:	6042      	str	r2, [r0, #4]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a5a:	4a53      	ldr	r2, [pc, #332]	@ (8006ba8 <HAL_DMA_Abort+0x2d4>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	f000 8092 	beq.w	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a62:	3214      	adds	r2, #20
 8006a64:	4293      	cmp	r3, r2
 8006a66:	f000 808e 	beq.w	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a6a:	3214      	adds	r2, #20
 8006a6c:	4293      	cmp	r3, r2
 8006a6e:	f000 808a 	beq.w	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a72:	3214      	adds	r2, #20
 8006a74:	4293      	cmp	r3, r2
 8006a76:	f000 8086 	beq.w	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a7a:	3214      	adds	r2, #20
 8006a7c:	4293      	cmp	r3, r2
 8006a7e:	f000 8082 	beq.w	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a82:	3214      	adds	r2, #20
 8006a84:	4293      	cmp	r3, r2
 8006a86:	d07e      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a88:	3214      	adds	r2, #20
 8006a8a:	4293      	cmp	r3, r2
 8006a8c:	d07b      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006a8e:	3214      	adds	r2, #20
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d17e      	bne.n	8006b92 <HAL_DMA_Abort+0x2be>
 8006a94:	e077      	b.n	8006b86 <HAL_DMA_Abort+0x2b2>
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006a96:	4b43      	ldr	r3, [pc, #268]	@ (8006ba4 <HAL_DMA_Abort+0x2d0>)
 8006a98:	429c      	cmp	r4, r3
 8006a9a:	d085      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006a9c:	3318      	adds	r3, #24
 8006a9e:	429c      	cmp	r4, r3
 8006aa0:	d082      	beq.n	80069a8 <HAL_DMA_Abort+0xd4>
 8006aa2:	3318      	adds	r3, #24
 8006aa4:	429c      	cmp	r4, r3
 8006aa6:	f43f af7f 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006aaa:	3318      	adds	r3, #24
 8006aac:	429c      	cmp	r4, r3
 8006aae:	f43f af7b 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006ab2:	3318      	adds	r3, #24
 8006ab4:	429c      	cmp	r4, r3
 8006ab6:	f43f af77 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006aba:	3318      	adds	r3, #24
 8006abc:	429c      	cmp	r4, r3
 8006abe:	f43f af73 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006ac2:	3318      	adds	r3, #24
 8006ac4:	429c      	cmp	r4, r3
 8006ac6:	f43f af6f 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006aca:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006ace:	429c      	cmp	r4, r3
 8006ad0:	f43f af6a 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006ad4:	3318      	adds	r3, #24
 8006ad6:	429c      	cmp	r4, r3
 8006ad8:	f43f af66 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006adc:	3318      	adds	r3, #24
 8006ade:	429c      	cmp	r4, r3
 8006ae0:	f43f af62 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006ae4:	3318      	adds	r3, #24
 8006ae6:	429c      	cmp	r4, r3
 8006ae8:	f43f af5e 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006aec:	3318      	adds	r3, #24
 8006aee:	429c      	cmp	r4, r3
 8006af0:	f43f af5a 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006af4:	3318      	adds	r3, #24
 8006af6:	429c      	cmp	r4, r3
 8006af8:	f43f af56 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006afc:	3318      	adds	r3, #24
 8006afe:	429c      	cmp	r4, r3
 8006b00:	f43f af52 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006b04:	3318      	adds	r3, #24
 8006b06:	429c      	cmp	r4, r3
 8006b08:	f43f af4e 	beq.w	80069a8 <HAL_DMA_Abort+0xd4>
 8006b0c:	e729      	b.n	8006962 <HAL_DMA_Abort+0x8e>
    __HAL_DMA_DISABLE(hdma);
 8006b0e:	4b25      	ldr	r3, [pc, #148]	@ (8006ba4 <HAL_DMA_Abort+0x2d0>)
 8006b10:	429c      	cmp	r4, r3
 8006b12:	f43f af51 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b16:	3318      	adds	r3, #24
 8006b18:	429c      	cmp	r4, r3
 8006b1a:	f43f af4d 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b1e:	3318      	adds	r3, #24
 8006b20:	429c      	cmp	r4, r3
 8006b22:	f43f af49 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b26:	3318      	adds	r3, #24
 8006b28:	429c      	cmp	r4, r3
 8006b2a:	f43f af45 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b2e:	3318      	adds	r3, #24
 8006b30:	429c      	cmp	r4, r3
 8006b32:	f43f af41 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b36:	3318      	adds	r3, #24
 8006b38:	429c      	cmp	r4, r3
 8006b3a:	f43f af3d 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b3e:	3318      	adds	r3, #24
 8006b40:	429c      	cmp	r4, r3
 8006b42:	f43f af39 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b46:	f503 7356 	add.w	r3, r3, #856	@ 0x358
 8006b4a:	429c      	cmp	r4, r3
 8006b4c:	f43f af34 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b50:	3318      	adds	r3, #24
 8006b52:	429c      	cmp	r4, r3
 8006b54:	f43f af30 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b58:	3318      	adds	r3, #24
 8006b5a:	429c      	cmp	r4, r3
 8006b5c:	f43f af2c 	beq.w	80069b8 <HAL_DMA_Abort+0xe4>
 8006b60:	e72a      	b.n	80069b8 <HAL_DMA_Abort+0xe4>
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006b62:	f7ff fd89 	bl	8006678 <HAL_GetTick>
 8006b66:	1bc0      	subs	r0, r0, r7
 8006b68:	2805      	cmp	r0, #5
 8006b6a:	f67f af29 	bls.w	80069c0 <HAL_DMA_Abort+0xec>
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006b6e:	2320      	movs	r3, #32
 8006b70:	656b      	str	r3, [r5, #84]	@ 0x54
        hdma->State = HAL_DMA_STATE_ERROR;
 8006b72:	2303      	movs	r3, #3
 8006b74:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
        __HAL_UNLOCK(hdma);
 8006b78:	e6b8      	b.n	80068ec <HAL_DMA_Abort+0x18>
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b7a:	213f      	movs	r1, #63	@ 0x3f
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b7c:	42b3      	cmp	r3, r6
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8006b7e:	fa01 f202 	lsl.w	r2, r1, r2
 8006b82:	6082      	str	r2, [r0, #8]
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006b84:	d112      	bne.n	8006bac <HAL_DMA_Abort+0x2d8>
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006b86:	e9d5 3219 	ldrd	r3, r2, [r5, #100]	@ 0x64
 8006b8a:	605a      	str	r2, [r3, #4]
      if(hdma->DMAmuxRequestGen != 0U)
 8006b8c:	6eeb      	ldr	r3, [r5, #108]	@ 0x6c
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d13b      	bne.n	8006c0a <HAL_DMA_Abort+0x336>
    hdma->State = HAL_DMA_STATE_READY;
 8006b92:	2301      	movs	r3, #1
    __HAL_UNLOCK(hdma);
 8006b94:	2000      	movs	r0, #0
    hdma->State = HAL_DMA_STATE_READY;
 8006b96:	f885 3035 	strb.w	r3, [r5, #53]	@ 0x35
    __HAL_UNLOCK(hdma);
 8006b9a:	f885 0034 	strb.w	r0, [r5, #52]	@ 0x34
  return HAL_OK;
 8006b9e:	e6a9      	b.n	80068f4 <HAL_DMA_Abort+0x20>
 8006ba0:	40020010 	.word	0x40020010
 8006ba4:	40020028 	.word	0x40020028
 8006ba8:	58025408 	.word	0x58025408
    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006bac:	4a1b      	ldr	r2, [pc, #108]	@ (8006c1c <HAL_DMA_Abort+0x348>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d0e9      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bb2:	3218      	adds	r2, #24
 8006bb4:	4293      	cmp	r3, r2
 8006bb6:	d0e6      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bb8:	3218      	adds	r2, #24
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d0e3      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bbe:	3218      	adds	r2, #24
 8006bc0:	4293      	cmp	r3, r2
 8006bc2:	d0e0      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bc4:	3218      	adds	r2, #24
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d0dd      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bca:	3218      	adds	r2, #24
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	d0da      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bd0:	3218      	adds	r2, #24
 8006bd2:	4293      	cmp	r3, r2
 8006bd4:	d0d7      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bd6:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8006bda:	4293      	cmp	r3, r2
 8006bdc:	d0d3      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bde:	3218      	adds	r2, #24
 8006be0:	4293      	cmp	r3, r2
 8006be2:	d0d0      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006be4:	3218      	adds	r2, #24
 8006be6:	4293      	cmp	r3, r2
 8006be8:	d0cd      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bea:	3218      	adds	r2, #24
 8006bec:	4293      	cmp	r3, r2
 8006bee:	d0ca      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bf0:	3218      	adds	r2, #24
 8006bf2:	4293      	cmp	r3, r2
 8006bf4:	d0c7      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bf6:	3218      	adds	r2, #24
 8006bf8:	4293      	cmp	r3, r2
 8006bfa:	d0c4      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006bfc:	3218      	adds	r2, #24
 8006bfe:	4293      	cmp	r3, r2
 8006c00:	d0c1      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006c02:	3218      	adds	r2, #24
 8006c04:	4293      	cmp	r3, r2
 8006c06:	d0be      	beq.n	8006b86 <HAL_DMA_Abort+0x2b2>
 8006c08:	e727      	b.n	8006a5a <HAL_DMA_Abort+0x186>
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006c0a:	681a      	ldr	r2, [r3, #0]
 8006c0c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006c10:	601a      	str	r2, [r3, #0]
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006c12:	e9d5 321c 	ldrd	r3, r2, [r5, #112]	@ 0x70
 8006c16:	605a      	str	r2, [r3, #4]
 8006c18:	e7bb      	b.n	8006b92 <HAL_DMA_Abort+0x2be>
 8006c1a:	bf00      	nop
 8006c1c:	40020028 	.word	0x40020028

08006c20 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006c20:	b508      	push	{r3, lr}
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8006c22:	b128      	cbz	r0, 8006c30 <HAL_DMA_Abort_IT+0x10>
  {
    return HAL_ERROR;
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c24:	f890 3035 	ldrb.w	r3, [r0, #53]	@ 0x35
 8006c28:	2b02      	cmp	r3, #2
 8006c2a:	d003      	beq.n	8006c34 <HAL_DMA_Abort_IT+0x14>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006c2c:	2380      	movs	r3, #128	@ 0x80
 8006c2e:	6543      	str	r3, [r0, #84]	@ 0x54
    return HAL_ERROR;
 8006c30:	2001      	movs	r0, #1
 8006c32:	e05d      	b.n	8006cf0 <HAL_DMA_Abort_IT+0xd0>
    return HAL_ERROR;
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8006c34:	6803      	ldr	r3, [r0, #0]
 8006c36:	4a3f      	ldr	r2, [pc, #252]	@ (8006d34 <HAL_DMA_Abort_IT+0x114>)
 8006c38:	4293      	cmp	r3, r2
 8006c3a:	d051      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c3c:	3218      	adds	r2, #24
 8006c3e:	4293      	cmp	r3, r2
 8006c40:	d04e      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c42:	3218      	adds	r2, #24
 8006c44:	4293      	cmp	r3, r2
 8006c46:	d04b      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c48:	3218      	adds	r2, #24
 8006c4a:	4293      	cmp	r3, r2
 8006c4c:	d048      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c4e:	3218      	adds	r2, #24
 8006c50:	4293      	cmp	r3, r2
 8006c52:	d045      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c54:	3218      	adds	r2, #24
 8006c56:	4293      	cmp	r3, r2
 8006c58:	d042      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c5a:	3218      	adds	r2, #24
 8006c5c:	4293      	cmp	r3, r2
 8006c5e:	d03f      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c60:	3218      	adds	r2, #24
 8006c62:	4293      	cmp	r3, r2
 8006c64:	d03c      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c66:	f502 7256 	add.w	r2, r2, #856	@ 0x358
 8006c6a:	4293      	cmp	r3, r2
 8006c6c:	d038      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c6e:	3218      	adds	r2, #24
 8006c70:	4293      	cmp	r3, r2
 8006c72:	d035      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c74:	3218      	adds	r2, #24
 8006c76:	4293      	cmp	r3, r2
 8006c78:	d032      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c7a:	3218      	adds	r2, #24
 8006c7c:	4293      	cmp	r3, r2
 8006c7e:	d02f      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c80:	3218      	adds	r2, #24
 8006c82:	4293      	cmp	r3, r2
 8006c84:	d02c      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c86:	3218      	adds	r2, #24
 8006c88:	4293      	cmp	r3, r2
 8006c8a:	d029      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c8c:	3218      	adds	r2, #24
 8006c8e:	4293      	cmp	r3, r2
 8006c90:	d026      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
 8006c92:	3218      	adds	r2, #24
 8006c94:	4293      	cmp	r3, r2
 8006c96:	d023      	beq.n	8006ce0 <HAL_DMA_Abort_IT+0xc0>
      __HAL_DMA_DISABLE(hdma);
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8006c98:	681a      	ldr	r2, [r3, #0]
 8006c9a:	f022 020e 	bic.w	r2, r2, #14
 8006c9e:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 8006ca0:	681a      	ldr	r2, [r3, #0]
 8006ca2:	f022 0201 	bic.w	r2, r2, #1
 8006ca6:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006ca8:	4a23      	ldr	r2, [pc, #140]	@ (8006d38 <HAL_DMA_Abort_IT+0x118>)
 8006caa:	4293      	cmp	r3, r2
 8006cac:	d121      	bne.n	8006cf2 <HAL_DMA_Abort_IT+0xd2>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8006cae:	6e02      	ldr	r2, [r0, #96]	@ 0x60
 8006cb0:	6813      	ldr	r3, [r2, #0]
 8006cb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006cb6:	6013      	str	r3, [r2, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8006cb8:	e9d0 1316 	ldrd	r1, r3, [r0, #88]	@ 0x58
 8006cbc:	f003 021f 	and.w	r2, r3, #31
 8006cc0:	2301      	movs	r3, #1
 8006cc2:	4093      	lsls	r3, r2
 8006cc4:	604b      	str	r3, [r1, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8006cc6:	e9d0 3219 	ldrd	r3, r2, [r0, #100]	@ 0x64
 8006cca:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 8006ccc:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 8006cce:	b32b      	cbz	r3, 8006d1c <HAL_DMA_Abort_IT+0xfc>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8006cd0:	681a      	ldr	r2, [r3, #0]
 8006cd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006cd6:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8006cd8:	e9d0 321c 	ldrd	r3, r2, [r0, #112]	@ 0x70
 8006cdc:	605a      	str	r2, [r3, #4]
 8006cde:	e01d      	b.n	8006d1c <HAL_DMA_Abort_IT+0xfc>
      hdma->State = HAL_DMA_STATE_ABORT;
 8006ce0:	2204      	movs	r2, #4
 8006ce2:	f880 2035 	strb.w	r2, [r0, #53]	@ 0x35
      __HAL_DMA_DISABLE(hdma);
 8006ce6:	681a      	ldr	r2, [r3, #0]
 8006ce8:	f022 0201 	bic.w	r2, r2, #1
 8006cec:	601a      	str	r2, [r3, #0]
        hdma->XferAbortCallback(hdma);
      }
    }
  }

  return HAL_OK;
 8006cee:	2000      	movs	r0, #0
}
 8006cf0:	bd08      	pop	{r3, pc}
      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8006cf2:	4a12      	ldr	r2, [pc, #72]	@ (8006d3c <HAL_DMA_Abort_IT+0x11c>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d0da      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006cf8:	3214      	adds	r2, #20
 8006cfa:	4293      	cmp	r3, r2
 8006cfc:	d0d7      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006cfe:	3214      	adds	r2, #20
 8006d00:	4293      	cmp	r3, r2
 8006d02:	d0d4      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006d04:	3214      	adds	r2, #20
 8006d06:	4293      	cmp	r3, r2
 8006d08:	d0d1      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006d0a:	3214      	adds	r2, #20
 8006d0c:	4293      	cmp	r3, r2
 8006d0e:	d0ce      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006d10:	3214      	adds	r2, #20
 8006d12:	4293      	cmp	r3, r2
 8006d14:	d0cb      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
 8006d16:	3214      	adds	r2, #20
 8006d18:	4293      	cmp	r3, r2
 8006d1a:	d0c8      	beq.n	8006cae <HAL_DMA_Abort_IT+0x8e>
      hdma->State = HAL_DMA_STATE_READY;
 8006d1c:	2301      	movs	r3, #1
 8006d1e:	f880 3035 	strb.w	r3, [r0, #53]	@ 0x35
      __HAL_UNLOCK(hdma);
 8006d22:	2300      	movs	r3, #0
 8006d24:	f880 3034 	strb.w	r3, [r0, #52]	@ 0x34
      if(hdma->XferAbortCallback != NULL)
 8006d28:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d0df      	beq.n	8006cee <HAL_DMA_Abort_IT+0xce>
        hdma->XferAbortCallback(hdma);
 8006d2e:	4798      	blx	r3
 8006d30:	e7dd      	b.n	8006cee <HAL_DMA_Abort_IT+0xce>
 8006d32:	bf00      	nop
 8006d34:	40020010 	.word	0x40020010
 8006d38:	58025408 	.word	0x58025408
 8006d3c:	5802541c 	.word	0x5802541c

08006d40 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8006d40:	b510      	push	{r4, lr}
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8006d42:	4604      	mov	r4, r0
 8006d44:	2800      	cmp	r0, #0
 8006d46:	d036      	beq.n	8006db6 <HAL_DMA2D_Init+0x76>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8006d48:	f890 3061 	ldrb.w	r3, [r0, #97]	@ 0x61
 8006d4c:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8006d50:	b91b      	cbnz	r3, 8006d5a <HAL_DMA2D_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8006d52:	f880 2060 	strb.w	r2, [r0, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8006d56:	f7fa faf7 	bl	8001348 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d5a:	2302      	movs	r3, #2

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006d5c:	69e0      	ldr	r0, [r4, #28]
 8006d5e:	6862      	ldr	r2, [r4, #4]
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8006d60:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006d64:	6823      	ldr	r3, [r4, #0]
 8006d66:	4302      	orrs	r2, r0

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d68:	69a0      	ldr	r0, [r4, #24]
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8006d6a:	6819      	ldr	r1, [r3, #0]
 8006d6c:	f421 21e0 	bic.w	r1, r1, #458752	@ 0x70000
 8006d70:	f021 0140 	bic.w	r1, r1, #64	@ 0x40
 8006d74:	430a      	orrs	r2, r1
 8006d76:	601a      	str	r2, [r3, #0]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006d7a:	68a2      	ldr	r2, [r4, #8]
 8006d7c:	f421 7183 	bic.w	r1, r1, #262	@ 0x106
 8006d80:	4302      	orrs	r2, r0
 8006d82:	f021 0101 	bic.w	r1, r1, #1
 8006d86:	430a      	orrs	r2, r1
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d88:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8006d8a:	635a      	str	r2, [r3, #52]	@ 0x34
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8006d8c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006d8e:	0c12      	lsrs	r2, r2, #16
 8006d90:	0412      	lsls	r2, r2, #16
 8006d92:	430a      	orrs	r2, r1
 8006d94:	641a      	str	r2, [r3, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006d96:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8006d98:	e9d4 0204 	ldrd	r0, r2, [r4, #16]
 8006d9c:	f421 1140 	bic.w	r1, r1, #3145728	@ 0x300000
 8006da0:	0552      	lsls	r2, r2, #21
 8006da2:	ea42 5200 	orr.w	r2, r2, r0, lsl #20
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006da6:	2000      	movs	r0, #0
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8006da8:	430a      	orrs	r2, r1
 8006daa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006dac:	2301      	movs	r3, #1
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8006dae:	6660      	str	r0, [r4, #100]	@ 0x64
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8006db0:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61

  return HAL_OK;
}
 8006db4:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8006db6:	2001      	movs	r0, #1
 8006db8:	e7fc      	b.n	8006db4 <HAL_DMA2D_Init+0x74>

08006dba <HAL_DMA2D_LineEventCallback>:
  * @brief  Transfer watermark callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_LineEventCallback(DMA2D_HandleTypeDef *hdma2d)
 8006dba:	4770      	bx	lr

08006dbc <HAL_DMA2D_CLUTLoadingCpltCallback>:
  * @brief  CLUT Transfer Complete callback.
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_CLUTLoadingCpltCallback(DMA2D_HandleTypeDef *hdma2d)
 8006dbc:	4770      	bx	lr

08006dbe <HAL_DMA2D_IRQHandler>:
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006dbe:	6803      	ldr	r3, [r0, #0]
{
 8006dc0:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags = READ_REG(hdma2d->Instance->ISR);
 8006dc2:	685e      	ldr	r6, [r3, #4]
{
 8006dc4:	4604      	mov	r4, r0
  uint32_t crflags = READ_REG(hdma2d->Instance->CR);
 8006dc6:	681d      	ldr	r5, [r3, #0]
  if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8006dc8:	07f2      	lsls	r2, r6, #31
 8006dca:	d514      	bpl.n	8006df6 <HAL_DMA2D_IRQHandler+0x38>
    if ((crflags & DMA2D_IT_TE) != 0U)
 8006dcc:	05e9      	lsls	r1, r5, #23
 8006dce:	d512      	bpl.n	8006df6 <HAL_DMA2D_IRQHandler+0x38>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TE);
 8006dd0:	681a      	ldr	r2, [r3, #0]
 8006dd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006dd6:	601a      	str	r2, [r3, #0]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8006dd8:	6e42      	ldr	r2, [r0, #100]	@ 0x64
 8006dda:	f042 0201 	orr.w	r2, r2, #1
 8006dde:	6642      	str	r2, [r0, #100]	@ 0x64
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TE);
 8006de0:	2201      	movs	r2, #1
 8006de2:	609a      	str	r2, [r3, #8]
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006de4:	2304      	movs	r3, #4
 8006de6:	f880 3061 	strb.w	r3, [r0, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006dea:	2300      	movs	r3, #0
 8006dec:	f880 3060 	strb.w	r3, [r0, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006df0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8006df2:	b103      	cbz	r3, 8006df6 <HAL_DMA2D_IRQHandler+0x38>
        hdma2d->XferErrorCallback(hdma2d);
 8006df4:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8006df6:	06b2      	lsls	r2, r6, #26
 8006df8:	d516      	bpl.n	8006e28 <HAL_DMA2D_IRQHandler+0x6a>
    if ((crflags & DMA2D_IT_CE) != 0U)
 8006dfa:	04ab      	lsls	r3, r5, #18
 8006dfc:	d514      	bpl.n	8006e28 <HAL_DMA2D_IRQHandler+0x6a>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CE);
 8006dfe:	6823      	ldr	r3, [r4, #0]
 8006e00:	681a      	ldr	r2, [r3, #0]
 8006e02:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8006e06:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE);
 8006e08:	2220      	movs	r2, #32
 8006e0a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8006e0c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e0e:	f043 0302 	orr.w	r3, r3, #2
 8006e12:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e14:	2304      	movs	r3, #4
 8006e16:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006e1a:	2300      	movs	r3, #0
 8006e1c:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006e20:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e22:	b10b      	cbz	r3, 8006e28 <HAL_DMA2D_IRQHandler+0x6a>
        hdma2d->XferErrorCallback(hdma2d);
 8006e24:	4620      	mov	r0, r4
 8006e26:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8006e28:	0730      	lsls	r0, r6, #28
 8006e2a:	d516      	bpl.n	8006e5a <HAL_DMA2D_IRQHandler+0x9c>
    if ((crflags & DMA2D_IT_CAE) != 0U)
 8006e2c:	0529      	lsls	r1, r5, #20
 8006e2e:	d514      	bpl.n	8006e5a <HAL_DMA2D_IRQHandler+0x9c>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CAE);
 8006e30:	6823      	ldr	r3, [r4, #0]
 8006e32:	681a      	ldr	r2, [r3, #0]
 8006e34:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006e38:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE);
 8006e3a:	2208      	movs	r2, #8
 8006e3c:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8006e3e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e40:	f043 0304 	orr.w	r3, r3, #4
 8006e44:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8006e46:	2304      	movs	r3, #4
 8006e48:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006e4c:	2300      	movs	r3, #0
 8006e4e:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferErrorCallback != NULL)
 8006e52:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8006e54:	b10b      	cbz	r3, 8006e5a <HAL_DMA2D_IRQHandler+0x9c>
        hdma2d->XferErrorCallback(hdma2d);
 8006e56:	4620      	mov	r0, r4
 8006e58:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_TW) != 0U)
 8006e5a:	0772      	lsls	r2, r6, #29
 8006e5c:	d50b      	bpl.n	8006e76 <HAL_DMA2D_IRQHandler+0xb8>
    if ((crflags & DMA2D_IT_TW) != 0U)
 8006e5e:	056b      	lsls	r3, r5, #21
 8006e60:	d509      	bpl.n	8006e76 <HAL_DMA2D_IRQHandler+0xb8>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006e62:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006e64:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TW);
 8006e66:	681a      	ldr	r2, [r3, #0]
 8006e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006e6c:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TW);
 8006e6e:	2204      	movs	r2, #4
 8006e70:	609a      	str	r2, [r3, #8]
      HAL_DMA2D_LineEventCallback(hdma2d);
 8006e72:	f7ff ffa2 	bl	8006dba <HAL_DMA2D_LineEventCallback>
  if ((isrflags & DMA2D_FLAG_TC) != 0U)
 8006e76:	07b0      	lsls	r0, r6, #30
 8006e78:	d514      	bpl.n	8006ea4 <HAL_DMA2D_IRQHandler+0xe6>
    if ((crflags & DMA2D_IT_TC) != 0U)
 8006e7a:	05a9      	lsls	r1, r5, #22
 8006e7c:	d512      	bpl.n	8006ea4 <HAL_DMA2D_IRQHandler+0xe6>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_TC);
 8006e7e:	6823      	ldr	r3, [r4, #0]
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8006e86:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC);
 8006e88:	2202      	movs	r2, #2
 8006e8a:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006e8c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006e8e:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006e90:	2301      	movs	r3, #1
 8006e92:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006e96:	2300      	movs	r3, #0
 8006e98:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      if (hdma2d->XferCpltCallback != NULL)
 8006e9c:	6a23      	ldr	r3, [r4, #32]
 8006e9e:	b10b      	cbz	r3, 8006ea4 <HAL_DMA2D_IRQHandler+0xe6>
        hdma2d->XferCpltCallback(hdma2d);
 8006ea0:	4620      	mov	r0, r4
 8006ea2:	4798      	blx	r3
  if ((isrflags & DMA2D_FLAG_CTC) != 0U)
 8006ea4:	06f2      	lsls	r2, r6, #27
 8006ea6:	d513      	bpl.n	8006ed0 <HAL_DMA2D_IRQHandler+0x112>
    if ((crflags & DMA2D_IT_CTC) != 0U)
 8006ea8:	04eb      	lsls	r3, r5, #19
 8006eaa:	d511      	bpl.n	8006ed0 <HAL_DMA2D_IRQHandler+0x112>
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006eac:	6823      	ldr	r3, [r4, #0]
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006eae:	4620      	mov	r0, r4
      __HAL_DMA2D_DISABLE_IT(hdma2d, DMA2D_IT_CTC);
 8006eb0:	681a      	ldr	r2, [r3, #0]
 8006eb2:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8006eb6:	601a      	str	r2, [r3, #0]
      __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CTC);
 8006eb8:	2210      	movs	r2, #16
 8006eba:	609a      	str	r2, [r3, #8]
      hdma2d->ErrorCode |= HAL_DMA2D_ERROR_NONE;
 8006ebc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006ebe:	6663      	str	r3, [r4, #100]	@ 0x64
      hdma2d->State = HAL_DMA2D_STATE_READY;
 8006ec0:	2301      	movs	r3, #1
 8006ec2:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
      __HAL_UNLOCK(hdma2d);
 8006ec6:	2300      	movs	r3, #0
 8006ec8:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
      HAL_DMA2D_CLUTLoadingCpltCallback(hdma2d);
 8006ecc:	f7ff ff76 	bl	8006dbc <HAL_DMA2D_CLUTLoadingCpltCallback>
}
 8006ed0:	bd70      	pop	{r4, r5, r6, pc}

08006ed2 <DSI_ShortWrite.constprop.0>:
  *                 This parameter can be any value of @arg DSI_DCS_Command or a
  *                 generic command code.
  * @param  Param2  DSC parameter or second generic parameter.
  * @retval HAL status
  */
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
 8006ed2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006ed6:	4607      	mov	r7, r0
 8006ed8:	460d      	mov	r5, r1
 8006eda:	4614      	mov	r4, r2
 8006edc:	461e      	mov	r6, r3
                                        uint32_t Param2)
{
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8006ede:	f7ff fbcb 	bl	8006678 <HAL_GetTick>
 8006ee2:	4680      	mov	r8, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8006ee4:	683b      	ldr	r3, [r7, #0]
 8006ee6:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 8006ee8:	07d2      	lsls	r2, r2, #31
 8006eea:	d50a      	bpl.n	8006f02 <DSI_ShortWrite.constprop.0+0x30>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006eec:	ea44 2406 	orr.w	r4, r4, r6, lsl #8
 8006ef0:	9a06      	ldr	r2, [sp, #24]

  return HAL_OK;
 8006ef2:	2000      	movs	r0, #0
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8006ef4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8006ef8:	ea44 1485 	orr.w	r4, r4, r5, lsl #6
 8006efc:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8006efe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8006f02:	f7ff fbb9 	bl	8006678 <HAL_GetTick>
 8006f06:	eba0 0008 	sub.w	r0, r0, r8
 8006f0a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8006f0e:	d9e9      	bls.n	8006ee4 <DSI_ShortWrite.constprop.0+0x12>
      return HAL_TIMEOUT;
 8006f10:	2003      	movs	r0, #3
 8006f12:	e7f4      	b.n	8006efe <DSI_ShortWrite.constprop.0+0x2c>

08006f14 <HAL_DSI_ConfigErrorMonitor>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigErrorMonitor(DSI_HandleTypeDef *hdsi, uint32_t ActiveErrors)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8006f14:	7c03      	ldrb	r3, [r0, #16]
{
 8006f16:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d05b      	beq.n	8006fd4 <HAL_DSI_ConfigErrorMonitor+0xc0>

  hdsi->Instance->IER[0U] = 0U;
 8006f1c:	6803      	ldr	r3, [r0, #0]
 8006f1e:	2000      	movs	r0, #0
 8006f20:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8006f24:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8

  /* Store active errors to the handle */
  hdsi->ErrorMsk = ActiveErrors;

  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006f28:	07c8      	lsls	r0, r1, #31
  hdsi->ErrorMsk = ActiveErrors;
 8006f2a:	6191      	str	r1, [r2, #24]
  if ((ActiveErrors & HAL_DSI_ERROR_ACK) != 0U)
 8006f2c:	d507      	bpl.n	8006f3e <HAL_DSI_ConfigErrorMonitor+0x2a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_ACK_MASK;
 8006f2e:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006f32:	ea6f 4010 	mvn.w	r0, r0, lsr #16
 8006f36:	ea6f 4000 	mvn.w	r0, r0, lsl #16
 8006f3a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PHY) != 0U)
 8006f3e:	0788      	lsls	r0, r1, #30
 8006f40:	d505      	bpl.n	8006f4e <HAL_DSI_ConfigErrorMonitor+0x3a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[0U] |= DSI_ERROR_PHY_MASK;
 8006f42:	f8d3 00c4 	ldr.w	r0, [r3, #196]	@ 0xc4
 8006f46:	f440 10f8 	orr.w	r0, r0, #2031616	@ 0x1f0000
 8006f4a:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  }

  if ((ActiveErrors & HAL_DSI_ERROR_TX) != 0U)
 8006f4e:	0748      	lsls	r0, r1, #29
 8006f50:	d505      	bpl.n	8006f5e <HAL_DSI_ConfigErrorMonitor+0x4a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_TX_MASK;
 8006f52:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f56:	f040 0001 	orr.w	r0, r0, #1
 8006f5a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_RX) != 0U)
 8006f5e:	0708      	lsls	r0, r1, #28
 8006f60:	d505      	bpl.n	8006f6e <HAL_DSI_ConfigErrorMonitor+0x5a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_RX_MASK;
 8006f62:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f66:	f040 0002 	orr.w	r0, r0, #2
 8006f6a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_ECC) != 0U)
 8006f6e:	06c8      	lsls	r0, r1, #27
 8006f70:	d505      	bpl.n	8006f7e <HAL_DSI_ConfigErrorMonitor+0x6a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_ECC_MASK;
 8006f72:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f76:	f040 000c 	orr.w	r0, r0, #12
 8006f7a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_CRC) != 0U)
 8006f7e:	0688      	lsls	r0, r1, #26
 8006f80:	d505      	bpl.n	8006f8e <HAL_DSI_ConfigErrorMonitor+0x7a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_CRC_MASK;
 8006f82:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f86:	f040 0010 	orr.w	r0, r0, #16
 8006f8a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_PSE) != 0U)
 8006f8e:	0648      	lsls	r0, r1, #25
 8006f90:	d505      	bpl.n	8006f9e <HAL_DSI_ConfigErrorMonitor+0x8a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_PSE_MASK;
 8006f92:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006f96:	f040 0020 	orr.w	r0, r0, #32
 8006f9a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_EOT) != 0U)
 8006f9e:	0608      	lsls	r0, r1, #24
 8006fa0:	d505      	bpl.n	8006fae <HAL_DSI_ConfigErrorMonitor+0x9a>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_EOT_MASK;
 8006fa2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006fa6:	f040 0040 	orr.w	r0, r0, #64	@ 0x40
 8006faa:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_OVF) != 0U)
 8006fae:	05c8      	lsls	r0, r1, #23
 8006fb0:	d505      	bpl.n	8006fbe <HAL_DSI_ConfigErrorMonitor+0xaa>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_OVF_MASK;
 8006fb2:	f8d3 00c8 	ldr.w	r0, [r3, #200]	@ 0xc8
 8006fb6:	f040 0080 	orr.w	r0, r0, #128	@ 0x80
 8006fba:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  }

  if ((ActiveErrors & HAL_DSI_ERROR_GEN) != 0U)
 8006fbe:	0589      	lsls	r1, r1, #22
 8006fc0:	d505      	bpl.n	8006fce <HAL_DSI_ConfigErrorMonitor+0xba>
  {
    /* Enable the interrupt generation on selected errors */
    hdsi->Instance->IER[1U] |= DSI_ERROR_GEN_MASK;
 8006fc2:	f8d3 10c8 	ldr.w	r1, [r3, #200]	@ 0xc8
 8006fc6:	f441 51f8 	orr.w	r1, r1, #7936	@ 0x1f00
 8006fca:	f8c3 10c8 	str.w	r1, [r3, #200]	@ 0xc8
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hdsi);
 8006fce:	2000      	movs	r0, #0
 8006fd0:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
 8006fd2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8006fd4:	2002      	movs	r0, #2
}
 8006fd6:	4770      	bx	lr

08006fd8 <HAL_DSI_Init>:
{
 8006fd8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 8006fda:	460d      	mov	r5, r1
  if (hdsi == NULL)
 8006fdc:	4604      	mov	r4, r0
 8006fde:	2800      	cmp	r0, #0
 8006fe0:	f000 80ea 	beq.w	80071b8 <HAL_DSI_Init+0x1e0>
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8006fe4:	7c43      	ldrb	r3, [r0, #17]
 8006fe6:	b90b      	cbnz	r3, 8006fec <HAL_DSI_Init+0x14>
    HAL_DSI_MspInit(hdsi);
 8006fe8:	f7fa f9d2 	bl	8001390 <HAL_DSI_MspInit>
  hdsi->State = HAL_DSI_STATE_BUSY;
 8006fec:	2303      	movs	r3, #3
 8006fee:	7463      	strb	r3, [r4, #17]
  __HAL_DSI_REG_ENABLE(hdsi);
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	9300      	str	r3, [sp, #0]
 8006ff4:	6823      	ldr	r3, [r4, #0]
 8006ff6:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8006ffa:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8006ffe:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8007002:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8007006:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800700a:	9300      	str	r3, [sp, #0]
 800700c:	9b00      	ldr	r3, [sp, #0]
  tickstart = HAL_GetTick();
 800700e:	f7ff fb33 	bl	8006678 <HAL_GetTick>
 8007012:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8007014:	6822      	ldr	r2, [r4, #0]
 8007016:	f8d2 340c 	ldr.w	r3, [r2, #1036]	@ 0x40c
 800701a:	04d9      	lsls	r1, r3, #19
 800701c:	d56e      	bpl.n	80070fc <HAL_DSI_Init+0x124>
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800701e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007022:	f423 335e 	bic.w	r3, r3, #227328	@ 0x37800
 8007026:	f423 73fe 	bic.w	r3, r3, #508	@ 0x1fc
 800702a:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800702e:	f8d2 1430 	ldr.w	r1, [r2, #1072]	@ 0x430
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8007032:	e9d5 0300 	ldrd	r0, r3, [r5]
 8007036:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007038:	ea43 0380 	orr.w	r3, r3, r0, lsl #2
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800703c:	68a8      	ldr	r0, [r5, #8]
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800703e:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
  HAL_Delay(1);
 8007042:	2001      	movs	r0, #1
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8007044:	430b      	orrs	r3, r1
 8007046:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  __HAL_DSI_PLL_ENABLE(hdsi);
 800704a:	2300      	movs	r3, #0
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 8007052:	f043 0301 	orr.w	r3, r3, #1
 8007056:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
 800705a:	f8d2 3430 	ldr.w	r3, [r2, #1072]	@ 0x430
 800705e:	f003 0301 	and.w	r3, r3, #1
 8007062:	9301      	str	r3, [sp, #4]
 8007064:	9b01      	ldr	r3, [sp, #4]
  HAL_Delay(1);
 8007066:	f7ff fb0d 	bl	8006684 <HAL_Delay>
  tickstart = HAL_GetTick();
 800706a:	f7ff fb05 	bl	8006678 <HAL_GetTick>
 800706e:	4606      	mov	r6, r0
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8007070:	6823      	ldr	r3, [r4, #0]
 8007072:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 8007076:	05d2      	lsls	r2, r2, #23
 8007078:	d548      	bpl.n	800710c <HAL_DSI_Init+0x134>
  __HAL_DSI_ENABLE(hdsi);
 800707a:	2200      	movs	r2, #0
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800707c:	68a1      	ldr	r1, [r4, #8]
  __HAL_DSI_ENABLE(hdsi);
 800707e:	9202      	str	r2, [sp, #8]
 8007080:	685a      	ldr	r2, [r3, #4]
 8007082:	f042 0201 	orr.w	r2, r2, #1
 8007086:	605a      	str	r2, [r3, #4]
 8007088:	685a      	ldr	r2, [r3, #4]
 800708a:	f002 0201 	and.w	r2, r2, #1
 800708e:	9202      	str	r2, [sp, #8]
 8007090:	9a02      	ldr	r2, [sp, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8007092:	689a      	ldr	r2, [r3, #8]
 8007094:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8007098:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800709a:	689a      	ldr	r2, [r3, #8]
 800709c:	430a      	orrs	r2, r1
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800709e:	68e1      	ldr	r1, [r4, #12]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 80070a0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 80070a2:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80070a6:	f042 0202 	orr.w	r2, r2, #2
 80070aa:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 80070ae:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 80070b2:	f042 0204 	orr.w	r2, r2, #4
 80070b6:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 80070ba:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070be:	f022 0203 	bic.w	r2, r2, #3
 80070c2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 80070c6:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 80070ca:	430a      	orrs	r2, r1
 80070cc:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  tickstart = HAL_GetTick();
 80070d0:	f7ff fad2 	bl	8006678 <HAL_GetTick>
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80070d4:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 80070d6:	4606      	mov	r6, r0
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 80070d8:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80070dc:	079b      	lsls	r3, r3, #30
 80070de:	d025      	beq.n	800712c <HAL_DSI_Init+0x154>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 80070e0:	6823      	ldr	r3, [r4, #0]
 80070e2:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80070e6:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 80070ea:	2b94      	cmp	r3, #148	@ 0x94
 80070ec:	d025      	beq.n	800713a <HAL_DSI_Init+0x162>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80070ee:	f7ff fac3 	bl	8006678 <HAL_GetTick>
 80070f2:	1b80      	subs	r0, r0, r6
 80070f4:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80070f8:	d9f2      	bls.n	80070e0 <HAL_DSI_Init+0x108>
 80070fa:	e014      	b.n	8007126 <HAL_DSI_Init+0x14e>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80070fc:	f7ff fabc 	bl	8006678 <HAL_GetTick>
 8007100:	1b80      	subs	r0, r0, r6
 8007102:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007106:	d985      	bls.n	8007014 <HAL_DSI_Init+0x3c>
      return HAL_TIMEOUT;
 8007108:	2003      	movs	r0, #3
 800710a:	e053      	b.n	80071b4 <HAL_DSI_Init+0x1dc>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800710c:	f7ff fab4 	bl	8006678 <HAL_GetTick>
 8007110:	1b80      	subs	r0, r0, r6
 8007112:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007116:	d9ab      	bls.n	8007070 <HAL_DSI_Init+0x98>
 8007118:	e7f6      	b.n	8007108 <HAL_DSI_Init+0x130>
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800711a:	f7ff faad 	bl	8006678 <HAL_GetTick>
 800711e:	1b80      	subs	r0, r0, r6
 8007120:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 8007124:	d902      	bls.n	800712c <HAL_DSI_Init+0x154>
        __HAL_UNLOCK(hdsi);
 8007126:	2300      	movs	r3, #0
 8007128:	7423      	strb	r3, [r4, #16]
        return HAL_TIMEOUT;
 800712a:	e7ed      	b.n	8007108 <HAL_DSI_Init+0x130>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800712c:	6823      	ldr	r3, [r4, #0]
 800712e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8007132:	f003 0314 	and.w	r3, r3, #20
 8007136:	2b14      	cmp	r3, #20
 8007138:	d1ef      	bne.n	800711a <HAL_DSI_Init+0x142>
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800713a:	686b      	ldr	r3, [r5, #4]
 800713c:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8007140:	4a1e      	ldr	r2, [pc, #120]	@ (80071bc <HAL_DSI_Init+0x1e4>)
  hdsi->Instance->IER[0U] = 0U;
 8007142:	2000      	movs	r0, #0
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8007144:	2b01      	cmp	r3, #1
 8007146:	bf38      	it	cc
 8007148:	2301      	movcc	r3, #1
 800714a:	435a      	muls	r2, r3
 800714c:	68ab      	ldr	r3, [r5, #8]
 800714e:	f003 0303 	and.w	r3, r3, #3
 8007152:	409a      	lsls	r2, r3
 8007154:	682b      	ldr	r3, [r5, #0]
 8007156:	434b      	muls	r3, r1
 8007158:	fbb2 f2f3 	udiv	r2, r2, r3
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800715c:	6823      	ldr	r3, [r4, #0]
 800715e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8007162:	f021 013f 	bic.w	r1, r1, #63	@ 0x3f
 8007166:	f8c3 1418 	str.w	r1, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800716a:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800716e:	430a      	orrs	r2, r1
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8007170:	6861      	ldr	r1, [r4, #4]
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8007172:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->IER[0U] = 0U;
 8007176:	f8c3 00c4 	str.w	r0, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800717a:	f8c3 00c8 	str.w	r0, [r3, #200]	@ 0xc8
  __HAL_DSI_DISABLE(hdsi);
 800717e:	9003      	str	r0, [sp, #12]
 8007180:	685a      	ldr	r2, [r3, #4]
  hdsi->ErrorMsk = 0U;
 8007182:	61a0      	str	r0, [r4, #24]
  __HAL_DSI_DISABLE(hdsi);
 8007184:	f022 0201 	bic.w	r2, r2, #1
 8007188:	605a      	str	r2, [r3, #4]
 800718a:	685a      	ldr	r2, [r3, #4]
 800718c:	f002 0201 	and.w	r2, r2, #1
 8007190:	9203      	str	r2, [sp, #12]
 8007192:	9a03      	ldr	r2, [sp, #12]
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8007194:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 8007198:	f022 0203 	bic.w	r2, r2, #3
 800719c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 80071a0:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 80071a4:	430a      	orrs	r2, r1
 80071a6:	f042 0201 	orr.w	r2, r2, #1
 80071aa:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->State = HAL_DSI_STATE_READY;
 80071ae:	2301      	movs	r3, #1
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 80071b0:	6160      	str	r0, [r4, #20]
  hdsi->State = HAL_DSI_STATE_READY;
 80071b2:	7463      	strb	r3, [r4, #17]
}
 80071b4:	b004      	add	sp, #16
 80071b6:	bd70      	pop	{r4, r5, r6, pc}
    return HAL_ERROR;
 80071b8:	2001      	movs	r0, #1
 80071ba:	e7fb      	b.n	80071b4 <HAL_DSI_Init+0x1dc>
 80071bc:	003d0900 	.word	0x003d0900

080071c0 <HAL_DSI_ErrorCallback>:
  * @brief  Operation Error DSI callback.
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_ErrorCallback(DSI_HandleTypeDef *hdsi)
 80071c0:	4770      	bx	lr

080071c2 <HAL_DSI_IRQHandler>:
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80071c2:	6803      	ldr	r3, [r0, #0]
 80071c4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80071c8:	07d1      	lsls	r1, r2, #31
{
 80071ca:	b510      	push	{r4, lr}
 80071cc:	4604      	mov	r4, r0
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_TE) != 0U)
 80071ce:	d508      	bpl.n	80071e2 <HAL_DSI_IRQHandler+0x20>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_TE) != 0U)
 80071d0:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80071d4:	07d2      	lsls	r2, r2, #31
 80071d6:	d504      	bpl.n	80071e2 <HAL_DSI_IRQHandler+0x20>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_TE);
 80071d8:	2201      	movs	r2, #1
 80071da:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_TearingEffectCallback(hdsi);
 80071de:	f7fb f863 	bl	80022a8 <HAL_DSI_TearingEffectCallback>
  if (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_ER) != 0U)
 80071e2:	6823      	ldr	r3, [r4, #0]
 80071e4:	f8d3 240c 	ldr.w	r2, [r3, #1036]	@ 0x40c
 80071e8:	0791      	lsls	r1, r2, #30
 80071ea:	d509      	bpl.n	8007200 <HAL_DSI_IRQHandler+0x3e>
    if (__HAL_DSI_GET_IT_SOURCE(hdsi, DSI_IT_ER) != 0U)
 80071ec:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 80071f0:	0792      	lsls	r2, r2, #30
 80071f2:	d505      	bpl.n	8007200 <HAL_DSI_IRQHandler+0x3e>
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80071f4:	2202      	movs	r2, #2
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80071f6:	4620      	mov	r0, r4
      __HAL_DSI_CLEAR_FLAG(hdsi, DSI_FLAG_ER);
 80071f8:	f8c3 2410 	str.w	r2, [r3, #1040]	@ 0x410
      HAL_DSI_EndOfRefreshCallback(hdsi);
 80071fc:	f7fb f886 	bl	800230c <HAL_DSI_EndOfRefreshCallback>
  if (hdsi->ErrorMsk != 0U)
 8007200:	69a3      	ldr	r3, [r4, #24]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d04e      	beq.n	80072a4 <HAL_DSI_IRQHandler+0xe2>
    ErrorStatus0 = hdsi->Instance->ISR[0U];
 8007206:	6821      	ldr	r1, [r4, #0]
 8007208:	f8d1 20bc 	ldr.w	r2, [r1, #188]	@ 0xbc
    ErrorStatus0 &= hdsi->Instance->IER[0U];
 800720c:	f8d1 30c4 	ldr.w	r3, [r1, #196]	@ 0xc4
 8007210:	401a      	ands	r2, r3
    ErrorStatus1 = hdsi->Instance->ISR[1U];
 8007212:	f8d1 30c0 	ldr.w	r3, [r1, #192]	@ 0xc0
    ErrorStatus1 &= hdsi->Instance->IER[1U];
 8007216:	f8d1 10c8 	ldr.w	r1, [r1, #200]	@ 0xc8
 800721a:	400b      	ands	r3, r1
    if ((ErrorStatus0 & DSI_ERROR_ACK_MASK) != 0U)
 800721c:	b291      	uxth	r1, r2
 800721e:	b119      	cbz	r1, 8007228 <HAL_DSI_IRQHandler+0x66>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ACK;
 8007220:	6961      	ldr	r1, [r4, #20]
 8007222:	f041 0101 	orr.w	r1, r1, #1
 8007226:	6161      	str	r1, [r4, #20]
    if ((ErrorStatus0 & DSI_ERROR_PHY_MASK) != 0U)
 8007228:	f412 1ff8 	tst.w	r2, #2031616	@ 0x1f0000
 800722c:	d003      	beq.n	8007236 <HAL_DSI_IRQHandler+0x74>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PHY;
 800722e:	6962      	ldr	r2, [r4, #20]
 8007230:	f042 0202 	orr.w	r2, r2, #2
 8007234:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_TX_MASK) != 0U)
 8007236:	07d8      	lsls	r0, r3, #31
 8007238:	d503      	bpl.n	8007242 <HAL_DSI_IRQHandler+0x80>
      hdsi->ErrorCode |= HAL_DSI_ERROR_TX;
 800723a:	6962      	ldr	r2, [r4, #20]
 800723c:	f042 0204 	orr.w	r2, r2, #4
 8007240:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_RX_MASK) != 0U)
 8007242:	0799      	lsls	r1, r3, #30
 8007244:	d503      	bpl.n	800724e <HAL_DSI_IRQHandler+0x8c>
      hdsi->ErrorCode |= HAL_DSI_ERROR_RX;
 8007246:	6962      	ldr	r2, [r4, #20]
 8007248:	f042 0208 	orr.w	r2, r2, #8
 800724c:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_ECC_MASK) != 0U)
 800724e:	f013 0f0c 	tst.w	r3, #12
 8007252:	d003      	beq.n	800725c <HAL_DSI_IRQHandler+0x9a>
      hdsi->ErrorCode |= HAL_DSI_ERROR_ECC;
 8007254:	6962      	ldr	r2, [r4, #20]
 8007256:	f042 0210 	orr.w	r2, r2, #16
 800725a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_CRC_MASK) != 0U)
 800725c:	06da      	lsls	r2, r3, #27
 800725e:	d503      	bpl.n	8007268 <HAL_DSI_IRQHandler+0xa6>
      hdsi->ErrorCode |= HAL_DSI_ERROR_CRC;
 8007260:	6962      	ldr	r2, [r4, #20]
 8007262:	f042 0220 	orr.w	r2, r2, #32
 8007266:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_PSE_MASK) != 0U)
 8007268:	0698      	lsls	r0, r3, #26
 800726a:	d503      	bpl.n	8007274 <HAL_DSI_IRQHandler+0xb2>
      hdsi->ErrorCode |= HAL_DSI_ERROR_PSE;
 800726c:	6962      	ldr	r2, [r4, #20]
 800726e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8007272:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_EOT_MASK) != 0U)
 8007274:	0659      	lsls	r1, r3, #25
 8007276:	d503      	bpl.n	8007280 <HAL_DSI_IRQHandler+0xbe>
      hdsi->ErrorCode |= HAL_DSI_ERROR_EOT;
 8007278:	6962      	ldr	r2, [r4, #20]
 800727a:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 800727e:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_OVF_MASK) != 0U)
 8007280:	061a      	lsls	r2, r3, #24
 8007282:	d503      	bpl.n	800728c <HAL_DSI_IRQHandler+0xca>
      hdsi->ErrorCode |= HAL_DSI_ERROR_OVF;
 8007284:	6962      	ldr	r2, [r4, #20]
 8007286:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800728a:	6162      	str	r2, [r4, #20]
    if ((ErrorStatus1 & DSI_ERROR_GEN_MASK) != 0U)
 800728c:	f413 5ff8 	tst.w	r3, #7936	@ 0x1f00
 8007290:	d003      	beq.n	800729a <HAL_DSI_IRQHandler+0xd8>
      hdsi->ErrorCode |= HAL_DSI_ERROR_GEN;
 8007292:	6963      	ldr	r3, [r4, #20]
 8007294:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007298:	6163      	str	r3, [r4, #20]
    if (hdsi->ErrorCode != HAL_DSI_ERROR_NONE)
 800729a:	6963      	ldr	r3, [r4, #20]
 800729c:	b113      	cbz	r3, 80072a4 <HAL_DSI_IRQHandler+0xe2>
      HAL_DSI_ErrorCallback(hdsi);
 800729e:	4620      	mov	r0, r4
 80072a0:	f7ff ff8e 	bl	80071c0 <HAL_DSI_ErrorCallback>
}
 80072a4:	bd10      	pop	{r4, pc}

080072a6 <HAL_DSI_SetGenericVCID>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetGenericVCID(DSI_HandleTypeDef *hdsi, uint32_t VirtualChannelID)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072a6:	7c02      	ldrb	r2, [r0, #16]
{
 80072a8:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80072aa:	2a01      	cmp	r2, #1
 80072ac:	d00a      	beq.n	80072c4 <HAL_DSI_SetGenericVCID+0x1e>

  /* Update the GVCID register */
  hdsi->Instance->GVCIDR &= ~DSI_GVCIDR_VCID;
 80072ae:	6802      	ldr	r2, [r0, #0]
 80072b0:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80072b2:	f020 0003 	bic.w	r0, r0, #3
 80072b6:	6310      	str	r0, [r2, #48]	@ 0x30
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80072b8:	6b10      	ldr	r0, [r2, #48]	@ 0x30
 80072ba:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80072bc:	2000      	movs	r0, #0
  hdsi->Instance->GVCIDR |= VirtualChannelID;
 80072be:	6311      	str	r1, [r2, #48]	@ 0x30
  __HAL_UNLOCK(hdsi);
 80072c0:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80072c2:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80072c4:	2002      	movs	r0, #2
}
 80072c6:	4770      	bx	lr

080072c8 <HAL_DSI_ConfigAdaptedCommandMode>:
  * @param  CmdCfg  pointer to a DSI_CmdCfgTypeDef structure that contains
  *                 the DSI command mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigAdaptedCommandMode(DSI_HandleTypeDef *hdsi, DSI_CmdCfgTypeDef *CmdCfg)
{
 80072c8:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80072ca:	7c03      	ldrb	r3, [r0, #16]
{
 80072cc:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80072ce:	2b01      	cmp	r3, #1
 80072d0:	d069      	beq.n	80073a6 <HAL_DSI_ConfigAdaptedCommandMode+0xde>
  assert_param(IS_DSI_DE_POLARITY(CmdCfg->DEPolarity));
  assert_param(IS_DSI_VSYNC_POLARITY(CmdCfg->VSPolarity));
  assert_param(IS_DSI_HSYNC_POLARITY(CmdCfg->HSPolarity));

  /* Select command mode by setting CMDM and DSIM bits */
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80072d2:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80072d4:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->MCR |= DSI_MCR_CMDM;
 80072d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 80072de:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80072e2:	f022 0201 	bic.w	r2, r2, #1
 80072e6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= DSI_WCFGR_DSIM;
 80072ea:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80072ee:	f042 0201 	orr.w	r2, r2, #1
 80072f2:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 80072f6:	68da      	ldr	r2, [r3, #12]
 80072f8:	f022 0203 	bic.w	r2, r2, #3
 80072fc:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= CmdCfg->VirtualChannelID;
 80072fe:	68da      	ldr	r2, [r3, #12]
 8007300:	4302      	orrs	r2, r0
 8007302:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 8007304:	695a      	ldr	r2, [r3, #20]
 8007306:	f022 0207 	bic.w	r2, r2, #7
 800730a:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800730c:	6958      	ldr	r0, [r3, #20]
 800730e:	e9d1 5206 	ldrd	r5, r2, [r1, #24]
 8007312:	432a      	orrs	r2, r5
 8007314:	694d      	ldr	r5, [r1, #20]
 8007316:	432a      	orrs	r2, r5
 8007318:	4302      	orrs	r2, r0

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 800731a:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->LPCR |= (CmdCfg->DEPolarity | CmdCfg->VSPolarity | CmdCfg->HSPolarity);
 800731c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800731e:	691a      	ldr	r2, [r3, #16]
 8007320:	f022 020f 	bic.w	r2, r2, #15
 8007324:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= CmdCfg->ColorCoding;
 8007326:	691a      	ldr	r2, [r3, #16]
 8007328:	4302      	orrs	r2, r0
 800732a:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800732c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007330:	f022 020e 	bic.w	r2, r2, #14
 8007334:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007338:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800733c:	ea42 0240 	orr.w	r2, r2, r0, lsl #1

  /* Configure the maximum allowed size for write memory command */
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 8007340:	6888      	ldr	r0, [r1, #8]
  hdsi->Instance->WCFGR |= ((CmdCfg->ColorCoding) << 1U);
 8007342:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->LCCR &= ~DSI_LCCR_CMDSIZE;
 8007346:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007348:	0c12      	lsrs	r2, r2, #16
 800734a:	0412      	lsls	r2, r2, #16
 800734c:	665a      	str	r2, [r3, #100]	@ 0x64
  hdsi->Instance->LCCR |= CmdCfg->CommandSize;
 800734e:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8007350:	4302      	orrs	r2, r0
 8007352:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure the tearing effect source and polarity and select the refresh mode */
  hdsi->Instance->WCFGR &= ~(DSI_WCFGR_TESRC | DSI_WCFGR_TEPOL | DSI_WCFGR_AR | DSI_WCFGR_VSPOL);
 8007354:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8007358:	f022 02f0 	bic.w	r2, r2, #240	@ 0xf0
 800735c:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007360:	f8d3 0400 	ldr.w	r0, [r3, #1024]	@ 0x400
 8007364:	e9d1 2503 	ldrd	r2, r5, [r1, #12]
 8007368:	432a      	orrs	r2, r5
 800736a:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800736c:	432a      	orrs	r2, r5
 800736e:	6a0d      	ldr	r5, [r1, #32]
                            CmdCfg->VSyncPol);

  /* Configure the tearing effect acknowledge request */
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007370:	6a89      	ldr	r1, [r1, #40]	@ 0x28
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007372:	432a      	orrs	r2, r5
 8007374:	4302      	orrs	r2, r0

  /* Enable the End of Refresh interrupt */
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007376:	2000      	movs	r0, #0
  hdsi->Instance->WCFGR |= (CmdCfg->TearingEffectSource | CmdCfg->TearingEffectPolarity | CmdCfg->AutomaticRefresh |
 8007378:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->CMCR &= ~DSI_CMCR_TEARE;
 800737c:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800737e:	f022 0201 	bic.w	r2, r2, #1
 8007382:	669a      	str	r2, [r3, #104]	@ 0x68
  hdsi->Instance->CMCR |= CmdCfg->TEAcknowledgeRequest;
 8007384:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8007386:	430a      	orrs	r2, r1
 8007388:	669a      	str	r2, [r3, #104]	@ 0x68
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_TE);
 800738a:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800738e:	f042 0201 	orr.w	r2, r2, #1
 8007392:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_DSI_ENABLE_IT(hdsi, DSI_IT_ER);
 8007396:	f8d3 2408 	ldr.w	r2, [r3, #1032]	@ 0x408
 800739a:	f042 0202 	orr.w	r2, r2, #2
 800739e:	f8c3 2408 	str.w	r2, [r3, #1032]	@ 0x408
  __HAL_UNLOCK(hdsi);
 80073a2:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80073a4:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80073a6:	2002      	movs	r0, #2
 80073a8:	e7fc      	b.n	80073a4 <HAL_DSI_ConfigAdaptedCommandMode+0xdc>
	...

080073ac <HAL_DSI_ConfigCommand>:
  * @param  LPCmd  pointer to a DSI_LPCmdTypeDef structure that contains
  *                the DSI command transmission mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigCommand(DSI_HandleTypeDef *hdsi, DSI_LPCmdTypeDef *LPCmd)
{
 80073ac:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80073ae:	7c03      	ldrb	r3, [r0, #16]
{
 80073b0:	4602      	mov	r2, r0
  __HAL_LOCK(hdsi);
 80073b2:	2b01      	cmp	r3, #1
 80073b4:	d029      	beq.n	800740a <HAL_DSI_ConfigCommand+0x5e>
  assert_param(IS_DSI_LP_DLW(LPCmd->LPDcsLongWrite));
  assert_param(IS_DSI_LP_MRDP(LPCmd->LPMaxReadPacket));
  assert_param(IS_DSI_ACK_REQUEST(LPCmd->AcknowledgeRequest));

  /* Select High-speed or Low-power for command transmission */
  hdsi->Instance->CMCR &= ~(DSI_CMCR_GSW0TX | \
 80073b6:	6800      	ldr	r0, [r0, #0]
 80073b8:	4b15      	ldr	r3, [pc, #84]	@ (8007410 <HAL_DSI_ConfigCommand+0x64>)
 80073ba:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80073bc:	4023      	ands	r3, r4
 80073be:	6683      	str	r3, [r0, #104]	@ 0x68
                            DSI_CMCR_DSW0TX | \
                            DSI_CMCR_DSW1TX | \
                            DSI_CMCR_DSR0TX | \
                            DSI_CMCR_DLWTX  | \
                            DSI_CMCR_MRDPS);
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80073c0:	6e84      	ldr	r4, [r0, #104]	@ 0x68
 80073c2:	e9d1 3500 	ldrd	r3, r5, [r1]
 80073c6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteOneP | \
 80073c8:	688d      	ldr	r5, [r1, #8]
 80073ca:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortWriteTwoP | \
 80073cc:	68cd      	ldr	r5, [r1, #12]
 80073ce:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadNoP   | \
 80073d0:	690d      	ldr	r5, [r1, #16]
 80073d2:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadOneP  | \
 80073d4:	694d      	ldr	r5, [r1, #20]
 80073d6:	432b      	orrs	r3, r5
                           LPCmd->LPGenShortReadTwoP  | \
 80073d8:	698d      	ldr	r5, [r1, #24]
 80073da:	432b      	orrs	r3, r5
                           LPCmd->LPGenLongWrite      | \
 80073dc:	69cd      	ldr	r5, [r1, #28]
 80073de:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteNoP  | \
 80073e0:	6a0d      	ldr	r5, [r1, #32]
 80073e2:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortWriteOneP | \
 80073e4:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 80073e6:	432b      	orrs	r3, r5
                           LPCmd->LPDcsShortReadNoP   | \
 80073e8:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 80073ea:	432b      	orrs	r3, r5
                           LPCmd->LPDcsLongWrite      | \
 80073ec:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
                           LPCmd->LPMaxReadPacket);

  /* Configure the acknowledge request after each packet transmission */
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80073ee:	6b09      	ldr	r1, [r1, #48]	@ 0x30
                           LPCmd->LPDcsLongWrite      | \
 80073f0:	432b      	orrs	r3, r5
  hdsi->Instance->CMCR |= (LPCmd->LPGenShortWriteNoP  | \
 80073f2:	4323      	orrs	r3, r4
 80073f4:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR &= ~DSI_CMCR_ARE;
 80073f6:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 80073f8:	f023 0302 	bic.w	r3, r3, #2
 80073fc:	6683      	str	r3, [r0, #104]	@ 0x68
  hdsi->Instance->CMCR |= LPCmd->AcknowledgeRequest;
 80073fe:	6e83      	ldr	r3, [r0, #104]	@ 0x68
 8007400:	430b      	orrs	r3, r1
 8007402:	6683      	str	r3, [r0, #104]	@ 0x68

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007404:	2000      	movs	r0, #0
 8007406:	7410      	strb	r0, [r2, #16]

  return HAL_OK;
}
 8007408:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 800740a:	2002      	movs	r0, #2
 800740c:	e7fc      	b.n	8007408 <HAL_DSI_ConfigCommand+0x5c>
 800740e:	bf00      	nop
 8007410:	fef080ff 	.word	0xfef080ff

08007414 <HAL_DSI_ConfigFlowControl>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007414:	7c02      	ldrb	r2, [r0, #16]
{
 8007416:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 8007418:	2a01      	cmp	r2, #1
 800741a:	d00a      	beq.n	8007432 <HAL_DSI_ConfigFlowControl+0x1e>

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800741c:	6802      	ldr	r2, [r0, #0]
 800741e:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007420:	f020 001f 	bic.w	r0, r0, #31
 8007424:	62d0      	str	r0, [r2, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8007426:	6ad0      	ldr	r0, [r2, #44]	@ 0x2c
 8007428:	4301      	orrs	r1, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800742a:	2000      	movs	r0, #0
  hdsi->Instance->PCR |= FlowControl;
 800742c:	62d1      	str	r1, [r2, #44]	@ 0x2c
  __HAL_UNLOCK(hdsi);
 800742e:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 8007430:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 8007432:	2002      	movs	r0, #2
}
 8007434:	4770      	bx	lr

08007436 <HAL_DSI_ConfigPhyTimer>:
  * @param  PhyTimers  DSI_PHY_TimerTypeDef structure that contains
  *                    the DSI PHY timing parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigPhyTimer(DSI_HandleTypeDef *hdsi, DSI_PHY_TimerTypeDef *PhyTimers)
{
 8007436:	b530      	push	{r4, r5, lr}
  uint32_t maxTime;
  /* Process locked */
  __HAL_LOCK(hdsi);
 8007438:	7c03      	ldrb	r3, [r0, #16]
{
 800743a:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 800743c:	2b01      	cmp	r3, #1
 800743e:	d034      	beq.n	80074aa <HAL_DSI_ConfigPhyTimer+0x74>

  maxTime = (PhyTimers->ClockLaneLP2HSTime > PhyTimers->ClockLaneHS2LPTime) ? PhyTimers->ClockLaneLP2HSTime :
 8007440:	e9d1 0300 	ldrd	r0, r3, [r1]
 8007444:	4298      	cmp	r0, r3
 8007446:	bf38      	it	cc
 8007448:	4618      	movcc	r0, r3
     Register (DSI_CLTCR).
     But the DSI Host is not calculating LP2HS_TIME + HS2LP_TIME but 2 x HS2LP_TIME.

     Workaround : Configure HS2LP_TIME and LP2HS_TIME with the same value being the max of HS2LP_TIME or LP2HS_TIME.
    */
  hdsi->Instance->CLTCR &= ~(DSI_CLTCR_LP2HS_TIME | DSI_CLTCR_HS2LP_TIME);
 800744a:	6823      	ldr	r3, [r4, #0]
 800744c:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 8007450:	f002 22fc 	and.w	r2, r2, #4227922944	@ 0xfc00fc00
 8007454:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
  hdsi->Instance->CLTCR |= (maxTime | ((maxTime) << 16U));
 8007458:	f8d3 2098 	ldr.w	r2, [r3, #152]	@ 0x98
 800745c:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8007460:	4302      	orrs	r2, r0
 8007462:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98

  /* Data lane timer configuration */
  hdsi->Instance->DLTCR &= ~(DSI_DLTCR_MRD_TIME | DSI_DLTCR_LP2HS_TIME | DSI_DLTCR_HS2LP_TIME);
 8007466:	f8d3 209c 	ldr.w	r2, [r3, #156]	@ 0x9c
 800746a:	f402 4200 	and.w	r2, r2, #32768	@ 0x8000
 800746e:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007472:	f8d3 009c 	ldr.w	r0, [r3, #156]	@ 0x9c
                              PhyTimers->DataLaneHS2LPTime) << 24U));
 8007476:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800747a:	0612      	lsls	r2, r2, #24
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800747c:	ea42 4205 	orr.w	r2, r2, r5, lsl #16
 8007480:	690d      	ldr	r5, [r1, #16]

  /* Configure the wait period to request HS transmission after a stop state */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 8007482:	6949      	ldr	r1, [r1, #20]
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 8007484:	432a      	orrs	r2, r5
 8007486:	4302      	orrs	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8007488:	2000      	movs	r0, #0
  hdsi->Instance->DLTCR |= (PhyTimers->DataLaneMaxReadTime | ((PhyTimers->DataLaneLP2HSTime) << 16U) | ((
 800748a:	f8c3 209c 	str.w	r2, [r3, #156]	@ 0x9c
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_SW_TIME;
 800748e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8007492:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 8007496:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= ((PhyTimers->StopWaitTime) << 8U);
 800749a:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800749e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 80074a2:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  __HAL_UNLOCK(hdsi);
 80074a6:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 80074a8:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 80074aa:	2002      	movs	r0, #2
 80074ac:	e7fc      	b.n	80074a8 <HAL_DSI_ConfigPhyTimer+0x72>
	...

080074b0 <HAL_DSI_ConfigHostTimeouts>:
  * @param  HostTimeouts  DSI_HOST_TimeoutTypeDef structure that contains
  *                       the DSI host timeout parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigHostTimeouts(DSI_HandleTypeDef *hdsi, DSI_HOST_TimeoutTypeDef *HostTimeouts)
{
 80074b0:	b530      	push	{r4, r5, lr}
  /* Process locked */
  __HAL_LOCK(hdsi);
 80074b2:	7c03      	ldrb	r3, [r0, #16]
{
 80074b4:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80074b6:	2b01      	cmp	r3, #1
 80074b8:	d05b      	beq.n	8007572 <HAL_DSI_ConfigHostTimeouts+0xc2>

  /* Set the timeout clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80074ba:	6803      	ldr	r3, [r0, #0]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80074bc:	6808      	ldr	r0, [r1, #0]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80074be:	689a      	ldr	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);

  /* Low-power reception timeout */
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80074c0:	688d      	ldr	r5, [r1, #8]
  hdsi->Instance->CCR &= ~DSI_CCR_TOCKDIV;
 80074c2:	f422 427f 	bic.w	r2, r2, #65280	@ 0xff00
 80074c6:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80074c8:	689a      	ldr	r2, [r3, #8]
 80074ca:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80074ce:	6848      	ldr	r0, [r1, #4]
  hdsi->Instance->CCR |= ((HostTimeouts->TimeoutCkdiv) << 8U);
 80074d0:	609a      	str	r2, [r3, #8]
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_HSTX_TOCNT;
 80074d2:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80074d4:	b292      	uxth	r2, r2
 80074d6:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= ((HostTimeouts->HighSpeedTransmissionTimeout) << 16U);
 80074d8:	6f9a      	ldr	r2, [r3, #120]	@ 0x78
 80074da:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80074de:	679a      	str	r2, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] &= ~DSI_TCCR0_LPRX_TOCNT;
 80074e0:	4a25      	ldr	r2, [pc, #148]	@ (8007578 <HAL_DSI_ConfigHostTimeouts+0xc8>)
 80074e2:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80074e4:	4010      	ands	r0, r2
 80074e6:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80074e8:	6f98      	ldr	r0, [r3, #120]	@ 0x78
 80074ea:	4328      	orrs	r0, r5

  /* High-speed read timeout */
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80074ec:	68cd      	ldr	r5, [r1, #12]
  hdsi->Instance->TCCR[0U] |= HostTimeouts->LowPowerReceptionTimeout;
 80074ee:	6798      	str	r0, [r3, #120]	@ 0x78
  hdsi->Instance->TCCR[1U] &= ~DSI_TCCR1_HSRD_TOCNT;
 80074f0:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80074f2:	4010      	ands	r0, r2
 80074f4:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80074f6:	6fd8      	ldr	r0, [r3, #124]	@ 0x7c
 80074f8:	4328      	orrs	r0, r5

  /* Low-power read timeout */
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 80074fa:	690d      	ldr	r5, [r1, #16]
  hdsi->Instance->TCCR[1U] |= HostTimeouts->HighSpeedReadTimeout;
 80074fc:	67d8      	str	r0, [r3, #124]	@ 0x7c
  hdsi->Instance->TCCR[2U] &= ~DSI_TCCR2_LPRD_TOCNT;
 80074fe:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8007502:	4010      	ands	r0, r2
 8007504:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007508:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800750c:	4328      	orrs	r0, r5

  /* High-speed write timeout */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800750e:	694d      	ldr	r5, [r1, #20]
  hdsi->Instance->TCCR[2U] |= HostTimeouts->LowPowerReadTimeout;
 8007510:	f8c3 0080 	str.w	r0, [r3, #128]	@ 0x80
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_HSWR_TOCNT;
 8007514:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007518:	4010      	ands	r0, r2
 800751a:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWriteTimeout;
 800751e:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007522:	4328      	orrs	r0, r5
 8007524:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84

  /* High-speed write presp mode */
  hdsi->Instance->TCCR[3U] &= ~DSI_TCCR3_PM;
 8007528:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 800752c:	f020 7080 	bic.w	r0, r0, #16777216	@ 0x1000000
 8007530:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007534:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8007538:	698d      	ldr	r5, [r1, #24]
 800753a:	4328      	orrs	r0, r5

  /* Low-speed write timeout */
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800753c:	69cd      	ldr	r5, [r1, #28]

  /* BTA timeout */
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 800753e:	6a09      	ldr	r1, [r1, #32]
  hdsi->Instance->TCCR[3U] |= HostTimeouts->HighSpeedWritePrespMode;
 8007540:	f8c3 0084 	str.w	r0, [r3, #132]	@ 0x84
  hdsi->Instance->TCCR[4U] &= ~DSI_TCCR4_LPWR_TOCNT;
 8007544:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007548:	4010      	ands	r0, r2
 800754a:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[4U] |= HostTimeouts->LowPowerWriteTimeout;
 800754e:	f8d3 0088 	ldr.w	r0, [r3, #136]	@ 0x88
 8007552:	4328      	orrs	r0, r5
 8007554:	f8c3 0088 	str.w	r0, [r3, #136]	@ 0x88
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007558:	f8d3 008c 	ldr.w	r0, [r3, #140]	@ 0x8c
 800755c:	4002      	ands	r2, r0

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800755e:	2000      	movs	r0, #0
  hdsi->Instance->TCCR[5U] &= ~DSI_TCCR5_BTA_TOCNT;
 8007560:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  hdsi->Instance->TCCR[5U] |= HostTimeouts->BTATimeout;
 8007564:	f8d3 208c 	ldr.w	r2, [r3, #140]	@ 0x8c
 8007568:	430a      	orrs	r2, r1
 800756a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  __HAL_UNLOCK(hdsi);
 800756e:	7420      	strb	r0, [r4, #16]

  return HAL_OK;
}
 8007570:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007572:	2002      	movs	r0, #2
 8007574:	e7fc      	b.n	8007570 <HAL_DSI_ConfigHostTimeouts+0xc0>
 8007576:	bf00      	nop
 8007578:	ffff0000 	.word	0xffff0000

0800757c <HAL_DSI_Start>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 800757c:	7c03      	ldrb	r3, [r0, #16]
{
 800757e:	b082      	sub	sp, #8
  __HAL_LOCK(hdsi);
 8007580:	2b01      	cmp	r3, #1
 8007582:	d01c      	beq.n	80075be <HAL_DSI_Start+0x42>

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 8007584:	6802      	ldr	r2, [r0, #0]
 8007586:	2300      	movs	r3, #0
 8007588:	9300      	str	r3, [sp, #0]
 800758a:	6851      	ldr	r1, [r2, #4]
 800758c:	f041 0101 	orr.w	r1, r1, #1
 8007590:	6051      	str	r1, [r2, #4]
 8007592:	6851      	ldr	r1, [r2, #4]
 8007594:	f001 0101 	and.w	r1, r1, #1
 8007598:	9100      	str	r1, [sp, #0]
 800759a:	9900      	ldr	r1, [sp, #0]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800759c:	9301      	str	r3, [sp, #4]
 800759e:	f8d2 1404 	ldr.w	r1, [r2, #1028]	@ 0x404
 80075a2:	f041 0108 	orr.w	r1, r1, #8
 80075a6:	f8c2 1404 	str.w	r1, [r2, #1028]	@ 0x404
 80075aa:	f8d2 2404 	ldr.w	r2, [r2, #1028]	@ 0x404

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075ae:	7403      	strb	r3, [r0, #16]

  return HAL_OK;
 80075b0:	4618      	mov	r0, r3
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80075b2:	f002 0208 	and.w	r2, r2, #8
 80075b6:	9201      	str	r2, [sp, #4]
 80075b8:	9a01      	ldr	r2, [sp, #4]
}
 80075ba:	b002      	add	sp, #8
 80075bc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80075be:	2002      	movs	r0, #2
 80075c0:	e7fb      	b.n	80075ba <HAL_DSI_Start+0x3e>

080075c2 <HAL_DSI_Refresh>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Refresh(DSI_HandleTypeDef *hdsi)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80075c2:	7c02      	ldrb	r2, [r0, #16]
{
 80075c4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80075c6:	2a01      	cmp	r2, #1
 80075c8:	d009      	beq.n	80075de <HAL_DSI_Refresh+0x1c>

  /* Update the display */
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80075ca:	6801      	ldr	r1, [r0, #0]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075cc:	2000      	movs	r0, #0
  hdsi->Instance->WCR |= DSI_WCR_LTDCEN;
 80075ce:	f8d1 2404 	ldr.w	r2, [r1, #1028]	@ 0x404
 80075d2:	f042 0204 	orr.w	r2, r2, #4
 80075d6:	f8c1 2404 	str.w	r2, [r1, #1028]	@ 0x404
  __HAL_UNLOCK(hdsi);
 80075da:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80075dc:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80075de:	2002      	movs	r0, #2
}
 80075e0:	4770      	bx	lr

080075e2 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 80075e2:	b537      	push	{r0, r1, r2, r4, r5, lr}
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 80075e4:	7c05      	ldrb	r5, [r0, #16]
{
 80075e6:	4604      	mov	r4, r0
  __HAL_LOCK(hdsi);
 80075e8:	2d01      	cmp	r5, #1
 80075ea:	d009      	beq.n	8007600 <HAL_DSI_ShortWrite+0x1e>
 80075ec:	2501      	movs	r5, #1
 80075ee:	7405      	strb	r5, [r0, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 80075f0:	9d06      	ldr	r5, [sp, #24]
 80075f2:	9500      	str	r5, [sp, #0]
 80075f4:	f7ff fc6d 	bl	8006ed2 <DSI_ShortWrite.constprop.0>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80075f8:	2300      	movs	r3, #0
 80075fa:	7423      	strb	r3, [r4, #16]

  return status;
}
 80075fc:	b003      	add	sp, #12
 80075fe:	bd30      	pop	{r4, r5, pc}
  __HAL_LOCK(hdsi);
 8007600:	2002      	movs	r0, #2
 8007602:	e7fb      	b.n	80075fc <HAL_DSI_ShortWrite+0x1a>

08007604 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8007604:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007608:	461c      	mov	r4, r3
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800760a:	7c03      	ldrb	r3, [r0, #16]
{
 800760c:	4606      	mov	r6, r0
 800760e:	460f      	mov	r7, r1
  __HAL_LOCK(hdsi);
 8007610:	2b01      	cmp	r3, #1
{
 8007612:	4615      	mov	r5, r2
 8007614:	e9dd 980a 	ldrd	r9, r8, [sp, #40]	@ 0x28
  __HAL_LOCK(hdsi);
 8007618:	d052      	beq.n	80076c0 <HAL_DSI_LongWrite+0xbc>
 800761a:	2301      	movs	r3, #1
 800761c:	7403      	strb	r3, [r0, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800761e:	f7ff f82b 	bl	8006678 <HAL_GetTick>
 8007622:	4683      	mov	fp, r0

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8007624:	6832      	ldr	r2, [r6, #0]
 8007626:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007628:	f013 0a01 	ands.w	sl, r3, #1
 800762c:	d019      	beq.n	8007662 <HAL_DSI_LongWrite+0x5e>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800762e:	2c03      	cmp	r4, #3
 8007630:	4620      	mov	r0, r4

  for (count = 0U; count < nbBytes; count++)
 8007632:	f04f 0300 	mov.w	r3, #0
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 8007636:	bf28      	it	cs
 8007638:	2003      	movcs	r0, #3
  for (count = 0U; count < nbBytes; count++)
 800763a:	4283      	cmp	r3, r0
 800763c:	d11d      	bne.n	800767a <HAL_DSI_LongWrite+0x76>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
  }
  hdsi->Instance->GPDR = fifoword;

  uicounter = NbParams - nbBytes;
 800763e:	1ae0      	subs	r0, r4, r3
  pparams += nbBytes;
 8007640:	4443      	add	r3, r8
  hdsi->Instance->GPDR = fifoword;
 8007642:	f8c2 9070 	str.w	r9, [r2, #112]	@ 0x70
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8007646:	bb10      	cbnz	r0, 800768e <HAL_DSI_LongWrite+0x8a>

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8007648:	3401      	adds	r4, #1
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800764a:	ea45 1587 	orr.w	r5, r5, r7, lsl #6
 800764e:	0223      	lsls	r3, r4, #8
 8007650:	0224      	lsls	r4, r4, #8
 8007652:	b29b      	uxth	r3, r3
 8007654:	f404 047f 	and.w	r4, r4, #16711680	@ 0xff0000
 8007658:	431d      	orrs	r5, r3
 800765a:	4325      	orrs	r5, r4
 800765c:	66d5      	str	r5, [r2, #108]	@ 0x6c
                         (((NbParams + 1U) & 0xFF00U) >> 8U));

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800765e:	7430      	strb	r0, [r6, #16]

  return HAL_OK;
 8007660:	e009      	b.n	8007676 <HAL_DSI_LongWrite+0x72>
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007662:	f7ff f809 	bl	8006678 <HAL_GetTick>
 8007666:	eba0 000b 	sub.w	r0, r0, fp
 800766a:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800766e:	d9d9      	bls.n	8007624 <HAL_DSI_LongWrite+0x20>
      return HAL_TIMEOUT;
 8007670:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 8007672:	f886 a010 	strb.w	sl, [r6, #16]
}
 8007676:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800767a:	f818 1003 	ldrb.w	r1, [r8, r3]
 800767e:	3301      	adds	r3, #1
 8007680:	ea4f 0cc3 	mov.w	ip, r3, lsl #3
 8007684:	fa01 f10c 	lsl.w	r1, r1, ip
 8007688:	ea49 0901 	orr.w	r9, r9, r1
  for (count = 0U; count < nbBytes; count++)
 800768c:	e7d5      	b.n	800763a <HAL_DSI_LongWrite+0x36>
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800768e:	2804      	cmp	r0, #4
    fifoword = 0U;
 8007690:	f04f 0c00 	mov.w	ip, #0
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007694:	4686      	mov	lr, r0
    for (count = 0U; count < nbBytes; count++)
 8007696:	4661      	mov	r1, ip
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 8007698:	bf28      	it	cs
 800769a:	f04f 0e04 	movcs.w	lr, #4
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800769e:	f813 8001 	ldrb.w	r8, [r3, r1]
 80076a2:	ea4f 09c1 	mov.w	r9, r1, lsl #3
    for (count = 0U; count < nbBytes; count++)
 80076a6:	3101      	adds	r1, #1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80076a8:	fa08 f809 	lsl.w	r8, r8, r9
    for (count = 0U; count < nbBytes; count++)
 80076ac:	458e      	cmp	lr, r1
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 80076ae:	ea4c 0c08 	orr.w	ip, ip, r8
    for (count = 0U; count < nbBytes; count++)
 80076b2:	d1f4      	bne.n	800769e <HAL_DSI_LongWrite+0x9a>
    uicounter -= nbBytes;
 80076b4:	eba0 000e 	sub.w	r0, r0, lr
    pparams += nbBytes;
 80076b8:	4473      	add	r3, lr
    hdsi->Instance->GPDR = fifoword;
 80076ba:	f8c2 c070 	str.w	ip, [r2, #112]	@ 0x70
    pparams += nbBytes;
 80076be:	e7c2      	b.n	8007646 <HAL_DSI_LongWrite+0x42>
  __HAL_LOCK(hdsi);
 80076c0:	2002      	movs	r0, #2
 80076c2:	e7d8      	b.n	8007676 <HAL_DSI_LongWrite+0x72>

080076c4 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80076c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80076c8:	461e      	mov	r6, r3
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80076ca:	7c03      	ldrb	r3, [r0, #16]
{
 80076cc:	4605      	mov	r5, r0
 80076ce:	460c      	mov	r4, r1
  __HAL_LOCK(hdsi);
 80076d0:	2b01      	cmp	r3, #1
{
 80076d2:	4617      	mov	r7, r2
 80076d4:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 80076d8:	f8dd 8030 	ldr.w	r8, [sp, #48]	@ 0x30
  __HAL_LOCK(hdsi);
 80076dc:	d06f      	beq.n	80077be <HAL_DSI_Read+0xfa>
 80076de:	2301      	movs	r3, #1

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80076e0:	2e02      	cmp	r6, #2
  __HAL_LOCK(hdsi);
 80076e2:	7403      	strb	r3, [r0, #16]
  if (datasize > 2U)
 80076e4:	d90d      	bls.n	8007702 <HAL_DSI_Read+0x3e>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80076e6:	f3c6 2307 	ubfx	r3, r6, #8, #8
 80076ea:	2237      	movs	r2, #55	@ 0x37
 80076ec:	9300      	str	r3, [sp, #0]
 80076ee:	b2f3      	uxtb	r3, r6
 80076f0:	f7ff fbef 	bl	8006ed2 <DSI_ShortWrite.constprop.0>
 80076f4:	b128      	cbz	r0, 8007702 <HAL_DSI_Read+0x3e>
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80076f6:	2300      	movs	r3, #0

      return HAL_ERROR;
 80076f8:	2001      	movs	r0, #1
      __HAL_UNLOCK(hdsi);
 80076fa:	742b      	strb	r3, [r5, #16]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);

  return HAL_OK;
}
 80076fc:	b003      	add	sp, #12
 80076fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 8007702:	f1b9 0f06 	cmp.w	r9, #6
 8007706:	d10f      	bne.n	8007728 <HAL_DSI_Read+0x64>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007708:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800770a:	682a      	ldr	r2, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800770c:	021b      	lsls	r3, r3, #8
 800770e:	ea43 1384 	orr.w	r3, r3, r4, lsl #6
 8007712:	f043 0306 	orr.w	r3, r3, #6
 8007716:	66d3      	str	r3, [r2, #108]	@ 0x6c
  tickstart = HAL_GetTick();
 8007718:	f7fe ffae 	bl	8006678 <HAL_GetTick>
 800771c:	4604      	mov	r4, r0
  while (((int32_t)(datasize)) > 0)
 800771e:	2e00      	cmp	r6, #0
 8007720:	dc27      	bgt.n	8007772 <HAL_DSI_Read+0xae>
  __HAL_UNLOCK(hdsi);
 8007722:	2000      	movs	r0, #0
 8007724:	7428      	strb	r0, [r5, #16]
  return HAL_OK;
 8007726:	e7e9      	b.n	80076fc <HAL_DSI_Read+0x38>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8007728:	f1b9 0f04 	cmp.w	r9, #4
 800772c:	d105      	bne.n	800773a <HAL_DSI_Read+0x76>
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800772e:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8007730:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007732:	f044 0404 	orr.w	r4, r4, #4
 8007736:	66dc      	str	r4, [r3, #108]	@ 0x6c
}
 8007738:	e7ee      	b.n	8007718 <HAL_DSI_Read+0x54>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800773a:	f1b9 0f14 	cmp.w	r9, #20
 800773e:	d108      	bne.n	8007752 <HAL_DSI_Read+0x8e>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007740:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007744:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8007746:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007748:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800774c:	f044 0414 	orr.w	r4, r4, #20
 8007750:	e7f1      	b.n	8007736 <HAL_DSI_Read+0x72>
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 8007752:	f1b9 0f24 	cmp.w	r9, #36	@ 0x24
 8007756:	d1ce      	bne.n	80076f6 <HAL_DSI_Read+0x32>
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007758:	f898 2001 	ldrb.w	r2, [r8, #1]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800775c:	01a4      	lsls	r4, r4, #6
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800775e:	682b      	ldr	r3, [r5, #0]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007760:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8007764:	f898 2000 	ldrb.w	r2, [r8]
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8007768:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
 800776c:	f044 0424 	orr.w	r4, r4, #36	@ 0x24
 8007770:	e7e1      	b.n	8007736 <HAL_DSI_Read+0x72>
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8007772:	682a      	ldr	r2, [r5, #0]
 8007774:	6f53      	ldr	r3, [r2, #116]	@ 0x74
 8007776:	f013 0310 	ands.w	r3, r3, #16
 800777a:	d10d      	bne.n	8007798 <HAL_DSI_Read+0xd4>
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800777c:	2e04      	cmp	r6, #4
      fifoword = hdsi->Instance->GPDR;
 800777e:	6f10      	ldr	r0, [r2, #112]	@ 0x70
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8007780:	4632      	mov	r2, r6
 8007782:	bf28      	it	cs
 8007784:	2204      	movcs	r2, #4
        *pdata = (uint8_t)(fifoword >> (8U * count));
 8007786:	00d9      	lsls	r1, r3, #3
 8007788:	fa20 f101 	lsr.w	r1, r0, r1
 800778c:	54f9      	strb	r1, [r7, r3]
      for (count = 0U; count < nbbytes; count++)
 800778e:	3301      	adds	r3, #1
 8007790:	429a      	cmp	r2, r3
 8007792:	d1f8      	bne.n	8007786 <HAL_DSI_Read+0xc2>
        pdata++;
 8007794:	4417      	add	r7, r2
        datasize--;
 8007796:	1ab6      	subs	r6, r6, r2
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8007798:	f7fe ff6e 	bl	8006678 <HAL_GetTick>
 800779c:	1b00      	subs	r0, r0, r4
 800779e:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 80077a2:	d903      	bls.n	80077ac <HAL_DSI_Read+0xe8>
      __HAL_UNLOCK(hdsi);
 80077a4:	2300      	movs	r3, #0
      return HAL_TIMEOUT;
 80077a6:	2003      	movs	r0, #3
      __HAL_UNLOCK(hdsi);
 80077a8:	742b      	strb	r3, [r5, #16]
      return HAL_TIMEOUT;
 80077aa:	e7a7      	b.n	80076fc <HAL_DSI_Read+0x38>
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80077ac:	682b      	ldr	r3, [r5, #0]
 80077ae:	6f5a      	ldr	r2, [r3, #116]	@ 0x74
 80077b0:	0652      	lsls	r2, r2, #25
 80077b2:	d4b4      	bmi.n	800771e <HAL_DSI_Read+0x5a>
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80077b4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80077b8:	069b      	lsls	r3, r3, #26
 80077ba:	d49c      	bmi.n	80076f6 <HAL_DSI_Read+0x32>
 80077bc:	e7af      	b.n	800771e <HAL_DSI_Read+0x5a>
  __HAL_LOCK(hdsi);
 80077be:	2002      	movs	r0, #2
 80077c0:	e79c      	b.n	80076fc <HAL_DSI_Read+0x38>

080077c2 <HAL_DSI_SetLowPowerRXFilter>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_SetLowPowerRXFilter(DSI_HandleTypeDef *hdsi, uint32_t Frequency)
{
  /* Process locked */
  __HAL_LOCK(hdsi);
 80077c2:	7c02      	ldrb	r2, [r0, #16]
{
 80077c4:	4603      	mov	r3, r0
  __HAL_LOCK(hdsi);
 80077c6:	2a01      	cmp	r2, #1
 80077c8:	d00f      	beq.n	80077ea <HAL_DSI_SetLowPowerRXFilter+0x28>

  /* Low-Power RX low-pass Filtering Tuning */
  hdsi->Instance->WPCR[1U] &= ~DSI_WPCR1_LPRXFT;
 80077ca:	6802      	ldr	r2, [r0, #0]
 80077cc:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 80077d0:	f020 60c0 	bic.w	r0, r0, #100663296	@ 0x6000000
 80077d4:	f8c2 041c 	str.w	r0, [r2, #1052]	@ 0x41c
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80077d8:	f8d2 041c 	ldr.w	r0, [r2, #1052]	@ 0x41c
 80077dc:	ea40 6141 	orr.w	r1, r0, r1, lsl #25

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80077e0:	2000      	movs	r0, #0
  hdsi->Instance->WPCR[1U] |= Frequency << 25U;
 80077e2:	f8c2 141c 	str.w	r1, [r2, #1052]	@ 0x41c
  __HAL_UNLOCK(hdsi);
 80077e6:	7418      	strb	r0, [r3, #16]

  return HAL_OK;
 80077e8:	4770      	bx	lr
  __HAL_LOCK(hdsi);
 80077ea:	2002      	movs	r0, #2
}
 80077ec:	4770      	bx	lr
	...

080077f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 80077f0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80077f4:	2300      	movs	r3, #0
      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80077f6:	f8df 91c4 	ldr.w	r9, [pc, #452]	@ 80079bc <HAL_GPIO_Init+0x1cc>
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
        SYSCFG->EXTICR[position >> 2U] = temp;

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80077fa:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 80077fe:	680a      	ldr	r2, [r1, #0]
 8007800:	fa32 f503 	lsrs.w	r5, r2, r3
 8007804:	d102      	bne.n	800780c <HAL_GPIO_Init+0x1c>
      }
    }

    position++;
  }
}
 8007806:	b003      	add	sp, #12
 8007808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800780c:	2501      	movs	r5, #1
 800780e:	fa05 f803 	lsl.w	r8, r5, r3
    if (iocurrent != 0x00U)
 8007812:	ea18 0202 	ands.w	r2, r8, r2
 8007816:	f000 80bb 	beq.w	8007990 <HAL_GPIO_Init+0x1a0>
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800781a:	684e      	ldr	r6, [r1, #4]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800781c:	2703      	movs	r7, #3
 800781e:	ea4f 0e43 	mov.w	lr, r3, lsl #1
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007822:	f006 0503 	and.w	r5, r6, #3
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007826:	fa07 fc0e 	lsl.w	ip, r7, lr
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800782a:	1e6f      	subs	r7, r5, #1
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800782c:	ea6f 0c0c 	mvn.w	ip, ip
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8007830:	2f01      	cmp	r7, #1
 8007832:	d834      	bhi.n	800789e <HAL_GPIO_Init+0xae>
        temp = GPIOx->OSPEEDR;
 8007834:	6887      	ldr	r7, [r0, #8]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007836:	ea07 0a0c 	and.w	sl, r7, ip
        temp |= (GPIO_Init->Speed << (position * 2U));
 800783a:	68cf      	ldr	r7, [r1, #12]
 800783c:	fa07 f70e 	lsl.w	r7, r7, lr
 8007840:	ea47 070a 	orr.w	r7, r7, sl
        GPIOx->OSPEEDR = temp;
 8007844:	6087      	str	r7, [r0, #8]
        temp = GPIOx->OTYPER;
 8007846:	6847      	ldr	r7, [r0, #4]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8007848:	ea27 0808 	bic.w	r8, r7, r8
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800784c:	f3c6 1700 	ubfx	r7, r6, #4, #1
 8007850:	409f      	lsls	r7, r3
 8007852:	ea47 0708 	orr.w	r7, r7, r8
        GPIOx->OTYPER = temp;
 8007856:	6047      	str	r7, [r0, #4]
      temp = GPIOx->PUPDR;
 8007858:	68c7      	ldr	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800785a:	2d02      	cmp	r5, #2
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800785c:	ea07 080c 	and.w	r8, r7, ip
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007860:	688f      	ldr	r7, [r1, #8]
 8007862:	fa07 f70e 	lsl.w	r7, r7, lr
 8007866:	ea47 0708 	orr.w	r7, r7, r8
      GPIOx->PUPDR = temp;
 800786a:	60c7      	str	r7, [r0, #12]
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800786c:	d119      	bne.n	80078a2 <HAL_GPIO_Init+0xb2>
        temp = GPIOx->AFR[position >> 3U];
 800786e:	ea4f 08d3 	mov.w	r8, r3, lsr #3
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007872:	f003 0a07 	and.w	sl, r3, #7
 8007876:	f04f 0b0f 	mov.w	fp, #15
 800787a:	eb00 0888 	add.w	r8, r0, r8, lsl #2
 800787e:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
        temp = GPIOx->AFR[position >> 3U];
 8007882:	f8d8 7020 	ldr.w	r7, [r8, #32]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8007886:	fa0b fb0a 	lsl.w	fp, fp, sl
 800788a:	ea27 0b0b 	bic.w	fp, r7, fp
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800788e:	690f      	ldr	r7, [r1, #16]
 8007890:	fa07 f70a 	lsl.w	r7, r7, sl
 8007894:	ea47 070b 	orr.w	r7, r7, fp
        GPIOx->AFR[position >> 3U] = temp;
 8007898:	f8c8 7020 	str.w	r7, [r8, #32]
 800789c:	e001      	b.n	80078a2 <HAL_GPIO_Init+0xb2>
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800789e:	2d03      	cmp	r5, #3
 80078a0:	d1da      	bne.n	8007858 <HAL_GPIO_Init+0x68>
      temp = GPIOx->MODER;
 80078a2:	6807      	ldr	r7, [r0, #0]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078a4:	fa05 f50e 	lsl.w	r5, r5, lr
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078a8:	f416 3f40 	tst.w	r6, #196608	@ 0x30000
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80078ac:	ea07 070c 	and.w	r7, r7, ip
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80078b0:	ea45 0507 	orr.w	r5, r5, r7
      GPIOx->MODER = temp;
 80078b4:	6005      	str	r5, [r0, #0]
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80078b6:	d06b      	beq.n	8007990 <HAL_GPIO_Init+0x1a0>
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078b8:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
 80078bc:	f023 0703 	bic.w	r7, r3, #3
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078c0:	f003 0c03 	and.w	ip, r3, #3
 80078c4:	f04f 0e0f 	mov.w	lr, #15
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078c8:	f045 0502 	orr.w	r5, r5, #2
 80078cc:	f107 47b0 	add.w	r7, r7, #1476395008	@ 0x58000000
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078d0:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078d4:	f8c9 50f4 	str.w	r5, [r9, #244]	@ 0xf4
 80078d8:	f507 6780 	add.w	r7, r7, #1024	@ 0x400
 80078dc:	f8d9 50f4 	ldr.w	r5, [r9, #244]	@ 0xf4
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078e0:	fa0e fe0c 	lsl.w	lr, lr, ip
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80078e4:	f005 0502 	and.w	r5, r5, #2
 80078e8:	9501      	str	r5, [sp, #4]
 80078ea:	9d01      	ldr	r5, [sp, #4]
        temp = SYSCFG->EXTICR[position >> 2U];
 80078ec:	68bd      	ldr	r5, [r7, #8]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80078ee:	ea25 0e0e 	bic.w	lr, r5, lr
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 80078f2:	4d31      	ldr	r5, [pc, #196]	@ (80079b8 <HAL_GPIO_Init+0x1c8>)
 80078f4:	42a8      	cmp	r0, r5
 80078f6:	d04d      	beq.n	8007994 <HAL_GPIO_Init+0x1a4>
 80078f8:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 80078fc:	42a8      	cmp	r0, r5
 80078fe:	d04b      	beq.n	8007998 <HAL_GPIO_Init+0x1a8>
 8007900:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007904:	42a8      	cmp	r0, r5
 8007906:	d049      	beq.n	800799c <HAL_GPIO_Init+0x1ac>
 8007908:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800790c:	42a8      	cmp	r0, r5
 800790e:	d047      	beq.n	80079a0 <HAL_GPIO_Init+0x1b0>
 8007910:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007914:	42a8      	cmp	r0, r5
 8007916:	d045      	beq.n	80079a4 <HAL_GPIO_Init+0x1b4>
 8007918:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800791c:	42a8      	cmp	r0, r5
 800791e:	d043      	beq.n	80079a8 <HAL_GPIO_Init+0x1b8>
 8007920:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007924:	42a8      	cmp	r0, r5
 8007926:	d041      	beq.n	80079ac <HAL_GPIO_Init+0x1bc>
 8007928:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800792c:	42a8      	cmp	r0, r5
 800792e:	d03f      	beq.n	80079b0 <HAL_GPIO_Init+0x1c0>
 8007930:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007934:	42a8      	cmp	r0, r5
 8007936:	d03d      	beq.n	80079b4 <HAL_GPIO_Init+0x1c4>
 8007938:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 800793c:	42a8      	cmp	r0, r5
 800793e:	bf14      	ite	ne
 8007940:	250a      	movne	r5, #10
 8007942:	2509      	moveq	r5, #9
 8007944:	fa05 f50c 	lsl.w	r5, r5, ip
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007948:	f416 1f80 	tst.w	r6, #1048576	@ 0x100000
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800794c:	ea45 050e 	orr.w	r5, r5, lr
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007950:	60bd      	str	r5, [r7, #8]
        temp &= ~(iocurrent);
 8007952:	ea6f 0702 	mvn.w	r7, r2
        temp = EXTI->RTSR1;
 8007956:	6825      	ldr	r5, [r4, #0]
        temp &= ~(iocurrent);
 8007958:	bf0c      	ite	eq
 800795a:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800795c:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800795e:	f416 1f00 	tst.w	r6, #2097152	@ 0x200000
        EXTI->RTSR1 = temp;
 8007962:	6025      	str	r5, [r4, #0]
        temp = EXTI->FTSR1;
 8007964:	6865      	ldr	r5, [r4, #4]
        temp &= ~(iocurrent);
 8007966:	bf0c      	ite	eq
 8007968:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800796a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800796c:	f416 3f00 	tst.w	r6, #131072	@ 0x20000
        EXTI->FTSR1 = temp;
 8007970:	6065      	str	r5, [r4, #4]
        temp = EXTI_CurrentCPU->EMR1;
 8007972:	f8d4 5084 	ldr.w	r5, [r4, #132]	@ 0x84
        temp &= ~(iocurrent);
 8007976:	bf0c      	ite	eq
 8007978:	403d      	andeq	r5, r7
          temp |= iocurrent;
 800797a:	4315      	orrne	r5, r2
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800797c:	03f6      	lsls	r6, r6, #15
        EXTI_CurrentCPU->EMR1 = temp;
 800797e:	f8c4 5084 	str.w	r5, [r4, #132]	@ 0x84
        temp = EXTI_CurrentCPU->IMR1;
 8007982:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
        temp &= ~(iocurrent);
 8007986:	bf54      	ite	pl
 8007988:	403d      	andpl	r5, r7
          temp |= iocurrent;
 800798a:	4315      	orrmi	r5, r2
        EXTI_CurrentCPU->IMR1 = temp;
 800798c:	f8c4 5080 	str.w	r5, [r4, #128]	@ 0x80
    position++;
 8007990:	3301      	adds	r3, #1
 8007992:	e734      	b.n	80077fe <HAL_GPIO_Init+0xe>
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8007994:	2500      	movs	r5, #0
 8007996:	e7d5      	b.n	8007944 <HAL_GPIO_Init+0x154>
 8007998:	2501      	movs	r5, #1
 800799a:	e7d3      	b.n	8007944 <HAL_GPIO_Init+0x154>
 800799c:	2502      	movs	r5, #2
 800799e:	e7d1      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079a0:	2503      	movs	r5, #3
 80079a2:	e7cf      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079a4:	2504      	movs	r5, #4
 80079a6:	e7cd      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079a8:	2505      	movs	r5, #5
 80079aa:	e7cb      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079ac:	2506      	movs	r5, #6
 80079ae:	e7c9      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079b0:	2507      	movs	r5, #7
 80079b2:	e7c7      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079b4:	2508      	movs	r5, #8
 80079b6:	e7c5      	b.n	8007944 <HAL_GPIO_Init+0x154>
 80079b8:	58020000 	.word	0x58020000
 80079bc:	58024400 	.word	0x58024400

080079c0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80079c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  uint32_t position = 0x00U;
 80079c4:	2200      	movs	r2, #0

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 80079c6:	f04f 0a01 	mov.w	sl, #1
    if (iocurrent != 0x00U)
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079ca:	f04f 080f 	mov.w	r8, #15
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 80079ce:	f04f 0b03 	mov.w	fp, #3
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 80079d2:	f04f 44b0 	mov.w	r4, #1476395008	@ 0x58000000
  while ((GPIO_Pin >> position) != 0x00U)
 80079d6:	fa31 f302 	lsrs.w	r3, r1, r2
 80079da:	d101      	bne.n	80079e0 <HAL_GPIO_DeInit+0x20>
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
    }

    position++;
  }
}
 80079dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    iocurrent = GPIO_Pin & (1UL << position) ;
 80079e0:	fa0a fc02 	lsl.w	ip, sl, r2
    if (iocurrent != 0x00U)
 80079e4:	ea1c 0601 	ands.w	r6, ip, r1
 80079e8:	d070      	beq.n	8007acc <HAL_GPIO_DeInit+0x10c>
      tmp = SYSCFG->EXTICR[position >> 2U];
 80079ea:	f022 0503 	bic.w	r5, r2, #3
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079ee:	f002 0703 	and.w	r7, r2, #3
 80079f2:	f105 45b0 	add.w	r5, r5, #1476395008	@ 0x58000000
 80079f6:	00bf      	lsls	r7, r7, #2
      tmp = SYSCFG->EXTICR[position >> 2U];
 80079f8:	f8d5 3408 	ldr.w	r3, [r5, #1032]	@ 0x408
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 80079fc:	fa08 f907 	lsl.w	r9, r8, r7
 8007a00:	f505 6580 	add.w	r5, r5, #1024	@ 0x400
 8007a04:	ea09 0e03 	and.w	lr, r9, r3
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007a08:	4b3a      	ldr	r3, [pc, #232]	@ (8007af4 <HAL_GPIO_DeInit+0x134>)
 8007a0a:	4298      	cmp	r0, r3
 8007a0c:	d060      	beq.n	8007ad0 <HAL_GPIO_DeInit+0x110>
 8007a0e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a12:	4298      	cmp	r0, r3
 8007a14:	d05e      	beq.n	8007ad4 <HAL_GPIO_DeInit+0x114>
 8007a16:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a1a:	4298      	cmp	r0, r3
 8007a1c:	d05c      	beq.n	8007ad8 <HAL_GPIO_DeInit+0x118>
 8007a1e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a22:	4298      	cmp	r0, r3
 8007a24:	d05a      	beq.n	8007adc <HAL_GPIO_DeInit+0x11c>
 8007a26:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a2a:	4298      	cmp	r0, r3
 8007a2c:	d058      	beq.n	8007ae0 <HAL_GPIO_DeInit+0x120>
 8007a2e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a32:	4298      	cmp	r0, r3
 8007a34:	d056      	beq.n	8007ae4 <HAL_GPIO_DeInit+0x124>
 8007a36:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a3a:	4298      	cmp	r0, r3
 8007a3c:	d054      	beq.n	8007ae8 <HAL_GPIO_DeInit+0x128>
 8007a3e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a42:	4298      	cmp	r0, r3
 8007a44:	d052      	beq.n	8007aec <HAL_GPIO_DeInit+0x12c>
 8007a46:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a4a:	4298      	cmp	r0, r3
 8007a4c:	d050      	beq.n	8007af0 <HAL_GPIO_DeInit+0x130>
 8007a4e:	f503 6380 	add.w	r3, r3, #1024	@ 0x400
 8007a52:	4298      	cmp	r0, r3
 8007a54:	bf0c      	ite	eq
 8007a56:	2309      	moveq	r3, #9
 8007a58:	230a      	movne	r3, #10
 8007a5a:	40bb      	lsls	r3, r7
 8007a5c:	4573      	cmp	r3, lr
 8007a5e:	d117      	bne.n	8007a90 <HAL_GPIO_DeInit+0xd0>
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8007a60:	f8d4 3080 	ldr.w	r3, [r4, #128]	@ 0x80
 8007a64:	ea23 0306 	bic.w	r3, r3, r6
 8007a68:	f8c4 3080 	str.w	r3, [r4, #128]	@ 0x80
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8007a6c:	f8d4 3084 	ldr.w	r3, [r4, #132]	@ 0x84
 8007a70:	ea23 0306 	bic.w	r3, r3, r6
 8007a74:	f8c4 3084 	str.w	r3, [r4, #132]	@ 0x84
        EXTI->FTSR1 &= ~(iocurrent);
 8007a78:	6863      	ldr	r3, [r4, #4]
 8007a7a:	ea23 0306 	bic.w	r3, r3, r6
 8007a7e:	6063      	str	r3, [r4, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8007a80:	6823      	ldr	r3, [r4, #0]
 8007a82:	ea23 0306 	bic.w	r3, r3, r6
 8007a86:	6023      	str	r3, [r4, #0]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8007a88:	68ab      	ldr	r3, [r5, #8]
 8007a8a:	ea23 0309 	bic.w	r3, r3, r9
 8007a8e:	60ab      	str	r3, [r5, #8]
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007a90:	0053      	lsls	r3, r2, #1
 8007a92:	6805      	ldr	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007a94:	08d6      	lsrs	r6, r2, #3
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8007a96:	fa0b f303 	lsl.w	r3, fp, r3
 8007a9a:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8007a9e:	431d      	orrs	r5, r3
 8007aa0:	6005      	str	r5, [r0, #0]
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8007aa2:	f002 0507 	and.w	r5, r2, #7
 8007aa6:	6a37      	ldr	r7, [r6, #32]
 8007aa8:	00ad      	lsls	r5, r5, #2
 8007aaa:	fa08 f505 	lsl.w	r5, r8, r5
 8007aae:	ea27 0705 	bic.w	r7, r7, r5
 8007ab2:	6237      	str	r7, [r6, #32]
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8007ab4:	68c5      	ldr	r5, [r0, #12]
 8007ab6:	ea25 0503 	bic.w	r5, r5, r3
 8007aba:	60c5      	str	r5, [r0, #12]
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8007abc:	6845      	ldr	r5, [r0, #4]
 8007abe:	ea25 050c 	bic.w	r5, r5, ip
 8007ac2:	6045      	str	r5, [r0, #4]
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8007ac4:	6885      	ldr	r5, [r0, #8]
 8007ac6:	ea25 0303 	bic.w	r3, r5, r3
 8007aca:	6083      	str	r3, [r0, #8]
    position++;
 8007acc:	3201      	adds	r2, #1
 8007ace:	e782      	b.n	80079d6 <HAL_GPIO_DeInit+0x16>
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8007ad0:	2300      	movs	r3, #0
 8007ad2:	e7c2      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007ad4:	2301      	movs	r3, #1
 8007ad6:	e7c0      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007ad8:	2302      	movs	r3, #2
 8007ada:	e7be      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007adc:	2303      	movs	r3, #3
 8007ade:	e7bc      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007ae0:	2304      	movs	r3, #4
 8007ae2:	e7ba      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007ae4:	2305      	movs	r3, #5
 8007ae6:	e7b8      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007ae8:	2306      	movs	r3, #6
 8007aea:	e7b6      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007aec:	2307      	movs	r3, #7
 8007aee:	e7b4      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007af0:	2308      	movs	r3, #8
 8007af2:	e7b2      	b.n	8007a5a <HAL_GPIO_DeInit+0x9a>
 8007af4:	58020000 	.word	0x58020000

08007af8 <HAL_GPIO_ReadPin>:
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8007af8:	6903      	ldr	r3, [r0, #16]
 8007afa:	4219      	tst	r1, r3
  else
  {
    bitstatus = GPIO_PIN_RESET;
  }
  return bitstatus;
}
 8007afc:	bf14      	ite	ne
 8007afe:	2001      	movne	r0, #1
 8007b00:	2000      	moveq	r0, #0
 8007b02:	4770      	bx	lr

08007b04 <HAL_GPIO_WritePin>:
{
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8007b04:	b10a      	cbz	r2, 8007b0a <HAL_GPIO_WritePin+0x6>
  {
    GPIOx->BSRR = GPIO_Pin;
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b06:	6181      	str	r1, [r0, #24]
  }
}
 8007b08:	4770      	bx	lr
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8007b0a:	0409      	lsls	r1, r1, #16
 8007b0c:	e7fb      	b.n	8007b06 <HAL_GPIO_WritePin+0x2>

08007b0e <HAL_GPIO_TogglePin>:

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8007b0e:	6943      	ldr	r3, [r0, #20]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007b10:	ea01 0203 	and.w	r2, r1, r3
 8007b14:	ea21 0103 	bic.w	r1, r1, r3
 8007b18:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8007b1c:	6181      	str	r1, [r0, #24]
}
 8007b1e:	4770      	bx	lr

08007b20 <HAL_HSEM_FastTake>:
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 8007b20:	4b04      	ldr	r3, [pc, #16]	@ (8007b34 <HAL_HSEM_FastTake+0x14>)
 8007b22:	3020      	adds	r0, #32
 8007b24:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
}
 8007b28:	4b03      	ldr	r3, [pc, #12]	@ (8007b38 <HAL_HSEM_FastTake+0x18>)
 8007b2a:	1ac0      	subs	r0, r0, r3
 8007b2c:	bf18      	it	ne
 8007b2e:	2001      	movne	r0, #1
 8007b30:	4770      	bx	lr
 8007b32:	bf00      	nop
 8007b34:	58026400 	.word	0x58026400
 8007b38:	80000300 	.word	0x80000300

08007b3c <HAL_HSEM_Release>:

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 8007b3c:	f441 7140 	orr.w	r1, r1, #768	@ 0x300
 8007b40:	4b01      	ldr	r3, [pc, #4]	@ (8007b48 <HAL_HSEM_Release+0xc>)
 8007b42:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
#endif

}
 8007b46:	4770      	bx	lr
 8007b48:	58026400 	.word	0x58026400

08007b4c <I2C_Flush_TXDR>:
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007b4c:	6803      	ldr	r3, [r0, #0]
 8007b4e:	699a      	ldr	r2, [r3, #24]
 8007b50:	0791      	lsls	r1, r2, #30
 8007b52:	d501      	bpl.n	8007b58 <I2C_Flush_TXDR+0xc>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007b54:	2200      	movs	r2, #0
 8007b56:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007b58:	699a      	ldr	r2, [r3, #24]
 8007b5a:	07d2      	lsls	r2, r2, #31
 8007b5c:	d403      	bmi.n	8007b66 <I2C_Flush_TXDR+0x1a>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007b5e:	699a      	ldr	r2, [r3, #24]
 8007b60:	f042 0201 	orr.w	r2, r2, #1
 8007b64:	619a      	str	r2, [r3, #24]
  }
}
 8007b66:	4770      	bx	lr

08007b68 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8007b68:	b530      	push	{r4, r5, lr}
 8007b6a:	9d03      	ldr	r5, [sp, #12]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b6c:	f3c1 0109 	ubfx	r1, r1, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b70:	6804      	ldr	r4, [r0, #0]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b72:	432b      	orrs	r3, r5
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b74:	6860      	ldr	r0, [r4, #4]
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b76:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b7a:	4a05      	ldr	r2, [pc, #20]	@ (8007b90 <I2C_TransferConfig+0x28>)
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b7c:	430b      	orrs	r3, r1
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b7e:	ea42 5255 	orr.w	r2, r2, r5, lsr #21
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8007b82:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
  MODIFY_REG(hi2c->Instance->CR2, \
 8007b86:	ea20 0002 	bic.w	r0, r0, r2
 8007b8a:	4303      	orrs	r3, r0
 8007b8c:	6063      	str	r3, [r4, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8007b8e:	bd30      	pop	{r4, r5, pc}
 8007b90:	03ff63ff 	.word	0x03ff63ff

08007b94 <I2C_IsErrorOccurred>:
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b94:	6803      	ldr	r3, [r0, #0]
{
 8007b96:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t itflag   = hi2c->Instance->ISR;
 8007b9a:	699c      	ldr	r4, [r3, #24]
{
 8007b9c:	4605      	mov	r5, r0
 8007b9e:	460f      	mov	r7, r1
 8007ba0:	4616      	mov	r6, r2
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8007ba2:	f014 0410 	ands.w	r4, r4, #16
 8007ba6:	d06f      	beq.n	8007c88 <I2C_IsErrorOccurred+0xf4>
  uint32_t error_code = 0;
 8007ba8:	2400      	movs	r4, #0
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007baa:	2210      	movs	r2, #16
  HAL_StatusTypeDef status = HAL_OK;
 8007bac:	46a0      	mov	r8, r4
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007bae:	61da      	str	r2, [r3, #28]
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8007bb0:	682b      	ldr	r3, [r5, #0]
 8007bb2:	699a      	ldr	r2, [r3, #24]
 8007bb4:	0690      	lsls	r0, r2, #26
 8007bb6:	d461      	bmi.n	8007c7c <I2C_IsErrorOccurred+0xe8>
 8007bb8:	f1b8 0f00 	cmp.w	r8, #0
 8007bbc:	d035      	beq.n	8007c2a <I2C_IsErrorOccurred+0x96>
    error_code |= HAL_I2C_ERROR_AF;
 8007bbe:	f044 0404 	orr.w	r4, r4, #4
    status = HAL_ERROR;
 8007bc2:	2001      	movs	r0, #1
  itflag = hi2c->Instance->ISR;
 8007bc4:	682e      	ldr	r6, [r5, #0]
 8007bc6:	69b3      	ldr	r3, [r6, #24]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8007bc8:	05d9      	lsls	r1, r3, #23
 8007bca:	d505      	bpl.n	8007bd8 <I2C_IsErrorOccurred+0x44>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bcc:	f44f 7280 	mov.w	r2, #256	@ 0x100
    error_code |= HAL_I2C_ERROR_BERR;
 8007bd0:	f044 0401 	orr.w	r4, r4, #1
    status = HAL_ERROR;
 8007bd4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007bd6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8007bd8:	055a      	lsls	r2, r3, #21
 8007bda:	d505      	bpl.n	8007be8 <I2C_IsErrorOccurred+0x54>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007bdc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
    error_code |= HAL_I2C_ERROR_OVR;
 8007be0:	f044 0408 	orr.w	r4, r4, #8
    status = HAL_ERROR;
 8007be4:	2001      	movs	r0, #1
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007be6:	61f2      	str	r2, [r6, #28]
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8007be8:	059b      	lsls	r3, r3, #22
 8007bea:	d54f      	bpl.n	8007c8c <I2C_IsErrorOccurred+0xf8>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bec:	f44f 7300 	mov.w	r3, #512	@ 0x200
    error_code |= HAL_I2C_ERROR_ARLO;
 8007bf0:	f044 0402 	orr.w	r4, r4, #2
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8007bf4:	61f3      	str	r3, [r6, #28]
    I2C_Flush_TXDR(hi2c);
 8007bf6:	4628      	mov	r0, r5
 8007bf8:	f7ff ffa8 	bl	8007b4c <I2C_Flush_TXDR>
    I2C_RESET_CR2(hi2c);
 8007bfc:	6873      	ldr	r3, [r6, #4]
    __HAL_UNLOCK(hi2c);
 8007bfe:	2001      	movs	r0, #1
    I2C_RESET_CR2(hi2c);
 8007c00:	f023 73ff 	bic.w	r3, r3, #33423360	@ 0x1fe0000
 8007c04:	f423 338b 	bic.w	r3, r3, #71168	@ 0x11600
 8007c08:	f423 73ff 	bic.w	r3, r3, #510	@ 0x1fe
 8007c0c:	f023 0301 	bic.w	r3, r3, #1
 8007c10:	6073      	str	r3, [r6, #4]
    hi2c->ErrorCode |= error_code;
 8007c12:	6c6b      	ldr	r3, [r5, #68]	@ 0x44
 8007c14:	4323      	orrs	r3, r4
 8007c16:	646b      	str	r3, [r5, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8007c18:	2320      	movs	r3, #32
 8007c1a:	f885 3041 	strb.w	r3, [r5, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c1e:	2300      	movs	r3, #0
 8007c20:	f885 3042 	strb.w	r3, [r5, #66]	@ 0x42
    __HAL_UNLOCK(hi2c);
 8007c24:	f885 3040 	strb.w	r3, [r5, #64]	@ 0x40
 8007c28:	e032      	b.n	8007c90 <I2C_IsErrorOccurred+0xfc>
      if (Timeout != HAL_MAX_DELAY)
 8007c2a:	1c7a      	adds	r2, r7, #1
 8007c2c:	d0c1      	beq.n	8007bb2 <I2C_IsErrorOccurred+0x1e>
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8007c2e:	f7fe fd23 	bl	8006678 <HAL_GetTick>
 8007c32:	1b80      	subs	r0, r0, r6
 8007c34:	42b8      	cmp	r0, r7
 8007c36:	d801      	bhi.n	8007c3c <I2C_IsErrorOccurred+0xa8>
 8007c38:	2f00      	cmp	r7, #0
 8007c3a:	d1b9      	bne.n	8007bb0 <I2C_IsErrorOccurred+0x1c>
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8007c3c:	682b      	ldr	r3, [r5, #0]
 8007c3e:	6859      	ldr	r1, [r3, #4]
          tmp2 = hi2c->Mode;
 8007c40:	f895 2042 	ldrb.w	r2, [r5, #66]	@ 0x42
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c44:	6998      	ldr	r0, [r3, #24]
          tmp2 = hi2c->Mode;
 8007c46:	b2d2      	uxtb	r2, r2
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8007c48:	0400      	lsls	r0, r0, #16
 8007c4a:	d50a      	bpl.n	8007c62 <I2C_IsErrorOccurred+0xce>
 8007c4c:	0449      	lsls	r1, r1, #17
 8007c4e:	d408      	bmi.n	8007c62 <I2C_IsErrorOccurred+0xce>
              (tmp1 != I2C_CR2_STOP) && \
 8007c50:	2a20      	cmp	r2, #32
 8007c52:	d006      	beq.n	8007c62 <I2C_IsErrorOccurred+0xce>
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007c54:	685a      	ldr	r2, [r3, #4]
 8007c56:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8007c5a:	605a      	str	r2, [r3, #4]
            tickstart = HAL_GetTick();
 8007c5c:	f7fe fd0c 	bl	8006678 <HAL_GetTick>
 8007c60:	4606      	mov	r6, r0
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007c62:	682b      	ldr	r3, [r5, #0]
 8007c64:	699b      	ldr	r3, [r3, #24]
 8007c66:	069b      	lsls	r3, r3, #26
 8007c68:	d4a2      	bmi.n	8007bb0 <I2C_IsErrorOccurred+0x1c>
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8007c6a:	f7fe fd05 	bl	8006678 <HAL_GetTick>
 8007c6e:	1b80      	subs	r0, r0, r6
 8007c70:	2819      	cmp	r0, #25
 8007c72:	d9f6      	bls.n	8007c62 <I2C_IsErrorOccurred+0xce>
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8007c74:	2420      	movs	r4, #32
              status = HAL_ERROR;
 8007c76:	f04f 0801 	mov.w	r8, #1
 8007c7a:	e799      	b.n	8007bb0 <I2C_IsErrorOccurred+0x1c>
    if (status == HAL_OK)
 8007c7c:	f1b8 0f00 	cmp.w	r8, #0
 8007c80:	d19d      	bne.n	8007bbe <I2C_IsErrorOccurred+0x2a>
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007c82:	2220      	movs	r2, #32
 8007c84:	61da      	str	r2, [r3, #28]
 8007c86:	e79a      	b.n	8007bbe <I2C_IsErrorOccurred+0x2a>
  HAL_StatusTypeDef status = HAL_OK;
 8007c88:	4620      	mov	r0, r4
 8007c8a:	e79b      	b.n	8007bc4 <I2C_IsErrorOccurred+0x30>
  if (status != HAL_OK)
 8007c8c:	2800      	cmp	r0, #0
 8007c8e:	d1b2      	bne.n	8007bf6 <I2C_IsErrorOccurred+0x62>
}
 8007c90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007c94 <I2C_WaitOnTXISFlagUntilTimeout>:
{
 8007c94:	b570      	push	{r4, r5, r6, lr}
 8007c96:	4604      	mov	r4, r0
 8007c98:	460d      	mov	r5, r1
 8007c9a:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8007c9c:	6823      	ldr	r3, [r4, #0]
 8007c9e:	699b      	ldr	r3, [r3, #24]
 8007ca0:	079b      	lsls	r3, r3, #30
 8007ca2:	d501      	bpl.n	8007ca8 <I2C_WaitOnTXISFlagUntilTimeout+0x14>
  return HAL_OK;
 8007ca4:	2000      	movs	r0, #0
 8007ca6:	e01f      	b.n	8007ce8 <I2C_WaitOnTXISFlagUntilTimeout+0x54>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007ca8:	4632      	mov	r2, r6
 8007caa:	4629      	mov	r1, r5
 8007cac:	4620      	mov	r0, r4
 8007cae:	f7ff ff71 	bl	8007b94 <I2C_IsErrorOccurred>
 8007cb2:	b9c0      	cbnz	r0, 8007ce6 <I2C_WaitOnTXISFlagUntilTimeout+0x52>
    if (Timeout != HAL_MAX_DELAY)
 8007cb4:	1c6a      	adds	r2, r5, #1
 8007cb6:	d0f1      	beq.n	8007c9c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007cb8:	f7fe fcde 	bl	8006678 <HAL_GetTick>
 8007cbc:	1b80      	subs	r0, r0, r6
 8007cbe:	42a8      	cmp	r0, r5
 8007cc0:	d801      	bhi.n	8007cc6 <I2C_WaitOnTXISFlagUntilTimeout+0x32>
 8007cc2:	2d00      	cmp	r5, #0
 8007cc4:	d1ea      	bne.n	8007c9c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8007cc6:	6823      	ldr	r3, [r4, #0]
 8007cc8:	699b      	ldr	r3, [r3, #24]
 8007cca:	f013 0302 	ands.w	r3, r3, #2
 8007cce:	d1e5      	bne.n	8007c9c <I2C_WaitOnTXISFlagUntilTimeout+0x8>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd0:	6c62      	ldr	r2, [r4, #68]	@ 0x44
          __HAL_UNLOCK(hi2c);
 8007cd2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007cd6:	f042 0220 	orr.w	r2, r2, #32
 8007cda:	6462      	str	r2, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007cdc:	2220      	movs	r2, #32
 8007cde:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007ce2:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007ce6:	2001      	movs	r0, #1
}
 8007ce8:	bd70      	pop	{r4, r5, r6, pc}

08007cea <I2C_WaitOnFlagUntilTimeout>:
{
 8007cea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cee:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8007cf2:	4604      	mov	r4, r0
 8007cf4:	460f      	mov	r7, r1
 8007cf6:	4616      	mov	r6, r2
 8007cf8:	461d      	mov	r5, r3
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007cfa:	6823      	ldr	r3, [r4, #0]
 8007cfc:	699b      	ldr	r3, [r3, #24]
 8007cfe:	ea37 0303 	bics.w	r3, r7, r3
 8007d02:	bf0c      	ite	eq
 8007d04:	2301      	moveq	r3, #1
 8007d06:	2300      	movne	r3, #0
 8007d08:	42b3      	cmp	r3, r6
 8007d0a:	d001      	beq.n	8007d10 <I2C_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 8007d0c:	2000      	movs	r0, #0
 8007d0e:	e025      	b.n	8007d5c <I2C_WaitOnFlagUntilTimeout+0x72>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d10:	4642      	mov	r2, r8
 8007d12:	4629      	mov	r1, r5
 8007d14:	4620      	mov	r0, r4
 8007d16:	f7ff ff3d 	bl	8007b94 <I2C_IsErrorOccurred>
 8007d1a:	b9f0      	cbnz	r0, 8007d5a <I2C_WaitOnFlagUntilTimeout+0x70>
    if (Timeout != HAL_MAX_DELAY)
 8007d1c:	1c6b      	adds	r3, r5, #1
 8007d1e:	d0ec      	beq.n	8007cfa <I2C_WaitOnFlagUntilTimeout+0x10>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d20:	f7fe fcaa 	bl	8006678 <HAL_GetTick>
 8007d24:	eba0 0008 	sub.w	r0, r0, r8
 8007d28:	42a8      	cmp	r0, r5
 8007d2a:	d801      	bhi.n	8007d30 <I2C_WaitOnFlagUntilTimeout+0x46>
 8007d2c:	2d00      	cmp	r5, #0
 8007d2e:	d1e4      	bne.n	8007cfa <I2C_WaitOnFlagUntilTimeout+0x10>
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007d30:	6823      	ldr	r3, [r4, #0]
 8007d32:	699b      	ldr	r3, [r3, #24]
 8007d34:	ea37 0303 	bics.w	r3, r7, r3
 8007d38:	bf0c      	ite	eq
 8007d3a:	2301      	moveq	r3, #1
 8007d3c:	2300      	movne	r3, #0
 8007d3e:	42b3      	cmp	r3, r6
 8007d40:	d1db      	bne.n	8007cfa <I2C_WaitOnFlagUntilTimeout+0x10>
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d42:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8007d44:	f043 0320 	orr.w	r3, r3, #32
 8007d48:	6463      	str	r3, [r4, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8007d4a:	2320      	movs	r3, #32
 8007d4c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8007d50:	2300      	movs	r3, #0
 8007d52:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
          __HAL_UNLOCK(hi2c);
 8007d56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007d5a:	2001      	movs	r0, #1
}
 8007d5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08007d60 <I2C_WaitOnSTOPFlagUntilTimeout>:
{
 8007d60:	b570      	push	{r4, r5, r6, lr}
 8007d62:	4604      	mov	r4, r0
 8007d64:	460d      	mov	r5, r1
 8007d66:	4616      	mov	r6, r2
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8007d68:	6823      	ldr	r3, [r4, #0]
 8007d6a:	699b      	ldr	r3, [r3, #24]
 8007d6c:	069b      	lsls	r3, r3, #26
 8007d6e:	d501      	bpl.n	8007d74 <I2C_WaitOnSTOPFlagUntilTimeout+0x14>
  return HAL_OK;
 8007d70:	2000      	movs	r0, #0
 8007d72:	e01d      	b.n	8007db0 <I2C_WaitOnSTOPFlagUntilTimeout+0x50>
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8007d74:	4632      	mov	r2, r6
 8007d76:	4629      	mov	r1, r5
 8007d78:	4620      	mov	r0, r4
 8007d7a:	f7ff ff0b 	bl	8007b94 <I2C_IsErrorOccurred>
 8007d7e:	b9b0      	cbnz	r0, 8007dae <I2C_WaitOnSTOPFlagUntilTimeout+0x4e>
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007d80:	f7fe fc7a 	bl	8006678 <HAL_GetTick>
 8007d84:	1b80      	subs	r0, r0, r6
 8007d86:	42a8      	cmp	r0, r5
 8007d88:	d801      	bhi.n	8007d8e <I2C_WaitOnSTOPFlagUntilTimeout+0x2e>
 8007d8a:	2d00      	cmp	r5, #0
 8007d8c:	d1ec      	bne.n	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8007d8e:	6823      	ldr	r3, [r4, #0]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	f013 0320 	ands.w	r3, r3, #32
 8007d96:	d1e7      	bne.n	8007d68 <I2C_WaitOnSTOPFlagUntilTimeout+0x8>
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d98:	6c62      	ldr	r2, [r4, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 8007d9a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007d9e:	f042 0220 	orr.w	r2, r2, #32
 8007da2:	6462      	str	r2, [r4, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8007da4:	2220      	movs	r2, #32
 8007da6:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007daa:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
      return HAL_ERROR;
 8007dae:	2001      	movs	r0, #1
}
 8007db0:	bd70      	pop	{r4, r5, r6, pc}

08007db2 <HAL_I2C_MspInit>:
}
 8007db2:	4770      	bx	lr

08007db4 <HAL_I2C_Init>:
{
 8007db4:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007db6:	4604      	mov	r4, r0
 8007db8:	2800      	cmp	r0, #0
 8007dba:	d04e      	beq.n	8007e5a <HAL_I2C_Init+0xa6>
  if (hi2c->State == HAL_I2C_STATE_RESET)
 8007dbc:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
 8007dc0:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 8007dc4:	b91b      	cbnz	r3, 8007dce <HAL_I2C_Init+0x1a>
    hi2c->Lock = HAL_UNLOCKED;
 8007dc6:	f880 2040 	strb.w	r2, [r0, #64]	@ 0x40
    HAL_I2C_MspInit(hi2c);
 8007dca:	f7ff fff2 	bl	8007db2 <HAL_I2C_MspInit>
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007dce:	2324      	movs	r3, #36	@ 0x24
 8007dd0:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007dd4:	6823      	ldr	r3, [r4, #0]
 8007dd6:	681a      	ldr	r2, [r3, #0]
 8007dd8:	f022 0201 	bic.w	r2, r2, #1
 8007ddc:	601a      	str	r2, [r3, #0]
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8007dde:	6862      	ldr	r2, [r4, #4]
 8007de0:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8007de4:	611a      	str	r2, [r3, #16]
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8007de6:	689a      	ldr	r2, [r3, #8]
 8007de8:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007dec:	609a      	str	r2, [r3, #8]
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007dee:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8007df2:	2901      	cmp	r1, #1
 8007df4:	d106      	bne.n	8007e04 <HAL_I2C_Init+0x50>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8007df6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007dfa:	609a      	str	r2, [r3, #8]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007dfc:	685a      	ldr	r2, [r3, #4]
 8007dfe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007e02:	e007      	b.n	8007e14 <HAL_I2C_Init+0x60>
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e04:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e08:	2902      	cmp	r1, #2
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8007e0a:	609a      	str	r2, [r3, #8]
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e0c:	d1f6      	bne.n	8007dfc <HAL_I2C_Init+0x48>
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e0e:	685a      	ldr	r2, [r3, #4]
 8007e10:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8007e14:	605a      	str	r2, [r3, #4]
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e16:	2000      	movs	r0, #0
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8007e18:	685a      	ldr	r2, [r3, #4]
 8007e1a:	f042 7200 	orr.w	r2, r2, #33554432	@ 0x2000000
 8007e1e:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8007e22:	605a      	str	r2, [r3, #4]
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8007e24:	68da      	ldr	r2, [r3, #12]
 8007e26:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8007e2a:	60da      	str	r2, [r3, #12]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e2c:	e9d4 2104 	ldrd	r2, r1, [r4, #16]
 8007e30:	430a      	orrs	r2, r1
                          (hi2c->Init.OwnAddress2Masks << 8));
 8007e32:	69a1      	ldr	r1, [r4, #24]
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8007e34:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 8007e38:	60da      	str	r2, [r3, #12]
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8007e3a:	e9d4 2107 	ldrd	r2, r1, [r4, #28]
 8007e3e:	430a      	orrs	r2, r1
 8007e40:	601a      	str	r2, [r3, #0]
  __HAL_I2C_ENABLE(hi2c);
 8007e42:	681a      	ldr	r2, [r3, #0]
 8007e44:	f042 0201 	orr.w	r2, r2, #1
 8007e48:	601a      	str	r2, [r3, #0]
  hi2c->State = HAL_I2C_STATE_READY;
 8007e4a:	2320      	movs	r3, #32
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e4c:	6460      	str	r0, [r4, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8007e4e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e52:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e54:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007e58:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007e5a:	2001      	movs	r0, #1
 8007e5c:	e7fc      	b.n	8007e58 <HAL_I2C_Init+0xa4>

08007e5e <HAL_I2C_MspDeInit>:
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
 8007e5e:	4770      	bx	lr

08007e60 <HAL_I2C_DeInit>:
{
 8007e60:	b510      	push	{r4, lr}
  if (hi2c == NULL)
 8007e62:	4604      	mov	r4, r0
 8007e64:	b198      	cbz	r0, 8007e8e <HAL_I2C_DeInit+0x2e>
  __HAL_I2C_DISABLE(hi2c);
 8007e66:	6802      	ldr	r2, [r0, #0]
  hi2c->State = HAL_I2C_STATE_BUSY;
 8007e68:	2324      	movs	r3, #36	@ 0x24
 8007e6a:	f880 3041 	strb.w	r3, [r0, #65]	@ 0x41
  __HAL_I2C_DISABLE(hi2c);
 8007e6e:	6813      	ldr	r3, [r2, #0]
 8007e70:	f023 0301 	bic.w	r3, r3, #1
 8007e74:	6013      	str	r3, [r2, #0]
  HAL_I2C_MspDeInit(hi2c);
 8007e76:	f7ff fff2 	bl	8007e5e <HAL_I2C_MspDeInit>
  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007e7a:	2000      	movs	r0, #0
 8007e7c:	6460      	str	r0, [r4, #68]	@ 0x44
  __HAL_UNLOCK(hi2c);
 8007e7e:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_RESET;
 8007e82:	f884 0041 	strb.w	r0, [r4, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8007e86:	6320      	str	r0, [r4, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007e88:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
}
 8007e8c:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 8007e8e:	2001      	movs	r0, #1
 8007e90:	e7fc      	b.n	8007e8c <HAL_I2C_DeInit+0x2c>
	...

08007e94 <HAL_I2C_Mem_Write>:
{
 8007e94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e98:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007e9a:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8007e9e:	4604      	mov	r4, r0
 8007ea0:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007ea2:	2b20      	cmp	r3, #32
{
 8007ea4:	4616      	mov	r6, r2
 8007ea6:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 8007eaa:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8007eae:	f040 80c6 	bne.w	800803e <HAL_I2C_Mem_Write+0x1aa>
    if ((pData == NULL) || (Size == 0U))
 8007eb2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007eb4:	b113      	cbz	r3, 8007ebc <HAL_I2C_Mem_Write+0x28>
 8007eb6:	f1ba 0f00 	cmp.w	sl, #0
 8007eba:	d106      	bne.n	8007eca <HAL_I2C_Mem_Write+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8007ebc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007ec0:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8007ec2:	2001      	movs	r0, #1
}
 8007ec4:	b003      	add	sp, #12
 8007ec6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 8007eca:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8007ece:	2b01      	cmp	r3, #1
 8007ed0:	f000 80b5 	beq.w	800803e <HAL_I2C_Mem_Write+0x1aa>
 8007ed4:	f04f 0b01 	mov.w	fp, #1
 8007ed8:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8007edc:	f7fe fbcc 	bl	8006678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ee0:	2319      	movs	r3, #25
    tickstart = HAL_GetTick();
 8007ee2:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8007ee4:	9000      	str	r0, [sp, #0]
 8007ee6:	465a      	mov	r2, fp
 8007ee8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8007eec:	4620      	mov	r0, r4
 8007eee:	f7ff fefc 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 8007ef2:	2800      	cmp	r0, #0
 8007ef4:	d1e5      	bne.n	8007ec2 <HAL_I2C_Mem_Write+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007ef6:	2321      	movs	r3, #33	@ 0x21
    hi2c->XferISR   = NULL;
 8007ef8:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007efa:	fa5f f289 	uxtb.w	r2, r9
 8007efe:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8007f00:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8007f04:	2340      	movs	r3, #64	@ 0x40
 8007f06:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 8007f0a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8007f0c:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f0e:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 8007f10:	6263      	str	r3, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f12:	4b4c      	ldr	r3, [pc, #304]	@ (8008044 <HAL_I2C_Mem_Write+0x1b0>)
    hi2c->XferCount = Size;
 8007f14:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 8007f18:	9300      	str	r3, [sp, #0]
 8007f1a:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8007f1e:	f7ff fe23 	bl	8007b68 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f22:	462a      	mov	r2, r5
 8007f24:	4641      	mov	r1, r8
 8007f26:	4620      	mov	r0, r4
 8007f28:	f7ff feb4 	bl	8007c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f2c:	bb18      	cbnz	r0, 8007f76 <HAL_I2C_Mem_Write+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f2e:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f32:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007f34:	d115      	bne.n	8007f62 <HAL_I2C_Mem_Write+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f36:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f38:	2200      	movs	r2, #0
 8007f3a:	2180      	movs	r1, #128	@ 0x80
 8007f3c:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f3e:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 8007f40:	4643      	mov	r3, r8
 8007f42:	9500      	str	r5, [sp, #0]
 8007f44:	f7ff fed1 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 8007f48:	b9a8      	cbnz	r0, 8007f76 <HAL_I2C_Mem_Write+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007f4a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007f4c:	b29b      	uxth	r3, r3
 8007f4e:	2bff      	cmp	r3, #255	@ 0xff
 8007f50:	d815      	bhi.n	8007f7e <HAL_I2C_Mem_Write+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8007f52:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f54:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
      hi2c->XferSize = hi2c->XferCount;
 8007f58:	b292      	uxth	r2, r2
 8007f5a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f5c:	b2d2      	uxtb	r2, r2
 8007f5e:	9000      	str	r0, [sp, #0]
 8007f60:	e012      	b.n	8007f88 <HAL_I2C_Mem_Write+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f62:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f64:	4641      	mov	r1, r8
 8007f66:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8007f68:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007f6a:	462a      	mov	r2, r5
 8007f6c:	f7ff fe92 	bl	8007c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f70:	b908      	cbnz	r0, 8007f76 <HAL_I2C_Mem_Write+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8007f72:	6823      	ldr	r3, [r4, #0]
 8007f74:	e7df      	b.n	8007f36 <HAL_I2C_Mem_Write+0xa2>
      __HAL_UNLOCK(hi2c);
 8007f76:	2300      	movs	r3, #0
 8007f78:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8007f7c:	e7a1      	b.n	8007ec2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f7e:	22ff      	movs	r2, #255	@ 0xff
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f80:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8007f84:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8007f86:	9000      	str	r0, [sp, #0]
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 8007f88:	4639      	mov	r1, r7
 8007f8a:	4620      	mov	r0, r4
 8007f8c:	f7ff fdec 	bl	8007b68 <I2C_TransferConfig>
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007f90:	462a      	mov	r2, r5
 8007f92:	4641      	mov	r1, r8
 8007f94:	4620      	mov	r0, r4
 8007f96:	f7ff fe7d 	bl	8007c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8007f9a:	2800      	cmp	r0, #0
 8007f9c:	d191      	bne.n	8007ec2 <HAL_I2C_Mem_Write+0x2e>
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007f9e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8007fa0:	6822      	ldr	r2, [r4, #0]
 8007fa2:	f813 1b01 	ldrb.w	r1, [r3], #1
 8007fa6:	6291      	str	r1, [r2, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8007fa8:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8007faa:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fac:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8007fae:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 8007fb0:	3a01      	subs	r2, #1
      hi2c->XferCount--;
 8007fb2:	b29b      	uxth	r3, r3
      hi2c->XferSize--;
 8007fb4:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 8007fb6:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fb8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 8007fba:	8522      	strh	r2, [r4, #40]	@ 0x28
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007fbc:	b29b      	uxth	r3, r3
 8007fbe:	b1b3      	cbz	r3, 8007fee <HAL_I2C_Mem_Write+0x15a>
 8007fc0:	b9aa      	cbnz	r2, 8007fee <HAL_I2C_Mem_Write+0x15a>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 8007fc2:	4643      	mov	r3, r8
 8007fc4:	2180      	movs	r1, #128	@ 0x80
 8007fc6:	4620      	mov	r0, r4
 8007fc8:	9500      	str	r5, [sp, #0]
 8007fca:	f7ff fe8e 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 8007fce:	2800      	cmp	r0, #0
 8007fd0:	f47f af77 	bne.w	8007ec2 <HAL_I2C_Mem_Write+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd4:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2bff      	cmp	r3, #255	@ 0xff
 8007fda:	d928      	bls.n	800802e <HAL_I2C_Mem_Write+0x19a>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fdc:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fde:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007fe2:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8007fe4:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007fe6:	4639      	mov	r1, r7
 8007fe8:	4620      	mov	r0, r4
 8007fea:	f7ff fdbd 	bl	8007b68 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 8007fee:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8007ff0:	b29b      	uxth	r3, r3
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	d1cc      	bne.n	8007f90 <HAL_I2C_Mem_Write+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8007ff6:	462a      	mov	r2, r5
 8007ff8:	4641      	mov	r1, r8
 8007ffa:	4620      	mov	r0, r4
 8007ffc:	f7ff feb0 	bl	8007d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 8008000:	2800      	cmp	r0, #0
 8008002:	f47f af5e 	bne.w	8007ec2 <HAL_I2C_Mem_Write+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008006:	6823      	ldr	r3, [r4, #0]
 8008008:	2120      	movs	r1, #32
 800800a:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 800800c:	685a      	ldr	r2, [r3, #4]
 800800e:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 8008012:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 8008016:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 800801a:	f022 0201 	bic.w	r2, r2, #1
 800801e:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8008020:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008024:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8008028:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 800802c:	e74a      	b.n	8007ec4 <HAL_I2C_Mem_Write+0x30>
          hi2c->XferSize = hi2c->XferCount;
 800802e:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008030:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 8008034:	b292      	uxth	r2, r2
 8008036:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8008038:	b2d2      	uxtb	r2, r2
 800803a:	9000      	str	r0, [sp, #0]
 800803c:	e7d3      	b.n	8007fe6 <HAL_I2C_Mem_Write+0x152>
    __HAL_LOCK(hi2c);
 800803e:	2002      	movs	r0, #2
 8008040:	e740      	b.n	8007ec4 <HAL_I2C_Mem_Write+0x30>
 8008042:	bf00      	nop
 8008044:	80002000 	.word	0x80002000

08008048 <HAL_I2C_Mem_Read>:
{
 8008048:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800804c:	4699      	mov	r9, r3
  if (hi2c->State == HAL_I2C_STATE_READY)
 800804e:	f890 3041 	ldrb.w	r3, [r0, #65]	@ 0x41
{
 8008052:	4604      	mov	r4, r0
 8008054:	460f      	mov	r7, r1
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008056:	2b20      	cmp	r3, #32
{
 8008058:	4616      	mov	r6, r2
 800805a:	f8bd a034 	ldrh.w	sl, [sp, #52]	@ 0x34
 800805e:	f8dd 8038 	ldr.w	r8, [sp, #56]	@ 0x38
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008062:	f040 80c9 	bne.w	80081f8 <HAL_I2C_Mem_Read+0x1b0>
    if ((pData == NULL) || (Size == 0U))
 8008066:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008068:	b113      	cbz	r3, 8008070 <HAL_I2C_Mem_Read+0x28>
 800806a:	f1ba 0f00 	cmp.w	sl, #0
 800806e:	d106      	bne.n	800807e <HAL_I2C_Mem_Read+0x36>
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8008070:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8008074:	6463      	str	r3, [r4, #68]	@ 0x44
      return  HAL_ERROR;
 8008076:	2001      	movs	r0, #1
}
 8008078:	b003      	add	sp, #12
 800807a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    __HAL_LOCK(hi2c);
 800807e:	f890 3040 	ldrb.w	r3, [r0, #64]	@ 0x40
 8008082:	2b01      	cmp	r3, #1
 8008084:	f000 80b8 	beq.w	80081f8 <HAL_I2C_Mem_Read+0x1b0>
 8008088:	f04f 0b01 	mov.w	fp, #1
 800808c:	f880 b040 	strb.w	fp, [r0, #64]	@ 0x40
    tickstart = HAL_GetTick();
 8008090:	f7fe faf2 	bl	8006678 <HAL_GetTick>
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8008094:	2319      	movs	r3, #25
 8008096:	9000      	str	r0, [sp, #0]
    tickstart = HAL_GetTick();
 8008098:	4605      	mov	r5, r0
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800809a:	465a      	mov	r2, fp
 800809c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80080a0:	4620      	mov	r0, r4
 80080a2:	f7ff fe22 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 80080a6:	4603      	mov	r3, r0
 80080a8:	2800      	cmp	r0, #0
 80080aa:	d1e4      	bne.n	8008076 <HAL_I2C_Mem_Read+0x2e>
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080ac:	2222      	movs	r2, #34	@ 0x22
    hi2c->XferISR   = NULL;
 80080ae:	6360      	str	r0, [r4, #52]	@ 0x34
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080b0:	4639      	mov	r1, r7
    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80080b2:	f884 2041 	strb.w	r2, [r4, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80080b6:	2240      	movs	r2, #64	@ 0x40
 80080b8:	f884 2042 	strb.w	r2, [r4, #66]	@ 0x42
    hi2c->pBuffPtr  = pData;
 80080bc:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80080be:	6460      	str	r0, [r4, #68]	@ 0x44
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080c0:	4620      	mov	r0, r4
    hi2c->pBuffPtr  = pData;
 80080c2:	6262      	str	r2, [r4, #36]	@ 0x24
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080c4:	4a4d      	ldr	r2, [pc, #308]	@ (80081fc <HAL_I2C_Mem_Read+0x1b4>)
    hi2c->XferCount = Size;
 80080c6:	f8a4 a02a 	strh.w	sl, [r4, #42]	@ 0x2a
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 80080ca:	9200      	str	r2, [sp, #0]
 80080cc:	fa5f f289 	uxtb.w	r2, r9
 80080d0:	f7ff fd4a 	bl	8007b68 <I2C_TransferConfig>
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80080d4:	462a      	mov	r2, r5
 80080d6:	4641      	mov	r1, r8
 80080d8:	4620      	mov	r0, r4
 80080da:	f7ff fddb 	bl	8007c94 <I2C_WaitOnTXISFlagUntilTimeout>
 80080de:	bb20      	cbnz	r0, 800812a <HAL_I2C_Mem_Read+0xe2>
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080e0:	f1b9 0f01 	cmp.w	r9, #1
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080e4:	6823      	ldr	r3, [r4, #0]
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80080e6:	d116      	bne.n	8008116 <HAL_I2C_Mem_Read+0xce>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080e8:	b2f6      	uxtb	r6, r6
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080ea:	2200      	movs	r2, #0
 80080ec:	2140      	movs	r1, #64	@ 0x40
 80080ee:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80080f0:	629e      	str	r6, [r3, #40]	@ 0x28
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 80080f2:	4643      	mov	r3, r8
 80080f4:	9500      	str	r5, [sp, #0]
 80080f6:	f7ff fdf8 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 80080fa:	b9b0      	cbnz	r0, 800812a <HAL_I2C_Mem_Read+0xe2>
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80080fc:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80080fe:	b29b      	uxth	r3, r3
 8008100:	2bff      	cmp	r3, #255	@ 0xff
 8008102:	4b3f      	ldr	r3, [pc, #252]	@ (8008200 <HAL_I2C_Mem_Read+0x1b8>)
 8008104:	d815      	bhi.n	8008132 <HAL_I2C_Mem_Read+0xea>
      hi2c->XferSize = hi2c->XferCount;
 8008106:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
 8008108:	b292      	uxth	r2, r2
 800810a:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800810c:	b2d2      	uxtb	r2, r2
 800810e:	9300      	str	r3, [sp, #0]
 8008110:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8008114:	e012      	b.n	800813c <HAL_I2C_Mem_Read+0xf4>
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8008116:	0a32      	lsrs	r2, r6, #8
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8008118:	4641      	mov	r1, r8
 800811a:	4620      	mov	r0, r4
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800811c:	629a      	str	r2, [r3, #40]	@ 0x28
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800811e:	462a      	mov	r2, r5
 8008120:	f7ff fdb8 	bl	8007c94 <I2C_WaitOnTXISFlagUntilTimeout>
 8008124:	b908      	cbnz	r0, 800812a <HAL_I2C_Mem_Read+0xe2>
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8008126:	6823      	ldr	r3, [r4, #0]
 8008128:	e7de      	b.n	80080e8 <HAL_I2C_Mem_Read+0xa0>
      __HAL_UNLOCK(hi2c);
 800812a:	2300      	movs	r3, #0
 800812c:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
      return HAL_ERROR;
 8008130:	e7a1      	b.n	8008076 <HAL_I2C_Mem_Read+0x2e>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 8008132:	22ff      	movs	r2, #255	@ 0xff
 8008134:	8522      	strh	r2, [r4, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8008136:	9300      	str	r3, [sp, #0]
 8008138:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800813c:	4639      	mov	r1, r7
 800813e:	4620      	mov	r0, r4
 8008140:	f7ff fd12 	bl	8007b68 <I2C_TransferConfig>
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8008144:	4643      	mov	r3, r8
 8008146:	2200      	movs	r2, #0
 8008148:	2104      	movs	r1, #4
 800814a:	4620      	mov	r0, r4
 800814c:	9500      	str	r5, [sp, #0]
 800814e:	f7ff fdcc 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 8008152:	2800      	cmp	r0, #0
 8008154:	d18f      	bne.n	8008076 <HAL_I2C_Mem_Read+0x2e>
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8008156:	6823      	ldr	r3, [r4, #0]
 8008158:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800815a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800815c:	701a      	strb	r2, [r3, #0]
      hi2c->pBuffPtr++;
 800815e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
      hi2c->XferSize--;
 8008160:	8d22      	ldrh	r2, [r4, #40]	@ 0x28
      hi2c->pBuffPtr++;
 8008162:	3301      	adds	r3, #1
      hi2c->XferSize--;
 8008164:	3a01      	subs	r2, #1
      hi2c->pBuffPtr++;
 8008166:	6263      	str	r3, [r4, #36]	@ 0x24
      hi2c->XferCount--;
 8008168:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
      hi2c->XferSize--;
 800816a:	b292      	uxth	r2, r2
      hi2c->XferCount--;
 800816c:	3b01      	subs	r3, #1
      hi2c->XferSize--;
 800816e:	8522      	strh	r2, [r4, #40]	@ 0x28
      hi2c->XferCount--;
 8008170:	b29b      	uxth	r3, r3
 8008172:	8563      	strh	r3, [r4, #42]	@ 0x2a
      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8008174:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008176:	b29b      	uxth	r3, r3
 8008178:	b1b3      	cbz	r3, 80081a8 <HAL_I2C_Mem_Read+0x160>
 800817a:	b9aa      	cbnz	r2, 80081a8 <HAL_I2C_Mem_Read+0x160>
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800817c:	4643      	mov	r3, r8
 800817e:	2180      	movs	r1, #128	@ 0x80
 8008180:	4620      	mov	r0, r4
 8008182:	9500      	str	r5, [sp, #0]
 8008184:	f7ff fdb1 	bl	8007cea <I2C_WaitOnFlagUntilTimeout>
 8008188:	2800      	cmp	r0, #0
 800818a:	f47f af74 	bne.w	8008076 <HAL_I2C_Mem_Read+0x2e>
        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800818e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8008190:	b29b      	uxth	r3, r3
 8008192:	2bff      	cmp	r3, #255	@ 0xff
 8008194:	d928      	bls.n	80081e8 <HAL_I2C_Mem_Read+0x1a0>
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8008196:	22ff      	movs	r2, #255	@ 0xff
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8008198:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800819c:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800819e:	9000      	str	r0, [sp, #0]
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081a0:	4639      	mov	r1, r7
 80081a2:	4620      	mov	r0, r4
 80081a4:	f7ff fce0 	bl	8007b68 <I2C_TransferConfig>
    } while (hi2c->XferCount > 0U);
 80081a8:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 80081aa:	b29b      	uxth	r3, r3
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d1c9      	bne.n	8008144 <HAL_I2C_Mem_Read+0xfc>
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80081b0:	462a      	mov	r2, r5
 80081b2:	4641      	mov	r1, r8
 80081b4:	4620      	mov	r0, r4
 80081b6:	f7ff fdd3 	bl	8007d60 <I2C_WaitOnSTOPFlagUntilTimeout>
 80081ba:	2800      	cmp	r0, #0
 80081bc:	f47f af5b 	bne.w	8008076 <HAL_I2C_Mem_Read+0x2e>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081c0:	6823      	ldr	r3, [r4, #0]
 80081c2:	2120      	movs	r1, #32
 80081c4:	61d9      	str	r1, [r3, #28]
    I2C_RESET_CR2(hi2c);
 80081c6:	685a      	ldr	r2, [r3, #4]
 80081c8:	f022 72ff 	bic.w	r2, r2, #33423360	@ 0x1fe0000
 80081cc:	f422 328b 	bic.w	r2, r2, #71168	@ 0x11600
 80081d0:	f422 72ff 	bic.w	r2, r2, #510	@ 0x1fe
 80081d4:	f022 0201 	bic.w	r2, r2, #1
 80081d8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80081da:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 80081de:	f884 0040 	strb.w	r0, [r4, #64]	@ 0x40
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80081e2:	f884 0042 	strb.w	r0, [r4, #66]	@ 0x42
    return HAL_OK;
 80081e6:	e747      	b.n	8008078 <HAL_I2C_Mem_Read+0x30>
          hi2c->XferSize = hi2c->XferCount;
 80081e8:	8d62      	ldrh	r2, [r4, #42]	@ 0x2a
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081ea:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
          hi2c->XferSize = hi2c->XferCount;
 80081ee:	b292      	uxth	r2, r2
 80081f0:	8522      	strh	r2, [r4, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80081f2:	b2d2      	uxtb	r2, r2
 80081f4:	9000      	str	r0, [sp, #0]
 80081f6:	e7d3      	b.n	80081a0 <HAL_I2C_Mem_Read+0x158>
    __HAL_LOCK(hi2c);
 80081f8:	2002      	movs	r0, #2
 80081fa:	e73d      	b.n	8008078 <HAL_I2C_Mem_Read+0x30>
 80081fc:	80002000 	.word	0x80002000
 8008200:	80002400 	.word	0x80002400

08008204 <HAL_I2C_GetState>:
  return hi2c->State;
 8008204:	f890 0041 	ldrb.w	r0, [r0, #65]	@ 0x41
}
 8008208:	4770      	bx	lr

0800820a <HAL_I2C_GetError>:
  return hi2c->ErrorCode;
 800820a:	6c40      	ldr	r0, [r0, #68]	@ 0x44
}
 800820c:	4770      	bx	lr

0800820e <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800820e:	b510      	push	{r4, lr}
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008210:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008214:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008216:	2a20      	cmp	r2, #32
 8008218:	b2d4      	uxtb	r4, r2
 800821a:	d11c      	bne.n	8008256 <HAL_I2CEx_ConfigAnalogFilter+0x48>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800821c:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 8008220:	2a01      	cmp	r2, #1
 8008222:	d018      	beq.n	8008256 <HAL_I2CEx_ConfigAnalogFilter+0x48>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008224:	2224      	movs	r2, #36	@ 0x24
 8008226:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800822a:	6802      	ldr	r2, [r0, #0]
 800822c:	6810      	ldr	r0, [r2, #0]
 800822e:	f020 0001 	bic.w	r0, r0, #1
 8008232:	6010      	str	r0, [r2, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008234:	6810      	ldr	r0, [r2, #0]
 8008236:	f420 5080 	bic.w	r0, r0, #4096	@ 0x1000
 800823a:	6010      	str	r0, [r2, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800823c:	6810      	ldr	r0, [r2, #0]
 800823e:	4301      	orrs	r1, r0
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008240:	2000      	movs	r0, #0
    hi2c->Instance->CR1 |= AnalogFilter;
 8008242:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 8008244:	6811      	ldr	r1, [r2, #0]
 8008246:	f041 0101 	orr.w	r1, r1, #1
 800824a:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 800824c:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 8008250:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 8008254:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 8008256:	2002      	movs	r0, #2
 8008258:	e7fc      	b.n	8008254 <HAL_I2CEx_ConfigAnalogFilter+0x46>

0800825a <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800825a:	b510      	push	{r4, lr}

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800825c:	f890 2041 	ldrb.w	r2, [r0, #65]	@ 0x41
{
 8008260:	4603      	mov	r3, r0
  if (hi2c->State == HAL_I2C_STATE_READY)
 8008262:	2a20      	cmp	r2, #32
 8008264:	b2d4      	uxtb	r4, r2
 8008266:	d11b      	bne.n	80082a0 <HAL_I2CEx_ConfigDigitalFilter+0x46>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008268:	f890 2040 	ldrb.w	r2, [r0, #64]	@ 0x40
 800826c:	2a01      	cmp	r2, #1
 800826e:	d017      	beq.n	80082a0 <HAL_I2CEx_ConfigDigitalFilter+0x46>

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008270:	2224      	movs	r2, #36	@ 0x24
 8008272:	f880 2041 	strb.w	r2, [r0, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008276:	6802      	ldr	r2, [r0, #0]
 8008278:	6810      	ldr	r0, [r2, #0]
 800827a:	f020 0001 	bic.w	r0, r0, #1
 800827e:	6010      	str	r0, [r2, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008280:	6810      	ldr	r0, [r2, #0]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008282:	f420 6070 	bic.w	r0, r0, #3840	@ 0xf00

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008286:	ea40 2101 	orr.w	r1, r0, r1, lsl #8
    __HAL_I2C_ENABLE(hi2c);

    hi2c->State = HAL_I2C_STATE_READY;

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800828a:	2000      	movs	r0, #0
    hi2c->Instance->CR1 = tmpreg;
 800828c:	6011      	str	r1, [r2, #0]
    __HAL_I2C_ENABLE(hi2c);
 800828e:	6811      	ldr	r1, [r2, #0]
 8008290:	f041 0101 	orr.w	r1, r1, #1
 8008294:	6011      	str	r1, [r2, #0]
    hi2c->State = HAL_I2C_STATE_READY;
 8008296:	f883 4041 	strb.w	r4, [r3, #65]	@ 0x41
    __HAL_UNLOCK(hi2c);
 800829a:	f883 0040 	strb.w	r0, [r3, #64]	@ 0x40
  }
  else
  {
    return HAL_BUSY;
  }
}
 800829e:	bd10      	pop	{r4, pc}
    __HAL_LOCK(hi2c);
 80082a0:	2002      	movs	r0, #2
 80082a2:	e7fc      	b.n	800829e <HAL_I2CEx_ConfigDigitalFilter+0x44>

080082a4 <JPEG_Bits_To_SizeCodes>:
  * @param  Huffcode pointer to codes table
  * @param  LastK pointer to last Coeff (table dimension)
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Bits_To_SizeCodes(uint8_t *Bits, uint8_t *Huffsize, uint32_t *Huffcode, uint32_t *LastK)
{
 80082a4:	b5f0      	push	{r4, r5, r6, r7, lr}

  /* Figure C.1: Generation of table of Huffman code sizes */
  p = 0;
  for (l = 0; l < 16UL; l++)
  {
    i = (uint32_t)Bits[l];
 80082a6:	2401      	movs	r4, #1
 80082a8:	7807      	ldrb	r7, [r0, #0]
  p = 0;
 80082aa:	2500      	movs	r5, #0
 80082ac:	194e      	adds	r6, r1, r5
 80082ae:	443d      	add	r5, r7
 80082b0:	194f      	adds	r7, r1, r5
    if ((p + i) > 256UL)
    {
      /* check for table overflow */
      return HAL_ERROR;
    }
    while (i != 0UL)
 80082b2:	42be      	cmp	r6, r7
 80082b4:	d112      	bne.n	80082dc <JPEG_Bits_To_SizeCodes+0x38>
  for (l = 0; l < 16UL; l++)
 80082b6:	2c10      	cmp	r4, #16
 80082b8:	d108      	bne.n	80082cc <JPEG_Bits_To_SizeCodes+0x28>
      Huffsize[p] = (uint8_t) l + 1U;
      p++;
      i--;
    }
  }
  Huffsize[p] = 0;
 80082ba:	2400      	movs	r4, #0
    /* code must fit in "size" bits (si), no code is allowed to be all ones*/
    if(si > 31UL)
    {
      return HAL_ERROR;
    }
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80082bc:	2601      	movs	r6, #1
  Huffsize[p] = 0;
 80082be:	554c      	strb	r4, [r1, r5]
  *LastK = p;
 80082c0:	601d      	str	r5, [r3, #0]
  p = 0;
 80082c2:	4623      	mov	r3, r4
  si = Huffsize[0];
 80082c4:	780d      	ldrb	r5, [r1, #0]
  while (Huffsize[p] != 0U)
 80082c6:	5cc8      	ldrb	r0, [r1, r3]
 80082c8:	b9d8      	cbnz	r0, 8008302 <JPEG_Bits_To_SizeCodes+0x5e>
    code <<= 1;
    si++;
  }
  /* Return function status */
  return HAL_OK;
}
 80082ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
    i = (uint32_t)Bits[l];
 80082cc:	5d07      	ldrb	r7, [r0, r4]
    if ((p + i) > 256UL)
 80082ce:	3401      	adds	r4, #1
 80082d0:	19ee      	adds	r6, r5, r7
 80082d2:	f5b6 7f80 	cmp.w	r6, #256	@ 0x100
 80082d6:	d9e9      	bls.n	80082ac <JPEG_Bits_To_SizeCodes+0x8>
      return HAL_ERROR;
 80082d8:	2001      	movs	r0, #1
 80082da:	e7f6      	b.n	80082ca <JPEG_Bits_To_SizeCodes+0x26>
      Huffsize[p] = (uint8_t) l + 1U;
 80082dc:	f806 4b01 	strb.w	r4, [r6], #1
      i--;
 80082e0:	e7e7      	b.n	80082b2 <JPEG_Bits_To_SizeCodes+0xe>
      Huffcode[p] = code;
 80082e2:	f842 4023 	str.w	r4, [r2, r3, lsl #2]
      p++;
 80082e6:	3301      	adds	r3, #1
    while (((uint32_t) Huffsize[p]) == si)
 80082e8:	5cc8      	ldrb	r0, [r1, r3]
 80082ea:	19dc      	adds	r4, r3, r7
 80082ec:	42a8      	cmp	r0, r5
 80082ee:	d0f8      	beq.n	80082e2 <JPEG_Bits_To_SizeCodes+0x3e>
    if(si > 31UL)
 80082f0:	2d1f      	cmp	r5, #31
 80082f2:	d8f1      	bhi.n	80082d8 <JPEG_Bits_To_SizeCodes+0x34>
    if (((uint32_t) code) >= (((uint32_t) 1) << si))
 80082f4:	fa06 f005 	lsl.w	r0, r6, r5
 80082f8:	42a0      	cmp	r0, r4
 80082fa:	d9ed      	bls.n	80082d8 <JPEG_Bits_To_SizeCodes+0x34>
    code <<= 1;
 80082fc:	0064      	lsls	r4, r4, #1
    si++;
 80082fe:	3501      	adds	r5, #1
 8008300:	e7e1      	b.n	80082c6 <JPEG_Bits_To_SizeCodes+0x22>
 8008302:	1ae7      	subs	r7, r4, r3
 8008304:	e7f0      	b.n	80082e8 <JPEG_Bits_To_SizeCodes+0x44>

08008306 <JPEG_DCHuff_BitsVals_To_SizeCodes>:
  * @param  DC_SizeCodesTable pointer to DC huffman Sizes/Codes table
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_DCHuff_BitsVals_To_SizeCodes(JPEG_DCHuffTableTypeDef *DC_BitsValsTable,
                                                           JPEG_DC_HuffCodeTableTypeDef *DC_SizeCodesTable)
{
 8008306:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008308:	f2ad 5d14 	subw	sp, sp, #1300	@ 0x514
 800830c:	460d      	mov	r5, r1
 800830e:	4604      	mov	r4, r0
  uint32_t k;
  uint32_t l;
  uint32_t lastK;
  uint8_t huffsize[257];
  uint32_t huffcode[257];
  error = JPEG_Bits_To_SizeCodes(DC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 8008310:	ab01      	add	r3, sp, #4
 8008312:	aa43      	add	r2, sp, #268	@ 0x10c
 8008314:	a902      	add	r1, sp, #8
 8008316:	f7ff ffc5 	bl	80082a4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 800831a:	b938      	cbnz	r0, 800832c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>
 800831c:	9e01      	ldr	r6, [sp, #4]
 800831e:	460b      	mov	r3, r1
 8008320:	f104 010f 	add.w	r1, r4, #15
 8008324:	360f      	adds	r6, #15
 8008326:	4434      	add	r4, r6
    return  error;
  }
  /* Figure C.3: ordering procedure for encoding procedure code tables */
  k = 0;

  while (k < lastK)
 8008328:	42a1      	cmp	r1, r4
 800832a:	d102      	bne.n	8008332 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x2c>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 800832c:	f20d 5d14 	addw	sp, sp, #1300	@ 0x514
 8008330:	bdf0      	pop	{r4, r5, r6, r7, pc}
    l = DC_BitsValsTable->HuffVal[k];
 8008332:	f811 6f01 	ldrb.w	r6, [r1, #1]!
    if (l >= JPEG_DC_HUFF_TABLE_SIZE)
 8008336:	2e0b      	cmp	r6, #11
 8008338:	d80a      	bhi.n	8008350 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x4a>
      DC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800833a:	eb05 0786 	add.w	r7, r5, r6, lsl #2
 800833e:	f852 cb04 	ldr.w	ip, [r2], #4
 8008342:	f8c7 c00c 	str.w	ip, [r7, #12]
      DC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 8008346:	f813 7b01 	ldrb.w	r7, [r3], #1
 800834a:	3f01      	subs	r7, #1
 800834c:	55af      	strb	r7, [r5, r6]
      k++;
 800834e:	e7eb      	b.n	8008328 <JPEG_DCHuff_BitsVals_To_SizeCodes+0x22>
      return HAL_ERROR; /* Huffman Table overflow error*/
 8008350:	2001      	movs	r0, #1
 8008352:	e7eb      	b.n	800832c <JPEG_DCHuff_BitsVals_To_SizeCodes+0x26>

08008354 <JPEG_Set_HuffDC_Mem>:
  * @param  DCTableAddress Encoder DC huffman table address it could be HUFFENC_DC0 or HUFFENC_DC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffDC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_DCHuffTableTypeDef *HuffTableDC,
                                             const __IO uint32_t *DCTableAddress)
{
 8008354:	4603      	mov	r3, r0
 8008356:	4608      	mov	r0, r1
 8008358:	b5f0      	push	{r4, r5, r6, r7, lr}
  uint32_t i;
  uint32_t lsb;
  uint32_t msb;
  __IO uint32_t *address, *addressDef;

  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800835a:	681c      	ldr	r4, [r3, #0]
{
 800835c:	b091      	sub	sp, #68	@ 0x44
  if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC0))
 800835e:	f504 63f8 	add.w	r3, r4, #1984	@ 0x7c0
 8008362:	429a      	cmp	r2, r3
 8008364:	d125      	bne.n	80083b2 <JPEG_Set_HuffDC_Mem+0x5e>
  {
    address = (hjpeg->Instance->HUFFENC_DC0 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 8008366:	f504 64fb 	add.w	r4, r4, #2008	@ 0x7d8
    return HAL_ERROR;
  }

  if (HuffTableDC != NULL)
  {
    error = JPEG_DCHuff_BitsVals_To_SizeCodes(HuffTableDC, &dcSizeCodesTable);
 800836a:	a901      	add	r1, sp, #4
 800836c:	f7ff ffcb 	bl	8008306 <JPEG_DCHuff_BitsVals_To_SizeCodes>
    if (error != HAL_OK)
 8008370:	b9e8      	cbnz	r0, 80083ae <JPEG_Set_HuffDC_Mem+0x5a>
    {
      return  error;
    }
    addressDef = address;
    *addressDef = 0x0FFF0FFF;
 8008372:	aa01      	add	r2, sp, #4
 8008374:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 8008378:	f1a4 0618 	sub.w	r6, r4, #24
    addressDef++;
    *addressDef = 0x0FFF0FFF;
 800837c:	4615      	mov	r5, r2
    *addressDef = 0x0FFF0FFF;
 800837e:	6023      	str	r3, [r4, #0]
    *addressDef = 0x0FFF0FFF;
 8008380:	6063      	str	r3, [r4, #4]
    i = JPEG_DC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address --;
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008382:	7ad1      	ldrb	r1, [r2, #11]
    while (i > 1UL)
 8008384:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008386:	f895 3040 	ldrb.w	r3, [r5, #64]	@ 0x40
    while (i > 1UL)
 800838a:	3a02      	subs	r2, #2
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800838c:	0209      	lsls	r1, r1, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 800838e:	f895 703c 	ldrb.w	r7, [r5, #60]	@ 0x3c
      msb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008392:	f401 6170 	and.w	r1, r1, #3840	@ 0xf00
 8008396:	4319      	orrs	r1, r3
      lsb = ((uint32_t)(((uint32_t)dcSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)dcSizeCodesTable.HuffmanCode[i] &
 8008398:	7b13      	ldrb	r3, [r2, #12]
 800839a:	021b      	lsls	r3, r3, #8
 800839c:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80083a0:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 80083a2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80083a6:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 80083aa:	42b4      	cmp	r4, r6
 80083ac:	d1e9      	bne.n	8008382 <JPEG_Set_HuffDC_Mem+0x2e>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 80083ae:	b011      	add	sp, #68	@ 0x44
 80083b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
  else if (DCTableAddress == (hjpeg->Instance->HUFFENC_DC1))
 80083b2:	f504 63fc 	add.w	r3, r4, #2016	@ 0x7e0
 80083b6:	429a      	cmp	r2, r3
 80083b8:	d102      	bne.n	80083c0 <JPEG_Set_HuffDC_Mem+0x6c>
    address = (hjpeg->Instance->HUFFENC_DC1 + (JPEG_DC_HUFF_TABLE_SIZE / 2UL));
 80083ba:	f504 64ff 	add.w	r4, r4, #2040	@ 0x7f8
  if (HuffTableDC != NULL)
 80083be:	e7d4      	b.n	800836a <JPEG_Set_HuffDC_Mem+0x16>
    return HAL_ERROR;
 80083c0:	2001      	movs	r0, #1
 80083c2:	e7f4      	b.n	80083ae <JPEG_Set_HuffDC_Mem+0x5a>

080083c4 <JPEG_Set_HuffAC_Mem>:
  * @param  ACTableAddress Encoder AC huffman table address it could be HUFFENC_AC0 or HUFFENC_AC1.
  * @retval HAL status
  */
static HAL_StatusTypeDef JPEG_Set_HuffAC_Mem(JPEG_HandleTypeDef *hjpeg, JPEG_ACHuffTableTypeDef *HuffTableAC,
                                             const __IO uint32_t *ACTableAddress)
{
 80083c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  HAL_StatusTypeDef error;
  JPEG_AC_HuffCodeTableTypeDef acSizeCodesTable;
  uint32_t i, lsb, msb;
  __IO uint32_t *address, *addressDef;

  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80083c8:	6804      	ldr	r4, [r0, #0]
{
 80083ca:	f6ad 0d38 	subw	sp, sp, #2104	@ 0x838
 80083ce:	460e      	mov	r6, r1
  if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC0))
 80083d0:	f504 63a0 	add.w	r3, r4, #1280	@ 0x500
 80083d4:	429a      	cmp	r2, r3
 80083d6:	d149      	bne.n	800846c <JPEG_Set_HuffAC_Mem+0xa8>
  {
    address = (hjpeg->Instance->HUFFENC_AC0 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 80083d8:	f204 6444 	addw	r4, r4, #1604	@ 0x644
  error = JPEG_Bits_To_SizeCodes(AC_BitsValsTable->Bits, huffsize, huffcode, &lastK);
 80083dc:	466b      	mov	r3, sp
 80083de:	f20d 4234 	addw	r2, sp, #1076	@ 0x434
 80083e2:	a901      	add	r1, sp, #4
 80083e4:	4630      	mov	r0, r6
 80083e6:	f7ff ff5d 	bl	80082a4 <JPEG_Bits_To_SizeCodes>
  if (error != HAL_OK)
 80083ea:	2800      	cmp	r0, #0
 80083ec:	d13a      	bne.n	8008464 <JPEG_Set_HuffAC_Mem+0xa0>
 80083ee:	9b00      	ldr	r3, [sp, #0]
 80083f0:	460d      	mov	r5, r1
 80083f2:	f106 0c0f 	add.w	ip, r6, #15
 80083f6:	4617      	mov	r7, r2
 80083f8:	330f      	adds	r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 80083fa:	f04f 0e0a 	mov.w	lr, #10
 80083fe:	18f1      	adds	r1, r6, r3
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 8008400:	ae42      	add	r6, sp, #264	@ 0x108
  while (k < lastK)
 8008402:	4561      	cmp	r1, ip
 8008404:	d139      	bne.n	800847a <JPEG_Set_HuffAC_Mem+0xb6>
    /* Locations 162:175 of each AC table contain information used internally by the core */

    addressDef = address;
    for (i = 0; i < 3UL; i++)
    {
      *addressDef = 0x0FFF0FFF;
 8008406:	f06f 23f0 	mvn.w	r3, #4026593280	@ 0xf000f000
 800840a:	a942      	add	r1, sp, #264	@ 0x108
 800840c:	f5a4 76a2 	sub.w	r6, r4, #324	@ 0x144
 8008410:	6023      	str	r3, [r4, #0]
    addressDef++;
    *addressDef = 0x0FD30FD2;
    addressDef++;
    *addressDef = 0x0FD50FD4;
    addressDef++;
    *addressDef = 0x0FD70FD6;
 8008412:	460d      	mov	r5, r1
      *addressDef = 0x0FFF0FFF;
 8008414:	6063      	str	r3, [r4, #4]
 8008416:	60a3      	str	r3, [r4, #8]
    *addressDef = 0x0FD10FD0;
 8008418:	f103 33d1 	add.w	r3, r3, #3520188881	@ 0xd1d1d1d1
 800841c:	f103 232e 	add.w	r3, r3, #771763712	@ 0x2e002e00
 8008420:	60e3      	str	r3, [r4, #12]
    *addressDef = 0x0FD30FD2;
 8008422:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008426:	6123      	str	r3, [r4, #16]
    *addressDef = 0x0FD50FD4;
 8008428:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 800842c:	6163      	str	r3, [r4, #20]
    *addressDef = 0x0FD70FD6;
 800842e:	f103 1302 	add.w	r3, r3, #131074	@ 0x20002
 8008432:	61a3      	str	r3, [r4, #24]
    i = JPEG_AC_HUFF_TABLE_SIZE;
    while (i > 1UL)
    {
      i--;
      address--;
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008434:	f891 20a1 	ldrb.w	r2, [r1, #161]	@ 0xa1
    while (i > 1UL)
 8008438:	3d08      	subs	r5, #8
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800843a:	f895 3330 	ldrb.w	r3, [r5, #816]	@ 0x330
    while (i > 1UL)
 800843e:	3902      	subs	r1, #2
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008440:	0212      	lsls	r2, r2, #8
                                                                                   0xFFUL);
      i--;
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008442:	f895 732c 	ldrb.w	r7, [r5, #812]	@ 0x32c
      msb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 8008446:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800844a:	431a      	orrs	r2, r3
      lsb = ((uint32_t)(((uint32_t)acSizeCodesTable.CodeLength[i] & 0xFU) << 8)) | ((uint32_t)acSizeCodesTable.HuffmanCode[i] &
 800844c:	f891 30a2 	ldrb.w	r3, [r1, #162]	@ 0xa2
 8008450:	021b      	lsls	r3, r3, #8
 8008452:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8008456:	433b      	orrs	r3, r7
                                                                                   0xFFUL);

      *address = lsb | (msb << 16);
 8008458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800845c:	f844 3d04 	str.w	r3, [r4, #-4]!
    while (i > 1UL)
 8008460:	42b4      	cmp	r4, r6
 8008462:	d1e7      	bne.n	8008434 <JPEG_Set_HuffAC_Mem+0x70>
    }
  }

  /* Return function status */
  return HAL_OK;
}
 8008464:	f60d 0d38 	addw	sp, sp, #2104	@ 0x838
 8008468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  else if (ACTableAddress == (hjpeg->Instance->HUFFENC_AC1))
 800846c:	f504 63cc 	add.w	r3, r4, #1632	@ 0x660
 8008470:	429a      	cmp	r2, r3
 8008472:	d10f      	bne.n	8008494 <JPEG_Set_HuffAC_Mem+0xd0>
    address = (hjpeg->Instance->HUFFENC_AC1 + (JPEG_AC_HUFF_TABLE_SIZE / 2UL));
 8008474:	f204 74a4 	addw	r4, r4, #1956	@ 0x7a4
  if (HuffTableAC != NULL)
 8008478:	e7b0      	b.n	80083dc <JPEG_Set_HuffAC_Mem+0x18>
    l = AC_BitsValsTable->HuffVal[k];
 800847a:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
    if (l == 0UL)
 800847e:	b15b      	cbz	r3, 8008498 <JPEG_Set_HuffAC_Mem+0xd4>
    else if (l == 0xF0UL) /* l = 0xF0 ZRL code*/
 8008480:	2bf0      	cmp	r3, #240	@ 0xf0
 8008482:	d015      	beq.n	80084b0 <JPEG_Set_HuffAC_Mem+0xec>
      msb = (l & 0xF0UL) >> 4;
 8008484:	091a      	lsrs	r2, r3, #4
      lsb = (l & 0x0FUL);
 8008486:	f003 030f 	and.w	r3, r3, #15
      l = (msb * 10UL) + lsb - 1UL;
 800848a:	3b01      	subs	r3, #1
 800848c:	fb0e 3302 	mla	r3, lr, r2, r3
    if (l >= JPEG_AC_HUFF_TABLE_SIZE)
 8008490:	2ba1      	cmp	r3, #161	@ 0xa1
 8008492:	d902      	bls.n	800849a <JPEG_Set_HuffAC_Mem+0xd6>
    return HAL_ERROR;
 8008494:	2001      	movs	r0, #1
 8008496:	e7e5      	b.n	8008464 <JPEG_Set_HuffAC_Mem+0xa0>
      l = 160; /*l = 0x00 EOB code*/
 8008498:	23a0      	movs	r3, #160	@ 0xa0
      AC_SizeCodesTable->HuffmanCode[l] = huffcode[k];
 800849a:	eb06 0283 	add.w	r2, r6, r3, lsl #2
 800849e:	f857 8b04 	ldr.w	r8, [r7], #4
 80084a2:	f8c2 80a4 	str.w	r8, [r2, #164]	@ 0xa4
      AC_SizeCodesTable->CodeLength[l] = huffsize[k] - 1U;
 80084a6:	f815 2b01 	ldrb.w	r2, [r5], #1
 80084aa:	3a01      	subs	r2, #1
 80084ac:	54f2      	strb	r2, [r6, r3]
      k++;
 80084ae:	e7a8      	b.n	8008402 <JPEG_Set_HuffAC_Mem+0x3e>
      l = 161;
 80084b0:	23a1      	movs	r3, #161	@ 0xa1
 80084b2:	e7f2      	b.n	800849a <JPEG_Set_HuffAC_Mem+0xd6>

080084b4 <JPEG_Init_Process>:
  * @retval None
  */
static void JPEG_Init_Process(JPEG_HandleTypeDef *hjpeg)
{
  /*Reset pause*/
  hjpeg->Context &= (~(JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT));
 80084b4:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80084b6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 80084ba:	6543      	str	r3, [r0, #84]	@ 0x54

  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084bc:	6d42      	ldr	r2, [r0, #84]	@ 0x54
  {
    /*Set JPEG Codec to Decoding mode */
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80084be:	6803      	ldr	r3, [r0, #0]
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 80084c0:	f002 0203 	and.w	r2, r2, #3
 80084c4:	2a02      	cmp	r2, #2
    hjpeg->Instance->CONFR1 |= JPEG_CONFR1_DE;
 80084c6:	685a      	ldr	r2, [r3, #4]
 80084c8:	bf0c      	ite	eq
 80084ca:	f042 0208 	orreq.w	r2, r2, #8
  }
  else /* JPEG_CONTEXT_ENCODE */
  {
    /*Set JPEG Codec to Encoding mode */
    hjpeg->Instance->CONFR1 &= ~JPEG_CONFR1_DE;
 80084ce:	f022 0208 	bicne.w	r2, r2, #8
 80084d2:	605a      	str	r2, [r3, #4]
  }

  /*Stop JPEG processing */
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80084d4:	681a      	ldr	r2, [r3, #0]
 80084d6:	f022 0201 	bic.w	r2, r2, #1
 80084da:	601a      	str	r2, [r3, #0]

  /* Disable All Interrupts */
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80084dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084de:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80084e2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Flush input and output FIFOs*/
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80084e4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084e6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80084ea:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 80084ec:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ee:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80084f2:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Clear all flags */
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80084f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80084f6:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80084fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /*Start Encoding/Decoding*/
  hjpeg->Instance->CONFR0 |=  JPEG_CONFR0_START;
 80084fc:	681a      	ldr	r2, [r3, #0]
 80084fe:	f042 0201 	orr.w	r2, r2, #1
 8008502:	601a      	str	r2, [r3, #0]

  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008504:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 8008506:	f002 020c 	and.w	r2, r2, #12
 800850a:	2a08      	cmp	r2, #8
 800850c:	d104      	bne.n	8008518 <JPEG_Init_Process+0x64>
  {
    /*Enable IN/OUT, end of Conversation, and end of header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_IFT | JPEG_IT_IFNF | JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC | JPEG_IT_HPD);
 800850e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008510:	f042 026e 	orr.w	r2, r2, #110	@ 0x6e
  }
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
  {
    /*Enable End Of Conversation, and End Of Header parsing interruptions*/
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008514:	631a      	str	r2, [r3, #48]	@ 0x30
  }
  else
  {
    /* Nothing to do */
  }
}
 8008516:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008518:	6d42      	ldr	r2, [r0, #84]	@ 0x54
 800851a:	f002 020c 	and.w	r2, r2, #12
 800851e:	2a0c      	cmp	r2, #12
 8008520:	d1f9      	bne.n	8008516 <JPEG_Init_Process+0x62>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008522:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008524:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008528:	e7f4      	b.n	8008514 <JPEG_Init_Process+0x60>
	...

0800852c <JPEG_DMA_StartProcess>:
  * @param  hjpeg pointer to a JPEG_HandleTypeDef structure that contains
  *         the configuration information for JPEG module
  * @retval JPEG_PROCESS_DONE if process ends else JPEG_PROCESS_ONGOING
  */
static HAL_StatusTypeDef JPEG_DMA_StartProcess(JPEG_HandleTypeDef *hjpeg)
{
 800852c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
  /*if the MDMA In is triggred with JPEG In FIFO Threshold flag
      then MDMA In buffer size is 32 bytes
    else (MDMA In is triggred with JPEG In FIFO not full flag)
      then MDMA In buffer size is 4 bytes
    */
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 800852e:	6b06      	ldr	r6, [r0, #48]	@ 0x30
{
 8008530:	4604      	mov	r4, r0
    else (MDMA Out is triggred with JPEG Out FIFO not empty flag)
      then MDMA buffer size is 4 bytes
    */
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;

  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008532:	6a82      	ldr	r2, [r0, #40]	@ 0x28
  inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008534:	6ab5      	ldr	r5, [r6, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008536:	42aa      	cmp	r2, r5
 8008538:	d313      	bcc.n	8008562 <JPEG_DMA_StartProcess+0x36>
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800853a:	6b40      	ldr	r0, [r0, #52]	@ 0x34
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 800853c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
  outXfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 800853e:	6a81      	ldr	r1, [r0, #40]	@ 0x28
  if ((hjpeg->InDataLength < inXfrSize) || (hjpeg->OutDataLength < outXfrSize))
 8008540:	428b      	cmp	r3, r1
 8008542:	d30e      	bcc.n	8008562 <JPEG_DMA_StartProcess+0x36>
  {
    return HAL_ERROR;
  }
  /* Set the JPEG MDMA In transfer complete callback */
  hjpeg->hdmain->XferCpltCallback = JPEG_MDMAInCpltCallback;
 8008544:	4f18      	ldr	r7, [pc, #96]	@ (80085a8 <JPEG_DMA_StartProcess+0x7c>)
 8008546:	6477      	str	r7, [r6, #68]	@ 0x44
  /* Set the MDMA In error callback */
  hjpeg->hdmain->XferErrorCallback = JPEG_MDMAErrorCallback;
 8008548:	4f18      	ldr	r7, [pc, #96]	@ (80085ac <JPEG_DMA_StartProcess+0x80>)
 800854a:	6577      	str	r7, [r6, #84]	@ 0x54

  /* Set the JPEG MDMA Out transfer complete callback */
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 800854c:	4e18      	ldr	r6, [pc, #96]	@ (80085b0 <JPEG_DMA_StartProcess+0x84>)
  /* Set the MDMA In error callback */
  hjpeg->hdmaout->XferErrorCallback = JPEG_MDMAErrorCallback;
 800854e:	6547      	str	r7, [r0, #84]	@ 0x54
  hjpeg->hdmaout->XferCpltCallback = JPEG_MDMAOutCpltCallback;
 8008550:	6446      	str	r6, [r0, #68]	@ 0x44
  /* Set the MDMA Out Abort callback */
  hjpeg->hdmaout->XferAbortCallback = JPEG_MDMAOutAbortCallback;
 8008552:	4e18      	ldr	r6, [pc, #96]	@ (80085b4 <JPEG_DMA_StartProcess+0x88>)
 8008554:	6586      	str	r6, [r0, #88]	@ 0x58

  if ((inXfrSize == 0UL) || (outXfrSize == 0UL))
 8008556:	b105      	cbz	r5, 800855a <JPEG_DMA_StartProcess+0x2e>
 8008558:	b931      	cbnz	r1, 8008568 <JPEG_DMA_StartProcess+0x3c>
  {
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 800855a:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800855c:	f043 0304 	orr.w	r3, r3, #4
 8008560:	6523      	str	r3, [r4, #80]	@ 0x50
    return HAL_ERROR;
 8008562:	2001      	movs	r0, #1
    hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
    return HAL_ERROR;
  }

  return HAL_OK;
}
 8008564:	b003      	add	sp, #12
 8008566:	bdf0      	pop	{r4, r5, r6, r7, pc}
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008568:	fbb2 f6f5 	udiv	r6, r2, r5
 800856c:	fb05 2516 	mls	r5, r5, r6, r2
 8008570:	1b52      	subs	r2, r2, r5
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008572:	2501      	movs	r5, #1
  hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008574:	62a2      	str	r2, [r4, #40]	@ 0x28
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008576:	fbb3 f2f1 	udiv	r2, r3, r1
 800857a:	fb01 3212 	mls	r2, r1, r2, r3
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 800857e:	6821      	ldr	r1, [r4, #0]
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008580:	1a9b      	subs	r3, r3, r2
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008582:	3144      	adds	r1, #68	@ 0x44
  hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % outXfrSize);
 8008584:	62e3      	str	r3, [r4, #44]	@ 0x2c
  if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008586:	9500      	str	r5, [sp, #0]
 8008588:	69e2      	ldr	r2, [r4, #28]
 800858a:	f001 f82a 	bl	80095e2 <HAL_MDMA_Start_IT>
 800858e:	2800      	cmp	r0, #0
 8008590:	d1e3      	bne.n	800855a <JPEG_DMA_StartProcess+0x2e>
  if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008592:	6822      	ldr	r2, [r4, #0]
 8008594:	9500      	str	r5, [sp, #0]
 8008596:	3240      	adds	r2, #64	@ 0x40
 8008598:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800859a:	69a1      	ldr	r1, [r4, #24]
 800859c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800859e:	f001 f820 	bl	80095e2 <HAL_MDMA_Start_IT>
 80085a2:	2800      	cmp	r0, #0
 80085a4:	d0de      	beq.n	8008564 <JPEG_DMA_StartProcess+0x38>
 80085a6:	e7d8      	b.n	800855a <JPEG_DMA_StartProcess+0x2e>
 80085a8:	08008aef 	.word	0x08008aef
 80085ac:	080089e7 	.word	0x080089e7
 80085b0:	08008fad 	.word	0x08008fad
 80085b4:	08008f9f 	.word	0x08008f9f

080085b8 <HAL_JPEG_Init>:
{
 80085b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg == NULL)
 80085ba:	4605      	mov	r5, r0
 80085bc:	2800      	cmp	r0, #0
 80085be:	f000 80f2 	beq.w	80087a6 <HAL_JPEG_Init+0x1ee>
  if (hjpeg->State == HAL_JPEG_STATE_RESET)
 80085c2:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
 80085c6:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80085ca:	b91b      	cbnz	r3, 80085d4 <HAL_JPEG_Init+0x1c>
    hjpeg->Lock = HAL_UNLOCKED;
 80085cc:	f880 204c 	strb.w	r2, [r0, #76]	@ 0x4c
    HAL_JPEG_MspInit(hjpeg);
 80085d0:	f7f8 ff2e 	bl	8001430 <HAL_JPEG_MspInit>
  __HAL_JPEG_ENABLE(hjpeg);
 80085d4:	682c      	ldr	r4, [r5, #0]
  hjpeg->State = HAL_JPEG_STATE_BUSY;
 80085d6:	2302      	movs	r3, #2
 80085d8:	4a86      	ldr	r2, [pc, #536]	@ (80087f4 <HAL_JPEG_Init+0x23c>)
 80085da:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  address = (hjpeg->Instance->DHTMEM + 3);
 80085de:	f504 715b 	add.w	r1, r4, #876	@ 0x36c
  __HAL_JPEG_ENABLE(hjpeg);
 80085e2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80085e4:	f504 7057 	add.w	r0, r4, #860	@ 0x35c
 80085e8:	f043 0301 	orr.w	r3, r3, #1
 80085ec:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80085ee:	6823      	ldr	r3, [r4, #0]
 80085f0:	f023 0301 	bic.w	r3, r3, #1
 80085f4:	6023      	str	r3, [r4, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80085f6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 80085f8:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 80085fc:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_IFF;
 80085fe:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008600:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8008604:	6323      	str	r3, [r4, #48]	@ 0x30
  hjpeg->Instance->CR |= JPEG_CR_OFF;
 8008606:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008608:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800860c:	6323      	str	r3, [r4, #48]	@ 0x30
  __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 800860e:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8008610:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008614:	63a3      	str	r3, [r4, #56]	@ 0x38
  hjpeg->QuantTable0 = (uint8_t *)((uint32_t)JPEG_LUM_QuantTable);
 8008616:	4b78      	ldr	r3, [pc, #480]	@ (80087f8 <HAL_JPEG_Init+0x240>)
 8008618:	63eb      	str	r3, [r5, #60]	@ 0x3c
  hjpeg->QuantTable1 = (uint8_t *)((uint32_t)JPEG_CHROM_QuantTable);
 800861a:	4b78      	ldr	r3, [pc, #480]	@ (80087fc <HAL_JPEG_Init+0x244>)
 800861c:	642b      	str	r3, [r5, #64]	@ 0x40
  hjpeg->QuantTable2 = NULL;
 800861e:	2300      	movs	r3, #0
  hjpeg->QuantTable3 = NULL;
 8008620:	e9c5 3311 	strd	r3, r3, [r5, #68]	@ 0x44
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008624:	7b93      	ldrb	r3, [r2, #14]
  while (index > 3UL)
 8008626:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008628:	7cd6      	ldrb	r6, [r2, #19]
               (((uint32_t)HuffTableDC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800862a:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800862c:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableDC0->Bits[index - 4UL] & 0xFFUL);
 8008630:	7c16      	ldrb	r6, [r2, #16]
               (((uint32_t)HuffTableDC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008632:	4333      	orrs	r3, r6
 8008634:	7c56      	ldrb	r6, [r2, #17]
 8008636:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableDC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800863a:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 800863e:	4281      	cmp	r1, r0
 8008640:	d1f0      	bne.n	8008624 <HAL_JPEG_Init+0x6c>
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 8008642:	4b6f      	ldr	r3, [pc, #444]	@ (8008800 <HAL_JPEG_Init+0x248>)
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008644:	f504 7162 	add.w	r1, r4, #904	@ 0x388
 8008648:	4a6e      	ldr	r2, [pc, #440]	@ (8008804 <HAL_JPEG_Init+0x24c>)
 800864a:	f504 775e 	add.w	r7, r4, #888	@ 0x378
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800864e:	f8c4 3378 	str.w	r3, [r4, #888]	@ 0x378
 8008652:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
  address = (hjpeg->Instance->DHTMEM + 10UL);
 8008656:	4610      	mov	r0, r2
 8008658:	460e      	mov	r6, r1
    *address = (((uint32_t)HuffTableDC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 800865a:	f8c4 3374 	str.w	r3, [r4, #884]	@ 0x374
 800865e:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008662:	f8c4 3370 	str.w	r3, [r4, #880]	@ 0x370
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 8008666:	7b83      	ldrb	r3, [r0, #14]
  while (index > 3UL)
 8008668:	3804      	subs	r0, #4
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 800866a:	f890 c013 	ldrb.w	ip, [r0, #19]
               (((uint32_t)HuffTableAC0->Bits[index - 2UL] & 0xFFUL) << 16) |
 800866e:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008670:	ea43 630c 	orr.w	r3, r3, ip, lsl #24
               ((uint32_t)HuffTableAC0->Bits[index - 4UL] & 0xFFUL);
 8008674:	f890 c010 	ldrb.w	ip, [r0, #16]
               (((uint32_t)HuffTableAC0->Bits[index - 3UL] & 0xFFUL) << 8) |
 8008678:	ea43 030c 	orr.w	r3, r3, ip
 800867c:	f890 c011 	ldrb.w	ip, [r0, #17]
 8008680:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
    *address = (((uint32_t)HuffTableAC0->Bits[index - 1UL] & 0xFFUL) << 24) |
 8008684:	f846 3904 	str.w	r3, [r6], #-4
  while (index > 3UL)
 8008688:	42be      	cmp	r6, r7
 800868a:	d1ec      	bne.n	8008666 <HAL_JPEG_Init+0xae>
  value = *address & 0xFFFF0000U;
 800868c:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address--; /* address = hjpeg->Instance->DHTMEM + 50*/
 8008690:	f504 6085 	add.w	r0, r4, #1064	@ 0x428
  value = *address & 0xFFFF0000U;
 8008694:	0c1b      	lsrs	r3, r3, #16
 8008696:	041b      	lsls	r3, r3, #16
  value = value | (((uint32_t)HuffTableAC0->HuffVal[161] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC0->HuffVal[160] & 0xFFUL);
 8008698:	f443 437a 	orr.w	r3, r3, #64000	@ 0xfa00
 800869c:	f043 03f9 	orr.w	r3, r3, #249	@ 0xf9
  *address = value;
 80086a0:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80086a4:	f892 30ae 	ldrb.w	r3, [r2, #174]	@ 0xae
  while (index > 3UL)
 80086a8:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80086aa:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
               (((uint32_t)HuffTableAC0->HuffVal[index - 2UL] & 0xFFUL) << 16) |
 80086ae:	041b      	lsls	r3, r3, #16
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80086b0:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC0->HuffVal[index - 4UL] & 0xFFUL);
 80086b4:	f892 60b0 	ldrb.w	r6, [r2, #176]	@ 0xb0
               (((uint32_t)HuffTableAC0->HuffVal[index - 3UL] & 0xFFUL) << 8) |
 80086b8:	4333      	orrs	r3, r6
 80086ba:	f892 60b1 	ldrb.w	r6, [r2, #177]	@ 0xb1
 80086be:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC0->HuffVal[index - 1UL] & 0xFFUL) << 24) |
 80086c2:	f840 3904 	str.w	r3, [r0], #-4
  while (index > 3UL)
 80086c6:	4281      	cmp	r1, r0
 80086c8:	d1ec      	bne.n	80086a4 <HAL_JPEG_Init+0xec>
  value = *address & 0x0000FFFFU;
 80086ca:	f8d4 342c 	ldr.w	r3, [r4, #1068]	@ 0x42c
  address = (hjpeg->Instance->DHTMEM + 102);
 80086ce:	f504 619f 	add.w	r1, r4, #1272	@ 0x4f8
  value = *address & 0xFFFF0000U;
 80086d2:	4a4d      	ldr	r2, [pc, #308]	@ (8008808 <HAL_JPEG_Init+0x250>)
 80086d4:	f504 608b 	add.w	r0, r4, #1112	@ 0x458
  value = *address & 0x0000FFFFU;
 80086d8:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->Bits[0] & 0xFFUL) << 16);
 80086da:	f043 7340 	orr.w	r3, r3, #50331648	@ 0x3000000
  *address = value;
 80086de:	f8c4 342c 	str.w	r3, [r4, #1068]	@ 0x42c
  value = *address & 0xFFFF0000U;
 80086e2:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 80086e6:	4013      	ands	r3, r2
  *address = value;
 80086e8:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
    *address = (((uint32_t)HuffTableDC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 80086ec:	2301      	movs	r3, #1
 80086ee:	f8c4 3438 	str.w	r3, [r4, #1080]	@ 0x438
 80086f2:	f04f 3301 	mov.w	r3, #16843009	@ 0x1010101
 80086f6:	f8c4 3434 	str.w	r3, [r4, #1076]	@ 0x434
 80086fa:	f8c4 3430 	str.w	r3, [r4, #1072]	@ 0x430
  value = *address & 0x0000FFFFUL;
 80086fe:	f8d4 343c 	ldr.w	r3, [r4, #1084]	@ 0x43c
 8008702:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableDC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableDC1->HuffVal[0] & 0xFFUL) <<
 8008704:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 8008708:	f8c4 343c 	str.w	r3, [r4, #1084]	@ 0x43c
  value = *address & 0xFFFF0000UL;
 800870c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008710:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableDC1->HuffVal[11] & 0xFFUL) << 8) | ((uint32_t)HuffTableDC1->HuffVal[10] & 0xFFUL);
 8008712:	f443 6330 	orr.w	r3, r3, #2816	@ 0xb00
 8008716:	f043 030a 	orr.w	r3, r3, #10
  *address = value;
 800871a:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
    *address = (((uint32_t)HuffTableDC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800871e:	4b3b      	ldr	r3, [pc, #236]	@ (800880c <HAL_JPEG_Init+0x254>)
 8008720:	f8c4 3444 	str.w	r3, [r4, #1092]	@ 0x444
 8008724:	f1a3 3304 	sub.w	r3, r3, #67372036	@ 0x4040404
 8008728:	f8c4 3440 	str.w	r3, [r4, #1088]	@ 0x440
  value = *address & 0x0000FFFFU;
 800872c:	f8d4 3448 	ldr.w	r3, [r4, #1096]	@ 0x448
 8008730:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->Bits[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->Bits[0] & 0xFFUL) << 16);
 8008732:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
  *address = value;
 8008736:	f8c4 3448 	str.w	r3, [r4, #1096]	@ 0x448
  value = *address & 0xFFFF0000U;
 800873a:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 800873e:	4013      	ands	r3, r2
  value = value | (((uint32_t)HuffTableAC1->Bits[15] & 0xFFUL) << 8) | ((uint32_t)HuffTableAC1->Bits[14] & 0xFFUL);
 8008740:	4a33      	ldr	r2, [pc, #204]	@ (8008810 <HAL_JPEG_Init+0x258>)
 8008742:	f443 43ee 	orr.w	r3, r3, #30464	@ 0x7700
 8008746:	f043 0302 	orr.w	r3, r3, #2
  *address = value;
 800874a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
    *address = (((uint32_t)HuffTableAC1->Bits[index + 1UL] & 0xFFUL) << 24) |
 800874e:	4b31      	ldr	r3, [pc, #196]	@ (8008814 <HAL_JPEG_Init+0x25c>)
 8008750:	f8c4 3454 	str.w	r3, [r4, #1108]	@ 0x454
 8008754:	4b30      	ldr	r3, [pc, #192]	@ (8008818 <HAL_JPEG_Init+0x260>)
 8008756:	f8c4 3450 	str.w	r3, [r4, #1104]	@ 0x450
 800875a:	4b30      	ldr	r3, [pc, #192]	@ (800881c <HAL_JPEG_Init+0x264>)
 800875c:	f8c4 344c 	str.w	r3, [r4, #1100]	@ 0x44c
  value = *address & 0x0000FFFFUL;
 8008760:	f8d4 3458 	ldr.w	r3, [r4, #1112]	@ 0x458
 8008764:	b29b      	uxth	r3, r3
  value = value | (((uint32_t)HuffTableAC1->HuffVal[1] & 0xFFUL) << 24) | (((uint32_t)HuffTableAC1->HuffVal[0] & 0xFFUL) <<
 8008766:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
  *address = value;
 800876a:	f8c4 3458 	str.w	r3, [r4, #1112]	@ 0x458
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 800876e:	f892 30b0 	ldrb.w	r3, [r2, #176]	@ 0xb0
  while (index > 3UL)
 8008772:	3a04      	subs	r2, #4
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 8008774:	f892 60b5 	ldrb.w	r6, [r2, #181]	@ 0xb5
               (((uint32_t)HuffTableAC1->HuffVal[index] & 0xFFUL) << 16) |
 8008778:	041b      	lsls	r3, r3, #16
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 800877a:	ea43 6306 	orr.w	r3, r3, r6, lsl #24
               ((uint32_t)HuffTableAC1->HuffVal[index - 2UL] & 0xFFUL);
 800877e:	f892 60b2 	ldrb.w	r6, [r2, #178]	@ 0xb2
               (((uint32_t)HuffTableAC1->HuffVal[index - 1UL] & 0xFFUL) << 8) |
 8008782:	4333      	orrs	r3, r6
 8008784:	f892 60b3 	ldrb.w	r6, [r2, #179]	@ 0xb3
 8008788:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    *address = (((uint32_t)HuffTableAC1->HuffVal[index + 1UL] & 0xFFUL) << 24) |
 800878c:	f841 3904 	str.w	r3, [r1], #-4
  while (index > 3UL)
 8008790:	4281      	cmp	r1, r0
 8008792:	d1ec      	bne.n	800876e <HAL_JPEG_Init+0x1b6>
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACLUM_HuffTable,
 8008794:	f504 62a0 	add.w	r2, r4, #1280	@ 0x500
 8008798:	491a      	ldr	r1, [pc, #104]	@ (8008804 <HAL_JPEG_Init+0x24c>)
 800879a:	4628      	mov	r0, r5
 800879c:	f7ff fe12 	bl	80083c4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80087a0:	b118      	cbz	r0, 80087aa <HAL_JPEG_Init+0x1f2>
    hjpeg->ErrorCode = HAL_JPEG_ERROR_HUFF_TABLE;
 80087a2:	2301      	movs	r3, #1
 80087a4:	652b      	str	r3, [r5, #80]	@ 0x50
    return HAL_ERROR;
 80087a6:	2001      	movs	r0, #1
}
 80087a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  error = JPEG_Set_HuffAC_Mem(hjpeg, (JPEG_ACHuffTableTypeDef *)(uint32_t)&JPEG_ACCHROM_HuffTable,
 80087aa:	f504 62cc 	add.w	r2, r4, #1632	@ 0x660
 80087ae:	4918      	ldr	r1, [pc, #96]	@ (8008810 <HAL_JPEG_Init+0x258>)
 80087b0:	4628      	mov	r0, r5
 80087b2:	f7ff fe07 	bl	80083c4 <JPEG_Set_HuffAC_Mem>
  if (error != HAL_OK)
 80087b6:	2800      	cmp	r0, #0
 80087b8:	d1f3      	bne.n	80087a2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCLUM_HuffTable,
 80087ba:	f504 62f8 	add.w	r2, r4, #1984	@ 0x7c0
 80087be:	490d      	ldr	r1, [pc, #52]	@ (80087f4 <HAL_JPEG_Init+0x23c>)
 80087c0:	4628      	mov	r0, r5
 80087c2:	f7ff fdc7 	bl	8008354 <JPEG_Set_HuffDC_Mem>
  if (error != HAL_OK)
 80087c6:	2800      	cmp	r0, #0
 80087c8:	d1eb      	bne.n	80087a2 <HAL_JPEG_Init+0x1ea>
  error = JPEG_Set_HuffDC_Mem(hjpeg, (JPEG_DCHuffTableTypeDef *)(uint32_t)&JPEG_DCCHROM_HuffTable,
 80087ca:	f504 62fc 	add.w	r2, r4, #2016	@ 0x7e0
 80087ce:	4914      	ldr	r1, [pc, #80]	@ (8008820 <HAL_JPEG_Init+0x268>)
 80087d0:	4628      	mov	r0, r5
 80087d2:	f7ff fdbf 	bl	8008354 <JPEG_Set_HuffDC_Mem>
  if (JPEG_Set_HuffEnc_Mem(hjpeg) != HAL_OK)
 80087d6:	2800      	cmp	r0, #0
 80087d8:	d1e3      	bne.n	80087a2 <HAL_JPEG_Init+0x1ea>
  hjpeg->Instance->CONFR1 |= JPEG_CONFR1_HDR;
 80087da:	6863      	ldr	r3, [r4, #4]
 80087dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80087e0:	6063      	str	r3, [r4, #4]
  hjpeg->State = HAL_JPEG_STATE_READY;
 80087e2:	2301      	movs	r3, #1
  hjpeg->JpegInCount = 0;
 80087e4:	6228      	str	r0, [r5, #32]
  hjpeg->JpegOutCount = 0;
 80087e6:	6268      	str	r0, [r5, #36]	@ 0x24
  hjpeg->State = HAL_JPEG_STATE_READY;
 80087e8:	f885 304d 	strb.w	r3, [r5, #77]	@ 0x4d
  hjpeg->ErrorCode = HAL_JPEG_ERROR_NONE;
 80087ec:	6528      	str	r0, [r5, #80]	@ 0x50
  hjpeg->Context = 0;
 80087ee:	6568      	str	r0, [r5, #84]	@ 0x54
  return HAL_OK;
 80087f0:	e7da      	b.n	80087a8 <HAL_JPEG_Init+0x1f0>
 80087f2:	bf00      	nop
 80087f4:	08025044 	.word	0x08025044
 80087f8:	08024e44 	.word	0x08024e44
 80087fc:	08024e04 	.word	0x08024e04
 8008800:	0b0a0908 	.word	0x0b0a0908
 8008804:	08024f76 	.word	0x08024f76
 8008808:	ffff0000 	.word	0xffff0000
 800880c:	09080706 	.word	0x09080706
 8008810:	08024ec4 	.word	0x08024ec4
 8008814:	01000404 	.word	0x01000404
 8008818:	05070403 	.word	0x05070403
 800881c:	04040201 	.word	0x04040201
 8008820:	08025028 	.word	0x08025028

08008824 <HAL_JPEG_GetInfo>:
{
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
  if ((hjpeg == NULL) || (pInfo == NULL))
 8008828:	2800      	cmp	r0, #0
 800882a:	d06f      	beq.n	800890c <HAL_JPEG_GetInfo+0xe8>
 800882c:	2900      	cmp	r1, #0
 800882e:	d06d      	beq.n	800890c <HAL_JPEG_GetInfo+0xe8>
  if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF_1)
 8008830:	6804      	ldr	r4, [r0, #0]
 8008832:	6863      	ldr	r3, [r4, #4]
 8008834:	f003 0303 	and.w	r3, r3, #3
 8008838:	2b02      	cmp	r3, #2
 800883a:	d047      	beq.n	80088cc <HAL_JPEG_GetInfo+0xa8>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == 0UL)
 800883c:	6863      	ldr	r3, [r4, #4]
 800883e:	f013 0303 	ands.w	r3, r3, #3
 8008842:	d005      	beq.n	8008850 <HAL_JPEG_GetInfo+0x2c>
  else if ((hjpeg->Instance->CONFR1 & JPEG_CONFR1_NF) == JPEG_CONFR1_NF)
 8008844:	6863      	ldr	r3, [r4, #4]
 8008846:	f003 0303 	and.w	r3, r3, #3
 800884a:	2b03      	cmp	r3, #3
 800884c:	d15e      	bne.n	800890c <HAL_JPEG_GetInfo+0xe8>
 800884e:	2330      	movs	r3, #48	@ 0x30
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008850:	6862      	ldr	r2, [r4, #4]
    pInfo->ColorSpace = JPEG_YCBCR_COLORSPACE;
 8008852:	600b      	str	r3, [r1, #0]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008854:	f023 0320 	bic.w	r3, r3, #32
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 8008858:	0c12      	lsrs	r2, r2, #16
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 800885a:	2b10      	cmp	r3, #16
  pInfo->ImageHeight = (hjpeg->Instance->CONFR1 & 0xFFFF0000UL) >> 16;
 800885c:	608a      	str	r2, [r1, #8]
  pInfo->ImageWidth  = (hjpeg->Instance->CONFR3 & 0xFFFF0000UL) >> 16;
 800885e:	68e2      	ldr	r2, [r4, #12]
 8008860:	ea4f 4212 	mov.w	r2, r2, lsr #16
 8008864:	60ca      	str	r2, [r1, #12]
  if ((pInfo->ColorSpace == JPEG_YCBCR_COLORSPACE) || (pInfo->ColorSpace == JPEG_CMYK_COLORSPACE))
 8008866:	d13c      	bne.n	80088e2 <HAL_JPEG_GetInfo+0xbe>
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 8008868:	6925      	ldr	r5, [r4, #16]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 800886a:	6963      	ldr	r3, [r4, #20]
    yblockNb  = (hjpeg->Instance->CONFR4 & JPEG_CONFR4_NB) >> 4;
 800886c:	f3c5 1503 	ubfx	r5, r5, #4, #4
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008870:	69a2      	ldr	r2, [r4, #24]
    cBblockNb = (hjpeg->Instance->CONFR5 & JPEG_CONFR5_NB) >> 4;
 8008872:	091b      	lsrs	r3, r3, #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 8008874:	2d01      	cmp	r5, #1
    cRblockNb = (hjpeg->Instance->CONFR6 & JPEG_CONFR6_NB) >> 4;
 8008876:	ea4f 1212 	mov.w	r2, r2, lsr #4
    if ((yblockNb == 1UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 800887a:	d129      	bne.n	80088d0 <HAL_JPEG_GetInfo+0xac>
 800887c:	4313      	orrs	r3, r2
 800887e:	f013 0f0f 	tst.w	r3, #15
 8008882:	bf0c      	ite	eq
 8008884:	2301      	moveq	r3, #1
 8008886:	2300      	movne	r3, #0
 8008888:	005b      	lsls	r3, r3, #1
      pInfo->ChromaSubsampling = JPEG_422_SUBSAMPLING; /*16x8 block*/
 800888a:	604b      	str	r3, [r1, #4]
  *         the configuration information for JPEG module
  * @retval JPEG image quality from 1 to 100.
  */
static uint32_t JPEG_GetQuality(JPEG_HandleTypeDef *hjpeg)
{
  uint32_t quality = 0;
 800888c:	2300      	movs	r3, #0
 800888e:	3450      	adds	r4, #80	@ 0x50
 8008890:	f8df c07c 	ldr.w	ip, [pc, #124]	@ 8008910 <HAL_JPEG_GetInfo+0xec>
  uint32_t quantRow, quantVal, scale, i, j;
  __IO uint32_t *tableAddress = hjpeg->Instance->QMEM0;

  i = 0;
 8008894:	461d      	mov	r5, r3
        quality += 100UL;
      }
      else
      {
        /* Note that the quantization coefficients must be specified in the table in zigzag order */
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 8008896:	f04f 0e64 	mov.w	lr, #100	@ 0x64
        {
          quality += (200UL - scale) / 2UL;
        }
        else
        {
          quality += 5000UL / scale;
 800889a:	f241 3888 	movw	r8, #5000	@ 0x1388
    quantRow = *tableAddress;
 800889e:	f854 9005 	ldr.w	r9, [r4, r5]
    for (j = 0; j < 4UL; j++)
 80088a2:	eb05 070c 	add.w	r7, r5, ip
    quantRow = *tableAddress;
 80088a6:	2600      	movs	r6, #0
      quantVal = (quantRow >> (8UL * j)) & 0xFFUL;
 80088a8:	fa29 f206 	lsr.w	r2, r9, r6
 80088ac:	b2d2      	uxtb	r2, r2
      if (quantVal == 1UL)
 80088ae:	2a01      	cmp	r2, #1
 80088b0:	d119      	bne.n	80088e6 <HAL_JPEG_GetInfo+0xc2>
        quality += 100UL;
 80088b2:	3364      	adds	r3, #100	@ 0x64
    for (j = 0; j < 4UL; j++)
 80088b4:	3608      	adds	r6, #8
 80088b6:	3701      	adds	r7, #1
 80088b8:	2e20      	cmp	r6, #32
 80088ba:	d1f5      	bne.n	80088a8 <HAL_JPEG_GetInfo+0x84>
        }
      }
    }

    i += 4UL;
 80088bc:	3504      	adds	r5, #4
  while (i < (JPEG_QUANT_TABLE_SIZE - 3UL))
 80088be:	2d40      	cmp	r5, #64	@ 0x40
 80088c0:	d1ed      	bne.n	800889e <HAL_JPEG_GetInfo+0x7a>
    tableAddress ++;
  }

  return (quality / 64UL);
 80088c2:	099b      	lsrs	r3, r3, #6
  return HAL_OK;
 80088c4:	2000      	movs	r0, #0
  pInfo->ImageQuality = JPEG_GetQuality(hjpeg);
 80088c6:	610b      	str	r3, [r1, #16]
}
 80088c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088cc:	2310      	movs	r3, #16
 80088ce:	e7bf      	b.n	8008850 <HAL_JPEG_GetInfo+0x2c>
    else if ((yblockNb == 0UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80088d0:	2d03      	cmp	r5, #3
 80088d2:	d106      	bne.n	80088e2 <HAL_JPEG_GetInfo+0xbe>
    else if ((yblockNb == 3UL) && (cBblockNb == 0UL) && (cRblockNb == 0UL))
 80088d4:	4313      	orrs	r3, r2
 80088d6:	f013 0f0f 	tst.w	r3, #15
 80088da:	bf0c      	ite	eq
 80088dc:	2301      	moveq	r3, #1
 80088de:	2300      	movne	r3, #0
 80088e0:	e7d3      	b.n	800888a <HAL_JPEG_GetInfo+0x66>
 80088e2:	2300      	movs	r3, #0
 80088e4:	e7d1      	b.n	800888a <HAL_JPEG_GetInfo+0x66>
        scale = (quantVal * 100UL) / ((uint32_t) hjpeg->QuantTable0[JPEG_ZIGZAG_ORDER[i + j]]);
 80088e6:	fb0e fb02 	mul.w	fp, lr, r2
 80088ea:	f897 a000 	ldrb.w	sl, [r7]
 80088ee:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80088f0:	f812 a00a 	ldrb.w	sl, [r2, sl]
 80088f4:	fbbb f2fa 	udiv	r2, fp, sl
        if (scale <= 100UL)
 80088f8:	2a64      	cmp	r2, #100	@ 0x64
          quality += 5000UL / scale;
 80088fa:	bf8b      	itete	hi
 80088fc:	fbb8 f2f2 	udivhi	r2, r8, r2
          quality += (200UL - scale) / 2UL;
 8008900:	f1c2 02c8 	rsbls	r2, r2, #200	@ 0xc8
          quality += 5000UL / scale;
 8008904:	189b      	addhi	r3, r3, r2
          quality += (200UL - scale) / 2UL;
 8008906:	eb03 0352 	addls.w	r3, r3, r2, lsr #1
          quality += 5000UL / scale;
 800890a:	e7d3      	b.n	80088b4 <HAL_JPEG_GetInfo+0x90>
    return HAL_ERROR;
 800890c:	2001      	movs	r0, #1
 800890e:	e7db      	b.n	80088c8 <HAL_JPEG_GetInfo+0xa4>
 8008910:	08024e84 	.word	0x08024e84

08008914 <HAL_JPEG_Decode_DMA>:
{
 8008914:	b538      	push	{r3, r4, r5, lr}
  if ((hjpeg == NULL) || (pDataIn == NULL) || (pDataOutMCU == NULL))
 8008916:	4604      	mov	r4, r0
 8008918:	b348      	cbz	r0, 800896e <HAL_JPEG_Decode_DMA+0x5a>
 800891a:	b341      	cbz	r1, 800896e <HAL_JPEG_Decode_DMA+0x5a>
 800891c:	b33b      	cbz	r3, 800896e <HAL_JPEG_Decode_DMA+0x5a>
  __HAL_LOCK(hjpeg);
 800891e:	f890 504c 	ldrb.w	r5, [r0, #76]	@ 0x4c
 8008922:	2d01      	cmp	r5, #1
 8008924:	d028      	beq.n	8008978 <HAL_JPEG_Decode_DMA+0x64>
 8008926:	2501      	movs	r5, #1
 8008928:	f880 504c 	strb.w	r5, [r0, #76]	@ 0x4c
  if (hjpeg->State == HAL_JPEG_STATE_READY)
 800892c:	f890 504d 	ldrb.w	r5, [r0, #77]	@ 0x4d
 8008930:	2d01      	cmp	r5, #1
 8008932:	d11e      	bne.n	8008972 <HAL_JPEG_Decode_DMA+0x5e>
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008934:	2504      	movs	r5, #4
    hjpeg->InDataLength = InDataLength;
 8008936:	6282      	str	r2, [r0, #40]	@ 0x28
    hjpeg->State = HAL_JPEG_STATE_BUSY_DECODING;
 8008938:	f880 504d 	strb.w	r5, [r0, #77]	@ 0x4d
    hjpeg->Context &= ~(JPEG_CONTEXT_OPERATION_MASK | JPEG_CONTEXT_METHOD_MASK);
 800893c:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 800893e:	f025 050f 	bic.w	r5, r5, #15
 8008942:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 8008944:	6d45      	ldr	r5, [r0, #84]	@ 0x54
 8008946:	f045 050e 	orr.w	r5, r5, #14
    hjpeg->pJpegOutBuffPtr = pDataOutMCU;
 800894a:	e9c0 1306 	strd	r1, r3, [r0, #24]
    hjpeg->Context |= (JPEG_CONTEXT_DECODE | JPEG_CONTEXT_DMA);
 800894e:	6545      	str	r5, [r0, #84]	@ 0x54
    hjpeg->JpegInCount = 0;
 8008950:	2500      	movs	r5, #0
    hjpeg->OutDataLength = OutDataLength;
 8008952:	9b04      	ldr	r3, [sp, #16]
    hjpeg->JpegInCount = 0;
 8008954:	6205      	str	r5, [r0, #32]
    hjpeg->OutDataLength = OutDataLength;
 8008956:	62c3      	str	r3, [r0, #44]	@ 0x2c
    hjpeg->JpegOutCount = 0;
 8008958:	6245      	str	r5, [r0, #36]	@ 0x24
    JPEG_Init_Process(hjpeg);
 800895a:	f7ff fdab 	bl	80084b4 <JPEG_Init_Process>
    if (JPEG_DMA_StartProcess(hjpeg) != HAL_OK)
 800895e:	f7ff fde5 	bl	800852c <JPEG_DMA_StartProcess>
 8008962:	b128      	cbz	r0, 8008970 <HAL_JPEG_Decode_DMA+0x5c>
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008964:	2306      	movs	r3, #6
      __HAL_UNLOCK(hjpeg);
 8008966:	f884 504c 	strb.w	r5, [r4, #76]	@ 0x4c
      hjpeg->State = HAL_JPEG_STATE_ERROR;
 800896a:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 800896e:	2001      	movs	r0, #1
}
 8008970:	bd38      	pop	{r3, r4, r5, pc}
    __HAL_UNLOCK(hjpeg);
 8008972:	2300      	movs	r3, #0
 8008974:	f880 304c 	strb.w	r3, [r0, #76]	@ 0x4c
  __HAL_LOCK(hjpeg);
 8008978:	2002      	movs	r0, #2
 800897a:	e7f9      	b.n	8008970 <HAL_JPEG_Decode_DMA+0x5c>

0800897c <HAL_JPEG_Pause>:
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 800897c:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800897e:	f003 030c 	and.w	r3, r3, #12
 8008982:	2b0c      	cmp	r3, #12
 8008984:	d10d      	bne.n	80089a2 <HAL_JPEG_Pause+0x26>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008986:	07cb      	lsls	r3, r1, #31
 8008988:	d503      	bpl.n	8008992 <HAL_JPEG_Pause+0x16>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 800898a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800898c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008990:	6543      	str	r3, [r0, #84]	@ 0x54
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008992:	0789      	lsls	r1, r1, #30
 8008994:	d503      	bpl.n	800899e <HAL_JPEG_Pause+0x22>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 8008996:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008998:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800899c:	6543      	str	r3, [r0, #84]	@ 0x54
}
 800899e:	2000      	movs	r0, #0
 80089a0:	4770      	bx	lr
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 80089a2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80089a4:	f003 030c 	and.w	r3, r3, #12
 80089a8:	2b08      	cmp	r3, #8
 80089aa:	d1f8      	bne.n	800899e <HAL_JPEG_Pause+0x22>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 80089ac:	f011 0301 	ands.w	r3, r1, #1
 80089b0:	d004      	beq.n	80089bc <HAL_JPEG_Pause+0x40>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_INPUT;
 80089b2:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 80089b4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80089b8:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 80089ba:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 80089bc:	078a      	lsls	r2, r1, #30
 80089be:	d505      	bpl.n	80089cc <HAL_JPEG_Pause+0x50>
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80089c0:	6d42      	ldr	r2, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 80089c2:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context |= JPEG_CONTEXT_PAUSE_OUTPUT;
 80089c6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80089ca:	6542      	str	r2, [r0, #84]	@ 0x54
    __HAL_JPEG_DISABLE_IT(hjpeg, mask);
 80089cc:	6801      	ldr	r1, [r0, #0]
 80089ce:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 80089d0:	ea22 0303 	bic.w	r3, r2, r3
 80089d4:	630b      	str	r3, [r1, #48]	@ 0x30
 80089d6:	e7e2      	b.n	800899e <HAL_JPEG_Pause+0x22>

080089d8 <HAL_JPEG_ConfigInputBuffer>:
  hjpeg->pJpegInBuffPtr =  pNewInputBuffer;
 80089d8:	6181      	str	r1, [r0, #24]
  hjpeg->InDataLength = InDataLength;
 80089da:	6282      	str	r2, [r0, #40]	@ 0x28
}
 80089dc:	4770      	bx	lr

080089de <HAL_JPEG_ConfigOutputBuffer>:
  hjpeg->pJpegOutBuffPtr = pNewOutputBuffer;
 80089de:	61c1      	str	r1, [r0, #28]
  hjpeg->OutDataLength = OutDataLength;
 80089e0:	62c2      	str	r2, [r0, #44]	@ 0x2c
}
 80089e2:	4770      	bx	lr

080089e4 <HAL_JPEG_EncodeCpltCallback>:
__weak void HAL_JPEG_EncodeCpltCallback(JPEG_HandleTypeDef *hjpeg)
 80089e4:	4770      	bx	lr

080089e6 <JPEG_MDMAErrorCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 80089e6:	6c00      	ldr	r0, [r0, #64]	@ 0x40
{
 80089e8:	b508      	push	{r3, lr}
  hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 80089ea:	6803      	ldr	r3, [r0, #0]
 80089ec:	681a      	ldr	r2, [r3, #0]
 80089ee:	f022 0201 	bic.w	r2, r2, #1
 80089f2:	601a      	str	r2, [r3, #0]
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80089f4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80089f6:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80089fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hjpeg->State = HAL_JPEG_STATE_READY;
 80089fc:	2301      	movs	r3, #1
 80089fe:	f880 304d 	strb.w	r3, [r0, #77]	@ 0x4d
  hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008a02:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 8008a04:	f043 0304 	orr.w	r3, r3, #4
 8008a08:	6503      	str	r3, [r0, #80]	@ 0x50
  HAL_JPEG_ErrorCallback(hjpeg);
 8008a0a:	f7fa f859 	bl	8002ac0 <HAL_JPEG_ErrorCallback>
}
 8008a0e:	bd08      	pop	{r3, pc}

08008a10 <JPEG_ReadInputData>:
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008a10:	6a82      	ldr	r2, [r0, #40]	@ 0x28
{
 8008a12:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a14:	4604      	mov	r4, r0
 8008a16:	460d      	mov	r5, r1
  if ((hjpeg->InDataLength == 0UL) || (nbRequestWords == 0UL))
 8008a18:	b922      	cbnz	r2, 8008a24 <JPEG_ReadInputData+0x14>
    (void) HAL_JPEG_Pause(hjpeg, JPEG_PAUSE_RESUME_INPUT);
 8008a1a:	2101      	movs	r1, #1
 8008a1c:	f7ff ffae 	bl	800897c <HAL_JPEG_Pause>
  uint32_t nb_bytes = 0;
 8008a20:	2200      	movs	r2, #0
 8008a22:	e004      	b.n	8008a2e <JPEG_ReadInputData+0x1e>
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008a24:	6a03      	ldr	r3, [r0, #32]
 8008a26:	429a      	cmp	r2, r3
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008a28:	6a03      	ldr	r3, [r0, #32]
  else if (hjpeg->InDataLength > hjpeg->JpegInCount)
 8008a2a:	d924      	bls.n	8008a76 <JPEG_ReadInputData+0x66>
    nb_bytes = hjpeg->InDataLength - hjpeg->JpegInCount;
 8008a2c:	1ad2      	subs	r2, r2, r3
  if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (nb_bytes > 0UL))
 8008a2e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008a30:	f413 5380 	ands.w	r3, r3, #4096	@ 0x1000
 8008a34:	d11e      	bne.n	8008a74 <JPEG_ReadInputData+0x64>
 8008a36:	b1ea      	cbz	r2, 8008a74 <JPEG_ReadInputData+0x64>
    if (nb_words >= nbRequestWords)
 8008a38:	ebb5 0f92 	cmp.w	r5, r2, lsr #2
 8008a3c:	69a1      	ldr	r1, [r4, #24]
    nb_words = nb_bytes / 4UL;
 8008a3e:	ea4f 0692 	mov.w	r6, r2, lsr #2
    if (nb_words >= nbRequestWords)
 8008a42:	d827      	bhi.n	8008a94 <JPEG_ReadInputData+0x84>
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008a44:	6827      	ldr	r7, [r4, #0]
        input_count = hjpeg->JpegInCount;
 8008a46:	6a26      	ldr	r6, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008a48:	3301      	adds	r3, #1
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a4a:	1988      	adds	r0, r1, r6
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008a4c:	5d8e      	ldrb	r6, [r1, r6]
      for (index = 0; index < nbRequestWords; index++)
 8008a4e:	429d      	cmp	r5, r3
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a50:	7882      	ldrb	r2, [r0, #2]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a52:	f890 c001 	ldrb.w	ip, [r0, #1]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a56:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008a5a:	78c0      	ldrb	r0, [r0, #3]
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a5c:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008a60:	ea42 0206 	orr.w	r2, r2, r6
                                (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008a64:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
        hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008a68:	643a      	str	r2, [r7, #64]	@ 0x40
        hjpeg->JpegInCount += 4UL;
 8008a6a:	6a22      	ldr	r2, [r4, #32]
 8008a6c:	f102 0204 	add.w	r2, r2, #4
 8008a70:	6222      	str	r2, [r4, #32]
      for (index = 0; index < nbRequestWords; index++)
 8008a72:	d1e8      	bne.n	8008a46 <JPEG_ReadInputData+0x36>
}
 8008a74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->InDataLength == hjpeg->JpegInCount)
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d1d2      	bne.n	8008a20 <JPEG_ReadInputData+0x10>
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008a7a:	6a01      	ldr	r1, [r0, #32]
 8008a7c:	f7f9 ffb2 	bl	80029e4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength > 4UL)
 8008a80:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008a82:	2b04      	cmp	r3, #4
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % 4UL);
 8008a84:	bf84      	itt	hi
 8008a86:	f023 0303 	bichi.w	r3, r3, #3
 8008a8a:	62a3      	strhi	r3, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008a8c:	2300      	movs	r3, #0
    nb_bytes = hjpeg->InDataLength;
 8008a8e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
    hjpeg->JpegInCount = 0;
 8008a90:	6223      	str	r3, [r4, #32]
    nb_bytes = hjpeg->InDataLength;
 8008a92:	e7cc      	b.n	8008a2e <JPEG_ReadInputData+0x1e>
      if (nb_words > 0UL)
 8008a94:	2a03      	cmp	r2, #3
 8008a96:	d918      	bls.n	8008aca <JPEG_ReadInputData+0xba>
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008a98:	6827      	ldr	r7, [r4, #0]
          input_count = hjpeg->JpegInCount;
 8008a9a:	6a25      	ldr	r5, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008a9c:	3301      	adds	r3, #1
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008a9e:	1948      	adds	r0, r1, r5
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008aa0:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_words; index++)
 8008aa2:	429e      	cmp	r6, r3
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008aa4:	7882      	ldrb	r2, [r0, #2]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008aa6:	f890 c001 	ldrb.w	ip, [r0, #1]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008aaa:	ea4f 4202 	mov.w	r2, r2, lsl #16
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 3UL])) << 24));
 8008aae:	78c0      	ldrb	r0, [r0, #3]
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 1UL])) << 8) | \
 8008ab0:	ea42 220c 	orr.w	r2, r2, ip, lsl #8
 8008ab4:	ea42 0205 	orr.w	r2, r2, r5
                                  (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count + 2UL])) << 16) | \
 8008ab8:	ea42 6200 	orr.w	r2, r2, r0, lsl #24
          hjpeg->Instance->DIR = (((uint32_t)(hjpeg->pJpegInBuffPtr[input_count])) | \
 8008abc:	643a      	str	r2, [r7, #64]	@ 0x40
          hjpeg->JpegInCount += 4UL;
 8008abe:	6a22      	ldr	r2, [r4, #32]
 8008ac0:	f102 0204 	add.w	r2, r2, #4
 8008ac4:	6222      	str	r2, [r4, #32]
        for (index = 0; index < nb_words; index++)
 8008ac6:	d1e8      	bne.n	8008a9a <JPEG_ReadInputData+0x8a>
 8008ac8:	e7d4      	b.n	8008a74 <JPEG_ReadInputData+0x64>
        for (index = 0; index < nb_bytes; index++)
 8008aca:	4618      	mov	r0, r3
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008acc:	6a25      	ldr	r5, [r4, #32]
 8008ace:	00c6      	lsls	r6, r0, #3
        for (index = 0; index < nb_bytes; index++)
 8008ad0:	3001      	adds	r0, #1
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008ad2:	5d4d      	ldrb	r5, [r1, r5]
        for (index = 0; index < nb_bytes; index++)
 8008ad4:	4282      	cmp	r2, r0
          dataword |= (uint32_t)hjpeg->pJpegInBuffPtr[hjpeg->JpegInCount] << (8UL * (index & 0x03UL));
 8008ad6:	fa05 f506 	lsl.w	r5, r5, r6
 8008ada:	ea43 0305 	orr.w	r3, r3, r5
          hjpeg->JpegInCount++;
 8008ade:	6a25      	ldr	r5, [r4, #32]
 8008ae0:	f105 0501 	add.w	r5, r5, #1
 8008ae4:	6225      	str	r5, [r4, #32]
        for (index = 0; index < nb_bytes; index++)
 8008ae6:	d1f1      	bne.n	8008acc <JPEG_ReadInputData+0xbc>
        hjpeg->Instance->DIR = dataword;
 8008ae8:	6822      	ldr	r2, [r4, #0]
 8008aea:	6413      	str	r3, [r2, #64]	@ 0x40
}
 8008aec:	e7c2      	b.n	8008a74 <JPEG_ReadInputData+0x64>

08008aee <JPEG_MDMAInCpltCallback>:
{
 8008aee:	b537      	push	{r0, r1, r2, r4, r5, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008af0:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008af2:	6822      	ldr	r2, [r4, #0]
 8008af4:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008af6:	f023 037e 	bic.w	r3, r3, #126	@ 0x7e
 8008afa:	6313      	str	r3, [r2, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) == JPEG_CONTEXT_DMA)
 8008afc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008afe:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8008b02:	f023 0373 	bic.w	r3, r3, #115	@ 0x73
 8008b06:	041b      	lsls	r3, r3, #16
 8008b08:	0c1b      	lsrs	r3, r3, #16
 8008b0a:	2b0c      	cmp	r3, #12
 8008b0c:	d11a      	bne.n	8008b44 <JPEG_MDMAInCpltCallback+0x56>
    inXfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008b0e:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8008b10:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008b12:	6803      	ldr	r3, [r0, #0]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008b14:	4620      	mov	r0, r4
    hjpeg->JpegInCount = hjpeg->InDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b1a:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008b1e:	1a9b      	subs	r3, r3, r2
 8008b20:	6223      	str	r3, [r4, #32]
    HAL_JPEG_GetDataCallback(hjpeg, hjpeg->JpegInCount);
 8008b22:	6a21      	ldr	r1, [r4, #32]
 8008b24:	f7f9 ff5e 	bl	80029e4 <HAL_JPEG_GetDataCallback>
    if (hjpeg->InDataLength >= inXfrSize)
 8008b28:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b2a:	42ab      	cmp	r3, r5
 8008b2c:	d327      	bcc.n	8008b7e <JPEG_MDMAInCpltCallback+0x90>
      if (inXfrSize == 0UL)
 8008b2e:	b95d      	cbnz	r5, 8008b48 <JPEG_MDMAInCpltCallback+0x5a>
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008b30:	6d23      	ldr	r3, [r4, #80]	@ 0x50
        HAL_JPEG_ErrorCallback(hjpeg);
 8008b32:	4620      	mov	r0, r4
        hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008b34:	f043 0304 	orr.w	r3, r3, #4
 8008b38:	6523      	str	r3, [r4, #80]	@ 0x50
        hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008b3a:	2306      	movs	r3, #6
 8008b3c:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
        HAL_JPEG_ErrorCallback(hjpeg);
 8008b40:	f7f9 ffbe 	bl	8002ac0 <HAL_JPEG_ErrorCallback>
}
 8008b44:	b003      	add	sp, #12
 8008b46:	bd30      	pop	{r4, r5, pc}
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % inXfrSize);
 8008b48:	fbb3 f2f5 	udiv	r2, r3, r5
 8008b4c:	fb05 3212 	mls	r2, r5, r2, r3
 8008b50:	1a9b      	subs	r3, r3, r2
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008b52:	62a3      	str	r3, [r4, #40]	@ 0x28
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008b54:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008b56:	6822      	ldr	r2, [r4, #0]
    if (((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL) && (hjpeg->InDataLength > 0UL))
 8008b58:	04db      	lsls	r3, r3, #19
 8008b5a:	d40a      	bmi.n	8008b72 <JPEG_MDMAInCpltCallback+0x84>
 8008b5c:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008b5e:	b143      	cbz	r3, 8008b72 <JPEG_MDMAInCpltCallback+0x84>
      if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008b60:	2101      	movs	r1, #1
 8008b62:	3240      	adds	r2, #64	@ 0x40
 8008b64:	9100      	str	r1, [sp, #0]
 8008b66:	69a1      	ldr	r1, [r4, #24]
 8008b68:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8008b6a:	f000 fd3a 	bl	80095e2 <HAL_MDMA_Start_IT>
 8008b6e:	2800      	cmp	r0, #0
 8008b70:	d1de      	bne.n	8008b30 <JPEG_MDMAInCpltCallback+0x42>
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 8008b72:	6822      	ldr	r2, [r4, #0]
 8008b74:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8008b76:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8008b7a:	6313      	str	r3, [r2, #48]	@ 0x30
 8008b7c:	e7e2      	b.n	8008b44 <JPEG_MDMAInCpltCallback+0x56>
    else if (hjpeg->InDataLength > 0UL)
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d0e8      	beq.n	8008b54 <JPEG_MDMAInCpltCallback+0x66>
      if ((hjpeg->InDataLength % 4UL) != 0UL)
 8008b82:	079a      	lsls	r2, r3, #30
 8008b84:	d0e6      	beq.n	8008b54 <JPEG_MDMAInCpltCallback+0x66>
        hjpeg->InDataLength = ((hjpeg->InDataLength / 4UL) + 1UL) * 4UL;
 8008b86:	f023 0303 	bic.w	r3, r3, #3
 8008b8a:	3304      	adds	r3, #4
 8008b8c:	e7e1      	b.n	8008b52 <JPEG_MDMAInCpltCallback+0x64>

08008b8e <JPEG_StoreOutputData>:
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008b8e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
{
 8008b90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008b92:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8008b96:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
{
 8008b98:	4604      	mov	r4, r0
  if (hjpeg->OutDataLength >= (hjpeg->JpegOutCount + (nbOutputWords * 4UL)))
 8008b9a:	4293      	cmp	r3, r2
 8008b9c:	d32a      	bcc.n	8008bf4 <JPEG_StoreOutputData+0x66>
    for (index = 0; index < nbOutputWords; index++)
 8008b9e:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008ba0:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nbOutputWords; index++)
 8008ba2:	3201      	adds	r2, #1
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008ba4:	69e5      	ldr	r5, [r4, #28]
      dataword = hjpeg->Instance->DOR;
 8008ba6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    for (index = 0; index < nbOutputWords; index++)
 8008ba8:	4291      	cmp	r1, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008baa:	6a60      	ldr	r0, [r4, #36]	@ 0x24
 8008bac:	542b      	strb	r3, [r5, r0]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008bae:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008bb0:	69e0      	ldr	r0, [r4, #28]
 8008bb2:	4428      	add	r0, r5
 8008bb4:	ea4f 2513 	mov.w	r5, r3, lsr #8
 8008bb8:	7045      	strb	r5, [r0, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008bba:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008bbc:	69e0      	ldr	r0, [r4, #28]
 8008bbe:	4428      	add	r0, r5
 8008bc0:	ea4f 4513 	mov.w	r5, r3, lsr #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008bc4:	ea4f 6313 	mov.w	r3, r3, lsr #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008bc8:	7085      	strb	r5, [r0, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008bca:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008bcc:	69e0      	ldr	r0, [r4, #28]
 8008bce:	4428      	add	r0, r5
 8008bd0:	70c3      	strb	r3, [r0, #3]
      hjpeg->JpegOutCount += 4UL;
 8008bd2:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bd4:	f103 0304 	add.w	r3, r3, #4
 8008bd8:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nbOutputWords; index++)
 8008bda:	d1e1      	bne.n	8008ba0 <JPEG_StoreOutputData+0x12>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008bdc:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008bde:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 8008be0:	429a      	cmp	r2, r3
 8008be2:	d106      	bne.n	8008bf2 <JPEG_StoreOutputData+0x64>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008be4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008be6:	69e1      	ldr	r1, [r4, #28]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008be8:	4620      	mov	r0, r4
 8008bea:	f7f9 ff19 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008bee:	2300      	movs	r3, #0
 8008bf0:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8008bf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  else if (hjpeg->OutDataLength > hjpeg->JpegOutCount)
 8008bf4:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008bf6:	4293      	cmp	r3, r2
 8008bf8:	d9fb      	bls.n	8008bf2 <JPEG_StoreOutputData+0x64>
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008bfa:	6a42      	ldr	r2, [r0, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008bfc:	2000      	movs	r0, #0
    nb_words = (hjpeg->OutDataLength - hjpeg->JpegOutCount) / 4UL;
 8008bfe:	1a9b      	subs	r3, r3, r2
 8008c00:	089a      	lsrs	r2, r3, #2
    for (index = 0; index < nb_words; index++)
 8008c02:	4290      	cmp	r0, r2
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008c04:	69e1      	ldr	r1, [r4, #28]
    for (index = 0; index < nb_words; index++)
 8008c06:	d105      	bne.n	8008c14 <JPEG_StoreOutputData+0x86>
    if (hjpeg->OutDataLength == hjpeg->JpegOutCount)
 8008c08:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8008c0a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c0c:	429f      	cmp	r7, r3
 8008c0e:	d119      	bne.n	8008c44 <JPEG_StoreOutputData+0xb6>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008c10:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c12:	e7e9      	b.n	8008be8 <JPEG_StoreOutputData+0x5a>
      dataword = hjpeg->Instance->DOR;
 8008c14:	6823      	ldr	r3, [r4, #0]
    for (index = 0; index < nb_words; index++)
 8008c16:	3001      	adds	r0, #1
      dataword = hjpeg->Instance->DOR;
 8008c18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataword & 0x000000FFUL);
 8008c1a:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008c1c:	554b      	strb	r3, [r1, r5]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataword & 0x0000FF00UL) >> 8);
 8008c1e:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008c20:	69e1      	ldr	r1, [r4, #28]
 8008c22:	4429      	add	r1, r5
 8008c24:	0a1d      	lsrs	r5, r3, #8
 8008c26:	704d      	strb	r5, [r1, #1]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008c28:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008c2a:	69e1      	ldr	r1, [r4, #28]
 8008c2c:	4429      	add	r1, r5
 8008c2e:	0c1d      	lsrs	r5, r3, #16
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008c30:	0e1b      	lsrs	r3, r3, #24
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataword & 0x00FF0000UL) >> 16);
 8008c32:	708d      	strb	r5, [r1, #2]
      hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataword & 0xFF000000UL) >> 24);
 8008c34:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8008c36:	69e1      	ldr	r1, [r4, #28]
 8008c38:	4429      	add	r1, r5
 8008c3a:	70cb      	strb	r3, [r1, #3]
      hjpeg->JpegOutCount += 4UL;
 8008c3c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c3e:	3304      	adds	r3, #4
 8008c40:	6263      	str	r3, [r4, #36]	@ 0x24
    for (index = 0; index < nb_words; index++)
 8008c42:	e7de      	b.n	8008c02 <JPEG_StoreOutputData+0x74>
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008c44:	6a65      	ldr	r5, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008c46:	2200      	movs	r2, #0
      dataword = hjpeg->Instance->DOR;
 8008c48:	6823      	ldr	r3, [r4, #0]
      nb_bytes = hjpeg->OutDataLength - hjpeg->JpegOutCount;
 8008c4a:	1b78      	subs	r0, r7, r5
      dataword = hjpeg->Instance->DOR;
 8008c4c:	6c5e      	ldr	r6, [r3, #68]	@ 0x44
      for (index = 0; index < nb_bytes; index++)
 8008c4e:	4282      	cmp	r2, r0
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008c50:	69e1      	ldr	r1, [r4, #28]
      for (index = 0; index < nb_bytes; index++)
 8008c52:	d114      	bne.n	8008c7e <JPEG_StoreOutputData+0xf0>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008c54:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c56:	4620      	mov	r0, r4
 8008c58:	f7f9 fee2 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008c5c:	2300      	movs	r3, #0
 8008c5e:	6263      	str	r3, [r4, #36]	@ 0x24
      nb_bytes = 4UL - nb_bytes;
 8008c60:	1d2b      	adds	r3, r5, #4
 8008c62:	1bdb      	subs	r3, r3, r7
      for (index = nb_bytes; index < 4UL; index++)
 8008c64:	2b03      	cmp	r3, #3
 8008c66:	d8c4      	bhi.n	8008bf2 <JPEG_StoreOutputData+0x64>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008c68:	00da      	lsls	r2, r3, #3
 8008c6a:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008c6c:	69e0      	ldr	r0, [r4, #28]
      for (index = nb_bytes; index < 4UL; index++)
 8008c6e:	3301      	adds	r3, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * index)) & 0xFFUL);
 8008c70:	fa26 f202 	lsr.w	r2, r6, r2
 8008c74:	5442      	strb	r2, [r0, r1]
        hjpeg->JpegOutCount++;
 8008c76:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008c78:	3201      	adds	r2, #1
 8008c7a:	6262      	str	r2, [r4, #36]	@ 0x24
      for (index = nb_bytes; index < 4UL; index++)
 8008c7c:	e7f2      	b.n	8008c64 <JPEG_StoreOutputData+0xd6>
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008c7e:	f002 0303 	and.w	r3, r2, #3
 8008c82:	f8d4 c024 	ldr.w	ip, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008c86:	3201      	adds	r2, #1
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)((dataword >> (8UL * (index & 0x3UL))) & 0xFFUL);
 8008c88:	00db      	lsls	r3, r3, #3
 8008c8a:	fa26 f303 	lsr.w	r3, r6, r3
 8008c8e:	f801 300c 	strb.w	r3, [r1, ip]
        hjpeg->JpegOutCount++;
 8008c92:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008c94:	3301      	adds	r3, #1
 8008c96:	6263      	str	r3, [r4, #36]	@ 0x24
      for (index = 0; index < nb_bytes; index++)
 8008c98:	e7d9      	b.n	8008c4e <JPEG_StoreOutputData+0xc0>

08008c9a <JPEG_Process>:
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008c9a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008c9c:	f003 0303 	and.w	r3, r3, #3
 8008ca0:	2b02      	cmp	r3, #2
{
 8008ca2:	b510      	push	{r4, lr}
 8008ca4:	4604      	mov	r4, r0
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008ca6:	d114      	bne.n	8008cd2 <JPEG_Process+0x38>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 8008ca8:	6803      	ldr	r3, [r0, #0]
 8008caa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008cac:	065b      	lsls	r3, r3, #25
 8008cae:	d510      	bpl.n	8008cd2 <JPEG_Process+0x38>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8008cb0:	1d01      	adds	r1, r0, #4
 8008cb2:	f7ff fdb7 	bl	8008824 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 8008cb6:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008cb8:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 8008cba:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8008cbc:	f7f9 fe5c 	bl	8002978 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8008cc0:	6823      	ldr	r3, [r4, #0]
 8008cc2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008cc4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8008cc8:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 8008cca:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008ccc:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8008cd0:	639a      	str	r2, [r3, #56]	@ 0x38
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_INPUT) == 0UL)
 8008cd2:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008cd4:	04d9      	lsls	r1, r3, #19
 8008cd6:	d407      	bmi.n	8008ce8 <JPEG_Process+0x4e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFTF) != 0UL)
 8008cd8:	6823      	ldr	r3, [r4, #0]
 8008cda:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cdc:	0792      	lsls	r2, r2, #30
 8008cde:	d544      	bpl.n	8008d6a <JPEG_Process+0xd0>
      JPEG_ReadInputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008ce0:	2108      	movs	r1, #8
      JPEG_ReadInputData(hjpeg, 1);
 8008ce2:	4620      	mov	r0, r4
 8008ce4:	f7ff fe94 	bl	8008a10 <JPEG_ReadInputData>
  if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008ce8:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008cea:	0499      	lsls	r1, r3, #18
 8008cec:	d407      	bmi.n	8008cfe <JPEG_Process+0x64>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFTF) != 0UL)
 8008cee:	6823      	ldr	r3, [r4, #0]
 8008cf0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008cf2:	0712      	lsls	r2, r2, #28
 8008cf4:	d53e      	bpl.n	8008d74 <JPEG_Process+0xda>
      JPEG_StoreOutputData(hjpeg, JPEG_FIFO_TH_SIZE);
 8008cf6:	2108      	movs	r1, #8
      JPEG_StoreOutputData(hjpeg, 1);
 8008cf8:	4620      	mov	r0, r4
 8008cfa:	f7ff ff48 	bl	8008b8e <JPEG_StoreOutputData>
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF | JPEG_FLAG_OFTF | JPEG_FLAG_OFNEF) == JPEG_FLAG_EOCF)
 8008cfe:	6823      	ldr	r3, [r4, #0]
 8008d00:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d02:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 8008d06:	2a20      	cmp	r2, #32
 8008d08:	d13c      	bne.n	8008d84 <JPEG_Process+0xea>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008d0a:	681a      	ldr	r2, [r3, #0]
 8008d0c:	f022 0201 	bic.w	r2, r2, #1
 8008d10:	601a      	str	r2, [r3, #0]
    if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008d12:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008d14:	f002 020c 	and.w	r2, r2, #12
 8008d18:	2a08      	cmp	r2, #8
 8008d1a:	d103      	bne.n	8008d24 <JPEG_Process+0x8a>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008d1c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008d1e:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008d22:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 8008d24:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008d26:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 8008d2a:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->JpegOutCount > 0UL)
 8008d2c:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008d2e:	b133      	cbz	r3, 8008d3e <JPEG_Process+0xa4>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008d30:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008d32:	4620      	mov	r0, r4
 8008d34:	69e1      	ldr	r1, [r4, #28]
 8008d36:	f7f9 fe73 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008d3a:	2300      	movs	r3, #0
 8008d3c:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008d3e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008d40:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d42:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d44:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d48:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d4c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008d4e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008d50:	f04f 0200 	mov.w	r2, #0
 8008d54:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008d58:	f04f 0201 	mov.w	r2, #1
 8008d5c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008d60:	d10d      	bne.n	8008d7e <JPEG_Process+0xe4>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008d62:	f7f9 feaf 	bl	8002ac4 <HAL_JPEG_DecodeCpltCallback>
    return JPEG_PROCESS_DONE;
 8008d66:	2001      	movs	r0, #1
}
 8008d68:	bd10      	pop	{r4, pc}
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_IFNFF) != 0UL)
 8008d6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d6c:	0758      	lsls	r0, r3, #29
 8008d6e:	d5bb      	bpl.n	8008ce8 <JPEG_Process+0x4e>
      JPEG_ReadInputData(hjpeg, 1);
 8008d70:	2101      	movs	r1, #1
 8008d72:	e7b6      	b.n	8008ce2 <JPEG_Process+0x48>
    else if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008d74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008d76:	06db      	lsls	r3, r3, #27
 8008d78:	d5c1      	bpl.n	8008cfe <JPEG_Process+0x64>
      JPEG_StoreOutputData(hjpeg, 1);
 8008d7a:	2101      	movs	r1, #1
 8008d7c:	e7bc      	b.n	8008cf8 <JPEG_Process+0x5e>
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008d7e:	f7ff fe31 	bl	80089e4 <HAL_JPEG_EncodeCpltCallback>
 8008d82:	e7f0      	b.n	8008d66 <JPEG_Process+0xcc>
  return JPEG_PROCESS_ONGOING;
 8008d84:	2000      	movs	r0, #0
 8008d86:	e7ef      	b.n	8008d68 <JPEG_Process+0xce>

08008d88 <JPEG_DMA_PollResidualData>:
{
 8008d88:	b570      	push	{r4, r5, r6, lr}
 8008d8a:	4604      	mov	r4, r0
 8008d8c:	2610      	movs	r6, #16
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008d8e:	6d65      	ldr	r5, [r4, #84]	@ 0x54
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008d90:	6823      	ldr	r3, [r4, #0]
    if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008d92:	f415 5500 	ands.w	r5, r5, #8192	@ 0x2000
 8008d96:	d122      	bne.n	8008dde <JPEG_DMA_PollResidualData+0x56>
      if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) != 0UL)
 8008d98:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008d9a:	06d0      	lsls	r0, r2, #27
 8008d9c:	d51f      	bpl.n	8008dde <JPEG_DMA_PollResidualData+0x56>
        dataOut = hjpeg->Instance->DOR;
 8008d9e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount] = (uint8_t)(dataOut & 0x000000FFUL);
 8008da0:	69e1      	ldr	r1, [r4, #28]
 8008da2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008da4:	548b      	strb	r3, [r1, r2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 1UL] = (uint8_t)((dataOut & 0x0000FF00UL) >> 8);
 8008da6:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008da8:	69e2      	ldr	r2, [r4, #28]
 8008daa:	440a      	add	r2, r1
 8008dac:	0a19      	lsrs	r1, r3, #8
 8008dae:	7051      	strb	r1, [r2, #1]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008db0:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008db2:	69e2      	ldr	r2, [r4, #28]
 8008db4:	440a      	add	r2, r1
 8008db6:	0c19      	lsrs	r1, r3, #16
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008db8:	0e1b      	lsrs	r3, r3, #24
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 2UL] = (uint8_t)((dataOut & 0x00FF0000UL) >> 16);
 8008dba:	7091      	strb	r1, [r2, #2]
        hjpeg->pJpegOutBuffPtr[hjpeg->JpegOutCount + 3UL] = (uint8_t)((dataOut & 0xFF000000UL) >> 24);
 8008dbc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8008dbe:	69e2      	ldr	r2, [r4, #28]
 8008dc0:	440a      	add	r2, r1
 8008dc2:	70d3      	strb	r3, [r2, #3]
        hjpeg->JpegOutCount += 4UL;
 8008dc4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008dc6:	3304      	adds	r3, #4
 8008dc8:	6263      	str	r3, [r4, #36]	@ 0x24
        if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008dca:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008dcc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008dce:	429a      	cmp	r2, r3
 8008dd0:	d105      	bne.n	8008dde <JPEG_DMA_PollResidualData+0x56>
          HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008dd2:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008dd4:	4620      	mov	r0, r4
 8008dd6:	69e1      	ldr	r1, [r4, #28]
 8008dd8:	f7f9 fe22 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
          hjpeg->JpegOutCount = 0;
 8008ddc:	6265      	str	r5, [r4, #36]	@ 0x24
  for (count = JPEG_FIFO_SIZE; count > 0UL; count--)
 8008dde:	3e01      	subs	r6, #1
 8008de0:	d1d5      	bne.n	8008d8e <JPEG_DMA_PollResidualData+0x6>
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008de2:	6823      	ldr	r3, [r4, #0]
  tmpContext = hjpeg->Context;
 8008de4:	6d62      	ldr	r2, [r4, #84]	@ 0x54
  if ((__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL) || ((tmpContext & JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL))
 8008de6:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8008de8:	06c9      	lsls	r1, r1, #27
 8008dea:	d501      	bpl.n	8008df0 <JPEG_DMA_PollResidualData+0x68>
 8008dec:	0492      	lsls	r2, r2, #18
 8008dee:	d420      	bmi.n	8008e32 <JPEG_DMA_PollResidualData+0xaa>
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008df0:	681a      	ldr	r2, [r3, #0]
 8008df2:	f022 0201 	bic.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
    if (hjpeg->JpegOutCount > 0UL)
 8008df8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008dfa:	b133      	cbz	r3, 8008e0a <JPEG_DMA_PollResidualData+0x82>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008dfc:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008dfe:	4620      	mov	r0, r4
 8008e00:	69e1      	ldr	r1, [r4, #28]
 8008e02:	f7f9 fe0d 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008e06:	2300      	movs	r3, #0
 8008e08:	6263      	str	r3, [r4, #36]	@ 0x24
    tmpContext = hjpeg->Context;
 8008e0a:	6d63      	ldr	r3, [r4, #84]	@ 0x54
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008e0c:	4620      	mov	r0, r4
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008e0e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008e10:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008e14:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008e18:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008e1a:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008e1c:	f04f 0200 	mov.w	r2, #0
 8008e20:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008e24:	f04f 0201 	mov.w	r2, #1
 8008e28:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008e2c:	d102      	bne.n	8008e34 <JPEG_DMA_PollResidualData+0xac>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008e2e:	f7f9 fe49 	bl	8002ac4 <HAL_JPEG_DecodeCpltCallback>
}
 8008e32:	bd70      	pop	{r4, r5, r6, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008e34:	f7ff fdd6 	bl	80089e4 <HAL_JPEG_EncodeCpltCallback>
}
 8008e38:	e7fb      	b.n	8008e32 <JPEG_DMA_PollResidualData+0xaa>

08008e3a <HAL_JPEG_Resume>:
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008e3a:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e3c:	f413 5f40 	tst.w	r3, #12288	@ 0x3000
{
 8008e40:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008e42:	4604      	mov	r4, r0
 8008e44:	460d      	mov	r5, r1
  if ((hjpeg->Context & (JPEG_CONTEXT_PAUSE_INPUT | JPEG_CONTEXT_PAUSE_OUTPUT)) == 0UL)
 8008e46:	d014      	beq.n	8008e72 <HAL_JPEG_Resume+0x38>
  if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8008e48:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e4a:	f003 030c 	and.w	r3, r3, #12
 8008e4e:	2b0c      	cmp	r3, #12
 8008e50:	d146      	bne.n	8008ee0 <HAL_JPEG_Resume+0xa6>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008e52:	07cb      	lsls	r3, r1, #31
 8008e54:	d520      	bpl.n	8008e98 <HAL_JPEG_Resume+0x5e>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008e56:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008e58:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008e5c:	6543      	str	r3, [r0, #84]	@ 0x54
      xfrSize = hjpeg->hdmain->Init.BufferTransferLength;
 8008e5e:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8008e60:	6a81      	ldr	r1, [r0, #40]	@ 0x28
      if (xfrSize == 0UL)
 8008e62:	b941      	cbnz	r1, 8008e76 <HAL_JPEG_Resume+0x3c>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8008e64:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8008e66:	f043 0304 	orr.w	r3, r3, #4
 8008e6a:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 8008e6c:	2306      	movs	r3, #6
 8008e6e:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
    return HAL_ERROR;
 8008e72:	2001      	movs	r0, #1
 8008e74:	e01d      	b.n	8008eb2 <HAL_JPEG_Resume+0x78>
      hjpeg->InDataLength = hjpeg->InDataLength - (hjpeg->InDataLength % xfrSize);
 8008e76:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8008e78:	fbb3 f2f1 	udiv	r2, r3, r1
 8008e7c:	fb01 3212 	mls	r2, r1, r2, r3
 8008e80:	1a9b      	subs	r3, r3, r2
 8008e82:	62a3      	str	r3, [r4, #40]	@ 0x28
      if (hjpeg->InDataLength > 0UL)
 8008e84:	b143      	cbz	r3, 8008e98 <HAL_JPEG_Resume+0x5e>
        if (HAL_MDMA_Start_IT(hjpeg->hdmain, (uint32_t)hjpeg->pJpegInBuffPtr, (uint32_t)&hjpeg->Instance->DIR,
 8008e86:	6822      	ldr	r2, [r4, #0]
 8008e88:	2101      	movs	r1, #1
 8008e8a:	3240      	adds	r2, #64	@ 0x40
 8008e8c:	9100      	str	r1, [sp, #0]
 8008e8e:	69a1      	ldr	r1, [r4, #24]
 8008e90:	f000 fba7 	bl	80095e2 <HAL_MDMA_Start_IT>
 8008e94:	2800      	cmp	r0, #0
 8008e96:	d1e5      	bne.n	8008e64 <HAL_JPEG_Resume+0x2a>
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008e98:	07a8      	lsls	r0, r5, #30
 8008e9a:	d509      	bpl.n	8008eb0 <HAL_JPEG_Resume+0x76>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008e9c:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008e9e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8008ea2:	6563      	str	r3, [r4, #84]	@ 0x54
      if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008ea4:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008ea6:	0419      	lsls	r1, r3, #16
 8008ea8:	d505      	bpl.n	8008eb6 <HAL_JPEG_Resume+0x7c>
        JPEG_DMA_PollResidualData(hjpeg);
 8008eaa:	4620      	mov	r0, r4
 8008eac:	f7ff ff6c 	bl	8008d88 <JPEG_DMA_PollResidualData>
  return HAL_OK;
 8008eb0:	2000      	movs	r0, #0
}
 8008eb2:	b003      	add	sp, #12
 8008eb4:	bd30      	pop	{r4, r5, pc}
        xfrSize = hjpeg->hdmaout->Init.BufferTransferLength;
 8008eb6:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008eb8:	6a81      	ldr	r1, [r0, #40]	@ 0x28
        if (xfrSize == 0UL)
 8008eba:	2900      	cmp	r1, #0
 8008ebc:	d0d2      	beq.n	8008e64 <HAL_JPEG_Resume+0x2a>
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008ebe:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008ec0:	fbb3 f2f1 	udiv	r2, r3, r1
 8008ec4:	fb01 3212 	mls	r2, r1, r2, r3
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008ec8:	6821      	ldr	r1, [r4, #0]
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008eca:	1a9b      	subs	r3, r3, r2
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008ecc:	2201      	movs	r2, #1
 8008ece:	3144      	adds	r1, #68	@ 0x44
        hjpeg->OutDataLength = hjpeg->OutDataLength - (hjpeg->OutDataLength % xfrSize);
 8008ed0:	62e3      	str	r3, [r4, #44]	@ 0x2c
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008ed2:	9200      	str	r2, [sp, #0]
 8008ed4:	69e2      	ldr	r2, [r4, #28]
 8008ed6:	f000 fb84 	bl	80095e2 <HAL_MDMA_Start_IT>
 8008eda:	2800      	cmp	r0, #0
 8008edc:	d0e8      	beq.n	8008eb0 <HAL_JPEG_Resume+0x76>
 8008ede:	e7c1      	b.n	8008e64 <HAL_JPEG_Resume+0x2a>
  else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8008ee0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008ee2:	f003 030c 	and.w	r3, r3, #12
 8008ee6:	2b08      	cmp	r3, #8
 8008ee8:	d1e2      	bne.n	8008eb0 <HAL_JPEG_Resume+0x76>
    if ((XferSelection & JPEG_PAUSE_RESUME_INPUT) == JPEG_PAUSE_RESUME_INPUT)
 8008eea:	f011 0301 	ands.w	r3, r1, #1
 8008eee:	d004      	beq.n	8008efa <HAL_JPEG_Resume+0xc0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_INPUT);
 8008ef0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008ef2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008ef6:	6543      	str	r3, [r0, #84]	@ 0x54
      mask |= (JPEG_IT_IFT | JPEG_IT_IFNF);
 8008ef8:	2306      	movs	r3, #6
    if ((XferSelection & JPEG_PAUSE_RESUME_OUTPUT) == JPEG_PAUSE_RESUME_OUTPUT)
 8008efa:	07aa      	lsls	r2, r5, #30
 8008efc:	d505      	bpl.n	8008f0a <HAL_JPEG_Resume+0xd0>
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008efe:	6d62      	ldr	r2, [r4, #84]	@ 0x54
      mask |= (JPEG_IT_OFT | JPEG_IT_OFNE | JPEG_IT_EOC);
 8008f00:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
      hjpeg->Context &= (~JPEG_CONTEXT_PAUSE_OUTPUT);
 8008f04:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8008f08:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_JPEG_ENABLE_IT(hjpeg, mask);
 8008f0a:	6821      	ldr	r1, [r4, #0]
 8008f0c:	6b0a      	ldr	r2, [r1, #48]	@ 0x30
 8008f0e:	4313      	orrs	r3, r2
 8008f10:	630b      	str	r3, [r1, #48]	@ 0x30
 8008f12:	e7cd      	b.n	8008eb0 <HAL_JPEG_Resume+0x76>

08008f14 <JPEG_DMA_EndProcess>:
{
 8008f14:	b538      	push	{r3, r4, r5, lr}
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f16:	6b43      	ldr	r3, [r0, #52]	@ 0x34
{
 8008f18:	4604      	mov	r4, r0
  hjpeg->JpegOutCount = hjpeg->OutDataLength - (hjpeg->hdmaout->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008f1a:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	695b      	ldr	r3, [r3, #20]
 8008f20:	f3c3 0310 	ubfx	r3, r3, #0, #17
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	6243      	str	r3, [r0, #36]	@ 0x24
  if (hjpeg->JpegOutCount == hjpeg->OutDataLength)
 8008f28:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8008f2a:	429a      	cmp	r2, r3
 8008f2c:	d105      	bne.n	8008f3a <JPEG_DMA_EndProcess+0x26>
    HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f2e:	6a42      	ldr	r2, [r0, #36]	@ 0x24
 8008f30:	69c1      	ldr	r1, [r0, #28]
 8008f32:	f7f9 fd75 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
    hjpeg->JpegOutCount = 0;
 8008f36:	2300      	movs	r3, #0
 8008f38:	6263      	str	r3, [r4, #36]	@ 0x24
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_OFNEF) == 0UL)
 8008f3a:	6823      	ldr	r3, [r4, #0]
 8008f3c:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
 8008f3e:	f015 0510 	ands.w	r5, r5, #16
 8008f42:	d124      	bne.n	8008f8e <JPEG_DMA_EndProcess+0x7a>
    if (hjpeg->JpegOutCount > 0UL)
 8008f44:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8008f46:	b12b      	cbz	r3, 8008f54 <JPEG_DMA_EndProcess+0x40>
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008f48:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008f4a:	4620      	mov	r0, r4
 8008f4c:	69e1      	ldr	r1, [r4, #28]
 8008f4e:	f7f9 fd67 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      hjpeg->JpegOutCount = 0;
 8008f52:	6265      	str	r5, [r4, #36]	@ 0x24
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008f54:	6822      	ldr	r2, [r4, #0]
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008f56:	4620      	mov	r0, r4
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8008f58:	6813      	ldr	r3, [r2, #0]
 8008f5a:	f023 0301 	bic.w	r3, r3, #1
 8008f5e:	6013      	str	r3, [r2, #0]
    tmpContext = hjpeg->Context;
 8008f60:	6d63      	ldr	r3, [r4, #84]	@ 0x54
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008f62:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008f64:	f003 0303 	and.w	r3, r3, #3
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008f68:	f402 4282 	and.w	r2, r2, #16640	@ 0x4100
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008f6c:	2b02      	cmp	r3, #2
    hjpeg->Context &= (JPEG_CONTEXT_CONF_ENCODING | JPEG_CONTEXT_CUSTOM_TABLES);
 8008f6e:	6562      	str	r2, [r4, #84]	@ 0x54
    __HAL_UNLOCK(hjpeg);
 8008f70:	f04f 0200 	mov.w	r2, #0
 8008f74:	f884 204c 	strb.w	r2, [r4, #76]	@ 0x4c
    hjpeg->State = HAL_JPEG_STATE_READY;
 8008f78:	f04f 0201 	mov.w	r2, #1
 8008f7c:	f884 204d 	strb.w	r2, [r4, #77]	@ 0x4d
    if ((tmpContext & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8008f80:	d102      	bne.n	8008f88 <JPEG_DMA_EndProcess+0x74>
      HAL_JPEG_DecodeCpltCallback(hjpeg);
 8008f82:	f7f9 fd9f 	bl	8002ac4 <HAL_JPEG_DecodeCpltCallback>
}
 8008f86:	bd38      	pop	{r3, r4, r5, pc}
      HAL_JPEG_EncodeCpltCallback(hjpeg);
 8008f88:	f7ff fd2c 	bl	80089e4 <HAL_JPEG_EncodeCpltCallback>
 8008f8c:	e7fb      	b.n	8008f86 <JPEG_DMA_EndProcess+0x72>
  else if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008f8e:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008f90:	049b      	lsls	r3, r3, #18
 8008f92:	d4f8      	bmi.n	8008f86 <JPEG_DMA_EndProcess+0x72>
    JPEG_DMA_PollResidualData(hjpeg);
 8008f94:	4620      	mov	r0, r4
}
 8008f96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    JPEG_DMA_PollResidualData(hjpeg);
 8008f9a:	f7ff bef5 	b.w	8008d88 <JPEG_DMA_PollResidualData>

08008f9e <JPEG_MDMAOutAbortCallback>:
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008f9e:	6c00      	ldr	r0, [r0, #64]	@ 0x40
  if ((hjpeg->Context & JPEG_CONTEXT_ENDING_DMA) != 0UL)
 8008fa0:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8008fa2:	041b      	lsls	r3, r3, #16
 8008fa4:	d501      	bpl.n	8008faa <JPEG_MDMAOutAbortCallback+0xc>
    JPEG_DMA_EndProcess(hjpeg);
 8008fa6:	f7ff bfb5 	b.w	8008f14 <JPEG_DMA_EndProcess>
}
 8008faa:	4770      	bx	lr

08008fac <JPEG_MDMAOutCpltCallback>:
{
 8008fac:	b513      	push	{r0, r1, r4, lr}
  JPEG_HandleTypeDef *hjpeg = (JPEG_HandleTypeDef *)((MDMA_HandleTypeDef *)hmdma)->Parent;
 8008fae:	6c04      	ldr	r4, [r0, #64]	@ 0x40
  __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 8008fb0:	6823      	ldr	r3, [r4, #0]
 8008fb2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008fb4:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 8008fb8:	631a      	str	r2, [r3, #48]	@ 0x30
  if ((hjpeg->Context & (JPEG_CONTEXT_METHOD_MASK | JPEG_CONTEXT_ENDING_DMA)) ==
 8008fba:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008fbc:	f422 42ff 	bic.w	r2, r2, #32640	@ 0x7f80
 8008fc0:	f022 0273 	bic.w	r2, r2, #115	@ 0x73
 8008fc4:	0412      	lsls	r2, r2, #16
 8008fc6:	0c12      	lsrs	r2, r2, #16
 8008fc8:	2a0c      	cmp	r2, #12
 8008fca:	d125      	bne.n	8009018 <JPEG_MDMAOutCpltCallback+0x6c>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) == 0UL)
 8008fcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008fce:	069a      	lsls	r2, r3, #26
 8008fd0:	d424      	bmi.n	800901c <JPEG_MDMAOutCpltCallback+0x70>
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008fd2:	6803      	ldr	r3, [r0, #0]
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008fd4:	4620      	mov	r0, r4
 8008fd6:	69e1      	ldr	r1, [r4, #28]
      hjpeg->JpegOutCount = hjpeg->OutDataLength - (hmdma->Instance->CBNDTR & MDMA_CBNDTR_BNDT);
 8008fd8:	695a      	ldr	r2, [r3, #20]
 8008fda:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008fdc:	f3c2 0210 	ubfx	r2, r2, #0, #17
 8008fe0:	1a9b      	subs	r3, r3, r2
 8008fe2:	6263      	str	r3, [r4, #36]	@ 0x24
      HAL_JPEG_DataReadyCallback(hjpeg, hjpeg->pJpegOutBuffPtr, hjpeg->JpegOutCount);
 8008fe4:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 8008fe6:	f7f9 fd1b 	bl	8002a20 <HAL_JPEG_DataReadyCallback>
      if ((hjpeg->Context &  JPEG_CONTEXT_PAUSE_OUTPUT) == 0UL)
 8008fea:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8008fec:	049b      	lsls	r3, r3, #18
 8008fee:	d415      	bmi.n	800901c <JPEG_MDMAOutCpltCallback+0x70>
        if (HAL_MDMA_Start_IT(hjpeg->hdmaout, (uint32_t)&hjpeg->Instance->DOR, (uint32_t)hjpeg->pJpegOutBuffPtr,
 8008ff0:	6821      	ldr	r1, [r4, #0]
 8008ff2:	2301      	movs	r3, #1
 8008ff4:	3144      	adds	r1, #68	@ 0x44
 8008ff6:	9300      	str	r3, [sp, #0]
 8008ff8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8008ffa:	69e2      	ldr	r2, [r4, #28]
 8008ffc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 8008ffe:	f000 faf0 	bl	80095e2 <HAL_MDMA_Start_IT>
 8009002:	b158      	cbz	r0, 800901c <JPEG_MDMAOutCpltCallback+0x70>
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009004:	6d23      	ldr	r3, [r4, #80]	@ 0x50
          HAL_JPEG_ErrorCallback(hjpeg);
 8009006:	4620      	mov	r0, r4
          hjpeg->ErrorCode |= HAL_JPEG_ERROR_DMA;
 8009008:	f043 0304 	orr.w	r3, r3, #4
 800900c:	6523      	str	r3, [r4, #80]	@ 0x50
          hjpeg->State = HAL_JPEG_STATE_ERROR;
 800900e:	2306      	movs	r3, #6
 8009010:	f884 304d 	strb.w	r3, [r4, #77]	@ 0x4d
          HAL_JPEG_ErrorCallback(hjpeg);
 8009014:	f7f9 fd54 	bl	8002ac0 <HAL_JPEG_ErrorCallback>
}
 8009018:	b002      	add	sp, #8
 800901a:	bd10      	pop	{r4, pc}
    __HAL_JPEG_ENABLE_IT(hjpeg, JPEG_IT_EOC | JPEG_IT_HPD);
 800901c:	6822      	ldr	r2, [r4, #0]
 800901e:	6b13      	ldr	r3, [r2, #48]	@ 0x30
 8009020:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8009024:	6313      	str	r3, [r2, #48]	@ 0x30
 8009026:	e7f7      	b.n	8009018 <JPEG_MDMAOutCpltCallback+0x6c>

08009028 <HAL_JPEG_IRQHandler>:
{
 8009028:	b510      	push	{r4, lr}
  switch (hjpeg->State)
 800902a:	f890 304d 	ldrb.w	r3, [r0, #77]	@ 0x4d
{
 800902e:	4604      	mov	r4, r0
  switch (hjpeg->State)
 8009030:	3b03      	subs	r3, #3
 8009032:	2b01      	cmp	r3, #1
 8009034:	d850      	bhi.n	80090d8 <HAL_JPEG_IRQHandler+0xb0>
      if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_IT)
 8009036:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009038:	f003 030c 	and.w	r3, r3, #12
 800903c:	2b08      	cmp	r3, #8
 800903e:	d103      	bne.n	8009048 <HAL_JPEG_IRQHandler+0x20>
}
 8009040:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        (void) JPEG_Process(hjpeg);
 8009044:	f7ff be29 	b.w	8008c9a <JPEG_Process>
      else if ((hjpeg->Context & JPEG_CONTEXT_METHOD_MASK) == JPEG_CONTEXT_DMA)
 8009048:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 800904a:	f003 030c 	and.w	r3, r3, #12
 800904e:	2b0c      	cmp	r3, #12
 8009050:	d142      	bne.n	80090d8 <HAL_JPEG_IRQHandler+0xb0>
  if ((hjpeg->Context & JPEG_CONTEXT_OPERATION_MASK) == JPEG_CONTEXT_DECODE)
 8009052:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 8009054:	f003 0303 	and.w	r3, r3, #3
 8009058:	2b02      	cmp	r3, #2
 800905a:	d114      	bne.n	8009086 <HAL_JPEG_IRQHandler+0x5e>
    if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_HPDF) != 0UL)
 800905c:	6803      	ldr	r3, [r0, #0]
 800905e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8009060:	0659      	lsls	r1, r3, #25
 8009062:	d510      	bpl.n	8009086 <HAL_JPEG_IRQHandler+0x5e>
      (void) HAL_JPEG_GetInfo(hjpeg, &hjpeg->Conf);
 8009064:	1d01      	adds	r1, r0, #4
 8009066:	f7ff fbdd 	bl	8008824 <HAL_JPEG_GetInfo>
      hjpeg->Conf.ImageQuality = 0;
 800906a:	2300      	movs	r3, #0
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 800906c:	4620      	mov	r0, r4
      hjpeg->Conf.ImageQuality = 0;
 800906e:	6163      	str	r3, [r4, #20]
      HAL_JPEG_InfoReadyCallback(hjpeg, &hjpeg->Conf);
 8009070:	f7f9 fc82 	bl	8002978 <HAL_JPEG_InfoReadyCallback>
      __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_IT_HPD);
 8009074:	6823      	ldr	r3, [r4, #0]
 8009076:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009078:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800907c:	631a      	str	r2, [r3, #48]	@ 0x30
      __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_HPDF);
 800907e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8009080:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8009084:	639a      	str	r2, [r3, #56]	@ 0x38
  if (__HAL_JPEG_GET_FLAG(hjpeg, JPEG_FLAG_EOCF) != 0UL)
 8009086:	6823      	ldr	r3, [r4, #0]
 8009088:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800908a:	0692      	lsls	r2, r2, #26
 800908c:	d524      	bpl.n	80090d8 <HAL_JPEG_IRQHandler+0xb0>
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 800908e:	6d62      	ldr	r2, [r4, #84]	@ 0x54
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 8009090:	6b20      	ldr	r0, [r4, #48]	@ 0x30
    hjpeg->Context |= JPEG_CONTEXT_ENDING_DMA;
 8009092:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8009096:	6562      	str	r2, [r4, #84]	@ 0x54
    hjpeg->Instance->CONFR0 &=  ~JPEG_CONFR0_START;
 8009098:	681a      	ldr	r2, [r3, #0]
 800909a:	f022 0201 	bic.w	r2, r2, #1
 800909e:	601a      	str	r2, [r3, #0]
    __HAL_JPEG_DISABLE_IT(hjpeg, JPEG_INTERRUPT_MASK);
 80090a0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090a2:	f022 027e 	bic.w	r2, r2, #126	@ 0x7e
 80090a6:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_JPEG_CLEAR_FLAG(hjpeg, JPEG_FLAG_ALL);
 80090a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80090aa:	f042 0260 	orr.w	r2, r2, #96	@ 0x60
 80090ae:	639a      	str	r2, [r3, #56]	@ 0x38
    if (hjpeg->hdmain->State == HAL_MDMA_STATE_BUSY)
 80090b0:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80090b4:	2b02      	cmp	r3, #2
 80090b6:	d101      	bne.n	80090bc <HAL_JPEG_IRQHandler+0x94>
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmain);
 80090b8:	f000 fadc 	bl	8009674 <HAL_MDMA_Abort_IT>
    if (hjpeg->hdmaout->State == HAL_MDMA_STATE_BUSY)
 80090bc:	6b60      	ldr	r0, [r4, #52]	@ 0x34
 80090be:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 80090c2:	2b02      	cmp	r3, #2
 80090c4:	d103      	bne.n	80090ce <HAL_JPEG_IRQHandler+0xa6>
}
 80090c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      (void) HAL_MDMA_Abort_IT(hjpeg->hdmaout);
 80090ca:	f000 bad3 	b.w	8009674 <HAL_MDMA_Abort_IT>
      JPEG_DMA_EndProcess(hjpeg);
 80090ce:	4620      	mov	r0, r4
}
 80090d0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      JPEG_DMA_EndProcess(hjpeg);
 80090d4:	f7ff bf1e 	b.w	8008f14 <JPEG_DMA_EndProcess>
}
 80090d8:	bd10      	pop	{r4, pc}

080090da <LTDC_SetConfig>:
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090da:	01d2      	lsls	r2, r2, #7
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090dc:	6800      	ldr	r0, [r0, #0]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090de:	3284      	adds	r2, #132	@ 0x84
 80090e0:	1883      	adds	r3, r0, r2
{
 80090e2:	b5f0      	push	{r4, r5, r6, r7, lr}
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090e4:	68c7      	ldr	r7, [r0, #12]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090e6:	685d      	ldr	r5, [r3, #4]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090e8:	684c      	ldr	r4, [r1, #4]
 80090ea:	f3c7 470b 	ubfx	r7, r7, #16, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090ee:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 80090f2:	680e      	ldr	r6, [r1, #0]
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 80090f4:	4427      	add	r7, r4
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 80090f6:	605d      	str	r5, [r3, #4]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 80090f8:	f106 0c01 	add.w	ip, r6, #1
 80090fc:	68c5      	ldr	r5, [r0, #12]
 80090fe:	f3c5 450b 	ubfx	r5, r5, #16, #12
 8009102:	4465      	add	r5, ip
 8009104:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8009108:	605d      	str	r5, [r3, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800910a:	68c7      	ldr	r7, [r0, #12]
 800910c:	68cd      	ldr	r5, [r1, #12]
 800910e:	f3c7 070a 	ubfx	r7, r7, #0, #11
 8009112:	442f      	add	r7, r5
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8009114:	689d      	ldr	r5, [r3, #8]
 8009116:	f405 4570 	and.w	r5, r5, #61440	@ 0xf000
 800911a:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800911c:	688d      	ldr	r5, [r1, #8]
 800911e:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 8009122:	3501      	adds	r5, #1
 8009124:	f3cc 0c0a 	ubfx	ip, ip, #0, #11
 8009128:	4465      	add	r5, ip

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800912a:	f8d1 c010 	ldr.w	ip, [r1, #16]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800912e:	ea45 4507 	orr.w	r5, r5, r7, lsl #16

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8009132:	698f      	ldr	r7, [r1, #24]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8009134:	609d      	str	r5, [r3, #8]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8009136:	691d      	ldr	r5, [r3, #16]
 8009138:	f025 0507 	bic.w	r5, r5, #7
 800913c:	611d      	str	r5, [r3, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800913e:	f8c3 c010 	str.w	ip, [r3, #16]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009142:	f891 5030 	ldrb.w	r5, [r1, #48]	@ 0x30
 8009146:	ea45 6507 	orr.w	r5, r5, r7, lsl #24
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800914a:	f891 7031 	ldrb.w	r7, [r1, #49]	@ 0x31
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800914e:	ea45 2507 	orr.w	r5, r5, r7, lsl #8
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8009152:	f891 7032 	ldrb.w	r7, [r1, #50]	@ 0x32
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8009156:	ea45 4507 	orr.w	r5, r5, r7, lsl #16
 800915a:	619d      	str	r5, [r3, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800915c:	695d      	ldr	r5, [r3, #20]
 800915e:	f025 05ff 	bic.w	r5, r5, #255	@ 0xff
 8009162:	615d      	str	r5, [r3, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8009164:	694d      	ldr	r5, [r1, #20]
 8009166:	615d      	str	r5, [r3, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8009168:	69dd      	ldr	r5, [r3, #28]
 800916a:	f425 65e0 	bic.w	r5, r5, #1792	@ 0x700
 800916e:	f025 0507 	bic.w	r5, r5, #7
 8009172:	61dd      	str	r5, [r3, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8009174:	e9d1 5707 	ldrd	r5, r7, [r1, #28]
 8009178:	433d      	orrs	r5, r7
 800917a:	61dd      	str	r5, [r3, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800917c:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800917e:	629d      	str	r5, [r3, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8009180:	f1bc 0f00 	cmp.w	ip, #0
 8009184:	d024      	beq.n	80091d0 <LTDC_SetConfig+0xf6>
  {
    tmp = 4U;
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8009186:	f1bc 0f01 	cmp.w	ip, #1
 800918a:	d023      	beq.n	80091d4 <LTDC_SetConfig+0xfa>
  {
    tmp = 3U;
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800918c:	f1ac 0502 	sub.w	r5, ip, #2
 8009190:	2d02      	cmp	r5, #2
 8009192:	d921      	bls.n	80091d8 <LTDC_SetConfig+0xfe>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
  {
    tmp = 2U;
 8009194:	f1bc 0f07 	cmp.w	ip, #7
 8009198:	bf14      	ite	ne
 800919a:	2501      	movne	r5, #1
 800919c:	2502      	moveq	r5, #2
  {
    tmp = 1U;
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800919e:	6adf      	ldr	r7, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80091a0:	1ba4      	subs	r4, r4, r6
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80091a2:	f007 27e0 	and.w	r7, r7, #3758153728	@ 0xe000e000
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80091a6:	436c      	muls	r4, r5
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 80091a8:	62df      	str	r7, [r3, #44]	@ 0x2c
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 80091aa:	3407      	adds	r4, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80091ac:	6a8f      	ldr	r7, [r1, #40]	@ 0x28
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80091ae:	6ac9      	ldr	r1, [r1, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 80091b0:	436f      	muls	r7, r5
 80091b2:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
 80091b6:	62dc      	str	r4, [r3, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 80091b8:	6b1c      	ldr	r4, [r3, #48]	@ 0x30
 80091ba:	f424 64ff 	bic.w	r4, r4, #2040	@ 0x7f8
 80091be:	f024 0407 	bic.w	r4, r4, #7
 80091c2:	631c      	str	r4, [r3, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 80091c4:	6319      	str	r1, [r3, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 80091c6:	5883      	ldr	r3, [r0, r2]
 80091c8:	f043 0301 	orr.w	r3, r3, #1
 80091cc:	5083      	str	r3, [r0, r2]
}
 80091ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
    tmp = 4U;
 80091d0:	2504      	movs	r5, #4
 80091d2:	e7e4      	b.n	800919e <LTDC_SetConfig+0xc4>
    tmp = 3U;
 80091d4:	2503      	movs	r5, #3
 80091d6:	e7e2      	b.n	800919e <LTDC_SetConfig+0xc4>
    tmp = 2U;
 80091d8:	2502      	movs	r5, #2
 80091da:	e7e0      	b.n	800919e <LTDC_SetConfig+0xc4>

080091dc <HAL_LTDC_Init>:
{
 80091dc:	b538      	push	{r3, r4, r5, lr}
  if (hltdc == NULL)
 80091de:	4604      	mov	r4, r0
 80091e0:	2800      	cmp	r0, #0
 80091e2:	d04e      	beq.n	8009282 <HAL_LTDC_Init+0xa6>
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 80091e4:	f890 30a1 	ldrb.w	r3, [r0, #161]	@ 0xa1
 80091e8:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 80091ec:	b91b      	cbnz	r3, 80091f6 <HAL_LTDC_Init+0x1a>
    hltdc->Lock = HAL_UNLOCKED;
 80091ee:	f880 20a0 	strb.w	r2, [r0, #160]	@ 0xa0
    HAL_LTDC_MspInit(hltdc);
 80091f2:	f7f8 f9a3 	bl	800153c <HAL_LTDC_MspInit>
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80091f6:	2302      	movs	r3, #2
 80091f8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 80091fc:	6823      	ldr	r3, [r4, #0]
 80091fe:	699a      	ldr	r2, [r3, #24]
 8009200:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8009204:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009206:	6999      	ldr	r1, [r3, #24]
 8009208:	e9d4 2001 	ldrd	r2, r0, [r4, #4]
 800920c:	4302      	orrs	r2, r0
 800920e:	68e0      	ldr	r0, [r4, #12]
 8009210:	4302      	orrs	r2, r0
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8009212:	6920      	ldr	r0, [r4, #16]
 8009214:	4302      	orrs	r2, r0
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8009216:	430a      	orrs	r2, r1
 8009218:	619a      	str	r2, [r3, #24]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800921a:	e9d4 1205 	ldrd	r1, r2, [r4, #20]
 800921e:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009222:	609a      	str	r2, [r3, #8]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8009224:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 8009228:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800922c:	60da      	str	r2, [r3, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800922e:	e9d4 1209 	ldrd	r1, r2, [r4, #36]	@ 0x24
 8009232:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009236:	611a      	str	r2, [r3, #16]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8009238:	e9d4 120b 	ldrd	r1, r2, [r4, #44]	@ 0x2c
 800923c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009240:	615a      	str	r2, [r3, #20]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009242:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8009244:	f894 0035 	ldrb.w	r0, [r4, #53]	@ 0x35
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009248:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800924c:	f894 1036 	ldrb.w	r1, [r4, #54]	@ 0x36
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8009250:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009252:	6add      	ldr	r5, [r3, #44]	@ 0x2c
 8009254:	f894 2034 	ldrb.w	r2, [r4, #52]	@ 0x34
 8009258:	432a      	orrs	r2, r5
 800925a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800925e:	2000      	movs	r0, #0
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8009260:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8009264:	62da      	str	r2, [r3, #44]	@ 0x2c
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8009266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009268:	f042 0206 	orr.w	r2, r2, #6
 800926c:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_LTDC_ENABLE(hltdc);
 800926e:	699a      	ldr	r2, [r3, #24]
 8009270:	f042 0201 	orr.w	r2, r2, #1
 8009274:	619a      	str	r2, [r3, #24]
  hltdc->State = HAL_LTDC_STATE_READY;
 8009276:	2301      	movs	r3, #1
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8009278:	f8c4 00a4 	str.w	r0, [r4, #164]	@ 0xa4
  hltdc->State = HAL_LTDC_STATE_READY;
 800927c:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
}
 8009280:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 8009282:	2001      	movs	r0, #1
 8009284:	e7fc      	b.n	8009280 <HAL_LTDC_Init+0xa4>

08009286 <HAL_LTDC_ErrorCallback>:
__weak void HAL_LTDC_ErrorCallback(LTDC_HandleTypeDef *hltdc)
 8009286:	4770      	bx	lr

08009288 <HAL_LTDC_LineEventCallback>:
__weak void HAL_LTDC_LineEventCallback(LTDC_HandleTypeDef *hltdc)
 8009288:	4770      	bx	lr

0800928a <HAL_LTDC_ReloadEventCallback>:
__weak void HAL_LTDC_ReloadEventCallback(LTDC_HandleTypeDef *hltdc)
 800928a:	4770      	bx	lr

0800928c <HAL_LTDC_IRQHandler>:
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 800928c:	6803      	ldr	r3, [r0, #0]
{
 800928e:	b570      	push	{r4, r5, r6, lr}
  uint32_t isrflags  = READ_REG(hltdc->Instance->ISR);
 8009290:	6b9e      	ldr	r6, [r3, #56]	@ 0x38
{
 8009292:	4604      	mov	r4, r0
  uint32_t itsources = READ_REG(hltdc->Instance->IER);
 8009294:	6b5d      	ldr	r5, [r3, #52]	@ 0x34
  if (((isrflags & LTDC_ISR_TERRIF) != 0U) && ((itsources & LTDC_IER_TERRIE) != 0U))
 8009296:	0772      	lsls	r2, r6, #29
 8009298:	d514      	bpl.n	80092c4 <HAL_LTDC_IRQHandler+0x38>
 800929a:	0769      	lsls	r1, r5, #29
 800929c:	d512      	bpl.n	80092c4 <HAL_LTDC_IRQHandler+0x38>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_TE);
 800929e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092a0:	f022 0204 	bic.w	r2, r2, #4
 80092a4:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_TE);
 80092a6:	2204      	movs	r2, #4
 80092a8:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_TE;
 80092aa:	f8d0 30a4 	ldr.w	r3, [r0, #164]	@ 0xa4
 80092ae:	f043 0301 	orr.w	r3, r3, #1
 80092b2:	f8c0 30a4 	str.w	r3, [r0, #164]	@ 0xa4
    __HAL_UNLOCK(hltdc);
 80092b6:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092b8:	f880 20a1 	strb.w	r2, [r0, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80092bc:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80092c0:	f7ff ffe1 	bl	8009286 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_FUIF) != 0U) && ((itsources & LTDC_IER_FUIE) != 0U))
 80092c4:	07b2      	lsls	r2, r6, #30
 80092c6:	d516      	bpl.n	80092f6 <HAL_LTDC_IRQHandler+0x6a>
 80092c8:	07ab      	lsls	r3, r5, #30
 80092ca:	d514      	bpl.n	80092f6 <HAL_LTDC_IRQHandler+0x6a>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80092cc:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ErrorCallback(hltdc);
 80092ce:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_FU);
 80092d0:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80092d2:	f022 0202 	bic.w	r2, r2, #2
 80092d6:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_FU);
 80092d8:	2202      	movs	r2, #2
 80092da:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->ErrorCode |= HAL_LTDC_ERROR_FU;
 80092dc:	f8d4 30a4 	ldr.w	r3, [r4, #164]	@ 0xa4
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c4 30a4 	str.w	r3, [r4, #164]	@ 0xa4
    hltdc->State = HAL_LTDC_STATE_ERROR;
 80092e6:	2304      	movs	r3, #4
 80092e8:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 80092ec:	2300      	movs	r3, #0
 80092ee:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ErrorCallback(hltdc);
 80092f2:	f7ff ffc8 	bl	8009286 <HAL_LTDC_ErrorCallback>
  if (((isrflags & LTDC_ISR_LIF) != 0U) && ((itsources & LTDC_IER_LIE) != 0U))
 80092f6:	07f0      	lsls	r0, r6, #31
 80092f8:	d510      	bpl.n	800931c <HAL_LTDC_IRQHandler+0x90>
 80092fa:	07e9      	lsls	r1, r5, #31
 80092fc:	d50e      	bpl.n	800931c <HAL_LTDC_IRQHandler+0x90>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 80092fe:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_LineEventCallback(hltdc);
 8009300:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_LI);
 8009302:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8009304:	f022 0201 	bic.w	r2, r2, #1
 8009308:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_LI);
 800930a:	2201      	movs	r2, #1
 800930c:	63da      	str	r2, [r3, #60]	@ 0x3c
    __HAL_UNLOCK(hltdc);
 800930e:	2300      	movs	r3, #0
    hltdc->State = HAL_LTDC_STATE_READY;
 8009310:	f884 20a1 	strb.w	r2, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 8009314:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_LineEventCallback(hltdc);
 8009318:	f7ff ffb6 	bl	8009288 <HAL_LTDC_LineEventCallback>
  if (((isrflags & LTDC_ISR_RRIF) != 0U) && ((itsources & LTDC_IER_RRIE) != 0U))
 800931c:	0732      	lsls	r2, r6, #28
 800931e:	d511      	bpl.n	8009344 <HAL_LTDC_IRQHandler+0xb8>
 8009320:	072b      	lsls	r3, r5, #28
 8009322:	d50f      	bpl.n	8009344 <HAL_LTDC_IRQHandler+0xb8>
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009324:	6823      	ldr	r3, [r4, #0]
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009326:	4620      	mov	r0, r4
    __HAL_LTDC_DISABLE_IT(hltdc, LTDC_IT_RR);
 8009328:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800932a:	f022 0208 	bic.w	r2, r2, #8
 800932e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_LTDC_CLEAR_FLAG(hltdc, LTDC_FLAG_RR);
 8009330:	2208      	movs	r2, #8
 8009332:	63da      	str	r2, [r3, #60]	@ 0x3c
    hltdc->State = HAL_LTDC_STATE_READY;
 8009334:	2301      	movs	r3, #1
 8009336:	f884 30a1 	strb.w	r3, [r4, #161]	@ 0xa1
    __HAL_UNLOCK(hltdc);
 800933a:	2300      	movs	r3, #0
 800933c:	f884 30a0 	strb.w	r3, [r4, #160]	@ 0xa0
    HAL_LTDC_ReloadEventCallback(hltdc);
 8009340:	f7ff ffa3 	bl	800928a <HAL_LTDC_ReloadEventCallback>
}
 8009344:	bd70      	pop	{r4, r5, r6, pc}

08009346 <HAL_LTDC_ConfigLayer>:
{
 8009346:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  __HAL_LOCK(hltdc);
 800934a:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
{
 800934e:	4606      	mov	r6, r0
 8009350:	460f      	mov	r7, r1
 8009352:	4694      	mov	ip, r2
  __HAL_LOCK(hltdc);
 8009354:	2b01      	cmp	r3, #1
 8009356:	f04f 0002 	mov.w	r0, #2
 800935a:	d01f      	beq.n	800939c <HAL_LTDC_ConfigLayer+0x56>
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800935c:	2434      	movs	r4, #52	@ 0x34
  __HAL_LOCK(hltdc);
 800935e:	f04f 0801 	mov.w	r8, #1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009362:	460d      	mov	r5, r1
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8009364:	f886 00a1 	strb.w	r0, [r6, #161]	@ 0xa1
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009368:	fb04 6402 	mla	r4, r4, r2, r6
  __HAL_LOCK(hltdc);
 800936c:	f886 80a0 	strb.w	r8, [r6, #160]	@ 0xa0
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009370:	3438      	adds	r4, #56	@ 0x38
 8009372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009374:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009376:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009378:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800937a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800937c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800937e:	682b      	ldr	r3, [r5, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009380:	4630      	mov	r0, r6
 8009382:	4662      	mov	r2, ip
 8009384:	4639      	mov	r1, r7
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8009386:	6023      	str	r3, [r4, #0]
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8009388:	f7ff fea7 	bl	80090da <LTDC_SetConfig>
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800938c:	6833      	ldr	r3, [r6, #0]
  __HAL_UNLOCK(hltdc);
 800938e:	2000      	movs	r0, #0
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8009390:	f8c3 8024 	str.w	r8, [r3, #36]	@ 0x24
  hltdc->State  = HAL_LTDC_STATE_READY;
 8009394:	f886 80a1 	strb.w	r8, [r6, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009398:	f886 00a0 	strb.w	r0, [r6, #160]	@ 0xa0
}
 800939c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

080093a0 <HAL_LTDC_SetPitch>:
{
 80093a0:	b530      	push	{r4, r5, lr}
  __HAL_LOCK(hltdc);
 80093a2:	f890 30a0 	ldrb.w	r3, [r0, #160]	@ 0xa0
 80093a6:	2b01      	cmp	r3, #1
 80093a8:	f04f 0302 	mov.w	r3, #2
 80093ac:	d02c      	beq.n	8009408 <HAL_LTDC_SetPitch+0x68>
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80093ae:	2434      	movs	r4, #52	@ 0x34
  hltdc->State = HAL_LTDC_STATE_BUSY;
 80093b0:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  pixelFormat = hltdc->LayerCfg[LayerIdx].PixelFormat;
 80093b4:	fb04 0402 	mla	r4, r4, r2, r0
 80093b8:	6ca4      	ldr	r4, [r4, #72]	@ 0x48
  if (pixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 80093ba:	b33c      	cbz	r4, 800940c <HAL_LTDC_SetPitch+0x6c>
  else if (pixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 80093bc:	2c01      	cmp	r4, #1
 80093be:	d027      	beq.n	8009410 <HAL_LTDC_SetPitch+0x70>
  else if ((pixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 80093c0:	1ea5      	subs	r5, r4, #2
 80093c2:	429d      	cmp	r5, r3
 80093c4:	d902      	bls.n	80093cc <HAL_LTDC_SetPitch+0x2c>
    tmp = 2U;
 80093c6:	2c07      	cmp	r4, #7
 80093c8:	bf18      	it	ne
 80093ca:	2301      	movne	r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80093cc:	01d2      	lsls	r2, r2, #7
 80093ce:	6804      	ldr	r4, [r0, #0]
  pitchUpdate = ((LinePitchInPixels * tmp) << 16U);
 80093d0:	434b      	muls	r3, r1
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR &= ~LTDC_LxCFBLR_CFBP;
 80093d2:	3284      	adds	r2, #132	@ 0x84
 80093d4:	4422      	add	r2, r4
 80093d6:	6ad4      	ldr	r4, [r2, #44]	@ 0x2c
 80093d8:	f024 54ff 	bic.w	r4, r4, #534773760	@ 0x1fe00000
 80093dc:	f424 14f8 	bic.w	r4, r4, #2031616	@ 0x1f0000
 80093e0:	62d4      	str	r4, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80093e2:	4c0c      	ldr	r4, [pc, #48]	@ (8009414 <HAL_LTDC_SetPitch+0x74>)
 80093e4:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 80093e6:	f045 0501 	orr.w	r5, r5, #1
 80093ea:	6265      	str	r5, [r4, #36]	@ 0x24
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR |= pitchUpdate;
 80093ec:	6ad5      	ldr	r5, [r2, #44]	@ 0x2c
 80093ee:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
 80093f2:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC->SRCR |= LTDC_SRCR_IMR;
 80093f4:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80093f6:	f043 0301 	orr.w	r3, r3, #1
 80093fa:	6263      	str	r3, [r4, #36]	@ 0x24
  hltdc->State = HAL_LTDC_STATE_READY;
 80093fc:	2301      	movs	r3, #1
 80093fe:	f880 30a1 	strb.w	r3, [r0, #161]	@ 0xa1
  __HAL_UNLOCK(hltdc);
 8009402:	2300      	movs	r3, #0
 8009404:	f880 30a0 	strb.w	r3, [r0, #160]	@ 0xa0
}
 8009408:	4618      	mov	r0, r3
 800940a:	bd30      	pop	{r4, r5, pc}
    tmp = 4U;
 800940c:	2304      	movs	r3, #4
 800940e:	e7dd      	b.n	80093cc <HAL_LTDC_SetPitch+0x2c>
    tmp = 3U;
 8009410:	2303      	movs	r3, #3
 8009412:	e7db      	b.n	80093cc <HAL_LTDC_SetPitch+0x2c>
 8009414:	50001000 	.word	0x50001000

08009418 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8009418:	b530      	push	{r4, r5, lr}
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 800941a:	6804      	ldr	r4, [r0, #0]
 800941c:	f3c3 0310 	ubfx	r3, r3, #0, #17

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;

  addressMask = SrcAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8009420:	f011 4f5f 	tst.w	r1, #3741319168	@ 0xdf000000
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 8009424:	6965      	ldr	r5, [r4, #20]
 8009426:	ea4f 4555 	mov.w	r5, r5, lsr #17
 800942a:	ea4f 4545 	mov.w	r5, r5, lsl #17
 800942e:	ea45 0503 	orr.w	r5, r5, r3
 8009432:	6165      	str	r5, [r4, #20]
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 8009434:	9d03      	ldr	r5, [sp, #12]
 8009436:	6963      	ldr	r3, [r4, #20]
 8009438:	f105 35ff 	add.w	r5, r5, #4294967295
 800943c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009440:	ea43 5305 	orr.w	r3, r3, r5, lsl #20
 8009444:	6163      	str	r3, [r4, #20]
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 8009446:	f04f 031f 	mov.w	r3, #31
 800944a:	6063      	str	r3, [r4, #4]
  hmdma->Instance->CDAR = DstAddress;
 800944c:	61e2      	str	r2, [r4, #28]
  hmdma->Instance->CSAR = SrcAddress;
 800944e:	61a1      	str	r1, [r4, #24]
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 8009450:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009452:	bf0c      	ite	eq
 8009454:	f443 3380 	orreq.w	r3, r3, #65536	@ 0x10000
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009458:	f423 3380 	bicne.w	r3, r3, #65536	@ 0x10000
  }

  addressMask = DstAddress & 0xFF000000U;
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 800945c:	f012 4f5f 	tst.w	r2, #3741319168	@ 0xdf000000
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 8009460:	62a3      	str	r3, [r4, #40]	@ 0x28
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8009462:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8009464:	bf0c      	ite	eq
 8009466:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 800946a:	f423 3300 	bicne.w	r3, r3, #131072	@ 0x20000
 800946e:	62a3      	str	r3, [r4, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8009470:	6dc3      	ldr	r3, [r0, #92]	@ 0x5c
 8009472:	6263      	str	r3, [r4, #36]	@ 0x24
}
 8009474:	bd30      	pop	{r4, r5, pc}

08009476 <HAL_MDMA_Init>:
{
 8009476:	b538      	push	{r3, r4, r5, lr}
 8009478:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 800947a:	f7fd f8fd 	bl	8006678 <HAL_GetTick>
 800947e:	4605      	mov	r5, r0
  if(hmdma == NULL)
 8009480:	2c00      	cmp	r4, #0
 8009482:	d061      	beq.n	8009548 <HAL_MDMA_Init+0xd2>
  __HAL_UNLOCK(hmdma);
 8009484:	2300      	movs	r3, #0
  __HAL_MDMA_DISABLE(hmdma);
 8009486:	6822      	ldr	r2, [r4, #0]
  __HAL_UNLOCK(hmdma);
 8009488:	f884 303c 	strb.w	r3, [r4, #60]	@ 0x3c
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800948c:	2302      	movs	r3, #2
 800948e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  __HAL_MDMA_DISABLE(hmdma);
 8009492:	68d3      	ldr	r3, [r2, #12]
 8009494:	f023 0301 	bic.w	r3, r3, #1
 8009498:	60d3      	str	r3, [r2, #12]
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800949a:	6823      	ldr	r3, [r4, #0]
 800949c:	68da      	ldr	r2, [r3, #12]
 800949e:	07d2      	lsls	r2, r2, #31
 80094a0:	d448      	bmi.n	8009534 <HAL_MDMA_Init+0xbe>
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80094a2:	e9d4 2103 	ldrd	r2, r1, [r4, #12]
 80094a6:	430a      	orrs	r2, r1
 80094a8:	60da      	str	r2, [r3, #12]
  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
                           hmdma->Init.DestBurst                                   | \
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80094aa:	e9d4 2105 	ldrd	r2, r1, [r4, #20]
 80094ae:	430a      	orrs	r2, r1
 80094b0:	69e1      	ldr	r1, [r4, #28]
 80094b2:	430a      	orrs	r2, r1
 80094b4:	6a21      	ldr	r1, [r4, #32]
 80094b6:	430a      	orrs	r2, r1
 80094b8:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80094ba:	430a      	orrs	r2, r1
 80094bc:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80094be:	430a      	orrs	r2, r1
 80094c0:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80094c2:	430a      	orrs	r2, r1
 80094c4:	68a1      	ldr	r1, [r4, #8]
 80094c6:	430a      	orrs	r2, r1
 80094c8:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80094ca:	3901      	subs	r1, #1
 80094cc:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
                           hmdma->Init.TransferTriggerMode;

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80094d0:	6861      	ldr	r1, [r4, #4]
 80094d2:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80094d6:	611a      	str	r2, [r3, #16]
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80094d8:	d103      	bne.n	80094e2 <HAL_MDMA_Init+0x6c>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 80094da:	691a      	ldr	r2, [r3, #16]
 80094dc:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 80094e0:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 80094e2:	2200      	movs	r2, #0
 80094e4:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 80094e6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80094e8:	2a00      	cmp	r2, #0
 80094ea:	da04      	bge.n	80094f6 <HAL_MDMA_Init+0x80>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80094ec:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 80094ee:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 80094f0:	f440 2080 	orr.w	r0, r0, #262144	@ 0x40000
 80094f4:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 80094f6:	b292      	uxth	r2, r2
 80094f8:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 80094fa:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 80094fc:	2a00      	cmp	r2, #0
 80094fe:	da25      	bge.n	800954c <HAL_MDMA_Init+0xd6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009500:	6958      	ldr	r0, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 8009502:	4252      	negs	r2, r2
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 8009504:	f440 2000 	orr.w	r0, r0, #524288	@ 0x80000
 8009508:	6158      	str	r0, [r3, #20]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800950a:	6a18      	ldr	r0, [r3, #32]
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800950c:	ea40 4202 	orr.w	r2, r0, r2, lsl #16
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009510:	f1b1 4f80 	cmp.w	r1, #1073741824	@ 0x40000000
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8009514:	621a      	str	r2, [r3, #32]
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 8009516:	f04f 0200 	mov.w	r2, #0
 800951a:	d019      	beq.n	8009550 <HAL_MDMA_Init+0xda>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800951c:	b2c9      	uxtb	r1, r1
 800951e:	6299      	str	r1, [r3, #40]	@ 0x28
  {
    hmdma->Instance->CTBR = 0;
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 8009520:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->State = HAL_MDMA_STATE_READY;
 8009522:	2301      	movs	r3, #1
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8009524:	66a2      	str	r2, [r4, #104]	@ 0x68
  return HAL_OK;
 8009526:	2000      	movs	r0, #0
  hmdma->LinkedListNodeCounter  = 0;
 8009528:	6662      	str	r2, [r4, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_READY;
 800952a:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  hmdma->LastLinkedListNodeAddress   = 0;
 800952e:	e9c4 2217 	strd	r2, r2, [r4, #92]	@ 0x5c
  return HAL_OK;
 8009532:	e00a      	b.n	800954a <HAL_MDMA_Init+0xd4>
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8009534:	f7fd f8a0 	bl	8006678 <HAL_GetTick>
 8009538:	1b40      	subs	r0, r0, r5
 800953a:	2805      	cmp	r0, #5
 800953c:	d9ad      	bls.n	800949a <HAL_MDMA_Init+0x24>
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800953e:	2340      	movs	r3, #64	@ 0x40
 8009540:	66a3      	str	r3, [r4, #104]	@ 0x68
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8009542:	2303      	movs	r3, #3
 8009544:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    return HAL_ERROR;
 8009548:	2001      	movs	r0, #1
}
 800954a:	bd38      	pop	{r3, r4, r5, pc}
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800954c:	6a18      	ldr	r0, [r3, #32]
 800954e:	e7dd      	b.n	800950c <HAL_MDMA_Init+0x96>
    hmdma->Instance->CTBR = 0;
 8009550:	629a      	str	r2, [r3, #40]	@ 0x28
 8009552:	e7e5      	b.n	8009520 <HAL_MDMA_Init+0xaa>

08009554 <HAL_MDMA_DeInit>:
  if(hmdma == NULL)
 8009554:	b1d8      	cbz	r0, 800958e <HAL_MDMA_DeInit+0x3a>
  __HAL_MDMA_DISABLE(hmdma);
 8009556:	6802      	ldr	r2, [r0, #0]
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009558:	211f      	movs	r1, #31
  __HAL_MDMA_DISABLE(hmdma);
 800955a:	68d3      	ldr	r3, [r2, #12]
 800955c:	f023 0301 	bic.w	r3, r3, #1
 8009560:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CCR  = 0;
 8009562:	2300      	movs	r3, #0
 8009564:	60d3      	str	r3, [r2, #12]
  hmdma->Instance->CTCR = 0;
 8009566:	6113      	str	r3, [r2, #16]
  hmdma->Instance->CBNDTR = 0;
 8009568:	6153      	str	r3, [r2, #20]
  hmdma->Instance->CSAR = 0;
 800956a:	6193      	str	r3, [r2, #24]
  hmdma->Instance->CDAR = 0;
 800956c:	61d3      	str	r3, [r2, #28]
  hmdma->Instance->CBRUR = 0;
 800956e:	6213      	str	r3, [r2, #32]
  hmdma->Instance->CLAR = 0;
 8009570:	6253      	str	r3, [r2, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 8009572:	6293      	str	r3, [r2, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 8009574:	6313      	str	r3, [r2, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 8009576:	6353      	str	r3, [r2, #52]	@ 0x34
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 8009578:	6051      	str	r1, [r2, #4]
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800957a:	6683      	str	r3, [r0, #104]	@ 0x68
  hmdma->LinkedListNodeCounter  = 0;
 800957c:	6643      	str	r3, [r0, #100]	@ 0x64
  hmdma->State = HAL_MDMA_STATE_RESET;
 800957e:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  __HAL_UNLOCK(hmdma);
 8009582:	f880 303c 	strb.w	r3, [r0, #60]	@ 0x3c
  hmdma->LastLinkedListNodeAddress   = 0;
 8009586:	e9c0 3317 	strd	r3, r3, [r0, #92]	@ 0x5c
  return HAL_OK;
 800958a:	4618      	mov	r0, r3
 800958c:	4770      	bx	lr
    return HAL_ERROR;
 800958e:	2001      	movs	r0, #1
}
 8009590:	4770      	bx	lr

08009592 <HAL_MDMA_ConfigPostRequestMask>:
  if(hmdma == NULL)
 8009592:	4603      	mov	r3, r0
{
 8009594:	b530      	push	{r4, r5, lr}
  if(hmdma == NULL)
 8009596:	b300      	cbz	r0, 80095da <HAL_MDMA_ConfigPostRequestMask+0x48>
  __HAL_LOCK(hmdma);
 8009598:	f890 003c 	ldrb.w	r0, [r0, #60]	@ 0x3c
 800959c:	2801      	cmp	r0, #1
 800959e:	d01e      	beq.n	80095de <HAL_MDMA_ConfigPostRequestMask+0x4c>
 80095a0:	2401      	movs	r4, #1
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80095a2:	f893 503d 	ldrb.w	r5, [r3, #61]	@ 0x3d
 80095a6:	42a5      	cmp	r5, r4
 80095a8:	b2e8      	uxtb	r0, r5
  __HAL_LOCK(hmdma);
 80095aa:	f883 403c 	strb.w	r4, [r3, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80095ae:	d112      	bne.n	80095d6 <HAL_MDMA_ConfigPostRequestMask+0x44>
    if((hmdma->Instance->CTCR & MDMA_CTCR_SWRM) == 0U)
 80095b0:	681c      	ldr	r4, [r3, #0]
 80095b2:	6925      	ldr	r5, [r4, #16]
 80095b4:	006d      	lsls	r5, r5, #1
 80095b6:	d407      	bmi.n	80095c8 <HAL_MDMA_ConfigPostRequestMask+0x36>
      hmdma->Instance->CMAR = MaskAddress;
 80095b8:	6321      	str	r1, [r4, #48]	@ 0x30
      hmdma->Instance->CMDR = MaskData;
 80095ba:	6362      	str	r2, [r4, #52]	@ 0x34
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80095bc:	6922      	ldr	r2, [r4, #16]
      if(MaskAddress == 0U)
 80095be:	b939      	cbnz	r1, 80095d0 <HAL_MDMA_ConfigPostRequestMask+0x3e>
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80095c0:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
  HAL_StatusTypeDef  status = HAL_OK;
 80095c4:	2000      	movs	r0, #0
        hmdma->Instance->CTCR &=  ~MDMA_CTCR_BWM;
 80095c6:	6122      	str	r2, [r4, #16]
  __HAL_UNLOCK(hmdma);
 80095c8:	2200      	movs	r2, #0
 80095ca:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80095ce:	bd30      	pop	{r4, r5, pc}
        hmdma->Instance->CTCR |=  MDMA_CTCR_BWM;
 80095d0:	f042 4200 	orr.w	r2, r2, #2147483648	@ 0x80000000
 80095d4:	e7f6      	b.n	80095c4 <HAL_MDMA_ConfigPostRequestMask+0x32>
      status =  HAL_ERROR;
 80095d6:	4620      	mov	r0, r4
 80095d8:	e7f6      	b.n	80095c8 <HAL_MDMA_ConfigPostRequestMask+0x36>
    return HAL_ERROR;
 80095da:	2001      	movs	r0, #1
 80095dc:	e7f7      	b.n	80095ce <HAL_MDMA_ConfigPostRequestMask+0x3c>
  __HAL_LOCK(hmdma);
 80095de:	2002      	movs	r0, #2
 80095e0:	e7f5      	b.n	80095ce <HAL_MDMA_ConfigPostRequestMask+0x3c>

080095e2 <HAL_MDMA_Start_IT>:
{
 80095e2:	b573      	push	{r0, r1, r4, r5, r6, lr}
  if(hmdma == NULL)
 80095e4:	4604      	mov	r4, r0
 80095e6:	2800      	cmp	r0, #0
 80095e8:	d042      	beq.n	8009670 <HAL_MDMA_Start_IT+0x8e>
  __HAL_LOCK(hmdma);
 80095ea:	f890 503c 	ldrb.w	r5, [r0, #60]	@ 0x3c
 80095ee:	2d01      	cmp	r5, #1
 80095f0:	d03c      	beq.n	800966c <HAL_MDMA_Start_IT+0x8a>
 80095f2:	2501      	movs	r5, #1
 80095f4:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  if(HAL_MDMA_STATE_READY == hmdma->State)
 80095f8:	f890 503d 	ldrb.w	r5, [r0, #61]	@ 0x3d
 80095fc:	2d01      	cmp	r5, #1
 80095fe:	f04f 0500 	mov.w	r5, #0
 8009602:	d131      	bne.n	8009668 <HAL_MDMA_Start_IT+0x86>
    hmdma->State = HAL_MDMA_STATE_BUSY;
 8009604:	2602      	movs	r6, #2
 8009606:	f880 603d 	strb.w	r6, [r0, #61]	@ 0x3d
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800960a:	6685      	str	r5, [r0, #104]	@ 0x68
    __HAL_MDMA_DISABLE(hmdma);
 800960c:	6805      	ldr	r5, [r0, #0]
 800960e:	68ee      	ldr	r6, [r5, #12]
 8009610:	f026 0601 	bic.w	r6, r6, #1
 8009614:	60ee      	str	r6, [r5, #12]
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 8009616:	9e06      	ldr	r6, [sp, #24]
 8009618:	9600      	str	r6, [sp, #0]
 800961a:	f7ff fefd 	bl	8009418 <MDMA_SetConfig>
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 800961e:	68eb      	ldr	r3, [r5, #12]
 8009620:	f043 0306 	orr.w	r3, r3, #6
 8009624:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBlockCpltCallback != NULL)
 8009626:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8009628:	b11b      	cbz	r3, 8009632 <HAL_MDMA_Start_IT+0x50>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 800962a:	68eb      	ldr	r3, [r5, #12]
 800962c:	f043 0310 	orr.w	r3, r3, #16
 8009630:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009632:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009634:	b11b      	cbz	r3, 800963e <HAL_MDMA_Start_IT+0x5c>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 8009636:	68eb      	ldr	r3, [r5, #12]
 8009638:	f043 0308 	orr.w	r3, r3, #8
 800963c:	60eb      	str	r3, [r5, #12]
    if(hmdma->XferBufferCpltCallback != NULL)
 800963e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009640:	b11b      	cbz	r3, 800964a <HAL_MDMA_Start_IT+0x68>
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 8009642:	68eb      	ldr	r3, [r5, #12]
 8009644:	f043 0320 	orr.w	r3, r3, #32
 8009648:	60eb      	str	r3, [r5, #12]
    __HAL_MDMA_ENABLE(hmdma);
 800964a:	68eb      	ldr	r3, [r5, #12]
 800964c:	f043 0301 	orr.w	r3, r3, #1
 8009650:	60eb      	str	r3, [r5, #12]
    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 8009652:	6863      	ldr	r3, [r4, #4]
 8009654:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009658:	d103      	bne.n	8009662 <HAL_MDMA_Start_IT+0x80>
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 800965a:	68eb      	ldr	r3, [r5, #12]
 800965c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009660:	60eb      	str	r3, [r5, #12]
  return HAL_OK;
 8009662:	2000      	movs	r0, #0
}
 8009664:	b002      	add	sp, #8
 8009666:	bd70      	pop	{r4, r5, r6, pc}
    __HAL_UNLOCK(hmdma);
 8009668:	f880 503c 	strb.w	r5, [r0, #60]	@ 0x3c
  __HAL_LOCK(hmdma);
 800966c:	2002      	movs	r0, #2
 800966e:	e7f9      	b.n	8009664 <HAL_MDMA_Start_IT+0x82>
    return HAL_ERROR;
 8009670:	2001      	movs	r0, #1
 8009672:	e7f7      	b.n	8009664 <HAL_MDMA_Start_IT+0x82>

08009674 <HAL_MDMA_Abort_IT>:
  if(hmdma == NULL)
 8009674:	b128      	cbz	r0, 8009682 <HAL_MDMA_Abort_IT+0xe>
  if(HAL_MDMA_STATE_BUSY != hmdma->State)
 8009676:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800967a:	2b02      	cmp	r3, #2
 800967c:	d003      	beq.n	8009686 <HAL_MDMA_Abort_IT+0x12>
    hmdma->ErrorCode = HAL_MDMA_ERROR_NO_XFER;
 800967e:	2380      	movs	r3, #128	@ 0x80
 8009680:	6683      	str	r3, [r0, #104]	@ 0x68
    return HAL_ERROR;
 8009682:	2001      	movs	r0, #1
 8009684:	4770      	bx	lr
    __HAL_MDMA_DISABLE(hmdma);
 8009686:	6802      	ldr	r2, [r0, #0]
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8009688:	2304      	movs	r3, #4
 800968a:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  return HAL_OK;
 800968e:	2000      	movs	r0, #0
    __HAL_MDMA_DISABLE(hmdma);
 8009690:	68d3      	ldr	r3, [r2, #12]
 8009692:	f023 0301 	bic.w	r3, r3, #1
 8009696:	60d3      	str	r3, [r2, #12]
}
 8009698:	4770      	bx	lr
	...

0800969c <HAL_MDMA_IRQHandler>:
  __IO uint32_t count = 0;
 800969c:	2300      	movs	r3, #0
{
 800969e:	b537      	push	{r0, r1, r2, r4, r5, lr}
  __IO uint32_t count = 0;
 80096a0:	9301      	str	r3, [sp, #4]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80096a2:	f04f 42a4 	mov.w	r2, #1375731712	@ 0x52000000
  uint32_t timeout = SystemCoreClock / 9600U;
 80096a6:	4b58      	ldr	r3, [pc, #352]	@ (8009808 <HAL_MDMA_IRQHandler+0x16c>)
{
 80096a8:	4604      	mov	r4, r0
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80096aa:	2101      	movs	r1, #1
  uint32_t timeout = SystemCoreClock / 9600U;
 80096ac:	681d      	ldr	r5, [r3, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80096ae:	6803      	ldr	r3, [r0, #0]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80096b0:	6810      	ldr	r0, [r2, #0]
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 80096b2:	f103 422e 	add.w	r2, r3, #2919235584	@ 0xae000000
 80096b6:	3a40      	subs	r2, #64	@ 0x40
 80096b8:	f3c2 1284 	ubfx	r2, r2, #6, #5
 80096bc:	fa01 f202 	lsl.w	r2, r1, r2
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 80096c0:	4202      	tst	r2, r0
 80096c2:	f000 809e 	beq.w	8009802 <HAL_MDMA_IRQHandler+0x166>
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 80096c6:	681a      	ldr	r2, [r3, #0]
 80096c8:	07d1      	lsls	r1, r2, #31
 80096ca:	d529      	bpl.n	8009720 <HAL_MDMA_IRQHandler+0x84>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 80096cc:	68da      	ldr	r2, [r3, #12]
 80096ce:	0792      	lsls	r2, r2, #30
 80096d0:	d526      	bpl.n	8009720 <HAL_MDMA_IRQHandler+0x84>
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	f022 0202 	bic.w	r2, r2, #2
 80096d8:	60da      	str	r2, [r3, #12]
      errorFlag = hmdma->Instance->CESR;
 80096da:	689a      	ldr	r2, [r3, #8]
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80096dc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TED) == 0U)
 80096de:	0610      	lsls	r0, r2, #24
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 80096e0:	bf54      	ite	pl
 80096e2:	f041 0101 	orrpl.w	r1, r1, #1
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80096e6:	f041 0102 	orrmi.w	r1, r1, #2
 80096ea:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80096ec:	0591      	lsls	r1, r2, #22
 80096ee:	d503      	bpl.n	80096f8 <HAL_MDMA_IRQHandler+0x5c>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80096f0:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80096f2:	f041 0104 	orr.w	r1, r1, #4
 80096f6:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80096f8:	05d0      	lsls	r0, r2, #23
 80096fa:	d503      	bpl.n	8009704 <HAL_MDMA_IRQHandler+0x68>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80096fc:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 80096fe:	f041 0108 	orr.w	r1, r1, #8
 8009702:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_ASE) != 0U)
 8009704:	0551      	lsls	r1, r2, #21
 8009706:	d503      	bpl.n	8009710 <HAL_MDMA_IRQHandler+0x74>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 8009708:	6ea1      	ldr	r1, [r4, #104]	@ 0x68
 800970a:	f041 0110 	orr.w	r1, r1, #16
 800970e:	66a1      	str	r1, [r4, #104]	@ 0x68
      if((errorFlag & MDMA_CESR_BSE) != 0U)
 8009710:	0512      	lsls	r2, r2, #20
 8009712:	d503      	bpl.n	800971c <HAL_MDMA_IRQHandler+0x80>
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 8009714:	6ea2      	ldr	r2, [r4, #104]	@ 0x68
 8009716:	f042 0220 	orr.w	r2, r2, #32
 800971a:	66a2      	str	r2, [r4, #104]	@ 0x68
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800971c:	2201      	movs	r2, #1
 800971e:	605a      	str	r2, [r3, #4]
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8009720:	681a      	ldr	r2, [r3, #0]
 8009722:	06d0      	lsls	r0, r2, #27
 8009724:	d508      	bpl.n	8009738 <HAL_MDMA_IRQHandler+0x9c>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8009726:	68da      	ldr	r2, [r3, #12]
 8009728:	0691      	lsls	r1, r2, #26
 800972a:	d505      	bpl.n	8009738 <HAL_MDMA_IRQHandler+0x9c>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800972c:	2210      	movs	r2, #16
 800972e:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBufferCpltCallback != NULL)
 8009730:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
 8009732:	b10b      	cbz	r3, 8009738 <HAL_MDMA_IRQHandler+0x9c>
        hmdma->XferBufferCpltCallback(hmdma);
 8009734:	4620      	mov	r0, r4
 8009736:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8009738:	6823      	ldr	r3, [r4, #0]
 800973a:	681a      	ldr	r2, [r3, #0]
 800973c:	0712      	lsls	r2, r2, #28
 800973e:	d508      	bpl.n	8009752 <HAL_MDMA_IRQHandler+0xb6>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8009740:	68da      	ldr	r2, [r3, #12]
 8009742:	06d0      	lsls	r0, r2, #27
 8009744:	d505      	bpl.n	8009752 <HAL_MDMA_IRQHandler+0xb6>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8009746:	2208      	movs	r2, #8
 8009748:	605a      	str	r2, [r3, #4]
      if(hmdma->XferBlockCpltCallback != NULL)
 800974a:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800974c:	b10b      	cbz	r3, 8009752 <HAL_MDMA_IRQHandler+0xb6>
        hmdma->XferBlockCpltCallback(hmdma);
 800974e:	4620      	mov	r0, r4
 8009750:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 8009752:	6823      	ldr	r3, [r4, #0]
 8009754:	681a      	ldr	r2, [r3, #0]
 8009756:	0751      	lsls	r1, r2, #29
 8009758:	d508      	bpl.n	800976c <HAL_MDMA_IRQHandler+0xd0>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800975a:	68da      	ldr	r2, [r3, #12]
 800975c:	0712      	lsls	r2, r2, #28
 800975e:	d505      	bpl.n	800976c <HAL_MDMA_IRQHandler+0xd0>
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8009760:	2204      	movs	r2, #4
 8009762:	605a      	str	r2, [r3, #4]
      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 8009764:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8009766:	b10b      	cbz	r3, 800976c <HAL_MDMA_IRQHandler+0xd0>
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 8009768:	4620      	mov	r0, r4
 800976a:	4798      	blx	r3
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800976c:	6823      	ldr	r3, [r4, #0]
 800976e:	681a      	ldr	r2, [r3, #0]
 8009770:	0790      	lsls	r0, r2, #30
 8009772:	d524      	bpl.n	80097be <HAL_MDMA_IRQHandler+0x122>
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 8009774:	68da      	ldr	r2, [r3, #12]
 8009776:	0751      	lsls	r1, r2, #29
 8009778:	d521      	bpl.n	80097be <HAL_MDMA_IRQHandler+0x122>
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800977a:	68da      	ldr	r2, [r3, #12]
 800977c:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 8009780:	60da      	str	r2, [r3, #12]
      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 8009782:	f894 203d 	ldrb.w	r2, [r4, #61]	@ 0x3d
 8009786:	2a04      	cmp	r2, #4
 8009788:	f04f 0200 	mov.w	r2, #0
 800978c:	d10c      	bne.n	80097a8 <HAL_MDMA_IRQHandler+0x10c>
        hmdma->State = HAL_MDMA_STATE_READY;
 800978e:	2301      	movs	r3, #1
        __HAL_UNLOCK(hmdma);
 8009790:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
        hmdma->State = HAL_MDMA_STATE_READY;
 8009794:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
        if(hmdma->XferAbortCallback != NULL)
 8009798:	6da3      	ldr	r3, [r4, #88]	@ 0x58
    if (hmdma->XferErrorCallback != NULL)
 800979a:	2b00      	cmp	r3, #0
 800979c:	d031      	beq.n	8009802 <HAL_MDMA_IRQHandler+0x166>
      hmdma->XferErrorCallback(hmdma);
 800979e:	4620      	mov	r0, r4
}
 80097a0:	b003      	add	sp, #12
 80097a2:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
      hmdma->XferErrorCallback(hmdma);
 80097a6:	4718      	bx	r3
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 80097a8:	2102      	movs	r1, #2
 80097aa:	6059      	str	r1, [r3, #4]
      hmdma->State = HAL_MDMA_STATE_READY;
 80097ac:	2301      	movs	r3, #1
      __HAL_UNLOCK(hmdma);
 80097ae:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
      hmdma->State = HAL_MDMA_STATE_READY;
 80097b2:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
      if(hmdma->XferCpltCallback != NULL)
 80097b6:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 80097b8:	b10b      	cbz	r3, 80097be <HAL_MDMA_IRQHandler+0x122>
        hmdma->XferCpltCallback(hmdma);
 80097ba:	4620      	mov	r0, r4
 80097bc:	4798      	blx	r3
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 80097be:	6ea3      	ldr	r3, [r4, #104]	@ 0x68
 80097c0:	b1fb      	cbz	r3, 8009802 <HAL_MDMA_IRQHandler+0x166>
  uint32_t timeout = SystemCoreClock / 9600U;
 80097c2:	f44f 5316 	mov.w	r3, #9600	@ 0x2580
 80097c6:	fbb5 f5f3 	udiv	r5, r5, r3
    hmdma->State = HAL_MDMA_STATE_ABORT;
 80097ca:	2304      	movs	r3, #4
 80097cc:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    __HAL_MDMA_DISABLE(hmdma);
 80097d0:	6823      	ldr	r3, [r4, #0]
 80097d2:	68da      	ldr	r2, [r3, #12]
 80097d4:	f022 0201 	bic.w	r2, r2, #1
 80097d8:	60da      	str	r2, [r3, #12]
      if (++count > timeout)
 80097da:	9a01      	ldr	r2, [sp, #4]
 80097dc:	3201      	adds	r2, #1
 80097de:	42aa      	cmp	r2, r5
 80097e0:	9201      	str	r2, [sp, #4]
 80097e2:	d802      	bhi.n	80097ea <HAL_MDMA_IRQHandler+0x14e>
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 80097e4:	68da      	ldr	r2, [r3, #12]
 80097e6:	07d2      	lsls	r2, r2, #31
 80097e8:	d4f7      	bmi.n	80097da <HAL_MDMA_IRQHandler+0x13e>
    __HAL_UNLOCK(hmdma);
 80097ea:	2200      	movs	r2, #0
 80097ec:	f884 203c 	strb.w	r2, [r4, #60]	@ 0x3c
    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 80097f0:	68db      	ldr	r3, [r3, #12]
 80097f2:	07db      	lsls	r3, r3, #31
      hmdma->State = HAL_MDMA_STATE_ERROR;
 80097f4:	bf4c      	ite	mi
 80097f6:	2303      	movmi	r3, #3
      hmdma->State = HAL_MDMA_STATE_READY;
 80097f8:	2301      	movpl	r3, #1
 80097fa:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
    if (hmdma->XferErrorCallback != NULL)
 80097fe:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8009800:	e7cb      	b.n	800979a <HAL_MDMA_IRQHandler+0xfe>
}
 8009802:	b003      	add	sp, #12
 8009804:	bd30      	pop	{r4, r5, pc}
 8009806:	bf00      	nop
 8009808:	2400009c 	.word	0x2400009c

0800980c <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 800980c:	b570      	push	{r4, r5, r6, lr}

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 800980e:	4d1c      	ldr	r5, [pc, #112]	@ (8009880 <HAL_PWREx_ConfigSupply+0x74>)
{
 8009810:	4604      	mov	r4, r0
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 8009812:	68eb      	ldr	r3, [r5, #12]
 8009814:	f003 0307 	and.w	r3, r3, #7
 8009818:	2b06      	cmp	r3, #6
 800981a:	d006      	beq.n	800982a <HAL_PWREx_ConfigSupply+0x1e>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 800981c:	68e8      	ldr	r0, [r5, #12]
 800981e:	f000 003f 	and.w	r0, r0, #63	@ 0x3f
 8009822:	1b00      	subs	r0, r0, r4
 8009824:	bf18      	it	ne
 8009826:	2001      	movne	r0, #1
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
}
 8009828:	bd70      	pop	{r4, r5, r6, pc}
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800982a:	68eb      	ldr	r3, [r5, #12]
 800982c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8009830:	4303      	orrs	r3, r0
 8009832:	60eb      	str	r3, [r5, #12]
  tickstart = HAL_GetTick ();
 8009834:	f7fc ff20 	bl	8006678 <HAL_GetTick>
 8009838:	4606      	mov	r6, r0
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 800983a:	686b      	ldr	r3, [r5, #4]
 800983c:	049a      	lsls	r2, r3, #18
 800983e:	d508      	bpl.n	8009852 <HAL_PWREx_ConfigSupply+0x46>
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8009840:	f1a4 031d 	sub.w	r3, r4, #29
 8009844:	2b01      	cmp	r3, #1
 8009846:	d90c      	bls.n	8009862 <HAL_PWREx_ConfigSupply+0x56>
 8009848:	3c2d      	subs	r4, #45	@ 0x2d
 800984a:	2c01      	cmp	r4, #1
 800984c:	d909      	bls.n	8009862 <HAL_PWREx_ConfigSupply+0x56>
      return HAL_OK;
 800984e:	2000      	movs	r0, #0
 8009850:	e7ea      	b.n	8009828 <HAL_PWREx_ConfigSupply+0x1c>
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009852:	f7fc ff11 	bl	8006678 <HAL_GetTick>
 8009856:	1b80      	subs	r0, r0, r6
 8009858:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800985c:	d9ed      	bls.n	800983a <HAL_PWREx_ConfigSupply+0x2e>
      return HAL_ERROR;
 800985e:	2001      	movs	r0, #1
 8009860:	e7e2      	b.n	8009828 <HAL_PWREx_ConfigSupply+0x1c>
    tickstart = HAL_GetTick ();
 8009862:	f7fc ff09 	bl	8006678 <HAL_GetTick>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8009866:	4d06      	ldr	r5, [pc, #24]	@ (8009880 <HAL_PWREx_ConfigSupply+0x74>)
    tickstart = HAL_GetTick ();
 8009868:	4604      	mov	r4, r0
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 800986a:	68eb      	ldr	r3, [r5, #12]
 800986c:	03db      	lsls	r3, r3, #15
 800986e:	d4ee      	bmi.n	800984e <HAL_PWREx_ConfigSupply+0x42>
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8009870:	f7fc ff02 	bl	8006678 <HAL_GetTick>
 8009874:	1b00      	subs	r0, r0, r4
 8009876:	f5b0 7f7a 	cmp.w	r0, #1000	@ 0x3e8
 800987a:	d9f6      	bls.n	800986a <HAL_PWREx_ConfigSupply+0x5e>
 800987c:	e7ef      	b.n	800985e <HAL_PWREx_ConfigSupply+0x52>
 800987e:	bf00      	nop
 8009880:	58024800 	.word	0x58024800

08009884 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8009884:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8009888:	6a4d      	ldr	r5, [r1, #36]	@ 0x24
 800988a:	b135      	cbz	r5, 800989a <QSPI_Config+0x16>
 800988c:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
 8009890:	d003      	beq.n	800989a <QSPI_Config+0x16>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8009892:	6a8b      	ldr	r3, [r1, #40]	@ 0x28
 8009894:	6804      	ldr	r4, [r0, #0]
 8009896:	3b01      	subs	r3, #1
 8009898:	6123      	str	r3, [r4, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 800989a:	f8d1 a018 	ldr.w	sl, [r1, #24]
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 800989e:	e9d1 7807 	ldrd	r7, r8, [r1, #28]
  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 80098a2:	f1ba 0f00 	cmp.w	sl, #0
 80098a6:	d04c      	beq.n	8009942 <QSPI_Config+0xbe>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098a8:	694c      	ldr	r4, [r1, #20]
 80098aa:	ea45 0a0a 	orr.w	sl, r5, sl
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 80098ae:	6806      	ldr	r6, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098b0:	680b      	ldr	r3, [r1, #0]
 80098b2:	04a4      	lsls	r4, r4, #18
 80098b4:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
 80098b8:	ea4a 0a02 	orr.w	sl, sl, r2
 80098bc:	e9d1 0e0b 	ldrd	r0, lr, [r1, #44]	@ 0x2c
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 80098c0:	f1b8 0f00 	cmp.w	r8, #0
 80098c4:	d026      	beq.n	8009914 <QSPI_Config+0x90>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80098c6:	688d      	ldr	r5, [r1, #8]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098c8:	f8d1 9010 	ldr.w	r9, [r1, #16]
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 80098cc:	61f5      	str	r5, [r6, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80098ce:	ea4a 0508 	orr.w	r5, sl, r8
 80098d2:	b19f      	cbz	r7, 80098fc <QSPI_Config+0x78>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098d4:	433b      	orrs	r3, r7
 80098d6:	4303      	orrs	r3, r0
 80098d8:	68c8      	ldr	r0, [r1, #12]
 80098da:	ea43 030e 	orr.w	r3, r3, lr
 80098de:	ea43 030c 	orr.w	r3, r3, ip
 80098e2:	ea43 0309 	orr.w	r3, r3, r9
 80098e6:	4303      	orrs	r3, r0
 80098e8:	4323      	orrs	r3, r4
 80098ea:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateByteMode | cmd->AddressSize | cmd->AddressMode |
                                         cmd->InstructionMode | cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098ec:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098f0:	6173      	str	r3, [r6, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80098f2:	d001      	beq.n	80098f8 <QSPI_Config+0x74>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80098f4:	684b      	ldr	r3, [r1, #4]
 80098f6:	61b3      	str	r3, [r6, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 80098f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80098fc:	4303      	orrs	r3, r0
 80098fe:	ea43 030e 	orr.w	r3, r3, lr
 8009902:	ea43 030c 	orr.w	r3, r3, ip
 8009906:	ea43 0309 	orr.w	r3, r3, r9
 800990a:	4323      	orrs	r3, r4
 800990c:	432b      	orrs	r3, r5
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800990e:	6173      	str	r3, [r6, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8009910:	61b7      	str	r7, [r6, #24]
 8009912:	e7f1      	b.n	80098f8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009914:	b15f      	cbz	r7, 800992e <QSPI_Config+0xaa>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009916:	433b      	orrs	r3, r7
 8009918:	4303      	orrs	r3, r0
 800991a:	68c8      	ldr	r0, [r1, #12]
 800991c:	ea43 030e 	orr.w	r3, r3, lr
 8009920:	ea43 030c 	orr.w	r3, r3, ip
 8009924:	4303      	orrs	r3, r0
 8009926:	4323      	orrs	r3, r4
 8009928:	ea43 030a 	orr.w	r3, r3, sl
 800992c:	e7de      	b.n	80098ec <QSPI_Config+0x68>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800992e:	4303      	orrs	r3, r0
 8009930:	ea43 030e 	orr.w	r3, r3, lr
 8009934:	ea43 050c 	orr.w	r5, r3, ip
 8009938:	ea45 0304 	orr.w	r3, r5, r4
 800993c:	ea43 030a 	orr.w	r3, r3, sl
 8009940:	e7e5      	b.n	800990e <QSPI_Config+0x8a>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8009942:	f1b8 0f00 	cmp.w	r8, #0
 8009946:	d02d      	beq.n	80099a4 <QSPI_Config+0x120>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009948:	688b      	ldr	r3, [r1, #8]
 800994a:	ea45 0508 	orr.w	r5, r5, r8
 800994e:	6804      	ldr	r4, [r0, #0]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009950:	694e      	ldr	r6, [r1, #20]
 8009952:	4315      	orrs	r5, r2
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8009954:	61e3      	str	r3, [r4, #28]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009956:	f8d1 c034 	ldr.w	ip, [r1, #52]	@ 0x34
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800995a:	04b6      	lsls	r6, r6, #18
 800995c:	690b      	ldr	r3, [r1, #16]
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800995e:	e9d1 9e0b 	ldrd	r9, lr, [r1, #44]	@ 0x2c
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8009962:	b1a7      	cbz	r7, 800998e <QSPI_Config+0x10a>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8009964:	433b      	orrs	r3, r7
 8009966:	68c8      	ldr	r0, [r1, #12]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009968:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800996c:	ea43 0309 	orr.w	r3, r3, r9
 8009970:	ea43 030e 	orr.w	r3, r3, lr
 8009974:	ea43 030c 	orr.w	r3, r3, ip
 8009978:	ea43 0300 	orr.w	r3, r3, r0
 800997c:	ea43 0306 	orr.w	r3, r3, r6
 8009980:	ea43 0305 	orr.w	r3, r3, r5
 8009984:	6163      	str	r3, [r4, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8009986:	d0b7      	beq.n	80098f8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8009988:	684b      	ldr	r3, [r1, #4]
 800998a:	61a3      	str	r3, [r4, #24]
 800998c:	e7b4      	b.n	80098f8 <QSPI_Config+0x74>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 800998e:	ea43 0209 	orr.w	r2, r3, r9
 8009992:	ea42 020e 	orr.w	r2, r2, lr
 8009996:	ea42 020c 	orr.w	r2, r2, ip
 800999a:	4332      	orrs	r2, r6
 800999c:	432a      	orrs	r2, r5
 800999e:	6162      	str	r2, [r4, #20]
        CLEAR_REG(hqspi->Instance->AR);
 80099a0:	61a7      	str	r7, [r4, #24]
 80099a2:	e7a9      	b.n	80098f8 <QSPI_Config+0x74>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 80099a4:	b1d7      	cbz	r7, 80099dc <QSPI_Config+0x158>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099a6:	ea45 0307 	orr.w	r3, r5, r7
 80099aa:	6acc      	ldr	r4, [r1, #44]	@ 0x2c
 80099ac:	6800      	ldr	r0, [r0, #0]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80099ae:	f1b2 6f40 	cmp.w	r2, #201326592	@ 0xc000000
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099b2:	ea43 0302 	orr.w	r3, r3, r2
 80099b6:	ea43 0304 	orr.w	r3, r3, r4
 80099ba:	6b0c      	ldr	r4, [r1, #48]	@ 0x30
 80099bc:	ea43 0304 	orr.w	r3, r3, r4
 80099c0:	6b4c      	ldr	r4, [r1, #52]	@ 0x34
 80099c2:	ea43 0304 	orr.w	r3, r3, r4
 80099c6:	68cc      	ldr	r4, [r1, #12]
 80099c8:	ea43 0304 	orr.w	r3, r3, r4
 80099cc:	694c      	ldr	r4, [r1, #20]
 80099ce:	ea43 4384 	orr.w	r3, r3, r4, lsl #18
 80099d2:	6143      	str	r3, [r0, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 80099d4:	d090      	beq.n	80098f8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 80099d6:	684b      	ldr	r3, [r1, #4]
 80099d8:	6183      	str	r3, [r0, #24]
 80099da:	e78d      	b.n	80098f8 <QSPI_Config+0x74>
        if (cmd->DataMode != QSPI_DATA_NONE)
 80099dc:	2d00      	cmp	r5, #0
 80099de:	d08b      	beq.n	80098f8 <QSPI_Config+0x74>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 80099e0:	6acb      	ldr	r3, [r1, #44]	@ 0x2c
 80099e2:	6800      	ldr	r0, [r0, #0]
 80099e4:	432b      	orrs	r3, r5
 80099e6:	431a      	orrs	r2, r3
 80099e8:	6b0b      	ldr	r3, [r1, #48]	@ 0x30
 80099ea:	431a      	orrs	r2, r3
 80099ec:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80099ee:	431a      	orrs	r2, r3
 80099f0:	694b      	ldr	r3, [r1, #20]
 80099f2:	ea42 4283 	orr.w	r2, r2, r3, lsl #18
 80099f6:	6142      	str	r2, [r0, #20]
          CLEAR_REG(hqspi->Instance->AR);
 80099f8:	6187      	str	r7, [r0, #24]
}
 80099fa:	e77d      	b.n	80098f8 <QSPI_Config+0x74>

080099fc <QSPI_WaitFlagStateUntilTimeout>:
{
 80099fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009a00:	f8dd 8018 	ldr.w	r8, [sp, #24]
 8009a04:	4604      	mov	r4, r0
 8009a06:	460e      	mov	r6, r1
 8009a08:	4615      	mov	r5, r2
 8009a0a:	461f      	mov	r7, r3
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8009a0c:	6822      	ldr	r2, [r4, #0]
 8009a0e:	6893      	ldr	r3, [r2, #8]
 8009a10:	4233      	tst	r3, r6
 8009a12:	bf14      	ite	ne
 8009a14:	2301      	movne	r3, #1
 8009a16:	2300      	moveq	r3, #0
 8009a18:	42ab      	cmp	r3, r5
 8009a1a:	d101      	bne.n	8009a20 <QSPI_WaitFlagStateUntilTimeout+0x24>
  return HAL_OK;
 8009a1c:	2000      	movs	r0, #0
 8009a1e:	e012      	b.n	8009a46 <QSPI_WaitFlagStateUntilTimeout+0x4a>
    if (Timeout != HAL_MAX_DELAY)
 8009a20:	f1b8 3fff 	cmp.w	r8, #4294967295
 8009a24:	d0f3      	beq.n	8009a0e <QSPI_WaitFlagStateUntilTimeout+0x12>
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009a26:	f7fc fe27 	bl	8006678 <HAL_GetTick>
 8009a2a:	1bc0      	subs	r0, r0, r7
 8009a2c:	4540      	cmp	r0, r8
 8009a2e:	d802      	bhi.n	8009a36 <QSPI_WaitFlagStateUntilTimeout+0x3a>
 8009a30:	f1b8 0f00 	cmp.w	r8, #0
 8009a34:	d1ea      	bne.n	8009a0c <QSPI_WaitFlagStateUntilTimeout+0x10>
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009a36:	2304      	movs	r3, #4
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009a38:	2001      	movs	r0, #1
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8009a3a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8009a3e:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009a40:	f043 0301 	orr.w	r3, r3, #1
 8009a44:	6463      	str	r3, [r4, #68]	@ 0x44
}
 8009a46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08009a4c <HAL_QSPI_Init>:
{
 8009a4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8009a4e:	4604      	mov	r4, r0
  uint32_t tickstart = HAL_GetTick();
 8009a50:	f7fc fe12 	bl	8006678 <HAL_GetTick>
 8009a54:	4605      	mov	r5, r0
  if(hqspi == NULL)
 8009a56:	2c00      	cmp	r4, #0
 8009a58:	d03f      	beq.n	8009ada <HAL_QSPI_Init+0x8e>
  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8009a5a:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009a5e:	b92b      	cbnz	r3, 8009a6c <HAL_QSPI_Init+0x20>
    HAL_QSPI_MspInit(hqspi);
 8009a60:	4620      	mov	r0, r4
 8009a62:	f7f7 fda9 	bl	80015b8 <HAL_QSPI_MspInit>
  hqspi->Timeout = Timeout;
 8009a66:	f241 3388 	movw	r3, #5000	@ 0x1388
 8009a6a:	64a3      	str	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009a6c:	6821      	ldr	r1, [r4, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009a6e:	4620      	mov	r0, r4
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009a70:	68a3      	ldr	r3, [r4, #8]
 8009a72:	680a      	ldr	r2, [r1, #0]
 8009a74:	3b01      	subs	r3, #1
 8009a76:	f422 52f8 	bic.w	r2, r2, #7936	@ 0x1f00
 8009a7a:	ea42 2203 	orr.w	r2, r2, r3, lsl #8
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009a7e:	6ca3      	ldr	r3, [r4, #72]	@ 0x48
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8009a80:	600a      	str	r2, [r1, #0]
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009a82:	2200      	movs	r2, #0
 8009a84:	9300      	str	r3, [sp, #0]
 8009a86:	2120      	movs	r1, #32
 8009a88:	462b      	mov	r3, r5
 8009a8a:	f7ff ffb7 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
  if(status == HAL_OK)
 8009a8e:	bb10      	cbnz	r0, 8009ad6 <HAL_QSPI_Init+0x8a>
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 8009a90:	6822      	ldr	r2, [r4, #0]
 8009a92:	69e5      	ldr	r5, [r4, #28]
 8009a94:	68e3      	ldr	r3, [r4, #12]
 8009a96:	6811      	ldr	r1, [r2, #0]
 8009a98:	432b      	orrs	r3, r5
 8009a9a:	6a25      	ldr	r5, [r4, #32]
 8009a9c:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8009aa0:	432b      	orrs	r3, r5
 8009aa2:	6865      	ldr	r5, [r4, #4]
 8009aa4:	f021 01d0 	bic.w	r1, r1, #208	@ 0xd0
 8009aa8:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
 8009aac:	430b      	orrs	r3, r1
 8009aae:	6013      	str	r3, [r2, #0]
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8009ab0:	6855      	ldr	r5, [r2, #4]
 8009ab2:	e9d4 3105 	ldrd	r3, r1, [r4, #20]
 8009ab6:	430b      	orrs	r3, r1
 8009ab8:	6921      	ldr	r1, [r4, #16]
 8009aba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8009abe:	4908      	ldr	r1, [pc, #32]	@ (8009ae0 <HAL_QSPI_Init+0x94>)
 8009ac0:	4029      	ands	r1, r5
 8009ac2:	430b      	orrs	r3, r1
 8009ac4:	6053      	str	r3, [r2, #4]
    __HAL_QSPI_ENABLE(hqspi);
 8009ac6:	6813      	ldr	r3, [r2, #0]
 8009ac8:	f043 0301 	orr.w	r3, r3, #1
 8009acc:	6013      	str	r3, [r2, #0]
    hqspi->State = HAL_QSPI_STATE_READY;
 8009ace:	2301      	movs	r3, #1
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009ad0:	6460      	str	r0, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_READY;
 8009ad2:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
}
 8009ad6:	b003      	add	sp, #12
 8009ad8:	bd30      	pop	{r4, r5, pc}
    return HAL_ERROR;
 8009ada:	2001      	movs	r0, #1
 8009adc:	e7fb      	b.n	8009ad6 <HAL_QSPI_Init+0x8a>
 8009ade:	bf00      	nop
 8009ae0:	ffe0f8fe 	.word	0xffe0f8fe

08009ae4 <HAL_QSPI_Command>:
{
 8009ae4:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ae8:	4604      	mov	r4, r0
 8009aea:	468a      	mov	sl, r1
 8009aec:	4690      	mov	r8, r2
  uint32_t tickstart = HAL_GetTick();
 8009aee:	f7fc fdc3 	bl	8006678 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009af2:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009af6:	4607      	mov	r7, r0
  __HAL_LOCK(hqspi);
 8009af8:	2b01      	cmp	r3, #1
 8009afa:	d036      	beq.n	8009b6a <HAL_QSPI_Command+0x86>
 8009afc:	2301      	movs	r3, #1
 8009afe:	2602      	movs	r6, #2
 8009b00:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009b04:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009b08:	2b01      	cmp	r3, #1
 8009b0a:	fa5f f983 	uxtb.w	r9, r3
 8009b0e:	d128      	bne.n	8009b62 <HAL_QSPI_Command+0x7e>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b10:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009b12:	4603      	mov	r3, r0
 8009b14:	2120      	movs	r1, #32
 8009b16:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b18:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8009b1a:	f884 6041 	strb.w	r6, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009b1e:	f8cd 8000 	str.w	r8, [sp]
 8009b22:	f7ff ff6b 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009b26:	4605      	mov	r5, r0
 8009b28:	b9a0      	cbnz	r0, 8009b54 <HAL_QSPI_Command+0x70>
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009b2a:	4602      	mov	r2, r0
 8009b2c:	4651      	mov	r1, sl
 8009b2e:	4620      	mov	r0, r4
 8009b30:	f7ff fea8 	bl	8009884 <QSPI_Config>
      if (cmd->DataMode == QSPI_DATA_NONE)
 8009b34:	f8da 3024 	ldr.w	r3, [sl, #36]	@ 0x24
 8009b38:	b953      	cbnz	r3, 8009b50 <HAL_QSPI_Command+0x6c>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009b3a:	463b      	mov	r3, r7
 8009b3c:	464a      	mov	r2, r9
 8009b3e:	4631      	mov	r1, r6
 8009b40:	4620      	mov	r0, r4
 8009b42:	f8cd 8000 	str.w	r8, [sp]
 8009b46:	f7ff ff59 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009b4a:	b960      	cbnz	r0, 8009b66 <HAL_QSPI_Command+0x82>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009b4c:	6823      	ldr	r3, [r4, #0]
 8009b4e:	60de      	str	r6, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009b50:	f884 9041 	strb.w	r9, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009b54:	2300      	movs	r3, #0
 8009b56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009b5a:	4628      	mov	r0, r5
 8009b5c:	b002      	add	sp, #8
 8009b5e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    status = HAL_BUSY;
 8009b62:	4635      	mov	r5, r6
 8009b64:	e7f6      	b.n	8009b54 <HAL_QSPI_Command+0x70>
 8009b66:	4605      	mov	r5, r0
 8009b68:	e7f4      	b.n	8009b54 <HAL_QSPI_Command+0x70>
  __HAL_LOCK(hqspi);
 8009b6a:	2502      	movs	r5, #2
 8009b6c:	e7f5      	b.n	8009b5a <HAL_QSPI_Command+0x76>

08009b6e <HAL_QSPI_Transmit>:
{
 8009b6e:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009b72:	4604      	mov	r4, r0
 8009b74:	4688      	mov	r8, r1
 8009b76:	4617      	mov	r7, r2
  uint32_t tickstart = HAL_GetTick();
 8009b78:	f7fc fd7e 	bl	8006678 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009b7c:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009b80:	4606      	mov	r6, r0
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8009b82:	6825      	ldr	r5, [r4, #0]
  __HAL_LOCK(hqspi);
 8009b84:	2b01      	cmp	r3, #1
 8009b86:	d04c      	beq.n	8009c22 <HAL_QSPI_Transmit+0xb4>
 8009b88:	2301      	movs	r3, #1
 8009b8a:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009b8e:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	b2d8      	uxtb	r0, r3
 8009b96:	d142      	bne.n	8009c1e <HAL_QSPI_Transmit+0xb0>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009b9c:	f1b8 0f00 	cmp.w	r8, #0
 8009ba0:	d038      	beq.n	8009c14 <HAL_QSPI_Transmit+0xa6>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 8009ba2:	2312      	movs	r3, #18
 8009ba4:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009ba8:	692b      	ldr	r3, [r5, #16]
 8009baa:	3301      	adds	r3, #1
 8009bac:	62e3      	str	r3, [r4, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009bae:	692b      	ldr	r3, [r5, #16]
      hqspi->pTxBuffPtr = pData;
 8009bb0:	f8c4 8024 	str.w	r8, [r4, #36]	@ 0x24
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009bb4:	3301      	adds	r3, #1
 8009bb6:	62a3      	str	r3, [r4, #40]	@ 0x28
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 8009bb8:	696b      	ldr	r3, [r5, #20]
 8009bba:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8009bbe:	616b      	str	r3, [r5, #20]
      while(hqspi->TxXferCount > 0U)
 8009bc0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009bc2:	b99b      	cbnz	r3, 8009bec <HAL_QSPI_Transmit+0x7e>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009bc4:	4633      	mov	r3, r6
 8009bc6:	2201      	movs	r2, #1
 8009bc8:	2102      	movs	r1, #2
 8009bca:	4620      	mov	r0, r4
 8009bcc:	9700      	str	r7, [sp, #0]
 8009bce:	f7ff ff15 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
        if (status == HAL_OK)
 8009bd2:	b910      	cbnz	r0, 8009bda <HAL_QSPI_Transmit+0x6c>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009bd4:	6823      	ldr	r3, [r4, #0]
 8009bd6:	2202      	movs	r2, #2
 8009bd8:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009be0:	2300      	movs	r3, #0
 8009be2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009be6:	b002      	add	sp, #8
 8009be8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8009bec:	4633      	mov	r3, r6
 8009bee:	2201      	movs	r2, #1
 8009bf0:	2104      	movs	r1, #4
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	9700      	str	r7, [sp, #0]
 8009bf6:	f7ff ff01 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
        if (status != HAL_OK)
 8009bfa:	2800      	cmp	r0, #0
 8009bfc:	d1ed      	bne.n	8009bda <HAL_QSPI_Transmit+0x6c>
        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8009bfe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c00:	781b      	ldrb	r3, [r3, #0]
 8009c02:	f885 3020 	strb.w	r3, [r5, #32]
        hqspi->pTxBuffPtr++;
 8009c06:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8009c08:	3301      	adds	r3, #1
 8009c0a:	6263      	str	r3, [r4, #36]	@ 0x24
        hqspi->TxXferCount--;
 8009c0c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 8009c0e:	3b01      	subs	r3, #1
 8009c10:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8009c12:	e7d5      	b.n	8009bc0 <HAL_QSPI_Transmit+0x52>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009c14:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009c16:	f043 0308 	orr.w	r3, r3, #8
 8009c1a:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009c1c:	e7e0      	b.n	8009be0 <HAL_QSPI_Transmit+0x72>
    status = HAL_BUSY;
 8009c1e:	2002      	movs	r0, #2
 8009c20:	e7de      	b.n	8009be0 <HAL_QSPI_Transmit+0x72>
  __HAL_LOCK(hqspi);
 8009c22:	2002      	movs	r0, #2
 8009c24:	e7df      	b.n	8009be6 <HAL_QSPI_Transmit+0x78>

08009c26 <HAL_QSPI_Receive>:
{
 8009c26:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8009c2a:	4604      	mov	r4, r0
 8009c2c:	4617      	mov	r7, r2
 8009c2e:	4688      	mov	r8, r1
  uint32_t tickstart = HAL_GetTick();
 8009c30:	f7fc fd22 	bl	8006678 <HAL_GetTick>
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009c34:	6825      	ldr	r5, [r4, #0]
  uint32_t tickstart = HAL_GetTick();
 8009c36:	4606      	mov	r6, r0
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8009c38:	69aa      	ldr	r2, [r5, #24]
  __HAL_LOCK(hqspi);
 8009c3a:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
 8009c3e:	2b01      	cmp	r3, #1
 8009c40:	d04f      	beq.n	8009ce2 <HAL_QSPI_Receive+0xbc>
 8009c42:	2301      	movs	r3, #1
 8009c44:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009c48:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009c4c:	2b01      	cmp	r3, #1
 8009c4e:	b2d8      	uxtb	r0, r3
 8009c50:	d145      	bne.n	8009cde <HAL_QSPI_Receive+0xb8>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009c52:	2300      	movs	r3, #0
 8009c54:	6463      	str	r3, [r4, #68]	@ 0x44
    if(pData != NULL )
 8009c56:	f1b8 0f00 	cmp.w	r8, #0
 8009c5a:	d03b      	beq.n	8009cd4 <HAL_QSPI_Receive+0xae>
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8009c5c:	2322      	movs	r3, #34	@ 0x22
 8009c5e:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c62:	692b      	ldr	r3, [r5, #16]
 8009c64:	3301      	adds	r3, #1
 8009c66:	63a3      	str	r3, [r4, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c68:	692b      	ldr	r3, [r5, #16]
      hqspi->pRxBuffPtr = pData;
 8009c6a:	f8c4 8030 	str.w	r8, [r4, #48]	@ 0x30
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8009c6e:	3301      	adds	r3, #1
 8009c70:	6363      	str	r3, [r4, #52]	@ 0x34
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8009c72:	6969      	ldr	r1, [r5, #20]
 8009c74:	f021 6140 	bic.w	r1, r1, #201326592	@ 0xc000000
 8009c78:	f041 6180 	orr.w	r1, r1, #67108864	@ 0x4000000
 8009c7c:	6169      	str	r1, [r5, #20]
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8009c7e:	61aa      	str	r2, [r5, #24]
      while(hqspi->RxXferCount > 0U)
 8009c80:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009c82:	b99b      	cbnz	r3, 8009cac <HAL_QSPI_Receive+0x86>
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8009c84:	4633      	mov	r3, r6
 8009c86:	2201      	movs	r2, #1
 8009c88:	2102      	movs	r1, #2
 8009c8a:	4620      	mov	r0, r4
 8009c8c:	9700      	str	r7, [sp, #0]
 8009c8e:	f7ff feb5 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
        if  (status == HAL_OK)
 8009c92:	b910      	cbnz	r0, 8009c9a <HAL_QSPI_Receive+0x74>
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8009c94:	6823      	ldr	r3, [r4, #0]
 8009c96:	2202      	movs	r2, #2
 8009c98:	60da      	str	r2, [r3, #12]
      hqspi->State = HAL_QSPI_STATE_READY;
 8009c9a:	2301      	movs	r3, #1
 8009c9c:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009ca0:	2300      	movs	r3, #0
 8009ca2:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009ca6:	b002      	add	sp, #8
 8009ca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8009cac:	4633      	mov	r3, r6
 8009cae:	2201      	movs	r2, #1
 8009cb0:	2106      	movs	r1, #6
 8009cb2:	4620      	mov	r0, r4
 8009cb4:	9700      	str	r7, [sp, #0]
 8009cb6:	f7ff fea1 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
        if  (status != HAL_OK)
 8009cba:	2800      	cmp	r0, #0
 8009cbc:	d1ed      	bne.n	8009c9a <HAL_QSPI_Receive+0x74>
        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8009cbe:	f895 2020 	ldrb.w	r2, [r5, #32]
 8009cc2:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009cc4:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8009cc6:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8009cc8:	3301      	adds	r3, #1
 8009cca:	6323      	str	r3, [r4, #48]	@ 0x30
        hqspi->RxXferCount--;
 8009ccc:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 8009cce:	3b01      	subs	r3, #1
 8009cd0:	63a3      	str	r3, [r4, #56]	@ 0x38
 8009cd2:	e7d5      	b.n	8009c80 <HAL_QSPI_Receive+0x5a>
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8009cd4:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 8009cd6:	f043 0308 	orr.w	r3, r3, #8
 8009cda:	6463      	str	r3, [r4, #68]	@ 0x44
      status = HAL_ERROR;
 8009cdc:	e7e0      	b.n	8009ca0 <HAL_QSPI_Receive+0x7a>
    status = HAL_BUSY;
 8009cde:	2002      	movs	r0, #2
 8009ce0:	e7de      	b.n	8009ca0 <HAL_QSPI_Receive+0x7a>
  __HAL_LOCK(hqspi);
 8009ce2:	2002      	movs	r0, #2
 8009ce4:	e7df      	b.n	8009ca6 <HAL_QSPI_Receive+0x80>

08009ce6 <HAL_QSPI_AutoPolling>:
{
 8009ce6:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009cea:	4604      	mov	r4, r0
 8009cec:	461f      	mov	r7, r3
 8009cee:	4689      	mov	r9, r1
 8009cf0:	4615      	mov	r5, r2
  uint32_t tickstart = HAL_GetTick();
 8009cf2:	f7fc fcc1 	bl	8006678 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009cf6:	f894 3040 	ldrb.w	r3, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009cfa:	4606      	mov	r6, r0
  __HAL_LOCK(hqspi);
 8009cfc:	2b01      	cmp	r3, #1
 8009cfe:	d041      	beq.n	8009d84 <HAL_QSPI_AutoPolling+0x9e>
 8009d00:	2301      	movs	r3, #1
 8009d02:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009d06:	f894 3041 	ldrb.w	r3, [r4, #65]	@ 0x41
 8009d0a:	2b01      	cmp	r3, #1
 8009d0c:	fa5f f883 	uxtb.w	r8, r3
 8009d10:	d136      	bne.n	8009d80 <HAL_QSPI_AutoPolling+0x9a>
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009d12:	2342      	movs	r3, #66	@ 0x42
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009d14:	2200      	movs	r2, #0
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d16:	2120      	movs	r1, #32
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009d18:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8009d1a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8009d1e:	4603      	mov	r3, r0
 8009d20:	9700      	str	r7, [sp, #0]
 8009d22:	4620      	mov	r0, r4
 8009d24:	f7ff fe6a 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009d28:	bb20      	cbnz	r0, 8009d74 <HAL_QSPI_AutoPolling+0x8e>
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009d2a:	6822      	ldr	r2, [r4, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009d2c:	4620      	mov	r0, r4
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009d2e:	682b      	ldr	r3, [r5, #0]
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009d30:	6929      	ldr	r1, [r5, #16]
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8009d32:	6293      	str	r3, [r2, #40]	@ 0x28
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8009d34:	686b      	ldr	r3, [r5, #4]
 8009d36:	6253      	str	r3, [r2, #36]	@ 0x24
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8009d38:	68ab      	ldr	r3, [r5, #8]
 8009d3a:	62d3      	str	r3, [r2, #44]	@ 0x2c
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009d3c:	6813      	ldr	r3, [r2, #0]
 8009d3e:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 8009d42:	430b      	orrs	r3, r1
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009d44:	4649      	mov	r1, r9
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8009d46:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8009d4a:	6013      	str	r3, [r2, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009d4c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
      cmd->NbData = cfg->StatusBytesSize;
 8009d50:	68eb      	ldr	r3, [r5, #12]
 8009d52:	f8c9 3028 	str.w	r3, [r9, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8009d56:	f7ff fd95 	bl	8009884 <QSPI_Config>
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8009d5a:	4633      	mov	r3, r6
 8009d5c:	4642      	mov	r2, r8
 8009d5e:	2108      	movs	r1, #8
 8009d60:	4620      	mov	r0, r4
 8009d62:	9700      	str	r7, [sp, #0]
 8009d64:	f7ff fe4a 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
      if (status == HAL_OK)
 8009d68:	b920      	cbnz	r0, 8009d74 <HAL_QSPI_AutoPolling+0x8e>
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8009d6a:	6823      	ldr	r3, [r4, #0]
 8009d6c:	2208      	movs	r2, #8
 8009d6e:	60da      	str	r2, [r3, #12]
        hqspi->State = HAL_QSPI_STATE_READY;
 8009d70:	f884 8041 	strb.w	r8, [r4, #65]	@ 0x41
  __HAL_UNLOCK(hqspi);
 8009d74:	2300      	movs	r3, #0
 8009d76:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009d7a:	b003      	add	sp, #12
 8009d7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    status = HAL_BUSY;
 8009d80:	2002      	movs	r0, #2
 8009d82:	e7f7      	b.n	8009d74 <HAL_QSPI_AutoPolling+0x8e>
  __HAL_LOCK(hqspi);
 8009d84:	2002      	movs	r0, #2
 8009d86:	e7f8      	b.n	8009d7a <HAL_QSPI_AutoPolling+0x94>

08009d88 <HAL_QSPI_MemoryMapped>:
{
 8009d88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009d8a:	4604      	mov	r4, r0
 8009d8c:	4616      	mov	r6, r2
 8009d8e:	460f      	mov	r7, r1
  uint32_t tickstart = HAL_GetTick();
 8009d90:	f7fc fc72 	bl	8006678 <HAL_GetTick>
  __HAL_LOCK(hqspi);
 8009d94:	f894 2040 	ldrb.w	r2, [r4, #64]	@ 0x40
  uint32_t tickstart = HAL_GetTick();
 8009d98:	4603      	mov	r3, r0
  __HAL_LOCK(hqspi);
 8009d9a:	2a01      	cmp	r2, #1
 8009d9c:	d033      	beq.n	8009e06 <HAL_QSPI_MemoryMapped+0x7e>
 8009d9e:	2201      	movs	r2, #1
 8009da0:	f884 2040 	strb.w	r2, [r4, #64]	@ 0x40
  if(hqspi->State == HAL_QSPI_STATE_READY)
 8009da4:	f894 2041 	ldrb.w	r2, [r4, #65]	@ 0x41
 8009da8:	2a01      	cmp	r2, #1
 8009daa:	d12a      	bne.n	8009e02 <HAL_QSPI_MemoryMapped+0x7a>
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009dac:	2200      	movs	r2, #0
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009dae:	2182      	movs	r1, #130	@ 0x82
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009db0:	4620      	mov	r0, r4
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8009db2:	6462      	str	r2, [r4, #68]	@ 0x44
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8009db4:	f884 1041 	strb.w	r1, [r4, #65]	@ 0x41
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8009db8:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8009dba:	9100      	str	r1, [sp, #0]
 8009dbc:	2120      	movs	r1, #32
 8009dbe:	f7ff fe1d 	bl	80099fc <QSPI_WaitFlagStateUntilTimeout>
    if (status == HAL_OK)
 8009dc2:	4605      	mov	r5, r0
 8009dc4:	b9b8      	cbnz	r0, 8009df6 <HAL_QSPI_MemoryMapped+0x6e>
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009dc6:	6823      	ldr	r3, [r4, #0]
 8009dc8:	6872      	ldr	r2, [r6, #4]
 8009dca:	6818      	ldr	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009dcc:	2a08      	cmp	r2, #8
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8009dce:	f020 0008 	bic.w	r0, r0, #8
 8009dd2:	ea40 0002 	orr.w	r0, r0, r2
 8009dd6:	6018      	str	r0, [r3, #0]
    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8009dd8:	d107      	bne.n	8009dea <HAL_QSPI_MemoryMapped+0x62>
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8009dda:	6832      	ldr	r2, [r6, #0]
 8009ddc:	631a      	str	r2, [r3, #48]	@ 0x30
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8009dde:	2210      	movs	r2, #16
 8009de0:	60da      	str	r2, [r3, #12]
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8009de2:	681a      	ldr	r2, [r3, #0]
 8009de4:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8009de8:	601a      	str	r2, [r3, #0]
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8009dea:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8009dee:	4639      	mov	r1, r7
 8009df0:	4620      	mov	r0, r4
 8009df2:	f7ff fd47 	bl	8009884 <QSPI_Config>
  __HAL_UNLOCK(hqspi);
 8009df6:	2300      	movs	r3, #0
 8009df8:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
}
 8009dfc:	4628      	mov	r0, r5
 8009dfe:	b003      	add	sp, #12
 8009e00:	bdf0      	pop	{r4, r5, r6, r7, pc}
    status = HAL_BUSY;
 8009e02:	2502      	movs	r5, #2
 8009e04:	e7f7      	b.n	8009df6 <HAL_QSPI_MemoryMapped+0x6e>
  __HAL_LOCK(hqspi);
 8009e06:	2502      	movs	r5, #2
 8009e08:	e7f8      	b.n	8009dfc <HAL_QSPI_MemoryMapped+0x74>
	...

08009e0c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8009e0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8009e0e:	4604      	mov	r4, r0
 8009e10:	2800      	cmp	r0, #0
 8009e12:	d074      	beq.n	8009efe <HAL_RCC_OscConfig+0xf2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8009e14:	6803      	ldr	r3, [r0, #0]
 8009e16:	07d8      	lsls	r0, r3, #31
 8009e18:	d45e      	bmi.n	8009ed8 <HAL_RCC_OscConfig+0xcc>
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8009e1a:	6823      	ldr	r3, [r4, #0]
 8009e1c:	0799      	lsls	r1, r3, #30
 8009e1e:	f100 80ad 	bmi.w	8009f7c <HAL_RCC_OscConfig+0x170>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8009e22:	6823      	ldr	r3, [r4, #0]
 8009e24:	06da      	lsls	r2, r3, #27
 8009e26:	d527      	bpl.n	8009e78 <HAL_RCC_OscConfig+0x6c>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e28:	4a9c      	ldr	r2, [pc, #624]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009e2a:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009e2c:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009e2e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8009e32:	2b08      	cmp	r3, #8
 8009e34:	d007      	beq.n	8009e46 <HAL_RCC_OscConfig+0x3a>
 8009e36:	2b18      	cmp	r3, #24
 8009e38:	f040 8103 	bne.w	800a042 <HAL_RCC_OscConfig+0x236>
 8009e3c:	f001 0303 	and.w	r3, r1, #3
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	f040 80fe 	bne.w	800a042 <HAL_RCC_OscConfig+0x236>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8009e46:	6813      	ldr	r3, [r2, #0]
 8009e48:	05db      	lsls	r3, r3, #23
 8009e4a:	d502      	bpl.n	8009e52 <HAL_RCC_OscConfig+0x46>
 8009e4c:	69e3      	ldr	r3, [r4, #28]
 8009e4e:	2b80      	cmp	r3, #128	@ 0x80
 8009e50:	d155      	bne.n	8009efe <HAL_RCC_OscConfig+0xf2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8009e52:	f7fc fc29 	bl	80066a8 <HAL_GetREVID>
 8009e56:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009e5a:	6a21      	ldr	r1, [r4, #32]
 8009e5c:	4298      	cmp	r0, r3
 8009e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009e60:	f200 80e8 	bhi.w	800a034 <HAL_RCC_OscConfig+0x228>
 8009e64:	685a      	ldr	r2, [r3, #4]
 8009e66:	2920      	cmp	r1, #32
 8009e68:	f022 42f8 	bic.w	r2, r2, #2080374784	@ 0x7c000000
 8009e6c:	bf0c      	ite	eq
 8009e6e:	f042 4280 	orreq.w	r2, r2, #1073741824	@ 0x40000000
 8009e72:	ea42 6281 	orrne.w	r2, r2, r1, lsl #26
 8009e76:	605a      	str	r2, [r3, #4]
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8009e78:	6823      	ldr	r3, [r4, #0]
 8009e7a:	0719      	lsls	r1, r3, #28
 8009e7c:	f100 8123 	bmi.w	800a0c6 <HAL_RCC_OscConfig+0x2ba>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8009e80:	6823      	ldr	r3, [r4, #0]
 8009e82:	069a      	lsls	r2, r3, #26
 8009e84:	f100 8144 	bmi.w	800a110 <HAL_RCC_OscConfig+0x304>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009e88:	6823      	ldr	r3, [r4, #0]
 8009e8a:	075d      	lsls	r5, r3, #29
 8009e8c:	d51e      	bpl.n	8009ecc <HAL_RCC_OscConfig+0xc0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009e8e:	4d84      	ldr	r5, [pc, #528]	@ (800a0a0 <HAL_RCC_OscConfig+0x294>)
 8009e90:	682b      	ldr	r3, [r5, #0]
 8009e92:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8009e96:	602b      	str	r3, [r5, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8009e98:	f7fc fbee 	bl	8006678 <HAL_GetTick>
 8009e9c:	4606      	mov	r6, r0

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8009e9e:	682b      	ldr	r3, [r5, #0]
 8009ea0:	05da      	lsls	r2, r3, #23
 8009ea2:	f140 815a 	bpl.w	800a15a <HAL_RCC_OscConfig+0x34e>
        return HAL_TIMEOUT;
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8009ea6:	68a3      	ldr	r3, [r4, #8]
 8009ea8:	4d7c      	ldr	r5, [pc, #496]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009eaa:	2b01      	cmp	r3, #1
 8009eac:	f040 815c 	bne.w	800a168 <HAL_RCC_OscConfig+0x35c>
 8009eb0:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 8009eb2:	f043 0301 	orr.w	r3, r3, #1
 8009eb6:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8009eb8:	f241 3788 	movw	r7, #5000	@ 0x1388
      tickstart = HAL_GetTick();
 8009ebc:	f7fc fbdc 	bl	8006678 <HAL_GetTick>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ec0:	4e76      	ldr	r6, [pc, #472]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
      tickstart = HAL_GetTick();
 8009ec2:	4605      	mov	r5, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8009ec4:	6f33      	ldr	r3, [r6, #112]	@ 0x70
 8009ec6:	079b      	lsls	r3, r3, #30
 8009ec8:	f140 8174 	bpl.w	800a1b4 <HAL_RCC_OscConfig+0x3a8>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8009ecc:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 8009ece:	2900      	cmp	r1, #0
 8009ed0:	f040 8177 	bne.w	800a1c2 <HAL_RCC_OscConfig+0x3b6>
          __HAL_RCC_PLLFRACN_ENABLE();
        }
      }
    }
  }
  return HAL_OK;
 8009ed4:	2000      	movs	r0, #0
 8009ed6:	e02b      	b.n	8009f30 <HAL_RCC_OscConfig+0x124>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ed8:	4a70      	ldr	r2, [pc, #448]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009eda:	6913      	ldr	r3, [r2, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009edc:	6a91      	ldr	r1, [r2, #40]	@ 0x28
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009ede:	f003 0338 	and.w	r3, r3, #56	@ 0x38
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 8009ee2:	2b10      	cmp	r3, #16
 8009ee4:	d005      	beq.n	8009ef2 <HAL_RCC_OscConfig+0xe6>
 8009ee6:	2b18      	cmp	r3, #24
 8009ee8:	d10b      	bne.n	8009f02 <HAL_RCC_OscConfig+0xf6>
 8009eea:	f001 0303 	and.w	r3, r1, #3
 8009eee:	2b02      	cmp	r3, #2
 8009ef0:	d107      	bne.n	8009f02 <HAL_RCC_OscConfig+0xf6>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8009ef2:	6813      	ldr	r3, [r2, #0]
 8009ef4:	039a      	lsls	r2, r3, #14
 8009ef6:	d590      	bpl.n	8009e1a <HAL_RCC_OscConfig+0xe>
 8009ef8:	6863      	ldr	r3, [r4, #4]
 8009efa:	2b00      	cmp	r3, #0
 8009efc:	d18d      	bne.n	8009e1a <HAL_RCC_OscConfig+0xe>
    return HAL_ERROR;
 8009efe:	2001      	movs	r0, #1
 8009f00:	e016      	b.n	8009f30 <HAL_RCC_OscConfig+0x124>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f02:	6863      	ldr	r3, [r4, #4]
 8009f04:	4d65      	ldr	r5, [pc, #404]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8009f0a:	d112      	bne.n	8009f32 <HAL_RCC_OscConfig+0x126>
 8009f0c:	682b      	ldr	r3, [r5, #0]
 8009f0e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009f12:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f14:	f7fc fbb0 	bl	8006678 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f18:	4e60      	ldr	r6, [pc, #384]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
        tickstart = HAL_GetTick();
 8009f1a:	4605      	mov	r5, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8009f1c:	6833      	ldr	r3, [r6, #0]
 8009f1e:	039b      	lsls	r3, r3, #14
 8009f20:	f53f af7b 	bmi.w	8009e1a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f24:	f7fc fba8 	bl	8006678 <HAL_GetTick>
 8009f28:	1b40      	subs	r0, r0, r5
 8009f2a:	2864      	cmp	r0, #100	@ 0x64
 8009f2c:	d9f6      	bls.n	8009f1c <HAL_RCC_OscConfig+0x110>
            return HAL_TIMEOUT;
 8009f2e:	2003      	movs	r0, #3
}
 8009f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f32:	b9a3      	cbnz	r3, 8009f5e <HAL_RCC_OscConfig+0x152>
 8009f34:	682b      	ldr	r3, [r5, #0]
 8009f36:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f3a:	602b      	str	r3, [r5, #0]
 8009f3c:	682b      	ldr	r3, [r5, #0]
 8009f3e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f42:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009f44:	f7fc fb98 	bl	8006678 <HAL_GetTick>
 8009f48:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8009f4a:	682b      	ldr	r3, [r5, #0]
 8009f4c:	039f      	lsls	r7, r3, #14
 8009f4e:	f57f af64 	bpl.w	8009e1a <HAL_RCC_OscConfig+0xe>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8009f52:	f7fc fb91 	bl	8006678 <HAL_GetTick>
 8009f56:	1b80      	subs	r0, r0, r6
 8009f58:	2864      	cmp	r0, #100	@ 0x64
 8009f5a:	d9f6      	bls.n	8009f4a <HAL_RCC_OscConfig+0x13e>
 8009f5c:	e7e7      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8009f5e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8009f62:	682b      	ldr	r3, [r5, #0]
 8009f64:	d103      	bne.n	8009f6e <HAL_RCC_OscConfig+0x162>
 8009f66:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009f6a:	602b      	str	r3, [r5, #0]
 8009f6c:	e7ce      	b.n	8009f0c <HAL_RCC_OscConfig+0x100>
 8009f6e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009f72:	602b      	str	r3, [r5, #0]
 8009f74:	682b      	ldr	r3, [r5, #0]
 8009f76:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8009f7a:	e7ca      	b.n	8009f12 <HAL_RCC_OscConfig+0x106>
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8009f7c:	4947      	ldr	r1, [pc, #284]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009f7e:	68e2      	ldr	r2, [r4, #12]
 8009f80:	690b      	ldr	r3, [r1, #16]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8009f82:	6a88      	ldr	r0, [r1, #40]	@ 0x28
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 8009f84:	f013 0338 	ands.w	r3, r3, #56	@ 0x38
 8009f88:	d003      	beq.n	8009f92 <HAL_RCC_OscConfig+0x186>
 8009f8a:	2b18      	cmp	r3, #24
 8009f8c:	d12a      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x1d8>
 8009f8e:	0780      	lsls	r0, r0, #30
 8009f90:	d128      	bne.n	8009fe4 <HAL_RCC_OscConfig+0x1d8>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8009f92:	680b      	ldr	r3, [r1, #0]
 8009f94:	075b      	lsls	r3, r3, #29
 8009f96:	d501      	bpl.n	8009f9c <HAL_RCC_OscConfig+0x190>
 8009f98:	2a00      	cmp	r2, #0
 8009f9a:	d0b0      	beq.n	8009efe <HAL_RCC_OscConfig+0xf2>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009f9c:	4d3f      	ldr	r5, [pc, #252]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 8009f9e:	682b      	ldr	r3, [r5, #0]
 8009fa0:	f023 0319 	bic.w	r3, r3, #25
 8009fa4:	4313      	orrs	r3, r2
 8009fa6:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009fa8:	f7fc fb66 	bl	8006678 <HAL_GetTick>
 8009fac:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009fae:	682b      	ldr	r3, [r5, #0]
 8009fb0:	075f      	lsls	r7, r3, #29
 8009fb2:	d511      	bpl.n	8009fd8 <HAL_RCC_OscConfig+0x1cc>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8009fb4:	f7fc fb78 	bl	80066a8 <HAL_GetREVID>
 8009fb8:	f241 0303 	movw	r3, #4099	@ 0x1003
 8009fbc:	6922      	ldr	r2, [r4, #16]
 8009fbe:	4298      	cmp	r0, r3
 8009fc0:	686b      	ldr	r3, [r5, #4]
 8009fc2:	d822      	bhi.n	800a00a <HAL_RCC_OscConfig+0x1fe>
 8009fc4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8009fc8:	2a40      	cmp	r2, #64	@ 0x40
 8009fca:	bf0c      	ite	eq
 8009fcc:	f443 3300 	orreq.w	r3, r3, #131072	@ 0x20000
 8009fd0:	ea43 3302 	orrne.w	r3, r3, r2, lsl #12
 8009fd4:	606b      	str	r3, [r5, #4]
 8009fd6:	e724      	b.n	8009e22 <HAL_RCC_OscConfig+0x16>
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009fd8:	f7fc fb4e 	bl	8006678 <HAL_GetTick>
 8009fdc:	1b80      	subs	r0, r0, r6
 8009fde:	2802      	cmp	r0, #2
 8009fe0:	d9e5      	bls.n	8009fae <HAL_RCC_OscConfig+0x1a2>
 8009fe2:	e7a4      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009fe4:	4d2d      	ldr	r5, [pc, #180]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fe6:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8009fe8:	b1a2      	cbz	r2, 800a014 <HAL_RCC_OscConfig+0x208>
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8009fea:	f023 0319 	bic.w	r3, r3, #25
 8009fee:	4313      	orrs	r3, r2
 8009ff0:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 8009ff2:	f7fc fb41 	bl	8006678 <HAL_GetTick>
 8009ff6:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8009ff8:	682b      	ldr	r3, [r5, #0]
 8009ffa:	0758      	lsls	r0, r3, #29
 8009ffc:	d4da      	bmi.n	8009fb4 <HAL_RCC_OscConfig+0x1a8>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8009ffe:	f7fc fb3b 	bl	8006678 <HAL_GetTick>
 800a002:	1b80      	subs	r0, r0, r6
 800a004:	2802      	cmp	r0, #2
 800a006:	d9f7      	bls.n	8009ff8 <HAL_RCC_OscConfig+0x1ec>
 800a008:	e791      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a00a:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800a00e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a012:	e7df      	b.n	8009fd4 <HAL_RCC_OscConfig+0x1c8>
        __HAL_RCC_HSI_DISABLE();
 800a014:	f023 0301 	bic.w	r3, r3, #1
 800a018:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a01a:	f7fc fb2d 	bl	8006678 <HAL_GetTick>
 800a01e:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800a020:	682b      	ldr	r3, [r5, #0]
 800a022:	0759      	lsls	r1, r3, #29
 800a024:	f57f aefd 	bpl.w	8009e22 <HAL_RCC_OscConfig+0x16>
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800a028:	f7fc fb26 	bl	8006678 <HAL_GetTick>
 800a02c:	1b80      	subs	r0, r0, r6
 800a02e:	2802      	cmp	r0, #2
 800a030:	d9f6      	bls.n	800a020 <HAL_RCC_OscConfig+0x214>
 800a032:	e77c      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a034:	68da      	ldr	r2, [r3, #12]
 800a036:	f022 527c 	bic.w	r2, r2, #1056964608	@ 0x3f000000
 800a03a:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 800a03e:	60da      	str	r2, [r3, #12]
 800a040:	e71a      	b.n	8009e78 <HAL_RCC_OscConfig+0x6c>
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800a042:	69e3      	ldr	r3, [r4, #28]
 800a044:	4d15      	ldr	r5, [pc, #84]	@ (800a09c <HAL_RCC_OscConfig+0x290>)
 800a046:	b36b      	cbz	r3, 800a0a4 <HAL_RCC_OscConfig+0x298>
        __HAL_RCC_CSI_ENABLE();
 800a048:	682b      	ldr	r3, [r5, #0]
 800a04a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a04e:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a050:	f7fc fb12 	bl	8006678 <HAL_GetTick>
 800a054:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a056:	682b      	ldr	r3, [r5, #0]
 800a058:	05df      	lsls	r7, r3, #23
 800a05a:	d511      	bpl.n	800a080 <HAL_RCC_OscConfig+0x274>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a05c:	f7fc fb24 	bl	80066a8 <HAL_GetREVID>
 800a060:	f241 0303 	movw	r3, #4099	@ 0x1003
 800a064:	6a22      	ldr	r2, [r4, #32]
 800a066:	4298      	cmp	r0, r3
 800a068:	d810      	bhi.n	800a08c <HAL_RCC_OscConfig+0x280>
 800a06a:	686b      	ldr	r3, [r5, #4]
 800a06c:	2a20      	cmp	r2, #32
 800a06e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800a072:	bf0c      	ite	eq
 800a074:	f043 4380 	orreq.w	r3, r3, #1073741824	@ 0x40000000
 800a078:	ea43 6382 	orrne.w	r3, r3, r2, lsl #26
 800a07c:	606b      	str	r3, [r5, #4]
 800a07e:	e6fb      	b.n	8009e78 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a080:	f7fc fafa 	bl	8006678 <HAL_GetTick>
 800a084:	1b80      	subs	r0, r0, r6
 800a086:	2802      	cmp	r0, #2
 800a088:	d9e5      	bls.n	800a056 <HAL_RCC_OscConfig+0x24a>
 800a08a:	e750      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800a08c:	68eb      	ldr	r3, [r5, #12]
 800a08e:	f023 537c 	bic.w	r3, r3, #1056964608	@ 0x3f000000
 800a092:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
 800a096:	60eb      	str	r3, [r5, #12]
 800a098:	e6ee      	b.n	8009e78 <HAL_RCC_OscConfig+0x6c>
 800a09a:	bf00      	nop
 800a09c:	58024400 	.word	0x58024400
 800a0a0:	58024800 	.word	0x58024800
        __HAL_RCC_CSI_DISABLE();
 800a0a4:	682b      	ldr	r3, [r5, #0]
 800a0a6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800a0aa:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a0ac:	f7fc fae4 	bl	8006678 <HAL_GetTick>
 800a0b0:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800a0b2:	682b      	ldr	r3, [r5, #0]
 800a0b4:	05d8      	lsls	r0, r3, #23
 800a0b6:	f57f aedf 	bpl.w	8009e78 <HAL_RCC_OscConfig+0x6c>
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800a0ba:	f7fc fadd 	bl	8006678 <HAL_GetTick>
 800a0be:	1b80      	subs	r0, r0, r6
 800a0c0:	2802      	cmp	r0, #2
 800a0c2:	d9f6      	bls.n	800a0b2 <HAL_RCC_OscConfig+0x2a6>
 800a0c4:	e733      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800a0c6:	6963      	ldr	r3, [r4, #20]
 800a0c8:	4da5      	ldr	r5, [pc, #660]	@ (800a360 <HAL_RCC_OscConfig+0x554>)
 800a0ca:	b183      	cbz	r3, 800a0ee <HAL_RCC_OscConfig+0x2e2>
      __HAL_RCC_LSI_ENABLE();
 800a0cc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a0ce:	f043 0301 	orr.w	r3, r3, #1
 800a0d2:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a0d4:	f7fc fad0 	bl	8006678 <HAL_GetTick>
 800a0d8:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800a0da:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a0dc:	079b      	lsls	r3, r3, #30
 800a0de:	f53f aecf 	bmi.w	8009e80 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a0e2:	f7fc fac9 	bl	8006678 <HAL_GetTick>
 800a0e6:	1b80      	subs	r0, r0, r6
 800a0e8:	2802      	cmp	r0, #2
 800a0ea:	d9f6      	bls.n	800a0da <HAL_RCC_OscConfig+0x2ce>
 800a0ec:	e71f      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_LSI_DISABLE();
 800a0ee:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a0f0:	f023 0301 	bic.w	r3, r3, #1
 800a0f4:	676b      	str	r3, [r5, #116]	@ 0x74
      tickstart = HAL_GetTick();
 800a0f6:	f7fc fabf 	bl	8006678 <HAL_GetTick>
 800a0fa:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800a0fc:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800a0fe:	079f      	lsls	r7, r3, #30
 800a100:	f57f aebe 	bpl.w	8009e80 <HAL_RCC_OscConfig+0x74>
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800a104:	f7fc fab8 	bl	8006678 <HAL_GetTick>
 800a108:	1b80      	subs	r0, r0, r6
 800a10a:	2802      	cmp	r0, #2
 800a10c:	d9f6      	bls.n	800a0fc <HAL_RCC_OscConfig+0x2f0>
 800a10e:	e70e      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800a110:	69a3      	ldr	r3, [r4, #24]
 800a112:	4d93      	ldr	r5, [pc, #588]	@ (800a360 <HAL_RCC_OscConfig+0x554>)
 800a114:	b183      	cbz	r3, 800a138 <HAL_RCC_OscConfig+0x32c>
      __HAL_RCC_HSI48_ENABLE();
 800a116:	682b      	ldr	r3, [r5, #0]
 800a118:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800a11c:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a11e:	f7fc faab 	bl	8006678 <HAL_GetTick>
 800a122:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800a124:	682b      	ldr	r3, [r5, #0]
 800a126:	0498      	lsls	r0, r3, #18
 800a128:	f53f aeae 	bmi.w	8009e88 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a12c:	f7fc faa4 	bl	8006678 <HAL_GetTick>
 800a130:	1b80      	subs	r0, r0, r6
 800a132:	2802      	cmp	r0, #2
 800a134:	d9f6      	bls.n	800a124 <HAL_RCC_OscConfig+0x318>
 800a136:	e6fa      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      __HAL_RCC_HSI48_DISABLE();
 800a138:	682b      	ldr	r3, [r5, #0]
 800a13a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a13e:	602b      	str	r3, [r5, #0]
      tickstart = HAL_GetTick();
 800a140:	f7fc fa9a 	bl	8006678 <HAL_GetTick>
 800a144:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800a146:	682b      	ldr	r3, [r5, #0]
 800a148:	0499      	lsls	r1, r3, #18
 800a14a:	f57f ae9d 	bpl.w	8009e88 <HAL_RCC_OscConfig+0x7c>
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800a14e:	f7fc fa93 	bl	8006678 <HAL_GetTick>
 800a152:	1b80      	subs	r0, r0, r6
 800a154:	2802      	cmp	r0, #2
 800a156:	d9f6      	bls.n	800a146 <HAL_RCC_OscConfig+0x33a>
 800a158:	e6e9      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a15a:	f7fc fa8d 	bl	8006678 <HAL_GetTick>
 800a15e:	1b80      	subs	r0, r0, r6
 800a160:	2864      	cmp	r0, #100	@ 0x64
 800a162:	f67f ae9c 	bls.w	8009e9e <HAL_RCC_OscConfig+0x92>
 800a166:	e6e2      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a168:	b9b3      	cbnz	r3, 800a198 <HAL_RCC_OscConfig+0x38c>
 800a16a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a16c:	f241 3788 	movw	r7, #5000	@ 0x1388
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a170:	f023 0301 	bic.w	r3, r3, #1
 800a174:	672b      	str	r3, [r5, #112]	@ 0x70
 800a176:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a178:	f023 0304 	bic.w	r3, r3, #4
 800a17c:	672b      	str	r3, [r5, #112]	@ 0x70
      tickstart = HAL_GetTick();
 800a17e:	f7fc fa7b 	bl	8006678 <HAL_GetTick>
 800a182:	4606      	mov	r6, r0
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800a184:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a186:	0798      	lsls	r0, r3, #30
 800a188:	f57f aea0 	bpl.w	8009ecc <HAL_RCC_OscConfig+0xc0>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a18c:	f7fc fa74 	bl	8006678 <HAL_GetTick>
 800a190:	1b80      	subs	r0, r0, r6
 800a192:	42b8      	cmp	r0, r7
 800a194:	d9f6      	bls.n	800a184 <HAL_RCC_OscConfig+0x378>
 800a196:	e6ca      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a198:	2b05      	cmp	r3, #5
 800a19a:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a19c:	d103      	bne.n	800a1a6 <HAL_RCC_OscConfig+0x39a>
 800a19e:	f043 0304 	orr.w	r3, r3, #4
 800a1a2:	672b      	str	r3, [r5, #112]	@ 0x70
 800a1a4:	e684      	b.n	8009eb0 <HAL_RCC_OscConfig+0xa4>
 800a1a6:	f023 0301 	bic.w	r3, r3, #1
 800a1aa:	672b      	str	r3, [r5, #112]	@ 0x70
 800a1ac:	6f2b      	ldr	r3, [r5, #112]	@ 0x70
 800a1ae:	f023 0304 	bic.w	r3, r3, #4
 800a1b2:	e680      	b.n	8009eb6 <HAL_RCC_OscConfig+0xaa>
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800a1b4:	f7fc fa60 	bl	8006678 <HAL_GetTick>
 800a1b8:	1b40      	subs	r0, r0, r5
 800a1ba:	42b8      	cmp	r0, r7
 800a1bc:	f67f ae82 	bls.w	8009ec4 <HAL_RCC_OscConfig+0xb8>
 800a1c0:	e6b5      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800a1c2:	4d67      	ldr	r5, [pc, #412]	@ (800a360 <HAL_RCC_OscConfig+0x554>)
 800a1c4:	692b      	ldr	r3, [r5, #16]
 800a1c6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a1ca:	2b18      	cmp	r3, #24
 800a1cc:	d07a      	beq.n	800a2c4 <HAL_RCC_OscConfig+0x4b8>
        __HAL_RCC_PLL_DISABLE();
 800a1ce:	682b      	ldr	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1d0:	2902      	cmp	r1, #2
        __HAL_RCC_PLL_DISABLE();
 800a1d2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800a1d6:	602b      	str	r3, [r5, #0]
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a1d8:	d167      	bne.n	800a2aa <HAL_RCC_OscConfig+0x49e>
        tickstart = HAL_GetTick();
 800a1da:	f7fc fa4d 	bl	8006678 <HAL_GetTick>
 800a1de:	4606      	mov	r6, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a1e0:	682b      	ldr	r3, [r5, #0]
 800a1e2:	0199      	lsls	r1, r3, #6
 800a1e4:	d45b      	bmi.n	800a29e <HAL_RCC_OscConfig+0x492>
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800a1e6:	6aab      	ldr	r3, [r5, #40]	@ 0x28
 800a1e8:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 800a1ea:	f423 737c 	bic.w	r3, r3, #1008	@ 0x3f0
 800a1ee:	f023 0303 	bic.w	r3, r3, #3
 800a1f2:	4313      	orrs	r3, r2
 800a1f4:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800a1f6:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
 800a1fa:	62ab      	str	r3, [r5, #40]	@ 0x28
 800a1fc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1fe:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a200:	3b01      	subs	r3, #1
 800a202:	3a01      	subs	r2, #1
 800a204:	025b      	lsls	r3, r3, #9
 800a206:	0412      	lsls	r2, r2, #16
 800a208:	b29b      	uxth	r3, r3
 800a20a:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a20e:	4313      	orrs	r3, r2
 800a210:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a212:	3a01      	subs	r2, #1
 800a214:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a218:	4313      	orrs	r3, r2
 800a21a:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a21c:	3a01      	subs	r2, #1
 800a21e:	0612      	lsls	r2, r2, #24
 800a220:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a224:	4313      	orrs	r3, r2
 800a226:	632b      	str	r3, [r5, #48]	@ 0x30
        __HAL_RCC_PLLFRACN_DISABLE();
 800a228:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a22a:	f023 0301 	bic.w	r3, r3, #1
 800a22e:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a230:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a232:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a234:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a238:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a23c:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a240:	636b      	str	r3, [r5, #52]	@ 0x34
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800a242:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a244:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800a246:	f023 030c 	bic.w	r3, r3, #12
 800a24a:	4313      	orrs	r3, r2
 800a24c:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800a24e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a250:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 800a252:	f023 0302 	bic.w	r3, r3, #2
 800a256:	4313      	orrs	r3, r2
 800a258:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800a25a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a25c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800a260:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800a262:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a264:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800a268:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800a26a:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a26c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800a270:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLLFRACN_ENABLE();
 800a272:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a274:	f043 0301 	orr.w	r3, r3, #1
 800a278:	62eb      	str	r3, [r5, #44]	@ 0x2c
        __HAL_RCC_PLL_ENABLE();
 800a27a:	682b      	ldr	r3, [r5, #0]
 800a27c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800a280:	602b      	str	r3, [r5, #0]
        tickstart = HAL_GetTick();
 800a282:	f7fc f9f9 	bl	8006678 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a286:	4d36      	ldr	r5, [pc, #216]	@ (800a360 <HAL_RCC_OscConfig+0x554>)
        tickstart = HAL_GetTick();
 800a288:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a28a:	682b      	ldr	r3, [r5, #0]
 800a28c:	019a      	lsls	r2, r3, #6
 800a28e:	f53f ae21 	bmi.w	8009ed4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a292:	f7fc f9f1 	bl	8006678 <HAL_GetTick>
 800a296:	1b00      	subs	r0, r0, r4
 800a298:	2802      	cmp	r0, #2
 800a29a:	d9f6      	bls.n	800a28a <HAL_RCC_OscConfig+0x47e>
 800a29c:	e647      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a29e:	f7fc f9eb 	bl	8006678 <HAL_GetTick>
 800a2a2:	1b80      	subs	r0, r0, r6
 800a2a4:	2802      	cmp	r0, #2
 800a2a6:	d99b      	bls.n	800a1e0 <HAL_RCC_OscConfig+0x3d4>
 800a2a8:	e641      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
        tickstart = HAL_GetTick();
 800a2aa:	f7fc f9e5 	bl	8006678 <HAL_GetTick>
 800a2ae:	4604      	mov	r4, r0
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800a2b0:	682b      	ldr	r3, [r5, #0]
 800a2b2:	019b      	lsls	r3, r3, #6
 800a2b4:	f57f ae0e 	bpl.w	8009ed4 <HAL_RCC_OscConfig+0xc8>
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800a2b8:	f7fc f9de 	bl	8006678 <HAL_GetTick>
 800a2bc:	1b00      	subs	r0, r0, r4
 800a2be:	2802      	cmp	r0, #2
 800a2c0:	d9f6      	bls.n	800a2b0 <HAL_RCC_OscConfig+0x4a4>
 800a2c2:	e634      	b.n	8009f2e <HAL_RCC_OscConfig+0x122>
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2c4:	2901      	cmp	r1, #1
      temp1_pllckcfg = RCC->PLLCKSELR;
 800a2c6:	6aaa      	ldr	r2, [r5, #40]	@ 0x28
      temp2_pllckcfg = RCC->PLL1DIVR;
 800a2c8:	6b2b      	ldr	r3, [r5, #48]	@ 0x30
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2ca:	f43f ae18 	beq.w	8009efe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2ce:	f002 0103 	and.w	r1, r2, #3
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800a2d2:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 800a2d4:	4281      	cmp	r1, r0
 800a2d6:	f47f ae12 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2da:	f3c2 1205 	ubfx	r2, r2, #4, #6
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a2de:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800a2e0:	428a      	cmp	r2, r1
 800a2e2:	f47f ae0c 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2e6:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 800a2e8:	f3c3 0108 	ubfx	r1, r3, #0, #9
 800a2ec:	3a01      	subs	r2, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800a2ee:	4291      	cmp	r1, r2
 800a2f0:	f47f ae05 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a2f4:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 800a2f6:	f3c3 2146 	ubfx	r1, r3, #9, #7
 800a2fa:	3a01      	subs	r2, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800a2fc:	4291      	cmp	r1, r2
 800a2fe:	f47f adfe 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a302:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800a304:	f3c3 4106 	ubfx	r1, r3, #16, #7
 800a308:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800a30a:	4291      	cmp	r1, r2
 800a30c:	f47f adf7 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800a310:	6be2      	ldr	r2, [r4, #60]	@ 0x3c
 800a312:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800a316:	3a01      	subs	r2, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800a318:	4293      	cmp	r3, r2
 800a31a:	f47f adf0 	bne.w	8009efe <HAL_RCC_OscConfig+0xf2>
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a31e:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a320:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800a322:	f3c3 03cc 	ubfx	r3, r3, #3, #13
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800a326:	429a      	cmp	r2, r3
 800a328:	f43f add4 	beq.w	8009ed4 <HAL_RCC_OscConfig+0xc8>
          __HAL_RCC_PLLFRACN_DISABLE();
 800a32c:	4d0c      	ldr	r5, [pc, #48]	@ (800a360 <HAL_RCC_OscConfig+0x554>)
 800a32e:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a330:	f023 0301 	bic.w	r3, r3, #1
 800a334:	62eb      	str	r3, [r5, #44]	@ 0x2c
          tickstart = HAL_GetTick();
 800a336:	f7fc f99f 	bl	8006678 <HAL_GetTick>
 800a33a:	4606      	mov	r6, r0
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800a33c:	f7fc f99c 	bl	8006678 <HAL_GetTick>
 800a340:	42b0      	cmp	r0, r6
 800a342:	d0fb      	beq.n	800a33c <HAL_RCC_OscConfig+0x530>
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800a344:	6b6b      	ldr	r3, [r5, #52]	@ 0x34
 800a346:	6ca2      	ldr	r2, [r4, #72]	@ 0x48
 800a348:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a34c:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a350:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a354:	636b      	str	r3, [r5, #52]	@ 0x34
          __HAL_RCC_PLLFRACN_ENABLE();
 800a356:	6aeb      	ldr	r3, [r5, #44]	@ 0x2c
 800a358:	f043 0301 	orr.w	r3, r3, #1
 800a35c:	62eb      	str	r3, [r5, #44]	@ 0x2c
 800a35e:	e5b9      	b.n	8009ed4 <HAL_RCC_OscConfig+0xc8>
 800a360:	58024400 	.word	0x58024400

0800a364 <HAL_RCC_MCOConfig>:
  *          This parameter can be one of the following values:
  *            @arg RCC_MCODIV_1 up to RCC_MCODIV_15  : divider applied to MCOx clock
  * @retval None
  */
void HAL_RCC_MCOConfig(uint32_t RCC_MCOx, uint32_t RCC_MCOSource, uint32_t RCC_MCODiv)
{
 800a364:	b570      	push	{r4, r5, r6, lr}
 800a366:	4c23      	ldr	r4, [pc, #140]	@ (800a3f4 <HAL_RCC_MCOConfig+0x90>)
 800a368:	b088      	sub	sp, #32
 800a36a:	460e      	mov	r6, r1
 800a36c:	4615      	mov	r5, r2
  if (RCC_MCOx == RCC_MCO1)
  {
    assert_param(IS_RCC_MCO1SOURCE(RCC_MCOSource));

    /* MCO1 Clock Enable */
    MCO1_CLK_ENABLE();
 800a36e:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
  if (RCC_MCOx == RCC_MCO1)
 800a372:	b9f8      	cbnz	r0, 800a3b4 <HAL_RCC_MCOConfig+0x50>
    MCO1_CLK_ENABLE();
 800a374:	f043 0301 	orr.w	r3, r3, #1

    /* Configure the MCO1 pin in alternate function mode */
    GPIO_InitStruct.Pin = MCO1_PIN;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a378:	f44f 7c80 	mov.w	ip, #256	@ 0x100
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a37c:	a903      	add	r1, sp, #12
    MCO1_CLK_ENABLE();
 800a37e:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a382:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a386:	9007      	str	r0, [sp, #28]
    MCO1_CLK_ENABLE();
 800a388:	f003 0301 	and.w	r3, r3, #1
 800a38c:	9301      	str	r3, [sp, #4]
 800a38e:	9b01      	ldr	r3, [sp, #4]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a390:	2302      	movs	r3, #2
 800a392:	e9cd c303 	strd	ip, r3, [sp, #12]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800a396:	2303      	movs	r3, #3
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a398:	e9cd 0305 	strd	r0, r3, [sp, #20]
    HAL_GPIO_Init(MCO1_GPIO_PORT, &GPIO_InitStruct);
 800a39c:	4816      	ldr	r0, [pc, #88]	@ (800a3f8 <HAL_RCC_MCOConfig+0x94>)
 800a39e:	f7fd fa27 	bl	80077f0 <HAL_GPIO_Init>

    /* Mask MCO1 and MCO1PRE[3:0] bits then Select MCO1 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO1 | RCC_CFGR_MCO1PRE), (RCC_MCOSource | RCC_MCODiv));
 800a3a2:	6923      	ldr	r3, [r4, #16]
 800a3a4:	f023 73fe 	bic.w	r3, r3, #33292288	@ 0x1fc0000
 800a3a8:	ea43 0106 	orr.w	r1, r3, r6
 800a3ac:	4329      	orrs	r1, r5
    GPIO_InitStruct.Pull = GPIO_NOPULL;
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);

    /* Mask MCO2 and MCO2PRE[3:0] bits then Select MCO2 clock source and pre-scaler */
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a3ae:	6121      	str	r1, [r4, #16]
  }
}
 800a3b0:	b008      	add	sp, #32
 800a3b2:	bd70      	pop	{r4, r5, r6, pc}
    MCO2_CLK_ENABLE();
 800a3b4:	f043 0304 	orr.w	r3, r3, #4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3b8:	f44f 7200 	mov.w	r2, #512	@ 0x200
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3bc:	2103      	movs	r1, #3
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3be:	480f      	ldr	r0, [pc, #60]	@ (800a3fc <HAL_RCC_MCOConfig+0x98>)
    MCO2_CLK_ENABLE();
 800a3c0:	f8c4 30e0 	str.w	r3, [r4, #224]	@ 0xe0
 800a3c4:	f8d4 30e0 	ldr.w	r3, [r4, #224]	@ 0xe0
 800a3c8:	f003 0304 	and.w	r3, r3, #4
 800a3cc:	9302      	str	r3, [sp, #8]
 800a3ce:	9b02      	ldr	r3, [sp, #8]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800a3d0:	2302      	movs	r3, #2
 800a3d2:	e9cd 2303 	strd	r2, r3, [sp, #12]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800a3d6:	2300      	movs	r3, #0
 800a3d8:	e9cd 3105 	strd	r3, r1, [sp, #20]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3dc:	a903      	add	r1, sp, #12
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 800a3de:	9307      	str	r3, [sp, #28]
    HAL_GPIO_Init(MCO2_GPIO_PORT, &GPIO_InitStruct);
 800a3e0:	f7fd fa06 	bl	80077f0 <HAL_GPIO_Init>
    MODIFY_REG(RCC->CFGR, (RCC_CFGR_MCO2 | RCC_CFGR_MCO2PRE), (RCC_MCOSource | (RCC_MCODiv << 7U)));
 800a3e4:	6923      	ldr	r3, [r4, #16]
 800a3e6:	f023 437e 	bic.w	r3, r3, #4261412864	@ 0xfe000000
 800a3ea:	ea43 0106 	orr.w	r1, r3, r6
 800a3ee:	ea41 11c5 	orr.w	r1, r1, r5, lsl #7
 800a3f2:	e7dc      	b.n	800a3ae <HAL_RCC_MCOConfig+0x4a>
 800a3f4:	58024400 	.word	0x58024400
 800a3f8:	58020000 	.word	0x58020000
 800a3fc:	58020800 	.word	0x58020800

0800a400 <HAL_RCC_GetSysClockFreq>:
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a400:	4b49      	ldr	r3, [pc, #292]	@ (800a528 <HAL_RCC_GetSysClockFreq+0x128>)
 800a402:	691a      	ldr	r2, [r3, #16]
 800a404:	f002 0238 	and.w	r2, r2, #56	@ 0x38
 800a408:	2a10      	cmp	r2, #16
{
 800a40a:	b530      	push	{r4, r5, lr}
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a40c:	f000 8088 	beq.w	800a520 <HAL_RCC_GetSysClockFreq+0x120>
 800a410:	2a18      	cmp	r2, #24
 800a412:	d00c      	beq.n	800a42e <HAL_RCC_GetSysClockFreq+0x2e>
 800a414:	2a00      	cmp	r2, #0
 800a416:	f040 8085 	bne.w	800a524 <HAL_RCC_GetSysClockFreq+0x124>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a41a:	681a      	ldr	r2, [r3, #0]
 800a41c:	4843      	ldr	r0, [pc, #268]	@ (800a52c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a41e:	f012 0f20 	tst.w	r2, #32
 800a422:	d003      	beq.n	800a42c <HAL_RCC_GetSysClockFreq+0x2c>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a424:	681b      	ldr	r3, [r3, #0]
 800a426:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800a42a:	40d8      	lsrs	r0, r3
      sysclockfreq = CSI_VALUE;
      break;
  }

  return sysclockfreq;
}
 800a42c:	bd30      	pop	{r4, r5, pc}
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a42e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a430:	6a9d      	ldr	r5, [r3, #40]	@ 0x28
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a432:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
      if (pllm != 0U)
 800a434:	f415 7f7c 	tst.w	r5, #1008	@ 0x3f0
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800a438:	f3c5 1005 	ubfx	r0, r5, #4, #6
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a43c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      if (pllm != 0U)
 800a43e:	d0f5      	beq.n	800a42c <HAL_RCC_GetSysClockFreq+0x2c>
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a440:	f3c2 02cc 	ubfx	r2, r2, #3, #13
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800a444:	f004 0401 	and.w	r4, r4, #1
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800a448:	f001 0103 	and.w	r1, r1, #3
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a44c:	ee07 0a90 	vmov	s15, r0
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800a450:	4362      	muls	r2, r4
 800a452:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 800a456:	2901      	cmp	r1, #1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a458:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800a45c:	ee06 2a90 	vmov	s13, r2
 800a460:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
 800a464:	d04e      	beq.n	800a504 <HAL_RCC_GetSysClockFreq+0x104>
 800a466:	2902      	cmp	r1, #2
 800a468:	d03e      	beq.n	800a4e8 <HAL_RCC_GetSysClockFreq+0xe8>
 800a46a:	2900      	cmp	r1, #0
 800a46c:	d14a      	bne.n	800a504 <HAL_RCC_GetSysClockFreq+0x104>
            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800a46e:	681a      	ldr	r2, [r3, #0]
 800a470:	0692      	lsls	r2, r2, #26
 800a472:	d527      	bpl.n	800a4c4 <HAL_RCC_GetSysClockFreq+0xc4>
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a474:	6819      	ldr	r1, [r3, #0]
 800a476:	4a2d      	ldr	r2, [pc, #180]	@ (800a52c <HAL_RCC_GetSysClockFreq+0x12c>)
 800a478:	f3c1 01c1 	ubfx	r1, r1, #3, #2
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a47c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800a47e:	40ca      	lsrs	r2, r1
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a480:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a484:	ee07 2a90 	vmov	s15, r2
 800a488:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800a48c:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800a490:	ee07 3a10 	vmov	s14, r3
 800a494:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800a498:	ee37 7a26 	vadd.f32	s14, s14, s13
 800a49c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800a4a0:	ee67 7a87 	vmul.f32	s15, s15, s14
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800a4a4:	4b20      	ldr	r3, [pc, #128]	@ (800a528 <HAL_RCC_GetSysClockFreq+0x128>)
 800a4a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4a8:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800a4ac:	3301      	adds	r3, #1
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800a4ae:	ee07 3a10 	vmov	s14, r3
 800a4b2:	eef8 6ac7 	vcvt.f32.s32	s13, s14
 800a4b6:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800a4ba:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800a4be:	ee17 0a90 	vmov	r0, s15
 800a4c2:	e7b3      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0x2c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ca:	ee07 3a90 	vmov	s15, r3
 800a4ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4d6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4da:	ed9f 6a15 	vldr	s12, [pc, #84]	@ 800a530 <HAL_RCC_GetSysClockFreq+0x130>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4de:	eec6 6a07 	vdiv.f32	s13, s12, s14
 800a4e2:	ee67 7aa6 	vmul.f32	s15, s15, s13
            break;
 800a4e6:	e7dd      	b.n	800a4a4 <HAL_RCC_GetSysClockFreq+0xa4>
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a4e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a4ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a4ee:	ee07 3a90 	vmov	s15, r3
 800a4f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a4f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a4fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a4fe:	ed9f 6a0d 	vldr	s12, [pc, #52]	@ 800a534 <HAL_RCC_GetSysClockFreq+0x134>
 800a502:	e7ec      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0xde>
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800a504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a506:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a50a:	ee07 3a90 	vmov	s15, r3
 800a50e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800a512:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800a516:	ee77 7a86 	vadd.f32	s15, s15, s12
 800a51a:	ed9f 6a07 	vldr	s12, [pc, #28]	@ 800a538 <HAL_RCC_GetSysClockFreq+0x138>
 800a51e:	e7de      	b.n	800a4de <HAL_RCC_GetSysClockFreq+0xde>
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800a520:	4806      	ldr	r0, [pc, #24]	@ (800a53c <HAL_RCC_GetSysClockFreq+0x13c>)
 800a522:	e783      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0x2c>
      sysclockfreq = CSI_VALUE;
 800a524:	4806      	ldr	r0, [pc, #24]	@ (800a540 <HAL_RCC_GetSysClockFreq+0x140>)
 800a526:	e781      	b.n	800a42c <HAL_RCC_GetSysClockFreq+0x2c>
 800a528:	58024400 	.word	0x58024400
 800a52c:	03d09000 	.word	0x03d09000
 800a530:	4c742400 	.word	0x4c742400
 800a534:	4bbebc20 	.word	0x4bbebc20
 800a538:	4a742400 	.word	0x4a742400
 800a53c:	017d7840 	.word	0x017d7840
 800a540:	003d0900 	.word	0x003d0900

0800a544 <HAL_RCC_ClockConfig>:
{
 800a544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a548:	460d      	mov	r5, r1
  if (RCC_ClkInitStruct == NULL)
 800a54a:	4604      	mov	r4, r0
 800a54c:	b910      	cbnz	r0, 800a554 <HAL_RCC_ClockConfig+0x10>
    return HAL_ERROR;
 800a54e:	2001      	movs	r0, #1
}
 800a550:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800a554:	4a88      	ldr	r2, [pc, #544]	@ (800a778 <HAL_RCC_ClockConfig+0x234>)
 800a556:	6813      	ldr	r3, [r2, #0]
 800a558:	f003 030f 	and.w	r3, r3, #15
 800a55c:	428b      	cmp	r3, r1
 800a55e:	f0c0 8093 	bcc.w	800a688 <HAL_RCC_ClockConfig+0x144>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a562:	6823      	ldr	r3, [r4, #0]
 800a564:	075f      	lsls	r7, r3, #29
 800a566:	f100 809b 	bmi.w	800a6a0 <HAL_RCC_ClockConfig+0x15c>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a56a:	071e      	lsls	r6, r3, #28
 800a56c:	d50b      	bpl.n	800a586 <HAL_RCC_ClockConfig+0x42>
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a56e:	4983      	ldr	r1, [pc, #524]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a570:	6960      	ldr	r0, [r4, #20]
 800a572:	69ca      	ldr	r2, [r1, #28]
 800a574:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a578:	4290      	cmp	r0, r2
 800a57a:	d904      	bls.n	800a586 <HAL_RCC_ClockConfig+0x42>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a57c:	69ca      	ldr	r2, [r1, #28]
 800a57e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a582:	4302      	orrs	r2, r0
 800a584:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a586:	06d8      	lsls	r0, r3, #27
 800a588:	d50b      	bpl.n	800a5a2 <HAL_RCC_ClockConfig+0x5e>
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a58a:	497c      	ldr	r1, [pc, #496]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a58c:	69a0      	ldr	r0, [r4, #24]
 800a58e:	69ca      	ldr	r2, [r1, #28]
 800a590:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a594:	4290      	cmp	r0, r2
 800a596:	d904      	bls.n	800a5a2 <HAL_RCC_ClockConfig+0x5e>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a598:	69ca      	ldr	r2, [r1, #28]
 800a59a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a59e:	4302      	orrs	r2, r0
 800a5a0:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a5a2:	0699      	lsls	r1, r3, #26
 800a5a4:	d50b      	bpl.n	800a5be <HAL_RCC_ClockConfig+0x7a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a5a6:	4975      	ldr	r1, [pc, #468]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a5a8:	69e0      	ldr	r0, [r4, #28]
 800a5aa:	6a0a      	ldr	r2, [r1, #32]
 800a5ac:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a5b0:	4290      	cmp	r0, r2
 800a5b2:	d904      	bls.n	800a5be <HAL_RCC_ClockConfig+0x7a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a5b4:	6a0a      	ldr	r2, [r1, #32]
 800a5b6:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a5ba:	4302      	orrs	r2, r0
 800a5bc:	620a      	str	r2, [r1, #32]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5be:	079a      	lsls	r2, r3, #30
 800a5c0:	d50b      	bpl.n	800a5da <HAL_RCC_ClockConfig+0x96>
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a5c2:	496e      	ldr	r1, [pc, #440]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a5c4:	68e0      	ldr	r0, [r4, #12]
 800a5c6:	698a      	ldr	r2, [r1, #24]
 800a5c8:	f002 020f 	and.w	r2, r2, #15
 800a5cc:	4290      	cmp	r0, r2
 800a5ce:	d904      	bls.n	800a5da <HAL_RCC_ClockConfig+0x96>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a5d0:	698a      	ldr	r2, [r1, #24]
 800a5d2:	f022 020f 	bic.w	r2, r2, #15
 800a5d6:	4302      	orrs	r2, r0
 800a5d8:	618a      	str	r2, [r1, #24]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a5da:	07df      	lsls	r7, r3, #31
 800a5dc:	d46e      	bmi.n	800a6bc <HAL_RCC_ClockConfig+0x178>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a5de:	6823      	ldr	r3, [r4, #0]
 800a5e0:	079e      	lsls	r6, r3, #30
 800a5e2:	f100 80a1 	bmi.w	800a728 <HAL_RCC_ClockConfig+0x1e4>
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800a5e6:	4964      	ldr	r1, [pc, #400]	@ (800a778 <HAL_RCC_ClockConfig+0x234>)
 800a5e8:	680a      	ldr	r2, [r1, #0]
 800a5ea:	f002 020f 	and.w	r2, r2, #15
 800a5ee:	42aa      	cmp	r2, r5
 800a5f0:	f200 80a8 	bhi.w	800a744 <HAL_RCC_ClockConfig+0x200>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800a5f4:	0758      	lsls	r0, r3, #29
 800a5f6:	f100 80b1 	bmi.w	800a75c <HAL_RCC_ClockConfig+0x218>
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a5fa:	0719      	lsls	r1, r3, #28
 800a5fc:	d50b      	bpl.n	800a616 <HAL_RCC_ClockConfig+0xd2>
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800a5fe:	495f      	ldr	r1, [pc, #380]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a600:	6960      	ldr	r0, [r4, #20]
 800a602:	69ca      	ldr	r2, [r1, #28]
 800a604:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a608:	4290      	cmp	r0, r2
 800a60a:	d204      	bcs.n	800a616 <HAL_RCC_ClockConfig+0xd2>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800a60c:	69ca      	ldr	r2, [r1, #28]
 800a60e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a612:	4302      	orrs	r2, r0
 800a614:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a616:	06da      	lsls	r2, r3, #27
 800a618:	d50b      	bpl.n	800a632 <HAL_RCC_ClockConfig+0xee>
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800a61a:	4958      	ldr	r1, [pc, #352]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a61c:	69a0      	ldr	r0, [r4, #24]
 800a61e:	69ca      	ldr	r2, [r1, #28]
 800a620:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a624:	4290      	cmp	r0, r2
 800a626:	d204      	bcs.n	800a632 <HAL_RCC_ClockConfig+0xee>
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800a628:	69ca      	ldr	r2, [r1, #28]
 800a62a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800a62e:	4302      	orrs	r2, r0
 800a630:	61ca      	str	r2, [r1, #28]
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800a632:	069b      	lsls	r3, r3, #26
 800a634:	d50b      	bpl.n	800a64e <HAL_RCC_ClockConfig+0x10a>
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800a636:	4a51      	ldr	r2, [pc, #324]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a638:	69e1      	ldr	r1, [r4, #28]
 800a63a:	6a13      	ldr	r3, [r2, #32]
 800a63c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a640:	4299      	cmp	r1, r3
 800a642:	d204      	bcs.n	800a64e <HAL_RCC_ClockConfig+0x10a>
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800a644:	6a13      	ldr	r3, [r2, #32]
 800a646:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800a64a:	430b      	orrs	r3, r1
 800a64c:	6213      	str	r3, [r2, #32]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800a64e:	f7ff fed7 	bl	800a400 <HAL_RCC_GetSysClockFreq>
 800a652:	494a      	ldr	r1, [pc, #296]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a654:	4a4a      	ldr	r2, [pc, #296]	@ (800a780 <HAL_RCC_ClockConfig+0x23c>)
 800a656:	698b      	ldr	r3, [r1, #24]
 800a658:	f3c3 2303 	ubfx	r3, r3, #8, #4
 800a65c:	5cd3      	ldrb	r3, [r2, r3]
 800a65e:	f003 031f 	and.w	r3, r3, #31
 800a662:	40d8      	lsrs	r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a664:	698b      	ldr	r3, [r1, #24]
 800a666:	f003 030f 	and.w	r3, r3, #15
 800a66a:	5cd3      	ldrb	r3, [r2, r3]
 800a66c:	4a45      	ldr	r2, [pc, #276]	@ (800a784 <HAL_RCC_ClockConfig+0x240>)
 800a66e:	f003 031f 	and.w	r3, r3, #31
 800a672:	fa20 f303 	lsr.w	r3, r0, r3
 800a676:	6013      	str	r3, [r2, #0]
  SystemCoreClock = common_system_clock;
 800a678:	4b43      	ldr	r3, [pc, #268]	@ (800a788 <HAL_RCC_ClockConfig+0x244>)
 800a67a:	6018      	str	r0, [r3, #0]
  halstatus = HAL_InitTick(uwTickPrio);
 800a67c:	4b43      	ldr	r3, [pc, #268]	@ (800a78c <HAL_RCC_ClockConfig+0x248>)
}
 800a67e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
  halstatus = HAL_InitTick(uwTickPrio);
 800a682:	6818      	ldr	r0, [r3, #0]
 800a684:	f7f7 b992 	b.w	80019ac <HAL_InitTick>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a688:	6813      	ldr	r3, [r2, #0]
 800a68a:	f023 030f 	bic.w	r3, r3, #15
 800a68e:	430b      	orrs	r3, r1
 800a690:	6013      	str	r3, [r2, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a692:	6813      	ldr	r3, [r2, #0]
 800a694:	f003 030f 	and.w	r3, r3, #15
 800a698:	428b      	cmp	r3, r1
 800a69a:	f47f af58 	bne.w	800a54e <HAL_RCC_ClockConfig+0xa>
 800a69e:	e760      	b.n	800a562 <HAL_RCC_ClockConfig+0x1e>
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a6a0:	4936      	ldr	r1, [pc, #216]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a6a2:	6920      	ldr	r0, [r4, #16]
 800a6a4:	698a      	ldr	r2, [r1, #24]
 800a6a6:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a6aa:	4290      	cmp	r0, r2
 800a6ac:	f67f af5d 	bls.w	800a56a <HAL_RCC_ClockConfig+0x26>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a6b0:	698a      	ldr	r2, [r1, #24]
 800a6b2:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a6b6:	4302      	orrs	r2, r0
 800a6b8:	618a      	str	r2, [r1, #24]
 800a6ba:	e756      	b.n	800a56a <HAL_RCC_ClockConfig+0x26>
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800a6bc:	4b2f      	ldr	r3, [pc, #188]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a6be:	68a1      	ldr	r1, [r4, #8]
 800a6c0:	699a      	ldr	r2, [r3, #24]
 800a6c2:	f422 6270 	bic.w	r2, r2, #3840	@ 0xf00
 800a6c6:	430a      	orrs	r2, r1
 800a6c8:	619a      	str	r2, [r3, #24]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6ca:	6861      	ldr	r1, [r4, #4]
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6cc:	681a      	ldr	r2, [r3, #0]
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a6ce:	2902      	cmp	r1, #2
 800a6d0:	d11d      	bne.n	800a70e <HAL_RCC_ClockConfig+0x1ca>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800a6d2:	f412 3f00 	tst.w	r2, #131072	@ 0x20000
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a6d6:	f43f af3a 	beq.w	800a54e <HAL_RCC_ClockConfig+0xa>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6da:	691a      	ldr	r2, [r3, #16]
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a6dc:	f241 3888 	movw	r8, #5000	@ 0x1388
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6e0:	4f26      	ldr	r7, [pc, #152]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800a6e2:	f022 0207 	bic.w	r2, r2, #7
 800a6e6:	430a      	orrs	r2, r1
 800a6e8:	611a      	str	r2, [r3, #16]
    tickstart = HAL_GetTick();
 800a6ea:	f7fb ffc5 	bl	8006678 <HAL_GetTick>
 800a6ee:	4606      	mov	r6, r0
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800a6f0:	693b      	ldr	r3, [r7, #16]
 800a6f2:	6862      	ldr	r2, [r4, #4]
 800a6f4:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800a6f8:	ebb3 0fc2 	cmp.w	r3, r2, lsl #3
 800a6fc:	f43f af6f 	beq.w	800a5de <HAL_RCC_ClockConfig+0x9a>
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800a700:	f7fb ffba 	bl	8006678 <HAL_GetTick>
 800a704:	1b80      	subs	r0, r0, r6
 800a706:	4540      	cmp	r0, r8
 800a708:	d9f2      	bls.n	800a6f0 <HAL_RCC_ClockConfig+0x1ac>
        return HAL_TIMEOUT;
 800a70a:	2003      	movs	r0, #3
 800a70c:	e720      	b.n	800a550 <HAL_RCC_ClockConfig+0xc>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800a70e:	2903      	cmp	r1, #3
 800a710:	d102      	bne.n	800a718 <HAL_RCC_ClockConfig+0x1d4>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800a712:	f012 7f00 	tst.w	r2, #33554432	@ 0x2000000
 800a716:	e7de      	b.n	800a6d6 <HAL_RCC_ClockConfig+0x192>
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800a718:	2901      	cmp	r1, #1
 800a71a:	d102      	bne.n	800a722 <HAL_RCC_ClockConfig+0x1de>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800a71c:	f412 7f80 	tst.w	r2, #256	@ 0x100
 800a720:	e7d9      	b.n	800a6d6 <HAL_RCC_ClockConfig+0x192>
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800a722:	f012 0f04 	tst.w	r2, #4
 800a726:	e7d6      	b.n	800a6d6 <HAL_RCC_ClockConfig+0x192>
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800a728:	4914      	ldr	r1, [pc, #80]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a72a:	68e0      	ldr	r0, [r4, #12]
 800a72c:	698a      	ldr	r2, [r1, #24]
 800a72e:	f002 020f 	and.w	r2, r2, #15
 800a732:	4290      	cmp	r0, r2
 800a734:	f4bf af57 	bcs.w	800a5e6 <HAL_RCC_ClockConfig+0xa2>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a738:	698a      	ldr	r2, [r1, #24]
 800a73a:	f022 020f 	bic.w	r2, r2, #15
 800a73e:	4302      	orrs	r2, r0
 800a740:	618a      	str	r2, [r1, #24]
 800a742:	e750      	b.n	800a5e6 <HAL_RCC_ClockConfig+0xa2>
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a744:	680a      	ldr	r2, [r1, #0]
 800a746:	f022 020f 	bic.w	r2, r2, #15
 800a74a:	432a      	orrs	r2, r5
 800a74c:	600a      	str	r2, [r1, #0]
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800a74e:	680a      	ldr	r2, [r1, #0]
 800a750:	f002 020f 	and.w	r2, r2, #15
 800a754:	42aa      	cmp	r2, r5
 800a756:	f47f aefa 	bne.w	800a54e <HAL_RCC_ClockConfig+0xa>
 800a75a:	e74b      	b.n	800a5f4 <HAL_RCC_ClockConfig+0xb0>
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800a75c:	4907      	ldr	r1, [pc, #28]	@ (800a77c <HAL_RCC_ClockConfig+0x238>)
 800a75e:	6920      	ldr	r0, [r4, #16]
 800a760:	698a      	ldr	r2, [r1, #24]
 800a762:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a766:	4290      	cmp	r0, r2
 800a768:	f4bf af47 	bcs.w	800a5fa <HAL_RCC_ClockConfig+0xb6>
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800a76c:	698a      	ldr	r2, [r1, #24]
 800a76e:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 800a772:	4302      	orrs	r2, r0
 800a774:	618a      	str	r2, [r1, #24]
 800a776:	e740      	b.n	800a5fa <HAL_RCC_ClockConfig+0xb6>
 800a778:	52002000 	.word	0x52002000
 800a77c:	58024400 	.word	0x58024400
 800a780:	08024df4 	.word	0x08024df4
 800a784:	24000098 	.word	0x24000098
 800a788:	2400009c 	.word	0x2400009c
 800a78c:	240000a4 	.word	0x240000a4

0800a790 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800a790:	b508      	push	{r3, lr}
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a792:	f7ff fe35 	bl	800a400 <HAL_RCC_GetSysClockFreq>
 800a796:	4a0b      	ldr	r2, [pc, #44]	@ (800a7c4 <HAL_RCC_GetHCLKFreq+0x34>)
 800a798:	490b      	ldr	r1, [pc, #44]	@ (800a7c8 <HAL_RCC_GetHCLKFreq+0x38>)
 800a79a:	6993      	ldr	r3, [r2, #24]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a79c:	6992      	ldr	r2, [r2, #24]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a79e:	f3c3 2303 	ubfx	r3, r3, #8, #4
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7a2:	f002 020f 	and.w	r2, r2, #15
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800a7a6:	5ccb      	ldrb	r3, [r1, r3]
 800a7a8:	f003 031f 	and.w	r3, r3, #31
 800a7ac:	fa20 f303 	lsr.w	r3, r0, r3
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800a7b0:	5c88      	ldrb	r0, [r1, r2]
 800a7b2:	4a06      	ldr	r2, [pc, #24]	@ (800a7cc <HAL_RCC_GetHCLKFreq+0x3c>)
 800a7b4:	f000 001f 	and.w	r0, r0, #31
 800a7b8:	fa23 f000 	lsr.w	r0, r3, r0
 800a7bc:	6010      	str	r0, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800a7be:	4a04      	ldr	r2, [pc, #16]	@ (800a7d0 <HAL_RCC_GetHCLKFreq+0x40>)
 800a7c0:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
}
 800a7c2:	bd08      	pop	{r3, pc}
 800a7c4:	58024400 	.word	0x58024400
 800a7c8:	08024df4 	.word	0x08024df4
 800a7cc:	24000098 	.word	0x24000098
 800a7d0:	2400009c 	.word	0x2400009c

0800a7d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800a7d4:	b508      	push	{r3, lr}
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800a7d6:	f7ff ffdb 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800a7da:	4b05      	ldr	r3, [pc, #20]	@ (800a7f0 <HAL_RCC_GetPCLK1Freq+0x1c>)
 800a7dc:	4a05      	ldr	r2, [pc, #20]	@ (800a7f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800a7de:	69db      	ldr	r3, [r3, #28]
 800a7e0:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800a7e4:	5cd3      	ldrb	r3, [r2, r3]
 800a7e6:	f003 031f 	and.w	r3, r3, #31
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800a7ea:	40d8      	lsrs	r0, r3
 800a7ec:	bd08      	pop	{r3, pc}
 800a7ee:	bf00      	nop
 800a7f0:	58024400 	.word	0x58024400
 800a7f4:	08024df4 	.word	0x08024df4

0800a7f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800a7f8:	b508      	push	{r3, lr}
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800a7fa:	f7ff ffc9 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800a7fe:	4b05      	ldr	r3, [pc, #20]	@ (800a814 <HAL_RCC_GetPCLK2Freq+0x1c>)
 800a800:	4a05      	ldr	r2, [pc, #20]	@ (800a818 <HAL_RCC_GetPCLK2Freq+0x20>)
 800a802:	69db      	ldr	r3, [r3, #28]
 800a804:	f3c3 2302 	ubfx	r3, r3, #8, #3
 800a808:	5cd3      	ldrb	r3, [r2, r3]
 800a80a:	f003 031f 	and.w	r3, r3, #31
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800a80e:	40d8      	lsrs	r0, r3
 800a810:	bd08      	pop	{r3, pc}
 800a812:	bf00      	nop
 800a814:	58024400 	.word	0x58024400
 800a818:	08024df4 	.word	0x08024df4

0800a81c <HAL_RCC_GetClockConfig>:
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 800a81c:	233f      	movs	r3, #63	@ 0x3f
 800a81e:	6003      	str	r3, [r0, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800a820:	4b11      	ldr	r3, [pc, #68]	@ (800a868 <HAL_RCC_GetClockConfig+0x4c>)
 800a822:	691a      	ldr	r2, [r3, #16]
 800a824:	f002 0207 	and.w	r2, r2, #7
 800a828:	6042      	str	r2, [r0, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 800a82a:	699a      	ldr	r2, [r3, #24]
 800a82c:	f402 6270 	and.w	r2, r2, #3840	@ 0xf00
 800a830:	6082      	str	r2, [r0, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 800a832:	699a      	ldr	r2, [r3, #24]
 800a834:	f002 020f 	and.w	r2, r2, #15
 800a838:	60c2      	str	r2, [r0, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 800a83a:	699a      	ldr	r2, [r3, #24]
 800a83c:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a840:	6102      	str	r2, [r0, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 800a842:	69da      	ldr	r2, [r3, #28]
 800a844:	f002 0270 	and.w	r2, r2, #112	@ 0x70
 800a848:	6142      	str	r2, [r0, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 800a84a:	69da      	ldr	r2, [r3, #28]
 800a84c:	f402 62e0 	and.w	r2, r2, #1792	@ 0x700
 800a850:	6182      	str	r2, [r0, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 800a852:	6a1b      	ldr	r3, [r3, #32]
 800a854:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800a858:	61c3      	str	r3, [r0, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800a85a:	4b04      	ldr	r3, [pc, #16]	@ (800a86c <HAL_RCC_GetClockConfig+0x50>)
 800a85c:	681b      	ldr	r3, [r3, #0]
 800a85e:	f003 030f 	and.w	r3, r3, #15
 800a862:	600b      	str	r3, [r1, #0]
}
 800a864:	4770      	bx	lr
 800a866:	bf00      	nop
 800a868:	58024400 	.word	0x58024400
 800a86c:	52002000 	.word	0x52002000

0800a870 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800a870:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a872:	4c3a      	ldr	r4, [pc, #232]	@ (800a95c <RCCEx_PLL2_Config+0xec>)
{
 800a874:	4606      	mov	r6, r0
 800a876:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a878:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a87a:	f003 0303 	and.w	r3, r3, #3
 800a87e:	2b03      	cmp	r3, #3
 800a880:	d069      	beq.n	800a956 <RCCEx_PLL2_Config+0xe6>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800a882:	6823      	ldr	r3, [r4, #0]
 800a884:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800a888:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a88a:	f7fb fef5 	bl	8006678 <HAL_GetTick>
 800a88e:	4607      	mov	r7, r0

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800a890:	6823      	ldr	r3, [r4, #0]
 800a892:	011a      	lsls	r2, r3, #4
 800a894:	d44b      	bmi.n	800a92e <RCCEx_PLL2_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800a896:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a898:	6832      	ldr	r2, [r6, #0]
 800a89a:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800a89e:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
 800a8a2:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a8a4:	68b3      	ldr	r3, [r6, #8]
 800a8a6:	68f2      	ldr	r2, [r6, #12]
 800a8a8:	3b01      	subs	r3, #1
 800a8aa:	3a01      	subs	r2, #1
 800a8ac:	025b      	lsls	r3, r3, #9
 800a8ae:	0412      	lsls	r2, r2, #16
 800a8b0:	b29b      	uxth	r3, r3
 800a8b2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	6872      	ldr	r2, [r6, #4]
 800a8ba:	3a01      	subs	r2, #1
 800a8bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a8c0:	4313      	orrs	r3, r2
 800a8c2:	6932      	ldr	r2, [r6, #16]
 800a8c4:	3a01      	subs	r2, #1
 800a8c6:	0612      	lsls	r2, r2, #24
 800a8c8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a8cc:	4313      	orrs	r3, r2
 800a8ce:	63a3      	str	r3, [r4, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800a8d0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8d2:	6972      	ldr	r2, [r6, #20]
 800a8d4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800a8d8:	4313      	orrs	r3, r2
 800a8da:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800a8dc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8de:	69b2      	ldr	r2, [r6, #24]
 800a8e0:	f023 0320 	bic.w	r3, r3, #32
 800a8e4:	4313      	orrs	r3, r2
 800a8e6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800a8e8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a8ea:	f023 0310 	bic.w	r3, r3, #16
 800a8ee:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800a8f0:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800a8f2:	69f2      	ldr	r2, [r6, #28]
 800a8f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a8f8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a8fc:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a900:	63e3      	str	r3, [r4, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800a902:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a904:	f043 0310 	orr.w	r3, r3, #16
 800a908:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a90a:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a90c:	b9b5      	cbnz	r5, 800a93c <RCCEx_PLL2_Config+0xcc>
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800a90e:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a912:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800a914:	4c11      	ldr	r4, [pc, #68]	@ (800a95c <RCCEx_PLL2_Config+0xec>)
 800a916:	6823      	ldr	r3, [r4, #0]
 800a918:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800a91c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a91e:	f7fb feab 	bl	8006678 <HAL_GetTick>
 800a922:	4605      	mov	r5, r0

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800a924:	6823      	ldr	r3, [r4, #0]
 800a926:	011b      	lsls	r3, r3, #4
 800a928:	d50f      	bpl.n	800a94a <RCCEx_PLL2_Config+0xda>
    }

  }


  return status;
 800a92a:	2000      	movs	r0, #0
 800a92c:	e005      	b.n	800a93a <RCCEx_PLL2_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a92e:	f7fb fea3 	bl	8006678 <HAL_GetTick>
 800a932:	1bc0      	subs	r0, r0, r7
 800a934:	2802      	cmp	r0, #2
 800a936:	d9ab      	bls.n	800a890 <RCCEx_PLL2_Config+0x20>
        return HAL_TIMEOUT;
 800a938:	2003      	movs	r0, #3
}
 800a93a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800a93c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800a93e:	bf0c      	ite	eq
 800a940:	f443 1380 	orreq.w	r3, r3, #1048576	@ 0x100000
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800a944:	f443 1300 	orrne.w	r3, r3, #2097152	@ 0x200000
 800a948:	e7e3      	b.n	800a912 <RCCEx_PLL2_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800a94a:	f7fb fe95 	bl	8006678 <HAL_GetTick>
 800a94e:	1b40      	subs	r0, r0, r5
 800a950:	2802      	cmp	r0, #2
 800a952:	d9e7      	bls.n	800a924 <RCCEx_PLL2_Config+0xb4>
 800a954:	e7f0      	b.n	800a938 <RCCEx_PLL2_Config+0xc8>
    return HAL_ERROR;
 800a956:	2001      	movs	r0, #1
 800a958:	e7ef      	b.n	800a93a <RCCEx_PLL2_Config+0xca>
 800a95a:	bf00      	nop
 800a95c:	58024400 	.word	0x58024400

0800a960 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800a960:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a962:	4c3a      	ldr	r4, [pc, #232]	@ (800aa4c <RCCEx_PLL3_Config+0xec>)
{
 800a964:	4606      	mov	r6, r0
 800a966:	460d      	mov	r5, r1
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800a968:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a96a:	f003 0303 	and.w	r3, r3, #3
 800a96e:	2b03      	cmp	r3, #3
 800a970:	d069      	beq.n	800aa46 <RCCEx_PLL3_Config+0xe6>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800a972:	6823      	ldr	r3, [r4, #0]
 800a974:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800a978:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800a97a:	f7fb fe7d 	bl	8006678 <HAL_GetTick>
 800a97e:	4607      	mov	r7, r0
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800a980:	6823      	ldr	r3, [r4, #0]
 800a982:	009a      	lsls	r2, r3, #2
 800a984:	d44b      	bmi.n	800aa1e <RCCEx_PLL3_Config+0xbe>
        return HAL_TIMEOUT;
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800a986:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800a988:	6832      	ldr	r2, [r6, #0]
 800a98a:	f023 737c 	bic.w	r3, r3, #66060288	@ 0x3f00000
 800a98e:	ea43 5302 	orr.w	r3, r3, r2, lsl #20
 800a992:	62a3      	str	r3, [r4, #40]	@ 0x28
 800a994:	68b3      	ldr	r3, [r6, #8]
 800a996:	68f2      	ldr	r2, [r6, #12]
 800a998:	3b01      	subs	r3, #1
 800a99a:	3a01      	subs	r2, #1
 800a99c:	025b      	lsls	r3, r3, #9
 800a99e:	0412      	lsls	r2, r2, #16
 800a9a0:	b29b      	uxth	r3, r3
 800a9a2:	f402 02fe 	and.w	r2, r2, #8323072	@ 0x7f0000
 800a9a6:	4313      	orrs	r3, r2
 800a9a8:	6872      	ldr	r2, [r6, #4]
 800a9aa:	3a01      	subs	r2, #1
 800a9ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a9b0:	4313      	orrs	r3, r2
 800a9b2:	6932      	ldr	r2, [r6, #16]
 800a9b4:	3a01      	subs	r2, #1
 800a9b6:	0612      	lsls	r2, r2, #24
 800a9b8:	f002 42fe 	and.w	r2, r2, #2130706432	@ 0x7f000000
 800a9bc:	4313      	orrs	r3, r2
 800a9be:	6423      	str	r3, [r4, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800a9c0:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a9c2:	6972      	ldr	r2, [r6, #20]
 800a9c4:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800a9c8:	4313      	orrs	r3, r2
 800a9ca:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800a9cc:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a9ce:	69b2      	ldr	r2, [r6, #24]
 800a9d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800a9d4:	4313      	orrs	r3, r2
 800a9d6:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800a9d8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a9da:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800a9de:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800a9e0:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800a9e2:	69f2      	ldr	r2, [r6, #28]
 800a9e4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800a9e8:	f023 03f8 	bic.w	r3, r3, #248	@ 0xf8
 800a9ec:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 800a9f0:	6463      	str	r3, [r4, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800a9f2:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800a9f4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800a9f8:	62e3      	str	r3, [r4, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a9fa:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
    if (Divider == DIVIDER_P_UPDATE)
 800a9fc:	b9b5      	cbnz	r5, 800aa2c <RCCEx_PLL3_Config+0xcc>
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800a9fe:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa02:	62e3      	str	r3, [r4, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800aa04:	4c11      	ldr	r4, [pc, #68]	@ (800aa4c <RCCEx_PLL3_Config+0xec>)
 800aa06:	6823      	ldr	r3, [r4, #0]
 800aa08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800aa0c:	6023      	str	r3, [r4, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800aa0e:	f7fb fe33 	bl	8006678 <HAL_GetTick>
 800aa12:	4605      	mov	r5, r0

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800aa14:	6823      	ldr	r3, [r4, #0]
 800aa16:	009b      	lsls	r3, r3, #2
 800aa18:	d50f      	bpl.n	800aa3a <RCCEx_PLL3_Config+0xda>
    }

  }


  return status;
 800aa1a:	2000      	movs	r0, #0
 800aa1c:	e005      	b.n	800aa2a <RCCEx_PLL3_Config+0xca>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa1e:	f7fb fe2b 	bl	8006678 <HAL_GetTick>
 800aa22:	1bc0      	subs	r0, r0, r7
 800aa24:	2802      	cmp	r0, #2
 800aa26:	d9ab      	bls.n	800a980 <RCCEx_PLL3_Config+0x20>
        return HAL_TIMEOUT;
 800aa28:	2003      	movs	r0, #3
}
 800aa2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    else if (Divider == DIVIDER_Q_UPDATE)
 800aa2c:	2d01      	cmp	r5, #1
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800aa2e:	bf0c      	ite	eq
 800aa30:	f443 0300 	orreq.w	r3, r3, #8388608	@ 0x800000
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800aa34:	f043 7380 	orrne.w	r3, r3, #16777216	@ 0x1000000
 800aa38:	e7e3      	b.n	800aa02 <RCCEx_PLL3_Config+0xa2>
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800aa3a:	f7fb fe1d 	bl	8006678 <HAL_GetTick>
 800aa3e:	1b40      	subs	r0, r0, r5
 800aa40:	2802      	cmp	r0, #2
 800aa42:	d9e7      	bls.n	800aa14 <RCCEx_PLL3_Config+0xb4>
 800aa44:	e7f0      	b.n	800aa28 <RCCEx_PLL3_Config+0xc8>
    return HAL_ERROR;
 800aa46:	2001      	movs	r0, #1
 800aa48:	e7ef      	b.n	800aa2a <RCCEx_PLL3_Config+0xca>
 800aa4a:	bf00      	nop
 800aa4c:	58024400 	.word	0x58024400

0800aa50 <HAL_RCCEx_PeriphCLKConfig>:
{
 800aa50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa54:	6803      	ldr	r3, [r0, #0]
{
 800aa56:	4605      	mov	r5, r0
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800aa58:	011c      	lsls	r4, r3, #4
 800aa5a:	d51e      	bpl.n	800aa9a <HAL_RCCEx_PeriphCLKConfig+0x4a>
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa5c:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800aa5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800aa62:	d02a      	beq.n	800aaba <HAL_RCCEx_PeriphCLKConfig+0x6a>
 800aa64:	d80f      	bhi.n	800aa86 <HAL_RCCEx_PeriphCLKConfig+0x36>
 800aa66:	b1d3      	cbz	r3, 800aa9e <HAL_RCCEx_PeriphCLKConfig+0x4e>
 800aa68:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800aa6c:	d01d      	beq.n	800aaaa <HAL_RCCEx_PeriphCLKConfig+0x5a>
 800aa6e:	2601      	movs	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800aa70:	682b      	ldr	r3, [r5, #0]
 800aa72:	05d8      	lsls	r0, r3, #23
 800aa74:	d54f      	bpl.n	800ab16 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    switch (PeriphClkInit->Sai1ClockSelection)
 800aa76:	6deb      	ldr	r3, [r5, #92]	@ 0x5c
 800aa78:	2b04      	cmp	r3, #4
 800aa7a:	d84b      	bhi.n	800ab14 <HAL_RCCEx_PeriphCLKConfig+0xc4>
 800aa7c:	e8df f003 	tbb	[pc, r3]
 800aa80:	27443d22 	.word	0x27443d22
 800aa84:	27          	.byte	0x27
 800aa85:	00          	.byte	0x00
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aa86:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800aa8a:	d1f0      	bne.n	800aa6e <HAL_RCCEx_PeriphCLKConfig+0x1e>
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800aa8c:	4a86      	ldr	r2, [pc, #536]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aa8e:	6ee9      	ldr	r1, [r5, #108]	@ 0x6c
 800aa90:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aa92:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800aa96:	430b      	orrs	r3, r1
 800aa98:	6513      	str	r3, [r2, #80]	@ 0x50
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800aa9a:	2600      	movs	r6, #0
 800aa9c:	e7e8      	b.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aa9e:	4a82      	ldr	r2, [pc, #520]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aaa0:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aaa2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aaa6:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800aaa8:	e7f0      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800aaaa:	2102      	movs	r1, #2
 800aaac:	3008      	adds	r0, #8
 800aaae:	f7ff fedf 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aab2:	4606      	mov	r6, r0
    if (ret == HAL_OK)
 800aab4:	2800      	cmp	r0, #0
 800aab6:	d1db      	bne.n	800aa70 <HAL_RCCEx_PeriphCLKConfig+0x20>
 800aab8:	e7e8      	b.n	800aa8c <HAL_RCCEx_PeriphCLKConfig+0x3c>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800aaba:	2102      	movs	r1, #2
 800aabc:	3028      	adds	r0, #40	@ 0x28
 800aabe:	f7ff ff4f 	bl	800a960 <RCCEx_PLL3_Config>
 800aac2:	e7f6      	b.n	800aab2 <HAL_RCCEx_PeriphCLKConfig+0x62>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800aac4:	4a78      	ldr	r2, [pc, #480]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aac6:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800aac8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800aacc:	62d3      	str	r3, [r2, #44]	@ 0x2c
    switch (PeriphClkInit->SpdifrxClockSelection)
 800aace:	4634      	mov	r4, r6
    if (ret == HAL_OK)
 800aad0:	bb1c      	cbnz	r4, 800ab1a <HAL_RCCEx_PeriphCLKConfig+0xca>
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800aad2:	4a75      	ldr	r2, [pc, #468]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800aad4:	6de9      	ldr	r1, [r5, #92]	@ 0x5c
 800aad6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800aad8:	f023 0307 	bic.w	r3, r3, #7
 800aadc:	430b      	orrs	r3, r1
 800aade:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800aae0:	682b      	ldr	r3, [r5, #0]
 800aae2:	0599      	lsls	r1, r3, #22
 800aae4:	d528      	bpl.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai23ClockSelection)
 800aae6:	6e2b      	ldr	r3, [r5, #96]	@ 0x60
 800aae8:	2b80      	cmp	r3, #128	@ 0x80
 800aaea:	d043      	beq.n	800ab74 <HAL_RCCEx_PeriphCLKConfig+0x124>
 800aaec:	d817      	bhi.n	800ab1e <HAL_RCCEx_PeriphCLKConfig+0xce>
 800aaee:	b3a3      	cbz	r3, 800ab5a <HAL_RCCEx_PeriphCLKConfig+0x10a>
 800aaf0:	2b40      	cmp	r3, #64	@ 0x40
 800aaf2:	d038      	beq.n	800ab66 <HAL_RCCEx_PeriphCLKConfig+0x116>
 800aaf4:	2601      	movs	r6, #1
 800aaf6:	4634      	mov	r4, r6
 800aaf8:	e01e      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800aafa:	2100      	movs	r1, #0
 800aafc:	f105 0008 	add.w	r0, r5, #8
 800ab00:	f7ff feb6 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab04:	4604      	mov	r4, r0
        break;
 800ab06:	e7e3      	b.n	800aad0 <HAL_RCCEx_PeriphCLKConfig+0x80>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab08:	2100      	movs	r1, #0
 800ab0a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab0e:	f7ff ff27 	bl	800a960 <RCCEx_PLL3_Config>
 800ab12:	e7f7      	b.n	800ab04 <HAL_RCCEx_PeriphCLKConfig+0xb4>
    switch (PeriphClkInit->Sai1ClockSelection)
 800ab14:	2601      	movs	r6, #1
 800ab16:	4634      	mov	r4, r6
 800ab18:	e7e2      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800ab1a:	4626      	mov	r6, r4
 800ab1c:	e7e0      	b.n	800aae0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    switch (PeriphClkInit->Sai23ClockSelection)
 800ab1e:	2bc0      	cmp	r3, #192	@ 0xc0
 800ab20:	d002      	beq.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800ab22:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ab26:	d1e5      	bne.n	800aaf4 <HAL_RCCEx_PeriphCLKConfig+0xa4>
    if (ret == HAL_OK)
 800ab28:	bb54      	cbnz	r4, 800ab80 <HAL_RCCEx_PeriphCLKConfig+0x130>
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ab2a:	4a5f      	ldr	r2, [pc, #380]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab2c:	6e29      	ldr	r1, [r5, #96]	@ 0x60
 800ab2e:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ab30:	f423 73e0 	bic.w	r3, r3, #448	@ 0x1c0
 800ab34:	430b      	orrs	r3, r1
 800ab36:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ab38:	682b      	ldr	r3, [r5, #0]
 800ab3a:	055a      	lsls	r2, r3, #21
 800ab3c:	d531      	bpl.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ab3e:	f8d5 30ac 	ldr.w	r3, [r5, #172]	@ 0xac
 800ab42:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ab46:	d049      	beq.n	800abdc <HAL_RCCEx_PeriphCLKConfig+0x18c>
 800ab48:	d81c      	bhi.n	800ab84 <HAL_RCCEx_PeriphCLKConfig+0x134>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d039      	beq.n	800abc2 <HAL_RCCEx_PeriphCLKConfig+0x172>
 800ab4e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ab52:	d03c      	beq.n	800abce <HAL_RCCEx_PeriphCLKConfig+0x17e>
 800ab54:	2601      	movs	r6, #1
 800ab56:	4634      	mov	r4, r6
 800ab58:	e023      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x152>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ab5a:	4a53      	ldr	r2, [pc, #332]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab5c:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ab5e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ab62:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ab64:	e7e0      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ab66:	2100      	movs	r1, #0
 800ab68:	f105 0008 	add.w	r0, r5, #8
 800ab6c:	f7ff fe80 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab70:	4604      	mov	r4, r0
        break;
 800ab72:	e7d9      	b.n	800ab28 <HAL_RCCEx_PeriphCLKConfig+0xd8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ab74:	2100      	movs	r1, #0
 800ab76:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ab7a:	f7ff fef1 	bl	800a960 <RCCEx_PLL3_Config>
 800ab7e:	e7f7      	b.n	800ab70 <HAL_RCCEx_PeriphCLKConfig+0x120>
 800ab80:	4626      	mov	r6, r4
 800ab82:	e7d9      	b.n	800ab38 <HAL_RCCEx_PeriphCLKConfig+0xe8>
    switch (PeriphClkInit->Sai4AClockSelection)
 800ab84:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ab88:	d002      	beq.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>
 800ab8a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ab8e:	d1e1      	bne.n	800ab54 <HAL_RCCEx_PeriphCLKConfig+0x104>
    if (ret == HAL_OK)
 800ab90:	bb54      	cbnz	r4, 800abe8 <HAL_RCCEx_PeriphCLKConfig+0x198>
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800ab92:	4a45      	ldr	r2, [pc, #276]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ab94:	f8d5 10ac 	ldr.w	r1, [r5, #172]	@ 0xac
 800ab98:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ab9a:	f423 0360 	bic.w	r3, r3, #14680064	@ 0xe00000
 800ab9e:	430b      	orrs	r3, r1
 800aba0:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800aba2:	682b      	ldr	r3, [r5, #0]
 800aba4:	051b      	lsls	r3, r3, #20
 800aba6:	d530      	bpl.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->Sai4BClockSelection)
 800aba8:	f8d5 30b0 	ldr.w	r3, [r5, #176]	@ 0xb0
 800abac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800abb0:	d045      	beq.n	800ac3e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800abb2:	d81b      	bhi.n	800abec <HAL_RCCEx_PeriphCLKConfig+0x19c>
 800abb4:	b3b3      	cbz	r3, 800ac24 <HAL_RCCEx_PeriphCLKConfig+0x1d4>
 800abb6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800abba:	d039      	beq.n	800ac30 <HAL_RCCEx_PeriphCLKConfig+0x1e0>
 800abbc:	2601      	movs	r6, #1
 800abbe:	4634      	mov	r4, r6
 800abc0:	e023      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800abc2:	4a39      	ldr	r2, [pc, #228]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800abc4:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800abc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800abca:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800abcc:	e7e0      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800abce:	2100      	movs	r1, #0
 800abd0:	f105 0008 	add.w	r0, r5, #8
 800abd4:	f7ff fe4c 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abd8:	4604      	mov	r4, r0
        break;
 800abda:	e7d9      	b.n	800ab90 <HAL_RCCEx_PeriphCLKConfig+0x140>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800abdc:	2100      	movs	r1, #0
 800abde:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800abe2:	f7ff febd 	bl	800a960 <RCCEx_PLL3_Config>
 800abe6:	e7f7      	b.n	800abd8 <HAL_RCCEx_PeriphCLKConfig+0x188>
 800abe8:	4626      	mov	r6, r4
 800abea:	e7da      	b.n	800aba2 <HAL_RCCEx_PeriphCLKConfig+0x152>
    switch (PeriphClkInit->Sai4BClockSelection)
 800abec:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800abf0:	d002      	beq.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800abf2:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800abf6:	d1e1      	bne.n	800abbc <HAL_RCCEx_PeriphCLKConfig+0x16c>
    if (ret == HAL_OK)
 800abf8:	bb3c      	cbnz	r4, 800ac4a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800abfa:	4a2b      	ldr	r2, [pc, #172]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800abfc:	f8d5 10b0 	ldr.w	r1, [r5, #176]	@ 0xb0
 800ac00:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ac02:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800ac06:	430b      	orrs	r3, r1
 800ac08:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800ac0a:	682b      	ldr	r3, [r5, #0]
 800ac0c:	019f      	lsls	r7, r3, #6
 800ac0e:	d528      	bpl.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x212>
    switch (PeriphClkInit->QspiClockSelection)
 800ac10:	6ceb      	ldr	r3, [r5, #76]	@ 0x4c
 800ac12:	2b20      	cmp	r3, #32
 800ac14:	d03e      	beq.n	800ac94 <HAL_RCCEx_PeriphCLKConfig+0x244>
 800ac16:	d81a      	bhi.n	800ac4e <HAL_RCCEx_PeriphCLKConfig+0x1fe>
 800ac18:	b1db      	cbz	r3, 800ac52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800ac1a:	2b10      	cmp	r3, #16
 800ac1c:	d034      	beq.n	800ac88 <HAL_RCCEx_PeriphCLKConfig+0x238>
 800ac1e:	2601      	movs	r6, #1
 800ac20:	4634      	mov	r4, r6
 800ac22:	e01e      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x212>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac24:	4a20      	ldr	r2, [pc, #128]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ac26:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ac28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac2c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ac2e:	e7e3      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ac30:	2100      	movs	r1, #0
 800ac32:	f105 0008 	add.w	r0, r5, #8
 800ac36:	f7ff fe1b 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac3a:	4604      	mov	r4, r0
        break;
 800ac3c:	e7dc      	b.n	800abf8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ac3e:	2100      	movs	r1, #0
 800ac40:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ac44:	f7ff fe8c 	bl	800a960 <RCCEx_PLL3_Config>
 800ac48:	e7f7      	b.n	800ac3a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800ac4a:	4626      	mov	r6, r4
 800ac4c:	e7dd      	b.n	800ac0a <HAL_RCCEx_PeriphCLKConfig+0x1ba>
    switch (PeriphClkInit->QspiClockSelection)
 800ac4e:	2b30      	cmp	r3, #48	@ 0x30
 800ac50:	d1e5      	bne.n	800ac1e <HAL_RCCEx_PeriphCLKConfig+0x1ce>
    if (ret == HAL_OK)
 800ac52:	bb34      	cbnz	r4, 800aca2 <HAL_RCCEx_PeriphCLKConfig+0x252>
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800ac54:	4a14      	ldr	r2, [pc, #80]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ac56:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 800ac58:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ac5a:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 800ac5e:	430b      	orrs	r3, r1
 800ac60:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800ac62:	682b      	ldr	r3, [r5, #0]
 800ac64:	04d8      	lsls	r0, r3, #19
 800ac66:	d530      	bpl.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi123ClockSelection)
 800ac68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800ac6a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800ac6e:	f000 8097 	beq.w	800ada0 <HAL_RCCEx_PeriphCLKConfig+0x350>
 800ac72:	d81b      	bhi.n	800acac <HAL_RCCEx_PeriphCLKConfig+0x25c>
 800ac74:	2b00      	cmp	r3, #0
 800ac76:	f000 8086 	beq.w	800ad86 <HAL_RCCEx_PeriphCLKConfig+0x336>
 800ac7a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800ac7e:	f000 8088 	beq.w	800ad92 <HAL_RCCEx_PeriphCLKConfig+0x342>
 800ac82:	2601      	movs	r6, #1
 800ac84:	4634      	mov	r4, r6
 800ac86:	e020      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x27a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ac88:	4a07      	ldr	r2, [pc, #28]	@ (800aca8 <HAL_RCCEx_PeriphCLKConfig+0x258>)
 800ac8a:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ac8c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ac90:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ac92:	e7de      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x202>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800ac94:	2102      	movs	r1, #2
 800ac96:	f105 0008 	add.w	r0, r5, #8
 800ac9a:	f7ff fde9 	bl	800a870 <RCCEx_PLL2_Config>
 800ac9e:	4604      	mov	r4, r0
        break;
 800aca0:	e7d7      	b.n	800ac52 <HAL_RCCEx_PeriphCLKConfig+0x202>
 800aca2:	4626      	mov	r6, r4
 800aca4:	e7dd      	b.n	800ac62 <HAL_RCCEx_PeriphCLKConfig+0x212>
 800aca6:	bf00      	nop
 800aca8:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Spi123ClockSelection)
 800acac:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800acb0:	d002      	beq.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
 800acb2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800acb6:	d1e4      	bne.n	800ac82 <HAL_RCCEx_PeriphCLKConfig+0x232>
    if (ret == HAL_OK)
 800acb8:	2c00      	cmp	r4, #0
 800acba:	d177      	bne.n	800adac <HAL_RCCEx_PeriphCLKConfig+0x35c>
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800acbc:	4a9e      	ldr	r2, [pc, #632]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800acbe:	6e69      	ldr	r1, [r5, #100]	@ 0x64
 800acc0:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800acc2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800acc6:	430b      	orrs	r3, r1
 800acc8:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800acca:	682b      	ldr	r3, [r5, #0]
 800accc:	0499      	lsls	r1, r3, #18
 800acce:	d50c      	bpl.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800acd0:	6eab      	ldr	r3, [r5, #104]	@ 0x68
 800acd2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800acd6:	f000 8083 	beq.w	800ade0 <HAL_RCCEx_PeriphCLKConfig+0x390>
 800acda:	d869      	bhi.n	800adb0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800acdc:	2b00      	cmp	r3, #0
 800acde:	d06f      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800ace0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ace4:	d075      	beq.n	800add2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800ace6:	2601      	movs	r6, #1
 800ace8:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800acea:	682b      	ldr	r3, [r5, #0]
 800acec:	045a      	lsls	r2, r3, #17
 800acee:	d50e      	bpl.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->Spi6ClockSelection)
 800acf0:	f8d5 30b4 	ldr.w	r3, [r5, #180]	@ 0xb4
 800acf4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800acf8:	f000 8093 	beq.w	800ae22 <HAL_RCCEx_PeriphCLKConfig+0x3d2>
 800acfc:	d878      	bhi.n	800adf0 <HAL_RCCEx_PeriphCLKConfig+0x3a0>
 800acfe:	2b00      	cmp	r3, #0
 800ad00:	d07e      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800ad02:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad06:	f000 8085 	beq.w	800ae14 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
 800ad0a:	2601      	movs	r6, #1
 800ad0c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800ad0e:	682b      	ldr	r3, [r5, #0]
 800ad10:	015b      	lsls	r3, r3, #5
 800ad12:	d515      	bpl.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
    switch (PeriphClkInit->DsiClockSelection)
 800ad14:	6d2b      	ldr	r3, [r5, #80]	@ 0x50
 800ad16:	b14b      	cbz	r3, 800ad2c <HAL_RCCEx_PeriphCLKConfig+0x2dc>
 800ad18:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ad1c:	f040 8089 	bne.w	800ae32 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ad20:	2101      	movs	r1, #1
 800ad22:	f105 0008 	add.w	r0, r5, #8
 800ad26:	f7ff fda3 	bl	800a870 <RCCEx_PLL2_Config>
 800ad2a:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800ad2c:	2c00      	cmp	r4, #0
 800ad2e:	f040 8083 	bne.w	800ae38 <HAL_RCCEx_PeriphCLKConfig+0x3e8>
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800ad32:	4a81      	ldr	r2, [pc, #516]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ad34:	6d29      	ldr	r1, [r5, #80]	@ 0x50
 800ad36:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ad38:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800ad3c:	430b      	orrs	r3, r1
 800ad3e:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800ad40:	682b      	ldr	r3, [r5, #0]
 800ad42:	041f      	lsls	r7, r3, #16
 800ad44:	d511      	bpl.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x31a>
    switch (PeriphClkInit->FdcanClockSelection)
 800ad46:	6f6b      	ldr	r3, [r5, #116]	@ 0x74
 800ad48:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ad4c:	d076      	beq.n	800ae3c <HAL_RCCEx_PeriphCLKConfig+0x3ec>
 800ad4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ad52:	d079      	beq.n	800ae48 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800ad54:	2b00      	cmp	r3, #0
 800ad56:	d17e      	bne.n	800ae56 <HAL_RCCEx_PeriphCLKConfig+0x406>
    if (ret == HAL_OK)
 800ad58:	2c00      	cmp	r4, #0
 800ad5a:	d17f      	bne.n	800ae5c <HAL_RCCEx_PeriphCLKConfig+0x40c>
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800ad5c:	4a76      	ldr	r2, [pc, #472]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ad5e:	6f69      	ldr	r1, [r5, #116]	@ 0x74
 800ad60:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800ad62:	f023 5340 	bic.w	r3, r3, #805306368	@ 0x30000000
 800ad66:	430b      	orrs	r3, r1
 800ad68:	6513      	str	r3, [r2, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800ad6a:	682b      	ldr	r3, [r5, #0]
 800ad6c:	01d8      	lsls	r0, r3, #7
 800ad6e:	f140 8085 	bpl.w	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
    switch (PeriphClkInit->FmcClockSelection)
 800ad72:	6cab      	ldr	r3, [r5, #72]	@ 0x48
 800ad74:	2b03      	cmp	r3, #3
 800ad76:	f200 80e5 	bhi.w	800af44 <HAL_RCCEx_PeriphCLKConfig+0x4f4>
 800ad7a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800ad7e:	0076      	.short	0x0076
 800ad80:	00d50071 	.word	0x00d50071
 800ad84:	0076      	.short	0x0076
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ad86:	4a6c      	ldr	r2, [pc, #432]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ad88:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ad8a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ad8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ad90:	e792      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ad92:	2100      	movs	r1, #0
 800ad94:	f105 0008 	add.w	r0, r5, #8
 800ad98:	f7ff fd6a 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ad9c:	4604      	mov	r4, r0
        break;
 800ad9e:	e78b      	b.n	800acb8 <HAL_RCCEx_PeriphCLKConfig+0x268>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ada0:	2100      	movs	r1, #0
 800ada2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ada6:	f7ff fddb 	bl	800a960 <RCCEx_PLL3_Config>
 800adaa:	e7f7      	b.n	800ad9c <HAL_RCCEx_PeriphCLKConfig+0x34c>
 800adac:	4626      	mov	r6, r4
 800adae:	e78c      	b.n	800acca <HAL_RCCEx_PeriphCLKConfig+0x27a>
    switch (PeriphClkInit->Spi45ClockSelection)
 800adb0:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 800adb4:	f5b2 2f80 	cmp.w	r2, #262144	@ 0x40000
 800adb8:	d002      	beq.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
 800adba:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800adbe:	d192      	bne.n	800ace6 <HAL_RCCEx_PeriphCLKConfig+0x296>
    if (ret == HAL_OK)
 800adc0:	b9a4      	cbnz	r4, 800adec <HAL_RCCEx_PeriphCLKConfig+0x39c>
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800adc2:	4a5d      	ldr	r2, [pc, #372]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800adc4:	6ea9      	ldr	r1, [r5, #104]	@ 0x68
 800adc6:	6d13      	ldr	r3, [r2, #80]	@ 0x50
 800adc8:	f423 23e0 	bic.w	r3, r3, #458752	@ 0x70000
 800adcc:	430b      	orrs	r3, r1
 800adce:	6513      	str	r3, [r2, #80]	@ 0x50
 800add0:	e78b      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x29a>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800add2:	2101      	movs	r1, #1
 800add4:	f105 0008 	add.w	r0, r5, #8
 800add8:	f7ff fd4a 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800addc:	4604      	mov	r4, r0
        break;
 800adde:	e7ef      	b.n	800adc0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ade0:	2101      	movs	r1, #1
 800ade2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ade6:	f7ff fdbb 	bl	800a960 <RCCEx_PLL3_Config>
 800adea:	e7f7      	b.n	800addc <HAL_RCCEx_PeriphCLKConfig+0x38c>
 800adec:	4626      	mov	r6, r4
 800adee:	e77c      	b.n	800acea <HAL_RCCEx_PeriphCLKConfig+0x29a>
    switch (PeriphClkInit->Spi6ClockSelection)
 800adf0:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800adf4:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800adf8:	d002      	beq.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
 800adfa:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800adfe:	d184      	bne.n	800ad0a <HAL_RCCEx_PeriphCLKConfig+0x2ba>
    if (ret == HAL_OK)
 800ae00:	b9ac      	cbnz	r4, 800ae2e <HAL_RCCEx_PeriphCLKConfig+0x3de>
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800ae02:	4a4d      	ldr	r2, [pc, #308]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ae04:	f8d5 10b4 	ldr.w	r1, [r5, #180]	@ 0xb4
 800ae08:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800ae0a:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800ae0e:	430b      	orrs	r3, r1
 800ae10:	6593      	str	r3, [r2, #88]	@ 0x58
 800ae12:	e77c      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae14:	2101      	movs	r1, #1
 800ae16:	f105 0008 	add.w	r0, r5, #8
 800ae1a:	f7ff fd29 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae1e:	4604      	mov	r4, r0
        break;
 800ae20:	e7ee      	b.n	800ae00 <HAL_RCCEx_PeriphCLKConfig+0x3b0>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800ae22:	2101      	movs	r1, #1
 800ae24:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800ae28:	f7ff fd9a 	bl	800a960 <RCCEx_PLL3_Config>
 800ae2c:	e7f7      	b.n	800ae1e <HAL_RCCEx_PeriphCLKConfig+0x3ce>
 800ae2e:	4626      	mov	r6, r4
 800ae30:	e76d      	b.n	800ad0e <HAL_RCCEx_PeriphCLKConfig+0x2be>
    switch (PeriphClkInit->DsiClockSelection)
 800ae32:	2601      	movs	r6, #1
 800ae34:	4634      	mov	r4, r6
 800ae36:	e783      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
 800ae38:	4626      	mov	r6, r4
 800ae3a:	e781      	b.n	800ad40 <HAL_RCCEx_PeriphCLKConfig+0x2f0>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae3c:	4a3e      	ldr	r2, [pc, #248]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ae3e:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae44:	62d3      	str	r3, [r2, #44]	@ 0x2c
        break;
 800ae46:	e787      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x308>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800ae48:	2101      	movs	r1, #1
 800ae4a:	f105 0008 	add.w	r0, r5, #8
 800ae4e:	f7ff fd0f 	bl	800a870 <RCCEx_PLL2_Config>
 800ae52:	4604      	mov	r4, r0
        break;
 800ae54:	e780      	b.n	800ad58 <HAL_RCCEx_PeriphCLKConfig+0x308>
    switch (PeriphClkInit->FdcanClockSelection)
 800ae56:	2601      	movs	r6, #1
 800ae58:	4634      	mov	r4, r6
 800ae5a:	e786      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x31a>
 800ae5c:	4626      	mov	r6, r4
 800ae5e:	e784      	b.n	800ad6a <HAL_RCCEx_PeriphCLKConfig+0x31a>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ae60:	4a35      	ldr	r2, [pc, #212]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ae62:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800ae64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ae68:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800ae6a:	2c00      	cmp	r4, #0
 800ae6c:	d16d      	bne.n	800af4a <HAL_RCCEx_PeriphCLKConfig+0x4fa>
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800ae6e:	4a32      	ldr	r2, [pc, #200]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ae70:	6ca9      	ldr	r1, [r5, #72]	@ 0x48
 800ae72:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800ae74:	f023 0303 	bic.w	r3, r3, #3
 800ae78:	430b      	orrs	r3, r1
 800ae7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800ae7c:	682b      	ldr	r3, [r5, #0]
 800ae7e:	0259      	lsls	r1, r3, #9
 800ae80:	d539      	bpl.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800ae82:	4f2e      	ldr	r7, [pc, #184]	@ (800af3c <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800ae84:	683b      	ldr	r3, [r7, #0]
 800ae86:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800ae8a:	603b      	str	r3, [r7, #0]
    tickstart = HAL_GetTick();
 800ae8c:	f7fb fbf4 	bl	8006678 <HAL_GetTick>
 800ae90:	4680      	mov	r8, r0
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800ae92:	683b      	ldr	r3, [r7, #0]
 800ae94:	05da      	lsls	r2, r3, #23
 800ae96:	d55a      	bpl.n	800af4e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    if (ret == HAL_OK)
 800ae98:	2c00      	cmp	r4, #0
 800ae9a:	d176      	bne.n	800af8a <HAL_RCCEx_PeriphCLKConfig+0x53a>
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800ae9c:	4b26      	ldr	r3, [pc, #152]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800ae9e:	f8d5 00b8 	ldr.w	r0, [r5, #184]	@ 0xb8
 800aea2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800aea4:	4042      	eors	r2, r0
 800aea6:	f412 7f40 	tst.w	r2, #768	@ 0x300
 800aeaa:	d00b      	beq.n	800aec4 <HAL_RCCEx_PeriphCLKConfig+0x474>
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aeac:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_FORCE();
 800aeae:	6f19      	ldr	r1, [r3, #112]	@ 0x70
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800aeb0:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
        __HAL_RCC_BACKUPRESET_FORCE();
 800aeb4:	f441 3180 	orr.w	r1, r1, #65536	@ 0x10000
 800aeb8:	6719      	str	r1, [r3, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800aeba:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800aebc:	f421 3180 	bic.w	r1, r1, #65536	@ 0x10000
 800aec0:	6719      	str	r1, [r3, #112]	@ 0x70
        RCC->BDCR = tmpreg;
 800aec2:	671a      	str	r2, [r3, #112]	@ 0x70
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800aec4:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800aec8:	d04a      	beq.n	800af60 <HAL_RCCEx_PeriphCLKConfig+0x510>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800aeca:	f8d5 30b8 	ldr.w	r3, [r5, #184]	@ 0xb8
 800aece:	491a      	ldr	r1, [pc, #104]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aed0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800aed4:	f5b2 7f40 	cmp.w	r2, #768	@ 0x300
 800aed8:	d153      	bne.n	800af82 <HAL_RCCEx_PeriphCLKConfig+0x532>
 800aeda:	6908      	ldr	r0, [r1, #16]
 800aedc:	4a18      	ldr	r2, [pc, #96]	@ (800af40 <HAL_RCCEx_PeriphCLKConfig+0x4f0>)
 800aede:	f420 507c 	bic.w	r0, r0, #16128	@ 0x3f00
 800aee2:	ea02 1213 	and.w	r2, r2, r3, lsr #4
 800aee6:	4302      	orrs	r2, r0
 800aee8:	610a      	str	r2, [r1, #16]
 800aeea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800aeee:	4a12      	ldr	r2, [pc, #72]	@ (800af38 <HAL_RCCEx_PeriphCLKConfig+0x4e8>)
 800aef0:	6f11      	ldr	r1, [r2, #112]	@ 0x70
 800aef2:	430b      	orrs	r3, r1
 800aef4:	6713      	str	r3, [r2, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800aef6:	682b      	ldr	r3, [r5, #0]
 800aef8:	07d8      	lsls	r0, r3, #31
 800aefa:	d50a      	bpl.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
    switch (PeriphClkInit->Usart16ClockSelection)
 800aefc:	f8d5 3080 	ldr.w	r3, [r5, #128]	@ 0x80
 800af00:	2b10      	cmp	r3, #16
 800af02:	d05b      	beq.n	800afbc <HAL_RCCEx_PeriphCLKConfig+0x56c>
 800af04:	d843      	bhi.n	800af8e <HAL_RCCEx_PeriphCLKConfig+0x53e>
 800af06:	2b00      	cmp	r3, #0
 800af08:	d047      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800af0a:	2b08      	cmp	r3, #8
 800af0c:	d04f      	beq.n	800afae <HAL_RCCEx_PeriphCLKConfig+0x55e>
 800af0e:	2601      	movs	r6, #1
 800af10:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800af12:	682b      	ldr	r3, [r5, #0]
 800af14:	0799      	lsls	r1, r3, #30
 800af16:	d567      	bpl.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800af18:	6feb      	ldr	r3, [r5, #124]	@ 0x7c
 800af1a:	2b05      	cmp	r3, #5
 800af1c:	d87a      	bhi.n	800b014 <HAL_RCCEx_PeriphCLKConfig+0x5c4>
 800af1e:	e8df f003 	tbb	[pc, r3]
 800af22:	555b      	.short	0x555b
 800af24:	5b5b5b73 	.word	0x5b5b5b73
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800af28:	2102      	movs	r1, #2
 800af2a:	f105 0008 	add.w	r0, r5, #8
 800af2e:	f7ff fc9f 	bl	800a870 <RCCEx_PLL2_Config>
 800af32:	4604      	mov	r4, r0
        break;
 800af34:	e799      	b.n	800ae6a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800af36:	bf00      	nop
 800af38:	58024400 	.word	0x58024400
 800af3c:	58024800 	.word	0x58024800
 800af40:	00ffffcf 	.word	0x00ffffcf
    switch (PeriphClkInit->FmcClockSelection)
 800af44:	2601      	movs	r6, #1
 800af46:	4634      	mov	r4, r6
 800af48:	e798      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
 800af4a:	4626      	mov	r6, r4
 800af4c:	e796      	b.n	800ae7c <HAL_RCCEx_PeriphCLKConfig+0x42c>
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800af4e:	f7fb fb93 	bl	8006678 <HAL_GetTick>
 800af52:	eba0 0008 	sub.w	r0, r0, r8
 800af56:	2864      	cmp	r0, #100	@ 0x64
 800af58:	d99b      	bls.n	800ae92 <HAL_RCCEx_PeriphCLKConfig+0x442>
        ret = HAL_TIMEOUT;
 800af5a:	2603      	movs	r6, #3
 800af5c:	4634      	mov	r4, r6
 800af5e:	e7ca      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
        tickstart = HAL_GetTick();
 800af60:	f7fb fb8a 	bl	8006678 <HAL_GetTick>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af64:	f8df 80b8 	ldr.w	r8, [pc, #184]	@ 800b020 <HAL_RCCEx_PeriphCLKConfig+0x5d0>
        tickstart = HAL_GetTick();
 800af68:	4607      	mov	r7, r0
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af6a:	f241 3988 	movw	r9, #5000	@ 0x1388
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800af6e:	f8d8 3070 	ldr.w	r3, [r8, #112]	@ 0x70
 800af72:	079b      	lsls	r3, r3, #30
 800af74:	d4a9      	bmi.n	800aeca <HAL_RCCEx_PeriphCLKConfig+0x47a>
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800af76:	f7fb fb7f 	bl	8006678 <HAL_GetTick>
 800af7a:	1bc0      	subs	r0, r0, r7
 800af7c:	4548      	cmp	r0, r9
 800af7e:	d9f6      	bls.n	800af6e <HAL_RCCEx_PeriphCLKConfig+0x51e>
 800af80:	e7eb      	b.n	800af5a <HAL_RCCEx_PeriphCLKConfig+0x50a>
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800af82:	690a      	ldr	r2, [r1, #16]
 800af84:	f422 527c 	bic.w	r2, r2, #16128	@ 0x3f00
 800af88:	e7ae      	b.n	800aee8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800af8a:	4626      	mov	r6, r4
 800af8c:	e7b3      	b.n	800aef6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
    switch (PeriphClkInit->Usart16ClockSelection)
 800af8e:	f023 0208 	bic.w	r2, r3, #8
 800af92:	2a20      	cmp	r2, #32
 800af94:	d001      	beq.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x54a>
 800af96:	2b18      	cmp	r3, #24
 800af98:	d1b9      	bne.n	800af0e <HAL_RCCEx_PeriphCLKConfig+0x4be>
    if (ret == HAL_OK)
 800af9a:	b9ac      	cbnz	r4, 800afc8 <HAL_RCCEx_PeriphCLKConfig+0x578>
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800af9c:	4a20      	ldr	r2, [pc, #128]	@ (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800af9e:	f8d5 1080 	ldr.w	r1, [r5, #128]	@ 0x80
 800afa2:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800afa4:	f023 0338 	bic.w	r3, r3, #56	@ 0x38
 800afa8:	430b      	orrs	r3, r1
 800afaa:	6553      	str	r3, [r2, #84]	@ 0x54
 800afac:	e7b1      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afae:	2101      	movs	r1, #1
 800afb0:	f105 0008 	add.w	r0, r5, #8
 800afb4:	f7ff fc5c 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afb8:	4604      	mov	r4, r0
        break;
 800afba:	e7ee      	b.n	800af9a <HAL_RCCEx_PeriphCLKConfig+0x54a>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afbc:	2101      	movs	r1, #1
 800afbe:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800afc2:	f7ff fccd 	bl	800a960 <RCCEx_PLL3_Config>
 800afc6:	e7f7      	b.n	800afb8 <HAL_RCCEx_PeriphCLKConfig+0x568>
 800afc8:	4626      	mov	r6, r4
 800afca:	e7a2      	b.n	800af12 <HAL_RCCEx_PeriphCLKConfig+0x4c2>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800afcc:	2101      	movs	r1, #1
 800afce:	f105 0008 	add.w	r0, r5, #8
 800afd2:	f7ff fc4d 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800afd6:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800afd8:	b9fc      	cbnz	r4, 800b01a <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800afda:	4a11      	ldr	r2, [pc, #68]	@ (800b020 <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800afdc:	6fe9      	ldr	r1, [r5, #124]	@ 0x7c
 800afde:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800afe0:	f023 0307 	bic.w	r3, r3, #7
 800afe4:	430b      	orrs	r3, r1
 800afe6:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800afe8:	682b      	ldr	r3, [r5, #0]
 800afea:	075a      	lsls	r2, r3, #29
 800afec:	d52b      	bpl.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800afee:	f8d5 3098 	ldr.w	r3, [r5, #152]	@ 0x98
 800aff2:	2b05      	cmp	r3, #5
 800aff4:	f200 816e 	bhi.w	800b2d4 <HAL_RCCEx_PeriphCLKConfig+0x884>
 800aff8:	e8df f013 	tbh	[pc, r3, lsl #1]
 800affc:	0014001a 	.word	0x0014001a
 800b000:	001a0166 	.word	0x001a0166
 800b004:	001a001a 	.word	0x001a001a
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b008:	2101      	movs	r1, #1
 800b00a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b00e:	f7ff fca7 	bl	800a960 <RCCEx_PLL3_Config>
 800b012:	e7e0      	b.n	800afd6 <HAL_RCCEx_PeriphCLKConfig+0x586>
    switch (PeriphClkInit->Usart234578ClockSelection)
 800b014:	2601      	movs	r6, #1
 800b016:	4634      	mov	r4, r6
 800b018:	e7e6      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b01a:	4626      	mov	r6, r4
 800b01c:	e7e4      	b.n	800afe8 <HAL_RCCEx_PeriphCLKConfig+0x598>
 800b01e:	bf00      	nop
 800b020:	58024400 	.word	0x58024400
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b024:	2101      	movs	r1, #1
 800b026:	f105 0008 	add.w	r0, r5, #8
 800b02a:	f7ff fc21 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b02e:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b030:	2c00      	cmp	r4, #0
 800b032:	f040 8152 	bne.w	800b2da <HAL_RCCEx_PeriphCLKConfig+0x88a>
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800b036:	4aaa      	ldr	r2, [pc, #680]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b038:	f8d5 1098 	ldr.w	r1, [r5, #152]	@ 0x98
 800b03c:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b03e:	f023 0307 	bic.w	r3, r3, #7
 800b042:	430b      	orrs	r3, r1
 800b044:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800b046:	682b      	ldr	r3, [r5, #0]
 800b048:	069b      	lsls	r3, r3, #26
 800b04a:	d510      	bpl.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b04c:	f8d5 3094 	ldr.w	r3, [r5, #148]	@ 0x94
 800b050:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800b054:	f000 8160 	beq.w	800b318 <HAL_RCCEx_PeriphCLKConfig+0x8c8>
 800b058:	f200 8144 	bhi.w	800b2e4 <HAL_RCCEx_PeriphCLKConfig+0x894>
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	f000 814a 	beq.w	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800b062:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800b066:	f000 8150 	beq.w	800b30a <HAL_RCCEx_PeriphCLKConfig+0x8ba>
 800b06a:	2601      	movs	r6, #1
 800b06c:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800b06e:	682b      	ldr	r3, [r5, #0]
 800b070:	065f      	lsls	r7, r3, #25
 800b072:	d510      	bpl.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b074:	f8d5 30a0 	ldr.w	r3, [r5, #160]	@ 0xa0
 800b078:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800b07c:	f000 816e 	beq.w	800b35c <HAL_RCCEx_PeriphCLKConfig+0x90c>
 800b080:	f200 8152 	bhi.w	800b328 <HAL_RCCEx_PeriphCLKConfig+0x8d8>
 800b084:	2b00      	cmp	r3, #0
 800b086:	f000 8158 	beq.w	800b33a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800b08a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800b08e:	f000 815e 	beq.w	800b34e <HAL_RCCEx_PeriphCLKConfig+0x8fe>
 800b092:	2601      	movs	r6, #1
 800b094:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800b096:	682b      	ldr	r3, [r5, #0]
 800b098:	0618      	lsls	r0, r3, #24
 800b09a:	d510      	bpl.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b09c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	@ 0xa4
 800b0a0:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b0a4:	f000 817c 	beq.w	800b3a0 <HAL_RCCEx_PeriphCLKConfig+0x950>
 800b0a8:	f200 8160 	bhi.w	800b36c <HAL_RCCEx_PeriphCLKConfig+0x91c>
 800b0ac:	2b00      	cmp	r3, #0
 800b0ae:	f000 8166 	beq.w	800b37e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800b0b2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800b0b6:	f000 816c 	beq.w	800b392 <HAL_RCCEx_PeriphCLKConfig+0x942>
 800b0ba:	2601      	movs	r6, #1
 800b0bc:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800b0be:	682b      	ldr	r3, [r5, #0]
 800b0c0:	0719      	lsls	r1, r3, #28
 800b0c2:	d514      	bpl.n	800b0ee <HAL_RCCEx_PeriphCLKConfig+0x69e>
    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800b0c4:	f8d5 3088 	ldr.w	r3, [r5, #136]	@ 0x88
 800b0c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800b0cc:	d107      	bne.n	800b0de <HAL_RCCEx_PeriphCLKConfig+0x68e>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0ce:	2102      	movs	r1, #2
 800b0d0:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b0d4:	f7ff fc44 	bl	800a960 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b0d8:	2800      	cmp	r0, #0
 800b0da:	bf18      	it	ne
 800b0dc:	2601      	movne	r6, #1
    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800b0de:	4a80      	ldr	r2, [pc, #512]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b0e0:	f8d5 1088 	ldr.w	r1, [r5, #136]	@ 0x88
 800b0e4:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b0e6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 800b0ea:	430b      	orrs	r3, r1
 800b0ec:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800b0ee:	682b      	ldr	r3, [r5, #0]
 800b0f0:	06da      	lsls	r2, r3, #27
 800b0f2:	d514      	bpl.n	800b11e <HAL_RCCEx_PeriphCLKConfig+0x6ce>
    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800b0f4:	f8d5 309c 	ldr.w	r3, [r5, #156]	@ 0x9c
 800b0f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800b0fc:	d107      	bne.n	800b10e <HAL_RCCEx_PeriphCLKConfig+0x6be>
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b0fe:	2102      	movs	r1, #2
 800b100:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b104:	f7ff fc2c 	bl	800a960 <RCCEx_PLL3_Config>
        status = HAL_ERROR;
 800b108:	2800      	cmp	r0, #0
 800b10a:	bf18      	it	ne
 800b10c:	2601      	movne	r6, #1
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800b10e:	4a74      	ldr	r2, [pc, #464]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b110:	f8d5 109c 	ldr.w	r1, [r5, #156]	@ 0x9c
 800b114:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b116:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800b11a:	430b      	orrs	r3, r1
 800b11c:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800b11e:	682b      	ldr	r3, [r5, #0]
 800b120:	031b      	lsls	r3, r3, #12
 800b122:	d51b      	bpl.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x70c>
    switch (PeriphClkInit->AdcClockSelection)
 800b124:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b128:	f5b1 3f80 	cmp.w	r1, #65536	@ 0x10000
 800b12c:	f000 8140 	beq.w	800b3b0 <HAL_RCCEx_PeriphCLKConfig+0x960>
 800b130:	f5b1 3f00 	cmp.w	r1, #131072	@ 0x20000
 800b134:	d007      	beq.n	800b146 <HAL_RCCEx_PeriphCLKConfig+0x6f6>
 800b136:	2900      	cmp	r1, #0
 800b138:	f040 8140 	bne.w	800b3bc <HAL_RCCEx_PeriphCLKConfig+0x96c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b13c:	f105 0008 	add.w	r0, r5, #8
 800b140:	f7ff fb96 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b144:	4604      	mov	r4, r0
    if (ret == HAL_OK)
 800b146:	2c00      	cmp	r4, #0
 800b148:	f040 813b 	bne.w	800b3c2 <HAL_RCCEx_PeriphCLKConfig+0x972>
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800b14c:	4a64      	ldr	r2, [pc, #400]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b14e:	f8d5 10a8 	ldr.w	r1, [r5, #168]	@ 0xa8
 800b152:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b154:	f423 3340 	bic.w	r3, r3, #196608	@ 0x30000
 800b158:	430b      	orrs	r3, r1
 800b15a:	6593      	str	r3, [r2, #88]	@ 0x58
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800b15c:	682b      	ldr	r3, [r5, #0]
 800b15e:	035f      	lsls	r7, r3, #13
 800b160:	d50f      	bpl.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x732>
    switch (PeriphClkInit->UsbClockSelection)
 800b162:	f8d5 308c 	ldr.w	r3, [r5, #140]	@ 0x8c
 800b166:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800b16a:	f000 813b 	beq.w	800b3e4 <HAL_RCCEx_PeriphCLKConfig+0x994>
 800b16e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800b172:	f000 812d 	beq.w	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b176:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800b17a:	f000 8124 	beq.w	800b3c6 <HAL_RCCEx_PeriphCLKConfig+0x976>
 800b17e:	2601      	movs	r6, #1
 800b180:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800b182:	682b      	ldr	r3, [r5, #0]
 800b184:	03d8      	lsls	r0, r3, #15
 800b186:	d509      	bpl.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->SdmmcClockSelection)
 800b188:	6d6b      	ldr	r3, [r5, #84]	@ 0x54
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	f000 8133 	beq.w	800b3f6 <HAL_RCCEx_PeriphCLKConfig+0x9a6>
 800b190:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800b194:	f000 813d 	beq.w	800b412 <HAL_RCCEx_PeriphCLKConfig+0x9c2>
 800b198:	2601      	movs	r6, #1
 800b19a:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800b19c:	682b      	ldr	r3, [r5, #0]
 800b19e:	0099      	lsls	r1, r3, #2
 800b1a0:	d507      	bpl.n	800b1b2 <HAL_RCCEx_PeriphCLKConfig+0x762>
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800b1a2:	2102      	movs	r1, #2
 800b1a4:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b1a8:	f7ff fbda 	bl	800a960 <RCCEx_PLL3_Config>
      status = HAL_ERROR;
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	bf18      	it	ne
 800b1b0:	2601      	movne	r6, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800b1b2:	e9d5 3100 	ldrd	r3, r1, [r5]
 800b1b6:	039a      	lsls	r2, r3, #14
 800b1b8:	f140 8143 	bpl.w	800b442 <HAL_RCCEx_PeriphCLKConfig+0x9f2>
    switch (PeriphClkInit->RngClockSelection)
 800b1bc:	f8d5 0084 	ldr.w	r0, [r5, #132]	@ 0x84
 800b1c0:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 800b1c4:	f000 813f 	beq.w	800b446 <HAL_RCCEx_PeriphCLKConfig+0x9f6>
 800b1c8:	f200 812c 	bhi.w	800b424 <HAL_RCCEx_PeriphCLKConfig+0x9d4>
 800b1cc:	2800      	cmp	r0, #0
 800b1ce:	f000 812f 	beq.w	800b430 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
 800b1d2:	2401      	movs	r4, #1
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800b1d4:	02df      	lsls	r7, r3, #11
 800b1d6:	d506      	bpl.n	800b1e6 <HAL_RCCEx_PeriphCLKConfig+0x796>
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800b1d8:	4841      	ldr	r0, [pc, #260]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b1da:	6fae      	ldr	r6, [r5, #120]	@ 0x78
 800b1dc:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b1de:	f022 4200 	bic.w	r2, r2, #2147483648	@ 0x80000000
 800b1e2:	4332      	orrs	r2, r6
 800b1e4:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800b1e6:	00de      	lsls	r6, r3, #3
 800b1e8:	d507      	bpl.n	800b1fa <HAL_RCCEx_PeriphCLKConfig+0x7aa>
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800b1ea:	483d      	ldr	r0, [pc, #244]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b1ec:	f8d5 60bc 	ldr.w	r6, [r5, #188]	@ 0xbc
 800b1f0:	6902      	ldr	r2, [r0, #16]
 800b1f2:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800b1f6:	4332      	orrs	r2, r6
 800b1f8:	6102      	str	r2, [r0, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800b1fa:	0298      	lsls	r0, r3, #10
 800b1fc:	d506      	bpl.n	800b20c <HAL_RCCEx_PeriphCLKConfig+0x7bc>
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800b1fe:	4838      	ldr	r0, [pc, #224]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b200:	6f2e      	ldr	r6, [r5, #112]	@ 0x70
 800b202:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800b204:	f022 7280 	bic.w	r2, r2, #16777216	@ 0x1000000
 800b208:	4332      	orrs	r2, r6
 800b20a:	6502      	str	r2, [r0, #80]	@ 0x50
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800b20c:	005a      	lsls	r2, r3, #1
 800b20e:	d509      	bpl.n	800b224 <HAL_RCCEx_PeriphCLKConfig+0x7d4>
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800b210:	4a33      	ldr	r2, [pc, #204]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b212:	6910      	ldr	r0, [r2, #16]
 800b214:	f420 4000 	bic.w	r0, r0, #32768	@ 0x8000
 800b218:	6110      	str	r0, [r2, #16]
 800b21a:	6910      	ldr	r0, [r2, #16]
 800b21c:	f8d5 60c0 	ldr.w	r6, [r5, #192]	@ 0xc0
 800b220:	4330      	orrs	r0, r6
 800b222:	6110      	str	r0, [r2, #16]
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800b224:	2b00      	cmp	r3, #0
 800b226:	da06      	bge.n	800b236 <HAL_RCCEx_PeriphCLKConfig+0x7e6>
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800b228:	482d      	ldr	r0, [pc, #180]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b22a:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 800b22c:	6cc2      	ldr	r2, [r0, #76]	@ 0x4c
 800b22e:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 800b232:	4332      	orrs	r2, r6
 800b234:	64c2      	str	r2, [r0, #76]	@ 0x4c
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800b236:	021f      	lsls	r7, r3, #8
 800b238:	d507      	bpl.n	800b24a <HAL_RCCEx_PeriphCLKConfig+0x7fa>
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800b23a:	4a29      	ldr	r2, [pc, #164]	@ (800b2e0 <HAL_RCCEx_PeriphCLKConfig+0x890>)
 800b23c:	f8d5 0090 	ldr.w	r0, [r5, #144]	@ 0x90
 800b240:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b242:	f423 0340 	bic.w	r3, r3, #12582912	@ 0xc00000
 800b246:	4303      	orrs	r3, r0
 800b248:	6553      	str	r3, [r2, #84]	@ 0x54
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800b24a:	07ce      	lsls	r6, r1, #31
 800b24c:	d506      	bpl.n	800b25c <HAL_RCCEx_PeriphCLKConfig+0x80c>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b24e:	2100      	movs	r1, #0
 800b250:	f105 0008 	add.w	r0, r5, #8
 800b254:	f7ff fb0c 	bl	800a870 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b258:	4607      	mov	r7, r0
 800b25a:	b900      	cbnz	r0, 800b25e <HAL_RCCEx_PeriphCLKConfig+0x80e>
    switch (PeriphClkInit->RngClockSelection)
 800b25c:	4627      	mov	r7, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800b25e:	686b      	ldr	r3, [r5, #4]
 800b260:	079c      	lsls	r4, r3, #30
 800b262:	d506      	bpl.n	800b272 <HAL_RCCEx_PeriphCLKConfig+0x822>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800b264:	2101      	movs	r1, #1
 800b266:	f105 0008 	add.w	r0, r5, #8
 800b26a:	f7ff fb01 	bl	800a870 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b26e:	4606      	mov	r6, r0
 800b270:	b900      	cbnz	r0, 800b274 <HAL_RCCEx_PeriphCLKConfig+0x824>
    switch (PeriphClkInit->RngClockSelection)
 800b272:	463e      	mov	r6, r7
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800b274:	686b      	ldr	r3, [r5, #4]
 800b276:	0758      	lsls	r0, r3, #29
 800b278:	d506      	bpl.n	800b288 <HAL_RCCEx_PeriphCLKConfig+0x838>
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b27a:	2102      	movs	r1, #2
 800b27c:	f105 0008 	add.w	r0, r5, #8
 800b280:	f7ff faf6 	bl	800a870 <RCCEx_PLL2_Config>
    if (ret == HAL_OK)
 800b284:	4604      	mov	r4, r0
 800b286:	b900      	cbnz	r0, 800b28a <HAL_RCCEx_PeriphCLKConfig+0x83a>
    switch (PeriphClkInit->RngClockSelection)
 800b288:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800b28a:	686b      	ldr	r3, [r5, #4]
 800b28c:	0719      	lsls	r1, r3, #28
 800b28e:	d506      	bpl.n	800b29e <HAL_RCCEx_PeriphCLKConfig+0x84e>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800b290:	2100      	movs	r1, #0
 800b292:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b296:	f7ff fb63 	bl	800a960 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b29a:	4606      	mov	r6, r0
 800b29c:	b900      	cbnz	r0, 800b2a0 <HAL_RCCEx_PeriphCLKConfig+0x850>
    switch (PeriphClkInit->RngClockSelection)
 800b29e:	4626      	mov	r6, r4
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800b2a0:	686b      	ldr	r3, [r5, #4]
 800b2a2:	06da      	lsls	r2, r3, #27
 800b2a4:	d506      	bpl.n	800b2b4 <HAL_RCCEx_PeriphCLKConfig+0x864>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2a6:	2101      	movs	r1, #1
 800b2a8:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2ac:	f7ff fb58 	bl	800a960 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b2b0:	4604      	mov	r4, r0
 800b2b2:	b900      	cbnz	r0, 800b2b6 <HAL_RCCEx_PeriphCLKConfig+0x866>
    switch (PeriphClkInit->RngClockSelection)
 800b2b4:	4634      	mov	r4, r6
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800b2b6:	686b      	ldr	r3, [r5, #4]
 800b2b8:	069b      	lsls	r3, r3, #26
 800b2ba:	f100 80ca 	bmi.w	800b452 <HAL_RCCEx_PeriphCLKConfig+0xa02>
  if (status == HAL_OK)
 800b2be:	1e20      	subs	r0, r4, #0
 800b2c0:	bf18      	it	ne
 800b2c2:	2001      	movne	r0, #1
}
 800b2c4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b2c8:	2101      	movs	r1, #1
 800b2ca:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b2ce:	f7ff fb47 	bl	800a960 <RCCEx_PLL3_Config>
 800b2d2:	e6ac      	b.n	800b02e <HAL_RCCEx_PeriphCLKConfig+0x5de>
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800b2d4:	2601      	movs	r6, #1
 800b2d6:	4634      	mov	r4, r6
 800b2d8:	e6b5      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800b2da:	4626      	mov	r6, r4
 800b2dc:	e6b3      	b.n	800b046 <HAL_RCCEx_PeriphCLKConfig+0x5f6>
 800b2de:	bf00      	nop
 800b2e0:	58024400 	.word	0x58024400
    switch (PeriphClkInit->Lptim1ClockSelection)
 800b2e4:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 800b2e8:	f1b2 4f80 	cmp.w	r2, #1073741824	@ 0x40000000
 800b2ec:	d003      	beq.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
 800b2ee:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800b2f2:	f47f aeba 	bne.w	800b06a <HAL_RCCEx_PeriphCLKConfig+0x61a>
    if (ret == HAL_OK)
 800b2f6:	b9ac      	cbnz	r4, 800b324 <HAL_RCCEx_PeriphCLKConfig+0x8d4>
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800b2f8:	4a5b      	ldr	r2, [pc, #364]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b2fa:	f8d5 1094 	ldr.w	r1, [r5, #148]	@ 0x94
 800b2fe:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b300:	f023 43e0 	bic.w	r3, r3, #1879048192	@ 0x70000000
 800b304:	430b      	orrs	r3, r1
 800b306:	6553      	str	r3, [r2, #84]	@ 0x54
 800b308:	e6b1      	b.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x61e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b30a:	2100      	movs	r1, #0
 800b30c:	f105 0008 	add.w	r0, r5, #8
 800b310:	f7ff faae 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b314:	4604      	mov	r4, r0
        break;
 800b316:	e7ee      	b.n	800b2f6 <HAL_RCCEx_PeriphCLKConfig+0x8a6>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b318:	2102      	movs	r1, #2
 800b31a:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b31e:	f7ff fb1f 	bl	800a960 <RCCEx_PLL3_Config>
 800b322:	e7f7      	b.n	800b314 <HAL_RCCEx_PeriphCLKConfig+0x8c4>
 800b324:	4626      	mov	r6, r4
 800b326:	e6a2      	b.n	800b06e <HAL_RCCEx_PeriphCLKConfig+0x61e>
    switch (PeriphClkInit->Lptim2ClockSelection)
 800b328:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 800b32c:	f5b2 5f80 	cmp.w	r2, #4096	@ 0x1000
 800b330:	d003      	beq.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
 800b332:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800b336:	f47f aeac 	bne.w	800b092 <HAL_RCCEx_PeriphCLKConfig+0x642>
    if (ret == HAL_OK)
 800b33a:	b9ac      	cbnz	r4, 800b368 <HAL_RCCEx_PeriphCLKConfig+0x918>
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800b33c:	4a4a      	ldr	r2, [pc, #296]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b33e:	f8d5 10a0 	ldr.w	r1, [r5, #160]	@ 0xa0
 800b342:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b344:	f423 53e0 	bic.w	r3, r3, #7168	@ 0x1c00
 800b348:	430b      	orrs	r3, r1
 800b34a:	6593      	str	r3, [r2, #88]	@ 0x58
 800b34c:	e6a3      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x646>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b34e:	2100      	movs	r1, #0
 800b350:	f105 0008 	add.w	r0, r5, #8
 800b354:	f7ff fa8c 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b358:	4604      	mov	r4, r0
        break;
 800b35a:	e7ee      	b.n	800b33a <HAL_RCCEx_PeriphCLKConfig+0x8ea>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b35c:	2102      	movs	r1, #2
 800b35e:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b362:	f7ff fafd 	bl	800a960 <RCCEx_PLL3_Config>
 800b366:	e7f7      	b.n	800b358 <HAL_RCCEx_PeriphCLKConfig+0x908>
 800b368:	4626      	mov	r6, r4
 800b36a:	e694      	b.n	800b096 <HAL_RCCEx_PeriphCLKConfig+0x646>
    switch (PeriphClkInit->Lptim345ClockSelection)
 800b36c:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 800b370:	f5b2 4f00 	cmp.w	r2, #32768	@ 0x8000
 800b374:	d003      	beq.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x92e>
 800b376:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800b37a:	f47f ae9e 	bne.w	800b0ba <HAL_RCCEx_PeriphCLKConfig+0x66a>
    if (ret == HAL_OK)
 800b37e:	b9ac      	cbnz	r4, 800b3ac <HAL_RCCEx_PeriphCLKConfig+0x95c>
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800b380:	4a39      	ldr	r2, [pc, #228]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b382:	f8d5 10a4 	ldr.w	r1, [r5, #164]	@ 0xa4
 800b386:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800b388:	f423 4360 	bic.w	r3, r3, #57344	@ 0xe000
 800b38c:	430b      	orrs	r3, r1
 800b38e:	6593      	str	r3, [r2, #88]	@ 0x58
 800b390:	e695      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800b392:	2100      	movs	r1, #0
 800b394:	f105 0008 	add.w	r0, r5, #8
 800b398:	f7ff fa6a 	bl	800a870 <RCCEx_PLL2_Config>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b39c:	4604      	mov	r4, r0
        break;
 800b39e:	e7ee      	b.n	800b37e <HAL_RCCEx_PeriphCLKConfig+0x92e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3a0:	2102      	movs	r1, #2
 800b3a2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3a6:	f7ff fadb 	bl	800a960 <RCCEx_PLL3_Config>
 800b3aa:	e7f7      	b.n	800b39c <HAL_RCCEx_PeriphCLKConfig+0x94c>
 800b3ac:	4626      	mov	r6, r4
 800b3ae:	e686      	b.n	800b0be <HAL_RCCEx_PeriphCLKConfig+0x66e>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b3b0:	2102      	movs	r1, #2
 800b3b2:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3b6:	f7ff fad3 	bl	800a960 <RCCEx_PLL3_Config>
 800b3ba:	e6c3      	b.n	800b144 <HAL_RCCEx_PeriphCLKConfig+0x6f4>
    switch (PeriphClkInit->AdcClockSelection)
 800b3bc:	2601      	movs	r6, #1
 800b3be:	4634      	mov	r4, r6
 800b3c0:	e6cc      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x70c>
 800b3c2:	4626      	mov	r6, r4
 800b3c4:	e6ca      	b.n	800b15c <HAL_RCCEx_PeriphCLKConfig+0x70c>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3c6:	4a28      	ldr	r2, [pc, #160]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b3c8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b3ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3ce:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b3d0:	b97c      	cbnz	r4, 800b3f2 <HAL_RCCEx_PeriphCLKConfig+0x9a2>
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800b3d2:	4a25      	ldr	r2, [pc, #148]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b3d4:	f8d5 108c 	ldr.w	r1, [r5, #140]	@ 0x8c
 800b3d8:	6d53      	ldr	r3, [r2, #84]	@ 0x54
 800b3da:	f423 1340 	bic.w	r3, r3, #3145728	@ 0x300000
 800b3de:	430b      	orrs	r3, r1
 800b3e0:	6553      	str	r3, [r2, #84]	@ 0x54
 800b3e2:	e6ce      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x732>
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800b3e4:	2101      	movs	r1, #1
 800b3e6:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b3ea:	f7ff fab9 	bl	800a960 <RCCEx_PLL3_Config>
 800b3ee:	4604      	mov	r4, r0
        break;
 800b3f0:	e7ee      	b.n	800b3d0 <HAL_RCCEx_PeriphCLKConfig+0x980>
 800b3f2:	4626      	mov	r6, r4
 800b3f4:	e6c5      	b.n	800b182 <HAL_RCCEx_PeriphCLKConfig+0x732>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b3f6:	4a1c      	ldr	r2, [pc, #112]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b3f8:	6ad3      	ldr	r3, [r2, #44]	@ 0x2c
 800b3fa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800b3fe:	62d3      	str	r3, [r2, #44]	@ 0x2c
    if (ret == HAL_OK)
 800b400:	b974      	cbnz	r4, 800b420 <HAL_RCCEx_PeriphCLKConfig+0x9d0>
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800b402:	4a19      	ldr	r2, [pc, #100]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b404:	6d69      	ldr	r1, [r5, #84]	@ 0x54
 800b406:	6cd3      	ldr	r3, [r2, #76]	@ 0x4c
 800b408:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800b40c:	430b      	orrs	r3, r1
 800b40e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800b410:	e6c4      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x74c>
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800b412:	2102      	movs	r1, #2
 800b414:	f105 0008 	add.w	r0, r5, #8
 800b418:	f7ff fa2a 	bl	800a870 <RCCEx_PLL2_Config>
 800b41c:	4604      	mov	r4, r0
        break;
 800b41e:	e7ef      	b.n	800b400 <HAL_RCCEx_PeriphCLKConfig+0x9b0>
 800b420:	4626      	mov	r6, r4
 800b422:	e6bb      	b.n	800b19c <HAL_RCCEx_PeriphCLKConfig+0x74c>
    switch (PeriphClkInit->RngClockSelection)
 800b424:	f420 7280 	bic.w	r2, r0, #256	@ 0x100
 800b428:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 800b42c:	f47f aed1 	bne.w	800b1d2 <HAL_RCCEx_PeriphCLKConfig+0x782>
    if (ret == HAL_OK)
 800b430:	2c00      	cmp	r4, #0
 800b432:	f47f aecf 	bne.w	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800b436:	4c0c      	ldr	r4, [pc, #48]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b438:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800b43a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800b43e:	4302      	orrs	r2, r0
 800b440:	6562      	str	r2, [r4, #84]	@ 0x54
      status = HAL_ERROR;
 800b442:	4634      	mov	r4, r6
 800b444:	e6c6      	b.n	800b1d4 <HAL_RCCEx_PeriphCLKConfig+0x784>
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800b446:	4f08      	ldr	r7, [pc, #32]	@ (800b468 <HAL_RCCEx_PeriphCLKConfig+0xa18>)
 800b448:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800b44a:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 800b44e:	62fa      	str	r2, [r7, #44]	@ 0x2c
        break;
 800b450:	e7ee      	b.n	800b430 <HAL_RCCEx_PeriphCLKConfig+0x9e0>
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800b452:	2102      	movs	r1, #2
 800b454:	f105 0028 	add.w	r0, r5, #40	@ 0x28
 800b458:	f7ff fa82 	bl	800a960 <RCCEx_PLL3_Config>
    if (ret == HAL_OK)
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f43f af2e 	beq.w	800b2be <HAL_RCCEx_PeriphCLKConfig+0x86e>
  return HAL_ERROR;
 800b462:	2001      	movs	r0, #1
 800b464:	e72e      	b.n	800b2c4 <HAL_RCCEx_PeriphCLKConfig+0x874>
 800b466:	bf00      	nop
 800b468:	58024400 	.word	0x58024400

0800b46c <HAL_RCCEx_GetD3PCLK1Freq>:
{
 800b46c:	b508      	push	{r3, lr}
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800b46e:	f7ff f98f 	bl	800a790 <HAL_RCC_GetHCLKFreq>
 800b472:	4b05      	ldr	r3, [pc, #20]	@ (800b488 <HAL_RCCEx_GetD3PCLK1Freq+0x1c>)
 800b474:	4a05      	ldr	r2, [pc, #20]	@ (800b48c <HAL_RCCEx_GetD3PCLK1Freq+0x20>)
 800b476:	6a1b      	ldr	r3, [r3, #32]
 800b478:	f3c3 1302 	ubfx	r3, r3, #4, #3
 800b47c:	5cd3      	ldrb	r3, [r2, r3]
 800b47e:	f003 031f 	and.w	r3, r3, #31
}
 800b482:	40d8      	lsrs	r0, r3
 800b484:	bd08      	pop	{r3, pc}
 800b486:	bf00      	nop
 800b488:	58024400 	.word	0x58024400
 800b48c:	08024df4 	.word	0x08024df4

0800b490 <HAL_RCCEx_GetPLL2ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b490:	494f      	ldr	r1, [pc, #316]	@ (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
{
 800b492:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b494:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b496:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b498:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll2m != 0U)
 800b49a:	f416 3f7c 	tst.w	r6, #258048	@ 0x3f000
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800b49e:	f3c6 3305 	ubfx	r3, r6, #12, #6
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4a2:	6bca      	ldr	r2, [r1, #60]	@ 0x3c
  if (pll2m != 0U)
 800b4a4:	f000 8090 	beq.w	800b5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x138>
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4a8:	ee07 3a90 	vmov	s15, r3
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4ac:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800b4b0:	f3c5 1200 	ubfx	r2, r5, #4, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b4b4:	f004 0403 	and.w	r4, r4, #3
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4b8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800b4bc:	4353      	muls	r3, r2
    switch (pllsource)
 800b4be:	2c01      	cmp	r4, #1
 800b4c0:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4c4:	ee06 3a90 	vmov	s13, r3
 800b4c8:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b4cc:	d06e      	beq.n	800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
 800b4ce:	2c02      	cmp	r4, #2
 800b4d0:	d05e      	beq.n	800b590 <HAL_RCCEx_GetPLL2ClockFreq+0x100>
 800b4d2:	2c00      	cmp	r4, #0
 800b4d4:	d16a      	bne.n	800b5ac <HAL_RCCEx_GetPLL2ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b4d6:	680b      	ldr	r3, [r1, #0]
 800b4d8:	069b      	lsls	r3, r3, #26
 800b4da:	d547      	bpl.n	800b56c <HAL_RCCEx_GetPLL2ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4dc:	680a      	ldr	r2, [r1, #0]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4de:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4e0:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b4e4:	4a3b      	ldr	r2, [pc, #236]	@ (800b5d4 <HAL_RCCEx_GetPLL2ClockFreq+0x144>)
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b4ea:	40ca      	lsrs	r2, r1
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b4ec:	ee07 2a90 	vmov	s15, r2
 800b4f0:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b4f4:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b4f8:	ee07 3a10 	vmov	s14, r3
 800b4fc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b500:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b504:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b508:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800b50c:	4a30      	ldr	r2, [pc, #192]	@ (800b5d0 <HAL_RCCEx_GetPLL2ClockFreq+0x140>)
 800b50e:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b510:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b514:	ee07 3a10 	vmov	s14, r3
 800b518:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b51c:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b520:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b524:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b528:	edc0 6a00 	vstr	s13, [r0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800b52c:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b52e:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b532:	ee07 3a10 	vmov	s14, r3
 800b536:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b53a:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b53e:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b542:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b546:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800b54a:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 800b54c:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b550:	ee06 3a90 	vmov	s13, r3
 800b554:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b558:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b55c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b560:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b564:	ee17 3a90 	vmov	r3, s15
 800b568:	6083      	str	r3, [r0, #8]
}
 800b56a:	bd70      	pop	{r4, r5, r6, pc}
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b56c:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b56e:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b5d8 <HAL_RCCEx_GetPLL2ClockFreq+0x148>
 800b572:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b576:	ee07 3a90 	vmov	s15, r3
 800b57a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b57e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b582:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b586:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b58a:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b58e:	e7bd      	b.n	800b50c <HAL_RCCEx_GetPLL2ClockFreq+0x7c>
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b590:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b592:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b5dc <HAL_RCCEx_GetPLL2ClockFreq+0x14c>
 800b596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b59a:	ee07 3a90 	vmov	s15, r3
 800b59e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5a2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5a6:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b5aa:	e7ec      	b.n	800b586 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800b5ac:	6b8b      	ldr	r3, [r1, #56]	@ 0x38
 800b5ae:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b5e0 <HAL_RCCEx_GetPLL2ClockFreq+0x150>
 800b5b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b5b6:	ee07 3a90 	vmov	s15, r3
 800b5ba:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b5be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b5c2:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b5c6:	e7de      	b.n	800b586 <HAL_RCCEx_GetPLL2ClockFreq+0xf6>
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800b5c8:	e9c0 3300 	strd	r3, r3, [r0]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800b5cc:	e7cc      	b.n	800b568 <HAL_RCCEx_GetPLL2ClockFreq+0xd8>
 800b5ce:	bf00      	nop
 800b5d0:	58024400 	.word	0x58024400
 800b5d4:	03d09000 	.word	0x03d09000
 800b5d8:	4c742400 	.word	0x4c742400
 800b5dc:	4bbebc20 	.word	0x4bbebc20
 800b5e0:	4a742400 	.word	0x4a742400

0800b5e4 <HAL_RCCEx_GetPLL3ClockFreq>:
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5e4:	494f      	ldr	r1, [pc, #316]	@ (800b724 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
{
 800b5e6:	b570      	push	{r4, r5, r6, lr}
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b5e8:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5ea:	6a8e      	ldr	r6, [r1, #40]	@ 0x28
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b5ec:	6acd      	ldr	r5, [r1, #44]	@ 0x2c
  if (pll3m != 0U)
 800b5ee:	f016 7f7c 	tst.w	r6, #66060288	@ 0x3f00000
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800b5f2:	f3c6 5305 	ubfx	r3, r6, #20, #6
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b5f6:	6c4a      	ldr	r2, [r1, #68]	@ 0x44
  if (pll3m != 0U)
 800b5f8:	f000 8090 	beq.w	800b71c <HAL_RCCEx_GetPLL3ClockFreq+0x138>
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b5fc:	ee07 3a90 	vmov	s15, r3
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b600:	f3c2 03cc 	ubfx	r3, r2, #3, #13
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800b604:	f3c5 2200 	ubfx	r2, r5, #8, #1
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800b608:	f004 0403 	and.w	r4, r4, #3
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b60c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800b610:	4353      	muls	r3, r2
    switch (pllsource)
 800b612:	2c01      	cmp	r4, #1
 800b614:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b618:	ee06 3a90 	vmov	s13, r3
 800b61c:	eefa 6ae9 	vcvt.f32.s32	s13, s13, #13
    switch (pllsource)
 800b620:	d06e      	beq.n	800b700 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
 800b622:	2c02      	cmp	r4, #2
 800b624:	d05e      	beq.n	800b6e4 <HAL_RCCEx_GetPLL3ClockFreq+0x100>
 800b626:	2c00      	cmp	r4, #0
 800b628:	d16a      	bne.n	800b700 <HAL_RCCEx_GetPLL3ClockFreq+0x11c>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800b62a:	680b      	ldr	r3, [r1, #0]
 800b62c:	069b      	lsls	r3, r3, #26
 800b62e:	d547      	bpl.n	800b6c0 <HAL_RCCEx_GetPLL3ClockFreq+0xdc>
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b630:	680a      	ldr	r2, [r1, #0]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b632:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b634:	f3c2 01c1 	ubfx	r1, r2, #3, #2
 800b638:	4a3b      	ldr	r2, [pc, #236]	@ (800b728 <HAL_RCCEx_GetPLL3ClockFreq+0x144>)
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b63a:	f3c3 0308 	ubfx	r3, r3, #0, #9
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800b63e:	40ca      	lsrs	r2, r1
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b640:	ee07 2a90 	vmov	s15, r2
 800b644:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 800b648:	eec5 7a87 	vdiv.f32	s15, s11, s14
 800b64c:	ee07 3a10 	vmov	s14, r3
 800b650:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b654:	ee37 7a26 	vadd.f32	s14, s14, s13
 800b658:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b65c:	ee67 7a87 	vmul.f32	s15, s15, s14
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800b660:	4a30      	ldr	r2, [pc, #192]	@ (800b724 <HAL_RCCEx_GetPLL3ClockFreq+0x140>)
 800b662:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b664:	f3c3 2346 	ubfx	r3, r3, #9, #7
 800b668:	ee07 3a10 	vmov	s14, r3
 800b66c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b670:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b674:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b678:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b67c:	edc0 6a00 	vstr	s13, [r0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800b680:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b682:	f3c3 4306 	ubfx	r3, r3, #16, #7
 800b686:	ee07 3a10 	vmov	s14, r3
 800b68a:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 800b68e:	ee37 7a06 	vadd.f32	s14, s14, s12
 800b692:	eec7 6a87 	vdiv.f32	s13, s15, s14
 800b696:	eefc 6ae6 	vcvt.u32.f32	s13, s13
 800b69a:	edc0 6a01 	vstr	s13, [r0, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800b69e:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 800b6a0:	f3c3 6306 	ubfx	r3, r3, #24, #7
 800b6a4:	ee06 3a90 	vmov	s13, r3
 800b6a8:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 800b6ac:	ee76 6a86 	vadd.f32	s13, s13, s12
 800b6b0:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800b6b4:	eefc 7ac7 	vcvt.u32.f32	s15, s14
 800b6b8:	ee17 3a90 	vmov	r3, s15
 800b6bc:	6083      	str	r3, [r0, #8]
}
 800b6be:	bd70      	pop	{r4, r5, r6, pc}
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6c0:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6c2:	eddf 5a1a 	vldr	s11, [pc, #104]	@ 800b72c <HAL_RCCEx_GetPLL3ClockFreq+0x148>
 800b6c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ca:	ee07 3a90 	vmov	s15, r3
 800b6ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6d6:	ee77 7a86 	vadd.f32	s15, s15, s12
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6da:	eec5 6a87 	vdiv.f32	s13, s11, s14
 800b6de:	ee67 7aa6 	vmul.f32	s15, s15, s13
        break;
 800b6e2:	e7bd      	b.n	800b660 <HAL_RCCEx_GetPLL3ClockFreq+0x7c>
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b6e4:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b6e6:	eddf 5a12 	vldr	s11, [pc, #72]	@ 800b730 <HAL_RCCEx_GetPLL3ClockFreq+0x14c>
 800b6ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b6ee:	ee07 3a90 	vmov	s15, r3
 800b6f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b6f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b6fa:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b6fe:	e7ec      	b.n	800b6da <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800b700:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800b702:	eddf 5a0c 	vldr	s11, [pc, #48]	@ 800b734 <HAL_RCCEx_GetPLL3ClockFreq+0x150>
 800b706:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800b70a:	ee07 3a90 	vmov	s15, r3
 800b70e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800b712:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800b716:	ee77 7a86 	vadd.f32	s15, s15, s12
 800b71a:	e7de      	b.n	800b6da <HAL_RCCEx_GetPLL3ClockFreq+0xf6>
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800b71c:	e9c0 3300 	strd	r3, r3, [r0]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800b720:	e7cc      	b.n	800b6bc <HAL_RCCEx_GetPLL3ClockFreq+0xd8>
 800b722:	bf00      	nop
 800b724:	58024400 	.word	0x58024400
 800b728:	03d09000 	.word	0x03d09000
 800b72c:	4c742400 	.word	0x4c742400
 800b730:	4bbebc20 	.word	0x4bbebc20
 800b734:	4a742400 	.word	0x4a742400

0800b738 <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 800b738:	b538      	push	{r3, r4, r5, lr}
 800b73a:	460d      	mov	r5, r1
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 800b73c:	4604      	mov	r4, r0
 800b73e:	b1f0      	cbz	r0, 800b77e <HAL_SDRAM_Init+0x46>
  {
    return HAL_ERROR;
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 800b740:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
 800b744:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800b748:	b91b      	cbnz	r3, 800b752 <HAL_SDRAM_Init+0x1a>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 800b74a:	f880 202d 	strb.w	r2, [r0, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 800b74e:	f7f6 f849 	bl	80017e4 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b752:	2302      	movs	r3, #2

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b754:	1d21      	adds	r1, r4, #4
 800b756:	6820      	ldr	r0, [r4, #0]
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b758:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 800b75c:	f000 ff8a 	bl	800c674 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 800b760:	6862      	ldr	r2, [r4, #4]
 800b762:	4629      	mov	r1, r5
 800b764:	6820      	ldr	r0, [r4, #0]
 800b766:	f000 ffbd 	bl	800c6e4 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 800b76a:	4a06      	ldr	r2, [pc, #24]	@ (800b784 <HAL_SDRAM_Init+0x4c>)
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;

  return HAL_OK;
 800b76c:	2000      	movs	r0, #0
  __FMC_ENABLE();
 800b76e:	6813      	ldr	r3, [r2, #0]
 800b770:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800b774:	6013      	str	r3, [r2, #0]
  hsdram->State = HAL_SDRAM_STATE_READY;
 800b776:	2301      	movs	r3, #1
 800b778:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
}
 800b77c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b77e:	2001      	movs	r0, #1
 800b780:	e7fc      	b.n	800b77c <HAL_SDRAM_Init+0x44>
 800b782:	bf00      	nop
 800b784:	52004000 	.word	0x52004000

0800b788 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 800b788:	b510      	push	{r4, lr}
 800b78a:	4604      	mov	r4, r0

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 800b78c:	f7f6 f8c4 	bl	8001918 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 800b790:	e9d4 0100 	ldrd	r0, r1, [r4]
 800b794:	f000 ffdc 	bl	800c750 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 800b798:	2000      	movs	r0, #0
 800b79a:	f884 002c 	strb.w	r0, [r4, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 800b79e:	f884 002d 	strb.w	r0, [r4, #45]	@ 0x2d

  return HAL_OK;
}
 800b7a2:	bd10      	pop	{r4, pc}

0800b7a4 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 800b7a4:	b570      	push	{r4, r5, r6, lr}
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b7a6:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b7aa:	4605      	mov	r5, r0
 800b7ac:	460e      	mov	r6, r1

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 800b7ae:	2b02      	cmp	r3, #2
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 800b7b0:	b2d8      	uxtb	r0, r3
  if (state == HAL_SDRAM_STATE_BUSY)
 800b7b2:	d010      	beq.n	800b7d6 <HAL_SDRAM_SendCommand+0x32>
  {
    return HAL_BUSY;
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 800b7b4:	f000 04fb 	and.w	r4, r0, #251	@ 0xfb
 800b7b8:	2c01      	cmp	r4, #1
 800b7ba:	d110      	bne.n	800b7de <HAL_SDRAM_SendCommand+0x3a>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7bc:	2302      	movs	r3, #2

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b7be:	6828      	ldr	r0, [r5, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7c0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 800b7c4:	f000 ffd3 	bl	800c76e <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 800b7c8:	6833      	ldr	r3, [r6, #0]
 800b7ca:	2b02      	cmp	r3, #2
 800b7cc:	d104      	bne.n	800b7d8 <HAL_SDRAM_SendCommand+0x34>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 800b7ce:	2305      	movs	r3, #5
 800b7d0:	f885 302c 	strb.w	r3, [r5, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b7d4:	2000      	movs	r0, #0
}
 800b7d6:	bd70      	pop	{r4, r5, r6, pc}
      hsdram->State = HAL_SDRAM_STATE_READY;
 800b7d8:	f885 402c 	strb.w	r4, [r5, #44]	@ 0x2c
 800b7dc:	e7fa      	b.n	800b7d4 <HAL_SDRAM_SendCommand+0x30>
    return HAL_ERROR;
 800b7de:	2001      	movs	r0, #1
 800b7e0:	e7f9      	b.n	800b7d6 <HAL_SDRAM_SendCommand+0x32>

0800b7e2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 800b7e2:	b538      	push	{r3, r4, r5, lr}
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b7e4:	f890 302c 	ldrb.w	r3, [r0, #44]	@ 0x2c
{
 800b7e8:	4604      	mov	r4, r0
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 800b7ea:	2b02      	cmp	r3, #2
 800b7ec:	b2d8      	uxtb	r0, r3
 800b7ee:	d00d      	beq.n	800b80c <HAL_SDRAM_ProgramRefreshRate+0x2a>
  {
    return HAL_BUSY;
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 800b7f0:	f894 302c 	ldrb.w	r3, [r4, #44]	@ 0x2c
 800b7f4:	2b01      	cmp	r3, #1
 800b7f6:	b2dd      	uxtb	r5, r3
 800b7f8:	d109      	bne.n	800b80e <HAL_SDRAM_ProgramRefreshRate+0x2c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7fa:	2302      	movs	r3, #2

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b7fc:	6820      	ldr	r0, [r4, #0]
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 800b7fe:	f884 302c 	strb.w	r3, [r4, #44]	@ 0x2c
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 800b802:	f000 ffc6 	bl	800c792 <FMC_SDRAM_ProgramRefreshRate>
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 800b806:	2000      	movs	r0, #0
    hsdram->State = HAL_SDRAM_STATE_READY;
 800b808:	f884 502c 	strb.w	r5, [r4, #44]	@ 0x2c
}
 800b80c:	bd38      	pop	{r3, r4, r5, pc}
    return HAL_ERROR;
 800b80e:	2001      	movs	r0, #1
 800b810:	e7fc      	b.n	800b80c <HAL_SDRAM_ProgramRefreshRate+0x2a>

0800b812 <HAL_TIM_Base_MspInit>:
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b812:	4770      	bx	lr

0800b814 <HAL_TIM_Base_Start>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b814:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b818:	2b01      	cmp	r3, #1
 800b81a:	d12f      	bne.n	800b87c <HAL_TIM_Base_Start+0x68>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b81c:	2302      	movs	r3, #2

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b81e:	4a18      	ldr	r2, [pc, #96]	@ (800b880 <HAL_TIM_Base_Start+0x6c>)
  htim->State = HAL_TIM_STATE_BUSY;
 800b820:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b824:	6803      	ldr	r3, [r0, #0]
 800b826:	4293      	cmp	r3, r2
 800b828:	d01a      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b82a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b82e:	d017      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b830:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b834:	4293      	cmp	r3, r2
 800b836:	d013      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b838:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b83c:	4293      	cmp	r3, r2
 800b83e:	d00f      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b840:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b844:	4293      	cmp	r3, r2
 800b846:	d00b      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b848:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b84c:	4293      	cmp	r3, r2
 800b84e:	d007      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b850:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b854:	4293      	cmp	r3, r2
 800b856:	d003      	beq.n	800b860 <HAL_TIM_Base_Start+0x4c>
 800b858:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b85c:	4293      	cmp	r3, r2
 800b85e:	d107      	bne.n	800b870 <HAL_TIM_Base_Start+0x5c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b860:	6899      	ldr	r1, [r3, #8]
 800b862:	4a08      	ldr	r2, [pc, #32]	@ (800b884 <HAL_TIM_Base_Start+0x70>)
 800b864:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b866:	2a06      	cmp	r2, #6
 800b868:	d006      	beq.n	800b878 <HAL_TIM_Base_Start+0x64>
 800b86a:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b86e:	d003      	beq.n	800b878 <HAL_TIM_Base_Start+0x64>
    {
      __HAL_TIM_ENABLE(htim);
 800b870:	681a      	ldr	r2, [r3, #0]
 800b872:	f042 0201 	orr.w	r2, r2, #1
 800b876:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b878:	2000      	movs	r0, #0
 800b87a:	4770      	bx	lr
    return HAL_ERROR;
 800b87c:	2001      	movs	r0, #1
}
 800b87e:	4770      	bx	lr
 800b880:	40010000 	.word	0x40010000
 800b884:	00010007 	.word	0x00010007

0800b888 <HAL_TIM_Base_Start_IT>:

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b888:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	d133      	bne.n	800b8f8 <HAL_TIM_Base_Start_IT+0x70>
  {
    return HAL_ERROR;
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b890:	2302      	movs	r3, #2
 800b892:	f880 303d 	strb.w	r3, [r0, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b896:	6803      	ldr	r3, [r0, #0]
 800b898:	68da      	ldr	r2, [r3, #12]
 800b89a:	f042 0201 	orr.w	r2, r2, #1
 800b89e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b8a0:	4a16      	ldr	r2, [pc, #88]	@ (800b8fc <HAL_TIM_Base_Start_IT+0x74>)
 800b8a2:	4293      	cmp	r3, r2
 800b8a4:	d01a      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800b8aa:	d017      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8ac:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800b8b0:	4293      	cmp	r3, r2
 800b8b2:	d013      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8b4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b8b8:	4293      	cmp	r3, r2
 800b8ba:	d00f      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8bc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800b8c0:	4293      	cmp	r3, r2
 800b8c2:	d00b      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8c4:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800b8c8:	4293      	cmp	r3, r2
 800b8ca:	d007      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8cc:	f5a2 426c 	sub.w	r2, r2, #60416	@ 0xec00
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d003      	beq.n	800b8dc <HAL_TIM_Base_Start_IT+0x54>
 800b8d4:	f502 3294 	add.w	r2, r2, #75776	@ 0x12800
 800b8d8:	4293      	cmp	r3, r2
 800b8da:	d107      	bne.n	800b8ec <HAL_TIM_Base_Start_IT+0x64>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8dc:	6899      	ldr	r1, [r3, #8]
 800b8de:	4a08      	ldr	r2, [pc, #32]	@ (800b900 <HAL_TIM_Base_Start_IT+0x78>)
 800b8e0:	400a      	ands	r2, r1
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8e2:	2a06      	cmp	r2, #6
 800b8e4:	d006      	beq.n	800b8f4 <HAL_TIM_Base_Start_IT+0x6c>
 800b8e6:	f5b2 3f80 	cmp.w	r2, #65536	@ 0x10000
 800b8ea:	d003      	beq.n	800b8f4 <HAL_TIM_Base_Start_IT+0x6c>
    {
      __HAL_TIM_ENABLE(htim);
 800b8ec:	681a      	ldr	r2, [r3, #0]
 800b8ee:	f042 0201 	orr.w	r2, r2, #1
 800b8f2:	601a      	str	r2, [r3, #0]
  {
    __HAL_TIM_ENABLE(htim);
  }

  /* Return function status */
  return HAL_OK;
 800b8f4:	2000      	movs	r0, #0
 800b8f6:	4770      	bx	lr
    return HAL_ERROR;
 800b8f8:	2001      	movs	r0, #1
}
 800b8fa:	4770      	bx	lr
 800b8fc:	40010000 	.word	0x40010000
 800b900:	00010007 	.word	0x00010007

0800b904 <HAL_TIM_OC_DelayElapsedCallback>:
/**
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
 800b904:	4770      	bx	lr

0800b906 <HAL_TIM_IC_CaptureCallback>:
/**
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
 800b906:	4770      	bx	lr

0800b908 <HAL_TIM_PWM_PulseFinishedCallback>:
/**
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
 800b908:	4770      	bx	lr

0800b90a <HAL_TIM_TriggerCallback>:
/**
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
 800b90a:	4770      	bx	lr

0800b90c <HAL_TIM_IRQHandler>:
  uint32_t itsource = htim->Instance->DIER;
 800b90c:	6803      	ldr	r3, [r0, #0]
{
 800b90e:	b570      	push	{r4, r5, r6, lr}
  uint32_t itsource = htim->Instance->DIER;
 800b910:	68dd      	ldr	r5, [r3, #12]
{
 800b912:	4604      	mov	r4, r0
  uint32_t itflag   = htim->Instance->SR;
 800b914:	691e      	ldr	r6, [r3, #16]
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b916:	07b2      	lsls	r2, r6, #30
 800b918:	d50d      	bpl.n	800b936 <HAL_TIM_IRQHandler+0x2a>
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b91a:	07a9      	lsls	r1, r5, #30
 800b91c:	d50b      	bpl.n	800b936 <HAL_TIM_IRQHandler+0x2a>
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b91e:	f06f 0202 	mvn.w	r2, #2
 800b922:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b924:	2201      	movs	r2, #1
 800b926:	7702      	strb	r2, [r0, #28]
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b928:	699b      	ldr	r3, [r3, #24]
 800b92a:	079a      	lsls	r2, r3, #30
 800b92c:	d075      	beq.n	800ba1a <HAL_TIM_IRQHandler+0x10e>
          HAL_TIM_IC_CaptureCallback(htim);
 800b92e:	f7ff ffea 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b932:	2300      	movs	r3, #0
 800b934:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b936:	0773      	lsls	r3, r6, #29
 800b938:	d510      	bpl.n	800b95c <HAL_TIM_IRQHandler+0x50>
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b93a:	0768      	lsls	r0, r5, #29
 800b93c:	d50e      	bpl.n	800b95c <HAL_TIM_IRQHandler+0x50>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b93e:	6823      	ldr	r3, [r4, #0]
 800b940:	f06f 0204 	mvn.w	r2, #4
        HAL_TIM_IC_CaptureCallback(htim);
 800b944:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b946:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b948:	2202      	movs	r2, #2
 800b94a:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b94c:	699b      	ldr	r3, [r3, #24]
 800b94e:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b952:	d068      	beq.n	800ba26 <HAL_TIM_IRQHandler+0x11a>
        HAL_TIM_IC_CaptureCallback(htim);
 800b954:	f7ff ffd7 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b958:	2300      	movs	r3, #0
 800b95a:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b95c:	0731      	lsls	r1, r6, #28
 800b95e:	d50f      	bpl.n	800b980 <HAL_TIM_IRQHandler+0x74>
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b960:	072a      	lsls	r2, r5, #28
 800b962:	d50d      	bpl.n	800b980 <HAL_TIM_IRQHandler+0x74>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b964:	6823      	ldr	r3, [r4, #0]
 800b966:	f06f 0208 	mvn.w	r2, #8
        HAL_TIM_IC_CaptureCallback(htim);
 800b96a:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b96c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b96e:	2204      	movs	r2, #4
 800b970:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b972:	69db      	ldr	r3, [r3, #28]
 800b974:	079b      	lsls	r3, r3, #30
 800b976:	d05c      	beq.n	800ba32 <HAL_TIM_IRQHandler+0x126>
        HAL_TIM_IC_CaptureCallback(htim);
 800b978:	f7ff ffc5 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b97c:	2300      	movs	r3, #0
 800b97e:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b980:	06f1      	lsls	r1, r6, #27
 800b982:	d510      	bpl.n	800b9a6 <HAL_TIM_IRQHandler+0x9a>
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b984:	06ea      	lsls	r2, r5, #27
 800b986:	d50e      	bpl.n	800b9a6 <HAL_TIM_IRQHandler+0x9a>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b988:	6823      	ldr	r3, [r4, #0]
 800b98a:	f06f 0210 	mvn.w	r2, #16
        HAL_TIM_IC_CaptureCallback(htim);
 800b98e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b990:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b992:	2208      	movs	r2, #8
 800b994:	7722      	strb	r2, [r4, #28]
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b996:	69db      	ldr	r3, [r3, #28]
 800b998:	f413 7f40 	tst.w	r3, #768	@ 0x300
 800b99c:	d04f      	beq.n	800ba3e <HAL_TIM_IRQHandler+0x132>
        HAL_TIM_IC_CaptureCallback(htim);
 800b99e:	f7ff ffb2 	bl	800b906 <HAL_TIM_IC_CaptureCallback>
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b9a2:	2300      	movs	r3, #0
 800b9a4:	7723      	strb	r3, [r4, #28]
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b9a6:	07f3      	lsls	r3, r6, #31
 800b9a8:	d508      	bpl.n	800b9bc <HAL_TIM_IRQHandler+0xb0>
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b9aa:	07e8      	lsls	r0, r5, #31
 800b9ac:	d506      	bpl.n	800b9bc <HAL_TIM_IRQHandler+0xb0>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9ae:	6823      	ldr	r3, [r4, #0]
 800b9b0:	f06f 0201 	mvn.w	r2, #1
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9b4:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b9b6:	611a      	str	r2, [r3, #16]
      HAL_TIM_PeriodElapsedCallback(htim);
 800b9b8:	f7f5 fc8a 	bl	80012d0 <HAL_TIM_PeriodElapsedCallback>
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b9bc:	f416 5f02 	tst.w	r6, #8320	@ 0x2080
 800b9c0:	d008      	beq.n	800b9d4 <HAL_TIM_IRQHandler+0xc8>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9c2:	0629      	lsls	r1, r5, #24
 800b9c4:	d506      	bpl.n	800b9d4 <HAL_TIM_IRQHandler+0xc8>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9c6:	6823      	ldr	r3, [r4, #0]
 800b9c8:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
      HAL_TIMEx_BreakCallback(htim);
 800b9cc:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9ce:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_BreakCallback(htim);
 800b9d0:	f000 f8d7 	bl	800bb82 <HAL_TIMEx_BreakCallback>
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b9d4:	05f2      	lsls	r2, r6, #23
 800b9d6:	d508      	bpl.n	800b9ea <HAL_TIM_IRQHandler+0xde>
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9d8:	062b      	lsls	r3, r5, #24
 800b9da:	d506      	bpl.n	800b9ea <HAL_TIM_IRQHandler+0xde>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9dc:	6823      	ldr	r3, [r4, #0]
 800b9de:	f46f 7280 	mvn.w	r2, #256	@ 0x100
      HAL_TIMEx_Break2Callback(htim);
 800b9e2:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9e4:	611a      	str	r2, [r3, #16]
      HAL_TIMEx_Break2Callback(htim);
 800b9e6:	f000 f8cd 	bl	800bb84 <HAL_TIMEx_Break2Callback>
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9ea:	0670      	lsls	r0, r6, #25
 800b9ec:	d508      	bpl.n	800ba00 <HAL_TIM_IRQHandler+0xf4>
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9ee:	0669      	lsls	r1, r5, #25
 800b9f0:	d506      	bpl.n	800ba00 <HAL_TIM_IRQHandler+0xf4>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9f2:	6823      	ldr	r3, [r4, #0]
 800b9f4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
      HAL_TIM_TriggerCallback(htim);
 800b9f8:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9fa:	611a      	str	r2, [r3, #16]
      HAL_TIM_TriggerCallback(htim);
 800b9fc:	f7ff ff85 	bl	800b90a <HAL_TIM_TriggerCallback>
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba00:	06b2      	lsls	r2, r6, #26
 800ba02:	d522      	bpl.n	800ba4a <HAL_TIM_IRQHandler+0x13e>
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba04:	06ab      	lsls	r3, r5, #26
 800ba06:	d520      	bpl.n	800ba4a <HAL_TIM_IRQHandler+0x13e>
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba08:	6823      	ldr	r3, [r4, #0]
 800ba0a:	f06f 0220 	mvn.w	r2, #32
      HAL_TIMEx_CommutCallback(htim);
 800ba0e:	4620      	mov	r0, r4
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba10:	611a      	str	r2, [r3, #16]
}
 800ba12:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      HAL_TIMEx_CommutCallback(htim);
 800ba16:	f000 b8b3 	b.w	800bb80 <HAL_TIMEx_CommutCallback>
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba1a:	f7ff ff73 	bl	800b904 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f7ff ff72 	bl	800b908 <HAL_TIM_PWM_PulseFinishedCallback>
 800ba24:	e785      	b.n	800b932 <HAL_TIM_IRQHandler+0x26>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba26:	f7ff ff6d 	bl	800b904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba2a:	4620      	mov	r0, r4
 800ba2c:	f7ff ff6c 	bl	800b908 <HAL_TIM_PWM_PulseFinishedCallback>
 800ba30:	e792      	b.n	800b958 <HAL_TIM_IRQHandler+0x4c>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba32:	f7ff ff67 	bl	800b904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba36:	4620      	mov	r0, r4
 800ba38:	f7ff ff66 	bl	800b908 <HAL_TIM_PWM_PulseFinishedCallback>
 800ba3c:	e79e      	b.n	800b97c <HAL_TIM_IRQHandler+0x70>
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800ba3e:	f7ff ff61 	bl	800b904 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800ba42:	4620      	mov	r0, r4
 800ba44:	f7ff ff60 	bl	800b908 <HAL_TIM_PWM_PulseFinishedCallback>
 800ba48:	e7ab      	b.n	800b9a2 <HAL_TIM_IRQHandler+0x96>
}
 800ba4a:	bd70      	pop	{r4, r5, r6, pc}

0800ba4c <TIM_Base_SetConfig>:
{
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba4c:	4a32      	ldr	r2, [pc, #200]	@ (800bb18 <TIM_Base_SetConfig+0xcc>)
  tmpcr1 = TIMx->CR1;
 800ba4e:	6803      	ldr	r3, [r0, #0]
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba50:	4290      	cmp	r0, r2
 800ba52:	d012      	beq.n	800ba7a <TIM_Base_SetConfig+0x2e>
 800ba54:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ba58:	d00f      	beq.n	800ba7a <TIM_Base_SetConfig+0x2e>
 800ba5a:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ba5e:	4290      	cmp	r0, r2
 800ba60:	d00b      	beq.n	800ba7a <TIM_Base_SetConfig+0x2e>
 800ba62:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ba66:	4290      	cmp	r0, r2
 800ba68:	d007      	beq.n	800ba7a <TIM_Base_SetConfig+0x2e>
 800ba6a:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ba6e:	4290      	cmp	r0, r2
 800ba70:	d003      	beq.n	800ba7a <TIM_Base_SetConfig+0x2e>
 800ba72:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800ba76:	4290      	cmp	r0, r2
 800ba78:	d119      	bne.n	800baae <TIM_Base_SetConfig+0x62>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
    tmpcr1 |= Structure->CounterMode;
 800ba7a:	684a      	ldr	r2, [r1, #4]
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800ba7c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
    tmpcr1 |= Structure->CounterMode;
 800ba80:	4313      	orrs	r3, r2
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800ba82:	4a25      	ldr	r2, [pc, #148]	@ (800bb18 <TIM_Base_SetConfig+0xcc>)
 800ba84:	4290      	cmp	r0, r2
 800ba86:	d01d      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800ba88:	f1b0 4f80 	cmp.w	r0, #1073741824	@ 0x40000000
 800ba8c:	d01a      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800ba8e:	f5a2 427c 	sub.w	r2, r2, #64512	@ 0xfc00
 800ba92:	4290      	cmp	r0, r2
 800ba94:	d016      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800ba96:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800ba9a:	4290      	cmp	r0, r2
 800ba9c:	d012      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800ba9e:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800baa2:	4290      	cmp	r0, r2
 800baa4:	d00e      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800baa6:	f502 4278 	add.w	r2, r2, #63488	@ 0xf800
 800baaa:	4290      	cmp	r0, r2
 800baac:	d00a      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800baae:	4a1b      	ldr	r2, [pc, #108]	@ (800bb1c <TIM_Base_SetConfig+0xd0>)
 800bab0:	4290      	cmp	r0, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800bab4:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bab8:	4290      	cmp	r0, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0x78>
 800babc:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bac0:	4290      	cmp	r0, r2
 800bac2:	d103      	bne.n	800bacc <TIM_Base_SetConfig+0x80>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bac4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bac8:	68ca      	ldr	r2, [r1, #12]
 800baca:	4313      	orrs	r3, r2
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bacc:	694a      	ldr	r2, [r1, #20]
 800bace:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800bad2:	4313      	orrs	r3, r2

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bad4:	688a      	ldr	r2, [r1, #8]
 800bad6:	62c2      	str	r2, [r0, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bad8:	680a      	ldr	r2, [r1, #0]
 800bada:	6282      	str	r2, [r0, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800badc:	4a0e      	ldr	r2, [pc, #56]	@ (800bb18 <TIM_Base_SetConfig+0xcc>)
 800bade:	4290      	cmp	r0, r2
 800bae0:	d00f      	beq.n	800bb02 <TIM_Base_SetConfig+0xb6>
 800bae2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bae6:	4290      	cmp	r0, r2
 800bae8:	d00b      	beq.n	800bb02 <TIM_Base_SetConfig+0xb6>
 800baea:	f502 5270 	add.w	r2, r2, #15360	@ 0x3c00
 800baee:	4290      	cmp	r0, r2
 800baf0:	d007      	beq.n	800bb02 <TIM_Base_SetConfig+0xb6>
 800baf2:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800baf6:	4290      	cmp	r0, r2
 800baf8:	d003      	beq.n	800bb02 <TIM_Base_SetConfig+0xb6>
 800bafa:	f502 6280 	add.w	r2, r2, #1024	@ 0x400
 800bafe:	4290      	cmp	r0, r2
 800bb00:	d101      	bne.n	800bb06 <TIM_Base_SetConfig+0xba>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb02:	690a      	ldr	r2, [r1, #16]
 800bb04:	6302      	str	r2, [r0, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 800bb06:	6802      	ldr	r2, [r0, #0]
 800bb08:	f042 0204 	orr.w	r2, r2, #4
 800bb0c:	6002      	str	r2, [r0, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb0e:	2201      	movs	r2, #1
 800bb10:	6142      	str	r2, [r0, #20]

  TIMx->CR1 = tmpcr1;
 800bb12:	6003      	str	r3, [r0, #0]
}
 800bb14:	4770      	bx	lr
 800bb16:	bf00      	nop
 800bb18:	40010000 	.word	0x40010000
 800bb1c:	40014000 	.word	0x40014000

0800bb20 <HAL_TIM_Base_Init>:
{
 800bb20:	b510      	push	{r4, lr}
  if (htim == NULL)
 800bb22:	4604      	mov	r4, r0
 800bb24:	b350      	cbz	r0, 800bb7c <HAL_TIM_Base_Init+0x5c>
  if (htim->State == HAL_TIM_STATE_RESET)
 800bb26:	f890 303d 	ldrb.w	r3, [r0, #61]	@ 0x3d
 800bb2a:	f003 02ff 	and.w	r2, r3, #255	@ 0xff
 800bb2e:	b91b      	cbnz	r3, 800bb38 <HAL_TIM_Base_Init+0x18>
    htim->Lock = HAL_UNLOCKED;
 800bb30:	f880 203c 	strb.w	r2, [r0, #60]	@ 0x3c
    HAL_TIM_Base_MspInit(htim);
 800bb34:	f7ff fe6d 	bl	800b812 <HAL_TIM_Base_MspInit>
  htim->State = HAL_TIM_STATE_BUSY;
 800bb38:	2302      	movs	r3, #2
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb3a:	6820      	ldr	r0, [r4, #0]
 800bb3c:	1d21      	adds	r1, r4, #4
  htim->State = HAL_TIM_STATE_BUSY;
 800bb3e:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bb42:	f7ff ff83 	bl	800ba4c <TIM_Base_SetConfig>
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb46:	2301      	movs	r3, #1
  return HAL_OK;
 800bb48:	2000      	movs	r0, #0
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bb4a:	f884 3048 	strb.w	r3, [r4, #72]	@ 0x48
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb4e:	f884 303e 	strb.w	r3, [r4, #62]	@ 0x3e
 800bb52:	f884 303f 	strb.w	r3, [r4, #63]	@ 0x3f
 800bb56:	f884 3040 	strb.w	r3, [r4, #64]	@ 0x40
 800bb5a:	f884 3041 	strb.w	r3, [r4, #65]	@ 0x41
 800bb5e:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800bb62:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bb66:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800bb6a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800bb6e:	f884 3046 	strb.w	r3, [r4, #70]	@ 0x46
 800bb72:	f884 3047 	strb.w	r3, [r4, #71]	@ 0x47
  htim->State = HAL_TIM_STATE_READY;
 800bb76:	f884 303d 	strb.w	r3, [r4, #61]	@ 0x3d
}
 800bb7a:	bd10      	pop	{r4, pc}
    return HAL_ERROR;
 800bb7c:	2001      	movs	r0, #1
 800bb7e:	e7fc      	b.n	800bb7a <HAL_TIM_Base_Init+0x5a>

0800bb80 <HAL_TIMEx_CommutCallback>:
/**
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
 800bb80:	4770      	bx	lr

0800bb82 <HAL_TIMEx_BreakCallback>:
/**
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
 800bb82:	4770      	bx	lr

0800bb84 <HAL_TIMEx_Break2Callback>:
/**
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
 800bb84:	4770      	bx	lr
	...

0800bb88 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800bb88:	b510      	push	{r4, lr}
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800bb8a:	6802      	ldr	r2, [r0, #0]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bb8c:	e852 3f00 	ldrex	r3, [r2]
 800bb90:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bb94:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800bb98:	6802      	ldr	r2, [r0, #0]
 800bb9a:	2900      	cmp	r1, #0
 800bb9c:	d1f5      	bne.n	800bb8a <UART_EndRxTransfer+0x2>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800bb9e:	4c0f      	ldr	r4, [pc, #60]	@ (800bbdc <UART_EndRxTransfer+0x54>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bba0:	f102 0308 	add.w	r3, r2, #8
 800bba4:	e853 3f00 	ldrex	r3, [r3]
 800bba8:	4023      	ands	r3, r4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbaa:	f102 0c08 	add.w	ip, r2, #8
 800bbae:	e84c 3100 	strex	r1, r3, [ip]
 800bbb2:	2900      	cmp	r1, #0
 800bbb4:	d1f4      	bne.n	800bba0 <UART_EndRxTransfer+0x18>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bbb6:	6ec3      	ldr	r3, [r0, #108]	@ 0x6c
 800bbb8:	2b01      	cmp	r3, #1
 800bbba:	d107      	bne.n	800bbcc <UART_EndRxTransfer+0x44>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bbbc:	e852 3f00 	ldrex	r3, [r2]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bbc0:	f023 0310 	bic.w	r3, r3, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bbc4:	e842 3100 	strex	r1, r3, [r2]
 800bbc8:	2900      	cmp	r1, #0
 800bbca:	d1f7      	bne.n	800bbbc <UART_EndRxTransfer+0x34>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800bbcc:	2320      	movs	r3, #32
 800bbce:	f8c0 308c 	str.w	r3, [r0, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bbd2:	2300      	movs	r3, #0
 800bbd4:	66c3      	str	r3, [r0, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800bbd6:	6743      	str	r3, [r0, #116]	@ 0x74
}
 800bbd8:	bd10      	pop	{r4, pc}
 800bbda:	bf00      	nop
 800bbdc:	effffffe 	.word	0xeffffffe

0800bbe0 <HAL_UART_TxCpltCallback>:
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
 800bbe0:	4770      	bx	lr

0800bbe2 <HAL_UART_ErrorCallback>:
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
 800bbe2:	4770      	bx	lr

0800bbe4 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800bbe4:	b508      	push	{r3, lr}
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800bbe6:	6b80      	ldr	r0, [r0, #56]	@ 0x38
  huart->RxXferCount = 0U;
 800bbe8:	2300      	movs	r3, #0
 800bbea:	f8a0 305e 	strh.w	r3, [r0, #94]	@ 0x5e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800bbee:	f7ff fff8 	bl	800bbe2 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bbf2:	bd08      	pop	{r3, pc}

0800bbf4 <HAL_UARTEx_RxEventCallback>:
}
 800bbf4:	4770      	bx	lr
	...

0800bbf8 <HAL_UART_IRQHandler>:
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbf8:	6803      	ldr	r3, [r0, #0]
{
 800bbfa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800bbfe:	69d9      	ldr	r1, [r3, #28]
  if (errorflags == 0U)
 800bc00:	f640 060f 	movw	r6, #2063	@ 0x80f
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800bc04:	681a      	ldr	r2, [r3, #0]
{
 800bc06:	4604      	mov	r4, r0
  if (errorflags == 0U)
 800bc08:	4231      	tst	r1, r6
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800bc0a:	689d      	ldr	r5, [r3, #8]
  if (errorflags == 0U)
 800bc0c:	d110      	bne.n	800bc30 <HAL_UART_IRQHandler+0x38>
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bc0e:	068e      	lsls	r6, r1, #26
 800bc10:	f140 8097 	bpl.w	800bd42 <HAL_UART_IRQHandler+0x14a>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bc14:	f002 0620 	and.w	r6, r2, #32
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bc18:	f005 5780 	and.w	r7, r5, #268435456	@ 0x10000000
 800bc1c:	433e      	orrs	r6, r7
 800bc1e:	f000 8090 	beq.w	800bd42 <HAL_UART_IRQHandler+0x14a>
      if (huart->RxISR != NULL)
 800bc22:	6f43      	ldr	r3, [r0, #116]	@ 0x74
 800bc24:	2b00      	cmp	r3, #0
 800bc26:	f000 8085 	beq.w	800bd34 <HAL_UART_IRQHandler+0x13c>
}
 800bc2a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bc2e:	4718      	bx	r3
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc30:	4ea6      	ldr	r6, [pc, #664]	@ (800becc <HAL_UART_IRQHandler+0x2d4>)
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc32:	48a7      	ldr	r0, [pc, #668]	@ (800bed0 <HAL_UART_IRQHandler+0x2d8>)
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 800bc34:	402e      	ands	r6, r5
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 800bc36:	4010      	ands	r0, r2
 800bc38:	4330      	orrs	r0, r6
 800bc3a:	f000 8082 	beq.w	800bd42 <HAL_UART_IRQHandler+0x14a>
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800bc3e:	07cf      	lsls	r7, r1, #31
 800bc40:	d509      	bpl.n	800bc56 <HAL_UART_IRQHandler+0x5e>
 800bc42:	05d0      	lsls	r0, r2, #23
 800bc44:	d507      	bpl.n	800bc56 <HAL_UART_IRQHandler+0x5e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800bc46:	2001      	movs	r0, #1
 800bc48:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800bc4a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bc4e:	f040 0001 	orr.w	r0, r0, #1
 800bc52:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc56:	078f      	lsls	r7, r1, #30
 800bc58:	d509      	bpl.n	800bc6e <HAL_UART_IRQHandler+0x76>
 800bc5a:	07e8      	lsls	r0, r5, #31
 800bc5c:	d507      	bpl.n	800bc6e <HAL_UART_IRQHandler+0x76>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800bc5e:	2002      	movs	r0, #2
 800bc60:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800bc62:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bc66:	f040 0004 	orr.w	r0, r0, #4
 800bc6a:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800bc6e:	074f      	lsls	r7, r1, #29
 800bc70:	d509      	bpl.n	800bc86 <HAL_UART_IRQHandler+0x8e>
 800bc72:	07e8      	lsls	r0, r5, #31
 800bc74:	d507      	bpl.n	800bc86 <HAL_UART_IRQHandler+0x8e>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800bc76:	2004      	movs	r0, #4
 800bc78:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800bc7a:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bc7e:	f040 0002 	orr.w	r0, r0, #2
 800bc82:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_ORE) != 0U)
 800bc86:	070f      	lsls	r7, r1, #28
 800bc88:	d50b      	bpl.n	800bca2 <HAL_UART_IRQHandler+0xaa>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 800bc8a:	f002 0020 	and.w	r0, r2, #32
 800bc8e:	4330      	orrs	r0, r6
 800bc90:	d007      	beq.n	800bca2 <HAL_UART_IRQHandler+0xaa>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800bc92:	2008      	movs	r0, #8
 800bc94:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800bc96:	f8d4 0090 	ldr.w	r0, [r4, #144]	@ 0x90
 800bc9a:	f040 0008 	orr.w	r0, r0, #8
 800bc9e:	f8c4 0090 	str.w	r0, [r4, #144]	@ 0x90
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800bca2:	050e      	lsls	r6, r1, #20
 800bca4:	d50a      	bpl.n	800bcbc <HAL_UART_IRQHandler+0xc4>
 800bca6:	0150      	lsls	r0, r2, #5
 800bca8:	d508      	bpl.n	800bcbc <HAL_UART_IRQHandler+0xc4>
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800bcaa:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800bcae:	6218      	str	r0, [r3, #32]
      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800bcb0:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800bcb4:	f043 0320 	orr.w	r3, r3, #32
 800bcb8:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800bcbc:	f8d4 3090 	ldr.w	r3, [r4, #144]	@ 0x90
 800bcc0:	2b00      	cmp	r3, #0
 800bcc2:	d037      	beq.n	800bd34 <HAL_UART_IRQHandler+0x13c>
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 800bcc4:	068b      	lsls	r3, r1, #26
 800bcc6:	d509      	bpl.n	800bcdc <HAL_UART_IRQHandler+0xe4>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800bcc8:	f002 0220 	and.w	r2, r2, #32
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800bccc:	f005 5580 	and.w	r5, r5, #268435456	@ 0x10000000
 800bcd0:	432a      	orrs	r2, r5
 800bcd2:	d003      	beq.n	800bcdc <HAL_UART_IRQHandler+0xe4>
        if (huart->RxISR != NULL)
 800bcd4:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800bcd6:	b10b      	cbz	r3, 800bcdc <HAL_UART_IRQHandler+0xe4>
          huart->RxISR(huart);
 800bcd8:	4620      	mov	r0, r4
 800bcda:	4798      	blx	r3
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcdc:	6826      	ldr	r6, [r4, #0]
        UART_EndRxTransfer(huart);
 800bcde:	4620      	mov	r0, r4
      errorcode = huart->ErrorCode;
 800bce0:	f8d4 2090 	ldr.w	r2, [r4, #144]	@ 0x90
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bce4:	68b3      	ldr	r3, [r6, #8]
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800bce6:	f002 0228 	and.w	r2, r2, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800bcea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800bcee:	ea53 0502 	orrs.w	r5, r3, r2
 800bcf2:	d021      	beq.n	800bd38 <HAL_UART_IRQHandler+0x140>
        UART_EndRxTransfer(huart);
 800bcf4:	f7ff ff48 	bl	800bb88 <UART_EndRxTransfer>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bcf8:	68b3      	ldr	r3, [r6, #8]
 800bcfa:	065f      	lsls	r7, r3, #25
 800bcfc:	d517      	bpl.n	800bd2e <HAL_UART_IRQHandler+0x136>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bcfe:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd00:	f102 0308 	add.w	r3, r2, #8
 800bd04:	e853 3f00 	ldrex	r3, [r3]
 800bd08:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd0c:	3208      	adds	r2, #8
 800bd0e:	e842 3100 	strex	r1, r3, [r2]
 800bd12:	2900      	cmp	r1, #0
 800bd14:	d1f3      	bne.n	800bcfe <HAL_UART_IRQHandler+0x106>
          if (huart->hdmarx != NULL)
 800bd16:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bd1a:	b140      	cbz	r0, 800bd2e <HAL_UART_IRQHandler+0x136>
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800bd1c:	4b6d      	ldr	r3, [pc, #436]	@ (800bed4 <HAL_UART_IRQHandler+0x2dc>)
 800bd1e:	6503      	str	r3, [r0, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800bd20:	f7fa ff7e 	bl	8006c20 <HAL_DMA_Abort_IT>
 800bd24:	b130      	cbz	r0, 800bd34 <HAL_UART_IRQHandler+0x13c>
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800bd26:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800bd2a:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 800bd2c:	e77d      	b.n	800bc2a <HAL_UART_IRQHandler+0x32>
            HAL_UART_ErrorCallback(huart);
 800bd2e:	4620      	mov	r0, r4
 800bd30:	f7ff ff57 	bl	800bbe2 <HAL_UART_ErrorCallback>
}
 800bd34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        HAL_UART_ErrorCallback(huart);
 800bd38:	f7ff ff53 	bl	800bbe2 <HAL_UART_ErrorCallback>
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bd3c:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
 800bd40:	e7f8      	b.n	800bd34 <HAL_UART_IRQHandler+0x13c>
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bd42:	6ee0      	ldr	r0, [r4, #108]	@ 0x6c
 800bd44:	2801      	cmp	r0, #1
 800bd46:	f040 80b5 	bne.w	800beb4 <HAL_UART_IRQHandler+0x2bc>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800bd4a:	06ce      	lsls	r6, r1, #27
 800bd4c:	f140 80b2 	bpl.w	800beb4 <HAL_UART_IRQHandler+0x2bc>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800bd50:	06d0      	lsls	r0, r2, #27
 800bd52:	f140 80af 	bpl.w	800beb4 <HAL_UART_IRQHandler+0x2bc>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd56:	2210      	movs	r2, #16
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bd58:	f8b4 005c 	ldrh.w	r0, [r4, #92]	@ 0x5c
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800bd5c:	621a      	str	r2, [r3, #32]
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800bd5e:	689a      	ldr	r2, [r3, #8]
 800bd60:	0652      	lsls	r2, r2, #25
 800bd62:	d577      	bpl.n	800be54 <HAL_UART_IRQHandler+0x25c>
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800bd64:	f8d4 5080 	ldr.w	r5, [r4, #128]	@ 0x80
 800bd68:	495b      	ldr	r1, [pc, #364]	@ (800bed8 <HAL_UART_IRQHandler+0x2e0>)
 800bd6a:	682a      	ldr	r2, [r5, #0]
 800bd6c:	428a      	cmp	r2, r1
 800bd6e:	d01e      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd70:	3118      	adds	r1, #24
 800bd72:	428a      	cmp	r2, r1
 800bd74:	d01b      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd76:	3118      	adds	r1, #24
 800bd78:	428a      	cmp	r2, r1
 800bd7a:	d018      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd7c:	3118      	adds	r1, #24
 800bd7e:	428a      	cmp	r2, r1
 800bd80:	d015      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd82:	3118      	adds	r1, #24
 800bd84:	428a      	cmp	r2, r1
 800bd86:	d012      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd88:	3118      	adds	r1, #24
 800bd8a:	428a      	cmp	r2, r1
 800bd8c:	d00f      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd8e:	3118      	adds	r1, #24
 800bd90:	428a      	cmp	r2, r1
 800bd92:	d00c      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd94:	3118      	adds	r1, #24
 800bd96:	428a      	cmp	r2, r1
 800bd98:	d009      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bd9a:	f501 7156 	add.w	r1, r1, #856	@ 0x358
 800bd9e:	428a      	cmp	r2, r1
 800bda0:	d005      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bda2:	3118      	adds	r1, #24
 800bda4:	428a      	cmp	r2, r1
 800bda6:	d002      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bda8:	3118      	adds	r1, #24
 800bdaa:	428a      	cmp	r2, r1
 800bdac:	d0ff      	beq.n	800bdae <HAL_UART_IRQHandler+0x1b6>
 800bdae:	6851      	ldr	r1, [r2, #4]
 800bdb0:	b289      	uxth	r1, r1
      if ((nb_remaining_rx_data > 0U)
 800bdb2:	2900      	cmp	r1, #0
 800bdb4:	d043      	beq.n	800be3e <HAL_UART_IRQHandler+0x246>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800bdb6:	4281      	cmp	r1, r0
 800bdb8:	d241      	bcs.n	800be3e <HAL_UART_IRQHandler+0x246>
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdba:	69ea      	ldr	r2, [r5, #28]
        huart->RxXferCount = nb_remaining_rx_data;
 800bdbc:	f8a4 105e 	strh.w	r1, [r4, #94]	@ 0x5e
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800bdc0:	f5b2 7f80 	cmp.w	r2, #256	@ 0x100
 800bdc4:	d02f      	beq.n	800be26 <HAL_UART_IRQHandler+0x22e>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdc6:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800bdca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	e843 2100 	strex	r1, r2, [r3]
 800bdd2:	2900      	cmp	r1, #0
 800bdd4:	d1f7      	bne.n	800bdc6 <HAL_UART_IRQHandler+0x1ce>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdd6:	f103 0208 	add.w	r2, r3, #8
 800bdda:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bdde:	f022 0201 	bic.w	r2, r2, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bde2:	f103 0008 	add.w	r0, r3, #8
 800bde6:	e840 2100 	strex	r1, r2, [r0]
 800bdea:	2900      	cmp	r1, #0
 800bdec:	d1f3      	bne.n	800bdd6 <HAL_UART_IRQHandler+0x1de>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdee:	f103 0208 	add.w	r2, r3, #8
 800bdf2:	e852 2f00 	ldrex	r2, [r2]
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800bdf6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdfa:	f103 0008 	add.w	r0, r3, #8
 800bdfe:	e840 2100 	strex	r1, r2, [r0]
 800be02:	2900      	cmp	r1, #0
 800be04:	d1f3      	bne.n	800bdee <HAL_UART_IRQHandler+0x1f6>
          huart->RxState = HAL_UART_STATE_READY;
 800be06:	2220      	movs	r2, #32
 800be08:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800be0c:	66e1      	str	r1, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be0e:	e853 2f00 	ldrex	r2, [r3]
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800be12:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be16:	e843 2100 	strex	r1, r2, [r3]
 800be1a:	2900      	cmp	r1, #0
 800be1c:	d1f7      	bne.n	800be0e <HAL_UART_IRQHandler+0x216>
          (void)HAL_DMA_Abort(huart->hdmarx);
 800be1e:	f8d4 0080 	ldr.w	r0, [r4, #128]	@ 0x80
 800be22:	f7fa fd57 	bl	80068d4 <HAL_DMA_Abort>
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be26:	2302      	movs	r3, #2
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be28:	f8b4 105c 	ldrh.w	r1, [r4, #92]	@ 0x5c
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be2c:	6723      	str	r3, [r4, #112]	@ 0x70
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800be2e:	f8b4 305e 	ldrh.w	r3, [r4, #94]	@ 0x5e
 800be32:	1ac9      	subs	r1, r1, r3
 800be34:	b289      	uxth	r1, r1
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800be36:	4620      	mov	r0, r4
 800be38:	f7ff fedc 	bl	800bbf4 <HAL_UARTEx_RxEventCallback>
 800be3c:	e77a      	b.n	800bd34 <HAL_UART_IRQHandler+0x13c>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800be3e:	4281      	cmp	r1, r0
 800be40:	f47f af78 	bne.w	800bd34 <HAL_UART_IRQHandler+0x13c>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800be44:	69eb      	ldr	r3, [r5, #28]
 800be46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800be4a:	f47f af73 	bne.w	800bd34 <HAL_UART_IRQHandler+0x13c>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800be4e:	2302      	movs	r3, #2
 800be50:	6723      	str	r3, [r4, #112]	@ 0x70
 800be52:	e7f0      	b.n	800be36 <HAL_UART_IRQHandler+0x23e>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be54:	f8b4 205e 	ldrh.w	r2, [r4, #94]	@ 0x5e
      if ((huart->RxXferCount > 0U)
 800be58:	f8b4 105e 	ldrh.w	r1, [r4, #94]	@ 0x5e
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be5c:	b292      	uxth	r2, r2
      if ((huart->RxXferCount > 0U)
 800be5e:	b289      	uxth	r1, r1
 800be60:	2900      	cmp	r1, #0
 800be62:	f43f af67 	beq.w	800bd34 <HAL_UART_IRQHandler+0x13c>
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800be66:	1a80      	subs	r0, r0, r2
 800be68:	b281      	uxth	r1, r0
          && (nb_rx_data > 0U))
 800be6a:	2900      	cmp	r1, #0
 800be6c:	f43f af62 	beq.w	800bd34 <HAL_UART_IRQHandler+0x13c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be70:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800be74:	f422 7290 	bic.w	r2, r2, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be78:	e843 2000 	strex	r0, r2, [r3]
 800be7c:	2800      	cmp	r0, #0
 800be7e:	d1f7      	bne.n	800be70 <HAL_UART_IRQHandler+0x278>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800be80:	4d16      	ldr	r5, [pc, #88]	@ (800bedc <HAL_UART_IRQHandler+0x2e4>)
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800be82:	f103 0208 	add.w	r2, r3, #8
 800be86:	e852 2f00 	ldrex	r2, [r2]
 800be8a:	402a      	ands	r2, r5
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800be8c:	f103 0608 	add.w	r6, r3, #8
 800be90:	e846 2000 	strex	r0, r2, [r6]
 800be94:	2800      	cmp	r0, #0
 800be96:	d1f4      	bne.n	800be82 <HAL_UART_IRQHandler+0x28a>
        huart->RxState = HAL_UART_STATE_READY;
 800be98:	2220      	movs	r2, #32
        huart->RxISR = NULL;
 800be9a:	6760      	str	r0, [r4, #116]	@ 0x74
        huart->RxState = HAL_UART_STATE_READY;
 800be9c:	f8c4 208c 	str.w	r2, [r4, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bea0:	66e0      	str	r0, [r4, #108]	@ 0x6c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bea2:	e853 2f00 	ldrex	r2, [r3]
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800bea6:	f022 0210 	bic.w	r2, r2, #16
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800beaa:	e843 2000 	strex	r0, r2, [r3]
 800beae:	2800      	cmp	r0, #0
 800beb0:	d1f7      	bne.n	800bea2 <HAL_UART_IRQHandler+0x2aa>
 800beb2:	e7cc      	b.n	800be4e <HAL_UART_IRQHandler+0x256>
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 800beb4:	02cf      	lsls	r7, r1, #11
 800beb6:	d513      	bpl.n	800bee0 <HAL_UART_IRQHandler+0x2e8>
 800beb8:	026e      	lsls	r6, r5, #9
 800beba:	d511      	bpl.n	800bee0 <HAL_UART_IRQHandler+0x2e8>
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bebc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
    HAL_UARTEx_WakeupCallback(huart);
 800bec0:	4620      	mov	r0, r4
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800bec2:	621a      	str	r2, [r3, #32]
}
 800bec4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_WakeupCallback(huart);
 800bec8:	f000 bb76 	b.w	800c5b8 <HAL_UARTEx_WakeupCallback>
 800becc:	10000001 	.word	0x10000001
 800bed0:	04000120 	.word	0x04000120
 800bed4:	0800bbe5 	.word	0x0800bbe5
 800bed8:	40020010 	.word	0x40020010
 800bedc:	effffffe 	.word	0xeffffffe
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 800bee0:	0608      	lsls	r0, r1, #24
 800bee2:	d50b      	bpl.n	800befc <HAL_UART_IRQHandler+0x304>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800bee4:	f002 0080 	and.w	r0, r2, #128	@ 0x80
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800bee8:	f405 0500 	and.w	r5, r5, #8388608	@ 0x800000
 800beec:	4328      	orrs	r0, r5
 800beee:	d005      	beq.n	800befc <HAL_UART_IRQHandler+0x304>
    if (huart->TxISR != NULL)
 800bef0:	6fa3      	ldr	r3, [r4, #120]	@ 0x78
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	f43f af1e 	beq.w	800bd34 <HAL_UART_IRQHandler+0x13c>
      huart->TxISR(huart);
 800bef8:	4620      	mov	r0, r4
 800befa:	e696      	b.n	800bc2a <HAL_UART_IRQHandler+0x32>
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800befc:	064f      	lsls	r7, r1, #25
 800befe:	d511      	bpl.n	800bf24 <HAL_UART_IRQHandler+0x32c>
 800bf00:	0656      	lsls	r6, r2, #25
 800bf02:	d50f      	bpl.n	800bf24 <HAL_UART_IRQHandler+0x32c>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf04:	e853 2f00 	ldrex	r2, [r3]
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800bf08:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf0c:	e843 2100 	strex	r1, r2, [r3]
 800bf10:	2900      	cmp	r1, #0
 800bf12:	d1f7      	bne.n	800bf04 <HAL_UART_IRQHandler+0x30c>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800bf14:	2320      	movs	r3, #32
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800bf16:	4620      	mov	r0, r4
  huart->TxISR = NULL;
 800bf18:	67a1      	str	r1, [r4, #120]	@ 0x78
  huart->gState = HAL_UART_STATE_READY;
 800bf1a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  HAL_UART_TxCpltCallback(huart);
 800bf1e:	f7ff fe5f 	bl	800bbe0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800bf22:	e707      	b.n	800bd34 <HAL_UART_IRQHandler+0x13c>
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800bf24:	020d      	lsls	r5, r1, #8
 800bf26:	d506      	bpl.n	800bf36 <HAL_UART_IRQHandler+0x33e>
 800bf28:	0050      	lsls	r0, r2, #1
 800bf2a:	d504      	bpl.n	800bf36 <HAL_UART_IRQHandler+0x33e>
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf2c:	4620      	mov	r0, r4
}
 800bf2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800bf32:	f000 bb43 	b.w	800c5bc <HAL_UARTEx_TxFifoEmptyCallback>
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800bf36:	01cb      	lsls	r3, r1, #7
 800bf38:	f57f aefc 	bpl.w	800bd34 <HAL_UART_IRQHandler+0x13c>
 800bf3c:	2a00      	cmp	r2, #0
 800bf3e:	f6bf aef9 	bge.w	800bd34 <HAL_UART_IRQHandler+0x13c>
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf42:	4620      	mov	r0, r4
}
 800bf44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
    HAL_UARTEx_RxFifoFullCallback(huart);
 800bf48:	f000 bb37 	b.w	800c5ba <HAL_UARTEx_RxFifoFullCallback>

0800bf4c <UART_SetConfig>:
{
 800bf4c:	b530      	push	{r4, r5, lr}
 800bf4e:	4604      	mov	r4, r0
  if (UART_INSTANCE_LOWPOWER(huart))
 800bf50:	6803      	ldr	r3, [r0, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf52:	69c0      	ldr	r0, [r0, #28]
{
 800bf54:	b087      	sub	sp, #28
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf56:	6921      	ldr	r1, [r4, #16]
 800bf58:	68a2      	ldr	r2, [r4, #8]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf5a:	681d      	ldr	r5, [r3, #0]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf5c:	430a      	orrs	r2, r1
 800bf5e:	6961      	ldr	r1, [r4, #20]
 800bf60:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf62:	499c      	ldr	r1, [pc, #624]	@ (800c1d4 <UART_SetConfig+0x288>)
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800bf64:	4302      	orrs	r2, r0
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf66:	4029      	ands	r1, r5
 800bf68:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf6a:	68e1      	ldr	r1, [r4, #12]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800bf6c:	601a      	str	r2, [r3, #0]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf6e:	685a      	ldr	r2, [r3, #4]
 800bf70:	f422 5240 	bic.w	r2, r2, #12288	@ 0x3000
 800bf74:	430a      	orrs	r2, r1
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800bf76:	69a1      	ldr	r1, [r4, #24]
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800bf78:	605a      	str	r2, [r3, #4]
  if (!(UART_INSTANCE_LOWPOWER(huart)))
 800bf7a:	4a97      	ldr	r2, [pc, #604]	@ (800c1d8 <UART_SetConfig+0x28c>)
 800bf7c:	4293      	cmp	r3, r2
    tmpreg |= huart->Init.OneBitSampling;
 800bf7e:	bf1c      	itt	ne
 800bf80:	6a22      	ldrne	r2, [r4, #32]
 800bf82:	4311      	orrne	r1, r2
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf84:	689a      	ldr	r2, [r3, #8]
 800bf86:	f022 426e 	bic.w	r2, r2, #3992977408	@ 0xee000000
 800bf8a:	f422 6230 	bic.w	r2, r2, #2816	@ 0xb00
 800bf8e:	430a      	orrs	r2, r1
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf90:	6a61      	ldr	r1, [r4, #36]	@ 0x24
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800bf92:	609a      	str	r2, [r3, #8]
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 800bf94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bf96:	f022 020f 	bic.w	r2, r2, #15
 800bf9a:	430a      	orrs	r2, r1
 800bf9c:	62da      	str	r2, [r3, #44]	@ 0x2c
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bf9e:	4a8f      	ldr	r2, [pc, #572]	@ (800c1dc <UART_SetConfig+0x290>)
 800bfa0:	4293      	cmp	r3, r2
 800bfa2:	d128      	bne.n	800bff6 <UART_SetConfig+0xaa>
 800bfa4:	4b8e      	ldr	r3, [pc, #568]	@ (800c1e0 <UART_SetConfig+0x294>)
 800bfa6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bfa8:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bfac:	2b18      	cmp	r3, #24
 800bfae:	f000 812f 	beq.w	800c210 <UART_SetConfig+0x2c4>
 800bfb2:	d814      	bhi.n	800bfde <UART_SetConfig+0x92>
 800bfb4:	2b08      	cmp	r3, #8
 800bfb6:	f000 8154 	beq.w	800c262 <UART_SetConfig+0x316>
 800bfba:	2b10      	cmp	r3, #16
 800bfbc:	f000 8102 	beq.w	800c1c4 <UART_SetConfig+0x278>
 800bfc0:	2b00      	cmp	r3, #0
 800bfc2:	f000 80f9 	beq.w	800c1b8 <UART_SetConfig+0x26c>
 800bfc6:	2380      	movs	r3, #128	@ 0x80
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfc8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bfcc:	f040 80b4 	bne.w	800c138 <UART_SetConfig+0x1ec>
    switch (clocksource)
 800bfd0:	2b08      	cmp	r3, #8
 800bfd2:	d846      	bhi.n	800c062 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800bfd4:	4668      	mov	r0, sp
 800bfd6:	f7ff fa5b 	bl	800b490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800bfda:	9801      	ldr	r0, [sp, #4]
        break;
 800bfdc:	e0e9      	b.n	800c1b2 <UART_SetConfig+0x266>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bfde:	2b20      	cmp	r3, #32
 800bfe0:	f000 80dd 	beq.w	800c19e <UART_SetConfig+0x252>
 800bfe4:	2b28      	cmp	r3, #40	@ 0x28
 800bfe6:	d1ee      	bne.n	800bfc6 <UART_SetConfig+0x7a>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800bfe8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800bfec:	f000 811d 	beq.w	800c22a <UART_SetConfig+0x2de>
        pclk = (uint32_t) LSE_VALUE;
 800bff0:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800bff4:	e0be      	b.n	800c174 <UART_SetConfig+0x228>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800bff6:	4a7b      	ldr	r2, [pc, #492]	@ (800c1e4 <UART_SetConfig+0x298>)
 800bff8:	4293      	cmp	r3, r2
 800bffa:	d115      	bne.n	800c028 <UART_SetConfig+0xdc>
 800bffc:	4b78      	ldr	r3, [pc, #480]	@ (800c1e0 <UART_SetConfig+0x294>)
 800bffe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c000:	f003 0307 	and.w	r3, r3, #7
 800c004:	2b05      	cmp	r3, #5
 800c006:	d82c      	bhi.n	800c062 <UART_SetConfig+0x116>
 800c008:	a201      	add	r2, pc, #4	@ (adr r2, 800c010 <UART_SetConfig+0xc4>)
 800c00a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c00e:	bf00      	nop
 800c010:	0800c1a9 	.word	0x0800c1a9
 800c014:	0800c135 	.word	0x0800c135
 800c018:	0800c1c5 	.word	0x0800c1c5
 800c01c:	0800c211 	.word	0x0800c211
 800c020:	0800c19f 	.word	0x0800c19f
 800c024:	0800bfe9 	.word	0x0800bfe9
 800c028:	4a6f      	ldr	r2, [pc, #444]	@ (800c1e8 <UART_SetConfig+0x29c>)
 800c02a:	4293      	cmp	r3, r2
 800c02c:	d0e6      	beq.n	800bffc <UART_SetConfig+0xb0>
 800c02e:	4a6f      	ldr	r2, [pc, #444]	@ (800c1ec <UART_SetConfig+0x2a0>)
 800c030:	4293      	cmp	r3, r2
 800c032:	d0e3      	beq.n	800bffc <UART_SetConfig+0xb0>
 800c034:	4a6e      	ldr	r2, [pc, #440]	@ (800c1f0 <UART_SetConfig+0x2a4>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d0e0      	beq.n	800bffc <UART_SetConfig+0xb0>
 800c03a:	4a6e      	ldr	r2, [pc, #440]	@ (800c1f4 <UART_SetConfig+0x2a8>)
 800c03c:	4293      	cmp	r3, r2
 800c03e:	d118      	bne.n	800c072 <UART_SetConfig+0x126>
 800c040:	4b67      	ldr	r3, [pc, #412]	@ (800c1e0 <UART_SetConfig+0x294>)
 800c042:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c044:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c048:	2b18      	cmp	r3, #24
 800c04a:	f000 80e1 	beq.w	800c210 <UART_SetConfig+0x2c4>
 800c04e:	d80a      	bhi.n	800c066 <UART_SetConfig+0x11a>
 800c050:	2b08      	cmp	r3, #8
 800c052:	f000 8106 	beq.w	800c262 <UART_SetConfig+0x316>
 800c056:	2b10      	cmp	r3, #16
 800c058:	f000 80b4 	beq.w	800c1c4 <UART_SetConfig+0x278>
 800c05c:	2b00      	cmp	r3, #0
 800c05e:	f000 80ab 	beq.w	800c1b8 <UART_SetConfig+0x26c>
        pclk = (uint32_t) CSI_VALUE;
 800c062:	2001      	movs	r0, #1
 800c064:	e049      	b.n	800c0fa <UART_SetConfig+0x1ae>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c066:	2b20      	cmp	r3, #32
 800c068:	f000 8099 	beq.w	800c19e <UART_SetConfig+0x252>
 800c06c:	2b28      	cmp	r3, #40	@ 0x28
 800c06e:	d0bb      	beq.n	800bfe8 <UART_SetConfig+0x9c>
 800c070:	e7f7      	b.n	800c062 <UART_SetConfig+0x116>
 800c072:	4a61      	ldr	r2, [pc, #388]	@ (800c1f8 <UART_SetConfig+0x2ac>)
 800c074:	4293      	cmp	r3, r2
 800c076:	d0c1      	beq.n	800bffc <UART_SetConfig+0xb0>
 800c078:	4a60      	ldr	r2, [pc, #384]	@ (800c1fc <UART_SetConfig+0x2b0>)
 800c07a:	4293      	cmp	r3, r2
 800c07c:	d0be      	beq.n	800bffc <UART_SetConfig+0xb0>
 800c07e:	4a56      	ldr	r2, [pc, #344]	@ (800c1d8 <UART_SetConfig+0x28c>)
 800c080:	4293      	cmp	r3, r2
 800c082:	d1ee      	bne.n	800c062 <UART_SetConfig+0x116>
 800c084:	f502 320e 	add.w	r2, r2, #145408	@ 0x23800
 800c088:	6d93      	ldr	r3, [r2, #88]	@ 0x58
 800c08a:	f003 0307 	and.w	r3, r3, #7
 800c08e:	2b05      	cmp	r3, #5
 800c090:	d8e7      	bhi.n	800c062 <UART_SetConfig+0x116>
 800c092:	e8df f003 	tbb	[pc, r3]
 800c096:	2b49      	.short	0x2b49
 800c098:	4c033f3a 	.word	0x4c033f3a
        pclk = (uint32_t) CSI_VALUE;
 800c09c:	4858      	ldr	r0, [pc, #352]	@ (800c200 <UART_SetConfig+0x2b4>)
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c09e:	4b59      	ldr	r3, [pc, #356]	@ (800c204 <UART_SetConfig+0x2b8>)
 800c0a0:	6a62      	ldr	r2, [r4, #36]	@ 0x24
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0a2:	6865      	ldr	r5, [r4, #4]
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0a4:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0a8:	eb05 0145 	add.w	r1, r5, r5, lsl #1
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800c0ac:	fbb0 f3f2 	udiv	r3, r0, r2
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800c0b0:	4299      	cmp	r1, r3
 800c0b2:	d8d6      	bhi.n	800c062 <UART_SetConfig+0x116>
 800c0b4:	ebb3 3f05 	cmp.w	r3, r5, lsl #12
 800c0b8:	d8d3      	bhi.n	800c062 <UART_SetConfig+0x116>
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c0ba:	2300      	movs	r3, #0
 800c0bc:	4619      	mov	r1, r3
 800c0be:	f7f4 fb1b 	bl	80006f8 <__aeabi_uldivmod>
 800c0c2:	462a      	mov	r2, r5
 800c0c4:	0209      	lsls	r1, r1, #8
 800c0c6:	086b      	lsrs	r3, r5, #1
 800c0c8:	ea41 6110 	orr.w	r1, r1, r0, lsr #24
 800c0cc:	0200      	lsls	r0, r0, #8
 800c0ce:	18c0      	adds	r0, r0, r3
 800c0d0:	f04f 0300 	mov.w	r3, #0
 800c0d4:	f141 0100 	adc.w	r1, r1, #0
 800c0d8:	f7f4 fb0e 	bl	80006f8 <__aeabi_uldivmod>
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800c0dc:	4b4a      	ldr	r3, [pc, #296]	@ (800c208 <UART_SetConfig+0x2bc>)
 800c0de:	f5a0 7240 	sub.w	r2, r0, #768	@ 0x300
 800c0e2:	429a      	cmp	r2, r3
 800c0e4:	d8bd      	bhi.n	800c062 <UART_SetConfig+0x116>
          huart->Instance->BRR = usartdiv;
 800c0e6:	6823      	ldr	r3, [r4, #0]
 800c0e8:	60d8      	str	r0, [r3, #12]
 800c0ea:	e005      	b.n	800c0f8 <UART_SetConfig+0x1ac>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c0ec:	4668      	mov	r0, sp
 800c0ee:	f7ff f9cf 	bl	800b490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c0f2:	9801      	ldr	r0, [sp, #4]
    if (pclk != 0U)
 800c0f4:	2800      	cmp	r0, #0
 800c0f6:	d1d2      	bne.n	800c09e <UART_SetConfig+0x152>
        pclk = (uint32_t) CSI_VALUE;
 800c0f8:	2000      	movs	r0, #0
  huart->NbRxDataToProcess = 1;
 800c0fa:	f04f 1301 	mov.w	r3, #65537	@ 0x10001
 800c0fe:	66a3      	str	r3, [r4, #104]	@ 0x68
  huart->RxISR = NULL;
 800c100:	2300      	movs	r3, #0
  huart->TxISR = NULL;
 800c102:	e9c4 331d 	strd	r3, r3, [r4, #116]	@ 0x74
}
 800c106:	b007      	add	sp, #28
 800c108:	bd30      	pop	{r4, r5, pc}
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c10a:	a803      	add	r0, sp, #12
 800c10c:	f7ff fa6a 	bl	800b5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c110:	9804      	ldr	r0, [sp, #16]
        break;
 800c112:	e7ef      	b.n	800c0f4 <UART_SetConfig+0x1a8>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c114:	6813      	ldr	r3, [r2, #0]
 800c116:	483d      	ldr	r0, [pc, #244]	@ (800c20c <UART_SetConfig+0x2c0>)
 800c118:	f013 0f20 	tst.w	r3, #32
 800c11c:	d0bf      	beq.n	800c09e <UART_SetConfig+0x152>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c11e:	6813      	ldr	r3, [r2, #0]
 800c120:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c124:	40d8      	lsrs	r0, r3
    if (pclk != 0U)
 800c126:	e7ba      	b.n	800c09e <UART_SetConfig+0x152>
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 800c128:	f7ff f9a0 	bl	800b46c <HAL_RCCEx_GetD3PCLK1Freq>
        break;
 800c12c:	e7e2      	b.n	800c0f4 <UART_SetConfig+0x1a8>
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c12e:	f44f 4000 	mov.w	r0, #32768	@ 0x8000
 800c132:	e7b4      	b.n	800c09e <UART_SetConfig+0x152>
 800c134:	2304      	movs	r3, #4
 800c136:	e747      	b.n	800bfc8 <UART_SetConfig+0x7c>
    switch (clocksource)
 800c138:	2b08      	cmp	r3, #8
 800c13a:	d892      	bhi.n	800c062 <UART_SetConfig+0x116>
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800c13c:	4668      	mov	r0, sp
 800c13e:	f7ff f9a7 	bl	800b490 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800c142:	9801      	ldr	r0, [sp, #4]
        break;
 800c144:	e001      	b.n	800c14a <UART_SetConfig+0x1fe>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c146:	f7fe fb45 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c14a:	2800      	cmp	r0, #0
 800c14c:	d0d4      	beq.n	800c0f8 <UART_SetConfig+0x1ac>
 800c14e:	e011      	b.n	800c174 <UART_SetConfig+0x228>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c150:	f7fe fb52 	bl	800a7f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800c154:	e7f9      	b.n	800c14a <UART_SetConfig+0x1fe>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c156:	a803      	add	r0, sp, #12
 800c158:	f7ff fa44 	bl	800b5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c15c:	9804      	ldr	r0, [sp, #16]
        break;
 800c15e:	e7f4      	b.n	800c14a <UART_SetConfig+0x1fe>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c160:	4b1f      	ldr	r3, [pc, #124]	@ (800c1e0 <UART_SetConfig+0x294>)
 800c162:	482a      	ldr	r0, [pc, #168]	@ (800c20c <UART_SetConfig+0x2c0>)
 800c164:	681a      	ldr	r2, [r3, #0]
 800c166:	f012 0f20 	tst.w	r2, #32
 800c16a:	d003      	beq.n	800c174 <UART_SetConfig+0x228>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c16c:	681b      	ldr	r3, [r3, #0]
 800c16e:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c172:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c174:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800c176:	4b23      	ldr	r3, [pc, #140]	@ (800c204 <UART_SetConfig+0x2b8>)
 800c178:	6862      	ldr	r2, [r4, #4]
 800c17a:	f833 3011 	ldrh.w	r3, [r3, r1, lsl #1]
 800c17e:	fbb0 f3f3 	udiv	r3, r0, r3
 800c182:	eb03 0352 	add.w	r3, r3, r2, lsr #1
 800c186:	fbb3 f3f2 	udiv	r3, r3, r2
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c18a:	f64f 72ef 	movw	r2, #65519	@ 0xffef
 800c18e:	f1a3 0110 	sub.w	r1, r3, #16
 800c192:	4291      	cmp	r1, r2
 800c194:	f63f af65 	bhi.w	800c062 <UART_SetConfig+0x116>
        huart->Instance->BRR = (uint16_t)usartdiv;
 800c198:	6822      	ldr	r2, [r4, #0]
 800c19a:	60d3      	str	r3, [r2, #12]
 800c19c:	e7ac      	b.n	800c0f8 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c19e:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c1a2:	4817      	ldr	r0, [pc, #92]	@ (800c200 <UART_SetConfig+0x2b4>)
 800c1a4:	d1e6      	bne.n	800c174 <UART_SetConfig+0x228>
 800c1a6:	e040      	b.n	800c22a <UART_SetConfig+0x2de>
 800c1a8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c1ac:	d1cb      	bne.n	800c146 <UART_SetConfig+0x1fa>
        pclk = HAL_RCC_GetPCLK1Freq();
 800c1ae:	f7fe fb11 	bl	800a7d4 <HAL_RCC_GetPCLK1Freq>
    if (pclk != 0U)
 800c1b2:	2800      	cmp	r0, #0
 800c1b4:	d0a0      	beq.n	800c0f8 <UART_SetConfig+0x1ac>
 800c1b6:	e038      	b.n	800c22a <UART_SetConfig+0x2de>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1b8:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c1bc:	d1c8      	bne.n	800c150 <UART_SetConfig+0x204>
        pclk = HAL_RCC_GetPCLK2Freq();
 800c1be:	f7fe fb1b 	bl	800a7f8 <HAL_RCC_GetPCLK2Freq>
        break;
 800c1c2:	e7f6      	b.n	800c1b2 <UART_SetConfig+0x266>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c1c4:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c1c8:	d1c5      	bne.n	800c156 <UART_SetConfig+0x20a>
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800c1ca:	a803      	add	r0, sp, #12
 800c1cc:	f7ff fa0a 	bl	800b5e4 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800c1d0:	9804      	ldr	r0, [sp, #16]
        break;
 800c1d2:	e7ee      	b.n	800c1b2 <UART_SetConfig+0x266>
 800c1d4:	cfff69f3 	.word	0xcfff69f3
 800c1d8:	58000c00 	.word	0x58000c00
 800c1dc:	40011000 	.word	0x40011000
 800c1e0:	58024400 	.word	0x58024400
 800c1e4:	40004400 	.word	0x40004400
 800c1e8:	40004800 	.word	0x40004800
 800c1ec:	40004c00 	.word	0x40004c00
 800c1f0:	40005000 	.word	0x40005000
 800c1f4:	40011400 	.word	0x40011400
 800c1f8:	40007800 	.word	0x40007800
 800c1fc:	40007c00 	.word	0x40007c00
 800c200:	003d0900 	.word	0x003d0900
 800c204:	08025060 	.word	0x08025060
 800c208:	000ffcff 	.word	0x000ffcff
 800c20c:	03d09000 	.word	0x03d09000
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c210:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c214:	d1a4      	bne.n	800c160 <UART_SetConfig+0x214>
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c216:	4b15      	ldr	r3, [pc, #84]	@ (800c26c <UART_SetConfig+0x320>)
 800c218:	4815      	ldr	r0, [pc, #84]	@ (800c270 <UART_SetConfig+0x324>)
 800c21a:	681a      	ldr	r2, [r3, #0]
 800c21c:	f012 0f20 	tst.w	r2, #32
 800c220:	d003      	beq.n	800c22a <UART_SetConfig+0x2de>
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800c222:	681b      	ldr	r3, [r3, #0]
 800c224:	f3c3 03c1 	ubfx	r3, r3, #3, #2
 800c228:	40d8      	lsrs	r0, r3
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c22a:	4b12      	ldr	r3, [pc, #72]	@ (800c274 <UART_SetConfig+0x328>)
 800c22c:	6a62      	ldr	r2, [r4, #36]	@ 0x24
 800c22e:	6861      	ldr	r1, [r4, #4]
 800c230:	f833 2012 	ldrh.w	r2, [r3, r2, lsl #1]
 800c234:	084b      	lsrs	r3, r1, #1
 800c236:	fbb0 f2f2 	udiv	r2, r0, r2
 800c23a:	eb03 0342 	add.w	r3, r3, r2, lsl #1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c23e:	f64f 72ef 	movw	r2, #65519	@ 0xffef
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800c242:	fbb3 f3f1 	udiv	r3, r3, r1
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800c246:	f1a3 0110 	sub.w	r1, r3, #16
 800c24a:	4291      	cmp	r1, r2
 800c24c:	f63f af09 	bhi.w	800c062 <UART_SetConfig+0x116>
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c250:	f023 020f 	bic.w	r2, r3, #15
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800c254:	f3c3 0342 	ubfx	r3, r3, #1, #3
        huart->Instance->BRR = brrtemp;
 800c258:	6821      	ldr	r1, [r4, #0]
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800c25a:	b292      	uxth	r2, r2
        huart->Instance->BRR = brrtemp;
 800c25c:	4313      	orrs	r3, r2
 800c25e:	60cb      	str	r3, [r1, #12]
 800c260:	e74a      	b.n	800c0f8 <UART_SetConfig+0x1ac>
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c262:	f5b0 4f00 	cmp.w	r0, #32768	@ 0x8000
 800c266:	f47f af69 	bne.w	800c13c <UART_SetConfig+0x1f0>
 800c26a:	e6b3      	b.n	800bfd4 <UART_SetConfig+0x88>
 800c26c:	58024400 	.word	0x58024400
 800c270:	03d09000 	.word	0x03d09000
 800c274:	08025060 	.word	0x08025060

0800c278 <UART_AdvFeatureConfig>:
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c278:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800c27a:	071a      	lsls	r2, r3, #28
{
 800c27c:	b510      	push	{r4, lr}
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800c27e:	d506      	bpl.n	800c28e <UART_AdvFeatureConfig+0x16>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800c280:	6801      	ldr	r1, [r0, #0]
 800c282:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 800c284:	684a      	ldr	r2, [r1, #4]
 800c286:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800c28a:	4322      	orrs	r2, r4
 800c28c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800c28e:	07dc      	lsls	r4, r3, #31
 800c290:	d506      	bpl.n	800c2a0 <UART_AdvFeatureConfig+0x28>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800c292:	6801      	ldr	r1, [r0, #0]
 800c294:	6ac4      	ldr	r4, [r0, #44]	@ 0x2c
 800c296:	684a      	ldr	r2, [r1, #4]
 800c298:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 800c29c:	4322      	orrs	r2, r4
 800c29e:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800c2a0:	0799      	lsls	r1, r3, #30
 800c2a2:	d506      	bpl.n	800c2b2 <UART_AdvFeatureConfig+0x3a>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800c2a4:	6801      	ldr	r1, [r0, #0]
 800c2a6:	6b04      	ldr	r4, [r0, #48]	@ 0x30
 800c2a8:	684a      	ldr	r2, [r1, #4]
 800c2aa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c2ae:	4322      	orrs	r2, r4
 800c2b0:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800c2b2:	075a      	lsls	r2, r3, #29
 800c2b4:	d506      	bpl.n	800c2c4 <UART_AdvFeatureConfig+0x4c>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800c2b6:	6801      	ldr	r1, [r0, #0]
 800c2b8:	6b44      	ldr	r4, [r0, #52]	@ 0x34
 800c2ba:	684a      	ldr	r2, [r1, #4]
 800c2bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c2c0:	4322      	orrs	r2, r4
 800c2c2:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800c2c4:	06dc      	lsls	r4, r3, #27
 800c2c6:	d506      	bpl.n	800c2d6 <UART_AdvFeatureConfig+0x5e>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800c2c8:	6801      	ldr	r1, [r0, #0]
 800c2ca:	6bc4      	ldr	r4, [r0, #60]	@ 0x3c
 800c2cc:	688a      	ldr	r2, [r1, #8]
 800c2ce:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800c2d2:	4322      	orrs	r2, r4
 800c2d4:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800c2d6:	0699      	lsls	r1, r3, #26
 800c2d8:	d506      	bpl.n	800c2e8 <UART_AdvFeatureConfig+0x70>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800c2da:	6801      	ldr	r1, [r0, #0]
 800c2dc:	6c04      	ldr	r4, [r0, #64]	@ 0x40
 800c2de:	688a      	ldr	r2, [r1, #8]
 800c2e0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800c2e4:	4322      	orrs	r2, r4
 800c2e6:	608a      	str	r2, [r1, #8]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800c2e8:	065a      	lsls	r2, r3, #25
 800c2ea:	d510      	bpl.n	800c30e <UART_AdvFeatureConfig+0x96>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2ec:	6801      	ldr	r1, [r0, #0]
 800c2ee:	6c44      	ldr	r4, [r0, #68]	@ 0x44
 800c2f0:	684a      	ldr	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c2f2:	f5b4 1f80 	cmp.w	r4, #1048576	@ 0x100000
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800c2f6:	f422 1280 	bic.w	r2, r2, #1048576	@ 0x100000
 800c2fa:	ea42 0204 	orr.w	r2, r2, r4
 800c2fe:	604a      	str	r2, [r1, #4]
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800c300:	d105      	bne.n	800c30e <UART_AdvFeatureConfig+0x96>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800c302:	684a      	ldr	r2, [r1, #4]
 800c304:	6c84      	ldr	r4, [r0, #72]	@ 0x48
 800c306:	f422 02c0 	bic.w	r2, r2, #6291456	@ 0x600000
 800c30a:	4322      	orrs	r2, r4
 800c30c:	604a      	str	r2, [r1, #4]
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800c30e:	061b      	lsls	r3, r3, #24
 800c310:	d506      	bpl.n	800c320 <UART_AdvFeatureConfig+0xa8>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800c312:	6802      	ldr	r2, [r0, #0]
 800c314:	6cc1      	ldr	r1, [r0, #76]	@ 0x4c
 800c316:	6853      	ldr	r3, [r2, #4]
 800c318:	f423 2300 	bic.w	r3, r3, #524288	@ 0x80000
 800c31c:	430b      	orrs	r3, r1
 800c31e:	6053      	str	r3, [r2, #4]
}
 800c320:	bd10      	pop	{r4, pc}

0800c322 <UART_WaitOnFlagUntilTimeout>:
{
 800c322:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c326:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800c32a:	4604      	mov	r4, r0
 800c32c:	460d      	mov	r5, r1
 800c32e:	4617      	mov	r7, r2
 800c330:	4698      	mov	r8, r3
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c332:	6822      	ldr	r2, [r4, #0]
 800c334:	69d3      	ldr	r3, [r2, #28]
 800c336:	ea35 0303 	bics.w	r3, r5, r3
 800c33a:	bf0c      	ite	eq
 800c33c:	2301      	moveq	r3, #1
 800c33e:	2300      	movne	r3, #0
 800c340:	42bb      	cmp	r3, r7
 800c342:	d001      	beq.n	800c348 <UART_WaitOnFlagUntilTimeout+0x26>
  return HAL_OK;
 800c344:	2000      	movs	r0, #0
 800c346:	e022      	b.n	800c38e <UART_WaitOnFlagUntilTimeout+0x6c>
    if (Timeout != HAL_MAX_DELAY)
 800c348:	f1b9 3fff 	cmp.w	r9, #4294967295
 800c34c:	d0f2      	beq.n	800c334 <UART_WaitOnFlagUntilTimeout+0x12>
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800c34e:	f7fa f993 	bl	8006678 <HAL_GetTick>
 800c352:	eba0 0008 	sub.w	r0, r0, r8
 800c356:	4548      	cmp	r0, r9
 800c358:	d829      	bhi.n	800c3ae <UART_WaitOnFlagUntilTimeout+0x8c>
 800c35a:	f1b9 0f00 	cmp.w	r9, #0
 800c35e:	d026      	beq.n	800c3ae <UART_WaitOnFlagUntilTimeout+0x8c>
      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800c360:	6821      	ldr	r1, [r4, #0]
 800c362:	680b      	ldr	r3, [r1, #0]
 800c364:	075a      	lsls	r2, r3, #29
 800c366:	d5e4      	bpl.n	800c332 <UART_WaitOnFlagUntilTimeout+0x10>
 800c368:	2d80      	cmp	r5, #128	@ 0x80
 800c36a:	d0e2      	beq.n	800c332 <UART_WaitOnFlagUntilTimeout+0x10>
 800c36c:	2d40      	cmp	r5, #64	@ 0x40
 800c36e:	d0e0      	beq.n	800c332 <UART_WaitOnFlagUntilTimeout+0x10>
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800c370:	69ce      	ldr	r6, [r1, #28]
 800c372:	f016 0608 	ands.w	r6, r6, #8
 800c376:	d00c      	beq.n	800c392 <UART_WaitOnFlagUntilTimeout+0x70>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c378:	2508      	movs	r5, #8
          UART_EndRxTransfer(huart);
 800c37a:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c37c:	620d      	str	r5, [r1, #32]
          UART_EndRxTransfer(huart);
 800c37e:	f7ff fc03 	bl	800bb88 <UART_EndRxTransfer>
          __HAL_UNLOCK(huart);
 800c382:	2300      	movs	r3, #0
          return HAL_ERROR;
 800c384:	2001      	movs	r0, #1
          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800c386:	f8c4 5090 	str.w	r5, [r4, #144]	@ 0x90
          __HAL_UNLOCK(huart);
 800c38a:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800c392:	69cb      	ldr	r3, [r1, #28]
 800c394:	051b      	lsls	r3, r3, #20
 800c396:	d5cc      	bpl.n	800c332 <UART_WaitOnFlagUntilTimeout+0x10>
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c398:	f44f 6300 	mov.w	r3, #2048	@ 0x800
          UART_EndRxTransfer(huart);
 800c39c:	4620      	mov	r0, r4
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c39e:	620b      	str	r3, [r1, #32]
          UART_EndRxTransfer(huart);
 800c3a0:	f7ff fbf2 	bl	800bb88 <UART_EndRxTransfer>
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3a4:	2320      	movs	r3, #32
          __HAL_UNLOCK(huart);
 800c3a6:	f884 6084 	strb.w	r6, [r4, #132]	@ 0x84
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800c3aa:	f8c4 3090 	str.w	r3, [r4, #144]	@ 0x90
        return HAL_TIMEOUT;
 800c3ae:	2003      	movs	r0, #3
 800c3b0:	e7ed      	b.n	800c38e <UART_WaitOnFlagUntilTimeout+0x6c>

0800c3b2 <HAL_UART_Transmit>:
{
 800c3b2:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c3b6:	4698      	mov	r8, r3
  if (huart->gState == HAL_UART_STATE_READY)
 800c3b8:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
{
 800c3bc:	4604      	mov	r4, r0
 800c3be:	460e      	mov	r6, r1
  if (huart->gState == HAL_UART_STATE_READY)
 800c3c0:	2b20      	cmp	r3, #32
{
 800c3c2:	4617      	mov	r7, r2
  if (huart->gState == HAL_UART_STATE_READY)
 800c3c4:	d146      	bne.n	800c454 <HAL_UART_Transmit+0xa2>
    if ((pData == NULL) || (Size == 0U))
 800c3c6:	2900      	cmp	r1, #0
 800c3c8:	d046      	beq.n	800c458 <HAL_UART_Transmit+0xa6>
 800c3ca:	2a00      	cmp	r2, #0
 800c3cc:	d044      	beq.n	800c458 <HAL_UART_Transmit+0xa6>
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3ce:	2321      	movs	r3, #33	@ 0x21
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c3d0:	2500      	movs	r5, #0
 800c3d2:	f8c0 5090 	str.w	r5, [r0, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c3d6:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
    tickstart = HAL_GetTick();
 800c3da:	f7fa f94d 	bl	8006678 <HAL_GetTick>
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3de:	68a3      	ldr	r3, [r4, #8]
    tickstart = HAL_GetTick();
 800c3e0:	4681      	mov	r9, r0
    huart->TxXferSize  = Size;
 800c3e2:	f8a4 7054 	strh.w	r7, [r4, #84]	@ 0x54
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
    huart->TxXferCount = Size;
 800c3ea:	f8a4 7056 	strh.w	r7, [r4, #86]	@ 0x56
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c3ee:	d103      	bne.n	800c3f8 <HAL_UART_Transmit+0x46>
 800c3f0:	6923      	ldr	r3, [r4, #16]
 800c3f2:	b90b      	cbnz	r3, 800c3f8 <HAL_UART_Transmit+0x46>
 800c3f4:	4635      	mov	r5, r6
      pdata8bits  = NULL;
 800c3f6:	461e      	mov	r6, r3
    while (huart->TxXferCount > 0U)
 800c3f8:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c3fc:	464b      	mov	r3, r9
 800c3fe:	f8cd 8000 	str.w	r8, [sp]
    while (huart->TxXferCount > 0U)
 800c402:	b292      	uxth	r2, r2
 800c404:	b942      	cbnz	r2, 800c418 <HAL_UART_Transmit+0x66>
    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c406:	2140      	movs	r1, #64	@ 0x40
 800c408:	4620      	mov	r0, r4
 800c40a:	f7ff ff8a 	bl	800c322 <UART_WaitOnFlagUntilTimeout>
 800c40e:	2320      	movs	r3, #32
 800c410:	b948      	cbnz	r0, 800c426 <HAL_UART_Transmit+0x74>
    huart->gState = HAL_UART_STATE_READY;
 800c412:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
    return HAL_OK;
 800c416:	e009      	b.n	800c42c <HAL_UART_Transmit+0x7a>
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c418:	2200      	movs	r2, #0
 800c41a:	2180      	movs	r1, #128	@ 0x80
 800c41c:	4620      	mov	r0, r4
 800c41e:	f7ff ff80 	bl	800c322 <UART_WaitOnFlagUntilTimeout>
 800c422:	b130      	cbz	r0, 800c432 <HAL_UART_Transmit+0x80>
        huart->gState = HAL_UART_STATE_READY;
 800c424:	2320      	movs	r3, #32
        return HAL_TIMEOUT;
 800c426:	2003      	movs	r0, #3
        huart->gState = HAL_UART_STATE_READY;
 800c428:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
}
 800c42c:	b003      	add	sp, #12
 800c42e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c432:	6822      	ldr	r2, [r4, #0]
      if (pdata8bits == NULL)
 800c434:	b95e      	cbnz	r6, 800c44e <HAL_UART_Transmit+0x9c>
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 800c436:	f835 3b02 	ldrh.w	r3, [r5], #2
 800c43a:	f3c3 0308 	ubfx	r3, r3, #0, #9
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c43e:	6293      	str	r3, [r2, #40]	@ 0x28
      huart->TxXferCount--;
 800c440:	f8b4 2056 	ldrh.w	r2, [r4, #86]	@ 0x56
 800c444:	3a01      	subs	r2, #1
 800c446:	b292      	uxth	r2, r2
 800c448:	f8a4 2056 	strh.w	r2, [r4, #86]	@ 0x56
 800c44c:	e7d4      	b.n	800c3f8 <HAL_UART_Transmit+0x46>
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800c44e:	f816 3b01 	ldrb.w	r3, [r6], #1
 800c452:	e7f4      	b.n	800c43e <HAL_UART_Transmit+0x8c>
    return HAL_BUSY;
 800c454:	2002      	movs	r0, #2
 800c456:	e7e9      	b.n	800c42c <HAL_UART_Transmit+0x7a>
      return  HAL_ERROR;
 800c458:	2001      	movs	r0, #1
 800c45a:	e7e7      	b.n	800c42c <HAL_UART_Transmit+0x7a>

0800c45c <UART_CheckIdleState>:
{
 800c45c:	b573      	push	{r0, r1, r4, r5, r6, lr}
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c45e:	2600      	movs	r6, #0
{
 800c460:	4604      	mov	r4, r0
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c462:	f8c0 6090 	str.w	r6, [r0, #144]	@ 0x90
  tickstart = HAL_GetTick();
 800c466:	f7fa f907 	bl	8006678 <HAL_GetTick>
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c46a:	6823      	ldr	r3, [r4, #0]
  tickstart = HAL_GetTick();
 800c46c:	4605      	mov	r5, r0
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	071a      	lsls	r2, r3, #28
 800c472:	d51c      	bpl.n	800c4ae <UART_CheckIdleState+0x52>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c474:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c478:	4632      	mov	r2, r6
 800c47a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	4603      	mov	r3, r0
 800c482:	4620      	mov	r0, r4
 800c484:	f7ff ff4d 	bl	800c322 <UART_WaitOnFlagUntilTimeout>
 800c488:	b188      	cbz	r0, 800c4ae <UART_CheckIdleState+0x52>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800c48a:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c48c:	e852 3f00 	ldrex	r3, [r2]
 800c490:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c494:	e842 3100 	strex	r1, r3, [r2]
 800c498:	2900      	cmp	r1, #0
 800c49a:	d1f6      	bne.n	800c48a <UART_CheckIdleState+0x2e>
      huart->gState = HAL_UART_STATE_READY;
 800c49c:	2320      	movs	r3, #32
 800c49e:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
      return HAL_TIMEOUT;
 800c4a2:	2003      	movs	r0, #3
      __HAL_UNLOCK(huart);
 800c4a4:	2300      	movs	r3, #0
 800c4a6:	f884 3084 	strb.w	r3, [r4, #132]	@ 0x84
}
 800c4aa:	b002      	add	sp, #8
 800c4ac:	bd70      	pop	{r4, r5, r6, pc}
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 800c4ae:	6823      	ldr	r3, [r4, #0]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	075b      	lsls	r3, r3, #29
 800c4b4:	d524      	bpl.n	800c500 <UART_CheckIdleState+0xa4>
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800c4b6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 800c4ba:	2200      	movs	r2, #0
 800c4bc:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 800c4c0:	4620      	mov	r0, r4
 800c4c2:	9300      	str	r3, [sp, #0]
 800c4c4:	462b      	mov	r3, r5
 800c4c6:	f7ff ff2c 	bl	800c322 <UART_WaitOnFlagUntilTimeout>
 800c4ca:	b1c8      	cbz	r0, 800c500 <UART_CheckIdleState+0xa4>
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800c4cc:	6822      	ldr	r2, [r4, #0]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4ce:	e852 3f00 	ldrex	r3, [r2]
 800c4d2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4d6:	e842 3100 	strex	r1, r3, [r2]
   return(result);
 800c4da:	6822      	ldr	r2, [r4, #0]
 800c4dc:	2900      	cmp	r1, #0
 800c4de:	d1f5      	bne.n	800c4cc <UART_CheckIdleState+0x70>
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e0:	f102 0308 	add.w	r3, r2, #8
 800c4e4:	e853 3f00 	ldrex	r3, [r3]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4e8:	f023 0301 	bic.w	r3, r3, #1
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c4ec:	f102 0008 	add.w	r0, r2, #8
 800c4f0:	e840 3100 	strex	r1, r3, [r0]
 800c4f4:	2900      	cmp	r1, #0
 800c4f6:	d1f3      	bne.n	800c4e0 <UART_CheckIdleState+0x84>
      huart->RxState = HAL_UART_STATE_READY;
 800c4f8:	2320      	movs	r3, #32
 800c4fa:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
      return HAL_TIMEOUT;
 800c4fe:	e7d0      	b.n	800c4a2 <UART_CheckIdleState+0x46>
  huart->gState = HAL_UART_STATE_READY;
 800c500:	2320      	movs	r3, #32
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c502:	2000      	movs	r0, #0
  huart->gState = HAL_UART_STATE_READY;
 800c504:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 800c508:	f8c4 308c 	str.w	r3, [r4, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c50c:	66e0      	str	r0, [r4, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800c50e:	6720      	str	r0, [r4, #112]	@ 0x70
  return HAL_OK;
 800c510:	e7c8      	b.n	800c4a4 <UART_CheckIdleState+0x48>

0800c512 <HAL_UART_Init>:
{
 800c512:	b510      	push	{r4, lr}
  if (huart == NULL)
 800c514:	4604      	mov	r4, r0
 800c516:	b350      	cbz	r0, 800c56e <HAL_UART_Init+0x5c>
  if (huart->gState == HAL_UART_STATE_RESET)
 800c518:	f8d0 3088 	ldr.w	r3, [r0, #136]	@ 0x88
 800c51c:	b91b      	cbnz	r3, 800c526 <HAL_UART_Init+0x14>
    huart->Lock = HAL_UNLOCKED;
 800c51e:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
    HAL_UART_MspInit(huart);
 800c522:	f7f5 f90d 	bl	8001740 <HAL_UART_MspInit>
  huart->gState = HAL_UART_STATE_BUSY;
 800c526:	2324      	movs	r3, #36	@ 0x24
  __HAL_UART_DISABLE(huart);
 800c528:	6822      	ldr	r2, [r4, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c52a:	f8c4 3088 	str.w	r3, [r4, #136]	@ 0x88
  __HAL_UART_DISABLE(huart);
 800c52e:	6813      	ldr	r3, [r2, #0]
 800c530:	f023 0301 	bic.w	r3, r3, #1
 800c534:	6013      	str	r3, [r2, #0]
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c536:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 800c538:	b113      	cbz	r3, 800c540 <HAL_UART_Init+0x2e>
    UART_AdvFeatureConfig(huart);
 800c53a:	4620      	mov	r0, r4
 800c53c:	f7ff fe9c 	bl	800c278 <UART_AdvFeatureConfig>
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c540:	4620      	mov	r0, r4
 800c542:	f7ff fd03 	bl	800bf4c <UART_SetConfig>
 800c546:	2801      	cmp	r0, #1
 800c548:	d011      	beq.n	800c56e <HAL_UART_Init+0x5c>
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c54a:	6823      	ldr	r3, [r4, #0]
  return (UART_CheckIdleState(huart));
 800c54c:	4620      	mov	r0, r4
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c54e:	685a      	ldr	r2, [r3, #4]
 800c550:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800c554:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c556:	689a      	ldr	r2, [r3, #8]
 800c558:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800c55c:	609a      	str	r2, [r3, #8]
  __HAL_UART_ENABLE(huart);
 800c55e:	681a      	ldr	r2, [r3, #0]
 800c560:	f042 0201 	orr.w	r2, r2, #1
}
 800c564:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  __HAL_UART_ENABLE(huart);
 800c568:	601a      	str	r2, [r3, #0]
  return (UART_CheckIdleState(huart));
 800c56a:	f7ff bf77 	b.w	800c45c <UART_CheckIdleState>
}
 800c56e:	2001      	movs	r0, #1
 800c570:	bd10      	pop	{r4, pc}
	...

0800c574 <UARTEx_SetNbDataToProcess>:
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c574:	6e43      	ldr	r3, [r0, #100]	@ 0x64
{
 800c576:	b530      	push	{r4, r5, lr}
  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800c578:	b92b      	cbnz	r3, 800c586 <UARTEx_SetNbDataToProcess+0x12>
  {
    huart->NbTxDataToProcess = 1U;
 800c57a:	2301      	movs	r3, #1
 800c57c:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 800c580:	f8a0 3068 	strh.w	r3, [r0, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 800c584:	bd30      	pop	{r4, r5, pc}
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c586:	6803      	ldr	r3, [r0, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c588:	4d09      	ldr	r5, [pc, #36]	@ (800c5b0 <UARTEx_SetNbDataToProcess+0x3c>)
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800c58a:	689a      	ldr	r2, [r3, #8]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c58c:	6899      	ldr	r1, [r3, #8]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c58e:	4c09      	ldr	r4, [pc, #36]	@ (800c5b4 <UARTEx_SetNbDataToProcess+0x40>)
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c590:	f3c2 6242 	ubfx	r2, r2, #25, #3
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800c594:	0f49      	lsrs	r1, r1, #29
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c596:	5c6b      	ldrb	r3, [r5, r1]
                               (uint16_t)denominator[tx_fifo_threshold];
 800c598:	5c61      	ldrb	r1, [r4, r1]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800c59a:	011b      	lsls	r3, r3, #4
 800c59c:	fbb3 f3f1 	udiv	r3, r3, r1
 800c5a0:	f8a0 306a 	strh.w	r3, [r0, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5a4:	5cab      	ldrb	r3, [r5, r2]
                               (uint16_t)denominator[rx_fifo_threshold];
 800c5a6:	5ca2      	ldrb	r2, [r4, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800c5a8:	011b      	lsls	r3, r3, #4
 800c5aa:	fbb3 f3f2 	udiv	r3, r3, r2
}
 800c5ae:	e7e7      	b.n	800c580 <UARTEx_SetNbDataToProcess+0xc>
 800c5b0:	08025080 	.word	0x08025080
 800c5b4:	08025078 	.word	0x08025078

0800c5b8 <HAL_UARTEx_WakeupCallback>:
}
 800c5b8:	4770      	bx	lr

0800c5ba <HAL_UARTEx_RxFifoFullCallback>:
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
 800c5ba:	4770      	bx	lr

0800c5bc <HAL_UARTEx_TxFifoEmptyCallback>:
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
 800c5bc:	4770      	bx	lr

0800c5be <HAL_UARTEx_DisableFifoMode>:
  __HAL_LOCK(huart);
 800c5be:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 800c5c2:	2b01      	cmp	r3, #1
 800c5c4:	d014      	beq.n	800c5f0 <HAL_UARTEx_DisableFifoMode+0x32>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5c6:	6802      	ldr	r2, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c5c8:	2324      	movs	r3, #36	@ 0x24
 800c5ca:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c5ce:	6811      	ldr	r1, [r2, #0]
  __HAL_UART_DISABLE(huart);
 800c5d0:	6813      	ldr	r3, [r2, #0]
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 800c5d2:	f021 5100 	bic.w	r1, r1, #536870912	@ 0x20000000
  __HAL_UART_DISABLE(huart);
 800c5d6:	f023 0301 	bic.w	r3, r3, #1
 800c5da:	6013      	str	r3, [r2, #0]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800c5dc:	2300      	movs	r3, #0
 800c5de:	6643      	str	r3, [r0, #100]	@ 0x64
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c5e0:	6011      	str	r1, [r2, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c5e2:	2220      	movs	r2, #32
  __HAL_UNLOCK(huart);
 800c5e4:	f880 3084 	strb.w	r3, [r0, #132]	@ 0x84
  huart->gState = HAL_UART_STATE_READY;
 800c5e8:	f8c0 2088 	str.w	r2, [r0, #136]	@ 0x88
  return HAL_OK;
 800c5ec:	4618      	mov	r0, r3
 800c5ee:	4770      	bx	lr
  __HAL_LOCK(huart);
 800c5f0:	2002      	movs	r0, #2
}
 800c5f2:	4770      	bx	lr

0800c5f4 <HAL_UARTEx_SetTxFifoThreshold>:
{
 800c5f4:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c5f6:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c5fa:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c5fc:	2b01      	cmp	r3, #1
 800c5fe:	d017      	beq.n	800c630 <HAL_UARTEx_SetTxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c600:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c602:	2324      	movs	r3, #36	@ 0x24
 800c604:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c608:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c60a:	682b      	ldr	r3, [r5, #0]
 800c60c:	f023 0301 	bic.w	r3, r3, #1
 800c610:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800c612:	68ab      	ldr	r3, [r5, #8]
 800c614:	f023 4360 	bic.w	r3, r3, #3758096384	@ 0xe0000000
 800c618:	4319      	orrs	r1, r3
 800c61a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c61c:	f7ff ffaa 	bl	800c574 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c620:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c622:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c624:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c628:	2000      	movs	r0, #0
 800c62a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c62e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c630:	2002      	movs	r0, #2
 800c632:	e7fc      	b.n	800c62e <HAL_UARTEx_SetTxFifoThreshold+0x3a>

0800c634 <HAL_UARTEx_SetRxFifoThreshold>:
{
 800c634:	b570      	push	{r4, r5, r6, lr}
  __HAL_LOCK(huart);
 800c636:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
{
 800c63a:	4604      	mov	r4, r0
  __HAL_LOCK(huart);
 800c63c:	2b01      	cmp	r3, #1
 800c63e:	d017      	beq.n	800c670 <HAL_UARTEx_SetRxFifoThreshold+0x3c>
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c640:	6805      	ldr	r5, [r0, #0]
  huart->gState = HAL_UART_STATE_BUSY;
 800c642:	2324      	movs	r3, #36	@ 0x24
 800c644:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800c648:	682e      	ldr	r6, [r5, #0]
  __HAL_UART_DISABLE(huart);
 800c64a:	682b      	ldr	r3, [r5, #0]
 800c64c:	f023 0301 	bic.w	r3, r3, #1
 800c650:	602b      	str	r3, [r5, #0]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800c652:	68ab      	ldr	r3, [r5, #8]
 800c654:	f023 6360 	bic.w	r3, r3, #234881024	@ 0xe000000
 800c658:	4319      	orrs	r1, r3
 800c65a:	60a9      	str	r1, [r5, #8]
  UARTEx_SetNbDataToProcess(huart);
 800c65c:	f7ff ff8a 	bl	800c574 <UARTEx_SetNbDataToProcess>
  huart->gState = HAL_UART_STATE_READY;
 800c660:	2320      	movs	r3, #32
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800c662:	602e      	str	r6, [r5, #0]
  huart->gState = HAL_UART_STATE_READY;
 800c664:	f8c0 3088 	str.w	r3, [r0, #136]	@ 0x88
  __HAL_UNLOCK(huart);
 800c668:	2000      	movs	r0, #0
 800c66a:	f884 0084 	strb.w	r0, [r4, #132]	@ 0x84
}
 800c66e:	bd70      	pop	{r4, r5, r6, pc}
  __HAL_LOCK(huart);
 800c670:	2002      	movs	r0, #2
 800c672:	e7fc      	b.n	800c66e <HAL_UARTEx_SetRxFifoThreshold+0x3a>

0800c674 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 800c674:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c678:	e9d1 2c01 	ldrd	r2, ip, [r1, #4]
 800c67c:	e9d1 3807 	ldrd	r3, r8, [r1, #28]
 800c680:	f8d1 e024 	ldr.w	lr, [r1, #36]	@ 0x24
 800c684:	ea43 0308 	orr.w	r3, r3, r8
 800c688:	e9d1 7603 	ldrd	r7, r6, [r1, #12]
 800c68c:	e9d1 5405 	ldrd	r5, r4, [r1, #20]
  if (Init->SDBank == FMC_SDRAM_BANK1)
 800c690:	6809      	ldr	r1, [r1, #0]
 800c692:	b991      	cbnz	r1, 800c6ba <FMC_SDRAM_Init+0x46>
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c694:	ea43 030e 	orr.w	r3, r3, lr
 800c698:	6801      	ldr	r1, [r0, #0]
 800c69a:	4313      	orrs	r3, r2
 800c69c:	f421 41ff 	bic.w	r1, r1, #32640	@ 0x7f80
 800c6a0:	ea43 030c 	orr.w	r3, r3, ip
 800c6a4:	f021 017f 	bic.w	r1, r1, #127	@ 0x7f
 800c6a8:	433b      	orrs	r3, r7
 800c6aa:	4333      	orrs	r3, r6
 800c6ac:	432b      	orrs	r3, r5
 800c6ae:	4323      	orrs	r3, r4
 800c6b0:	430b      	orrs	r3, r1
 800c6b2:	6003      	str	r3, [r0, #0]
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
}
 800c6b4:	2000      	movs	r0, #0
 800c6b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 800c6ba:	6801      	ldr	r1, [r0, #0]
 800c6bc:	ea43 030e 	orr.w	r3, r3, lr
 800c6c0:	f421 41f8 	bic.w	r1, r1, #31744	@ 0x7c00
 800c6c4:	430b      	orrs	r3, r1
 800c6c6:	6003      	str	r3, [r0, #0]
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 800c6c8:	ea42 030c 	orr.w	r3, r2, ip
 800c6cc:	6841      	ldr	r1, [r0, #4]
 800c6ce:	433b      	orrs	r3, r7
 800c6d0:	f421 42ff 	bic.w	r2, r1, #32640	@ 0x7f80
 800c6d4:	4333      	orrs	r3, r6
 800c6d6:	f022 027f 	bic.w	r2, r2, #127	@ 0x7f
 800c6da:	432b      	orrs	r3, r5
 800c6dc:	4323      	orrs	r3, r4
 800c6de:	4313      	orrs	r3, r2
 800c6e0:	6043      	str	r3, [r0, #4]
 800c6e2:	e7e7      	b.n	800c6b4 <FMC_SDRAM_Init+0x40>

0800c6e4 <FMC_SDRAM_Timing_Init>:
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6e4:	68cb      	ldr	r3, [r1, #12]
 800c6e6:	f103 3cff 	add.w	ip, r3, #4294967295
 800c6ea:	694b      	ldr	r3, [r1, #20]
{
 800c6ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c6ee:	3b01      	subs	r3, #1
 800c6f0:	680f      	ldr	r7, [r1, #0]
 800c6f2:	684c      	ldr	r4, [r1, #4]
 800c6f4:	688e      	ldr	r6, [r1, #8]
 800c6f6:	051b      	lsls	r3, r3, #20
 800c6f8:	690d      	ldr	r5, [r1, #16]
 800c6fa:	3c01      	subs	r4, #1
 800c6fc:	6989      	ldr	r1, [r1, #24]
 800c6fe:	3e01      	subs	r6, #1
 800c700:	3d01      	subs	r5, #1
 800c702:	3f01      	subs	r7, #1
 800c704:	3901      	subs	r1, #1
 800c706:	0124      	lsls	r4, r4, #4
 800c708:	0236      	lsls	r6, r6, #8
 800c70a:	042d      	lsls	r5, r5, #16
 800c70c:	0609      	lsls	r1, r1, #24
 800c70e:	ea43 330c 	orr.w	r3, r3, ip, lsl #12
  if (Bank == FMC_SDRAM_BANK1)
 800c712:	b95a      	cbnz	r2, 800c72c <FMC_SDRAM_Timing_Init+0x48>
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c714:	433b      	orrs	r3, r7
 800c716:	6882      	ldr	r2, [r0, #8]
 800c718:	4323      	orrs	r3, r4
 800c71a:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c71e:	4333      	orrs	r3, r6
 800c720:	432b      	orrs	r3, r5
 800c722:	430b      	orrs	r3, r1
 800c724:	4313      	orrs	r3, r2
 800c726:	6083      	str	r3, [r0, #8]
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
}
 800c728:	2000      	movs	r0, #0
 800c72a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c72c:	6882      	ldr	r2, [r0, #8]
 800c72e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 800c732:	f422 4270 	bic.w	r2, r2, #61440	@ 0xf000
 800c736:	431a      	orrs	r2, r3
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c738:	ea44 0306 	orr.w	r3, r4, r6
 800c73c:	433b      	orrs	r3, r7
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 800c73e:	6082      	str	r2, [r0, #8]
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 800c740:	68c2      	ldr	r2, [r0, #12]
 800c742:	432b      	orrs	r3, r5
 800c744:	f002 4270 	and.w	r2, r2, #4026531840	@ 0xf0000000
 800c748:	430b      	orrs	r3, r1
 800c74a:	4313      	orrs	r3, r2
 800c74c:	60c3      	str	r3, [r0, #12]
 800c74e:	e7eb      	b.n	800c728 <FMC_SDRAM_Timing_Init+0x44>

0800c750 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 800c750:	4603      	mov	r3, r0
 800c752:	eb00 0281 	add.w	r2, r0, r1, lsl #2
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 800c756:	f44f 7034 	mov.w	r0, #720	@ 0x2d0
 800c75a:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
  Device->SDCMR      = 0x00000000U;
 800c75e:	2000      	movs	r0, #0
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 800c760:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 800c764:	6091      	str	r1, [r2, #8]
  Device->SDCMR      = 0x00000000U;
 800c766:	6118      	str	r0, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 800c768:	6158      	str	r0, [r3, #20]
  Device->SDSR       = 0x00000000U;
 800c76a:	6198      	str	r0, [r3, #24]

  return HAL_OK;
}
 800c76c:	4770      	bx	lr

0800c76e <FMC_SDRAM_SendCommand>:
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c76e:	6902      	ldr	r2, [r0, #16]
{
 800c770:	b510      	push	{r4, lr}
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 800c772:	e9d1 3400 	ldrd	r3, r4, [r1]
 800c776:	0d92      	lsrs	r2, r2, #22
 800c778:	4323      	orrs	r3, r4
 800c77a:	68cc      	ldr	r4, [r1, #12]
 800c77c:	0592      	lsls	r2, r2, #22
 800c77e:	ea43 2344 	orr.w	r3, r3, r4, lsl #9
 800c782:	4313      	orrs	r3, r2
 800c784:	688a      	ldr	r2, [r1, #8]
 800c786:	3a01      	subs	r2, #1
 800c788:	ea43 1342 	orr.w	r3, r3, r2, lsl #5
 800c78c:	6103      	str	r3, [r0, #16]
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
}
 800c78e:	2000      	movs	r0, #0
 800c790:	bd10      	pop	{r4, pc}

0800c792 <FMC_SDRAM_ProgramRefreshRate>:
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 800c792:	6943      	ldr	r3, [r0, #20]
 800c794:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 800c798:	f023 033e 	bic.w	r3, r3, #62	@ 0x3e
 800c79c:	ea43 0341 	orr.w	r3, r3, r1, lsl #1
 800c7a0:	6143      	str	r3, [r0, #20]

  return HAL_OK;
}
 800c7a2:	2000      	movs	r0, #0
 800c7a4:	4770      	bx	lr

0800c7a6 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800c7a6:	b508      	push	{r3, lr}
  /* Clear overflow flag */
  SysTick->CTRL;
 800c7a8:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800c7ac:	691b      	ldr	r3, [r3, #16]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800c7ae:	f001 feff 	bl	800e5b0 <xTaskGetSchedulerState>
 800c7b2:	2801      	cmp	r0, #1
 800c7b4:	d003      	beq.n	800c7be <SysTick_Handler+0x18>
    /* Call tick handler */
    xPortSysTickHandler();
  }
}
 800c7b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    xPortSysTickHandler();
 800c7ba:	f000 bc4b 	b.w	800d054 <xPortSysTickHandler>
}
 800c7be:	bd08      	pop	{r3, pc}

0800c7c0 <osKernelInitialize>:
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800c7c0:	f3ef 8305 	mrs	r3, IPSR
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7c4:	b92b      	cbnz	r3, 800c7d2 <osKernelInitialize+0x12>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelInactive) {
 800c7c6:	4b06      	ldr	r3, [pc, #24]	@ (800c7e0 <osKernelInitialize+0x20>)
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	b928      	cbnz	r0, 800c7d8 <osKernelInitialize+0x18>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800c7cc:	2201      	movs	r2, #1
 800c7ce:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800c7d0:	4770      	bx	lr
    stat = osErrorISR;
 800c7d2:	f06f 0005 	mvn.w	r0, #5
 800c7d6:	4770      	bx	lr
    } else {
      stat = osError;
 800c7d8:	f04f 30ff 	mov.w	r0, #4294967295
    }
  }

  return (stat);
}
 800c7dc:	4770      	bx	lr
 800c7de:	bf00      	nop
 800c7e0:	2400c668 	.word	0x2400c668

0800c7e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800c7e4:	b510      	push	{r4, lr}
 800c7e6:	f3ef 8405 	mrs	r4, IPSR
  osStatus_t stat;

  if (IS_IRQ()) {
 800c7ea:	b95c      	cbnz	r4, 800c804 <osKernelStart+0x20>
    stat = osErrorISR;
  }
  else {
    if (KernelState == osKernelReady) {
 800c7ec:	4b08      	ldr	r3, [pc, #32]	@ (800c810 <osKernelStart+0x2c>)
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	2a01      	cmp	r2, #1
 800c7f2:	d10a      	bne.n	800c80a <osKernelStart+0x26>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800c7f4:	4a07      	ldr	r2, [pc, #28]	@ (800c814 <osKernelStart+0x30>)
 800c7f6:	77d4      	strb	r4, [r2, #31]
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800c7f8:	2202      	movs	r2, #2
 800c7fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800c7fc:	f001 fd6e 	bl	800e2dc <vTaskStartScheduler>
      stat = osOK;
 800c800:	4620      	mov	r0, r4
      stat = osError;
    }
  }

  return (stat);
}
 800c802:	bd10      	pop	{r4, pc}
    stat = osErrorISR;
 800c804:	f06f 0005 	mvn.w	r0, #5
 800c808:	e7fb      	b.n	800c802 <osKernelStart+0x1e>
      stat = osError;
 800c80a:	f04f 30ff 	mov.w	r0, #4294967295
  return (stat);
 800c80e:	e7f8      	b.n	800c802 <osKernelStart+0x1e>
 800c810:	2400c668 	.word	0x2400c668
 800c814:	e000ed00 	.word	0xe000ed00

0800c818 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c818:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c81a:	4614      	mov	r4, r2
 800c81c:	b087      	sub	sp, #28
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800c81e:	2200      	movs	r2, #0
osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800c820:	460b      	mov	r3, r1
  hTask = NULL;
 800c822:	9205      	str	r2, [sp, #20]
 800c824:	f3ef 8205 	mrs	r2, IPSR

  if (!IS_IRQ() && (func != NULL)) {
 800c828:	b9ca      	cbnz	r2, 800c85e <osThreadNew+0x46>
 800c82a:	b1c0      	cbz	r0, 800c85e <osThreadNew+0x46>
    prio  = (UBaseType_t)osPriorityNormal;

    name = NULL;
    mem  = -1;

    if (attr != NULL) {
 800c82c:	b36c      	cbz	r4, 800c88a <osThreadNew+0x72>
      if (attr->name != NULL) {
        name = attr->name;
      }
      if (attr->priority != osPriorityNone) {
 800c82e:	69a5      	ldr	r5, [r4, #24]
 800c830:	2d00      	cmp	r5, #0
 800c832:	bf08      	it	eq
 800c834:	2518      	moveq	r5, #24
        prio = (UBaseType_t)attr->priority;
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800c836:	1e69      	subs	r1, r5, #1
 800c838:	46ac      	mov	ip, r5
 800c83a:	2937      	cmp	r1, #55	@ 0x37
 800c83c:	d82a      	bhi.n	800c894 <osThreadNew+0x7c>
 800c83e:	6861      	ldr	r1, [r4, #4]
 800c840:	07c9      	lsls	r1, r1, #31
 800c842:	d427      	bmi.n	800c894 <osThreadNew+0x7c>
        return (NULL);
      }

      if (attr->stack_size > 0U) {
 800c844:	6966      	ldr	r6, [r4, #20]
 800c846:	b16e      	cbz	r6, 800c864 <osThreadNew+0x4c>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800c848:	08b2      	lsrs	r2, r6, #2
      if (attr->name != NULL) {
 800c84a:	6821      	ldr	r1, [r4, #0]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c84c:	e9d4 7e02 	ldrd	r7, lr, [r4, #8]
 800c850:	b157      	cbz	r7, 800c868 <osThreadNew+0x50>
 800c852:	f1be 0fab 	cmp.w	lr, #171	@ 0xab
 800c856:	d902      	bls.n	800c85e <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c858:	6924      	ldr	r4, [r4, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800c85a:	b104      	cbz	r4, 800c85e <osThreadNew+0x46>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800c85c:	b9e6      	cbnz	r6, 800c898 <osThreadNew+0x80>
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800c85e:	9805      	ldr	r0, [sp, #20]
}
 800c860:	b007      	add	sp, #28
 800c862:	bdf0      	pop	{r4, r5, r6, r7, pc}
    stack = configMINIMAL_STACK_SIZE;
 800c864:	2280      	movs	r2, #128	@ 0x80
 800c866:	e7f0      	b.n	800c84a <osThreadNew+0x32>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800c868:	f1be 0f00 	cmp.w	lr, #0
 800c86c:	d1f7      	bne.n	800c85e <osThreadNew+0x46>
      if (mem == 0) {
 800c86e:	6924      	ldr	r4, [r4, #16]
 800c870:	2c00      	cmp	r4, #0
 800c872:	d1f4      	bne.n	800c85e <osThreadNew+0x46>
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800c874:	ac05      	add	r4, sp, #20
 800c876:	b292      	uxth	r2, r2
 800c878:	e9cd c400 	strd	ip, r4, [sp]
 800c87c:	f001 fbcc 	bl	800e018 <xTaskCreate>
 800c880:	2801      	cmp	r0, #1
            hTask = NULL;
 800c882:	bf1c      	itt	ne
 800c884:	2300      	movne	r3, #0
 800c886:	9305      	strne	r3, [sp, #20]
 800c888:	e7e9      	b.n	800c85e <osThreadNew+0x46>
    name = NULL;
 800c88a:	4621      	mov	r1, r4
    prio  = (UBaseType_t)osPriorityNormal;
 800c88c:	f04f 0c18 	mov.w	ip, #24
    stack = configMINIMAL_STACK_SIZE;
 800c890:	2280      	movs	r2, #128	@ 0x80
 800c892:	e7ef      	b.n	800c874 <osThreadNew+0x5c>
        return (NULL);
 800c894:	4610      	mov	r0, r2
 800c896:	e7e3      	b.n	800c860 <osThreadNew+0x48>
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800c898:	e9cd 4701 	strd	r4, r7, [sp, #4]
 800c89c:	9500      	str	r5, [sp, #0]
 800c89e:	f001 fb83 	bl	800dfa8 <xTaskCreateStatic>
 800c8a2:	9005      	str	r0, [sp, #20]
 800c8a4:	e7db      	b.n	800c85e <osThreadNew+0x46>

0800c8a6 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 800c8a6:	b570      	push	{r4, r5, r6, lr}
 800c8a8:	4605      	mov	r5, r0
 800c8aa:	f3ef 8605 	mrs	r6, IPSR
  const char *name;
  #endif

  hMutex = NULL;

  if (!IS_IRQ()) {
 800c8ae:	b116      	cbz	r6, 800c8b6 <osMutexNew+0x10>
  hMutex = NULL;
 800c8b0:	2400      	movs	r4, #0
      }
    }
  }

  return ((osMutexId_t)hMutex);
}
 800c8b2:	4620      	mov	r0, r4
 800c8b4:	bd70      	pop	{r4, r5, r6, pc}
    if (attr != NULL) {
 800c8b6:	b110      	cbz	r0, 800c8be <osMutexNew+0x18>
      type = attr->attr_bits;
 800c8b8:	6846      	ldr	r6, [r0, #4]
    if ((type & osMutexRobust) != osMutexRobust) {
 800c8ba:	0733      	lsls	r3, r6, #28
 800c8bc:	d4f8      	bmi.n	800c8b0 <osMutexNew+0xa>
    if ((type & osMutexRecursive) == osMutexRecursive) {
 800c8be:	f006 0601 	and.w	r6, r6, #1
      if (attr != NULL) {
 800c8c2:	b17d      	cbz	r5, 800c8e4 <osMutexNew+0x3e>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c8c4:	e9d5 1302 	ldrd	r1, r3, [r5, #8]
 800c8c8:	b151      	cbz	r1, 800c8e0 <osMutexNew+0x3a>
 800c8ca:	2b4f      	cmp	r3, #79	@ 0x4f
 800c8cc:	d9f0      	bls.n	800c8b0 <osMutexNew+0xa>
          if (rmtx != 0U) {
 800c8ce:	b1de      	cbz	r6, 800c908 <osMutexNew+0x62>
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 800c8d0:	2004      	movs	r0, #4
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c8d2:	f000 fec8 	bl	800d666 <xQueueCreateMutexStatic>
 800c8d6:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c8d8:	2800      	cmp	r0, #0
 800c8da:	d0e9      	beq.n	800c8b0 <osMutexNew+0xa>
          name = attr->name;
 800c8dc:	682d      	ldr	r5, [r5, #0]
 800c8de:	e00a      	b.n	800c8f6 <osMutexNew+0x50>
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c8e0:	2b00      	cmp	r3, #0
 800c8e2:	d1e5      	bne.n	800c8b0 <osMutexNew+0xa>
            if (rmtx != 0U) {
 800c8e4:	b196      	cbz	r6, 800c90c <osMutexNew+0x66>
              hMutex = xSemaphoreCreateRecursiveMutex ();
 800c8e6:	2004      	movs	r0, #4
              hMutex = xSemaphoreCreateMutex ();
 800c8e8:	f000 fef1 	bl	800d6ce <xQueueCreateMutex>
 800c8ec:	4604      	mov	r4, r0
      if (hMutex != NULL) {
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d0de      	beq.n	800c8b0 <osMutexNew+0xa>
        if (attr != NULL) {
 800c8f2:	2d00      	cmp	r5, #0
 800c8f4:	d1f2      	bne.n	800c8dc <osMutexNew+0x36>
        vQueueAddToRegistry (hMutex, name);
 800c8f6:	4629      	mov	r1, r5
 800c8f8:	4620      	mov	r0, r4
 800c8fa:	f001 f97d 	bl	800dbf8 <vQueueAddToRegistry>
      if ((hMutex != NULL) && (rmtx != 0U)) {
 800c8fe:	2e00      	cmp	r6, #0
 800c900:	d0d7      	beq.n	800c8b2 <osMutexNew+0xc>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 800c902:	f044 0401 	orr.w	r4, r4, #1
  return ((osMutexId_t)hMutex);
 800c906:	e7d4      	b.n	800c8b2 <osMutexNew+0xc>
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 800c908:	2001      	movs	r0, #1
 800c90a:	e7e2      	b.n	800c8d2 <osMutexNew+0x2c>
              hMutex = xSemaphoreCreateMutex ();
 800c90c:	2001      	movs	r0, #1
 800c90e:	e7eb      	b.n	800c8e8 <osMutexNew+0x42>

0800c910 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 800c910:	b538      	push	{r3, r4, r5, lr}
 800c912:	4603      	mov	r3, r0
 800c914:	460c      	mov	r4, r1
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c916:	f020 0001 	bic.w	r0, r0, #1

  rmtx = (uint32_t)mutex_id & 1U;
 800c91a:	f003 0201 	and.w	r2, r3, #1
 800c91e:	f3ef 8505 	mrs	r5, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c922:	b995      	cbnz	r5, 800c94a <osMutexAcquire+0x3a>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c924:	2b01      	cmp	r3, #1
 800c926:	d913      	bls.n	800c950 <osMutexAcquire+0x40>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c928:	b162      	cbz	r2, 800c944 <osMutexAcquire+0x34>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 800c92a:	f001 f8f6 	bl	800db1a <xQueueTakeMutexRecursive>
 800c92e:	2801      	cmp	r0, #1
 800c930:	d101      	bne.n	800c936 <osMutexAcquire+0x26>
  stat = osOK;
 800c932:	2000      	movs	r0, #0
      }
    }
  }

  return (stat);
}
 800c934:	bd38      	pop	{r3, r4, r5, pc}
          stat = osErrorResource;
 800c936:	2c00      	cmp	r4, #0
 800c938:	bf14      	ite	ne
 800c93a:	f06f 0001 	mvnne.w	r0, #1
 800c93e:	f06f 0002 	mvneq.w	r0, #2
 800c942:	e7f7      	b.n	800c934 <osMutexAcquire+0x24>
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 800c944:	f001 f82c 	bl	800d9a0 <xQueueSemaphoreTake>
 800c948:	e7f1      	b.n	800c92e <osMutexAcquire+0x1e>
    stat = osErrorISR;
 800c94a:	f06f 0005 	mvn.w	r0, #5
 800c94e:	e7f1      	b.n	800c934 <osMutexAcquire+0x24>
    stat = osErrorParameter;
 800c950:	f06f 0003 	mvn.w	r0, #3
 800c954:	e7ee      	b.n	800c934 <osMutexAcquire+0x24>

0800c956 <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c956:	4602      	mov	r2, r0
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 800c958:	f020 0001 	bic.w	r0, r0, #1
osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 800c95c:	b508      	push	{r3, lr}

  rmtx = (uint32_t)mutex_id & 1U;
 800c95e:	f002 0301 	and.w	r3, r2, #1
 800c962:	f3ef 8105 	mrs	r1, IPSR

  stat = osOK;

  if (IS_IRQ()) {
 800c966:	b979      	cbnz	r1, 800c988 <osMutexRelease+0x32>
    stat = osErrorISR;
  }
  else if (hMutex == NULL) {
 800c968:	2a01      	cmp	r2, #1
 800c96a:	d910      	bls.n	800c98e <osMutexRelease+0x38>
    stat = osErrorParameter;
  }
  else {
    if (rmtx != 0U) {
 800c96c:	b13b      	cbz	r3, 800c97e <osMutexRelease+0x28>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 800c96e:	f000 fe8f 	bl	800d690 <xQueueGiveMutexRecursive>
 800c972:	2801      	cmp	r0, #1
  stat = osOK;
 800c974:	bf0c      	ite	eq
 800c976:	2000      	moveq	r0, #0
        stat = osErrorResource;
 800c978:	f06f 0002 	mvnne.w	r0, #2
      }
    }
  }

  return (stat);
}
 800c97c:	bd08      	pop	{r3, pc}
      if (xSemaphoreGive (hMutex) != pdPASS) {
 800c97e:	461a      	mov	r2, r3
 800c980:	4619      	mov	r1, r3
 800c982:	f000 fdbe 	bl	800d502 <xQueueGenericSend>
 800c986:	e7f4      	b.n	800c972 <osMutexRelease+0x1c>
    stat = osErrorISR;
 800c988:	f06f 0005 	mvn.w	r0, #5
 800c98c:	e7f6      	b.n	800c97c <osMutexRelease+0x26>
    stat = osErrorParameter;
 800c98e:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800c992:	e7f3      	b.n	800c97c <osMutexRelease+0x26>

0800c994 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 800c994:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800c996:	4604      	mov	r4, r0
 800c998:	460e      	mov	r6, r1
 800c99a:	4615      	mov	r5, r2
 800c99c:	f3ef 8205 	mrs	r2, IPSR
  const char *name;
  #endif

  hSemaphore = NULL;

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 800c9a0:	b942      	cbnz	r2, 800c9b4 <osSemaphoreNew+0x20>
 800c9a2:	b138      	cbz	r0, 800c9b4 <osSemaphoreNew+0x20>
 800c9a4:	4288      	cmp	r0, r1
 800c9a6:	d305      	bcc.n	800c9b4 <osSemaphoreNew+0x20>
    mem = -1;

    if (attr != NULL) {
 800c9a8:	b155      	cbz	r5, 800c9c0 <osSemaphoreNew+0x2c>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 800c9aa:	e9d5 3702 	ldrd	r3, r7, [r5, #8]
 800c9ae:	b12b      	cbz	r3, 800c9bc <osSemaphoreNew+0x28>
 800c9b0:	2f4f      	cmp	r7, #79	@ 0x4f
 800c9b2:	d822      	bhi.n	800c9fa <osSemaphoreNew+0x66>
  hSemaphore = NULL;
 800c9b4:	2400      	movs	r4, #0
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
}
 800c9b6:	4620      	mov	r0, r4
 800c9b8:	b003      	add	sp, #12
 800c9ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 800c9bc:	2f00      	cmp	r7, #0
 800c9be:	d1f9      	bne.n	800c9b4 <osSemaphoreNew+0x20>
      if (max_count == 1U) {
 800c9c0:	2c01      	cmp	r4, #1
 800c9c2:	d00c      	beq.n	800c9de <osSemaphoreNew+0x4a>
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 800c9c4:	4620      	mov	r0, r4
 800c9c6:	4631      	mov	r1, r6
 800c9c8:	f000 fd7d 	bl	800d4c6 <xQueueCreateCountingSemaphore>
      if (hSemaphore != NULL) {
 800c9cc:	4604      	mov	r4, r0
 800c9ce:	2800      	cmp	r0, #0
 800c9d0:	d0f0      	beq.n	800c9b4 <osSemaphoreNew+0x20>
        if (attr != NULL) {
 800c9d2:	b985      	cbnz	r5, 800c9f6 <osSemaphoreNew+0x62>
        vQueueAddToRegistry (hSemaphore, name);
 800c9d4:	4629      	mov	r1, r5
 800c9d6:	4620      	mov	r0, r4
 800c9d8:	f001 f90e 	bl	800dbf8 <vQueueAddToRegistry>
  return ((osSemaphoreId_t)hSemaphore);
 800c9dc:	e7eb      	b.n	800c9b6 <osSemaphoreNew+0x22>
            hSemaphore = xSemaphoreCreateBinary();
 800c9de:	2203      	movs	r2, #3
 800c9e0:	2100      	movs	r1, #0
 800c9e2:	2001      	movs	r0, #1
 800c9e4:	f000 fd26 	bl	800d434 <xQueueGenericCreate>
 800c9e8:	e00e      	b.n	800ca08 <osSemaphoreNew+0x74>
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 800c9ea:	461a      	mov	r2, r3
 800c9ec:	f000 fd49 	bl	800d482 <xQueueCreateCountingSemaphoreStatic>
      if (hSemaphore != NULL) {
 800c9f0:	4604      	mov	r4, r0
 800c9f2:	2800      	cmp	r0, #0
 800c9f4:	d0de      	beq.n	800c9b4 <osSemaphoreNew+0x20>
          name = attr->name;
 800c9f6:	682d      	ldr	r5, [r5, #0]
 800c9f8:	e7ec      	b.n	800c9d4 <osSemaphoreNew+0x40>
      if (max_count == 1U) {
 800c9fa:	2801      	cmp	r0, #1
 800c9fc:	d1f5      	bne.n	800c9ea <osSemaphoreNew+0x56>
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 800c9fe:	2103      	movs	r1, #3
 800ca00:	9100      	str	r1, [sp, #0]
 800ca02:	4611      	mov	r1, r2
 800ca04:	f000 fcc8 	bl	800d398 <xQueueGenericCreateStatic>
            hSemaphore = xSemaphoreCreateBinary();
 800ca08:	4604      	mov	r4, r0
        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 800ca0a:	2800      	cmp	r0, #0
 800ca0c:	d0d2      	beq.n	800c9b4 <osSemaphoreNew+0x20>
 800ca0e:	2e00      	cmp	r6, #0
 800ca10:	d0df      	beq.n	800c9d2 <osSemaphoreNew+0x3e>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800ca12:	2300      	movs	r3, #0
 800ca14:	461a      	mov	r2, r3
 800ca16:	4619      	mov	r1, r3
 800ca18:	f000 fd73 	bl	800d502 <xQueueGenericSend>
 800ca1c:	2801      	cmp	r0, #1
 800ca1e:	d0d8      	beq.n	800c9d2 <osSemaphoreNew+0x3e>
            vSemaphoreDelete (hSemaphore);
 800ca20:	4620      	mov	r0, r4
 800ca22:	f001 f913 	bl	800dc4c <vQueueDelete>
      if (hSemaphore != NULL) {
 800ca26:	e7c5      	b.n	800c9b4 <osSemaphoreNew+0x20>

0800ca28 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 800ca28:	b513      	push	{r0, r1, r4, lr}
 800ca2a:	460c      	mov	r4, r1
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ca2c:	b328      	cbz	r0, 800ca7a <osSemaphoreAcquire+0x52>
 800ca2e:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ca32:	b1cb      	cbz	r3, 800ca68 <osSemaphoreAcquire+0x40>
    if (timeout != 0U) {
 800ca34:	bb09      	cbnz	r1, 800ca7a <osSemaphoreAcquire+0x52>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ca36:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800ca38:	9101      	str	r1, [sp, #4]
      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 800ca3a:	f001 f88f 	bl	800db5c <xQueueReceiveFromISR>
 800ca3e:	2801      	cmp	r0, #1
 800ca40:	d003      	beq.n	800ca4a <osSemaphoreAcquire+0x22>
        stat = osErrorResource;
 800ca42:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800ca46:	b002      	add	sp, #8
 800ca48:	bd10      	pop	{r4, pc}
        portYIELD_FROM_ISR (yield);
 800ca4a:	9b01      	ldr	r3, [sp, #4]
 800ca4c:	b90b      	cbnz	r3, 800ca52 <osSemaphoreAcquire+0x2a>
  stat = osOK;
 800ca4e:	2000      	movs	r0, #0
 800ca50:	e7f9      	b.n	800ca46 <osSemaphoreAcquire+0x1e>
        portYIELD_FROM_ISR (yield);
 800ca52:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ca56:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ca5a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ca5e:	f3bf 8f4f 	dsb	sy
 800ca62:	f3bf 8f6f 	isb	sy
 800ca66:	e7f2      	b.n	800ca4e <osSemaphoreAcquire+0x26>
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 800ca68:	f000 ff9a 	bl	800d9a0 <xQueueSemaphoreTake>
 800ca6c:	2801      	cmp	r0, #1
 800ca6e:	d0ee      	beq.n	800ca4e <osSemaphoreAcquire+0x26>
      if (timeout != 0U) {
 800ca70:	2c00      	cmp	r4, #0
 800ca72:	d0e6      	beq.n	800ca42 <osSemaphoreAcquire+0x1a>
        stat = osErrorTimeout;
 800ca74:	f06f 0001 	mvn.w	r0, #1
 800ca78:	e7e5      	b.n	800ca46 <osSemaphoreAcquire+0x1e>
    stat = osErrorParameter;
 800ca7a:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800ca7e:	e7e2      	b.n	800ca46 <osSemaphoreAcquire+0x1e>

0800ca80 <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 800ca80:	b507      	push	{r0, r1, r2, lr}
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;

  if (hSemaphore == NULL) {
 800ca82:	b318      	cbz	r0, 800cacc <osSemaphoreRelease+0x4c>
 800ca84:	f3ef 8305 	mrs	r3, IPSR
    stat = osErrorParameter;
  }
  else if (IS_IRQ()) {
 800ca88:	b1cb      	cbz	r3, 800cabe <osSemaphoreRelease+0x3e>
    yield = pdFALSE;
 800ca8a:	2300      	movs	r3, #0

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca8c:	a901      	add	r1, sp, #4
    yield = pdFALSE;
 800ca8e:	9301      	str	r3, [sp, #4]
    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 800ca90:	f000 fe97 	bl	800d7c2 <xQueueGiveFromISR>
 800ca94:	2801      	cmp	r0, #1
 800ca96:	d004      	beq.n	800caa2 <osSemaphoreRelease+0x22>
      portYIELD_FROM_ISR (yield);
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
      stat = osErrorResource;
 800ca98:	f06f 0002 	mvn.w	r0, #2
    }
  }

  return (stat);
}
 800ca9c:	b003      	add	sp, #12
 800ca9e:	f85d fb04 	ldr.w	pc, [sp], #4
      portYIELD_FROM_ISR (yield);
 800caa2:	9b01      	ldr	r3, [sp, #4]
 800caa4:	b14b      	cbz	r3, 800caba <osSemaphoreRelease+0x3a>
 800caa6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800caaa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800caae:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cab2:	f3bf 8f4f 	dsb	sy
 800cab6:	f3bf 8f6f 	isb	sy
  stat = osOK;
 800caba:	2000      	movs	r0, #0
 800cabc:	e7ee      	b.n	800ca9c <osSemaphoreRelease+0x1c>
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 800cabe:	461a      	mov	r2, r3
 800cac0:	4619      	mov	r1, r3
 800cac2:	f000 fd1e 	bl	800d502 <xQueueGenericSend>
 800cac6:	2801      	cmp	r0, #1
 800cac8:	d0f7      	beq.n	800caba <osSemaphoreRelease+0x3a>
 800caca:	e7e5      	b.n	800ca98 <osSemaphoreRelease+0x18>
    stat = osErrorParameter;
 800cacc:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cad0:	e7e4      	b.n	800ca9c <osSemaphoreRelease+0x1c>

0800cad2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800cad2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cad4:	4605      	mov	r5, r0
 800cad6:	460e      	mov	r6, r1
 800cad8:	4614      	mov	r4, r2
 800cada:	f3ef 8705 	mrs	r7, IPSR
  const char *name;
  #endif

  hQueue = NULL;

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cade:	b11f      	cbz	r7, 800cae8 <osMessageQueueNew+0x16>
  hQueue = NULL;
 800cae0:	2500      	movs	r5, #0
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
}
 800cae2:	4628      	mov	r0, r5
 800cae4:	b003      	add	sp, #12
 800cae6:	bdf0      	pop	{r4, r5, r6, r7, pc}
  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800cae8:	2800      	cmp	r0, #0
 800caea:	d0f9      	beq.n	800cae0 <osMessageQueueNew+0xe>
 800caec:	2900      	cmp	r1, #0
 800caee:	d0f7      	beq.n	800cae0 <osMessageQueueNew+0xe>
    if (attr != NULL) {
 800caf0:	b1da      	cbz	r2, 800cb2a <osMessageQueueNew+0x58>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800caf2:	e9d2 3202 	ldrd	r3, r2, [r2, #8]
 800caf6:	b183      	cbz	r3, 800cb1a <osMessageQueueNew+0x48>
 800caf8:	2a4f      	cmp	r2, #79	@ 0x4f
 800cafa:	d9f1      	bls.n	800cae0 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cafc:	6922      	ldr	r2, [r4, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800cafe:	2a00      	cmp	r2, #0
 800cb00:	d0ee      	beq.n	800cae0 <osMessageQueueNew+0xe>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800cb02:	434d      	muls	r5, r1
 800cb04:	6966      	ldr	r6, [r4, #20]
 800cb06:	42ae      	cmp	r6, r5
 800cb08:	d3ea      	bcc.n	800cae0 <osMessageQueueNew+0xe>
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 800cb0a:	9700      	str	r7, [sp, #0]
 800cb0c:	f000 fc44 	bl	800d398 <xQueueGenericCreateStatic>
    if (hQueue != NULL) {
 800cb10:	4605      	mov	r5, r0
 800cb12:	2800      	cmp	r0, #0
 800cb14:	d0e4      	beq.n	800cae0 <osMessageQueueNew+0xe>
        name = attr->name;
 800cb16:	6824      	ldr	r4, [r4, #0]
 800cb18:	e011      	b.n	800cb3e <osMessageQueueNew+0x6c>
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 800cb1a:	2a00      	cmp	r2, #0
 800cb1c:	d1e0      	bne.n	800cae0 <osMessageQueueNew+0xe>
 800cb1e:	6923      	ldr	r3, [r4, #16]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d1dd      	bne.n	800cae0 <osMessageQueueNew+0xe>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800cb24:	6963      	ldr	r3, [r4, #20]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d1da      	bne.n	800cae0 <osMessageQueueNew+0xe>
          hQueue = xQueueCreate (msg_count, msg_size);
 800cb2a:	4628      	mov	r0, r5
 800cb2c:	2200      	movs	r2, #0
 800cb2e:	4631      	mov	r1, r6
 800cb30:	f000 fc80 	bl	800d434 <xQueueGenericCreate>
    if (hQueue != NULL) {
 800cb34:	4605      	mov	r5, r0
 800cb36:	2800      	cmp	r0, #0
 800cb38:	d0d2      	beq.n	800cae0 <osMessageQueueNew+0xe>
      if (attr != NULL) {
 800cb3a:	2c00      	cmp	r4, #0
 800cb3c:	d1eb      	bne.n	800cb16 <osMessageQueueNew+0x44>
      vQueueAddToRegistry (hQueue, name);
 800cb3e:	4621      	mov	r1, r4
 800cb40:	4628      	mov	r0, r5
 800cb42:	f001 f859 	bl	800dbf8 <vQueueAddToRegistry>
  return ((osMessageQueueId_t)hQueue);
 800cb46:	e7cc      	b.n	800cae2 <osMessageQueueNew+0x10>

0800cb48 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 800cb48:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cb4a:	461c      	mov	r4, r3
 800cb4c:	f3ef 8605 	mrs	r6, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cb50:	b1de      	cbz	r6, 800cb8a <osMessageQueuePut+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cb52:	b338      	cbz	r0, 800cba4 <osMessageQueuePut+0x5c>
 800cb54:	b331      	cbz	r1, 800cba4 <osMessageQueuePut+0x5c>
 800cb56:	bb2b      	cbnz	r3, 800cba4 <osMessageQueuePut+0x5c>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb58:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cb5a:	9301      	str	r3, [sp, #4]
      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 800cb5c:	f000 fdd4 	bl	800d708 <xQueueGenericSendFromISR>
 800cb60:	2801      	cmp	r0, #1
 800cb62:	d003      	beq.n	800cb6c <osMessageQueuePut+0x24>
        stat = osErrorResource;
 800cb64:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cb68:	b002      	add	sp, #8
 800cb6a:	bd70      	pop	{r4, r5, r6, pc}
        portYIELD_FROM_ISR (yield);
 800cb6c:	9b01      	ldr	r3, [sp, #4]
 800cb6e:	b90b      	cbnz	r3, 800cb74 <osMessageQueuePut+0x2c>
  stat = osOK;
 800cb70:	2000      	movs	r0, #0
 800cb72:	e7f9      	b.n	800cb68 <osMessageQueuePut+0x20>
        portYIELD_FROM_ISR (yield);
 800cb74:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cb78:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cb7c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cb80:	f3bf 8f4f 	dsb	sy
 800cb84:	f3bf 8f6f 	isb	sy
 800cb88:	e7f2      	b.n	800cb70 <osMessageQueuePut+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cb8a:	b158      	cbz	r0, 800cba4 <osMessageQueuePut+0x5c>
 800cb8c:	b151      	cbz	r1, 800cba4 <osMessageQueuePut+0x5c>
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cb8e:	4633      	mov	r3, r6
 800cb90:	4622      	mov	r2, r4
 800cb92:	f000 fcb6 	bl	800d502 <xQueueGenericSend>
 800cb96:	2801      	cmp	r0, #1
 800cb98:	d0ea      	beq.n	800cb70 <osMessageQueuePut+0x28>
        if (timeout != 0U) {
 800cb9a:	2c00      	cmp	r4, #0
 800cb9c:	d0e2      	beq.n	800cb64 <osMessageQueuePut+0x1c>
          stat = osErrorTimeout;
 800cb9e:	f06f 0001 	mvn.w	r0, #1
 800cba2:	e7e1      	b.n	800cb68 <osMessageQueuePut+0x20>
      stat = osErrorParameter;
 800cba4:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cba8:	e7de      	b.n	800cb68 <osMessageQueuePut+0x20>

0800cbaa <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 800cbaa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbac:	461c      	mov	r4, r3
 800cbae:	f3ef 8305 	mrs	r3, IPSR

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;

  if (IS_IRQ()) {
 800cbb2:	b1db      	cbz	r3, 800cbec <osMessageQueueGet+0x42>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 800cbb4:	b330      	cbz	r0, 800cc04 <osMessageQueueGet+0x5a>
 800cbb6:	b329      	cbz	r1, 800cc04 <osMessageQueueGet+0x5a>
 800cbb8:	bb24      	cbnz	r4, 800cc04 <osMessageQueueGet+0x5a>
      stat = osErrorParameter;
    }
    else {
      yield = pdFALSE;

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbba:	aa01      	add	r2, sp, #4
      yield = pdFALSE;
 800cbbc:	9401      	str	r4, [sp, #4]
      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 800cbbe:	f000 ffcd 	bl	800db5c <xQueueReceiveFromISR>
 800cbc2:	2801      	cmp	r0, #1
 800cbc4:	d003      	beq.n	800cbce <osMessageQueueGet+0x24>
        stat = osErrorResource;
 800cbc6:	f06f 0002 	mvn.w	r0, #2
      }
    }
  }

  return (stat);
}
 800cbca:	b003      	add	sp, #12
 800cbcc:	bd30      	pop	{r4, r5, pc}
        portYIELD_FROM_ISR (yield);
 800cbce:	9b01      	ldr	r3, [sp, #4]
 800cbd0:	b90b      	cbnz	r3, 800cbd6 <osMessageQueueGet+0x2c>
  stat = osOK;
 800cbd2:	2000      	movs	r0, #0
 800cbd4:	e7f9      	b.n	800cbca <osMessageQueueGet+0x20>
        portYIELD_FROM_ISR (yield);
 800cbd6:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cbda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800cbde:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800cbe2:	f3bf 8f4f 	dsb	sy
 800cbe6:	f3bf 8f6f 	isb	sy
 800cbea:	e7f2      	b.n	800cbd2 <osMessageQueueGet+0x28>
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 800cbec:	b150      	cbz	r0, 800cc04 <osMessageQueueGet+0x5a>
 800cbee:	b149      	cbz	r1, 800cc04 <osMessageQueueGet+0x5a>
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800cbf0:	4622      	mov	r2, r4
 800cbf2:	f000 fe37 	bl	800d864 <xQueueReceive>
 800cbf6:	2801      	cmp	r0, #1
 800cbf8:	d0eb      	beq.n	800cbd2 <osMessageQueueGet+0x28>
        if (timeout != 0U) {
 800cbfa:	2c00      	cmp	r4, #0
 800cbfc:	d0e3      	beq.n	800cbc6 <osMessageQueueGet+0x1c>
          stat = osErrorTimeout;
 800cbfe:	f06f 0001 	mvn.w	r0, #1
 800cc02:	e7e2      	b.n	800cbca <osMessageQueueGet+0x20>
      stat = osErrorParameter;
 800cc04:	f06f 0003 	mvn.w	r0, #3
  return (stat);
 800cc08:	e7df      	b.n	800cbca <osMessageQueueGet+0x20>
	...

0800cc0c <vApplicationGetIdleTaskMemory>:
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800cc0c:	4b03      	ldr	r3, [pc, #12]	@ (800cc1c <vApplicationGetIdleTaskMemory+0x10>)
 800cc0e:	6003      	str	r3, [r0, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800cc10:	4b03      	ldr	r3, [pc, #12]	@ (800cc20 <vApplicationGetIdleTaskMemory+0x14>)
 800cc12:	600b      	str	r3, [r1, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800cc14:	2380      	movs	r3, #128	@ 0x80
 800cc16:	6013      	str	r3, [r2, #0]
}
 800cc18:	4770      	bx	lr
 800cc1a:	bf00      	nop
 800cc1c:	2400c5bc 	.word	0x2400c5bc
 800cc20:	2400c3bc 	.word	0x2400c3bc

0800cc24 <vApplicationGetTimerTaskMemory>:
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800cc24:	4b03      	ldr	r3, [pc, #12]	@ (800cc34 <vApplicationGetTimerTaskMemory+0x10>)
 800cc26:	6003      	str	r3, [r0, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800cc28:	4b03      	ldr	r3, [pc, #12]	@ (800cc38 <vApplicationGetTimerTaskMemory+0x14>)
 800cc2a:	600b      	str	r3, [r1, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800cc2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800cc30:	6013      	str	r3, [r2, #0]
}
 800cc32:	4770      	bx	lr
 800cc34:	2400c310 	.word	0x2400c310
 800cc38:	2400bf10 	.word	0x2400bf10

0800cc3c <prvInsertBlockIntoFreeList>:
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc3c:	4b10      	ldr	r3, [pc, #64]	@ (800cc80 <prvInsertBlockIntoFreeList+0x44>)
{
 800cc3e:	b510      	push	{r4, lr}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc40:	461a      	mov	r2, r3
 800cc42:	681b      	ldr	r3, [r3, #0]
 800cc44:	4283      	cmp	r3, r0
 800cc46:	d3fb      	bcc.n	800cc40 <prvInsertBlockIntoFreeList+0x4>
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cc48:	6854      	ldr	r4, [r2, #4]
 800cc4a:	1911      	adds	r1, r2, r4
 800cc4c:	4288      	cmp	r0, r1
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cc4e:	bf01      	itttt	eq
 800cc50:	6841      	ldreq	r1, [r0, #4]
 800cc52:	4610      	moveq	r0, r2
 800cc54:	1909      	addeq	r1, r1, r4
 800cc56:	6051      	streq	r1, [r2, #4]
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cc58:	6844      	ldr	r4, [r0, #4]
 800cc5a:	1901      	adds	r1, r0, r4
 800cc5c:	428b      	cmp	r3, r1
 800cc5e:	d10c      	bne.n	800cc7a <prvInsertBlockIntoFreeList+0x3e>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cc60:	4908      	ldr	r1, [pc, #32]	@ (800cc84 <prvInsertBlockIntoFreeList+0x48>)
 800cc62:	6809      	ldr	r1, [r1, #0]
 800cc64:	428b      	cmp	r3, r1
 800cc66:	d003      	beq.n	800cc70 <prvInsertBlockIntoFreeList+0x34>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cc68:	6859      	ldr	r1, [r3, #4]
 800cc6a:	4421      	add	r1, r4
 800cc6c:	6041      	str	r1, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cc6e:	6819      	ldr	r1, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cc70:	4290      	cmp	r0, r2
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cc72:	6001      	str	r1, [r0, #0]
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cc74:	bf18      	it	ne
 800cc76:	6010      	strne	r0, [r2, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc78:	bd10      	pop	{r4, pc}
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cc7a:	4619      	mov	r1, r3
 800cc7c:	e7f8      	b.n	800cc70 <prvInsertBlockIntoFreeList+0x34>
 800cc7e:	bf00      	nop
 800cc80:	2400c684 	.word	0x2400c684
 800cc84:	2400c680 	.word	0x2400c680

0800cc88 <pvPortMalloc>:
{
 800cc88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cc8c:	4604      	mov	r4, r0
	vTaskSuspendAll();
 800cc8e:	f001 f9f1 	bl	800e074 <vTaskSuspendAll>
		if( pxEnd == NULL )
 800cc92:	4940      	ldr	r1, [pc, #256]	@ (800cd94 <pvPortMalloc+0x10c>)
 800cc94:	4d40      	ldr	r5, [pc, #256]	@ (800cd98 <pvPortMalloc+0x110>)
 800cc96:	680b      	ldr	r3, [r1, #0]
 800cc98:	b9f3      	cbnz	r3, 800ccd8 <pvPortMalloc+0x50>
	uxAddress = ( size_t ) ucHeap;
 800cc9a:	4a40      	ldr	r2, [pc, #256]	@ (800cd9c <pvPortMalloc+0x114>)
	xStart.xBlockSize = ( size_t ) 0;
 800cc9c:	2000      	movs	r0, #0
	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cc9e:	0756      	lsls	r6, r2, #29
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cca0:	4e3f      	ldr	r6, [pc, #252]	@ (800cda0 <pvPortMalloc+0x118>)
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cca2:	bf1b      	ittet	ne
 800cca4:	3207      	addne	r2, #7
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cca6:	4b3f      	ldrne	r3, [pc, #252]	@ (800cda4 <pvPortMalloc+0x11c>)
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cca8:	4b3f      	ldreq	r3, [pc, #252]	@ (800cda8 <pvPortMalloc+0x120>)
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccaa:	f022 0207 	bicne.w	r2, r2, #7
	xStart.xBlockSize = ( size_t ) 0;
 800ccae:	6070      	str	r0, [r6, #4]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ccb0:	bf18      	it	ne
 800ccb2:	1a9b      	subne	r3, r3, r2
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ccb4:	6032      	str	r2, [r6, #0]
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ccb6:	4413      	add	r3, r2
	uxAddress -= xHeapStructSize;
 800ccb8:	3b08      	subs	r3, #8
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ccba:	f023 0307 	bic.w	r3, r3, #7
	pxEnd->pxNextFreeBlock = NULL;
 800ccbe:	e9c3 0000 	strd	r0, r0, [r3]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ccc2:	1a98      	subs	r0, r3, r2
	pxEnd = ( void * ) uxAddress;
 800ccc4:	600b      	str	r3, [r1, #0]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800ccc6:	e9c2 3000 	strd	r3, r0, [r2]
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccca:	4b38      	ldr	r3, [pc, #224]	@ (800cdac <pvPortMalloc+0x124>)
 800cccc:	6018      	str	r0, [r3, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800ccce:	4b38      	ldr	r3, [pc, #224]	@ (800cdb0 <pvPortMalloc+0x128>)
 800ccd0:	6018      	str	r0, [r3, #0]
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800ccd2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800ccd6:	602b      	str	r3, [r5, #0]
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800ccd8:	682e      	ldr	r6, [r5, #0]
 800ccda:	4226      	tst	r6, r4
 800ccdc:	d155      	bne.n	800cd8a <pvPortMalloc+0x102>
			if( xWantedSize > 0 )
 800ccde:	2c00      	cmp	r4, #0
 800cce0:	d046      	beq.n	800cd70 <pvPortMalloc+0xe8>
				xWantedSize += xHeapStructSize;
 800cce2:	f104 0308 	add.w	r3, r4, #8
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800cce6:	0760      	lsls	r0, r4, #29
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800cce8:	bf1c      	itt	ne
 800ccea:	f023 0307 	bicne.w	r3, r3, #7
 800ccee:	3308      	addne	r3, #8
			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800ccf0:	2b00      	cmp	r3, #0
 800ccf2:	d04a      	beq.n	800cd8a <pvPortMalloc+0x102>
 800ccf4:	4f2e      	ldr	r7, [pc, #184]	@ (800cdb0 <pvPortMalloc+0x128>)
 800ccf6:	683c      	ldr	r4, [r7, #0]
 800ccf8:	429c      	cmp	r4, r3
 800ccfa:	d346      	bcc.n	800cd8a <pvPortMalloc+0x102>
				pxBlock = xStart.pxNextFreeBlock;
 800ccfc:	4a28      	ldr	r2, [pc, #160]	@ (800cda0 <pvPortMalloc+0x118>)
 800ccfe:	6815      	ldr	r5, [r2, #0]
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800cd00:	6868      	ldr	r0, [r5, #4]
 800cd02:	4298      	cmp	r0, r3
 800cd04:	d204      	bcs.n	800cd10 <pvPortMalloc+0x88>
 800cd06:	f8d5 c000 	ldr.w	ip, [r5]
 800cd0a:	f1bc 0f00 	cmp.w	ip, #0
 800cd0e:	d115      	bne.n	800cd3c <pvPortMalloc+0xb4>
				if( pxBlock != pxEnd )
 800cd10:	6809      	ldr	r1, [r1, #0]
 800cd12:	42a9      	cmp	r1, r5
 800cd14:	d039      	beq.n	800cd8a <pvPortMalloc+0x102>
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd16:	6829      	ldr	r1, [r5, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd18:	f8d2 8000 	ldr.w	r8, [r2]
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800cd1c:	6011      	str	r1, [r2, #0]
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800cd1e:	1ac2      	subs	r2, r0, r3
 800cd20:	2a10      	cmp	r2, #16
 800cd22:	d912      	bls.n	800cd4a <pvPortMalloc+0xc2>
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800cd24:	18e8      	adds	r0, r5, r3
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd26:	0741      	lsls	r1, r0, #29
 800cd28:	d00b      	beq.n	800cd42 <pvPortMalloc+0xba>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800cd2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd2e:	f383 8811 	msr	BASEPRI, r3
 800cd32:	f3bf 8f6f 	isb	sy
 800cd36:	f3bf 8f4f 	dsb	sy
 800cd3a:	e7fe      	b.n	800cd3a <pvPortMalloc+0xb2>
 800cd3c:	462a      	mov	r2, r5
 800cd3e:	4665      	mov	r5, ip
 800cd40:	e7de      	b.n	800cd00 <pvPortMalloc+0x78>
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800cd42:	6042      	str	r2, [r0, #4]
						pxBlock->xBlockSize = xWantedSize;
 800cd44:	606b      	str	r3, [r5, #4]
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800cd46:	f7ff ff79 	bl	800cc3c <prvInsertBlockIntoFreeList>
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd4a:	686a      	ldr	r2, [r5, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cd4c:	2300      	movs	r3, #0
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd4e:	4917      	ldr	r1, [pc, #92]	@ (800cdac <pvPortMalloc+0x124>)
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd50:	1aa4      	subs	r4, r4, r2
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd52:	4316      	orrs	r6, r2
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd54:	6808      	ldr	r0, [r1, #0]
					xNumberOfSuccessfulAllocations++;
 800cd56:	4a17      	ldr	r2, [pc, #92]	@ (800cdb4 <pvPortMalloc+0x12c>)
					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800cd58:	4284      	cmp	r4, r0
					pxBlock->pxNextFreeBlock = NULL;
 800cd5a:	602b      	str	r3, [r5, #0]
					xNumberOfSuccessfulAllocations++;
 800cd5c:	6813      	ldr	r3, [r2, #0]
					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800cd5e:	603c      	str	r4, [r7, #0]
					xNumberOfSuccessfulAllocations++;
 800cd60:	f103 0301 	add.w	r3, r3, #1
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800cd64:	bf38      	it	cc
 800cd66:	600c      	strcc	r4, [r1, #0]
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800cd68:	f108 0408 	add.w	r4, r8, #8
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cd6c:	606e      	str	r6, [r5, #4]
					xNumberOfSuccessfulAllocations++;
 800cd6e:	6013      	str	r3, [r2, #0]
	( void ) xTaskResumeAll();
 800cd70:	f001 fa24 	bl	800e1bc <xTaskResumeAll>
	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cd74:	0763      	lsls	r3, r4, #29
 800cd76:	d00a      	beq.n	800cd8e <pvPortMalloc+0x106>
 800cd78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cd7c:	f383 8811 	msr	BASEPRI, r3
 800cd80:	f3bf 8f6f 	isb	sy
 800cd84:	f3bf 8f4f 	dsb	sy
 800cd88:	e7fe      	b.n	800cd88 <pvPortMalloc+0x100>
void *pvReturn = NULL;
 800cd8a:	2400      	movs	r4, #0
 800cd8c:	e7f0      	b.n	800cd70 <pvPortMalloc+0xe8>
}
 800cd8e:	4620      	mov	r0, r4
 800cd90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cd94:	2400c680 	.word	0x2400c680
 800cd98:	2400c66c 	.word	0x2400c66c
 800cd9c:	2400c68c 	.word	0x2400c68c
 800cda0:	2400c684 	.word	0x2400c684
 800cda4:	24024d2c 	.word	0x24024d2c
 800cda8:	000186a0 	.word	0x000186a0
 800cdac:	2400c678 	.word	0x2400c678
 800cdb0:	2400c67c 	.word	0x2400c67c
 800cdb4:	2400c674 	.word	0x2400c674

0800cdb8 <vPortFree>:
{
 800cdb8:	b510      	push	{r4, lr}
	if( pv != NULL )
 800cdba:	4604      	mov	r4, r0
 800cdbc:	b390      	cbz	r0, 800ce24 <vPortFree+0x6c>
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cdbe:	4a1a      	ldr	r2, [pc, #104]	@ (800ce28 <vPortFree+0x70>)
 800cdc0:	f850 3c04 	ldr.w	r3, [r0, #-4]
 800cdc4:	6812      	ldr	r2, [r2, #0]
 800cdc6:	4213      	tst	r3, r2
 800cdc8:	d108      	bne.n	800cddc <vPortFree+0x24>
 800cdca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cdce:	f383 8811 	msr	BASEPRI, r3
 800cdd2:	f3bf 8f6f 	isb	sy
 800cdd6:	f3bf 8f4f 	dsb	sy
 800cdda:	e7fe      	b.n	800cdda <vPortFree+0x22>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cddc:	f850 1c08 	ldr.w	r1, [r0, #-8]
 800cde0:	b141      	cbz	r1, 800cdf4 <vPortFree+0x3c>
 800cde2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cde6:	f383 8811 	msr	BASEPRI, r3
 800cdea:	f3bf 8f6f 	isb	sy
 800cdee:	f3bf 8f4f 	dsb	sy
 800cdf2:	e7fe      	b.n	800cdf2 <vPortFree+0x3a>
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cdf4:	ea23 0302 	bic.w	r3, r3, r2
 800cdf8:	f840 3c04 	str.w	r3, [r0, #-4]
				vTaskSuspendAll();
 800cdfc:	f001 f93a 	bl	800e074 <vTaskSuspendAll>
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce00:	4a0a      	ldr	r2, [pc, #40]	@ (800ce2c <vPortFree+0x74>)
 800ce02:	f854 3c04 	ldr.w	r3, [r4, #-4]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce06:	f1a4 0008 	sub.w	r0, r4, #8
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ce0a:	6811      	ldr	r1, [r2, #0]
 800ce0c:	440b      	add	r3, r1
 800ce0e:	6013      	str	r3, [r2, #0]
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ce10:	f7ff ff14 	bl	800cc3c <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ce14:	4a06      	ldr	r2, [pc, #24]	@ (800ce30 <vPortFree+0x78>)
 800ce16:	6813      	ldr	r3, [r2, #0]
 800ce18:	3301      	adds	r3, #1
}
 800ce1a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
					xNumberOfSuccessfulFrees++;
 800ce1e:	6013      	str	r3, [r2, #0]
				( void ) xTaskResumeAll();
 800ce20:	f001 b9cc 	b.w	800e1bc <xTaskResumeAll>
}
 800ce24:	bd10      	pop	{r4, pc}
 800ce26:	bf00      	nop
 800ce28:	2400c66c 	.word	0x2400c66c
 800ce2c:	2400c67c 	.word	0x2400c67c
 800ce30:	2400c670 	.word	0x2400c670

0800ce34 <vListInitialise>:
void vListInitialise( List_t * const pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce34:	f100 0308 	add.w	r3, r0, #8

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800ce38:	f04f 32ff 	mov.w	r2, #4294967295
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce3c:	6043      	str	r3, [r0, #4]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce3e:	6103      	str	r3, [r0, #16]
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800ce40:	e9c0 2302 	strd	r2, r3, [r0, #8]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ce44:	2300      	movs	r3, #0
 800ce46:	6003      	str	r3, [r0, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ce48:	4770      	bx	lr

0800ce4a <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	6103      	str	r3, [r0, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ce4e:	4770      	bx	lr

0800ce50 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
ListItem_t * const pxIndex = pxList->pxIndex;
 800ce50:	6843      	ldr	r3, [r0, #4]

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce52:	689a      	ldr	r2, [r3, #8]
	pxNewListItem->pxNext = pxIndex;
 800ce54:	604b      	str	r3, [r1, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ce56:	608a      	str	r2, [r1, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ce58:	6051      	str	r1, [r2, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ce5a:	6099      	str	r1, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ce5c:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ce5e:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ce60:	3301      	adds	r3, #1
 800ce62:	6003      	str	r3, [r0, #0]
}
 800ce64:	4770      	bx	lr

0800ce66 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ce66:	b530      	push	{r4, r5, lr}
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ce68:	680c      	ldr	r4, [r1, #0]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ce6a:	1c63      	adds	r3, r4, #1
 800ce6c:	d10a      	bne.n	800ce84 <vListInsert+0x1e>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ce6e:	6903      	ldr	r3, [r0, #16]
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800ce70:	685a      	ldr	r2, [r3, #4]
 800ce72:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800ce74:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800ce76:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = pxNewListItem;
 800ce78:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;

	( pxList->uxNumberOfItems )++;
 800ce7a:	6803      	ldr	r3, [r0, #0]
	pxNewListItem->pxContainer = pxList;
 800ce7c:	6108      	str	r0, [r1, #16]
	( pxList->uxNumberOfItems )++;
 800ce7e:	3301      	adds	r3, #1
 800ce80:	6003      	str	r3, [r0, #0]
}
 800ce82:	bd30      	pop	{r4, r5, pc}
		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ce84:	f100 0208 	add.w	r2, r0, #8
 800ce88:	4613      	mov	r3, r2
 800ce8a:	6852      	ldr	r2, [r2, #4]
 800ce8c:	6815      	ldr	r5, [r2, #0]
 800ce8e:	42a5      	cmp	r5, r4
 800ce90:	d9fa      	bls.n	800ce88 <vListInsert+0x22>
 800ce92:	e7ed      	b.n	800ce70 <vListInsert+0xa>

0800ce94 <uxListRemove>:

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800ce94:	6903      	ldr	r3, [r0, #16]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800ce96:	e9d0 1201 	ldrd	r1, r2, [r0, #4]
 800ce9a:	608a      	str	r2, [r1, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800ce9c:	6051      	str	r1, [r2, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800ce9e:	6859      	ldr	r1, [r3, #4]
 800cea0:	4281      	cmp	r1, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800cea2:	bf08      	it	eq
 800cea4:	605a      	streq	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800cea6:	2200      	movs	r2, #0
 800cea8:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
 800ceaa:	681a      	ldr	r2, [r3, #0]
 800ceac:	3a01      	subs	r2, #1
 800ceae:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800ceb0:	6818      	ldr	r0, [r3, #0]
}
 800ceb2:	4770      	bx	lr

0800ceb4 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ceb4:	4808      	ldr	r0, [pc, #32]	@ (800ced8 <prvPortStartFirstTask+0x24>)
 800ceb6:	6800      	ldr	r0, [r0, #0]
 800ceb8:	6800      	ldr	r0, [r0, #0]
 800ceba:	f380 8808 	msr	MSP, r0
 800cebe:	f04f 0000 	mov.w	r0, #0
 800cec2:	f380 8814 	msr	CONTROL, r0
 800cec6:	b662      	cpsie	i
 800cec8:	b661      	cpsie	f
 800ceca:	f3bf 8f4f 	dsb	sy
 800cece:	f3bf 8f6f 	isb	sy
 800ced2:	df00      	svc	0
 800ced4:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800ced6:	0000      	.short	0x0000
 800ced8:	e000ed08 	.word	0xe000ed08

0800cedc <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800cedc:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800ceec <vPortEnableVFP+0x10>
 800cee0:	6801      	ldr	r1, [r0, #0]
 800cee2:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800cee6:	6001      	str	r1, [r0, #0]
 800cee8:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800ceea:	0000      	.short	0x0000
 800ceec:	e000ed88 	.word	0xe000ed88

0800cef0 <prvTaskExitError>:
volatile uint32_t ulDummy = 0;
 800cef0:	2300      	movs	r3, #0
{
 800cef2:	b082      	sub	sp, #8
volatile uint32_t ulDummy = 0;
 800cef4:	9301      	str	r3, [sp, #4]
	configASSERT( uxCriticalNesting == ~0UL );
 800cef6:	4b0d      	ldr	r3, [pc, #52]	@ (800cf2c <prvTaskExitError+0x3c>)
 800cef8:	681b      	ldr	r3, [r3, #0]
 800cefa:	3301      	adds	r3, #1
 800cefc:	d008      	beq.n	800cf10 <prvTaskExitError+0x20>
 800cefe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf02:	f383 8811 	msr	BASEPRI, r3
 800cf06:	f3bf 8f6f 	isb	sy
 800cf0a:	f3bf 8f4f 	dsb	sy
 800cf0e:	e7fe      	b.n	800cf0e <prvTaskExitError+0x1e>
 800cf10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf14:	f383 8811 	msr	BASEPRI, r3
 800cf18:	f3bf 8f6f 	isb	sy
 800cf1c:	f3bf 8f4f 	dsb	sy
	while( ulDummy == 0 )
 800cf20:	9b01      	ldr	r3, [sp, #4]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d0fc      	beq.n	800cf20 <prvTaskExitError+0x30>
}
 800cf26:	b002      	add	sp, #8
 800cf28:	4770      	bx	lr
 800cf2a:	bf00      	nop
 800cf2c:	240000a8 	.word	0x240000a8

0800cf30 <pxPortInitialiseStack>:
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf30:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf34:	f021 0101 	bic.w	r1, r1, #1
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800cf38:	f840 2c20 	str.w	r2, [r0, #-32]
}
 800cf3c:	3844      	subs	r0, #68	@ 0x44
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800cf3e:	6403      	str	r3, [r0, #64]	@ 0x40
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf40:	4b03      	ldr	r3, [pc, #12]	@ (800cf50 <pxPortInitialiseStack+0x20>)
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800cf42:	63c1      	str	r1, [r0, #60]	@ 0x3c
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800cf44:	6383      	str	r3, [r0, #56]	@ 0x38
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800cf46:	f06f 0302 	mvn.w	r3, #2
 800cf4a:	6203      	str	r3, [r0, #32]
}
 800cf4c:	4770      	bx	lr
 800cf4e:	bf00      	nop
 800cf50:	0800cef1 	.word	0x0800cef1
	...

0800cf60 <SVC_Handler>:
	__asm volatile (
 800cf60:	4b07      	ldr	r3, [pc, #28]	@ (800cf80 <pxCurrentTCBConst2>)
 800cf62:	6819      	ldr	r1, [r3, #0]
 800cf64:	6808      	ldr	r0, [r1, #0]
 800cf66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf6a:	f380 8809 	msr	PSP, r0
 800cf6e:	f3bf 8f6f 	isb	sy
 800cf72:	f04f 0000 	mov.w	r0, #0
 800cf76:	f380 8811 	msr	BASEPRI, r0
 800cf7a:	4770      	bx	lr
 800cf7c:	f3af 8000 	nop.w

0800cf80 <pxCurrentTCBConst2>:
 800cf80:	2402526c 	.word	0x2402526c

0800cf84 <vPortEnterCritical>:
 800cf84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cf88:	f383 8811 	msr	BASEPRI, r3
 800cf8c:	f3bf 8f6f 	isb	sy
 800cf90:	f3bf 8f4f 	dsb	sy
	uxCriticalNesting++;
 800cf94:	4a0a      	ldr	r2, [pc, #40]	@ (800cfc0 <vPortEnterCritical+0x3c>)
 800cf96:	6813      	ldr	r3, [r2, #0]
 800cf98:	3301      	adds	r3, #1
	if( uxCriticalNesting == 1 )
 800cf9a:	2b01      	cmp	r3, #1
	uxCriticalNesting++;
 800cf9c:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 1 )
 800cf9e:	d10e      	bne.n	800cfbe <vPortEnterCritical+0x3a>
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800cfa0:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800cfa4:	f8d3 3d04 	ldr.w	r3, [r3, #3332]	@ 0xd04
 800cfa8:	b2db      	uxtb	r3, r3
 800cfaa:	b143      	cbz	r3, 800cfbe <vPortEnterCritical+0x3a>
 800cfac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfb0:	f383 8811 	msr	BASEPRI, r3
 800cfb4:	f3bf 8f6f 	isb	sy
 800cfb8:	f3bf 8f4f 	dsb	sy
 800cfbc:	e7fe      	b.n	800cfbc <vPortEnterCritical+0x38>
}
 800cfbe:	4770      	bx	lr
 800cfc0:	240000a8 	.word	0x240000a8

0800cfc4 <vPortExitCritical>:
	configASSERT( uxCriticalNesting );
 800cfc4:	4a08      	ldr	r2, [pc, #32]	@ (800cfe8 <vPortExitCritical+0x24>)
 800cfc6:	6813      	ldr	r3, [r2, #0]
 800cfc8:	b943      	cbnz	r3, 800cfdc <vPortExitCritical+0x18>
 800cfca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cfce:	f383 8811 	msr	BASEPRI, r3
 800cfd2:	f3bf 8f6f 	isb	sy
 800cfd6:	f3bf 8f4f 	dsb	sy
 800cfda:	e7fe      	b.n	800cfda <vPortExitCritical+0x16>
	uxCriticalNesting--;
 800cfdc:	3b01      	subs	r3, #1
 800cfde:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800cfe0:	b90b      	cbnz	r3, 800cfe6 <vPortExitCritical+0x22>
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800cfe2:	f383 8811 	msr	BASEPRI, r3
}
 800cfe6:	4770      	bx	lr
 800cfe8:	240000a8 	.word	0x240000a8
 800cfec:	00000000 	.word	0x00000000

0800cff0 <PendSV_Handler>:
	__asm volatile
 800cff0:	f3ef 8009 	mrs	r0, PSP
 800cff4:	f3bf 8f6f 	isb	sy
 800cff8:	4b15      	ldr	r3, [pc, #84]	@ (800d050 <pxCurrentTCBConst>)
 800cffa:	681a      	ldr	r2, [r3, #0]
 800cffc:	f01e 0f10 	tst.w	lr, #16
 800d000:	bf08      	it	eq
 800d002:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800d006:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d00a:	6010      	str	r0, [r2, #0]
 800d00c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800d010:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800d014:	f380 8811 	msr	BASEPRI, r0
 800d018:	f3bf 8f4f 	dsb	sy
 800d01c:	f3bf 8f6f 	isb	sy
 800d020:	f001 f9b0 	bl	800e384 <vTaskSwitchContext>
 800d024:	f04f 0000 	mov.w	r0, #0
 800d028:	f380 8811 	msr	BASEPRI, r0
 800d02c:	bc09      	pop	{r0, r3}
 800d02e:	6819      	ldr	r1, [r3, #0]
 800d030:	6808      	ldr	r0, [r1, #0]
 800d032:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d036:	f01e 0f10 	tst.w	lr, #16
 800d03a:	bf08      	it	eq
 800d03c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800d040:	f380 8809 	msr	PSP, r0
 800d044:	f3bf 8f6f 	isb	sy
 800d048:	4770      	bx	lr
 800d04a:	bf00      	nop
 800d04c:	f3af 8000 	nop.w

0800d050 <pxCurrentTCBConst>:
 800d050:	2402526c 	.word	0x2402526c

0800d054 <xPortSysTickHandler>:
{
 800d054:	b508      	push	{r3, lr}
	__asm volatile
 800d056:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d05a:	f383 8811 	msr	BASEPRI, r3
 800d05e:	f3bf 8f6f 	isb	sy
 800d062:	f3bf 8f4f 	dsb	sy
		if( xTaskIncrementTick() != pdFALSE )
 800d066:	f001 f813 	bl	800e090 <xTaskIncrementTick>
 800d06a:	b128      	cbz	r0, 800d078 <xPortSysTickHandler+0x24>
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800d06c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d070:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d074:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
	__asm volatile
 800d078:	2300      	movs	r3, #0
 800d07a:	f383 8811 	msr	BASEPRI, r3
}
 800d07e:	bd08      	pop	{r3, pc}

0800d080 <vPortSetupTimerInterrupt>:
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d080:	f04f 22e0 	mov.w	r2, #3758153728	@ 0xe000e000
 800d084:	2300      	movs	r3, #0
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d086:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800d08a:	6113      	str	r3, [r2, #16]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800d08c:	6193      	str	r3, [r2, #24]
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800d08e:	4b04      	ldr	r3, [pc, #16]	@ (800d0a0 <vPortSetupTimerInterrupt+0x20>)
 800d090:	681b      	ldr	r3, [r3, #0]
 800d092:	fbb3 f3f1 	udiv	r3, r3, r1
 800d096:	3b01      	subs	r3, #1
 800d098:	6153      	str	r3, [r2, #20]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800d09a:	2307      	movs	r3, #7
 800d09c:	6113      	str	r3, [r2, #16]
}
 800d09e:	4770      	bx	lr
 800d0a0:	2400009c 	.word	0x2400009c

0800d0a4 <xPortStartScheduler>:
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0a4:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
{
 800d0a8:	b537      	push	{r0, r1, r2, r4, r5, lr}
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800d0aa:	f8d3 1d00 	ldr.w	r1, [r3, #3328]	@ 0xd00
 800d0ae:	4a38      	ldr	r2, [pc, #224]	@ (800d190 <xPortStartScheduler+0xec>)
 800d0b0:	4291      	cmp	r1, r2
 800d0b2:	d108      	bne.n	800d0c6 <xPortStartScheduler+0x22>
	__asm volatile
 800d0b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0b8:	f383 8811 	msr	BASEPRI, r3
 800d0bc:	f3bf 8f6f 	isb	sy
 800d0c0:	f3bf 8f4f 	dsb	sy
 800d0c4:	e7fe      	b.n	800d0c4 <xPortStartScheduler+0x20>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800d0c6:	f8d3 2d00 	ldr.w	r2, [r3, #3328]	@ 0xd00
 800d0ca:	4b32      	ldr	r3, [pc, #200]	@ (800d194 <xPortStartScheduler+0xf0>)
 800d0cc:	429a      	cmp	r2, r3
 800d0ce:	d108      	bne.n	800d0e2 <xPortStartScheduler+0x3e>
 800d0d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d0d4:	f383 8811 	msr	BASEPRI, r3
 800d0d8:	f3bf 8f6f 	isb	sy
 800d0dc:	f3bf 8f4f 	dsb	sy
 800d0e0:	e7fe      	b.n	800d0e0 <xPortStartScheduler+0x3c>
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800d0e2:	4b2d      	ldr	r3, [pc, #180]	@ (800d198 <xPortStartScheduler+0xf4>)
 800d0e4:	781a      	ldrb	r2, [r3, #0]
 800d0e6:	b2d2      	uxtb	r2, r2
 800d0e8:	9201      	str	r2, [sp, #4]
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800d0ea:	22ff      	movs	r2, #255	@ 0xff
 800d0ec:	701a      	strb	r2, [r3, #0]
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0ee:	781b      	ldrb	r3, [r3, #0]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0f0:	4a2a      	ldr	r2, [pc, #168]	@ (800d19c <xPortStartScheduler+0xf8>)
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800d0f2:	b2db      	uxtb	r3, r3
 800d0f4:	f88d 3003 	strb.w	r3, [sp, #3]
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800d0f8:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d0fc:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800d100:	7013      	strb	r3, [r2, #0]
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800d102:	2307      	movs	r3, #7
 800d104:	4a26      	ldr	r2, [pc, #152]	@ (800d1a0 <xPortStartScheduler+0xfc>)
 800d106:	6013      	str	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d108:	f89d 1003 	ldrb.w	r1, [sp, #3]
			ulMaxPRIGROUPValue--;
 800d10c:	6813      	ldr	r3, [r2, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800d10e:	0609      	lsls	r1, r1, #24
 800d110:	d40a      	bmi.n	800d128 <xPortStartScheduler+0x84>
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800d112:	2b03      	cmp	r3, #3
 800d114:	d011      	beq.n	800d13a <xPortStartScheduler+0x96>
 800d116:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d11a:	f383 8811 	msr	BASEPRI, r3
 800d11e:	f3bf 8f6f 	isb	sy
 800d122:	f3bf 8f4f 	dsb	sy
 800d126:	e7fe      	b.n	800d126 <xPortStartScheduler+0x82>
			ulMaxPRIGROUPValue--;
 800d128:	3b01      	subs	r3, #1
 800d12a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800d12c:	f89d 3003 	ldrb.w	r3, [sp, #3]
 800d130:	005b      	lsls	r3, r3, #1
 800d132:	b2db      	uxtb	r3, r3
 800d134:	f88d 3003 	strb.w	r3, [sp, #3]
 800d138:	e7e6      	b.n	800d108 <xPortStartScheduler+0x64>
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d13a:	f44f 7340 	mov.w	r3, #768	@ 0x300
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d13e:	f04f 24e0 	mov.w	r4, #3758153728	@ 0xe000e000
	uxCriticalNesting = 0;
 800d142:	2500      	movs	r5, #0
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800d144:	6013      	str	r3, [r2, #0]
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800d146:	9b01      	ldr	r3, [sp, #4]
 800d148:	4a13      	ldr	r2, [pc, #76]	@ (800d198 <xPortStartScheduler+0xf4>)
 800d14a:	b2db      	uxtb	r3, r3
 800d14c:	7013      	strb	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800d14e:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d152:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800d156:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800d15a:	f8d4 3d20 	ldr.w	r3, [r4, #3360]	@ 0xd20
 800d15e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800d162:	f8c4 3d20 	str.w	r3, [r4, #3360]	@ 0xd20
	vPortSetupTimerInterrupt();
 800d166:	f7ff ff8b 	bl	800d080 <vPortSetupTimerInterrupt>
	uxCriticalNesting = 0;
 800d16a:	4b0e      	ldr	r3, [pc, #56]	@ (800d1a4 <xPortStartScheduler+0x100>)
 800d16c:	601d      	str	r5, [r3, #0]
	vPortEnableVFP();
 800d16e:	f7ff feb5 	bl	800cedc <vPortEnableVFP>
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800d172:	f8d4 3f34 	ldr.w	r3, [r4, #3892]	@ 0xf34
 800d176:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800d17a:	f8c4 3f34 	str.w	r3, [r4, #3892]	@ 0xf34
	prvPortStartFirstTask();
 800d17e:	f7ff fe99 	bl	800ceb4 <prvPortStartFirstTask>
	vTaskSwitchContext();
 800d182:	f001 f8ff 	bl	800e384 <vTaskSwitchContext>
}
 800d186:	4628      	mov	r0, r5
	prvTaskExitError();
 800d188:	f7ff feb2 	bl	800cef0 <prvTaskExitError>
}
 800d18c:	b003      	add	sp, #12
 800d18e:	bd30      	pop	{r4, r5, pc}
 800d190:	410fc271 	.word	0x410fc271
 800d194:	410fc270 	.word	0x410fc270
 800d198:	e000e400 	.word	0xe000e400
 800d19c:	24024d30 	.word	0x24024d30
 800d1a0:	24024d2c 	.word	0x24024d2c
 800d1a4:	240000a8 	.word	0x240000a8

0800d1a8 <vPortValidateInterruptPriority>:
	{
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800d1a8:	f3ef 8305 	mrs	r3, IPSR

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800d1ac:	2b0f      	cmp	r3, #15
 800d1ae:	d90e      	bls.n	800d1ce <vPortValidateInterruptPriority+0x26>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800d1b0:	4a11      	ldr	r2, [pc, #68]	@ (800d1f8 <vPortValidateInterruptPriority+0x50>)
 800d1b2:	5c9b      	ldrb	r3, [r3, r2]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800d1b4:	4a11      	ldr	r2, [pc, #68]	@ (800d1fc <vPortValidateInterruptPriority+0x54>)
 800d1b6:	7812      	ldrb	r2, [r2, #0]
 800d1b8:	429a      	cmp	r2, r3
 800d1ba:	d908      	bls.n	800d1ce <vPortValidateInterruptPriority+0x26>
 800d1bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1c0:	f383 8811 	msr	BASEPRI, r3
 800d1c4:	f3bf 8f6f 	isb	sy
 800d1c8:	f3bf 8f4f 	dsb	sy
 800d1cc:	e7fe      	b.n	800d1cc <vPortValidateInterruptPriority+0x24>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800d1ce:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d1d2:	4a0b      	ldr	r2, [pc, #44]	@ (800d200 <vPortValidateInterruptPriority+0x58>)
 800d1d4:	f8d3 3d0c 	ldr.w	r3, [r3, #3340]	@ 0xd0c
 800d1d8:	6812      	ldr	r2, [r2, #0]
 800d1da:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800d1de:	4293      	cmp	r3, r2
 800d1e0:	d908      	bls.n	800d1f4 <vPortValidateInterruptPriority+0x4c>
 800d1e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d1e6:	f383 8811 	msr	BASEPRI, r3
 800d1ea:	f3bf 8f6f 	isb	sy
 800d1ee:	f3bf 8f4f 	dsb	sy
 800d1f2:	e7fe      	b.n	800d1f2 <vPortValidateInterruptPriority+0x4a>
	}
 800d1f4:	4770      	bx	lr
 800d1f6:	bf00      	nop
 800d1f8:	e000e3f0 	.word	0xe000e3f0
 800d1fc:	24024d30 	.word	0x24024d30
 800d200:	24024d2c 	.word	0x24024d2c

0800d204 <prvIsQueueEmpty>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800d204:	b510      	push	{r4, lr}
 800d206:	4604      	mov	r4, r0
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d208:	f7ff febc 	bl	800cf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800d20c:	6ba4      	ldr	r4, [r4, #56]	@ 0x38
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d20e:	f7ff fed9 	bl	800cfc4 <vPortExitCritical>

	return xReturn;
}
 800d212:	fab4 f084 	clz	r0, r4
 800d216:	0940      	lsrs	r0, r0, #5
 800d218:	bd10      	pop	{r4, pc}

0800d21a <prvCopyDataToQueue>:
{
 800d21a:	b570      	push	{r4, r5, r6, lr}
 800d21c:	4616      	mov	r6, r2
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d21e:	6c02      	ldr	r2, [r0, #64]	@ 0x40
{
 800d220:	4604      	mov	r4, r0
	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d222:	6b85      	ldr	r5, [r0, #56]	@ 0x38
	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d224:	b942      	cbnz	r2, 800d238 <prvCopyDataToQueue+0x1e>
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d226:	6806      	ldr	r6, [r0, #0]
 800d228:	b99e      	cbnz	r6, 800d252 <prvCopyDataToQueue+0x38>
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d22a:	6880      	ldr	r0, [r0, #8]
 800d22c:	f001 fa0e 	bl	800e64c <xTaskPriorityDisinherit>
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d230:	60a6      	str	r6, [r4, #8]
	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d232:	3501      	adds	r5, #1
 800d234:	63a5      	str	r5, [r4, #56]	@ 0x38
}
 800d236:	bd70      	pop	{r4, r5, r6, pc}
	else if( xPosition == queueSEND_TO_BACK )
 800d238:	b96e      	cbnz	r6, 800d256 <prvCopyDataToQueue+0x3c>
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d23a:	6840      	ldr	r0, [r0, #4]
 800d23c:	f014 fe3f 	bl	8021ebe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d240:	6863      	ldr	r3, [r4, #4]
 800d242:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d244:	4413      	add	r3, r2
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d246:	68a2      	ldr	r2, [r4, #8]
 800d248:	4293      	cmp	r3, r2
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d24a:	6063      	str	r3, [r4, #4]
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d24c:	bf24      	itt	cs
 800d24e:	6823      	ldrcs	r3, [r4, #0]
 800d250:	6063      	strcs	r3, [r4, #4]
BaseType_t xReturn = pdFALSE;
 800d252:	2000      	movs	r0, #0
 800d254:	e7ed      	b.n	800d232 <prvCopyDataToQueue+0x18>
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d256:	68c0      	ldr	r0, [r0, #12]
 800d258:	f014 fe31 	bl	8021ebe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d25c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 800d25e:	68e3      	ldr	r3, [r4, #12]
 800d260:	4251      	negs	r1, r2
 800d262:	1a9b      	subs	r3, r3, r2
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d264:	6822      	ldr	r2, [r4, #0]
 800d266:	4293      	cmp	r3, r2
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d268:	60e3      	str	r3, [r4, #12]
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d26a:	bf3e      	ittt	cc
 800d26c:	68a3      	ldrcc	r3, [r4, #8]
 800d26e:	185b      	addcc	r3, r3, r1
 800d270:	60e3      	strcc	r3, [r4, #12]
		if( xPosition == queueOVERWRITE )
 800d272:	2e02      	cmp	r6, #2
 800d274:	d1ed      	bne.n	800d252 <prvCopyDataToQueue+0x38>
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d276:	b10d      	cbz	r5, 800d27c <prvCopyDataToQueue+0x62>
				--uxMessagesWaiting;
 800d278:	3d01      	subs	r5, #1
 800d27a:	e7ea      	b.n	800d252 <prvCopyDataToQueue+0x38>
BaseType_t xReturn = pdFALSE;
 800d27c:	4628      	mov	r0, r5
 800d27e:	e7d8      	b.n	800d232 <prvCopyDataToQueue+0x18>

0800d280 <prvCopyDataFromQueue>:
{
 800d280:	4603      	mov	r3, r0
 800d282:	4608      	mov	r0, r1
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d284:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
{
 800d286:	b410      	push	{r4}
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800d288:	b162      	cbz	r2, 800d2a4 <prvCopyDataFromQueue+0x24>
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d28a:	68dc      	ldr	r4, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d28c:	6899      	ldr	r1, [r3, #8]
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d28e:	4414      	add	r4, r2
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800d290:	428c      	cmp	r4, r1
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d292:	60dc      	str	r4, [r3, #12]
}
 800d294:	f85d 4b04 	ldr.w	r4, [sp], #4
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800d298:	bf24      	itt	cs
 800d29a:	6819      	ldrcs	r1, [r3, #0]
 800d29c:	60d9      	strcs	r1, [r3, #12]
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d29e:	68d9      	ldr	r1, [r3, #12]
 800d2a0:	f014 be0d 	b.w	8021ebe <memcpy>
}
 800d2a4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d2a8:	4770      	bx	lr

0800d2aa <prvUnlockQueue>:
{
 800d2aa:	b570      	push	{r4, r5, r6, lr}
 800d2ac:	4604      	mov	r4, r0
	taskENTER_CRITICAL();
 800d2ae:	f7ff fe69 	bl	800cf84 <vPortEnterCritical>
		int8_t cTxLock = pxQueue->cTxLock;
 800d2b2:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2b6:	f104 0624 	add.w	r6, r4, #36	@ 0x24
		int8_t cTxLock = pxQueue->cTxLock;
 800d2ba:	b26d      	sxtb	r5, r5
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800d2bc:	2d00      	cmp	r5, #0
 800d2be:	dc14      	bgt.n	800d2ea <prvUnlockQueue+0x40>
		pxQueue->cTxLock = queueUNLOCKED;
 800d2c0:	23ff      	movs	r3, #255	@ 0xff
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2c2:	f104 0610 	add.w	r6, r4, #16
		pxQueue->cTxLock = queueUNLOCKED;
 800d2c6:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
	taskEXIT_CRITICAL();
 800d2ca:	f7ff fe7b 	bl	800cfc4 <vPortExitCritical>
	taskENTER_CRITICAL();
 800d2ce:	f7ff fe59 	bl	800cf84 <vPortEnterCritical>
		int8_t cRxLock = pxQueue->cRxLock;
 800d2d2:	f894 5044 	ldrb.w	r5, [r4, #68]	@ 0x44
 800d2d6:	b26d      	sxtb	r5, r5
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800d2d8:	2d00      	cmp	r5, #0
 800d2da:	dc12      	bgt.n	800d302 <prvUnlockQueue+0x58>
		pxQueue->cRxLock = queueUNLOCKED;
 800d2dc:	23ff      	movs	r3, #255	@ 0xff
 800d2de:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
}
 800d2e2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
	taskEXIT_CRITICAL();
 800d2e6:	f7ff be6d 	b.w	800cfc4 <vPortExitCritical>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d2ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d2ec:	2b00      	cmp	r3, #0
 800d2ee:	d0e7      	beq.n	800d2c0 <prvUnlockQueue+0x16>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d2f0:	4630      	mov	r0, r6
 800d2f2:	f001 f8c7 	bl	800e484 <xTaskRemoveFromEventList>
 800d2f6:	b108      	cbz	r0, 800d2fc <prvUnlockQueue+0x52>
						vTaskMissedYield();
 800d2f8:	f001 f94e 	bl	800e598 <vTaskMissedYield>
			--cTxLock;
 800d2fc:	3d01      	subs	r5, #1
 800d2fe:	b26d      	sxtb	r5, r5
 800d300:	e7dc      	b.n	800d2bc <prvUnlockQueue+0x12>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d302:	6923      	ldr	r3, [r4, #16]
 800d304:	2b00      	cmp	r3, #0
 800d306:	d0e9      	beq.n	800d2dc <prvUnlockQueue+0x32>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d308:	4630      	mov	r0, r6
 800d30a:	f001 f8bb 	bl	800e484 <xTaskRemoveFromEventList>
 800d30e:	b108      	cbz	r0, 800d314 <prvUnlockQueue+0x6a>
					vTaskMissedYield();
 800d310:	f001 f942 	bl	800e598 <vTaskMissedYield>
				--cRxLock;
 800d314:	3d01      	subs	r5, #1
 800d316:	b26d      	sxtb	r5, r5
 800d318:	e7de      	b.n	800d2d8 <prvUnlockQueue+0x2e>

0800d31a <xQueueGenericReset>:
{
 800d31a:	b538      	push	{r3, r4, r5, lr}
 800d31c:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d31e:	4604      	mov	r4, r0
 800d320:	b940      	cbnz	r0, 800d334 <xQueueGenericReset+0x1a>
 800d322:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d326:	f383 8811 	msr	BASEPRI, r3
 800d32a:	f3bf 8f6f 	isb	sy
 800d32e:	f3bf 8f4f 	dsb	sy
 800d332:	e7fe      	b.n	800d332 <xQueueGenericReset+0x18>
	taskENTER_CRITICAL();
 800d334:	f7ff fe26 	bl	800cf84 <vPortEnterCritical>
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	e9d4 310f 	ldrd	r3, r1, [r4, #60]	@ 0x3c
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d33e:	6062      	str	r2, [r4, #4]
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d340:	434b      	muls	r3, r1
 800d342:	18d0      	adds	r0, r2, r3
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d344:	1a5b      	subs	r3, r3, r1
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d346:	60a0      	str	r0, [r4, #8]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d348:	441a      	add	r2, r3
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d34a:	2000      	movs	r0, #0
		pxQueue->cRxLock = queueUNLOCKED;
 800d34c:	23ff      	movs	r3, #255	@ 0xff
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d34e:	60e2      	str	r2, [r4, #12]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d350:	63a0      	str	r0, [r4, #56]	@ 0x38
		pxQueue->cRxLock = queueUNLOCKED;
 800d352:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d356:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
		if( xNewQueue == pdFALSE )
 800d35a:	b9a5      	cbnz	r5, 800d386 <xQueueGenericReset+0x6c>
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d35c:	6923      	ldr	r3, [r4, #16]
 800d35e:	b173      	cbz	r3, 800d37e <xQueueGenericReset+0x64>
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d360:	f104 0010 	add.w	r0, r4, #16
 800d364:	f001 f88e 	bl	800e484 <xTaskRemoveFromEventList>
 800d368:	b148      	cbz	r0, 800d37e <xQueueGenericReset+0x64>
					queueYIELD_IF_USING_PREEMPTION();
 800d36a:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d36e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d372:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d376:	f3bf 8f4f 	dsb	sy
 800d37a:	f3bf 8f6f 	isb	sy
	taskEXIT_CRITICAL();
 800d37e:	f7ff fe21 	bl	800cfc4 <vPortExitCritical>
}
 800d382:	2001      	movs	r0, #1
 800d384:	bd38      	pop	{r3, r4, r5, pc}
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d386:	f104 0010 	add.w	r0, r4, #16
 800d38a:	f7ff fd53 	bl	800ce34 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d38e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d392:	f7ff fd4f 	bl	800ce34 <vListInitialise>
 800d396:	e7f2      	b.n	800d37e <xQueueGenericReset+0x64>

0800d398 <xQueueGenericCreateStatic>:
	{
 800d398:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d39a:	460d      	mov	r5, r1
 800d39c:	461c      	mov	r4, r3
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d39e:	b940      	cbnz	r0, 800d3b2 <xQueueGenericCreateStatic+0x1a>
 800d3a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3a4:	f383 8811 	msr	BASEPRI, r3
 800d3a8:	f3bf 8f6f 	isb	sy
 800d3ac:	f3bf 8f4f 	dsb	sy
 800d3b0:	e7fe      	b.n	800d3b0 <xQueueGenericCreateStatic+0x18>
		configASSERT( pxStaticQueue != NULL );
 800d3b2:	b943      	cbnz	r3, 800d3c6 <xQueueGenericCreateStatic+0x2e>
 800d3b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3b8:	f383 8811 	msr	BASEPRI, r3
 800d3bc:	f3bf 8f6f 	isb	sy
 800d3c0:	f3bf 8f4f 	dsb	sy
 800d3c4:	e7fe      	b.n	800d3c4 <xQueueGenericCreateStatic+0x2c>
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d3c6:	b14a      	cbz	r2, 800d3dc <xQueueGenericCreateStatic+0x44>
 800d3c8:	b991      	cbnz	r1, 800d3f0 <xQueueGenericCreateStatic+0x58>
 800d3ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3ce:	f383 8811 	msr	BASEPRI, r3
 800d3d2:	f3bf 8f6f 	isb	sy
 800d3d6:	f3bf 8f4f 	dsb	sy
 800d3da:	e7fe      	b.n	800d3da <xQueueGenericCreateStatic+0x42>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3dc:	b141      	cbz	r1, 800d3f0 <xQueueGenericCreateStatic+0x58>
 800d3de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3e2:	f383 8811 	msr	BASEPRI, r3
 800d3e6:	f3bf 8f6f 	isb	sy
 800d3ea:	f3bf 8f4f 	dsb	sy
 800d3ee:	e7fe      	b.n	800d3ee <xQueueGenericCreateStatic+0x56>
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3f0:	2350      	movs	r3, #80	@ 0x50
 800d3f2:	9301      	str	r3, [sp, #4]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3f4:	9b01      	ldr	r3, [sp, #4]
 800d3f6:	2b50      	cmp	r3, #80	@ 0x50
 800d3f8:	d008      	beq.n	800d40c <xQueueGenericCreateStatic+0x74>
 800d3fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d3fe:	f383 8811 	msr	BASEPRI, r3
 800d402:	f3bf 8f6f 	isb	sy
 800d406:	f3bf 8f4f 	dsb	sy
 800d40a:	e7fe      	b.n	800d40a <xQueueGenericCreateStatic+0x72>
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d40c:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d40e:	2d00      	cmp	r5, #0
 800d410:	bf08      	it	eq
 800d412:	4622      	moveq	r2, r4
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d414:	9b01      	ldr	r3, [sp, #4]
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d416:	f884 1046 	strb.w	r1, [r4, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d41a:	6022      	str	r2, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d41c:	e9c4 050f 	strd	r0, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d420:	4620      	mov	r0, r4
 800d422:	f7ff ff7a 	bl	800d31a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d426:	f89d 3018 	ldrb.w	r3, [sp, #24]
	}
 800d42a:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d42c:	f884 304c 	strb.w	r3, [r4, #76]	@ 0x4c
	}
 800d430:	b003      	add	sp, #12
 800d432:	bd30      	pop	{r4, r5, pc}

0800d434 <xQueueGenericCreate>:
	{
 800d434:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d436:	460d      	mov	r5, r1
 800d438:	4617      	mov	r7, r2
		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d43a:	4606      	mov	r6, r0
 800d43c:	b940      	cbnz	r0, 800d450 <xQueueGenericCreate+0x1c>
 800d43e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d442:	f383 8811 	msr	BASEPRI, r3
 800d446:	f3bf 8f6f 	isb	sy
 800d44a:	f3bf 8f4f 	dsb	sy
 800d44e:	e7fe      	b.n	800d44e <xQueueGenericCreate+0x1a>
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d450:	4348      	muls	r0, r1
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d452:	3050      	adds	r0, #80	@ 0x50
 800d454:	f7ff fc18 	bl	800cc88 <pvPortMalloc>
		if( pxNewQueue != NULL )
 800d458:	4604      	mov	r4, r0
 800d45a:	b170      	cbz	r0, 800d47a <xQueueGenericCreate+0x46>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d45c:	2300      	movs	r3, #0
 800d45e:	f880 3046 	strb.w	r3, [r0, #70]	@ 0x46
	if( uxItemSize == ( UBaseType_t ) 0 )
 800d462:	b165      	cbz	r5, 800d47e <xQueueGenericCreate+0x4a>
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d464:	f100 0350 	add.w	r3, r0, #80	@ 0x50
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d468:	2101      	movs	r1, #1
 800d46a:	4620      	mov	r0, r4
 800d46c:	6023      	str	r3, [r4, #0]
	pxNewQueue->uxItemSize = uxItemSize;
 800d46e:	e9c4 650f 	strd	r6, r5, [r4, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d472:	f7ff ff52 	bl	800d31a <xQueueGenericReset>
		pxNewQueue->ucQueueType = ucQueueType;
 800d476:	f884 704c 	strb.w	r7, [r4, #76]	@ 0x4c
	}
 800d47a:	4620      	mov	r0, r4
 800d47c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d47e:	4603      	mov	r3, r0
 800d480:	e7f2      	b.n	800d468 <xQueueGenericCreate+0x34>

0800d482 <xQueueCreateCountingSemaphoreStatic>:
	{
 800d482:	b513      	push	{r0, r1, r4, lr}
 800d484:	4613      	mov	r3, r2
 800d486:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d488:	b940      	cbnz	r0, 800d49c <xQueueCreateCountingSemaphoreStatic+0x1a>
 800d48a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d48e:	f383 8811 	msr	BASEPRI, r3
 800d492:	f3bf 8f6f 	isb	sy
 800d496:	f3bf 8f4f 	dsb	sy
 800d49a:	e7fe      	b.n	800d49a <xQueueCreateCountingSemaphoreStatic+0x18>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d49c:	4288      	cmp	r0, r1
 800d49e:	d208      	bcs.n	800d4b2 <xQueueCreateCountingSemaphoreStatic+0x30>
 800d4a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4a4:	f383 8811 	msr	BASEPRI, r3
 800d4a8:	f3bf 8f6f 	isb	sy
 800d4ac:	f3bf 8f4f 	dsb	sy
 800d4b0:	e7fe      	b.n	800d4b0 <xQueueCreateCountingSemaphoreStatic+0x2e>
		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d4b2:	2202      	movs	r2, #2
 800d4b4:	9200      	str	r2, [sp, #0]
 800d4b6:	2200      	movs	r2, #0
 800d4b8:	4611      	mov	r1, r2
 800d4ba:	f7ff ff6d 	bl	800d398 <xQueueGenericCreateStatic>
		if( xHandle != NULL )
 800d4be:	b100      	cbz	r0, 800d4c2 <xQueueCreateCountingSemaphoreStatic+0x40>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4c0:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d4c2:	b002      	add	sp, #8
 800d4c4:	bd10      	pop	{r4, pc}

0800d4c6 <xQueueCreateCountingSemaphore>:
	{
 800d4c6:	b510      	push	{r4, lr}
 800d4c8:	460c      	mov	r4, r1
		configASSERT( uxMaxCount != 0 );
 800d4ca:	b940      	cbnz	r0, 800d4de <xQueueCreateCountingSemaphore+0x18>
 800d4cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4d0:	f383 8811 	msr	BASEPRI, r3
 800d4d4:	f3bf 8f6f 	isb	sy
 800d4d8:	f3bf 8f4f 	dsb	sy
 800d4dc:	e7fe      	b.n	800d4dc <xQueueCreateCountingSemaphore+0x16>
		configASSERT( uxInitialCount <= uxMaxCount );
 800d4de:	4288      	cmp	r0, r1
 800d4e0:	d208      	bcs.n	800d4f4 <xQueueCreateCountingSemaphore+0x2e>
 800d4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d4e6:	f383 8811 	msr	BASEPRI, r3
 800d4ea:	f3bf 8f6f 	isb	sy
 800d4ee:	f3bf 8f4f 	dsb	sy
 800d4f2:	e7fe      	b.n	800d4f2 <xQueueCreateCountingSemaphore+0x2c>
		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 800d4f4:	2202      	movs	r2, #2
 800d4f6:	2100      	movs	r1, #0
 800d4f8:	f7ff ff9c 	bl	800d434 <xQueueGenericCreate>
		if( xHandle != NULL )
 800d4fc:	b100      	cbz	r0, 800d500 <xQueueCreateCountingSemaphore+0x3a>
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800d4fe:	6384      	str	r4, [r0, #56]	@ 0x38
	}
 800d500:	bd10      	pop	{r4, pc}

0800d502 <xQueueGenericSend>:
{
 800d502:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d506:	460f      	mov	r7, r1
 800d508:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d50a:	4604      	mov	r4, r0
{
 800d50c:	9201      	str	r2, [sp, #4]
	configASSERT( pxQueue );
 800d50e:	b940      	cbnz	r0, 800d522 <xQueueGenericSend+0x20>
 800d510:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d514:	f383 8811 	msr	BASEPRI, r3
 800d518:	f3bf 8f6f 	isb	sy
 800d51c:	f3bf 8f4f 	dsb	sy
 800d520:	e7fe      	b.n	800d520 <xQueueGenericSend+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d522:	b951      	cbnz	r1, 800d53a <xQueueGenericSend+0x38>
 800d524:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d526:	b143      	cbz	r3, 800d53a <xQueueGenericSend+0x38>
 800d528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d52c:	f383 8811 	msr	BASEPRI, r3
 800d530:	f3bf 8f6f 	isb	sy
 800d534:	f3bf 8f4f 	dsb	sy
 800d538:	e7fe      	b.n	800d538 <xQueueGenericSend+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d53a:	2e02      	cmp	r6, #2
 800d53c:	d10b      	bne.n	800d556 <xQueueGenericSend+0x54>
 800d53e:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d540:	2b01      	cmp	r3, #1
 800d542:	d008      	beq.n	800d556 <xQueueGenericSend+0x54>
 800d544:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d548:	f383 8811 	msr	BASEPRI, r3
 800d54c:	f3bf 8f6f 	isb	sy
 800d550:	f3bf 8f4f 	dsb	sy
 800d554:	e7fe      	b.n	800d554 <xQueueGenericSend+0x52>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d556:	f001 f82b 	bl	800e5b0 <xTaskGetSchedulerState>
 800d55a:	4605      	mov	r5, r0
 800d55c:	b330      	cbz	r0, 800d5ac <xQueueGenericSend+0xaa>
 800d55e:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d560:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d564:	f7ff fd0e 	bl	800cf84 <vPortEnterCritical>
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d568:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d56a:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d56c:	429a      	cmp	r2, r3
 800d56e:	d301      	bcc.n	800d574 <xQueueGenericSend+0x72>
 800d570:	2e02      	cmp	r6, #2
 800d572:	d127      	bne.n	800d5c4 <xQueueGenericSend+0xc2>
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d574:	4632      	mov	r2, r6
 800d576:	4639      	mov	r1, r7
 800d578:	4620      	mov	r0, r4
 800d57a:	f7ff fe4e 	bl	800d21a <prvCopyDataToQueue>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d57e:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d580:	b11b      	cbz	r3, 800d58a <xQueueGenericSend+0x88>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d582:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d586:	f000 ff7d 	bl	800e484 <xTaskRemoveFromEventList>
					else if( xYieldRequired != pdFALSE )
 800d58a:	b148      	cbz	r0, 800d5a0 <xQueueGenericSend+0x9e>
						queueYIELD_IF_USING_PREEMPTION();
 800d58c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d590:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d594:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d598:	f3bf 8f4f 	dsb	sy
 800d59c:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d5a0:	f7ff fd10 	bl	800cfc4 <vPortExitCritical>
				return pdPASS;
 800d5a4:	2001      	movs	r0, #1
}
 800d5a6:	b004      	add	sp, #16
 800d5a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d5ac:	9b01      	ldr	r3, [sp, #4]
 800d5ae:	2b00      	cmp	r3, #0
 800d5b0:	d0d6      	beq.n	800d560 <xQueueGenericSend+0x5e>
 800d5b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d5b6:	f383 8811 	msr	BASEPRI, r3
 800d5ba:	f3bf 8f6f 	isb	sy
 800d5be:	f3bf 8f4f 	dsb	sy
 800d5c2:	e7fe      	b.n	800d5c2 <xQueueGenericSend+0xc0>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d5c4:	9b01      	ldr	r3, [sp, #4]
 800d5c6:	b91b      	cbnz	r3, 800d5d0 <xQueueGenericSend+0xce>
					taskEXIT_CRITICAL();
 800d5c8:	f7ff fcfc 	bl	800cfc4 <vPortExitCritical>
					return errQUEUE_FULL;
 800d5cc:	2000      	movs	r0, #0
 800d5ce:	e7ea      	b.n	800d5a6 <xQueueGenericSend+0xa4>
				else if( xEntryTimeSet == pdFALSE )
 800d5d0:	b915      	cbnz	r5, 800d5d8 <xQueueGenericSend+0xd6>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5d2:	a802      	add	r0, sp, #8
 800d5d4:	f000 ff98 	bl	800e508 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d5d8:	f7ff fcf4 	bl	800cfc4 <vPortExitCritical>
		vTaskSuspendAll();
 800d5dc:	f000 fd4a 	bl	800e074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5e0:	f7ff fcd0 	bl	800cf84 <vPortEnterCritical>
 800d5e4:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d5e8:	2bff      	cmp	r3, #255	@ 0xff
 800d5ea:	d101      	bne.n	800d5f0 <xQueueGenericSend+0xee>
 800d5ec:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d5f0:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d5f4:	2bff      	cmp	r3, #255	@ 0xff
 800d5f6:	d101      	bne.n	800d5fc <xQueueGenericSend+0xfa>
 800d5f8:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d5fc:	f7ff fce2 	bl	800cfc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d600:	a901      	add	r1, sp, #4
 800d602:	a802      	add	r0, sp, #8
 800d604:	f000 ff8c 	bl	800e520 <xTaskCheckForTimeOut>
 800d608:	bb38      	cbnz	r0, 800d65a <xQueueGenericSend+0x158>

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800d60a:	f7ff fcbb 	bl	800cf84 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800d60e:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d610:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d612:	429a      	cmp	r2, r3
 800d614:	d10e      	bne.n	800d634 <xQueueGenericSend+0x132>
		else
		{
			xReturn = pdFALSE;
		}
	}
	taskEXIT_CRITICAL();
 800d616:	f7ff fcd5 	bl	800cfc4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d61a:	9901      	ldr	r1, [sp, #4]
 800d61c:	f104 0010 	add.w	r0, r4, #16
 800d620:	f000 fef8 	bl	800e414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d624:	4620      	mov	r0, r4
 800d626:	f7ff fe40 	bl	800d2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d62a:	f000 fdc7 	bl	800e1bc <xTaskResumeAll>
 800d62e:	b148      	cbz	r0, 800d644 <xQueueGenericSend+0x142>
 800d630:	2501      	movs	r5, #1
 800d632:	e797      	b.n	800d564 <xQueueGenericSend+0x62>
	taskEXIT_CRITICAL();
 800d634:	f7ff fcc6 	bl	800cfc4 <vPortExitCritical>
				prvUnlockQueue( pxQueue );
 800d638:	4620      	mov	r0, r4
 800d63a:	f7ff fe36 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d63e:	f000 fdbd 	bl	800e1bc <xTaskResumeAll>
 800d642:	e7f5      	b.n	800d630 <xQueueGenericSend+0x12e>
					portYIELD_WITHIN_API();
 800d644:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d648:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d64c:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d650:	f3bf 8f4f 	dsb	sy
 800d654:	f3bf 8f6f 	isb	sy
 800d658:	e7ea      	b.n	800d630 <xQueueGenericSend+0x12e>
			prvUnlockQueue( pxQueue );
 800d65a:	4620      	mov	r0, r4
 800d65c:	f7ff fe25 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d660:	f000 fdac 	bl	800e1bc <xTaskResumeAll>
			return errQUEUE_FULL;
 800d664:	e7b2      	b.n	800d5cc <xQueueGenericSend+0xca>

0800d666 <xQueueCreateMutexStatic>:
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d666:	2200      	movs	r2, #0
	{
 800d668:	460b      	mov	r3, r1
 800d66a:	b513      	push	{r0, r1, r4, lr}
		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800d66c:	4611      	mov	r1, r2
 800d66e:	9000      	str	r0, [sp, #0]
 800d670:	2001      	movs	r0, #1
 800d672:	f7ff fe91 	bl	800d398 <xQueueGenericCreateStatic>
		if( pxNewQueue != NULL )
 800d676:	4604      	mov	r4, r0
 800d678:	b138      	cbz	r0, 800d68a <xQueueCreateMutexStatic+0x24>
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d67a:	2300      	movs	r3, #0
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d67c:	461a      	mov	r2, r3
 800d67e:	4619      	mov	r1, r3
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d680:	6083      	str	r3, [r0, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d682:	6003      	str	r3, [r0, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d684:	60c3      	str	r3, [r0, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d686:	f7ff ff3c 	bl	800d502 <xQueueGenericSend>
	}
 800d68a:	4620      	mov	r0, r4
 800d68c:	b002      	add	sp, #8
 800d68e:	bd10      	pop	{r4, pc}

0800d690 <xQueueGiveMutexRecursive>:
	{
 800d690:	b538      	push	{r3, r4, r5, lr}
		configASSERT( pxMutex );
 800d692:	4604      	mov	r4, r0
 800d694:	b940      	cbnz	r0, 800d6a8 <xQueueGiveMutexRecursive+0x18>
 800d696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d69a:	f383 8811 	msr	BASEPRI, r3
 800d69e:	f3bf 8f6f 	isb	sy
 800d6a2:	f3bf 8f4f 	dsb	sy
 800d6a6:	e7fe      	b.n	800d6a6 <xQueueGiveMutexRecursive+0x16>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800d6a8:	6885      	ldr	r5, [r0, #8]
 800d6aa:	f000 ff7b 	bl	800e5a4 <xTaskGetCurrentTaskHandle>
 800d6ae:	4285      	cmp	r5, r0
 800d6b0:	d10b      	bne.n	800d6ca <xQueueGiveMutexRecursive+0x3a>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 800d6b2:	68e3      	ldr	r3, [r4, #12]
 800d6b4:	3b01      	subs	r3, #1
 800d6b6:	60e3      	str	r3, [r4, #12]
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800d6b8:	b10b      	cbz	r3, 800d6be <xQueueGiveMutexRecursive+0x2e>
			xReturn = pdPASS;
 800d6ba:	2001      	movs	r0, #1
	}
 800d6bc:	bd38      	pop	{r3, r4, r5, pc}
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 800d6be:	461a      	mov	r2, r3
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	4620      	mov	r0, r4
 800d6c4:	f7ff ff1d 	bl	800d502 <xQueueGenericSend>
 800d6c8:	e7f7      	b.n	800d6ba <xQueueGiveMutexRecursive+0x2a>
			xReturn = pdFAIL;
 800d6ca:	2000      	movs	r0, #0
		return xReturn;
 800d6cc:	e7f6      	b.n	800d6bc <xQueueGiveMutexRecursive+0x2c>

0800d6ce <xQueueCreateMutex>:
	{
 800d6ce:	b570      	push	{r4, r5, r6, lr}
 800d6d0:	4606      	mov	r6, r0
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800d6d2:	2050      	movs	r0, #80	@ 0x50
 800d6d4:	f7ff fad8 	bl	800cc88 <pvPortMalloc>
 800d6d8:	4604      	mov	r4, r0
		if( pxNewQueue != NULL )
 800d6da:	b198      	cbz	r0, 800d704 <xQueueCreateMutex+0x36>
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6dc:	2500      	movs	r5, #0
	pxNewQueue->uxLength = uxQueueLength;
 800d6de:	2101      	movs	r1, #1
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d6e0:	6000      	str	r0, [r0, #0]
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800d6e2:	f880 5046 	strb.w	r5, [r0, #70]	@ 0x46
	pxNewQueue->uxItemSize = uxItemSize;
 800d6e6:	e9c0 150f 	strd	r1, r5, [r0, #60]	@ 0x3c
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d6ea:	f7ff fe16 	bl	800d31a <xQueueGenericReset>
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d6ee:	462b      	mov	r3, r5
 800d6f0:	462a      	mov	r2, r5
 800d6f2:	4629      	mov	r1, r5
 800d6f4:	4620      	mov	r0, r4
		pxNewQueue->ucQueueType = ucQueueType;
 800d6f6:	f884 604c 	strb.w	r6, [r4, #76]	@ 0x4c
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800d6fa:	60a5      	str	r5, [r4, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800d6fc:	6025      	str	r5, [r4, #0]
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800d6fe:	60e5      	str	r5, [r4, #12]
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800d700:	f7ff feff 	bl	800d502 <xQueueGenericSend>
	}
 800d704:	4620      	mov	r0, r4
 800d706:	bd70      	pop	{r4, r5, r6, pc}

0800d708 <xQueueGenericSendFromISR>:
{
 800d708:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d70c:	4689      	mov	r9, r1
 800d70e:	4617      	mov	r7, r2
 800d710:	461e      	mov	r6, r3
	configASSERT( pxQueue );
 800d712:	4604      	mov	r4, r0
 800d714:	b940      	cbnz	r0, 800d728 <xQueueGenericSendFromISR+0x20>
 800d716:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d71a:	f383 8811 	msr	BASEPRI, r3
 800d71e:	f3bf 8f6f 	isb	sy
 800d722:	f3bf 8f4f 	dsb	sy
 800d726:	e7fe      	b.n	800d726 <xQueueGenericSendFromISR+0x1e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d728:	b951      	cbnz	r1, 800d740 <xQueueGenericSendFromISR+0x38>
 800d72a:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d72c:	b143      	cbz	r3, 800d740 <xQueueGenericSendFromISR+0x38>
 800d72e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d732:	f383 8811 	msr	BASEPRI, r3
 800d736:	f3bf 8f6f 	isb	sy
 800d73a:	f3bf 8f4f 	dsb	sy
 800d73e:	e7fe      	b.n	800d73e <xQueueGenericSendFromISR+0x36>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d740:	2e02      	cmp	r6, #2
 800d742:	d10b      	bne.n	800d75c <xQueueGenericSendFromISR+0x54>
 800d744:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d746:	2b01      	cmp	r3, #1
 800d748:	d008      	beq.n	800d75c <xQueueGenericSendFromISR+0x54>
 800d74a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d74e:	f383 8811 	msr	BASEPRI, r3
 800d752:	f3bf 8f6f 	isb	sy
 800d756:	f3bf 8f4f 	dsb	sy
 800d75a:	e7fe      	b.n	800d75a <xQueueGenericSendFromISR+0x52>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d75c:	f7ff fd24 	bl	800d1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d760:	f3ef 8811 	mrs	r8, BASEPRI
 800d764:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d768:	f383 8811 	msr	BASEPRI, r3
 800d76c:	f3bf 8f6f 	isb	sy
 800d770:	f3bf 8f4f 	dsb	sy
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d774:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
 800d776:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d778:	429a      	cmp	r2, r3
 800d77a:	d301      	bcc.n	800d780 <xQueueGenericSendFromISR+0x78>
 800d77c:	2e02      	cmp	r6, #2
 800d77e:	d11e      	bne.n	800d7be <xQueueGenericSendFromISR+0xb6>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d780:	f894 5045 	ldrb.w	r5, [r4, #69]	@ 0x45
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d784:	4632      	mov	r2, r6
 800d786:	4649      	mov	r1, r9
 800d788:	4620      	mov	r0, r4
			const int8_t cTxLock = pxQueue->cTxLock;
 800d78a:	b26d      	sxtb	r5, r5
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d78c:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d78e:	f7ff fd44 	bl	800d21a <prvCopyDataToQueue>
			if( cTxLock == queueUNLOCKED )
 800d792:	1c6b      	adds	r3, r5, #1
 800d794:	d10e      	bne.n	800d7b4 <xQueueGenericSendFromISR+0xac>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d796:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d798:	b13b      	cbz	r3, 800d7aa <xQueueGenericSendFromISR+0xa2>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d79a:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d79e:	f000 fe71 	bl	800e484 <xTaskRemoveFromEventList>
 800d7a2:	b110      	cbz	r0, 800d7aa <xQueueGenericSendFromISR+0xa2>
							if( pxHigherPriorityTaskWoken != NULL )
 800d7a4:	b10f      	cbz	r7, 800d7aa <xQueueGenericSendFromISR+0xa2>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d7a6:	2301      	movs	r3, #1
 800d7a8:	603b      	str	r3, [r7, #0]
			xReturn = pdPASS;
 800d7aa:	2001      	movs	r0, #1
	__asm volatile
 800d7ac:	f388 8811 	msr	BASEPRI, r8
}
 800d7b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d7b4:	3501      	adds	r5, #1
 800d7b6:	b26d      	sxtb	r5, r5
 800d7b8:	f884 5045 	strb.w	r5, [r4, #69]	@ 0x45
 800d7bc:	e7f5      	b.n	800d7aa <xQueueGenericSendFromISR+0xa2>
			xReturn = errQUEUE_FULL;
 800d7be:	2000      	movs	r0, #0
 800d7c0:	e7f4      	b.n	800d7ac <xQueueGenericSendFromISR+0xa4>

0800d7c2 <xQueueGiveFromISR>:
{
 800d7c2:	b570      	push	{r4, r5, r6, lr}
 800d7c4:	460d      	mov	r5, r1
	configASSERT( pxQueue );
 800d7c6:	4604      	mov	r4, r0
 800d7c8:	b940      	cbnz	r0, 800d7dc <xQueueGiveFromISR+0x1a>
	__asm volatile
 800d7ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7ce:	f383 8811 	msr	BASEPRI, r3
 800d7d2:	f3bf 8f6f 	isb	sy
 800d7d6:	f3bf 8f4f 	dsb	sy
 800d7da:	e7fe      	b.n	800d7da <xQueueGiveFromISR+0x18>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d7dc:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d7de:	b143      	cbz	r3, 800d7f2 <xQueueGiveFromISR+0x30>
 800d7e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7e4:	f383 8811 	msr	BASEPRI, r3
 800d7e8:	f3bf 8f6f 	isb	sy
 800d7ec:	f3bf 8f4f 	dsb	sy
 800d7f0:	e7fe      	b.n	800d7f0 <xQueueGiveFromISR+0x2e>
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800d7f2:	6803      	ldr	r3, [r0, #0]
 800d7f4:	b953      	cbnz	r3, 800d80c <xQueueGiveFromISR+0x4a>
 800d7f6:	6883      	ldr	r3, [r0, #8]
 800d7f8:	b143      	cbz	r3, 800d80c <xQueueGiveFromISR+0x4a>
 800d7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d7fe:	f383 8811 	msr	BASEPRI, r3
 800d802:	f3bf 8f6f 	isb	sy
 800d806:	f3bf 8f4f 	dsb	sy
 800d80a:	e7fe      	b.n	800d80a <xQueueGiveFromISR+0x48>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d80c:	f7ff fccc 	bl	800d1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800d810:	f3ef 8611 	mrs	r6, BASEPRI
 800d814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d818:	f383 8811 	msr	BASEPRI, r3
 800d81c:	f3bf 8f6f 	isb	sy
 800d820:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d824:	6ba2      	ldr	r2, [r4, #56]	@ 0x38
		if( uxMessagesWaiting < pxQueue->uxLength )
 800d826:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800d828:	4293      	cmp	r3, r2
 800d82a:	d919      	bls.n	800d860 <xQueueGiveFromISR+0x9e>
			const int8_t cTxLock = pxQueue->cTxLock;
 800d82c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d830:	3201      	adds	r2, #1
			if( cTxLock == queueUNLOCKED )
 800d832:	29ff      	cmp	r1, #255	@ 0xff
			const int8_t cTxLock = pxQueue->cTxLock;
 800d834:	b24b      	sxtb	r3, r1
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800d836:	63a2      	str	r2, [r4, #56]	@ 0x38
			if( cTxLock == queueUNLOCKED )
 800d838:	d10d      	bne.n	800d856 <xQueueGiveFromISR+0x94>
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d83a:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 800d83c:	b13b      	cbz	r3, 800d84e <xQueueGiveFromISR+0x8c>
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d83e:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d842:	f000 fe1f 	bl	800e484 <xTaskRemoveFromEventList>
 800d846:	b110      	cbz	r0, 800d84e <xQueueGiveFromISR+0x8c>
							if( pxHigherPriorityTaskWoken != NULL )
 800d848:	b10d      	cbz	r5, 800d84e <xQueueGiveFromISR+0x8c>
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d84a:	2301      	movs	r3, #1
 800d84c:	602b      	str	r3, [r5, #0]
			xReturn = pdPASS;
 800d84e:	2001      	movs	r0, #1
	__asm volatile
 800d850:	f386 8811 	msr	BASEPRI, r6
}
 800d854:	bd70      	pop	{r4, r5, r6, pc}
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d856:	3301      	adds	r3, #1
 800d858:	b25b      	sxtb	r3, r3
 800d85a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800d85e:	e7f6      	b.n	800d84e <xQueueGiveFromISR+0x8c>
			xReturn = errQUEUE_FULL;
 800d860:	2000      	movs	r0, #0
 800d862:	e7f5      	b.n	800d850 <xQueueGiveFromISR+0x8e>

0800d864 <xQueueReceive>:
{
 800d864:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 800d868:	460e      	mov	r6, r1
	configASSERT( ( pxQueue ) );
 800d86a:	4604      	mov	r4, r0
{
 800d86c:	9201      	str	r2, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d86e:	b940      	cbnz	r0, 800d882 <xQueueReceive+0x1e>
	__asm volatile
 800d870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d874:	f383 8811 	msr	BASEPRI, r3
 800d878:	f3bf 8f6f 	isb	sy
 800d87c:	f3bf 8f4f 	dsb	sy
 800d880:	e7fe      	b.n	800d880 <xQueueReceive+0x1c>
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d882:	b951      	cbnz	r1, 800d89a <xQueueReceive+0x36>
 800d884:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800d886:	b143      	cbz	r3, 800d89a <xQueueReceive+0x36>
 800d888:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d88c:	f383 8811 	msr	BASEPRI, r3
 800d890:	f3bf 8f6f 	isb	sy
 800d894:	f3bf 8f4f 	dsb	sy
 800d898:	e7fe      	b.n	800d898 <xQueueReceive+0x34>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d89a:	f000 fe89 	bl	800e5b0 <xTaskGetSchedulerState>
 800d89e:	4605      	mov	r5, r0
 800d8a0:	b318      	cbz	r0, 800d8ea <xQueueReceive+0x86>
 800d8a2:	2500      	movs	r5, #0
		prvLockQueue( pxQueue );
 800d8a4:	f04f 0800 	mov.w	r8, #0
		taskENTER_CRITICAL();
 800d8a8:	f7ff fb6c 	bl	800cf84 <vPortEnterCritical>
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d8ac:	6ba7      	ldr	r7, [r4, #56]	@ 0x38
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d8ae:	b347      	cbz	r7, 800d902 <xQueueReceive+0x9e>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8b0:	3f01      	subs	r7, #1
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d8b2:	4631      	mov	r1, r6
 800d8b4:	4620      	mov	r0, r4
 800d8b6:	f7ff fce3 	bl	800d280 <prvCopyDataFromQueue>
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d8ba:	63a7      	str	r7, [r4, #56]	@ 0x38
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d8bc:	6923      	ldr	r3, [r4, #16]
 800d8be:	b173      	cbz	r3, 800d8de <xQueueReceive+0x7a>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d8c0:	f104 0010 	add.w	r0, r4, #16
 800d8c4:	f000 fdde 	bl	800e484 <xTaskRemoveFromEventList>
 800d8c8:	b148      	cbz	r0, 800d8de <xQueueReceive+0x7a>
						queueYIELD_IF_USING_PREEMPTION();
 800d8ca:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d8ce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d8d2:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d8d6:	f3bf 8f4f 	dsb	sy
 800d8da:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800d8de:	f7ff fb71 	bl	800cfc4 <vPortExitCritical>
				return pdPASS;
 800d8e2:	2001      	movs	r0, #1
}
 800d8e4:	b004      	add	sp, #16
 800d8e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d8ea:	9b01      	ldr	r3, [sp, #4]
 800d8ec:	2b00      	cmp	r3, #0
 800d8ee:	d0d9      	beq.n	800d8a4 <xQueueReceive+0x40>
 800d8f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d8f4:	f383 8811 	msr	BASEPRI, r3
 800d8f8:	f3bf 8f6f 	isb	sy
 800d8fc:	f3bf 8f4f 	dsb	sy
 800d900:	e7fe      	b.n	800d900 <xQueueReceive+0x9c>
				if( xTicksToWait == ( TickType_t ) 0 )
 800d902:	9b01      	ldr	r3, [sp, #4]
 800d904:	b91b      	cbnz	r3, 800d90e <xQueueReceive+0xaa>
					taskEXIT_CRITICAL();
 800d906:	f7ff fb5d 	bl	800cfc4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800d90a:	2000      	movs	r0, #0
 800d90c:	e7ea      	b.n	800d8e4 <xQueueReceive+0x80>
				else if( xEntryTimeSet == pdFALSE )
 800d90e:	b915      	cbnz	r5, 800d916 <xQueueReceive+0xb2>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d910:	a802      	add	r0, sp, #8
 800d912:	f000 fdf9 	bl	800e508 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800d916:	f7ff fb55 	bl	800cfc4 <vPortExitCritical>
		vTaskSuspendAll();
 800d91a:	f000 fbab 	bl	800e074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d91e:	f7ff fb31 	bl	800cf84 <vPortEnterCritical>
 800d922:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800d926:	2bff      	cmp	r3, #255	@ 0xff
 800d928:	d101      	bne.n	800d92e <xQueueReceive+0xca>
 800d92a:	f884 8044 	strb.w	r8, [r4, #68]	@ 0x44
 800d92e:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800d932:	2bff      	cmp	r3, #255	@ 0xff
 800d934:	d101      	bne.n	800d93a <xQueueReceive+0xd6>
 800d936:	f884 8045 	strb.w	r8, [r4, #69]	@ 0x45
 800d93a:	f7ff fb43 	bl	800cfc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d93e:	a901      	add	r1, sp, #4
 800d940:	a802      	add	r0, sp, #8
 800d942:	f000 fded 	bl	800e520 <xTaskCheckForTimeOut>
 800d946:	bb00      	cbnz	r0, 800d98a <xQueueReceive+0x126>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d948:	4620      	mov	r0, r4
 800d94a:	f7ff fc5b 	bl	800d204 <prvIsQueueEmpty>
 800d94e:	b1b0      	cbz	r0, 800d97e <xQueueReceive+0x11a>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d950:	9901      	ldr	r1, [sp, #4]
 800d952:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800d956:	f000 fd5d 	bl	800e414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d95a:	4620      	mov	r0, r4
 800d95c:	f7ff fca5 	bl	800d2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d960:	f000 fc2c 	bl	800e1bc <xTaskResumeAll>
 800d964:	b948      	cbnz	r0, 800d97a <xQueueReceive+0x116>
					portYIELD_WITHIN_API();
 800d966:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800d96a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800d96e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800d972:	f3bf 8f4f 	dsb	sy
 800d976:	f3bf 8f6f 	isb	sy
 800d97a:	2501      	movs	r5, #1
 800d97c:	e794      	b.n	800d8a8 <xQueueReceive+0x44>
				prvUnlockQueue( pxQueue );
 800d97e:	4620      	mov	r0, r4
 800d980:	f7ff fc93 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d984:	f000 fc1a 	bl	800e1bc <xTaskResumeAll>
 800d988:	e7f7      	b.n	800d97a <xQueueReceive+0x116>
			prvUnlockQueue( pxQueue );
 800d98a:	4620      	mov	r0, r4
 800d98c:	f7ff fc8d 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d990:	f000 fc14 	bl	800e1bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d994:	4620      	mov	r0, r4
 800d996:	f7ff fc35 	bl	800d204 <prvIsQueueEmpty>
 800d99a:	2800      	cmp	r0, #0
 800d99c:	d0ed      	beq.n	800d97a <xQueueReceive+0x116>
 800d99e:	e7b4      	b.n	800d90a <xQueueReceive+0xa6>

0800d9a0 <xQueueSemaphoreTake>:
{
 800d9a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 800d9a2:	b085      	sub	sp, #20
	configASSERT( ( pxQueue ) );
 800d9a4:	4604      	mov	r4, r0
{
 800d9a6:	9101      	str	r1, [sp, #4]
	configASSERT( ( pxQueue ) );
 800d9a8:	b940      	cbnz	r0, 800d9bc <xQueueSemaphoreTake+0x1c>
 800d9aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9ae:	f383 8811 	msr	BASEPRI, r3
 800d9b2:	f3bf 8f6f 	isb	sy
 800d9b6:	f3bf 8f4f 	dsb	sy
 800d9ba:	e7fe      	b.n	800d9ba <xQueueSemaphoreTake+0x1a>
	configASSERT( pxQueue->uxItemSize == 0 );
 800d9bc:	6c05      	ldr	r5, [r0, #64]	@ 0x40
 800d9be:	b145      	cbz	r5, 800d9d2 <xQueueSemaphoreTake+0x32>
 800d9c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800d9c4:	f383 8811 	msr	BASEPRI, r3
 800d9c8:	f3bf 8f6f 	isb	sy
 800d9cc:	f3bf 8f4f 	dsb	sy
 800d9d0:	e7fe      	b.n	800d9d0 <xQueueSemaphoreTake+0x30>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d9d2:	f000 fded 	bl	800e5b0 <xTaskGetSchedulerState>
 800d9d6:	4606      	mov	r6, r0
 800d9d8:	b320      	cbz	r0, 800da24 <xQueueSemaphoreTake+0x84>
 800d9da:	462e      	mov	r6, r5
		prvLockQueue( pxQueue );
 800d9dc:	2700      	movs	r7, #0
		taskENTER_CRITICAL();
 800d9de:	f7ff fad1 	bl	800cf84 <vPortEnterCritical>
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800d9e2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800d9e4:	b353      	cbz	r3, 800da3c <xQueueSemaphoreTake+0x9c>
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800d9e6:	3b01      	subs	r3, #1
 800d9e8:	63a3      	str	r3, [r4, #56]	@ 0x38
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	b913      	cbnz	r3, 800d9f4 <xQueueSemaphoreTake+0x54>
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800d9ee:	f000 febd 	bl	800e76c <pvTaskIncrementMutexHeldCount>
 800d9f2:	60a0      	str	r0, [r4, #8]
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d9f4:	6923      	ldr	r3, [r4, #16]
 800d9f6:	b173      	cbz	r3, 800da16 <xQueueSemaphoreTake+0x76>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d9f8:	f104 0010 	add.w	r0, r4, #16
 800d9fc:	f000 fd42 	bl	800e484 <xTaskRemoveFromEventList>
 800da00:	b148      	cbz	r0, 800da16 <xQueueSemaphoreTake+0x76>
						queueYIELD_IF_USING_PREEMPTION();
 800da02:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800da06:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800da0a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800da0e:	f3bf 8f4f 	dsb	sy
 800da12:	f3bf 8f6f 	isb	sy
				taskEXIT_CRITICAL();
 800da16:	f7ff fad5 	bl	800cfc4 <vPortExitCritical>
				return pdPASS;
 800da1a:	2001      	movs	r0, #1
}
 800da1c:	b005      	add	sp, #20
 800da1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800da20:	4635      	mov	r5, r6
 800da22:	e7db      	b.n	800d9dc <xQueueSemaphoreTake+0x3c>
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800da24:	9b01      	ldr	r3, [sp, #4]
 800da26:	2b00      	cmp	r3, #0
 800da28:	d0fa      	beq.n	800da20 <xQueueSemaphoreTake+0x80>
 800da2a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da2e:	f383 8811 	msr	BASEPRI, r3
 800da32:	f3bf 8f6f 	isb	sy
 800da36:	f3bf 8f4f 	dsb	sy
 800da3a:	e7fe      	b.n	800da3a <xQueueSemaphoreTake+0x9a>
				if( xTicksToWait == ( TickType_t ) 0 )
 800da3c:	9b01      	ldr	r3, [sp, #4]
 800da3e:	b953      	cbnz	r3, 800da56 <xQueueSemaphoreTake+0xb6>
						configASSERT( xInheritanceOccurred == pdFALSE );
 800da40:	2d00      	cmp	r5, #0
 800da42:	d066      	beq.n	800db12 <xQueueSemaphoreTake+0x172>
 800da44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800da48:	f383 8811 	msr	BASEPRI, r3
 800da4c:	f3bf 8f6f 	isb	sy
 800da50:	f3bf 8f4f 	dsb	sy
 800da54:	e7fe      	b.n	800da54 <xQueueSemaphoreTake+0xb4>
				else if( xEntryTimeSet == pdFALSE )
 800da56:	b916      	cbnz	r6, 800da5e <xQueueSemaphoreTake+0xbe>
					vTaskInternalSetTimeOutState( &xTimeOut );
 800da58:	a802      	add	r0, sp, #8
 800da5a:	f000 fd55 	bl	800e508 <vTaskInternalSetTimeOutState>
		taskEXIT_CRITICAL();
 800da5e:	f7ff fab1 	bl	800cfc4 <vPortExitCritical>
		vTaskSuspendAll();
 800da62:	f000 fb07 	bl	800e074 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800da66:	f7ff fa8d 	bl	800cf84 <vPortEnterCritical>
 800da6a:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800da6e:	2bff      	cmp	r3, #255	@ 0xff
 800da70:	d101      	bne.n	800da76 <xQueueSemaphoreTake+0xd6>
 800da72:	f884 7044 	strb.w	r7, [r4, #68]	@ 0x44
 800da76:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800da7a:	2bff      	cmp	r3, #255	@ 0xff
 800da7c:	d101      	bne.n	800da82 <xQueueSemaphoreTake+0xe2>
 800da7e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800da82:	f7ff fa9f 	bl	800cfc4 <vPortExitCritical>
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800da86:	a901      	add	r1, sp, #4
 800da88:	a802      	add	r0, sp, #8
 800da8a:	f000 fd49 	bl	800e520 <xTaskCheckForTimeOut>
 800da8e:	bb50      	cbnz	r0, 800dae6 <xQueueSemaphoreTake+0x146>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800da90:	4620      	mov	r0, r4
 800da92:	f7ff fbb7 	bl	800d204 <prvIsQueueEmpty>
 800da96:	b300      	cbz	r0, 800dada <xQueueSemaphoreTake+0x13a>
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800da98:	6823      	ldr	r3, [r4, #0]
 800da9a:	b93b      	cbnz	r3, 800daac <xQueueSemaphoreTake+0x10c>
						taskENTER_CRITICAL();
 800da9c:	f7ff fa72 	bl	800cf84 <vPortEnterCritical>
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800daa0:	68a0      	ldr	r0, [r4, #8]
 800daa2:	f000 fd95 	bl	800e5d0 <xTaskPriorityInherit>
 800daa6:	4605      	mov	r5, r0
						taskEXIT_CRITICAL();
 800daa8:	f7ff fa8c 	bl	800cfc4 <vPortExitCritical>
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800daac:	9901      	ldr	r1, [sp, #4]
 800daae:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dab2:	f000 fcaf 	bl	800e414 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800dab6:	4620      	mov	r0, r4
 800dab8:	f7ff fbf7 	bl	800d2aa <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800dabc:	f000 fb7e 	bl	800e1bc <xTaskResumeAll>
 800dac0:	b948      	cbnz	r0, 800dad6 <xQueueSemaphoreTake+0x136>
					portYIELD_WITHIN_API();
 800dac2:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800daca:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dace:	f3bf 8f4f 	dsb	sy
 800dad2:	f3bf 8f6f 	isb	sy
 800dad6:	2601      	movs	r6, #1
 800dad8:	e781      	b.n	800d9de <xQueueSemaphoreTake+0x3e>
				prvUnlockQueue( pxQueue );
 800dada:	4620      	mov	r0, r4
 800dadc:	f7ff fbe5 	bl	800d2aa <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800dae0:	f000 fb6c 	bl	800e1bc <xTaskResumeAll>
 800dae4:	e7f7      	b.n	800dad6 <xQueueSemaphoreTake+0x136>
			prvUnlockQueue( pxQueue );
 800dae6:	4620      	mov	r0, r4
 800dae8:	f7ff fbdf 	bl	800d2aa <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800daec:	f000 fb66 	bl	800e1bc <xTaskResumeAll>
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800daf0:	4620      	mov	r0, r4
 800daf2:	f7ff fb87 	bl	800d204 <prvIsQueueEmpty>
 800daf6:	2800      	cmp	r0, #0
 800daf8:	d0ed      	beq.n	800dad6 <xQueueSemaphoreTake+0x136>
					if( xInheritanceOccurred != pdFALSE )
 800dafa:	b165      	cbz	r5, 800db16 <xQueueSemaphoreTake+0x176>
						taskENTER_CRITICAL();
 800dafc:	f7ff fa42 	bl	800cf84 <vPortEnterCritical>
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800db00:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 800db02:	b119      	cbz	r1, 800db0c <xQueueSemaphoreTake+0x16c>
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800db04:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800db06:	6819      	ldr	r1, [r3, #0]
 800db08:	f1c1 0138 	rsb	r1, r1, #56	@ 0x38
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800db0c:	68a0      	ldr	r0, [r4, #8]
 800db0e:	f000 fddf 	bl	800e6d0 <vTaskPriorityDisinheritAfterTimeout>
						taskEXIT_CRITICAL();
 800db12:	f7ff fa57 	bl	800cfc4 <vPortExitCritical>
					return errQUEUE_EMPTY;
 800db16:	2000      	movs	r0, #0
 800db18:	e780      	b.n	800da1c <xQueueSemaphoreTake+0x7c>

0800db1a <xQueueTakeMutexRecursive>:
	{
 800db1a:	b570      	push	{r4, r5, r6, lr}
 800db1c:	460d      	mov	r5, r1
		configASSERT( pxMutex );
 800db1e:	4604      	mov	r4, r0
 800db20:	b940      	cbnz	r0, 800db34 <xQueueTakeMutexRecursive+0x1a>
 800db22:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db26:	f383 8811 	msr	BASEPRI, r3
 800db2a:	f3bf 8f6f 	isb	sy
 800db2e:	f3bf 8f4f 	dsb	sy
 800db32:	e7fe      	b.n	800db32 <xQueueTakeMutexRecursive+0x18>
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 800db34:	6886      	ldr	r6, [r0, #8]
 800db36:	f000 fd35 	bl	800e5a4 <xTaskGetCurrentTaskHandle>
 800db3a:	4286      	cmp	r6, r0
 800db3c:	d104      	bne.n	800db48 <xQueueTakeMutexRecursive+0x2e>
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db3e:	68e3      	ldr	r3, [r4, #12]
			xReturn = pdPASS;
 800db40:	2001      	movs	r0, #1
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db42:	3301      	adds	r3, #1
 800db44:	60e3      	str	r3, [r4, #12]
	}
 800db46:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 800db48:	4629      	mov	r1, r5
 800db4a:	4620      	mov	r0, r4
 800db4c:	f7ff ff28 	bl	800d9a0 <xQueueSemaphoreTake>
			if( xReturn != pdFAIL )
 800db50:	2800      	cmp	r0, #0
 800db52:	d0f8      	beq.n	800db46 <xQueueTakeMutexRecursive+0x2c>
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 800db54:	68e3      	ldr	r3, [r4, #12]
 800db56:	3301      	adds	r3, #1
 800db58:	60e3      	str	r3, [r4, #12]
 800db5a:	e7f4      	b.n	800db46 <xQueueTakeMutexRecursive+0x2c>

0800db5c <xQueueReceiveFromISR>:
{
 800db5c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db60:	4689      	mov	r9, r1
 800db62:	4690      	mov	r8, r2
	configASSERT( pxQueue );
 800db64:	4604      	mov	r4, r0
 800db66:	b940      	cbnz	r0, 800db7a <xQueueReceiveFromISR+0x1e>
 800db68:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db6c:	f383 8811 	msr	BASEPRI, r3
 800db70:	f3bf 8f6f 	isb	sy
 800db74:	f3bf 8f4f 	dsb	sy
 800db78:	e7fe      	b.n	800db78 <xQueueReceiveFromISR+0x1c>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800db7a:	b951      	cbnz	r1, 800db92 <xQueueReceiveFromISR+0x36>
 800db7c:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 800db7e:	b143      	cbz	r3, 800db92 <xQueueReceiveFromISR+0x36>
 800db80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db84:	f383 8811 	msr	BASEPRI, r3
 800db88:	f3bf 8f6f 	isb	sy
 800db8c:	f3bf 8f4f 	dsb	sy
 800db90:	e7fe      	b.n	800db90 <xQueueReceiveFromISR+0x34>
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800db92:	f7ff fb09 	bl	800d1a8 <vPortValidateInterruptPriority>
	__asm volatile
 800db96:	f3ef 8711 	mrs	r7, BASEPRI
 800db9a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800db9e:	f383 8811 	msr	BASEPRI, r3
 800dba2:	f3bf 8f6f 	isb	sy
 800dba6:	f3bf 8f4f 	dsb	sy
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800dbaa:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800dbac:	b30d      	cbz	r5, 800dbf2 <xQueueReceiveFromISR+0x96>
			const int8_t cRxLock = pxQueue->cRxLock;
 800dbae:	f894 6044 	ldrb.w	r6, [r4, #68]	@ 0x44
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbb2:	4649      	mov	r1, r9
 800dbb4:	4620      	mov	r0, r4
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbb6:	3d01      	subs	r5, #1
			const int8_t cRxLock = pxQueue->cRxLock;
 800dbb8:	b276      	sxtb	r6, r6
			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800dbba:	f7ff fb61 	bl	800d280 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800dbbe:	63a5      	str	r5, [r4, #56]	@ 0x38
			if( cRxLock == queueUNLOCKED )
 800dbc0:	1c73      	adds	r3, r6, #1
 800dbc2:	d111      	bne.n	800dbe8 <xQueueReceiveFromISR+0x8c>
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dbc4:	6923      	ldr	r3, [r4, #16]
 800dbc6:	b153      	cbz	r3, 800dbde <xQueueReceiveFromISR+0x82>
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dbc8:	f104 0010 	add.w	r0, r4, #16
 800dbcc:	f000 fc5a 	bl	800e484 <xTaskRemoveFromEventList>
 800dbd0:	b128      	cbz	r0, 800dbde <xQueueReceiveFromISR+0x82>
						if( pxHigherPriorityTaskWoken != NULL )
 800dbd2:	f1b8 0f00 	cmp.w	r8, #0
 800dbd6:	d002      	beq.n	800dbde <xQueueReceiveFromISR+0x82>
							*pxHigherPriorityTaskWoken = pdTRUE;
 800dbd8:	2301      	movs	r3, #1
 800dbda:	f8c8 3000 	str.w	r3, [r8]
			xReturn = pdPASS;
 800dbde:	2001      	movs	r0, #1
	__asm volatile
 800dbe0:	f387 8811 	msr	BASEPRI, r7
}
 800dbe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800dbe8:	3601      	adds	r6, #1
 800dbea:	b276      	sxtb	r6, r6
 800dbec:	f884 6044 	strb.w	r6, [r4, #68]	@ 0x44
 800dbf0:	e7f5      	b.n	800dbde <xQueueReceiveFromISR+0x82>
			xReturn = pdFAIL;
 800dbf2:	4628      	mov	r0, r5
 800dbf4:	e7f4      	b.n	800dbe0 <xQueueReceiveFromISR+0x84>
	...

0800dbf8 <vQueueAddToRegistry>:
	{
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dbf8:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbfa:	4a07      	ldr	r2, [pc, #28]	@ (800dc18 <vQueueAddToRegistry+0x20>)
	{
 800dbfc:	b530      	push	{r4, r5, lr}
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800dbfe:	f852 5033 	ldr.w	r5, [r2, r3, lsl #3]
 800dc02:	eb02 04c3 	add.w	r4, r2, r3, lsl #3
 800dc06:	b91d      	cbnz	r5, 800dc10 <vQueueAddToRegistry+0x18>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800dc08:	f842 1033 	str.w	r1, [r2, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800dc0c:	6060      	str	r0, [r4, #4]
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dc0e:	bd30      	pop	{r4, r5, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc10:	3301      	adds	r3, #1
 800dc12:	2b08      	cmp	r3, #8
 800dc14:	d1f3      	bne.n	800dbfe <vQueueAddToRegistry+0x6>
 800dc16:	e7fa      	b.n	800dc0e <vQueueAddToRegistry+0x16>
 800dc18:	24024d34 	.word	0x24024d34

0800dc1c <vQueueUnregisterQueue>:
	{
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc1c:	2300      	movs	r3, #0
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc1e:	4a09      	ldr	r2, [pc, #36]	@ (800dc44 <vQueueUnregisterQueue+0x28>)
	{
 800dc20:	b510      	push	{r4, lr}
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800dc22:	f852 1033 	ldr.w	r1, [r2, r3, lsl #3]
 800dc26:	00dc      	lsls	r4, r3, #3
 800dc28:	4281      	cmp	r1, r0
 800dc2a:	d106      	bne.n	800dc3a <vQueueUnregisterQueue+0x1e>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800dc2c:	4a06      	ldr	r2, [pc, #24]	@ (800dc48 <vQueueUnregisterQueue+0x2c>)
 800dc2e:	2100      	movs	r1, #0
 800dc30:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 800dc34:	4422      	add	r2, r4
 800dc36:	6051      	str	r1, [r2, #4]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 800dc38:	bd10      	pop	{r4, pc}
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800dc3a:	3301      	adds	r3, #1
 800dc3c:	2b08      	cmp	r3, #8
 800dc3e:	d1f0      	bne.n	800dc22 <vQueueUnregisterQueue+0x6>
 800dc40:	e7fa      	b.n	800dc38 <vQueueUnregisterQueue+0x1c>
 800dc42:	bf00      	nop
 800dc44:	24024d38 	.word	0x24024d38
 800dc48:	24024d34 	.word	0x24024d34

0800dc4c <vQueueDelete>:
{
 800dc4c:	b510      	push	{r4, lr}
	configASSERT( pxQueue );
 800dc4e:	b940      	cbnz	r0, 800dc62 <vQueueDelete+0x16>
	__asm volatile
 800dc50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dc54:	f383 8811 	msr	BASEPRI, r3
 800dc58:	f3bf 8f6f 	isb	sy
 800dc5c:	f3bf 8f4f 	dsb	sy
 800dc60:	e7fe      	b.n	800dc60 <vQueueDelete+0x14>
		vQueueUnregisterQueue( pxQueue );
 800dc62:	f7ff ffdb 	bl	800dc1c <vQueueUnregisterQueue>
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 800dc66:	f890 3046 	ldrb.w	r3, [r0, #70]	@ 0x46
 800dc6a:	b91b      	cbnz	r3, 800dc74 <vQueueDelete+0x28>
}
 800dc6c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
			vPortFree( pxQueue );
 800dc70:	f7ff b8a2 	b.w	800cdb8 <vPortFree>
}
 800dc74:	bd10      	pop	{r4, pc}

0800dc76 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dc76:	b570      	push	{r4, r5, r6, lr}
 800dc78:	4604      	mov	r4, r0
 800dc7a:	460d      	mov	r5, r1
 800dc7c:	4616      	mov	r6, r2
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dc7e:	f7ff f981 	bl	800cf84 <vPortEnterCritical>
 800dc82:	f894 3044 	ldrb.w	r3, [r4, #68]	@ 0x44
 800dc86:	2bff      	cmp	r3, #255	@ 0xff
 800dc88:	d102      	bne.n	800dc90 <vQueueWaitForMessageRestricted+0x1a>
 800dc8a:	2300      	movs	r3, #0
 800dc8c:	f884 3044 	strb.w	r3, [r4, #68]	@ 0x44
 800dc90:	f894 3045 	ldrb.w	r3, [r4, #69]	@ 0x45
 800dc94:	2bff      	cmp	r3, #255	@ 0xff
 800dc96:	d102      	bne.n	800dc9e <vQueueWaitForMessageRestricted+0x28>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	f884 3045 	strb.w	r3, [r4, #69]	@ 0x45
 800dc9e:	f7ff f991 	bl	800cfc4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dca2:	6ba3      	ldr	r3, [r4, #56]	@ 0x38
 800dca4:	b92b      	cbnz	r3, 800dcb2 <vQueueWaitForMessageRestricted+0x3c>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dca6:	4632      	mov	r2, r6
 800dca8:	4629      	mov	r1, r5
 800dcaa:	f104 0024 	add.w	r0, r4, #36	@ 0x24
 800dcae:	f000 fbcb 	bl	800e448 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dcb2:	4620      	mov	r0, r4
	}
 800dcb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
		prvUnlockQueue( pxQueue );
 800dcb8:	f7ff baf7 	b.w	800d2aa <prvUnlockQueue>

0800dcbc <prvAddNewTaskToReadyList>:
	}
}
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800dcbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dcc0:	4604      	mov	r4, r0
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800dcc2:	f7ff f95f 	bl	800cf84 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800dcc6:	4b2f      	ldr	r3, [pc, #188]	@ (800dd84 <prvAddNewTaskToReadyList+0xc8>)
		if( pxCurrentTCB == NULL )
 800dcc8:	4e2f      	ldr	r6, [pc, #188]	@ (800dd88 <prvAddNewTaskToReadyList+0xcc>)
		uxCurrentNumberOfTasks++;
 800dcca:	681a      	ldr	r2, [r3, #0]
 800dccc:	4f2f      	ldr	r7, [pc, #188]	@ (800dd8c <prvAddNewTaskToReadyList+0xd0>)
 800dcce:	3201      	adds	r2, #1
 800dcd0:	601a      	str	r2, [r3, #0]
		if( pxCurrentTCB == NULL )
 800dcd2:	6835      	ldr	r5, [r6, #0]
 800dcd4:	2d00      	cmp	r5, #0
 800dcd6:	d14a      	bne.n	800dd6e <prvAddNewTaskToReadyList+0xb2>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800dcd8:	6034      	str	r4, [r6, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800dcda:	681b      	ldr	r3, [r3, #0]
 800dcdc:	2b01      	cmp	r3, #1
 800dcde:	d11f      	bne.n	800dd20 <prvAddNewTaskToReadyList+0x64>
 800dce0:	46b8      	mov	r8, r7

static void prvInitialiseTaskLists( void )
{
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dce2:	3501      	adds	r5, #1
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800dce4:	4640      	mov	r0, r8
 800dce6:	f7ff f8a5 	bl	800ce34 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800dcea:	f108 0814 	add.w	r8, r8, #20
 800dcee:	2d38      	cmp	r5, #56	@ 0x38
 800dcf0:	d1f7      	bne.n	800dce2 <prvAddNewTaskToReadyList+0x26>
	}

	vListInitialise( &xDelayedTaskList1 );
 800dcf2:	f8df 80c0 	ldr.w	r8, [pc, #192]	@ 800ddb4 <prvAddNewTaskToReadyList+0xf8>
	vListInitialise( &xDelayedTaskList2 );
 800dcf6:	4d26      	ldr	r5, [pc, #152]	@ (800dd90 <prvAddNewTaskToReadyList+0xd4>)
	vListInitialise( &xDelayedTaskList1 );
 800dcf8:	4640      	mov	r0, r8
 800dcfa:	f7ff f89b 	bl	800ce34 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800dcfe:	4628      	mov	r0, r5
 800dd00:	f7ff f898 	bl	800ce34 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800dd04:	4823      	ldr	r0, [pc, #140]	@ (800dd94 <prvAddNewTaskToReadyList+0xd8>)
 800dd06:	f7ff f895 	bl	800ce34 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800dd0a:	4823      	ldr	r0, [pc, #140]	@ (800dd98 <prvAddNewTaskToReadyList+0xdc>)
 800dd0c:	f7ff f892 	bl	800ce34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800dd10:	4822      	ldr	r0, [pc, #136]	@ (800dd9c <prvAddNewTaskToReadyList+0xe0>)
 800dd12:	f7ff f88f 	bl	800ce34 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800dd16:	4b22      	ldr	r3, [pc, #136]	@ (800dda0 <prvAddNewTaskToReadyList+0xe4>)
 800dd18:	f8c3 8000 	str.w	r8, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800dd1c:	4b21      	ldr	r3, [pc, #132]	@ (800dda4 <prvAddNewTaskToReadyList+0xe8>)
 800dd1e:	601d      	str	r5, [r3, #0]
		uxTaskNumber++;
 800dd20:	4a21      	ldr	r2, [pc, #132]	@ (800dda8 <prvAddNewTaskToReadyList+0xec>)
 800dd22:	6813      	ldr	r3, [r2, #0]
 800dd24:	3301      	adds	r3, #1
 800dd26:	6013      	str	r3, [r2, #0]
		prvAddTaskToReadyList( pxNewTCB );
 800dd28:	4a20      	ldr	r2, [pc, #128]	@ (800ddac <prvAddNewTaskToReadyList+0xf0>)
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800dd2a:	6463      	str	r3, [r4, #68]	@ 0x44
		prvAddTaskToReadyList( pxNewTCB );
 800dd2c:	6811      	ldr	r1, [r2, #0]
 800dd2e:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd30:	428b      	cmp	r3, r1
 800dd32:	d900      	bls.n	800dd36 <prvAddNewTaskToReadyList+0x7a>
 800dd34:	6013      	str	r3, [r2, #0]
 800dd36:	2014      	movs	r0, #20
 800dd38:	1d21      	adds	r1, r4, #4
 800dd3a:	fb00 7003 	mla	r0, r0, r3, r7
 800dd3e:	f7ff f887 	bl	800ce50 <vListInsertEnd>
	taskEXIT_CRITICAL();
 800dd42:	f7ff f93f 	bl	800cfc4 <vPortExitCritical>
	if( xSchedulerRunning != pdFALSE )
 800dd46:	4b1a      	ldr	r3, [pc, #104]	@ (800ddb0 <prvAddNewTaskToReadyList+0xf4>)
 800dd48:	681b      	ldr	r3, [r3, #0]
 800dd4a:	b173      	cbz	r3, 800dd6a <prvAddNewTaskToReadyList+0xae>
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800dd4c:	6833      	ldr	r3, [r6, #0]
 800dd4e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800dd50:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800dd52:	429a      	cmp	r2, r3
 800dd54:	d209      	bcs.n	800dd6a <prvAddNewTaskToReadyList+0xae>
			taskYIELD_IF_USING_PREEMPTION();
 800dd56:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dd5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dd5e:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dd62:	f3bf 8f4f 	dsb	sy
 800dd66:	f3bf 8f6f 	isb	sy
}
 800dd6a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( xSchedulerRunning == pdFALSE )
 800dd6e:	4b10      	ldr	r3, [pc, #64]	@ (800ddb0 <prvAddNewTaskToReadyList+0xf4>)
 800dd70:	681a      	ldr	r2, [r3, #0]
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd72:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
			if( xSchedulerRunning == pdFALSE )
 800dd74:	2a00      	cmp	r2, #0
 800dd76:	d1d3      	bne.n	800dd20 <prvAddNewTaskToReadyList+0x64>
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800dd78:	6832      	ldr	r2, [r6, #0]
 800dd7a:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800dd7c:	429a      	cmp	r2, r3
 800dd7e:	d8cf      	bhi.n	800dd20 <prvAddNewTaskToReadyList+0x64>
					pxCurrentTCB = pxNewTCB;
 800dd80:	6034      	str	r4, [r6, #0]
 800dd82:	e7cd      	b.n	800dd20 <prvAddNewTaskToReadyList+0x64>
 800dd84:	24024d98 	.word	0x24024d98
 800dd88:	2402526c 	.word	0x2402526c
 800dd8c:	24024e0c 	.word	0x24024e0c
 800dd90:	24024de4 	.word	0x24024de4
 800dd94:	24024dc8 	.word	0x24024dc8
 800dd98:	24024db4 	.word	0x24024db4
 800dd9c:	24024d9c 	.word	0x24024d9c
 800dda0:	24024de0 	.word	0x24024de0
 800dda4:	24024ddc 	.word	0x24024ddc
 800dda8:	24024d7c 	.word	0x24024d7c
 800ddac:	24024d90 	.word	0x24024d90
 800ddb0:	24024d8c 	.word	0x24024d8c
 800ddb4:	24024df8 	.word	0x24024df8

0800ddb8 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800ddb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800ddba:	4b15      	ldr	r3, [pc, #84]	@ (800de10 <prvAddCurrentTaskToDelayedList+0x58>)
{
 800ddbc:	4606      	mov	r6, r0
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddbe:	4d15      	ldr	r5, [pc, #84]	@ (800de14 <prvAddCurrentTaskToDelayedList+0x5c>)
{
 800ddc0:	460f      	mov	r7, r1
const TickType_t xConstTickCount = xTickCount;
 800ddc2:	681c      	ldr	r4, [r3, #0]
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800ddc4:	6828      	ldr	r0, [r5, #0]
 800ddc6:	3004      	adds	r0, #4
 800ddc8:	f7ff f864 	bl	800ce94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800ddcc:	1c73      	adds	r3, r6, #1
 800ddce:	d107      	bne.n	800dde0 <prvAddCurrentTaskToDelayedList+0x28>
 800ddd0:	b137      	cbz	r7, 800dde0 <prvAddCurrentTaskToDelayedList+0x28>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddd2:	6829      	ldr	r1, [r5, #0]
 800ddd4:	4810      	ldr	r0, [pc, #64]	@ (800de18 <prvAddCurrentTaskToDelayedList+0x60>)
 800ddd6:	3104      	adds	r1, #4

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800ddd8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dddc:	f7ff b838 	b.w	800ce50 <vListInsertEnd>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800dde0:	19a4      	adds	r4, r4, r6
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800dde2:	682b      	ldr	r3, [r5, #0]
 800dde4:	605c      	str	r4, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800dde6:	d307      	bcc.n	800ddf8 <prvAddCurrentTaskToDelayedList+0x40>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800dde8:	4b0c      	ldr	r3, [pc, #48]	@ (800de1c <prvAddCurrentTaskToDelayedList+0x64>)
 800ddea:	6818      	ldr	r0, [r3, #0]
 800ddec:	6829      	ldr	r1, [r5, #0]
}
 800ddee:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddf2:	3104      	adds	r1, #4
 800ddf4:	f7ff b837 	b.w	800ce66 <vListInsert>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800ddf8:	4b09      	ldr	r3, [pc, #36]	@ (800de20 <prvAddCurrentTaskToDelayedList+0x68>)
 800ddfa:	6818      	ldr	r0, [r3, #0]
 800ddfc:	6829      	ldr	r1, [r5, #0]
 800ddfe:	3104      	adds	r1, #4
 800de00:	f7ff f831 	bl	800ce66 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800de04:	4b07      	ldr	r3, [pc, #28]	@ (800de24 <prvAddCurrentTaskToDelayedList+0x6c>)
 800de06:	681a      	ldr	r2, [r3, #0]
 800de08:	42a2      	cmp	r2, r4
 800de0a:	d900      	bls.n	800de0e <prvAddCurrentTaskToDelayedList+0x56>
					xNextTaskUnblockTime = xTimeToWake;
 800de0c:	601c      	str	r4, [r3, #0]
}
 800de0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800de10:	24024d94 	.word	0x24024d94
 800de14:	2402526c 	.word	0x2402526c
 800de18:	24024d9c 	.word	0x24024d9c
 800de1c:	24024ddc 	.word	0x24024ddc
 800de20:	24024de0 	.word	0x24024de0
 800de24:	24024d78 	.word	0x24024d78

0800de28 <prvResetNextTaskUnblockTime>:
	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800de28:	4a06      	ldr	r2, [pc, #24]	@ (800de44 <prvResetNextTaskUnblockTime+0x1c>)
 800de2a:	6813      	ldr	r3, [r2, #0]
 800de2c:	6819      	ldr	r1, [r3, #0]
 800de2e:	4b06      	ldr	r3, [pc, #24]	@ (800de48 <prvResetNextTaskUnblockTime+0x20>)
 800de30:	b919      	cbnz	r1, 800de3a <prvResetNextTaskUnblockTime+0x12>
		xNextTaskUnblockTime = portMAX_DELAY;
 800de32:	f04f 32ff 	mov.w	r2, #4294967295
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de36:	601a      	str	r2, [r3, #0]
}
 800de38:	4770      	bx	lr
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de3a:	6812      	ldr	r2, [r2, #0]
 800de3c:	68d2      	ldr	r2, [r2, #12]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800de3e:	68d2      	ldr	r2, [r2, #12]
 800de40:	6852      	ldr	r2, [r2, #4]
 800de42:	e7f8      	b.n	800de36 <prvResetNextTaskUnblockTime+0xe>
 800de44:	24024de0 	.word	0x24024de0
 800de48:	24024d78 	.word	0x24024d78

0800de4c <prvDeleteTCB>:
	{
 800de4c:	b510      	push	{r4, lr}
 800de4e:	4604      	mov	r4, r0
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800de50:	3058      	adds	r0, #88	@ 0x58
 800de52:	f013 ff57 	bl	8021d04 <_reclaim_reent>
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800de56:	f894 30a9 	ldrb.w	r3, [r4, #169]	@ 0xa9
 800de5a:	b93b      	cbnz	r3, 800de6c <prvDeleteTCB+0x20>
				vPortFree( pxTCB->pxStack );
 800de5c:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800de5e:	f7fe ffab 	bl	800cdb8 <vPortFree>
				vPortFree( pxTCB );
 800de62:	4620      	mov	r0, r4
	}
 800de64:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
				vPortFree( pxTCB );
 800de68:	f7fe bfa6 	b.w	800cdb8 <vPortFree>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	d0f8      	beq.n	800de62 <prvDeleteTCB+0x16>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800de70:	2b02      	cmp	r3, #2
 800de72:	d008      	beq.n	800de86 <prvDeleteTCB+0x3a>
 800de74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800de78:	f383 8811 	msr	BASEPRI, r3
 800de7c:	f3bf 8f6f 	isb	sy
 800de80:	f3bf 8f4f 	dsb	sy
 800de84:	e7fe      	b.n	800de84 <prvDeleteTCB+0x38>
	}
 800de86:	bd10      	pop	{r4, pc}

0800de88 <prvIdleTask>:
{
 800de88:	b580      	push	{r7, lr}
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de8a:	4c14      	ldr	r4, [pc, #80]	@ (800dedc <prvIdleTask+0x54>)
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800de8c:	4f14      	ldr	r7, [pc, #80]	@ (800dee0 <prvIdleTask+0x58>)
				--uxCurrentNumberOfTasks;
 800de8e:	4d15      	ldr	r5, [pc, #84]	@ (800dee4 <prvIdleTask+0x5c>)
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800de90:	6823      	ldr	r3, [r4, #0]
 800de92:	b983      	cbnz	r3, 800deb6 <prvIdleTask+0x2e>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800de94:	4b14      	ldr	r3, [pc, #80]	@ (800dee8 <prvIdleTask+0x60>)
 800de96:	681b      	ldr	r3, [r3, #0]
 800de98:	2b01      	cmp	r3, #1
 800de9a:	d909      	bls.n	800deb0 <prvIdleTask+0x28>
				taskYIELD();
 800de9c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800dea0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800dea4:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800dea8:	f3bf 8f4f 	dsb	sy
 800deac:	f3bf 8f6f 	isb	sy
			vApplicationIdleHook();
 800deb0:	f7f2 fd9a 	bl	80009e8 <vApplicationIdleHook>
		prvCheckTasksWaitingTermination();
 800deb4:	e7eb      	b.n	800de8e <prvIdleTask+0x6>
			taskENTER_CRITICAL();
 800deb6:	f7ff f865 	bl	800cf84 <vPortEnterCritical>
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	68de      	ldr	r6, [r3, #12]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800debe:	1d30      	adds	r0, r6, #4
 800dec0:	f7fe ffe8 	bl	800ce94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800dec4:	682b      	ldr	r3, [r5, #0]
 800dec6:	3b01      	subs	r3, #1
 800dec8:	602b      	str	r3, [r5, #0]
				--uxDeletedTasksWaitingCleanUp;
 800deca:	6823      	ldr	r3, [r4, #0]
 800decc:	3b01      	subs	r3, #1
 800dece:	6023      	str	r3, [r4, #0]
			taskEXIT_CRITICAL();
 800ded0:	f7ff f878 	bl	800cfc4 <vPortExitCritical>
			prvDeleteTCB( pxTCB );
 800ded4:	4630      	mov	r0, r6
 800ded6:	f7ff ffb9 	bl	800de4c <prvDeleteTCB>
 800deda:	e7d9      	b.n	800de90 <prvIdleTask+0x8>
 800dedc:	24024db0 	.word	0x24024db0
 800dee0:	24024db4 	.word	0x24024db4
 800dee4:	24024d98 	.word	0x24024d98
 800dee8:	24024e0c 	.word	0x24024e0c

0800deec <prvInitialiseNewTask.constprop.0>:
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800deec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800def0:	0096      	lsls	r6, r2, #2
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800def2:	4607      	mov	r7, r0
 800def4:	460d      	mov	r5, r1
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800def6:	21a5      	movs	r1, #165	@ 0xa5
 800def8:	4632      	mov	r2, r6
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800defa:	4698      	mov	r8, r3
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800defc:	3e04      	subs	r6, #4
static void prvInitialiseNewTask( 	TaskFunction_t pxTaskCode,
 800defe:	e9dd 9409 	ldrd	r9, r4, [sp, #36]	@ 0x24
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800df02:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 800df04:	f013 fea4 	bl	8021c50 <memset>
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800df08:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800df0a:	441e      	add	r6, r3
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800df0c:	f026 0607 	bic.w	r6, r6, #7
	if( pcName != NULL )
 800df10:	2d00      	cmp	r5, #0
 800df12:	d043      	beq.n	800df9c <prvInitialiseNewTask.constprop.0+0xb0>
 800df14:	1e6b      	subs	r3, r5, #1
 800df16:	f104 0233 	add.w	r2, r4, #51	@ 0x33
 800df1a:	350f      	adds	r5, #15
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800df1c:	f813 1f01 	ldrb.w	r1, [r3, #1]!
 800df20:	f802 1f01 	strb.w	r1, [r2, #1]!
			if( pcName[ x ] == ( char ) 0x00 )
 800df24:	b109      	cbz	r1, 800df2a <prvInitialiseNewTask.constprop.0+0x3e>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800df26:	42ab      	cmp	r3, r5
 800df28:	d1f8      	bne.n	800df1c <prvInitialiseNewTask.constprop.0+0x30>
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800df2a:	2300      	movs	r3, #0
 800df2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df30:	9d08      	ldr	r5, [sp, #32]
		pxNewTCB->uxMutexesHeld = 0;
 800df32:	f04f 0a00 	mov.w	sl, #0
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df36:	1d20      	adds	r0, r4, #4
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df38:	2d37      	cmp	r5, #55	@ 0x37
		pxNewTCB->uxMutexesHeld = 0;
 800df3a:	f8c4 a050 	str.w	sl, [r4, #80]	@ 0x50
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800df3e:	bf28      	it	cs
 800df40:	2537      	movcs	r5, #55	@ 0x37
	pxNewTCB->uxPriority = uxPriority;
 800df42:	62e5      	str	r5, [r4, #44]	@ 0x2c
		pxNewTCB->uxBasePriority = uxPriority;
 800df44:	64e5      	str	r5, [r4, #76]	@ 0x4c
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df46:	f1c5 0538 	rsb	r5, r5, #56	@ 0x38
	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800df4a:	f7fe ff7e 	bl	800ce4a <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800df4e:	f104 0018 	add.w	r0, r4, #24
 800df52:	f7fe ff7a 	bl	800ce4a <vListInitialiseItem>
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df56:	224c      	movs	r2, #76	@ 0x4c
 800df58:	4651      	mov	r1, sl
		pxNewTCB->ulNotifiedValue = 0;
 800df5a:	f8c4 a0a4 	str.w	sl, [r4, #164]	@ 0xa4
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df5e:	f104 0058 	add.w	r0, r4, #88	@ 0x58
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800df62:	6124      	str	r4, [r4, #16]
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800df64:	61a5      	str	r5, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800df66:	6264      	str	r4, [r4, #36]	@ 0x24
		pxNewTCB->pxTaskTag = NULL;
 800df68:	f8c4 a054 	str.w	sl, [r4, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800df6c:	f884 a0a8 	strb.w	sl, [r4, #168]	@ 0xa8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df70:	f013 fe6e 	bl	8021c50 <memset>
 800df74:	4b0b      	ldr	r3, [pc, #44]	@ (800dfa4 <prvInitialiseNewTask.constprop.0+0xb8>)
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df76:	4639      	mov	r1, r7
 800df78:	4630      	mov	r0, r6
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df7a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800df7e:	65e3      	str	r3, [r4, #92]	@ 0x5c
 800df80:	33d0      	adds	r3, #208	@ 0xd0
 800df82:	6622      	str	r2, [r4, #96]	@ 0x60
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df84:	4642      	mov	r2, r8
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800df86:	6663      	str	r3, [r4, #100]	@ 0x64
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800df88:	f7fe ffd2 	bl	800cf30 <pxPortInitialiseStack>
 800df8c:	6020      	str	r0, [r4, #0]
	if( pxCreatedTask != NULL )
 800df8e:	f1b9 0f00 	cmp.w	r9, #0
 800df92:	d001      	beq.n	800df98 <prvInitialiseNewTask.constprop.0+0xac>
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800df94:	f8c9 4000 	str.w	r4, [r9]
}
 800df98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800df9c:	f884 5034 	strb.w	r5, [r4, #52]	@ 0x34
 800dfa0:	e7c6      	b.n	800df30 <prvInitialiseNewTask.constprop.0+0x44>
 800dfa2:	bf00      	nop
 800dfa4:	24025dec 	.word	0x24025dec

0800dfa8 <xTaskCreateStatic>:
	{
 800dfa8:	b570      	push	{r4, r5, r6, lr}
 800dfaa:	b086      	sub	sp, #24
 800dfac:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
		configASSERT( puxStackBuffer != NULL );
 800dfb0:	b945      	cbnz	r5, 800dfc4 <xTaskCreateStatic+0x1c>
 800dfb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfb6:	f383 8811 	msr	BASEPRI, r3
 800dfba:	f3bf 8f6f 	isb	sy
 800dfbe:	f3bf 8f4f 	dsb	sy
 800dfc2:	e7fe      	b.n	800dfc2 <xTaskCreateStatic+0x1a>
		configASSERT( pxTaskBuffer != NULL );
 800dfc4:	b944      	cbnz	r4, 800dfd8 <xTaskCreateStatic+0x30>
 800dfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfca:	f383 8811 	msr	BASEPRI, r3
 800dfce:	f3bf 8f6f 	isb	sy
 800dfd2:	f3bf 8f4f 	dsb	sy
 800dfd6:	e7fe      	b.n	800dfd6 <xTaskCreateStatic+0x2e>
			volatile size_t xSize = sizeof( StaticTask_t );
 800dfd8:	26ac      	movs	r6, #172	@ 0xac
 800dfda:	9605      	str	r6, [sp, #20]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dfdc:	9e05      	ldr	r6, [sp, #20]
 800dfde:	2eac      	cmp	r6, #172	@ 0xac
 800dfe0:	d008      	beq.n	800dff4 <xTaskCreateStatic+0x4c>
 800dfe2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800dfe6:	f383 8811 	msr	BASEPRI, r3
 800dfea:	f3bf 8f6f 	isb	sy
 800dfee:	f3bf 8f4f 	dsb	sy
 800dff2:	e7fe      	b.n	800dff2 <xTaskCreateStatic+0x4a>
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dff4:	6325      	str	r5, [r4, #48]	@ 0x30
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dff6:	2502      	movs	r5, #2
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dff8:	9e05      	ldr	r6, [sp, #20]
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dffa:	f884 50a9 	strb.w	r5, [r4, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dffe:	ad04      	add	r5, sp, #16
 800e000:	9402      	str	r4, [sp, #8]
 800e002:	9501      	str	r5, [sp, #4]
 800e004:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 800e006:	9500      	str	r5, [sp, #0]
 800e008:	f7ff ff70 	bl	800deec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e00c:	4620      	mov	r0, r4
 800e00e:	f7ff fe55 	bl	800dcbc <prvAddNewTaskToReadyList>
	}
 800e012:	9804      	ldr	r0, [sp, #16]
 800e014:	b006      	add	sp, #24
 800e016:	bd70      	pop	{r4, r5, r6, pc}

0800e018 <xTaskCreate>:
	{
 800e018:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800e01c:	4607      	mov	r7, r0
 800e01e:	b085      	sub	sp, #20
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e020:	0090      	lsls	r0, r2, #2
	{
 800e022:	4688      	mov	r8, r1
 800e024:	4616      	mov	r6, r2
 800e026:	4699      	mov	r9, r3
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800e028:	f7fe fe2e 	bl	800cc88 <pvPortMalloc>
			if( pxStack != NULL )
 800e02c:	4605      	mov	r5, r0
 800e02e:	b920      	cbnz	r0, 800e03a <xTaskCreate+0x22>
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800e030:	f04f 30ff 	mov.w	r0, #4294967295
	}
 800e034:	b005      	add	sp, #20
 800e036:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800e03a:	20ac      	movs	r0, #172	@ 0xac
 800e03c:	f7fe fe24 	bl	800cc88 <pvPortMalloc>
				if( pxNewTCB != NULL )
 800e040:	4604      	mov	r4, r0
 800e042:	b198      	cbz	r0, 800e06c <xTaskCreate+0x54>
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e044:	2300      	movs	r3, #0
					pxNewTCB->pxStack = pxStack;
 800e046:	6305      	str	r5, [r0, #48]	@ 0x30
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e048:	4632      	mov	r2, r6
 800e04a:	4641      	mov	r1, r8
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800e04c:	f880 30a9 	strb.w	r3, [r0, #169]	@ 0xa9
			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800e050:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800e052:	9002      	str	r0, [sp, #8]
 800e054:	4638      	mov	r0, r7
 800e056:	9301      	str	r3, [sp, #4]
 800e058:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800e05a:	9300      	str	r3, [sp, #0]
 800e05c:	464b      	mov	r3, r9
 800e05e:	f7ff ff45 	bl	800deec <prvInitialiseNewTask.constprop.0>
			prvAddNewTaskToReadyList( pxNewTCB );
 800e062:	4620      	mov	r0, r4
 800e064:	f7ff fe2a 	bl	800dcbc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800e068:	2001      	movs	r0, #1
 800e06a:	e7e3      	b.n	800e034 <xTaskCreate+0x1c>
					vPortFree( pxStack );
 800e06c:	4628      	mov	r0, r5
 800e06e:	f7fe fea3 	bl	800cdb8 <vPortFree>
		if( pxNewTCB != NULL )
 800e072:	e7dd      	b.n	800e030 <xTaskCreate+0x18>

0800e074 <vTaskSuspendAll>:
	++uxSchedulerSuspended;
 800e074:	4a02      	ldr	r2, [pc, #8]	@ (800e080 <vTaskSuspendAll+0xc>)
 800e076:	6813      	ldr	r3, [r2, #0]
 800e078:	3301      	adds	r3, #1
 800e07a:	6013      	str	r3, [r2, #0]
}
 800e07c:	4770      	bx	lr
 800e07e:	bf00      	nop
 800e080:	24024d74 	.word	0x24024d74

0800e084 <xTaskGetTickCount>:
		xTicks = xTickCount;
 800e084:	4b01      	ldr	r3, [pc, #4]	@ (800e08c <xTaskGetTickCount+0x8>)
 800e086:	6818      	ldr	r0, [r3, #0]
}
 800e088:	4770      	bx	lr
 800e08a:	bf00      	nop
 800e08c:	24024d94 	.word	0x24024d94

0800e090 <xTaskIncrementTick>:
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e090:	4b3f      	ldr	r3, [pc, #252]	@ (800e190 <xTaskIncrementTick+0x100>)
 800e092:	681b      	ldr	r3, [r3, #0]
{
 800e094:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e098:	2b00      	cmp	r3, #0
 800e09a:	d172      	bne.n	800e182 <xTaskIncrementTick+0xf2>
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e09c:	4b3d      	ldr	r3, [pc, #244]	@ (800e194 <xTaskIncrementTick+0x104>)
 800e09e:	681c      	ldr	r4, [r3, #0]
 800e0a0:	3401      	adds	r4, #1
		xTickCount = xConstTickCount;
 800e0a2:	601c      	str	r4, [r3, #0]
		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e0a4:	b9bc      	cbnz	r4, 800e0d6 <xTaskIncrementTick+0x46>
			taskSWITCH_DELAYED_LISTS();
 800e0a6:	4b3c      	ldr	r3, [pc, #240]	@ (800e198 <xTaskIncrementTick+0x108>)
 800e0a8:	681a      	ldr	r2, [r3, #0]
 800e0aa:	6812      	ldr	r2, [r2, #0]
 800e0ac:	b142      	cbz	r2, 800e0c0 <xTaskIncrementTick+0x30>
 800e0ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e0b2:	f383 8811 	msr	BASEPRI, r3
 800e0b6:	f3bf 8f6f 	isb	sy
 800e0ba:	f3bf 8f4f 	dsb	sy
 800e0be:	e7fe      	b.n	800e0be <xTaskIncrementTick+0x2e>
 800e0c0:	4a36      	ldr	r2, [pc, #216]	@ (800e19c <xTaskIncrementTick+0x10c>)
 800e0c2:	6819      	ldr	r1, [r3, #0]
 800e0c4:	6810      	ldr	r0, [r2, #0]
 800e0c6:	6018      	str	r0, [r3, #0]
 800e0c8:	6011      	str	r1, [r2, #0]
 800e0ca:	4a35      	ldr	r2, [pc, #212]	@ (800e1a0 <xTaskIncrementTick+0x110>)
 800e0cc:	6813      	ldr	r3, [r2, #0]
 800e0ce:	3301      	adds	r3, #1
 800e0d0:	6013      	str	r3, [r2, #0]
 800e0d2:	f7ff fea9 	bl	800de28 <prvResetNextTaskUnblockTime>
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0d6:	4d33      	ldr	r5, [pc, #204]	@ (800e1a4 <xTaskIncrementTick+0x114>)
BaseType_t xSwitchRequired = pdFALSE;
 800e0d8:	f04f 0b00 	mov.w	fp, #0
 800e0dc:	4e32      	ldr	r6, [pc, #200]	@ (800e1a8 <xTaskIncrementTick+0x118>)
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e0de:	682b      	ldr	r3, [r5, #0]
 800e0e0:	4f32      	ldr	r7, [pc, #200]	@ (800e1ac <xTaskIncrementTick+0x11c>)
 800e0e2:	429c      	cmp	r4, r3
 800e0e4:	d212      	bcs.n	800e10c <xTaskIncrementTick+0x7c>
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e0e6:	683a      	ldr	r2, [r7, #0]
 800e0e8:	2114      	movs	r1, #20
 800e0ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e0ec:	434a      	muls	r2, r1
 800e0ee:	58b2      	ldr	r2, [r6, r2]
				xSwitchRequired = pdTRUE;
 800e0f0:	2a02      	cmp	r2, #2
			if( xYieldPending != pdFALSE )
 800e0f2:	4a2f      	ldr	r2, [pc, #188]	@ (800e1b0 <xTaskIncrementTick+0x120>)
 800e0f4:	6812      	ldr	r2, [r2, #0]
				xSwitchRequired = pdTRUE;
 800e0f6:	bf28      	it	cs
 800e0f8:	f04f 0b01 	movcs.w	fp, #1
				xSwitchRequired = pdTRUE;
 800e0fc:	2a00      	cmp	r2, #0
 800e0fe:	bf18      	it	ne
 800e100:	f04f 0b01 	movne.w	fp, #1
}
 800e104:	4658      	mov	r0, fp
 800e106:	b003      	add	sp, #12
 800e108:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e10c:	f8df 9088 	ldr.w	r9, [pc, #136]	@ 800e198 <xTaskIncrementTick+0x108>
					prvAddTaskToReadyList( pxTCB );
 800e110:	f8df a0a4 	ldr.w	sl, [pc, #164]	@ 800e1b8 <xTaskIncrementTick+0x128>
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e114:	f8d9 2000 	ldr.w	r2, [r9]
 800e118:	6812      	ldr	r2, [r2, #0]
 800e11a:	b91a      	cbnz	r2, 800e124 <xTaskIncrementTick+0x94>
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e11c:	f04f 32ff 	mov.w	r2, #4294967295
 800e120:	602a      	str	r2, [r5, #0]
					break;
 800e122:	e7e0      	b.n	800e0e6 <xTaskIncrementTick+0x56>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e124:	f8d9 2000 	ldr.w	r2, [r9]
 800e128:	68d2      	ldr	r2, [r2, #12]
 800e12a:	f8d2 800c 	ldr.w	r8, [r2, #12]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e12e:	f8d8 1004 	ldr.w	r1, [r8, #4]
					if( xConstTickCount < xItemValue )
 800e132:	428c      	cmp	r4, r1
 800e134:	d201      	bcs.n	800e13a <xTaskIncrementTick+0xaa>
						xNextTaskUnblockTime = xItemValue;
 800e136:	6029      	str	r1, [r5, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e138:	e7d5      	b.n	800e0e6 <xTaskIncrementTick+0x56>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e13a:	f108 0304 	add.w	r3, r8, #4
 800e13e:	4618      	mov	r0, r3
 800e140:	9301      	str	r3, [sp, #4]
 800e142:	f7fe fea7 	bl	800ce94 <uxListRemove>
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e146:	f8d8 1028 	ldr.w	r1, [r8, #40]	@ 0x28
 800e14a:	b119      	cbz	r1, 800e154 <xTaskIncrementTick+0xc4>
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e14c:	f108 0018 	add.w	r0, r8, #24
 800e150:	f7fe fea0 	bl	800ce94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e154:	f8d8 002c 	ldr.w	r0, [r8, #44]	@ 0x2c
 800e158:	f8da 1000 	ldr.w	r1, [sl]
 800e15c:	4288      	cmp	r0, r1
 800e15e:	d901      	bls.n	800e164 <xTaskIncrementTick+0xd4>
 800e160:	f8ca 0000 	str.w	r0, [sl]
 800e164:	2314      	movs	r3, #20
 800e166:	9901      	ldr	r1, [sp, #4]
 800e168:	fb03 6000 	mla	r0, r3, r0, r6
 800e16c:	f7fe fe70 	bl	800ce50 <vListInsertEnd>
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e170:	6838      	ldr	r0, [r7, #0]
 800e172:	f8d8 102c 	ldr.w	r1, [r8, #44]	@ 0x2c
 800e176:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
							xSwitchRequired = pdTRUE;
 800e178:	4291      	cmp	r1, r2
 800e17a:	bf28      	it	cs
 800e17c:	f04f 0b01 	movcs.w	fp, #1
 800e180:	e7c8      	b.n	800e114 <xTaskIncrementTick+0x84>
		++xPendedTicks;
 800e182:	4a0c      	ldr	r2, [pc, #48]	@ (800e1b4 <xTaskIncrementTick+0x124>)
BaseType_t xSwitchRequired = pdFALSE;
 800e184:	f04f 0b00 	mov.w	fp, #0
		++xPendedTicks;
 800e188:	6813      	ldr	r3, [r2, #0]
 800e18a:	3301      	adds	r3, #1
 800e18c:	6013      	str	r3, [r2, #0]
 800e18e:	e7b9      	b.n	800e104 <xTaskIncrementTick+0x74>
 800e190:	24024d74 	.word	0x24024d74
 800e194:	24024d94 	.word	0x24024d94
 800e198:	24024de0 	.word	0x24024de0
 800e19c:	24024ddc 	.word	0x24024ddc
 800e1a0:	24024d80 	.word	0x24024d80
 800e1a4:	24024d78 	.word	0x24024d78
 800e1a8:	24024e0c 	.word	0x24024e0c
 800e1ac:	2402526c 	.word	0x2402526c
 800e1b0:	24024d84 	.word	0x24024d84
 800e1b4:	24024d88 	.word	0x24024d88
 800e1b8:	24024d90 	.word	0x24024d90

0800e1bc <xTaskResumeAll>:
{
 800e1bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	configASSERT( uxSchedulerSuspended );
 800e1c0:	4c30      	ldr	r4, [pc, #192]	@ (800e284 <xTaskResumeAll+0xc8>)
 800e1c2:	6823      	ldr	r3, [r4, #0]
 800e1c4:	b943      	cbnz	r3, 800e1d8 <xTaskResumeAll+0x1c>
 800e1c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e1ca:	f383 8811 	msr	BASEPRI, r3
 800e1ce:	f3bf 8f6f 	isb	sy
 800e1d2:	f3bf 8f4f 	dsb	sy
 800e1d6:	e7fe      	b.n	800e1d6 <xTaskResumeAll+0x1a>
	taskENTER_CRITICAL();
 800e1d8:	f7fe fed4 	bl	800cf84 <vPortEnterCritical>
		--uxSchedulerSuspended;
 800e1dc:	6823      	ldr	r3, [r4, #0]
 800e1de:	3b01      	subs	r3, #1
 800e1e0:	6023      	str	r3, [r4, #0]
		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e1e2:	6824      	ldr	r4, [r4, #0]
 800e1e4:	b12c      	cbz	r4, 800e1f2 <xTaskResumeAll+0x36>
BaseType_t xAlreadyYielded = pdFALSE;
 800e1e6:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e1e8:	f7fe feec 	bl	800cfc4 <vPortExitCritical>
}
 800e1ec:	4620      	mov	r0, r4
 800e1ee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e1f2:	4b25      	ldr	r3, [pc, #148]	@ (800e288 <xTaskResumeAll+0xcc>)
 800e1f4:	681b      	ldr	r3, [r3, #0]
 800e1f6:	2b00      	cmp	r3, #0
 800e1f8:	d0f5      	beq.n	800e1e6 <xTaskResumeAll+0x2a>
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e1fa:	4d24      	ldr	r5, [pc, #144]	@ (800e28c <xTaskResumeAll+0xd0>)
					prvAddTaskToReadyList( pxTCB );
 800e1fc:	4e24      	ldr	r6, [pc, #144]	@ (800e290 <xTaskResumeAll+0xd4>)
 800e1fe:	f8df 80a0 	ldr.w	r8, [pc, #160]	@ 800e2a0 <xTaskResumeAll+0xe4>
 800e202:	e01d      	b.n	800e240 <xTaskResumeAll+0x84>
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e204:	68eb      	ldr	r3, [r5, #12]
 800e206:	68dc      	ldr	r4, [r3, #12]
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e208:	1d27      	adds	r7, r4, #4
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e20a:	f104 0018 	add.w	r0, r4, #24
 800e20e:	f7fe fe41 	bl	800ce94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e212:	4638      	mov	r0, r7
 800e214:	f7fe fe3e 	bl	800ce94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e218:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e21a:	6832      	ldr	r2, [r6, #0]
 800e21c:	4293      	cmp	r3, r2
 800e21e:	d900      	bls.n	800e222 <xTaskResumeAll+0x66>
 800e220:	6033      	str	r3, [r6, #0]
 800e222:	2014      	movs	r0, #20
 800e224:	4639      	mov	r1, r7
 800e226:	fb00 8003 	mla	r0, r0, r3, r8
 800e22a:	f7fe fe11 	bl	800ce50 <vListInsertEnd>
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e22e:	4b19      	ldr	r3, [pc, #100]	@ (800e294 <xTaskResumeAll+0xd8>)
 800e230:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e236:	429a      	cmp	r2, r3
 800e238:	d302      	bcc.n	800e240 <xTaskResumeAll+0x84>
						xYieldPending = pdTRUE;
 800e23a:	4b17      	ldr	r3, [pc, #92]	@ (800e298 <xTaskResumeAll+0xdc>)
 800e23c:	2201      	movs	r2, #1
 800e23e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e240:	682b      	ldr	r3, [r5, #0]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d1de      	bne.n	800e204 <xTaskResumeAll+0x48>
				if( pxTCB != NULL )
 800e246:	b10c      	cbz	r4, 800e24c <xTaskResumeAll+0x90>
					prvResetNextTaskUnblockTime();
 800e248:	f7ff fdee 	bl	800de28 <prvResetNextTaskUnblockTime>
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800e24c:	4d13      	ldr	r5, [pc, #76]	@ (800e29c <xTaskResumeAll+0xe0>)
 800e24e:	682c      	ldr	r4, [r5, #0]
					if( xPendedCounts > ( TickType_t ) 0U )
 800e250:	b144      	cbz	r4, 800e264 <xTaskResumeAll+0xa8>
								xYieldPending = pdTRUE;
 800e252:	4e11      	ldr	r6, [pc, #68]	@ (800e298 <xTaskResumeAll+0xdc>)
 800e254:	2701      	movs	r7, #1
							if( xTaskIncrementTick() != pdFALSE )
 800e256:	f7ff ff1b 	bl	800e090 <xTaskIncrementTick>
 800e25a:	b100      	cbz	r0, 800e25e <xTaskResumeAll+0xa2>
								xYieldPending = pdTRUE;
 800e25c:	6037      	str	r7, [r6, #0]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800e25e:	3c01      	subs	r4, #1
 800e260:	d1f9      	bne.n	800e256 <xTaskResumeAll+0x9a>
						xPendedTicks = 0;
 800e262:	602c      	str	r4, [r5, #0]
				if( xYieldPending != pdFALSE )
 800e264:	4b0c      	ldr	r3, [pc, #48]	@ (800e298 <xTaskResumeAll+0xdc>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	2b00      	cmp	r3, #0
 800e26a:	d0bc      	beq.n	800e1e6 <xTaskResumeAll+0x2a>
					taskYIELD_IF_USING_PREEMPTION();
 800e26c:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800e270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800e274:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800e278:	f3bf 8f4f 	dsb	sy
 800e27c:	f3bf 8f6f 	isb	sy
						xAlreadyYielded = pdTRUE;
 800e280:	2401      	movs	r4, #1
 800e282:	e7b1      	b.n	800e1e8 <xTaskResumeAll+0x2c>
 800e284:	24024d74 	.word	0x24024d74
 800e288:	24024d98 	.word	0x24024d98
 800e28c:	24024dc8 	.word	0x24024dc8
 800e290:	24024d90 	.word	0x24024d90
 800e294:	2402526c 	.word	0x2402526c
 800e298:	24024d84 	.word	0x24024d84
 800e29c:	24024d88 	.word	0x24024d88
 800e2a0:	24024e0c 	.word	0x24024e0c

0800e2a4 <vTaskSetApplicationTaskTag>:
	{
 800e2a4:	b538      	push	{r3, r4, r5, lr}
 800e2a6:	460d      	mov	r5, r1
		if( xTask == NULL )
 800e2a8:	4604      	mov	r4, r0
 800e2aa:	b908      	cbnz	r0, 800e2b0 <vTaskSetApplicationTaskTag+0xc>
			xTCB = ( TCB_t * ) pxCurrentTCB;
 800e2ac:	4b04      	ldr	r3, [pc, #16]	@ (800e2c0 <vTaskSetApplicationTaskTag+0x1c>)
 800e2ae:	681c      	ldr	r4, [r3, #0]
		taskENTER_CRITICAL();
 800e2b0:	f7fe fe68 	bl	800cf84 <vPortEnterCritical>
			xTCB->pxTaskTag = pxHookFunction;
 800e2b4:	6565      	str	r5, [r4, #84]	@ 0x54
	}
 800e2b6:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		taskEXIT_CRITICAL();
 800e2ba:	f7fe be83 	b.w	800cfc4 <vPortExitCritical>
 800e2be:	bf00      	nop
 800e2c0:	2402526c 	.word	0x2402526c

0800e2c4 <xTaskCallApplicationTaskHook>:
	{
 800e2c4:	4603      	mov	r3, r0
 800e2c6:	4608      	mov	r0, r1
		if( xTask == NULL )
 800e2c8:	b90b      	cbnz	r3, 800e2ce <xTaskCallApplicationTaskHook+0xa>
			xTCB = pxCurrentTCB;
 800e2ca:	4b03      	ldr	r3, [pc, #12]	@ (800e2d8 <xTaskCallApplicationTaskHook+0x14>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
		if( xTCB->pxTaskTag != NULL )
 800e2ce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2d0:	b103      	cbz	r3, 800e2d4 <xTaskCallApplicationTaskHook+0x10>
			xReturn = xTCB->pxTaskTag( pvParameter );
 800e2d2:	4718      	bx	r3
	}
 800e2d4:	4618      	mov	r0, r3
 800e2d6:	4770      	bx	lr
 800e2d8:	2402526c 	.word	0x2402526c

0800e2dc <vTaskStartScheduler>:
{
 800e2dc:	b510      	push	{r4, lr}
 800e2de:	b088      	sub	sp, #32
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800e2e0:	2400      	movs	r4, #0
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2e2:	aa07      	add	r2, sp, #28
 800e2e4:	a906      	add	r1, sp, #24
 800e2e6:	a805      	add	r0, sp, #20
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800e2e8:	e9cd 4405 	strd	r4, r4, [sp, #20]
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800e2ec:	f7fe fc8e 	bl	800cc0c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800e2f0:	9b05      	ldr	r3, [sp, #20]
 800e2f2:	9a07      	ldr	r2, [sp, #28]
 800e2f4:	9302      	str	r3, [sp, #8]
 800e2f6:	9b06      	ldr	r3, [sp, #24]
 800e2f8:	491b      	ldr	r1, [pc, #108]	@ (800e368 <vTaskStartScheduler+0x8c>)
 800e2fa:	481c      	ldr	r0, [pc, #112]	@ (800e36c <vTaskStartScheduler+0x90>)
 800e2fc:	e9cd 4300 	strd	r4, r3, [sp]
 800e300:	4623      	mov	r3, r4
 800e302:	f7ff fe51 	bl	800dfa8 <xTaskCreateStatic>
		if( xIdleTaskHandle != NULL )
 800e306:	b360      	cbz	r0, 800e362 <vTaskStartScheduler+0x86>
			xReturn = xTimerCreateTimerTask();
 800e308:	f000 fa8e 	bl	800e828 <xTimerCreateTimerTask>
	if( xReturn == pdPASS )
 800e30c:	2801      	cmp	r0, #1
 800e30e:	d11d      	bne.n	800e34c <vTaskStartScheduler+0x70>
 800e310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e314:	f383 8811 	msr	BASEPRI, r3
 800e318:	f3bf 8f6f 	isb	sy
 800e31c:	f3bf 8f4f 	dsb	sy
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e320:	4a13      	ldr	r2, [pc, #76]	@ (800e370 <vTaskStartScheduler+0x94>)
 800e322:	4914      	ldr	r1, [pc, #80]	@ (800e374 <vTaskStartScheduler+0x98>)
 800e324:	6813      	ldr	r3, [r2, #0]
 800e326:	3358      	adds	r3, #88	@ 0x58
 800e328:	600b      	str	r3, [r1, #0]
		xNextTaskUnblockTime = portMAX_DELAY;
 800e32a:	f04f 31ff 	mov.w	r1, #4294967295
 800e32e:	4b12      	ldr	r3, [pc, #72]	@ (800e378 <vTaskStartScheduler+0x9c>)
 800e330:	6019      	str	r1, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e332:	4621      	mov	r1, r4
		xSchedulerRunning = pdTRUE;
 800e334:	4b11      	ldr	r3, [pc, #68]	@ (800e37c <vTaskStartScheduler+0xa0>)
 800e336:	6018      	str	r0, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e338:	4b11      	ldr	r3, [pc, #68]	@ (800e380 <vTaskStartScheduler+0xa4>)
 800e33a:	601c      	str	r4, [r3, #0]
		traceTASK_SWITCHED_IN();
 800e33c:	6810      	ldr	r0, [r2, #0]
 800e33e:	f7ff ffc1 	bl	800e2c4 <xTaskCallApplicationTaskHook>
}
 800e342:	b008      	add	sp, #32
 800e344:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
		if( xPortStartScheduler() != pdFALSE )
 800e348:	f7fe beac 	b.w	800d0a4 <xPortStartScheduler>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e34c:	3001      	adds	r0, #1
 800e34e:	d108      	bne.n	800e362 <vTaskStartScheduler+0x86>
 800e350:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e354:	f383 8811 	msr	BASEPRI, r3
 800e358:	f3bf 8f6f 	isb	sy
 800e35c:	f3bf 8f4f 	dsb	sy
 800e360:	e7fe      	b.n	800e360 <vTaskStartScheduler+0x84>
}
 800e362:	b008      	add	sp, #32
 800e364:	bd10      	pop	{r4, pc}
 800e366:	bf00      	nop
 800e368:	08025088 	.word	0x08025088
 800e36c:	0800de89 	.word	0x0800de89
 800e370:	2402526c 	.word	0x2402526c
 800e374:	24000118 	.word	0x24000118
 800e378:	24024d78 	.word	0x24024d78
 800e37c:	24024d8c 	.word	0x24024d8c
 800e380:	24024d94 	.word	0x24024d94

0800e384 <vTaskSwitchContext>:
{
 800e384:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e386:	4b1d      	ldr	r3, [pc, #116]	@ (800e3fc <vTaskSwitchContext+0x78>)
 800e388:	681a      	ldr	r2, [r3, #0]
 800e38a:	4b1d      	ldr	r3, [pc, #116]	@ (800e400 <vTaskSwitchContext+0x7c>)
 800e38c:	b112      	cbz	r2, 800e394 <vTaskSwitchContext+0x10>
		xYieldPending = pdTRUE;
 800e38e:	2201      	movs	r2, #1
 800e390:	601a      	str	r2, [r3, #0]
}
 800e392:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		traceTASK_SWITCHED_OUT();
 800e394:	4c1b      	ldr	r4, [pc, #108]	@ (800e404 <vTaskSwitchContext+0x80>)
 800e396:	2101      	movs	r1, #1
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e398:	4e1b      	ldr	r6, [pc, #108]	@ (800e408 <vTaskSwitchContext+0x84>)
 800e39a:	2714      	movs	r7, #20
		xYieldPending = pdFALSE;
 800e39c:	601a      	str	r2, [r3, #0]
		traceTASK_SWITCHED_OUT();
 800e39e:	6820      	ldr	r0, [r4, #0]
 800e3a0:	f7ff ff90 	bl	800e2c4 <xTaskCallApplicationTaskHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3a4:	6832      	ldr	r2, [r6, #0]
 800e3a6:	4919      	ldr	r1, [pc, #100]	@ (800e40c <vTaskSwitchContext+0x88>)
 800e3a8:	fb07 f302 	mul.w	r3, r7, r2
 800e3ac:	58cd      	ldr	r5, [r1, r3]
 800e3ae:	18c8      	adds	r0, r1, r3
 800e3b0:	b1c5      	cbz	r5, 800e3e4 <vTaskSwitchContext+0x60>
 800e3b2:	6845      	ldr	r5, [r0, #4]
 800e3b4:	3308      	adds	r3, #8
 800e3b6:	686d      	ldr	r5, [r5, #4]
 800e3b8:	440b      	add	r3, r1
 800e3ba:	429d      	cmp	r5, r3
 800e3bc:	6045      	str	r5, [r0, #4]
 800e3be:	bf04      	itt	eq
 800e3c0:	686b      	ldreq	r3, [r5, #4]
 800e3c2:	6043      	streq	r3, [r0, #4]
 800e3c4:	2314      	movs	r3, #20
 800e3c6:	fb03 1102 	mla	r1, r3, r2, r1
 800e3ca:	684b      	ldr	r3, [r1, #4]
		traceTASK_SWITCHED_IN();
 800e3cc:	2100      	movs	r1, #0
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3ce:	68db      	ldr	r3, [r3, #12]
 800e3d0:	6023      	str	r3, [r4, #0]
 800e3d2:	6032      	str	r2, [r6, #0]
		traceTASK_SWITCHED_IN();
 800e3d4:	6820      	ldr	r0, [r4, #0]
 800e3d6:	f7ff ff75 	bl	800e2c4 <xTaskCallApplicationTaskHook>
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800e3da:	6823      	ldr	r3, [r4, #0]
 800e3dc:	4a0c      	ldr	r2, [pc, #48]	@ (800e410 <vTaskSwitchContext+0x8c>)
 800e3de:	3358      	adds	r3, #88	@ 0x58
 800e3e0:	6013      	str	r3, [r2, #0]
}
 800e3e2:	e7d6      	b.n	800e392 <vTaskSwitchContext+0xe>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e3e4:	b942      	cbnz	r2, 800e3f8 <vTaskSwitchContext+0x74>
 800e3e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e3ea:	f383 8811 	msr	BASEPRI, r3
 800e3ee:	f3bf 8f6f 	isb	sy
 800e3f2:	f3bf 8f4f 	dsb	sy
 800e3f6:	e7fe      	b.n	800e3f6 <vTaskSwitchContext+0x72>
 800e3f8:	3a01      	subs	r2, #1
 800e3fa:	e7d5      	b.n	800e3a8 <vTaskSwitchContext+0x24>
 800e3fc:	24024d74 	.word	0x24024d74
 800e400:	24024d84 	.word	0x24024d84
 800e404:	2402526c 	.word	0x2402526c
 800e408:	24024d90 	.word	0x24024d90
 800e40c:	24024e0c 	.word	0x24024e0c
 800e410:	24000118 	.word	0x24000118

0800e414 <vTaskPlaceOnEventList>:
{
 800e414:	b510      	push	{r4, lr}
 800e416:	460c      	mov	r4, r1
	configASSERT( pxEventList );
 800e418:	b940      	cbnz	r0, 800e42c <vTaskPlaceOnEventList+0x18>
 800e41a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e41e:	f383 8811 	msr	BASEPRI, r3
 800e422:	f3bf 8f6f 	isb	sy
 800e426:	f3bf 8f4f 	dsb	sy
 800e42a:	e7fe      	b.n	800e42a <vTaskPlaceOnEventList+0x16>
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e42c:	4b05      	ldr	r3, [pc, #20]	@ (800e444 <vTaskPlaceOnEventList+0x30>)
 800e42e:	6819      	ldr	r1, [r3, #0]
 800e430:	3118      	adds	r1, #24
 800e432:	f7fe fd18 	bl	800ce66 <vListInsert>
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e436:	4620      	mov	r0, r4
 800e438:	2101      	movs	r1, #1
}
 800e43a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e43e:	f7ff bcbb 	b.w	800ddb8 <prvAddCurrentTaskToDelayedList>
 800e442:	bf00      	nop
 800e444:	2402526c 	.word	0x2402526c

0800e448 <vTaskPlaceOnEventListRestricted>:
	{
 800e448:	b538      	push	{r3, r4, r5, lr}
 800e44a:	460d      	mov	r5, r1
 800e44c:	4614      	mov	r4, r2
		configASSERT( pxEventList );
 800e44e:	b940      	cbnz	r0, 800e462 <vTaskPlaceOnEventListRestricted+0x1a>
 800e450:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e454:	f383 8811 	msr	BASEPRI, r3
 800e458:	f3bf 8f6f 	isb	sy
 800e45c:	f3bf 8f4f 	dsb	sy
 800e460:	e7fe      	b.n	800e460 <vTaskPlaceOnEventListRestricted+0x18>
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e462:	4b07      	ldr	r3, [pc, #28]	@ (800e480 <vTaskPlaceOnEventListRestricted+0x38>)
 800e464:	6819      	ldr	r1, [r3, #0]
 800e466:	3118      	adds	r1, #24
 800e468:	f7fe fcf2 	bl	800ce50 <vListInsertEnd>
			xTicksToWait = portMAX_DELAY;
 800e46c:	2c00      	cmp	r4, #0
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e46e:	4621      	mov	r1, r4
 800e470:	bf0c      	ite	eq
 800e472:	4628      	moveq	r0, r5
 800e474:	f04f 30ff 	movne.w	r0, #4294967295
	}
 800e478:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e47c:	f7ff bc9c 	b.w	800ddb8 <prvAddCurrentTaskToDelayedList>
 800e480:	2402526c 	.word	0x2402526c

0800e484 <xTaskRemoveFromEventList>:
{
 800e484:	b538      	push	{r3, r4, r5, lr}
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e486:	68c3      	ldr	r3, [r0, #12]
 800e488:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
 800e48a:	b944      	cbnz	r4, 800e49e <xTaskRemoveFromEventList+0x1a>
 800e48c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e490:	f383 8811 	msr	BASEPRI, r3
 800e494:	f3bf 8f6f 	isb	sy
 800e498:	f3bf 8f4f 	dsb	sy
 800e49c:	e7fe      	b.n	800e49c <xTaskRemoveFromEventList+0x18>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e49e:	f104 0518 	add.w	r5, r4, #24
 800e4a2:	4628      	mov	r0, r5
 800e4a4:	f7fe fcf6 	bl	800ce94 <uxListRemove>
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4a8:	4b11      	ldr	r3, [pc, #68]	@ (800e4f0 <xTaskRemoveFromEventList+0x6c>)
 800e4aa:	681b      	ldr	r3, [r3, #0]
 800e4ac:	b9d3      	cbnz	r3, 800e4e4 <xTaskRemoveFromEventList+0x60>
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4ae:	1d25      	adds	r5, r4, #4
 800e4b0:	4628      	mov	r0, r5
 800e4b2:	f7fe fcef 	bl	800ce94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e4b6:	4a0f      	ldr	r2, [pc, #60]	@ (800e4f4 <xTaskRemoveFromEventList+0x70>)
 800e4b8:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e4ba:	6811      	ldr	r1, [r2, #0]
 800e4bc:	428b      	cmp	r3, r1
 800e4be:	d900      	bls.n	800e4c2 <xTaskRemoveFromEventList+0x3e>
 800e4c0:	6013      	str	r3, [r2, #0]
 800e4c2:	2014      	movs	r0, #20
 800e4c4:	4a0c      	ldr	r2, [pc, #48]	@ (800e4f8 <xTaskRemoveFromEventList+0x74>)
 800e4c6:	4629      	mov	r1, r5
 800e4c8:	fb00 2003 	mla	r0, r0, r3, r2
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4cc:	f7fe fcc0 	bl	800ce50 <vListInsertEnd>
	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e4d0:	4b0a      	ldr	r3, [pc, #40]	@ (800e4fc <xTaskRemoveFromEventList+0x78>)
 800e4d2:	6ae2      	ldr	r2, [r4, #44]	@ 0x2c
 800e4d4:	681b      	ldr	r3, [r3, #0]
 800e4d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e4d8:	429a      	cmp	r2, r3
 800e4da:	d906      	bls.n	800e4ea <xTaskRemoveFromEventList+0x66>
		xYieldPending = pdTRUE;
 800e4dc:	2001      	movs	r0, #1
 800e4de:	4b08      	ldr	r3, [pc, #32]	@ (800e500 <xTaskRemoveFromEventList+0x7c>)
 800e4e0:	6018      	str	r0, [r3, #0]
}
 800e4e2:	bd38      	pop	{r3, r4, r5, pc}
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e4e4:	4629      	mov	r1, r5
 800e4e6:	4807      	ldr	r0, [pc, #28]	@ (800e504 <xTaskRemoveFromEventList+0x80>)
 800e4e8:	e7f0      	b.n	800e4cc <xTaskRemoveFromEventList+0x48>
		xReturn = pdFALSE;
 800e4ea:	2000      	movs	r0, #0
	return xReturn;
 800e4ec:	e7f9      	b.n	800e4e2 <xTaskRemoveFromEventList+0x5e>
 800e4ee:	bf00      	nop
 800e4f0:	24024d74 	.word	0x24024d74
 800e4f4:	24024d90 	.word	0x24024d90
 800e4f8:	24024e0c 	.word	0x24024e0c
 800e4fc:	2402526c 	.word	0x2402526c
 800e500:	24024d84 	.word	0x24024d84
 800e504:	24024dc8 	.word	0x24024dc8

0800e508 <vTaskInternalSetTimeOutState>:
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e508:	4b03      	ldr	r3, [pc, #12]	@ (800e518 <vTaskInternalSetTimeOutState+0x10>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	6003      	str	r3, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e50e:	4b03      	ldr	r3, [pc, #12]	@ (800e51c <vTaskInternalSetTimeOutState+0x14>)
 800e510:	681b      	ldr	r3, [r3, #0]
 800e512:	6043      	str	r3, [r0, #4]
}
 800e514:	4770      	bx	lr
 800e516:	bf00      	nop
 800e518:	24024d80 	.word	0x24024d80
 800e51c:	24024d94 	.word	0x24024d94

0800e520 <xTaskCheckForTimeOut>:
{
 800e520:	b570      	push	{r4, r5, r6, lr}
 800e522:	460c      	mov	r4, r1
	configASSERT( pxTimeOut );
 800e524:	4605      	mov	r5, r0
 800e526:	b940      	cbnz	r0, 800e53a <xTaskCheckForTimeOut+0x1a>
 800e528:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e52c:	f383 8811 	msr	BASEPRI, r3
 800e530:	f3bf 8f6f 	isb	sy
 800e534:	f3bf 8f4f 	dsb	sy
 800e538:	e7fe      	b.n	800e538 <xTaskCheckForTimeOut+0x18>
	configASSERT( pxTicksToWait );
 800e53a:	b941      	cbnz	r1, 800e54e <xTaskCheckForTimeOut+0x2e>
 800e53c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e540:	f383 8811 	msr	BASEPRI, r3
 800e544:	f3bf 8f6f 	isb	sy
 800e548:	f3bf 8f4f 	dsb	sy
 800e54c:	e7fe      	b.n	800e54c <xTaskCheckForTimeOut+0x2c>
	taskENTER_CRITICAL();
 800e54e:	f7fe fd19 	bl	800cf84 <vPortEnterCritical>
		const TickType_t xConstTickCount = xTickCount;
 800e552:	4b0f      	ldr	r3, [pc, #60]	@ (800e590 <xTaskCheckForTimeOut+0x70>)
 800e554:	6819      	ldr	r1, [r3, #0]
			if( *pxTicksToWait == portMAX_DELAY )
 800e556:	6823      	ldr	r3, [r4, #0]
 800e558:	1c5a      	adds	r2, r3, #1
 800e55a:	d010      	beq.n	800e57e <xTaskCheckForTimeOut+0x5e>
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e55c:	480d      	ldr	r0, [pc, #52]	@ (800e594 <xTaskCheckForTimeOut+0x74>)
 800e55e:	682e      	ldr	r6, [r5, #0]
 800e560:	6800      	ldr	r0, [r0, #0]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e562:	686a      	ldr	r2, [r5, #4]
		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e564:	4286      	cmp	r6, r0
 800e566:	d001      	beq.n	800e56c <xTaskCheckForTimeOut+0x4c>
 800e568:	428a      	cmp	r2, r1
 800e56a:	d90f      	bls.n	800e58c <xTaskCheckForTimeOut+0x6c>
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e56c:	1a88      	subs	r0, r1, r2
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e56e:	4283      	cmp	r3, r0
 800e570:	d90a      	bls.n	800e588 <xTaskCheckForTimeOut+0x68>
			*pxTicksToWait -= xElapsedTime;
 800e572:	1a5b      	subs	r3, r3, r1
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e574:	4628      	mov	r0, r5
			*pxTicksToWait -= xElapsedTime;
 800e576:	4413      	add	r3, r2
 800e578:	6023      	str	r3, [r4, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e57a:	f7ff ffc5 	bl	800e508 <vTaskInternalSetTimeOutState>
				xReturn = pdFALSE;
 800e57e:	2400      	movs	r4, #0
	taskEXIT_CRITICAL();
 800e580:	f7fe fd20 	bl	800cfc4 <vPortExitCritical>
}
 800e584:	4620      	mov	r0, r4
 800e586:	bd70      	pop	{r4, r5, r6, pc}
			*pxTicksToWait = 0;
 800e588:	2300      	movs	r3, #0
 800e58a:	6023      	str	r3, [r4, #0]
			xReturn = pdTRUE;
 800e58c:	2401      	movs	r4, #1
 800e58e:	e7f7      	b.n	800e580 <xTaskCheckForTimeOut+0x60>
 800e590:	24024d94 	.word	0x24024d94
 800e594:	24024d80 	.word	0x24024d80

0800e598 <vTaskMissedYield>:
	xYieldPending = pdTRUE;
 800e598:	4b01      	ldr	r3, [pc, #4]	@ (800e5a0 <vTaskMissedYield+0x8>)
 800e59a:	2201      	movs	r2, #1
 800e59c:	601a      	str	r2, [r3, #0]
}
 800e59e:	4770      	bx	lr
 800e5a0:	24024d84 	.word	0x24024d84

0800e5a4 <xTaskGetCurrentTaskHandle>:
		xReturn = pxCurrentTCB;
 800e5a4:	4b01      	ldr	r3, [pc, #4]	@ (800e5ac <xTaskGetCurrentTaskHandle+0x8>)
 800e5a6:	6818      	ldr	r0, [r3, #0]
	}
 800e5a8:	4770      	bx	lr
 800e5aa:	bf00      	nop
 800e5ac:	2402526c 	.word	0x2402526c

0800e5b0 <xTaskGetSchedulerState>:
		if( xSchedulerRunning == pdFALSE )
 800e5b0:	4b05      	ldr	r3, [pc, #20]	@ (800e5c8 <xTaskGetSchedulerState+0x18>)
 800e5b2:	681b      	ldr	r3, [r3, #0]
 800e5b4:	b133      	cbz	r3, 800e5c4 <xTaskGetSchedulerState+0x14>
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e5b6:	4b05      	ldr	r3, [pc, #20]	@ (800e5cc <xTaskGetSchedulerState+0x1c>)
 800e5b8:	6818      	ldr	r0, [r3, #0]
 800e5ba:	fab0 f080 	clz	r0, r0
 800e5be:	0940      	lsrs	r0, r0, #5
 800e5c0:	0040      	lsls	r0, r0, #1
 800e5c2:	4770      	bx	lr
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e5c4:	2001      	movs	r0, #1
	}
 800e5c6:	4770      	bx	lr
 800e5c8:	24024d8c 	.word	0x24024d8c
 800e5cc:	24024d74 	.word	0x24024d74

0800e5d0 <xTaskPriorityInherit>:
	{
 800e5d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
		if( pxMutexHolder != NULL )
 800e5d2:	4604      	mov	r4, r0
 800e5d4:	b338      	cbz	r0, 800e626 <xTaskPriorityInherit+0x56>
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800e5d6:	4d1a      	ldr	r5, [pc, #104]	@ (800e640 <xTaskPriorityInherit+0x70>)
 800e5d8:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e5da:	682a      	ldr	r2, [r5, #0]
 800e5dc:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e5de:	4293      	cmp	r3, r2
 800e5e0:	d226      	bcs.n	800e630 <xTaskPriorityInherit+0x60>
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e5e2:	6982      	ldr	r2, [r0, #24]
 800e5e4:	2a00      	cmp	r2, #0
 800e5e6:	db04      	blt.n	800e5f2 <xTaskPriorityInherit+0x22>
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e5e8:	682a      	ldr	r2, [r5, #0]
 800e5ea:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800e5ec:	f1c2 0238 	rsb	r2, r2, #56	@ 0x38
 800e5f0:	6182      	str	r2, [r0, #24]
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800e5f2:	2214      	movs	r2, #20
 800e5f4:	4e13      	ldr	r6, [pc, #76]	@ (800e644 <xTaskPriorityInherit+0x74>)
 800e5f6:	fb02 6303 	mla	r3, r2, r3, r6
 800e5fa:	6962      	ldr	r2, [r4, #20]
 800e5fc:	429a      	cmp	r2, r3
 800e5fe:	d113      	bne.n	800e628 <xTaskPriorityInherit+0x58>
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e600:	1d27      	adds	r7, r4, #4
 800e602:	4638      	mov	r0, r7
 800e604:	f7fe fc46 	bl	800ce94 <uxListRemove>
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e608:	682b      	ldr	r3, [r5, #0]
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e60a:	4a0f      	ldr	r2, [pc, #60]	@ (800e648 <xTaskPriorityInherit+0x78>)
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e60c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e60e:	6811      	ldr	r1, [r2, #0]
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e610:	62e3      	str	r3, [r4, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800e612:	428b      	cmp	r3, r1
 800e614:	d900      	bls.n	800e618 <xTaskPriorityInherit+0x48>
 800e616:	6013      	str	r3, [r2, #0]
 800e618:	2014      	movs	r0, #20
 800e61a:	4639      	mov	r1, r7
 800e61c:	fb00 6003 	mla	r0, r0, r3, r6
 800e620:	f7fe fc16 	bl	800ce50 <vListInsertEnd>
				xReturn = pdTRUE;
 800e624:	2001      	movs	r0, #1
	}
 800e626:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800e628:	682b      	ldr	r3, [r5, #0]
 800e62a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e62c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800e62e:	e7f9      	b.n	800e624 <xTaskPriorityInherit+0x54>
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800e630:	682b      	ldr	r3, [r5, #0]
 800e632:	6cc0      	ldr	r0, [r0, #76]	@ 0x4c
 800e634:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e636:	4298      	cmp	r0, r3
 800e638:	bf2c      	ite	cs
 800e63a:	2000      	movcs	r0, #0
 800e63c:	2001      	movcc	r0, #1
 800e63e:	e7f2      	b.n	800e626 <xTaskPriorityInherit+0x56>
 800e640:	2402526c 	.word	0x2402526c
 800e644:	24024e0c 	.word	0x24024e0c
 800e648:	24024d90 	.word	0x24024d90

0800e64c <xTaskPriorityDisinherit>:
	{
 800e64c:	b538      	push	{r3, r4, r5, lr}
		if( pxMutexHolder != NULL )
 800e64e:	b908      	cbnz	r0, 800e654 <xTaskPriorityDisinherit+0x8>
	BaseType_t xReturn = pdFALSE;
 800e650:	2000      	movs	r0, #0
	}
 800e652:	bd38      	pop	{r3, r4, r5, pc}
			configASSERT( pxTCB == pxCurrentTCB );
 800e654:	4b1b      	ldr	r3, [pc, #108]	@ (800e6c4 <xTaskPriorityDisinherit+0x78>)
 800e656:	681c      	ldr	r4, [r3, #0]
 800e658:	4284      	cmp	r4, r0
 800e65a:	d008      	beq.n	800e66e <xTaskPriorityDisinherit+0x22>
 800e65c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e660:	f383 8811 	msr	BASEPRI, r3
 800e664:	f3bf 8f6f 	isb	sy
 800e668:	f3bf 8f4f 	dsb	sy
 800e66c:	e7fe      	b.n	800e66c <xTaskPriorityDisinherit+0x20>
			configASSERT( pxTCB->uxMutexesHeld );
 800e66e:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 800e670:	b943      	cbnz	r3, 800e684 <xTaskPriorityDisinherit+0x38>
 800e672:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e676:	f383 8811 	msr	BASEPRI, r3
 800e67a:	f3bf 8f6f 	isb	sy
 800e67e:	f3bf 8f4f 	dsb	sy
 800e682:	e7fe      	b.n	800e682 <xTaskPriorityDisinherit+0x36>
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e684:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
			( pxTCB->uxMutexesHeld )--;
 800e686:	3b01      	subs	r3, #1
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e688:	6ce2      	ldr	r2, [r4, #76]	@ 0x4c
			( pxTCB->uxMutexesHeld )--;
 800e68a:	6523      	str	r3, [r4, #80]	@ 0x50
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e68c:	4291      	cmp	r1, r2
 800e68e:	d0df      	beq.n	800e650 <xTaskPriorityDisinherit+0x4>
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e690:	2b00      	cmp	r3, #0
 800e692:	d1dd      	bne.n	800e650 <xTaskPriorityDisinherit+0x4>
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e694:	1d25      	adds	r5, r4, #4
 800e696:	4628      	mov	r0, r5
 800e698:	f7fe fbfc 	bl	800ce94 <uxListRemove>
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e69c:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e69e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e6a2:	62e3      	str	r3, [r4, #44]	@ 0x2c
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e6a4:	61a2      	str	r2, [r4, #24]
					prvAddTaskToReadyList( pxTCB );
 800e6a6:	4a08      	ldr	r2, [pc, #32]	@ (800e6c8 <xTaskPriorityDisinherit+0x7c>)
 800e6a8:	6811      	ldr	r1, [r2, #0]
 800e6aa:	428b      	cmp	r3, r1
 800e6ac:	d900      	bls.n	800e6b0 <xTaskPriorityDisinherit+0x64>
 800e6ae:	6013      	str	r3, [r2, #0]
 800e6b0:	4a06      	ldr	r2, [pc, #24]	@ (800e6cc <xTaskPriorityDisinherit+0x80>)
 800e6b2:	2014      	movs	r0, #20
 800e6b4:	4629      	mov	r1, r5
 800e6b6:	fb00 2003 	mla	r0, r0, r3, r2
 800e6ba:	f7fe fbc9 	bl	800ce50 <vListInsertEnd>
					xReturn = pdTRUE;
 800e6be:	2001      	movs	r0, #1
		return xReturn;
 800e6c0:	e7c7      	b.n	800e652 <xTaskPriorityDisinherit+0x6>
 800e6c2:	bf00      	nop
 800e6c4:	2402526c 	.word	0x2402526c
 800e6c8:	24024d90 	.word	0x24024d90
 800e6cc:	24024e0c 	.word	0x24024e0c

0800e6d0 <vTaskPriorityDisinheritAfterTimeout>:
	{
 800e6d0:	b570      	push	{r4, r5, r6, lr}
		if( pxMutexHolder != NULL )
 800e6d2:	4604      	mov	r4, r0
 800e6d4:	2800      	cmp	r0, #0
 800e6d6:	d042      	beq.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x8e>
			configASSERT( pxTCB->uxMutexesHeld );
 800e6d8:	6d02      	ldr	r2, [r0, #80]	@ 0x50
 800e6da:	b942      	cbnz	r2, 800e6ee <vTaskPriorityDisinheritAfterTimeout+0x1e>
 800e6dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e6e0:	f383 8811 	msr	BASEPRI, r3
 800e6e4:	f3bf 8f6f 	isb	sy
 800e6e8:	f3bf 8f4f 	dsb	sy
 800e6ec:	e7fe      	b.n	800e6ec <vTaskPriorityDisinheritAfterTimeout+0x1c>
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800e6ee:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 800e6f0:	4299      	cmp	r1, r3
 800e6f2:	bf38      	it	cc
 800e6f4:	4619      	movcc	r1, r3
			if( pxTCB->uxPriority != uxPriorityToUse )
 800e6f6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 800e6f8:	428b      	cmp	r3, r1
 800e6fa:	d030      	beq.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x8e>
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800e6fc:	2a01      	cmp	r2, #1
 800e6fe:	d12e      	bne.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x8e>
					configASSERT( pxTCB != pxCurrentTCB );
 800e700:	4a17      	ldr	r2, [pc, #92]	@ (800e760 <vTaskPriorityDisinheritAfterTimeout+0x90>)
 800e702:	6812      	ldr	r2, [r2, #0]
 800e704:	4282      	cmp	r2, r0
 800e706:	d108      	bne.n	800e71a <vTaskPriorityDisinheritAfterTimeout+0x4a>
 800e708:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e70c:	f383 8811 	msr	BASEPRI, r3
 800e710:	f3bf 8f6f 	isb	sy
 800e714:	f3bf 8f4f 	dsb	sy
 800e718:	e7fe      	b.n	800e718 <vTaskPriorityDisinheritAfterTimeout+0x48>
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e71a:	6982      	ldr	r2, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e71c:	4d11      	ldr	r5, [pc, #68]	@ (800e764 <vTaskPriorityDisinheritAfterTimeout+0x94>)
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800e71e:	2a00      	cmp	r2, #0
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e720:	f04f 0214 	mov.w	r2, #20
					pxTCB->uxPriority = uxPriorityToUse;
 800e724:	62c1      	str	r1, [r0, #44]	@ 0x2c
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e726:	fb02 5303 	mla	r3, r2, r3, r5
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e72a:	bfa8      	it	ge
 800e72c:	f1c1 0138 	rsbge	r1, r1, #56	@ 0x38
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e730:	6942      	ldr	r2, [r0, #20]
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e732:	bfa8      	it	ge
 800e734:	6181      	strge	r1, [r0, #24]
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800e736:	429a      	cmp	r2, r3
 800e738:	d111      	bne.n	800e75e <vTaskPriorityDisinheritAfterTimeout+0x8e>
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e73a:	1d06      	adds	r6, r0, #4
 800e73c:	4630      	mov	r0, r6
 800e73e:	f7fe fba9 	bl	800ce94 <uxListRemove>
						prvAddTaskToReadyList( pxTCB );
 800e742:	4a09      	ldr	r2, [pc, #36]	@ (800e768 <vTaskPriorityDisinheritAfterTimeout+0x98>)
 800e744:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 800e746:	6811      	ldr	r1, [r2, #0]
 800e748:	428b      	cmp	r3, r1
 800e74a:	d900      	bls.n	800e74e <vTaskPriorityDisinheritAfterTimeout+0x7e>
 800e74c:	6013      	str	r3, [r2, #0]
 800e74e:	2014      	movs	r0, #20
 800e750:	4631      	mov	r1, r6
 800e752:	fb00 5003 	mla	r0, r0, r3, r5
	}
 800e756:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
						prvAddTaskToReadyList( pxTCB );
 800e75a:	f7fe bb79 	b.w	800ce50 <vListInsertEnd>
	}
 800e75e:	bd70      	pop	{r4, r5, r6, pc}
 800e760:	2402526c 	.word	0x2402526c
 800e764:	24024e0c 	.word	0x24024e0c
 800e768:	24024d90 	.word	0x24024d90

0800e76c <pvTaskIncrementMutexHeldCount>:
		if( pxCurrentTCB != NULL )
 800e76c:	4b04      	ldr	r3, [pc, #16]	@ (800e780 <pvTaskIncrementMutexHeldCount+0x14>)
 800e76e:	681a      	ldr	r2, [r3, #0]
 800e770:	b11a      	cbz	r2, 800e77a <pvTaskIncrementMutexHeldCount+0xe>
			( pxCurrentTCB->uxMutexesHeld )++;
 800e772:	6819      	ldr	r1, [r3, #0]
 800e774:	6d0a      	ldr	r2, [r1, #80]	@ 0x50
 800e776:	3201      	adds	r2, #1
 800e778:	650a      	str	r2, [r1, #80]	@ 0x50
		return pxCurrentTCB;
 800e77a:	6818      	ldr	r0, [r3, #0]
	}
 800e77c:	4770      	bx	lr
 800e77e:	bf00      	nop
 800e780:	2402526c 	.word	0x2402526c

0800e784 <prvInsertTimerInActiveList>:
BaseType_t xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );

	if( xNextExpiryTime <= xTimeNow )
 800e784:	4291      	cmp	r1, r2
{
 800e786:	b508      	push	{r3, lr}
	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800e788:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e78a:	6100      	str	r0, [r0, #16]
	if( xNextExpiryTime <= xTimeNow )
 800e78c:	d80a      	bhi.n	800e7a4 <prvInsertTimerInActiveList+0x20>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e78e:	1ad2      	subs	r2, r2, r3
 800e790:	6983      	ldr	r3, [r0, #24]
 800e792:	429a      	cmp	r2, r3
 800e794:	d20d      	bcs.n	800e7b2 <prvInsertTimerInActiveList+0x2e>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800e796:	1d01      	adds	r1, r0, #4
 800e798:	4b07      	ldr	r3, [pc, #28]	@ (800e7b8 <prvInsertTimerInActiveList+0x34>)
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e79a:	6818      	ldr	r0, [r3, #0]
 800e79c:	f7fe fb63 	bl	800ce66 <vListInsert>
BaseType_t xProcessTimerNow = pdFALSE;
 800e7a0:	2000      	movs	r0, #0
		}
	}

	return xProcessTimerNow;
}
 800e7a2:	bd08      	pop	{r3, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800e7a4:	429a      	cmp	r2, r3
 800e7a6:	d201      	bcs.n	800e7ac <prvInsertTimerInActiveList+0x28>
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	d202      	bcs.n	800e7b2 <prvInsertTimerInActiveList+0x2e>
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e7ac:	1d01      	adds	r1, r0, #4
 800e7ae:	4b03      	ldr	r3, [pc, #12]	@ (800e7bc <prvInsertTimerInActiveList+0x38>)
 800e7b0:	e7f3      	b.n	800e79a <prvInsertTimerInActiveList+0x16>
			xProcessTimerNow = pdTRUE;
 800e7b2:	2001      	movs	r0, #1
	return xProcessTimerNow;
 800e7b4:	e7f5      	b.n	800e7a2 <prvInsertTimerInActiveList+0x1e>
 800e7b6:	bf00      	nop
 800e7b8:	2402536c 	.word	0x2402536c
 800e7bc:	24025370 	.word	0x24025370

0800e7c0 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800e7c0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
	{
		if( xTimerQueue == NULL )
 800e7c2:	4c11      	ldr	r4, [pc, #68]	@ (800e808 <prvCheckForValidListAndQueue+0x48>)
	taskENTER_CRITICAL();
 800e7c4:	f7fe fbde 	bl	800cf84 <vPortEnterCritical>
		if( xTimerQueue == NULL )
 800e7c8:	6825      	ldr	r5, [r4, #0]
 800e7ca:	b9bd      	cbnz	r5, 800e7fc <prvCheckForValidListAndQueue+0x3c>
		{
			vListInitialise( &xActiveTimerList1 );
 800e7cc:	4f0f      	ldr	r7, [pc, #60]	@ (800e80c <prvCheckForValidListAndQueue+0x4c>)
			vListInitialise( &xActiveTimerList2 );
 800e7ce:	4e10      	ldr	r6, [pc, #64]	@ (800e810 <prvCheckForValidListAndQueue+0x50>)
			vListInitialise( &xActiveTimerList1 );
 800e7d0:	4638      	mov	r0, r7
 800e7d2:	f7fe fb2f 	bl	800ce34 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800e7d6:	4630      	mov	r0, r6
 800e7d8:	f7fe fb2c 	bl	800ce34 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800e7dc:	4b0d      	ldr	r3, [pc, #52]	@ (800e814 <prvCheckForValidListAndQueue+0x54>)
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7de:	4a0e      	ldr	r2, [pc, #56]	@ (800e818 <prvCheckForValidListAndQueue+0x58>)
 800e7e0:	2110      	movs	r1, #16
			pxCurrentTimerList = &xActiveTimerList1;
 800e7e2:	601f      	str	r7, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7e4:	200a      	movs	r0, #10
			pxOverflowTimerList = &xActiveTimerList2;
 800e7e6:	4b0d      	ldr	r3, [pc, #52]	@ (800e81c <prvCheckForValidListAndQueue+0x5c>)
 800e7e8:	601e      	str	r6, [r3, #0]
				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800e7ea:	4b0d      	ldr	r3, [pc, #52]	@ (800e820 <prvCheckForValidListAndQueue+0x60>)
 800e7ec:	9500      	str	r5, [sp, #0]
 800e7ee:	f7fe fdd3 	bl	800d398 <xQueueGenericCreateStatic>
 800e7f2:	6020      	str	r0, [r4, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800e7f4:	b110      	cbz	r0, 800e7fc <prvCheckForValidListAndQueue+0x3c>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800e7f6:	490b      	ldr	r1, [pc, #44]	@ (800e824 <prvCheckForValidListAndQueue+0x64>)
 800e7f8:	f7ff f9fe 	bl	800dbf8 <vQueueAddToRegistry>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
}
 800e7fc:	b003      	add	sp, #12
 800e7fe:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
	taskEXIT_CRITICAL();
 800e802:	f7fe bbdf 	b.w	800cfc4 <vPortExitCritical>
 800e806:	bf00      	nop
 800e808:	24025368 	.word	0x24025368
 800e80c:	24025388 	.word	0x24025388
 800e810:	24025374 	.word	0x24025374
 800e814:	24025370 	.word	0x24025370
 800e818:	240252c0 	.word	0x240252c0
 800e81c:	2402536c 	.word	0x2402536c
 800e820:	24025270 	.word	0x24025270
 800e824:	0802508d 	.word	0x0802508d

0800e828 <xTimerCreateTimerTask>:
{
 800e828:	b510      	push	{r4, lr}
 800e82a:	b088      	sub	sp, #32
	prvCheckForValidListAndQueue();
 800e82c:	f7ff ffc8 	bl	800e7c0 <prvCheckForValidListAndQueue>
	if( xTimerQueue != NULL )
 800e830:	4b12      	ldr	r3, [pc, #72]	@ (800e87c <xTimerCreateTimerTask+0x54>)
 800e832:	681b      	ldr	r3, [r3, #0]
 800e834:	b1b3      	cbz	r3, 800e864 <xTimerCreateTimerTask+0x3c>
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e836:	2400      	movs	r4, #0
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e838:	aa07      	add	r2, sp, #28
 800e83a:	a906      	add	r1, sp, #24
 800e83c:	a805      	add	r0, sp, #20
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800e83e:	e9cd 4405 	strd	r4, r4, [sp, #20]
			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800e842:	f7fe f9ef 	bl	800cc24 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800e846:	9b05      	ldr	r3, [sp, #20]
 800e848:	9a07      	ldr	r2, [sp, #28]
 800e84a:	9302      	str	r3, [sp, #8]
 800e84c:	9b06      	ldr	r3, [sp, #24]
 800e84e:	490c      	ldr	r1, [pc, #48]	@ (800e880 <xTimerCreateTimerTask+0x58>)
 800e850:	9301      	str	r3, [sp, #4]
 800e852:	2302      	movs	r3, #2
 800e854:	480b      	ldr	r0, [pc, #44]	@ (800e884 <xTimerCreateTimerTask+0x5c>)
 800e856:	9300      	str	r3, [sp, #0]
 800e858:	4623      	mov	r3, r4
 800e85a:	f7ff fba5 	bl	800dfa8 <xTaskCreateStatic>
 800e85e:	4b0a      	ldr	r3, [pc, #40]	@ (800e888 <xTimerCreateTimerTask+0x60>)
 800e860:	6018      	str	r0, [r3, #0]
			if( xTimerTaskHandle != NULL )
 800e862:	b940      	cbnz	r0, 800e876 <xTimerCreateTimerTask+0x4e>
 800e864:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e868:	f383 8811 	msr	BASEPRI, r3
 800e86c:	f3bf 8f6f 	isb	sy
 800e870:	f3bf 8f4f 	dsb	sy
	configASSERT( xReturn );
 800e874:	e7fe      	b.n	800e874 <xTimerCreateTimerTask+0x4c>
}
 800e876:	2001      	movs	r0, #1
 800e878:	b008      	add	sp, #32
 800e87a:	bd10      	pop	{r4, pc}
 800e87c:	24025368 	.word	0x24025368
 800e880:	08025092 	.word	0x08025092
 800e884:	0800e985 	.word	0x0800e985
 800e888:	24025364 	.word	0x24025364

0800e88c <xTimerGenericCommand>:
{
 800e88c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800e88e:	4616      	mov	r6, r2
	configASSERT( xTimer );
 800e890:	4604      	mov	r4, r0
{
 800e892:	461a      	mov	r2, r3
	configASSERT( xTimer );
 800e894:	b940      	cbnz	r0, 800e8a8 <xTimerGenericCommand+0x1c>
 800e896:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e89a:	f383 8811 	msr	BASEPRI, r3
 800e89e:	f3bf 8f6f 	isb	sy
 800e8a2:	f3bf 8f4f 	dsb	sy
 800e8a6:	e7fe      	b.n	800e8a6 <xTimerGenericCommand+0x1a>
	if( xTimerQueue != NULL )
 800e8a8:	4d0c      	ldr	r5, [pc, #48]	@ (800e8dc <xTimerGenericCommand+0x50>)
 800e8aa:	6828      	ldr	r0, [r5, #0]
 800e8ac:	b178      	cbz	r0, 800e8ce <xTimerGenericCommand+0x42>
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e8ae:	2905      	cmp	r1, #5
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800e8b0:	9402      	str	r4, [sp, #8]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800e8b2:	e9cd 1600 	strd	r1, r6, [sp]
		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800e8b6:	dc0c      	bgt.n	800e8d2 <xTimerGenericCommand+0x46>
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e8b8:	f7ff fe7a 	bl	800e5b0 <xTaskGetSchedulerState>
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8bc:	2300      	movs	r3, #0
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800e8be:	2802      	cmp	r0, #2
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8c0:	4669      	mov	r1, sp
 800e8c2:	6828      	ldr	r0, [r5, #0]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800e8c4:	bf0c      	ite	eq
 800e8c6:	9a08      	ldreq	r2, [sp, #32]
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800e8c8:	461a      	movne	r2, r3
 800e8ca:	f7fe fe1a 	bl	800d502 <xQueueGenericSend>
}
 800e8ce:	b004      	add	sp, #16
 800e8d0:	bd70      	pop	{r4, r5, r6, pc}
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	4669      	mov	r1, sp
 800e8d6:	f7fe ff17 	bl	800d708 <xQueueGenericSendFromISR>
 800e8da:	e7f8      	b.n	800e8ce <xTimerGenericCommand+0x42>
 800e8dc:	24025368 	.word	0x24025368

0800e8e0 <prvSampleTimeNow>:
{
 800e8e0:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
	if( xTimeNow < xLastTime )
 800e8e4:	f8df 8098 	ldr.w	r8, [pc, #152]	@ 800e980 <prvSampleTimeNow+0xa0>
{
 800e8e8:	4606      	mov	r6, r0
	xTimeNow = xTaskGetTickCount();
 800e8ea:	f7ff fbcb 	bl	800e084 <xTaskGetTickCount>
 800e8ee:	4605      	mov	r5, r0
	if( xTimeNow < xLastTime )
 800e8f0:	f8d8 3000 	ldr.w	r3, [r8]
 800e8f4:	4283      	cmp	r3, r0
 800e8f6:	d909      	bls.n	800e90c <prvSampleTimeNow+0x2c>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800e8f8:	4f1f      	ldr	r7, [pc, #124]	@ (800e978 <prvSampleTimeNow+0x98>)
 800e8fa:	683b      	ldr	r3, [r7, #0]
 800e8fc:	681a      	ldr	r2, [r3, #0]
 800e8fe:	b96a      	cbnz	r2, 800e91c <prvSampleTimeNow+0x3c>
	pxCurrentTimerList = pxOverflowTimerList;
 800e900:	4a1e      	ldr	r2, [pc, #120]	@ (800e97c <prvSampleTimeNow+0x9c>)
 800e902:	6811      	ldr	r1, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800e904:	6013      	str	r3, [r2, #0]
 800e906:	2301      	movs	r3, #1
	pxCurrentTimerList = pxOverflowTimerList;
 800e908:	6039      	str	r1, [r7, #0]
		*pxTimerListsWereSwitched = pdTRUE;
 800e90a:	e000      	b.n	800e90e <prvSampleTimeNow+0x2e>
 800e90c:	2300      	movs	r3, #0
}
 800e90e:	4628      	mov	r0, r5
		*pxTimerListsWereSwitched = pdTRUE;
 800e910:	6033      	str	r3, [r6, #0]
	xLastTime = xTimeNow;
 800e912:	f8c8 5000 	str.w	r5, [r8]
}
 800e916:	b002      	add	sp, #8
 800e918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e91c:	68db      	ldr	r3, [r3, #12]
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e91e:	68dc      	ldr	r4, [r3, #12]
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e920:	f8d3 9000 	ldr.w	r9, [r3]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e924:	f104 0a04 	add.w	sl, r4, #4
 800e928:	4650      	mov	r0, sl
 800e92a:	f7fe fab3 	bl	800ce94 <uxListRemove>
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800e92e:	6a23      	ldr	r3, [r4, #32]
 800e930:	4620      	mov	r0, r4
 800e932:	4798      	blx	r3
		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e934:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800e938:	075b      	lsls	r3, r3, #29
 800e93a:	d5de      	bpl.n	800e8fa <prvSampleTimeNow+0x1a>
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800e93c:	69a3      	ldr	r3, [r4, #24]
 800e93e:	444b      	add	r3, r9
			if( xReloadTime > xNextExpireTime )
 800e940:	4599      	cmp	r9, r3
 800e942:	d206      	bcs.n	800e952 <prvSampleTimeNow+0x72>
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e944:	4651      	mov	r1, sl
 800e946:	6838      	ldr	r0, [r7, #0]
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800e948:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800e94a:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800e94c:	f7fe fa8b 	bl	800ce66 <vListInsert>
 800e950:	e7d3      	b.n	800e8fa <prvSampleTimeNow+0x1a>
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e952:	2300      	movs	r3, #0
 800e954:	464a      	mov	r2, r9
 800e956:	4620      	mov	r0, r4
 800e958:	4619      	mov	r1, r3
 800e95a:	9300      	str	r3, [sp, #0]
 800e95c:	f7ff ff96 	bl	800e88c <xTimerGenericCommand>
				configASSERT( xResult );
 800e960:	2800      	cmp	r0, #0
 800e962:	d1ca      	bne.n	800e8fa <prvSampleTimeNow+0x1a>
 800e964:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e968:	f383 8811 	msr	BASEPRI, r3
 800e96c:	f3bf 8f6f 	isb	sy
 800e970:	f3bf 8f4f 	dsb	sy
 800e974:	e7fe      	b.n	800e974 <prvSampleTimeNow+0x94>
 800e976:	bf00      	nop
 800e978:	24025370 	.word	0x24025370
 800e97c:	2402536c 	.word	0x2402536c
 800e980:	24025360 	.word	0x24025360

0800e984 <prvTimerTask>:
{
 800e984:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e988:	4d6e      	ldr	r5, [pc, #440]	@ (800eb44 <prvTimerTask+0x1c0>)
{
 800e98a:	b089      	sub	sp, #36	@ 0x24
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800e98c:	4e6e      	ldr	r6, [pc, #440]	@ (800eb48 <prvTimerTask+0x1c4>)
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e98e:	682b      	ldr	r3, [r5, #0]
 800e990:	f8d3 8000 	ldr.w	r8, [r3]
 800e994:	f1b8 0f00 	cmp.w	r8, #0
 800e998:	d035      	beq.n	800ea06 <prvTimerTask+0x82>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e99a:	68db      	ldr	r3, [r3, #12]
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800e99c:	2400      	movs	r4, #0
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800e99e:	f8d3 8000 	ldr.w	r8, [r3]
	vTaskSuspendAll();
 800e9a2:	f7ff fb67 	bl	800e074 <vTaskSuspendAll>
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9a6:	a804      	add	r0, sp, #16
 800e9a8:	f7ff ff9a 	bl	800e8e0 <prvSampleTimeNow>
		if( xTimerListsWereSwitched == pdFALSE )
 800e9ac:	9b04      	ldr	r3, [sp, #16]
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800e9ae:	4681      	mov	r9, r0
		if( xTimerListsWereSwitched == pdFALSE )
 800e9b0:	2b00      	cmp	r3, #0
 800e9b2:	d169      	bne.n	800ea88 <prvTimerTask+0x104>
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800e9b4:	2c00      	cmp	r4, #0
 800e9b6:	d14c      	bne.n	800ea52 <prvTimerTask+0xce>
 800e9b8:	4540      	cmp	r0, r8
 800e9ba:	d350      	bcc.n	800ea5e <prvTimerTask+0xda>
				( void ) xTaskResumeAll();
 800e9bc:	f7ff fbfe 	bl	800e1bc <xTaskResumeAll>
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e9c0:	682b      	ldr	r3, [r5, #0]
 800e9c2:	68db      	ldr	r3, [r3, #12]
 800e9c4:	68df      	ldr	r7, [r3, #12]
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800e9c6:	1d38      	adds	r0, r7, #4
 800e9c8:	f7fe fa64 	bl	800ce94 <uxListRemove>
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800e9cc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800e9d0:	0758      	lsls	r0, r3, #29
 800e9d2:	d51a      	bpl.n	800ea0a <prvTimerTask+0x86>
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800e9d4:	69b9      	ldr	r1, [r7, #24]
 800e9d6:	4643      	mov	r3, r8
 800e9d8:	464a      	mov	r2, r9
 800e9da:	4638      	mov	r0, r7
 800e9dc:	4441      	add	r1, r8
 800e9de:	f7ff fed1 	bl	800e784 <prvInsertTimerInActiveList>
 800e9e2:	b1b0      	cbz	r0, 800ea12 <prvTimerTask+0x8e>
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800e9e4:	4623      	mov	r3, r4
 800e9e6:	4642      	mov	r2, r8
 800e9e8:	4621      	mov	r1, r4
 800e9ea:	4638      	mov	r0, r7
 800e9ec:	9400      	str	r4, [sp, #0]
 800e9ee:	f7ff ff4d 	bl	800e88c <xTimerGenericCommand>
			configASSERT( xResult );
 800e9f2:	b970      	cbnz	r0, 800ea12 <prvTimerTask+0x8e>
 800e9f4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800e9f8:	f383 8811 	msr	BASEPRI, r3
 800e9fc:	f3bf 8f6f 	isb	sy
 800ea00:	f3bf 8f4f 	dsb	sy
 800ea04:	e7fe      	b.n	800ea04 <prvTimerTask+0x80>
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ea06:	2401      	movs	r4, #1
 800ea08:	e7cb      	b.n	800e9a2 <prvTimerTask+0x1e>
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ea0a:	f023 0301 	bic.w	r3, r3, #1
 800ea0e:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ea12:	6a3b      	ldr	r3, [r7, #32]
 800ea14:	4638      	mov	r0, r7
 800ea16:	4798      	blx	r3
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ea18:	2200      	movs	r2, #0
 800ea1a:	a904      	add	r1, sp, #16
 800ea1c:	6830      	ldr	r0, [r6, #0]
 800ea1e:	f7fe ff21 	bl	800d864 <xQueueReceive>
 800ea22:	2800      	cmp	r0, #0
 800ea24:	d0b3      	beq.n	800e98e <prvTimerTask+0xa>
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea26:	9b04      	ldr	r3, [sp, #16]
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea28:	9806      	ldr	r0, [sp, #24]
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ea2a:	2b00      	cmp	r3, #0
 800ea2c:	db2f      	blt.n	800ea8e <prvTimerTask+0x10a>
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800ea2e:	9c06      	ldr	r4, [sp, #24]
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800ea30:	6963      	ldr	r3, [r4, #20]
 800ea32:	2b00      	cmp	r3, #0
 800ea34:	d132      	bne.n	800ea9c <prvTimerTask+0x118>
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea36:	a803      	add	r0, sp, #12
 800ea38:	f7ff ff52 	bl	800e8e0 <prvSampleTimeNow>
			switch( xMessage.xMessageID )
 800ea3c:	9b04      	ldr	r3, [sp, #16]
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ea3e:	4602      	mov	r2, r0
			switch( xMessage.xMessageID )
 800ea40:	2b09      	cmp	r3, #9
 800ea42:	d8e9      	bhi.n	800ea18 <prvTimerTask+0x94>
 800ea44:	e8df f003 	tbb	[pc, r3]
 800ea48:	572e2e2e 	.word	0x572e2e2e
 800ea4c:	2e2e765e 	.word	0x2e2e765e
 800ea50:	5e57      	.short	0x5e57
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ea52:	4b3e      	ldr	r3, [pc, #248]	@ (800eb4c <prvTimerTask+0x1c8>)
 800ea54:	681b      	ldr	r3, [r3, #0]
 800ea56:	681c      	ldr	r4, [r3, #0]
 800ea58:	fab4 f484 	clz	r4, r4
 800ea5c:	0964      	lsrs	r4, r4, #5
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ea5e:	4622      	mov	r2, r4
 800ea60:	eba8 0109 	sub.w	r1, r8, r9
 800ea64:	6830      	ldr	r0, [r6, #0]
 800ea66:	f7ff f906 	bl	800dc76 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ea6a:	f7ff fba7 	bl	800e1bc <xTaskResumeAll>
 800ea6e:	2800      	cmp	r0, #0
 800ea70:	d1d2      	bne.n	800ea18 <prvTimerTask+0x94>
					portYIELD_WITHIN_API();
 800ea72:	f04f 23e0 	mov.w	r3, #3758153728	@ 0xe000e000
 800ea76:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800ea7a:	f8c3 2d04 	str.w	r2, [r3, #3332]	@ 0xd04
 800ea7e:	f3bf 8f4f 	dsb	sy
 800ea82:	f3bf 8f6f 	isb	sy
 800ea86:	e7c7      	b.n	800ea18 <prvTimerTask+0x94>
			( void ) xTaskResumeAll();
 800ea88:	f7ff fb98 	bl	800e1bc <xTaskResumeAll>
}
 800ea8c:	e7c4      	b.n	800ea18 <prvTimerTask+0x94>
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800ea8e:	9b05      	ldr	r3, [sp, #20]
 800ea90:	9907      	ldr	r1, [sp, #28]
 800ea92:	4798      	blx	r3
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800ea94:	9b04      	ldr	r3, [sp, #16]
 800ea96:	2b00      	cmp	r3, #0
 800ea98:	dbbe      	blt.n	800ea18 <prvTimerTask+0x94>
 800ea9a:	e7c8      	b.n	800ea2e <prvTimerTask+0xaa>
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ea9c:	1d20      	adds	r0, r4, #4
 800ea9e:	f7fe f9f9 	bl	800ce94 <uxListRemove>
 800eaa2:	e7c8      	b.n	800ea36 <prvTimerTask+0xb2>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eaa4:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eaa8:	4620      	mov	r0, r4
 800eaaa:	69a1      	ldr	r1, [r4, #24]
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eaac:	f043 0301 	orr.w	r3, r3, #1
 800eab0:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800eab4:	9b05      	ldr	r3, [sp, #20]
 800eab6:	4419      	add	r1, r3
 800eab8:	f7ff fe64 	bl	800e784 <prvInsertTimerInActiveList>
 800eabc:	2800      	cmp	r0, #0
 800eabe:	d0ab      	beq.n	800ea18 <prvTimerTask+0x94>
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eac0:	6a23      	ldr	r3, [r4, #32]
 800eac2:	4620      	mov	r0, r4
 800eac4:	4798      	blx	r3
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eac6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eaca:	0759      	lsls	r1, r3, #29
 800eacc:	d5a4      	bpl.n	800ea18 <prvTimerTask+0x94>
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800eace:	69a2      	ldr	r2, [r4, #24]
 800ead0:	2300      	movs	r3, #0
 800ead2:	9905      	ldr	r1, [sp, #20]
 800ead4:	4620      	mov	r0, r4
 800ead6:	9300      	str	r3, [sp, #0]
 800ead8:	440a      	add	r2, r1
 800eada:	4619      	mov	r1, r3
 800eadc:	f7ff fed6 	bl	800e88c <xTimerGenericCommand>
							configASSERT( xResult );
 800eae0:	2800      	cmp	r0, #0
 800eae2:	d199      	bne.n	800ea18 <prvTimerTask+0x94>
 800eae4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eae8:	f383 8811 	msr	BASEPRI, r3
 800eaec:	f3bf 8f6f 	isb	sy
 800eaf0:	f3bf 8f4f 	dsb	sy
 800eaf4:	e7fe      	b.n	800eaf4 <prvTimerTask+0x170>
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eaf6:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eafa:	f023 0301 	bic.w	r3, r3, #1
 800eafe:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
 800eb02:	e789      	b.n	800ea18 <prvTimerTask+0x94>
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800eb04:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eb08:	f043 0301 	orr.w	r3, r3, #1
 800eb0c:	f884 3028 	strb.w	r3, [r4, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eb10:	9905      	ldr	r1, [sp, #20]
 800eb12:	61a1      	str	r1, [r4, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eb14:	b941      	cbnz	r1, 800eb28 <prvTimerTask+0x1a4>
 800eb16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800eb1a:	f383 8811 	msr	BASEPRI, r3
 800eb1e:	f3bf 8f6f 	isb	sy
 800eb22:	f3bf 8f4f 	dsb	sy
 800eb26:	e7fe      	b.n	800eb26 <prvTimerTask+0x1a2>
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eb28:	4603      	mov	r3, r0
 800eb2a:	4401      	add	r1, r0
 800eb2c:	4620      	mov	r0, r4
 800eb2e:	f7ff fe29 	bl	800e784 <prvInsertTimerInActiveList>
					break;
 800eb32:	e771      	b.n	800ea18 <prvTimerTask+0x94>
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eb34:	f894 3028 	ldrb.w	r3, [r4, #40]	@ 0x28
 800eb38:	079a      	lsls	r2, r3, #30
 800eb3a:	d4de      	bmi.n	800eafa <prvTimerTask+0x176>
							vPortFree( pxTimer );
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f7fe f93b 	bl	800cdb8 <vPortFree>
 800eb42:	e769      	b.n	800ea18 <prvTimerTask+0x94>
 800eb44:	24025370 	.word	0x24025370
 800eb48:	24025368 	.word	0x24025368
 800eb4c:	2402536c 	.word	0x2402536c

0800eb50 <_ZNK8touchgfx17AbstractPartition18getAllocationCountEv>:
 800eb50:	8880      	ldrh	r0, [r0, #4]
 800eb52:	4770      	bx	lr

0800eb54 <_ZN8touchgfx17AbstractPartition7indexOfEPKv>:
 800eb54:	b570      	push	{r4, r5, r6, lr}
 800eb56:	6803      	ldr	r3, [r0, #0]
 800eb58:	460c      	mov	r4, r1
 800eb5a:	2100      	movs	r1, #0
 800eb5c:	4605      	mov	r5, r0
 800eb5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb60:	4798      	blx	r3
 800eb62:	4606      	mov	r6, r0
 800eb64:	682b      	ldr	r3, [r5, #0]
 800eb66:	4628      	mov	r0, r5
 800eb68:	1ba4      	subs	r4, r4, r6
 800eb6a:	6a1b      	ldr	r3, [r3, #32]
 800eb6c:	b2a4      	uxth	r4, r4
 800eb6e:	4798      	blx	r3
 800eb70:	fbb4 f0f0 	udiv	r0, r4, r0
 800eb74:	bd70      	pop	{r4, r5, r6, pc}

0800eb76 <_ZN8touchgfx17AbstractPartition5clearEv>:
 800eb76:	2300      	movs	r3, #0
 800eb78:	8083      	strh	r3, [r0, #4]
 800eb7a:	4770      	bx	lr

0800eb7c <_ZN8touchgfx17AbstractPartition8allocateEt>:
 800eb7c:	b510      	push	{r4, lr}
 800eb7e:	6803      	ldr	r3, [r0, #0]
 800eb80:	4604      	mov	r4, r0
 800eb82:	8881      	ldrh	r1, [r0, #4]
 800eb84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb86:	4798      	blx	r3
 800eb88:	88a3      	ldrh	r3, [r4, #4]
 800eb8a:	3301      	adds	r3, #1
 800eb8c:	80a3      	strh	r3, [r4, #4]
 800eb8e:	bd10      	pop	{r4, pc}

0800eb90 <_ZN8touchgfx17AbstractPartition10allocateAtEtt>:
 800eb90:	6803      	ldr	r3, [r0, #0]
 800eb92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb94:	4718      	bx	r3

0800eb96 <_ZN8touchgfx17AbstractPartitionD1Ev>:
 800eb96:	4770      	bx	lr

0800eb98 <_ZN8touchgfx17AbstractPartitionC1Ev>:
 800eb98:	4a02      	ldr	r2, [pc, #8]	@ (800eba4 <_ZN8touchgfx17AbstractPartitionC1Ev+0xc>)
 800eb9a:	6002      	str	r2, [r0, #0]
 800eb9c:	2200      	movs	r2, #0
 800eb9e:	8082      	strh	r2, [r0, #4]
 800eba0:	4770      	bx	lr
 800eba2:	bf00      	nop
 800eba4:	080250a4 	.word	0x080250a4

0800eba8 <_ZN8touchgfx9Container8containsERKNS_8DrawableE>:
 800eba8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ebaa:	2000      	movs	r0, #0
 800ebac:	b12b      	cbz	r3, 800ebba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ebae:	b920      	cbnz	r0, 800ebba <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x12>
 800ebb0:	1a5a      	subs	r2, r3, r1
 800ebb2:	699b      	ldr	r3, [r3, #24]
 800ebb4:	4250      	negs	r0, r2
 800ebb6:	4150      	adcs	r0, r2
 800ebb8:	e7f8      	b.n	800ebac <_ZN8touchgfx9Container8containsERKNS_8DrawableE+0x4>
 800ebba:	4770      	bx	lr

0800ebbc <_ZN8touchgfx9Container3addERNS_8DrawableE>:
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	6148      	str	r0, [r1, #20]
 800ebc0:	618b      	str	r3, [r1, #24]
 800ebc2:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ebc4:	b913      	cbnz	r3, 800ebcc <_ZN8touchgfx9Container3addERNS_8DrawableE+0x10>
 800ebc6:	6281      	str	r1, [r0, #40]	@ 0x28
 800ebc8:	4770      	bx	lr
 800ebca:	4613      	mov	r3, r2
 800ebcc:	699a      	ldr	r2, [r3, #24]
 800ebce:	2a00      	cmp	r2, #0
 800ebd0:	d1fb      	bne.n	800ebca <_ZN8touchgfx9Container3addERNS_8DrawableE+0xe>
 800ebd2:	6199      	str	r1, [r3, #24]
 800ebd4:	4770      	bx	lr

0800ebd6 <_ZN8touchgfx9Container9removeAllEv>:
 800ebd6:	2200      	movs	r2, #0
 800ebd8:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ebda:	b123      	cbz	r3, 800ebe6 <_ZN8touchgfx9Container9removeAllEv+0x10>
 800ebdc:	6999      	ldr	r1, [r3, #24]
 800ebde:	6281      	str	r1, [r0, #40]	@ 0x28
 800ebe0:	e9c3 2205 	strd	r2, r2, [r3, #20]
 800ebe4:	e7f8      	b.n	800ebd8 <_ZN8touchgfx9Container9removeAllEv+0x2>
 800ebe6:	4770      	bx	lr

0800ebe8 <_ZN8touchgfx9Container6unlinkEv>:
 800ebe8:	2300      	movs	r3, #0
 800ebea:	6283      	str	r3, [r0, #40]	@ 0x28
 800ebec:	4770      	bx	lr

0800ebee <_ZNK8touchgfx9Container12getSolidRectEv>:
 800ebee:	2200      	movs	r2, #0
 800ebf0:	8002      	strh	r2, [r0, #0]
 800ebf2:	8042      	strh	r2, [r0, #2]
 800ebf4:	8082      	strh	r2, [r0, #4]
 800ebf6:	80c2      	strh	r2, [r0, #6]
 800ebf8:	4770      	bx	lr

0800ebfa <_ZN8touchgfx9Container20moveChildrenRelativeEss>:
 800ebfa:	b570      	push	{r4, r5, r6, lr}
 800ebfc:	460d      	mov	r5, r1
 800ebfe:	4616      	mov	r6, r2
 800ec00:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ec02:	b13c      	cbz	r4, 800ec14 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x1a>
 800ec04:	6823      	ldr	r3, [r4, #0]
 800ec06:	4620      	mov	r0, r4
 800ec08:	4632      	mov	r2, r6
 800ec0a:	4629      	mov	r1, r5
 800ec0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ec0e:	4798      	blx	r3
 800ec10:	69a4      	ldr	r4, [r4, #24]
 800ec12:	e7f6      	b.n	800ec02 <_ZN8touchgfx9Container20moveChildrenRelativeEss+0x8>
 800ec14:	bd70      	pop	{r4, r5, r6, pc}

0800ec16 <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE>:
 800ec16:	b538      	push	{r3, r4, r5, lr}
 800ec18:	460d      	mov	r5, r1
 800ec1a:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ec1c:	b134      	cbz	r4, 800ec2c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x16>
 800ec1e:	682b      	ldr	r3, [r5, #0]
 800ec20:	4621      	mov	r1, r4
 800ec22:	4628      	mov	r0, r5
 800ec24:	689b      	ldr	r3, [r3, #8]
 800ec26:	4798      	blx	r3
 800ec28:	69a4      	ldr	r4, [r4, #24]
 800ec2a:	e7f7      	b.n	800ec1c <_ZN8touchgfx9Container12forEachChildEPNS_15GenericCallbackIRNS_8DrawableEvvEE+0x6>
 800ec2c:	bd38      	pop	{r3, r4, r5, pc}

0800ec2e <_ZN8touchgfx9ContainerD1Ev>:
 800ec2e:	4770      	bx	lr

0800ec30 <_ZN8touchgfx9ContainerD0Ev>:
 800ec30:	b510      	push	{r4, lr}
 800ec32:	4604      	mov	r4, r0
 800ec34:	212c      	movs	r1, #44	@ 0x2c
 800ec36:	f012 f9f6 	bl	8021026 <_ZdlPvj>
 800ec3a:	4620      	mov	r0, r4
 800ec3c:	bd10      	pop	{r4, pc}

0800ec3e <_ZN8touchgfx9Container6removeERNS_8DrawableE>:
 800ec3e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ec40:	b19b      	cbz	r3, 800ec6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ec42:	428b      	cmp	r3, r1
 800ec44:	d109      	bne.n	800ec5a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x1c>
 800ec46:	699a      	ldr	r2, [r3, #24]
 800ec48:	2100      	movs	r1, #0
 800ec4a:	6159      	str	r1, [r3, #20]
 800ec4c:	6282      	str	r2, [r0, #40]	@ 0x28
 800ec4e:	b902      	cbnz	r2, 800ec52 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x14>
 800ec50:	4770      	bx	lr
 800ec52:	6199      	str	r1, [r3, #24]
 800ec54:	4770      	bx	lr
 800ec56:	4613      	mov	r3, r2
 800ec58:	b13a      	cbz	r2, 800ec6a <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x2c>
 800ec5a:	699a      	ldr	r2, [r3, #24]
 800ec5c:	428a      	cmp	r2, r1
 800ec5e:	d1fa      	bne.n	800ec56 <_ZN8touchgfx9Container6removeERNS_8DrawableE+0x18>
 800ec60:	698a      	ldr	r2, [r1, #24]
 800ec62:	619a      	str	r2, [r3, #24]
 800ec64:	2300      	movs	r3, #0
 800ec66:	e9c1 3305 	strd	r3, r3, [r1, #20]
 800ec6a:	4770      	bx	lr

0800ec6c <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_>:
 800ec6c:	b410      	push	{r4}
 800ec6e:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 800ec70:	4604      	mov	r4, r0
 800ec72:	b92b      	cbnz	r3, 800ec80 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x14>
 800ec74:	6803      	ldr	r3, [r0, #0]
 800ec76:	4611      	mov	r1, r2
 800ec78:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec7c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ec7e:	4718      	bx	r3
 800ec80:	b941      	cbnz	r1, 800ec94 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x28>
 800ec82:	6193      	str	r3, [r2, #24]
 800ec84:	6282      	str	r2, [r0, #40]	@ 0x28
 800ec86:	6154      	str	r4, [r2, #20]
 800ec88:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ec8c:	4770      	bx	lr
 800ec8e:	4603      	mov	r3, r0
 800ec90:	2800      	cmp	r0, #0
 800ec92:	d0f9      	beq.n	800ec88 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1c>
 800ec94:	4299      	cmp	r1, r3
 800ec96:	6998      	ldr	r0, [r3, #24]
 800ec98:	d1f9      	bne.n	800ec8e <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x22>
 800ec9a:	6190      	str	r0, [r2, #24]
 800ec9c:	618a      	str	r2, [r1, #24]
 800ec9e:	e7f2      	b.n	800ec86 <_ZN8touchgfx9Container6insertEPNS_8DrawableERS1_+0x1a>

0800eca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>:
 800eca0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800eca4:	461f      	mov	r7, r3
 800eca6:	f890 3024 	ldrb.w	r3, [r0, #36]	@ 0x24
 800ecaa:	460d      	mov	r5, r1
 800ecac:	4616      	mov	r6, r2
 800ecae:	b103      	cbz	r3, 800ecb2 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x12>
 800ecb0:	6038      	str	r0, [r7, #0]
 800ecb2:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800ecb4:	b314      	cbz	r4, 800ecfc <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x5c>
 800ecb6:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800ecba:	b1eb      	cbz	r3, 800ecf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecbc:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 800ecc0:	428d      	cmp	r5, r1
 800ecc2:	db19      	blt.n	800ecf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecc4:	b289      	uxth	r1, r1
 800ecc6:	8923      	ldrh	r3, [r4, #8]
 800ecc8:	440b      	add	r3, r1
 800ecca:	b21b      	sxth	r3, r3
 800eccc:	429d      	cmp	r5, r3
 800ecce:	da13      	bge.n	800ecf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecd0:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 800ecd4:	4296      	cmp	r6, r2
 800ecd6:	db0f      	blt.n	800ecf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ecd8:	b292      	uxth	r2, r2
 800ecda:	8963      	ldrh	r3, [r4, #10]
 800ecdc:	4413      	add	r3, r2
 800ecde:	b21b      	sxth	r3, r3
 800ece0:	429e      	cmp	r6, r3
 800ece2:	da09      	bge.n	800ecf8 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x58>
 800ece4:	6823      	ldr	r3, [r4, #0]
 800ece6:	1ab2      	subs	r2, r6, r2
 800ece8:	1a69      	subs	r1, r5, r1
 800ecea:	4620      	mov	r0, r4
 800ecec:	f8d3 8024 	ldr.w	r8, [r3, #36]	@ 0x24
 800ecf0:	b212      	sxth	r2, r2
 800ecf2:	463b      	mov	r3, r7
 800ecf4:	b209      	sxth	r1, r1
 800ecf6:	47c0      	blx	r8
 800ecf8:	69a4      	ldr	r4, [r4, #24]
 800ecfa:	e7db      	b.n	800ecb4 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE+0x14>
 800ecfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800ed00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>:
 800ed00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed04:	4c6d      	ldr	r4, [pc, #436]	@ (800eebc <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1bc>)
 800ed06:	b0a1      	sub	sp, #132	@ 0x84
 800ed08:	4606      	mov	r6, r0
 800ed0a:	6824      	ldr	r4, [r4, #0]
 800ed0c:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 800ed0e:	f894 9049 	ldrb.w	r9, [r4, #73]	@ 0x49
 800ed12:	2400      	movs	r4, #0
 800ed14:	9303      	str	r3, [sp, #12]
 800ed16:	802c      	strh	r4, [r5, #0]
 800ed18:	9d2b      	ldr	r5, [sp, #172]	@ 0xac
 800ed1a:	802c      	strh	r4, [r5, #0]
 800ed1c:	601c      	str	r4, [r3, #0]
 800ed1e:	e9cd 1201 	strd	r1, r2, [sp, #4]
 800ed22:	f7ff ffbd 	bl	800eca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ed26:	f1b9 0f03 	cmp.w	r9, #3
 800ed2a:	f340 80c1 	ble.w	800eeb0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b0>
 800ed2e:	4631      	mov	r1, r6
 800ed30:	a80c      	add	r0, sp, #48	@ 0x30
 800ed32:	f005 fc97 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed36:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 800ed3a:	9306      	str	r3, [sp, #24]
 800ed3c:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 800ed40:	9307      	str	r3, [sp, #28]
 800ed42:	9b03      	ldr	r3, [sp, #12]
 800ed44:	f8d3 a000 	ldr.w	sl, [r3]
 800ed48:	f1ba 0f00 	cmp.w	sl, #0
 800ed4c:	f000 80b3 	beq.w	800eeb6 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1b6>
 800ed50:	4651      	mov	r1, sl
 800ed52:	a810      	add	r0, sp, #64	@ 0x40
 800ed54:	f005 fc86 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ed58:	2002      	movs	r0, #2
 800ed5a:	f9bd 1044 	ldrsh.w	r1, [sp, #68]	@ 0x44
 800ed5e:	9b01      	ldr	r3, [sp, #4]
 800ed60:	9a06      	ldr	r2, [sp, #24]
 800ed62:	fb91 f1f0 	sdiv	r1, r1, r0
 800ed66:	189d      	adds	r5, r3, r2
 800ed68:	f9bd 3040 	ldrsh.w	r3, [sp, #64]	@ 0x40
 800ed6c:	9a07      	ldr	r2, [sp, #28]
 800ed6e:	4419      	add	r1, r3
 800ed70:	9b02      	ldr	r3, [sp, #8]
 800ed72:	4413      	add	r3, r2
 800ed74:	f9bd 2046 	ldrsh.w	r2, [sp, #70]	@ 0x46
 800ed78:	1a6d      	subs	r5, r5, r1
 800ed7a:	f9bd 1042 	ldrsh.w	r1, [sp, #66]	@ 0x42
 800ed7e:	fb92 f2f0 	sdiv	r2, r2, r0
 800ed82:	440a      	add	r2, r1
 800ed84:	1a9b      	subs	r3, r3, r2
 800ed86:	435b      	muls	r3, r3
 800ed88:	fb05 3505 	mla	r5, r5, r5, r3
 800ed8c:	4f4c      	ldr	r7, [pc, #304]	@ (800eec0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x1c0>)
 800ed8e:	ac10      	add	r4, sp, #64	@ 0x40
 800ed90:	f1b9 0f0c 	cmp.w	r9, #12
 800ed94:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed96:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed98:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed9a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed9c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
 800ed9e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800eda0:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
 800eda4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 800eda8:	f04f 0303 	mov.w	r3, #3
 800edac:	bfd8      	it	le
 800edae:	f109 32ff 	addle.w	r2, r9, #4294967295
 800edb2:	f04f 0400 	mov.w	r4, #0
 800edb6:	f8cd 9000 	str.w	r9, [sp]
 800edba:	bfcc      	ite	gt
 800edbc:	4698      	movgt	r8, r3
 800edbe:	fb92 f8f3 	sdivle	r8, r2, r3
 800edc2:	1c63      	adds	r3, r4, #1
 800edc4:	aa10      	add	r2, sp, #64	@ 0x40
 800edc6:	f004 0401 	and.w	r4, r4, #1
 800edca:	f04f 0b00 	mov.w	fp, #0
 800edce:	9308      	str	r3, [sp, #32]
 800edd0:	9b00      	ldr	r3, [sp, #0]
 800edd2:	eb02 1444 	add.w	r4, r2, r4, lsl #5
 800edd6:	fb93 f3f8 	sdiv	r3, r3, r8
 800edda:	3404      	adds	r4, #4
 800eddc:	b29b      	uxth	r3, r3
 800edde:	9304      	str	r3, [sp, #16]
 800ede0:	9a04      	ldr	r2, [sp, #16]
 800ede2:	f854 3c04 	ldr.w	r3, [r4, #-4]
 800ede6:	fb13 f302 	smulbb	r3, r3, r2
 800edea:	9a01      	ldr	r2, [sp, #4]
 800edec:	b29b      	uxth	r3, r3
 800edee:	1899      	adds	r1, r3, r2
 800edf0:	9305      	str	r3, [sp, #20]
 800edf2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800edf6:	b209      	sxth	r1, r1
 800edf8:	4299      	cmp	r1, r3
 800edfa:	db4d      	blt.n	800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800edfc:	8932      	ldrh	r2, [r6, #8]
 800edfe:	4413      	add	r3, r2
 800ee00:	b21b      	sxth	r3, r3
 800ee02:	4299      	cmp	r1, r3
 800ee04:	da48      	bge.n	800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee06:	9b04      	ldr	r3, [sp, #16]
 800ee08:	6827      	ldr	r7, [r4, #0]
 800ee0a:	fb17 f703 	smulbb	r7, r7, r3
 800ee0e:	9b02      	ldr	r3, [sp, #8]
 800ee10:	b2bf      	uxth	r7, r7
 800ee12:	18fa      	adds	r2, r7, r3
 800ee14:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800ee18:	b212      	sxth	r2, r2
 800ee1a:	429a      	cmp	r2, r3
 800ee1c:	db3c      	blt.n	800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee1e:	8970      	ldrh	r0, [r6, #10]
 800ee20:	4403      	add	r3, r0
 800ee22:	b21b      	sxth	r3, r3
 800ee24:	429a      	cmp	r2, r3
 800ee26:	da37      	bge.n	800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee28:	2300      	movs	r3, #0
 800ee2a:	4630      	mov	r0, r6
 800ee2c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800ee2e:	ab0b      	add	r3, sp, #44	@ 0x2c
 800ee30:	f7ff ff36 	bl	800eca0 <_ZN8touchgfx9Container12getLastChildEssPPNS_8DrawableE>
 800ee34:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ee36:	b37a      	cbz	r2, 800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee38:	4552      	cmp	r2, sl
 800ee3a:	d02d      	beq.n	800ee98 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x198>
 800ee3c:	4611      	mov	r1, r2
 800ee3e:	a80e      	add	r0, sp, #56	@ 0x38
 800ee40:	9209      	str	r2, [sp, #36]	@ 0x24
 800ee42:	f005 fc0f 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 800ee46:	f04f 0e02 	mov.w	lr, #2
 800ee4a:	f9bd 103c 	ldrsh.w	r1, [sp, #60]	@ 0x3c
 800ee4e:	9a06      	ldr	r2, [sp, #24]
 800ee50:	f9bd 0038 	ldrsh.w	r0, [sp, #56]	@ 0x38
 800ee54:	9b01      	ldr	r3, [sp, #4]
 800ee56:	f9bd c03e 	ldrsh.w	ip, [sp, #62]	@ 0x3e
 800ee5a:	4413      	add	r3, r2
 800ee5c:	9a07      	ldr	r2, [sp, #28]
 800ee5e:	fb91 f1fe 	sdiv	r1, r1, lr
 800ee62:	fb9c fcfe 	sdiv	ip, ip, lr
 800ee66:	4401      	add	r1, r0
 800ee68:	1a58      	subs	r0, r3, r1
 800ee6a:	9b02      	ldr	r3, [sp, #8]
 800ee6c:	f9bd 103a 	ldrsh.w	r1, [sp, #58]	@ 0x3a
 800ee70:	4413      	add	r3, r2
 800ee72:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800ee74:	448c      	add	ip, r1
 800ee76:	eba3 030c 	sub.w	r3, r3, ip
 800ee7a:	435b      	muls	r3, r3
 800ee7c:	fb00 3300 	mla	r3, r0, r0, r3
 800ee80:	42ab      	cmp	r3, r5
 800ee82:	d208      	bcs.n	800ee96 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x196>
 800ee84:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800ee86:	461d      	mov	r5, r3
 800ee88:	9803      	ldr	r0, [sp, #12]
 800ee8a:	6001      	str	r1, [r0, #0]
 800ee8c:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 800ee8e:	9805      	ldr	r0, [sp, #20]
 800ee90:	8008      	strh	r0, [r1, #0]
 800ee92:	992b      	ldr	r1, [sp, #172]	@ 0xac
 800ee94:	800f      	strh	r7, [r1, #0]
 800ee96:	4692      	mov	sl, r2
 800ee98:	f10b 0b01 	add.w	fp, fp, #1
 800ee9c:	3408      	adds	r4, #8
 800ee9e:	f1bb 0f04 	cmp.w	fp, #4
 800eea2:	d19d      	bne.n	800ede0 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xe0>
 800eea4:	9b00      	ldr	r3, [sp, #0]
 800eea6:	9c08      	ldr	r4, [sp, #32]
 800eea8:	444b      	add	r3, r9
 800eeaa:	4544      	cmp	r4, r8
 800eeac:	9300      	str	r3, [sp, #0]
 800eeae:	d188      	bne.n	800edc2 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0xc2>
 800eeb0:	b021      	add	sp, #132	@ 0x84
 800eeb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eeb6:	f04f 35ff 	mov.w	r5, #4294967295
 800eeba:	e767      	b.n	800ed8c <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_+0x8c>
 800eebc:	240253a8 	.word	0x240253a8
 800eec0:	08022840 	.word	0x08022840

0800eec4 <_ZN8touchgfx4RectaNERKS0_>:
 800eec4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800eec8:	f9b1 7000 	ldrsh.w	r7, [r1]
 800eecc:	888c      	ldrh	r4, [r1, #4]
 800eece:	f9b0 9000 	ldrsh.w	r9, [r0]
 800eed2:	443c      	add	r4, r7
 800eed4:	b2a4      	uxth	r4, r4
 800eed6:	fa0f f884 	sxth.w	r8, r4
 800eeda:	45c1      	cmp	r9, r8
 800eedc:	da2f      	bge.n	800ef3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eede:	8882      	ldrh	r2, [r0, #4]
 800eee0:	444a      	add	r2, r9
 800eee2:	b292      	uxth	r2, r2
 800eee4:	fa0f fe82 	sxth.w	lr, r2
 800eee8:	4577      	cmp	r7, lr
 800eeea:	da28      	bge.n	800ef3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eeec:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 800eef0:	88cb      	ldrh	r3, [r1, #6]
 800eef2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 800eef6:	442b      	add	r3, r5
 800eef8:	b21b      	sxth	r3, r3
 800eefa:	429e      	cmp	r6, r3
 800eefc:	da1f      	bge.n	800ef3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800eefe:	88c3      	ldrh	r3, [r0, #6]
 800ef00:	4433      	add	r3, r6
 800ef02:	b29b      	uxth	r3, r3
 800ef04:	fa0f fc83 	sxth.w	ip, r3
 800ef08:	4565      	cmp	r5, ip
 800ef0a:	da18      	bge.n	800ef3e <_ZN8touchgfx4RectaNERKS0_+0x7a>
 800ef0c:	454f      	cmp	r7, r9
 800ef0e:	bfb8      	it	lt
 800ef10:	464f      	movlt	r7, r9
 800ef12:	42b5      	cmp	r5, r6
 800ef14:	bfb8      	it	lt
 800ef16:	4635      	movlt	r5, r6
 800ef18:	45f0      	cmp	r8, lr
 800ef1a:	bfd8      	it	le
 800ef1c:	4622      	movle	r2, r4
 800ef1e:	1bd2      	subs	r2, r2, r7
 800ef20:	8082      	strh	r2, [r0, #4]
 800ef22:	884a      	ldrh	r2, [r1, #2]
 800ef24:	88c9      	ldrh	r1, [r1, #6]
 800ef26:	8007      	strh	r7, [r0, #0]
 800ef28:	440a      	add	r2, r1
 800ef2a:	8045      	strh	r5, [r0, #2]
 800ef2c:	b292      	uxth	r2, r2
 800ef2e:	b211      	sxth	r1, r2
 800ef30:	458c      	cmp	ip, r1
 800ef32:	bfa8      	it	ge
 800ef34:	4613      	movge	r3, r2
 800ef36:	1b5b      	subs	r3, r3, r5
 800ef38:	80c3      	strh	r3, [r0, #6]
 800ef3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ef3e:	2300      	movs	r3, #0
 800ef40:	8003      	strh	r3, [r0, #0]
 800ef42:	8043      	strh	r3, [r0, #2]
 800ef44:	8083      	strh	r3, [r0, #4]
 800ef46:	80c3      	strh	r3, [r0, #6]
 800ef48:	e7f7      	b.n	800ef3a <_ZN8touchgfx4RectaNERKS0_+0x76>

0800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>:
 800ef4a:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 800ef4e:	2b00      	cmp	r3, #0
 800ef50:	dd06      	ble.n	800ef60 <_ZNK8touchgfx4Rect7isEmptyEv+0x16>
 800ef52:	f9b0 0006 	ldrsh.w	r0, [r0, #6]
 800ef56:	2800      	cmp	r0, #0
 800ef58:	bfcc      	ite	gt
 800ef5a:	2000      	movgt	r0, #0
 800ef5c:	2001      	movle	r0, #1
 800ef5e:	4770      	bx	lr
 800ef60:	2001      	movs	r0, #1
 800ef62:	4770      	bx	lr

0800ef64 <_ZNK8touchgfx9Container16getContainedAreaEv>:
 800ef64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ef68:	2300      	movs	r3, #0
 800ef6a:	4604      	mov	r4, r0
 800ef6c:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 800ef6e:	8003      	strh	r3, [r0, #0]
 800ef70:	8043      	strh	r3, [r0, #2]
 800ef72:	8083      	strh	r3, [r0, #4]
 800ef74:	80c3      	strh	r3, [r0, #6]
 800ef76:	2d00      	cmp	r5, #0
 800ef78:	d040      	beq.n	800effc <_ZNK8touchgfx9Container16getContainedAreaEv+0x98>
 800ef7a:	1d28      	adds	r0, r5, #4
 800ef7c:	f7ff ffe5 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef80:	b988      	cbnz	r0, 800efa6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800ef82:	4620      	mov	r0, r4
 800ef84:	f7ff ffe1 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 800ef88:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 800ef8c:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 800ef90:	f9b5 e008 	ldrsh.w	lr, [r5, #8]
 800ef94:	f9b5 c00a 	ldrsh.w	ip, [r5, #10]
 800ef98:	b138      	cbz	r0, 800efaa <_ZNK8touchgfx9Container16getContainedAreaEv+0x46>
 800ef9a:	8022      	strh	r2, [r4, #0]
 800ef9c:	8063      	strh	r3, [r4, #2]
 800ef9e:	f8a4 e004 	strh.w	lr, [r4, #4]
 800efa2:	f8a4 c006 	strh.w	ip, [r4, #6]
 800efa6:	69ad      	ldr	r5, [r5, #24]
 800efa8:	e7e5      	b.n	800ef76 <_ZNK8touchgfx9Container16getContainedAreaEv+0x12>
 800efaa:	f9b4 0000 	ldrsh.w	r0, [r4]
 800efae:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 800efb2:	4290      	cmp	r0, r2
 800efb4:	4607      	mov	r7, r0
 800efb6:	f8b4 8004 	ldrh.w	r8, [r4, #4]
 800efba:	460e      	mov	r6, r1
 800efbc:	bfa8      	it	ge
 800efbe:	4617      	movge	r7, r2
 800efc0:	4299      	cmp	r1, r3
 800efc2:	4472      	add	r2, lr
 800efc4:	f8b4 e006 	ldrh.w	lr, [r4, #6]
 800efc8:	bfa8      	it	ge
 800efca:	461e      	movge	r6, r3
 800efcc:	4440      	add	r0, r8
 800efce:	4471      	add	r1, lr
 800efd0:	4463      	add	r3, ip
 800efd2:	b200      	sxth	r0, r0
 800efd4:	8027      	strh	r7, [r4, #0]
 800efd6:	b212      	sxth	r2, r2
 800efd8:	8066      	strh	r6, [r4, #2]
 800efda:	b209      	sxth	r1, r1
 800efdc:	b21b      	sxth	r3, r3
 800efde:	4290      	cmp	r0, r2
 800efe0:	bfac      	ite	ge
 800efe2:	ebc7 0200 	rsbge	r2, r7, r0
 800efe6:	ebc7 0202 	rsblt	r2, r7, r2
 800efea:	4299      	cmp	r1, r3
 800efec:	bfac      	ite	ge
 800efee:	ebc6 0301 	rsbge	r3, r6, r1
 800eff2:	ebc6 0303 	rsblt	r3, r6, r3
 800eff6:	80a2      	strh	r2, [r4, #4]
 800eff8:	80e3      	strh	r3, [r4, #6]
 800effa:	e7d4      	b.n	800efa6 <_ZNK8touchgfx9Container16getContainedAreaEv+0x42>
 800effc:	4620      	mov	r0, r4
 800effe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f002 <_ZNK8touchgfx9Container4drawERKNS_4RectE>:
 800f002:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 800f006:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f00a:	b383      	cbz	r3, 800f06e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f00c:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f00e:	b374      	cbz	r4, 800f06e <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x6c>
 800f010:	f9b1 5000 	ldrsh.w	r5, [r1]
 800f014:	f9b1 6002 	ldrsh.w	r6, [r1, #2]
 800f018:	f9b1 7004 	ldrsh.w	r7, [r1, #4]
 800f01c:	f9b1 8006 	ldrsh.w	r8, [r1, #6]
 800f020:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f024:	b303      	cbz	r3, 800f068 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f026:	4668      	mov	r0, sp
 800f028:	1d21      	adds	r1, r4, #4
 800f02a:	f8ad 5000 	strh.w	r5, [sp]
 800f02e:	f8ad 6002 	strh.w	r6, [sp, #2]
 800f032:	f8ad 7004 	strh.w	r7, [sp, #4]
 800f036:	f8ad 8006 	strh.w	r8, [sp, #6]
 800f03a:	f7ff ff43 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 800f03e:	4668      	mov	r0, sp
 800f040:	f7ff ff83 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f044:	b980      	cbnz	r0, 800f068 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x66>
 800f046:	f8bd 3000 	ldrh.w	r3, [sp]
 800f04a:	4669      	mov	r1, sp
 800f04c:	88a2      	ldrh	r2, [r4, #4]
 800f04e:	4620      	mov	r0, r4
 800f050:	1a9b      	subs	r3, r3, r2
 800f052:	88e2      	ldrh	r2, [r4, #6]
 800f054:	f8ad 3000 	strh.w	r3, [sp]
 800f058:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f05c:	1a9b      	subs	r3, r3, r2
 800f05e:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f062:	6823      	ldr	r3, [r4, #0]
 800f064:	689b      	ldr	r3, [r3, #8]
 800f066:	4798      	blx	r3
 800f068:	69a4      	ldr	r4, [r4, #24]
 800f06a:	2c00      	cmp	r4, #0
 800f06c:	d1d8      	bne.n	800f020 <_ZNK8touchgfx9Container4drawERKNS_4RectE+0x1e>
 800f06e:	b002      	add	sp, #8
 800f070:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f074 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>:
 800f074:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f076:	f890 3025 	ldrb.w	r3, [r0, #37]	@ 0x25
 800f07a:	460d      	mov	r5, r1
 800f07c:	4616      	mov	r6, r2
 800f07e:	b323      	cbz	r3, 800f0ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f080:	6a84      	ldr	r4, [r0, #40]	@ 0x28
 800f082:	b314      	cbz	r4, 800f0ca <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x56>
 800f084:	f894 3025 	ldrb.w	r3, [r4, #37]	@ 0x25
 800f088:	b1eb      	cbz	r3, 800f0c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f08a:	6828      	ldr	r0, [r5, #0]
 800f08c:	466b      	mov	r3, sp
 800f08e:	6869      	ldr	r1, [r5, #4]
 800f090:	c303      	stmia	r3!, {r0, r1}
 800f092:	4668      	mov	r0, sp
 800f094:	1d21      	adds	r1, r4, #4
 800f096:	f7ff ff15 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 800f09a:	4668      	mov	r0, sp
 800f09c:	f7ff ff55 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 800f0a0:	b988      	cbnz	r0, 800f0c6 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0x52>
 800f0a2:	f8bd 3000 	ldrh.w	r3, [sp]
 800f0a6:	4669      	mov	r1, sp
 800f0a8:	88a2      	ldrh	r2, [r4, #4]
 800f0aa:	4620      	mov	r0, r4
 800f0ac:	1a9b      	subs	r3, r3, r2
 800f0ae:	88e2      	ldrh	r2, [r4, #6]
 800f0b0:	f8ad 3000 	strh.w	r3, [sp]
 800f0b4:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 800f0b8:	1a9b      	subs	r3, r3, r2
 800f0ba:	4632      	mov	r2, r6
 800f0bc:	f8ad 3002 	strh.w	r3, [sp, #2]
 800f0c0:	6823      	ldr	r3, [r4, #0]
 800f0c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800f0c4:	4798      	blx	r3
 800f0c6:	69a4      	ldr	r4, [r4, #24]
 800f0c8:	e7db      	b.n	800f082 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE+0xe>
 800f0ca:	b002      	add	sp, #8
 800f0cc:	bd70      	pop	{r4, r5, r6, pc}

0800f0ce <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEt>:
 800f0ce:	6803      	ldr	r3, [r0, #0]
 800f0d0:	b513      	push	{r0, r1, r4, lr}
 800f0d2:	f8d3 40a8 	ldr.w	r4, [r3, #168]	@ 0xa8
 800f0d6:	2300      	movs	r3, #0
 800f0d8:	e9cd 3300 	strd	r3, r3, [sp]
 800f0dc:	466b      	mov	r3, sp
 800f0de:	47a0      	blx	r4
 800f0e0:	b002      	add	sp, #8
 800f0e2:	bd10      	pop	{r4, pc}

0800f0e4 <_ZN8touchgfx3HAL16flushFrameBufferEv>:
 800f0e4:	2301      	movs	r3, #1
 800f0e6:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f0ea:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f0ee:	4770      	bx	lr

0800f0f0 <_ZN8touchgfx3HAL16flushFrameBufferERKNS_4RectE>:
 800f0f0:	2301      	movs	r3, #1
 800f0f2:	f880 304b 	strb.w	r3, [r0, #75]	@ 0x4b
 800f0f6:	f880 306d 	strb.w	r3, [r0, #109]	@ 0x6d
 800f0fa:	4770      	bx	lr

0800f0fc <_ZN8touchgfx3HAL17allowDMATransfersEv>:
 800f0fc:	6843      	ldr	r3, [r0, #4]
 800f0fe:	2201      	movs	r2, #1
 800f100:	725a      	strb	r2, [r3, #9]
 800f102:	6840      	ldr	r0, [r0, #4]
 800f104:	6803      	ldr	r3, [r0, #0]
 800f106:	691b      	ldr	r3, [r3, #16]
 800f108:	4718      	bx	r3

0800f10a <_ZN8touchgfx3HAL8flushDMAEv>:
 800f10a:	6840      	ldr	r0, [r0, #4]
 800f10c:	6803      	ldr	r3, [r0, #0]
 800f10e:	689b      	ldr	r3, [r3, #8]
 800f110:	4718      	bx	r3

0800f112 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbtNS_6Bitmap12BitmapFormatES4_b>:
 800f112:	b530      	push	{r4, r5, lr}
 800f114:	b08b      	sub	sp, #44	@ 0x2c
 800f116:	6804      	ldr	r4, [r0, #0]
 800f118:	f89d 5058 	ldrb.w	r5, [sp, #88]	@ 0x58
 800f11c:	9509      	str	r5, [sp, #36]	@ 0x24
 800f11e:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 800f122:	9508      	str	r5, [sp, #32]
 800f124:	f89d 5050 	ldrb.w	r5, [sp, #80]	@ 0x50
 800f128:	9507      	str	r5, [sp, #28]
 800f12a:	f8bd 504c 	ldrh.w	r5, [sp, #76]	@ 0x4c
 800f12e:	9506      	str	r5, [sp, #24]
 800f130:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 800f134:	9505      	str	r5, [sp, #20]
 800f136:	f89d 5044 	ldrb.w	r5, [sp, #68]	@ 0x44
 800f13a:	9504      	str	r5, [sp, #16]
 800f13c:	f8bd 5040 	ldrh.w	r5, [sp, #64]	@ 0x40
 800f140:	9503      	str	r5, [sp, #12]
 800f142:	f8bd 503c 	ldrh.w	r5, [sp, #60]	@ 0x3c
 800f146:	9502      	str	r5, [sp, #8]
 800f148:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 800f14c:	e9cd 3500 	strd	r3, r5, [sp]
 800f150:	4613      	mov	r3, r2
 800f152:	6be4      	ldr	r4, [r4, #60]	@ 0x3c
 800f154:	2200      	movs	r2, #0
 800f156:	47a0      	blx	r4
 800f158:	b00b      	add	sp, #44	@ 0x2c
 800f15a:	bd30      	pop	{r4, r5, pc}

0800f15c <_ZN8touchgfx3HAL10beginFrameEv>:
 800f15c:	4b04      	ldr	r3, [pc, #16]	@ (800f170 <_ZN8touchgfx3HAL10beginFrameEv+0x14>)
 800f15e:	781b      	ldrb	r3, [r3, #0]
 800f160:	b123      	cbz	r3, 800f16c <_ZN8touchgfx3HAL10beginFrameEv+0x10>
 800f162:	f890 006e 	ldrb.w	r0, [r0, #110]	@ 0x6e
 800f166:	f080 0001 	eor.w	r0, r0, #1
 800f16a:	4770      	bx	lr
 800f16c:	2001      	movs	r0, #1
 800f16e:	4770      	bx	lr
 800f170:	240253a6 	.word	0x240253a6

0800f174 <_ZN8touchgfx3HAL8endFrameEv>:
 800f174:	b510      	push	{r4, lr}
 800f176:	4604      	mov	r4, r0
 800f178:	6840      	ldr	r0, [r0, #4]
 800f17a:	6803      	ldr	r3, [r0, #0]
 800f17c:	689b      	ldr	r3, [r3, #8]
 800f17e:	4798      	blx	r3
 800f180:	f894 306d 	ldrb.w	r3, [r4, #109]	@ 0x6d
 800f184:	b113      	cbz	r3, 800f18c <_ZN8touchgfx3HAL8endFrameEv+0x18>
 800f186:	2301      	movs	r3, #1
 800f188:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800f18c:	bd10      	pop	{r4, pc}

0800f18e <_ZN8touchgfx3HAL10initializeEv>:
 800f18e:	b510      	push	{r4, lr}
 800f190:	4604      	mov	r4, r0
 800f192:	f7f3 fe17 	bl	8002dc4 <_ZN8touchgfx10OSWrappers10initializeEv>
 800f196:	f7f2 fe6d 	bl	8001e74 <_ZN8touchgfx4GPIO4initEv>
 800f19a:	6860      	ldr	r0, [r4, #4]
 800f19c:	6803      	ldr	r3, [r0, #0]
 800f19e:	68db      	ldr	r3, [r3, #12]
 800f1a0:	4798      	blx	r3
 800f1a2:	68e0      	ldr	r0, [r4, #12]
 800f1a4:	6803      	ldr	r3, [r0, #0]
 800f1a6:	689b      	ldr	r3, [r3, #8]
 800f1a8:	4798      	blx	r3
 800f1aa:	6823      	ldr	r3, [r4, #0]
 800f1ac:	4620      	mov	r0, r4
 800f1ae:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800f1b0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1b4:	4718      	bx	r3
	...

0800f1b8 <_ZN8touchgfx3HAL4tickEv>:
 800f1b8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 800f1ba:	6803      	ldr	r3, [r0, #0]
 800f1bc:	4604      	mov	r4, r0
 800f1be:	4d5b      	ldr	r5, [pc, #364]	@ (800f32c <_ZN8touchgfx3HAL4tickEv+0x174>)
 800f1c0:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800f1c4:	4798      	blx	r3
 800f1c6:	2800      	cmp	r0, #0
 800f1c8:	f000 8095 	beq.w	800f2f6 <_ZN8touchgfx3HAL4tickEv+0x13e>
 800f1cc:	2001      	movs	r0, #1
 800f1ce:	2600      	movs	r6, #0
 800f1d0:	f7f2 fdb6 	bl	8001d40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800f1d4:	f894 306a 	ldrb.w	r3, [r4, #106]	@ 0x6a
 800f1d8:	f884 604b 	strb.w	r6, [r4, #75]	@ 0x4b
 800f1dc:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f1e0:	f894 3079 	ldrb.w	r3, [r4, #121]	@ 0x79
 800f1e4:	f884 606a 	strb.w	r6, [r4, #106]	@ 0x6a
 800f1e8:	b133      	cbz	r3, 800f1f8 <_ZN8touchgfx3HAL4tickEv+0x40>
 800f1ea:	6823      	ldr	r3, [r4, #0]
 800f1ec:	4620      	mov	r0, r4
 800f1ee:	f8d3 30c4 	ldr.w	r3, [r3, #196]	@ 0xc4
 800f1f2:	4798      	blx	r3
 800f1f4:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 800f1f8:	f894 304a 	ldrb.w	r3, [r4, #74]	@ 0x4a
 800f1fc:	2601      	movs	r6, #1
 800f1fe:	6862      	ldr	r2, [r4, #4]
 800f200:	f083 0301 	eor.w	r3, r3, #1
 800f204:	702e      	strb	r6, [r5, #0]
 800f206:	7253      	strb	r3, [r2, #9]
 800f208:	f004 f918 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 800f20c:	6803      	ldr	r3, [r0, #0]
 800f20e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f210:	4798      	blx	r3
 800f212:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f216:	b90b      	cbnz	r3, 800f21c <_ZN8touchgfx3HAL4tickEv+0x64>
 800f218:	f884 606b 	strb.w	r6, [r4, #107]	@ 0x6b
 800f21c:	f004 f90e 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 800f220:	6803      	ldr	r3, [r0, #0]
 800f222:	695b      	ldr	r3, [r3, #20]
 800f224:	4798      	blx	r3
 800f226:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f228:	6803      	ldr	r3, [r0, #0]
 800f22a:	691b      	ldr	r3, [r3, #16]
 800f22c:	4798      	blx	r3
 800f22e:	f894 306b 	ldrb.w	r3, [r4, #107]	@ 0x6b
 800f232:	f894 206c 	ldrb.w	r2, [r4, #108]	@ 0x6c
 800f236:	3b01      	subs	r3, #1
 800f238:	b2db      	uxtb	r3, r3
 800f23a:	f884 306b 	strb.w	r3, [r4, #107]	@ 0x6b
 800f23e:	b10a      	cbz	r2, 800f244 <_ZN8touchgfx3HAL4tickEv+0x8c>
 800f240:	2b00      	cmp	r3, #0
 800f242:	d1eb      	bne.n	800f21c <_ZN8touchgfx3HAL4tickEv+0x64>
 800f244:	4a3a      	ldr	r2, [pc, #232]	@ (800f330 <_ZN8touchgfx3HAL4tickEv+0x178>)
 800f246:	f994 1068 	ldrsb.w	r1, [r4, #104]	@ 0x68
 800f24a:	7813      	ldrb	r3, [r2, #0]
 800f24c:	3301      	adds	r3, #1
 800f24e:	b25b      	sxtb	r3, r3
 800f250:	4299      	cmp	r1, r3
 800f252:	7013      	strb	r3, [r2, #0]
 800f254:	dc10      	bgt.n	800f278 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f256:	2300      	movs	r3, #0
 800f258:	68e0      	ldr	r0, [r4, #12]
 800f25a:	a902      	add	r1, sp, #8
 800f25c:	7013      	strb	r3, [r2, #0]
 800f25e:	aa03      	add	r2, sp, #12
 800f260:	6803      	ldr	r3, [r0, #0]
 800f262:	68db      	ldr	r3, [r3, #12]
 800f264:	4798      	blx	r3
 800f266:	6823      	ldr	r3, [r4, #0]
 800f268:	2800      	cmp	r0, #0
 800f26a:	d050      	beq.n	800f30e <_ZN8touchgfx3HAL4tickEv+0x156>
 800f26c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800f270:	4620      	mov	r0, r4
 800f272:	e9dd 1202 	ldrd	r1, r2, [sp, #8]
 800f276:	4798      	blx	r3
 800f278:	2300      	movs	r3, #0
 800f27a:	6960      	ldr	r0, [r4, #20]
 800f27c:	f88d 3007 	strb.w	r3, [sp, #7]
 800f280:	b158      	cbz	r0, 800f29a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f282:	6803      	ldr	r3, [r0, #0]
 800f284:	f10d 0107 	add.w	r1, sp, #7
 800f288:	68db      	ldr	r3, [r3, #12]
 800f28a:	4798      	blx	r3
 800f28c:	b128      	cbz	r0, 800f29a <_ZN8touchgfx3HAL4tickEv+0xe2>
 800f28e:	6de0      	ldr	r0, [r4, #92]	@ 0x5c
 800f290:	f89d 1007 	ldrb.w	r1, [sp, #7]
 800f294:	6803      	ldr	r3, [r0, #0]
 800f296:	68db      	ldr	r3, [r3, #12]
 800f298:	4798      	blx	r3
 800f29a:	f104 001c 	add.w	r0, r4, #28
 800f29e:	f011 f8c5 	bl	802042c <_ZN8touchgfx8Gestures4tickEv>
 800f2a2:	f894 3070 	ldrb.w	r3, [r4, #112]	@ 0x70
 800f2a6:	b30b      	cbz	r3, 800f2ec <_ZN8touchgfx3HAL4tickEv+0x134>
 800f2a8:	6920      	ldr	r0, [r4, #16]
 800f2aa:	6803      	ldr	r3, [r0, #0]
 800f2ac:	691b      	ldr	r3, [r3, #16]
 800f2ae:	4798      	blx	r3
 800f2b0:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f2b2:	4606      	mov	r6, r0
 800f2b4:	b903      	cbnz	r3, 800f2b8 <_ZN8touchgfx3HAL4tickEv+0x100>
 800f2b6:	6760      	str	r0, [r4, #116]	@ 0x74
 800f2b8:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f2ba:	4a1e      	ldr	r2, [pc, #120]	@ (800f334 <_ZN8touchgfx3HAL4tickEv+0x17c>)
 800f2bc:	1af3      	subs	r3, r6, r3
 800f2be:	4293      	cmp	r3, r2
 800f2c0:	d914      	bls.n	800f2ec <_ZN8touchgfx3HAL4tickEv+0x134>
 800f2c2:	6920      	ldr	r0, [r4, #16]
 800f2c4:	6803      	ldr	r3, [r0, #0]
 800f2c6:	699b      	ldr	r3, [r3, #24]
 800f2c8:	4798      	blx	r3
 800f2ca:	6f63      	ldr	r3, [r4, #116]	@ 0x74
 800f2cc:	2264      	movs	r2, #100	@ 0x64
 800f2ce:	1af3      	subs	r3, r6, r3
 800f2d0:	fbb3 f3f2 	udiv	r3, r3, r2
 800f2d4:	fbb0 f0f3 	udiv	r0, r0, r3
 800f2d8:	2800      	cmp	r0, #0
 800f2da:	dc1d      	bgt.n	800f318 <_ZN8touchgfx3HAL4tickEv+0x160>
 800f2dc:	f884 2069 	strb.w	r2, [r4, #105]	@ 0x69
 800f2e0:	6920      	ldr	r0, [r4, #16]
 800f2e2:	2100      	movs	r1, #0
 800f2e4:	6803      	ldr	r3, [r0, #0]
 800f2e6:	69db      	ldr	r3, [r3, #28]
 800f2e8:	4798      	blx	r3
 800f2ea:	6766      	str	r6, [r4, #116]	@ 0x74
 800f2ec:	f004 f8a6 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 800f2f0:	6803      	ldr	r3, [r0, #0]
 800f2f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f2f4:	4798      	blx	r3
 800f2f6:	6823      	ldr	r3, [r4, #0]
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800f2fe:	4798      	blx	r3
 800f300:	2001      	movs	r0, #1
 800f302:	f7f2 fd4d 	bl	8001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800f306:	2300      	movs	r3, #0
 800f308:	702b      	strb	r3, [r5, #0]
 800f30a:	b004      	add	sp, #16
 800f30c:	bd70      	pop	{r4, r5, r6, pc}
 800f30e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800f312:	4620      	mov	r0, r4
 800f314:	4798      	blx	r3
 800f316:	e7af      	b.n	800f278 <_ZN8touchgfx3HAL4tickEv+0xc0>
 800f318:	2863      	cmp	r0, #99	@ 0x63
 800f31a:	bfcb      	itete	gt
 800f31c:	2300      	movgt	r3, #0
 800f31e:	f1c0 0064 	rsble	r0, r0, #100	@ 0x64
 800f322:	f884 3069 	strbgt.w	r3, [r4, #105]	@ 0x69
 800f326:	f884 0069 	strble.w	r0, [r4, #105]	@ 0x69
 800f32a:	e7d9      	b.n	800f2e0 <_ZN8touchgfx3HAL4tickEv+0x128>
 800f32c:	240253ac 	.word	0x240253ac
 800f330:	240253ad 	.word	0x240253ad
 800f334:	05f5e100 	.word	0x05f5e100

0800f338 <_ZN8touchgfx3HAL17unlockFrameBufferEv>:
 800f338:	b510      	push	{r4, lr}
 800f33a:	4604      	mov	r4, r0
 800f33c:	f7f3 fd72 	bl	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>
 800f340:	2200      	movs	r2, #0
 800f342:	6863      	ldr	r3, [r4, #4]
 800f344:	729a      	strb	r2, [r3, #10]
 800f346:	bd10      	pop	{r4, pc}

0800f348 <_ZN8touchgfx3HAL21registerEventListenerERNS_15UIEventListenerE>:
 800f348:	65c1      	str	r1, [r0, #92]	@ 0x5c
 800f34a:	301c      	adds	r0, #28
 800f34c:	f011 b86c 	b.w	8020428 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>

0800f350 <_ZN8touchgfx3HAL5touchEll>:
 800f350:	b530      	push	{r4, r5, lr}
 800f352:	b087      	sub	sp, #28
 800f354:	4604      	mov	r4, r0
 800f356:	a804      	add	r0, sp, #16
 800f358:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800f35c:	f003 fe78 	bl	8013050 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>
 800f360:	9b04      	ldr	r3, [sp, #16]
 800f362:	a906      	add	r1, sp, #24
 800f364:	a803      	add	r0, sp, #12
 800f366:	f8ad 300c 	strh.w	r3, [sp, #12]
 800f36a:	9b05      	ldr	r3, [sp, #20]
 800f36c:	f821 3d0a 	strh.w	r3, [r1, #-10]!
 800f370:	f003 fec0 	bl	80130f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>
 800f374:	f894 106f 	ldrb.w	r1, [r4, #111]	@ 0x6f
 800f378:	f104 001c 	add.w	r0, r4, #28
 800f37c:	f8bd 200c 	ldrh.w	r2, [sp, #12]
 800f380:	f8bd 300e 	ldrh.w	r3, [sp, #14]
 800f384:	b189      	cbz	r1, 800f3aa <_ZN8touchgfx3HAL5touchEll+0x5a>
 800f386:	f8b4 5064 	ldrh.w	r5, [r4, #100]	@ 0x64
 800f38a:	9300      	str	r3, [sp, #0]
 800f38c:	4613      	mov	r3, r2
 800f38e:	f8b4 1060 	ldrh.w	r1, [r4, #96]	@ 0x60
 800f392:	462a      	mov	r2, r5
 800f394:	f011 f858 	bl	8020448 <_ZN8touchgfx8Gestures17registerDragEventEtttt>
 800f398:	b128      	cbz	r0, 800f3a6 <_ZN8touchgfx3HAL5touchEll+0x56>
 800f39a:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 800f39e:	6623      	str	r3, [r4, #96]	@ 0x60
 800f3a0:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 800f3a4:	6663      	str	r3, [r4, #100]	@ 0x64
 800f3a6:	b007      	add	sp, #28
 800f3a8:	bd30      	pop	{r4, r5, pc}
 800f3aa:	f011 f88d 	bl	80204c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f3ae:	2301      	movs	r3, #1
 800f3b0:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f3b4:	e7f1      	b.n	800f39a <_ZN8touchgfx3HAL5touchEll+0x4a>

0800f3b6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm>:
 800f3b6:	b510      	push	{r4, lr}
 800f3b8:	2b00      	cmp	r3, #0
 800f3ba:	d046      	beq.n	800f44a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f3bc:	ea81 0002 	eor.w	r0, r1, r2
 800f3c0:	07c4      	lsls	r4, r0, #31
 800f3c2:	d508      	bpl.n	800f3d6 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x20>
 800f3c4:	440b      	add	r3, r1
 800f3c6:	3a01      	subs	r2, #1
 800f3c8:	428b      	cmp	r3, r1
 800f3ca:	d93e      	bls.n	800f44a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f3cc:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f3d0:	f801 0b01 	strb.w	r0, [r1], #1
 800f3d4:	e7f8      	b.n	800f3c8 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x12>
 800f3d6:	07d0      	lsls	r0, r2, #31
 800f3d8:	bf42      	ittt	mi
 800f3da:	f812 0b01 	ldrbmi.w	r0, [r2], #1
 800f3de:	f103 33ff 	addmi.w	r3, r3, #4294967295
 800f3e2:	f801 0b01 	strbmi.w	r0, [r1], #1
 800f3e6:	2b01      	cmp	r3, #1
 800f3e8:	d911      	bls.n	800f40e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f3ea:	ea81 0402 	eor.w	r4, r1, r2
 800f3ee:	4610      	mov	r0, r2
 800f3f0:	07a4      	lsls	r4, r4, #30
 800f3f2:	d022      	beq.n	800f43a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x84>
 800f3f4:	f023 0401 	bic.w	r4, r3, #1
 800f3f8:	440c      	add	r4, r1
 800f3fa:	428c      	cmp	r4, r1
 800f3fc:	4602      	mov	r2, r0
 800f3fe:	d904      	bls.n	800f40a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x54>
 800f400:	8812      	ldrh	r2, [r2, #0]
 800f402:	3002      	adds	r0, #2
 800f404:	f821 2b02 	strh.w	r2, [r1], #2
 800f408:	e7f7      	b.n	800f3fa <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x44>
 800f40a:	f003 0301 	and.w	r3, r3, #1
 800f40e:	f023 0003 	bic.w	r0, r3, #3
 800f412:	4408      	add	r0, r1
 800f414:	4288      	cmp	r0, r1
 800f416:	4614      	mov	r4, r2
 800f418:	d904      	bls.n	800f424 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x6e>
 800f41a:	6824      	ldr	r4, [r4, #0]
 800f41c:	3204      	adds	r2, #4
 800f41e:	f841 4b04 	str.w	r4, [r1], #4
 800f422:	e7f7      	b.n	800f414 <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x5e>
 800f424:	f003 0303 	and.w	r3, r3, #3
 800f428:	3a01      	subs	r2, #1
 800f42a:	440b      	add	r3, r1
 800f42c:	428b      	cmp	r3, r1
 800f42e:	d90c      	bls.n	800f44a <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x94>
 800f430:	f812 0f01 	ldrb.w	r0, [r2, #1]!
 800f434:	f801 0b01 	strb.w	r0, [r1], #1
 800f438:	e7f8      	b.n	800f42c <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x76>
 800f43a:	0790      	lsls	r0, r2, #30
 800f43c:	d0e7      	beq.n	800f40e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f43e:	f832 0b02 	ldrh.w	r0, [r2], #2
 800f442:	3b02      	subs	r3, #2
 800f444:	f821 0b02 	strh.w	r0, [r1], #2
 800f448:	e7e1      	b.n	800f40e <_ZN8touchgfx3HAL9blockCopyEPvPKvm+0x58>
 800f44a:	2001      	movs	r0, #1
 800f44c:	bd10      	pop	{r4, pc}

0800f44e <_ZN8touchgfx3HAL7noTouchEv>:
 800f44e:	b510      	push	{r4, lr}
 800f450:	f890 306f 	ldrb.w	r3, [r0, #111]	@ 0x6f
 800f454:	4604      	mov	r4, r0
 800f456:	b153      	cbz	r3, 800f46e <_ZN8touchgfx3HAL7noTouchEv+0x20>
 800f458:	f8b0 3064 	ldrh.w	r3, [r0, #100]	@ 0x64
 800f45c:	2101      	movs	r1, #1
 800f45e:	f8b0 2060 	ldrh.w	r2, [r0, #96]	@ 0x60
 800f462:	301c      	adds	r0, #28
 800f464:	f011 f830 	bl	80204c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>
 800f468:	2300      	movs	r3, #0
 800f46a:	f884 306f 	strb.w	r3, [r4, #111]	@ 0x6f
 800f46e:	bd10      	pop	{r4, pc}

0800f470 <_ZN8touchgfx8Drawable5setXYEss>:
 800f470:	b570      	push	{r4, r5, r6, lr}
 800f472:	6803      	ldr	r3, [r0, #0]
 800f474:	4604      	mov	r4, r0
 800f476:	4615      	mov	r5, r2
 800f478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f47a:	4798      	blx	r3
 800f47c:	6823      	ldr	r3, [r4, #0]
 800f47e:	4629      	mov	r1, r5
 800f480:	4620      	mov	r0, r4
 800f482:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f484:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800f488:	4718      	bx	r3
	...

0800f48c <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt>:
 800f48c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f490:	b085      	sub	sp, #20
 800f492:	4604      	mov	r4, r0
 800f494:	2000      	movs	r0, #0
 800f496:	4699      	mov	r9, r3
 800f498:	ad04      	add	r5, sp, #16
 800f49a:	460f      	mov	r7, r1
 800f49c:	4690      	mov	r8, r2
 800f49e:	f845 0d04 	str.w	r0, [r5, #-4]!
 800f4a2:	69a0      	ldr	r0, [r4, #24]
 800f4a4:	6806      	ldr	r6, [r0, #0]
 800f4a6:	9501      	str	r5, [sp, #4]
 800f4a8:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 800f4ac:	9500      	str	r5, [sp, #0]
 800f4ae:	6835      	ldr	r5, [r6, #0]
 800f4b0:	47a8      	blx	r5
 800f4b2:	4d10      	ldr	r5, [pc, #64]	@ (800f4f4 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x68>)
 800f4b4:	4606      	mov	r6, r0
 800f4b6:	f8a5 9000 	strh.w	r9, [r5]
 800f4ba:	f7f4 fdb7 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800f4be:	6803      	ldr	r3, [r0, #0]
 800f4c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c2:	4798      	blx	r3
 800f4c4:	b128      	cbz	r0, 800f4d2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x46>
 800f4c6:	2801      	cmp	r0, #1
 800f4c8:	d00b      	beq.n	800f4e2 <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x56>
 800f4ca:	4630      	mov	r0, r6
 800f4cc:	b005      	add	sp, #20
 800f4ce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f4d2:	882b      	ldrh	r3, [r5, #0]
 800f4d4:	fb08 7203 	mla	r2, r8, r3, r7
 800f4d8:	9b03      	ldr	r3, [sp, #12]
 800f4da:	eba3 0342 	sub.w	r3, r3, r2, lsl #1
 800f4de:	63e3      	str	r3, [r4, #60]	@ 0x3c
 800f4e0:	e7f3      	b.n	800f4ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f4e2:	882a      	ldrh	r2, [r5, #0]
 800f4e4:	9b03      	ldr	r3, [sp, #12]
 800f4e6:	fb08 7202 	mla	r2, r8, r2, r7
 800f4ea:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 800f4ee:	1a9a      	subs	r2, r3, r2
 800f4f0:	63e2      	str	r2, [r4, #60]	@ 0x3c
 800f4f2:	e7ea      	b.n	800f4ca <_ZN8touchgfx3HAL27configurePartialFrameBufferEtttt+0x3e>
 800f4f4:	240253a2 	.word	0x240253a2

0800f4f8 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb>:
 800f4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f4fa:	b08b      	sub	sp, #44	@ 0x2c
 800f4fc:	4617      	mov	r7, r2
 800f4fe:	4604      	mov	r4, r0
 800f500:	460e      	mov	r6, r1
 800f502:	461d      	mov	r5, r3
 800f504:	f7f4 fd92 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800f508:	6803      	ldr	r3, [r0, #0]
 800f50a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f50c:	4798      	blx	r3
 800f50e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f512:	9007      	str	r0, [sp, #28]
 800f514:	4631      	mov	r1, r6
 800f516:	6822      	ldr	r2, [r4, #0]
 800f518:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f51c:	4b0c      	ldr	r3, [pc, #48]	@ (800f550 <_ZN8touchgfx3HAL8blitCopyEPKtttttthbb+0x58>)
 800f51e:	4620      	mov	r0, r4
 800f520:	881b      	ldrh	r3, [r3, #0]
 800f522:	9306      	str	r3, [sp, #24]
 800f524:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800f528:	9305      	str	r3, [sp, #20]
 800f52a:	f89d 304c 	ldrb.w	r3, [sp, #76]	@ 0x4c
 800f52e:	9304      	str	r3, [sp, #16]
 800f530:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f534:	9303      	str	r3, [sp, #12]
 800f536:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f53a:	9302      	str	r3, [sp, #8]
 800f53c:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f540:	e9cd 5300 	strd	r5, r3, [sp]
 800f544:	463b      	mov	r3, r7
 800f546:	6bd5      	ldr	r5, [r2, #60]	@ 0x3c
 800f548:	2200      	movs	r2, #0
 800f54a:	47a8      	blx	r5
 800f54c:	b00b      	add	sp, #44	@ 0x2c
 800f54e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f550:	240253a2 	.word	0x240253a2

0800f554 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb>:
 800f554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f558:	4698      	mov	r8, r3
 800f55a:	6803      	ldr	r3, [r0, #0]
 800f55c:	b08b      	sub	sp, #44	@ 0x2c
 800f55e:	4617      	mov	r7, r2
 800f560:	6bdd      	ldr	r5, [r3, #60]	@ 0x3c
 800f562:	460e      	mov	r6, r1
 800f564:	4b13      	ldr	r3, [pc, #76]	@ (800f5b4 <_ZN8touchgfx3HAL16blitCopyARGB8888EPKtttttthb+0x60>)
 800f566:	4604      	mov	r4, r0
 800f568:	f8b3 9000 	ldrh.w	r9, [r3]
 800f56c:	f7f4 fd5e 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800f570:	6803      	ldr	r3, [r0, #0]
 800f572:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f574:	4798      	blx	r3
 800f576:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800f57a:	2200      	movs	r2, #0
 800f57c:	4631      	mov	r1, r6
 800f57e:	e9cd 0308 	strd	r0, r3, [sp, #32]
 800f582:	2302      	movs	r3, #2
 800f584:	4620      	mov	r0, r4
 800f586:	e9cd 9306 	strd	r9, r3, [sp, #24]
 800f58a:	2301      	movs	r3, #1
 800f58c:	9305      	str	r3, [sp, #20]
 800f58e:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 800f592:	9304      	str	r3, [sp, #16]
 800f594:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f598:	9303      	str	r3, [sp, #12]
 800f59a:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f59e:	9302      	str	r3, [sp, #8]
 800f5a0:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f5a4:	e9cd 8300 	strd	r8, r3, [sp]
 800f5a8:	463b      	mov	r3, r7
 800f5aa:	47a8      	blx	r5
 800f5ac:	b00b      	add	sp, #44	@ 0x2c
 800f5ae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f5b2:	bf00      	nop
 800f5b4:	240253a2 	.word	0x240253a2

0800f5b8 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb>:
 800f5b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f5bc:	4698      	mov	r8, r3
 800f5be:	6803      	ldr	r3, [r0, #0]
 800f5c0:	b087      	sub	sp, #28
 800f5c2:	460e      	mov	r6, r1
 800f5c4:	6d9d      	ldr	r5, [r3, #88]	@ 0x58
 800f5c6:	4617      	mov	r7, r2
 800f5c8:	4b0f      	ldr	r3, [pc, #60]	@ (800f608 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthb+0x50>)
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	f8b3 9000 	ldrh.w	r9, [r3]
 800f5d0:	f7f4 fd2c 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800f5d4:	6803      	ldr	r3, [r0, #0]
 800f5d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f5d8:	4798      	blx	r3
 800f5da:	f89d 3044 	ldrb.w	r3, [sp, #68]	@ 0x44
 800f5de:	463a      	mov	r2, r7
 800f5e0:	4631      	mov	r1, r6
 800f5e2:	f8cd 900c 	str.w	r9, [sp, #12]
 800f5e6:	e9cd 0304 	strd	r0, r3, [sp, #16]
 800f5ea:	f89d 3040 	ldrb.w	r3, [sp, #64]	@ 0x40
 800f5ee:	4620      	mov	r0, r4
 800f5f0:	9302      	str	r3, [sp, #8]
 800f5f2:	f8bd 303c 	ldrh.w	r3, [sp, #60]	@ 0x3c
 800f5f6:	9301      	str	r3, [sp, #4]
 800f5f8:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 800f5fc:	9300      	str	r3, [sp, #0]
 800f5fe:	4643      	mov	r3, r8
 800f600:	47a8      	blx	r5
 800f602:	b007      	add	sp, #28
 800f604:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f608:	240253a2 	.word	0x240253a2

0800f60c <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE>:
 800f60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f610:	4604      	mov	r4, r0
 800f612:	b08f      	sub	sp, #60	@ 0x3c
 800f614:	4610      	mov	r0, r2
 800f616:	460d      	mov	r5, r1
 800f618:	4691      	mov	r9, r2
 800f61a:	461e      	mov	r6, r3
 800f61c:	f006 fe42 	bl	80162a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f620:	2800      	cmp	r0, #0
 800f622:	f000 809d 	beq.w	800f760 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x154>
 800f626:	6823      	ldr	r3, [r4, #0]
 800f628:	4620      	mov	r0, r4
 800f62a:	f8df b198 	ldr.w	fp, [pc, #408]	@ 800f7c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>
 800f62e:	f10d 0838 	add.w	r8, sp, #56	@ 0x38
 800f632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f634:	4798      	blx	r3
 800f636:	6823      	ldr	r3, [r4, #0]
 800f638:	4620      	mov	r0, r4
 800f63a:	f8df a18c 	ldr.w	sl, [pc, #396]	@ 800f7c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>
 800f63e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f640:	4798      	blx	r3
 800f642:	f8bb 3000 	ldrh.w	r3, [fp]
 800f646:	4f5c      	ldr	r7, [pc, #368]	@ (800f7b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f648:	9301      	str	r3, [sp, #4]
 800f64a:	f8ba 3000 	ldrh.w	r3, [sl]
 800f64e:	f828 9d1c 	strh.w	r9, [r8, #-28]!
 800f652:	4640      	mov	r0, r8
 800f654:	9302      	str	r3, [sp, #8]
 800f656:	883b      	ldrh	r3, [r7, #0]
 800f658:	9303      	str	r3, [sp, #12]
 800f65a:	4b58      	ldr	r3, [pc, #352]	@ (800f7bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f65c:	881a      	ldrh	r2, [r3, #0]
 800f65e:	9305      	str	r3, [sp, #20]
 800f660:	9204      	str	r2, [sp, #16]
 800f662:	f006 ff6f 	bl	8016544 <_ZNK8touchgfx6Bitmap8getWidthEv>
 800f666:	8038      	strh	r0, [r7, #0]
 800f668:	4640      	mov	r0, r8
 800f66a:	f006 ff9f 	bl	80165ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 800f66e:	9b05      	ldr	r3, [sp, #20]
 800f670:	b280      	uxth	r0, r0
 800f672:	8018      	strh	r0, [r3, #0]
 800f674:	4b52      	ldr	r3, [pc, #328]	@ (800f7c0 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b4>)
 800f676:	781b      	ldrb	r3, [r3, #0]
 800f678:	2b00      	cmp	r3, #0
 800f67a:	d174      	bne.n	800f766 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x15a>
 800f67c:	883b      	ldrh	r3, [r7, #0]
 800f67e:	f8aa 0000 	strh.w	r0, [sl]
 800f682:	f8ab 3000 	strh.w	r3, [fp]
 800f686:	4648      	mov	r0, r9
 800f688:	e9d4 870f 	ldrd	r8, r7, [r4, #60]	@ 0x3c
 800f68c:	f006 fe0a 	bl	80162a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>
 800f690:	2200      	movs	r2, #0
 800f692:	e9c4 000f 	strd	r0, r0, [r4, #60]	@ 0x3c
 800f696:	4611      	mov	r1, r2
 800f698:	4628      	mov	r0, r5
 800f69a:	f9b5 9004 	ldrsh.w	r9, [r5, #4]
 800f69e:	f9b5 a006 	ldrsh.w	sl, [r5, #6]
 800f6a2:	f7ff fee5 	bl	800f470 <_ZN8touchgfx8Drawable5setXYEss>
 800f6a6:	2301      	movs	r3, #1
 800f6a8:	f895 b025 	ldrb.w	fp, [r5, #37]	@ 0x25
 800f6ac:	f885 3025 	strb.w	r3, [r5, #37]	@ 0x25
 800f6b0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	dd5c      	ble.n	800f772 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f6b8:	f9b6 3006 	ldrsh.w	r3, [r6, #6]
 800f6bc:	2b00      	cmp	r3, #0
 800f6be:	dd58      	ble.n	800f772 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x166>
 800f6c0:	462a      	mov	r2, r5
 800f6c2:	ab0a      	add	r3, sp, #40	@ 0x28
 800f6c4:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f6c8:	6851      	ldr	r1, [r2, #4]
 800f6ca:	c303      	stmia	r3!, {r0, r1}
 800f6cc:	4631      	mov	r1, r6
 800f6ce:	a80a      	add	r0, sp, #40	@ 0x28
 800f6d0:	f7ff fbf8 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 800f6d4:	4b38      	ldr	r3, [pc, #224]	@ (800f7b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f6d6:	2100      	movs	r1, #0
 800f6d8:	f9b3 2000 	ldrsh.w	r2, [r3]
 800f6dc:	4b37      	ldr	r3, [pc, #220]	@ (800f7bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f6de:	f8ad 2034 	strh.w	r2, [sp, #52]	@ 0x34
 800f6e2:	aa0a      	add	r2, sp, #40	@ 0x28
 800f6e4:	f9b3 3000 	ldrsh.w	r3, [r3]
 800f6e8:	910c      	str	r1, [sp, #48]	@ 0x30
 800f6ea:	f8ad 3036 	strh.w	r3, [sp, #54]	@ 0x36
 800f6ee:	ab08      	add	r3, sp, #32
 800f6f0:	e892 0003 	ldmia.w	r2, {r0, r1}
 800f6f4:	e883 0003 	stmia.w	r3, {r0, r1}
 800f6f8:	4618      	mov	r0, r3
 800f6fa:	a90c      	add	r1, sp, #48	@ 0x30
 800f6fc:	f7ff fbe2 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 800f700:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 800f702:	2b00      	cmp	r3, #0
 800f704:	d13c      	bne.n	800f780 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x174>
 800f706:	2000      	movs	r0, #0
 800f708:	f884 0058 	strb.w	r0, [r4, #88]	@ 0x58
 800f70c:	2600      	movs	r6, #0
 800f70e:	696b      	ldr	r3, [r5, #20]
 800f710:	a908      	add	r1, sp, #32
 800f712:	682a      	ldr	r2, [r5, #0]
 800f714:	4628      	mov	r0, r5
 800f716:	9305      	str	r3, [sp, #20]
 800f718:	616e      	str	r6, [r5, #20]
 800f71a:	6892      	ldr	r2, [r2, #8]
 800f71c:	4790      	blx	r2
 800f71e:	9b05      	ldr	r3, [sp, #20]
 800f720:	4652      	mov	r2, sl
 800f722:	4649      	mov	r1, r9
 800f724:	616b      	str	r3, [r5, #20]
 800f726:	4628      	mov	r0, r5
 800f728:	f884 6058 	strb.w	r6, [r4, #88]	@ 0x58
 800f72c:	f885 b025 	strb.w	fp, [r5, #37]	@ 0x25
 800f730:	f7ff fe9e 	bl	800f470 <_ZN8touchgfx8Drawable5setXYEss>
 800f734:	9a01      	ldr	r2, [sp, #4]
 800f736:	4b23      	ldr	r3, [pc, #140]	@ (800f7c4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b8>)
 800f738:	4620      	mov	r0, r4
 800f73a:	801a      	strh	r2, [r3, #0]
 800f73c:	9a02      	ldr	r2, [sp, #8]
 800f73e:	4b22      	ldr	r3, [pc, #136]	@ (800f7c8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1bc>)
 800f740:	801a      	strh	r2, [r3, #0]
 800f742:	9a03      	ldr	r2, [sp, #12]
 800f744:	4b1c      	ldr	r3, [pc, #112]	@ (800f7b8 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1ac>)
 800f746:	801a      	strh	r2, [r3, #0]
 800f748:	4b1c      	ldr	r3, [pc, #112]	@ (800f7bc <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x1b0>)
 800f74a:	9a04      	ldr	r2, [sp, #16]
 800f74c:	801a      	strh	r2, [r3, #0]
 800f74e:	6823      	ldr	r3, [r4, #0]
 800f750:	e9c4 870f 	strd	r8, r7, [r4, #60]	@ 0x3c
 800f754:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f756:	4798      	blx	r3
 800f758:	6823      	ldr	r3, [r4, #0]
 800f75a:	4620      	mov	r0, r4
 800f75c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f75e:	4798      	blx	r3
 800f760:	b00f      	add	sp, #60	@ 0x3c
 800f762:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f766:	883b      	ldrh	r3, [r7, #0]
 800f768:	f8ab 0000 	strh.w	r0, [fp]
 800f76c:	f8aa 3000 	strh.w	r3, [sl]
 800f770:	e789      	b.n	800f686 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0x7a>
 800f772:	462a      	mov	r2, r5
 800f774:	ab0a      	add	r3, sp, #40	@ 0x28
 800f776:	f852 0f04 	ldr.w	r0, [r2, #4]!
 800f77a:	6851      	ldr	r1, [r2, #4]
 800f77c:	c303      	stmia	r3!, {r0, r1}
 800f77e:	e7a9      	b.n	800f6d4 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xc8>
 800f780:	a807      	add	r0, sp, #28
 800f782:	f006 ffcb 	bl	801671c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f786:	4606      	mov	r6, r0
 800f788:	6ce0      	ldr	r0, [r4, #76]	@ 0x4c
 800f78a:	6803      	ldr	r3, [r0, #0]
 800f78c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f78e:	4798      	blx	r3
 800f790:	4286      	cmp	r6, r0
 800f792:	d1b8      	bne.n	800f706 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfa>
 800f794:	f7f4 fc4a 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800f798:	6803      	ldr	r3, [r0, #0]
 800f79a:	4606      	mov	r6, r0
 800f79c:	a807      	add	r0, sp, #28
 800f79e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f7a0:	9305      	str	r3, [sp, #20]
 800f7a2:	f006 ffbb 	bl	801671c <_ZNK8touchgfx6Bitmap9getFormatEv>
 800f7a6:	9b05      	ldr	r3, [sp, #20]
 800f7a8:	4601      	mov	r1, r0
 800f7aa:	4630      	mov	r0, r6
 800f7ac:	4798      	blx	r3
 800f7ae:	f080 0001 	eor.w	r0, r0, #1
 800f7b2:	b2c0      	uxtb	r0, r0
 800f7b4:	e7a8      	b.n	800f708 <_ZN8touchgfx3HAL27drawDrawableInDynamicBitmapERNS_8DrawableEtRKNS_4RectE+0xfc>
 800f7b6:	bf00      	nop
 800f7b8:	2402539c 	.word	0x2402539c
 800f7bc:	2402539e 	.word	0x2402539e
 800f7c0:	240253a0 	.word	0x240253a0
 800f7c4:	240253a2 	.word	0x240253a2
 800f7c8:	240253a4 	.word	0x240253a4

0800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>:
 800f7cc:	4b07      	ldr	r3, [pc, #28]	@ (800f7ec <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x20>)
 800f7ce:	b510      	push	{r4, lr}
 800f7d0:	781b      	ldrb	r3, [r3, #0]
 800f7d2:	4604      	mov	r4, r0
 800f7d4:	b13b      	cbz	r3, 800f7e6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f7d6:	6803      	ldr	r3, [r0, #0]
 800f7d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7da:	4798      	blx	r3
 800f7dc:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 800f7de:	4283      	cmp	r3, r0
 800f7e0:	d101      	bne.n	800f7e6 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x1a>
 800f7e2:	6c20      	ldr	r0, [r4, #64]	@ 0x40
 800f7e4:	bd10      	pop	{r4, pc}
 800f7e6:	6be0      	ldr	r0, [r4, #60]	@ 0x3c
 800f7e8:	e7fc      	b.n	800f7e4 <_ZN8touchgfx3HAL20getClientFrameBufferEv+0x18>
 800f7ea:	bf00      	nop
 800f7ec:	240253a6 	.word	0x240253a6

0800f7f0 <_ZN8touchgfx3HAL12blitCopyWordEPKttttttt>:
 800f7f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f7f4:	461d      	mov	r5, r3
 800f7f6:	b08a      	sub	sp, #40	@ 0x28
 800f7f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f7fc:	4690      	mov	r8, r2
 800f7fe:	f8bd 604c 	ldrh.w	r6, [sp, #76]	@ 0x4c
 800f802:	2400      	movs	r4, #0
 800f804:	4607      	mov	r7, r0
 800f806:	fb06 8505 	mla	r5, r6, r5, r8
 800f80a:	9404      	str	r4, [sp, #16]
 800f80c:	f88d 4020 	strb.w	r4, [sp, #32]
 800f810:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f814:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800f818:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f81c:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f820:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f824:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f828:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f82c:	f7ff ffce 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f830:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f834:	6878      	ldr	r0, [r7, #4]
 800f836:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f83a:	a901      	add	r1, sp, #4
 800f83c:	9505      	str	r5, [sp, #20]
 800f83e:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f842:	f88d 4021 	strb.w	r4, [sp, #33]	@ 0x21
 800f846:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f84a:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f84e:	6803      	ldr	r3, [r0, #0]
 800f850:	685b      	ldr	r3, [r3, #4]
 800f852:	4798      	blx	r3
 800f854:	b00a      	add	sp, #40	@ 0x28
 800f856:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f85a <_ZN8touchgfx3HAL12blitFillWordEtttttt>:
 800f85a:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800f85e:	b08b      	sub	sp, #44	@ 0x2c
 800f860:	2400      	movs	r4, #0
 800f862:	4691      	mov	r9, r2
 800f864:	461d      	mov	r5, r3
 800f866:	f8bd 6050 	ldrh.w	r6, [sp, #80]	@ 0x50
 800f86a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f86e:	4688      	mov	r8, r1
 800f870:	4607      	mov	r7, r0
 800f872:	9404      	str	r4, [sp, #16]
 800f874:	fb06 9505 	mla	r5, r6, r5, r9
 800f878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f87c:	f7ff ffa6 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f880:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f884:	eb00 0545 	add.w	r5, r0, r5, lsl #1
 800f888:	6878      	ldr	r0, [r7, #4]
 800f88a:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f88e:	a901      	add	r1, sp, #4
 800f890:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f894:	9505      	str	r5, [sp, #20]
 800f896:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f89a:	f8ad 401c 	strh.w	r4, [sp, #28]
 800f89e:	f8ad 601e 	strh.w	r6, [sp, #30]
 800f8a2:	f8cd 8010 	str.w	r8, [sp, #16]
 800f8a6:	f8ad 4020 	strh.w	r4, [sp, #32]
 800f8aa:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f8ae:	f88d 4023 	strb.w	r4, [sp, #35]	@ 0x23
 800f8b2:	f88d 4024 	strb.w	r4, [sp, #36]	@ 0x24
 800f8b6:	6803      	ldr	r3, [r0, #0]
 800f8b8:	685b      	ldr	r3, [r3, #4]
 800f8ba:	4798      	blx	r3
 800f8bc:	b00b      	add	sp, #44	@ 0x2c
 800f8be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

0800f8c4 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b>:
 800f8c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f8c8:	b08a      	sub	sp, #40	@ 0x28
 800f8ca:	4698      	mov	r8, r3
 800f8cc:	2300      	movs	r3, #0
 800f8ce:	4606      	mov	r6, r0
 800f8d0:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 800f8d4:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 800f8d8:	2d0b      	cmp	r5, #11
 800f8da:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 800f8de:	f8bd 7058 	ldrh.w	r7, [sp, #88]	@ 0x58
 800f8e2:	f89d 4060 	ldrb.w	r4, [sp, #96]	@ 0x60
 800f8e6:	9304      	str	r3, [sp, #16]
 800f8e8:	d137      	bne.n	800f95a <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x96>
 800f8ea:	2380      	movs	r3, #128	@ 0x80
 800f8ec:	f88d 0020 	strb.w	r0, [sp, #32]
 800f8f0:	4630      	mov	r0, r6
 800f8f2:	9203      	str	r2, [sp, #12]
 800f8f4:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800f8f8:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800f8fc:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f900:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800f904:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f908:	f8bd 304c 	ldrh.w	r3, [sp, #76]	@ 0x4c
 800f90c:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f910:	f7ff ff5c 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f914:	2c0b      	cmp	r4, #11
 800f916:	f8bd 2040 	ldrh.w	r2, [sp, #64]	@ 0x40
 800f91a:	f8ad 701e 	strh.w	r7, [sp, #30]
 800f91e:	bf94      	ite	ls
 800f920:	4b19      	ldrls	r3, [pc, #100]	@ (800f988 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xc4>)
 800f922:	2100      	movhi	r1, #0
 800f924:	f88d 5021 	strb.w	r5, [sp, #33]	@ 0x21
 800f928:	bf98      	it	ls
 800f92a:	5d19      	ldrbls	r1, [r3, r4]
 800f92c:	fb02 8307 	mla	r3, r2, r7, r8
 800f930:	f88d 4022 	strb.w	r4, [sp, #34]	@ 0x22
 800f934:	10c9      	asrs	r1, r1, #3
 800f936:	fb01 0003 	mla	r0, r1, r3, r0
 800f93a:	f89d 3064 	ldrb.w	r3, [sp, #100]	@ 0x64
 800f93e:	a901      	add	r1, sp, #4
 800f940:	9005      	str	r0, [sp, #20]
 800f942:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800f946:	2300      	movs	r3, #0
 800f948:	6870      	ldr	r0, [r6, #4]
 800f94a:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800f94e:	6803      	ldr	r3, [r0, #0]
 800f950:	685b      	ldr	r3, [r3, #4]
 800f952:	4798      	blx	r3
 800f954:	b00a      	add	sp, #40	@ 0x28
 800f956:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f95a:	2d02      	cmp	r5, #2
 800f95c:	d109      	bne.n	800f972 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xae>
 800f95e:	28ff      	cmp	r0, #255	@ 0xff
 800f960:	d105      	bne.n	800f96e <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xaa>
 800f962:	f1bc 0f00 	cmp.w	ip, #0
 800f966:	bf14      	ite	ne
 800f968:	2340      	movne	r3, #64	@ 0x40
 800f96a:	2320      	moveq	r3, #32
 800f96c:	e7be      	b.n	800f8ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f96e:	2340      	movs	r3, #64	@ 0x40
 800f970:	e7bc      	b.n	800f8ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f972:	28ff      	cmp	r0, #255	@ 0xff
 800f974:	d105      	bne.n	800f982 <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0xbe>
 800f976:	f1bc 0f00 	cmp.w	ip, #0
 800f97a:	bf14      	ite	ne
 800f97c:	2304      	movne	r3, #4
 800f97e:	2301      	moveq	r3, #1
 800f980:	e7b4      	b.n	800f8ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f982:	2304      	movs	r3, #4
 800f984:	e7b2      	b.n	800f8ec <_ZN8touchgfx3HAL8blitCopyEPKtPKhttttthbtNS_6Bitmap12BitmapFormatES6_b+0x28>
 800f986:	bf00      	nop
 800f988:	08025160 	.word	0x08025160

0800f98c <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb>:
 800f98c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f990:	b08b      	sub	sp, #44	@ 0x2c
 800f992:	461d      	mov	r5, r3
 800f994:	2400      	movs	r4, #0
 800f996:	4688      	mov	r8, r1
 800f998:	f89d 9058 	ldrb.w	r9, [sp, #88]	@ 0x58
 800f99c:	4693      	mov	fp, r2
 800f99e:	f89d 6060 	ldrb.w	r6, [sp, #96]	@ 0x60
 800f9a2:	4607      	mov	r7, r0
 800f9a4:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 800f9a8:	f8bd a05c 	ldrh.w	sl, [sp, #92]	@ 0x5c
 800f9ac:	9404      	str	r4, [sp, #16]
 800f9ae:	bf14      	ite	ne
 800f9b0:	2308      	movne	r3, #8
 800f9b2:	2302      	moveq	r3, #2
 800f9b4:	fb05 b50a 	mla	r5, r5, sl, fp
 800f9b8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9bc:	f7ff ff06 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800f9c0:	2e0b      	cmp	r6, #11
 800f9c2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 800f9c6:	a901      	add	r1, sp, #4
 800f9c8:	bf98      	it	ls
 800f9ca:	4b13      	ldrls	r3, [pc, #76]	@ (800fa18 <_ZN8touchgfx3HAL8blitFillENS_9colortypeEtttthtNS_6Bitmap12BitmapFormatEb+0x8c>)
 800f9cc:	f8ad a01e 	strh.w	sl, [sp, #30]
 800f9d0:	bf98      	it	ls
 800f9d2:	5d9c      	ldrbls	r4, [r3, r6]
 800f9d4:	f8bd 3050 	ldrh.w	r3, [sp, #80]	@ 0x50
 800f9d8:	10e4      	asrs	r4, r4, #3
 800f9da:	f8cd 8010 	str.w	r8, [sp, #16]
 800f9de:	f8ad 3018 	strh.w	r3, [sp, #24]
 800f9e2:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800f9e6:	fb04 0405 	mla	r4, r4, r5, r0
 800f9ea:	6878      	ldr	r0, [r7, #4]
 800f9ec:	f8ad 301a 	strh.w	r3, [sp, #26]
 800f9f0:	2300      	movs	r3, #0
 800f9f2:	9405      	str	r4, [sp, #20]
 800f9f4:	f8ad 301c 	strh.w	r3, [sp, #28]
 800f9f8:	f88d 9020 	strb.w	r9, [sp, #32]
 800f9fc:	f88d 2023 	strb.w	r2, [sp, #35]	@ 0x23
 800fa00:	f88d 3024 	strb.w	r3, [sp, #36]	@ 0x24
 800fa04:	f88d 6021 	strb.w	r6, [sp, #33]	@ 0x21
 800fa08:	f88d 6022 	strb.w	r6, [sp, #34]	@ 0x22
 800fa0c:	6803      	ldr	r3, [r0, #0]
 800fa0e:	685b      	ldr	r3, [r3, #4]
 800fa10:	4798      	blx	r3
 800fa12:	b00b      	add	sp, #44	@ 0x2c
 800fa14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fa18:	08025160 	.word	0x08025160

0800fa1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>:
 800fa1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa20:	461e      	mov	r6, r3
 800fa22:	4b0a      	ldr	r3, [pc, #40]	@ (800fa4c <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x30>)
 800fa24:	460f      	mov	r7, r1
 800fa26:	4690      	mov	r8, r2
 800fa28:	881d      	ldrh	r5, [r3, #0]
 800fa2a:	f7f4 faff 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800fa2e:	6803      	ldr	r3, [r0, #0]
 800fa30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fa32:	4798      	blx	r3
 800fa34:	280b      	cmp	r0, #11
 800fa36:	bf96      	itet	ls
 800fa38:	4b05      	ldrls	r3, [pc, #20]	@ (800fa50 <_ZNK8touchgfx3HAL13getDstAddressEttPt+0x34>)
 800fa3a:	2400      	movhi	r4, #0
 800fa3c:	5c1c      	ldrbls	r4, [r3, r0]
 800fa3e:	fb08 7005 	mla	r0, r8, r5, r7
 800fa42:	10e4      	asrs	r4, r4, #3
 800fa44:	fb04 6000 	mla	r0, r4, r0, r6
 800fa48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa4c:	240253a2 	.word	0x240253a2
 800fa50:	08025160 	.word	0x08025160

0800fa54 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb>:
 800fa54:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fa56:	b08b      	sub	sp, #44	@ 0x2c
 800fa58:	461f      	mov	r7, r3
 800fa5a:	4604      	mov	r4, r0
 800fa5c:	4616      	mov	r6, r2
 800fa5e:	f8bd 3054 	ldrh.w	r3, [sp, #84]	@ 0x54
 800fa62:	2500      	movs	r5, #0
 800fa64:	e9cd 3101 	strd	r3, r1, [sp, #4]
 800fa68:	f8bd 3040 	ldrh.w	r3, [sp, #64]	@ 0x40
 800fa6c:	9504      	str	r5, [sp, #16]
 800fa6e:	f8ad 3018 	strh.w	r3, [sp, #24]
 800fa72:	f8bd 3044 	ldrh.w	r3, [sp, #68]	@ 0x44
 800fa76:	f8ad 301a 	strh.w	r3, [sp, #26]
 800fa7a:	f8bd 3048 	ldrh.w	r3, [sp, #72]	@ 0x48
 800fa7e:	f8ad 301c 	strh.w	r3, [sp, #28]
 800fa82:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 800fa86:	f88d 3020 	strb.w	r3, [sp, #32]
 800fa8a:	f7ff fe9f 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fa8e:	463a      	mov	r2, r7
 800fa90:	4631      	mov	r1, r6
 800fa92:	4603      	mov	r3, r0
 800fa94:	4620      	mov	r0, r4
 800fa96:	f7ff ffc1 	bl	800fa1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fa9a:	4b0e      	ldr	r3, [pc, #56]	@ (800fad4 <_ZN8touchgfx3HAL13blitCopyGlyphEPKhtttttNS_9colortypeEhNS_14BlitOperationsEb+0x80>)
 800fa9c:	9005      	str	r0, [sp, #20]
 800fa9e:	881b      	ldrh	r3, [r3, #0]
 800faa0:	f8ad 301e 	strh.w	r3, [sp, #30]
 800faa4:	f7f4 fac2 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800faa8:	6803      	ldr	r3, [r0, #0]
 800faaa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800faac:	4798      	blx	r3
 800faae:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800fab0:	f88d 0022 	strb.w	r0, [sp, #34]	@ 0x22
 800fab4:	a901      	add	r1, sp, #4
 800fab6:	f88d 0021 	strb.w	r0, [sp, #33]	@ 0x21
 800faba:	9304      	str	r3, [sp, #16]
 800fabc:	6860      	ldr	r0, [r4, #4]
 800fabe:	f89d 3058 	ldrb.w	r3, [sp, #88]	@ 0x58
 800fac2:	f88d 5024 	strb.w	r5, [sp, #36]	@ 0x24
 800fac6:	f88d 3023 	strb.w	r3, [sp, #35]	@ 0x23
 800faca:	6803      	ldr	r3, [r0, #0]
 800facc:	685b      	ldr	r3, [r3, #4]
 800face:	4798      	blx	r3
 800fad0:	b00b      	add	sp, #44	@ 0x2c
 800fad2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fad4:	240253a2 	.word	0x240253a2

0800fad8 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE>:
 800fad8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fada:	b08d      	sub	sp, #52	@ 0x34
 800fadc:	2501      	movs	r5, #1
 800fade:	4604      	mov	r4, r0
 800fae0:	466b      	mov	r3, sp
 800fae2:	9503      	str	r5, [sp, #12]
 800fae4:	e883 0006 	stmia.w	r3, {r1, r2}
 800fae8:	2300      	movs	r3, #0
 800faea:	f8bd 6000 	ldrh.w	r6, [sp]
 800faee:	f8bd 7002 	ldrh.w	r7, [sp, #2]
 800faf2:	9306      	str	r3, [sp, #24]
 800faf4:	6803      	ldr	r3, [r0, #0]
 800faf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800faf8:	4798      	blx	r3
 800fafa:	463a      	mov	r2, r7
 800fafc:	4631      	mov	r1, r6
 800fafe:	4603      	mov	r3, r0
 800fb00:	4620      	mov	r0, r4
 800fb02:	f7ff ff8b 	bl	800fa1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fb06:	6c63      	ldr	r3, [r4, #68]	@ 0x44
 800fb08:	9004      	str	r0, [sp, #16]
 800fb0a:	9307      	str	r3, [sp, #28]
 800fb0c:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fb10:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb14:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fb18:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800fb1c:	4b0e      	ldr	r3, [pc, #56]	@ (800fb58 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectE+0x80>)
 800fb1e:	881b      	ldrh	r3, [r3, #0]
 800fb20:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800fb24:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800fb28:	f7f4 fa80 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800fb2c:	6803      	ldr	r3, [r0, #0]
 800fb2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fb30:	4798      	blx	r3
 800fb32:	23ff      	movs	r3, #255	@ 0xff
 800fb34:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800fb38:	a903      	add	r1, sp, #12
 800fb3a:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800fb3e:	6860      	ldr	r0, [r4, #4]
 800fb40:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800fb44:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800fb48:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800fb4c:	6803      	ldr	r3, [r0, #0]
 800fb4e:	685b      	ldr	r3, [r3, #4]
 800fb50:	4798      	blx	r3
 800fb52:	6c60      	ldr	r0, [r4, #68]	@ 0x44
 800fb54:	b00d      	add	sp, #52	@ 0x34
 800fb56:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb58:	240253a2 	.word	0x240253a2

0800fb5c <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm>:
 800fb5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fb60:	b08c      	sub	sp, #48	@ 0x30
 800fb62:	461e      	mov	r6, r3
 800fb64:	2300      	movs	r3, #0
 800fb66:	4604      	mov	r4, r0
 800fb68:	466d      	mov	r5, sp
 800fb6a:	9306      	str	r3, [sp, #24]
 800fb6c:	6803      	ldr	r3, [r0, #0]
 800fb6e:	e885 0006 	stmia.w	r5, {r1, r2}
 800fb72:	2501      	movs	r5, #1
 800fb74:	f8bd 7000 	ldrh.w	r7, [sp]
 800fb78:	f8bd 8002 	ldrh.w	r8, [sp, #2]
 800fb7c:	9503      	str	r5, [sp, #12]
 800fb7e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fb80:	4798      	blx	r3
 800fb82:	4642      	mov	r2, r8
 800fb84:	4639      	mov	r1, r7
 800fb86:	4603      	mov	r3, r0
 800fb88:	4620      	mov	r0, r4
 800fb8a:	f7ff ff47 	bl	800fa1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fb8e:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 800fb92:	9004      	str	r0, [sp, #16]
 800fb94:	f8ad 3020 	strh.w	r3, [sp, #32]
 800fb98:	f8bd 3006 	ldrh.w	r3, [sp, #6]
 800fb9c:	9607      	str	r6, [sp, #28]
 800fb9e:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 800fba2:	4b10      	ldr	r3, [pc, #64]	@ (800fbe4 <_ZN8touchgfx3HAL20copyFBRegionToMemoryENS_4RectEPtm+0x88>)
 800fba4:	881b      	ldrh	r3, [r3, #0]
 800fba6:	f8ad 3024 	strh.w	r3, [sp, #36]	@ 0x24
 800fbaa:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800fbac:	f8ad 3026 	strh.w	r3, [sp, #38]	@ 0x26
 800fbb0:	f7f4 fa3c 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 800fbb4:	6803      	ldr	r3, [r0, #0]
 800fbb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fbb8:	4798      	blx	r3
 800fbba:	23ff      	movs	r3, #255	@ 0xff
 800fbbc:	f88d 0029 	strb.w	r0, [sp, #41]	@ 0x29
 800fbc0:	a903      	add	r1, sp, #12
 800fbc2:	f88d 002a 	strb.w	r0, [sp, #42]	@ 0x2a
 800fbc6:	6860      	ldr	r0, [r4, #4]
 800fbc8:	f88d 3028 	strb.w	r3, [sp, #40]	@ 0x28
 800fbcc:	f88d 502b 	strb.w	r5, [sp, #43]	@ 0x2b
 800fbd0:	f88d 502c 	strb.w	r5, [sp, #44]	@ 0x2c
 800fbd4:	6803      	ldr	r3, [r0, #0]
 800fbd6:	685b      	ldr	r3, [r3, #4]
 800fbd8:	4798      	blx	r3
 800fbda:	4630      	mov	r0, r6
 800fbdc:	b00c      	add	sp, #48	@ 0x30
 800fbde:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fbe2:	bf00      	nop
 800fbe4:	240253a2 	.word	0x240253a2

0800fbe8 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE>:
 800fbe8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800fbea:	b085      	sub	sp, #20
 800fbec:	4605      	mov	r5, r0
 800fbee:	ac02      	add	r4, sp, #8
 800fbf0:	e884 0006 	stmia.w	r4, {r1, r2}
 800fbf4:	f8bd 6008 	ldrh.w	r6, [sp, #8]
 800fbf8:	f8bd 700a 	ldrh.w	r7, [sp, #10]
 800fbfc:	f7ff fde6 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fc00:	4631      	mov	r1, r6
 800fc02:	4603      	mov	r3, r0
 800fc04:	463a      	mov	r2, r7
 800fc06:	4628      	mov	r0, r5
 800fc08:	f7ff ff08 	bl	800fa1c <_ZNK8touchgfx3HAL13getDstAddressEttPt>
 800fc0c:	4a05      	ldr	r2, [pc, #20]	@ (800fc24 <_ZN8touchgfx3HAL25copyFromTFTToClientBufferENS_4RectE+0x3c>)
 800fc0e:	682b      	ldr	r3, [r5, #0]
 800fc10:	8812      	ldrh	r2, [r2, #0]
 800fc12:	9200      	str	r2, [sp, #0]
 800fc14:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 800fc16:	4603      	mov	r3, r0
 800fc18:	4628      	mov	r0, r5
 800fc1a:	e894 0006 	ldmia.w	r4, {r1, r2}
 800fc1e:	47b0      	blx	r6
 800fc20:	b005      	add	sp, #20
 800fc22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fc24:	240253a2 	.word	0x240253a2

0800fc28 <_ZN8touchgfx3HAL16swapFrameBuffersEv>:
 800fc28:	b570      	push	{r4, r5, r6, lr}
 800fc2a:	f890 306e 	ldrb.w	r3, [r0, #110]	@ 0x6e
 800fc2e:	4604      	mov	r4, r0
 800fc30:	b19b      	cbz	r3, 800fc5a <_ZN8touchgfx3HAL16swapFrameBuffersEv+0x32>
 800fc32:	2002      	movs	r0, #2
 800fc34:	f7f2 f8e4 	bl	8001e00 <_ZN8touchgfx4GPIO6toggleENS0_7GPIO_IDE>
 800fc38:	2300      	movs	r3, #0
 800fc3a:	4620      	mov	r0, r4
 800fc3c:	f884 306e 	strb.w	r3, [r4, #110]	@ 0x6e
 800fc40:	f884 306d 	strb.w	r3, [r4, #109]	@ 0x6d
 800fc44:	6823      	ldr	r3, [r4, #0]
 800fc46:	f8d3 50b8 	ldr.w	r5, [r3, #184]	@ 0xb8
 800fc4a:	f7ff fdbf 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fc4e:	4601      	mov	r1, r0
 800fc50:	4620      	mov	r0, r4
 800fc52:	462b      	mov	r3, r5
 800fc54:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc58:	4718      	bx	r3
 800fc5a:	bd70      	pop	{r4, r5, r6, pc}

0800fc5c <_ZN8touchgfx3HAL12setMCUActiveEb>:
 800fc5c:	b570      	push	{r4, r5, r6, lr}
 800fc5e:	4605      	mov	r5, r0
 800fc60:	460c      	mov	r4, r1
 800fc62:	2003      	movs	r0, #3
 800fc64:	b149      	cbz	r1, 800fc7a <_ZN8touchgfx3HAL12setMCUActiveEb+0x1e>
 800fc66:	f7f2 f86b 	bl	8001d40 <_ZN8touchgfx4GPIO3setENS0_7GPIO_IDE>
 800fc6a:	6928      	ldr	r0, [r5, #16]
 800fc6c:	b168      	cbz	r0, 800fc8a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fc6e:	6803      	ldr	r3, [r0, #0]
 800fc70:	2101      	movs	r1, #1
 800fc72:	695b      	ldr	r3, [r3, #20]
 800fc74:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fc78:	4718      	bx	r3
 800fc7a:	f7f2 f891 	bl	8001da0 <_ZN8touchgfx4GPIO5clearENS0_7GPIO_IDE>
 800fc7e:	6928      	ldr	r0, [r5, #16]
 800fc80:	b118      	cbz	r0, 800fc8a <_ZN8touchgfx3HAL12setMCUActiveEb+0x2e>
 800fc82:	6803      	ldr	r3, [r0, #0]
 800fc84:	4621      	mov	r1, r4
 800fc86:	695b      	ldr	r3, [r3, #20]
 800fc88:	e7f4      	b.n	800fc74 <_ZN8touchgfx3HAL12setMCUActiveEb+0x18>
 800fc8a:	bd70      	pop	{r4, r5, r6, pc}

0800fc8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>:
 800fc8c:	b538      	push	{r3, r4, r5, lr}
 800fc8e:	f890 307b 	ldrb.w	r3, [r0, #123]	@ 0x7b
 800fc92:	4604      	mov	r4, r0
 800fc94:	460d      	mov	r5, r1
 800fc96:	428b      	cmp	r3, r1
 800fc98:	d006      	beq.n	800fca8 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1c>
 800fc9a:	6803      	ldr	r3, [r0, #0]
 800fc9c:	b929      	cbnz	r1, 800fcaa <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x1e>
 800fc9e:	f8d3 30c8 	ldr.w	r3, [r3, #200]	@ 0xc8
 800fca2:	4798      	blx	r3
 800fca4:	f884 507b 	strb.w	r5, [r4, #123]	@ 0x7b
 800fca8:	bd38      	pop	{r3, r4, r5, pc}
 800fcaa:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 800fcae:	e7f8      	b.n	800fca2 <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE+0x16>

0800fcb0 <_ZN8touchgfx3HAL15lockFrameBufferEv>:
 800fcb0:	4b0d      	ldr	r3, [pc, #52]	@ (800fce8 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x38>)
 800fcb2:	b510      	push	{r4, lr}
 800fcb4:	781b      	ldrb	r3, [r3, #0]
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	b95b      	cbnz	r3, 800fcd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fcba:	f890 3048 	ldrb.w	r3, [r0, #72]	@ 0x48
 800fcbe:	2b02      	cmp	r3, #2
 800fcc0:	d007      	beq.n	800fcd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fcc2:	6840      	ldr	r0, [r0, #4]
 800fcc4:	f000 f91a 	bl	800fefc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>
 800fcc8:	b118      	cbz	r0, 800fcd2 <_ZN8touchgfx3HAL15lockFrameBufferEv+0x22>
 800fcca:	6862      	ldr	r2, [r4, #4]
 800fccc:	7a53      	ldrb	r3, [r2, #9]
 800fcce:	2b00      	cmp	r3, #0
 800fcd0:	d0fc      	beq.n	800fccc <_ZN8touchgfx3HAL15lockFrameBufferEv+0x1c>
 800fcd2:	f7f3 f89f 	bl	8002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	2100      	movs	r1, #0
 800fcda:	f7ff ffd7 	bl	800fc8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fcde:	4620      	mov	r0, r4
 800fce0:	f7ff fd74 	bl	800f7cc <_ZN8touchgfx3HAL20getClientFrameBufferEv>
 800fce4:	bd10      	pop	{r4, pc}
 800fce6:	bf00      	nop
 800fce8:	240253a6 	.word	0x240253a6

0800fcec <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>:
 800fcec:	b570      	push	{r4, r5, r6, lr}
 800fcee:	4604      	mov	r4, r0
 800fcf0:	6803      	ldr	r3, [r0, #0]
 800fcf2:	b919      	cbnz	r1, 800fcfc <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE+0x10>
 800fcf4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fcf6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fcfa:	4718      	bx	r3
 800fcfc:	2200      	movs	r2, #0
 800fcfe:	f890 607b 	ldrb.w	r6, [r0, #123]	@ 0x7b
 800fd02:	f880 207b 	strb.w	r2, [r0, #123]	@ 0x7b
 800fd06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd08:	4798      	blx	r3
 800fd0a:	6863      	ldr	r3, [r4, #4]
 800fd0c:	2101      	movs	r1, #1
 800fd0e:	4605      	mov	r5, r0
 800fd10:	4620      	mov	r0, r4
 800fd12:	7299      	strb	r1, [r3, #10]
 800fd14:	f884 607b 	strb.w	r6, [r4, #123]	@ 0x7b
 800fd18:	f7ff ffb8 	bl	800fc8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fd1c:	4628      	mov	r0, r5
 800fd1e:	bd70      	pop	{r4, r5, r6, pc}

0800fd20 <_ZN8touchgfx17LockFreeDMA_Queue7isEmptyEv>:
 800fd20:	e9d0 2003 	ldrd	r2, r0, [r0, #12]
 800fd24:	1a13      	subs	r3, r2, r0
 800fd26:	4258      	negs	r0, r3
 800fd28:	4158      	adcs	r0, r3
 800fd2a:	4770      	bx	lr

0800fd2c <_ZN8touchgfx17LockFreeDMA_Queue6isFullEv>:
 800fd2c:	e9d0 2303 	ldrd	r2, r3, [r0, #12]
 800fd30:	1a9b      	subs	r3, r3, r2
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	bfdc      	itt	le
 800fd36:	6882      	ldrle	r2, [r0, #8]
 800fd38:	189b      	addle	r3, r3, r2
 800fd3a:	2b01      	cmp	r3, #1
 800fd3c:	bfcc      	ite	gt
 800fd3e:	2000      	movgt	r0, #0
 800fd40:	2001      	movle	r0, #1
 800fd42:	4770      	bx	lr

0800fd44 <_ZN8touchgfx17LockFreeDMA_Queue5firstEv>:
 800fd44:	6902      	ldr	r2, [r0, #16]
 800fd46:	6843      	ldr	r3, [r0, #4]
 800fd48:	2024      	movs	r0, #36	@ 0x24
 800fd4a:	fb00 3002 	mla	r0, r0, r2, r3
 800fd4e:	4770      	bx	lr

0800fd50 <_ZN8touchgfx13DMA_Interface13seedExecutionEv>:
 800fd50:	6803      	ldr	r3, [r0, #0]
 800fd52:	691b      	ldr	r3, [r3, #16]
 800fd54:	4718      	bx	r3

0800fd56 <_ZN8touchgfx13DMA_Interface7executeEv>:
 800fd56:	2301      	movs	r3, #1
 800fd58:	b570      	push	{r4, r5, r6, lr}
 800fd5a:	7203      	strb	r3, [r0, #8]
 800fd5c:	4604      	mov	r4, r0
 800fd5e:	6840      	ldr	r0, [r0, #4]
 800fd60:	6803      	ldr	r3, [r0, #0]
 800fd62:	699b      	ldr	r3, [r3, #24]
 800fd64:	4798      	blx	r3
 800fd66:	6803      	ldr	r3, [r0, #0]
 800fd68:	4605      	mov	r5, r0
 800fd6a:	2b40      	cmp	r3, #64	@ 0x40
 800fd6c:	d00c      	beq.n	800fd88 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd6e:	d810      	bhi.n	800fd92 <_ZN8touchgfx13DMA_Interface7executeEv+0x3c>
 800fd70:	2b04      	cmp	r3, #4
 800fd72:	d01d      	beq.n	800fdb0 <_ZN8touchgfx13DMA_Interface7executeEv+0x5a>
 800fd74:	d804      	bhi.n	800fd80 <_ZN8touchgfx13DMA_Interface7executeEv+0x2a>
 800fd76:	2b01      	cmp	r3, #1
 800fd78:	d006      	beq.n	800fd88 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd7a:	2b02      	cmp	r3, #2
 800fd7c:	d02c      	beq.n	800fdd8 <_ZN8touchgfx13DMA_Interface7executeEv+0x82>
 800fd7e:	bd70      	pop	{r4, r5, r6, pc}
 800fd80:	2b08      	cmp	r3, #8
 800fd82:	d01d      	beq.n	800fdc0 <_ZN8touchgfx13DMA_Interface7executeEv+0x6a>
 800fd84:	2b20      	cmp	r3, #32
 800fd86:	d1fa      	bne.n	800fd7e <_ZN8touchgfx13DMA_Interface7executeEv+0x28>
 800fd88:	6823      	ldr	r3, [r4, #0]
 800fd8a:	4620      	mov	r0, r4
 800fd8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fd8e:	4798      	blx	r3
 800fd90:	e013      	b.n	800fdba <_ZN8touchgfx13DMA_Interface7executeEv+0x64>
 800fd92:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800fd96:	d0f7      	beq.n	800fd88 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd98:	d804      	bhi.n	800fda4 <_ZN8touchgfx13DMA_Interface7executeEv+0x4e>
 800fd9a:	2b80      	cmp	r3, #128	@ 0x80
 800fd9c:	d0f4      	beq.n	800fd88 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fd9e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800fda2:	e7f0      	b.n	800fd86 <_ZN8touchgfx13DMA_Interface7executeEv+0x30>
 800fda4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800fda8:	d0ee      	beq.n	800fd88 <_ZN8touchgfx13DMA_Interface7executeEv+0x32>
 800fdaa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800fdae:	e7e5      	b.n	800fd7c <_ZN8touchgfx13DMA_Interface7executeEv+0x26>
 800fdb0:	6823      	ldr	r3, [r4, #0]
 800fdb2:	7f01      	ldrb	r1, [r0, #28]
 800fdb4:	4620      	mov	r0, r4
 800fdb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdb8:	4798      	blx	r3
 800fdba:	6823      	ldr	r3, [r4, #0]
 800fdbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdbe:	e006      	b.n	800fdce <_ZN8touchgfx13DMA_Interface7executeEv+0x78>
 800fdc0:	6823      	ldr	r3, [r4, #0]
 800fdc2:	7f01      	ldrb	r1, [r0, #28]
 800fdc4:	4620      	mov	r0, r4
 800fdc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdc8:	4798      	blx	r3
 800fdca:	6823      	ldr	r3, [r4, #0]
 800fdcc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdce:	4629      	mov	r1, r5
 800fdd0:	4620      	mov	r0, r4
 800fdd2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fdd6:	4718      	bx	r3
 800fdd8:	6823      	ldr	r3, [r4, #0]
 800fdda:	4620      	mov	r0, r4
 800fddc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdde:	4798      	blx	r3
 800fde0:	e7f3      	b.n	800fdca <_ZN8touchgfx13DMA_Interface7executeEv+0x74>

0800fde2 <_ZN8touchgfx13DMA_Interface11enableAlphaEh>:
 800fde2:	4770      	bx	lr

0800fde4 <_ZN8touchgfx13DMA_Interface12disableAlphaEv>:
 800fde4:	4770      	bx	lr

0800fde6 <_ZN8touchgfx17LockFreeDMA_QueueD1Ev>:
 800fde6:	4770      	bx	lr

0800fde8 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE>:
 800fde8:	e9d0 3203 	ldrd	r3, r2, [r0, #12]
 800fdec:	b510      	push	{r4, lr}
 800fdee:	1ad2      	subs	r2, r2, r3
 800fdf0:	2a00      	cmp	r2, #0
 800fdf2:	bfdc      	itt	le
 800fdf4:	6884      	ldrle	r4, [r0, #8]
 800fdf6:	1912      	addle	r2, r2, r4
 800fdf8:	2a01      	cmp	r2, #1
 800fdfa:	dd16      	ble.n	800fe2a <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x42>
 800fdfc:	6842      	ldr	r2, [r0, #4]
 800fdfe:	2424      	movs	r4, #36	@ 0x24
 800fe00:	fb04 2303 	mla	r3, r4, r3, r2
 800fe04:	f101 0220 	add.w	r2, r1, #32
 800fe08:	f851 4b04 	ldr.w	r4, [r1], #4
 800fe0c:	4291      	cmp	r1, r2
 800fe0e:	f843 4b04 	str.w	r4, [r3], #4
 800fe12:	d1f9      	bne.n	800fe08 <_ZN8touchgfx17LockFreeDMA_Queue10pushCopyOfERKNS_6BlitOpE+0x20>
 800fe14:	780a      	ldrb	r2, [r1, #0]
 800fe16:	701a      	strb	r2, [r3, #0]
 800fe18:	68c3      	ldr	r3, [r0, #12]
 800fe1a:	6882      	ldr	r2, [r0, #8]
 800fe1c:	f3bf 8f5b 	dmb	ish
 800fe20:	3301      	adds	r3, #1
 800fe22:	429a      	cmp	r2, r3
 800fe24:	bfd8      	it	le
 800fe26:	1a9b      	suble	r3, r3, r2
 800fe28:	60c3      	str	r3, [r0, #12]
 800fe2a:	bd10      	pop	{r4, pc}

0800fe2c <_ZN8touchgfx17LockFreeDMA_Queue3popEv>:
 800fe2c:	6903      	ldr	r3, [r0, #16]
 800fe2e:	6882      	ldr	r2, [r0, #8]
 800fe30:	f3bf 8f5b 	dmb	ish
 800fe34:	3301      	adds	r3, #1
 800fe36:	429a      	cmp	r2, r3
 800fe38:	bfd8      	it	le
 800fe3a:	1a9b      	suble	r3, r3, r2
 800fe3c:	6103      	str	r3, [r0, #16]
 800fe3e:	4770      	bx	lr

0800fe40 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE>:
 800fe40:	b570      	push	{r4, r5, r6, lr}
 800fe42:	4604      	mov	r4, r0
 800fe44:	460e      	mov	r6, r1
 800fe46:	6860      	ldr	r0, [r4, #4]
 800fe48:	6803      	ldr	r3, [r0, #0]
 800fe4a:	685b      	ldr	r3, [r3, #4]
 800fe4c:	4798      	blx	r3
 800fe4e:	2800      	cmp	r0, #0
 800fe50:	d1f9      	bne.n	800fe46 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x6>
 800fe52:	4d0d      	ldr	r5, [pc, #52]	@ (800fe88 <_ZN8touchgfx13DMA_Interface10addToQueueERKNS_6BlitOpE+0x48>)
 800fe54:	6828      	ldr	r0, [r5, #0]
 800fe56:	6803      	ldr	r3, [r0, #0]
 800fe58:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fe5a:	4798      	blx	r3
 800fe5c:	f7f2 ffe8 	bl	8002e30 <_ZN8touchgfx10OSWrappers27tryTakeFrameBufferSemaphoreEv>
 800fe60:	6828      	ldr	r0, [r5, #0]
 800fe62:	2101      	movs	r1, #1
 800fe64:	f7ff ff12 	bl	800fc8c <_ZN8touchgfx3HAL18setRenderingMethodENS0_15RenderingMethodE>
 800fe68:	6860      	ldr	r0, [r4, #4]
 800fe6a:	4631      	mov	r1, r6
 800fe6c:	6803      	ldr	r3, [r0, #0]
 800fe6e:	689b      	ldr	r3, [r3, #8]
 800fe70:	4798      	blx	r3
 800fe72:	6823      	ldr	r3, [r4, #0]
 800fe74:	4620      	mov	r0, r4
 800fe76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe78:	4798      	blx	r3
 800fe7a:	6828      	ldr	r0, [r5, #0]
 800fe7c:	6803      	ldr	r3, [r0, #0]
 800fe7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fe82:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800fe84:	4718      	bx	r3
 800fe86:	bf00      	nop
 800fe88:	240253a8 	.word	0x240253a8

0800fe8c <_ZN8touchgfx13DMA_Interface27waitForFrameBufferSemaphoreEv>:
 800fe8c:	b508      	push	{r3, lr}
 800fe8e:	f7f2 ffc1 	bl	8002e14 <_ZN8touchgfx10OSWrappers24takeFrameBufferSemaphoreEv>
 800fe92:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 800fe96:	f7f2 bfc5 	b.w	8002e24 <_ZN8touchgfx10OSWrappers24giveFrameBufferSemaphoreEv>

0800fe9a <_ZN8touchgfx17LockFreeDMA_QueueD0Ev>:
 800fe9a:	b510      	push	{r4, lr}
 800fe9c:	4604      	mov	r4, r0
 800fe9e:	2114      	movs	r1, #20
 800fea0:	f011 f8c1 	bl	8021026 <_ZdlPvj>
 800fea4:	4620      	mov	r0, r4
 800fea6:	bd10      	pop	{r4, pc}

0800fea8 <_ZN8touchgfx13DMA_Interface16executeCompletedEv>:
 800fea8:	b570      	push	{r4, r5, r6, lr}
 800feaa:	4604      	mov	r4, r0
 800feac:	6840      	ldr	r0, [r0, #4]
 800feae:	6803      	ldr	r3, [r0, #0]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	4798      	blx	r3
 800feb4:	4605      	mov	r5, r0
 800feb6:	b930      	cbnz	r0, 800fec6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800feb8:	7a23      	ldrb	r3, [r4, #8]
 800feba:	b123      	cbz	r3, 800fec6 <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x1e>
 800febc:	6860      	ldr	r0, [r4, #4]
 800febe:	6803      	ldr	r3, [r0, #0]
 800fec0:	695b      	ldr	r3, [r3, #20]
 800fec2:	4798      	blx	r3
 800fec4:	7225      	strb	r5, [r4, #8]
 800fec6:	6860      	ldr	r0, [r4, #4]
 800fec8:	6803      	ldr	r3, [r0, #0]
 800feca:	681b      	ldr	r3, [r3, #0]
 800fecc:	4798      	blx	r3
 800fece:	b928      	cbnz	r0, 800fedc <_ZN8touchgfx13DMA_Interface16executeCompletedEv+0x34>
 800fed0:	6823      	ldr	r3, [r4, #0]
 800fed2:	4620      	mov	r0, r4
 800fed4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fed6:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800feda:	4718      	bx	r3
 800fedc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800fee0:	f7f2 bfae 	b.w	8002e40 <_ZN8touchgfx10OSWrappers31giveFrameBufferSemaphoreFromISREv>

0800fee4 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi>:
 800fee4:	b510      	push	{r4, lr}
 800fee6:	6082      	str	r2, [r0, #8]
 800fee8:	2200      	movs	r2, #0
 800feea:	4c03      	ldr	r4, [pc, #12]	@ (800fef8 <_ZN8touchgfx17LockFreeDMA_QueueC1EPNS_6BlitOpEi+0x14>)
 800feec:	e9c0 2203 	strd	r2, r2, [r0, #12]
 800fef0:	e9c0 4100 	strd	r4, r1, [r0]
 800fef4:	bd10      	pop	{r4, pc}
 800fef6:	bf00      	nop
 800fef8:	08025174 	.word	0x08025174

0800fefc <_ZN8touchgfx13DMA_Interface15isDmaQueueEmptyEv>:
 800fefc:	6840      	ldr	r0, [r0, #4]
 800fefe:	6803      	ldr	r3, [r0, #0]
 800ff00:	681b      	ldr	r3, [r3, #0]
 800ff02:	4718      	bx	r3

0800ff04 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv>:
 800ff04:	2300      	movs	r3, #0
 800ff06:	84c3      	strh	r3, [r0, #38]	@ 0x26
 800ff08:	8503      	strh	r3, [r0, #40]	@ 0x28
 800ff0a:	8543      	strh	r3, [r0, #42]	@ 0x2a
 800ff0c:	8583      	strh	r3, [r0, #44]	@ 0x2c
 800ff0e:	6980      	ldr	r0, [r0, #24]
 800ff10:	b110      	cbz	r0, 800ff18 <_ZN8touchgfx17CWRVectorRenderer8tearDownEv+0x14>
 800ff12:	6803      	ldr	r3, [r0, #0]
 800ff14:	691b      	ldr	r3, [r3, #16]
 800ff16:	4718      	bx	r3
 800ff18:	4770      	bx	lr

0800ff1a <_ZN8touchgfx17CWRVectorRenderer14setStrokeWidthEf>:
 800ff1a:	ed80 0a0c 	vstr	s0, [r0, #48]	@ 0x30
 800ff1e:	4770      	bx	lr

0800ff20 <_ZN8touchgfx17CWRVectorRenderer8setColorENS_9colortypeE>:
 800ff20:	b538      	push	{r3, r4, r5, lr}
 800ff22:	0e0b      	lsrs	r3, r1, #24
 800ff24:	4604      	mov	r4, r0
 800ff26:	460d      	mov	r5, r1
 800ff28:	7783      	strb	r3, [r0, #30]
 800ff2a:	6803      	ldr	r3, [r0, #0]
 800ff2c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ff2e:	4798      	blx	r3
 800ff30:	6803      	ldr	r3, [r0, #0]
 800ff32:	4629      	mov	r1, r5
 800ff34:	689b      	ldr	r3, [r3, #8]
 800ff36:	4798      	blx	r3
 800ff38:	6823      	ldr	r3, [r4, #0]
 800ff3a:	4620      	mov	r0, r4
 800ff3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ff3e:	4798      	blx	r3
 800ff40:	61a0      	str	r0, [r4, #24]
 800ff42:	bd38      	pop	{r3, r4, r5, pc}

0800ff44 <_ZN8touchgfx17CWRVectorRenderer8setAlphaEh>:
 800ff44:	7741      	strb	r1, [r0, #29]
 800ff46:	4770      	bx	lr

0800ff48 <_ZN8touchgfx17CWRVectorRenderer23setTransformationMatrixERKNS_9Matrix3x3E>:
 800ff48:	b530      	push	{r4, r5, lr}
 800ff4a:	460d      	mov	r5, r1
 800ff4c:	f100 0434 	add.w	r4, r0, #52	@ 0x34
 800ff50:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff52:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff54:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ff56:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ff58:	682b      	ldr	r3, [r5, #0]
 800ff5a:	6023      	str	r3, [r4, #0]
 800ff5c:	bd30      	pop	{r4, r5, pc}

0800ff5e <_ZN8touchgfx17CWRVectorRenderer5setupERKNS_4RectES3_>:
 800ff5e:	b538      	push	{r3, r4, r5, lr}
 800ff60:	4604      	mov	r4, r0
 800ff62:	1d03      	adds	r3, r0, #4
 800ff64:	6808      	ldr	r0, [r1, #0]
 800ff66:	2500      	movs	r5, #0
 800ff68:	6849      	ldr	r1, [r1, #4]
 800ff6a:	c303      	stmia	r3!, {r0, r1}
 800ff6c:	6813      	ldr	r3, [r2, #0]
 800ff6e:	f104 0034 	add.w	r0, r4, #52	@ 0x34
 800ff72:	f8c4 3026 	str.w	r3, [r4, #38]	@ 0x26
 800ff76:	6853      	ldr	r3, [r2, #4]
 800ff78:	61a5      	str	r5, [r4, #24]
 800ff7a:	f8c4 302a 	str.w	r3, [r4, #42]	@ 0x2a
 800ff7e:	f004 fddd 	bl	8014b3c <_ZN8touchgfx9Matrix3x35resetEv>
 800ff82:	23ff      	movs	r3, #255	@ 0xff
 800ff84:	f884 5025 	strb.w	r5, [r4, #37]	@ 0x25
 800ff88:	7763      	strb	r3, [r4, #29]
 800ff8a:	77a3      	strb	r3, [r4, #30]
 800ff8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800ff90:	6323      	str	r3, [r4, #48]	@ 0x30
 800ff92:	2301      	movs	r3, #1
 800ff94:	f884 3024 	strb.w	r3, [r4, #36]	@ 0x24
 800ff98:	bd38      	pop	{r3, r4, r5, pc}
	...

0800ff9c <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_>:
 800ff9c:	ee70 7a41 	vsub.f32	s15, s0, s2
 800ffa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ffa4:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ffa8:	4605      	mov	r5, r0
 800ffaa:	ed2d 8b0a 	vpush	{d8-d12}
 800ffae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffb2:	b086      	sub	sp, #24
 800ffb4:	eeb0 ba40 	vmov.f32	s22, s0
 800ffb8:	6802      	ldr	r2, [r0, #0]
 800ffba:	eef0 ba60 	vmov.f32	s23, s1
 800ffbe:	f89d 6058 	ldrb.w	r6, [sp, #88]	@ 0x58
 800ffc2:	eef0 aa41 	vmov.f32	s21, s2
 800ffc6:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 800ffc8:	eeb0 aa61 	vmov.f32	s20, s3
 800ffcc:	eeb0 ca42 	vmov.f32	s24, s4
 800ffd0:	eef0 ca62 	vmov.f32	s25, s5
 800ffd4:	d112      	bne.n	800fffc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ffd6:	ee70 7ae1 	vsub.f32	s15, s1, s3
 800ffda:	eef5 7a40 	vcmp.f32	s15, #0.0
 800ffde:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ffe2:	d10b      	bne.n	800fffc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x60>
 800ffe4:	f101 4180 	add.w	r1, r1, #1073741824	@ 0x40000000
 800ffe8:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 800ffea:	3901      	subs	r1, #1
 800ffec:	f853 1021 	ldr.w	r1, [r3, r1, lsl #2]
 800fff0:	b006      	add	sp, #24
 800fff2:	ecbd 8b0a 	vpop	{d8-d12}
 800fff6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fffa:	4710      	bx	r2
 800fffc:	23ff      	movs	r3, #255	@ 0xff
 800fffe:	4628      	mov	r0, r5
 8010000:	f105 0834 	add.w	r8, r5, #52	@ 0x34
 8010004:	77ab      	strb	r3, [r5, #30]
 8010006:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 8010008:	4798      	blx	r3
 801000a:	eeb0 0a4b 	vmov.f32	s0, s22
 801000e:	eef0 0a6b 	vmov.f32	s1, s23
 8010012:	4604      	mov	r4, r0
 8010014:	4640      	mov	r0, r8
 8010016:	f004 fe40 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801001a:	eef0 8a40 	vmov.f32	s17, s0
 801001e:	ed8d 0a00 	vstr	s0, [sp]
 8010022:	eeb0 0a6a 	vmov.f32	s0, s21
 8010026:	eef0 9a60 	vmov.f32	s19, s1
 801002a:	edcd 0a01 	vstr	s1, [sp, #4]
 801002e:	4640      	mov	r0, r8
 8010030:	eef0 0a4a 	vmov.f32	s1, s20
 8010034:	f004 fe31 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010038:	eef4 8a40 	vcmp.f32	s17, s0
 801003c:	eeb0 8a40 	vmov.f32	s16, s0
 8010040:	ed8d 0a02 	vstr	s0, [sp, #8]
 8010044:	eeb0 9a60 	vmov.f32	s18, s1
 8010048:	edcd 0a03 	vstr	s1, [sp, #12]
 801004c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010050:	eef4 9a60 	vcmp.f32	s19, s1
 8010054:	bf0c      	ite	eq
 8010056:	2301      	moveq	r3, #1
 8010058:	2300      	movne	r3, #0
 801005a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801005e:	eef4 8a40 	vcmp.f32	s17, s0
 8010062:	7463      	strb	r3, [r4, #17]
 8010064:	bf0c      	ite	eq
 8010066:	2301      	moveq	r3, #1
 8010068:	2300      	movne	r3, #0
 801006a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801006e:	74a3      	strb	r3, [r4, #18]
 8010070:	d024      	beq.n	80100bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8010072:	eef4 9a60 	vcmp.f32	s19, s1
 8010076:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801007a:	d01f      	beq.n	80100bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 801007c:	ee3a aa6b 	vsub.f32	s20, s20, s23
 8010080:	4640      	mov	r0, r8
 8010082:	ee7a aacb 	vsub.f32	s21, s21, s22
 8010086:	eeb0 0a4b 	vmov.f32	s0, s22
 801008a:	eeca 7a2c 	vdiv.f32	s15, s20, s25
 801008e:	ee8a 7a8c 	vdiv.f32	s14, s21, s24
 8010092:	eef0 0a6b 	vmov.f32	s1, s23
 8010096:	eea7 0acc 	vfms.f32	s0, s15, s24
 801009a:	eeec 0a87 	vfma.f32	s1, s25, s14
 801009e:	f004 fdfc 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 80100a2:	ed8d 0a04 	vstr	s0, [sp, #16]
 80100a6:	ee30 0a68 	vsub.f32	s0, s0, s17
 80100aa:	eeb5 0a40 	vcmp.f32	s0, #0.0
 80100ae:	edcd 0a05 	vstr	s1, [sp, #20]
 80100b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100b6:	d121      	bne.n	80100fc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x160>
 80100b8:	2301      	movs	r3, #1
 80100ba:	74a3      	strb	r3, [r4, #18]
 80100bc:	7c63      	ldrb	r3, [r4, #17]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d051      	beq.n	8010166 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ca>
 80100c2:	ee39 7a69 	vsub.f32	s14, s18, s19
 80100c6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 80101bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 80100ca:	eef4 9ac9 	vcmpe.f32	s19, s18
 80100ce:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80100d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80100d6:	edc4 7a08 	vstr	s15, [r4, #32]
 80100da:	eefd 7ac9 	vcvt.s32.f32	s15, s18
 80100de:	ee17 3a90 	vmov	r3, s15
 80100e2:	eefd 7ae9 	vcvt.s32.f32	s15, s19
 80100e6:	b21a      	sxth	r2, r3
 80100e8:	ee17 3a90 	vmov	r3, s15
 80100ec:	bf48      	it	mi
 80100ee:	8122      	strhmi	r2, [r4, #8]
 80100f0:	b21b      	sxth	r3, r3
 80100f2:	bf56      	itet	pl
 80100f4:	80e2      	strhpl	r2, [r4, #6]
 80100f6:	80e3      	strhmi	r3, [r4, #6]
 80100f8:	8123      	strhpl	r3, [r4, #8]
 80100fa:	e02c      	b.n	8010156 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80100fc:	ee70 0ae9 	vsub.f32	s1, s1, s19
 8010100:	eec0 7a80 	vdiv.f32	s15, s1, s0
 8010104:	eef5 7a40 	vcmp.f32	s15, #0.0
 8010108:	edc4 7a05 	vstr	s15, [r4, #20]
 801010c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010110:	d102      	bne.n	8010118 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x17c>
 8010112:	2301      	movs	r3, #1
 8010114:	7463      	strb	r3, [r4, #17]
 8010116:	e7d1      	b.n	80100bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x120>
 8010118:	eeb0 7a69 	vmov.f32	s14, s19
 801011c:	ee39 9a69 	vsub.f32	s18, s18, s19
 8010120:	ee38 8a68 	vsub.f32	s16, s16, s17
 8010124:	eea8 7ae7 	vfms.f32	s14, s17, s15
 8010128:	ed84 7a06 	vstr	s14, [r4, #24]
 801012c:	ee89 7a27 	vdiv.f32	s14, s18, s15
 8010130:	ee38 8a47 	vsub.f32	s16, s16, s14
 8010134:	ed9f 7a22 	vldr	s14, [pc, #136]	@ 80101c0 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x224>
 8010138:	eec7 7a08 	vdiv.f32	s15, s14, s16
 801013c:	ed84 8a07 	vstr	s16, [r4, #28]
 8010140:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8010144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010148:	edc4 7a08 	vstr	s15, [r4, #32]
 801014c:	d503      	bpl.n	8010156 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801014e:	eeb1 8a48 	vneg.f32	s16, s16
 8010152:	ed84 8a07 	vstr	s16, [r4, #28]
 8010156:	60e7      	str	r7, [r4, #12]
 8010158:	7426      	strb	r6, [r4, #16]
 801015a:	61ac      	str	r4, [r5, #24]
 801015c:	b006      	add	sp, #24
 801015e:	ecbd 8b0a 	vpop	{d8-d12}
 8010162:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8010166:	7ca3      	ldrb	r3, [r4, #18]
 8010168:	2b00      	cmp	r3, #0
 801016a:	d0f4      	beq.n	8010156 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 801016c:	ee38 7a68 	vsub.f32	s14, s16, s17
 8010170:	eddf 6a12 	vldr	s13, [pc, #72]	@ 80101bc <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x220>
 8010174:	eef4 8ac8 	vcmpe.f32	s17, s16
 8010178:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801017c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010180:	edc4 7a08 	vstr	s15, [r4, #32]
 8010184:	eefd 7ac8 	vcvt.s32.f32	s15, s16
 8010188:	ee17 3a90 	vmov	r3, s15
 801018c:	eefd 7ae8 	vcvt.s32.f32	s15, s17
 8010190:	b21a      	sxth	r2, r3
 8010192:	ee17 3a90 	vmov	r3, s15
 8010196:	bf48      	it	mi
 8010198:	8122      	strhmi	r2, [r4, #8]
 801019a:	b21b      	sxth	r3, r3
 801019c:	bf56      	itet	pl
 801019e:	80e2      	strhpl	r2, [r4, #6]
 80101a0:	80e3      	strhmi	r3, [r4, #6]
 80101a2:	8123      	strhpl	r3, [r4, #8]
 80101a4:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 80101a8:	f9b4 3008 	ldrsh.w	r3, [r4, #8]
 80101ac:	1a9b      	subs	r3, r3, r2
 80101ae:	ee07 3a90 	vmov	s15, r3
 80101b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80101b6:	edc4 7a07 	vstr	s15, [r4, #28]
 80101ba:	e7cc      	b.n	8010156 <_ZN8touchgfx17CWRVectorRenderer17setLinearGradientEffffmPKfPKmffbS4_+0x1ba>
 80101bc:	447ffffe 	.word	0x447ffffe
 80101c0:	44800000 	.word	0x44800000

080101c4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>:
 80101c4:	b510      	push	{r4, lr}
 80101c6:	ed2d 8b02 	vpush	{d8}
 80101ca:	eef0 8a62 	vmov.f32	s17, s5
 80101ce:	2100      	movs	r1, #0
 80101d0:	4604      	mov	r4, r0
 80101d2:	eeb0 8a42 	vmov.f32	s16, s4
 80101d6:	f010 fcb7 	bl	8020b48 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 80101da:	eef0 7a68 	vmov.f32	s15, s17
 80101de:	6823      	ldr	r3, [r4, #0]
 80101e0:	4620      	mov	r0, r4
 80101e2:	689b      	ldr	r3, [r3, #8]
 80101e4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80101e8:	ee17 2a90 	vmov	r2, s15
 80101ec:	eef0 7a48 	vmov.f32	s15, s16
 80101f0:	ecbd 8b02 	vpop	{d8}
 80101f4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80101f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80101fc:	ee17 1a90 	vmov	r1, s15
 8010200:	4718      	bx	r3

08010202 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>:
 8010202:	b510      	push	{r4, lr}
 8010204:	ed2d 8b02 	vpush	{d8}
 8010208:	eef0 8a63 	vmov.f32	s17, s7
 801020c:	2100      	movs	r1, #0
 801020e:	4604      	mov	r4, r0
 8010210:	eeb0 8a43 	vmov.f32	s16, s6
 8010214:	f010 fd5a 	bl	8020ccc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8010218:	eef0 7a68 	vmov.f32	s15, s17
 801021c:	6823      	ldr	r3, [r4, #0]
 801021e:	4620      	mov	r0, r4
 8010220:	689b      	ldr	r3, [r3, #8]
 8010222:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010226:	ee17 2a90 	vmov	r2, s15
 801022a:	eef0 7a48 	vmov.f32	s15, s16
 801022e:	ecbd 8b02 	vpop	{d8}
 8010232:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010236:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801023a:	ee17 1a90 	vmov	r1, s15
 801023e:	4718      	bx	r3

08010240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>:
 8010240:	b513      	push	{r0, r1, r4, lr}
 8010242:	4604      	mov	r4, r0
 8010244:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8010246:	f004 fd28 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 801024a:	eef0 7a60 	vmov.f32	s15, s1
 801024e:	4620      	mov	r0, r4
 8010250:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010254:	ee17 2a90 	vmov	r2, s15
 8010258:	eef0 7a40 	vmov.f32	s15, s0
 801025c:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010260:	ee17 1a90 	vmov	r1, s15
 8010264:	b002      	add	sp, #8
 8010266:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801026a:	f010 bbc7 	b.w	80209fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>

0801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>:
 801026e:	b513      	push	{r0, r1, r4, lr}
 8010270:	4604      	mov	r4, r0
 8010272:	6f40      	ldr	r0, [r0, #116]	@ 0x74
 8010274:	f004 fd11 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010278:	eef0 7a60 	vmov.f32	s15, s1
 801027c:	4620      	mov	r0, r4
 801027e:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010282:	ee17 2a90 	vmov	r2, s15
 8010286:	eef0 7a40 	vmov.f32	s15, s0
 801028a:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 801028e:	ee17 1a90 	vmov	r1, s15
 8010292:	b002      	add	sp, #8
 8010294:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8010298:	f010 bbfd 	b.w	8020a96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>

0801029c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>:
 801029c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801029e:	2400      	movs	r4, #0
 80102a0:	9f07      	ldr	r7, [sp, #28]
 80102a2:	f04f 0e01 	mov.w	lr, #1
 80102a6:	4626      	mov	r6, r4
 80102a8:	e9dd 0c05 	ldrd	r0, ip, [sp, #20]
 80102ac:	4463      	add	r3, ip
 80102ae:	4563      	cmp	r3, ip
 80102b0:	d02d      	beq.n	801030e <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x72>
 80102b2:	f813 5d01 	ldrb.w	r5, [r3, #-1]!
 80102b6:	2d06      	cmp	r5, #6
 80102b8:	d8f9      	bhi.n	80102ae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80102ba:	fa0e f505 	lsl.w	r5, lr, r5
 80102be:	f015 0f66 	tst.w	r5, #102	@ 0x66
 80102c2:	d10d      	bne.n	80102e0 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x44>
 80102c4:	f015 0f10 	tst.w	r5, #16
 80102c8:	d117      	bne.n	80102fa <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5e>
 80102ca:	072d      	lsls	r5, r5, #28
 80102cc:	d5ef      	bpl.n	80102ae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80102ce:	3801      	subs	r0, #1
 80102d0:	b91e      	cbnz	r6, 80102da <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x3e>
 80102d2:	eb07 0580 	add.w	r5, r7, r0, lsl #2
 80102d6:	682d      	ldr	r5, [r5, #0]
 80102d8:	600d      	str	r5, [r1, #0]
 80102da:	b96c      	cbnz	r4, 80102f8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80102dc:	2601      	movs	r6, #1
 80102de:	e7e6      	b.n	80102ae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 80102e0:	b926      	cbnz	r6, 80102ec <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x50>
 80102e2:	eb07 0380 	add.w	r3, r7, r0, lsl #2
 80102e6:	f853 3c08 	ldr.w	r3, [r3, #-8]
 80102ea:	600b      	str	r3, [r1, #0]
 80102ec:	b924      	cbnz	r4, 80102f8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 80102ee:	eb07 0080 	add.w	r0, r7, r0, lsl #2
 80102f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80102f6:	6013      	str	r3, [r2, #0]
 80102f8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80102fa:	3801      	subs	r0, #1
 80102fc:	b91c      	cbnz	r4, 8010306 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x6a>
 80102fe:	eb07 0480 	add.w	r4, r7, r0, lsl #2
 8010302:	6824      	ldr	r4, [r4, #0]
 8010304:	6014      	str	r4, [r2, #0]
 8010306:	2e00      	cmp	r6, #0
 8010308:	d1f6      	bne.n	80102f8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 801030a:	2401      	movs	r4, #1
 801030c:	e7cf      	b.n	80102ae <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x12>
 801030e:	b90e      	cbnz	r6, 8010314 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x78>
 8010310:	2300      	movs	r3, #0
 8010312:	600b      	str	r3, [r1, #0]
 8010314:	2c00      	cmp	r4, #0
 8010316:	d1ef      	bne.n	80102f8 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5c>
 8010318:	2300      	movs	r3, #0
 801031a:	e7ec      	b.n	80102f6 <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf+0x5a>

0801031c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>:
 801031c:	b538      	push	{r3, r4, r5, lr}
 801031e:	ed2d 8b0a 	vpush	{d8-d12}
 8010322:	eef0 ba40 	vmov.f32	s23, s0
 8010326:	4604      	mov	r4, r0
 8010328:	eeb0 ca60 	vmov.f32	s24, s1
 801032c:	460d      	mov	r5, r1
 801032e:	eef0 aa41 	vmov.f32	s21, s2
 8010332:	eeb0 ba61 	vmov.f32	s22, s3
 8010336:	eeb0 9a42 	vmov.f32	s18, s4
 801033a:	eef0 9a62 	vmov.f32	s19, s5
 801033e:	eeb6 aa00 	vmov.f32	s20, #96	@ 0x3f000000  0.5
 8010342:	ee7b 8a29 	vadd.f32	s17, s22, s19
 8010346:	ee3a 8a89 	vadd.f32	s16, s21, s18
 801034a:	ee68 8a8a 	vmul.f32	s17, s17, s20
 801034e:	ee28 8a0a 	vmul.f32	s16, s16, s20
 8010352:	ee3c 0a68 	vsub.f32	s0, s24, s17
 8010356:	ee7b 7ac8 	vsub.f32	s15, s23, s16
 801035a:	ee20 0a00 	vmul.f32	s0, s0, s0
 801035e:	eea7 0aa7 	vfma.f32	s0, s15, s15
 8010362:	f010 fe8b 	bl	802107c <sqrtf>
 8010366:	eeb5 0a40 	vcmp.f32	s0, #0.0
 801036a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801036e:	d12e      	bne.n	80103ce <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xb2>
 8010370:	ee79 7a6a 	vsub.f32	s15, s18, s21
 8010374:	ee39 7acb 	vsub.f32	s14, s19, s22
 8010378:	eeb0 8a6a 	vmov.f32	s16, s21
 801037c:	eef0 8a4b 	vmov.f32	s17, s22
 8010380:	eea7 8a8a 	vfma.f32	s16, s15, s20
 8010384:	eee7 8a0a 	vfma.f32	s17, s14, s20
 8010388:	eea7 8a0a 	vfma.f32	s16, s14, s20
 801038c:	eee7 8aca 	vfms.f32	s17, s15, s20
 8010390:	2d02      	cmp	r5, #2
 8010392:	dc2f      	bgt.n	80103f4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0xd8>
 8010394:	3501      	adds	r5, #1
 8010396:	eef0 1a4b 	vmov.f32	s3, s22
 801039a:	eeb0 1a6a 	vmov.f32	s2, s21
 801039e:	4620      	mov	r0, r4
 80103a0:	4629      	mov	r1, r5
 80103a2:	eef0 2a68 	vmov.f32	s5, s17
 80103a6:	eeb0 2a48 	vmov.f32	s4, s16
 80103aa:	eef0 0a4c 	vmov.f32	s1, s24
 80103ae:	eeb0 0a6b 	vmov.f32	s0, s23
 80103b2:	f7ff ffb3 	bl	801031c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 80103b6:	eef0 0a68 	vmov.f32	s1, s17
 80103ba:	eeb0 0a48 	vmov.f32	s0, s16
 80103be:	4620      	mov	r0, r4
 80103c0:	f7ff ff55 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80103c4:	eeb0 ba68 	vmov.f32	s22, s17
 80103c8:	eef0 aa48 	vmov.f32	s21, s16
 80103cc:	e7b9      	b.n	8010342 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x26>
 80103ce:	ee38 8a6b 	vsub.f32	s16, s16, s23
 80103d2:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 80103d6:	ee78 8acc 	vsub.f32	s17, s17, s24
 80103da:	ee28 7a27 	vmul.f32	s14, s16, s15
 80103de:	ee68 7aa7 	vmul.f32	s15, s17, s15
 80103e2:	ee87 8a00 	vdiv.f32	s16, s14, s0
 80103e6:	eec7 8a80 	vdiv.f32	s17, s15, s0
 80103ea:	ee3b 8a88 	vadd.f32	s16, s23, s16
 80103ee:	ee7c 8a28 	vadd.f32	s17, s24, s17
 80103f2:	e7cd      	b.n	8010390 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi+0x74>
 80103f4:	eef0 0a68 	vmov.f32	s1, s17
 80103f8:	4620      	mov	r0, r4
 80103fa:	eeb0 0a48 	vmov.f32	s0, s16
 80103fe:	f7ff ff36 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010402:	ecbd 8b0a 	vpop	{d8-d12}
 8010406:	bd38      	pop	{r3, r4, r5, pc}

08010408 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>:
 8010408:	b510      	push	{r4, lr}
 801040a:	ed2d 8b0a 	vpush	{d8-d12}
 801040e:	f890 3084 	ldrb.w	r3, [r0, #132]	@ 0x84
 8010412:	4604      	mov	r4, r0
 8010414:	eeb0 ca40 	vmov.f32	s24, s0
 8010418:	2b02      	cmp	r3, #2
 801041a:	eeb0 9a60 	vmov.f32	s18, s1
 801041e:	eef0 9a41 	vmov.f32	s19, s2
 8010422:	eef0 8a61 	vmov.f32	s17, s3
 8010426:	eeb0 ba42 	vmov.f32	s22, s4
 801042a:	eef0 ba62 	vmov.f32	s23, s5
 801042e:	eeb0 aa43 	vmov.f32	s20, s6
 8010432:	eef0 aa63 	vmov.f32	s21, s7
 8010436:	eeb0 8a44 	vmov.f32	s16, s8
 801043a:	eef0 ca64 	vmov.f32	s25, s9
 801043e:	d12c      	bne.n	801049a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x92>
 8010440:	eef0 0a62 	vmov.f32	s1, s5
 8010444:	eeb0 0a42 	vmov.f32	s0, s4
 8010448:	f7ff ff11 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801044c:	ee79 9acb 	vsub.f32	s19, s19, s22
 8010450:	ee7a caec 	vsub.f32	s25, s21, s25
 8010454:	ee78 8aeb 	vsub.f32	s17, s17, s23
 8010458:	ee3a 8a48 	vsub.f32	s16, s20, s16
 801045c:	ee69 9aac 	vmul.f32	s19, s19, s25
 8010460:	ee28 8a88 	vmul.f32	s16, s17, s16
 8010464:	eef4 9ac8 	vcmpe.f32	s19, s16
 8010468:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801046c:	db0f      	blt.n	801048e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>
 801046e:	2101      	movs	r1, #1
 8010470:	eef0 2a6a 	vmov.f32	s5, s21
 8010474:	eeb0 2a4a 	vmov.f32	s4, s20
 8010478:	4620      	mov	r0, r4
 801047a:	eef0 1a6b 	vmov.f32	s3, s23
 801047e:	eeb0 1a4b 	vmov.f32	s2, s22
 8010482:	eef0 0a49 	vmov.f32	s1, s18
 8010486:	eeb0 0a4c 	vmov.f32	s0, s24
 801048a:	f7ff ff47 	bl	801031c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawLineJoinRoundEffffffi>
 801048e:	eef0 0a6a 	vmov.f32	s1, s21
 8010492:	4620      	mov	r0, r4
 8010494:	eeb0 0a4a 	vmov.f32	s0, s20
 8010498:	e035      	b.n	8010506 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0xfe>
 801049a:	2b01      	cmp	r3, #1
 801049c:	d138      	bne.n	8010510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 801049e:	ee31 4ae2 	vsub.f32	s8, s3, s5
 80104a2:	ee33 6a48 	vsub.f32	s12, s6, s16
 80104a6:	ee71 7a42 	vsub.f32	s15, s2, s4
 80104aa:	ee73 6ae4 	vsub.f32	s13, s7, s9
 80104ae:	ee26 7a44 	vnmul.f32	s14, s12, s8
 80104b2:	eea7 7aa6 	vfma.f32	s14, s15, s13
 80104b6:	eeb5 7a40 	vcmp.f32	s14, #0.0
 80104ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80104be:	d027      	beq.n	8010510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 80104c0:	ee28 8a63 	vnmul.f32	s16, s16, s7
 80104c4:	ee61 8ac2 	vnmul.f32	s17, s3, s4
 80104c8:	eea4 8a83 	vfma.f32	s16, s9, s6
 80104cc:	eee1 8a22 	vfma.f32	s17, s2, s5
 80104d0:	ee68 7a67 	vnmul.f32	s15, s16, s15
 80104d4:	ee28 8a44 	vnmul.f32	s16, s16, s8
 80104d8:	eee6 7a28 	vfma.f32	s15, s12, s17
 80104dc:	eea6 8aa8 	vfma.f32	s16, s13, s17
 80104e0:	ee87 0a87 	vdiv.f32	s0, s15, s14
 80104e4:	edd0 7a20 	vldr	s15, [r0, #128]	@ 0x80
 80104e8:	eec8 0a07 	vdiv.f32	s1, s16, s14
 80104ec:	ee3c ca40 	vsub.f32	s24, s24, s0
 80104f0:	ee39 9a60 	vsub.f32	s18, s18, s1
 80104f4:	ee29 9a09 	vmul.f32	s18, s18, s18
 80104f8:	eeac 9a0c 	vfma.f32	s18, s24, s24
 80104fc:	eef4 7ac9 	vcmpe.f32	s15, s18
 8010500:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010504:	db04      	blt.n	8010510 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x108>
 8010506:	f7ff feb2 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801050a:	ecbd 8b0a 	vpop	{d8-d12}
 801050e:	bd10      	pop	{r4, pc}
 8010510:	eef0 0a6b 	vmov.f32	s1, s23
 8010514:	4620      	mov	r0, r4
 8010516:	eeb0 0a4b 	vmov.f32	s0, s22
 801051a:	f7ff fea8 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801051e:	e7b6      	b.n	801048e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff+0x86>

08010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>:
 8010520:	b510      	push	{r4, lr}
 8010522:	ed2d 8b0c 	vpush	{d8-d13}
 8010526:	f890 3085 	ldrb.w	r3, [r0, #133]	@ 0x85
 801052a:	4604      	mov	r4, r0
 801052c:	eeb0 9a40 	vmov.f32	s18, s0
 8010530:	eef0 9a60 	vmov.f32	s19, s1
 8010534:	eef0 aa41 	vmov.f32	s21, s2
 8010538:	eeb0 ba61 	vmov.f32	s22, s3
 801053c:	b933      	cbnz	r3, 801054c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x2c>
 801053e:	f7ff fe96 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010542:	eef0 0a4b 	vmov.f32	s1, s22
 8010546:	eeb0 0a6a 	vmov.f32	s0, s21
 801054a:	e015      	b.n	8010578 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x58>
 801054c:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8010550:	2b02      	cmp	r3, #2
 8010552:	ee71 8a40 	vsub.f32	s17, s2, s0
 8010556:	ee31 8ae0 	vsub.f32	s16, s3, s1
 801055a:	ee68 8aa7 	vmul.f32	s17, s17, s15
 801055e:	ee28 8a27 	vmul.f32	s16, s16, s15
 8010562:	d10f      	bne.n	8010584 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x64>
 8010564:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010568:	ee30 0a08 	vadd.f32	s0, s0, s16
 801056c:	f7ff fe7f 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010570:	ee7b 0a68 	vsub.f32	s1, s22, s17
 8010574:	ee3a 0a88 	vadd.f32	s0, s21, s16
 8010578:	4620      	mov	r0, r4
 801057a:	f7ff fe78 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801057e:	ecbd 8b0c 	vpop	{d8-d13}
 8010582:	bd10      	pop	{r4, pc}
 8010584:	f7ff fe73 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010588:	eef0 0a69 	vmov.f32	s1, s19
 801058c:	eeb0 0a49 	vmov.f32	s0, s18
 8010590:	eddf 7a4b 	vldr	s15, [pc, #300]	@ 80106c0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a0>
 8010594:	eeb1 aa68 	vneg.f32	s20, s17
 8010598:	eddf ba4a 	vldr	s23, [pc, #296]	@ 80106c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a4>
 801059c:	eee8 0a27 	vfma.f32	s1, s16, s15
 80105a0:	4620      	mov	r0, r4
 80105a2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80105a6:	ed9f ca48 	vldr	s24, [pc, #288]	@ 80106c8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1a8>
 80105aa:	eddf ca48 	vldr	s25, [pc, #288]	@ 80106cc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1ac>
 80105ae:	ed9f da48 	vldr	s26, [pc, #288]	@ 80106d0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b0>
 80105b2:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80105b6:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80105ba:	f7ff fe58 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80105be:	eef0 0a69 	vmov.f32	s1, s19
 80105c2:	eeb0 0a49 	vmov.f32	s0, s18
 80105c6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 80106d4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b4>
 80105ca:	4620      	mov	r0, r4
 80105cc:	eee8 0a27 	vfma.f32	s1, s16, s15
 80105d0:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80105d4:	eeea 0a0c 	vfma.f32	s1, s20, s24
 80105d8:	eea8 0a0c 	vfma.f32	s0, s16, s24
 80105dc:	f7ff fe47 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80105e0:	eef0 0a69 	vmov.f32	s1, s19
 80105e4:	eeb0 0a49 	vmov.f32	s0, s18
 80105e8:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 80106d8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1b8>
 80105ec:	4620      	mov	r0, r4
 80105ee:	eee8 0a27 	vfma.f32	s1, s16, s15
 80105f2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80105f6:	eeea 0a2c 	vfma.f32	s1, s20, s25
 80105fa:	eea8 0a2c 	vfma.f32	s0, s16, s25
 80105fe:	f7ff fe36 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010602:	eef0 0a69 	vmov.f32	s1, s19
 8010606:	eeb0 0a49 	vmov.f32	s0, s18
 801060a:	eddf 7a34 	vldr	s15, [pc, #208]	@ 80106dc <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1bc>
 801060e:	4620      	mov	r0, r4
 8010610:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010614:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010618:	eeea 0a0d 	vfma.f32	s1, s20, s26
 801061c:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010620:	f7ff fe25 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 8010624:	ee79 0a88 	vadd.f32	s1, s19, s16
 8010628:	ee39 0a28 	vadd.f32	s0, s18, s17
 801062c:	4620      	mov	r0, r4
 801062e:	ee70 0ae8 	vsub.f32	s1, s1, s17
 8010632:	ee30 0a08 	vadd.f32	s0, s0, s16
 8010636:	f7ff fe1a 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801063a:	eef0 0a69 	vmov.f32	s1, s19
 801063e:	eeb0 0a49 	vmov.f32	s0, s18
 8010642:	eddf 7a27 	vldr	s15, [pc, #156]	@ 80106e0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c0>
 8010646:	4620      	mov	r0, r4
 8010648:	eee8 0a27 	vfma.f32	s1, s16, s15
 801064c:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010650:	eeea 0a0d 	vfma.f32	s1, s20, s26
 8010654:	eea8 0a0d 	vfma.f32	s0, s16, s26
 8010658:	f7ff fe09 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801065c:	eef0 0a69 	vmov.f32	s1, s19
 8010660:	eeb0 0a49 	vmov.f32	s0, s18
 8010664:	eddf 7a1f 	vldr	s15, [pc, #124]	@ 80106e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c4>
 8010668:	4620      	mov	r0, r4
 801066a:	eee8 0a27 	vfma.f32	s1, s16, s15
 801066e:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010672:	eeea 0a2c 	vfma.f32	s1, s20, s25
 8010676:	eea8 0a2c 	vfma.f32	s0, s16, s25
 801067a:	f7ff fdf8 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 801067e:	eef0 0a69 	vmov.f32	s1, s19
 8010682:	eeb0 0a49 	vmov.f32	s0, s18
 8010686:	eddf 7a18 	vldr	s15, [pc, #96]	@ 80106e8 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1c8>
 801068a:	4620      	mov	r0, r4
 801068c:	eee8 0a27 	vfma.f32	s1, s16, s15
 8010690:	eea8 0aa7 	vfma.f32	s0, s17, s15
 8010694:	eeea 0a0c 	vfma.f32	s1, s20, s24
 8010698:	eea8 0a0c 	vfma.f32	s0, s16, s24
 801069c:	f7ff fde7 	bl	801026e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19lineToWithTransformEff>
 80106a0:	eef0 0a69 	vmov.f32	s1, s19
 80106a4:	eeb0 0a49 	vmov.f32	s0, s18
 80106a8:	eddf 7a10 	vldr	s15, [pc, #64]	@ 80106ec <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1cc>
 80106ac:	4620      	mov	r0, r4
 80106ae:	eee8 0a27 	vfma.f32	s1, s16, s15
 80106b2:	eea8 0aa7 	vfma.f32	s0, s17, s15
 80106b6:	eeea 0a2b 	vfma.f32	s1, s20, s23
 80106ba:	eea8 0a2b 	vfma.f32	s0, s16, s23
 80106be:	e73e      	b.n	801053e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff+0x1e>
 80106c0:	3d23d70a 	.word	0x3d23d70a
 80106c4:	3e8f5c29 	.word	0x3e8f5c29
 80106c8:	3f19999a 	.word	0x3f19999a
 80106cc:	3f4ccccd 	.word	0x3f4ccccd
 80106d0:	3f75c28f 	.word	0x3f75c28f
 80106d4:	3e4ccccd 	.word	0x3e4ccccd
 80106d8:	3ecccccd 	.word	0x3ecccccd
 80106dc:	3f3851ec 	.word	0x3f3851ec
 80106e0:	3fa3d70a 	.word	0x3fa3d70a
 80106e4:	3fcccccd 	.word	0x3fcccccd
 80106e8:	3fe66666 	.word	0x3fe66666
 80106ec:	3ffae148 	.word	0x3ffae148

080106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>:
 80106f0:	b570      	push	{r4, r5, r6, lr}
 80106f2:	ed2d 8b06 	vpush	{d8-d10}
 80106f6:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 80106fa:	eef0 aa40 	vmov.f32	s21, s0
 80106fe:	ed90 9a22 	vldr	s18, [r0, #136]	@ 0x88
 8010702:	4604      	mov	r4, r0
 8010704:	ee30 8ac8 	vsub.f32	s16, s1, s16
 8010708:	ee30 9a49 	vsub.f32	s18, s0, s18
 801070c:	eeb0 aa60 	vmov.f32	s20, s1
 8010710:	ee28 0a08 	vmul.f32	s0, s16, s16
 8010714:	eea9 0a09 	vfma.f32	s0, s18, s18
 8010718:	f010 fcb0 	bl	802107c <sqrtf>
 801071c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8010720:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010724:	dd36      	ble.n	8010794 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xa4>
 8010726:	edd4 7a1f 	vldr	s15, [r4, #124]	@ 0x7c
 801072a:	2600      	movs	r6, #0
 801072c:	edd4 0a23 	vldr	s1, [r4, #140]	@ 0x8c
 8010730:	eec0 6a27 	vdiv.f32	s13, s0, s15
 8010734:	f894 5078 	ldrb.w	r5, [r4, #120]	@ 0x78
 8010738:	ed94 0a22 	vldr	s0, [r4, #136]	@ 0x88
 801073c:	f884 6079 	strb.w	r6, [r4, #121]	@ 0x79
 8010740:	eec8 8a26 	vdiv.f32	s17, s16, s13
 8010744:	ee89 8a26 	vdiv.f32	s16, s18, s13
 8010748:	ee70 9a28 	vadd.f32	s19, s0, s17
 801074c:	ee78 8aaa 	vadd.f32	s17, s17, s21
 8010750:	ee30 9ac8 	vsub.f32	s18, s1, s16
 8010754:	ee3a 8a48 	vsub.f32	s16, s20, s16
 8010758:	b1fd      	cbz	r5, 801079a <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xaa>
 801075a:	edc4 9a24 	vstr	s19, [r4, #144]	@ 0x90
 801075e:	eef0 0a49 	vmov.f32	s1, s18
 8010762:	ed84 9a25 	vstr	s18, [r4, #148]	@ 0x94
 8010766:	eeb0 0a69 	vmov.f32	s0, s19
 801076a:	edc4 8a26 	vstr	s17, [r4, #152]	@ 0x98
 801076e:	4620      	mov	r0, r4
 8010770:	ed84 8a27 	vstr	s16, [r4, #156]	@ 0x9c
 8010774:	f7ff fd64 	bl	8010240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010778:	f884 6078 	strb.w	r6, [r4, #120]	@ 0x78
 801077c:	edc4 9a28 	vstr	s19, [r4, #160]	@ 0xa0
 8010780:	ed84 9a29 	vstr	s18, [r4, #164]	@ 0xa4
 8010784:	edc4 8a2a 	vstr	s17, [r4, #168]	@ 0xa8
 8010788:	ed84 8a2b 	vstr	s16, [r4, #172]	@ 0xac
 801078c:	edc4 aa22 	vstr	s21, [r4, #136]	@ 0x88
 8010790:	ed84 aa23 	vstr	s20, [r4, #140]	@ 0x8c
 8010794:	ecbd 8b06 	vpop	{d8-d10}
 8010798:	bd70      	pop	{r4, r5, r6, pc}
 801079a:	f894 307a 	ldrb.w	r3, [r4, #122]	@ 0x7a
 801079e:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 80107a2:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 80107a6:	b16b      	cbz	r3, 80107c4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0xd4>
 80107a8:	eef0 1a49 	vmov.f32	s3, s18
 80107ac:	4620      	mov	r0, r4
 80107ae:	eeb0 1a69 	vmov.f32	s2, s19
 80107b2:	eef0 0a62 	vmov.f32	s1, s5
 80107b6:	eeb0 0a42 	vmov.f32	s0, s4
 80107ba:	f7ff feb1 	bl	8010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 80107be:	f884 507a 	strb.w	r5, [r4, #122]	@ 0x7a
 80107c2:	e7db      	b.n	801077c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>
 80107c4:	eef0 4a48 	vmov.f32	s9, s16
 80107c8:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80107cc:	eeb0 4a68 	vmov.f32	s8, s17
 80107d0:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80107d4:	eef0 3a49 	vmov.f32	s7, s18
 80107d8:	4620      	mov	r0, r4
 80107da:	eeb0 3a69 	vmov.f32	s6, s19
 80107de:	f7ff fe13 	bl	8010408 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80107e2:	e7cb      	b.n	801077c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff+0x8c>

080107e4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_>:
 80107e4:	ee07 2a90 	vmov	s15, r2
 80107e8:	ee07 1a10 	vmov	s14, r1
 80107ec:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80107f0:	eddf 7a04 	vldr	s15, [pc, #16]	@ 8010804 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas6lineToENS_7CWRUtil2Q5ES3_+0x20>
 80107f4:	eeb8 0ac7 	vcvt.f32.s32	s0, s14
 80107f8:	ee60 0aa7 	vmul.f32	s1, s1, s15
 80107fc:	ee20 0a27 	vmul.f32	s0, s0, s15
 8010800:	f7ff bf76 	b.w	80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010804:	3d000000 	.word	0x3d000000

08010808 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>:
 8010808:	b538      	push	{r3, r4, r5, lr}
 801080a:	ed2d 8b02 	vpush	{d8}
 801080e:	f890 5079 	ldrb.w	r5, [r0, #121]	@ 0x79
 8010812:	4604      	mov	r4, r0
 8010814:	b31d      	cbz	r5, 801085e <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv+0x56>
 8010816:	edd0 7a1f 	vldr	s15, [r0, #124]	@ 0x7c
 801081a:	ed90 8a23 	vldr	s16, [r0, #140]	@ 0x8c
 801081e:	ed90 0a22 	vldr	s0, [r0, #136]	@ 0x88
 8010822:	ee78 8a67 	vsub.f32	s17, s16, s15
 8010826:	ee38 8a27 	vadd.f32	s16, s16, s15
 801082a:	eef0 0a68 	vmov.f32	s1, s17
 801082e:	f7ff fd07 	bl	8010240 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas19moveToWithTransformEff>
 8010832:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 8010836:	eef0 1a48 	vmov.f32	s3, s16
 801083a:	4620      	mov	r0, r4
 801083c:	eeb0 0a41 	vmov.f32	s0, s2
 8010840:	eef0 0a68 	vmov.f32	s1, s17
 8010844:	f7ff fe6c 	bl	8010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 8010848:	ed94 1a22 	vldr	s2, [r4, #136]	@ 0x88
 801084c:	eef0 1a68 	vmov.f32	s3, s17
 8010850:	4620      	mov	r0, r4
 8010852:	eef0 0a48 	vmov.f32	s1, s16
 8010856:	eeb0 0a41 	vmov.f32	s0, s2
 801085a:	f7ff fe61 	bl	8010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
 801085e:	4628      	mov	r0, r5
 8010860:	ecbd 8b02 	vpop	{d8}
 8010864:	bd38      	pop	{r3, r4, r5, pc}

08010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>:
 8010866:	b510      	push	{r4, lr}
 8010868:	ed2d 8b02 	vpush	{d8}
 801086c:	4604      	mov	r4, r0
 801086e:	eeb0 8a40 	vmov.f32	s16, s0
 8010872:	eef0 8a60 	vmov.f32	s17, s1
 8010876:	f7ff ffc7 	bl	8010808 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 801087a:	b9d0      	cbnz	r0, 80108b2 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x4c>
 801087c:	4620      	mov	r0, r4
 801087e:	edd4 4a27 	vldr	s9, [r4, #156]	@ 0x9c
 8010882:	ed94 4a26 	vldr	s8, [r4, #152]	@ 0x98
 8010886:	eef0 0a68 	vmov.f32	s1, s17
 801088a:	edd4 3a25 	vldr	s7, [r4, #148]	@ 0x94
 801088e:	eeb0 0a48 	vmov.f32	s0, s16
 8010892:	ed94 3a24 	vldr	s6, [r4, #144]	@ 0x90
 8010896:	edd4 2a2b 	vldr	s5, [r4, #172]	@ 0xac
 801089a:	ed94 2a2a 	vldr	s4, [r4, #168]	@ 0xa8
 801089e:	edd4 1a29 	vldr	s3, [r4, #164]	@ 0xa4
 80108a2:	ed94 1a28 	vldr	s2, [r4, #160]	@ 0xa0
 80108a6:	f7ff fdaf 	bl	8010408 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas18strokeDrawLineJoinEffffffffff>
 80108aa:	2001      	movs	r0, #1
 80108ac:	ecbd 8b02 	vpop	{d8}
 80108b0:	bd10      	pop	{r4, pc}
 80108b2:	2000      	movs	r0, #0
 80108b4:	e7fa      	b.n	80108ac <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff+0x46>

080108b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>:
 80108b6:	edd0 1a25 	vldr	s3, [r0, #148]	@ 0x94
 80108ba:	ed90 1a24 	vldr	s2, [r0, #144]	@ 0x90
 80108be:	edd0 0a2b 	vldr	s1, [r0, #172]	@ 0xac
 80108c2:	ed90 0a2a 	vldr	s0, [r0, #168]	@ 0xa8
 80108c6:	f7ff be2b 	b.w	8010520 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas17strokeDrawLineCapEffff>
	...

080108cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>:
 80108cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80108d0:	b089      	sub	sp, #36	@ 0x24
 80108d2:	461c      	mov	r4, r3
 80108d4:	4682      	mov	sl, r0
 80108d6:	4615      	mov	r5, r2
 80108d8:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80108dc:	f10d 0820 	add.w	r8, sp, #32
 80108e0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80108e2:	9304      	str	r3, [sp, #16]
 80108e4:	2300      	movs	r3, #0
 80108e6:	9105      	str	r1, [sp, #20]
 80108e8:	9306      	str	r3, [sp, #24]
 80108ea:	f848 3d04 	str.w	r3, [r8, #-4]!
 80108ee:	9b04      	ldr	r3, [sp, #16]
 80108f0:	e9dd 9712 	ldrd	r9, r7, [sp, #72]	@ 0x48
 80108f4:	f886 307a 	strb.w	r3, [r6, #122]	@ 0x7a
 80108f8:	9b05      	ldr	r3, [sp, #20]
 80108fa:	429d      	cmp	r5, r3
 80108fc:	d96d      	bls.n	80109da <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x10e>
 80108fe:	3d01      	subs	r5, #1
 8010900:	f819 3005 	ldrb.w	r3, [r9, r5]
 8010904:	2b06      	cmp	r3, #6
 8010906:	d8f7      	bhi.n	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010908:	a201      	add	r2, pc, #4	@ (adr r2, 8010910 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x44>)
 801090a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801090e:	bf00      	nop
 8010910:	0801092f 	.word	0x0801092f
 8010914:	080108f9 	.word	0x080108f9
 8010918:	0801092d 	.word	0x0801092d
 801091c:	08010951 	.word	0x08010951
 8010920:	08010951 	.word	0x08010951
 8010924:	08010955 	.word	0x08010955
 8010928:	08010995 	.word	0x08010995
 801092c:	3c02      	subs	r4, #2
 801092e:	4650      	mov	r0, sl
 8010930:	9400      	str	r4, [sp, #0]
 8010932:	462b      	mov	r3, r5
 8010934:	4642      	mov	r2, r8
 8010936:	a906      	add	r1, sp, #24
 8010938:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801093c:	f7ff fcae 	bl	801029c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010940:	eddd 0a07 	vldr	s1, [sp, #28]
 8010944:	ed9d 0a06 	vldr	s0, [sp, #24]
 8010948:	4630      	mov	r0, r6
 801094a:	f7ff fed1 	bl	80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 801094e:	e7d3      	b.n	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010950:	3c01      	subs	r4, #1
 8010952:	e7ec      	b.n	801092e <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x62>
 8010954:	f1a4 0b04 	sub.w	fp, r4, #4
 8010958:	3c02      	subs	r4, #2
 801095a:	4650      	mov	r0, sl
 801095c:	462b      	mov	r3, r5
 801095e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 8010962:	f8cd b000 	str.w	fp, [sp]
 8010966:	4642      	mov	r2, r8
 8010968:	a906      	add	r1, sp, #24
 801096a:	e9cd 9701 	strd	r9, r7, [sp, #4]
 801096e:	f7ff fc95 	bl	801029c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 8010972:	eddd 2a07 	vldr	s5, [sp, #28]
 8010976:	ed9d 2a06 	vldr	s4, [sp, #24]
 801097a:	4630      	mov	r0, r6
 801097c:	ed54 1a01 	vldr	s3, [r4, #-4]
 8010980:	ed14 1a02 	vldr	s2, [r4, #-8]
 8010984:	edd4 0a01 	vldr	s1, [r4, #4]
 8010988:	ed94 0a00 	vldr	s0, [r4]
 801098c:	f7ff fc1a 	bl	80101c4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010990:	465c      	mov	r4, fp
 8010992:	e7b1      	b.n	80108f8 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x2c>
 8010994:	f1a4 0b06 	sub.w	fp, r4, #6
 8010998:	3c02      	subs	r4, #2
 801099a:	4650      	mov	r0, sl
 801099c:	462b      	mov	r3, r5
 801099e:	eb07 0484 	add.w	r4, r7, r4, lsl #2
 80109a2:	f8cd b000 	str.w	fp, [sp]
 80109a6:	4642      	mov	r2, r8
 80109a8:	a906      	add	r1, sp, #24
 80109aa:	e9cd 9701 	strd	r9, r7, [sp, #4]
 80109ae:	f7ff fc75 	bl	801029c <_ZNK8touchgfx17CWRVectorRenderer22getPreviousDestinationERfS1_mmPKhPKf>
 80109b2:	eddd 3a07 	vldr	s7, [sp, #28]
 80109b6:	ed9d 3a06 	vldr	s6, [sp, #24]
 80109ba:	4630      	mov	r0, r6
 80109bc:	ed54 2a03 	vldr	s5, [r4, #-12]
 80109c0:	ed14 2a04 	vldr	s4, [r4, #-16]
 80109c4:	ed54 1a01 	vldr	s3, [r4, #-4]
 80109c8:	ed14 1a02 	vldr	s2, [r4, #-8]
 80109cc:	edd4 0a01 	vldr	s1, [r4, #4]
 80109d0:	ed94 0a00 	vldr	s0, [r4]
 80109d4:	f7ff fc15 	bl	8010202 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 80109d8:	e7da      	b.n	8010990 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0xc4>
 80109da:	9b04      	ldr	r3, [sp, #16]
 80109dc:	b113      	cbz	r3, 80109e4 <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE+0x118>
 80109de:	4630      	mov	r0, r6
 80109e0:	f7ff ff69 	bl	80108b6 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas16drawFinalLineCapEv>
 80109e4:	b009      	add	sp, #36	@ 0x24
 80109e6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80109ea:	bf00      	nop

080109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>:
 80109ec:	eef0 7a60 	vmov.f32	s15, s1
 80109f0:	6803      	ldr	r3, [r0, #0]
 80109f2:	689b      	ldr	r3, [r3, #8]
 80109f4:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 80109f8:	ee17 2a90 	vmov	r2, s15
 80109fc:	eef0 7a40 	vmov.f32	s15, s0
 8010a00:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010a04:	ee17 1a90 	vmov	r1, s15
 8010a08:	4718      	bx	r3
	...

08010a0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>:
 8010a0c:	4b04      	ldr	r3, [pc, #16]	@ (8010a20 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev+0x14>)
 8010a0e:	b510      	push	{r4, lr}
 8010a10:	4604      	mov	r4, r0
 8010a12:	f840 3b14 	str.w	r3, [r0], #20
 8010a16:	f000 fe71 	bl	80116fc <_ZN8touchgfx7OutlineD1Ev>
 8010a1a:	4620      	mov	r0, r4
 8010a1c:	bd10      	pop	{r4, pc}
 8010a1e:	bf00      	nop
 8010a20:	080256c8 	.word	0x080256c8

08010a24 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>:
 8010a24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a28:	ed2d 8b04 	vpush	{d8-d9}
 8010a2c:	edd0 7a0c 	vldr	s15, [r0, #48]	@ 0x30
 8010a30:	b0b5      	sub	sp, #212	@ 0xd4
 8010a32:	4605      	mov	r5, r0
 8010a34:	468b      	mov	fp, r1
 8010a36:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a3a:	9206      	str	r2, [sp, #24]
 8010a3c:	461e      	mov	r6, r3
 8010a3e:	2400      	movs	r4, #0
 8010a40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a44:	f240 814f 	bls.w	8010ce6 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c2>
 8010a48:	23ff      	movs	r3, #255	@ 0xff
 8010a4a:	1d02      	adds	r2, r0, #4
 8010a4c:	ed9f 9aa7 	vldr	s18, [pc, #668]	@ 8010cec <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2c8>
 8010a50:	f04f 0800 	mov.w	r8, #0
 8010a54:	9300      	str	r3, [sp, #0]
 8010a56:	af08      	add	r7, sp, #32
 8010a58:	6981      	ldr	r1, [r0, #24]
 8010a5a:	a808      	add	r0, sp, #32
 8010a5c:	9b43      	ldr	r3, [sp, #268]	@ 0x10c
 8010a5e:	eef0 9a49 	vmov.f32	s19, s18
 8010a62:	f00f fe7f 	bl	8020764 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010a66:	edd5 7a0c 	vldr	s15, [r5, #48]	@ 0x30
 8010a6a:	4ba1      	ldr	r3, [pc, #644]	@ (8010cf0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2cc>)
 8010a6c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8010a70:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8010a74:	2201      	movs	r2, #1
 8010a76:	9308      	str	r3, [sp, #32]
 8010a78:	f105 0334 	add.w	r3, r5, #52	@ 0x34
 8010a7c:	edd5 6a08 	vldr	s13, [r5, #32]
 8010a80:	eeb0 8a49 	vmov.f32	s16, s18
 8010a84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8010a88:	9325      	str	r3, [sp, #148]	@ 0x94
 8010a8a:	f04f 0300 	mov.w	r3, #0
 8010a8e:	f88d 2099 	strb.w	r2, [sp, #153]	@ 0x99
 8010a92:	7f6a      	ldrb	r2, [r5, #29]
 8010a94:	eef0 8a49 	vmov.f32	s17, s18
 8010a98:	bf48      	it	mi
 8010a9a:	eef1 7a67 	vnegmi.f32	s15, s15
 8010a9e:	f88d 3098 	strb.w	r3, [sp, #152]	@ 0x98
 8010aa2:	f88d 309a 	strb.w	r3, [sp, #154]	@ 0x9a
 8010aa6:	46c1      	mov	r9, r8
 8010aa8:	f88d 3064 	strb.w	r3, [sp, #100]	@ 0x64
 8010aac:	f04f 0a01 	mov.w	sl, #1
 8010ab0:	ee67 7a87 	vmul.f32	s15, s15, s14
 8010ab4:	7fab      	ldrb	r3, [r5, #30]
 8010ab6:	942a      	str	r4, [sp, #168]	@ 0xa8
 8010ab8:	435a      	muls	r2, r3
 8010aba:	f895 0024 	ldrb.w	r0, [r5, #36]	@ 0x24
 8010abe:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8010ac2:	edcd 7a27 	vstr	s15, [sp, #156]	@ 0x9c
 8010ac6:	1c53      	adds	r3, r2, #1
 8010ac8:	942b      	str	r4, [sp, #172]	@ 0xac
 8010aca:	942c      	str	r4, [sp, #176]	@ 0xb0
 8010acc:	ee27 7a26 	vmul.f32	s14, s14, s13
 8010ad0:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 8010ad4:	942d      	str	r4, [sp, #180]	@ 0xb4
 8010ad6:	942e      	str	r4, [sp, #184]	@ 0xb8
 8010ad8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 8010adc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010ae0:	942f      	str	r4, [sp, #188]	@ 0xbc
 8010ae2:	9430      	str	r4, [sp, #192]	@ 0xc0
 8010ae4:	9431      	str	r4, [sp, #196]	@ 0xc4
 8010ae6:	9432      	str	r4, [sp, #200]	@ 0xc8
 8010ae8:	9433      	str	r4, [sp, #204]	@ 0xcc
 8010aea:	4644      	mov	r4, r8
 8010aec:	f895 1025 	ldrb.w	r1, [r5, #37]	@ 0x25
 8010af0:	edcd 7a28 	vstr	s15, [sp, #160]	@ 0xa0
 8010af4:	f88d 00a4 	strb.w	r0, [sp, #164]	@ 0xa4
 8010af8:	f88d 10a5 	strb.w	r1, [sp, #165]	@ 0xa5
 8010afc:	f88d 30a6 	strb.w	r3, [sp, #166]	@ 0xa6
 8010b00:	9b06      	ldr	r3, [sp, #24]
 8010b02:	454b      	cmp	r3, r9
 8010b04:	f000 80cc 	beq.w	8010ca0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x27c>
 8010b08:	f109 0301 	add.w	r3, r9, #1
 8010b0c:	9305      	str	r3, [sp, #20]
 8010b0e:	f81b 3009 	ldrb.w	r3, [fp, r9]
 8010b12:	2b06      	cmp	r3, #6
 8010b14:	d839      	bhi.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010b16:	e8df f003 	tbb	[pc, r3]
 8010b1a:	3b04      	.short	0x3b04
 8010b1c:	817c6f60 	.word	0x817c6f60
 8010b20:	a0          	.byte	0xa0
 8010b21:	00          	.byte	0x00
 8010b22:	45c1      	cmp	r9, r8
 8010b24:	d92b      	bls.n	8010b7e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010b26:	eef0 0a49 	vmov.f32	s1, s18
 8010b2a:	4638      	mov	r0, r7
 8010b2c:	eeb0 0a69 	vmov.f32	s0, s19
 8010b30:	f7ff fdde 	bl	80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010b34:	4638      	mov	r0, r7
 8010b36:	f7ff fe67 	bl	8010808 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010b3a:	4681      	mov	r9, r0
 8010b3c:	b9f8      	cbnz	r0, 8010b7e <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x15a>
 8010b3e:	eef0 0a49 	vmov.f32	s1, s18
 8010b42:	4638      	mov	r0, r7
 8010b44:	eeb0 0a69 	vmov.f32	s0, s19
 8010b48:	f7ff fe8d 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010b4c:	4628      	mov	r0, r5
 8010b4e:	4623      	mov	r3, r4
 8010b50:	9a05      	ldr	r2, [sp, #20]
 8010b52:	4641      	mov	r1, r8
 8010b54:	edcd 9a2a 	vstr	s19, [sp, #168]	@ 0xa8
 8010b58:	ed8d 9a2b 	vstr	s18, [sp, #172]	@ 0xac
 8010b5c:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010b60:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010b64:	e9cd 9702 	strd	r9, r7, [sp, #8]
 8010b68:	e9cd b600 	strd	fp, r6, [sp]
 8010b6c:	f7ff feae 	bl	80108cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010b70:	eef0 0a49 	vmov.f32	s1, s18
 8010b74:	eeb0 0a69 	vmov.f32	s0, s19
 8010b78:	4638      	mov	r0, r7
 8010b7a:	f7ff fe74 	bl	8010866 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas11strokeCloseEff>
 8010b7e:	eeb0 8a49 	vmov.f32	s16, s18
 8010b82:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8010b86:	eef0 8a69 	vmov.f32	s17, s19
 8010b8a:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8010b8e:	e7b7      	b.n	8010b00 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0xdc>
 8010b90:	45c1      	cmp	r9, r8
 8010b92:	d90d      	bls.n	8010bb0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8010b94:	4638      	mov	r0, r7
 8010b96:	f7ff fe37 	bl	8010808 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010b9a:	b948      	cbnz	r0, 8010bb0 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x18c>
 8010b9c:	4623      	mov	r3, r4
 8010b9e:	464a      	mov	r2, r9
 8010ba0:	4641      	mov	r1, r8
 8010ba2:	4628      	mov	r0, r5
 8010ba4:	e9cd a702 	strd	sl, r7, [sp, #8]
 8010ba8:	e9cd b600 	strd	fp, r6, [sp]
 8010bac:	f7ff fe8e 	bl	80108cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010bb0:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010bb4:	f88d a098 	strb.w	sl, [sp, #152]	@ 0x98
 8010bb8:	f88d a099 	strb.w	sl, [sp, #153]	@ 0x99
 8010bbc:	3402      	adds	r4, #2
 8010bbe:	edd3 8a00 	vldr	s17, [r3]
 8010bc2:	46c8      	mov	r8, r9
 8010bc4:	ed93 8a01 	vldr	s16, [r3, #4]
 8010bc8:	edcd 8a2a 	vstr	s17, [sp, #168]	@ 0xa8
 8010bcc:	eef0 9a68 	vmov.f32	s19, s17
 8010bd0:	ed8d 8a2b 	vstr	s16, [sp, #172]	@ 0xac
 8010bd4:	eeb0 9a48 	vmov.f32	s18, s16
 8010bd8:	e7d7      	b.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010bda:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010bde:	4638      	mov	r0, r7
 8010be0:	3402      	adds	r4, #2
 8010be2:	edd3 8a00 	vldr	s17, [r3]
 8010be6:	ed93 8a01 	vldr	s16, [r3, #4]
 8010bea:	eeb0 0a68 	vmov.f32	s0, s17
 8010bee:	eef0 0a48 	vmov.f32	s1, s16
 8010bf2:	f7ff fd7d 	bl	80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010bf6:	e7c8      	b.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010bf8:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010bfc:	edd3 8a00 	vldr	s17, [r3]
 8010c00:	eef0 0a48 	vmov.f32	s1, s16
 8010c04:	4638      	mov	r0, r7
 8010c06:	eeb0 0a68 	vmov.f32	s0, s17
 8010c0a:	3401      	adds	r4, #1
 8010c0c:	f7ff fd70 	bl	80106f0 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas12strokeLineToEff>
 8010c10:	e7bb      	b.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c12:	eb06 0384 	add.w	r3, r6, r4, lsl #2
 8010c16:	ed93 8a00 	vldr	s16, [r3]
 8010c1a:	e7f1      	b.n	8010c00 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x1dc>
 8010c1c:	00a3      	lsls	r3, r4, #2
 8010c1e:	eef0 0a48 	vmov.f32	s1, s16
 8010c22:	eeb0 0a68 	vmov.f32	s0, s17
 8010c26:	4638      	mov	r0, r7
 8010c28:	f103 0208 	add.w	r2, r3, #8
 8010c2c:	f103 090c 	add.w	r9, r3, #12
 8010c30:	4433      	add	r3, r6
 8010c32:	3404      	adds	r4, #4
 8010c34:	4432      	add	r2, r6
 8010c36:	44b1      	add	r9, r6
 8010c38:	edd3 1a01 	vldr	s3, [r3, #4]
 8010c3c:	ed92 2a00 	vldr	s4, [r2]
 8010c40:	edd9 2a00 	vldr	s5, [r9]
 8010c44:	ed93 1a00 	vldr	s2, [r3]
 8010c48:	9207      	str	r2, [sp, #28]
 8010c4a:	f7ff fabb 	bl	80101c4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010c4e:	9a07      	ldr	r2, [sp, #28]
 8010c50:	ed99 8a00 	vldr	s16, [r9]
 8010c54:	edd2 8a00 	vldr	s17, [r2]
 8010c58:	e797      	b.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010c5a:	00a3      	lsls	r3, r4, #2
 8010c5c:	eef0 0a48 	vmov.f32	s1, s16
 8010c60:	eeb0 0a68 	vmov.f32	s0, s17
 8010c64:	4638      	mov	r0, r7
 8010c66:	f103 0210 	add.w	r2, r3, #16
 8010c6a:	f103 0914 	add.w	r9, r3, #20
 8010c6e:	4433      	add	r3, r6
 8010c70:	3406      	adds	r4, #6
 8010c72:	4432      	add	r2, r6
 8010c74:	44b1      	add	r9, r6
 8010c76:	edd3 2a03 	vldr	s5, [r3, #12]
 8010c7a:	ed92 3a00 	vldr	s6, [r2]
 8010c7e:	edd9 3a00 	vldr	s7, [r9]
 8010c82:	ed93 2a02 	vldr	s4, [r3, #8]
 8010c86:	edd3 1a01 	vldr	s3, [r3, #4]
 8010c8a:	ed93 1a00 	vldr	s2, [r3]
 8010c8e:	9207      	str	r2, [sp, #28]
 8010c90:	f7ff fab7 	bl	8010202 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010c94:	9a07      	ldr	r2, [sp, #28]
 8010c96:	ed99 8a00 	vldr	s16, [r9]
 8010c9a:	edd2 8a00 	vldr	s17, [r2]
 8010c9e:	e774      	b.n	8010b8a <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x166>
 8010ca0:	9b06      	ldr	r3, [sp, #24]
 8010ca2:	af08      	add	r7, sp, #32
 8010ca4:	4543      	cmp	r3, r8
 8010ca6:	d90f      	bls.n	8010cc8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010ca8:	4638      	mov	r0, r7
 8010caa:	f7ff fdad 	bl	8010808 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvas23strokeDrawDoubleLineCapEv>
 8010cae:	b958      	cbnz	r0, 8010cc8 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2a4>
 8010cb0:	2301      	movs	r3, #1
 8010cb2:	9703      	str	r7, [sp, #12]
 8010cb4:	f8cd b000 	str.w	fp, [sp]
 8010cb8:	4641      	mov	r1, r8
 8010cba:	9a06      	ldr	r2, [sp, #24]
 8010cbc:	4628      	mov	r0, r5
 8010cbe:	e9cd 6301 	strd	r6, r3, [sp, #4]
 8010cc2:	4623      	mov	r3, r4
 8010cc4:	f7ff fe02 	bl	80108cc <_ZNK8touchgfx17CWRVectorRenderer19drawStrokeBackwardsEmmmPKhPKfbRNS0_12StrokeCanvasE>
 8010cc8:	f89d 10a6 	ldrb.w	r1, [sp, #166]	@ 0xa6
 8010ccc:	4638      	mov	r0, r7
 8010cce:	f00f fddd 	bl	802088c <_ZN8touchgfx6Canvas6renderEh>
 8010cd2:	4604      	mov	r4, r0
 8010cd4:	4638      	mov	r0, r7
 8010cd6:	f7ff fe99 	bl	8010a0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010cda:	4620      	mov	r0, r4
 8010cdc:	b035      	add	sp, #212	@ 0xd4
 8010cde:	ecbd 8b04 	vpop	{d8-d9}
 8010ce2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010ce6:	2401      	movs	r4, #1
 8010ce8:	e7f7      	b.n	8010cda <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE+0x2b6>
 8010cea:	bf00      	nop
 8010cec:	00000000 	.word	0x00000000
 8010cf0:	08025198 	.word	0x08025198

08010cf4 <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD0Ev>:
 8010cf4:	b510      	push	{r4, lr}
 8010cf6:	4604      	mov	r4, r0
 8010cf8:	f7ff fe88 	bl	8010a0c <_ZN8touchgfx17CWRVectorRenderer12StrokeCanvasD1Ev>
 8010cfc:	21b0      	movs	r1, #176	@ 0xb0
 8010cfe:	4620      	mov	r0, r4
 8010d00:	f010 f991 	bl	8021026 <_ZdlPvj>
 8010d04:	4620      	mov	r0, r4
 8010d06:	bd10      	pop	{r4, pc}

08010d08 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>:
 8010d08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010d0c:	4698      	mov	r8, r3
 8010d0e:	23ff      	movs	r3, #255	@ 0xff
 8010d10:	4607      	mov	r7, r0
 8010d12:	4689      	mov	r9, r1
 8010d14:	4692      	mov	sl, r2
 8010d16:	1d02      	adds	r2, r0, #4
 8010d18:	f107 0534 	add.w	r5, r7, #52	@ 0x34
 8010d1c:	2400      	movs	r4, #0
 8010d1e:	44ca      	add	sl, r9
 8010d20:	ed2d 8b06 	vpush	{d8-d10}
 8010d24:	b0aa      	sub	sp, #168	@ 0xa8
 8010d26:	ed9f 8a81 	vldr	s16, [pc, #516]	@ 8010f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010d2a:	9300      	str	r3, [sp, #0]
 8010d2c:	eef0 8a48 	vmov.f32	s17, s16
 8010d30:	6981      	ldr	r1, [r0, #24]
 8010d32:	a80d      	add	r0, sp, #52	@ 0x34
 8010d34:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8010d36:	f00f fd15 	bl	8020764 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>
 8010d3a:	7f3b      	ldrb	r3, [r7, #28]
 8010d3c:	eddf 0a7b 	vldr	s1, [pc, #492]	@ 8010f2c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x224>
 8010d40:	4628      	mov	r0, r5
 8010d42:	1e5a      	subs	r2, r3, #1
 8010d44:	eeb0 0a60 	vmov.f32	s0, s1
 8010d48:	4253      	negs	r3, r2
 8010d4a:	4153      	adcs	r3, r2
 8010d4c:	f88d 3078 	strb.w	r3, [sp, #120]	@ 0x78
 8010d50:	f003 ffa3 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d54:	eeb0 9a40 	vmov.f32	s18, s0
 8010d58:	eef0 9a60 	vmov.f32	s19, s1
 8010d5c:	45ca      	cmp	sl, r9
 8010d5e:	f000 80cd 	beq.w	8010efc <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x1f4>
 8010d62:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010d66:	2b06      	cmp	r3, #6
 8010d68:	d8f8      	bhi.n	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010d6a:	e8df f003 	tbb	[pc, r3]
 8010d6e:	0804      	.short	0x0804
 8010d70:	58533f2a 	.word	0x58533f2a
 8010d74:	8a          	.byte	0x8a
 8010d75:	00          	.byte	0x00
 8010d76:	a80d      	add	r0, sp, #52	@ 0x34
 8010d78:	f00f fd66 	bl	8020848 <_ZN8touchgfx6Canvas5closeEv>
 8010d7c:	e7ee      	b.n	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010d7e:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010d82:	4628      	mov	r0, r5
 8010d84:	ed93 8a01 	vldr	s16, [r3, #4]
 8010d88:	edd3 8a00 	vldr	s17, [r3]
 8010d8c:	eef0 0a48 	vmov.f32	s1, s16
 8010d90:	eeb0 0a68 	vmov.f32	s0, s17
 8010d94:	f003 ff81 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010d98:	a80d      	add	r0, sp, #52	@ 0x34
 8010d9a:	eef0 7a60 	vmov.f32	s15, s1
 8010d9e:	eeb0 9a40 	vmov.f32	s18, s0
 8010da2:	eef0 9a60 	vmov.f32	s19, s1
 8010da6:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010daa:	ee17 2a90 	vmov	r2, s15
 8010dae:	eef0 7a40 	vmov.f32	s15, s0
 8010db2:	eefe 7aed 	vcvt.s32.f32	s15, s15, #5
 8010db6:	ee17 1a90 	vmov	r1, s15
 8010dba:	f00f fe1f 	bl	80209fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>
 8010dbe:	3402      	adds	r4, #2
 8010dc0:	e7cc      	b.n	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010dc2:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010dc6:	4628      	mov	r0, r5
 8010dc8:	edd3 8a00 	vldr	s17, [r3]
 8010dcc:	ed93 8a01 	vldr	s16, [r3, #4]
 8010dd0:	eeb0 0a68 	vmov.f32	s0, s17
 8010dd4:	eef0 0a48 	vmov.f32	s1, s16
 8010dd8:	f003 ff5f 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ddc:	a80d      	add	r0, sp, #52	@ 0x34
 8010dde:	eeb0 9a40 	vmov.f32	s18, s0
 8010de2:	eef0 9a60 	vmov.f32	s19, s1
 8010de6:	f7ff fe01 	bl	80109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010dea:	e7e8      	b.n	8010dbe <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xb6>
 8010dec:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010df0:	edd3 8a00 	vldr	s17, [r3]
 8010df4:	eef0 0a48 	vmov.f32	s1, s16
 8010df8:	4628      	mov	r0, r5
 8010dfa:	eeb0 0a68 	vmov.f32	s0, s17
 8010dfe:	3401      	adds	r4, #1
 8010e00:	f003 ff4b 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e04:	a80d      	add	r0, sp, #52	@ 0x34
 8010e06:	eef0 9a60 	vmov.f32	s19, s1
 8010e0a:	eeb0 9a40 	vmov.f32	s18, s0
 8010e0e:	f7ff fded 	bl	80109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8010e12:	e7a3      	b.n	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010e14:	eb08 0384 	add.w	r3, r8, r4, lsl #2
 8010e18:	ed93 8a00 	vldr	s16, [r3]
 8010e1c:	e7ea      	b.n	8010df4 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0xec>
 8010e1e:	1ca3      	adds	r3, r4, #2
 8010e20:	4628      	mov	r0, r5
 8010e22:	3404      	adds	r4, #4
 8010e24:	eb08 0383 	add.w	r3, r8, r3, lsl #2
 8010e28:	ed53 0a01 	vldr	s1, [r3, #-4]
 8010e2c:	ed13 0a02 	vldr	s0, [r3, #-8]
 8010e30:	edd3 8a00 	vldr	s17, [r3]
 8010e34:	ed93 8a01 	vldr	s16, [r3, #4]
 8010e38:	f003 ff2f 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e3c:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010e40:	eeb0 0a68 	vmov.f32	s0, s17
 8010e44:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010e48:	eef0 0a48 	vmov.f32	s1, s16
 8010e4c:	4628      	mov	r0, r5
 8010e4e:	f003 ff24 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010e52:	eddd 1a0a 	vldr	s3, [sp, #40]	@ 0x28
 8010e56:	eef0 2a60 	vmov.f32	s5, s1
 8010e5a:	ed9d 1a09 	vldr	s2, [sp, #36]	@ 0x24
 8010e5e:	eeb0 2a40 	vmov.f32	s4, s0
 8010e62:	a80d      	add	r0, sp, #52	@ 0x34
 8010e64:	eeb0 aa40 	vmov.f32	s20, s0
 8010e68:	eef0 aa60 	vmov.f32	s21, s1
 8010e6c:	eeb0 0a49 	vmov.f32	s0, s18
 8010e70:	eef0 0a69 	vmov.f32	s1, s19
 8010e74:	f7ff f9a6 	bl	80101c4 <_ZN8touchgfx6Canvas17quadraticBezierToEffffff>
 8010e78:	eef0 9a6a 	vmov.f32	s19, s21
 8010e7c:	eeb0 9a4a 	vmov.f32	s18, s20
 8010e80:	e76c      	b.n	8010d5c <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x54>
 8010e82:	1d26      	adds	r6, r4, #4
 8010e84:	4628      	mov	r0, r5
 8010e86:	3406      	adds	r4, #6
 8010e88:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8010e8c:	ed56 0a03 	vldr	s1, [r6, #-12]
 8010e90:	ed16 0a04 	vldr	s0, [r6, #-16]
 8010e94:	edd6 8a00 	vldr	s17, [r6]
 8010e98:	ed96 8a01 	vldr	s16, [r6, #4]
 8010e9c:	f003 fefd 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ea0:	ed8d 0a07 	vstr	s0, [sp, #28]
 8010ea4:	4628      	mov	r0, r5
 8010ea6:	ed16 0a02 	vldr	s0, [r6, #-8]
 8010eaa:	edcd 0a08 	vstr	s1, [sp, #32]
 8010eae:	ed56 0a01 	vldr	s1, [r6, #-4]
 8010eb2:	f003 fef2 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010eb6:	ed8d 0a09 	vstr	s0, [sp, #36]	@ 0x24
 8010eba:	edcd 0a0a 	vstr	s1, [sp, #40]	@ 0x28
 8010ebe:	eeb0 0a68 	vmov.f32	s0, s17
 8010ec2:	eef0 0a48 	vmov.f32	s1, s16
 8010ec6:	4628      	mov	r0, r5
 8010ec8:	f003 fee7 	bl	8014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>
 8010ecc:	eddd 2a0a 	vldr	s5, [sp, #40]	@ 0x28
 8010ed0:	eeb0 3a40 	vmov.f32	s6, s0
 8010ed4:	ed9d 2a09 	vldr	s4, [sp, #36]	@ 0x24
 8010ed8:	eef0 3a60 	vmov.f32	s7, s1
 8010edc:	eddd 1a08 	vldr	s3, [sp, #32]
 8010ee0:	eeb0 aa40 	vmov.f32	s20, s0
 8010ee4:	ed9d 1a07 	vldr	s2, [sp, #28]
 8010ee8:	eef0 aa60 	vmov.f32	s21, s1
 8010eec:	a80d      	add	r0, sp, #52	@ 0x34
 8010eee:	eef0 0a69 	vmov.f32	s1, s19
 8010ef2:	eeb0 0a49 	vmov.f32	s0, s18
 8010ef6:	f7ff f984 	bl	8010202 <_ZN8touchgfx6Canvas13cubicBezierToEffffffff>
 8010efa:	e7bd      	b.n	8010e78 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x170>
 8010efc:	7f7b      	ldrb	r3, [r7, #29]
 8010efe:	a80d      	add	r0, sp, #52	@ 0x34
 8010f00:	7fb9      	ldrb	r1, [r7, #30]
 8010f02:	4359      	muls	r1, r3
 8010f04:	1c4b      	adds	r3, r1, #1
 8010f06:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 8010f0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 8010f0e:	f00f fcbd 	bl	802088c <_ZN8touchgfx6Canvas6renderEh>
 8010f12:	4b07      	ldr	r3, [pc, #28]	@ (8010f30 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE+0x228>)
 8010f14:	4604      	mov	r4, r0
 8010f16:	a812      	add	r0, sp, #72	@ 0x48
 8010f18:	930d      	str	r3, [sp, #52]	@ 0x34
 8010f1a:	f000 fbef 	bl	80116fc <_ZN8touchgfx7OutlineD1Ev>
 8010f1e:	4620      	mov	r0, r4
 8010f20:	b02a      	add	sp, #168	@ 0xa8
 8010f22:	ecbd 8b06 	vpop	{d8-d10}
 8010f26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8010f2a:	bf00      	nop
 8010f2c:	00000000 	.word	0x00000000
 8010f30:	080256c8 	.word	0x080256c8

08010f34 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>:
 8010f34:	b410      	push	{r4}
 8010f36:	7f04      	ldrb	r4, [r0, #28]
 8010f38:	b11c      	cbz	r4, 8010f42 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE+0xe>
 8010f3a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f3e:	f7ff bee3 	b.w	8010d08 <_ZNK8touchgfx17CWRVectorRenderer8drawFillEPKhmPKfmRKNS_4RectE>
 8010f42:	f85d 4b04 	ldr.w	r4, [sp], #4
 8010f46:	f7ff bd6d 	b.w	8010a24 <_ZNK8touchgfx17CWRVectorRenderer10drawStrokeEPKhmPKfmRKNS_4RectE>

08010f4a <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_>:
 8010f4a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8010f4e:	4691      	mov	r9, r2
 8010f50:	4602      	mov	r2, r0
 8010f52:	4606      	mov	r6, r0
 8010f54:	4688      	mov	r8, r1
 8010f56:	f852 0f26 	ldr.w	r0, [r2, #38]!
 8010f5a:	469a      	mov	sl, r3
 8010f5c:	ab02      	add	r3, sp, #8
 8010f5e:	af02      	add	r7, sp, #8
 8010f60:	6851      	ldr	r1, [r2, #4]
 8010f62:	c303      	stmia	r3!, {r0, r1}
 8010f64:	f9bd 300c 	ldrsh.w	r3, [sp, #12]
 8010f68:	2b00      	cmp	r3, #0
 8010f6a:	dd2f      	ble.n	8010fcc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8010f6c:	f9bd 400e 	ldrsh.w	r4, [sp, #14]
 8010f70:	2c00      	cmp	r4, #0
 8010f72:	dd2b      	ble.n	8010fcc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8010f74:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010f78:	441c      	add	r4, r3
 8010f7a:	b2a4      	uxth	r4, r4
 8010f7c:	b225      	sxth	r5, r4
 8010f7e:	f9bd 300a 	ldrsh.w	r3, [sp, #10]
 8010f82:	42ab      	cmp	r3, r5
 8010f84:	da22      	bge.n	8010fcc <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x82>
 8010f86:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8010f88:	464a      	mov	r2, r9
 8010f8a:	9701      	str	r7, [sp, #4]
 8010f8c:	4641      	mov	r1, r8
 8010f8e:	9300      	str	r3, [sp, #0]
 8010f90:	4630      	mov	r0, r6
 8010f92:	4653      	mov	r3, sl
 8010f94:	f7ff ffce 	bl	8010f34 <_ZNK8touchgfx17CWRVectorRenderer12drawPathAreaEPKhmPKfmRKNS_4RectE>
 8010f98:	b940      	cbnz	r0, 8010fac <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8010f9a:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 8010f9e:	2b01      	cmp	r3, #1
 8010fa0:	d004      	beq.n	8010fac <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x62>
 8010fa2:	3301      	adds	r3, #1
 8010fa4:	105b      	asrs	r3, r3, #1
 8010fa6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010faa:	e7ec      	b.n	8010f86 <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x3c>
 8010fac:	f8bd 200e 	ldrh.w	r2, [sp, #14]
 8010fb0:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8010fb4:	4413      	add	r3, r2
 8010fb6:	b29b      	uxth	r3, r3
 8010fb8:	441a      	add	r2, r3
 8010fba:	f8ad 300a 	strh.w	r3, [sp, #10]
 8010fbe:	b212      	sxth	r2, r2
 8010fc0:	4295      	cmp	r5, r2
 8010fc2:	dadc      	bge.n	8010f7e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8010fc4:	1ae3      	subs	r3, r4, r3
 8010fc6:	f8ad 300e 	strh.w	r3, [sp, #14]
 8010fca:	e7d8      	b.n	8010f7e <_ZN8touchgfx17CWRVectorRenderer8drawPathEPKhmPKfmS4_+0x34>
 8010fcc:	b004      	add	sp, #16
 8010fce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

08010fd2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010fd2:	0c0b      	lsrs	r3, r1, #16
 8010fd4:	60c1      	str	r1, [r0, #12]
 8010fd6:	7481      	strb	r1, [r0, #18]
 8010fd8:	7403      	strb	r3, [r0, #16]
 8010fda:	0a0b      	lsrs	r3, r1, #8
 8010fdc:	7443      	strb	r3, [r0, #17]
 8010fde:	4770      	bx	lr

08010fe0 <_ZThn8_N8touchgfx13PainterRGB8888setColorENS_9colortypeE>:
 8010fe0:	f1a0 0008 	sub.w	r0, r0, #8
 8010fe4:	e7f5      	b.n	8010fd2 <_ZN8touchgfx13PainterRGB8888setColorENS_9colortypeE>
	...

08010fe8 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv>:
 8010fe8:	b508      	push	{r3, lr}
 8010fea:	4b05      	ldr	r3, [pc, #20]	@ (8011000 <_ZNK8touchgfx13PainterRGB88818getRenderingMethodEv+0x18>)
 8010fec:	6818      	ldr	r0, [r3, #0]
 8010fee:	6803      	ldr	r3, [r0, #0]
 8010ff0:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 8010ff4:	4798      	blx	r3
 8010ff6:	1e43      	subs	r3, r0, #1
 8010ff8:	4258      	negs	r0, r3
 8010ffa:	4158      	adcs	r0, r3
 8010ffc:	bd08      	pop	{r3, pc}
 8010ffe:	bf00      	nop
 8011000:	240253a8 	.word	0x240253a8

08011004 <_ZN8touchgfx13PainterRGB888D1Ev>:
 8011004:	4770      	bx	lr

08011006 <_ZThn8_N8touchgfx13PainterRGB888D1Ev>:
 8011006:	3808      	subs	r0, #8
 8011008:	4770      	bx	lr

0801100a <_ZNK8touchgfx13PainterRGB8885paintEPhssssh>:
 801100a:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801100e:	b410      	push	{r4}
 8011010:	188c      	adds	r4, r1, r2
 8011012:	f89d 300c 	ldrb.w	r3, [sp, #12]
 8011016:	68c2      	ldr	r2, [r0, #12]
 8011018:	f9bd 1008 	ldrsh.w	r1, [sp, #8]
 801101c:	4620      	mov	r0, r4
 801101e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8011022:	f7f2 b96b 	b.w	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>

08011026 <_ZNK8touchgfx13PainterRGB8888tearDownEv>:
 8011026:	f7f2 b945 	b.w	80032b4 <_ZN8touchgfx5paint8tearDownEv>

0801102a <_ZN8touchgfx13PainterRGB888D0Ev>:
 801102a:	b510      	push	{r4, lr}
 801102c:	4604      	mov	r4, r0
 801102e:	2114      	movs	r1, #20
 8011030:	f00f fff9 	bl	8021026 <_ZdlPvj>
 8011034:	4620      	mov	r0, r4
 8011036:	bd10      	pop	{r4, pc}

08011038 <_ZThn8_N8touchgfx13PainterRGB888D0Ev>:
 8011038:	f1a0 0008 	sub.w	r0, r0, #8
 801103c:	e7f5      	b.n	801102a <_ZN8touchgfx13PainterRGB888D0Ev>
	...

08011040 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh>:
 8011040:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011044:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011048:	4411      	add	r1, r2
 801104a:	7c42      	ldrb	r2, [r0, #17]
 801104c:	f9bd 4020 	ldrsh.w	r4, [sp, #32]
 8011050:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 8011054:	f89d 5028 	ldrb.w	r5, [sp, #40]	@ 0x28
 8011058:	2a00      	cmp	r2, #0
 801105a:	f000 8084 	beq.w	8011166 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x126>
 801105e:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011062:	ed90 7a08 	vldr	s14, [r0, #32]
 8011066:	42a2      	cmp	r2, r4
 8011068:	68c3      	ldr	r3, [r0, #12]
 801106a:	db20      	blt.n	80110ae <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x6e>
 801106c:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8011070:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011078:	bfc8      	it	gt
 801107a:	2200      	movgt	r2, #0
 801107c:	589a      	ldr	r2, [r3, r2]
 801107e:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8011082:	7c03      	ldrb	r3, [r0, #16]
 8011084:	fa5f fc82 	uxtb.w	ip, r2
 8011088:	f3c2 2707 	ubfx	r7, r2, #8, #8
 801108c:	f3c2 4407 	ubfx	r4, r2, #16, #8
 8011090:	440e      	add	r6, r1
 8011092:	b36b      	cbz	r3, 80110f0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011094:	2dff      	cmp	r5, #255	@ 0xff
 8011096:	d12b      	bne.n	80110f0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xb0>
 8011098:	42b1      	cmp	r1, r6
 801109a:	f080 8204 	bcs.w	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 801109e:	f881 c000 	strb.w	ip, [r1]
 80110a2:	3103      	adds	r1, #3
 80110a4:	f801 7c02 	strb.w	r7, [r1, #-2]
 80110a8:	f801 4c01 	strb.w	r4, [r1, #-1]
 80110ac:	e7f4      	b.n	8011098 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x58>
 80110ae:	f9b0 7008 	ldrsh.w	r7, [r0, #8]
 80110b2:	42a7      	cmp	r7, r4
 80110b4:	dc08      	bgt.n	80110c8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x88>
 80110b6:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80110ba:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80110be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110c2:	bfd8      	it	le
 80110c4:	2200      	movle	r2, #0
 80110c6:	e7d9      	b.n	801107c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80110c8:	1aa2      	subs	r2, r4, r2
 80110ca:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80110ce:	ee07 2a90 	vmov	s15, r2
 80110d2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80110d6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80110da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80110de:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80110e2:	ee17 2a90 	vmov	r2, s15
 80110e6:	bfd8      	it	le
 80110e8:	f202 32ff 	addwle	r2, r2, #1023	@ 0x3ff
 80110ec:	0092      	lsls	r2, r2, #2
 80110ee:	e7c5      	b.n	801107c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3c>
 80110f0:	0e12      	lsrs	r2, r2, #24
 80110f2:	4355      	muls	r5, r2
 80110f4:	1c6a      	adds	r2, r5, #1
 80110f6:	eb02 2525 	add.w	r5, r2, r5, asr #8
 80110fa:	122d      	asrs	r5, r5, #8
 80110fc:	43e8      	mvns	r0, r5
 80110fe:	b2ad      	uxth	r5, r5
 8011100:	fb1c fc05 	smulbb	ip, ip, r5
 8011104:	b2c0      	uxtb	r0, r0
 8011106:	fb17 f705 	smulbb	r7, r7, r5
 801110a:	fb14 f505 	smulbb	r5, r4, r5
 801110e:	fa1f fc8c 	uxth.w	ip, ip
 8011112:	b2bf      	uxth	r7, r7
 8011114:	b2ad      	uxth	r5, r5
 8011116:	428e      	cmp	r6, r1
 8011118:	f101 0303 	add.w	r3, r1, #3
 801111c:	f240 81c3 	bls.w	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011120:	f813 2c03 	ldrb.w	r2, [r3, #-3]
 8011124:	fb02 c200 	mla	r2, r2, r0, ip
 8011128:	b292      	uxth	r2, r2
 801112a:	1c51      	adds	r1, r2, #1
 801112c:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011130:	1212      	asrs	r2, r2, #8
 8011132:	f803 2c03 	strb.w	r2, [r3, #-3]
 8011136:	f813 2c02 	ldrb.w	r2, [r3, #-2]
 801113a:	fb02 7200 	mla	r2, r2, r0, r7
 801113e:	b292      	uxth	r2, r2
 8011140:	1c51      	adds	r1, r2, #1
 8011142:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 8011146:	1212      	asrs	r2, r2, #8
 8011148:	f803 2c02 	strb.w	r2, [r3, #-2]
 801114c:	f813 2c01 	ldrb.w	r2, [r3, #-1]
 8011150:	fb02 5200 	mla	r2, r2, r0, r5
 8011154:	b292      	uxth	r2, r2
 8011156:	1c51      	adds	r1, r2, #1
 8011158:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801115c:	4619      	mov	r1, r3
 801115e:	1212      	asrs	r2, r2, #8
 8011160:	f803 2c01 	strb.w	r2, [r3, #-1]
 8011164:	e7d7      	b.n	8011116 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0xd6>
 8011166:	7c82      	ldrb	r2, [r0, #18]
 8011168:	2a00      	cmp	r2, #0
 801116a:	d047      	beq.n	80111fc <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1bc>
 801116c:	f9b0 2006 	ldrsh.w	r2, [r0, #6]
 8011170:	ee07 2a10 	vmov	s14, r2
 8011174:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8011178:	ee07 3a90 	vmov	s15, r3
 801117c:	461a      	mov	r2, r3
 801117e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8011182:	eef4 6ac7 	vcmpe.f32	s13, s14
 8011186:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801118a:	f200 808e 	bhi.w	80112aa <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x26a>
 801118e:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8011192:	f640 72fc 	movw	r2, #4092	@ 0xffc
 8011196:	68c7      	ldr	r7, [r0, #12]
 8011198:	ee77 7a27 	vadd.f32	s15, s14, s15
 801119c:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80111a0:	ee06 6a90 	vmov	s13, r6
 80111a4:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80111a8:	eef4 7ae6 	vcmpe.f32	s15, s13
 80111ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111b0:	bf4a      	itet	mi
 80111b2:	eefd 7ae7 	vcvtmi.s32.f32	s15, s15
 80111b6:	4634      	movpl	r4, r6
 80111b8:	ee17 4a90 	vmovmi	r4, s15
 80111bc:	edd0 7a08 	vldr	s15, [r0, #32]
 80111c0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80111c4:	eb04 0e44 	add.w	lr, r4, r4, lsl #1
 80111c8:	448e      	add	lr, r1
 80111ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80111ce:	bfc8      	it	gt
 80111d0:	2200      	movgt	r2, #0
 80111d2:	58bf      	ldr	r7, [r7, r2]
 80111d4:	7c02      	ldrb	r2, [r0, #16]
 80111d6:	fa5f f987 	uxtb.w	r9, r7
 80111da:	f3c7 2807 	ubfx	r8, r7, #8, #8
 80111de:	f3c7 4c07 	ubfx	ip, r7, #16, #8
 80111e2:	b31a      	cbz	r2, 801122c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80111e4:	2dff      	cmp	r5, #255	@ 0xff
 80111e6:	d121      	bne.n	801122c <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1ec>
 80111e8:	4571      	cmp	r1, lr
 80111ea:	d25d      	bcs.n	80112a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 80111ec:	f881 9000 	strb.w	r9, [r1]
 80111f0:	3103      	adds	r1, #3
 80111f2:	f801 8c02 	strb.w	r8, [r1, #-2]
 80111f6:	f801 cc01 	strb.w	ip, [r1, #-1]
 80111fa:	e7f5      	b.n	80111e8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x1a8>
 80111fc:	ee07 4a90 	vmov	s15, r4
 8011200:	ed90 7a06 	vldr	s14, [r0, #24]
 8011204:	edd0 6a05 	vldr	s13, [r0, #20]
 8011208:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801120c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8011210:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8011214:	edd0 7a08 	vldr	s15, [r0, #32]
 8011218:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801121c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011220:	bf44      	itt	mi
 8011222:	edd0 7a07 	vldrmi	s15, [r0, #28]
 8011226:	ee37 7a67 	vsubmi.f32	s14, s14, s15
 801122a:	e7a5      	b.n	8011178 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x138>
 801122c:	0e3f      	lsrs	r7, r7, #24
 801122e:	436f      	muls	r7, r5
 8011230:	1c7a      	adds	r2, r7, #1
 8011232:	eb02 2227 	add.w	r2, r2, r7, asr #8
 8011236:	1212      	asrs	r2, r2, #8
 8011238:	ea6f 0a02 	mvn.w	sl, r2
 801123c:	b292      	uxth	r2, r2
 801123e:	fb19 f902 	smulbb	r9, r9, r2
 8011242:	fa5f fa8a 	uxtb.w	sl, sl
 8011246:	fb18 f802 	smulbb	r8, r8, r2
 801124a:	fb1c fc02 	smulbb	ip, ip, r2
 801124e:	fa1f f989 	uxth.w	r9, r9
 8011252:	fa1f f888 	uxth.w	r8, r8
 8011256:	fa1f fc8c 	uxth.w	ip, ip
 801125a:	458e      	cmp	lr, r1
 801125c:	f101 0203 	add.w	r2, r1, #3
 8011260:	d922      	bls.n	80112a8 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x268>
 8011262:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011266:	fb01 910a 	mla	r1, r1, sl, r9
 801126a:	b289      	uxth	r1, r1
 801126c:	1c4f      	adds	r7, r1, #1
 801126e:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011272:	1209      	asrs	r1, r1, #8
 8011274:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011278:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801127c:	fb01 810a 	mla	r1, r1, sl, r8
 8011280:	b289      	uxth	r1, r1
 8011282:	1c4f      	adds	r7, r1, #1
 8011284:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011288:	1209      	asrs	r1, r1, #8
 801128a:	f802 1c02 	strb.w	r1, [r2, #-2]
 801128e:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011292:	fb01 c10a 	mla	r1, r1, sl, ip
 8011296:	b289      	uxth	r1, r1
 8011298:	1c4f      	adds	r7, r1, #1
 801129a:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801129e:	1209      	asrs	r1, r1, #8
 80112a0:	f802 1c01 	strb.w	r1, [r2, #-1]
 80112a4:	4611      	mov	r1, r2
 80112a6:	e7d8      	b.n	801125a <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x21a>
 80112a8:	191a      	adds	r2, r3, r4
 80112aa:	4433      	add	r3, r6
 80112ac:	b21b      	sxth	r3, r3
 80112ae:	4293      	cmp	r3, r2
 80112b0:	f340 80f9 	ble.w	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80112b4:	edd0 7a07 	vldr	s15, [r0, #28]
 80112b8:	ee06 2a90 	vmov	s13, r2
 80112bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80112c0:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80112c4:	eef4 7ae6 	vcmpe.f32	s15, s13
 80112c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112cc:	f340 80b0 	ble.w	8011430 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f0>
 80112d0:	ee06 3a10 	vmov	s12, r3
 80112d4:	ee36 7ac7 	vsub.f32	s14, s13, s14
 80112d8:	eddf 5a74 	vldr	s11, [pc, #464]	@ 80114ac <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x46c>
 80112dc:	eeb8 6ac6 	vcvt.f32.s32	s12, s12
 80112e0:	eef4 7ac6 	vcmpe.f32	s15, s12
 80112e4:	ed90 6a08 	vldr	s12, [r0, #32]
 80112e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80112ec:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 80112f0:	bfd6      	itet	le
 80112f2:	eefd 7ae7 	vcvtle.s32.f32	s15, s15
 80112f6:	469c      	movgt	ip, r3
 80112f8:	ee17 ca90 	vmovle	ip, s15
 80112fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011300:	eddf 7a6b 	vldr	s15, [pc, #428]	@ 80114b0 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x470>
 8011304:	ebac 0202 	sub.w	r2, ip, r2
 8011308:	fe77 7aa5 	vselgt.f32	s15, s15, s11
 801130c:	eee6 7a07 	vfma.f32	s15, s12, s14
 8011310:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8011314:	188c      	adds	r4, r1, r2
 8011316:	7c02      	ldrb	r2, [r0, #16]
 8011318:	b1d2      	cbz	r2, 8011350 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801131a:	2dff      	cmp	r5, #255	@ 0xff
 801131c:	d118      	bne.n	8011350 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x310>
 801131e:	42a1      	cmp	r1, r4
 8011320:	d261      	bcs.n	80113e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 8011322:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 8011326:	68c6      	ldr	r6, [r0, #12]
 8011328:	3103      	adds	r1, #3
 801132a:	ee17 7a10 	vmov	r7, s14
 801132e:	eb06 0287 	add.w	r2, r6, r7, lsl #2
 8011332:	f816 6027 	ldrb.w	r6, [r6, r7, lsl #2]
 8011336:	f801 6c03 	strb.w	r6, [r1, #-3]
 801133a:	7856      	ldrb	r6, [r2, #1]
 801133c:	f801 6c02 	strb.w	r6, [r1, #-2]
 8011340:	7892      	ldrb	r2, [r2, #2]
 8011342:	f801 2c01 	strb.w	r2, [r1, #-1]
 8011346:	ed90 7a08 	vldr	s14, [r0, #32]
 801134a:	ee77 7a87 	vadd.f32	s15, s15, s14
 801134e:	e7e6      	b.n	801131e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x2de>
 8011350:	68c2      	ldr	r2, [r0, #12]
 8011352:	428c      	cmp	r4, r1
 8011354:	f101 0e03 	add.w	lr, r1, #3
 8011358:	d945      	bls.n	80113e6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3a6>
 801135a:	eebd 7ae7 	vcvt.s32.f32	s14, s15
 801135e:	ee17 9a10 	vmov	r9, s14
 8011362:	eb02 0889 	add.w	r8, r2, r9, lsl #2
 8011366:	f898 7003 	ldrb.w	r7, [r8, #3]
 801136a:	fb07 f605 	mul.w	r6, r7, r5
 801136e:	1c77      	adds	r7, r6, #1
 8011370:	eb07 2716 	add.w	r7, r7, r6, lsr #8
 8011374:	123f      	asrs	r7, r7, #8
 8011376:	b2b9      	uxth	r1, r7
 8011378:	43ff      	mvns	r7, r7
 801137a:	b2fe      	uxtb	r6, r7
 801137c:	f812 7029 	ldrb.w	r7, [r2, r9, lsl #2]
 8011380:	f81e 9c03 	ldrb.w	r9, [lr, #-3]
 8011384:	fb19 f906 	smulbb	r9, r9, r6
 8011388:	fb07 9701 	mla	r7, r7, r1, r9
 801138c:	b2bf      	uxth	r7, r7
 801138e:	f107 0901 	add.w	r9, r7, #1
 8011392:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 8011396:	f81e 9c02 	ldrb.w	r9, [lr, #-2]
 801139a:	fb19 f906 	smulbb	r9, r9, r6
 801139e:	123f      	asrs	r7, r7, #8
 80113a0:	f80e 7c03 	strb.w	r7, [lr, #-3]
 80113a4:	f898 7001 	ldrb.w	r7, [r8, #1]
 80113a8:	fb07 9701 	mla	r7, r7, r1, r9
 80113ac:	b2bf      	uxth	r7, r7
 80113ae:	f107 0901 	add.w	r9, r7, #1
 80113b2:	eb09 2717 	add.w	r7, r9, r7, lsr #8
 80113b6:	123f      	asrs	r7, r7, #8
 80113b8:	f80e 7c02 	strb.w	r7, [lr, #-2]
 80113bc:	f81e 7c01 	ldrb.w	r7, [lr, #-1]
 80113c0:	f898 8002 	ldrb.w	r8, [r8, #2]
 80113c4:	fb17 f606 	smulbb	r6, r7, r6
 80113c8:	fb08 6601 	mla	r6, r8, r1, r6
 80113cc:	b2b6      	uxth	r6, r6
 80113ce:	1c71      	adds	r1, r6, #1
 80113d0:	eb01 2616 	add.w	r6, r1, r6, lsr #8
 80113d4:	4671      	mov	r1, lr
 80113d6:	1236      	asrs	r6, r6, #8
 80113d8:	f80e 6c01 	strb.w	r6, [lr, #-1]
 80113dc:	ed90 7a08 	vldr	s14, [r0, #32]
 80113e0:	ee77 7a87 	vadd.f32	s15, s15, s14
 80113e4:	e7b5      	b.n	8011352 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x312>
 80113e6:	4563      	cmp	r3, ip
 80113e8:	dd5d      	ble.n	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 80113ea:	edd0 7a08 	vldr	s15, [r0, #32]
 80113ee:	eba3 030c 	sub.w	r3, r3, ip
 80113f2:	68c4      	ldr	r4, [r0, #12]
 80113f4:	f640 72fc 	movw	r2, #4092	@ 0xffc
 80113f8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80113fc:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8011400:	7c00      	ldrb	r0, [r0, #16]
 8011402:	440b      	add	r3, r1
 8011404:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8011408:	bfd8      	it	le
 801140a:	2200      	movle	r2, #0
 801140c:	58a2      	ldr	r2, [r4, r2]
 801140e:	b2d4      	uxtb	r4, r2
 8011410:	f3c2 2c07 	ubfx	ip, r2, #8, #8
 8011414:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011418:	b160      	cbz	r0, 8011434 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801141a:	2dff      	cmp	r5, #255	@ 0xff
 801141c:	d10a      	bne.n	8011434 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3f4>
 801141e:	4299      	cmp	r1, r3
 8011420:	d241      	bcs.n	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011422:	700c      	strb	r4, [r1, #0]
 8011424:	3103      	adds	r1, #3
 8011426:	f801 cc02 	strb.w	ip, [r1, #-2]
 801142a:	f801 7c01 	strb.w	r7, [r1, #-1]
 801142e:	e7f6      	b.n	801141e <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3de>
 8011430:	4694      	mov	ip, r2
 8011432:	e7da      	b.n	80113ea <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x3aa>
 8011434:	0e12      	lsrs	r2, r2, #24
 8011436:	436a      	muls	r2, r5
 8011438:	1c55      	adds	r5, r2, #1
 801143a:	eb05 2522 	add.w	r5, r5, r2, asr #8
 801143e:	122d      	asrs	r5, r5, #8
 8011440:	43ee      	mvns	r6, r5
 8011442:	b2ad      	uxth	r5, r5
 8011444:	fb14 f405 	smulbb	r4, r4, r5
 8011448:	b2f6      	uxtb	r6, r6
 801144a:	fb1c f005 	smulbb	r0, ip, r5
 801144e:	fb17 f505 	smulbb	r5, r7, r5
 8011452:	b2a4      	uxth	r4, r4
 8011454:	b280      	uxth	r0, r0
 8011456:	b2ad      	uxth	r5, r5
 8011458:	428b      	cmp	r3, r1
 801145a:	f101 0203 	add.w	r2, r1, #3
 801145e:	d922      	bls.n	80114a6 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x466>
 8011460:	f812 1c03 	ldrb.w	r1, [r2, #-3]
 8011464:	fb01 4106 	mla	r1, r1, r6, r4
 8011468:	b289      	uxth	r1, r1
 801146a:	1c4f      	adds	r7, r1, #1
 801146c:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011470:	1209      	asrs	r1, r1, #8
 8011472:	f802 1c03 	strb.w	r1, [r2, #-3]
 8011476:	f812 1c02 	ldrb.w	r1, [r2, #-2]
 801147a:	fb01 0106 	mla	r1, r1, r6, r0
 801147e:	b289      	uxth	r1, r1
 8011480:	1c4f      	adds	r7, r1, #1
 8011482:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 8011486:	1209      	asrs	r1, r1, #8
 8011488:	f802 1c02 	strb.w	r1, [r2, #-2]
 801148c:	f812 1c01 	ldrb.w	r1, [r2, #-1]
 8011490:	fb01 5106 	mla	r1, r1, r6, r5
 8011494:	b289      	uxth	r1, r1
 8011496:	1c4f      	adds	r7, r1, #1
 8011498:	eb07 2111 	add.w	r1, r7, r1, lsr #8
 801149c:	1209      	asrs	r1, r1, #8
 801149e:	f802 1c01 	strb.w	r1, [r2, #-1]
 80114a2:	4611      	mov	r1, r2
 80114a4:	e7d8      	b.n	8011458 <_ZNK8touchgfx27PainterRGB888LinearGradient5paintEPhssssh+0x418>
 80114a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80114aa:	bf00      	nop
 80114ac:	447ffffe 	.word	0x447ffffe
 80114b0:	00000000 	.word	0x00000000

080114b4 <_ZNK8touchgfx27PainterRGB888LinearGradient8tearDownEv>:
 80114b4:	4770      	bx	lr

080114b6 <_ZN8touchgfx27PainterRGB888LinearGradientD1Ev>:
 80114b6:	4770      	bx	lr

080114b8 <_ZN8touchgfx27PainterRGB888LinearGradientD0Ev>:
 80114b8:	b510      	push	{r4, lr}
 80114ba:	4604      	mov	r4, r0
 80114bc:	2124      	movs	r1, #36	@ 0x24
 80114be:	f00f fdb2 	bl	8021026 <_ZdlPvj>
 80114c2:	4620      	mov	r0, r4
 80114c4:	bd10      	pop	{r4, pc}
	...

080114c8 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE>:
 80114c8:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 80114ca:	6803      	ldr	r3, [r0, #0]
 80114cc:	460d      	mov	r5, r1
 80114ce:	4604      	mov	r4, r0
 80114d0:	4601      	mov	r1, r0
 80114d2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80114d4:	a802      	add	r0, sp, #8
 80114d6:	4798      	blx	r3
 80114d8:	6828      	ldr	r0, [r5, #0]
 80114da:	6869      	ldr	r1, [r5, #4]
 80114dc:	466b      	mov	r3, sp
 80114de:	c303      	stmia	r3!, {r0, r1}
 80114e0:	4668      	mov	r0, sp
 80114e2:	4619      	mov	r1, r3
 80114e4:	f7fd fcee 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80114e8:	6aa0      	ldr	r0, [r4, #40]	@ 0x28
 80114ea:	b188      	cbz	r0, 8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80114ec:	6803      	ldr	r3, [r0, #0]
 80114ee:	1d21      	adds	r1, r4, #4
 80114f0:	68db      	ldr	r3, [r3, #12]
 80114f2:	4798      	blx	r3
 80114f4:	b160      	cbz	r0, 8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80114f6:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 80114fa:	2b00      	cmp	r3, #0
 80114fc:	dd08      	ble.n	8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 80114fe:	f9bd 5006 	ldrsh.w	r5, [sp, #6]
 8011502:	2d00      	cmp	r5, #0
 8011504:	dd04      	ble.n	8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011506:	4a2b      	ldr	r2, [pc, #172]	@ (80115b4 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xec>)
 8011508:	7812      	ldrb	r2, [r2, #0]
 801150a:	b11a      	cbz	r2, 8011514 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x4c>
 801150c:	2a01      	cmp	r2, #1
 801150e:	d029      	beq.n	8011564 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x9c>
 8011510:	b004      	add	sp, #16
 8011512:	bd70      	pop	{r4, r5, r6, pc}
 8011514:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 8011518:	441d      	add	r5, r3
 801151a:	b2ad      	uxth	r5, r5
 801151c:	b22e      	sxth	r6, r5
 801151e:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 8011522:	42b3      	cmp	r3, r6
 8011524:	daf4      	bge.n	8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011526:	6823      	ldr	r3, [r4, #0]
 8011528:	4669      	mov	r1, sp
 801152a:	4620      	mov	r0, r4
 801152c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801152e:	4798      	blx	r3
 8011530:	b940      	cbnz	r0, 8011544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 8011532:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 8011536:	2b01      	cmp	r3, #1
 8011538:	d004      	beq.n	8011544 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x7c>
 801153a:	3301      	adds	r3, #1
 801153c:	105b      	asrs	r3, r3, #1
 801153e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011542:	e7f0      	b.n	8011526 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x5e>
 8011544:	f8bd 2006 	ldrh.w	r2, [sp, #6]
 8011548:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801154c:	4413      	add	r3, r2
 801154e:	b29b      	uxth	r3, r3
 8011550:	441a      	add	r2, r3
 8011552:	f8ad 3002 	strh.w	r3, [sp, #2]
 8011556:	b212      	sxth	r2, r2
 8011558:	4296      	cmp	r6, r2
 801155a:	dae0      	bge.n	801151e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 801155c:	1aeb      	subs	r3, r5, r3
 801155e:	f8ad 3006 	strh.w	r3, [sp, #6]
 8011562:	e7dc      	b.n	801151e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x56>
 8011564:	f8bd 5000 	ldrh.w	r5, [sp]
 8011568:	441d      	add	r5, r3
 801156a:	b2ad      	uxth	r5, r5
 801156c:	b22e      	sxth	r6, r5
 801156e:	f9bd 3000 	ldrsh.w	r3, [sp]
 8011572:	42b3      	cmp	r3, r6
 8011574:	dacc      	bge.n	8011510 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0x48>
 8011576:	6823      	ldr	r3, [r4, #0]
 8011578:	4669      	mov	r1, sp
 801157a:	4620      	mov	r0, r4
 801157c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801157e:	4798      	blx	r3
 8011580:	b940      	cbnz	r0, 8011594 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 8011582:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8011586:	2b01      	cmp	r3, #1
 8011588:	d004      	beq.n	8011594 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xcc>
 801158a:	3301      	adds	r3, #1
 801158c:	105b      	asrs	r3, r3, #1
 801158e:	f8ad 3004 	strh.w	r3, [sp, #4]
 8011592:	e7f0      	b.n	8011576 <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xae>
 8011594:	f8bd 2004 	ldrh.w	r2, [sp, #4]
 8011598:	f8bd 3000 	ldrh.w	r3, [sp]
 801159c:	4413      	add	r3, r2
 801159e:	b29b      	uxth	r3, r3
 80115a0:	441a      	add	r2, r3
 80115a2:	f8ad 3000 	strh.w	r3, [sp]
 80115a6:	b212      	sxth	r2, r2
 80115a8:	4296      	cmp	r6, r2
 80115aa:	dae0      	bge.n	801156e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80115ac:	1aeb      	subs	r3, r5, r3
 80115ae:	f8ad 3004 	strh.w	r3, [sp, #4]
 80115b2:	e7dc      	b.n	801156e <_ZNK8touchgfx12CanvasWidget4drawERKNS_4RectE+0xa6>
 80115b4:	240253a0 	.word	0x240253a0

080115b8 <_ZNK8touchgfx12CanvasWidget10invalidateEv>:
 80115b8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80115ba:	6803      	ldr	r3, [r0, #0]
 80115bc:	4604      	mov	r4, r0
 80115be:	4601      	mov	r1, r0
 80115c0:	4668      	mov	r0, sp
 80115c2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80115c4:	4798      	blx	r3
 80115c6:	2100      	movs	r1, #0
 80115c8:	f9b4 2008 	ldrsh.w	r2, [r4, #8]
 80115cc:	4668      	mov	r0, sp
 80115ce:	f9b4 300a 	ldrsh.w	r3, [r4, #10]
 80115d2:	9102      	str	r1, [sp, #8]
 80115d4:	a902      	add	r1, sp, #8
 80115d6:	f8ad 200c 	strh.w	r2, [sp, #12]
 80115da:	f8ad 300e 	strh.w	r3, [sp, #14]
 80115de:	f7fd fc71 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80115e2:	6823      	ldr	r3, [r4, #0]
 80115e4:	4669      	mov	r1, sp
 80115e6:	4620      	mov	r0, r4
 80115e8:	691b      	ldr	r3, [r3, #16]
 80115ea:	4798      	blx	r3
 80115ec:	b004      	add	sp, #16
 80115ee:	bd10      	pop	{r4, pc}

080115f0 <_ZN8touchgfx12CanvasWidgetC1Ev>:
 80115f0:	2101      	movs	r1, #1
 80115f2:	2200      	movs	r2, #0
 80115f4:	f880 1025 	strb.w	r1, [r0, #37]	@ 0x25
 80115f8:	490a      	ldr	r1, [pc, #40]	@ (8011624 <_ZN8touchgfx12CanvasWidgetC1Ev+0x34>)
 80115fa:	8082      	strh	r2, [r0, #4]
 80115fc:	6001      	str	r1, [r0, #0]
 80115fe:	21ff      	movs	r1, #255	@ 0xff
 8011600:	80c2      	strh	r2, [r0, #6]
 8011602:	8102      	strh	r2, [r0, #8]
 8011604:	8142      	strh	r2, [r0, #10]
 8011606:	8182      	strh	r2, [r0, #12]
 8011608:	81c2      	strh	r2, [r0, #14]
 801160a:	8202      	strh	r2, [r0, #16]
 801160c:	8242      	strh	r2, [r0, #18]
 801160e:	61c2      	str	r2, [r0, #28]
 8011610:	8402      	strh	r2, [r0, #32]
 8011612:	8442      	strh	r2, [r0, #34]	@ 0x22
 8011614:	f880 2024 	strb.w	r2, [r0, #36]	@ 0x24
 8011618:	f880 1026 	strb.w	r1, [r0, #38]	@ 0x26
 801161c:	6282      	str	r2, [r0, #40]	@ 0x28
 801161e:	e9c0 2205 	strd	r2, r2, [r0, #20]
 8011622:	4770      	bx	lr
 8011624:	08025250 	.word	0x08025250

08011628 <_ZNK8touchgfx3Box12getSolidRectEv>:
 8011628:	2300      	movs	r3, #0
 801162a:	8083      	strh	r3, [r0, #4]
 801162c:	80c3      	strh	r3, [r0, #6]
 801162e:	8003      	strh	r3, [r0, #0]
 8011630:	8043      	strh	r3, [r0, #2]
 8011632:	f891 3026 	ldrb.w	r3, [r1, #38]	@ 0x26
 8011636:	2bff      	cmp	r3, #255	@ 0xff
 8011638:	bf01      	itttt	eq
 801163a:	890b      	ldrheq	r3, [r1, #8]
 801163c:	8083      	strheq	r3, [r0, #4]
 801163e:	894b      	ldrheq	r3, [r1, #10]
 8011640:	80c3      	strheq	r3, [r0, #6]
 8011642:	4770      	bx	lr

08011644 <_ZNK8touchgfx3Box4drawERKNS_4RectE>:
 8011644:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8011646:	4604      	mov	r4, r0
 8011648:	466b      	mov	r3, sp
 801164a:	6808      	ldr	r0, [r1, #0]
 801164c:	6849      	ldr	r1, [r1, #4]
 801164e:	c303      	stmia	r3!, {r0, r1}
 8011650:	6823      	ldr	r3, [r4, #0]
 8011652:	4669      	mov	r1, sp
 8011654:	4620      	mov	r0, r4
 8011656:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011658:	4798      	blx	r3
 801165a:	4b08      	ldr	r3, [pc, #32]	@ (801167c <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x38>)
 801165c:	681b      	ldr	r3, [r3, #0]
 801165e:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8011662:	b10a      	cbz	r2, 8011668 <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x24>
 8011664:	6cd8      	ldr	r0, [r3, #76]	@ 0x4c
 8011666:	b900      	cbnz	r0, 801166a <_ZNK8touchgfx3Box4drawERKNS_4RectE+0x26>
 8011668:	6898      	ldr	r0, [r3, #8]
 801166a:	6803      	ldr	r3, [r0, #0]
 801166c:	4669      	mov	r1, sp
 801166e:	6aa2      	ldr	r2, [r4, #40]	@ 0x28
 8011670:	6a1d      	ldr	r5, [r3, #32]
 8011672:	f894 3026 	ldrb.w	r3, [r4, #38]	@ 0x26
 8011676:	47a8      	blx	r5
 8011678:	b003      	add	sp, #12
 801167a:	bd30      	pop	{r4, r5, pc}
 801167c:	240253a8 	.word	0x240253a8

08011680 <_ZN8touchgfx3BoxD1Ev>:
 8011680:	4770      	bx	lr

08011682 <_ZN8touchgfx3BoxD0Ev>:
 8011682:	b510      	push	{r4, lr}
 8011684:	4604      	mov	r4, r0
 8011686:	212c      	movs	r1, #44	@ 0x2c
 8011688:	f00f fccd 	bl	8021026 <_ZdlPvj>
 801168c:	4620      	mov	r0, r4
 801168e:	bd10      	pop	{r4, pc}

08011690 <_ZNK8touchgfx3Box17invalidateContentEv>:
 8011690:	f890 2026 	ldrb.w	r2, [r0, #38]	@ 0x26
 8011694:	b12a      	cbz	r2, 80116a2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 8011696:	f890 2025 	ldrb.w	r2, [r0, #37]	@ 0x25
 801169a:	b112      	cbz	r2, 80116a2 <_ZNK8touchgfx3Box17invalidateContentEv+0x12>
 801169c:	6803      	ldr	r3, [r0, #0]
 801169e:	695b      	ldr	r3, [r3, #20]
 80116a0:	4718      	bx	r3
 80116a2:	4770      	bx	lr

080116a4 <_ZNK8touchgfx10ClickEvent12getEventTypeEv>:
 80116a4:	2000      	movs	r0, #0
 80116a6:	4770      	bx	lr

080116a8 <_ZN8touchgfx10ClickEventD1Ev>:
 80116a8:	4770      	bx	lr

080116aa <_ZN8touchgfx10ClickEventD0Ev>:
 80116aa:	b510      	push	{r4, lr}
 80116ac:	4604      	mov	r4, r0
 80116ae:	210c      	movs	r1, #12
 80116b0:	f00f fcb9 	bl	8021026 <_ZdlPvj>
 80116b4:	4620      	mov	r0, r4
 80116b6:	bd10      	pop	{r4, pc}

080116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>:
 80116b8:	b510      	push	{r4, lr}
 80116ba:	f9b1 4000 	ldrsh.w	r4, [r1]
 80116be:	888a      	ldrh	r2, [r1, #4]
 80116c0:	f9b0 3000 	ldrsh.w	r3, [r0]
 80116c4:	4422      	add	r2, r4
 80116c6:	b212      	sxth	r2, r2
 80116c8:	4293      	cmp	r3, r2
 80116ca:	da15      	bge.n	80116f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116cc:	8882      	ldrh	r2, [r0, #4]
 80116ce:	4413      	add	r3, r2
 80116d0:	b21b      	sxth	r3, r3
 80116d2:	429c      	cmp	r4, r3
 80116d4:	da10      	bge.n	80116f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116d6:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 80116da:	88c9      	ldrh	r1, [r1, #6]
 80116dc:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 80116e0:	4419      	add	r1, r3
 80116e2:	b209      	sxth	r1, r1
 80116e4:	428a      	cmp	r2, r1
 80116e6:	da07      	bge.n	80116f8 <_ZNK8touchgfx4Rect9intersectERKS0_+0x40>
 80116e8:	88c0      	ldrh	r0, [r0, #6]
 80116ea:	4410      	add	r0, r2
 80116ec:	b200      	sxth	r0, r0
 80116ee:	4283      	cmp	r3, r0
 80116f0:	bfac      	ite	ge
 80116f2:	2000      	movge	r0, #0
 80116f4:	2001      	movlt	r0, #1
 80116f6:	bd10      	pop	{r4, pc}
 80116f8:	2000      	movs	r0, #0
 80116fa:	e7fc      	b.n	80116f6 <_ZNK8touchgfx4Rect9intersectERKS0_+0x3e>

080116fc <_ZN8touchgfx7OutlineD1Ev>:
 80116fc:	4770      	bx	lr

080116fe <_ZN8touchgfx7OutlineD0Ev>:
 80116fe:	b510      	push	{r4, lr}
 8011700:	4604      	mov	r4, r0
 8011702:	2130      	movs	r1, #48	@ 0x30
 8011704:	f00f fc8f 	bl	8021026 <_ZdlPvj>
 8011708:	4620      	mov	r0, r4
 801170a:	bd10      	pop	{r4, pc}

0801170c <_ZN8touchgfx7Outline5resetEv>:
 801170c:	b510      	push	{r4, lr}
 801170e:	4604      	mov	r4, r0
 8011710:	f000 fe72 	bl	80123f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>
 8011714:	60e0      	str	r0, [r4, #12]
 8011716:	f000 fe75 	bl	8012404 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>
 801171a:	68e3      	ldr	r3, [r4, #12]
 801171c:	08c0      	lsrs	r0, r0, #3
 801171e:	2200      	movs	r2, #0
 8011720:	f647 71ff 	movw	r1, #32767	@ 0x7fff
 8011724:	6123      	str	r3, [r4, #16]
 8011726:	3801      	subs	r0, #1
 8011728:	60a2      	str	r2, [r4, #8]
 801172a:	6060      	str	r0, [r4, #4]
 801172c:	8019      	strh	r1, [r3, #0]
 801172e:	8059      	strh	r1, [r3, #2]
 8011730:	809a      	strh	r2, [r3, #4]
 8011732:	80da      	strh	r2, [r3, #6]
 8011734:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8011736:	f023 0301 	bic.w	r3, r3, #1
 801173a:	f043 0302 	orr.w	r3, r3, #2
 801173e:	6263      	str	r3, [r4, #36]	@ 0x24
 8011740:	bd10      	pop	{r4, pc}
	...

08011744 <_ZN8touchgfx7OutlineC1Ev>:
 8011744:	4b0a      	ldr	r3, [pc, #40]	@ (8011770 <_ZN8touchgfx7OutlineC1Ev+0x2c>)
 8011746:	b510      	push	{r4, lr}
 8011748:	6003      	str	r3, [r0, #0]
 801174a:	2300      	movs	r3, #0
 801174c:	4604      	mov	r4, r0
 801174e:	6243      	str	r3, [r0, #36]	@ 0x24
 8011750:	e9c0 3301 	strd	r3, r3, [r0, #4]
 8011754:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8011758:	e9c0 3305 	strd	r3, r3, [r0, #20]
 801175c:	e9c0 3307 	strd	r3, r3, [r0, #28]
 8011760:	f06f 4300 	mvn.w	r3, #2147483648	@ 0x80000000
 8011764:	e9c0 330a 	strd	r3, r3, [r0, #40]	@ 0x28
 8011768:	f7ff ffd0 	bl	801170c <_ZN8touchgfx7Outline5resetEv>
 801176c:	4620      	mov	r0, r4
 801176e:	bd10      	pop	{r4, pc}
 8011770:	08025344 	.word	0x08025344

08011774 <_ZN8touchgfx7Outline10renderLineEiiii>:
 8011774:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011778:	b093      	sub	sp, #76	@ 0x4c
 801177a:	1156      	asrs	r6, r2, #5
 801177c:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801177e:	9305      	str	r3, [sp, #20]
 8011780:	1153      	asrs	r3, r2, #5
 8011782:	f004 051f 	and.w	r5, r4, #31
 8011786:	9303      	str	r3, [sp, #12]
 8011788:	1163      	asrs	r3, r4, #5
 801178a:	9504      	str	r5, [sp, #16]
 801178c:	1165      	asrs	r5, r4, #5
 801178e:	9306      	str	r3, [sp, #24]
 8011790:	f002 031f 	and.w	r3, r2, #31
 8011794:	42ae      	cmp	r6, r5
 8011796:	f040 80f4 	bne.w	8011982 <_ZN8touchgfx7Outline10renderLineEiiii+0x20e>
 801179a:	9c04      	ldr	r4, [sp, #16]
 801179c:	9a05      	ldr	r2, [sp, #20]
 801179e:	42a3      	cmp	r3, r4
 80117a0:	ea4f 1e62 	mov.w	lr, r2, asr #5
 80117a4:	6902      	ldr	r2, [r0, #16]
 80117a6:	d125      	bne.n	80117f4 <_ZN8touchgfx7Outline10renderLineEiiii+0x80>
 80117a8:	f9b2 3000 	ldrsh.w	r3, [r2]
 80117ac:	459e      	cmp	lr, r3
 80117ae:	d103      	bne.n	80117b8 <_ZN8touchgfx7Outline10renderLineEiiii+0x44>
 80117b0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80117b4:	429e      	cmp	r6, r3
 80117b6:	d035      	beq.n	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80117b8:	88d1      	ldrh	r1, [r2, #6]
 80117ba:	8893      	ldrh	r3, [r2, #4]
 80117bc:	430b      	orrs	r3, r1
 80117be:	d010      	beq.n	80117e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80117c0:	f9b2 3002 	ldrsh.w	r3, [r2, #2]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	db0c      	blt.n	80117e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80117c8:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 80117ca:	428b      	cmp	r3, r1
 80117cc:	da09      	bge.n	80117e2 <_ZN8touchgfx7Outline10renderLineEiiii+0x6e>
 80117ce:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 80117d2:	428b      	cmp	r3, r1
 80117d4:	f103 0301 	add.w	r3, r3, #1
 80117d8:	bf38      	it	cc
 80117da:	3208      	addcc	r2, #8
 80117dc:	6083      	str	r3, [r0, #8]
 80117de:	bf38      	it	cc
 80117e0:	6102      	strcc	r2, [r0, #16]
 80117e2:	6903      	ldr	r3, [r0, #16]
 80117e4:	9a03      	ldr	r2, [sp, #12]
 80117e6:	f8a3 e000 	strh.w	lr, [r3]
 80117ea:	805a      	strh	r2, [r3, #2]
 80117ec:	2200      	movs	r2, #0
 80117ee:	809a      	strh	r2, [r3, #4]
 80117f0:	80da      	strh	r2, [r3, #6]
 80117f2:	e017      	b.n	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 80117f4:	9c05      	ldr	r4, [sp, #20]
 80117f6:	114e      	asrs	r6, r1, #5
 80117f8:	f001 0c1f 	and.w	ip, r1, #31
 80117fc:	f8b2 8004 	ldrh.w	r8, [r2, #4]
 8011800:	f004 041f 	and.w	r4, r4, #31
 8011804:	4576      	cmp	r6, lr
 8011806:	f8b2 a006 	ldrh.w	sl, [r2, #6]
 801180a:	9402      	str	r4, [sp, #8]
 801180c:	9c04      	ldr	r4, [sp, #16]
 801180e:	eba4 0403 	sub.w	r4, r4, r3
 8011812:	d10a      	bne.n	801182a <_ZN8touchgfx7Outline10renderLineEiiii+0xb6>
 8011814:	9b02      	ldr	r3, [sp, #8]
 8011816:	44a0      	add	r8, r4
 8011818:	449c      	add	ip, r3
 801181a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801181e:	fb04 a40c 	mla	r4, r4, ip, sl
 8011822:	80d4      	strh	r4, [r2, #6]
 8011824:	b013      	add	sp, #76	@ 0x4c
 8011826:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801182a:	9d05      	ldr	r5, [sp, #20]
 801182c:	1a69      	subs	r1, r5, r1
 801182e:	bf51      	iteee	pl
 8011830:	f1cc 0520 	rsbpl	r5, ip, #32
 8011834:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011838:	4249      	negmi	r1, r1
 801183a:	2500      	movmi	r5, #0
 801183c:	bf5d      	ittte	pl
 801183e:	436c      	mulpl	r4, r5
 8011840:	2520      	movpl	r5, #32
 8011842:	f04f 0901 	movpl.w	r9, #1
 8011846:	f04f 39ff 	movmi.w	r9, #4294967295
 801184a:	9501      	str	r5, [sp, #4]
 801184c:	9f01      	ldr	r7, [sp, #4]
 801184e:	444e      	add	r6, r9
 8011850:	fb94 f5f1 	sdiv	r5, r4, r1
 8011854:	fb01 4415 	mls	r4, r1, r5, r4
 8011858:	44bc      	add	ip, r7
 801185a:	2c00      	cmp	r4, #0
 801185c:	bfbc      	itt	lt
 801185e:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011862:	1864      	addlt	r4, r4, r1
 8011864:	44a8      	add	r8, r5
 8011866:	fb05 ac0c 	mla	ip, r5, ip, sl
 801186a:	f8a2 8004 	strh.w	r8, [r2, #4]
 801186e:	f8a2 c006 	strh.w	ip, [r2, #6]
 8011872:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011876:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 801187a:	f8bc 2004 	ldrh.w	r2, [ip, #4]
 801187e:	ea58 0202 	orrs.w	r2, r8, r2
 8011882:	d011      	beq.n	80118a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011884:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011888:	f1b8 0f00 	cmp.w	r8, #0
 801188c:	db0c      	blt.n	80118a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 801188e:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011890:	4590      	cmp	r8, r2
 8011892:	da09      	bge.n	80118a8 <_ZN8touchgfx7Outline10renderLineEiiii+0x134>
 8011894:	e9d0 2801 	ldrd	r2, r8, [r0, #4]
 8011898:	4590      	cmp	r8, r2
 801189a:	bf3c      	itt	cc
 801189c:	f10c 0208 	addcc.w	r2, ip, #8
 80118a0:	6102      	strcc	r2, [r0, #16]
 80118a2:	f108 0201 	add.w	r2, r8, #1
 80118a6:	6082      	str	r2, [r0, #8]
 80118a8:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80118ac:	2700      	movs	r7, #0
 80118ae:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80118b2:	45b6      	cmp	lr, r6
 80118b4:	f8ac 6000 	strh.w	r6, [ip]
 80118b8:	442b      	add	r3, r5
 80118ba:	f8ac 2002 	strh.w	r2, [ip, #2]
 80118be:	f8ac 7004 	strh.w	r7, [ip, #4]
 80118c2:	f8ac 7006 	strh.w	r7, [ip, #6]
 80118c6:	d04b      	beq.n	8011960 <_ZN8touchgfx7Outline10renderLineEiiii+0x1ec>
 80118c8:	9f04      	ldr	r7, [sp, #16]
 80118ca:	1a64      	subs	r4, r4, r1
 80118cc:	f04f 0a00 	mov.w	sl, #0
 80118d0:	1aff      	subs	r7, r7, r3
 80118d2:	443d      	add	r5, r7
 80118d4:	016d      	lsls	r5, r5, #5
 80118d6:	fb95 f8f1 	sdiv	r8, r5, r1
 80118da:	fb01 5518 	mls	r5, r1, r8, r5
 80118de:	2d00      	cmp	r5, #0
 80118e0:	bfbc      	itt	lt
 80118e2:	f108 38ff 	addlt.w	r8, r8, #4294967295
 80118e6:	186d      	addlt	r5, r5, r1
 80118e8:	f108 0701 	add.w	r7, r8, #1
 80118ec:	9703      	str	r7, [sp, #12]
 80118ee:	f8d0 c010 	ldr.w	ip, [r0, #16]
 80118f2:	1964      	adds	r4, r4, r5
 80118f4:	444e      	add	r6, r9
 80118f6:	bf54      	ite	pl
 80118f8:	9f03      	ldrpl	r7, [sp, #12]
 80118fa:	4647      	movmi	r7, r8
 80118fc:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8011900:	bf58      	it	pl
 8011902:	1a64      	subpl	r4, r4, r1
 8011904:	443b      	add	r3, r7
 8011906:	44bb      	add	fp, r7
 8011908:	f8ac b004 	strh.w	fp, [ip, #4]
 801190c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011910:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011914:	f8ac b006 	strh.w	fp, [ip, #6]
 8011918:	f8d0 c010 	ldr.w	ip, [r0, #16]
 801191c:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011920:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011924:	ea5b 0707 	orrs.w	r7, fp, r7
 8011928:	d011      	beq.n	801194e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801192a:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 801192e:	f1bb 0f00 	cmp.w	fp, #0
 8011932:	db0c      	blt.n	801194e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 8011934:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011936:	45bb      	cmp	fp, r7
 8011938:	da09      	bge.n	801194e <_ZN8touchgfx7Outline10renderLineEiiii+0x1da>
 801193a:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 801193e:	45bb      	cmp	fp, r7
 8011940:	bf3c      	itt	cc
 8011942:	f10c 0708 	addcc.w	r7, ip, #8
 8011946:	6107      	strcc	r7, [r0, #16]
 8011948:	f10b 0701 	add.w	r7, fp, #1
 801194c:	6087      	str	r7, [r0, #8]
 801194e:	6907      	ldr	r7, [r0, #16]
 8011950:	45b6      	cmp	lr, r6
 8011952:	803e      	strh	r6, [r7, #0]
 8011954:	807a      	strh	r2, [r7, #2]
 8011956:	f8a7 a004 	strh.w	sl, [r7, #4]
 801195a:	f8a7 a006 	strh.w	sl, [r7, #6]
 801195e:	d1c6      	bne.n	80118ee <_ZN8touchgfx7Outline10renderLineEiiii+0x17a>
 8011960:	9a04      	ldr	r2, [sp, #16]
 8011962:	1ad3      	subs	r3, r2, r3
 8011964:	6902      	ldr	r2, [r0, #16]
 8011966:	8891      	ldrh	r1, [r2, #4]
 8011968:	88d6      	ldrh	r6, [r2, #6]
 801196a:	4419      	add	r1, r3
 801196c:	8091      	strh	r1, [r2, #4]
 801196e:	9902      	ldr	r1, [sp, #8]
 8011970:	f101 0c20 	add.w	ip, r1, #32
 8011974:	9901      	ldr	r1, [sp, #4]
 8011976:	ebac 0c01 	sub.w	ip, ip, r1
 801197a:	fb03 630c 	mla	r3, r3, ip, r6
 801197e:	80d3      	strh	r3, [r2, #6]
 8011980:	e750      	b.n	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011982:	9d05      	ldr	r5, [sp, #20]
 8011984:	1aa2      	subs	r2, r4, r2
 8011986:	eba5 0501 	sub.w	r5, r5, r1
 801198a:	9202      	str	r2, [sp, #8]
 801198c:	9508      	str	r5, [sp, #32]
 801198e:	f140 8128 	bpl.w	8011be2 <_ZN8touchgfx7Outline10renderLineEiiii+0x46e>
 8011992:	9a03      	ldr	r2, [sp, #12]
 8011994:	2a00      	cmp	r2, #0
 8011996:	f6ff af45 	blt.w	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 801199a:	9a02      	ldr	r2, [sp, #8]
 801199c:	f04f 34ff 	mov.w	r4, #4294967295
 80119a0:	4252      	negs	r2, r2
 80119a2:	940b      	str	r4, [sp, #44]	@ 0x2c
 80119a4:	2400      	movs	r4, #0
 80119a6:	9202      	str	r2, [sp, #8]
 80119a8:	9a06      	ldr	r2, [sp, #24]
 80119aa:	ea42 72e2 	orr.w	r2, r2, r2, asr #31
 80119ae:	9206      	str	r2, [sp, #24]
 80119b0:	462a      	mov	r2, r5
 80119b2:	435a      	muls	r2, r3
 80119b4:	9401      	str	r4, [sp, #4]
 80119b6:	9c02      	ldr	r4, [sp, #8]
 80119b8:	9d02      	ldr	r5, [sp, #8]
 80119ba:	fb92 f4f4 	sdiv	r4, r2, r4
 80119be:	fb05 2214 	mls	r2, r5, r4, r2
 80119c2:	2a00      	cmp	r2, #0
 80119c4:	9207      	str	r2, [sp, #28]
 80119c6:	bfbc      	itt	lt
 80119c8:	1952      	addlt	r2, r2, r5
 80119ca:	f104 34ff 	addlt.w	r4, r4, #4294967295
 80119ce:	6905      	ldr	r5, [r0, #16]
 80119d0:	bfb8      	it	lt
 80119d2:	9207      	strlt	r2, [sp, #28]
 80119d4:	eb04 0901 	add.w	r9, r4, r1
 80119d8:	9a01      	ldr	r2, [sp, #4]
 80119da:	ea4f 1669 	mov.w	r6, r9, asr #5
 80119de:	429a      	cmp	r2, r3
 80119e0:	f040 8111 	bne.w	8011c06 <_ZN8touchgfx7Outline10renderLineEiiii+0x492>
 80119e4:	f9b5 3000 	ldrsh.w	r3, [r5]
 80119e8:	429e      	cmp	r6, r3
 80119ea:	d104      	bne.n	80119f6 <_ZN8touchgfx7Outline10renderLineEiiii+0x282>
 80119ec:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80119f0:	9a03      	ldr	r2, [sp, #12]
 80119f2:	429a      	cmp	r2, r3
 80119f4:	d01b      	beq.n	8011a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 80119f6:	88ea      	ldrh	r2, [r5, #6]
 80119f8:	88ab      	ldrh	r3, [r5, #4]
 80119fa:	4313      	orrs	r3, r2
 80119fc:	d010      	beq.n	8011a20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 80119fe:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 8011a02:	2a00      	cmp	r2, #0
 8011a04:	db0c      	blt.n	8011a20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011a06:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011a08:	429a      	cmp	r2, r3
 8011a0a:	da09      	bge.n	8011a20 <_ZN8touchgfx7Outline10renderLineEiiii+0x2ac>
 8011a0c:	e9d0 3201 	ldrd	r3, r2, [r0, #4]
 8011a10:	429a      	cmp	r2, r3
 8011a12:	f102 0201 	add.w	r2, r2, #1
 8011a16:	bf38      	it	cc
 8011a18:	3508      	addcc	r5, #8
 8011a1a:	6082      	str	r2, [r0, #8]
 8011a1c:	bf38      	it	cc
 8011a1e:	6105      	strcc	r5, [r0, #16]
 8011a20:	6903      	ldr	r3, [r0, #16]
 8011a22:	9a03      	ldr	r2, [sp, #12]
 8011a24:	801e      	strh	r6, [r3, #0]
 8011a26:	805a      	strh	r2, [r3, #2]
 8011a28:	2200      	movs	r2, #0
 8011a2a:	809a      	strh	r2, [r3, #4]
 8011a2c:	80da      	strh	r2, [r3, #6]
 8011a2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011a30:	9a03      	ldr	r2, [sp, #12]
 8011a32:	6901      	ldr	r1, [r0, #16]
 8011a34:	441a      	add	r2, r3
 8011a36:	f9b1 3000 	ldrsh.w	r3, [r1]
 8011a3a:	42b3      	cmp	r3, r6
 8011a3c:	d103      	bne.n	8011a46 <_ZN8touchgfx7Outline10renderLineEiiii+0x2d2>
 8011a3e:	f9b1 3002 	ldrsh.w	r3, [r1, #2]
 8011a42:	429a      	cmp	r2, r3
 8011a44:	d01a      	beq.n	8011a7c <_ZN8touchgfx7Outline10renderLineEiiii+0x308>
 8011a46:	88cc      	ldrh	r4, [r1, #6]
 8011a48:	888b      	ldrh	r3, [r1, #4]
 8011a4a:	4323      	orrs	r3, r4
 8011a4c:	d010      	beq.n	8011a70 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011a4e:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011a52:	2c00      	cmp	r4, #0
 8011a54:	db0c      	blt.n	8011a70 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011a56:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011a58:	429c      	cmp	r4, r3
 8011a5a:	da09      	bge.n	8011a70 <_ZN8touchgfx7Outline10renderLineEiiii+0x2fc>
 8011a5c:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011a60:	429c      	cmp	r4, r3
 8011a62:	f104 0401 	add.w	r4, r4, #1
 8011a66:	bf38      	it	cc
 8011a68:	3108      	addcc	r1, #8
 8011a6a:	6084      	str	r4, [r0, #8]
 8011a6c:	bf38      	it	cc
 8011a6e:	6101      	strcc	r1, [r0, #16]
 8011a70:	6903      	ldr	r3, [r0, #16]
 8011a72:	2100      	movs	r1, #0
 8011a74:	801e      	strh	r6, [r3, #0]
 8011a76:	805a      	strh	r2, [r3, #2]
 8011a78:	8099      	strh	r1, [r3, #4]
 8011a7a:	80d9      	strh	r1, [r3, #6]
 8011a7c:	9b06      	ldr	r3, [sp, #24]
 8011a7e:	4293      	cmp	r3, r2
 8011a80:	f000 8082 	beq.w	8011b88 <_ZN8touchgfx7Outline10renderLineEiiii+0x414>
 8011a84:	9b08      	ldr	r3, [sp, #32]
 8011a86:	9902      	ldr	r1, [sp, #8]
 8011a88:	015b      	lsls	r3, r3, #5
 8011a8a:	9c02      	ldr	r4, [sp, #8]
 8011a8c:	fb93 f1f1 	sdiv	r1, r3, r1
 8011a90:	fb04 3311 	mls	r3, r4, r1, r3
 8011a94:	9103      	str	r1, [sp, #12]
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	9308      	str	r3, [sp, #32]
 8011a9a:	da04      	bge.n	8011aa6 <_ZN8touchgfx7Outline10renderLineEiiii+0x332>
 8011a9c:	1e4b      	subs	r3, r1, #1
 8011a9e:	9303      	str	r3, [sp, #12]
 8011aa0:	9b08      	ldr	r3, [sp, #32]
 8011aa2:	4423      	add	r3, r4
 8011aa4:	9308      	str	r3, [sp, #32]
 8011aa6:	9b07      	ldr	r3, [sp, #28]
 8011aa8:	464f      	mov	r7, r9
 8011aaa:	9902      	ldr	r1, [sp, #8]
 8011aac:	2600      	movs	r6, #0
 8011aae:	1a5b      	subs	r3, r3, r1
 8011ab0:	9307      	str	r3, [sp, #28]
 8011ab2:	9b01      	ldr	r3, [sp, #4]
 8011ab4:	f1c3 0320 	rsb	r3, r3, #32
 8011ab8:	930e      	str	r3, [sp, #56]	@ 0x38
 8011aba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8011abc:	9b01      	ldr	r3, [sp, #4]
 8011abe:	1a5b      	subs	r3, r3, r1
 8011ac0:	930a      	str	r3, [sp, #40]	@ 0x28
 8011ac2:	e9dd 3107 	ldrd	r3, r1, [sp, #28]
 8011ac6:	185b      	adds	r3, r3, r1
 8011ac8:	bf58      	it	pl
 8011aca:	9902      	ldrpl	r1, [sp, #8]
 8011acc:	9307      	str	r3, [sp, #28]
 8011ace:	bf57      	itett	pl
 8011ad0:	1a5b      	subpl	r3, r3, r1
 8011ad2:	9903      	ldrmi	r1, [sp, #12]
 8011ad4:	9307      	strpl	r3, [sp, #28]
 8011ad6:	9b03      	ldrpl	r3, [sp, #12]
 8011ad8:	bf58      	it	pl
 8011ada:	1c59      	addpl	r1, r3, #1
 8011adc:	2a00      	cmp	r2, #0
 8011ade:	4489      	add	r9, r1
 8011ae0:	ea4f 1a69 	mov.w	sl, r9, asr #5
 8011ae4:	db2e      	blt.n	8011b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011ae6:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011ae8:	4293      	cmp	r3, r2
 8011aea:	dd2b      	ble.n	8011b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011aec:	9c01      	ldr	r4, [sp, #4]
 8011aee:	6905      	ldr	r5, [r0, #16]
 8011af0:	46a0      	mov	r8, r4
 8011af2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 8011af4:	f9b5 c004 	ldrsh.w	ip, [r5, #4]
 8011af8:	45a0      	cmp	r8, r4
 8011afa:	f9b5 e006 	ldrsh.w	lr, [r5, #6]
 8011afe:	f040 814c 	bne.w	8011d9a <_ZN8touchgfx7Outline10renderLineEiiii+0x626>
 8011b02:	f9b5 1000 	ldrsh.w	r1, [r5]
 8011b06:	4551      	cmp	r1, sl
 8011b08:	d103      	bne.n	8011b12 <_ZN8touchgfx7Outline10renderLineEiiii+0x39e>
 8011b0a:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011b0e:	4291      	cmp	r1, r2
 8011b10:	d018      	beq.n	8011b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011b12:	ea5c 010e 	orrs.w	r1, ip, lr
 8011b16:	d00f      	beq.n	8011b38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011b18:	f9b5 1002 	ldrsh.w	r1, [r5, #2]
 8011b1c:	2900      	cmp	r1, #0
 8011b1e:	db0b      	blt.n	8011b38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011b20:	428b      	cmp	r3, r1
 8011b22:	dd09      	ble.n	8011b38 <_ZN8touchgfx7Outline10renderLineEiiii+0x3c4>
 8011b24:	e9d0 3101 	ldrd	r3, r1, [r0, #4]
 8011b28:	4299      	cmp	r1, r3
 8011b2a:	f101 0101 	add.w	r1, r1, #1
 8011b2e:	bf38      	it	cc
 8011b30:	3508      	addcc	r5, #8
 8011b32:	6081      	str	r1, [r0, #8]
 8011b34:	bf38      	it	cc
 8011b36:	6105      	strcc	r5, [r0, #16]
 8011b38:	6903      	ldr	r3, [r0, #16]
 8011b3a:	f8a3 a000 	strh.w	sl, [r3]
 8011b3e:	805a      	strh	r2, [r3, #2]
 8011b40:	809e      	strh	r6, [r3, #4]
 8011b42:	80de      	strh	r6, [r3, #6]
 8011b44:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8011b46:	6901      	ldr	r1, [r0, #16]
 8011b48:	441a      	add	r2, r3
 8011b4a:	88cc      	ldrh	r4, [r1, #6]
 8011b4c:	888b      	ldrh	r3, [r1, #4]
 8011b4e:	4323      	orrs	r3, r4
 8011b50:	d010      	beq.n	8011b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011b52:	f9b1 4002 	ldrsh.w	r4, [r1, #2]
 8011b56:	2c00      	cmp	r4, #0
 8011b58:	db0c      	blt.n	8011b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011b5a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 8011b5c:	429c      	cmp	r4, r3
 8011b5e:	da09      	bge.n	8011b74 <_ZN8touchgfx7Outline10renderLineEiiii+0x400>
 8011b60:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 8011b64:	429c      	cmp	r4, r3
 8011b66:	f104 0401 	add.w	r4, r4, #1
 8011b6a:	bf38      	it	cc
 8011b6c:	3108      	addcc	r1, #8
 8011b6e:	6084      	str	r4, [r0, #8]
 8011b70:	bf38      	it	cc
 8011b72:	6101      	strcc	r1, [r0, #16]
 8011b74:	6903      	ldr	r3, [r0, #16]
 8011b76:	464f      	mov	r7, r9
 8011b78:	f8a3 a000 	strh.w	sl, [r3]
 8011b7c:	805a      	strh	r2, [r3, #2]
 8011b7e:	809e      	strh	r6, [r3, #4]
 8011b80:	80de      	strh	r6, [r3, #6]
 8011b82:	9b06      	ldr	r3, [sp, #24]
 8011b84:	4293      	cmp	r3, r2
 8011b86:	d19c      	bne.n	8011ac2 <_ZN8touchgfx7Outline10renderLineEiiii+0x34e>
 8011b88:	9b01      	ldr	r3, [sp, #4]
 8011b8a:	6907      	ldr	r7, [r0, #16]
 8011b8c:	f1c3 0620 	rsb	r6, r3, #32
 8011b90:	9b05      	ldr	r3, [sp, #20]
 8011b92:	ea4f 1e63 	mov.w	lr, r3, asr #5
 8011b96:	9b04      	ldr	r3, [sp, #16]
 8011b98:	429e      	cmp	r6, r3
 8011b9a:	f040 81c7 	bne.w	8011f2c <_ZN8touchgfx7Outline10renderLineEiiii+0x7b8>
 8011b9e:	f9b7 3000 	ldrsh.w	r3, [r7]
 8011ba2:	459e      	cmp	lr, r3
 8011ba4:	d104      	bne.n	8011bb0 <_ZN8touchgfx7Outline10renderLineEiiii+0x43c>
 8011ba6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011baa:	429a      	cmp	r2, r3
 8011bac:	f43f ae3a 	beq.w	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011bb0:	88f9      	ldrh	r1, [r7, #6]
 8011bb2:	88bb      	ldrh	r3, [r7, #4]
 8011bb4:	430b      	orrs	r3, r1
 8011bb6:	d010      	beq.n	8011bda <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011bb8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8011bbc:	2b00      	cmp	r3, #0
 8011bbe:	db0c      	blt.n	8011bda <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011bc0:	6ac1      	ldr	r1, [r0, #44]	@ 0x2c
 8011bc2:	428b      	cmp	r3, r1
 8011bc4:	da09      	bge.n	8011bda <_ZN8touchgfx7Outline10renderLineEiiii+0x466>
 8011bc6:	e9d0 1301 	ldrd	r1, r3, [r0, #4]
 8011bca:	428b      	cmp	r3, r1
 8011bcc:	f103 0301 	add.w	r3, r3, #1
 8011bd0:	bf38      	it	cc
 8011bd2:	3708      	addcc	r7, #8
 8011bd4:	6083      	str	r3, [r0, #8]
 8011bd6:	bf38      	it	cc
 8011bd8:	6107      	strcc	r7, [r0, #16]
 8011bda:	6903      	ldr	r3, [r0, #16]
 8011bdc:	f8a3 e000 	strh.w	lr, [r3]
 8011be0:	e603      	b.n	80117ea <_ZN8touchgfx7Outline10renderLineEiiii+0x76>
 8011be2:	6ac2      	ldr	r2, [r0, #44]	@ 0x2c
 8011be4:	9c03      	ldr	r4, [sp, #12]
 8011be6:	42a2      	cmp	r2, r4
 8011be8:	f6ff ae1c 	blt.w	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011bec:	9c06      	ldr	r4, [sp, #24]
 8011bee:	42a2      	cmp	r2, r4
 8011bf0:	9c08      	ldr	r4, [sp, #32]
 8011bf2:	bfbc      	itt	lt
 8011bf4:	3201      	addlt	r2, #1
 8011bf6:	9206      	strlt	r2, [sp, #24]
 8011bf8:	f1c3 0220 	rsb	r2, r3, #32
 8011bfc:	4362      	muls	r2, r4
 8011bfe:	2401      	movs	r4, #1
 8011c00:	940b      	str	r4, [sp, #44]	@ 0x2c
 8011c02:	2420      	movs	r4, #32
 8011c04:	e6d6      	b.n	80119b4 <_ZN8touchgfx7Outline10renderLineEiiii+0x240>
 8011c06:	ea4f 1861 	mov.w	r8, r1, asr #5
 8011c0a:	f009 021f 	and.w	r2, r9, #31
 8011c0e:	f001 011f 	and.w	r1, r1, #31
 8011c12:	f8b5 e004 	ldrh.w	lr, [r5, #4]
 8011c16:	920c      	str	r2, [sp, #48]	@ 0x30
 8011c18:	45b0      	cmp	r8, r6
 8011c1a:	9a01      	ldr	r2, [sp, #4]
 8011c1c:	f8b5 a006 	ldrh.w	sl, [r5, #6]
 8011c20:	eba2 0203 	sub.w	r2, r2, r3
 8011c24:	d108      	bne.n	8011c38 <_ZN8touchgfx7Outline10renderLineEiiii+0x4c4>
 8011c26:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011c28:	4496      	add	lr, r2
 8011c2a:	4419      	add	r1, r3
 8011c2c:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011c30:	fb02 a101 	mla	r1, r2, r1, sl
 8011c34:	80e9      	strh	r1, [r5, #6]
 8011c36:	e6fa      	b.n	8011a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011c38:	2c00      	cmp	r4, #0
 8011c3a:	f2c0 80a7 	blt.w	8011d8c <_ZN8touchgfx7Outline10renderLineEiiii+0x618>
 8011c3e:	2701      	movs	r7, #1
 8011c40:	f1c1 0c20 	rsb	ip, r1, #32
 8011c44:	970a      	str	r7, [sp, #40]	@ 0x28
 8011c46:	2720      	movs	r7, #32
 8011c48:	fb02 f20c 	mul.w	r2, r2, ip
 8011c4c:	9709      	str	r7, [sp, #36]	@ 0x24
 8011c4e:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 8011c50:	fb92 fcf4 	sdiv	ip, r2, r4
 8011c54:	fb04 221c 	mls	r2, r4, ip, r2
 8011c58:	4439      	add	r1, r7
 8011c5a:	2a00      	cmp	r2, #0
 8011c5c:	bfbc      	itt	lt
 8011c5e:	f10c 3cff 	addlt.w	ip, ip, #4294967295
 8011c62:	1912      	addlt	r2, r2, r4
 8011c64:	fb0c a101 	mla	r1, ip, r1, sl
 8011c68:	44e6      	add	lr, ip
 8011c6a:	80e9      	strh	r1, [r5, #6]
 8011c6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011c6e:	f8a5 e004 	strh.w	lr, [r5, #4]
 8011c72:	eb08 0501 	add.w	r5, r8, r1
 8011c76:	6901      	ldr	r1, [r0, #16]
 8011c78:	f8b1 8006 	ldrh.w	r8, [r1, #6]
 8011c7c:	f8b1 e004 	ldrh.w	lr, [r1, #4]
 8011c80:	ea58 070e 	orrs.w	r7, r8, lr
 8011c84:	d010      	beq.n	8011ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011c86:	f9b1 e002 	ldrsh.w	lr, [r1, #2]
 8011c8a:	f1be 0f00 	cmp.w	lr, #0
 8011c8e:	db0b      	blt.n	8011ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011c90:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011c92:	45be      	cmp	lr, r7
 8011c94:	da08      	bge.n	8011ca8 <_ZN8touchgfx7Outline10renderLineEiiii+0x534>
 8011c96:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011c9a:	45be      	cmp	lr, r7
 8011c9c:	bf3c      	itt	cc
 8011c9e:	3108      	addcc	r1, #8
 8011ca0:	6101      	strcc	r1, [r0, #16]
 8011ca2:	f10e 0101 	add.w	r1, lr, #1
 8011ca6:	6081      	str	r1, [r0, #8]
 8011ca8:	6901      	ldr	r1, [r0, #16]
 8011caa:	f04f 0e00 	mov.w	lr, #0
 8011cae:	f9bd 800c 	ldrsh.w	r8, [sp, #12]
 8011cb2:	42ae      	cmp	r6, r5
 8011cb4:	800d      	strh	r5, [r1, #0]
 8011cb6:	4463      	add	r3, ip
 8011cb8:	f8a1 8002 	strh.w	r8, [r1, #2]
 8011cbc:	f8a1 e004 	strh.w	lr, [r1, #4]
 8011cc0:	f8a1 e006 	strh.w	lr, [r1, #6]
 8011cc4:	d053      	beq.n	8011d6e <_ZN8touchgfx7Outline10renderLineEiiii+0x5fa>
 8011cc6:	9901      	ldr	r1, [sp, #4]
 8011cc8:	1b12      	subs	r2, r2, r4
 8011cca:	1ac9      	subs	r1, r1, r3
 8011ccc:	4461      	add	r1, ip
 8011cce:	0149      	lsls	r1, r1, #5
 8011cd0:	fb91 fef4 	sdiv	lr, r1, r4
 8011cd4:	fb04 111e 	mls	r1, r4, lr, r1
 8011cd8:	2900      	cmp	r1, #0
 8011cda:	bfbc      	itt	lt
 8011cdc:	f10e 3eff 	addlt.w	lr, lr, #4294967295
 8011ce0:	1909      	addlt	r1, r1, r4
 8011ce2:	f10e 0701 	add.w	r7, lr, #1
 8011ce6:	970d      	str	r7, [sp, #52]	@ 0x34
 8011ce8:	f8d0 a010 	ldr.w	sl, [r0, #16]
 8011cec:	1852      	adds	r2, r2, r1
 8011cee:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8011cf0:	bf54      	ite	pl
 8011cf2:	f8dd c034 	ldrpl.w	ip, [sp, #52]	@ 0x34
 8011cf6:	46f4      	movmi	ip, lr
 8011cf8:	f8ba b004 	ldrh.w	fp, [sl, #4]
 8011cfc:	bf58      	it	pl
 8011cfe:	1b12      	subpl	r2, r2, r4
 8011d00:	4463      	add	r3, ip
 8011d02:	443d      	add	r5, r7
 8011d04:	44e3      	add	fp, ip
 8011d06:	f8aa b004 	strh.w	fp, [sl, #4]
 8011d0a:	f8ba b006 	ldrh.w	fp, [sl, #6]
 8011d0e:	eb0b 1b4c 	add.w	fp, fp, ip, lsl #5
 8011d12:	f8aa b006 	strh.w	fp, [sl, #6]
 8011d16:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011d1a:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8011d1e:	f8bc a004 	ldrh.w	sl, [ip, #4]
 8011d22:	ea5b 070a 	orrs.w	r7, fp, sl
 8011d26:	d014      	beq.n	8011d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011d28:	f9bc a002 	ldrsh.w	sl, [ip, #2]
 8011d2c:	f1ba 0f00 	cmp.w	sl, #0
 8011d30:	db0f      	blt.n	8011d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011d32:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011d34:	45ba      	cmp	sl, r7
 8011d36:	da0c      	bge.n	8011d52 <_ZN8touchgfx7Outline10renderLineEiiii+0x5de>
 8011d38:	e9d0 7a01 	ldrd	r7, sl, [r0, #4]
 8011d3c:	45ba      	cmp	sl, r7
 8011d3e:	f10a 0a01 	add.w	sl, sl, #1
 8011d42:	bf38      	it	cc
 8011d44:	f10c 0c08 	addcc.w	ip, ip, #8
 8011d48:	f8c0 a008 	str.w	sl, [r0, #8]
 8011d4c:	bf38      	it	cc
 8011d4e:	f8c0 c010 	strcc.w	ip, [r0, #16]
 8011d52:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011d56:	f04f 0700 	mov.w	r7, #0
 8011d5a:	42ae      	cmp	r6, r5
 8011d5c:	f8ac 5000 	strh.w	r5, [ip]
 8011d60:	f8ac 8002 	strh.w	r8, [ip, #2]
 8011d64:	f8ac 7004 	strh.w	r7, [ip, #4]
 8011d68:	f8ac 7006 	strh.w	r7, [ip, #6]
 8011d6c:	d1bc      	bne.n	8011ce8 <_ZN8touchgfx7Outline10renderLineEiiii+0x574>
 8011d6e:	6904      	ldr	r4, [r0, #16]
 8011d70:	9a01      	ldr	r2, [sp, #4]
 8011d72:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011d74:	1ad3      	subs	r3, r2, r3
 8011d76:	88a2      	ldrh	r2, [r4, #4]
 8011d78:	3120      	adds	r1, #32
 8011d7a:	441a      	add	r2, r3
 8011d7c:	80a2      	strh	r2, [r4, #4]
 8011d7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011d80:	1a89      	subs	r1, r1, r2
 8011d82:	88e2      	ldrh	r2, [r4, #6]
 8011d84:	fb03 2301 	mla	r3, r3, r1, r2
 8011d88:	80e3      	strh	r3, [r4, #6]
 8011d8a:	e650      	b.n	8011a2e <_ZN8touchgfx7Outline10renderLineEiiii+0x2ba>
 8011d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8011d90:	434a      	muls	r2, r1
 8011d92:	4264      	negs	r4, r4
 8011d94:	970a      	str	r7, [sp, #40]	@ 0x28
 8011d96:	2700      	movs	r7, #0
 8011d98:	e758      	b.n	8011c4c <_ZN8touchgfx7Outline10renderLineEiiii+0x4d8>
 8011d9a:	ea4f 1867 	mov.w	r8, r7, asr #5
 8011d9e:	f009 031f 	and.w	r3, r9, #31
 8011da2:	f007 071f 	and.w	r7, r7, #31
 8011da6:	fa1f fc8c 	uxth.w	ip, ip
 8011daa:	45d0      	cmp	r8, sl
 8011dac:	930f      	str	r3, [sp, #60]	@ 0x3c
 8011dae:	fa1f fe8e 	uxth.w	lr, lr
 8011db2:	d10a      	bne.n	8011dca <_ZN8touchgfx7Outline10renderLineEiiii+0x656>
 8011db4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011db6:	449c      	add	ip, r3
 8011db8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8011dba:	441f      	add	r7, r3
 8011dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011dbe:	f8a5 c004 	strh.w	ip, [r5, #4]
 8011dc2:	fb03 e707 	mla	r7, r3, r7, lr
 8011dc6:	80ef      	strh	r7, [r5, #6]
 8011dc8:	e6bc      	b.n	8011b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011dca:	2900      	cmp	r1, #0
 8011dcc:	f2c0 80a6 	blt.w	8011f1c <_ZN8touchgfx7Outline10renderLineEiiii+0x7a8>
 8011dd0:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8011dd2:	f1c7 0320 	rsb	r3, r7, #32
 8011dd6:	4363      	muls	r3, r4
 8011dd8:	2401      	movs	r4, #1
 8011dda:	940d      	str	r4, [sp, #52]	@ 0x34
 8011ddc:	2420      	movs	r4, #32
 8011dde:	940c      	str	r4, [sp, #48]	@ 0x30
 8011de0:	fb93 f4f1 	sdiv	r4, r3, r1
 8011de4:	fb01 3b14 	mls	fp, r1, r4, r3
 8011de8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8011dea:	f1bb 0f00 	cmp.w	fp, #0
 8011dee:	441f      	add	r7, r3
 8011df0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8011df2:	bfbc      	itt	lt
 8011df4:	f104 34ff 	addlt.w	r4, r4, #4294967295
 8011df8:	448b      	addlt	fp, r1
 8011dfa:	fb04 e707 	mla	r7, r4, r7, lr
 8011dfe:	44a4      	add	ip, r4
 8011e00:	80ef      	strh	r7, [r5, #6]
 8011e02:	f8a5 c004 	strh.w	ip, [r5, #4]
 8011e06:	eb08 0503 	add.w	r5, r8, r3
 8011e0a:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011e0e:	f8bc e006 	ldrh.w	lr, [ip, #6]
 8011e12:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011e16:	ea5e 0307 	orrs.w	r3, lr, r7
 8011e1a:	d011      	beq.n	8011e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8011e1c:	f9bc e002 	ldrsh.w	lr, [ip, #2]
 8011e20:	f1be 0f00 	cmp.w	lr, #0
 8011e24:	db0c      	blt.n	8011e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8011e26:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011e28:	45be      	cmp	lr, r7
 8011e2a:	da09      	bge.n	8011e40 <_ZN8touchgfx7Outline10renderLineEiiii+0x6cc>
 8011e2c:	e9d0 7e01 	ldrd	r7, lr, [r0, #4]
 8011e30:	45be      	cmp	lr, r7
 8011e32:	bf3c      	itt	cc
 8011e34:	f10c 0708 	addcc.w	r7, ip, #8
 8011e38:	6107      	strcc	r7, [r0, #16]
 8011e3a:	f10e 0701 	add.w	r7, lr, #1
 8011e3e:	6087      	str	r7, [r0, #8]
 8011e40:	6907      	ldr	r7, [r0, #16]
 8011e42:	b213      	sxth	r3, r2
 8011e44:	4555      	cmp	r5, sl
 8011e46:	9310      	str	r3, [sp, #64]	@ 0x40
 8011e48:	807b      	strh	r3, [r7, #2]
 8011e4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8011e4c:	803d      	strh	r5, [r7, #0]
 8011e4e:	80be      	strh	r6, [r7, #4]
 8011e50:	eb04 0c03 	add.w	ip, r4, r3
 8011e54:	80fe      	strh	r6, [r7, #6]
 8011e56:	d050      	beq.n	8011efa <_ZN8touchgfx7Outline10renderLineEiiii+0x786>
 8011e58:	9b01      	ldr	r3, [sp, #4]
 8011e5a:	eba3 070c 	sub.w	r7, r3, ip
 8011e5e:	ebab 0301 	sub.w	r3, fp, r1
 8011e62:	443c      	add	r4, r7
 8011e64:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e66:	0164      	lsls	r4, r4, #5
 8011e68:	fb94 f8f1 	sdiv	r8, r4, r1
 8011e6c:	fb01 4418 	mls	r4, r1, r8, r4
 8011e70:	2c00      	cmp	r4, #0
 8011e72:	bfbc      	itt	lt
 8011e74:	f108 38ff 	addlt.w	r8, r8, #4294967295
 8011e78:	1864      	addlt	r4, r4, r1
 8011e7a:	f108 0701 	add.w	r7, r8, #1
 8011e7e:	9711      	str	r7, [sp, #68]	@ 0x44
 8011e80:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8011e82:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011e86:	191b      	adds	r3, r3, r4
 8011e88:	f8be b004 	ldrh.w	fp, [lr, #4]
 8011e8c:	bf54      	ite	pl
 8011e8e:	9f11      	ldrpl	r7, [sp, #68]	@ 0x44
 8011e90:	4647      	movmi	r7, r8
 8011e92:	9309      	str	r3, [sp, #36]	@ 0x24
 8011e94:	bf58      	it	pl
 8011e96:	1a5b      	subpl	r3, r3, r1
 8011e98:	44bb      	add	fp, r7
 8011e9a:	44bc      	add	ip, r7
 8011e9c:	bf58      	it	pl
 8011e9e:	9309      	strpl	r3, [sp, #36]	@ 0x24
 8011ea0:	f8ae b004 	strh.w	fp, [lr, #4]
 8011ea4:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011ea8:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8011eac:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8011eae:	f8ae b006 	strh.w	fp, [lr, #6]
 8011eb2:	443d      	add	r5, r7
 8011eb4:	f8d0 e010 	ldr.w	lr, [r0, #16]
 8011eb8:	f8be b006 	ldrh.w	fp, [lr, #6]
 8011ebc:	f8be 7004 	ldrh.w	r7, [lr, #4]
 8011ec0:	ea5b 0307 	orrs.w	r3, fp, r7
 8011ec4:	d011      	beq.n	8011eea <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011ec6:	f9be b002 	ldrsh.w	fp, [lr, #2]
 8011eca:	f1bb 0f00 	cmp.w	fp, #0
 8011ece:	db0c      	blt.n	8011eea <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011ed0:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011ed2:	45bb      	cmp	fp, r7
 8011ed4:	da09      	bge.n	8011eea <_ZN8touchgfx7Outline10renderLineEiiii+0x776>
 8011ed6:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8011eda:	45bb      	cmp	fp, r7
 8011edc:	bf3c      	itt	cc
 8011ede:	f10e 0708 	addcc.w	r7, lr, #8
 8011ee2:	6107      	strcc	r7, [r0, #16]
 8011ee4:	f10b 0701 	add.w	r7, fp, #1
 8011ee8:	6087      	str	r7, [r0, #8]
 8011eea:	6907      	ldr	r7, [r0, #16]
 8011eec:	4555      	cmp	r5, sl
 8011eee:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8011ef0:	803d      	strh	r5, [r7, #0]
 8011ef2:	807b      	strh	r3, [r7, #2]
 8011ef4:	80be      	strh	r6, [r7, #4]
 8011ef6:	80fe      	strh	r6, [r7, #6]
 8011ef8:	d1c2      	bne.n	8011e80 <_ZN8touchgfx7Outline10renderLineEiiii+0x70c>
 8011efa:	9b01      	ldr	r3, [sp, #4]
 8011efc:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8011efe:	eba3 0c0c 	sub.w	ip, r3, ip
 8011f02:	6903      	ldr	r3, [r0, #16]
 8011f04:	3720      	adds	r7, #32
 8011f06:	8899      	ldrh	r1, [r3, #4]
 8011f08:	4461      	add	r1, ip
 8011f0a:	8099      	strh	r1, [r3, #4]
 8011f0c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8011f0e:	1a7f      	subs	r7, r7, r1
 8011f10:	88d9      	ldrh	r1, [r3, #6]
 8011f12:	fb0c 1c07 	mla	ip, ip, r7, r1
 8011f16:	f8a3 c006 	strh.w	ip, [r3, #6]
 8011f1a:	e613      	b.n	8011b44 <_ZN8touchgfx7Outline10renderLineEiiii+0x3d0>
 8011f1c:	f04f 34ff 	mov.w	r4, #4294967295
 8011f20:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8011f22:	4249      	negs	r1, r1
 8011f24:	940d      	str	r4, [sp, #52]	@ 0x34
 8011f26:	2400      	movs	r4, #0
 8011f28:	437b      	muls	r3, r7
 8011f2a:	e758      	b.n	8011dde <_ZN8touchgfx7Outline10renderLineEiiii+0x66a>
 8011f2c:	9905      	ldr	r1, [sp, #20]
 8011f2e:	ea4f 1b69 	mov.w	fp, r9, asr #5
 8011f32:	f009 0c1f 	and.w	ip, r9, #31
 8011f36:	f8b7 8004 	ldrh.w	r8, [r7, #4]
 8011f3a:	f001 011f 	and.w	r1, r1, #31
 8011f3e:	45f3      	cmp	fp, lr
 8011f40:	f8b7 a006 	ldrh.w	sl, [r7, #6]
 8011f44:	9102      	str	r1, [sp, #8]
 8011f46:	9904      	ldr	r1, [sp, #16]
 8011f48:	eba1 0406 	sub.w	r4, r1, r6
 8011f4c:	d108      	bne.n	8011f60 <_ZN8touchgfx7Outline10renderLineEiiii+0x7ec>
 8011f4e:	9b02      	ldr	r3, [sp, #8]
 8011f50:	44a0      	add	r8, r4
 8011f52:	449c      	add	ip, r3
 8011f54:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011f58:	fb04 a40c 	mla	r4, r4, ip, sl
 8011f5c:	80fc      	strh	r4, [r7, #6]
 8011f5e:	e461      	b.n	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>
 8011f60:	9905      	ldr	r1, [sp, #20]
 8011f62:	ebb1 0109 	subs.w	r1, r1, r9
 8011f66:	bf51      	iteee	pl
 8011f68:	f1cc 0520 	rsbpl	r5, ip, #32
 8011f6c:	fb04 f40c 	mulmi.w	r4, r4, ip
 8011f70:	4249      	negmi	r1, r1
 8011f72:	2500      	movmi	r5, #0
 8011f74:	bf5d      	ittte	pl
 8011f76:	436c      	mulpl	r4, r5
 8011f78:	2520      	movpl	r5, #32
 8011f7a:	f04f 0901 	movpl.w	r9, #1
 8011f7e:	f04f 39ff 	movmi.w	r9, #4294967295
 8011f82:	9501      	str	r5, [sp, #4]
 8011f84:	9b01      	ldr	r3, [sp, #4]
 8011f86:	fb94 f5f1 	sdiv	r5, r4, r1
 8011f8a:	fb01 4415 	mls	r4, r1, r5, r4
 8011f8e:	449c      	add	ip, r3
 8011f90:	eb0b 0309 	add.w	r3, fp, r9
 8011f94:	2c00      	cmp	r4, #0
 8011f96:	bfbc      	itt	lt
 8011f98:	f105 35ff 	addlt.w	r5, r5, #4294967295
 8011f9c:	1864      	addlt	r4, r4, r1
 8011f9e:	44a8      	add	r8, r5
 8011fa0:	fb05 ac0c 	mla	ip, r5, ip, sl
 8011fa4:	f8a7 8004 	strh.w	r8, [r7, #4]
 8011fa8:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011fac:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8011fb0:	f8bc 8006 	ldrh.w	r8, [ip, #6]
 8011fb4:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8011fb8:	ea58 0707 	orrs.w	r7, r8, r7
 8011fbc:	d011      	beq.n	8011fe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011fbe:	f9bc 8002 	ldrsh.w	r8, [ip, #2]
 8011fc2:	f1b8 0f00 	cmp.w	r8, #0
 8011fc6:	db0c      	blt.n	8011fe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011fc8:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 8011fca:	45b8      	cmp	r8, r7
 8011fcc:	da09      	bge.n	8011fe2 <_ZN8touchgfx7Outline10renderLineEiiii+0x86e>
 8011fce:	e9d0 7801 	ldrd	r7, r8, [r0, #4]
 8011fd2:	45b8      	cmp	r8, r7
 8011fd4:	bf3c      	itt	cc
 8011fd6:	f10c 0708 	addcc.w	r7, ip, #8
 8011fda:	6107      	strcc	r7, [r0, #16]
 8011fdc:	f108 0701 	add.w	r7, r8, #1
 8011fe0:	6087      	str	r7, [r0, #8]
 8011fe2:	6907      	ldr	r7, [r0, #16]
 8011fe4:	f04f 0c00 	mov.w	ip, #0
 8011fe8:	b212      	sxth	r2, r2
 8011fea:	459e      	cmp	lr, r3
 8011fec:	803b      	strh	r3, [r7, #0]
 8011fee:	442e      	add	r6, r5
 8011ff0:	807a      	strh	r2, [r7, #2]
 8011ff2:	f8a7 c004 	strh.w	ip, [r7, #4]
 8011ff6:	f8a7 c006 	strh.w	ip, [r7, #6]
 8011ffa:	d04b      	beq.n	8012094 <_ZN8touchgfx7Outline10renderLineEiiii+0x920>
 8011ffc:	9f04      	ldr	r7, [sp, #16]
 8011ffe:	1a64      	subs	r4, r4, r1
 8012000:	f04f 0a00 	mov.w	sl, #0
 8012004:	1bbf      	subs	r7, r7, r6
 8012006:	443d      	add	r5, r7
 8012008:	016d      	lsls	r5, r5, #5
 801200a:	fb95 f8f1 	sdiv	r8, r5, r1
 801200e:	fb01 5518 	mls	r5, r1, r8, r5
 8012012:	4565      	cmp	r5, ip
 8012014:	bfbc      	itt	lt
 8012016:	f108 38ff 	addlt.w	r8, r8, #4294967295
 801201a:	186d      	addlt	r5, r5, r1
 801201c:	f108 0701 	add.w	r7, r8, #1
 8012020:	9703      	str	r7, [sp, #12]
 8012022:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012026:	1964      	adds	r4, r4, r5
 8012028:	444b      	add	r3, r9
 801202a:	bf54      	ite	pl
 801202c:	9f03      	ldrpl	r7, [sp, #12]
 801202e:	4647      	movmi	r7, r8
 8012030:	f8bc b004 	ldrh.w	fp, [ip, #4]
 8012034:	bf58      	it	pl
 8012036:	1a64      	subpl	r4, r4, r1
 8012038:	443e      	add	r6, r7
 801203a:	44bb      	add	fp, r7
 801203c:	f8ac b004 	strh.w	fp, [ip, #4]
 8012040:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012044:	eb0b 1b47 	add.w	fp, fp, r7, lsl #5
 8012048:	f8ac b006 	strh.w	fp, [ip, #6]
 801204c:	f8d0 c010 	ldr.w	ip, [r0, #16]
 8012050:	f8bc b006 	ldrh.w	fp, [ip, #6]
 8012054:	f8bc 7004 	ldrh.w	r7, [ip, #4]
 8012058:	ea5b 0707 	orrs.w	r7, fp, r7
 801205c:	d011      	beq.n	8012082 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801205e:	f9bc b002 	ldrsh.w	fp, [ip, #2]
 8012062:	f1bb 0f00 	cmp.w	fp, #0
 8012066:	db0c      	blt.n	8012082 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 8012068:	6ac7      	ldr	r7, [r0, #44]	@ 0x2c
 801206a:	45bb      	cmp	fp, r7
 801206c:	da09      	bge.n	8012082 <_ZN8touchgfx7Outline10renderLineEiiii+0x90e>
 801206e:	e9d0 7b01 	ldrd	r7, fp, [r0, #4]
 8012072:	45bb      	cmp	fp, r7
 8012074:	bf3c      	itt	cc
 8012076:	f10c 0708 	addcc.w	r7, ip, #8
 801207a:	6107      	strcc	r7, [r0, #16]
 801207c:	f10b 0701 	add.w	r7, fp, #1
 8012080:	6087      	str	r7, [r0, #8]
 8012082:	6907      	ldr	r7, [r0, #16]
 8012084:	459e      	cmp	lr, r3
 8012086:	803b      	strh	r3, [r7, #0]
 8012088:	807a      	strh	r2, [r7, #2]
 801208a:	f8a7 a004 	strh.w	sl, [r7, #4]
 801208e:	f8a7 a006 	strh.w	sl, [r7, #6]
 8012092:	d1c6      	bne.n	8012022 <_ZN8touchgfx7Outline10renderLineEiiii+0x8ae>
 8012094:	9b04      	ldr	r3, [sp, #16]
 8012096:	1b9e      	subs	r6, r3, r6
 8012098:	6903      	ldr	r3, [r0, #16]
 801209a:	889a      	ldrh	r2, [r3, #4]
 801209c:	4432      	add	r2, r6
 801209e:	809a      	strh	r2, [r3, #4]
 80120a0:	9a02      	ldr	r2, [sp, #8]
 80120a2:	f102 0c20 	add.w	ip, r2, #32
 80120a6:	9a01      	ldr	r2, [sp, #4]
 80120a8:	ebac 0c02 	sub.w	ip, ip, r2
 80120ac:	88da      	ldrh	r2, [r3, #6]
 80120ae:	fb06 260c 	mla	r6, r6, ip, r2
 80120b2:	80de      	strh	r6, [r3, #6]
 80120b4:	f7ff bbb6 	b.w	8011824 <_ZN8touchgfx7Outline10renderLineEiiii+0xb0>

080120b8 <_ZN8touchgfx7Outline6lineToEii>:
 80120b8:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80120ba:	079b      	lsls	r3, r3, #30
 80120bc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80120be:	460e      	mov	r6, r1
 80120c0:	4615      	mov	r5, r2
 80120c2:	d511      	bpl.n	80120e8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80120c4:	e9d0 1205 	ldrd	r1, r2, [r0, #20]
 80120c8:	ea86 0701 	eor.w	r7, r6, r1
 80120cc:	ea85 0302 	eor.w	r3, r5, r2
 80120d0:	433b      	orrs	r3, r7
 80120d2:	d009      	beq.n	80120e8 <_ZN8touchgfx7Outline6lineToEii+0x30>
 80120d4:	4633      	mov	r3, r6
 80120d6:	9500      	str	r5, [sp, #0]
 80120d8:	f7ff fb4c 	bl	8011774 <_ZN8touchgfx7Outline10renderLineEiiii>
 80120dc:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80120de:	f043 0301 	orr.w	r3, r3, #1
 80120e2:	e9c0 6505 	strd	r6, r5, [r0, #20]
 80120e6:	6243      	str	r3, [r0, #36]	@ 0x24
 80120e8:	b003      	add	sp, #12
 80120ea:	bdf0      	pop	{r4, r5, r6, r7, pc}

080120ec <_ZN8touchgfx7Outline6moveToEii>:
 80120ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80120ee:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80120f0:	4615      	mov	r5, r2
 80120f2:	4604      	mov	r4, r0
 80120f4:	460e      	mov	r6, r1
 80120f6:	079a      	lsls	r2, r3, #30
 80120f8:	d401      	bmi.n	80120fe <_ZN8touchgfx7Outline6moveToEii+0x12>
 80120fa:	f7ff fb07 	bl	801170c <_ZN8touchgfx7Outline5resetEv>
 80120fe:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 8012100:	07db      	lsls	r3, r3, #31
 8012102:	d504      	bpl.n	801210e <_ZN8touchgfx7Outline6moveToEii+0x22>
 8012104:	4620      	mov	r0, r4
 8012106:	e9d4 1207 	ldrd	r1, r2, [r4, #28]
 801210a:	f7ff ffd5 	bl	80120b8 <_ZN8touchgfx7Outline6lineToEii>
 801210e:	6923      	ldr	r3, [r4, #16]
 8012110:	1170      	asrs	r0, r6, #5
 8012112:	1169      	asrs	r1, r5, #5
 8012114:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012118:	4290      	cmp	r0, r2
 801211a:	d103      	bne.n	8012124 <_ZN8touchgfx7Outline6moveToEii+0x38>
 801211c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012120:	4291      	cmp	r1, r2
 8012122:	d01a      	beq.n	801215a <_ZN8touchgfx7Outline6moveToEii+0x6e>
 8012124:	88df      	ldrh	r7, [r3, #6]
 8012126:	889a      	ldrh	r2, [r3, #4]
 8012128:	433a      	orrs	r2, r7
 801212a:	d010      	beq.n	801214e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801212c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8012130:	2a00      	cmp	r2, #0
 8012132:	db0c      	blt.n	801214e <_ZN8touchgfx7Outline6moveToEii+0x62>
 8012134:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 8012136:	42ba      	cmp	r2, r7
 8012138:	da09      	bge.n	801214e <_ZN8touchgfx7Outline6moveToEii+0x62>
 801213a:	e9d4 7201 	ldrd	r7, r2, [r4, #4]
 801213e:	42ba      	cmp	r2, r7
 8012140:	f102 0201 	add.w	r2, r2, #1
 8012144:	bf38      	it	cc
 8012146:	3308      	addcc	r3, #8
 8012148:	60a2      	str	r2, [r4, #8]
 801214a:	bf38      	it	cc
 801214c:	6123      	strcc	r3, [r4, #16]
 801214e:	6923      	ldr	r3, [r4, #16]
 8012150:	2200      	movs	r2, #0
 8012152:	8018      	strh	r0, [r3, #0]
 8012154:	8059      	strh	r1, [r3, #2]
 8012156:	809a      	strh	r2, [r3, #4]
 8012158:	80da      	strh	r2, [r3, #6]
 801215a:	6166      	str	r6, [r4, #20]
 801215c:	6225      	str	r5, [r4, #32]
 801215e:	e9c4 5606 	strd	r5, r6, [r4, #24]
 8012162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08012164 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>:
 8012164:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012168:	b0d0      	sub	sp, #320	@ 0x140
 801216a:	eb00 01c1 	add.w	r1, r0, r1, lsl #3
 801216e:	466c      	mov	r4, sp
 8012170:	4627      	mov	r7, r4
 8012172:	1a0d      	subs	r5, r1, r0
 8012174:	f100 0308 	add.w	r3, r0, #8
 8012178:	2d48      	cmp	r5, #72	@ 0x48
 801217a:	f340 80d5 	ble.w	8012328 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801217e:	112d      	asrs	r5, r5, #4
 8012180:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 8012184:	f9b0 9000 	ldrsh.w	r9, [r0]
 8012188:	eb00 02c5 	add.w	r2, r0, r5, lsl #3
 801218c:	f9b0 8002 	ldrsh.w	r8, [r0, #2]
 8012190:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012194:	6816      	ldr	r6, [r2, #0]
 8012196:	6006      	str	r6, [r0, #0]
 8012198:	6856      	ldr	r6, [r2, #4]
 801219a:	6046      	str	r6, [r0, #4]
 801219c:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 80121a0:	f8a2 8002 	strh.w	r8, [r2, #2]
 80121a4:	f8a2 e004 	strh.w	lr, [r2, #4]
 80121a8:	f8a2 c006 	strh.w	ip, [r2, #6]
 80121ac:	f1a1 0208 	sub.w	r2, r1, #8
 80121b0:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 80121b4:	f9b0 c00a 	ldrsh.w	ip, [r0, #10]
 80121b8:	4565      	cmp	r5, ip
 80121ba:	db06      	blt.n	80121ca <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x66>
 80121bc:	d119      	bne.n	80121f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80121be:	f9b0 6008 	ldrsh.w	r6, [r0, #8]
 80121c2:	f931 5c08 	ldrsh.w	r5, [r1, #-8]
 80121c6:	42ae      	cmp	r6, r5
 80121c8:	dd13      	ble.n	80121f2 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x8e>
 80121ca:	460e      	mov	r6, r1
 80121cc:	f9b0 9008 	ldrsh.w	r9, [r0, #8]
 80121d0:	f9b0 800c 	ldrsh.w	r8, [r0, #12]
 80121d4:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 80121d8:	f9b0 e00e 	ldrsh.w	lr, [r0, #14]
 80121dc:	601d      	str	r5, [r3, #0]
 80121de:	6875      	ldr	r5, [r6, #4]
 80121e0:	605d      	str	r5, [r3, #4]
 80121e2:	f821 9c08 	strh.w	r9, [r1, #-8]
 80121e6:	f821 cc06 	strh.w	ip, [r1, #-6]
 80121ea:	f821 8c04 	strh.w	r8, [r1, #-4]
 80121ee:	f821 ec02 	strh.w	lr, [r1, #-2]
 80121f2:	f9b0 6002 	ldrsh.w	r6, [r0, #2]
 80121f6:	f9b0 500a 	ldrsh.w	r5, [r0, #10]
 80121fa:	42ae      	cmp	r6, r5
 80121fc:	db06      	blt.n	801220c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xa8>
 80121fe:	d116      	bne.n	801222e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 8012200:	f9b0 c000 	ldrsh.w	ip, [r0]
 8012204:	f9b0 5008 	ldrsh.w	r5, [r0, #8]
 8012208:	45ac      	cmp	ip, r5
 801220a:	da10      	bge.n	801222e <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xca>
 801220c:	681d      	ldr	r5, [r3, #0]
 801220e:	f9b0 8000 	ldrsh.w	r8, [r0]
 8012212:	f9b0 e004 	ldrsh.w	lr, [r0, #4]
 8012216:	f9b0 c006 	ldrsh.w	ip, [r0, #6]
 801221a:	6005      	str	r5, [r0, #0]
 801221c:	685d      	ldr	r5, [r3, #4]
 801221e:	f8a0 8008 	strh.w	r8, [r0, #8]
 8012222:	6045      	str	r5, [r0, #4]
 8012224:	8146      	strh	r6, [r0, #10]
 8012226:	f8a0 e00c 	strh.w	lr, [r0, #12]
 801222a:	f8a0 c00e 	strh.w	ip, [r0, #14]
 801222e:	f931 5c06 	ldrsh.w	r5, [r1, #-6]
 8012232:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012236:	4565      	cmp	r5, ip
 8012238:	db06      	blt.n	8012248 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe4>
 801223a:	d119      	bne.n	8012270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801223c:	f931 6c08 	ldrsh.w	r6, [r1, #-8]
 8012240:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012244:	42ae      	cmp	r6, r5
 8012246:	da13      	bge.n	8012270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 8012248:	460e      	mov	r6, r1
 801224a:	f9b0 9000 	ldrsh.w	r9, [r0]
 801224e:	f9b0 8004 	ldrsh.w	r8, [r0, #4]
 8012252:	f856 5d08 	ldr.w	r5, [r6, #-8]!
 8012256:	f9b0 e006 	ldrsh.w	lr, [r0, #6]
 801225a:	6005      	str	r5, [r0, #0]
 801225c:	6875      	ldr	r5, [r6, #4]
 801225e:	6045      	str	r5, [r0, #4]
 8012260:	f821 9c08 	strh.w	r9, [r1, #-8]
 8012264:	f821 cc06 	strh.w	ip, [r1, #-6]
 8012268:	f821 8c04 	strh.w	r8, [r1, #-4]
 801226c:	f821 ec02 	strh.w	lr, [r1, #-2]
 8012270:	3308      	adds	r3, #8
 8012272:	f9b0 c002 	ldrsh.w	ip, [r0, #2]
 8012276:	f9b3 e002 	ldrsh.w	lr, [r3, #2]
 801227a:	45e6      	cmp	lr, ip
 801227c:	dbf8      	blt.n	8012270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801227e:	d105      	bne.n	801228c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012280:	f9b3 6000 	ldrsh.w	r6, [r3]
 8012284:	f9b0 5000 	ldrsh.w	r5, [r0]
 8012288:	42ae      	cmp	r6, r5
 801228a:	dbf1      	blt.n	8012270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 801228c:	4615      	mov	r5, r2
 801228e:	3a08      	subs	r2, #8
 8012290:	f9b2 6002 	ldrsh.w	r6, [r2, #2]
 8012294:	45b4      	cmp	ip, r6
 8012296:	dbf9      	blt.n	801228c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 8012298:	d105      	bne.n	80122a6 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x142>
 801229a:	f9b0 8000 	ldrsh.w	r8, [r0]
 801229e:	f9b2 6000 	ldrsh.w	r6, [r2]
 80122a2:	45b0      	cmp	r8, r6
 80122a4:	dbf2      	blt.n	801228c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x128>
 80122a6:	4293      	cmp	r3, r2
 80122a8:	f1a5 0608 	sub.w	r6, r5, #8
 80122ac:	d816      	bhi.n	80122dc <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x178>
 80122ae:	f8d6 c000 	ldr.w	ip, [r6]
 80122b2:	f9b3 a000 	ldrsh.w	sl, [r3]
 80122b6:	f9b3 9004 	ldrsh.w	r9, [r3, #4]
 80122ba:	f9b3 8006 	ldrsh.w	r8, [r3, #6]
 80122be:	f8c3 c000 	str.w	ip, [r3]
 80122c2:	f8d6 c004 	ldr.w	ip, [r6, #4]
 80122c6:	f8c3 c004 	str.w	ip, [r3, #4]
 80122ca:	f825 ac08 	strh.w	sl, [r5, #-8]
 80122ce:	f825 ec06 	strh.w	lr, [r5, #-6]
 80122d2:	f825 9c04 	strh.w	r9, [r5, #-4]
 80122d6:	f825 8c02 	strh.w	r8, [r5, #-2]
 80122da:	e7c9      	b.n	8012270 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x10c>
 80122dc:	f8d6 e000 	ldr.w	lr, [r6]
 80122e0:	f9b0 a000 	ldrsh.w	sl, [r0]
 80122e4:	f9b0 9004 	ldrsh.w	r9, [r0, #4]
 80122e8:	f9b0 8006 	ldrsh.w	r8, [r0, #6]
 80122ec:	f8c0 e000 	str.w	lr, [r0]
 80122f0:	f8d6 e004 	ldr.w	lr, [r6, #4]
 80122f4:	1a16      	subs	r6, r2, r0
 80122f6:	f8c0 e004 	str.w	lr, [r0, #4]
 80122fa:	f825 ac08 	strh.w	sl, [r5, #-8]
 80122fe:	f825 cc06 	strh.w	ip, [r5, #-6]
 8012302:	f825 9c04 	strh.w	r9, [r5, #-4]
 8012306:	f825 8c02 	strh.w	r8, [r5, #-2]
 801230a:	1acd      	subs	r5, r1, r3
 801230c:	10ed      	asrs	r5, r5, #3
 801230e:	ebb5 0fe6 	cmp.w	r5, r6, asr #3
 8012312:	bfb5      	itete	lt
 8012314:	e9c4 0200 	strdlt	r0, r2, [r4]
 8012318:	e9c4 3100 	strdge	r3, r1, [r4]
 801231c:	460a      	movlt	r2, r1
 801231e:	4603      	movge	r3, r0
 8012320:	3408      	adds	r4, #8
 8012322:	4618      	mov	r0, r3
 8012324:	4611      	mov	r1, r2
 8012326:	e724      	b.n	8012172 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012328:	4299      	cmp	r1, r3
 801232a:	d927      	bls.n	801237c <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x218>
 801232c:	f1a3 0210 	sub.w	r2, r3, #16
 8012330:	f9b2 c012 	ldrsh.w	ip, [r2, #18]
 8012334:	f9b2 500a 	ldrsh.w	r5, [r2, #10]
 8012338:	45ac      	cmp	ip, r5
 801233a:	db06      	blt.n	801234a <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1e6>
 801233c:	d11c      	bne.n	8012378 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801233e:	f9b2 6010 	ldrsh.w	r6, [r2, #16]
 8012342:	f9b2 5008 	ldrsh.w	r5, [r2, #8]
 8012346:	42ae      	cmp	r6, r5
 8012348:	da16      	bge.n	8012378 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x214>
 801234a:	4615      	mov	r5, r2
 801234c:	f9b2 9010 	ldrsh.w	r9, [r2, #16]
 8012350:	f9b2 8014 	ldrsh.w	r8, [r2, #20]
 8012354:	3a08      	subs	r2, #8
 8012356:	f855 6f08 	ldr.w	r6, [r5, #8]!
 801235a:	f9b2 e01e 	ldrsh.w	lr, [r2, #30]
 801235e:	6196      	str	r6, [r2, #24]
 8012360:	42a8      	cmp	r0, r5
 8012362:	686e      	ldr	r6, [r5, #4]
 8012364:	f8a2 9010 	strh.w	r9, [r2, #16]
 8012368:	61d6      	str	r6, [r2, #28]
 801236a:	f8a2 c012 	strh.w	ip, [r2, #18]
 801236e:	f8a2 8014 	strh.w	r8, [r2, #20]
 8012372:	f8a2 e016 	strh.w	lr, [r2, #22]
 8012376:	d1db      	bne.n	8012330 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1cc>
 8012378:	3308      	adds	r3, #8
 801237a:	e7d5      	b.n	8012328 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x1c4>
 801237c:	42bc      	cmp	r4, r7
 801237e:	d903      	bls.n	8012388 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0x224>
 8012380:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8012384:	3c08      	subs	r4, #8
 8012386:	e6f4      	b.n	8012172 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj+0xe>
 8012388:	b050      	add	sp, #320	@ 0x140
 801238a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0801238e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>:
 801238e:	b510      	push	{r4, lr}
 8012390:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 8012392:	4604      	mov	r4, r0
 8012394:	07da      	lsls	r2, r3, #31
 8012396:	d507      	bpl.n	80123a8 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x1a>
 8012398:	e9d0 1207 	ldrd	r1, r2, [r0, #28]
 801239c:	f7ff fe8c 	bl	80120b8 <_ZN8touchgfx7Outline6lineToEii>
 80123a0:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 80123a2:	f023 0301 	bic.w	r3, r3, #1
 80123a6:	6243      	str	r3, [r0, #36]	@ 0x24
 80123a8:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80123aa:	079b      	lsls	r3, r3, #30
 80123ac:	d521      	bpl.n	80123f2 <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x64>
 80123ae:	6923      	ldr	r3, [r4, #16]
 80123b0:	88d9      	ldrh	r1, [r3, #6]
 80123b2:	889a      	ldrh	r2, [r3, #4]
 80123b4:	430a      	orrs	r2, r1
 80123b6:	d010      	beq.n	80123da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80123b8:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80123bc:	2a00      	cmp	r2, #0
 80123be:	db0c      	blt.n	80123da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80123c0:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80123c2:	428a      	cmp	r2, r1
 80123c4:	da09      	bge.n	80123da <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x4c>
 80123c6:	e9d4 1201 	ldrd	r1, r2, [r4, #4]
 80123ca:	4291      	cmp	r1, r2
 80123cc:	f102 0201 	add.w	r2, r2, #1
 80123d0:	bf88      	it	hi
 80123d2:	3308      	addhi	r3, #8
 80123d4:	60a2      	str	r2, [r4, #8]
 80123d6:	bf88      	it	hi
 80123d8:	6123      	strhi	r3, [r4, #16]
 80123da:	68a1      	ldr	r1, [r4, #8]
 80123dc:	b129      	cbz	r1, 80123ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80123de:	6863      	ldr	r3, [r4, #4]
 80123e0:	4299      	cmp	r1, r3
 80123e2:	d802      	bhi.n	80123ea <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv+0x5c>
 80123e4:	68e0      	ldr	r0, [r4, #12]
 80123e6:	f7ff febd 	bl	8012164 <_ZN8touchgfx7Outline10qsortCellsEPNS_4CellEj>
 80123ea:	6a63      	ldr	r3, [r4, #36]	@ 0x24
 80123ec:	f023 0302 	bic.w	r3, r3, #2
 80123f0:	6263      	str	r3, [r4, #36]	@ 0x24
 80123f2:	68e0      	ldr	r0, [r4, #12]
 80123f4:	bd10      	pop	{r4, pc}
	...

080123f8 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv>:
 80123f8:	4b01      	ldr	r3, [pc, #4]	@ (8012400 <_ZN8touchgfx20CanvasWidgetRenderer16getOutlineBufferEv+0x8>)
 80123fa:	6818      	ldr	r0, [r3, #0]
 80123fc:	4770      	bx	lr
 80123fe:	bf00      	nop
 8012400:	240253b0 	.word	0x240253b0

08012404 <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv>:
 8012404:	4b01      	ldr	r3, [pc, #4]	@ (801240c <_ZN8touchgfx20CanvasWidgetRenderer20getOutlineBufferSizeEv+0x8>)
 8012406:	6818      	ldr	r0, [r3, #0]
 8012408:	4770      	bx	lr
 801240a:	bf00      	nop
 801240c:	240253b4 	.word	0x240253b4

08012410 <_ZN8touchgfx3LCD27supportDynamicBitmapDrawingENS_6Bitmap12BitmapFormatE>:
 8012410:	b510      	push	{r4, lr}
 8012412:	6803      	ldr	r3, [r0, #0]
 8012414:	460c      	mov	r4, r1
 8012416:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012418:	4798      	blx	r3
 801241a:	1b03      	subs	r3, r0, r4
 801241c:	4258      	negs	r0, r3
 801241e:	4158      	adcs	r0, r3
 8012420:	bd10      	pop	{r4, pc}
	...

08012424 <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE>:
 8012424:	4b01      	ldr	r3, [pc, #4]	@ (801242c <_ZN8touchgfx3LCD15setDefaultColorENS_9colortypeE+0x8>)
 8012426:	6019      	str	r1, [r3, #0]
 8012428:	4770      	bx	lr
 801242a:	bf00      	nop
 801242c:	240253b8 	.word	0x240253b8

08012430 <_ZN8touchgfx3LCD18drawTextureMapQuadERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 8012430:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012434:	4696      	mov	lr, r2
 8012436:	b097      	sub	sp, #92	@ 0x5c
 8012438:	4605      	mov	r5, r0
 801243a:	4614      	mov	r4, r2
 801243c:	460e      	mov	r6, r1
 801243e:	461f      	mov	r7, r3
 8012440:	f10d 0c1c 	add.w	ip, sp, #28
 8012444:	f8bd 8088 	ldrh.w	r8, [sp, #136]	@ 0x88
 8012448:	f89d 908c 	ldrb.w	r9, [sp, #140]	@ 0x8c
 801244c:	f8bd a090 	ldrh.w	sl, [sp, #144]	@ 0x90
 8012450:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012454:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012458:	f8de 3000 	ldr.w	r3, [lr]
 801245c:	f104 0e14 	add.w	lr, r4, #20
 8012460:	f8cc 3000 	str.w	r3, [ip]
 8012464:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8012468:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 801246c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012470:	f8de 3000 	ldr.w	r3, [lr]
 8012474:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 8012478:	f8cc 3000 	str.w	r3, [ip]
 801247c:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 8012480:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 8012484:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 8012488:	f8de 3000 	ldr.w	r3, [lr]
 801248c:	4631      	mov	r1, r6
 801248e:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8012490:	4628      	mov	r0, r5
 8012492:	f8cc 3000 	str.w	r3, [ip]
 8012496:	682b      	ldr	r3, [r5, #0]
 8012498:	9201      	str	r2, [sp, #4]
 801249a:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801249c:	f8cd 8008 	str.w	r8, [sp, #8]
 80124a0:	9200      	str	r2, [sp, #0]
 80124a2:	aa07      	add	r2, sp, #28
 80124a4:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80124a8:	f8d3 b03c 	ldr.w	fp, [r3, #60]	@ 0x3c
 80124ac:	463b      	mov	r3, r7
 80124ae:	47d8      	blx	fp
 80124b0:	46a6      	mov	lr, r4
 80124b2:	f10d 0c1c 	add.w	ip, sp, #28
 80124b6:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124ba:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124be:	f8de 3000 	ldr.w	r3, [lr]
 80124c2:	f104 0e28 	add.w	lr, r4, #40	@ 0x28
 80124c6:	343c      	adds	r4, #60	@ 0x3c
 80124c8:	f8cc 3000 	str.w	r3, [ip]
 80124cc:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 80124d0:	e8be 000f 	ldmia.w	lr!, {r0, r1, r2, r3}
 80124d4:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124d8:	f8de 3000 	ldr.w	r3, [lr]
 80124dc:	f8cc 3000 	str.w	r3, [ip]
 80124e0:	f10d 0c44 	add.w	ip, sp, #68	@ 0x44
 80124e4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80124e6:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
 80124ea:	6823      	ldr	r3, [r4, #0]
 80124ec:	4631      	mov	r1, r6
 80124ee:	4628      	mov	r0, r5
 80124f0:	f8cc 3000 	str.w	r3, [ip]
 80124f4:	682b      	ldr	r3, [r5, #0]
 80124f6:	e9cd 9a03 	strd	r9, sl, [sp, #12]
 80124fa:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80124fc:	f8cd 8008 	str.w	r8, [sp, #8]
 8012500:	9201      	str	r2, [sp, #4]
 8012502:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8012504:	9200      	str	r2, [sp, #0]
 8012506:	aa07      	add	r2, sp, #28
 8012508:	6bdc      	ldr	r4, [r3, #60]	@ 0x3c
 801250a:	463b      	mov	r3, r7
 801250c:	47a0      	blx	r4
 801250e:	b017      	add	sp, #92	@ 0x5c
 8012510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08012514 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht>:
 8012514:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012518:	b08d      	sub	sp, #52	@ 0x34
 801251a:	4688      	mov	r8, r1
 801251c:	f8d3 c000 	ldr.w	ip, [r3]
 8012520:	9916      	ldr	r1, [sp, #88]	@ 0x58
 8012522:	f8bd 4070 	ldrh.w	r4, [sp, #112]	@ 0x70
 8012526:	680f      	ldr	r7, [r1, #0]
 8012528:	ed92 4a09 	vldr	s8, [r2, #36]	@ 0x24
 801252c:	eba7 070c 	sub.w	r7, r7, ip
 8012530:	edd2 4a0b 	vldr	s9, [r2, #44]	@ 0x2c
 8012534:	edd3 6a07 	vldr	s13, [r3, #28]
 8012538:	42bc      	cmp	r4, r7
 801253a:	9918      	ldr	r1, [sp, #96]	@ 0x60
 801253c:	f8dd a064 	ldr.w	sl, [sp, #100]	@ 0x64
 8012540:	bfa8      	it	ge
 8012542:	463c      	movge	r4, r7
 8012544:	f9b1 9000 	ldrsh.w	r9, [r1]
 8012548:	f9ba 1000 	ldrsh.w	r1, [sl]
 801254c:	ee07 4a90 	vmov	s15, r4
 8012550:	eb09 0e0c 	add.w	lr, r9, ip
 8012554:	edd3 1a0a 	vldr	s3, [r3, #40]	@ 0x28
 8012558:	eeb8 5ae7 	vcvt.f32.s32	s10, s15
 801255c:	edd2 7a0d 	vldr	s15, [r2, #52]	@ 0x34
 8012560:	ed93 2a0d 	vldr	s4, [r3, #52]	@ 0x34
 8012564:	4571      	cmp	r1, lr
 8012566:	ee25 4a04 	vmul.f32	s8, s10, s8
 801256a:	ee65 4a24 	vmul.f32	s9, s10, s9
 801256e:	ee25 5a27 	vmul.f32	s10, s10, s15
 8012572:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012576:	ee71 0aa4 	vadd.f32	s1, s3, s9
 801257a:	ee32 1a05 	vadd.f32	s2, s4, s10
 801257e:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8012582:	ee36 0a84 	vadd.f32	s0, s13, s8
 8012586:	ee61 1a87 	vmul.f32	s3, s3, s14
 801258a:	ee22 2a07 	vmul.f32	s4, s4, s14
 801258e:	f340 808c 	ble.w	80126aa <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x196>
 8012592:	eba1 060e 	sub.w	r6, r1, lr
 8012596:	fb96 f5f4 	sdiv	r5, r6, r4
 801259a:	ee07 5a10 	vmov	s14, r5
 801259e:	2d00      	cmp	r5, #0
 80125a0:	fb04 6615 	mls	r6, r4, r5, r6
 80125a4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80125a8:	eea7 0a04 	vfma.f32	s0, s14, s8
 80125ac:	eee7 0a24 	vfma.f32	s1, s14, s9
 80125b0:	eea7 1a05 	vfma.f32	s2, s14, s10
 80125b4:	dd12      	ble.n	80125dc <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xc8>
 80125b6:	ee70 6a44 	vsub.f32	s13, s0, s8
 80125ba:	ee70 1ae4 	vsub.f32	s3, s1, s9
 80125be:	ee31 2a45 	vsub.f32	s4, s2, s10
 80125c2:	eef5 6a40 	vcmp.f32	s13, #0.0
 80125c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80125ca:	bf14      	ite	ne
 80125cc:	ee87 7aa6 	vdivne.f32	s14, s15, s13
 80125d0:	eeb0 7a67 	vmoveq.f32	s14, s15
 80125d4:	ee61 1a87 	vmul.f32	s3, s3, s14
 80125d8:	ee22 2a07 	vmul.f32	s4, s4, s14
 80125dc:	fb05 f204 	mul.w	r2, r5, r4
 80125e0:	1abf      	subs	r7, r7, r2
 80125e2:	4494      	add	ip, r2
 80125e4:	f8ba 2004 	ldrh.w	r2, [sl, #4]
 80125e8:	4411      	add	r1, r2
 80125ea:	eb09 020c 	add.w	r2, r9, ip
 80125ee:	b209      	sxth	r1, r1
 80125f0:	443a      	add	r2, r7
 80125f2:	428a      	cmp	r2, r1
 80125f4:	bfc4      	itt	gt
 80125f6:	eba1 0209 	subgt.w	r2, r1, r9
 80125fa:	eba2 070c 	subgt.w	r7, r2, ip
 80125fe:	2f00      	cmp	r7, #0
 8012600:	dd50      	ble.n	80126a4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0x190>
 8012602:	fb97 f1f4 	sdiv	r1, r7, r4
 8012606:	fb04 7211 	mls	r2, r4, r1, r7
 801260a:	b90a      	cbnz	r2, 8012610 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xfc>
 801260c:	3901      	subs	r1, #1
 801260e:	4622      	mov	r2, r4
 8012610:	eec7 3a80 	vdiv.f32	s7, s15, s0
 8012614:	6840      	ldr	r0, [r0, #4]
 8012616:	f89d b06c 	ldrb.w	fp, [sp, #108]	@ 0x6c
 801261a:	44b6      	add	lr, r6
 801261c:	f8d0 a000 	ldr.w	sl, [r0]
 8012620:	2900      	cmp	r1, #0
 8012622:	bfcc      	ite	gt
 8012624:	46a1      	movgt	r9, r4
 8012626:	4691      	movle	r9, r2
 8012628:	900b      	str	r0, [sp, #44]	@ 0x2c
 801262a:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801262c:	fb04 e505 	mla	r5, r4, r5, lr
 8012630:	eef0 6a42 	vmov.f32	s13, s4
 8012634:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 8012638:	9008      	str	r0, [sp, #32]
 801263a:	eeb0 7a61 	vmov.f32	s14, s3
 801263e:	9818      	ldr	r0, [sp, #96]	@ 0x60
 8012640:	695b      	ldr	r3, [r3, #20]
 8012642:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8012646:	f9b0 b002 	ldrsh.w	fp, [r0, #2]
 801264a:	eebe 7ac8 	vcvt.s32.f32	s14, s14, #16
 801264e:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8012650:	445b      	add	r3, fp
 8012652:	9307      	str	r3, [sp, #28]
 8012654:	ee16 3a90 	vmov	r3, s13
 8012658:	e9cd 8505 	strd	r8, r5, [sp, #20]
 801265c:	ee60 2aa3 	vmul.f32	s5, s1, s7
 8012660:	ee21 3a23 	vmul.f32	s6, s2, s7
 8012664:	ee72 7ae1 	vsub.f32	s15, s5, s3
 8012668:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801266c:	ee17 7a90 	vmov	r7, s15
 8012670:	ee73 7a42 	vsub.f32	s15, s6, s4
 8012674:	fb97 f7f4 	sdiv	r7, r7, r4
 8012678:	eefe 7ac8 	vcvt.s32.f32	s15, s15, #16
 801267c:	ee17 ca90 	vmov	ip, s15
 8012680:	fb9c fcf4 	sdiv	ip, ip, r4
 8012684:	fb0c 3306 	mla	r3, ip, r6, r3
 8012688:	9302      	str	r3, [sp, #8]
 801268a:	ee17 3a10 	vmov	r3, s14
 801268e:	e9cd 7c03 	strd	r7, ip, [sp, #12]
 8012692:	fb07 3706 	mla	r7, r7, r6, r3
 8012696:	eba9 0306 	sub.w	r3, r9, r6
 801269a:	e9cd 4700 	strd	r4, r7, [sp]
 801269e:	f8da 4008 	ldr.w	r4, [sl, #8]
 80126a2:	47a0      	blx	r4
 80126a4:	b00d      	add	sp, #52	@ 0x34
 80126a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80126aa:	2500      	movs	r5, #0
 80126ac:	462e      	mov	r6, r5
 80126ae:	e799      	b.n	80125e4 <_ZN8touchgfx3LCD22drawTextureMapScanLineERKNS_14DrawingSurfaceERKNS_9GradientsEPKNS_4EdgeES9_RKNS_14TextureSurfaceERKNS_4RectESF_tht+0xd0>

080126b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht>:
 80126b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80126b4:	b0db      	sub	sp, #364	@ 0x16c
 80126b6:	461d      	mov	r5, r3
 80126b8:	4614      	mov	r4, r2
 80126ba:	f8bd 3198 	ldrh.w	r3, [sp, #408]	@ 0x198
 80126be:	910f      	str	r1, [sp, #60]	@ 0x3c
 80126c0:	4629      	mov	r1, r5
 80126c2:	930a      	str	r3, [sp, #40]	@ 0x28
 80126c4:	f89d 319c 	ldrb.w	r3, [sp, #412]	@ 0x19c
 80126c8:	9009      	str	r0, [sp, #36]	@ 0x24
 80126ca:	930b      	str	r3, [sp, #44]	@ 0x2c
 80126cc:	f8bd 31a0 	ldrh.w	r3, [sp, #416]	@ 0x1a0
 80126d0:	f8dd b194 	ldr.w	fp, [sp, #404]	@ 0x194
 80126d4:	9310      	str	r3, [sp, #64]	@ 0x40
 80126d6:	6803      	ldr	r3, [r0, #0]
 80126d8:	6c5f      	ldr	r7, [r3, #68]	@ 0x44
 80126da:	e9dd 230a 	ldrd	r2, r3, [sp, #40]	@ 0x28
 80126de:	47b8      	blx	r7
 80126e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80126e2:	6058      	str	r0, [r3, #4]
 80126e4:	2800      	cmp	r0, #0
 80126e6:	f000 83a1 	beq.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 80126ea:	682b      	ldr	r3, [r5, #0]
 80126ec:	eef2 7a04 	vmov.f32	s15, #36	@ 0x41200000  10.0
 80126f0:	ed94 7a02 	vldr	s14, [r4, #8]
 80126f4:	9314      	str	r3, [sp, #80]	@ 0x50
 80126f6:	686b      	ldr	r3, [r5, #4]
 80126f8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80126fc:	9315      	str	r3, [sp, #84]	@ 0x54
 80126fe:	4bc1      	ldr	r3, [pc, #772]	@ (8012a04 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x354>)
 8012700:	7819      	ldrb	r1, [r3, #0]
 8012702:	e9d5 2302 	ldrd	r2, r3, [r5, #8]
 8012706:	2900      	cmp	r1, #0
 8012708:	bf16      	itet	ne
 801270a:	4619      	movne	r1, r3
 801270c:	4611      	moveq	r1, r2
 801270e:	4613      	movne	r3, r2
 8012710:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012714:	9116      	str	r1, [sp, #88]	@ 0x58
 8012716:	e9cd 3217 	strd	r3, r2, [sp, #92]	@ 0x5c
 801271a:	f240 8387 	bls.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801271e:	ed94 7a07 	vldr	s14, [r4, #28]
 8012722:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801272a:	f240 837f 	bls.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801272e:	ed94 7a0c 	vldr	s14, [r4, #48]	@ 0x30
 8012732:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8012736:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801273a:	f240 8377 	bls.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801273e:	6822      	ldr	r2, [r4, #0]
 8012740:	4bb1      	ldr	r3, [pc, #708]	@ (8012a08 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x358>)
 8012742:	429a      	cmp	r2, r3
 8012744:	f2c0 8372 	blt.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012748:	49b0      	ldr	r1, [pc, #704]	@ (8012a0c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x35c>)
 801274a:	6963      	ldr	r3, [r4, #20]
 801274c:	428a      	cmp	r2, r1
 801274e:	f300 836d 	bgt.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012752:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012756:	48ae      	ldr	r0, [pc, #696]	@ (8012a10 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x360>)
 8012758:	33ff      	adds	r3, #255	@ 0xff
 801275a:	4283      	cmp	r3, r0
 801275c:	f200 8366 	bhi.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012760:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 8012762:	4dac      	ldr	r5, [pc, #688]	@ (8012a14 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x364>)
 8012764:	f503 331c 	add.w	r3, r3, #159744	@ 0x27000
 8012768:	33ff      	adds	r3, #255	@ 0xff
 801276a:	42ab      	cmp	r3, r5
 801276c:	f200 835e 	bhi.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012770:	6862      	ldr	r2, [r4, #4]
 8012772:	f502 331c 	add.w	r3, r2, #159744	@ 0x27000
 8012776:	33ff      	adds	r3, #255	@ 0xff
 8012778:	4283      	cmp	r3, r0
 801277a:	f200 8357 	bhi.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801277e:	69a1      	ldr	r1, [r4, #24]
 8012780:	f501 331c 	add.w	r3, r1, #159744	@ 0x27000
 8012784:	33ff      	adds	r3, #255	@ 0xff
 8012786:	4283      	cmp	r3, r0
 8012788:	f200 8350 	bhi.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801278c:	6ae3      	ldr	r3, [r4, #44]	@ 0x2c
 801278e:	f503 301c 	add.w	r0, r3, #159744	@ 0x27000
 8012792:	30ff      	adds	r0, #255	@ 0xff
 8012794:	42a8      	cmp	r0, r5
 8012796:	f200 8349 	bhi.w	8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 801279a:	428a      	cmp	r2, r1
 801279c:	f280 8110 	bge.w	80129c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x310>
 80127a0:	429a      	cmp	r2, r3
 80127a2:	f300 8119 	bgt.w	80129d8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x328>
 80127a6:	4299      	cmp	r1, r3
 80127a8:	f280 811d 	bge.w	80129e6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x336>
 80127ac:	2502      	movs	r5, #2
 80127ae:	2701      	movs	r7, #1
 80127b0:	46a9      	mov	r9, r5
 80127b2:	46b8      	mov	r8, r7
 80127b4:	f04f 0a00 	mov.w	sl, #0
 80127b8:	4621      	mov	r1, r4
 80127ba:	a849      	add	r0, sp, #292	@ 0x124
 80127bc:	f003 fb3e 	bl	8015e3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>
 80127c0:	4622      	mov	r2, r4
 80127c2:	4653      	mov	r3, sl
 80127c4:	a949      	add	r1, sp, #292	@ 0x124
 80127c6:	f8cd 9000 	str.w	r9, [sp]
 80127ca:	a819      	add	r0, sp, #100	@ 0x64
 80127cc:	f003 fc66 	bl	801609c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80127d0:	4622      	mov	r2, r4
 80127d2:	4653      	mov	r3, sl
 80127d4:	a949      	add	r1, sp, #292	@ 0x124
 80127d6:	f8cd 8000 	str.w	r8, [sp]
 80127da:	a829      	add	r0, sp, #164	@ 0xa4
 80127dc:	f003 fc5e 	bl	801609c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80127e0:	4643      	mov	r3, r8
 80127e2:	4622      	mov	r2, r4
 80127e4:	a949      	add	r1, sp, #292	@ 0x124
 80127e6:	f8cd 9000 	str.w	r9, [sp]
 80127ea:	a839      	add	r0, sp, #228	@ 0xe4
 80127ec:	f003 fc56 	bl	801609c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>
 80127f0:	42af      	cmp	r7, r5
 80127f2:	af12      	add	r7, sp, #72	@ 0x48
 80127f4:	bfb7      	itett	lt
 80127f6:	2300      	movlt	r3, #0
 80127f8:	2301      	movge	r3, #1
 80127fa:	ad29      	addlt	r5, sp, #164	@ 0xa4
 80127fc:	ac19      	addlt	r4, sp, #100	@ 0x64
 80127fe:	bfb1      	iteee	lt
 8012800:	930e      	strlt	r3, [sp, #56]	@ 0x38
 8012802:	ad19      	addge	r5, sp, #100	@ 0x64
 8012804:	930e      	strge	r3, [sp, #56]	@ 0x38
 8012806:	ac29      	addge	r4, sp, #164	@ 0xa4
 8012808:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801280a:	e893 0003 	ldmia.w	r3, {r0, r1}
 801280e:	e887 0003 	stmia.w	r7, {r0, r1}
 8012812:	b928      	cbnz	r0, 8012820 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x170>
 8012814:	4b80      	ldr	r3, [pc, #512]	@ (8012a18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x368>)
 8012816:	6818      	ldr	r0, [r3, #0]
 8012818:	6803      	ldr	r3, [r0, #0]
 801281a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801281c:	4798      	blx	r3
 801281e:	6038      	str	r0, [r7, #0]
 8012820:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012822:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012826:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 801282a:	9a2f      	ldr	r2, [sp, #188]	@ 0xbc
 801282c:	930c      	str	r3, [sp, #48]	@ 0x30
 801282e:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012830:	6963      	ldr	r3, [r4, #20]
 8012832:	440b      	add	r3, r1
 8012834:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012838:	4408      	add	r0, r1
 801283a:	b200      	sxth	r0, r0
 801283c:	4283      	cmp	r3, r0
 801283e:	900d      	str	r0, [sp, #52]	@ 0x34
 8012840:	f280 80dd 	bge.w	80129fe <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x34e>
 8012844:	428b      	cmp	r3, r1
 8012846:	da08      	bge.n	801285a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012848:	2a00      	cmp	r2, #0
 801284a:	dd06      	ble.n	801285a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 801284c:	1acb      	subs	r3, r1, r3
 801284e:	429a      	cmp	r2, r3
 8012850:	f2c0 80e4 	blt.w	8012a1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36c>
 8012854:	2b00      	cmp	r3, #0
 8012856:	f300 80e2 	bgt.w	8012a1e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x36e>
 801285a:	6967      	ldr	r7, [r4, #20]
 801285c:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012860:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012862:	443b      	add	r3, r7
 8012864:	461f      	mov	r7, r3
 8012866:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012868:	1bdf      	subs	r7, r3, r7
 801286a:	4297      	cmp	r7, r2
 801286c:	bfa8      	it	ge
 801286e:	4617      	movge	r7, r2
 8012870:	2f00      	cmp	r7, #0
 8012872:	f340 8166 	ble.w	8012b42 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x492>
 8012876:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012878:	6829      	ldr	r1, [r5, #0]
 801287a:	f9b3 2000 	ldrsh.w	r2, [r3]
 801287e:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012882:	4411      	add	r1, r2
 8012884:	6820      	ldr	r0, [r4, #0]
 8012886:	4299      	cmp	r1, r3
 8012888:	dd1a      	ble.n	80128c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 801288a:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 801288e:	4402      	add	r2, r0
 8012890:	440b      	add	r3, r1
 8012892:	b21b      	sxth	r3, r3
 8012894:	429a      	cmp	r2, r3
 8012896:	dc13      	bgt.n	80128c0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x210>
 8012898:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801289a:	a912      	add	r1, sp, #72	@ 0x48
 801289c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801289e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80128a0:	681b      	ldr	r3, [r3, #0]
 80128a2:	9206      	str	r2, [sp, #24]
 80128a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80128a6:	9500      	str	r5, [sp, #0]
 80128a8:	9205      	str	r2, [sp, #20]
 80128aa:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80128ac:	e9cd b203 	strd	fp, r2, [sp, #12]
 80128b0:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 80128b2:	e9cd 8201 	strd	r8, r2, [sp, #4]
 80128b6:	aa49      	add	r2, sp, #292	@ 0x124
 80128b8:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 80128bc:	4623      	mov	r3, r4
 80128be:	47c8      	blx	r9
 80128c0:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 80128c4:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 80128c8:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 80128cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80128d0:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 80128d4:	68a1      	ldr	r1, [r4, #8]
 80128d6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80128da:	ed94 6a08 	vldr	s12, [r4, #32]
 80128de:	edd4 6a07 	vldr	s13, [r4, #28]
 80128e2:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 80128e6:	ee76 6a86 	vadd.f32	s13, s13, s12
 80128ea:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 80128ee:	e9d4 2300 	ldrd	r2, r3, [r4]
 80128f2:	edc4 6a07 	vstr	s13, [r4, #28]
 80128f6:	441a      	add	r2, r3
 80128f8:	6963      	ldr	r3, [r4, #20]
 80128fa:	3301      	adds	r3, #1
 80128fc:	6022      	str	r2, [r4, #0]
 80128fe:	6163      	str	r3, [r4, #20]
 8012900:	69a3      	ldr	r3, [r4, #24]
 8012902:	3b01      	subs	r3, #1
 8012904:	61a3      	str	r3, [r4, #24]
 8012906:	6923      	ldr	r3, [r4, #16]
 8012908:	440b      	add	r3, r1
 801290a:	68e1      	ldr	r1, [r4, #12]
 801290c:	428b      	cmp	r3, r1
 801290e:	6123      	str	r3, [r4, #16]
 8012910:	db15      	blt.n	801293e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x28e>
 8012912:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012916:	3201      	adds	r2, #1
 8012918:	1a5b      	subs	r3, r3, r1
 801291a:	ee76 6a26 	vadd.f32	s13, s12, s13
 801291e:	6022      	str	r2, [r4, #0]
 8012920:	6123      	str	r3, [r4, #16]
 8012922:	edc4 6a07 	vstr	s13, [r4, #28]
 8012926:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 801292a:	ee36 7a87 	vadd.f32	s14, s13, s14
 801292e:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012932:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012936:	ee77 7a27 	vadd.f32	s15, s14, s15
 801293a:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 801293e:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012942:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012946:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 801294a:	ee37 7a27 	vadd.f32	s14, s14, s15
 801294e:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012952:	68a9      	ldr	r1, [r5, #8]
 8012954:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012958:	ed95 6a08 	vldr	s12, [r5, #32]
 801295c:	edd5 6a07 	vldr	s13, [r5, #28]
 8012960:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012964:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012968:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 801296c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012970:	edc5 6a07 	vstr	s13, [r5, #28]
 8012974:	441a      	add	r2, r3
 8012976:	696b      	ldr	r3, [r5, #20]
 8012978:	3301      	adds	r3, #1
 801297a:	602a      	str	r2, [r5, #0]
 801297c:	616b      	str	r3, [r5, #20]
 801297e:	69ab      	ldr	r3, [r5, #24]
 8012980:	3b01      	subs	r3, #1
 8012982:	61ab      	str	r3, [r5, #24]
 8012984:	692b      	ldr	r3, [r5, #16]
 8012986:	440b      	add	r3, r1
 8012988:	68e9      	ldr	r1, [r5, #12]
 801298a:	428b      	cmp	r3, r1
 801298c:	612b      	str	r3, [r5, #16]
 801298e:	db15      	blt.n	80129bc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x30c>
 8012990:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012994:	3201      	adds	r2, #1
 8012996:	1a5b      	subs	r3, r3, r1
 8012998:	ee76 6a26 	vadd.f32	s13, s12, s13
 801299c:	602a      	str	r2, [r5, #0]
 801299e:	612b      	str	r3, [r5, #16]
 80129a0:	edc5 6a07 	vstr	s13, [r5, #28]
 80129a4:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 80129a8:	ee36 7a87 	vadd.f32	s14, s13, s14
 80129ac:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 80129b0:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 80129b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80129b8:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 80129bc:	3f01      	subs	r7, #1
 80129be:	e757      	b.n	8012870 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1c0>
 80129c0:	4299      	cmp	r1, r3
 80129c2:	dc13      	bgt.n	80129ec <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x33c>
 80129c4:	429a      	cmp	r2, r3
 80129c6:	da14      	bge.n	80129f2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x342>
 80129c8:	2502      	movs	r5, #2
 80129ca:	2703      	movs	r7, #3
 80129cc:	f04f 0800 	mov.w	r8, #0
 80129d0:	46a9      	mov	r9, r5
 80129d2:	f04f 0a01 	mov.w	sl, #1
 80129d6:	e6ef      	b.n	80127b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80129d8:	2501      	movs	r5, #1
 80129da:	2700      	movs	r7, #0
 80129dc:	46a9      	mov	r9, r5
 80129de:	46b8      	mov	r8, r7
 80129e0:	f04f 0a02 	mov.w	sl, #2
 80129e4:	e6e8      	b.n	80127b8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x108>
 80129e6:	2501      	movs	r5, #1
 80129e8:	2702      	movs	r7, #2
 80129ea:	e6e1      	b.n	80127b0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x100>
 80129ec:	2500      	movs	r5, #0
 80129ee:	2701      	movs	r7, #1
 80129f0:	e7f4      	b.n	80129dc <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x32c>
 80129f2:	2702      	movs	r7, #2
 80129f4:	2503      	movs	r5, #3
 80129f6:	f04f 0900 	mov.w	r9, #0
 80129fa:	46b8      	mov	r8, r7
 80129fc:	e7e9      	b.n	80129d2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x322>
 80129fe:	4613      	mov	r3, r2
 8012a00:	e728      	b.n	8012854 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1a4>
 8012a02:	bf00      	nop
 8012a04:	240253a0 	.word	0x240253a0
 8012a08:	fffd8f01 	.word	0xfffd8f01
 8012a0c:	00027100 	.word	0x00027100
 8012a10:	0004e1ff 	.word	0x0004e1ff
 8012a14:	0004e1fe 	.word	0x0004e1fe
 8012a18:	240253a8 	.word	0x240253a8
 8012a1c:	4613      	mov	r3, r2
 8012a1e:	992b      	ldr	r1, [sp, #172]	@ 0xac
 8012a20:	469e      	mov	lr, r3
 8012a22:	9f2e      	ldr	r7, [sp, #184]	@ 0xb8
 8012a24:	469c      	mov	ip, r3
 8012a26:	9111      	str	r1, [sp, #68]	@ 0x44
 8012a28:	f04f 0900 	mov.w	r9, #0
 8012a2c:	eddd 4a34 	vldr	s9, [sp, #208]	@ 0xd0
 8012a30:	ed9d 7a33 	vldr	s14, [sp, #204]	@ 0xcc
 8012a34:	ed9d 4a37 	vldr	s8, [sp, #220]	@ 0xdc
 8012a38:	eddd 7a36 	vldr	s15, [sp, #216]	@ 0xd8
 8012a3c:	eddd 3a31 	vldr	s7, [sp, #196]	@ 0xc4
 8012a40:	eddd 6a30 	vldr	s13, [sp, #192]	@ 0xc0
 8012a44:	ed9d 5a32 	vldr	s10, [sp, #200]	@ 0xc8
 8012a48:	eddd 5a35 	vldr	s11, [sp, #212]	@ 0xd4
 8012a4c:	ed9d 6a38 	vldr	s12, [sp, #224]	@ 0xe0
 8012a50:	e9dd 0a29 	ldrd	r0, sl, [sp, #164]	@ 0xa4
 8012a54:	e9dd 812c 	ldrd	r8, r1, [sp, #176]	@ 0xb0
 8012a58:	f1bc 0f00 	cmp.w	ip, #0
 8012a5c:	d147      	bne.n	8012aee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x43e>
 8012a5e:	eb03 0c07 	add.w	ip, r3, r7
 8012a62:	1ad7      	subs	r7, r2, r3
 8012a64:	f1b9 0f00 	cmp.w	r9, #0
 8012a68:	d009      	beq.n	8012a7e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3ce>
 8012a6a:	9029      	str	r0, [sp, #164]	@ 0xa4
 8012a6c:	ed8d 7a33 	vstr	s14, [sp, #204]	@ 0xcc
 8012a70:	edcd 7a36 	vstr	s15, [sp, #216]	@ 0xd8
 8012a74:	edcd 6a30 	vstr	s13, [sp, #192]	@ 0xc0
 8012a78:	912d      	str	r1, [sp, #180]	@ 0xb4
 8012a7a:	e9cd c72e 	strd	ip, r7, [sp, #184]	@ 0xb8
 8012a7e:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012a80:	f04f 0800 	mov.w	r8, #0
 8012a84:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012a88:	9111      	str	r1, [sp, #68]	@ 0x44
 8012a8a:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012a8e:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012a92:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012a96:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012a9a:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012a9e:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8012aa2:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8012aa6:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012aaa:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012aae:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012ab2:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8012ab6:	f1be 0f00 	cmp.w	lr, #0
 8012aba:	d031      	beq.n	8012b20 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x470>
 8012abc:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012abe:	4450      	add	r0, sl
 8012ac0:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012ac4:	4431      	add	r1, r6
 8012ac6:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012aca:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012ace:	4549      	cmp	r1, r9
 8012ad0:	db08      	blt.n	8012ae4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x434>
 8012ad2:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012ad6:	3001      	adds	r0, #1
 8012ad8:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012adc:	eba1 0109 	sub.w	r1, r1, r9
 8012ae0:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012ae4:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012ae8:	f04f 0801 	mov.w	r8, #1
 8012aec:	e7e3      	b.n	8012ab6 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x406>
 8012aee:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8012af0:	4450      	add	r0, sl
 8012af2:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012af6:	4431      	add	r1, r6
 8012af8:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012afc:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012b00:	4541      	cmp	r1, r8
 8012b02:	db08      	blt.n	8012b16 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x466>
 8012b04:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012b08:	3001      	adds	r0, #1
 8012b0a:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012b0e:	eba1 0108 	sub.w	r1, r1, r8
 8012b12:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012b16:	f10c 3cff 	add.w	ip, ip, #4294967295
 8012b1a:	f04f 0901 	mov.w	r9, #1
 8012b1e:	e79b      	b.n	8012a58 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x3a8>
 8012b20:	449c      	add	ip, r3
 8012b22:	1aff      	subs	r7, r7, r3
 8012b24:	f1b8 0f00 	cmp.w	r8, #0
 8012b28:	d009      	beq.n	8012b3e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x48e>
 8012b2a:	9019      	str	r0, [sp, #100]	@ 0x64
 8012b2c:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8012b30:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012b34:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012b38:	911d      	str	r1, [sp, #116]	@ 0x74
 8012b3a:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012b3e:	1ad2      	subs	r2, r2, r3
 8012b40:	e68b      	b.n	801285a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x1aa>
 8012b42:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8012b44:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8012b46:	2b00      	cmp	r3, #0
 8012b48:	f000 80d1 	beq.w	8012cee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63e>
 8012b4c:	ad19      	add	r5, sp, #100	@ 0x64
 8012b4e:	ac39      	add	r4, sp, #228	@ 0xe4
 8012b50:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012b52:	f8bb 0006 	ldrh.w	r0, [fp, #6]
 8012b56:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8012b5a:	930c      	str	r3, [sp, #48]	@ 0x30
 8012b5c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8012b5e:	6963      	ldr	r3, [r4, #20]
 8012b60:	440b      	add	r3, r1
 8012b62:	f9bb 1002 	ldrsh.w	r1, [fp, #2]
 8012b66:	4408      	add	r0, r1
 8012b68:	b200      	sxth	r0, r0
 8012b6a:	4283      	cmp	r3, r0
 8012b6c:	900d      	str	r0, [sp, #52]	@ 0x34
 8012b6e:	f280 80c1 	bge.w	8012cf4 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x644>
 8012b72:	428b      	cmp	r3, r1
 8012b74:	da08      	bge.n	8012b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012b76:	2a00      	cmp	r2, #0
 8012b78:	dd06      	ble.n	8012b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012b7a:	1acb      	subs	r3, r1, r3
 8012b7c:	429a      	cmp	r2, r3
 8012b7e:	f2c0 80bb 	blt.w	8012cf8 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x648>
 8012b82:	2b00      	cmp	r3, #0
 8012b84:	f300 80b9 	bgt.w	8012cfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x64a>
 8012b88:	6967      	ldr	r7, [r4, #20]
 8012b8a:	f10d 0850 	add.w	r8, sp, #80	@ 0x50
 8012b8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8012b90:	443b      	add	r3, r7
 8012b92:	461f      	mov	r7, r3
 8012b94:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8012b96:	1bdf      	subs	r7, r3, r7
 8012b98:	4297      	cmp	r7, r2
 8012b9a:	bfa8      	it	ge
 8012b9c:	4617      	movge	r7, r2
 8012b9e:	2f00      	cmp	r7, #0
 8012ba0:	f340 813c 	ble.w	8012e1c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x76c>
 8012ba4:	9b64      	ldr	r3, [sp, #400]	@ 0x190
 8012ba6:	6829      	ldr	r1, [r5, #0]
 8012ba8:	f9b3 2000 	ldrsh.w	r2, [r3]
 8012bac:	f9bb 3000 	ldrsh.w	r3, [fp]
 8012bb0:	4411      	add	r1, r2
 8012bb2:	6820      	ldr	r0, [r4, #0]
 8012bb4:	4299      	cmp	r1, r3
 8012bb6:	dd1a      	ble.n	8012bee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012bb8:	f8bb 1004 	ldrh.w	r1, [fp, #4]
 8012bbc:	4402      	add	r2, r0
 8012bbe:	440b      	add	r3, r1
 8012bc0:	b21b      	sxth	r3, r3
 8012bc2:	429a      	cmp	r2, r3
 8012bc4:	dc13      	bgt.n	8012bee <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x53e>
 8012bc6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8012bc8:	a912      	add	r1, sp, #72	@ 0x48
 8012bca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bcc:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8012bce:	681b      	ldr	r3, [r3, #0]
 8012bd0:	9206      	str	r2, [sp, #24]
 8012bd2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8012bd4:	9500      	str	r5, [sp, #0]
 8012bd6:	9205      	str	r2, [sp, #20]
 8012bd8:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012bda:	e9cd b203 	strd	fp, r2, [sp, #12]
 8012bde:	9a64      	ldr	r2, [sp, #400]	@ 0x190
 8012be0:	e9cd 8201 	strd	r8, r2, [sp, #4]
 8012be4:	aa49      	add	r2, sp, #292	@ 0x124
 8012be6:	f8d3 9048 	ldr.w	r9, [r3, #72]	@ 0x48
 8012bea:	4623      	mov	r3, r4
 8012bec:	47c8      	blx	r9
 8012bee:	ed94 7a0a 	vldr	s14, [r4, #40]	@ 0x28
 8012bf2:	edd4 7a0b 	vldr	s15, [r4, #44]	@ 0x2c
 8012bf6:	edd4 6a0e 	vldr	s13, [r4, #56]	@ 0x38
 8012bfa:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012bfe:	edd4 7a0d 	vldr	s15, [r4, #52]	@ 0x34
 8012c02:	68a1      	ldr	r1, [r4, #8]
 8012c04:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c08:	ed94 6a08 	vldr	s12, [r4, #32]
 8012c0c:	edd4 6a07 	vldr	s13, [r4, #28]
 8012c10:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012c14:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012c18:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012c1c:	e9d4 2300 	ldrd	r2, r3, [r4]
 8012c20:	edc4 6a07 	vstr	s13, [r4, #28]
 8012c24:	441a      	add	r2, r3
 8012c26:	6963      	ldr	r3, [r4, #20]
 8012c28:	3301      	adds	r3, #1
 8012c2a:	6022      	str	r2, [r4, #0]
 8012c2c:	6163      	str	r3, [r4, #20]
 8012c2e:	69a3      	ldr	r3, [r4, #24]
 8012c30:	3b01      	subs	r3, #1
 8012c32:	61a3      	str	r3, [r4, #24]
 8012c34:	6923      	ldr	r3, [r4, #16]
 8012c36:	440b      	add	r3, r1
 8012c38:	68e1      	ldr	r1, [r4, #12]
 8012c3a:	428b      	cmp	r3, r1
 8012c3c:	6123      	str	r3, [r4, #16]
 8012c3e:	db15      	blt.n	8012c6c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x5bc>
 8012c40:	ed94 6a09 	vldr	s12, [r4, #36]	@ 0x24
 8012c44:	3201      	adds	r2, #1
 8012c46:	1a5b      	subs	r3, r3, r1
 8012c48:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012c4c:	6022      	str	r2, [r4, #0]
 8012c4e:	6123      	str	r3, [r4, #16]
 8012c50:	edc4 6a07 	vstr	s13, [r4, #28]
 8012c54:	edd4 6a0c 	vldr	s13, [r4, #48]	@ 0x30
 8012c58:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012c5c:	ed84 7a0a 	vstr	s14, [r4, #40]	@ 0x28
 8012c60:	ed94 7a0f 	vldr	s14, [r4, #60]	@ 0x3c
 8012c64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012c68:	edc4 7a0d 	vstr	s15, [r4, #52]	@ 0x34
 8012c6c:	ed95 7a0a 	vldr	s14, [r5, #40]	@ 0x28
 8012c70:	edd5 7a0b 	vldr	s15, [r5, #44]	@ 0x2c
 8012c74:	edd5 6a0e 	vldr	s13, [r5, #56]	@ 0x38
 8012c78:	ee37 7a27 	vadd.f32	s14, s14, s15
 8012c7c:	edd5 7a0d 	vldr	s15, [r5, #52]	@ 0x34
 8012c80:	68a9      	ldr	r1, [r5, #8]
 8012c82:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c86:	ed95 6a08 	vldr	s12, [r5, #32]
 8012c8a:	edd5 6a07 	vldr	s13, [r5, #28]
 8012c8e:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012c92:	ee76 6a86 	vadd.f32	s13, s13, s12
 8012c96:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012c9a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8012c9e:	edc5 6a07 	vstr	s13, [r5, #28]
 8012ca2:	441a      	add	r2, r3
 8012ca4:	696b      	ldr	r3, [r5, #20]
 8012ca6:	3301      	adds	r3, #1
 8012ca8:	602a      	str	r2, [r5, #0]
 8012caa:	616b      	str	r3, [r5, #20]
 8012cac:	69ab      	ldr	r3, [r5, #24]
 8012cae:	3b01      	subs	r3, #1
 8012cb0:	61ab      	str	r3, [r5, #24]
 8012cb2:	692b      	ldr	r3, [r5, #16]
 8012cb4:	440b      	add	r3, r1
 8012cb6:	68e9      	ldr	r1, [r5, #12]
 8012cb8:	428b      	cmp	r3, r1
 8012cba:	612b      	str	r3, [r5, #16]
 8012cbc:	db15      	blt.n	8012cea <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x63a>
 8012cbe:	ed95 6a09 	vldr	s12, [r5, #36]	@ 0x24
 8012cc2:	3201      	adds	r2, #1
 8012cc4:	1a5b      	subs	r3, r3, r1
 8012cc6:	ee76 6a26 	vadd.f32	s13, s12, s13
 8012cca:	602a      	str	r2, [r5, #0]
 8012ccc:	612b      	str	r3, [r5, #16]
 8012cce:	edc5 6a07 	vstr	s13, [r5, #28]
 8012cd2:	edd5 6a0c 	vldr	s13, [r5, #48]	@ 0x30
 8012cd6:	ee36 7a87 	vadd.f32	s14, s13, s14
 8012cda:	ed85 7a0a 	vstr	s14, [r5, #40]	@ 0x28
 8012cde:	ed95 7a0f 	vldr	s14, [r5, #60]	@ 0x3c
 8012ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8012ce6:	edc5 7a0d 	vstr	s15, [r5, #52]	@ 0x34
 8012cea:	3f01      	subs	r7, #1
 8012cec:	e757      	b.n	8012b9e <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4ee>
 8012cee:	ad39      	add	r5, sp, #228	@ 0xe4
 8012cf0:	ac19      	add	r4, sp, #100	@ 0x64
 8012cf2:	e72d      	b.n	8012b50 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4a0>
 8012cf4:	4613      	mov	r3, r2
 8012cf6:	e744      	b.n	8012b82 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d2>
 8012cf8:	4613      	mov	r3, r2
 8012cfa:	9e3b      	ldr	r6, [sp, #236]	@ 0xec
 8012cfc:	469e      	mov	lr, r3
 8012cfe:	f8dd c0f8 	ldr.w	ip, [sp, #248]	@ 0xf8
 8012d02:	461f      	mov	r7, r3
 8012d04:	ed9d 7a43 	vldr	s14, [sp, #268]	@ 0x10c
 8012d08:	f04f 0900 	mov.w	r9, #0
 8012d0c:	eddd 4a44 	vldr	s9, [sp, #272]	@ 0x110
 8012d10:	eddd 7a46 	vldr	s15, [sp, #280]	@ 0x118
 8012d14:	ed9d 4a47 	vldr	s8, [sp, #284]	@ 0x11c
 8012d18:	eddd 6a40 	vldr	s13, [sp, #256]	@ 0x100
 8012d1c:	eddd 3a41 	vldr	s7, [sp, #260]	@ 0x104
 8012d20:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8012d22:	f8dd 80f0 	ldr.w	r8, [sp, #240]	@ 0xf0
 8012d26:	ed9d 5a42 	vldr	s10, [sp, #264]	@ 0x108
 8012d2a:	eddd 5a45 	vldr	s11, [sp, #276]	@ 0x114
 8012d2e:	ed9d 6a48 	vldr	s12, [sp, #288]	@ 0x120
 8012d32:	960e      	str	r6, [sp, #56]	@ 0x38
 8012d34:	e9dd 0a39 	ldrd	r0, sl, [sp, #228]	@ 0xe4
 8012d38:	2f00      	cmp	r7, #0
 8012d3a:	d146      	bne.n	8012dca <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x71a>
 8012d3c:	449c      	add	ip, r3
 8012d3e:	1ad7      	subs	r7, r2, r3
 8012d40:	f1b9 0f00 	cmp.w	r9, #0
 8012d44:	d009      	beq.n	8012d5a <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6aa>
 8012d46:	9039      	str	r0, [sp, #228]	@ 0xe4
 8012d48:	913d      	str	r1, [sp, #244]	@ 0xf4
 8012d4a:	edcd 6a40 	vstr	s13, [sp, #256]	@ 0x100
 8012d4e:	ed8d 7a43 	vstr	s14, [sp, #268]	@ 0x10c
 8012d52:	edcd 7a46 	vstr	s15, [sp, #280]	@ 0x118
 8012d56:	e9cd c73e 	strd	ip, r7, [sp, #248]	@ 0xf8
 8012d5a:	991b      	ldr	r1, [sp, #108]	@ 0x6c
 8012d5c:	f04f 0800 	mov.w	r8, #0
 8012d60:	eddd 4a24 	vldr	s9, [sp, #144]	@ 0x90
 8012d64:	910e      	str	r1, [sp, #56]	@ 0x38
 8012d66:	eddd 6a23 	vldr	s13, [sp, #140]	@ 0x8c
 8012d6a:	ed9d 4a27 	vldr	s8, [sp, #156]	@ 0x9c
 8012d6e:	ed9d 7a26 	vldr	s14, [sp, #152]	@ 0x98
 8012d72:	eddd 3a21 	vldr	s7, [sp, #132]	@ 0x84
 8012d76:	eddd 7a20 	vldr	s15, [sp, #128]	@ 0x80
 8012d7a:	ed9d 5a22 	vldr	s10, [sp, #136]	@ 0x88
 8012d7e:	eddd 5a25 	vldr	s11, [sp, #148]	@ 0x94
 8012d82:	ed9d 6a28 	vldr	s12, [sp, #160]	@ 0xa0
 8012d86:	e9dd 0a19 	ldrd	r0, sl, [sp, #100]	@ 0x64
 8012d8a:	e9dd c71e 	ldrd	ip, r7, [sp, #120]	@ 0x78
 8012d8e:	e9dd 911c 	ldrd	r9, r1, [sp, #112]	@ 0x70
 8012d92:	f1be 0f00 	cmp.w	lr, #0
 8012d96:	d030      	beq.n	8012dfa <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x74a>
 8012d98:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012d9a:	4450      	add	r0, sl
 8012d9c:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8012da0:	4431      	add	r1, r6
 8012da2:	ee37 7a04 	vadd.f32	s14, s14, s8
 8012da6:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8012daa:	4549      	cmp	r1, r9
 8012dac:	db08      	blt.n	8012dc0 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x710>
 8012dae:	ee77 7a85 	vadd.f32	s15, s15, s10
 8012db2:	3001      	adds	r0, #1
 8012db4:	ee76 6aa5 	vadd.f32	s13, s13, s11
 8012db8:	eba1 0109 	sub.w	r1, r1, r9
 8012dbc:	ee37 7a06 	vadd.f32	s14, s14, s12
 8012dc0:	f10e 3eff 	add.w	lr, lr, #4294967295
 8012dc4:	f04f 0801 	mov.w	r8, #1
 8012dc8:	e7e3      	b.n	8012d92 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x6e2>
 8012dca:	9e0e      	ldr	r6, [sp, #56]	@ 0x38
 8012dcc:	4450      	add	r0, sl
 8012dce:	ee37 7a24 	vadd.f32	s14, s14, s9
 8012dd2:	4431      	add	r1, r6
 8012dd4:	ee77 7a84 	vadd.f32	s15, s15, s8
 8012dd8:	ee76 6aa3 	vadd.f32	s13, s13, s7
 8012ddc:	4541      	cmp	r1, r8
 8012dde:	db08      	blt.n	8012df2 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x742>
 8012de0:	ee76 6a85 	vadd.f32	s13, s13, s10
 8012de4:	3001      	adds	r0, #1
 8012de6:	ee37 7a25 	vadd.f32	s14, s14, s11
 8012dea:	eba1 0108 	sub.w	r1, r1, r8
 8012dee:	ee77 7a86 	vadd.f32	s15, s15, s12
 8012df2:	3f01      	subs	r7, #1
 8012df4:	f04f 0901 	mov.w	r9, #1
 8012df8:	e79e      	b.n	8012d38 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x688>
 8012dfa:	449c      	add	ip, r3
 8012dfc:	1aff      	subs	r7, r7, r3
 8012dfe:	f1b8 0f00 	cmp.w	r8, #0
 8012e02:	d009      	beq.n	8012e18 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x768>
 8012e04:	9019      	str	r0, [sp, #100]	@ 0x64
 8012e06:	edcd 6a23 	vstr	s13, [sp, #140]	@ 0x8c
 8012e0a:	ed8d 7a26 	vstr	s14, [sp, #152]	@ 0x98
 8012e0e:	edcd 7a20 	vstr	s15, [sp, #128]	@ 0x80
 8012e12:	911d      	str	r1, [sp, #116]	@ 0x74
 8012e14:	e9cd c71e 	strd	ip, r7, [sp, #120]	@ 0x78
 8012e18:	1ad2      	subs	r2, r2, r3
 8012e1a:	e6b5      	b.n	8012b88 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x4d8>
 8012e1c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8012e1e:	681b      	ldr	r3, [r3, #0]
 8012e20:	b923      	cbnz	r3, 8012e2c <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x77c>
 8012e22:	4b04      	ldr	r3, [pc, #16]	@ (8012e34 <_ZN8touchgfx3LCD22drawTextureMapTriangleERKNS_14DrawingSurfaceEPKNS_7Point3DERKNS_14TextureSurfaceERKNS_4RectESC_tht+0x784>)
 8012e24:	6818      	ldr	r0, [r3, #0]
 8012e26:	6803      	ldr	r3, [r0, #0]
 8012e28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e2a:	4798      	blx	r3
 8012e2c:	b05b      	add	sp, #364	@ 0x16c
 8012e2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012e32:	bf00      	nop
 8012e34:	240253a8 	.word	0x240253a8

08012e38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>:
 8012e38:	2b03      	cmp	r3, #3
 8012e3a:	d818      	bhi.n	8012e6e <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x36>
 8012e3c:	e8df f003 	tbb	[pc, r3]
 8012e40:	130d0602 	.word	0x130d0602
 8012e44:	f9b0 2000 	ldrsh.w	r2, [r0]
 8012e48:	1850      	adds	r0, r2, r1
 8012e4a:	4770      	bx	lr
 8012e4c:	8803      	ldrh	r3, [r0, #0]
 8012e4e:	8880      	ldrh	r0, [r0, #4]
 8012e50:	4418      	add	r0, r3
 8012e52:	b200      	sxth	r0, r0
 8012e54:	1a80      	subs	r0, r0, r2
 8012e56:	3801      	subs	r0, #1
 8012e58:	4770      	bx	lr
 8012e5a:	8803      	ldrh	r3, [r0, #0]
 8012e5c:	8880      	ldrh	r0, [r0, #4]
 8012e5e:	4418      	add	r0, r3
 8012e60:	b200      	sxth	r0, r0
 8012e62:	1a40      	subs	r0, r0, r1
 8012e64:	e7f7      	b.n	8012e56 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE+0x1e>
 8012e66:	f9b0 0000 	ldrsh.w	r0, [r0]
 8012e6a:	4410      	add	r0, r2
 8012e6c:	4770      	bx	lr
 8012e6e:	2000      	movs	r0, #0
 8012e70:	4770      	bx	lr

08012e72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>:
 8012e72:	2b03      	cmp	r3, #3
 8012e74:	d817      	bhi.n	8012ea6 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x34>
 8012e76:	e8df f003 	tbb	[pc, r3]
 8012e7a:	0602      	.short	0x0602
 8012e7c:	1009      	.short	0x1009
 8012e7e:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 8012e82:	1850      	adds	r0, r2, r1
 8012e84:	4770      	bx	lr
 8012e86:	f9b0 2002 	ldrsh.w	r2, [r0, #2]
 8012e8a:	e7fa      	b.n	8012e82 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x10>
 8012e8c:	8843      	ldrh	r3, [r0, #2]
 8012e8e:	88c0      	ldrh	r0, [r0, #6]
 8012e90:	4418      	add	r0, r3
 8012e92:	b200      	sxth	r0, r0
 8012e94:	1a80      	subs	r0, r0, r2
 8012e96:	3801      	subs	r0, #1
 8012e98:	4770      	bx	lr
 8012e9a:	8843      	ldrh	r3, [r0, #2]
 8012e9c:	88c0      	ldrh	r0, [r0, #6]
 8012e9e:	4418      	add	r0, r3
 8012ea0:	b200      	sxth	r0, r0
 8012ea2:	1a40      	subs	r0, r0, r1
 8012ea4:	e7f7      	b.n	8012e96 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE+0x24>
 8012ea6:	2000      	movs	r0, #0
 8012ea8:	4770      	bx	lr
	...

08012eac <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE>:
 8012eac:	4b01      	ldr	r3, [pc, #4]	@ (8012eb4 <_GLOBAL__sub_I__ZN8touchgfx3LCD12defaultColorE+0x8>)
 8012eae:	2200      	movs	r2, #0
 8012eb0:	601a      	str	r2, [r3, #0]
 8012eb2:	4770      	bx	lr
 8012eb4:	240253b8 	.word	0x240253b8

08012eb8 <_ZN8touchgfx16TouchCalibration4clzuEm>:
 8012eb8:	4603      	mov	r3, r0
 8012eba:	b1c8      	cbz	r0, 8012ef0 <_ZN8touchgfx16TouchCalibration4clzuEm+0x38>
 8012ebc:	0c02      	lsrs	r2, r0, #16
 8012ebe:	0412      	lsls	r2, r2, #16
 8012ec0:	b9a2      	cbnz	r2, 8012eec <_ZN8touchgfx16TouchCalibration4clzuEm+0x34>
 8012ec2:	0403      	lsls	r3, r0, #16
 8012ec4:	2010      	movs	r0, #16
 8012ec6:	f013 4f7f 	tst.w	r3, #4278190080	@ 0xff000000
 8012eca:	bf04      	itt	eq
 8012ecc:	021b      	lsleq	r3, r3, #8
 8012ece:	3008      	addeq	r0, #8
 8012ed0:	f013 4f70 	tst.w	r3, #4026531840	@ 0xf0000000
 8012ed4:	bf04      	itt	eq
 8012ed6:	011b      	lsleq	r3, r3, #4
 8012ed8:	3004      	addeq	r0, #4
 8012eda:	f013 4f40 	tst.w	r3, #3221225472	@ 0xc0000000
 8012ede:	bf04      	itt	eq
 8012ee0:	009b      	lsleq	r3, r3, #2
 8012ee2:	3002      	addeq	r0, #2
 8012ee4:	2b00      	cmp	r3, #0
 8012ee6:	db04      	blt.n	8012ef2 <_ZN8touchgfx16TouchCalibration4clzuEm+0x3a>
 8012ee8:	3001      	adds	r0, #1
 8012eea:	4770      	bx	lr
 8012eec:	2000      	movs	r0, #0
 8012eee:	e7ea      	b.n	8012ec6 <_ZN8touchgfx16TouchCalibration4clzuEm+0xe>
 8012ef0:	2020      	movs	r0, #32
 8012ef2:	4770      	bx	lr

08012ef4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>:
 8012ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012ef8:	b087      	sub	sp, #28
 8012efa:	460d      	mov	r5, r1
 8012efc:	4616      	mov	r6, r2
 8012efe:	4698      	mov	r8, r3
 8012f00:	4601      	mov	r1, r0
 8012f02:	e9dd 4710 	ldrd	r4, r7, [sp, #64]	@ 0x40
 8012f06:	b120      	cbz	r0, 8012f12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012f08:	b11a      	cbz	r2, 8012f12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012f0a:	2d1f      	cmp	r5, #31
 8012f0c:	d801      	bhi.n	8012f12 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x1e>
 8012f0e:	2b1f      	cmp	r3, #31
 8012f10:	d904      	bls.n	8012f1c <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x28>
 8012f12:	2000      	movs	r0, #0
 8012f14:	6038      	str	r0, [r7, #0]
 8012f16:	b007      	add	sp, #28
 8012f18:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012f1c:	b97d      	cbnz	r5, 8012f3e <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x4a>
 8012f1e:	b143      	cbz	r3, 8012f32 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x3e>
 8012f20:	4602      	mov	r2, r0
 8012f22:	462b      	mov	r3, r5
 8012f24:	4641      	mov	r1, r8
 8012f26:	4630      	mov	r0, r6
 8012f28:	e9cd 4700 	strd	r4, r7, [sp]
 8012f2c:	f7ff ffe2 	bl	8012ef4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012f30:	e7f1      	b.n	8012f16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012f32:	f04f 33ff 	mov.w	r3, #4294967295
 8012f36:	f06f 4000 	mvn.w	r0, #2147483648	@ 0x80000000
 8012f3a:	603b      	str	r3, [r7, #0]
 8012f3c:	e7eb      	b.n	8012f16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012f3e:	fa32 fa05 	lsrs.w	sl, r2, r5
 8012f42:	d106      	bne.n	8012f52 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x5e>
 8012f44:	4346      	muls	r6, r0
 8012f46:	fbb6 f0f4 	udiv	r0, r6, r4
 8012f4a:	fb04 6610 	mls	r6, r4, r0, r6
 8012f4e:	603e      	str	r6, [r7, #0]
 8012f50:	e7e1      	b.n	8012f16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>
 8012f52:	2201      	movs	r2, #1
 8012f54:	fa00 fb05 	lsl.w	fp, r0, r5
 8012f58:	40aa      	lsls	r2, r5
 8012f5a:	fbbb f9f4 	udiv	r9, fp, r4
 8012f5e:	3a01      	subs	r2, #1
 8012f60:	fb0a f309 	mul.w	r3, sl, r9
 8012f64:	fb04 b919 	mls	r9, r4, r9, fp
 8012f68:	4016      	ands	r6, r2
 8012f6a:	9303      	str	r3, [sp, #12]
 8012f6c:	4630      	mov	r0, r6
 8012f6e:	f7ff ffa3 	bl	8012eb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012f72:	462b      	mov	r3, r5
 8012f74:	460a      	mov	r2, r1
 8012f76:	4601      	mov	r1, r0
 8012f78:	4630      	mov	r0, r6
 8012f7a:	e9cd 4700 	strd	r4, r7, [sp]
 8012f7e:	f7ff ffb9 	bl	8012ef4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012f82:	4606      	mov	r6, r0
 8012f84:	4648      	mov	r0, r9
 8012f86:	eb05 0108 	add.w	r1, r5, r8
 8012f8a:	f7ff ff95 	bl	8012eb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012f8e:	ab05      	add	r3, sp, #20
 8012f90:	464a      	mov	r2, r9
 8012f92:	e9cd 4300 	strd	r4, r3, [sp]
 8012f96:	4603      	mov	r3, r0
 8012f98:	4650      	mov	r0, sl
 8012f9a:	f7ff ffab 	bl	8012ef4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 8012f9e:	6839      	ldr	r1, [r7, #0]
 8012fa0:	9a05      	ldr	r2, [sp, #20]
 8012fa2:	9b03      	ldr	r3, [sp, #12]
 8012fa4:	4411      	add	r1, r2
 8012fa6:	fbb1 f2f4 	udiv	r2, r1, r4
 8012faa:	18d3      	adds	r3, r2, r3
 8012fac:	fb04 1412 	mls	r4, r4, r2, r1
 8012fb0:	441e      	add	r6, r3
 8012fb2:	603c      	str	r4, [r7, #0]
 8012fb4:	4430      	add	r0, r6
 8012fb6:	e7ae      	b.n	8012f16 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm+0x22>

08012fb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>:
 8012fb8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8012fbc:	b085      	sub	sp, #20
 8012fbe:	f1b0 0900 	subs.w	r9, r0, #0
 8012fc2:	461d      	mov	r5, r3
 8012fc4:	4617      	mov	r7, r2
 8012fc6:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 8012fc8:	bfbb      	ittet	lt
 8012fca:	f1c9 0900 	rsblt	r9, r9, #0
 8012fce:	f04f 36ff 	movlt.w	r6, #4294967295
 8012fd2:	2601      	movge	r6, #1
 8012fd4:	6823      	ldrlt	r3, [r4, #0]
 8012fd6:	bfbc      	itt	lt
 8012fd8:	425b      	neglt	r3, r3
 8012fda:	6023      	strlt	r3, [r4, #0]
 8012fdc:	2a00      	cmp	r2, #0
 8012fde:	da04      	bge.n	8012fea <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x32>
 8012fe0:	6823      	ldr	r3, [r4, #0]
 8012fe2:	4257      	negs	r7, r2
 8012fe4:	4276      	negs	r6, r6
 8012fe6:	425b      	negs	r3, r3
 8012fe8:	6023      	str	r3, [r4, #0]
 8012fea:	2d00      	cmp	r5, #0
 8012fec:	4638      	mov	r0, r7
 8012fee:	bfba      	itte	lt
 8012ff0:	426d      	neglt	r5, r5
 8012ff2:	f04f 38ff 	movlt.w	r8, #4294967295
 8012ff6:	f04f 0801 	movge.w	r8, #1
 8012ffa:	f7ff ff5d 	bl	8012eb8 <_ZN8touchgfx16TouchCalibration4clzuEm>
 8012ffe:	ab03      	add	r3, sp, #12
 8013000:	463a      	mov	r2, r7
 8013002:	e9cd 5300 	strd	r5, r3, [sp]
 8013006:	4603      	mov	r3, r0
 8013008:	4648      	mov	r0, r9
 801300a:	f7ff ff73 	bl	8012ef4 <_ZN8touchgfx16TouchCalibration7muldivuEmmmmmRm>
 801300e:	6823      	ldr	r3, [r4, #0]
 8013010:	9a03      	ldr	r2, [sp, #12]
 8013012:	4546      	cmp	r6, r8
 8013014:	441a      	add	r2, r3
 8013016:	fb92 f3f5 	sdiv	r3, r2, r5
 801301a:	4418      	add	r0, r3
 801301c:	fb05 2313 	mls	r3, r5, r3, r2
 8013020:	bf18      	it	ne
 8013022:	4240      	negne	r0, r0
 8013024:	1c72      	adds	r2, r6, #1
 8013026:	6023      	str	r3, [r4, #0]
 8013028:	d105      	bne.n	8013036 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7e>
 801302a:	2b00      	cmp	r3, #0
 801302c:	f1c3 0200 	rsb	r2, r3, #0
 8013030:	db0b      	blt.n	801304a <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x92>
 8013032:	6022      	str	r2, [r4, #0]
 8013034:	e006      	b.n	8013044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 8013036:	2e01      	cmp	r6, #1
 8013038:	d104      	bne.n	8013044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801303a:	2b00      	cmp	r3, #0
 801303c:	da02      	bge.n	8013044 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x8c>
 801303e:	442b      	add	r3, r5
 8013040:	3801      	subs	r0, #1
 8013042:	6023      	str	r3, [r4, #0]
 8013044:	b005      	add	sp, #20
 8013046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801304a:	3801      	subs	r0, #1
 801304c:	1b52      	subs	r2, r2, r5
 801304e:	e7f0      	b.n	8013032 <_ZN8touchgfx16TouchCalibration6muldivEllllRl+0x7a>

08013050 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE>:
 8013050:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 8013054:	4c1c      	ldr	r4, [pc, #112]	@ (80130c8 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x78>)
 8013056:	4605      	mov	r5, r0
 8013058:	6807      	ldr	r7, [r0, #0]
 801305a:	69a3      	ldr	r3, [r4, #24]
 801305c:	b92b      	cbnz	r3, 801306a <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x1a>
 801305e:	6840      	ldr	r0, [r0, #4]
 8013060:	e9c5 7000 	strd	r7, r0, [r5]
 8013064:	b004      	add	sp, #16
 8013066:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801306a:	f04f 0802 	mov.w	r8, #2
 801306e:	68a2      	ldr	r2, [r4, #8]
 8013070:	ae04      	add	r6, sp, #16
 8013072:	6820      	ldr	r0, [r4, #0]
 8013074:	fb93 f1f8 	sdiv	r1, r3, r8
 8013078:	440a      	add	r2, r1
 801307a:	69e1      	ldr	r1, [r4, #28]
 801307c:	f846 2d04 	str.w	r2, [r6, #-4]!
 8013080:	463a      	mov	r2, r7
 8013082:	9600      	str	r6, [sp, #0]
 8013084:	f7ff ff98 	bl	8012fb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013088:	69a3      	ldr	r3, [r4, #24]
 801308a:	4607      	mov	r7, r0
 801308c:	686a      	ldr	r2, [r5, #4]
 801308e:	6a21      	ldr	r1, [r4, #32]
 8013090:	9600      	str	r6, [sp, #0]
 8013092:	6860      	ldr	r0, [r4, #4]
 8013094:	f7ff ff90 	bl	8012fb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 8013098:	69a3      	ldr	r3, [r4, #24]
 801309a:	6962      	ldr	r2, [r4, #20]
 801309c:	4407      	add	r7, r0
 801309e:	6a61      	ldr	r1, [r4, #36]	@ 0x24
 80130a0:	9600      	str	r6, [sp, #0]
 80130a2:	68e0      	ldr	r0, [r4, #12]
 80130a4:	fb93 f8f8 	sdiv	r8, r3, r8
 80130a8:	4442      	add	r2, r8
 80130aa:	9203      	str	r2, [sp, #12]
 80130ac:	682a      	ldr	r2, [r5, #0]
 80130ae:	f7ff ff83 	bl	8012fb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80130b2:	4680      	mov	r8, r0
 80130b4:	9600      	str	r6, [sp, #0]
 80130b6:	69a3      	ldr	r3, [r4, #24]
 80130b8:	686a      	ldr	r2, [r5, #4]
 80130ba:	6aa1      	ldr	r1, [r4, #40]	@ 0x28
 80130bc:	6920      	ldr	r0, [r4, #16]
 80130be:	f7ff ff7b 	bl	8012fb8 <_ZN8touchgfx16TouchCalibration6muldivEllllRl>
 80130c2:	4440      	add	r0, r8
 80130c4:	e7cc      	b.n	8013060 <_ZN8touchgfx16TouchCalibration14translatePointERNS_5PointE+0x10>
 80130c6:	bf00      	nop
 80130c8:	240253bc 	.word	0x240253bc

080130cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>:
 80130cc:	4b07      	ldr	r3, [pc, #28]	@ (80130ec <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x20>)
 80130ce:	781b      	ldrb	r3, [r3, #0]
 80130d0:	2b01      	cmp	r3, #1
 80130d2:	d109      	bne.n	80130e8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x1c>
 80130d4:	f9b1 3000 	ldrsh.w	r3, [r1]
 80130d8:	f9b0 2000 	ldrsh.w	r2, [r0]
 80130dc:	8003      	strh	r3, [r0, #0]
 80130de:	4b04      	ldr	r3, [pc, #16]	@ (80130f0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_+0x24>)
 80130e0:	881b      	ldrh	r3, [r3, #0]
 80130e2:	3b01      	subs	r3, #1
 80130e4:	1a9b      	subs	r3, r3, r2
 80130e6:	800b      	strh	r3, [r1, #0]
 80130e8:	4770      	bx	lr
 80130ea:	bf00      	nop
 80130ec:	240253a0 	.word	0x240253a0
 80130f0:	2402539c 	.word	0x2402539c

080130f4 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_>:
 80130f4:	4b07      	ldr	r3, [pc, #28]	@ (8013114 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x20>)
 80130f6:	b510      	push	{r4, lr}
 80130f8:	781b      	ldrb	r3, [r3, #0]
 80130fa:	2b01      	cmp	r3, #1
 80130fc:	d108      	bne.n	8013110 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x1c>
 80130fe:	4b06      	ldr	r3, [pc, #24]	@ (8013118 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERsS1_+0x24>)
 8013100:	880c      	ldrh	r4, [r1, #0]
 8013102:	881b      	ldrh	r3, [r3, #0]
 8013104:	f9b0 2000 	ldrsh.w	r2, [r0]
 8013108:	3b01      	subs	r3, #1
 801310a:	1b1b      	subs	r3, r3, r4
 801310c:	8003      	strh	r3, [r0, #0]
 801310e:	800a      	strh	r2, [r1, #0]
 8013110:	bd10      	pop	{r4, pc}
 8013112:	bf00      	nop
 8013114:	240253a0 	.word	0x240253a0
 8013118:	2402539c 	.word	0x2402539c

0801311c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>:
 801311c:	4b0a      	ldr	r3, [pc, #40]	@ (8013148 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x2c>)
 801311e:	b510      	push	{r4, lr}
 8013120:	781b      	ldrb	r3, [r3, #0]
 8013122:	2b01      	cmp	r3, #1
 8013124:	d10e      	bne.n	8013144 <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x28>
 8013126:	f9b0 1006 	ldrsh.w	r1, [r0, #6]
 801312a:	8843      	ldrh	r3, [r0, #2]
 801312c:	f9b0 4000 	ldrsh.w	r4, [r0]
 8013130:	18ca      	adds	r2, r1, r3
 8013132:	4b06      	ldr	r3, [pc, #24]	@ (801314c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE+0x30>)
 8013134:	8044      	strh	r4, [r0, #2]
 8013136:	881b      	ldrh	r3, [r3, #0]
 8013138:	1a9b      	subs	r3, r3, r2
 801313a:	8003      	strh	r3, [r0, #0]
 801313c:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 8013140:	8081      	strh	r1, [r0, #4]
 8013142:	80c3      	strh	r3, [r0, #6]
 8013144:	bd10      	pop	{r4, pc}
 8013146:	bf00      	nop
 8013148:	240253a0 	.word	0x240253a0
 801314c:	2402539c 	.word	0x2402539c

08013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>:
 8013150:	4b08      	ldr	r3, [pc, #32]	@ (8013174 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x24>)
 8013152:	781b      	ldrb	r3, [r3, #0]
 8013154:	2b01      	cmp	r3, #1
 8013156:	d10c      	bne.n	8013172 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x22>
 8013158:	8803      	ldrh	r3, [r0, #0]
 801315a:	f9b0 1004 	ldrsh.w	r1, [r0, #4]
 801315e:	8842      	ldrh	r2, [r0, #2]
 8013160:	8002      	strh	r2, [r0, #0]
 8013162:	185a      	adds	r2, r3, r1
 8013164:	4b04      	ldr	r3, [pc, #16]	@ (8013178 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE+0x28>)
 8013166:	881b      	ldrh	r3, [r3, #0]
 8013168:	1a9b      	subs	r3, r3, r2
 801316a:	8043      	strh	r3, [r0, #2]
 801316c:	88c3      	ldrh	r3, [r0, #6]
 801316e:	80c1      	strh	r1, [r0, #6]
 8013170:	8083      	strh	r3, [r0, #4]
 8013172:	4770      	bx	lr
 8013174:	240253a0 	.word	0x240253a0
 8013178:	2402539c 	.word	0x2402539c

0801317c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>:
 801317c:	4b07      	ldr	r3, [pc, #28]	@ (801319c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x20>)
 801317e:	b510      	push	{r4, lr}
 8013180:	781b      	ldrb	r3, [r3, #0]
 8013182:	2b01      	cmp	r3, #1
 8013184:	d108      	bne.n	8013198 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE+0x1c>
 8013186:	f9b1 3000 	ldrsh.w	r3, [r1]
 801318a:	f9b0 4000 	ldrsh.w	r4, [r0]
 801318e:	8003      	strh	r3, [r0, #0]
 8013190:	8893      	ldrh	r3, [r2, #4]
 8013192:	3b01      	subs	r3, #1
 8013194:	1b1b      	subs	r3, r3, r4
 8013196:	800b      	strh	r3, [r1, #0]
 8013198:	bd10      	pop	{r4, pc}
 801319a:	bf00      	nop
 801319c:	240253a0 	.word	0x240253a0

080131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>:
 80131a0:	4b0a      	ldr	r3, [pc, #40]	@ (80131cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x2c>)
 80131a2:	460a      	mov	r2, r1
 80131a4:	b510      	push	{r4, lr}
 80131a6:	781b      	ldrb	r3, [r3, #0]
 80131a8:	2b01      	cmp	r3, #1
 80131aa:	d10d      	bne.n	80131c8 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_+0x28>
 80131ac:	8881      	ldrh	r1, [r0, #4]
 80131ae:	8803      	ldrh	r3, [r0, #0]
 80131b0:	440b      	add	r3, r1
 80131b2:	4601      	mov	r1, r0
 80131b4:	3b01      	subs	r3, #1
 80131b6:	f821 3b02 	strh.w	r3, [r1], #2
 80131ba:	f7ff ffdf 	bl	801317c <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_RKNS_4RectE>
 80131be:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80131c2:	88c2      	ldrh	r2, [r0, #6]
 80131c4:	80c3      	strh	r3, [r0, #6]
 80131c6:	8082      	strh	r2, [r0, #4]
 80131c8:	bd10      	pop	{r4, pc}
 80131ca:	bf00      	nop
 80131cc:	240253a0 	.word	0x240253a0

080131d0 <_ZN8touchgfx11Application13requestRedrawEv>:
 80131d0:	4b06      	ldr	r3, [pc, #24]	@ (80131ec <_ZN8touchgfx11Application13requestRedrawEv+0x1c>)
 80131d2:	2100      	movs	r1, #0
 80131d4:	f9b3 2000 	ldrsh.w	r2, [r3]
 80131d8:	4b05      	ldr	r3, [pc, #20]	@ (80131f0 <_ZN8touchgfx11Application13requestRedrawEv+0x20>)
 80131da:	f8c0 1130 	str.w	r1, [r0, #304]	@ 0x130
 80131de:	f9b3 3000 	ldrsh.w	r3, [r3]
 80131e2:	f8a0 2134 	strh.w	r2, [r0, #308]	@ 0x134
 80131e6:	f8a0 3136 	strh.w	r3, [r0, #310]	@ 0x136
 80131ea:	4770      	bx	lr
 80131ec:	2402539c 	.word	0x2402539c
 80131f0:	2402539e 	.word	0x2402539e

080131f4 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE>:
 80131f4:	4b03      	ldr	r3, [pc, #12]	@ (8013204 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0x10>)
 80131f6:	6818      	ldr	r0, [r3, #0]
 80131f8:	b110      	cbz	r0, 8013200 <_ZN8touchgfx11Application16handleClickEventERKNS_10ClickEventE+0xc>
 80131fa:	6803      	ldr	r3, [r0, #0]
 80131fc:	699b      	ldr	r3, [r3, #24]
 80131fe:	4718      	bx	r3
 8013200:	4770      	bx	lr
 8013202:	bf00      	nop
 8013204:	240253ec 	.word	0x240253ec

08013208 <_ZN8touchgfx11Application29handlePendingScreenTransitionEv>:
 8013208:	4770      	bx	lr
	...

0801320c <_ZN8touchgfx11Application4drawEv>:
 801320c:	4b09      	ldr	r3, [pc, #36]	@ (8013234 <_ZN8touchgfx11Application4drawEv+0x28>)
 801320e:	b507      	push	{r0, r1, r2, lr}
 8013210:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013214:	2100      	movs	r1, #0
 8013216:	4b08      	ldr	r3, [pc, #32]	@ (8013238 <_ZN8touchgfx11Application4drawEv+0x2c>)
 8013218:	9100      	str	r1, [sp, #0]
 801321a:	4669      	mov	r1, sp
 801321c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013220:	f8ad 2004 	strh.w	r2, [sp, #4]
 8013224:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013228:	6803      	ldr	r3, [r0, #0]
 801322a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801322c:	4798      	blx	r3
 801322e:	b003      	add	sp, #12
 8013230:	f85d fb04 	ldr.w	pc, [sp], #4
 8013234:	2402539c 	.word	0x2402539c
 8013238:	2402539e 	.word	0x2402539e

0801323c <_ZN8touchgfx11Application10invalidateEv>:
 801323c:	4b09      	ldr	r3, [pc, #36]	@ (8013264 <_ZN8touchgfx11Application10invalidateEv+0x28>)
 801323e:	b082      	sub	sp, #8
 8013240:	2100      	movs	r1, #0
 8013242:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013246:	4b08      	ldr	r3, [pc, #32]	@ (8013268 <_ZN8touchgfx11Application10invalidateEv+0x2c>)
 8013248:	f8ad 2004 	strh.w	r2, [sp, #4]
 801324c:	aa02      	add	r2, sp, #8
 801324e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013252:	9100      	str	r1, [sp, #0]
 8013254:	f8ad 3006 	strh.w	r3, [sp, #6]
 8013258:	6803      	ldr	r3, [r0, #0]
 801325a:	e912 0006 	ldmdb	r2, {r1, r2}
 801325e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013260:	b002      	add	sp, #8
 8013262:	4718      	bx	r3
 8013264:	2402539c 	.word	0x2402539c
 8013268:	2402539e 	.word	0x2402539e

0801326c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE>:
 801326c:	4b03      	ldr	r3, [pc, #12]	@ (801327c <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0x10>)
 801326e:	6818      	ldr	r0, [r3, #0]
 8013270:	b110      	cbz	r0, 8013278 <_ZN8touchgfx11Application15handleDragEventERKNS_9DragEventE+0xc>
 8013272:	6803      	ldr	r3, [r0, #0]
 8013274:	69db      	ldr	r3, [r3, #28]
 8013276:	4718      	bx	r3
 8013278:	4770      	bx	lr
 801327a:	bf00      	nop
 801327c:	240253ec 	.word	0x240253ec

08013280 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE>:
 8013280:	4b03      	ldr	r3, [pc, #12]	@ (8013290 <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0x10>)
 8013282:	6818      	ldr	r0, [r3, #0]
 8013284:	b110      	cbz	r0, 801328c <_ZN8touchgfx11Application18handleGestureEventERKNS_12GestureEventE+0xc>
 8013286:	6803      	ldr	r3, [r0, #0]
 8013288:	6a1b      	ldr	r3, [r3, #32]
 801328a:	4718      	bx	r3
 801328c:	4770      	bx	lr
 801328e:	bf00      	nop
 8013290:	240253ec 	.word	0x240253ec

08013294 <_ZN8touchgfx11Application16clearCachedAreasEv>:
 8013294:	2300      	movs	r3, #0
 8013296:	f8a0 30ec 	strh.w	r3, [r0, #236]	@ 0xec
 801329a:	4770      	bx	lr

0801329c <_ZN8touchgfx11Application14handleKeyEventEh>:
 801329c:	4b03      	ldr	r3, [pc, #12]	@ (80132ac <_ZN8touchgfx11Application14handleKeyEventEh+0x10>)
 801329e:	6818      	ldr	r0, [r3, #0]
 80132a0:	b110      	cbz	r0, 80132a8 <_ZN8touchgfx11Application14handleKeyEventEh+0xc>
 80132a2:	6803      	ldr	r3, [r0, #0]
 80132a4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132a6:	4718      	bx	r3
 80132a8:	4770      	bx	lr
 80132aa:	bf00      	nop
 80132ac:	240253ec 	.word	0x240253ec

080132b0 <_ZN8touchgfx11ApplicationD1Ev>:
 80132b0:	4770      	bx	lr

080132b2 <_ZN8touchgfx11ApplicationD0Ev>:
 80132b2:	b510      	push	{r4, lr}
 80132b4:	4604      	mov	r4, r0
 80132b6:	f44f 719e 	mov.w	r1, #316	@ 0x13c
 80132ba:	f00d feb4 	bl	8021026 <_ZdlPvj>
 80132be:	4620      	mov	r0, r4
 80132c0:	bd10      	pop	{r4, pc}

080132c2 <_ZN8touchgfx4Rect10restrictToEss>:
 80132c2:	f9b0 3000 	ldrsh.w	r3, [r0]
 80132c6:	2b00      	cmp	r3, #0
 80132c8:	b510      	push	{r4, lr}
 80132ca:	da04      	bge.n	80132d6 <_ZN8touchgfx4Rect10restrictToEss+0x14>
 80132cc:	8884      	ldrh	r4, [r0, #4]
 80132ce:	4423      	add	r3, r4
 80132d0:	8083      	strh	r3, [r0, #4]
 80132d2:	2300      	movs	r3, #0
 80132d4:	8003      	strh	r3, [r0, #0]
 80132d6:	f9b0 4000 	ldrsh.w	r4, [r0]
 80132da:	f9b0 3004 	ldrsh.w	r3, [r0, #4]
 80132de:	1b09      	subs	r1, r1, r4
 80132e0:	428b      	cmp	r3, r1
 80132e2:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80132e6:	bfc8      	it	gt
 80132e8:	8081      	strhgt	r1, [r0, #4]
 80132ea:	2b00      	cmp	r3, #0
 80132ec:	da04      	bge.n	80132f8 <_ZN8touchgfx4Rect10restrictToEss+0x36>
 80132ee:	88c1      	ldrh	r1, [r0, #6]
 80132f0:	440b      	add	r3, r1
 80132f2:	80c3      	strh	r3, [r0, #6]
 80132f4:	2300      	movs	r3, #0
 80132f6:	8043      	strh	r3, [r0, #2]
 80132f8:	f9b0 1002 	ldrsh.w	r1, [r0, #2]
 80132fc:	f9b0 3006 	ldrsh.w	r3, [r0, #6]
 8013300:	1a52      	subs	r2, r2, r1
 8013302:	4293      	cmp	r3, r2
 8013304:	bfc8      	it	gt
 8013306:	80c2      	strhgt	r2, [r0, #6]
 8013308:	bd10      	pop	{r4, pc}
	...

0801330c <_ZN8touchgfx11Application4drawERNS_4RectE>:
 801330c:	4b10      	ldr	r3, [pc, #64]	@ (8013350 <_ZN8touchgfx11Application4drawERNS_4RectE+0x44>)
 801330e:	b510      	push	{r4, lr}
 8013310:	460c      	mov	r4, r1
 8013312:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013316:	4b0f      	ldr	r3, [pc, #60]	@ (8013354 <_ZN8touchgfx11Application4drawERNS_4RectE+0x48>)
 8013318:	4620      	mov	r0, r4
 801331a:	f9b3 1000 	ldrsh.w	r1, [r3]
 801331e:	f7ff ffd0 	bl	80132c2 <_ZN8touchgfx4Rect10restrictToEss>
 8013322:	4b0d      	ldr	r3, [pc, #52]	@ (8013358 <_ZN8touchgfx11Application4drawERNS_4RectE+0x4c>)
 8013324:	6818      	ldr	r0, [r3, #0]
 8013326:	b190      	cbz	r0, 801334e <_ZN8touchgfx11Application4drawERNS_4RectE+0x42>
 8013328:	6803      	ldr	r3, [r0, #0]
 801332a:	4621      	mov	r1, r4
 801332c:	689b      	ldr	r3, [r3, #8]
 801332e:	4798      	blx	r3
 8013330:	4b0a      	ldr	r3, [pc, #40]	@ (801335c <_ZN8touchgfx11Application4drawERNS_4RectE+0x50>)
 8013332:	6818      	ldr	r0, [r3, #0]
 8013334:	b118      	cbz	r0, 801333e <_ZN8touchgfx11Application4drawERNS_4RectE+0x32>
 8013336:	6803      	ldr	r3, [r0, #0]
 8013338:	4621      	mov	r1, r4
 801333a:	689b      	ldr	r3, [r3, #8]
 801333c:	4798      	blx	r3
 801333e:	4b08      	ldr	r3, [pc, #32]	@ (8013360 <_ZN8touchgfx11Application4drawERNS_4RectE+0x54>)
 8013340:	4621      	mov	r1, r4
 8013342:	6818      	ldr	r0, [r3, #0]
 8013344:	6803      	ldr	r3, [r0, #0]
 8013346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801334a:	69db      	ldr	r3, [r3, #28]
 801334c:	4718      	bx	r3
 801334e:	bd10      	pop	{r4, pc}
 8013350:	2402539e 	.word	0x2402539e
 8013354:	2402539c 	.word	0x2402539c
 8013358:	240253ec 	.word	0x240253ec
 801335c:	240253e8 	.word	0x240253e8
 8013360:	240253a8 	.word	0x240253a8

08013364 <_ZNK8touchgfx4Rect8includesERKS0_>:
 8013364:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8013366:	4606      	mov	r6, r0
 8013368:	4608      	mov	r0, r1
 801336a:	460f      	mov	r7, r1
 801336c:	f7fb fded 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013370:	b9e8      	cbnz	r0, 80133ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 8013372:	f9b7 5000 	ldrsh.w	r5, [r7]
 8013376:	f9b6 4000 	ldrsh.w	r4, [r6]
 801337a:	42a5      	cmp	r5, r4
 801337c:	db17      	blt.n	80133ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801337e:	f9b7 2002 	ldrsh.w	r2, [r7, #2]
 8013382:	f9b6 3002 	ldrsh.w	r3, [r6, #2]
 8013386:	429a      	cmp	r2, r3
 8013388:	db11      	blt.n	80133ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801338a:	88b9      	ldrh	r1, [r7, #4]
 801338c:	440d      	add	r5, r1
 801338e:	88b1      	ldrh	r1, [r6, #4]
 8013390:	440c      	add	r4, r1
 8013392:	b22d      	sxth	r5, r5
 8013394:	b224      	sxth	r4, r4
 8013396:	42a5      	cmp	r5, r4
 8013398:	dc09      	bgt.n	80133ae <_ZNK8touchgfx4Rect8includesERKS0_+0x4a>
 801339a:	88f8      	ldrh	r0, [r7, #6]
 801339c:	4410      	add	r0, r2
 801339e:	88f2      	ldrh	r2, [r6, #6]
 80133a0:	4413      	add	r3, r2
 80133a2:	b200      	sxth	r0, r0
 80133a4:	b21b      	sxth	r3, r3
 80133a6:	4298      	cmp	r0, r3
 80133a8:	bfcc      	ite	gt
 80133aa:	2000      	movgt	r0, #0
 80133ac:	2001      	movle	r0, #1
 80133ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

080133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>:
 80133b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80133b2:	4604      	mov	r4, r0
 80133b4:	4608      	mov	r0, r1
 80133b6:	460d      	mov	r5, r1
 80133b8:	f7fb fdc7 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 80133bc:	b978      	cbnz	r0, 80133de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
 80133be:	4620      	mov	r0, r4
 80133c0:	f7fb fdc3 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 80133c4:	f9b5 6000 	ldrsh.w	r6, [r5]
 80133c8:	b150      	cbz	r0, 80133e0 <_ZN8touchgfx4Rect11expandToFitERKS0_+0x30>
 80133ca:	8026      	strh	r6, [r4, #0]
 80133cc:	f9b5 3002 	ldrsh.w	r3, [r5, #2]
 80133d0:	8063      	strh	r3, [r4, #2]
 80133d2:	f9b5 3004 	ldrsh.w	r3, [r5, #4]
 80133d6:	80a3      	strh	r3, [r4, #4]
 80133d8:	f9b5 3006 	ldrsh.w	r3, [r5, #6]
 80133dc:	80e3      	strh	r3, [r4, #6]
 80133de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80133e0:	f9b4 1000 	ldrsh.w	r1, [r4]
 80133e4:	f9b5 2002 	ldrsh.w	r2, [r5, #2]
 80133e8:	42b1      	cmp	r1, r6
 80133ea:	f9b4 3002 	ldrsh.w	r3, [r4, #2]
 80133ee:	f8b5 c004 	ldrh.w	ip, [r5, #4]
 80133f2:	460f      	mov	r7, r1
 80133f4:	88ed      	ldrh	r5, [r5, #6]
 80133f6:	bfa8      	it	ge
 80133f8:	4637      	movge	r7, r6
 80133fa:	4293      	cmp	r3, r2
 80133fc:	4618      	mov	r0, r3
 80133fe:	4466      	add	r6, ip
 8013400:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013404:	bfa8      	it	ge
 8013406:	4610      	movge	r0, r2
 8013408:	442a      	add	r2, r5
 801340a:	88e5      	ldrh	r5, [r4, #6]
 801340c:	4461      	add	r1, ip
 801340e:	b236      	sxth	r6, r6
 8013410:	8027      	strh	r7, [r4, #0]
 8013412:	442b      	add	r3, r5
 8013414:	b209      	sxth	r1, r1
 8013416:	b212      	sxth	r2, r2
 8013418:	8060      	strh	r0, [r4, #2]
 801341a:	b21b      	sxth	r3, r3
 801341c:	428e      	cmp	r6, r1
 801341e:	bfac      	ite	ge
 8013420:	ebc7 0106 	rsbge	r1, r7, r6
 8013424:	ebc7 0101 	rsblt	r1, r7, r1
 8013428:	429a      	cmp	r2, r3
 801342a:	bfac      	ite	ge
 801342c:	ebc0 0202 	rsbge	r2, r0, r2
 8013430:	ebc0 0203 	rsblt	r2, r0, r3
 8013434:	80a1      	strh	r1, [r4, #4]
 8013436:	80e2      	strh	r2, [r4, #6]
 8013438:	e7d1      	b.n	80133de <_ZN8touchgfx4Rect11expandToFitERKS0_+0x2e>
	...

0801343c <_ZN8touchgfx11Application11getInstanceEv>:
 801343c:	4b01      	ldr	r3, [pc, #4]	@ (8013444 <_ZN8touchgfx11Application11getInstanceEv+0x8>)
 801343e:	6818      	ldr	r0, [r3, #0]
 8013440:	4770      	bx	lr
 8013442:	bf00      	nop
 8013444:	240253fc 	.word	0x240253fc

08013448 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>:
 8013448:	2300      	movs	r3, #0
 801344a:	b510      	push	{r4, lr}
 801344c:	f8a0 30a4 	strh.w	r3, [r0, #164]	@ 0xa4
 8013450:	4604      	mov	r4, r0
 8013452:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8013456:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801345a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801345e:	f8b4 20a6 	ldrh.w	r2, [r4, #166]	@ 0xa6
 8013462:	429a      	cmp	r2, r3
 8013464:	d90e      	bls.n	8013484 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x3c>
 8013466:	18e2      	adds	r2, r4, r3
 8013468:	f892 2084 	ldrb.w	r2, [r2, #132]	@ 0x84
 801346c:	b122      	cbz	r2, 8013478 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x30>
 801346e:	f854 0023 	ldr.w	r0, [r4, r3, lsl #2]
 8013472:	6803      	ldr	r3, [r0, #0]
 8013474:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013476:	4798      	blx	r3
 8013478:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	@ 0xa4
 801347c:	3301      	adds	r3, #1
 801347e:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8013482:	e7ea      	b.n	801345a <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv+0x12>
 8013484:	bd10      	pop	{r4, pc}

08013486 <_ZN8touchgfx11Application12TimerWidgets5clearEv>:
 8013486:	2300      	movs	r3, #0
 8013488:	f100 0284 	add.w	r2, r0, #132	@ 0x84
 801348c:	30a4      	adds	r0, #164	@ 0xa4
 801348e:	f820 3c24 	strh.w	r3, [r0, #-36]
 8013492:	f802 3b01 	strb.w	r3, [r2], #1
 8013496:	4282      	cmp	r2, r0
 8013498:	d1fb      	bne.n	8013492 <_ZN8touchgfx11Application12TimerWidgets5clearEv+0xc>
 801349a:	4770      	bx	lr

0801349c <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE>:
 801349c:	b570      	push	{r4, r5, r6, lr}
 801349e:	4c0b      	ldr	r4, [pc, #44]	@ (80134cc <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x30>)
 80134a0:	4605      	mov	r5, r0
 80134a2:	460e      	mov	r6, r1
 80134a4:	6820      	ldr	r0, [r4, #0]
 80134a6:	b110      	cbz	r0, 80134ae <_ZN8touchgfx11Application12switchScreenEPNS_6ScreenE+0x12>
 80134a8:	6803      	ldr	r3, [r0, #0]
 80134aa:	695b      	ldr	r3, [r3, #20]
 80134ac:	4798      	blx	r3
 80134ae:	1d28      	adds	r0, r5, #4
 80134b0:	f7ff ffe9 	bl	8013486 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 80134b4:	6026      	str	r6, [r4, #0]
 80134b6:	6833      	ldr	r3, [r6, #0]
 80134b8:	4630      	mov	r0, r6
 80134ba:	68db      	ldr	r3, [r3, #12]
 80134bc:	4798      	blx	r3
 80134be:	682b      	ldr	r3, [r5, #0]
 80134c0:	4628      	mov	r0, r5
 80134c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80134c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80134c8:	4718      	bx	r3
 80134ca:	bf00      	nop
 80134cc:	240253ec 	.word	0x240253ec

080134d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>:
 80134d0:	2300      	movs	r3, #0
 80134d2:	f8b0 c080 	ldrh.w	ip, [r0, #128]	@ 0x80
 80134d6:	f8b0 10a4 	ldrh.w	r1, [r0, #164]	@ 0xa4
 80134da:	461a      	mov	r2, r3
 80134dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80134de:	461c      	mov	r4, r3
 80134e0:	461d      	mov	r5, r3
 80134e2:	459c      	cmp	ip, r3
 80134e4:	dd1a      	ble.n	801351c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x4c>
 80134e6:	18c6      	adds	r6, r0, r3
 80134e8:	f896 6084 	ldrb.w	r6, [r6, #132]	@ 0x84
 80134ec:	b16e      	cbz	r6, 801350a <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x3a>
 80134ee:	429a      	cmp	r2, r3
 80134f0:	d008      	beq.n	8013504 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x34>
 80134f2:	f850 7023 	ldr.w	r7, [r0, r3, lsl #2]
 80134f6:	fa1f fe82 	uxth.w	lr, r2
 80134fa:	f840 702e 	str.w	r7, [r0, lr, lsl #2]
 80134fe:	1887      	adds	r7, r0, r2
 8013500:	f887 6084 	strb.w	r6, [r7, #132]	@ 0x84
 8013504:	3201      	adds	r2, #1
 8013506:	3301      	adds	r3, #1
 8013508:	e7eb      	b.n	80134e2 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x12>
 801350a:	4299      	cmp	r1, r3
 801350c:	f8b0 60a6 	ldrh.w	r6, [r0, #166]	@ 0xa6
 8013510:	bfa8      	it	ge
 8013512:	3501      	addge	r5, #1
 8013514:	429e      	cmp	r6, r3
 8013516:	bfc8      	it	gt
 8013518:	3401      	addgt	r4, #1
 801351a:	e7f4      	b.n	8013506 <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x36>
 801351c:	f8b0 30a6 	ldrh.w	r3, [r0, #166]	@ 0xa6
 8013520:	1b49      	subs	r1, r1, r5
 8013522:	1b1b      	subs	r3, r3, r4
 8013524:	f8a0 10a4 	strh.w	r1, [r0, #164]	@ 0xa4
 8013528:	f8a0 30a6 	strh.w	r3, [r0, #166]	@ 0xa6
 801352c:	f8b0 3080 	ldrh.w	r3, [r0, #128]	@ 0x80
 8013530:	4293      	cmp	r3, r2
 8013532:	dd03      	ble.n	801353c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x6c>
 8013534:	3b01      	subs	r3, #1
 8013536:	f8a0 3080 	strh.w	r3, [r0, #128]	@ 0x80
 801353a:	e7f7      	b.n	801352c <_ZN8touchgfx11Application12TimerWidgets7compactEv+0x5c>
 801353c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08013540 <_ZN8touchgfx11Application15handleTickEventEv>:
 8013540:	b570      	push	{r4, r5, r6, lr}
 8013542:	4d16      	ldr	r5, [pc, #88]	@ (801359c <_ZN8touchgfx11Application15handleTickEventEv+0x5c>)
 8013544:	4604      	mov	r4, r0
 8013546:	6828      	ldr	r0, [r5, #0]
 8013548:	b140      	cbz	r0, 801355c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801354a:	7a03      	ldrb	r3, [r0, #8]
 801354c:	b933      	cbnz	r3, 801355c <_ZN8touchgfx11Application15handleTickEventEv+0x1c>
 801354e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8013552:	6803      	ldr	r3, [r0, #0]
 8013554:	689b      	ldr	r3, [r3, #8]
 8013556:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801355a:	4718      	bx	r3
 801355c:	f894 3138 	ldrb.w	r3, [r4, #312]	@ 0x138
 8013560:	4e0f      	ldr	r6, [pc, #60]	@ (80135a0 <_ZN8touchgfx11Application15handleTickEventEv+0x60>)
 8013562:	b973      	cbnz	r3, 8013582 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013564:	b168      	cbz	r0, 8013582 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 8013566:	7a03      	ldrb	r3, [r0, #8]
 8013568:	b15b      	cbz	r3, 8013582 <_ZN8touchgfx11Application15handleTickEventEv+0x42>
 801356a:	6830      	ldr	r0, [r6, #0]
 801356c:	b110      	cbz	r0, 8013574 <_ZN8touchgfx11Application15handleTickEventEv+0x34>
 801356e:	6803      	ldr	r3, [r0, #0]
 8013570:	691b      	ldr	r3, [r3, #16]
 8013572:	4798      	blx	r3
 8013574:	6828      	ldr	r0, [r5, #0]
 8013576:	6803      	ldr	r3, [r0, #0]
 8013578:	68db      	ldr	r3, [r3, #12]
 801357a:	4798      	blx	r3
 801357c:	2301      	movs	r3, #1
 801357e:	f884 3138 	strb.w	r3, [r4, #312]	@ 0x138
 8013582:	3404      	adds	r4, #4
 8013584:	4620      	mov	r0, r4
 8013586:	f7ff ff5f 	bl	8013448 <_ZN8touchgfx11Application12TimerWidgets10tickActiveEv>
 801358a:	4620      	mov	r0, r4
 801358c:	f7ff ffa0 	bl	80134d0 <_ZN8touchgfx11Application12TimerWidgets7compactEv>
 8013590:	6830      	ldr	r0, [r6, #0]
 8013592:	b110      	cbz	r0, 801359a <_ZN8touchgfx11Application15handleTickEventEv+0x5a>
 8013594:	6803      	ldr	r3, [r0, #0]
 8013596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013598:	e7dd      	b.n	8013556 <_ZN8touchgfx11Application15handleTickEventEv+0x16>
 801359a:	bd70      	pop	{r4, r5, r6, pc}
 801359c:	240253f0 	.word	0x240253f0
 80135a0:	240253ec 	.word	0x240253ec

080135a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>:
 80135a4:	4603      	mov	r3, r0
 80135a6:	f100 0140 	add.w	r1, r0, #64	@ 0x40
 80135aa:	2200      	movs	r2, #0
 80135ac:	801a      	strh	r2, [r3, #0]
 80135ae:	3308      	adds	r3, #8
 80135b0:	f823 2c06 	strh.w	r2, [r3, #-6]
 80135b4:	f823 2c04 	strh.w	r2, [r3, #-4]
 80135b8:	f823 2c02 	strh.w	r2, [r3, #-2]
 80135bc:	428b      	cmp	r3, r1
 80135be:	d1f5      	bne.n	80135ac <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev+0x8>
 80135c0:	f8a0 2040 	strh.w	r2, [r0, #64]	@ 0x40
 80135c4:	4770      	bx	lr
	...

080135c8 <_ZN8touchgfx11ApplicationC1Ev>:
 80135c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80135ca:	4b1d      	ldr	r3, [pc, #116]	@ (8013640 <_ZN8touchgfx11ApplicationC1Ev+0x78>)
 80135cc:	4606      	mov	r6, r0
 80135ce:	4604      	mov	r4, r0
 80135d0:	2500      	movs	r5, #0
 80135d2:	f846 3b04 	str.w	r3, [r6], #4
 80135d6:	22a8      	movs	r2, #168	@ 0xa8
 80135d8:	2100      	movs	r1, #0
 80135da:	4630      	mov	r0, r6
 80135dc:	f00e fb38 	bl	8021c50 <memset>
 80135e0:	f8a4 5084 	strh.w	r5, [r4, #132]	@ 0x84
 80135e4:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 80135e8:	4f16      	ldr	r7, [pc, #88]	@ (8013644 <_ZN8touchgfx11ApplicationC1Ev+0x7c>)
 80135ea:	f7ff ffdb 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80135ee:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 80135f2:	f7ff ffd7 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 80135f6:	f8a4 5130 	strh.w	r5, [r4, #304]	@ 0x130
 80135fa:	f8a4 5132 	strh.w	r5, [r4, #306]	@ 0x132
 80135fe:	f8a4 5134 	strh.w	r5, [r4, #308]	@ 0x134
 8013602:	f8a4 5136 	strh.w	r5, [r4, #310]	@ 0x136
 8013606:	f884 5138 	strb.w	r5, [r4, #312]	@ 0x138
 801360a:	490f      	ldr	r1, [pc, #60]	@ (8013648 <_ZN8touchgfx11ApplicationC1Ev+0x80>)
 801360c:	480f      	ldr	r0, [pc, #60]	@ (801364c <_ZN8touchgfx11ApplicationC1Ev+0x84>)
 801360e:	f00c fe99 	bl	8020344 <CRC_Lock>
 8013612:	4b0f      	ldr	r3, [pc, #60]	@ (8013650 <_ZN8touchgfx11ApplicationC1Ev+0x88>)
 8013614:	b158      	cbz	r0, 801362e <_ZN8touchgfx11ApplicationC1Ev+0x66>
 8013616:	801d      	strh	r5, [r3, #0]
 8013618:	2300      	movs	r3, #0
 801361a:	4a0e      	ldr	r2, [pc, #56]	@ (8013654 <_ZN8touchgfx11ApplicationC1Ev+0x8c>)
 801361c:	4630      	mov	r0, r6
 801361e:	6013      	str	r3, [r2, #0]
 8013620:	4a0d      	ldr	r2, [pc, #52]	@ (8013658 <_ZN8touchgfx11ApplicationC1Ev+0x90>)
 8013622:	603b      	str	r3, [r7, #0]
 8013624:	6013      	str	r3, [r2, #0]
 8013626:	f7ff ff2e 	bl	8013486 <_ZN8touchgfx11Application12TimerWidgets5clearEv>
 801362a:	4620      	mov	r0, r4
 801362c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801362e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013632:	2002      	movs	r0, #2
 8013634:	801a      	strh	r2, [r3, #0]
 8013636:	6038      	str	r0, [r7, #0]
 8013638:	f001 fd72 	bl	8015120 <_ZN8touchgfx6Screen4drawEv>
 801363c:	e7ec      	b.n	8013618 <_ZN8touchgfx11ApplicationC1Ev+0x50>
 801363e:	bf00      	nop
 8013640:	08025354 	.word	0x08025354
 8013644:	240253ec 	.word	0x240253ec
 8013648:	b5e8b5cd 	.word	0xb5e8b5cd
 801364c:	f407a5c2 	.word	0xf407a5c2
 8013650:	240000ac 	.word	0x240000ac
 8013654:	240253fc 	.word	0x240253fc
 8013658:	240253f0 	.word	0x240253f0

0801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>:
 801365c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	@ 0x40
 8013660:	3b01      	subs	r3, #1
 8013662:	b29b      	uxth	r3, r3
 8013664:	428b      	cmp	r3, r1
 8013666:	f8a0 3040 	strh.w	r3, [r0, #64]	@ 0x40
 801366a:	b510      	push	{r4, lr}
 801366c:	d908      	bls.n	8013680 <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt+0x24>
 801366e:	eb00 03c3 	add.w	r3, r0, r3, lsl #3
 8013672:	eb00 04c1 	add.w	r4, r0, r1, lsl #3
 8013676:	681a      	ldr	r2, [r3, #0]
 8013678:	f840 2031 	str.w	r2, [r0, r1, lsl #3]
 801367c:	685a      	ldr	r2, [r3, #4]
 801367e:	6062      	str	r2, [r4, #4]
 8013680:	bd10      	pop	{r4, pc}
	...

08013684 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE>:
 8013684:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013688:	b08f      	sub	sp, #60	@ 0x3c
 801368a:	4b8f      	ldr	r3, [pc, #572]	@ (80138c8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x244>)
 801368c:	4683      	mov	fp, r0
 801368e:	ac0a      	add	r4, sp, #40	@ 0x28
 8013690:	e884 0006 	stmia.w	r4, {r1, r2}
 8013694:	f9b3 2000 	ldrsh.w	r2, [r3]
 8013698:	4620      	mov	r0, r4
 801369a:	4b8c      	ldr	r3, [pc, #560]	@ (80138cc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x248>)
 801369c:	f9b3 1000 	ldrsh.w	r1, [r3]
 80136a0:	f7ff fe0f 	bl	80132c2 <_ZN8touchgfx4Rect10restrictToEss>
 80136a4:	4620      	mov	r0, r4
 80136a6:	f7fb fc50 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 80136aa:	2800      	cmp	r0, #0
 80136ac:	d16a      	bne.n	8013784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80136ae:	9403      	str	r4, [sp, #12]
 80136b0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 80136b4:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 80136b8:	eb0b 05c4 	add.w	r5, fp, r4, lsl #3
 80136bc:	9301      	str	r3, [sp, #4]
 80136be:	35a4      	adds	r5, #164	@ 0xa4
 80136c0:	b15c      	cbz	r4, 80136da <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x56>
 80136c2:	4629      	mov	r1, r5
 80136c4:	9803      	ldr	r0, [sp, #12]
 80136c6:	f7ff fe4d 	bl	8013364 <_ZNK8touchgfx4Rect8includesERKS0_>
 80136ca:	3c01      	subs	r4, #1
 80136cc:	b118      	cbz	r0, 80136d6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52>
 80136ce:	b2a1      	uxth	r1, r4
 80136d0:	9801      	ldr	r0, [sp, #4]
 80136d2:	f7ff ffc3 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80136d6:	3d08      	subs	r5, #8
 80136d8:	e7f2      	b.n	80136c0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c>
 80136da:	f8bb a0ec 	ldrh.w	sl, [fp, #236]	@ 0xec
 80136de:	f10a 33ff 	add.w	r3, sl, #4294967295
 80136e2:	f8cd a010 	str.w	sl, [sp, #16]
 80136e6:	9302      	str	r3, [sp, #8]
 80136e8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 80136ec:	f103 04a4 	add.w	r4, r3, #164	@ 0xa4
 80136f0:	9306      	str	r3, [sp, #24]
 80136f2:	445c      	add	r4, fp
 80136f4:	2500      	movs	r5, #0
 80136f6:	4626      	mov	r6, r4
 80136f8:	f8cd a014 	str.w	sl, [sp, #20]
 80136fc:	462f      	mov	r7, r5
 80136fe:	9b05      	ldr	r3, [sp, #20]
 8013700:	2b00      	cmp	r3, #0
 8013702:	d073      	beq.n	80137ec <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x168>
 8013704:	9903      	ldr	r1, [sp, #12]
 8013706:	4630      	mov	r0, r6
 8013708:	f7fd ffd6 	bl	80116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 801370c:	b350      	cbz	r0, 8013764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 801370e:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 8013712:	f9b6 c000 	ldrsh.w	ip, [r6]
 8013716:	f9bd 802a 	ldrsh.w	r8, [sp, #42]	@ 0x2a
 801371a:	45e6      	cmp	lr, ip
 801371c:	f9b6 9002 	ldrsh.w	r9, [r6, #2]
 8013720:	db33      	blt.n	801378a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013722:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013726:	88b3      	ldrh	r3, [r6, #4]
 8013728:	4472      	add	r2, lr
 801372a:	4463      	add	r3, ip
 801372c:	b212      	sxth	r2, r2
 801372e:	b21b      	sxth	r3, r3
 8013730:	429a      	cmp	r2, r3
 8013732:	dc2a      	bgt.n	801378a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x106>
 8013734:	fa1f f289 	uxth.w	r2, r9
 8013738:	88f3      	ldrh	r3, [r6, #6]
 801373a:	45c8      	cmp	r8, r9
 801373c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013740:	4413      	add	r3, r2
 8013742:	fa1f fc88 	uxth.w	ip, r8
 8013746:	b29b      	uxth	r3, r3
 8013748:	fa0f fe83 	sxth.w	lr, r3
 801374c:	db0f      	blt.n	801376e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xea>
 801374e:	eba3 030c 	sub.w	r3, r3, ip
 8013752:	1ac9      	subs	r1, r1, r3
 8013754:	b209      	sxth	r1, r1
 8013756:	2900      	cmp	r1, #0
 8013758:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 801375c:	dd12      	ble.n	8013784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 801375e:	f8ad e02a 	strh.w	lr, [sp, #42]	@ 0x2a
 8013762:	4605      	mov	r5, r0
 8013764:	9b05      	ldr	r3, [sp, #20]
 8013766:	3e08      	subs	r6, #8
 8013768:	3b01      	subs	r3, #1
 801376a:	9305      	str	r3, [sp, #20]
 801376c:	e7c7      	b.n	80136fe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x7a>
 801376e:	4461      	add	r1, ip
 8013770:	b209      	sxth	r1, r1
 8013772:	4571      	cmp	r1, lr
 8013774:	dc38      	bgt.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 8013776:	eba2 020c 	sub.w	r2, r2, ip
 801377a:	b212      	sxth	r2, r2
 801377c:	f8ad 202e 	strh.w	r2, [sp, #46]	@ 0x2e
 8013780:	2a00      	cmp	r2, #0
 8013782:	dcee      	bgt.n	8013762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 8013784:	b00f      	add	sp, #60	@ 0x3c
 8013786:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801378a:	45c8      	cmp	r8, r9
 801378c:	db2c      	blt.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 801378e:	88f3      	ldrh	r3, [r6, #6]
 8013790:	4499      	add	r9, r3
 8013792:	f8bd 302e 	ldrh.w	r3, [sp, #46]	@ 0x2e
 8013796:	4498      	add	r8, r3
 8013798:	fa0f f989 	sxth.w	r9, r9
 801379c:	fa0f f888 	sxth.w	r8, r8
 80137a0:	45c1      	cmp	r9, r8
 80137a2:	db21      	blt.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80137a4:	fa1f f28c 	uxth.w	r2, ip
 80137a8:	88b3      	ldrh	r3, [r6, #4]
 80137aa:	45e6      	cmp	lr, ip
 80137ac:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 80137b0:	4413      	add	r3, r2
 80137b2:	fa1f f88e 	uxth.w	r8, lr
 80137b6:	b29b      	uxth	r3, r3
 80137b8:	fa0f f983 	sxth.w	r9, r3
 80137bc:	db0a      	blt.n	80137d4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x150>
 80137be:	eba3 0308 	sub.w	r3, r3, r8
 80137c2:	1ac9      	subs	r1, r1, r3
 80137c4:	b209      	sxth	r1, r1
 80137c6:	2900      	cmp	r1, #0
 80137c8:	f8ad 102c 	strh.w	r1, [sp, #44]	@ 0x2c
 80137cc:	ddda      	ble.n	8013784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 80137ce:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 80137d2:	e7c6      	b.n	8013762 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xde>
 80137d4:	4441      	add	r1, r8
 80137d6:	b209      	sxth	r1, r1
 80137d8:	4549      	cmp	r1, r9
 80137da:	dc05      	bgt.n	80137e8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x164>
 80137dc:	eba2 0208 	sub.w	r2, r2, r8
 80137e0:	b212      	sxth	r2, r2
 80137e2:	f8ad 202c 	strh.w	r2, [sp, #44]	@ 0x2c
 80137e6:	e7cb      	b.n	8013780 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xfc>
 80137e8:	4607      	mov	r7, r0
 80137ea:	e7bb      	b.n	8013764 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0xe0>
 80137ec:	2d00      	cmp	r5, #0
 80137ee:	d181      	bne.n	80136f4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x70>
 80137f0:	2f00      	cmp	r7, #0
 80137f2:	f000 81dd 	beq.w	8013bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80137f6:	f9bd 6028 	ldrsh.w	r6, [sp, #40]	@ 0x28
 80137fa:	f9bd 702a 	ldrsh.w	r7, [sp, #42]	@ 0x2a
 80137fe:	b2b3      	uxth	r3, r6
 8013800:	f8bd a02e 	ldrh.w	sl, [sp, #46]	@ 0x2e
 8013804:	9305      	str	r3, [sp, #20]
 8013806:	9a05      	ldr	r2, [sp, #20]
 8013808:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801380c:	4413      	add	r3, r2
 801380e:	b2ba      	uxth	r2, r7
 8013810:	4492      	add	sl, r2
 8013812:	b29b      	uxth	r3, r3
 8013814:	fa1f fa8a 	uxth.w	sl, sl
 8013818:	fa0f f883 	sxth.w	r8, r3
 801381c:	fa0f f98a 	sxth.w	r9, sl
 8013820:	e9cd 2307 	strd	r2, r3, [sp, #28]
 8013824:	9b04      	ldr	r3, [sp, #16]
 8013826:	2b00      	cmp	r3, #0
 8013828:	d052      	beq.n	80138d0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x24c>
 801382a:	9903      	ldr	r1, [sp, #12]
 801382c:	4620      	mov	r0, r4
 801382e:	f7fd ff43 	bl	80116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013832:	e9dd 2307 	ldrd	r2, r3, [sp, #28]
 8013836:	b1c0      	cbz	r0, 801386a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 8013838:	f9b4 e000 	ldrsh.w	lr, [r4]
 801383c:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 8013840:	4576      	cmp	r6, lr
 8013842:	dc22      	bgt.n	801388a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013844:	f8b4 c004 	ldrh.w	ip, [r4, #4]
 8013848:	44f4      	add	ip, lr
 801384a:	fa0f fc8c 	sxth.w	ip, ip
 801384e:	45e0      	cmp	r8, ip
 8013850:	db1b      	blt.n	801388a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x206>
 8013852:	428f      	cmp	r7, r1
 8013854:	fa1f fc81 	uxth.w	ip, r1
 8013858:	88e1      	ldrh	r1, [r4, #6]
 801385a:	dc0d      	bgt.n	8013878 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1f4>
 801385c:	ebaa 0c0c 	sub.w	ip, sl, ip
 8013860:	f8a4 9002 	strh.w	r9, [r4, #2]
 8013864:	eba1 010c 	sub.w	r1, r1, ip
 8013868:	80e1      	strh	r1, [r4, #6]
 801386a:	4628      	mov	r0, r5
 801386c:	9904      	ldr	r1, [sp, #16]
 801386e:	3c08      	subs	r4, #8
 8013870:	4605      	mov	r5, r0
 8013872:	3901      	subs	r1, #1
 8013874:	9104      	str	r1, [sp, #16]
 8013876:	e7d3      	b.n	8013820 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x19c>
 8013878:	4461      	add	r1, ip
 801387a:	b209      	sxth	r1, r1
 801387c:	4549      	cmp	r1, r9
 801387e:	dcf5      	bgt.n	801386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 8013880:	eba2 0c0c 	sub.w	ip, r2, ip
 8013884:	f8a4 c006 	strh.w	ip, [r4, #6]
 8013888:	e7ef      	b.n	801386a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 801388a:	428f      	cmp	r7, r1
 801388c:	dcee      	bgt.n	801386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801388e:	f8b4 c006 	ldrh.w	ip, [r4, #6]
 8013892:	4461      	add	r1, ip
 8013894:	b209      	sxth	r1, r1
 8013896:	4589      	cmp	r9, r1
 8013898:	dbe8      	blt.n	801386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 801389a:	4576      	cmp	r6, lr
 801389c:	fa1f fc8e 	uxth.w	ip, lr
 80138a0:	88a1      	ldrh	r1, [r4, #4]
 80138a2:	dc07      	bgt.n	80138b4 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x230>
 80138a4:	eba3 0c0c 	sub.w	ip, r3, ip
 80138a8:	f8a4 8000 	strh.w	r8, [r4]
 80138ac:	eba1 010c 	sub.w	r1, r1, ip
 80138b0:	80a1      	strh	r1, [r4, #4]
 80138b2:	e7da      	b.n	801386a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80138b4:	4461      	add	r1, ip
 80138b6:	b209      	sxth	r1, r1
 80138b8:	4588      	cmp	r8, r1
 80138ba:	dbd7      	blt.n	801386c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e8>
 80138bc:	9905      	ldr	r1, [sp, #20]
 80138be:	eba1 0c0c 	sub.w	ip, r1, ip
 80138c2:	f8a4 c004 	strh.w	ip, [r4, #4]
 80138c6:	e7d0      	b.n	801386a <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x1e6>
 80138c8:	2402539e 	.word	0x2402539e
 80138cc:	2402539c 	.word	0x2402539c
 80138d0:	2d00      	cmp	r5, #0
 80138d2:	f000 816d 	beq.w	8013bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80138d6:	9b06      	ldr	r3, [sp, #24]
 80138d8:	445b      	add	r3, fp
 80138da:	461c      	mov	r4, r3
 80138dc:	9b02      	ldr	r3, [sp, #8]
 80138de:	3301      	adds	r3, #1
 80138e0:	f000 8166 	beq.w	8013bb0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x52c>
 80138e4:	f104 05a4 	add.w	r5, r4, #164	@ 0xa4
 80138e8:	9803      	ldr	r0, [sp, #12]
 80138ea:	4629      	mov	r1, r5
 80138ec:	f7ff fd3a 	bl	8013364 <_ZNK8touchgfx4Rect8includesERKS0_>
 80138f0:	b120      	cbz	r0, 80138fc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x278>
 80138f2:	f8bd 1008 	ldrh.w	r1, [sp, #8]
 80138f6:	9801      	ldr	r0, [sp, #4]
 80138f8:	f7ff feb0 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 80138fc:	9903      	ldr	r1, [sp, #12]
 80138fe:	4628      	mov	r0, r5
 8013900:	f7fd feda 	bl	80116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013904:	2800      	cmp	r0, #0
 8013906:	f000 809c 	beq.w	8013a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 801390a:	f9b4 90a4 	ldrsh.w	r9, [r4, #164]	@ 0xa4
 801390e:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013912:	fa1f f189 	uxth.w	r1, r9
 8013916:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 801391a:	9309      	str	r3, [sp, #36]	@ 0x24
 801391c:	eb01 0c03 	add.w	ip, r1, r3
 8013920:	b283      	uxth	r3, r0
 8013922:	4548      	cmp	r0, r9
 8013924:	f9bd e02a 	ldrsh.w	lr, [sp, #42]	@ 0x2a
 8013928:	fa1f fa8c 	uxth.w	sl, ip
 801392c:	f8bd c02c 	ldrh.w	ip, [sp, #44]	@ 0x2c
 8013930:	f9b4 20a6 	ldrsh.w	r2, [r4, #166]	@ 0xa6
 8013934:	eb03 050c 	add.w	r5, r3, ip
 8013938:	b2ad      	uxth	r5, r5
 801393a:	9505      	str	r5, [sp, #20]
 801393c:	f9bd 5014 	ldrsh.w	r5, [sp, #20]
 8013940:	9504      	str	r5, [sp, #16]
 8013942:	f8bb 50ec 	ldrh.w	r5, [fp, #236]	@ 0xec
 8013946:	f340 8099 	ble.w	8013a7c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3f8>
 801394a:	1a5b      	subs	r3, r3, r1
 801394c:	4596      	cmp	lr, r2
 801394e:	fa0f f08a 	sxth.w	r0, sl
 8013952:	b29b      	uxth	r3, r3
 8013954:	b21e      	sxth	r6, r3
 8013956:	dd2e      	ble.n	80139b6 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x332>
 8013958:	9f02      	ldr	r7, [sp, #8]
 801395a:	fa1f fe8e 	uxth.w	lr, lr
 801395e:	b292      	uxth	r2, r2
 8013960:	f8bd 402e 	ldrh.w	r4, [sp, #46]	@ 0x2e
 8013964:	eb0b 08c7 	add.w	r8, fp, r7, lsl #3
 8013968:	9f04      	ldr	r7, [sp, #16]
 801396a:	ebae 0102 	sub.w	r1, lr, r2
 801396e:	44a6      	add	lr, r4
 8013970:	1a3f      	subs	r7, r7, r0
 8013972:	f8b8 00b2 	ldrh.w	r0, [r8, #178]	@ 0xb2
 8013976:	b289      	uxth	r1, r1
 8013978:	4402      	add	r2, r0
 801397a:	fa0f fe8e 	sxth.w	lr, lr
 801397e:	b20d      	sxth	r5, r1
 8013980:	b212      	sxth	r2, r2
 8013982:	436f      	muls	r7, r5
 8013984:	ebae 0202 	sub.w	r2, lr, r2
 8013988:	4372      	muls	r2, r6
 801398a:	4297      	cmp	r7, r2
 801398c:	db09      	blt.n	80139a2 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x31e>
 801398e:	f8b8 20ac 	ldrh.w	r2, [r8, #172]	@ 0xac
 8013992:	f8a8 50b2 	strh.w	r5, [r8, #178]	@ 0xb2
 8013996:	449c      	add	ip, r3
 8013998:	f8ad 2028 	strh.w	r2, [sp, #40]	@ 0x28
 801399c:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 80139a0:	e686      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80139a2:	4421      	add	r1, r4
 80139a4:	f8b8 30ae 	ldrh.w	r3, [r8, #174]	@ 0xae
 80139a8:	f8a8 60b0 	strh.w	r6, [r8, #176]	@ 0xb0
 80139ac:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 80139b0:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 80139b4:	e67c      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 80139b6:	9f04      	ldr	r7, [sp, #16]
 80139b8:	42b8      	cmp	r0, r7
 80139ba:	da27      	bge.n	8013a0c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x388>
 80139bc:	9902      	ldr	r1, [sp, #8]
 80139be:	1a3f      	subs	r7, r7, r0
 80139c0:	f8bd 502e 	ldrh.w	r5, [sp, #46]	@ 0x2e
 80139c4:	eb0b 04c1 	add.w	r4, fp, r1, lsl #3
 80139c8:	eb05 010e 	add.w	r1, r5, lr
 80139cc:	fa1f f881 	uxth.w	r8, r1
 80139d0:	f8b4 10b2 	ldrh.w	r1, [r4, #178]	@ 0xb2
 80139d4:	4411      	add	r1, r2
 80139d6:	fa0f f988 	sxth.w	r9, r8
 80139da:	eba2 020e 	sub.w	r2, r2, lr
 80139de:	eba1 0108 	sub.w	r1, r1, r8
 80139e2:	4372      	muls	r2, r6
 80139e4:	b289      	uxth	r1, r1
 80139e6:	fa0f f881 	sxth.w	r8, r1
 80139ea:	fb08 f707 	mul.w	r7, r8, r7
 80139ee:	42ba      	cmp	r2, r7
 80139f0:	dc06      	bgt.n	8013a00 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x37c>
 80139f2:	f8a4 90ae 	strh.w	r9, [r4, #174]	@ 0xae
 80139f6:	f8a4 80b2 	strh.w	r8, [r4, #178]	@ 0xb2
 80139fa:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	@ 0xac
 80139fe:	e7ca      	b.n	8013996 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x312>
 8013a00:	4429      	add	r1, r5
 8013a02:	f8a4 60b0 	strh.w	r6, [r4, #176]	@ 0xb0
 8013a06:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013a0a:	e651      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013a0c:	9805      	ldr	r0, [sp, #20]
 8013a0e:	2d06      	cmp	r5, #6
 8013a10:	ebaa 0000 	sub.w	r0, sl, r0
 8013a14:	b280      	uxth	r0, r0
 8013a16:	fa0f fe80 	sxth.w	lr, r0
 8013a1a:	d817      	bhi.n	8013a4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3c8>
 8013a1c:	9b04      	ldr	r3, [sp, #16]
 8013a1e:	f9b4 10aa 	ldrsh.w	r1, [r4, #170]	@ 0xaa
 8013a22:	f8a4 30a4 	strh.w	r3, [r4, #164]	@ 0xa4
 8013a26:	1c6b      	adds	r3, r5, #1
 8013a28:	f8a4 e0a8 	strh.w	lr, [r4, #168]	@ 0xa8
 8013a2c:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013a30:	9b01      	ldr	r3, [sp, #4]
 8013a32:	9801      	ldr	r0, [sp, #4]
 8013a34:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013a38:	f820 9035 	strh.w	r9, [r0, r5, lsl #3]
 8013a3c:	805a      	strh	r2, [r3, #2]
 8013a3e:	809e      	strh	r6, [r3, #4]
 8013a40:	80d9      	strh	r1, [r3, #6]
 8013a42:	9b02      	ldr	r3, [sp, #8]
 8013a44:	3c08      	subs	r4, #8
 8013a46:	3b01      	subs	r3, #1
 8013a48:	9302      	str	r3, [sp, #8]
 8013a4a:	e747      	b.n	80138dc <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x258>
 8013a4c:	9a02      	ldr	r2, [sp, #8]
 8013a4e:	45b6      	cmp	lr, r6
 8013a50:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013a54:	db0d      	blt.n	8013a72 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3ee>
 8013a56:	449c      	add	ip, r3
 8013a58:	445a      	add	r2, fp
 8013a5a:	f8ad 9028 	strh.w	r9, [sp, #40]	@ 0x28
 8013a5e:	fa1f fc8c 	uxth.w	ip, ip
 8013a62:	f8a2 e0b0 	strh.w	lr, [r2, #176]	@ 0xb0
 8013a66:	f8ad c02c 	strh.w	ip, [sp, #44]	@ 0x2c
 8013a6a:	448c      	add	ip, r1
 8013a6c:	f8a2 c0ac 	strh.w	ip, [r2, #172]	@ 0xac
 8013a70:	e61e      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013a72:	445a      	add	r2, fp
 8013a74:	4484      	add	ip, r0
 8013a76:	f8a2 60b0 	strh.w	r6, [r2, #176]	@ 0xb0
 8013a7a:	e78f      	b.n	801399c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013a7c:	fa1f f18e 	uxth.w	r1, lr
 8013a80:	f8bd 602e 	ldrh.w	r6, [sp, #46]	@ 0x2e
 8013a84:	b293      	uxth	r3, r2
 8013a86:	4596      	cmp	lr, r2
 8013a88:	eb01 0806 	add.w	r8, r1, r6
 8013a8c:	9306      	str	r3, [sp, #24]
 8013a8e:	fa1f f888 	uxth.w	r8, r8
 8013a92:	9f06      	ldr	r7, [sp, #24]
 8013a94:	fa0f f388 	sxth.w	r3, r8
 8013a98:	9307      	str	r3, [sp, #28]
 8013a9a:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8013a9e:	443b      	add	r3, r7
 8013aa0:	b29b      	uxth	r3, r3
 8013aa2:	9308      	str	r3, [sp, #32]
 8013aa4:	da24      	bge.n	8013af0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x46c>
 8013aa6:	9905      	ldr	r1, [sp, #20]
 8013aa8:	eba3 0308 	sub.w	r3, r3, r8
 8013aac:	eba2 020e 	sub.w	r2, r2, lr
 8013ab0:	eba9 0000 	sub.w	r0, r9, r0
 8013ab4:	ebaa 0401 	sub.w	r4, sl, r1
 8013ab8:	b29b      	uxth	r3, r3
 8013aba:	b2a4      	uxth	r4, r4
 8013abc:	b219      	sxth	r1, r3
 8013abe:	b225      	sxth	r5, r4
 8013ac0:	4348      	muls	r0, r1
 8013ac2:	436a      	muls	r2, r5
 8013ac4:	4282      	cmp	r2, r0
 8013ac6:	9a02      	ldr	r2, [sp, #8]
 8013ac8:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8013acc:	445a      	add	r2, fp
 8013ace:	dc06      	bgt.n	8013ade <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x45a>
 8013ad0:	9b07      	ldr	r3, [sp, #28]
 8013ad2:	44a4      	add	ip, r4
 8013ad4:	f8a2 10b2 	strh.w	r1, [r2, #178]	@ 0xb2
 8013ad8:	f8a2 30ae 	strh.w	r3, [r2, #174]	@ 0xae
 8013adc:	e75e      	b.n	801399c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013ade:	9904      	ldr	r1, [sp, #16]
 8013ae0:	f8a2 50b0 	strh.w	r5, [r2, #176]	@ 0xb0
 8013ae4:	f8a2 10ac 	strh.w	r1, [r2, #172]	@ 0xac
 8013ae8:	4433      	add	r3, r6
 8013aea:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013aee:	e5df      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013af0:	9f06      	ldr	r7, [sp, #24]
 8013af2:	9b04      	ldr	r3, [sp, #16]
 8013af4:	1bc9      	subs	r1, r1, r7
 8013af6:	fa0f f78a 	sxth.w	r7, sl
 8013afa:	b289      	uxth	r1, r1
 8013afc:	429f      	cmp	r7, r3
 8013afe:	fa0f fe81 	sxth.w	lr, r1
 8013b02:	dd23      	ble.n	8013b4c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4c8>
 8013b04:	9a05      	ldr	r2, [sp, #20]
 8013b06:	eba9 0000 	sub.w	r0, r9, r0
 8013b0a:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 8013b0e:	ebaa 0202 	sub.w	r2, sl, r2
 8013b12:	9d07      	ldr	r5, [sp, #28]
 8013b14:	fb0e f000 	mul.w	r0, lr, r0
 8013b18:	b292      	uxth	r2, r2
 8013b1a:	eba5 0a03 	sub.w	sl, r5, r3
 8013b1e:	9b02      	ldr	r3, [sp, #8]
 8013b20:	b214      	sxth	r4, r2
 8013b22:	00db      	lsls	r3, r3, #3
 8013b24:	fb04 fa0a 	mul.w	sl, r4, sl
 8013b28:	445b      	add	r3, fp
 8013b2a:	4550      	cmp	r0, sl
 8013b2c:	db03      	blt.n	8013b36 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4b2>
 8013b2e:	f8a3 e0b2 	strh.w	lr, [r3, #178]	@ 0xb2
 8013b32:	4494      	add	ip, r2
 8013b34:	e732      	b.n	801399c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x318>
 8013b36:	9a04      	ldr	r2, [sp, #16]
 8013b38:	4431      	add	r1, r6
 8013b3a:	f8a3 40b0 	strh.w	r4, [r3, #176]	@ 0xb0
 8013b3e:	f8a3 20ac 	strh.w	r2, [r3, #172]	@ 0xac
 8013b42:	f8b3 30ae 	ldrh.w	r3, [r3, #174]	@ 0xae
 8013b46:	f8ad 302a 	strh.w	r3, [sp, #42]	@ 0x2a
 8013b4a:	e75c      	b.n	8013a06 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x382>
 8013b4c:	9b08      	ldr	r3, [sp, #32]
 8013b4e:	2d06      	cmp	r5, #6
 8013b50:	eba3 0308 	sub.w	r3, r3, r8
 8013b54:	b29b      	uxth	r3, r3
 8013b56:	b218      	sxth	r0, r3
 8013b58:	d813      	bhi.n	8013b82 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x4fe>
 8013b5a:	9b07      	ldr	r3, [sp, #28]
 8013b5c:	f8a4 00aa 	strh.w	r0, [r4, #170]	@ 0xaa
 8013b60:	f8a4 30a6 	strh.w	r3, [r4, #166]	@ 0xa6
 8013b64:	1c6b      	adds	r3, r5, #1
 8013b66:	9901      	ldr	r1, [sp, #4]
 8013b68:	f8ab 30ec 	strh.w	r3, [fp, #236]	@ 0xec
 8013b6c:	9b01      	ldr	r3, [sp, #4]
 8013b6e:	f821 9035 	strh.w	r9, [r1, r5, lsl #3]
 8013b72:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8013b76:	805a      	strh	r2, [r3, #2]
 8013b78:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013b7a:	f8a3 e006 	strh.w	lr, [r3, #6]
 8013b7e:	809a      	strh	r2, [r3, #4]
 8013b80:	e75f      	b.n	8013a42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x3be>
 8013b82:	9c02      	ldr	r4, [sp, #8]
 8013b84:	4570      	cmp	r0, lr
 8013b86:	ea4f 04c4 	mov.w	r4, r4, lsl #3
 8013b8a:	db0d      	blt.n	8013ba8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x524>
 8013b8c:	4431      	add	r1, r6
 8013b8e:	9b06      	ldr	r3, [sp, #24]
 8013b90:	445c      	add	r4, fp
 8013b92:	f8ad 202a 	strh.w	r2, [sp, #42]	@ 0x2a
 8013b96:	b289      	uxth	r1, r1
 8013b98:	f8a4 00b2 	strh.w	r0, [r4, #178]	@ 0xb2
 8013b9c:	f8ad 102e 	strh.w	r1, [sp, #46]	@ 0x2e
 8013ba0:	4419      	add	r1, r3
 8013ba2:	f8a4 10ae 	strh.w	r1, [r4, #174]	@ 0xae
 8013ba6:	e583      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013ba8:	445c      	add	r4, fp
 8013baa:	f8a4 e0b2 	strh.w	lr, [r4, #178]	@ 0xb2
 8013bae:	e79b      	b.n	8013ae8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x464>
 8013bb0:	f8bb 40ec 	ldrh.w	r4, [fp, #236]	@ 0xec
 8013bb4:	f64f 76ff 	movw	r6, #65535	@ 0xffff
 8013bb8:	1e65      	subs	r5, r4, #1
 8013bba:	eb0b 04c4 	add.w	r4, fp, r4, lsl #3
 8013bbe:	b2ad      	uxth	r5, r5
 8013bc0:	42b5      	cmp	r5, r6
 8013bc2:	d044      	beq.n	8013c4e <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5ca>
 8013bc4:	f9bd 202a 	ldrsh.w	r2, [sp, #42]	@ 0x2a
 8013bc8:	f9b4 00a6 	ldrsh.w	r0, [r4, #166]	@ 0xa6
 8013bcc:	f9bd 1028 	ldrsh.w	r1, [sp, #40]	@ 0x28
 8013bd0:	4282      	cmp	r2, r0
 8013bd2:	f9b4 70a4 	ldrsh.w	r7, [r4, #164]	@ 0xa4
 8013bd6:	d11f      	bne.n	8013c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013bd8:	f9bd c02e 	ldrsh.w	ip, [sp, #46]	@ 0x2e
 8013bdc:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013be0:	459c      	cmp	ip, r3
 8013be2:	d119      	bne.n	8013c18 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x594>
 8013be4:	f8b4 30a8 	ldrh.w	r3, [r4, #168]	@ 0xa8
 8013be8:	f8bd 202c 	ldrh.w	r2, [sp, #44]	@ 0x2c
 8013bec:	19d8      	adds	r0, r3, r7
 8013bee:	b200      	sxth	r0, r0
 8013bf0:	4288      	cmp	r0, r1
 8013bf2:	d109      	bne.n	8013c08 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x584>
 8013bf4:	f8ad 7028 	strh.w	r7, [sp, #40]	@ 0x28
 8013bf8:	4413      	add	r3, r2
 8013bfa:	f8ad 302c 	strh.w	r3, [sp, #44]	@ 0x2c
 8013bfe:	4629      	mov	r1, r5
 8013c00:	9801      	ldr	r0, [sp, #4]
 8013c02:	f7ff fd2b 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013c06:	e003      	b.n	8013c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013c08:	4411      	add	r1, r2
 8013c0a:	b209      	sxth	r1, r1
 8013c0c:	42b9      	cmp	r1, r7
 8013c0e:	d0f3      	beq.n	8013bf8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x574>
 8013c10:	3d01      	subs	r5, #1
 8013c12:	3c08      	subs	r4, #8
 8013c14:	b2ad      	uxth	r5, r5
 8013c16:	e7d3      	b.n	8013bc0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x53c>
 8013c18:	42b9      	cmp	r1, r7
 8013c1a:	d1f9      	bne.n	8013c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013c1c:	f9bd 102c 	ldrsh.w	r1, [sp, #44]	@ 0x2c
 8013c20:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013c24:	4299      	cmp	r1, r3
 8013c26:	d1f3      	bne.n	8013c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013c28:	f8b4 30aa 	ldrh.w	r3, [r4, #170]	@ 0xaa
 8013c2c:	f8bd 102e 	ldrh.w	r1, [sp, #46]	@ 0x2e
 8013c30:	181f      	adds	r7, r3, r0
 8013c32:	b23f      	sxth	r7, r7
 8013c34:	42ba      	cmp	r2, r7
 8013c36:	d105      	bne.n	8013c44 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5c0>
 8013c38:	f8ad 002a 	strh.w	r0, [sp, #42]	@ 0x2a
 8013c3c:	440b      	add	r3, r1
 8013c3e:	f8ad 302e 	strh.w	r3, [sp, #46]	@ 0x2e
 8013c42:	e7dc      	b.n	8013bfe <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x57a>
 8013c44:	440a      	add	r2, r1
 8013c46:	b212      	sxth	r2, r2
 8013c48:	4290      	cmp	r0, r2
 8013c4a:	d1e1      	bne.n	8013c10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x58c>
 8013c4c:	e7f6      	b.n	8013c3c <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5b8>
 8013c4e:	f8bb 60ec 	ldrh.w	r6, [fp, #236]	@ 0xec
 8013c52:	2e07      	cmp	r6, #7
 8013c54:	ea4f 04c6 	mov.w	r4, r6, lsl #3
 8013c58:	d812      	bhi.n	8013c80 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x5fc>
 8013c5a:	1c75      	adds	r5, r6, #1
 8013c5c:	f9bd 0028 	ldrsh.w	r0, [sp, #40]	@ 0x28
 8013c60:	f9bd 102a 	ldrsh.w	r1, [sp, #42]	@ 0x2a
 8013c64:	f8ab 50ec 	strh.w	r5, [fp, #236]	@ 0xec
 8013c68:	9d01      	ldr	r5, [sp, #4]
 8013c6a:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8013c6e:	442c      	add	r4, r5
 8013c70:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8013c74:	f825 0036 	strh.w	r0, [r5, r6, lsl #3]
 8013c78:	8061      	strh	r1, [r4, #2]
 8013c7a:	80a2      	strh	r2, [r4, #4]
 8013c7c:	80e3      	strh	r3, [r4, #6]
 8013c7e:	e581      	b.n	8013784 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x100>
 8013c80:	f10b 03ac 	add.w	r3, fp, #172	@ 0xac
 8013c84:	3e01      	subs	r6, #1
 8013c86:	445c      	add	r4, fp
 8013c88:	f06f 4a00 	mvn.w	sl, #2147483648	@ 0x80000000
 8013c8c:	f04f 37ff 	mov.w	r7, #4294967295
 8013c90:	2500      	movs	r5, #0
 8013c92:	9305      	str	r3, [sp, #20]
 8013c94:	f9b4 30a8 	ldrsh.w	r3, [r4, #168]	@ 0xa8
 8013c98:	1e72      	subs	r2, r6, #1
 8013c9a:	9302      	str	r3, [sp, #8]
 8013c9c:	4691      	mov	r9, r2
 8013c9e:	f9b4 30aa 	ldrsh.w	r3, [r4, #170]	@ 0xaa
 8013ca2:	9304      	str	r3, [sp, #16]
 8013ca4:	f104 03a4 	add.w	r3, r4, #164	@ 0xa4
 8013ca8:	f1b9 3fff 	cmp.w	r9, #4294967295
 8013cac:	6818      	ldr	r0, [r3, #0]
 8013cae:	f10d 0c30 	add.w	ip, sp, #48	@ 0x30
 8013cb2:	9207      	str	r2, [sp, #28]
 8013cb4:	bf16      	itet	ne
 8013cb6:	9905      	ldrne	r1, [sp, #20]
 8013cb8:	f8dd e00c 	ldreq.w	lr, [sp, #12]
 8013cbc:	eb01 0ec9 	addne.w	lr, r1, r9, lsl #3
 8013cc0:	9306      	str	r3, [sp, #24]
 8013cc2:	f8be 1006 	ldrh.w	r1, [lr, #6]
 8013cc6:	f8be 8004 	ldrh.w	r8, [lr, #4]
 8013cca:	fb18 f801 	smulbb	r8, r8, r1
 8013cce:	6859      	ldr	r1, [r3, #4]
 8013cd0:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 8013cd4:	4671      	mov	r1, lr
 8013cd6:	a80c      	add	r0, sp, #48	@ 0x30
 8013cd8:	f7ff fb6a 	bl	80133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013cdc:	f8bd 1036 	ldrh.w	r1, [sp, #54]	@ 0x36
 8013ce0:	f8bd 0034 	ldrh.w	r0, [sp, #52]	@ 0x34
 8013ce4:	f04f 0c08 	mov.w	ip, #8
 8013ce8:	9b04      	ldr	r3, [sp, #16]
 8013cea:	9a02      	ldr	r2, [sp, #8]
 8013cec:	fb10 f001 	smulbb	r0, r0, r1
 8013cf0:	fb02 8803 	mla	r8, r2, r3, r8
 8013cf4:	eba0 0108 	sub.w	r1, r0, r8
 8013cf8:	fb90 f0fc 	sdiv	r0, r0, ip
 8013cfc:	4288      	cmp	r0, r1
 8013cfe:	dc20      	bgt.n	8013d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8013d00:	4551      	cmp	r1, sl
 8013d02:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8013d06:	da03      	bge.n	8013d10 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x68c>
 8013d08:	b1d9      	cbz	r1, 8013d42 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6be>
 8013d0a:	468a      	mov	sl, r1
 8013d0c:	464f      	mov	r7, r9
 8013d0e:	4635      	mov	r5, r6
 8013d10:	f109 39ff 	add.w	r9, r9, #4294967295
 8013d14:	f119 0f02 	cmn.w	r9, #2
 8013d18:	d1c6      	bne.n	8013ca8 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x624>
 8013d1a:	4616      	mov	r6, r2
 8013d1c:	3201      	adds	r2, #1
 8013d1e:	f1a4 0408 	sub.w	r4, r4, #8
 8013d22:	d1b7      	bne.n	8013c94 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x610>
 8013d24:	9b01      	ldr	r3, [sp, #4]
 8013d26:	b2ac      	uxth	r4, r5
 8013d28:	00ed      	lsls	r5, r5, #3
 8013d2a:	1958      	adds	r0, r3, r5
 8013d2c:	1c7b      	adds	r3, r7, #1
 8013d2e:	d10b      	bne.n	8013d48 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6c4>
 8013d30:	4601      	mov	r1, r0
 8013d32:	9803      	ldr	r0, [sp, #12]
 8013d34:	f7ff fb3c 	bl	80133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013d38:	4621      	mov	r1, r4
 8013d3a:	9801      	ldr	r0, [sp, #4]
 8013d3c:	f7ff fc8e 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8013d40:	e4b6      	b.n	80136b0 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x2c>
 8013d42:	464f      	mov	r7, r9
 8013d44:	4635      	mov	r5, r6
 8013d46:	e7ed      	b.n	8013d24 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6a0>
 8013d48:	9b01      	ldr	r3, [sp, #4]
 8013d4a:	00ff      	lsls	r7, r7, #3
 8013d4c:	445d      	add	r5, fp
 8013d4e:	19d9      	adds	r1, r3, r7
 8013d50:	445f      	add	r7, fp
 8013d52:	f7ff fb2d 	bl	80133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 8013d56:	9b03      	ldr	r3, [sp, #12]
 8013d58:	cb03      	ldmia	r3!, {r0, r1}
 8013d5a:	9b03      	ldr	r3, [sp, #12]
 8013d5c:	f8c7 00ac 	str.w	r0, [r7, #172]	@ 0xac
 8013d60:	f8c7 10b0 	str.w	r1, [r7, #176]	@ 0xb0
 8013d64:	f855 0fac 	ldr.w	r0, [r5, #172]!
 8013d68:	6869      	ldr	r1, [r5, #4]
 8013d6a:	c303      	stmia	r3!, {r0, r1}
 8013d6c:	e7e4      	b.n	8013d38 <_ZN8touchgfx11Application14invalidateAreaENS_4RectE+0x6b4>
 8013d6e:	bf00      	nop

08013d70 <_ZN8touchgfx11Application15drawCachedAreasEv>:
 8013d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8013d74:	f500 7698 	add.w	r6, r0, #304	@ 0x130
 8013d78:	b09b      	sub	sp, #108	@ 0x6c
 8013d7a:	4604      	mov	r4, r0
 8013d7c:	4630      	mov	r0, r6
 8013d7e:	f7fb f8e4 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013d82:	4605      	mov	r5, r0
 8013d84:	b948      	cbnz	r0, 8013d9a <_ZN8touchgfx11Application15drawCachedAreasEv+0x2a>
 8013d86:	6823      	ldr	r3, [r4, #0]
 8013d88:	4620      	mov	r0, r4
 8013d8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013d8c:	e896 0006 	ldmia.w	r6, {r1, r2}
 8013d90:	4798      	blx	r3
 8013d92:	f8c4 5130 	str.w	r5, [r4, #304]	@ 0x130
 8013d96:	f8c4 5134 	str.w	r5, [r4, #308]	@ 0x134
 8013d9a:	4bc5      	ldr	r3, [pc, #788]	@ (80140b0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x340>)
 8013d9c:	681b      	ldr	r3, [r3, #0]
 8013d9e:	2b00      	cmp	r3, #0
 8013da0:	d03f      	beq.n	8013e22 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013da2:	4dc4      	ldr	r5, [pc, #784]	@ (80140b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x344>)
 8013da4:	4628      	mov	r0, r5
 8013da6:	f7fb f8d0 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013daa:	4606      	mov	r6, r0
 8013dac:	2800      	cmp	r0, #0
 8013dae:	d138      	bne.n	8013e22 <_ZN8touchgfx11Application15drawCachedAreasEv+0xb2>
 8013db0:	4628      	mov	r0, r5
 8013db2:	f7ff f9b3 	bl	801311c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8013db6:	6823      	ldr	r3, [r4, #0]
 8013db8:	6829      	ldr	r1, [r5, #0]
 8013dba:	4620      	mov	r0, r4
 8013dbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013dbe:	686a      	ldr	r2, [r5, #4]
 8013dc0:	4798      	blx	r3
 8013dc2:	802e      	strh	r6, [r5, #0]
 8013dc4:	806e      	strh	r6, [r5, #2]
 8013dc6:	80ae      	strh	r6, [r5, #4]
 8013dc8:	80ee      	strh	r6, [r5, #6]
 8013dca:	f10d 0824 	add.w	r8, sp, #36	@ 0x24
 8013dce:	4dba      	ldr	r5, [pc, #744]	@ (80140b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x348>)
 8013dd0:	4640      	mov	r0, r8
 8013dd2:	f7ff fbe7 	bl	80135a4 <_ZN8touchgfx6VectorINS_4RectELt8EEC1Ev>
 8013dd6:	882e      	ldrh	r6, [r5, #0]
 8013dd8:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8013ddc:	f104 00ac 	add.w	r0, r4, #172	@ 0xac
 8013de0:	4633      	mov	r3, r6
 8013de2:	42bb      	cmp	r3, r7
 8013de4:	d224      	bcs.n	8013e30 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013de6:	f8bd 1064 	ldrh.w	r1, [sp, #100]	@ 0x64
 8013dea:	2907      	cmp	r1, #7
 8013dec:	d816      	bhi.n	8013e1c <_ZN8touchgfx11Application15drawCachedAreasEv+0xac>
 8013dee:	eb00 02c3 	add.w	r2, r0, r3, lsl #3
 8013df2:	f930 9033 	ldrsh.w	r9, [r0, r3, lsl #3]
 8013df6:	f9b2 a002 	ldrsh.w	sl, [r2, #2]
 8013dfa:	f9b2 e004 	ldrsh.w	lr, [r2, #4]
 8013dfe:	f9b2 c006 	ldrsh.w	ip, [r2, #6]
 8013e02:	1c4a      	adds	r2, r1, #1
 8013e04:	f8ad 2064 	strh.w	r2, [sp, #100]	@ 0x64
 8013e08:	eb08 02c1 	add.w	r2, r8, r1, lsl #3
 8013e0c:	f828 9031 	strh.w	r9, [r8, r1, lsl #3]
 8013e10:	f8a2 a002 	strh.w	sl, [r2, #2]
 8013e14:	f8a2 e004 	strh.w	lr, [r2, #4]
 8013e18:	f8a2 c006 	strh.w	ip, [r2, #6]
 8013e1c:	3301      	adds	r3, #1
 8013e1e:	b29b      	uxth	r3, r3
 8013e20:	e7df      	b.n	8013de2 <_ZN8touchgfx11Application15drawCachedAreasEv+0x72>
 8013e22:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013e26:	2b00      	cmp	r3, #0
 8013e28:	d1cf      	bne.n	8013dca <_ZN8touchgfx11Application15drawCachedAreasEv+0x5a>
 8013e2a:	b01b      	add	sp, #108	@ 0x6c
 8013e2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e30:	f8b4 312e 	ldrh.w	r3, [r4, #302]	@ 0x12e
 8013e34:	42b3      	cmp	r3, r6
 8013e36:	d90c      	bls.n	8013e52 <_ZN8touchgfx11Application15drawCachedAreasEv+0xe2>
 8013e38:	eb04 03c6 	add.w	r3, r4, r6, lsl #3
 8013e3c:	6822      	ldr	r2, [r4, #0]
 8013e3e:	3601      	adds	r6, #1
 8013e40:	4620      	mov	r0, r4
 8013e42:	6c17      	ldr	r7, [r2, #64]	@ 0x40
 8013e44:	f8d3 10ee 	ldr.w	r1, [r3, #238]	@ 0xee
 8013e48:	b2b6      	uxth	r6, r6
 8013e4a:	f8d3 20f2 	ldr.w	r2, [r3, #242]	@ 0xf2
 8013e4e:	47b8      	blx	r7
 8013e50:	e7ee      	b.n	8013e30 <_ZN8touchgfx11Application15drawCachedAreasEv+0xc0>
 8013e52:	4a9a      	ldr	r2, [pc, #616]	@ (80140bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013e54:	6813      	ldr	r3, [r2, #0]
 8013e56:	4691      	mov	r9, r2
 8013e58:	f893 3048 	ldrb.w	r3, [r3, #72]	@ 0x48
 8013e5c:	2b01      	cmp	r3, #1
 8013e5e:	f040 80e0 	bne.w	8014022 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2b2>
 8013e62:	8829      	ldrh	r1, [r5, #0]
 8013e64:	2600      	movs	r6, #0
 8013e66:	f8b4 70ec 	ldrh.w	r7, [r4, #236]	@ 0xec
 8013e6a:	eb04 03c1 	add.w	r3, r4, r1, lsl #3
 8013e6e:	33ae      	adds	r3, #174	@ 0xae
 8013e70:	428f      	cmp	r7, r1
 8013e72:	f103 0308 	add.w	r3, r3, #8
 8013e76:	dd0a      	ble.n	8013e8e <_ZN8touchgfx11Application15drawCachedAreasEv+0x11e>
 8013e78:	f833 2c04 	ldrh.w	r2, [r3, #-4]
 8013e7c:	3101      	adds	r1, #1
 8013e7e:	f833 0c08 	ldrh.w	r0, [r3, #-8]
 8013e82:	4402      	add	r2, r0
 8013e84:	b212      	sxth	r2, r2
 8013e86:	4296      	cmp	r6, r2
 8013e88:	bfb8      	it	lt
 8013e8a:	4616      	movlt	r6, r2
 8013e8c:	e7f0      	b.n	8013e70 <_ZN8touchgfx11Application15drawCachedAreasEv+0x100>
 8013e8e:	4b8c      	ldr	r3, [pc, #560]	@ (80140c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x350>)
 8013e90:	f8df 9228 	ldr.w	r9, [pc, #552]	@ 80140bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>
 8013e94:	881b      	ldrh	r3, [r3, #0]
 8013e96:	2b0f      	cmp	r3, #15
 8013e98:	bf8c      	ite	hi
 8013e9a:	ea4f 0bd3 	movhi.w	fp, r3, lsr #3
 8013e9e:	f04f 0b01 	movls.w	fp, #1
 8013ea2:	2300      	movs	r3, #0
 8013ea4:	e9cd 3305 	strd	r3, r3, [sp, #20]
 8013ea8:	f8bd 7016 	ldrh.w	r7, [sp, #22]
 8013eac:	f8bd 001a 	ldrh.w	r0, [sp, #26]
 8013eb0:	4b82      	ldr	r3, [pc, #520]	@ (80140bc <_ZN8touchgfx11Application15drawCachedAreasEv+0x34c>)
 8013eb2:	4438      	add	r0, r7
 8013eb4:	b207      	sxth	r7, r0
 8013eb6:	6818      	ldr	r0, [r3, #0]
 8013eb8:	42b7      	cmp	r7, r6
 8013eba:	6803      	ldr	r3, [r0, #0]
 8013ebc:	f280 8083 	bge.w	8013fc6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x256>
 8013ec0:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8013ec4:	4798      	blx	r3
 8013ec6:	eb07 030b 	add.w	r3, r7, fp
 8013eca:	4298      	cmp	r0, r3
 8013ecc:	da07      	bge.n	8013ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013ece:	42b0      	cmp	r0, r6
 8013ed0:	da05      	bge.n	8013ede <_ZN8touchgfx11Application15drawCachedAreasEv+0x16e>
 8013ed2:	4287      	cmp	r7, r0
 8013ed4:	dd6c      	ble.n	8013fb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013ed6:	2f00      	cmp	r7, #0
 8013ed8:	dd6a      	ble.n	8013fb0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x240>
 8013eda:	4630      	mov	r0, r6
 8013edc:	e004      	b.n	8013ee8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x178>
 8013ede:	4287      	cmp	r7, r0
 8013ee0:	dcfb      	bgt.n	8013eda <_ZN8touchgfx11Application15drawCachedAreasEv+0x16a>
 8013ee2:	42b0      	cmp	r0, r6
 8013ee4:	bfa8      	it	ge
 8013ee6:	4630      	movge	r0, r6
 8013ee8:	4b76      	ldr	r3, [pc, #472]	@ (80140c4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x354>)
 8013eea:	1bc0      	subs	r0, r0, r7
 8013eec:	2200      	movs	r2, #0
 8013eee:	f8ad 7016 	strh.w	r7, [sp, #22]
 8013ef2:	f9b3 3000 	ldrsh.w	r3, [r3]
 8013ef6:	882f      	ldrh	r7, [r5, #0]
 8013ef8:	f8ad 2014 	strh.w	r2, [sp, #20]
 8013efc:	f8ad 3018 	strh.w	r3, [sp, #24]
 8013f00:	f8ad 001a 	strh.w	r0, [sp, #26]
 8013f04:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8013f08:	42bb      	cmp	r3, r7
 8013f0a:	d9cd      	bls.n	8013ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013f0c:	eb04 02c7 	add.w	r2, r4, r7, lsl #3
 8013f10:	ab07      	add	r3, sp, #28
 8013f12:	f852 0fac 	ldr.w	r0, [r2, #172]!
 8013f16:	6851      	ldr	r1, [r2, #4]
 8013f18:	c303      	stmia	r3!, {r0, r1}
 8013f1a:	a905      	add	r1, sp, #20
 8013f1c:	a807      	add	r0, sp, #28
 8013f1e:	f7fd fbcb 	bl	80116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8013f22:	2800      	cmp	r0, #0
 8013f24:	d04c      	beq.n	8013fc0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x250>
 8013f26:	f9bd 001c 	ldrsh.w	r0, [sp, #28]
 8013f2a:	f9bd 2014 	ldrsh.w	r2, [sp, #20]
 8013f2e:	f8bd a020 	ldrh.w	sl, [sp, #32]
 8013f32:	4686      	mov	lr, r0
 8013f34:	4290      	cmp	r0, r2
 8013f36:	f9bd 101e 	ldrsh.w	r1, [sp, #30]
 8013f3a:	4450      	add	r0, sl
 8013f3c:	f8bd a018 	ldrh.w	sl, [sp, #24]
 8013f40:	bfb8      	it	lt
 8013f42:	4696      	movlt	lr, r2
 8013f44:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8013f48:	4452      	add	r2, sl
 8013f4a:	b280      	uxth	r0, r0
 8013f4c:	4299      	cmp	r1, r3
 8013f4e:	468c      	mov	ip, r1
 8013f50:	b292      	uxth	r2, r2
 8013f52:	9302      	str	r3, [sp, #8]
 8013f54:	bfb8      	it	lt
 8013f56:	469c      	movlt	ip, r3
 8013f58:	b203      	sxth	r3, r0
 8013f5a:	fa0f fa82 	sxth.w	sl, r2
 8013f5e:	f8ad e01c 	strh.w	lr, [sp, #28]
 8013f62:	f8ad c01e 	strh.w	ip, [sp, #30]
 8013f66:	4553      	cmp	r3, sl
 8013f68:	bfb8      	it	lt
 8013f6a:	4602      	movlt	r2, r0
 8013f6c:	9b02      	ldr	r3, [sp, #8]
 8013f6e:	eba2 020e 	sub.w	r2, r2, lr
 8013f72:	f8ad 2020 	strh.w	r2, [sp, #32]
 8013f76:	f8bd 2022 	ldrh.w	r2, [sp, #34]	@ 0x22
 8013f7a:	4411      	add	r1, r2
 8013f7c:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8013f80:	4413      	add	r3, r2
 8013f82:	b289      	uxth	r1, r1
 8013f84:	b29b      	uxth	r3, r3
 8013f86:	b208      	sxth	r0, r1
 8013f88:	b21a      	sxth	r2, r3
 8013f8a:	4290      	cmp	r0, r2
 8013f8c:	bfb8      	it	lt
 8013f8e:	460b      	movlt	r3, r1
 8013f90:	eba3 030c 	sub.w	r3, r3, ip
 8013f94:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 8013f98:	a807      	add	r0, sp, #28
 8013f9a:	f7fa ffd6 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8013f9e:	b920      	cbnz	r0, 8013faa <_ZN8touchgfx11Application15drawCachedAreasEv+0x23a>
 8013fa0:	6823      	ldr	r3, [r4, #0]
 8013fa2:	a907      	add	r1, sp, #28
 8013fa4:	4620      	mov	r0, r4
 8013fa6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013fa8:	4798      	blx	r3
 8013faa:	3701      	adds	r7, #1
 8013fac:	b2bf      	uxth	r7, r7
 8013fae:	e7a9      	b.n	8013f04 <_ZN8touchgfx11Application15drawCachedAreasEv+0x194>
 8013fb0:	f8d9 0000 	ldr.w	r0, [r9]
 8013fb4:	2101      	movs	r1, #1
 8013fb6:	6803      	ldr	r3, [r0, #0]
 8013fb8:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8013fbc:	4798      	blx	r3
 8013fbe:	e773      	b.n	8013ea8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x138>
 8013fc0:	e9cd 0007 	strd	r0, r0, [sp, #28]
 8013fc4:	e7e8      	b.n	8013f98 <_ZN8touchgfx11Application15drawCachedAreasEv+0x228>
 8013fc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013fc8:	4798      	blx	r3
 8013fca:	4b3f      	ldr	r3, [pc, #252]	@ (80140c8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x358>)
 8013fcc:	781b      	ldrb	r3, [r3, #0]
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	f43f af2b 	beq.w	8013e2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	f104 00ee 	add.w	r0, r4, #238	@ 0xee
 8013fda:	f8a4 312e 	strh.w	r3, [r4, #302]	@ 0x12e
 8013fde:	882b      	ldrh	r3, [r5, #0]
 8013fe0:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8013fe4:	42ab      	cmp	r3, r5
 8013fe6:	f4bf af20 	bcs.w	8013e2a <_ZN8touchgfx11Application15drawCachedAreasEv+0xba>
 8013fea:	f8b4 112e 	ldrh.w	r1, [r4, #302]	@ 0x12e
 8013fee:	2907      	cmp	r1, #7
 8013ff0:	d814      	bhi.n	801401c <_ZN8touchgfx11Application15drawCachedAreasEv+0x2ac>
 8013ff2:	eb08 02c3 	add.w	r2, r8, r3, lsl #3
 8013ff6:	f938 e033 	ldrsh.w	lr, [r8, r3, lsl #3]
 8013ffa:	f9b2 c002 	ldrsh.w	ip, [r2, #2]
 8013ffe:	f9b2 7004 	ldrsh.w	r7, [r2, #4]
 8014002:	f9b2 6006 	ldrsh.w	r6, [r2, #6]
 8014006:	1c4a      	adds	r2, r1, #1
 8014008:	f8a4 212e 	strh.w	r2, [r4, #302]	@ 0x12e
 801400c:	eb00 02c1 	add.w	r2, r0, r1, lsl #3
 8014010:	f820 e031 	strh.w	lr, [r0, r1, lsl #3]
 8014014:	f8a2 c002 	strh.w	ip, [r2, #2]
 8014018:	8097      	strh	r7, [r2, #4]
 801401a:	80d6      	strh	r6, [r2, #6]
 801401c:	3301      	adds	r3, #1
 801401e:	b29b      	uxth	r3, r3
 8014020:	e7e0      	b.n	8013fe4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x274>
 8014022:	2b02      	cmp	r3, #2
 8014024:	f040 8133 	bne.w	801428e <_ZN8touchgfx11Application15drawCachedAreasEv+0x51e>
 8014028:	4b28      	ldr	r3, [pc, #160]	@ (80140cc <_ZN8touchgfx11Application15drawCachedAreasEv+0x35c>)
 801402a:	f104 0aac 	add.w	sl, r4, #172	@ 0xac
 801402e:	781b      	ldrb	r3, [r3, #0]
 8014030:	2b01      	cmp	r3, #1
 8014032:	f000 8098 	beq.w	8014166 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8014036:	882a      	ldrh	r2, [r5, #0]
 8014038:	f8b4 10ec 	ldrh.w	r1, [r4, #236]	@ 0xec
 801403c:	3201      	adds	r2, #1
 801403e:	b292      	uxth	r2, r2
 8014040:	2900      	cmp	r1, #0
 8014042:	d0c2      	beq.n	8013fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014044:	f8b4 60ae 	ldrh.w	r6, [r4, #174]	@ 0xae
 8014048:	4694      	mov	ip, r2
 801404a:	f8b4 30b2 	ldrh.w	r3, [r4, #178]	@ 0xb2
 801404e:	f04f 0900 	mov.w	r9, #0
 8014052:	441e      	add	r6, r3
 8014054:	b236      	sxth	r6, r6
 8014056:	fa1f f38c 	uxth.w	r3, ip
 801405a:	ea4f 07c9 	mov.w	r7, r9, lsl #3
 801405e:	4299      	cmp	r1, r3
 8014060:	f240 80be 	bls.w	80141e0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x470>
 8014064:	4427      	add	r7, r4
 8014066:	eb04 0ecc 	add.w	lr, r4, ip, lsl #3
 801406a:	f9b7 30ae 	ldrsh.w	r3, [r7, #174]	@ 0xae
 801406e:	f9be 00ae 	ldrsh.w	r0, [lr, #174]	@ 0xae
 8014072:	4283      	cmp	r3, r0
 8014074:	f340 80a0 	ble.w	80141b8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x448>
 8014078:	f8be 60b2 	ldrh.w	r6, [lr, #178]	@ 0xb2
 801407c:	46e1      	mov	r9, ip
 801407e:	4406      	add	r6, r0
 8014080:	b236      	sxth	r6, r6
 8014082:	429e      	cmp	r6, r3
 8014084:	bfa8      	it	ge
 8014086:	461e      	movge	r6, r3
 8014088:	f10c 0c01 	add.w	ip, ip, #1
 801408c:	e7e3      	b.n	8014056 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2e6>
 801408e:	d10a      	bne.n	80140a6 <_ZN8touchgfx11Application15drawCachedAreasEv+0x336>
 8014090:	4562      	cmp	r2, ip
 8014092:	f9b6 00b2 	ldrsh.w	r0, [r6, #178]	@ 0xb2
 8014096:	f9be 10b2 	ldrsh.w	r1, [lr, #178]	@ 0xb2
 801409a:	bfb8      	it	lt
 801409c:	4662      	movlt	r2, ip
 801409e:	4288      	cmp	r0, r1
 80140a0:	bfb8      	it	lt
 80140a2:	461f      	movlt	r7, r3
 80140a4:	e086      	b.n	80141b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80140a6:	428a      	cmp	r2, r1
 80140a8:	bfb8      	it	lt
 80140aa:	460a      	movlt	r2, r1
 80140ac:	e082      	b.n	80141b4 <_ZN8touchgfx11Application15drawCachedAreasEv+0x444>
 80140ae:	bf00      	nop
 80140b0:	240253e8 	.word	0x240253e8
 80140b4:	240253f4 	.word	0x240253f4
 80140b8:	240000ac 	.word	0x240000ac
 80140bc:	240253a8 	.word	0x240253a8
 80140c0:	2402539e 	.word	0x2402539e
 80140c4:	2402539c 	.word	0x2402539c
 80140c8:	240253a6 	.word	0x240253a6
 80140cc:	240253a0 	.word	0x240253a0
 80140d0:	19a1      	adds	r1, r4, r6
 80140d2:	ab07      	add	r3, sp, #28
 80140d4:	f851 0fac 	ldr.w	r0, [r1, #172]!
 80140d8:	6849      	ldr	r1, [r1, #4]
 80140da:	c303      	stmia	r3!, {r0, r1}
 80140dc:	f9bd 3020 	ldrsh.w	r3, [sp, #32]
 80140e0:	a807      	add	r0, sp, #28
 80140e2:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 80140e6:	2b13      	cmp	r3, #19
 80140e8:	440b      	add	r3, r1
 80140ea:	bfd8      	it	le
 80140ec:	f9bd 201c 	ldrshle.w	r2, [sp, #28]
 80140f0:	1a9b      	subs	r3, r3, r2
 80140f2:	f8ad 201c 	strh.w	r2, [sp, #28]
 80140f6:	f8ad 3020 	strh.w	r3, [sp, #32]
 80140fa:	f7ff f829 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80140fe:	a807      	add	r0, sp, #28
 8014100:	f7fa ff23 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014104:	bb78      	cbnz	r0, 8014166 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 8014106:	f9bd c022 	ldrsh.w	ip, [sp, #34]	@ 0x22
 801410a:	4426      	add	r6, r4
 801410c:	f8d9 0000 	ldr.w	r0, [r9]
 8014110:	f1bc 0f14 	cmp.w	ip, #20
 8014114:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8014118:	f8d0 e000 	ldr.w	lr, [r0]
 801411c:	bfa8      	it	ge
 801411e:	f04f 0c14 	movge.w	ip, #20
 8014122:	f8bd 201e 	ldrh.w	r2, [sp, #30]
 8014126:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801412a:	fa1f fc8c 	uxth.w	ip, ip
 801412e:	f8cd c000 	str.w	ip, [sp]
 8014132:	f8de b090 	ldr.w	fp, [lr, #144]	@ 0x90
 8014136:	47d8      	blx	fp
 8014138:	4683      	mov	fp, r0
 801413a:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801413e:	a807      	add	r0, sp, #28
 8014140:	f7fe ffec 	bl	801311c <_ZN8touchgfx21DisplayTransformation29transformFrameBufferToDisplayERNS_4RectE>
 8014144:	6823      	ldr	r3, [r4, #0]
 8014146:	4620      	mov	r0, r4
 8014148:	a907      	add	r1, sp, #28
 801414a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801414c:	4798      	blx	r3
 801414e:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8014152:	eba0 000b 	sub.w	r0, r0, fp
 8014156:	b200      	sxth	r0, r0
 8014158:	f8a6 00b0 	strh.w	r0, [r6, #176]	@ 0xb0
 801415c:	b918      	cbnz	r0, 8014166 <_ZN8touchgfx11Application15drawCachedAreasEv+0x3f6>
 801415e:	b2b9      	uxth	r1, r7
 8014160:	4650      	mov	r0, sl
 8014162:	f7ff fa7b 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 8014166:	f8b4 b0ec 	ldrh.w	fp, [r4, #236]	@ 0xec
 801416a:	f1bb 0f00 	cmp.w	fp, #0
 801416e:	f43f af2c 	beq.w	8013fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 8014172:	882b      	ldrh	r3, [r5, #0]
 8014174:	2700      	movs	r7, #0
 8014176:	f9b4 20ac 	ldrsh.w	r2, [r4, #172]	@ 0xac
 801417a:	3301      	adds	r3, #1
 801417c:	b29b      	uxth	r3, r3
 801417e:	b299      	uxth	r1, r3
 8014180:	00fe      	lsls	r6, r7, #3
 8014182:	458b      	cmp	fp, r1
 8014184:	d9a4      	bls.n	80140d0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x360>
 8014186:	4426      	add	r6, r4
 8014188:	eb04 0ec3 	add.w	lr, r4, r3, lsl #3
 801418c:	f8b6 10ac 	ldrh.w	r1, [r6, #172]	@ 0xac
 8014190:	f8b6 00b0 	ldrh.w	r0, [r6, #176]	@ 0xb0
 8014194:	f9be c0ac 	ldrsh.w	ip, [lr, #172]	@ 0xac
 8014198:	4408      	add	r0, r1
 801419a:	f8be 10b0 	ldrh.w	r1, [lr, #176]	@ 0xb0
 801419e:	4461      	add	r1, ip
 80141a0:	b200      	sxth	r0, r0
 80141a2:	b209      	sxth	r1, r1
 80141a4:	4288      	cmp	r0, r1
 80141a6:	f6bf af72 	bge.w	801408e <_ZN8touchgfx11Application15drawCachedAreasEv+0x31e>
 80141aa:	4584      	cmp	ip, r0
 80141ac:	4662      	mov	r2, ip
 80141ae:	461f      	mov	r7, r3
 80141b0:	bfb8      	it	lt
 80141b2:	4602      	movlt	r2, r0
 80141b4:	3301      	adds	r3, #1
 80141b6:	e7e2      	b.n	801417e <_ZN8touchgfx11Application15drawCachedAreasEv+0x40e>
 80141b8:	d10e      	bne.n	80141d8 <_ZN8touchgfx11Application15drawCachedAreasEv+0x468>
 80141ba:	f9be 00b0 	ldrsh.w	r0, [lr, #176]	@ 0xb0
 80141be:	f8be e0b2 	ldrh.w	lr, [lr, #178]	@ 0xb2
 80141c2:	f9b7 70b0 	ldrsh.w	r7, [r7, #176]	@ 0xb0
 80141c6:	4473      	add	r3, lr
 80141c8:	b21b      	sxth	r3, r3
 80141ca:	429e      	cmp	r6, r3
 80141cc:	bfa8      	it	ge
 80141ce:	461e      	movge	r6, r3
 80141d0:	4287      	cmp	r7, r0
 80141d2:	bfb8      	it	lt
 80141d4:	46e1      	movlt	r9, ip
 80141d6:	e757      	b.n	8014088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80141d8:	4286      	cmp	r6, r0
 80141da:	bfa8      	it	ge
 80141dc:	4606      	movge	r6, r0
 80141de:	e753      	b.n	8014088 <_ZN8touchgfx11Application15drawCachedAreasEv+0x318>
 80141e0:	eb0a 0007 	add.w	r0, sl, r7
 80141e4:	4427      	add	r7, r4
 80141e6:	f9b7 b0b2 	ldrsh.w	fp, [r7, #178]	@ 0xb2
 80141ea:	f1bb 0f13 	cmp.w	fp, #19
 80141ee:	bfdc      	itt	le
 80141f0:	f8b7 60ae 	ldrhle.w	r6, [r7, #174]	@ 0xae
 80141f4:	445e      	addle	r6, fp
 80141f6:	e9cd 2102 	strd	r2, r1, [sp, #8]
 80141fa:	bfd8      	it	le
 80141fc:	b236      	sxthle	r6, r6
 80141fe:	f7fa fea4 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8014202:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 8014206:	2800      	cmp	r0, #0
 8014208:	f47f af1a 	bne.w	8014040 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2d0>
 801420c:	f9b7 20ae 	ldrsh.w	r2, [r7, #174]	@ 0xae
 8014210:	fa1f fb8b 	uxth.w	fp, fp
 8014214:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 8014218:	1ab6      	subs	r6, r6, r2
 801421a:	4829      	ldr	r0, [pc, #164]	@ (80142c0 <_ZN8touchgfx11Application15drawCachedAreasEv+0x550>)
 801421c:	f9b7 10ac 	ldrsh.w	r1, [r7, #172]	@ 0xac
 8014220:	2e14      	cmp	r6, #20
 8014222:	f9b7 30b0 	ldrsh.w	r3, [r7, #176]	@ 0xb0
 8014226:	6800      	ldr	r0, [r0, #0]
 8014228:	bfa8      	it	ge
 801422a:	2614      	movge	r6, #20
 801422c:	f8ad 101c 	strh.w	r1, [sp, #28]
 8014230:	f8ad 201e 	strh.w	r2, [sp, #30]
 8014234:	b289      	uxth	r1, r1
 8014236:	f8ad 3020 	strh.w	r3, [sp, #32]
 801423a:	b2b6      	uxth	r6, r6
 801423c:	f8d0 c000 	ldr.w	ip, [r0]
 8014240:	b292      	uxth	r2, r2
 8014242:	455e      	cmp	r6, fp
 8014244:	bf94      	ite	ls
 8014246:	9600      	strls	r6, [sp, #0]
 8014248:	f8cd b000 	strhi.w	fp, [sp]
 801424c:	b29b      	uxth	r3, r3
 801424e:	f8dc 6090 	ldr.w	r6, [ip, #144]	@ 0x90
 8014252:	47b0      	blx	r6
 8014254:	6823      	ldr	r3, [r4, #0]
 8014256:	f8ad 0022 	strh.w	r0, [sp, #34]	@ 0x22
 801425a:	a907      	add	r1, sp, #28
 801425c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801425e:	4620      	mov	r0, r4
 8014260:	4798      	blx	r3
 8014262:	f8bd 1022 	ldrh.w	r1, [sp, #34]	@ 0x22
 8014266:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801426a:	f8b7 20ae 	ldrh.w	r2, [r7, #174]	@ 0xae
 801426e:	1a5b      	subs	r3, r3, r1
 8014270:	440a      	add	r2, r1
 8014272:	b21b      	sxth	r3, r3
 8014274:	f8a7 20ae 	strh.w	r2, [r7, #174]	@ 0xae
 8014278:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
 801427c:	2b00      	cmp	r3, #0
 801427e:	f47f aeda 	bne.w	8014036 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 8014282:	fa1f f189 	uxth.w	r1, r9
 8014286:	4650      	mov	r0, sl
 8014288:	f7ff f9e8 	bl	801365c <_ZN8touchgfx6VectorINS_4RectELt8EE13quickRemoveAtEt>
 801428c:	e6d3      	b.n	8014036 <_ZN8touchgfx11Application15drawCachedAreasEv+0x2c6>
 801428e:	882e      	ldrh	r6, [r5, #0]
 8014290:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	@ 0xec
 8014294:	42b3      	cmp	r3, r6
 8014296:	f67f ae98 	bls.w	8013fca <_ZN8touchgfx11Application15drawCachedAreasEv+0x25a>
 801429a:	eb04 02c6 	add.w	r2, r4, r6, lsl #3
 801429e:	ab07      	add	r3, sp, #28
 80142a0:	f852 0fac 	ldr.w	r0, [r2, #172]!
 80142a4:	6851      	ldr	r1, [r2, #4]
 80142a6:	c303      	stmia	r3!, {r0, r1}
 80142a8:	a807      	add	r0, sp, #28
 80142aa:	f7fa fe4e 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 80142ae:	b920      	cbnz	r0, 80142ba <_ZN8touchgfx11Application15drawCachedAreasEv+0x54a>
 80142b0:	6823      	ldr	r3, [r4, #0]
 80142b2:	a907      	add	r1, sp, #28
 80142b4:	4620      	mov	r0, r4
 80142b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80142b8:	4798      	blx	r3
 80142ba:	3601      	adds	r6, #1
 80142bc:	b2b6      	uxth	r6, r6
 80142be:	e7e7      	b.n	8014290 <_ZN8touchgfx11Application15drawCachedAreasEv+0x520>
 80142c0:	240253a8 	.word	0x240253a8

080142c4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE>:
 80142c4:	4b03      	ldr	r3, [pc, #12]	@ (80142d4 <_GLOBAL__sub_I__ZN8touchgfx11Application8instanceE+0x10>)
 80142c6:	2200      	movs	r2, #0
 80142c8:	801a      	strh	r2, [r3, #0]
 80142ca:	805a      	strh	r2, [r3, #2]
 80142cc:	809a      	strh	r2, [r3, #4]
 80142ce:	80da      	strh	r2, [r3, #6]
 80142d0:	4770      	bx	lr
 80142d2:	bf00      	nop
 80142d4:	240253f4 	.word	0x240253f4

080142d8 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list>:
 80142d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80142dc:	b09d      	sub	sp, #116	@ 0x74
 80142de:	4606      	mov	r6, r0
 80142e0:	4614      	mov	r4, r2
 80142e2:	468a      	mov	sl, r1
 80142e4:	a803      	add	r0, sp, #12
 80142e6:	461d      	mov	r5, r3
 80142e8:	f001 f894 	bl	8015414 <_ZN8touchgfx12TextProviderC1Ev>
 80142ec:	6833      	ldr	r3, [r6, #0]
 80142ee:	4630      	mov	r0, r6
 80142f0:	f242 0b0b 	movw	fp, #8203	@ 0x200b
 80142f4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80142f6:	4798      	blx	r3
 80142f8:	6833      	ldr	r3, [r6, #0]
 80142fa:	4607      	mov	r7, r0
 80142fc:	4630      	mov	r0, r6
 80142fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014300:	4798      	blx	r3
 8014302:	462a      	mov	r2, r5
 8014304:	2500      	movs	r5, #0
 8014306:	4621      	mov	r1, r4
 8014308:	9000      	str	r0, [sp, #0]
 801430a:	463b      	mov	r3, r7
 801430c:	462c      	mov	r4, r5
 801430e:	46a9      	mov	r9, r5
 8014310:	46a8      	mov	r8, r5
 8014312:	a803      	add	r0, sp, #12
 8014314:	f001 f8d1 	bl	80154ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014318:	2300      	movs	r3, #0
 801431a:	9302      	str	r3, [sp, #8]
 801431c:	f64f 63ff 	movw	r3, #65279	@ 0xfeff
 8014320:	429c      	cmp	r4, r3
 8014322:	d002      	beq.n	801432a <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x52>
 8014324:	455c      	cmp	r4, fp
 8014326:	bf18      	it	ne
 8014328:	4625      	movne	r5, r4
 801432a:	ab02      	add	r3, sp, #8
 801432c:	4632      	mov	r2, r6
 801432e:	4651      	mov	r1, sl
 8014330:	a803      	add	r0, sp, #12
 8014332:	f001 fbe5 	bl	8015b00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014336:	4604      	mov	r4, r0
 8014338:	b108      	cbz	r0, 801433e <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x66>
 801433a:	280a      	cmp	r0, #10
 801433c:	d10a      	bne.n	8014354 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x7c>
 801433e:	45c1      	cmp	r9, r8
 8014340:	bf38      	it	cc
 8014342:	46c1      	movcc	r9, r8
 8014344:	f04f 0800 	mov.w	r8, #0
 8014348:	2c00      	cmp	r4, #0
 801434a:	d1e5      	bne.n	8014318 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801434c:	4648      	mov	r0, r9
 801434e:	b01d      	add	sp, #116	@ 0x74
 8014350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014354:	9a02      	ldr	r2, [sp, #8]
 8014356:	2a00      	cmp	r2, #0
 8014358:	d0de      	beq.n	8014318 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x40>
 801435a:	7b57      	ldrb	r7, [r2, #13]
 801435c:	4629      	mov	r1, r5
 801435e:	6833      	ldr	r3, [r6, #0]
 8014360:	007f      	lsls	r7, r7, #1
 8014362:	8894      	ldrh	r4, [r2, #4]
 8014364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014366:	f407 7080 	and.w	r0, r7, #256	@ 0x100
 801436a:	7a97      	ldrb	r7, [r2, #10]
 801436c:	4307      	orrs	r7, r0
 801436e:	4630      	mov	r0, r6
 8014370:	4798      	blx	r3
 8014372:	4438      	add	r0, r7
 8014374:	4480      	add	r8, r0
 8014376:	fa1f f888 	uxth.w	r8, r8
 801437a:	e7e5      	b.n	8014348 <_ZNK8touchgfx4Font17getStringWidthLTREhPKtSt9__va_list+0x70>

0801437c <_ZNK8touchgfx4Font12getCharWidthEt>:
 801437c:	b508      	push	{r3, lr}
 801437e:	6803      	ldr	r3, [r0, #0]
 8014380:	68db      	ldr	r3, [r3, #12]
 8014382:	4798      	blx	r3
 8014384:	b128      	cbz	r0, 8014392 <_ZNK8touchgfx4Font12getCharWidthEt+0x16>
 8014386:	7b43      	ldrb	r3, [r0, #13]
 8014388:	7a80      	ldrb	r0, [r0, #10]
 801438a:	005b      	lsls	r3, r3, #1
 801438c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014390:	4318      	orrs	r0, r3
 8014392:	bd08      	pop	{r3, pc}

08014394 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz>:
 8014394:	b40e      	push	{r1, r2, r3}
 8014396:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014398:	b09e      	sub	sp, #120	@ 0x78
 801439a:	4605      	mov	r5, r0
 801439c:	ab23      	add	r3, sp, #140	@ 0x8c
 801439e:	a805      	add	r0, sp, #20
 80143a0:	f853 4b04 	ldr.w	r4, [r3], #4
 80143a4:	9303      	str	r3, [sp, #12]
 80143a6:	f001 f835 	bl	8015414 <_ZN8touchgfx12TextProviderC1Ev>
 80143aa:	682b      	ldr	r3, [r5, #0]
 80143ac:	4628      	mov	r0, r5
 80143ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80143b0:	4798      	blx	r3
 80143b2:	682b      	ldr	r3, [r5, #0]
 80143b4:	4606      	mov	r6, r0
 80143b6:	4628      	mov	r0, r5
 80143b8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80143ba:	4798      	blx	r3
 80143bc:	4633      	mov	r3, r6
 80143be:	4621      	mov	r1, r4
 80143c0:	ae1e      	add	r6, sp, #120	@ 0x78
 80143c2:	2400      	movs	r4, #0
 80143c4:	9000      	str	r0, [sp, #0]
 80143c6:	9a03      	ldr	r2, [sp, #12]
 80143c8:	a805      	add	r0, sp, #20
 80143ca:	f001 f876 	bl	80154ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80143ce:	f846 4d68 	str.w	r4, [r6, #-104]!
 80143d2:	462a      	mov	r2, r5
 80143d4:	4633      	mov	r3, r6
 80143d6:	4621      	mov	r1, r4
 80143d8:	a805      	add	r0, sp, #20
 80143da:	f001 fb91 	bl	8015b00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80143de:	b300      	cbz	r0, 8014422 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x8e>
 80143e0:	280a      	cmp	r0, #10
 80143e2:	d01a      	beq.n	801441a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80143e4:	9f04      	ldr	r7, [sp, #16]
 80143e6:	b1c7      	cbz	r7, 801441a <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x86>
 80143e8:	7b78      	ldrb	r0, [r7, #13]
 80143ea:	7a3b      	ldrb	r3, [r7, #8]
 80143ec:	00c1      	lsls	r1, r0, #3
 80143ee:	88ea      	ldrh	r2, [r5, #6]
 80143f0:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 80143f4:	4319      	orrs	r1, r3
 80143f6:	0643      	lsls	r3, r0, #25
 80143f8:	ea4f 1000 	mov.w	r0, r0, lsl #4
 80143fc:	bf48      	it	mi
 80143fe:	f5a1 7300 	submi.w	r3, r1, #512	@ 0x200
 8014402:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 8014406:	bf48      	it	mi
 8014408:	b219      	sxthmi	r1, r3
 801440a:	79fb      	ldrb	r3, [r7, #7]
 801440c:	4303      	orrs	r3, r0
 801440e:	4413      	add	r3, r2
 8014410:	1a5b      	subs	r3, r3, r1
 8014412:	b21b      	sxth	r3, r3
 8014414:	429c      	cmp	r4, r3
 8014416:	bfb8      	it	lt
 8014418:	461c      	movlt	r4, r3
 801441a:	4633      	mov	r3, r6
 801441c:	462a      	mov	r2, r5
 801441e:	2100      	movs	r1, #0
 8014420:	e7da      	b.n	80143d8 <_ZNK8touchgfx4Font16getMaxTextHeightEPKtz+0x44>
 8014422:	b2a0      	uxth	r0, r4
 8014424:	b01e      	add	sp, #120	@ 0x78
 8014426:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801442a:	b003      	add	sp, #12
 801442c:	4770      	bx	lr

0801442e <_ZNK8touchgfx4Font20getMinimumTextHeightEv>:
 801442e:	7a43      	ldrb	r3, [r0, #9]
 8014430:	8880      	ldrh	r0, [r0, #4]
 8014432:	4418      	add	r0, r3
 8014434:	b280      	uxth	r0, r0
 8014436:	4770      	bx	lr

08014438 <_ZNK8touchgfx4Font13getFontHeightEv>:
 8014438:	6803      	ldr	r3, [r0, #0]
 801443a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801443c:	4718      	bx	r3

0801443e <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz>:
 801443e:	b40e      	push	{r1, r2, r3}
 8014440:	b570      	push	{r4, r5, r6, lr}
 8014442:	b09d      	sub	sp, #116	@ 0x74
 8014444:	4604      	mov	r4, r0
 8014446:	ab21      	add	r3, sp, #132	@ 0x84
 8014448:	a803      	add	r0, sp, #12
 801444a:	f853 5b04 	ldr.w	r5, [r3], #4
 801444e:	9302      	str	r3, [sp, #8]
 8014450:	f000 ffe0 	bl	8015414 <_ZN8touchgfx12TextProviderC1Ev>
 8014454:	6823      	ldr	r3, [r4, #0]
 8014456:	4620      	mov	r0, r4
 8014458:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801445a:	4798      	blx	r3
 801445c:	6823      	ldr	r3, [r4, #0]
 801445e:	4606      	mov	r6, r0
 8014460:	4620      	mov	r0, r4
 8014462:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014464:	2401      	movs	r4, #1
 8014466:	4798      	blx	r3
 8014468:	4633      	mov	r3, r6
 801446a:	9000      	str	r0, [sp, #0]
 801446c:	4629      	mov	r1, r5
 801446e:	9a02      	ldr	r2, [sp, #8]
 8014470:	a803      	add	r0, sp, #12
 8014472:	f001 f822 	bl	80154ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 8014476:	a803      	add	r0, sp, #12
 8014478:	f001 fbc2 	bl	8015c00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801447c:	b2a3      	uxth	r3, r4
 801447e:	b138      	cbz	r0, 8014490 <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x52>
 8014480:	280a      	cmp	r0, #10
 8014482:	a803      	add	r0, sp, #12
 8014484:	bf04      	itt	eq
 8014486:	3301      	addeq	r3, #1
 8014488:	b21c      	sxtheq	r4, r3
 801448a:	f001 fbb9 	bl	8015c00 <_ZN8touchgfx12TextProvider11getNextCharEv>
 801448e:	e7f5      	b.n	801447c <_ZNK8touchgfx4Font16getNumberOfLinesEPKtz+0x3e>
 8014490:	4618      	mov	r0, r3
 8014492:	b01d      	add	sp, #116	@ 0x74
 8014494:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014498:	b003      	add	sp, #12
 801449a:	4770      	bx	lr

0801449c <_ZNK8touchgfx4Font15getSpacingAboveEPKtz>:
 801449c:	b40e      	push	{r1, r2, r3}
 801449e:	b5f0      	push	{r4, r5, r6, r7, lr}
 80144a0:	b09e      	sub	sp, #120	@ 0x78
 80144a2:	4604      	mov	r4, r0
 80144a4:	ab23      	add	r3, sp, #140	@ 0x8c
 80144a6:	a805      	add	r0, sp, #20
 80144a8:	f853 5b04 	ldr.w	r5, [r3], #4
 80144ac:	9303      	str	r3, [sp, #12]
 80144ae:	f000 ffb1 	bl	8015414 <_ZN8touchgfx12TextProviderC1Ev>
 80144b2:	6823      	ldr	r3, [r4, #0]
 80144b4:	4620      	mov	r0, r4
 80144b6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80144b8:	4798      	blx	r3
 80144ba:	6823      	ldr	r3, [r4, #0]
 80144bc:	4606      	mov	r6, r0
 80144be:	4620      	mov	r0, r4
 80144c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80144c2:	4798      	blx	r3
 80144c4:	4633      	mov	r3, r6
 80144c6:	4629      	mov	r1, r5
 80144c8:	9000      	str	r0, [sp, #0]
 80144ca:	9a03      	ldr	r2, [sp, #12]
 80144cc:	a805      	add	r0, sp, #20
 80144ce:	f000 fff4 	bl	80154ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>
 80144d2:	ad1e      	add	r5, sp, #120	@ 0x78
 80144d4:	2100      	movs	r1, #0
 80144d6:	f647 76ff 	movw	r6, #32767	@ 0x7fff
 80144da:	4622      	mov	r2, r4
 80144dc:	a805      	add	r0, sp, #20
 80144de:	f845 1d68 	str.w	r1, [r5, #-104]!
 80144e2:	462b      	mov	r3, r5
 80144e4:	f001 fb0c 	bl	8015b00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 80144e8:	b1d8      	cbz	r0, 8014522 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x86>
 80144ea:	280a      	cmp	r0, #10
 80144ec:	d012      	beq.n	8014514 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80144ee:	9804      	ldr	r0, [sp, #16]
 80144f0:	b180      	cbz	r0, 8014514 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x78>
 80144f2:	7b47      	ldrb	r7, [r0, #13]
 80144f4:	88e2      	ldrh	r2, [r4, #6]
 80144f6:	00fb      	lsls	r3, r7, #3
 80144f8:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 80144fc:	7a03      	ldrb	r3, [r0, #8]
 80144fe:	430b      	orrs	r3, r1
 8014500:	0679      	lsls	r1, r7, #25
 8014502:	bf44      	itt	mi
 8014504:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8014508:	b21b      	sxthmi	r3, r3
 801450a:	1ad3      	subs	r3, r2, r3
 801450c:	b21b      	sxth	r3, r3
 801450e:	429e      	cmp	r6, r3
 8014510:	bfa8      	it	ge
 8014512:	461e      	movge	r6, r3
 8014514:	462b      	mov	r3, r5
 8014516:	4622      	mov	r2, r4
 8014518:	2100      	movs	r1, #0
 801451a:	a805      	add	r0, sp, #20
 801451c:	f001 faf0 	bl	8015b00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>
 8014520:	e7e2      	b.n	80144e8 <_ZNK8touchgfx4Font15getSpacingAboveEPKtz+0x4c>
 8014522:	4630      	mov	r0, r6
 8014524:	b01e      	add	sp, #120	@ 0x78
 8014526:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
 801452a:	b003      	add	sp, #12
 801452c:	4770      	bx	lr

0801452e <_ZNK8touchgfx8Drawable10invalidateEv>:
 801452e:	b513      	push	{r0, r1, r4, lr}
 8014530:	6803      	ldr	r3, [r0, #0]
 8014532:	2400      	movs	r4, #0
 8014534:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 8014538:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801453c:	f8ad 1004 	strh.w	r1, [sp, #4]
 8014540:	4669      	mov	r1, sp
 8014542:	691b      	ldr	r3, [r3, #16]
 8014544:	9400      	str	r4, [sp, #0]
 8014546:	f8ad 2006 	strh.w	r2, [sp, #6]
 801454a:	4798      	blx	r3
 801454c:	b002      	add	sp, #8
 801454e:	bd10      	pop	{r4, pc}

08014550 <_ZN8touchgfx8Drawable20getSolidRectAbsoluteEv>:
 8014550:	b538      	push	{r3, r4, r5, lr}
 8014552:	680b      	ldr	r3, [r1, #0]
 8014554:	460c      	mov	r4, r1
 8014556:	4605      	mov	r5, r0
 8014558:	68db      	ldr	r3, [r3, #12]
 801455a:	4798      	blx	r3
 801455c:	6823      	ldr	r3, [r4, #0]
 801455e:	4620      	mov	r0, r4
 8014560:	4629      	mov	r1, r5
 8014562:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014564:	4798      	blx	r3
 8014566:	4628      	mov	r0, r5
 8014568:	bd38      	pop	{r3, r4, r5, pc}

0801456a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE>:
 801456a:	b410      	push	{r4}
 801456c:	880a      	ldrh	r2, [r1, #0]
 801456e:	8884      	ldrh	r4, [r0, #4]
 8014570:	4422      	add	r2, r4
 8014572:	800a      	strh	r2, [r1, #0]
 8014574:	884a      	ldrh	r2, [r1, #2]
 8014576:	88c4      	ldrh	r4, [r0, #6]
 8014578:	4422      	add	r2, r4
 801457a:	804a      	strh	r2, [r1, #2]
 801457c:	6940      	ldr	r0, [r0, #20]
 801457e:	b120      	cbz	r0, 801458a <_ZNK8touchgfx8Drawable23translateRectToAbsoluteERNS_4RectE+0x20>
 8014580:	6803      	ldr	r3, [r0, #0]
 8014582:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014586:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014588:	4718      	bx	r3
 801458a:	f85d 4b04 	ldr.w	r4, [sp], #4
 801458e:	4770      	bx	lr

08014590 <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE>:
 8014590:	b570      	push	{r4, r5, r6, lr}
 8014592:	8882      	ldrh	r2, [r0, #4]
 8014594:	460c      	mov	r4, r1
 8014596:	880b      	ldrh	r3, [r1, #0]
 8014598:	4605      	mov	r5, r0
 801459a:	4413      	add	r3, r2
 801459c:	800b      	strh	r3, [r1, #0]
 801459e:	884b      	ldrh	r3, [r1, #2]
 80145a0:	88c2      	ldrh	r2, [r0, #6]
 80145a2:	4413      	add	r3, r2
 80145a4:	804b      	strh	r3, [r1, #2]
 80145a6:	1d01      	adds	r1, r0, #4
 80145a8:	4620      	mov	r0, r4
 80145aa:	f7fa fc8b 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80145ae:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	dd0b      	ble.n	80145ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80145b6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80145ba:	2b00      	cmp	r3, #0
 80145bc:	dd07      	ble.n	80145ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80145be:	6968      	ldr	r0, [r5, #20]
 80145c0:	b128      	cbz	r0, 80145ce <_ZNK8touchgfx8Drawable14getVisibleRectERNS_4RectE+0x3e>
 80145c2:	6803      	ldr	r3, [r0, #0]
 80145c4:	4621      	mov	r1, r4
 80145c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80145cc:	4718      	bx	r3
 80145ce:	bd70      	pop	{r4, r5, r6, pc}

080145d0 <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE>:
 80145d0:	b570      	push	{r4, r5, r6, lr}
 80145d2:	8882      	ldrh	r2, [r0, #4]
 80145d4:	460c      	mov	r4, r1
 80145d6:	880b      	ldrh	r3, [r1, #0]
 80145d8:	4605      	mov	r5, r0
 80145da:	4413      	add	r3, r2
 80145dc:	800b      	strh	r3, [r1, #0]
 80145de:	884b      	ldrh	r3, [r1, #2]
 80145e0:	88c2      	ldrh	r2, [r0, #6]
 80145e2:	4413      	add	r3, r2
 80145e4:	804b      	strh	r3, [r1, #2]
 80145e6:	1d01      	adds	r1, r0, #4
 80145e8:	4620      	mov	r0, r4
 80145ea:	f7fa fc6b 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80145ee:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 80145f2:	2b00      	cmp	r3, #0
 80145f4:	dd19      	ble.n	801462a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80145f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80145fa:	2b00      	cmp	r3, #0
 80145fc:	dd15      	ble.n	801462a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 80145fe:	6968      	ldr	r0, [r5, #20]
 8014600:	b128      	cbz	r0, 801460e <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x3e>
 8014602:	6803      	ldr	r3, [r0, #0]
 8014604:	4621      	mov	r1, r4
 8014606:	691b      	ldr	r3, [r3, #16]
 8014608:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801460c:	4718      	bx	r3
 801460e:	4b07      	ldr	r3, [pc, #28]	@ (801462c <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5c>)
 8014610:	681b      	ldr	r3, [r3, #0]
 8014612:	3304      	adds	r3, #4
 8014614:	429d      	cmp	r5, r3
 8014616:	d108      	bne.n	801462a <_ZNK8touchgfx8Drawable14invalidateRectERNS_4RectE+0x5a>
 8014618:	f7fe ff10 	bl	801343c <_ZN8touchgfx11Application11getInstanceEv>
 801461c:	6803      	ldr	r3, [r0, #0]
 801461e:	6821      	ldr	r1, [r4, #0]
 8014620:	6862      	ldr	r2, [r4, #4]
 8014622:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014624:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014628:	4718      	bx	r3
 801462a:	bd70      	pop	{r4, r5, r6, pc}
 801462c:	240253ec 	.word	0x240253ec

08014630 <_ZN8touchgfx8Drawable12moveRelativeEss>:
 8014630:	b570      	push	{r4, r5, r6, lr}
 8014632:	4604      	mov	r4, r0
 8014634:	4616      	mov	r6, r2
 8014636:	460d      	mov	r5, r1
 8014638:	b901      	cbnz	r1, 801463c <_ZN8touchgfx8Drawable12moveRelativeEss+0xc>
 801463a:	b192      	cbz	r2, 8014662 <_ZN8touchgfx8Drawable12moveRelativeEss+0x32>
 801463c:	6823      	ldr	r3, [r4, #0]
 801463e:	4620      	mov	r0, r4
 8014640:	699b      	ldr	r3, [r3, #24]
 8014642:	4798      	blx	r3
 8014644:	88e2      	ldrh	r2, [r4, #6]
 8014646:	88a1      	ldrh	r1, [r4, #4]
 8014648:	4620      	mov	r0, r4
 801464a:	4432      	add	r2, r6
 801464c:	4429      	add	r1, r5
 801464e:	b212      	sxth	r2, r2
 8014650:	b209      	sxth	r1, r1
 8014652:	f7fa ff0d 	bl	800f470 <_ZN8touchgfx8Drawable5setXYEss>
 8014656:	6823      	ldr	r3, [r4, #0]
 8014658:	4620      	mov	r0, r4
 801465a:	699b      	ldr	r3, [r3, #24]
 801465c:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8014660:	4718      	bx	r3
 8014662:	bd70      	pop	{r4, r5, r6, pc}

08014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>:
 8014664:	b510      	push	{r4, lr}
 8014666:	2300      	movs	r3, #0
 8014668:	4604      	mov	r4, r0
 801466a:	4608      	mov	r0, r1
 801466c:	f9b1 1008 	ldrsh.w	r1, [r1, #8]
 8014670:	8023      	strh	r3, [r4, #0]
 8014672:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 8014676:	8063      	strh	r3, [r4, #2]
 8014678:	6803      	ldr	r3, [r0, #0]
 801467a:	80a1      	strh	r1, [r4, #4]
 801467c:	4621      	mov	r1, r4
 801467e:	80e2      	strh	r2, [r4, #6]
 8014680:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014682:	4798      	blx	r3
 8014684:	4620      	mov	r0, r4
 8014686:	bd10      	pop	{r4, pc}

08014688 <_ZN8touchgfx22VectorFontRendererImplD1Ev>:
 8014688:	4770      	bx	lr

0801468a <_ZN8touchgfx22VectorFontRendererImplD0Ev>:
 801468a:	b510      	push	{r4, lr}
 801468c:	4604      	mov	r4, r0
 801468e:	211c      	movs	r1, #28
 8014690:	f00c fcc9 	bl	8021026 <_ZdlPvj>
 8014694:	4620      	mov	r0, r4
 8014696:	bd10      	pop	{r4, pc}

08014698 <_ZN8touchgfx22VectorFontRendererImplC1Ev>:
 8014698:	4a04      	ldr	r2, [pc, #16]	@ (80146ac <_ZN8touchgfx22VectorFontRendererImplC1Ev+0x14>)
 801469a:	6002      	str	r2, [r0, #0]
 801469c:	2200      	movs	r2, #0
 801469e:	e9c0 2201 	strd	r2, r2, [r0, #4]
 80146a2:	e9c0 2203 	strd	r2, r2, [r0, #12]
 80146a6:	e9c0 2205 	strd	r2, r2, [r0, #20]
 80146aa:	4770      	bx	lr
 80146ac:	080253a8 	.word	0x080253a8

080146b0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>:
 80146b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80146b4:	4604      	mov	r4, r0
 80146b6:	b087      	sub	sp, #28
 80146b8:	4696      	mov	lr, r2
 80146ba:	6880      	ldr	r0, [r0, #8]
 80146bc:	8b22      	ldrh	r2, [r4, #24]
 80146be:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 80146c2:	9105      	str	r1, [sp, #20]
 80146c4:	1c51      	adds	r1, r2, #1
 80146c6:	8321      	strh	r1, [r4, #24]
 80146c8:	2101      	movs	r1, #1
 80146ca:	5481      	strb	r1, [r0, r2]
 80146cc:	4689      	mov	r9, r1
 80146ce:	f9b3 2000 	ldrsh.w	r2, [r3]
 80146d2:	8b60      	ldrh	r0, [r4, #26]
 80146d4:	ee06 2a90 	vmov	s13, r2
 80146d8:	68e2      	ldr	r2, [r4, #12]
 80146da:	1845      	adds	r5, r0, r1
 80146dc:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 80146e0:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80146e4:	8365      	strh	r5, [r4, #26]
 80146e6:	edc2 6a00 	vstr	s13, [r2]
 80146ea:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80146ee:	8b60      	ldrh	r0, [r4, #26]
 80146f0:	ee07 2a10 	vmov	s14, r2
 80146f4:	68e2      	ldr	r2, [r4, #12]
 80146f6:	1845      	adds	r5, r0, r1
 80146f8:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80146fc:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8014700:	8365      	strh	r5, [r4, #26]
 8014702:	1d18      	adds	r0, r3, #4
 8014704:	460d      	mov	r5, r1
 8014706:	ed82 7a00 	vstr	s14, [r2]
 801470a:	f8be 2000 	ldrh.w	r2, [lr]
 801470e:	9203      	str	r2, [sp, #12]
 8014710:	2200      	movs	r2, #0
 8014712:	4613      	mov	r3, r2
 8014714:	4694      	mov	ip, r2
 8014716:	9201      	str	r2, [sp, #4]
 8014718:	9202      	str	r2, [sp, #8]
 801471a:	f8b4 8018 	ldrh.w	r8, [r4, #24]
 801471e:	9e05      	ldr	r6, [sp, #20]
 8014720:	f108 0701 	add.w	r7, r8, #1
 8014724:	f8d4 a008 	ldr.w	sl, [r4, #8]
 8014728:	428e      	cmp	r6, r1
 801472a:	b2bf      	uxth	r7, r7
 801472c:	eb0a 0b08 	add.w	fp, sl, r8
 8014730:	f340 80b6 	ble.w	80148a0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1f0>
 8014734:	9b03      	ldr	r3, [sp, #12]
 8014736:	f9b0 c000 	ldrsh.w	ip, [r0]
 801473a:	fa43 fb05 	asr.w	fp, r3, r5
 801473e:	f00b 0b01 	and.w	fp, fp, #1
 8014742:	fa5f f38b 	uxtb.w	r3, fp
 8014746:	9304      	str	r3, [sp, #16]
 8014748:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 801474c:	f1bb 0f00 	cmp.w	fp, #0
 8014750:	d057      	beq.n	8014802 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x152>
 8014752:	ee07 ca90 	vmov	s15, ip
 8014756:	8327      	strh	r7, [r4, #24]
 8014758:	eef8 5ae7 	vcvt.f32.s32	s11, s15
 801475c:	ee07 3a90 	vmov	s15, r3
 8014760:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014764:	f1b9 0f00 	cmp.w	r9, #0
 8014768:	d028      	beq.n	80147bc <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x10c>
 801476a:	f04f 0602 	mov.w	r6, #2
 801476e:	f80a 6008 	strb.w	r6, [sl, r8]
 8014772:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 8014776:	68e7      	ldr	r7, [r4, #12]
 8014778:	f108 0901 	add.w	r9, r8, #1
 801477c:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014780:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014784:	edc7 5a00 	vstr	s11, [r7]
 8014788:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801478c:	68e7      	ldr	r7, [r4, #12]
 801478e:	f108 0901 	add.w	r9, r8, #1
 8014792:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 8014796:	f8a4 901a 	strh.w	r9, [r4, #26]
 801479a:	edc7 7a00 	vstr	s15, [r7]
 801479e:	3501      	adds	r5, #1
 80147a0:	2d10      	cmp	r5, #16
 80147a2:	d106      	bne.n	80147b2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x102>
 80147a4:	9d02      	ldr	r5, [sp, #8]
 80147a6:	3501      	adds	r5, #1
 80147a8:	9502      	str	r5, [sp, #8]
 80147aa:	f83e 5015 	ldrh.w	r5, [lr, r5, lsl #1]
 80147ae:	9503      	str	r5, [sp, #12]
 80147b0:	2500      	movs	r5, #0
 80147b2:	3101      	adds	r1, #1
 80147b4:	3004      	adds	r0, #4
 80147b6:	f8dd 9010 	ldr.w	r9, [sp, #16]
 80147ba:	e7ae      	b.n	801471a <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x6a>
 80147bc:	f04f 0605 	mov.w	r6, #5
 80147c0:	ed9d 5a01 	vldr	s10, [sp, #4]
 80147c4:	f80a 6008 	strb.w	r6, [sl, r8]
 80147c8:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80147cc:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80147d0:	68e7      	ldr	r7, [r4, #12]
 80147d2:	f108 0901 	add.w	r9, r8, #1
 80147d6:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80147da:	f8a4 901a 	strh.w	r9, [r4, #26]
 80147de:	ed87 5a00 	vstr	s10, [r7]
 80147e2:	ee05 2a10 	vmov	s10, r2
 80147e6:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 80147ea:	68e7      	ldr	r7, [r4, #12]
 80147ec:	eeb8 5ac5 	vcvt.f32.s32	s10, s10
 80147f0:	f108 0901 	add.w	r9, r8, #1
 80147f4:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 80147f8:	f8a4 901a 	strh.w	r9, [r4, #26]
 80147fc:	ed87 5a00 	vstr	s10, [r7]
 8014800:	e7b7      	b.n	8014772 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xc2>
 8014802:	f1b9 0f00 	cmp.w	r9, #0
 8014806:	d147      	bne.n	8014898 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x1e8>
 8014808:	f04f 0605 	mov.w	r6, #5
 801480c:	eddd 7a01 	vldr	s15, [sp, #4]
 8014810:	8327      	strh	r7, [r4, #24]
 8014812:	f80a 6008 	strb.w	r6, [sl, r8]
 8014816:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801481a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801481e:	68e7      	ldr	r7, [r4, #12]
 8014820:	f108 0901 	add.w	r9, r8, #1
 8014824:	9e01      	ldr	r6, [sp, #4]
 8014826:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801482a:	f8a4 901a 	strh.w	r9, [r4, #26]
 801482e:	4466      	add	r6, ip
 8014830:	edc7 7a00 	vstr	s15, [r7]
 8014834:	ee07 2a90 	vmov	s15, r2
 8014838:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801483c:	441a      	add	r2, r3
 801483e:	68e7      	ldr	r7, [r4, #12]
 8014840:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014844:	f108 0901 	add.w	r9, r8, #1
 8014848:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801484c:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014850:	edc7 7a00 	vstr	s15, [r7]
 8014854:	ee07 6a90 	vmov	s15, r6
 8014858:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801485c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014860:	68e7      	ldr	r7, [r4, #12]
 8014862:	f108 0901 	add.w	r9, r8, #1
 8014866:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801486a:	ee67 7a86 	vmul.f32	s15, s15, s12
 801486e:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014872:	edc7 7a00 	vstr	s15, [r7]
 8014876:	ee07 2a90 	vmov	s15, r2
 801487a:	f8b4 801a 	ldrh.w	r8, [r4, #26]
 801487e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014882:	68e7      	ldr	r7, [r4, #12]
 8014884:	f108 0901 	add.w	r9, r8, #1
 8014888:	eb07 0788 	add.w	r7, r7, r8, lsl #2
 801488c:	ee67 7a86 	vmul.f32	s15, s15, s12
 8014890:	f8a4 901a 	strh.w	r9, [r4, #26]
 8014894:	edc7 7a00 	vstr	s15, [r7]
 8014898:	461a      	mov	r2, r3
 801489a:	f8cd c004 	str.w	ip, [sp, #4]
 801489e:	e77e      	b.n	801479e <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0xee>
 80148a0:	f1b9 0f00 	cmp.w	r9, #0
 80148a4:	d028      	beq.n	80148f8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 80148a6:	ee07 ca90 	vmov	s15, ip
 80148aa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148ae:	eef4 6a67 	vcmp.f32	s13, s15
 80148b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148b6:	d108      	bne.n	80148ca <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x21a>
 80148b8:	ee07 3a90 	vmov	s15, r3
 80148bc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80148c0:	eeb4 7a67 	vcmp.f32	s14, s15
 80148c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80148c8:	d016      	beq.n	80148f8 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x248>
 80148ca:	2302      	movs	r3, #2
 80148cc:	8327      	strh	r7, [r4, #24]
 80148ce:	f88b 3000 	strb.w	r3, [fp]
 80148d2:	8b62      	ldrh	r2, [r4, #26]
 80148d4:	68e3      	ldr	r3, [r4, #12]
 80148d6:	1c51      	adds	r1, r2, #1
 80148d8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80148dc:	8361      	strh	r1, [r4, #26]
 80148de:	edc3 6a00 	vstr	s13, [r3]
 80148e2:	8b62      	ldrh	r2, [r4, #26]
 80148e4:	68e3      	ldr	r3, [r4, #12]
 80148e6:	1c51      	adds	r1, r2, #1
 80148e8:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80148ec:	8361      	strh	r1, [r4, #26]
 80148ee:	ed83 7a00 	vstr	s14, [r3]
 80148f2:	b007      	add	sp, #28
 80148f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80148f8:	2305      	movs	r3, #5
 80148fa:	eddd 7a01 	vldr	s15, [sp, #4]
 80148fe:	8327      	strh	r7, [r4, #24]
 8014900:	f88b 3000 	strb.w	r3, [fp]
 8014904:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014908:	8b61      	ldrh	r1, [r4, #26]
 801490a:	68e3      	ldr	r3, [r4, #12]
 801490c:	1c4d      	adds	r5, r1, #1
 801490e:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8014912:	8365      	strh	r5, [r4, #26]
 8014914:	edc3 7a00 	vstr	s15, [r3]
 8014918:	ee07 2a90 	vmov	s15, r2
 801491c:	8b61      	ldrh	r1, [r4, #26]
 801491e:	68e3      	ldr	r3, [r4, #12]
 8014920:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8014924:	1c4d      	adds	r5, r1, #1
 8014926:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 801492a:	8365      	strh	r5, [r4, #26]
 801492c:	edc3 7a00 	vstr	s15, [r3]
 8014930:	e7cf      	b.n	80148d2 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs+0x222>
	...

08014934 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii>:
 8014934:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014938:	4604      	mov	r4, r0
 801493a:	b08e      	sub	sp, #56	@ 0x38
 801493c:	4699      	mov	r9, r3
 801493e:	4688      	mov	r8, r1
 8014940:	4615      	mov	r5, r2
 8014942:	9e16      	ldr	r6, [sp, #88]	@ 0x58
 8014944:	f89d a064 	ldrb.w	sl, [sp, #100]	@ 0x64
 8014948:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801494a:	f7ef f925 	bl	8003b98 <_ZN8touchgfx14VectorRenderer11getInstanceEv>
 801494e:	6060      	str	r0, [r4, #4]
 8014950:	f1b9 0f00 	cmp.w	r9, #0
 8014954:	f000 80e8 	beq.w	8014b28 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 8014958:	2800      	cmp	r0, #0
 801495a:	f000 80e5 	beq.w	8014b28 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1f4>
 801495e:	a805      	add	r0, sp, #20
 8014960:	f000 f8f9 	bl	8014b56 <_ZN8touchgfx9Matrix3x3C1Ev>
 8014964:	6833      	ldr	r3, [r6, #0]
 8014966:	4630      	mov	r0, r6
 8014968:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801496a:	4798      	blx	r3
 801496c:	a805      	add	r0, sp, #20
 801496e:	eef0 0a40 	vmov.f32	s1, s0
 8014972:	f000 f8f4 	bl	8014b5e <_ZN8touchgfx9Matrix3x35scaleEff>
 8014976:	6860      	ldr	r0, [r4, #4]
 8014978:	f1ba 0f03 	cmp.w	sl, #3
 801497c:	d83b      	bhi.n	80149f6 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xc2>
 801497e:	e8df f00a 	tbb	[pc, sl]
 8014982:	1002      	.short	0x1002
 8014984:	9f71      	.short	0x9f71
 8014986:	6803      	ldr	r3, [r0, #0]
 8014988:	462a      	mov	r2, r5
 801498a:	4641      	mov	r1, r8
 801498c:	689b      	ldr	r3, [r3, #8]
 801498e:	4798      	blx	r3
 8014990:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014994:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8014998:	ee07 7a90 	vmov	s15, r7
 801499c:	eeb8 0ae7 	vcvt.f32.s32	s0, s15
 80149a0:	e026      	b.n	80149f0 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xbc>
 80149a2:	f9b5 2006 	ldrsh.w	r2, [r5, #6]
 80149a6:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 80149aa:	8869      	ldrh	r1, [r5, #2]
 80149ac:	1a9b      	subs	r3, r3, r2
 80149ae:	f8ad 2010 	strh.w	r2, [sp, #16]
 80149b2:	aa03      	add	r2, sp, #12
 80149b4:	1a5b      	subs	r3, r3, r1
 80149b6:	4641      	mov	r1, r8
 80149b8:	f8ad 300c 	strh.w	r3, [sp, #12]
 80149bc:	882b      	ldrh	r3, [r5, #0]
 80149be:	f8ad 300e 	strh.w	r3, [sp, #14]
 80149c2:	88ab      	ldrh	r3, [r5, #4]
 80149c4:	f8ad 3012 	strh.w	r3, [sp, #18]
 80149c8:	6803      	ldr	r3, [r0, #0]
 80149ca:	689b      	ldr	r3, [r3, #8]
 80149cc:	4798      	blx	r3
 80149ce:	ed9f 0a58 	vldr	s0, [pc, #352]	@ 8014b30 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1fc>
 80149d2:	a805      	add	r0, sp, #20
 80149d4:	f000 f8e8 	bl	8014ba8 <_ZN8touchgfx9Matrix3x36rotateEf>
 80149d8:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 80149dc:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80149de:	ee07 7a90 	vmov	s15, r7
 80149e2:	1a9b      	subs	r3, r3, r2
 80149e4:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 80149e8:	ee00 3a10 	vmov	s0, r3
 80149ec:	eeb8 0ac0 	vcvt.f32.s32	s0, s0
 80149f0:	a805      	add	r0, sp, #20
 80149f2:	f000 f927 	bl	8014c44 <_ZN8touchgfx9Matrix3x39translateEff>
 80149f6:	6860      	ldr	r0, [r4, #4]
 80149f8:	a905      	add	r1, sp, #20
 80149fa:	2500      	movs	r5, #0
 80149fc:	f109 0602 	add.w	r6, r9, #2
 8014a00:	6803      	ldr	r3, [r0, #0]
 8014a02:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014a04:	4798      	blx	r3
 8014a06:	6860      	ldr	r0, [r4, #4]
 8014a08:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 8014a0a:	6803      	ldr	r3, [r0, #0]
 8014a0c:	f041 417f 	orr.w	r1, r1, #4278190080	@ 0xff000000
 8014a10:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014a12:	4798      	blx	r3
 8014a14:	6860      	ldr	r0, [r4, #4]
 8014a16:	f89d 1060 	ldrb.w	r1, [sp, #96]	@ 0x60
 8014a1a:	6803      	ldr	r3, [r0, #0]
 8014a1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014a1e:	4798      	blx	r3
 8014a20:	6860      	ldr	r0, [r4, #4]
 8014a22:	2101      	movs	r1, #1
 8014a24:	6803      	ldr	r3, [r0, #0]
 8014a26:	68db      	ldr	r3, [r3, #12]
 8014a28:	4798      	blx	r3
 8014a2a:	f8b9 7000 	ldrh.w	r7, [r9]
 8014a2e:	f104 0310 	add.w	r3, r4, #16
 8014a32:	61a5      	str	r5, [r4, #24]
 8014a34:	f104 0208 	add.w	r2, r4, #8
 8014a38:	f104 0114 	add.w	r1, r4, #20
 8014a3c:	f104 000c 	add.w	r0, r4, #12
 8014a40:	f7ef fd14 	bl	800446c <_ZN8touchgfx22VectorFontRendererImpl20getVectorFontBuffersERPfRiRPhS3_>
 8014a44:	42af      	cmp	r7, r5
 8014a46:	dd60      	ble.n	8014b0a <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x1d6>
 8014a48:	8831      	ldrh	r1, [r6, #0]
 8014a4a:	1cb2      	adds	r2, r6, #2
 8014a4c:	4620      	mov	r0, r4
 8014a4e:	3501      	adds	r5, #1
 8014a50:	f101 030f 	add.w	r3, r1, #15
 8014a54:	f3c3 1307 	ubfx	r3, r3, #4, #8
 8014a58:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8014a5c:	f7ff fe28 	bl	80146b0 <_ZN8touchgfx22VectorFontRendererImpl11drawContourEtPKtPKs>
 8014a60:	4606      	mov	r6, r0
 8014a62:	e7ef      	b.n	8014a44 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x110>
 8014a64:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014a68:	f8b8 3004 	ldrh.w	r3, [r8, #4]
 8014a6c:	8829      	ldrh	r1, [r5, #0]
 8014a6e:	1a9b      	subs	r3, r3, r2
 8014a70:	f8ad 2010 	strh.w	r2, [sp, #16]
 8014a74:	aa03      	add	r2, sp, #12
 8014a76:	1a5b      	subs	r3, r3, r1
 8014a78:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014a7c:	886d      	ldrh	r5, [r5, #2]
 8014a7e:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014a82:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014a86:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014a8a:	1a5b      	subs	r3, r3, r1
 8014a8c:	4641      	mov	r1, r8
 8014a8e:	1b5b      	subs	r3, r3, r5
 8014a90:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014a94:	6803      	ldr	r3, [r0, #0]
 8014a96:	689b      	ldr	r3, [r3, #8]
 8014a98:	4798      	blx	r3
 8014a9a:	ed9f 0a26 	vldr	s0, [pc, #152]	@ 8014b34 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x200>
 8014a9e:	a805      	add	r0, sp, #20
 8014aa0:	f000 f882 	bl	8014ba8 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014aa4:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014aa8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8014aaa:	1a9b      	subs	r3, r3, r2
 8014aac:	ee00 3a90 	vmov	s1, r3
 8014ab0:	f9b8 3004 	ldrsh.w	r3, [r8, #4]
 8014ab4:	1bdb      	subs	r3, r3, r7
 8014ab6:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014aba:	ee00 3a10 	vmov	s0, r3
 8014abe:	e795      	b.n	80149ec <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0xb8>
 8014ac0:	886b      	ldrh	r3, [r5, #2]
 8014ac2:	f9b5 2004 	ldrsh.w	r2, [r5, #4]
 8014ac6:	f8ad 300c 	strh.w	r3, [sp, #12]
 8014aca:	f8b8 3006 	ldrh.w	r3, [r8, #6]
 8014ace:	8829      	ldrh	r1, [r5, #0]
 8014ad0:	1a9b      	subs	r3, r3, r2
 8014ad2:	f8ad 2012 	strh.w	r2, [sp, #18]
 8014ad6:	aa03      	add	r2, sp, #12
 8014ad8:	1a5b      	subs	r3, r3, r1
 8014ada:	4641      	mov	r1, r8
 8014adc:	f8ad 300e 	strh.w	r3, [sp, #14]
 8014ae0:	88eb      	ldrh	r3, [r5, #6]
 8014ae2:	f8ad 3010 	strh.w	r3, [sp, #16]
 8014ae6:	6803      	ldr	r3, [r0, #0]
 8014ae8:	689b      	ldr	r3, [r3, #8]
 8014aea:	4798      	blx	r3
 8014aec:	ed9f 0a12 	vldr	s0, [pc, #72]	@ 8014b38 <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x204>
 8014af0:	a805      	add	r0, sp, #20
 8014af2:	f000 f859 	bl	8014ba8 <_ZN8touchgfx9Matrix3x36rotateEf>
 8014af6:	f9b8 3006 	ldrsh.w	r3, [r8, #6]
 8014afa:	eddd 7a1b 	vldr	s15, [sp, #108]	@ 0x6c
 8014afe:	1bdb      	subs	r3, r3, r7
 8014b00:	ee00 3a90 	vmov	s1, r3
 8014b04:	eef8 0ae0 	vcvt.f32.s32	s1, s1
 8014b08:	e748      	b.n	801499c <_ZN8touchgfx22VectorFontRendererImpl9drawGlyphERKNS_4RectES3_PKtPKNS_4FontENS_9colortypeEhNS_12TextRotationEii+0x68>
 8014b0a:	6860      	ldr	r0, [r4, #4]
 8014b0c:	2100      	movs	r1, #0
 8014b0e:	8b22      	ldrh	r2, [r4, #24]
 8014b10:	6803      	ldr	r3, [r0, #0]
 8014b12:	9101      	str	r1, [sp, #4]
 8014b14:	8b61      	ldrh	r1, [r4, #26]
 8014b16:	9100      	str	r1, [sp, #0]
 8014b18:	6a1d      	ldr	r5, [r3, #32]
 8014b1a:	e9d4 1302 	ldrd	r1, r3, [r4, #8]
 8014b1e:	47a8      	blx	r5
 8014b20:	6860      	ldr	r0, [r4, #4]
 8014b22:	6803      	ldr	r3, [r0, #0]
 8014b24:	69db      	ldr	r3, [r3, #28]
 8014b26:	4798      	blx	r3
 8014b28:	b00e      	add	sp, #56	@ 0x38
 8014b2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014b2e:	bf00      	nop
 8014b30:	42b40000 	.word	0x42b40000
 8014b34:	43340000 	.word	0x43340000
 8014b38:	43870000 	.word	0x43870000

08014b3c <_ZN8touchgfx9Matrix3x35resetEv>:
 8014b3c:	2300      	movs	r3, #0
 8014b3e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8014b42:	6043      	str	r3, [r0, #4]
 8014b44:	6002      	str	r2, [r0, #0]
 8014b46:	6083      	str	r3, [r0, #8]
 8014b48:	60c3      	str	r3, [r0, #12]
 8014b4a:	6102      	str	r2, [r0, #16]
 8014b4c:	6143      	str	r3, [r0, #20]
 8014b4e:	6183      	str	r3, [r0, #24]
 8014b50:	61c3      	str	r3, [r0, #28]
 8014b52:	6202      	str	r2, [r0, #32]
 8014b54:	4770      	bx	lr

08014b56 <_ZN8touchgfx9Matrix3x3C1Ev>:
 8014b56:	b508      	push	{r3, lr}
 8014b58:	f7ff fff0 	bl	8014b3c <_ZN8touchgfx9Matrix3x35resetEv>
 8014b5c:	bd08      	pop	{r3, pc}

08014b5e <_ZN8touchgfx9Matrix3x35scaleEff>:
 8014b5e:	edd0 7a00 	vldr	s15, [r0]
 8014b62:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b66:	edc0 7a00 	vstr	s15, [r0]
 8014b6a:	edd0 7a01 	vldr	s15, [r0, #4]
 8014b6e:	ee67 7a80 	vmul.f32	s15, s15, s0
 8014b72:	edc0 7a01 	vstr	s15, [r0, #4]
 8014b76:	edd0 7a02 	vldr	s15, [r0, #8]
 8014b7a:	ee27 0a80 	vmul.f32	s0, s15, s0
 8014b7e:	edd0 7a03 	vldr	s15, [r0, #12]
 8014b82:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014b86:	ed80 0a02 	vstr	s0, [r0, #8]
 8014b8a:	edc0 7a03 	vstr	s15, [r0, #12]
 8014b8e:	edd0 7a04 	vldr	s15, [r0, #16]
 8014b92:	ee67 7aa0 	vmul.f32	s15, s15, s1
 8014b96:	edc0 7a04 	vstr	s15, [r0, #16]
 8014b9a:	edd0 7a05 	vldr	s15, [r0, #20]
 8014b9e:	ee67 0aa0 	vmul.f32	s1, s15, s1
 8014ba2:	edc0 0a05 	vstr	s1, [r0, #20]
 8014ba6:	4770      	bx	lr

08014ba8 <_ZN8touchgfx9Matrix3x36rotateEf>:
 8014ba8:	eddf 7a24 	vldr	s15, [pc, #144]	@ 8014c3c <_ZN8touchgfx9Matrix3x36rotateEf+0x94>
 8014bac:	ee20 0a27 	vmul.f32	s0, s0, s15
 8014bb0:	eddf 7a23 	vldr	s15, [pc, #140]	@ 8014c40 <_ZN8touchgfx9Matrix3x36rotateEf+0x98>
 8014bb4:	b510      	push	{r4, lr}
 8014bb6:	ed2d 8b02 	vpush	{d8}
 8014bba:	eec0 8a27 	vdiv.f32	s17, s0, s15
 8014bbe:	4604      	mov	r4, r0
 8014bc0:	eeb0 0a68 	vmov.f32	s0, s17
 8014bc4:	f00c fb68 	bl	8021298 <cosf>
 8014bc8:	eeb0 8a40 	vmov.f32	s16, s0
 8014bcc:	eeb0 0a68 	vmov.f32	s0, s17
 8014bd0:	f00c fa9e 	bl	8021110 <sinf>
 8014bd4:	edd4 6a03 	vldr	s13, [r4, #12]
 8014bd8:	edd4 4a00 	vldr	s9, [r4]
 8014bdc:	ee60 7a66 	vnmul.f32	s15, s0, s13
 8014be0:	ed94 7a04 	vldr	s14, [r4, #16]
 8014be4:	ed94 5a01 	vldr	s10, [r4, #4]
 8014be8:	ee66 6a88 	vmul.f32	s13, s13, s16
 8014bec:	edd4 5a02 	vldr	s11, [r4, #8]
 8014bf0:	eee8 7a24 	vfma.f32	s15, s16, s9
 8014bf4:	eee0 6a24 	vfma.f32	s13, s0, s9
 8014bf8:	edc4 7a00 	vstr	s15, [r4]
 8014bfc:	ee60 7a47 	vnmul.f32	s15, s0, s14
 8014c00:	ee27 7a08 	vmul.f32	s14, s14, s16
 8014c04:	edc4 6a03 	vstr	s13, [r4, #12]
 8014c08:	eee8 7a05 	vfma.f32	s15, s16, s10
 8014c0c:	eea0 7a05 	vfma.f32	s14, s0, s10
 8014c10:	edc4 7a01 	vstr	s15, [r4, #4]
 8014c14:	edd4 7a05 	vldr	s15, [r4, #20]
 8014c18:	ed84 7a04 	vstr	s14, [r4, #16]
 8014c1c:	ee20 6a67 	vnmul.f32	s12, s0, s15
 8014c20:	ee67 7a88 	vmul.f32	s15, s15, s16
 8014c24:	eea8 6a25 	vfma.f32	s12, s16, s11
 8014c28:	eee0 7a25 	vfma.f32	s15, s0, s11
 8014c2c:	ecbd 8b02 	vpop	{d8}
 8014c30:	ed84 6a02 	vstr	s12, [r4, #8]
 8014c34:	edc4 7a05 	vstr	s15, [r4, #20]
 8014c38:	bd10      	pop	{r4, pc}
 8014c3a:	bf00      	nop
 8014c3c:	40490fdb 	.word	0x40490fdb
 8014c40:	43340000 	.word	0x43340000

08014c44 <_ZN8touchgfx9Matrix3x39translateEff>:
 8014c44:	ed90 6a06 	vldr	s12, [r0, #24]
 8014c48:	edd0 7a00 	vldr	s15, [r0]
 8014c4c:	edd0 6a07 	vldr	s13, [r0, #28]
 8014c50:	eee6 7a00 	vfma.f32	s15, s12, s0
 8014c54:	ed90 7a08 	vldr	s14, [r0, #32]
 8014c58:	edc0 7a00 	vstr	s15, [r0]
 8014c5c:	edd0 7a01 	vldr	s15, [r0, #4]
 8014c60:	eee6 7a80 	vfma.f32	s15, s13, s0
 8014c64:	edc0 7a01 	vstr	s15, [r0, #4]
 8014c68:	edd0 7a02 	vldr	s15, [r0, #8]
 8014c6c:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014c70:	edc0 7a02 	vstr	s15, [r0, #8]
 8014c74:	edd0 7a03 	vldr	s15, [r0, #12]
 8014c78:	eee6 7a20 	vfma.f32	s15, s12, s1
 8014c7c:	edc0 7a03 	vstr	s15, [r0, #12]
 8014c80:	edd0 7a04 	vldr	s15, [r0, #16]
 8014c84:	eee6 7aa0 	vfma.f32	s15, s13, s1
 8014c88:	edc0 7a04 	vstr	s15, [r0, #16]
 8014c8c:	edd0 7a05 	vldr	s15, [r0, #20]
 8014c90:	eee7 7a20 	vfma.f32	s15, s14, s1
 8014c94:	edc0 7a05 	vstr	s15, [r0, #20]
 8014c98:	4770      	bx	lr

08014c9a <_ZNK8touchgfx9Matrix3x315affineTransformEff>:
 8014c9a:	edd0 6a01 	vldr	s13, [r0, #4]
 8014c9e:	b084      	sub	sp, #16
 8014ca0:	edd0 7a04 	vldr	s15, [r0, #16]
 8014ca4:	ed90 7a03 	vldr	s14, [r0, #12]
 8014ca8:	ee60 7aa7 	vmul.f32	s15, s1, s15
 8014cac:	ee60 0aa6 	vmul.f32	s1, s1, s13
 8014cb0:	edd0 6a00 	vldr	s13, [r0]
 8014cb4:	eee7 7a00 	vfma.f32	s15, s14, s0
 8014cb8:	ed90 7a05 	vldr	s14, [r0, #20]
 8014cbc:	eee6 0a80 	vfma.f32	s1, s13, s0
 8014cc0:	ed90 0a02 	vldr	s0, [r0, #8]
 8014cc4:	ee30 0a80 	vadd.f32	s0, s1, s0
 8014cc8:	ee77 0a87 	vadd.f32	s1, s15, s14
 8014ccc:	b004      	add	sp, #16
 8014cce:	4770      	bx	lr

08014cd0 <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt>:
 8014cd0:	b530      	push	{r4, r5, lr}
 8014cd2:	8083      	strh	r3, [r0, #4]
 8014cd4:	f8bd 300c 	ldrh.w	r3, [sp, #12]
 8014cd8:	f89d 5018 	ldrb.w	r5, [sp, #24]
 8014cdc:	80c3      	strh	r3, [r0, #6]
 8014cde:	f89d 3010 	ldrb.w	r3, [sp, #16]
 8014ce2:	6141      	str	r1, [r0, #20]
 8014ce4:	7203      	strb	r3, [r0, #8]
 8014ce6:	f89d 3014 	ldrb.w	r3, [sp, #20]
 8014cea:	8302      	strh	r2, [r0, #24]
 8014cec:	7243      	strb	r3, [r0, #9]
 8014cee:	7a83      	ldrb	r3, [r0, #10]
 8014cf0:	f365 0306 	bfi	r3, r5, #0, #7
 8014cf4:	f89d 501c 	ldrb.w	r5, [sp, #28]
 8014cf8:	f365 13c7 	bfi	r3, r5, #7, #1
 8014cfc:	7283      	strb	r3, [r0, #10]
 8014cfe:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8014d02:	72c3      	strb	r3, [r0, #11]
 8014d04:	f89d 3024 	ldrb.w	r3, [sp, #36]	@ 0x24
 8014d08:	7303      	strb	r3, [r0, #12]
 8014d0a:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8014d0e:	81c3      	strh	r3, [r0, #14]
 8014d10:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 8014d14:	8203      	strh	r3, [r0, #16]
 8014d16:	4b01      	ldr	r3, [pc, #4]	@ (8014d1c <_ZN8touchgfx9ConstFontC1EPKNS_9GlyphNodeEttthhhhhhtt+0x4c>)
 8014d18:	6003      	str	r3, [r0, #0]
 8014d1a:	bd30      	pop	{r4, r5, pc}
 8014d1c:	080253bc 	.word	0x080253bc

08014d20 <_ZNK8touchgfx9ConstFont4findEt>:
 8014d20:	b5f0      	push	{r4, r5, r6, r7, lr}
 8014d22:	6944      	ldr	r4, [r0, #20]
 8014d24:	b3bc      	cbz	r4, 8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d26:	88a3      	ldrh	r3, [r4, #4]
 8014d28:	8b02      	ldrh	r2, [r0, #24]
 8014d2a:	1acb      	subs	r3, r1, r3
 8014d2c:	f102 32ff 	add.w	r2, r2, #4294967295
 8014d30:	d431      	bmi.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d32:	4293      	cmp	r3, r2
 8014d34:	dd0c      	ble.n	8014d50 <_ZNK8touchgfx9ConstFont4findEt+0x30>
 8014d36:	230e      	movs	r3, #14
 8014d38:	fb03 4302 	mla	r3, r3, r2, r4
 8014d3c:	889b      	ldrh	r3, [r3, #4]
 8014d3e:	1a5b      	subs	r3, r3, r1
 8014d40:	1ad3      	subs	r3, r2, r3
 8014d42:	429a      	cmp	r2, r3
 8014d44:	db27      	blt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d46:	2b00      	cmp	r3, #0
 8014d48:	bfbc      	itt	lt
 8014d4a:	2302      	movlt	r3, #2
 8014d4c:	fb92 f3f3 	sdivlt	r3, r2, r3
 8014d50:	2500      	movs	r5, #0
 8014d52:	260e      	movs	r6, #14
 8014d54:	4295      	cmp	r5, r2
 8014d56:	dc1e      	bgt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d58:	fb06 4003 	mla	r0, r6, r3, r4
 8014d5c:	8887      	ldrh	r7, [r0, #4]
 8014d5e:	42b9      	cmp	r1, r7
 8014d60:	d01a      	beq.n	8014d98 <_ZNK8touchgfx9ConstFont4findEt+0x78>
 8014d62:	d20d      	bcs.n	8014d80 <_ZNK8touchgfx9ConstFont4findEt+0x60>
 8014d64:	1e5a      	subs	r2, r3, #1
 8014d66:	4295      	cmp	r5, r2
 8014d68:	dc15      	bgt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d6a:	f830 3c0a 	ldrh.w	r3, [r0, #-10]
 8014d6e:	1a5b      	subs	r3, r3, r1
 8014d70:	1ad3      	subs	r3, r2, r3
 8014d72:	429a      	cmp	r2, r3
 8014d74:	db0f      	blt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d76:	429d      	cmp	r5, r3
 8014d78:	ddec      	ble.n	8014d54 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d7a:	1953      	adds	r3, r2, r5
 8014d7c:	105b      	asrs	r3, r3, #1
 8014d7e:	e7e9      	b.n	8014d54 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d80:	1c5d      	adds	r5, r3, #1
 8014d82:	42aa      	cmp	r2, r5
 8014d84:	db07      	blt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d86:	8a43      	ldrh	r3, [r0, #18]
 8014d88:	1acb      	subs	r3, r1, r3
 8014d8a:	442b      	add	r3, r5
 8014d8c:	429d      	cmp	r5, r3
 8014d8e:	dc02      	bgt.n	8014d96 <_ZNK8touchgfx9ConstFont4findEt+0x76>
 8014d90:	429a      	cmp	r2, r3
 8014d92:	dadf      	bge.n	8014d54 <_ZNK8touchgfx9ConstFont4findEt+0x34>
 8014d94:	e7f1      	b.n	8014d7a <_ZNK8touchgfx9ConstFont4findEt+0x5a>
 8014d96:	2000      	movs	r0, #0
 8014d98:	bdf0      	pop	{r4, r5, r6, r7, pc}

08014d9a <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh>:
 8014d9a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d9c:	4604      	mov	r4, r0
 8014d9e:	4617      	mov	r7, r2
 8014da0:	461e      	mov	r6, r3
 8014da2:	b911      	cbnz	r1, 8014daa <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x10>
 8014da4:	2500      	movs	r5, #0
 8014da6:	4628      	mov	r0, r5
 8014da8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014daa:	290a      	cmp	r1, #10
 8014dac:	d0fa      	beq.n	8014da4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014dae:	f64f 62ff 	movw	r2, #65279	@ 0xfeff
 8014db2:	4291      	cmp	r1, r2
 8014db4:	d0f6      	beq.n	8014da4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014db6:	f242 020b 	movw	r2, #8203	@ 0x200b
 8014dba:	4291      	cmp	r1, r2
 8014dbc:	d0f2      	beq.n	8014da4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014dbe:	f7ff ffaf 	bl	8014d20 <_ZNK8touchgfx9ConstFont4findEt>
 8014dc2:	4605      	mov	r5, r0
 8014dc4:	b950      	cbnz	r0, 8014ddc <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0x42>
 8014dc6:	6823      	ldr	r3, [r4, #0]
 8014dc8:	4620      	mov	r0, r4
 8014dca:	691b      	ldr	r3, [r3, #16]
 8014dcc:	4798      	blx	r3
 8014dce:	4601      	mov	r1, r0
 8014dd0:	4620      	mov	r0, r4
 8014dd2:	f7ff ffa5 	bl	8014d20 <_ZNK8touchgfx9ConstFont4findEt>
 8014dd6:	4605      	mov	r5, r0
 8014dd8:	2800      	cmp	r0, #0
 8014dda:	d0e3      	beq.n	8014da4 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xa>
 8014ddc:	6823      	ldr	r3, [r4, #0]
 8014dde:	4629      	mov	r1, r5
 8014de0:	4620      	mov	r0, r4
 8014de2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014de4:	4798      	blx	r3
 8014de6:	6038      	str	r0, [r7, #0]
 8014de8:	6823      	ldr	r3, [r4, #0]
 8014dea:	4620      	mov	r0, r4
 8014dec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014dee:	4798      	blx	r3
 8014df0:	7030      	strb	r0, [r6, #0]
 8014df2:	e7d8      	b.n	8014da6 <_ZNK8touchgfx9ConstFont8getGlyphEtRPKhRh+0xc>

08014df4 <_ZNK8touchgfx9DragEvent12getEventTypeEv>:
 8014df4:	2001      	movs	r0, #1
 8014df6:	4770      	bx	lr

08014df8 <_ZNK8touchgfx12GestureEvent12getEventTypeEv>:
 8014df8:	2002      	movs	r0, #2
 8014dfa:	4770      	bx	lr

08014dfc <_ZN8touchgfx6ScreenD1Ev>:
 8014dfc:	4770      	bx	lr

08014dfe <_ZN8touchgfx12GestureEventD1Ev>:
 8014dfe:	4770      	bx	lr

08014e00 <_ZN8touchgfx9DragEventD1Ev>:
 8014e00:	4770      	bx	lr

08014e02 <_ZN8touchgfx9DragEventD0Ev>:
 8014e02:	b510      	push	{r4, lr}
 8014e04:	4604      	mov	r4, r0
 8014e06:	2110      	movs	r1, #16
 8014e08:	f00c f90d 	bl	8021026 <_ZdlPvj>
 8014e0c:	4620      	mov	r0, r4
 8014e0e:	bd10      	pop	{r4, pc}

08014e10 <_ZN8touchgfx12GestureEventD0Ev>:
 8014e10:	b510      	push	{r4, lr}
 8014e12:	4604      	mov	r4, r0
 8014e14:	210c      	movs	r1, #12
 8014e16:	f00c f906 	bl	8021026 <_ZdlPvj>
 8014e1a:	4620      	mov	r0, r4
 8014e1c:	bd10      	pop	{r4, pc}

08014e1e <_ZN8touchgfx6ScreenD0Ev>:
 8014e1e:	b510      	push	{r4, lr}
 8014e20:	4604      	mov	r4, r0
 8014e22:	213c      	movs	r1, #60	@ 0x3c
 8014e24:	f00c f8ff 	bl	8021026 <_ZdlPvj>
 8014e28:	4620      	mov	r0, r4
 8014e2a:	bd10      	pop	{r4, pc}

08014e2c <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE>:
 8014e2c:	b530      	push	{r4, r5, lr}
 8014e2e:	460d      	mov	r5, r1
 8014e30:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8014e32:	b087      	sub	sp, #28
 8014e34:	4604      	mov	r4, r0
 8014e36:	b301      	cbz	r1, 8014e7a <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x4e>
 8014e38:	a801      	add	r0, sp, #4
 8014e3a:	f7ff fc13 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014e3e:	892a      	ldrh	r2, [r5, #8]
 8014e40:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8014e44:	7928      	ldrb	r0, [r5, #4]
 8014e46:	1ad2      	subs	r2, r2, r3
 8014e48:	8ea3      	ldrh	r3, [r4, #52]	@ 0x34
 8014e4a:	f9b5 1006 	ldrsh.w	r1, [r5, #6]
 8014e4e:	441a      	add	r2, r3
 8014e50:	896b      	ldrh	r3, [r5, #10]
 8014e52:	f8bd 5006 	ldrh.w	r5, [sp, #6]
 8014e56:	f88d 0010 	strb.w	r0, [sp, #16]
 8014e5a:	1b5b      	subs	r3, r3, r5
 8014e5c:	8ee5      	ldrh	r5, [r4, #54]	@ 0x36
 8014e5e:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014e60:	442b      	add	r3, r5
 8014e62:	4d07      	ldr	r5, [pc, #28]	@ (8014e80 <_ZN8touchgfx6Screen18handleGestureEventERKNS_12GestureEventE+0x54>)
 8014e64:	f8ad 1012 	strh.w	r1, [sp, #18]
 8014e68:	a903      	add	r1, sp, #12
 8014e6a:	9503      	str	r5, [sp, #12]
 8014e6c:	f8ad 2014 	strh.w	r2, [sp, #20]
 8014e70:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014e74:	6803      	ldr	r3, [r0, #0]
 8014e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014e78:	4798      	blx	r3
 8014e7a:	b007      	add	sp, #28
 8014e7c:	bd30      	pop	{r4, r5, pc}
 8014e7e:	bf00      	nop
 8014e80:	08025438 	.word	0x08025438

08014e84 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE>:
 8014e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014e88:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 8014e8a:	b08a      	sub	sp, #40	@ 0x28
 8014e8c:	4604      	mov	r4, r0
 8014e8e:	460d      	mov	r5, r1
 8014e90:	b113      	cbz	r3, 8014e98 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x14>
 8014e92:	790b      	ldrb	r3, [r1, #4]
 8014e94:	2b00      	cmp	r3, #0
 8014e96:	d044      	beq.n	8014f22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014e98:	f104 0804 	add.w	r8, r4, #4
 8014e9c:	a803      	add	r0, sp, #12
 8014e9e:	4641      	mov	r1, r8
 8014ea0:	f7ff fbe0 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014ea4:	792b      	ldrb	r3, [r5, #4]
 8014ea6:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8014eaa:	f9bd 600e 	ldrsh.w	r6, [sp, #14]
 8014eae:	b983      	cbnz	r3, 8014ed2 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x4e>
 8014eb0:	f104 0336 	add.w	r3, r4, #54	@ 0x36
 8014eb4:	892a      	ldrh	r2, [r5, #8]
 8014eb6:	88e9      	ldrh	r1, [r5, #6]
 8014eb8:	4640      	mov	r0, r8
 8014eba:	1b92      	subs	r2, r2, r6
 8014ebc:	9301      	str	r3, [sp, #4]
 8014ebe:	1bc9      	subs	r1, r1, r7
 8014ec0:	f104 0334 	add.w	r3, r4, #52	@ 0x34
 8014ec4:	b212      	sxth	r2, r2
 8014ec6:	9300      	str	r3, [sp, #0]
 8014ec8:	b209      	sxth	r1, r1
 8014eca:	f104 0330 	add.w	r3, r4, #48	@ 0x30
 8014ece:	f7f9 ff17 	bl	800ed00 <_ZN8touchgfx9Container16getLastChildNearEssPPNS_8DrawableEPsS4_>
 8014ed2:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8014ed4:	b329      	cbz	r1, 8014f22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014ed6:	a805      	add	r0, sp, #20
 8014ed8:	f7ff fbc4 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014edc:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 8014ee0:	792b      	ldrb	r3, [r5, #4]
 8014ee2:	a907      	add	r1, sp, #28
 8014ee4:	1abf      	subs	r7, r7, r2
 8014ee6:	88ea      	ldrh	r2, [r5, #6]
 8014ee8:	6b20      	ldr	r0, [r4, #48]	@ 0x30
 8014eea:	4417      	add	r7, r2
 8014eec:	8ea2      	ldrh	r2, [r4, #52]	@ 0x34
 8014eee:	f88d 3020 	strb.w	r3, [sp, #32]
 8014ef2:	4417      	add	r7, r2
 8014ef4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
 8014ef8:	1ab6      	subs	r6, r6, r2
 8014efa:	892a      	ldrh	r2, [r5, #8]
 8014efc:	f8ad 7022 	strh.w	r7, [sp, #34]	@ 0x22
 8014f00:	4416      	add	r6, r2
 8014f02:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8014f04:	4416      	add	r6, r2
 8014f06:	4a08      	ldr	r2, [pc, #32]	@ (8014f28 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0xa4>)
 8014f08:	f8ad 6024 	strh.w	r6, [sp, #36]	@ 0x24
 8014f0c:	2600      	movs	r6, #0
 8014f0e:	9207      	str	r2, [sp, #28]
 8014f10:	f8ad 6026 	strh.w	r6, [sp, #38]	@ 0x26
 8014f14:	6803      	ldr	r3, [r0, #0]
 8014f16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f18:	4798      	blx	r3
 8014f1a:	792b      	ldrb	r3, [r5, #4]
 8014f1c:	b10b      	cbz	r3, 8014f22 <_ZN8touchgfx6Screen16handleClickEventERKNS_10ClickEventE+0x9e>
 8014f1e:	e9c4 660c 	strd	r6, r6, [r4, #48]	@ 0x30
 8014f22:	b00a      	add	sp, #40	@ 0x28
 8014f24:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8014f28:	08025330 	.word	0x08025330

08014f2c <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE>:
 8014f2c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014f30:	460c      	mov	r4, r1
 8014f32:	6b01      	ldr	r1, [r0, #48]	@ 0x30
 8014f34:	b088      	sub	sp, #32
 8014f36:	4605      	mov	r5, r0
 8014f38:	2900      	cmp	r1, #0
 8014f3a:	d06d      	beq.n	8015018 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xec>
 8014f3c:	4668      	mov	r0, sp
 8014f3e:	f7ff fb91 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014f42:	8ea9      	ldrh	r1, [r5, #52]	@ 0x34
 8014f44:	88e3      	ldrh	r3, [r4, #6]
 8014f46:	f9bd 8000 	ldrsh.w	r8, [sp]
 8014f4a:	440b      	add	r3, r1
 8014f4c:	f9bd 7002 	ldrsh.w	r7, [sp, #2]
 8014f50:	b21b      	sxth	r3, r3
 8014f52:	4543      	cmp	r3, r8
 8014f54:	db31      	blt.n	8014fba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014f56:	f8bd c004 	ldrh.w	ip, [sp, #4]
 8014f5a:	44c4      	add	ip, r8
 8014f5c:	fa0f fc8c 	sxth.w	ip, ip
 8014f60:	4563      	cmp	r3, ip
 8014f62:	da2a      	bge.n	8014fba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014f64:	8eea      	ldrh	r2, [r5, #54]	@ 0x36
 8014f66:	8926      	ldrh	r6, [r4, #8]
 8014f68:	4416      	add	r6, r2
 8014f6a:	b236      	sxth	r6, r6
 8014f6c:	42be      	cmp	r6, r7
 8014f6e:	db24      	blt.n	8014fba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014f70:	f8bd 0006 	ldrh.w	r0, [sp, #6]
 8014f74:	4438      	add	r0, r7
 8014f76:	b200      	sxth	r0, r0
 8014f78:	4286      	cmp	r6, r0
 8014f7a:	da1e      	bge.n	8014fba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014f7c:	8963      	ldrh	r3, [r4, #10]
 8014f7e:	4419      	add	r1, r3
 8014f80:	b209      	sxth	r1, r1
 8014f82:	4541      	cmp	r1, r8
 8014f84:	db08      	blt.n	8014f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014f86:	4561      	cmp	r1, ip
 8014f88:	da06      	bge.n	8014f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014f8a:	89a3      	ldrh	r3, [r4, #12]
 8014f8c:	441a      	add	r2, r3
 8014f8e:	b212      	sxth	r2, r2
 8014f90:	42ba      	cmp	r2, r7
 8014f92:	db01      	blt.n	8014f98 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x6c>
 8014f94:	4282      	cmp	r2, r0
 8014f96:	db10      	blt.n	8014fba <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0x8e>
 8014f98:	4b21      	ldr	r3, [pc, #132]	@ (8015020 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf4>)
 8014f9a:	a904      	add	r1, sp, #16
 8014f9c:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014f9e:	9304      	str	r3, [sp, #16]
 8014fa0:	2302      	movs	r3, #2
 8014fa2:	f88d 3014 	strb.w	r3, [sp, #20]
 8014fa6:	2300      	movs	r3, #0
 8014fa8:	f8ad 3016 	strh.w	r3, [sp, #22]
 8014fac:	f8ad 3018 	strh.w	r3, [sp, #24]
 8014fb0:	f8ad 301a 	strh.w	r3, [sp, #26]
 8014fb4:	6803      	ldr	r3, [r0, #0]
 8014fb6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014fb8:	4798      	blx	r3
 8014fba:	1d29      	adds	r1, r5, #4
 8014fbc:	a802      	add	r0, sp, #8
 8014fbe:	f7ff fb51 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8014fc2:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8014fc6:	88e0      	ldrh	r0, [r4, #6]
 8014fc8:	eba3 0808 	sub.w	r8, r3, r8
 8014fcc:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 8014fd0:	7921      	ldrb	r1, [r4, #4]
 8014fd2:	fa1f f888 	uxth.w	r8, r8
 8014fd6:	1bdf      	subs	r7, r3, r7
 8014fd8:	f8b5 c034 	ldrh.w	ip, [r5, #52]	@ 0x34
 8014fdc:	b2bb      	uxth	r3, r7
 8014fde:	4440      	add	r0, r8
 8014fe0:	8922      	ldrh	r2, [r4, #8]
 8014fe2:	8967      	ldrh	r7, [r4, #10]
 8014fe4:	4460      	add	r0, ip
 8014fe6:	89a4      	ldrh	r4, [r4, #12]
 8014fe8:	441a      	add	r2, r3
 8014fea:	8eee      	ldrh	r6, [r5, #54]	@ 0x36
 8014fec:	44b8      	add	r8, r7
 8014fee:	4423      	add	r3, r4
 8014ff0:	f8ad 0016 	strh.w	r0, [sp, #22]
 8014ff4:	4432      	add	r2, r6
 8014ff6:	44e0      	add	r8, ip
 8014ff8:	4433      	add	r3, r6
 8014ffa:	4c0a      	ldr	r4, [pc, #40]	@ (8015024 <_ZN8touchgfx6Screen15handleDragEventERKNS_9DragEventE+0xf8>)
 8014ffc:	6b28      	ldr	r0, [r5, #48]	@ 0x30
 8014ffe:	f88d 1014 	strb.w	r1, [sp, #20]
 8015002:	a904      	add	r1, sp, #16
 8015004:	9404      	str	r4, [sp, #16]
 8015006:	f8ad 2018 	strh.w	r2, [sp, #24]
 801500a:	f8ad 801a 	strh.w	r8, [sp, #26]
 801500e:	f8ad 301c 	strh.w	r3, [sp, #28]
 8015012:	6803      	ldr	r3, [r0, #0]
 8015014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015016:	4798      	blx	r3
 8015018:	b008      	add	sp, #32
 801501a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801501e:	bf00      	nop
 8015020:	08025330 	.word	0x08025330
 8015024:	08025424 	.word	0x08025424

08015028 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>:
 8015028:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801502a:	4604      	mov	r4, r0
 801502c:	f934 2f0c 	ldrsh.w	r2, [r4, #12]!
 8015030:	3201      	adds	r2, #1
 8015032:	d112      	bne.n	801505a <_ZN8touchgfx8Drawable20getCachedVisibleRectEv+0x32>
 8015034:	2500      	movs	r5, #0
 8015036:	f9b0 1008 	ldrsh.w	r1, [r0, #8]
 801503a:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 801503e:	6803      	ldr	r3, [r0, #0]
 8015040:	9500      	str	r5, [sp, #0]
 8015042:	466d      	mov	r5, sp
 8015044:	f8ad 1004 	strh.w	r1, [sp, #4]
 8015048:	f8ad 2006 	strh.w	r2, [sp, #6]
 801504c:	4629      	mov	r1, r5
 801504e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015050:	4798      	blx	r3
 8015052:	e895 0003 	ldmia.w	r5, {r0, r1}
 8015056:	e884 0003 	stmia.w	r4, {r0, r1}
 801505a:	4620      	mov	r0, r4
 801505c:	b003      	add	sp, #12
 801505e:	bd30      	pop	{r4, r5, pc}

08015060 <_ZN8touchgfx8Drawable13getCachedAbsXEv>:
 8015060:	b513      	push	{r0, r1, r4, lr}
 8015062:	f9b0 3020 	ldrsh.w	r3, [r0, #32]
 8015066:	4604      	mov	r4, r0
 8015068:	3301      	adds	r3, #1
 801506a:	d109      	bne.n	8015080 <_ZN8touchgfx8Drawable13getCachedAbsXEv+0x20>
 801506c:	4601      	mov	r1, r0
 801506e:	4668      	mov	r0, sp
 8015070:	f7ff faf8 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015074:	f8bd 3000 	ldrh.w	r3, [sp]
 8015078:	8423      	strh	r3, [r4, #32]
 801507a:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 801507e:	8463      	strh	r3, [r4, #34]	@ 0x22
 8015080:	f9b4 0020 	ldrsh.w	r0, [r4, #32]
 8015084:	b002      	add	sp, #8
 8015086:	bd10      	pop	{r4, pc}

08015088 <_ZN8touchgfx8Drawable13getCachedAbsYEv>:
 8015088:	b513      	push	{r0, r1, r4, lr}
 801508a:	f9b0 3022 	ldrsh.w	r3, [r0, #34]	@ 0x22
 801508e:	4604      	mov	r4, r0
 8015090:	3301      	adds	r3, #1
 8015092:	d109      	bne.n	80150a8 <_ZN8touchgfx8Drawable13getCachedAbsYEv+0x20>
 8015094:	4601      	mov	r1, r0
 8015096:	4668      	mov	r0, sp
 8015098:	f7ff fae4 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 801509c:	f8bd 3000 	ldrh.w	r3, [sp]
 80150a0:	8423      	strh	r3, [r4, #32]
 80150a2:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80150a6:	8463      	strh	r3, [r4, #34]	@ 0x22
 80150a8:	f9b4 0022 	ldrsh.w	r0, [r4, #34]	@ 0x22
 80150ac:	b002      	add	sp, #8
 80150ae:	bd10      	pop	{r4, pc}

080150b0 <_ZN8touchgfx6ScreenC1Ev>:
 80150b0:	b570      	push	{r4, r5, r6, lr}
 80150b2:	4b17      	ldr	r3, [pc, #92]	@ (8015110 <_ZN8touchgfx6ScreenC1Ev+0x60>)
 80150b4:	4605      	mov	r5, r0
 80150b6:	4a17      	ldr	r2, [pc, #92]	@ (8015114 <_ZN8touchgfx6ScreenC1Ev+0x64>)
 80150b8:	2101      	movs	r1, #1
 80150ba:	f845 3b04 	str.w	r3, [r5], #4
 80150be:	2300      	movs	r3, #0
 80150c0:	6042      	str	r2, [r0, #4]
 80150c2:	4604      	mov	r4, r0
 80150c4:	8103      	strh	r3, [r0, #8]
 80150c6:	8143      	strh	r3, [r0, #10]
 80150c8:	8183      	strh	r3, [r0, #12]
 80150ca:	81c3      	strh	r3, [r0, #14]
 80150cc:	8203      	strh	r3, [r0, #16]
 80150ce:	8243      	strh	r3, [r0, #18]
 80150d0:	8283      	strh	r3, [r0, #20]
 80150d2:	82c3      	strh	r3, [r0, #22]
 80150d4:	6203      	str	r3, [r0, #32]
 80150d6:	8483      	strh	r3, [r0, #36]	@ 0x24
 80150d8:	84c3      	strh	r3, [r0, #38]	@ 0x26
 80150da:	f880 3028 	strb.w	r3, [r0, #40]	@ 0x28
 80150de:	6343      	str	r3, [r0, #52]	@ 0x34
 80150e0:	f880 1029 	strb.w	r1, [r0, #41]	@ 0x29
 80150e4:	f880 1038 	strb.w	r1, [r0, #56]	@ 0x38
 80150e8:	e9c0 3306 	strd	r3, r3, [r0, #24]
 80150ec:	e9c0 330b 	strd	r3, r3, [r0, #44]	@ 0x2c
 80150f0:	4b09      	ldr	r3, [pc, #36]	@ (8015118 <_ZN8touchgfx6ScreenC1Ev+0x68>)
 80150f2:	4628      	mov	r0, r5
 80150f4:	f9b3 6000 	ldrsh.w	r6, [r3]
 80150f8:	6b93      	ldr	r3, [r2, #56]	@ 0x38
 80150fa:	4a08      	ldr	r2, [pc, #32]	@ (801511c <_ZN8touchgfx6ScreenC1Ev+0x6c>)
 80150fc:	f9b2 1000 	ldrsh.w	r1, [r2]
 8015100:	4798      	blx	r3
 8015102:	6863      	ldr	r3, [r4, #4]
 8015104:	4628      	mov	r0, r5
 8015106:	4631      	mov	r1, r6
 8015108:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801510a:	4798      	blx	r3
 801510c:	4620      	mov	r0, r4
 801510e:	bd70      	pop	{r4, r5, r6, pc}
 8015110:	0802544c 	.word	0x0802544c
 8015114:	080250d8 	.word	0x080250d8
 8015118:	2402539e 	.word	0x2402539e
 801511c:	2402539c 	.word	0x2402539c

08015120 <_ZN8touchgfx6Screen4drawEv>:
 8015120:	4b09      	ldr	r3, [pc, #36]	@ (8015148 <_ZN8touchgfx6Screen4drawEv+0x28>)
 8015122:	b507      	push	{r0, r1, r2, lr}
 8015124:	f9b3 2000 	ldrsh.w	r2, [r3]
 8015128:	2100      	movs	r1, #0
 801512a:	4b08      	ldr	r3, [pc, #32]	@ (801514c <_ZN8touchgfx6Screen4drawEv+0x2c>)
 801512c:	9100      	str	r1, [sp, #0]
 801512e:	4669      	mov	r1, sp
 8015130:	f9b3 3000 	ldrsh.w	r3, [r3]
 8015134:	f8ad 2004 	strh.w	r2, [sp, #4]
 8015138:	f8ad 3006 	strh.w	r3, [sp, #6]
 801513c:	6803      	ldr	r3, [r0, #0]
 801513e:	689b      	ldr	r3, [r3, #8]
 8015140:	4798      	blx	r3
 8015142:	b003      	add	sp, #12
 8015144:	f85d fb04 	ldr.w	pc, [sp], #4
 8015148:	2402539c 	.word	0x2402539c
 801514c:	2402539e 	.word	0x2402539e

08015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>:
 8015150:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015154:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 8015158:	b089      	sub	sp, #36	@ 0x24
 801515a:	4680      	mov	r8, r0
 801515c:	460c      	mov	r4, r1
 801515e:	2b00      	cmp	r3, #0
 8015160:	4615      	mov	r5, r2
 8015162:	dd0e      	ble.n	8015182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015164:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8015168:	2b00      	cmp	r3, #0
 801516a:	dd0a      	ble.n	8015182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801516c:	4628      	mov	r0, r5
 801516e:	f7ff ff5b 	bl	8015028 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015172:	4621      	mov	r1, r4
 8015174:	f7fc faa0 	bl	80116b8 <_ZNK8touchgfx4Rect9intersectERKS0_>
 8015178:	69eb      	ldr	r3, [r5, #28]
 801517a:	b928      	cbnz	r0, 8015188 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x38>
 801517c:	461d      	mov	r5, r3
 801517e:	2b00      	cmp	r3, #0
 8015180:	d1f4      	bne.n	801516c <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1c>
 8015182:	b009      	add	sp, #36	@ 0x24
 8015184:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015188:	ae04      	add	r6, sp, #16
 801518a:	2b00      	cmp	r3, #0
 801518c:	f000 80b5 	beq.w	80152fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 8015190:	682b      	ldr	r3, [r5, #0]
 8015192:	4629      	mov	r1, r5
 8015194:	a802      	add	r0, sp, #8
 8015196:	68db      	ldr	r3, [r3, #12]
 8015198:	4798      	blx	r3
 801519a:	4628      	mov	r0, r5
 801519c:	f7ff ff60 	bl	8015060 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 80151a0:	f8bd 7008 	ldrh.w	r7, [sp, #8]
 80151a4:	4407      	add	r7, r0
 80151a6:	4628      	mov	r0, r5
 80151a8:	f7ff ff6e 	bl	8015088 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 80151ac:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80151b0:	f9bd 200c 	ldrsh.w	r2, [sp, #12]
 80151b4:	b23f      	sxth	r7, r7
 80151b6:	4418      	add	r0, r3
 80151b8:	f9bd 300e 	ldrsh.w	r3, [sp, #14]
 80151bc:	4621      	mov	r1, r4
 80151be:	f8ad 2014 	strh.w	r2, [sp, #20]
 80151c2:	f8ad 0012 	strh.w	r0, [sp, #18]
 80151c6:	4630      	mov	r0, r6
 80151c8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80151cc:	f8ad 7010 	strh.w	r7, [sp, #16]
 80151d0:	f7f9 fe78 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80151d4:	4628      	mov	r0, r5
 80151d6:	f7ff ff27 	bl	8015028 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 80151da:	ab06      	add	r3, sp, #24
 80151dc:	4602      	mov	r2, r0
 80151de:	e896 0003 	ldmia.w	r6, {r0, r1}
 80151e2:	e883 0003 	stmia.w	r3, {r0, r1}
 80151e6:	4611      	mov	r1, r2
 80151e8:	4618      	mov	r0, r3
 80151ea:	f7f9 fe6b 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80151ee:	f9bd 3018 	ldrsh.w	r3, [sp, #24]
 80151f2:	f9b4 1000 	ldrsh.w	r1, [r4]
 80151f6:	f9bd a01a 	ldrsh.w	sl, [sp, #26]
 80151fa:	4299      	cmp	r1, r3
 80151fc:	f9bd b01c 	ldrsh.w	fp, [sp, #28]
 8015200:	f9bd 901e 	ldrsh.w	r9, [sp, #30]
 8015204:	d10b      	bne.n	801521e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015206:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801520a:	4552      	cmp	r2, sl
 801520c:	d107      	bne.n	801521e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 801520e:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8015212:	455a      	cmp	r2, fp
 8015214:	d103      	bne.n	801521e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0xce>
 8015216:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 801521a:	454a      	cmp	r2, r9
 801521c:	d06d      	beq.n	80152fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 801521e:	f1bb 0f00 	cmp.w	fp, #0
 8015222:	dd65      	ble.n	80152f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 8015224:	f1b9 0f00 	cmp.w	r9, #0
 8015228:	dd62      	ble.n	80152f0 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a0>
 801522a:	f9b4 2002 	ldrsh.w	r2, [r4, #2]
 801522e:	fa1f f08a 	uxth.w	r0, sl
 8015232:	4552      	cmp	r2, sl
 8015234:	9000      	str	r0, [sp, #0]
 8015236:	da12      	bge.n	801525e <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x10e>
 8015238:	9301      	str	r3, [sp, #4]
 801523a:	9b00      	ldr	r3, [sp, #0]
 801523c:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 8015240:	f8ad 2012 	strh.w	r2, [sp, #18]
 8015244:	1a9a      	subs	r2, r3, r2
 8015246:	f8ad 1010 	strh.w	r1, [sp, #16]
 801524a:	4631      	mov	r1, r6
 801524c:	f8ad 0014 	strh.w	r0, [sp, #20]
 8015250:	4640      	mov	r0, r8
 8015252:	f8ad 2016 	strh.w	r2, [sp, #22]
 8015256:	69ea      	ldr	r2, [r5, #28]
 8015258:	f7ff ff7a 	bl	8015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 801525c:	9b01      	ldr	r3, [sp, #4]
 801525e:	f9b4 2000 	ldrsh.w	r2, [r4]
 8015262:	b29f      	uxth	r7, r3
 8015264:	429a      	cmp	r2, r3
 8015266:	da0d      	bge.n	8015284 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x134>
 8015268:	f8ad 2010 	strh.w	r2, [sp, #16]
 801526c:	1aba      	subs	r2, r7, r2
 801526e:	f8ad a012 	strh.w	sl, [sp, #18]
 8015272:	4631      	mov	r1, r6
 8015274:	f8ad 2014 	strh.w	r2, [sp, #20]
 8015278:	4640      	mov	r0, r8
 801527a:	f8ad 9016 	strh.w	r9, [sp, #22]
 801527e:	69ea      	ldr	r2, [r5, #28]
 8015280:	f7ff ff66 	bl	8015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 8015284:	8822      	ldrh	r2, [r4, #0]
 8015286:	445f      	add	r7, fp
 8015288:	88a3      	ldrh	r3, [r4, #4]
 801528a:	b2bf      	uxth	r7, r7
 801528c:	4413      	add	r3, r2
 801528e:	b23a      	sxth	r2, r7
 8015290:	b29b      	uxth	r3, r3
 8015292:	b219      	sxth	r1, r3
 8015294:	4291      	cmp	r1, r2
 8015296:	dd0d      	ble.n	80152b4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x164>
 8015298:	1bdb      	subs	r3, r3, r7
 801529a:	f8ad 2010 	strh.w	r2, [sp, #16]
 801529e:	f8ad a012 	strh.w	sl, [sp, #18]
 80152a2:	4631      	mov	r1, r6
 80152a4:	f8ad 3014 	strh.w	r3, [sp, #20]
 80152a8:	4640      	mov	r0, r8
 80152aa:	f8ad 9016 	strh.w	r9, [sp, #22]
 80152ae:	69ea      	ldr	r2, [r5, #28]
 80152b0:	f7ff ff4e 	bl	8015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80152b4:	88e2      	ldrh	r2, [r4, #6]
 80152b6:	8863      	ldrh	r3, [r4, #2]
 80152b8:	4413      	add	r3, r2
 80152ba:	9a00      	ldr	r2, [sp, #0]
 80152bc:	444a      	add	r2, r9
 80152be:	b29b      	uxth	r3, r3
 80152c0:	fa1f f982 	uxth.w	r9, r2
 80152c4:	b219      	sxth	r1, r3
 80152c6:	fa0f f289 	sxth.w	r2, r9
 80152ca:	428a      	cmp	r2, r1
 80152cc:	da15      	bge.n	80152fa <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1aa>
 80152ce:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80152d2:	eba3 0309 	sub.w	r3, r3, r9
 80152d6:	f9b4 0000 	ldrsh.w	r0, [r4]
 80152da:	f8ad 1014 	strh.w	r1, [sp, #20]
 80152de:	4631      	mov	r1, r6
 80152e0:	f8ad 0010 	strh.w	r0, [sp, #16]
 80152e4:	f8ad 2012 	strh.w	r2, [sp, #18]
 80152e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 80152ec:	69ea      	ldr	r2, [r5, #28]
 80152ee:	e001      	b.n	80152f4 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x1a4>
 80152f0:	69ea      	ldr	r2, [r5, #28]
 80152f2:	4621      	mov	r1, r4
 80152f4:	4640      	mov	r0, r8
 80152f6:	f7ff ff2b 	bl	8015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80152fa:	4628      	mov	r0, r5
 80152fc:	f7ff fe94 	bl	8015028 <_ZN8touchgfx8Drawable20getCachedVisibleRectEv>
 8015300:	6861      	ldr	r1, [r4, #4]
 8015302:	4602      	mov	r2, r0
 8015304:	4633      	mov	r3, r6
 8015306:	6820      	ldr	r0, [r4, #0]
 8015308:	c303      	stmia	r3!, {r0, r1}
 801530a:	4611      	mov	r1, r2
 801530c:	4630      	mov	r0, r6
 801530e:	f7f9 fdd9 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 8015312:	f9bd 3014 	ldrsh.w	r3, [sp, #20]
 8015316:	2b00      	cmp	r3, #0
 8015318:	f77f af33 	ble.w	8015182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 801531c:	f9bd 3016 	ldrsh.w	r3, [sp, #22]
 8015320:	2b00      	cmp	r3, #0
 8015322:	f77f af2e 	ble.w	8015182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>
 8015326:	4628      	mov	r0, r5
 8015328:	f7ff fe9a 	bl	8015060 <_ZN8touchgfx8Drawable13getCachedAbsXEv>
 801532c:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 8015330:	1a18      	subs	r0, r3, r0
 8015332:	f8ad 0010 	strh.w	r0, [sp, #16]
 8015336:	4628      	mov	r0, r5
 8015338:	f7ff fea6 	bl	8015088 <_ZN8touchgfx8Drawable13getCachedAbsYEv>
 801533c:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 8015340:	4631      	mov	r1, r6
 8015342:	1a18      	subs	r0, r3, r0
 8015344:	f8ad 0012 	strh.w	r0, [sp, #18]
 8015348:	4628      	mov	r0, r5
 801534a:	682b      	ldr	r3, [r5, #0]
 801534c:	689b      	ldr	r3, [r3, #8]
 801534e:	4798      	blx	r3
 8015350:	e717      	b.n	8015182 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE+0x32>

08015352 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>:
 8015352:	b570      	push	{r4, r5, r6, lr}
 8015354:	1d06      	adds	r6, r0, #4
 8015356:	b086      	sub	sp, #24
 8015358:	460c      	mov	r4, r1
 801535a:	2300      	movs	r3, #0
 801535c:	4631      	mov	r1, r6
 801535e:	4605      	mov	r5, r0
 8015360:	a802      	add	r0, sp, #8
 8015362:	9301      	str	r3, [sp, #4]
 8015364:	f7ff f97e 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 8015368:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 801536c:	8822      	ldrh	r2, [r4, #0]
 801536e:	f8bd 100a 	ldrh.w	r1, [sp, #10]
 8015372:	1ad2      	subs	r2, r2, r3
 8015374:	8863      	ldrh	r3, [r4, #2]
 8015376:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 801537a:	1a5b      	subs	r3, r3, r1
 801537c:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 8015380:	f8ad 2010 	strh.w	r2, [sp, #16]
 8015384:	aa01      	add	r2, sp, #4
 8015386:	f8ad 0014 	strh.w	r0, [sp, #20]
 801538a:	4630      	mov	r0, r6
 801538c:	f8ad 1016 	strh.w	r1, [sp, #22]
 8015390:	a904      	add	r1, sp, #16
 8015392:	f8ad 3012 	strh.w	r3, [sp, #18]
 8015396:	f7f9 fe6d 	bl	800f074 <_ZN8touchgfx9Container14setupDrawChainERKNS_4RectEPPNS_8DrawableE>
 801539a:	9a01      	ldr	r2, [sp, #4]
 801539c:	b11a      	cbz	r2, 80153a6 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE+0x54>
 801539e:	4621      	mov	r1, r4
 80153a0:	4628      	mov	r0, r5
 80153a2:	f7ff fed5 	bl	8015150 <_ZN8touchgfx6Screen5JSMOCERKNS_4RectEPNS_8DrawableE>
 80153a6:	b006      	add	sp, #24
 80153a8:	bd70      	pop	{r4, r5, r6, pc}

080153aa <_ZN8touchgfx6Screen4drawERNS_4RectE>:
 80153aa:	4602      	mov	r2, r0
 80153ac:	b530      	push	{r4, r5, lr}
 80153ae:	4604      	mov	r4, r0
 80153b0:	b085      	sub	sp, #20
 80153b2:	f852 0f08 	ldr.w	r0, [r2, #8]!
 80153b6:	460d      	mov	r5, r1
 80153b8:	466b      	mov	r3, sp
 80153ba:	6851      	ldr	r1, [r2, #4]
 80153bc:	c303      	stmia	r3!, {r0, r1}
 80153be:	4629      	mov	r1, r5
 80153c0:	4668      	mov	r0, sp
 80153c2:	f7f9 fd7f 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 80153c6:	f894 3038 	ldrb.w	r3, [r4, #56]	@ 0x38
 80153ca:	b12b      	cbz	r3, 80153d8 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2e>
 80153cc:	4669      	mov	r1, sp
 80153ce:	4620      	mov	r0, r4
 80153d0:	f7ff ffbf 	bl	8015352 <_ZN8touchgfx6Screen9startSMOCERKNS_4RectE>
 80153d4:	b005      	add	sp, #20
 80153d6:	bd30      	pop	{r4, r5, pc}
 80153d8:	3404      	adds	r4, #4
 80153da:	a802      	add	r0, sp, #8
 80153dc:	4621      	mov	r1, r4
 80153de:	f7ff f941 	bl	8014664 <_ZNK8touchgfx8Drawable15getAbsoluteRectEv>
 80153e2:	f8bd 3000 	ldrh.w	r3, [sp]
 80153e6:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 80153ea:	4669      	mov	r1, sp
 80153ec:	4620      	mov	r0, r4
 80153ee:	1a9b      	subs	r3, r3, r2
 80153f0:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80153f4:	f8ad 3000 	strh.w	r3, [sp]
 80153f8:	f8bd 3002 	ldrh.w	r3, [sp, #2]
 80153fc:	1a9b      	subs	r3, r3, r2
 80153fe:	f8ad 3002 	strh.w	r3, [sp, #2]
 8015402:	f7f9 fdfe 	bl	800f002 <_ZNK8touchgfx9Container4drawERKNS_4RectE>
 8015406:	e7e5      	b.n	80153d4 <_ZN8touchgfx6Screen4drawERNS_4RectE+0x2a>

08015408 <_ZN8touchgfx6Screen14bindTransitionERNS_10TransitionE>:
 8015408:	460b      	mov	r3, r1
 801540a:	680a      	ldr	r2, [r1, #0]
 801540c:	1d01      	adds	r1, r0, #4
 801540e:	6992      	ldr	r2, [r2, #24]
 8015410:	4618      	mov	r0, r3
 8015412:	4710      	bx	r2

08015414 <_ZN8touchgfx12TextProviderC1Ev>:
 8015414:	b538      	push	{r3, r4, r5, lr}
 8015416:	2500      	movs	r5, #0
 8015418:	2302      	movs	r3, #2
 801541a:	4604      	mov	r4, r0
 801541c:	220e      	movs	r2, #14
 801541e:	7403      	strb	r3, [r0, #16]
 8015420:	4629      	mov	r1, r5
 8015422:	6145      	str	r5, [r0, #20]
 8015424:	7605      	strb	r5, [r0, #24]
 8015426:	83c5      	strh	r5, [r0, #30]
 8015428:	8405      	strh	r5, [r0, #32]
 801542a:	86c5      	strh	r5, [r0, #54]	@ 0x36
 801542c:	8705      	strh	r5, [r0, #56]	@ 0x38
 801542e:	87c5      	strh	r5, [r0, #62]	@ 0x3e
 8015430:	f8a0 5040 	strh.w	r5, [r0, #64]	@ 0x40
 8015434:	e9c0 5500 	strd	r5, r5, [r0]
 8015438:	e9c0 5511 	strd	r5, r5, [r0, #68]	@ 0x44
 801543c:	304c      	adds	r0, #76	@ 0x4c
 801543e:	f00c fc07 	bl	8021c50 <memset>
 8015442:	2301      	movs	r3, #1
 8015444:	4620      	mov	r0, r4
 8015446:	f8a4 505a 	strh.w	r5, [r4, #90]	@ 0x5a
 801544a:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 801544e:	f8a4 505e 	strh.w	r5, [r4, #94]	@ 0x5e
 8015452:	f884 3060 	strb.w	r3, [r4, #96]	@ 0x60
 8015456:	f884 5061 	strb.w	r5, [r4, #97]	@ 0x61
 801545a:	f7ee ffb5 	bl	80043c8 <_ZN8touchgfx12TextProvider18initializeInternalEv>
 801545e:	4620      	mov	r0, r4
 8015460:	bd38      	pop	{r3, r4, r5, pc}

08015462 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>:
 8015462:	b530      	push	{r4, r5, lr}
 8015464:	2500      	movs	r5, #0
 8015466:	2401      	movs	r4, #1
 8015468:	6843      	ldr	r3, [r0, #4]
 801546a:	b913      	cbnz	r3, 8015472 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x10>
 801546c:	6803      	ldr	r3, [r0, #0]
 801546e:	b313      	cbz	r3, 80154b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 8015470:	6043      	str	r3, [r0, #4]
 8015472:	7e03      	ldrb	r3, [r0, #24]
 8015474:	b143      	cbz	r3, 8015488 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x26>
 8015476:	6943      	ldr	r3, [r0, #20]
 8015478:	b12b      	cbz	r3, 8015486 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801547a:	881a      	ldrh	r2, [r3, #0]
 801547c:	b11a      	cbz	r2, 8015486 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x24>
 801547e:	1c9a      	adds	r2, r3, #2
 8015480:	6142      	str	r2, [r0, #20]
 8015482:	8818      	ldrh	r0, [r3, #0]
 8015484:	bd30      	pop	{r4, r5, pc}
 8015486:	7605      	strb	r5, [r0, #24]
 8015488:	6843      	ldr	r3, [r0, #4]
 801548a:	8819      	ldrh	r1, [r3, #0]
 801548c:	b199      	cbz	r1, 80154b6 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x54>
 801548e:	1c9a      	adds	r2, r3, #2
 8015490:	2902      	cmp	r1, #2
 8015492:	6042      	str	r2, [r0, #4]
 8015494:	d1f5      	bne.n	8015482 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x20>
 8015496:	7c03      	ldrb	r3, [r0, #16]
 8015498:	2b01      	cmp	r3, #1
 801549a:	d8e5      	bhi.n	8015468 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 801549c:	1c5a      	adds	r2, r3, #1
 801549e:	3302      	adds	r3, #2
 80154a0:	7402      	strb	r2, [r0, #16]
 80154a2:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
 80154a6:	6143      	str	r3, [r0, #20]
 80154a8:	2b00      	cmp	r3, #0
 80154aa:	d0dd      	beq.n	8015468 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80154ac:	881b      	ldrh	r3, [r3, #0]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	d0da      	beq.n	8015468 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80154b2:	7604      	strb	r4, [r0, #24]
 80154b4:	e7d8      	b.n	8015468 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x6>
 80154b6:	2000      	movs	r0, #0
 80154b8:	e7e4      	b.n	8015484 <_ZN8touchgfx12TextProvider19getNextCharInternalEv+0x22>

080154ba <_ZN8touchgfx12TextProvider10initializeEPKtSt9__va_listS2_PKNS_24FontContextualFormsTableE>:
 80154ba:	6001      	str	r1, [r0, #0]
 80154bc:	2100      	movs	r1, #0
 80154be:	b430      	push	{r4, r5}
 80154c0:	6041      	str	r1, [r0, #4]
 80154c2:	6815      	ldr	r5, [r2, #0]
 80154c4:	6085      	str	r5, [r0, #8]
 80154c6:	6852      	ldr	r2, [r2, #4]
 80154c8:	6443      	str	r3, [r0, #68]	@ 0x44
 80154ca:	9b02      	ldr	r3, [sp, #8]
 80154cc:	60c2      	str	r2, [r0, #12]
 80154ce:	7401      	strb	r1, [r0, #16]
 80154d0:	6141      	str	r1, [r0, #20]
 80154d2:	7601      	strb	r1, [r0, #24]
 80154d4:	8701      	strh	r1, [r0, #56]	@ 0x38
 80154d6:	8401      	strh	r1, [r0, #32]
 80154d8:	f8a0 1040 	strh.w	r1, [r0, #64]	@ 0x40
 80154dc:	6483      	str	r3, [r0, #72]	@ 0x48
 80154de:	bc30      	pop	{r4, r5}
 80154e0:	f7ee bf72 	b.w	80043c8 <_ZN8touchgfx12TextProvider18initializeInternalEv>

080154e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>:
 80154e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80154e6:	4605      	mov	r5, r0
 80154e8:	4608      	mov	r0, r1
 80154ea:	b1f1      	cbz	r1, 801552a <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x46>
 80154ec:	f105 044c 	add.w	r4, r5, #76	@ 0x4c
 80154f0:	460b      	mov	r3, r1
 80154f2:	f101 0708 	add.w	r7, r1, #8
 80154f6:	4622      	mov	r2, r4
 80154f8:	6818      	ldr	r0, [r3, #0]
 80154fa:	3308      	adds	r3, #8
 80154fc:	f853 1c04 	ldr.w	r1, [r3, #-4]
 8015500:	4626      	mov	r6, r4
 8015502:	42bb      	cmp	r3, r7
 8015504:	c603      	stmia	r6!, {r0, r1}
 8015506:	4634      	mov	r4, r6
 8015508:	d1f6      	bne.n	80154f8 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE+0x14>
 801550a:	6818      	ldr	r0, [r3, #0]
 801550c:	6030      	str	r0, [r6, #0]
 801550e:	4610      	mov	r0, r2
 8015510:	889b      	ldrh	r3, [r3, #4]
 8015512:	80b3      	strh	r3, [r6, #4]
 8015514:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 8015518:	015b      	lsls	r3, r3, #5
 801551a:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801551e:	f895 3052 	ldrb.w	r3, [r5, #82]	@ 0x52
 8015522:	430b      	orrs	r3, r1
 8015524:	425b      	negs	r3, r3
 8015526:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801552a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801552c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>:
 801552c:	b538      	push	{r3, r4, r5, lr}
 801552e:	460c      	mov	r4, r1
 8015530:	6811      	ldr	r1, [r2, #0]
 8015532:	4610      	mov	r0, r2
 8015534:	68cd      	ldr	r5, [r1, #12]
 8015536:	4619      	mov	r1, r3
 8015538:	47a8      	blx	r5
 801553a:	2800      	cmp	r0, #0
 801553c:	bf08      	it	eq
 801553e:	4620      	moveq	r0, r4
 8015540:	bd38      	pop	{r3, r4, r5, pc}
	...

08015544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>:
 8015544:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015548:	468c      	mov	ip, r1
 801554a:	4605      	mov	r5, r0
 801554c:	4614      	mov	r4, r2
 801554e:	b942      	cbnz	r2, 8015562 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1e>
 8015550:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8015554:	f8a5 205c 	strh.w	r2, [r5, #92]	@ 0x5c
 8015558:	f8a5 205e 	strh.w	r2, [r5, #94]	@ 0x5e
 801555c:	4620      	mov	r0, r4
 801555e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015562:	7b50      	ldrb	r0, [r2, #13]
 8015564:	f46f 6163 	mvn.w	r1, #3632	@ 0xe30
 8015568:	8893      	ldrh	r3, [r2, #4]
 801556a:	0106      	lsls	r6, r0, #4
 801556c:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8015570:	79e6      	ldrb	r6, [r4, #7]
 8015572:	4316      	orrs	r6, r2
 8015574:	185a      	adds	r2, r3, r1
 8015576:	b291      	uxth	r1, r2
 8015578:	b2b7      	uxth	r7, r6
 801557a:	291d      	cmp	r1, #29
 801557c:	d87f      	bhi.n	801567e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 801557e:	2201      	movs	r2, #1
 8015580:	10f6      	asrs	r6, r6, #3
 8015582:	408a      	lsls	r2, r1
 8015584:	498b      	ldr	r1, [pc, #556]	@ (80157b4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x270>)
 8015586:	420a      	tst	r2, r1
 8015588:	d12e      	bne.n	80155e8 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xa4>
 801558a:	f412 7f60 	tst.w	r2, #896	@ 0x380
 801558e:	d076      	beq.n	801567e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x13a>
 8015590:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8015594:	4623      	mov	r3, r4
 8015596:	f104 0e08 	add.w	lr, r4, #8
 801559a:	4614      	mov	r4, r2
 801559c:	6818      	ldr	r0, [r3, #0]
 801559e:	3308      	adds	r3, #8
 80155a0:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80155a4:	4694      	mov	ip, r2
 80155a6:	4573      	cmp	r3, lr
 80155a8:	e8ac 0003 	stmia.w	ip!, {r0, r1}
 80155ac:	4662      	mov	r2, ip
 80155ae:	d1f5      	bne.n	801559c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x58>
 80155b0:	6818      	ldr	r0, [r3, #0]
 80155b2:	f8cc 0000 	str.w	r0, [ip]
 80155b6:	889b      	ldrh	r3, [r3, #4]
 80155b8:	f8ac 3004 	strh.w	r3, [ip, #4]
 80155bc:	b2b3      	uxth	r3, r6
 80155be:	f8b5 105c 	ldrh.w	r1, [r5, #92]	@ 0x5c
 80155c2:	f895 0059 	ldrb.w	r0, [r5, #89]	@ 0x59
 80155c6:	1aca      	subs	r2, r1, r3
 80155c8:	1bcf      	subs	r7, r1, r7
 80155ca:	f020 0060 	bic.w	r0, r0, #96	@ 0x60
 80155ce:	b292      	uxth	r2, r2
 80155d0:	1afb      	subs	r3, r7, r3
 80155d2:	f885 2054 	strb.w	r2, [r5, #84]	@ 0x54
 80155d6:	10d2      	asrs	r2, r2, #3
 80155d8:	f002 0260 	and.w	r2, r2, #96	@ 0x60
 80155dc:	4302      	orrs	r2, r0
 80155de:	f885 2059 	strb.w	r2, [r5, #89]	@ 0x59
 80155e2:	f8a5 305c 	strh.w	r3, [r5, #92]	@ 0x5c
 80155e6:	e7b9      	b.n	801555c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 80155e8:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 80155ec:	4623      	mov	r3, r4
 80155ee:	f104 0808 	add.w	r8, r4, #8
 80155f2:	4614      	mov	r4, r2
 80155f4:	6818      	ldr	r0, [r3, #0]
 80155f6:	3308      	adds	r3, #8
 80155f8:	f853 1c04 	ldr.w	r1, [r3, #-4]
 80155fc:	4696      	mov	lr, r2
 80155fe:	4543      	cmp	r3, r8
 8015600:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 8015604:	4672      	mov	r2, lr
 8015606:	d1f5      	bne.n	80155f4 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0xb0>
 8015608:	6818      	ldr	r0, [r3, #0]
 801560a:	f8ce 0000 	str.w	r0, [lr]
 801560e:	889b      	ldrh	r3, [r3, #4]
 8015610:	f8ae 3004 	strh.w	r3, [lr, #4]
 8015614:	8eeb      	ldrh	r3, [r5, #54]	@ 0x36
 8015616:	eb05 0343 	add.w	r3, r5, r3, lsl #1
 801561a:	8c59      	ldrh	r1, [r3, #34]	@ 0x22
 801561c:	f640 6333 	movw	r3, #3635	@ 0xe33
 8015620:	4299      	cmp	r1, r3
 8015622:	d111      	bne.n	8015648 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x104>
 8015624:	f8dc 3000 	ldr.w	r3, [ip]
 8015628:	4660      	mov	r0, ip
 801562a:	68db      	ldr	r3, [r3, #12]
 801562c:	4798      	blx	r3
 801562e:	7b41      	ldrb	r1, [r0, #13]
 8015630:	00cb      	lsls	r3, r1, #3
 8015632:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015636:	7a03      	ldrb	r3, [r0, #8]
 8015638:	4313      	orrs	r3, r2
 801563a:	064a      	lsls	r2, r1, #25
 801563c:	bf44      	itt	mi
 801563e:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015642:	b21b      	sxthmi	r3, r3
 8015644:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 8015648:	f8b5 305a 	ldrh.w	r3, [r5, #90]	@ 0x5a
 801564c:	f895 2059 	ldrb.w	r2, [r5, #89]	@ 0x59
 8015650:	443b      	add	r3, r7
 8015652:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015656:	4433      	add	r3, r6
 8015658:	b29b      	uxth	r3, r3
 801565a:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 801565e:	f885 3054 	strb.w	r3, [r5, #84]	@ 0x54
 8015662:	10db      	asrs	r3, r3, #3
 8015664:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015668:	4313      	orrs	r3, r2
 801566a:	f895 205e 	ldrb.w	r2, [r5, #94]	@ 0x5e
 801566e:	f885 3059 	strb.w	r3, [r5, #89]	@ 0x59
 8015672:	f895 3055 	ldrb.w	r3, [r5, #85]	@ 0x55
 8015676:	1a9b      	subs	r3, r3, r2
 8015678:	f885 3055 	strb.w	r3, [r5, #85]	@ 0x55
 801567c:	e76e      	b.n	801555c <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x18>
 801567e:	f023 0204 	bic.w	r2, r3, #4
 8015682:	f640 611b 	movw	r1, #3611	@ 0xe1b
 8015686:	428a      	cmp	r2, r1
 8015688:	d003      	beq.n	8015692 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x14e>
 801568a:	f640 621d 	movw	r2, #3613	@ 0xe1d
 801568e:	4293      	cmp	r3, r2
 8015690:	d138      	bne.n	8015704 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1c0>
 8015692:	f105 064c 	add.w	r6, r5, #76	@ 0x4c
 8015696:	4622      	mov	r2, r4
 8015698:	f104 0808 	add.w	r8, r4, #8
 801569c:	4634      	mov	r4, r6
 801569e:	6810      	ldr	r0, [r2, #0]
 80156a0:	3208      	adds	r2, #8
 80156a2:	f852 1c04 	ldr.w	r1, [r2, #-4]
 80156a6:	46b6      	mov	lr, r6
 80156a8:	4542      	cmp	r2, r8
 80156aa:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80156ae:	4676      	mov	r6, lr
 80156b0:	d1f5      	bne.n	801569e <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x15a>
 80156b2:	6810      	ldr	r0, [r2, #0]
 80156b4:	3b01      	subs	r3, #1
 80156b6:	4621      	mov	r1, r4
 80156b8:	f8ce 0000 	str.w	r0, [lr]
 80156bc:	b29b      	uxth	r3, r3
 80156be:	8892      	ldrh	r2, [r2, #4]
 80156c0:	4628      	mov	r0, r5
 80156c2:	f8ae 2004 	strh.w	r2, [lr, #4]
 80156c6:	4662      	mov	r2, ip
 80156c8:	f7ff ff30 	bl	801552c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 80156cc:	7b41      	ldrb	r1, [r0, #13]
 80156ce:	00cb      	lsls	r3, r1, #3
 80156d0:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 80156d4:	7a03      	ldrb	r3, [r0, #8]
 80156d6:	0648      	lsls	r0, r1, #25
 80156d8:	ea43 0302 	orr.w	r3, r3, r2
 80156dc:	f895 2056 	ldrb.w	r2, [r5, #86]	@ 0x56
 80156e0:	bf44      	itt	mi
 80156e2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80156e6:	b21b      	sxthmi	r3, r3
 80156e8:	f8a5 305a 	strh.w	r3, [r5, #90]	@ 0x5a
 80156ec:	f895 3059 	ldrb.w	r3, [r5, #89]	@ 0x59
 80156f0:	005b      	lsls	r3, r3, #1
 80156f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80156f6:	4313      	orrs	r3, r2
 80156f8:	115a      	asrs	r2, r3, #5
 80156fa:	eb02 0393 	add.w	r3, r2, r3, lsr #2
 80156fe:	f8a5 305e 	strh.w	r3, [r5, #94]	@ 0x5e
 8015702:	e047      	b.n	8015794 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x250>
 8015704:	00c2      	lsls	r2, r0, #3
 8015706:	f402 7180 	and.w	r1, r2, #256	@ 0x100
 801570a:	7a22      	ldrb	r2, [r4, #8]
 801570c:	430a      	orrs	r2, r1
 801570e:	0641      	lsls	r1, r0, #25
 8015710:	f640 6109 	movw	r1, #3593	@ 0xe09
 8015714:	bf44      	itt	mi
 8015716:	f5a2 7200 	submi.w	r2, r2, #512	@ 0x200
 801571a:	b212      	sxthmi	r2, r2
 801571c:	f8a5 205a 	strh.w	r2, [r5, #90]	@ 0x5a
 8015720:	f023 0210 	bic.w	r2, r3, #16
 8015724:	428a      	cmp	r2, r1
 8015726:	d003      	beq.n	8015730 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ec>
 8015728:	f640 6213 	movw	r2, #3603	@ 0xe13
 801572c:	4293      	cmp	r3, r2
 801572e:	d13e      	bne.n	80157ae <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x26a>
 8015730:	f105 024c 	add.w	r2, r5, #76	@ 0x4c
 8015734:	f104 0808 	add.w	r8, r4, #8
 8015738:	4696      	mov	lr, r2
 801573a:	6820      	ldr	r0, [r4, #0]
 801573c:	3408      	adds	r4, #8
 801573e:	f854 1c04 	ldr.w	r1, [r4, #-4]
 8015742:	4616      	mov	r6, r2
 8015744:	4544      	cmp	r4, r8
 8015746:	c603      	stmia	r6!, {r0, r1}
 8015748:	4632      	mov	r2, r6
 801574a:	d1f6      	bne.n	801573a <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1f6>
 801574c:	6820      	ldr	r0, [r4, #0]
 801574e:	6030      	str	r0, [r6, #0]
 8015750:	4628      	mov	r0, r5
 8015752:	88a1      	ldrh	r1, [r4, #4]
 8015754:	4674      	mov	r4, lr
 8015756:	80b1      	strh	r1, [r6, #4]
 8015758:	4671      	mov	r1, lr
 801575a:	f895 6059 	ldrb.w	r6, [r5, #89]	@ 0x59
 801575e:	0076      	lsls	r6, r6, #1
 8015760:	f406 7280 	and.w	r2, r6, #256	@ 0x100
 8015764:	f895 6056 	ldrb.w	r6, [r5, #86]	@ 0x56
 8015768:	4316      	orrs	r6, r2
 801576a:	f640 6213 	movw	r2, #3603	@ 0xe13
 801576e:	4293      	cmp	r3, r2
 8015770:	4662      	mov	r2, ip
 8015772:	bf16      	itet	ne
 8015774:	f103 33ff 	addne.w	r3, r3, #4294967295
 8015778:	f640 630c 	movweq	r3, #3596	@ 0xe0c
 801577c:	b29b      	uxthne	r3, r3
 801577e:	f7ff fed5 	bl	801552c <_ZNK8touchgfx12TextProvider15thaiLookupGlyphEPKNS_9GlyphNodeEPKNS_4FontEt>
 8015782:	7b43      	ldrb	r3, [r0, #13]
 8015784:	7a82      	ldrb	r2, [r0, #10]
 8015786:	005b      	lsls	r3, r3, #1
 8015788:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801578c:	4313      	orrs	r3, r2
 801578e:	1af6      	subs	r6, r6, r3
 8015790:	f8a5 605e 	strh.w	r6, [r5, #94]	@ 0x5e
 8015794:	7b61      	ldrb	r1, [r4, #13]
 8015796:	00cb      	lsls	r3, r1, #3
 8015798:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801579c:	7a23      	ldrb	r3, [r4, #8]
 801579e:	4313      	orrs	r3, r2
 80157a0:	064a      	lsls	r2, r1, #25
 80157a2:	bf44      	itt	mi
 80157a4:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80157a8:	b21b      	sxthmi	r3, r3
 80157aa:	1bdb      	subs	r3, r3, r7
 80157ac:	e719      	b.n	80155e2 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x9e>
 80157ae:	2300      	movs	r3, #0
 80157b0:	e7a5      	b.n	80156fe <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE+0x1ba>
 80157b2:	bf00      	nop
 80157b4:	3fc00079 	.word	0x3fc00079

080157b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>:
 80157b8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80157bc:	4604      	mov	r4, r0
 80157be:	b942      	cbnz	r2, 80157d2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1a>
 80157c0:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80157c4:	f8a0 305a 	strh.w	r3, [r0, #90]	@ 0x5a
 80157c8:	f8a0 305c 	strh.w	r3, [r0, #92]	@ 0x5c
 80157cc:	f8a4 305e 	strh.w	r3, [r4, #94]	@ 0x5e
 80157d0:	e047      	b.n	8015862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 80157d2:	7b51      	ldrb	r1, [r2, #13]
 80157d4:	8893      	ldrh	r3, [r2, #4]
 80157d6:	010d      	lsls	r5, r1, #4
 80157d8:	f405 7080 	and.w	r0, r5, #256	@ 0x100
 80157dc:	79d5      	ldrb	r5, [r2, #7]
 80157de:	4305      	orrs	r5, r0
 80157e0:	2d04      	cmp	r5, #4
 80157e2:	bfcc      	ite	gt
 80157e4:	ea4f 0e95 	movgt.w	lr, r5, lsr #2
 80157e8:	f04f 0e01 	movle.w	lr, #1
 80157ec:	f5b3 6fdd 	cmp.w	r3, #1768	@ 0x6e8
 80157f0:	f200 80ab 	bhi.w	801594a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x192>
 80157f4:	f240 60e7 	movw	r0, #1767	@ 0x6e7
 80157f8:	4283      	cmp	r3, r0
 80157fa:	d216      	bcs.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80157fc:	f240 605b 	movw	r0, #1627	@ 0x65b
 8015800:	4283      	cmp	r3, r0
 8015802:	d859      	bhi.n	80158b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x100>
 8015804:	f240 6057 	movw	r0, #1623	@ 0x657
 8015808:	4283      	cmp	r3, r0
 801580a:	d20e      	bcs.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801580c:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 8015810:	d24a      	bcs.n	80158a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xf0>
 8015812:	f240 604e 	movw	r0, #1614	@ 0x64e
 8015816:	4283      	cmp	r3, r0
 8015818:	d207      	bcs.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801581a:	f240 601a 	movw	r0, #1562	@ 0x61a
 801581e:	4283      	cmp	r3, r0
 8015820:	d02a      	beq.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015822:	d821      	bhi.n	8015868 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xb0>
 8015824:	f5b3 6fc2 	cmp.w	r3, #1552	@ 0x610
 8015828:	d35b      	bcc.n	80158e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 801582a:	f9b4 305a 	ldrsh.w	r3, [r4, #90]	@ 0x5a
 801582e:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015832:	f040 80d0 	bne.w	80159d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015836:	f9b4 005c 	ldrsh.w	r0, [r4, #92]	@ 0x5c
 801583a:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 801583e:	f040 80ca 	bne.w	80159d6 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x21e>
 8015842:	00cb      	lsls	r3, r1, #3
 8015844:	0649      	lsls	r1, r1, #25
 8015846:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 801584a:	7a13      	ldrb	r3, [r2, #8]
 801584c:	ea43 0300 	orr.w	r3, r3, r0
 8015850:	bf44      	itt	mi
 8015852:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015856:	b21b      	sxthmi	r3, r3
 8015858:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 801585c:	1b5d      	subs	r5, r3, r5
 801585e:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015862:	4610      	mov	r0, r2
 8015864:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8015868:	f240 604b 	movw	r0, #1611	@ 0x64b
 801586c:	4283      	cmp	r3, r0
 801586e:	d338      	bcc.n	80158e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015870:	f240 604c 	movw	r0, #1612	@ 0x64c
 8015874:	4283      	cmp	r3, r0
 8015876:	d9d8      	bls.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015878:	f9b4 005a 	ldrsh.w	r0, [r4, #90]	@ 0x5a
 801587c:	f9b4 305c 	ldrsh.w	r3, [r4, #92]	@ 0x5c
 8015880:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015884:	f040 80f3 	bne.w	8015a6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015888:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 801588c:	f040 80ef 	bne.w	8015a6e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b6>
 8015890:	00cb      	lsls	r3, r1, #3
 8015892:	064e      	lsls	r6, r1, #25
 8015894:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 8015898:	7a13      	ldrb	r3, [r2, #8]
 801589a:	ea43 0300 	orr.w	r3, r3, r0
 801589e:	bf44      	itt	mi
 80158a0:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80158a4:	b21b      	sxthmi	r3, r3
 80158a6:	e7d9      	b.n	801585c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xa4>
 80158a8:	f240 6054 	movw	r0, #1620	@ 0x654
 80158ac:	4283      	cmp	r3, r0
 80158ae:	d8e3      	bhi.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80158b0:	f5b3 6fca 	cmp.w	r3, #1616	@ 0x650
 80158b4:	d9e0      	bls.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80158b6:	e7b8      	b.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80158b8:	f240 6074 	movw	r0, #1652	@ 0x674
 80158bc:	4283      	cmp	r3, r0
 80158be:	d0b4      	beq.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80158c0:	d82d      	bhi.n	801591e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x166>
 80158c2:	f240 605e 	movw	r0, #1630	@ 0x65e
 80158c6:	4283      	cmp	r3, r0
 80158c8:	d804      	bhi.n	80158d4 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x11c>
 80158ca:	f240 605d 	movw	r0, #1629	@ 0x65d
 80158ce:	4283      	cmp	r3, r0
 80158d0:	d3d2      	bcc.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80158d2:	e7aa      	b.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80158d4:	f240 605f 	movw	r0, #1631	@ 0x65f
 80158d8:	4283      	cmp	r3, r0
 80158da:	d0cd      	beq.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80158dc:	f5b3 6fce 	cmp.w	r3, #1648	@ 0x670
 80158e0:	d0a3      	beq.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80158e2:	00cb      	lsls	r3, r1, #3
 80158e4:	0649      	lsls	r1, r1, #25
 80158e6:	f403 7080 	and.w	r0, r3, #256	@ 0x100
 80158ea:	7a13      	ldrb	r3, [r2, #8]
 80158ec:	ea43 0300 	orr.w	r3, r3, r0
 80158f0:	bf44      	itt	mi
 80158f2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 80158f6:	b21b      	sxthmi	r3, r3
 80158f8:	1b5d      	subs	r5, r3, r5
 80158fa:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 80158fe:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015902:	7b53      	ldrb	r3, [r2, #13]
 8015904:	015b      	lsls	r3, r3, #5
 8015906:	f403 7180 	and.w	r1, r3, #256	@ 0x100
 801590a:	7993      	ldrb	r3, [r2, #6]
 801590c:	430b      	orrs	r3, r1
 801590e:	2105      	movs	r1, #5
 8015910:	005b      	lsls	r3, r3, #1
 8015912:	fb93 f3f1 	sdiv	r3, r3, r1
 8015916:	f992 1009 	ldrsb.w	r1, [r2, #9]
 801591a:	440b      	add	r3, r1
 801591c:	e756      	b.n	80157cc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x14>
 801591e:	f240 60e2 	movw	r0, #1762	@ 0x6e2
 8015922:	4283      	cmp	r3, r0
 8015924:	d809      	bhi.n	801593a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x182>
 8015926:	f240 60df 	movw	r0, #1759	@ 0x6df
 801592a:	4283      	cmp	r3, r0
 801592c:	f4bf af7d 	bcs.w	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 8015930:	f2a3 63d6 	subw	r3, r3, #1750	@ 0x6d6
 8015934:	2b05      	cmp	r3, #5
 8015936:	d8d4      	bhi.n	80158e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015938:	e777      	b.n	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801593a:	f240 60e3 	movw	r0, #1763	@ 0x6e3
 801593e:	4283      	cmp	r3, r0
 8015940:	d09a      	beq.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015942:	f240 60e4 	movw	r0, #1764	@ 0x6e4
 8015946:	4283      	cmp	r3, r0
 8015948:	e7ca      	b.n	80158e0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x128>
 801594a:	f5b3 6f0f 	cmp.w	r3, #2288	@ 0x8f0
 801594e:	d22b      	bcs.n	80159a8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1f0>
 8015950:	f640 00ed 	movw	r0, #2285	@ 0x8ed
 8015954:	4283      	cmp	r3, r0
 8015956:	d28f      	bcs.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015958:	f640 00e5 	movw	r0, #2277	@ 0x8e5
 801595c:	4283      	cmp	r3, r0
 801595e:	d816      	bhi.n	801598e <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d6>
 8015960:	f640 00e4 	movw	r0, #2276	@ 0x8e4
 8015964:	4283      	cmp	r3, r0
 8015966:	f4bf af60 	bcs.w	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801596a:	f240 60ec 	movw	r0, #1772	@ 0x6ec
 801596e:	4283      	cmp	r3, r0
 8015970:	d80a      	bhi.n	8015988 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1d0>
 8015972:	f240 60eb 	movw	r0, #1771	@ 0x6eb
 8015976:	4283      	cmp	r3, r0
 8015978:	f4bf af57 	bcs.w	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 801597c:	f240 60ea 	movw	r0, #1770	@ 0x6ea
 8015980:	4283      	cmp	r3, r0
 8015982:	f43f af79 	beq.w	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 8015986:	e7ac      	b.n	80158e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x12a>
 8015988:	f240 60ed 	movw	r0, #1773	@ 0x6ed
 801598c:	e7f8      	b.n	8015980 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1c8>
 801598e:	f640 00e8 	movw	r0, #2280	@ 0x8e8
 8015992:	4283      	cmp	r3, r0
 8015994:	d802      	bhi.n	801599c <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e4>
 8015996:	f640 00e7 	movw	r0, #2279	@ 0x8e7
 801599a:	e798      	b.n	80158ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x116>
 801599c:	f640 00e9 	movw	r0, #2281	@ 0x8e9
 80159a0:	4283      	cmp	r3, r0
 80159a2:	f47f af42 	bne.w	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80159a6:	e767      	b.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80159a8:	f640 00f6 	movw	r0, #2294	@ 0x8f6
 80159ac:	4283      	cmp	r3, r0
 80159ae:	f43f af63 	beq.w	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80159b2:	d802      	bhi.n	80159ba <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x202>
 80159b4:	f640 00f2 	movw	r0, #2290	@ 0x8f2
 80159b8:	e7f2      	b.n	80159a0 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x1e8>
 80159ba:	f640 00fa 	movw	r0, #2298	@ 0x8fa
 80159be:	4283      	cmp	r3, r0
 80159c0:	d805      	bhi.n	80159ce <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x216>
 80159c2:	f640 00f9 	movw	r0, #2297	@ 0x8f9
 80159c6:	4283      	cmp	r3, r0
 80159c8:	f4ff af2f 	bcc.w	801582a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x72>
 80159cc:	e754      	b.n	8015878 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xc0>
 80159ce:	f640 00fe 	movw	r0, #2302	@ 0x8fe
 80159d2:	4283      	cmp	r3, r0
 80159d4:	e7af      	b.n	8015936 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x17e>
 80159d6:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 80159da:	4617      	mov	r7, r2
 80159dc:	f102 0808 	add.w	r8, r2, #8
 80159e0:	4666      	mov	r6, ip
 80159e2:	6838      	ldr	r0, [r7, #0]
 80159e4:	3708      	adds	r7, #8
 80159e6:	f857 1c04 	ldr.w	r1, [r7, #-4]
 80159ea:	46e6      	mov	lr, ip
 80159ec:	4547      	cmp	r7, r8
 80159ee:	e8ae 0003 	stmia.w	lr!, {r0, r1}
 80159f2:	46f4      	mov	ip, lr
 80159f4:	d1f5      	bne.n	80159e2 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x22a>
 80159f6:	6838      	ldr	r0, [r7, #0]
 80159f8:	f8ce 0000 	str.w	r0, [lr]
 80159fc:	88b9      	ldrh	r1, [r7, #4]
 80159fe:	f8ae 1004 	strh.w	r1, [lr, #4]
 8015a02:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015a06:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015a0a:	d009      	beq.n	8015a20 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x268>
 8015a0c:	7b51      	ldrb	r1, [r2, #13]
 8015a0e:	7992      	ldrb	r2, [r2, #6]
 8015a10:	0149      	lsls	r1, r1, #5
 8015a12:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015a16:	4311      	orrs	r1, r2
 8015a18:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015a1c:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015a20:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015a24:	b2ad      	uxth	r5, r5
 8015a26:	d00d      	beq.n	8015a44 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x28c>
 8015a28:	442b      	add	r3, r5
 8015a2a:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015a2e:	b29b      	uxth	r3, r3
 8015a30:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015a34:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015a38:	10db      	asrs	r3, r3, #3
 8015a3a:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015a3e:	4313      	orrs	r3, r2
 8015a40:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015a44:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015a48:	00cb      	lsls	r3, r1, #3
 8015a4a:	064f      	lsls	r7, r1, #25
 8015a4c:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015a50:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015a54:	ea43 0302 	orr.w	r3, r3, r2
 8015a58:	bf44      	itt	mi
 8015a5a:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015a5e:	b21b      	sxthmi	r3, r3
 8015a60:	f8a4 305a 	strh.w	r3, [r4, #90]	@ 0x5a
 8015a64:	1b5b      	subs	r3, r3, r5
 8015a66:	f8a4 305c 	strh.w	r3, [r4, #92]	@ 0x5c
 8015a6a:	4632      	mov	r2, r6
 8015a6c:	e6f9      	b.n	8015862 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0xaa>
 8015a6e:	f104 0c4c 	add.w	ip, r4, #76	@ 0x4c
 8015a72:	4617      	mov	r7, r2
 8015a74:	f102 0908 	add.w	r9, r2, #8
 8015a78:	4666      	mov	r6, ip
 8015a7a:	6838      	ldr	r0, [r7, #0]
 8015a7c:	3708      	adds	r7, #8
 8015a7e:	f857 1c04 	ldr.w	r1, [r7, #-4]
 8015a82:	46e0      	mov	r8, ip
 8015a84:	454f      	cmp	r7, r9
 8015a86:	e8a8 0003 	stmia.w	r8!, {r0, r1}
 8015a8a:	46c4      	mov	ip, r8
 8015a8c:	d1f5      	bne.n	8015a7a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2c2>
 8015a8e:	6838      	ldr	r0, [r7, #0]
 8015a90:	f8c8 0000 	str.w	r0, [r8]
 8015a94:	88b9      	ldrh	r1, [r7, #4]
 8015a96:	f8a8 1004 	strh.w	r1, [r8, #4]
 8015a9a:	f9b4 005e 	ldrsh.w	r0, [r4, #94]	@ 0x5e
 8015a9e:	f510 4f00 	cmn.w	r0, #32768	@ 0x8000
 8015aa2:	d009      	beq.n	8015ab8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x300>
 8015aa4:	7b51      	ldrb	r1, [r2, #13]
 8015aa6:	7992      	ldrb	r2, [r2, #6]
 8015aa8:	0149      	lsls	r1, r1, #5
 8015aaa:	f401 7180 	and.w	r1, r1, #256	@ 0x100
 8015aae:	4311      	orrs	r1, r2
 8015ab0:	eba0 0051 	sub.w	r0, r0, r1, lsr #1
 8015ab4:	f884 0055 	strb.w	r0, [r4, #85]	@ 0x55
 8015ab8:	f513 4f00 	cmn.w	r3, #32768	@ 0x8000
 8015abc:	d00e      	beq.n	8015adc <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x324>
 8015abe:	eba3 030e 	sub.w	r3, r3, lr
 8015ac2:	f894 2059 	ldrb.w	r2, [r4, #89]	@ 0x59
 8015ac6:	b29b      	uxth	r3, r3
 8015ac8:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8015acc:	f884 3054 	strb.w	r3, [r4, #84]	@ 0x54
 8015ad0:	10db      	asrs	r3, r3, #3
 8015ad2:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8015ad6:	4313      	orrs	r3, r2
 8015ad8:	f884 3059 	strb.w	r3, [r4, #89]	@ 0x59
 8015adc:	f894 1059 	ldrb.w	r1, [r4, #89]	@ 0x59
 8015ae0:	00cb      	lsls	r3, r1, #3
 8015ae2:	0648      	lsls	r0, r1, #25
 8015ae4:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8015ae8:	f894 3054 	ldrb.w	r3, [r4, #84]	@ 0x54
 8015aec:	ea43 0302 	orr.w	r3, r3, r2
 8015af0:	bf44      	itt	mi
 8015af2:	f5a3 7300 	submi.w	r3, r3, #512	@ 0x200
 8015af6:	b21b      	sxthmi	r3, r3
 8015af8:	1b5d      	subs	r5, r3, r5
 8015afa:	f8a4 505c 	strh.w	r5, [r4, #92]	@ 0x5c
 8015afe:	e7b4      	b.n	8015a6a <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt+0x2b2>

08015b00 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE>:
 8015b00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015b04:	461e      	mov	r6, r3
 8015b06:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015b08:	4604      	mov	r4, r0
 8015b0a:	4617      	mov	r7, r2
 8015b0c:	eb00 0343 	add.w	r3, r0, r3, lsl #1
 8015b10:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015b14:	f7ee fc16 	bl	8004344 <_ZN8touchgfx12TextProvider15getNextLigatureEh>
 8015b18:	4605      	mov	r5, r0
 8015b1a:	b918      	cbnz	r0, 8015b24 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x24>
 8015b1c:	6030      	str	r0, [r6, #0]
 8015b1e:	4628      	mov	r0, r5
 8015b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8015b24:	683b      	ldr	r3, [r7, #0]
 8015b26:	4601      	mov	r1, r0
 8015b28:	4638      	mov	r0, r7
 8015b2a:	68db      	ldr	r3, [r3, #12]
 8015b2c:	4798      	blx	r3
 8015b2e:	f5a8 63c0 	sub.w	r3, r8, #1536	@ 0x600
 8015b32:	4602      	mov	r2, r0
 8015b34:	6030      	str	r0, [r6, #0]
 8015b36:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015b3a:	d213      	bcs.n	8015b64 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x64>
 8015b3c:	4643      	mov	r3, r8
 8015b3e:	4639      	mov	r1, r7
 8015b40:	4620      	mov	r0, r4
 8015b42:	f7ff fe39 	bl	80157b8 <_ZN8touchgfx12TextProvider17adjustArabicGlyphEPKNS_4FontEPKNS_9GlyphNodeEt>
 8015b46:	6030      	str	r0, [r6, #0]
 8015b48:	6833      	ldr	r3, [r6, #0]
 8015b4a:	b143      	cbz	r3, 8015b5e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x5e>
 8015b4c:	7b5a      	ldrb	r2, [r3, #13]
 8015b4e:	7a9b      	ldrb	r3, [r3, #10]
 8015b50:	0052      	lsls	r2, r2, #1
 8015b52:	f402 7280 	and.w	r2, r2, #256	@ 0x100
 8015b56:	4313      	orrs	r3, r2
 8015b58:	bf0c      	ite	eq
 8015b5a:	2301      	moveq	r3, #1
 8015b5c:	2300      	movne	r3, #0
 8015b5e:	f884 3061 	strb.w	r3, [r4, #97]	@ 0x61
 8015b62:	e7dc      	b.n	8015b1e <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x1e>
 8015b64:	f5a5 6360 	sub.w	r3, r5, #3584	@ 0xe00
 8015b68:	b29b      	uxth	r3, r3
 8015b6a:	2b7f      	cmp	r3, #127	@ 0x7f
 8015b6c:	d804      	bhi.n	8015b78 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x78>
 8015b6e:	4639      	mov	r1, r7
 8015b70:	4620      	mov	r0, r4
 8015b72:	f7ff fce7 	bl	8015544 <_ZN8touchgfx12TextProvider15adjustThaiGlyphEPKNS_4FontEPKNS_9GlyphNodeE>
 8015b76:	e7e6      	b.n	8015b46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>
 8015b78:	f894 3061 	ldrb.w	r3, [r4, #97]	@ 0x61
 8015b7c:	2b00      	cmp	r3, #0
 8015b7e:	d0e3      	beq.n	8015b48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015b80:	f640 1302 	movw	r3, #2306	@ 0x902
 8015b84:	429d      	cmp	r5, r3
 8015b86:	d1df      	bne.n	8015b48 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x48>
 8015b88:	4601      	mov	r1, r0
 8015b8a:	4620      	mov	r0, r4
 8015b8c:	f7ff fcaa 	bl	80154e4 <_ZN8touchgfx12TextProvider16adjustHindiGlyphEPKNS_9GlyphNodeE>
 8015b90:	e7d9      	b.n	8015b46 <_ZN8touchgfx12TextProvider15getNextLigatureEhPKNS_4FontERPKNS_9GlyphNodeE+0x46>

08015b92 <_ZN8touchgfx12TextProvider15fillInputBufferEv>:
 8015b92:	b510      	push	{r4, lr}
 8015b94:	4604      	mov	r4, r0
 8015b96:	f8b4 1040 	ldrh.w	r1, [r4, #64]	@ 0x40
 8015b9a:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015b9c:	b1e1      	cbz	r1, 8015bd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8015b9e:	2b0a      	cmp	r3, #10
 8015ba0:	d02d      	beq.n	8015bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015ba2:	8fe2      	ldrh	r2, [r4, #62]	@ 0x3e
 8015ba4:	3901      	subs	r1, #1
 8015ba6:	eb04 0042 	add.w	r0, r4, r2, lsl #1
 8015baa:	8f40      	ldrh	r0, [r0, #58]	@ 0x3a
 8015bac:	f8a4 1040 	strh.w	r1, [r4, #64]	@ 0x40
 8015bb0:	1c51      	adds	r1, r2, #1
 8015bb2:	b289      	uxth	r1, r1
 8015bb4:	2901      	cmp	r1, #1
 8015bb6:	bf8a      	itet	hi
 8015bb8:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8015bbc:	87e1      	strhls	r1, [r4, #62]	@ 0x3e
 8015bbe:	87e2      	strhhi	r2, [r4, #62]	@ 0x3e
 8015bc0:	1c5a      	adds	r2, r3, #1
 8015bc2:	8722      	strh	r2, [r4, #56]	@ 0x38
 8015bc4:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015bc6:	4413      	add	r3, r2
 8015bc8:	b29b      	uxth	r3, r3
 8015bca:	2b09      	cmp	r3, #9
 8015bcc:	bf88      	it	hi
 8015bce:	3b0a      	subhi	r3, #10
 8015bd0:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015bd4:	8458      	strh	r0, [r3, #34]	@ 0x22
 8015bd6:	e7de      	b.n	8015b96 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x4>
 8015bd8:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015bda:	2b0a      	cmp	r3, #10
 8015bdc:	d00f      	beq.n	8015bfe <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x6c>
 8015bde:	4620      	mov	r0, r4
 8015be0:	f7ff fc3f 	bl	8015462 <_ZN8touchgfx12TextProvider19getNextCharInternalEv>
 8015be4:	8f23      	ldrh	r3, [r4, #56]	@ 0x38
 8015be6:	1c5a      	adds	r2, r3, #1
 8015be8:	8722      	strh	r2, [r4, #56]	@ 0x38
 8015bea:	8ee2      	ldrh	r2, [r4, #54]	@ 0x36
 8015bec:	4413      	add	r3, r2
 8015bee:	b29b      	uxth	r3, r3
 8015bf0:	2b09      	cmp	r3, #9
 8015bf2:	bf88      	it	hi
 8015bf4:	3b0a      	subhi	r3, #10
 8015bf6:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015bfa:	8458      	strh	r0, [r3, #34]	@ 0x22
 8015bfc:	e7ec      	b.n	8015bd8 <_ZN8touchgfx12TextProvider15fillInputBufferEv+0x46>
 8015bfe:	bd10      	pop	{r4, pc}

08015c00 <_ZN8touchgfx12TextProvider11getNextCharEv>:
 8015c00:	b538      	push	{r3, r4, r5, lr}
 8015c02:	8ec3      	ldrh	r3, [r0, #54]	@ 0x36
 8015c04:	4604      	mov	r4, r0
 8015c06:	eb00 0243 	add.w	r2, r0, r3, lsl #1
 8015c0a:	8c55      	ldrh	r5, [r2, #34]	@ 0x22
 8015c0c:	8f02      	ldrh	r2, [r0, #56]	@ 0x38
 8015c0e:	3a01      	subs	r2, #1
 8015c10:	8702      	strh	r2, [r0, #56]	@ 0x38
 8015c12:	1c5a      	adds	r2, r3, #1
 8015c14:	b292      	uxth	r2, r2
 8015c16:	2a09      	cmp	r2, #9
 8015c18:	bf8a      	itet	hi
 8015c1a:	3b09      	subhi	r3, #9
 8015c1c:	86c2      	strhls	r2, [r0, #54]	@ 0x36
 8015c1e:	86c3      	strhhi	r3, [r0, #54]	@ 0x36
 8015c20:	f7ff ffb7 	bl	8015b92 <_ZN8touchgfx12TextProvider15fillInputBufferEv>
 8015c24:	8c23      	ldrh	r3, [r4, #32]
 8015c26:	2b01      	cmp	r3, #1
 8015c28:	bf9c      	itt	ls
 8015c2a:	3301      	addls	r3, #1
 8015c2c:	8423      	strhls	r3, [r4, #32]
 8015c2e:	8be3      	ldrh	r3, [r4, #30]
 8015c30:	b90b      	cbnz	r3, 8015c36 <_ZN8touchgfx12TextProvider11getNextCharEv+0x36>
 8015c32:	2302      	movs	r3, #2
 8015c34:	83e3      	strh	r3, [r4, #30]
 8015c36:	8be3      	ldrh	r3, [r4, #30]
 8015c38:	4628      	mov	r0, r5
 8015c3a:	3b01      	subs	r3, #1
 8015c3c:	b29b      	uxth	r3, r3
 8015c3e:	83e3      	strh	r3, [r4, #30]
 8015c40:	eb04 0443 	add.w	r4, r4, r3, lsl #1
 8015c44:	8365      	strh	r5, [r4, #26]
 8015c46:	bd38      	pop	{r3, r4, r5, pc}

08015c48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>:
 8015c48:	428a      	cmp	r2, r1
 8015c4a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015c4e:	8ec7      	ldrh	r7, [r0, #54]	@ 0x36
 8015c50:	d932      	bls.n	8015cb8 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x70>
 8015c52:	8f05      	ldrh	r5, [r0, #56]	@ 0x38
 8015c54:	1a54      	subs	r4, r2, r1
 8015c56:	f8b0 8040 	ldrh.w	r8, [r0, #64]	@ 0x40
 8015c5a:	19ee      	adds	r6, r5, r7
 8015c5c:	fa1f fe84 	uxth.w	lr, r4
 8015c60:	f8b0 c03e 	ldrh.w	ip, [r0, #62]	@ 0x3e
 8015c64:	3e01      	subs	r6, #1
 8015c66:	b2b4      	uxth	r4, r6
 8015c68:	eba4 090e 	sub.w	r9, r4, lr
 8015c6c:	fa1f f989 	uxth.w	r9, r9
 8015c70:	2c09      	cmp	r4, #9
 8015c72:	4626      	mov	r6, r4
 8015c74:	bf88      	it	hi
 8015c76:	f1a4 060a 	subhi.w	r6, r4, #10
 8015c7a:	f1bc 0f00 	cmp.w	ip, #0
 8015c7e:	f104 34ff 	add.w	r4, r4, #4294967295
 8015c82:	bf08      	it	eq
 8015c84:	f04f 0c02 	moveq.w	ip, #2
 8015c88:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8015c8c:	b2a4      	uxth	r4, r4
 8015c8e:	f10c 3cff 	add.w	ip, ip, #4294967295
 8015c92:	f8b6 a022 	ldrh.w	sl, [r6, #34]	@ 0x22
 8015c96:	454c      	cmp	r4, r9
 8015c98:	fa1f fc8c 	uxth.w	ip, ip
 8015c9c:	eb00 064c 	add.w	r6, r0, ip, lsl #1
 8015ca0:	f8a6 a03a 	strh.w	sl, [r6, #58]	@ 0x3a
 8015ca4:	d1e4      	bne.n	8015c70 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x28>
 8015ca6:	eba5 050e 	sub.w	r5, r5, lr
 8015caa:	eb0e 0408 	add.w	r4, lr, r8
 8015cae:	f8a0 c03e 	strh.w	ip, [r0, #62]	@ 0x3e
 8015cb2:	8705      	strh	r5, [r0, #56]	@ 0x38
 8015cb4:	f8a0 4040 	strh.w	r4, [r0, #64]	@ 0x40
 8015cb8:	8f04      	ldrh	r4, [r0, #56]	@ 0x38
 8015cba:	250a      	movs	r5, #10
 8015cbc:	1a64      	subs	r4, r4, r1
 8015cbe:	4439      	add	r1, r7
 8015cc0:	b289      	uxth	r1, r1
 8015cc2:	8704      	strh	r4, [r0, #56]	@ 0x38
 8015cc4:	2909      	cmp	r1, #9
 8015cc6:	bf88      	it	hi
 8015cc8:	390a      	subhi	r1, #10
 8015cca:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8015ccc:	b18a      	cbz	r2, 8015cf2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0xaa>
 8015cce:	8f01      	ldrh	r1, [r0, #56]	@ 0x38
 8015cd0:	3a01      	subs	r2, #1
 8015cd2:	3101      	adds	r1, #1
 8015cd4:	b292      	uxth	r2, r2
 8015cd6:	f833 4012 	ldrh.w	r4, [r3, r2, lsl #1]
 8015cda:	8701      	strh	r1, [r0, #56]	@ 0x38
 8015cdc:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8015cde:	b901      	cbnz	r1, 8015ce2 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x9a>
 8015ce0:	86c5      	strh	r5, [r0, #54]	@ 0x36
 8015ce2:	8ec1      	ldrh	r1, [r0, #54]	@ 0x36
 8015ce4:	3901      	subs	r1, #1
 8015ce6:	b289      	uxth	r1, r1
 8015ce8:	86c1      	strh	r1, [r0, #54]	@ 0x36
 8015cea:	eb00 0141 	add.w	r1, r0, r1, lsl #1
 8015cee:	844c      	strh	r4, [r1, #34]	@ 0x22
 8015cf0:	e7ec      	b.n	8015ccc <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt+0x84>
 8015cf2:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8015cf6:	f7ff bf4c 	b.w	8015b92 <_ZN8touchgfx12TextProvider15fillInputBufferEv>

08015cfa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>:
 8015cfa:	b570      	push	{r4, r5, r6, lr}
 8015cfc:	2500      	movs	r5, #0
 8015cfe:	4295      	cmp	r5, r2
 8015d00:	d011      	beq.n	8015d26 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x2c>
 8015d02:	8bc4      	ldrh	r4, [r0, #30]
 8015d04:	f831 6b02 	ldrh.w	r6, [r1], #2
 8015d08:	4414      	add	r4, r2
 8015d0a:	3c01      	subs	r4, #1
 8015d0c:	1b64      	subs	r4, r4, r5
 8015d0e:	b2a4      	uxth	r4, r4
 8015d10:	2c01      	cmp	r4, #1
 8015d12:	bf88      	it	hi
 8015d14:	3c02      	subhi	r4, #2
 8015d16:	eb00 0444 	add.w	r4, r0, r4, lsl #1
 8015d1a:	8b64      	ldrh	r4, [r4, #26]
 8015d1c:	42b4      	cmp	r4, r6
 8015d1e:	d117      	bne.n	8015d50 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x56>
 8015d20:	3501      	adds	r5, #1
 8015d22:	b2ad      	uxth	r5, r5
 8015d24:	e7eb      	b.n	8015cfe <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x4>
 8015d26:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 8015d2a:	2400      	movs	r4, #0
 8015d2c:	4413      	add	r3, r2
 8015d2e:	b2a2      	uxth	r2, r4
 8015d30:	429a      	cmp	r2, r3
 8015d32:	da0f      	bge.n	8015d54 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x5a>
 8015d34:	8ec6      	ldrh	r6, [r0, #54]	@ 0x36
 8015d36:	f831 5014 	ldrh.w	r5, [r1, r4, lsl #1]
 8015d3a:	3401      	adds	r4, #1
 8015d3c:	4432      	add	r2, r6
 8015d3e:	b292      	uxth	r2, r2
 8015d40:	2a09      	cmp	r2, #9
 8015d42:	bf88      	it	hi
 8015d44:	3a0a      	subhi	r2, #10
 8015d46:	eb00 0242 	add.w	r2, r0, r2, lsl #1
 8015d4a:	8c52      	ldrh	r2, [r2, #34]	@ 0x22
 8015d4c:	42aa      	cmp	r2, r5
 8015d4e:	d0ee      	beq.n	8015d2e <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x34>
 8015d50:	2000      	movs	r0, #0
 8015d52:	bd70      	pop	{r4, r5, r6, pc}
 8015d54:	2001      	movs	r0, #1
 8015d56:	e7fc      	b.n	8015d52 <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt+0x58>

08015d58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>:
 8015d58:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8015d5c:	4605      	mov	r5, r0
 8015d5e:	4616      	mov	r6, r2
 8015d60:	1c8c      	adds	r4, r1, #2
 8015d62:	8809      	ldrh	r1, [r1, #0]
 8015d64:	ea4f 3a11 	mov.w	sl, r1, lsr #12
 8015d68:	f834 301a 	ldrh.w	r3, [r4, sl, lsl #1]
 8015d6c:	42b3      	cmp	r3, r6
 8015d6e:	d124      	bne.n	8015dba <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x62>
 8015d70:	f3c1 2903 	ubfx	r9, r1, #8, #4
 8015d74:	f3c1 1803 	ubfx	r8, r1, #4, #4
 8015d78:	f001 070f 	and.w	r7, r1, #15
 8015d7c:	4652      	mov	r2, sl
 8015d7e:	f8cd 8000 	str.w	r8, [sp]
 8015d82:	464b      	mov	r3, r9
 8015d84:	4621      	mov	r1, r4
 8015d86:	4628      	mov	r0, r5
 8015d88:	f7ff ffb7 	bl	8015cfa <_ZN8touchgfx12TextProvider13gsubRuleMatchEPKtttt>
 8015d8c:	4683      	mov	fp, r0
 8015d8e:	b168      	cbz	r0, 8015dac <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x54>
 8015d90:	eb0a 0109 	add.w	r1, sl, r9
 8015d94:	463a      	mov	r2, r7
 8015d96:	4628      	mov	r0, r5
 8015d98:	4441      	add	r1, r8
 8015d9a:	eb04 0341 	add.w	r3, r4, r1, lsl #1
 8015d9e:	4649      	mov	r1, r9
 8015da0:	f7ff ff52 	bl	8015c48 <_ZN8touchgfx12TextProvider22replaceInputCharactersEttPKt>
 8015da4:	4658      	mov	r0, fp
 8015da6:	b003      	add	sp, #12
 8015da8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8015dac:	eb07 010a 	add.w	r1, r7, sl
 8015db0:	4449      	add	r1, r9
 8015db2:	4441      	add	r1, r8
 8015db4:	eb04 0141 	add.w	r1, r4, r1, lsl #1
 8015db8:	e7d2      	b.n	8015d60 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x8>
 8015dba:	f04f 0b00 	mov.w	fp, #0
 8015dbe:	e7f1      	b.n	8015da4 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt+0x4c>

08015dc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>:
 8015dc0:	b570      	push	{r4, r5, r6, lr}
 8015dc2:	8810      	ldrh	r0, [r2, #0]
 8015dc4:	4298      	cmp	r0, r3
 8015dc6:	d817      	bhi.n	8015df8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015dc8:	1e48      	subs	r0, r1, #1
 8015dca:	f832 0020 	ldrh.w	r0, [r2, r0, lsl #2]
 8015dce:	4298      	cmp	r0, r3
 8015dd0:	d312      	bcc.n	8015df8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015dd2:	2400      	movs	r4, #0
 8015dd4:	428c      	cmp	r4, r1
 8015dd6:	d20f      	bcs.n	8015df8 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x38>
 8015dd8:	1860      	adds	r0, r4, r1
 8015dda:	1040      	asrs	r0, r0, #1
 8015ddc:	f832 6020 	ldrh.w	r6, [r2, r0, lsl #2]
 8015de0:	0085      	lsls	r5, r0, #2
 8015de2:	42b3      	cmp	r3, r6
 8015de4:	d902      	bls.n	8015dec <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x2c>
 8015de6:	3001      	adds	r0, #1
 8015de8:	b284      	uxth	r4, r0
 8015dea:	e7f3      	b.n	8015dd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015dec:	d201      	bcs.n	8015df2 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x32>
 8015dee:	b281      	uxth	r1, r0
 8015df0:	e7f0      	b.n	8015dd4 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x14>
 8015df2:	442a      	add	r2, r5
 8015df4:	8850      	ldrh	r0, [r2, #2]
 8015df6:	bd70      	pop	{r4, r5, r6, pc}
 8015df8:	2000      	movs	r0, #0
 8015dfa:	e7fc      	b.n	8015df6 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt+0x36>

08015dfc <_ZN8touchgfx12TextProvider16substituteGlyphsEv>:
 8015dfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8015e00:	6c45      	ldr	r5, [r0, #68]	@ 0x44
 8015e02:	4604      	mov	r4, r0
 8015e04:	260b      	movs	r6, #11
 8015e06:	886f      	ldrh	r7, [r5, #2]
 8015e08:	087f      	lsrs	r7, r7, #1
 8015e0a:	3e01      	subs	r6, #1
 8015e0c:	d013      	beq.n	8015e36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015e0e:	8ee3      	ldrh	r3, [r4, #54]	@ 0x36
 8015e10:	462a      	mov	r2, r5
 8015e12:	4639      	mov	r1, r7
 8015e14:	4620      	mov	r0, r4
 8015e16:	eb04 0343 	add.w	r3, r4, r3, lsl #1
 8015e1a:	f8b3 8022 	ldrh.w	r8, [r3, #34]	@ 0x22
 8015e1e:	4643      	mov	r3, r8
 8015e20:	f7ff ffce 	bl	8015dc0 <_ZNK8touchgfx12TextProvider21gsubTableBinarySearchEtPKtt>
 8015e24:	b138      	cbz	r0, 8015e36 <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0x3a>
 8015e26:	eb05 0140 	add.w	r1, r5, r0, lsl #1
 8015e2a:	4642      	mov	r2, r8
 8015e2c:	4620      	mov	r0, r4
 8015e2e:	f7ff ff93 	bl	8015d58 <_ZN8touchgfx12TextProvider14applyGsubRulesEPKtt>
 8015e32:	2800      	cmp	r0, #0
 8015e34:	d1e9      	bne.n	8015e0a <_ZN8touchgfx12TextProvider16substituteGlyphsEv+0xe>
 8015e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

08015e3c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE>:
 8015e3c:	b570      	push	{r4, r5, r6, lr}
 8015e3e:	694a      	ldr	r2, [r1, #20]
 8015e40:	6a8d      	ldr	r5, [r1, #40]	@ 0x28
 8015e42:	684b      	ldr	r3, [r1, #4]
 8015e44:	1b54      	subs	r4, r2, r5
 8015e46:	6ace      	ldr	r6, [r1, #44]	@ 0x2c
 8015e48:	f000 8106 	beq.w	8016058 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x21c>
 8015e4c:	1b9b      	subs	r3, r3, r6
 8015e4e:	d003      	beq.n	8015e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 8015e50:	4363      	muls	r3, r4
 8015e52:	2210      	movs	r2, #16
 8015e54:	fb93 f3f2 	sdiv	r3, r3, r2
 8015e58:	680c      	ldr	r4, [r1, #0]
 8015e5a:	698a      	ldr	r2, [r1, #24]
 8015e5c:	1b65      	subs	r5, r4, r5
 8015e5e:	f000 80fd 	beq.w	801605c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x220>
 8015e62:	1b92      	subs	r2, r2, r6
 8015e64:	d003      	beq.n	8015e6e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8015e66:	436a      	muls	r2, r5
 8015e68:	2410      	movs	r4, #16
 8015e6a:	fb92 f2f4 	sdiv	r2, r2, r4
 8015e6e:	1a9b      	subs	r3, r3, r2
 8015e70:	ed9f 4a89 	vldr	s8, [pc, #548]	@ 8016098 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x25c>
 8015e74:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8015e78:	460a      	mov	r2, r1
 8015e7a:	ee07 3a90 	vmov	s15, r3
 8015e7e:	f100 040c 	add.w	r4, r0, #12
 8015e82:	4603      	mov	r3, r0
 8015e84:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015e88:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015e8c:	ee87 3a27 	vdiv.f32	s6, s14, s15
 8015e90:	eeb1 6a43 	vneg.f32	s12, s6
 8015e94:	edd2 7a02 	vldr	s15, [r2, #8]
 8015e98:	3214      	adds	r2, #20
 8015e9a:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8015e9e:	ece3 6a01 	vstmia	r3!, {s13}
 8015ea2:	429c      	cmp	r4, r3
 8015ea4:	ed52 7a02 	vldr	s15, [r2, #-8]
 8015ea8:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015eac:	edc3 7a02 	vstr	s15, [r3, #8]
 8015eb0:	ed52 7a01 	vldr	s15, [r2, #-4]
 8015eb4:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8015eb8:	edc3 7a05 	vstr	s15, [r3, #20]
 8015ebc:	d1ea      	bne.n	8015e94 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x58>
 8015ebe:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015ec0:	698b      	ldr	r3, [r1, #24]
 8015ec2:	edd0 4a02 	vldr	s9, [r0, #8]
 8015ec6:	1a9b      	subs	r3, r3, r2
 8015ec8:	edd0 3a00 	vldr	s7, [r0]
 8015ecc:	edd0 6a01 	vldr	s13, [r0, #4]
 8015ed0:	ee07 3a90 	vmov	s15, r3
 8015ed4:	684b      	ldr	r3, [r1, #4]
 8015ed6:	ee76 6ae4 	vsub.f32	s13, s13, s9
 8015eda:	ed90 5a05 	vldr	s10, [r0, #20]
 8015ede:	1a9b      	subs	r3, r3, r2
 8015ee0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8015ee4:	ee73 4ae4 	vsub.f32	s9, s7, s9
 8015ee8:	ed90 2a03 	vldr	s4, [r0, #12]
 8015eec:	ee07 3a10 	vmov	s14, r3
 8015ef0:	edd0 5a04 	vldr	s11, [r0, #16]
 8015ef4:	ee67 7a84 	vmul.f32	s15, s15, s8
 8015ef8:	ed90 1a07 	vldr	s2, [r0, #28]
 8015efc:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f00:	edd0 2a06 	vldr	s5, [r0, #24]
 8015f04:	ee75 5ac5 	vsub.f32	s11, s11, s10
 8015f08:	ee64 7ae7 	vnmul.f32	s15, s9, s15
 8015f0c:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f10:	ee32 5a45 	vsub.f32	s10, s4, s10
 8015f14:	eee6 7a87 	vfma.f32	s15, s13, s14
 8015f18:	ee67 7a83 	vmul.f32	s15, s15, s6
 8015f1c:	edc0 7a09 	vstr	s15, [r0, #36]	@ 0x24
 8015f20:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015f22:	694a      	ldr	r2, [r1, #20]
 8015f24:	1b13      	subs	r3, r2, r4
 8015f26:	ee07 3a10 	vmov	s14, r3
 8015f2a:	680b      	ldr	r3, [r1, #0]
 8015f2c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f30:	1b1b      	subs	r3, r3, r4
 8015f32:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f36:	ee64 4ac7 	vnmul.f32	s9, s9, s14
 8015f3a:	ee07 3a10 	vmov	s14, r3
 8015f3e:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f42:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f46:	eee6 4a87 	vfma.f32	s9, s13, s14
 8015f4a:	ee64 4a86 	vmul.f32	s9, s9, s12
 8015f4e:	edc0 4a0a 	vstr	s9, [r0, #40]	@ 0x28
 8015f52:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015f54:	698b      	ldr	r3, [r1, #24]
 8015f56:	1a9b      	subs	r3, r3, r2
 8015f58:	ee06 3a90 	vmov	s13, r3
 8015f5c:	684b      	ldr	r3, [r1, #4]
 8015f5e:	1a9b      	subs	r3, r3, r2
 8015f60:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8015f64:	ee07 3a10 	vmov	s14, r3
 8015f68:	ee66 6a84 	vmul.f32	s13, s13, s8
 8015f6c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f70:	ee65 6a66 	vnmul.f32	s13, s10, s13
 8015f74:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f78:	eee5 6a87 	vfma.f32	s13, s11, s14
 8015f7c:	ee66 6a83 	vmul.f32	s13, s13, s6
 8015f80:	edc0 6a0b 	vstr	s13, [r0, #44]	@ 0x2c
 8015f84:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015f86:	694a      	ldr	r2, [r1, #20]
 8015f88:	1b13      	subs	r3, r2, r4
 8015f8a:	ee07 3a10 	vmov	s14, r3
 8015f8e:	680b      	ldr	r3, [r1, #0]
 8015f90:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015f94:	1b1b      	subs	r3, r3, r4
 8015f96:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015f9a:	ee25 5a47 	vnmul.f32	s10, s10, s14
 8015f9e:	ee07 3a10 	vmov	s14, r3
 8015fa2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015fa6:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015faa:	eea5 5a87 	vfma.f32	s10, s11, s14
 8015fae:	edd0 5a08 	vldr	s11, [r0, #32]
 8015fb2:	ee31 1a65 	vsub.f32	s2, s2, s11
 8015fb6:	ee72 5ae5 	vsub.f32	s11, s5, s11
 8015fba:	ee25 5a06 	vmul.f32	s10, s10, s12
 8015fbe:	ed80 5a0c 	vstr	s10, [r0, #48]	@ 0x30
 8015fc2:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 8015fc4:	698b      	ldr	r3, [r1, #24]
 8015fc6:	1a9b      	subs	r3, r3, r2
 8015fc8:	ee07 3a10 	vmov	s14, r3
 8015fcc:	684b      	ldr	r3, [r1, #4]
 8015fce:	1a9b      	subs	r3, r3, r2
 8015fd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8015fd4:	ee01 3a90 	vmov	s3, r3
 8015fd8:	ee27 7a04 	vmul.f32	s14, s14, s8
 8015fdc:	eef8 1ae1 	vcvt.f32.s32	s3, s3
 8015fe0:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8015fe4:	ee61 1a84 	vmul.f32	s3, s3, s8
 8015fe8:	eea1 7a21 	vfma.f32	s14, s2, s3
 8015fec:	ee27 7a03 	vmul.f32	s14, s14, s6
 8015ff0:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 8015ff4:	6a8c      	ldr	r4, [r1, #40]	@ 0x28
 8015ff6:	694a      	ldr	r2, [r1, #20]
 8015ff8:	1b13      	subs	r3, r2, r4
 8015ffa:	ee03 3a10 	vmov	s6, r3
 8015ffe:	680b      	ldr	r3, [r1, #0]
 8016000:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016004:	1b1b      	subs	r3, r3, r4
 8016006:	ee23 3a04 	vmul.f32	s6, s6, s8
 801600a:	ee65 5ac3 	vnmul.f32	s11, s11, s6
 801600e:	ee03 3a10 	vmov	s6, r3
 8016012:	eeb8 3ac3 	vcvt.f32.s32	s6, s6
 8016016:	ee23 4a04 	vmul.f32	s8, s6, s8
 801601a:	eee1 5a04 	vfma.f32	s11, s2, s8
 801601e:	ee25 6a86 	vmul.f32	s12, s11, s12
 8016022:	ee62 5a67 	vnmul.f32	s11, s4, s15
 8016026:	ed80 6a0e 	vstr	s12, [r0, #56]	@ 0x38
 801602a:	eee3 5aa6 	vfma.f32	s11, s7, s13
 801602e:	eef5 5ac0 	vcmpe.f32	s11, #0.0
 8016032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016036:	dd13      	ble.n	8016060 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x224>
 8016038:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801603c:	ee62 7ae7 	vnmul.f32	s15, s5, s15
 8016040:	63c3      	str	r3, [r0, #60]	@ 0x3c
 8016042:	eee3 7a87 	vfma.f32	s15, s7, s14
 8016046:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 801604a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801604e:	dd15      	ble.n	801607c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x240>
 8016050:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016054:	6403      	str	r3, [r0, #64]	@ 0x40
 8016056:	bd70      	pop	{r4, r5, r6, pc}
 8016058:	4623      	mov	r3, r4
 801605a:	e6fd      	b.n	8015e58 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1c>
 801605c:	462a      	mov	r2, r5
 801605e:	e706      	b.n	8015e6e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x32>
 8016060:	d502      	bpl.n	8016068 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x22c>
 8016062:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016066:	e7e9      	b.n	801603c <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x200>
 8016068:	ee22 2a64 	vnmul.f32	s4, s4, s9
 801606c:	eea3 2a85 	vfma.f32	s4, s7, s10
 8016070:	eeb5 2ac0 	vcmpe.f32	s4, #0.0
 8016074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016078:	dade      	bge.n	8016038 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x1fc>
 801607a:	e7f2      	b.n	8016062 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x226>
 801607c:	d502      	bpl.n	8016084 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x248>
 801607e:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8016082:	e7e7      	b.n	8016054 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x218>
 8016084:	ee62 4ae4 	vnmul.f32	s9, s5, s9
 8016088:	eee3 4a86 	vfma.f32	s9, s7, s12
 801608c:	eef5 4ac0 	vcmpe.f32	s9, #0.0
 8016090:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8016094:	dadc      	bge.n	8016050 <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x214>
 8016096:	e7f2      	b.n	801607e <_ZN8touchgfx9GradientsC1EPKNS_7Point3DE+0x242>
 8016098:	3d800000 	.word	0x3d800000

0801609c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii>:
 801609c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80160a0:	2714      	movs	r7, #20
 80160a2:	435f      	muls	r7, r3
 80160a4:	eb02 0c07 	add.w	ip, r2, r7
 80160a8:	f8dc 5004 	ldr.w	r5, [ip, #4]
 80160ac:	f115 0e0f 	adds.w	lr, r5, #15
 80160b0:	f100 80a2 	bmi.w	80161f8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x15c>
 80160b4:	ea4f 1e2e 	mov.w	lr, lr, asr #4
 80160b8:	9c08      	ldr	r4, [sp, #32]
 80160ba:	2614      	movs	r6, #20
 80160bc:	f8c0 e014 	str.w	lr, [r0, #20]
 80160c0:	4366      	muls	r6, r4
 80160c2:	eb02 0806 	add.w	r8, r2, r6
 80160c6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 80160ca:	f115 040f 	adds.w	r4, r5, #15
 80160ce:	f100 809f 	bmi.w	8016210 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x174>
 80160d2:	1124      	asrs	r4, r4, #4
 80160d4:	eba4 040e 	sub.w	r4, r4, lr
 80160d8:	6184      	str	r4, [r0, #24]
 80160da:	2c00      	cmp	r4, #0
 80160dc:	f000 808a 	beq.w	80161f4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x158>
 80160e0:	f8dc 9004 	ldr.w	r9, [ip, #4]
 80160e4:	f8d8 4004 	ldr.w	r4, [r8, #4]
 80160e8:	5995      	ldr	r5, [r2, r6]
 80160ea:	eba4 0809 	sub.w	r8, r4, r9
 80160ee:	59d4      	ldr	r4, [r2, r7]
 80160f0:	eba5 0a04 	sub.w	sl, r5, r4
 80160f4:	ea4f 1608 	mov.w	r6, r8, lsl #4
 80160f8:	ea4f 150a 	mov.w	r5, sl, lsl #4
 80160fc:	fb0e fe05 	mul.w	lr, lr, r5
 8016100:	fb0a ee19 	mls	lr, sl, r9, lr
 8016104:	fb08 e404 	mla	r4, r8, r4, lr
 8016108:	3c01      	subs	r4, #1
 801610a:	19a4      	adds	r4, r4, r6
 801610c:	f100 808c 	bmi.w	8016228 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x18c>
 8016110:	fb94 fef6 	sdiv	lr, r4, r6
 8016114:	fb06 441e 	mls	r4, r6, lr, r4
 8016118:	f8c0 e000 	str.w	lr, [r0]
 801611c:	6104      	str	r4, [r0, #16]
 801611e:	2d00      	cmp	r5, #0
 8016120:	f2c0 8095 	blt.w	801624e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1b2>
 8016124:	fb95 f4f6 	sdiv	r4, r5, r6
 8016128:	fb06 5514 	mls	r5, r6, r4, r5
 801612c:	6044      	str	r4, [r0, #4]
 801612e:	6085      	str	r5, [r0, #8]
 8016130:	60c6      	str	r6, [r0, #12]
 8016132:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8016136:	f8dc 4004 	ldr.w	r4, [ip, #4]
 801613a:	6945      	ldr	r5, [r0, #20]
 801613c:	59d2      	ldr	r2, [r2, r7]
 801613e:	ebc4 1405 	rsb	r4, r4, r5, lsl #4
 8016142:	eddf 6a4b 	vldr	s13, [pc, #300]	@ 8016270 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1d4>
 8016146:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801614a:	ee07 4a10 	vmov	s14, r4
 801614e:	6804      	ldr	r4, [r0, #0]
 8016150:	ebc2 1204 	rsb	r2, r2, r4, lsl #4
 8016154:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8016158:	ee07 2a90 	vmov	s15, r2
 801615c:	ee27 7a26 	vmul.f32	s14, s14, s13
 8016160:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8016164:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8016168:	edd3 6a00 	vldr	s13, [r3]
 801616c:	eee6 6a07 	vfma.f32	s13, s12, s14
 8016170:	ed91 6a09 	vldr	s12, [r1, #36]	@ 0x24
 8016174:	eee6 6a27 	vfma.f32	s13, s12, s15
 8016178:	edc0 6a07 	vstr	s13, [r0, #28]
 801617c:	edd0 6a01 	vldr	s13, [r0, #4]
 8016180:	edd1 5a09 	vldr	s11, [r1, #36]	@ 0x24
 8016184:	eef8 6ae6 	vcvt.f32.s32	s13, s13
 8016188:	ed91 6a0a 	vldr	s12, [r1, #40]	@ 0x28
 801618c:	eea6 6aa5 	vfma.f32	s12, s13, s11
 8016190:	ed80 6a08 	vstr	s12, [r0, #32]
 8016194:	6a4a      	ldr	r2, [r1, #36]	@ 0x24
 8016196:	6242      	str	r2, [r0, #36]	@ 0x24
 8016198:	edd1 5a0c 	vldr	s11, [r1, #48]	@ 0x30
 801619c:	ed93 6a03 	vldr	s12, [r3, #12]
 80161a0:	eea5 6a87 	vfma.f32	s12, s11, s14
 80161a4:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80161a8:	eea5 6aa7 	vfma.f32	s12, s11, s15
 80161ac:	ed80 6a0a 	vstr	s12, [r0, #40]	@ 0x28
 80161b0:	edd1 5a0b 	vldr	s11, [r1, #44]	@ 0x2c
 80161b4:	ed91 6a0c 	vldr	s12, [r1, #48]	@ 0x30
 80161b8:	eea6 6aa5 	vfma.f32	s12, s13, s11
 80161bc:	ed80 6a0b 	vstr	s12, [r0, #44]	@ 0x2c
 80161c0:	6aca      	ldr	r2, [r1, #44]	@ 0x2c
 80161c2:	6302      	str	r2, [r0, #48]	@ 0x30
 80161c4:	ed93 6a06 	vldr	s12, [r3, #24]
 80161c8:	edd1 5a0e 	vldr	s11, [r1, #56]	@ 0x38
 80161cc:	eea5 6a87 	vfma.f32	s12, s11, s14
 80161d0:	eeb0 7a46 	vmov.f32	s14, s12
 80161d4:	ed91 6a0d 	vldr	s12, [r1, #52]	@ 0x34
 80161d8:	eea6 7a27 	vfma.f32	s14, s12, s15
 80161dc:	ed80 7a0d 	vstr	s14, [r0, #52]	@ 0x34
 80161e0:	ed91 7a0d 	vldr	s14, [r1, #52]	@ 0x34
 80161e4:	edd1 7a0e 	vldr	s15, [r1, #56]	@ 0x38
 80161e8:	eee6 7a87 	vfma.f32	s15, s13, s14
 80161ec:	edc0 7a0e 	vstr	s15, [r0, #56]	@ 0x38
 80161f0:	6b4b      	ldr	r3, [r1, #52]	@ 0x34
 80161f2:	63c3      	str	r3, [r0, #60]	@ 0x3c
 80161f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80161f8:	2410      	movs	r4, #16
 80161fa:	f1c5 0501 	rsb	r5, r5, #1
 80161fe:	fb9e fef4 	sdiv	lr, lr, r4
 8016202:	f015 050f 	ands.w	r5, r5, #15
 8016206:	bf18      	it	ne
 8016208:	2501      	movne	r5, #1
 801620a:	ebae 0e05 	sub.w	lr, lr, r5
 801620e:	e753      	b.n	80160b8 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x1c>
 8016210:	f04f 0910 	mov.w	r9, #16
 8016214:	f1c5 0501 	rsb	r5, r5, #1
 8016218:	fb94 f4f9 	sdiv	r4, r4, r9
 801621c:	f015 050f 	ands.w	r5, r5, #15
 8016220:	bf18      	it	ne
 8016222:	2501      	movne	r5, #1
 8016224:	1b64      	subs	r4, r4, r5
 8016226:	e755      	b.n	80160d4 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x38>
 8016228:	4264      	negs	r4, r4
 801622a:	fb94 fef6 	sdiv	lr, r4, r6
 801622e:	f1ce 0800 	rsb	r8, lr, #0
 8016232:	fb06 441e 	mls	r4, r6, lr, r4
 8016236:	f8c0 8000 	str.w	r8, [r0]
 801623a:	6104      	str	r4, [r0, #16]
 801623c:	2c00      	cmp	r4, #0
 801623e:	f43f af6e 	beq.w	801611e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x82>
 8016242:	ea6f 0e0e 	mvn.w	lr, lr
 8016246:	1b34      	subs	r4, r6, r4
 8016248:	f8c0 e000 	str.w	lr, [r0]
 801624c:	e766      	b.n	801611c <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x80>
 801624e:	426d      	negs	r5, r5
 8016250:	fb95 f4f6 	sdiv	r4, r5, r6
 8016254:	f1c4 0e00 	rsb	lr, r4, #0
 8016258:	fb06 5514 	mls	r5, r6, r4, r5
 801625c:	f8c0 e004 	str.w	lr, [r0, #4]
 8016260:	6085      	str	r5, [r0, #8]
 8016262:	2d00      	cmp	r5, #0
 8016264:	f43f af64 	beq.w	8016130 <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x94>
 8016268:	43e4      	mvns	r4, r4
 801626a:	1b75      	subs	r5, r6, r5
 801626c:	6044      	str	r4, [r0, #4]
 801626e:	e75e      	b.n	801612e <_ZN8touchgfx4EdgeC1ERKNS_9GradientsEPKNS_7Point3DEii+0x92>
 8016270:	3d800000 	.word	0x3d800000

08016274 <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE>:
 8016274:	4b01      	ldr	r3, [pc, #4]	@ (801627c <_ZN8touchgfx11FontManager15setFontProviderEPNS_12FontProviderE+0x8>)
 8016276:	6018      	str	r0, [r3, #0]
 8016278:	4770      	bx	lr
 801627a:	bf00      	nop
 801627c:	24025410 	.word	0x24025410

08016280 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>:
 8016280:	4b06      	ldr	r3, [pc, #24]	@ (801629c <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x1c>)
 8016282:	881a      	ldrh	r2, [r3, #0]
 8016284:	4282      	cmp	r2, r0
 8016286:	d807      	bhi.n	8016298 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x18>
 8016288:	4b05      	ldr	r3, [pc, #20]	@ (80162a0 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt+0x20>)
 801628a:	881b      	ldrh	r3, [r3, #0]
 801628c:	4413      	add	r3, r2
 801628e:	4298      	cmp	r0, r3
 8016290:	bfac      	ite	ge
 8016292:	2000      	movge	r0, #0
 8016294:	2001      	movlt	r0, #1
 8016296:	4770      	bx	lr
 8016298:	2000      	movs	r0, #0
 801629a:	4770      	bx	lr
 801629c:	24025430 	.word	0x24025430
 80162a0:	24025434 	.word	0x24025434

080162a4 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt>:
 80162a4:	b508      	push	{r3, lr}
 80162a6:	4601      	mov	r1, r0
 80162a8:	f7ff ffea 	bl	8016280 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80162ac:	b118      	cbz	r0, 80162b6 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x12>
 80162ae:	4b02      	ldr	r3, [pc, #8]	@ (80162b8 <_ZN8touchgfx6Bitmap23dynamicBitmapGetAddressEt+0x14>)
 80162b0:	681b      	ldr	r3, [r3, #0]
 80162b2:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
 80162b6:	bd08      	pop	{r3, pc}
 80162b8:	24025414 	.word	0x24025414

080162bc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>:
 80162bc:	b538      	push	{r3, r4, r5, lr}
 80162be:	4604      	mov	r4, r0
 80162c0:	f7ff ffde 	bl	8016280 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 80162c4:	b1d8      	cbz	r0, 80162fe <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 80162c6:	4b0f      	ldr	r3, [pc, #60]	@ (8016304 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x48>)
 80162c8:	881b      	ldrh	r3, [r3, #0]
 80162ca:	1ae4      	subs	r4, r4, r3
 80162cc:	230e      	movs	r3, #14
 80162ce:	4363      	muls	r3, r4
 80162d0:	4c0d      	ldr	r4, [pc, #52]	@ (8016308 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x4c>)
 80162d2:	6825      	ldr	r5, [r4, #0]
 80162d4:	18ea      	adds	r2, r5, r3
 80162d6:	7b12      	ldrb	r2, [r2, #12]
 80162d8:	f012 0220 	ands.w	r2, r2, #32
 80162dc:	d010      	beq.n	8016300 <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x44>
 80162de:	f9b1 2000 	ldrsh.w	r2, [r1]
 80162e2:	52ea      	strh	r2, [r5, r3]
 80162e4:	6822      	ldr	r2, [r4, #0]
 80162e6:	f9b1 5002 	ldrsh.w	r5, [r1, #2]
 80162ea:	441a      	add	r2, r3
 80162ec:	8055      	strh	r5, [r2, #2]
 80162ee:	6822      	ldr	r2, [r4, #0]
 80162f0:	4413      	add	r3, r2
 80162f2:	f9b1 2004 	ldrsh.w	r2, [r1, #4]
 80162f6:	809a      	strh	r2, [r3, #4]
 80162f8:	f9b1 2006 	ldrsh.w	r2, [r1, #6]
 80162fc:	80da      	strh	r2, [r3, #6]
 80162fe:	bd38      	pop	{r3, r4, r5, pc}
 8016300:	4610      	mov	r0, r2
 8016302:	e7fc      	b.n	80162fe <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE+0x42>
 8016304:	24025430 	.word	0x24025430
 8016308:	24025418 	.word	0x24025418

0801630c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>:
 801630c:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 8016310:	4606      	mov	r6, r0
 8016312:	460c      	mov	r4, r1
 8016314:	f7ff ffb4 	bl	8016280 <_ZN8touchgfx6Bitmap15isDynamicBitmapEt>
 8016318:	b918      	cbnz	r0, 8016322 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x16>
 801631a:	2000      	movs	r0, #0
 801631c:	b002      	add	sp, #8
 801631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8016322:	4608      	mov	r0, r1
 8016324:	f7f8 fe11 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016328:	2800      	cmp	r0, #0
 801632a:	d1f6      	bne.n	801631a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801632c:	4b3f      	ldr	r3, [pc, #252]	@ (801642c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x120>)
 801632e:	f8df 9100 	ldr.w	r9, [pc, #256]	@ 8016430 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x124>
 8016332:	881d      	ldrh	r5, [r3, #0]
 8016334:	f8d9 a000 	ldr.w	sl, [r9]
 8016338:	46c8      	mov	r8, r9
 801633a:	1b73      	subs	r3, r6, r5
 801633c:	250e      	movs	r5, #14
 801633e:	435d      	muls	r5, r3
 8016340:	eb0a 0705 	add.w	r7, sl, r5
 8016344:	7b3b      	ldrb	r3, [r7, #12]
 8016346:	f013 0f20 	tst.w	r3, #32
 801634a:	d0e6      	beq.n	801631a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 801634c:	4621      	mov	r1, r4
 801634e:	4638      	mov	r0, r7
 8016350:	f7fd f808 	bl	8013364 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016354:	2800      	cmp	r0, #0
 8016356:	d1e1      	bne.n	801631c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 8016358:	4639      	mov	r1, r7
 801635a:	4620      	mov	r0, r4
 801635c:	f7fd f802 	bl	8013364 <_ZNK8touchgfx4Rect8includesERKS0_>
 8016360:	b108      	cbz	r0, 8016366 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x5a>
 8016362:	4621      	mov	r1, r4
 8016364:	e020      	b.n	80163a8 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9c>
 8016366:	f9b4 2000 	ldrsh.w	r2, [r4]
 801636a:	f93a 3005 	ldrsh.w	r3, [sl, r5]
 801636e:	429a      	cmp	r2, r3
 8016370:	d11e      	bne.n	80163b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 8016372:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 8016376:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 801637a:	429a      	cmp	r2, r3
 801637c:	d118      	bne.n	80163b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 801637e:	6820      	ldr	r0, [r4, #0]
 8016380:	466b      	mov	r3, sp
 8016382:	6861      	ldr	r1, [r4, #4]
 8016384:	c303      	stmia	r3!, {r0, r1}
 8016386:	4639      	mov	r1, r7
 8016388:	4668      	mov	r0, sp
 801638a:	f7fd f811 	bl	80133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 801638e:	f8d9 3000 	ldr.w	r3, [r9]
 8016392:	f9b4 2006 	ldrsh.w	r2, [r4, #6]
 8016396:	442b      	add	r3, r5
 8016398:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 801639c:	4413      	add	r3, r2
 801639e:	f9bd 2006 	ldrsh.w	r2, [sp, #6]
 80163a2:	4293      	cmp	r3, r2
 80163a4:	dc04      	bgt.n	80163b0 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xa4>
 80163a6:	4669      	mov	r1, sp
 80163a8:	4630      	mov	r0, r6
 80163aa:	f7ff ff87 	bl	80162bc <_ZN8touchgfx6Bitmap25dynamicBitmapSetSolidRectEtRKNS_4RectE>
 80163ae:	e7b5      	b.n	801631c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x10>
 80163b0:	f8d8 3000 	ldr.w	r3, [r8]
 80163b4:	f9b4 1002 	ldrsh.w	r1, [r4, #2]
 80163b8:	442b      	add	r3, r5
 80163ba:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 80163be:	4291      	cmp	r1, r2
 80163c0:	d119      	bne.n	80163f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80163c2:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 80163c6:	f9b3 2006 	ldrsh.w	r2, [r3, #6]
 80163ca:	4291      	cmp	r1, r2
 80163cc:	d113      	bne.n	80163f6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xea>
 80163ce:	6820      	ldr	r0, [r4, #0]
 80163d0:	466a      	mov	r2, sp
 80163d2:	6861      	ldr	r1, [r4, #4]
 80163d4:	c203      	stmia	r2!, {r0, r1}
 80163d6:	4619      	mov	r1, r3
 80163d8:	4668      	mov	r0, sp
 80163da:	f7fc ffe9 	bl	80133b0 <_ZN8touchgfx4Rect11expandToFitERKS0_>
 80163de:	f8d8 3000 	ldr.w	r3, [r8]
 80163e2:	f9b4 2004 	ldrsh.w	r2, [r4, #4]
 80163e6:	442b      	add	r3, r5
 80163e8:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80163ec:	4413      	add	r3, r2
 80163ee:	f9bd 2004 	ldrsh.w	r2, [sp, #4]
 80163f2:	4293      	cmp	r3, r2
 80163f4:	ddd7      	ble.n	80163a6 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x9a>
 80163f6:	4620      	mov	r0, r4
 80163f8:	f7f8 fda7 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 80163fc:	b990      	cbnz	r0, 8016424 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x118>
 80163fe:	88a7      	ldrh	r7, [r4, #4]
 8016400:	88e3      	ldrh	r3, [r4, #6]
 8016402:	fb17 f703 	smulbb	r7, r7, r3
 8016406:	f8d8 3000 	ldr.w	r3, [r8]
 801640a:	441d      	add	r5, r3
 801640c:	4628      	mov	r0, r5
 801640e:	f7f8 fd9c 	bl	800ef4a <_ZNK8touchgfx4Rect7isEmptyEv>
 8016412:	b948      	cbnz	r0, 8016428 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x11c>
 8016414:	88ab      	ldrh	r3, [r5, #4]
 8016416:	88ea      	ldrh	r2, [r5, #6]
 8016418:	fb13 f302 	smulbb	r3, r3, r2
 801641c:	42bb      	cmp	r3, r7
 801641e:	f6bf af7c 	bge.w	801631a <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xe>
 8016422:	e79e      	b.n	8016362 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x56>
 8016424:	2700      	movs	r7, #0
 8016426:	e7ee      	b.n	8016406 <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0xfa>
 8016428:	2300      	movs	r3, #0
 801642a:	e7f7      	b.n	801641c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE+0x110>
 801642c:	24025430 	.word	0x24025430
 8016430:	24025418 	.word	0x24025418

08016434 <_ZN8touchgfx6Bitmap10clearCacheEv>:
 8016434:	b5f0      	push	{r4, r5, r6, r7, lr}
 8016436:	4c24      	ldr	r4, [pc, #144]	@ (80164c8 <_ZN8touchgfx6Bitmap10clearCacheEv+0x94>)
 8016438:	6823      	ldr	r3, [r4, #0]
 801643a:	2b00      	cmp	r3, #0
 801643c:	d042      	beq.n	80164c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 801643e:	4a23      	ldr	r2, [pc, #140]	@ (80164cc <_ZN8touchgfx6Bitmap10clearCacheEv+0x98>)
 8016440:	4d23      	ldr	r5, [pc, #140]	@ (80164d0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x9c>)
 8016442:	8811      	ldrh	r1, [r2, #0]
 8016444:	f8b5 c000 	ldrh.w	ip, [r5]
 8016448:	4822      	ldr	r0, [pc, #136]	@ (80164d4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa0>)
 801644a:	4461      	add	r1, ip
 801644c:	1c4a      	adds	r2, r1, #1
 801644e:	008f      	lsls	r7, r1, #2
 8016450:	f022 0201 	bic.w	r2, r2, #1
 8016454:	19de      	adds	r6, r3, r7
 8016456:	0412      	lsls	r2, r2, #16
 8016458:	6006      	str	r6, [r0, #0]
 801645a:	4e1f      	ldr	r6, [pc, #124]	@ (80164d8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xa4>)
 801645c:	0c12      	lsrs	r2, r2, #16
 801645e:	eb07 0742 	add.w	r7, r7, r2, lsl #1
 8016462:	19da      	adds	r2, r3, r7
 8016464:	6032      	str	r2, [r6, #0]
 8016466:	220e      	movs	r2, #14
 8016468:	fb02 f20c 	mul.w	r2, r2, ip
 801646c:	3203      	adds	r2, #3
 801646e:	f022 0203 	bic.w	r2, r2, #3
 8016472:	443a      	add	r2, r7
 8016474:	4f19      	ldr	r7, [pc, #100]	@ (80164dc <_ZN8touchgfx6Bitmap10clearCacheEv+0xa8>)
 8016476:	4413      	add	r3, r2
 8016478:	603b      	str	r3, [r7, #0]
 801647a:	2300      	movs	r3, #0
 801647c:	4f18      	ldr	r7, [pc, #96]	@ (80164e0 <_ZN8touchgfx6Bitmap10clearCacheEv+0xac>)
 801647e:	469c      	mov	ip, r3
 8016480:	803b      	strh	r3, [r7, #0]
 8016482:	4f18      	ldr	r7, [pc, #96]	@ (80164e4 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb0>)
 8016484:	683f      	ldr	r7, [r7, #0]
 8016486:	1aba      	subs	r2, r7, r2
 8016488:	4f17      	ldr	r7, [pc, #92]	@ (80164e8 <_ZN8touchgfx6Bitmap10clearCacheEv+0xb4>)
 801648a:	603a      	str	r2, [r7, #0]
 801648c:	f64f 77ff 	movw	r7, #65535	@ 0xffff
 8016490:	4a16      	ldr	r2, [pc, #88]	@ (80164ec <_ZN8touchgfx6Bitmap10clearCacheEv+0xb8>)
 8016492:	8013      	strh	r3, [r2, #0]
 8016494:	428b      	cmp	r3, r1
 8016496:	d10d      	bne.n	80164b4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x80>
 8016498:	882d      	ldrh	r5, [r5, #0]
 801649a:	2300      	movs	r3, #0
 801649c:	6830      	ldr	r0, [r6, #0]
 801649e:	240e      	movs	r4, #14
 80164a0:	429d      	cmp	r5, r3
 80164a2:	d90f      	bls.n	80164c4 <_ZN8touchgfx6Bitmap10clearCacheEv+0x90>
 80164a4:	fb04 0203 	mla	r2, r4, r3, r0
 80164a8:	3301      	adds	r3, #1
 80164aa:	7b11      	ldrb	r1, [r2, #12]
 80164ac:	f36f 1145 	bfc	r1, #5, #1
 80164b0:	7311      	strb	r1, [r2, #12]
 80164b2:	e7f5      	b.n	80164a0 <_ZN8touchgfx6Bitmap10clearCacheEv+0x6c>
 80164b4:	6822      	ldr	r2, [r4, #0]
 80164b6:	f842 c023 	str.w	ip, [r2, r3, lsl #2]
 80164ba:	6802      	ldr	r2, [r0, #0]
 80164bc:	f822 7013 	strh.w	r7, [r2, r3, lsl #1]
 80164c0:	3301      	adds	r3, #1
 80164c2:	e7e7      	b.n	8016494 <_ZN8touchgfx6Bitmap10clearCacheEv+0x60>
 80164c4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80164c6:	bf00      	nop
 80164c8:	24025414 	.word	0x24025414
 80164cc:	24025430 	.word	0x24025430
 80164d0:	24025434 	.word	0x24025434
 80164d4:	24025428 	.word	0x24025428
 80164d8:	24025418 	.word	0x24025418
 80164dc:	24025420 	.word	0x24025420
 80164e0:	24025432 	.word	0x24025432
 80164e4:	2402541c 	.word	0x2402541c
 80164e8:	2402542c 	.word	0x2402542c
 80164ec:	24025424 	.word	0x24025424

080164f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>:
 80164f0:	4b06      	ldr	r3, [pc, #24]	@ (801650c <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x1c>)
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	b943      	cbnz	r3, 8016508 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80164f6:	b139      	cbz	r1, 8016508 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x18>
 80164f8:	4b05      	ldr	r3, [pc, #20]	@ (8016510 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x20>)
 80164fa:	801a      	strh	r2, [r3, #0]
 80164fc:	4b05      	ldr	r3, [pc, #20]	@ (8016514 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x24>)
 80164fe:	6019      	str	r1, [r3, #0]
 8016500:	4b05      	ldr	r3, [pc, #20]	@ (8016518 <_ZN8touchgfx6Bitmap8setCacheEPtmm+0x28>)
 8016502:	6018      	str	r0, [r3, #0]
 8016504:	f7ff bf96 	b.w	8016434 <_ZN8touchgfx6Bitmap10clearCacheEv>
 8016508:	4770      	bx	lr
 801650a:	bf00      	nop
 801650c:	24025420 	.word	0x24025420
 8016510:	24025434 	.word	0x24025434
 8016514:	2402541c 	.word	0x2402541c
 8016518:	24025414 	.word	0x24025414

0801651c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm>:
 801651c:	b470      	push	{r4, r5, r6}
 801651e:	4c07      	ldr	r4, [pc, #28]	@ (801653c <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x20>)
 8016520:	4605      	mov	r5, r0
 8016522:	4610      	mov	r0, r2
 8016524:	9a03      	ldr	r2, [sp, #12]
 8016526:	6826      	ldr	r6, [r4, #0]
 8016528:	b936      	cbnz	r6, 8016538 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x1c>
 801652a:	6025      	str	r5, [r4, #0]
 801652c:	4c04      	ldr	r4, [pc, #16]	@ (8016540 <_ZN8touchgfx6Bitmap22registerBitmapDatabaseEPKNS0_10BitmapDataEtPtmm+0x24>)
 801652e:	8021      	strh	r1, [r4, #0]
 8016530:	4619      	mov	r1, r3
 8016532:	bc70      	pop	{r4, r5, r6}
 8016534:	f7ff bfdc 	b.w	80164f0 <_ZN8touchgfx6Bitmap8setCacheEPtmm>
 8016538:	bc70      	pop	{r4, r5, r6}
 801653a:	4770      	bx	lr
 801653c:	24025438 	.word	0x24025438
 8016540:	24025430 	.word	0x24025430

08016544 <_ZNK8touchgfx6Bitmap8getWidthEv>:
 8016544:	4a12      	ldr	r2, [pc, #72]	@ (8016590 <_ZNK8touchgfx6Bitmap8getWidthEv+0x4c>)
 8016546:	8803      	ldrh	r3, [r0, #0]
 8016548:	8812      	ldrh	r2, [r2, #0]
 801654a:	4293      	cmp	r3, r2
 801654c:	d207      	bcs.n	801655e <_ZNK8touchgfx6Bitmap8getWidthEv+0x1a>
 801654e:	4a11      	ldr	r2, [pc, #68]	@ (8016594 <_ZNK8touchgfx6Bitmap8getWidthEv+0x50>)
 8016550:	2114      	movs	r1, #20
 8016552:	6812      	ldr	r2, [r2, #0]
 8016554:	fb01 2303 	mla	r3, r1, r3, r2
 8016558:	f9b3 0008 	ldrsh.w	r0, [r3, #8]
 801655c:	4770      	bx	lr
 801655e:	490e      	ldr	r1, [pc, #56]	@ (8016598 <_ZNK8touchgfx6Bitmap8getWidthEv+0x54>)
 8016560:	8809      	ldrh	r1, [r1, #0]
 8016562:	4411      	add	r1, r2
 8016564:	428b      	cmp	r3, r1
 8016566:	da04      	bge.n	8016572 <_ZNK8touchgfx6Bitmap8getWidthEv+0x2e>
 8016568:	1a9b      	subs	r3, r3, r2
 801656a:	4a0c      	ldr	r2, [pc, #48]	@ (801659c <_ZNK8touchgfx6Bitmap8getWidthEv+0x58>)
 801656c:	210e      	movs	r1, #14
 801656e:	6812      	ldr	r2, [r2, #0]
 8016570:	e7f0      	b.n	8016554 <_ZNK8touchgfx6Bitmap8getWidthEv+0x10>
 8016572:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8016576:	4293      	cmp	r3, r2
 8016578:	d108      	bne.n	801658c <_ZNK8touchgfx6Bitmap8getWidthEv+0x48>
 801657a:	4b09      	ldr	r3, [pc, #36]	@ (80165a0 <_ZNK8touchgfx6Bitmap8getWidthEv+0x5c>)
 801657c:	781b      	ldrb	r3, [r3, #0]
 801657e:	b91b      	cbnz	r3, 8016588 <_ZNK8touchgfx6Bitmap8getWidthEv+0x44>
 8016580:	4b08      	ldr	r3, [pc, #32]	@ (80165a4 <_ZNK8touchgfx6Bitmap8getWidthEv+0x60>)
 8016582:	f9b3 0000 	ldrsh.w	r0, [r3]
 8016586:	4770      	bx	lr
 8016588:	4b07      	ldr	r3, [pc, #28]	@ (80165a8 <_ZNK8touchgfx6Bitmap8getWidthEv+0x64>)
 801658a:	e7fa      	b.n	8016582 <_ZNK8touchgfx6Bitmap8getWidthEv+0x3e>
 801658c:	2000      	movs	r0, #0
 801658e:	4770      	bx	lr
 8016590:	24025430 	.word	0x24025430
 8016594:	24025438 	.word	0x24025438
 8016598:	24025434 	.word	0x24025434
 801659c:	24025418 	.word	0x24025418
 80165a0:	240253a0 	.word	0x240253a0
 80165a4:	240253a2 	.word	0x240253a2
 80165a8:	240253a4 	.word	0x240253a4

080165ac <_ZNK8touchgfx6Bitmap9getHeightEv>:
 80165ac:	4a12      	ldr	r2, [pc, #72]	@ (80165f8 <_ZNK8touchgfx6Bitmap9getHeightEv+0x4c>)
 80165ae:	8803      	ldrh	r3, [r0, #0]
 80165b0:	8812      	ldrh	r2, [r2, #0]
 80165b2:	4293      	cmp	r3, r2
 80165b4:	d207      	bcs.n	80165c6 <_ZNK8touchgfx6Bitmap9getHeightEv+0x1a>
 80165b6:	4a11      	ldr	r2, [pc, #68]	@ (80165fc <_ZNK8touchgfx6Bitmap9getHeightEv+0x50>)
 80165b8:	2114      	movs	r1, #20
 80165ba:	6812      	ldr	r2, [r2, #0]
 80165bc:	fb01 2303 	mla	r3, r1, r3, r2
 80165c0:	f9b3 000a 	ldrsh.w	r0, [r3, #10]
 80165c4:	4770      	bx	lr
 80165c6:	490e      	ldr	r1, [pc, #56]	@ (8016600 <_ZNK8touchgfx6Bitmap9getHeightEv+0x54>)
 80165c8:	8809      	ldrh	r1, [r1, #0]
 80165ca:	4411      	add	r1, r2
 80165cc:	428b      	cmp	r3, r1
 80165ce:	da04      	bge.n	80165da <_ZNK8touchgfx6Bitmap9getHeightEv+0x2e>
 80165d0:	1a9b      	subs	r3, r3, r2
 80165d2:	4a0c      	ldr	r2, [pc, #48]	@ (8016604 <_ZNK8touchgfx6Bitmap9getHeightEv+0x58>)
 80165d4:	210e      	movs	r1, #14
 80165d6:	6812      	ldr	r2, [r2, #0]
 80165d8:	e7f0      	b.n	80165bc <_ZNK8touchgfx6Bitmap9getHeightEv+0x10>
 80165da:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80165de:	4293      	cmp	r3, r2
 80165e0:	d108      	bne.n	80165f4 <_ZNK8touchgfx6Bitmap9getHeightEv+0x48>
 80165e2:	4b09      	ldr	r3, [pc, #36]	@ (8016608 <_ZNK8touchgfx6Bitmap9getHeightEv+0x5c>)
 80165e4:	781b      	ldrb	r3, [r3, #0]
 80165e6:	b91b      	cbnz	r3, 80165f0 <_ZNK8touchgfx6Bitmap9getHeightEv+0x44>
 80165e8:	4b08      	ldr	r3, [pc, #32]	@ (801660c <_ZNK8touchgfx6Bitmap9getHeightEv+0x60>)
 80165ea:	f9b3 0000 	ldrsh.w	r0, [r3]
 80165ee:	4770      	bx	lr
 80165f0:	4b07      	ldr	r3, [pc, #28]	@ (8016610 <_ZNK8touchgfx6Bitmap9getHeightEv+0x64>)
 80165f2:	e7fa      	b.n	80165ea <_ZNK8touchgfx6Bitmap9getHeightEv+0x3e>
 80165f4:	2000      	movs	r0, #0
 80165f6:	4770      	bx	lr
 80165f8:	24025430 	.word	0x24025430
 80165fc:	24025438 	.word	0x24025438
 8016600:	24025434 	.word	0x24025434
 8016604:	24025418 	.word	0x24025418
 8016608:	240253a0 	.word	0x240253a0
 801660c:	240253a4 	.word	0x240253a4
 8016610:	240253a2 	.word	0x240253a2

08016614 <_ZNK8touchgfx6Bitmap7getDataEv>:
 8016614:	4a12      	ldr	r2, [pc, #72]	@ (8016660 <_ZNK8touchgfx6Bitmap7getDataEv+0x4c>)
 8016616:	8803      	ldrh	r3, [r0, #0]
 8016618:	8811      	ldrh	r1, [r2, #0]
 801661a:	428b      	cmp	r3, r1
 801661c:	d20b      	bcs.n	8016636 <_ZNK8touchgfx6Bitmap7getDataEv+0x22>
 801661e:	4a11      	ldr	r2, [pc, #68]	@ (8016664 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016620:	6812      	ldr	r2, [r2, #0]
 8016622:	b112      	cbz	r2, 801662a <_ZNK8touchgfx6Bitmap7getDataEv+0x16>
 8016624:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016628:	b9c0      	cbnz	r0, 801665c <_ZNK8touchgfx6Bitmap7getDataEv+0x48>
 801662a:	4a0f      	ldr	r2, [pc, #60]	@ (8016668 <_ZNK8touchgfx6Bitmap7getDataEv+0x54>)
 801662c:	6811      	ldr	r1, [r2, #0]
 801662e:	2214      	movs	r2, #20
 8016630:	4353      	muls	r3, r2
 8016632:	58c8      	ldr	r0, [r1, r3]
 8016634:	4770      	bx	lr
 8016636:	4a0d      	ldr	r2, [pc, #52]	@ (801666c <_ZNK8touchgfx6Bitmap7getDataEv+0x58>)
 8016638:	8812      	ldrh	r2, [r2, #0]
 801663a:	440a      	add	r2, r1
 801663c:	4293      	cmp	r3, r2
 801663e:	da04      	bge.n	801664a <_ZNK8touchgfx6Bitmap7getDataEv+0x36>
 8016640:	4a08      	ldr	r2, [pc, #32]	@ (8016664 <_ZNK8touchgfx6Bitmap7getDataEv+0x50>)
 8016642:	6812      	ldr	r2, [r2, #0]
 8016644:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8016648:	4770      	bx	lr
 801664a:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 801664e:	4293      	cmp	r3, r2
 8016650:	d103      	bne.n	801665a <_ZNK8touchgfx6Bitmap7getDataEv+0x46>
 8016652:	4b07      	ldr	r3, [pc, #28]	@ (8016670 <_ZNK8touchgfx6Bitmap7getDataEv+0x5c>)
 8016654:	681b      	ldr	r3, [r3, #0]
 8016656:	6c58      	ldr	r0, [r3, #68]	@ 0x44
 8016658:	4770      	bx	lr
 801665a:	2000      	movs	r0, #0
 801665c:	4770      	bx	lr
 801665e:	bf00      	nop
 8016660:	24025430 	.word	0x24025430
 8016664:	24025414 	.word	0x24025414
 8016668:	24025438 	.word	0x24025438
 801666c:	24025434 	.word	0x24025434
 8016670:	240253a8 	.word	0x240253a8

08016674 <_ZNK8touchgfx6Bitmap12getExtraDataEv>:
 8016674:	4b24      	ldr	r3, [pc, #144]	@ (8016708 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x94>)
 8016676:	8802      	ldrh	r2, [r0, #0]
 8016678:	8818      	ldrh	r0, [r3, #0]
 801667a:	4282      	cmp	r2, r0
 801667c:	d221      	bcs.n	80166c2 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x4e>
 801667e:	4b23      	ldr	r3, [pc, #140]	@ (801670c <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x98>)
 8016680:	6819      	ldr	r1, [r3, #0]
 8016682:	2314      	movs	r3, #20
 8016684:	fb03 1302 	mla	r3, r3, r2, r1
 8016688:	6858      	ldr	r0, [r3, #4]
 801668a:	2800      	cmp	r0, #0
 801668c:	d03a      	beq.n	8016704 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801668e:	4920      	ldr	r1, [pc, #128]	@ (8016710 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 8016690:	6809      	ldr	r1, [r1, #0]
 8016692:	2900      	cmp	r1, #0
 8016694:	d036      	beq.n	8016704 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 8016696:	f851 1022 	ldr.w	r1, [r1, r2, lsl #2]
 801669a:	2900      	cmp	r1, #0
 801669c:	d032      	beq.n	8016704 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x90>
 801669e:	891a      	ldrh	r2, [r3, #8]
 80166a0:	8958      	ldrh	r0, [r3, #10]
 80166a2:	4350      	muls	r0, r2
 80166a4:	7c5a      	ldrb	r2, [r3, #17]
 80166a6:	7cdb      	ldrb	r3, [r3, #19]
 80166a8:	0952      	lsrs	r2, r2, #5
 80166aa:	f3c3 1342 	ubfx	r3, r3, #5, #3
 80166ae:	ea43 03c2 	orr.w	r3, r3, r2, lsl #3
 80166b2:	2b0b      	cmp	r3, #11
 80166b4:	bf18      	it	ne
 80166b6:	0040      	lslne	r0, r0, #1
 80166b8:	3003      	adds	r0, #3
 80166ba:	f020 0003 	bic.w	r0, r0, #3
 80166be:	4408      	add	r0, r1
 80166c0:	4770      	bx	lr
 80166c2:	4b14      	ldr	r3, [pc, #80]	@ (8016714 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa0>)
 80166c4:	881b      	ldrh	r3, [r3, #0]
 80166c6:	4403      	add	r3, r0
 80166c8:	429a      	cmp	r2, r3
 80166ca:	da1a      	bge.n	8016702 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80166cc:	4b12      	ldr	r3, [pc, #72]	@ (8016718 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0xa4>)
 80166ce:	1a10      	subs	r0, r2, r0
 80166d0:	210e      	movs	r1, #14
 80166d2:	681b      	ldr	r3, [r3, #0]
 80166d4:	fb01 3000 	mla	r0, r1, r0, r3
 80166d8:	7b03      	ldrb	r3, [r0, #12]
 80166da:	f003 031f 	and.w	r3, r3, #31
 80166de:	2b0b      	cmp	r3, #11
 80166e0:	d10b      	bne.n	80166fa <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x86>
 80166e2:	8903      	ldrh	r3, [r0, #8]
 80166e4:	8940      	ldrh	r0, [r0, #10]
 80166e6:	4358      	muls	r0, r3
 80166e8:	4b09      	ldr	r3, [pc, #36]	@ (8016710 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x9c>)
 80166ea:	3003      	adds	r0, #3
 80166ec:	6819      	ldr	r1, [r3, #0]
 80166ee:	f020 0303 	bic.w	r3, r0, #3
 80166f2:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
 80166f6:	4418      	add	r0, r3
 80166f8:	4770      	bx	lr
 80166fa:	2b0d      	cmp	r3, #13
 80166fc:	d101      	bne.n	8016702 <_ZNK8touchgfx6Bitmap12getExtraDataEv+0x8e>
 80166fe:	300d      	adds	r0, #13
 8016700:	4770      	bx	lr
 8016702:	2000      	movs	r0, #0
 8016704:	4770      	bx	lr
 8016706:	bf00      	nop
 8016708:	24025430 	.word	0x24025430
 801670c:	24025438 	.word	0x24025438
 8016710:	24025414 	.word	0x24025414
 8016714:	24025434 	.word	0x24025434
 8016718:	24025418 	.word	0x24025418

0801671c <_ZNK8touchgfx6Bitmap9getFormatEv>:
 801671c:	4b1f      	ldr	r3, [pc, #124]	@ (801679c <_ZNK8touchgfx6Bitmap9getFormatEv+0x80>)
 801671e:	b510      	push	{r4, lr}
 8016720:	8802      	ldrh	r2, [r0, #0]
 8016722:	881b      	ldrh	r3, [r3, #0]
 8016724:	429a      	cmp	r2, r3
 8016726:	d21a      	bcs.n	801675e <_ZNK8touchgfx6Bitmap9getFormatEv+0x42>
 8016728:	4b1d      	ldr	r3, [pc, #116]	@ (80167a0 <_ZNK8touchgfx6Bitmap9getFormatEv+0x84>)
 801672a:	2114      	movs	r1, #20
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	fb01 3102 	mla	r1, r1, r2, r3
 8016732:	7c4b      	ldrb	r3, [r1, #17]
 8016734:	0958      	lsrs	r0, r3, #5
 8016736:	7ccb      	ldrb	r3, [r1, #19]
 8016738:	491a      	ldr	r1, [pc, #104]	@ (80167a4 <_ZNK8touchgfx6Bitmap9getFormatEv+0x88>)
 801673a:	f3c3 1342 	ubfx	r3, r3, #5, #3
 801673e:	6809      	ldr	r1, [r1, #0]
 8016740:	ea43 03c0 	orr.w	r3, r3, r0, lsl #3
 8016744:	b2d8      	uxtb	r0, r3
 8016746:	b149      	cbz	r1, 801675c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016748:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801674c:	b132      	cbz	r2, 801675c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801674e:	2b0e      	cmp	r3, #14
 8016750:	d021      	beq.n	8016796 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8016752:	280f      	cmp	r0, #15
 8016754:	d01d      	beq.n	8016792 <_ZNK8touchgfx6Bitmap9getFormatEv+0x76>
 8016756:	2810      	cmp	r0, #16
 8016758:	bf08      	it	eq
 801675a:	2002      	moveq	r0, #2
 801675c:	bd10      	pop	{r4, pc}
 801675e:	4912      	ldr	r1, [pc, #72]	@ (80167a8 <_ZNK8touchgfx6Bitmap9getFormatEv+0x8c>)
 8016760:	8809      	ldrh	r1, [r1, #0]
 8016762:	4419      	add	r1, r3
 8016764:	428a      	cmp	r2, r1
 8016766:	da09      	bge.n	801677c <_ZNK8touchgfx6Bitmap9getFormatEv+0x60>
 8016768:	1ad3      	subs	r3, r2, r3
 801676a:	4a10      	ldr	r2, [pc, #64]	@ (80167ac <_ZNK8touchgfx6Bitmap9getFormatEv+0x90>)
 801676c:	210e      	movs	r1, #14
 801676e:	6812      	ldr	r2, [r2, #0]
 8016770:	fb01 2303 	mla	r3, r1, r3, r2
 8016774:	7b18      	ldrb	r0, [r3, #12]
 8016776:	f000 001f 	and.w	r0, r0, #31
 801677a:	e7ef      	b.n	801675c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801677c:	f64f 73fe 	movw	r3, #65534	@ 0xfffe
 8016780:	429a      	cmp	r2, r3
 8016782:	d108      	bne.n	8016796 <_ZNK8touchgfx6Bitmap9getFormatEv+0x7a>
 8016784:	f7ed fc52 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 8016788:	6803      	ldr	r3, [r0, #0]
 801678a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801678e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016790:	4718      	bx	r3
 8016792:	2001      	movs	r0, #1
 8016794:	e7e2      	b.n	801675c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 8016796:	2000      	movs	r0, #0
 8016798:	e7e0      	b.n	801675c <_ZNK8touchgfx6Bitmap9getFormatEv+0x40>
 801679a:	bf00      	nop
 801679c:	24025430 	.word	0x24025430
 80167a0:	24025438 	.word	0x24025438
 80167a4:	24025414 	.word	0x24025414
 80167a8:	24025434 	.word	0x24025434
 80167ac:	24025418 	.word	0x24025418

080167b0 <_ZNK8touchgfx8LCD24bpp8bitDepthEv>:
 80167b0:	2018      	movs	r0, #24
 80167b2:	4770      	bx	lr

080167b4 <_ZNK8touchgfx8LCD24bpp17framebufferFormatEv>:
 80167b4:	2001      	movs	r0, #1
 80167b6:	4770      	bx	lr

080167b8 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv>:
 80167b8:	4b02      	ldr	r3, [pc, #8]	@ (80167c4 <_ZNK8touchgfx8LCD24bpp17framebufferStrideEv+0xc>)
 80167ba:	8818      	ldrh	r0, [r3, #0]
 80167bc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80167c0:	b280      	uxth	r0, r0
 80167c2:	4770      	bx	lr
 80167c4:	240253a2 	.word	0x240253a2

080167c8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth>:
 80167c8:	2bff      	cmp	r3, #255	@ 0xff
 80167ca:	d04c      	beq.n	8016866 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9e>
 80167cc:	2a2c      	cmp	r2, #44	@ 0x2c
 80167ce:	d030      	beq.n	8016832 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x6a>
 80167d0:	d80f      	bhi.n	80167f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x2a>
 80167d2:	2a08      	cmp	r2, #8
 80167d4:	d043      	beq.n	801685e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80167d6:	d805      	bhi.n	80167e4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x1c>
 80167d8:	2a04      	cmp	r2, #4
 80167da:	d03e      	beq.n	801685a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x92>
 80167dc:	2a05      	cmp	r2, #5
 80167de:	d03a      	beq.n	8016856 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8e>
 80167e0:	2300      	movs	r3, #0
 80167e2:	e024      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80167e4:	2a0a      	cmp	r2, #10
 80167e6:	d03a      	beq.n	801685e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x96>
 80167e8:	d301      	bcc.n	80167ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x26>
 80167ea:	2a0b      	cmp	r2, #11
 80167ec:	d1f8      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80167ee:	6c43      	ldr	r3, [r0, #68]	@ 0x44
 80167f0:	e01d      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80167f2:	2a30      	cmp	r2, #48	@ 0x30
 80167f4:	d035      	beq.n	8016862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 80167f6:	d80a      	bhi.n	801680e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x46>
 80167f8:	2a2e      	cmp	r2, #46	@ 0x2e
 80167fa:	684b      	ldr	r3, [r1, #4]
 80167fc:	d023      	beq.n	8016846 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x7e>
 80167fe:	d90d      	bls.n	801681c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x54>
 8016800:	781a      	ldrb	r2, [r3, #0]
 8016802:	785b      	ldrb	r3, [r3, #1]
 8016804:	2b00      	cmp	r3, #0
 8016806:	d1eb      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016808:	b98a      	cbnz	r2, 801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801680a:	6a43      	ldr	r3, [r0, #36]	@ 0x24
 801680c:	e00f      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801680e:	2a32      	cmp	r2, #50	@ 0x32
 8016810:	d027      	beq.n	8016862 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x9a>
 8016812:	d301      	bcc.n	8016818 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x50>
 8016814:	2a33      	cmp	r2, #51	@ 0x33
 8016816:	d1e3      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016818:	6d43      	ldr	r3, [r0, #84]	@ 0x54
 801681a:	e008      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801681c:	781a      	ldrb	r2, [r3, #0]
 801681e:	785b      	ldrb	r3, [r3, #1]
 8016820:	2b00      	cmp	r3, #0
 8016822:	d1dd      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016824:	2a00      	cmp	r2, #0
 8016826:	d0f0      	beq.n	801680a <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x42>
 8016828:	2a01      	cmp	r2, #1
 801682a:	d1d9      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801682c:	6943      	ldr	r3, [r0, #20]
 801682e:	4618      	mov	r0, r3
 8016830:	4770      	bx	lr
 8016832:	684b      	ldr	r3, [r1, #4]
 8016834:	781a      	ldrb	r2, [r3, #0]
 8016836:	785b      	ldrb	r3, [r3, #1]
 8016838:	2b00      	cmp	r3, #0
 801683a:	d1d1      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801683c:	b14a      	cbz	r2, 8016852 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x8a>
 801683e:	2a01      	cmp	r2, #1
 8016840:	bf08      	it	eq
 8016842:	68c3      	ldreq	r3, [r0, #12]
 8016844:	e7f3      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016846:	781a      	ldrb	r2, [r3, #0]
 8016848:	785b      	ldrb	r3, [r3, #1]
 801684a:	2b00      	cmp	r3, #0
 801684c:	d1c8      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801684e:	2a00      	cmp	r2, #0
 8016850:	d1ed      	bne.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016852:	69c3      	ldr	r3, [r0, #28]
 8016854:	e7eb      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016856:	6b43      	ldr	r3, [r0, #52]	@ 0x34
 8016858:	e7e9      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801685a:	6ac3      	ldr	r3, [r0, #44]	@ 0x2c
 801685c:	e7e7      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801685e:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 8016860:	e7e5      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016862:	6cc3      	ldr	r3, [r0, #76]	@ 0x4c
 8016864:	e7e3      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 8016866:	2a2c      	cmp	r2, #44	@ 0x2c
 8016868:	d030      	beq.n	80168cc <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x104>
 801686a:	d80f      	bhi.n	801688c <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc4>
 801686c:	2a08      	cmp	r2, #8
 801686e:	d042      	beq.n	80168f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016870:	d805      	bhi.n	801687e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xb6>
 8016872:	2a04      	cmp	r2, #4
 8016874:	d03d      	beq.n	80168f2 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12a>
 8016876:	2a05      	cmp	r2, #5
 8016878:	d1b2      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 801687a:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 801687c:	e7d7      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801687e:	2a0a      	cmp	r2, #10
 8016880:	d039      	beq.n	80168f6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x12e>
 8016882:	d301      	bcc.n	8016888 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xc0>
 8016884:	2a0b      	cmp	r2, #11
 8016886:	d1ab      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 8016888:	6c83      	ldr	r3, [r0, #72]	@ 0x48
 801688a:	e7d0      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 801688c:	2a30      	cmp	r2, #48	@ 0x30
 801688e:	d034      	beq.n	80168fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 8016890:	d80b      	bhi.n	80168aa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xe2>
 8016892:	2a2e      	cmp	r2, #46	@ 0x2e
 8016894:	684b      	ldr	r3, [r1, #4]
 8016896:	d023      	beq.n	80168e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x118>
 8016898:	d90e      	bls.n	80168b8 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xf0>
 801689a:	781a      	ldrb	r2, [r3, #0]
 801689c:	785b      	ldrb	r3, [r3, #1]
 801689e:	2b00      	cmp	r3, #0
 80168a0:	d19e      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168a2:	2a00      	cmp	r2, #0
 80168a4:	d1c3      	bne.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168a6:	6a83      	ldr	r3, [r0, #40]	@ 0x28
 80168a8:	e7c1      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168aa:	2a32      	cmp	r2, #50	@ 0x32
 80168ac:	d025      	beq.n	80168fa <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x132>
 80168ae:	d301      	bcc.n	80168b4 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xec>
 80168b0:	2a33      	cmp	r2, #51	@ 0x33
 80168b2:	d195      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168b4:	6d83      	ldr	r3, [r0, #88]	@ 0x58
 80168b6:	e7ba      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168b8:	781a      	ldrb	r2, [r3, #0]
 80168ba:	785b      	ldrb	r3, [r3, #1]
 80168bc:	2b00      	cmp	r3, #0
 80168be:	d18f      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168c0:	2a00      	cmp	r2, #0
 80168c2:	d0f0      	beq.n	80168a6 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0xde>
 80168c4:	2a01      	cmp	r2, #1
 80168c6:	d18b      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168c8:	6983      	ldr	r3, [r0, #24]
 80168ca:	e7b0      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168cc:	684b      	ldr	r3, [r1, #4]
 80168ce:	781a      	ldrb	r2, [r3, #0]
 80168d0:	785b      	ldrb	r3, [r3, #1]
 80168d2:	2b00      	cmp	r3, #0
 80168d4:	d184      	bne.n	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168d6:	b152      	cbz	r2, 80168ee <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x126>
 80168d8:	2a01      	cmp	r2, #1
 80168da:	bf08      	it	eq
 80168dc:	6903      	ldreq	r3, [r0, #16]
 80168de:	e7a6      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168e0:	781a      	ldrb	r2, [r3, #0]
 80168e2:	785b      	ldrb	r3, [r3, #1]
 80168e4:	2b00      	cmp	r3, #0
 80168e6:	f47f af7b 	bne.w	80167e0 <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x18>
 80168ea:	2a00      	cmp	r2, #0
 80168ec:	d19f      	bne.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168ee:	6a03      	ldr	r3, [r0, #32]
 80168f0:	e79d      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168f2:	6b03      	ldr	r3, [r0, #48]	@ 0x30
 80168f4:	e79b      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168f6:	6c03      	ldr	r3, [r0, #64]	@ 0x40
 80168f8:	e799      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>
 80168fa:	6d03      	ldr	r3, [r0, #80]	@ 0x50
 80168fc:	e797      	b.n	801682e <_ZN8touchgfx8LCD24bpp28getTextureMapperDrawScanLineERKNS_14TextureSurfaceEth+0x66>

080168fe <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80168fe:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016902:	b085      	sub	sp, #20
 8016904:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8016906:	9203      	str	r2, [sp, #12]
 8016908:	6870      	ldr	r0, [r6, #4]
 801690a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 801690e:	f89d 505c 	ldrb.w	r5, [sp, #92]	@ 0x5c
 8016912:	9101      	str	r1, [sp, #4]
 8016914:	fa1f f885 	uxth.w	r8, r5
 8016918:	43ed      	mvns	r5, r5
 801691a:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 801691e:	b2ed      	uxtb	r5, r5
 8016920:	fb00 2404 	mla	r4, r0, r4, r2
 8016924:	6832      	ldr	r2, [r6, #0]
 8016926:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801692a:	4414      	add	r4, r2
 801692c:	f8dc 2000 	ldr.w	r2, [ip]
 8016930:	9202      	str	r2, [sp, #8]
 8016932:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016936:	f102 0e04 	add.w	lr, r2, #4
 801693a:	9a01      	ldr	r2, [sp, #4]
 801693c:	2a00      	cmp	r2, #0
 801693e:	dc03      	bgt.n	8016948 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 8016940:	9a03      	ldr	r2, [sp, #12]
 8016942:	2a00      	cmp	r2, #0
 8016944:	f340 8116 	ble.w	8016b74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016948:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801694a:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 801694e:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016952:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016954:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 8016958:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 801695c:	2b00      	cmp	r3, #0
 801695e:	dd0e      	ble.n	801697e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x80>
 8016960:	1406      	asrs	r6, r0, #16
 8016962:	d405      	bmi.n	8016970 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016964:	4556      	cmp	r6, sl
 8016966:	da03      	bge.n	8016970 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 8016968:	1416      	asrs	r6, r2, #16
 801696a:	d401      	bmi.n	8016970 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801696c:	454e      	cmp	r6, r9
 801696e:	db07      	blt.n	8016980 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 8016970:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 8016972:	3b01      	subs	r3, #1
 8016974:	3403      	adds	r4, #3
 8016976:	4430      	add	r0, r6
 8016978:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801697a:	4432      	add	r2, r6
 801697c:	e7ee      	b.n	801695c <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e>
 801697e:	d063      	beq.n	8016a48 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8016980:	1e5e      	subs	r6, r3, #1
 8016982:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 8016984:	fb07 0706 	mla	r7, r7, r6, r0
 8016988:	143f      	asrs	r7, r7, #16
 801698a:	d454      	bmi.n	8016a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801698c:	4557      	cmp	r7, sl
 801698e:	da52      	bge.n	8016a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 8016990:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8016992:	fb07 2606 	mla	r6, r7, r6, r2
 8016996:	1436      	asrs	r6, r6, #16
 8016998:	d44d      	bmi.n	8016a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801699a:	454e      	cmp	r6, r9
 801699c:	da4b      	bge.n	8016a36 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801699e:	1ce6      	adds	r6, r4, #3
 80169a0:	4699      	mov	r9, r3
 80169a2:	f1b9 0f00 	cmp.w	r9, #0
 80169a6:	f106 0603 	add.w	r6, r6, #3
 80169aa:	dd48      	ble.n	8016a3e <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x140>
 80169ac:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 80169b0:	1417      	asrs	r7, r2, #16
 80169b2:	9902      	ldr	r1, [sp, #8]
 80169b4:	ea4f 4a20 	mov.w	sl, r0, asr #16
 80169b8:	f109 39ff 	add.w	r9, r9, #4294967295
 80169bc:	fb0b 1707 	mla	r7, fp, r7, r1
 80169c0:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 80169c4:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80169c6:	f817 700a 	ldrb.w	r7, [r7, sl]
 80169ca:	fb1b fb05 	smulbb	fp, fp, r5
 80169ce:	4408      	add	r0, r1
 80169d0:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80169d2:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 80169d6:	440a      	add	r2, r1
 80169d8:	eb0e 0a07 	add.w	sl, lr, r7
 80169dc:	f81e 7007 	ldrb.w	r7, [lr, r7]
 80169e0:	fb07 b708 	mla	r7, r7, r8, fp
 80169e4:	b2bf      	uxth	r7, r7
 80169e6:	f107 0b01 	add.w	fp, r7, #1
 80169ea:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 80169ee:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 80169f2:	fb1b fb05 	smulbb	fp, fp, r5
 80169f6:	123f      	asrs	r7, r7, #8
 80169f8:	f806 7c06 	strb.w	r7, [r6, #-6]
 80169fc:	f89a 7001 	ldrb.w	r7, [sl, #1]
 8016a00:	fb07 b708 	mla	r7, r7, r8, fp
 8016a04:	b2bf      	uxth	r7, r7
 8016a06:	f107 0b01 	add.w	fp, r7, #1
 8016a0a:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8016a0e:	123f      	asrs	r7, r7, #8
 8016a10:	f806 7c05 	strb.w	r7, [r6, #-5]
 8016a14:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8016a18:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8016a1c:	fb1a fa05 	smulbb	sl, sl, r5
 8016a20:	fb07 a708 	mla	r7, r7, r8, sl
 8016a24:	b2bf      	uxth	r7, r7
 8016a26:	f107 0a01 	add.w	sl, r7, #1
 8016a2a:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8016a2e:	123f      	asrs	r7, r7, #8
 8016a30:	f806 7c04 	strb.w	r7, [r6, #-4]
 8016a34:	e7b5      	b.n	80169a2 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa4>
 8016a36:	2700      	movs	r7, #0
 8016a38:	1bde      	subs	r6, r3, r7
 8016a3a:	2e00      	cmp	r6, #0
 8016a3c:	dc42      	bgt.n	8016ac4 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c6>
 8016a3e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016a42:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016a46:	441c      	add	r4, r3
 8016a48:	9b01      	ldr	r3, [sp, #4]
 8016a4a:	2b00      	cmp	r3, #0
 8016a4c:	f340 8092 	ble.w	8016b74 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x276>
 8016a50:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8016a54:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016a56:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016a5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016a5e:	eef0 6a62 	vmov.f32	s13, s5
 8016a62:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8016a66:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016a6a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a6e:	edcd 6a0f 	vstr	s13, [sp, #60]	@ 0x3c
 8016a72:	eef0 6a43 	vmov.f32	s13, s6
 8016a76:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 8016a7a:	edcd 6a10 	vstr	s13, [sp, #64]	@ 0x40
 8016a7e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016a82:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016a86:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016a8a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016a8e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016a92:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016a96:	ee12 2a90 	vmov	r2, s5
 8016a9a:	eef0 2a47 	vmov.f32	s5, s14
 8016a9e:	fb92 f3f3 	sdiv	r3, r2, r3
 8016aa2:	ee13 2a10 	vmov	r2, s6
 8016aa6:	9311      	str	r3, [sp, #68]	@ 0x44
 8016aa8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016aaa:	eeb0 3a67 	vmov.f32	s6, s15
 8016aae:	fb92 f3f3 	sdiv	r3, r2, r3
 8016ab2:	9312      	str	r3, [sp, #72]	@ 0x48
 8016ab4:	9b01      	ldr	r3, [sp, #4]
 8016ab6:	9a03      	ldr	r2, [sp, #12]
 8016ab8:	3b01      	subs	r3, #1
 8016aba:	9301      	str	r3, [sp, #4]
 8016abc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016abe:	bf08      	it	eq
 8016ac0:	4613      	moveq	r3, r2
 8016ac2:	e73a      	b.n	801693a <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016ac4:	ea5f 4a20 	movs.w	sl, r0, asr #16
 8016ac8:	d44e      	bmi.n	8016b68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016aca:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016ace:	4556      	cmp	r6, sl
 8016ad0:	dd4a      	ble.n	8016b68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016ad2:	ea5f 4b22 	movs.w	fp, r2, asr #16
 8016ad6:	d447      	bmi.n	8016b68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016ad8:	f8dc 100c 	ldr.w	r1, [ip, #12]
 8016adc:	4559      	cmp	r1, fp
 8016ade:	dd43      	ble.n	8016b68 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26a>
 8016ae0:	fa0f f986 	sxth.w	r9, r6
 8016ae4:	9902      	ldr	r1, [sp, #8]
 8016ae6:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8016aea:	fb0b 1909 	mla	r9, fp, r9, r1
 8016aee:	f814 b006 	ldrb.w	fp, [r4, r6]
 8016af2:	f819 900a 	ldrb.w	r9, [r9, sl]
 8016af6:	fb1b fb05 	smulbb	fp, fp, r5
 8016afa:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016afe:	eb0e 0a09 	add.w	sl, lr, r9
 8016b02:	f81e 9009 	ldrb.w	r9, [lr, r9]
 8016b06:	fb09 b908 	mla	r9, r9, r8, fp
 8016b0a:	fa1f f989 	uxth.w	r9, r9
 8016b0e:	f109 0b01 	add.w	fp, r9, #1
 8016b12:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016b16:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b1a:	f804 9006 	strb.w	r9, [r4, r6]
 8016b1e:	4426      	add	r6, r4
 8016b20:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016b24:	f896 b001 	ldrb.w	fp, [r6, #1]
 8016b28:	fb1b fb05 	smulbb	fp, fp, r5
 8016b2c:	fb09 b908 	mla	r9, r9, r8, fp
 8016b30:	fa1f f989 	uxth.w	r9, r9
 8016b34:	f109 0b01 	add.w	fp, r9, #1
 8016b38:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016b3c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b40:	f886 9001 	strb.w	r9, [r6, #1]
 8016b44:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016b48:	f896 a002 	ldrb.w	sl, [r6, #2]
 8016b4c:	fb1a fa05 	smulbb	sl, sl, r5
 8016b50:	fb09 a908 	mla	r9, r9, r8, sl
 8016b54:	fa1f f989 	uxth.w	r9, r9
 8016b58:	f109 0a01 	add.w	sl, r9, #1
 8016b5c:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 8016b60:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016b64:	f886 9002 	strb.w	r9, [r6, #2]
 8016b68:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8016b6a:	3701      	adds	r7, #1
 8016b6c:	4408      	add	r0, r1
 8016b6e:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8016b70:	440a      	add	r2, r1
 8016b72:	e761      	b.n	8016a38 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8016b74:	b005      	add	sp, #20
 8016b76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016b7a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016b7a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016b7e:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 8016b80:	4693      	mov	fp, r2
 8016b82:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8016b84:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016b88:	6868      	ldr	r0, [r5, #4]
 8016b8a:	6877      	ldr	r7, [r6, #4]
 8016b8c:	9100      	str	r1, [sp, #0]
 8016b8e:	3704      	adds	r7, #4
 8016b90:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 8016b94:	e9dd 8e0f 	ldrd	r8, lr, [sp, #60]	@ 0x3c
 8016b98:	fb00 2404 	mla	r4, r0, r4, r2
 8016b9c:	682a      	ldr	r2, [r5, #0]
 8016b9e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016ba2:	4414      	add	r4, r2
 8016ba4:	6832      	ldr	r2, [r6, #0]
 8016ba6:	9201      	str	r2, [sp, #4]
 8016ba8:	9a00      	ldr	r2, [sp, #0]
 8016baa:	2a00      	cmp	r2, #0
 8016bac:	dc03      	bgt.n	8016bb6 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016bae:	f1bb 0f00 	cmp.w	fp, #0
 8016bb2:	f340 80bc 	ble.w	8016d2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016bb6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8016bb8:	f9b6 a008 	ldrsh.w	sl, [r6, #8]
 8016bbc:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016bc0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8016bc2:	f9b6 900c 	ldrsh.w	r9, [r6, #12]
 8016bc6:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8016bca:	2b00      	cmp	r3, #0
 8016bcc:	dd0c      	ble.n	8016be8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8016bce:	1405      	asrs	r5, r0, #16
 8016bd0:	d405      	bmi.n	8016bde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016bd2:	4555      	cmp	r5, sl
 8016bd4:	da03      	bge.n	8016bde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016bd6:	1415      	asrs	r5, r2, #16
 8016bd8:	d401      	bmi.n	8016bde <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8016bda:	454d      	cmp	r5, r9
 8016bdc:	db05      	blt.n	8016bea <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016bde:	4440      	add	r0, r8
 8016be0:	4472      	add	r2, lr
 8016be2:	3b01      	subs	r3, #1
 8016be4:	3403      	adds	r4, #3
 8016be6:	e7f0      	b.n	8016bca <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8016be8:	d03f      	beq.n	8016c6a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xf0>
 8016bea:	1e5d      	subs	r5, r3, #1
 8016bec:	fb08 0c05 	mla	ip, r8, r5, r0
 8016bf0:	ea5f 4c2c 	movs.w	ip, ip, asr #16
 8016bf4:	d42e      	bmi.n	8016c54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016bf6:	45d4      	cmp	ip, sl
 8016bf8:	da2c      	bge.n	8016c54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016bfa:	fb0e 2505 	mla	r5, lr, r5, r2
 8016bfe:	142d      	asrs	r5, r5, #16
 8016c00:	d428      	bmi.n	8016c54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016c02:	454d      	cmp	r5, r9
 8016c04:	da26      	bge.n	8016c54 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8016c06:	1ce5      	adds	r5, r4, #3
 8016c08:	469c      	mov	ip, r3
 8016c0a:	f1bc 0f00 	cmp.w	ip, #0
 8016c0e:	f105 0503 	add.w	r5, r5, #3
 8016c12:	dd25      	ble.n	8016c60 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xe6>
 8016c14:	f9b6 1008 	ldrsh.w	r1, [r6, #8]
 8016c18:	ea4f 4922 	mov.w	r9, r2, asr #16
 8016c1c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8016c20:	4472      	add	r2, lr
 8016c22:	468a      	mov	sl, r1
 8016c24:	9901      	ldr	r1, [sp, #4]
 8016c26:	fb0a 1909 	mla	r9, sl, r9, r1
 8016c2a:	1401      	asrs	r1, r0, #16
 8016c2c:	4440      	add	r0, r8
 8016c2e:	f819 9001 	ldrb.w	r9, [r9, r1]
 8016c32:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 8016c36:	eb07 0a09 	add.w	sl, r7, r9
 8016c3a:	f817 9009 	ldrb.w	r9, [r7, r9]
 8016c3e:	f805 9c06 	strb.w	r9, [r5, #-6]
 8016c42:	f89a 9001 	ldrb.w	r9, [sl, #1]
 8016c46:	f805 9c05 	strb.w	r9, [r5, #-5]
 8016c4a:	f89a 9002 	ldrb.w	r9, [sl, #2]
 8016c4e:	f805 9c04 	strb.w	r9, [r5, #-4]
 8016c52:	e7da      	b.n	8016c0a <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 8016c54:	2500      	movs	r5, #0
 8016c56:	eba3 0c05 	sub.w	ip, r3, r5
 8016c5a:	f1bc 0f00 	cmp.w	ip, #0
 8016c5e:	dc3b      	bgt.n	8016cd8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15e>
 8016c60:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016c64:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016c68:	441c      	add	r4, r3
 8016c6a:	9b00      	ldr	r3, [sp, #0]
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	dd5e      	ble.n	8016d2e <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 8016c70:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016c74:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016c76:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016c7a:	eeb0 6a62 	vmov.f32	s12, s5
 8016c7e:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016c82:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016c86:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c8a:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8016c8e:	eeb0 6a43 	vmov.f32	s12, s6
 8016c92:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016c96:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8016c9a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016c9e:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016ca2:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016ca6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016caa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016cae:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016cb2:	ee12 2a90 	vmov	r2, s5
 8016cb6:	eef0 2a47 	vmov.f32	s5, s14
 8016cba:	fb92 f8f3 	sdiv	r8, r2, r3
 8016cbe:	ee13 2a10 	vmov	r2, s6
 8016cc2:	eeb0 3a67 	vmov.f32	s6, s15
 8016cc6:	fb92 fef3 	sdiv	lr, r2, r3
 8016cca:	9b00      	ldr	r3, [sp, #0]
 8016ccc:	3b01      	subs	r3, #1
 8016cce:	9300      	str	r3, [sp, #0]
 8016cd0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8016cd2:	bf08      	it	eq
 8016cd4:	465b      	moveq	r3, fp
 8016cd6:	e767      	b.n	8016ba8 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8016cd8:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016cdc:	d423      	bmi.n	8016d26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016cde:	f8d6 c008 	ldr.w	ip, [r6, #8]
 8016ce2:	45cc      	cmp	ip, r9
 8016ce4:	dd1f      	ble.n	8016d26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016ce6:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8016cea:	d41c      	bmi.n	8016d26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016cec:	68f1      	ldr	r1, [r6, #12]
 8016cee:	4551      	cmp	r1, sl
 8016cf0:	dd19      	ble.n	8016d26 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ac>
 8016cf2:	fa0f fc8c 	sxth.w	ip, ip
 8016cf6:	9901      	ldr	r1, [sp, #4]
 8016cf8:	fb0a 1c0c 	mla	ip, sl, ip, r1
 8016cfc:	f81c c009 	ldrb.w	ip, [ip, r9]
 8016d00:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 8016d04:	f817 a00c 	ldrb.w	sl, [r7, ip]
 8016d08:	eb07 090c 	add.w	r9, r7, ip
 8016d0c:	eb05 0c45 	add.w	ip, r5, r5, lsl #1
 8016d10:	f804 a00c 	strb.w	sl, [r4, ip]
 8016d14:	44a4      	add	ip, r4
 8016d16:	f899 a001 	ldrb.w	sl, [r9, #1]
 8016d1a:	f88c a001 	strb.w	sl, [ip, #1]
 8016d1e:	f899 9002 	ldrb.w	r9, [r9, #2]
 8016d22:	f88c 9002 	strb.w	r9, [ip, #2]
 8016d26:	4440      	add	r0, r8
 8016d28:	4472      	add	r2, lr
 8016d2a:	3501      	adds	r5, #1
 8016d2c:	e793      	b.n	8016c56 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xdc>
 8016d2e:	b003      	add	sp, #12
 8016d30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016d34 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016d34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016d38:	b085      	sub	sp, #20
 8016d3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016d3e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8016d40:	9202      	str	r2, [sp, #8]
 8016d42:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 8016d46:	6860      	ldr	r0, [r4, #4]
 8016d48:	9203      	str	r2, [sp, #12]
 8016d4a:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016d4e:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016d52:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 8016d56:	fb00 2505 	mla	r5, r0, r5, r2
 8016d5a:	6822      	ldr	r2, [r4, #0]
 8016d5c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8016d60:	4415      	add	r5, r2
 8016d62:	f8dc 2000 	ldr.w	r2, [ip]
 8016d66:	9200      	str	r2, [sp, #0]
 8016d68:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8016d6c:	3204      	adds	r2, #4
 8016d6e:	9201      	str	r2, [sp, #4]
 8016d70:	2900      	cmp	r1, #0
 8016d72:	dc03      	bgt.n	8016d7c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8016d74:	9a02      	ldr	r2, [sp, #8]
 8016d76:	2a00      	cmp	r2, #0
 8016d78:	f340 8127 	ble.w	8016fca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016d7c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8016d7e:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016d82:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8016d86:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8016d88:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8016d8c:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	dd0d      	ble.n	8016db0 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8016d94:	1422      	asrs	r2, r4, #16
 8016d96:	d405      	bmi.n	8016da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016d98:	4542      	cmp	r2, r8
 8016d9a:	da03      	bge.n	8016da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016d9c:	1402      	asrs	r2, r0, #16
 8016d9e:	d401      	bmi.n	8016da4 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 8016da0:	42ba      	cmp	r2, r7
 8016da2:	db06      	blt.n	8016db2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8016da4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016da6:	4474      	add	r4, lr
 8016da8:	3b01      	subs	r3, #1
 8016daa:	3503      	adds	r5, #3
 8016dac:	4410      	add	r0, r2
 8016dae:	e7ef      	b.n	8016d90 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8016db0:	d075      	beq.n	8016e9e <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16a>
 8016db2:	1e5a      	subs	r2, r3, #1
 8016db4:	fb0e 4602 	mla	r6, lr, r2, r4
 8016db8:	1436      	asrs	r6, r6, #16
 8016dba:	d465      	bmi.n	8016e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016dbc:	4546      	cmp	r6, r8
 8016dbe:	da63      	bge.n	8016e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016dc0:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8016dc2:	fb06 0202 	mla	r2, r6, r2, r0
 8016dc6:	1412      	asrs	r2, r2, #16
 8016dc8:	d45e      	bmi.n	8016e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016dca:	42ba      	cmp	r2, r7
 8016dcc:	da5c      	bge.n	8016e88 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 8016dce:	1cef      	adds	r7, r5, #3
 8016dd0:	4699      	mov	r9, r3
 8016dd2:	f1b9 0f00 	cmp.w	r9, #0
 8016dd6:	dd5d      	ble.n	8016e94 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x160>
 8016dd8:	1402      	asrs	r2, r0, #16
 8016dda:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8016dde:	1426      	asrs	r6, r4, #16
 8016de0:	4692      	mov	sl, r2
 8016de2:	9a00      	ldr	r2, [sp, #0]
 8016de4:	fb08 220a 	mla	r2, r8, sl, r2
 8016de8:	5d92      	ldrb	r2, [r2, r6]
 8016dea:	9e01      	ldr	r6, [sp, #4]
 8016dec:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8016df0:	ea5f 6816 	movs.w	r8, r6, lsr #24
 8016df4:	d041      	beq.n	8016e7a <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8016df6:	9a03      	ldr	r2, [sp, #12]
 8016df8:	fa5f fb86 	uxtb.w	fp, r6
 8016dfc:	fb02 f808 	mul.w	r8, r2, r8
 8016e00:	f108 0201 	add.w	r2, r8, #1
 8016e04:	eb02 2228 	add.w	r2, r2, r8, asr #8
 8016e08:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8016e0c:	1212      	asrs	r2, r2, #8
 8016e0e:	fa1f fa82 	uxth.w	sl, r2
 8016e12:	43d2      	mvns	r2, r2
 8016e14:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e18:	b2d2      	uxtb	r2, r2
 8016e1a:	fb08 b802 	mla	r8, r8, r2, fp
 8016e1e:	fa1f f888 	uxth.w	r8, r8
 8016e22:	f108 0b01 	add.w	fp, r8, #1
 8016e26:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016e2a:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8016e2e:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8016e32:	fb1b fb0a 	smulbb	fp, fp, sl
 8016e36:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016e3a:	fb16 fa0a 	smulbb	sl, r6, sl
 8016e3e:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8016e42:	f807 8c03 	strb.w	r8, [r7, #-3]
 8016e46:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8016e4a:	fb06 aa02 	mla	sl, r6, r2, sl
 8016e4e:	fb08 b802 	mla	r8, r8, r2, fp
 8016e52:	fa1f fa8a 	uxth.w	sl, sl
 8016e56:	fa1f f888 	uxth.w	r8, r8
 8016e5a:	f10a 0601 	add.w	r6, sl, #1
 8016e5e:	f108 0b01 	add.w	fp, r8, #1
 8016e62:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 8016e66:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8016e6a:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016e6e:	ea4f 2828 	mov.w	r8, r8, asr #8
 8016e72:	f807 ac01 	strb.w	sl, [r7, #-1]
 8016e76:	f807 8c02 	strb.w	r8, [r7, #-2]
 8016e7a:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016e7c:	4474      	add	r4, lr
 8016e7e:	3703      	adds	r7, #3
 8016e80:	f109 39ff 	add.w	r9, r9, #4294967295
 8016e84:	4410      	add	r0, r2
 8016e86:	e7a4      	b.n	8016dd2 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9e>
 8016e88:	f04f 0800 	mov.w	r8, #0
 8016e8c:	eba3 0208 	sub.w	r2, r3, r8
 8016e90:	2a00      	cmp	r2, #0
 8016e92:	dc3b      	bgt.n	8016f0c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d8>
 8016e94:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8016e98:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8016e9c:	441d      	add	r5, r3
 8016e9e:	2900      	cmp	r1, #0
 8016ea0:	f340 8093 	ble.w	8016fca <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x296>
 8016ea4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8016ea8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016eaa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8016eae:	3901      	subs	r1, #1
 8016eb0:	eeb0 6a62 	vmov.f32	s12, s5
 8016eb4:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8016eb8:	ee31 1a05 	vadd.f32	s2, s2, s10
 8016ebc:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ec0:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8016ec4:	eeb0 6a43 	vmov.f32	s12, s6
 8016ec8:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8016ecc:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8016ed0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8016ed4:	ee61 7a27 	vmul.f32	s15, s2, s15
 8016ed8:	ee77 2a62 	vsub.f32	s5, s14, s5
 8016edc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8016ee0:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8016ee4:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8016ee8:	ee12 2a90 	vmov	r2, s5
 8016eec:	eef0 2a47 	vmov.f32	s5, s14
 8016ef0:	fb92 fef3 	sdiv	lr, r2, r3
 8016ef4:	ee13 2a10 	vmov	r2, s6
 8016ef8:	eeb0 3a67 	vmov.f32	s6, s15
 8016efc:	fb92 f3f3 	sdiv	r3, r2, r3
 8016f00:	9a02      	ldr	r2, [sp, #8]
 8016f02:	9312      	str	r3, [sp, #72]	@ 0x48
 8016f04:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8016f06:	bf08      	it	eq
 8016f08:	4613      	moveq	r3, r2
 8016f0a:	e731      	b.n	8016d70 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 8016f0c:	1427      	asrs	r7, r4, #16
 8016f0e:	d456      	bmi.n	8016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f10:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8016f14:	42be      	cmp	r6, r7
 8016f16:	dd52      	ble.n	8016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f18:	ea5f 4920 	movs.w	r9, r0, asr #16
 8016f1c:	d44f      	bmi.n	8016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f1e:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8016f22:	454a      	cmp	r2, r9
 8016f24:	dd4b      	ble.n	8016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f26:	9a00      	ldr	r2, [sp, #0]
 8016f28:	b236      	sxth	r6, r6
 8016f2a:	fb09 2606 	mla	r6, r9, r6, r2
 8016f2e:	5df2      	ldrb	r2, [r6, r7]
 8016f30:	9e01      	ldr	r6, [sp, #4]
 8016f32:	f856 7022 	ldr.w	r7, [r6, r2, lsl #2]
 8016f36:	0e3a      	lsrs	r2, r7, #24
 8016f38:	d041      	beq.n	8016fbe <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8016f3a:	9e03      	ldr	r6, [sp, #12]
 8016f3c:	fa5f fb87 	uxtb.w	fp, r7
 8016f40:	4372      	muls	r2, r6
 8016f42:	1c56      	adds	r6, r2, #1
 8016f44:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8016f48:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 8016f4c:	1212      	asrs	r2, r2, #8
 8016f4e:	f815 9006 	ldrb.w	r9, [r5, r6]
 8016f52:	fa1f fa82 	uxth.w	sl, r2
 8016f56:	43d2      	mvns	r2, r2
 8016f58:	fb1b fb0a 	smulbb	fp, fp, sl
 8016f5c:	b2d2      	uxtb	r2, r2
 8016f5e:	fb09 b902 	mla	r9, r9, r2, fp
 8016f62:	fa1f f989 	uxth.w	r9, r9
 8016f66:	f109 0b01 	add.w	fp, r9, #1
 8016f6a:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016f6e:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8016f72:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8016f76:	fb1b fb0a 	smulbb	fp, fp, sl
 8016f7a:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016f7e:	fb17 fa0a 	smulbb	sl, r7, sl
 8016f82:	f805 9006 	strb.w	r9, [r5, r6]
 8016f86:	442e      	add	r6, r5
 8016f88:	78b7      	ldrb	r7, [r6, #2]
 8016f8a:	f896 9001 	ldrb.w	r9, [r6, #1]
 8016f8e:	fb07 aa02 	mla	sl, r7, r2, sl
 8016f92:	fb09 b902 	mla	r9, r9, r2, fp
 8016f96:	fa1f fa8a 	uxth.w	sl, sl
 8016f9a:	fa1f f989 	uxth.w	r9, r9
 8016f9e:	f10a 0701 	add.w	r7, sl, #1
 8016fa2:	f109 0b01 	add.w	fp, r9, #1
 8016fa6:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8016faa:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8016fae:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8016fb2:	ea4f 2929 	mov.w	r9, r9, asr #8
 8016fb6:	f886 a002 	strb.w	sl, [r6, #2]
 8016fba:	f886 9001 	strb.w	r9, [r6, #1]
 8016fbe:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8016fc0:	4474      	add	r4, lr
 8016fc2:	f108 0801 	add.w	r8, r8, #1
 8016fc6:	4410      	add	r0, r2
 8016fc8:	e760      	b.n	8016e8c <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x158>
 8016fca:	b005      	add	sp, #20
 8016fcc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08016fd0 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8016fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8016fd4:	b085      	sub	sp, #20
 8016fd6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8016fda:	9d13      	ldr	r5, [sp, #76]	@ 0x4c
 8016fdc:	9203      	str	r2, [sp, #12]
 8016fde:	6868      	ldr	r0, [r5, #4]
 8016fe0:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8016fe4:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8016fe8:	e9dd 2414 	ldrd	r2, r4, [sp, #80]	@ 0x50
 8016fec:	fb00 2404 	mla	r4, r0, r4, r2
 8016ff0:	682a      	ldr	r2, [r5, #0]
 8016ff2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8016ff6:	4414      	add	r4, r2
 8016ff8:	f8dc 2000 	ldr.w	r2, [ip]
 8016ffc:	9201      	str	r2, [sp, #4]
 8016ffe:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8017002:	3204      	adds	r2, #4
 8017004:	9202      	str	r2, [sp, #8]
 8017006:	2900      	cmp	r1, #0
 8017008:	dc03      	bgt.n	8017012 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 801700a:	9a03      	ldr	r2, [sp, #12]
 801700c:	2a00      	cmp	r2, #0
 801700e:	f340 8137 	ble.w	8017280 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017012:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017014:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017018:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801701c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801701e:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017022:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017026:	2b00      	cmp	r3, #0
 8017028:	dd0d      	ble.n	8017046 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801702a:	1405      	asrs	r5, r0, #16
 801702c:	d405      	bmi.n	801703a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801702e:	4545      	cmp	r5, r8
 8017030:	da03      	bge.n	801703a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017032:	1415      	asrs	r5, r2, #16
 8017034:	d401      	bmi.n	801703a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 8017036:	42bd      	cmp	r5, r7
 8017038:	db06      	blt.n	8017048 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801703a:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 801703c:	4470      	add	r0, lr
 801703e:	3b01      	subs	r3, #1
 8017040:	3403      	adds	r4, #3
 8017042:	442a      	add	r2, r5
 8017044:	e7ef      	b.n	8017026 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 8017046:	d070      	beq.n	801712a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017048:	1e5d      	subs	r5, r3, #1
 801704a:	fb0e 0605 	mla	r6, lr, r5, r0
 801704e:	1436      	asrs	r6, r6, #16
 8017050:	d462      	bmi.n	8017118 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017052:	4546      	cmp	r6, r8
 8017054:	da60      	bge.n	8017118 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017056:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 8017058:	fb06 2505 	mla	r5, r6, r5, r2
 801705c:	142d      	asrs	r5, r5, #16
 801705e:	d45b      	bmi.n	8017118 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017060:	42bd      	cmp	r5, r7
 8017062:	da59      	bge.n	8017118 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x148>
 8017064:	1ce5      	adds	r5, r4, #3
 8017066:	469a      	mov	sl, r3
 8017068:	f1ba 0f00 	cmp.w	sl, #0
 801706c:	dd58      	ble.n	8017120 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x150>
 801706e:	1416      	asrs	r6, r2, #16
 8017070:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017074:	1407      	asrs	r7, r0, #16
 8017076:	46b1      	mov	r9, r6
 8017078:	9e01      	ldr	r6, [sp, #4]
 801707a:	fb08 6609 	mla	r6, r8, r9, r6
 801707e:	5df6      	ldrb	r6, [r6, r7]
 8017080:	9f02      	ldr	r7, [sp, #8]
 8017082:	f857 6026 	ldr.w	r6, [r7, r6, lsl #2]
 8017086:	0e37      	lsrs	r7, r6, #24
 8017088:	2fff      	cmp	r7, #255	@ 0xff
 801708a:	f000 80f0 	beq.w	801726e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801708e:	fa5f f887 	uxtb.w	r8, r7
 8017092:	b3d7      	cbz	r7, 801710a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017094:	fa1f f788 	uxth.w	r7, r8
 8017098:	ea6f 0808 	mvn.w	r8, r8
 801709c:	fa5f fb86 	uxtb.w	fp, r6
 80170a0:	f815 9c03 	ldrb.w	r9, [r5, #-3]
 80170a4:	fa5f f888 	uxtb.w	r8, r8
 80170a8:	fb1b fb07 	smulbb	fp, fp, r7
 80170ac:	fb09 b908 	mla	r9, r9, r8, fp
 80170b0:	fa1f f989 	uxth.w	r9, r9
 80170b4:	f109 0b01 	add.w	fp, r9, #1
 80170b8:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80170bc:	f815 bc02 	ldrb.w	fp, [r5, #-2]
 80170c0:	fb1b fb08 	smulbb	fp, fp, r8
 80170c4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80170c8:	f805 9c03 	strb.w	r9, [r5, #-3]
 80170cc:	f3c6 2907 	ubfx	r9, r6, #8, #8
 80170d0:	f3c6 4607 	ubfx	r6, r6, #16, #8
 80170d4:	fb09 b907 	mla	r9, r9, r7, fp
 80170d8:	fa1f f989 	uxth.w	r9, r9
 80170dc:	f109 0b01 	add.w	fp, r9, #1
 80170e0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80170e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80170e8:	f805 9c02 	strb.w	r9, [r5, #-2]
 80170ec:	f815 9c01 	ldrb.w	r9, [r5, #-1]
 80170f0:	fb19 f808 	smulbb	r8, r9, r8
 80170f4:	fb06 8607 	mla	r6, r6, r7, r8
 80170f8:	b2b6      	uxth	r6, r6
 80170fa:	f106 0801 	add.w	r8, r6, #1
 80170fe:	eb08 2816 	add.w	r8, r8, r6, lsr #8
 8017102:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017106:	f805 8c01 	strb.w	r8, [r5, #-1]
 801710a:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 801710c:	4470      	add	r0, lr
 801710e:	3503      	adds	r5, #3
 8017110:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017114:	4432      	add	r2, r6
 8017116:	e7a7      	b.n	8017068 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 8017118:	2600      	movs	r6, #0
 801711a:	1b9d      	subs	r5, r3, r6
 801711c:	2d00      	cmp	r5, #0
 801711e:	dc3b      	bgt.n	8017198 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1c8>
 8017120:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017124:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017128:	441c      	add	r4, r3
 801712a:	2900      	cmp	r1, #0
 801712c:	f340 80a8 	ble.w	8017280 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017130:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017134:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017136:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801713a:	3901      	subs	r1, #1
 801713c:	eeb0 6a62 	vmov.f32	s12, s5
 8017140:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017144:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017148:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801714c:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017150:	eeb0 6a43 	vmov.f32	s12, s6
 8017154:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017158:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 801715c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017160:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017164:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017168:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801716c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017170:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017174:	ee12 2a90 	vmov	r2, s5
 8017178:	eef0 2a47 	vmov.f32	s5, s14
 801717c:	fb92 fef3 	sdiv	lr, r2, r3
 8017180:	ee13 2a10 	vmov	r2, s6
 8017184:	eeb0 3a67 	vmov.f32	s6, s15
 8017188:	fb92 f3f3 	sdiv	r3, r2, r3
 801718c:	9a03      	ldr	r2, [sp, #12]
 801718e:	9312      	str	r3, [sp, #72]	@ 0x48
 8017190:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017192:	bf08      	it	eq
 8017194:	4613      	moveq	r3, r2
 8017196:	e736      	b.n	8017006 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 8017198:	ea5f 4820 	movs.w	r8, r0, asr #16
 801719c:	d457      	bmi.n	801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801719e:	f8dc 7008 	ldr.w	r7, [ip, #8]
 80171a2:	4547      	cmp	r7, r8
 80171a4:	dd53      	ble.n	801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80171a6:	ea5f 4922 	movs.w	r9, r2, asr #16
 80171aa:	d450      	bmi.n	801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80171ac:	f8dc 500c 	ldr.w	r5, [ip, #12]
 80171b0:	454d      	cmp	r5, r9
 80171b2:	dd4c      	ble.n	801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80171b4:	9d01      	ldr	r5, [sp, #4]
 80171b6:	b23f      	sxth	r7, r7
 80171b8:	fb09 5707 	mla	r7, r9, r7, r5
 80171bc:	f817 5008 	ldrb.w	r5, [r7, r8]
 80171c0:	9f02      	ldr	r7, [sp, #8]
 80171c2:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 80171c6:	0e2f      	lsrs	r7, r5, #24
 80171c8:	2fff      	cmp	r7, #255	@ 0xff
 80171ca:	d045      	beq.n	8017258 <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x288>
 80171cc:	fa5f f987 	uxtb.w	r9, r7
 80171d0:	b3ef      	cbz	r7, 801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 80171d2:	fa1f f889 	uxth.w	r8, r9
 80171d6:	ea6f 0909 	mvn.w	r9, r9
 80171da:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 80171de:	fa5f fb85 	uxtb.w	fp, r5
 80171e2:	f814 a007 	ldrb.w	sl, [r4, r7]
 80171e6:	fa5f f989 	uxtb.w	r9, r9
 80171ea:	fb1b fb08 	smulbb	fp, fp, r8
 80171ee:	fb0a ba09 	mla	sl, sl, r9, fp
 80171f2:	fa1f fa8a 	uxth.w	sl, sl
 80171f6:	f10a 0b01 	add.w	fp, sl, #1
 80171fa:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 80171fe:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017202:	f804 a007 	strb.w	sl, [r4, r7]
 8017206:	4427      	add	r7, r4
 8017208:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801720c:	f3c5 4507 	ubfx	r5, r5, #16, #8
 8017210:	f897 b001 	ldrb.w	fp, [r7, #1]
 8017214:	fb1b fb09 	smulbb	fp, fp, r9
 8017218:	fb0a ba08 	mla	sl, sl, r8, fp
 801721c:	fa1f fa8a 	uxth.w	sl, sl
 8017220:	f10a 0b01 	add.w	fp, sl, #1
 8017224:	eb0b 2a1a 	add.w	sl, fp, sl, lsr #8
 8017228:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801722c:	f887 a001 	strb.w	sl, [r7, #1]
 8017230:	f897 a002 	ldrb.w	sl, [r7, #2]
 8017234:	fb1a f909 	smulbb	r9, sl, r9
 8017238:	fb05 9508 	mla	r5, r5, r8, r9
 801723c:	b2ad      	uxth	r5, r5
 801723e:	f105 0901 	add.w	r9, r5, #1
 8017242:	eb09 2915 	add.w	r9, r9, r5, lsr #8
 8017246:	ea4f 2929 	mov.w	r9, r9, asr #8
 801724a:	f887 9002 	strb.w	r9, [r7, #2]
 801724e:	9d12      	ldr	r5, [sp, #72]	@ 0x48
 8017250:	4470      	add	r0, lr
 8017252:	3601      	adds	r6, #1
 8017254:	442a      	add	r2, r5
 8017256:	e760      	b.n	801711a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 8017258:	eb06 0746 	add.w	r7, r6, r6, lsl #1
 801725c:	ea4f 2815 	mov.w	r8, r5, lsr #8
 8017260:	55e5      	strb	r5, [r4, r7]
 8017262:	4427      	add	r7, r4
 8017264:	0c2d      	lsrs	r5, r5, #16
 8017266:	f887 8001 	strb.w	r8, [r7, #1]
 801726a:	70bd      	strb	r5, [r7, #2]
 801726c:	e7ef      	b.n	801724e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801726e:	0a37      	lsrs	r7, r6, #8
 8017270:	f805 6c03 	strb.w	r6, [r5, #-3]
 8017274:	0c36      	lsrs	r6, r6, #16
 8017276:	f805 7c02 	strb.w	r7, [r5, #-2]
 801727a:	f805 6c01 	strb.w	r6, [r5, #-1]
 801727e:	e744      	b.n	801710a <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017280:	b005      	add	sp, #20
 8017282:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017286 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017286:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801728a:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801728c:	9201      	str	r2, [sp, #4]
 801728e:	6870      	ldr	r0, [r6, #4]
 8017290:	f89d 5054 	ldrb.w	r5, [sp, #84]	@ 0x54
 8017294:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8017298:	fa1f fe85 	uxth.w	lr, r5
 801729c:	43ed      	mvns	r5, r5
 801729e:	f8dc 8000 	ldr.w	r8, [ip]
 80172a2:	b2ed      	uxtb	r5, r5
 80172a4:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80172a8:	fb00 2404 	mla	r4, r0, r4, r2
 80172ac:	6832      	ldr	r2, [r6, #0]
 80172ae:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80172b2:	4414      	add	r4, r2
 80172b4:	2900      	cmp	r1, #0
 80172b6:	dc03      	bgt.n	80172c0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 80172b8:	9a01      	ldr	r2, [sp, #4]
 80172ba:	2a00      	cmp	r2, #0
 80172bc:	f340 810d 	ble.w	80174da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80172c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80172c2:	f9bc a008 	ldrsh.w	sl, [ip, #8]
 80172c6:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80172ca:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80172cc:	f9bc 900c 	ldrsh.w	r9, [ip, #12]
 80172d0:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dd0e      	ble.n	80172f6 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x70>
 80172d8:	1406      	asrs	r6, r0, #16
 80172da:	d405      	bmi.n	80172e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80172dc:	4556      	cmp	r6, sl
 80172de:	da03      	bge.n	80172e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80172e0:	1416      	asrs	r6, r2, #16
 80172e2:	d401      	bmi.n	80172e8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62>
 80172e4:	454e      	cmp	r6, r9
 80172e6:	db07      	blt.n	80172f8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 80172e8:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80172ea:	3b01      	subs	r3, #1
 80172ec:	3403      	adds	r4, #3
 80172ee:	4430      	add	r0, r6
 80172f0:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80172f2:	4432      	add	r2, r6
 80172f4:	e7ee      	b.n	80172d4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e>
 80172f6:	d060      	beq.n	80173ba <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x134>
 80172f8:	1e5e      	subs	r6, r3, #1
 80172fa:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80172fc:	fb07 0706 	mla	r7, r7, r6, r0
 8017300:	143f      	asrs	r7, r7, #16
 8017302:	d451      	bmi.n	80173a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017304:	4557      	cmp	r7, sl
 8017306:	da4f      	bge.n	80173a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017308:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801730a:	fb07 2606 	mla	r6, r7, r6, r2
 801730e:	1436      	asrs	r6, r6, #16
 8017310:	d44a      	bmi.n	80173a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017312:	454e      	cmp	r6, r9
 8017314:	da48      	bge.n	80173a8 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x122>
 8017316:	1ce6      	adds	r6, r4, #3
 8017318:	4699      	mov	r9, r3
 801731a:	f1b9 0f00 	cmp.w	r9, #0
 801731e:	f106 0603 	add.w	r6, r6, #3
 8017322:	dd45      	ble.n	80173b0 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x12a>
 8017324:	f9bc b008 	ldrsh.w	fp, [ip, #8]
 8017328:	ea4f 4a20 	mov.w	sl, r0, asr #16
 801732c:	1417      	asrs	r7, r2, #16
 801732e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017332:	fb0b a707 	mla	r7, fp, r7, sl
 8017336:	f816 bc06 	ldrb.w	fp, [r6, #-6]
 801733a:	fb1b fb05 	smulbb	fp, fp, r5
 801733e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8017342:	eb08 0a07 	add.w	sl, r8, r7
 8017346:	f818 7007 	ldrb.w	r7, [r8, r7]
 801734a:	fb07 b70e 	mla	r7, r7, lr, fp
 801734e:	b2bf      	uxth	r7, r7
 8017350:	f107 0b01 	add.w	fp, r7, #1
 8017354:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017358:	f816 bc05 	ldrb.w	fp, [r6, #-5]
 801735c:	fb1b fb05 	smulbb	fp, fp, r5
 8017360:	123f      	asrs	r7, r7, #8
 8017362:	f806 7c06 	strb.w	r7, [r6, #-6]
 8017366:	f89a 7001 	ldrb.w	r7, [sl, #1]
 801736a:	fb07 b70e 	mla	r7, r7, lr, fp
 801736e:	b2bf      	uxth	r7, r7
 8017370:	f107 0b01 	add.w	fp, r7, #1
 8017374:	eb0b 2717 	add.w	r7, fp, r7, lsr #8
 8017378:	123f      	asrs	r7, r7, #8
 801737a:	f806 7c05 	strb.w	r7, [r6, #-5]
 801737e:	f89a 7002 	ldrb.w	r7, [sl, #2]
 8017382:	f816 ac04 	ldrb.w	sl, [r6, #-4]
 8017386:	fb1a fa05 	smulbb	sl, sl, r5
 801738a:	fb07 a70e 	mla	r7, r7, lr, sl
 801738e:	b2bf      	uxth	r7, r7
 8017390:	f107 0a01 	add.w	sl, r7, #1
 8017394:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8017398:	123f      	asrs	r7, r7, #8
 801739a:	f806 7c04 	strb.w	r7, [r6, #-4]
 801739e:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80173a0:	4438      	add	r0, r7
 80173a2:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80173a4:	443a      	add	r2, r7
 80173a6:	e7b8      	b.n	801731a <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 80173a8:	2700      	movs	r7, #0
 80173aa:	1bde      	subs	r6, r3, r7
 80173ac:	2e00      	cmp	r6, #0
 80173ae:	dc3f      	bgt.n	8017430 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1aa>
 80173b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80173b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80173b8:	441c      	add	r4, r3
 80173ba:	2900      	cmp	r1, #0
 80173bc:	f340 808d 	ble.w	80174da <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x254>
 80173c0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80173c4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80173c6:	ee30 0a04 	vadd.f32	s0, s0, s8
 80173ca:	3901      	subs	r1, #1
 80173cc:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80173d0:	eef0 6a62 	vmov.f32	s13, s5
 80173d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80173d8:	ee31 1a05 	vadd.f32	s2, s2, s10
 80173dc:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80173e0:	edcd 6a0d 	vstr	s13, [sp, #52]	@ 0x34
 80173e4:	eef0 6a43 	vmov.f32	s13, s6
 80173e8:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 80173ec:	edcd 6a0e 	vstr	s13, [sp, #56]	@ 0x38
 80173f0:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80173f4:	ee61 7a27 	vmul.f32	s15, s2, s15
 80173f8:	ee77 2a62 	vsub.f32	s5, s14, s5
 80173fc:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017400:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017404:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017408:	ee12 2a90 	vmov	r2, s5
 801740c:	eef0 2a47 	vmov.f32	s5, s14
 8017410:	fb92 f3f3 	sdiv	r3, r2, r3
 8017414:	ee13 2a10 	vmov	r2, s6
 8017418:	930f      	str	r3, [sp, #60]	@ 0x3c
 801741a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801741c:	eeb0 3a67 	vmov.f32	s6, s15
 8017420:	fb92 f3f3 	sdiv	r3, r2, r3
 8017424:	9a01      	ldr	r2, [sp, #4]
 8017426:	9310      	str	r3, [sp, #64]	@ 0x40
 8017428:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801742a:	bf08      	it	eq
 801742c:	4613      	moveq	r3, r2
 801742e:	e741      	b.n	80172b4 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 8017430:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017434:	d44b      	bmi.n	80174ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017436:	f8dc b008 	ldr.w	fp, [ip, #8]
 801743a:	45cb      	cmp	fp, r9
 801743c:	dd47      	ble.n	80174ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801743e:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017442:	d444      	bmi.n	80174ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 8017444:	f8dc 600c 	ldr.w	r6, [ip, #12]
 8017448:	4556      	cmp	r6, sl
 801744a:	dd40      	ble.n	80174ce <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x248>
 801744c:	fa0f f68b 	sxth.w	r6, fp
 8017450:	fb0a 9906 	mla	r9, sl, r6, r9
 8017454:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017458:	eb09 0949 	add.w	r9, r9, r9, lsl #1
 801745c:	f814 b006 	ldrb.w	fp, [r4, r6]
 8017460:	fb1b fb05 	smulbb	fp, fp, r5
 8017464:	eb08 0a09 	add.w	sl, r8, r9
 8017468:	f818 9009 	ldrb.w	r9, [r8, r9]
 801746c:	fb09 b90e 	mla	r9, r9, lr, fp
 8017470:	fa1f f989 	uxth.w	r9, r9
 8017474:	f109 0b01 	add.w	fp, r9, #1
 8017478:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 801747c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017480:	f804 9006 	strb.w	r9, [r4, r6]
 8017484:	4426      	add	r6, r4
 8017486:	f89a 9001 	ldrb.w	r9, [sl, #1]
 801748a:	f896 b001 	ldrb.w	fp, [r6, #1]
 801748e:	fb1b fb05 	smulbb	fp, fp, r5
 8017492:	fb09 b90e 	mla	r9, r9, lr, fp
 8017496:	fa1f f989 	uxth.w	r9, r9
 801749a:	f109 0b01 	add.w	fp, r9, #1
 801749e:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80174a2:	ea4f 2929 	mov.w	r9, r9, asr #8
 80174a6:	f886 9001 	strb.w	r9, [r6, #1]
 80174aa:	f89a 9002 	ldrb.w	r9, [sl, #2]
 80174ae:	f896 a002 	ldrb.w	sl, [r6, #2]
 80174b2:	fb1a fa05 	smulbb	sl, sl, r5
 80174b6:	fb09 a90e 	mla	r9, r9, lr, sl
 80174ba:	fa1f f989 	uxth.w	r9, r9
 80174be:	f109 0a01 	add.w	sl, r9, #1
 80174c2:	eb0a 2919 	add.w	r9, sl, r9, lsr #8
 80174c6:	ea4f 2929 	mov.w	r9, r9, asr #8
 80174ca:	f886 9002 	strb.w	r9, [r6, #2]
 80174ce:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 80174d0:	3701      	adds	r7, #1
 80174d2:	4430      	add	r0, r6
 80174d4:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80174d6:	4432      	add	r2, r6
 80174d8:	e767      	b.n	80173aa <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x124>
 80174da:	b003      	add	sp, #12
 80174dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

080174e0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 80174e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80174e4:	9d11      	ldr	r5, [sp, #68]	@ 0x44
 80174e6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80174ea:	9201      	str	r2, [sp, #4]
 80174ec:	6868      	ldr	r0, [r5, #4]
 80174ee:	9f14      	ldr	r7, [sp, #80]	@ 0x50
 80174f0:	e9dd 2412 	ldrd	r2, r4, [sp, #72]	@ 0x48
 80174f4:	e9dd ec0f 	ldrd	lr, ip, [sp, #60]	@ 0x3c
 80174f8:	fb00 2404 	mla	r4, r0, r4, r2
 80174fc:	682a      	ldr	r2, [r5, #0]
 80174fe:	f8d7 8000 	ldr.w	r8, [r7]
 8017502:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8017506:	4414      	add	r4, r2
 8017508:	2900      	cmp	r1, #0
 801750a:	dc03      	bgt.n	8017514 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801750c:	9a01      	ldr	r2, [sp, #4]
 801750e:	2a00      	cmp	r2, #0
 8017510:	f340 80af 	ble.w	8017672 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 8017514:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017516:	f9b7 a008 	ldrsh.w	sl, [r7, #8]
 801751a:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801751e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017520:	f9b7 900c 	ldrsh.w	r9, [r7, #12]
 8017524:	f502 4200 	add.w	r2, r2, #32768	@ 0x8000
 8017528:	2b00      	cmp	r3, #0
 801752a:	dd0c      	ble.n	8017546 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x66>
 801752c:	1405      	asrs	r5, r0, #16
 801752e:	d405      	bmi.n	801753c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017530:	4555      	cmp	r5, sl
 8017532:	da03      	bge.n	801753c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017534:	1415      	asrs	r5, r2, #16
 8017536:	d401      	bmi.n	801753c <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017538:	454d      	cmp	r5, r9
 801753a:	db05      	blt.n	8017548 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 801753c:	4470      	add	r0, lr
 801753e:	4462      	add	r2, ip
 8017540:	3b01      	subs	r3, #1
 8017542:	3403      	adds	r4, #3
 8017544:	e7f0      	b.n	8017528 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 8017546:	d038      	beq.n	80175ba <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xda>
 8017548:	1e5d      	subs	r5, r3, #1
 801754a:	fb0e 0605 	mla	r6, lr, r5, r0
 801754e:	1436      	asrs	r6, r6, #16
 8017550:	d42a      	bmi.n	80175a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8017552:	4556      	cmp	r6, sl
 8017554:	da28      	bge.n	80175a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8017556:	fb0c 2505 	mla	r5, ip, r5, r2
 801755a:	142d      	asrs	r5, r5, #16
 801755c:	d424      	bmi.n	80175a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 801755e:	454d      	cmp	r5, r9
 8017560:	da22      	bge.n	80175a8 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xc8>
 8017562:	1ce6      	adds	r6, r4, #3
 8017564:	4699      	mov	r9, r3
 8017566:	f1b9 0f00 	cmp.w	r9, #0
 801756a:	f106 0603 	add.w	r6, r6, #3
 801756e:	dd1f      	ble.n	80175b0 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xd0>
 8017570:	f9b7 b008 	ldrsh.w	fp, [r7, #8]
 8017574:	ea4f 4a20 	mov.w	sl, r0, asr #16
 8017578:	1415      	asrs	r5, r2, #16
 801757a:	4470      	add	r0, lr
 801757c:	4462      	add	r2, ip
 801757e:	f109 39ff 	add.w	r9, r9, #4294967295
 8017582:	fb0b a505 	mla	r5, fp, r5, sl
 8017586:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801758a:	eb08 0a05 	add.w	sl, r8, r5
 801758e:	f818 5005 	ldrb.w	r5, [r8, r5]
 8017592:	f806 5c06 	strb.w	r5, [r6, #-6]
 8017596:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801759a:	f806 5c05 	strb.w	r5, [r6, #-5]
 801759e:	f89a 5002 	ldrb.w	r5, [sl, #2]
 80175a2:	f806 5c04 	strb.w	r5, [r6, #-4]
 80175a6:	e7de      	b.n	8017566 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 80175a8:	2600      	movs	r6, #0
 80175aa:	1b9d      	subs	r5, r3, r6
 80175ac:	2d00      	cmp	r5, #0
 80175ae:	dc38      	bgt.n	8017622 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 80175b0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80175b4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80175b8:	441c      	add	r4, r3
 80175ba:	2900      	cmp	r1, #0
 80175bc:	dd59      	ble.n	8017672 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x192>
 80175be:	ee30 0a04 	vadd.f32	s0, s0, s8
 80175c2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80175c4:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80175c8:	3901      	subs	r1, #1
 80175ca:	eeb0 6a62 	vmov.f32	s12, s5
 80175ce:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80175d2:	ee31 1a05 	vadd.f32	s2, s2, s10
 80175d6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175da:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 80175de:	eeb0 6a43 	vmov.f32	s12, s6
 80175e2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80175e6:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 80175ea:	ee20 7aa7 	vmul.f32	s14, s1, s15
 80175ee:	ee61 7a27 	vmul.f32	s15, s2, s15
 80175f2:	ee77 2a62 	vsub.f32	s5, s14, s5
 80175f6:	ee37 3ac3 	vsub.f32	s6, s15, s6
 80175fa:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 80175fe:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017602:	ee12 2a90 	vmov	r2, s5
 8017606:	eef0 2a47 	vmov.f32	s5, s14
 801760a:	fb92 fef3 	sdiv	lr, r2, r3
 801760e:	ee13 2a10 	vmov	r2, s6
 8017612:	eeb0 3a67 	vmov.f32	s6, s15
 8017616:	fb92 fcf3 	sdiv	ip, r2, r3
 801761a:	9a01      	ldr	r2, [sp, #4]
 801761c:	bf08      	it	eq
 801761e:	4613      	moveq	r3, r2
 8017620:	e772      	b.n	8017508 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8017622:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017626:	d420      	bmi.n	801766a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8017628:	f8d7 b008 	ldr.w	fp, [r7, #8]
 801762c:	45cb      	cmp	fp, r9
 801762e:	dd1c      	ble.n	801766a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8017630:	ea5f 4a22 	movs.w	sl, r2, asr #16
 8017634:	d419      	bmi.n	801766a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 8017636:	68fd      	ldr	r5, [r7, #12]
 8017638:	4555      	cmp	r5, sl
 801763a:	dd16      	ble.n	801766a <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18a>
 801763c:	fa0f f58b 	sxth.w	r5, fp
 8017640:	fb0a 9505 	mla	r5, sl, r5, r9
 8017644:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017648:	f818 9005 	ldrb.w	r9, [r8, r5]
 801764c:	eb08 0b05 	add.w	fp, r8, r5
 8017650:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8017654:	f804 9005 	strb.w	r9, [r4, r5]
 8017658:	4425      	add	r5, r4
 801765a:	f89b 9001 	ldrb.w	r9, [fp, #1]
 801765e:	f885 9001 	strb.w	r9, [r5, #1]
 8017662:	f89b 9002 	ldrb.w	r9, [fp, #2]
 8017666:	f885 9002 	strb.w	r9, [r5, #2]
 801766a:	4470      	add	r0, lr
 801766c:	4462      	add	r2, ip
 801766e:	3601      	adds	r6, #1
 8017670:	e79b      	b.n	80175aa <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xca>
 8017672:	b003      	add	sp, #12
 8017674:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017678 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801767c:	b085      	sub	sp, #20
 801767e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017682:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017684:	9202      	str	r2, [sp, #8]
 8017686:	f89d 205c 	ldrb.w	r2, [sp, #92]	@ 0x5c
 801768a:	6860      	ldr	r0, [r4, #4]
 801768c:	9203      	str	r2, [sp, #12]
 801768e:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017692:	f8dd e044 	ldr.w	lr, [sp, #68]	@ 0x44
 8017696:	e9dd 2514 	ldrd	r2, r5, [sp, #80]	@ 0x50
 801769a:	fb00 2505 	mla	r5, r0, r5, r2
 801769e:	6822      	ldr	r2, [r4, #0]
 80176a0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80176a4:	4415      	add	r5, r2
 80176a6:	f8dc 2000 	ldr.w	r2, [ip]
 80176aa:	9201      	str	r2, [sp, #4]
 80176ac:	2900      	cmp	r1, #0
 80176ae:	dc03      	bgt.n	80176b8 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40>
 80176b0:	9a02      	ldr	r2, [sp, #8]
 80176b2:	2a00      	cmp	r2, #0
 80176b4:	f340 8122 	ble.w	80178fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80176b8:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 80176ba:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 80176be:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 80176c2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 80176c4:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 80176c8:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 80176cc:	2b00      	cmp	r3, #0
 80176ce:	dd0d      	ble.n	80176ec <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 80176d0:	1422      	asrs	r2, r4, #16
 80176d2:	d405      	bmi.n	80176e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80176d4:	4542      	cmp	r2, r8
 80176d6:	da03      	bge.n	80176e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80176d8:	1402      	asrs	r2, r0, #16
 80176da:	d401      	bmi.n	80176e0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x68>
 80176dc:	42ba      	cmp	r2, r7
 80176de:	db06      	blt.n	80176ee <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 80176e0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80176e2:	4474      	add	r4, lr
 80176e4:	3b01      	subs	r3, #1
 80176e6:	3503      	adds	r5, #3
 80176e8:	4410      	add	r0, r2
 80176ea:	e7ef      	b.n	80176cc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x54>
 80176ec:	d072      	beq.n	80177d4 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15c>
 80176ee:	1e5a      	subs	r2, r3, #1
 80176f0:	fb0e 4602 	mla	r6, lr, r2, r4
 80176f4:	1436      	asrs	r6, r6, #16
 80176f6:	d462      	bmi.n	80177be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80176f8:	4546      	cmp	r6, r8
 80176fa:	da60      	bge.n	80177be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 80176fc:	9e12      	ldr	r6, [sp, #72]	@ 0x48
 80176fe:	fb06 0202 	mla	r2, r6, r2, r0
 8017702:	1412      	asrs	r2, r2, #16
 8017704:	d45b      	bmi.n	80177be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 8017706:	42ba      	cmp	r2, r7
 8017708:	da59      	bge.n	80177be <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x146>
 801770a:	1cef      	adds	r7, r5, #3
 801770c:	4699      	mov	r9, r3
 801770e:	f1b9 0f00 	cmp.w	r9, #0
 8017712:	dd5a      	ble.n	80177ca <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017714:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017718:	1426      	asrs	r6, r4, #16
 801771a:	1402      	asrs	r2, r0, #16
 801771c:	fb08 6202 	mla	r2, r8, r2, r6
 8017720:	9e01      	ldr	r6, [sp, #4]
 8017722:	f856 6022 	ldr.w	r6, [r6, r2, lsl #2]
 8017726:	ea5f 6816 	movs.w	r8, r6, lsr #24
 801772a:	d041      	beq.n	80177b0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x138>
 801772c:	9a03      	ldr	r2, [sp, #12]
 801772e:	fa5f fb86 	uxtb.w	fp, r6
 8017732:	fb02 f808 	mul.w	r8, r2, r8
 8017736:	f108 0201 	add.w	r2, r8, #1
 801773a:	eb02 2228 	add.w	r2, r2, r8, asr #8
 801773e:	f817 8c03 	ldrb.w	r8, [r7, #-3]
 8017742:	1212      	asrs	r2, r2, #8
 8017744:	fa1f fa82 	uxth.w	sl, r2
 8017748:	43d2      	mvns	r2, r2
 801774a:	fb1b fb0a 	smulbb	fp, fp, sl
 801774e:	b2d2      	uxtb	r2, r2
 8017750:	fb08 b802 	mla	r8, r8, r2, fp
 8017754:	fa1f f888 	uxth.w	r8, r8
 8017758:	f108 0b01 	add.w	fp, r8, #1
 801775c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017760:	f3c6 2b07 	ubfx	fp, r6, #8, #8
 8017764:	f3c6 4607 	ubfx	r6, r6, #16, #8
 8017768:	fb1b fb0a 	smulbb	fp, fp, sl
 801776c:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017770:	fb16 fa0a 	smulbb	sl, r6, sl
 8017774:	f817 6c01 	ldrb.w	r6, [r7, #-1]
 8017778:	f807 8c03 	strb.w	r8, [r7, #-3]
 801777c:	f817 8c02 	ldrb.w	r8, [r7, #-2]
 8017780:	fb06 aa02 	mla	sl, r6, r2, sl
 8017784:	fb08 b802 	mla	r8, r8, r2, fp
 8017788:	fa1f fa8a 	uxth.w	sl, sl
 801778c:	fa1f f888 	uxth.w	r8, r8
 8017790:	f10a 0601 	add.w	r6, sl, #1
 8017794:	f108 0b01 	add.w	fp, r8, #1
 8017798:	eb06 2a1a 	add.w	sl, r6, sl, lsr #8
 801779c:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80177a0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80177a4:	ea4f 2828 	mov.w	r8, r8, asr #8
 80177a8:	f807 ac01 	strb.w	sl, [r7, #-1]
 80177ac:	f807 8c02 	strb.w	r8, [r7, #-2]
 80177b0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80177b2:	4474      	add	r4, lr
 80177b4:	3703      	adds	r7, #3
 80177b6:	f109 39ff 	add.w	r9, r9, #4294967295
 80177ba:	4410      	add	r0, r2
 80177bc:	e7a7      	b.n	801770e <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 80177be:	f04f 0800 	mov.w	r8, #0
 80177c2:	eba3 0208 	sub.w	r2, r3, r8
 80177c6:	2a00      	cmp	r2, #0
 80177c8:	dc3b      	bgt.n	8017842 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ca>
 80177ca:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80177ce:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80177d2:	441d      	add	r5, r3
 80177d4:	2900      	cmp	r1, #0
 80177d6:	f340 8091 	ble.w	80178fc <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x284>
 80177da:	ee30 0a04 	vadd.f32	s0, s0, s8
 80177de:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80177e0:	ee70 0aa4 	vadd.f32	s1, s1, s9
 80177e4:	3901      	subs	r1, #1
 80177e6:	eeb0 6a62 	vmov.f32	s12, s5
 80177ea:	eec6 7a80 	vdiv.f32	s15, s13, s0
 80177ee:	ee31 1a05 	vadd.f32	s2, s2, s10
 80177f2:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 80177f6:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 80177fa:	eeb0 6a43 	vmov.f32	s12, s6
 80177fe:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017802:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017806:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801780a:	ee61 7a27 	vmul.f32	s15, s2, s15
 801780e:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017812:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017816:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801781a:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801781e:	ee12 2a90 	vmov	r2, s5
 8017822:	eef0 2a47 	vmov.f32	s5, s14
 8017826:	fb92 fef3 	sdiv	lr, r2, r3
 801782a:	ee13 2a10 	vmov	r2, s6
 801782e:	eeb0 3a67 	vmov.f32	s6, s15
 8017832:	fb92 f3f3 	sdiv	r3, r2, r3
 8017836:	9a02      	ldr	r2, [sp, #8]
 8017838:	9312      	str	r3, [sp, #72]	@ 0x48
 801783a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801783c:	bf08      	it	eq
 801783e:	4613      	moveq	r3, r2
 8017840:	e734      	b.n	80176ac <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 8017842:	1427      	asrs	r7, r4, #16
 8017844:	d454      	bmi.n	80178f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017846:	f8dc 6008 	ldr.w	r6, [ip, #8]
 801784a:	42be      	cmp	r6, r7
 801784c:	dd50      	ble.n	80178f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801784e:	ea5f 4920 	movs.w	r9, r0, asr #16
 8017852:	d44d      	bmi.n	80178f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 8017854:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017858:	454a      	cmp	r2, r9
 801785a:	dd49      	ble.n	80178f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801785c:	b236      	sxth	r6, r6
 801785e:	9a01      	ldr	r2, [sp, #4]
 8017860:	fb09 7606 	mla	r6, r9, r6, r7
 8017864:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017868:	0e3a      	lsrs	r2, r7, #24
 801786a:	d041      	beq.n	80178f0 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x278>
 801786c:	9e03      	ldr	r6, [sp, #12]
 801786e:	fa5f fb87 	uxtb.w	fp, r7
 8017872:	4372      	muls	r2, r6
 8017874:	1c56      	adds	r6, r2, #1
 8017876:	eb06 2222 	add.w	r2, r6, r2, asr #8
 801787a:	eb08 0648 	add.w	r6, r8, r8, lsl #1
 801787e:	1212      	asrs	r2, r2, #8
 8017880:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017884:	fa1f fa82 	uxth.w	sl, r2
 8017888:	43d2      	mvns	r2, r2
 801788a:	fb1b fb0a 	smulbb	fp, fp, sl
 801788e:	b2d2      	uxtb	r2, r2
 8017890:	fb09 b902 	mla	r9, r9, r2, fp
 8017894:	fa1f f989 	uxth.w	r9, r9
 8017898:	f109 0b01 	add.w	fp, r9, #1
 801789c:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80178a0:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 80178a4:	f3c7 4707 	ubfx	r7, r7, #16, #8
 80178a8:	fb1b fb0a 	smulbb	fp, fp, sl
 80178ac:	ea4f 2929 	mov.w	r9, r9, asr #8
 80178b0:	fb17 fa0a 	smulbb	sl, r7, sl
 80178b4:	f805 9006 	strb.w	r9, [r5, r6]
 80178b8:	442e      	add	r6, r5
 80178ba:	78b7      	ldrb	r7, [r6, #2]
 80178bc:	f896 9001 	ldrb.w	r9, [r6, #1]
 80178c0:	fb07 aa02 	mla	sl, r7, r2, sl
 80178c4:	fb09 b902 	mla	r9, r9, r2, fp
 80178c8:	fa1f fa8a 	uxth.w	sl, sl
 80178cc:	fa1f f989 	uxth.w	r9, r9
 80178d0:	f10a 0701 	add.w	r7, sl, #1
 80178d4:	f109 0b01 	add.w	fp, r9, #1
 80178d8:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 80178dc:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 80178e0:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80178e4:	ea4f 2929 	mov.w	r9, r9, asr #8
 80178e8:	f886 a002 	strb.w	sl, [r6, #2]
 80178ec:	f886 9001 	strb.w	r9, [r6, #1]
 80178f0:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80178f2:	4474      	add	r4, lr
 80178f4:	f108 0801 	add.w	r8, r8, #1
 80178f8:	4410      	add	r0, r2
 80178fa:	e762      	b.n	80177c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14a>
 80178fc:	b005      	add	sp, #20
 80178fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08017902 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017902:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017906:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 8017908:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801790c:	9201      	str	r2, [sp, #4]
 801790e:	6860      	ldr	r0, [r4, #4]
 8017910:	f8dd c050 	ldr.w	ip, [sp, #80]	@ 0x50
 8017914:	e9dd 2512 	ldrd	r2, r5, [sp, #72]	@ 0x48
 8017918:	fb00 2505 	mla	r5, r0, r5, r2
 801791c:	6822      	ldr	r2, [r4, #0]
 801791e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017922:	4415      	add	r5, r2
 8017924:	f8dc 2000 	ldr.w	r2, [ip]
 8017928:	9200      	str	r2, [sp, #0]
 801792a:	2900      	cmp	r1, #0
 801792c:	dc03      	bgt.n	8017936 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34>
 801792e:	9a01      	ldr	r2, [sp, #4]
 8017930:	2a00      	cmp	r2, #0
 8017932:	f340 812b 	ble.w	8017b8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017936:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8017938:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801793c:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017940:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8017942:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017946:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 801794a:	2b00      	cmp	r3, #0
 801794c:	dd0e      	ble.n	801796c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801794e:	1422      	asrs	r2, r4, #16
 8017950:	d405      	bmi.n	801795e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017952:	4572      	cmp	r2, lr
 8017954:	da03      	bge.n	801795e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 8017956:	1402      	asrs	r2, r0, #16
 8017958:	d401      	bmi.n	801795e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801795a:	42ba      	cmp	r2, r7
 801795c:	db07      	blt.n	801796e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6c>
 801795e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017960:	3b01      	subs	r3, #1
 8017962:	3503      	adds	r5, #3
 8017964:	4414      	add	r4, r2
 8017966:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017968:	4410      	add	r0, r2
 801796a:	e7ee      	b.n	801794a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801796c:	d06f      	beq.n	8017a4e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14c>
 801796e:	1e5a      	subs	r2, r3, #1
 8017970:	9e0f      	ldr	r6, [sp, #60]	@ 0x3c
 8017972:	fb06 4602 	mla	r6, r6, r2, r4
 8017976:	1436      	asrs	r6, r6, #16
 8017978:	d45e      	bmi.n	8017a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801797a:	4576      	cmp	r6, lr
 801797c:	da5c      	bge.n	8017a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801797e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8017980:	fb06 0202 	mla	r2, r6, r2, r0
 8017984:	1412      	asrs	r2, r2, #16
 8017986:	d457      	bmi.n	8017a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 8017988:	42ba      	cmp	r2, r7
 801798a:	da55      	bge.n	8017a38 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x136>
 801798c:	1cee      	adds	r6, r5, #3
 801798e:	469a      	mov	sl, r3
 8017990:	f1ba 0f00 	cmp.w	sl, #0
 8017994:	dd56      	ble.n	8017a44 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017996:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 801799a:	1427      	asrs	r7, r4, #16
 801799c:	1402      	asrs	r2, r0, #16
 801799e:	fb0e 7202 	mla	r2, lr, r2, r7
 80179a2:	9f00      	ldr	r7, [sp, #0]
 80179a4:	f857 7022 	ldr.w	r7, [r7, r2, lsl #2]
 80179a8:	ea5f 6e17 	movs.w	lr, r7, lsr #24
 80179ac:	d03c      	beq.n	8017a28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 80179ae:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 80179b2:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 80179b6:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80179ba:	fa5f f28e 	uxtb.w	r2, lr
 80179be:	b2ff      	uxtb	r7, r7
 80179c0:	f000 80dd 	beq.w	8017b7e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 80179c4:	fa1f f882 	uxth.w	r8, r2
 80179c8:	43d2      	mvns	r2, r2
 80179ca:	f816 ec03 	ldrb.w	lr, [r6, #-3]
 80179ce:	fb17 f708 	smulbb	r7, r7, r8
 80179d2:	b2d2      	uxtb	r2, r2
 80179d4:	fb19 f908 	smulbb	r9, r9, r8
 80179d8:	fb0e 7702 	mla	r7, lr, r2, r7
 80179dc:	fb1b f808 	smulbb	r8, fp, r8
 80179e0:	b2bf      	uxth	r7, r7
 80179e2:	f107 0e01 	add.w	lr, r7, #1
 80179e6:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 80179ea:	123f      	asrs	r7, r7, #8
 80179ec:	f806 7c03 	strb.w	r7, [r6, #-3]
 80179f0:	f816 7c02 	ldrb.w	r7, [r6, #-2]
 80179f4:	fb07 9902 	mla	r9, r7, r2, r9
 80179f8:	fa1f f989 	uxth.w	r9, r9
 80179fc:	f109 0701 	add.w	r7, r9, #1
 8017a00:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017a04:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017a08:	fb07 8802 	mla	r8, r7, r2, r8
 8017a0c:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017a10:	fa1f f888 	uxth.w	r8, r8
 8017a14:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017a18:	f108 0201 	add.w	r2, r8, #1
 8017a1c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017a20:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017a24:	f806 8c01 	strb.w	r8, [r6, #-1]
 8017a28:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017a2a:	3603      	adds	r6, #3
 8017a2c:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017a30:	4414      	add	r4, r2
 8017a32:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017a34:	4410      	add	r0, r2
 8017a36:	e7ab      	b.n	8017990 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 8017a38:	f04f 0e00 	mov.w	lr, #0
 8017a3c:	eba3 020e 	sub.w	r2, r3, lr
 8017a40:	2a00      	cmp	r2, #0
 8017a42:	dc3d      	bgt.n	8017ac0 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1be>
 8017a44:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017a48:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017a4c:	441d      	add	r5, r3
 8017a4e:	2900      	cmp	r1, #0
 8017a50:	f340 809c 	ble.w	8017b8c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28a>
 8017a54:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017a58:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017a5a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017a5e:	3901      	subs	r1, #1
 8017a60:	eeb0 6a62 	vmov.f32	s12, s5
 8017a64:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017a68:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017a6c:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a70:	ed8d 6a0d 	vstr	s12, [sp, #52]	@ 0x34
 8017a74:	eeb0 6a43 	vmov.f32	s12, s6
 8017a78:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017a7c:	ed8d 6a0e 	vstr	s12, [sp, #56]	@ 0x38
 8017a80:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017a84:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017a88:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017a8c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017a90:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017a94:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017a98:	ee12 2a90 	vmov	r2, s5
 8017a9c:	eef0 2a47 	vmov.f32	s5, s14
 8017aa0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017aa4:	ee13 2a10 	vmov	r2, s6
 8017aa8:	930f      	str	r3, [sp, #60]	@ 0x3c
 8017aaa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017aac:	eeb0 3a67 	vmov.f32	s6, s15
 8017ab0:	fb92 f3f3 	sdiv	r3, r2, r3
 8017ab4:	9a01      	ldr	r2, [sp, #4]
 8017ab6:	9310      	str	r3, [sp, #64]	@ 0x40
 8017ab8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8017aba:	bf08      	it	eq
 8017abc:	4613      	moveq	r3, r2
 8017abe:	e734      	b.n	801792a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x28>
 8017ac0:	1427      	asrs	r7, r4, #16
 8017ac2:	d44d      	bmi.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017ac4:	f8dc 6008 	ldr.w	r6, [ip, #8]
 8017ac8:	42be      	cmp	r6, r7
 8017aca:	dd49      	ble.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017acc:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017ad0:	d446      	bmi.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017ad2:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017ad6:	4542      	cmp	r2, r8
 8017ad8:	dd42      	ble.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017ada:	b236      	sxth	r6, r6
 8017adc:	9a00      	ldr	r2, [sp, #0]
 8017ade:	fb08 7606 	mla	r6, r8, r6, r7
 8017ae2:	f852 7026 	ldr.w	r7, [r2, r6, lsl #2]
 8017ae6:	0e3a      	lsrs	r2, r7, #24
 8017ae8:	d03a      	beq.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017aea:	2aff      	cmp	r2, #255	@ 0xff
 8017aec:	b2d6      	uxtb	r6, r2
 8017aee:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017af2:	f3c7 2a07 	ubfx	sl, r7, #8, #8
 8017af6:	ea4f 024e 	mov.w	r2, lr, lsl #1
 8017afa:	b2ff      	uxtb	r7, r7
 8017afc:	d037      	beq.n	8017b6e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26c>
 8017afe:	fa1f f986 	uxth.w	r9, r6
 8017b02:	4472      	add	r2, lr
 8017b04:	43f6      	mvns	r6, r6
 8017b06:	f815 8002 	ldrb.w	r8, [r5, r2]
 8017b0a:	fb17 f709 	smulbb	r7, r7, r9
 8017b0e:	fb1a fa09 	smulbb	sl, sl, r9
 8017b12:	b2f6      	uxtb	r6, r6
 8017b14:	fb1b f909 	smulbb	r9, fp, r9
 8017b18:	fb08 7706 	mla	r7, r8, r6, r7
 8017b1c:	b2bf      	uxth	r7, r7
 8017b1e:	f107 0801 	add.w	r8, r7, #1
 8017b22:	eb08 2717 	add.w	r7, r8, r7, lsr #8
 8017b26:	123f      	asrs	r7, r7, #8
 8017b28:	54af      	strb	r7, [r5, r2]
 8017b2a:	442a      	add	r2, r5
 8017b2c:	7857      	ldrb	r7, [r2, #1]
 8017b2e:	fb07 aa06 	mla	sl, r7, r6, sl
 8017b32:	fa1f fa8a 	uxth.w	sl, sl
 8017b36:	f10a 0701 	add.w	r7, sl, #1
 8017b3a:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017b3e:	7897      	ldrb	r7, [r2, #2]
 8017b40:	fb07 9906 	mla	r9, r7, r6, r9
 8017b44:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017b48:	fa1f f989 	uxth.w	r9, r9
 8017b4c:	f882 a001 	strb.w	sl, [r2, #1]
 8017b50:	f109 0601 	add.w	r6, r9, #1
 8017b54:	eb06 2919 	add.w	r9, r6, r9, lsr #8
 8017b58:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017b5c:	f882 9002 	strb.w	r9, [r2, #2]
 8017b60:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017b62:	f10e 0e01 	add.w	lr, lr, #1
 8017b66:	4414      	add	r4, r2
 8017b68:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017b6a:	4410      	add	r0, r2
 8017b6c:	e766      	b.n	8017a3c <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x13a>
 8017b6e:	4472      	add	r2, lr
 8017b70:	54af      	strb	r7, [r5, r2]
 8017b72:	442a      	add	r2, r5
 8017b74:	f882 a001 	strb.w	sl, [r2, #1]
 8017b78:	f882 b002 	strb.w	fp, [r2, #2]
 8017b7c:	e7f0      	b.n	8017b60 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25e>
 8017b7e:	f806 7c03 	strb.w	r7, [r6, #-3]
 8017b82:	f806 9c02 	strb.w	r9, [r6, #-2]
 8017b86:	f806 bc01 	strb.w	fp, [r6, #-1]
 8017b8a:	e74d      	b.n	8017a28 <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 8017b8c:	b003      	add	sp, #12
 8017b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

08017b94 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017b94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017b98:	b087      	sub	sp, #28
 8017b9a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017b9e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 8017ba0:	9204      	str	r2, [sp, #16]
 8017ba2:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 8017ba6:	6860      	ldr	r0, [r4, #4]
 8017ba8:	9205      	str	r2, [sp, #20]
 8017baa:	f8dd c060 	ldr.w	ip, [sp, #96]	@ 0x60
 8017bae:	f8dd e04c 	ldr.w	lr, [sp, #76]	@ 0x4c
 8017bb2:	9101      	str	r1, [sp, #4]
 8017bb4:	e9dd 2516 	ldrd	r2, r5, [sp, #88]	@ 0x58
 8017bb8:	fb00 2505 	mla	r5, r0, r5, r2
 8017bbc:	6822      	ldr	r2, [r4, #0]
 8017bbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017bc2:	4415      	add	r5, r2
 8017bc4:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017bc8:	3201      	adds	r2, #1
 8017bca:	f022 0201 	bic.w	r2, r2, #1
 8017bce:	9202      	str	r2, [sp, #8]
 8017bd0:	f8dc 2000 	ldr.w	r2, [ip]
 8017bd4:	9203      	str	r2, [sp, #12]
 8017bd6:	9a01      	ldr	r2, [sp, #4]
 8017bd8:	2a00      	cmp	r2, #0
 8017bda:	dc03      	bgt.n	8017be4 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x50>
 8017bdc:	9a04      	ldr	r2, [sp, #16]
 8017bde:	2a00      	cmp	r2, #0
 8017be0:	f340 8135 	ble.w	8017e4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017be4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017be6:	f9bc 8008 	ldrsh.w	r8, [ip, #8]
 8017bea:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017bee:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017bf0:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017bf4:	f502 4000 	add.w	r0, r2, #32768	@ 0x8000
 8017bf8:	2b00      	cmp	r3, #0
 8017bfa:	dd0d      	ble.n	8017c18 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 8017bfc:	1422      	asrs	r2, r4, #16
 8017bfe:	d405      	bmi.n	8017c0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017c00:	4542      	cmp	r2, r8
 8017c02:	da03      	bge.n	8017c0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017c04:	1402      	asrs	r2, r0, #16
 8017c06:	d401      	bmi.n	8017c0c <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 8017c08:	42ba      	cmp	r2, r7
 8017c0a:	db06      	blt.n	8017c1a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x86>
 8017c0c:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017c0e:	4474      	add	r4, lr
 8017c10:	3b01      	subs	r3, #1
 8017c12:	3503      	adds	r5, #3
 8017c14:	4410      	add	r0, r2
 8017c16:	e7ef      	b.n	8017bf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64>
 8017c18:	d077      	beq.n	8017d0a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x176>
 8017c1a:	1e5a      	subs	r2, r3, #1
 8017c1c:	fb0e 4602 	mla	r6, lr, r2, r4
 8017c20:	1436      	asrs	r6, r6, #16
 8017c22:	d469      	bmi.n	8017cf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017c24:	4546      	cmp	r6, r8
 8017c26:	da67      	bge.n	8017cf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017c28:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 8017c2a:	fb06 0202 	mla	r2, r6, r2, r0
 8017c2e:	1412      	asrs	r2, r2, #16
 8017c30:	d462      	bmi.n	8017cf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017c32:	42ba      	cmp	r2, r7
 8017c34:	da60      	bge.n	8017cf8 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017c36:	1cee      	adds	r6, r5, #3
 8017c38:	4699      	mov	r9, r3
 8017c3a:	f1b9 0f00 	cmp.w	r9, #0
 8017c3e:	dd5f      	ble.n	8017d00 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x16c>
 8017c40:	1422      	asrs	r2, r4, #16
 8017c42:	9902      	ldr	r1, [sp, #8]
 8017c44:	1407      	asrs	r7, r0, #16
 8017c46:	fb01 2707 	mla	r7, r1, r7, r2
 8017c4a:	9903      	ldr	r1, [sp, #12]
 8017c4c:	087a      	lsrs	r2, r7, #1
 8017c4e:	5c8a      	ldrb	r2, [r1, r2]
 8017c50:	07f9      	lsls	r1, r7, #31
 8017c52:	bf54      	ite	pl
 8017c54:	f002 020f 	andpl.w	r2, r2, #15
 8017c58:	1112      	asrmi	r2, r2, #4
 8017c5a:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017c5e:	b2d2      	uxtb	r2, r2
 8017c60:	2a00      	cmp	r2, #0
 8017c62:	d042      	beq.n	8017cea <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 8017c64:	497b      	ldr	r1, [pc, #492]	@ (8017e54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017c66:	680f      	ldr	r7, [r1, #0]
 8017c68:	9905      	ldr	r1, [sp, #20]
 8017c6a:	fa5f fb87 	uxtb.w	fp, r7
 8017c6e:	434a      	muls	r2, r1
 8017c70:	f102 0801 	add.w	r8, r2, #1
 8017c74:	eb08 2222 	add.w	r2, r8, r2, asr #8
 8017c78:	f816 8c03 	ldrb.w	r8, [r6, #-3]
 8017c7c:	1212      	asrs	r2, r2, #8
 8017c7e:	fa1f fa82 	uxth.w	sl, r2
 8017c82:	43d2      	mvns	r2, r2
 8017c84:	fb1b fb0a 	smulbb	fp, fp, sl
 8017c88:	b2d2      	uxtb	r2, r2
 8017c8a:	fb08 b802 	mla	r8, r8, r2, fp
 8017c8e:	fa1f f888 	uxth.w	r8, r8
 8017c92:	f108 0b01 	add.w	fp, r8, #1
 8017c96:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017c9a:	f3c7 2b07 	ubfx	fp, r7, #8, #8
 8017c9e:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8017ca2:	fb1b fb0a 	smulbb	fp, fp, sl
 8017ca6:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017caa:	fb17 fa0a 	smulbb	sl, r7, sl
 8017cae:	f816 7c01 	ldrb.w	r7, [r6, #-1]
 8017cb2:	f806 8c03 	strb.w	r8, [r6, #-3]
 8017cb6:	f816 8c02 	ldrb.w	r8, [r6, #-2]
 8017cba:	fb07 aa02 	mla	sl, r7, r2, sl
 8017cbe:	fb08 b802 	mla	r8, r8, r2, fp
 8017cc2:	fa1f fa8a 	uxth.w	sl, sl
 8017cc6:	fa1f f888 	uxth.w	r8, r8
 8017cca:	f10a 0701 	add.w	r7, sl, #1
 8017cce:	f108 0b01 	add.w	fp, r8, #1
 8017cd2:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8017cd6:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8017cda:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017cde:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017ce2:	f806 ac01 	strb.w	sl, [r6, #-1]
 8017ce6:	f806 8c02 	strb.w	r8, [r6, #-2]
 8017cea:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017cec:	4474      	add	r4, lr
 8017cee:	3603      	adds	r6, #3
 8017cf0:	f109 39ff 	add.w	r9, r9, #4294967295
 8017cf4:	4410      	add	r0, r2
 8017cf6:	e7a0      	b.n	8017c3a <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa6>
 8017cf8:	2700      	movs	r7, #0
 8017cfa:	1bda      	subs	r2, r3, r7
 8017cfc:	2a00      	cmp	r2, #0
 8017cfe:	dc3e      	bgt.n	8017d7e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 8017d00:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017d04:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017d08:	441d      	add	r5, r3
 8017d0a:	9b01      	ldr	r3, [sp, #4]
 8017d0c:	2b00      	cmp	r3, #0
 8017d0e:	f340 809e 	ble.w	8017e4e <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ba>
 8017d12:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017d16:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017d18:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017d1c:	eeb0 6a62 	vmov.f32	s12, s5
 8017d20:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017d24:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017d28:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d2c:	ed8d 6a11 	vstr	s12, [sp, #68]	@ 0x44
 8017d30:	eeb0 6a43 	vmov.f32	s12, s6
 8017d34:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017d38:	ed8d 6a12 	vstr	s12, [sp, #72]	@ 0x48
 8017d3c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017d40:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017d44:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017d48:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017d4c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8017d50:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8017d54:	ee12 2a90 	vmov	r2, s5
 8017d58:	eef0 2a47 	vmov.f32	s5, s14
 8017d5c:	fb92 fef3 	sdiv	lr, r2, r3
 8017d60:	ee13 2a10 	vmov	r2, s6
 8017d64:	eeb0 3a67 	vmov.f32	s6, s15
 8017d68:	fb92 f3f3 	sdiv	r3, r2, r3
 8017d6c:	9314      	str	r3, [sp, #80]	@ 0x50
 8017d6e:	9b01      	ldr	r3, [sp, #4]
 8017d70:	9a04      	ldr	r2, [sp, #16]
 8017d72:	3b01      	subs	r3, #1
 8017d74:	9301      	str	r3, [sp, #4]
 8017d76:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8017d78:	bf08      	it	eq
 8017d7a:	4613      	moveq	r3, r2
 8017d7c:	e72b      	b.n	8017bd6 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42>
 8017d7e:	1426      	asrs	r6, r4, #16
 8017d80:	d460      	bmi.n	8017e44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017d82:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017d86:	42b2      	cmp	r2, r6
 8017d88:	dd5c      	ble.n	8017e44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017d8a:	ea5f 4820 	movs.w	r8, r0, asr #16
 8017d8e:	d459      	bmi.n	8017e44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017d90:	f8dc 200c 	ldr.w	r2, [ip, #12]
 8017d94:	4542      	cmp	r2, r8
 8017d96:	dd55      	ble.n	8017e44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017d98:	9a02      	ldr	r2, [sp, #8]
 8017d9a:	9903      	ldr	r1, [sp, #12]
 8017d9c:	fb08 6602 	mla	r6, r8, r2, r6
 8017da0:	0872      	lsrs	r2, r6, #1
 8017da2:	07f6      	lsls	r6, r6, #31
 8017da4:	5c8a      	ldrb	r2, [r1, r2]
 8017da6:	bf54      	ite	pl
 8017da8:	f002 020f 	andpl.w	r2, r2, #15
 8017dac:	1112      	asrmi	r2, r2, #4
 8017dae:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017db2:	b2d2      	uxtb	r2, r2
 8017db4:	2a00      	cmp	r2, #0
 8017db6:	d045      	beq.n	8017e44 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 8017db8:	4926      	ldr	r1, [pc, #152]	@ (8017e54 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c0>)
 8017dba:	f8d1 8000 	ldr.w	r8, [r1]
 8017dbe:	9905      	ldr	r1, [sp, #20]
 8017dc0:	fa5f fb88 	uxtb.w	fp, r8
 8017dc4:	434a      	muls	r2, r1
 8017dc6:	1c56      	adds	r6, r2, #1
 8017dc8:	eb06 2222 	add.w	r2, r6, r2, asr #8
 8017dcc:	eb07 0647 	add.w	r6, r7, r7, lsl #1
 8017dd0:	1212      	asrs	r2, r2, #8
 8017dd2:	f815 9006 	ldrb.w	r9, [r5, r6]
 8017dd6:	fa1f fa82 	uxth.w	sl, r2
 8017dda:	43d2      	mvns	r2, r2
 8017ddc:	fb1b fb0a 	smulbb	fp, fp, sl
 8017de0:	b2d2      	uxtb	r2, r2
 8017de2:	fb09 b902 	mla	r9, r9, r2, fp
 8017de6:	fa1f f989 	uxth.w	r9, r9
 8017dea:	f109 0b01 	add.w	fp, r9, #1
 8017dee:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017df2:	f3c8 2b07 	ubfx	fp, r8, #8, #8
 8017df6:	f3c8 4807 	ubfx	r8, r8, #16, #8
 8017dfa:	fb1b fb0a 	smulbb	fp, fp, sl
 8017dfe:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017e02:	fb18 fa0a 	smulbb	sl, r8, sl
 8017e06:	f805 9006 	strb.w	r9, [r5, r6]
 8017e0a:	442e      	add	r6, r5
 8017e0c:	f896 8002 	ldrb.w	r8, [r6, #2]
 8017e10:	f896 9001 	ldrb.w	r9, [r6, #1]
 8017e14:	fb08 aa02 	mla	sl, r8, r2, sl
 8017e18:	fb09 b902 	mla	r9, r9, r2, fp
 8017e1c:	fa1f fa8a 	uxth.w	sl, sl
 8017e20:	fa1f f989 	uxth.w	r9, r9
 8017e24:	f10a 0801 	add.w	r8, sl, #1
 8017e28:	f109 0b01 	add.w	fp, r9, #1
 8017e2c:	eb08 2a1a 	add.w	sl, r8, sl, lsr #8
 8017e30:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8017e34:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 8017e38:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017e3c:	f886 a002 	strb.w	sl, [r6, #2]
 8017e40:	f886 9001 	strb.w	r9, [r6, #1]
 8017e44:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8017e46:	4474      	add	r4, lr
 8017e48:	3701      	adds	r7, #1
 8017e4a:	4410      	add	r0, r2
 8017e4c:	e755      	b.n	8017cfa <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x166>
 8017e4e:	b007      	add	sp, #28
 8017e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e54:	240253b8 	.word	0x240253b8

08017e58 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 8017e58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017e5c:	b085      	sub	sp, #20
 8017e5e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8017e62:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 8017e64:	9203      	str	r2, [sp, #12]
 8017e66:	6860      	ldr	r0, [r4, #4]
 8017e68:	f8dd c058 	ldr.w	ip, [sp, #88]	@ 0x58
 8017e6c:	9100      	str	r1, [sp, #0]
 8017e6e:	e9dd 2614 	ldrd	r2, r6, [sp, #80]	@ 0x50
 8017e72:	fb00 2606 	mla	r6, r0, r6, r2
 8017e76:	6822      	ldr	r2, [r4, #0]
 8017e78:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8017e7c:	4416      	add	r6, r2
 8017e7e:	f8dc 2008 	ldr.w	r2, [ip, #8]
 8017e82:	3201      	adds	r2, #1
 8017e84:	f022 0201 	bic.w	r2, r2, #1
 8017e88:	9201      	str	r2, [sp, #4]
 8017e8a:	f8dc 2000 	ldr.w	r2, [ip]
 8017e8e:	9202      	str	r2, [sp, #8]
 8017e90:	9a00      	ldr	r2, [sp, #0]
 8017e92:	2a00      	cmp	r2, #0
 8017e94:	dc03      	bgt.n	8017e9e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x46>
 8017e96:	9a03      	ldr	r2, [sp, #12]
 8017e98:	2a00      	cmp	r2, #0
 8017e9a:	f340 8140 	ble.w	801811e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017e9e:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8017ea0:	f9bc e008 	ldrsh.w	lr, [ip, #8]
 8017ea4:	f502 4500 	add.w	r5, r2, #32768	@ 0x8000
 8017ea8:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8017eaa:	f9bc 700c 	ldrsh.w	r7, [ip, #12]
 8017eae:	f502 4400 	add.w	r4, r2, #32768	@ 0x8000
 8017eb2:	2b00      	cmp	r3, #0
 8017eb4:	dd0e      	ble.n	8017ed4 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 8017eb6:	142a      	asrs	r2, r5, #16
 8017eb8:	d405      	bmi.n	8017ec6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017eba:	4572      	cmp	r2, lr
 8017ebc:	da03      	bge.n	8017ec6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017ebe:	1422      	asrs	r2, r4, #16
 8017ec0:	d401      	bmi.n	8017ec6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e>
 8017ec2:	42ba      	cmp	r2, r7
 8017ec4:	db07      	blt.n	8017ed6 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7e>
 8017ec6:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017ec8:	3b01      	subs	r3, #1
 8017eca:	3603      	adds	r6, #3
 8017ecc:	4415      	add	r5, r2
 8017ece:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017ed0:	4414      	add	r4, r2
 8017ed2:	e7ee      	b.n	8017eb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 8017ed4:	d072      	beq.n	8017fbc <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x164>
 8017ed6:	1e5a      	subs	r2, r3, #1
 8017ed8:	9811      	ldr	r0, [sp, #68]	@ 0x44
 8017eda:	fb00 5002 	mla	r0, r0, r2, r5
 8017ede:	1400      	asrs	r0, r0, #16
 8017ee0:	d463      	bmi.n	8017faa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ee2:	4570      	cmp	r0, lr
 8017ee4:	da61      	bge.n	8017faa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ee6:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8017ee8:	fb00 4202 	mla	r2, r0, r2, r4
 8017eec:	1412      	asrs	r2, r2, #16
 8017eee:	d45c      	bmi.n	8017faa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ef0:	42ba      	cmp	r2, r7
 8017ef2:	da5a      	bge.n	8017faa <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x152>
 8017ef4:	1cf0      	adds	r0, r6, #3
 8017ef6:	469a      	mov	sl, r3
 8017ef8:	f1ba 0f00 	cmp.w	sl, #0
 8017efc:	dd59      	ble.n	8017fb2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x15a>
 8017efe:	142a      	asrs	r2, r5, #16
 8017f00:	9901      	ldr	r1, [sp, #4]
 8017f02:	1427      	asrs	r7, r4, #16
 8017f04:	fb01 2707 	mla	r7, r1, r7, r2
 8017f08:	9902      	ldr	r1, [sp, #8]
 8017f0a:	087a      	lsrs	r2, r7, #1
 8017f0c:	5c8a      	ldrb	r2, [r1, r2]
 8017f0e:	07f9      	lsls	r1, r7, #31
 8017f10:	bf54      	ite	pl
 8017f12:	f002 020f 	andpl.w	r2, r2, #15
 8017f16:	1112      	asrmi	r2, r2, #4
 8017f18:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8017f1c:	b2d2      	uxtb	r2, r2
 8017f1e:	2a00      	cmp	r2, #0
 8017f20:	d03b      	beq.n	8017f9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 8017f22:	4980      	ldr	r1, [pc, #512]	@ (8018124 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8017f24:	2aff      	cmp	r2, #255	@ 0xff
 8017f26:	680f      	ldr	r7, [r1, #0]
 8017f28:	f3c7 4b07 	ubfx	fp, r7, #16, #8
 8017f2c:	f3c7 2907 	ubfx	r9, r7, #8, #8
 8017f30:	b2ff      	uxtb	r7, r7
 8017f32:	f000 80ed 	beq.w	8018110 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b8>
 8017f36:	fa1f f882 	uxth.w	r8, r2
 8017f3a:	43d2      	mvns	r2, r2
 8017f3c:	f810 ec03 	ldrb.w	lr, [r0, #-3]
 8017f40:	fb17 f708 	smulbb	r7, r7, r8
 8017f44:	b2d2      	uxtb	r2, r2
 8017f46:	fb19 f908 	smulbb	r9, r9, r8
 8017f4a:	fb0e 7702 	mla	r7, lr, r2, r7
 8017f4e:	fb1b f808 	smulbb	r8, fp, r8
 8017f52:	b2bf      	uxth	r7, r7
 8017f54:	f107 0e01 	add.w	lr, r7, #1
 8017f58:	eb0e 2717 	add.w	r7, lr, r7, lsr #8
 8017f5c:	123f      	asrs	r7, r7, #8
 8017f5e:	f800 7c03 	strb.w	r7, [r0, #-3]
 8017f62:	f810 7c02 	ldrb.w	r7, [r0, #-2]
 8017f66:	fb07 9902 	mla	r9, r7, r2, r9
 8017f6a:	fa1f f989 	uxth.w	r9, r9
 8017f6e:	f109 0701 	add.w	r7, r9, #1
 8017f72:	eb07 2919 	add.w	r9, r7, r9, lsr #8
 8017f76:	f810 7c01 	ldrb.w	r7, [r0, #-1]
 8017f7a:	fb07 8802 	mla	r8, r7, r2, r8
 8017f7e:	ea4f 2929 	mov.w	r9, r9, asr #8
 8017f82:	fa1f f888 	uxth.w	r8, r8
 8017f86:	f800 9c02 	strb.w	r9, [r0, #-2]
 8017f8a:	f108 0201 	add.w	r2, r8, #1
 8017f8e:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 8017f92:	ea4f 2828 	mov.w	r8, r8, asr #8
 8017f96:	f800 8c01 	strb.w	r8, [r0, #-1]
 8017f9a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8017f9c:	3003      	adds	r0, #3
 8017f9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8017fa2:	4415      	add	r5, r2
 8017fa4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8017fa6:	4414      	add	r4, r2
 8017fa8:	e7a6      	b.n	8017ef8 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 8017faa:	2700      	movs	r7, #0
 8017fac:	1bda      	subs	r2, r3, r7
 8017fae:	2a00      	cmp	r2, #0
 8017fb0:	dc40      	bgt.n	8018034 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1dc>
 8017fb2:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8017fb6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8017fba:	441e      	add	r6, r3
 8017fbc:	9b00      	ldr	r3, [sp, #0]
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	f340 80ad 	ble.w	801811e <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2c6>
 8017fc4:	ee30 0a04 	vadd.f32	s0, s0, s8
 8017fc8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8017fca:	ee70 0aa4 	vadd.f32	s1, s1, s9
 8017fce:	eeb0 6a62 	vmov.f32	s12, s5
 8017fd2:	eec6 7a80 	vdiv.f32	s15, s13, s0
 8017fd6:	ee31 1a05 	vadd.f32	s2, s2, s10
 8017fda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fde:	ed8d 6a0f 	vstr	s12, [sp, #60]	@ 0x3c
 8017fe2:	eeb0 6a43 	vmov.f32	s12, s6
 8017fe6:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 8017fea:	ed8d 6a10 	vstr	s12, [sp, #64]	@ 0x40
 8017fee:	ee20 7aa7 	vmul.f32	s14, s1, s15
 8017ff2:	ee61 7a27 	vmul.f32	s15, s2, s15
 8017ff6:	ee77 2a62 	vsub.f32	s5, s14, s5
 8017ffa:	ee37 3ac3 	vsub.f32	s6, s15, s6
 8017ffe:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 8018002:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 8018006:	ee12 2a90 	vmov	r2, s5
 801800a:	eef0 2a47 	vmov.f32	s5, s14
 801800e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018012:	ee13 2a10 	vmov	r2, s6
 8018016:	9311      	str	r3, [sp, #68]	@ 0x44
 8018018:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801801a:	eeb0 3a67 	vmov.f32	s6, s15
 801801e:	fb92 f3f3 	sdiv	r3, r2, r3
 8018022:	9312      	str	r3, [sp, #72]	@ 0x48
 8018024:	9b00      	ldr	r3, [sp, #0]
 8018026:	9a03      	ldr	r2, [sp, #12]
 8018028:	3b01      	subs	r3, #1
 801802a:	9300      	str	r3, [sp, #0]
 801802c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801802e:	bf08      	it	eq
 8018030:	4613      	moveq	r3, r2
 8018032:	e72d      	b.n	8017e90 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38>
 8018034:	1428      	asrs	r0, r5, #16
 8018036:	d45c      	bmi.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018038:	f8dc 2008 	ldr.w	r2, [ip, #8]
 801803c:	4282      	cmp	r2, r0
 801803e:	dd58      	ble.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018040:	ea5f 4e24 	movs.w	lr, r4, asr #16
 8018044:	d455      	bmi.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018046:	f8dc 200c 	ldr.w	r2, [ip, #12]
 801804a:	4572      	cmp	r2, lr
 801804c:	dd51      	ble.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801804e:	9a01      	ldr	r2, [sp, #4]
 8018050:	9902      	ldr	r1, [sp, #8]
 8018052:	fb0e 0002 	mla	r0, lr, r2, r0
 8018056:	0842      	lsrs	r2, r0, #1
 8018058:	07c0      	lsls	r0, r0, #31
 801805a:	5c8a      	ldrb	r2, [r1, r2]
 801805c:	bf54      	ite	pl
 801805e:	f002 020f 	andpl.w	r2, r2, #15
 8018062:	1112      	asrmi	r2, r2, #4
 8018064:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 8018068:	b2d2      	uxtb	r2, r2
 801806a:	2a00      	cmp	r2, #0
 801806c:	d041      	beq.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 801806e:	492d      	ldr	r1, [pc, #180]	@ (8018124 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2cc>)
 8018070:	2aff      	cmp	r2, #255	@ 0xff
 8018072:	6808      	ldr	r0, [r1, #0]
 8018074:	f3c0 4b07 	ubfx	fp, r0, #16, #8
 8018078:	f3c0 2a07 	ubfx	sl, r0, #8, #8
 801807c:	fa5f fe80 	uxtb.w	lr, r0
 8018080:	ea4f 0047 	mov.w	r0, r7, lsl #1
 8018084:	d03b      	beq.n	80180fe <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2a6>
 8018086:	fa1f f982 	uxth.w	r9, r2
 801808a:	4438      	add	r0, r7
 801808c:	43d2      	mvns	r2, r2
 801808e:	f816 8000 	ldrb.w	r8, [r6, r0]
 8018092:	fb1e fe09 	smulbb	lr, lr, r9
 8018096:	fb1a fa09 	smulbb	sl, sl, r9
 801809a:	b2d2      	uxtb	r2, r2
 801809c:	fb1b f909 	smulbb	r9, fp, r9
 80180a0:	fb08 ee02 	mla	lr, r8, r2, lr
 80180a4:	fa1f fe8e 	uxth.w	lr, lr
 80180a8:	f10e 0801 	add.w	r8, lr, #1
 80180ac:	eb08 2e1e 	add.w	lr, r8, lr, lsr #8
 80180b0:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 80180b4:	f806 e000 	strb.w	lr, [r6, r0]
 80180b8:	4430      	add	r0, r6
 80180ba:	f890 e001 	ldrb.w	lr, [r0, #1]
 80180be:	fb0e aa02 	mla	sl, lr, r2, sl
 80180c2:	fa1f fa8a 	uxth.w	sl, sl
 80180c6:	f10a 0e01 	add.w	lr, sl, #1
 80180ca:	eb0e 2a1a 	add.w	sl, lr, sl, lsr #8
 80180ce:	f890 e002 	ldrb.w	lr, [r0, #2]
 80180d2:	fb0e 9902 	mla	r9, lr, r2, r9
 80180d6:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 80180da:	fa1f f989 	uxth.w	r9, r9
 80180de:	f880 a001 	strb.w	sl, [r0, #1]
 80180e2:	f109 0201 	add.w	r2, r9, #1
 80180e6:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 80180ea:	ea4f 2929 	mov.w	r9, r9, asr #8
 80180ee:	f880 9002 	strb.w	r9, [r0, #2]
 80180f2:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80180f4:	3701      	adds	r7, #1
 80180f6:	4415      	add	r5, r2
 80180f8:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80180fa:	4414      	add	r4, r2
 80180fc:	e756      	b.n	8017fac <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x154>
 80180fe:	4438      	add	r0, r7
 8018100:	f806 e000 	strb.w	lr, [r6, r0]
 8018104:	4430      	add	r0, r6
 8018106:	f880 a001 	strb.w	sl, [r0, #1]
 801810a:	f880 b002 	strb.w	fp, [r0, #2]
 801810e:	e7f0      	b.n	80180f2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29a>
 8018110:	f800 7c03 	strb.w	r7, [r0, #-3]
 8018114:	f800 9c02 	strb.w	r9, [r0, #-2]
 8018118:	f800 bc01 	strb.w	fp, [r0, #-1]
 801811c:	e73d      	b.n	8017f9a <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x142>
 801811e:	b005      	add	sp, #20
 8018120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018124:	240253b8 	.word	0x240253b8

08018128 <_ZN8touchgfx8LCD24bppD1Ev>:
 8018128:	4770      	bx	lr

0801812a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID1Ev>:
 801812a:	4770      	bx	lr

0801812c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D1Ev>:
 801812c:	4770      	bx	lr

0801812e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED1Ev>:
 801812e:	4770      	bx	lr

08018130 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D1Ev>:
 8018130:	4770      	bx	lr

08018132 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD1Ev>:
 8018132:	4770      	bx	lr

08018134 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD1Ev>:
 8018134:	4770      	bx	lr

08018136 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD1Ev>:
 8018136:	4770      	bx	lr

08018138 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD1Ev>:
 8018138:	4770      	bx	lr

0801813a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801813a:	4770      	bx	lr

0801813c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801813c:	4770      	bx	lr

0801813e <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801813e:	4770      	bx	lr

08018140 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018140:	4770      	bx	lr

08018142 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018142:	4770      	bx	lr

08018144 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018144:	4770      	bx	lr

08018146 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018146:	4770      	bx	lr

08018148 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018148:	4770      	bx	lr

0801814a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD1Ev>:
 801814a:	4770      	bx	lr

0801814c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD1Ev>:
 801814c:	4770      	bx	lr

0801814e <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD1Ev>:
 801814e:	4770      	bx	lr

08018150 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD1Ev>:
 8018150:	4770      	bx	lr

08018152 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD1Ev>:
 8018152:	4770      	bx	lr

08018154 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD1Ev>:
 8018154:	4770      	bx	lr

08018156 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD1Ev>:
 8018156:	4770      	bx	lr

08018158 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD1Ev>:
 8018158:	4770      	bx	lr
	...

0801815c <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh>:
 801815c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801815e:	4606      	mov	r6, r0
 8018160:	b087      	sub	sp, #28
 8018162:	4615      	mov	r5, r2
 8018164:	461f      	mov	r7, r3
 8018166:	b353      	cbz	r3, 80181be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018168:	f9b1 3004 	ldrsh.w	r3, [r1, #4]
 801816c:	2b00      	cmp	r3, #0
 801816e:	dd26      	ble.n	80181be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018170:	f9b1 3006 	ldrsh.w	r3, [r1, #6]
 8018174:	2b00      	cmp	r3, #0
 8018176:	dd22      	ble.n	80181be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 8018178:	6808      	ldr	r0, [r1, #0]
 801817a:	aa04      	add	r2, sp, #16
 801817c:	6849      	ldr	r1, [r1, #4]
 801817e:	4c1b      	ldr	r4, [pc, #108]	@ (80181ec <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x90>)
 8018180:	c203      	stmia	r2!, {r0, r1}
 8018182:	a804      	add	r0, sp, #16
 8018184:	f7fa ffe4 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018188:	6820      	ldr	r0, [r4, #0]
 801818a:	6803      	ldr	r3, [r0, #0]
 801818c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801818e:	4798      	blx	r3
 8018190:	2fff      	cmp	r7, #255	@ 0xff
 8018192:	d016      	beq.n	80181c2 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x66>
 8018194:	f010 0f08 	tst.w	r0, #8
 8018198:	6820      	ldr	r0, [r4, #0]
 801819a:	d015      	beq.n	80181c8 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x6c>
 801819c:	2400      	movs	r4, #0
 801819e:	6801      	ldr	r1, [r0, #0]
 80181a0:	f8bd 3012 	ldrh.w	r3, [sp, #18]
 80181a4:	f8bd 2010 	ldrh.w	r2, [sp, #16]
 80181a8:	e9cd 7402 	strd	r7, r4, [sp, #8]
 80181ac:	f8bd 4016 	ldrh.w	r4, [sp, #22]
 80181b0:	9401      	str	r4, [sp, #4]
 80181b2:	f8bd 4014 	ldrh.w	r4, [sp, #20]
 80181b6:	9400      	str	r4, [sp, #0]
 80181b8:	6e0c      	ldr	r4, [r1, #96]	@ 0x60
 80181ba:	4629      	mov	r1, r5
 80181bc:	47a0      	blx	r4
 80181be:	b007      	add	sp, #28
 80181c0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80181c2:	f010 0f02 	tst.w	r0, #2
 80181c6:	e7e7      	b.n	8018198 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x3c>
 80181c8:	6803      	ldr	r3, [r0, #0]
 80181ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80181cc:	4798      	blx	r3
 80181ce:	4b08      	ldr	r3, [pc, #32]	@ (80181f0 <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x94>)
 80181d0:	4601      	mov	r1, r0
 80181d2:	4630      	mov	r0, r6
 80181d4:	881a      	ldrh	r2, [r3, #0]
 80181d6:	6833      	ldr	r3, [r6, #0]
 80181d8:	e9cd 5700 	strd	r5, r7, [sp]
 80181dc:	6a5d      	ldr	r5, [r3, #36]	@ 0x24
 80181de:	ab04      	add	r3, sp, #16
 80181e0:	47a8      	blx	r5
 80181e2:	6820      	ldr	r0, [r4, #0]
 80181e4:	6803      	ldr	r3, [r0, #0]
 80181e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80181e8:	4798      	blx	r3
 80181ea:	e7e8      	b.n	80181be <_ZN8touchgfx8LCD24bpp8fillRectERKNS_4RectENS_9colortypeEh+0x62>
 80181ec:	240253a8 	.word	0x240253a8
 80181f0:	240253a2 	.word	0x240253a2

080181f4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb>:
 80181f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80181f8:	b08b      	sub	sp, #44	@ 0x2c
 80181fa:	460d      	mov	r5, r1
 80181fc:	4616      	mov	r6, r2
 80181fe:	f89d 8048 	ldrb.w	r8, [sp, #72]	@ 0x48
 8018202:	f1b8 0f00 	cmp.w	r8, #0
 8018206:	d047      	beq.n	8018298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018208:	6810      	ldr	r0, [r2, #0]
 801820a:	ac06      	add	r4, sp, #24
 801820c:	6851      	ldr	r1, [r2, #4]
 801820e:	4f51      	ldr	r7, [pc, #324]	@ (8018354 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x160>)
 8018210:	c403      	stmia	r4!, {r0, r1}
 8018212:	6818      	ldr	r0, [r3, #0]
 8018214:	ac08      	add	r4, sp, #32
 8018216:	6859      	ldr	r1, [r3, #4]
 8018218:	c403      	stmia	r4!, {r0, r1}
 801821a:	a806      	add	r0, sp, #24
 801821c:	f7fa ff98 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018220:	4631      	mov	r1, r6
 8018222:	a808      	add	r0, sp, #32
 8018224:	f7fa ffbc 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018228:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801822c:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 8018230:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018234:	6838      	ldr	r0, [r7, #0]
 8018236:	fb11 2103 	smlabb	r1, r1, r3, r2
 801823a:	f9bd 6024 	ldrsh.w	r6, [sp, #36]	@ 0x24
 801823e:	f9bd 4026 	ldrsh.w	r4, [sp, #38]	@ 0x26
 8018242:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018246:	440d      	add	r5, r1
 8018248:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801824c:	440a      	add	r2, r1
 801824e:	f8ad 2020 	strh.w	r2, [sp, #32]
 8018252:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 8018256:	4413      	add	r3, r2
 8018258:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801825c:	6803      	ldr	r3, [r0, #0]
 801825e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8018260:	4798      	blx	r3
 8018262:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 8018266:	d01a      	beq.n	801829e <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xaa>
 8018268:	f010 0f04 	tst.w	r0, #4
 801826c:	6838      	ldr	r0, [r7, #0]
 801826e:	d019      	beq.n	80182a4 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xb0>
 8018270:	2100      	movs	r1, #0
 8018272:	6807      	ldr	r7, [r0, #0]
 8018274:	b2a4      	uxth	r4, r4
 8018276:	f8cd 800c 	str.w	r8, [sp, #12]
 801827a:	b2b6      	uxth	r6, r6
 801827c:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 8018280:	9401      	str	r4, [sp, #4]
 8018282:	9600      	str	r6, [sp, #0]
 8018284:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 8018288:	e9cd 1104 	strd	r1, r1, [sp, #16]
 801828c:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 8018290:	9102      	str	r1, [sp, #8]
 8018292:	4629      	mov	r1, r5
 8018294:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8018296:	47a0      	blx	r4
 8018298:	b00b      	add	sp, #44	@ 0x2c
 801829a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801829e:	f010 0f01 	tst.w	r0, #1
 80182a2:	e7e3      	b.n	801826c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x78>
 80182a4:	6803      	ldr	r3, [r0, #0]
 80182a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80182a8:	4798      	blx	r3
 80182aa:	4a2b      	ldr	r2, [pc, #172]	@ (8018358 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x164>)
 80182ac:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 80182b0:	f1b8 0fff 	cmp.w	r8, #255	@ 0xff
 80182b4:	8813      	ldrh	r3, [r2, #0]
 80182b6:	f9bd c020 	ldrsh.w	ip, [sp, #32]
 80182ba:	fb03 f404 	mul.w	r4, r3, r4
 80182be:	fb03 c101 	mla	r1, r3, r1, ip
 80182c2:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 80182c6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 80182ca:	4408      	add	r0, r1
 80182cc:	eb06 0146 	add.w	r1, r6, r6, lsl #1
 80182d0:	4404      	add	r4, r0
 80182d2:	d02e      	beq.n	8018332 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x13e>
 80182d4:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 80182d8:	1b9b      	subs	r3, r3, r6
 80182da:	f1c8 0cff 	rsb	ip, r8, #255	@ 0xff
 80182de:	1b96      	subs	r6, r2, r6
 80182e0:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 80182e4:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 80182e8:	42a0      	cmp	r0, r4
 80182ea:	d22d      	bcs.n	8018348 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 80182ec:	eb00 0e01 	add.w	lr, r0, r1
 80182f0:	4570      	cmp	r0, lr
 80182f2:	d210      	bcs.n	8018316 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x122>
 80182f4:	f890 9000 	ldrb.w	r9, [r0]
 80182f8:	f815 2b01 	ldrb.w	r2, [r5], #1
 80182fc:	fb19 f90c 	smulbb	r9, r9, ip
 8018300:	fb02 9208 	mla	r2, r2, r8, r9
 8018304:	b292      	uxth	r2, r2
 8018306:	f102 0901 	add.w	r9, r2, #1
 801830a:	eb09 2212 	add.w	r2, r9, r2, lsr #8
 801830e:	1212      	asrs	r2, r2, #8
 8018310:	f800 2b01 	strb.w	r2, [r0], #1
 8018314:	e7ec      	b.n	80182f0 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xfc>
 8018316:	4418      	add	r0, r3
 8018318:	4435      	add	r5, r6
 801831a:	e7e5      	b.n	80182e8 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xf4>
 801831c:	8813      	ldrh	r3, [r2, #0]
 801831e:	1b9b      	subs	r3, r3, r6
 8018320:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018324:	4418      	add	r0, r3
 8018326:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801832a:	1b9b      	subs	r3, r3, r6
 801832c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018330:	441d      	add	r5, r3
 8018332:	42a0      	cmp	r0, r4
 8018334:	d208      	bcs.n	8018348 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x154>
 8018336:	eb00 0c01 	add.w	ip, r0, r1
 801833a:	4560      	cmp	r0, ip
 801833c:	d2ee      	bcs.n	801831c <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x128>
 801833e:	f815 3b01 	ldrb.w	r3, [r5], #1
 8018342:	f800 3b01 	strb.w	r3, [r0], #1
 8018346:	e7f8      	b.n	801833a <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0x146>
 8018348:	6838      	ldr	r0, [r7, #0]
 801834a:	6803      	ldr	r3, [r0, #0]
 801834c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801834e:	4798      	blx	r3
 8018350:	e7a2      	b.n	8018298 <_ZN8touchgfx8LCD24bpp8blitCopyEPKtRKNS_4RectES5_hb+0xa4>
 8018352:	bf00      	nop
 8018354:	240253a8 	.word	0x240253a8
 8018358:	240253a2 	.word	0x240253a2

0801835c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE>:
 801835c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801835e:	2300      	movs	r3, #0
 8018360:	b085      	sub	sp, #20
 8018362:	9300      	str	r3, [sp, #0]
 8018364:	4b41      	ldr	r3, [pc, #260]	@ (801846c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x110>)
 8018366:	781b      	ldrb	r3, [r3, #0]
 8018368:	2b00      	cmp	r3, #0
 801836a:	d136      	bne.n	80183da <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7e>
 801836c:	4a40      	ldr	r2, [pc, #256]	@ (8018470 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 801836e:	f9b2 2000 	ldrsh.w	r2, [r2]
 8018372:	f8ad 2004 	strh.w	r2, [sp, #4]
 8018376:	2b00      	cmp	r3, #0
 8018378:	d131      	bne.n	80183de <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x82>
 801837a:	4b3e      	ldr	r3, [pc, #248]	@ (8018474 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 801837c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8018380:	ac02      	add	r4, sp, #8
 8018382:	6808      	ldr	r0, [r1, #0]
 8018384:	f8ad 3006 	strh.w	r3, [sp, #6]
 8018388:	ab02      	add	r3, sp, #8
 801838a:	6849      	ldr	r1, [r1, #4]
 801838c:	4d3a      	ldr	r5, [pc, #232]	@ (8018478 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x11c>)
 801838e:	c303      	stmia	r3!, {r0, r1}
 8018390:	4669      	mov	r1, sp
 8018392:	4620      	mov	r0, r4
 8018394:	f7fa ff04 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018398:	4668      	mov	r0, sp
 801839a:	f7fa fed9 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801839e:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80183a2:	f8bd 2000 	ldrh.w	r2, [sp]
 80183a6:	462e      	mov	r6, r5
 80183a8:	6828      	ldr	r0, [r5, #0]
 80183aa:	4413      	add	r3, r2
 80183ac:	f8bd 2002 	ldrh.w	r2, [sp, #2]
 80183b0:	f8ad 3008 	strh.w	r3, [sp, #8]
 80183b4:	f8bd 300a 	ldrh.w	r3, [sp, #10]
 80183b8:	4413      	add	r3, r2
 80183ba:	f8ad 300a 	strh.w	r3, [sp, #10]
 80183be:	6803      	ldr	r3, [r0, #0]
 80183c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80183c2:	4798      	blx	r3
 80183c4:	f010 0f01 	tst.w	r0, #1
 80183c8:	d00b      	beq.n	80183e2 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x86>
 80183ca:	6828      	ldr	r0, [r5, #0]
 80183cc:	6803      	ldr	r3, [r0, #0]
 80183ce:	e894 0006 	ldmia.w	r4, {r1, r2}
 80183d2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80183d4:	4798      	blx	r3
 80183d6:	b005      	add	sp, #20
 80183d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80183da:	4a26      	ldr	r2, [pc, #152]	@ (8018474 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x118>)
 80183dc:	e7c7      	b.n	801836e <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x12>
 80183de:	4b24      	ldr	r3, [pc, #144]	@ (8018470 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 80183e0:	e7cc      	b.n	801837c <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x20>
 80183e2:	6830      	ldr	r0, [r6, #0]
 80183e4:	f9bd 700e 	ldrsh.w	r7, [sp, #14]
 80183e8:	6803      	ldr	r3, [r0, #0]
 80183ea:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80183ee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80183f0:	4798      	blx	r3
 80183f2:	f9bd 3008 	ldrsh.w	r3, [sp, #8]
 80183f6:	f8bd 200a 	ldrh.w	r2, [sp, #10]
 80183fa:	f8bd 4004 	ldrh.w	r4, [sp, #4]
 80183fe:	fb14 3402 	smlabb	r4, r4, r2, r3
 8018402:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8018406:	4404      	add	r4, r0
 8018408:	6830      	ldr	r0, [r6, #0]
 801840a:	6803      	ldr	r3, [r0, #0]
 801840c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801840e:	4798      	blx	r3
 8018410:	4917      	ldr	r1, [pc, #92]	@ (8018470 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x114>)
 8018412:	f9bd 200a 	ldrsh.w	r2, [sp, #10]
 8018416:	880b      	ldrh	r3, [r1, #0]
 8018418:	f9bd c008 	ldrsh.w	ip, [sp, #8]
 801841c:	fb03 c202 	mla	r2, r3, r2, ip
 8018420:	437b      	muls	r3, r7
 8018422:	eb05 0745 	add.w	r7, r5, r5, lsl #1
 8018426:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801842a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801842e:	4410      	add	r0, r2
 8018430:	18c2      	adds	r2, r0, r3
 8018432:	4290      	cmp	r0, r2
 8018434:	d214      	bcs.n	8018460 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x104>
 8018436:	eb00 0c07 	add.w	ip, r0, r7
 801843a:	4560      	cmp	r0, ip
 801843c:	d204      	bcs.n	8018448 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xec>
 801843e:	f814 3b01 	ldrb.w	r3, [r4], #1
 8018442:	f800 3b01 	strb.w	r3, [r0], #1
 8018446:	e7f8      	b.n	801843a <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xde>
 8018448:	880b      	ldrh	r3, [r1, #0]
 801844a:	1b5b      	subs	r3, r3, r5
 801844c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018450:	4418      	add	r0, r3
 8018452:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8018456:	1b5b      	subs	r3, r3, r5
 8018458:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801845c:	441c      	add	r4, r3
 801845e:	e7e8      	b.n	8018432 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0xd6>
 8018460:	6830      	ldr	r0, [r6, #0]
 8018462:	6803      	ldr	r3, [r0, #0]
 8018464:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018466:	4798      	blx	r3
 8018468:	e7b5      	b.n	80183d6 <_ZN8touchgfx8LCD24bpp29copyAreaFromTFTToClientBufferERKNS_4RectE+0x7a>
 801846a:	bf00      	nop
 801846c:	240253a0 	.word	0x240253a0
 8018470:	240253a2 	.word	0x240253a2
 8018474:	240253a4 	.word	0x240253a4
 8018478:	240253a8 	.word	0x240253a8

0801847c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 801847c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018480:	b08f      	sub	sp, #60	@ 0x3c
 8018482:	461c      	mov	r4, r3
 8018484:	9203      	str	r2, [sp, #12]
 8018486:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 801848a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801848c:	6820      	ldr	r0, [r4, #0]
 801848e:	9100      	str	r1, [sp, #0]
 8018490:	9204      	str	r2, [sp, #16]
 8018492:	aa0a      	add	r2, sp, #40	@ 0x28
 8018494:	6861      	ldr	r1, [r4, #4]
 8018496:	c203      	stmia	r2!, {r0, r1}
 8018498:	6818      	ldr	r0, [r3, #0]
 801849a:	aa0c      	add	r2, sp, #48	@ 0x30
 801849c:	6859      	ldr	r1, [r3, #4]
 801849e:	c203      	stmia	r2!, {r0, r1}
 80184a0:	a80a      	add	r0, sp, #40	@ 0x28
 80184a2:	f7fa fe55 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80184a6:	4621      	mov	r1, r4
 80184a8:	a80c      	add	r0, sp, #48	@ 0x30
 80184aa:	f7fa fe79 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80184ae:	f9bd 602c 	ldrsh.w	r6, [sp, #44]	@ 0x2c
 80184b2:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 80184b6:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80184ba:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 80184be:	bfdb      	ittet	le
 80184c0:	b2b3      	uxthle	r3, r6
 80184c2:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 80184c6:	2301      	movgt	r3, #1
 80184c8:	fb92 f3f3 	sdivle	r3, r2, r3
 80184cc:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 80184d0:	441d      	add	r5, r3
 80184d2:	fb92 f1f3 	sdiv	r1, r2, r3
 80184d6:	fa1f fc81 	uxth.w	ip, r1
 80184da:	3d01      	subs	r5, #1
 80184dc:	fb0c 2413 	mls	r4, ip, r3, r2
 80184e0:	4661      	mov	r1, ip
 80184e2:	fb14 f406 	smulbb	r4, r4, r6
 80184e6:	4404      	add	r4, r0
 80184e8:	fb95 f5f3 	sdiv	r5, r5, r3
 80184ec:	b2a4      	uxth	r4, r4
 80184ee:	b131      	cbz	r1, 80184fe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x82>
 80184f0:	9b03      	ldr	r3, [sp, #12]
 80184f2:	9900      	ldr	r1, [sp, #0]
 80184f4:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 80184f8:	ba1b      	rev	r3, r3
 80184fa:	4419      	add	r1, r3
 80184fc:	9100      	str	r1, [sp, #0]
 80184fe:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018502:	b2ad      	uxth	r5, r5
 8018504:	f9bd 6036 	ldrsh.w	r6, [sp, #54]	@ 0x36
 8018508:	4418      	add	r0, r3
 801850a:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 801850e:	00ad      	lsls	r5, r5, #2
 8018510:	441a      	add	r2, r3
 8018512:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 8018516:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 801851a:	9301      	str	r3, [sp, #4]
 801851c:	4b79      	ldr	r3, [pc, #484]	@ (8018704 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 801851e:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018522:	6818      	ldr	r0, [r3, #0]
 8018524:	6803      	ldr	r3, [r0, #0]
 8018526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018528:	4798      	blx	r3
 801852a:	4a77      	ldr	r2, [pc, #476]	@ (8018708 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>)
 801852c:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8018530:	2c00      	cmp	r4, #0
 8018532:	8813      	ldrh	r3, [r2, #0]
 8018534:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 8018538:	9209      	str	r2, [sp, #36]	@ 0x24
 801853a:	fb03 c101 	mla	r1, r3, r1, ip
 801853e:	fb06 f303 	mul.w	r3, r6, r3
 8018542:	bf18      	it	ne
 8018544:	2600      	movne	r6, #0
 8018546:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801854a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801854e:	4408      	add	r0, r1
 8018550:	4403      	add	r3, r0
 8018552:	9306      	str	r3, [sp, #24]
 8018554:	f105 0304 	add.w	r3, r5, #4
 8018558:	9305      	str	r3, [sp, #20]
 801855a:	9b01      	ldr	r3, [sp, #4]
 801855c:	bf08      	it	eq
 801855e:	461e      	moveq	r6, r3
 8018560:	2300      	movs	r3, #0
 8018562:	b2b6      	uxth	r6, r6
 8018564:	9302      	str	r3, [sp, #8]
 8018566:	9a06      	ldr	r2, [sp, #24]
 8018568:	4290      	cmp	r0, r2
 801856a:	f080 80c2 	bcs.w	80186f2 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x276>
 801856e:	b963      	cbnz	r3, 801858a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 8018570:	9b00      	ldr	r3, [sp, #0]
 8018572:	781a      	ldrb	r2, [r3, #0]
 8018574:	0993      	lsrs	r3, r2, #6
 8018576:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 801857a:	9202      	str	r2, [sp, #8]
 801857c:	1e5a      	subs	r2, r3, #1
 801857e:	2a02      	cmp	r2, #2
 8018580:	d815      	bhi.n	80185ae <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x132>
 8018582:	9a00      	ldr	r2, [sp, #0]
 8018584:	b29b      	uxth	r3, r3
 8018586:	3201      	adds	r2, #1
 8018588:	9200      	str	r2, [sp, #0]
 801858a:	b1b4      	cbz	r4, 80185ba <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x13e>
 801858c:	429c      	cmp	r4, r3
 801858e:	bf91      	iteee	ls
 8018590:	1b1c      	subls	r4, r3, r4
 8018592:	1ae4      	subhi	r4, r4, r3
 8018594:	4635      	movhi	r5, r6
 8018596:	f04f 0e00 	movhi.w	lr, #0
 801859a:	bf9b      	ittet	ls
 801859c:	fa1f fe84 	uxthls.w	lr, r4
 80185a0:	f8bd 5004 	ldrhls.w	r5, [sp, #4]
 80185a4:	b2a4      	uxthhi	r4, r4
 80185a6:	2400      	movls	r4, #0
 80185a8:	4673      	mov	r3, lr
 80185aa:	462e      	mov	r6, r5
 80185ac:	e7db      	b.n	8018566 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xea>
 80185ae:	9a00      	ldr	r2, [sp, #0]
 80185b0:	9b00      	ldr	r3, [sp, #0]
 80185b2:	3202      	adds	r2, #2
 80185b4:	785b      	ldrb	r3, [r3, #1]
 80185b6:	9200      	str	r2, [sp, #0]
 80185b8:	e7e7      	b.n	801858a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10e>
 80185ba:	2204      	movs	r2, #4
 80185bc:	9905      	ldr	r1, [sp, #20]
 80185be:	429e      	cmp	r6, r3
 80185c0:	4615      	mov	r5, r2
 80185c2:	9a02      	ldr	r2, [sp, #8]
 80185c4:	bf94      	ite	ls
 80185c6:	eba3 0e06 	subls.w	lr, r3, r6
 80185ca:	46a6      	movhi	lr, r4
 80185cc:	fb15 1202 	smlabb	r2, r5, r2, r1
 80185d0:	9903      	ldr	r1, [sp, #12]
 80185d2:	bf8c      	ite	hi
 80185d4:	1af5      	subhi	r5, r6, r3
 80185d6:	fa1f fe8e 	uxthls.w	lr, lr
 80185da:	f851 c002 	ldr.w	ip, [r1, r2]
 80185de:	bf9a      	itte	ls
 80185e0:	4625      	movls	r5, r4
 80185e2:	4632      	movls	r2, r6
 80185e4:	b2ad      	uxthhi	r5, r5
 80185e6:	ea4f 611c 	mov.w	r1, ip, lsr #24
 80185ea:	bf88      	it	hi
 80185ec:	461a      	movhi	r2, r3
 80185ee:	b179      	cbz	r1, 8018610 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 80185f0:	29ff      	cmp	r1, #255	@ 0xff
 80185f2:	fa5f f98c 	uxtb.w	r9, ip
 80185f6:	f3cc 2807 	ubfx	r8, ip, #8, #8
 80185fa:	f3cc 4c07 	ubfx	ip, ip, #16, #8
 80185fe:	d126      	bne.n	801864e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8018600:	9f04      	ldr	r7, [sp, #16]
 8018602:	2fff      	cmp	r7, #255	@ 0xff
 8018604:	d123      	bne.n	801864e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d2>
 8018606:	4682      	mov	sl, r0
 8018608:	4611      	mov	r1, r2
 801860a:	f10a 0a03 	add.w	sl, sl, #3
 801860e:	b9a9      	cbnz	r1, 801863c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1c0>
 8018610:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018614:	429e      	cmp	r6, r3
 8018616:	4410      	add	r0, r2
 8018618:	d8c6      	bhi.n	80185a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801861a:	f8bd 5004 	ldrh.w	r5, [sp, #4]
 801861e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8018622:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018624:	1b64      	subs	r4, r4, r5
 8018626:	9a01      	ldr	r2, [sp, #4]
 8018628:	881b      	ldrh	r3, [r3, #0]
 801862a:	b2a4      	uxth	r4, r4
 801862c:	1a9b      	subs	r3, r3, r2
 801862e:	2c00      	cmp	r4, #0
 8018630:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018634:	bf18      	it	ne
 8018636:	2500      	movne	r5, #0
 8018638:	4418      	add	r0, r3
 801863a:	e7b5      	b.n	80185a8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12c>
 801863c:	3901      	subs	r1, #1
 801863e:	f80a 9c03 	strb.w	r9, [sl, #-3]
 8018642:	f80a 8c02 	strb.w	r8, [sl, #-2]
 8018646:	f80a cc01 	strb.w	ip, [sl, #-1]
 801864a:	b289      	uxth	r1, r1
 801864c:	e7dd      	b.n	801860a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x18e>
 801864e:	9f04      	ldr	r7, [sp, #16]
 8018650:	fb07 fa01 	mul.w	sl, r7, r1
 8018654:	f10a 0101 	add.w	r1, sl, #1
 8018658:	eb01 212a 	add.w	r1, r1, sl, asr #8
 801865c:	1209      	asrs	r1, r1, #8
 801865e:	ea6f 0a01 	mvn.w	sl, r1
 8018662:	b289      	uxth	r1, r1
 8018664:	fb19 f901 	smulbb	r9, r9, r1
 8018668:	fa5f fa8a 	uxtb.w	sl, sl
 801866c:	fb18 f801 	smulbb	r8, r8, r1
 8018670:	fb1c f101 	smulbb	r1, ip, r1
 8018674:	fa1f f789 	uxth.w	r7, r9
 8018678:	4684      	mov	ip, r0
 801867a:	4691      	mov	r9, r2
 801867c:	9707      	str	r7, [sp, #28]
 801867e:	b289      	uxth	r1, r1
 8018680:	fa1f f788 	uxth.w	r7, r8
 8018684:	9708      	str	r7, [sp, #32]
 8018686:	f10c 0c03 	add.w	ip, ip, #3
 801868a:	f1b9 0f00 	cmp.w	r9, #0
 801868e:	d0bf      	beq.n	8018610 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x194>
 8018690:	f81c 8c03 	ldrb.w	r8, [ip, #-3]
 8018694:	f109 39ff 	add.w	r9, r9, #4294967295
 8018698:	9f07      	ldr	r7, [sp, #28]
 801869a:	fa1f f989 	uxth.w	r9, r9
 801869e:	fb08 780a 	mla	r8, r8, sl, r7
 80186a2:	9f08      	ldr	r7, [sp, #32]
 80186a4:	fa1f f888 	uxth.w	r8, r8
 80186a8:	f108 0b01 	add.w	fp, r8, #1
 80186ac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80186b0:	ea4f 2828 	mov.w	r8, r8, asr #8
 80186b4:	f80c 8c03 	strb.w	r8, [ip, #-3]
 80186b8:	f81c 8c02 	ldrb.w	r8, [ip, #-2]
 80186bc:	fb08 780a 	mla	r8, r8, sl, r7
 80186c0:	fa1f f888 	uxth.w	r8, r8
 80186c4:	f108 0b01 	add.w	fp, r8, #1
 80186c8:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80186cc:	ea4f 2828 	mov.w	r8, r8, asr #8
 80186d0:	f80c 8c02 	strb.w	r8, [ip, #-2]
 80186d4:	f81c 8c01 	ldrb.w	r8, [ip, #-1]
 80186d8:	fb08 180a 	mla	r8, r8, sl, r1
 80186dc:	fa1f f888 	uxth.w	r8, r8
 80186e0:	f108 0b01 	add.w	fp, r8, #1
 80186e4:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 80186e8:	ea4f 2828 	mov.w	r8, r8, asr #8
 80186ec:	f80c 8c01 	strb.w	r8, [ip, #-1]
 80186f0:	e7c9      	b.n	8018686 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x20a>
 80186f2:	4b04      	ldr	r3, [pc, #16]	@ (8018704 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE16blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x288>)
 80186f4:	6818      	ldr	r0, [r3, #0]
 80186f6:	6803      	ldr	r3, [r0, #0]
 80186f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186fa:	4798      	blx	r3
 80186fc:	b00f      	add	sp, #60	@ 0x3c
 80186fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018702:	bf00      	nop
 8018704:	240253a8 	.word	0x240253a8
 8018708:	240253a2 	.word	0x240253a2

0801870c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_t>:
 801870c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018710:	b089      	sub	sp, #36	@ 0x24
 8018712:	4607      	mov	r7, r0
 8018714:	4689      	mov	r9, r1
 8018716:	4692      	mov	sl, r2
 8018718:	ac08      	add	r4, sp, #32
 801871a:	461e      	mov	r6, r3
 801871c:	f824 3d0c 	strh.w	r3, [r4, #-12]!
 8018720:	4620      	mov	r0, r4
 8018722:	f7fd ff77 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 8018726:	683b      	ldr	r3, [r7, #0]
 8018728:	4605      	mov	r5, r0
 801872a:	4620      	mov	r0, r4
 801872c:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8018730:	f7fd ff08 	bl	8016544 <_ZNK8touchgfx6Bitmap8getWidthEv>
 8018734:	4683      	mov	fp, r0
 8018736:	4620      	mov	r0, r4
 8018738:	f7fd ff38 	bl	80165ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801873c:	4653      	mov	r3, sl
 801873e:	464a      	mov	r2, r9
 8018740:	4639      	mov	r1, r7
 8018742:	9500      	str	r5, [sp, #0]
 8018744:	e9cd b001 	strd	fp, r0, [sp, #4]
 8018748:	a806      	add	r0, sp, #24
 801874a:	47c0      	blx	r8
 801874c:	a906      	add	r1, sp, #24
 801874e:	4630      	mov	r0, r6
 8018750:	f7fd fddc 	bl	801630c <_ZN8touchgfx6Bitmap25dynamicBitmapAddSolidRectEtRKNS_4RectE>
 8018754:	4628      	mov	r0, r5
 8018756:	b009      	add	sp, #36	@ 0x24
 8018758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801875c <_ZN8touchgfx8LCD24bppD0Ev>:
 801875c:	b510      	push	{r4, lr}
 801875e:	4604      	mov	r4, r0
 8018760:	216c      	movs	r1, #108	@ 0x6c
 8018762:	f008 fc60 	bl	8021026 <_ZdlPvj>
 8018766:	4620      	mov	r0, r4
 8018768:	bd10      	pop	{r4, pc}

0801876a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L4D0Ev>:
 801876a:	b510      	push	{r4, lr}
 801876c:	4604      	mov	r4, r0
 801876e:	2104      	movs	r1, #4
 8018770:	f008 fc59 	bl	8021026 <_ZdlPvj>
 8018774:	4620      	mov	r0, r4
 8018776:	bd10      	pop	{r4, pc}

08018778 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLED0Ev>:
 8018778:	b510      	push	{r4, lr}
 801877a:	4604      	mov	r4, r0
 801877c:	2104      	movs	r1, #4
 801877e:	f008 fc52 	bl	8021026 <_ZdlPvj>
 8018782:	4620      	mov	r0, r4
 8018784:	bd10      	pop	{r4, pc}

08018786 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW9D0Ev>:
 8018786:	b510      	push	{r4, lr}
 8018788:	4604      	mov	r4, r0
 801878a:	f640 0144 	movw	r1, #2116	@ 0x844
 801878e:	f008 fc4a 	bl	8021026 <_ZdlPvj>
 8018792:	4620      	mov	r0, r4
 8018794:	bd10      	pop	{r4, pc}

08018796 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOID0Ev>:
 8018796:	b510      	push	{r4, lr}
 8018798:	4604      	mov	r4, r0
 801879a:	f44f 7182 	mov.w	r1, #260	@ 0x104
 801879e:	f008 fc42 	bl	8021026 <_ZdlPvj>
 80187a2:	4620      	mov	r0, r4
 80187a4:	bd10      	pop	{r4, pc}

080187a6 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 80187a6:	b510      	push	{r4, lr}
 80187a8:	4604      	mov	r4, r0
 80187aa:	2104      	movs	r1, #4
 80187ac:	f008 fc3b 	bl	8021026 <_ZdlPvj>
 80187b0:	4620      	mov	r0, r4
 80187b2:	bd10      	pop	{r4, pc}

080187b4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 80187b4:	b510      	push	{r4, lr}
 80187b6:	4604      	mov	r4, r0
 80187b8:	2104      	movs	r1, #4
 80187ba:	f008 fc34 	bl	8021026 <_ZdlPvj>
 80187be:	4620      	mov	r0, r4
 80187c0:	bd10      	pop	{r4, pc}

080187c2 <_ZN8touchgfx8LCD24bpp51TextureMapper_L8_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 80187c2:	b510      	push	{r4, lr}
 80187c4:	4604      	mov	r4, r0
 80187c6:	2104      	movs	r1, #4
 80187c8:	f008 fc2d 	bl	8021026 <_ZdlPvj>
 80187cc:	4620      	mov	r0, r4
 80187ce:	bd10      	pop	{r4, pc}

080187d0 <_ZN8touchgfx8LCD24bpp49TextureMapper_L8_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 80187d0:	b510      	push	{r4, lr}
 80187d2:	4604      	mov	r4, r0
 80187d4:	2104      	movs	r1, #4
 80187d6:	f008 fc26 	bl	8021026 <_ZdlPvj>
 80187da:	4620      	mov	r0, r4
 80187dc:	bd10      	pop	{r4, pc}

080187de <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 80187de:	b510      	push	{r4, lr}
 80187e0:	4604      	mov	r4, r0
 80187e2:	2104      	movs	r1, #4
 80187e4:	f008 fc1f 	bl	8021026 <_ZdlPvj>
 80187e8:	4620      	mov	r0, r4
 80187ea:	bd10      	pop	{r4, pc}

080187ec <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 80187ec:	b510      	push	{r4, lr}
 80187ee:	4604      	mov	r4, r0
 80187f0:	2104      	movs	r1, #4
 80187f2:	f008 fc18 	bl	8021026 <_ZdlPvj>
 80187f6:	4620      	mov	r0, r4
 80187f8:	bd10      	pop	{r4, pc}

080187fa <_ZN8touchgfx8LCD24bpp56TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 80187fa:	b510      	push	{r4, lr}
 80187fc:	4604      	mov	r4, r0
 80187fe:	2104      	movs	r1, #4
 8018800:	f008 fc11 	bl	8021026 <_ZdlPvj>
 8018804:	4620      	mov	r0, r4
 8018806:	bd10      	pop	{r4, pc}

08018808 <_ZN8touchgfx8LCD24bpp54TextureMapper_L8_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018808:	b510      	push	{r4, lr}
 801880a:	4604      	mov	r4, r0
 801880c:	2104      	movs	r1, #4
 801880e:	f008 fc0a 	bl	8021026 <_ZdlPvj>
 8018812:	4620      	mov	r0, r4
 8018814:	bd10      	pop	{r4, pc}

08018816 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGAD0Ev>:
 8018816:	b510      	push	{r4, lr}
 8018818:	4604      	mov	r4, r0
 801881a:	2104      	movs	r1, #4
 801881c:	f008 fc03 	bl	8021026 <_ZdlPvj>
 8018820:	4620      	mov	r0, r4
 8018822:	bd10      	pop	{r4, pc}

08018824 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GAD0Ev>:
 8018824:	b510      	push	{r4, lr}
 8018826:	4604      	mov	r4, r0
 8018828:	2104      	movs	r1, #4
 801882a:	f008 fbfc 	bl	8021026 <_ZdlPvj>
 801882e:	4620      	mov	r0, r4
 8018830:	bd10      	pop	{r4, pc}

08018832 <_ZN8touchgfx8LCD24bpp48TextureMapper_RGB888_Opaque_NearestNeighbor_NoGAD0Ev>:
 8018832:	b510      	push	{r4, lr}
 8018834:	4604      	mov	r4, r0
 8018836:	2104      	movs	r1, #4
 8018838:	f008 fbf5 	bl	8021026 <_ZdlPvj>
 801883c:	4620      	mov	r0, r4
 801883e:	bd10      	pop	{r4, pc}

08018840 <_ZN8touchgfx8LCD24bpp46TextureMapper_RGB888_Opaque_NearestNeighbor_GAD0Ev>:
 8018840:	b510      	push	{r4, lr}
 8018842:	4604      	mov	r4, r0
 8018844:	2104      	movs	r1, #4
 8018846:	f008 fbee 	bl	8021026 <_ZdlPvj>
 801884a:	4620      	mov	r0, r4
 801884c:	bd10      	pop	{r4, pc}

0801884e <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGAD0Ev>:
 801884e:	b510      	push	{r4, lr}
 8018850:	4604      	mov	r4, r0
 8018852:	2104      	movs	r1, #4
 8018854:	f008 fbe7 	bl	8021026 <_ZdlPvj>
 8018858:	4620      	mov	r0, r4
 801885a:	bd10      	pop	{r4, pc}

0801885c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GAD0Ev>:
 801885c:	b510      	push	{r4, lr}
 801885e:	4604      	mov	r4, r0
 8018860:	2104      	movs	r1, #4
 8018862:	f008 fbe0 	bl	8021026 <_ZdlPvj>
 8018866:	4620      	mov	r0, r4
 8018868:	bd10      	pop	{r4, pc}

0801886a <_ZN8touchgfx8LCD24bpp53TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_NoGAD0Ev>:
 801886a:	b510      	push	{r4, lr}
 801886c:	4604      	mov	r4, r0
 801886e:	2104      	movs	r1, #4
 8018870:	f008 fbd9 	bl	8021026 <_ZdlPvj>
 8018874:	4620      	mov	r0, r4
 8018876:	bd10      	pop	{r4, pc}

08018878 <_ZN8touchgfx8LCD24bpp51TextureMapper_ARGB8888_NonOpaque_NearestNeighbor_GAD0Ev>:
 8018878:	b510      	push	{r4, lr}
 801887a:	4604      	mov	r4, r0
 801887c:	2104      	movs	r1, #4
 801887e:	f008 fbd2 	bl	8021026 <_ZdlPvj>
 8018882:	4620      	mov	r0, r4
 8018884:	bd10      	pop	{r4, pc}

08018886 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGAD0Ev>:
 8018886:	b510      	push	{r4, lr}
 8018888:	4604      	mov	r4, r0
 801888a:	2104      	movs	r1, #4
 801888c:	f008 fbcb 	bl	8021026 <_ZdlPvj>
 8018890:	4620      	mov	r0, r4
 8018892:	bd10      	pop	{r4, pc}

08018894 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GAD0Ev>:
 8018894:	b510      	push	{r4, lr}
 8018896:	4604      	mov	r4, r0
 8018898:	2104      	movs	r1, #4
 801889a:	f008 fbc4 	bl	8021026 <_ZdlPvj>
 801889e:	4620      	mov	r0, r4
 80188a0:	bd10      	pop	{r4, pc}

080188a2 <_ZN8touchgfx8LCD24bpp37TextureMapper_A4_NearestNeighbor_NoGAD0Ev>:
 80188a2:	b510      	push	{r4, lr}
 80188a4:	4604      	mov	r4, r0
 80188a6:	2104      	movs	r1, #4
 80188a8:	f008 fbbd 	bl	8021026 <_ZdlPvj>
 80188ac:	4620      	mov	r0, r4
 80188ae:	bd10      	pop	{r4, pc}

080188b0 <_ZN8touchgfx8LCD24bpp35TextureMapper_A4_NearestNeighbor_GAD0Ev>:
 80188b0:	b510      	push	{r4, lr}
 80188b2:	4604      	mov	r4, r0
 80188b4:	2104      	movs	r1, #4
 80188b6:	f008 fbb6 	bl	8021026 <_ZdlPvj>
 80188ba:	4620      	mov	r0, r4
 80188bc:	bd10      	pop	{r4, pc}
	...

080188c0 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 80188c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80188c4:	b08f      	sub	sp, #60	@ 0x3c
 80188c6:	461c      	mov	r4, r3
 80188c8:	460e      	mov	r6, r1
 80188ca:	9206      	str	r2, [sp, #24]
 80188cc:	f89d 2064 	ldrb.w	r2, [sp, #100]	@ 0x64
 80188d0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80188d2:	9202      	str	r2, [sp, #8]
 80188d4:	2a00      	cmp	r2, #0
 80188d6:	f000 8128 	beq.w	8018b2a <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x26a>
 80188da:	6820      	ldr	r0, [r4, #0]
 80188dc:	aa0a      	add	r2, sp, #40	@ 0x28
 80188de:	6861      	ldr	r1, [r4, #4]
 80188e0:	c203      	stmia	r2!, {r0, r1}
 80188e2:	6818      	ldr	r0, [r3, #0]
 80188e4:	aa0c      	add	r2, sp, #48	@ 0x30
 80188e6:	6859      	ldr	r1, [r3, #4]
 80188e8:	c203      	stmia	r2!, {r0, r1}
 80188ea:	a80a      	add	r0, sp, #40	@ 0x28
 80188ec:	f7fa fc30 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80188f0:	4621      	mov	r1, r4
 80188f2:	a80c      	add	r0, sp, #48	@ 0x30
 80188f4:	f7fa fc54 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80188f8:	f9bd 702c 	ldrsh.w	r7, [sp, #44]	@ 0x2c
 80188fc:	f9bd 502e 	ldrsh.w	r5, [sp, #46]	@ 0x2e
 8018900:	f5b7 6f80 	cmp.w	r7, #1024	@ 0x400
 8018904:	f8bd 0030 	ldrh.w	r0, [sp, #48]	@ 0x30
 8018908:	bfdb      	ittet	le
 801890a:	b2bb      	uxthle	r3, r7
 801890c:	f44f 6280 	movle.w	r2, #1024	@ 0x400
 8018910:	2301      	movgt	r3, #1
 8018912:	fb92 f3f3 	sdivle	r3, r2, r3
 8018916:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 801891a:	441d      	add	r5, r3
 801891c:	fb92 f1f3 	sdiv	r1, r2, r3
 8018920:	fa1f fc81 	uxth.w	ip, r1
 8018924:	3d01      	subs	r5, #1
 8018926:	fb0c 2413 	mls	r4, ip, r3, r2
 801892a:	4661      	mov	r1, ip
 801892c:	fb14 f407 	smulbb	r4, r4, r7
 8018930:	4404      	add	r4, r0
 8018932:	fb95 f5f3 	sdiv	r5, r5, r3
 8018936:	b2a4      	uxth	r4, r4
 8018938:	b121      	cbz	r1, 8018944 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x84>
 801893a:	9b06      	ldr	r3, [sp, #24]
 801893c:	f853 302c 	ldr.w	r3, [r3, ip, lsl #2]
 8018940:	ba1b      	rev	r3, r3
 8018942:	441e      	add	r6, r3
 8018944:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8018948:	b2ad      	uxth	r5, r5
 801894a:	f9bd 8034 	ldrsh.w	r8, [sp, #52]	@ 0x34
 801894e:	4418      	add	r0, r3
 8018950:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8018954:	f9bd 7036 	ldrsh.w	r7, [sp, #54]	@ 0x36
 8018958:	00ad      	lsls	r5, r5, #2
 801895a:	441a      	add	r2, r3
 801895c:	4b74      	ldr	r3, [pc, #464]	@ (8018b30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 801895e:	f8ad 0030 	strh.w	r0, [sp, #48]	@ 0x30
 8018962:	6818      	ldr	r0, [r3, #0]
 8018964:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8018968:	6803      	ldr	r3, [r0, #0]
 801896a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801896c:	4798      	blx	r3
 801896e:	4a71      	ldr	r2, [pc, #452]	@ (8018b34 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x274>)
 8018970:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 8018974:	2c00      	cmp	r4, #0
 8018976:	8813      	ldrh	r3, [r2, #0]
 8018978:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801897c:	9209      	str	r2, [sp, #36]	@ 0x24
 801897e:	fb03 c101 	mla	r1, r3, r1, ip
 8018982:	f8bd 2008 	ldrh.w	r2, [sp, #8]
 8018986:	fb03 f307 	mul.w	r3, r3, r7
 801898a:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801898e:	9204      	str	r2, [sp, #16]
 8018990:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018994:	9a02      	ldr	r2, [sp, #8]
 8018996:	4408      	add	r0, r1
 8018998:	f1c2 02ff 	rsb	r2, r2, #255	@ 0xff
 801899c:	4403      	add	r3, r0
 801899e:	b292      	uxth	r2, r2
 80189a0:	9307      	str	r3, [sp, #28]
 80189a2:	f105 0304 	add.w	r3, r5, #4
 80189a6:	bf0c      	ite	eq
 80189a8:	4645      	moveq	r5, r8
 80189aa:	2500      	movne	r5, #0
 80189ac:	9308      	str	r3, [sp, #32]
 80189ae:	2300      	movs	r3, #0
 80189b0:	b2ad      	uxth	r5, r5
 80189b2:	9205      	str	r2, [sp, #20]
 80189b4:	9303      	str	r3, [sp, #12]
 80189b6:	9a07      	ldr	r2, [sp, #28]
 80189b8:	4282      	cmp	r2, r0
 80189ba:	f240 80b1 	bls.w	8018b20 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x260>
 80189be:	b95b      	cbnz	r3, 80189d8 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x118>
 80189c0:	7832      	ldrb	r2, [r6, #0]
 80189c2:	0993      	lsrs	r3, r2, #6
 80189c4:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80189c8:	9203      	str	r2, [sp, #12]
 80189ca:	1e5a      	subs	r2, r3, #1
 80189cc:	2a02      	cmp	r2, #2
 80189ce:	bf8d      	iteet	hi
 80189d0:	7873      	ldrbhi	r3, [r6, #1]
 80189d2:	3601      	addls	r6, #1
 80189d4:	b29b      	uxthls	r3, r3
 80189d6:	3602      	addhi	r6, #2
 80189d8:	b184      	cbz	r4, 80189fc <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x13c>
 80189da:	429c      	cmp	r4, r3
 80189dc:	bf91      	iteee	ls
 80189de:	1b1c      	subls	r4, r3, r4
 80189e0:	1ae4      	subhi	r4, r4, r3
 80189e2:	4629      	movhi	r1, r5
 80189e4:	f04f 0e00 	movhi.w	lr, #0
 80189e8:	bf9b      	ittet	ls
 80189ea:	fa1f fe84 	uxthls.w	lr, r4
 80189ee:	2400      	movls	r4, #0
 80189f0:	b2a4      	uxthhi	r4, r4
 80189f2:	fa1f f188 	uxthls.w	r1, r8
 80189f6:	4673      	mov	r3, lr
 80189f8:	460d      	mov	r5, r1
 80189fa:	e7dc      	b.n	80189b6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xf6>
 80189fc:	2203      	movs	r2, #3
 80189fe:	9908      	ldr	r1, [sp, #32]
 8018a00:	42ab      	cmp	r3, r5
 8018a02:	4617      	mov	r7, r2
 8018a04:	9a03      	ldr	r2, [sp, #12]
 8018a06:	bf24      	itt	cs
 8018a08:	eba3 0e05 	subcs.w	lr, r3, r5
 8018a0c:	9501      	strcs	r5, [sp, #4]
 8018a0e:	fb17 1702 	smlabb	r7, r7, r2, r1
 8018a12:	9a06      	ldr	r2, [sp, #24]
 8018a14:	bf34      	ite	cc
 8018a16:	1ae9      	subcc	r1, r5, r3
 8018a18:	fa1f fe8e 	uxthcs.w	lr, lr
 8018a1c:	4417      	add	r7, r2
 8018a1e:	9a02      	ldr	r2, [sp, #8]
 8018a20:	bf2f      	iteee	cs
 8018a22:	4621      	movcs	r1, r4
 8018a24:	b289      	uxthcc	r1, r1
 8018a26:	9301      	strcc	r3, [sp, #4]
 8018a28:	46a6      	movcc	lr, r4
 8018a2a:	2aff      	cmp	r2, #255	@ 0xff
 8018a2c:	d11e      	bne.n	8018a6c <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ac>
 8018a2e:	4681      	mov	r9, r0
 8018a30:	f8dd c004 	ldr.w	ip, [sp, #4]
 8018a34:	f109 0903 	add.w	r9, r9, #3
 8018a38:	f1bc 0f00 	cmp.w	ip, #0
 8018a3c:	d15f      	bne.n	8018afe <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x23e>
 8018a3e:	9a01      	ldr	r2, [sp, #4]
 8018a40:	42ab      	cmp	r3, r5
 8018a42:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018a46:	4410      	add	r0, r2
 8018a48:	d3d5      	bcc.n	80189f6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018a4a:	fa1f f188 	uxth.w	r1, r8
 8018a4e:	f8bd 402c 	ldrh.w	r4, [sp, #44]	@ 0x2c
 8018a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018a54:	1a64      	subs	r4, r4, r1
 8018a56:	881b      	ldrh	r3, [r3, #0]
 8018a58:	b2a4      	uxth	r4, r4
 8018a5a:	eba3 0308 	sub.w	r3, r3, r8
 8018a5e:	2c00      	cmp	r4, #0
 8018a60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8018a64:	bf18      	it	ne
 8018a66:	2100      	movne	r1, #0
 8018a68:	4418      	add	r0, r3
 8018a6a:	e7c4      	b.n	80189f6 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x136>
 8018a6c:	4684      	mov	ip, r0
 8018a6e:	f8dd a004 	ldr.w	sl, [sp, #4]
 8018a72:	f10c 0c03 	add.w	ip, ip, #3
 8018a76:	f1ba 0f00 	cmp.w	sl, #0
 8018a7a:	d0e0      	beq.n	8018a3e <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17e>
 8018a7c:	f81c bc03 	ldrb.w	fp, [ip, #-3]
 8018a80:	f10a 3aff 	add.w	sl, sl, #4294967295
 8018a84:	9a05      	ldr	r2, [sp, #20]
 8018a86:	f897 9000 	ldrb.w	r9, [r7]
 8018a8a:	fa1f fa8a 	uxth.w	sl, sl
 8018a8e:	fb1b fb02 	smulbb	fp, fp, r2
 8018a92:	9a04      	ldr	r2, [sp, #16]
 8018a94:	fb09 b902 	mla	r9, r9, r2, fp
 8018a98:	9a05      	ldr	r2, [sp, #20]
 8018a9a:	fa1f f989 	uxth.w	r9, r9
 8018a9e:	f109 0b01 	add.w	fp, r9, #1
 8018aa2:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018aa6:	f81c bc02 	ldrb.w	fp, [ip, #-2]
 8018aaa:	fb1b fb02 	smulbb	fp, fp, r2
 8018aae:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ab2:	9a04      	ldr	r2, [sp, #16]
 8018ab4:	f80c 9c03 	strb.w	r9, [ip, #-3]
 8018ab8:	f897 9001 	ldrb.w	r9, [r7, #1]
 8018abc:	fb09 b902 	mla	r9, r9, r2, fp
 8018ac0:	9a05      	ldr	r2, [sp, #20]
 8018ac2:	fa1f f989 	uxth.w	r9, r9
 8018ac6:	f109 0b01 	add.w	fp, r9, #1
 8018aca:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018ace:	f81c bc01 	ldrb.w	fp, [ip, #-1]
 8018ad2:	fb1b fb02 	smulbb	fp, fp, r2
 8018ad6:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018ada:	9a04      	ldr	r2, [sp, #16]
 8018adc:	f80c 9c02 	strb.w	r9, [ip, #-2]
 8018ae0:	f897 9002 	ldrb.w	r9, [r7, #2]
 8018ae4:	fb09 b902 	mla	r9, r9, r2, fp
 8018ae8:	fa1f f989 	uxth.w	r9, r9
 8018aec:	f109 0b01 	add.w	fp, r9, #1
 8018af0:	eb0b 2919 	add.w	r9, fp, r9, lsr #8
 8018af4:	ea4f 2929 	mov.w	r9, r9, asr #8
 8018af8:	f80c 9c01 	strb.w	r9, [ip, #-1]
 8018afc:	e7b9      	b.n	8018a72 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1b2>
 8018afe:	f897 a000 	ldrb.w	sl, [r7]
 8018b02:	f10c 3cff 	add.w	ip, ip, #4294967295
 8018b06:	f809 ac03 	strb.w	sl, [r9, #-3]
 8018b0a:	fa1f fc8c 	uxth.w	ip, ip
 8018b0e:	f897 a001 	ldrb.w	sl, [r7, #1]
 8018b12:	f809 ac02 	strb.w	sl, [r9, #-2]
 8018b16:	f897 a002 	ldrb.w	sl, [r7, #2]
 8018b1a:	f809 ac01 	strb.w	sl, [r9, #-1]
 8018b1e:	e789      	b.n	8018a34 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x174>
 8018b20:	4b03      	ldr	r3, [pc, #12]	@ (8018b30 <_ZN8touchgfx8LCD24bpp18DecompressorL8_RLE14blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x270>)
 8018b22:	6818      	ldr	r0, [r3, #0]
 8018b24:	6803      	ldr	r3, [r0, #0]
 8018b26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018b28:	4798      	blx	r3
 8018b2a:	b00f      	add	sp, #60	@ 0x3c
 8018b2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018b30:	240253a8 	.word	0x240253a8
 8018b34:	240253a2 	.word	0x240253a2

08018b38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 8018b38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018b3c:	b09b      	sub	sp, #108	@ 0x6c
 8018b3e:	461d      	mov	r5, r3
 8018b40:	4604      	mov	r4, r0
 8018b42:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8018b44:	e9cd 1210 	strd	r1, r2, [sp, #64]	@ 0x40
 8018b48:	f89d 2094 	ldrb.w	r2, [sp, #148]	@ 0x94
 8018b4c:	9208      	str	r2, [sp, #32]
 8018b4e:	2a00      	cmp	r2, #0
 8018b50:	f000 81f3 	beq.w	8018f3a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x402>
 8018b54:	6828      	ldr	r0, [r5, #0]
 8018b56:	aa16      	add	r2, sp, #88	@ 0x58
 8018b58:	6869      	ldr	r1, [r5, #4]
 8018b5a:	c203      	stmia	r2!, {r0, r1}
 8018b5c:	6818      	ldr	r0, [r3, #0]
 8018b5e:	aa18      	add	r2, sp, #96	@ 0x60
 8018b60:	6859      	ldr	r1, [r3, #4]
 8018b62:	c203      	stmia	r2!, {r0, r1}
 8018b64:	a816      	add	r0, sp, #88	@ 0x58
 8018b66:	f7fa faf3 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018b6a:	4629      	mov	r1, r5
 8018b6c:	a818      	add	r0, sp, #96	@ 0x60
 8018b6e:	f7fa fb17 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018b72:	f9bd 305c 	ldrsh.w	r3, [sp, #92]	@ 0x5c
 8018b76:	f9bd 605e 	ldrsh.w	r6, [sp, #94]	@ 0x5e
 8018b7a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018b7e:	f9bd 5066 	ldrsh.w	r5, [sp, #102]	@ 0x66
 8018b82:	bfdb      	ittet	le
 8018b84:	b29a      	uxthle	r2, r3
 8018b86:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018b8a:	f04f 0a01 	movgt.w	sl, #1
 8018b8e:	fb91 faf2 	sdivle	sl, r1, r2
 8018b92:	f9bd 2062 	ldrsh.w	r2, [sp, #98]	@ 0x62
 8018b96:	4456      	add	r6, sl
 8018b98:	f8bd 1060 	ldrh.w	r1, [sp, #96]	@ 0x60
 8018b9c:	3e01      	subs	r6, #1
 8018b9e:	fb92 f0fa 	sdiv	r0, r2, sl
 8018ba2:	b280      	uxth	r0, r0
 8018ba4:	fb00 281a 	mls	r8, r0, sl, r2
 8018ba8:	900e      	str	r0, [sp, #56]	@ 0x38
 8018baa:	fb18 f803 	smulbb	r8, r8, r3
 8018bae:	f8bd 3058 	ldrh.w	r3, [sp, #88]	@ 0x58
 8018bb2:	4488      	add	r8, r1
 8018bb4:	4419      	add	r1, r3
 8018bb6:	f8bd 305a 	ldrh.w	r3, [sp, #90]	@ 0x5a
 8018bba:	f8ad 1060 	strh.w	r1, [sp, #96]	@ 0x60
 8018bbe:	fa1f f888 	uxth.w	r8, r8
 8018bc2:	441a      	add	r2, r3
 8018bc4:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8018bc8:	9303      	str	r3, [sp, #12]
 8018bca:	4b9c      	ldr	r3, [pc, #624]	@ (8018e3c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x304>)
 8018bcc:	f8ad 2062 	strh.w	r2, [sp, #98]	@ 0x62
 8018bd0:	6818      	ldr	r0, [r3, #0]
 8018bd2:	6803      	ldr	r3, [r0, #0]
 8018bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018bd6:	4798      	blx	r3
 8018bd8:	4b99      	ldr	r3, [pc, #612]	@ (8018e40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x308>)
 8018bda:	f9bd 1062 	ldrsh.w	r1, [sp, #98]	@ 0x62
 8018bde:	f1b8 0f00 	cmp.w	r8, #0
 8018be2:	881a      	ldrh	r2, [r3, #0]
 8018be4:	f9bd 7060 	ldrsh.w	r7, [sp, #96]	@ 0x60
 8018be8:	fb02 f505 	mul.w	r5, r2, r5
 8018bec:	fb02 7101 	mla	r1, r2, r1, r7
 8018bf0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8018bf4:	9314      	str	r3, [sp, #80]	@ 0x50
 8018bf6:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8018bfa:	9b08      	ldr	r3, [sp, #32]
 8018bfc:	fb96 f6fa 	sdiv	r6, r6, sl
 8018c00:	4408      	add	r0, r1
 8018c02:	f106 0601 	add.w	r6, r6, #1
 8018c06:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 8018c0a:	f04f 0100 	mov.w	r1, #0
 8018c0e:	eb00 0205 	add.w	r2, r0, r5
 8018c12:	b2b6      	uxth	r6, r6
 8018c14:	b29b      	uxth	r3, r3
 8018c16:	910b      	str	r1, [sp, #44]	@ 0x2c
 8018c18:	9209      	str	r2, [sp, #36]	@ 0x24
 8018c1a:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8018c1c:	930d      	str	r3, [sp, #52]	@ 0x34
 8018c1e:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 8018c22:	4b88      	ldr	r3, [pc, #544]	@ (8018e44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x30c>)
 8018c24:	f106 0204 	add.w	r2, r6, #4
 8018c28:	eba3 0304 	sub.w	r3, r3, r4
 8018c2c:	9205      	str	r2, [sp, #20]
 8018c2e:	9a03      	ldr	r2, [sp, #12]
 8018c30:	bf18      	it	ne
 8018c32:	2200      	movne	r2, #0
 8018c34:	9315      	str	r3, [sp, #84]	@ 0x54
 8018c36:	b292      	uxth	r2, r2
 8018c38:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8018c3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018c3c:	fa11 f383 	uxtah	r3, r1, r3
 8018c40:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018c42:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8018c46:	3304      	adds	r3, #4
 8018c48:	9306      	str	r3, [sp, #24]
 8018c4a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018c4c:	4283      	cmp	r3, r0
 8018c4e:	f240 816f 	bls.w	8018f30 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3f8>
 8018c52:	f8bd 305c 	ldrh.w	r3, [sp, #92]	@ 0x5c
 8018c56:	f04f 0900 	mov.w	r9, #0
 8018c5a:	9d06      	ldr	r5, [sp, #24]
 8018c5c:	fbb8 f3f3 	udiv	r3, r8, r3
 8018c60:	ebaa 0303 	sub.w	r3, sl, r3
 8018c64:	782d      	ldrb	r5, [r5, #0]
 8018c66:	b29b      	uxth	r3, r3
 8018c68:	950f      	str	r5, [sp, #60]	@ 0x3c
 8018c6a:	3501      	adds	r5, #1
 8018c6c:	9312      	str	r3, [sp, #72]	@ 0x48
 8018c6e:	9b06      	ldr	r3, [sp, #24]
 8018c70:	9504      	str	r5, [sp, #16]
 8018c72:	7859      	ldrb	r1, [r3, #1]
 8018c74:	789b      	ldrb	r3, [r3, #2]
 8018c76:	021b      	lsls	r3, r3, #8
 8018c78:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8018c7c:	9906      	ldr	r1, [sp, #24]
 8018c7e:	78c9      	ldrb	r1, [r1, #3]
 8018c80:	430b      	orrs	r3, r1
 8018c82:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8018c84:	4419      	add	r1, r3
 8018c86:	1c4d      	adds	r5, r1, #1
 8018c88:	7849      	ldrb	r1, [r1, #1]
 8018c8a:	9502      	str	r5, [sp, #8]
 8018c8c:	0209      	lsls	r1, r1, #8
 8018c8e:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018c90:	f401 71ff 	and.w	r1, r1, #510	@ 0x1fe
 8018c94:	5ceb      	ldrb	r3, [r5, r3]
 8018c96:	4319      	orrs	r1, r3
 8018c98:	b28b      	uxth	r3, r1
 8018c9a:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8018c9e:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ca0:	2300      	movs	r3, #0
 8018ca2:	9307      	str	r3, [sp, #28]
 8018ca4:	2301      	movs	r3, #1
 8018ca6:	e9cd 3300 	strd	r3, r3, [sp]
 8018caa:	469c      	mov	ip, r3
 8018cac:	f8bd 3020 	ldrh.w	r3, [sp, #32]
 8018cb0:	930c      	str	r3, [sp, #48]	@ 0x30
 8018cb2:	f1b8 0f00 	cmp.w	r8, #0
 8018cb6:	f000 8082 	beq.w	8018dbe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x286>
 8018cba:	45c4      	cmp	ip, r8
 8018cbc:	d270      	bcs.n	8018da0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x268>
 8018cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8018cc0:	eba8 080c 	sub.w	r8, r8, ip
 8018cc4:	4611      	mov	r1, r2
 8018cc6:	4283      	cmp	r3, r0
 8018cc8:	fa1f f888 	uxth.w	r8, r8
 8018ccc:	d802      	bhi.n	8018cd4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x19c>
 8018cce:	e074      	b.n	8018dba <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x282>
 8018cd0:	2b00      	cmp	r3, #0
 8018cd2:	d15f      	bne.n	8018d94 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25c>
 8018cd4:	9b02      	ldr	r3, [sp, #8]
 8018cd6:	9a01      	ldr	r2, [sp, #4]
 8018cd8:	785b      	ldrb	r3, [r3, #1]
 8018cda:	f1c2 0207 	rsb	r2, r2, #7
 8018cde:	9d01      	ldr	r5, [sp, #4]
 8018ce0:	4093      	lsls	r3, r2
 8018ce2:	005b      	lsls	r3, r3, #1
 8018ce4:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 8018ce8:	9b02      	ldr	r3, [sp, #8]
 8018cea:	781b      	ldrb	r3, [r3, #0]
 8018cec:	412b      	asrs	r3, r5
 8018cee:	b2db      	uxtb	r3, r3
 8018cf0:	4313      	orrs	r3, r2
 8018cf2:	462a      	mov	r2, r5
 8018cf4:	3201      	adds	r2, #1
 8018cf6:	b29e      	uxth	r6, r3
 8018cf8:	b2d2      	uxtb	r2, r2
 8018cfa:	2a08      	cmp	r2, #8
 8018cfc:	9201      	str	r2, [sp, #4]
 8018cfe:	9a02      	ldr	r2, [sp, #8]
 8018d00:	bf09      	itett	eq
 8018d02:	3202      	addeq	r2, #2
 8018d04:	3201      	addne	r2, #1
 8018d06:	9202      	streq	r2, [sp, #8]
 8018d08:	2200      	moveq	r2, #0
 8018d0a:	bf14      	ite	ne
 8018d0c:	9202      	strne	r2, [sp, #8]
 8018d0e:	9201      	streq	r2, [sp, #4]
 8018d10:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 8018d12:	42b2      	cmp	r2, r6
 8018d14:	d309      	bcc.n	8018d2a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1f2>
 8018d16:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8018d1a:	2301      	movs	r3, #1
 8018d1c:	9a04      	ldr	r2, [sp, #16]
 8018d1e:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8018d22:	d30e      	bcc.n	8018d42 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x20a>
 8018d24:	9300      	str	r3, [sp, #0]
 8018d26:	2500      	movs	r5, #0
 8018d28:	e035      	b.n	8018d96 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x25e>
 8018d2a:	9b04      	ldr	r3, [sp, #16]
 8018d2c:	429e      	cmp	r6, r3
 8018d2e:	d318      	bcc.n	8018d62 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x22a>
 8018d30:	9b00      	ldr	r3, [sp, #0]
 8018d32:	f894 2804 	ldrb.w	r2, [r4, #2052]	@ 0x804
 8018d36:	18e3      	adds	r3, r4, r3
 8018d38:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
 8018d3c:	9b00      	ldr	r3, [sp, #0]
 8018d3e:	3301      	adds	r3, #1
 8018d40:	b29b      	uxth	r3, r3
 8018d42:	9a04      	ldr	r2, [sp, #16]
 8018d44:	f894 5804 	ldrb.w	r5, [r4, #2052]	@ 0x804
 8018d48:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018d4c:	9f00      	ldr	r7, [sp, #0]
 8018d4e:	7115      	strb	r5, [r2, #4]
 8018d50:	3701      	adds	r7, #1
 8018d52:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 8018d54:	7157      	strb	r7, [r2, #5]
 8018d56:	80d5      	strh	r5, [r2, #6]
 8018d58:	9a04      	ldr	r2, [sp, #16]
 8018d5a:	3201      	adds	r2, #1
 8018d5c:	b292      	uxth	r2, r2
 8018d5e:	9204      	str	r2, [sp, #16]
 8018d60:	e7e0      	b.n	8018d24 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1ec>
 8018d62:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8018d66:	4632      	mov	r2, r6
 8018d68:	795b      	ldrb	r3, [r3, #5]
 8018d6a:	f603 0504 	addw	r5, r3, #2052	@ 0x804
 8018d6e:	4425      	add	r5, r4
 8018d70:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 8018d72:	eb07 0c05 	add.w	ip, r7, r5
 8018d76:	f1bc 0f00 	cmp.w	ip, #0
 8018d7a:	dd07      	ble.n	8018d8c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x254>
 8018d7c:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8018d80:	f892 c004 	ldrb.w	ip, [r2, #4]
 8018d84:	f805 cd01 	strb.w	ip, [r5, #-1]!
 8018d88:	88d2      	ldrh	r2, [r2, #6]
 8018d8a:	e7f1      	b.n	8018d70 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>
 8018d8c:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 8018d90:	b29b      	uxth	r3, r3
 8018d92:	e7c3      	b.n	8018d1c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1e4>
 8018d94:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8018d96:	460a      	mov	r2, r1
 8018d98:	960a      	str	r6, [sp, #40]	@ 0x28
 8018d9a:	46a9      	mov	r9, r5
 8018d9c:	469c      	mov	ip, r3
 8018d9e:	e788      	b.n	8018cb2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x17a>
 8018da0:	ebac 0308 	sub.w	r3, ip, r8
 8018da4:	eb09 0508 	add.w	r5, r9, r8
 8018da8:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018dac:	b29b      	uxth	r3, r3
 8018dae:	b2ad      	uxth	r5, r5
 8018db0:	f04f 0800 	mov.w	r8, #0
 8018db4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018db6:	4282      	cmp	r2, r0
 8018db8:	d88a      	bhi.n	8018cd0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x198>
 8018dba:	460a      	mov	r2, r1
 8018dbc:	e745      	b.n	8018c4a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x112>
 8018dbe:	4594      	cmp	ip, r2
 8018dc0:	9d08      	ldr	r5, [sp, #32]
 8018dc2:	4686      	mov	lr, r0
 8018dc4:	bf27      	ittee	cs
 8018dc6:	ebac 0302 	subcs.w	r3, ip, r2
 8018dca:	4616      	movcs	r6, r2
 8018dcc:	eba2 010c 	subcc.w	r1, r2, ip
 8018dd0:	4666      	movcc	r6, ip
 8018dd2:	bf27      	ittee	cs
 8018dd4:	b29b      	uxthcs	r3, r3
 8018dd6:	4641      	movcs	r1, r8
 8018dd8:	b289      	uxthcc	r1, r1
 8018dda:	4643      	movcc	r3, r8
 8018ddc:	2dff      	cmp	r5, #255	@ 0xff
 8018dde:	eb09 0506 	add.w	r5, r9, r6
 8018de2:	b2ad      	uxth	r5, r5
 8018de4:	d130      	bne.n	8018e48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8018de6:	45a9      	cmp	r9, r5
 8018de8:	f10e 0e03 	add.w	lr, lr, #3
 8018dec:	d17a      	bne.n	8018ee4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3ac>
 8018dee:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 8018df2:	4594      	cmp	ip, r2
 8018df4:	4430      	add	r0, r6
 8018df6:	d3db      	bcc.n	8018db0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x278>
 8018df8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018dfa:	9903      	ldr	r1, [sp, #12]
 8018dfc:	8812      	ldrh	r2, [r2, #0]
 8018dfe:	1a52      	subs	r2, r2, r1
 8018e00:	9912      	ldr	r1, [sp, #72]	@ 0x48
 8018e02:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8018e06:	4410      	add	r0, r2
 8018e08:	9a07      	ldr	r2, [sp, #28]
 8018e0a:	3201      	adds	r2, #1
 8018e0c:	428a      	cmp	r2, r1
 8018e0e:	9207      	str	r2, [sp, #28]
 8018e10:	f040 8081 	bne.w	8018f16 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x3de>
 8018e14:	f8bd 8060 	ldrh.w	r8, [sp, #96]	@ 0x60
 8018e18:	f8bd c058 	ldrh.w	ip, [sp, #88]	@ 0x58
 8018e1c:	9b03      	ldr	r3, [sp, #12]
 8018e1e:	eba8 080c 	sub.w	r8, r8, ip
 8018e22:	fa1f f888 	uxth.w	r8, r8
 8018e26:	f1b8 0f00 	cmp.w	r8, #0
 8018e2a:	bf08      	it	eq
 8018e2c:	461a      	moveq	r2, r3
 8018e2e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018e30:	bf18      	it	ne
 8018e32:	2200      	movne	r2, #0
 8018e34:	3301      	adds	r3, #1
 8018e36:	b292      	uxth	r2, r2
 8018e38:	930b      	str	r3, [sp, #44]	@ 0x2c
 8018e3a:	e6fd      	b.n	8018c38 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x100>
 8018e3c:	240253a8 	.word	0x240253a8
 8018e40:	240253a2 	.word	0x240253a2
 8018e44:	fffff7fb 	.word	0xfffff7fb
 8018e48:	45a9      	cmp	r9, r5
 8018e4a:	f10e 0e03 	add.w	lr, lr, #3
 8018e4e:	d0ce      	beq.n	8018dee <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2b6>
 8018e50:	f109 0701 	add.w	r7, r9, #1
 8018e54:	44a1      	add	r9, r4
 8018e56:	f81e bc03 	ldrb.w	fp, [lr, #-3]
 8018e5a:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018e5e:	9713      	str	r7, [sp, #76]	@ 0x4c
 8018e60:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018e64:	9f05      	ldr	r7, [sp, #20]
 8018e66:	eb07 0908 	add.w	r9, r7, r8
 8018e6a:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018e6e:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018e70:	fb1b fb07 	smulbb	fp, fp, r7
 8018e74:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018e76:	fb08 b807 	mla	r8, r8, r7, fp
 8018e7a:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018e7c:	fa1f f888 	uxth.w	r8, r8
 8018e80:	f108 0b01 	add.w	fp, r8, #1
 8018e84:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018e88:	f81e bc02 	ldrb.w	fp, [lr, #-2]
 8018e8c:	fb1b fb07 	smulbb	fp, fp, r7
 8018e90:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018e94:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018e96:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018e9a:	f899 8001 	ldrb.w	r8, [r9, #1]
 8018e9e:	fb08 b807 	mla	r8, r8, r7, fp
 8018ea2:	9f0d      	ldr	r7, [sp, #52]	@ 0x34
 8018ea4:	fa1f f888 	uxth.w	r8, r8
 8018ea8:	f108 0b01 	add.w	fp, r8, #1
 8018eac:	eb0b 2818 	add.w	r8, fp, r8, lsr #8
 8018eb0:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018eb4:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018eb8:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018ebc:	f81e 9c01 	ldrb.w	r9, [lr, #-1]
 8018ec0:	fb19 f907 	smulbb	r9, r9, r7
 8018ec4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 8018ec6:	fb08 9807 	mla	r8, r8, r7, r9
 8018eca:	fa1f f888 	uxth.w	r8, r8
 8018ece:	f108 0901 	add.w	r9, r8, #1
 8018ed2:	eb09 2818 	add.w	r8, r9, r8, lsr #8
 8018ed6:	f8bd 904c 	ldrh.w	r9, [sp, #76]	@ 0x4c
 8018eda:	ea4f 2828 	mov.w	r8, r8, asr #8
 8018ede:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8018ee2:	e7b1      	b.n	8018e48 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x310>
 8018ee4:	f109 0b01 	add.w	fp, r9, #1
 8018ee8:	44a1      	add	r9, r4
 8018eea:	9f05      	ldr	r7, [sp, #20]
 8018eec:	f899 8804 	ldrb.w	r8, [r9, #2052]	@ 0x804
 8018ef0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8018ef4:	eb07 0908 	add.w	r9, r7, r8
 8018ef8:	f817 8008 	ldrb.w	r8, [r7, r8]
 8018efc:	f80e 8c03 	strb.w	r8, [lr, #-3]
 8018f00:	f899 8001 	ldrb.w	r8, [r9, #1]
 8018f04:	f80e 8c02 	strb.w	r8, [lr, #-2]
 8018f08:	f899 8002 	ldrb.w	r8, [r9, #2]
 8018f0c:	fa1f f98b 	uxth.w	r9, fp
 8018f10:	f80e 8c01 	strb.w	r8, [lr, #-1]
 8018f14:	e767      	b.n	8018de6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x2ae>
 8018f16:	f8bd 100c 	ldrh.w	r1, [sp, #12]
 8018f1a:	f8bd 805c 	ldrh.w	r8, [sp, #92]	@ 0x5c
 8018f1e:	eba8 0801 	sub.w	r8, r8, r1
 8018f22:	fa1f f888 	uxth.w	r8, r8
 8018f26:	f1b8 0f00 	cmp.w	r8, #0
 8018f2a:	bf18      	it	ne
 8018f2c:	2100      	movne	r1, #0
 8018f2e:	e741      	b.n	8018db4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x27c>
 8018f30:	4b03      	ldr	r3, [pc, #12]	@ (8018f40 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW914blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x408>)
 8018f32:	6818      	ldr	r0, [r3, #0]
 8018f34:	6803      	ldr	r3, [r0, #0]
 8018f36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018f38:	4798      	blx	r3
 8018f3a:	b01b      	add	sp, #108	@ 0x6c
 8018f3c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018f40:	240253a8 	.word	0x240253a8

08018f44 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 8018f44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f48:	b09d      	sub	sp, #116	@ 0x74
 8018f4a:	461d      	mov	r5, r3
 8018f4c:	4604      	mov	r4, r0
 8018f4e:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8018f50:	e9cd 120f 	strd	r1, r2, [sp, #60]	@ 0x3c
 8018f54:	f89d 209c 	ldrb.w	r2, [sp, #156]	@ 0x9c
 8018f58:	920c      	str	r2, [sp, #48]	@ 0x30
 8018f5a:	2a00      	cmp	r2, #0
 8018f5c:	f000 81de 	beq.w	801931c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3d8>
 8018f60:	6828      	ldr	r0, [r5, #0]
 8018f62:	aa18      	add	r2, sp, #96	@ 0x60
 8018f64:	6869      	ldr	r1, [r5, #4]
 8018f66:	c203      	stmia	r2!, {r0, r1}
 8018f68:	6818      	ldr	r0, [r3, #0]
 8018f6a:	aa1a      	add	r2, sp, #104	@ 0x68
 8018f6c:	6859      	ldr	r1, [r3, #4]
 8018f6e:	c203      	stmia	r2!, {r0, r1}
 8018f70:	a818      	add	r0, sp, #96	@ 0x60
 8018f72:	f7fa f8ed 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8018f76:	4629      	mov	r1, r5
 8018f78:	a81a      	add	r0, sp, #104	@ 0x68
 8018f7a:	f7fa f911 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 8018f7e:	f9bd 3064 	ldrsh.w	r3, [sp, #100]	@ 0x64
 8018f82:	f9bd 7066 	ldrsh.w	r7, [sp, #102]	@ 0x66
 8018f86:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8018f8a:	f9bd 606e 	ldrsh.w	r6, [sp, #110]	@ 0x6e
 8018f8e:	bfdb      	ittet	le
 8018f90:	b29a      	uxthle	r2, r3
 8018f92:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 8018f96:	2201      	movgt	r2, #1
 8018f98:	fb91 f2f2 	sdivle	r2, r1, r2
 8018f9c:	9201      	str	r2, [sp, #4]
 8018f9e:	9801      	ldr	r0, [sp, #4]
 8018fa0:	f9bd 206a 	ldrsh.w	r2, [sp, #106]	@ 0x6a
 8018fa4:	9901      	ldr	r1, [sp, #4]
 8018fa6:	fb92 f0f0 	sdiv	r0, r2, r0
 8018faa:	b280      	uxth	r0, r0
 8018fac:	440f      	add	r7, r1
 8018fae:	900d      	str	r0, [sp, #52]	@ 0x34
 8018fb0:	3f01      	subs	r7, #1
 8018fb2:	9801      	ldr	r0, [sp, #4]
 8018fb4:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8018fb6:	fb05 2510 	mls	r5, r5, r0, r2
 8018fba:	fb97 f7f1 	sdiv	r7, r7, r1
 8018fbe:	fb15 f503 	smulbb	r5, r5, r3
 8018fc2:	f8bd 1068 	ldrh.w	r1, [sp, #104]	@ 0x68
 8018fc6:	f8bd 3060 	ldrh.w	r3, [sp, #96]	@ 0x60
 8018fca:	3701      	adds	r7, #1
 8018fcc:	440d      	add	r5, r1
 8018fce:	4419      	add	r1, r3
 8018fd0:	f8bd 3062 	ldrh.w	r3, [sp, #98]	@ 0x62
 8018fd4:	b2bf      	uxth	r7, r7
 8018fd6:	441a      	add	r2, r3
 8018fd8:	f9bd 306c 	ldrsh.w	r3, [sp, #108]	@ 0x6c
 8018fdc:	f8ad 1068 	strh.w	r1, [sp, #104]	@ 0x68
 8018fe0:	00bf      	lsls	r7, r7, #2
 8018fe2:	9304      	str	r3, [sp, #16]
 8018fe4:	b2ad      	uxth	r5, r5
 8018fe6:	4bb0      	ldr	r3, [pc, #704]	@ (80192a8 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x364>)
 8018fe8:	f8ad 206a 	strh.w	r2, [sp, #106]	@ 0x6a
 8018fec:	6818      	ldr	r0, [r3, #0]
 8018fee:	6803      	ldr	r3, [r0, #0]
 8018ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018ff2:	4798      	blx	r3
 8018ff4:	4bad      	ldr	r3, [pc, #692]	@ (80192ac <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x368>)
 8018ff6:	f9bd 106a 	ldrsh.w	r1, [sp, #106]	@ 0x6a
 8018ffa:	2d00      	cmp	r5, #0
 8018ffc:	881a      	ldrh	r2, [r3, #0]
 8018ffe:	f9bd c068 	ldrsh.w	ip, [sp, #104]	@ 0x68
 8019002:	fb02 f606 	mul.w	r6, r2, r6
 8019006:	fb02 c101 	mla	r1, r2, r1, ip
 801900a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801900e:	9316      	str	r3, [sp, #88]	@ 0x58
 8019010:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8019014:	4ba6      	ldr	r3, [pc, #664]	@ (80192b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x36c>)
 8019016:	eb00 0801 	add.w	r8, r0, r1
 801901a:	bf18      	it	ne
 801901c:	2100      	movne	r1, #0
 801901e:	eba3 0304 	sub.w	r3, r3, r4
 8019022:	eb08 0206 	add.w	r2, r8, r6
 8019026:	9317      	str	r3, [sp, #92]	@ 0x5c
 8019028:	9208      	str	r2, [sp, #32]
 801902a:	f107 0204 	add.w	r2, r7, #4
 801902e:	9211      	str	r2, [sp, #68]	@ 0x44
 8019030:	9a04      	ldr	r2, [sp, #16]
 8019032:	bf08      	it	eq
 8019034:	4611      	moveq	r1, r2
 8019036:	2200      	movs	r2, #0
 8019038:	b289      	uxth	r1, r1
 801903a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801903c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801903e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8019040:	fa12 f383 	uxtah	r3, r2, r3
 8019044:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8019046:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 801904a:	3304      	adds	r3, #4
 801904c:	9306      	str	r3, [sp, #24]
 801904e:	9b08      	ldr	r3, [sp, #32]
 8019050:	4543      	cmp	r3, r8
 8019052:	f240 815e 	bls.w	8019312 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ce>
 8019056:	f8bd 3064 	ldrh.w	r3, [sp, #100]	@ 0x64
 801905a:	f04f 0b01 	mov.w	fp, #1
 801905e:	9a01      	ldr	r2, [sp, #4]
 8019060:	9806      	ldr	r0, [sp, #24]
 8019062:	465e      	mov	r6, fp
 8019064:	f8cd b008 	str.w	fp, [sp, #8]
 8019068:	7800      	ldrb	r0, [r0, #0]
 801906a:	fbb5 f3f3 	udiv	r3, r5, r3
 801906e:	1ad3      	subs	r3, r2, r3
 8019070:	900e      	str	r0, [sp, #56]	@ 0x38
 8019072:	3001      	adds	r0, #1
 8019074:	b29b      	uxth	r3, r3
 8019076:	9005      	str	r0, [sp, #20]
 8019078:	9312      	str	r3, [sp, #72]	@ 0x48
 801907a:	9b06      	ldr	r3, [sp, #24]
 801907c:	785a      	ldrb	r2, [r3, #1]
 801907e:	789b      	ldrb	r3, [r3, #2]
 8019080:	021b      	lsls	r3, r3, #8
 8019082:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8019086:	9a06      	ldr	r2, [sp, #24]
 8019088:	78d2      	ldrb	r2, [r2, #3]
 801908a:	4313      	orrs	r3, r2
 801908c:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801908e:	441a      	add	r2, r3
 8019090:	1c50      	adds	r0, r2, #1
 8019092:	7852      	ldrb	r2, [r2, #1]
 8019094:	9003      	str	r0, [sp, #12]
 8019096:	0212      	lsls	r2, r2, #8
 8019098:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801909a:	f402 72ff 	and.w	r2, r2, #510	@ 0x1fe
 801909e:	5cc3      	ldrb	r3, [r0, r3]
 80190a0:	431a      	orrs	r2, r3
 80190a2:	b293      	uxth	r3, r2
 80190a4:	f884 2804 	strb.w	r2, [r4, #2052]	@ 0x804
 80190a8:	930a      	str	r3, [sp, #40]	@ 0x28
 80190aa:	2300      	movs	r3, #0
 80190ac:	461a      	mov	r2, r3
 80190ae:	9307      	str	r3, [sp, #28]
 80190b0:	2d00      	cmp	r5, #0
 80190b2:	d07c      	beq.n	80191ae <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x26a>
 80190b4:	42ae      	cmp	r6, r5
 80190b6:	d26c      	bcs.n	8019192 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x24e>
 80190b8:	9b08      	ldr	r3, [sp, #32]
 80190ba:	1bad      	subs	r5, r5, r6
 80190bc:	4608      	mov	r0, r1
 80190be:	4543      	cmp	r3, r8
 80190c0:	b2ad      	uxth	r5, r5
 80190c2:	d802      	bhi.n	80190ca <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x186>
 80190c4:	e071      	b.n	80191aa <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x266>
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d15d      	bne.n	8019186 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x242>
 80190ca:	9b03      	ldr	r3, [sp, #12]
 80190cc:	9a02      	ldr	r2, [sp, #8]
 80190ce:	785b      	ldrb	r3, [r3, #1]
 80190d0:	f1c2 0207 	rsb	r2, r2, #7
 80190d4:	9902      	ldr	r1, [sp, #8]
 80190d6:	4093      	lsls	r3, r2
 80190d8:	005b      	lsls	r3, r3, #1
 80190da:	f403 72ff 	and.w	r2, r3, #510	@ 0x1fe
 80190de:	9b03      	ldr	r3, [sp, #12]
 80190e0:	781b      	ldrb	r3, [r3, #0]
 80190e2:	410b      	asrs	r3, r1
 80190e4:	3101      	adds	r1, #1
 80190e6:	b2c9      	uxtb	r1, r1
 80190e8:	b2db      	uxtb	r3, r3
 80190ea:	2908      	cmp	r1, #8
 80190ec:	9102      	str	r1, [sp, #8]
 80190ee:	9903      	ldr	r1, [sp, #12]
 80190f0:	ea43 0302 	orr.w	r3, r3, r2
 80190f4:	bf0c      	ite	eq
 80190f6:	3102      	addeq	r1, #2
 80190f8:	3101      	addne	r1, #1
 80190fa:	b29a      	uxth	r2, r3
 80190fc:	bf05      	ittet	eq
 80190fe:	9103      	streq	r1, [sp, #12]
 8019100:	2100      	moveq	r1, #0
 8019102:	9103      	strne	r1, [sp, #12]
 8019104:	9102      	streq	r1, [sp, #8]
 8019106:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019108:	4291      	cmp	r1, r2
 801910a:	d30a      	bcc.n	8019122 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1de>
 801910c:	f884 3804 	strb.w	r3, [r4, #2052]	@ 0x804
 8019110:	2301      	movs	r3, #1
 8019112:	9905      	ldr	r1, [sp, #20]
 8019114:	f5b1 7f00 	cmp.w	r1, #512	@ 0x200
 8019118:	d30f      	bcc.n	801913a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1f6>
 801911a:	469b      	mov	fp, r3
 801911c:	f04f 0c00 	mov.w	ip, #0
 8019120:	e032      	b.n	8019188 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x244>
 8019122:	9b05      	ldr	r3, [sp, #20]
 8019124:	429a      	cmp	r2, r3
 8019126:	d318      	bcc.n	801915a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x216>
 8019128:	eb04 030b 	add.w	r3, r4, fp
 801912c:	f894 1804 	ldrb.w	r1, [r4, #2052]	@ 0x804
 8019130:	f883 1804 	strb.w	r1, [r3, #2052]	@ 0x804
 8019134:	f10b 0301 	add.w	r3, fp, #1
 8019138:	b29b      	uxth	r3, r3
 801913a:	9905      	ldr	r1, [sp, #20]
 801913c:	f894 6804 	ldrb.w	r6, [r4, #2052]	@ 0x804
 8019140:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019144:	710e      	strb	r6, [r1, #4]
 8019146:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8019148:	80ce      	strh	r6, [r1, #6]
 801914a:	f10b 0601 	add.w	r6, fp, #1
 801914e:	714e      	strb	r6, [r1, #5]
 8019150:	9905      	ldr	r1, [sp, #20]
 8019152:	3101      	adds	r1, #1
 8019154:	b289      	uxth	r1, r1
 8019156:	9105      	str	r1, [sp, #20]
 8019158:	e7df      	b.n	801911a <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1d6>
 801915a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801915e:	4611      	mov	r1, r2
 8019160:	795b      	ldrb	r3, [r3, #5]
 8019162:	f603 0604 	addw	r6, r3, #2052	@ 0x804
 8019166:	4426      	add	r6, r4
 8019168:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801916a:	4437      	add	r7, r6
 801916c:	2f00      	cmp	r7, #0
 801916e:	dd06      	ble.n	801917e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x23a>
 8019170:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8019174:	790f      	ldrb	r7, [r1, #4]
 8019176:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801917a:	88c9      	ldrh	r1, [r1, #6]
 801917c:	e7f4      	b.n	8019168 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x224>
 801917e:	f884 1804 	strb.w	r1, [r4, #2052]	@ 0x804
 8019182:	b29b      	uxth	r3, r3
 8019184:	e7c5      	b.n	8019112 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x1ce>
 8019186:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019188:	920a      	str	r2, [sp, #40]	@ 0x28
 801918a:	4601      	mov	r1, r0
 801918c:	4662      	mov	r2, ip
 801918e:	461e      	mov	r6, r3
 8019190:	e78e      	b.n	80190b0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16c>
 8019192:	1b73      	subs	r3, r6, r5
 8019194:	eb02 0c05 	add.w	ip, r2, r5
 8019198:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 801919c:	b29b      	uxth	r3, r3
 801919e:	fa1f fc8c 	uxth.w	ip, ip
 80191a2:	2500      	movs	r5, #0
 80191a4:	9a08      	ldr	r2, [sp, #32]
 80191a6:	4542      	cmp	r2, r8
 80191a8:	d88d      	bhi.n	80190c6 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x182>
 80191aa:	4601      	mov	r1, r0
 80191ac:	e74f      	b.n	801904e <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x10a>
 80191ae:	428e      	cmp	r6, r1
 80191b0:	bf2b      	itete	cs
 80191b2:	468e      	movcs	lr, r1
 80191b4:	46b6      	movcc	lr, r6
 80191b6:	1a73      	subcs	r3, r6, r1
 80191b8:	1b88      	subcc	r0, r1, r6
 80191ba:	eb02 0c0e 	add.w	ip, r2, lr
 80191be:	bf2b      	itete	cs
 80191c0:	4628      	movcs	r0, r5
 80191c2:	462b      	movcc	r3, r5
 80191c4:	b29b      	uxthcs	r3, r3
 80191c6:	b280      	uxthcc	r0, r0
 80191c8:	f108 0503 	add.w	r5, r8, #3
 80191cc:	fa1f fc8c 	uxth.w	ip, ip
 80191d0:	4562      	cmp	r2, ip
 80191d2:	d06f      	beq.n	80192b4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x370>
 80191d4:	1c57      	adds	r7, r2, #1
 80191d6:	4422      	add	r2, r4
 80191d8:	b2bf      	uxth	r7, r7
 80191da:	f892 2804 	ldrb.w	r2, [r2, #2052]	@ 0x804
 80191de:	9713      	str	r7, [sp, #76]	@ 0x4c
 80191e0:	2704      	movs	r7, #4
 80191e2:	46b9      	mov	r9, r7
 80191e4:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 80191e6:	fb19 7202 	smlabb	r2, r9, r2, r7
 80191ea:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 80191ec:	58bf      	ldr	r7, [r7, r2]
 80191ee:	0e3a      	lsrs	r2, r7, #24
 80191f0:	9209      	str	r2, [sp, #36]	@ 0x24
 80191f2:	d016      	beq.n	8019222 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80191f4:	f3c7 2907 	ubfx	r9, r7, #8, #8
 80191f8:	fa5f fa87 	uxtb.w	sl, r7
 80191fc:	f3c7 4707 	ubfx	r7, r7, #16, #8
 8019200:	fa5f f289 	uxtb.w	r2, r9
 8019204:	9214      	str	r2, [sp, #80]	@ 0x50
 8019206:	b2fa      	uxtb	r2, r7
 8019208:	9215      	str	r2, [sp, #84]	@ 0x54
 801920a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801920c:	2aff      	cmp	r2, #255	@ 0xff
 801920e:	d10b      	bne.n	8019228 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019210:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019212:	2aff      	cmp	r2, #255	@ 0xff
 8019214:	d108      	bne.n	8019228 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2e4>
 8019216:	f805 ac03 	strb.w	sl, [r5, #-3]
 801921a:	f805 9c02 	strb.w	r9, [r5, #-2]
 801921e:	f805 7c01 	strb.w	r7, [r5, #-1]
 8019222:	3503      	adds	r5, #3
 8019224:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8019226:	e7d3      	b.n	80191d0 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x28c>
 8019228:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801922a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801922c:	437a      	muls	r2, r7
 801922e:	1c57      	adds	r7, r2, #1
 8019230:	eb07 2222 	add.w	r2, r7, r2, asr #8
 8019234:	f815 7c03 	ldrb.w	r7, [r5, #-3]
 8019238:	1212      	asrs	r2, r2, #8
 801923a:	fa1f f982 	uxth.w	r9, r2
 801923e:	43d2      	mvns	r2, r2
 8019240:	fb1a fa09 	smulbb	sl, sl, r9
 8019244:	b2d2      	uxtb	r2, r2
 8019246:	fb07 a702 	mla	r7, r7, r2, sl
 801924a:	9209      	str	r2, [sp, #36]	@ 0x24
 801924c:	b2bf      	uxth	r7, r7
 801924e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8019250:	f107 0a01 	add.w	sl, r7, #1
 8019254:	eb0a 2717 	add.w	r7, sl, r7, lsr #8
 8019258:	fb12 fa09 	smulbb	sl, r2, r9
 801925c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801925e:	123f      	asrs	r7, r7, #8
 8019260:	f805 7c03 	strb.w	r7, [r5, #-3]
 8019264:	f815 7c02 	ldrb.w	r7, [r5, #-2]
 8019268:	fb07 aa02 	mla	sl, r7, r2, sl
 801926c:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801926e:	fb12 f909 	smulbb	r9, r2, r9
 8019272:	fa1f fa8a 	uxth.w	sl, sl
 8019276:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019278:	f10a 0701 	add.w	r7, sl, #1
 801927c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 8019280:	f815 7c01 	ldrb.w	r7, [r5, #-1]
 8019284:	fb07 9902 	mla	r9, r7, r2, r9
 8019288:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801928c:	fa1f f989 	uxth.w	r9, r9
 8019290:	f805 ac02 	strb.w	sl, [r5, #-2]
 8019294:	f109 0201 	add.w	r2, r9, #1
 8019298:	eb02 2919 	add.w	r9, r2, r9, lsr #8
 801929c:	ea4f 2929 	mov.w	r9, r9, asr #8
 80192a0:	f805 9c01 	strb.w	r9, [r5, #-1]
 80192a4:	e7bd      	b.n	8019222 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x2de>
 80192a6:	bf00      	nop
 80192a8:	240253a8 	.word	0x240253a8
 80192ac:	240253a2 	.word	0x240253a2
 80192b0:	fffff7fb 	.word	0xfffff7fb
 80192b4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 80192b8:	428e      	cmp	r6, r1
 80192ba:	44f0      	add	r8, lr
 80192bc:	f4ff af71 	bcc.w	80191a2 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x25e>
 80192c0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 80192c2:	9904      	ldr	r1, [sp, #16]
 80192c4:	8812      	ldrh	r2, [r2, #0]
 80192c6:	1a52      	subs	r2, r2, r1
 80192c8:	9912      	ldr	r1, [sp, #72]	@ 0x48
 80192ca:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 80192ce:	4490      	add	r8, r2
 80192d0:	9a07      	ldr	r2, [sp, #28]
 80192d2:	3201      	adds	r2, #1
 80192d4:	428a      	cmp	r2, r1
 80192d6:	9207      	str	r2, [sp, #28]
 80192d8:	d111      	bne.n	80192fe <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3ba>
 80192da:	f8bd 5068 	ldrh.w	r5, [sp, #104]	@ 0x68
 80192de:	f8bd c060 	ldrh.w	ip, [sp, #96]	@ 0x60
 80192e2:	9b04      	ldr	r3, [sp, #16]
 80192e4:	eba5 050c 	sub.w	r5, r5, ip
 80192e8:	b2ad      	uxth	r5, r5
 80192ea:	2d00      	cmp	r5, #0
 80192ec:	bf08      	it	eq
 80192ee:	4619      	moveq	r1, r3
 80192f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80192f2:	bf18      	it	ne
 80192f4:	2100      	movne	r1, #0
 80192f6:	3301      	adds	r3, #1
 80192f8:	b289      	uxth	r1, r1
 80192fa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80192fc:	e69e      	b.n	801903c <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xf8>
 80192fe:	f8bd 0010 	ldrh.w	r0, [sp, #16]
 8019302:	f8bd 5064 	ldrh.w	r5, [sp, #100]	@ 0x64
 8019306:	1a2d      	subs	r5, r5, r0
 8019308:	b2ad      	uxth	r5, r5
 801930a:	2d00      	cmp	r5, #0
 801930c:	bf18      	it	ne
 801930e:	2000      	movne	r0, #0
 8019310:	e748      	b.n	80191a4 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x260>
 8019312:	4b04      	ldr	r3, [pc, #16]	@ (8019324 <_ZN8touchgfx8LCD24bpp19DecompressorL8_LZW916blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x3e0>)
 8019314:	6818      	ldr	r0, [r3, #0]
 8019316:	6803      	ldr	r3, [r0, #0]
 8019318:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801931a:	4798      	blx	r3
 801931c:	b01d      	add	sp, #116	@ 0x74
 801931e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019322:	bf00      	nop
 8019324:	240253a8 	.word	0x240253a8

08019328 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h>:
 8019328:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801932c:	b08f      	sub	sp, #60	@ 0x3c
 801932e:	4616      	mov	r6, r2
 8019330:	4681      	mov	r9, r0
 8019332:	460d      	mov	r5, r1
 8019334:	f89d 2060 	ldrb.w	r2, [sp, #96]	@ 0x60
 8019338:	9205      	str	r2, [sp, #20]
 801933a:	2a00      	cmp	r2, #0
 801933c:	f000 82a8 	beq.w	8019890 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x568>
 8019340:	6830      	ldr	r0, [r6, #0]
 8019342:	ac0a      	add	r4, sp, #40	@ 0x28
 8019344:	6871      	ldr	r1, [r6, #4]
 8019346:	c403      	stmia	r4!, {r0, r1}
 8019348:	6818      	ldr	r0, [r3, #0]
 801934a:	ac0c      	add	r4, sp, #48	@ 0x30
 801934c:	6859      	ldr	r1, [r3, #4]
 801934e:	c403      	stmia	r4!, {r0, r1}
 8019350:	a80a      	add	r0, sp, #40	@ 0x28
 8019352:	f7f9 fefd 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 8019356:	4631      	mov	r1, r6
 8019358:	a80c      	add	r0, sp, #48	@ 0x30
 801935a:	f7f9 ff21 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801935e:	f9bd 202c 	ldrsh.w	r2, [sp, #44]	@ 0x2c
 8019362:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 8019366:	bfdb      	ittet	le
 8019368:	b293      	uxthle	r3, r2
 801936a:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 801936e:	2301      	movgt	r3, #1
 8019370:	fb91 f3f3 	sdivle	r3, r1, r3
 8019374:	9300      	str	r3, [sp, #0]
 8019376:	f105 0308 	add.w	r3, r5, #8
 801937a:	9900      	ldr	r1, [sp, #0]
 801937c:	9306      	str	r3, [sp, #24]
 801937e:	f9bd 302e 	ldrsh.w	r3, [sp, #46]	@ 0x2e
 8019382:	440b      	add	r3, r1
 8019384:	3b01      	subs	r3, #1
 8019386:	fb93 f3f1 	sdiv	r3, r3, r1
 801938a:	3b01      	subs	r3, #1
 801938c:	9906      	ldr	r1, [sp, #24]
 801938e:	b29b      	uxth	r3, r3
 8019390:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8019394:	9900      	ldr	r1, [sp, #0]
 8019396:	9307      	str	r3, [sp, #28]
 8019398:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801939c:	fb93 f0f1 	sdiv	r0, r3, r1
 80193a0:	b284      	uxth	r4, r0
 80193a2:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 80193a6:	b280      	uxth	r0, r0
 80193a8:	9402      	str	r4, [sp, #8]
 80193aa:	9d02      	ldr	r5, [sp, #8]
 80193ac:	9c00      	ldr	r4, [sp, #0]
 80193ae:	fb05 3514 	mls	r5, r5, r4, r3
 80193b2:	fb15 f502 	smulbb	r5, r5, r2
 80193b6:	440d      	add	r5, r1
 80193b8:	b2ad      	uxth	r5, r5
 80193ba:	2800      	cmp	r0, #0
 80193bc:	d071      	beq.n	80194a2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x17a>
 80193be:	1e42      	subs	r2, r0, #1
 80193c0:	9806      	ldr	r0, [sp, #24]
 80193c2:	f850 8022 	ldr.w	r8, [r0, r2, lsl #2]
 80193c6:	9a07      	ldr	r2, [sp, #28]
 80193c8:	fa98 f888 	rev.w	r8, r8
 80193cc:	4490      	add	r8, r2
 80193ce:	f8bd 2028 	ldrh.w	r2, [sp, #40]	@ 0x28
 80193d2:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 80193d6:	4411      	add	r1, r2
 80193d8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 80193dc:	f8df b348 	ldr.w	fp, [pc, #840]	@ 8019728 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 80193e0:	4413      	add	r3, r2
 80193e2:	f8ad 1030 	strh.w	r1, [sp, #48]	@ 0x30
 80193e6:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 80193ea:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 80193ee:	9301      	str	r3, [sp, #4]
 80193f0:	4bcb      	ldr	r3, [pc, #812]	@ (8019720 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3f8>)
 80193f2:	6818      	ldr	r0, [r3, #0]
 80193f4:	6803      	ldr	r3, [r0, #0]
 80193f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80193f8:	4798      	blx	r3
 80193fa:	4bca      	ldr	r3, [pc, #808]	@ (8019724 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3fc>)
 80193fc:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 8019400:	881b      	ldrh	r3, [r3, #0]
 8019402:	f9bd 7032 	ldrsh.w	r7, [sp, #50]	@ 0x32
 8019406:	fb03 2707 	mla	r7, r3, r7, r2
 801940a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801940e:	4363      	muls	r3, r4
 8019410:	2400      	movs	r4, #0
 8019412:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019416:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801941a:	4621      	mov	r1, r4
 801941c:	4407      	add	r7, r0
 801941e:	18fb      	adds	r3, r7, r3
 8019420:	9309      	str	r3, [sp, #36]	@ 0x24
 8019422:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 8019426:	fb95 f3f3 	sdiv	r3, r5, r3
 801942a:	9304      	str	r3, [sp, #16]
 801942c:	f109 0304 	add.w	r3, r9, #4
 8019430:	4618      	mov	r0, r3
 8019432:	9308      	str	r3, [sp, #32]
 8019434:	f008 fc0c 	bl	8021c50 <memset>
 8019438:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801943a:	42bb      	cmp	r3, r7
 801943c:	f240 8223 	bls.w	8019886 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x55e>
 8019440:	2003      	movs	r0, #3
 8019442:	f04f 0c07 	mov.w	ip, #7
 8019446:	f04f 0e0b 	mov.w	lr, #11
 801944a:	2d00      	cmp	r5, #0
 801944c:	f000 813c 	beq.w	80196c8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a0>
 8019450:	f898 3000 	ldrb.w	r3, [r8]
 8019454:	b2db      	uxtb	r3, r3
 8019456:	2bfe      	cmp	r3, #254	@ 0xfe
 8019458:	d126      	bne.n	80194a8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x180>
 801945a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801945e:	f108 0604 	add.w	r6, r8, #4
 8019462:	f898 2002 	ldrb.w	r2, [r8, #2]
 8019466:	3d01      	subs	r5, #1
 8019468:	b2c9      	uxtb	r1, r1
 801946a:	f898 8003 	ldrb.w	r8, [r8, #3]
 801946e:	b2d2      	uxtb	r2, r2
 8019470:	f361 0407 	bfi	r4, r1, #0, #8
 8019474:	fa5f f888 	uxtb.w	r8, r8
 8019478:	b2ad      	uxth	r5, r5
 801947a:	f362 240f 	bfi	r4, r2, #8, #8
 801947e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019482:	fb10 2208 	smlabb	r2, r0, r8, r2
 8019486:	f368 4417 	bfi	r4, r8, #16, #8
 801948a:	fb1c 2201 	smlabb	r2, ip, r1, r2
 801948e:	0e23      	lsrs	r3, r4, #24
 8019490:	fb1e 2303 	smlabb	r3, lr, r3, r2
 8019494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019498:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801949c:	605c      	str	r4, [r3, #4]
 801949e:	46b0      	mov	r8, r6
 80194a0:	e7d3      	b.n	801944a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x122>
 80194a2:	f8dd 801c 	ldr.w	r8, [sp, #28]
 80194a6:	e792      	b.n	80193ce <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0xa6>
 80194a8:	2bff      	cmp	r3, #255	@ 0xff
 80194aa:	d127      	bne.n	80194fc <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1d4>
 80194ac:	f898 2001 	ldrb.w	r2, [r8, #1]
 80194b0:	f108 0605 	add.w	r6, r8, #5
 80194b4:	f898 3002 	ldrb.w	r3, [r8, #2]
 80194b8:	3d01      	subs	r5, #1
 80194ba:	b2d2      	uxtb	r2, r2
 80194bc:	f898 1003 	ldrb.w	r1, [r8, #3]
 80194c0:	b2db      	uxtb	r3, r3
 80194c2:	f898 8004 	ldrb.w	r8, [r8, #4]
 80194c6:	f362 0407 	bfi	r4, r2, #0, #8
 80194ca:	b2c9      	uxtb	r1, r1
 80194cc:	fa5f f888 	uxtb.w	r8, r8
 80194d0:	f363 240f 	bfi	r4, r3, #8, #8
 80194d4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80194d8:	b2ad      	uxth	r5, r5
 80194da:	fb10 3301 	smlabb	r3, r0, r1, r3
 80194de:	f361 4417 	bfi	r4, r1, #16, #8
 80194e2:	fb1c 3302 	smlabb	r3, ip, r2, r3
 80194e6:	f368 641f 	bfi	r4, r8, #24, #8
 80194ea:	fb1e 3808 	smlabb	r8, lr, r8, r3
 80194ee:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 80194f2:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 80194f6:	f8c8 4004 	str.w	r4, [r8, #4]
 80194fa:	e7d0      	b.n	801949e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 80194fc:	119a      	asrs	r2, r3, #6
 80194fe:	f108 0601 	add.w	r6, r8, #1
 8019502:	d107      	bne.n	8019514 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1ec>
 8019504:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019508:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801950c:	685c      	ldr	r4, [r3, #4]
 801950e:	3d01      	subs	r5, #1
 8019510:	b2ad      	uxth	r5, r5
 8019512:	e7c4      	b.n	801949e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x176>
 8019514:	2a01      	cmp	r2, #1
 8019516:	d129      	bne.n	801956c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x244>
 8019518:	f003 0203 	and.w	r2, r3, #3
 801951c:	1ea1      	subs	r1, r4, #2
 801951e:	4411      	add	r1, r2
 8019520:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8019524:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019528:	b2c9      	uxtb	r1, r1
 801952a:	3a02      	subs	r2, #2
 801952c:	3b02      	subs	r3, #2
 801952e:	f361 0407 	bfi	r4, r1, #0, #8
 8019532:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019536:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 801953a:	f362 240f 	bfi	r4, r2, #8, #8
 801953e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019542:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019546:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 801954a:	fb10 2203 	smlabb	r2, r0, r3, r2
 801954e:	f363 4417 	bfi	r4, r3, #16, #8
 8019552:	fb1c 2201 	smlabb	r2, ip, r1, r2
 8019556:	ea4f 6814 	mov.w	r8, r4, lsr #24
 801955a:	fb1e 2808 	smlabb	r8, lr, r8, r2
 801955e:	f008 083f 	and.w	r8, r8, #63	@ 0x3f
 8019562:	eb09 0888 	add.w	r8, r9, r8, lsl #2
 8019566:	f8c8 4004 	str.w	r4, [r8, #4]
 801956a:	e7d0      	b.n	801950e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 801956c:	2a02      	cmp	r2, #2
 801956e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019572:	d12e      	bne.n	80195d2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2aa>
 8019574:	f898 2001 	ldrb.w	r2, [r8, #1]
 8019578:	f1a3 0a20 	sub.w	sl, r3, #32
 801957c:	f108 0602 	add.w	r6, r8, #2
 8019580:	b2d2      	uxtb	r2, r2
 8019582:	f002 010f 	and.w	r1, r2, #15
 8019586:	1112      	asrs	r2, r2, #4
 8019588:	3908      	subs	r1, #8
 801958a:	3a08      	subs	r2, #8
 801958c:	4451      	add	r1, sl
 801958e:	4492      	add	sl, r2
 8019590:	4421      	add	r1, r4
 8019592:	b2c9      	uxtb	r1, r1
 8019594:	f361 0407 	bfi	r4, r1, #0, #8
 8019598:	f3c4 2807 	ubfx	r8, r4, #8, #8
 801959c:	f1a8 0820 	sub.w	r8, r8, #32
 80195a0:	4443      	add	r3, r8
 80195a2:	b2db      	uxtb	r3, r3
 80195a4:	f363 240f 	bfi	r4, r3, #8, #8
 80195a8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80195ac:	eb0a 4a14 	add.w	sl, sl, r4, lsr #16
 80195b0:	f00a 0aff 	and.w	sl, sl, #255	@ 0xff
 80195b4:	fb10 330a 	smlabb	r3, r0, sl, r3
 80195b8:	f36a 4417 	bfi	r4, sl, #16, #8
 80195bc:	fb1c 3301 	smlabb	r3, ip, r1, r3
 80195c0:	0e22      	lsrs	r2, r4, #24
 80195c2:	fb1e 3202 	smlabb	r2, lr, r2, r3
 80195c6:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 80195ca:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80195ce:	6054      	str	r4, [r2, #4]
 80195d0:	e79d      	b.n	801950e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e6>
 80195d2:	3301      	adds	r3, #1
 80195d4:	42ab      	cmp	r3, r5
 80195d6:	dd59      	ble.n	801968c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x364>
 80195d8:	1b5d      	subs	r5, r3, r5
 80195da:	2d00      	cmp	r5, #0
 80195dc:	dc58      	bgt.n	8019690 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x368>
 80195de:	f8dd a004 	ldr.w	sl, [sp, #4]
 80195e2:	f04f 0800 	mov.w	r8, #0
 80195e6:	f1ba 0f00 	cmp.w	sl, #0
 80195ea:	f340 8108 	ble.w	80197fe <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4d6>
 80195ee:	1c73      	adds	r3, r6, #1
 80195f0:	9303      	str	r3, [sp, #12]
 80195f2:	7833      	ldrb	r3, [r6, #0]
 80195f4:	b2db      	uxtb	r3, r3
 80195f6:	2bfe      	cmp	r3, #254	@ 0xfe
 80195f8:	d16a      	bne.n	80196d0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3a8>
 80195fa:	7871      	ldrb	r1, [r6, #1]
 80195fc:	1d33      	adds	r3, r6, #4
 80195fe:	78b2      	ldrb	r2, [r6, #2]
 8019600:	b2c9      	uxtb	r1, r1
 8019602:	78f0      	ldrb	r0, [r6, #3]
 8019604:	b2d2      	uxtb	r2, r2
 8019606:	9303      	str	r3, [sp, #12]
 8019608:	f361 0407 	bfi	r4, r1, #0, #8
 801960c:	b2c0      	uxtb	r0, r0
 801960e:	2303      	movs	r3, #3
 8019610:	f362 240f 	bfi	r4, r2, #8, #8
 8019614:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019618:	fb13 2200 	smlabb	r2, r3, r0, r2
 801961c:	f360 4417 	bfi	r4, r0, #16, #8
 8019620:	2307      	movs	r3, #7
 8019622:	0e25      	lsrs	r5, r4, #24
 8019624:	fb13 2101 	smlabb	r1, r3, r1, r2
 8019628:	230b      	movs	r3, #11
 801962a:	fb13 1305 	smlabb	r3, r3, r5, r1
 801962e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019632:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019636:	605c      	str	r4, [r3, #4]
 8019638:	2501      	movs	r5, #1
 801963a:	462e      	mov	r6, r5
 801963c:	eb06 0308 	add.w	r3, r6, r8
 8019640:	ebaa 0a06 	sub.w	sl, sl, r6
 8019644:	1bad      	subs	r5, r5, r6
 8019646:	2b40      	cmp	r3, #64	@ 0x40
 8019648:	dd16      	ble.n	8019678 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x350>
 801964a:	4658      	mov	r0, fp
 801964c:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8019650:	f7e9 fe3a 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 8019654:	4659      	mov	r1, fp
 8019656:	9b05      	ldr	r3, [sp, #20]
 8019658:	4642      	mov	r2, r8
 801965a:	4638      	mov	r0, r7
 801965c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019660:	f7e9 fe9a 	bl	8003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8019664:	4b30      	ldr	r3, [pc, #192]	@ (8019728 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>)
 8019666:	4447      	add	r7, r8
 8019668:	f04f 0800 	mov.w	r8, #0
 801966c:	459b      	cmp	fp, r3
 801966e:	bf0c      	ite	eq
 8019670:	f8df b0b8 	ldreq.w	fp, [pc, #184]	@ 801972c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x404>
 8019674:	f8df b0b0 	ldrne.w	fp, [pc, #176]	@ 8019728 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x400>
 8019678:	eb0b 0288 	add.w	r2, fp, r8, lsl #2
 801967c:	4633      	mov	r3, r6
 801967e:	3b01      	subs	r3, #1
 8019680:	f842 4b04 	str.w	r4, [r2], #4
 8019684:	d1fb      	bne.n	801967e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x356>
 8019686:	44b0      	add	r8, r6
 8019688:	9e03      	ldr	r6, [sp, #12]
 801968a:	e7ac      	b.n	80195e6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2be>
 801968c:	1aed      	subs	r5, r5, r3
 801968e:	e73f      	b.n	8019510 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x1e8>
 8019690:	9b01      	ldr	r3, [sp, #4]
 8019692:	42ab      	cmp	r3, r5
 8019694:	bfa8      	it	ge
 8019696:	462b      	movge	r3, r5
 8019698:	4698      	mov	r8, r3
 801969a:	9b01      	ldr	r3, [sp, #4]
 801969c:	eba3 0a08 	sub.w	sl, r3, r8
 80196a0:	0e23      	lsrs	r3, r4, #24
 80196a2:	eba5 0508 	sub.w	r5, r5, r8
 80196a6:	d00b      	beq.n	80196c0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x398>
 80196a8:	9a05      	ldr	r2, [sp, #20]
 80196aa:	4641      	mov	r1, r8
 80196ac:	4638      	mov	r0, r7
 80196ae:	4353      	muls	r3, r2
 80196b0:	1c5a      	adds	r2, r3, #1
 80196b2:	eb02 2323 	add.w	r3, r2, r3, asr #8
 80196b6:	4622      	mov	r2, r4
 80196b8:	f3c3 2307 	ubfx	r3, r3, #8, #8
 80196bc:	f7e9 fe1e 	bl	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 80196c0:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 80196c4:	4447      	add	r7, r8
 80196c6:	e78c      	b.n	80195e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80196c8:	f8dd a004 	ldr.w	sl, [sp, #4]
 80196cc:	4646      	mov	r6, r8
 80196ce:	e788      	b.n	80195e2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x2ba>
 80196d0:	2bff      	cmp	r3, #255	@ 0xff
 80196d2:	d11d      	bne.n	8019710 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x3e8>
 80196d4:	7870      	ldrb	r0, [r6, #1]
 80196d6:	1d73      	adds	r3, r6, #5
 80196d8:	78b2      	ldrb	r2, [r6, #2]
 80196da:	b2c0      	uxtb	r0, r0
 80196dc:	78f5      	ldrb	r5, [r6, #3]
 80196de:	b2d2      	uxtb	r2, r2
 80196e0:	9303      	str	r3, [sp, #12]
 80196e2:	f360 0407 	bfi	r4, r0, #0, #8
 80196e6:	7933      	ldrb	r3, [r6, #4]
 80196e8:	b2ed      	uxtb	r5, r5
 80196ea:	b2d9      	uxtb	r1, r3
 80196ec:	f362 240f 	bfi	r4, r2, #8, #8
 80196f0:	2303      	movs	r3, #3
 80196f2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80196f6:	f365 4417 	bfi	r4, r5, #16, #8
 80196fa:	fb13 2205 	smlabb	r2, r3, r5, r2
 80196fe:	2307      	movs	r3, #7
 8019700:	f361 641f 	bfi	r4, r1, #24, #8
 8019704:	fb13 2000 	smlabb	r0, r3, r0, r2
 8019708:	230b      	movs	r3, #11
 801970a:	fb13 0301 	smlabb	r3, r3, r1, r0
 801970e:	e78e      	b.n	801962e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x306>
 8019710:	119d      	asrs	r5, r3, #6
 8019712:	d10d      	bne.n	8019730 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x408>
 8019714:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019718:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 801971c:	685c      	ldr	r4, [r3, #4]
 801971e:	e78b      	b.n	8019638 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 8019720:	240253a8 	.word	0x240253a8
 8019724:	240253a2 	.word	0x240253a2
 8019728:	24000180 	.word	0x24000180
 801972c:	24000280 	.word	0x24000280
 8019730:	2d01      	cmp	r5, #1
 8019732:	d12a      	bne.n	801978a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x462>
 8019734:	f003 0203 	and.w	r2, r3, #3
 8019738:	1ea1      	subs	r1, r4, #2
 801973a:	2603      	movs	r6, #3
 801973c:	4411      	add	r1, r2
 801973e:	f3c3 0281 	ubfx	r2, r3, #2, #2
 8019742:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019746:	b2c9      	uxtb	r1, r1
 8019748:	3a02      	subs	r2, #2
 801974a:	3b02      	subs	r3, #2
 801974c:	f361 0407 	bfi	r4, r1, #0, #8
 8019750:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 8019754:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8019758:	f362 240f 	bfi	r4, r2, #8, #8
 801975c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 8019760:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8019764:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8019768:	fb16 2203 	smlabb	r2, r6, r3, r2
 801976c:	f363 4417 	bfi	r4, r3, #16, #8
 8019770:	2307      	movs	r3, #7
 8019772:	0e20      	lsrs	r0, r4, #24
 8019774:	fb13 2101 	smlabb	r1, r3, r1, r2
 8019778:	230b      	movs	r3, #11
 801977a:	fb13 1300 	smlabb	r3, r3, r0, r1
 801977e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019782:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019786:	605c      	str	r4, [r3, #4]
 8019788:	e757      	b.n	801963a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x312>
 801978a:	2d02      	cmp	r5, #2
 801978c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019790:	d12f      	bne.n	80197f2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4ca>
 8019792:	1cb2      	adds	r2, r6, #2
 8019794:	f1a3 0020 	sub.w	r0, r3, #32
 8019798:	9203      	str	r2, [sp, #12]
 801979a:	7872      	ldrb	r2, [r6, #1]
 801979c:	b2d2      	uxtb	r2, r2
 801979e:	f002 010f 	and.w	r1, r2, #15
 80197a2:	1112      	asrs	r2, r2, #4
 80197a4:	3908      	subs	r1, #8
 80197a6:	3a08      	subs	r2, #8
 80197a8:	4401      	add	r1, r0
 80197aa:	4402      	add	r2, r0
 80197ac:	4421      	add	r1, r4
 80197ae:	b2c9      	uxtb	r1, r1
 80197b0:	f361 0407 	bfi	r4, r1, #0, #8
 80197b4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80197b8:	3d20      	subs	r5, #32
 80197ba:	442b      	add	r3, r5
 80197bc:	2503      	movs	r5, #3
 80197be:	b2db      	uxtb	r3, r3
 80197c0:	f363 240f 	bfi	r4, r3, #8, #8
 80197c4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 80197c8:	eb02 4214 	add.w	r2, r2, r4, lsr #16
 80197cc:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 80197d0:	fb15 3302 	smlabb	r3, r5, r2, r3
 80197d4:	f362 4417 	bfi	r4, r2, #16, #8
 80197d8:	2207      	movs	r2, #7
 80197da:	0e20      	lsrs	r0, r4, #24
 80197dc:	fb12 3201 	smlabb	r2, r2, r1, r3
 80197e0:	210b      	movs	r1, #11
 80197e2:	fb11 2100 	smlabb	r1, r1, r0, r2
 80197e6:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 80197ea:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80197ee:	604c      	str	r4, [r1, #4]
 80197f0:	e722      	b.n	8019638 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x310>
 80197f2:	1c5d      	adds	r5, r3, #1
 80197f4:	4656      	mov	r6, sl
 80197f6:	45aa      	cmp	sl, r5
 80197f8:	bfa8      	it	ge
 80197fa:	462e      	movge	r6, r5
 80197fc:	e71e      	b.n	801963c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x314>
 80197fe:	f1b8 0f00 	cmp.w	r8, #0
 8019802:	d00d      	beq.n	8019820 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x4f8>
 8019804:	ea4f 0188 	mov.w	r1, r8, lsl #2
 8019808:	4658      	mov	r0, fp
 801980a:	f7e9 fd5d 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 801980e:	4642      	mov	r2, r8
 8019810:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 8019814:	4638      	mov	r0, r7
 8019816:	9b05      	ldr	r3, [sp, #20]
 8019818:	4659      	mov	r1, fp
 801981a:	4447      	add	r7, r8
 801981c:	f7e9 fdbc 	bl	8003398 <_ZN8touchgfx5paint6rgb88816lineFromARGB8888EPhPKmjh>
 8019820:	4b1d      	ldr	r3, [pc, #116]	@ (8019898 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x570>)
 8019822:	9a01      	ldr	r2, [sp, #4]
 8019824:	881b      	ldrh	r3, [r3, #0]
 8019826:	1a9b      	subs	r3, r3, r2
 8019828:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801982c:	441f      	add	r7, r3
 801982e:	9b04      	ldr	r3, [sp, #16]
 8019830:	3301      	adds	r3, #1
 8019832:	9304      	str	r3, [sp, #16]
 8019834:	9a04      	ldr	r2, [sp, #16]
 8019836:	9b00      	ldr	r3, [sp, #0]
 8019838:	4293      	cmp	r3, r2
 801983a:	d11d      	bne.n	8019878 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x550>
 801983c:	9b02      	ldr	r3, [sp, #8]
 801983e:	2400      	movs	r4, #0
 8019840:	9a02      	ldr	r2, [sp, #8]
 8019842:	f103 0801 	add.w	r8, r3, #1
 8019846:	9b06      	ldr	r3, [sp, #24]
 8019848:	f8bd 5030 	ldrh.w	r5, [sp, #48]	@ 0x30
 801984c:	4621      	mov	r1, r4
 801984e:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 8019852:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019856:	9b07      	ldr	r3, [sp, #28]
 8019858:	ba36      	rev	r6, r6
 801985a:	9808      	ldr	r0, [sp, #32]
 801985c:	441e      	add	r6, r3
 801985e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 8019862:	1aed      	subs	r5, r5, r3
 8019864:	f008 f9f4 	bl	8021c50 <memset>
 8019868:	f8cd 8008 	str.w	r8, [sp, #8]
 801986c:	b2ad      	uxth	r5, r5
 801986e:	9404      	str	r4, [sp, #16]
 8019870:	f7e9 fd20 	bl	80032b4 <_ZN8touchgfx5paint8tearDownEv>
 8019874:	46b0      	mov	r8, r6
 8019876:	e5df      	b.n	8019438 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x110>
 8019878:	f8bd 302c 	ldrh.w	r3, [sp, #44]	@ 0x2c
 801987c:	9a01      	ldr	r2, [sp, #4]
 801987e:	1a9b      	subs	r3, r3, r2
 8019880:	1b5d      	subs	r5, r3, r5
 8019882:	b2ad      	uxth	r5, r5
 8019884:	e7f4      	b.n	8019870 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x548>
 8019886:	4b05      	ldr	r3, [pc, #20]	@ (801989c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI16blitCopyARGB8888EPKhRKNS_4RectES6_h+0x574>)
 8019888:	6818      	ldr	r0, [r3, #0]
 801988a:	6803      	ldr	r3, [r0, #0]
 801988c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801988e:	4798      	blx	r3
 8019890:	b00f      	add	sp, #60	@ 0x3c
 8019892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019896:	bf00      	nop
 8019898:	240253a2 	.word	0x240253a2
 801989c:	240253a8 	.word	0x240253a8

080198a0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h>:
 80198a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80198a4:	b093      	sub	sp, #76	@ 0x4c
 80198a6:	460d      	mov	r5, r1
 80198a8:	4616      	mov	r6, r2
 80198aa:	f89d b070 	ldrb.w	fp, [sp, #112]	@ 0x70
 80198ae:	9000      	str	r0, [sp, #0]
 80198b0:	f1bb 0f00 	cmp.w	fp, #0
 80198b4:	f000 82ac 	beq.w	8019e10 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x570>
 80198b8:	6810      	ldr	r0, [r2, #0]
 80198ba:	ac0e      	add	r4, sp, #56	@ 0x38
 80198bc:	6851      	ldr	r1, [r2, #4]
 80198be:	c403      	stmia	r4!, {r0, r1}
 80198c0:	6818      	ldr	r0, [r3, #0]
 80198c2:	ac10      	add	r4, sp, #64	@ 0x40
 80198c4:	6859      	ldr	r1, [r3, #4]
 80198c6:	c403      	stmia	r4!, {r0, r1}
 80198c8:	a80e      	add	r0, sp, #56	@ 0x38
 80198ca:	f7f9 fc41 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80198ce:	4631      	mov	r1, r6
 80198d0:	a810      	add	r0, sp, #64	@ 0x40
 80198d2:	f7f9 fc65 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80198d6:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 80198da:	f5b2 6f80 	cmp.w	r2, #1024	@ 0x400
 80198de:	bfdb      	ittet	le
 80198e0:	b293      	uxthle	r3, r2
 80198e2:	f44f 6180 	movle.w	r1, #1024	@ 0x400
 80198e6:	2301      	movgt	r3, #1
 80198e8:	fb91 f3f3 	sdivle	r3, r1, r3
 80198ec:	9301      	str	r3, [sp, #4]
 80198ee:	f105 0308 	add.w	r3, r5, #8
 80198f2:	9901      	ldr	r1, [sp, #4]
 80198f4:	9305      	str	r3, [sp, #20]
 80198f6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 80198fa:	440b      	add	r3, r1
 80198fc:	3b01      	subs	r3, #1
 80198fe:	fb93 f3f1 	sdiv	r3, r3, r1
 8019902:	3b01      	subs	r3, #1
 8019904:	9905      	ldr	r1, [sp, #20]
 8019906:	b29b      	uxth	r3, r3
 8019908:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801990c:	9901      	ldr	r1, [sp, #4]
 801990e:	9306      	str	r3, [sp, #24]
 8019910:	f9bd 3042 	ldrsh.w	r3, [sp, #66]	@ 0x42
 8019914:	fb93 f0f1 	sdiv	r0, r3, r1
 8019918:	b284      	uxth	r4, r0
 801991a:	f8bd 1040 	ldrh.w	r1, [sp, #64]	@ 0x40
 801991e:	9403      	str	r4, [sp, #12]
 8019920:	9d03      	ldr	r5, [sp, #12]
 8019922:	9c01      	ldr	r4, [sp, #4]
 8019924:	fb05 3714 	mls	r7, r5, r4, r3
 8019928:	fb17 f702 	smulbb	r7, r7, r2
 801992c:	440f      	add	r7, r1
 801992e:	b2bf      	uxth	r7, r7
 8019930:	2d00      	cmp	r5, #0
 8019932:	d06b      	beq.n	8019a0c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x16c>
 8019934:	1e6a      	subs	r2, r5, #1
 8019936:	9805      	ldr	r0, [sp, #20]
 8019938:	f850 9022 	ldr.w	r9, [r0, r2, lsl #2]
 801993c:	9a06      	ldr	r2, [sp, #24]
 801993e:	fa99 f989 	rev.w	r9, r9
 8019942:	4491      	add	r9, r2
 8019944:	f8bd 2038 	ldrh.w	r2, [sp, #56]	@ 0x38
 8019948:	f9bd 5046 	ldrsh.w	r5, [sp, #70]	@ 0x46
 801994c:	4411      	add	r1, r2
 801994e:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 8019952:	f8df a35c 	ldr.w	sl, [pc, #860]	@ 8019cb0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x410>
 8019956:	4413      	add	r3, r2
 8019958:	f8ad 1040 	strh.w	r1, [sp, #64]	@ 0x40
 801995c:	f8ad 3042 	strh.w	r3, [sp, #66]	@ 0x42
 8019960:	f9bd 3044 	ldrsh.w	r3, [sp, #68]	@ 0x44
 8019964:	9302      	str	r3, [sp, #8]
 8019966:	4bd0      	ldr	r3, [pc, #832]	@ (8019ca8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x408>)
 8019968:	6818      	ldr	r0, [r3, #0]
 801996a:	6803      	ldr	r3, [r0, #0]
 801996c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801996e:	4798      	blx	r3
 8019970:	4bce      	ldr	r3, [pc, #824]	@ (8019cac <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x40c>)
 8019972:	f9bd 2040 	ldrsh.w	r2, [sp, #64]	@ 0x40
 8019976:	881b      	ldrh	r3, [r3, #0]
 8019978:	f9bd 4042 	ldrsh.w	r4, [sp, #66]	@ 0x42
 801997c:	fb03 2404 	mla	r4, r3, r4, r2
 8019980:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019984:	436b      	muls	r3, r5
 8019986:	2500      	movs	r5, #0
 8019988:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801998c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019990:	4629      	mov	r1, r5
 8019992:	4404      	add	r4, r0
 8019994:	18e3      	adds	r3, r4, r3
 8019996:	930d      	str	r3, [sp, #52]	@ 0x34
 8019998:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801999c:	fb97 f3f3 	sdiv	r3, r7, r3
 80199a0:	9304      	str	r3, [sp, #16]
 80199a2:	9b00      	ldr	r3, [sp, #0]
 80199a4:	3304      	adds	r3, #4
 80199a6:	4618      	mov	r0, r3
 80199a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80199aa:	f008 f951 	bl	8021c50 <memset>
 80199ae:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80199b0:	42a3      	cmp	r3, r4
 80199b2:	f240 8228 	bls.w	8019e06 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x566>
 80199b6:	2003      	movs	r0, #3
 80199b8:	2607      	movs	r6, #7
 80199ba:	2f00      	cmp	r7, #0
 80199bc:	f000 80cb 	beq.w	8019b56 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2b6>
 80199c0:	f899 3000 	ldrb.w	r3, [r9]
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	2bfe      	cmp	r3, #254	@ 0xfe
 80199c8:	d123      	bne.n	8019a12 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x172>
 80199ca:	f899 3001 	ldrb.w	r3, [r9, #1]
 80199ce:	3f01      	subs	r7, #1
 80199d0:	f899 2002 	ldrb.w	r2, [r9, #2]
 80199d4:	f109 0804 	add.w	r8, r9, #4
 80199d8:	b2db      	uxtb	r3, r3
 80199da:	f899 1003 	ldrb.w	r1, [r9, #3]
 80199de:	b2d2      	uxtb	r2, r2
 80199e0:	f363 0507 	bfi	r5, r3, #0, #8
 80199e4:	b2c9      	uxtb	r1, r1
 80199e6:	b2bf      	uxth	r7, r7
 80199e8:	f362 250f 	bfi	r5, r2, #8, #8
 80199ec:	eb02 0282 	add.w	r2, r2, r2, lsl #2
 80199f0:	fb10 2201 	smlabb	r2, r0, r1, r2
 80199f4:	f361 4517 	bfi	r5, r1, #16, #8
 80199f8:	fb16 2303 	smlabb	r3, r6, r3, r2
 80199fc:	9a00      	ldr	r2, [sp, #0]
 80199fe:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019a02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a06:	605d      	str	r5, [r3, #4]
 8019a08:	46c1      	mov	r9, r8
 8019a0a:	e7d6      	b.n	80199ba <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x11a>
 8019a0c:	f8dd 9018 	ldr.w	r9, [sp, #24]
 8019a10:	e798      	b.n	8019944 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0xa4>
 8019a12:	119a      	asrs	r2, r3, #6
 8019a14:	f109 0801 	add.w	r8, r9, #1
 8019a18:	d108      	bne.n	8019a2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x18c>
 8019a1a:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019a1e:	9a00      	ldr	r2, [sp, #0]
 8019a20:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019a24:	685d      	ldr	r5, [r3, #4]
 8019a26:	3f01      	subs	r7, #1
 8019a28:	b2bf      	uxth	r7, r7
 8019a2a:	e7ed      	b.n	8019a08 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x168>
 8019a2c:	2a01      	cmp	r2, #1
 8019a2e:	d125      	bne.n	8019a7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x1dc>
 8019a30:	f003 0103 	and.w	r1, r3, #3
 8019a34:	1eaa      	subs	r2, r5, #2
 8019a36:	440a      	add	r2, r1
 8019a38:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8019a3c:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019a40:	b2d2      	uxtb	r2, r2
 8019a42:	3902      	subs	r1, #2
 8019a44:	3b02      	subs	r3, #2
 8019a46:	f362 0507 	bfi	r5, r2, #0, #8
 8019a4a:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8019a4e:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8019a52:	f361 250f 	bfi	r5, r1, #8, #8
 8019a56:	eb01 0181 	add.w	r1, r1, r1, lsl #2
 8019a5a:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8019a5e:	f003 03ff 	and.w	r3, r3, #255	@ 0xff
 8019a62:	fb10 1103 	smlabb	r1, r0, r3, r1
 8019a66:	f363 4517 	bfi	r5, r3, #16, #8
 8019a6a:	9b00      	ldr	r3, [sp, #0]
 8019a6c:	fb16 1202 	smlabb	r2, r6, r2, r1
 8019a70:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 8019a74:	eb03 0282 	add.w	r2, r3, r2, lsl #2
 8019a78:	6055      	str	r5, [r2, #4]
 8019a7a:	e7d4      	b.n	8019a26 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8019a7c:	2a02      	cmp	r2, #2
 8019a7e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019a82:	d12c      	bne.n	8019ade <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x23e>
 8019a84:	f899 2001 	ldrb.w	r2, [r9, #1]
 8019a88:	f1a3 0c20 	sub.w	ip, r3, #32
 8019a8c:	f109 0802 	add.w	r8, r9, #2
 8019a90:	b2d2      	uxtb	r2, r2
 8019a92:	f002 010f 	and.w	r1, r2, #15
 8019a96:	1112      	asrs	r2, r2, #4
 8019a98:	3908      	subs	r1, #8
 8019a9a:	3a08      	subs	r2, #8
 8019a9c:	4461      	add	r1, ip
 8019a9e:	4494      	add	ip, r2
 8019aa0:	4429      	add	r1, r5
 8019aa2:	b2c9      	uxtb	r1, r1
 8019aa4:	f361 0507 	bfi	r5, r1, #0, #8
 8019aa8:	f3c5 2e07 	ubfx	lr, r5, #8, #8
 8019aac:	f1ae 0e20 	sub.w	lr, lr, #32
 8019ab0:	4473      	add	r3, lr
 8019ab2:	b2db      	uxtb	r3, r3
 8019ab4:	f363 250f 	bfi	r5, r3, #8, #8
 8019ab8:	eb03 0383 	add.w	r3, r3, r3, lsl #2
 8019abc:	eb0c 4c15 	add.w	ip, ip, r5, lsr #16
 8019ac0:	f00c 0cff 	and.w	ip, ip, #255	@ 0xff
 8019ac4:	fb10 330c 	smlabb	r3, r0, ip, r3
 8019ac8:	f36c 4517 	bfi	r5, ip, #16, #8
 8019acc:	fb16 3101 	smlabb	r1, r6, r1, r3
 8019ad0:	9b00      	ldr	r3, [sp, #0]
 8019ad2:	f001 013f 	and.w	r1, r1, #63	@ 0x3f
 8019ad6:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019ada:	604d      	str	r5, [r1, #4]
 8019adc:	e7a3      	b.n	8019a26 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x186>
 8019ade:	3301      	adds	r3, #1
 8019ae0:	42bb      	cmp	r3, r7
 8019ae2:	dd23      	ble.n	8019b2c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x28c>
 8019ae4:	eba3 0907 	sub.w	r9, r3, r7
 8019ae8:	f1b9 0f00 	cmp.w	r9, #0
 8019aec:	dc20      	bgt.n	8019b30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x290>
 8019aee:	9e02      	ldr	r6, [sp, #8]
 8019af0:	2700      	movs	r7, #0
 8019af2:	2e00      	cmp	r6, #0
 8019af4:	f340 8142 	ble.w	8019d7c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4dc>
 8019af8:	f108 0301 	add.w	r3, r8, #1
 8019afc:	9307      	str	r3, [sp, #28]
 8019afe:	f898 3000 	ldrb.w	r3, [r8]
 8019b02:	b2db      	uxtb	r3, r3
 8019b04:	119a      	asrs	r2, r3, #6
 8019b06:	d12a      	bne.n	8019b5e <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x2be>
 8019b08:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019b0c:	9a00      	ldr	r2, [sp, #0]
 8019b0e:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019b12:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019b16:	685d      	ldr	r5, [r3, #4]
 8019b18:	f040 811f 	bne.w	8019d5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019b1c:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019b20:	7025      	strb	r5, [r4, #0]
 8019b22:	7063      	strb	r3, [r4, #1]
 8019b24:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019b28:	70a3      	strb	r3, [r4, #2]
 8019b2a:	e04e      	b.n	8019bca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019b2c:	1aff      	subs	r7, r7, r3
 8019b2e:	e77b      	b.n	8019a28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x188>
 8019b30:	9b02      	ldr	r3, [sp, #8]
 8019b32:	4620      	mov	r0, r4
 8019b34:	462a      	mov	r2, r5
 8019b36:	454b      	cmp	r3, r9
 8019b38:	bfa8      	it	ge
 8019b3a:	464b      	movge	r3, r9
 8019b3c:	461f      	mov	r7, r3
 8019b3e:	9b02      	ldr	r3, [sp, #8]
 8019b40:	4639      	mov	r1, r7
 8019b42:	1bde      	subs	r6, r3, r7
 8019b44:	eba9 0907 	sub.w	r9, r9, r7
 8019b48:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 8019b4c:	465b      	mov	r3, fp
 8019b4e:	f7e9 fbd5 	bl	80032fc <_ZN8touchgfx5paint6rgb88813lineFromColorEPhjmh>
 8019b52:	443c      	add	r4, r7
 8019b54:	e7cc      	b.n	8019af0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8019b56:	46c8      	mov	r8, r9
 8019b58:	9e02      	ldr	r6, [sp, #8]
 8019b5a:	46b9      	mov	r9, r7
 8019b5c:	e7c8      	b.n	8019af0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x250>
 8019b5e:	2a01      	cmp	r2, #1
 8019b60:	d136      	bne.n	8019bd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x330>
 8019b62:	f003 0103 	and.w	r1, r3, #3
 8019b66:	1ea8      	subs	r0, r5, #2
 8019b68:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019b6c:	4408      	add	r0, r1
 8019b6e:	f3c3 0181 	ubfx	r1, r3, #2, #2
 8019b72:	f3c3 1301 	ubfx	r3, r3, #4, #2
 8019b76:	b2c0      	uxtb	r0, r0
 8019b78:	f1a1 0102 	sub.w	r1, r1, #2
 8019b7c:	f1a3 0302 	sub.w	r3, r3, #2
 8019b80:	f360 0507 	bfi	r5, r0, #0, #8
 8019b84:	eb01 2115 	add.w	r1, r1, r5, lsr #8
 8019b88:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8019b8c:	f361 250f 	bfi	r5, r1, #8, #8
 8019b90:	eb01 0c81 	add.w	ip, r1, r1, lsl #2
 8019b94:	eb03 4315 	add.w	r3, r3, r5, lsr #16
 8019b98:	f003 08ff 	and.w	r8, r3, #255	@ 0xff
 8019b9c:	f04f 0303 	mov.w	r3, #3
 8019ba0:	fb13 ce08 	smlabb	lr, r3, r8, ip
 8019ba4:	f04f 0c07 	mov.w	ip, #7
 8019ba8:	9b00      	ldr	r3, [sp, #0]
 8019baa:	f368 4517 	bfi	r5, r8, #16, #8
 8019bae:	fb1c ec00 	smlabb	ip, ip, r0, lr
 8019bb2:	f00c 0c3f 	and.w	ip, ip, #63	@ 0x3f
 8019bb6:	eb03 0c8c 	add.w	ip, r3, ip, lsl #2
 8019bba:	f8cc 5004 	str.w	r5, [ip, #4]
 8019bbe:	f040 80cd 	bne.w	8019d5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8019bc2:	7020      	strb	r0, [r4, #0]
 8019bc4:	7061      	strb	r1, [r4, #1]
 8019bc6:	f884 8002 	strb.w	r8, [r4, #2]
 8019bca:	3e01      	subs	r6, #1
 8019bcc:	3403      	adds	r4, #3
 8019bce:	e0c1      	b.n	8019d54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8019bd0:	2a02      	cmp	r2, #2
 8019bd2:	d13d      	bne.n	8019c50 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x3b0>
 8019bd4:	f898 1001 	ldrb.w	r1, [r8, #1]
 8019bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019bdc:	f108 0202 	add.w	r2, r8, #2
 8019be0:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019be4:	b2c9      	uxtb	r1, r1
 8019be6:	f1a3 0c20 	sub.w	ip, r3, #32
 8019bea:	9207      	str	r2, [sp, #28]
 8019bec:	f001 000f 	and.w	r0, r1, #15
 8019bf0:	f1a0 0008 	sub.w	r0, r0, #8
 8019bf4:	4460      	add	r0, ip
 8019bf6:	4428      	add	r0, r5
 8019bf8:	b2c0      	uxtb	r0, r0
 8019bfa:	f360 0507 	bfi	r5, r0, #0, #8
 8019bfe:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8019c02:	f1a2 0220 	sub.w	r2, r2, #32
 8019c06:	4413      	add	r3, r2
 8019c08:	ea4f 1221 	mov.w	r2, r1, asr #4
 8019c0c:	b2db      	uxtb	r3, r3
 8019c0e:	f1a2 0208 	sub.w	r2, r2, #8
 8019c12:	f363 250f 	bfi	r5, r3, #8, #8
 8019c16:	4462      	add	r2, ip
 8019c18:	eb03 0183 	add.w	r1, r3, r3, lsl #2
 8019c1c:	f04f 0c03 	mov.w	ip, #3
 8019c20:	eb02 4215 	add.w	r2, r2, r5, lsr #16
 8019c24:	f002 02ff 	and.w	r2, r2, #255	@ 0xff
 8019c28:	fb1c 1c02 	smlabb	ip, ip, r2, r1
 8019c2c:	f04f 0107 	mov.w	r1, #7
 8019c30:	f362 4517 	bfi	r5, r2, #16, #8
 8019c34:	fb11 c100 	smlabb	r1, r1, r0, ip
 8019c38:	f001 0c3f 	and.w	ip, r1, #63	@ 0x3f
 8019c3c:	9900      	ldr	r1, [sp, #0]
 8019c3e:	eb01 018c 	add.w	r1, r1, ip, lsl #2
 8019c42:	604d      	str	r5, [r1, #4]
 8019c44:	f040 8089 	bne.w	8019d5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019c48:	7020      	strb	r0, [r4, #0]
 8019c4a:	7063      	strb	r3, [r4, #1]
 8019c4c:	70a2      	strb	r2, [r4, #2]
 8019c4e:	e7bc      	b.n	8019bca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019c50:	2bfe      	cmp	r3, #254	@ 0xfe
 8019c52:	d12f      	bne.n	8019cb4 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x414>
 8019c54:	f898 0001 	ldrb.w	r0, [r8, #1]
 8019c58:	f108 0304 	add.w	r3, r8, #4
 8019c5c:	f898 2002 	ldrb.w	r2, [r8, #2]
 8019c60:	f04f 0c03 	mov.w	ip, #3
 8019c64:	f898 1003 	ldrb.w	r1, [r8, #3]
 8019c68:	b2c0      	uxtb	r0, r0
 8019c6a:	b2d2      	uxtb	r2, r2
 8019c6c:	9307      	str	r3, [sp, #28]
 8019c6e:	b2c9      	uxtb	r1, r1
 8019c70:	f360 0507 	bfi	r5, r0, #0, #8
 8019c74:	eb02 0382 	add.w	r3, r2, r2, lsl #2
 8019c78:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019c7c:	f362 250f 	bfi	r5, r2, #8, #8
 8019c80:	fb1c 3c01 	smlabb	ip, ip, r1, r3
 8019c84:	f04f 0307 	mov.w	r3, #7
 8019c88:	f361 4517 	bfi	r5, r1, #16, #8
 8019c8c:	fb13 c300 	smlabb	r3, r3, r0, ip
 8019c90:	f003 0c3f 	and.w	ip, r3, #63	@ 0x3f
 8019c94:	9b00      	ldr	r3, [sp, #0]
 8019c96:	eb03 038c 	add.w	r3, r3, ip, lsl #2
 8019c9a:	605d      	str	r5, [r3, #4]
 8019c9c:	d15d      	bne.n	8019d5a <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4ba>
 8019c9e:	7020      	strb	r0, [r4, #0]
 8019ca0:	7062      	strb	r2, [r4, #1]
 8019ca2:	70a1      	strb	r1, [r4, #2]
 8019ca4:	e791      	b.n	8019bca <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x32a>
 8019ca6:	bf00      	nop
 8019ca8:	240253a8 	.word	0x240253a8
 8019cac:	240253a2 	.word	0x240253a2
 8019cb0:	24000180 	.word	0x24000180
 8019cb4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8019cb8:	1c5a      	adds	r2, r3, #1
 8019cba:	b94b      	cbnz	r3, 8019cd0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x430>
 8019cbc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019cc0:	d14c      	bne.n	8019d5c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4bc>
 8019cc2:	f3c5 2207 	ubfx	r2, r5, #8, #8
 8019cc6:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019cca:	7025      	strb	r5, [r4, #0]
 8019ccc:	7062      	strb	r2, [r4, #1]
 8019cce:	e72b      	b.n	8019b28 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x288>
 8019cd0:	4296      	cmp	r6, r2
 8019cd2:	46b0      	mov	r8, r6
 8019cd4:	bfa8      	it	ge
 8019cd6:	4690      	movge	r8, r2
 8019cd8:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 8019cdc:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019ce0:	eba6 0608 	sub.w	r6, r6, r8
 8019ce4:	eba2 0908 	sub.w	r9, r2, r8
 8019ce8:	9308      	str	r3, [sp, #32]
 8019cea:	b2eb      	uxtb	r3, r5
 8019cec:	930c      	str	r3, [sp, #48]	@ 0x30
 8019cee:	f3c5 2307 	ubfx	r3, r5, #8, #8
 8019cf2:	930b      	str	r3, [sp, #44]	@ 0x2c
 8019cf4:	f3c5 4307 	ubfx	r3, r5, #16, #8
 8019cf8:	930a      	str	r3, [sp, #40]	@ 0x28
 8019cfa:	9b08      	ldr	r3, [sp, #32]
 8019cfc:	d030      	beq.n	8019d60 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c0>
 8019cfe:	18fb      	adds	r3, r7, r3
 8019d00:	2bc0      	cmp	r3, #192	@ 0xc0
 8019d02:	dd15      	ble.n	8019d30 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x490>
 8019d04:	4650      	mov	r0, sl
 8019d06:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8019d0a:	f7e9 fadd 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 8019d0e:	2203      	movs	r2, #3
 8019d10:	4651      	mov	r1, sl
 8019d12:	465b      	mov	r3, fp
 8019d14:	4620      	mov	r0, r4
 8019d16:	443c      	add	r4, r7
 8019d18:	fb97 f2f2 	sdiv	r2, r7, r2
 8019d1c:	f7e9 fb18 	bl	8003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8019d20:	4b3d      	ldr	r3, [pc, #244]	@ (8019e18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>)
 8019d22:	2700      	movs	r7, #0
 8019d24:	459a      	cmp	sl, r3
 8019d26:	bf0c      	ite	eq
 8019d28:	f8df a0f8 	ldreq.w	sl, [pc, #248]	@ 8019e24 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x584>
 8019d2c:	f8df a0e8 	ldrne.w	sl, [pc, #232]	@ 8019e18 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x578>
 8019d30:	eb0a 0307 	add.w	r3, sl, r7
 8019d34:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019d36:	f1b8 0801 	subs.w	r8, r8, #1
 8019d3a:	f103 0303 	add.w	r3, r3, #3
 8019d3e:	f803 2c03 	strb.w	r2, [r3, #-3]
 8019d42:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019d44:	f803 2c02 	strb.w	r2, [r3, #-2]
 8019d48:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d4a:	f803 2c01 	strb.w	r2, [r3, #-1]
 8019d4e:	d1f1      	bne.n	8019d34 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x494>
 8019d50:	9b08      	ldr	r3, [sp, #32]
 8019d52:	441f      	add	r7, r3
 8019d54:	f8dd 801c 	ldr.w	r8, [sp, #28]
 8019d58:	e6cb      	b.n	8019af2 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x252>
 8019d5a:	2201      	movs	r2, #1
 8019d5c:	4690      	mov	r8, r2
 8019d5e:	e7bb      	b.n	8019cd8 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x438>
 8019d60:	4423      	add	r3, r4
 8019d62:	42a3      	cmp	r3, r4
 8019d64:	d9f6      	bls.n	8019d54 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4b4>
 8019d66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019d68:	3403      	adds	r4, #3
 8019d6a:	f804 2c03 	strb.w	r2, [r4, #-3]
 8019d6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019d70:	f804 2c02 	strb.w	r2, [r4, #-2]
 8019d74:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019d76:	f804 2c01 	strb.w	r2, [r4, #-1]
 8019d7a:	e7f2      	b.n	8019d62 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x4c2>
 8019d7c:	f1bb 0fff 	cmp.w	fp, #255	@ 0xff
 8019d80:	d00e      	beq.n	8019da0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8019d82:	b16f      	cbz	r7, 8019da0 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x500>
 8019d84:	eb07 0147 	add.w	r1, r7, r7, lsl #1
 8019d88:	4650      	mov	r0, sl
 8019d8a:	f7e9 fa9d 	bl	80032c8 <_ZN8touchgfx5paint9flushLineEPmi>
 8019d8e:	2203      	movs	r2, #3
 8019d90:	4620      	mov	r0, r4
 8019d92:	443c      	add	r4, r7
 8019d94:	465b      	mov	r3, fp
 8019d96:	4651      	mov	r1, sl
 8019d98:	fb97 f2f2 	sdiv	r2, r7, r2
 8019d9c:	f7e9 fad8 	bl	8003350 <_ZN8touchgfx5paint6rgb88814lineFromRGB888EPhPKhjh>
 8019da0:	4b1e      	ldr	r3, [pc, #120]	@ (8019e1c <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x57c>)
 8019da2:	9a02      	ldr	r2, [sp, #8]
 8019da4:	881b      	ldrh	r3, [r3, #0]
 8019da6:	1a9b      	subs	r3, r3, r2
 8019da8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019dac:	441c      	add	r4, r3
 8019dae:	9b04      	ldr	r3, [sp, #16]
 8019db0:	3301      	adds	r3, #1
 8019db2:	9304      	str	r3, [sp, #16]
 8019db4:	9a04      	ldr	r2, [sp, #16]
 8019db6:	9b01      	ldr	r3, [sp, #4]
 8019db8:	4293      	cmp	r3, r2
 8019dba:	d11c      	bne.n	8019df6 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x556>
 8019dbc:	9b03      	ldr	r3, [sp, #12]
 8019dbe:	2500      	movs	r5, #0
 8019dc0:	9a03      	ldr	r2, [sp, #12]
 8019dc2:	1c5e      	adds	r6, r3, #1
 8019dc4:	9b05      	ldr	r3, [sp, #20]
 8019dc6:	f8bd 7040 	ldrh.w	r7, [sp, #64]	@ 0x40
 8019dca:	4629      	mov	r1, r5
 8019dcc:	f853 8022 	ldr.w	r8, [r3, r2, lsl #2]
 8019dd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8019dd4:	9b06      	ldr	r3, [sp, #24]
 8019dd6:	fa98 f888 	rev.w	r8, r8
 8019dda:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019ddc:	4498      	add	r8, r3
 8019dde:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 8019de2:	1aff      	subs	r7, r7, r3
 8019de4:	f007 ff34 	bl	8021c50 <memset>
 8019de8:	b2bf      	uxth	r7, r7
 8019dea:	e9cd 6503 	strd	r6, r5, [sp, #12]
 8019dee:	f7e9 fa61 	bl	80032b4 <_ZN8touchgfx5paint8tearDownEv>
 8019df2:	46c1      	mov	r9, r8
 8019df4:	e5db      	b.n	80199ae <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x10e>
 8019df6:	f8bd 703c 	ldrh.w	r7, [sp, #60]	@ 0x3c
 8019dfa:	9b02      	ldr	r3, [sp, #8]
 8019dfc:	1aff      	subs	r7, r7, r3
 8019dfe:	eba7 0709 	sub.w	r7, r7, r9
 8019e02:	b2bf      	uxth	r7, r7
 8019e04:	e7f3      	b.n	8019dee <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x54e>
 8019e06:	4b06      	ldr	r3, [pc, #24]	@ (8019e20 <_ZN8touchgfx8LCD24bpp19DecompressorRGB_QOI14blitCopyRGB888EPKhRKNS_4RectES6_h+0x580>)
 8019e08:	6818      	ldr	r0, [r3, #0]
 8019e0a:	6803      	ldr	r3, [r0, #0]
 8019e0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019e0e:	4798      	blx	r3
 8019e10:	b013      	add	sp, #76	@ 0x4c
 8019e12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019e16:	bf00      	nop
 8019e18:	24000180 	.word	0x24000180
 8019e1c:	240253a2 	.word	0x240253a2
 8019e20:	240253a8 	.word	0x240253a8
 8019e24:	24000280 	.word	0x24000280

08019e28 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh>:
 8019e28:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019e2c:	f89d 001c 	ldrb.w	r0, [sp, #28]
 8019e30:	9c06      	ldr	r4, [sp, #24]
 8019e32:	2800      	cmp	r0, #0
 8019e34:	d06e      	beq.n	8019f14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019e36:	f9b3 5004 	ldrsh.w	r5, [r3, #4]
 8019e3a:	2d00      	cmp	r5, #0
 8019e3c:	dd6a      	ble.n	8019f14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019e3e:	f9b3 c006 	ldrsh.w	ip, [r3, #6]
 8019e42:	f1bc 0f00 	cmp.w	ip, #0
 8019e46:	dd65      	ble.n	8019f14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019e48:	f9b3 6002 	ldrsh.w	r6, [r3, #2]
 8019e4c:	28ff      	cmp	r0, #255	@ 0xff
 8019e4e:	f9b3 3000 	ldrsh.w	r3, [r3]
 8019e52:	f3c4 2707 	ubfx	r7, r4, #8, #8
 8019e56:	fb02 3306 	mla	r3, r2, r6, r3
 8019e5a:	f3c4 4607 	ubfx	r6, r4, #16, #8
 8019e5e:	b2e4      	uxtb	r4, r4
 8019e60:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e64:	4419      	add	r1, r3
 8019e66:	fb02 f30c 	mul.w	r3, r2, ip
 8019e6a:	eba2 0205 	sub.w	r2, r2, r5
 8019e6e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8019e72:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8019e76:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8019e7a:	440b      	add	r3, r1
 8019e7c:	d03e      	beq.n	8019efc <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd4>
 8019e7e:	fa1f fc80 	uxth.w	ip, r0
 8019e82:	f1c0 00ff 	rsb	r0, r0, #255	@ 0xff
 8019e86:	fb06 f60c 	mul.w	r6, r6, ip
 8019e8a:	b280      	uxth	r0, r0
 8019e8c:	fb07 f70c 	mul.w	r7, r7, ip
 8019e90:	fb04 f40c 	mul.w	r4, r4, ip
 8019e94:	4299      	cmp	r1, r3
 8019e96:	d23d      	bcs.n	8019f14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019e98:	eb01 0c05 	add.w	ip, r1, r5
 8019e9c:	458c      	cmp	ip, r1
 8019e9e:	f101 0e03 	add.w	lr, r1, #3
 8019ea2:	d928      	bls.n	8019ef6 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xce>
 8019ea4:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 8019ea8:	fb11 f100 	smulbb	r1, r1, r0
 8019eac:	4421      	add	r1, r4
 8019eae:	b289      	uxth	r1, r1
 8019eb0:	f101 0801 	add.w	r8, r1, #1
 8019eb4:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019eb8:	1209      	asrs	r1, r1, #8
 8019eba:	f80e 1c03 	strb.w	r1, [lr, #-3]
 8019ebe:	f81e 1c02 	ldrb.w	r1, [lr, #-2]
 8019ec2:	fb11 f100 	smulbb	r1, r1, r0
 8019ec6:	4439      	add	r1, r7
 8019ec8:	b289      	uxth	r1, r1
 8019eca:	f101 0801 	add.w	r8, r1, #1
 8019ece:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019ed2:	1209      	asrs	r1, r1, #8
 8019ed4:	f80e 1c02 	strb.w	r1, [lr, #-2]
 8019ed8:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 8019edc:	fb11 f100 	smulbb	r1, r1, r0
 8019ee0:	4431      	add	r1, r6
 8019ee2:	b289      	uxth	r1, r1
 8019ee4:	f101 0801 	add.w	r8, r1, #1
 8019ee8:	eb08 2111 	add.w	r1, r8, r1, lsr #8
 8019eec:	1209      	asrs	r1, r1, #8
 8019eee:	f80e 1c01 	strb.w	r1, [lr, #-1]
 8019ef2:	4671      	mov	r1, lr
 8019ef4:	e7d2      	b.n	8019e9c <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x74>
 8019ef6:	4411      	add	r1, r2
 8019ef8:	e7cc      	b.n	8019e94 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0x6c>
 8019efa:	4411      	add	r1, r2
 8019efc:	4299      	cmp	r1, r3
 8019efe:	d209      	bcs.n	8019f14 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xec>
 8019f00:	1948      	adds	r0, r1, r5
 8019f02:	4281      	cmp	r1, r0
 8019f04:	d2f9      	bcs.n	8019efa <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xd2>
 8019f06:	700c      	strb	r4, [r1, #0]
 8019f08:	3103      	adds	r1, #3
 8019f0a:	f801 7c02 	strb.w	r7, [r1, #-2]
 8019f0e:	f801 6c01 	strb.w	r6, [r1, #-1]
 8019f12:	e7f6      	b.n	8019f02 <_ZN8touchgfx8LCD24bpp10fillBufferEPhtRKNS_4RectENS_9colortypeEh+0xda>
 8019f14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08019f18 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss>:
 8019f18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019f1c:	b093      	sub	sp, #76	@ 0x4c
 8019f1e:	4699      	mov	r9, r3
 8019f20:	4617      	mov	r7, r2
 8019f22:	f9b3 2000 	ldrsh.w	r2, [r3]
 8019f26:	f9bd 8074 	ldrsh.w	r8, [sp, #116]	@ 0x74
 8019f2a:	4604      	mov	r4, r0
 8019f2c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8019f30:	a80c      	add	r0, sp, #48	@ 0x30
 8019f32:	f9bd 6078 	ldrsh.w	r6, [sp, #120]	@ 0x78
 8019f36:	460d      	mov	r5, r1
 8019f38:	4649      	mov	r1, r9
 8019f3a:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8019f3e:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 8019f42:	f8ad 8034 	strh.w	r8, [sp, #52]	@ 0x34
 8019f46:	f8ad 6036 	strh.w	r6, [sp, #54]	@ 0x36
 8019f4a:	f7f4 ffbb 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 8019f4e:	4639      	mov	r1, r7
 8019f50:	a80c      	add	r0, sp, #48	@ 0x30
 8019f52:	f7f4 ffb7 	bl	800eec4 <_ZN8touchgfx4RectaNERKS0_>
 8019f56:	4b78      	ldr	r3, [pc, #480]	@ (801a138 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x220>)
 8019f58:	8818      	ldrh	r0, [r3, #0]
 8019f5a:	4b78      	ldr	r3, [pc, #480]	@ (801a13c <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x224>)
 8019f5c:	b202      	sxth	r2, r0
 8019f5e:	8819      	ldrh	r1, [r3, #0]
 8019f60:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8019f64:	b20f      	sxth	r7, r1
 8019f66:	2b00      	cmp	r3, #0
 8019f68:	da07      	bge.n	8019f7a <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x62>
 8019f6a:	f8bd c034 	ldrh.w	ip, [sp, #52]	@ 0x34
 8019f6e:	4463      	add	r3, ip
 8019f70:	f8ad 3034 	strh.w	r3, [sp, #52]	@ 0x34
 8019f74:	2300      	movs	r3, #0
 8019f76:	f8ad 3030 	strh.w	r3, [sp, #48]	@ 0x30
 8019f7a:	f9bd 3030 	ldrsh.w	r3, [sp, #48]	@ 0x30
 8019f7e:	f9bd c034 	ldrsh.w	ip, [sp, #52]	@ 0x34
 8019f82:	1ad2      	subs	r2, r2, r3
 8019f84:	4594      	cmp	ip, r2
 8019f86:	bfc4      	itt	gt
 8019f88:	1ac2      	subgt	r2, r0, r3
 8019f8a:	f8ad 2034 	strhgt.w	r2, [sp, #52]	@ 0x34
 8019f8e:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019f92:	2a00      	cmp	r2, #0
 8019f94:	da07      	bge.n	8019fa6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x8e>
 8019f96:	f8bd c036 	ldrh.w	ip, [sp, #54]	@ 0x36
 8019f9a:	4462      	add	r2, ip
 8019f9c:	f8ad 2036 	strh.w	r2, [sp, #54]	@ 0x36
 8019fa0:	2200      	movs	r2, #0
 8019fa2:	f8ad 2032 	strh.w	r2, [sp, #50]	@ 0x32
 8019fa6:	f9bd 2032 	ldrsh.w	r2, [sp, #50]	@ 0x32
 8019faa:	f9bd c036 	ldrsh.w	ip, [sp, #54]	@ 0x36
 8019fae:	1abf      	subs	r7, r7, r2
 8019fb0:	45bc      	cmp	ip, r7
 8019fb2:	f8df c190 	ldr.w	ip, [pc, #400]	@ 801a144 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x22c>
 8019fb6:	bfc8      	it	gt
 8019fb8:	1a8f      	subgt	r7, r1, r2
 8019fba:	f89c c000 	ldrb.w	ip, [ip]
 8019fbe:	bfc8      	it	gt
 8019fc0:	f8ad 7036 	strhgt.w	r7, [sp, #54]	@ 0x36
 8019fc4:	f9bd 7034 	ldrsh.w	r7, [sp, #52]	@ 0x34
 8019fc8:	f1bc 0f00 	cmp.w	ip, #0
 8019fcc:	d176      	bne.n	801a0bc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1a4>
 8019fce:	4287      	cmp	r7, r0
 8019fd0:	bf14      	ite	ne
 8019fd2:	2100      	movne	r1, #0
 8019fd4:	2101      	moveq	r1, #1
 8019fd6:	2f00      	cmp	r7, #0
 8019fd8:	9107      	str	r1, [sp, #28]
 8019fda:	dd73      	ble.n	801a0c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8019fdc:	f9bd 1036 	ldrsh.w	r1, [sp, #54]	@ 0x36
 8019fe0:	2900      	cmp	r1, #0
 8019fe2:	9104      	str	r1, [sp, #16]
 8019fe4:	dd6e      	ble.n	801a0c4 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1ac>
 8019fe6:	f8b9 1000 	ldrh.w	r1, [r9]
 8019fea:	a80e      	add	r0, sp, #56	@ 0x38
 8019fec:	f8ad 8044 	strh.w	r8, [sp, #68]	@ 0x44
 8019ff0:	f10d 0830 	add.w	r8, sp, #48	@ 0x30
 8019ff4:	1a5b      	subs	r3, r3, r1
 8019ff6:	a910      	add	r1, sp, #64	@ 0x40
 8019ff8:	f8ad 6046 	strh.w	r6, [sp, #70]	@ 0x46
 8019ffc:	b21b      	sxth	r3, r3
 8019ffe:	f8ad 703c 	strh.w	r7, [sp, #60]	@ 0x3c
 801a002:	f8df a144 	ldr.w	sl, [pc, #324]	@ 801a148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a006:	9305      	str	r3, [sp, #20]
 801a008:	f8b9 3002 	ldrh.w	r3, [r9, #2]
 801a00c:	1ad2      	subs	r2, r2, r3
 801a00e:	b213      	sxth	r3, r2
 801a010:	9306      	str	r3, [sp, #24]
 801a012:	9b05      	ldr	r3, [sp, #20]
 801a014:	f8ad 3038 	strh.w	r3, [sp, #56]	@ 0x38
 801a018:	9b06      	ldr	r3, [sp, #24]
 801a01a:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a01e:	9b04      	ldr	r3, [sp, #16]
 801a020:	f8ad 303e 	strh.w	r3, [sp, #62]	@ 0x3e
 801a024:	2300      	movs	r3, #0
 801a026:	9310      	str	r3, [sp, #64]	@ 0x40
 801a028:	f7f9 f8ba 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a02c:	4640      	mov	r0, r8
 801a02e:	f7f9 f88f 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a032:	a810      	add	r0, sp, #64	@ 0x40
 801a034:	f7f9 f88c 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a038:	4b41      	ldr	r3, [pc, #260]	@ (801a140 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x228>)
 801a03a:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801a03e:	4628      	mov	r0, r5
 801a040:	881b      	ldrh	r3, [r3, #0]
 801a042:	9308      	str	r3, [sp, #32]
 801a044:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
 801a048:	b21b      	sxth	r3, r3
 801a04a:	9303      	str	r3, [sp, #12]
 801a04c:	682b      	ldr	r3, [r5, #0]
 801a04e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a050:	4798      	blx	r3
 801a052:	9a03      	ldr	r2, [sp, #12]
 801a054:	f8bd 303a 	ldrh.w	r3, [sp, #58]	@ 0x3a
 801a058:	4681      	mov	r9, r0
 801a05a:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801a05e:	fb13 f302 	smulbb	r3, r3, r2
 801a062:	2203      	movs	r2, #3
 801a064:	f8da 0000 	ldr.w	r0, [sl]
 801a068:	fb15 3302 	smlabb	r3, r5, r2, r3
 801a06c:	9d1c      	ldr	r5, [sp, #112]	@ 0x70
 801a06e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a070:	441d      	add	r5, r3
 801a072:	6803      	ldr	r3, [r0, #0]
 801a074:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a076:	4798      	blx	r3
 801a078:	9009      	str	r0, [sp, #36]	@ 0x24
 801a07a:	f8da 0000 	ldr.w	r0, [sl]
 801a07e:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 801a082:	6803      	ldr	r3, [r0, #0]
 801a084:	910a      	str	r1, [sp, #40]	@ 0x28
 801a086:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a088:	f9bd 6032 	ldrsh.w	r6, [sp, #50]	@ 0x32
 801a08c:	4798      	blx	r3
 801a08e:	f010 0f01 	tst.w	r0, #1
 801a092:	e9dd 120a 	ldrd	r1, r2, [sp, #40]	@ 0x28
 801a096:	d01e      	beq.n	801a0d6 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1be>
 801a098:	f8da 0000 	ldr.w	r0, [sl]
 801a09c:	f9bd 203c 	ldrsh.w	r2, [sp, #60]	@ 0x3c
 801a0a0:	6803      	ldr	r3, [r0, #0]
 801a0a2:	9200      	str	r2, [sp, #0]
 801a0a4:	6ede      	ldr	r6, [r3, #108]	@ 0x6c
 801a0a6:	462b      	mov	r3, r5
 801a0a8:	e898 0006 	ldmia.w	r8, {r1, r2}
 801a0ac:	47b0      	blx	r6
 801a0ae:	9b05      	ldr	r3, [sp, #20]
 801a0b0:	80a7      	strh	r7, [r4, #4]
 801a0b2:	8023      	strh	r3, [r4, #0]
 801a0b4:	9b06      	ldr	r3, [sp, #24]
 801a0b6:	8063      	strh	r3, [r4, #2]
 801a0b8:	9b04      	ldr	r3, [sp, #16]
 801a0ba:	e007      	b.n	801a0cc <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1b4>
 801a0bc:	f9bd 0036 	ldrsh.w	r0, [sp, #54]	@ 0x36
 801a0c0:	4288      	cmp	r0, r1
 801a0c2:	e785      	b.n	8019fd0 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0xb8>
 801a0c4:	2300      	movs	r3, #0
 801a0c6:	8023      	strh	r3, [r4, #0]
 801a0c8:	8063      	strh	r3, [r4, #2]
 801a0ca:	80a3      	strh	r3, [r4, #4]
 801a0cc:	4620      	mov	r0, r4
 801a0ce:	80e3      	strh	r3, [r4, #6]
 801a0d0:	b013      	add	sp, #76	@ 0x4c
 801a0d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a0d6:	fb09 f606 	mul.w	r6, r9, r6
 801a0da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a0dc:	fb11 6602 	smlabb	r6, r1, r2, r6
 801a0e0:	9a07      	ldr	r2, [sp, #28]
 801a0e2:	4433      	add	r3, r6
 801a0e4:	461e      	mov	r6, r3
 801a0e6:	f9bd 303e 	ldrsh.w	r3, [sp, #62]	@ 0x3e
 801a0ea:	b16a      	cbz	r2, 801a108 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a0ec:	9a08      	ldr	r2, [sp, #32]
 801a0ee:	4593      	cmp	fp, r2
 801a0f0:	d10a      	bne.n	801a108 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1f0>
 801a0f2:	f8da 0000 	ldr.w	r0, [sl]
 801a0f6:	fb09 f303 	mul.w	r3, r9, r3
 801a0fa:	4629      	mov	r1, r5
 801a0fc:	6802      	ldr	r2, [r0, #0]
 801a0fe:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a102:	4632      	mov	r2, r6
 801a104:	47d0      	blx	sl
 801a106:	e7d2      	b.n	801a0ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a108:	9a03      	ldr	r2, [sp, #12]
 801a10a:	f8df b03c 	ldr.w	fp, [pc, #60]	@ 801a148 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x230>
 801a10e:	fb02 5803 	mla	r8, r2, r3, r5
 801a112:	4545      	cmp	r5, r8
 801a114:	d2cb      	bcs.n	801a0ae <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x196>
 801a116:	f8db 0000 	ldr.w	r0, [fp]
 801a11a:	4629      	mov	r1, r5
 801a11c:	f9bd 303c 	ldrsh.w	r3, [sp, #60]	@ 0x3c
 801a120:	6802      	ldr	r2, [r0, #0]
 801a122:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a126:	f8d2 a034 	ldr.w	sl, [r2, #52]	@ 0x34
 801a12a:	4632      	mov	r2, r6
 801a12c:	47d0      	blx	sl
 801a12e:	9b03      	ldr	r3, [sp, #12]
 801a130:	444e      	add	r6, r9
 801a132:	441d      	add	r5, r3
 801a134:	e7ed      	b.n	801a112 <_ZN8touchgfx8LCD24bpp29copyFrameBufferRegionToMemoryERKNS_4RectES3_Phss+0x1fa>
 801a136:	bf00      	nop
 801a138:	2402539c 	.word	0x2402539c
 801a13c:	2402539e 	.word	0x2402539e
 801a140:	240253a2 	.word	0x240253a2
 801a144:	240253a0 	.word	0x240253a0
 801a148:	240253a8 	.word	0x240253a8

0801a14c <_ZN8touchgfx8LCD24bppC1Ev>:
 801a14c:	2200      	movs	r2, #0
 801a14e:	490e      	ldr	r1, [pc, #56]	@ (801a188 <_ZN8touchgfx8LCD24bppC1Ev+0x3c>)
 801a150:	e9c0 2201 	strd	r2, r2, [r0, #4]
 801a154:	6001      	str	r1, [r0, #0]
 801a156:	e9c0 2203 	strd	r2, r2, [r0, #12]
 801a15a:	e9c0 2205 	strd	r2, r2, [r0, #20]
 801a15e:	e9c0 2207 	strd	r2, r2, [r0, #28]
 801a162:	e9c0 2209 	strd	r2, r2, [r0, #36]	@ 0x24
 801a166:	e9c0 220b 	strd	r2, r2, [r0, #44]	@ 0x2c
 801a16a:	e9c0 220d 	strd	r2, r2, [r0, #52]	@ 0x34
 801a16e:	e9c0 220f 	strd	r2, r2, [r0, #60]	@ 0x3c
 801a172:	e9c0 2211 	strd	r2, r2, [r0, #68]	@ 0x44
 801a176:	e9c0 2213 	strd	r2, r2, [r0, #76]	@ 0x4c
 801a17a:	e9c0 2215 	strd	r2, r2, [r0, #84]	@ 0x54
 801a17e:	e9c0 2217 	strd	r2, r2, [r0, #92]	@ 0x5c
 801a182:	e9c0 2219 	strd	r2, r2, [r0, #100]	@ 0x64
 801a186:	4770      	bx	lr
 801a188:	08025670 	.word	0x08025670

0801a18c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>:
 801a18c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a190:	b091      	sub	sp, #68	@ 0x44
 801a192:	4607      	mov	r7, r0
 801a194:	4688      	mov	r8, r1
 801a196:	6810      	ldr	r0, [r2, #0]
 801a198:	6851      	ldr	r1, [r2, #4]
 801a19a:	ac0c      	add	r4, sp, #48	@ 0x30
 801a19c:	4616      	mov	r6, r2
 801a19e:	f89d 9068 	ldrb.w	r9, [sp, #104]	@ 0x68
 801a1a2:	4d64      	ldr	r5, [pc, #400]	@ (801a334 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a1a4:	f8df a190 	ldr.w	sl, [pc, #400]	@ 801a338 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1ac>
 801a1a8:	c403      	stmia	r4!, {r0, r1}
 801a1aa:	6818      	ldr	r0, [r3, #0]
 801a1ac:	ac0e      	add	r4, sp, #56	@ 0x38
 801a1ae:	6859      	ldr	r1, [r3, #4]
 801a1b0:	c403      	stmia	r4!, {r0, r1}
 801a1b2:	a80c      	add	r0, sp, #48	@ 0x30
 801a1b4:	f7f8 ffcc 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a1b8:	4631      	mov	r1, r6
 801a1ba:	a80e      	add	r0, sp, #56	@ 0x38
 801a1bc:	f7f8 fff0 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a1c0:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a1c4:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a1c8:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a1cc:	6828      	ldr	r0, [r5, #0]
 801a1ce:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a1d2:	f9bd 403c 	ldrsh.w	r4, [sp, #60]	@ 0x3c
 801a1d6:	f9bd 603e 	ldrsh.w	r6, [sp, #62]	@ 0x3e
 801a1da:	440f      	add	r7, r1
 801a1dc:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a1e0:	440a      	add	r2, r1
 801a1e2:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a1e6:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a1ea:	4413      	add	r3, r2
 801a1ec:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a1f0:	6803      	ldr	r3, [r0, #0]
 801a1f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a1f4:	4798      	blx	r3
 801a1f6:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a1fa:	6828      	ldr	r0, [r5, #0]
 801a1fc:	d01f      	beq.n	801a23e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xb2>
 801a1fe:	2201      	movs	r2, #1
 801a200:	2500      	movs	r5, #0
 801a202:	6801      	ldr	r1, [r0, #0]
 801a204:	b2a4      	uxth	r4, r4
 801a206:	b2b6      	uxth	r6, r6
 801a208:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a20c:	e9cd 2508 	strd	r2, r5, [sp, #32]
 801a210:	250b      	movs	r5, #11
 801a212:	9507      	str	r5, [sp, #28]
 801a214:	f8ba 5000 	ldrh.w	r5, [sl]
 801a218:	f8cd 9010 	str.w	r9, [sp, #16]
 801a21c:	9602      	str	r6, [sp, #8]
 801a21e:	9401      	str	r4, [sp, #4]
 801a220:	e9cd 2505 	strd	r2, r5, [sp, #20]
 801a224:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a228:	9203      	str	r2, [sp, #12]
 801a22a:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a22e:	9200      	str	r2, [sp, #0]
 801a230:	4642      	mov	r2, r8
 801a232:	6bcc      	ldr	r4, [r1, #60]	@ 0x3c
 801a234:	4639      	mov	r1, r7
 801a236:	47a0      	blx	r4
 801a238:	b011      	add	sp, #68	@ 0x44
 801a23a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a23e:	6803      	ldr	r3, [r0, #0]
 801a240:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a242:	4798      	blx	r3
 801a244:	f8ba 5000 	ldrh.w	r5, [sl]
 801a248:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a24c:	f04f 0e04 	mov.w	lr, #4
 801a250:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a254:	436e      	muls	r6, r5
 801a256:	fb05 2303 	mla	r3, r5, r3, r2
 801a25a:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801a25e:	1b2d      	subs	r5, r5, r4
 801a260:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a264:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a268:	4418      	add	r0, r3
 801a26a:	f9bd 3034 	ldrsh.w	r3, [sp, #52]	@ 0x34
 801a26e:	1982      	adds	r2, r0, r6
 801a270:	1b1b      	subs	r3, r3, r4
 801a272:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a276:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a278:	4290      	cmp	r0, r2
 801a27a:	d254      	bcs.n	801a326 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a27c:	eb00 0a04 	add.w	sl, r0, r4
 801a280:	4550      	cmp	r0, sl
 801a282:	d24c      	bcs.n	801a31e <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x192>
 801a284:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a288:	fb1e e101 	smlabb	r1, lr, r1, lr
 801a28c:	eb08 0c01 	add.w	ip, r8, r1
 801a290:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801a294:	b173      	cbz	r3, 801a2b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a296:	2bff      	cmp	r3, #255	@ 0xff
 801a298:	f818 b001 	ldrb.w	fp, [r8, r1]
 801a29c:	d10c      	bne.n	801a2b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a29e:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801a2a2:	d109      	bne.n	801a2b8 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x12c>
 801a2a4:	f880 b000 	strb.w	fp, [r0]
 801a2a8:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801a2ac:	7043      	strb	r3, [r0, #1]
 801a2ae:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801a2b2:	7083      	strb	r3, [r0, #2]
 801a2b4:	3003      	adds	r0, #3
 801a2b6:	e7e3      	b.n	801a280 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xf4>
 801a2b8:	fb09 f103 	mul.w	r1, r9, r3
 801a2bc:	1c4b      	adds	r3, r1, #1
 801a2be:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801a2c2:	7801      	ldrb	r1, [r0, #0]
 801a2c4:	121b      	asrs	r3, r3, #8
 801a2c6:	b29e      	uxth	r6, r3
 801a2c8:	43db      	mvns	r3, r3
 801a2ca:	fb1b fb06 	smulbb	fp, fp, r6
 801a2ce:	b2db      	uxtb	r3, r3
 801a2d0:	fb01 b103 	mla	r1, r1, r3, fp
 801a2d4:	b289      	uxth	r1, r1
 801a2d6:	f101 0b01 	add.w	fp, r1, #1
 801a2da:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a2de:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a2e2:	fb1b fb03 	smulbb	fp, fp, r3
 801a2e6:	1209      	asrs	r1, r1, #8
 801a2e8:	7001      	strb	r1, [r0, #0]
 801a2ea:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801a2ee:	fb01 b106 	mla	r1, r1, r6, fp
 801a2f2:	b289      	uxth	r1, r1
 801a2f4:	f101 0b01 	add.w	fp, r1, #1
 801a2f8:	eb0b 2111 	add.w	r1, fp, r1, lsr #8
 801a2fc:	1209      	asrs	r1, r1, #8
 801a2fe:	7041      	strb	r1, [r0, #1]
 801a300:	f89c 1002 	ldrb.w	r1, [ip, #2]
 801a304:	f890 c002 	ldrb.w	ip, [r0, #2]
 801a308:	fb1c f303 	smulbb	r3, ip, r3
 801a30c:	fb01 3606 	mla	r6, r1, r6, r3
 801a310:	b2b6      	uxth	r6, r6
 801a312:	1c73      	adds	r3, r6, #1
 801a314:	eb03 2616 	add.w	r6, r3, r6, lsr #8
 801a318:	1236      	asrs	r6, r6, #8
 801a31a:	7086      	strb	r6, [r0, #2]
 801a31c:	e7ca      	b.n	801a2b4 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x128>
 801a31e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a320:	4428      	add	r0, r5
 801a322:	441f      	add	r7, r3
 801a324:	e7a8      	b.n	801a278 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xec>
 801a326:	4b03      	ldr	r3, [pc, #12]	@ (801a334 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0x1a8>)
 801a328:	6818      	ldr	r0, [r3, #0]
 801a32a:	6803      	ldr	r3, [r0, #0]
 801a32c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a32e:	4798      	blx	r3
 801a330:	e782      	b.n	801a238 <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h+0xac>
 801a332:	bf00      	nop
 801a334:	240253a8 	.word	0x240253a8
 801a338:	240253a2 	.word	0x240253a2

0801a33c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>:
 801a33c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a340:	b091      	sub	sp, #68	@ 0x44
 801a342:	4680      	mov	r8, r0
 801a344:	460e      	mov	r6, r1
 801a346:	6810      	ldr	r0, [r2, #0]
 801a348:	6851      	ldr	r1, [r2, #4]
 801a34a:	ad0c      	add	r5, sp, #48	@ 0x30
 801a34c:	4614      	mov	r4, r2
 801a34e:	f89d 7068 	ldrb.w	r7, [sp, #104]	@ 0x68
 801a352:	f8df 9198 	ldr.w	r9, [pc, #408]	@ 801a4ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>
 801a356:	f8df a198 	ldr.w	sl, [pc, #408]	@ 801a4f0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b4>
 801a35a:	c503      	stmia	r5!, {r0, r1}
 801a35c:	6818      	ldr	r0, [r3, #0]
 801a35e:	ad0e      	add	r5, sp, #56	@ 0x38
 801a360:	6859      	ldr	r1, [r3, #4]
 801a362:	c503      	stmia	r5!, {r0, r1}
 801a364:	a80c      	add	r0, sp, #48	@ 0x30
 801a366:	f7f8 fef3 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a36a:	4621      	mov	r1, r4
 801a36c:	a80e      	add	r0, sp, #56	@ 0x38
 801a36e:	f7f8 ff17 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a372:	f9bd 2038 	ldrsh.w	r2, [sp, #56]	@ 0x38
 801a376:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a37a:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 801a37e:	f8d9 0000 	ldr.w	r0, [r9]
 801a382:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a386:	f9bd 503e 	ldrsh.w	r5, [sp, #62]	@ 0x3e
 801a38a:	eb08 0401 	add.w	r4, r8, r1
 801a38e:	f8bd 1030 	ldrh.w	r1, [sp, #48]	@ 0x30
 801a392:	f9bd 803c 	ldrsh.w	r8, [sp, #60]	@ 0x3c
 801a396:	440a      	add	r2, r1
 801a398:	f8ad 2038 	strh.w	r2, [sp, #56]	@ 0x38
 801a39c:	f8bd 2032 	ldrh.w	r2, [sp, #50]	@ 0x32
 801a3a0:	4413      	add	r3, r2
 801a3a2:	f8ad 303a 	strh.w	r3, [sp, #58]	@ 0x3a
 801a3a6:	6803      	ldr	r3, [r0, #0]
 801a3a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a3aa:	4798      	blx	r3
 801a3ac:	f010 0f80 	tst.w	r0, #128	@ 0x80
 801a3b0:	f8d9 0000 	ldr.w	r0, [r9]
 801a3b4:	d022      	beq.n	801a3fc <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xc0>
 801a3b6:	2200      	movs	r2, #0
 801a3b8:	f04f 0c01 	mov.w	ip, #1
 801a3bc:	6801      	ldr	r1, [r0, #0]
 801a3be:	b2ad      	uxth	r5, r5
 801a3c0:	f8bd 3038 	ldrh.w	r3, [sp, #56]	@ 0x38
 801a3c4:	e9cd c208 	strd	ip, r2, [sp, #32]
 801a3c8:	f04f 0c0b 	mov.w	ip, #11
 801a3cc:	f8cd c01c 	str.w	ip, [sp, #28]
 801a3d0:	f8ba c000 	ldrh.w	ip, [sl]
 801a3d4:	9704      	str	r7, [sp, #16]
 801a3d6:	9502      	str	r5, [sp, #8]
 801a3d8:	e9cd 2c05 	strd	r2, ip, [sp, #20]
 801a3dc:	f8bd 2034 	ldrh.w	r2, [sp, #52]	@ 0x34
 801a3e0:	9203      	str	r2, [sp, #12]
 801a3e2:	fa1f f288 	uxth.w	r2, r8
 801a3e6:	9201      	str	r2, [sp, #4]
 801a3e8:	f8bd 203a 	ldrh.w	r2, [sp, #58]	@ 0x3a
 801a3ec:	9200      	str	r2, [sp, #0]
 801a3ee:	4632      	mov	r2, r6
 801a3f0:	6bcd      	ldr	r5, [r1, #60]	@ 0x3c
 801a3f2:	4621      	mov	r1, r4
 801a3f4:	47a8      	blx	r5
 801a3f6:	b011      	add	sp, #68	@ 0x44
 801a3f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a3fc:	6803      	ldr	r3, [r0, #0]
 801a3fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a400:	4798      	blx	r3
 801a402:	f8ba 2000 	ldrh.w	r2, [sl]
 801a406:	f9bd 303a 	ldrsh.w	r3, [sp, #58]	@ 0x3a
 801a40a:	f04f 0e03 	mov.w	lr, #3
 801a40e:	f9bd 1038 	ldrsh.w	r1, [sp, #56]	@ 0x38
 801a412:	4355      	muls	r5, r2
 801a414:	fa1f fc87 	uxth.w	ip, r7
 801a418:	fb02 1303 	mla	r3, r2, r3, r1
 801a41c:	eba2 0208 	sub.w	r2, r2, r8
 801a420:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a424:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a428:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801a42c:	4418      	add	r0, r3
 801a42e:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a430:	1943      	adds	r3, r0, r5
 801a432:	f9bd 2034 	ldrsh.w	r2, [sp, #52]	@ 0x34
 801a436:	f1c7 05ff 	rsb	r5, r7, #255	@ 0xff
 801a43a:	eba2 0208 	sub.w	r2, r2, r8
 801a43e:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801a442:	b2ad      	uxth	r5, r5
 801a444:	4298      	cmp	r0, r3
 801a446:	d24a      	bcs.n	801a4de <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1a2>
 801a448:	eb00 0908 	add.w	r9, r0, r8
 801a44c:	4621      	mov	r1, r4
 801a44e:	4548      	cmp	r0, r9
 801a450:	460c      	mov	r4, r1
 801a452:	d240      	bcs.n	801a4d6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x19a>
 801a454:	f04f 0a04 	mov.w	sl, #4
 801a458:	7824      	ldrb	r4, [r4, #0]
 801a45a:	2fff      	cmp	r7, #255	@ 0xff
 801a45c:	f101 0101 	add.w	r1, r1, #1
 801a460:	fb1e a404 	smlabb	r4, lr, r4, sl
 801a464:	eb06 0a04 	add.w	sl, r6, r4
 801a468:	f816 b004 	ldrb.w	fp, [r6, r4]
 801a46c:	d02b      	beq.n	801a4c6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x18a>
 801a46e:	7804      	ldrb	r4, [r0, #0]
 801a470:	fb14 f405 	smulbb	r4, r4, r5
 801a474:	fb0b 440c 	mla	r4, fp, ip, r4
 801a478:	b2a4      	uxth	r4, r4
 801a47a:	f104 0b01 	add.w	fp, r4, #1
 801a47e:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a482:	f890 b001 	ldrb.w	fp, [r0, #1]
 801a486:	fb1b fb05 	smulbb	fp, fp, r5
 801a48a:	1224      	asrs	r4, r4, #8
 801a48c:	7004      	strb	r4, [r0, #0]
 801a48e:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a492:	fb04 b40c 	mla	r4, r4, ip, fp
 801a496:	b2a4      	uxth	r4, r4
 801a498:	f104 0b01 	add.w	fp, r4, #1
 801a49c:	eb0b 2414 	add.w	r4, fp, r4, lsr #8
 801a4a0:	1224      	asrs	r4, r4, #8
 801a4a2:	7044      	strb	r4, [r0, #1]
 801a4a4:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a4a8:	f890 a002 	ldrb.w	sl, [r0, #2]
 801a4ac:	fb1a fa05 	smulbb	sl, sl, r5
 801a4b0:	fb04 a40c 	mla	r4, r4, ip, sl
 801a4b4:	b2a4      	uxth	r4, r4
 801a4b6:	f104 0a01 	add.w	sl, r4, #1
 801a4ba:	eb0a 2414 	add.w	r4, sl, r4, lsr #8
 801a4be:	1224      	asrs	r4, r4, #8
 801a4c0:	7084      	strb	r4, [r0, #2]
 801a4c2:	3003      	adds	r0, #3
 801a4c4:	e7c3      	b.n	801a44e <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x112>
 801a4c6:	f880 b000 	strb.w	fp, [r0]
 801a4ca:	f89a 4001 	ldrb.w	r4, [sl, #1]
 801a4ce:	7044      	strb	r4, [r0, #1]
 801a4d0:	f89a 4002 	ldrb.w	r4, [sl, #2]
 801a4d4:	e7f4      	b.n	801a4c0 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x184>
 801a4d6:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801a4d8:	4420      	add	r0, r4
 801a4da:	188c      	adds	r4, r1, r2
 801a4dc:	e7b2      	b.n	801a444 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x108>
 801a4de:	4b03      	ldr	r3, [pc, #12]	@ (801a4ec <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0x1b0>)
 801a4e0:	6818      	ldr	r0, [r3, #0]
 801a4e2:	6803      	ldr	r3, [r0, #0]
 801a4e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a4e6:	4798      	blx	r3
 801a4e8:	e785      	b.n	801a3f6 <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h+0xba>
 801a4ea:	bf00      	nop
 801a4ec:	240253a8 	.word	0x240253a8
 801a4f0:	240253a2 	.word	0x240253a2

0801a4f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>:
 801a4f4:	b4f0      	push	{r4, r5, r6, r7}
 801a4f6:	460c      	mov	r4, r1
 801a4f8:	4611      	mov	r1, r2
 801a4fa:	f89d 5014 	ldrb.w	r5, [sp, #20]
 801a4fe:	461a      	mov	r2, r3
 801a500:	780f      	ldrb	r7, [r1, #0]
 801a502:	9b04      	ldr	r3, [sp, #16]
 801a504:	784e      	ldrb	r6, [r1, #1]
 801a506:	b11f      	cbz	r7, 801a510 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x1c>
 801a508:	2f01      	cmp	r7, #1
 801a50a:	d01d      	beq.n	801a548 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x54>
 801a50c:	bcf0      	pop	{r4, r5, r6, r7}
 801a50e:	4770      	bx	lr
 801a510:	2e03      	cmp	r6, #3
 801a512:	d8fb      	bhi.n	801a50c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a514:	e8df f006 	tbb	[pc, r6]
 801a518:	16140702 	.word	0x16140702
 801a51c:	9504      	str	r5, [sp, #16]
 801a51e:	4620      	mov	r0, r4
 801a520:	bcf0      	pop	{r4, r5, r6, r7}
 801a522:	f7ff be33 	b.w	801a18c <_ZN8touchgfx8LCD24bpp19blitCopyL8_ARGB8888EPKhS2_RKNS_4RectES5_h>
 801a526:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a528:	2800      	cmp	r0, #0
 801a52a:	d0ef      	beq.n	801a50c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a52c:	6806      	ldr	r6, [r0, #0]
 801a52e:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a532:	68f5      	ldr	r5, [r6, #12]
 801a534:	4613      	mov	r3, r2
 801a536:	46ac      	mov	ip, r5
 801a538:	460a      	mov	r2, r1
 801a53a:	4621      	mov	r1, r4
 801a53c:	bcf0      	pop	{r4, r5, r6, r7}
 801a53e:	4760      	bx	ip
 801a540:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a542:	e7f1      	b.n	801a528 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a544:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a546:	e7ef      	b.n	801a528 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x34>
 801a548:	2e03      	cmp	r6, #3
 801a54a:	d8df      	bhi.n	801a50c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a54c:	e8df f006 	tbb	[pc, r6]
 801a550:	110f0702 	.word	0x110f0702
 801a554:	9504      	str	r5, [sp, #16]
 801a556:	4620      	mov	r0, r4
 801a558:	bcf0      	pop	{r4, r5, r6, r7}
 801a55a:	f7ff beef 	b.w	801a33c <_ZN8touchgfx8LCD24bpp17blitCopyL8_RGB888EPKhS2_RKNS_4RectES5_h>
 801a55e:	6dc0      	ldr	r0, [r0, #92]	@ 0x5c
 801a560:	2800      	cmp	r0, #0
 801a562:	d0d3      	beq.n	801a50c <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x18>
 801a564:	6806      	ldr	r6, [r0, #0]
 801a566:	e9cd 3504 	strd	r3, r5, [sp, #16]
 801a56a:	68b5      	ldr	r5, [r6, #8]
 801a56c:	e7e2      	b.n	801a534 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x40>
 801a56e:	6e00      	ldr	r0, [r0, #96]	@ 0x60
 801a570:	e7f6      	b.n	801a560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
 801a572:	6e40      	ldr	r0, [r0, #100]	@ 0x64
 801a574:	e7f4      	b.n	801a560 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h+0x6c>
	...

0801a578 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>:
 801a578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a57c:	4605      	mov	r5, r0
 801a57e:	b08f      	sub	sp, #60	@ 0x3c
 801a580:	460c      	mov	r4, r1
 801a582:	461f      	mov	r7, r3
 801a584:	2b00      	cmp	r3, #0
 801a586:	d052      	beq.n	801a62e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a588:	6808      	ldr	r0, [r1, #0]
 801a58a:	ab0a      	add	r3, sp, #40	@ 0x28
 801a58c:	6849      	ldr	r1, [r1, #4]
 801a58e:	f8df 81c8 	ldr.w	r8, [pc, #456]	@ 801a758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>
 801a592:	f8df 91c8 	ldr.w	r9, [pc, #456]	@ 801a75c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e4>
 801a596:	c303      	stmia	r3!, {r0, r1}
 801a598:	6810      	ldr	r0, [r2, #0]
 801a59a:	ab0c      	add	r3, sp, #48	@ 0x30
 801a59c:	6851      	ldr	r1, [r2, #4]
 801a59e:	c303      	stmia	r3!, {r0, r1}
 801a5a0:	a80a      	add	r0, sp, #40	@ 0x28
 801a5a2:	f7f8 fdd5 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a5a6:	4621      	mov	r1, r4
 801a5a8:	a80c      	add	r0, sp, #48	@ 0x30
 801a5aa:	f7f8 fdf9 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a5ae:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a5b2:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a5b6:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a5ba:	f8d8 0000 	ldr.w	r0, [r8]
 801a5be:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a5c2:	f9bd 6034 	ldrsh.w	r6, [sp, #52]	@ 0x34
 801a5c6:	f9bd 4036 	ldrsh.w	r4, [sp, #54]	@ 0x36
 801a5ca:	eb05 0541 	add.w	r5, r5, r1, lsl #1
 801a5ce:	f8bd 1028 	ldrh.w	r1, [sp, #40]	@ 0x28
 801a5d2:	440a      	add	r2, r1
 801a5d4:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 801a5d8:	f8bd 202a 	ldrh.w	r2, [sp, #42]	@ 0x2a
 801a5dc:	4413      	add	r3, r2
 801a5de:	f8ad 3032 	strh.w	r3, [sp, #50]	@ 0x32
 801a5e2:	6803      	ldr	r3, [r0, #0]
 801a5e4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a5e6:	4798      	blx	r3
 801a5e8:	2fff      	cmp	r7, #255	@ 0xff
 801a5ea:	d023      	beq.n	801a634 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xbc>
 801a5ec:	f010 0f04 	tst.w	r0, #4
 801a5f0:	f8d8 0000 	ldr.w	r0, [r8]
 801a5f4:	d021      	beq.n	801a63a <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xc2>
 801a5f6:	2100      	movs	r1, #0
 801a5f8:	f04f 0e01 	mov.w	lr, #1
 801a5fc:	f8d0 c000 	ldr.w	ip, [r0]
 801a600:	b2a4      	uxth	r4, r4
 801a602:	9106      	str	r1, [sp, #24]
 801a604:	b2b6      	uxth	r6, r6
 801a606:	f8bd 3032 	ldrh.w	r3, [sp, #50]	@ 0x32
 801a60a:	f8bd 2030 	ldrh.w	r2, [sp, #48]	@ 0x30
 801a60e:	e9cd e107 	strd	lr, r1, [sp, #28]
 801a612:	f8b9 e000 	ldrh.w	lr, [r9]
 801a616:	9703      	str	r7, [sp, #12]
 801a618:	9401      	str	r4, [sp, #4]
 801a61a:	9600      	str	r6, [sp, #0]
 801a61c:	e9cd 1e04 	strd	r1, lr, [sp, #16]
 801a620:	f8bd 102c 	ldrh.w	r1, [sp, #44]	@ 0x2c
 801a624:	9102      	str	r1, [sp, #8]
 801a626:	4629      	mov	r1, r5
 801a628:	f8dc 4040 	ldr.w	r4, [ip, #64]	@ 0x40
 801a62c:	47a0      	blx	r4
 801a62e:	b00f      	add	sp, #60	@ 0x3c
 801a630:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a634:	f010 0f01 	tst.w	r0, #1
 801a638:	e7da      	b.n	801a5f0 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x78>
 801a63a:	6803      	ldr	r3, [r0, #0]
 801a63c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a63e:	4798      	blx	r3
 801a640:	f8b9 1000 	ldrh.w	r1, [r9]
 801a644:	f9bd 3032 	ldrsh.w	r3, [sp, #50]	@ 0x32
 801a648:	eb06 0c46 	add.w	ip, r6, r6, lsl #1
 801a64c:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 801a650:	434c      	muls	r4, r1
 801a652:	2fff      	cmp	r7, #255	@ 0xff
 801a654:	fb01 2303 	mla	r3, r1, r3, r2
 801a658:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801a65c:	eba1 0106 	sub.w	r1, r1, r6
 801a660:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a664:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801a668:	4418      	add	r0, r3
 801a66a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 801a66e:	eba3 0606 	sub.w	r6, r3, r6
 801a672:	4404      	add	r4, r0
 801a674:	ea4f 0646 	mov.w	r6, r6, lsl #1
 801a678:	d04a      	beq.n	801a710 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x198>
 801a67a:	43fa      	mvns	r2, r7
 801a67c:	b2bb      	uxth	r3, r7
 801a67e:	b2d7      	uxtb	r7, r2
 801a680:	42a0      	cmp	r0, r4
 801a682:	d263      	bcs.n	801a74c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a684:	eb00 0e0c 	add.w	lr, r0, ip
 801a688:	4586      	cmp	lr, r0
 801a68a:	f100 0803 	add.w	r8, r0, #3
 801a68e:	d93a      	bls.n	801a706 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x18e>
 801a690:	f835 2b02 	ldrh.w	r2, [r5], #2
 801a694:	f818 9c03 	ldrb.w	r9, [r8, #-3]
 801a698:	00d0      	lsls	r0, r2, #3
 801a69a:	fb19 f907 	smulbb	r9, r9, r7
 801a69e:	b2c0      	uxtb	r0, r0
 801a6a0:	ea40 1050 	orr.w	r0, r0, r0, lsr #5
 801a6a4:	fb00 9003 	mla	r0, r0, r3, r9
 801a6a8:	b280      	uxth	r0, r0
 801a6aa:	f100 0901 	add.w	r9, r0, #1
 801a6ae:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a6b2:	f818 9c02 	ldrb.w	r9, [r8, #-2]
 801a6b6:	fb19 f907 	smulbb	r9, r9, r7
 801a6ba:	1200      	asrs	r0, r0, #8
 801a6bc:	f808 0c03 	strb.w	r0, [r8, #-3]
 801a6c0:	10d0      	asrs	r0, r2, #3
 801a6c2:	1212      	asrs	r2, r2, #8
 801a6c4:	f000 00fc 	and.w	r0, r0, #252	@ 0xfc
 801a6c8:	f002 02f8 	and.w	r2, r2, #248	@ 0xf8
 801a6cc:	ea40 1090 	orr.w	r0, r0, r0, lsr #6
 801a6d0:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a6d4:	fb00 9003 	mla	r0, r0, r3, r9
 801a6d8:	b280      	uxth	r0, r0
 801a6da:	f100 0901 	add.w	r9, r0, #1
 801a6de:	eb09 2010 	add.w	r0, r9, r0, lsr #8
 801a6e2:	1200      	asrs	r0, r0, #8
 801a6e4:	f808 0c02 	strb.w	r0, [r8, #-2]
 801a6e8:	f818 0c01 	ldrb.w	r0, [r8, #-1]
 801a6ec:	fb10 f007 	smulbb	r0, r0, r7
 801a6f0:	fb02 0203 	mla	r2, r2, r3, r0
 801a6f4:	b292      	uxth	r2, r2
 801a6f6:	1c50      	adds	r0, r2, #1
 801a6f8:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801a6fc:	4640      	mov	r0, r8
 801a6fe:	1212      	asrs	r2, r2, #8
 801a700:	f808 2c01 	strb.w	r2, [r8, #-1]
 801a704:	e7c0      	b.n	801a688 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x110>
 801a706:	4408      	add	r0, r1
 801a708:	4435      	add	r5, r6
 801a70a:	e7b9      	b.n	801a680 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x108>
 801a70c:	4408      	add	r0, r1
 801a70e:	4435      	add	r5, r6
 801a710:	42a0      	cmp	r0, r4
 801a712:	d21b      	bcs.n	801a74c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1d4>
 801a714:	eb00 070c 	add.w	r7, r0, ip
 801a718:	42b8      	cmp	r0, r7
 801a71a:	d2f7      	bcs.n	801a70c <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x194>
 801a71c:	f835 3b02 	ldrh.w	r3, [r5], #2
 801a720:	3003      	adds	r0, #3
 801a722:	00da      	lsls	r2, r3, #3
 801a724:	b2d2      	uxtb	r2, r2
 801a726:	ea42 1252 	orr.w	r2, r2, r2, lsr #5
 801a72a:	f800 2c03 	strb.w	r2, [r0, #-3]
 801a72e:	10da      	asrs	r2, r3, #3
 801a730:	121b      	asrs	r3, r3, #8
 801a732:	f002 02fc 	and.w	r2, r2, #252	@ 0xfc
 801a736:	f003 03f8 	and.w	r3, r3, #248	@ 0xf8
 801a73a:	ea42 1292 	orr.w	r2, r2, r2, lsr #6
 801a73e:	ea43 1353 	orr.w	r3, r3, r3, lsr #5
 801a742:	f800 2c02 	strb.w	r2, [r0, #-2]
 801a746:	f800 3c01 	strb.w	r3, [r0, #-1]
 801a74a:	e7e5      	b.n	801a718 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1a0>
 801a74c:	4b02      	ldr	r3, [pc, #8]	@ (801a758 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0x1e0>)
 801a74e:	6818      	ldr	r0, [r3, #0]
 801a750:	6803      	ldr	r3, [r0, #0]
 801a752:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a754:	4798      	blx	r3
 801a756:	e76a      	b.n	801a62e <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h+0xb6>
 801a758:	240253a8 	.word	0x240253a8
 801a75c:	240253a2 	.word	0x240253a2

0801a760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>:
 801a760:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801a764:	b08a      	sub	sp, #40	@ 0x28
 801a766:	460d      	mov	r5, r1
 801a768:	4604      	mov	r4, r0
 801a76a:	461e      	mov	r6, r3
 801a76c:	6808      	ldr	r0, [r1, #0]
 801a76e:	ab06      	add	r3, sp, #24
 801a770:	6849      	ldr	r1, [r1, #4]
 801a772:	4f5d      	ldr	r7, [pc, #372]	@ (801a8e8 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x188>)
 801a774:	c303      	stmia	r3!, {r0, r1}
 801a776:	6810      	ldr	r0, [r2, #0]
 801a778:	ab08      	add	r3, sp, #32
 801a77a:	6851      	ldr	r1, [r2, #4]
 801a77c:	c303      	stmia	r3!, {r0, r1}
 801a77e:	a806      	add	r0, sp, #24
 801a780:	f7f8 fce6 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801a784:	4629      	mov	r1, r5
 801a786:	a808      	add	r0, sp, #32
 801a788:	f7f8 fd0a 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801a78c:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a790:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a794:	f8bd 101c 	ldrh.w	r1, [sp, #28]
 801a798:	6838      	ldr	r0, [r7, #0]
 801a79a:	fb11 2103 	smlabb	r1, r1, r3, r2
 801a79e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801a7a2:	f9bd 5026 	ldrsh.w	r5, [sp, #38]	@ 0x26
 801a7a6:	eb04 0481 	add.w	r4, r4, r1, lsl #2
 801a7aa:	f8bd 1018 	ldrh.w	r1, [sp, #24]
 801a7ae:	440a      	add	r2, r1
 801a7b0:	f8ad 2020 	strh.w	r2, [sp, #32]
 801a7b4:	f8bd 201a 	ldrh.w	r2, [sp, #26]
 801a7b8:	4413      	add	r3, r2
 801a7ba:	f8ad 3022 	strh.w	r3, [sp, #34]	@ 0x22
 801a7be:	6803      	ldr	r3, [r0, #0]
 801a7c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a7c2:	4798      	blx	r3
 801a7c4:	2eff      	cmp	r6, #255	@ 0xff
 801a7c6:	d119      	bne.n	801a7fc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x9c>
 801a7c8:	f010 0f20 	tst.w	r0, #32
 801a7cc:	6838      	ldr	r0, [r7, #0]
 801a7ce:	d018      	beq.n	801a802 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xa2>
 801a7d0:	b2ad      	uxth	r5, r5
 801a7d2:	2700      	movs	r7, #0
 801a7d4:	6801      	ldr	r1, [r0, #0]
 801a7d6:	9501      	str	r5, [sp, #4]
 801a7d8:	fa1f f588 	uxth.w	r5, r8
 801a7dc:	f8bd 3022 	ldrh.w	r3, [sp, #34]	@ 0x22
 801a7e0:	9500      	str	r5, [sp, #0]
 801a7e2:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801a7e6:	e9cd 6703 	strd	r6, r7, [sp, #12]
 801a7ea:	f8bd 601c 	ldrh.w	r6, [sp, #28]
 801a7ee:	9602      	str	r6, [sp, #8]
 801a7f0:	6d0d      	ldr	r5, [r1, #80]	@ 0x50
 801a7f2:	4621      	mov	r1, r4
 801a7f4:	47a8      	blx	r5
 801a7f6:	b00a      	add	sp, #40	@ 0x28
 801a7f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a7fc:	f010 0f40 	tst.w	r0, #64	@ 0x40
 801a800:	e7e4      	b.n	801a7cc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x6c>
 801a802:	6803      	ldr	r3, [r0, #0]
 801a804:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a806:	4798      	blx	r3
 801a808:	4b38      	ldr	r3, [pc, #224]	@ (801a8ec <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x18c>)
 801a80a:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801a80e:	f8b3 c000 	ldrh.w	ip, [r3]
 801a812:	f9bd 3022 	ldrsh.w	r3, [sp, #34]	@ 0x22
 801a816:	fb0c f505 	mul.w	r5, ip, r5
 801a81a:	f9bd e01c 	ldrsh.w	lr, [sp, #28]
 801a81e:	fb0c 2303 	mla	r3, ip, r3, r2
 801a822:	ebac 0c08 	sub.w	ip, ip, r8
 801a826:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801a82a:	ebae 0e08 	sub.w	lr, lr, r8
 801a82e:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801a832:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801a836:	4418      	add	r0, r3
 801a838:	ea4f 0e8e 	mov.w	lr, lr, lsl #2
 801a83c:	eb08 0348 	add.w	r3, r8, r8, lsl #1
 801a840:	4405      	add	r5, r0
 801a842:	42a8      	cmp	r0, r5
 801a844:	d24a      	bcs.n	801a8dc <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x17c>
 801a846:	eb00 0803 	add.w	r8, r0, r3
 801a84a:	4540      	cmp	r0, r8
 801a84c:	d243      	bcs.n	801a8d6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x176>
 801a84e:	78e2      	ldrb	r2, [r4, #3]
 801a850:	b15a      	cbz	r2, 801a86a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x10a>
 801a852:	2aff      	cmp	r2, #255	@ 0xff
 801a854:	f894 9000 	ldrb.w	r9, [r4]
 801a858:	d10a      	bne.n	801a870 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801a85a:	2eff      	cmp	r6, #255	@ 0xff
 801a85c:	d108      	bne.n	801a870 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x110>
 801a85e:	f880 9000 	strb.w	r9, [r0]
 801a862:	7862      	ldrb	r2, [r4, #1]
 801a864:	7042      	strb	r2, [r0, #1]
 801a866:	78a2      	ldrb	r2, [r4, #2]
 801a868:	7082      	strb	r2, [r0, #2]
 801a86a:	3003      	adds	r0, #3
 801a86c:	3404      	adds	r4, #4
 801a86e:	e7ec      	b.n	801a84a <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xea>
 801a870:	4372      	muls	r2, r6
 801a872:	1c51      	adds	r1, r2, #1
 801a874:	eb01 2112 	add.w	r1, r1, r2, lsr #8
 801a878:	1209      	asrs	r1, r1, #8
 801a87a:	fa1f fa81 	uxth.w	sl, r1
 801a87e:	43c9      	mvns	r1, r1
 801a880:	fb19 f90a 	smulbb	r9, r9, sl
 801a884:	b2ca      	uxtb	r2, r1
 801a886:	7801      	ldrb	r1, [r0, #0]
 801a888:	fb01 9902 	mla	r9, r1, r2, r9
 801a88c:	fa1f f989 	uxth.w	r9, r9
 801a890:	f109 0101 	add.w	r1, r9, #1
 801a894:	eb01 2919 	add.w	r9, r1, r9, lsr #8
 801a898:	ea4f 2929 	mov.w	r9, r9, asr #8
 801a89c:	f880 9000 	strb.w	r9, [r0]
 801a8a0:	f890 9001 	ldrb.w	r9, [r0, #1]
 801a8a4:	7861      	ldrb	r1, [r4, #1]
 801a8a6:	fb19 f902 	smulbb	r9, r9, r2
 801a8aa:	fb01 910a 	mla	r1, r1, sl, r9
 801a8ae:	b289      	uxth	r1, r1
 801a8b0:	f101 0901 	add.w	r9, r1, #1
 801a8b4:	eb09 2111 	add.w	r1, r9, r1, lsr #8
 801a8b8:	1209      	asrs	r1, r1, #8
 801a8ba:	7041      	strb	r1, [r0, #1]
 801a8bc:	7881      	ldrb	r1, [r0, #2]
 801a8be:	f894 9002 	ldrb.w	r9, [r4, #2]
 801a8c2:	fb11 f202 	smulbb	r2, r1, r2
 801a8c6:	fb09 220a 	mla	r2, r9, sl, r2
 801a8ca:	b292      	uxth	r2, r2
 801a8cc:	1c51      	adds	r1, r2, #1
 801a8ce:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801a8d2:	1212      	asrs	r2, r2, #8
 801a8d4:	e7c8      	b.n	801a868 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x108>
 801a8d6:	4460      	add	r0, ip
 801a8d8:	4474      	add	r4, lr
 801a8da:	e7b2      	b.n	801a842 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0xe2>
 801a8dc:	6838      	ldr	r0, [r7, #0]
 801a8de:	6803      	ldr	r3, [r0, #0]
 801a8e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a8e2:	4798      	blx	r3
 801a8e4:	e787      	b.n	801a7f6 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h+0x96>
 801a8e6:	bf00      	nop
 801a8e8:	240253a8 	.word	0x240253a8
 801a8ec:	240253a2 	.word	0x240253a2

0801a8f0 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb>:
 801a8f0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a8f4:	f89d 5034 	ldrb.w	r5, [sp, #52]	@ 0x34
 801a8f8:	4607      	mov	r7, r0
 801a8fa:	460c      	mov	r4, r1
 801a8fc:	4692      	mov	sl, r2
 801a8fe:	4699      	mov	r9, r3
 801a900:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a902:	b335      	cbz	r5, 801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a904:	4608      	mov	r0, r1
 801a906:	f7fb fe1d 	bl	8016544 <_ZNK8touchgfx6Bitmap8getWidthEv>
 801a90a:	4680      	mov	r8, r0
 801a90c:	4620      	mov	r0, r4
 801a90e:	f7fb fe4d 	bl	80165ac <_ZNK8touchgfx6Bitmap9getHeightEv>
 801a912:	f8ad 000e 	strh.w	r0, [sp, #14]
 801a916:	4620      	mov	r0, r4
 801a918:	f8ad a008 	strh.w	sl, [sp, #8]
 801a91c:	f8ad 900a 	strh.w	r9, [sp, #10]
 801a920:	f8ad 800c 	strh.w	r8, [sp, #12]
 801a924:	f7fb fefa 	bl	801671c <_ZNK8touchgfx6Bitmap9getFormatEv>
 801a928:	2810      	cmp	r0, #16
 801a92a:	d812      	bhi.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a92c:	e8df f000 	tbb	[pc, r0]
 801a930:	11092d24 	.word	0x11092d24
 801a934:	11111111 	.word	0x11111111
 801a938:	14111111 	.word	0x14111111
 801a93c:	4c111111 	.word	0x4c111111
 801a940:	3c          	.byte	0x3c
 801a941:	00          	.byte	0x00
 801a942:	4620      	mov	r0, r4
 801a944:	f7fb fe66 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a948:	462b      	mov	r3, r5
 801a94a:	4632      	mov	r2, r6
 801a94c:	a902      	add	r1, sp, #8
 801a94e:	f7ff ff07 	bl	801a760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801a952:	b004      	add	sp, #16
 801a954:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a958:	4620      	mov	r0, r4
 801a95a:	f7fb fe5b 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a95e:	4680      	mov	r8, r0
 801a960:	4620      	mov	r0, r4
 801a962:	f7fb fe87 	bl	8016674 <_ZNK8touchgfx6Bitmap12getExtraDataEv>
 801a966:	ab02      	add	r3, sp, #8
 801a968:	4602      	mov	r2, r0
 801a96a:	4641      	mov	r1, r8
 801a96c:	4638      	mov	r0, r7
 801a96e:	e9cd 6500 	strd	r6, r5, [sp]
 801a972:	f7ff fdbf 	bl	801a4f4 <_ZN8touchgfx8LCD24bpp10blitCopyL8EPKhS2_RKNS_4RectES5_h>
 801a976:	e7ec      	b.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a978:	4620      	mov	r0, r4
 801a97a:	f7fb fe4b 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a97e:	462b      	mov	r3, r5
 801a980:	4632      	mov	r2, r6
 801a982:	a902      	add	r1, sp, #8
 801a984:	f7ff fdf8 	bl	801a578 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801a988:	e7e3      	b.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a98a:	683b      	ldr	r3, [r7, #0]
 801a98c:	4620      	mov	r0, r4
 801a98e:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a992:	f7fb fe3f 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a996:	2300      	movs	r3, #0
 801a998:	4601      	mov	r1, r0
 801a99a:	aa02      	add	r2, sp, #8
 801a99c:	4638      	mov	r0, r7
 801a99e:	e9cd 5300 	strd	r5, r3, [sp]
 801a9a2:	4633      	mov	r3, r6
 801a9a4:	47c0      	blx	r8
 801a9a6:	e7d4      	b.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9a8:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801a9aa:	2f00      	cmp	r7, #0
 801a9ac:	d0d1      	beq.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9ae:	683b      	ldr	r3, [r7, #0]
 801a9b0:	f8d3 8008 	ldr.w	r8, [r3, #8]
 801a9b4:	4620      	mov	r0, r4
 801a9b6:	f7fb fe2d 	bl	8016614 <_ZNK8touchgfx6Bitmap7getDataEv>
 801a9ba:	9500      	str	r5, [sp, #0]
 801a9bc:	4601      	mov	r1, r0
 801a9be:	4633      	mov	r3, r6
 801a9c0:	aa02      	add	r2, sp, #8
 801a9c2:	4638      	mov	r0, r7
 801a9c4:	47c0      	blx	r8
 801a9c6:	e7c4      	b.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9c8:	6ebf      	ldr	r7, [r7, #104]	@ 0x68
 801a9ca:	2f00      	cmp	r7, #0
 801a9cc:	d0c1      	beq.n	801a952 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0x62>
 801a9ce:	683b      	ldr	r3, [r7, #0]
 801a9d0:	f8d3 800c 	ldr.w	r8, [r3, #12]
 801a9d4:	e7ee      	b.n	801a9b4 <_ZN8touchgfx8LCD24bpp17drawPartialBitmapERKNS_6BitmapEssRKNS_4RectEhb+0xc4>

0801a9d6 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb>:
 801a9d6:	b4f0      	push	{r4, r5, r6, r7}
 801a9d8:	4616      	mov	r6, r2
 801a9da:	461c      	mov	r4, r3
 801a9dc:	460d      	mov	r5, r1
 801a9de:	9a04      	ldr	r2, [sp, #16]
 801a9e0:	2e01      	cmp	r6, #1
 801a9e2:	f89d 3014 	ldrb.w	r3, [sp, #20]
 801a9e6:	d00e      	beq.n	801aa06 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x30>
 801a9e8:	d303      	bcc.n	801a9f2 <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x1c>
 801a9ea:	2e02      	cmp	r6, #2
 801a9ec:	d006      	beq.n	801a9fc <_ZN8touchgfx8LCD24bpp8blitCopyEPKhNS_6Bitmap12BitmapFormatERKNS_4RectES7_hb+0x26>
 801a9ee:	bcf0      	pop	{r4, r5, r6, r7}
 801a9f0:	4770      	bx	lr
 801a9f2:	4621      	mov	r1, r4
 801a9f4:	4628      	mov	r0, r5
 801a9f6:	bcf0      	pop	{r4, r5, r6, r7}
 801a9f8:	f7ff bdbe 	b.w	801a578 <_ZN8touchgfx8LCD24bpp14blitCopyRGB565EPKtRKNS_4RectES5_h>
 801a9fc:	4621      	mov	r1, r4
 801a9fe:	4628      	mov	r0, r5
 801aa00:	bcf0      	pop	{r4, r5, r6, r7}
 801aa02:	f7ff bead 	b.w	801a760 <_ZN8touchgfx8LCD24bpp16blitCopyARGB8888EPKmRKNS_4RectES5_h>
 801aa06:	6805      	ldr	r5, [r0, #0]
 801aa08:	2600      	movs	r6, #0
 801aa0a:	e9cd 3604 	strd	r3, r6, [sp, #16]
 801aa0e:	68ed      	ldr	r5, [r5, #12]
 801aa10:	4613      	mov	r3, r2
 801aa12:	4622      	mov	r2, r4
 801aa14:	46ac      	mov	ip, r5
 801aa16:	bcf0      	pop	{r4, r5, r6, r7}
 801aa18:	4760      	bx	ip
	...

0801aa1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>:
 801aa1c:	b160      	cbz	r0, 801aa38 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x1c>
 801aa1e:	2903      	cmp	r1, #3
 801aa20:	d818      	bhi.n	801aa54 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801aa22:	e8df f001 	tbb	[pc, r1]
 801aa26:	1902      	.short	0x1902
 801aa28:	1b06      	.short	0x1b06
 801aa2a:	4b0e      	ldr	r3, [pc, #56]	@ (801aa64 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801aa2c:	8818      	ldrh	r0, [r3, #0]
 801aa2e:	4240      	negs	r0, r0
 801aa30:	4770      	bx	lr
 801aa32:	4b0c      	ldr	r3, [pc, #48]	@ (801aa64 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x48>)
 801aa34:	8818      	ldrh	r0, [r3, #0]
 801aa36:	4770      	bx	lr
 801aa38:	2903      	cmp	r1, #3
 801aa3a:	d80b      	bhi.n	801aa54 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x38>
 801aa3c:	a301      	add	r3, pc, #4	@ (adr r3, 801aa44 <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE+0x28>)
 801aa3e:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801aa42:	bf00      	nop
 801aa44:	0801aa59 	.word	0x0801aa59
 801aa48:	0801aa33 	.word	0x0801aa33
 801aa4c:	0801aa5d 	.word	0x0801aa5d
 801aa50:	0801aa2b 	.word	0x0801aa2b
 801aa54:	2000      	movs	r0, #0
 801aa56:	4770      	bx	lr
 801aa58:	2001      	movs	r0, #1
 801aa5a:	4770      	bx	lr
 801aa5c:	f04f 30ff 	mov.w	r0, #4294967295
 801aa60:	4770      	bx	lr
 801aa62:	bf00      	nop
 801aa64:	240253a2 	.word	0x240253a2

0801aa68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>:
 801aa68:	b160      	cbz	r0, 801aa84 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x1c>
 801aa6a:	2903      	cmp	r1, #3
 801aa6c:	d818      	bhi.n	801aaa0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801aa6e:	e8df f001 	tbb	[pc, r1]
 801aa72:	0219      	.short	0x0219
 801aa74:	051b      	.short	0x051b
 801aa76:	4b0e      	ldr	r3, [pc, #56]	@ (801aab0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801aa78:	8818      	ldrh	r0, [r3, #0]
 801aa7a:	4770      	bx	lr
 801aa7c:	4b0c      	ldr	r3, [pc, #48]	@ (801aab0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x48>)
 801aa7e:	8818      	ldrh	r0, [r3, #0]
 801aa80:	4240      	negs	r0, r0
 801aa82:	4770      	bx	lr
 801aa84:	2903      	cmp	r1, #3
 801aa86:	d80b      	bhi.n	801aaa0 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x38>
 801aa88:	a301      	add	r3, pc, #4	@ (adr r3, 801aa90 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE+0x28>)
 801aa8a:	f853 f021 	ldr.w	pc, [r3, r1, lsl #2]
 801aa8e:	bf00      	nop
 801aa90:	0801aa77 	.word	0x0801aa77
 801aa94:	0801aaa9 	.word	0x0801aaa9
 801aa98:	0801aa7d 	.word	0x0801aa7d
 801aa9c:	0801aaa5 	.word	0x0801aaa5
 801aaa0:	2000      	movs	r0, #0
 801aaa2:	4770      	bx	lr
 801aaa4:	2001      	movs	r0, #1
 801aaa6:	4770      	bx	lr
 801aaa8:	f04f 30ff 	mov.w	r0, #4294967295
 801aaac:	4770      	bx	lr
 801aaae:	bf00      	nop
 801aab0:	240253a2 	.word	0x240253a2

0801aab4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE>:
 801aab4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aab8:	b097      	sub	sp, #92	@ 0x5c
 801aaba:	910b      	str	r1, [sp, #44]	@ 0x2c
 801aabc:	a912      	add	r1, sp, #72	@ 0x48
 801aabe:	f9bd 6080 	ldrsh.w	r6, [sp, #128]	@ 0x80
 801aac2:	f8bd 7088 	ldrh.w	r7, [sp, #136]	@ 0x88
 801aac6:	f8bd 408c 	ldrh.w	r4, [sp, #140]	@ 0x8c
 801aaca:	f89d 80a4 	ldrb.w	r8, [sp, #164]	@ 0xa4
 801aace:	f89d 90ac 	ldrb.w	r9, [sp, #172]	@ 0xac
 801aad2:	e881 000c 	stmia.w	r1, {r2, r3}
 801aad6:	f9bd 3084 	ldrsh.w	r3, [sp, #132]	@ 0x84
 801aada:	930a      	str	r3, [sp, #40]	@ 0x28
 801aadc:	f89d 309c 	ldrb.w	r3, [sp, #156]	@ 0x9c
 801aae0:	e9dd 2124 	ldrd	r2, r1, [sp, #144]	@ 0x90
 801aae4:	9311      	str	r3, [sp, #68]	@ 0x44
 801aae6:	f89d 30a8 	ldrb.w	r3, [sp, #168]	@ 0xa8
 801aaea:	798d      	ldrb	r5, [r1, #6]
 801aaec:	930c      	str	r3, [sp, #48]	@ 0x30
 801aaee:	7b4b      	ldrb	r3, [r1, #13]
 801aaf0:	0158      	lsls	r0, r3, #5
 801aaf2:	f400 7080 	and.w	r0, r0, #256	@ 0x100
 801aaf6:	4328      	orrs	r0, r5
 801aaf8:	9009      	str	r0, [sp, #36]	@ 0x24
 801aafa:	f000 817c 	beq.w	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801aafe:	011b      	lsls	r3, r3, #4
 801ab00:	79c8      	ldrb	r0, [r1, #7]
 801ab02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ab06:	4303      	orrs	r3, r0
 801ab08:	930e      	str	r3, [sp, #56]	@ 0x38
 801ab0a:	f000 8174 	beq.w	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ab0e:	f991 3009 	ldrsb.w	r3, [r1, #9]
 801ab12:	b29b      	uxth	r3, r3
 801ab14:	2f00      	cmp	r7, #0
 801ab16:	f000 8116 	beq.w	801ad46 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x292>
 801ab1a:	1aff      	subs	r7, r7, r3
 801ab1c:	b2bf      	uxth	r7, r7
 801ab1e:	043b      	lsls	r3, r7, #16
 801ab20:	d502      	bpl.n	801ab28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ab22:	1bf6      	subs	r6, r6, r7
 801ab24:	2700      	movs	r7, #0
 801ab26:	b236      	sxth	r6, r6
 801ab28:	f9b2 1000 	ldrsh.w	r1, [r2]
 801ab2c:	a812      	add	r0, sp, #72	@ 0x48
 801ab2e:	f8b2 a002 	ldrh.w	sl, [r2, #2]
 801ab32:	428e      	cmp	r6, r1
 801ab34:	b28b      	uxth	r3, r1
 801ab36:	f8bd 5024 	ldrh.w	r5, [sp, #36]	@ 0x24
 801ab3a:	bfbf      	itttt	lt
 801ab3c:	18ff      	addlt	r7, r7, r3
 801ab3e:	1bbe      	sublt	r6, r7, r6
 801ab40:	b2b7      	uxthlt	r7, r6
 801ab42:	460e      	movlt	r6, r1
 801ab44:	8891      	ldrh	r1, [r2, #4]
 801ab46:	440b      	add	r3, r1
 801ab48:	4631      	mov	r1, r6
 801ab4a:	b21b      	sxth	r3, r3
 801ab4c:	9310      	str	r3, [sp, #64]	@ 0x40
 801ab4e:	88d3      	ldrh	r3, [r2, #6]
 801ab50:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab52:	449a      	add	sl, r3
 801ab54:	fa0f f38a 	sxth.w	r3, sl
 801ab58:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801ab5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ab5e:	4bb5      	ldr	r3, [pc, #724]	@ (801ae34 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x380>)
 801ab60:	f893 b000 	ldrb.w	fp, [r3]
 801ab64:	f10b 3cff 	add.w	ip, fp, #4294967295
 801ab68:	f1dc 0300 	rsbs	r3, ip, #0
 801ab6c:	eb43 030c 	adc.w	r3, r3, ip
 801ab70:	930d      	str	r3, [sp, #52]	@ 0x34
 801ab72:	464b      	mov	r3, r9
 801ab74:	f7f8 f960 	bl	8012e38 <_ZN8touchgfx3LCD5realXERKNS_4RectEssNS_12TextRotationE>
 801ab78:	4631      	mov	r1, r6
 801ab7a:	f8ad 0054 	strh.w	r0, [sp, #84]	@ 0x54
 801ab7e:	464b      	mov	r3, r9
 801ab80:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ab82:	a812      	add	r0, sp, #72	@ 0x48
 801ab84:	f7f8 f975 	bl	8012e72 <_ZN8touchgfx3LCD5realYERKNS_4RectEssNS_12TextRotationE>
 801ab88:	a916      	add	r1, sp, #88	@ 0x58
 801ab8a:	f821 0d02 	strh.w	r0, [r1, #-2]!
 801ab8e:	a815      	add	r0, sp, #84	@ 0x54
 801ab90:	f7f8 fa9c 	bl	80130cc <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERsS1_>
 801ab94:	f1b9 0f00 	cmp.w	r9, #0
 801ab98:	f040 80d8 	bne.w	801ad4c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x298>
 801ab9c:	f1bb 0f01 	cmp.w	fp, #1
 801aba0:	f040 80dc 	bne.w	801ad5c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2a8>
 801aba4:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801aba6:	b153      	cbz	r3, 801abbe <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10a>
 801aba8:	2508      	movs	r5, #8
 801abaa:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801abac:	fb95 f3f8 	sdiv	r3, r5, r8
 801abb0:	1e5d      	subs	r5, r3, #1
 801abb2:	4415      	add	r5, r2
 801abb4:	fb95 f5f3 	sdiv	r5, r5, r3
 801abb8:	fb15 f503 	smulbb	r5, r5, r3
 801abbc:	b2ad      	uxth	r5, r5
 801abbe:	b907      	cbnz	r7, 801abc2 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x10e>
 801abc0:	b16c      	cbz	r4, 801abde <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x12a>
 801abc2:	fb04 7305 	mla	r3, r4, r5, r7
 801abc6:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801abc8:	ebaa 0a04 	sub.w	sl, sl, r4
 801abcc:	fb08 f303 	mul.w	r3, r8, r3
 801abd0:	fa1f fa8a 	uxth.w	sl, sl
 801abd4:	eb02 02d3 	add.w	r2, r2, r3, lsr #3
 801abd8:	f003 0407 	and.w	r4, r3, #7
 801abdc:	9226      	str	r2, [sp, #152]	@ 0x98
 801abde:	4649      	mov	r1, r9
 801abe0:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801abe2:	f7ff ff1b 	bl	801aa1c <_ZN8touchgfx8LCD24bpp9nextPixelEbNS_12TextRotationE>
 801abe6:	4683      	mov	fp, r0
 801abe8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801abea:	f7ff ff3d 	bl	801aa68 <_ZN8touchgfx8LCD24bpp8nextLineEbNS_12TextRotationE>
 801abee:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801abf0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801abf2:	4681      	mov	r9, r0
 801abf4:	1a9b      	subs	r3, r3, r2
 801abf6:	459a      	cmp	sl, r3
 801abf8:	bfa8      	it	ge
 801abfa:	469a      	movge	sl, r3
 801abfc:	f1ba 0f00 	cmp.w	sl, #0
 801ac00:	f340 80f9 	ble.w	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ac04:	1bf6      	subs	r6, r6, r7
 801ac06:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ac08:	1b9e      	subs	r6, r3, r6
 801ac0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac0c:	429e      	cmp	r6, r3
 801ac0e:	bfd4      	ite	le
 801ac10:	ebc7 0706 	rsble	r7, r7, r6
 801ac14:	ebc7 0703 	rsbgt	r7, r7, r3
 801ac18:	2f00      	cmp	r7, #0
 801ac1a:	f340 80ec 	ble.w	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ac1e:	1bed      	subs	r5, r5, r7
 801ac20:	fb08 f305 	mul.w	r3, r8, r5
 801ac24:	930d      	str	r3, [sp, #52]	@ 0x34
 801ac26:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ac28:	f3c3 4307 	ubfx	r3, r3, #16, #8
 801ac2c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ac2e:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ac30:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ac34:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ac36:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801ac38:	b2db      	uxtb	r3, r3
 801ac3a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ac3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ac3e:	2b00      	cmp	r3, #0
 801ac40:	f040 80de 	bne.w	801ae00 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x34c>
 801ac44:	4b7c      	ldr	r3, [pc, #496]	@ (801ae38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>)
 801ac46:	6818      	ldr	r0, [r3, #0]
 801ac48:	6803      	ldr	r3, [r0, #0]
 801ac4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ac4c:	4798      	blx	r3
 801ac4e:	2301      	movs	r3, #1
 801ac50:	4a7a      	ldr	r2, [pc, #488]	@ (801ae3c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x388>)
 801ac52:	eb0b 064b 	add.w	r6, fp, fp, lsl #1
 801ac56:	fb07 9b1b 	mls	fp, r7, fp, r9
 801ac5a:	fa03 f308 	lsl.w	r3, r3, r8
 801ac5e:	8811      	ldrh	r1, [r2, #0]
 801ac60:	f9bd 2054 	ldrsh.w	r2, [sp, #84]	@ 0x54
 801ac64:	eb0b 0b4b 	add.w	fp, fp, fp, lsl #1
 801ac68:	3b01      	subs	r3, #1
 801ac6a:	fb06 bb07 	mla	fp, r6, r7, fp
 801ac6e:	b2db      	uxtb	r3, r3
 801ac70:	930a      	str	r3, [sp, #40]	@ 0x28
 801ac72:	f9bd 3056 	ldrsh.w	r3, [sp, #86]	@ 0x56
 801ac76:	fb01 2303 	mla	r3, r1, r3, r2
 801ac7a:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ac7e:	18c3      	adds	r3, r0, r3
 801ac80:	9309      	str	r3, [sp, #36]	@ 0x24
 801ac82:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ac84:	781a      	ldrb	r2, [r3, #0]
 801ac86:	4122      	asrs	r2, r4
 801ac88:	b2d2      	uxtb	r2, r2
 801ac8a:	f11a 3aff 	adds.w	sl, sl, #4294967295
 801ac8e:	f0c0 80d7 	bcc.w	801ae40 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x38c>
 801ac92:	46be      	mov	lr, r7
 801ac94:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801ac96:	f11e 3eff 	adds.w	lr, lr, #4294967295
 801ac9a:	f0c0 80ba 	bcc.w	801ae12 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x35e>
 801ac9e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801aca0:	4013      	ands	r3, r2
 801aca2:	d041      	beq.n	801ad28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801aca4:	20ff      	movs	r0, #255	@ 0xff
 801aca6:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801aca8:	fb90 f5f5 	sdiv	r5, r0, r5
 801acac:	436b      	muls	r3, r5
 801acae:	2bfe      	cmp	r3, #254	@ 0xfe
 801acb0:	dd03      	ble.n	801acba <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x206>
 801acb2:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801acb4:	4285      	cmp	r5, r0
 801acb6:	f000 80a5 	beq.w	801ae04 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x350>
 801acba:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801acbc:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801acbe:	fb15 f303 	smulbb	r3, r5, r3
 801acc2:	b29b      	uxth	r3, r3
 801acc4:	1c5d      	adds	r5, r3, #1
 801acc6:	eb05 2313 	add.w	r3, r5, r3, lsr #8
 801acca:	780d      	ldrb	r5, [r1, #0]
 801accc:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801acd0:	fa1f fc83 	uxth.w	ip, r3
 801acd4:	43db      	mvns	r3, r3
 801acd6:	fb10 f90c 	smulbb	r9, r0, ip
 801acda:	b2db      	uxtb	r3, r3
 801acdc:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801acde:	fb05 9503 	mla	r5, r5, r3, r9
 801ace2:	b2ad      	uxth	r5, r5
 801ace4:	f105 0901 	add.w	r9, r5, #1
 801ace8:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801acec:	fb10 f90c 	smulbb	r9, r0, ip
 801acf0:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801acf2:	122d      	asrs	r5, r5, #8
 801acf4:	fb10 fc0c 	smulbb	ip, r0, ip
 801acf8:	700d      	strb	r5, [r1, #0]
 801acfa:	784d      	ldrb	r5, [r1, #1]
 801acfc:	fb05 9503 	mla	r5, r5, r3, r9
 801ad00:	b2ad      	uxth	r5, r5
 801ad02:	f105 0901 	add.w	r9, r5, #1
 801ad06:	eb09 2515 	add.w	r5, r9, r5, lsr #8
 801ad0a:	122d      	asrs	r5, r5, #8
 801ad0c:	704d      	strb	r5, [r1, #1]
 801ad0e:	788d      	ldrb	r5, [r1, #2]
 801ad10:	fb05 cc03 	mla	ip, r5, r3, ip
 801ad14:	fa1f fc8c 	uxth.w	ip, ip
 801ad18:	f10c 0301 	add.w	r3, ip, #1
 801ad1c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801ad20:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801ad24:	f881 c002 	strb.w	ip, [r1, #2]
 801ad28:	4444      	add	r4, r8
 801ad2a:	4431      	add	r1, r6
 801ad2c:	b2a4      	uxth	r4, r4
 801ad2e:	2c07      	cmp	r4, #7
 801ad30:	bf89      	itett	hi
 801ad32:	9b26      	ldrhi	r3, [sp, #152]	@ 0x98
 801ad34:	fa42 f208 	asrls.w	r2, r2, r8
 801ad38:	2400      	movhi	r4, #0
 801ad3a:	785a      	ldrbhi	r2, [r3, #1]
 801ad3c:	bf8a      	itet	hi
 801ad3e:	3301      	addhi	r3, #1
 801ad40:	b2d2      	uxtbls	r2, r2
 801ad42:	9326      	strhi	r3, [sp, #152]	@ 0x98
 801ad44:	e7a7      	b.n	801ac96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1e2>
 801ad46:	441e      	add	r6, r3
 801ad48:	b236      	sxth	r6, r6
 801ad4a:	e6ed      	b.n	801ab28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x74>
 801ad4c:	f1b9 0f01 	cmp.w	r9, #1
 801ad50:	f47f af28 	bne.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ad54:	f1bb 0f01 	cmp.w	fp, #1
 801ad58:	f47f af24 	bne.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ad5c:	f8df b0d8 	ldr.w	fp, [pc, #216]	@ 801ae38 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x384>
 801ad60:	f8db 0000 	ldr.w	r0, [fp]
 801ad64:	6803      	ldr	r3, [r0, #0]
 801ad66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ad68:	4798      	blx	r3
 801ad6a:	f410 7380 	ands.w	r3, r0, #256	@ 0x100
 801ad6e:	465a      	mov	r2, fp
 801ad70:	d006      	beq.n	801ad80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ad72:	f1b8 0f04 	cmp.w	r8, #4
 801ad76:	d141      	bne.n	801adfc <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x348>
 801ad78:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ad7a:	3300      	adds	r3, #0
 801ad7c:	bf18      	it	ne
 801ad7e:	2301      	movne	r3, #1
 801ad80:	0580      	lsls	r0, r0, #22
 801ad82:	d566      	bpl.n	801ae52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ad84:	f1b8 0f08 	cmp.w	r8, #8
 801ad88:	d163      	bne.n	801ae52 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x39e>
 801ad8a:	2b00      	cmp	r3, #0
 801ad8c:	bf0c      	ite	eq
 801ad8e:	f44f 7100 	moveq.w	r1, #512	@ 0x200
 801ad92:	f44f 7180 	movne.w	r1, #256	@ 0x100
 801ad96:	2f00      	cmp	r7, #0
 801ad98:	f47f af04 	bne.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ad9c:	2c00      	cmp	r4, #0
 801ad9e:	f47f af01 	bne.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ada2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ada4:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801ada6:	18f3      	adds	r3, r6, r3
 801ada8:	4283      	cmp	r3, r0
 801adaa:	f73f aefb 	bgt.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801adae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801adb0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adb2:	4403      	add	r3, r0
 801adb4:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801adb6:	4283      	cmp	r3, r0
 801adb8:	f73f aef4 	bgt.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801adbc:	f1b8 0f08 	cmp.w	r8, #8
 801adc0:	6810      	ldr	r0, [r2, #0]
 801adc2:	f04f 0600 	mov.w	r6, #0
 801adc6:	f8bd 3056 	ldrh.w	r3, [sp, #86]	@ 0x56
 801adca:	bf18      	it	ne
 801adcc:	3501      	addne	r5, #1
 801adce:	6804      	ldr	r4, [r0, #0]
 801add0:	f8bd 2054 	ldrh.w	r2, [sp, #84]	@ 0x54
 801add4:	bf18      	it	ne
 801add6:	f025 0501 	bicne.w	r5, r5, #1
 801adda:	e9cd 1605 	strd	r1, r6, [sp, #20]
 801adde:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801ade0:	bf18      	it	ne
 801ade2:	b2ad      	uxthne	r5, r5
 801ade4:	9104      	str	r1, [sp, #16]
 801ade6:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801ade8:	e9cd 5a00 	strd	r5, sl, [sp]
 801adec:	e9cd 5102 	strd	r5, r1, [sp, #8]
 801adf0:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801adf2:	6d64      	ldr	r4, [r4, #84]	@ 0x54
 801adf4:	47a0      	blx	r4
 801adf6:	b017      	add	sp, #92	@ 0x5c
 801adf8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801adfc:	2300      	movs	r3, #0
 801adfe:	e7bf      	b.n	801ad80 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2cc>
 801ae00:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801ae02:	e724      	b.n	801ac4e <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x19a>
 801ae04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801ae06:	700b      	strb	r3, [r1, #0]
 801ae08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ae0a:	704b      	strb	r3, [r1, #1]
 801ae0c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801ae0e:	708b      	strb	r3, [r1, #2]
 801ae10:	e78a      	b.n	801ad28 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x274>
 801ae12:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ae14:	b153      	cbz	r3, 801ae2c <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x378>
 801ae16:	441c      	add	r4, r3
 801ae18:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ae1a:	b2a4      	uxth	r4, r4
 801ae1c:	eb03 03d4 	add.w	r3, r3, r4, lsr #3
 801ae20:	f004 0407 	and.w	r4, r4, #7
 801ae24:	781a      	ldrb	r2, [r3, #0]
 801ae26:	9326      	str	r3, [sp, #152]	@ 0x98
 801ae28:	4122      	asrs	r2, r4
 801ae2a:	b2d2      	uxtb	r2, r2
 801ae2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae2e:	445b      	add	r3, fp
 801ae30:	9309      	str	r3, [sp, #36]	@ 0x24
 801ae32:	e72a      	b.n	801ac8a <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x1d6>
 801ae34:	240253a0 	.word	0x240253a0
 801ae38:	240253a8 	.word	0x240253a8
 801ae3c:	240253a2 	.word	0x240253a2
 801ae40:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ae42:	2b00      	cmp	r3, #0
 801ae44:	d1d7      	bne.n	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ae46:	4b06      	ldr	r3, [pc, #24]	@ (801ae60 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x3ac>)
 801ae48:	6818      	ldr	r0, [r3, #0]
 801ae4a:	6803      	ldr	r3, [r0, #0]
 801ae4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae4e:	4798      	blx	r3
 801ae50:	e7d1      	b.n	801adf6 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x342>
 801ae52:	2b00      	cmp	r3, #0
 801ae54:	f43f aea6 	beq.w	801aba4 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0xf0>
 801ae58:	f44f 7180 	mov.w	r1, #256	@ 0x100
 801ae5c:	e79b      	b.n	801ad96 <_ZN8touchgfx8LCD24bpp9drawGlyphEPtNS_4RectEssttRKS2_PKNS_9GlyphNodeEPKhhNS_9colortypeEhhNS_12TextRotationE+0x2e2>
 801ae5e:	bf00      	nop
 801ae60:	240253a8 	.word	0x240253a8

0801ae64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>:
 801ae64:	b538      	push	{r3, r4, r5, lr}
 801ae66:	4c15      	ldr	r4, [pc, #84]	@ (801aebc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x58>)
 801ae68:	4605      	mov	r5, r0
 801ae6a:	7823      	ldrb	r3, [r4, #0]
 801ae6c:	f3bf 8f5b 	dmb	ish
 801ae70:	07da      	lsls	r2, r3, #31
 801ae72:	d40b      	bmi.n	801ae8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ae74:	4620      	mov	r0, r4
 801ae76:	f006 f8d8 	bl	802102a <__cxa_guard_acquire>
 801ae7a:	b138      	cbz	r0, 801ae8c <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x28>
 801ae7c:	4620      	mov	r0, r4
 801ae7e:	f006 f8e0 	bl	8021042 <__cxa_guard_release>
 801ae82:	4a0f      	ldr	r2, [pc, #60]	@ (801aec0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801ae84:	490f      	ldr	r1, [pc, #60]	@ (801aec4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x60>)
 801ae86:	4810      	ldr	r0, [pc, #64]	@ (801aec8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801ae88:	f006 f8c8 	bl	802101c <__aeabi_atexit>
 801ae8c:	4c0f      	ldr	r4, [pc, #60]	@ (801aecc <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x68>)
 801ae8e:	7823      	ldrb	r3, [r4, #0]
 801ae90:	f3bf 8f5b 	dmb	ish
 801ae94:	07db      	lsls	r3, r3, #31
 801ae96:	d40b      	bmi.n	801aeb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801ae98:	4620      	mov	r0, r4
 801ae9a:	f006 f8c6 	bl	802102a <__cxa_guard_acquire>
 801ae9e:	b138      	cbz	r0, 801aeb0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x4c>
 801aea0:	4620      	mov	r0, r4
 801aea2:	f006 f8ce 	bl	8021042 <__cxa_guard_release>
 801aea6:	4a06      	ldr	r2, [pc, #24]	@ (801aec0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x5c>)
 801aea8:	4909      	ldr	r1, [pc, #36]	@ (801aed0 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x6c>)
 801aeaa:	480a      	ldr	r0, [pc, #40]	@ (801aed4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801aeac:	f006 f8b6 	bl	802101c <__aeabi_atexit>
 801aeb0:	4b05      	ldr	r3, [pc, #20]	@ (801aec8 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x64>)
 801aeb2:	616b      	str	r3, [r5, #20]
 801aeb4:	4b07      	ldr	r3, [pc, #28]	@ (801aed4 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv+0x70>)
 801aeb6:	61ab      	str	r3, [r5, #24]
 801aeb8:	bd38      	pop	{r3, r4, r5, pc}
 801aeba:	bf00      	nop
 801aebc:	2402548c 	.word	0x2402548c
 801aec0:	24000000 	.word	0x24000000
 801aec4:	08018155 	.word	0x08018155
 801aec8:	240000f8 	.word	0x240000f8
 801aecc:	24025490 	.word	0x24025490
 801aed0:	08018153 	.word	0x08018153
 801aed4:	240000fc 	.word	0x240000fc

0801aed8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>:
 801aed8:	b538      	push	{r3, r4, r5, lr}
 801aeda:	4c15      	ldr	r4, [pc, #84]	@ (801af30 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x58>)
 801aedc:	4605      	mov	r5, r0
 801aede:	7823      	ldrb	r3, [r4, #0]
 801aee0:	f3bf 8f5b 	dmb	ish
 801aee4:	07da      	lsls	r2, r3, #31
 801aee6:	d40b      	bmi.n	801af00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801aee8:	4620      	mov	r0, r4
 801aeea:	f006 f89e 	bl	802102a <__cxa_guard_acquire>
 801aeee:	b138      	cbz	r0, 801af00 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x28>
 801aef0:	4620      	mov	r0, r4
 801aef2:	f006 f8a6 	bl	8021042 <__cxa_guard_release>
 801aef6:	4a0f      	ldr	r2, [pc, #60]	@ (801af34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801aef8:	490f      	ldr	r1, [pc, #60]	@ (801af38 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x60>)
 801aefa:	4810      	ldr	r0, [pc, #64]	@ (801af3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801aefc:	f006 f88e 	bl	802101c <__aeabi_atexit>
 801af00:	4c0f      	ldr	r4, [pc, #60]	@ (801af40 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x68>)
 801af02:	7823      	ldrb	r3, [r4, #0]
 801af04:	f3bf 8f5b 	dmb	ish
 801af08:	07db      	lsls	r3, r3, #31
 801af0a:	d40b      	bmi.n	801af24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801af0c:	4620      	mov	r0, r4
 801af0e:	f006 f88c 	bl	802102a <__cxa_guard_acquire>
 801af12:	b138      	cbz	r0, 801af24 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x4c>
 801af14:	4620      	mov	r0, r4
 801af16:	f006 f894 	bl	8021042 <__cxa_guard_release>
 801af1a:	4a06      	ldr	r2, [pc, #24]	@ (801af34 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x5c>)
 801af1c:	4909      	ldr	r1, [pc, #36]	@ (801af44 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x6c>)
 801af1e:	480a      	ldr	r0, [pc, #40]	@ (801af48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801af20:	f006 f87c 	bl	802101c <__aeabi_atexit>
 801af24:	4b05      	ldr	r3, [pc, #20]	@ (801af3c <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x64>)
 801af26:	60eb      	str	r3, [r5, #12]
 801af28:	4b07      	ldr	r3, [pc, #28]	@ (801af48 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv+0x70>)
 801af2a:	612b      	str	r3, [r5, #16]
 801af2c:	bd38      	pop	{r3, r4, r5, pc}
 801af2e:	bf00      	nop
 801af30:	2402546c 	.word	0x2402546c
 801af34:	24000000 	.word	0x24000000
 801af38:	08018159 	.word	0x08018159
 801af3c:	240000d8 	.word	0x240000d8
 801af40:	24025470 	.word	0x24025470
 801af44:	08018157 	.word	0x08018157
 801af48:	240000dc 	.word	0x240000dc

0801af4c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>:
 801af4c:	b510      	push	{r4, lr}
 801af4e:	4604      	mov	r4, r0
 801af50:	f7ff ff88 	bl	801ae64 <_ZN8touchgfx8LCD24bpp50enableTextureMapperL8_RGB888_BilinearInterpolationEv>
 801af54:	4620      	mov	r0, r4
 801af56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801af5a:	f7ff bfbd 	b.w	801aed8 <_ZN8touchgfx8LCD24bpp44enableTextureMapperL8_RGB888_NearestNeighborEv>
	...

0801af60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>:
 801af60:	b538      	push	{r3, r4, r5, lr}
 801af62:	4c15      	ldr	r4, [pc, #84]	@ (801afb8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x58>)
 801af64:	4605      	mov	r5, r0
 801af66:	7823      	ldrb	r3, [r4, #0]
 801af68:	f3bf 8f5b 	dmb	ish
 801af6c:	07da      	lsls	r2, r3, #31
 801af6e:	d40b      	bmi.n	801af88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801af70:	4620      	mov	r0, r4
 801af72:	f006 f85a 	bl	802102a <__cxa_guard_acquire>
 801af76:	b138      	cbz	r0, 801af88 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x28>
 801af78:	4620      	mov	r0, r4
 801af7a:	f006 f862 	bl	8021042 <__cxa_guard_release>
 801af7e:	4a0f      	ldr	r2, [pc, #60]	@ (801afbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801af80:	490f      	ldr	r1, [pc, #60]	@ (801afc0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x60>)
 801af82:	4810      	ldr	r0, [pc, #64]	@ (801afc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801af84:	f006 f84a 	bl	802101c <__aeabi_atexit>
 801af88:	4c0f      	ldr	r4, [pc, #60]	@ (801afc8 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x68>)
 801af8a:	7823      	ldrb	r3, [r4, #0]
 801af8c:	f3bf 8f5b 	dmb	ish
 801af90:	07db      	lsls	r3, r3, #31
 801af92:	d40b      	bmi.n	801afac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801af94:	4620      	mov	r0, r4
 801af96:	f006 f848 	bl	802102a <__cxa_guard_acquire>
 801af9a:	b138      	cbz	r0, 801afac <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x4c>
 801af9c:	4620      	mov	r0, r4
 801af9e:	f006 f850 	bl	8021042 <__cxa_guard_release>
 801afa2:	4a06      	ldr	r2, [pc, #24]	@ (801afbc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x5c>)
 801afa4:	4909      	ldr	r1, [pc, #36]	@ (801afcc <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x6c>)
 801afa6:	480a      	ldr	r0, [pc, #40]	@ (801afd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801afa8:	f006 f838 	bl	802101c <__aeabi_atexit>
 801afac:	4b05      	ldr	r3, [pc, #20]	@ (801afc4 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x64>)
 801afae:	626b      	str	r3, [r5, #36]	@ 0x24
 801afb0:	4b07      	ldr	r3, [pc, #28]	@ (801afd0 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv+0x70>)
 801afb2:	62ab      	str	r3, [r5, #40]	@ 0x28
 801afb4:	bd38      	pop	{r3, r4, r5, pc}
 801afb6:	bf00      	nop
 801afb8:	24025494 	.word	0x24025494
 801afbc:	24000000 	.word	0x24000000
 801afc0:	0801814d 	.word	0x0801814d
 801afc4:	24000100 	.word	0x24000100
 801afc8:	24025498 	.word	0x24025498
 801afcc:	0801814b 	.word	0x0801814b
 801afd0:	24000104 	.word	0x24000104

0801afd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>:
 801afd4:	b538      	push	{r3, r4, r5, lr}
 801afd6:	4c15      	ldr	r4, [pc, #84]	@ (801b02c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x58>)
 801afd8:	4605      	mov	r5, r0
 801afda:	7823      	ldrb	r3, [r4, #0]
 801afdc:	f3bf 8f5b 	dmb	ish
 801afe0:	07da      	lsls	r2, r3, #31
 801afe2:	d40b      	bmi.n	801affc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801afe4:	4620      	mov	r0, r4
 801afe6:	f006 f820 	bl	802102a <__cxa_guard_acquire>
 801afea:	b138      	cbz	r0, 801affc <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x28>
 801afec:	4620      	mov	r0, r4
 801afee:	f006 f828 	bl	8021042 <__cxa_guard_release>
 801aff2:	4a0f      	ldr	r2, [pc, #60]	@ (801b030 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801aff4:	490f      	ldr	r1, [pc, #60]	@ (801b034 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x60>)
 801aff6:	4810      	ldr	r0, [pc, #64]	@ (801b038 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801aff8:	f006 f810 	bl	802101c <__aeabi_atexit>
 801affc:	4c0f      	ldr	r4, [pc, #60]	@ (801b03c <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x68>)
 801affe:	7823      	ldrb	r3, [r4, #0]
 801b000:	f3bf 8f5b 	dmb	ish
 801b004:	07db      	lsls	r3, r3, #31
 801b006:	d40b      	bmi.n	801b020 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b008:	4620      	mov	r0, r4
 801b00a:	f006 f80e 	bl	802102a <__cxa_guard_acquire>
 801b00e:	b138      	cbz	r0, 801b020 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x4c>
 801b010:	4620      	mov	r0, r4
 801b012:	f006 f816 	bl	8021042 <__cxa_guard_release>
 801b016:	4a06      	ldr	r2, [pc, #24]	@ (801b030 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x5c>)
 801b018:	4909      	ldr	r1, [pc, #36]	@ (801b040 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x6c>)
 801b01a:	480a      	ldr	r0, [pc, #40]	@ (801b044 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b01c:	f005 fffe 	bl	802101c <__aeabi_atexit>
 801b020:	4b05      	ldr	r3, [pc, #20]	@ (801b038 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x64>)
 801b022:	61eb      	str	r3, [r5, #28]
 801b024:	4b07      	ldr	r3, [pc, #28]	@ (801b044 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv+0x70>)
 801b026:	622b      	str	r3, [r5, #32]
 801b028:	bd38      	pop	{r3, r4, r5, pc}
 801b02a:	bf00      	nop
 801b02c:	24025474 	.word	0x24025474
 801b030:	24000000 	.word	0x24000000
 801b034:	08018151 	.word	0x08018151
 801b038:	240000e0 	.word	0x240000e0
 801b03c:	24025478 	.word	0x24025478
 801b040:	0801814f 	.word	0x0801814f
 801b044:	240000e4 	.word	0x240000e4

0801b048 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>:
 801b048:	b510      	push	{r4, lr}
 801b04a:	4604      	mov	r4, r0
 801b04c:	f7ff ff88 	bl	801af60 <_ZN8touchgfx8LCD24bpp52enableTextureMapperL8_ARGB8888_BilinearInterpolationEv>
 801b050:	4620      	mov	r0, r4
 801b052:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b056:	f7ff bfbd 	b.w	801afd4 <_ZN8touchgfx8LCD24bpp46enableTextureMapperL8_ARGB8888_NearestNeighborEv>
	...

0801b05c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>:
 801b05c:	b538      	push	{r3, r4, r5, lr}
 801b05e:	4c15      	ldr	r4, [pc, #84]	@ (801b0b4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x58>)
 801b060:	4605      	mov	r5, r0
 801b062:	7823      	ldrb	r3, [r4, #0]
 801b064:	f3bf 8f5b 	dmb	ish
 801b068:	07da      	lsls	r2, r3, #31
 801b06a:	d40b      	bmi.n	801b084 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b06c:	4620      	mov	r0, r4
 801b06e:	f005 ffdc 	bl	802102a <__cxa_guard_acquire>
 801b072:	b138      	cbz	r0, 801b084 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x28>
 801b074:	4620      	mov	r0, r4
 801b076:	f005 ffe4 	bl	8021042 <__cxa_guard_release>
 801b07a:	4a0f      	ldr	r2, [pc, #60]	@ (801b0b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b07c:	490f      	ldr	r1, [pc, #60]	@ (801b0bc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x60>)
 801b07e:	4810      	ldr	r0, [pc, #64]	@ (801b0c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b080:	f005 ffcc 	bl	802101c <__aeabi_atexit>
 801b084:	4c0f      	ldr	r4, [pc, #60]	@ (801b0c4 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x68>)
 801b086:	7823      	ldrb	r3, [r4, #0]
 801b088:	f3bf 8f5b 	dmb	ish
 801b08c:	07db      	lsls	r3, r3, #31
 801b08e:	d40b      	bmi.n	801b0a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b090:	4620      	mov	r0, r4
 801b092:	f005 ffca 	bl	802102a <__cxa_guard_acquire>
 801b096:	b138      	cbz	r0, 801b0a8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x4c>
 801b098:	4620      	mov	r0, r4
 801b09a:	f005 ffd2 	bl	8021042 <__cxa_guard_release>
 801b09e:	4a06      	ldr	r2, [pc, #24]	@ (801b0b8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x5c>)
 801b0a0:	4909      	ldr	r1, [pc, #36]	@ (801b0c8 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x6c>)
 801b0a2:	480a      	ldr	r0, [pc, #40]	@ (801b0cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b0a4:	f005 ffba 	bl	802101c <__aeabi_atexit>
 801b0a8:	4b05      	ldr	r3, [pc, #20]	@ (801b0c0 <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x64>)
 801b0aa:	636b      	str	r3, [r5, #52]	@ 0x34
 801b0ac:	4b07      	ldr	r3, [pc, #28]	@ (801b0cc <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv+0x70>)
 801b0ae:	63ab      	str	r3, [r5, #56]	@ 0x38
 801b0b0:	bd38      	pop	{r3, r4, r5, pc}
 801b0b2:	bf00      	nop
 801b0b4:	2402547c 	.word	0x2402547c
 801b0b8:	24000000 	.word	0x24000000
 801b0bc:	08018145 	.word	0x08018145
 801b0c0:	240000e8 	.word	0x240000e8
 801b0c4:	24025480 	.word	0x24025480
 801b0c8:	08018143 	.word	0x08018143
 801b0cc:	240000ec 	.word	0x240000ec

0801b0d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>:
 801b0d0:	b538      	push	{r3, r4, r5, lr}
 801b0d2:	4c15      	ldr	r4, [pc, #84]	@ (801b128 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x58>)
 801b0d4:	4605      	mov	r5, r0
 801b0d6:	7823      	ldrb	r3, [r4, #0]
 801b0d8:	f3bf 8f5b 	dmb	ish
 801b0dc:	07da      	lsls	r2, r3, #31
 801b0de:	d40b      	bmi.n	801b0f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b0e0:	4620      	mov	r0, r4
 801b0e2:	f005 ffa2 	bl	802102a <__cxa_guard_acquire>
 801b0e6:	b138      	cbz	r0, 801b0f8 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x28>
 801b0e8:	4620      	mov	r0, r4
 801b0ea:	f005 ffaa 	bl	8021042 <__cxa_guard_release>
 801b0ee:	4a0f      	ldr	r2, [pc, #60]	@ (801b12c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b0f0:	490f      	ldr	r1, [pc, #60]	@ (801b130 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x60>)
 801b0f2:	4810      	ldr	r0, [pc, #64]	@ (801b134 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b0f4:	f005 ff92 	bl	802101c <__aeabi_atexit>
 801b0f8:	4c0f      	ldr	r4, [pc, #60]	@ (801b138 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x68>)
 801b0fa:	7823      	ldrb	r3, [r4, #0]
 801b0fc:	f3bf 8f5b 	dmb	ish
 801b100:	07db      	lsls	r3, r3, #31
 801b102:	d40b      	bmi.n	801b11c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b104:	4620      	mov	r0, r4
 801b106:	f005 ff90 	bl	802102a <__cxa_guard_acquire>
 801b10a:	b138      	cbz	r0, 801b11c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x4c>
 801b10c:	4620      	mov	r0, r4
 801b10e:	f005 ff98 	bl	8021042 <__cxa_guard_release>
 801b112:	4a06      	ldr	r2, [pc, #24]	@ (801b12c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x5c>)
 801b114:	4909      	ldr	r1, [pc, #36]	@ (801b13c <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x6c>)
 801b116:	480a      	ldr	r0, [pc, #40]	@ (801b140 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b118:	f005 ff80 	bl	802101c <__aeabi_atexit>
 801b11c:	4b05      	ldr	r3, [pc, #20]	@ (801b134 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x64>)
 801b11e:	62eb      	str	r3, [r5, #44]	@ 0x2c
 801b120:	4b07      	ldr	r3, [pc, #28]	@ (801b140 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv+0x70>)
 801b122:	632b      	str	r3, [r5, #48]	@ 0x30
 801b124:	bd38      	pop	{r3, r4, r5, pc}
 801b126:	bf00      	nop
 801b128:	24025454 	.word	0x24025454
 801b12c:	24000000 	.word	0x24000000
 801b130:	08018149 	.word	0x08018149
 801b134:	240000c0 	.word	0x240000c0
 801b138:	24025458 	.word	0x24025458
 801b13c:	08018147 	.word	0x08018147
 801b140:	240000c4 	.word	0x240000c4

0801b144 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>:
 801b144:	b510      	push	{r4, lr}
 801b146:	4604      	mov	r4, r0
 801b148:	f7ff ff88 	bl	801b05c <_ZN8touchgfx8LCD24bpp47enableTextureMapperRGB888_BilinearInterpolationEv>
 801b14c:	4620      	mov	r0, r4
 801b14e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b152:	f7ff bfbd 	b.w	801b0d0 <_ZN8touchgfx8LCD24bpp41enableTextureMapperRGB888_NearestNeighborEv>
	...

0801b158 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>:
 801b158:	b538      	push	{r3, r4, r5, lr}
 801b15a:	4c15      	ldr	r4, [pc, #84]	@ (801b1b0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x58>)
 801b15c:	4605      	mov	r5, r0
 801b15e:	7823      	ldrb	r3, [r4, #0]
 801b160:	f3bf 8f5b 	dmb	ish
 801b164:	07da      	lsls	r2, r3, #31
 801b166:	d40b      	bmi.n	801b180 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b168:	4620      	mov	r0, r4
 801b16a:	f005 ff5e 	bl	802102a <__cxa_guard_acquire>
 801b16e:	b138      	cbz	r0, 801b180 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x28>
 801b170:	4620      	mov	r0, r4
 801b172:	f005 ff66 	bl	8021042 <__cxa_guard_release>
 801b176:	4a0f      	ldr	r2, [pc, #60]	@ (801b1b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b178:	490f      	ldr	r1, [pc, #60]	@ (801b1b8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x60>)
 801b17a:	4810      	ldr	r0, [pc, #64]	@ (801b1bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b17c:	f005 ff4e 	bl	802101c <__aeabi_atexit>
 801b180:	4c0f      	ldr	r4, [pc, #60]	@ (801b1c0 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x68>)
 801b182:	7823      	ldrb	r3, [r4, #0]
 801b184:	f3bf 8f5b 	dmb	ish
 801b188:	07db      	lsls	r3, r3, #31
 801b18a:	d40b      	bmi.n	801b1a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b18c:	4620      	mov	r0, r4
 801b18e:	f005 ff4c 	bl	802102a <__cxa_guard_acquire>
 801b192:	b138      	cbz	r0, 801b1a4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x4c>
 801b194:	4620      	mov	r0, r4
 801b196:	f005 ff54 	bl	8021042 <__cxa_guard_release>
 801b19a:	4a06      	ldr	r2, [pc, #24]	@ (801b1b4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x5c>)
 801b19c:	4909      	ldr	r1, [pc, #36]	@ (801b1c4 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x6c>)
 801b19e:	480a      	ldr	r0, [pc, #40]	@ (801b1c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b1a0:	f005 ff3c 	bl	802101c <__aeabi_atexit>
 801b1a4:	4b05      	ldr	r3, [pc, #20]	@ (801b1bc <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x64>)
 801b1a6:	646b      	str	r3, [r5, #68]	@ 0x44
 801b1a8:	4b07      	ldr	r3, [pc, #28]	@ (801b1c8 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv+0x70>)
 801b1aa:	64ab      	str	r3, [r5, #72]	@ 0x48
 801b1ac:	bd38      	pop	{r3, r4, r5, pc}
 801b1ae:	bf00      	nop
 801b1b0:	24025484 	.word	0x24025484
 801b1b4:	24000000 	.word	0x24000000
 801b1b8:	0801813d 	.word	0x0801813d
 801b1bc:	240000f0 	.word	0x240000f0
 801b1c0:	24025488 	.word	0x24025488
 801b1c4:	0801813b 	.word	0x0801813b
 801b1c8:	240000f4 	.word	0x240000f4

0801b1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>:
 801b1cc:	b538      	push	{r3, r4, r5, lr}
 801b1ce:	4c15      	ldr	r4, [pc, #84]	@ (801b224 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x58>)
 801b1d0:	4605      	mov	r5, r0
 801b1d2:	7823      	ldrb	r3, [r4, #0]
 801b1d4:	f3bf 8f5b 	dmb	ish
 801b1d8:	07da      	lsls	r2, r3, #31
 801b1da:	d40b      	bmi.n	801b1f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b1dc:	4620      	mov	r0, r4
 801b1de:	f005 ff24 	bl	802102a <__cxa_guard_acquire>
 801b1e2:	b138      	cbz	r0, 801b1f4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x28>
 801b1e4:	4620      	mov	r0, r4
 801b1e6:	f005 ff2c 	bl	8021042 <__cxa_guard_release>
 801b1ea:	4a0f      	ldr	r2, [pc, #60]	@ (801b228 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b1ec:	490f      	ldr	r1, [pc, #60]	@ (801b22c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x60>)
 801b1ee:	4810      	ldr	r0, [pc, #64]	@ (801b230 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b1f0:	f005 ff14 	bl	802101c <__aeabi_atexit>
 801b1f4:	4c0f      	ldr	r4, [pc, #60]	@ (801b234 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x68>)
 801b1f6:	7823      	ldrb	r3, [r4, #0]
 801b1f8:	f3bf 8f5b 	dmb	ish
 801b1fc:	07db      	lsls	r3, r3, #31
 801b1fe:	d40b      	bmi.n	801b218 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b200:	4620      	mov	r0, r4
 801b202:	f005 ff12 	bl	802102a <__cxa_guard_acquire>
 801b206:	b138      	cbz	r0, 801b218 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x4c>
 801b208:	4620      	mov	r0, r4
 801b20a:	f005 ff1a 	bl	8021042 <__cxa_guard_release>
 801b20e:	4a06      	ldr	r2, [pc, #24]	@ (801b228 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x5c>)
 801b210:	4909      	ldr	r1, [pc, #36]	@ (801b238 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x6c>)
 801b212:	480a      	ldr	r0, [pc, #40]	@ (801b23c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b214:	f005 ff02 	bl	802101c <__aeabi_atexit>
 801b218:	4b05      	ldr	r3, [pc, #20]	@ (801b230 <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x64>)
 801b21a:	63eb      	str	r3, [r5, #60]	@ 0x3c
 801b21c:	4b07      	ldr	r3, [pc, #28]	@ (801b23c <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv+0x70>)
 801b21e:	642b      	str	r3, [r5, #64]	@ 0x40
 801b220:	bd38      	pop	{r3, r4, r5, pc}
 801b222:	bf00      	nop
 801b224:	24025464 	.word	0x24025464
 801b228:	24000000 	.word	0x24000000
 801b22c:	08018141 	.word	0x08018141
 801b230:	240000d0 	.word	0x240000d0
 801b234:	24025468 	.word	0x24025468
 801b238:	0801813f 	.word	0x0801813f
 801b23c:	240000d4 	.word	0x240000d4

0801b240 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>:
 801b240:	b510      	push	{r4, lr}
 801b242:	4604      	mov	r4, r0
 801b244:	f7ff ff88 	bl	801b158 <_ZN8touchgfx8LCD24bpp49enableTextureMapperARGB8888_BilinearInterpolationEv>
 801b248:	4620      	mov	r0, r4
 801b24a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b24e:	f7ff bfbd 	b.w	801b1cc <_ZN8touchgfx8LCD24bpp43enableTextureMapperARGB8888_NearestNeighborEv>
	...

0801b254 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>:
 801b254:	b538      	push	{r3, r4, r5, lr}
 801b256:	4c15      	ldr	r4, [pc, #84]	@ (801b2ac <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x58>)
 801b258:	4605      	mov	r5, r0
 801b25a:	7823      	ldrb	r3, [r4, #0]
 801b25c:	f3bf 8f5b 	dmb	ish
 801b260:	07da      	lsls	r2, r3, #31
 801b262:	d40b      	bmi.n	801b27c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b264:	4620      	mov	r0, r4
 801b266:	f005 fee0 	bl	802102a <__cxa_guard_acquire>
 801b26a:	b138      	cbz	r0, 801b27c <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x28>
 801b26c:	4620      	mov	r0, r4
 801b26e:	f005 fee8 	bl	8021042 <__cxa_guard_release>
 801b272:	4a0f      	ldr	r2, [pc, #60]	@ (801b2b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b274:	490f      	ldr	r1, [pc, #60]	@ (801b2b4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x60>)
 801b276:	4810      	ldr	r0, [pc, #64]	@ (801b2b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b278:	f005 fed0 	bl	802101c <__aeabi_atexit>
 801b27c:	4c0f      	ldr	r4, [pc, #60]	@ (801b2bc <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x68>)
 801b27e:	7823      	ldrb	r3, [r4, #0]
 801b280:	f3bf 8f5b 	dmb	ish
 801b284:	07db      	lsls	r3, r3, #31
 801b286:	d40b      	bmi.n	801b2a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b288:	4620      	mov	r0, r4
 801b28a:	f005 fece 	bl	802102a <__cxa_guard_acquire>
 801b28e:	b138      	cbz	r0, 801b2a0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x4c>
 801b290:	4620      	mov	r0, r4
 801b292:	f005 fed6 	bl	8021042 <__cxa_guard_release>
 801b296:	4a06      	ldr	r2, [pc, #24]	@ (801b2b0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x5c>)
 801b298:	4909      	ldr	r1, [pc, #36]	@ (801b2c0 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x6c>)
 801b29a:	480a      	ldr	r0, [pc, #40]	@ (801b2c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b29c:	f005 febe 	bl	802101c <__aeabi_atexit>
 801b2a0:	4b05      	ldr	r3, [pc, #20]	@ (801b2b8 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x64>)
 801b2a2:	656b      	str	r3, [r5, #84]	@ 0x54
 801b2a4:	4b07      	ldr	r3, [pc, #28]	@ (801b2c4 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv+0x70>)
 801b2a6:	65ab      	str	r3, [r5, #88]	@ 0x58
 801b2a8:	bd38      	pop	{r3, r4, r5, pc}
 801b2aa:	bf00      	nop
 801b2ac:	2402545c 	.word	0x2402545c
 801b2b0:	24000000 	.word	0x24000000
 801b2b4:	08018135 	.word	0x08018135
 801b2b8:	240000c8 	.word	0x240000c8
 801b2bc:	24025460 	.word	0x24025460
 801b2c0:	08018133 	.word	0x08018133
 801b2c4:	240000cc 	.word	0x240000cc

0801b2c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>:
 801b2c8:	b538      	push	{r3, r4, r5, lr}
 801b2ca:	4c15      	ldr	r4, [pc, #84]	@ (801b320 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x58>)
 801b2cc:	4605      	mov	r5, r0
 801b2ce:	7823      	ldrb	r3, [r4, #0]
 801b2d0:	f3bf 8f5b 	dmb	ish
 801b2d4:	07da      	lsls	r2, r3, #31
 801b2d6:	d40b      	bmi.n	801b2f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b2d8:	4620      	mov	r0, r4
 801b2da:	f005 fea6 	bl	802102a <__cxa_guard_acquire>
 801b2de:	b138      	cbz	r0, 801b2f0 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x28>
 801b2e0:	4620      	mov	r0, r4
 801b2e2:	f005 feae 	bl	8021042 <__cxa_guard_release>
 801b2e6:	4a0f      	ldr	r2, [pc, #60]	@ (801b324 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b2e8:	490f      	ldr	r1, [pc, #60]	@ (801b328 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x60>)
 801b2ea:	4810      	ldr	r0, [pc, #64]	@ (801b32c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b2ec:	f005 fe96 	bl	802101c <__aeabi_atexit>
 801b2f0:	4c0f      	ldr	r4, [pc, #60]	@ (801b330 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x68>)
 801b2f2:	7823      	ldrb	r3, [r4, #0]
 801b2f4:	f3bf 8f5b 	dmb	ish
 801b2f8:	07db      	lsls	r3, r3, #31
 801b2fa:	d40b      	bmi.n	801b314 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b2fc:	4620      	mov	r0, r4
 801b2fe:	f005 fe94 	bl	802102a <__cxa_guard_acquire>
 801b302:	b138      	cbz	r0, 801b314 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x4c>
 801b304:	4620      	mov	r0, r4
 801b306:	f005 fe9c 	bl	8021042 <__cxa_guard_release>
 801b30a:	4a06      	ldr	r2, [pc, #24]	@ (801b324 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x5c>)
 801b30c:	4909      	ldr	r1, [pc, #36]	@ (801b334 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x6c>)
 801b30e:	480a      	ldr	r0, [pc, #40]	@ (801b338 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b310:	f005 fe84 	bl	802101c <__aeabi_atexit>
 801b314:	4b05      	ldr	r3, [pc, #20]	@ (801b32c <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x64>)
 801b316:	64eb      	str	r3, [r5, #76]	@ 0x4c
 801b318:	4b07      	ldr	r3, [pc, #28]	@ (801b338 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv+0x70>)
 801b31a:	652b      	str	r3, [r5, #80]	@ 0x50
 801b31c:	bd38      	pop	{r3, r4, r5, pc}
 801b31e:	bf00      	nop
 801b320:	2402544c 	.word	0x2402544c
 801b324:	24000000 	.word	0x24000000
 801b328:	08018139 	.word	0x08018139
 801b32c:	240000b8 	.word	0x240000b8
 801b330:	24025450 	.word	0x24025450
 801b334:	08018137 	.word	0x08018137
 801b338:	240000bc 	.word	0x240000bc

0801b33c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>:
 801b33c:	b510      	push	{r4, lr}
 801b33e:	4604      	mov	r4, r0
 801b340:	f7ff ff88 	bl	801b254 <_ZN8touchgfx8LCD24bpp43enableTextureMapperA4_BilinearInterpolationEv>
 801b344:	4620      	mov	r0, r4
 801b346:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b34a:	f7ff bfbd 	b.w	801b2c8 <_ZN8touchgfx8LCD24bpp37enableTextureMapperA4_NearestNeighborEv>

0801b34e <_ZN8touchgfx8LCD24bpp22enableTextureMapperAllEv>:
 801b34e:	b510      	push	{r4, lr}
 801b350:	4604      	mov	r4, r0
 801b352:	f7ff fff3 	bl	801b33c <_ZN8touchgfx8LCD24bpp21enableTextureMapperA4Ev>
 801b356:	4620      	mov	r0, r4
 801b358:	f7ff ff72 	bl	801b240 <_ZN8touchgfx8LCD24bpp27enableTextureMapperARGB8888Ev>
 801b35c:	4620      	mov	r0, r4
 801b35e:	f7ff fe73 	bl	801b048 <_ZN8touchgfx8LCD24bpp30enableTextureMapperL8_ARGB8888Ev>
 801b362:	4620      	mov	r0, r4
 801b364:	f7ff fdf2 	bl	801af4c <_ZN8touchgfx8LCD24bpp28enableTextureMapperL8_RGB888Ev>
 801b368:	4620      	mov	r0, r4
 801b36a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b36e:	f7ff bee9 	b.w	801b144 <_ZN8touchgfx8LCD24bpp25enableTextureMapperRGB888Ev>
	...

0801b374 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>:
 801b374:	b538      	push	{r3, r4, r5, lr}
 801b376:	4c0b      	ldr	r4, [pc, #44]	@ (801b3a4 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x30>)
 801b378:	4605      	mov	r5, r0
 801b37a:	7823      	ldrb	r3, [r4, #0]
 801b37c:	f3bf 8f5b 	dmb	ish
 801b380:	07db      	lsls	r3, r3, #31
 801b382:	d40b      	bmi.n	801b39c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b384:	4620      	mov	r0, r4
 801b386:	f005 fe50 	bl	802102a <__cxa_guard_acquire>
 801b38a:	b138      	cbz	r0, 801b39c <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x28>
 801b38c:	4620      	mov	r0, r4
 801b38e:	f005 fe58 	bl	8021042 <__cxa_guard_release>
 801b392:	4a05      	ldr	r2, [pc, #20]	@ (801b3a8 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x34>)
 801b394:	4905      	ldr	r1, [pc, #20]	@ (801b3ac <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x38>)
 801b396:	4806      	ldr	r0, [pc, #24]	@ (801b3b0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b398:	f005 fe40 	bl	802101c <__aeabi_atexit>
 801b39c:	4b04      	ldr	r3, [pc, #16]	@ (801b3b0 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev+0x3c>)
 801b39e:	65eb      	str	r3, [r5, #92]	@ 0x5c
 801b3a0:	bd38      	pop	{r3, r4, r5, pc}
 801b3a2:	bf00      	nop
 801b3a4:	24025440 	.word	0x24025440
 801b3a8:	24000000 	.word	0x24000000
 801b3ac:	08018131 	.word	0x08018131
 801b3b0:	240000b0 	.word	0x240000b0

0801b3b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>:
 801b3b4:	b538      	push	{r3, r4, r5, lr}
 801b3b6:	4c0b      	ldr	r4, [pc, #44]	@ (801b3e4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x30>)
 801b3b8:	4605      	mov	r5, r0
 801b3ba:	7823      	ldrb	r3, [r4, #0]
 801b3bc:	f3bf 8f5b 	dmb	ish
 801b3c0:	07db      	lsls	r3, r3, #31
 801b3c2:	d40b      	bmi.n	801b3dc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b3c4:	4620      	mov	r0, r4
 801b3c6:	f005 fe30 	bl	802102a <__cxa_guard_acquire>
 801b3ca:	b138      	cbz	r0, 801b3dc <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x28>
 801b3cc:	4620      	mov	r0, r4
 801b3ce:	f005 fe38 	bl	8021042 <__cxa_guard_release>
 801b3d2:	4a05      	ldr	r2, [pc, #20]	@ (801b3e8 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x34>)
 801b3d4:	4905      	ldr	r1, [pc, #20]	@ (801b3ec <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x38>)
 801b3d6:	4806      	ldr	r0, [pc, #24]	@ (801b3f0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b3d8:	f005 fe20 	bl	802101c <__aeabi_atexit>
 801b3dc:	4b04      	ldr	r3, [pc, #16]	@ (801b3f0 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv+0x3c>)
 801b3de:	662b      	str	r3, [r5, #96]	@ 0x60
 801b3e0:	bd38      	pop	{r3, r4, r5, pc}
 801b3e2:	bf00      	nop
 801b3e4:	24025444 	.word	0x24025444
 801b3e8:	24000000 	.word	0x24000000
 801b3ec:	0801812f 	.word	0x0801812f
 801b3f0:	240000b4 	.word	0x240000b4

0801b3f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>:
 801b3f4:	b570      	push	{r4, r5, r6, lr}
 801b3f6:	4d0c      	ldr	r5, [pc, #48]	@ (801b428 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x34>)
 801b3f8:	4606      	mov	r6, r0
 801b3fa:	4c0c      	ldr	r4, [pc, #48]	@ (801b42c <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x38>)
 801b3fc:	782b      	ldrb	r3, [r5, #0]
 801b3fe:	f3bf 8f5b 	dmb	ish
 801b402:	f013 0f01 	tst.w	r3, #1
 801b406:	d10d      	bne.n	801b424 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b408:	4628      	mov	r0, r5
 801b40a:	f005 fe0e 	bl	802102a <__cxa_guard_acquire>
 801b40e:	b148      	cbz	r0, 801b424 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x30>
 801b410:	4b07      	ldr	r3, [pc, #28]	@ (801b430 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x3c>)
 801b412:	4628      	mov	r0, r5
 801b414:	6023      	str	r3, [r4, #0]
 801b416:	f005 fe14 	bl	8021042 <__cxa_guard_release>
 801b41a:	4a06      	ldr	r2, [pc, #24]	@ (801b434 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x40>)
 801b41c:	4620      	mov	r0, r4
 801b41e:	4906      	ldr	r1, [pc, #24]	@ (801b438 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev+0x44>)
 801b420:	f005 fdfc 	bl	802101c <__aeabi_atexit>
 801b424:	6674      	str	r4, [r6, #100]	@ 0x64
 801b426:	bd70      	pop	{r4, r5, r6, pc}
 801b428:	24025448 	.word	0x24025448
 801b42c:	240255a0 	.word	0x240255a0
 801b430:	080254b0 	.word	0x080254b0
 801b434:	24000000 	.word	0x24000000
 801b438:	0801812d 	.word	0x0801812d

0801b43c <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_AllEv>:
 801b43c:	b510      	push	{r4, lr}
 801b43e:	4604      	mov	r4, r0
 801b440:	f7ff ff98 	bl	801b374 <_ZN8touchgfx8LCD24bpp23enableDecompressorL8_L4Ev>
 801b444:	4620      	mov	r0, r4
 801b446:	f7ff ffb5 	bl	801b3b4 <_ZN8touchgfx8LCD24bpp24enableDecompressorL8_RLEEv>
 801b44a:	4620      	mov	r0, r4
 801b44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801b450:	f7ff bfd0 	b.w	801b3f4 <_ZN8touchgfx8LCD24bpp25enableDecompressorL8_LZW9Ev>

0801b454 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv>:
 801b454:	b570      	push	{r4, r5, r6, lr}
 801b456:	4d0c      	ldr	r5, [pc, #48]	@ (801b488 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x34>)
 801b458:	4606      	mov	r6, r0
 801b45a:	4c0c      	ldr	r4, [pc, #48]	@ (801b48c <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x38>)
 801b45c:	782b      	ldrb	r3, [r5, #0]
 801b45e:	f3bf 8f5b 	dmb	ish
 801b462:	f013 0f01 	tst.w	r3, #1
 801b466:	d10d      	bne.n	801b484 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801b468:	4628      	mov	r0, r5
 801b46a:	f005 fdde 	bl	802102a <__cxa_guard_acquire>
 801b46e:	b148      	cbz	r0, 801b484 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x30>
 801b470:	4b07      	ldr	r3, [pc, #28]	@ (801b490 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x3c>)
 801b472:	4628      	mov	r0, r5
 801b474:	6023      	str	r3, [r4, #0]
 801b476:	f005 fde4 	bl	8021042 <__cxa_guard_release>
 801b47a:	4a06      	ldr	r2, [pc, #24]	@ (801b494 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x40>)
 801b47c:	4620      	mov	r0, r4
 801b47e:	4906      	ldr	r1, [pc, #24]	@ (801b498 <_ZN8touchgfx8LCD24bpp21enableDecompressorRGBEv+0x44>)
 801b480:	f005 fdcc 	bl	802101c <__aeabi_atexit>
 801b484:	66b4      	str	r4, [r6, #104]	@ 0x68
 801b486:	bd70      	pop	{r4, r5, r6, pc}
 801b488:	2402543c 	.word	0x2402543c
 801b48c:	2402549c 	.word	0x2402549c
 801b490:	080254c8 	.word	0x080254c8
 801b494:	24000000 	.word	0x24000000
 801b498:	0801812b 	.word	0x0801812b

0801b49c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>:
 801b49c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b4a0:	b087      	sub	sp, #28
 801b4a2:	788d      	ldrb	r5, [r1, #2]
 801b4a4:	f891 9000 	ldrb.w	r9, [r1]
 801b4a8:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801b4ac:	9501      	str	r5, [sp, #4]
 801b4ae:	784d      	ldrb	r5, [r1, #1]
 801b4b0:	9203      	str	r2, [sp, #12]
 801b4b2:	9502      	str	r5, [sp, #8]
 801b4b4:	f9bd b044 	ldrsh.w	fp, [sp, #68]	@ 0x44
 801b4b8:	f89d 4050 	ldrb.w	r4, [sp, #80]	@ 0x50
 801b4bc:	f89d c054 	ldrb.w	ip, [sp, #84]	@ 0x54
 801b4c0:	f89d e058 	ldrb.w	lr, [sp, #88]	@ 0x58
 801b4c4:	e9dd 0612 	ldrd	r0, r6, [sp, #72]	@ 0x48
 801b4c8:	fb06 0708 	mla	r7, r6, r8, r0
 801b4cc:	2e00      	cmp	r6, #0
 801b4ce:	eb02 0a07 	add.w	sl, r2, r7
 801b4d2:	ea4f 2205 	mov.w	r2, r5, lsl #8
 801b4d6:	9d01      	ldr	r5, [sp, #4]
 801b4d8:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801b4dc:	ea45 0509 	orr.w	r5, r5, r9
 801b4e0:	9505      	str	r5, [sp, #20]
 801b4e2:	f2c0 80b2 	blt.w	801b64a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b4e6:	45b3      	cmp	fp, r6
 801b4e8:	f340 80af 	ble.w	801b64a <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1ae>
 801b4ec:	2800      	cmp	r0, #0
 801b4ee:	f2c0 80aa 	blt.w	801b646 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b4f2:	4580      	cmp	r8, r0
 801b4f4:	f340 80a7 	ble.w	801b646 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1aa>
 801b4f8:	9a03      	ldr	r2, [sp, #12]
 801b4fa:	5dd7      	ldrb	r7, [r2, r7]
 801b4fc:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b500:	441f      	add	r7, r3
 801b502:	1c42      	adds	r2, r0, #1
 801b504:	f100 80a4 	bmi.w	801b650 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b508:	4590      	cmp	r8, r2
 801b50a:	f340 80a1 	ble.w	801b650 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b50e:	2c00      	cmp	r4, #0
 801b510:	f000 809e 	beq.w	801b650 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b4>
 801b514:	f89a 5001 	ldrb.w	r5, [sl, #1]
 801b518:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801b51c:	441d      	add	r5, r3
 801b51e:	3601      	adds	r6, #1
 801b520:	f100 809a 	bmi.w	801b658 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b524:	45b3      	cmp	fp, r6
 801b526:	f340 8097 	ble.w	801b658 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b52a:	f1bc 0f00 	cmp.w	ip, #0
 801b52e:	f000 8093 	beq.w	801b658 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1bc>
 801b532:	2800      	cmp	r0, #0
 801b534:	f2c0 808e 	blt.w	801b654 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b538:	4580      	cmp	r8, r0
 801b53a:	f340 808b 	ble.w	801b654 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1b8>
 801b53e:	f81a 6008 	ldrb.w	r6, [sl, r8]
 801b542:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801b546:	441e      	add	r6, r3
 801b548:	3001      	adds	r0, #1
 801b54a:	f100 8088 	bmi.w	801b65e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b54e:	4580      	cmp	r8, r0
 801b550:	f340 8085 	ble.w	801b65e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b554:	2c00      	cmp	r4, #0
 801b556:	f000 8082 	beq.w	801b65e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x1c2>
 801b55a:	44d0      	add	r8, sl
 801b55c:	f898 2001 	ldrb.w	r2, [r8, #1]
 801b560:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b564:	4413      	add	r3, r2
 801b566:	b2a4      	uxth	r4, r4
 801b568:	f895 a000 	ldrb.w	sl, [r5]
 801b56c:	fa1f fc8c 	uxth.w	ip, ip
 801b570:	fb04 fb0c 	mul.w	fp, r4, ip
 801b574:	0124      	lsls	r4, r4, #4
 801b576:	ebcb 1c0c 	rsb	ip, fp, ip, lsl #4
 801b57a:	f5c4 7880 	rsb	r8, r4, #256	@ 0x100
 801b57e:	eba4 040b 	sub.w	r4, r4, fp
 801b582:	fa1f f08c 	uxth.w	r0, ip
 801b586:	b2a2      	uxth	r2, r4
 801b588:	783c      	ldrb	r4, [r7, #0]
 801b58a:	eba8 0800 	sub.w	r8, r8, r0
 801b58e:	fa1f fc8e 	uxth.w	ip, lr
 801b592:	fb02 fa0a 	mul.w	sl, r2, sl
 801b596:	ea6f 0e0e 	mvn.w	lr, lr
 801b59a:	fa1f f888 	uxth.w	r8, r8
 801b59e:	fa5f fe8e 	uxtb.w	lr, lr
 801b5a2:	fb08 aa04 	mla	sl, r8, r4, sl
 801b5a6:	7834      	ldrb	r4, [r6, #0]
 801b5a8:	fb19 f90e 	smulbb	r9, r9, lr
 801b5ac:	fb00 aa04 	mla	sl, r0, r4, sl
 801b5b0:	781c      	ldrb	r4, [r3, #0]
 801b5b2:	fb0b a404 	mla	r4, fp, r4, sl
 801b5b6:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801b5ba:	fb04 990c 	mla	r9, r4, ip, r9
 801b5be:	fa1f f989 	uxth.w	r9, r9
 801b5c2:	f109 0401 	add.w	r4, r9, #1
 801b5c6:	eb04 2919 	add.w	r9, r4, r9, lsr #8
 801b5ca:	ea4f 2929 	mov.w	r9, r9, asr #8
 801b5ce:	f881 9000 	strb.w	r9, [r1]
 801b5d2:	f895 9001 	ldrb.w	r9, [r5, #1]
 801b5d6:	787c      	ldrb	r4, [r7, #1]
 801b5d8:	fb02 f909 	mul.w	r9, r2, r9
 801b5dc:	fb08 9904 	mla	r9, r8, r4, r9
 801b5e0:	7874      	ldrb	r4, [r6, #1]
 801b5e2:	fb00 9904 	mla	r9, r0, r4, r9
 801b5e6:	785c      	ldrb	r4, [r3, #1]
 801b5e8:	fb0b 9404 	mla	r4, fp, r4, r9
 801b5ec:	f3c4 2a07 	ubfx	sl, r4, #8, #8
 801b5f0:	9c02      	ldr	r4, [sp, #8]
 801b5f2:	fb14 f90e 	smulbb	r9, r4, lr
 801b5f6:	fb0a 940c 	mla	r4, sl, ip, r9
 801b5fa:	b2a4      	uxth	r4, r4
 801b5fc:	f104 0901 	add.w	r9, r4, #1
 801b600:	eb09 2414 	add.w	r4, r9, r4, lsr #8
 801b604:	1224      	asrs	r4, r4, #8
 801b606:	704c      	strb	r4, [r1, #1]
 801b608:	78ad      	ldrb	r5, [r5, #2]
 801b60a:	78bc      	ldrb	r4, [r7, #2]
 801b60c:	436a      	muls	r2, r5
 801b60e:	789b      	ldrb	r3, [r3, #2]
 801b610:	fb08 2204 	mla	r2, r8, r4, r2
 801b614:	78b4      	ldrb	r4, [r6, #2]
 801b616:	fb00 2004 	mla	r0, r0, r4, r2
 801b61a:	fb0b 0b03 	mla	fp, fp, r3, r0
 801b61e:	9b01      	ldr	r3, [sp, #4]
 801b620:	fb13 fe0e 	smulbb	lr, r3, lr
 801b624:	f3cb 2b07 	ubfx	fp, fp, #8, #8
 801b628:	fb0b ec0c 	mla	ip, fp, ip, lr
 801b62c:	fa1f fc8c 	uxth.w	ip, ip
 801b630:	f10c 0e01 	add.w	lr, ip, #1
 801b634:	eb0e 2c1c 	add.w	ip, lr, ip, lsr #8
 801b638:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b63c:	f881 c002 	strb.w	ip, [r1, #2]
 801b640:	b007      	add	sp, #28
 801b642:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b646:	af05      	add	r7, sp, #20
 801b648:	e75b      	b.n	801b502 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x66>
 801b64a:	ad05      	add	r5, sp, #20
 801b64c:	462f      	mov	r7, r5
 801b64e:	e766      	b.n	801b51e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b650:	ad05      	add	r5, sp, #20
 801b652:	e764      	b.n	801b51e <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0x82>
 801b654:	ae05      	add	r6, sp, #20
 801b656:	e777      	b.n	801b548 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xac>
 801b658:	ab05      	add	r3, sp, #20
 801b65a:	461e      	mov	r6, r3
 801b65c:	e783      	b.n	801b566 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>
 801b65e:	ab05      	add	r3, sp, #20
 801b660:	e781      	b.n	801b566 <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh+0xca>

0801b662 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801b662:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b666:	b093      	sub	sp, #76	@ 0x4c
 801b668:	9210      	str	r2, [sp, #64]	@ 0x40
 801b66a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b66c:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801b66e:	f89d 3094 	ldrb.w	r3, [sp, #148]	@ 0x94
 801b672:	9011      	str	r0, [sp, #68]	@ 0x44
 801b674:	930e      	str	r3, [sp, #56]	@ 0x38
 801b676:	6850      	ldr	r0, [r2, #4]
 801b678:	910d      	str	r1, [sp, #52]	@ 0x34
 801b67a:	6812      	ldr	r2, [r2, #0]
 801b67c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801b680:	fb00 1303 	mla	r3, r0, r3, r1
 801b684:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b688:	18d3      	adds	r3, r2, r3
 801b68a:	930a      	str	r3, [sp, #40]	@ 0x28
 801b68c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b68e:	681b      	ldr	r3, [r3, #0]
 801b690:	930c      	str	r3, [sp, #48]	@ 0x30
 801b692:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b694:	685c      	ldr	r4, [r3, #4]
 801b696:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b698:	3404      	adds	r4, #4
 801b69a:	43db      	mvns	r3, r3
 801b69c:	b2db      	uxtb	r3, r3
 801b69e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b6a0:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b6a2:	2b00      	cmp	r3, #0
 801b6a4:	dc03      	bgt.n	801b6ae <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801b6a6:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b6a8:	2b00      	cmp	r3, #0
 801b6aa:	f340 8250 	ble.w	801bb4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b6ae:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801b6b0:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801b6b4:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801b6b8:	1e48      	subs	r0, r1, #1
 801b6ba:	1e55      	subs	r5, r2, #1
 801b6bc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6be:	2b00      	cmp	r3, #0
 801b6c0:	f340 80ee 	ble.w	801b8a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x23e>
 801b6c4:	9e1d      	ldr	r6, [sp, #116]	@ 0x74
 801b6c6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b6c8:	1436      	asrs	r6, r6, #16
 801b6ca:	ea4f 4323 	mov.w	r3, r3, asr #16
 801b6ce:	d406      	bmi.n	801b6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6d0:	4286      	cmp	r6, r0
 801b6d2:	da04      	bge.n	801b6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6d4:	2b00      	cmp	r3, #0
 801b6d6:	db02      	blt.n	801b6de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801b6d8:	42ab      	cmp	r3, r5
 801b6da:	f2c0 80e2 	blt.w	801b8a2 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801b6de:	3601      	adds	r6, #1
 801b6e0:	f100 80cf 	bmi.w	801b882 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b6e4:	42b1      	cmp	r1, r6
 801b6e6:	f2c0 80cc 	blt.w	801b882 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b6ea:	3301      	adds	r3, #1
 801b6ec:	f100 80c9 	bmi.w	801b882 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b6f0:	429a      	cmp	r2, r3
 801b6f2:	f2c0 80c6 	blt.w	801b882 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x220>
 801b6f6:	e9dd b609 	ldrd	fp, r6, [sp, #36]	@ 0x24
 801b6fa:	f1bb 0f00 	cmp.w	fp, #0
 801b6fe:	f340 80f1 	ble.w	801b8e4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801b702:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b704:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b706:	9824      	ldr	r0, [sp, #144]	@ 0x90
 801b708:	141d      	asrs	r5, r3, #16
 801b70a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b70c:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b710:	68c7      	ldr	r7, [r0, #12]
 801b712:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b714:	1418      	asrs	r0, r3, #16
 801b716:	f3c3 3803 	ubfx	r8, r3, #12, #4
 801b71a:	6892      	ldr	r2, [r2, #8]
 801b71c:	f100 8137 	bmi.w	801b98e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b720:	f102 3cff 	add.w	ip, r2, #4294967295
 801b724:	4560      	cmp	r0, ip
 801b726:	f280 8132 	bge.w	801b98e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b72a:	2d00      	cmp	r5, #0
 801b72c:	f2c0 812f 	blt.w	801b98e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b730:	f107 3cff 	add.w	ip, r7, #4294967295
 801b734:	4565      	cmp	r5, ip
 801b736:	f280 812a 	bge.w	801b98e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x32c>
 801b73a:	b212      	sxth	r2, r2
 801b73c:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801b73e:	fb05 0002 	mla	r0, r5, r2, r0
 801b742:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b744:	f817 c000 	ldrb.w	ip, [r7, r0]
 801b748:	4405      	add	r5, r0
 801b74a:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801b74e:	eb04 0e0c 	add.w	lr, r4, ip
 801b752:	f1b8 0f00 	cmp.w	r8, #0
 801b756:	f000 810c 	beq.w	801b972 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x310>
 801b75a:	786f      	ldrb	r7, [r5, #1]
 801b75c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801b760:	4427      	add	r7, r4
 801b762:	2900      	cmp	r1, #0
 801b764:	f000 810d 	beq.w	801b982 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x320>
 801b768:	18a8      	adds	r0, r5, r2
 801b76a:	5caa      	ldrb	r2, [r5, r2]
 801b76c:	7840      	ldrb	r0, [r0, #1]
 801b76e:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b772:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801b776:	4422      	add	r2, r4
 801b778:	4420      	add	r0, r4
 801b77a:	fa1f f388 	uxth.w	r3, r8
 801b77e:	f814 a00c 	ldrb.w	sl, [r4, ip]
 801b782:	b289      	uxth	r1, r1
 801b784:	f897 c000 	ldrb.w	ip, [r7]
 801b788:	f8bd 5038 	ldrh.w	r5, [sp, #56]	@ 0x38
 801b78c:	fb03 f901 	mul.w	r9, r3, r1
 801b790:	011b      	lsls	r3, r3, #4
 801b792:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801b796:	f5c3 7880 	rsb	r8, r3, #256	@ 0x100
 801b79a:	eba3 0309 	sub.w	r3, r3, r9
 801b79e:	b289      	uxth	r1, r1
 801b7a0:	b29b      	uxth	r3, r3
 801b7a2:	eba8 0801 	sub.w	r8, r8, r1
 801b7a6:	fb03 fc0c 	mul.w	ip, r3, ip
 801b7aa:	fa1f f888 	uxth.w	r8, r8
 801b7ae:	930f      	str	r3, [sp, #60]	@ 0x3c
 801b7b0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b7b2:	fb08 cc0a 	mla	ip, r8, sl, ip
 801b7b6:	f892 a000 	ldrb.w	sl, [r2]
 801b7ba:	fb01 cc0a 	mla	ip, r1, sl, ip
 801b7be:	f890 a000 	ldrb.w	sl, [r0]
 801b7c2:	fb09 cc0a 	mla	ip, r9, sl, ip
 801b7c6:	f896 a000 	ldrb.w	sl, [r6]
 801b7ca:	fb1a fa03 	smulbb	sl, sl, r3
 801b7ce:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b7d2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b7d4:	fb0c ac05 	mla	ip, ip, r5, sl
 801b7d8:	fa1f fc8c 	uxth.w	ip, ip
 801b7dc:	f10c 0a01 	add.w	sl, ip, #1
 801b7e0:	eb0a 2a1c 	add.w	sl, sl, ip, lsr #8
 801b7e4:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801b7e8:	f886 a000 	strb.w	sl, [r6]
 801b7ec:	f897 c001 	ldrb.w	ip, [r7, #1]
 801b7f0:	f89e a001 	ldrb.w	sl, [lr, #1]
 801b7f4:	fb03 fc0c 	mul.w	ip, r3, ip
 801b7f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b7fa:	fb08 cc0a 	mla	ip, r8, sl, ip
 801b7fe:	f892 a001 	ldrb.w	sl, [r2, #1]
 801b802:	fb01 cc0a 	mla	ip, r1, sl, ip
 801b806:	f890 a001 	ldrb.w	sl, [r0, #1]
 801b80a:	fb09 cc0a 	mla	ip, r9, sl, ip
 801b80e:	f896 a001 	ldrb.w	sl, [r6, #1]
 801b812:	fb1a fa03 	smulbb	sl, sl, r3
 801b816:	f3cc 2c07 	ubfx	ip, ip, #8, #8
 801b81a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801b81c:	fb0c ac05 	mla	ip, ip, r5, sl
 801b820:	fa1f fc8c 	uxth.w	ip, ip
 801b824:	f10c 0a01 	add.w	sl, ip, #1
 801b828:	eb0a 2c1c 	add.w	ip, sl, ip, lsr #8
 801b82c:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801b830:	f886 c001 	strb.w	ip, [r6, #1]
 801b834:	78bf      	ldrb	r7, [r7, #2]
 801b836:	f89e c002 	ldrb.w	ip, [lr, #2]
 801b83a:	437b      	muls	r3, r7
 801b83c:	fb08 330c 	mla	r3, r8, ip, r3
 801b840:	f892 c002 	ldrb.w	ip, [r2, #2]
 801b844:	7882      	ldrb	r2, [r0, #2]
 801b846:	fb01 310c 	mla	r1, r1, ip, r3
 801b84a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b84c:	fb09 1902 	mla	r9, r9, r2, r1
 801b850:	78b1      	ldrb	r1, [r6, #2]
 801b852:	fb11 f103 	smulbb	r1, r1, r3
 801b856:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801b85a:	fb09 1505 	mla	r5, r9, r5, r1
 801b85e:	b2ad      	uxth	r5, r5
 801b860:	1c6b      	adds	r3, r5, #1
 801b862:	eb03 2515 	add.w	r5, r3, r5, lsr #8
 801b866:	122d      	asrs	r5, r5, #8
 801b868:	70b5      	strb	r5, [r6, #2]
 801b86a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b86c:	3603      	adds	r6, #3
 801b86e:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801b870:	f10b 3bff 	add.w	fp, fp, #4294967295
 801b874:	4413      	add	r3, r2
 801b876:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b878:	931d      	str	r3, [sp, #116]	@ 0x74
 801b87a:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b87c:	4413      	add	r3, r2
 801b87e:	931e      	str	r3, [sp, #120]	@ 0x78
 801b880:	e73b      	b.n	801b6fa <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x98>
 801b882:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b884:	9e1f      	ldr	r6, [sp, #124]	@ 0x7c
 801b886:	4433      	add	r3, r6
 801b888:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801b88a:	931d      	str	r3, [sp, #116]	@ 0x74
 801b88c:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801b88e:	4433      	add	r3, r6
 801b890:	931e      	str	r3, [sp, #120]	@ 0x78
 801b892:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b894:	3b01      	subs	r3, #1
 801b896:	9309      	str	r3, [sp, #36]	@ 0x24
 801b898:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b89a:	3303      	adds	r3, #3
 801b89c:	930a      	str	r3, [sp, #40]	@ 0x28
 801b89e:	e70d      	b.n	801b6bc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801b8a0:	d028      	beq.n	801b8f4 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x292>
 801b8a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8a4:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801b8a6:	3b01      	subs	r3, #1
 801b8a8:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801b8aa:	fb00 5003 	mla	r0, r0, r3, r5
 801b8ae:	1400      	asrs	r0, r0, #16
 801b8b0:	f53f af21 	bmi.w	801b6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8b4:	3901      	subs	r1, #1
 801b8b6:	4288      	cmp	r0, r1
 801b8b8:	f6bf af1d 	bge.w	801b6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8bc:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801b8be:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801b8c0:	fb01 0303 	mla	r3, r1, r3, r0
 801b8c4:	141b      	asrs	r3, r3, #16
 801b8c6:	f53f af16 	bmi.w	801b6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8ca:	3a01      	subs	r2, #1
 801b8cc:	4293      	cmp	r3, r2
 801b8ce:	f6bf af12 	bge.w	801b6f6 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801b8d2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b8d4:	f8dd 9024 	ldr.w	r9, [sp, #36]	@ 0x24
 801b8d8:	1cdf      	adds	r7, r3, #3
 801b8da:	f8bd a038 	ldrh.w	sl, [sp, #56]	@ 0x38
 801b8de:	f1b9 0f00 	cmp.w	r9, #0
 801b8e2:	dc73      	bgt.n	801b9cc <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801b8e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b8e6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b8e8:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801b8ec:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801b8f0:	441a      	add	r2, r3
 801b8f2:	920a      	str	r2, [sp, #40]	@ 0x28
 801b8f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b8f6:	2b00      	cmp	r3, #0
 801b8f8:	f340 8129 	ble.w	801bb4e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ec>
 801b8fc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801b900:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b902:	ee30 0a04 	vadd.f32	s0, s0, s8
 801b906:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801b90a:	eef0 6a62 	vmov.f32	s13, s5
 801b90e:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801b912:	ee31 1a05 	vadd.f32	s2, s2, s10
 801b916:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b91a:	edcd 6a1d 	vstr	s13, [sp, #116]	@ 0x74
 801b91e:	eef0 6a43 	vmov.f32	s13, s6
 801b922:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801b926:	edcd 6a1e 	vstr	s13, [sp, #120]	@ 0x78
 801b92a:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801b92e:	ee61 7a27 	vmul.f32	s15, s2, s15
 801b932:	ee77 2a62 	vsub.f32	s5, s14, s5
 801b936:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801b93a:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801b93e:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801b942:	ee12 2a90 	vmov	r2, s5
 801b946:	eef0 2a47 	vmov.f32	s5, s14
 801b94a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b94e:	ee13 2a10 	vmov	r2, s6
 801b952:	931f      	str	r3, [sp, #124]	@ 0x7c
 801b954:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b956:	eeb0 3a67 	vmov.f32	s6, s15
 801b95a:	fb92 f3f3 	sdiv	r3, r2, r3
 801b95e:	9320      	str	r3, [sp, #128]	@ 0x80
 801b960:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b962:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b964:	3b01      	subs	r3, #1
 801b966:	930d      	str	r3, [sp, #52]	@ 0x34
 801b968:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801b96a:	bf08      	it	eq
 801b96c:	4613      	moveq	r3, r2
 801b96e:	9309      	str	r3, [sp, #36]	@ 0x24
 801b970:	e696      	b.n	801b6a0 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801b972:	b149      	cbz	r1, 801b988 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x326>
 801b974:	5caa      	ldrb	r2, [r5, r2]
 801b976:	4670      	mov	r0, lr
 801b978:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801b97c:	4422      	add	r2, r4
 801b97e:	4677      	mov	r7, lr
 801b980:	e6fb      	b.n	801b77a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801b982:	4670      	mov	r0, lr
 801b984:	4672      	mov	r2, lr
 801b986:	e6f8      	b.n	801b77a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x118>
 801b988:	4670      	mov	r0, lr
 801b98a:	4672      	mov	r2, lr
 801b98c:	e7f7      	b.n	801b97e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31c>
 801b98e:	f110 0c01 	adds.w	ip, r0, #1
 801b992:	f53f af6a 	bmi.w	801b86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b996:	4562      	cmp	r2, ip
 801b998:	f6ff af67 	blt.w	801b86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b99c:	f115 0c01 	adds.w	ip, r5, #1
 801b9a0:	f53f af63 	bmi.w	801b86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b9a4:	4567      	cmp	r7, ip
 801b9a6:	f6ff af60 	blt.w	801b86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b9aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b9ac:	b23f      	sxth	r7, r7
 801b9ae:	b212      	sxth	r2, r2
 801b9b0:	9002      	str	r0, [sp, #8]
 801b9b2:	9701      	str	r7, [sp, #4]
 801b9b4:	9200      	str	r2, [sp, #0]
 801b9b6:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801b9b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b9ba:	e9cd 1305 	strd	r1, r3, [sp, #20]
 801b9be:	e9cd 5803 	strd	r5, r8, [sp, #12]
 801b9c2:	4623      	mov	r3, r4
 801b9c4:	4631      	mov	r1, r6
 801b9c6:	f7ff fd69 	bl	801b49c <_ZNK8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhS4_ssiihhh>
 801b9ca:	e74e      	b.n	801b86a <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x208>
 801b9cc:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b9ce:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801b9d0:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801b9d4:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801b9d6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801b9d8:	1400      	asrs	r0, r0, #16
 801b9da:	142d      	asrs	r5, r5, #16
 801b9dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801b9de:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801b9e2:	f3c3 3303 	ubfx	r3, r3, #12, #4
 801b9e6:	fb02 5000 	mla	r0, r2, r0, r5
 801b9ea:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 801b9ec:	f815 e000 	ldrb.w	lr, [r5, r0]
 801b9f0:	eb05 0c00 	add.w	ip, r5, r0
 801b9f4:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801b9f8:	eb04 060e 	add.w	r6, r4, lr
 801b9fc:	2b00      	cmp	r3, #0
 801b9fe:	f000 8097 	beq.w	801bb30 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4ce>
 801ba02:	f89c 5001 	ldrb.w	r5, [ip, #1]
 801ba06:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801ba0a:	4425      	add	r5, r4
 801ba0c:	2900      	cmp	r1, #0
 801ba0e:	f000 8098 	beq.w	801bb42 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e0>
 801ba12:	eb0c 0002 	add.w	r0, ip, r2
 801ba16:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801ba1a:	7840      	ldrb	r0, [r0, #1]
 801ba1c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801ba20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801ba24:	4422      	add	r2, r4
 801ba26:	4420      	add	r0, r4
 801ba28:	b29b      	uxth	r3, r3
 801ba2a:	f814 b00e 	ldrb.w	fp, [r4, lr]
 801ba2e:	b289      	uxth	r1, r1
 801ba30:	f895 e000 	ldrb.w	lr, [r5]
 801ba34:	3703      	adds	r7, #3
 801ba36:	f109 39ff 	add.w	r9, r9, #4294967295
 801ba3a:	fb03 f801 	mul.w	r8, r3, r1
 801ba3e:	011b      	lsls	r3, r3, #4
 801ba40:	ebc8 1101 	rsb	r1, r8, r1, lsl #4
 801ba44:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801ba48:	eba3 0308 	sub.w	r3, r3, r8
 801ba4c:	b289      	uxth	r1, r1
 801ba4e:	b29b      	uxth	r3, r3
 801ba50:	ebac 0c01 	sub.w	ip, ip, r1
 801ba54:	fb03 fe0e 	mul.w	lr, r3, lr
 801ba58:	fa1f fc8c 	uxth.w	ip, ip
 801ba5c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ba5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ba60:	fb0c ee0b 	mla	lr, ip, fp, lr
 801ba64:	f892 b000 	ldrb.w	fp, [r2]
 801ba68:	fb01 ee0b 	mla	lr, r1, fp, lr
 801ba6c:	f890 b000 	ldrb.w	fp, [r0]
 801ba70:	fb08 ee0b 	mla	lr, r8, fp, lr
 801ba74:	f817 bc06 	ldrb.w	fp, [r7, #-6]
 801ba78:	fb1b fb03 	smulbb	fp, fp, r3
 801ba7c:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801ba80:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801ba82:	fb0e be0a 	mla	lr, lr, sl, fp
 801ba86:	fa1f fe8e 	uxth.w	lr, lr
 801ba8a:	f10e 0b01 	add.w	fp, lr, #1
 801ba8e:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801ba92:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801ba96:	f807 ec06 	strb.w	lr, [r7, #-6]
 801ba9a:	f895 e001 	ldrb.w	lr, [r5, #1]
 801ba9e:	f896 b001 	ldrb.w	fp, [r6, #1]
 801baa2:	fb03 fe0e 	mul.w	lr, r3, lr
 801baa6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baa8:	fb0c ee0b 	mla	lr, ip, fp, lr
 801baac:	f892 b001 	ldrb.w	fp, [r2, #1]
 801bab0:	fb01 ee0b 	mla	lr, r1, fp, lr
 801bab4:	f890 b001 	ldrb.w	fp, [r0, #1]
 801bab8:	fb08 ee0b 	mla	lr, r8, fp, lr
 801babc:	f817 bc05 	ldrb.w	fp, [r7, #-5]
 801bac0:	fb1b fb03 	smulbb	fp, fp, r3
 801bac4:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801bac8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801baca:	fb0e be0a 	mla	lr, lr, sl, fp
 801bace:	fa1f fe8e 	uxth.w	lr, lr
 801bad2:	f10e 0b01 	add.w	fp, lr, #1
 801bad6:	eb0b 2e1e 	add.w	lr, fp, lr, lsr #8
 801bada:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801bade:	f807 ec05 	strb.w	lr, [r7, #-5]
 801bae2:	78ad      	ldrb	r5, [r5, #2]
 801bae4:	78b6      	ldrb	r6, [r6, #2]
 801bae6:	436b      	muls	r3, r5
 801bae8:	7895      	ldrb	r5, [r2, #2]
 801baea:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801baec:	fb0c 3306 	mla	r3, ip, r6, r3
 801baf0:	fb01 3305 	mla	r3, r1, r5, r3
 801baf4:	7885      	ldrb	r5, [r0, #2]
 801baf6:	fb08 3805 	mla	r8, r8, r5, r3
 801bafa:	f817 3c04 	ldrb.w	r3, [r7, #-4]
 801bafe:	fb13 f302 	smulbb	r3, r3, r2
 801bb02:	f3c8 2807 	ubfx	r8, r8, #8, #8
 801bb06:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801bb08:	fb08 380a 	mla	r8, r8, sl, r3
 801bb0c:	fa1f f888 	uxth.w	r8, r8
 801bb10:	f108 0301 	add.w	r3, r8, #1
 801bb14:	eb03 2818 	add.w	r8, r3, r8, lsr #8
 801bb18:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801bb1a:	4413      	add	r3, r2
 801bb1c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801bb1e:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bb22:	931d      	str	r3, [sp, #116]	@ 0x74
 801bb24:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bb26:	f807 8c04 	strb.w	r8, [r7, #-4]
 801bb2a:	4413      	add	r3, r2
 801bb2c:	931e      	str	r3, [sp, #120]	@ 0x78
 801bb2e:	e6d6      	b.n	801b8de <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801bb30:	b151      	cbz	r1, 801bb48 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4e6>
 801bb32:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bb36:	4630      	mov	r0, r6
 801bb38:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bb3c:	4422      	add	r2, r4
 801bb3e:	4635      	mov	r5, r6
 801bb40:	e772      	b.n	801ba28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bb42:	4630      	mov	r0, r6
 801bb44:	4632      	mov	r2, r6
 801bb46:	e76f      	b.n	801ba28 <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c6>
 801bb48:	4630      	mov	r0, r6
 801bb4a:	4632      	mov	r2, r6
 801bb4c:	e7f7      	b.n	801bb3e <_ZN8touchgfx8LCD24bpp55TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801bb4e:	b013      	add	sp, #76	@ 0x4c
 801bb50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801bb54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>:
 801bb54:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
 801bb58:	784c      	ldrb	r4, [r1, #1]
 801bb5a:	f891 a002 	ldrb.w	sl, [r1, #2]
 801bb5e:	0224      	lsls	r4, r4, #8
 801bb60:	f9bd e028 	ldrsh.w	lr, [sp, #40]	@ 0x28
 801bb64:	f9bd 902c 	ldrsh.w	r9, [sp, #44]	@ 0x2c
 801bb68:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 801bb6c:	f891 a000 	ldrb.w	sl, [r1]
 801bb70:	f89d 0038 	ldrb.w	r0, [sp, #56]	@ 0x38
 801bb74:	ea44 040a 	orr.w	r4, r4, sl
 801bb78:	f89d 603c 	ldrb.w	r6, [sp, #60]	@ 0x3c
 801bb7c:	e9dd c50c 	ldrd	ip, r5, [sp, #48]	@ 0x30
 801bb80:	9401      	str	r4, [sp, #4]
 801bb82:	fb05 c70e 	mla	r7, r5, lr, ip
 801bb86:	2d00      	cmp	r5, #0
 801bb88:	eb02 0807 	add.w	r8, r2, r7
 801bb8c:	db72      	blt.n	801bc74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bb8e:	45a9      	cmp	r9, r5
 801bb90:	dd70      	ble.n	801bc74 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x120>
 801bb92:	f1bc 0f00 	cmp.w	ip, #0
 801bb96:	db6b      	blt.n	801bc70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bb98:	45e6      	cmp	lr, ip
 801bb9a:	dd69      	ble.n	801bc70 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x11c>
 801bb9c:	5dd7      	ldrb	r7, [r2, r7]
 801bb9e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bba2:	441f      	add	r7, r3
 801bba4:	f11c 0201 	adds.w	r2, ip, #1
 801bba8:	d467      	bmi.n	801bc7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bbaa:	4596      	cmp	lr, r2
 801bbac:	dd65      	ble.n	801bc7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bbae:	2800      	cmp	r0, #0
 801bbb0:	d063      	beq.n	801bc7a <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x126>
 801bbb2:	f898 4001 	ldrb.w	r4, [r8, #1]
 801bbb6:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801bbba:	441c      	add	r4, r3
 801bbbc:	3501      	adds	r5, #1
 801bbbe:	d460      	bmi.n	801bc82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bbc0:	45a9      	cmp	r9, r5
 801bbc2:	dd5e      	ble.n	801bc82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bbc4:	2e00      	cmp	r6, #0
 801bbc6:	d05c      	beq.n	801bc82 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12e>
 801bbc8:	f1bc 0f00 	cmp.w	ip, #0
 801bbcc:	db57      	blt.n	801bc7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801bbce:	45e6      	cmp	lr, ip
 801bbd0:	dd55      	ble.n	801bc7e <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x12a>
 801bbd2:	f818 500e 	ldrb.w	r5, [r8, lr]
 801bbd6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801bbda:	441d      	add	r5, r3
 801bbdc:	f11c 0201 	adds.w	r2, ip, #1
 801bbe0:	d452      	bmi.n	801bc88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bbe2:	4596      	cmp	lr, r2
 801bbe4:	dd50      	ble.n	801bc88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bbe6:	2800      	cmp	r0, #0
 801bbe8:	d04e      	beq.n	801bc88 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x134>
 801bbea:	44c6      	add	lr, r8
 801bbec:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801bbf0:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bbf4:	4413      	add	r3, r2
 801bbf6:	b280      	uxth	r0, r0
 801bbf8:	f897 8000 	ldrb.w	r8, [r7]
 801bbfc:	b2b2      	uxth	r2, r6
 801bbfe:	fb00 f602 	mul.w	r6, r0, r2
 801bc02:	0100      	lsls	r0, r0, #4
 801bc04:	ebc6 1202 	rsb	r2, r6, r2, lsl #4
 801bc08:	f5c0 7e80 	rsb	lr, r0, #256	@ 0x100
 801bc0c:	1b80      	subs	r0, r0, r6
 801bc0e:	fa1f fc82 	uxth.w	ip, r2
 801bc12:	b282      	uxth	r2, r0
 801bc14:	7820      	ldrb	r0, [r4, #0]
 801bc16:	ebae 0e0c 	sub.w	lr, lr, ip
 801bc1a:	4350      	muls	r0, r2
 801bc1c:	fa1f fe8e 	uxth.w	lr, lr
 801bc20:	fb0e 0808 	mla	r8, lr, r8, r0
 801bc24:	7828      	ldrb	r0, [r5, #0]
 801bc26:	fb0c 8800 	mla	r8, ip, r0, r8
 801bc2a:	7818      	ldrb	r0, [r3, #0]
 801bc2c:	fb06 8000 	mla	r0, r6, r0, r8
 801bc30:	1200      	asrs	r0, r0, #8
 801bc32:	7008      	strb	r0, [r1, #0]
 801bc34:	7860      	ldrb	r0, [r4, #1]
 801bc36:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bc3a:	4350      	muls	r0, r2
 801bc3c:	fb0e 0808 	mla	r8, lr, r8, r0
 801bc40:	7868      	ldrb	r0, [r5, #1]
 801bc42:	fb0c 8800 	mla	r8, ip, r0, r8
 801bc46:	7858      	ldrb	r0, [r3, #1]
 801bc48:	fb06 8000 	mla	r0, r6, r0, r8
 801bc4c:	1200      	asrs	r0, r0, #8
 801bc4e:	7048      	strb	r0, [r1, #1]
 801bc50:	78a0      	ldrb	r0, [r4, #2]
 801bc52:	78bf      	ldrb	r7, [r7, #2]
 801bc54:	4350      	muls	r0, r2
 801bc56:	78aa      	ldrb	r2, [r5, #2]
 801bc58:	fb0e 0007 	mla	r0, lr, r7, r0
 801bc5c:	fb0c 0c02 	mla	ip, ip, r2, r0
 801bc60:	789a      	ldrb	r2, [r3, #2]
 801bc62:	fb06 c202 	mla	r2, r6, r2, ip
 801bc66:	1212      	asrs	r2, r2, #8
 801bc68:	708a      	strb	r2, [r1, #2]
 801bc6a:	b002      	add	sp, #8
 801bc6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801bc70:	af01      	add	r7, sp, #4
 801bc72:	e797      	b.n	801bba4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x50>
 801bc74:	ac01      	add	r4, sp, #4
 801bc76:	4627      	mov	r7, r4
 801bc78:	e7a0      	b.n	801bbbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bc7a:	ac01      	add	r4, sp, #4
 801bc7c:	e79e      	b.n	801bbbc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x68>
 801bc7e:	ad01      	add	r5, sp, #4
 801bc80:	e7ac      	b.n	801bbdc <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0x88>
 801bc82:	ab01      	add	r3, sp, #4
 801bc84:	461d      	mov	r5, r3
 801bc86:	e7b6      	b.n	801bbf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>
 801bc88:	ab01      	add	r3, sp, #4
 801bc8a:	e7b4      	b.n	801bbf6 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh+0xa2>

0801bc8c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801bc8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bc90:	b08d      	sub	sp, #52	@ 0x34
 801bc92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801bc96:	e9cd 1209 	strd	r1, r2, [sp, #36]	@ 0x24
 801bc9a:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801bc9c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801bc9e:	9306      	str	r3, [sp, #24]
 801bca0:	6850      	ldr	r0, [r2, #4]
 801bca2:	6812      	ldr	r2, [r2, #0]
 801bca4:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801bca6:	e9dd 131c 	ldrd	r1, r3, [sp, #112]	@ 0x70
 801bcaa:	fb00 1303 	mla	r3, r0, r3, r1
 801bcae:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801bcb2:	18d3      	adds	r3, r2, r3
 801bcb4:	9307      	str	r3, [sp, #28]
 801bcb6:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bcb8:	681b      	ldr	r3, [r3, #0]
 801bcba:	9308      	str	r3, [sp, #32]
 801bcbc:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bcbe:	685d      	ldr	r5, [r3, #4]
 801bcc0:	3504      	adds	r5, #4
 801bcc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bcc4:	2b00      	cmp	r3, #0
 801bcc6:	dc03      	bgt.n	801bcd0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801bcc8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	f340 81e6 	ble.w	801c09c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801bcd0:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801bcd2:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801bcd6:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801bcda:	1e48      	subs	r0, r1, #1
 801bcdc:	1e56      	subs	r6, r2, #1
 801bcde:	9b06      	ldr	r3, [sp, #24]
 801bce0:	2b00      	cmp	r3, #0
 801bce2:	f340 80bd 	ble.w	801be60 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d4>
 801bce6:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bce8:	1427      	asrs	r7, r4, #16
 801bcea:	ea4f 4323 	mov.w	r3, r3, asr #16
 801bcee:	d406      	bmi.n	801bcfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bcf0:	4287      	cmp	r7, r0
 801bcf2:	da04      	bge.n	801bcfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bcf4:	2b00      	cmp	r3, #0
 801bcf6:	db02      	blt.n	801bcfe <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801bcf8:	42b3      	cmp	r3, r6
 801bcfa:	f2c0 80b2 	blt.w	801be62 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1d6>
 801bcfe:	3701      	adds	r7, #1
 801bd00:	f100 80a1 	bmi.w	801be46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bd04:	42b9      	cmp	r1, r7
 801bd06:	f2c0 809e 	blt.w	801be46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bd0a:	3301      	adds	r3, #1
 801bd0c:	f100 809b 	bmi.w	801be46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bd10:	429a      	cmp	r2, r3
 801bd12:	f2c0 8098 	blt.w	801be46 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ba>
 801bd16:	e9dd b606 	ldrd	fp, r6, [sp, #24]
 801bd1a:	f1bb 0f00 	cmp.w	fp, #0
 801bd1e:	f340 80bf 	ble.w	801bea0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x214>
 801bd22:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bd24:	981e      	ldr	r0, [sp, #120]	@ 0x78
 801bd26:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801bd28:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bd2c:	f8d0 c00c 	ldr.w	ip, [r0, #12]
 801bd30:	1420      	asrs	r0, r4, #16
 801bd32:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801bd34:	ea4f 4723 	mov.w	r7, r3, asr #16
 801bd38:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bd3c:	6892      	ldr	r2, [r2, #8]
 801bd3e:	f100 8103 	bmi.w	801bf48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bd42:	f102 3eff 	add.w	lr, r2, #4294967295
 801bd46:	4570      	cmp	r0, lr
 801bd48:	f280 80fe 	bge.w	801bf48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bd4c:	2f00      	cmp	r7, #0
 801bd4e:	f2c0 80fb 	blt.w	801bf48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bd52:	f10c 3eff 	add.w	lr, ip, #4294967295
 801bd56:	4577      	cmp	r7, lr
 801bd58:	f280 80f6 	bge.w	801bf48 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2bc>
 801bd5c:	b212      	sxth	r2, r2
 801bd5e:	fb07 0002 	mla	r0, r7, r2, r0
 801bd62:	9f08      	ldr	r7, [sp, #32]
 801bd64:	f817 8000 	ldrb.w	r8, [r7, r0]
 801bd68:	eb07 0e00 	add.w	lr, r7, r0
 801bd6c:	eb08 0848 	add.w	r8, r8, r8, lsl #1
 801bd70:	eb05 0c08 	add.w	ip, r5, r8
 801bd74:	2b00      	cmp	r3, #0
 801bd76:	f000 80d8 	beq.w	801bf2a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x29e>
 801bd7a:	f89e 7001 	ldrb.w	r7, [lr, #1]
 801bd7e:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801bd82:	442f      	add	r7, r5
 801bd84:	2900      	cmp	r1, #0
 801bd86:	f000 80d9 	beq.w	801bf3c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801bd8a:	eb0e 0002 	add.w	r0, lr, r2
 801bd8e:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801bd92:	7840      	ldrb	r0, [r0, #1]
 801bd94:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bd98:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bd9c:	442a      	add	r2, r5
 801bd9e:	4428      	add	r0, r5
 801bda0:	b29b      	uxth	r3, r3
 801bda2:	f815 a008 	ldrb.w	sl, [r5, r8]
 801bda6:	b289      	uxth	r1, r1
 801bda8:	f897 8000 	ldrb.w	r8, [r7]
 801bdac:	fb03 f901 	mul.w	r9, r3, r1
 801bdb0:	011b      	lsls	r3, r3, #4
 801bdb2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bdb6:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801bdba:	eba3 0309 	sub.w	r3, r3, r9
 801bdbe:	b289      	uxth	r1, r1
 801bdc0:	b29b      	uxth	r3, r3
 801bdc2:	ebae 0e01 	sub.w	lr, lr, r1
 801bdc6:	fb03 f808 	mul.w	r8, r3, r8
 801bdca:	fa1f fe8e 	uxth.w	lr, lr
 801bdce:	fb0e 880a 	mla	r8, lr, sl, r8
 801bdd2:	f892 a000 	ldrb.w	sl, [r2]
 801bdd6:	fb01 880a 	mla	r8, r1, sl, r8
 801bdda:	f890 a000 	ldrb.w	sl, [r0]
 801bdde:	fb09 880a 	mla	r8, r9, sl, r8
 801bde2:	ea4f 2828 	mov.w	r8, r8, asr #8
 801bde6:	f886 8000 	strb.w	r8, [r6]
 801bdea:	f897 8001 	ldrb.w	r8, [r7, #1]
 801bdee:	f89c a001 	ldrb.w	sl, [ip, #1]
 801bdf2:	fb03 f808 	mul.w	r8, r3, r8
 801bdf6:	fb0e 880a 	mla	r8, lr, sl, r8
 801bdfa:	f892 a001 	ldrb.w	sl, [r2, #1]
 801bdfe:	fb01 880a 	mla	r8, r1, sl, r8
 801be02:	f890 a001 	ldrb.w	sl, [r0, #1]
 801be06:	fb09 880a 	mla	r8, r9, sl, r8
 801be0a:	ea4f 2828 	mov.w	r8, r8, asr #8
 801be0e:	f886 8001 	strb.w	r8, [r6, #1]
 801be12:	78bf      	ldrb	r7, [r7, #2]
 801be14:	f89c c002 	ldrb.w	ip, [ip, #2]
 801be18:	437b      	muls	r3, r7
 801be1a:	7892      	ldrb	r2, [r2, #2]
 801be1c:	fb0e 330c 	mla	r3, lr, ip, r3
 801be20:	fb01 3102 	mla	r1, r1, r2, r3
 801be24:	7882      	ldrb	r2, [r0, #2]
 801be26:	fb09 1902 	mla	r9, r9, r2, r1
 801be2a:	ea4f 2929 	mov.w	r9, r9, asr #8
 801be2e:	f886 9002 	strb.w	r9, [r6, #2]
 801be32:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801be34:	3603      	adds	r6, #3
 801be36:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801be38:	f10b 3bff 	add.w	fp, fp, #4294967295
 801be3c:	441c      	add	r4, r3
 801be3e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801be40:	4413      	add	r3, r2
 801be42:	9318      	str	r3, [sp, #96]	@ 0x60
 801be44:	e769      	b.n	801bd1a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801be46:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801be48:	9f1a      	ldr	r7, [sp, #104]	@ 0x68
 801be4a:	441c      	add	r4, r3
 801be4c:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801be4e:	443b      	add	r3, r7
 801be50:	9318      	str	r3, [sp, #96]	@ 0x60
 801be52:	9b06      	ldr	r3, [sp, #24]
 801be54:	3b01      	subs	r3, #1
 801be56:	9306      	str	r3, [sp, #24]
 801be58:	9b07      	ldr	r3, [sp, #28]
 801be5a:	3303      	adds	r3, #3
 801be5c:	9307      	str	r3, [sp, #28]
 801be5e:	e73e      	b.n	801bcde <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801be60:	d026      	beq.n	801beb0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801be62:	9b06      	ldr	r3, [sp, #24]
 801be64:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801be66:	3b01      	subs	r3, #1
 801be68:	fb00 4003 	mla	r0, r0, r3, r4
 801be6c:	1400      	asrs	r0, r0, #16
 801be6e:	f53f af52 	bmi.w	801bd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be72:	3901      	subs	r1, #1
 801be74:	4288      	cmp	r0, r1
 801be76:	f6bf af4e 	bge.w	801bd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be7a:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801be7c:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801be7e:	fb01 0303 	mla	r3, r1, r3, r0
 801be82:	141b      	asrs	r3, r3, #16
 801be84:	f53f af47 	bmi.w	801bd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be88:	3a01      	subs	r2, #1
 801be8a:	4293      	cmp	r3, r2
 801be8c:	f6bf af43 	bge.w	801bd16 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801be90:	9b07      	ldr	r3, [sp, #28]
 801be92:	f8dd a018 	ldr.w	sl, [sp, #24]
 801be96:	f103 0803 	add.w	r8, r3, #3
 801be9a:	f1ba 0f00 	cmp.w	sl, #0
 801be9e:	dc71      	bgt.n	801bf84 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801bea0:	9b06      	ldr	r3, [sp, #24]
 801bea2:	9a07      	ldr	r2, [sp, #28]
 801bea4:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801bea8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801beac:	441a      	add	r2, r3
 801beae:	9207      	str	r2, [sp, #28]
 801beb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801beb2:	2b00      	cmp	r3, #0
 801beb4:	f340 80f2 	ble.w	801c09c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x410>
 801beb8:	ee30 0a04 	vadd.f32	s0, s0, s8
 801bebc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bebe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801bec2:	eeb0 6a62 	vmov.f32	s12, s5
 801bec6:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801beca:	ee31 1a05 	vadd.f32	s2, s2, s10
 801bece:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bed2:	ee16 4a10 	vmov	r4, s12
 801bed6:	eeb0 6a43 	vmov.f32	s12, s6
 801beda:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801bede:	ed8d 6a18 	vstr	s12, [sp, #96]	@ 0x60
 801bee2:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801bee6:	ee61 7a27 	vmul.f32	s15, s2, s15
 801beea:	ee77 2a62 	vsub.f32	s5, s14, s5
 801beee:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801bef2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801bef6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801befa:	ee12 2a90 	vmov	r2, s5
 801befe:	eef0 2a47 	vmov.f32	s5, s14
 801bf02:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf06:	ee13 2a10 	vmov	r2, s6
 801bf0a:	9319      	str	r3, [sp, #100]	@ 0x64
 801bf0c:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf0e:	eeb0 3a67 	vmov.f32	s6, s15
 801bf12:	fb92 f3f3 	sdiv	r3, r2, r3
 801bf16:	931a      	str	r3, [sp, #104]	@ 0x68
 801bf18:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801bf1a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801bf1c:	3b01      	subs	r3, #1
 801bf1e:	9309      	str	r3, [sp, #36]	@ 0x24
 801bf20:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801bf22:	bf08      	it	eq
 801bf24:	4613      	moveq	r3, r2
 801bf26:	9306      	str	r3, [sp, #24]
 801bf28:	e6cb      	b.n	801bcc2 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801bf2a:	b151      	cbz	r1, 801bf42 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b6>
 801bf2c:	f81e 2002 	ldrb.w	r2, [lr, r2]
 801bf30:	4660      	mov	r0, ip
 801bf32:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bf36:	442a      	add	r2, r5
 801bf38:	4667      	mov	r7, ip
 801bf3a:	e731      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bf3c:	4660      	mov	r0, ip
 801bf3e:	4662      	mov	r2, ip
 801bf40:	e72e      	b.n	801bda0 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x114>
 801bf42:	4660      	mov	r0, ip
 801bf44:	4662      	mov	r2, ip
 801bf46:	e7f7      	b.n	801bf38 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2ac>
 801bf48:	f110 0e01 	adds.w	lr, r0, #1
 801bf4c:	f53f af71 	bmi.w	801be32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bf50:	4572      	cmp	r2, lr
 801bf52:	f6ff af6e 	blt.w	801be32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bf56:	f117 0e01 	adds.w	lr, r7, #1
 801bf5a:	f53f af6a 	bmi.w	801be32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bf5e:	45f4      	cmp	ip, lr
 801bf60:	f6ff af67 	blt.w	801be32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bf64:	b212      	sxth	r2, r2
 801bf66:	e9cd 3104 	strd	r3, r1, [sp, #16]
 801bf6a:	fa0f f38c 	sxth.w	r3, ip
 801bf6e:	9200      	str	r2, [sp, #0]
 801bf70:	4631      	mov	r1, r6
 801bf72:	9a08      	ldr	r2, [sp, #32]
 801bf74:	9301      	str	r3, [sp, #4]
 801bf76:	462b      	mov	r3, r5
 801bf78:	e9cd 0702 	strd	r0, r7, [sp, #8]
 801bf7c:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801bf7e:	f7ff fde9 	bl	801bb54 <_ZNK8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhS4_ssiihh>
 801bf82:	e756      	b.n	801be32 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a6>
 801bf84:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801bf86:	1426      	asrs	r6, r4, #16
 801bf88:	9818      	ldr	r0, [sp, #96]	@ 0x60
 801bf8a:	f3c4 3303 	ubfx	r3, r4, #12, #4
 801bf8e:	f3c2 3103 	ubfx	r1, r2, #12, #4
 801bf92:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801bf94:	1400      	asrs	r0, r0, #16
 801bf96:	f9b2 2008 	ldrsh.w	r2, [r2, #8]
 801bf9a:	fb02 6000 	mla	r0, r2, r0, r6
 801bf9e:	9e08      	ldr	r6, [sp, #32]
 801bfa0:	f816 e000 	ldrb.w	lr, [r6, r0]
 801bfa4:	eb06 0c00 	add.w	ip, r6, r0
 801bfa8:	eb0e 0e4e 	add.w	lr, lr, lr, lsl #1
 801bfac:	eb05 070e 	add.w	r7, r5, lr
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d064      	beq.n	801c07e <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3f2>
 801bfb4:	f89c 6001 	ldrb.w	r6, [ip, #1]
 801bfb8:	eb06 0646 	add.w	r6, r6, r6, lsl #1
 801bfbc:	442e      	add	r6, r5
 801bfbe:	2900      	cmp	r1, #0
 801bfc0:	d066      	beq.n	801c090 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x404>
 801bfc2:	eb0c 0002 	add.w	r0, ip, r2
 801bfc6:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801bfca:	7840      	ldrb	r0, [r0, #1]
 801bfcc:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801bfd0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801bfd4:	442a      	add	r2, r5
 801bfd6:	4428      	add	r0, r5
 801bfd8:	b29b      	uxth	r3, r3
 801bfda:	f815 b00e 	ldrb.w	fp, [r5, lr]
 801bfde:	b289      	uxth	r1, r1
 801bfe0:	f896 e000 	ldrb.w	lr, [r6]
 801bfe4:	f108 0803 	add.w	r8, r8, #3
 801bfe8:	f10a 3aff 	add.w	sl, sl, #4294967295
 801bfec:	fb03 f901 	mul.w	r9, r3, r1
 801bff0:	011b      	lsls	r3, r3, #4
 801bff2:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801bff6:	f5c3 7c80 	rsb	ip, r3, #256	@ 0x100
 801bffa:	eba3 0309 	sub.w	r3, r3, r9
 801bffe:	b289      	uxth	r1, r1
 801c000:	b29b      	uxth	r3, r3
 801c002:	ebac 0c01 	sub.w	ip, ip, r1
 801c006:	fb03 fe0e 	mul.w	lr, r3, lr
 801c00a:	fa1f fc8c 	uxth.w	ip, ip
 801c00e:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c012:	f892 b000 	ldrb.w	fp, [r2]
 801c016:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c01a:	f890 b000 	ldrb.w	fp, [r0]
 801c01e:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c022:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c026:	f808 ec06 	strb.w	lr, [r8, #-6]
 801c02a:	f896 e001 	ldrb.w	lr, [r6, #1]
 801c02e:	f897 b001 	ldrb.w	fp, [r7, #1]
 801c032:	fb03 fe0e 	mul.w	lr, r3, lr
 801c036:	fb0c ee0b 	mla	lr, ip, fp, lr
 801c03a:	f892 b001 	ldrb.w	fp, [r2, #1]
 801c03e:	fb01 ee0b 	mla	lr, r1, fp, lr
 801c042:	f890 b001 	ldrb.w	fp, [r0, #1]
 801c046:	fb09 ee0b 	mla	lr, r9, fp, lr
 801c04a:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801c04e:	f808 ec05 	strb.w	lr, [r8, #-5]
 801c052:	78b6      	ldrb	r6, [r6, #2]
 801c054:	78bf      	ldrb	r7, [r7, #2]
 801c056:	4373      	muls	r3, r6
 801c058:	7896      	ldrb	r6, [r2, #2]
 801c05a:	7882      	ldrb	r2, [r0, #2]
 801c05c:	fb0c 3307 	mla	r3, ip, r7, r3
 801c060:	fb01 3306 	mla	r3, r1, r6, r3
 801c064:	fb09 3902 	mla	r9, r9, r2, r3
 801c068:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c06a:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801c06c:	441c      	add	r4, r3
 801c06e:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801c070:	ea4f 2929 	mov.w	r9, r9, asr #8
 801c074:	4413      	add	r3, r2
 801c076:	f808 9c04 	strb.w	r9, [r8, #-4]
 801c07a:	9318      	str	r3, [sp, #96]	@ 0x60
 801c07c:	e70d      	b.n	801be9a <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20e>
 801c07e:	b151      	cbz	r1, 801c096 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x40a>
 801c080:	f81c 2002 	ldrb.w	r2, [ip, r2]
 801c084:	4638      	mov	r0, r7
 801c086:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 801c08a:	442a      	add	r2, r5
 801c08c:	463e      	mov	r6, r7
 801c08e:	e7a3      	b.n	801bfd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c090:	4638      	mov	r0, r7
 801c092:	463a      	mov	r2, r7
 801c094:	e7a0      	b.n	801bfd8 <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801c096:	4638      	mov	r0, r7
 801c098:	463a      	mov	r2, r7
 801c09a:	e7f7      	b.n	801c08c <_ZN8touchgfx8LCD24bpp57TextureMapper_L8_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x400>
 801c09c:	b00d      	add	sp, #52	@ 0x34
 801c09e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801c0a2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>:
 801c0a2:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c0a6:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801c0aa:	f9bd c030 	ldrsh.w	ip, [sp, #48]	@ 0x30
 801c0ae:	2d00      	cmp	r5, #0
 801c0b0:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801c0b4:	fb05 700c 	mla	r0, r5, ip, r7
 801c0b8:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801c0bc:	f89d e044 	ldrb.w	lr, [sp, #68]	@ 0x44
 801c0c0:	eb02 0800 	add.w	r8, r2, r0
 801c0c4:	f2c0 8118 	blt.w	801c2f8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c0c8:	45a9      	cmp	r9, r5
 801c0ca:	f340 8115 	ble.w	801c2f8 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x256>
 801c0ce:	2f00      	cmp	r7, #0
 801c0d0:	f2c0 8110 	blt.w	801c2f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c0d4:	45bc      	cmp	ip, r7
 801c0d6:	f340 810d 	ble.w	801c2f4 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x252>
 801c0da:	5c12      	ldrb	r2, [r2, r0]
 801c0dc:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801c0e0:	1c7a      	adds	r2, r7, #1
 801c0e2:	f100 810c 	bmi.w	801c2fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c0e6:	4594      	cmp	ip, r2
 801c0e8:	f340 8109 	ble.w	801c2fe <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x25c>
 801c0ec:	2c00      	cmp	r4, #0
 801c0ee:	f000 8108 	beq.w	801c302 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x260>
 801c0f2:	f898 2001 	ldrb.w	r2, [r8, #1]
 801c0f6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801c0fa:	3501      	adds	r5, #1
 801c0fc:	f100 8105 	bmi.w	801c30a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c100:	45a9      	cmp	r9, r5
 801c102:	f340 8102 	ble.w	801c30a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x268>
 801c106:	f1be 0f00 	cmp.w	lr, #0
 801c10a:	f000 8101 	beq.w	801c310 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x26e>
 801c10e:	2f00      	cmp	r7, #0
 801c110:	f2c0 80f9 	blt.w	801c306 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c114:	45bc      	cmp	ip, r7
 801c116:	f340 80f6 	ble.w	801c306 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x264>
 801c11a:	f818 200c 	ldrb.w	r2, [r8, ip]
 801c11e:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801c122:	3701      	adds	r7, #1
 801c124:	f100 80f7 	bmi.w	801c316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c128:	45bc      	cmp	ip, r7
 801c12a:	f340 80f4 	ble.w	801c316 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x274>
 801c12e:	2c00      	cmp	r4, #0
 801c130:	f000 80f3 	beq.w	801c31a <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x278>
 801c134:	44c4      	add	ip, r8
 801c136:	f89c 2001 	ldrb.w	r2, [ip, #1]
 801c13a:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801c13e:	fa1f fc84 	uxth.w	ip, r4
 801c142:	fa1f f48e 	uxth.w	r4, lr
 801c146:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801c14a:	fb04 fe0c 	mul.w	lr, r4, ip
 801c14e:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801c152:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801c156:	ebce 1404 	rsb	r4, lr, r4, lsl #4
 801c15a:	ebac 070e 	sub.w	r7, ip, lr
 801c15e:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801c162:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801c166:	b2a4      	uxth	r4, r4
 801c168:	b2bf      	uxth	r7, r7
 801c16a:	1b1b      	subs	r3, r3, r4
 801c16c:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801c170:	fb07 fc0a 	mul.w	ip, r7, sl
 801c174:	b29b      	uxth	r3, r3
 801c176:	fb03 cc0b 	mla	ip, r3, fp, ip
 801c17a:	9300      	str	r3, [sp, #0]
 801c17c:	fb04 cc09 	mla	ip, r4, r9, ip
 801c180:	fb0e cc08 	mla	ip, lr, r8, ip
 801c184:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c188:	9301      	str	r3, [sp, #4]
 801c18a:	2b00      	cmp	r3, #0
 801c18c:	f000 80af 	beq.w	801c2ee <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x24c>
 801c190:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801c194:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c198:	fb0b fc0c 	mul.w	ip, fp, ip
 801c19c:	fb0b f606 	mul.w	r6, fp, r6
 801c1a0:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801c1a4:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801c1a8:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801c1ac:	44dc      	add	ip, fp
 801c1ae:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801c1b2:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c1b6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1ba:	fb0a fb0b 	mul.w	fp, sl, fp
 801c1be:	fb0a fa00 	mul.w	sl, sl, r0
 801c1c2:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801c1c6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801c1ca:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801c1ce:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801c1d2:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801c1d6:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c1da:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801c1de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c1e2:	0a36      	lsrs	r6, r6, #8
 801c1e4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c1e8:	44dc      	add	ip, fp
 801c1ea:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801c1ee:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801c1f2:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801c1f6:	fb09 fb0b 	mul.w	fp, r9, fp
 801c1fa:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c1fe:	fb09 f905 	mul.w	r9, r9, r5
 801c202:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801c206:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c20a:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801c20e:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c212:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c216:	fb0c fc07 	mul.w	ip, ip, r7
 801c21a:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801c21e:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801c222:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801c226:	4458      	add	r0, fp
 801c228:	fb08 f505 	mul.w	r5, r8, r5
 801c22c:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c230:	fb08 f802 	mul.w	r8, r8, r2
 801c234:	0a00      	lsrs	r0, r0, #8
 801c236:	0a2a      	lsrs	r2, r5, #8
 801c238:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801c23c:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801c240:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801c244:	4415      	add	r5, r2
 801c246:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801c24a:	0a2d      	lsrs	r5, r5, #8
 801c24c:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801c250:	9a00      	ldr	r2, [sp, #0]
 801c252:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801c256:	fb03 cc02 	mla	ip, r3, r2, ip
 801c25a:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801c25e:	9b01      	ldr	r3, [sp, #4]
 801c260:	fb05 c50e 	mla	r5, r5, lr, ip
 801c264:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801c268:	fb00 5004 	mla	r0, r0, r4, r5
 801c26c:	0a00      	lsrs	r0, r0, #8
 801c26e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801c272:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801c276:	4378      	muls	r0, r7
 801c278:	fb02 0006 	mla	r0, r2, r6, r0
 801c27c:	fb0e 0e08 	mla	lr, lr, r8, r0
 801c280:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801c284:	fb04 e000 	mla	r0, r4, r0, lr
 801c288:	0a00      	lsrs	r0, r0, #8
 801c28a:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801c28e:	4328      	orrs	r0, r5
 801c290:	f89d 5048 	ldrb.w	r5, [sp, #72]	@ 0x48
 801c294:	b2ad      	uxth	r5, r5
 801c296:	b2c4      	uxtb	r4, r0
 801c298:	436b      	muls	r3, r5
 801c29a:	fb14 f405 	smulbb	r4, r4, r5
 801c29e:	1c5a      	adds	r2, r3, #1
 801c2a0:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801c2a4:	780b      	ldrb	r3, [r1, #0]
 801c2a6:	ea6f 2212 	mvn.w	r2, r2, lsr #8
 801c2aa:	b2d2      	uxtb	r2, r2
 801c2ac:	fb03 4302 	mla	r3, r3, r2, r4
 801c2b0:	b29b      	uxth	r3, r3
 801c2b2:	1c5c      	adds	r4, r3, #1
 801c2b4:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c2b8:	784c      	ldrb	r4, [r1, #1]
 801c2ba:	fb14 f402 	smulbb	r4, r4, r2
 801c2be:	121b      	asrs	r3, r3, #8
 801c2c0:	700b      	strb	r3, [r1, #0]
 801c2c2:	f3c0 2307 	ubfx	r3, r0, #8, #8
 801c2c6:	fb03 4305 	mla	r3, r3, r5, r4
 801c2ca:	b29b      	uxth	r3, r3
 801c2cc:	1c5c      	adds	r4, r3, #1
 801c2ce:	eb04 2313 	add.w	r3, r4, r3, lsr #8
 801c2d2:	0c04      	lsrs	r4, r0, #16
 801c2d4:	7888      	ldrb	r0, [r1, #2]
 801c2d6:	121b      	asrs	r3, r3, #8
 801c2d8:	fb10 f002 	smulbb	r0, r0, r2
 801c2dc:	704b      	strb	r3, [r1, #1]
 801c2de:	fb04 0005 	mla	r0, r4, r5, r0
 801c2e2:	b280      	uxth	r0, r0
 801c2e4:	1c43      	adds	r3, r0, #1
 801c2e6:	eb03 2010 	add.w	r0, r3, r0, lsr #8
 801c2ea:	1200      	asrs	r0, r0, #8
 801c2ec:	7088      	strb	r0, [r1, #2]
 801c2ee:	b003      	add	sp, #12
 801c2f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c2f4:	2600      	movs	r6, #0
 801c2f6:	e6f3      	b.n	801c0e0 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x3e>
 801c2f8:	2000      	movs	r0, #0
 801c2fa:	4606      	mov	r6, r0
 801c2fc:	e6fd      	b.n	801c0fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c2fe:	2000      	movs	r0, #0
 801c300:	e6fb      	b.n	801c0fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c302:	4620      	mov	r0, r4
 801c304:	e6f9      	b.n	801c0fa <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x58>
 801c306:	2500      	movs	r5, #0
 801c308:	e70b      	b.n	801c122 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x80>
 801c30a:	2200      	movs	r2, #0
 801c30c:	4615      	mov	r5, r2
 801c30e:	e716      	b.n	801c13e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c310:	4672      	mov	r2, lr
 801c312:	4675      	mov	r5, lr
 801c314:	e713      	b.n	801c13e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c316:	2200      	movs	r2, #0
 801c318:	e711      	b.n	801c13e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>
 801c31a:	4622      	mov	r2, r4
 801c31c:	e70f      	b.n	801c13e <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh+0x9c>

0801c31e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801c31e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c322:	b09f      	sub	sp, #124	@ 0x7c
 801c324:	921b      	str	r2, [sp, #108]	@ 0x6c
 801c326:	9309      	str	r3, [sp, #36]	@ 0x24
 801c328:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801c32a:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801c32e:	901d      	str	r0, [sp, #116]	@ 0x74
 801c330:	931c      	str	r3, [sp, #112]	@ 0x70
 801c332:	6850      	ldr	r0, [r2, #4]
 801c334:	9119      	str	r1, [sp, #100]	@ 0x64
 801c336:	6812      	ldr	r2, [r2, #0]
 801c338:	9d2a      	ldr	r5, [sp, #168]	@ 0xa8
 801c33a:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801c33e:	fb00 1303 	mla	r3, r0, r3, r1
 801c342:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801c346:	18d3      	adds	r3, r2, r3
 801c348:	930c      	str	r3, [sp, #48]	@ 0x30
 801c34a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c34c:	681b      	ldr	r3, [r3, #0]
 801c34e:	9312      	str	r3, [sp, #72]	@ 0x48
 801c350:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c352:	685e      	ldr	r6, [r3, #4]
 801c354:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 801c358:	3604      	adds	r6, #4
 801c35a:	930d      	str	r3, [sp, #52]	@ 0x34
 801c35c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c35e:	2b00      	cmp	r3, #0
 801c360:	dc03      	bgt.n	801c36a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801c362:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c364:	2b00      	cmp	r3, #0
 801c366:	f340 8378 	ble.w	801ca5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c36a:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c36c:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c370:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801c374:	1e48      	subs	r0, r1, #1
 801c376:	1e57      	subs	r7, r2, #1
 801c378:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c37a:	2b00      	cmp	r3, #0
 801c37c:	f340 818c 	ble.w	801c698 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37a>
 801c380:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c382:	142b      	asrs	r3, r5, #16
 801c384:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801c388:	d406      	bmi.n	801c398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c38a:	4584      	cmp	ip, r0
 801c38c:	da04      	bge.n	801c398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c38e:	2b00      	cmp	r3, #0
 801c390:	db02      	blt.n	801c398 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7a>
 801c392:	42bb      	cmp	r3, r7
 801c394:	f2c0 8181 	blt.w	801c69a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37c>
 801c398:	f11c 0c01 	adds.w	ip, ip, #1
 801c39c:	f100 816f 	bmi.w	801c67e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c3a0:	4561      	cmp	r1, ip
 801c3a2:	f2c0 816c 	blt.w	801c67e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c3a6:	3301      	adds	r3, #1
 801c3a8:	f100 8169 	bmi.w	801c67e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c3ac:	429a      	cmp	r2, r3
 801c3ae:	f2c0 8166 	blt.w	801c67e <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x360>
 801c3b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c3b4:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801c3b6:	931a      	str	r3, [sp, #104]	@ 0x68
 801c3b8:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	f340 818c 	ble.w	801c6d8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801c3c0:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c3c2:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801c3c6:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801c3ca:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c3ce:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c3d0:	e9d3 0e02 	ldrd	r0, lr, [r3, #8]
 801c3d4:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c3d6:	141b      	asrs	r3, r3, #16
 801c3d8:	f100 81d0 	bmi.w	801c77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c3dc:	f100 38ff 	add.w	r8, r0, #4294967295
 801c3e0:	4543      	cmp	r3, r8
 801c3e2:	f280 81cb 	bge.w	801c77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c3e6:	f1bc 0f00 	cmp.w	ip, #0
 801c3ea:	f2c0 81c7 	blt.w	801c77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c3ee:	f10e 38ff 	add.w	r8, lr, #4294967295
 801c3f2:	45c4      	cmp	ip, r8
 801c3f4:	f280 81c2 	bge.w	801c77c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801c3f8:	b200      	sxth	r0, r0
 801c3fa:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c3fc:	fb0c 3300 	mla	r3, ip, r0, r3
 801c400:	eb04 0803 	add.w	r8, r4, r3
 801c404:	5ce3      	ldrb	r3, [r4, r3]
 801c406:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c40a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801c40e:	2a00      	cmp	r2, #0
 801c410:	f000 81a9 	beq.w	801c766 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x448>
 801c414:	f898 c001 	ldrb.w	ip, [r8, #1]
 801c418:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801c41c:	940e      	str	r4, [sp, #56]	@ 0x38
 801c41e:	0e24      	lsrs	r4, r4, #24
 801c420:	9415      	str	r4, [sp, #84]	@ 0x54
 801c422:	b179      	cbz	r1, 801c444 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c424:	eb08 0c00 	add.w	ip, r8, r0
 801c428:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c42c:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c430:	900a      	str	r0, [sp, #40]	@ 0x28
 801c432:	0e00      	lsrs	r0, r0, #24
 801c434:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c436:	f89c 0001 	ldrb.w	r0, [ip, #1]
 801c43a:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c43e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801c440:	0e00      	lsrs	r0, r0, #24
 801c442:	9016      	str	r0, [sp, #88]	@ 0x58
 801c444:	b292      	uxth	r2, r2
 801c446:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801c448:	b289      	uxth	r1, r1
 801c44a:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c44c:	fb02 f901 	mul.w	r9, r2, r1
 801c450:	0112      	lsls	r2, r2, #4
 801c452:	ebc9 1101 	rsb	r1, r9, r1, lsl #4
 801c456:	eba2 0809 	sub.w	r8, r2, r9
 801c45a:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c45e:	b289      	uxth	r1, r1
 801c460:	fa1f f888 	uxth.w	r8, r8
 801c464:	1a52      	subs	r2, r2, r1
 801c466:	fb08 f000 	mul.w	r0, r8, r0
 801c46a:	b292      	uxth	r2, r2
 801c46c:	fb02 000e 	mla	r0, r2, lr, r0
 801c470:	fb01 0004 	mla	r0, r1, r4, r0
 801c474:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c476:	fb09 0004 	mla	r0, r9, r4, r0
 801c47a:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801c47e:	2800      	cmp	r0, #0
 801c480:	f000 80f2 	beq.w	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c484:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801c488:	d01b      	beq.n	801c4c2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1a4>
 801c48a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c48e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c492:	fb0e fa0a 	mul.w	sl, lr, sl
 801c496:	fb0e fe03 	mul.w	lr, lr, r3
 801c49a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c49e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c4a2:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801c4a6:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c4aa:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801c4ae:	4453      	add	r3, sl
 801c4b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c4b4:	0a1b      	lsrs	r3, r3, #8
 801c4b6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c4ba:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c4be:	ea43 030c 	orr.w	r3, r3, ip
 801c4c2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c4c4:	2cff      	cmp	r4, #255	@ 0xff
 801c4c6:	d021      	beq.n	801c50c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ee>
 801c4c8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c4ca:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c4ce:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c4d0:	fb04 fb0b 	mul.w	fp, r4, fp
 801c4d4:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c4d6:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c4da:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801c4dc:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c4e0:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c4e4:	fb04 fa0a 	mul.w	sl, r4, sl
 801c4e8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c4ec:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c4f0:	44de      	add	lr, fp
 801c4f2:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c4f6:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c4fa:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c4fe:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c502:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c506:	ea4e 040a 	orr.w	r4, lr, sl
 801c50a:	940e      	str	r4, [sp, #56]	@ 0x38
 801c50c:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c50e:	2cff      	cmp	r4, #255	@ 0xff
 801c510:	d021      	beq.n	801c556 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x238>
 801c512:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c514:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c518:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c51a:	fb04 fb0b 	mul.w	fp, r4, fp
 801c51e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c520:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c524:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801c526:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c52a:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c52e:	fb04 fa0a 	mul.w	sl, r4, sl
 801c532:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c536:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c53a:	44de      	add	lr, fp
 801c53c:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c540:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c544:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c548:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c54c:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c550:	ea4e 040a 	orr.w	r4, lr, sl
 801c554:	940a      	str	r4, [sp, #40]	@ 0x28
 801c556:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c558:	2cff      	cmp	r4, #255	@ 0xff
 801c55a:	d021      	beq.n	801c5a0 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x282>
 801c55c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c55e:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801c562:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c564:	fb04 fb0b 	mul.w	fp, r4, fp
 801c568:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c56a:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c56e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801c570:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801c574:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801c578:	fb04 fa0a 	mul.w	sl, r4, sl
 801c57c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c580:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801c584:	44de      	add	lr, fp
 801c586:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801c58a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801c58e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c592:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801c596:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c59a:	ea4e 040a 	orr.w	r4, lr, sl
 801c59e:	940f      	str	r4, [sp, #60]	@ 0x3c
 801c5a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c5a2:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801c5a6:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c5aa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c5ae:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801c5b0:	fb08 fc0c 	mul.w	ip, r8, ip
 801c5b4:	fb02 cc0e 	mla	ip, r2, lr, ip
 801c5b8:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c5bc:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801c5be:	fb01 cc0e 	mla	ip, r1, lr, ip
 801c5c2:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801c5c6:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801c5c8:	fb09 cc0e 	mla	ip, r9, lr, ip
 801c5cc:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801c5d0:	fb08 f80e 	mul.w	r8, r8, lr
 801c5d4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c5d8:	fb02 8303 	mla	r3, r2, r3, r8
 801c5dc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c5de:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c5e2:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c5e6:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801c5e8:	fb01 330a 	mla	r3, r1, sl, r3
 801c5ec:	f402 417f 	and.w	r1, r2, #65280	@ 0xff00
 801c5f0:	fb09 3901 	mla	r9, r9, r1, r3
 801c5f4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c5f6:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801c5f8:	4343      	muls	r3, r0
 801c5fa:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801c5fe:	1c58      	adds	r0, r3, #1
 801c600:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801c604:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801c608:	ea4c 0c09 	orr.w	ip, ip, r9
 801c60c:	783b      	ldrb	r3, [r7, #0]
 801c60e:	fa5f f28c 	uxtb.w	r2, ip
 801c612:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801c616:	fb12 f201 	smulbb	r2, r2, r1
 801c61a:	b2c0      	uxtb	r0, r0
 801c61c:	fb03 2300 	mla	r3, r3, r0, r2
 801c620:	b29b      	uxth	r3, r3
 801c622:	1c5a      	adds	r2, r3, #1
 801c624:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c628:	787a      	ldrb	r2, [r7, #1]
 801c62a:	fb12 f200 	smulbb	r2, r2, r0
 801c62e:	121b      	asrs	r3, r3, #8
 801c630:	703b      	strb	r3, [r7, #0]
 801c632:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801c636:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801c63a:	fb03 2301 	mla	r3, r3, r1, r2
 801c63e:	b29b      	uxth	r3, r3
 801c640:	1c5a      	adds	r2, r3, #1
 801c642:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c646:	121b      	asrs	r3, r3, #8
 801c648:	707b      	strb	r3, [r7, #1]
 801c64a:	78bb      	ldrb	r3, [r7, #2]
 801c64c:	fb13 f000 	smulbb	r0, r3, r0
 801c650:	fb0c 0c01 	mla	ip, ip, r1, r0
 801c654:	fa1f fc8c 	uxth.w	ip, ip
 801c658:	f10c 0301 	add.w	r3, ip, #1
 801c65c:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801c660:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801c664:	f887 c002 	strb.w	ip, [r7, #2]
 801c668:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c66a:	3703      	adds	r7, #3
 801c66c:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801c66e:	441a      	add	r2, r3
 801c670:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c672:	441d      	add	r5, r3
 801c674:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c676:	9229      	str	r2, [sp, #164]	@ 0xa4
 801c678:	3b01      	subs	r3, #1
 801c67a:	931a      	str	r3, [sp, #104]	@ 0x68
 801c67c:	e69c      	b.n	801c3b8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x9a>
 801c67e:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801c680:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c682:	441c      	add	r4, r3
 801c684:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801c686:	441d      	add	r5, r3
 801c688:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c68a:	9429      	str	r4, [sp, #164]	@ 0xa4
 801c68c:	3b01      	subs	r3, #1
 801c68e:	9309      	str	r3, [sp, #36]	@ 0x24
 801c690:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c692:	3303      	adds	r3, #3
 801c694:	930c      	str	r3, [sp, #48]	@ 0x30
 801c696:	e66f      	b.n	801c378 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5a>
 801c698:	d026      	beq.n	801c6e8 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ca>
 801c69a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c69c:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801c69e:	3b01      	subs	r3, #1
 801c6a0:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c6a2:	fb00 4003 	mla	r0, r0, r3, r4
 801c6a6:	1400      	asrs	r0, r0, #16
 801c6a8:	f53f ae83 	bmi.w	801c3b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6ac:	3901      	subs	r1, #1
 801c6ae:	4288      	cmp	r0, r1
 801c6b0:	f6bf ae7f 	bge.w	801c3b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6b4:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801c6b6:	fb01 5303 	mla	r3, r1, r3, r5
 801c6ba:	141b      	asrs	r3, r3, #16
 801c6bc:	f53f ae79 	bmi.w	801c3b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6c0:	3a01      	subs	r2, #1
 801c6c2:	4293      	cmp	r3, r2
 801c6c4:	f6bf ae75 	bge.w	801c3b2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x94>
 801c6c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6ca:	f8dd b024 	ldr.w	fp, [sp, #36]	@ 0x24
 801c6ce:	f103 0e03 	add.w	lr, r3, #3
 801c6d2:	f1bb 0f00 	cmp.w	fp, #0
 801c6d6:	dc71      	bgt.n	801c7bc <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801c6d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c6da:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801c6de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801c6e0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801c6e4:	4423      	add	r3, r4
 801c6e6:	930c      	str	r3, [sp, #48]	@ 0x30
 801c6e8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c6ea:	2b00      	cmp	r3, #0
 801c6ec:	f340 81b5 	ble.w	801ca5a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x73c>
 801c6f0:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801c6f4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c6f6:	ee30 0a04 	vadd.f32	s0, s0, s8
 801c6fa:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801c6fe:	eef0 6a62 	vmov.f32	s13, s5
 801c702:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801c706:	ee31 1a05 	vadd.f32	s2, s2, s10
 801c70a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c70e:	edcd 6a29 	vstr	s13, [sp, #164]	@ 0xa4
 801c712:	eef0 6a43 	vmov.f32	s13, s6
 801c716:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801c71a:	ee16 5a90 	vmov	r5, s13
 801c71e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801c722:	ee61 7a27 	vmul.f32	s15, s2, s15
 801c726:	ee77 2a62 	vsub.f32	s5, s14, s5
 801c72a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801c72e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801c732:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801c736:	ee12 2a90 	vmov	r2, s5
 801c73a:	eef0 2a47 	vmov.f32	s5, s14
 801c73e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c742:	ee13 2a10 	vmov	r2, s6
 801c746:	932b      	str	r3, [sp, #172]	@ 0xac
 801c748:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c74a:	eeb0 3a67 	vmov.f32	s6, s15
 801c74e:	fb92 f3f3 	sdiv	r3, r2, r3
 801c752:	932c      	str	r3, [sp, #176]	@ 0xb0
 801c754:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801c756:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801c758:	3b01      	subs	r3, #1
 801c75a:	9319      	str	r3, [sp, #100]	@ 0x64
 801c75c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801c75e:	bf08      	it	eq
 801c760:	4613      	moveq	r3, r2
 801c762:	9309      	str	r3, [sp, #36]	@ 0x24
 801c764:	e5fa      	b.n	801c35c <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801c766:	2900      	cmp	r1, #0
 801c768:	f43f ae6c 	beq.w	801c444 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c76c:	f818 0000 	ldrb.w	r0, [r8, r0]
 801c770:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c774:	900a      	str	r0, [sp, #40]	@ 0x28
 801c776:	0e00      	lsrs	r0, r0, #24
 801c778:	9013      	str	r0, [sp, #76]	@ 0x4c
 801c77a:	e663      	b.n	801c444 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x126>
 801c77c:	f113 0801 	adds.w	r8, r3, #1
 801c780:	f53f af72 	bmi.w	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c784:	4540      	cmp	r0, r8
 801c786:	f6ff af6f 	blt.w	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c78a:	f11c 0801 	adds.w	r8, ip, #1
 801c78e:	f53f af6b 	bmi.w	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c792:	45c6      	cmp	lr, r8
 801c794:	f6ff af68 	blt.w	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c798:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801c79a:	b200      	sxth	r0, r0
 801c79c:	9302      	str	r3, [sp, #8]
 801c79e:	fa0f f38e 	sxth.w	r3, lr
 801c7a2:	9000      	str	r0, [sp, #0]
 801c7a4:	9301      	str	r3, [sp, #4]
 801c7a6:	4633      	mov	r3, r6
 801c7a8:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801c7aa:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801c7ae:	e9cd c203 	strd	ip, r2, [sp, #12]
 801c7b2:	4639      	mov	r1, r7
 801c7b4:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c7b6:	f7ff fc74 	bl	801c0a2 <_ZNK8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhPKmssiihhh>
 801c7ba:	e755      	b.n	801c668 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801c7bc:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801c7be:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801c7c2:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 801c7c4:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801c7c8:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801c7ca:	1427      	asrs	r7, r4, #16
 801c7cc:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801c7ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801c7d2:	142b      	asrs	r3, r5, #16
 801c7d4:	fb01 7303 	mla	r3, r1, r3, r7
 801c7d8:	18e7      	adds	r7, r4, r3
 801c7da:	5ce3      	ldrb	r3, [r4, r3]
 801c7dc:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c7e0:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801c7e4:	2a00      	cmp	r2, #0
 801c7e6:	f000 812e 	beq.w	801ca46 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x728>
 801c7ea:	f897 8001 	ldrb.w	r8, [r7, #1]
 801c7ee:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801c7f2:	9410      	str	r4, [sp, #64]	@ 0x40
 801c7f4:	0e24      	lsrs	r4, r4, #24
 801c7f6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801c7f8:	b170      	cbz	r0, 801c818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801c7fa:	eb07 0801 	add.w	r8, r7, r1
 801c7fe:	5c79      	ldrb	r1, [r7, r1]
 801c800:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c804:	910b      	str	r1, [sp, #44]	@ 0x2c
 801c806:	0e09      	lsrs	r1, r1, #24
 801c808:	9114      	str	r1, [sp, #80]	@ 0x50
 801c80a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801c80e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c812:	9111      	str	r1, [sp, #68]	@ 0x44
 801c814:	0e09      	lsrs	r1, r1, #24
 801c816:	9118      	str	r1, [sp, #96]	@ 0x60
 801c818:	b292      	uxth	r2, r2
 801c81a:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801c81c:	b280      	uxth	r0, r0
 801c81e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c820:	fb02 f900 	mul.w	r9, r2, r0
 801c824:	0112      	lsls	r2, r2, #4
 801c826:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801c82a:	eba2 0809 	sub.w	r8, r2, r9
 801c82e:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801c832:	b280      	uxth	r0, r0
 801c834:	fa1f f888 	uxth.w	r8, r8
 801c838:	1a12      	subs	r2, r2, r0
 801c83a:	fb08 f101 	mul.w	r1, r8, r1
 801c83e:	b292      	uxth	r2, r2
 801c840:	fb02 110c 	mla	r1, r2, ip, r1
 801c844:	fb00 1104 	mla	r1, r0, r4, r1
 801c848:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c84a:	fb09 1104 	mla	r1, r9, r4, r1
 801c84e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801c852:	2900      	cmp	r1, #0
 801c854:	f000 80ec 	beq.w	801ca30 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x712>
 801c858:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801c85c:	d019      	beq.n	801c892 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x574>
 801c85e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801c862:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c866:	fb0c fa0a 	mul.w	sl, ip, sl
 801c86a:	fb0c fc03 	mul.w	ip, ip, r3
 801c86e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801c872:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801c876:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801c87a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c87e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801c882:	4453      	add	r3, sl
 801c884:	0a3f      	lsrs	r7, r7, #8
 801c886:	0a1b      	lsrs	r3, r3, #8
 801c888:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801c88c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801c890:	433b      	orrs	r3, r7
 801c892:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c894:	2cff      	cmp	r4, #255	@ 0xff
 801c896:	d020      	beq.n	801c8da <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5bc>
 801c898:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c89a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c89e:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c8a0:	4367      	muls	r7, r4
 801c8a2:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c8a4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c8a8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c8ac:	9c17      	ldr	r4, [sp, #92]	@ 0x5c
 801c8ae:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c8b2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c8b6:	fb04 fa0a 	mul.w	sl, r4, sl
 801c8ba:	44bc      	add	ip, r7
 801c8bc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c8c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c8c4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c8c8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c8cc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c8d0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c8d4:	ea4c 040a 	orr.w	r4, ip, sl
 801c8d8:	9410      	str	r4, [sp, #64]	@ 0x40
 801c8da:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c8dc:	2cff      	cmp	r4, #255	@ 0xff
 801c8de:	d020      	beq.n	801c922 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x604>
 801c8e0:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c8e2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c8e6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c8e8:	4367      	muls	r7, r4
 801c8ea:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c8ec:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c8f0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c8f4:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801c8f6:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c8fa:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c8fe:	fb04 fa0a 	mul.w	sl, r4, sl
 801c902:	44bc      	add	ip, r7
 801c904:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c908:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c90c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c910:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c914:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c918:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c91c:	ea4c 040a 	orr.w	r4, ip, sl
 801c920:	940b      	str	r4, [sp, #44]	@ 0x2c
 801c922:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c924:	2cff      	cmp	r4, #255	@ 0xff
 801c926:	d020      	beq.n	801c96a <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x64c>
 801c928:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c92a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c92e:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c930:	4367      	muls	r7, r4
 801c932:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c934:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801c938:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801c93c:	9c18      	ldr	r4, [sp, #96]	@ 0x60
 801c93e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801c942:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c946:	fb04 fa0a 	mul.w	sl, r4, sl
 801c94a:	44bc      	add	ip, r7
 801c94c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801c950:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c954:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801c958:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801c95c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801c960:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801c964:	ea4c 040a 	orr.w	r4, ip, sl
 801c968:	9411      	str	r4, [sp, #68]	@ 0x44
 801c96a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c96c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801c970:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801c974:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801c978:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801c97a:	fb08 f707 	mul.w	r7, r8, r7
 801c97e:	fb02 770c 	mla	r7, r2, ip, r7
 801c982:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c986:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801c988:	fb00 770c 	mla	r7, r0, ip, r7
 801c98c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801c990:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801c992:	fb09 770c 	mla	r7, r9, ip, r7
 801c996:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801c99a:	fb08 f80c 	mul.w	r8, r8, ip
 801c99e:	0a3f      	lsrs	r7, r7, #8
 801c9a0:	fb02 8303 	mla	r3, r2, r3, r8
 801c9a4:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c9a6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801c9aa:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801c9ae:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801c9b0:	fb00 330a 	mla	r3, r0, sl, r3
 801c9b4:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801c9b8:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801c9ba:	fb09 3c0c 	mla	ip, r9, ip, r3
 801c9be:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c9c0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801c9c4:	434b      	muls	r3, r1
 801c9c6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801c9ca:	1c59      	adds	r1, r3, #1
 801c9cc:	ea47 070c 	orr.w	r7, r7, ip
 801c9d0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801c9d4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801c9d8:	b2fa      	uxtb	r2, r7
 801c9da:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801c9de:	fb12 f200 	smulbb	r2, r2, r0
 801c9e2:	b2c9      	uxtb	r1, r1
 801c9e4:	fb03 2301 	mla	r3, r3, r1, r2
 801c9e8:	b29b      	uxth	r3, r3
 801c9ea:	1c5a      	adds	r2, r3, #1
 801c9ec:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801c9f0:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801c9f4:	fb12 f201 	smulbb	r2, r2, r1
 801c9f8:	121b      	asrs	r3, r3, #8
 801c9fa:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801c9fe:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801ca02:	0c3f      	lsrs	r7, r7, #16
 801ca04:	fb03 2300 	mla	r3, r3, r0, r2
 801ca08:	b29b      	uxth	r3, r3
 801ca0a:	1c5a      	adds	r2, r3, #1
 801ca0c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801ca10:	121b      	asrs	r3, r3, #8
 801ca12:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801ca16:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801ca1a:	fb13 f101 	smulbb	r1, r3, r1
 801ca1e:	fb07 1700 	mla	r7, r7, r0, r1
 801ca22:	b2bf      	uxth	r7, r7
 801ca24:	1c7b      	adds	r3, r7, #1
 801ca26:	eb03 2717 	add.w	r7, r3, r7, lsr #8
 801ca2a:	123f      	asrs	r7, r7, #8
 801ca2c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801ca30:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801ca32:	f10e 0e03 	add.w	lr, lr, #3
 801ca36:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ca38:	f10b 3bff 	add.w	fp, fp, #4294967295
 801ca3c:	441a      	add	r2, r3
 801ca3e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ca40:	9229      	str	r2, [sp, #164]	@ 0xa4
 801ca42:	441d      	add	r5, r3
 801ca44:	e645      	b.n	801c6d2 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3b4>
 801ca46:	2800      	cmp	r0, #0
 801ca48:	f43f aee6 	beq.w	801c818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ca4c:	5c79      	ldrb	r1, [r7, r1]
 801ca4e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801ca52:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ca54:	0e09      	lsrs	r1, r1, #24
 801ca56:	9114      	str	r1, [sp, #80]	@ 0x50
 801ca58:	e6de      	b.n	801c818 <_ZN8touchgfx8LCD24bpp60TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4fa>
 801ca5a:	b01f      	add	sp, #124	@ 0x7c
 801ca5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801ca60 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>:
 801ca60:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ca64:	e9dd 750e 	ldrd	r7, r5, [sp, #56]	@ 0x38
 801ca68:	f9bd e030 	ldrsh.w	lr, [sp, #48]	@ 0x30
 801ca6c:	2d00      	cmp	r5, #0
 801ca6e:	f9bd 9034 	ldrsh.w	r9, [sp, #52]	@ 0x34
 801ca72:	fb05 700e 	mla	r0, r5, lr, r7
 801ca76:	f89d 4040 	ldrb.w	r4, [sp, #64]	@ 0x40
 801ca7a:	f89d c044 	ldrb.w	ip, [sp, #68]	@ 0x44
 801ca7e:	eb02 0800 	add.w	r8, r2, r0
 801ca82:	f2c0 8105 	blt.w	801cc90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ca86:	45a9      	cmp	r9, r5
 801ca88:	f340 8102 	ble.w	801cc90 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x230>
 801ca8c:	2f00      	cmp	r7, #0
 801ca8e:	f2c0 80fd 	blt.w	801cc8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ca92:	45be      	cmp	lr, r7
 801ca94:	f340 80fa 	ble.w	801cc8c <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x22c>
 801ca98:	5c12      	ldrb	r2, [r2, r0]
 801ca9a:	f853 6022 	ldr.w	r6, [r3, r2, lsl #2]
 801ca9e:	1c7a      	adds	r2, r7, #1
 801caa0:	f100 80f9 	bmi.w	801cc96 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801caa4:	4596      	cmp	lr, r2
 801caa6:	f340 80f6 	ble.w	801cc96 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x236>
 801caaa:	2c00      	cmp	r4, #0
 801caac:	f000 80f5 	beq.w	801cc9a <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23a>
 801cab0:	f898 2001 	ldrb.w	r2, [r8, #1]
 801cab4:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 801cab8:	3501      	adds	r5, #1
 801caba:	f100 80f2 	bmi.w	801cca2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cabe:	45a9      	cmp	r9, r5
 801cac0:	f340 80ef 	ble.w	801cca2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x242>
 801cac4:	f1bc 0f00 	cmp.w	ip, #0
 801cac8:	f000 80ee 	beq.w	801cca8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x248>
 801cacc:	2f00      	cmp	r7, #0
 801cace:	f2c0 80e6 	blt.w	801cc9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cad2:	45be      	cmp	lr, r7
 801cad4:	f340 80e3 	ble.w	801cc9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x23e>
 801cad8:	f818 200e 	ldrb.w	r2, [r8, lr]
 801cadc:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
 801cae0:	3701      	adds	r7, #1
 801cae2:	f100 80e4 	bmi.w	801ccae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801cae6:	45be      	cmp	lr, r7
 801cae8:	f340 80e1 	ble.w	801ccae <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x24e>
 801caec:	2c00      	cmp	r4, #0
 801caee:	f000 80e0 	beq.w	801ccb2 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x252>
 801caf2:	44c6      	add	lr, r8
 801caf4:	f89e 2001 	ldrb.w	r2, [lr, #1]
 801caf8:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 801cafc:	b2a3      	uxth	r3, r4
 801cafe:	fa1f fc8c 	uxth.w	ip, ip
 801cb02:	ea4f 6a10 	mov.w	sl, r0, lsr #24
 801cb06:	fb0c fe03 	mul.w	lr, ip, r3
 801cb0a:	011b      	lsls	r3, r3, #4
 801cb0c:	ea4f 6b16 	mov.w	fp, r6, lsr #24
 801cb10:	ebce 1c0c 	rsb	ip, lr, ip, lsl #4
 801cb14:	eba3 070e 	sub.w	r7, r3, lr
 801cb18:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 801cb1c:	ea4f 6915 	mov.w	r9, r5, lsr #24
 801cb20:	fa1f f48c 	uxth.w	r4, ip
 801cb24:	b2bf      	uxth	r7, r7
 801cb26:	1b1b      	subs	r3, r3, r4
 801cb28:	ea4f 6812 	mov.w	r8, r2, lsr #24
 801cb2c:	fb07 fc0a 	mul.w	ip, r7, sl
 801cb30:	b29b      	uxth	r3, r3
 801cb32:	fb03 cc0b 	mla	ip, r3, fp, ip
 801cb36:	9300      	str	r3, [sp, #0]
 801cb38:	fb04 cc09 	mla	ip, r4, r9, ip
 801cb3c:	fb0e cc08 	mla	ip, lr, r8, ip
 801cb40:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801cb44:	9301      	str	r3, [sp, #4]
 801cb46:	2b00      	cmp	r3, #0
 801cb48:	f000 809d 	beq.w	801cc86 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x226>
 801cb4c:	f006 1cff 	and.w	ip, r6, #16711935	@ 0xff00ff
 801cb50:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cb54:	fb0b fc0c 	mul.w	ip, fp, ip
 801cb58:	fb0b f606 	mul.w	r6, fp, r6
 801cb5c:	ea4f 2b1c 	mov.w	fp, ip, lsr #8
 801cb60:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801cb64:	f00b 1bff 	and.w	fp, fp, #16711935	@ 0xff00ff
 801cb68:	44dc      	add	ip, fp
 801cb6a:	f000 1bff 	and.w	fp, r0, #16711935	@ 0xff00ff
 801cb6e:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cb72:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cb76:	fb0a fb0b 	mul.w	fp, sl, fp
 801cb7a:	fb0a fa00 	mul.w	sl, sl, r0
 801cb7e:	f00c 13ff 	and.w	r3, ip, #16711935	@ 0xff00ff
 801cb82:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801cb86:	f50a 7080 	add.w	r0, sl, #256	@ 0x100
 801cb8a:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801cb8e:	ea4f 2c1b 	mov.w	ip, fp, lsr #8
 801cb92:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cb96:	eb00 2a1a 	add.w	sl, r0, sl, lsr #8
 801cb9a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cb9e:	0a36      	lsrs	r6, r6, #8
 801cba0:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cba4:	44dc      	add	ip, fp
 801cba6:	f005 1bff 	and.w	fp, r5, #16711935	@ 0xff00ff
 801cbaa:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801cbae:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801cbb2:	fb09 fb0b 	mul.w	fp, r9, fp
 801cbb6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cbba:	fb09 f905 	mul.w	r9, r9, r5
 801cbbe:	ea4f 201b 	mov.w	r0, fp, lsr #8
 801cbc2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cbc6:	f509 7580 	add.w	r5, r9, #256	@ 0x100
 801cbca:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cbce:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cbd2:	fb0c fc07 	mul.w	ip, ip, r7
 801cbd6:	eb05 2919 	add.w	r9, r5, r9, lsr #8
 801cbda:	f002 15ff 	and.w	r5, r2, #16711935	@ 0xff00ff
 801cbde:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801cbe2:	4458      	add	r0, fp
 801cbe4:	fb08 f505 	mul.w	r5, r8, r5
 801cbe8:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cbec:	fb08 f802 	mul.w	r8, r8, r2
 801cbf0:	0a00      	lsrs	r0, r0, #8
 801cbf2:	0a2a      	lsrs	r2, r5, #8
 801cbf4:	f105 1501 	add.w	r5, r5, #65537	@ 0x10001
 801cbf8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801cbfc:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801cc00:	4415      	add	r5, r2
 801cc02:	f508 7280 	add.w	r2, r8, #256	@ 0x100
 801cc06:	0a2d      	lsrs	r5, r5, #8
 801cc08:	eb02 2818 	add.w	r8, r2, r8, lsr #8
 801cc0c:	9a00      	ldr	r2, [sp, #0]
 801cc0e:	f005 15ff 	and.w	r5, r5, #16711935	@ 0xff00ff
 801cc12:	fb03 cc02 	mla	ip, r3, r2, ip
 801cc16:	ea4f 2818 	mov.w	r8, r8, lsr #8
 801cc1a:	9b01      	ldr	r3, [sp, #4]
 801cc1c:	fb05 c50e 	mla	r5, r5, lr, ip
 801cc20:	f408 487f 	and.w	r8, r8, #65280	@ 0xff00
 801cc24:	43db      	mvns	r3, r3
 801cc26:	fb00 5004 	mla	r0, r0, r4, r5
 801cc2a:	b2db      	uxtb	r3, r3
 801cc2c:	0a00      	lsrs	r0, r0, #8
 801cc2e:	f000 15ff 	and.w	r5, r0, #16711935	@ 0xff00ff
 801cc32:	f40a 407f 	and.w	r0, sl, #65280	@ 0xff00
 801cc36:	4378      	muls	r0, r7
 801cc38:	fb02 0006 	mla	r0, r2, r6, r0
 801cc3c:	780a      	ldrb	r2, [r1, #0]
 801cc3e:	fb0e 0e08 	mla	lr, lr, r8, r0
 801cc42:	f409 407f 	and.w	r0, r9, #65280	@ 0xff00
 801cc46:	fb04 e000 	mla	r0, r4, r0, lr
 801cc4a:	fb02 f403 	mul.w	r4, r2, r3
 801cc4e:	0a00      	lsrs	r0, r0, #8
 801cc50:	1c62      	adds	r2, r4, #1
 801cc52:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801cc56:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cc5a:	4328      	orrs	r0, r5
 801cc5c:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801cc60:	700a      	strb	r2, [r1, #0]
 801cc62:	784a      	ldrb	r2, [r1, #1]
 801cc64:	435a      	muls	r2, r3
 801cc66:	1c54      	adds	r4, r2, #1
 801cc68:	eb04 2412 	add.w	r4, r4, r2, lsr #8
 801cc6c:	0a02      	lsrs	r2, r0, #8
 801cc6e:	0c00      	lsrs	r0, r0, #16
 801cc70:	eb02 2214 	add.w	r2, r2, r4, lsr #8
 801cc74:	704a      	strb	r2, [r1, #1]
 801cc76:	788a      	ldrb	r2, [r1, #2]
 801cc78:	4353      	muls	r3, r2
 801cc7a:	1c5a      	adds	r2, r3, #1
 801cc7c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801cc80:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801cc84:	7088      	strb	r0, [r1, #2]
 801cc86:	b003      	add	sp, #12
 801cc88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cc8c:	2600      	movs	r6, #0
 801cc8e:	e706      	b.n	801ca9e <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x3e>
 801cc90:	2000      	movs	r0, #0
 801cc92:	4606      	mov	r6, r0
 801cc94:	e710      	b.n	801cab8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cc96:	2000      	movs	r0, #0
 801cc98:	e70e      	b.n	801cab8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cc9a:	4620      	mov	r0, r4
 801cc9c:	e70c      	b.n	801cab8 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x58>
 801cc9e:	2500      	movs	r5, #0
 801cca0:	e71e      	b.n	801cae0 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x80>
 801cca2:	2200      	movs	r2, #0
 801cca4:	4615      	mov	r5, r2
 801cca6:	e729      	b.n	801cafc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801cca8:	4662      	mov	r2, ip
 801ccaa:	4665      	mov	r5, ip
 801ccac:	e726      	b.n	801cafc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ccae:	2200      	movs	r2, #0
 801ccb0:	e724      	b.n	801cafc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>
 801ccb2:	4622      	mov	r2, r4
 801ccb4:	e722      	b.n	801cafc <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh+0x9c>

0801ccb6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801ccb6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ccba:	b09b      	sub	sp, #108	@ 0x6c
 801ccbc:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801ccc0:	9218      	str	r2, [sp, #96]	@ 0x60
 801ccc2:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801ccc4:	9019      	str	r0, [sp, #100]	@ 0x64
 801ccc6:	9116      	str	r1, [sp, #88]	@ 0x58
 801ccc8:	6850      	ldr	r0, [r2, #4]
 801ccca:	9307      	str	r3, [sp, #28]
 801cccc:	6812      	ldr	r2, [r2, #0]
 801ccce:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 801ccd0:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801ccd4:	fb00 1303 	mla	r3, r0, r3, r1
 801ccd8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ccdc:	18d3      	adds	r3, r2, r3
 801ccde:	930a      	str	r3, [sp, #40]	@ 0x28
 801cce0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cce2:	681b      	ldr	r3, [r3, #0]
 801cce4:	930f      	str	r3, [sp, #60]	@ 0x3c
 801cce6:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cce8:	685e      	ldr	r6, [r3, #4]
 801ccea:	3604      	adds	r6, #4
 801ccec:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801ccee:	2b00      	cmp	r3, #0
 801ccf0:	dc03      	bgt.n	801ccfa <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44>
 801ccf2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801ccf4:	2b00      	cmp	r3, #0
 801ccf6:	f340 834f 	ble.w	801d398 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801ccfa:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801ccfc:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801cd00:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801cd04:	1e48      	subs	r0, r1, #1
 801cd06:	1e57      	subs	r7, r2, #1
 801cd08:	9b07      	ldr	r3, [sp, #28]
 801cd0a:	2b00      	cmp	r3, #0
 801cd0c:	f340 8178 	ble.w	801d000 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801cd10:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801cd12:	142b      	asrs	r3, r5, #16
 801cd14:	ea5f 4c24 	movs.w	ip, r4, asr #16
 801cd18:	d406      	bmi.n	801cd28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd1a:	4584      	cmp	ip, r0
 801cd1c:	da04      	bge.n	801cd28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd1e:	2b00      	cmp	r3, #0
 801cd20:	db02      	blt.n	801cd28 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x72>
 801cd22:	42bb      	cmp	r3, r7
 801cd24:	f2c0 816d 	blt.w	801d002 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34c>
 801cd28:	f11c 0c01 	adds.w	ip, ip, #1
 801cd2c:	f100 815b 	bmi.w	801cfe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cd30:	4561      	cmp	r1, ip
 801cd32:	f2c0 8158 	blt.w	801cfe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cd36:	3301      	adds	r3, #1
 801cd38:	f100 8155 	bmi.w	801cfe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cd3c:	429a      	cmp	r2, r3
 801cd3e:	f2c0 8152 	blt.w	801cfe6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x330>
 801cd42:	9b07      	ldr	r3, [sp, #28]
 801cd44:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801cd46:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cd48:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cd4a:	2b00      	cmp	r3, #0
 801cd4c:	f340 8178 	ble.w	801d040 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x38a>
 801cd50:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cd52:	ea4f 4c25 	mov.w	ip, r5, asr #16
 801cd56:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801cd5a:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801cd5e:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801cd60:	e9d3 1e02 	ldrd	r1, lr, [r3, #8]
 801cd64:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801cd66:	141b      	asrs	r3, r3, #16
 801cd68:	f100 81ba 	bmi.w	801d0e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cd6c:	f101 38ff 	add.w	r8, r1, #4294967295
 801cd70:	4543      	cmp	r3, r8
 801cd72:	f280 81b5 	bge.w	801d0e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cd76:	f1bc 0f00 	cmp.w	ip, #0
 801cd7a:	f2c0 81b1 	blt.w	801d0e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cd7e:	f10e 38ff 	add.w	r8, lr, #4294967295
 801cd82:	45c4      	cmp	ip, r8
 801cd84:	f280 81ac 	bge.w	801d0e0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801cd88:	b209      	sxth	r1, r1
 801cd8a:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801cd8c:	fb0c 3301 	mla	r3, ip, r1, r3
 801cd90:	eb04 0803 	add.w	r8, r4, r3
 801cd94:	5ce3      	ldrb	r3, [r4, r3]
 801cd96:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801cd9a:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801cd9e:	2a00      	cmp	r2, #0
 801cda0:	f000 8193 	beq.w	801d0ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x414>
 801cda4:	f898 c001 	ldrb.w	ip, [r8, #1]
 801cda8:	f856 402c 	ldr.w	r4, [r6, ip, lsl #2]
 801cdac:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cdae:	0e24      	lsrs	r4, r4, #24
 801cdb0:	9412      	str	r4, [sp, #72]	@ 0x48
 801cdb2:	b178      	cbz	r0, 801cdd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801cdb4:	eb08 0c01 	add.w	ip, r8, r1
 801cdb8:	f818 1001 	ldrb.w	r1, [r8, r1]
 801cdbc:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cdc0:	9108      	str	r1, [sp, #32]
 801cdc2:	0e09      	lsrs	r1, r1, #24
 801cdc4:	9110      	str	r1, [sp, #64]	@ 0x40
 801cdc6:	f89c 1001 	ldrb.w	r1, [ip, #1]
 801cdca:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801cdce:	910c      	str	r1, [sp, #48]	@ 0x30
 801cdd0:	0e09      	lsrs	r1, r1, #24
 801cdd2:	9113      	str	r1, [sp, #76]	@ 0x4c
 801cdd4:	b292      	uxth	r2, r2
 801cdd6:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801cdd8:	b280      	uxth	r0, r0
 801cdda:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801cddc:	fb02 f900 	mul.w	r9, r2, r0
 801cde0:	0112      	lsls	r2, r2, #4
 801cde2:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801cde6:	eba2 0809 	sub.w	r8, r2, r9
 801cdea:	f5c2 7280 	rsb	r2, r2, #256	@ 0x100
 801cdee:	b280      	uxth	r0, r0
 801cdf0:	fa1f f888 	uxth.w	r8, r8
 801cdf4:	1a12      	subs	r2, r2, r0
 801cdf6:	fb08 f101 	mul.w	r1, r8, r1
 801cdfa:	b292      	uxth	r2, r2
 801cdfc:	fb02 110e 	mla	r1, r2, lr, r1
 801ce00:	fb00 1104 	mla	r1, r0, r4, r1
 801ce04:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801ce06:	fb09 1104 	mla	r1, r9, r4, r1
 801ce0a:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801ce0e:	2900      	cmp	r1, #0
 801ce10:	f000 80de 	beq.w	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801ce14:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ce18:	d01b      	beq.n	801ce52 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19c>
 801ce1a:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801ce1e:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801ce22:	fb0e fa0a 	mul.w	sl, lr, sl
 801ce26:	fb0e fe03 	mul.w	lr, lr, r3
 801ce2a:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801ce2e:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801ce32:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ce36:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ce3a:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ce3e:	4453      	add	r3, sl
 801ce40:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ce44:	0a1b      	lsrs	r3, r3, #8
 801ce46:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ce4a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801ce4e:	ea43 030c 	orr.w	r3, r3, ip
 801ce52:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ce54:	2cff      	cmp	r4, #255	@ 0xff
 801ce56:	d021      	beq.n	801ce9c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e6>
 801ce58:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ce5a:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801ce5e:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ce60:	fb04 fb0b 	mul.w	fp, r4, fp
 801ce64:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ce66:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ce6a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ce6c:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ce70:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ce74:	fb04 fa0a 	mul.w	sl, r4, sl
 801ce78:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ce7c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ce80:	44de      	add	lr, fp
 801ce82:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ce86:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ce8a:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ce8e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ce92:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ce96:	ea4e 040a 	orr.w	r4, lr, sl
 801ce9a:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ce9c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ce9e:	2cff      	cmp	r4, #255	@ 0xff
 801cea0:	d021      	beq.n	801cee6 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801cea2:	9c08      	ldr	r4, [sp, #32]
 801cea4:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cea8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ceaa:	fb04 fb0b 	mul.w	fp, r4, fp
 801ceae:	9c08      	ldr	r4, [sp, #32]
 801ceb0:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801ceb4:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ceb6:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801ceba:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cebe:	fb04 fa0a 	mul.w	sl, r4, sl
 801cec2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cec6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801ceca:	44de      	add	lr, fp
 801cecc:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801ced0:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ced4:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ced8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cedc:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cee0:	ea4e 040a 	orr.w	r4, lr, sl
 801cee4:	9408      	str	r4, [sp, #32]
 801cee6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cee8:	2cff      	cmp	r4, #255	@ 0xff
 801ceea:	d021      	beq.n	801cf30 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801ceec:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801ceee:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801cef2:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cef4:	fb04 fb0b 	mul.w	fp, r4, fp
 801cef8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cefa:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801cefe:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cf00:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801cf04:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801cf08:	fb04 fa0a 	mul.w	sl, r4, sl
 801cf0c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf10:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801cf14:	44de      	add	lr, fp
 801cf16:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801cf1a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801cf1e:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801cf22:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801cf26:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801cf2a:	ea4e 040a 	orr.w	r4, lr, sl
 801cf2e:	940c      	str	r4, [sp, #48]	@ 0x30
 801cf30:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cf32:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801cf36:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801cf3a:	43c9      	mvns	r1, r1
 801cf3c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801cf40:	9c08      	ldr	r4, [sp, #32]
 801cf42:	b2c9      	uxtb	r1, r1
 801cf44:	fb08 fc0c 	mul.w	ip, r8, ip
 801cf48:	fb02 cc0e 	mla	ip, r2, lr, ip
 801cf4c:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801cf50:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801cf52:	fb00 cc0e 	mla	ip, r0, lr, ip
 801cf56:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801cf5a:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801cf5c:	fb09 cc0e 	mla	ip, r9, lr, ip
 801cf60:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801cf64:	fb08 f80e 	mul.w	r8, r8, lr
 801cf68:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801cf6c:	fb02 8303 	mla	r3, r2, r3, r8
 801cf70:	9a08      	ldr	r2, [sp, #32]
 801cf72:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801cf76:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801cf7a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cf7c:	fb00 330a 	mla	r3, r0, sl, r3
 801cf80:	f402 407f 	and.w	r0, r2, #65280	@ 0xff00
 801cf84:	fb09 3900 	mla	r9, r9, r0, r3
 801cf88:	783b      	ldrb	r3, [r7, #0]
 801cf8a:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801cf8e:	fb03 f201 	mul.w	r2, r3, r1
 801cf92:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801cf96:	1c53      	adds	r3, r2, #1
 801cf98:	ea4c 0c09 	orr.w	ip, ip, r9
 801cf9c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cfa0:	eb0c 2313 	add.w	r3, ip, r3, lsr #8
 801cfa4:	703b      	strb	r3, [r7, #0]
 801cfa6:	787b      	ldrb	r3, [r7, #1]
 801cfa8:	434b      	muls	r3, r1
 801cfaa:	1c5a      	adds	r2, r3, #1
 801cfac:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801cfb0:	ea4f 231c 	mov.w	r3, ip, lsr #8
 801cfb4:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801cfb8:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801cfbc:	707b      	strb	r3, [r7, #1]
 801cfbe:	78bb      	ldrb	r3, [r7, #2]
 801cfc0:	4359      	muls	r1, r3
 801cfc2:	1c4b      	adds	r3, r1, #1
 801cfc4:	eb03 2111 	add.w	r1, r3, r1, lsr #8
 801cfc8:	eb0c 2c11 	add.w	ip, ip, r1, lsr #8
 801cfcc:	f887 c002 	strb.w	ip, [r7, #2]
 801cfd0:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cfd2:	3703      	adds	r7, #3
 801cfd4:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801cfd6:	441a      	add	r2, r3
 801cfd8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cfda:	441d      	add	r5, r3
 801cfdc:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801cfde:	9225      	str	r2, [sp, #148]	@ 0x94
 801cfe0:	3b01      	subs	r3, #1
 801cfe2:	9317      	str	r3, [sp, #92]	@ 0x5c
 801cfe4:	e6b0      	b.n	801cd48 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x92>
 801cfe6:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801cfe8:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801cfea:	441c      	add	r4, r3
 801cfec:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801cfee:	441d      	add	r5, r3
 801cff0:	9b07      	ldr	r3, [sp, #28]
 801cff2:	9425      	str	r4, [sp, #148]	@ 0x94
 801cff4:	3b01      	subs	r3, #1
 801cff6:	9307      	str	r3, [sp, #28]
 801cff8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cffa:	3303      	adds	r3, #3
 801cffc:	930a      	str	r3, [sp, #40]	@ 0x28
 801cffe:	e683      	b.n	801cd08 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x52>
 801d000:	d026      	beq.n	801d050 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x39a>
 801d002:	9b07      	ldr	r3, [sp, #28]
 801d004:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801d006:	3b01      	subs	r3, #1
 801d008:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d00a:	fb00 4003 	mla	r0, r0, r3, r4
 801d00e:	1400      	asrs	r0, r0, #16
 801d010:	f53f ae97 	bmi.w	801cd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d014:	3901      	subs	r1, #1
 801d016:	4288      	cmp	r0, r1
 801d018:	f6bf ae93 	bge.w	801cd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d01c:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801d01e:	fb01 5303 	mla	r3, r1, r3, r5
 801d022:	141b      	asrs	r3, r3, #16
 801d024:	f53f ae8d 	bmi.w	801cd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d028:	3a01      	subs	r2, #1
 801d02a:	4293      	cmp	r3, r2
 801d02c:	f6bf ae89 	bge.w	801cd42 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8c>
 801d030:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d032:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801d036:	f103 0e03 	add.w	lr, r3, #3
 801d03a:	f1bb 0f00 	cmp.w	fp, #0
 801d03e:	dc6d      	bgt.n	801d11c <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x466>
 801d040:	9b07      	ldr	r3, [sp, #28]
 801d042:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801d046:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d048:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801d04c:	4423      	add	r3, r4
 801d04e:	930a      	str	r3, [sp, #40]	@ 0x28
 801d050:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d052:	2b00      	cmp	r3, #0
 801d054:	f340 81a0 	ble.w	801d398 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e2>
 801d058:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d05c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d05e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d062:	eeb0 6a62 	vmov.f32	s12, s5
 801d066:	eec6 7a80 	vdiv.f32	s15, s13, s0
 801d06a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d06e:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d072:	ed8d 6a25 	vstr	s12, [sp, #148]	@ 0x94
 801d076:	eeb0 6a43 	vmov.f32	s12, s6
 801d07a:	eebe 6ac8 	vcvt.s32.f32	s12, s12, #16
 801d07e:	ee16 5a10 	vmov	r5, s12
 801d082:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d086:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d08a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d08e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d092:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d096:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d09a:	ee12 2a90 	vmov	r2, s5
 801d09e:	eef0 2a47 	vmov.f32	s5, s14
 801d0a2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0a6:	ee13 2a10 	vmov	r2, s6
 801d0aa:	9327      	str	r3, [sp, #156]	@ 0x9c
 801d0ac:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d0ae:	eeb0 3a67 	vmov.f32	s6, s15
 801d0b2:	fb92 f3f3 	sdiv	r3, r2, r3
 801d0b6:	9328      	str	r3, [sp, #160]	@ 0xa0
 801d0b8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801d0ba:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801d0bc:	3b01      	subs	r3, #1
 801d0be:	9316      	str	r3, [sp, #88]	@ 0x58
 801d0c0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801d0c2:	bf08      	it	eq
 801d0c4:	4613      	moveq	r3, r2
 801d0c6:	9307      	str	r3, [sp, #28]
 801d0c8:	e610      	b.n	801ccec <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36>
 801d0ca:	2800      	cmp	r0, #0
 801d0cc:	f43f ae82 	beq.w	801cdd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d0d0:	f818 1001 	ldrb.w	r1, [r8, r1]
 801d0d4:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d0d8:	9108      	str	r1, [sp, #32]
 801d0da:	0e09      	lsrs	r1, r1, #24
 801d0dc:	9110      	str	r1, [sp, #64]	@ 0x40
 801d0de:	e679      	b.n	801cdd4 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801d0e0:	f113 0801 	adds.w	r8, r3, #1
 801d0e4:	f53f af74 	bmi.w	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d0e8:	4541      	cmp	r1, r8
 801d0ea:	f6ff af71 	blt.w	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d0ee:	f11c 0801 	adds.w	r8, ip, #1
 801d0f2:	f53f af6d 	bmi.w	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d0f6:	45c6      	cmp	lr, r8
 801d0f8:	f6ff af6a 	blt.w	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d0fc:	b209      	sxth	r1, r1
 801d0fe:	e9cd 3c02 	strd	r3, ip, [sp, #8]
 801d102:	fa0f f38e 	sxth.w	r3, lr
 801d106:	9100      	str	r1, [sp, #0]
 801d108:	4639      	mov	r1, r7
 801d10a:	9301      	str	r3, [sp, #4]
 801d10c:	4633      	mov	r3, r6
 801d10e:	e9cd 2004 	strd	r2, r0, [sp, #16]
 801d112:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d114:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d116:	f7ff fca3 	bl	801ca60 <_ZNK8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhPKmssiihh>
 801d11a:	e759      	b.n	801cfd0 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801d11c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801d11e:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801d122:	9c25      	ldr	r4, [sp, #148]	@ 0x94
 801d124:	f3c3 3203 	ubfx	r2, r3, #12, #4
 801d128:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d12a:	1427      	asrs	r7, r4, #16
 801d12c:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801d12e:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d132:	142b      	asrs	r3, r5, #16
 801d134:	fb01 7303 	mla	r3, r1, r3, r7
 801d138:	18e7      	adds	r7, r4, r3
 801d13a:	5ce3      	ldrb	r3, [r4, r3]
 801d13c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801d140:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801d144:	2a00      	cmp	r2, #0
 801d146:	f000 811d 	beq.w	801d384 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6ce>
 801d14a:	f897 8001 	ldrb.w	r8, [r7, #1]
 801d14e:	f856 4028 	ldr.w	r4, [r6, r8, lsl #2]
 801d152:	940d      	str	r4, [sp, #52]	@ 0x34
 801d154:	0e24      	lsrs	r4, r4, #24
 801d156:	9414      	str	r4, [sp, #80]	@ 0x50
 801d158:	b170      	cbz	r0, 801d178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d15a:	eb07 0801 	add.w	r8, r7, r1
 801d15e:	5c79      	ldrb	r1, [r7, r1]
 801d160:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d164:	9109      	str	r1, [sp, #36]	@ 0x24
 801d166:	0e09      	lsrs	r1, r1, #24
 801d168:	9111      	str	r1, [sp, #68]	@ 0x44
 801d16a:	f898 1001 	ldrb.w	r1, [r8, #1]
 801d16e:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d172:	910e      	str	r1, [sp, #56]	@ 0x38
 801d174:	0e09      	lsrs	r1, r1, #24
 801d176:	9115      	str	r1, [sp, #84]	@ 0x54
 801d178:	b292      	uxth	r2, r2
 801d17a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d17c:	b280      	uxth	r0, r0
 801d17e:	fb02 f900 	mul.w	r9, r2, r0
 801d182:	0112      	lsls	r2, r2, #4
 801d184:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801d188:	eba2 0809 	sub.w	r8, r2, r9
 801d18c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801d190:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d192:	b280      	uxth	r0, r0
 801d194:	fa1f f888 	uxth.w	r8, r8
 801d198:	1a09      	subs	r1, r1, r0
 801d19a:	fb08 f202 	mul.w	r2, r8, r2
 801d19e:	b289      	uxth	r1, r1
 801d1a0:	fb01 220c 	mla	r2, r1, ip, r2
 801d1a4:	fb00 2204 	mla	r2, r0, r4, r2
 801d1a8:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d1aa:	fb09 2204 	mla	r2, r9, r4, r2
 801d1ae:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801d1b2:	2a00      	cmp	r2, #0
 801d1b4:	f000 80db 	beq.w	801d36e <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6b8>
 801d1b8:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801d1bc:	d019      	beq.n	801d1f2 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53c>
 801d1be:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801d1c2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d1c6:	fb0c fa0a 	mul.w	sl, ip, sl
 801d1ca:	fb0c fc03 	mul.w	ip, ip, r3
 801d1ce:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801d1d2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801d1d6:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801d1da:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d1de:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801d1e2:	4453      	add	r3, sl
 801d1e4:	0a3f      	lsrs	r7, r7, #8
 801d1e6:	0a1b      	lsrs	r3, r3, #8
 801d1e8:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801d1ec:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801d1f0:	433b      	orrs	r3, r7
 801d1f2:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d1f4:	2cff      	cmp	r4, #255	@ 0xff
 801d1f6:	d020      	beq.n	801d23a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x584>
 801d1f8:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d1fa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d1fe:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d200:	4367      	muls	r7, r4
 801d202:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d204:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d208:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d20c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d20e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d212:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d216:	fb04 fa0a 	mul.w	sl, r4, sl
 801d21a:	44bc      	add	ip, r7
 801d21c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d220:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d224:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d228:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d22c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d230:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d234:	ea4c 040a 	orr.w	r4, ip, sl
 801d238:	940d      	str	r4, [sp, #52]	@ 0x34
 801d23a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d23c:	2cff      	cmp	r4, #255	@ 0xff
 801d23e:	d020      	beq.n	801d282 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5cc>
 801d240:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d242:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d246:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d248:	4367      	muls	r7, r4
 801d24a:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d24c:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d250:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d254:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801d256:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d25a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d25e:	fb04 fa0a 	mul.w	sl, r4, sl
 801d262:	44bc      	add	ip, r7
 801d264:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d268:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d26c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d270:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d274:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d278:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d27c:	ea4c 040a 	orr.w	r4, ip, sl
 801d280:	9409      	str	r4, [sp, #36]	@ 0x24
 801d282:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d284:	2cff      	cmp	r4, #255	@ 0xff
 801d286:	d020      	beq.n	801d2ca <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x614>
 801d288:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d28a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d28e:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d290:	4367      	muls	r7, r4
 801d292:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d294:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801d298:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801d29c:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801d29e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801d2a2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d2a6:	fb04 fa0a 	mul.w	sl, r4, sl
 801d2aa:	44bc      	add	ip, r7
 801d2ac:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801d2b0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d2b4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801d2b8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801d2bc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801d2c0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801d2c4:	ea4c 040a 	orr.w	r4, ip, sl
 801d2c8:	940e      	str	r4, [sp, #56]	@ 0x38
 801d2ca:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2cc:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801d2d0:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801d2d4:	43d2      	mvns	r2, r2
 801d2d6:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801d2da:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801d2dc:	b2d2      	uxtb	r2, r2
 801d2de:	fb08 f707 	mul.w	r7, r8, r7
 801d2e2:	fb01 770c 	mla	r7, r1, ip, r7
 801d2e6:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d2ea:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801d2ec:	fb00 770c 	mla	r7, r0, ip, r7
 801d2f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801d2f4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801d2f6:	fb09 770c 	mla	r7, r9, ip, r7
 801d2fa:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801d2fe:	fb08 f80c 	mul.w	r8, r8, ip
 801d302:	0a3f      	lsrs	r7, r7, #8
 801d304:	fb01 8303 	mla	r3, r1, r3, r8
 801d308:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d30a:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801d30e:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801d312:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801d314:	fb00 330a 	mla	r3, r0, sl, r3
 801d318:	f401 4c7f 	and.w	ip, r1, #65280	@ 0xff00
 801d31c:	fb09 3c0c 	mla	ip, r9, ip, r3
 801d320:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801d324:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801d328:	fb03 f102 	mul.w	r1, r3, r2
 801d32c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801d330:	1c4b      	adds	r3, r1, #1
 801d332:	ea47 070c 	orr.w	r7, r7, ip
 801d336:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d33a:	eb07 2313 	add.w	r3, r7, r3, lsr #8
 801d33e:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801d342:	f81e 3c02 	ldrb.w	r3, [lr, #-2]
 801d346:	4353      	muls	r3, r2
 801d348:	1c59      	adds	r1, r3, #1
 801d34a:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801d34e:	0a3b      	lsrs	r3, r7, #8
 801d350:	0c3f      	lsrs	r7, r7, #16
 801d352:	eb03 2311 	add.w	r3, r3, r1, lsr #8
 801d356:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801d35a:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801d35e:	435a      	muls	r2, r3
 801d360:	1c53      	adds	r3, r2, #1
 801d362:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801d366:	eb07 2712 	add.w	r7, r7, r2, lsr #8
 801d36a:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801d36e:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801d370:	f10e 0e03 	add.w	lr, lr, #3
 801d374:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801d376:	f10b 3bff 	add.w	fp, fp, #4294967295
 801d37a:	441a      	add	r2, r3
 801d37c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d37e:	9225      	str	r2, [sp, #148]	@ 0x94
 801d380:	441d      	add	r5, r3
 801d382:	e65a      	b.n	801d03a <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801d384:	2800      	cmp	r0, #0
 801d386:	f43f aef7 	beq.w	801d178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d38a:	5c79      	ldrb	r1, [r7, r1]
 801d38c:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801d390:	9109      	str	r1, [sp, #36]	@ 0x24
 801d392:	0e09      	lsrs	r1, r1, #24
 801d394:	9111      	str	r1, [sp, #68]	@ 0x44
 801d396:	e6ef      	b.n	801d178 <_ZN8touchgfx8LCD24bpp62TextureMapper_L8_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c2>
 801d398:	b01b      	add	sp, #108	@ 0x6c
 801d39a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d39e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>:
 801d39e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d3a2:	b08d      	sub	sp, #52	@ 0x34
 801d3a4:	468b      	mov	fp, r1
 801d3a6:	e9dd 5c17 	ldrd	r5, ip, [sp, #92]	@ 0x5c
 801d3aa:	f89d 106c 	ldrb.w	r1, [sp, #108]	@ 0x6c
 801d3ae:	fb0c 5703 	mla	r7, ip, r3, r5
 801d3b2:	f1bc 0f00 	cmp.w	ip, #0
 801d3b6:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d3b8:	eb07 0747 	add.w	r7, r7, r7, lsl #1
 801d3bc:	f9bd e058 	ldrsh.w	lr, [sp, #88]	@ 0x58
 801d3c0:	f89d 8064 	ldrb.w	r8, [sp, #100]	@ 0x64
 801d3c4:	f89d a068 	ldrb.w	sl, [sp, #104]	@ 0x68
 801d3c8:	eb02 0607 	add.w	r6, r2, r7
 801d3cc:	f89b 4000 	ldrb.w	r4, [fp]
 801d3d0:	f89b 0001 	ldrb.w	r0, [fp, #1]
 801d3d4:	f89b 1002 	ldrb.w	r1, [fp, #2]
 801d3d8:	f2c0 80c1 	blt.w	801d55e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d3dc:	45e6      	cmp	lr, ip
 801d3de:	f340 80be 	ble.w	801d55e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1c0>
 801d3e2:	2d00      	cmp	r5, #0
 801d3e4:	f2c0 80b7 	blt.w	801d556 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d3e8:	42ab      	cmp	r3, r5
 801d3ea:	f340 80b4 	ble.w	801d556 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1b8>
 801d3ee:	5dd2      	ldrb	r2, [r2, r7]
 801d3f0:	9205      	str	r2, [sp, #20]
 801d3f2:	7872      	ldrb	r2, [r6, #1]
 801d3f4:	9206      	str	r2, [sp, #24]
 801d3f6:	78b2      	ldrb	r2, [r6, #2]
 801d3f8:	9207      	str	r2, [sp, #28]
 801d3fa:	1c6a      	adds	r2, r5, #1
 801d3fc:	f100 80b6 	bmi.w	801d56c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d400:	4293      	cmp	r3, r2
 801d402:	f340 80b3 	ble.w	801d56c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d406:	f1b8 0f00 	cmp.w	r8, #0
 801d40a:	f000 80af 	beq.w	801d56c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ce>
 801d40e:	78f2      	ldrb	r2, [r6, #3]
 801d410:	9201      	str	r2, [sp, #4]
 801d412:	7932      	ldrb	r2, [r6, #4]
 801d414:	9202      	str	r2, [sp, #8]
 801d416:	7972      	ldrb	r2, [r6, #5]
 801d418:	9203      	str	r2, [sp, #12]
 801d41a:	f11c 0c01 	adds.w	ip, ip, #1
 801d41e:	f100 80ad 	bmi.w	801d57c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d422:	45e6      	cmp	lr, ip
 801d424:	f340 80aa 	ble.w	801d57c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d428:	f1ba 0f00 	cmp.w	sl, #0
 801d42c:	f000 80a6 	beq.w	801d57c <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1de>
 801d430:	2d00      	cmp	r5, #0
 801d432:	f2c0 809f 	blt.w	801d574 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d436:	42ab      	cmp	r3, r5
 801d438:	f340 809c 	ble.w	801d574 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1d6>
 801d43c:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801d440:	f816 9002 	ldrb.w	r9, [r6, r2]
 801d444:	2203      	movs	r2, #3
 801d446:	fb03 6c02 	mla	ip, r3, r2, r6
 801d44a:	f89c 7001 	ldrb.w	r7, [ip, #1]
 801d44e:	f89c e002 	ldrb.w	lr, [ip, #2]
 801d452:	9704      	str	r7, [sp, #16]
 801d454:	3501      	adds	r5, #1
 801d456:	f100 8098 	bmi.w	801d58a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d45a:	42ab      	cmp	r3, r5
 801d45c:	f340 8095 	ble.w	801d58a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d460:	f1b8 0f00 	cmp.w	r8, #0
 801d464:	f000 8091 	beq.w	801d58a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x1ec>
 801d468:	f04f 0c03 	mov.w	ip, #3
 801d46c:	fb13 c20c 	smlabb	r2, r3, ip, ip
 801d470:	5cb5      	ldrb	r5, [r6, r2]
 801d472:	fb03 620c 	mla	r2, r3, ip, r6
 801d476:	fb03 630c 	mla	r3, r3, ip, r6
 801d47a:	7912      	ldrb	r2, [r2, #4]
 801d47c:	795e      	ldrb	r6, [r3, #5]
 801d47e:	fa1f f388 	uxth.w	r3, r8
 801d482:	fa1f fc8a 	uxth.w	ip, sl
 801d486:	fb03 f70c 	mul.w	r7, r3, ip
 801d48a:	011b      	lsls	r3, r3, #4
 801d48c:	9708      	str	r7, [sp, #32]
 801d48e:	ebc7 1c0c 	rsb	ip, r7, ip, lsl #4
 801d492:	f5c3 7a80 	rsb	sl, r3, #256	@ 0x100
 801d496:	1bdb      	subs	r3, r3, r7
 801d498:	f8bd 702c 	ldrh.w	r7, [sp, #44]	@ 0x2c
 801d49c:	fa1f fc8c 	uxth.w	ip, ip
 801d4a0:	b29b      	uxth	r3, r3
 801d4a2:	9709      	str	r7, [sp, #36]	@ 0x24
 801d4a4:	ebaa 0a0c 	sub.w	sl, sl, ip
 801d4a8:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801d4aa:	930a      	str	r3, [sp, #40]	@ 0x28
 801d4ac:	fa1f fa8a 	uxth.w	sl, sl
 801d4b0:	ea6f 0807 	mvn.w	r8, r7
 801d4b4:	9f01      	ldr	r7, [sp, #4]
 801d4b6:	435f      	muls	r7, r3
 801d4b8:	9b05      	ldr	r3, [sp, #20]
 801d4ba:	fa5f f888 	uxtb.w	r8, r8
 801d4be:	fb0a 7703 	mla	r7, sl, r3, r7
 801d4c2:	9b08      	ldr	r3, [sp, #32]
 801d4c4:	fb14 f408 	smulbb	r4, r4, r8
 801d4c8:	fb0c 7709 	mla	r7, ip, r9, r7
 801d4cc:	fb10 f008 	smulbb	r0, r0, r8
 801d4d0:	fb11 f108 	smulbb	r1, r1, r8
 801d4d4:	fb03 7705 	mla	r7, r3, r5, r7
 801d4d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d4da:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801d4de:	fb07 4703 	mla	r7, r7, r3, r4
 801d4e2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d4e4:	b2bf      	uxth	r7, r7
 801d4e6:	1c7c      	adds	r4, r7, #1
 801d4e8:	eb04 2417 	add.w	r4, r4, r7, lsr #8
 801d4ec:	1224      	asrs	r4, r4, #8
 801d4ee:	f88b 4000 	strb.w	r4, [fp]
 801d4f2:	9c02      	ldr	r4, [sp, #8]
 801d4f4:	435c      	muls	r4, r3
 801d4f6:	9b06      	ldr	r3, [sp, #24]
 801d4f8:	fb0a 4403 	mla	r4, sl, r3, r4
 801d4fc:	9b04      	ldr	r3, [sp, #16]
 801d4fe:	fb0c 4403 	mla	r4, ip, r3, r4
 801d502:	9b08      	ldr	r3, [sp, #32]
 801d504:	fb03 4402 	mla	r4, r3, r2, r4
 801d508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d50a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d50c:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d510:	fb04 0403 	mla	r4, r4, r3, r0
 801d514:	9b03      	ldr	r3, [sp, #12]
 801d516:	435a      	muls	r2, r3
 801d518:	b2a4      	uxth	r4, r4
 801d51a:	4613      	mov	r3, r2
 801d51c:	9a07      	ldr	r2, [sp, #28]
 801d51e:	1c60      	adds	r0, r4, #1
 801d520:	fb0a 3a02 	mla	sl, sl, r2, r3
 801d524:	9b08      	ldr	r3, [sp, #32]
 801d526:	eb00 2414 	add.w	r4, r0, r4, lsr #8
 801d52a:	fb0c ac0e 	mla	ip, ip, lr, sl
 801d52e:	1224      	asrs	r4, r4, #8
 801d530:	fb03 c606 	mla	r6, r3, r6, ip
 801d534:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d536:	f88b 4001 	strb.w	r4, [fp, #1]
 801d53a:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d53e:	fb06 1103 	mla	r1, r6, r3, r1
 801d542:	b289      	uxth	r1, r1
 801d544:	1c4e      	adds	r6, r1, #1
 801d546:	eb06 2111 	add.w	r1, r6, r1, lsr #8
 801d54a:	1209      	asrs	r1, r1, #8
 801d54c:	f88b 1002 	strb.w	r1, [fp, #2]
 801d550:	b00d      	add	sp, #52	@ 0x34
 801d552:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d556:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d55a:	9405      	str	r4, [sp, #20]
 801d55c:	e74d      	b.n	801d3fa <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x5c>
 801d55e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d562:	9401      	str	r4, [sp, #4]
 801d564:	9405      	str	r4, [sp, #20]
 801d566:	e9cd 0106 	strd	r0, r1, [sp, #24]
 801d56a:	e756      	b.n	801d41a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d56c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801d570:	9401      	str	r4, [sp, #4]
 801d572:	e752      	b.n	801d41a <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0x7c>
 801d574:	468e      	mov	lr, r1
 801d576:	9004      	str	r0, [sp, #16]
 801d578:	46a1      	mov	r9, r4
 801d57a:	e76b      	b.n	801d454 <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xb6>
 801d57c:	460e      	mov	r6, r1
 801d57e:	4602      	mov	r2, r0
 801d580:	4625      	mov	r5, r4
 801d582:	468e      	mov	lr, r1
 801d584:	9004      	str	r0, [sp, #16]
 801d586:	46a1      	mov	r9, r4
 801d588:	e779      	b.n	801d47e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>
 801d58a:	460e      	mov	r6, r1
 801d58c:	4602      	mov	r2, r0
 801d58e:	4625      	mov	r5, r4
 801d590:	e775      	b.n	801d47e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh+0xe0>

0801d592 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801d592:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d596:	b09f      	sub	sp, #124	@ 0x7c
 801d598:	920e      	str	r2, [sp, #56]	@ 0x38
 801d59a:	9307      	str	r3, [sp, #28]
 801d59c:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 801d59e:	f89d 30c4 	ldrb.w	r3, [sp, #196]	@ 0xc4
 801d5a2:	901d      	str	r0, [sp, #116]	@ 0x74
 801d5a4:	930c      	str	r3, [sp, #48]	@ 0x30
 801d5a6:	6850      	ldr	r0, [r2, #4]
 801d5a8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801d5aa:	6812      	ldr	r2, [r2, #0]
 801d5ac:	e9dd 132e 	ldrd	r1, r3, [sp, #184]	@ 0xb8
 801d5b0:	e9dd a829 	ldrd	sl, r8, [sp, #164]	@ 0xa4
 801d5b4:	fb00 1303 	mla	r3, r0, r3, r1
 801d5b8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d5bc:	18d3      	adds	r3, r2, r3
 801d5be:	9308      	str	r3, [sp, #32]
 801d5c0:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d5c2:	681b      	ldr	r3, [r3, #0]
 801d5c4:	930a      	str	r3, [sp, #40]	@ 0x28
 801d5c6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d5c8:	43db      	mvns	r3, r3
 801d5ca:	b2db      	uxtb	r3, r3
 801d5cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d5ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	dc03      	bgt.n	801d5dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801d5d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d5d6:	2b00      	cmp	r3, #0
 801d5d8:	f340 81f5 	ble.w	801d9c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d5dc:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d5de:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801d5e2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801d5e6:	1e48      	subs	r0, r1, #1
 801d5e8:	1e54      	subs	r4, r2, #1
 801d5ea:	9b07      	ldr	r3, [sp, #28]
 801d5ec:	2b00      	cmp	r3, #0
 801d5ee:	f340 80d5 	ble.w	801d79c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801d5f2:	ea5f 452a 	movs.w	r5, sl, asr #16
 801d5f6:	ea4f 4328 	mov.w	r3, r8, asr #16
 801d5fa:	d406      	bmi.n	801d60a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d5fc:	4285      	cmp	r5, r0
 801d5fe:	da04      	bge.n	801d60a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d600:	2b00      	cmp	r3, #0
 801d602:	db02      	blt.n	801d60a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x78>
 801d604:	42a3      	cmp	r3, r4
 801d606:	f2c0 80ca 	blt.w	801d79e <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801d60a:	3501      	adds	r5, #1
 801d60c:	f100 80bb 	bmi.w	801d786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d610:	42a9      	cmp	r1, r5
 801d612:	f2c0 80b8 	blt.w	801d786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d616:	3301      	adds	r3, #1
 801d618:	f100 80b5 	bmi.w	801d786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d61c:	429a      	cmp	r2, r3
 801d61e:	f2c0 80b2 	blt.w	801d786 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f4>
 801d622:	9b07      	ldr	r3, [sp, #28]
 801d624:	9d08      	ldr	r5, [sp, #32]
 801d626:	930d      	str	r3, [sp, #52]	@ 0x34
 801d628:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d62a:	2b00      	cmp	r3, #0
 801d62c:	f340 80d6 	ble.w	801d7dc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x24a>
 801d630:	9830      	ldr	r0, [sp, #192]	@ 0xc0
 801d632:	ea4f 4428 	mov.w	r4, r8, asr #16
 801d636:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801d638:	f3ca 3203 	ubfx	r2, sl, #12, #4
 801d63c:	68c6      	ldr	r6, [r0, #12]
 801d63e:	ea5f 402a 	movs.w	r0, sl, asr #16
 801d642:	f3c8 3103 	ubfx	r1, r8, #12, #4
 801d646:	689b      	ldr	r3, [r3, #8]
 801d648:	f100 810f 	bmi.w	801d86a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d64c:	1e5f      	subs	r7, r3, #1
 801d64e:	42b8      	cmp	r0, r7
 801d650:	f280 810b 	bge.w	801d86a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d654:	2c00      	cmp	r4, #0
 801d656:	f2c0 8108 	blt.w	801d86a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d65a:	1e77      	subs	r7, r6, #1
 801d65c:	42bc      	cmp	r4, r7
 801d65e:	f280 8104 	bge.w	801d86a <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d8>
 801d662:	b21b      	sxth	r3, r3
 801d664:	fb04 0003 	mla	r0, r4, r3, r0
 801d668:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801d66a:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801d66e:	1826      	adds	r6, r4, r0
 801d670:	5c24      	ldrb	r4, [r4, r0]
 801d672:	78b7      	ldrb	r7, [r6, #2]
 801d674:	7870      	ldrb	r0, [r6, #1]
 801d676:	970f      	str	r7, [sp, #60]	@ 0x3c
 801d678:	7977      	ldrb	r7, [r6, #5]
 801d67a:	f896 e003 	ldrb.w	lr, [r6, #3]
 801d67e:	f896 c004 	ldrb.w	ip, [r6, #4]
 801d682:	9710      	str	r7, [sp, #64]	@ 0x40
 801d684:	b1c9      	cbz	r1, 801d6ba <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x128>
 801d686:	f04f 0b03 	mov.w	fp, #3
 801d68a:	f06f 0904 	mvn.w	r9, #4
 801d68e:	3605      	adds	r6, #5
 801d690:	fb13 930b 	smlabb	r3, r3, fp, r9
 801d694:	eb06 0b03 	add.w	fp, r6, r3
 801d698:	5cf3      	ldrb	r3, [r6, r3]
 801d69a:	9311      	str	r3, [sp, #68]	@ 0x44
 801d69c:	f89b 3001 	ldrb.w	r3, [fp, #1]
 801d6a0:	9313      	str	r3, [sp, #76]	@ 0x4c
 801d6a2:	f89b 3002 	ldrb.w	r3, [fp, #2]
 801d6a6:	9315      	str	r3, [sp, #84]	@ 0x54
 801d6a8:	f89b 3003 	ldrb.w	r3, [fp, #3]
 801d6ac:	9312      	str	r3, [sp, #72]	@ 0x48
 801d6ae:	f89b 3004 	ldrb.w	r3, [fp, #4]
 801d6b2:	9314      	str	r3, [sp, #80]	@ 0x50
 801d6b4:	f89b 3005 	ldrb.w	r3, [fp, #5]
 801d6b8:	9316      	str	r3, [sp, #88]	@ 0x58
 801d6ba:	b292      	uxth	r2, r2
 801d6bc:	9f11      	ldr	r7, [sp, #68]	@ 0x44
 801d6be:	b289      	uxth	r1, r1
 801d6c0:	f8bd 3030 	ldrh.w	r3, [sp, #48]	@ 0x30
 801d6c4:	fb02 f601 	mul.w	r6, r2, r1
 801d6c8:	0112      	lsls	r2, r2, #4
 801d6ca:	ebc6 1101 	rsb	r1, r6, r1, lsl #4
 801d6ce:	f5c2 7980 	rsb	r9, r2, #256	@ 0x100
 801d6d2:	1b92      	subs	r2, r2, r6
 801d6d4:	b289      	uxth	r1, r1
 801d6d6:	b292      	uxth	r2, r2
 801d6d8:	eba9 0901 	sub.w	r9, r9, r1
 801d6dc:	fb02 fe0e 	mul.w	lr, r2, lr
 801d6e0:	fa1f f989 	uxth.w	r9, r9
 801d6e4:	fb02 fc0c 	mul.w	ip, r2, ip
 801d6e8:	fb09 e404 	mla	r4, r9, r4, lr
 801d6ec:	f895 e000 	ldrb.w	lr, [r5]
 801d6f0:	fb09 c000 	mla	r0, r9, r0, ip
 801d6f4:	fb01 4407 	mla	r4, r1, r7, r4
 801d6f8:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801d6fa:	fb06 4407 	mla	r4, r6, r7, r4
 801d6fe:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d700:	fb1e fe07 	smulbb	lr, lr, r7
 801d704:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d708:	fb04 e403 	mla	r4, r4, r3, lr
 801d70c:	b2a4      	uxth	r4, r4
 801d70e:	f104 0e01 	add.w	lr, r4, #1
 801d712:	eb0e 2e14 	add.w	lr, lr, r4, lsr #8
 801d716:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801d718:	fb01 0004 	mla	r0, r1, r4, r0
 801d71c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801d71e:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801d722:	fb06 0004 	mla	r0, r6, r4, r0
 801d726:	786c      	ldrb	r4, [r5, #1]
 801d728:	f885 e000 	strb.w	lr, [r5]
 801d72c:	fb14 f407 	smulbb	r4, r4, r7
 801d730:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d734:	fb00 4003 	mla	r0, r0, r3, r4
 801d738:	b280      	uxth	r0, r0
 801d73a:	1c44      	adds	r4, r0, #1
 801d73c:	eb04 2010 	add.w	r0, r4, r0, lsr #8
 801d740:	1200      	asrs	r0, r0, #8
 801d742:	7068      	strb	r0, [r5, #1]
 801d744:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801d746:	4342      	muls	r2, r0
 801d748:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801d74a:	fb09 2200 	mla	r2, r9, r0, r2
 801d74e:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801d750:	fb01 2100 	mla	r1, r1, r0, r2
 801d754:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801d756:	fb06 1602 	mla	r6, r6, r2, r1
 801d75a:	78a9      	ldrb	r1, [r5, #2]
 801d75c:	fb11 f107 	smulbb	r1, r1, r7
 801d760:	f3c6 2607 	ubfx	r6, r6, #8, #8
 801d764:	fb06 1303 	mla	r3, r6, r3, r1
 801d768:	b29b      	uxth	r3, r3
 801d76a:	1c5e      	adds	r6, r3, #1
 801d76c:	eb06 2313 	add.w	r3, r6, r3, lsr #8
 801d770:	121b      	asrs	r3, r3, #8
 801d772:	70ab      	strb	r3, [r5, #2]
 801d774:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d776:	3503      	adds	r5, #3
 801d778:	449a      	add	sl, r3
 801d77a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d77c:	4498      	add	r8, r3
 801d77e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d780:	3b01      	subs	r3, #1
 801d782:	930d      	str	r3, [sp, #52]	@ 0x34
 801d784:	e750      	b.n	801d628 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801d786:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d788:	449a      	add	sl, r3
 801d78a:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d78c:	4498      	add	r8, r3
 801d78e:	9b07      	ldr	r3, [sp, #28]
 801d790:	3b01      	subs	r3, #1
 801d792:	9307      	str	r3, [sp, #28]
 801d794:	9b08      	ldr	r3, [sp, #32]
 801d796:	3303      	adds	r3, #3
 801d798:	9308      	str	r3, [sp, #32]
 801d79a:	e726      	b.n	801d5ea <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x58>
 801d79c:	d026      	beq.n	801d7ec <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x25a>
 801d79e:	9b07      	ldr	r3, [sp, #28]
 801d7a0:	982b      	ldr	r0, [sp, #172]	@ 0xac
 801d7a2:	3b01      	subs	r3, #1
 801d7a4:	fb00 a003 	mla	r0, r0, r3, sl
 801d7a8:	1400      	asrs	r0, r0, #16
 801d7aa:	f53f af3a 	bmi.w	801d622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7ae:	3901      	subs	r1, #1
 801d7b0:	4288      	cmp	r0, r1
 801d7b2:	f6bf af36 	bge.w	801d622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7b6:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801d7b8:	fb01 8303 	mla	r3, r1, r3, r8
 801d7bc:	141b      	asrs	r3, r3, #16
 801d7be:	f53f af30 	bmi.w	801d622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7c2:	3a01      	subs	r2, #1
 801d7c4:	4293      	cmp	r3, r2
 801d7c6:	f6bf af2c 	bge.w	801d622 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801d7ca:	9b08      	ldr	r3, [sp, #32]
 801d7cc:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801d7d0:	1cdd      	adds	r5, r3, #3
 801d7d2:	f8bd e030 	ldrh.w	lr, [sp, #48]	@ 0x30
 801d7d6:	f1bc 0f00 	cmp.w	ip, #0
 801d7da:	dc5f      	bgt.n	801d89c <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x30a>
 801d7dc:	9b07      	ldr	r3, [sp, #28]
 801d7de:	9a08      	ldr	r2, [sp, #32]
 801d7e0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 801d7e4:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801d7e8:	441a      	add	r2, r3
 801d7ea:	9208      	str	r2, [sp, #32]
 801d7ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d7ee:	2b00      	cmp	r3, #0
 801d7f0:	f340 80e9 	ble.w	801d9c6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x434>
 801d7f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d7f8:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d7fa:	ee30 0a04 	vadd.f32	s0, s0, s8
 801d7fe:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801d802:	eef0 6a62 	vmov.f32	s13, s5
 801d806:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801d80a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801d80e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d812:	ee16 aa90 	vmov	sl, s13
 801d816:	eef0 6a43 	vmov.f32	s13, s6
 801d81a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801d81e:	ee16 8a90 	vmov	r8, s13
 801d822:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801d826:	ee61 7a27 	vmul.f32	s15, s2, s15
 801d82a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801d82e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801d832:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801d836:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801d83a:	ee12 2a90 	vmov	r2, s5
 801d83e:	eef0 2a47 	vmov.f32	s5, s14
 801d842:	fb92 f3f3 	sdiv	r3, r2, r3
 801d846:	ee13 2a10 	vmov	r2, s6
 801d84a:	932b      	str	r3, [sp, #172]	@ 0xac
 801d84c:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d84e:	eeb0 3a67 	vmov.f32	s6, s15
 801d852:	fb92 f3f3 	sdiv	r3, r2, r3
 801d856:	932c      	str	r3, [sp, #176]	@ 0xb0
 801d858:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801d85a:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d85c:	3b01      	subs	r3, #1
 801d85e:	930b      	str	r3, [sp, #44]	@ 0x2c
 801d860:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801d862:	bf08      	it	eq
 801d864:	4613      	moveq	r3, r2
 801d866:	9307      	str	r3, [sp, #28]
 801d868:	e6b1      	b.n	801d5ce <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801d86a:	1c47      	adds	r7, r0, #1
 801d86c:	d482      	bmi.n	801d774 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d86e:	42bb      	cmp	r3, r7
 801d870:	db80      	blt.n	801d774 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d872:	1c67      	adds	r7, r4, #1
 801d874:	f53f af7e 	bmi.w	801d774 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d878:	42be      	cmp	r6, r7
 801d87a:	f6ff af7b 	blt.w	801d774 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d87e:	9f0c      	ldr	r7, [sp, #48]	@ 0x30
 801d880:	b236      	sxth	r6, r6
 801d882:	9001      	str	r0, [sp, #4]
 801d884:	b21b      	sxth	r3, r3
 801d886:	9600      	str	r6, [sp, #0]
 801d888:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801d88a:	e9cd 1704 	strd	r1, r7, [sp, #16]
 801d88e:	e9cd 4202 	strd	r4, r2, [sp, #8]
 801d892:	4629      	mov	r1, r5
 801d894:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801d896:	f7ff fd82 	bl	801d39e <_ZNK8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKhssiihhh>
 801d89a:	e76b      	b.n	801d774 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e2>
 801d89c:	9930      	ldr	r1, [sp, #192]	@ 0xc0
 801d89e:	ea4f 402a 	mov.w	r0, sl, asr #16
 801d8a2:	f3c8 3203 	ubfx	r2, r8, #12, #4
 801d8a6:	f3ca 3303 	ubfx	r3, sl, #12, #4
 801d8aa:	f9b1 7008 	ldrsh.w	r7, [r1, #8]
 801d8ae:	ea4f 4128 	mov.w	r1, r8, asr #16
 801d8b2:	fb07 0101 	mla	r1, r7, r1, r0
 801d8b6:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801d8b8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801d8bc:	1844      	adds	r4, r0, r1
 801d8be:	5c40      	ldrb	r0, [r0, r1]
 801d8c0:	78a6      	ldrb	r6, [r4, #2]
 801d8c2:	7861      	ldrb	r1, [r4, #1]
 801d8c4:	960f      	str	r6, [sp, #60]	@ 0x3c
 801d8c6:	78e6      	ldrb	r6, [r4, #3]
 801d8c8:	910d      	str	r1, [sp, #52]	@ 0x34
 801d8ca:	9610      	str	r6, [sp, #64]	@ 0x40
 801d8cc:	f894 9004 	ldrb.w	r9, [r4, #4]
 801d8d0:	f894 b005 	ldrb.w	fp, [r4, #5]
 801d8d4:	b192      	cbz	r2, 801d8fc <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36a>
 801d8d6:	f06f 0604 	mvn.w	r6, #4
 801d8da:	2103      	movs	r1, #3
 801d8dc:	3405      	adds	r4, #5
 801d8de:	fb17 6701 	smlabb	r7, r7, r1, r6
 801d8e2:	19e6      	adds	r6, r4, r7
 801d8e4:	5de4      	ldrb	r4, [r4, r7]
 801d8e6:	9417      	str	r4, [sp, #92]	@ 0x5c
 801d8e8:	7874      	ldrb	r4, [r6, #1]
 801d8ea:	9419      	str	r4, [sp, #100]	@ 0x64
 801d8ec:	78b4      	ldrb	r4, [r6, #2]
 801d8ee:	941b      	str	r4, [sp, #108]	@ 0x6c
 801d8f0:	78f4      	ldrb	r4, [r6, #3]
 801d8f2:	9418      	str	r4, [sp, #96]	@ 0x60
 801d8f4:	7934      	ldrb	r4, [r6, #4]
 801d8f6:	941a      	str	r4, [sp, #104]	@ 0x68
 801d8f8:	7974      	ldrb	r4, [r6, #5]
 801d8fa:	941c      	str	r4, [sp, #112]	@ 0x70
 801d8fc:	b29b      	uxth	r3, r3
 801d8fe:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801d900:	b292      	uxth	r2, r2
 801d902:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801d904:	3503      	adds	r5, #3
 801d906:	f10c 3cff 	add.w	ip, ip, #4294967295
 801d90a:	fb03 f402 	mul.w	r4, r3, r2
 801d90e:	011b      	lsls	r3, r3, #4
 801d910:	ebc4 1202 	rsb	r2, r4, r2, lsl #4
 801d914:	f5c3 7680 	rsb	r6, r3, #256	@ 0x100
 801d918:	1b1b      	subs	r3, r3, r4
 801d91a:	b292      	uxth	r2, r2
 801d91c:	b29b      	uxth	r3, r3
 801d91e:	1ab6      	subs	r6, r6, r2
 801d920:	435f      	muls	r7, r3
 801d922:	b2b6      	uxth	r6, r6
 801d924:	fb03 f909 	mul.w	r9, r3, r9
 801d928:	fb03 fb0b 	mul.w	fp, r3, fp
 801d92c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d92e:	fb06 7000 	mla	r0, r6, r0, r7
 801d932:	9f17      	ldr	r7, [sp, #92]	@ 0x5c
 801d934:	fb06 bb03 	mla	fp, r6, r3, fp
 801d938:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801d93a:	fb02 0007 	mla	r0, r2, r7, r0
 801d93e:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801d940:	fb02 bb03 	mla	fp, r2, r3, fp
 801d944:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801d946:	fb04 0007 	mla	r0, r4, r7, r0
 801d94a:	f815 7c06 	ldrb.w	r7, [r5, #-6]
 801d94e:	fb17 f701 	smulbb	r7, r7, r1
 801d952:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801d956:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801d958:	fb00 700e 	mla	r0, r0, lr, r7
 801d95c:	fb06 9101 	mla	r1, r6, r1, r9
 801d960:	b280      	uxth	r0, r0
 801d962:	1c47      	adds	r7, r0, #1
 801d964:	eb07 2010 	add.w	r0, r7, r0, lsr #8
 801d968:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801d96a:	1200      	asrs	r0, r0, #8
 801d96c:	f805 0c06 	strb.w	r0, [r5, #-6]
 801d970:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801d972:	fb02 1100 	mla	r1, r2, r0, r1
 801d976:	981a      	ldr	r0, [sp, #104]	@ 0x68
 801d978:	fb04 1100 	mla	r1, r4, r0, r1
 801d97c:	f815 0c05 	ldrb.w	r0, [r5, #-5]
 801d980:	fb04 b403 	mla	r4, r4, r3, fp
 801d984:	f815 3c04 	ldrb.w	r3, [r5, #-4]
 801d988:	fb10 f007 	smulbb	r0, r0, r7
 801d98c:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801d990:	fb13 f307 	smulbb	r3, r3, r7
 801d994:	f3c4 2407 	ubfx	r4, r4, #8, #8
 801d998:	fb01 010e 	mla	r1, r1, lr, r0
 801d99c:	fb04 340e 	mla	r4, r4, lr, r3
 801d9a0:	b289      	uxth	r1, r1
 801d9a2:	b2a4      	uxth	r4, r4
 801d9a4:	1c48      	adds	r0, r1, #1
 801d9a6:	1c63      	adds	r3, r4, #1
 801d9a8:	eb00 2111 	add.w	r1, r0, r1, lsr #8
 801d9ac:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801d9b0:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801d9b2:	1209      	asrs	r1, r1, #8
 801d9b4:	1224      	asrs	r4, r4, #8
 801d9b6:	449a      	add	sl, r3
 801d9b8:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801d9ba:	f805 1c05 	strb.w	r1, [r5, #-5]
 801d9be:	f805 4c04 	strb.w	r4, [r5, #-4]
 801d9c2:	4498      	add	r8, r3
 801d9c4:	e707      	b.n	801d7d6 <_ZN8touchgfx8LCD24bpp52TextureMapper_RGB888_Opaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x244>
 801d9c6:	b01f      	add	sp, #124	@ 0x7c
 801d9c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801d9cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>:
 801d9cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9d0:	b087      	sub	sp, #28
 801d9d2:	780d      	ldrb	r5, [r1, #0]
 801d9d4:	784c      	ldrb	r4, [r1, #1]
 801d9d6:	f89d 004c 	ldrb.w	r0, [sp, #76]	@ 0x4c
 801d9da:	f9bd 7040 	ldrsh.w	r7, [sp, #64]	@ 0x40
 801d9de:	9004      	str	r0, [sp, #16]
 801d9e0:	f89d 0050 	ldrb.w	r0, [sp, #80]	@ 0x50
 801d9e4:	e9dd b611 	ldrd	fp, r6, [sp, #68]	@ 0x44
 801d9e8:	9005      	str	r0, [sp, #20]
 801d9ea:	fb06 bc03 	mla	ip, r6, r3, fp
 801d9ee:	2e00      	cmp	r6, #0
 801d9f0:	7888      	ldrb	r0, [r1, #2]
 801d9f2:	eb0c 0c4c 	add.w	ip, ip, ip, lsl #1
 801d9f6:	eb02 090c 	add.w	r9, r2, ip
 801d9fa:	f2c0 8084 	blt.w	801db06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801d9fe:	42b7      	cmp	r7, r6
 801da00:	f340 8081 	ble.w	801db06 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x13a>
 801da04:	f1bb 0f00 	cmp.w	fp, #0
 801da08:	db79      	blt.n	801dafe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801da0a:	455b      	cmp	r3, fp
 801da0c:	dd77      	ble.n	801dafe <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x132>
 801da0e:	f812 200c 	ldrb.w	r2, [r2, ip]
 801da12:	9201      	str	r2, [sp, #4]
 801da14:	f899 2001 	ldrb.w	r2, [r9, #1]
 801da18:	9202      	str	r2, [sp, #8]
 801da1a:	f899 2002 	ldrb.w	r2, [r9, #2]
 801da1e:	9203      	str	r2, [sp, #12]
 801da20:	f11b 0201 	adds.w	r2, fp, #1
 801da24:	d476      	bmi.n	801db14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801da26:	4293      	cmp	r3, r2
 801da28:	dd74      	ble.n	801db14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801da2a:	9a04      	ldr	r2, [sp, #16]
 801da2c:	2a00      	cmp	r2, #0
 801da2e:	d071      	beq.n	801db14 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x148>
 801da30:	f899 8003 	ldrb.w	r8, [r9, #3]
 801da34:	f899 c004 	ldrb.w	ip, [r9, #4]
 801da38:	f899 a005 	ldrb.w	sl, [r9, #5]
 801da3c:	3601      	adds	r6, #1
 801da3e:	d471      	bmi.n	801db24 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801da40:	42b7      	cmp	r7, r6
 801da42:	dd6f      	ble.n	801db24 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801da44:	9a05      	ldr	r2, [sp, #20]
 801da46:	2a00      	cmp	r2, #0
 801da48:	d06c      	beq.n	801db24 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x158>
 801da4a:	f1bb 0f00 	cmp.w	fp, #0
 801da4e:	db65      	blt.n	801db1c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801da50:	455b      	cmp	r3, fp
 801da52:	dd63      	ble.n	801db1c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x150>
 801da54:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801da58:	f819 e002 	ldrb.w	lr, [r9, r2]
 801da5c:	2203      	movs	r2, #3
 801da5e:	fb03 9602 	mla	r6, r3, r2, r9
 801da62:	7877      	ldrb	r7, [r6, #1]
 801da64:	78b6      	ldrb	r6, [r6, #2]
 801da66:	f11b 0b01 	adds.w	fp, fp, #1
 801da6a:	d40c      	bmi.n	801da86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801da6c:	455b      	cmp	r3, fp
 801da6e:	dd0a      	ble.n	801da86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801da70:	9a04      	ldr	r2, [sp, #16]
 801da72:	b142      	cbz	r2, 801da86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>
 801da74:	2203      	movs	r2, #3
 801da76:	fb13 2002 	smlabb	r0, r3, r2, r2
 801da7a:	f819 5000 	ldrb.w	r5, [r9, r0]
 801da7e:	fb03 9002 	mla	r0, r3, r2, r9
 801da82:	7904      	ldrb	r4, [r0, #4]
 801da84:	7940      	ldrb	r0, [r0, #5]
 801da86:	f8bd 3010 	ldrh.w	r3, [sp, #16]
 801da8a:	f8bd 2014 	ldrh.w	r2, [sp, #20]
 801da8e:	fb03 fb02 	mul.w	fp, r3, r2
 801da92:	011b      	lsls	r3, r3, #4
 801da94:	ebcb 1202 	rsb	r2, fp, r2, lsl #4
 801da98:	f5c3 7980 	rsb	r9, r3, #256	@ 0x100
 801da9c:	eba3 030b 	sub.w	r3, r3, fp
 801daa0:	b292      	uxth	r2, r2
 801daa2:	b29b      	uxth	r3, r3
 801daa4:	eba9 0902 	sub.w	r9, r9, r2
 801daa8:	9304      	str	r3, [sp, #16]
 801daaa:	fa1f f989 	uxth.w	r9, r9
 801daae:	fb03 f808 	mul.w	r8, r3, r8
 801dab2:	9b01      	ldr	r3, [sp, #4]
 801dab4:	fb09 8803 	mla	r8, r9, r3, r8
 801dab8:	9b04      	ldr	r3, [sp, #16]
 801daba:	fb03 fc0c 	mul.w	ip, r3, ip
 801dabe:	9b02      	ldr	r3, [sp, #8]
 801dac0:	fb02 880e 	mla	r8, r2, lr, r8
 801dac4:	fb09 cc03 	mla	ip, r9, r3, ip
 801dac8:	9b04      	ldr	r3, [sp, #16]
 801daca:	fb0b 8805 	mla	r8, fp, r5, r8
 801dace:	fb02 c707 	mla	r7, r2, r7, ip
 801dad2:	fb03 f30a 	mul.w	r3, r3, sl
 801dad6:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dada:	fb0b 7404 	mla	r4, fp, r4, r7
 801dade:	f881 8000 	strb.w	r8, [r1]
 801dae2:	1224      	asrs	r4, r4, #8
 801dae4:	704c      	strb	r4, [r1, #1]
 801dae6:	9c03      	ldr	r4, [sp, #12]
 801dae8:	fb09 3904 	mla	r9, r9, r4, r3
 801daec:	fb02 9206 	mla	r2, r2, r6, r9
 801daf0:	fb0b 2000 	mla	r0, fp, r0, r2
 801daf4:	1200      	asrs	r0, r0, #8
 801daf6:	7088      	strb	r0, [r1, #2]
 801daf8:	b007      	add	sp, #28
 801dafa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801dafe:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801db02:	9501      	str	r5, [sp, #4]
 801db04:	e78c      	b.n	801da20 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x54>
 801db06:	4682      	mov	sl, r0
 801db08:	46a4      	mov	ip, r4
 801db0a:	46a8      	mov	r8, r5
 801db0c:	9501      	str	r5, [sp, #4]
 801db0e:	e9cd 4002 	strd	r4, r0, [sp, #8]
 801db12:	e793      	b.n	801da3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801db14:	4682      	mov	sl, r0
 801db16:	46a4      	mov	ip, r4
 801db18:	46a8      	mov	r8, r5
 801db1a:	e78f      	b.n	801da3c <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x70>
 801db1c:	4606      	mov	r6, r0
 801db1e:	4627      	mov	r7, r4
 801db20:	46ae      	mov	lr, r5
 801db22:	e7a0      	b.n	801da66 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0x9a>
 801db24:	4606      	mov	r6, r0
 801db26:	4627      	mov	r7, r4
 801db28:	46ae      	mov	lr, r5
 801db2a:	e7ac      	b.n	801da86 <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh+0xba>

0801db2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801db2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801db30:	b09b      	sub	sp, #108	@ 0x6c
 801db32:	920b      	str	r2, [sp, #44]	@ 0x2c
 801db34:	9a29      	ldr	r2, [sp, #164]	@ 0xa4
 801db36:	9019      	str	r0, [sp, #100]	@ 0x64
 801db38:	9109      	str	r1, [sp, #36]	@ 0x24
 801db3a:	6850      	ldr	r0, [r2, #4]
 801db3c:	9306      	str	r3, [sp, #24]
 801db3e:	6812      	ldr	r2, [r2, #0]
 801db40:	e9dd 132a 	ldrd	r1, r3, [sp, #168]	@ 0xa8
 801db44:	e9dd b425 	ldrd	fp, r4, [sp, #148]	@ 0x94
 801db48:	fb00 1303 	mla	r3, r0, r3, r1
 801db4c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801db50:	18d3      	adds	r3, r2, r3
 801db52:	9307      	str	r3, [sp, #28]
 801db54:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801db56:	681b      	ldr	r3, [r3, #0]
 801db58:	9308      	str	r3, [sp, #32]
 801db5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801db5c:	2b00      	cmp	r3, #0
 801db5e:	dc03      	bgt.n	801db68 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801db60:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801db62:	2b00      	cmp	r3, #0
 801db64:	f340 81ab 	ble.w	801debe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801db68:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801db6a:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801db6e:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801db72:	1e48      	subs	r0, r1, #1
 801db74:	1e55      	subs	r5, r2, #1
 801db76:	9b06      	ldr	r3, [sp, #24]
 801db78:	2b00      	cmp	r3, #0
 801db7a:	f340 80b1 	ble.w	801dce0 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b4>
 801db7e:	ea5f 462b 	movs.w	r6, fp, asr #16
 801db82:	ea4f 4324 	mov.w	r3, r4, asr #16
 801db86:	d406      	bmi.n	801db96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db88:	4286      	cmp	r6, r0
 801db8a:	da04      	bge.n	801db96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db8c:	2b00      	cmp	r3, #0
 801db8e:	db02      	blt.n	801db96 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801db90:	42ab      	cmp	r3, r5
 801db92:	f2c0 80a6 	blt.w	801dce2 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1b6>
 801db96:	3601      	adds	r6, #1
 801db98:	f100 8097 	bmi.w	801dcca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801db9c:	42b1      	cmp	r1, r6
 801db9e:	f2c0 8094 	blt.w	801dcca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dba2:	3301      	adds	r3, #1
 801dba4:	f100 8091 	bmi.w	801dcca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dba8:	429a      	cmp	r2, r3
 801dbaa:	f2c0 808e 	blt.w	801dcca <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801dbae:	9b06      	ldr	r3, [sp, #24]
 801dbb0:	9e07      	ldr	r6, [sp, #28]
 801dbb2:	930a      	str	r3, [sp, #40]	@ 0x28
 801dbb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dbb6:	2b00      	cmp	r3, #0
 801dbb8:	f340 80b0 	ble.w	801dd1c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1f0>
 801dbbc:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 801dbbe:	1425      	asrs	r5, r4, #16
 801dbc0:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 801dbc2:	f3cb 3203 	ubfx	r2, fp, #12, #4
 801dbc6:	68c7      	ldr	r7, [r0, #12]
 801dbc8:	ea5f 402b 	movs.w	r0, fp, asr #16
 801dbcc:	f3c4 3103 	ubfx	r1, r4, #12, #4
 801dbd0:	689b      	ldr	r3, [r3, #8]
 801dbd2:	f100 80ea 	bmi.w	801ddaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dbd6:	f103 3cff 	add.w	ip, r3, #4294967295
 801dbda:	4560      	cmp	r0, ip
 801dbdc:	f280 80e5 	bge.w	801ddaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dbe0:	2d00      	cmp	r5, #0
 801dbe2:	f2c0 80e2 	blt.w	801ddaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dbe6:	f107 3cff 	add.w	ip, r7, #4294967295
 801dbea:	4565      	cmp	r5, ip
 801dbec:	f280 80dd 	bge.w	801ddaa <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27e>
 801dbf0:	b21b      	sxth	r3, r3
 801dbf2:	fb05 0003 	mla	r0, r5, r3, r0
 801dbf6:	9d08      	ldr	r5, [sp, #32]
 801dbf8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 801dbfc:	182f      	adds	r7, r5, r0
 801dbfe:	5c2d      	ldrb	r5, [r5, r0]
 801dc00:	7878      	ldrb	r0, [r7, #1]
 801dc02:	f897 e002 	ldrb.w	lr, [r7, #2]
 801dc06:	900c      	str	r0, [sp, #48]	@ 0x30
 801dc08:	f897 9003 	ldrb.w	r9, [r7, #3]
 801dc0c:	f897 8004 	ldrb.w	r8, [r7, #4]
 801dc10:	f897 a005 	ldrb.w	sl, [r7, #5]
 801dc14:	b1c9      	cbz	r1, 801dc4a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11e>
 801dc16:	f04f 0c03 	mov.w	ip, #3
 801dc1a:	f06f 0004 	mvn.w	r0, #4
 801dc1e:	3705      	adds	r7, #5
 801dc20:	fb13 030c 	smlabb	r3, r3, ip, r0
 801dc24:	eb07 0c03 	add.w	ip, r7, r3
 801dc28:	5cfb      	ldrb	r3, [r7, r3]
 801dc2a:	930d      	str	r3, [sp, #52]	@ 0x34
 801dc2c:	f89c 3001 	ldrb.w	r3, [ip, #1]
 801dc30:	930f      	str	r3, [sp, #60]	@ 0x3c
 801dc32:	f89c 3002 	ldrb.w	r3, [ip, #2]
 801dc36:	9311      	str	r3, [sp, #68]	@ 0x44
 801dc38:	f89c 3003 	ldrb.w	r3, [ip, #3]
 801dc3c:	930e      	str	r3, [sp, #56]	@ 0x38
 801dc3e:	f89c 3004 	ldrb.w	r3, [ip, #4]
 801dc42:	9310      	str	r3, [sp, #64]	@ 0x40
 801dc44:	f89c 3005 	ldrb.w	r3, [ip, #5]
 801dc48:	9312      	str	r3, [sp, #72]	@ 0x48
 801dc4a:	b292      	uxth	r2, r2
 801dc4c:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801dc4e:	b289      	uxth	r1, r1
 801dc50:	fb02 f301 	mul.w	r3, r2, r1
 801dc54:	0112      	lsls	r2, r2, #4
 801dc56:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801dc5a:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801dc5e:	1ad2      	subs	r2, r2, r3
 801dc60:	b289      	uxth	r1, r1
 801dc62:	b292      	uxth	r2, r2
 801dc64:	1a7f      	subs	r7, r7, r1
 801dc66:	fb02 f909 	mul.w	r9, r2, r9
 801dc6a:	b2bf      	uxth	r7, r7
 801dc6c:	fb02 f808 	mul.w	r8, r2, r8
 801dc70:	fb02 fa0a 	mul.w	sl, r2, sl
 801dc74:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801dc76:	fb07 9905 	mla	r9, r7, r5, r9
 801dc7a:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 801dc7c:	fb07 8800 	mla	r8, r7, r0, r8
 801dc80:	980f      	ldr	r0, [sp, #60]	@ 0x3c
 801dc82:	fb07 aa0e 	mla	sl, r7, lr, sl
 801dc86:	fb01 9905 	mla	r9, r1, r5, r9
 801dc8a:	9d0e      	ldr	r5, [sp, #56]	@ 0x38
 801dc8c:	fb01 8800 	mla	r8, r1, r0, r8
 801dc90:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801dc92:	fb01 a102 	mla	r1, r1, r2, sl
 801dc96:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801dc98:	fb03 9905 	mla	r9, r3, r5, r9
 801dc9c:	fb03 8800 	mla	r8, r3, r0, r8
 801dca0:	fb03 1302 	mla	r3, r3, r2, r1
 801dca4:	ea4f 2929 	mov.w	r9, r9, asr #8
 801dca8:	ea4f 2828 	mov.w	r8, r8, asr #8
 801dcac:	121b      	asrs	r3, r3, #8
 801dcae:	f886 9000 	strb.w	r9, [r6]
 801dcb2:	f886 8001 	strb.w	r8, [r6, #1]
 801dcb6:	70b3      	strb	r3, [r6, #2]
 801dcb8:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dcba:	3603      	adds	r6, #3
 801dcbc:	449b      	add	fp, r3
 801dcbe:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dcc0:	441c      	add	r4, r3
 801dcc2:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801dcc4:	3b01      	subs	r3, #1
 801dcc6:	930a      	str	r3, [sp, #40]	@ 0x28
 801dcc8:	e774      	b.n	801dbb4 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x88>
 801dcca:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801dccc:	449b      	add	fp, r3
 801dcce:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801dcd0:	441c      	add	r4, r3
 801dcd2:	9b06      	ldr	r3, [sp, #24]
 801dcd4:	3b01      	subs	r3, #1
 801dcd6:	9306      	str	r3, [sp, #24]
 801dcd8:	9b07      	ldr	r3, [sp, #28]
 801dcda:	3303      	adds	r3, #3
 801dcdc:	9307      	str	r3, [sp, #28]
 801dcde:	e74a      	b.n	801db76 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801dce0:	d024      	beq.n	801dd2c <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x200>
 801dce2:	9b06      	ldr	r3, [sp, #24]
 801dce4:	9827      	ldr	r0, [sp, #156]	@ 0x9c
 801dce6:	3b01      	subs	r3, #1
 801dce8:	fb00 b003 	mla	r0, r0, r3, fp
 801dcec:	1400      	asrs	r0, r0, #16
 801dcee:	f53f af5e 	bmi.w	801dbae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dcf2:	3901      	subs	r1, #1
 801dcf4:	4288      	cmp	r0, r1
 801dcf6:	f6bf af5a 	bge.w	801dbae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dcfa:	9928      	ldr	r1, [sp, #160]	@ 0xa0
 801dcfc:	fb01 4303 	mla	r3, r1, r3, r4
 801dd00:	141b      	asrs	r3, r3, #16
 801dd02:	f53f af54 	bmi.w	801dbae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dd06:	3a01      	subs	r2, #1
 801dd08:	4293      	cmp	r3, r2
 801dd0a:	f6bf af50 	bge.w	801dbae <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x82>
 801dd0e:	9b07      	ldr	r3, [sp, #28]
 801dd10:	f8dd e018 	ldr.w	lr, [sp, #24]
 801dd14:	1cde      	adds	r6, r3, #3
 801dd16:	f1be 0f00 	cmp.w	lr, #0
 801dd1a:	dc5f      	bgt.n	801dddc <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2b0>
 801dd1c:	9b06      	ldr	r3, [sp, #24]
 801dd1e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801dd22:	9b07      	ldr	r3, [sp, #28]
 801dd24:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801dd28:	4423      	add	r3, r4
 801dd2a:	9307      	str	r3, [sp, #28]
 801dd2c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd2e:	2b00      	cmp	r3, #0
 801dd30:	f340 80c5 	ble.w	801debe <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x392>
 801dd34:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dd38:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd3a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801dd3e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801dd42:	eef0 6a62 	vmov.f32	s13, s5
 801dd46:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801dd4a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801dd4e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd52:	ee16 ba90 	vmov	fp, s13
 801dd56:	eef0 6a43 	vmov.f32	s13, s6
 801dd5a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801dd5e:	ee16 4a90 	vmov	r4, s13
 801dd62:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801dd66:	ee61 7a27 	vmul.f32	s15, s2, s15
 801dd6a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801dd6e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801dd72:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801dd76:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801dd7a:	ee12 2a90 	vmov	r2, s5
 801dd7e:	eef0 2a47 	vmov.f32	s5, s14
 801dd82:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd86:	ee13 2a10 	vmov	r2, s6
 801dd8a:	9327      	str	r3, [sp, #156]	@ 0x9c
 801dd8c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dd8e:	eeb0 3a67 	vmov.f32	s6, s15
 801dd92:	fb92 f3f3 	sdiv	r3, r2, r3
 801dd96:	9328      	str	r3, [sp, #160]	@ 0xa0
 801dd98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801dd9a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801dd9c:	3b01      	subs	r3, #1
 801dd9e:	9309      	str	r3, [sp, #36]	@ 0x24
 801dda0:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801dda2:	bf08      	it	eq
 801dda4:	4613      	moveq	r3, r2
 801dda6:	9306      	str	r3, [sp, #24]
 801dda8:	e6d7      	b.n	801db5a <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801ddaa:	f110 0c01 	adds.w	ip, r0, #1
 801ddae:	d483      	bmi.n	801dcb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ddb0:	4563      	cmp	r3, ip
 801ddb2:	db81      	blt.n	801dcb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ddb4:	f115 0c01 	adds.w	ip, r5, #1
 801ddb8:	f53f af7e 	bmi.w	801dcb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ddbc:	4567      	cmp	r7, ip
 801ddbe:	f6ff af7b 	blt.w	801dcb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801ddc2:	b23f      	sxth	r7, r7
 801ddc4:	b21b      	sxth	r3, r3
 801ddc6:	9700      	str	r7, [sp, #0]
 801ddc8:	e9cd 2103 	strd	r2, r1, [sp, #12]
 801ddcc:	e9cd 0501 	strd	r0, r5, [sp, #4]
 801ddd0:	9a08      	ldr	r2, [sp, #32]
 801ddd2:	4631      	mov	r1, r6
 801ddd4:	9819      	ldr	r0, [sp, #100]	@ 0x64
 801ddd6:	f7ff fdf9 	bl	801d9cc <_ZNK8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKhssiihh>
 801ddda:	e76d      	b.n	801dcb8 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x18c>
 801dddc:	992c      	ldr	r1, [sp, #176]	@ 0xb0
 801ddde:	ea4f 402b 	mov.w	r0, fp, asr #16
 801dde2:	f3cb 3303 	ubfx	r3, fp, #12, #4
 801dde6:	f3c4 3203 	ubfx	r2, r4, #12, #4
 801ddea:	f9b1 c008 	ldrsh.w	ip, [r1, #8]
 801ddee:	1421      	asrs	r1, r4, #16
 801ddf0:	930a      	str	r3, [sp, #40]	@ 0x28
 801ddf2:	fb0c 0101 	mla	r1, ip, r1, r0
 801ddf6:	9808      	ldr	r0, [sp, #32]
 801ddf8:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ddfc:	1845      	adds	r5, r0, r1
 801ddfe:	5c40      	ldrb	r0, [r0, r1]
 801de00:	796f      	ldrb	r7, [r5, #5]
 801de02:	7869      	ldrb	r1, [r5, #1]
 801de04:	f895 8002 	ldrb.w	r8, [r5, #2]
 801de08:	f895 a003 	ldrb.w	sl, [r5, #3]
 801de0c:	f895 9004 	ldrb.w	r9, [r5, #4]
 801de10:	970c      	str	r7, [sp, #48]	@ 0x30
 801de12:	b1a2      	cbz	r2, 801de3e <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x312>
 801de14:	2703      	movs	r7, #3
 801de16:	f06f 0304 	mvn.w	r3, #4
 801de1a:	3505      	adds	r5, #5
 801de1c:	fb1c 3c07 	smlabb	ip, ip, r7, r3
 801de20:	eb05 070c 	add.w	r7, r5, ip
 801de24:	f815 500c 	ldrb.w	r5, [r5, ip]
 801de28:	9513      	str	r5, [sp, #76]	@ 0x4c
 801de2a:	787d      	ldrb	r5, [r7, #1]
 801de2c:	9515      	str	r5, [sp, #84]	@ 0x54
 801de2e:	78bd      	ldrb	r5, [r7, #2]
 801de30:	9517      	str	r5, [sp, #92]	@ 0x5c
 801de32:	78fd      	ldrb	r5, [r7, #3]
 801de34:	9514      	str	r5, [sp, #80]	@ 0x50
 801de36:	793d      	ldrb	r5, [r7, #4]
 801de38:	9516      	str	r5, [sp, #88]	@ 0x58
 801de3a:	797d      	ldrb	r5, [r7, #5]
 801de3c:	9518      	str	r5, [sp, #96]	@ 0x60
 801de3e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 801de42:	b292      	uxth	r2, r2
 801de44:	3603      	adds	r6, #3
 801de46:	f10e 3eff 	add.w	lr, lr, #4294967295
 801de4a:	fb03 f502 	mul.w	r5, r3, r2
 801de4e:	011b      	lsls	r3, r3, #4
 801de50:	ebc5 1202 	rsb	r2, r5, r2, lsl #4
 801de54:	f5c3 7780 	rsb	r7, r3, #256	@ 0x100
 801de58:	1b5b      	subs	r3, r3, r5
 801de5a:	b292      	uxth	r2, r2
 801de5c:	b29b      	uxth	r3, r3
 801de5e:	1abf      	subs	r7, r7, r2
 801de60:	fb03 f909 	mul.w	r9, r3, r9
 801de64:	b2bf      	uxth	r7, r7
 801de66:	fb03 fa0a 	mul.w	sl, r3, sl
 801de6a:	fb07 9901 	mla	r9, r7, r1, r9
 801de6e:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801de70:	fb07 aa00 	mla	sl, r7, r0, sl
 801de74:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801de76:	fb02 9901 	mla	r9, r2, r1, r9
 801de7a:	9916      	ldr	r1, [sp, #88]	@ 0x58
 801de7c:	fb02 aa00 	mla	sl, r2, r0, sl
 801de80:	9814      	ldr	r0, [sp, #80]	@ 0x50
 801de82:	fb05 9901 	mla	r9, r5, r1, r9
 801de86:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801de88:	fb05 aa00 	mla	sl, r5, r0, sl
 801de8c:	434b      	muls	r3, r1
 801de8e:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801de90:	ea4f 2a2a 	mov.w	sl, sl, asr #8
 801de94:	fb07 3308 	mla	r3, r7, r8, r3
 801de98:	ea4f 2929 	mov.w	r9, r9, asr #8
 801de9c:	f806 ac06 	strb.w	sl, [r6, #-6]
 801dea0:	fb02 3201 	mla	r2, r2, r1, r3
 801dea4:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801dea6:	f806 9c05 	strb.w	r9, [r6, #-5]
 801deaa:	fb05 2503 	mla	r5, r5, r3, r2
 801deae:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 801deb0:	122d      	asrs	r5, r5, #8
 801deb2:	449b      	add	fp, r3
 801deb4:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801deb6:	f806 5c04 	strb.w	r5, [r6, #-4]
 801deba:	441c      	add	r4, r3
 801debc:	e72b      	b.n	801dd16 <_ZN8touchgfx8LCD24bpp54TextureMapper_RGB888_Opaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801debe:	b01b      	add	sp, #108	@ 0x6c
 801dec0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801dec4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>:
 801dec4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801dec8:	b087      	sub	sp, #28
 801deca:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801dece:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801ded2:	fb05 7003 	mla	r0, r5, r3, r7
 801ded6:	2d00      	cmp	r5, #0
 801ded8:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801dedc:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801dee0:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801dee4:	f2c0 811f 	blt.w	801e126 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801dee8:	45a8      	cmp	r8, r5
 801deea:	f340 811c 	ble.w	801e126 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x262>
 801deee:	2f00      	cmp	r7, #0
 801def0:	f2c0 8117 	blt.w	801e122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801def4:	42bb      	cmp	r3, r7
 801def6:	f340 8114 	ble.w	801e122 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x25e>
 801defa:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801defe:	1c7a      	adds	r2, r7, #1
 801df00:	f100 8114 	bmi.w	801e12c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801df04:	4293      	cmp	r3, r2
 801df06:	f340 8111 	ble.w	801e12c <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x268>
 801df0a:	2c00      	cmp	r4, #0
 801df0c:	f000 8110 	beq.w	801e130 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x26c>
 801df10:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801df14:	3501      	adds	r5, #1
 801df16:	f100 810f 	bmi.w	801e138 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801df1a:	45a8      	cmp	r8, r5
 801df1c:	f340 810c 	ble.w	801e138 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x274>
 801df20:	f1be 0f00 	cmp.w	lr, #0
 801df24:	f000 810b 	beq.w	801e13e <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x27a>
 801df28:	2f00      	cmp	r7, #0
 801df2a:	f2c0 8103 	blt.w	801e134 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801df2e:	42bb      	cmp	r3, r7
 801df30:	f340 8100 	ble.w	801e134 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x270>
 801df34:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801df38:	3701      	adds	r7, #1
 801df3a:	f100 8103 	bmi.w	801e144 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801df3e:	42bb      	cmp	r3, r7
 801df40:	f340 8100 	ble.w	801e144 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x280>
 801df44:	2c00      	cmp	r4, #0
 801df46:	f000 80ff 	beq.w	801e148 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x284>
 801df4a:	3301      	adds	r3, #1
 801df4c:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801df50:	fa1f fc84 	uxth.w	ip, r4
 801df54:	fa1f fe8e 	uxth.w	lr, lr
 801df58:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801df5c:	fb0c f90e 	mul.w	r9, ip, lr
 801df60:	0e13      	lsrs	r3, r2, #24
 801df62:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801df66:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801df6a:	9302      	str	r3, [sp, #8]
 801df6c:	ebac 0709 	sub.w	r7, ip, r9
 801df70:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801df74:	fa1f f48e 	uxth.w	r4, lr
 801df78:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801df7c:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801df80:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801df84:	fb0a fe0e 	mul.w	lr, sl, lr
 801df88:	1b1b      	subs	r3, r3, r4
 801df8a:	fb0a f606 	mul.w	r6, sl, r6
 801df8e:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801df92:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801df96:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801df9a:	b29b      	uxth	r3, r3
 801df9c:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801dfa0:	b2bf      	uxth	r7, r7
 801dfa2:	9301      	str	r3, [sp, #4]
 801dfa4:	44e6      	add	lr, ip
 801dfa6:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801dfaa:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dfae:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801dfb2:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801dfb6:	9303      	str	r3, [sp, #12]
 801dfb8:	0a33      	lsrs	r3, r6, #8
 801dfba:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801dfbe:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801dfc2:	9304      	str	r3, [sp, #16]
 801dfc4:	fb0b f606 	mul.w	r6, fp, r6
 801dfc8:	fb0b f000 	mul.w	r0, fp, r0
 801dfcc:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801dfd0:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801dfd4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dfd8:	44b6      	add	lr, r6
 801dfda:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801dfde:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801dfe2:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801dfe6:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801dfea:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801dfee:	fb08 f606 	mul.w	r6, r8, r6
 801dff2:	0a03      	lsrs	r3, r0, #8
 801dff4:	fb08 f505 	mul.w	r5, r8, r5
 801dff8:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801dffc:	0a30      	lsrs	r0, r6, #8
 801dffe:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e002:	9305      	str	r3, [sp, #20]
 801e004:	0e13      	lsrs	r3, r2, #24
 801e006:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e00a:	fb0e fe07 	mul.w	lr, lr, r7
 801e00e:	4430      	add	r0, r6
 801e010:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801e014:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e018:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801e01c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e020:	0a00      	lsrs	r0, r0, #8
 801e022:	435e      	muls	r6, r3
 801e024:	0a2d      	lsrs	r5, r5, #8
 801e026:	435a      	muls	r2, r3
 801e028:	9b03      	ldr	r3, [sp, #12]
 801e02a:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e02e:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e032:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e036:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e03a:	44b4      	add	ip, r6
 801e03c:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801e040:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e044:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e048:	9e01      	ldr	r6, [sp, #4]
 801e04a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e04e:	fb03 ee06 	mla	lr, r3, r6, lr
 801e052:	9b04      	ldr	r3, [sp, #16]
 801e054:	0a12      	lsrs	r2, r2, #8
 801e056:	fb0c ee09 	mla	lr, ip, r9, lr
 801e05a:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801e05e:	9b05      	ldr	r3, [sp, #20]
 801e060:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e064:	fb00 ee04 	mla	lr, r0, r4, lr
 801e068:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e06c:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801e070:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801e074:	9b01      	ldr	r3, [sp, #4]
 801e076:	fb07 fe0e 	mul.w	lr, r7, lr
 801e07a:	fb07 f70b 	mul.w	r7, r7, fp
 801e07e:	fb03 ee06 	mla	lr, r3, r6, lr
 801e082:	fb03 730a 	mla	r3, r3, sl, r7
 801e086:	fb09 e202 	mla	r2, r9, r2, lr
 801e08a:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801e08e:	fb04 2e0e 	mla	lr, r4, lr, r2
 801e092:	f89d 2054 	ldrb.w	r2, [sp, #84]	@ 0x54
 801e096:	fb04 3408 	mla	r4, r4, r8, r3
 801e09a:	9b02      	ldr	r3, [sp, #8]
 801e09c:	b292      	uxth	r2, r2
 801e09e:	fb09 4903 	mla	r9, r9, r3, r4
 801e0a2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e0a6:	f3c9 2907 	ubfx	r9, r9, #8, #8
 801e0aa:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801e0ae:	fb09 f902 	mul.w	r9, r9, r2
 801e0b2:	ea40 0e0e 	orr.w	lr, r0, lr
 801e0b6:	f109 0301 	add.w	r3, r9, #1
 801e0ba:	fa5f f08e 	uxtb.w	r0, lr
 801e0be:	fb10 f002 	smulbb	r0, r0, r2
 801e0c2:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801e0c6:	780b      	ldrb	r3, [r1, #0]
 801e0c8:	ea6f 2919 	mvn.w	r9, r9, lsr #8
 801e0cc:	fa5f f989 	uxtb.w	r9, r9
 801e0d0:	fb03 0309 	mla	r3, r3, r9, r0
 801e0d4:	b29b      	uxth	r3, r3
 801e0d6:	1c58      	adds	r0, r3, #1
 801e0d8:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e0dc:	7848      	ldrb	r0, [r1, #1]
 801e0de:	fb10 f009 	smulbb	r0, r0, r9
 801e0e2:	121b      	asrs	r3, r3, #8
 801e0e4:	700b      	strb	r3, [r1, #0]
 801e0e6:	f3ce 2307 	ubfx	r3, lr, #8, #8
 801e0ea:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801e0ee:	fb03 0302 	mla	r3, r3, r2, r0
 801e0f2:	b29b      	uxth	r3, r3
 801e0f4:	1c58      	adds	r0, r3, #1
 801e0f6:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801e0fa:	121b      	asrs	r3, r3, #8
 801e0fc:	704b      	strb	r3, [r1, #1]
 801e0fe:	788b      	ldrb	r3, [r1, #2]
 801e100:	fb13 f909 	smulbb	r9, r3, r9
 801e104:	fb0e 9e02 	mla	lr, lr, r2, r9
 801e108:	fa1f fe8e 	uxth.w	lr, lr
 801e10c:	f10e 0301 	add.w	r3, lr, #1
 801e110:	eb03 2e1e 	add.w	lr, r3, lr, lsr #8
 801e114:	ea4f 2e2e 	mov.w	lr, lr, asr #8
 801e118:	f881 e002 	strb.w	lr, [r1, #2]
 801e11c:	b007      	add	sp, #28
 801e11e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e122:	2600      	movs	r6, #0
 801e124:	e6eb      	b.n	801defe <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x3a>
 801e126:	2000      	movs	r0, #0
 801e128:	4606      	mov	r6, r0
 801e12a:	e6f3      	b.n	801df14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e12c:	2000      	movs	r0, #0
 801e12e:	e6f1      	b.n	801df14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e130:	4620      	mov	r0, r4
 801e132:	e6ef      	b.n	801df14 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x50>
 801e134:	2500      	movs	r5, #0
 801e136:	e6ff      	b.n	801df38 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x74>
 801e138:	2200      	movs	r2, #0
 801e13a:	4615      	mov	r5, r2
 801e13c:	e708      	b.n	801df50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e13e:	4672      	mov	r2, lr
 801e140:	4675      	mov	r5, lr
 801e142:	e705      	b.n	801df50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e144:	2200      	movs	r2, #0
 801e146:	e703      	b.n	801df50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>
 801e148:	4622      	mov	r2, r4
 801e14a:	e701      	b.n	801df50 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh+0x8c>

0801e14c <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801e14c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e150:	b09d      	sub	sp, #116	@ 0x74
 801e152:	9219      	str	r2, [sp, #100]	@ 0x64
 801e154:	9307      	str	r3, [sp, #28]
 801e156:	9a2b      	ldr	r2, [sp, #172]	@ 0xac
 801e158:	f89d 30bc 	ldrb.w	r3, [sp, #188]	@ 0xbc
 801e15c:	901b      	str	r0, [sp, #108]	@ 0x6c
 801e15e:	931a      	str	r3, [sp, #104]	@ 0x68
 801e160:	6850      	ldr	r0, [r2, #4]
 801e162:	9117      	str	r1, [sp, #92]	@ 0x5c
 801e164:	6812      	ldr	r2, [r2, #0]
 801e166:	e9dd 132c 	ldrd	r1, r3, [sp, #176]	@ 0xb0
 801e16a:	e9dd 5627 	ldrd	r5, r6, [sp, #156]	@ 0x9c
 801e16e:	fb00 1303 	mla	r3, r0, r3, r1
 801e172:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801e176:	18d3      	adds	r3, r2, r3
 801e178:	930a      	str	r3, [sp, #40]	@ 0x28
 801e17a:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e17c:	681b      	ldr	r3, [r3, #0]
 801e17e:	9310      	str	r3, [sp, #64]	@ 0x40
 801e180:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801e184:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e186:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e188:	2b00      	cmp	r3, #0
 801e18a:	dc03      	bgt.n	801e194 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801e18c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801e18e:	2b00      	cmp	r3, #0
 801e190:	f340 8368 	ble.w	801e864 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e194:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e196:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801e19a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801e19e:	1e48      	subs	r0, r1, #1
 801e1a0:	1e57      	subs	r7, r2, #1
 801e1a2:	9b07      	ldr	r3, [sp, #28]
 801e1a4:	2b00      	cmp	r3, #0
 801e1a6:	f340 8187 	ble.w	801e4b8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36c>
 801e1aa:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801e1ae:	ea4f 4326 	mov.w	r3, r6, asr #16
 801e1b2:	d406      	bmi.n	801e1c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e1b4:	4584      	cmp	ip, r0
 801e1b6:	da04      	bge.n	801e1c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e1b8:	2b00      	cmp	r3, #0
 801e1ba:	db02      	blt.n	801e1c2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x76>
 801e1bc:	42bb      	cmp	r3, r7
 801e1be:	f2c0 817c 	blt.w	801e4ba <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x36e>
 801e1c2:	f11c 0c01 	adds.w	ip, ip, #1
 801e1c6:	f100 816c 	bmi.w	801e4a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e1ca:	4561      	cmp	r1, ip
 801e1cc:	f2c0 8169 	blt.w	801e4a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e1d0:	3301      	adds	r3, #1
 801e1d2:	f100 8166 	bmi.w	801e4a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e1d6:	429a      	cmp	r2, r3
 801e1d8:	f2c0 8163 	blt.w	801e4a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x356>
 801e1dc:	9b07      	ldr	r3, [sp, #28]
 801e1de:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801e1e0:	9318      	str	r3, [sp, #96]	@ 0x60
 801e1e2:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e1e4:	2b00      	cmp	r3, #0
 801e1e6:	f340 8186 	ble.w	801e4f6 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3aa>
 801e1ea:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e1ec:	142a      	asrs	r2, r5, #16
 801e1ee:	ea4f 4026 	mov.w	r0, r6, asr #16
 801e1f2:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e1f6:	f3c6 3c03 	ubfx	ip, r6, #12, #4
 801e1fa:	e9d3 e302 	ldrd	lr, r3, [r3, #8]
 801e1fe:	f100 81cb 	bmi.w	801e598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e202:	f10e 38ff 	add.w	r8, lr, #4294967295
 801e206:	4542      	cmp	r2, r8
 801e208:	f280 81c6 	bge.w	801e598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e20c:	2800      	cmp	r0, #0
 801e20e:	f2c0 81c3 	blt.w	801e598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e212:	f103 38ff 	add.w	r8, r3, #4294967295
 801e216:	4540      	cmp	r0, r8
 801e218:	f280 81be 	bge.w	801e598 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x44c>
 801e21c:	fa0f f38e 	sxth.w	r3, lr
 801e220:	fb00 2203 	mla	r2, r0, r3, r2
 801e224:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801e226:	eb00 0882 	add.w	r8, r0, r2, lsl #2
 801e22a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
 801e22e:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801e232:	2900      	cmp	r1, #0
 801e234:	f000 81a6 	beq.w	801e584 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x438>
 801e238:	f8d8 0004 	ldr.w	r0, [r8, #4]
 801e23c:	900c      	str	r0, [sp, #48]	@ 0x30
 801e23e:	0e00      	lsrs	r0, r0, #24
 801e240:	9013      	str	r0, [sp, #76]	@ 0x4c
 801e242:	f1bc 0f00 	cmp.w	ip, #0
 801e246:	d00f      	beq.n	801e268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e248:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801e24c:	3b01      	subs	r3, #1
 801e24e:	009b      	lsls	r3, r3, #2
 801e250:	3304      	adds	r3, #4
 801e252:	eb08 0003 	add.w	r0, r8, r3
 801e256:	f858 3003 	ldr.w	r3, [r8, r3]
 801e25a:	9308      	str	r3, [sp, #32]
 801e25c:	0e1b      	lsrs	r3, r3, #24
 801e25e:	9311      	str	r3, [sp, #68]	@ 0x44
 801e260:	6843      	ldr	r3, [r0, #4]
 801e262:	930d      	str	r3, [sp, #52]	@ 0x34
 801e264:	0e1b      	lsrs	r3, r3, #24
 801e266:	9314      	str	r3, [sp, #80]	@ 0x50
 801e268:	b289      	uxth	r1, r1
 801e26a:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e26c:	fa1f fc8c 	uxth.w	ip, ip
 801e270:	0108      	lsls	r0, r1, #4
 801e272:	fb01 f90c 	mul.w	r9, r1, ip
 801e276:	f5c0 7380 	rsb	r3, r0, #256	@ 0x100
 801e27a:	ebc9 1c0c 	rsb	ip, r9, ip, lsl #4
 801e27e:	eba0 0809 	sub.w	r8, r0, r9
 801e282:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 801e284:	fa1f f18c 	uxth.w	r1, ip
 801e288:	fa1f f888 	uxth.w	r8, r8
 801e28c:	1a5b      	subs	r3, r3, r1
 801e28e:	fb08 f000 	mul.w	r0, r8, r0
 801e292:	b29b      	uxth	r3, r3
 801e294:	fb03 000e 	mla	r0, r3, lr, r0
 801e298:	fb01 0004 	mla	r0, r1, r4, r0
 801e29c:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e29e:	fb09 0004 	mla	r0, r9, r4, r0
 801e2a2:	f3c0 2007 	ubfx	r0, r0, #8, #8
 801e2a6:	2800      	cmp	r0, #0
 801e2a8:	f000 80f2 	beq.w	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e2ac:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801e2b0:	d01b      	beq.n	801e2ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x19e>
 801e2b2:	f002 1aff 	and.w	sl, r2, #16711935	@ 0xff00ff
 801e2b6:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e2ba:	fb0e fa0a 	mul.w	sl, lr, sl
 801e2be:	fb0e fe02 	mul.w	lr, lr, r2
 801e2c2:	ea4f 221a 	mov.w	r2, sl, lsr #8
 801e2c6:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e2ca:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801e2ce:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e2d2:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801e2d6:	4452      	add	r2, sl
 801e2d8:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e2dc:	0a12      	lsrs	r2, r2, #8
 801e2de:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e2e2:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801e2e6:	ea42 020c 	orr.w	r2, r2, ip
 801e2ea:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e2ec:	2cff      	cmp	r4, #255	@ 0xff
 801e2ee:	d021      	beq.n	801e334 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1e8>
 801e2f0:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e2f2:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e2f6:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e2f8:	fb04 fb0b 	mul.w	fp, r4, fp
 801e2fc:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e2fe:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e302:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801e304:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e308:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e30c:	fb04 fa0a 	mul.w	sl, r4, sl
 801e310:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e314:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e318:	44de      	add	lr, fp
 801e31a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e31e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e322:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e326:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e32a:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e32e:	ea4e 040a 	orr.w	r4, lr, sl
 801e332:	940c      	str	r4, [sp, #48]	@ 0x30
 801e334:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e336:	2cff      	cmp	r4, #255	@ 0xff
 801e338:	d021      	beq.n	801e37e <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x232>
 801e33a:	9c08      	ldr	r4, [sp, #32]
 801e33c:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e340:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e342:	fb04 fb0b 	mul.w	fp, r4, fp
 801e346:	9c08      	ldr	r4, [sp, #32]
 801e348:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e34c:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801e34e:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e352:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e356:	fb04 fa0a 	mul.w	sl, r4, sl
 801e35a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e35e:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e362:	44de      	add	lr, fp
 801e364:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e368:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e36c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e370:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e374:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e378:	ea4e 040a 	orr.w	r4, lr, sl
 801e37c:	9408      	str	r4, [sp, #32]
 801e37e:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e380:	2cff      	cmp	r4, #255	@ 0xff
 801e382:	d021      	beq.n	801e3c8 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27c>
 801e384:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e386:	f004 1bff 	and.w	fp, r4, #16711935	@ 0xff00ff
 801e38a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e38c:	fb04 fb0b 	mul.w	fp, r4, fp
 801e390:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e392:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e396:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801e398:	ea4f 2e1b 	mov.w	lr, fp, lsr #8
 801e39c:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801e3a0:	fb04 fa0a 	mul.w	sl, r4, sl
 801e3a4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e3a8:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801e3ac:	44de      	add	lr, fp
 801e3ae:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801e3b2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e3b6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e3ba:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e3be:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e3c2:	ea4e 040a 	orr.w	r4, lr, sl
 801e3c6:	940d      	str	r4, [sp, #52]	@ 0x34
 801e3c8:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e3ca:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801e3ce:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e3d2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e3d6:	9c08      	ldr	r4, [sp, #32]
 801e3d8:	fb08 fc0c 	mul.w	ip, r8, ip
 801e3dc:	fb03 cc0e 	mla	ip, r3, lr, ip
 801e3e0:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e3e4:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801e3e6:	fb01 cc0e 	mla	ip, r1, lr, ip
 801e3ea:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801e3ee:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801e3f0:	fb09 cc0e 	mla	ip, r9, lr, ip
 801e3f4:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801e3f8:	fb08 f80e 	mul.w	r8, r8, lr
 801e3fc:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e400:	fb03 8202 	mla	r2, r3, r2, r8
 801e404:	9b08      	ldr	r3, [sp, #32]
 801e406:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e40a:	f403 4a7f 	and.w	sl, r3, #65280	@ 0xff00
 801e40e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801e410:	fb01 220a 	mla	r2, r1, sl, r2
 801e414:	f403 417f 	and.w	r1, r3, #65280	@ 0xff00
 801e418:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e41a:	fb09 2901 	mla	r9, r9, r1, r2
 801e41e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801e420:	4343      	muls	r3, r0
 801e422:	ea4f 2919 	mov.w	r9, r9, lsr #8
 801e426:	1c58      	adds	r0, r3, #1
 801e428:	f409 497f 	and.w	r9, r9, #65280	@ 0xff00
 801e42c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 801e430:	783b      	ldrb	r3, [r7, #0]
 801e432:	ea4c 0c09 	orr.w	ip, ip, r9
 801e436:	ea6f 2010 	mvn.w	r0, r0, lsr #8
 801e43a:	fa5f f28c 	uxtb.w	r2, ip
 801e43e:	b2c0      	uxtb	r0, r0
 801e440:	fb12 f201 	smulbb	r2, r2, r1
 801e444:	fb03 2300 	mla	r3, r3, r0, r2
 801e448:	b29b      	uxth	r3, r3
 801e44a:	1c5a      	adds	r2, r3, #1
 801e44c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e450:	787a      	ldrb	r2, [r7, #1]
 801e452:	fb12 f200 	smulbb	r2, r2, r0
 801e456:	121b      	asrs	r3, r3, #8
 801e458:	703b      	strb	r3, [r7, #0]
 801e45a:	f3cc 2307 	ubfx	r3, ip, #8, #8
 801e45e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801e462:	fb03 2301 	mla	r3, r3, r1, r2
 801e466:	b29b      	uxth	r3, r3
 801e468:	1c5a      	adds	r2, r3, #1
 801e46a:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e46e:	121b      	asrs	r3, r3, #8
 801e470:	707b      	strb	r3, [r7, #1]
 801e472:	78bb      	ldrb	r3, [r7, #2]
 801e474:	fb13 f000 	smulbb	r0, r3, r0
 801e478:	fb0c 0c01 	mla	ip, ip, r1, r0
 801e47c:	fa1f fc8c 	uxth.w	ip, ip
 801e480:	f10c 0301 	add.w	r3, ip, #1
 801e484:	eb03 2c1c 	add.w	ip, r3, ip, lsr #8
 801e488:	ea4f 2c2c 	mov.w	ip, ip, asr #8
 801e48c:	f887 c002 	strb.w	ip, [r7, #2]
 801e490:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e492:	3703      	adds	r7, #3
 801e494:	441d      	add	r5, r3
 801e496:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e498:	441e      	add	r6, r3
 801e49a:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801e49c:	3b01      	subs	r3, #1
 801e49e:	9318      	str	r3, [sp, #96]	@ 0x60
 801e4a0:	e69f      	b.n	801e1e2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801e4a2:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e4a4:	441d      	add	r5, r3
 801e4a6:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e4a8:	441e      	add	r6, r3
 801e4aa:	9b07      	ldr	r3, [sp, #28]
 801e4ac:	3b01      	subs	r3, #1
 801e4ae:	9307      	str	r3, [sp, #28]
 801e4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4b2:	3303      	adds	r3, #3
 801e4b4:	930a      	str	r3, [sp, #40]	@ 0x28
 801e4b6:	e674      	b.n	801e1a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801e4b8:	d025      	beq.n	801e506 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ba>
 801e4ba:	9b07      	ldr	r3, [sp, #28]
 801e4bc:	9829      	ldr	r0, [sp, #164]	@ 0xa4
 801e4be:	3b01      	subs	r3, #1
 801e4c0:	fb00 5003 	mla	r0, r0, r3, r5
 801e4c4:	1400      	asrs	r0, r0, #16
 801e4c6:	f53f ae89 	bmi.w	801e1dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e4ca:	3901      	subs	r1, #1
 801e4cc:	4288      	cmp	r0, r1
 801e4ce:	f6bf ae85 	bge.w	801e1dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e4d2:	992a      	ldr	r1, [sp, #168]	@ 0xa8
 801e4d4:	fb01 6303 	mla	r3, r1, r3, r6
 801e4d8:	141b      	asrs	r3, r3, #16
 801e4da:	f53f ae7f 	bmi.w	801e1dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e4de:	3a01      	subs	r2, #1
 801e4e0:	4293      	cmp	r3, r2
 801e4e2:	f6bf ae7b 	bge.w	801e1dc <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x90>
 801e4e6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4e8:	f8dd b01c 	ldr.w	fp, [sp, #28]
 801e4ec:	f103 0e03 	add.w	lr, r3, #3
 801e4f0:	f1bb 0f00 	cmp.w	fp, #0
 801e4f4:	dc6e      	bgt.n	801e5d4 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x488>
 801e4f6:	9b07      	ldr	r3, [sp, #28]
 801e4f8:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801e4fc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801e4fe:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801e502:	4423      	add	r3, r4
 801e504:	930a      	str	r3, [sp, #40]	@ 0x28
 801e506:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e508:	2b00      	cmp	r3, #0
 801e50a:	f340 81ab 	ble.w	801e864 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x718>
 801e50e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801e512:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e514:	ee30 0a04 	vadd.f32	s0, s0, s8
 801e518:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801e51c:	eef0 6a62 	vmov.f32	s13, s5
 801e520:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801e524:	ee31 1a05 	vadd.f32	s2, s2, s10
 801e528:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e52c:	ee16 5a90 	vmov	r5, s13
 801e530:	eef0 6a43 	vmov.f32	s13, s6
 801e534:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801e538:	ee16 6a90 	vmov	r6, s13
 801e53c:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801e540:	ee61 7a27 	vmul.f32	s15, s2, s15
 801e544:	ee77 2a62 	vsub.f32	s5, s14, s5
 801e548:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801e54c:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801e550:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801e554:	ee12 2a90 	vmov	r2, s5
 801e558:	eef0 2a47 	vmov.f32	s5, s14
 801e55c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e560:	ee13 2a10 	vmov	r2, s6
 801e564:	9329      	str	r3, [sp, #164]	@ 0xa4
 801e566:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e568:	eeb0 3a67 	vmov.f32	s6, s15
 801e56c:	fb92 f3f3 	sdiv	r3, r2, r3
 801e570:	932a      	str	r3, [sp, #168]	@ 0xa8
 801e572:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801e574:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801e576:	3b01      	subs	r3, #1
 801e578:	9317      	str	r3, [sp, #92]	@ 0x5c
 801e57a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801e57c:	bf08      	it	eq
 801e57e:	4613      	moveq	r3, r2
 801e580:	9307      	str	r3, [sp, #28]
 801e582:	e600      	b.n	801e186 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801e584:	f1bc 0f00 	cmp.w	ip, #0
 801e588:	f43f ae6e 	beq.w	801e268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e58c:	f858 3023 	ldr.w	r3, [r8, r3, lsl #2]
 801e590:	9308      	str	r3, [sp, #32]
 801e592:	0e1b      	lsrs	r3, r3, #24
 801e594:	9311      	str	r3, [sp, #68]	@ 0x44
 801e596:	e667      	b.n	801e268 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x11c>
 801e598:	f112 0801 	adds.w	r8, r2, #1
 801e59c:	f53f af78 	bmi.w	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e5a0:	45c6      	cmp	lr, r8
 801e5a2:	f6ff af75 	blt.w	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e5a6:	f110 0801 	adds.w	r8, r0, #1
 801e5aa:	f53f af71 	bmi.w	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e5ae:	4543      	cmp	r3, r8
 801e5b0:	f6ff af6e 	blt.w	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e5b4:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801e5b6:	b21b      	sxth	r3, r3
 801e5b8:	9201      	str	r2, [sp, #4]
 801e5ba:	9300      	str	r3, [sp, #0]
 801e5bc:	fa0f f38e 	sxth.w	r3, lr
 801e5c0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801e5c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801e5c6:	e9cd c404 	strd	ip, r4, [sp, #16]
 801e5ca:	4639      	mov	r1, r7
 801e5cc:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801e5ce:	f7ff fc79 	bl	801dec4 <_ZNK8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA16writePixelOnEdgeEPhPKmssiihhh>
 801e5d2:	e75d      	b.n	801e490 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x344>
 801e5d4:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 801e5d6:	142f      	asrs	r7, r5, #16
 801e5d8:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801e5da:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801e5de:	f9b3 2008 	ldrsh.w	r2, [r3, #8]
 801e5e2:	1433      	asrs	r3, r6, #16
 801e5e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801e5e8:	fb02 7303 	mla	r3, r2, r3, r7
 801e5ec:	eb04 0783 	add.w	r7, r4, r3, lsl #2
 801e5f0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801e5f4:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801e5f8:	2900      	cmp	r1, #0
 801e5fa:	f000 812a 	beq.w	801e852 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x706>
 801e5fe:	687c      	ldr	r4, [r7, #4]
 801e600:	940e      	str	r4, [sp, #56]	@ 0x38
 801e602:	0e24      	lsrs	r4, r4, #24
 801e604:	9415      	str	r4, [sp, #84]	@ 0x54
 801e606:	b178      	cbz	r0, 801e628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e608:	f102 4280 	add.w	r2, r2, #1073741824	@ 0x40000000
 801e60c:	3a01      	subs	r2, #1
 801e60e:	0092      	lsls	r2, r2, #2
 801e610:	3204      	adds	r2, #4
 801e612:	eb07 0802 	add.w	r8, r7, r2
 801e616:	58ba      	ldr	r2, [r7, r2]
 801e618:	9209      	str	r2, [sp, #36]	@ 0x24
 801e61a:	0e12      	lsrs	r2, r2, #24
 801e61c:	9212      	str	r2, [sp, #72]	@ 0x48
 801e61e:	f8d8 2004 	ldr.w	r2, [r8, #4]
 801e622:	920f      	str	r2, [sp, #60]	@ 0x3c
 801e624:	0e12      	lsrs	r2, r2, #24
 801e626:	9216      	str	r2, [sp, #88]	@ 0x58
 801e628:	b289      	uxth	r1, r1
 801e62a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e62c:	b280      	uxth	r0, r0
 801e62e:	fb01 f900 	mul.w	r9, r1, r0
 801e632:	0109      	lsls	r1, r1, #4
 801e634:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801e638:	eba1 0809 	sub.w	r8, r1, r9
 801e63c:	f5c1 7280 	rsb	r2, r1, #256	@ 0x100
 801e640:	9915      	ldr	r1, [sp, #84]	@ 0x54
 801e642:	b280      	uxth	r0, r0
 801e644:	fa1f f888 	uxth.w	r8, r8
 801e648:	1a12      	subs	r2, r2, r0
 801e64a:	fb08 f101 	mul.w	r1, r8, r1
 801e64e:	b292      	uxth	r2, r2
 801e650:	fb02 110c 	mla	r1, r2, ip, r1
 801e654:	fb00 1104 	mla	r1, r0, r4, r1
 801e658:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e65a:	fb09 1104 	mla	r1, r9, r4, r1
 801e65e:	f3c1 2107 	ubfx	r1, r1, #8, #8
 801e662:	2900      	cmp	r1, #0
 801e664:	f000 80ec 	beq.w	801e840 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f4>
 801e668:	f1bc 0fff 	cmp.w	ip, #255	@ 0xff
 801e66c:	d019      	beq.n	801e6a2 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x556>
 801e66e:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801e672:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e676:	fb0c fa0a 	mul.w	sl, ip, sl
 801e67a:	fb0c fc03 	mul.w	ip, ip, r3
 801e67e:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801e682:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801e686:	f50c 7780 	add.w	r7, ip, #256	@ 0x100
 801e68a:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e68e:	eb07 271c 	add.w	r7, r7, ip, lsr #8
 801e692:	4453      	add	r3, sl
 801e694:	0a3f      	lsrs	r7, r7, #8
 801e696:	0a1b      	lsrs	r3, r3, #8
 801e698:	f407 477f 	and.w	r7, r7, #65280	@ 0xff00
 801e69c:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801e6a0:	433b      	orrs	r3, r7
 801e6a2:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e6a4:	2cff      	cmp	r4, #255	@ 0xff
 801e6a6:	d020      	beq.n	801e6ea <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x59e>
 801e6a8:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e6aa:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e6ae:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e6b0:	4367      	muls	r7, r4
 801e6b2:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e6b4:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e6b8:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e6bc:	9c15      	ldr	r4, [sp, #84]	@ 0x54
 801e6be:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e6c2:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e6c6:	fb04 fa0a 	mul.w	sl, r4, sl
 801e6ca:	44bc      	add	ip, r7
 801e6cc:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e6d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e6d4:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e6d8:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e6dc:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e6e0:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e6e4:	ea4c 040a 	orr.w	r4, ip, sl
 801e6e8:	940e      	str	r4, [sp, #56]	@ 0x38
 801e6ea:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6ec:	2cff      	cmp	r4, #255	@ 0xff
 801e6ee:	d020      	beq.n	801e732 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5e6>
 801e6f0:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e6f2:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e6f6:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e6f8:	4367      	muls	r7, r4
 801e6fa:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e6fc:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e700:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e704:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801e706:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e70a:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e70e:	fb04 fa0a 	mul.w	sl, r4, sl
 801e712:	44bc      	add	ip, r7
 801e714:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e718:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e71c:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e720:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e724:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e728:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e72c:	ea4c 040a 	orr.w	r4, ip, sl
 801e730:	9409      	str	r4, [sp, #36]	@ 0x24
 801e732:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e734:	2cff      	cmp	r4, #255	@ 0xff
 801e736:	d020      	beq.n	801e77a <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x62e>
 801e738:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e73a:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e73e:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e740:	4367      	muls	r7, r4
 801e742:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e744:	ea4f 2c17 	mov.w	ip, r7, lsr #8
 801e748:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801e74c:	9c16      	ldr	r4, [sp, #88]	@ 0x58
 801e74e:	f107 1701 	add.w	r7, r7, #65537	@ 0x10001
 801e752:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e756:	fb04 fa0a 	mul.w	sl, r4, sl
 801e75a:	44bc      	add	ip, r7
 801e75c:	f50a 7780 	add.w	r7, sl, #256	@ 0x100
 801e760:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e764:	eb07 2a1a 	add.w	sl, r7, sl, lsr #8
 801e768:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e76c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801e770:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801e774:	ea4c 040a 	orr.w	r4, ip, sl
 801e778:	940f      	str	r4, [sp, #60]	@ 0x3c
 801e77a:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e77c:	f003 1cff 	and.w	ip, r3, #16711935	@ 0xff00ff
 801e780:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801e784:	f004 17ff 	and.w	r7, r4, #16711935	@ 0xff00ff
 801e788:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 801e78a:	fb08 f707 	mul.w	r7, r8, r7
 801e78e:	fb02 770c 	mla	r7, r2, ip, r7
 801e792:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e796:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801e798:	fb00 770c 	mla	r7, r0, ip, r7
 801e79c:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801e7a0:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801e7a2:	fb09 770c 	mla	r7, r9, ip, r7
 801e7a6:	f404 4c7f 	and.w	ip, r4, #65280	@ 0xff00
 801e7aa:	fb08 f80c 	mul.w	r8, r8, ip
 801e7ae:	0a3f      	lsrs	r7, r7, #8
 801e7b0:	fb02 8303 	mla	r3, r2, r3, r8
 801e7b4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801e7b6:	f007 17ff 	and.w	r7, r7, #16711935	@ 0xff00ff
 801e7ba:	f402 4a7f 	and.w	sl, r2, #65280	@ 0xff00
 801e7be:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801e7c0:	fb00 330a 	mla	r3, r0, sl, r3
 801e7c4:	f402 4c7f 	and.w	ip, r2, #65280	@ 0xff00
 801e7c8:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 801e7ca:	fb09 3c0c 	mla	ip, r9, ip, r3
 801e7ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801e7d0:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e7d4:	434b      	muls	r3, r1
 801e7d6:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801e7da:	1c59      	adds	r1, r3, #1
 801e7dc:	ea47 070c 	orr.w	r7, r7, ip
 801e7e0:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801e7e4:	f81e 3c03 	ldrb.w	r3, [lr, #-3]
 801e7e8:	b2fa      	uxtb	r2, r7
 801e7ea:	ea6f 2111 	mvn.w	r1, r1, lsr #8
 801e7ee:	fb12 f200 	smulbb	r2, r2, r0
 801e7f2:	b2c9      	uxtb	r1, r1
 801e7f4:	fb03 2301 	mla	r3, r3, r1, r2
 801e7f8:	b29b      	uxth	r3, r3
 801e7fa:	1c5a      	adds	r2, r3, #1
 801e7fc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e800:	f81e 2c02 	ldrb.w	r2, [lr, #-2]
 801e804:	fb12 f201 	smulbb	r2, r2, r1
 801e808:	121b      	asrs	r3, r3, #8
 801e80a:	f80e 3c03 	strb.w	r3, [lr, #-3]
 801e80e:	f3c7 2307 	ubfx	r3, r7, #8, #8
 801e812:	0c3f      	lsrs	r7, r7, #16
 801e814:	fb03 2300 	mla	r3, r3, r0, r2
 801e818:	b29b      	uxth	r3, r3
 801e81a:	1c5a      	adds	r2, r3, #1
 801e81c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801e820:	121b      	asrs	r3, r3, #8
 801e822:	f80e 3c02 	strb.w	r3, [lr, #-2]
 801e826:	f81e 3c01 	ldrb.w	r3, [lr, #-1]
 801e82a:	fb13 f101 	smulbb	r1, r3, r1
 801e82e:	fb07 1700 	mla	r7, r7, r0, r1
 801e832:	b2bf      	uxth	r7, r7
 801e834:	1c79      	adds	r1, r7, #1
 801e836:	eb01 2717 	add.w	r7, r1, r7, lsr #8
 801e83a:	123f      	asrs	r7, r7, #8
 801e83c:	f80e 7c01 	strb.w	r7, [lr, #-1]
 801e840:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 801e842:	f10e 0e03 	add.w	lr, lr, #3
 801e846:	f10b 3bff 	add.w	fp, fp, #4294967295
 801e84a:	441d      	add	r5, r3
 801e84c:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801e84e:	441e      	add	r6, r3
 801e850:	e64e      	b.n	801e4f0 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a4>
 801e852:	2800      	cmp	r0, #0
 801e854:	f43f aee8 	beq.w	801e628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e858:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801e85c:	9209      	str	r2, [sp, #36]	@ 0x24
 801e85e:	0e12      	lsrs	r2, r2, #24
 801e860:	9212      	str	r2, [sp, #72]	@ 0x48
 801e862:	e6e1      	b.n	801e628 <_ZN8touchgfx8LCD24bpp57TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4dc>
 801e864:	b01d      	add	sp, #116	@ 0x74
 801e866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801e86a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>:
 801e86a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e86e:	b087      	sub	sp, #28
 801e870:	e9dd 7511 	ldrd	r7, r5, [sp, #68]	@ 0x44
 801e874:	f9bd 8040 	ldrsh.w	r8, [sp, #64]	@ 0x40
 801e878:	fb05 7003 	mla	r0, r5, r3, r7
 801e87c:	2d00      	cmp	r5, #0
 801e87e:	f89d 404c 	ldrb.w	r4, [sp, #76]	@ 0x4c
 801e882:	f89d e050 	ldrb.w	lr, [sp, #80]	@ 0x50
 801e886:	eb02 0c80 	add.w	ip, r2, r0, lsl #2
 801e88a:	f2c0 810a 	blt.w	801eaa2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801e88e:	45a8      	cmp	r8, r5
 801e890:	f340 8107 	ble.w	801eaa2 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x238>
 801e894:	2f00      	cmp	r7, #0
 801e896:	f2c0 8102 	blt.w	801ea9e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801e89a:	42bb      	cmp	r3, r7
 801e89c:	f340 80ff 	ble.w	801ea9e <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x234>
 801e8a0:	f852 6020 	ldr.w	r6, [r2, r0, lsl #2]
 801e8a4:	1c7a      	adds	r2, r7, #1
 801e8a6:	f100 80ff 	bmi.w	801eaa8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801e8aa:	4293      	cmp	r3, r2
 801e8ac:	f340 80fc 	ble.w	801eaa8 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x23e>
 801e8b0:	2c00      	cmp	r4, #0
 801e8b2:	f000 80fb 	beq.w	801eaac <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x242>
 801e8b6:	f8dc 0004 	ldr.w	r0, [ip, #4]
 801e8ba:	3501      	adds	r5, #1
 801e8bc:	f100 80fa 	bmi.w	801eab4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801e8c0:	45a8      	cmp	r8, r5
 801e8c2:	f340 80f7 	ble.w	801eab4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x24a>
 801e8c6:	f1be 0f00 	cmp.w	lr, #0
 801e8ca:	f000 80f6 	beq.w	801eaba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x250>
 801e8ce:	2f00      	cmp	r7, #0
 801e8d0:	f2c0 80ee 	blt.w	801eab0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801e8d4:	42bb      	cmp	r3, r7
 801e8d6:	f340 80eb 	ble.w	801eab0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x246>
 801e8da:	f85c 5023 	ldr.w	r5, [ip, r3, lsl #2]
 801e8de:	3701      	adds	r7, #1
 801e8e0:	f100 80ee 	bmi.w	801eac0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801e8e4:	42bb      	cmp	r3, r7
 801e8e6:	f340 80eb 	ble.w	801eac0 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x256>
 801e8ea:	2c00      	cmp	r4, #0
 801e8ec:	f000 80ea 	beq.w	801eac4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x25a>
 801e8f0:	3301      	adds	r3, #1
 801e8f2:	f85c 2023 	ldr.w	r2, [ip, r3, lsl #2]
 801e8f6:	fa1f fc84 	uxth.w	ip, r4
 801e8fa:	fa1f fe8e 	uxth.w	lr, lr
 801e8fe:	ea4f 6a16 	mov.w	sl, r6, lsr #24
 801e902:	fb0c f90e 	mul.w	r9, ip, lr
 801e906:	0e13      	lsrs	r3, r2, #24
 801e908:	ea4f 1c0c 	mov.w	ip, ip, lsl #4
 801e90c:	ebc9 1e0e 	rsb	lr, r9, lr, lsl #4
 801e910:	9302      	str	r3, [sp, #8]
 801e912:	ebac 0709 	sub.w	r7, ip, r9
 801e916:	f5cc 7380 	rsb	r3, ip, #256	@ 0x100
 801e91a:	fa1f f48e 	uxth.w	r4, lr
 801e91e:	f006 1eff 	and.w	lr, r6, #16711935	@ 0xff00ff
 801e922:	f406 467f 	and.w	r6, r6, #65280	@ 0xff00
 801e926:	ea4f 6b10 	mov.w	fp, r0, lsr #24
 801e92a:	fb0a fe0e 	mul.w	lr, sl, lr
 801e92e:	1b1b      	subs	r3, r3, r4
 801e930:	fb0a f606 	mul.w	r6, sl, r6
 801e934:	ea4f 6815 	mov.w	r8, r5, lsr #24
 801e938:	ea4f 2c1e 	mov.w	ip, lr, lsr #8
 801e93c:	f10e 1e01 	add.w	lr, lr, #65537	@ 0x10001
 801e940:	b29b      	uxth	r3, r3
 801e942:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e946:	b2bf      	uxth	r7, r7
 801e948:	9301      	str	r3, [sp, #4]
 801e94a:	44e6      	add	lr, ip
 801e94c:	f506 7c80 	add.w	ip, r6, #256	@ 0x100
 801e950:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e954:	eb0c 2616 	add.w	r6, ip, r6, lsr #8
 801e958:	f00e 13ff 	and.w	r3, lr, #16711935	@ 0xff00ff
 801e95c:	9303      	str	r3, [sp, #12]
 801e95e:	0a33      	lsrs	r3, r6, #8
 801e960:	f000 16ff 	and.w	r6, r0, #16711935	@ 0xff00ff
 801e964:	f400 407f 	and.w	r0, r0, #65280	@ 0xff00
 801e968:	9304      	str	r3, [sp, #16]
 801e96a:	fb0b f606 	mul.w	r6, fp, r6
 801e96e:	fb0b f000 	mul.w	r0, fp, r0
 801e972:	ea4f 2e16 	mov.w	lr, r6, lsr #8
 801e976:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e97a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e97e:	44b6      	add	lr, r6
 801e980:	f500 7680 	add.w	r6, r0, #256	@ 0x100
 801e984:	eb06 2010 	add.w	r0, r6, r0, lsr #8
 801e988:	f005 16ff 	and.w	r6, r5, #16711935	@ 0xff00ff
 801e98c:	f405 457f 	and.w	r5, r5, #65280	@ 0xff00
 801e990:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801e994:	fb08 f606 	mul.w	r6, r8, r6
 801e998:	0a03      	lsrs	r3, r0, #8
 801e99a:	fb08 f505 	mul.w	r5, r8, r5
 801e99e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801e9a2:	0a30      	lsrs	r0, r6, #8
 801e9a4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e9a8:	9305      	str	r3, [sp, #20]
 801e9aa:	0e13      	lsrs	r3, r2, #24
 801e9ac:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e9b0:	fb0e fe07 	mul.w	lr, lr, r7
 801e9b4:	4430      	add	r0, r6
 801e9b6:	f505 7680 	add.w	r6, r5, #256	@ 0x100
 801e9ba:	eb06 2515 	add.w	r5, r6, r5, lsr #8
 801e9be:	f002 16ff 	and.w	r6, r2, #16711935	@ 0xff00ff
 801e9c2:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801e9c6:	0a00      	lsrs	r0, r0, #8
 801e9c8:	435e      	muls	r6, r3
 801e9ca:	0a2d      	lsrs	r5, r5, #8
 801e9cc:	435a      	muls	r2, r3
 801e9ce:	9b03      	ldr	r3, [sp, #12]
 801e9d0:	ea4f 2c16 	mov.w	ip, r6, lsr #8
 801e9d4:	f106 1601 	add.w	r6, r6, #65537	@ 0x10001
 801e9d8:	f000 10ff 	and.w	r0, r0, #16711935	@ 0xff00ff
 801e9dc:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9e0:	44b4      	add	ip, r6
 801e9e2:	f502 7680 	add.w	r6, r2, #256	@ 0x100
 801e9e6:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801e9ea:	eb06 2212 	add.w	r2, r6, r2, lsr #8
 801e9ee:	9e01      	ldr	r6, [sp, #4]
 801e9f0:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801e9f4:	fb03 ee06 	mla	lr, r3, r6, lr
 801e9f8:	9b04      	ldr	r3, [sp, #16]
 801e9fa:	0a12      	lsrs	r2, r2, #8
 801e9fc:	fb0c ee09 	mla	lr, ip, r9, lr
 801ea00:	f403 467f 	and.w	r6, r3, #65280	@ 0xff00
 801ea04:	9b05      	ldr	r3, [sp, #20]
 801ea06:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ea0a:	fb00 ee04 	mla	lr, r0, r4, lr
 801ea0e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea12:	f00e 10ff 	and.w	r0, lr, #16711935	@ 0xff00ff
 801ea16:	f403 4e7f 	and.w	lr, r3, #65280	@ 0xff00
 801ea1a:	9b01      	ldr	r3, [sp, #4]
 801ea1c:	fb07 fe0e 	mul.w	lr, r7, lr
 801ea20:	fb07 f70b 	mul.w	r7, r7, fp
 801ea24:	fb03 ee06 	mla	lr, r3, r6, lr
 801ea28:	fb03 730a 	mla	r3, r3, sl, r7
 801ea2c:	fb09 e202 	mla	r2, r9, r2, lr
 801ea30:	f405 4e7f 	and.w	lr, r5, #65280	@ 0xff00
 801ea34:	fb04 2e0e 	mla	lr, r4, lr, r2
 801ea38:	fb04 3408 	mla	r4, r4, r8, r3
 801ea3c:	9b02      	ldr	r3, [sp, #8]
 801ea3e:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ea42:	fb09 4903 	mla	r9, r9, r3, r4
 801ea46:	780b      	ldrb	r3, [r1, #0]
 801ea48:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801ea4c:	ea6f 2929 	mvn.w	r9, r9, asr #8
 801ea50:	ea40 0e0e 	orr.w	lr, r0, lr
 801ea54:	fa5f f989 	uxtb.w	r9, r9
 801ea58:	fb03 f209 	mul.w	r2, r3, r9
 801ea5c:	1c53      	adds	r3, r2, #1
 801ea5e:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ea62:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801ea66:	700b      	strb	r3, [r1, #0]
 801ea68:	784b      	ldrb	r3, [r1, #1]
 801ea6a:	fb03 f309 	mul.w	r3, r3, r9
 801ea6e:	1c5a      	adds	r2, r3, #1
 801ea70:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801ea74:	ea4f 231e 	mov.w	r3, lr, lsr #8
 801ea78:	ea4f 4e1e 	mov.w	lr, lr, lsr #16
 801ea7c:	eb03 2312 	add.w	r3, r3, r2, lsr #8
 801ea80:	704b      	strb	r3, [r1, #1]
 801ea82:	788b      	ldrb	r3, [r1, #2]
 801ea84:	fb03 f909 	mul.w	r9, r3, r9
 801ea88:	f109 0301 	add.w	r3, r9, #1
 801ea8c:	eb03 2919 	add.w	r9, r3, r9, lsr #8
 801ea90:	eb0e 2e19 	add.w	lr, lr, r9, lsr #8
 801ea94:	f881 e002 	strb.w	lr, [r1, #2]
 801ea98:	b007      	add	sp, #28
 801ea9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ea9e:	2600      	movs	r6, #0
 801eaa0:	e700      	b.n	801e8a4 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x3a>
 801eaa2:	2000      	movs	r0, #0
 801eaa4:	4606      	mov	r6, r0
 801eaa6:	e708      	b.n	801e8ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eaa8:	2000      	movs	r0, #0
 801eaaa:	e706      	b.n	801e8ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eaac:	4620      	mov	r0, r4
 801eaae:	e704      	b.n	801e8ba <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x50>
 801eab0:	2500      	movs	r5, #0
 801eab2:	e714      	b.n	801e8de <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x74>
 801eab4:	2200      	movs	r2, #0
 801eab6:	4615      	mov	r5, r2
 801eab8:	e71d      	b.n	801e8f6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eaba:	4672      	mov	r2, lr
 801eabc:	4675      	mov	r5, lr
 801eabe:	e71a      	b.n	801e8f6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eac0:	2200      	movs	r2, #0
 801eac2:	e718      	b.n	801e8f6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>
 801eac4:	4622      	mov	r2, r4
 801eac6:	e716      	b.n	801e8f6 <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh+0x8c>

0801eac8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801eac8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801eacc:	b099      	sub	sp, #100	@ 0x64
 801eace:	e9cd 1215 	strd	r1, r2, [sp, #84]	@ 0x54
 801ead2:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 801ead4:	9017      	str	r0, [sp, #92]	@ 0x5c
 801ead6:	9306      	str	r3, [sp, #24]
 801ead8:	6850      	ldr	r0, [r2, #4]
 801eada:	6812      	ldr	r2, [r2, #0]
 801eadc:	e9dd 1328 	ldrd	r1, r3, [sp, #160]	@ 0xa0
 801eae0:	e9dd 5623 	ldrd	r5, r6, [sp, #140]	@ 0x8c
 801eae4:	fb00 1303 	mla	r3, r0, r3, r1
 801eae8:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801eaec:	18d3      	adds	r3, r2, r3
 801eaee:	9309      	str	r3, [sp, #36]	@ 0x24
 801eaf0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801eaf2:	681b      	ldr	r3, [r3, #0]
 801eaf4:	930e      	str	r3, [sp, #56]	@ 0x38
 801eaf6:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eaf8:	2b00      	cmp	r3, #0
 801eafa:	dc03      	bgt.n	801eb04 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c>
 801eafc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801eafe:	2b00      	cmp	r3, #0
 801eb00:	f340 8360 	ble.w	801f1c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801eb04:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801eb06:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801eb0a:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801eb0e:	1e48      	subs	r0, r1, #1
 801eb10:	1e57      	subs	r7, r2, #1
 801eb12:	9b06      	ldr	r3, [sp, #24]
 801eb14:	2b00      	cmp	r3, #0
 801eb16:	f340 817b 	ble.w	801ee10 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x348>
 801eb1a:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801eb1e:	ea4f 4326 	mov.w	r3, r6, asr #16
 801eb22:	d406      	bmi.n	801eb32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eb24:	4584      	cmp	ip, r0
 801eb26:	da04      	bge.n	801eb32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eb28:	2b00      	cmp	r3, #0
 801eb2a:	db02      	blt.n	801eb32 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6a>
 801eb2c:	42bb      	cmp	r3, r7
 801eb2e:	f2c0 8170 	blt.w	801ee12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x34a>
 801eb32:	f11c 0c01 	adds.w	ip, ip, #1
 801eb36:	f100 8160 	bmi.w	801edfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801eb3a:	4561      	cmp	r1, ip
 801eb3c:	f2c0 815d 	blt.w	801edfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801eb40:	3301      	adds	r3, #1
 801eb42:	f100 815a 	bmi.w	801edfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801eb46:	429a      	cmp	r2, r3
 801eb48:	f2c0 8157 	blt.w	801edfa <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x332>
 801eb4c:	f8dd 8018 	ldr.w	r8, [sp, #24]
 801eb50:	9f09      	ldr	r7, [sp, #36]	@ 0x24
 801eb52:	f1b8 0f00 	cmp.w	r8, #0
 801eb56:	f340 8179 	ble.w	801ee4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x384>
 801eb5a:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 801eb5c:	ea4f 4c26 	mov.w	ip, r6, asr #16
 801eb60:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801eb62:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801eb66:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 801eb6a:	142a      	asrs	r2, r5, #16
 801eb6c:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801eb70:	689b      	ldr	r3, [r3, #8]
 801eb72:	f100 81be 	bmi.w	801eef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801eb76:	f103 39ff 	add.w	r9, r3, #4294967295
 801eb7a:	454a      	cmp	r2, r9
 801eb7c:	f280 81b9 	bge.w	801eef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801eb80:	f1bc 0f00 	cmp.w	ip, #0
 801eb84:	f2c0 81b5 	blt.w	801eef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801eb88:	f10e 39ff 	add.w	r9, lr, #4294967295
 801eb8c:	45cc      	cmp	ip, r9
 801eb8e:	f280 81b0 	bge.w	801eef2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x42a>
 801eb92:	b21b      	sxth	r3, r3
 801eb94:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801eb96:	fb0c 2203 	mla	r2, ip, r3, r2
 801eb9a:	eb04 0982 	add.w	r9, r4, r2, lsl #2
 801eb9e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801eba2:	ea4f 6e12 	mov.w	lr, r2, lsr #24
 801eba6:	2900      	cmp	r1, #0
 801eba8:	f000 8197 	beq.w	801eeda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x412>
 801ebac:	f8d9 4004 	ldr.w	r4, [r9, #4]
 801ebb0:	940a      	str	r4, [sp, #40]	@ 0x28
 801ebb2:	0e24      	lsrs	r4, r4, #24
 801ebb4:	9411      	str	r4, [sp, #68]	@ 0x44
 801ebb6:	b180      	cbz	r0, 801ebda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801ebb8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801ebbc:	3b01      	subs	r3, #1
 801ebbe:	009b      	lsls	r3, r3, #2
 801ebc0:	3304      	adds	r3, #4
 801ebc2:	eb09 0c03 	add.w	ip, r9, r3
 801ebc6:	f859 3003 	ldr.w	r3, [r9, r3]
 801ebca:	9307      	str	r3, [sp, #28]
 801ebcc:	0e1b      	lsrs	r3, r3, #24
 801ebce:	930f      	str	r3, [sp, #60]	@ 0x3c
 801ebd0:	f8dc 3004 	ldr.w	r3, [ip, #4]
 801ebd4:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ebd6:	0e1b      	lsrs	r3, r3, #24
 801ebd8:	9312      	str	r3, [sp, #72]	@ 0x48
 801ebda:	b289      	uxth	r1, r1
 801ebdc:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801ebde:	b280      	uxth	r0, r0
 801ebe0:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ebe2:	fb01 fa00 	mul.w	sl, r1, r0
 801ebe6:	0109      	lsls	r1, r1, #4
 801ebe8:	ebca 1000 	rsb	r0, sl, r0, lsl #4
 801ebec:	eba1 090a 	sub.w	r9, r1, sl
 801ebf0:	f5c1 7180 	rsb	r1, r1, #256	@ 0x100
 801ebf4:	b280      	uxth	r0, r0
 801ebf6:	fa1f f989 	uxth.w	r9, r9
 801ebfa:	1a09      	subs	r1, r1, r0
 801ebfc:	fb09 f303 	mul.w	r3, r9, r3
 801ec00:	b289      	uxth	r1, r1
 801ec02:	fb01 330e 	mla	r3, r1, lr, r3
 801ec06:	fb00 3304 	mla	r3, r0, r4, r3
 801ec0a:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ec0c:	fb0a 3304 	mla	r3, sl, r4, r3
 801ec10:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801ec14:	2b00      	cmp	r3, #0
 801ec16:	f000 80e8 	beq.w	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ec1a:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801ec1e:	d01b      	beq.n	801ec58 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x190>
 801ec20:	f002 1bff 	and.w	fp, r2, #16711935	@ 0xff00ff
 801ec24:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ec28:	fb0e fb0b 	mul.w	fp, lr, fp
 801ec2c:	fb0e fe02 	mul.w	lr, lr, r2
 801ec30:	ea4f 221b 	mov.w	r2, fp, lsr #8
 801ec34:	f10b 1b01 	add.w	fp, fp, #65537	@ 0x10001
 801ec38:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801ec3c:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ec40:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801ec44:	445a      	add	r2, fp
 801ec46:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ec4a:	0a12      	lsrs	r2, r2, #8
 801ec4c:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801ec50:	f002 12ff 	and.w	r2, r2, #16711935	@ 0xff00ff
 801ec54:	ea42 020c 	orr.w	r2, r2, ip
 801ec58:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ec5a:	2cff      	cmp	r4, #255	@ 0xff
 801ec5c:	d021      	beq.n	801eca2 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1da>
 801ec5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ec60:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ec64:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ec66:	fb04 fc0c 	mul.w	ip, r4, ip
 801ec6a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ec6c:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ec70:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ec74:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ec76:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ec7a:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ec7e:	fb04 fb0b 	mul.w	fp, r4, fp
 801ec82:	44e6      	add	lr, ip
 801ec84:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ec88:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ec8c:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ec90:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ec94:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ec98:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ec9c:	ea4e 040b 	orr.w	r4, lr, fp
 801eca0:	940a      	str	r4, [sp, #40]	@ 0x28
 801eca2:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801eca4:	2cff      	cmp	r4, #255	@ 0xff
 801eca6:	d021      	beq.n	801ecec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x224>
 801eca8:	9c07      	ldr	r4, [sp, #28]
 801ecaa:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ecae:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ecb0:	fb04 fc0c 	mul.w	ip, r4, ip
 801ecb4:	9c07      	ldr	r4, [sp, #28]
 801ecb6:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ecba:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ecbe:	9c0f      	ldr	r4, [sp, #60]	@ 0x3c
 801ecc0:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ecc4:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ecc8:	fb04 fb0b 	mul.w	fp, r4, fp
 801eccc:	44e6      	add	lr, ip
 801ecce:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ecd2:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ecd6:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ecda:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ecde:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ece2:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ece6:	ea4e 040b 	orr.w	r4, lr, fp
 801ecea:	9407      	str	r4, [sp, #28]
 801ecec:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ecee:	2cff      	cmp	r4, #255	@ 0xff
 801ecf0:	d021      	beq.n	801ed36 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801ecf2:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ecf4:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ecf8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ecfa:	fb04 fc0c 	mul.w	ip, r4, ip
 801ecfe:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed00:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801ed04:	f404 4b7f 	and.w	fp, r4, #65280	@ 0xff00
 801ed08:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801ed0a:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801ed0e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed12:	fb04 fb0b 	mul.w	fp, r4, fp
 801ed16:	44e6      	add	lr, ip
 801ed18:	f50b 7c80 	add.w	ip, fp, #256	@ 0x100
 801ed1c:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801ed20:	eb0c 2b1b 	add.w	fp, ip, fp, lsr #8
 801ed24:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801ed28:	ea4f 2b1b 	mov.w	fp, fp, lsr #8
 801ed2c:	f40b 4b7f 	and.w	fp, fp, #65280	@ 0xff00
 801ed30:	ea4e 040b 	orr.w	r4, lr, fp
 801ed34:	940b      	str	r4, [sp, #44]	@ 0x2c
 801ed36:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ed38:	f002 1eff 	and.w	lr, r2, #16711935	@ 0xff00ff
 801ed3c:	f402 427f 	and.w	r2, r2, #65280	@ 0xff00
 801ed40:	2bff      	cmp	r3, #255	@ 0xff
 801ed42:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801ed46:	9c07      	ldr	r4, [sp, #28]
 801ed48:	fb09 fc0c 	mul.w	ip, r9, ip
 801ed4c:	fb01 cc0e 	mla	ip, r1, lr, ip
 801ed50:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ed54:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801ed56:	fb00 cc0e 	mla	ip, r0, lr, ip
 801ed5a:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801ed5e:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801ed60:	fb0a cc0e 	mla	ip, sl, lr, ip
 801ed64:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801ed68:	fb09 f90e 	mul.w	r9, r9, lr
 801ed6c:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801ed70:	fb01 9202 	mla	r2, r1, r2, r9
 801ed74:	9907      	ldr	r1, [sp, #28]
 801ed76:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801ed7a:	f401 4b7f 	and.w	fp, r1, #65280	@ 0xff00
 801ed7e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ed80:	fb00 220b 	mla	r2, r0, fp, r2
 801ed84:	f401 407f 	and.w	r0, r1, #65280	@ 0xff00
 801ed88:	fb0a 2a00 	mla	sl, sl, r0, r2
 801ed8c:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801ed90:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801ed94:	ea4c 0c0a 	orr.w	ip, ip, sl
 801ed98:	fa5f f08c 	uxtb.w	r0, ip
 801ed9c:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801eda0:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801eda4:	f000 80a2 	beq.w	801eeec <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x424>
 801eda8:	43db      	mvns	r3, r3
 801edaa:	783a      	ldrb	r2, [r7, #0]
 801edac:	f897 a002 	ldrb.w	sl, [r7, #2]
 801edb0:	b2db      	uxtb	r3, r3
 801edb2:	fb02 fe03 	mul.w	lr, r2, r3
 801edb6:	fb0a fa03 	mul.w	sl, sl, r3
 801edba:	f10e 0201 	add.w	r2, lr, #1
 801edbe:	eb02 221e 	add.w	r2, r2, lr, lsr #8
 801edc2:	eb00 2212 	add.w	r2, r0, r2, lsr #8
 801edc6:	703a      	strb	r2, [r7, #0]
 801edc8:	787a      	ldrb	r2, [r7, #1]
 801edca:	fb02 f003 	mul.w	r0, r2, r3
 801edce:	f10a 0301 	add.w	r3, sl, #1
 801edd2:	1c42      	adds	r2, r0, #1
 801edd4:	eb03 231a 	add.w	r3, r3, sl, lsr #8
 801edd8:	eb02 2210 	add.w	r2, r2, r0, lsr #8
 801eddc:	eb0c 2c13 	add.w	ip, ip, r3, lsr #8
 801ede0:	eb01 2212 	add.w	r2, r1, r2, lsr #8
 801ede4:	707a      	strb	r2, [r7, #1]
 801ede6:	f887 c002 	strb.w	ip, [r7, #2]
 801edea:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801edec:	3703      	adds	r7, #3
 801edee:	f108 38ff 	add.w	r8, r8, #4294967295
 801edf2:	441d      	add	r5, r3
 801edf4:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801edf6:	441e      	add	r6, r3
 801edf8:	e6ab      	b.n	801eb52 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8a>
 801edfa:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801edfc:	441d      	add	r5, r3
 801edfe:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ee00:	441e      	add	r6, r3
 801ee02:	9b06      	ldr	r3, [sp, #24]
 801ee04:	3b01      	subs	r3, #1
 801ee06:	9306      	str	r3, [sp, #24]
 801ee08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee0a:	3303      	adds	r3, #3
 801ee0c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee0e:	e680      	b.n	801eb12 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a>
 801ee10:	d024      	beq.n	801ee5c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x394>
 801ee12:	9b06      	ldr	r3, [sp, #24]
 801ee14:	9825      	ldr	r0, [sp, #148]	@ 0x94
 801ee16:	3b01      	subs	r3, #1
 801ee18:	fb00 5003 	mla	r0, r0, r3, r5
 801ee1c:	1400      	asrs	r0, r0, #16
 801ee1e:	f53f ae95 	bmi.w	801eb4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ee22:	3901      	subs	r1, #1
 801ee24:	4288      	cmp	r0, r1
 801ee26:	f6bf ae91 	bge.w	801eb4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ee2a:	9926      	ldr	r1, [sp, #152]	@ 0x98
 801ee2c:	fb01 6303 	mla	r3, r1, r3, r6
 801ee30:	141b      	asrs	r3, r3, #16
 801ee32:	f53f ae8b 	bmi.w	801eb4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ee36:	3a01      	subs	r2, #1
 801ee38:	4293      	cmp	r3, r2
 801ee3a:	f6bf ae87 	bge.w	801eb4c <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x84>
 801ee3e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee40:	f8dd b018 	ldr.w	fp, [sp, #24]
 801ee44:	1cdf      	adds	r7, r3, #3
 801ee46:	f1bb 0f00 	cmp.w	fp, #0
 801ee4a:	dc6e      	bgt.n	801ef2a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x462>
 801ee4c:	9b06      	ldr	r3, [sp, #24]
 801ee4e:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801ee52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ee54:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ee58:	4423      	add	r3, r4
 801ee5a:	9309      	str	r3, [sp, #36]	@ 0x24
 801ee5c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801ee5e:	2b00      	cmp	r3, #0
 801ee60:	f340 81b0 	ble.w	801f1c4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6fc>
 801ee64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801ee68:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801ee6a:	ee30 0a04 	vadd.f32	s0, s0, s8
 801ee6e:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801ee72:	eef0 6a62 	vmov.f32	s13, s5
 801ee76:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801ee7a:	ee31 1a05 	vadd.f32	s2, s2, s10
 801ee7e:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee82:	ee16 5a90 	vmov	r5, s13
 801ee86:	eef0 6a43 	vmov.f32	s13, s6
 801ee8a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801ee8e:	ee16 6a90 	vmov	r6, s13
 801ee92:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801ee96:	ee61 7a27 	vmul.f32	s15, s2, s15
 801ee9a:	ee77 2a62 	vsub.f32	s5, s14, s5
 801ee9e:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801eea2:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801eea6:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801eeaa:	ee12 2a90 	vmov	r2, s5
 801eeae:	eef0 2a47 	vmov.f32	s5, s14
 801eeb2:	fb92 f3f3 	sdiv	r3, r2, r3
 801eeb6:	ee13 2a10 	vmov	r2, s6
 801eeba:	9325      	str	r3, [sp, #148]	@ 0x94
 801eebc:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801eebe:	eeb0 3a67 	vmov.f32	s6, s15
 801eec2:	fb92 f3f3 	sdiv	r3, r2, r3
 801eec6:	9326      	str	r3, [sp, #152]	@ 0x98
 801eec8:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801eeca:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801eecc:	3b01      	subs	r3, #1
 801eece:	9315      	str	r3, [sp, #84]	@ 0x54
 801eed0:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801eed2:	bf08      	it	eq
 801eed4:	4613      	moveq	r3, r2
 801eed6:	9306      	str	r3, [sp, #24]
 801eed8:	e60d      	b.n	801eaf6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2e>
 801eeda:	2800      	cmp	r0, #0
 801eedc:	f43f ae7d 	beq.w	801ebda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801eee0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801eee4:	9307      	str	r3, [sp, #28]
 801eee6:	0e1b      	lsrs	r3, r3, #24
 801eee8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801eeea:	e676      	b.n	801ebda <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x112>
 801eeec:	7038      	strb	r0, [r7, #0]
 801eeee:	7079      	strb	r1, [r7, #1]
 801eef0:	e779      	b.n	801ede6 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31e>
 801eef2:	f112 0901 	adds.w	r9, r2, #1
 801eef6:	f53f af78 	bmi.w	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801eefa:	454b      	cmp	r3, r9
 801eefc:	f6ff af75 	blt.w	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ef00:	f11c 0901 	adds.w	r9, ip, #1
 801ef04:	f53f af71 	bmi.w	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ef08:	45ce      	cmp	lr, r9
 801ef0a:	f6ff af6e 	blt.w	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ef0e:	b21b      	sxth	r3, r3
 801ef10:	e9cd 2c01 	strd	r2, ip, [sp, #4]
 801ef14:	fa0f f28e 	sxth.w	r2, lr
 801ef18:	e9cd 1003 	strd	r1, r0, [sp, #12]
 801ef1c:	9200      	str	r2, [sp, #0]
 801ef1e:	4639      	mov	r1, r7
 801ef20:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801ef22:	9817      	ldr	r0, [sp, #92]	@ 0x5c
 801ef24:	f7ff fca1 	bl	801e86a <_ZNK8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKmssiihh>
 801ef28:	e75f      	b.n	801edea <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x322>
 801ef2a:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 801ef2c:	1429      	asrs	r1, r5, #16
 801ef2e:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801ef30:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801ef34:	f9b3 c008 	ldrsh.w	ip, [r3, #8]
 801ef38:	1433      	asrs	r3, r6, #16
 801ef3a:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801ef3e:	fb0c 1303 	mla	r3, ip, r3, r1
 801ef42:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ef44:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 801ef48:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801ef4c:	ea4f 6e13 	mov.w	lr, r3, lsr #24
 801ef50:	2a00      	cmp	r2, #0
 801ef52:	f000 8129 	beq.w	801f1a8 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6e0>
 801ef56:	684c      	ldr	r4, [r1, #4]
 801ef58:	940c      	str	r4, [sp, #48]	@ 0x30
 801ef5a:	0e24      	lsrs	r4, r4, #24
 801ef5c:	9413      	str	r4, [sp, #76]	@ 0x4c
 801ef5e:	b198      	cbz	r0, 801ef88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801ef60:	f10c 4c80 	add.w	ip, ip, #1073741824	@ 0x40000000
 801ef64:	f10c 3cff 	add.w	ip, ip, #4294967295
 801ef68:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
 801ef6c:	f10c 0c04 	add.w	ip, ip, #4
 801ef70:	eb01 080c 	add.w	r8, r1, ip
 801ef74:	f851 100c 	ldr.w	r1, [r1, ip]
 801ef78:	9108      	str	r1, [sp, #32]
 801ef7a:	0e09      	lsrs	r1, r1, #24
 801ef7c:	9110      	str	r1, [sp, #64]	@ 0x40
 801ef7e:	f8d8 1004 	ldr.w	r1, [r8, #4]
 801ef82:	910d      	str	r1, [sp, #52]	@ 0x34
 801ef84:	0e09      	lsrs	r1, r1, #24
 801ef86:	9114      	str	r1, [sp, #80]	@ 0x50
 801ef88:	b292      	uxth	r2, r2
 801ef8a:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801ef8c:	b280      	uxth	r0, r0
 801ef8e:	fb02 f900 	mul.w	r9, r2, r0
 801ef92:	0112      	lsls	r2, r2, #4
 801ef94:	ebc9 1000 	rsb	r0, r9, r0, lsl #4
 801ef98:	eba2 0809 	sub.w	r8, r2, r9
 801ef9c:	f5c2 7180 	rsb	r1, r2, #256	@ 0x100
 801efa0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801efa2:	b280      	uxth	r0, r0
 801efa4:	fa1f f888 	uxth.w	r8, r8
 801efa8:	1a09      	subs	r1, r1, r0
 801efaa:	fb08 f202 	mul.w	r2, r8, r2
 801efae:	b289      	uxth	r1, r1
 801efb0:	fb01 220e 	mla	r2, r1, lr, r2
 801efb4:	fb00 2204 	mla	r2, r0, r4, r2
 801efb8:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801efba:	fb09 2204 	mla	r2, r9, r4, r2
 801efbe:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801efc2:	2a00      	cmp	r2, #0
 801efc4:	f000 80e8 	beq.w	801f198 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6d0>
 801efc8:	f1be 0fff 	cmp.w	lr, #255	@ 0xff
 801efcc:	d01b      	beq.n	801f006 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x53e>
 801efce:	f003 1aff 	and.w	sl, r3, #16711935	@ 0xff00ff
 801efd2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801efd6:	fb0e fa0a 	mul.w	sl, lr, sl
 801efda:	fb0e fe03 	mul.w	lr, lr, r3
 801efde:	ea4f 231a 	mov.w	r3, sl, lsr #8
 801efe2:	f10a 1a01 	add.w	sl, sl, #65537	@ 0x10001
 801efe6:	f50e 7c80 	add.w	ip, lr, #256	@ 0x100
 801efea:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801efee:	eb0c 2c1e 	add.w	ip, ip, lr, lsr #8
 801eff2:	4453      	add	r3, sl
 801eff4:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801eff8:	0a1b      	lsrs	r3, r3, #8
 801effa:	f40c 4c7f 	and.w	ip, ip, #65280	@ 0xff00
 801effe:	f003 13ff 	and.w	r3, r3, #16711935	@ 0xff00ff
 801f002:	ea43 030c 	orr.w	r3, r3, ip
 801f006:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f008:	2cff      	cmp	r4, #255	@ 0xff
 801f00a:	d021      	beq.n	801f050 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x588>
 801f00c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f00e:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f012:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f014:	fb04 fc0c 	mul.w	ip, r4, ip
 801f018:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f01a:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f01e:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f022:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801f024:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f028:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f02c:	fb04 fa0a 	mul.w	sl, r4, sl
 801f030:	44e6      	add	lr, ip
 801f032:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f036:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f03a:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f03e:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f042:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f046:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f04a:	ea4e 040a 	orr.w	r4, lr, sl
 801f04e:	940c      	str	r4, [sp, #48]	@ 0x30
 801f050:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f052:	2cff      	cmp	r4, #255	@ 0xff
 801f054:	d021      	beq.n	801f09a <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5d2>
 801f056:	9c08      	ldr	r4, [sp, #32]
 801f058:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f05c:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f05e:	fb04 fc0c 	mul.w	ip, r4, ip
 801f062:	9c08      	ldr	r4, [sp, #32]
 801f064:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f068:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 801f06a:	fb04 fa0e 	mul.w	sl, r4, lr
 801f06e:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f072:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f076:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f07a:	44e6      	add	lr, ip
 801f07c:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f080:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f084:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f088:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f08c:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f090:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f094:	ea4e 040a 	orr.w	r4, lr, sl
 801f098:	9408      	str	r4, [sp, #32]
 801f09a:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f09c:	2cff      	cmp	r4, #255	@ 0xff
 801f09e:	d021      	beq.n	801f0e4 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x61c>
 801f0a0:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f0a2:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f0a6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f0a8:	fb04 fc0c 	mul.w	ip, r4, ip
 801f0ac:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f0ae:	ea4f 2e1c 	mov.w	lr, ip, lsr #8
 801f0b2:	f404 4a7f 	and.w	sl, r4, #65280	@ 0xff00
 801f0b6:	9c14      	ldr	r4, [sp, #80]	@ 0x50
 801f0b8:	f10c 1c01 	add.w	ip, ip, #65537	@ 0x10001
 801f0bc:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f0c0:	fb04 fa0a 	mul.w	sl, r4, sl
 801f0c4:	44e6      	add	lr, ip
 801f0c6:	f50a 7c80 	add.w	ip, sl, #256	@ 0x100
 801f0ca:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f0ce:	eb0c 2a1a 	add.w	sl, ip, sl, lsr #8
 801f0d2:	f00e 1eff 	and.w	lr, lr, #16711935	@ 0xff00ff
 801f0d6:	ea4f 2a1a 	mov.w	sl, sl, lsr #8
 801f0da:	f40a 4a7f 	and.w	sl, sl, #65280	@ 0xff00
 801f0de:	ea4e 040a 	orr.w	r4, lr, sl
 801f0e2:	940d      	str	r4, [sp, #52]	@ 0x34
 801f0e4:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f0e6:	f003 1eff 	and.w	lr, r3, #16711935	@ 0xff00ff
 801f0ea:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 801f0ee:	2aff      	cmp	r2, #255	@ 0xff
 801f0f0:	f004 1cff 	and.w	ip, r4, #16711935	@ 0xff00ff
 801f0f4:	9c08      	ldr	r4, [sp, #32]
 801f0f6:	fb08 fc0c 	mul.w	ip, r8, ip
 801f0fa:	fb01 cc0e 	mla	ip, r1, lr, ip
 801f0fe:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f102:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801f104:	fb00 cc0e 	mla	ip, r0, lr, ip
 801f108:	f004 1eff 	and.w	lr, r4, #16711935	@ 0xff00ff
 801f10c:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801f10e:	fb09 cc0e 	mla	ip, r9, lr, ip
 801f112:	f404 4e7f 	and.w	lr, r4, #65280	@ 0xff00
 801f116:	fb08 f80e 	mul.w	r8, r8, lr
 801f11a:	ea4f 2c1c 	mov.w	ip, ip, lsr #8
 801f11e:	fb01 8303 	mla	r3, r1, r3, r8
 801f122:	9908      	ldr	r1, [sp, #32]
 801f124:	f00c 1cff 	and.w	ip, ip, #16711935	@ 0xff00ff
 801f128:	f401 4a7f 	and.w	sl, r1, #65280	@ 0xff00
 801f12c:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801f12e:	fb00 330a 	mla	r3, r0, sl, r3
 801f132:	f401 4e7f 	and.w	lr, r1, #65280	@ 0xff00
 801f136:	fb09 3e0e 	mla	lr, r9, lr, r3
 801f13a:	ea4f 2e1e 	mov.w	lr, lr, lsr #8
 801f13e:	f40e 4e7f 	and.w	lr, lr, #65280	@ 0xff00
 801f142:	ea4c 0c0e 	orr.w	ip, ip, lr
 801f146:	fa5f f08c 	uxtb.w	r0, ip
 801f14a:	f3cc 2107 	ubfx	r1, ip, #8, #8
 801f14e:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 801f152:	d032      	beq.n	801f1ba <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6f2>
 801f154:	43d2      	mvns	r2, r2
 801f156:	f817 ec03 	ldrb.w	lr, [r7, #-3]
 801f15a:	b2d2      	uxtb	r2, r2
 801f15c:	fb0e fe02 	mul.w	lr, lr, r2
 801f160:	f10e 0301 	add.w	r3, lr, #1
 801f164:	eb03 231e 	add.w	r3, r3, lr, lsr #8
 801f168:	eb00 2313 	add.w	r3, r0, r3, lsr #8
 801f16c:	f817 0c02 	ldrb.w	r0, [r7, #-2]
 801f170:	4350      	muls	r0, r2
 801f172:	f807 3c03 	strb.w	r3, [r7, #-3]
 801f176:	1c43      	adds	r3, r0, #1
 801f178:	eb03 2310 	add.w	r3, r3, r0, lsr #8
 801f17c:	eb01 2113 	add.w	r1, r1, r3, lsr #8
 801f180:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 801f184:	4353      	muls	r3, r2
 801f186:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f18a:	1c5a      	adds	r2, r3, #1
 801f18c:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f190:	eb0c 2c12 	add.w	ip, ip, r2, lsr #8
 801f194:	f807 cc01 	strb.w	ip, [r7, #-1]
 801f198:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801f19a:	3703      	adds	r7, #3
 801f19c:	f10b 3bff 	add.w	fp, fp, #4294967295
 801f1a0:	441d      	add	r5, r3
 801f1a2:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801f1a4:	441e      	add	r6, r3
 801f1a6:	e64e      	b.n	801ee46 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x37e>
 801f1a8:	2800      	cmp	r0, #0
 801f1aa:	f43f aeed 	beq.w	801ef88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f1ae:	f851 102c 	ldr.w	r1, [r1, ip, lsl #2]
 801f1b2:	9108      	str	r1, [sp, #32]
 801f1b4:	0e09      	lsrs	r1, r1, #24
 801f1b6:	9110      	str	r1, [sp, #64]	@ 0x40
 801f1b8:	e6e6      	b.n	801ef88 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c0>
 801f1ba:	f807 0c03 	strb.w	r0, [r7, #-3]
 801f1be:	f807 1c02 	strb.w	r1, [r7, #-2]
 801f1c2:	e7e7      	b.n	801f194 <_ZN8touchgfx8LCD24bpp59TextureMapper_ARGB8888_NonOpaque_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x6cc>
 801f1c4:	b019      	add	sp, #100	@ 0x64
 801f1c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0801f1cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>:
 801f1cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f1d0:	e9dd 400b 	ldrd	r4, r0, [sp, #44]	@ 0x2c
 801f1d4:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f1d8:	2c00      	cmp	r4, #0
 801f1da:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801f1de:	f89d 7034 	ldrb.w	r7, [sp, #52]	@ 0x34
 801f1e2:	fb00 4e03 	mla	lr, r0, r3, r4
 801f1e6:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801f1ea:	f2c0 80b8 	blt.w	801f35e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f1ee:	45a1      	cmp	r9, r4
 801f1f0:	f340 80b5 	ble.w	801f35e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f1f4:	2800      	cmp	r0, #0
 801f1f6:	f2c0 80b2 	blt.w	801f35e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f1fa:	4580      	cmp	r8, r0
 801f1fc:	f340 80af 	ble.w	801f35e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x192>
 801f200:	ea4f 055e 	mov.w	r5, lr, lsr #1
 801f204:	f01e 0f01 	tst.w	lr, #1
 801f208:	5d56      	ldrb	r6, [r2, r5]
 801f20a:	bf0c      	ite	eq
 801f20c:	f006 060f 	andeq.w	r6, r6, #15
 801f210:	1136      	asrne	r6, r6, #4
 801f212:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f216:	b2f6      	uxtb	r6, r6
 801f218:	f114 0a01 	adds.w	sl, r4, #1
 801f21c:	f100 80a1 	bmi.w	801f362 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f220:	45d1      	cmp	r9, sl
 801f222:	f340 809e 	ble.w	801f362 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f226:	2800      	cmp	r0, #0
 801f228:	f2c0 809b 	blt.w	801f362 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f22c:	4580      	cmp	r8, r0
 801f22e:	f340 8098 	ble.w	801f362 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x196>
 801f232:	2f00      	cmp	r7, #0
 801f234:	f000 8097 	beq.w	801f366 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19a>
 801f238:	f10e 0b01 	add.w	fp, lr, #1
 801f23c:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f240:	f01b 0f01 	tst.w	fp, #1
 801f244:	5d55      	ldrb	r5, [r2, r5]
 801f246:	bf0c      	ite	eq
 801f248:	f005 050f 	andeq.w	r5, r5, #15
 801f24c:	112d      	asrne	r5, r5, #4
 801f24e:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f252:	b2ed      	uxtb	r5, r5
 801f254:	f1bc 0f00 	cmp.w	ip, #0
 801f258:	f000 8089 	beq.w	801f36e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a2>
 801f25c:	2c00      	cmp	r4, #0
 801f25e:	f100 0001 	add.w	r0, r0, #1
 801f262:	f2c0 8082 	blt.w	801f36a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f266:	45a1      	cmp	r9, r4
 801f268:	dd7f      	ble.n	801f36a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f26a:	2800      	cmp	r0, #0
 801f26c:	db7d      	blt.n	801f36a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f26e:	4580      	cmp	r8, r0
 801f270:	dd7b      	ble.n	801f36a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x19e>
 801f272:	eb03 0b0e 	add.w	fp, r3, lr
 801f276:	ea4f 045b 	mov.w	r4, fp, lsr #1
 801f27a:	f01b 0f01 	tst.w	fp, #1
 801f27e:	5d14      	ldrb	r4, [r2, r4]
 801f280:	bf0c      	ite	eq
 801f282:	f004 040f 	andeq.w	r4, r4, #15
 801f286:	1124      	asrne	r4, r4, #4
 801f288:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f28c:	b2e4      	uxtb	r4, r4
 801f28e:	f1ba 0f00 	cmp.w	sl, #0
 801f292:	db6f      	blt.n	801f374 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f294:	45d1      	cmp	r9, sl
 801f296:	dd6d      	ble.n	801f374 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f298:	2800      	cmp	r0, #0
 801f29a:	db6b      	blt.n	801f374 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f29c:	4580      	cmp	r8, r0
 801f29e:	dd69      	ble.n	801f374 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1a8>
 801f2a0:	2f00      	cmp	r7, #0
 801f2a2:	d069      	beq.n	801f378 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1ac>
 801f2a4:	3301      	adds	r3, #1
 801f2a6:	449e      	add	lr, r3
 801f2a8:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f2ac:	f01e 0f01 	tst.w	lr, #1
 801f2b0:	5cd0      	ldrb	r0, [r2, r3]
 801f2b2:	bf0c      	ite	eq
 801f2b4:	f000 000f 	andeq.w	r0, r0, #15
 801f2b8:	1100      	asrne	r0, r0, #4
 801f2ba:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f2be:	b2c3      	uxtb	r3, r0
 801f2c0:	b2ba      	uxth	r2, r7
 801f2c2:	fa1f fc8c 	uxth.w	ip, ip
 801f2c6:	fb02 f00c 	mul.w	r0, r2, ip
 801f2ca:	0112      	lsls	r2, r2, #4
 801f2cc:	ebc0 1c0c 	rsb	ip, r0, ip, lsl #4
 801f2d0:	f5c2 7780 	rsb	r7, r2, #256	@ 0x100
 801f2d4:	1a12      	subs	r2, r2, r0
 801f2d6:	fa1f fc8c 	uxth.w	ip, ip
 801f2da:	b292      	uxth	r2, r2
 801f2dc:	eba7 070c 	sub.w	r7, r7, ip
 801f2e0:	436a      	muls	r2, r5
 801f2e2:	b2bf      	uxth	r7, r7
 801f2e4:	fb06 2207 	mla	r2, r6, r7, r2
 801f2e8:	fb0c 2404 	mla	r4, ip, r4, r2
 801f2ec:	fb00 4303 	mla	r3, r0, r3, r4
 801f2f0:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f2f4:	b38b      	cbz	r3, 801f35a <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x18e>
 801f2f6:	4a21      	ldr	r2, [pc, #132]	@ (801f37c <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x1b0>)
 801f2f8:	6814      	ldr	r4, [r2, #0]
 801f2fa:	f89d 203c 	ldrb.w	r2, [sp, #60]	@ 0x3c
 801f2fe:	b2e5      	uxtb	r5, r4
 801f300:	4353      	muls	r3, r2
 801f302:	1c5a      	adds	r2, r3, #1
 801f304:	eb02 2213 	add.w	r2, r2, r3, lsr #8
 801f308:	1212      	asrs	r2, r2, #8
 801f30a:	b290      	uxth	r0, r2
 801f30c:	43d2      	mvns	r2, r2
 801f30e:	fb15 f500 	smulbb	r5, r5, r0
 801f312:	b2d3      	uxtb	r3, r2
 801f314:	780a      	ldrb	r2, [r1, #0]
 801f316:	fb02 5203 	mla	r2, r2, r3, r5
 801f31a:	b292      	uxth	r2, r2
 801f31c:	1c55      	adds	r5, r2, #1
 801f31e:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f322:	784d      	ldrb	r5, [r1, #1]
 801f324:	fb15 f503 	smulbb	r5, r5, r3
 801f328:	1212      	asrs	r2, r2, #8
 801f32a:	700a      	strb	r2, [r1, #0]
 801f32c:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801f330:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f334:	fb02 5200 	mla	r2, r2, r0, r5
 801f338:	b292      	uxth	r2, r2
 801f33a:	1c55      	adds	r5, r2, #1
 801f33c:	eb05 2212 	add.w	r2, r5, r2, lsr #8
 801f340:	1212      	asrs	r2, r2, #8
 801f342:	704a      	strb	r2, [r1, #1]
 801f344:	788a      	ldrb	r2, [r1, #2]
 801f346:	fb12 f303 	smulbb	r3, r2, r3
 801f34a:	fb04 3300 	mla	r3, r4, r0, r3
 801f34e:	b29b      	uxth	r3, r3
 801f350:	1c5a      	adds	r2, r3, #1
 801f352:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f356:	121b      	asrs	r3, r3, #8
 801f358:	708b      	strb	r3, [r1, #2]
 801f35a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f35e:	2600      	movs	r6, #0
 801f360:	e75a      	b.n	801f218 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x4c>
 801f362:	2500      	movs	r5, #0
 801f364:	e776      	b.n	801f254 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f366:	463d      	mov	r5, r7
 801f368:	e774      	b.n	801f254 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0x88>
 801f36a:	2400      	movs	r4, #0
 801f36c:	e78f      	b.n	801f28e <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xc2>
 801f36e:	4663      	mov	r3, ip
 801f370:	4664      	mov	r4, ip
 801f372:	e7a5      	b.n	801f2c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f374:	2300      	movs	r3, #0
 801f376:	e7a3      	b.n	801f2c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f378:	463b      	mov	r3, r7
 801f37a:	e7a1      	b.n	801f2c0 <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh+0xf4>
 801f37c:	240253b8 	.word	0x240253b8

0801f380 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801f380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f384:	b097      	sub	sp, #92	@ 0x5c
 801f386:	9214      	str	r2, [sp, #80]	@ 0x50
 801f388:	9309      	str	r3, [sp, #36]	@ 0x24
 801f38a:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 801f38c:	f89d 30a4 	ldrb.w	r3, [sp, #164]	@ 0xa4
 801f390:	9015      	str	r0, [sp, #84]	@ 0x54
 801f392:	910c      	str	r1, [sp, #48]	@ 0x30
 801f394:	6850      	ldr	r0, [r2, #4]
 801f396:	930e      	str	r3, [sp, #56]	@ 0x38
 801f398:	6812      	ldr	r2, [r2, #0]
 801f39a:	e9dd 1326 	ldrd	r1, r3, [sp, #152]	@ 0x98
 801f39e:	e9dd 5621 	ldrd	r5, r6, [sp, #132]	@ 0x84
 801f3a2:	fb00 1303 	mla	r3, r0, r3, r1
 801f3a6:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801f3aa:	eb02 0a03 	add.w	sl, r2, r3
 801f3ae:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3b0:	689b      	ldr	r3, [r3, #8]
 801f3b2:	3301      	adds	r3, #1
 801f3b4:	f023 0301 	bic.w	r3, r3, #1
 801f3b8:	930f      	str	r3, [sp, #60]	@ 0x3c
 801f3ba:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3bc:	681f      	ldr	r7, [r3, #0]
 801f3be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f3c0:	2b00      	cmp	r3, #0
 801f3c2:	dc03      	bgt.n	801f3cc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4c>
 801f3c4:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801f3c6:	2b00      	cmp	r3, #0
 801f3c8:	f340 8247 	ble.w	801f85a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f3cc:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f3ce:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801f3d2:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801f3d6:	1e48      	subs	r0, r1, #1
 801f3d8:	f102 3cff 	add.w	ip, r2, #4294967295
 801f3dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f3de:	2b00      	cmp	r3, #0
 801f3e0:	f340 80e5 	ble.w	801f5ae <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x22e>
 801f3e4:	ea5f 4e25 	movs.w	lr, r5, asr #16
 801f3e8:	ea4f 4326 	mov.w	r3, r6, asr #16
 801f3ec:	d406      	bmi.n	801f3fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3ee:	4586      	cmp	lr, r0
 801f3f0:	da04      	bge.n	801f3fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	db02      	blt.n	801f3fc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x7c>
 801f3f6:	4563      	cmp	r3, ip
 801f3f8:	f2c0 80da 	blt.w	801f5b0 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x230>
 801f3fc:	f11e 0e01 	adds.w	lr, lr, #1
 801f400:	f100 80cb 	bmi.w	801f59a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f404:	4571      	cmp	r1, lr
 801f406:	f2c0 80c8 	blt.w	801f59a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f40a:	3301      	adds	r3, #1
 801f40c:	f100 80c5 	bmi.w	801f59a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f410:	429a      	cmp	r2, r3
 801f412:	f2c0 80c2 	blt.w	801f59a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x21a>
 801f416:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f418:	46d0      	mov	r8, sl
 801f41a:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f41e:	930d      	str	r3, [sp, #52]	@ 0x34
 801f420:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f422:	2b00      	cmp	r3, #0
 801f424:	f340 80e3 	ble.w	801f5ee <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x26e>
 801f428:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801f42a:	1430      	asrs	r0, r6, #16
 801f42c:	f3c5 3203 	ubfx	r2, r5, #12, #4
 801f430:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801f434:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801f438:	142b      	asrs	r3, r5, #16
 801f43a:	f100 812e 	bmi.w	801f69a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f43e:	f10c 3bff 	add.w	fp, ip, #4294967295
 801f442:	455b      	cmp	r3, fp
 801f444:	f280 8129 	bge.w	801f69a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f448:	2800      	cmp	r0, #0
 801f44a:	f2c0 8126 	blt.w	801f69a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f44e:	f10e 3bff 	add.w	fp, lr, #4294967295
 801f452:	4558      	cmp	r0, fp
 801f454:	f280 8121 	bge.w	801f69a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x31a>
 801f458:	fb00 3309 	mla	r3, r0, r9, r3
 801f45c:	0858      	lsrs	r0, r3, #1
 801f45e:	07dc      	lsls	r4, r3, #31
 801f460:	f817 c000 	ldrb.w	ip, [r7, r0]
 801f464:	bf54      	ite	pl
 801f466:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f46a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f46e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f472:	fa5f fc8c 	uxtb.w	ip, ip
 801f476:	2a00      	cmp	r2, #0
 801f478:	f000 80fe 	beq.w	801f678 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f8>
 801f47c:	1c58      	adds	r0, r3, #1
 801f47e:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801f482:	07c0      	lsls	r0, r0, #31
 801f484:	f817 e00e 	ldrb.w	lr, [r7, lr]
 801f488:	bf54      	ite	pl
 801f48a:	f00e 0e0f 	andpl.w	lr, lr, #15
 801f48e:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801f492:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801f496:	fa5f f08e 	uxtb.w	r0, lr
 801f49a:	9010      	str	r0, [sp, #64]	@ 0x40
 801f49c:	b1d9      	cbz	r1, 801f4d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f49e:	444b      	add	r3, r9
 801f4a0:	0858      	lsrs	r0, r3, #1
 801f4a2:	07dc      	lsls	r4, r3, #31
 801f4a4:	f103 0301 	add.w	r3, r3, #1
 801f4a8:	5c38      	ldrb	r0, [r7, r0]
 801f4aa:	bf54      	ite	pl
 801f4ac:	f000 000f 	andpl.w	r0, r0, #15
 801f4b0:	1100      	asrmi	r0, r0, #4
 801f4b2:	07dc      	lsls	r4, r3, #31
 801f4b4:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801f4b8:	b2c0      	uxtb	r0, r0
 801f4ba:	900a      	str	r0, [sp, #40]	@ 0x28
 801f4bc:	ea4f 0053 	mov.w	r0, r3, lsr #1
 801f4c0:	f817 e000 	ldrb.w	lr, [r7, r0]
 801f4c4:	bf54      	ite	pl
 801f4c6:	f00e 030f 	andpl.w	r3, lr, #15
 801f4ca:	ea4f 132e 	movmi.w	r3, lr, asr #4
 801f4ce:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f4d2:	b2db      	uxtb	r3, r3
 801f4d4:	9311      	str	r3, [sp, #68]	@ 0x44
 801f4d6:	b292      	uxth	r2, r2
 801f4d8:	b289      	uxth	r1, r1
 801f4da:	0113      	lsls	r3, r2, #4
 801f4dc:	fb02 f001 	mul.w	r0, r2, r1
 801f4e0:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801f4e2:	f5c3 7e80 	rsb	lr, r3, #256	@ 0x100
 801f4e6:	ebc0 1101 	rsb	r1, r0, r1, lsl #4
 801f4ea:	1a1b      	subs	r3, r3, r0
 801f4ec:	b289      	uxth	r1, r1
 801f4ee:	b29b      	uxth	r3, r3
 801f4f0:	ebae 0e01 	sub.w	lr, lr, r1
 801f4f4:	4353      	muls	r3, r2
 801f4f6:	fa1f fe8e 	uxth.w	lr, lr
 801f4fa:	fb0c 320e 	mla	r2, ip, lr, r3
 801f4fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801f500:	fb01 2203 	mla	r2, r1, r3, r2
 801f504:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801f506:	fb00 2203 	mla	r2, r0, r3, r2
 801f50a:	f3c2 2207 	ubfx	r2, r2, #8, #8
 801f50e:	2a00      	cmp	r2, #0
 801f510:	d039      	beq.n	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f512:	4bc7      	ldr	r3, [pc, #796]	@ (801f830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f514:	6819      	ldr	r1, [r3, #0]
 801f516:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801f518:	fa5f fc81 	uxtb.w	ip, r1
 801f51c:	435a      	muls	r2, r3
 801f51e:	1c53      	adds	r3, r2, #1
 801f520:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f524:	1212      	asrs	r2, r2, #8
 801f526:	b290      	uxth	r0, r2
 801f528:	43d2      	mvns	r2, r2
 801f52a:	fb1c fc00 	smulbb	ip, ip, r0
 801f52e:	b2d3      	uxtb	r3, r2
 801f530:	f898 2000 	ldrb.w	r2, [r8]
 801f534:	fb02 c203 	mla	r2, r2, r3, ip
 801f538:	b292      	uxth	r2, r2
 801f53a:	f102 0c01 	add.w	ip, r2, #1
 801f53e:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f542:	f898 c001 	ldrb.w	ip, [r8, #1]
 801f546:	fb1c fc03 	smulbb	ip, ip, r3
 801f54a:	1212      	asrs	r2, r2, #8
 801f54c:	f888 2000 	strb.w	r2, [r8]
 801f550:	f3c1 2207 	ubfx	r2, r1, #8, #8
 801f554:	f3c1 4107 	ubfx	r1, r1, #16, #8
 801f558:	fb02 c200 	mla	r2, r2, r0, ip
 801f55c:	b292      	uxth	r2, r2
 801f55e:	f102 0c01 	add.w	ip, r2, #1
 801f562:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801f566:	1212      	asrs	r2, r2, #8
 801f568:	f888 2001 	strb.w	r2, [r8, #1]
 801f56c:	f898 2002 	ldrb.w	r2, [r8, #2]
 801f570:	fb12 f303 	smulbb	r3, r2, r3
 801f574:	fb01 3300 	mla	r3, r1, r0, r3
 801f578:	b29b      	uxth	r3, r3
 801f57a:	1c5a      	adds	r2, r3, #1
 801f57c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f580:	121b      	asrs	r3, r3, #8
 801f582:	f888 3002 	strb.w	r3, [r8, #2]
 801f586:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f588:	f108 0803 	add.w	r8, r8, #3
 801f58c:	441d      	add	r5, r3
 801f58e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f590:	441e      	add	r6, r3
 801f592:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801f594:	3b01      	subs	r3, #1
 801f596:	930d      	str	r3, [sp, #52]	@ 0x34
 801f598:	e742      	b.n	801f420 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0xa0>
 801f59a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f59c:	f10a 0a03 	add.w	sl, sl, #3
 801f5a0:	441d      	add	r5, r3
 801f5a2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f5a4:	441e      	add	r6, r3
 801f5a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5a8:	3b01      	subs	r3, #1
 801f5aa:	9309      	str	r3, [sp, #36]	@ 0x24
 801f5ac:	e716      	b.n	801f3dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x5c>
 801f5ae:	d024      	beq.n	801f5fa <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x27a>
 801f5b0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5b2:	9823      	ldr	r0, [sp, #140]	@ 0x8c
 801f5b4:	3b01      	subs	r3, #1
 801f5b6:	fb00 5003 	mla	r0, r0, r3, r5
 801f5ba:	1400      	asrs	r0, r0, #16
 801f5bc:	f53f af2b 	bmi.w	801f416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f5c0:	3901      	subs	r1, #1
 801f5c2:	4288      	cmp	r0, r1
 801f5c4:	f6bf af27 	bge.w	801f416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f5c8:	9924      	ldr	r1, [sp, #144]	@ 0x90
 801f5ca:	fb01 6303 	mla	r3, r1, r3, r6
 801f5ce:	141b      	asrs	r3, r3, #16
 801f5d0:	f53f af21 	bmi.w	801f416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f5d4:	3a01      	subs	r2, #1
 801f5d6:	4293      	cmp	r3, r2
 801f5d8:	f6bf af1d 	bge.w	801f416 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801f5dc:	f10a 0e03 	add.w	lr, sl, #3
 801f5e0:	f8dd 8024 	ldr.w	r8, [sp, #36]	@ 0x24
 801f5e4:	f9bd 903c 	ldrsh.w	r9, [sp, #60]	@ 0x3c
 801f5e8:	f1b8 0f00 	cmp.w	r8, #0
 801f5ec:	dc76      	bgt.n	801f6dc <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x35c>
 801f5ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801f5f0:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
 801f5f4:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801f5f8:	44a2      	add	sl, r4
 801f5fa:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f5fc:	2b00      	cmp	r3, #0
 801f5fe:	f340 812c 	ble.w	801f85a <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4da>
 801f602:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801f606:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f608:	ee30 0a04 	vadd.f32	s0, s0, s8
 801f60c:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801f610:	eef0 6a62 	vmov.f32	s13, s5
 801f614:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801f618:	ee31 1a05 	vadd.f32	s2, s2, s10
 801f61c:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f620:	ee16 5a90 	vmov	r5, s13
 801f624:	eef0 6a43 	vmov.f32	s13, s6
 801f628:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801f62c:	ee16 6a90 	vmov	r6, s13
 801f630:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801f634:	ee61 7a27 	vmul.f32	s15, s2, s15
 801f638:	ee77 2a62 	vsub.f32	s5, s14, s5
 801f63c:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801f640:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801f644:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801f648:	ee12 2a90 	vmov	r2, s5
 801f64c:	eef0 2a47 	vmov.f32	s5, s14
 801f650:	fb92 f3f3 	sdiv	r3, r2, r3
 801f654:	ee13 2a10 	vmov	r2, s6
 801f658:	9323      	str	r3, [sp, #140]	@ 0x8c
 801f65a:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f65c:	eeb0 3a67 	vmov.f32	s6, s15
 801f660:	fb92 f3f3 	sdiv	r3, r2, r3
 801f664:	9324      	str	r3, [sp, #144]	@ 0x90
 801f666:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801f668:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801f66a:	3b01      	subs	r3, #1
 801f66c:	930c      	str	r3, [sp, #48]	@ 0x30
 801f66e:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801f670:	bf08      	it	eq
 801f672:	4613      	moveq	r3, r2
 801f674:	9309      	str	r3, [sp, #36]	@ 0x24
 801f676:	e6a2      	b.n	801f3be <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3e>
 801f678:	2900      	cmp	r1, #0
 801f67a:	f43f af2c 	beq.w	801f4d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f67e:	eb09 0003 	add.w	r0, r9, r3
 801f682:	0843      	lsrs	r3, r0, #1
 801f684:	07c0      	lsls	r0, r0, #31
 801f686:	5cfb      	ldrb	r3, [r7, r3]
 801f688:	bf54      	ite	pl
 801f68a:	f003 030f 	andpl.w	r3, r3, #15
 801f68e:	111b      	asrmi	r3, r3, #4
 801f690:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801f694:	b2db      	uxtb	r3, r3
 801f696:	930a      	str	r3, [sp, #40]	@ 0x28
 801f698:	e71d      	b.n	801f4d6 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x156>
 801f69a:	f113 0b01 	adds.w	fp, r3, #1
 801f69e:	f53f af72 	bmi.w	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f6a2:	45dc      	cmp	ip, fp
 801f6a4:	f6ff af6f 	blt.w	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f6a8:	f110 0b01 	adds.w	fp, r0, #1
 801f6ac:	f53f af6b 	bmi.w	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f6b0:	45de      	cmp	lr, fp
 801f6b2:	f6ff af68 	blt.w	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f6b6:	9302      	str	r3, [sp, #8]
 801f6b8:	fa0f f38e 	sxth.w	r3, lr
 801f6bc:	9c0e      	ldr	r4, [sp, #56]	@ 0x38
 801f6be:	9301      	str	r3, [sp, #4]
 801f6c0:	fa0f f38c 	sxth.w	r3, ip
 801f6c4:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801f6c8:	e9cd 1405 	strd	r1, r4, [sp, #20]
 801f6cc:	9300      	str	r3, [sp, #0]
 801f6ce:	463a      	mov	r2, r7
 801f6d0:	464b      	mov	r3, r9
 801f6d2:	4641      	mov	r1, r8
 801f6d4:	9815      	ldr	r0, [sp, #84]	@ 0x54
 801f6d6:	f7ff fd79 	bl	801f1cc <_ZNK8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA16writePixelOnEdgeEPhPKtsssiihhh>
 801f6da:	e754      	b.n	801f586 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x206>
 801f6dc:	142a      	asrs	r2, r5, #16
 801f6de:	f3c5 3103 	ubfx	r1, r5, #12, #4
 801f6e2:	1433      	asrs	r3, r6, #16
 801f6e4:	f3c6 3003 	ubfx	r0, r6, #12, #4
 801f6e8:	fb09 2303 	mla	r3, r9, r3, r2
 801f6ec:	085a      	lsrs	r2, r3, #1
 801f6ee:	07dc      	lsls	r4, r3, #31
 801f6f0:	5cba      	ldrb	r2, [r7, r2]
 801f6f2:	bf54      	ite	pl
 801f6f4:	f002 020f 	andpl.w	r2, r2, #15
 801f6f8:	1112      	asrmi	r2, r2, #4
 801f6fa:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801f6fe:	b2d2      	uxtb	r2, r2
 801f700:	2900      	cmp	r1, #0
 801f702:	f000 8097 	beq.w	801f834 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b4>
 801f706:	f103 0b01 	add.w	fp, r3, #1
 801f70a:	ea4f 0c5b 	mov.w	ip, fp, lsr #1
 801f70e:	f01b 0f01 	tst.w	fp, #1
 801f712:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f716:	bf0c      	ite	eq
 801f718:	f00c 0c0f 	andeq.w	ip, ip, #15
 801f71c:	ea4f 1c2c 	movne.w	ip, ip, asr #4
 801f720:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f724:	fa5f f48c 	uxtb.w	r4, ip
 801f728:	9412      	str	r4, [sp, #72]	@ 0x48
 801f72a:	b300      	cbz	r0, 801f76e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f72c:	444b      	add	r3, r9
 801f72e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f732:	07dc      	lsls	r4, r3, #31
 801f734:	f103 0301 	add.w	r3, r3, #1
 801f738:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f73c:	bf54      	ite	pl
 801f73e:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f742:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f746:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f74a:	fa5f f48c 	uxtb.w	r4, ip
 801f74e:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f752:	940b      	str	r4, [sp, #44]	@ 0x2c
 801f754:	07dc      	lsls	r4, r3, #31
 801f756:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f75a:	bf54      	ite	pl
 801f75c:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f760:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f764:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f768:	fa5f f38c 	uxtb.w	r3, ip
 801f76c:	9313      	str	r3, [sp, #76]	@ 0x4c
 801f76e:	b289      	uxth	r1, r1
 801f770:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 801f772:	b280      	uxth	r0, r0
 801f774:	fb01 f300 	mul.w	r3, r1, r0
 801f778:	0109      	lsls	r1, r1, #4
 801f77a:	ebc3 1000 	rsb	r0, r3, r0, lsl #4
 801f77e:	f5c1 7c80 	rsb	ip, r1, #256	@ 0x100
 801f782:	1ac9      	subs	r1, r1, r3
 801f784:	b280      	uxth	r0, r0
 801f786:	b289      	uxth	r1, r1
 801f788:	ebac 0c00 	sub.w	ip, ip, r0
 801f78c:	4361      	muls	r1, r4
 801f78e:	fa1f fc8c 	uxth.w	ip, ip
 801f792:	fb02 120c 	mla	r2, r2, ip, r1
 801f796:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801f798:	fb00 2001 	mla	r0, r0, r1, r2
 801f79c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801f79e:	fb03 0302 	mla	r3, r3, r2, r0
 801f7a2:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f7a6:	2b00      	cmp	r3, #0
 801f7a8:	d039      	beq.n	801f81e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801f7aa:	4a21      	ldr	r2, [pc, #132]	@ (801f830 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4b0>)
 801f7ac:	f81e 1c03 	ldrb.w	r1, [lr, #-3]
 801f7b0:	6810      	ldr	r0, [r2, #0]
 801f7b2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801f7b4:	fa5f fc80 	uxtb.w	ip, r0
 801f7b8:	4353      	muls	r3, r2
 801f7ba:	1c5a      	adds	r2, r3, #1
 801f7bc:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801f7c0:	121b      	asrs	r3, r3, #8
 801f7c2:	b29a      	uxth	r2, r3
 801f7c4:	43db      	mvns	r3, r3
 801f7c6:	fb1c fc02 	smulbb	ip, ip, r2
 801f7ca:	b2db      	uxtb	r3, r3
 801f7cc:	fb01 c103 	mla	r1, r1, r3, ip
 801f7d0:	b289      	uxth	r1, r1
 801f7d2:	f101 0c01 	add.w	ip, r1, #1
 801f7d6:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f7da:	f81e cc02 	ldrb.w	ip, [lr, #-2]
 801f7de:	fb1c fc03 	smulbb	ip, ip, r3
 801f7e2:	1209      	asrs	r1, r1, #8
 801f7e4:	f80e 1c03 	strb.w	r1, [lr, #-3]
 801f7e8:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801f7ec:	f3c0 4007 	ubfx	r0, r0, #16, #8
 801f7f0:	fb01 c102 	mla	r1, r1, r2, ip
 801f7f4:	b289      	uxth	r1, r1
 801f7f6:	f101 0c01 	add.w	ip, r1, #1
 801f7fa:	eb0c 2111 	add.w	r1, ip, r1, lsr #8
 801f7fe:	1209      	asrs	r1, r1, #8
 801f800:	f80e 1c02 	strb.w	r1, [lr, #-2]
 801f804:	f81e 1c01 	ldrb.w	r1, [lr, #-1]
 801f808:	fb11 f303 	smulbb	r3, r1, r3
 801f80c:	fb00 3002 	mla	r0, r0, r2, r3
 801f810:	b280      	uxth	r0, r0
 801f812:	1c42      	adds	r2, r0, #1
 801f814:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801f818:	1200      	asrs	r0, r0, #8
 801f81a:	f80e 0c01 	strb.w	r0, [lr, #-1]
 801f81e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801f820:	f10e 0e03 	add.w	lr, lr, #3
 801f824:	f108 38ff 	add.w	r8, r8, #4294967295
 801f828:	441d      	add	r5, r3
 801f82a:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801f82c:	441e      	add	r6, r3
 801f82e:	e6db      	b.n	801f5e8 <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x268>
 801f830:	240253b8 	.word	0x240253b8
 801f834:	2800      	cmp	r0, #0
 801f836:	d09a      	beq.n	801f76e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f838:	444b      	add	r3, r9
 801f83a:	ea4f 0c53 	mov.w	ip, r3, lsr #1
 801f83e:	07db      	lsls	r3, r3, #31
 801f840:	f817 c00c 	ldrb.w	ip, [r7, ip]
 801f844:	bf54      	ite	pl
 801f846:	f00c 0c0f 	andpl.w	ip, ip, #15
 801f84a:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801f84e:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801f852:	fa5f f38c 	uxtb.w	r3, ip
 801f856:	930b      	str	r3, [sp, #44]	@ 0x2c
 801f858:	e789      	b.n	801f76e <_ZN8touchgfx8LCD24bpp41TextureMapper_A4_BilinearInterpolation_GA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3ee>
 801f85a:	b017      	add	sp, #92	@ 0x5c
 801f85c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0801f860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>:
 801f860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801f864:	e9dd 540b 	ldrd	r5, r4, [sp, #44]	@ 0x2c
 801f868:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801f86c:	2d00      	cmp	r5, #0
 801f86e:	f9bd 8028 	ldrsh.w	r8, [sp, #40]	@ 0x28
 801f872:	f89d 0034 	ldrb.w	r0, [sp, #52]	@ 0x34
 801f876:	fb04 5e03 	mla	lr, r4, r3, r5
 801f87a:	f89d c038 	ldrb.w	ip, [sp, #56]	@ 0x38
 801f87e:	f2c0 80b1 	blt.w	801f9e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f882:	45a9      	cmp	r9, r5
 801f884:	f340 80ae 	ble.w	801f9e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f888:	2c00      	cmp	r4, #0
 801f88a:	f2c0 80ab 	blt.w	801f9e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f88e:	45a0      	cmp	r8, r4
 801f890:	f340 80a8 	ble.w	801f9e4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x184>
 801f894:	ea4f 065e 	mov.w	r6, lr, lsr #1
 801f898:	f01e 0f01 	tst.w	lr, #1
 801f89c:	5d97      	ldrb	r7, [r2, r6]
 801f89e:	bf0c      	ite	eq
 801f8a0:	f007 070f 	andeq.w	r7, r7, #15
 801f8a4:	113f      	asrne	r7, r7, #4
 801f8a6:	eb07 1707 	add.w	r7, r7, r7, lsl #4
 801f8aa:	b2ff      	uxtb	r7, r7
 801f8ac:	f115 0a01 	adds.w	sl, r5, #1
 801f8b0:	f100 809a 	bmi.w	801f9e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f8b4:	45d1      	cmp	r9, sl
 801f8b6:	f340 8097 	ble.w	801f9e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f8ba:	2c00      	cmp	r4, #0
 801f8bc:	f2c0 8094 	blt.w	801f9e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f8c0:	45a0      	cmp	r8, r4
 801f8c2:	f340 8091 	ble.w	801f9e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x188>
 801f8c6:	2800      	cmp	r0, #0
 801f8c8:	f000 8090 	beq.w	801f9ec <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x18c>
 801f8cc:	f10e 0b01 	add.w	fp, lr, #1
 801f8d0:	ea4f 065b 	mov.w	r6, fp, lsr #1
 801f8d4:	f01b 0f01 	tst.w	fp, #1
 801f8d8:	5d96      	ldrb	r6, [r2, r6]
 801f8da:	bf0c      	ite	eq
 801f8dc:	f006 060f 	andeq.w	r6, r6, #15
 801f8e0:	1136      	asrne	r6, r6, #4
 801f8e2:	eb06 1606 	add.w	r6, r6, r6, lsl #4
 801f8e6:	b2f6      	uxtb	r6, r6
 801f8e8:	f1bc 0f00 	cmp.w	ip, #0
 801f8ec:	f000 8082 	beq.w	801f9f4 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x194>
 801f8f0:	2d00      	cmp	r5, #0
 801f8f2:	f104 0401 	add.w	r4, r4, #1
 801f8f6:	db7b      	blt.n	801f9f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f8f8:	45a9      	cmp	r9, r5
 801f8fa:	dd79      	ble.n	801f9f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f8fc:	2c00      	cmp	r4, #0
 801f8fe:	db77      	blt.n	801f9f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f900:	45a0      	cmp	r8, r4
 801f902:	dd75      	ble.n	801f9f0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x190>
 801f904:	eb03 0b0e 	add.w	fp, r3, lr
 801f908:	ea4f 055b 	mov.w	r5, fp, lsr #1
 801f90c:	f01b 0f01 	tst.w	fp, #1
 801f910:	5d55      	ldrb	r5, [r2, r5]
 801f912:	bf0c      	ite	eq
 801f914:	f005 050f 	andeq.w	r5, r5, #15
 801f918:	112d      	asrne	r5, r5, #4
 801f91a:	eb05 1505 	add.w	r5, r5, r5, lsl #4
 801f91e:	b2ed      	uxtb	r5, r5
 801f920:	f1ba 0f00 	cmp.w	sl, #0
 801f924:	db69      	blt.n	801f9fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f926:	45d1      	cmp	r9, sl
 801f928:	dd67      	ble.n	801f9fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f92a:	2c00      	cmp	r4, #0
 801f92c:	db65      	blt.n	801f9fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f92e:	45a0      	cmp	r8, r4
 801f930:	dd63      	ble.n	801f9fa <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19a>
 801f932:	2800      	cmp	r0, #0
 801f934:	d063      	beq.n	801f9fe <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x19e>
 801f936:	3301      	adds	r3, #1
 801f938:	449e      	add	lr, r3
 801f93a:	ea4f 035e 	mov.w	r3, lr, lsr #1
 801f93e:	f01e 0f01 	tst.w	lr, #1
 801f942:	5cd4      	ldrb	r4, [r2, r3]
 801f944:	bf0c      	ite	eq
 801f946:	f004 040f 	andeq.w	r4, r4, #15
 801f94a:	1124      	asrne	r4, r4, #4
 801f94c:	eb04 1404 	add.w	r4, r4, r4, lsl #4
 801f950:	b2e3      	uxtb	r3, r4
 801f952:	b282      	uxth	r2, r0
 801f954:	fa1f fc8c 	uxth.w	ip, ip
 801f958:	fb02 f40c 	mul.w	r4, r2, ip
 801f95c:	0112      	lsls	r2, r2, #4
 801f95e:	ebc4 1c0c 	rsb	ip, r4, ip, lsl #4
 801f962:	fa1f f08c 	uxth.w	r0, ip
 801f966:	f5c2 7c80 	rsb	ip, r2, #256	@ 0x100
 801f96a:	1b12      	subs	r2, r2, r4
 801f96c:	ebac 0c00 	sub.w	ip, ip, r0
 801f970:	b292      	uxth	r2, r2
 801f972:	fa1f fc8c 	uxth.w	ip, ip
 801f976:	4372      	muls	r2, r6
 801f978:	fb07 220c 	mla	r2, r7, ip, r2
 801f97c:	fb00 2005 	mla	r0, r0, r5, r2
 801f980:	fb04 0303 	mla	r3, r4, r3, r0
 801f984:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801f988:	b353      	cbz	r3, 801f9e0 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x180>
 801f98a:	4a1e      	ldr	r2, [pc, #120]	@ (801fa04 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x1a4>)
 801f98c:	7808      	ldrb	r0, [r1, #0]
 801f98e:	6814      	ldr	r4, [r2, #0]
 801f990:	b29a      	uxth	r2, r3
 801f992:	43db      	mvns	r3, r3
 801f994:	b2e5      	uxtb	r5, r4
 801f996:	b2db      	uxtb	r3, r3
 801f998:	fb15 f502 	smulbb	r5, r5, r2
 801f99c:	fb00 5003 	mla	r0, r0, r3, r5
 801f9a0:	b280      	uxth	r0, r0
 801f9a2:	1c45      	adds	r5, r0, #1
 801f9a4:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f9a8:	784d      	ldrb	r5, [r1, #1]
 801f9aa:	fb15 f503 	smulbb	r5, r5, r3
 801f9ae:	1200      	asrs	r0, r0, #8
 801f9b0:	7008      	strb	r0, [r1, #0]
 801f9b2:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801f9b6:	f3c4 4407 	ubfx	r4, r4, #16, #8
 801f9ba:	fb00 5002 	mla	r0, r0, r2, r5
 801f9be:	b280      	uxth	r0, r0
 801f9c0:	1c45      	adds	r5, r0, #1
 801f9c2:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 801f9c6:	1200      	asrs	r0, r0, #8
 801f9c8:	7048      	strb	r0, [r1, #1]
 801f9ca:	7888      	ldrb	r0, [r1, #2]
 801f9cc:	fb10 f303 	smulbb	r3, r0, r3
 801f9d0:	fb04 3202 	mla	r2, r4, r2, r3
 801f9d4:	b292      	uxth	r2, r2
 801f9d6:	1c53      	adds	r3, r2, #1
 801f9d8:	eb03 2212 	add.w	r2, r3, r2, lsr #8
 801f9dc:	1212      	asrs	r2, r2, #8
 801f9de:	708a      	strb	r2, [r1, #2]
 801f9e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801f9e4:	2700      	movs	r7, #0
 801f9e6:	e761      	b.n	801f8ac <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x4c>
 801f9e8:	2600      	movs	r6, #0
 801f9ea:	e77d      	b.n	801f8e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801f9ec:	4606      	mov	r6, r0
 801f9ee:	e77b      	b.n	801f8e8 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0x88>
 801f9f0:	2500      	movs	r5, #0
 801f9f2:	e795      	b.n	801f920 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xc0>
 801f9f4:	4663      	mov	r3, ip
 801f9f6:	4665      	mov	r5, ip
 801f9f8:	e7ab      	b.n	801f952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801f9fa:	2300      	movs	r3, #0
 801f9fc:	e7a9      	b.n	801f952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801f9fe:	4603      	mov	r3, r0
 801fa00:	e7a7      	b.n	801f952 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh+0xf2>
 801fa02:	bf00      	nop
 801fa04:	240253b8 	.word	0x240253b8

0801fa08 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff>:
 801fa08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801fa0c:	b093      	sub	sp, #76	@ 0x4c
 801fa0e:	461c      	mov	r4, r3
 801fa10:	920c      	str	r2, [sp, #48]	@ 0x30
 801fa12:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801fa14:	9011      	str	r0, [sp, #68]	@ 0x44
 801fa16:	9107      	str	r1, [sp, #28]
 801fa18:	6850      	ldr	r0, [r2, #4]
 801fa1a:	6812      	ldr	r2, [r2, #0]
 801fa1c:	e9dd 1322 	ldrd	r1, r3, [sp, #136]	@ 0x88
 801fa20:	e9dd 561d 	ldrd	r5, r6, [sp, #116]	@ 0x74
 801fa24:	fb00 1303 	mla	r3, r0, r3, r1
 801fa28:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801fa2c:	eb02 0b03 	add.w	fp, r2, r3
 801fa30:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa32:	689b      	ldr	r3, [r3, #8]
 801fa34:	3301      	adds	r3, #1
 801fa36:	f023 0301 	bic.w	r3, r3, #1
 801fa3a:	9309      	str	r3, [sp, #36]	@ 0x24
 801fa3c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa3e:	f8d3 8000 	ldr.w	r8, [r3]
 801fa42:	9b07      	ldr	r3, [sp, #28]
 801fa44:	2b00      	cmp	r3, #0
 801fa46:	dc03      	bgt.n	801fa50 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x48>
 801fa48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801fa4a:	2b00      	cmp	r3, #0
 801fa4c:	f340 822b 	ble.w	801fea6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fa50:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fa52:	f9b3 1008 	ldrsh.w	r1, [r3, #8]
 801fa56:	f9b3 200c 	ldrsh.w	r2, [r3, #12]
 801fa5a:	1e48      	subs	r0, r1, #1
 801fa5c:	1e57      	subs	r7, r2, #1
 801fa5e:	2c00      	cmp	r4, #0
 801fa60:	f340 80d7 	ble.w	801fc12 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20a>
 801fa64:	ea5f 4c25 	movs.w	ip, r5, asr #16
 801fa68:	ea4f 4326 	mov.w	r3, r6, asr #16
 801fa6c:	d406      	bmi.n	801fa7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa6e:	4584      	cmp	ip, r0
 801fa70:	da04      	bge.n	801fa7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa72:	2b00      	cmp	r3, #0
 801fa74:	db02      	blt.n	801fa7c <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x74>
 801fa76:	42bb      	cmp	r3, r7
 801fa78:	f2c0 80cc 	blt.w	801fc14 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x20c>
 801fa7c:	f11c 0c01 	adds.w	ip, ip, #1
 801fa80:	f100 80bf 	bmi.w	801fc02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fa84:	4561      	cmp	r1, ip
 801fa86:	f2c0 80bc 	blt.w	801fc02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fa8a:	3301      	adds	r3, #1
 801fa8c:	f100 80b9 	bmi.w	801fc02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fa90:	429a      	cmp	r2, r3
 801fa92:	f2c0 80b6 	blt.w	801fc02 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1fa>
 801fa96:	46a2      	mov	sl, r4
 801fa98:	465f      	mov	r7, fp
 801fa9a:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fa9e:	f1ba 0f00 	cmp.w	sl, #0
 801faa2:	f340 80d4 	ble.w	801fc4e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x246>
 801faa6:	f3c5 3303 	ubfx	r3, r5, #12, #4
 801faaa:	1430      	asrs	r0, r6, #16
 801faac:	f3c6 3103 	ubfx	r1, r6, #12, #4
 801fab0:	9308      	str	r3, [sp, #32]
 801fab2:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801fab4:	e9d3 ce02 	ldrd	ip, lr, [r3, #8]
 801fab8:	142b      	asrs	r3, r5, #16
 801faba:	f100 8124 	bmi.w	801fd06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fabe:	f10c 32ff 	add.w	r2, ip, #4294967295
 801fac2:	4293      	cmp	r3, r2
 801fac4:	f280 811f 	bge.w	801fd06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fac8:	2800      	cmp	r0, #0
 801faca:	f2c0 811c 	blt.w	801fd06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801face:	f10e 32ff 	add.w	r2, lr, #4294967295
 801fad2:	4290      	cmp	r0, r2
 801fad4:	f280 8117 	bge.w	801fd06 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2fe>
 801fad8:	fb00 3309 	mla	r3, r0, r9, r3
 801fadc:	0858      	lsrs	r0, r3, #1
 801fade:	07da      	lsls	r2, r3, #31
 801fae0:	9a08      	ldr	r2, [sp, #32]
 801fae2:	f818 c000 	ldrb.w	ip, [r8, r0]
 801fae6:	bf54      	ite	pl
 801fae8:	f00c 0c0f 	andpl.w	ip, ip, #15
 801faec:	ea4f 1c2c 	movmi.w	ip, ip, asr #4
 801faf0:	eb0c 1c0c 	add.w	ip, ip, ip, lsl #4
 801faf4:	fa5f fc8c 	uxtb.w	ip, ip
 801faf8:	2a00      	cmp	r2, #0
 801fafa:	f000 80ed 	beq.w	801fcd8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2d0>
 801fafe:	1c58      	adds	r0, r3, #1
 801fb00:	ea4f 0e50 	mov.w	lr, r0, lsr #1
 801fb04:	07c0      	lsls	r0, r0, #31
 801fb06:	f818 e00e 	ldrb.w	lr, [r8, lr]
 801fb0a:	bf54      	ite	pl
 801fb0c:	f00e 0e0f 	andpl.w	lr, lr, #15
 801fb10:	ea4f 1e2e 	movmi.w	lr, lr, asr #4
 801fb14:	eb0e 1e0e 	add.w	lr, lr, lr, lsl #4
 801fb18:	fa5f fe8e 	uxtb.w	lr, lr
 801fb1c:	f8cd e034 	str.w	lr, [sp, #52]	@ 0x34
 801fb20:	b1c9      	cbz	r1, 801fb56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fb22:	444b      	add	r3, r9
 801fb24:	0858      	lsrs	r0, r3, #1
 801fb26:	07da      	lsls	r2, r3, #31
 801fb28:	f818 0000 	ldrb.w	r0, [r8, r0]
 801fb2c:	bf54      	ite	pl
 801fb2e:	f000 000f 	andpl.w	r0, r0, #15
 801fb32:	1100      	asrmi	r0, r0, #4
 801fb34:	eb00 1000 	add.w	r0, r0, r0, lsl #4
 801fb38:	b2c0      	uxtb	r0, r0
 801fb3a:	900a      	str	r0, [sp, #40]	@ 0x28
 801fb3c:	1c58      	adds	r0, r3, #1
 801fb3e:	0843      	lsrs	r3, r0, #1
 801fb40:	07c2      	lsls	r2, r0, #31
 801fb42:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fb46:	bf54      	ite	pl
 801fb48:	f003 030f 	andpl.w	r3, r3, #15
 801fb4c:	111b      	asrmi	r3, r3, #4
 801fb4e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fb52:	b2db      	uxtb	r3, r3
 801fb54:	930e      	str	r3, [sp, #56]	@ 0x38
 801fb56:	f8bd 2020 	ldrh.w	r2, [sp, #32]
 801fb5a:	b289      	uxth	r1, r1
 801fb5c:	fb02 f301 	mul.w	r3, r2, r1
 801fb60:	0112      	lsls	r2, r2, #4
 801fb62:	ebc3 1101 	rsb	r1, r3, r1, lsl #4
 801fb66:	f5c2 7080 	rsb	r0, r2, #256	@ 0x100
 801fb6a:	1ad2      	subs	r2, r2, r3
 801fb6c:	b289      	uxth	r1, r1
 801fb6e:	b292      	uxth	r2, r2
 801fb70:	1a40      	subs	r0, r0, r1
 801fb72:	fa1f fe80 	uxth.w	lr, r0
 801fb76:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801fb78:	4342      	muls	r2, r0
 801fb7a:	fb0c 2c0e 	mla	ip, ip, lr, r2
 801fb7e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801fb80:	fb01 c102 	mla	r1, r1, r2, ip
 801fb84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801fb86:	fb03 1302 	mla	r3, r3, r2, r1
 801fb8a:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fb8e:	b383      	cbz	r3, 801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fb90:	4ac6      	ldr	r2, [pc, #792]	@ (801feac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801fb92:	2bff      	cmp	r3, #255	@ 0xff
 801fb94:	6812      	ldr	r2, [r2, #0]
 801fb96:	f3c2 4e07 	ubfx	lr, r2, #16, #8
 801fb9a:	f3c2 2007 	ubfx	r0, r2, #8, #8
 801fb9e:	b2d2      	uxtb	r2, r2
 801fba0:	f000 80ac 	beq.w	801fcfc <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x2f4>
 801fba4:	b299      	uxth	r1, r3
 801fba6:	43db      	mvns	r3, r3
 801fba8:	f897 c000 	ldrb.w	ip, [r7]
 801fbac:	fb12 f201 	smulbb	r2, r2, r1
 801fbb0:	b2db      	uxtb	r3, r3
 801fbb2:	fb10 f001 	smulbb	r0, r0, r1
 801fbb6:	fb0c 2203 	mla	r2, ip, r3, r2
 801fbba:	fb1e f101 	smulbb	r1, lr, r1
 801fbbe:	b292      	uxth	r2, r2
 801fbc0:	f102 0c01 	add.w	ip, r2, #1
 801fbc4:	eb0c 2212 	add.w	r2, ip, r2, lsr #8
 801fbc8:	1212      	asrs	r2, r2, #8
 801fbca:	703a      	strb	r2, [r7, #0]
 801fbcc:	787a      	ldrb	r2, [r7, #1]
 801fbce:	fb02 0003 	mla	r0, r2, r3, r0
 801fbd2:	b280      	uxth	r0, r0
 801fbd4:	1c42      	adds	r2, r0, #1
 801fbd6:	eb02 2010 	add.w	r0, r2, r0, lsr #8
 801fbda:	78ba      	ldrb	r2, [r7, #2]
 801fbdc:	fb02 1303 	mla	r3, r2, r3, r1
 801fbe0:	1200      	asrs	r0, r0, #8
 801fbe2:	b29b      	uxth	r3, r3
 801fbe4:	7078      	strb	r0, [r7, #1]
 801fbe6:	f103 0e01 	add.w	lr, r3, #1
 801fbea:	eb0e 2313 	add.w	r3, lr, r3, lsr #8
 801fbee:	121b      	asrs	r3, r3, #8
 801fbf0:	70bb      	strb	r3, [r7, #2]
 801fbf2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fbf4:	3703      	adds	r7, #3
 801fbf6:	f10a 3aff 	add.w	sl, sl, #4294967295
 801fbfa:	441d      	add	r5, r3
 801fbfc:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fbfe:	441e      	add	r6, r3
 801fc00:	e74d      	b.n	801fa9e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x96>
 801fc02:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fc04:	3c01      	subs	r4, #1
 801fc06:	f10b 0b03 	add.w	fp, fp, #3
 801fc0a:	441d      	add	r5, r3
 801fc0c:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fc0e:	441e      	add	r6, r3
 801fc10:	e725      	b.n	801fa5e <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x56>
 801fc12:	d021      	beq.n	801fc58 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x250>
 801fc14:	1e63      	subs	r3, r4, #1
 801fc16:	981f      	ldr	r0, [sp, #124]	@ 0x7c
 801fc18:	fb00 5003 	mla	r0, r0, r3, r5
 801fc1c:	1400      	asrs	r0, r0, #16
 801fc1e:	f53f af3a 	bmi.w	801fa96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fc22:	3901      	subs	r1, #1
 801fc24:	4288      	cmp	r0, r1
 801fc26:	f6bf af36 	bge.w	801fa96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fc2a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 801fc2c:	fb01 6303 	mla	r3, r1, r3, r6
 801fc30:	141b      	asrs	r3, r3, #16
 801fc32:	f53f af30 	bmi.w	801fa96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fc36:	3a01      	subs	r2, #1
 801fc38:	4293      	cmp	r3, r2
 801fc3a:	f6bf af2c 	bge.w	801fa96 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x8e>
 801fc3e:	f10b 0c03 	add.w	ip, fp, #3
 801fc42:	46a6      	mov	lr, r4
 801fc44:	f9bd 9024 	ldrsh.w	r9, [sp, #36]	@ 0x24
 801fc48:	f1be 0f00 	cmp.w	lr, #0
 801fc4c:	dc79      	bgt.n	801fd42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x33a>
 801fc4e:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
 801fc52:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801fc56:	44a3      	add	fp, r4
 801fc58:	9b07      	ldr	r3, [sp, #28]
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	f340 8123 	ble.w	801fea6 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x49e>
 801fc60:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801fc64:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fc66:	ee30 0a04 	vadd.f32	s0, s0, s8
 801fc6a:	ee70 0aa4 	vadd.f32	s1, s1, s9
 801fc6e:	eef0 6a62 	vmov.f32	s13, s5
 801fc72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801fc76:	ee31 1a05 	vadd.f32	s2, s2, s10
 801fc7a:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc7e:	ee16 5a90 	vmov	r5, s13
 801fc82:	eef0 6a43 	vmov.f32	s13, s6
 801fc86:	eefe 6ac8 	vcvt.s32.f32	s13, s13, #16
 801fc8a:	ee16 6a90 	vmov	r6, s13
 801fc8e:	ee20 7aa7 	vmul.f32	s14, s1, s15
 801fc92:	ee61 7a27 	vmul.f32	s15, s2, s15
 801fc96:	ee77 2a62 	vsub.f32	s5, s14, s5
 801fc9a:	ee37 3ac3 	vsub.f32	s6, s15, s6
 801fc9e:	eefe 2ac8 	vcvt.s32.f32	s5, s5, #16
 801fca2:	eebe 3ac8 	vcvt.s32.f32	s6, s6, #16
 801fca6:	ee12 2a90 	vmov	r2, s5
 801fcaa:	eef0 2a47 	vmov.f32	s5, s14
 801fcae:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcb2:	ee13 2a10 	vmov	r2, s6
 801fcb6:	931f      	str	r3, [sp, #124]	@ 0x7c
 801fcb8:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fcba:	eeb0 3a67 	vmov.f32	s6, s15
 801fcbe:	fb92 f3f3 	sdiv	r3, r2, r3
 801fcc2:	9320      	str	r3, [sp, #128]	@ 0x80
 801fcc4:	9b07      	ldr	r3, [sp, #28]
 801fcc6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801fcc8:	3b01      	subs	r3, #1
 801fcca:	9307      	str	r3, [sp, #28]
 801fccc:	bf08      	it	eq
 801fcce:	4614      	moveq	r4, r2
 801fcd0:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 801fcd2:	bf18      	it	ne
 801fcd4:	461c      	movne	r4, r3
 801fcd6:	e6b4      	b.n	801fa42 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3a>
 801fcd8:	2900      	cmp	r1, #0
 801fcda:	f43f af3c 	beq.w	801fb56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fcde:	eb09 0003 	add.w	r0, r9, r3
 801fce2:	0843      	lsrs	r3, r0, #1
 801fce4:	07c0      	lsls	r0, r0, #31
 801fce6:	f818 3003 	ldrb.w	r3, [r8, r3]
 801fcea:	bf54      	ite	pl
 801fcec:	f003 030f 	andpl.w	r3, r3, #15
 801fcf0:	111b      	asrmi	r3, r3, #4
 801fcf2:	eb03 1303 	add.w	r3, r3, r3, lsl #4
 801fcf6:	b2db      	uxtb	r3, r3
 801fcf8:	930a      	str	r3, [sp, #40]	@ 0x28
 801fcfa:	e72c      	b.n	801fb56 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x14e>
 801fcfc:	703a      	strb	r2, [r7, #0]
 801fcfe:	7078      	strb	r0, [r7, #1]
 801fd00:	f887 e002 	strb.w	lr, [r7, #2]
 801fd04:	e775      	b.n	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd06:	1c5a      	adds	r2, r3, #1
 801fd08:	f53f af73 	bmi.w	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd0c:	4594      	cmp	ip, r2
 801fd0e:	f6ff af70 	blt.w	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd12:	1c42      	adds	r2, r0, #1
 801fd14:	f53f af6d 	bmi.w	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd18:	4596      	cmp	lr, r2
 801fd1a:	f6ff af6a 	blt.w	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd1e:	9302      	str	r3, [sp, #8]
 801fd20:	fa0f f38e 	sxth.w	r3, lr
 801fd24:	9a08      	ldr	r2, [sp, #32]
 801fd26:	9301      	str	r3, [sp, #4]
 801fd28:	fa0f f38c 	sxth.w	r3, ip
 801fd2c:	9105      	str	r1, [sp, #20]
 801fd2e:	4639      	mov	r1, r7
 801fd30:	9300      	str	r3, [sp, #0]
 801fd32:	464b      	mov	r3, r9
 801fd34:	e9cd 0203 	strd	r0, r2, [sp, #12]
 801fd38:	4642      	mov	r2, r8
 801fd3a:	9811      	ldr	r0, [sp, #68]	@ 0x44
 801fd3c:	f7ff fd90 	bl	801f860 <_ZNK8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA16writePixelOnEdgeEPhPKtsssiihh>
 801fd40:	e757      	b.n	801fbf2 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x1ea>
 801fd42:	142a      	asrs	r2, r5, #16
 801fd44:	f3c5 3003 	ubfx	r0, r5, #12, #4
 801fd48:	1433      	asrs	r3, r6, #16
 801fd4a:	f3c6 3703 	ubfx	r7, r6, #12, #4
 801fd4e:	fb09 2303 	mla	r3, r9, r3, r2
 801fd52:	085a      	lsrs	r2, r3, #1
 801fd54:	07d9      	lsls	r1, r3, #31
 801fd56:	f818 2002 	ldrb.w	r2, [r8, r2]
 801fd5a:	bf54      	ite	pl
 801fd5c:	f002 020f 	andpl.w	r2, r2, #15
 801fd60:	1112      	asrmi	r2, r2, #4
 801fd62:	eb02 1202 	add.w	r2, r2, r2, lsl #4
 801fd66:	b2d2      	uxtb	r2, r2
 801fd68:	2800      	cmp	r0, #0
 801fd6a:	f000 8085 	beq.w	801fe78 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x470>
 801fd6e:	f103 0a01 	add.w	sl, r3, #1
 801fd72:	ea4f 015a 	mov.w	r1, sl, lsr #1
 801fd76:	f01a 0f01 	tst.w	sl, #1
 801fd7a:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fd7e:	bf0c      	ite	eq
 801fd80:	f001 010f 	andeq.w	r1, r1, #15
 801fd84:	1109      	asrne	r1, r1, #4
 801fd86:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fd8a:	b2c9      	uxtb	r1, r1
 801fd8c:	910f      	str	r1, [sp, #60]	@ 0x3c
 801fd8e:	b1df      	cbz	r7, 801fdc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801fd90:	444b      	add	r3, r9
 801fd92:	0859      	lsrs	r1, r3, #1
 801fd94:	f013 0f01 	tst.w	r3, #1
 801fd98:	f103 0301 	add.w	r3, r3, #1
 801fd9c:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fda0:	bf0c      	ite	eq
 801fda2:	f001 010f 	andeq.w	r1, r1, #15
 801fda6:	1109      	asrne	r1, r1, #4
 801fda8:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fdac:	b2c9      	uxtb	r1, r1
 801fdae:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fdb0:	0859      	lsrs	r1, r3, #1
 801fdb2:	07db      	lsls	r3, r3, #31
 801fdb4:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fdb8:	bf54      	ite	pl
 801fdba:	f001 010f 	andpl.w	r1, r1, #15
 801fdbe:	1109      	asrmi	r1, r1, #4
 801fdc0:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fdc4:	b2c9      	uxtb	r1, r1
 801fdc6:	9110      	str	r1, [sp, #64]	@ 0x40
 801fdc8:	b280      	uxth	r0, r0
 801fdca:	b2bf      	uxth	r7, r7
 801fdcc:	fb00 f307 	mul.w	r3, r0, r7
 801fdd0:	0100      	lsls	r0, r0, #4
 801fdd2:	ebc3 1707 	rsb	r7, r3, r7, lsl #4
 801fdd6:	f5c0 7180 	rsb	r1, r0, #256	@ 0x100
 801fdda:	1ac0      	subs	r0, r0, r3
 801fddc:	b2bf      	uxth	r7, r7
 801fdde:	b280      	uxth	r0, r0
 801fde0:	1bc9      	subs	r1, r1, r7
 801fde2:	fa1f fa81 	uxth.w	sl, r1
 801fde6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801fde8:	4348      	muls	r0, r1
 801fdea:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801fdec:	fb02 020a 	mla	r2, r2, sl, r0
 801fdf0:	fb07 2701 	mla	r7, r7, r1, r2
 801fdf4:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801fdf6:	fb03 7302 	mla	r3, r3, r2, r7
 801fdfa:	f3c3 2307 	ubfx	r3, r3, #8, #8
 801fdfe:	b393      	cbz	r3, 801fe66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801fe00:	4a2a      	ldr	r2, [pc, #168]	@ (801feac <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x4a4>)
 801fe02:	2bff      	cmp	r3, #255	@ 0xff
 801fe04:	6811      	ldr	r1, [r2, #0]
 801fe06:	f3c1 4a07 	ubfx	sl, r1, #16, #8
 801fe0a:	f3c1 2707 	ubfx	r7, r1, #8, #8
 801fe0e:	b2c9      	uxtb	r1, r1
 801fe10:	d042      	beq.n	801fe98 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x490>
 801fe12:	b298      	uxth	r0, r3
 801fe14:	43db      	mvns	r3, r3
 801fe16:	f81c 2c03 	ldrb.w	r2, [ip, #-3]
 801fe1a:	fb11 f100 	smulbb	r1, r1, r0
 801fe1e:	b2db      	uxtb	r3, r3
 801fe20:	fb17 f700 	smulbb	r7, r7, r0
 801fe24:	fb02 1103 	mla	r1, r2, r3, r1
 801fe28:	fb1a f000 	smulbb	r0, sl, r0
 801fe2c:	b289      	uxth	r1, r1
 801fe2e:	1c4a      	adds	r2, r1, #1
 801fe30:	eb02 2111 	add.w	r1, r2, r1, lsr #8
 801fe34:	f81c 2c02 	ldrb.w	r2, [ip, #-2]
 801fe38:	fb02 7703 	mla	r7, r2, r3, r7
 801fe3c:	1209      	asrs	r1, r1, #8
 801fe3e:	b2bf      	uxth	r7, r7
 801fe40:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801fe44:	1c7a      	adds	r2, r7, #1
 801fe46:	eb02 2717 	add.w	r7, r2, r7, lsr #8
 801fe4a:	f81c 2c01 	ldrb.w	r2, [ip, #-1]
 801fe4e:	fb02 0303 	mla	r3, r2, r3, r0
 801fe52:	123f      	asrs	r7, r7, #8
 801fe54:	b29b      	uxth	r3, r3
 801fe56:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801fe5a:	1c5a      	adds	r2, r3, #1
 801fe5c:	eb02 2313 	add.w	r3, r2, r3, lsr #8
 801fe60:	121b      	asrs	r3, r3, #8
 801fe62:	f80c 3c01 	strb.w	r3, [ip, #-1]
 801fe66:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801fe68:	f10c 0c03 	add.w	ip, ip, #3
 801fe6c:	f10e 3eff 	add.w	lr, lr, #4294967295
 801fe70:	441d      	add	r5, r3
 801fe72:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801fe74:	441e      	add	r6, r3
 801fe76:	e6e7      	b.n	801fc48 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x240>
 801fe78:	2f00      	cmp	r7, #0
 801fe7a:	d0a5      	beq.n	801fdc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801fe7c:	444b      	add	r3, r9
 801fe7e:	0859      	lsrs	r1, r3, #1
 801fe80:	07db      	lsls	r3, r3, #31
 801fe82:	f818 1001 	ldrb.w	r1, [r8, r1]
 801fe86:	bf54      	ite	pl
 801fe88:	f001 010f 	andpl.w	r1, r1, #15
 801fe8c:	1109      	asrmi	r1, r1, #4
 801fe8e:	eb01 1101 	add.w	r1, r1, r1, lsl #4
 801fe92:	b2c9      	uxtb	r1, r1
 801fe94:	910b      	str	r1, [sp, #44]	@ 0x2c
 801fe96:	e797      	b.n	801fdc8 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x3c0>
 801fe98:	f80c 1c03 	strb.w	r1, [ip, #-3]
 801fe9c:	f80c 7c02 	strb.w	r7, [ip, #-2]
 801fea0:	f80c ac01 	strb.w	sl, [ip, #-1]
 801fea4:	e7df      	b.n	801fe66 <_ZN8touchgfx8LCD24bpp43TextureMapper_A4_BilinearInterpolation_NoGA34drawTextureMapScanLineSubdivisionsEiiiifffllllfffffRKNS_14DrawingSurfaceEiiRKNS_14TextureSurfaceEhfff+0x45e>
 801fea6:	b013      	add	sp, #76	@ 0x4c
 801fea8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801feac:	240253b8 	.word	0x240253b8

0801feb0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>:
 801feb0:	b530      	push	{r4, r5, lr}
 801feb2:	b29d      	uxth	r5, r3
 801feb4:	f1c3 03ff 	rsb	r3, r3, #255	@ 0xff
 801feb8:	780c      	ldrb	r4, [r1, #0]
 801feba:	b298      	uxth	r0, r3
 801febc:	7813      	ldrb	r3, [r2, #0]
 801febe:	fb14 f405 	smulbb	r4, r4, r5
 801fec2:	fb13 f300 	smulbb	r3, r3, r0
 801fec6:	441c      	add	r4, r3
 801fec8:	b2a4      	uxth	r4, r4
 801feca:	1c63      	adds	r3, r4, #1
 801fecc:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801fed0:	7853      	ldrb	r3, [r2, #1]
 801fed2:	fb13 f300 	smulbb	r3, r3, r0
 801fed6:	1224      	asrs	r4, r4, #8
 801fed8:	7014      	strb	r4, [r2, #0]
 801feda:	784c      	ldrb	r4, [r1, #1]
 801fedc:	fb14 f405 	smulbb	r4, r4, r5
 801fee0:	441c      	add	r4, r3
 801fee2:	b2a4      	uxth	r4, r4
 801fee4:	1c63      	adds	r3, r4, #1
 801fee6:	eb03 2414 	add.w	r4, r3, r4, lsr #8
 801feea:	1224      	asrs	r4, r4, #8
 801feec:	7054      	strb	r4, [r2, #1]
 801feee:	788b      	ldrb	r3, [r1, #2]
 801fef0:	7891      	ldrb	r1, [r2, #2]
 801fef2:	fb13 f305 	smulbb	r3, r3, r5
 801fef6:	fb11 f000 	smulbb	r0, r1, r0
 801fefa:	4403      	add	r3, r0
 801fefc:	b29b      	uxth	r3, r3
 801fefe:	1c59      	adds	r1, r3, #1
 801ff00:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 801ff04:	121b      	asrs	r3, r3, #8
 801ff06:	7093      	strb	r3, [r2, #2]
 801ff08:	bd30      	pop	{r4, r5, pc}
	...

0801ff0c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h>:
 801ff0c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ff10:	461c      	mov	r4, r3
 801ff12:	b08b      	sub	sp, #44	@ 0x2c
 801ff14:	460e      	mov	r6, r1
 801ff16:	4615      	mov	r5, r2
 801ff18:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801ff1a:	4682      	mov	sl, r0
 801ff1c:	6861      	ldr	r1, [r4, #4]
 801ff1e:	aa06      	add	r2, sp, #24
 801ff20:	6820      	ldr	r0, [r4, #0]
 801ff22:	2702      	movs	r7, #2
 801ff24:	f89d 9054 	ldrb.w	r9, [sp, #84]	@ 0x54
 801ff28:	3504      	adds	r5, #4
 801ff2a:	c203      	stmia	r2!, {r0, r1}
 801ff2c:	6818      	ldr	r0, [r3, #0]
 801ff2e:	aa08      	add	r2, sp, #32
 801ff30:	6859      	ldr	r1, [r3, #4]
 801ff32:	c203      	stmia	r2!, {r0, r1}
 801ff34:	a806      	add	r0, sp, #24
 801ff36:	f7f3 f90b 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 801ff3a:	4621      	mov	r1, r4
 801ff3c:	a808      	add	r0, sp, #32
 801ff3e:	f7f3 f92f 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 801ff42:	f9bd 2020 	ldrsh.w	r2, [sp, #32]
 801ff46:	f9bd b026 	ldrsh.w	fp, [sp, #38]	@ 0x26
 801ff4a:	f002 0301 	and.w	r3, r2, #1
 801ff4e:	f9bd 8024 	ldrsh.w	r8, [sp, #36]	@ 0x24
 801ff52:	9302      	str	r3, [sp, #8]
 801ff54:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 801ff58:	f003 0101 	and.w	r1, r3, #1
 801ff5c:	9101      	str	r1, [sp, #4]
 801ff5e:	9801      	ldr	r0, [sp, #4]
 801ff60:	f9bd 1022 	ldrsh.w	r1, [sp, #34]	@ 0x22
 801ff64:	4403      	add	r3, r0
 801ff66:	fb01 2303 	mla	r3, r1, r3, r2
 801ff6a:	fb93 f3f7 	sdiv	r3, r3, r7
 801ff6e:	441e      	add	r6, r3
 801ff70:	f8bd 3018 	ldrh.w	r3, [sp, #24]
 801ff74:	441a      	add	r2, r3
 801ff76:	f8bd 301a 	ldrh.w	r3, [sp, #26]
 801ff7a:	4419      	add	r1, r3
 801ff7c:	4b70      	ldr	r3, [pc, #448]	@ (8020140 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 801ff7e:	f8ad 2020 	strh.w	r2, [sp, #32]
 801ff82:	6818      	ldr	r0, [r3, #0]
 801ff84:	f8ad 1022 	strh.w	r1, [sp, #34]	@ 0x22
 801ff88:	6803      	ldr	r3, [r0, #0]
 801ff8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ff8c:	4798      	blx	r3
 801ff8e:	4a6d      	ldr	r2, [pc, #436]	@ (8020144 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x238>)
 801ff90:	f9bd 1020 	ldrsh.w	r1, [sp, #32]
 801ff94:	f1b9 0fff 	cmp.w	r9, #255	@ 0xff
 801ff98:	8813      	ldrh	r3, [r2, #0]
 801ff9a:	f9bd 4022 	ldrsh.w	r4, [sp, #34]	@ 0x22
 801ff9e:	fb03 1404 	mla	r4, r3, r4, r1
 801ffa2:	4611      	mov	r1, r2
 801ffa4:	fb0b f303 	mul.w	r3, fp, r3
 801ffa8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 801ffac:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 801ffb0:	4404      	add	r4, r0
 801ffb2:	4423      	add	r3, r4
 801ffb4:	d073      	beq.n	802009e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x192>
 801ffb6:	9705      	str	r7, [sp, #20]
 801ffb8:	e9cd 3203 	strd	r3, r2, [sp, #12]
 801ffbc:	9b03      	ldr	r3, [sp, #12]
 801ffbe:	429c      	cmp	r4, r3
 801ffc0:	f080 80b5 	bcs.w	802012e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 801ffc4:	9b02      	ldr	r3, [sp, #8]
 801ffc6:	b35b      	cbz	r3, 8020020 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x114>
 801ffc8:	7831      	ldrb	r1, [r6, #0]
 801ffca:	4622      	mov	r2, r4
 801ffcc:	1c77      	adds	r7, r6, #1
 801ffce:	3403      	adds	r4, #3
 801ffd0:	f001 010f 	and.w	r1, r1, #15
 801ffd4:	f108 3bff 	add.w	fp, r8, #4294967295
 801ffd8:	464b      	mov	r3, r9
 801ffda:	4650      	mov	r0, sl
 801ffdc:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801ffe0:	4429      	add	r1, r5
 801ffe2:	f7ff ff65 	bl	801feb0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 801ffe6:	f1bb 0f01 	cmp.w	fp, #1
 801ffea:	dd1c      	ble.n	8020026 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x11a>
 801ffec:	7839      	ldrb	r1, [r7, #0]
 801ffee:	4622      	mov	r2, r4
 801fff0:	464b      	mov	r3, r9
 801fff2:	4650      	mov	r0, sl
 801fff4:	0909      	lsrs	r1, r1, #4
 801fff6:	f1ab 0b02 	sub.w	fp, fp, #2
 801fffa:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 801fffe:	4429      	add	r1, r5
 8020000:	f7ff ff56 	bl	801feb0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 8020004:	f817 1b01 	ldrb.w	r1, [r7], #1
 8020008:	1ce2      	adds	r2, r4, #3
 802000a:	464b      	mov	r3, r9
 802000c:	f001 010f 	and.w	r1, r1, #15
 8020010:	4650      	mov	r0, sl
 8020012:	3406      	adds	r4, #6
 8020014:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020018:	4429      	add	r1, r5
 802001a:	f7ff ff49 	bl	801feb0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802001e:	e7e2      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020020:	4637      	mov	r7, r6
 8020022:	46c3      	mov	fp, r8
 8020024:	e7df      	b.n	801ffe6 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xda>
 8020026:	d10a      	bne.n	802003e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x132>
 8020028:	7839      	ldrb	r1, [r7, #0]
 802002a:	4622      	mov	r2, r4
 802002c:	3403      	adds	r4, #3
 802002e:	464b      	mov	r3, r9
 8020030:	0909      	lsrs	r1, r1, #4
 8020032:	4650      	mov	r0, sl
 8020034:	eb01 0141 	add.w	r1, r1, r1, lsl #1
 8020038:	4429      	add	r1, r5
 802003a:	f7ff ff39 	bl	801feb0 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L416blendPixelRGB888EPKhPhi>
 802003e:	9b04      	ldr	r3, [sp, #16]
 8020040:	9a01      	ldr	r2, [sp, #4]
 8020042:	881b      	ldrh	r3, [r3, #0]
 8020044:	eba3 0308 	sub.w	r3, r3, r8
 8020048:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 802004c:	441c      	add	r4, r3
 802004e:	f9bd 301c 	ldrsh.w	r3, [sp, #28]
 8020052:	4413      	add	r3, r2
 8020054:	9a05      	ldr	r2, [sp, #20]
 8020056:	fb93 f3f2 	sdiv	r3, r3, r2
 802005a:	441e      	add	r6, r3
 802005c:	e7ae      	b.n	801ffbc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0xb0>
 802005e:	4632      	mov	r2, r6
 8020060:	46c4      	mov	ip, r8
 8020062:	e037      	b.n	80200d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 8020064:	d10e      	bne.n	8020084 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x178>
 8020066:	7812      	ldrb	r2, [r2, #0]
 8020068:	3003      	adds	r0, #3
 802006a:	0912      	lsrs	r2, r2, #4
 802006c:	eb02 0242 	add.w	r2, r2, r2, lsl #1
 8020070:	18ac      	adds	r4, r5, r2
 8020072:	5caa      	ldrb	r2, [r5, r2]
 8020074:	f800 2c03 	strb.w	r2, [r0, #-3]
 8020078:	7862      	ldrb	r2, [r4, #1]
 802007a:	f800 2c02 	strb.w	r2, [r0, #-2]
 802007e:	78a2      	ldrb	r2, [r4, #2]
 8020080:	f800 2c01 	strb.w	r2, [r0, #-1]
 8020084:	880c      	ldrh	r4, [r1, #0]
 8020086:	f9bd 201c 	ldrsh.w	r2, [sp, #28]
 802008a:	eba4 0408 	sub.w	r4, r4, r8
 802008e:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 8020092:	4404      	add	r4, r0
 8020094:	9801      	ldr	r0, [sp, #4]
 8020096:	4402      	add	r2, r0
 8020098:	fb92 f2f7 	sdiv	r2, r2, r7
 802009c:	4416      	add	r6, r2
 802009e:	429c      	cmp	r4, r3
 80200a0:	d245      	bcs.n	802012e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x222>
 80200a2:	9a02      	ldr	r2, [sp, #8]
 80200a4:	2a00      	cmp	r2, #0
 80200a6:	d0da      	beq.n	802005e <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x152>
 80200a8:	7830      	ldrb	r0, [r6, #0]
 80200aa:	1c72      	adds	r2, r6, #1
 80200ac:	3403      	adds	r4, #3
 80200ae:	f000 000f 	and.w	r0, r0, #15
 80200b2:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200b6:	eb05 0c00 	add.w	ip, r5, r0
 80200ba:	5c28      	ldrb	r0, [r5, r0]
 80200bc:	f804 0c03 	strb.w	r0, [r4, #-3]
 80200c0:	f89c 0001 	ldrb.w	r0, [ip, #1]
 80200c4:	f804 0c02 	strb.w	r0, [r4, #-2]
 80200c8:	f89c 0002 	ldrb.w	r0, [ip, #2]
 80200cc:	f108 3cff 	add.w	ip, r8, #4294967295
 80200d0:	f804 0c01 	strb.w	r0, [r4, #-1]
 80200d4:	f1bc 0f01 	cmp.w	ip, #1
 80200d8:	4620      	mov	r0, r4
 80200da:	f104 0406 	add.w	r4, r4, #6
 80200de:	ddc1      	ble.n	8020064 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x158>
 80200e0:	7810      	ldrb	r0, [r2, #0]
 80200e2:	f1ac 0c02 	sub.w	ip, ip, #2
 80200e6:	0900      	lsrs	r0, r0, #4
 80200e8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 80200ec:	eb05 0e00 	add.w	lr, r5, r0
 80200f0:	5c28      	ldrb	r0, [r5, r0]
 80200f2:	f804 0c06 	strb.w	r0, [r4, #-6]
 80200f6:	f89e 0001 	ldrb.w	r0, [lr, #1]
 80200fa:	f804 0c05 	strb.w	r0, [r4, #-5]
 80200fe:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020102:	f804 0c04 	strb.w	r0, [r4, #-4]
 8020106:	f812 0b01 	ldrb.w	r0, [r2], #1
 802010a:	f000 000f 	and.w	r0, r0, #15
 802010e:	eb00 0040 	add.w	r0, r0, r0, lsl #1
 8020112:	eb05 0e00 	add.w	lr, r5, r0
 8020116:	5c28      	ldrb	r0, [r5, r0]
 8020118:	f804 0c03 	strb.w	r0, [r4, #-3]
 802011c:	f89e 0001 	ldrb.w	r0, [lr, #1]
 8020120:	f804 0c02 	strb.w	r0, [r4, #-2]
 8020124:	f89e 0002 	ldrb.w	r0, [lr, #2]
 8020128:	f804 0c01 	strb.w	r0, [r4, #-1]
 802012c:	e7d2      	b.n	80200d4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x1c8>
 802012e:	4b04      	ldr	r3, [pc, #16]	@ (8020140 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L414blitCopyRGB888EPKhS3_RKNS_4RectES6_h+0x234>)
 8020130:	6818      	ldr	r0, [r3, #0]
 8020132:	6803      	ldr	r3, [r0, #0]
 8020134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020136:	4798      	blx	r3
 8020138:	b00b      	add	sp, #44	@ 0x2c
 802013a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802013e:	bf00      	nop
 8020140:	240253a8 	.word	0x240253a8
 8020144:	240253a2 	.word	0x240253a2

08020148 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>:
 8020148:	b530      	push	{r4, r5, lr}
 802014a:	f89d 000c 	ldrb.w	r0, [sp, #12]
 802014e:	780d      	ldrb	r5, [r1, #0]
 8020150:	28ff      	cmp	r0, #255	@ 0xff
 8020152:	d107      	bne.n	8020164 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020154:	2bff      	cmp	r3, #255	@ 0xff
 8020156:	d105      	bne.n	8020164 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x1c>
 8020158:	7015      	strb	r5, [r2, #0]
 802015a:	784b      	ldrb	r3, [r1, #1]
 802015c:	7053      	strb	r3, [r2, #1]
 802015e:	788b      	ldrb	r3, [r1, #2]
 8020160:	7093      	strb	r3, [r2, #2]
 8020162:	bd30      	pop	{r4, r5, pc}
 8020164:	fb10 f003 	smulbb	r0, r0, r3
 8020168:	b283      	uxth	r3, r0
 802016a:	1c58      	adds	r0, r3, #1
 802016c:	eb00 2013 	add.w	r0, r0, r3, lsr #8
 8020170:	f3c0 2007 	ubfx	r0, r0, #8, #8
 8020174:	b284      	uxth	r4, r0
 8020176:	43c0      	mvns	r0, r0
 8020178:	fb15 f504 	smulbb	r5, r5, r4
 802017c:	b2c3      	uxtb	r3, r0
 802017e:	7810      	ldrb	r0, [r2, #0]
 8020180:	fb00 5003 	mla	r0, r0, r3, r5
 8020184:	b280      	uxth	r0, r0
 8020186:	1c45      	adds	r5, r0, #1
 8020188:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 802018c:	7855      	ldrb	r5, [r2, #1]
 802018e:	fb15 f503 	smulbb	r5, r5, r3
 8020192:	1200      	asrs	r0, r0, #8
 8020194:	7010      	strb	r0, [r2, #0]
 8020196:	7848      	ldrb	r0, [r1, #1]
 8020198:	fb00 5004 	mla	r0, r0, r4, r5
 802019c:	b280      	uxth	r0, r0
 802019e:	1c45      	adds	r5, r0, #1
 80201a0:	eb05 2010 	add.w	r0, r5, r0, lsr #8
 80201a4:	1200      	asrs	r0, r0, #8
 80201a6:	7050      	strb	r0, [r2, #1]
 80201a8:	7888      	ldrb	r0, [r1, #2]
 80201aa:	7891      	ldrb	r1, [r2, #2]
 80201ac:	fb11 f303 	smulbb	r3, r1, r3
 80201b0:	fb00 3304 	mla	r3, r0, r4, r3
 80201b4:	b29b      	uxth	r3, r3
 80201b6:	1c59      	adds	r1, r3, #1
 80201b8:	eb01 2313 	add.w	r3, r1, r3, lsr #8
 80201bc:	121b      	asrs	r3, r3, #8
 80201be:	e7cf      	b.n	8020160 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih+0x18>

080201c0 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h>:
 80201c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80201c4:	461d      	mov	r5, r3
 80201c6:	b08f      	sub	sp, #60	@ 0x3c
 80201c8:	460c      	mov	r4, r1
 80201ca:	4616      	mov	r6, r2
 80201cc:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80201ce:	4680      	mov	r8, r0
 80201d0:	6869      	ldr	r1, [r5, #4]
 80201d2:	aa0a      	add	r2, sp, #40	@ 0x28
 80201d4:	6828      	ldr	r0, [r5, #0]
 80201d6:	3604      	adds	r6, #4
 80201d8:	f89d 9064 	ldrb.w	r9, [sp, #100]	@ 0x64
 80201dc:	4f57      	ldr	r7, [pc, #348]	@ (802033c <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x17c>)
 80201de:	c203      	stmia	r2!, {r0, r1}
 80201e0:	6818      	ldr	r0, [r3, #0]
 80201e2:	aa0c      	add	r2, sp, #48	@ 0x30
 80201e4:	6859      	ldr	r1, [r3, #4]
 80201e6:	c203      	stmia	r2!, {r0, r1}
 80201e8:	a80a      	add	r0, sp, #40	@ 0x28
 80201ea:	f7f2 ffb1 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80201ee:	4629      	mov	r1, r5
 80201f0:	a80c      	add	r0, sp, #48	@ 0x30
 80201f2:	2502      	movs	r5, #2
 80201f4:	f7f2 ffd4 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80201f8:	f9bd 2030 	ldrsh.w	r2, [sp, #48]	@ 0x30
 80201fc:	f9bd a036 	ldrsh.w	sl, [sp, #54]	@ 0x36
 8020200:	f002 0301 	and.w	r3, r2, #1
 8020204:	f9bd b034 	ldrsh.w	fp, [sp, #52]	@ 0x34
 8020208:	9304      	str	r3, [sp, #16]
 802020a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802020e:	f003 0101 	and.w	r1, r3, #1
 8020212:	9103      	str	r1, [sp, #12]
 8020214:	9803      	ldr	r0, [sp, #12]
 8020216:	f9bd 1032 	ldrsh.w	r1, [sp, #50]	@ 0x32
 802021a:	4403      	add	r3, r0
 802021c:	6838      	ldr	r0, [r7, #0]
 802021e:	fb01 2303 	mla	r3, r1, r3, r2
 8020222:	fb93 f3f5 	sdiv	r3, r3, r5
 8020226:	18e5      	adds	r5, r4, r3
 8020228:	f8bd 3028 	ldrh.w	r3, [sp, #40]	@ 0x28
 802022c:	441a      	add	r2, r3
 802022e:	f8bd 302a 	ldrh.w	r3, [sp, #42]	@ 0x2a
 8020232:	4419      	add	r1, r3
 8020234:	f8ad 2030 	strh.w	r2, [sp, #48]	@ 0x30
 8020238:	f8ad 1032 	strh.w	r1, [sp, #50]	@ 0x32
 802023c:	6803      	ldr	r3, [r0, #0]
 802023e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020240:	4798      	blx	r3
 8020242:	4a3f      	ldr	r2, [pc, #252]	@ (8020340 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x180>)
 8020244:	f9bd 4032 	ldrsh.w	r4, [sp, #50]	@ 0x32
 8020248:	8813      	ldrh	r3, [r2, #0]
 802024a:	f9bd 1030 	ldrsh.w	r1, [sp, #48]	@ 0x30
 802024e:	9207      	str	r2, [sp, #28]
 8020250:	fb03 1404 	mla	r4, r3, r4, r1
 8020254:	fb0a f303 	mul.w	r3, sl, r3
 8020258:	eb04 0444 	add.w	r4, r4, r4, lsl #1
 802025c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020260:	4404      	add	r4, r0
 8020262:	18e3      	adds	r3, r4, r3
 8020264:	e9cd 3705 	strd	r3, r7, [sp, #20]
 8020268:	9b05      	ldr	r3, [sp, #20]
 802026a:	429c      	cmp	r4, r3
 802026c:	d25d      	bcs.n	802032a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x16a>
 802026e:	9b04      	ldr	r3, [sp, #16]
 8020270:	2b00      	cmp	r3, #0
 8020272:	d037      	beq.n	80202e4 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x124>
 8020274:	782b      	ldrb	r3, [r5, #0]
 8020276:	1c6f      	adds	r7, r5, #1
 8020278:	f003 030f 	and.w	r3, r3, #15
 802027c:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8020280:	9309      	str	r3, [sp, #36]	@ 0x24
 8020282:	0e1b      	lsrs	r3, r3, #24
 8020284:	d006      	beq.n	8020294 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xd4>
 8020286:	9300      	str	r3, [sp, #0]
 8020288:	4622      	mov	r2, r4
 802028a:	464b      	mov	r3, r9
 802028c:	a909      	add	r1, sp, #36	@ 0x24
 802028e:	4640      	mov	r0, r8
 8020290:	f7ff ff5a 	bl	8020148 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020294:	3403      	adds	r4, #3
 8020296:	f10b 3aff 	add.w	sl, fp, #4294967295
 802029a:	f1ba 0f01 	cmp.w	sl, #1
 802029e:	dd24      	ble.n	80202ea <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x12a>
 80202a0:	783b      	ldrb	r3, [r7, #0]
 80202a2:	091b      	lsrs	r3, r3, #4
 80202a4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202a8:	9308      	str	r3, [sp, #32]
 80202aa:	0e1b      	lsrs	r3, r3, #24
 80202ac:	d006      	beq.n	80202bc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xfc>
 80202ae:	9300      	str	r3, [sp, #0]
 80202b0:	4622      	mov	r2, r4
 80202b2:	464b      	mov	r3, r9
 80202b4:	a908      	add	r1, sp, #32
 80202b6:	4640      	mov	r0, r8
 80202b8:	f7ff ff46 	bl	8020148 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80202bc:	f817 3b01 	ldrb.w	r3, [r7], #1
 80202c0:	f003 030f 	and.w	r3, r3, #15
 80202c4:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80202ca:	0e1b      	lsrs	r3, r3, #24
 80202cc:	d006      	beq.n	80202dc <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x11c>
 80202ce:	9300      	str	r3, [sp, #0]
 80202d0:	1ce2      	adds	r2, r4, #3
 80202d2:	464b      	mov	r3, r9
 80202d4:	a909      	add	r1, sp, #36	@ 0x24
 80202d6:	4640      	mov	r0, r8
 80202d8:	f7ff ff36 	bl	8020148 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 80202dc:	3406      	adds	r4, #6
 80202de:	f1aa 0a02 	sub.w	sl, sl, #2
 80202e2:	e7da      	b.n	802029a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80202e4:	462f      	mov	r7, r5
 80202e6:	46da      	mov	sl, fp
 80202e8:	e7d7      	b.n	802029a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xda>
 80202ea:	d10e      	bne.n	802030a <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x14a>
 80202ec:	783b      	ldrb	r3, [r7, #0]
 80202ee:	091b      	lsrs	r3, r3, #4
 80202f0:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 80202f4:	9309      	str	r3, [sp, #36]	@ 0x24
 80202f6:	0e1b      	lsrs	r3, r3, #24
 80202f8:	d006      	beq.n	8020308 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0x148>
 80202fa:	9300      	str	r3, [sp, #0]
 80202fc:	4622      	mov	r2, r4
 80202fe:	464b      	mov	r3, r9
 8020300:	a909      	add	r1, sp, #36	@ 0x24
 8020302:	4640      	mov	r0, r8
 8020304:	f7ff ff20 	bl	8020148 <_ZNK8touchgfx8LCD24bpp17DecompressorL8_L418blendPixelARGB8888EPKhPhih>
 8020308:	3403      	adds	r4, #3
 802030a:	9b07      	ldr	r3, [sp, #28]
 802030c:	9a03      	ldr	r2, [sp, #12]
 802030e:	881b      	ldrh	r3, [r3, #0]
 8020310:	eba3 030b 	sub.w	r3, r3, fp
 8020314:	eb03 0343 	add.w	r3, r3, r3, lsl #1
 8020318:	441c      	add	r4, r3
 802031a:	f9bd 302c 	ldrsh.w	r3, [sp, #44]	@ 0x2c
 802031e:	4413      	add	r3, r2
 8020320:	2202      	movs	r2, #2
 8020322:	fb93 f3f2 	sdiv	r3, r3, r2
 8020326:	441d      	add	r5, r3
 8020328:	e79e      	b.n	8020268 <_ZN8touchgfx8LCD24bpp17DecompressorL8_L416blitCopyARGB8888EPKhS3_RKNS_4RectES6_h+0xa8>
 802032a:	9b06      	ldr	r3, [sp, #24]
 802032c:	6818      	ldr	r0, [r3, #0]
 802032e:	6803      	ldr	r3, [r0, #0]
 8020330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020332:	4798      	blx	r3
 8020334:	b00f      	add	sp, #60	@ 0x3c
 8020336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802033a:	bf00      	nop
 802033c:	240253a8 	.word	0x240253a8
 8020340:	240253a2 	.word	0x240253a2

08020344 <CRC_Lock>:
 8020344:	4a2d      	ldr	r2, [pc, #180]	@ (80203fc <CRC_Lock+0xb8>)
 8020346:	b530      	push	{r4, r5, lr}
 8020348:	6813      	ldr	r3, [r2, #0]
 802034a:	f24c 2540 	movw	r5, #49728	@ 0xc240
 802034e:	f023 0301 	bic.w	r3, r3, #1
 8020352:	6013      	str	r3, [r2, #0]
 8020354:	f64f 72f0 	movw	r2, #65520	@ 0xfff0
 8020358:	4b29      	ldr	r3, [pc, #164]	@ (8020400 <CRC_Lock+0xbc>)
 802035a:	681c      	ldr	r4, [r3, #0]
 802035c:	4014      	ands	r4, r2
 802035e:	42ac      	cmp	r4, r5
 8020360:	d005      	beq.n	802036e <CRC_Lock+0x2a>
 8020362:	681c      	ldr	r4, [r3, #0]
 8020364:	f24c 2570 	movw	r5, #49776	@ 0xc270
 8020368:	4014      	ands	r4, r2
 802036a:	42ac      	cmp	r4, r5
 802036c:	d125      	bne.n	80203ba <CRC_Lock+0x76>
 802036e:	4b25      	ldr	r3, [pc, #148]	@ (8020404 <CRC_Lock+0xc0>)
 8020370:	681b      	ldr	r3, [r3, #0]
 8020372:	2b00      	cmp	r3, #0
 8020374:	d139      	bne.n	80203ea <CRC_Lock+0xa6>
 8020376:	4b24      	ldr	r3, [pc, #144]	@ (8020408 <CRC_Lock+0xc4>)
 8020378:	681a      	ldr	r2, [r3, #0]
 802037a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802037e:	f5b2 6f8a 	cmp.w	r2, #1104	@ 0x450
 8020382:	d00d      	beq.n	80203a0 <CRC_Lock+0x5c>
 8020384:	681a      	ldr	r2, [r3, #0]
 8020386:	f240 4483 	movw	r4, #1155	@ 0x483
 802038a:	f3c2 020b 	ubfx	r2, r2, #0, #12
 802038e:	42a2      	cmp	r2, r4
 8020390:	d006      	beq.n	80203a0 <CRC_Lock+0x5c>
 8020392:	681b      	ldr	r3, [r3, #0]
 8020394:	f240 4285 	movw	r2, #1157	@ 0x485
 8020398:	f3c3 030b 	ubfx	r3, r3, #0, #12
 802039c:	4293      	cmp	r3, r2
 802039e:	d124      	bne.n	80203ea <CRC_Lock+0xa6>
 80203a0:	4b1a      	ldr	r3, [pc, #104]	@ (802040c <CRC_Lock+0xc8>)
 80203a2:	2201      	movs	r2, #1
 80203a4:	601a      	str	r2, [r3, #0]
 80203a6:	681a      	ldr	r2, [r3, #0]
 80203a8:	2a00      	cmp	r2, #0
 80203aa:	d1fc      	bne.n	80203a6 <CRC_Lock+0x62>
 80203ac:	4b18      	ldr	r3, [pc, #96]	@ (8020410 <CRC_Lock+0xcc>)
 80203ae:	6018      	str	r0, [r3, #0]
 80203b0:	6818      	ldr	r0, [r3, #0]
 80203b2:	1a43      	subs	r3, r0, r1
 80203b4:	4258      	negs	r0, r3
 80203b6:	4158      	adcs	r0, r3
 80203b8:	e00e      	b.n	80203d8 <CRC_Lock+0x94>
 80203ba:	681b      	ldr	r3, [r3, #0]
 80203bc:	4013      	ands	r3, r2
 80203be:	f24d 2220 	movw	r2, #53792	@ 0xd220
 80203c2:	4293      	cmp	r3, r2
 80203c4:	d111      	bne.n	80203ea <CRC_Lock+0xa6>
 80203c6:	4b13      	ldr	r3, [pc, #76]	@ (8020414 <CRC_Lock+0xd0>)
 80203c8:	f240 4286 	movw	r2, #1158	@ 0x486
 80203cc:	681b      	ldr	r3, [r3, #0]
 80203ce:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80203d2:	4293      	cmp	r3, r2
 80203d4:	d001      	beq.n	80203da <CRC_Lock+0x96>
 80203d6:	2000      	movs	r0, #0
 80203d8:	bd30      	pop	{r4, r5, pc}
 80203da:	4b0f      	ldr	r3, [pc, #60]	@ (8020418 <CRC_Lock+0xd4>)
 80203dc:	2201      	movs	r2, #1
 80203de:	601a      	str	r2, [r3, #0]
 80203e0:	681a      	ldr	r2, [r3, #0]
 80203e2:	2a00      	cmp	r2, #0
 80203e4:	d1fc      	bne.n	80203e0 <CRC_Lock+0x9c>
 80203e6:	4b0d      	ldr	r3, [pc, #52]	@ (802041c <CRC_Lock+0xd8>)
 80203e8:	e7e1      	b.n	80203ae <CRC_Lock+0x6a>
 80203ea:	4b0d      	ldr	r3, [pc, #52]	@ (8020420 <CRC_Lock+0xdc>)
 80203ec:	2201      	movs	r2, #1
 80203ee:	601a      	str	r2, [r3, #0]
 80203f0:	681a      	ldr	r2, [r3, #0]
 80203f2:	2a00      	cmp	r2, #0
 80203f4:	d1fc      	bne.n	80203f0 <CRC_Lock+0xac>
 80203f6:	4b0b      	ldr	r3, [pc, #44]	@ (8020424 <CRC_Lock+0xe0>)
 80203f8:	e7d9      	b.n	80203ae <CRC_Lock+0x6a>
 80203fa:	bf00      	nop
 80203fc:	e0002000 	.word	0xe0002000
 8020400:	e000ed00 	.word	0xe000ed00
 8020404:	e0042000 	.word	0xe0042000
 8020408:	5c001000 	.word	0x5c001000
 802040c:	58024c08 	.word	0x58024c08
 8020410:	58024c00 	.word	0x58024c00
 8020414:	46008ff0 	.word	0x46008ff0
 8020418:	46024c08 	.word	0x46024c08
 802041c:	46024c00 	.word	0x46024c00
 8020420:	40023008 	.word	0x40023008
 8020424:	40023000 	.word	0x40023000

08020428 <_ZN8touchgfx8Gestures21registerEventListenerERNS_15UIEventListenerE>:
 8020428:	6101      	str	r1, [r0, #16]
 802042a:	4770      	bx	lr

0802042c <_ZN8touchgfx8Gestures4tickEv>:
 802042c:	7b83      	ldrb	r3, [r0, #14]
 802042e:	b14b      	cbz	r3, 8020444 <_ZN8touchgfx8Gestures4tickEv+0x18>
 8020430:	8903      	ldrh	r3, [r0, #8]
 8020432:	3301      	adds	r3, #1
 8020434:	b29b      	uxth	r3, r3
 8020436:	2b07      	cmp	r3, #7
 8020438:	8103      	strh	r3, [r0, #8]
 802043a:	bf81      	itttt	hi
 802043c:	2300      	movhi	r3, #0
 802043e:	8143      	strhhi	r3, [r0, #10]
 8020440:	8183      	strhhi	r3, [r0, #12]
 8020442:	7383      	strbhi	r3, [r0, #14]
 8020444:	4770      	bx	lr
	...

08020448 <_ZN8touchgfx8Gestures17registerDragEventEtttt>:
 8020448:	e92d 41ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, lr}
 802044c:	4698      	mov	r8, r3
 802044e:	8883      	ldrh	r3, [r0, #4]
 8020450:	4604      	mov	r4, r0
 8020452:	4617      	mov	r7, r2
 8020454:	f8ad 3006 	strh.w	r3, [sp, #6]
 8020458:	eba8 0303 	sub.w	r3, r8, r3
 802045c:	4a19      	ldr	r2, [pc, #100]	@ (80204c4 <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x7c>)
 802045e:	460e      	mov	r6, r1
 8020460:	b21b      	sxth	r3, r3
 8020462:	88c1      	ldrh	r1, [r0, #6]
 8020464:	9200      	str	r2, [sp, #0]
 8020466:	2000      	movs	r0, #0
 8020468:	2b00      	cmp	r3, #0
 802046a:	8aa2      	ldrh	r2, [r4, #20]
 802046c:	f8bd 5028 	ldrh.w	r5, [sp, #40]	@ 0x28
 8020470:	bfb8      	it	lt
 8020472:	425b      	neglt	r3, r3
 8020474:	f88d 0004 	strb.w	r0, [sp, #4]
 8020478:	f8ad 1008 	strh.w	r1, [sp, #8]
 802047c:	b21b      	sxth	r3, r3
 802047e:	f8ad 800a 	strh.w	r8, [sp, #10]
 8020482:	f8ad 500c 	strh.w	r5, [sp, #12]
 8020486:	4293      	cmp	r3, r2
 8020488:	dc07      	bgt.n	802049a <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x52>
 802048a:	1a69      	subs	r1, r5, r1
 802048c:	b209      	sxth	r1, r1
 802048e:	2900      	cmp	r1, #0
 8020490:	bfb8      	it	lt
 8020492:	4249      	neglt	r1, r1
 8020494:	b209      	sxth	r1, r1
 8020496:	428a      	cmp	r2, r1
 8020498:	da10      	bge.n	80204bc <_ZN8touchgfx8Gestures17registerDragEventEtttt+0x74>
 802049a:	6920      	ldr	r0, [r4, #16]
 802049c:	4669      	mov	r1, sp
 802049e:	eba8 0606 	sub.w	r6, r8, r6
 80204a2:	1bef      	subs	r7, r5, r7
 80204a4:	6803      	ldr	r3, [r0, #0]
 80204a6:	685b      	ldr	r3, [r3, #4]
 80204a8:	4798      	blx	r3
 80204aa:	2300      	movs	r3, #0
 80204ac:	2001      	movs	r0, #1
 80204ae:	8166      	strh	r6, [r4, #10]
 80204b0:	8123      	strh	r3, [r4, #8]
 80204b2:	81a7      	strh	r7, [r4, #12]
 80204b4:	f8a4 8004 	strh.w	r8, [r4, #4]
 80204b8:	80e5      	strh	r5, [r4, #6]
 80204ba:	73a0      	strb	r0, [r4, #14]
 80204bc:	b004      	add	sp, #16
 80204be:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80204c2:	bf00      	nop
 80204c4:	08025424 	.word	0x08025424

080204c8 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt>:
 80204c8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80204ca:	461e      	mov	r6, r3
 80204cc:	1e4b      	subs	r3, r1, #1
 80204ce:	b085      	sub	sp, #20
 80204d0:	4604      	mov	r4, r0
 80204d2:	2b01      	cmp	r3, #1
 80204d4:	460d      	mov	r5, r1
 80204d6:	4617      	mov	r7, r2
 80204d8:	d84b      	bhi.n	8020572 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xaa>
 80204da:	f9b0 200a 	ldrsh.w	r2, [r0, #10]
 80204de:	1cd3      	adds	r3, r2, #3
 80204e0:	b29b      	uxth	r3, r3
 80204e2:	2b06      	cmp	r3, #6
 80204e4:	d916      	bls.n	8020514 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x4c>
 80204e6:	f8df c0a0 	ldr.w	ip, [pc, #160]	@ 8020588 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 80204ea:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 80204ee:	f8cd c004 	str.w	ip, [sp, #4]
 80204f2:	f04f 0c00 	mov.w	ip, #0
 80204f6:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 80204fa:	6900      	ldr	r0, [r0, #16]
 80204fc:	f8ad 100c 	strh.w	r1, [sp, #12]
 8020500:	a901      	add	r1, sp, #4
 8020502:	f88d c008 	strb.w	ip, [sp, #8]
 8020506:	f8ad 200a 	strh.w	r2, [sp, #10]
 802050a:	f8ad 300e 	strh.w	r3, [sp, #14]
 802050e:	6803      	ldr	r3, [r0, #0]
 8020510:	689b      	ldr	r3, [r3, #8]
 8020512:	4798      	blx	r3
 8020514:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020518:	1cd3      	adds	r3, r2, #3
 802051a:	b29b      	uxth	r3, r3
 802051c:	2b06      	cmp	r3, #6
 802051e:	d916      	bls.n	802054e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020520:	f8df c064 	ldr.w	ip, [pc, #100]	@ 8020588 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xc0>
 8020524:	f9b4 1004 	ldrsh.w	r1, [r4, #4]
 8020528:	f8cd c004 	str.w	ip, [sp, #4]
 802052c:	f04f 0c01 	mov.w	ip, #1
 8020530:	f9b4 3006 	ldrsh.w	r3, [r4, #6]
 8020534:	6920      	ldr	r0, [r4, #16]
 8020536:	f8ad 100c 	strh.w	r1, [sp, #12]
 802053a:	a901      	add	r1, sp, #4
 802053c:	f88d c008 	strb.w	ip, [sp, #8]
 8020540:	f8ad 200a 	strh.w	r2, [sp, #10]
 8020544:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020548:	6803      	ldr	r3, [r0, #0]
 802054a:	689b      	ldr	r3, [r3, #8]
 802054c:	4798      	blx	r3
 802054e:	4b0d      	ldr	r3, [pc, #52]	@ (8020584 <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0xbc>)
 8020550:	a901      	add	r1, sp, #4
 8020552:	6920      	ldr	r0, [r4, #16]
 8020554:	9301      	str	r3, [sp, #4]
 8020556:	2300      	movs	r3, #0
 8020558:	f88d 5008 	strb.w	r5, [sp, #8]
 802055c:	f8ad 700a 	strh.w	r7, [sp, #10]
 8020560:	f8ad 600c 	strh.w	r6, [sp, #12]
 8020564:	f8ad 300e 	strh.w	r3, [sp, #14]
 8020568:	6803      	ldr	r3, [r0, #0]
 802056a:	681b      	ldr	r3, [r3, #0]
 802056c:	4798      	blx	r3
 802056e:	b005      	add	sp, #20
 8020570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8020572:	2900      	cmp	r1, #0
 8020574:	d1eb      	bne.n	802054e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020576:	80a2      	strh	r2, [r4, #4]
 8020578:	80c6      	strh	r6, [r0, #6]
 802057a:	60a1      	str	r1, [r4, #8]
 802057c:	81a1      	strh	r1, [r4, #12]
 802057e:	73a1      	strb	r1, [r4, #14]
 8020580:	e7e5      	b.n	802054e <_ZN8touchgfx8Gestures18registerClickEventENS_10ClickEvent14ClickEventTypeEtt+0x86>
 8020582:	bf00      	nop
 8020584:	08025330 	.word	0x08025330
 8020588:	08025438 	.word	0x08025438

0802058c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>:
 802058c:	10c9      	asrs	r1, r1, #3
 802058e:	2900      	cmp	r1, #0
 8020590:	bfb8      	it	lt
 8020592:	4249      	neglt	r1, r1
 8020594:	2801      	cmp	r0, #1
 8020596:	d108      	bne.n	80205aa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 8020598:	f3c1 0008 	ubfx	r0, r1, #0, #9
 802059c:	f5b0 7f80 	cmp.w	r0, #256	@ 0x100
 80205a0:	4601      	mov	r1, r0
 80205a2:	dd02      	ble.n	80205aa <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1+0x1e>
 80205a4:	f5c0 7000 	rsb	r0, r0, #512	@ 0x200
 80205a8:	4770      	bx	lr
 80205aa:	29ff      	cmp	r1, #255	@ 0xff
 80205ac:	bfa8      	it	ge
 80205ae:	21ff      	movge	r1, #255	@ 0xff
 80205b0:	4608      	mov	r0, r1
 80205b2:	4770      	bx	lr

080205b4 <_ZN8touchgfx10Rasterizer6lineToEii>:
 80205b4:	b410      	push	{r4}
 80205b6:	e9d0 3401 	ldrd	r3, r4, [r0, #4]
 80205ba:	429c      	cmp	r4, r3
 80205bc:	d803      	bhi.n	80205c6 <_ZN8touchgfx10Rasterizer6lineToEii+0x12>
 80205be:	f85d 4b04 	ldr.w	r4, [sp], #4
 80205c2:	f7f1 bd79 	b.w	80120b8 <_ZN8touchgfx7Outline6lineToEii>
 80205c6:	f85d 4b04 	ldr.w	r4, [sp], #4
 80205ca:	4770      	bx	lr

080205cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>:
 80205cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80205d0:	b08b      	sub	sp, #44	@ 0x2c
 80205d2:	4606      	mov	r6, r0
 80205d4:	468a      	mov	sl, r1
 80205d6:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80205da:	f89d 3050 	ldrb.w	r3, [sp, #80]	@ 0x50
 80205de:	9308      	str	r3, [sp, #32]
 80205e0:	f89d 3054 	ldrb.w	r3, [sp, #84]	@ 0x54
 80205e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80205e6:	f7f1 fed2 	bl	801238e <_ZN8touchgfx7Outline24closeOutlineAndSortCellsEv>
 80205ea:	68b5      	ldr	r5, [r6, #8]
 80205ec:	4604      	mov	r4, r0
 80205ee:	2d00      	cmp	r5, #0
 80205f0:	d044      	beq.n	802067c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80205f2:	6873      	ldr	r3, [r6, #4]
 80205f4:	42ab      	cmp	r3, r5
 80205f6:	d33d      	bcc.n	8020674 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa8>
 80205f8:	f9b0 3002 	ldrsh.w	r3, [r0, #2]
 80205fc:	f04f 0800 	mov.w	r8, #0
 8020600:	f9b6 2034 	ldrsh.w	r2, [r6, #52]	@ 0x34
 8020604:	eb02 0b03 	add.w	fp, r2, r3
 8020608:	e9dd 1206 	ldrd	r1, r2, [sp, #24]
 802060c:	fb02 1203 	mla	r2, r2, r3, r1
 8020610:	9205      	str	r2, [sp, #20]
 8020612:	1e6a      	subs	r2, r5, #1
 8020614:	9204      	str	r2, [sp, #16]
 8020616:	f9b4 9002 	ldrsh.w	r9, [r4, #2]
 802061a:	f9b4 7000 	ldrsh.w	r7, [r4]
 802061e:	454b      	cmp	r3, r9
 8020620:	463a      	mov	r2, r7
 8020622:	d008      	beq.n	8020636 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x6a>
 8020624:	f9b6 3034 	ldrsh.w	r3, [r6, #52]	@ 0x34
 8020628:	eb03 0b09 	add.w	fp, r3, r9
 802062c:	e9dd 1306 	ldrd	r1, r3, [sp, #24]
 8020630:	fb03 1309 	mla	r3, r3, r9, r1
 8020634:	9305      	str	r3, [sp, #20]
 8020636:	f9b4 3004 	ldrsh.w	r3, [r4, #4]
 802063a:	f9b4 1006 	ldrsh.w	r1, [r4, #6]
 802063e:	4498      	add	r8, r3
 8020640:	9b04      	ldr	r3, [sp, #16]
 8020642:	3b01      	subs	r3, #1
 8020644:	9304      	str	r3, [sp, #16]
 8020646:	9b04      	ldr	r3, [sp, #16]
 8020648:	3301      	adds	r3, #1
 802064a:	d015      	beq.n	8020678 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xac>
 802064c:	f934 3f08 	ldrsh.w	r3, [r4, #8]!
 8020650:	42bb      	cmp	r3, r7
 8020652:	d117      	bne.n	8020684 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb8>
 8020654:	f9b4 0002 	ldrsh.w	r0, [r4, #2]
 8020658:	9b04      	ldr	r3, [sp, #16]
 802065a:	4548      	cmp	r0, r9
 802065c:	f103 33ff 	add.w	r3, r3, #4294967295
 8020660:	d17d      	bne.n	802075e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x192>
 8020662:	f9b4 0006 	ldrsh.w	r0, [r4, #6]
 8020666:	4401      	add	r1, r0
 8020668:	f9b4 0004 	ldrsh.w	r0, [r4, #4]
 802066c:	4480      	add	r8, r0
 802066e:	e7e9      	b.n	8020644 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x78>
 8020670:	461f      	mov	r7, r3
 8020672:	e042      	b.n	80206fa <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x12e>
 8020674:	2000      	movs	r0, #0
 8020676:	e002      	b.n	802067e <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb2>
 8020678:	2900      	cmp	r1, #0
 802067a:	d16d      	bne.n	8020758 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x18c>
 802067c:	2001      	movs	r0, #1
 802067e:	b00b      	add	sp, #44	@ 0x2c
 8020680:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8020684:	b379      	cbz	r1, 80206e6 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x11a>
 8020686:	2f00      	cmp	r7, #0
 8020688:	db29      	blt.n	80206de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 802068a:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 802068e:	42bb      	cmp	r3, r7
 8020690:	dd25      	ble.n	80206de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 8020692:	ebc1 1188 	rsb	r1, r1, r8, lsl #6
 8020696:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 802069a:	f7ff ff77 	bl	802058c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 802069e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80206a0:	fb10 f003 	smulbb	r0, r0, r3
 80206a4:	b280      	uxth	r0, r0
 80206a6:	1c41      	adds	r1, r0, #1
 80206a8:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 80206ac:	1209      	asrs	r1, r1, #8
 80206ae:	f011 0fff 	tst.w	r1, #255	@ 0xff
 80206b2:	d014      	beq.n	80206de <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x112>
 80206b4:	b2c9      	uxtb	r1, r1
 80206b6:	9808      	ldr	r0, [sp, #32]
 80206b8:	b2ba      	uxth	r2, r7
 80206ba:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 80206bc:	9102      	str	r1, [sp, #8]
 80206be:	2101      	movs	r1, #1
 80206c0:	4413      	add	r3, r2
 80206c2:	4402      	add	r2, r0
 80206c4:	9101      	str	r1, [sp, #4]
 80206c6:	fa0f f18b 	sxth.w	r1, fp
 80206ca:	f8da 0000 	ldr.w	r0, [sl]
 80206ce:	b21b      	sxth	r3, r3
 80206d0:	9100      	str	r1, [sp, #0]
 80206d2:	b212      	sxth	r2, r2
 80206d4:	6941      	ldr	r1, [r0, #20]
 80206d6:	4650      	mov	r0, sl
 80206d8:	460d      	mov	r5, r1
 80206da:	9905      	ldr	r1, [sp, #20]
 80206dc:	47a8      	blx	r5
 80206de:	9b04      	ldr	r3, [sp, #16]
 80206e0:	1c7a      	adds	r2, r7, #1
 80206e2:	3301      	adds	r3, #1
 80206e4:	d0ca      	beq.n	802067c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 80206e6:	f9b4 7000 	ldrsh.w	r7, [r4]
 80206ea:	1abb      	subs	r3, r7, r2
 80206ec:	2b00      	cmp	r3, #0
 80206ee:	dd31      	ble.n	8020754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80206f0:	2a00      	cmp	r2, #0
 80206f2:	dabd      	bge.n	8020670 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xa4>
 80206f4:	2f00      	cmp	r7, #0
 80206f6:	dd2d      	ble.n	8020754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 80206f8:	2200      	movs	r2, #0
 80206fa:	f9b6 3036 	ldrsh.w	r3, [r6, #54]	@ 0x36
 80206fe:	19d1      	adds	r1, r2, r7
 8020700:	4299      	cmp	r1, r3
 8020702:	db02      	blt.n	802070a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x13e>
 8020704:	1a9f      	subs	r7, r3, r2
 8020706:	2f00      	cmp	r7, #0
 8020708:	dd24      	ble.n	8020754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802070a:	ea4f 1188 	mov.w	r1, r8, lsl #6
 802070e:	f896 0030 	ldrb.w	r0, [r6, #48]	@ 0x30
 8020712:	f7ff ff3b 	bl	802058c <_ZNK8touchgfx10Rasterizer14calculateAlphaEi.isra.1>
 8020716:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8020718:	fb10 f003 	smulbb	r0, r0, r3
 802071c:	b280      	uxth	r0, r0
 802071e:	1c41      	adds	r1, r0, #1
 8020720:	eb01 2110 	add.w	r1, r1, r0, lsr #8
 8020724:	1209      	asrs	r1, r1, #8
 8020726:	f011 0fff 	tst.w	r1, #255	@ 0xff
 802072a:	d013      	beq.n	8020754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 802072c:	b292      	uxth	r2, r2
 802072e:	9808      	ldr	r0, [sp, #32]
 8020730:	b2c9      	uxtb	r1, r1
 8020732:	8e73      	ldrh	r3, [r6, #50]	@ 0x32
 8020734:	b23f      	sxth	r7, r7
 8020736:	4413      	add	r3, r2
 8020738:	9102      	str	r1, [sp, #8]
 802073a:	4402      	add	r2, r0
 802073c:	fa0f f18b 	sxth.w	r1, fp
 8020740:	f8da 0000 	ldr.w	r0, [sl]
 8020744:	b21b      	sxth	r3, r3
 8020746:	9100      	str	r1, [sp, #0]
 8020748:	b212      	sxth	r2, r2
 802074a:	9701      	str	r7, [sp, #4]
 802074c:	9905      	ldr	r1, [sp, #20]
 802074e:	6947      	ldr	r7, [r0, #20]
 8020750:	4650      	mov	r0, sl
 8020752:	47b8      	blx	r7
 8020754:	464b      	mov	r3, r9
 8020756:	e75e      	b.n	8020616 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x4a>
 8020758:	2f00      	cmp	r7, #0
 802075a:	da96      	bge.n	802068a <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xbe>
 802075c:	e78e      	b.n	802067c <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xb0>
 802075e:	2900      	cmp	r1, #0
 8020760:	d0f8      	beq.n	8020754 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0x188>
 8020762:	e790      	b.n	8020686 <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh+0xba>

08020764 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h>:
 8020764:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020768:	461e      	mov	r6, r3
 802076a:	4b36      	ldr	r3, [pc, #216]	@ (8020844 <_ZN8touchgfx6CanvasC1EPKNS_15AbstractPainterERKNS_4RectES6_h+0xe0>)
 802076c:	2500      	movs	r5, #0
 802076e:	f100 0814 	add.w	r8, r0, #20
 8020772:	4604      	mov	r4, r0
 8020774:	4617      	mov	r7, r2
 8020776:	e9c0 3100 	strd	r3, r1, [r0]
 802077a:	f9b2 3004 	ldrsh.w	r3, [r2, #4]
 802077e:	8185      	strh	r5, [r0, #12]
 8020780:	8103      	strh	r3, [r0, #8]
 8020782:	f89d 3020 	ldrb.w	r3, [sp, #32]
 8020786:	81c5      	strh	r5, [r0, #14]
 8020788:	7283      	strb	r3, [r0, #10]
 802078a:	8205      	strh	r5, [r0, #16]
 802078c:	8245      	strh	r5, [r0, #18]
 802078e:	4640      	mov	r0, r8
 8020790:	f7f0 ffd8 	bl	8011744 <_ZN8touchgfx7OutlineC1Ev>
 8020794:	f884 5044 	strb.w	r5, [r4, #68]	@ 0x44
 8020798:	f8a4 5046 	strh.w	r5, [r4, #70]	@ 0x46
 802079c:	466b      	mov	r3, sp
 802079e:	f8a4 5048 	strh.w	r5, [r4, #72]	@ 0x48
 80207a2:	f8a4 504a 	strh.w	r5, [r4, #74]	@ 0x4a
 80207a6:	f884 505c 	strb.w	r5, [r4, #92]	@ 0x5c
 80207aa:	f884 505d 	strb.w	r5, [r4, #93]	@ 0x5d
 80207ae:	f8a4 5068 	strh.w	r5, [r4, #104]	@ 0x68
 80207b2:	e9c4 5513 	strd	r5, r5, [r4, #76]	@ 0x4c
 80207b6:	e9c4 5515 	strd	r5, r5, [r4, #84]	@ 0x54
 80207ba:	e9c4 5518 	strd	r5, r5, [r4, #96]	@ 0x60
 80207be:	e9c4 551b 	strd	r5, r5, [r4, #108]	@ 0x6c
 80207c2:	6830      	ldr	r0, [r6, #0]
 80207c4:	6871      	ldr	r1, [r6, #4]
 80207c6:	8872      	ldrh	r2, [r6, #2]
 80207c8:	8835      	ldrh	r5, [r6, #0]
 80207ca:	c303      	stmia	r3!, {r0, r1}
 80207cc:	887b      	ldrh	r3, [r7, #2]
 80207ce:	f9b6 0004 	ldrsh.w	r0, [r6, #4]
 80207d2:	4413      	add	r3, r2
 80207d4:	883a      	ldrh	r2, [r7, #0]
 80207d6:	f9b6 1006 	ldrsh.w	r1, [r6, #6]
 80207da:	442a      	add	r2, r5
 80207dc:	81e3      	strh	r3, [r4, #14]
 80207de:	8220      	strh	r0, [r4, #16]
 80207e0:	4668      	mov	r0, sp
 80207e2:	81a2      	strh	r2, [r4, #12]
 80207e4:	8261      	strh	r1, [r4, #18]
 80207e6:	4639      	mov	r1, r7
 80207e8:	f7f2 fcda 	bl	80131a0 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectERKS1_>
 80207ec:	f104 000c 	add.w	r0, r4, #12
 80207f0:	f7f2 fcae 	bl	8013150 <_ZN8touchgfx21DisplayTransformation29transformDisplayToFrameBufferERNS_4RectE>
 80207f4:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 80207f8:	f8bd 2000 	ldrh.w	r2, [sp]
 80207fc:	4640      	mov	r0, r8
 80207fe:	f8a4 3048 	strh.w	r3, [r4, #72]	@ 0x48
 8020802:	f8a4 2046 	strh.w	r2, [r4, #70]	@ 0x46
 8020806:	f7f0 ff81 	bl	801170c <_ZN8touchgfx7Outline5resetEv>
 802080a:	f9bd 3000 	ldrsh.w	r3, [sp]
 802080e:	f9b4 2012 	ldrsh.w	r2, [r4, #18]
 8020812:	4620      	mov	r0, r4
 8020814:	015b      	lsls	r3, r3, #5
 8020816:	64e3      	str	r3, [r4, #76]	@ 0x4c
 8020818:	f9bd 3002 	ldrsh.w	r3, [sp, #2]
 802081c:	015b      	lsls	r3, r3, #5
 802081e:	6523      	str	r3, [r4, #80]	@ 0x50
 8020820:	f9bd 3004 	ldrsh.w	r3, [sp, #4]
 8020824:	015b      	lsls	r3, r3, #5
 8020826:	6563      	str	r3, [r4, #84]	@ 0x54
 8020828:	f9bd 3006 	ldrsh.w	r3, [sp, #6]
 802082c:	015b      	lsls	r3, r3, #5
 802082e:	65a3      	str	r3, [r4, #88]	@ 0x58
 8020830:	f9b4 3010 	ldrsh.w	r3, [r4, #16]
 8020834:	f8a4 304a 	strh.w	r3, [r4, #74]	@ 0x4a
 8020838:	e9c4 320f 	strd	r3, r2, [r4, #60]	@ 0x3c
 802083c:	b002      	add	sp, #8
 802083e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8020842:	bf00      	nop
 8020844:	080256c8 	.word	0x080256c8

08020848 <_ZN8touchgfx6Canvas5closeEv>:
 8020848:	b538      	push	{r3, r4, r5, lr}
 802084a:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 802084e:	4604      	mov	r4, r0
 8020850:	b193      	cbz	r3, 8020878 <_ZN8touchgfx6Canvas5closeEv+0x30>
 8020852:	f890 3068 	ldrb.w	r3, [r0, #104]	@ 0x68
 8020856:	f890 2069 	ldrb.w	r2, [r0, #105]	@ 0x69
 802085a:	4213      	tst	r3, r2
 802085c:	d10c      	bne.n	8020878 <_ZN8touchgfx6Canvas5closeEv+0x30>
 802085e:	f100 0514 	add.w	r5, r0, #20
 8020862:	b123      	cbz	r3, 802086e <_ZN8touchgfx6Canvas5closeEv+0x26>
 8020864:	e9d0 1218 	ldrd	r1, r2, [r0, #96]	@ 0x60
 8020868:	4628      	mov	r0, r5
 802086a:	f7ff fea3 	bl	80205b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 802086e:	4628      	mov	r0, r5
 8020870:	e9d4 121b 	ldrd	r1, r2, [r4, #108]	@ 0x6c
 8020874:	f7ff fe9e 	bl	80205b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8020878:	2300      	movs	r3, #0
 802087a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 802087e:	e9d4 0306 	ldrd	r0, r3, [r4, #24]
 8020882:	4298      	cmp	r0, r3
 8020884:	bf34      	ite	cc
 8020886:	2000      	movcc	r0, #0
 8020888:	2001      	movcs	r0, #1
 802088a:	bd38      	pop	{r3, r4, r5, pc}

0802088c <_ZN8touchgfx6Canvas6renderEh>:
 802088c:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8020890:	7a85      	ldrb	r5, [r0, #10]
 8020892:	4604      	mov	r4, r0
 8020894:	4369      	muls	r1, r5
 8020896:	1c4d      	adds	r5, r1, #1
 8020898:	eb05 2511 	add.w	r5, r5, r1, lsr #8
 802089c:	122d      	asrs	r5, r5, #8
 802089e:	f000 8098 	beq.w	80209d2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80208a2:	f890 305d 	ldrb.w	r3, [r0, #93]	@ 0x5d
 80208a6:	2b00      	cmp	r3, #0
 80208a8:	f000 8093 	beq.w	80209d2 <_ZN8touchgfx6Canvas6renderEh+0x146>
 80208ac:	f7ff ffcc 	bl	8020848 <_ZN8touchgfx6Canvas5closeEv>
 80208b0:	4607      	mov	r7, r0
 80208b2:	2800      	cmp	r0, #0
 80208b4:	d045      	beq.n	8020942 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80208b6:	6860      	ldr	r0, [r4, #4]
 80208b8:	4e47      	ldr	r6, [pc, #284]	@ (80209d8 <_ZN8touchgfx6Canvas6renderEh+0x14c>)
 80208ba:	6803      	ldr	r3, [r0, #0]
 80208bc:	6837      	ldr	r7, [r6, #0]
 80208be:	689b      	ldr	r3, [r3, #8]
 80208c0:	4798      	blx	r3
 80208c2:	4601      	mov	r1, r0
 80208c4:	4638      	mov	r0, r7
 80208c6:	f7ef fa11 	bl	800fcec <_ZN8touchgfx3HAL33lockFrameBufferForRenderingMethodENS0_15RenderingMethodE>
 80208ca:	4607      	mov	r7, r0
 80208cc:	f7e3 fbae 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 80208d0:	6803      	ldr	r3, [r0, #0]
 80208d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80208d4:	4798      	blx	r3
 80208d6:	4680      	mov	r8, r0
 80208d8:	f7e3 fba8 	bl	800402c <_ZN8touchgfx3HAL3lcdEv>
 80208dc:	6803      	ldr	r3, [r0, #0]
 80208de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80208e0:	4798      	blx	r3
 80208e2:	280b      	cmp	r0, #11
 80208e4:	d85a      	bhi.n	802099c <_ZN8touchgfx6Canvas6renderEh+0x110>
 80208e6:	e8df f000 	tbb	[pc, r0]
 80208ea:	5b50      	.short	0x5b50
 80208ec:	3059066b 	.word	0x3059066b
 80208f0:	64646440 	.word	0x64646440
 80208f4:	6464      	.short	0x6464
 80208f6:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 80208fa:	2208      	movs	r2, #8
 80208fc:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020900:	fb91 f2f2 	sdiv	r2, r1, r2
 8020904:	fb08 2303 	mla	r3, r8, r3, r2
 8020908:	441f      	add	r7, r3
 802090a:	424b      	negs	r3, r1
 802090c:	f001 0107 	and.w	r1, r1, #7
 8020910:	f003 0307 	and.w	r3, r3, #7
 8020914:	bf58      	it	pl
 8020916:	4259      	negpl	r1, r3
 8020918:	b2c9      	uxtb	r1, r1
 802091a:	b2ed      	uxtb	r5, r5
 802091c:	463a      	mov	r2, r7
 802091e:	fa0f f388 	sxth.w	r3, r8
 8020922:	f104 0014 	add.w	r0, r4, #20
 8020926:	e9cd 1500 	strd	r1, r5, [sp]
 802092a:	6861      	ldr	r1, [r4, #4]
 802092c:	f7ff fe4e 	bl	80205cc <_ZN8touchgfx10Rasterizer6renderEPKNS_15AbstractPainterEPhshh>
 8020930:	4607      	mov	r7, r0
 8020932:	6860      	ldr	r0, [r4, #4]
 8020934:	6803      	ldr	r3, [r0, #0]
 8020936:	691b      	ldr	r3, [r3, #16]
 8020938:	4798      	blx	r3
 802093a:	6830      	ldr	r0, [r6, #0]
 802093c:	6803      	ldr	r3, [r0, #0]
 802093e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8020940:	4798      	blx	r3
 8020942:	4638      	mov	r0, r7
 8020944:	b002      	add	sp, #8
 8020946:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 802094a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802094e:	2204      	movs	r2, #4
 8020950:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020954:	fb91 f2f2 	sdiv	r2, r1, r2
 8020958:	fb08 2303 	mla	r3, r8, r3, r2
 802095c:	441f      	add	r7, r3
 802095e:	424b      	negs	r3, r1
 8020960:	f001 0103 	and.w	r1, r1, #3
 8020964:	f003 0303 	and.w	r3, r3, #3
 8020968:	e7d4      	b.n	8020914 <_ZN8touchgfx6Canvas6renderEh+0x88>
 802096a:	f9b4 100c 	ldrsh.w	r1, [r4, #12]
 802096e:	2202      	movs	r2, #2
 8020970:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 8020974:	2900      	cmp	r1, #0
 8020976:	fb91 f2f2 	sdiv	r2, r1, r2
 802097a:	f001 0101 	and.w	r1, r1, #1
 802097e:	fb08 2303 	mla	r3, r8, r3, r2
 8020982:	bfb8      	it	lt
 8020984:	4249      	neglt	r1, r1
 8020986:	441f      	add	r7, r3
 8020988:	e7c6      	b.n	8020918 <_ZN8touchgfx6Canvas6renderEh+0x8c>
 802098a:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 802098e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8020992:	fb08 f303 	mul.w	r3, r8, r3
 8020996:	eb03 0342 	add.w	r3, r3, r2, lsl #1
 802099a:	441f      	add	r7, r3
 802099c:	2100      	movs	r1, #0
 802099e:	e7bc      	b.n	802091a <_ZN8touchgfx6Canvas6renderEh+0x8e>
 80209a0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80209a4:	2103      	movs	r1, #3
 80209a6:	fb08 f203 	mul.w	r2, r8, r3
 80209aa:	89a3      	ldrh	r3, [r4, #12]
 80209ac:	fb13 2301 	smlabb	r3, r3, r1, r2
 80209b0:	e7f3      	b.n	802099a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80209b2:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80209b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80209ba:	fb08 2303 	mla	r3, r8, r3, r2
 80209be:	e7ec      	b.n	802099a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80209c0:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
 80209c4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80209c8:	fb08 f303 	mul.w	r3, r8, r3
 80209cc:	eb03 0382 	add.w	r3, r3, r2, lsl #2
 80209d0:	e7e3      	b.n	802099a <_ZN8touchgfx6Canvas6renderEh+0x10e>
 80209d2:	2701      	movs	r7, #1
 80209d4:	e7b5      	b.n	8020942 <_ZN8touchgfx6Canvas6renderEh+0xb6>
 80209d6:	bf00      	nop
 80209d8:	240253a8 	.word	0x240253a8

080209dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>:
 80209dc:	4b06      	ldr	r3, [pc, #24]	@ (80209f8 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1c>)
 80209de:	b510      	push	{r4, lr}
 80209e0:	781b      	ldrb	r3, [r3, #0]
 80209e2:	2b01      	cmp	r3, #1
 80209e4:	d107      	bne.n	80209f6 <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_+0x1a>
 80209e6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 80209ea:	680b      	ldr	r3, [r1, #0]
 80209ec:	6814      	ldr	r4, [r2, #0]
 80209ee:	ebc3 1340 	rsb	r3, r3, r0, lsl #5
 80209f2:	6013      	str	r3, [r2, #0]
 80209f4:	600c      	str	r4, [r1, #0]
 80209f6:	bd10      	pop	{r4, pc}
 80209f8:	240253a0 	.word	0x240253a0

080209fc <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_>:
 80209fc:	b513      	push	{r0, r1, r4, lr}
 80209fe:	f890 305c 	ldrb.w	r3, [r0, #92]	@ 0x5c
 8020a02:	4604      	mov	r4, r0
 8020a04:	e9cd 2100 	strd	r2, r1, [sp]
 8020a08:	b9a3      	cbnz	r3, 8020a34 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x38>
 8020a0a:	466a      	mov	r2, sp
 8020a0c:	a901      	add	r1, sp, #4
 8020a0e:	4620      	mov	r0, r4
 8020a10:	f7ff ffe4 	bl	80209dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8020a14:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8020a16:	9901      	ldr	r1, [sp, #4]
 8020a18:	9a00      	ldr	r2, [sp, #0]
 8020a1a:	1ac9      	subs	r1, r1, r3
 8020a1c:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020a1e:	1ad2      	subs	r2, r2, r3
 8020a20:	9101      	str	r1, [sp, #4]
 8020a22:	2a00      	cmp	r2, #0
 8020a24:	9200      	str	r2, [sp, #0]
 8020a26:	da0b      	bge.n	8020a40 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x44>
 8020a28:	2301      	movs	r3, #1
 8020a2a:	2900      	cmp	r1, #0
 8020a2c:	da0e      	bge.n	8020a4c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x50>
 8020a2e:	f043 0304 	orr.w	r3, r3, #4
 8020a32:	e013      	b.n	8020a5c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x60>
 8020a34:	f7ff ff08 	bl	8020848 <_ZN8touchgfx6Canvas5closeEv>
 8020a38:	2800      	cmp	r0, #0
 8020a3a:	d1e6      	bne.n	8020a0a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0xe>
 8020a3c:	b002      	add	sp, #8
 8020a3e:	bd10      	pop	{r4, pc}
 8020a40:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020a42:	429a      	cmp	r2, r3
 8020a44:	bfac      	ite	ge
 8020a46:	2302      	movge	r3, #2
 8020a48:	2300      	movlt	r3, #0
 8020a4a:	e7ee      	b.n	8020a2a <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x2e>
 8020a4c:	6d60      	ldr	r0, [r4, #84]	@ 0x54
 8020a4e:	4281      	cmp	r1, r0
 8020a50:	bfac      	ite	ge
 8020a52:	2008      	movge	r0, #8
 8020a54:	2000      	movlt	r0, #0
 8020a56:	4318      	orrs	r0, r3
 8020a58:	b2c3      	uxtb	r3, r0
 8020a5a:	b158      	cbz	r0, 8020a74 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x78>
 8020a5c:	2200      	movs	r2, #0
 8020a5e:	f884 205c 	strb.w	r2, [r4, #92]	@ 0x5c
 8020a62:	9901      	ldr	r1, [sp, #4]
 8020a64:	9a00      	ldr	r2, [sp, #0]
 8020a66:	66e1      	str	r1, [r4, #108]	@ 0x6c
 8020a68:	6722      	str	r2, [r4, #112]	@ 0x70
 8020a6a:	f884 3068 	strb.w	r3, [r4, #104]	@ 0x68
 8020a6e:	e9c4 1218 	strd	r1, r2, [r4, #96]	@ 0x60
 8020a72:	e7e3      	b.n	8020a3c <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x40>
 8020a74:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8020a78:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8020a7c:	4298      	cmp	r0, r3
 8020a7e:	d803      	bhi.n	8020a88 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x8c>
 8020a80:	f104 0014 	add.w	r0, r4, #20
 8020a84:	f7f1 fb32 	bl	80120ec <_ZN8touchgfx7Outline6moveToEii>
 8020a88:	2301      	movs	r3, #1
 8020a8a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8020a8e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8020a92:	2300      	movs	r3, #0
 8020a94:	e7e5      	b.n	8020a62 <_ZN8touchgfx6Canvas6moveToENS_7CWRUtil2Q5ES2_+0x66>

08020a96 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_>:
 8020a96:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8020a98:	ab02      	add	r3, sp, #8
 8020a9a:	4604      	mov	r4, r0
 8020a9c:	9101      	str	r1, [sp, #4]
 8020a9e:	a901      	add	r1, sp, #4
 8020aa0:	f843 2d08 	str.w	r2, [r3, #-8]!
 8020aa4:	461a      	mov	r2, r3
 8020aa6:	f7ff ff99 	bl	80209dc <_ZNK8touchgfx6Canvas29transformFrameBufferToDisplayERNS_7CWRUtil2Q5ES3_>
 8020aaa:	6ce3      	ldr	r3, [r4, #76]	@ 0x4c
 8020aac:	9901      	ldr	r1, [sp, #4]
 8020aae:	9a00      	ldr	r2, [sp, #0]
 8020ab0:	1ac9      	subs	r1, r1, r3
 8020ab2:	6d23      	ldr	r3, [r4, #80]	@ 0x50
 8020ab4:	1ad2      	subs	r2, r2, r3
 8020ab6:	9101      	str	r1, [sp, #4]
 8020ab8:	2a00      	cmp	r2, #0
 8020aba:	9200      	str	r2, [sp, #0]
 8020abc:	db1c      	blt.n	8020af8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x62>
 8020abe:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8020ac0:	429a      	cmp	r2, r3
 8020ac2:	bfac      	ite	ge
 8020ac4:	2002      	movge	r0, #2
 8020ac6:	2000      	movlt	r0, #0
 8020ac8:	2900      	cmp	r1, #0
 8020aca:	db17      	blt.n	8020afc <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x66>
 8020acc:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 8020ace:	4299      	cmp	r1, r3
 8020ad0:	bfac      	ite	ge
 8020ad2:	2308      	movge	r3, #8
 8020ad4:	2300      	movlt	r3, #0
 8020ad6:	4303      	orrs	r3, r0
 8020ad8:	f894 0068 	ldrb.w	r0, [r4, #104]	@ 0x68
 8020adc:	b2dd      	uxtb	r5, r3
 8020ade:	b978      	cbnz	r0, 8020b00 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x6a>
 8020ae0:	f104 0014 	add.w	r0, r4, #20
 8020ae4:	f7ff fd66 	bl	80205b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8020ae8:	9b01      	ldr	r3, [sp, #4]
 8020aea:	f884 5068 	strb.w	r5, [r4, #104]	@ 0x68
 8020aee:	6623      	str	r3, [r4, #96]	@ 0x60
 8020af0:	9b00      	ldr	r3, [sp, #0]
 8020af2:	6663      	str	r3, [r4, #100]	@ 0x64
 8020af4:	b002      	add	sp, #8
 8020af6:	bd70      	pop	{r4, r5, r6, pc}
 8020af8:	2001      	movs	r0, #1
 8020afa:	e7e5      	b.n	8020ac8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x32>
 8020afc:	2304      	movs	r3, #4
 8020afe:	e7ea      	b.n	8020ad6 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x40>
 8020b00:	b113      	cbz	r3, 8020b08 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x72>
 8020b02:	ea10 0305 	ands.w	r3, r0, r5
 8020b06:	d11c      	bne.n	8020b42 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xac>
 8020b08:	f894 305c 	ldrb.w	r3, [r4, #92]	@ 0x5c
 8020b0c:	f104 0614 	add.w	r6, r4, #20
 8020b10:	e9d4 1218 	ldrd	r1, r2, [r4, #96]	@ 0x60
 8020b14:	b98b      	cbnz	r3, 8020b3a <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0xa4>
 8020b16:	f884 0069 	strb.w	r0, [r4, #105]	@ 0x69
 8020b1a:	e9d4 3006 	ldrd	r3, r0, [r4, #24]
 8020b1e:	4298      	cmp	r0, r3
 8020b20:	d802      	bhi.n	8020b28 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x92>
 8020b22:	4630      	mov	r0, r6
 8020b24:	f7f1 fae2 	bl	80120ec <_ZN8touchgfx7Outline6moveToEii>
 8020b28:	2301      	movs	r3, #1
 8020b2a:	f884 305c 	strb.w	r3, [r4, #92]	@ 0x5c
 8020b2e:	f884 305d 	strb.w	r3, [r4, #93]	@ 0x5d
 8020b32:	4630      	mov	r0, r6
 8020b34:	e9dd 2100 	ldrd	r2, r1, [sp]
 8020b38:	e7d4      	b.n	8020ae4 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x4e>
 8020b3a:	4630      	mov	r0, r6
 8020b3c:	f7ff fd3a 	bl	80205b4 <_ZN8touchgfx10Rasterizer6lineToEii>
 8020b40:	e7f7      	b.n	8020b32 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x9c>
 8020b42:	461d      	mov	r5, r3
 8020b44:	e7d0      	b.n	8020ae8 <_ZN8touchgfx6Canvas6lineToENS_7CWRUtil2Q5ES2_+0x52>
	...

08020b48 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>:
 8020b48:	b538      	push	{r3, r4, r5, lr}
 8020b4a:	ed2d 8b10 	vpush	{d8-d15}
 8020b4e:	eef6 ba00 	vmov.f32	s23, #96	@ 0x3f000000  0.5
 8020b52:	4605      	mov	r5, r0
 8020b54:	eeb0 ca40 	vmov.f32	s24, s0
 8020b58:	460c      	mov	r4, r1
 8020b5a:	eef0 ca60 	vmov.f32	s25, s1
 8020b5e:	ed9f ba57 	vldr	s22, [pc, #348]	@ 8020cbc <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x174>
 8020b62:	eeb0 da41 	vmov.f32	s26, s2
 8020b66:	eef0 da61 	vmov.f32	s27, s3
 8020b6a:	eeb0 ea42 	vmov.f32	s28, s4
 8020b6e:	eef0 ea62 	vmov.f32	s29, s5
 8020b72:	eef0 aa6b 	vmov.f32	s21, s23
 8020b76:	2c08      	cmp	r4, #8
 8020b78:	d86e      	bhi.n	8020c58 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x110>
 8020b7a:	ee7e 6a4c 	vsub.f32	s13, s28, s24
 8020b7e:	ee7d 7aee 	vsub.f32	s15, s27, s29
 8020b82:	ee3d 6a4e 	vsub.f32	s12, s26, s28
 8020b86:	ee3e 7aec 	vsub.f32	s14, s29, s25
 8020b8a:	ee66 7ae7 	vnmul.f32	s15, s13, s15
 8020b8e:	ee3c fa0d 	vadd.f32	s30, s24, s26
 8020b92:	ee7c faad 	vadd.f32	s31, s25, s27
 8020b96:	eee6 7a07 	vfma.f32	s15, s12, s14
 8020b9a:	ee7d 9a0e 	vadd.f32	s19, s26, s28
 8020b9e:	ee3d aaae 	vadd.f32	s20, s27, s29
 8020ba2:	ee2f fa2b 	vmul.f32	s30, s30, s23
 8020ba6:	ee6f faab 	vmul.f32	s31, s31, s23
 8020baa:	ee69 9aab 	vmul.f32	s19, s19, s23
 8020bae:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8020bb2:	ee2a aa2b 	vmul.f32	s20, s20, s23
 8020bb6:	ee7f 8a29 	vadd.f32	s17, s30, s19
 8020bba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bbe:	ee3f 9a8a 	vadd.f32	s18, s31, s20
 8020bc2:	ee68 8aab 	vmul.f32	s17, s17, s23
 8020bc6:	bf48      	it	mi
 8020bc8:	eef1 7a67 	vnegmi.f32	s15, s15
 8020bcc:	ee29 9a2b 	vmul.f32	s18, s18, s23
 8020bd0:	eeb5 6a00 	vmov.f32	s12, #80	@ 0x3e800000  0.250
 8020bd4:	eef4 7acb 	vcmpe.f32	s15, s22
 8020bd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bdc:	dd3f      	ble.n	8020c5e <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x116>
 8020bde:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020be2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020be6:	eea6 7aa6 	vfma.f32	s14, s13, s13
 8020bea:	ee27 7a06 	vmul.f32	s14, s14, s12
 8020bee:	eef4 7ac7 	vcmpe.f32	s15, s14
 8020bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020bf6:	d847      	bhi.n	8020c88 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8020bf8:	ee7e 0a4d 	vsub.f32	s1, s28, s26
 8020bfc:	ee3e 0aed 	vsub.f32	s0, s29, s27
 8020c00:	f000 fa39 	bl	8021076 <atan2f>
 8020c04:	eeb0 8a40 	vmov.f32	s16, s0
 8020c08:	ee7d 0a4c 	vsub.f32	s1, s26, s24
 8020c0c:	ee3d 0aec 	vsub.f32	s0, s27, s25
 8020c10:	f000 fa31 	bl	8021076 <atan2f>
 8020c14:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020c18:	eddf 7a29 	vldr	s15, [pc, #164]	@ 8020cc0 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x178>
 8020c1c:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c24:	bf48      	it	mi
 8020c26:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020c2a:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020c2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c32:	bfa4      	itt	ge
 8020c34:	eddf 7a23 	vldrge	s15, [pc, #140]	@ 8020cc4 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x17c>
 8020c38:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8020c3c:	eddf 7a22 	vldr	s15, [pc, #136]	@ 8020cc8 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x180>
 8020c40:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c48:	d51e      	bpl.n	8020c88 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x140>
 8020c4a:	eef0 0a49 	vmov.f32	s1, s18
 8020c4e:	4628      	mov	r0, r5
 8020c50:	eeb0 0a68 	vmov.f32	s0, s17
 8020c54:	f7ef feca 	bl	80109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020c58:	ecbd 8b10 	vpop	{d8-d15}
 8020c5c:	bd38      	pop	{r3, r4, r5, pc}
 8020c5e:	ee7c 7a0e 	vadd.f32	s15, s24, s28
 8020c62:	eeb0 7a68 	vmov.f32	s14, s17
 8020c66:	eef0 6a49 	vmov.f32	s13, s18
 8020c6a:	eea7 7aea 	vfms.f32	s14, s15, s21
 8020c6e:	ee7c 7aae 	vadd.f32	s15, s25, s29
 8020c72:	eee7 6aea 	vfms.f32	s13, s15, s21
 8020c76:	ee66 7aa6 	vmul.f32	s15, s13, s13
 8020c7a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020c7e:	eef4 7ac6 	vcmpe.f32	s15, s12
 8020c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020c86:	d9e0      	bls.n	8020c4a <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x102>
 8020c88:	3401      	adds	r4, #1
 8020c8a:	eef0 0a6c 	vmov.f32	s1, s25
 8020c8e:	eeb0 0a4c 	vmov.f32	s0, s24
 8020c92:	4628      	mov	r0, r5
 8020c94:	4621      	mov	r1, r4
 8020c96:	eef0 2a49 	vmov.f32	s5, s18
 8020c9a:	eeb0 2a68 	vmov.f32	s4, s17
 8020c9e:	eef0 1a6f 	vmov.f32	s3, s31
 8020ca2:	eeb0 1a4f 	vmov.f32	s2, s30
 8020ca6:	f7ff ff4f 	bl	8020b48 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj>
 8020caa:	eef0 da4a 	vmov.f32	s27, s20
 8020cae:	eeb0 da69 	vmov.f32	s26, s19
 8020cb2:	eef0 ca49 	vmov.f32	s25, s18
 8020cb6:	eeb0 ca68 	vmov.f32	s24, s17
 8020cba:	e75c      	b.n	8020b76 <_ZN8touchgfx6Canvas24recursiveQuadraticBezierEffffffj+0x2e>
 8020cbc:	2edbe6ff 	.word	0x2edbe6ff
 8020cc0:	40490fdb 	.word	0x40490fdb
 8020cc4:	40c90fdb 	.word	0x40c90fdb
 8020cc8:	3dcccccd 	.word	0x3dcccccd

08020ccc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>:
 8020ccc:	b530      	push	{r4, r5, lr}
 8020cce:	ed2d 8b10 	vpush	{d8-d15}
 8020cd2:	eef0 8a40 	vmov.f32	s17, s0
 8020cd6:	b085      	sub	sp, #20
 8020cd8:	eef0 9a60 	vmov.f32	s19, s1
 8020cdc:	4604      	mov	r4, r0
 8020cde:	eef0 fa41 	vmov.f32	s31, s2
 8020ce2:	460d      	mov	r5, r1
 8020ce4:	eeb0 fa61 	vmov.f32	s30, s3
 8020ce8:	eef0 ba42 	vmov.f32	s23, s4
 8020cec:	eeb0 ca62 	vmov.f32	s24, s5
 8020cf0:	eef0 aa43 	vmov.f32	s21, s6
 8020cf4:	eeb0 ba63 	vmov.f32	s22, s7
 8020cf8:	2d08      	cmp	r5, #8
 8020cfa:	f200 8113 	bhi.w	8020f24 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x258>
 8020cfe:	eef6 7a00 	vmov.f32	s15, #96	@ 0x3f000000  0.5
 8020d02:	ee3b 6aaa 	vadd.f32	s12, s23, s21
 8020d06:	ee7f 6aab 	vadd.f32	s13, s31, s23
 8020d0a:	ee38 daaf 	vadd.f32	s26, s17, s31
 8020d0e:	ee26 6a27 	vmul.f32	s12, s12, s15
 8020d12:	ee7c ca0b 	vadd.f32	s25, s24, s22
 8020d16:	ee2d da27 	vmul.f32	s26, s26, s15
 8020d1a:	ed8d 6a01 	vstr	s12, [sp, #4]
 8020d1e:	eea6 6aa7 	vfma.f32	s12, s13, s15
 8020d22:	ee6c caa7 	vmul.f32	s25, s25, s15
 8020d26:	eeb0 ea4d 	vmov.f32	s28, s26
 8020d2a:	ee79 da8f 	vadd.f32	s27, s19, s30
 8020d2e:	ee3f 7a0c 	vadd.f32	s14, s30, s24
 8020d32:	eea6 eaa7 	vfma.f32	s28, s13, s15
 8020d36:	ee66 6a27 	vmul.f32	s13, s12, s15
 8020d3a:	ee6d daa7 	vmul.f32	s27, s27, s15
 8020d3e:	edcd 6a03 	vstr	s13, [sp, #12]
 8020d42:	eef0 6a6c 	vmov.f32	s13, s25
 8020d46:	eef0 ea6d 	vmov.f32	s29, s27
 8020d4a:	ee2e ea27 	vmul.f32	s28, s28, s15
 8020d4e:	eee7 6a27 	vfma.f32	s13, s14, s15
 8020d52:	eee7 ea27 	vfma.f32	s29, s14, s15
 8020d56:	ee26 7aa7 	vmul.f32	s14, s13, s15
 8020d5a:	ee6e eaa7 	vmul.f32	s29, s29, s15
 8020d5e:	eef0 6a67 	vmov.f32	s13, s15
 8020d62:	ed8d 7a02 	vstr	s14, [sp, #8]
 8020d66:	ed9d 7a03 	vldr	s14, [sp, #12]
 8020d6a:	ee3e 9a07 	vadd.f32	s18, s28, s14
 8020d6e:	ed9d 7a02 	vldr	s14, [sp, #8]
 8020d72:	ee3e aa87 	vadd.f32	s20, s29, s14
 8020d76:	ee29 9a27 	vmul.f32	s18, s18, s15
 8020d7a:	ee2a aa27 	vmul.f32	s20, s20, s15
 8020d7e:	2d00      	cmp	r5, #0
 8020d80:	f000 810b 	beq.w	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020d84:	ee7a 5ae8 	vsub.f32	s11, s21, s17
 8020d88:	eddf 4a95 	vldr	s9, [pc, #596]	@ 8020fe0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020d8c:	ee3f 7a4b 	vsub.f32	s14, s30, s22
 8020d90:	ee7b 7a69 	vsub.f32	s15, s22, s19
 8020d94:	ee3f 6aea 	vsub.f32	s12, s31, s21
 8020d98:	ee25 7ac7 	vnmul.f32	s14, s11, s14
 8020d9c:	ee3b 5aea 	vsub.f32	s10, s23, s21
 8020da0:	eea6 7a27 	vfma.f32	s14, s12, s15
 8020da4:	ee3c 6a4b 	vsub.f32	s12, s24, s22
 8020da8:	ee25 6ac6 	vnmul.f32	s12, s11, s12
 8020dac:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8020db0:	eea5 6a27 	vfma.f32	s12, s10, s15
 8020db4:	eeb5 5a00 	vmov.f32	s10, #80	@ 0x3e800000  0.250
 8020db8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dbc:	bf48      	it	mi
 8020dbe:	eeb1 7a47 	vnegmi.f32	s14, s14
 8020dc2:	eeb5 6ac0 	vcmpe.f32	s12, #0.0
 8020dc6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dca:	eeb4 7ae4 	vcmpe.f32	s14, s9
 8020dce:	bf48      	it	mi
 8020dd0:	eeb1 6a46 	vnegmi.f32	s12, s12
 8020dd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020dd8:	f340 80a8 	ble.w	8020f2c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x260>
 8020ddc:	eeb4 6ae4 	vcmpe.f32	s12, s9
 8020de0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020de4:	dd5a      	ble.n	8020e9c <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1d0>
 8020de6:	ee65 5aa5 	vmul.f32	s11, s11, s11
 8020dea:	ee37 7a06 	vadd.f32	s14, s14, s12
 8020dee:	eee7 5aa7 	vfma.f32	s11, s15, s15
 8020df2:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020df6:	ee65 7a85 	vmul.f32	s15, s11, s10
 8020dfa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020dfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e02:	f200 80ca 	bhi.w	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020e06:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020e0a:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020e0e:	f000 f932 	bl	8021076 <atan2f>
 8020e12:	eeb0 8a40 	vmov.f32	s16, s0
 8020e16:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8020e1a:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8020e1e:	f000 f92a 	bl	8021076 <atan2f>
 8020e22:	ee38 fa40 	vsub.f32	s30, s16, s0
 8020e26:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020e2a:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020e2e:	eeb5 fac0 	vcmpe.f32	s30, #0.0
 8020e32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e36:	bf48      	it	mi
 8020e38:	eeb1 fa4f 	vnegmi.f32	s30, s30
 8020e3c:	f000 f91b 	bl	8021076 <atan2f>
 8020e40:	ee30 0a48 	vsub.f32	s0, s0, s16
 8020e44:	eddf 7a67 	vldr	s15, [pc, #412]	@ 8020fe4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020e48:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020e4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e50:	eeb4 fae7 	vcmpe.f32	s30, s15
 8020e54:	eddf 7a63 	vldr	s15, [pc, #396]	@ 8020fe4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020e58:	bf48      	it	mi
 8020e5a:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020e5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e62:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020e66:	eddf 7a60 	vldr	s15, [pc, #384]	@ 8020fe8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8020e6a:	bfa4      	itt	ge
 8020e6c:	ed9f 7a5f 	vldrge	s14, [pc, #380]	@ 8020fec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020e70:	ee37 fa4f 	vsubge.f32	s30, s14, s30
 8020e74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e78:	bfa4      	itt	ge
 8020e7a:	ed9f 7a5c 	vldrge	s14, [pc, #368]	@ 8020fec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020e7e:	ee37 0a40 	vsubge.f32	s0, s14, s0
 8020e82:	ee3f 0a00 	vadd.f32	s0, s30, s0
 8020e86:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020e8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020e8e:	f140 8084 	bpl.w	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020e92:	eef0 0a4a 	vmov.f32	s1, s20
 8020e96:	eeb0 0a49 	vmov.f32	s0, s18
 8020e9a:	e040      	b.n	8020f1e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x252>
 8020e9c:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020ea0:	ee27 7a07 	vmul.f32	s14, s14, s14
 8020ea4:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020ea8:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020eb4:	d871      	bhi.n	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020eb6:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020eba:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020ebe:	f000 f8da 	bl	8021076 <atan2f>
 8020ec2:	ee7f 0ae8 	vsub.f32	s1, s31, s17
 8020ec6:	eeb0 8a40 	vmov.f32	s16, s0
 8020eca:	ee3f 0a69 	vsub.f32	s0, s30, s19
 8020ece:	f000 f8d2 	bl	8021076 <atan2f>
 8020ed2:	ee38 0a40 	vsub.f32	s0, s16, s0
 8020ed6:	eddf 7a43 	vldr	s15, [pc, #268]	@ 8020fe4 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x318>
 8020eda:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8020ede:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ee2:	bf48      	it	mi
 8020ee4:	eeb1 0a40 	vnegmi.f32	s0, s0
 8020ee8:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020eec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020ef0:	bfa4      	itt	ge
 8020ef2:	eddf 7a3e 	vldrge	s15, [pc, #248]	@ 8020fec <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x320>
 8020ef6:	ee37 0ac0 	vsubge.f32	s0, s15, s0
 8020efa:	eddf 7a3b 	vldr	s15, [pc, #236]	@ 8020fe8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x31c>
 8020efe:	eeb4 0ae7 	vcmpe.f32	s0, s15
 8020f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f06:	d548      	bpl.n	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020f08:	eef0 0a4f 	vmov.f32	s1, s30
 8020f0c:	4620      	mov	r0, r4
 8020f0e:	eeb0 0a6f 	vmov.f32	s0, s31
 8020f12:	f7ef fd6b 	bl	80109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020f16:	eef0 0a4c 	vmov.f32	s1, s24
 8020f1a:	eeb0 0a6b 	vmov.f32	s0, s23
 8020f1e:	4620      	mov	r0, r4
 8020f20:	f7ef fd64 	bl	80109ec <_ZN8touchgfx6Canvas6lineToIfEEvT_S2_>
 8020f24:	b005      	add	sp, #20
 8020f26:	ecbd 8b10 	vpop	{d8-d15}
 8020f2a:	bd30      	pop	{r4, r5, pc}
 8020f2c:	ed9f 7a2c 	vldr	s14, [pc, #176]	@ 8020fe0 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x314>
 8020f30:	eeb4 6ac7 	vcmpe.f32	s12, s14
 8020f34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f38:	dd19      	ble.n	8020f6e <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2a2>
 8020f3a:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8020f3e:	ee26 7a06 	vmul.f32	s14, s12, s12
 8020f42:	eee5 7aa5 	vfma.f32	s15, s11, s11
 8020f46:	ee67 7a85 	vmul.f32	s15, s15, s10
 8020f4a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8020f4e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f52:	d822      	bhi.n	8020f9a <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2ce>
 8020f54:	ee7a 0aeb 	vsub.f32	s1, s21, s23
 8020f58:	ee3b 0a4c 	vsub.f32	s0, s22, s24
 8020f5c:	f000 f88b 	bl	8021076 <atan2f>
 8020f60:	ee7b 0aef 	vsub.f32	s1, s23, s31
 8020f64:	eeb0 8a40 	vmov.f32	s16, s0
 8020f68:	ee3c 0a4f 	vsub.f32	s0, s24, s30
 8020f6c:	e7af      	b.n	8020ece <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x202>
 8020f6e:	ee78 7aaa 	vadd.f32	s15, s17, s21
 8020f72:	eeb0 7a49 	vmov.f32	s14, s18
 8020f76:	eeb0 6a4a 	vmov.f32	s12, s20
 8020f7a:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8020f7e:	ee79 7a8b 	vadd.f32	s15, s19, s22
 8020f82:	eea7 6ae6 	vfms.f32	s12, s15, s13
 8020f86:	ee66 7a06 	vmul.f32	s15, s12, s12
 8020f8a:	eee7 7a07 	vfma.f32	s15, s14, s14
 8020f8e:	eef4 7ac5 	vcmpe.f32	s15, s10
 8020f92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8020f96:	f67f af7c 	bls.w	8020e92 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x1c6>
 8020f9a:	3501      	adds	r5, #1
 8020f9c:	eef0 0a69 	vmov.f32	s1, s19
 8020fa0:	eeb0 0a68 	vmov.f32	s0, s17
 8020fa4:	4620      	mov	r0, r4
 8020fa6:	4629      	mov	r1, r5
 8020fa8:	eef0 3a4a 	vmov.f32	s7, s20
 8020fac:	eeb0 3a49 	vmov.f32	s6, s18
 8020fb0:	eef0 2a6e 	vmov.f32	s5, s29
 8020fb4:	eeb0 2a4e 	vmov.f32	s4, s28
 8020fb8:	eef0 1a6d 	vmov.f32	s3, s27
 8020fbc:	eeb0 1a4d 	vmov.f32	s2, s26
 8020fc0:	f7ff fe84 	bl	8020ccc <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj>
 8020fc4:	eeb0 ca6c 	vmov.f32	s24, s25
 8020fc8:	eddd ba01 	vldr	s23, [sp, #4]
 8020fcc:	eef0 9a4a 	vmov.f32	s19, s20
 8020fd0:	ed9d fa02 	vldr	s30, [sp, #8]
 8020fd4:	eef0 8a49 	vmov.f32	s17, s18
 8020fd8:	eddd fa03 	vldr	s31, [sp, #12]
 8020fdc:	e68c      	b.n	8020cf8 <_ZN8touchgfx6Canvas20recursiveCubicBezierEffffffffj+0x2c>
 8020fde:	bf00      	nop
 8020fe0:	2edbe6ff 	.word	0x2edbe6ff
 8020fe4:	40490fdb 	.word	0x40490fdb
 8020fe8:	3dcccccd 	.word	0x3dcccccd
 8020fec:	40c90fdb 	.word	0x40c90fdb

08020ff0 <_ZN8touchgfx6CanvasD1Ev>:
 8020ff0:	4b04      	ldr	r3, [pc, #16]	@ (8021004 <_ZN8touchgfx6CanvasD1Ev+0x14>)
 8020ff2:	b510      	push	{r4, lr}
 8020ff4:	4604      	mov	r4, r0
 8020ff6:	f840 3b14 	str.w	r3, [r0], #20
 8020ffa:	f7f0 fb7f 	bl	80116fc <_ZN8touchgfx7OutlineD1Ev>
 8020ffe:	4620      	mov	r0, r4
 8021000:	bd10      	pop	{r4, pc}
 8021002:	bf00      	nop
 8021004:	080256c8 	.word	0x080256c8

08021008 <_ZN8touchgfx6CanvasD0Ev>:
 8021008:	b510      	push	{r4, lr}
 802100a:	4604      	mov	r4, r0
 802100c:	f7ff fff0 	bl	8020ff0 <_ZN8touchgfx6CanvasD1Ev>
 8021010:	2174      	movs	r1, #116	@ 0x74
 8021012:	4620      	mov	r0, r4
 8021014:	f000 f807 	bl	8021026 <_ZdlPvj>
 8021018:	4620      	mov	r0, r4
 802101a:	bd10      	pop	{r4, pc}

0802101c <__aeabi_atexit>:
 802101c:	460b      	mov	r3, r1
 802101e:	4601      	mov	r1, r0
 8021020:	4618      	mov	r0, r3
 8021022:	f000 bc5b 	b.w	80218dc <__cxa_atexit>

08021026 <_ZdlPvj>:
 8021026:	f000 b812 	b.w	802104e <_ZdlPv>

0802102a <__cxa_guard_acquire>:
 802102a:	6802      	ldr	r2, [r0, #0]
 802102c:	07d2      	lsls	r2, r2, #31
 802102e:	4603      	mov	r3, r0
 8021030:	d405      	bmi.n	802103e <__cxa_guard_acquire+0x14>
 8021032:	7842      	ldrb	r2, [r0, #1]
 8021034:	b102      	cbz	r2, 8021038 <__cxa_guard_acquire+0xe>
 8021036:	deff      	udf	#255	@ 0xff
 8021038:	2001      	movs	r0, #1
 802103a:	7058      	strb	r0, [r3, #1]
 802103c:	4770      	bx	lr
 802103e:	2000      	movs	r0, #0
 8021040:	4770      	bx	lr

08021042 <__cxa_guard_release>:
 8021042:	2301      	movs	r3, #1
 8021044:	6003      	str	r3, [r0, #0]
 8021046:	4770      	bx	lr

08021048 <__cxa_pure_virtual>:
 8021048:	b508      	push	{r3, lr}
 802104a:	f000 f80f 	bl	802106c <_ZSt9terminatev>

0802104e <_ZdlPv>:
 802104e:	f000 bb8f 	b.w	8021770 <free>

08021052 <_ZN10__cxxabiv111__terminateEPFvvE>:
 8021052:	b508      	push	{r3, lr}
 8021054:	4780      	blx	r0
 8021056:	f000 fb58 	bl	802170a <abort>
	...

0802105c <_ZSt13get_terminatev>:
 802105c:	4b02      	ldr	r3, [pc, #8]	@ (8021068 <_ZSt13get_terminatev+0xc>)
 802105e:	6818      	ldr	r0, [r3, #0]
 8021060:	f3bf 8f5b 	dmb	ish
 8021064:	4770      	bx	lr
 8021066:	bf00      	nop
 8021068:	24000108 	.word	0x24000108

0802106c <_ZSt9terminatev>:
 802106c:	b508      	push	{r3, lr}
 802106e:	f7ff fff5 	bl	802105c <_ZSt13get_terminatev>
 8021072:	f7ff ffee 	bl	8021052 <_ZN10__cxxabiv111__terminateEPFvvE>

08021076 <atan2f>:
 8021076:	f000 b9cf 	b.w	8021418 <__ieee754_atan2f>
	...

0802107c <sqrtf>:
 802107c:	b508      	push	{r3, lr}
 802107e:	ed2d 8b02 	vpush	{d8}
 8021082:	eeb0 8a40 	vmov.f32	s16, s0
 8021086:	f000 f9c4 	bl	8021412 <__ieee754_sqrtf>
 802108a:	eeb4 8a48 	vcmp.f32	s16, s16
 802108e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021092:	d60c      	bvs.n	80210ae <sqrtf+0x32>
 8021094:	eddf 8a07 	vldr	s17, [pc, #28]	@ 80210b4 <sqrtf+0x38>
 8021098:	eeb4 8ae8 	vcmpe.f32	s16, s17
 802109c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80210a0:	d505      	bpl.n	80210ae <sqrtf+0x32>
 80210a2:	f000 fedf 	bl	8021e64 <__errno>
 80210a6:	ee88 0aa8 	vdiv.f32	s0, s17, s17
 80210aa:	2321      	movs	r3, #33	@ 0x21
 80210ac:	6003      	str	r3, [r0, #0]
 80210ae:	ecbd 8b02 	vpop	{d8}
 80210b2:	bd08      	pop	{r3, pc}
 80210b4:	00000000 	.word	0x00000000

080210b8 <sinf_poly>:
 80210b8:	07cb      	lsls	r3, r1, #31
 80210ba:	d412      	bmi.n	80210e2 <sinf_poly+0x2a>
 80210bc:	ee21 5b00 	vmul.f64	d5, d1, d0
 80210c0:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 80210c4:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 80210c8:	eea6 7b01 	vfma.f64	d7, d6, d1
 80210cc:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 80210d0:	ee21 1b05 	vmul.f64	d1, d1, d5
 80210d4:	eea6 0b05 	vfma.f64	d0, d6, d5
 80210d8:	eea7 0b01 	vfma.f64	d0, d7, d1
 80210dc:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80210e0:	4770      	bx	lr
 80210e2:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 80210e6:	ee21 5b01 	vmul.f64	d5, d1, d1
 80210ea:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 80210ee:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 80210f2:	eea1 7b06 	vfma.f64	d7, d1, d6
 80210f6:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 80210fa:	eea1 0b06 	vfma.f64	d0, d1, d6
 80210fe:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 8021102:	ee21 1b05 	vmul.f64	d1, d1, d5
 8021106:	eea5 0b06 	vfma.f64	d0, d5, d6
 802110a:	e7e5      	b.n	80210d8 <sinf_poly+0x20>
 802110c:	0000      	movs	r0, r0
	...

08021110 <sinf>:
 8021110:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8021112:	ee10 4a10 	vmov	r4, s0
 8021116:	f3c4 530a 	ubfx	r3, r4, #20, #11
 802111a:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 802111e:	eeb7 6ac0 	vcvt.f64.f32	d6, s0
 8021122:	eef0 7a40 	vmov.f32	s15, s0
 8021126:	ea4f 5214 	mov.w	r2, r4, lsr #20
 802112a:	d218      	bcs.n	802115e <sinf+0x4e>
 802112c:	ee26 1b06 	vmul.f64	d1, d6, d6
 8021130:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 8021134:	d20a      	bcs.n	802114c <sinf+0x3c>
 8021136:	f412 6fff 	tst.w	r2, #2040	@ 0x7f8
 802113a:	d103      	bne.n	8021144 <sinf+0x34>
 802113c:	eeb7 1bc1 	vcvt.f32.f64	s2, d1
 8021140:	ed8d 1a01 	vstr	s2, [sp, #4]
 8021144:	eeb0 0a67 	vmov.f32	s0, s15
 8021148:	b003      	add	sp, #12
 802114a:	bd30      	pop	{r4, r5, pc}
 802114c:	483a      	ldr	r0, [pc, #232]	@ (8021238 <sinf+0x128>)
 802114e:	eeb0 0b46 	vmov.f64	d0, d6
 8021152:	2100      	movs	r1, #0
 8021154:	b003      	add	sp, #12
 8021156:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802115a:	f7ff bfad 	b.w	80210b8 <sinf_poly>
 802115e:	f240 422e 	movw	r2, #1070	@ 0x42e
 8021162:	4293      	cmp	r3, r2
 8021164:	d824      	bhi.n	80211b0 <sinf+0xa0>
 8021166:	4b34      	ldr	r3, [pc, #208]	@ (8021238 <sinf+0x128>)
 8021168:	ed93 7b08 	vldr	d7, [r3, #32]
 802116c:	ee26 7b07 	vmul.f64	d7, d6, d7
 8021170:	eefd 7bc7 	vcvt.s32.f64	s15, d7
 8021174:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021178:	ee17 1a90 	vmov	r1, s15
 802117c:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 8021180:	1609      	asrs	r1, r1, #24
 8021182:	ee07 1a90 	vmov	s15, r1
 8021186:	f001 0203 	and.w	r2, r1, #3
 802118a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802118e:	eeb8 5be7 	vcvt.f64.s32	d5, s15
 8021192:	ed92 0b00 	vldr	d0, [r2]
 8021196:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 802119a:	f011 0f02 	tst.w	r1, #2
 802119e:	eea5 6b47 	vfms.f64	d6, d5, d7
 80211a2:	bf08      	it	eq
 80211a4:	4618      	moveq	r0, r3
 80211a6:	ee26 1b06 	vmul.f64	d1, d6, d6
 80211aa:	ee20 0b06 	vmul.f64	d0, d0, d6
 80211ae:	e7d1      	b.n	8021154 <sinf+0x44>
 80211b0:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 80211b4:	d237      	bcs.n	8021226 <sinf+0x116>
 80211b6:	4921      	ldr	r1, [pc, #132]	@ (802123c <sinf+0x12c>)
 80211b8:	f3c4 6083 	ubfx	r0, r4, #26, #4
 80211bc:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 80211c0:	f3c4 0316 	ubfx	r3, r4, #0, #23
 80211c4:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 80211c8:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 80211cc:	6a10      	ldr	r0, [r2, #32]
 80211ce:	6912      	ldr	r2, [r2, #16]
 80211d0:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80211d4:	40ab      	lsls	r3, r5
 80211d6:	fba0 5003 	umull	r5, r0, r0, r3
 80211da:	4359      	muls	r1, r3
 80211dc:	fbe3 0102 	umlal	r0, r1, r3, r2
 80211e0:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 80211e4:	0f9d      	lsrs	r5, r3, #30
 80211e6:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80211ea:	1ac9      	subs	r1, r1, r3
 80211ec:	f7df fa56 	bl	800069c <__aeabi_l2d>
 80211f0:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 80211f4:	4b10      	ldr	r3, [pc, #64]	@ (8021238 <sinf+0x128>)
 80211f6:	f004 0203 	and.w	r2, r4, #3
 80211fa:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 80211fe:	ed9f 6b0c 	vldr	d6, [pc, #48]	@ 8021230 <sinf+0x120>
 8021202:	ed92 0b00 	vldr	d0, [r2]
 8021206:	ec41 0b17 	vmov	d7, r0, r1
 802120a:	f014 0f02 	tst.w	r4, #2
 802120e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8021212:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021216:	4629      	mov	r1, r5
 8021218:	bf08      	it	eq
 802121a:	4618      	moveq	r0, r3
 802121c:	ee27 1b07 	vmul.f64	d1, d7, d7
 8021220:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021224:	e796      	b.n	8021154 <sinf+0x44>
 8021226:	b003      	add	sp, #12
 8021228:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 802122c:	f000 b8e2 	b.w	80213f4 <__math_invalidf>
 8021230:	54442d18 	.word	0x54442d18
 8021234:	3c1921fb 	.word	0x3c1921fb
 8021238:	08025738 	.word	0x08025738
 802123c:	080256d4 	.word	0x080256d4

08021240 <sinf_poly>:
 8021240:	07cb      	lsls	r3, r1, #31
 8021242:	d412      	bmi.n	802126a <sinf_poly+0x2a>
 8021244:	ee21 5b00 	vmul.f64	d5, d1, d0
 8021248:	ed90 6b1a 	vldr	d6, [r0, #104]	@ 0x68
 802124c:	ed90 7b18 	vldr	d7, [r0, #96]	@ 0x60
 8021250:	eea6 7b01 	vfma.f64	d7, d6, d1
 8021254:	ed90 6b16 	vldr	d6, [r0, #88]	@ 0x58
 8021258:	ee21 1b05 	vmul.f64	d1, d1, d5
 802125c:	eea6 0b05 	vfma.f64	d0, d6, d5
 8021260:	eea7 0b01 	vfma.f64	d0, d7, d1
 8021264:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8021268:	4770      	bx	lr
 802126a:	ed90 6b14 	vldr	d6, [r0, #80]	@ 0x50
 802126e:	ee21 5b01 	vmul.f64	d5, d1, d1
 8021272:	ed90 7b12 	vldr	d7, [r0, #72]	@ 0x48
 8021276:	ed90 0b0c 	vldr	d0, [r0, #48]	@ 0x30
 802127a:	eea1 7b06 	vfma.f64	d7, d1, d6
 802127e:	ed90 6b0e 	vldr	d6, [r0, #56]	@ 0x38
 8021282:	eea1 0b06 	vfma.f64	d0, d1, d6
 8021286:	ed90 6b10 	vldr	d6, [r0, #64]	@ 0x40
 802128a:	ee21 1b05 	vmul.f64	d1, d1, d5
 802128e:	eea5 0b06 	vfma.f64	d0, d5, d6
 8021292:	e7e5      	b.n	8021260 <sinf_poly+0x20>
 8021294:	0000      	movs	r0, r0
	...

08021298 <cosf>:
 8021298:	b538      	push	{r3, r4, r5, lr}
 802129a:	ee10 4a10 	vmov	r4, s0
 802129e:	f3c4 530a 	ubfx	r3, r4, #20, #11
 80212a2:	f5b3 7f7d 	cmp.w	r3, #1012	@ 0x3f4
 80212a6:	eeb7 7ac0 	vcvt.f64.f32	d7, s0
 80212aa:	d21f      	bcs.n	80212ec <cosf+0x54>
 80212ac:	ee27 7b07 	vmul.f64	d7, d7, d7
 80212b0:	f5b3 7f66 	cmp.w	r3, #920	@ 0x398
 80212b4:	f0c0 8082 	bcc.w	80213bc <cosf+0x124>
 80212b8:	ee27 4b07 	vmul.f64	d4, d7, d7
 80212bc:	4b44      	ldr	r3, [pc, #272]	@ (80213d0 <cosf+0x138>)
 80212be:	ed93 5b14 	vldr	d5, [r3, #80]	@ 0x50
 80212c2:	ed93 6b12 	vldr	d6, [r3, #72]	@ 0x48
 80212c6:	ed93 0b0c 	vldr	d0, [r3, #48]	@ 0x30
 80212ca:	eea7 6b05 	vfma.f64	d6, d7, d5
 80212ce:	ed93 5b0e 	vldr	d5, [r3, #56]	@ 0x38
 80212d2:	eea7 0b05 	vfma.f64	d0, d7, d5
 80212d6:	ed93 5b10 	vldr	d5, [r3, #64]	@ 0x40
 80212da:	ee27 7b04 	vmul.f64	d7, d7, d4
 80212de:	eea4 0b05 	vfma.f64	d0, d4, d5
 80212e2:	eea6 0b07 	vfma.f64	d0, d6, d7
 80212e6:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80212ea:	bd38      	pop	{r3, r4, r5, pc}
 80212ec:	f240 422e 	movw	r2, #1070	@ 0x42e
 80212f0:	4293      	cmp	r3, r2
 80212f2:	d829      	bhi.n	8021348 <cosf+0xb0>
 80212f4:	4b36      	ldr	r3, [pc, #216]	@ (80213d0 <cosf+0x138>)
 80212f6:	ed93 6b08 	vldr	d6, [r3, #32]
 80212fa:	ee27 6b06 	vmul.f64	d6, d7, d6
 80212fe:	eefd 6bc6 	vcvt.s32.f64	s13, d6
 8021302:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 8021306:	ee16 1a90 	vmov	r1, s13
 802130a:	f501 0100 	add.w	r1, r1, #8388608	@ 0x800000
 802130e:	1609      	asrs	r1, r1, #24
 8021310:	ee06 1a90 	vmov	s13, r1
 8021314:	f001 0203 	and.w	r2, r1, #3
 8021318:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802131c:	eeb8 5be6 	vcvt.f64.s32	d5, s13
 8021320:	ed92 0b00 	vldr	d0, [r2]
 8021324:	ed93 6b0a 	vldr	d6, [r3, #40]	@ 0x28
 8021328:	f011 0f02 	tst.w	r1, #2
 802132c:	f081 0101 	eor.w	r1, r1, #1
 8021330:	eea5 7b46 	vfms.f64	d7, d5, d6
 8021334:	bf08      	it	eq
 8021336:	4618      	moveq	r0, r3
 8021338:	ee27 1b07 	vmul.f64	d1, d7, d7
 802133c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021340:	ee20 0b07 	vmul.f64	d0, d0, d7
 8021344:	f7ff bf7c 	b.w	8021240 <sinf_poly>
 8021348:	f5b3 6fff 	cmp.w	r3, #2040	@ 0x7f8
 802134c:	d232      	bcs.n	80213b4 <cosf+0x11c>
 802134e:	4921      	ldr	r1, [pc, #132]	@ (80213d4 <cosf+0x13c>)
 8021350:	f3c4 6083 	ubfx	r0, r4, #26, #4
 8021354:	eb01 0280 	add.w	r2, r1, r0, lsl #2
 8021358:	f3c4 0316 	ubfx	r3, r4, #0, #23
 802135c:	f3c4 55c2 	ubfx	r5, r4, #23, #3
 8021360:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
 8021364:	6a10      	ldr	r0, [r2, #32]
 8021366:	6912      	ldr	r2, [r2, #16]
 8021368:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 802136c:	40ab      	lsls	r3, r5
 802136e:	fba0 5003 	umull	r5, r0, r0, r3
 8021372:	4359      	muls	r1, r3
 8021374:	fbe3 0102 	umlal	r0, r1, r3, r2
 8021378:	f101 5300 	add.w	r3, r1, #536870912	@ 0x20000000
 802137c:	0f9d      	lsrs	r5, r3, #30
 802137e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8021382:	1ac9      	subs	r1, r1, r3
 8021384:	f7df f98a 	bl	800069c <__aeabi_l2d>
 8021388:	eb05 74d4 	add.w	r4, r5, r4, lsr #31
 802138c:	4b10      	ldr	r3, [pc, #64]	@ (80213d0 <cosf+0x138>)
 802138e:	ed9f 6b0e 	vldr	d6, [pc, #56]	@ 80213c8 <cosf+0x130>
 8021392:	ec41 0b17 	vmov	d7, r0, r1
 8021396:	f004 0203 	and.w	r2, r4, #3
 802139a:	eb03 02c2 	add.w	r2, r3, r2, lsl #3
 802139e:	ed92 0b00 	vldr	d0, [r2]
 80213a2:	ee27 7b06 	vmul.f64	d7, d7, d6
 80213a6:	f103 0070 	add.w	r0, r3, #112	@ 0x70
 80213aa:	f014 0f02 	tst.w	r4, #2
 80213ae:	f085 0101 	eor.w	r1, r5, #1
 80213b2:	e7bf      	b.n	8021334 <cosf+0x9c>
 80213b4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80213b8:	f000 b81c 	b.w	80213f4 <__math_invalidf>
 80213bc:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 80213c0:	e793      	b.n	80212ea <cosf+0x52>
 80213c2:	bf00      	nop
 80213c4:	f3af 8000 	nop.w
 80213c8:	54442d18 	.word	0x54442d18
 80213cc:	3c1921fb 	.word	0x3c1921fb
 80213d0:	08025738 	.word	0x08025738
 80213d4:	080256d4 	.word	0x080256d4

080213d8 <with_errnof>:
 80213d8:	b510      	push	{r4, lr}
 80213da:	ed2d 8b02 	vpush	{d8}
 80213de:	eeb0 8a40 	vmov.f32	s16, s0
 80213e2:	4604      	mov	r4, r0
 80213e4:	f000 fd3e 	bl	8021e64 <__errno>
 80213e8:	eeb0 0a48 	vmov.f32	s0, s16
 80213ec:	ecbd 8b02 	vpop	{d8}
 80213f0:	6004      	str	r4, [r0, #0]
 80213f2:	bd10      	pop	{r4, pc}

080213f4 <__math_invalidf>:
 80213f4:	eef0 7a40 	vmov.f32	s15, s0
 80213f8:	ee30 7a40 	vsub.f32	s14, s0, s0
 80213fc:	eef4 7a67 	vcmp.f32	s15, s15
 8021400:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8021404:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8021408:	d602      	bvs.n	8021410 <__math_invalidf+0x1c>
 802140a:	2021      	movs	r0, #33	@ 0x21
 802140c:	f7ff bfe4 	b.w	80213d8 <with_errnof>
 8021410:	4770      	bx	lr

08021412 <__ieee754_sqrtf>:
 8021412:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8021416:	4770      	bx	lr

08021418 <__ieee754_atan2f>:
 8021418:	ee10 2a90 	vmov	r2, s1
 802141c:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 8021420:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021424:	b510      	push	{r4, lr}
 8021426:	eef0 7a40 	vmov.f32	s15, s0
 802142a:	d806      	bhi.n	802143a <__ieee754_atan2f+0x22>
 802142c:	ee10 0a10 	vmov	r0, s0
 8021430:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 8021434:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8021438:	d904      	bls.n	8021444 <__ieee754_atan2f+0x2c>
 802143a:	ee77 7aa0 	vadd.f32	s15, s15, s1
 802143e:	eeb0 0a67 	vmov.f32	s0, s15
 8021442:	bd10      	pop	{r4, pc}
 8021444:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 8021448:	d103      	bne.n	8021452 <__ieee754_atan2f+0x3a>
 802144a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 802144e:	f000 b881 	b.w	8021554 <atanf>
 8021452:	1794      	asrs	r4, r2, #30
 8021454:	f004 0402 	and.w	r4, r4, #2
 8021458:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 802145c:	b93b      	cbnz	r3, 802146e <__ieee754_atan2f+0x56>
 802145e:	2c02      	cmp	r4, #2
 8021460:	d05c      	beq.n	802151c <__ieee754_atan2f+0x104>
 8021462:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 8021530 <__ieee754_atan2f+0x118>
 8021466:	2c03      	cmp	r4, #3
 8021468:	fe47 7a00 	vseleq.f32	s15, s14, s0
 802146c:	e7e7      	b.n	802143e <__ieee754_atan2f+0x26>
 802146e:	b939      	cbnz	r1, 8021480 <__ieee754_atan2f+0x68>
 8021470:	eddf 7a30 	vldr	s15, [pc, #192]	@ 8021534 <__ieee754_atan2f+0x11c>
 8021474:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 8021538 <__ieee754_atan2f+0x120>
 8021478:	2800      	cmp	r0, #0
 802147a:	fe67 7a87 	vselge.f32	s15, s15, s14
 802147e:	e7de      	b.n	802143e <__ieee754_atan2f+0x26>
 8021480:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 8021484:	d110      	bne.n	80214a8 <__ieee754_atan2f+0x90>
 8021486:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 802148a:	f104 34ff 	add.w	r4, r4, #4294967295
 802148e:	d107      	bne.n	80214a0 <__ieee754_atan2f+0x88>
 8021490:	2c02      	cmp	r4, #2
 8021492:	d846      	bhi.n	8021522 <__ieee754_atan2f+0x10a>
 8021494:	4b29      	ldr	r3, [pc, #164]	@ (802153c <__ieee754_atan2f+0x124>)
 8021496:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 802149a:	edd3 7a00 	vldr	s15, [r3]
 802149e:	e7ce      	b.n	802143e <__ieee754_atan2f+0x26>
 80214a0:	2c02      	cmp	r4, #2
 80214a2:	d841      	bhi.n	8021528 <__ieee754_atan2f+0x110>
 80214a4:	4b26      	ldr	r3, [pc, #152]	@ (8021540 <__ieee754_atan2f+0x128>)
 80214a6:	e7f6      	b.n	8021496 <__ieee754_atan2f+0x7e>
 80214a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80214ac:	d0e0      	beq.n	8021470 <__ieee754_atan2f+0x58>
 80214ae:	1a5b      	subs	r3, r3, r1
 80214b0:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 80214b4:	ea4f 51e3 	mov.w	r1, r3, asr #23
 80214b8:	da1a      	bge.n	80214f0 <__ieee754_atan2f+0xd8>
 80214ba:	2a00      	cmp	r2, #0
 80214bc:	da01      	bge.n	80214c2 <__ieee754_atan2f+0xaa>
 80214be:	313c      	adds	r1, #60	@ 0x3c
 80214c0:	db19      	blt.n	80214f6 <__ieee754_atan2f+0xde>
 80214c2:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 80214c6:	f000 f919 	bl	80216fc <fabsf>
 80214ca:	f000 f843 	bl	8021554 <atanf>
 80214ce:	eef0 7a40 	vmov.f32	s15, s0
 80214d2:	2c01      	cmp	r4, #1
 80214d4:	d012      	beq.n	80214fc <__ieee754_atan2f+0xe4>
 80214d6:	2c02      	cmp	r4, #2
 80214d8:	d017      	beq.n	802150a <__ieee754_atan2f+0xf2>
 80214da:	2c00      	cmp	r4, #0
 80214dc:	d0af      	beq.n	802143e <__ieee754_atan2f+0x26>
 80214de:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 8021544 <__ieee754_atan2f+0x12c>
 80214e2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80214e6:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 8021548 <__ieee754_atan2f+0x130>
 80214ea:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80214ee:	e7a6      	b.n	802143e <__ieee754_atan2f+0x26>
 80214f0:	eddf 7a10 	vldr	s15, [pc, #64]	@ 8021534 <__ieee754_atan2f+0x11c>
 80214f4:	e7ed      	b.n	80214d2 <__ieee754_atan2f+0xba>
 80214f6:	eddf 7a15 	vldr	s15, [pc, #84]	@ 802154c <__ieee754_atan2f+0x134>
 80214fa:	e7ea      	b.n	80214d2 <__ieee754_atan2f+0xba>
 80214fc:	ee17 3a90 	vmov	r3, s15
 8021500:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 8021504:	ee07 3a90 	vmov	s15, r3
 8021508:	e799      	b.n	802143e <__ieee754_atan2f+0x26>
 802150a:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8021544 <__ieee754_atan2f+0x12c>
 802150e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8021512:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 8021548 <__ieee754_atan2f+0x130>
 8021516:	ee77 7a67 	vsub.f32	s15, s14, s15
 802151a:	e790      	b.n	802143e <__ieee754_atan2f+0x26>
 802151c:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 8021548 <__ieee754_atan2f+0x130>
 8021520:	e78d      	b.n	802143e <__ieee754_atan2f+0x26>
 8021522:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 8021550 <__ieee754_atan2f+0x138>
 8021526:	e78a      	b.n	802143e <__ieee754_atan2f+0x26>
 8021528:	eddf 7a08 	vldr	s15, [pc, #32]	@ 802154c <__ieee754_atan2f+0x134>
 802152c:	e787      	b.n	802143e <__ieee754_atan2f+0x26>
 802152e:	bf00      	nop
 8021530:	c0490fdb 	.word	0xc0490fdb
 8021534:	3fc90fdb 	.word	0x3fc90fdb
 8021538:	bfc90fdb 	.word	0xbfc90fdb
 802153c:	08025824 	.word	0x08025824
 8021540:	08025818 	.word	0x08025818
 8021544:	33bbbd2e 	.word	0x33bbbd2e
 8021548:	40490fdb 	.word	0x40490fdb
 802154c:	00000000 	.word	0x00000000
 8021550:	3f490fdb 	.word	0x3f490fdb

08021554 <atanf>:
 8021554:	b538      	push	{r3, r4, r5, lr}
 8021556:	ee10 5a10 	vmov	r5, s0
 802155a:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 802155e:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 8021562:	eef0 7a40 	vmov.f32	s15, s0
 8021566:	d30f      	bcc.n	8021588 <atanf+0x34>
 8021568:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 802156c:	d904      	bls.n	8021578 <atanf+0x24>
 802156e:	ee70 7a00 	vadd.f32	s15, s0, s0
 8021572:	eeb0 0a67 	vmov.f32	s0, s15
 8021576:	bd38      	pop	{r3, r4, r5, pc}
 8021578:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 80216b0 <atanf+0x15c>
 802157c:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 80216b4 <atanf+0x160>
 8021580:	2d00      	cmp	r5, #0
 8021582:	fe77 7a27 	vselgt.f32	s15, s14, s15
 8021586:	e7f4      	b.n	8021572 <atanf+0x1e>
 8021588:	4b4b      	ldr	r3, [pc, #300]	@ (80216b8 <atanf+0x164>)
 802158a:	429c      	cmp	r4, r3
 802158c:	d810      	bhi.n	80215b0 <atanf+0x5c>
 802158e:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 8021592:	d20a      	bcs.n	80215aa <atanf+0x56>
 8021594:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 80216bc <atanf+0x168>
 8021598:	ee30 7a07 	vadd.f32	s14, s0, s14
 802159c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80215a0:	eeb4 7ae6 	vcmpe.f32	s14, s13
 80215a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80215a8:	dce3      	bgt.n	8021572 <atanf+0x1e>
 80215aa:	f04f 33ff 	mov.w	r3, #4294967295
 80215ae:	e013      	b.n	80215d8 <atanf+0x84>
 80215b0:	f000 f8a4 	bl	80216fc <fabsf>
 80215b4:	4b42      	ldr	r3, [pc, #264]	@ (80216c0 <atanf+0x16c>)
 80215b6:	429c      	cmp	r4, r3
 80215b8:	d84f      	bhi.n	802165a <atanf+0x106>
 80215ba:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 80215be:	429c      	cmp	r4, r3
 80215c0:	d841      	bhi.n	8021646 <atanf+0xf2>
 80215c2:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 80215c6:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80215ca:	eea0 7a27 	vfma.f32	s14, s0, s15
 80215ce:	2300      	movs	r3, #0
 80215d0:	ee30 0a27 	vadd.f32	s0, s0, s15
 80215d4:	eec7 7a00 	vdiv.f32	s15, s14, s0
 80215d8:	1c5a      	adds	r2, r3, #1
 80215da:	ee27 6aa7 	vmul.f32	s12, s15, s15
 80215de:	ed9f 7a39 	vldr	s14, [pc, #228]	@ 80216c4 <atanf+0x170>
 80215e2:	eddf 5a39 	vldr	s11, [pc, #228]	@ 80216c8 <atanf+0x174>
 80215e6:	ed9f 5a39 	vldr	s10, [pc, #228]	@ 80216cc <atanf+0x178>
 80215ea:	ee66 6a06 	vmul.f32	s13, s12, s12
 80215ee:	eee6 5a87 	vfma.f32	s11, s13, s14
 80215f2:	ed9f 7a37 	vldr	s14, [pc, #220]	@ 80216d0 <atanf+0x17c>
 80215f6:	eea5 7aa6 	vfma.f32	s14, s11, s13
 80215fa:	eddf 5a36 	vldr	s11, [pc, #216]	@ 80216d4 <atanf+0x180>
 80215fe:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021602:	ed9f 7a35 	vldr	s14, [pc, #212]	@ 80216d8 <atanf+0x184>
 8021606:	eea5 7aa6 	vfma.f32	s14, s11, s13
 802160a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 80216dc <atanf+0x188>
 802160e:	eee7 5a26 	vfma.f32	s11, s14, s13
 8021612:	ed9f 7a33 	vldr	s14, [pc, #204]	@ 80216e0 <atanf+0x18c>
 8021616:	eea6 5a87 	vfma.f32	s10, s13, s14
 802161a:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 80216e4 <atanf+0x190>
 802161e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021622:	ed9f 5a31 	vldr	s10, [pc, #196]	@ 80216e8 <atanf+0x194>
 8021626:	eea7 5a26 	vfma.f32	s10, s14, s13
 802162a:	ed9f 7a30 	vldr	s14, [pc, #192]	@ 80216ec <atanf+0x198>
 802162e:	eea5 7a26 	vfma.f32	s14, s10, s13
 8021632:	ee27 7a26 	vmul.f32	s14, s14, s13
 8021636:	eea5 7a86 	vfma.f32	s14, s11, s12
 802163a:	ee27 7a87 	vmul.f32	s14, s15, s14
 802163e:	d121      	bne.n	8021684 <atanf+0x130>
 8021640:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8021644:	e795      	b.n	8021572 <atanf+0x1e>
 8021646:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 802164a:	ee30 7a67 	vsub.f32	s14, s0, s15
 802164e:	ee30 0a27 	vadd.f32	s0, s0, s15
 8021652:	2301      	movs	r3, #1
 8021654:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021658:	e7be      	b.n	80215d8 <atanf+0x84>
 802165a:	4b25      	ldr	r3, [pc, #148]	@ (80216f0 <atanf+0x19c>)
 802165c:	429c      	cmp	r4, r3
 802165e:	d80b      	bhi.n	8021678 <atanf+0x124>
 8021660:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8021664:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8021668:	eea0 7a27 	vfma.f32	s14, s0, s15
 802166c:	2302      	movs	r3, #2
 802166e:	ee70 6a67 	vsub.f32	s13, s0, s15
 8021672:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8021676:	e7af      	b.n	80215d8 <atanf+0x84>
 8021678:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 802167c:	eec7 7a00 	vdiv.f32	s15, s14, s0
 8021680:	2303      	movs	r3, #3
 8021682:	e7a9      	b.n	80215d8 <atanf+0x84>
 8021684:	4a1b      	ldr	r2, [pc, #108]	@ (80216f4 <atanf+0x1a0>)
 8021686:	491c      	ldr	r1, [pc, #112]	@ (80216f8 <atanf+0x1a4>)
 8021688:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 802168c:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 8021690:	edd3 6a00 	vldr	s13, [r3]
 8021694:	ee37 7a66 	vsub.f32	s14, s14, s13
 8021698:	2d00      	cmp	r5, #0
 802169a:	ee37 7a67 	vsub.f32	s14, s14, s15
 802169e:	edd2 7a00 	vldr	s15, [r2]
 80216a2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80216a6:	bfb8      	it	lt
 80216a8:	eef1 7a67 	vneglt.f32	s15, s15
 80216ac:	e761      	b.n	8021572 <atanf+0x1e>
 80216ae:	bf00      	nop
 80216b0:	bfc90fdb 	.word	0xbfc90fdb
 80216b4:	3fc90fdb 	.word	0x3fc90fdb
 80216b8:	3edfffff 	.word	0x3edfffff
 80216bc:	7149f2ca 	.word	0x7149f2ca
 80216c0:	3f97ffff 	.word	0x3f97ffff
 80216c4:	3c8569d7 	.word	0x3c8569d7
 80216c8:	3d4bda59 	.word	0x3d4bda59
 80216cc:	bd6ef16b 	.word	0xbd6ef16b
 80216d0:	3d886b35 	.word	0x3d886b35
 80216d4:	3dba2e6e 	.word	0x3dba2e6e
 80216d8:	3e124925 	.word	0x3e124925
 80216dc:	3eaaaaab 	.word	0x3eaaaaab
 80216e0:	bd15a221 	.word	0xbd15a221
 80216e4:	bd9d8795 	.word	0xbd9d8795
 80216e8:	bde38e38 	.word	0xbde38e38
 80216ec:	be4ccccd 	.word	0xbe4ccccd
 80216f0:	401bffff 	.word	0x401bffff
 80216f4:	08025840 	.word	0x08025840
 80216f8:	08025830 	.word	0x08025830

080216fc <fabsf>:
 80216fc:	ee10 3a10 	vmov	r3, s0
 8021700:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8021704:	ee00 3a10 	vmov	s0, r3
 8021708:	4770      	bx	lr

0802170a <abort>:
 802170a:	b508      	push	{r3, lr}
 802170c:	2006      	movs	r0, #6
 802170e:	f000 fae1 	bl	8021cd4 <raise>
 8021712:	2001      	movs	r0, #1
 8021714:	f7e0 f9d8 	bl	8001ac8 <_exit>

08021718 <__assert_func>:
 8021718:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 802171a:	4614      	mov	r4, r2
 802171c:	461a      	mov	r2, r3
 802171e:	4b09      	ldr	r3, [pc, #36]	@ (8021744 <__assert_func+0x2c>)
 8021720:	681b      	ldr	r3, [r3, #0]
 8021722:	4605      	mov	r5, r0
 8021724:	68d8      	ldr	r0, [r3, #12]
 8021726:	b954      	cbnz	r4, 802173e <__assert_func+0x26>
 8021728:	4b07      	ldr	r3, [pc, #28]	@ (8021748 <__assert_func+0x30>)
 802172a:	461c      	mov	r4, r3
 802172c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8021730:	9100      	str	r1, [sp, #0]
 8021732:	462b      	mov	r3, r5
 8021734:	4905      	ldr	r1, [pc, #20]	@ (802174c <__assert_func+0x34>)
 8021736:	f000 f983 	bl	8021a40 <fiprintf>
 802173a:	f7ff ffe6 	bl	802170a <abort>
 802173e:	4b04      	ldr	r3, [pc, #16]	@ (8021750 <__assert_func+0x38>)
 8021740:	e7f4      	b.n	802172c <__assert_func+0x14>
 8021742:	bf00      	nop
 8021744:	24000118 	.word	0x24000118
 8021748:	0802588b 	.word	0x0802588b
 802174c:	0802585d 	.word	0x0802585d
 8021750:	08025850 	.word	0x08025850

08021754 <atexit>:
 8021754:	2300      	movs	r3, #0
 8021756:	4601      	mov	r1, r0
 8021758:	461a      	mov	r2, r3
 802175a:	4618      	mov	r0, r3
 802175c:	f000 bbbe 	b.w	8021edc <__register_exitproc>

08021760 <malloc>:
 8021760:	4b02      	ldr	r3, [pc, #8]	@ (802176c <malloc+0xc>)
 8021762:	4601      	mov	r1, r0
 8021764:	6818      	ldr	r0, [r3, #0]
 8021766:	f000 b82d 	b.w	80217c4 <_malloc_r>
 802176a:	bf00      	nop
 802176c:	24000118 	.word	0x24000118

08021770 <free>:
 8021770:	4b02      	ldr	r3, [pc, #8]	@ (802177c <free+0xc>)
 8021772:	4601      	mov	r1, r0
 8021774:	6818      	ldr	r0, [r3, #0]
 8021776:	f000 bc0d 	b.w	8021f94 <_free_r>
 802177a:	bf00      	nop
 802177c:	24000118 	.word	0x24000118

08021780 <sbrk_aligned>:
 8021780:	b570      	push	{r4, r5, r6, lr}
 8021782:	4e0f      	ldr	r6, [pc, #60]	@ (80217c0 <sbrk_aligned+0x40>)
 8021784:	460c      	mov	r4, r1
 8021786:	6831      	ldr	r1, [r6, #0]
 8021788:	4605      	mov	r5, r0
 802178a:	b911      	cbnz	r1, 8021792 <sbrk_aligned+0x12>
 802178c:	f000 fb48 	bl	8021e20 <_sbrk_r>
 8021790:	6030      	str	r0, [r6, #0]
 8021792:	4621      	mov	r1, r4
 8021794:	4628      	mov	r0, r5
 8021796:	f000 fb43 	bl	8021e20 <_sbrk_r>
 802179a:	1c43      	adds	r3, r0, #1
 802179c:	d103      	bne.n	80217a6 <sbrk_aligned+0x26>
 802179e:	f04f 34ff 	mov.w	r4, #4294967295
 80217a2:	4620      	mov	r0, r4
 80217a4:	bd70      	pop	{r4, r5, r6, pc}
 80217a6:	1cc4      	adds	r4, r0, #3
 80217a8:	f024 0403 	bic.w	r4, r4, #3
 80217ac:	42a0      	cmp	r0, r4
 80217ae:	d0f8      	beq.n	80217a2 <sbrk_aligned+0x22>
 80217b0:	1a21      	subs	r1, r4, r0
 80217b2:	4628      	mov	r0, r5
 80217b4:	f000 fb34 	bl	8021e20 <_sbrk_r>
 80217b8:	3001      	adds	r0, #1
 80217ba:	d1f2      	bne.n	80217a2 <sbrk_aligned+0x22>
 80217bc:	e7ef      	b.n	802179e <sbrk_aligned+0x1e>
 80217be:	bf00      	nop
 80217c0:	24025de4 	.word	0x24025de4

080217c4 <_malloc_r>:
 80217c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80217c8:	1ccd      	adds	r5, r1, #3
 80217ca:	f025 0503 	bic.w	r5, r5, #3
 80217ce:	3508      	adds	r5, #8
 80217d0:	2d0c      	cmp	r5, #12
 80217d2:	bf38      	it	cc
 80217d4:	250c      	movcc	r5, #12
 80217d6:	2d00      	cmp	r5, #0
 80217d8:	4606      	mov	r6, r0
 80217da:	db01      	blt.n	80217e0 <_malloc_r+0x1c>
 80217dc:	42a9      	cmp	r1, r5
 80217de:	d904      	bls.n	80217ea <_malloc_r+0x26>
 80217e0:	230c      	movs	r3, #12
 80217e2:	6033      	str	r3, [r6, #0]
 80217e4:	2000      	movs	r0, #0
 80217e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80217ea:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80218c0 <_malloc_r+0xfc>
 80217ee:	f000 f869 	bl	80218c4 <__malloc_lock>
 80217f2:	f8d8 3000 	ldr.w	r3, [r8]
 80217f6:	461c      	mov	r4, r3
 80217f8:	bb44      	cbnz	r4, 802184c <_malloc_r+0x88>
 80217fa:	4629      	mov	r1, r5
 80217fc:	4630      	mov	r0, r6
 80217fe:	f7ff ffbf 	bl	8021780 <sbrk_aligned>
 8021802:	1c43      	adds	r3, r0, #1
 8021804:	4604      	mov	r4, r0
 8021806:	d158      	bne.n	80218ba <_malloc_r+0xf6>
 8021808:	f8d8 4000 	ldr.w	r4, [r8]
 802180c:	4627      	mov	r7, r4
 802180e:	2f00      	cmp	r7, #0
 8021810:	d143      	bne.n	802189a <_malloc_r+0xd6>
 8021812:	2c00      	cmp	r4, #0
 8021814:	d04b      	beq.n	80218ae <_malloc_r+0xea>
 8021816:	6823      	ldr	r3, [r4, #0]
 8021818:	4639      	mov	r1, r7
 802181a:	4630      	mov	r0, r6
 802181c:	eb04 0903 	add.w	r9, r4, r3
 8021820:	f000 fafe 	bl	8021e20 <_sbrk_r>
 8021824:	4581      	cmp	r9, r0
 8021826:	d142      	bne.n	80218ae <_malloc_r+0xea>
 8021828:	6821      	ldr	r1, [r4, #0]
 802182a:	1a6d      	subs	r5, r5, r1
 802182c:	4629      	mov	r1, r5
 802182e:	4630      	mov	r0, r6
 8021830:	f7ff ffa6 	bl	8021780 <sbrk_aligned>
 8021834:	3001      	adds	r0, #1
 8021836:	d03a      	beq.n	80218ae <_malloc_r+0xea>
 8021838:	6823      	ldr	r3, [r4, #0]
 802183a:	442b      	add	r3, r5
 802183c:	6023      	str	r3, [r4, #0]
 802183e:	f8d8 3000 	ldr.w	r3, [r8]
 8021842:	685a      	ldr	r2, [r3, #4]
 8021844:	bb62      	cbnz	r2, 80218a0 <_malloc_r+0xdc>
 8021846:	f8c8 7000 	str.w	r7, [r8]
 802184a:	e00f      	b.n	802186c <_malloc_r+0xa8>
 802184c:	6822      	ldr	r2, [r4, #0]
 802184e:	1b52      	subs	r2, r2, r5
 8021850:	d420      	bmi.n	8021894 <_malloc_r+0xd0>
 8021852:	2a0b      	cmp	r2, #11
 8021854:	d917      	bls.n	8021886 <_malloc_r+0xc2>
 8021856:	1961      	adds	r1, r4, r5
 8021858:	42a3      	cmp	r3, r4
 802185a:	6025      	str	r5, [r4, #0]
 802185c:	bf18      	it	ne
 802185e:	6059      	strne	r1, [r3, #4]
 8021860:	6863      	ldr	r3, [r4, #4]
 8021862:	bf08      	it	eq
 8021864:	f8c8 1000 	streq.w	r1, [r8]
 8021868:	5162      	str	r2, [r4, r5]
 802186a:	604b      	str	r3, [r1, #4]
 802186c:	4630      	mov	r0, r6
 802186e:	f000 f82f 	bl	80218d0 <__malloc_unlock>
 8021872:	f104 000b 	add.w	r0, r4, #11
 8021876:	1d23      	adds	r3, r4, #4
 8021878:	f020 0007 	bic.w	r0, r0, #7
 802187c:	1ac2      	subs	r2, r0, r3
 802187e:	bf1c      	itt	ne
 8021880:	1a1b      	subne	r3, r3, r0
 8021882:	50a3      	strne	r3, [r4, r2]
 8021884:	e7af      	b.n	80217e6 <_malloc_r+0x22>
 8021886:	6862      	ldr	r2, [r4, #4]
 8021888:	42a3      	cmp	r3, r4
 802188a:	bf0c      	ite	eq
 802188c:	f8c8 2000 	streq.w	r2, [r8]
 8021890:	605a      	strne	r2, [r3, #4]
 8021892:	e7eb      	b.n	802186c <_malloc_r+0xa8>
 8021894:	4623      	mov	r3, r4
 8021896:	6864      	ldr	r4, [r4, #4]
 8021898:	e7ae      	b.n	80217f8 <_malloc_r+0x34>
 802189a:	463c      	mov	r4, r7
 802189c:	687f      	ldr	r7, [r7, #4]
 802189e:	e7b6      	b.n	802180e <_malloc_r+0x4a>
 80218a0:	461a      	mov	r2, r3
 80218a2:	685b      	ldr	r3, [r3, #4]
 80218a4:	42a3      	cmp	r3, r4
 80218a6:	d1fb      	bne.n	80218a0 <_malloc_r+0xdc>
 80218a8:	2300      	movs	r3, #0
 80218aa:	6053      	str	r3, [r2, #4]
 80218ac:	e7de      	b.n	802186c <_malloc_r+0xa8>
 80218ae:	230c      	movs	r3, #12
 80218b0:	6033      	str	r3, [r6, #0]
 80218b2:	4630      	mov	r0, r6
 80218b4:	f000 f80c 	bl	80218d0 <__malloc_unlock>
 80218b8:	e794      	b.n	80217e4 <_malloc_r+0x20>
 80218ba:	6005      	str	r5, [r0, #0]
 80218bc:	e7d6      	b.n	802186c <_malloc_r+0xa8>
 80218be:	bf00      	nop
 80218c0:	24025de8 	.word	0x24025de8

080218c4 <__malloc_lock>:
 80218c4:	4801      	ldr	r0, [pc, #4]	@ (80218cc <__malloc_lock+0x8>)
 80218c6:	f000 baf8 	b.w	8021eba <__retarget_lock_acquire_recursive>
 80218ca:	bf00      	nop
 80218cc:	24025f2c 	.word	0x24025f2c

080218d0 <__malloc_unlock>:
 80218d0:	4801      	ldr	r0, [pc, #4]	@ (80218d8 <__malloc_unlock+0x8>)
 80218d2:	f000 baf3 	b.w	8021ebc <__retarget_lock_release_recursive>
 80218d6:	bf00      	nop
 80218d8:	24025f2c 	.word	0x24025f2c

080218dc <__cxa_atexit>:
 80218dc:	b510      	push	{r4, lr}
 80218de:	4604      	mov	r4, r0
 80218e0:	4804      	ldr	r0, [pc, #16]	@ (80218f4 <__cxa_atexit+0x18>)
 80218e2:	4613      	mov	r3, r2
 80218e4:	b120      	cbz	r0, 80218f0 <__cxa_atexit+0x14>
 80218e6:	460a      	mov	r2, r1
 80218e8:	2002      	movs	r0, #2
 80218ea:	4621      	mov	r1, r4
 80218ec:	f000 faf6 	bl	8021edc <__register_exitproc>
 80218f0:	bd10      	pop	{r4, pc}
 80218f2:	bf00      	nop
 80218f4:	08021edd 	.word	0x08021edd

080218f8 <std>:
 80218f8:	2300      	movs	r3, #0
 80218fa:	b510      	push	{r4, lr}
 80218fc:	4604      	mov	r4, r0
 80218fe:	e9c0 3300 	strd	r3, r3, [r0]
 8021902:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8021906:	6083      	str	r3, [r0, #8]
 8021908:	8181      	strh	r1, [r0, #12]
 802190a:	6643      	str	r3, [r0, #100]	@ 0x64
 802190c:	81c2      	strh	r2, [r0, #14]
 802190e:	6183      	str	r3, [r0, #24]
 8021910:	4619      	mov	r1, r3
 8021912:	2208      	movs	r2, #8
 8021914:	305c      	adds	r0, #92	@ 0x5c
 8021916:	f000 f99b 	bl	8021c50 <memset>
 802191a:	4b0d      	ldr	r3, [pc, #52]	@ (8021950 <std+0x58>)
 802191c:	6263      	str	r3, [r4, #36]	@ 0x24
 802191e:	4b0d      	ldr	r3, [pc, #52]	@ (8021954 <std+0x5c>)
 8021920:	62a3      	str	r3, [r4, #40]	@ 0x28
 8021922:	4b0d      	ldr	r3, [pc, #52]	@ (8021958 <std+0x60>)
 8021924:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8021926:	4b0d      	ldr	r3, [pc, #52]	@ (802195c <std+0x64>)
 8021928:	6323      	str	r3, [r4, #48]	@ 0x30
 802192a:	4b0d      	ldr	r3, [pc, #52]	@ (8021960 <std+0x68>)
 802192c:	6224      	str	r4, [r4, #32]
 802192e:	429c      	cmp	r4, r3
 8021930:	d006      	beq.n	8021940 <std+0x48>
 8021932:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8021936:	4294      	cmp	r4, r2
 8021938:	d002      	beq.n	8021940 <std+0x48>
 802193a:	33d0      	adds	r3, #208	@ 0xd0
 802193c:	429c      	cmp	r4, r3
 802193e:	d105      	bne.n	802194c <std+0x54>
 8021940:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8021944:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021948:	f000 bab6 	b.w	8021eb8 <__retarget_lock_init_recursive>
 802194c:	bd10      	pop	{r4, pc}
 802194e:	bf00      	nop
 8021950:	08021aa1 	.word	0x08021aa1
 8021954:	08021ac3 	.word	0x08021ac3
 8021958:	08021afb 	.word	0x08021afb
 802195c:	08021b1f 	.word	0x08021b1f
 8021960:	24025dec 	.word	0x24025dec

08021964 <stdio_exit_handler>:
 8021964:	4a02      	ldr	r2, [pc, #8]	@ (8021970 <stdio_exit_handler+0xc>)
 8021966:	4903      	ldr	r1, [pc, #12]	@ (8021974 <stdio_exit_handler+0x10>)
 8021968:	4803      	ldr	r0, [pc, #12]	@ (8021978 <stdio_exit_handler+0x14>)
 802196a:	f000 b87b 	b.w	8021a64 <_fwalk_sglue>
 802196e:	bf00      	nop
 8021970:	2400010c 	.word	0x2400010c
 8021974:	080226d1 	.word	0x080226d1
 8021978:	2400011c 	.word	0x2400011c

0802197c <cleanup_stdio>:
 802197c:	6841      	ldr	r1, [r0, #4]
 802197e:	4b0c      	ldr	r3, [pc, #48]	@ (80219b0 <cleanup_stdio+0x34>)
 8021980:	4299      	cmp	r1, r3
 8021982:	b510      	push	{r4, lr}
 8021984:	4604      	mov	r4, r0
 8021986:	d001      	beq.n	802198c <cleanup_stdio+0x10>
 8021988:	f000 fea2 	bl	80226d0 <_fflush_r>
 802198c:	68a1      	ldr	r1, [r4, #8]
 802198e:	4b09      	ldr	r3, [pc, #36]	@ (80219b4 <cleanup_stdio+0x38>)
 8021990:	4299      	cmp	r1, r3
 8021992:	d002      	beq.n	802199a <cleanup_stdio+0x1e>
 8021994:	4620      	mov	r0, r4
 8021996:	f000 fe9b 	bl	80226d0 <_fflush_r>
 802199a:	68e1      	ldr	r1, [r4, #12]
 802199c:	4b06      	ldr	r3, [pc, #24]	@ (80219b8 <cleanup_stdio+0x3c>)
 802199e:	4299      	cmp	r1, r3
 80219a0:	d004      	beq.n	80219ac <cleanup_stdio+0x30>
 80219a2:	4620      	mov	r0, r4
 80219a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219a8:	f000 be92 	b.w	80226d0 <_fflush_r>
 80219ac:	bd10      	pop	{r4, pc}
 80219ae:	bf00      	nop
 80219b0:	24025dec 	.word	0x24025dec
 80219b4:	24025e54 	.word	0x24025e54
 80219b8:	24025ebc 	.word	0x24025ebc

080219bc <global_stdio_init.part.0>:
 80219bc:	b510      	push	{r4, lr}
 80219be:	4b0b      	ldr	r3, [pc, #44]	@ (80219ec <global_stdio_init.part.0+0x30>)
 80219c0:	4c0b      	ldr	r4, [pc, #44]	@ (80219f0 <global_stdio_init.part.0+0x34>)
 80219c2:	4a0c      	ldr	r2, [pc, #48]	@ (80219f4 <global_stdio_init.part.0+0x38>)
 80219c4:	601a      	str	r2, [r3, #0]
 80219c6:	4620      	mov	r0, r4
 80219c8:	2200      	movs	r2, #0
 80219ca:	2104      	movs	r1, #4
 80219cc:	f7ff ff94 	bl	80218f8 <std>
 80219d0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80219d4:	2201      	movs	r2, #1
 80219d6:	2109      	movs	r1, #9
 80219d8:	f7ff ff8e 	bl	80218f8 <std>
 80219dc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80219e0:	2202      	movs	r2, #2
 80219e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80219e6:	2112      	movs	r1, #18
 80219e8:	f7ff bf86 	b.w	80218f8 <std>
 80219ec:	24025f24 	.word	0x24025f24
 80219f0:	24025dec 	.word	0x24025dec
 80219f4:	08021965 	.word	0x08021965

080219f8 <__sfp_lock_acquire>:
 80219f8:	4801      	ldr	r0, [pc, #4]	@ (8021a00 <__sfp_lock_acquire+0x8>)
 80219fa:	f000 ba5e 	b.w	8021eba <__retarget_lock_acquire_recursive>
 80219fe:	bf00      	nop
 8021a00:	24025f2e 	.word	0x24025f2e

08021a04 <__sfp_lock_release>:
 8021a04:	4801      	ldr	r0, [pc, #4]	@ (8021a0c <__sfp_lock_release+0x8>)
 8021a06:	f000 ba59 	b.w	8021ebc <__retarget_lock_release_recursive>
 8021a0a:	bf00      	nop
 8021a0c:	24025f2e 	.word	0x24025f2e

08021a10 <__sinit>:
 8021a10:	b510      	push	{r4, lr}
 8021a12:	4604      	mov	r4, r0
 8021a14:	f7ff fff0 	bl	80219f8 <__sfp_lock_acquire>
 8021a18:	6a23      	ldr	r3, [r4, #32]
 8021a1a:	b11b      	cbz	r3, 8021a24 <__sinit+0x14>
 8021a1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8021a20:	f7ff bff0 	b.w	8021a04 <__sfp_lock_release>
 8021a24:	4b04      	ldr	r3, [pc, #16]	@ (8021a38 <__sinit+0x28>)
 8021a26:	6223      	str	r3, [r4, #32]
 8021a28:	4b04      	ldr	r3, [pc, #16]	@ (8021a3c <__sinit+0x2c>)
 8021a2a:	681b      	ldr	r3, [r3, #0]
 8021a2c:	2b00      	cmp	r3, #0
 8021a2e:	d1f5      	bne.n	8021a1c <__sinit+0xc>
 8021a30:	f7ff ffc4 	bl	80219bc <global_stdio_init.part.0>
 8021a34:	e7f2      	b.n	8021a1c <__sinit+0xc>
 8021a36:	bf00      	nop
 8021a38:	0802197d 	.word	0x0802197d
 8021a3c:	24025f24 	.word	0x24025f24

08021a40 <fiprintf>:
 8021a40:	b40e      	push	{r1, r2, r3}
 8021a42:	b503      	push	{r0, r1, lr}
 8021a44:	4601      	mov	r1, r0
 8021a46:	ab03      	add	r3, sp, #12
 8021a48:	4805      	ldr	r0, [pc, #20]	@ (8021a60 <fiprintf+0x20>)
 8021a4a:	f853 2b04 	ldr.w	r2, [r3], #4
 8021a4e:	6800      	ldr	r0, [r0, #0]
 8021a50:	9301      	str	r3, [sp, #4]
 8021a52:	f000 fb13 	bl	802207c <_vfiprintf_r>
 8021a56:	b002      	add	sp, #8
 8021a58:	f85d eb04 	ldr.w	lr, [sp], #4
 8021a5c:	b003      	add	sp, #12
 8021a5e:	4770      	bx	lr
 8021a60:	24000118 	.word	0x24000118

08021a64 <_fwalk_sglue>:
 8021a64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021a68:	4607      	mov	r7, r0
 8021a6a:	4688      	mov	r8, r1
 8021a6c:	4614      	mov	r4, r2
 8021a6e:	2600      	movs	r6, #0
 8021a70:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8021a74:	f1b9 0901 	subs.w	r9, r9, #1
 8021a78:	d505      	bpl.n	8021a86 <_fwalk_sglue+0x22>
 8021a7a:	6824      	ldr	r4, [r4, #0]
 8021a7c:	2c00      	cmp	r4, #0
 8021a7e:	d1f7      	bne.n	8021a70 <_fwalk_sglue+0xc>
 8021a80:	4630      	mov	r0, r6
 8021a82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021a86:	89ab      	ldrh	r3, [r5, #12]
 8021a88:	2b01      	cmp	r3, #1
 8021a8a:	d907      	bls.n	8021a9c <_fwalk_sglue+0x38>
 8021a8c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8021a90:	3301      	adds	r3, #1
 8021a92:	d003      	beq.n	8021a9c <_fwalk_sglue+0x38>
 8021a94:	4629      	mov	r1, r5
 8021a96:	4638      	mov	r0, r7
 8021a98:	47c0      	blx	r8
 8021a9a:	4306      	orrs	r6, r0
 8021a9c:	3568      	adds	r5, #104	@ 0x68
 8021a9e:	e7e9      	b.n	8021a74 <_fwalk_sglue+0x10>

08021aa0 <__sread>:
 8021aa0:	b510      	push	{r4, lr}
 8021aa2:	460c      	mov	r4, r1
 8021aa4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021aa8:	f000 f994 	bl	8021dd4 <_read_r>
 8021aac:	2800      	cmp	r0, #0
 8021aae:	bfab      	itete	ge
 8021ab0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8021ab2:	89a3      	ldrhlt	r3, [r4, #12]
 8021ab4:	181b      	addge	r3, r3, r0
 8021ab6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8021aba:	bfac      	ite	ge
 8021abc:	6563      	strge	r3, [r4, #84]	@ 0x54
 8021abe:	81a3      	strhlt	r3, [r4, #12]
 8021ac0:	bd10      	pop	{r4, pc}

08021ac2 <__swrite>:
 8021ac2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8021ac6:	461f      	mov	r7, r3
 8021ac8:	898b      	ldrh	r3, [r1, #12]
 8021aca:	05db      	lsls	r3, r3, #23
 8021acc:	4605      	mov	r5, r0
 8021ace:	460c      	mov	r4, r1
 8021ad0:	4616      	mov	r6, r2
 8021ad2:	d505      	bpl.n	8021ae0 <__swrite+0x1e>
 8021ad4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021ad8:	2302      	movs	r3, #2
 8021ada:	2200      	movs	r2, #0
 8021adc:	f000 f968 	bl	8021db0 <_lseek_r>
 8021ae0:	89a3      	ldrh	r3, [r4, #12]
 8021ae2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8021ae6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8021aea:	81a3      	strh	r3, [r4, #12]
 8021aec:	4632      	mov	r2, r6
 8021aee:	463b      	mov	r3, r7
 8021af0:	4628      	mov	r0, r5
 8021af2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8021af6:	f000 b9a3 	b.w	8021e40 <_write_r>

08021afa <__sseek>:
 8021afa:	b510      	push	{r4, lr}
 8021afc:	460c      	mov	r4, r1
 8021afe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b02:	f000 f955 	bl	8021db0 <_lseek_r>
 8021b06:	1c43      	adds	r3, r0, #1
 8021b08:	89a3      	ldrh	r3, [r4, #12]
 8021b0a:	bf15      	itete	ne
 8021b0c:	6560      	strne	r0, [r4, #84]	@ 0x54
 8021b0e:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8021b12:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8021b16:	81a3      	strheq	r3, [r4, #12]
 8021b18:	bf18      	it	ne
 8021b1a:	81a3      	strhne	r3, [r4, #12]
 8021b1c:	bd10      	pop	{r4, pc}

08021b1e <__sclose>:
 8021b1e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8021b22:	f000 b8df 	b.w	8021ce4 <_close_r>

08021b26 <__swbuf_r>:
 8021b26:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8021b28:	460e      	mov	r6, r1
 8021b2a:	4614      	mov	r4, r2
 8021b2c:	4605      	mov	r5, r0
 8021b2e:	b118      	cbz	r0, 8021b38 <__swbuf_r+0x12>
 8021b30:	6a03      	ldr	r3, [r0, #32]
 8021b32:	b90b      	cbnz	r3, 8021b38 <__swbuf_r+0x12>
 8021b34:	f7ff ff6c 	bl	8021a10 <__sinit>
 8021b38:	69a3      	ldr	r3, [r4, #24]
 8021b3a:	60a3      	str	r3, [r4, #8]
 8021b3c:	89a3      	ldrh	r3, [r4, #12]
 8021b3e:	071a      	lsls	r2, r3, #28
 8021b40:	d501      	bpl.n	8021b46 <__swbuf_r+0x20>
 8021b42:	6923      	ldr	r3, [r4, #16]
 8021b44:	b943      	cbnz	r3, 8021b58 <__swbuf_r+0x32>
 8021b46:	4621      	mov	r1, r4
 8021b48:	4628      	mov	r0, r5
 8021b4a:	f000 f82b 	bl	8021ba4 <__swsetup_r>
 8021b4e:	b118      	cbz	r0, 8021b58 <__swbuf_r+0x32>
 8021b50:	f04f 37ff 	mov.w	r7, #4294967295
 8021b54:	4638      	mov	r0, r7
 8021b56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8021b58:	6823      	ldr	r3, [r4, #0]
 8021b5a:	6922      	ldr	r2, [r4, #16]
 8021b5c:	1a98      	subs	r0, r3, r2
 8021b5e:	6963      	ldr	r3, [r4, #20]
 8021b60:	b2f6      	uxtb	r6, r6
 8021b62:	4283      	cmp	r3, r0
 8021b64:	4637      	mov	r7, r6
 8021b66:	dc05      	bgt.n	8021b74 <__swbuf_r+0x4e>
 8021b68:	4621      	mov	r1, r4
 8021b6a:	4628      	mov	r0, r5
 8021b6c:	f000 fdb0 	bl	80226d0 <_fflush_r>
 8021b70:	2800      	cmp	r0, #0
 8021b72:	d1ed      	bne.n	8021b50 <__swbuf_r+0x2a>
 8021b74:	68a3      	ldr	r3, [r4, #8]
 8021b76:	3b01      	subs	r3, #1
 8021b78:	60a3      	str	r3, [r4, #8]
 8021b7a:	6823      	ldr	r3, [r4, #0]
 8021b7c:	1c5a      	adds	r2, r3, #1
 8021b7e:	6022      	str	r2, [r4, #0]
 8021b80:	701e      	strb	r6, [r3, #0]
 8021b82:	6962      	ldr	r2, [r4, #20]
 8021b84:	1c43      	adds	r3, r0, #1
 8021b86:	429a      	cmp	r2, r3
 8021b88:	d004      	beq.n	8021b94 <__swbuf_r+0x6e>
 8021b8a:	89a3      	ldrh	r3, [r4, #12]
 8021b8c:	07db      	lsls	r3, r3, #31
 8021b8e:	d5e1      	bpl.n	8021b54 <__swbuf_r+0x2e>
 8021b90:	2e0a      	cmp	r6, #10
 8021b92:	d1df      	bne.n	8021b54 <__swbuf_r+0x2e>
 8021b94:	4621      	mov	r1, r4
 8021b96:	4628      	mov	r0, r5
 8021b98:	f000 fd9a 	bl	80226d0 <_fflush_r>
 8021b9c:	2800      	cmp	r0, #0
 8021b9e:	d0d9      	beq.n	8021b54 <__swbuf_r+0x2e>
 8021ba0:	e7d6      	b.n	8021b50 <__swbuf_r+0x2a>
	...

08021ba4 <__swsetup_r>:
 8021ba4:	b538      	push	{r3, r4, r5, lr}
 8021ba6:	4b29      	ldr	r3, [pc, #164]	@ (8021c4c <__swsetup_r+0xa8>)
 8021ba8:	4605      	mov	r5, r0
 8021baa:	6818      	ldr	r0, [r3, #0]
 8021bac:	460c      	mov	r4, r1
 8021bae:	b118      	cbz	r0, 8021bb8 <__swsetup_r+0x14>
 8021bb0:	6a03      	ldr	r3, [r0, #32]
 8021bb2:	b90b      	cbnz	r3, 8021bb8 <__swsetup_r+0x14>
 8021bb4:	f7ff ff2c 	bl	8021a10 <__sinit>
 8021bb8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021bbc:	0719      	lsls	r1, r3, #28
 8021bbe:	d422      	bmi.n	8021c06 <__swsetup_r+0x62>
 8021bc0:	06da      	lsls	r2, r3, #27
 8021bc2:	d407      	bmi.n	8021bd4 <__swsetup_r+0x30>
 8021bc4:	2209      	movs	r2, #9
 8021bc6:	602a      	str	r2, [r5, #0]
 8021bc8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8021bcc:	81a3      	strh	r3, [r4, #12]
 8021bce:	f04f 30ff 	mov.w	r0, #4294967295
 8021bd2:	e033      	b.n	8021c3c <__swsetup_r+0x98>
 8021bd4:	0758      	lsls	r0, r3, #29
 8021bd6:	d512      	bpl.n	8021bfe <__swsetup_r+0x5a>
 8021bd8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021bda:	b141      	cbz	r1, 8021bee <__swsetup_r+0x4a>
 8021bdc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8021be0:	4299      	cmp	r1, r3
 8021be2:	d002      	beq.n	8021bea <__swsetup_r+0x46>
 8021be4:	4628      	mov	r0, r5
 8021be6:	f000 f9d5 	bl	8021f94 <_free_r>
 8021bea:	2300      	movs	r3, #0
 8021bec:	6363      	str	r3, [r4, #52]	@ 0x34
 8021bee:	89a3      	ldrh	r3, [r4, #12]
 8021bf0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8021bf4:	81a3      	strh	r3, [r4, #12]
 8021bf6:	2300      	movs	r3, #0
 8021bf8:	6063      	str	r3, [r4, #4]
 8021bfa:	6923      	ldr	r3, [r4, #16]
 8021bfc:	6023      	str	r3, [r4, #0]
 8021bfe:	89a3      	ldrh	r3, [r4, #12]
 8021c00:	f043 0308 	orr.w	r3, r3, #8
 8021c04:	81a3      	strh	r3, [r4, #12]
 8021c06:	6923      	ldr	r3, [r4, #16]
 8021c08:	b94b      	cbnz	r3, 8021c1e <__swsetup_r+0x7a>
 8021c0a:	89a3      	ldrh	r3, [r4, #12]
 8021c0c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8021c10:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8021c14:	d003      	beq.n	8021c1e <__swsetup_r+0x7a>
 8021c16:	4621      	mov	r1, r4
 8021c18:	4628      	mov	r0, r5
 8021c1a:	f000 fda7 	bl	802276c <__smakebuf_r>
 8021c1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8021c22:	f013 0201 	ands.w	r2, r3, #1
 8021c26:	d00a      	beq.n	8021c3e <__swsetup_r+0x9a>
 8021c28:	2200      	movs	r2, #0
 8021c2a:	60a2      	str	r2, [r4, #8]
 8021c2c:	6962      	ldr	r2, [r4, #20]
 8021c2e:	4252      	negs	r2, r2
 8021c30:	61a2      	str	r2, [r4, #24]
 8021c32:	6922      	ldr	r2, [r4, #16]
 8021c34:	b942      	cbnz	r2, 8021c48 <__swsetup_r+0xa4>
 8021c36:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8021c3a:	d1c5      	bne.n	8021bc8 <__swsetup_r+0x24>
 8021c3c:	bd38      	pop	{r3, r4, r5, pc}
 8021c3e:	0799      	lsls	r1, r3, #30
 8021c40:	bf58      	it	pl
 8021c42:	6962      	ldrpl	r2, [r4, #20]
 8021c44:	60a2      	str	r2, [r4, #8]
 8021c46:	e7f4      	b.n	8021c32 <__swsetup_r+0x8e>
 8021c48:	2000      	movs	r0, #0
 8021c4a:	e7f7      	b.n	8021c3c <__swsetup_r+0x98>
 8021c4c:	24000118 	.word	0x24000118

08021c50 <memset>:
 8021c50:	4402      	add	r2, r0
 8021c52:	4603      	mov	r3, r0
 8021c54:	4293      	cmp	r3, r2
 8021c56:	d100      	bne.n	8021c5a <memset+0xa>
 8021c58:	4770      	bx	lr
 8021c5a:	f803 1b01 	strb.w	r1, [r3], #1
 8021c5e:	e7f9      	b.n	8021c54 <memset+0x4>

08021c60 <strncmp>:
 8021c60:	b510      	push	{r4, lr}
 8021c62:	b16a      	cbz	r2, 8021c80 <strncmp+0x20>
 8021c64:	3901      	subs	r1, #1
 8021c66:	1884      	adds	r4, r0, r2
 8021c68:	f810 2b01 	ldrb.w	r2, [r0], #1
 8021c6c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8021c70:	429a      	cmp	r2, r3
 8021c72:	d103      	bne.n	8021c7c <strncmp+0x1c>
 8021c74:	42a0      	cmp	r0, r4
 8021c76:	d001      	beq.n	8021c7c <strncmp+0x1c>
 8021c78:	2a00      	cmp	r2, #0
 8021c7a:	d1f5      	bne.n	8021c68 <strncmp+0x8>
 8021c7c:	1ad0      	subs	r0, r2, r3
 8021c7e:	bd10      	pop	{r4, pc}
 8021c80:	4610      	mov	r0, r2
 8021c82:	e7fc      	b.n	8021c7e <strncmp+0x1e>

08021c84 <_raise_r>:
 8021c84:	291f      	cmp	r1, #31
 8021c86:	b538      	push	{r3, r4, r5, lr}
 8021c88:	4605      	mov	r5, r0
 8021c8a:	460c      	mov	r4, r1
 8021c8c:	d904      	bls.n	8021c98 <_raise_r+0x14>
 8021c8e:	2316      	movs	r3, #22
 8021c90:	6003      	str	r3, [r0, #0]
 8021c92:	f04f 30ff 	mov.w	r0, #4294967295
 8021c96:	bd38      	pop	{r3, r4, r5, pc}
 8021c98:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8021c9a:	b112      	cbz	r2, 8021ca2 <_raise_r+0x1e>
 8021c9c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8021ca0:	b94b      	cbnz	r3, 8021cb6 <_raise_r+0x32>
 8021ca2:	4628      	mov	r0, r5
 8021ca4:	f000 f8ba 	bl	8021e1c <_getpid_r>
 8021ca8:	4622      	mov	r2, r4
 8021caa:	4601      	mov	r1, r0
 8021cac:	4628      	mov	r0, r5
 8021cae:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021cb2:	f000 b8a1 	b.w	8021df8 <_kill_r>
 8021cb6:	2b01      	cmp	r3, #1
 8021cb8:	d00a      	beq.n	8021cd0 <_raise_r+0x4c>
 8021cba:	1c59      	adds	r1, r3, #1
 8021cbc:	d103      	bne.n	8021cc6 <_raise_r+0x42>
 8021cbe:	2316      	movs	r3, #22
 8021cc0:	6003      	str	r3, [r0, #0]
 8021cc2:	2001      	movs	r0, #1
 8021cc4:	e7e7      	b.n	8021c96 <_raise_r+0x12>
 8021cc6:	2100      	movs	r1, #0
 8021cc8:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8021ccc:	4620      	mov	r0, r4
 8021cce:	4798      	blx	r3
 8021cd0:	2000      	movs	r0, #0
 8021cd2:	e7e0      	b.n	8021c96 <_raise_r+0x12>

08021cd4 <raise>:
 8021cd4:	4b02      	ldr	r3, [pc, #8]	@ (8021ce0 <raise+0xc>)
 8021cd6:	4601      	mov	r1, r0
 8021cd8:	6818      	ldr	r0, [r3, #0]
 8021cda:	f7ff bfd3 	b.w	8021c84 <_raise_r>
 8021cde:	bf00      	nop
 8021ce0:	24000118 	.word	0x24000118

08021ce4 <_close_r>:
 8021ce4:	b538      	push	{r3, r4, r5, lr}
 8021ce6:	4d06      	ldr	r5, [pc, #24]	@ (8021d00 <_close_r+0x1c>)
 8021ce8:	2300      	movs	r3, #0
 8021cea:	4604      	mov	r4, r0
 8021cec:	4608      	mov	r0, r1
 8021cee:	602b      	str	r3, [r5, #0]
 8021cf0:	f7df ff0c 	bl	8001b0c <_close>
 8021cf4:	1c43      	adds	r3, r0, #1
 8021cf6:	d102      	bne.n	8021cfe <_close_r+0x1a>
 8021cf8:	682b      	ldr	r3, [r5, #0]
 8021cfa:	b103      	cbz	r3, 8021cfe <_close_r+0x1a>
 8021cfc:	6023      	str	r3, [r4, #0]
 8021cfe:	bd38      	pop	{r3, r4, r5, pc}
 8021d00:	24025f28 	.word	0x24025f28

08021d04 <_reclaim_reent>:
 8021d04:	4b29      	ldr	r3, [pc, #164]	@ (8021dac <_reclaim_reent+0xa8>)
 8021d06:	681b      	ldr	r3, [r3, #0]
 8021d08:	4283      	cmp	r3, r0
 8021d0a:	b570      	push	{r4, r5, r6, lr}
 8021d0c:	4604      	mov	r4, r0
 8021d0e:	d04b      	beq.n	8021da8 <_reclaim_reent+0xa4>
 8021d10:	69c3      	ldr	r3, [r0, #28]
 8021d12:	b1ab      	cbz	r3, 8021d40 <_reclaim_reent+0x3c>
 8021d14:	68db      	ldr	r3, [r3, #12]
 8021d16:	b16b      	cbz	r3, 8021d34 <_reclaim_reent+0x30>
 8021d18:	2500      	movs	r5, #0
 8021d1a:	69e3      	ldr	r3, [r4, #28]
 8021d1c:	68db      	ldr	r3, [r3, #12]
 8021d1e:	5959      	ldr	r1, [r3, r5]
 8021d20:	2900      	cmp	r1, #0
 8021d22:	d13b      	bne.n	8021d9c <_reclaim_reent+0x98>
 8021d24:	3504      	adds	r5, #4
 8021d26:	2d80      	cmp	r5, #128	@ 0x80
 8021d28:	d1f7      	bne.n	8021d1a <_reclaim_reent+0x16>
 8021d2a:	69e3      	ldr	r3, [r4, #28]
 8021d2c:	4620      	mov	r0, r4
 8021d2e:	68d9      	ldr	r1, [r3, #12]
 8021d30:	f000 f930 	bl	8021f94 <_free_r>
 8021d34:	69e3      	ldr	r3, [r4, #28]
 8021d36:	6819      	ldr	r1, [r3, #0]
 8021d38:	b111      	cbz	r1, 8021d40 <_reclaim_reent+0x3c>
 8021d3a:	4620      	mov	r0, r4
 8021d3c:	f000 f92a 	bl	8021f94 <_free_r>
 8021d40:	6961      	ldr	r1, [r4, #20]
 8021d42:	b111      	cbz	r1, 8021d4a <_reclaim_reent+0x46>
 8021d44:	4620      	mov	r0, r4
 8021d46:	f000 f925 	bl	8021f94 <_free_r>
 8021d4a:	69e1      	ldr	r1, [r4, #28]
 8021d4c:	b111      	cbz	r1, 8021d54 <_reclaim_reent+0x50>
 8021d4e:	4620      	mov	r0, r4
 8021d50:	f000 f920 	bl	8021f94 <_free_r>
 8021d54:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8021d56:	b111      	cbz	r1, 8021d5e <_reclaim_reent+0x5a>
 8021d58:	4620      	mov	r0, r4
 8021d5a:	f000 f91b 	bl	8021f94 <_free_r>
 8021d5e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8021d60:	b111      	cbz	r1, 8021d68 <_reclaim_reent+0x64>
 8021d62:	4620      	mov	r0, r4
 8021d64:	f000 f916 	bl	8021f94 <_free_r>
 8021d68:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8021d6a:	b111      	cbz	r1, 8021d72 <_reclaim_reent+0x6e>
 8021d6c:	4620      	mov	r0, r4
 8021d6e:	f000 f911 	bl	8021f94 <_free_r>
 8021d72:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8021d74:	b111      	cbz	r1, 8021d7c <_reclaim_reent+0x78>
 8021d76:	4620      	mov	r0, r4
 8021d78:	f000 f90c 	bl	8021f94 <_free_r>
 8021d7c:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8021d7e:	b111      	cbz	r1, 8021d86 <_reclaim_reent+0x82>
 8021d80:	4620      	mov	r0, r4
 8021d82:	f000 f907 	bl	8021f94 <_free_r>
 8021d86:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8021d88:	b111      	cbz	r1, 8021d90 <_reclaim_reent+0x8c>
 8021d8a:	4620      	mov	r0, r4
 8021d8c:	f000 f902 	bl	8021f94 <_free_r>
 8021d90:	6a23      	ldr	r3, [r4, #32]
 8021d92:	b14b      	cbz	r3, 8021da8 <_reclaim_reent+0xa4>
 8021d94:	4620      	mov	r0, r4
 8021d96:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8021d9a:	4718      	bx	r3
 8021d9c:	680e      	ldr	r6, [r1, #0]
 8021d9e:	4620      	mov	r0, r4
 8021da0:	f000 f8f8 	bl	8021f94 <_free_r>
 8021da4:	4631      	mov	r1, r6
 8021da6:	e7bb      	b.n	8021d20 <_reclaim_reent+0x1c>
 8021da8:	bd70      	pop	{r4, r5, r6, pc}
 8021daa:	bf00      	nop
 8021dac:	24000118 	.word	0x24000118

08021db0 <_lseek_r>:
 8021db0:	b538      	push	{r3, r4, r5, lr}
 8021db2:	4d07      	ldr	r5, [pc, #28]	@ (8021dd0 <_lseek_r+0x20>)
 8021db4:	4604      	mov	r4, r0
 8021db6:	4608      	mov	r0, r1
 8021db8:	4611      	mov	r1, r2
 8021dba:	2200      	movs	r2, #0
 8021dbc:	602a      	str	r2, [r5, #0]
 8021dbe:	461a      	mov	r2, r3
 8021dc0:	f7df feae 	bl	8001b20 <_lseek>
 8021dc4:	1c43      	adds	r3, r0, #1
 8021dc6:	d102      	bne.n	8021dce <_lseek_r+0x1e>
 8021dc8:	682b      	ldr	r3, [r5, #0]
 8021dca:	b103      	cbz	r3, 8021dce <_lseek_r+0x1e>
 8021dcc:	6023      	str	r3, [r4, #0]
 8021dce:	bd38      	pop	{r3, r4, r5, pc}
 8021dd0:	24025f28 	.word	0x24025f28

08021dd4 <_read_r>:
 8021dd4:	b538      	push	{r3, r4, r5, lr}
 8021dd6:	4d07      	ldr	r5, [pc, #28]	@ (8021df4 <_read_r+0x20>)
 8021dd8:	4604      	mov	r4, r0
 8021dda:	4608      	mov	r0, r1
 8021ddc:	4611      	mov	r1, r2
 8021dde:	2200      	movs	r2, #0
 8021de0:	602a      	str	r2, [r5, #0]
 8021de2:	461a      	mov	r2, r3
 8021de4:	f7df fe76 	bl	8001ad4 <_read>
 8021de8:	1c43      	adds	r3, r0, #1
 8021dea:	d102      	bne.n	8021df2 <_read_r+0x1e>
 8021dec:	682b      	ldr	r3, [r5, #0]
 8021dee:	b103      	cbz	r3, 8021df2 <_read_r+0x1e>
 8021df0:	6023      	str	r3, [r4, #0]
 8021df2:	bd38      	pop	{r3, r4, r5, pc}
 8021df4:	24025f28 	.word	0x24025f28

08021df8 <_kill_r>:
 8021df8:	b538      	push	{r3, r4, r5, lr}
 8021dfa:	4d07      	ldr	r5, [pc, #28]	@ (8021e18 <_kill_r+0x20>)
 8021dfc:	2300      	movs	r3, #0
 8021dfe:	4604      	mov	r4, r0
 8021e00:	4608      	mov	r0, r1
 8021e02:	4611      	mov	r1, r2
 8021e04:	602b      	str	r3, [r5, #0]
 8021e06:	f7df fe57 	bl	8001ab8 <_kill>
 8021e0a:	1c43      	adds	r3, r0, #1
 8021e0c:	d102      	bne.n	8021e14 <_kill_r+0x1c>
 8021e0e:	682b      	ldr	r3, [r5, #0]
 8021e10:	b103      	cbz	r3, 8021e14 <_kill_r+0x1c>
 8021e12:	6023      	str	r3, [r4, #0]
 8021e14:	bd38      	pop	{r3, r4, r5, pc}
 8021e16:	bf00      	nop
 8021e18:	24025f28 	.word	0x24025f28

08021e1c <_getpid_r>:
 8021e1c:	f7df be4a 	b.w	8001ab4 <_getpid>

08021e20 <_sbrk_r>:
 8021e20:	b538      	push	{r3, r4, r5, lr}
 8021e22:	4d06      	ldr	r5, [pc, #24]	@ (8021e3c <_sbrk_r+0x1c>)
 8021e24:	2300      	movs	r3, #0
 8021e26:	4604      	mov	r4, r0
 8021e28:	4608      	mov	r0, r1
 8021e2a:	602b      	str	r3, [r5, #0]
 8021e2c:	f7df fe7a 	bl	8001b24 <_sbrk>
 8021e30:	1c43      	adds	r3, r0, #1
 8021e32:	d102      	bne.n	8021e3a <_sbrk_r+0x1a>
 8021e34:	682b      	ldr	r3, [r5, #0]
 8021e36:	b103      	cbz	r3, 8021e3a <_sbrk_r+0x1a>
 8021e38:	6023      	str	r3, [r4, #0]
 8021e3a:	bd38      	pop	{r3, r4, r5, pc}
 8021e3c:	24025f28 	.word	0x24025f28

08021e40 <_write_r>:
 8021e40:	b538      	push	{r3, r4, r5, lr}
 8021e42:	4d07      	ldr	r5, [pc, #28]	@ (8021e60 <_write_r+0x20>)
 8021e44:	4604      	mov	r4, r0
 8021e46:	4608      	mov	r0, r1
 8021e48:	4611      	mov	r1, r2
 8021e4a:	2200      	movs	r2, #0
 8021e4c:	602a      	str	r2, [r5, #0]
 8021e4e:	461a      	mov	r2, r3
 8021e50:	f7df fe4e 	bl	8001af0 <_write>
 8021e54:	1c43      	adds	r3, r0, #1
 8021e56:	d102      	bne.n	8021e5e <_write_r+0x1e>
 8021e58:	682b      	ldr	r3, [r5, #0]
 8021e5a:	b103      	cbz	r3, 8021e5e <_write_r+0x1e>
 8021e5c:	6023      	str	r3, [r4, #0]
 8021e5e:	bd38      	pop	{r3, r4, r5, pc}
 8021e60:	24025f28 	.word	0x24025f28

08021e64 <__errno>:
 8021e64:	4b01      	ldr	r3, [pc, #4]	@ (8021e6c <__errno+0x8>)
 8021e66:	6818      	ldr	r0, [r3, #0]
 8021e68:	4770      	bx	lr
 8021e6a:	bf00      	nop
 8021e6c:	24000118 	.word	0x24000118

08021e70 <__libc_init_array>:
 8021e70:	b570      	push	{r4, r5, r6, lr}
 8021e72:	4d0d      	ldr	r5, [pc, #52]	@ (8021ea8 <__libc_init_array+0x38>)
 8021e74:	4c0d      	ldr	r4, [pc, #52]	@ (8021eac <__libc_init_array+0x3c>)
 8021e76:	1b64      	subs	r4, r4, r5
 8021e78:	10a4      	asrs	r4, r4, #2
 8021e7a:	2600      	movs	r6, #0
 8021e7c:	42a6      	cmp	r6, r4
 8021e7e:	d109      	bne.n	8021e94 <__libc_init_array+0x24>
 8021e80:	4d0b      	ldr	r5, [pc, #44]	@ (8021eb0 <__libc_init_array+0x40>)
 8021e82:	4c0c      	ldr	r4, [pc, #48]	@ (8021eb4 <__libc_init_array+0x44>)
 8021e84:	f000 fcd0 	bl	8022828 <_init>
 8021e88:	1b64      	subs	r4, r4, r5
 8021e8a:	10a4      	asrs	r4, r4, #2
 8021e8c:	2600      	movs	r6, #0
 8021e8e:	42a6      	cmp	r6, r4
 8021e90:	d105      	bne.n	8021e9e <__libc_init_array+0x2e>
 8021e92:	bd70      	pop	{r4, r5, r6, pc}
 8021e94:	f855 3b04 	ldr.w	r3, [r5], #4
 8021e98:	4798      	blx	r3
 8021e9a:	3601      	adds	r6, #1
 8021e9c:	e7ee      	b.n	8021e7c <__libc_init_array+0xc>
 8021e9e:	f855 3b04 	ldr.w	r3, [r5], #4
 8021ea2:	4798      	blx	r3
 8021ea4:	3601      	adds	r6, #1
 8021ea6:	e7f2      	b.n	8021e8e <__libc_init_array+0x1e>
 8021ea8:	08028170 	.word	0x08028170
 8021eac:	08028170 	.word	0x08028170
 8021eb0:	08028170 	.word	0x08028170
 8021eb4:	08028190 	.word	0x08028190

08021eb8 <__retarget_lock_init_recursive>:
 8021eb8:	4770      	bx	lr

08021eba <__retarget_lock_acquire_recursive>:
 8021eba:	4770      	bx	lr

08021ebc <__retarget_lock_release_recursive>:
 8021ebc:	4770      	bx	lr

08021ebe <memcpy>:
 8021ebe:	440a      	add	r2, r1
 8021ec0:	4291      	cmp	r1, r2
 8021ec2:	f100 33ff 	add.w	r3, r0, #4294967295
 8021ec6:	d100      	bne.n	8021eca <memcpy+0xc>
 8021ec8:	4770      	bx	lr
 8021eca:	b510      	push	{r4, lr}
 8021ecc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8021ed0:	f803 4f01 	strb.w	r4, [r3, #1]!
 8021ed4:	4291      	cmp	r1, r2
 8021ed6:	d1f9      	bne.n	8021ecc <memcpy+0xe>
 8021ed8:	bd10      	pop	{r4, pc}
	...

08021edc <__register_exitproc>:
 8021edc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8021ee0:	4d27      	ldr	r5, [pc, #156]	@ (8021f80 <__register_exitproc+0xa4>)
 8021ee2:	4607      	mov	r7, r0
 8021ee4:	6828      	ldr	r0, [r5, #0]
 8021ee6:	4691      	mov	r9, r2
 8021ee8:	460e      	mov	r6, r1
 8021eea:	4698      	mov	r8, r3
 8021eec:	f7ff ffe5 	bl	8021eba <__retarget_lock_acquire_recursive>
 8021ef0:	4a24      	ldr	r2, [pc, #144]	@ (8021f84 <__register_exitproc+0xa8>)
 8021ef2:	6814      	ldr	r4, [r2, #0]
 8021ef4:	b93c      	cbnz	r4, 8021f06 <__register_exitproc+0x2a>
 8021ef6:	4b24      	ldr	r3, [pc, #144]	@ (8021f88 <__register_exitproc+0xac>)
 8021ef8:	6013      	str	r3, [r2, #0]
 8021efa:	4a24      	ldr	r2, [pc, #144]	@ (8021f8c <__register_exitproc+0xb0>)
 8021efc:	b112      	cbz	r2, 8021f04 <__register_exitproc+0x28>
 8021efe:	6812      	ldr	r2, [r2, #0]
 8021f00:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
 8021f04:	4c20      	ldr	r4, [pc, #128]	@ (8021f88 <__register_exitproc+0xac>)
 8021f06:	6863      	ldr	r3, [r4, #4]
 8021f08:	2b1f      	cmp	r3, #31
 8021f0a:	dd06      	ble.n	8021f1a <__register_exitproc+0x3e>
 8021f0c:	6828      	ldr	r0, [r5, #0]
 8021f0e:	f7ff ffd5 	bl	8021ebc <__retarget_lock_release_recursive>
 8021f12:	f04f 30ff 	mov.w	r0, #4294967295
 8021f16:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8021f1a:	b32f      	cbz	r7, 8021f68 <__register_exitproc+0x8c>
 8021f1c:	f8d4 0088 	ldr.w	r0, [r4, #136]	@ 0x88
 8021f20:	b968      	cbnz	r0, 8021f3e <__register_exitproc+0x62>
 8021f22:	4b1b      	ldr	r3, [pc, #108]	@ (8021f90 <__register_exitproc+0xb4>)
 8021f24:	2b00      	cmp	r3, #0
 8021f26:	d0f1      	beq.n	8021f0c <__register_exitproc+0x30>
 8021f28:	f44f 7084 	mov.w	r0, #264	@ 0x108
 8021f2c:	f7ff fc18 	bl	8021760 <malloc>
 8021f30:	2800      	cmp	r0, #0
 8021f32:	d0eb      	beq.n	8021f0c <__register_exitproc+0x30>
 8021f34:	2300      	movs	r3, #0
 8021f36:	e9c0 3340 	strd	r3, r3, [r0, #256]	@ 0x100
 8021f3a:	f8c4 0088 	str.w	r0, [r4, #136]	@ 0x88
 8021f3e:	6863      	ldr	r3, [r4, #4]
 8021f40:	f840 9023 	str.w	r9, [r0, r3, lsl #2]
 8021f44:	2201      	movs	r2, #1
 8021f46:	409a      	lsls	r2, r3
 8021f48:	eb00 0183 	add.w	r1, r0, r3, lsl #2
 8021f4c:	f8d0 3100 	ldr.w	r3, [r0, #256]	@ 0x100
 8021f50:	4313      	orrs	r3, r2
 8021f52:	f8c0 3100 	str.w	r3, [r0, #256]	@ 0x100
 8021f56:	2f02      	cmp	r7, #2
 8021f58:	f8c1 8080 	str.w	r8, [r1, #128]	@ 0x80
 8021f5c:	bf02      	ittt	eq
 8021f5e:	f8d0 3104 	ldreq.w	r3, [r0, #260]	@ 0x104
 8021f62:	4313      	orreq	r3, r2
 8021f64:	f8c0 3104 	streq.w	r3, [r0, #260]	@ 0x104
 8021f68:	6863      	ldr	r3, [r4, #4]
 8021f6a:	6828      	ldr	r0, [r5, #0]
 8021f6c:	1c5a      	adds	r2, r3, #1
 8021f6e:	3302      	adds	r3, #2
 8021f70:	6062      	str	r2, [r4, #4]
 8021f72:	f844 6023 	str.w	r6, [r4, r3, lsl #2]
 8021f76:	f7ff ffa1 	bl	8021ebc <__retarget_lock_release_recursive>
 8021f7a:	2000      	movs	r0, #0
 8021f7c:	e7cb      	b.n	8021f16 <__register_exitproc+0x3a>
 8021f7e:	bf00      	nop
 8021f80:	24000168 	.word	0x24000168
 8021f84:	24025fbc 	.word	0x24025fbc
 8021f88:	24025f30 	.word	0x24025f30
 8021f8c:	0802588c 	.word	0x0802588c
 8021f90:	08021761 	.word	0x08021761

08021f94 <_free_r>:
 8021f94:	b538      	push	{r3, r4, r5, lr}
 8021f96:	4605      	mov	r5, r0
 8021f98:	2900      	cmp	r1, #0
 8021f9a:	d041      	beq.n	8022020 <_free_r+0x8c>
 8021f9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8021fa0:	1f0c      	subs	r4, r1, #4
 8021fa2:	2b00      	cmp	r3, #0
 8021fa4:	bfb8      	it	lt
 8021fa6:	18e4      	addlt	r4, r4, r3
 8021fa8:	f7ff fc8c 	bl	80218c4 <__malloc_lock>
 8021fac:	4a1d      	ldr	r2, [pc, #116]	@ (8022024 <_free_r+0x90>)
 8021fae:	6813      	ldr	r3, [r2, #0]
 8021fb0:	b933      	cbnz	r3, 8021fc0 <_free_r+0x2c>
 8021fb2:	6063      	str	r3, [r4, #4]
 8021fb4:	6014      	str	r4, [r2, #0]
 8021fb6:	4628      	mov	r0, r5
 8021fb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8021fbc:	f7ff bc88 	b.w	80218d0 <__malloc_unlock>
 8021fc0:	42a3      	cmp	r3, r4
 8021fc2:	d908      	bls.n	8021fd6 <_free_r+0x42>
 8021fc4:	6820      	ldr	r0, [r4, #0]
 8021fc6:	1821      	adds	r1, r4, r0
 8021fc8:	428b      	cmp	r3, r1
 8021fca:	bf01      	itttt	eq
 8021fcc:	6819      	ldreq	r1, [r3, #0]
 8021fce:	685b      	ldreq	r3, [r3, #4]
 8021fd0:	1809      	addeq	r1, r1, r0
 8021fd2:	6021      	streq	r1, [r4, #0]
 8021fd4:	e7ed      	b.n	8021fb2 <_free_r+0x1e>
 8021fd6:	461a      	mov	r2, r3
 8021fd8:	685b      	ldr	r3, [r3, #4]
 8021fda:	b10b      	cbz	r3, 8021fe0 <_free_r+0x4c>
 8021fdc:	42a3      	cmp	r3, r4
 8021fde:	d9fa      	bls.n	8021fd6 <_free_r+0x42>
 8021fe0:	6811      	ldr	r1, [r2, #0]
 8021fe2:	1850      	adds	r0, r2, r1
 8021fe4:	42a0      	cmp	r0, r4
 8021fe6:	d10b      	bne.n	8022000 <_free_r+0x6c>
 8021fe8:	6820      	ldr	r0, [r4, #0]
 8021fea:	4401      	add	r1, r0
 8021fec:	1850      	adds	r0, r2, r1
 8021fee:	4283      	cmp	r3, r0
 8021ff0:	6011      	str	r1, [r2, #0]
 8021ff2:	d1e0      	bne.n	8021fb6 <_free_r+0x22>
 8021ff4:	6818      	ldr	r0, [r3, #0]
 8021ff6:	685b      	ldr	r3, [r3, #4]
 8021ff8:	6053      	str	r3, [r2, #4]
 8021ffa:	4408      	add	r0, r1
 8021ffc:	6010      	str	r0, [r2, #0]
 8021ffe:	e7da      	b.n	8021fb6 <_free_r+0x22>
 8022000:	d902      	bls.n	8022008 <_free_r+0x74>
 8022002:	230c      	movs	r3, #12
 8022004:	602b      	str	r3, [r5, #0]
 8022006:	e7d6      	b.n	8021fb6 <_free_r+0x22>
 8022008:	6820      	ldr	r0, [r4, #0]
 802200a:	1821      	adds	r1, r4, r0
 802200c:	428b      	cmp	r3, r1
 802200e:	bf04      	itt	eq
 8022010:	6819      	ldreq	r1, [r3, #0]
 8022012:	685b      	ldreq	r3, [r3, #4]
 8022014:	6063      	str	r3, [r4, #4]
 8022016:	bf04      	itt	eq
 8022018:	1809      	addeq	r1, r1, r0
 802201a:	6021      	streq	r1, [r4, #0]
 802201c:	6054      	str	r4, [r2, #4]
 802201e:	e7ca      	b.n	8021fb6 <_free_r+0x22>
 8022020:	bd38      	pop	{r3, r4, r5, pc}
 8022022:	bf00      	nop
 8022024:	24025de8 	.word	0x24025de8

08022028 <__sfputc_r>:
 8022028:	6893      	ldr	r3, [r2, #8]
 802202a:	3b01      	subs	r3, #1
 802202c:	2b00      	cmp	r3, #0
 802202e:	b410      	push	{r4}
 8022030:	6093      	str	r3, [r2, #8]
 8022032:	da08      	bge.n	8022046 <__sfputc_r+0x1e>
 8022034:	6994      	ldr	r4, [r2, #24]
 8022036:	42a3      	cmp	r3, r4
 8022038:	db01      	blt.n	802203e <__sfputc_r+0x16>
 802203a:	290a      	cmp	r1, #10
 802203c:	d103      	bne.n	8022046 <__sfputc_r+0x1e>
 802203e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022042:	f7ff bd70 	b.w	8021b26 <__swbuf_r>
 8022046:	6813      	ldr	r3, [r2, #0]
 8022048:	1c58      	adds	r0, r3, #1
 802204a:	6010      	str	r0, [r2, #0]
 802204c:	7019      	strb	r1, [r3, #0]
 802204e:	4608      	mov	r0, r1
 8022050:	f85d 4b04 	ldr.w	r4, [sp], #4
 8022054:	4770      	bx	lr

08022056 <__sfputs_r>:
 8022056:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022058:	4606      	mov	r6, r0
 802205a:	460f      	mov	r7, r1
 802205c:	4614      	mov	r4, r2
 802205e:	18d5      	adds	r5, r2, r3
 8022060:	42ac      	cmp	r4, r5
 8022062:	d101      	bne.n	8022068 <__sfputs_r+0x12>
 8022064:	2000      	movs	r0, #0
 8022066:	e007      	b.n	8022078 <__sfputs_r+0x22>
 8022068:	f814 1b01 	ldrb.w	r1, [r4], #1
 802206c:	463a      	mov	r2, r7
 802206e:	4630      	mov	r0, r6
 8022070:	f7ff ffda 	bl	8022028 <__sfputc_r>
 8022074:	1c43      	adds	r3, r0, #1
 8022076:	d1f3      	bne.n	8022060 <__sfputs_r+0xa>
 8022078:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0802207c <_vfiprintf_r>:
 802207c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8022080:	460d      	mov	r5, r1
 8022082:	b09d      	sub	sp, #116	@ 0x74
 8022084:	4614      	mov	r4, r2
 8022086:	4698      	mov	r8, r3
 8022088:	4606      	mov	r6, r0
 802208a:	b118      	cbz	r0, 8022094 <_vfiprintf_r+0x18>
 802208c:	6a03      	ldr	r3, [r0, #32]
 802208e:	b90b      	cbnz	r3, 8022094 <_vfiprintf_r+0x18>
 8022090:	f7ff fcbe 	bl	8021a10 <__sinit>
 8022094:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8022096:	07d9      	lsls	r1, r3, #31
 8022098:	d405      	bmi.n	80220a6 <_vfiprintf_r+0x2a>
 802209a:	89ab      	ldrh	r3, [r5, #12]
 802209c:	059a      	lsls	r2, r3, #22
 802209e:	d402      	bmi.n	80220a6 <_vfiprintf_r+0x2a>
 80220a0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80220a2:	f7ff ff0a 	bl	8021eba <__retarget_lock_acquire_recursive>
 80220a6:	89ab      	ldrh	r3, [r5, #12]
 80220a8:	071b      	lsls	r3, r3, #28
 80220aa:	d501      	bpl.n	80220b0 <_vfiprintf_r+0x34>
 80220ac:	692b      	ldr	r3, [r5, #16]
 80220ae:	b99b      	cbnz	r3, 80220d8 <_vfiprintf_r+0x5c>
 80220b0:	4629      	mov	r1, r5
 80220b2:	4630      	mov	r0, r6
 80220b4:	f7ff fd76 	bl	8021ba4 <__swsetup_r>
 80220b8:	b170      	cbz	r0, 80220d8 <_vfiprintf_r+0x5c>
 80220ba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80220bc:	07dc      	lsls	r4, r3, #31
 80220be:	d504      	bpl.n	80220ca <_vfiprintf_r+0x4e>
 80220c0:	f04f 30ff 	mov.w	r0, #4294967295
 80220c4:	b01d      	add	sp, #116	@ 0x74
 80220c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80220ca:	89ab      	ldrh	r3, [r5, #12]
 80220cc:	0598      	lsls	r0, r3, #22
 80220ce:	d4f7      	bmi.n	80220c0 <_vfiprintf_r+0x44>
 80220d0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80220d2:	f7ff fef3 	bl	8021ebc <__retarget_lock_release_recursive>
 80220d6:	e7f3      	b.n	80220c0 <_vfiprintf_r+0x44>
 80220d8:	2300      	movs	r3, #0
 80220da:	9309      	str	r3, [sp, #36]	@ 0x24
 80220dc:	2320      	movs	r3, #32
 80220de:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80220e2:	f8cd 800c 	str.w	r8, [sp, #12]
 80220e6:	2330      	movs	r3, #48	@ 0x30
 80220e8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8022298 <_vfiprintf_r+0x21c>
 80220ec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80220f0:	f04f 0901 	mov.w	r9, #1
 80220f4:	4623      	mov	r3, r4
 80220f6:	469a      	mov	sl, r3
 80220f8:	f813 2b01 	ldrb.w	r2, [r3], #1
 80220fc:	b10a      	cbz	r2, 8022102 <_vfiprintf_r+0x86>
 80220fe:	2a25      	cmp	r2, #37	@ 0x25
 8022100:	d1f9      	bne.n	80220f6 <_vfiprintf_r+0x7a>
 8022102:	ebba 0b04 	subs.w	fp, sl, r4
 8022106:	d00b      	beq.n	8022120 <_vfiprintf_r+0xa4>
 8022108:	465b      	mov	r3, fp
 802210a:	4622      	mov	r2, r4
 802210c:	4629      	mov	r1, r5
 802210e:	4630      	mov	r0, r6
 8022110:	f7ff ffa1 	bl	8022056 <__sfputs_r>
 8022114:	3001      	adds	r0, #1
 8022116:	f000 80a7 	beq.w	8022268 <_vfiprintf_r+0x1ec>
 802211a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802211c:	445a      	add	r2, fp
 802211e:	9209      	str	r2, [sp, #36]	@ 0x24
 8022120:	f89a 3000 	ldrb.w	r3, [sl]
 8022124:	2b00      	cmp	r3, #0
 8022126:	f000 809f 	beq.w	8022268 <_vfiprintf_r+0x1ec>
 802212a:	2300      	movs	r3, #0
 802212c:	f04f 32ff 	mov.w	r2, #4294967295
 8022130:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8022134:	f10a 0a01 	add.w	sl, sl, #1
 8022138:	9304      	str	r3, [sp, #16]
 802213a:	9307      	str	r3, [sp, #28]
 802213c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8022140:	931a      	str	r3, [sp, #104]	@ 0x68
 8022142:	4654      	mov	r4, sl
 8022144:	2205      	movs	r2, #5
 8022146:	f814 1b01 	ldrb.w	r1, [r4], #1
 802214a:	4853      	ldr	r0, [pc, #332]	@ (8022298 <_vfiprintf_r+0x21c>)
 802214c:	f7de f8c8 	bl	80002e0 <memchr>
 8022150:	9a04      	ldr	r2, [sp, #16]
 8022152:	b9d8      	cbnz	r0, 802218c <_vfiprintf_r+0x110>
 8022154:	06d1      	lsls	r1, r2, #27
 8022156:	bf44      	itt	mi
 8022158:	2320      	movmi	r3, #32
 802215a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 802215e:	0713      	lsls	r3, r2, #28
 8022160:	bf44      	itt	mi
 8022162:	232b      	movmi	r3, #43	@ 0x2b
 8022164:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8022168:	f89a 3000 	ldrb.w	r3, [sl]
 802216c:	2b2a      	cmp	r3, #42	@ 0x2a
 802216e:	d015      	beq.n	802219c <_vfiprintf_r+0x120>
 8022170:	9a07      	ldr	r2, [sp, #28]
 8022172:	4654      	mov	r4, sl
 8022174:	2000      	movs	r0, #0
 8022176:	f04f 0c0a 	mov.w	ip, #10
 802217a:	4621      	mov	r1, r4
 802217c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8022180:	3b30      	subs	r3, #48	@ 0x30
 8022182:	2b09      	cmp	r3, #9
 8022184:	d94b      	bls.n	802221e <_vfiprintf_r+0x1a2>
 8022186:	b1b0      	cbz	r0, 80221b6 <_vfiprintf_r+0x13a>
 8022188:	9207      	str	r2, [sp, #28]
 802218a:	e014      	b.n	80221b6 <_vfiprintf_r+0x13a>
 802218c:	eba0 0308 	sub.w	r3, r0, r8
 8022190:	fa09 f303 	lsl.w	r3, r9, r3
 8022194:	4313      	orrs	r3, r2
 8022196:	9304      	str	r3, [sp, #16]
 8022198:	46a2      	mov	sl, r4
 802219a:	e7d2      	b.n	8022142 <_vfiprintf_r+0xc6>
 802219c:	9b03      	ldr	r3, [sp, #12]
 802219e:	1d19      	adds	r1, r3, #4
 80221a0:	681b      	ldr	r3, [r3, #0]
 80221a2:	9103      	str	r1, [sp, #12]
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	bfbb      	ittet	lt
 80221a8:	425b      	neglt	r3, r3
 80221aa:	f042 0202 	orrlt.w	r2, r2, #2
 80221ae:	9307      	strge	r3, [sp, #28]
 80221b0:	9307      	strlt	r3, [sp, #28]
 80221b2:	bfb8      	it	lt
 80221b4:	9204      	strlt	r2, [sp, #16]
 80221b6:	7823      	ldrb	r3, [r4, #0]
 80221b8:	2b2e      	cmp	r3, #46	@ 0x2e
 80221ba:	d10a      	bne.n	80221d2 <_vfiprintf_r+0x156>
 80221bc:	7863      	ldrb	r3, [r4, #1]
 80221be:	2b2a      	cmp	r3, #42	@ 0x2a
 80221c0:	d132      	bne.n	8022228 <_vfiprintf_r+0x1ac>
 80221c2:	9b03      	ldr	r3, [sp, #12]
 80221c4:	1d1a      	adds	r2, r3, #4
 80221c6:	681b      	ldr	r3, [r3, #0]
 80221c8:	9203      	str	r2, [sp, #12]
 80221ca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80221ce:	3402      	adds	r4, #2
 80221d0:	9305      	str	r3, [sp, #20]
 80221d2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80222a8 <_vfiprintf_r+0x22c>
 80221d6:	7821      	ldrb	r1, [r4, #0]
 80221d8:	2203      	movs	r2, #3
 80221da:	4650      	mov	r0, sl
 80221dc:	f7de f880 	bl	80002e0 <memchr>
 80221e0:	b138      	cbz	r0, 80221f2 <_vfiprintf_r+0x176>
 80221e2:	9b04      	ldr	r3, [sp, #16]
 80221e4:	eba0 000a 	sub.w	r0, r0, sl
 80221e8:	2240      	movs	r2, #64	@ 0x40
 80221ea:	4082      	lsls	r2, r0
 80221ec:	4313      	orrs	r3, r2
 80221ee:	3401      	adds	r4, #1
 80221f0:	9304      	str	r3, [sp, #16]
 80221f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 80221f6:	4829      	ldr	r0, [pc, #164]	@ (802229c <_vfiprintf_r+0x220>)
 80221f8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80221fc:	2206      	movs	r2, #6
 80221fe:	f7de f86f 	bl	80002e0 <memchr>
 8022202:	2800      	cmp	r0, #0
 8022204:	d03f      	beq.n	8022286 <_vfiprintf_r+0x20a>
 8022206:	4b26      	ldr	r3, [pc, #152]	@ (80222a0 <_vfiprintf_r+0x224>)
 8022208:	bb1b      	cbnz	r3, 8022252 <_vfiprintf_r+0x1d6>
 802220a:	9b03      	ldr	r3, [sp, #12]
 802220c:	3307      	adds	r3, #7
 802220e:	f023 0307 	bic.w	r3, r3, #7
 8022212:	3308      	adds	r3, #8
 8022214:	9303      	str	r3, [sp, #12]
 8022216:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8022218:	443b      	add	r3, r7
 802221a:	9309      	str	r3, [sp, #36]	@ 0x24
 802221c:	e76a      	b.n	80220f4 <_vfiprintf_r+0x78>
 802221e:	fb0c 3202 	mla	r2, ip, r2, r3
 8022222:	460c      	mov	r4, r1
 8022224:	2001      	movs	r0, #1
 8022226:	e7a8      	b.n	802217a <_vfiprintf_r+0xfe>
 8022228:	2300      	movs	r3, #0
 802222a:	3401      	adds	r4, #1
 802222c:	9305      	str	r3, [sp, #20]
 802222e:	4619      	mov	r1, r3
 8022230:	f04f 0c0a 	mov.w	ip, #10
 8022234:	4620      	mov	r0, r4
 8022236:	f810 2b01 	ldrb.w	r2, [r0], #1
 802223a:	3a30      	subs	r2, #48	@ 0x30
 802223c:	2a09      	cmp	r2, #9
 802223e:	d903      	bls.n	8022248 <_vfiprintf_r+0x1cc>
 8022240:	2b00      	cmp	r3, #0
 8022242:	d0c6      	beq.n	80221d2 <_vfiprintf_r+0x156>
 8022244:	9105      	str	r1, [sp, #20]
 8022246:	e7c4      	b.n	80221d2 <_vfiprintf_r+0x156>
 8022248:	fb0c 2101 	mla	r1, ip, r1, r2
 802224c:	4604      	mov	r4, r0
 802224e:	2301      	movs	r3, #1
 8022250:	e7f0      	b.n	8022234 <_vfiprintf_r+0x1b8>
 8022252:	ab03      	add	r3, sp, #12
 8022254:	9300      	str	r3, [sp, #0]
 8022256:	462a      	mov	r2, r5
 8022258:	4b12      	ldr	r3, [pc, #72]	@ (80222a4 <_vfiprintf_r+0x228>)
 802225a:	a904      	add	r1, sp, #16
 802225c:	4630      	mov	r0, r6
 802225e:	f3af 8000 	nop.w
 8022262:	4607      	mov	r7, r0
 8022264:	1c78      	adds	r0, r7, #1
 8022266:	d1d6      	bne.n	8022216 <_vfiprintf_r+0x19a>
 8022268:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 802226a:	07d9      	lsls	r1, r3, #31
 802226c:	d405      	bmi.n	802227a <_vfiprintf_r+0x1fe>
 802226e:	89ab      	ldrh	r3, [r5, #12]
 8022270:	059a      	lsls	r2, r3, #22
 8022272:	d402      	bmi.n	802227a <_vfiprintf_r+0x1fe>
 8022274:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8022276:	f7ff fe21 	bl	8021ebc <__retarget_lock_release_recursive>
 802227a:	89ab      	ldrh	r3, [r5, #12]
 802227c:	065b      	lsls	r3, r3, #25
 802227e:	f53f af1f 	bmi.w	80220c0 <_vfiprintf_r+0x44>
 8022282:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8022284:	e71e      	b.n	80220c4 <_vfiprintf_r+0x48>
 8022286:	ab03      	add	r3, sp, #12
 8022288:	9300      	str	r3, [sp, #0]
 802228a:	462a      	mov	r2, r5
 802228c:	4b05      	ldr	r3, [pc, #20]	@ (80222a4 <_vfiprintf_r+0x228>)
 802228e:	a904      	add	r1, sp, #16
 8022290:	4630      	mov	r0, r6
 8022292:	f000 f879 	bl	8022388 <_printf_i>
 8022296:	e7e4      	b.n	8022262 <_vfiprintf_r+0x1e6>
 8022298:	08025890 	.word	0x08025890
 802229c:	0802589a 	.word	0x0802589a
 80222a0:	00000000 	.word	0x00000000
 80222a4:	08022057 	.word	0x08022057
 80222a8:	08025896 	.word	0x08025896

080222ac <_printf_common>:
 80222ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80222b0:	4616      	mov	r6, r2
 80222b2:	4698      	mov	r8, r3
 80222b4:	688a      	ldr	r2, [r1, #8]
 80222b6:	690b      	ldr	r3, [r1, #16]
 80222b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80222bc:	4293      	cmp	r3, r2
 80222be:	bfb8      	it	lt
 80222c0:	4613      	movlt	r3, r2
 80222c2:	6033      	str	r3, [r6, #0]
 80222c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80222c8:	4607      	mov	r7, r0
 80222ca:	460c      	mov	r4, r1
 80222cc:	b10a      	cbz	r2, 80222d2 <_printf_common+0x26>
 80222ce:	3301      	adds	r3, #1
 80222d0:	6033      	str	r3, [r6, #0]
 80222d2:	6823      	ldr	r3, [r4, #0]
 80222d4:	0699      	lsls	r1, r3, #26
 80222d6:	bf42      	ittt	mi
 80222d8:	6833      	ldrmi	r3, [r6, #0]
 80222da:	3302      	addmi	r3, #2
 80222dc:	6033      	strmi	r3, [r6, #0]
 80222de:	6825      	ldr	r5, [r4, #0]
 80222e0:	f015 0506 	ands.w	r5, r5, #6
 80222e4:	d106      	bne.n	80222f4 <_printf_common+0x48>
 80222e6:	f104 0a19 	add.w	sl, r4, #25
 80222ea:	68e3      	ldr	r3, [r4, #12]
 80222ec:	6832      	ldr	r2, [r6, #0]
 80222ee:	1a9b      	subs	r3, r3, r2
 80222f0:	42ab      	cmp	r3, r5
 80222f2:	dc26      	bgt.n	8022342 <_printf_common+0x96>
 80222f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80222f8:	6822      	ldr	r2, [r4, #0]
 80222fa:	3b00      	subs	r3, #0
 80222fc:	bf18      	it	ne
 80222fe:	2301      	movne	r3, #1
 8022300:	0692      	lsls	r2, r2, #26
 8022302:	d42b      	bmi.n	802235c <_printf_common+0xb0>
 8022304:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8022308:	4641      	mov	r1, r8
 802230a:	4638      	mov	r0, r7
 802230c:	47c8      	blx	r9
 802230e:	3001      	adds	r0, #1
 8022310:	d01e      	beq.n	8022350 <_printf_common+0xa4>
 8022312:	6823      	ldr	r3, [r4, #0]
 8022314:	6922      	ldr	r2, [r4, #16]
 8022316:	f003 0306 	and.w	r3, r3, #6
 802231a:	2b04      	cmp	r3, #4
 802231c:	bf02      	ittt	eq
 802231e:	68e5      	ldreq	r5, [r4, #12]
 8022320:	6833      	ldreq	r3, [r6, #0]
 8022322:	1aed      	subeq	r5, r5, r3
 8022324:	68a3      	ldr	r3, [r4, #8]
 8022326:	bf0c      	ite	eq
 8022328:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 802232c:	2500      	movne	r5, #0
 802232e:	4293      	cmp	r3, r2
 8022330:	bfc4      	itt	gt
 8022332:	1a9b      	subgt	r3, r3, r2
 8022334:	18ed      	addgt	r5, r5, r3
 8022336:	2600      	movs	r6, #0
 8022338:	341a      	adds	r4, #26
 802233a:	42b5      	cmp	r5, r6
 802233c:	d11a      	bne.n	8022374 <_printf_common+0xc8>
 802233e:	2000      	movs	r0, #0
 8022340:	e008      	b.n	8022354 <_printf_common+0xa8>
 8022342:	2301      	movs	r3, #1
 8022344:	4652      	mov	r2, sl
 8022346:	4641      	mov	r1, r8
 8022348:	4638      	mov	r0, r7
 802234a:	47c8      	blx	r9
 802234c:	3001      	adds	r0, #1
 802234e:	d103      	bne.n	8022358 <_printf_common+0xac>
 8022350:	f04f 30ff 	mov.w	r0, #4294967295
 8022354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8022358:	3501      	adds	r5, #1
 802235a:	e7c6      	b.n	80222ea <_printf_common+0x3e>
 802235c:	18e1      	adds	r1, r4, r3
 802235e:	1c5a      	adds	r2, r3, #1
 8022360:	2030      	movs	r0, #48	@ 0x30
 8022362:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8022366:	4422      	add	r2, r4
 8022368:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 802236c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8022370:	3302      	adds	r3, #2
 8022372:	e7c7      	b.n	8022304 <_printf_common+0x58>
 8022374:	2301      	movs	r3, #1
 8022376:	4622      	mov	r2, r4
 8022378:	4641      	mov	r1, r8
 802237a:	4638      	mov	r0, r7
 802237c:	47c8      	blx	r9
 802237e:	3001      	adds	r0, #1
 8022380:	d0e6      	beq.n	8022350 <_printf_common+0xa4>
 8022382:	3601      	adds	r6, #1
 8022384:	e7d9      	b.n	802233a <_printf_common+0x8e>
	...

08022388 <_printf_i>:
 8022388:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 802238c:	7e0f      	ldrb	r7, [r1, #24]
 802238e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8022390:	2f78      	cmp	r7, #120	@ 0x78
 8022392:	4691      	mov	r9, r2
 8022394:	4680      	mov	r8, r0
 8022396:	460c      	mov	r4, r1
 8022398:	469a      	mov	sl, r3
 802239a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 802239e:	d807      	bhi.n	80223b0 <_printf_i+0x28>
 80223a0:	2f62      	cmp	r7, #98	@ 0x62
 80223a2:	d80a      	bhi.n	80223ba <_printf_i+0x32>
 80223a4:	2f00      	cmp	r7, #0
 80223a6:	f000 80d2 	beq.w	802254e <_printf_i+0x1c6>
 80223aa:	2f58      	cmp	r7, #88	@ 0x58
 80223ac:	f000 80b9 	beq.w	8022522 <_printf_i+0x19a>
 80223b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80223b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80223b8:	e03a      	b.n	8022430 <_printf_i+0xa8>
 80223ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80223be:	2b15      	cmp	r3, #21
 80223c0:	d8f6      	bhi.n	80223b0 <_printf_i+0x28>
 80223c2:	a101      	add	r1, pc, #4	@ (adr r1, 80223c8 <_printf_i+0x40>)
 80223c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80223c8:	08022421 	.word	0x08022421
 80223cc:	08022435 	.word	0x08022435
 80223d0:	080223b1 	.word	0x080223b1
 80223d4:	080223b1 	.word	0x080223b1
 80223d8:	080223b1 	.word	0x080223b1
 80223dc:	080223b1 	.word	0x080223b1
 80223e0:	08022435 	.word	0x08022435
 80223e4:	080223b1 	.word	0x080223b1
 80223e8:	080223b1 	.word	0x080223b1
 80223ec:	080223b1 	.word	0x080223b1
 80223f0:	080223b1 	.word	0x080223b1
 80223f4:	08022535 	.word	0x08022535
 80223f8:	0802245f 	.word	0x0802245f
 80223fc:	080224ef 	.word	0x080224ef
 8022400:	080223b1 	.word	0x080223b1
 8022404:	080223b1 	.word	0x080223b1
 8022408:	08022557 	.word	0x08022557
 802240c:	080223b1 	.word	0x080223b1
 8022410:	0802245f 	.word	0x0802245f
 8022414:	080223b1 	.word	0x080223b1
 8022418:	080223b1 	.word	0x080223b1
 802241c:	080224f7 	.word	0x080224f7
 8022420:	6833      	ldr	r3, [r6, #0]
 8022422:	1d1a      	adds	r2, r3, #4
 8022424:	681b      	ldr	r3, [r3, #0]
 8022426:	6032      	str	r2, [r6, #0]
 8022428:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 802242c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8022430:	2301      	movs	r3, #1
 8022432:	e09d      	b.n	8022570 <_printf_i+0x1e8>
 8022434:	6833      	ldr	r3, [r6, #0]
 8022436:	6820      	ldr	r0, [r4, #0]
 8022438:	1d19      	adds	r1, r3, #4
 802243a:	6031      	str	r1, [r6, #0]
 802243c:	0606      	lsls	r6, r0, #24
 802243e:	d501      	bpl.n	8022444 <_printf_i+0xbc>
 8022440:	681d      	ldr	r5, [r3, #0]
 8022442:	e003      	b.n	802244c <_printf_i+0xc4>
 8022444:	0645      	lsls	r5, r0, #25
 8022446:	d5fb      	bpl.n	8022440 <_printf_i+0xb8>
 8022448:	f9b3 5000 	ldrsh.w	r5, [r3]
 802244c:	2d00      	cmp	r5, #0
 802244e:	da03      	bge.n	8022458 <_printf_i+0xd0>
 8022450:	232d      	movs	r3, #45	@ 0x2d
 8022452:	426d      	negs	r5, r5
 8022454:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022458:	4859      	ldr	r0, [pc, #356]	@ (80225c0 <_printf_i+0x238>)
 802245a:	230a      	movs	r3, #10
 802245c:	e011      	b.n	8022482 <_printf_i+0xfa>
 802245e:	6821      	ldr	r1, [r4, #0]
 8022460:	6833      	ldr	r3, [r6, #0]
 8022462:	0608      	lsls	r0, r1, #24
 8022464:	f853 5b04 	ldr.w	r5, [r3], #4
 8022468:	d402      	bmi.n	8022470 <_printf_i+0xe8>
 802246a:	0649      	lsls	r1, r1, #25
 802246c:	bf48      	it	mi
 802246e:	b2ad      	uxthmi	r5, r5
 8022470:	2f6f      	cmp	r7, #111	@ 0x6f
 8022472:	4853      	ldr	r0, [pc, #332]	@ (80225c0 <_printf_i+0x238>)
 8022474:	6033      	str	r3, [r6, #0]
 8022476:	bf14      	ite	ne
 8022478:	230a      	movne	r3, #10
 802247a:	2308      	moveq	r3, #8
 802247c:	2100      	movs	r1, #0
 802247e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8022482:	6866      	ldr	r6, [r4, #4]
 8022484:	60a6      	str	r6, [r4, #8]
 8022486:	2e00      	cmp	r6, #0
 8022488:	bfa2      	ittt	ge
 802248a:	6821      	ldrge	r1, [r4, #0]
 802248c:	f021 0104 	bicge.w	r1, r1, #4
 8022490:	6021      	strge	r1, [r4, #0]
 8022492:	b90d      	cbnz	r5, 8022498 <_printf_i+0x110>
 8022494:	2e00      	cmp	r6, #0
 8022496:	d04b      	beq.n	8022530 <_printf_i+0x1a8>
 8022498:	4616      	mov	r6, r2
 802249a:	fbb5 f1f3 	udiv	r1, r5, r3
 802249e:	fb03 5711 	mls	r7, r3, r1, r5
 80224a2:	5dc7      	ldrb	r7, [r0, r7]
 80224a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80224a8:	462f      	mov	r7, r5
 80224aa:	42bb      	cmp	r3, r7
 80224ac:	460d      	mov	r5, r1
 80224ae:	d9f4      	bls.n	802249a <_printf_i+0x112>
 80224b0:	2b08      	cmp	r3, #8
 80224b2:	d10b      	bne.n	80224cc <_printf_i+0x144>
 80224b4:	6823      	ldr	r3, [r4, #0]
 80224b6:	07df      	lsls	r7, r3, #31
 80224b8:	d508      	bpl.n	80224cc <_printf_i+0x144>
 80224ba:	6923      	ldr	r3, [r4, #16]
 80224bc:	6861      	ldr	r1, [r4, #4]
 80224be:	4299      	cmp	r1, r3
 80224c0:	bfde      	ittt	le
 80224c2:	2330      	movle	r3, #48	@ 0x30
 80224c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 80224c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 80224cc:	1b92      	subs	r2, r2, r6
 80224ce:	6122      	str	r2, [r4, #16]
 80224d0:	f8cd a000 	str.w	sl, [sp]
 80224d4:	464b      	mov	r3, r9
 80224d6:	aa03      	add	r2, sp, #12
 80224d8:	4621      	mov	r1, r4
 80224da:	4640      	mov	r0, r8
 80224dc:	f7ff fee6 	bl	80222ac <_printf_common>
 80224e0:	3001      	adds	r0, #1
 80224e2:	d14a      	bne.n	802257a <_printf_i+0x1f2>
 80224e4:	f04f 30ff 	mov.w	r0, #4294967295
 80224e8:	b004      	add	sp, #16
 80224ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80224ee:	6823      	ldr	r3, [r4, #0]
 80224f0:	f043 0320 	orr.w	r3, r3, #32
 80224f4:	6023      	str	r3, [r4, #0]
 80224f6:	4833      	ldr	r0, [pc, #204]	@ (80225c4 <_printf_i+0x23c>)
 80224f8:	2778      	movs	r7, #120	@ 0x78
 80224fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80224fe:	6823      	ldr	r3, [r4, #0]
 8022500:	6831      	ldr	r1, [r6, #0]
 8022502:	061f      	lsls	r7, r3, #24
 8022504:	f851 5b04 	ldr.w	r5, [r1], #4
 8022508:	d402      	bmi.n	8022510 <_printf_i+0x188>
 802250a:	065f      	lsls	r7, r3, #25
 802250c:	bf48      	it	mi
 802250e:	b2ad      	uxthmi	r5, r5
 8022510:	6031      	str	r1, [r6, #0]
 8022512:	07d9      	lsls	r1, r3, #31
 8022514:	bf44      	itt	mi
 8022516:	f043 0320 	orrmi.w	r3, r3, #32
 802251a:	6023      	strmi	r3, [r4, #0]
 802251c:	b11d      	cbz	r5, 8022526 <_printf_i+0x19e>
 802251e:	2310      	movs	r3, #16
 8022520:	e7ac      	b.n	802247c <_printf_i+0xf4>
 8022522:	4827      	ldr	r0, [pc, #156]	@ (80225c0 <_printf_i+0x238>)
 8022524:	e7e9      	b.n	80224fa <_printf_i+0x172>
 8022526:	6823      	ldr	r3, [r4, #0]
 8022528:	f023 0320 	bic.w	r3, r3, #32
 802252c:	6023      	str	r3, [r4, #0]
 802252e:	e7f6      	b.n	802251e <_printf_i+0x196>
 8022530:	4616      	mov	r6, r2
 8022532:	e7bd      	b.n	80224b0 <_printf_i+0x128>
 8022534:	6833      	ldr	r3, [r6, #0]
 8022536:	6825      	ldr	r5, [r4, #0]
 8022538:	6961      	ldr	r1, [r4, #20]
 802253a:	1d18      	adds	r0, r3, #4
 802253c:	6030      	str	r0, [r6, #0]
 802253e:	062e      	lsls	r6, r5, #24
 8022540:	681b      	ldr	r3, [r3, #0]
 8022542:	d501      	bpl.n	8022548 <_printf_i+0x1c0>
 8022544:	6019      	str	r1, [r3, #0]
 8022546:	e002      	b.n	802254e <_printf_i+0x1c6>
 8022548:	0668      	lsls	r0, r5, #25
 802254a:	d5fb      	bpl.n	8022544 <_printf_i+0x1bc>
 802254c:	8019      	strh	r1, [r3, #0]
 802254e:	2300      	movs	r3, #0
 8022550:	6123      	str	r3, [r4, #16]
 8022552:	4616      	mov	r6, r2
 8022554:	e7bc      	b.n	80224d0 <_printf_i+0x148>
 8022556:	6833      	ldr	r3, [r6, #0]
 8022558:	1d1a      	adds	r2, r3, #4
 802255a:	6032      	str	r2, [r6, #0]
 802255c:	681e      	ldr	r6, [r3, #0]
 802255e:	6862      	ldr	r2, [r4, #4]
 8022560:	2100      	movs	r1, #0
 8022562:	4630      	mov	r0, r6
 8022564:	f7dd febc 	bl	80002e0 <memchr>
 8022568:	b108      	cbz	r0, 802256e <_printf_i+0x1e6>
 802256a:	1b80      	subs	r0, r0, r6
 802256c:	6060      	str	r0, [r4, #4]
 802256e:	6863      	ldr	r3, [r4, #4]
 8022570:	6123      	str	r3, [r4, #16]
 8022572:	2300      	movs	r3, #0
 8022574:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8022578:	e7aa      	b.n	80224d0 <_printf_i+0x148>
 802257a:	6923      	ldr	r3, [r4, #16]
 802257c:	4632      	mov	r2, r6
 802257e:	4649      	mov	r1, r9
 8022580:	4640      	mov	r0, r8
 8022582:	47d0      	blx	sl
 8022584:	3001      	adds	r0, #1
 8022586:	d0ad      	beq.n	80224e4 <_printf_i+0x15c>
 8022588:	6823      	ldr	r3, [r4, #0]
 802258a:	079b      	lsls	r3, r3, #30
 802258c:	d413      	bmi.n	80225b6 <_printf_i+0x22e>
 802258e:	68e0      	ldr	r0, [r4, #12]
 8022590:	9b03      	ldr	r3, [sp, #12]
 8022592:	4298      	cmp	r0, r3
 8022594:	bfb8      	it	lt
 8022596:	4618      	movlt	r0, r3
 8022598:	e7a6      	b.n	80224e8 <_printf_i+0x160>
 802259a:	2301      	movs	r3, #1
 802259c:	4632      	mov	r2, r6
 802259e:	4649      	mov	r1, r9
 80225a0:	4640      	mov	r0, r8
 80225a2:	47d0      	blx	sl
 80225a4:	3001      	adds	r0, #1
 80225a6:	d09d      	beq.n	80224e4 <_printf_i+0x15c>
 80225a8:	3501      	adds	r5, #1
 80225aa:	68e3      	ldr	r3, [r4, #12]
 80225ac:	9903      	ldr	r1, [sp, #12]
 80225ae:	1a5b      	subs	r3, r3, r1
 80225b0:	42ab      	cmp	r3, r5
 80225b2:	dcf2      	bgt.n	802259a <_printf_i+0x212>
 80225b4:	e7eb      	b.n	802258e <_printf_i+0x206>
 80225b6:	2500      	movs	r5, #0
 80225b8:	f104 0619 	add.w	r6, r4, #25
 80225bc:	e7f5      	b.n	80225aa <_printf_i+0x222>
 80225be:	bf00      	nop
 80225c0:	080258a1 	.word	0x080258a1
 80225c4:	080258b2 	.word	0x080258b2

080225c8 <__sflush_r>:
 80225c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80225cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80225d0:	0716      	lsls	r6, r2, #28
 80225d2:	4605      	mov	r5, r0
 80225d4:	460c      	mov	r4, r1
 80225d6:	d454      	bmi.n	8022682 <__sflush_r+0xba>
 80225d8:	684b      	ldr	r3, [r1, #4]
 80225da:	2b00      	cmp	r3, #0
 80225dc:	dc02      	bgt.n	80225e4 <__sflush_r+0x1c>
 80225de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80225e0:	2b00      	cmp	r3, #0
 80225e2:	dd48      	ble.n	8022676 <__sflush_r+0xae>
 80225e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80225e6:	2e00      	cmp	r6, #0
 80225e8:	d045      	beq.n	8022676 <__sflush_r+0xae>
 80225ea:	2300      	movs	r3, #0
 80225ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80225f0:	682f      	ldr	r7, [r5, #0]
 80225f2:	6a21      	ldr	r1, [r4, #32]
 80225f4:	602b      	str	r3, [r5, #0]
 80225f6:	d030      	beq.n	802265a <__sflush_r+0x92>
 80225f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80225fa:	89a3      	ldrh	r3, [r4, #12]
 80225fc:	0759      	lsls	r1, r3, #29
 80225fe:	d505      	bpl.n	802260c <__sflush_r+0x44>
 8022600:	6863      	ldr	r3, [r4, #4]
 8022602:	1ad2      	subs	r2, r2, r3
 8022604:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8022606:	b10b      	cbz	r3, 802260c <__sflush_r+0x44>
 8022608:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 802260a:	1ad2      	subs	r2, r2, r3
 802260c:	2300      	movs	r3, #0
 802260e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8022610:	6a21      	ldr	r1, [r4, #32]
 8022612:	4628      	mov	r0, r5
 8022614:	47b0      	blx	r6
 8022616:	1c43      	adds	r3, r0, #1
 8022618:	89a3      	ldrh	r3, [r4, #12]
 802261a:	d106      	bne.n	802262a <__sflush_r+0x62>
 802261c:	6829      	ldr	r1, [r5, #0]
 802261e:	291d      	cmp	r1, #29
 8022620:	d82b      	bhi.n	802267a <__sflush_r+0xb2>
 8022622:	4a2a      	ldr	r2, [pc, #168]	@ (80226cc <__sflush_r+0x104>)
 8022624:	410a      	asrs	r2, r1
 8022626:	07d6      	lsls	r6, r2, #31
 8022628:	d427      	bmi.n	802267a <__sflush_r+0xb2>
 802262a:	2200      	movs	r2, #0
 802262c:	6062      	str	r2, [r4, #4]
 802262e:	04d9      	lsls	r1, r3, #19
 8022630:	6922      	ldr	r2, [r4, #16]
 8022632:	6022      	str	r2, [r4, #0]
 8022634:	d504      	bpl.n	8022640 <__sflush_r+0x78>
 8022636:	1c42      	adds	r2, r0, #1
 8022638:	d101      	bne.n	802263e <__sflush_r+0x76>
 802263a:	682b      	ldr	r3, [r5, #0]
 802263c:	b903      	cbnz	r3, 8022640 <__sflush_r+0x78>
 802263e:	6560      	str	r0, [r4, #84]	@ 0x54
 8022640:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8022642:	602f      	str	r7, [r5, #0]
 8022644:	b1b9      	cbz	r1, 8022676 <__sflush_r+0xae>
 8022646:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 802264a:	4299      	cmp	r1, r3
 802264c:	d002      	beq.n	8022654 <__sflush_r+0x8c>
 802264e:	4628      	mov	r0, r5
 8022650:	f7ff fca0 	bl	8021f94 <_free_r>
 8022654:	2300      	movs	r3, #0
 8022656:	6363      	str	r3, [r4, #52]	@ 0x34
 8022658:	e00d      	b.n	8022676 <__sflush_r+0xae>
 802265a:	2301      	movs	r3, #1
 802265c:	4628      	mov	r0, r5
 802265e:	47b0      	blx	r6
 8022660:	4602      	mov	r2, r0
 8022662:	1c50      	adds	r0, r2, #1
 8022664:	d1c9      	bne.n	80225fa <__sflush_r+0x32>
 8022666:	682b      	ldr	r3, [r5, #0]
 8022668:	2b00      	cmp	r3, #0
 802266a:	d0c6      	beq.n	80225fa <__sflush_r+0x32>
 802266c:	2b1d      	cmp	r3, #29
 802266e:	d001      	beq.n	8022674 <__sflush_r+0xac>
 8022670:	2b16      	cmp	r3, #22
 8022672:	d11e      	bne.n	80226b2 <__sflush_r+0xea>
 8022674:	602f      	str	r7, [r5, #0]
 8022676:	2000      	movs	r0, #0
 8022678:	e022      	b.n	80226c0 <__sflush_r+0xf8>
 802267a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 802267e:	b21b      	sxth	r3, r3
 8022680:	e01b      	b.n	80226ba <__sflush_r+0xf2>
 8022682:	690f      	ldr	r7, [r1, #16]
 8022684:	2f00      	cmp	r7, #0
 8022686:	d0f6      	beq.n	8022676 <__sflush_r+0xae>
 8022688:	0793      	lsls	r3, r2, #30
 802268a:	680e      	ldr	r6, [r1, #0]
 802268c:	bf08      	it	eq
 802268e:	694b      	ldreq	r3, [r1, #20]
 8022690:	600f      	str	r7, [r1, #0]
 8022692:	bf18      	it	ne
 8022694:	2300      	movne	r3, #0
 8022696:	eba6 0807 	sub.w	r8, r6, r7
 802269a:	608b      	str	r3, [r1, #8]
 802269c:	f1b8 0f00 	cmp.w	r8, #0
 80226a0:	dde9      	ble.n	8022676 <__sflush_r+0xae>
 80226a2:	6a21      	ldr	r1, [r4, #32]
 80226a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80226a6:	4643      	mov	r3, r8
 80226a8:	463a      	mov	r2, r7
 80226aa:	4628      	mov	r0, r5
 80226ac:	47b0      	blx	r6
 80226ae:	2800      	cmp	r0, #0
 80226b0:	dc08      	bgt.n	80226c4 <__sflush_r+0xfc>
 80226b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80226ba:	81a3      	strh	r3, [r4, #12]
 80226bc:	f04f 30ff 	mov.w	r0, #4294967295
 80226c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80226c4:	4407      	add	r7, r0
 80226c6:	eba8 0800 	sub.w	r8, r8, r0
 80226ca:	e7e7      	b.n	802269c <__sflush_r+0xd4>
 80226cc:	dfbffffe 	.word	0xdfbffffe

080226d0 <_fflush_r>:
 80226d0:	b538      	push	{r3, r4, r5, lr}
 80226d2:	690b      	ldr	r3, [r1, #16]
 80226d4:	4605      	mov	r5, r0
 80226d6:	460c      	mov	r4, r1
 80226d8:	b913      	cbnz	r3, 80226e0 <_fflush_r+0x10>
 80226da:	2500      	movs	r5, #0
 80226dc:	4628      	mov	r0, r5
 80226de:	bd38      	pop	{r3, r4, r5, pc}
 80226e0:	b118      	cbz	r0, 80226ea <_fflush_r+0x1a>
 80226e2:	6a03      	ldr	r3, [r0, #32]
 80226e4:	b90b      	cbnz	r3, 80226ea <_fflush_r+0x1a>
 80226e6:	f7ff f993 	bl	8021a10 <__sinit>
 80226ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80226ee:	2b00      	cmp	r3, #0
 80226f0:	d0f3      	beq.n	80226da <_fflush_r+0xa>
 80226f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80226f4:	07d0      	lsls	r0, r2, #31
 80226f6:	d404      	bmi.n	8022702 <_fflush_r+0x32>
 80226f8:	0599      	lsls	r1, r3, #22
 80226fa:	d402      	bmi.n	8022702 <_fflush_r+0x32>
 80226fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80226fe:	f7ff fbdc 	bl	8021eba <__retarget_lock_acquire_recursive>
 8022702:	4628      	mov	r0, r5
 8022704:	4621      	mov	r1, r4
 8022706:	f7ff ff5f 	bl	80225c8 <__sflush_r>
 802270a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 802270c:	07da      	lsls	r2, r3, #31
 802270e:	4605      	mov	r5, r0
 8022710:	d4e4      	bmi.n	80226dc <_fflush_r+0xc>
 8022712:	89a3      	ldrh	r3, [r4, #12]
 8022714:	059b      	lsls	r3, r3, #22
 8022716:	d4e1      	bmi.n	80226dc <_fflush_r+0xc>
 8022718:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 802271a:	f7ff fbcf 	bl	8021ebc <__retarget_lock_release_recursive>
 802271e:	e7dd      	b.n	80226dc <_fflush_r+0xc>

08022720 <__swhatbuf_r>:
 8022720:	b570      	push	{r4, r5, r6, lr}
 8022722:	460c      	mov	r4, r1
 8022724:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8022728:	2900      	cmp	r1, #0
 802272a:	b096      	sub	sp, #88	@ 0x58
 802272c:	4615      	mov	r5, r2
 802272e:	461e      	mov	r6, r3
 8022730:	da0d      	bge.n	802274e <__swhatbuf_r+0x2e>
 8022732:	89a3      	ldrh	r3, [r4, #12]
 8022734:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8022738:	f04f 0100 	mov.w	r1, #0
 802273c:	bf14      	ite	ne
 802273e:	2340      	movne	r3, #64	@ 0x40
 8022740:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8022744:	2000      	movs	r0, #0
 8022746:	6031      	str	r1, [r6, #0]
 8022748:	602b      	str	r3, [r5, #0]
 802274a:	b016      	add	sp, #88	@ 0x58
 802274c:	bd70      	pop	{r4, r5, r6, pc}
 802274e:	466a      	mov	r2, sp
 8022750:	f000 f848 	bl	80227e4 <_fstat_r>
 8022754:	2800      	cmp	r0, #0
 8022756:	dbec      	blt.n	8022732 <__swhatbuf_r+0x12>
 8022758:	9901      	ldr	r1, [sp, #4]
 802275a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 802275e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8022762:	4259      	negs	r1, r3
 8022764:	4159      	adcs	r1, r3
 8022766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 802276a:	e7eb      	b.n	8022744 <__swhatbuf_r+0x24>

0802276c <__smakebuf_r>:
 802276c:	898b      	ldrh	r3, [r1, #12]
 802276e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8022770:	079d      	lsls	r5, r3, #30
 8022772:	4606      	mov	r6, r0
 8022774:	460c      	mov	r4, r1
 8022776:	d507      	bpl.n	8022788 <__smakebuf_r+0x1c>
 8022778:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 802277c:	6023      	str	r3, [r4, #0]
 802277e:	6123      	str	r3, [r4, #16]
 8022780:	2301      	movs	r3, #1
 8022782:	6163      	str	r3, [r4, #20]
 8022784:	b003      	add	sp, #12
 8022786:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8022788:	ab01      	add	r3, sp, #4
 802278a:	466a      	mov	r2, sp
 802278c:	f7ff ffc8 	bl	8022720 <__swhatbuf_r>
 8022790:	9f00      	ldr	r7, [sp, #0]
 8022792:	4605      	mov	r5, r0
 8022794:	4639      	mov	r1, r7
 8022796:	4630      	mov	r0, r6
 8022798:	f7ff f814 	bl	80217c4 <_malloc_r>
 802279c:	b948      	cbnz	r0, 80227b2 <__smakebuf_r+0x46>
 802279e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80227a2:	059a      	lsls	r2, r3, #22
 80227a4:	d4ee      	bmi.n	8022784 <__smakebuf_r+0x18>
 80227a6:	f023 0303 	bic.w	r3, r3, #3
 80227aa:	f043 0302 	orr.w	r3, r3, #2
 80227ae:	81a3      	strh	r3, [r4, #12]
 80227b0:	e7e2      	b.n	8022778 <__smakebuf_r+0xc>
 80227b2:	89a3      	ldrh	r3, [r4, #12]
 80227b4:	6020      	str	r0, [r4, #0]
 80227b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80227ba:	81a3      	strh	r3, [r4, #12]
 80227bc:	9b01      	ldr	r3, [sp, #4]
 80227be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80227c2:	b15b      	cbz	r3, 80227dc <__smakebuf_r+0x70>
 80227c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80227c8:	4630      	mov	r0, r6
 80227ca:	f000 f81d 	bl	8022808 <_isatty_r>
 80227ce:	b128      	cbz	r0, 80227dc <__smakebuf_r+0x70>
 80227d0:	89a3      	ldrh	r3, [r4, #12]
 80227d2:	f023 0303 	bic.w	r3, r3, #3
 80227d6:	f043 0301 	orr.w	r3, r3, #1
 80227da:	81a3      	strh	r3, [r4, #12]
 80227dc:	89a3      	ldrh	r3, [r4, #12]
 80227de:	431d      	orrs	r5, r3
 80227e0:	81a5      	strh	r5, [r4, #12]
 80227e2:	e7cf      	b.n	8022784 <__smakebuf_r+0x18>

080227e4 <_fstat_r>:
 80227e4:	b538      	push	{r3, r4, r5, lr}
 80227e6:	4d07      	ldr	r5, [pc, #28]	@ (8022804 <_fstat_r+0x20>)
 80227e8:	2300      	movs	r3, #0
 80227ea:	4604      	mov	r4, r0
 80227ec:	4608      	mov	r0, r1
 80227ee:	4611      	mov	r1, r2
 80227f0:	602b      	str	r3, [r5, #0]
 80227f2:	f7df f98e 	bl	8001b12 <_fstat>
 80227f6:	1c43      	adds	r3, r0, #1
 80227f8:	d102      	bne.n	8022800 <_fstat_r+0x1c>
 80227fa:	682b      	ldr	r3, [r5, #0]
 80227fc:	b103      	cbz	r3, 8022800 <_fstat_r+0x1c>
 80227fe:	6023      	str	r3, [r4, #0]
 8022800:	bd38      	pop	{r3, r4, r5, pc}
 8022802:	bf00      	nop
 8022804:	24025f28 	.word	0x24025f28

08022808 <_isatty_r>:
 8022808:	b538      	push	{r3, r4, r5, lr}
 802280a:	4d06      	ldr	r5, [pc, #24]	@ (8022824 <_isatty_r+0x1c>)
 802280c:	2300      	movs	r3, #0
 802280e:	4604      	mov	r4, r0
 8022810:	4608      	mov	r0, r1
 8022812:	602b      	str	r3, [r5, #0]
 8022814:	f7df f982 	bl	8001b1c <_isatty>
 8022818:	1c43      	adds	r3, r0, #1
 802281a:	d102      	bne.n	8022822 <_isatty_r+0x1a>
 802281c:	682b      	ldr	r3, [r5, #0]
 802281e:	b103      	cbz	r3, 8022822 <_isatty_r+0x1a>
 8022820:	6023      	str	r3, [r4, #0]
 8022822:	bd38      	pop	{r3, r4, r5, pc}
 8022824:	24025f28 	.word	0x24025f28

08022828 <_init>:
 8022828:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802282a:	bf00      	nop
 802282c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802282e:	bc08      	pop	{r3}
 8022830:	469e      	mov	lr, r3
 8022832:	4770      	bx	lr

08022834 <_fini>:
 8022834:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8022836:	bf00      	nop
 8022838:	bcf8      	pop	{r3, r4, r5, r6, r7}
 802283a:	bc08      	pop	{r3}
 802283c:	469e      	mov	lr, r3
 802283e:	4770      	bx	lr
